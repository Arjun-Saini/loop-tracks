
/Users/sainihome/Documents/GitHub/loop-tracks/master/target/3.3.0/argon/master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000beb0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bfed0  000bfed0  0000fed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bfef4  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f8  20035040  000bfef8  00025040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000095b8  20035238  20035238  00035238  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000c00f0  000c00f0  000300f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000c0118  000c0118  00030118  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0015e7cc  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00013b18  00000000  00000000  0018e8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004fa2f  00000000  00000000  001a2400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003278  00000000  00000000  001f1e2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000dbc0  00000000  00000000  001f50a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039292  00000000  00000000  00202c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004a285  00000000  00000000  0023bef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015a7d2  00000000  00000000  0028617e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000ae98  00000000  00000000  003e0950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f008 ff51 	bl	bced8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f008 ff73 	bl	bcf28 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	20035040 	.word	0x20035040
   b404c:	000bfef8 	.word	0x000bfef8
   b4050:	20035238 	.word	0x20035238
   b4054:	20035238 	.word	0x20035238
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f007 feb7 	bl	bbdd4 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bfeac 	.word	0x000bfeac
   b4080:	000bfed0 	.word	0x000bfed0

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f002 beca 	b.w	b6e1c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f003 f83b 	bl	b7104 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f007 be57 	b.w	bbd44 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f005 bba7 	b.w	b97e8 <malloc>

000b409a <_Znaj>:
   b409a:	f005 bba5 	b.w	b97e8 <malloc>

000b409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409e:	f005 bbab 	b.w	b97f8 <free>

000b40a2 <_ZdaPv>:
   b40a2:	f005 bba9 	b.w	b97f8 <free>

000b40a6 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a6:	f005 bba7 	b.w	b97f8 <free>

000b40aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40aa:	7800      	ldrb	r0, [r0, #0]
   b40ac:	fab0 f080 	clz	r0, r0
   b40b0:	0940      	lsrs	r0, r0, #5
   b40b2:	4770      	bx	lr

000b40b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b4:	2301      	movs	r3, #1
   b40b6:	7003      	strb	r3, [r0, #0]
   b40b8:	4770      	bx	lr
	...

000b40bc <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40bc:	b510      	push	{r4, lr}
   b40be:	4b03      	ldr	r3, [pc, #12]	; (b40cc <_ZN16JsonParserStaticILj10000ELj1000EED1Ev+0x10>)
   b40c0:	6003      	str	r3, [r0, #0]
   b40c2:	4604      	mov	r4, r0
   b40c4:	f003 ff16 	bl	b7ef4 <_ZN10JsonParserD1Ev>
   b40c8:	4620      	mov	r0, r4
   b40ca:	bd10      	pop	{r4, pc}
   b40cc:	000bf428 	.word	0x000bf428

000b40d0 <_ZN16JsonParserStaticILj10000ELj1000EED0Ev>:
   b40d0:	b510      	push	{r4, lr}
   b40d2:	4604      	mov	r4, r0
   b40d4:	f7ff fff2 	bl	b40bc <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
   b40d8:	4620      	mov	r0, r4
   b40da:	f246 51bc 	movw	r1, #26044	; 0x65bc
   b40de:	f7ff ffe2 	bl	b40a6 <_ZdlPvj>
   b40e2:	4620      	mov	r0, r4
   b40e4:	bd10      	pop	{r4, pc}
	...

000b40e8 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>:

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
   b40e8:	b508      	push	{r3, lr}
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b40ea:	4603      	mov	r3, r0
   b40ec:	b150      	cbz	r0, b4104 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x1c>
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      _GLIBCXX_NODISCARD _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {
	if (__n > this->_M_max_size())
   b40ee:	4a06      	ldr	r2, [pc, #24]	; (b4108 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x20>)
   b40f0:	4290      	cmp	r0, r2
   b40f2:	d901      	bls.n	b40f8 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b40f4:	f007 ff08 	bl	bbf08 <_ZSt17__throw_bad_allocv>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b40f8:	200c      	movs	r0, #12
   b40fa:	4358      	muls	r0, r3
      }
   b40fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4100:	f7ff bfc9 	b.w	b4096 <_Znwj>
   b4104:	bd08      	pop	{r3, pc}
   b4106:	bf00      	nop
   b4108:	0aaaaaaa 	.word	0x0aaaaaaa

000b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>:

      pointer
      _M_local_data()
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b410c:	f100 0308 	add.w	r3, r0, #8
#if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
   b4110:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4112:	4604      	mov	r4, r0
	: allocator_type(__a), _M_p(__dat) { }
   b4114:	6003      	str	r3, [r0, #0]
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b4116:	460d      	mov	r5, r1
   b4118:	b1d9      	cbz	r1, b4152 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x46>
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   b411a:	4608      	mov	r0, r1
   b411c:	f008 ff4c 	bl	bcfb8 <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
   b4120:	280f      	cmp	r0, #15
   b4122:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b4126:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b4128:	d907      	bls.n	b413a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x2e>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   b412a:	2200      	movs	r2, #0
   b412c:	a901      	add	r1, sp, #4
   b412e:	4620      	mov	r0, r4
   b4130:	f007 ff00 	bl	bbf34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b4134:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4136:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4138:	60a3      	str	r3, [r4, #8]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b413a:	4632      	mov	r2, r6
   b413c:	4629      	mov	r1, r5
   b413e:	6820      	ldr	r0, [r4, #0]
   b4140:	f007 ff33 	bl	bbfaa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   b4144:	9b01      	ldr	r3, [sp, #4]
      { __c1 = __c2; }
   b4146:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4148:	6063      	str	r3, [r4, #4]
   b414a:	2100      	movs	r1, #0
   b414c:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b414e:	b002      	add	sp, #8
   b4150:	bd70      	pop	{r4, r5, r6, pc}
	  std::__throw_logic_error(__N("basic_string::"
   b4152:	4801      	ldr	r0, [pc, #4]	; (b4158 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x4c>)
   b4154:	f007 fedb 	bl	bbf0e <_ZSt19__throw_logic_errorPKc>
   b4158:	000bf03c 	.word	0x000bf03c

000b415c <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b415c:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b415e:	4603      	mov	r3, r0
   b4160:	b150      	cbz	r0, b4178 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0+0x1c>
	if (__n > this->_M_max_size())
   b4162:	4a06      	ldr	r2, [pc, #24]	; (b417c <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0+0x20>)
   b4164:	4290      	cmp	r0, r2
   b4166:	d901      	bls.n	b416c <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b4168:	f007 fece 	bl	bbf08 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b416c:	206c      	movs	r0, #108	; 0x6c
   b416e:	4358      	muls	r0, r3
      }
   b4170:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4174:	f7ff bf8f 	b.w	b4096 <_Znwj>
   b4178:	bd08      	pop	{r3, pc}
   b417a:	bf00      	nop
   b417c:	012f684b 	.word	0x012f684b

000b4180 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b4180:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4182:	4603      	mov	r3, r0
   b4184:	b150      	cbz	r0, b419c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x1c>
	if (__n > this->_M_max_size())
   b4186:	4a06      	ldr	r2, [pc, #24]	; (b41a0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x20>)
   b4188:	4290      	cmp	r0, r2
   b418a:	d901      	bls.n	b4190 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b418c:	f007 febc 	bl	bbf08 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4190:	2018      	movs	r0, #24
   b4192:	4358      	muls	r0, r3
      }
   b4194:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4198:	f7ff bf7d 	b.w	b4096 <_Znwj>
   b419c:	bd08      	pop	{r3, pc}
   b419e:	bf00      	nop
   b41a0:	05555555 	.word	0x05555555

000b41a4 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b41a4:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b41a6:	b148      	cbz	r0, b41bc <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b41a8:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   b41ac:	d301      	bcc.n	b41b2 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b41ae:	f007 feab 	bl	bbf08 <_ZSt17__throw_bad_allocv>
      }
   b41b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b41b6:	0080      	lsls	r0, r0, #2
   b41b8:	f7ff bf6d 	b.w	b4096 <_Znwj>
   b41bc:	bd08      	pop	{r3, pc}

000b41be <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b41be:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b41c0:	b148      	cbz	r0, b41d6 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b41c2:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
   b41c6:	d301      	bcc.n	b41cc <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b41c8:	f007 fe9e 	bl	bbf08 <_ZSt17__throw_bad_allocv>
      }
   b41cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b41d0:	00c0      	lsls	r0, r0, #3
   b41d2:	f7ff bf60 	b.w	b4096 <_Znwj>
   b41d6:	bd08      	pop	{r3, pc}

000b41d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>:
      basic_string(const basic_string& __str)
   b41d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b41da:	f100 0308 	add.w	r3, r0, #8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b41de:	6003      	str	r3, [r0, #0]

      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      size_type
      length() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
   b41e0:	e9d1 5300 	ldrd	r5, r3, [r1]
      basic_string(const basic_string& __str)
   b41e4:	4604      	mov	r4, r0
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b41e6:	18ee      	adds	r6, r5, r3
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   b41e8:	b91d      	cbnz	r5, b41f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
   b41ea:	b116      	cbz	r6, b41f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
	  std::__throw_logic_error(__N("basic_string::"
   b41ec:	480c      	ldr	r0, [pc, #48]	; (b4220 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x48>)
   b41ee:	f007 fe8e 	bl	bbf0e <_ZSt19__throw_logic_errorPKc>
	if (__dnew > size_type(_S_local_capacity))
   b41f2:	2b0f      	cmp	r3, #15
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b41f4:	9301      	str	r3, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b41f6:	d907      	bls.n	b4208 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x30>
	    _M_data(_M_create(__dnew, size_type(0)));
   b41f8:	2200      	movs	r2, #0
   b41fa:	a901      	add	r1, sp, #4
   b41fc:	4620      	mov	r0, r4
   b41fe:	f007 fe99 	bl	bbf34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b4202:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4204:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4206:	60a3      	str	r3, [r4, #8]
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b4208:	4632      	mov	r2, r6
   b420a:	4629      	mov	r1, r5
   b420c:	6820      	ldr	r0, [r4, #0]
   b420e:	f007 fec7 	bl	bbfa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	_M_set_length(__dnew);
   b4212:	9b01      	ldr	r3, [sp, #4]
   b4214:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4216:	6063      	str	r3, [r4, #4]
   b4218:	2100      	movs	r1, #0
   b421a:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b421c:	b002      	add	sp, #8
   b421e:	bd70      	pop	{r4, r5, r6, pc}
   b4220:	000bf03c 	.word	0x000bf03c

000b4224 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4224:	6803      	ldr	r3, [r0, #0]
   b4226:	b2c9      	uxtb	r1, r1
   b4228:	689b      	ldr	r3, [r3, #8]
   b422a:	4718      	bx	r3

000b422c <_ZN5Print5writeEPKc.isra.0>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b422c:	b513      	push	{r0, r1, r4, lr}
   b422e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
   b4230:	b161      	cbz	r1, b424c <_ZN5Print5writeEPKc.isra.0+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4232:	4608      	mov	r0, r1
   b4234:	9101      	str	r1, [sp, #4]
   b4236:	f008 febf 	bl	bcfb8 <strlen>
   b423a:	6823      	ldr	r3, [r4, #0]
   b423c:	9901      	ldr	r1, [sp, #4]
   b423e:	68db      	ldr	r3, [r3, #12]
   b4240:	4602      	mov	r2, r0
   b4242:	4620      	mov	r0, r4
    }
   b4244:	b002      	add	sp, #8
   b4246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b424a:	4718      	bx	r3
    }
   b424c:	b002      	add	sp, #8
   b424e:	bd10      	pop	{r4, pc}

000b4250 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>:
  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
   b4250:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b4252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4254:	4604      	mov	r4, r0
   b4256:	460d      	mov	r5, r1
      if (&__x != this)
   b4258:	d025      	beq.n	b42a6 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x56>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b425a:	e9d1 7100 	ldrd	r7, r1, [r1]
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_end_of_storage
			 - this->_M_impl._M_start); }
   b425e:	6800      	ldr	r0, [r0, #0]
   b4260:	68a3      	ldr	r3, [r4, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4262:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b4264:	1a1b      	subs	r3, r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
   b4266:	429e      	cmp	r6, r3
   b4268:	d91e      	bls.n	b42a8 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x58>
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
   b426a:	10f0      	asrs	r0, r6, #3
   b426c:	f7ff ffa7 	bl	b41be <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
   b4270:	2300      	movs	r3, #0
   b4272:	4605      	mov	r5, r0
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
   b4274:	429e      	cmp	r6, r3
   b4276:	d00a      	beq.n	b428e <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x3e>
   */
#if __cplusplus >= 201103L
  template<typename _Tp, typename... _Args>
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4278:	18ea      	adds	r2, r5, r3
   b427a:	bf1c      	itt	ne
   b427c:	18f9      	addne	r1, r7, r3
   b427e:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b4282:	f103 0308 	add.w	r3, r3, #8
   b4286:	bf18      	it	ne
   b4288:	e9c2 0100 	strdne	r0, r1, [r2]
   b428c:	e7f2      	b.n	b4274 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x24>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b428e:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4290:	b118      	cbz	r0, b429a <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x4a>
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
   b4292:	68a1      	ldr	r1, [r4, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b4294:	1a09      	subs	r1, r1, r0
   b4296:	f7ff ff06 	bl	b40a6 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b429a:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b429c:	4435      	add	r5, r6
   b429e:	60a5      	str	r5, [r4, #8]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b42a0:	6823      	ldr	r3, [r4, #0]
   b42a2:	4433      	add	r3, r6
   b42a4:	6063      	str	r3, [r4, #4]
	}
      return *this;
    }
   b42a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b42a8:	6862      	ldr	r2, [r4, #4]
   b42aa:	1a12      	subs	r2, r2, r0
	  else if (size() >= __xlen)
   b42ac:	4296      	cmp	r6, r2
   b42ae:	d806      	bhi.n	b42be <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x6e>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   b42b0:	42b9      	cmp	r1, r7
   b42b2:	d0f5      	beq.n	b42a0 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b42b4:	4632      	mov	r2, r6
   b42b6:	4639      	mov	r1, r7
   b42b8:	f008 fe1c 	bl	bcef4 <memmove>

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b42bc:	e7f0      	b.n	b42a0 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	  if (_Num)
   b42be:	b112      	cbz	r2, b42c6 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x76>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b42c0:	4639      	mov	r1, r7
   b42c2:	f008 fe17 	bl	bcef4 <memmove>
   b42c6:	e9d4 2700 	ldrd	r2, r7, [r4]
   b42ca:	1abb      	subs	r3, r7, r2
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b42cc:	682a      	ldr	r2, [r5, #0]
   b42ce:	686d      	ldr	r5, [r5, #4]
   b42d0:	441a      	add	r2, r3
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   b42d2:	1aad      	subs	r5, r5, r2
					  __x._M_impl._M_finish,
   b42d4:	2300      	movs	r3, #0
	      for (; __first != __last; ++__first, (void)++__cur)
   b42d6:	429d      	cmp	r5, r3
   b42d8:	d0e2      	beq.n	b42a0 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
   b42da:	eb17 0c03 	adds.w	ip, r7, r3
   b42de:	bf1c      	itt	ne
   b42e0:	18d1      	addne	r1, r2, r3
   b42e2:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b42e6:	f103 0308 	add.w	r3, r3, #8
   b42ea:	bf18      	it	ne
   b42ec:	e9cc 0100 	strdne	r0, r1, [ip]
   b42f0:	e7f1      	b.n	b42d6 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x86>
	...

000b42f4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>:
      if (&__x != this)
   b42f4:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b42f6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b42fa:	4604      	mov	r4, r0
   b42fc:	468a      	mov	sl, r1
      if (&__x != this)
   b42fe:	d036      	beq.n	b436e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7a>
   b4300:	e9d1 5b00 	ldrd	r5, fp, [r1]
			 - this->_M_impl._M_start); }
   b4304:	f8d0 9000 	ldr.w	r9, [r0]
   b4308:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b430a:	4a39      	ldr	r2, [pc, #228]	; (b43f0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xfc>)
   b430c:	ebab 0705 	sub.w	r7, fp, r5
			 - this->_M_impl._M_start); }
   b4310:	eba3 0309 	sub.w	r3, r3, r9
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4314:	ea4f 08e7 	mov.w	r8, r7, asr #3
	  if (__xlen > capacity())
   b4318:	42bb      	cmp	r3, r7
   b431a:	fb02 f808 	mul.w	r8, r2, r8
   b431e:	d228      	bcs.n	b4372 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7e>
	  pointer __result = this->_M_allocate(__n);
   b4320:	4640      	mov	r0, r8
   b4322:	f7ff ff2d 	bl	b4180 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
   b4326:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   b4328:	4680      	mov	r8, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b432a:	45ab      	cmp	fp, r5
   b432c:	d00a      	beq.n	b4344 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x50>
   b432e:	f1b8 0f00 	cmp.w	r8, #0
   b4332:	d003      	beq.n	b433c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x48>
   b4334:	4629      	mov	r1, r5
   b4336:	4640      	mov	r0, r8
   b4338:	f7ff ff4e 	bl	b41d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b433c:	f108 0818 	add.w	r8, r8, #24
   b4340:	3518      	adds	r5, #24
   b4342:	e7f2      	b.n	b432a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x36>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4344:	e9d4 5800 	ldrd	r5, r8, [r4]
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   b4348:	45a8      	cmp	r8, r5
   b434a:	d004      	beq.n	b4356 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x62>
      { _M_dispose(); }
   b434c:	4628      	mov	r0, r5
   b434e:	f007 fe13 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4352:	3518      	adds	r5, #24
   b4354:	e7f8      	b.n	b4348 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x54>
	      _M_deallocate(this->_M_impl._M_start,
   b4356:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4358:	b118      	cbz	r0, b4362 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x6e>
			    - this->_M_impl._M_start);
   b435a:	68a1      	ldr	r1, [r4, #8]
   b435c:	1a09      	subs	r1, r1, r0
   b435e:	f7ff fea2 	bl	b40a6 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b4362:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4364:	443e      	add	r6, r7
   b4366:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4368:	6823      	ldr	r3, [r4, #0]
   b436a:	443b      	add	r3, r7
   b436c:	6063      	str	r3, [r4, #4]
    }
   b436e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4372:	6846      	ldr	r6, [r0, #4]
   b4374:	eba6 0609 	sub.w	r6, r6, r9
	  else if (size() >= __xlen)
   b4378:	42b7      	cmp	r7, r6
   b437a:	d819      	bhi.n	b43b0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xbc>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b437c:	4646      	mov	r6, r8
   b437e:	46ca      	mov	sl, r9
   b4380:	2e00      	cmp	r6, #0
   b4382:	dd08      	ble.n	b4396 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xa2>
		  }
	      }
	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
	  }
#endif
	this->_M_assign(__str);
   b4384:	4629      	mov	r1, r5
   b4386:	4650      	mov	r0, sl
   b4388:	f007 fe14 	bl	bbfb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b438c:	3518      	adds	r5, #24
	      ++__result;
   b438e:	f10a 0a18 	add.w	sl, sl, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4392:	3e01      	subs	r6, #1
   b4394:	e7f4      	b.n	b4380 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x8c>
   b4396:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
   b439a:	2518      	movs	r5, #24
      : _M_current(__i) { }
   b439c:	6866      	ldr	r6, [r4, #4]
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b439e:	fb05 9508 	mla	r5, r5, r8, r9
	  for (; __first != __last; ++__first)
   b43a2:	42ae      	cmp	r6, r5
   b43a4:	d0e0      	beq.n	b4368 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
      { _M_dispose(); }
   b43a6:	4628      	mov	r0, r5
   b43a8:	f007 fde6 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b43ac:	3518      	adds	r5, #24
      {
	++_M_current;
	return *this;
   b43ae:	e7f8      	b.n	b43a2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xae>
   b43b0:	10f6      	asrs	r6, r6, #3
   b43b2:	4356      	muls	r6, r2
   b43b4:	2e00      	cmp	r6, #0
   b43b6:	dd08      	ble.n	b43ca <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xd6>
	this->_M_assign(__str);
   b43b8:	4629      	mov	r1, r5
   b43ba:	4648      	mov	r0, r9
   b43bc:	f007 fdfa 	bl	bbfb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b43c0:	3518      	adds	r5, #24
	      ++__result;
   b43c2:	f109 0918 	add.w	r9, r9, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b43c6:	3e01      	subs	r6, #1
   b43c8:	e7f4      	b.n	b43b4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xc0>
   b43ca:	e9d4 5600 	ldrd	r5, r6, [r4]
   b43ce:	1b71      	subs	r1, r6, r5
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b43d0:	f8da 5000 	ldr.w	r5, [sl]
					  __x._M_impl._M_finish,
   b43d4:	f8da 8004 	ldr.w	r8, [sl, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b43d8:	440d      	add	r5, r1
   b43da:	45a8      	cmp	r8, r5
   b43dc:	d0c4      	beq.n	b4368 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b43de:	b11e      	cbz	r6, b43e8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xf4>
   b43e0:	4629      	mov	r1, r5
   b43e2:	4630      	mov	r0, r6
   b43e4:	f7ff fef8 	bl	b41d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b43e8:	3518      	adds	r5, #24
   b43ea:	3618      	adds	r6, #24
   b43ec:	e7f5      	b.n	b43da <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xe6>
   b43ee:	bf00      	nop
   b43f0:	aaaaaaab 	.word	0xaaaaaaab

000b43f4 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43f4:	b40e      	push	{r1, r2, r3}
   b43f6:	b503      	push	{r0, r1, lr}
   b43f8:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b43fa:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43fc:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4400:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4402:	f006 fe6a 	bl	bb0da <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4406:	b002      	add	sp, #8
   b4408:	f85d eb04 	ldr.w	lr, [sp], #4
   b440c:	b003      	add	sp, #12
   b440e:	4770      	bx	lr

000b4410 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4410:	b40e      	push	{r1, r2, r3}
   b4412:	b503      	push	{r0, r1, lr}
   b4414:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b4416:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4418:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b441c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b441e:	f006 fe5c 	bl	bb0da <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4422:	b002      	add	sp, #8
   b4424:	f85d eb04 	ldr.w	lr, [sp], #4
   b4428:	b003      	add	sp, #12
   b442a:	4770      	bx	lr

000b442c <_Z16randomizeAddressv>:
    Serial.println();
  }
}

//clears up conflicts with multiple i2c slaves having the same address
void randomizeAddress(){
   b442c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4430:	b08d      	sub	sp, #52	; 0x34
  Wire.lock();
   b4432:	f007 fd03 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b4436:	f006 fc93 	bl	bad60 <_ZN7TwoWire4lockEv>
	return *(this->_M_impl._M_start + __n);
   b443a:	4faf      	ldr	r7, [pc, #700]	; (b46f8 <_Z16randomizeAddressv+0x2cc>)
  while(slaveCount < cities[cityIndex].slaveCountExpected){
   b443c:	4daf      	ldr	r5, [pc, #700]	; (b46fc <_Z16randomizeAddressv+0x2d0>)
   b443e:	4bb0      	ldr	r3, [pc, #704]	; (b4700 <_Z16randomizeAddressv+0x2d4>)
   b4440:	681a      	ldr	r2, [r3, #0]
   b4442:	683b      	ldr	r3, [r7, #0]
   b4444:	2128      	movs	r1, #40	; 0x28
   b4446:	fb01 3302 	mla	r3, r1, r2, r3
   b444a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b444c:	682b      	ldr	r3, [r5, #0]
   b444e:	429a      	cmp	r2, r3
   b4450:	f340 8115 	ble.w	b467e <_Z16randomizeAddressv+0x252>
    Serial.printlnf("slaveCount: %i", slaveCount);
   b4454:	f007 fba4 	bl	bbba0 <_Z16_fetch_usbserialv>
   b4458:	682a      	ldr	r2, [r5, #0]
   b445a:	49aa      	ldr	r1, [pc, #680]	; (b4704 <_Z16randomizeAddressv+0x2d8>)

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b445c:	f8df 82cc 	ldr.w	r8, [pc, #716]	; b472c <_Z16randomizeAddressv+0x300>
   b4460:	f8df 92cc 	ldr.w	r9, [pc, #716]	; b4730 <_Z16randomizeAddressv+0x304>
      //gets UUID from address and sends it back to slave, slave changes address if conflict
      Wire.requestFrom(i, 24);
      if(Wire.available() > 0){
        Serial.println("transmission recieved from: " + String(i));

        String inputBuffer = "";
   b4464:	4ea8      	ldr	r6, [pc, #672]	; (b4708 <_Z16randomizeAddressv+0x2dc>)
    Serial.printlnf("slaveCount: %i", slaveCount);
   b4466:	f7ff ffd3 	bl	b4410 <_ZN5Print8printlnfEPKcz>
    slaveCount = 0;
   b446a:	2300      	movs	r3, #0
   b446c:	602b      	str	r3, [r5, #0]
    for(int i = 8; i <= 119; i++){
   b446e:	2408      	movs	r4, #8
      if(i == 41){
   b4470:	2c29      	cmp	r4, #41	; 0x29
   b4472:	f000 80fb 	beq.w	b466c <_Z16randomizeAddressv+0x240>
      Serial.println("\nrequest code 1, address: " + String(i));
   b4476:	f007 fb93 	bl	bbba0 <_Z16_fetch_usbserialv>
   b447a:	4641      	mov	r1, r8
   b447c:	4682      	mov	sl, r0
   b447e:	a808      	add	r0, sp, #32
   b4480:	f006 fead 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
   b4484:	220a      	movs	r2, #10
   b4486:	4621      	mov	r1, r4
   b4488:	a804      	add	r0, sp, #16
   b448a:	f006 ff02 	bl	bb292 <_ZN6StringC1Eih>
   b448e:	a904      	add	r1, sp, #16
   b4490:	a808      	add	r0, sp, #32
   b4492:	f006 ff39 	bl	bb308 <_ZplRK15StringSumHelperRK6String>
   b4496:	6801      	ldr	r1, [r0, #0]
   b4498:	4650      	mov	r0, sl
   b449a:	f006 fdf6 	bl	bb08a <_ZN5Print7printlnEPKc>
   b449e:	a804      	add	r0, sp, #16
   b44a0:	f006 fe52 	bl	bb148 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b44a4:	a808      	add	r0, sp, #32
   b44a6:	f006 fe4f 	bl	bb148 <_ZN6StringD1Ev>
      Wire.beginTransmission(i);
   b44aa:	f007 fcc7 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b44ae:	4621      	mov	r1, r4
   b44b0:	f006 fc4c 	bl	bad4c <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('1');
   b44b4:	f007 fcc2 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b44b8:	2131      	movs	r1, #49	; 0x31
   b44ba:	f7ff feb3 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b44be:	fa5f fb84 	uxtb.w	fp, r4
   b44c2:	f007 fcbb 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b44c6:	f006 fc48 	bl	bad5a <_ZN7TwoWire15endTransmissionEv>
      Wire.requestFrom(i, 24);
   b44ca:	f007 fcb7 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b44ce:	2218      	movs	r2, #24
   b44d0:	4659      	mov	r1, fp
   b44d2:	f006 fc34 	bl	bad3e <_ZN7TwoWire11requestFromEhj>
      if(Wire.available() > 0){
   b44d6:	f007 fcb1 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b44da:	6803      	ldr	r3, [r0, #0]
   b44dc:	691b      	ldr	r3, [r3, #16]
   b44de:	4798      	blx	r3
   b44e0:	2800      	cmp	r0, #0
   b44e2:	f340 80c3 	ble.w	b466c <_Z16randomizeAddressv+0x240>
        Serial.println("transmission recieved from: " + String(i));
   b44e6:	f007 fb5b 	bl	bbba0 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b44ea:	4649      	mov	r1, r9
   b44ec:	4682      	mov	sl, r0
   b44ee:	a808      	add	r0, sp, #32
   b44f0:	f006 fe75 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
   b44f4:	220a      	movs	r2, #10
   b44f6:	4621      	mov	r1, r4
   b44f8:	a804      	add	r0, sp, #16
   b44fa:	f006 feca 	bl	bb292 <_ZN6StringC1Eih>
   b44fe:	a904      	add	r1, sp, #16
   b4500:	a808      	add	r0, sp, #32
   b4502:	f006 ff01 	bl	bb308 <_ZplRK15StringSumHelperRK6String>
   b4506:	6801      	ldr	r1, [r0, #0]
   b4508:	4650      	mov	r0, sl
   b450a:	f006 fdbe 	bl	bb08a <_ZN5Print7printlnEPKc>
   b450e:	a804      	add	r0, sp, #16
   b4510:	f006 fe1a 	bl	bb148 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4514:	a808      	add	r0, sp, #32
   b4516:	f006 fe17 	bl	bb148 <_ZN6StringD1Ev>
        String inputBuffer = "";
   b451a:	4631      	mov	r1, r6
   b451c:	4668      	mov	r0, sp
   b451e:	f006 fe5e 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
   b4522:	f04f 0a18 	mov.w	sl, #24
        char c;
        for(int j = 0; j < 24; j++){
          c = Wire.read();
   b4526:	f007 fc89 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b452a:	6803      	ldr	r3, [r0, #0]
   b452c:	695b      	ldr	r3, [r3, #20]
   b452e:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b4530:	b2c1      	uxtb	r1, r0
   b4532:	4668      	mov	r0, sp
   b4534:	f006 fedb 	bl	bb2ee <_ZN6String6concatEc>
        for(int j = 0; j < 24; j++){
   b4538:	f1ba 0a01 	subs.w	sl, sl, #1
   b453c:	d1f3      	bne.n	b4526 <_Z16randomizeAddressv+0xfa>
          inputBuffer += c;
        }
        Wire.beginTransmission(i);
   b453e:	f007 fc7d 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b4542:	4621      	mov	r1, r4
   b4544:	f006 fc02 	bl	bad4c <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(inputBuffer);
   b4548:	f007 fc78 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b454c:	9900      	ldr	r1, [sp, #0]
   b454e:	f7ff fe6d 	bl	b422c <_ZN5Print5writeEPKc.isra.0>
        Serial.println("device id: " + inputBuffer);
   b4552:	f007 fb25 	bl	bbba0 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4556:	496d      	ldr	r1, [pc, #436]	; (b470c <_Z16randomizeAddressv+0x2e0>)
   b4558:	4682      	mov	sl, r0
   b455a:	a808      	add	r0, sp, #32
   b455c:	f006 fe3f 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
   b4560:	4669      	mov	r1, sp
   b4562:	a808      	add	r0, sp, #32
   b4564:	f006 fed0 	bl	bb308 <_ZplRK15StringSumHelperRK6String>
   b4568:	6801      	ldr	r1, [r0, #0]
   b456a:	4650      	mov	r0, sl
   b456c:	f006 fd8d 	bl	bb08a <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4570:	a808      	add	r0, sp, #32
   b4572:	f006 fde9 	bl	bb148 <_ZN6StringD1Ev>
        Wire.endTransmission();
   b4576:	f007 fc61 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b457a:	f006 fbee 	bl	bad5a <_ZN7TwoWire15endTransmissionEv>
        Serial.println("transmission sent to: " + String(i));
   b457e:	f007 fb0f 	bl	bbba0 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4582:	4963      	ldr	r1, [pc, #396]	; (b4710 <_Z16randomizeAddressv+0x2e4>)
   b4584:	4682      	mov	sl, r0
   b4586:	a808      	add	r0, sp, #32
   b4588:	f006 fe29 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
   b458c:	220a      	movs	r2, #10
   b458e:	4621      	mov	r1, r4
   b4590:	a804      	add	r0, sp, #16
   b4592:	f006 fe7e 	bl	bb292 <_ZN6StringC1Eih>
   b4596:	a904      	add	r1, sp, #16
   b4598:	a808      	add	r0, sp, #32
   b459a:	f006 feb5 	bl	bb308 <_ZplRK15StringSumHelperRK6String>
   b459e:	6801      	ldr	r1, [r0, #0]
   b45a0:	4650      	mov	r0, sl
   b45a2:	f006 fd72 	bl	bb08a <_ZN5Print7printlnEPKc>
   b45a6:	a804      	add	r0, sp, #16
   b45a8:	f006 fdce 	bl	bb148 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b45ac:	a808      	add	r0, sp, #32
   b45ae:	f006 fdcb 	bl	bb148 <_ZN6StringD1Ev>

        Wire.beginTransmission(i);
   b45b2:	f007 fc43 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b45b6:	4621      	mov	r1, r4
   b45b8:	f006 fbc8 	bl	bad4c <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('2');
   b45bc:	f007 fc3e 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b45c0:	2132      	movs	r1, #50	; 0x32
   b45c2:	f7ff fe2f 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b45c6:	f007 fc39 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b45ca:	f006 fbc6 	bl	bad5a <_ZN7TwoWire15endTransmissionEv>

        Serial.println("request code 2, address: " + String(i));
   b45ce:	f007 fae7 	bl	bbba0 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b45d2:	4950      	ldr	r1, [pc, #320]	; (b4714 <_Z16randomizeAddressv+0x2e8>)
   b45d4:	4682      	mov	sl, r0
   b45d6:	a808      	add	r0, sp, #32
   b45d8:	f006 fe01 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
   b45dc:	220a      	movs	r2, #10
   b45de:	4621      	mov	r1, r4
   b45e0:	a804      	add	r0, sp, #16
   b45e2:	f006 fe56 	bl	bb292 <_ZN6StringC1Eih>
   b45e6:	a904      	add	r1, sp, #16
   b45e8:	a808      	add	r0, sp, #32
   b45ea:	f006 fe8d 	bl	bb308 <_ZplRK15StringSumHelperRK6String>
   b45ee:	6801      	ldr	r1, [r0, #0]
   b45f0:	4650      	mov	r0, sl
   b45f2:	f006 fd4a 	bl	bb08a <_ZN5Print7printlnEPKc>
   b45f6:	a804      	add	r0, sp, #16
   b45f8:	f006 fda6 	bl	bb148 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b45fc:	a808      	add	r0, sp, #32
   b45fe:	f006 fda3 	bl	bb148 <_ZN6StringD1Ev>
        Wire.requestFrom(i, 4);
   b4602:	f007 fc1b 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b4606:	2204      	movs	r2, #4
   b4608:	4659      	mov	r1, fp
   b460a:	f006 fb98 	bl	bad3e <_ZN7TwoWire11requestFromEhj>
        inputBuffer = "";
   b460e:	4631      	mov	r1, r6
   b4610:	4668      	mov	r0, sp
   b4612:	f006 fe2c 	bl	bb26e <_ZN6StringaSEPKc>
   b4616:	f04f 0a04 	mov.w	sl, #4
        for(int j = 0; j < 4; j++){
          inputBuffer += (char)Wire.read();
   b461a:	f007 fc0f 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b461e:	6803      	ldr	r3, [r0, #0]
   b4620:	695b      	ldr	r3, [r3, #20]
   b4622:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b4624:	b2c1      	uxtb	r1, r0
   b4626:	4668      	mov	r0, sp
   b4628:	f006 fe61 	bl	bb2ee <_ZN6String6concatEc>
        for(int j = 0; j < 4; j++){
   b462c:	f1ba 0a01 	subs.w	sl, sl, #1
   b4630:	d1f3      	bne.n	b461a <_Z16randomizeAddressv+0x1ee>
        }
        
        Serial.println("conflict verification: " + inputBuffer);
   b4632:	f007 fab5 	bl	bbba0 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4636:	4938      	ldr	r1, [pc, #224]	; (b4718 <_Z16randomizeAddressv+0x2ec>)
   b4638:	4682      	mov	sl, r0
   b463a:	a808      	add	r0, sp, #32
   b463c:	f006 fdcf 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
   b4640:	4669      	mov	r1, sp
   b4642:	a808      	add	r0, sp, #32
   b4644:	f006 fe60 	bl	bb308 <_ZplRK15StringSumHelperRK6String>
   b4648:	6801      	ldr	r1, [r0, #0]
   b464a:	4650      	mov	r0, sl
   b464c:	f006 fd1d 	bl	bb08a <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4650:	a808      	add	r0, sp, #32
   b4652:	f006 fd79 	bl	bb148 <_ZN6StringD1Ev>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b4656:	4931      	ldr	r1, [pc, #196]	; (b471c <_Z16randomizeAddressv+0x2f0>)
   b4658:	4668      	mov	r0, sp
   b465a:	f006 fe98 	bl	bb38e <_ZNK6String6equalsEPKc>
        if(inputBuffer != "pass"){
   b465e:	b150      	cbz	r0, b4676 <_Z16randomizeAddressv+0x24a>
          break;
        }
        slaveCount++;
   b4660:	682b      	ldr	r3, [r5, #0]
        String inputBuffer = "";
   b4662:	4668      	mov	r0, sp
        slaveCount++;
   b4664:	3301      	adds	r3, #1
   b4666:	602b      	str	r3, [r5, #0]
        String inputBuffer = "";
   b4668:	f006 fd6e 	bl	bb148 <_ZN6StringD1Ev>
    for(int i = 8; i <= 119; i++){
   b466c:	3401      	adds	r4, #1
   b466e:	2c78      	cmp	r4, #120	; 0x78
   b4670:	f47f aefe 	bne.w	b4470 <_Z16randomizeAddressv+0x44>
   b4674:	e6e3      	b.n	b443e <_Z16randomizeAddressv+0x12>
   b4676:	4668      	mov	r0, sp
   b4678:	f006 fd66 	bl	bb148 <_ZN6StringD1Ev>
   b467c:	e6df      	b.n	b443e <_Z16randomizeAddressv+0x12>
      }
    }
  }

  Serial.println("\nConnected to: ");
   b467e:	f007 fa8f 	bl	bbba0 <_Z16_fetch_usbserialv>
   b4682:	4927      	ldr	r1, [pc, #156]	; (b4720 <_Z16randomizeAddressv+0x2f4>)
    Wire.endTransmission();

    Wire.requestFrom(i, 24);
    if(Wire.available() > 0){
      Serial.print(i);
      Serial.print(", ");
   b4684:	4e27      	ldr	r6, [pc, #156]	; (b4724 <_Z16randomizeAddressv+0x2f8>)
   b4686:	4f28      	ldr	r7, [pc, #160]	; (b4728 <_Z16randomizeAddressv+0x2fc>)
  Serial.println("\nConnected to: ");
   b4688:	f006 fcff 	bl	bb08a <_ZN5Print7printlnEPKc>
  for(int i = 8; i<= 119; i++){
   b468c:	2408      	movs	r4, #8
  int count = 0;
   b468e:	2500      	movs	r5, #0
    Wire.beginTransmission(i);
   b4690:	f007 fbd4 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b4694:	4621      	mov	r1, r4
   b4696:	f006 fb59 	bl	bad4c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('1');
   b469a:	f007 fbcf 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b469e:	2131      	movs	r1, #49	; 0x31
   b46a0:	f7ff fdc0 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b46a4:	f007 fbca 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b46a8:	f006 fb57 	bl	bad5a <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(i, 24);
   b46ac:	f007 fbc6 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b46b0:	2218      	movs	r2, #24
   b46b2:	b2e1      	uxtb	r1, r4
   b46b4:	f006 fb43 	bl	bad3e <_ZN7TwoWire11requestFromEhj>
    if(Wire.available() > 0){
   b46b8:	f007 fbc0 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b46bc:	6803      	ldr	r3, [r0, #0]
   b46be:	691b      	ldr	r3, [r3, #16]
   b46c0:	4798      	blx	r3
   b46c2:	2800      	cmp	r0, #0
   b46c4:	dd0e      	ble.n	b46e4 <_Z16randomizeAddressv+0x2b8>
      Serial.print(i);
   b46c6:	f007 fa6b 	bl	bbba0 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b46ca:	220a      	movs	r2, #10
   b46cc:	4621      	mov	r1, r4
   b46ce:	f006 fce6 	bl	bb09e <_ZN5Print11printNumberEmh>
      Serial.print(", ");
   b46d2:	f007 fa65 	bl	bbba0 <_Z16_fetch_usbserialv>
   b46d6:	4631      	mov	r1, r6
   b46d8:	f006 fcc4 	bl	bb064 <_ZN5Print5printEPKc>

      addressArr[count++] = i;
   b46dc:	683b      	ldr	r3, [r7, #0]
   b46de:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
   b46e2:	3501      	adds	r5, #1
  for(int i = 8; i<= 119; i++){
   b46e4:	3401      	adds	r4, #1
   b46e6:	2c78      	cmp	r4, #120	; 0x78
   b46e8:	d1d2      	bne.n	b4690 <_Z16randomizeAddressv+0x264>
    }
  }
  Wire.unlock();
   b46ea:	f007 fba7 	bl	bbe3c <_Z19__fetch_global_Wirev>
}
   b46ee:	b00d      	add	sp, #52	; 0x34
   b46f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Wire.unlock();
   b46f4:	f006 bb3d 	b.w	bad72 <_ZN7TwoWire6unlockEv>
   b46f8:	200353e8 	.word	0x200353e8
   b46fc:	2003e6a0 	.word	0x2003e6a0
   b4700:	20035040 	.word	0x20035040
   b4704:	000bf066 	.word	0x000bf066
   b4708:	000bf5d2 	.word	0x000bf5d2
   b470c:	000bf0ad 	.word	0x000bf0ad
   b4710:	000bf0b9 	.word	0x000bf0b9
   b4714:	000bf0d0 	.word	0x000bf0d0
   b4718:	000bf0ea 	.word	0x000bf0ea
   b471c:	000bf102 	.word	0x000bf102
   b4720:	000bf107 	.word	0x000bf107
   b4724:	000bf388 	.word	0x000bf388
   b4728:	20035290 	.word	0x20035290
   b472c:	000bf075 	.word	0x000bf075
   b4730:	000bf090 	.word	0x000bf090

000b4734 <_Z17acquireWireBufferv>:
    Serial.println("reset done");
  }
  Wire.unlock();
}

hal_i2c_config_t acquireWireBuffer() {
   b4734:	b538      	push	{r3, r4, r5, lr}
    hal_i2c_config_t config = {
   b4736:	f44f 7500 	mov.w	r5, #512	; 0x200
   b473a:	2314      	movs	r3, #20
hal_i2c_config_t acquireWireBuffer() {
   b473c:	4604      	mov	r4, r0
    hal_i2c_config_t config = {
   b473e:	6003      	str	r3, [r0, #0]
   b4740:	6085      	str	r5, [r0, #8]
   b4742:	6105      	str	r5, [r0, #16]
        .size = sizeof(hal_i2c_config_t),
        .version = HAL_I2C_CONFIG_VERSION_1,
        .rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4744:	4905      	ldr	r1, [pc, #20]	; (b475c <_Z17acquireWireBufferv+0x28>)
   b4746:	4628      	mov	r0, r5
   b4748:	f007 fbdc 	bl	bbf04 <_ZnajRKSt9nothrow_t>
        .rx_buffer_size = I2C_BUFFER_SIZE,
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b474c:	4903      	ldr	r1, [pc, #12]	; (b475c <_Z17acquireWireBufferv+0x28>)
        .tx_buffer_size = I2C_BUFFER_SIZE
    };
   b474e:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4750:	4628      	mov	r0, r5
   b4752:	f007 fbd7 	bl	bbf04 <_ZnajRKSt9nothrow_t>
    };
   b4756:	60e0      	str	r0, [r4, #12]
    return config;
}
   b4758:	4620      	mov	r0, r4
   b475a:	bd38      	pop	{r3, r4, r5, pc}
   b475c:	000bf9e8 	.word	0x000bf9e8

000b4760 <_Z9lightshowi>:

void lightshow(int length){
   b4760:	b570      	push	{r4, r5, r6, lr}
   b4762:	4606      	mov	r6, r0
  Wire.lock();
   b4764:	f007 fb6a 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b4768:	f006 fafa 	bl	bad60 <_ZN7TwoWire4lockEv>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b476c:	4c1d      	ldr	r4, [pc, #116]	; (b47e4 <_Z9lightshowi+0x84>)
  for(int i = 0; i < addressArr.size(); i++){
   b476e:	2500      	movs	r5, #0
   b4770:	e9d4 2300 	ldrd	r2, r3, [r4]
   b4774:	1a9b      	subs	r3, r3, r2
   b4776:	ebb5 0fa3 	cmp.w	r5, r3, asr #2
   b477a:	d211      	bcs.n	b47a0 <_Z9lightshowi+0x40>
    Wire.beginTransmission(addressArr[i]);
   b477c:	f007 fb5e 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b4780:	6823      	ldr	r3, [r4, #0]
   b4782:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   b4786:	f006 fae1 	bl	bad4c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('3');
   b478a:	f007 fb57 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b478e:	2133      	movs	r1, #51	; 0x33
   b4790:	f7ff fd48 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b4794:	f007 fb52 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b4798:	f006 fadf 	bl	bad5a <_ZN7TwoWire15endTransmissionEv>
  for(int i = 0; i < addressArr.size(); i++){
   b479c:	3501      	adds	r5, #1
   b479e:	e7e7      	b.n	b4770 <_Z9lightshowi+0x10>
  }
  delay(length);
   b47a0:	4630      	mov	r0, r6
   b47a2:	f005 f871 	bl	b9888 <delay>
  for(int i = 0; i < addressArr.size(); i++){
   b47a6:	2500      	movs	r5, #0
   b47a8:	e9d4 2300 	ldrd	r2, r3, [r4]
   b47ac:	1a9b      	subs	r3, r3, r2
   b47ae:	ebb5 0fa3 	cmp.w	r5, r3, asr #2
   b47b2:	d211      	bcs.n	b47d8 <_Z9lightshowi+0x78>
    Wire.beginTransmission(addressArr[i]);
   b47b4:	f007 fb42 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b47b8:	6823      	ldr	r3, [r4, #0]
   b47ba:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   b47be:	f006 fac5 	bl	bad4c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('4');
   b47c2:	f007 fb3b 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b47c6:	2134      	movs	r1, #52	; 0x34
   b47c8:	f7ff fd2c 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b47cc:	f007 fb36 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b47d0:	f006 fac3 	bl	bad5a <_ZN7TwoWire15endTransmissionEv>
  for(int i = 0; i < addressArr.size(); i++){
   b47d4:	3501      	adds	r5, #1
   b47d6:	e7e7      	b.n	b47a8 <_Z9lightshowi+0x48>
  }
  Wire.unlock();
   b47d8:	f007 fb30 	bl	bbe3c <_Z19__fetch_global_Wirev>
}
   b47dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Wire.unlock();
   b47e0:	f006 bac7 	b.w	bad72 <_ZN7TwoWire6unlockEv>
   b47e4:	20035290 	.word	0x20035290

000b47e8 <_Z8callbackPcPhj>:

void callback(char* topic, byte* payload, unsigned int length){
   b47e8:	b508      	push	{r3, lr}
  Serial.println("twitter");
   b47ea:	f007 f9d9 	bl	bbba0 <_Z16_fetch_usbserialv>
   b47ee:	4904      	ldr	r1, [pc, #16]	; (b4800 <_Z8callbackPcPhj+0x18>)
   b47f0:	f006 fc4b 	bl	bb08a <_ZN5Print7printlnEPKc>
  lightshow(3000);
   b47f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  lightshow(3000);
   b47f8:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b47fc:	f7ff bfb0 	b.w	b4760 <_Z9lightshowi>
   b4800:	000bf374 	.word	0x000bf374

000b4804 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4804:	b510      	push	{r4, lr}
   b4806:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4808:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b480a:	b118      	cbz	r0, b4814 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b480c:	68a1      	ldr	r1, [r4, #8]
   b480e:	1a09      	subs	r1, r1, r0
   b4810:	f7ff fc49 	bl	b40a6 <_ZdlPvj>
      }
   b4814:	4620      	mov	r0, r4
   b4816:	bd10      	pop	{r4, pc}

000b4818 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4818:	b510      	push	{r4, lr}
   b481a:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b481c:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b481e:	b118      	cbz	r0, b4828 <_ZNSt12_Vector_baseIfSaIfEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4820:	68a1      	ldr	r1, [r4, #8]
   b4822:	1a09      	subs	r1, r1, r0
   b4824:	f7ff fc3f 	bl	b40a6 <_ZdlPvj>
      }
   b4828:	4620      	mov	r0, r4
   b482a:	bd10      	pop	{r4, pc}

000b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b482c:	b510      	push	{r4, lr}
   b482e:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4830:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b4832:	b118      	cbz	r0, b483c <_ZNSt12_Vector_baseIiSaIiEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4834:	68a1      	ldr	r1, [r4, #8]
   b4836:	1a09      	subs	r1, r1, r0
   b4838:	f7ff fc35 	bl	b40a6 <_ZdlPvj>
      }
   b483c:	4620      	mov	r0, r4
   b483e:	bd10      	pop	{r4, pc}

000b4840 <_ZNSt6vectorIiSaIiEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
   b4840:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
   b4842:	680d      	ldr	r5, [r1, #0]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4844:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
   b4846:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
   b484a:	6005      	str	r5, [r0, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
   b484c:	b085      	sub	sp, #20
	  _M_finish = __x._M_finish;
   b484e:	684d      	ldr	r5, [r1, #4]
   b4850:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4852:	688d      	ldr	r5, [r1, #8]
   b4854:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
   b4856:	2300      	movs	r3, #0
	  _M_end_of_storage = __x._M_end_of_storage;
   b4858:	6085      	str	r5, [r0, #8]
	  _M_finish = __x._M_finish;
   b485a:	e9c1 3300 	strd	r3, r3, [r1]
	  _M_end_of_storage = __x._M_end_of_storage;
   b485e:	608b      	str	r3, [r1, #8]
      }
   b4860:	a801      	add	r0, sp, #4
	  _M_finish = __x._M_finish;
   b4862:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
   b4866:	f7ff ffe1 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
      }
   b486a:	b005      	add	sp, #20
   b486c:	bd30      	pop	{r4, r5, pc}

000b486e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b486e:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4870:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   b4874:	4604      	mov	r4, r0
	  for (; __first != __last; ++__first)
   b4876:	42ae      	cmp	r6, r5
   b4878:	d004      	beq.n	b4884 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x16>
      { _M_dispose(); }
   b487a:	4628      	mov	r0, r5
   b487c:	f007 fb7c 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4880:	3518      	adds	r5, #24
   b4882:	e7f8      	b.n	b4876 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   b4884:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4886:	b118      	cbz	r0, b4890 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x22>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4888:	68a1      	ldr	r1, [r4, #8]
   b488a:	1a09      	subs	r1, r1, r0
   b488c:	f7ff fc0b 	bl	b40a6 <_ZdlPvj>
      }
   b4890:	4620      	mov	r0, r4
   b4892:	bd70      	pop	{r4, r5, r6, pc}

000b4894 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>:

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4894:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
      vector(size_type __n, const value_type& __value,
   b4898:	b570      	push	{r4, r5, r6, lr}
   b489a:	4604      	mov	r4, r0
   b489c:	460d      	mov	r5, r1
   b489e:	4616      	mov	r6, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b48a0:	d302      	bcc.n	b48a8 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x14>
	  __throw_length_error(
   b48a2:	480c      	ldr	r0, [pc, #48]	; (b48d4 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x40>)
   b48a4:	f007 fb36 	bl	bbf14 <_ZSt20__throw_length_errorPKc>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b48a8:	2300      	movs	r3, #0
   b48aa:	e9c0 3300 	strd	r3, r3, [r0]
   b48ae:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b48b0:	4608      	mov	r0, r1
   b48b2:	f7ff fc77 	bl	b41a4 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b48b6:	eb00 0385 	add.w	r3, r0, r5, lsl #2
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b48ba:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b48be:	60a3      	str	r3, [r4, #8]
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
   b48c0:	b12d      	cbz	r5, b48ce <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x3a>
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
   b48c2:	6832      	ldr	r2, [r6, #0]
      for (; __first != __last; ++__first)
   b48c4:	4283      	cmp	r3, r0
   b48c6:	d002      	beq.n	b48ce <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x3a>
	*__first = __tmp;
   b48c8:	f840 2b04 	str.w	r2, [r0], #4
      for (; __first != __last; ++__first)
   b48cc:	e7fa      	b.n	b48c4 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x30>
	this->_M_impl._M_finish =
   b48ce:	6060      	str	r0, [r4, #4]
      { _M_fill_initialize(__n, __value); }
   b48d0:	4620      	mov	r0, r4
   b48d2:	bd70      	pop	{r4, r5, r6, pc}
   b48d4:	000bf117 	.word	0x000bf117

000b48d8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
   b48d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b48dc:	2400      	movs	r4, #0
      vector(initializer_list<value_type> __l,
   b48de:	ab02      	add	r3, sp, #8
   b48e0:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b48e4:	e9c0 4400 	strd	r4, r4, [r0]
      constexpr const_iterator
      begin() const noexcept { return _M_array; }

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
   b48e8:	4613      	mov	r3, r2
      vector(initializer_list<value_type> __l,
   b48ea:	4605      	mov	r5, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b48ec:	6084      	str	r4, [r0, #8]
   b48ee:	00d7      	lsls	r7, r2, #3
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b48f0:	f342 001c 	sbfx	r0, r2, #0, #29
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b48f4:	4a10      	ldr	r2, [pc, #64]	; (b4938 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x60>)
   b48f6:	ebb2 0fc3 	cmp.w	r2, r3, lsl #3
   b48fa:	4688      	mov	r8, r1
   b48fc:	d202      	bcs.n	b4904 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x2c>
	  __throw_length_error(
   b48fe:	480f      	ldr	r0, [pc, #60]	; (b493c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x64>)
   b4900:	f007 fb08 	bl	bbf14 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4904:	f7ff fc5b 	bl	b41be <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4908:	19c6      	adds	r6, r0, r7
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b490a:	4602      	mov	r2, r0
   b490c:	6028      	str	r0, [r5, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b490e:	60ae      	str	r6, [r5, #8]
   b4910:	4623      	mov	r3, r4
   b4912:	429f      	cmp	r7, r3
   b4914:	d00b      	beq.n	b492e <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x56>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4916:	18d4      	adds	r4, r2, r3
   b4918:	bf1c      	itt	ne
   b491a:	eb08 0103 	addne.w	r1, r8, r3
   b491e:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b4922:	f103 0308 	add.w	r3, r3, #8
   b4926:	bf18      	it	ne
   b4928:	e9c4 0100 	strdne	r0, r1, [r4]
   b492c:	e7f1      	b.n	b4912 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x3a>
      }
   b492e:	4628      	mov	r0, r5
	  this->_M_impl._M_finish =
   b4930:	606e      	str	r6, [r5, #4]
      }
   b4932:	b002      	add	sp, #8
   b4934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4938:	7ffffff8 	.word	0x7ffffff8
   b493c:	000bf117 	.word	0x000bf117

000b4940 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>:
      vector(initializer_list<value_type> __l,
   b4940:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4944:	ab02      	add	r3, sp, #8
   b4946:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b494a:	2300      	movs	r3, #0
   b494c:	e9c0 3300 	strd	r3, r3, [r0]
   b4950:	6083      	str	r3, [r0, #8]
   b4952:	4616      	mov	r6, r2
   b4954:	2318      	movs	r3, #24
   b4956:	435e      	muls	r6, r3
   b4958:	4b10      	ldr	r3, [pc, #64]	; (b499c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x5c>)
      vector(initializer_list<value_type> __l,
   b495a:	4604      	mov	r4, r0
   b495c:	10f0      	asrs	r0, r6, #3
   b495e:	4358      	muls	r0, r3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4960:	4b0f      	ldr	r3, [pc, #60]	; (b49a0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x60>)
   b4962:	429e      	cmp	r6, r3
   b4964:	460f      	mov	r7, r1
   b4966:	eb01 0806 	add.w	r8, r1, r6
   b496a:	d902      	bls.n	b4972 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x32>
	  __throw_length_error(
   b496c:	480d      	ldr	r0, [pc, #52]	; (b49a4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x64>)
   b496e:	f007 fad1 	bl	bbf14 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4972:	f7ff fc05 	bl	b4180 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4976:	4406      	add	r6, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4978:	4605      	mov	r5, r0
   b497a:	6020      	str	r0, [r4, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b497c:	60a6      	str	r6, [r4, #8]
   b497e:	45b8      	cmp	r8, r7
   b4980:	d007      	beq.n	b4992 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x52>
   b4982:	b11d      	cbz	r5, b498c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x4c>
   b4984:	4639      	mov	r1, r7
   b4986:	4628      	mov	r0, r5
   b4988:	f7ff fc26 	bl	b41d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b498c:	3718      	adds	r7, #24
   b498e:	3518      	adds	r5, #24
   b4990:	e7f5      	b.n	b497e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x3e>
      }
   b4992:	4620      	mov	r0, r4
	  this->_M_impl._M_finish =
   b4994:	6065      	str	r5, [r4, #4]
      }
   b4996:	b002      	add	sp, #8
   b4998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b499c:	aaaaaaab 	.word	0xaaaaaaab
   b49a0:	7ffffff8 	.word	0x7ffffff8
   b49a4:	000bf117 	.word	0x000bf117

000b49a8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   b49a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b49aa:	e9d1 3700 	ldrd	r3, r7, [r1]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b49ae:	2500      	movs	r5, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b49b0:	1aff      	subs	r7, r7, r3
      vector(const vector& __x)
   b49b2:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b49b4:	e9c0 5500 	strd	r5, r5, [r0]
   b49b8:	6085      	str	r5, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b49ba:	10f8      	asrs	r0, r7, #3
      vector(const vector& __x)
   b49bc:	460e      	mov	r6, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b49be:	f7ff fbfe 	bl	b41be <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b49c2:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b49c6:	4407      	add	r7, r0
   b49c8:	60a7      	str	r7, [r4, #8]
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b49ca:	e9d6 7600 	ldrd	r7, r6, [r6]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b49ce:	4602      	mov	r2, r0
   b49d0:	1bf6      	subs	r6, r6, r7
      : _M_current(__i) { }
   b49d2:	462b      	mov	r3, r5
   b49d4:	42b3      	cmp	r3, r6
   b49d6:	eb02 0503 	add.w	r5, r2, r3
   b49da:	d006      	beq.n	b49ea <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x42>
   b49dc:	b11d      	cbz	r5, b49e6 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x3e>
   b49de:	18f9      	adds	r1, r7, r3
   b49e0:	c903      	ldmia	r1, {r0, r1}
   b49e2:	e885 0003 	stmia.w	r5, {r0, r1}
   b49e6:	3308      	adds	r3, #8
   b49e8:	e7f4      	b.n	b49d4 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x2c>
	this->_M_impl._M_finish =
   b49ea:	6065      	str	r5, [r4, #4]
      }
   b49ec:	4620      	mov	r0, r4
   b49ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b49f0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>:
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
   b49f0:	b508      	push	{r3, lr}
      { return _M_string_length; }
   b49f2:	6842      	ldr	r2, [r0, #4]
	       const basic_string<_CharT>& __rhs) _GLIBCXX_NOEXCEPT
    { return (__lhs.size() == __rhs.size()
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
   b49f4:	684b      	ldr	r3, [r1, #4]
   b49f6:	429a      	cmp	r2, r3
   b49f8:	d108      	bne.n	b4a0c <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1c>
	if (__n == 0)
   b49fa:	b14a      	cbz	r2, b4a10 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x20>
	return __builtin_memcmp(__s1, __s2, __n);
   b49fc:	6809      	ldr	r1, [r1, #0]
   b49fe:	6800      	ldr	r0, [r0, #0]
   b4a00:	f008 fa5a 	bl	bceb8 <memcmp>
   b4a04:	fab0 f080 	clz	r0, r0
   b4a08:	0940      	lsrs	r0, r0, #5
						    __lhs.size())); }
   b4a0a:	bd08      	pop	{r3, pc}
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
   b4a0c:	2000      	movs	r0, #0
   b4a0e:	e7fc      	b.n	b4a0a <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1a>
   b4a10:	2001      	movs	r0, #1
   b4a12:	e7fa      	b.n	b4a0a <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1a>

000b4a14 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4a18:	b0a3      	sub	sp, #140	; 0x8c
   b4a1a:	460d      	mov	r5, r1
   b4a1c:	4604      	mov	r4, r0
  Wire.lock();
   b4a1e:	f007 fa0d 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b4a22:	f006 f99d 	bl	bad60 <_ZN7TwoWire4lockEv>
  txCharacteristic.setValue("ok");
   b4a26:	2200      	movs	r2, #0
   b4a28:	4997      	ldr	r1, [pc, #604]	; (b4c88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x274>)
   b4a2a:	4898      	ldr	r0, [pc, #608]	; (b4c8c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x278>)
   b4a2c:	f005 f9d6 	bl	b9ddc <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
  String inputBuffer = "";
   b4a30:	4997      	ldr	r1, [pc, #604]	; (b4c90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x27c>)
   b4a32:	a803      	add	r0, sp, #12
   b4a34:	f006 fbd3 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
  String nameBuffer;
   b4a38:	4995      	ldr	r1, [pc, #596]	; (b4c90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x27c>)
   b4a3a:	a807      	add	r0, sp, #28
   b4a3c:	f006 fbcf 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
  for(int i = 0; i < len; i++){
   b4a40:	4425      	add	r5, r4
   b4a42:	42a5      	cmp	r5, r4
   b4a44:	d005      	beq.n	b4a52 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3e>
	String & operator += (char c)			{concat(c); return (*this);}
   b4a46:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4a4a:	a803      	add	r0, sp, #12
   b4a4c:	f006 fc4f 	bl	bb2ee <_ZN6String6concatEc>
   b4a50:	e7f7      	b.n	b4a42 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
  Serial.println(inputBuffer);
   b4a52:	f007 f8a5 	bl	bbba0 <_Z16_fetch_usbserialv>
   b4a56:	9903      	ldr	r1, [sp, #12]
   b4a58:	f006 fb17 	bl	bb08a <_ZN5Print7printlnEPKc>
  if(inputBuffer.indexOf("wifi:") == 0){
   b4a5c:	498d      	ldr	r1, [pc, #564]	; (b4c94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x280>)
   b4a5e:	a80f      	add	r0, sp, #60	; 0x3c
   b4a60:	f006 fbbd 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
   b4a64:	a90f      	add	r1, sp, #60	; 0x3c
   b4a66:	a803      	add	r0, sp, #12
   b4a68:	f006 fcb2 	bl	bb3d0 <_ZNK6String7indexOfERKS_>
   b4a6c:	4604      	mov	r4, r0
   b4a6e:	a80f      	add	r0, sp, #60	; 0x3c
   b4a70:	f006 fb6a 	bl	bb148 <_ZN6StringD1Ev>
   b4a74:	2c00      	cmp	r4, #0
   b4a76:	d157      	bne.n	b4b28 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x114>
    int commaIndex = inputBuffer.indexOf(",");
   b4a78:	4987      	ldr	r1, [pc, #540]	; (b4c98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x284>)
    SSID = inputBuffer.substring(5, commaIndex);
   b4a7a:	4d88      	ldr	r5, [pc, #544]	; (b4c9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x288>)
    int commaIndex = inputBuffer.indexOf(",");
   b4a7c:	a80f      	add	r0, sp, #60	; 0x3c
   b4a7e:	f006 fbae 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
   b4a82:	a90f      	add	r1, sp, #60	; 0x3c
   b4a84:	a803      	add	r0, sp, #12
   b4a86:	f006 fca3 	bl	bb3d0 <_ZNK6String7indexOfERKS_>
   b4a8a:	4604      	mov	r4, r0
   b4a8c:	a80f      	add	r0, sp, #60	; 0x3c
   b4a8e:	f006 fb5b 	bl	bb148 <_ZN6StringD1Ev>
    SSID = inputBuffer.substring(5, commaIndex);
   b4a92:	4623      	mov	r3, r4
   b4a94:	2205      	movs	r2, #5
   b4a96:	a903      	add	r1, sp, #12
   b4a98:	a80f      	add	r0, sp, #60	; 0x3c
   b4a9a:	f006 fc9d 	bl	bb3d8 <_ZNK6String9substringEjj>
   b4a9e:	a90f      	add	r1, sp, #60	; 0x3c
   b4aa0:	4628      	mov	r0, r5
   b4aa2:	f006 fbdc 	bl	bb25e <_ZN6StringaSEOS_>
   b4aa6:	a80f      	add	r0, sp, #60	; 0x3c
   b4aa8:	f006 fb4e 	bl	bb148 <_ZN6StringD1Ev>
    password = inputBuffer.substring(commaIndex + 1);
   b4aac:	1c62      	adds	r2, r4, #1
   b4aae:	4c7c      	ldr	r4, [pc, #496]	; (b4ca0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x28c>)
   b4ab0:	a903      	add	r1, sp, #12
   b4ab2:	a80f      	add	r0, sp, #60	; 0x3c
   b4ab4:	f006 fcb0 	bl	bb418 <_ZNK6String9substringEj>
   b4ab8:	a90f      	add	r1, sp, #60	; 0x3c
   b4aba:	4620      	mov	r0, r4
   b4abc:	f006 fbcf 	bl	bb25e <_ZN6StringaSEOS_>
   b4ac0:	a80f      	add	r0, sp, #60	; 0x3c
   b4ac2:	f006 fb41 	bl	bb148 <_ZN6StringD1Ev>
    Serial.printlnf("SSID: %s, password: %s", SSID.c_str(), password.c_str());
   b4ac6:	f007 f86b 	bl	bbba0 <_Z16_fetch_usbserialv>
   b4aca:	682a      	ldr	r2, [r5, #0]
   b4acc:	6823      	ldr	r3, [r4, #0]
   b4ace:	4975      	ldr	r1, [pc, #468]	; (b4ca4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x290>)
   b4ad0:	f7ff fc9e 	bl	b4410 <_ZN5Print8printlnfEPKcz>
	const char * c_str() const { return buffer; }
   b4ad4:	682f      	ldr	r7, [r5, #0]
   b4ad6:	6825      	ldr	r5, [r4, #0]
    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b4ad8:	b317      	cbz	r7, b4b20 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10c>
   b4ada:	4638      	mov	r0, r7
   b4adc:	f008 fa6c 	bl	bcfb8 <strlen>
   b4ae0:	4606      	mov	r6, r0
   b4ae2:	b1fd      	cbz	r5, b4b24 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x110>
   b4ae4:	4628      	mov	r0, r5
   b4ae6:	f008 fa67 	bl	bcfb8 <strlen>
   b4aea:	4604      	mov	r4, r0

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   b4aec:	2238      	movs	r2, #56	; 0x38
   b4aee:	2100      	movs	r1, #0
   b4af0:	a814      	add	r0, sp, #80	; 0x50
   b4af2:	f008 fa19 	bl	bcf28 <memset>
        creds.size = sizeof(creds);
   b4af6:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
   b4af8:	e9cd 370f 	strd	r3, r7, [sp, #60]	; 0x3c
        creds.ssid_len = ssidLen;
        creds.password = password;
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4afc:	486a      	ldr	r0, [pc, #424]	; (b4ca8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x294>)
        creds.password_len = passwordLen;
   b4afe:	9413      	str	r4, [sp, #76]	; 0x4c
        creds.security = WLanSecurityType(security);
   b4b00:	2303      	movs	r3, #3
   b4b02:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4b06:	2300      	movs	r3, #0
   b4b08:	6840      	ldr	r0, [r0, #4]
   b4b0a:	aa0f      	add	r2, sp, #60	; 0x3c
   b4b0c:	4619      	mov	r1, r3
        creds.password = password;
   b4b0e:	e9cd 6511 	strd	r6, r5, [sp, #68]	; 0x44
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4b12:	f004 fe41 	bl	b9798 <network_set_credentials>
  Wire.unlock();
   b4b16:	f007 f991 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b4b1a:	f006 f92a 	bl	bad72 <_ZN7TwoWire6unlockEv>
   b4b1e:	e046      	b.n	b4bae <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x19a>
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b4b20:	463e      	mov	r6, r7
   b4b22:	e7de      	b.n	b4ae2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xce>
   b4b24:	462c      	mov	r4, r5
   b4b26:	e7e1      	b.n	b4aec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xd8>
  else if(inputBuffer.indexOf("city:") == 0){
   b4b28:	4960      	ldr	r1, [pc, #384]	; (b4cac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x298>)
   b4b2a:	a80f      	add	r0, sp, #60	; 0x3c
   b4b2c:	f006 fb57 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
   b4b30:	a90f      	add	r1, sp, #60	; 0x3c
   b4b32:	a803      	add	r0, sp, #12
   b4b34:	f006 fc4c 	bl	bb3d0 <_ZNK6String7indexOfERKS_>
   b4b38:	4604      	mov	r4, r0
   b4b3a:	a80f      	add	r0, sp, #60	; 0x3c
   b4b3c:	f006 fb04 	bl	bb148 <_ZN6StringD1Ev>
   b4b40:	2c00      	cmp	r4, #0
   b4b42:	f040 808b 	bne.w	b4c5c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x248>
    inputBuffer = inputBuffer.substring(5);
   b4b46:	2205      	movs	r2, #5
   b4b48:	a903      	add	r1, sp, #12
   b4b4a:	a80f      	add	r0, sp, #60	; 0x3c
   b4b4c:	f006 fc64 	bl	bb418 <_ZNK6String9substringEj>
   b4b50:	a90f      	add	r1, sp, #60	; 0x3c
   b4b52:	a803      	add	r0, sp, #12
   b4b54:	f006 fb83 	bl	bb25e <_ZN6StringaSEOS_>
   b4b58:	a80f      	add	r0, sp, #60	; 0x3c
   b4b5a:	f006 faf5 	bl	bb148 <_ZN6StringD1Ev>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4b5e:	4d54      	ldr	r5, [pc, #336]	; (b4cb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x29c>)
   b4b60:	4f54      	ldr	r7, [pc, #336]	; (b4cb4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a0>)
        cityIndex = i;
   b4b62:	f8df 8154 	ldr.w	r8, [pc, #340]	; b4cb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a4>
   b4b66:	e9d5 2300 	ldrd	r2, r3, [r5]
   b4b6a:	1a9b      	subs	r3, r3, r2
   b4b6c:	10db      	asrs	r3, r3, #3
   b4b6e:	437b      	muls	r3, r7
    for(int i = 0; i < cities.size(); i++){
   b4b70:	42a3      	cmp	r3, r4
   b4b72:	d913      	bls.n	b4b9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x188>
      { return _M_dataplus._M_p; }
   b4b74:	2328      	movs	r3, #40	; 0x28
   b4b76:	fb03 2204 	mla	r2, r3, r4, r2
      if(inputBuffer == String(cities[i].name.c_str())){
   b4b7a:	a80f      	add	r0, sp, #60	; 0x3c
   b4b7c:	68d1      	ldr	r1, [r2, #12]
   b4b7e:	f006 fb2e 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b4b82:	a90f      	add	r1, sp, #60	; 0x3c
   b4b84:	a803      	add	r0, sp, #12
   b4b86:	f006 fbf5 	bl	bb374 <_ZNK6String6equalsERKS_>
   b4b8a:	4606      	mov	r6, r0
   b4b8c:	a80f      	add	r0, sp, #60	; 0x3c
   b4b8e:	f006 fadb 	bl	bb148 <_ZN6StringD1Ev>
   b4b92:	b10e      	cbz	r6, b4b98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x184>
        cityIndex = i;
   b4b94:	f8c8 4000 	str.w	r4, [r8]
    for(int i = 0; i < cities.size(); i++){
   b4b98:	3401      	adds	r4, #1
   b4b9a:	e7e4      	b.n	b4b66 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x152>
    if(cityIndex == -1){
   b4b9c:	4e46      	ldr	r6, [pc, #280]	; (b4cb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a4>)
   b4b9e:	6833      	ldr	r3, [r6, #0]
   b4ba0:	1c59      	adds	r1, r3, #1
   b4ba2:	d10d      	bne.n	b4bc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1ac>
      txCharacteristic.setValue("incorrect city name");
   b4ba4:	4945      	ldr	r1, [pc, #276]	; (b4cbc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a8>)
   b4ba6:	2200      	movs	r2, #0
        txCharacteristic.setValue("incorrect railway color");
   b4ba8:	4838      	ldr	r0, [pc, #224]	; (b4c8c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x278>)
   b4baa:	f005 f917 	bl	b9ddc <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      return;
   b4bae:	a807      	add	r0, sp, #28
   b4bb0:	f006 faca 	bl	bb148 <_ZN6StringD1Ev>
   b4bb4:	a803      	add	r0, sp, #12
   b4bb6:	f006 fac7 	bl	bb148 <_ZN6StringD1Ev>
}
   b4bba:	b023      	add	sp, #140	; 0x8c
   b4bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return *(this->_M_impl._M_start + __n);
   b4bc0:	2428      	movs	r4, #40	; 0x28
   b4bc2:	4363      	muls	r3, r4
   b4bc4:	18d1      	adds	r1, r2, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4bc6:	58d3      	ldr	r3, [r2, r3]
   b4bc8:	6849      	ldr	r1, [r1, #4]
    addressArr = std::vector<int>(cities[cityIndex].slaveCountExpected, 0);
   b4bca:	f8df 810c 	ldr.w	r8, [pc, #268]	; b4cd8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c4>
   b4bce:	1ac9      	subs	r1, r1, r3
   b4bd0:	4b3b      	ldr	r3, [pc, #236]	; (b4cc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2ac>)
   b4bd2:	1089      	asrs	r1, r1, #2
   b4bd4:	4359      	muls	r1, r3
    sequenceArr = std::vector<int>(cities[cityIndex].railways.size() * 2, 0);
   b4bd6:	aa0b      	add	r2, sp, #44	; 0x2c
   b4bd8:	ab02      	add	r3, sp, #8
   b4bda:	2700      	movs	r7, #0
   b4bdc:	0049      	lsls	r1, r1, #1
   b4bde:	a80f      	add	r0, sp, #60	; 0x3c
   b4be0:	970b      	str	r7, [sp, #44]	; 0x2c
   b4be2:	f7ff fe57 	bl	b4894 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b4be6:	a90f      	add	r1, sp, #60	; 0x3c
   b4be8:	4836      	ldr	r0, [pc, #216]	; (b4cc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b0>)
   b4bea:	f7ff fe29 	bl	b4840 <_ZNSt6vectorIiSaIiEEaSEOS1_.isra.0>
      }
   b4bee:	a80f      	add	r0, sp, #60	; 0x3c
   b4bf0:	f7ff fe1c 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
	return *(this->_M_impl._M_start + __n);
   b4bf4:	6832      	ldr	r2, [r6, #0]
    addressArr = std::vector<int>(cities[cityIndex].slaveCountExpected, 0);
   b4bf6:	682b      	ldr	r3, [r5, #0]
   b4bf8:	fb04 3302 	mla	r3, r4, r2, r3
   b4bfc:	a80f      	add	r0, sp, #60	; 0x3c
   b4bfe:	aa0b      	add	r2, sp, #44	; 0x2c
   b4c00:	6a59      	ldr	r1, [r3, #36]	; 0x24
   b4c02:	970b      	str	r7, [sp, #44]	; 0x2c
   b4c04:	ab02      	add	r3, sp, #8
   b4c06:	f7ff fe45 	bl	b4894 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b4c0a:	a90f      	add	r1, sp, #60	; 0x3c
   b4c0c:	4640      	mov	r0, r8
   b4c0e:	f7ff fe17 	bl	b4840 <_ZNSt6vectorIiSaIiEEaSEOS1_.isra.0>
      }
   b4c12:	a80f      	add	r0, sp, #60	; 0x3c
   b4c14:	f7ff fe0a 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
    randomizeAddress();
   b4c18:	f7ff fc08 	bl	b442c <_Z16randomizeAddressv>
    txCharacteristic.setValue("slave addresses sorted");
   b4c1c:	463a      	mov	r2, r7
   b4c1e:	492a      	ldr	r1, [pc, #168]	; (b4cc8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b4>)
   b4c20:	481a      	ldr	r0, [pc, #104]	; (b4c8c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x278>)
   b4c22:	f005 f8db 	bl	b9ddc <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    Wire.beginTransmission(addressArr[0]);
   b4c26:	f007 f909 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b4c2a:	f8d8 3000 	ldr.w	r3, [r8]
   b4c2e:	6819      	ldr	r1, [r3, #0]
   b4c30:	f006 f88c 	bl	bad4c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('3');
   b4c34:	f007 f902 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b4c38:	2133      	movs	r1, #51	; 0x33
   b4c3a:	f7ff faf3 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b4c3e:	f007 f8fd 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b4c42:	f006 f88a 	bl	bad5a <_ZN7TwoWire15endTransmissionEv>
    Serial.printlnf("city: %s", cities[cityIndex].name.c_str());
   b4c46:	f006 ffab 	bl	bbba0 <_Z16_fetch_usbserialv>
	return *(this->_M_impl._M_start + __n);
   b4c4a:	6832      	ldr	r2, [r6, #0]
   b4c4c:	682b      	ldr	r3, [r5, #0]
   b4c4e:	491f      	ldr	r1, [pc, #124]	; (b4ccc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   b4c50:	fb04 3402 	mla	r4, r4, r2, r3
   b4c54:	68e2      	ldr	r2, [r4, #12]
   b4c56:	f7ff fbdb 	bl	b4410 <_ZN5Print8printlnfEPKcz>
   b4c5a:	e75c      	b.n	b4b16 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x102>
  else if(inputBuffer.indexOf("color:") == 0){
   b4c5c:	491c      	ldr	r1, [pc, #112]	; (b4cd0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2bc>)
   b4c5e:	a80f      	add	r0, sp, #60	; 0x3c
   b4c60:	f006 fabd 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
   b4c64:	a90f      	add	r1, sp, #60	; 0x3c
   b4c66:	a803      	add	r0, sp, #12
   b4c68:	f006 fbb2 	bl	bb3d0 <_ZNK6String7indexOfERKS_>
   b4c6c:	4604      	mov	r4, r0
   b4c6e:	a80f      	add	r0, sp, #60	; 0x3c
   b4c70:	f006 fa6a 	bl	bb148 <_ZN6StringD1Ev>
   b4c74:	2c00      	cmp	r4, #0
   b4c76:	f040 81e6 	bne.w	b5046 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x632>
    if(cityIndex == -1){
   b4c7a:	4e0f      	ldr	r6, [pc, #60]	; (b4cb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a4>)
   b4c7c:	6833      	ldr	r3, [r6, #0]
   b4c7e:	3301      	adds	r3, #1
   b4c80:	d12c      	bne.n	b4cdc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>
      txCharacteristic.setValue("city not set");
   b4c82:	4914      	ldr	r1, [pc, #80]	; (b4cd4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c0>)
   b4c84:	4622      	mov	r2, r4
   b4c86:	e78f      	b.n	b4ba8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x194>
   b4c88:	000bf148 	.word	0x000bf148
   b4c8c:	2003e6a4 	.word	0x2003e6a4
   b4c90:	000bf5d2 	.word	0x000bf5d2
   b4c94:	000bf14b 	.word	0x000bf14b
   b4c98:	000bf151 	.word	0x000bf151
   b4c9c:	20035238 	.word	0x20035238
   b4ca0:	2003e46c 	.word	0x2003e46c
   b4ca4:	000bf153 	.word	0x000bf153
   b4ca8:	2003e718 	.word	0x2003e718
   b4cac:	000bf16a 	.word	0x000bf16a
   b4cb0:	200353e8 	.word	0x200353e8
   b4cb4:	cccccccd 	.word	0xcccccccd
   b4cb8:	20035040 	.word	0x20035040
   b4cbc:	000bf170 	.word	0x000bf170
   b4cc0:	684bda13 	.word	0x684bda13
   b4cc4:	2003e694 	.word	0x2003e694
   b4cc8:	000bf184 	.word	0x000bf184
   b4ccc:	000bf19b 	.word	0x000bf19b
   b4cd0:	000bf1a4 	.word	0x000bf1a4
   b4cd4:	000bf1ab 	.word	0x000bf1ab
   b4cd8:	20035290 	.word	0x20035290
    inputBuffer = inputBuffer.substring(6);
   b4cdc:	2206      	movs	r2, #6
   b4cde:	a903      	add	r1, sp, #12
   b4ce0:	a80f      	add	r0, sp, #60	; 0x3c
   b4ce2:	f006 fb99 	bl	bb418 <_ZNK6String9substringEj>
   b4ce6:	a90f      	add	r1, sp, #60	; 0x3c
   b4ce8:	a803      	add	r0, sp, #12
   b4cea:	f006 fab8 	bl	bb25e <_ZN6StringaSEOS_>
   b4cee:	a80f      	add	r0, sp, #60	; 0x3c
   b4cf0:	f006 fa2a 	bl	bb148 <_ZN6StringD1Ev>
   b4cf4:	4fa7      	ldr	r7, [pc, #668]	; (b4f94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x580>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4cf6:	f8df 82ec 	ldr.w	r8, [pc, #748]	; b4fe4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d0>
    nameBuffer = inputBuffer;
   b4cfa:	a903      	add	r1, sp, #12
   b4cfc:	a807      	add	r0, sp, #28
   b4cfe:	f006 fa9f 	bl	bb240 <_ZN6StringaSERKS_>
    if(bleCount < cities[cityIndex].railways.size()){
   b4d02:	6831      	ldr	r1, [r6, #0]
	return *(this->_M_impl._M_start + __n);
   b4d04:	6838      	ldr	r0, [r7, #0]
   b4d06:	2228      	movs	r2, #40	; 0x28
   b4d08:	434a      	muls	r2, r1
   b4d0a:	1883      	adds	r3, r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4d0c:	5882      	ldr	r2, [r0, r2]
   b4d0e:	685b      	ldr	r3, [r3, #4]
   b4d10:	1a9b      	subs	r3, r3, r2
   b4d12:	4aa1      	ldr	r2, [pc, #644]	; (b4f98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x584>)
   b4d14:	109b      	asrs	r3, r3, #2
   b4d16:	6812      	ldr	r2, [r2, #0]
   b4d18:	fb08 f303 	mul.w	r3, r8, r3
   b4d1c:	429a      	cmp	r2, r3
   b4d1e:	f080 80d6 	bcs.w	b4ece <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4ba>
      if((cityIndex == 0 || cityIndex == 1) && (inputBuffer == "green1" || inputBuffer == "green2")){
   b4d22:	2901      	cmp	r1, #1
   b4d24:	d808      	bhi.n	b4d38 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x324>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4d26:	499d      	ldr	r1, [pc, #628]	; (b4f9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x588>)
   b4d28:	a803      	add	r0, sp, #12
   b4d2a:	f006 fb30 	bl	bb38e <_ZNK6String6equalsEPKc>
   b4d2e:	b328      	cbz	r0, b4d7c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x368>
        nameBuffer = "green";
   b4d30:	499b      	ldr	r1, [pc, #620]	; (b4fa0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x58c>)
   b4d32:	a807      	add	r0, sp, #28
   b4d34:	f006 fa9b 	bl	bb26e <_ZN6StringaSEPKc>
          railwayIndex = i;
   b4d38:	f8df b270 	ldr.w	fp, [pc, #624]	; b4fac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x598>
   b4d3c:	f04f 0a00 	mov.w	sl, #0
	return *(this->_M_impl._M_start + __n);
   b4d40:	f04f 0928 	mov.w	r9, #40	; 0x28
      for(int i = 0; i < cities[cityIndex].railways.size(); i++){
   b4d44:	6835      	ldr	r5, [r6, #0]
   b4d46:	6838      	ldr	r0, [r7, #0]
   b4d48:	fb09 f105 	mul.w	r1, r9, r5
   b4d4c:	1843      	adds	r3, r0, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4d4e:	5841      	ldr	r1, [r0, r1]
   b4d50:	685b      	ldr	r3, [r3, #4]
   b4d52:	1a5b      	subs	r3, r3, r1
   b4d54:	109b      	asrs	r3, r3, #2
   b4d56:	fb08 f303 	mul.w	r3, r8, r3
   b4d5a:	4553      	cmp	r3, sl
   b4d5c:	d938      	bls.n	b4dd0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3bc>
        if((cityIndex != 0 || nameBuffer != String(purpleLineCTA.name.c_str())) && String(cities[cityIndex].railways[i].name.c_str()) == nameBuffer){
   b4d5e:	b9a5      	cbnz	r5, b4d8a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x376>
   b4d60:	4b90      	ldr	r3, [pc, #576]	; (b4fa4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x590>)
   b4d62:	a80b      	add	r0, sp, #44	; 0x2c
   b4d64:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b4d66:	f006 fa3a 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
   b4d6a:	a90b      	add	r1, sp, #44	; 0x2c
   b4d6c:	a807      	add	r0, sp, #28
   b4d6e:	f006 fb01 	bl	bb374 <_ZNK6String6equalsERKS_>
   b4d72:	b358      	cbz	r0, b4dcc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3b8>
   b4d74:	a80b      	add	r0, sp, #44	; 0x2c
   b4d76:	f006 f9e7 	bl	bb148 <_ZN6StringD1Ev>
   b4d7a:	e021      	b.n	b4dc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3ac>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4d7c:	498a      	ldr	r1, [pc, #552]	; (b4fa8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x594>)
   b4d7e:	a803      	add	r0, sp, #12
   b4d80:	f006 fb05 	bl	bb38e <_ZNK6String6equalsEPKc>
      if((cityIndex == 0 || cityIndex == 1) && (inputBuffer == "green1" || inputBuffer == "green2")){
   b4d84:	2800      	cmp	r0, #0
   b4d86:	d1d3      	bne.n	b4d30 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x31c>
   b4d88:	e7d6      	b.n	b4d38 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x324>
        if((cityIndex != 0 || nameBuffer != String(purpleLineCTA.name.c_str())) && String(cities[cityIndex].railways[i].name.c_str()) == nameBuffer){
   b4d8a:	2300      	movs	r3, #0
	return *(this->_M_impl._M_start + __n);
   b4d8c:	6831      	ldr	r1, [r6, #0]
   b4d8e:	6838      	ldr	r0, [r7, #0]
   b4d90:	9301      	str	r3, [sp, #4]
   b4d92:	fb09 f101 	mul.w	r1, r9, r1
   b4d96:	5841      	ldr	r1, [r0, r1]
   b4d98:	206c      	movs	r0, #108	; 0x6c
   b4d9a:	fb00 110a 	mla	r1, r0, sl, r1
   b4d9e:	a80f      	add	r0, sp, #60	; 0x3c
   b4da0:	6b09      	ldr	r1, [r1, #48]	; 0x30
   b4da2:	f006 fa1c 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b4da6:	a907      	add	r1, sp, #28
   b4da8:	a80f      	add	r0, sp, #60	; 0x3c
   b4daa:	f006 fae3 	bl	bb374 <_ZNK6String6equalsERKS_>
   b4dae:	1e05      	subs	r5, r0, #0
   b4db0:	a80f      	add	r0, sp, #60	; 0x3c
   b4db2:	bf18      	it	ne
   b4db4:	2501      	movne	r5, #1
   b4db6:	f006 f9c7 	bl	bb148 <_ZN6StringD1Ev>
   b4dba:	9b01      	ldr	r3, [sp, #4]
   b4dbc:	2b00      	cmp	r3, #0
   b4dbe:	d1d9      	bne.n	b4d74 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x360>
   b4dc0:	b10d      	cbz	r5, b4dc6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3b2>
          railwayIndex = i;
   b4dc2:	f8cb a000 	str.w	sl, [fp]
      for(int i = 0; i < cities[cityIndex].railways.size(); i++){
   b4dc6:	f10a 0a01 	add.w	sl, sl, #1
   b4dca:	e7bb      	b.n	b4d44 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x330>
        if((cityIndex != 0 || nameBuffer != String(purpleLineCTA.name.c_str())) && String(cities[cityIndex].railways[i].name.c_str()) == nameBuffer){
   b4dcc:	2301      	movs	r3, #1
   b4dce:	e7dd      	b.n	b4d8c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x378>
      if(cityIndex == 1 && inputBuffer == "green1"){
   b4dd0:	2d01      	cmp	r5, #1
   b4dd2:	4d76      	ldr	r5, [pc, #472]	; (b4fac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x598>)
   b4dd4:	d107      	bne.n	b4de6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3d2>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4dd6:	4971      	ldr	r1, [pc, #452]	; (b4f9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x588>)
   b4dd8:	a803      	add	r0, sp, #12
   b4dda:	f006 fad8 	bl	bb38e <_ZNK6String6equalsEPKc>
   b4dde:	b110      	cbz	r0, b4de6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3d2>
        railwayIndex--;
   b4de0:	682b      	ldr	r3, [r5, #0]
   b4de2:	3b01      	subs	r3, #1
   b4de4:	602b      	str	r3, [r5, #0]
      Serial.printlnf("railway index: %i", railwayIndex);
   b4de6:	f006 fedb 	bl	bbba0 <_Z16_fetch_usbserialv>
   b4dea:	682a      	ldr	r2, [r5, #0]
   b4dec:	4970      	ldr	r1, [pc, #448]	; (b4fb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x59c>)
   b4dee:	f7ff fb0f 	bl	b4410 <_ZN5Print8printlnfEPKcz>
      if(railwayIndex == -1){
   b4df2:	682b      	ldr	r3, [r5, #0]
   b4df4:	3301      	adds	r3, #1
   b4df6:	d031      	beq.n	b4e5c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x448>
   b4df8:	4d6e      	ldr	r5, [pc, #440]	; (b4fb4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a0>)
        Serial.printlnf("address: %i", addressArr[bleCount]);
   b4dfa:	f8df 919c 	ldr.w	r9, [pc, #412]	; b4f98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x584>
        if(cities[cityIndex].railways[railwayIndex].outputs[i].size() == 0 || (cityIndex == 0 && cities[cityIndex].railways[railwayIndex].name == purpleLineCTA.name)){
   b4dfe:	f8df a1ac 	ldr.w	sl, [pc, #428]	; b4fac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x598>
        Serial.printlnf("address: %i", addressArr[bleCount]);
   b4e02:	f006 fecd 	bl	bbba0 <_Z16_fetch_usbserialv>
   b4e06:	682b      	ldr	r3, [r5, #0]
   b4e08:	f8d9 2000 	ldr.w	r2, [r9]
   b4e0c:	496a      	ldr	r1, [pc, #424]	; (b4fb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a4>)
   b4e0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   b4e12:	f7ff fafd 	bl	b4410 <_ZN5Print8printlnfEPKcz>
        if(cities[cityIndex].railways[railwayIndex].outputs[i].size() == 0 || (cityIndex == 0 && cities[cityIndex].railways[railwayIndex].name == purpleLineCTA.name)){
   b4e16:	6832      	ldr	r2, [r6, #0]
   b4e18:	6839      	ldr	r1, [r7, #0]
   b4e1a:	f8da b000 	ldr.w	fp, [sl]
   b4e1e:	2328      	movs	r3, #40	; 0x28
   b4e20:	4353      	muls	r3, r2
   b4e22:	58c8      	ldr	r0, [r1, r3]
   b4e24:	236c      	movs	r3, #108	; 0x6c
   b4e26:	fb03 000b 	mla	r0, r3, fp, r0
   b4e2a:	230c      	movs	r3, #12
   b4e2c:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b4e2e:	4363      	muls	r3, r4
   b4e30:	eb01 0c03 	add.w	ip, r1, r3
   b4e34:	58cb      	ldr	r3, [r1, r3]
   b4e36:	f8dc c004 	ldr.w	ip, [ip, #4]
   b4e3a:	459c      	cmp	ip, r3
   b4e3c:	d019      	beq.n	b4e72 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x45e>
   b4e3e:	b192      	cbz	r2, b4e66 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x452>
            sequenceArr[2 * railwayIndex + i] = addressArr[bleCount];
   b4e40:	682b      	ldr	r3, [r5, #0]
   b4e42:	f8d9 2000 	ldr.w	r2, [r9]
   b4e46:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b4e4a:	f8da 3000 	ldr.w	r3, [sl]
   b4e4e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
              sequenceArr[2 * railwayIndex + 1] = addressArr[bleCount];
   b4e52:	4a5a      	ldr	r2, [pc, #360]	; (b4fbc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a8>)
   b4e54:	6812      	ldr	r2, [r2, #0]
   b4e56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   b4e5a:	e07c      	b.n	b4f56 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x542>
        txCharacteristic.setValue("incorrect railway color");
   b4e5c:	4958      	ldr	r1, [pc, #352]	; (b4fc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ac>)
   b4e5e:	2200      	movs	r2, #0
   b4e60:	e6a2      	b.n	b4ba8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x194>
   b4e62:	2401      	movs	r4, #1
   b4e64:	e7cb      	b.n	b4dfe <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3ea>
        if(cities[cityIndex].railways[railwayIndex].outputs[i].size() == 0 || (cityIndex == 0 && cities[cityIndex].railways[railwayIndex].name == purpleLineCTA.name)){
   b4e66:	4957      	ldr	r1, [pc, #348]	; (b4fc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b0>)
   b4e68:	3030      	adds	r0, #48	; 0x30
   b4e6a:	f7ff fdc1 	bl	b49f0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b4e6e:	2800      	cmp	r0, #0
   b4e70:	d05a      	beq.n	b4f28 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x514>
          sequenceArr[2 * railwayIndex + i] = 0;
   b4e72:	4b52      	ldr	r3, [pc, #328]	; (b4fbc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a8>)
   b4e74:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
   b4e78:	681b      	ldr	r3, [r3, #0]
   b4e7a:	2200      	movs	r2, #0
   b4e7c:	f843 202b 	str.w	r2, [r3, fp, lsl #2]
      for(int i = 0; i < 2; i++){
   b4e80:	2c01      	cmp	r4, #1
   b4e82:	d1ee      	bne.n	b4e62 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44e>
      Wire.beginTransmission(addressArr[bleCount]);
   b4e84:	f006 ffda 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b4e88:	f8d9 2000 	ldr.w	r2, [r9]
   b4e8c:	682b      	ldr	r3, [r5, #0]
   b4e8e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b4e92:	f005 ff5b 	bl	bad4c <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('4');
   b4e96:	f006 ffd1 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b4e9a:	2134      	movs	r1, #52	; 0x34
   b4e9c:	f7ff f9c2 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4ea0:	f006 ffcc 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b4ea4:	f005 ff59 	bl	bad5a <_ZN7TwoWire15endTransmissionEv>
      Wire.beginTransmission(addressArr[bleCount + 1]);
   b4ea8:	f006 ffc8 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b4eac:	f8d9 3000 	ldr.w	r3, [r9]
   b4eb0:	682a      	ldr	r2, [r5, #0]
   b4eb2:	3301      	adds	r3, #1
   b4eb4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   b4eb8:	f005 ff48 	bl	bad4c <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('3');
   b4ebc:	f006 ffbe 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b4ec0:	2133      	movs	r1, #51	; 0x33
   b4ec2:	f7ff f9af 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4ec6:	f006 ffb9 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b4eca:	f005 ff46 	bl	bad5a <_ZN7TwoWire15endTransmissionEv>
   b4ece:	6832      	ldr	r2, [r6, #0]
   b4ed0:	6839      	ldr	r1, [r7, #0]
    if(bleCount == cities[cityIndex].railways.size() - 1){
   b4ed2:	4c31      	ldr	r4, [pc, #196]	; (b4f98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x584>)
   b4ed4:	2328      	movs	r3, #40	; 0x28
   b4ed6:	435a      	muls	r2, r3
   b4ed8:	188b      	adds	r3, r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4eda:	588a      	ldr	r2, [r1, r2]
   b4edc:	685b      	ldr	r3, [r3, #4]
   b4ede:	1a9b      	subs	r3, r3, r2
   b4ee0:	109b      	asrs	r3, r3, #2
   b4ee2:	6822      	ldr	r2, [r4, #0]
   b4ee4:	fb08 f303 	mul.w	r3, r8, r3
   b4ee8:	3b01      	subs	r3, #1
   b4eea:	4293      	cmp	r3, r2
   b4eec:	d118      	bne.n	b4f20 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x50c>
      Serial.println("BLE finished");
   b4eee:	f006 fe57 	bl	bbba0 <_Z16_fetch_usbserialv>
   b4ef2:	4935      	ldr	r1, [pc, #212]	; (b4fc8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b4>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4ef4:	4d35      	ldr	r5, [pc, #212]	; (b4fcc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b8>)
   b4ef6:	f006 f8c8 	bl	bb08a <_ZN5Print7printlnEPKc>
      userInput = true;
   b4efa:	4b35      	ldr	r3, [pc, #212]	; (b4fd0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5bc>)
        network_on(*this, 0, 0, NULL);
   b4efc:	6868      	ldr	r0, [r5, #4]
   b4efe:	2201      	movs	r2, #1
   b4f00:	701a      	strb	r2, [r3, #0]
   b4f02:	2300      	movs	r3, #0
   b4f04:	461a      	mov	r2, r3
   b4f06:	4619      	mov	r1, r3
   b4f08:	f004 fc1e 	bl	b9748 <network_on>
        network_connect(*this, flags, 0, NULL);
   b4f0c:	2300      	movs	r3, #0
   b4f0e:	6868      	ldr	r0, [r5, #4]
   b4f10:	4619      	mov	r1, r3
   b4f12:	461a      	mov	r2, r3
   b4f14:	f004 fbf8 	bl	b9708 <network_connect>
      client.connect("sparkclient");
   b4f18:	492e      	ldr	r1, [pc, #184]	; (b4fd4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c0>)
   b4f1a:	482f      	ldr	r0, [pc, #188]	; (b4fd8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c4>)
   b4f1c:	f003 fffa 	bl	b8f14 <_ZN4MQTT7connectEPKc>
    bleCount++;
   b4f20:	6823      	ldr	r3, [r4, #0]
   b4f22:	3301      	adds	r3, #1
   b4f24:	6023      	str	r3, [r4, #0]
   b4f26:	e5f6      	b.n	b4b16 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x102>
   b4f28:	491d      	ldr	r1, [pc, #116]	; (b4fa0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x58c>)
   b4f2a:	a807      	add	r0, sp, #28
   b4f2c:	f006 fa2f 	bl	bb38e <_ZNK6String6equalsEPKc>
          if(cityIndex == 0 && nameBuffer == "green"){
   b4f30:	2800      	cmp	r0, #0
   b4f32:	d085      	beq.n	b4e40 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x42c>
   b4f34:	4919      	ldr	r1, [pc, #100]	; (b4f9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x588>)
   b4f36:	a803      	add	r0, sp, #12
   b4f38:	f006 fa29 	bl	bb38e <_ZNK6String6equalsEPKc>
            if(inputBuffer == "green1"){
   b4f3c:	2800      	cmp	r0, #0
   b4f3e:	d053      	beq.n	b4fe8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d4>
	return *(this->_M_impl._M_start + __n);
   b4f40:	f8d9 2000 	ldr.w	r2, [r9]
              sequenceArr[2 * railwayIndex] = addressArr[bleCount];
   b4f44:	682b      	ldr	r3, [r5, #0]
   b4f46:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b4f4a:	4b1c      	ldr	r3, [pc, #112]	; (b4fbc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a8>)
   b4f4c:	f8da 2000 	ldr.w	r2, [sl]
   b4f50:	681b      	ldr	r3, [r3, #0]
   b4f52:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
          if(cityIndex == 0){
   b4f56:	6833      	ldr	r3, [r6, #0]
   b4f58:	2b00      	cmp	r3, #0
   b4f5a:	d191      	bne.n	b4e80 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x46c>
   b4f5c:	4b1f      	ldr	r3, [pc, #124]	; (b4fdc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c8>)
            if(inputBuffer == String(brownLineCTA.name.c_str())){
   b4f5e:	a80f      	add	r0, sp, #60	; 0x3c
   b4f60:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b4f62:	f006 f93c 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b4f66:	a90f      	add	r1, sp, #60	; 0x3c
   b4f68:	a803      	add	r0, sp, #12
   b4f6a:	f006 fa03 	bl	bb374 <_ZNK6String6equalsERKS_>
   b4f6e:	4682      	mov	sl, r0
   b4f70:	a80f      	add	r0, sp, #60	; 0x3c
   b4f72:	f006 f8e9 	bl	bb148 <_ZN6StringD1Ev>
   b4f76:	f1ba 0f00 	cmp.w	sl, #0
   b4f7a:	d045      	beq.n	b5008 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f4>
            brownLineCTAAdr = sequenceArr[2 * railwayIndex + i];
   b4f7c:	4b0b      	ldr	r3, [pc, #44]	; (b4fac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x598>)
   b4f7e:	4a0f      	ldr	r2, [pc, #60]	; (b4fbc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a8>)
   b4f80:	681b      	ldr	r3, [r3, #0]
   b4f82:	6812      	ldr	r2, [r2, #0]
   b4f84:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   b4f88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   b4f8c:	4b14      	ldr	r3, [pc, #80]	; (b4fe0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5cc>)
              greenLineCTAAdr[0] = sequenceArr[2 * railwayIndex];
   b4f8e:	601a      	str	r2, [r3, #0]
   b4f90:	e776      	b.n	b4e80 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x46c>
   b4f92:	bf00      	nop
   b4f94:	200353e8 	.word	0x200353e8
   b4f98:	2003529c 	.word	0x2003529c
   b4f9c:	000bf1b8 	.word	0x000bf1b8
   b4fa0:	000bf1bf 	.word	0x000bf1bf
   b4fa4:	2003e4e8 	.word	0x2003e4e8
   b4fa8:	000bf1c5 	.word	0x000bf1c5
   b4fac:	20035054 	.word	0x20035054
   b4fb0:	000bf1cc 	.word	0x000bf1cc
   b4fb4:	20035290 	.word	0x20035290
   b4fb8:	000bf1f6 	.word	0x000bf1f6
   b4fbc:	2003e694 	.word	0x2003e694
   b4fc0:	000bf1de 	.word	0x000bf1de
   b4fc4:	2003e518 	.word	0x2003e518
   b4fc8:	000bf202 	.word	0x000bf202
   b4fcc:	2003e718 	.word	0x2003e718
   b4fd0:	2003e6ac 	.word	0x2003e6ac
   b4fd4:	000bf20f 	.word	0x000bf20f
   b4fd8:	200353f8 	.word	0x200353f8
   b4fdc:	20035378 	.word	0x20035378
   b4fe0:	200353e4 	.word	0x200353e4
   b4fe4:	684bda13 	.word	0x684bda13
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4fe8:	4937      	ldr	r1, [pc, #220]	; (b50c8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6b4>)
   b4fea:	a803      	add	r0, sp, #12
   b4fec:	f006 f9cf 	bl	bb38e <_ZNK6String6equalsEPKc>
            }else if(inputBuffer == "green2"){
   b4ff0:	2800      	cmp	r0, #0
   b4ff2:	d0b0      	beq.n	b4f56 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x542>
              sequenceArr[2 * railwayIndex + 1] = addressArr[bleCount];
   b4ff4:	682b      	ldr	r3, [r5, #0]
   b4ff6:	f8d9 2000 	ldr.w	r2, [r9]
   b4ffa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b4ffe:	f8da 3000 	ldr.w	r3, [sl]
   b5002:	005b      	lsls	r3, r3, #1
   b5004:	3301      	adds	r3, #1
   b5006:	e724      	b.n	b4e52 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x43e>
   b5008:	4930      	ldr	r1, [pc, #192]	; (b50cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6b8>)
   b500a:	a803      	add	r0, sp, #12
   b500c:	f006 f9bf 	bl	bb38e <_ZNK6String6equalsEPKc>
            }else if(inputBuffer == "green1"){
   b5010:	b138      	cbz	r0, b5022 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x60e>
              greenLineCTAAdr[0] = sequenceArr[2 * railwayIndex];
   b5012:	4b2f      	ldr	r3, [pc, #188]	; (b50d0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6bc>)
   b5014:	681a      	ldr	r2, [r3, #0]
   b5016:	4b2f      	ldr	r3, [pc, #188]	; (b50d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6c0>)
   b5018:	681b      	ldr	r3, [r3, #0]
   b501a:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
   b501e:	4b2e      	ldr	r3, [pc, #184]	; (b50d8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6c4>)
   b5020:	e7b5      	b.n	b4f8e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x57a>
   b5022:	4929      	ldr	r1, [pc, #164]	; (b50c8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6b4>)
   b5024:	a803      	add	r0, sp, #12
   b5026:	f006 f9b2 	bl	bb38e <_ZNK6String6equalsEPKc>
            }else if(inputBuffer == "green2"){
   b502a:	2800      	cmp	r0, #0
   b502c:	f43f af28 	beq.w	b4e80 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x46c>
              greenLineCTAAdr[1] = sequenceArr[2 * railwayIndex + 1];
   b5030:	4b27      	ldr	r3, [pc, #156]	; (b50d0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6bc>)
   b5032:	4a28      	ldr	r2, [pc, #160]	; (b50d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6c0>)
   b5034:	681b      	ldr	r3, [r3, #0]
   b5036:	6812      	ldr	r2, [r2, #0]
   b5038:	005b      	lsls	r3, r3, #1
   b503a:	3301      	adds	r3, #1
   b503c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   b5040:	4b25      	ldr	r3, [pc, #148]	; (b50d8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6c4>)
   b5042:	605a      	str	r2, [r3, #4]
   b5044:	e71c      	b.n	b4e80 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x46c>
  }else if(inputBuffer.indexOf("reset") == 0){
   b5046:	4925      	ldr	r1, [pc, #148]	; (b50dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6c8>)
   b5048:	a80f      	add	r0, sp, #60	; 0x3c
   b504a:	f006 f8c8 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
   b504e:	a90f      	add	r1, sp, #60	; 0x3c
   b5050:	a803      	add	r0, sp, #12
   b5052:	f006 f9bd 	bl	bb3d0 <_ZNK6String7indexOfERKS_>
   b5056:	4604      	mov	r4, r0
   b5058:	a80f      	add	r0, sp, #60	; 0x3c
   b505a:	f006 f875 	bl	bb148 <_ZN6StringD1Ev>
   b505e:	2c00      	cmp	r4, #0
   b5060:	f47f ad59 	bne.w	b4b16 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x102>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5064:	4d1e      	ldr	r5, [pc, #120]	; (b50e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6cc>)
      Serial.printlnf("turning off: %i", i);
   b5066:	4e1f      	ldr	r6, [pc, #124]	; (b50e4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6d0>)
   b5068:	e9d5 2300 	ldrd	r2, r3, [r5]
   b506c:	1a9b      	subs	r3, r3, r2
    for(int i = 0; i < addressArr.size(); i++){
   b506e:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b5072:	d217      	bcs.n	b50a4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x690>
      Serial.printlnf("turning off: %i", i);
   b5074:	f006 fd94 	bl	bbba0 <_Z16_fetch_usbserialv>
   b5078:	4622      	mov	r2, r4
   b507a:	4631      	mov	r1, r6
   b507c:	f7ff f9c8 	bl	b4410 <_ZN5Print8printlnfEPKcz>
      Wire.beginTransmission(addressArr[i]);
   b5080:	f006 fedc 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b5084:	682b      	ldr	r3, [r5, #0]
   b5086:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   b508a:	f005 fe5f 	bl	bad4c <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('4');
   b508e:	f006 fed5 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b5092:	2134      	movs	r1, #52	; 0x34
   b5094:	f7ff f8c6 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b5098:	f006 fed0 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b509c:	f005 fe5d 	bl	bad5a <_ZN7TwoWire15endTransmissionEv>
    for(int i = 0; i < addressArr.size(); i++){
   b50a0:	3401      	adds	r4, #1
   b50a2:	e7e1      	b.n	b5068 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x654>
    bleCount = 0;
   b50a4:	4a10      	ldr	r2, [pc, #64]	; (b50e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6d4>)
    cityIndex = -1;
   b50a6:	4911      	ldr	r1, [pc, #68]	; (b50ec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6d8>)
    bleCount = 0;
   b50a8:	2300      	movs	r3, #0
   b50aa:	6013      	str	r3, [r2, #0]
    cityIndex = -1;
   b50ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b50b0:	600a      	str	r2, [r1, #0]
    railwayIndex = -1;
   b50b2:	4907      	ldr	r1, [pc, #28]	; (b50d0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6bc>)
   b50b4:	600a      	str	r2, [r1, #0]
    userInput = false;
   b50b6:	4a0e      	ldr	r2, [pc, #56]	; (b50f0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6dc>)
   b50b8:	7013      	strb	r3, [r2, #0]
    Serial.println("reset done");
   b50ba:	f006 fd71 	bl	bbba0 <_Z16_fetch_usbserialv>
   b50be:	490d      	ldr	r1, [pc, #52]	; (b50f4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6e0>)
   b50c0:	f005 ffe3 	bl	bb08a <_ZN5Print7printlnEPKc>
   b50c4:	e527      	b.n	b4b16 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x102>
   b50c6:	bf00      	nop
   b50c8:	000bf1c5 	.word	0x000bf1c5
   b50cc:	000bf1b8 	.word	0x000bf1b8
   b50d0:	20035054 	.word	0x20035054
   b50d4:	2003e694 	.word	0x2003e694
   b50d8:	200355a8 	.word	0x200355a8
   b50dc:	000bf21b 	.word	0x000bf21b
   b50e0:	20035290 	.word	0x20035290
   b50e4:	000bf221 	.word	0x000bf221
   b50e8:	2003529c 	.word	0x2003529c
   b50ec:	20035040 	.word	0x20035040
   b50f0:	2003e6ac 	.word	0x2003e6ac
   b50f4:	000bf231 	.word	0x000bf231

000b50f8 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b50f8:	2900      	cmp	r1, #0
      _M_create_storage(size_t __n)
   b50fa:	b538      	push	{r3, r4, r5, lr}
   b50fc:	4604      	mov	r4, r0
      _M_allocate(size_t __n)
   b50fe:	ea4f 0581 	mov.w	r5, r1, lsl #2
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5102:	d00c      	beq.n	b511e <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x26>
	if (__n > this->_M_max_size())
   b5104:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   b5108:	d301      	bcc.n	b510e <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x16>
	  std::__throw_bad_alloc();
   b510a:	f006 fefd 	bl	bbf08 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b510e:	4628      	mov	r0, r5
   b5110:	f7fe ffc1 	bl	b4096 <_Znwj>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b5114:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5118:	4428      	add	r0, r5
   b511a:	60a0      	str	r0, [r4, #8]
      }
   b511c:	bd38      	pop	{r3, r4, r5, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b511e:	4608      	mov	r0, r1
   b5120:	e7f8      	b.n	b5114 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x1c>

000b5122 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b5122:	b538      	push	{r3, r4, r5, lr}
   b5124:	4604      	mov	r4, r0
   b5126:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b5128:	42ac      	cmp	r4, r5
   b512a:	d004      	beq.n	b5136 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x14>
      }
   b512c:	4620      	mov	r0, r4
   b512e:	f7ff fb7d 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5132:	340c      	adds	r4, #12
   b5134:	e7f8      	b.n	b5128 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x6>
	    std::_Destroy(std::__addressof(*__first));
	}
   b5136:	bd38      	pop	{r3, r4, r5, pc}

000b5138 <_ZN7RailwayD1Ev>:
#include "Checkpoint.cpp"
#include <string>

//container for all data for each rail line
class Railway{
   b5138:	b510      	push	{r4, lr}
   b513a:	4604      	mov	r4, r0
   b513c:	3048      	adds	r0, #72	; 0x48
   b513e:	f7ff fb96 	bl	b486e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b5142:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b5146:	f006 ff17 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
   b514a:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b514e:	f7ff ffe8 	bl	b5122 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	_M_deallocate(_M_impl._M_start,
   b5152:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b5154:	b118      	cbz	r0, b515e <_ZN7RailwayD1Ev+0x26>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b5156:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	::operator delete(__p
   b5158:	1a09      	subs	r1, r1, r0
   b515a:	f7fe ffa4 	bl	b40a6 <_ZdlPvj>
      }
   b515e:	f104 0018 	add.w	r0, r4, #24
   b5162:	f7ff fb63 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5166:	f104 000c 	add.w	r0, r4, #12
   b516a:	f7ff fb55 	bl	b4818 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b516e:	4620      	mov	r0, r4
   b5170:	f7ff fb48 	bl	b4804 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
   b5174:	4620      	mov	r0, r4
   b5176:	bd10      	pop	{r4, pc}

000b5178 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b5178:	b538      	push	{r3, r4, r5, lr}
   b517a:	4604      	mov	r4, r0
   b517c:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b517e:	42ac      	cmp	r4, r5
   b5180:	d004      	beq.n	b518c <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_+0x14>
      __pointer->~_Tp();
   b5182:	4620      	mov	r0, r4
   b5184:	f7ff ffd8 	bl	b5138 <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b5188:	346c      	adds	r4, #108	; 0x6c
   b518a:	e7f8      	b.n	b517e <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_+0x6>
	}
   b518c:	bd38      	pop	{r3, r4, r5, pc}

000b518e <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b518e:	b510      	push	{r4, lr}
   b5190:	4604      	mov	r4, r0
	__destroy(__first, __last);
   b5192:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5196:	f7ff ffef 	bl	b5178 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
   b519a:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b519c:	b118      	cbz	r0, b51a6 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b519e:	68a1      	ldr	r1, [r4, #8]
   b51a0:	1a09      	subs	r1, r1, r0
   b51a2:	f7fe ff80 	bl	b40a6 <_ZdlPvj>
      }
   b51a6:	4620      	mov	r0, r4
   b51a8:	bd10      	pop	{r4, pc}

000b51aa <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b51aa:	b538      	push	{r3, r4, r5, lr}
   b51ac:	4604      	mov	r4, r0
   b51ae:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b51b0:	42ac      	cmp	r4, r5
   b51b2:	d008      	beq.n	b51c6 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_+0x1c>
   b51b4:	f104 000c 	add.w	r0, r4, #12
   b51b8:	f006 fede 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
#include "Railway.cpp"

class City{
   b51bc:	4620      	mov	r0, r4
   b51be:	f7ff ffe6 	bl	b518e <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b51c2:	3428      	adds	r4, #40	; 0x28
   b51c4:	e7f4      	b.n	b51b0 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_+0x6>
	}
   b51c6:	bd38      	pop	{r3, r4, r5, pc}

000b51c8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b51c8:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b51ca:	b510      	push	{r4, lr}
   b51cc:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b51ce:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b51d2:	d005      	beq.n	b51e0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b51d4:	4601      	mov	r1, r0
   b51d6:	4622      	mov	r2, r4
   b51d8:	4618      	mov	r0, r3
   b51da:	f007 fe8b 	bl	bcef4 <memmove>
   b51de:	4603      	mov	r3, r0
	}
   b51e0:	1918      	adds	r0, r3, r4
   b51e2:	bd10      	pop	{r4, pc}

000b51e4 <_ZNSt6vectorIiSaIiEEC1ERKS1_>:
      vector(const vector& __x)
   b51e4:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b51e6:	e9d1 3600 	ldrd	r3, r6, [r1]
   b51ea:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b51ec:	2300      	movs	r3, #0
      vector(const vector& __x)
   b51ee:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b51f0:	e9c0 3300 	strd	r3, r3, [r0]
   b51f4:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b51f6:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
   b51f8:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b51fa:	f7fe ffd3 	bl	b41a4 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b51fe:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5202:	4406      	add	r6, r0
   b5204:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5206:	4602      	mov	r2, r0
			      _Category>::__copy_m(__first, __last, __result);
   b5208:	e9d5 0100 	ldrd	r0, r1, [r5]
   b520c:	f7ff ffdc 	bl	b51c8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
   b5210:	6060      	str	r0, [r4, #4]
      }
   b5212:	4620      	mov	r0, r4
   b5214:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>:
      vector(initializer_list<value_type> __l,
   b5218:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b521a:	ab04      	add	r3, sp, #16
   b521c:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5220:	2300      	movs	r3, #0
   b5222:	e9c0 3300 	strd	r3, r3, [r0]
   b5226:	6083      	str	r3, [r0, #8]
      vector(initializer_list<value_type> __l,
   b5228:	4604      	mov	r4, r0
   b522a:	4613      	mov	r3, r2
   b522c:	460e      	mov	r6, r1
   b522e:	0095      	lsls	r5, r2, #2
   b5230:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   b5234:	f342 001d 	sbfx	r0, r2, #0, #30
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b5238:	4a0a      	ldr	r2, [pc, #40]	; (b5264 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x4c>)
   b523a:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   b523e:	d202      	bcs.n	b5246 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x2e>
	  __throw_length_error(
   b5240:	4809      	ldr	r0, [pc, #36]	; (b5268 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x50>)
   b5242:	f006 fe67 	bl	bbf14 <_ZSt20__throw_length_errorPKc>
   b5246:	9101      	str	r1, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b5248:	f7fe ffac 	bl	b41a4 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b524c:	4405      	add	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b524e:	4602      	mov	r2, r0
   b5250:	6020      	str	r0, [r4, #0]
   b5252:	9901      	ldr	r1, [sp, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5254:	60a5      	str	r5, [r4, #8]
   b5256:	4630      	mov	r0, r6
   b5258:	f7ff ffb6 	bl	b51c8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
   b525c:	6060      	str	r0, [r4, #4]
      }
   b525e:	b004      	add	sp, #16
   b5260:	bd70      	pop	{r4, r5, r6, pc}
   b5262:	bf00      	nop
   b5264:	7ffffffc 	.word	0x7ffffffc
   b5268:	000bf117 	.word	0x000bf117

000b526c <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>:
      if (&__x != this)
   b526c:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b526e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5270:	4604      	mov	r4, r0
   b5272:	460d      	mov	r5, r1
      if (&__x != this)
   b5274:	d01d      	beq.n	b52b2 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x46>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5276:	e9d1 7100 	ldrd	r7, r1, [r1]
			 - this->_M_impl._M_start); }
   b527a:	6802      	ldr	r2, [r0, #0]
   b527c:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b527e:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b5280:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b5282:	429e      	cmp	r6, r3
   b5284:	d917      	bls.n	b52b6 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x4a>
	  pointer __result = this->_M_allocate(__n);
   b5286:	10b0      	asrs	r0, r6, #2
   b5288:	9101      	str	r1, [sp, #4]
   b528a:	f7fe ff8b 	bl	b41a4 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
   b528e:	9901      	ldr	r1, [sp, #4]
   b5290:	4602      	mov	r2, r0
   b5292:	4605      	mov	r5, r0
   b5294:	4638      	mov	r0, r7
   b5296:	f7ff ff97 	bl	b51c8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b529a:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b529c:	b118      	cbz	r0, b52a6 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x3a>
			    - this->_M_impl._M_start);
   b529e:	68a1      	ldr	r1, [r4, #8]
   b52a0:	1a09      	subs	r1, r1, r0
   b52a2:	f7fe ff00 	bl	b40a6 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b52a6:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b52a8:	4435      	add	r5, r6
   b52aa:	60a5      	str	r5, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b52ac:	6823      	ldr	r3, [r4, #0]
   b52ae:	4433      	add	r3, r6
   b52b0:	6063      	str	r3, [r4, #4]
    }
   b52b2:	b003      	add	sp, #12
   b52b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b52b6:	6843      	ldr	r3, [r0, #4]
   b52b8:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b52ba:	429e      	cmp	r6, r3
   b52bc:	d803      	bhi.n	b52c6 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x5a>
   b52be:	4638      	mov	r0, r7
   b52c0:	f7ff ff82 	bl	b51c8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
   b52c4:	e7f2      	b.n	b52ac <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x40>
   b52c6:	18f9      	adds	r1, r7, r3
   b52c8:	4638      	mov	r0, r7
   b52ca:	f7ff ff7d 	bl	b51c8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
   b52ce:	e9d4 0200 	ldrd	r0, r2, [r4]
   b52d2:	e9d5 3100 	ldrd	r3, r1, [r5]
   b52d6:	1a10      	subs	r0, r2, r0
   b52d8:	4418      	add	r0, r3
   b52da:	e7f1      	b.n	b52c0 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x54>

000b52dc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b52dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b52e0:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b52e2:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b52e4:	480b      	ldr	r0, [pc, #44]	; (b5314 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x38>)
   b52e6:	10a4      	asrs	r4, r4, #2
   b52e8:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b52ea:	4616      	mov	r6, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b52ec:	4627      	mov	r7, r4
   b52ee:	4690      	mov	r8, r2
   b52f0:	2f00      	cmp	r7, #0
   b52f2:	dd08      	ble.n	b5306 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x2a>
	      *__result = *__first;
   b52f4:	4629      	mov	r1, r5
   b52f6:	4640      	mov	r0, r8
   b52f8:	f7ff ffb8 	bl	b526c <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	      ++__first;
   b52fc:	350c      	adds	r5, #12
	      ++__result;
   b52fe:	f108 080c 	add.w	r8, r8, #12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5302:	3f01      	subs	r7, #1
   b5304:	e7f4      	b.n	b52f0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x14>
	  return __result;
   b5306:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b530a:	200c      	movs	r0, #12
   b530c:	fb00 6004 	mla	r0, r0, r4, r6
   b5310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5314:	aaaaaaab 	.word	0xaaaaaaab

000b5318 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>:
    std::vector<std::string> colors;
    int tripleIndex = -1;
    int loopIndex = -1;
    int lowerLoopBound, upperLoopBound, lowerGreenBound, upperGreenBound;

    Railway(std::vector<Checkpoint> checkpointInput, std::vector<int> scalerInput, std::vector<int> outputSize, std::string nameInput, std::vector<std::string> colorInput, std::vector<int> boundInput = {0, 0, 0, 0}){
   b5318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b531c:	2500      	movs	r5, #0
   b531e:	4699      	mov	r9, r3
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b5320:	f100 0338 	add.w	r3, r0, #56	; 0x38
      { _M_string_length = __length; }
   b5324:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   b5328:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b532c:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
   b5330:	4604      	mov	r4, r0
   b5332:	e9c0 5500 	strd	r5, r5, [r0]
   b5336:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b533a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b533e:	e9c0 5506 	strd	r5, r5, [r0, #24]
   b5342:	e9c0 5508 	strd	r5, r5, [r0, #32]
   b5346:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
   b534a:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
   b534e:	b099      	sub	sp, #100	; 0x64
      { __c1 = __c2; }
   b5350:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
   b5354:	6505      	str	r5, [r0, #80]	; 0x50
   b5356:	4692      	mov	sl, r2
   b5358:	f100 0b18 	add.w	fp, r0, #24
   b535c:	f100 0830 	add.w	r8, r0, #48	; 0x30
   b5360:	f100 0748 	add.w	r7, r0, #72	; 0x48
      checkpoints = checkpointInput;
   b5364:	f7fe ff74 	bl	b4250 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5368:	e9d4 2300 	ldrd	r2, r3, [r4]
   b536c:	1a9b      	subs	r3, r3, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b536e:	42ab      	cmp	r3, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5370:	ea4f 01e3 	mov.w	r1, r3, asr #3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b5374:	da02      	bge.n	b537c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x64>
	  __throw_length_error(
   b5376:	485f      	ldr	r0, [pc, #380]	; (b54f4 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1dc>)
   b5378:	f006 fdcc 	bl	bbf14 <_ZSt20__throw_length_errorPKc>
      { _M_create_storage(__n); }
   b537c:	a809      	add	r0, sp, #36	; 0x24
   b537e:	9101      	str	r1, [sp, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5380:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b5384:	950b      	str	r5, [sp, #44]	; 0x2c
      { _M_create_storage(__n); }
   b5386:	f7ff feb7 	bl	b50f8 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
      if (__n <= 0)
   b538a:	9901      	ldr	r1, [sp, #4]
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
   b538c:	9809      	ldr	r0, [sp, #36]	; 0x24
   b538e:	b131      	cbz	r1, b539e <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x86>
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
   b5390:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	*__first = __tmp;
   b5394:	008a      	lsls	r2, r1, #2
   b5396:	4629      	mov	r1, r5
   b5398:	f007 fdc6 	bl	bcf28 <memset>
   b539c:	4630      	mov	r0, r6
	  _M_finish = __x._M_finish;
   b539e:	e9d4 5203 	ldrd	r5, r2, [r4, #12]
	  _M_start = __x._M_start;
   b53a2:	9909      	ldr	r1, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
   b53a4:	6963      	ldr	r3, [r4, #20]
   b53a6:	930e      	str	r3, [sp, #56]	; 0x38
	  _M_finish = __x._M_finish;
   b53a8:	e9c4 1003 	strd	r1, r0, [r4, #12]
      }
   b53ac:	ae0c      	add	r6, sp, #48	; 0x30
	  _M_end_of_storage = __x._M_end_of_storage;
   b53ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
   b53b0:	6161      	str	r1, [r4, #20]
	  _M_finish = __x._M_finish;
   b53b2:	e9cd 520c 	strd	r5, r2, [sp, #48]	; 0x30
      }
   b53b6:	4630      	mov	r0, r6
	  _M_start = __x._M_start;
   b53b8:	2500      	movs	r5, #0
	  _M_finish = __x._M_finish;
   b53ba:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
   b53be:	950b      	str	r5, [sp, #44]	; 0x2c
      }
   b53c0:	f7ff fa2a 	bl	b4818 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b53c4:	a809      	add	r0, sp, #36	; 0x24
   b53c6:	f7ff fa27 	bl	b4818 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
      distances = std::vector<float>(checkpoints.size(), 0);
      scalers = scalerInput;
   b53ca:	4651      	mov	r1, sl
   b53cc:	4658      	mov	r0, fp
   b53ce:	f7ff ff4d 	bl	b526c <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
      outputs = {std::vector<int>(outputSize[0], 0), std::vector<int>(outputSize[1], 0), std::vector<int>(outputSize[2], 0), std::vector<int>(outputSize[3], 0)};
   b53d2:	f8d9 1000 	ldr.w	r1, [r9]
   b53d6:	9506      	str	r5, [sp, #24]
   b53d8:	6809      	ldr	r1, [r1, #0]
   b53da:	ab02      	add	r3, sp, #8
   b53dc:	aa06      	add	r2, sp, #24
   b53de:	4630      	mov	r0, r6
   b53e0:	f7ff fa58 	bl	b4894 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b53e4:	f8d9 1000 	ldr.w	r1, [r9]
   b53e8:	9507      	str	r5, [sp, #28]
   b53ea:	6849      	ldr	r1, [r1, #4]
   b53ec:	ab03      	add	r3, sp, #12
   b53ee:	aa07      	add	r2, sp, #28
   b53f0:	a80f      	add	r0, sp, #60	; 0x3c
   b53f2:	f7ff fa4f 	bl	b4894 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b53f6:	f8d9 1000 	ldr.w	r1, [r9]
   b53fa:	9508      	str	r5, [sp, #32]
   b53fc:	6889      	ldr	r1, [r1, #8]
   b53fe:	ab04      	add	r3, sp, #16
   b5400:	aa08      	add	r2, sp, #32
   b5402:	a812      	add	r0, sp, #72	; 0x48
   b5404:	f7ff fa46 	bl	b4894 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b5408:	f8d9 1000 	ldr.w	r1, [r9]
   b540c:	9509      	str	r5, [sp, #36]	; 0x24
   b540e:	ab05      	add	r3, sp, #20
   b5410:	aa09      	add	r2, sp, #36	; 0x24
   b5412:	68c9      	ldr	r1, [r1, #12]
   b5414:	a815      	add	r0, sp, #84	; 0x54
   b5416:	f7ff fa3d 	bl	b4894 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
			 - this->_M_impl._M_start); }
   b541a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b541c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b541e:	1a9b      	subs	r3, r3, r2
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
		    std::forward_iterator_tag)
      {
	const size_type __len = std::distance(__first, __last);

	if (__len > capacity())
   b5420:	2b2f      	cmp	r3, #47	; 0x2f
   b5422:	d83f      	bhi.n	b54a4 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x18c>
	  pointer __result = this->_M_allocate(__n);
   b5424:	2004      	movs	r0, #4
   b5426:	f7fe fe5f 	bl	b40e8 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
   b542a:	46b3      	mov	fp, r6
   b542c:	4605      	mov	r5, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b542e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
	  _ForwardIterator __cur = __result;
   b5432:	4681      	mov	r9, r0
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b5434:	f1b9 0f00 	cmp.w	r9, #0
   b5438:	d003      	beq.n	b5442 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x12a>
   b543a:	4659      	mov	r1, fp
   b543c:	4648      	mov	r0, r9
   b543e:	f7ff fed1 	bl	b51e4 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
	      for (; __first != __last; ++__first, (void)++__cur)
   b5442:	f109 090c 	add.w	r9, r9, #12
   b5446:	45d1      	cmp	r9, sl
   b5448:	f10b 0b0c 	add.w	fp, fp, #12
   b544c:	d1f2      	bne.n	b5434 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x11c>
	__destroy(__first, __last);
   b544e:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b5452:	f7ff fe66 	bl	b5122 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	    _S_check_init_len(__len, _M_get_Tp_allocator());
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
	    _M_deallocate(this->_M_impl._M_start,
   b5456:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b5458:	b118      	cbz	r0, b5462 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x14a>
			  this->_M_impl._M_end_of_storage
			  - this->_M_impl._M_start);
   b545a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b545c:	1a09      	subs	r1, r1, r0
   b545e:	f7fe fe22 	bl	b40a6 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b5462:	e9c4 5a09 	strd	r5, sl, [r4, #36]	; 0x24
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b5466:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
   b546a:	ad18      	add	r5, sp, #96	; 0x60
   b546c:	3d0c      	subs	r5, #12
      }
   b546e:	4628      	mov	r0, r5
   b5470:	f7ff f9dc 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5474:	42b5      	cmp	r5, r6
   b5476:	d1f9      	bne.n	b546c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x154>
	this->_M_assign(__str);
   b5478:	9922      	ldr	r1, [sp, #136]	; 0x88
   b547a:	4640      	mov	r0, r8
   b547c:	f006 fd9a 	bl	bbfb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
      name = nameInput;
      colors = colorInput;
   b5480:	4638      	mov	r0, r7
   b5482:	9923      	ldr	r1, [sp, #140]	; 0x8c
   b5484:	f7fe ff36 	bl	b42f4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
	return *(this->_M_impl._M_start + __n);
   b5488:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b548a:	681b      	ldr	r3, [r3, #0]
      lowerLoopBound = boundInput[0];
   b548c:	681a      	ldr	r2, [r3, #0]
   b548e:	65e2      	str	r2, [r4, #92]	; 0x5c
      upperLoopBound = boundInput[1];
   b5490:	685a      	ldr	r2, [r3, #4]
   b5492:	6622      	str	r2, [r4, #96]	; 0x60
      lowerGreenBound = boundInput[2];
   b5494:	689a      	ldr	r2, [r3, #8]
      upperGreenBound = boundInput[3];
   b5496:	68db      	ldr	r3, [r3, #12]
      lowerGreenBound = boundInput[2];
   b5498:	6662      	str	r2, [r4, #100]	; 0x64
    }
   b549a:	4620      	mov	r0, r4
      upperGreenBound = boundInput[3];
   b549c:	66a3      	str	r3, [r4, #104]	; 0x68
    }
   b549e:	b019      	add	sp, #100	; 0x64
   b54a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b54a4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   b54a6:	1aad      	subs	r5, r5, r2
	  }
	else if (size() >= __len)
   b54a8:	2d2f      	cmp	r5, #47	; 0x2f
   b54aa:	d90b      	bls.n	b54c4 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ac>
			      _Category>::__copy_m(__first, __last, __result);
   b54ac:	a918      	add	r1, sp, #96	; 0x60
   b54ae:	4630      	mov	r0, r6
   b54b0:	f7ff ff14 	bl	b52dc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b54b4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b54b6:	4288      	cmp	r0, r1
   b54b8:	4605      	mov	r5, r0
   b54ba:	d0d6      	beq.n	b546a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
   b54bc:	f7ff fe31 	bl	b5122 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   b54c0:	62a5      	str	r5, [r4, #40]	; 0x28
   b54c2:	e7d2      	b.n	b546a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b54c4:	4435      	add	r5, r6
   b54c6:	4629      	mov	r1, r5
   b54c8:	4630      	mov	r0, r6
   b54ca:	f7ff ff07 	bl	b52dc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b54ce:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
   b54d2:	ab18      	add	r3, sp, #96	; 0x60
   b54d4:	429d      	cmp	r5, r3
   b54d6:	d00a      	beq.n	b54ee <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1d6>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b54d8:	f1b9 0f00 	cmp.w	r9, #0
   b54dc:	d003      	beq.n	b54e6 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ce>
   b54de:	4629      	mov	r1, r5
   b54e0:	4648      	mov	r0, r9
   b54e2:	f7ff fe7f 	bl	b51e4 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b54e6:	350c      	adds	r5, #12
   b54e8:	f109 090c 	add.w	r9, r9, #12
   b54ec:	e7f1      	b.n	b54d2 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ba>
	    _ForwardIterator __mid = __first;
	    std::advance(__mid, size());
	    std::copy(__first, __mid, this->_M_impl._M_start);
	    const size_type __attribute__((__unused__)) __n = __len - size();
	    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	    this->_M_impl._M_finish =
   b54ee:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
   b54f2:	e7ba      	b.n	b546a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
   b54f4:	000bf117 	.word	0x000bf117

000b54f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0>:
   b54f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b54fc:	ed2d 8b0e 	vpush	{d8-d14}
   b5500:	2801      	cmp	r0, #1
   b5502:	4db4      	ldr	r5, [pc, #720]	; (b57d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2dc>)
   b5504:	f5ad 7d41 	sub.w	sp, sp, #772	; 0x304
   b5508:	f041 811a 	bne.w	b6740 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1248>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b550c:	2400      	movs	r4, #0
    SleepResult() {}
   b550e:	4bb2      	ldr	r3, [pc, #712]	; (b57d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e0>)
   b5510:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5512:	e9c5 4400 	strd	r4, r4, [r5]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5516:	2003      	movs	r0, #3
   b5518:	f004 f8ca 	bl	b96b0 <set_system_mode>
  public:
    float lat;
    float lon;

    Checkpoint(float la, float lo){
      lat = la;
   b551c:	4baf      	ldr	r3, [pc, #700]	; (b57dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e4>)
   b551e:	93a4      	str	r3, [sp, #656]	; 0x290
      lon = lo;
   b5520:	4baf      	ldr	r3, [pc, #700]	; (b57e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e8>)
   b5522:	93a5      	str	r3, [sp, #660]	; 0x294
      lat = la;
   b5524:	4baf      	ldr	r3, [pc, #700]	; (b57e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2ec>)
   b5526:	93a6      	str	r3, [sp, #664]	; 0x298
      lon = lo;
   b5528:	4baf      	ldr	r3, [pc, #700]	; (b57e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f0>)
   b552a:	93a7      	str	r3, [sp, #668]	; 0x29c
      lat = la;
   b552c:	4baf      	ldr	r3, [pc, #700]	; (b57ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f4>)
   b552e:	93a8      	str	r3, [sp, #672]	; 0x2a0
      lon = lo;
   b5530:	4baf      	ldr	r3, [pc, #700]	; (b57f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f8>)
   b5532:	93a9      	str	r3, [sp, #676]	; 0x2a4
      lat = la;
   b5534:	4baf      	ldr	r3, [pc, #700]	; (b57f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2fc>)
   b5536:	93aa      	str	r3, [sp, #680]	; 0x2a8
      lon = lo;
   b5538:	4baf      	ldr	r3, [pc, #700]	; (b57f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x300>)
   b553a:	93ab      	str	r3, [sp, #684]	; 0x2ac
      lat = la;
   b553c:	4baf      	ldr	r3, [pc, #700]	; (b57fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x304>)
   b553e:	93ac      	str	r3, [sp, #688]	; 0x2b0
      lon = lo;
   b5540:	4baf      	ldr	r3, [pc, #700]	; (b5800 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x308>)
   b5542:	93ad      	str	r3, [sp, #692]	; 0x2b4
);
   b5544:	aba4      	add	r3, sp, #656	; 0x290
   b5546:	937e      	str	r3, [sp, #504]	; 0x1f8
   b5548:	2305      	movs	r3, #5
   b554a:	937f      	str	r3, [sp, #508]	; 0x1fc
   b554c:	f50d 7ae8 	add.w	sl, sp, #464	; 0x1d0
   b5550:	aa7e      	add	r2, sp, #504	; 0x1f8
   b5552:	4653      	mov	r3, sl
   b5554:	ca06      	ldmia	r2, {r1, r2}
   b5556:	a88c      	add	r0, sp, #560	; 0x230
   b5558:	f7ff f9be 	bl	b48d8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b555c:	4ba9      	ldr	r3, [pc, #676]	; (b5804 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x30c>)
      lat = la;
   b555e:	eddf 8aaa 	vldr	s17, [pc, #680]	; b5808 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x310>
      lon = lo;
   b5562:	ed9f 8aaa 	vldr	s16, [pc, #680]	; b580c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x314>
      lat = la;
   b5566:	eddf 9aaa 	vldr	s19, [pc, #680]	; b5810 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x318>
      lon = lo;
   b556a:	ed9f 9aaa 	vldr	s18, [pc, #680]	; b5814 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x31c>
      lat = la;
   b556e:	eddf aaaa 	vldr	s21, [pc, #680]	; b5818 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x320>
      lon = lo;
   b5572:	ed9f aaaa 	vldr	s20, [pc, #680]	; b581c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x324>
      lat = la;
   b5576:	eddf baaa 	vldr	s23, [pc, #680]	; b5820 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x328>
      lon = lo;
   b557a:	ed9f baaa 	vldr	s22, [pc, #680]	; b5824 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x32c>
      lat = la;
   b557e:	eddf daaa 	vldr	s27, [pc, #680]	; b5828 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x330>
      lon = lo;
   b5582:	ed9f daaa 	vldr	s26, [pc, #680]	; b582c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x334>
      lat = la;
   b5586:	eddf caaa 	vldr	s25, [pc, #680]	; b5830 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x338>
      lon = lo;
   b558a:	ed9f caaa 	vldr	s24, [pc, #680]	; b5834 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x33c>
   b558e:	ed9f eaaa 	vldr	s28, [pc, #680]	; b5838 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x340>
   b5592:	461f      	mov	r7, r3
   b5594:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5596:	f50d 7b17 	add.w	fp, sp, #604	; 0x25c
   b559a:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
   b559e:	2204      	movs	r2, #4
   b55a0:	ad89      	add	r5, sp, #548	; 0x224
   b55a2:	ab7c      	add	r3, sp, #496	; 0x1f0
   b55a4:	f8cd b1f0 	str.w	fp, [sp, #496]	; 0x1f0
   b55a8:	927d      	str	r2, [sp, #500]	; 0x1f4
   b55aa:	e893 0006 	ldmia.w	r3, {r1, r2}
   b55ae:	4628      	mov	r0, r5
   b55b0:	f7ff fe32 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b55b4:	2228      	movs	r2, #40	; 0x28
   b55b6:	e9cd 2494 	strd	r2, r4, [sp, #592]	; 0x250
   b55ba:	aa93      	add	r2, sp, #588	; 0x24c
   b55bc:	927a      	str	r2, [sp, #488]	; 0x1e8
   b55be:	2204      	movs	r2, #4
   b55c0:	f50d 7806 	add.w	r8, sp, #536	; 0x218
   b55c4:	ab7a      	add	r3, sp, #488	; 0x1e8
   b55c6:	927b      	str	r2, [sp, #492]	; 0x1ec
   b55c8:	e893 0006 	ldmia.w	r3, {r1, r2}
   b55cc:	4640      	mov	r0, r8
   b55ce:	9493      	str	r4, [sp, #588]	; 0x24c
   b55d0:	9496      	str	r4, [sp, #600]	; 0x258
   b55d2:	f7ff fe21 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b55d6:	a89d      	add	r0, sp, #628	; 0x274
   b55d8:	4998      	ldr	r1, [pc, #608]	; (b583c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x344>)
   b55da:	f7fe fd97 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b55de:	a8b0      	add	r0, sp, #704	; 0x2c0
   b55e0:	4997      	ldr	r1, [pc, #604]	; (b5840 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x348>)
   b55e2:	f7fe fd93 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b55e6:	a8b6      	add	r0, sp, #728	; 0x2d8
   b55e8:	4996      	ldr	r1, [pc, #600]	; (b5844 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x34c>)
   b55ea:	f7fe fd8f 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b55ee:	a9b0      	add	r1, sp, #704	; 0x2c0
   b55f0:	9178      	str	r1, [sp, #480]	; 0x1e0
   b55f2:	2102      	movs	r1, #2
   b55f4:	f50d 79e4 	add.w	r9, sp, #456	; 0x1c8
   b55f8:	9179      	str	r1, [sp, #484]	; 0x1e4
   b55fa:	aa78      	add	r2, sp, #480	; 0x1e0
   b55fc:	464b      	mov	r3, r9
   b55fe:	ca06      	ldmia	r2, {r1, r2}
   b5600:	a883      	add	r0, sp, #524	; 0x20c
   b5602:	f7ff f99d 	bl	b4940 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5606:	4621      	mov	r1, r4
   b5608:	2210      	movs	r2, #16
   b560a:	a88f      	add	r0, sp, #572	; 0x23c
   b560c:	f007 fc8c 	bl	bcf28 <memset>
   b5610:	aa8f      	add	r2, sp, #572	; 0x23c
   b5612:	9276      	str	r2, [sp, #472]	; 0x1d8
   b5614:	2204      	movs	r2, #4
   b5616:	ae80      	add	r6, sp, #512	; 0x200
   b5618:	ab76      	add	r3, sp, #472	; 0x1d8
   b561a:	9277      	str	r2, [sp, #476]	; 0x1dc
   b561c:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5620:	4630      	mov	r0, r6
   b5622:	f7ff fdf9 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway redLineCTA = Railway(
   b5626:	aa83      	add	r2, sp, #524	; 0x20c
   b5628:	9201      	str	r2, [sp, #4]
   b562a:	aa9d      	add	r2, sp, #628	; 0x274
   b562c:	4643      	mov	r3, r8
   b562e:	a98c      	add	r1, sp, #560	; 0x230
   b5630:	9602      	str	r6, [sp, #8]
   b5632:	9200      	str	r2, [sp, #0]
   b5634:	4884      	ldr	r0, [pc, #528]	; (b5848 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x350>)
   b5636:	462a      	mov	r2, r5
   b5638:	f7ff fe6e 	bl	b5318 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
      }
   b563c:	4630      	mov	r0, r6
   b563e:	f7ff f8f5 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5642:	a883      	add	r0, sp, #524	; 0x20c
   b5644:	f7ff f913 	bl	b486e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b5648:	a8b6      	add	r0, sp, #728	; 0x2d8
   b564a:	f006 fc95 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b564e:	a8b0      	add	r0, sp, #704	; 0x2c0
   b5650:	f006 fc92 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5654:	a89d      	add	r0, sp, #628	; 0x274
   b5656:	f006 fc8f 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b565a:	4640      	mov	r0, r8
   b565c:	f7ff f8e6 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5660:	4628      	mov	r0, r5
   b5662:	f7ff f8e3 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5666:	a88c      	add	r0, sp, #560	; 0x230
   b5668:	f7ff f8cc 	bl	b4804 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b566c:	4b77      	ldr	r3, [pc, #476]	; (b584c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x354>)
   b566e:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b5670:	4b77      	ldr	r3, [pc, #476]	; (b5850 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x358>)
   b5672:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b5674:	4b77      	ldr	r3, [pc, #476]	; (b5854 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x35c>)
   b5676:	93b2      	str	r3, [sp, #712]	; 0x2c8
      lon = lo;
   b5678:	4b77      	ldr	r3, [pc, #476]	; (b5858 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x360>)
   b567a:	93b3      	str	r3, [sp, #716]	; 0x2cc
      lat = la;
   b567c:	4b77      	ldr	r3, [pc, #476]	; (b585c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x364>)
   b567e:	93b4      	str	r3, [sp, #720]	; 0x2d0
      lon = lo;
   b5680:	4b77      	ldr	r3, [pc, #476]	; (b5860 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x368>)
   b5682:	93b5      	str	r3, [sp, #724]	; 0x2d4
      lat = la;
   b5684:	4b77      	ldr	r3, [pc, #476]	; (b5864 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x36c>)
   b5686:	93b6      	str	r3, [sp, #728]	; 0x2d8
      lon = lo;
   b5688:	4b77      	ldr	r3, [pc, #476]	; (b5868 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x370>)
   b568a:	93b7      	str	r3, [sp, #732]	; 0x2dc
      lat = la;
   b568c:	4b77      	ldr	r3, [pc, #476]	; (b586c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x374>)
   b568e:	93b8      	str	r3, [sp, #736]	; 0x2e0
      lon = lo;
   b5690:	4b77      	ldr	r3, [pc, #476]	; (b5870 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x378>)
   b5692:	93b9      	str	r3, [sp, #740]	; 0x2e4
      lat = la;
   b5694:	4b77      	ldr	r3, [pc, #476]	; (b5874 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x37c>)
   b5696:	93ba      	str	r3, [sp, #744]	; 0x2e8
);
   b5698:	aab0      	add	r2, sp, #704	; 0x2c0
      lon = lo;
   b569a:	4b77      	ldr	r3, [pc, #476]	; (b5878 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x380>)
   b569c:	9274      	str	r2, [sp, #464]	; 0x1d0
   b569e:	93bb      	str	r3, [sp, #748]	; 0x2ec
   b56a0:	2207      	movs	r2, #7
      lat = la;
   b56a2:	4b76      	ldr	r3, [pc, #472]	; (b587c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x384>)
   b56a4:	9275      	str	r2, [sp, #468]	; 0x1d4
   b56a6:	93bc      	str	r3, [sp, #752]	; 0x2f0
   b56a8:	aa6a      	add	r2, sp, #424	; 0x1a8
      lon = lo;
   b56aa:	4b75      	ldr	r3, [pc, #468]	; (b5880 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x388>)
   b56ac:	93bd      	str	r3, [sp, #756]	; 0x2f4
   b56ae:	a88c      	add	r0, sp, #560	; 0x230
   b56b0:	4613      	mov	r3, r2
   b56b2:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b56b6:	f7ff f90f 	bl	b48d8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b56ba:	aa9d      	add	r2, sp, #628	; 0x274
   b56bc:	f107 0c10 	add.w	ip, r7, #16
   b56c0:	9204      	str	r2, [sp, #16]
   b56c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b56c6:	9f04      	ldr	r7, [sp, #16]
   b56c8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b56ca:	e89c 0003 	ldmia.w	ip, {r0, r1}
   b56ce:	aa9d      	add	r2, sp, #628	; 0x274
   b56d0:	9272      	str	r2, [sp, #456]	; 0x1c8
   b56d2:	2206      	movs	r2, #6
   b56d4:	9273      	str	r2, [sp, #460]	; 0x1cc
   b56d6:	e9c7 0100 	strd	r0, r1, [r7]
   b56da:	e899 0006 	ldmia.w	r9, {r1, r2}
   b56de:	4628      	mov	r0, r5
   b56e0:	9704      	str	r7, [sp, #16]
   b56e2:	f7ff fd99 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b56e6:	aa93      	add	r2, sp, #588	; 0x24c
   b56e8:	9270      	str	r2, [sp, #448]	; 0x1c0
   b56ea:	233c      	movs	r3, #60	; 0x3c
   b56ec:	2204      	movs	r2, #4
   b56ee:	e9cd 3494 	strd	r3, r4, [sp, #592]	; 0x250
   b56f2:	9271      	str	r2, [sp, #452]	; 0x1c4
   b56f4:	ab70      	add	r3, sp, #448	; 0x1c0
   b56f6:	e893 0006 	ldmia.w	r3, {r1, r2}
   b56fa:	4640      	mov	r0, r8
   b56fc:	9493      	str	r4, [sp, #588]	; 0x24c
   b56fe:	9496      	str	r4, [sp, #600]	; 0x258
   b5700:	f7ff fd8a 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5704:	4658      	mov	r0, fp
   b5706:	495f      	ldr	r1, [pc, #380]	; (b5884 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x38c>)
   b5708:	f7fe fd00 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b570c:	a8a4      	add	r0, sp, #656	; 0x290
   b570e:	495e      	ldr	r1, [pc, #376]	; (b5888 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x390>)
   b5710:	f7fe fcfc 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5714:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5716:	495d      	ldr	r1, [pc, #372]	; (b588c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x394>)
   b5718:	f7fe fcf8 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b571c:	aba4      	add	r3, sp, #656	; 0x290
   b571e:	2102      	movs	r1, #2
   b5720:	936e      	str	r3, [sp, #440]	; 0x1b8
   b5722:	f50d 79d0 	add.w	r9, sp, #416	; 0x1a0
   b5726:	916f      	str	r1, [sp, #444]	; 0x1bc
   b5728:	aa6e      	add	r2, sp, #440	; 0x1b8
   b572a:	464b      	mov	r3, r9
   b572c:	ca06      	ldmia	r2, {r1, r2}
   b572e:	a883      	add	r0, sp, #524	; 0x20c
   b5730:	f7ff f906 	bl	b4940 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5734:	4621      	mov	r1, r4
   b5736:	2210      	movs	r2, #16
   b5738:	a88f      	add	r0, sp, #572	; 0x23c
   b573a:	f007 fbf5 	bl	bcf28 <memset>
   b573e:	aa8f      	add	r2, sp, #572	; 0x23c
   b5740:	926c      	str	r2, [sp, #432]	; 0x1b0
   b5742:	2204      	movs	r2, #4
   b5744:	ab6c      	add	r3, sp, #432	; 0x1b0
   b5746:	926d      	str	r2, [sp, #436]	; 0x1b4
   b5748:	e893 0006 	ldmia.w	r3, {r1, r2}
   b574c:	4630      	mov	r0, r6
   b574e:	f7ff fd63 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway blueLineCTA = Railway(
   b5752:	aa83      	add	r2, sp, #524	; 0x20c
   b5754:	4643      	mov	r3, r8
   b5756:	a98c      	add	r1, sp, #560	; 0x230
   b5758:	e9cd b200 	strd	fp, r2, [sp]
   b575c:	9602      	str	r6, [sp, #8]
   b575e:	462a      	mov	r2, r5
   b5760:	484b      	ldr	r0, [pc, #300]	; (b5890 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x398>)
   b5762:	f7ff fdd9 	bl	b5318 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5766:	4630      	mov	r0, r6
   b5768:	f7ff f860 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b576c:	a883      	add	r0, sp, #524	; 0x20c
   b576e:	f7ff f87e 	bl	b486e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5772:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5774:	f006 fc00 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5778:	a8a4      	add	r0, sp, #656	; 0x290
   b577a:	f006 fbfd 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b577e:	4658      	mov	r0, fp
   b5780:	f006 fbfa 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5784:	4640      	mov	r0, r8
   b5786:	f7ff f851 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b578a:	4628      	mov	r0, r5
   b578c:	f7ff f84e 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5790:	a88c      	add	r0, sp, #560	; 0x230
   b5792:	f7ff f837 	bl	b4804 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b5796:	aab0      	add	r2, sp, #704	; 0x2c0
   b5798:	926a      	str	r2, [sp, #424]	; 0x1a8
   b579a:	2207      	movs	r2, #7
   b579c:	926b      	str	r2, [sp, #428]	; 0x1ac
   b579e:	f50d 7ac0 	add.w	sl, sp, #384	; 0x180
   b57a2:	aa6a      	add	r2, sp, #424	; 0x1a8
   b57a4:	ca06      	ldmia	r2, {r1, r2}
   b57a6:	4653      	mov	r3, sl
   b57a8:	a88c      	add	r0, sp, #560	; 0x230
      lat = la;
   b57aa:	edcd 8ab4 	vstr	s17, [sp, #720]	; 0x2d0
      lon = lo;
   b57ae:	ed8d 8ab5 	vstr	s16, [sp, #724]	; 0x2d4
      lat = la;
   b57b2:	edcd 8abc 	vstr	s17, [sp, #752]	; 0x2f0
      lon = lo;
   b57b6:	ed8d 8abd 	vstr	s16, [sp, #756]	; 0x2f4
      lat = la;
   b57ba:	edcd dab0 	vstr	s27, [sp, #704]	; 0x2c0
      lon = lo;
   b57be:	ed8d dab1 	vstr	s26, [sp, #708]	; 0x2c4
      lat = la;
   b57c2:	edcd cab2 	vstr	s25, [sp, #712]	; 0x2c8
      lon = lo;
   b57c6:	ed8d cab3 	vstr	s24, [sp, #716]	; 0x2cc
      lat = la;
   b57ca:	edcd bab6 	vstr	s23, [sp, #728]	; 0x2d8
      lon = lo;
   b57ce:	ed8d bab7 	vstr	s22, [sp, #732]	; 0x2dc
   b57d2:	e05f      	b.n	b5894 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x39c>
   b57d4:	20035248 	.word	0x20035248
   b57d8:	ffff0000 	.word	0xffff0000
   b57dc:	42276980 	.word	0x42276980
   b57e0:	c2af431e 	.word	0xc2af431e
   b57e4:	42279dcc 	.word	0x42279dcc
   b57e8:	c2af4202 	.word	0xc2af4202
   b57ec:	42279d95 	.word	0x42279d95
   b57f0:	c2af476d 	.word	0xc2af476d
   b57f4:	4227a7a9 	.word	0x4227a7a9
   b57f8:	c2af4e05 	.word	0xc2af4e05
   b57fc:	4227b382 	.word	0x4227b382
   b5800:	c2af4e44 	.word	0xc2af4e44
   b5804:	000bf43c 	.word	0x000bf43c
   b5808:	42278b1a 	.word	0x42278b1a
   b580c:	c2af449a 	.word	0xc2af449a
   b5810:	42278b2f 	.word	0x42278b2f
   b5814:	c2af4095 	.word	0xc2af4095
   b5818:	422781d8 	.word	0x422781d8
   b581c:	c2af4044 	.word	0xc2af4044
   b5820:	42278216 	.word	0x42278216
   b5824:	c2af44c1 	.word	0xc2af44c1
   b5828:	4227a49e 	.word	0x4227a49e
   b582c:	c2af4bd0 	.word	0xc2af4bd0
   b5830:	4227a437 	.word	0x4227a437
   b5834:	c2af4659 	.word	0xc2af4659
   b5838:	c2af4089 	.word	0xc2af4089
   b583c:	000bf23c 	.word	0x000bf23c
   b5840:	000bf240 	.word	0x000bf240
   b5844:	000bf247 	.word	0x000bf247
   b5848:	2003e554 	.word	0x2003e554
   b584c:	42277e9d 	.word	0x42277e9d
   b5850:	c2af74b3 	.word	0xc2af74b3
   b5854:	422780af 	.word	0x422780af
   b5858:	c2af588e 	.word	0xc2af588e
   b585c:	4227804d 	.word	0x4227804d
   b5860:	c2af482e 	.word	0xc2af482e
   b5864:	422780ad 	.word	0x422780ad
   b5868:	c2af4157 	.word	0xc2af4157
   b586c:	42278aff 	.word	0x42278aff
   b5870:	c2af4253 	.word	0xc2af4253
   b5874:	42278af4 	.word	0x42278af4
   b5878:	c2af4798 	.word	0xc2af4798
   b587c:	4227a978 	.word	0x4227a978
   b5880:	c2af5f5d 	.word	0xc2af5f5d
   b5884:	000bf24e 	.word	0x000bf24e
   b5888:	000bf253 	.word	0x000bf253
   b588c:	000bf25a 	.word	0x000bf25a
   b5890:	200352a0 	.word	0x200352a0
      lat = la;
   b5894:	edcd aab8 	vstr	s21, [sp, #736]	; 0x2e0
      lon = lo;
   b5898:	ed8d aab9 	vstr	s20, [sp, #740]	; 0x2e4
      lat = la;
   b589c:	edcd 9aba 	vstr	s19, [sp, #744]	; 0x2e8
      lon = lo;
   b58a0:	ed8d 9abb 	vstr	s18, [sp, #748]	; 0x2ec
   b58a4:	f7ff f818 	bl	b48d8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b58a8:	4bb6      	ldr	r3, [pc, #728]	; (b5b84 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b58aa:	f103 0228 	add.w	r2, r3, #40	; 0x28
   b58ae:	4617      	mov	r7, r2
   b58b0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b58b2:	f50d 7c1d 	add.w	ip, sp, #628	; 0x274
   b58b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b58ba:	e9d7 0100 	ldrd	r0, r1, [r7]
   b58be:	9a04      	ldr	r2, [sp, #16]
   b58c0:	9705      	str	r7, [sp, #20]
   b58c2:	e882 0003 	stmia.w	r2, {r0, r1}
   b58c6:	aa9d      	add	r2, sp, #628	; 0x274
   b58c8:	9268      	str	r2, [sp, #416]	; 0x1a0
   b58ca:	2206      	movs	r2, #6
   b58cc:	9269      	str	r2, [sp, #420]	; 0x1a4
   b58ce:	e899 0006 	ldmia.w	r9, {r1, r2}
   b58d2:	4628      	mov	r0, r5
   b58d4:	f7ff fca0 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b58d8:	f107 0208 	add.w	r2, r7, #8
   b58dc:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   b58de:	af93      	add	r7, sp, #588	; 0x24c
   b58e0:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b58e4:	2104      	movs	r1, #4
   b58e6:	ab66      	add	r3, sp, #408	; 0x198
   b58e8:	9766      	str	r7, [sp, #408]	; 0x198
   b58ea:	9167      	str	r1, [sp, #412]	; 0x19c
   b58ec:	e893 0006 	ldmia.w	r3, {r1, r2}
   b58f0:	4640      	mov	r0, r8
   b58f2:	f7ff fc91 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b58f6:	4658      	mov	r0, fp
   b58f8:	49a3      	ldr	r1, [pc, #652]	; (b5b88 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x690>)
   b58fa:	f7fe fc07 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b58fe:	a8a4      	add	r0, sp, #656	; 0x290
   b5900:	49a2      	ldr	r1, [pc, #648]	; (b5b8c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x694>)
   b5902:	f7fe fc03 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5906:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5908:	49a1      	ldr	r1, [pc, #644]	; (b5b90 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x698>)
   b590a:	f7fe fbff 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b590e:	aba4      	add	r3, sp, #656	; 0x290
   b5910:	2102      	movs	r1, #2
   b5912:	9364      	str	r3, [sp, #400]	; 0x190
   b5914:	f50d 79bc 	add.w	r9, sp, #376	; 0x178
   b5918:	9165      	str	r1, [sp, #404]	; 0x194
   b591a:	aa64      	add	r2, sp, #400	; 0x190
   b591c:	ca06      	ldmia	r2, {r1, r2}
   b591e:	464b      	mov	r3, r9
   b5920:	a883      	add	r0, sp, #524	; 0x20c
   b5922:	f7ff f80d 	bl	b4940 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5926:	499b      	ldr	r1, [pc, #620]	; (b5b94 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x69c>)
   b5928:	c90f      	ldmia	r1, {r0, r1, r2, r3}
   b592a:	af8f      	add	r7, sp, #572	; 0x23c
   b592c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5930:	2004      	movs	r0, #4
   b5932:	ab62      	add	r3, sp, #392	; 0x188
   b5934:	9762      	str	r7, [sp, #392]	; 0x188
   b5936:	9063      	str	r0, [sp, #396]	; 0x18c
   b5938:	e893 0006 	ldmia.w	r3, {r1, r2}
   b593c:	4630      	mov	r0, r6
   b593e:	f7ff fc6b 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway brownLineCTA = Railway(
   b5942:	a883      	add	r0, sp, #524	; 0x20c
   b5944:	e9cd b000 	strd	fp, r0, [sp]
   b5948:	a88c      	add	r0, sp, #560	; 0x230
   b594a:	4643      	mov	r3, r8
   b594c:	462a      	mov	r2, r5
   b594e:	4601      	mov	r1, r0
   b5950:	9602      	str	r6, [sp, #8]
   b5952:	4891      	ldr	r0, [pc, #580]	; (b5b98 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a0>)
   b5954:	f7ff fce0 	bl	b5318 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5958:	4630      	mov	r0, r6
   b595a:	f7fe ff67 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b595e:	a883      	add	r0, sp, #524	; 0x20c
   b5960:	f7fe ff85 	bl	b486e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5964:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5966:	f006 fb07 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b596a:	a8a4      	add	r0, sp, #656	; 0x290
   b596c:	f006 fb04 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5970:	4658      	mov	r0, fp
   b5972:	f006 fb01 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5976:	4640      	mov	r0, r8
   b5978:	f7fe ff58 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b597c:	4628      	mov	r0, r5
   b597e:	f7fe ff55 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5982:	a88c      	add	r0, sp, #560	; 0x230
   b5984:	f7fe ff3e 	bl	b4804 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5988:	4b84      	ldr	r3, [pc, #528]	; (b5b9c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a4>)
   b598a:	93a4      	str	r3, [sp, #656]	; 0x290
      lon = lo;
   b598c:	4b84      	ldr	r3, [pc, #528]	; (b5ba0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a8>)
   b598e:	93a5      	str	r3, [sp, #660]	; 0x294
      lat = la;
   b5990:	4b84      	ldr	r3, [pc, #528]	; (b5ba4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6ac>)
   b5992:	93a6      	str	r3, [sp, #664]	; 0x298
   b5994:	4b84      	ldr	r3, [pc, #528]	; (b5ba8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b0>)
   b5996:	93aa      	str	r3, [sp, #680]	; 0x2a8
      lon = lo;
   b5998:	4b84      	ldr	r3, [pc, #528]	; (b5bac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b4>)
   b599a:	93ab      	str	r3, [sp, #684]	; 0x2ac
      lat = la;
   b599c:	4b84      	ldr	r3, [pc, #528]	; (b5bb0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b8>)
   b599e:	93ac      	str	r3, [sp, #688]	; 0x2b0
      lon = lo;
   b59a0:	4b84      	ldr	r3, [pc, #528]	; (b5bb4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6bc>)
   b59a2:	93ad      	str	r3, [sp, #692]	; 0x2b4
);
   b59a4:	2005      	movs	r0, #5
   b59a6:	aba4      	add	r3, sp, #656	; 0x290
   b59a8:	9360      	str	r3, [sp, #384]	; 0x180
   b59aa:	9061      	str	r0, [sp, #388]	; 0x184
   b59ac:	a856      	add	r0, sp, #344	; 0x158
   b59ae:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b59b2:	4603      	mov	r3, r0
   b59b4:	a88c      	add	r0, sp, #560	; 0x230
   b59b6:	ed8d eaa7 	vstr	s28, [sp, #668]	; 0x29c
      lat = la;
   b59ba:	edcd 9aa8 	vstr	s19, [sp, #672]	; 0x2a0
      lon = lo;
   b59be:	ed8d 9aa9 	vstr	s18, [sp, #676]	; 0x2a4
   b59c2:	f7fe ff89 	bl	b48d8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b59c6:	4b6f      	ldr	r3, [pc, #444]	; (b5b84 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b59c8:	f8cd b178 	str.w	fp, [sp, #376]	; 0x178
   b59cc:	461f      	mov	r7, r3
   b59ce:	3360      	adds	r3, #96	; 0x60
   b59d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b59d2:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
   b59d6:	2004      	movs	r0, #4
   b59d8:	905f      	str	r0, [sp, #380]	; 0x17c
   b59da:	e899 0006 	ldmia.w	r9, {r1, r2}
   b59de:	4628      	mov	r0, r5
   b59e0:	f7ff fc1a 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b59e4:	463b      	mov	r3, r7
   b59e6:	3370      	adds	r3, #112	; 0x70
   b59e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b59ea:	af93      	add	r7, sp, #588	; 0x24c
   b59ec:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b59f0:	2004      	movs	r0, #4
   b59f2:	ab5c      	add	r3, sp, #368	; 0x170
   b59f4:	975c      	str	r7, [sp, #368]	; 0x170
   b59f6:	905d      	str	r0, [sp, #372]	; 0x174
   b59f8:	e893 0006 	ldmia.w	r3, {r1, r2}
   b59fc:	4640      	mov	r0, r8
   b59fe:	f7ff fc0b 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5a02:	a89d      	add	r0, sp, #628	; 0x274
   b5a04:	496c      	ldr	r1, [pc, #432]	; (b5bb8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c0>)
   b5a06:	f7fe fb81 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5a0a:	a8b0      	add	r0, sp, #704	; 0x2c0
   b5a0c:	496b      	ldr	r1, [pc, #428]	; (b5bbc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c4>)
   b5a0e:	f7fe fb7d 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5a12:	a8b6      	add	r0, sp, #728	; 0x2d8
   b5a14:	496a      	ldr	r1, [pc, #424]	; (b5bc0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c8>)
   b5a16:	f7fe fb79 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5a1a:	a8b0      	add	r0, sp, #704	; 0x2c0
   b5a1c:	905a      	str	r0, [sp, #360]	; 0x168
   b5a1e:	2002      	movs	r0, #2
   b5a20:	905b      	str	r0, [sp, #364]	; 0x16c
   b5a22:	f50d 79a8 	add.w	r9, sp, #336	; 0x150
   b5a26:	aa5a      	add	r2, sp, #360	; 0x168
   b5a28:	464b      	mov	r3, r9
   b5a2a:	ca06      	ldmia	r2, {r1, r2}
   b5a2c:	a883      	add	r0, sp, #524	; 0x20c
   b5a2e:	f7fe ff87 	bl	b4940 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5a32:	4b54      	ldr	r3, [pc, #336]	; (b5b84 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b5a34:	3380      	adds	r3, #128	; 0x80
   b5a36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5a38:	af8f      	add	r7, sp, #572	; 0x23c
   b5a3a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5a3e:	2004      	movs	r0, #4
   b5a40:	ab58      	add	r3, sp, #352	; 0x160
   b5a42:	9758      	str	r7, [sp, #352]	; 0x160
   b5a44:	9059      	str	r0, [sp, #356]	; 0x164
   b5a46:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5a4a:	4630      	mov	r0, r6
   b5a4c:	f7ff fbe4 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway greenLineCTA = Railway(
   b5a50:	a883      	add	r0, sp, #524	; 0x20c
   b5a52:	9001      	str	r0, [sp, #4]
   b5a54:	a89d      	add	r0, sp, #628	; 0x274
   b5a56:	9000      	str	r0, [sp, #0]
   b5a58:	a88c      	add	r0, sp, #560	; 0x230
   b5a5a:	4643      	mov	r3, r8
   b5a5c:	462a      	mov	r2, r5
   b5a5e:	4601      	mov	r1, r0
   b5a60:	9602      	str	r6, [sp, #8]
   b5a62:	4858      	ldr	r0, [pc, #352]	; (b5bc4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6cc>)
   b5a64:	f7ff fc58 	bl	b5318 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5a68:	4630      	mov	r0, r6
   b5a6a:	f7fe fedf 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5a6e:	a883      	add	r0, sp, #524	; 0x20c
   b5a70:	f7fe fefd 	bl	b486e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5a74:	a8b6      	add	r0, sp, #728	; 0x2d8
   b5a76:	f006 fa7f 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5a7a:	a8b0      	add	r0, sp, #704	; 0x2c0
   b5a7c:	f006 fa7c 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5a80:	a89d      	add	r0, sp, #628	; 0x274
   b5a82:	f006 fa79 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5a86:	4640      	mov	r0, r8
   b5a88:	f7fe fed0 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5a8c:	4628      	mov	r0, r5
   b5a8e:	f7fe fecd 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5a92:	a88c      	add	r0, sp, #560	; 0x230
   b5a94:	f7fe feb6 	bl	b4804 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5a98:	4b4b      	ldr	r3, [pc, #300]	; (b5bc8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d0>)
   b5a9a:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b5a9c:	4b4b      	ldr	r3, [pc, #300]	; (b5bcc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d4>)
   b5a9e:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b5aa0:	4b4b      	ldr	r3, [pc, #300]	; (b5bd0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d8>)
   b5aa2:	93b2      	str	r3, [sp, #712]	; 0x2c8
      lon = lo;
   b5aa4:	4b4b      	ldr	r3, [pc, #300]	; (b5bd4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6dc>)
   b5aa6:	93b3      	str	r3, [sp, #716]	; 0x2cc
      lat = la;
   b5aa8:	4b4b      	ldr	r3, [pc, #300]	; (b5bd8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e0>)
   b5aaa:	93b4      	str	r3, [sp, #720]	; 0x2d0
      lon = lo;
   b5aac:	4b4b      	ldr	r3, [pc, #300]	; (b5bdc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e4>)
   b5aae:	93b5      	str	r3, [sp, #724]	; 0x2d4
);
   b5ab0:	a8b0      	add	r0, sp, #704	; 0x2c0
      lat = la;
   b5ab2:	4b4b      	ldr	r3, [pc, #300]	; (b5be0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e8>)
   b5ab4:	9056      	str	r0, [sp, #344]	; 0x158
   b5ab6:	93b6      	str	r3, [sp, #728]	; 0x2d8
   b5ab8:	2008      	movs	r0, #8
   b5aba:	4b4a      	ldr	r3, [pc, #296]	; (b5be4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6ec>)
   b5abc:	9057      	str	r0, [sp, #348]	; 0x15c
   b5abe:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
   b5ac2:	93bc      	str	r3, [sp, #752]	; 0x2f0
   b5ac4:	a856      	add	r0, sp, #344	; 0x158
      lon = lo;
   b5ac6:	4b48      	ldr	r3, [pc, #288]	; (b5be8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f0>)
   b5ac8:	93bd      	str	r3, [sp, #756]	; 0x2f4
   b5aca:	e890 0006 	ldmia.w	r0, {r1, r2}
   b5ace:	4653      	mov	r3, sl
   b5ad0:	a88c      	add	r0, sp, #560	; 0x230
      lat = la;
   b5ad2:	edcd 8aba 	vstr	s17, [sp, #744]	; 0x2e8
      lon = lo;
   b5ad6:	ed8d 8abb 	vstr	s16, [sp, #748]	; 0x2ec
   b5ada:	ed8d eab7 	vstr	s28, [sp, #732]	; 0x2dc
      lat = la;
   b5ade:	edcd 9ab8 	vstr	s19, [sp, #736]	; 0x2e0
      lon = lo;
   b5ae2:	ed8d 9ab9 	vstr	s18, [sp, #740]	; 0x2e4
      lat = la;
   b5ae6:	edcd aabe 	vstr	s21, [sp, #760]	; 0x2f8
      lon = lo;
   b5aea:	ed8d aabf 	vstr	s20, [sp, #764]	; 0x2fc
   b5aee:	f7fe fef3 	bl	b48d8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5af2:	4b24      	ldr	r3, [pc, #144]	; (b5b84 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b5af4:	9f04      	ldr	r7, [sp, #16]
   b5af6:	f103 0c90 	add.w	ip, r3, #144	; 0x90
   b5afa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5afe:	f50d 7e1d 	add.w	lr, sp, #628	; 0x274
   b5b02:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b5b06:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
   b5b0a:	e887 0007 	stmia.w	r7, {r0, r1, r2}
   b5b0e:	a89d      	add	r0, sp, #628	; 0x274
   b5b10:	9054      	str	r0, [sp, #336]	; 0x150
   b5b12:	2007      	movs	r0, #7
   b5b14:	9055      	str	r0, [sp, #340]	; 0x154
   b5b16:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5b1a:	4628      	mov	r0, r5
   b5b1c:	f7ff fb7c 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5b20:	4b18      	ldr	r3, [pc, #96]	; (b5b84 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b5b22:	33ac      	adds	r3, #172	; 0xac
   b5b24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5b26:	af93      	add	r7, sp, #588	; 0x24c
   b5b28:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5b2c:	2004      	movs	r0, #4
   b5b2e:	ab52      	add	r3, sp, #328	; 0x148
   b5b30:	9752      	str	r7, [sp, #328]	; 0x148
   b5b32:	9053      	str	r0, [sp, #332]	; 0x14c
   b5b34:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5b38:	4640      	mov	r0, r8
   b5b3a:	f7ff fb6d 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5b3e:	4658      	mov	r0, fp
   b5b40:	492a      	ldr	r1, [pc, #168]	; (b5bec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f4>)
   b5b42:	f7fe fae3 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5b46:	a8a4      	add	r0, sp, #656	; 0x290
   b5b48:	4929      	ldr	r1, [pc, #164]	; (b5bf0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f8>)
   b5b4a:	f7fe fadf 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5b4e:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5b50:	4928      	ldr	r1, [pc, #160]	; (b5bf4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6fc>)
   b5b52:	f7fe fadb 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5b56:	aba4      	add	r3, sp, #656	; 0x290
   b5b58:	2002      	movs	r0, #2
   b5b5a:	9350      	str	r3, [sp, #320]	; 0x140
   b5b5c:	9051      	str	r0, [sp, #324]	; 0x144
   b5b5e:	f50d 7994 	add.w	r9, sp, #296	; 0x128
   b5b62:	aa50      	add	r2, sp, #320	; 0x140
   b5b64:	464b      	mov	r3, r9
   b5b66:	ca06      	ldmia	r2, {r1, r2}
   b5b68:	a883      	add	r0, sp, #524	; 0x20c
   b5b6a:	f7fe fee9 	bl	b4940 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5b6e:	4b05      	ldr	r3, [pc, #20]	; (b5b84 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b5b70:	33bc      	adds	r3, #188	; 0xbc
   b5b72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5b74:	af8f      	add	r7, sp, #572	; 0x23c
   b5b76:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5b7a:	2004      	movs	r0, #4
   b5b7c:	ab4e      	add	r3, sp, #312	; 0x138
   b5b7e:	974e      	str	r7, [sp, #312]	; 0x138
   b5b80:	e03a      	b.n	b5bf8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x700>
   b5b82:	bf00      	nop
   b5b84:	000bf43c 	.word	0x000bf43c
   b5b88:	000bf261 	.word	0x000bf261
   b5b8c:	000bf267 	.word	0x000bf267
   b5b90:	000bf26e 	.word	0x000bf26e
   b5b94:	000bf48c 	.word	0x000bf48c
   b5b98:	20035378 	.word	0x20035378
   b5b9c:	42276997 	.word	0x42276997
   b5ba0:	c2af40b8 	.word	0xc2af40b8
   b5ba4:	422781fe 	.word	0x422781fe
   b5ba8:	42278afb 	.word	0x42278afb
   b5bac:	c2af4494 	.word	0xc2af4494
   b5bb0:	42278971 	.word	0x42278971
   b5bb4:	c2af6479 	.word	0xc2af6479
   b5bb8:	000bf1bf 	.word	0x000bf1bf
   b5bbc:	000bf275 	.word	0x000bf275
   b5bc0:	000bf27c 	.word	0x000bf27c
   b5bc4:	2003553c 	.word	0x2003553c
   b5bc8:	4227631a 	.word	0x4227631a
   b5bcc:	c2af4bd2 	.word	0xc2af4bd2
   b5bd0:	42276ec4 	.word	0x42276ec4
   b5bd4:	c2af4115 	.word	0xc2af4115
   b5bd8:	422780b5 	.word	0x422780b5
   b5bdc:	c2af4086 	.word	0xc2af4086
   b5be0:	42278200 	.word	0x42278200
   b5be4:	422781e1 	.word	0x422781e1
   b5be8:	c2af4476 	.word	0xc2af4476
   b5bec:	000bf283 	.word	0x000bf283
   b5bf0:	000bf28a 	.word	0x000bf28a
   b5bf4:	000bf291 	.word	0x000bf291
   b5bf8:	904f      	str	r0, [sp, #316]	; 0x13c
   b5bfa:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5bfe:	4630      	mov	r0, r6
   b5c00:	f7ff fb0a 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway orangeLineCTA = Railway(
   b5c04:	a883      	add	r0, sp, #524	; 0x20c
   b5c06:	e9cd b000 	strd	fp, r0, [sp]
   b5c0a:	a88c      	add	r0, sp, #560	; 0x230
   b5c0c:	4643      	mov	r3, r8
   b5c0e:	462a      	mov	r2, r5
   b5c10:	4601      	mov	r1, r0
   b5c12:	9602      	str	r6, [sp, #8]
   b5c14:	48ba      	ldr	r0, [pc, #744]	; (b5f00 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa08>)
   b5c16:	f7ff fb7f 	bl	b5318 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5c1a:	4630      	mov	r0, r6
   b5c1c:	f7fe fe06 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5c20:	a883      	add	r0, sp, #524	; 0x20c
   b5c22:	f7fe fe24 	bl	b486e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5c26:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5c28:	f006 f9a6 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5c2c:	a8a4      	add	r0, sp, #656	; 0x290
   b5c2e:	f006 f9a3 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5c32:	4658      	mov	r0, fp
   b5c34:	f006 f9a0 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5c38:	4640      	mov	r0, r8
   b5c3a:	f7fe fdf7 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5c3e:	4628      	mov	r0, r5
   b5c40:	f7fe fdf4 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5c44:	a88c      	add	r0, sp, #560	; 0x230
   b5c46:	f7fe fddd 	bl	b4804 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b5c4a:	a8b0      	add	r0, sp, #704	; 0x2c0
   b5c4c:	904c      	str	r0, [sp, #304]	; 0x130
   b5c4e:	2007      	movs	r0, #7
   b5c50:	904d      	str	r0, [sp, #308]	; 0x134
   b5c52:	a842      	add	r0, sp, #264	; 0x108
   b5c54:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b5c58:	4603      	mov	r3, r0
   b5c5a:	a88c      	add	r0, sp, #560	; 0x230
      lat = la;
   b5c5c:	edcd 8ab4 	vstr	s17, [sp, #720]	; 0x2d0
      lon = lo;
   b5c60:	ed8d 8ab5 	vstr	s16, [sp, #724]	; 0x2d4
      lat = la;
   b5c64:	edcd 8abc 	vstr	s17, [sp, #752]	; 0x2f0
      lon = lo;
   b5c68:	ed8d 8abd 	vstr	s16, [sp, #756]	; 0x2f4
      lat = la;
   b5c6c:	edcd dab0 	vstr	s27, [sp, #704]	; 0x2c0
      lon = lo;
   b5c70:	ed8d dab1 	vstr	s26, [sp, #708]	; 0x2c4
      lat = la;
   b5c74:	edcd cab2 	vstr	s25, [sp, #712]	; 0x2c8
      lon = lo;
   b5c78:	ed8d cab3 	vstr	s24, [sp, #716]	; 0x2cc
      lat = la;
   b5c7c:	edcd bab6 	vstr	s23, [sp, #728]	; 0x2d8
      lon = lo;
   b5c80:	ed8d bab7 	vstr	s22, [sp, #732]	; 0x2dc
      lat = la;
   b5c84:	edcd aab8 	vstr	s21, [sp, #736]	; 0x2e0
      lon = lo;
   b5c88:	ed8d aab9 	vstr	s20, [sp, #740]	; 0x2e4
      lat = la;
   b5c8c:	edcd 9aba 	vstr	s19, [sp, #744]	; 0x2e8
      lon = lo;
   b5c90:	ed8d 9abb 	vstr	s18, [sp, #748]	; 0x2ec
   b5c94:	f7fe fe20 	bl	b48d8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5c98:	4a9a      	ldr	r2, [pc, #616]	; (b5f04 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa0c>)
   b5c9a:	9f04      	ldr	r7, [sp, #16]
   b5c9c:	f1a2 0e18 	sub.w	lr, r2, #24
   b5ca0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5ca4:	f50d 7c1d 	add.w	ip, sp, #628	; 0x274
   b5ca8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5cac:	9805      	ldr	r0, [sp, #20]
   b5cae:	c803      	ldmia	r0, {r0, r1}
   b5cb0:	e887 0003 	stmia.w	r7, {r0, r1}
   b5cb4:	a89d      	add	r0, sp, #628	; 0x274
   b5cb6:	904a      	str	r0, [sp, #296]	; 0x128
   b5cb8:	2006      	movs	r0, #6
   b5cba:	904b      	str	r0, [sp, #300]	; 0x12c
   b5cbc:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5cc0:	4628      	mov	r0, r5
   b5cc2:	f7ff faa9 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5cc6:	4a8f      	ldr	r2, [pc, #572]	; (b5f04 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa0c>)
   b5cc8:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   b5cca:	af93      	add	r7, sp, #588	; 0x24c
   b5ccc:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5cd0:	2204      	movs	r2, #4
   b5cd2:	ab48      	add	r3, sp, #288	; 0x120
   b5cd4:	9748      	str	r7, [sp, #288]	; 0x120
   b5cd6:	9249      	str	r2, [sp, #292]	; 0x124
   b5cd8:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5cdc:	4640      	mov	r0, r8
   b5cde:	f7ff fa9b 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5ce2:	4658      	mov	r0, fp
   b5ce4:	4988      	ldr	r1, [pc, #544]	; (b5f08 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa10>)
   b5ce6:	f7fe fa11 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5cea:	a8a4      	add	r0, sp, #656	; 0x290
   b5cec:	4987      	ldr	r1, [pc, #540]	; (b5f0c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa14>)
   b5cee:	f7fe fa0d 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5cf2:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5cf4:	4986      	ldr	r1, [pc, #536]	; (b5f10 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa18>)
   b5cf6:	f7fe fa09 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5cfa:	aba4      	add	r3, sp, #656	; 0x290
   b5cfc:	2002      	movs	r0, #2
   b5cfe:	9346      	str	r3, [sp, #280]	; 0x118
   b5d00:	9047      	str	r0, [sp, #284]	; 0x11c
   b5d02:	f50d 7980 	add.w	r9, sp, #256	; 0x100
   b5d06:	aa46      	add	r2, sp, #280	; 0x118
   b5d08:	ca06      	ldmia	r2, {r1, r2}
   b5d0a:	464b      	mov	r3, r9
   b5d0c:	a883      	add	r0, sp, #524	; 0x20c
   b5d0e:	f7fe fe17 	bl	b4940 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5d12:	4980      	ldr	r1, [pc, #512]	; (b5f14 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa1c>)
   b5d14:	c90f      	ldmia	r1, {r0, r1, r2, r3}
   b5d16:	af8f      	add	r7, sp, #572	; 0x23c
   b5d18:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5d1c:	2204      	movs	r2, #4
   b5d1e:	ab44      	add	r3, sp, #272	; 0x110
   b5d20:	9744      	str	r7, [sp, #272]	; 0x110
   b5d22:	9245      	str	r2, [sp, #276]	; 0x114
   b5d24:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5d28:	4630      	mov	r0, r6
   b5d2a:	f7ff fa75 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway purpleLineCTA = Railway(
   b5d2e:	aa83      	add	r2, sp, #524	; 0x20c
   b5d30:	4643      	mov	r3, r8
   b5d32:	a98c      	add	r1, sp, #560	; 0x230
   b5d34:	e9cd b200 	strd	fp, r2, [sp]
   b5d38:	9602      	str	r6, [sp, #8]
   b5d3a:	462a      	mov	r2, r5
   b5d3c:	4876      	ldr	r0, [pc, #472]	; (b5f18 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa20>)
   b5d3e:	f7ff faeb 	bl	b5318 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5d42:	4630      	mov	r0, r6
   b5d44:	f7fe fd72 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5d48:	a883      	add	r0, sp, #524	; 0x20c
   b5d4a:	f7fe fd90 	bl	b486e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5d4e:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5d50:	f006 f912 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5d54:	a8a4      	add	r0, sp, #656	; 0x290
   b5d56:	f006 f90f 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5d5a:	4658      	mov	r0, fp
   b5d5c:	f006 f90c 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5d60:	4640      	mov	r0, r8
   b5d62:	f7fe fd63 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5d66:	4628      	mov	r0, r5
   b5d68:	f7fe fd60 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5d6c:	a88c      	add	r0, sp, #560	; 0x230
   b5d6e:	f7fe fd49 	bl	b4804 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5d72:	4b6a      	ldr	r3, [pc, #424]	; (b5f1c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa24>)
   b5d74:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b5d76:	4b6a      	ldr	r3, [pc, #424]	; (b5f20 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa28>)
   b5d78:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b5d7a:	4b6a      	ldr	r3, [pc, #424]	; (b5f24 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa2c>)
   b5d7c:	93b2      	str	r3, [sp, #712]	; 0x2c8
);
   b5d7e:	aab0      	add	r2, sp, #704	; 0x2c0
      lon = lo;
   b5d80:	4b69      	ldr	r3, [pc, #420]	; (b5f28 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa30>)
   b5d82:	9242      	str	r2, [sp, #264]	; 0x108
   b5d84:	93b3      	str	r3, [sp, #716]	; 0x2cc
   b5d86:	2208      	movs	r2, #8
      lat = la;
   b5d88:	4b68      	ldr	r3, [pc, #416]	; (b5f2c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa34>)
   b5d8a:	9243      	str	r2, [sp, #268]	; 0x10c
   b5d8c:	f10d 0ae0 	add.w	sl, sp, #224	; 0xe0
   b5d90:	93b4      	str	r3, [sp, #720]	; 0x2d0
   b5d92:	aa42      	add	r2, sp, #264	; 0x108
      lon = lo;
   b5d94:	4b66      	ldr	r3, [pc, #408]	; (b5f30 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa38>)
   b5d96:	93b5      	str	r3, [sp, #724]	; 0x2d4
   b5d98:	ca06      	ldmia	r2, {r1, r2}
   b5d9a:	4653      	mov	r3, sl
   b5d9c:	a88c      	add	r0, sp, #560	; 0x230
      lat = la;
   b5d9e:	edcd 8ab6 	vstr	s17, [sp, #728]	; 0x2d8
      lon = lo;
   b5da2:	ed8d 8ab7 	vstr	s16, [sp, #732]	; 0x2dc
      lat = la;
   b5da6:	edcd 8abe 	vstr	s17, [sp, #760]	; 0x2f8
      lon = lo;
   b5daa:	ed8d 8abf 	vstr	s16, [sp, #764]	; 0x2fc
      lat = la;
   b5dae:	edcd 9ab8 	vstr	s19, [sp, #736]	; 0x2e0
      lon = lo;
   b5db2:	ed8d 9ab9 	vstr	s18, [sp, #740]	; 0x2e4
      lat = la;
   b5db6:	edcd aaba 	vstr	s21, [sp, #744]	; 0x2e8
      lon = lo;
   b5dba:	ed8d aabb 	vstr	s20, [sp, #748]	; 0x2ec
      lat = la;
   b5dbe:	edcd babc 	vstr	s23, [sp, #752]	; 0x2f0
      lon = lo;
   b5dc2:	ed8d babd 	vstr	s22, [sp, #756]	; 0x2f4
   b5dc6:	f7fe fd87 	bl	b48d8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5dca:	4b5a      	ldr	r3, [pc, #360]	; (b5f34 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa3c>)
   b5dcc:	9f04      	ldr	r7, [sp, #16]
      lat = la;
   b5dce:	eddf 8a5a 	vldr	s17, [pc, #360]	; b5f38 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa40>
      lon = lo;
   b5dd2:	ed9f 8a5a 	vldr	s16, [pc, #360]	; b5f3c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa44>
   b5dd6:	f103 0ccc 	add.w	ip, r3, #204	; 0xcc
   b5dda:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5dde:	f50d 7e1d 	add.w	lr, sp, #628	; 0x274
   b5de2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b5de6:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
   b5dea:	e887 0007 	stmia.w	r7, {r0, r1, r2}
   b5dee:	aa9d      	add	r2, sp, #628	; 0x274
   b5df0:	9240      	str	r2, [sp, #256]	; 0x100
   b5df2:	2207      	movs	r2, #7
   b5df4:	9241      	str	r2, [sp, #260]	; 0x104
   b5df6:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5dfa:	4628      	mov	r0, r5
   b5dfc:	f7ff fa0c 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5e00:	4b4c      	ldr	r3, [pc, #304]	; (b5f34 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa3c>)
   b5e02:	33e8      	adds	r3, #232	; 0xe8
   b5e04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5e06:	af93      	add	r7, sp, #588	; 0x24c
   b5e08:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5e0c:	2204      	movs	r2, #4
   b5e0e:	ab3e      	add	r3, sp, #248	; 0xf8
   b5e10:	973e      	str	r7, [sp, #248]	; 0xf8
   b5e12:	923f      	str	r2, [sp, #252]	; 0xfc
   b5e14:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5e18:	4640      	mov	r0, r8
   b5e1a:	f7ff f9fd 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5e1e:	4658      	mov	r0, fp
   b5e20:	4947      	ldr	r1, [pc, #284]	; (b5f40 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa48>)
   b5e22:	f7fe f973 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5e26:	a8a4      	add	r0, sp, #656	; 0x290
   b5e28:	4946      	ldr	r1, [pc, #280]	; (b5f44 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa4c>)
   b5e2a:	f7fe f96f 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5e2e:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5e30:	4945      	ldr	r1, [pc, #276]	; (b5f48 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa50>)
   b5e32:	f7fe f96b 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5e36:	aba4      	add	r3, sp, #656	; 0x290
   b5e38:	2102      	movs	r1, #2
   b5e3a:	933c      	str	r3, [sp, #240]	; 0xf0
   b5e3c:	f10d 09d8 	add.w	r9, sp, #216	; 0xd8
   b5e40:	913d      	str	r1, [sp, #244]	; 0xf4
   b5e42:	aa3c      	add	r2, sp, #240	; 0xf0
   b5e44:	464b      	mov	r3, r9
   b5e46:	ca06      	ldmia	r2, {r1, r2}
   b5e48:	a883      	add	r0, sp, #524	; 0x20c
   b5e4a:	f7fe fd79 	bl	b4940 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5e4e:	4b39      	ldr	r3, [pc, #228]	; (b5f34 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa3c>)
   b5e50:	33f8      	adds	r3, #248	; 0xf8
   b5e52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5e54:	af8f      	add	r7, sp, #572	; 0x23c
   b5e56:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5e5a:	2204      	movs	r2, #4
   b5e5c:	ab3a      	add	r3, sp, #232	; 0xe8
   b5e5e:	973a      	str	r7, [sp, #232]	; 0xe8
   b5e60:	923b      	str	r2, [sp, #236]	; 0xec
   b5e62:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5e66:	4630      	mov	r0, r6
   b5e68:	f7ff f9d6 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway pinkLineCTA = Railway(
   b5e6c:	aa83      	add	r2, sp, #524	; 0x20c
   b5e6e:	4643      	mov	r3, r8
   b5e70:	a98c      	add	r1, sp, #560	; 0x230
   b5e72:	e9cd b200 	strd	fp, r2, [sp]
   b5e76:	9602      	str	r6, [sp, #8]
   b5e78:	462a      	mov	r2, r5
   b5e7a:	4834      	ldr	r0, [pc, #208]	; (b5f4c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa54>)
   b5e7c:	f7ff fa4c 	bl	b5318 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5e80:	4630      	mov	r0, r6
   b5e82:	f7fe fcd3 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5e86:	a883      	add	r0, sp, #524	; 0x20c
   b5e88:	f7fe fcf1 	bl	b486e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5e8c:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5e8e:	f006 f873 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5e92:	a8a4      	add	r0, sp, #656	; 0x290
   b5e94:	f006 f870 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5e98:	4658      	mov	r0, fp
   b5e9a:	f006 f86d 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5e9e:	4640      	mov	r0, r8
   b5ea0:	f7fe fcc4 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5ea4:	4628      	mov	r0, r5
   b5ea6:	f7fe fcc1 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5eaa:	a88c      	add	r0, sp, #560	; 0x230
   b5eac:	f7fe fcaa 	bl	b4804 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5eb0:	4b27      	ldr	r3, [pc, #156]	; (b5f50 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa58>)
   b5eb2:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b5eb4:	4b27      	ldr	r3, [pc, #156]	; (b5f54 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa5c>)
   b5eb6:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b5eb8:	4b27      	ldr	r3, [pc, #156]	; (b5f58 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa60>)
   b5eba:	93b2      	str	r3, [sp, #712]	; 0x2c8
      lon = lo;
   b5ebc:	4b27      	ldr	r3, [pc, #156]	; (b5f5c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa64>)
   b5ebe:	93b3      	str	r3, [sp, #716]	; 0x2cc
      lat = la;
   b5ec0:	4b27      	ldr	r3, [pc, #156]	; (b5f60 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa68>)
   b5ec2:	93b4      	str	r3, [sp, #720]	; 0x2d0
      lon = lo;
   b5ec4:	4b27      	ldr	r3, [pc, #156]	; (b5f64 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa6c>)
   b5ec6:	93b5      	str	r3, [sp, #724]	; 0x2d4
      lat = la;
   b5ec8:	4b27      	ldr	r3, [pc, #156]	; (b5f68 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa70>)
   b5eca:	93b6      	str	r3, [sp, #728]	; 0x2d8
      lon = lo;
   b5ecc:	4b27      	ldr	r3, [pc, #156]	; (b5f6c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa74>)
   b5ece:	93b7      	str	r3, [sp, #732]	; 0x2dc
      lat = la;
   b5ed0:	4b27      	ldr	r3, [pc, #156]	; (b5f70 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa78>)
   b5ed2:	93b8      	str	r3, [sp, #736]	; 0x2e0
      lon = lo;
   b5ed4:	4b27      	ldr	r3, [pc, #156]	; (b5f74 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa7c>)
   b5ed6:	93b9      	str	r3, [sp, #740]	; 0x2e4
      lat = la;
   b5ed8:	4b27      	ldr	r3, [pc, #156]	; (b5f78 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa80>)
   b5eda:	93ba      	str	r3, [sp, #744]	; 0x2e8
};
   b5edc:	aab0      	add	r2, sp, #704	; 0x2c0
      lon = lo;
   b5ede:	4b27      	ldr	r3, [pc, #156]	; (b5f7c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa84>)
   b5ee0:	9238      	str	r2, [sp, #224]	; 0xe0
   b5ee2:	93bb      	str	r3, [sp, #748]	; 0x2ec
   b5ee4:	2207      	movs	r2, #7
      lat = la;
   b5ee6:	4b26      	ldr	r3, [pc, #152]	; (b5f80 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa88>)
   b5ee8:	9239      	str	r2, [sp, #228]	; 0xe4
   b5eea:	93bc      	str	r3, [sp, #752]	; 0x2f0
   b5eec:	aa2e      	add	r2, sp, #184	; 0xb8
      lon = lo;
   b5eee:	4b25      	ldr	r3, [pc, #148]	; (b5f84 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa8c>)
   b5ef0:	93bd      	str	r3, [sp, #756]	; 0x2f4
   b5ef2:	a88c      	add	r0, sp, #560	; 0x230
   b5ef4:	4613      	mov	r3, r2
   b5ef6:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b5efa:	f7fe fced 	bl	b48d8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5efe:	e043      	b.n	b5f88 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa90>
   b5f00:	20037dd8 	.word	0x20037dd8
   b5f04:	000bf47c 	.word	0x000bf47c
   b5f08:	000bf298 	.word	0x000bf298
   b5f0c:	000bf29f 	.word	0x000bf29f
   b5f10:	000bf2a6 	.word	0x000bf2a6
   b5f14:	000bf48c 	.word	0x000bf48c
   b5f18:	2003e4e8 	.word	0x2003e4e8
   b5f1c:	42276a76 	.word	0x42276a76
   b5f20:	c2af692b 	.word	0xc2af692b
   b5f24:	42276b5f 	.word	0x42276b5f
   b5f28:	c2af56cd 	.word	0xc2af56cd
   b5f2c:	42278a2d 	.word	0x42278a2d
   b5f30:	c2af56d8 	.word	0xc2af56d8
   b5f34:	000bf43c 	.word	0x000bf43c
   b5f38:	42296602 	.word	0x42296602
   b5f3c:	c28e2881 	.word	0xc28e2881
   b5f40:	000bf2ad 	.word	0x000bf2ad
   b5f44:	000bf2b2 	.word	0x000bf2b2
   b5f48:	000bf2b9 	.word	0x000bf2b9
   b5f4c:	2003e47c 	.word	0x2003e47c
   b5f50:	4229481b 	.word	0x4229481b
   b5f54:	c28e1ab2 	.word	0xc28e1ab2
   b5f58:	42294f83 	.word	0x42294f83
   b5f5c:	c28e1d93 	.word	0xc28e1d93
   b5f60:	422960e6 	.word	0x422960e6
   b5f64:	c28e1d2d 	.word	0xc28e1d2d
   b5f68:	422966f9 	.word	0x422966f9
   b5f6c:	c28e1af0 	.word	0xc28e1af0
   b5f70:	422971a5 	.word	0x422971a5
   b5f74:	c28e23e6 	.word	0xc28e23e6
   b5f78:	42297437 	.word	0x42297437
   b5f7c:	c28e3373 	.word	0xc28e3373
   b5f80:	42297d7a 	.word	0x42297d7a
   b5f84:	c28e3b5d 	.word	0xc28e3b5d
   b5f88:	4bb1      	ldr	r3, [pc, #708]	; (b6250 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd58>)
   b5f8a:	f503 7c84 	add.w	ip, r3, #264	; 0x108
   b5f8e:	461f      	mov	r7, r3
   b5f90:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5f94:	f50d 7e1d 	add.w	lr, sp, #628	; 0x274
   b5f98:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b5f9c:	e89c 0003 	ldmia.w	ip, {r0, r1}
   b5fa0:	9a04      	ldr	r2, [sp, #16]
   b5fa2:	e882 0003 	stmia.w	r2, {r0, r1}
   b5fa6:	aa9d      	add	r2, sp, #628	; 0x274
   b5fa8:	9236      	str	r2, [sp, #216]	; 0xd8
   b5faa:	2206      	movs	r2, #6
   b5fac:	9237      	str	r2, [sp, #220]	; 0xdc
   b5fae:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5fb2:	4628      	mov	r0, r5
   b5fb4:	f7ff f930 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5fb8:	aa93      	add	r2, sp, #588	; 0x24c
   b5fba:	9234      	str	r2, [sp, #208]	; 0xd0
   b5fbc:	2332      	movs	r3, #50	; 0x32
   b5fbe:	2204      	movs	r2, #4
   b5fc0:	e9cd 3494 	strd	r3, r4, [sp, #592]	; 0x250
   b5fc4:	9235      	str	r2, [sp, #212]	; 0xd4
   b5fc6:	ab34      	add	r3, sp, #208	; 0xd0
   b5fc8:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5fcc:	4640      	mov	r0, r8
   b5fce:	9493      	str	r4, [sp, #588]	; 0x24c
   b5fd0:	9496      	str	r4, [sp, #600]	; 0x258
   b5fd2:	f7ff f921 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5fd6:	4658      	mov	r0, fp
   b5fd8:	499e      	ldr	r1, [pc, #632]	; (b6254 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd5c>)
   b5fda:	f7fe f897 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5fde:	a8a4      	add	r0, sp, #656	; 0x290
   b5fe0:	499d      	ldr	r1, [pc, #628]	; (b6258 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd60>)
   b5fe2:	f7fe f893 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5fe6:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5fe8:	499c      	ldr	r1, [pc, #624]	; (b625c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd64>)
   b5fea:	f7fe f88f 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5fee:	aba4      	add	r3, sp, #656	; 0x290
   b5ff0:	2102      	movs	r1, #2
   b5ff2:	9332      	str	r3, [sp, #200]	; 0xc8
   b5ff4:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
   b5ff8:	9133      	str	r1, [sp, #204]	; 0xcc
   b5ffa:	aa32      	add	r2, sp, #200	; 0xc8
   b5ffc:	464b      	mov	r3, r9
   b5ffe:	ca06      	ldmia	r2, {r1, r2}
   b6000:	a883      	add	r0, sp, #524	; 0x20c
   b6002:	f7fe fc9d 	bl	b4940 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b6006:	4621      	mov	r1, r4
   b6008:	2210      	movs	r2, #16
   b600a:	a88f      	add	r0, sp, #572	; 0x23c
   b600c:	f006 ff8c 	bl	bcf28 <memset>
   b6010:	aa8f      	add	r2, sp, #572	; 0x23c
   b6012:	9230      	str	r2, [sp, #192]	; 0xc0
   b6014:	2204      	movs	r2, #4
   b6016:	ab30      	add	r3, sp, #192	; 0xc0
   b6018:	9231      	str	r2, [sp, #196]	; 0xc4
   b601a:	e893 0006 	ldmia.w	r3, {r1, r2}
   b601e:	4630      	mov	r0, r6
   b6020:	f7ff f8fa 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway redLineMBTA = Railway{
   b6024:	aa83      	add	r2, sp, #524	; 0x20c
   b6026:	4643      	mov	r3, r8
   b6028:	a98c      	add	r1, sp, #560	; 0x230
   b602a:	e9cd b200 	strd	fp, r2, [sp]
   b602e:	9602      	str	r6, [sp, #8]
   b6030:	462a      	mov	r2, r5
   b6032:	488b      	ldr	r0, [pc, #556]	; (b6260 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd68>)
   b6034:	f7ff f970 	bl	b5318 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b6038:	4630      	mov	r0, r6
   b603a:	f7fe fbf7 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b603e:	a883      	add	r0, sp, #524	; 0x20c
   b6040:	f7fe fc15 	bl	b486e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b6044:	a8aa      	add	r0, sp, #680	; 0x2a8
   b6046:	f005 ff97 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b604a:	a8a4      	add	r0, sp, #656	; 0x290
   b604c:	f005 ff94 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6050:	4658      	mov	r0, fp
   b6052:	f005 ff91 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6056:	4640      	mov	r0, r8
   b6058:	f7fe fbe8 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b605c:	4628      	mov	r0, r5
   b605e:	f7fe fbe5 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b6062:	a88c      	add	r0, sp, #560	; 0x230
   b6064:	f7fe fbce 	bl	b4804 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b6068:	4b7e      	ldr	r3, [pc, #504]	; (b6264 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd6c>)
   b606a:	93a4      	str	r3, [sp, #656]	; 0x290
      lon = lo;
   b606c:	4b7e      	ldr	r3, [pc, #504]	; (b6268 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd70>)
   b606e:	93a5      	str	r3, [sp, #660]	; 0x294
      lat = la;
   b6070:	4b7e      	ldr	r3, [pc, #504]	; (b626c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd74>)
   b6072:	93a6      	str	r3, [sp, #664]	; 0x298
      lon = lo;
   b6074:	4b7e      	ldr	r3, [pc, #504]	; (b6270 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd78>)
   b6076:	93a7      	str	r3, [sp, #668]	; 0x29c
      lat = la;
   b6078:	4b7e      	ldr	r3, [pc, #504]	; (b6274 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd7c>)
   b607a:	93a8      	str	r3, [sp, #672]	; 0x2a0
      lon = lo;
   b607c:	4b7e      	ldr	r3, [pc, #504]	; (b6278 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd80>)
   b607e:	93a9      	str	r3, [sp, #676]	; 0x2a4
      lat = la;
   b6080:	4b7e      	ldr	r3, [pc, #504]	; (b627c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd84>)
   b6082:	93aa      	str	r3, [sp, #680]	; 0x2a8
      lon = lo;
   b6084:	4b7e      	ldr	r3, [pc, #504]	; (b6280 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd88>)
   b6086:	93ab      	str	r3, [sp, #684]	; 0x2ac
};
   b6088:	2204      	movs	r2, #4
   b608a:	aba4      	add	r3, sp, #656	; 0x290
   b608c:	932e      	str	r3, [sp, #184]	; 0xb8
   b608e:	922f      	str	r2, [sp, #188]	; 0xbc
   b6090:	f10d 0a90 	add.w	sl, sp, #144	; 0x90
   b6094:	aa2e      	add	r2, sp, #184	; 0xb8
   b6096:	4653      	mov	r3, sl
   b6098:	ca06      	ldmia	r2, {r1, r2}
   b609a:	a88f      	add	r0, sp, #572	; 0x23c
   b609c:	f7fe fc1c 	bl	b48d8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b60a0:	f507 7390 	add.w	r3, r7, #288	; 0x120
   b60a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   b60a8:	2303      	movs	r3, #3
   b60aa:	952c      	str	r5, [sp, #176]	; 0xb0
   b60ac:	932d      	str	r3, [sp, #180]	; 0xb4
   b60ae:	e885 0007 	stmia.w	r5, {r0, r1, r2}
   b60b2:	e899 0006 	ldmia.w	r9, {r1, r2}
   b60b6:	a88c      	add	r0, sp, #560	; 0x230
   b60b8:	f7ff f8ae 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b60bc:	2228      	movs	r2, #40	; 0x28
   b60be:	e9cd 2498 	strd	r2, r4, [sp, #608]	; 0x260
   b60c2:	2204      	movs	r2, #4
   b60c4:	ab2a      	add	r3, sp, #168	; 0xa8
   b60c6:	f8cd b0a8 	str.w	fp, [sp, #168]	; 0xa8
   b60ca:	922b      	str	r2, [sp, #172]	; 0xac
   b60cc:	e893 0006 	ldmia.w	r3, {r1, r2}
   b60d0:	4640      	mov	r0, r8
   b60d2:	9497      	str	r4, [sp, #604]	; 0x25c
   b60d4:	949a      	str	r4, [sp, #616]	; 0x268
   b60d6:	f7ff f89f 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b60da:	a89d      	add	r0, sp, #628	; 0x274
   b60dc:	4969      	ldr	r1, [pc, #420]	; (b6284 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd8c>)
   b60de:	f7fe f815 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b60e2:	a8b0      	add	r0, sp, #704	; 0x2c0
   b60e4:	4968      	ldr	r1, [pc, #416]	; (b6288 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd90>)
   b60e6:	f7fe f811 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b60ea:	a8b6      	add	r0, sp, #728	; 0x2d8
   b60ec:	4967      	ldr	r1, [pc, #412]	; (b628c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd94>)
   b60ee:	f7fe f80d 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b60f2:	a9b0      	add	r1, sp, #704	; 0x2c0
   b60f4:	9128      	str	r1, [sp, #160]	; 0xa0
   b60f6:	2102      	movs	r1, #2
   b60f8:	f10d 0988 	add.w	r9, sp, #136	; 0x88
   b60fc:	9129      	str	r1, [sp, #164]	; 0xa4
   b60fe:	aa28      	add	r2, sp, #160	; 0xa0
   b6100:	464b      	mov	r3, r9
   b6102:	ca06      	ldmia	r2, {r1, r2}
   b6104:	a883      	add	r0, sp, #524	; 0x20c
   b6106:	f7fe fc1b 	bl	b4940 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b610a:	4621      	mov	r1, r4
   b610c:	2210      	movs	r2, #16
   b610e:	a893      	add	r0, sp, #588	; 0x24c
   b6110:	f006 ff0a 	bl	bcf28 <memset>
   b6114:	aa93      	add	r2, sp, #588	; 0x24c
   b6116:	9226      	str	r2, [sp, #152]	; 0x98
   b6118:	2204      	movs	r2, #4
   b611a:	ab26      	add	r3, sp, #152	; 0x98
   b611c:	9227      	str	r2, [sp, #156]	; 0x9c
   b611e:	e893 0006 	ldmia.w	r3, {r1, r2}
   b6122:	4630      	mov	r0, r6
   b6124:	f7ff f878 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway blueLineMBTA = Railway{
   b6128:	aa83      	add	r2, sp, #524	; 0x20c
   b612a:	9201      	str	r2, [sp, #4]
   b612c:	aa9d      	add	r2, sp, #628	; 0x274
   b612e:	4643      	mov	r3, r8
   b6130:	a98f      	add	r1, sp, #572	; 0x23c
   b6132:	9602      	str	r6, [sp, #8]
   b6134:	9200      	str	r2, [sp, #0]
   b6136:	4856      	ldr	r0, [pc, #344]	; (b6290 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd98>)
   b6138:	aa8c      	add	r2, sp, #560	; 0x230
   b613a:	f7ff f8ed 	bl	b5318 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b613e:	4630      	mov	r0, r6
   b6140:	f7fe fb74 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b6144:	a883      	add	r0, sp, #524	; 0x20c
   b6146:	f7fe fb92 	bl	b486e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b614a:	a8b6      	add	r0, sp, #728	; 0x2d8
   b614c:	f005 ff14 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6150:	a8b0      	add	r0, sp, #704	; 0x2c0
   b6152:	f005 ff11 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6156:	a89d      	add	r0, sp, #628	; 0x274
   b6158:	f005 ff0e 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b615c:	4640      	mov	r0, r8
   b615e:	f7fe fb65 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b6162:	a88c      	add	r0, sp, #560	; 0x230
   b6164:	f7fe fb62 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b6168:	a88f      	add	r0, sp, #572	; 0x23c
   b616a:	f7fe fb4b 	bl	b4804 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b616e:	4b49      	ldr	r3, [pc, #292]	; (b6294 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd9c>)
   b6170:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b6172:	4b49      	ldr	r3, [pc, #292]	; (b6298 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xda0>)
   b6174:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b6176:	4b49      	ldr	r3, [pc, #292]	; (b629c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xda4>)
   b6178:	93b2      	str	r3, [sp, #712]	; 0x2c8
      lon = lo;
   b617a:	4b49      	ldr	r3, [pc, #292]	; (b62a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xda8>)
   b617c:	93b3      	str	r3, [sp, #716]	; 0x2cc
      lat = la;
   b617e:	4b49      	ldr	r3, [pc, #292]	; (b62a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdac>)
   b6180:	93b4      	str	r3, [sp, #720]	; 0x2d0
      lon = lo;
   b6182:	4b49      	ldr	r3, [pc, #292]	; (b62a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdb0>)
   b6184:	93b5      	str	r3, [sp, #724]	; 0x2d4
      lat = la;
   b6186:	4b49      	ldr	r3, [pc, #292]	; (b62ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdb4>)
   b6188:	93b6      	str	r3, [sp, #728]	; 0x2d8
      lon = lo;
   b618a:	4b49      	ldr	r3, [pc, #292]	; (b62b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdb8>)
   b618c:	93b7      	str	r3, [sp, #732]	; 0x2dc
      lat = la;
   b618e:	4b49      	ldr	r3, [pc, #292]	; (b62b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdbc>)
   b6190:	93b8      	str	r3, [sp, #736]	; 0x2e0
};
   b6192:	aab0      	add	r2, sp, #704	; 0x2c0
      lon = lo;
   b6194:	4b48      	ldr	r3, [pc, #288]	; (b62b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdc0>)
   b6196:	9224      	str	r2, [sp, #144]	; 0x90
   b6198:	93b9      	str	r3, [sp, #740]	; 0x2e4
   b619a:	2206      	movs	r2, #6
      lat = la;
   b619c:	4b47      	ldr	r3, [pc, #284]	; (b62bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdc4>)
   b619e:	9225      	str	r2, [sp, #148]	; 0x94
   b61a0:	93ba      	str	r3, [sp, #744]	; 0x2e8
   b61a2:	aa1a      	add	r2, sp, #104	; 0x68
      lon = lo;
   b61a4:	4b46      	ldr	r3, [pc, #280]	; (b62c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdc8>)
   b61a6:	93bb      	str	r3, [sp, #748]	; 0x2ec
   b61a8:	a88c      	add	r0, sp, #560	; 0x230
   b61aa:	4613      	mov	r3, r2
   b61ac:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b61b0:	f7fe fb92 	bl	b48d8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b61b4:	4b26      	ldr	r3, [pc, #152]	; (b6250 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd58>)
   b61b6:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
   b61ba:	f503 7c96 	add.w	ip, r3, #300	; 0x12c
   b61be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b61c2:	465f      	mov	r7, fp
   b61c4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b61c6:	f8dc 3000 	ldr.w	r3, [ip]
   b61ca:	603b      	str	r3, [r7, #0]
   b61cc:	2305      	movs	r3, #5
   b61ce:	9323      	str	r3, [sp, #140]	; 0x8c
   b61d0:	e899 0006 	ldmia.w	r9, {r1, r2}
   b61d4:	4628      	mov	r0, r5
   b61d6:	f7ff f81f 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b61da:	aa93      	add	r2, sp, #588	; 0x24c
   b61dc:	9220      	str	r2, [sp, #128]	; 0x80
   b61de:	232d      	movs	r3, #45	; 0x2d
   b61e0:	2204      	movs	r2, #4
   b61e2:	e9cd 3494 	strd	r3, r4, [sp, #592]	; 0x250
   b61e6:	9221      	str	r2, [sp, #132]	; 0x84
   b61e8:	ab20      	add	r3, sp, #128	; 0x80
   b61ea:	e893 0006 	ldmia.w	r3, {r1, r2}
   b61ee:	4640      	mov	r0, r8
   b61f0:	9493      	str	r4, [sp, #588]	; 0x24c
   b61f2:	9496      	str	r4, [sp, #600]	; 0x258
   b61f4:	f7ff f810 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b61f8:	a89d      	add	r0, sp, #628	; 0x274
   b61fa:	4932      	ldr	r1, [pc, #200]	; (b62c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdcc>)
   b61fc:	f7fd ff86 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6200:	a8a4      	add	r0, sp, #656	; 0x290
   b6202:	4931      	ldr	r1, [pc, #196]	; (b62c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdd0>)
   b6204:	f7fd ff82 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6208:	a8aa      	add	r0, sp, #680	; 0x2a8
   b620a:	4930      	ldr	r1, [pc, #192]	; (b62cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdd4>)
   b620c:	f7fd ff7e 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6210:	aba4      	add	r3, sp, #656	; 0x290
   b6212:	931e      	str	r3, [sp, #120]	; 0x78
   b6214:	2302      	movs	r3, #2
   b6216:	931f      	str	r3, [sp, #124]	; 0x7c
   b6218:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   b621c:	aa1e      	add	r2, sp, #120	; 0x78
   b621e:	4653      	mov	r3, sl
   b6220:	ca06      	ldmia	r2, {r1, r2}
   b6222:	a883      	add	r0, sp, #524	; 0x20c
   b6224:	f7fe fb8c 	bl	b4940 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b6228:	4621      	mov	r1, r4
   b622a:	2210      	movs	r2, #16
   b622c:	a88f      	add	r0, sp, #572	; 0x23c
   b622e:	f006 fe7b 	bl	bcf28 <memset>
   b6232:	aa8f      	add	r2, sp, #572	; 0x23c
   b6234:	921c      	str	r2, [sp, #112]	; 0x70
   b6236:	2204      	movs	r2, #4
   b6238:	ab1c      	add	r3, sp, #112	; 0x70
   b623a:	921d      	str	r2, [sp, #116]	; 0x74
   b623c:	e893 0006 	ldmia.w	r3, {r1, r2}
   b6240:	4630      	mov	r0, r6
   b6242:	f7fe ffe9 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway orangeLineMBTA = Railway{
   b6246:	ab83      	add	r3, sp, #524	; 0x20c
   b6248:	9301      	str	r3, [sp, #4]
   b624a:	ab9d      	add	r3, sp, #628	; 0x274
   b624c:	e040      	b.n	b62d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdd8>
   b624e:	bf00      	nop
   b6250:	000bf43c 	.word	0x000bf43c
   b6254:	000bf23c 	.word	0x000bf23c
   b6258:	000bf240 	.word	0x000bf240
   b625c:	000bf247 	.word	0x000bf247
   b6260:	2003e5c0 	.word	0x2003e5c0
   b6264:	422984a9 	.word	0x422984a9
   b6268:	c28e0be6 	.word	0xc28e0be6
   b626c:	422970a6 	.word	0x422970a6
   b6270:	c28e1862 	.word	0xc28e1862
   b6274:	42296fe1 	.word	0x42296fe1
   b6278:	c28e1e86 	.word	0xc28e1e86
   b627c:	422971d1 	.word	0x422971d1
   b6280:	c28e1fcf 	.word	0xc28e1fcf
   b6284:	000bf24e 	.word	0x000bf24e
   b6288:	000bf253 	.word	0x000bf253
   b628c:	000bf25a 	.word	0x000bf25a
   b6290:	2003530c 	.word	0x2003530c
   b6294:	4229537a 	.word	0x4229537a
   b6298:	c28e30c9 	.word	0xc28e30c9
   b629c:	422963d0 	.word	0x422963d0
   b62a0:	c28e26f1 	.word	0xc28e26f1
   b62a4:	4229634b 	.word	0x4229634b
   b62a8:	c28e210d 	.word	0xc28e210d
   b62ac:	42296e30 	.word	0x42296e30
   b62b0:	c28e1d5a 	.word	0xc28e1d5a
   b62b4:	42298278 	.word	0x42298278
   b62b8:	c28e26e2 	.word	0xc28e26e2
   b62bc:	42299ccd 	.word	0x42299ccd
   b62c0:	c28e2770 	.word	0xc28e2770
   b62c4:	000bf283 	.word	0x000bf283
   b62c8:	000bf28a 	.word	0x000bf28a
   b62cc:	000bf291 	.word	0x000bf291
   b62d0:	462a      	mov	r2, r5
   b62d2:	a98c      	add	r1, sp, #560	; 0x230
   b62d4:	9602      	str	r6, [sp, #8]
   b62d6:	9300      	str	r3, [sp, #0]
   b62d8:	48b5      	ldr	r0, [pc, #724]	; (b65b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10b8>)
   b62da:	4643      	mov	r3, r8
   b62dc:	f7ff f81c 	bl	b5318 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b62e0:	4630      	mov	r0, r6
   b62e2:	f7fe faa3 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b62e6:	a883      	add	r0, sp, #524	; 0x20c
   b62e8:	f7fe fac1 	bl	b486e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b62ec:	a8aa      	add	r0, sp, #680	; 0x2a8
   b62ee:	f005 fe43 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b62f2:	a8a4      	add	r0, sp, #656	; 0x290
   b62f4:	f005 fe40 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b62f8:	a89d      	add	r0, sp, #628	; 0x274
   b62fa:	f005 fe3d 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b62fe:	4640      	mov	r0, r8
   b6300:	f7fe fa94 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b6304:	4628      	mov	r0, r5
   b6306:	f7fe fa91 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b630a:	a88c      	add	r0, sp, #560	; 0x230
   b630c:	f7fe fa7a 	bl	b4804 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b6310:	4ba8      	ldr	r3, [pc, #672]	; (b65b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10bc>)
   b6312:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b6314:	4ba8      	ldr	r3, [pc, #672]	; (b65b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10c0>)
   b6316:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b6318:	4ba8      	ldr	r3, [pc, #672]	; (b65bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10c4>)
   b631a:	93b4      	str	r3, [sp, #720]	; 0x2d0
      lon = lo;
   b631c:	4ba8      	ldr	r3, [pc, #672]	; (b65c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10c8>)
   b631e:	93b5      	str	r3, [sp, #724]	; 0x2d4
      lat = la;
   b6320:	4ba8      	ldr	r3, [pc, #672]	; (b65c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10cc>)
   b6322:	93b6      	str	r3, [sp, #728]	; 0x2d8
      lon = lo;
   b6324:	4ba8      	ldr	r3, [pc, #672]	; (b65c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10d0>)
   b6326:	93b7      	str	r3, [sp, #732]	; 0x2dc
      lat = la;
   b6328:	4ba8      	ldr	r3, [pc, #672]	; (b65cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10d4>)
   b632a:	93b8      	str	r3, [sp, #736]	; 0x2e0
      lon = lo;
   b632c:	4ba8      	ldr	r3, [pc, #672]	; (b65d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10d8>)
   b632e:	93b9      	str	r3, [sp, #740]	; 0x2e4
      lat = la;
   b6330:	4ba8      	ldr	r3, [pc, #672]	; (b65d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10dc>)
   b6332:	93ba      	str	r3, [sp, #744]	; 0x2e8
      lon = lo;
   b6334:	4ba8      	ldr	r3, [pc, #672]	; (b65d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10e0>)
   b6336:	93bb      	str	r3, [sp, #748]	; 0x2ec
      lat = la;
   b6338:	4ba8      	ldr	r3, [pc, #672]	; (b65dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10e4>)
   b633a:	93bc      	str	r3, [sp, #752]	; 0x2f0
      lon = lo;
   b633c:	4ba8      	ldr	r3, [pc, #672]	; (b65e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10e8>)
   b633e:	93bd      	str	r3, [sp, #756]	; 0x2f4
      lat = la;
   b6340:	4ba8      	ldr	r3, [pc, #672]	; (b65e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10ec>)
   b6342:	93be      	str	r3, [sp, #760]	; 0x2f8
      lon = lo;
   b6344:	4ba8      	ldr	r3, [pc, #672]	; (b65e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f0>)
   b6346:	93bf      	str	r3, [sp, #764]	; 0x2fc
};
   b6348:	abb0      	add	r3, sp, #704	; 0x2c0
   b634a:	931a      	str	r3, [sp, #104]	; 0x68
   b634c:	2308      	movs	r3, #8
   b634e:	931b      	str	r3, [sp, #108]	; 0x6c
   b6350:	f10d 0940 	add.w	r9, sp, #64	; 0x40
   b6354:	aa1a      	add	r2, sp, #104	; 0x68
   b6356:	464b      	mov	r3, r9
   b6358:	ca06      	ldmia	r2, {r1, r2}
   b635a:	a88c      	add	r0, sp, #560	; 0x230
      lat = la;
   b635c:	edcd 8ab2 	vstr	s17, [sp, #712]	; 0x2c8
      lon = lo;
   b6360:	ed8d 8ab3 	vstr	s16, [sp, #716]	; 0x2cc
   b6364:	f7fe fab8 	bl	b48d8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b6368:	f8df c2c8 	ldr.w	ip, [pc, #712]	; b6634 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x113c>
   b636c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6370:	f50d 7e1d 	add.w	lr, sp, #628	; 0x274
   b6374:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b6378:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
   b637c:	9b04      	ldr	r3, [sp, #16]
   b637e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b6382:	ab9d      	add	r3, sp, #628	; 0x274
   b6384:	9318      	str	r3, [sp, #96]	; 0x60
   b6386:	2307      	movs	r3, #7
   b6388:	9319      	str	r3, [sp, #100]	; 0x64
   b638a:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b638e:	4628      	mov	r0, r5
   b6390:	f7fe ff42 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b6394:	aa93      	add	r2, sp, #588	; 0x24c
   b6396:	9216      	str	r2, [sp, #88]	; 0x58
   b6398:	2346      	movs	r3, #70	; 0x46
   b639a:	2204      	movs	r2, #4
   b639c:	e9cd 3494 	strd	r3, r4, [sp, #592]	; 0x250
   b63a0:	9217      	str	r2, [sp, #92]	; 0x5c
   b63a2:	ab16      	add	r3, sp, #88	; 0x58
   b63a4:	e893 0006 	ldmia.w	r3, {r1, r2}
   b63a8:	4640      	mov	r0, r8
   b63aa:	9493      	str	r4, [sp, #588]	; 0x24c
   b63ac:	9496      	str	r4, [sp, #600]	; 0x258
   b63ae:	f7fe ff33 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b63b2:	4658      	mov	r0, fp
   b63b4:	498d      	ldr	r1, [pc, #564]	; (b65ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f4>)
   b63b6:	f7fd fea9 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b63ba:	a8a4      	add	r0, sp, #656	; 0x290
   b63bc:	498c      	ldr	r1, [pc, #560]	; (b65f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f8>)
   b63be:	f7fd fea5 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b63c2:	a8aa      	add	r0, sp, #680	; 0x2a8
   b63c4:	498b      	ldr	r1, [pc, #556]	; (b65f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10fc>)
   b63c6:	f7fd fea1 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b63ca:	aba4      	add	r3, sp, #656	; 0x290
   b63cc:	9314      	str	r3, [sp, #80]	; 0x50
   b63ce:	2302      	movs	r3, #2
   b63d0:	9315      	str	r3, [sp, #84]	; 0x54
   b63d2:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   b63d6:	aa14      	add	r2, sp, #80	; 0x50
   b63d8:	4653      	mov	r3, sl
   b63da:	ca06      	ldmia	r2, {r1, r2}
   b63dc:	a883      	add	r0, sp, #524	; 0x20c
   b63de:	f7fe faaf 	bl	b4940 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b63e2:	4621      	mov	r1, r4
   b63e4:	2210      	movs	r2, #16
   b63e6:	a88f      	add	r0, sp, #572	; 0x23c
   b63e8:	f006 fd9e 	bl	bcf28 <memset>
   b63ec:	aa8f      	add	r2, sp, #572	; 0x23c
   b63ee:	9212      	str	r2, [sp, #72]	; 0x48
   b63f0:	2204      	movs	r2, #4
   b63f2:	ab12      	add	r3, sp, #72	; 0x48
   b63f4:	9213      	str	r2, [sp, #76]	; 0x4c
   b63f6:	e893 0006 	ldmia.w	r3, {r1, r2}
   b63fa:	4630      	mov	r0, r6
   b63fc:	f7fe ff0c 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway greenLine1MBTA = Railway{
   b6400:	ab83      	add	r3, sp, #524	; 0x20c
   b6402:	462a      	mov	r2, r5
   b6404:	a98c      	add	r1, sp, #560	; 0x230
   b6406:	e9cd b300 	strd	fp, r3, [sp]
   b640a:	9602      	str	r6, [sp, #8]
   b640c:	4643      	mov	r3, r8
   b640e:	487a      	ldr	r0, [pc, #488]	; (b65f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1100>)
   b6410:	f7fe ff82 	bl	b5318 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b6414:	4630      	mov	r0, r6
   b6416:	f7fe fa09 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b641a:	a883      	add	r0, sp, #524	; 0x20c
   b641c:	f7fe fa27 	bl	b486e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b6420:	a8aa      	add	r0, sp, #680	; 0x2a8
   b6422:	f005 fda9 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6426:	a8a4      	add	r0, sp, #656	; 0x290
   b6428:	f005 fda6 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b642c:	4658      	mov	r0, fp
   b642e:	f005 fda3 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6432:	4640      	mov	r0, r8
   b6434:	f7fe f9fa 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b6438:	4628      	mov	r0, r5
   b643a:	f7fe f9f7 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b643e:	a88c      	add	r0, sp, #560	; 0x230
   b6440:	f7fe f9e0 	bl	b4804 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b6444:	4b6d      	ldr	r3, [pc, #436]	; (b65fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1104>)
   b6446:	939d      	str	r3, [sp, #628]	; 0x274
      lon = lo;
   b6448:	4b6d      	ldr	r3, [pc, #436]	; (b6600 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1108>)
   b644a:	939e      	str	r3, [sp, #632]	; 0x278
};
   b644c:	ab9d      	add	r3, sp, #628	; 0x274
   b644e:	6033      	str	r3, [r6, #0]
   b6450:	2302      	movs	r3, #2
   b6452:	6073      	str	r3, [r6, #4]
   b6454:	e896 0006 	ldmia.w	r6, {r1, r2}
   b6458:	ab08      	add	r3, sp, #32
   b645a:	a88f      	add	r0, sp, #572	; 0x23c
      lat = la;
   b645c:	edcd 8a9f 	vstr	s17, [sp, #636]	; 0x27c
      lon = lo;
   b6460:	ed8d 8aa0 	vstr	s16, [sp, #640]	; 0x280
   b6464:	f7fe fa38 	bl	b48d8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b6468:	ab09      	add	r3, sp, #36	; 0x24
   b646a:	9310      	str	r3, [sp, #64]	; 0x40
   b646c:	2301      	movs	r3, #1
   b646e:	9311      	str	r3, [sp, #68]	; 0x44
   b6470:	e899 0006 	ldmia.w	r9, {r1, r2}
   b6474:	260f      	movs	r6, #15
   b6476:	a88c      	add	r0, sp, #560	; 0x230
   b6478:	9609      	str	r6, [sp, #36]	; 0x24
   b647a:	f7fe fecd 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b647e:	2304      	movs	r3, #4
   b6480:	930f      	str	r3, [sp, #60]	; 0x3c
   b6482:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
   b6486:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b648a:	4628      	mov	r0, r5
   b648c:	e9cd 4697 	strd	r4, r6, [sp, #604]	; 0x25c
   b6490:	e9cd 4499 	strd	r4, r4, [sp, #612]	; 0x264
   b6494:	f7fe fec0 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b6498:	a8a4      	add	r0, sp, #656	; 0x290
   b649a:	4954      	ldr	r1, [pc, #336]	; (b65ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f4>)
   b649c:	f7fd fe36 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b64a0:	a8b0      	add	r0, sp, #704	; 0x2c0
   b64a2:	4953      	ldr	r1, [pc, #332]	; (b65f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f8>)
   b64a4:	f7fd fe32 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b64a8:	a8b6      	add	r0, sp, #728	; 0x2d8
   b64aa:	4952      	ldr	r1, [pc, #328]	; (b65f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10fc>)
   b64ac:	f7fd fe2e 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b64b0:	abb0      	add	r3, sp, #704	; 0x2c0
   b64b2:	930c      	str	r3, [sp, #48]	; 0x30
   b64b4:	2302      	movs	r3, #2
   b64b6:	930d      	str	r3, [sp, #52]	; 0x34
   b64b8:	aa0c      	add	r2, sp, #48	; 0x30
   b64ba:	ab07      	add	r3, sp, #28
   b64bc:	ca06      	ldmia	r2, {r1, r2}
   b64be:	4640      	mov	r0, r8
   b64c0:	f7fe fa3e 	bl	b4940 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b64c4:	4621      	mov	r1, r4
   b64c6:	2210      	movs	r2, #16
   b64c8:	a893      	add	r0, sp, #588	; 0x24c
   b64ca:	f006 fd2d 	bl	bcf28 <memset>
   b64ce:	aa93      	add	r2, sp, #588	; 0x24c
   b64d0:	920a      	str	r2, [sp, #40]	; 0x28
   b64d2:	2204      	movs	r2, #4
   b64d4:	ab0a      	add	r3, sp, #40	; 0x28
   b64d6:	920b      	str	r2, [sp, #44]	; 0x2c
   b64d8:	e893 0006 	ldmia.w	r3, {r1, r2}
   b64dc:	a883      	add	r0, sp, #524	; 0x20c
   b64de:	f7fe fe9b 	bl	b5218 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway greenLine2MBTA = Railway{
   b64e2:	ab83      	add	r3, sp, #524	; 0x20c
   b64e4:	e9cd 8301 	strd	r8, r3, [sp, #4]
   b64e8:	aba4      	add	r3, sp, #656	; 0x290
   b64ea:	aa8c      	add	r2, sp, #560	; 0x230
   b64ec:	a98f      	add	r1, sp, #572	; 0x23c
   b64ee:	9300      	str	r3, [sp, #0]
   b64f0:	4844      	ldr	r0, [pc, #272]	; (b6604 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x110c>)
   b64f2:	462b      	mov	r3, r5
   b64f4:	f7fe ff10 	bl	b5318 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b64f8:	a883      	add	r0, sp, #524	; 0x20c
   b64fa:	f7fe f997 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b64fe:	4640      	mov	r0, r8
   b6500:	f7fe f9b5 	bl	b486e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b6504:	a8b6      	add	r0, sp, #728	; 0x2d8
   b6506:	f005 fd37 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b650a:	a8b0      	add	r0, sp, #704	; 0x2c0
   b650c:	f005 fd34 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6510:	a8a4      	add	r0, sp, #656	; 0x290
   b6512:	f005 fd31 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6516:	4628      	mov	r0, r5
   b6518:	f7fe f988 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b651c:	a88c      	add	r0, sp, #560	; 0x230
   b651e:	f7fe f985 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b6522:	a88f      	add	r0, sp, #572	; 0x23c
   b6524:	f7fe f96e 	bl	b4804 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6528:	4b37      	ldr	r3, [pc, #220]	; (b6608 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1110>)
const BleUuid serviceUuid("a73ba101-8192-4a51-b42d-ae9cd14b14a5");
   b652a:	4938      	ldr	r1, [pc, #224]	; (b660c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1114>)
   b652c:	609c      	str	r4, [r3, #8]
   b652e:	e9c3 4400 	strd	r4, r4, [r3]
   b6532:	4b37      	ldr	r3, [pc, #220]	; (b6610 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1118>)
   b6534:	4837      	ldr	r0, [pc, #220]	; (b6614 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x111c>)
   b6536:	609c      	str	r4, [r3, #8]
   b6538:	e9c3 4400 	strd	r4, r4, [r3]
   b653c:	4b36      	ldr	r3, [pc, #216]	; (b6618 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1120>)
   b653e:	4d37      	ldr	r5, [pc, #220]	; (b661c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1124>)
   b6540:	609c      	str	r4, [r3, #8]
   b6542:	e9c3 4400 	strd	r4, r4, [r3]
   b6546:	4b36      	ldr	r3, [pc, #216]	; (b6620 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1128>)
   b6548:	f8df 80c8 	ldr.w	r8, [pc, #200]	; b6614 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x111c>
   b654c:	609c      	str	r4, [r3, #8]
   b654e:	e9c3 4400 	strd	r4, r4, [r3]
   b6552:	4b34      	ldr	r3, [pc, #208]	; (b6624 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x112c>)
   b6554:	e9c3 4400 	strd	r4, r4, [r3]
   b6558:	609c      	str	r4, [r3, #8]
   b655a:	f003 fba1 	bl	b9ca0 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b655e:	4932      	ldr	r1, [pc, #200]	; (b6628 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1130>)
   b6560:	4832      	ldr	r0, [pc, #200]	; (b662c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1134>)
   b6562:	f003 fb9d 	bl	b9ca0 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b6566:	4932      	ldr	r1, [pc, #200]	; (b6630 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1138>)
   b6568:	482c      	ldr	r0, [pc, #176]	; (b661c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1124>)
   b656a:	f003 fb99 	bl	b9ca0 <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b656e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6570:	465e      	mov	r6, fp
   b6572:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6574:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   b6578:	f8d5 c000 	ldr.w	ip, [r5]
   b657c:	f8c7 c000 	str.w	ip, [r7]
   b6580:	ad9d      	add	r5, sp, #628	; 0x274
   b6582:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6584:	46c1      	mov	r9, r8
   b6586:	9b04      	ldr	r3, [sp, #16]
   b6588:	f859 a910 	ldr.w	sl, [r9], #-16
   b658c:	f8c3 a000 	str.w	sl, [r3]
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b6590:	465d      	mov	r5, fp
   b6592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6594:	aea4      	add	r6, sp, #656	; 0x290
   b6596:	c60f      	stmia	r6!, {r0, r1, r2, r3}
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b6598:	f8df e09c 	ldr.w	lr, [pc, #156]	; b6638 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1140>
   b659c:	f8c6 c000 	str.w	ip, [r6]
        BleUuid sUuid(svcUuid);
   b65a0:	f50d 7c1d 	add.w	ip, sp, #628	; 0x274
      constexpr __shared_count() noexcept : _M_pi(0)
   b65a4:	e9ce 4400 	strd	r4, r4, [lr]
   b65a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b65ac:	adb0      	add	r5, sp, #704	; 0x2c0
   b65ae:	e045      	b.n	b663c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1144>
   b65b0:	20037e44 	.word	0x20037e44
   b65b4:	42296555 	.word	0x42296555
   b65b8:	c28e30ae 	.word	0xc28e30ae
   b65bc:	42296847 	.word	0x42296847
   b65c0:	c28e2445 	.word	0xc28e2445
   b65c4:	422968cc 	.word	0x422968cc
   b65c8:	c28e2106 	.word	0xc28e2106
   b65cc:	422972cd 	.word	0x422972cd
   b65d0:	c28e1db0 	.word	0xc28e1db0
   b65d4:	42297777 	.word	0x42297777
   b65d8:	c28e1f5e 	.word	0xc28e1f5e
   b65dc:	42297668 	.word	0x42297668
   b65e0:	c28e20d5 	.word	0xc28e20d5
   b65e4:	42298291 	.word	0x42298291
   b65e8:	c28e30ba 	.word	0xc28e30ba
   b65ec:	000bf1bf 	.word	0x000bf1bf
   b65f0:	000bf275 	.word	0x000bf275
   b65f4:	000bf27c 	.word	0x000bf27c
   b65f8:	20035464 	.word	0x20035464
   b65fc:	422957f0 	.word	0x422957f0
   b6600:	c28e3351 	.word	0xc28e3351
   b6604:	200354d0 	.word	0x200354d0
   b6608:	200353e8 	.word	0x200353e8
   b660c:	000bf2c0 	.word	0x000bf2c0
   b6610:	20035458 	.word	0x20035458
   b6614:	20035254 	.word	0x20035254
   b6618:	20037dcc 	.word	0x20037dcc
   b661c:	2003527c 	.word	0x2003527c
   b6620:	20035290 	.word	0x20035290
   b6624:	2003e694 	.word	0x2003e694
   b6628:	000bf2e5 	.word	0x000bf2e5
   b662c:	20035268 	.word	0x20035268
   b6630:	000bf30a 	.word	0x000bf30a
   b6634:	000bf57c 	.word	0x000bf57c
   b6638:	2003e6a4 	.word	0x2003e6a4
   b663c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b663e:	abb0      	add	r3, sp, #704	; 0x2c0
        BleUuid sUuid(svcUuid);
   b6640:	f8c5 a000 	str.w	sl, [r5]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b6644:	4670      	mov	r0, lr
   b6646:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b664a:	9300      	str	r3, [sp, #0]
   b664c:	497b      	ldr	r1, [pc, #492]	; (b683c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1344>)
   b664e:	aba4      	add	r3, sp, #656	; 0x290
   b6650:	f04f 0210 	mov.w	r2, #16
   b6654:	f004 f88e 	bl	ba774 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b6658:	f8df c27c 	ldr.w	ip, [pc, #636]	; b68d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13e0>
   b665c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6660:	46de      	mov	lr, fp
   b6662:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b6666:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   b666a:	f8dc e000 	ldr.w	lr, [ip]
   b666e:	f8c7 e000 	str.w	lr, [r7]
   b6672:	f50d 7c1d 	add.w	ip, sp, #628	; 0x274
   b6676:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b667a:	9b04      	ldr	r3, [sp, #16]
   b667c:	f8d8 9000 	ldr.w	r9, [r8]
   b6680:	f8c3 9000 	str.w	r9, [r3]
        BleUuid cUuid(charUuid);
   b6684:	46da      	mov	sl, fp
   b6686:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
      : _M_ptr(0), _M_refcount()
   b668a:	f8df 8204 	ldr.w	r8, [pc, #516]	; b6890 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1398>
   b668e:	f50d 7c24 	add.w	ip, sp, #656	; 0x290
   b6692:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6696:	f8c6 e000 	str.w	lr, [r6]
        BleUuid sUuid(svcUuid);
   b669a:	ae9d      	add	r6, sp, #628	; 0x274
      constexpr __shared_count() noexcept : _M_pi(0)
   b669c:	e9c8 4400 	strd	r4, r4, [r8]
   b66a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b66a2:	f50d 7c30 	add.w	ip, sp, #704	; 0x2c0
   b66a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b66aa:	4b65      	ldr	r3, [pc, #404]	; (b6840 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1348>)
        BleUuid sUuid(svcUuid);
   b66ac:	f8c5 9000 	str.w	r9, [r5]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b66b0:	9301      	str	r3, [sp, #4]
   b66b2:	abb0      	add	r3, sp, #704	; 0x2c0
   b66b4:	4963      	ldr	r1, [pc, #396]	; (b6844 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x134c>)
   b66b6:	9402      	str	r4, [sp, #8]
   b66b8:	9300      	str	r3, [sp, #0]
   b66ba:	f04f 0204 	mov.w	r2, #4
   b66be:	aba4      	add	r3, sp, #656	; 0x290
   b66c0:	4640      	mov	r0, r8
   b66c2:	f004 f857 	bl	ba774 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
Adafruit_VL6180X vl = Adafruit_VL6180X();
   b66c6:	4860      	ldr	r0, [pc, #384]	; (b6848 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1350>)
   b66c8:	f002 f8a3 	bl	b8812 <_ZN16Adafruit_VL6180XC1Ev>
MQTT client("lab.thewcl.com", 1883, callback);
   b66cc:	4b5f      	ldr	r3, [pc, #380]	; (b684c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1354>)
   b66ce:	9400      	str	r4, [sp, #0]
   b66d0:	f240 725b 	movw	r2, #1883	; 0x75b
   b66d4:	495e      	ldr	r1, [pc, #376]	; (b6850 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1358>)
   b66d6:	485f      	ldr	r0, [pc, #380]	; (b6854 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x135c>)
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b66d8:	4c5f      	ldr	r4, [pc, #380]	; (b6858 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1360>)
   b66da:	f002 fa31 	bl	b8b40 <_ZN4MQTTC1EPKctPFvPcPhjEb>
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
   b66de:	495f      	ldr	r1, [pc, #380]	; (b685c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1364>)
   b66e0:	485f      	ldr	r0, [pc, #380]	; (b6860 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1368>)
   b66e2:	f004 fd7c 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
   b66e6:	485f      	ldr	r0, [pc, #380]	; (b6864 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x136c>)
   b66e8:	f004 fb86 	bl	badf8 <_ZN9IPAddressC1Ev>
   b66ec:	495b      	ldr	r1, [pc, #364]	; (b685c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1364>)
   b66ee:	485e      	ldr	r0, [pc, #376]	; (b6868 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1370>)
   b66f0:	f004 fd75 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
   b66f4:	4959      	ldr	r1, [pc, #356]	; (b685c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1364>)
   b66f6:	485d      	ldr	r0, [pc, #372]	; (b686c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1374>)
   b66f8:	f004 fd71 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   b66fc:	4957      	ldr	r1, [pc, #348]	; (b685c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1364>)
   b66fe:	485c      	ldr	r0, [pc, #368]	; (b6870 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1378>)
   b6700:	f004 fd6d 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
HttpClient http;
   b6704:	485b      	ldr	r0, [pc, #364]	; (b6874 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x137c>)
   b6706:	f001 fa75 	bl	b7bf4 <_ZN10HttpClientC1Ev>
   b670a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b670e:	9300      	str	r3, [sp, #0]
   b6710:	f242 7210 	movw	r2, #10000	; 0x2710
   b6714:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b6718:	4b57      	ldr	r3, [pc, #348]	; (b6878 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1380>)
   b671a:	4620      	mov	r0, r4
   b671c:	f001 fc42 	bl	b7fa4 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b6720:	4b56      	ldr	r3, [pc, #344]	; (b687c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1384>)
String SSID = "";
   b6722:	494e      	ldr	r1, [pc, #312]	; (b685c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1364>)
   b6724:	6023      	str	r3, [r4, #0]
   b6726:	4856      	ldr	r0, [pc, #344]	; (b6880 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1388>)
   b6728:	f004 fd59 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
String password = "";
   b672c:	494b      	ldr	r1, [pc, #300]	; (b685c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1364>)
   b672e:	4855      	ldr	r0, [pc, #340]	; (b6884 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x138c>)
   b6730:	f50d 7d41 	add.w	sp, sp, #772	; 0x304
   b6734:	ecbd 8b0e 	vpop	{d8-d14}
   b6738:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
String password = "";
   b673c:	f004 bd4f 	b.w	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
   b6740:	4850      	ldr	r0, [pc, #320]	; (b6884 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x138c>)
   b6742:	f004 fd01 	bl	bb148 <_ZN6StringD1Ev>
String SSID = "";
   b6746:	484e      	ldr	r0, [pc, #312]	; (b6880 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1388>)
   b6748:	f004 fcfe 	bl	bb148 <_ZN6StringD1Ev>
JsonParserStatic<10000, 1000> parser;
   b674c:	4842      	ldr	r0, [pc, #264]	; (b6858 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1360>)
   b674e:	f7fd fcb5 	bl	b40bc <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b6752:	4b48      	ldr	r3, [pc, #288]	; (b6874 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x137c>)
   b6754:	4a4c      	ldr	r2, [pc, #304]	; (b6888 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1390>)
	if (_M_pi != nullptr)
   b6756:	699c      	ldr	r4, [r3, #24]
   b6758:	601a      	str	r2, [r3, #0]
   b675a:	b17c      	cbz	r4, b677c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1284>
      if (--_M_use_count == 0)
   b675c:	6863      	ldr	r3, [r4, #4]
   b675e:	3b01      	subs	r3, #1
   b6760:	6063      	str	r3, [r4, #4]
   b6762:	b95b      	cbnz	r3, b677c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1284>
          _M_dispose();
   b6764:	6823      	ldr	r3, [r4, #0]
   b6766:	4620      	mov	r0, r4
   b6768:	689b      	ldr	r3, [r3, #8]
   b676a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b676c:	68a3      	ldr	r3, [r4, #8]
   b676e:	3b01      	subs	r3, #1
   b6770:	60a3      	str	r3, [r4, #8]
   b6772:	b91b      	cbnz	r3, b677c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1284>
            _M_destroy();
   b6774:	6823      	ldr	r3, [r4, #0]
   b6776:	4620      	mov	r0, r4
   b6778:	68db      	ldr	r3, [r3, #12]
   b677a:	4798      	blx	r3
   b677c:	483c      	ldr	r0, [pc, #240]	; (b6870 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1378>)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b677e:	4c43      	ldr	r4, [pc, #268]	; (b688c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1394>)
   b6780:	f004 fce2 	bl	bb148 <_ZN6StringD1Ev>
} http_request_t;
   b6784:	4839      	ldr	r0, [pc, #228]	; (b686c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1374>)
   b6786:	f004 fcdf 	bl	bb148 <_ZN6StringD1Ev>
   b678a:	4837      	ldr	r0, [pc, #220]	; (b6868 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1370>)
   b678c:	f004 fcdc 	bl	bb148 <_ZN6StringD1Ev>
   b6790:	4833      	ldr	r0, [pc, #204]	; (b6860 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1368>)
   b6792:	f004 fcd9 	bl	bb148 <_ZN6StringD1Ev>
MQTT client("lab.thewcl.com", 1883, callback);
   b6796:	482f      	ldr	r0, [pc, #188]	; (b6854 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x135c>)
   b6798:	f002 fd60 	bl	b925c <_ZN4MQTTD1Ev>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   b679c:	483c      	ldr	r0, [pc, #240]	; (b6890 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1398>)
   b679e:	f003 fcd0 	bl	ba142 <_ZN8particle17BleCharacteristicD1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   b67a2:	483c      	ldr	r0, [pc, #240]	; (b6894 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x139c>)
   b67a4:	f003 fccd 	bl	ba142 <_ZN8particle17BleCharacteristicD1Ev>
      }
   b67a8:	483b      	ldr	r0, [pc, #236]	; (b6898 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13a0>)
   b67aa:	f7fe f83f 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b67ae:	483b      	ldr	r0, [pc, #236]	; (b689c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13a4>)
   b67b0:	f7fe f83c 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
std::vector<Railway> ctaRailways, mbtaRailways;
   b67b4:	483a      	ldr	r0, [pc, #232]	; (b68a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13a8>)
   b67b6:	f7fe fcea 	bl	b518e <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b67ba:	483a      	ldr	r0, [pc, #232]	; (b68a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13ac>)
   b67bc:	f7fe fce7 	bl	b518e <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
	__destroy(__first, __last);
   b67c0:	e9d4 0100 	ldrd	r0, r1, [r4]
   b67c4:	f7fe fcf1 	bl	b51aa <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
   b67c8:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b67ca:	b118      	cbz	r0, b67d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x12dc>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b67cc:	68a1      	ldr	r1, [r4, #8]
   b67ce:	1a09      	subs	r1, r1, r0
   b67d0:	f7fd fc69 	bl	b40a6 <_ZdlPvj>
Railway greenLine2MBTA = Railway{
   b67d4:	4834      	ldr	r0, [pc, #208]	; (b68a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13b0>)
   b67d6:	f7fe fcaf 	bl	b5138 <_ZN7RailwayD1Ev>
Railway greenLine1MBTA = Railway{
   b67da:	4834      	ldr	r0, [pc, #208]	; (b68ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13b4>)
   b67dc:	f7fe fcac 	bl	b5138 <_ZN7RailwayD1Ev>
Railway orangeLineMBTA = Railway{
   b67e0:	4833      	ldr	r0, [pc, #204]	; (b68b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13b8>)
   b67e2:	f7fe fca9 	bl	b5138 <_ZN7RailwayD1Ev>
Railway blueLineMBTA = Railway{
   b67e6:	4833      	ldr	r0, [pc, #204]	; (b68b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13bc>)
   b67e8:	f7fe fca6 	bl	b5138 <_ZN7RailwayD1Ev>
Railway redLineMBTA = Railway{
   b67ec:	4832      	ldr	r0, [pc, #200]	; (b68b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13c0>)
   b67ee:	f7fe fca3 	bl	b5138 <_ZN7RailwayD1Ev>
Railway pinkLineCTA = Railway(
   b67f2:	4832      	ldr	r0, [pc, #200]	; (b68bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13c4>)
   b67f4:	f7fe fca0 	bl	b5138 <_ZN7RailwayD1Ev>
Railway purpleLineCTA = Railway(
   b67f8:	4831      	ldr	r0, [pc, #196]	; (b68c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13c8>)
   b67fa:	f7fe fc9d 	bl	b5138 <_ZN7RailwayD1Ev>
Railway orangeLineCTA = Railway(
   b67fe:	4831      	ldr	r0, [pc, #196]	; (b68c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13cc>)
   b6800:	f7fe fc9a 	bl	b5138 <_ZN7RailwayD1Ev>
Railway greenLineCTA = Railway(
   b6804:	4830      	ldr	r0, [pc, #192]	; (b68c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13d0>)
   b6806:	f7fe fc97 	bl	b5138 <_ZN7RailwayD1Ev>
Railway brownLineCTA = Railway(
   b680a:	4830      	ldr	r0, [pc, #192]	; (b68cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13d4>)
   b680c:	f7fe fc94 	bl	b5138 <_ZN7RailwayD1Ev>
Railway blueLineCTA = Railway(
   b6810:	482f      	ldr	r0, [pc, #188]	; (b68d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13d8>)
   b6812:	f7fe fc91 	bl	b5138 <_ZN7RailwayD1Ev>
Railway redLineCTA = Railway(
   b6816:	482f      	ldr	r0, [pc, #188]	; (b68d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13dc>)
   b6818:	f7fe fc8e 	bl	b5138 <_ZN7RailwayD1Ev>
        if (wakeupSource_) {
   b681c:	6828      	ldr	r0, [r5, #0]
   b681e:	b138      	cbz	r0, b6830 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1338>
   b6820:	f50d 7d41 	add.w	sp, sp, #772	; 0x304
   b6824:	ecbd 8b0e 	vpop	{d8-d14}
   b6828:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            free(wakeupSource_);
   b682c:	f002 bfe4 	b.w	b97f8 <free>
   b6830:	f50d 7d41 	add.w	sp, sp, #772	; 0x304
   b6834:	ecbd 8b0e 	vpop	{d8-d14}
   b6838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b683c:	000bf32f 	.word	0x000bf32f
   b6840:	000b4a15 	.word	0x000b4a15
   b6844:	000bf332 	.word	0x000bf332
   b6848:	2003e6b0 	.word	0x2003e6b0
   b684c:	000b47e9 	.word	0x000b47e9
   b6850:	000bf335 	.word	0x000bf335
   b6854:	200353f8 	.word	0x200353f8
   b6858:	20037eb0 	.word	0x20037eb0
   b685c:	000bf5d2 	.word	0x000bf5d2
   b6860:	2003e62c 	.word	0x2003e62c
   b6864:	2003e63c 	.word	0x2003e63c
   b6868:	2003e654 	.word	0x2003e654
   b686c:	2003e668 	.word	0x2003e668
   b6870:	2003e67c 	.word	0x2003e67c
   b6874:	200355b0 	.word	0x200355b0
   b6878:	2003a5ec 	.word	0x2003a5ec
   b687c:	000bf428 	.word	0x000bf428
   b6880:	20035238 	.word	0x20035238
   b6884:	2003e46c 	.word	0x2003e46c
   b6888:	000bf8ec 	.word	0x000bf8ec
   b688c:	200353e8 	.word	0x200353e8
   b6890:	2003e68c 	.word	0x2003e68c
   b6894:	2003e6a4 	.word	0x2003e6a4
   b6898:	2003e694 	.word	0x2003e694
   b689c:	20035290 	.word	0x20035290
   b68a0:	20037dcc 	.word	0x20037dcc
   b68a4:	20035458 	.word	0x20035458
   b68a8:	200354d0 	.word	0x200354d0
   b68ac:	20035464 	.word	0x20035464
   b68b0:	20037e44 	.word	0x20037e44
   b68b4:	2003530c 	.word	0x2003530c
   b68b8:	2003e5c0 	.word	0x2003e5c0
   b68bc:	2003e47c 	.word	0x2003e47c
   b68c0:	2003e4e8 	.word	0x2003e4e8
   b68c4:	20037dd8 	.word	0x20037dd8
   b68c8:	2003553c 	.word	0x2003553c
   b68cc:	20035378 	.word	0x20035378
   b68d0:	200352a0 	.word	0x200352a0
   b68d4:	2003e554 	.word	0x2003e554
   b68d8:	20035268 	.word	0x20035268

000b68dc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b68dc:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b68de:	b510      	push	{r4, lr}
   b68e0:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b68e2:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b68e6:	d005      	beq.n	b68f4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b68e8:	4601      	mov	r1, r0
   b68ea:	4622      	mov	r2, r4
   b68ec:	4618      	mov	r0, r3
   b68ee:	f006 fb01 	bl	bcef4 <memmove>
   b68f2:	4603      	mov	r3, r0
	}
   b68f4:	1918      	adds	r0, r3, r4
   b68f6:	bd10      	pop	{r4, pc}

000b68f8 <_ZN7RailwayC1ERKS_>:
class Railway{
   b68f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b68fc:	460d      	mov	r5, r1
   b68fe:	4604      	mov	r4, r0
   b6900:	f7fe f852 	bl	b49a8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6904:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6908:	2600      	movs	r6, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b690a:	1ac9      	subs	r1, r1, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b690c:	e9c4 6603 	strd	r6, r6, [r4, #12]
   b6910:	6166      	str	r6, [r4, #20]
      { _M_create_storage(__n); }
   b6912:	1089      	asrs	r1, r1, #2
   b6914:	f104 000c 	add.w	r0, r4, #12
   b6918:	f7fe fbee 	bl	b50f8 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
			      _Category>::__copy_m(__first, __last, __result);
   b691c:	68e2      	ldr	r2, [r4, #12]
   b691e:	e9d5 0103 	ldrd	r0, r1, [r5, #12]
   b6922:	f7ff ffdb 	bl	b68dc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b6926:	f105 0118 	add.w	r1, r5, #24
	this->_M_impl._M_finish =
   b692a:	6120      	str	r0, [r4, #16]
   b692c:	f104 0018 	add.w	r0, r4, #24
   b6930:	f7fe fc58 	bl	b51e4 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6934:	e9d5 3709 	ldrd	r3, r7, [r5, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b6938:	4826      	ldr	r0, [pc, #152]	; (b69d4 <_ZN7RailwayC1ERKS_+0xdc>)
	: _M_start(), _M_finish(), _M_end_of_storage()
   b693a:	62e6      	str	r6, [r4, #44]	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b693c:	1aff      	subs	r7, r7, r3
   b693e:	10bb      	asrs	r3, r7, #2
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6940:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b6944:	4358      	muls	r0, r3
   b6946:	f7fd fbcf 	bl	b40e8 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b694a:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b694e:	4407      	add	r7, r0
   b6950:	62e7      	str	r7, [r4, #44]	; 0x2c
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b6952:	e9d5 7809 	ldrd	r7, r8, [r5, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b6956:	4606      	mov	r6, r0
   b6958:	45b8      	cmp	r8, r7
   b695a:	d007      	beq.n	b696c <_ZN7RailwayC1ERKS_+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b695c:	b11e      	cbz	r6, b6966 <_ZN7RailwayC1ERKS_+0x6e>
   b695e:	4639      	mov	r1, r7
   b6960:	4630      	mov	r0, r6
   b6962:	f7fe fc3f 	bl	b51e4 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b6966:	360c      	adds	r6, #12
   b6968:	370c      	adds	r7, #12
   b696a:	e7f5      	b.n	b6958 <_ZN7RailwayC1ERKS_+0x60>
	this->_M_impl._M_finish =
   b696c:	62a6      	str	r6, [r4, #40]	; 0x28
   b696e:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b6972:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b6976:	f7fd fc2f 	bl	b41d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b697a:	e9d5 3712 	ldrd	r3, r7, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b697e:	4815      	ldr	r0, [pc, #84]	; (b69d4 <_ZN7RailwayC1ERKS_+0xdc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6980:	1aff      	subs	r7, r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6982:	2300      	movs	r3, #0
   b6984:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   b6988:	6523      	str	r3, [r4, #80]	; 0x50
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b698a:	10fb      	asrs	r3, r7, #3
	this->_M_impl._M_start = this->_M_allocate(__n);
   b698c:	4358      	muls	r0, r3
   b698e:	f7fd fbf7 	bl	b4180 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b6992:	e9c4 0012 	strd	r0, r0, [r4, #72]	; 0x48
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b6996:	4407      	add	r7, r0
   b6998:	6527      	str	r7, [r4, #80]	; 0x50
   b699a:	e9d5 7812 	ldrd	r7, r8, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b699e:	4606      	mov	r6, r0
   b69a0:	45b8      	cmp	r8, r7
   b69a2:	d007      	beq.n	b69b4 <_ZN7RailwayC1ERKS_+0xbc>
   b69a4:	b11e      	cbz	r6, b69ae <_ZN7RailwayC1ERKS_+0xb6>
   b69a6:	4639      	mov	r1, r7
   b69a8:	4630      	mov	r0, r6
   b69aa:	f7fd fc15 	bl	b41d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b69ae:	3618      	adds	r6, #24
   b69b0:	3718      	adds	r7, #24
   b69b2:	e7f5      	b.n	b69a0 <_ZN7RailwayC1ERKS_+0xa8>
	this->_M_impl._M_finish =
   b69b4:	64e6      	str	r6, [r4, #76]	; 0x4c
   b69b6:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b69b8:	6563      	str	r3, [r4, #84]	; 0x54
   b69ba:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b69bc:	65a3      	str	r3, [r4, #88]	; 0x58
   b69be:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b69c0:	65e3      	str	r3, [r4, #92]	; 0x5c
   b69c2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b69c4:	6623      	str	r3, [r4, #96]	; 0x60
   b69c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   b69c8:	6663      	str	r3, [r4, #100]	; 0x64
   b69ca:	6eab      	ldr	r3, [r5, #104]	; 0x68
   b69cc:	66a3      	str	r3, [r4, #104]	; 0x68
   b69ce:	4620      	mov	r0, r4
   b69d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b69d4:	aaaaaaab 	.word	0xaaaaaaab

000b69d8 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   b69d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b69da:	e9d1 3700 	ldrd	r3, r7, [r1]
   b69de:	1aff      	subs	r7, r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b69e0:	2300      	movs	r3, #0
   b69e2:	e9c0 3300 	strd	r3, r3, [r0]
      vector(const vector& __x)
   b69e6:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b69e8:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b69ea:	480d      	ldr	r0, [pc, #52]	; (b6a20 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x48>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b69ec:	10bb      	asrs	r3, r7, #2
	this->_M_impl._M_start = this->_M_allocate(__n);
   b69ee:	4358      	muls	r0, r3
      vector(const vector& __x)
   b69f0:	460e      	mov	r6, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b69f2:	f7fd fbb3 	bl	b415c <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b69f6:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b69fa:	4407      	add	r7, r0
   b69fc:	60a7      	str	r7, [r4, #8]
   b69fe:	e9d6 6700 	ldrd	r6, r7, [r6]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b6a02:	4605      	mov	r5, r0
   b6a04:	42b7      	cmp	r7, r6
   b6a06:	d007      	beq.n	b6a18 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x40>
   b6a08:	b11d      	cbz	r5, b6a12 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x3a>
   b6a0a:	4631      	mov	r1, r6
   b6a0c:	4628      	mov	r0, r5
   b6a0e:	f7ff ff73 	bl	b68f8 <_ZN7RailwayC1ERKS_>
   b6a12:	356c      	adds	r5, #108	; 0x6c
   b6a14:	366c      	adds	r6, #108	; 0x6c
   b6a16:	e7f5      	b.n	b6a04 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x2c>
	this->_M_impl._M_finish =
   b6a18:	6065      	str	r5, [r4, #4]
      }
   b6a1a:	4620      	mov	r0, r4
   b6a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6a1e:	bf00      	nop
   b6a20:	684bda13 	.word	0x684bda13

000b6a24 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   b6a24:	b570      	push	{r4, r5, r6, lr}
   b6a26:	4605      	mov	r5, r0
   b6a28:	460e      	mov	r6, r1
   b6a2a:	4614      	mov	r4, r2
	      for (; __first != __last; ++__first, (void)++__cur)
   b6a2c:	42b5      	cmp	r5, r6
   b6a2e:	d00f      	beq.n	b6a50 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_+0x2c>
   b6a30:	b15c      	cbz	r4, b6a4a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_+0x26>
   b6a32:	4629      	mov	r1, r5
   b6a34:	4620      	mov	r0, r4
   b6a36:	f7ff ffcf 	bl	b69d8 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>
   b6a3a:	f105 010c 	add.w	r1, r5, #12
   b6a3e:	f104 000c 	add.w	r0, r4, #12
   b6a42:	f7fd fbc9 	bl	b41d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b6a46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b6a48:	6263      	str	r3, [r4, #36]	; 0x24
   b6a4a:	3528      	adds	r5, #40	; 0x28
   b6a4c:	3428      	adds	r4, #40	; 0x28
   b6a4e:	e7ed      	b.n	b6a2c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_+0x8>
	}
   b6a50:	4620      	mov	r0, r4
   b6a52:	bd70      	pop	{r4, r5, r6, pc}

000b6a54 <_ZN7RailwayaSERKS_.isra.0>:
   b6a54:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6a58:	4604      	mov	r4, r0
   b6a5a:	460d      	mov	r5, r1
   b6a5c:	f7fd fbf8 	bl	b4250 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
   b6a60:	f105 020c 	add.w	r2, r5, #12
   b6a64:	f104 030c 	add.w	r3, r4, #12
      if (&__x != this)
   b6a68:	429a      	cmp	r2, r3
   b6a6a:	d025      	beq.n	b6ab8 <_ZN7RailwayaSERKS_.isra.0+0x64>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6a6c:	e9d5 8103 	ldrd	r8, r1, [r5, #12]
			 - this->_M_impl._M_start); }
   b6a70:	68e2      	ldr	r2, [r4, #12]
   b6a72:	6963      	ldr	r3, [r4, #20]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6a74:	eba1 0608 	sub.w	r6, r1, r8
			 - this->_M_impl._M_start); }
   b6a78:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b6a7a:	429e      	cmp	r6, r3
   b6a7c:	d94a      	bls.n	b6b14 <_ZN7RailwayaSERKS_.isra.0+0xc0>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b6a7e:	2e00      	cmp	r6, #0
   b6a80:	d046      	beq.n	b6b10 <_ZN7RailwayaSERKS_.isra.0+0xbc>
	if (__n > this->_M_max_size())
   b6a82:	4b5d      	ldr	r3, [pc, #372]	; (b6bf8 <_ZN7RailwayaSERKS_.isra.0+0x1a4>)
   b6a84:	429e      	cmp	r6, r3
   b6a86:	d901      	bls.n	b6a8c <_ZN7RailwayaSERKS_.isra.0+0x38>
	  std::__throw_bad_alloc();
   b6a88:	f005 fa3e 	bl	bbf08 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6a8c:	4630      	mov	r0, r6
   b6a8e:	9101      	str	r1, [sp, #4]
   b6a90:	f7fd fb01 	bl	b4096 <_Znwj>
   b6a94:	9901      	ldr	r1, [sp, #4]
   b6a96:	4607      	mov	r7, r0
   b6a98:	463a      	mov	r2, r7
   b6a9a:	4640      	mov	r0, r8
   b6a9c:	f7ff ff1e 	bl	b68dc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b6aa0:	68e0      	ldr	r0, [r4, #12]
	if (__p)
   b6aa2:	b118      	cbz	r0, b6aac <_ZN7RailwayaSERKS_.isra.0+0x58>
			    - this->_M_impl._M_start);
   b6aa4:	6961      	ldr	r1, [r4, #20]
	::operator delete(__p
   b6aa6:	1a09      	subs	r1, r1, r0
   b6aa8:	f7fd fafd 	bl	b40a6 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b6aac:	60e7      	str	r7, [r4, #12]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b6aae:	4437      	add	r7, r6
   b6ab0:	6167      	str	r7, [r4, #20]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b6ab2:	68e3      	ldr	r3, [r4, #12]
   b6ab4:	4433      	add	r3, r6
   b6ab6:	6123      	str	r3, [r4, #16]
   b6ab8:	f105 0118 	add.w	r1, r5, #24
   b6abc:	f104 0018 	add.w	r0, r4, #24
   b6ac0:	f7fe fbd4 	bl	b526c <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
   b6ac4:	f105 0324 	add.w	r3, r5, #36	; 0x24
   b6ac8:	f104 0224 	add.w	r2, r4, #36	; 0x24
      if (&__x != this)
   b6acc:	4293      	cmp	r3, r2
   b6ace:	d045      	beq.n	b6b5c <_ZN7RailwayaSERKS_.isra.0+0x108>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6ad0:	e9d5 6a09 	ldrd	r6, sl, [r5, #36]	; 0x24
			 - this->_M_impl._M_start); }
   b6ad4:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
   b6ad8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6ada:	ebaa 0806 	sub.w	r8, sl, r6
			 - this->_M_impl._M_start); }
   b6ade:	eba3 0309 	sub.w	r3, r3, r9
	  if (__xlen > capacity())
   b6ae2:	4543      	cmp	r3, r8
   b6ae4:	d255      	bcs.n	b6b92 <_ZN7RailwayaSERKS_.isra.0+0x13e>
	  pointer __result = this->_M_allocate(__n);
   b6ae6:	4845      	ldr	r0, [pc, #276]	; (b6bfc <_ZN7RailwayaSERKS_.isra.0+0x1a8>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6ae8:	ea4f 03a8 	mov.w	r3, r8, asr #2
	  pointer __result = this->_M_allocate(__n);
   b6aec:	4358      	muls	r0, r3
   b6aee:	f7fd fafb 	bl	b40e8 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
   b6af2:	4607      	mov	r7, r0
	  _ForwardIterator __cur = __result;
   b6af4:	4681      	mov	r9, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b6af6:	45b2      	cmp	sl, r6
   b6af8:	d020      	beq.n	b6b3c <_ZN7RailwayaSERKS_.isra.0+0xe8>
   b6afa:	f1b9 0f00 	cmp.w	r9, #0
   b6afe:	d003      	beq.n	b6b08 <_ZN7RailwayaSERKS_.isra.0+0xb4>
   b6b00:	4631      	mov	r1, r6
   b6b02:	4648      	mov	r0, r9
   b6b04:	f7fe fb6e 	bl	b51e4 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b6b08:	f109 090c 	add.w	r9, r9, #12
   b6b0c:	360c      	adds	r6, #12
   b6b0e:	e7f2      	b.n	b6af6 <_ZN7RailwayaSERKS_.isra.0+0xa2>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b6b10:	4637      	mov	r7, r6
   b6b12:	e7c1      	b.n	b6a98 <_ZN7RailwayaSERKS_.isra.0+0x44>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6b14:	6923      	ldr	r3, [r4, #16]
   b6b16:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b6b18:	429e      	cmp	r6, r3
   b6b1a:	d803      	bhi.n	b6b24 <_ZN7RailwayaSERKS_.isra.0+0xd0>
   b6b1c:	4640      	mov	r0, r8
   b6b1e:	f7ff fedd 	bl	b68dc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
    { return std::uninitialized_copy(__first, __last, __result); }
   b6b22:	e7c6      	b.n	b6ab2 <_ZN7RailwayaSERKS_.isra.0+0x5e>
   b6b24:	eb08 0103 	add.w	r1, r8, r3
   b6b28:	4640      	mov	r0, r8
   b6b2a:	f7ff fed7 	bl	b68dc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b6b2e:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
   b6b32:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
   b6b36:	1a10      	subs	r0, r2, r0
   b6b38:	4418      	add	r0, r3
   b6b3a:	e7f0      	b.n	b6b1e <_ZN7RailwayaSERKS_.isra.0+0xca>
	__destroy(__first, __last);
   b6b3c:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b6b40:	f7fe faef 	bl	b5122 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	      _M_deallocate(this->_M_impl._M_start,
   b6b44:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b6b46:	b118      	cbz	r0, b6b50 <_ZN7RailwayaSERKS_.isra.0+0xfc>
			    - this->_M_impl._M_start);
   b6b48:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b6b4a:	1a09      	subs	r1, r1, r0
   b6b4c:	f7fd faab 	bl	b40a6 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b6b50:	6267      	str	r7, [r4, #36]	; 0x24
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b6b52:	4447      	add	r7, r8
   b6b54:	62e7      	str	r7, [r4, #44]	; 0x2c
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b6b56:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b6b58:	4443      	add	r3, r8
   b6b5a:	62a3      	str	r3, [r4, #40]	; 0x28
	this->_M_assign(__str);
   b6b5c:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b6b60:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b6b64:	f005 fa26 	bl	bbfb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
   b6b68:	f105 0148 	add.w	r1, r5, #72	; 0x48
   b6b6c:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b6b70:	f7fd fbc0 	bl	b42f4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
   b6b74:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b6b76:	6563      	str	r3, [r4, #84]	; 0x54
   b6b78:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b6b7a:	65a3      	str	r3, [r4, #88]	; 0x58
   b6b7c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b6b7e:	65e3      	str	r3, [r4, #92]	; 0x5c
   b6b80:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b6b82:	6623      	str	r3, [r4, #96]	; 0x60
   b6b84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   b6b86:	6663      	str	r3, [r4, #100]	; 0x64
   b6b88:	6eab      	ldr	r3, [r5, #104]	; 0x68
   b6b8a:	66a3      	str	r3, [r4, #104]	; 0x68
   b6b8c:	b002      	add	sp, #8
   b6b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6b92:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   b6b94:	eba7 0709 	sub.w	r7, r7, r9
	  else if (size() >= __xlen)
   b6b98:	45b8      	cmp	r8, r7
   b6b9a:	d80d      	bhi.n	b6bb8 <_ZN7RailwayaSERKS_.isra.0+0x164>
   b6b9c:	4630      	mov	r0, r6
   b6b9e:	464a      	mov	r2, r9
   b6ba0:	4651      	mov	r1, sl
   b6ba2:	f7fe fb9b 	bl	b52dc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      : _M_current(__i) { }
   b6ba6:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b6ba8:	4606      	mov	r6, r0
	  for (; __first != __last; ++__first)
   b6baa:	42b7      	cmp	r7, r6
   b6bac:	d0d3      	beq.n	b6b56 <_ZN7RailwayaSERKS_.isra.0+0x102>
      }
   b6bae:	4630      	mov	r0, r6
   b6bb0:	f7fd fe3c 	bl	b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   b6bb4:	360c      	adds	r6, #12
	return *this;
   b6bb6:	e7f8      	b.n	b6baa <_ZN7RailwayaSERKS_.isra.0+0x156>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6bb8:	4b10      	ldr	r3, [pc, #64]	; (b6bfc <_ZN7RailwayaSERKS_.isra.0+0x1a8>)
   b6bba:	10bf      	asrs	r7, r7, #2
   b6bbc:	435f      	muls	r7, r3
   b6bbe:	2f00      	cmp	r7, #0
   b6bc0:	dd08      	ble.n	b6bd4 <_ZN7RailwayaSERKS_.isra.0+0x180>
	      *__result = *__first;
   b6bc2:	4631      	mov	r1, r6
   b6bc4:	4648      	mov	r0, r9
   b6bc6:	f7fe fb51 	bl	b526c <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	      ++__first;
   b6bca:	360c      	adds	r6, #12
	      ++__result;
   b6bcc:	f109 090c 	add.w	r9, r9, #12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6bd0:	3f01      	subs	r7, #1
   b6bd2:	e7f4      	b.n	b6bbe <_ZN7RailwayaSERKS_.isra.0+0x16a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6bd4:	e9d4 6709 	ldrd	r6, r7, [r4, #36]	; 0x24
   b6bd8:	1bb9      	subs	r1, r7, r6
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b6bda:	6a6e      	ldr	r6, [r5, #36]	; 0x24
					  __x._M_impl._M_finish,
   b6bdc:	f8d5 9028 	ldr.w	r9, [r5, #40]	; 0x28
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b6be0:	440e      	add	r6, r1
	      for (; __first != __last; ++__first, (void)++__cur)
   b6be2:	45b1      	cmp	r9, r6
   b6be4:	d0b7      	beq.n	b6b56 <_ZN7RailwayaSERKS_.isra.0+0x102>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6be6:	b11f      	cbz	r7, b6bf0 <_ZN7RailwayaSERKS_.isra.0+0x19c>
   b6be8:	4631      	mov	r1, r6
   b6bea:	4638      	mov	r0, r7
   b6bec:	f7fe fafa 	bl	b51e4 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b6bf0:	360c      	adds	r6, #12
   b6bf2:	370c      	adds	r7, #12
   b6bf4:	e7f5      	b.n	b6be2 <_ZN7RailwayaSERKS_.isra.0+0x18e>
   b6bf6:	bf00      	nop
   b6bf8:	7ffffffc 	.word	0x7ffffffc
   b6bfc:	aaaaaaab 	.word	0xaaaaaaab

000b6c00 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b6c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6c04:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b6c06:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6c08:	480b      	ldr	r0, [pc, #44]	; (b6c38 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x38>)
   b6c0a:	10a4      	asrs	r4, r4, #2
   b6c0c:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b6c0e:	4616      	mov	r6, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6c10:	4627      	mov	r7, r4
   b6c12:	4690      	mov	r8, r2
   b6c14:	2f00      	cmp	r7, #0
   b6c16:	dd08      	ble.n	b6c2a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x2a>
	      *__result = *__first;
   b6c18:	4629      	mov	r1, r5
   b6c1a:	4640      	mov	r0, r8
   b6c1c:	f7ff ff1a 	bl	b6a54 <_ZN7RailwayaSERKS_.isra.0>
	      ++__first;
   b6c20:	356c      	adds	r5, #108	; 0x6c
	      ++__result;
   b6c22:	f108 086c 	add.w	r8, r8, #108	; 0x6c
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6c26:	3f01      	subs	r7, #1
   b6c28:	e7f4      	b.n	b6c14 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x14>
	  return __result;
   b6c2a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b6c2e:	206c      	movs	r0, #108	; 0x6c
   b6c30:	fb00 6004 	mla	r0, r0, r4, r6
   b6c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6c38:	684bda13 	.word	0x684bda13

000b6c3c <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>:
      if (&__x != this)
   b6c3c:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b6c3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6c42:	4604      	mov	r4, r0
   b6c44:	460f      	mov	r7, r1
      if (&__x != this)
   b6c46:	d02c      	beq.n	b6ca2 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x66>
   b6c48:	e9d1 5a00 	ldrd	r5, sl, [r1]
			 - this->_M_impl._M_start); }
   b6c4c:	f8d0 9000 	ldr.w	r9, [r0]
   b6c50:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6c52:	ebaa 0805 	sub.w	r8, sl, r5
			 - this->_M_impl._M_start); }
   b6c56:	eba3 0309 	sub.w	r3, r3, r9
	  if (__xlen > capacity())
   b6c5a:	4543      	cmp	r3, r8
   b6c5c:	d223      	bcs.n	b6ca6 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x6a>
	  pointer __result = this->_M_allocate(__n);
   b6c5e:	482a      	ldr	r0, [pc, #168]	; (b6d08 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xcc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6c60:	ea4f 03a8 	mov.w	r3, r8, asr #2
	  pointer __result = this->_M_allocate(__n);
   b6c64:	4358      	muls	r0, r3
   b6c66:	f7fd fa79 	bl	b415c <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>
   b6c6a:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   b6c6c:	4607      	mov	r7, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b6c6e:	45aa      	cmp	sl, r5
   b6c70:	d007      	beq.n	b6c82 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x46>
   b6c72:	b11f      	cbz	r7, b6c7c <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x40>
   b6c74:	4629      	mov	r1, r5
   b6c76:	4638      	mov	r0, r7
   b6c78:	f7ff fe3e 	bl	b68f8 <_ZN7RailwayC1ERKS_>
   b6c7c:	376c      	adds	r7, #108	; 0x6c
   b6c7e:	356c      	adds	r5, #108	; 0x6c
   b6c80:	e7f5      	b.n	b6c6e <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x32>
	__destroy(__first, __last);
   b6c82:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6c86:	f7fe fa77 	bl	b5178 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	      _M_deallocate(this->_M_impl._M_start,
   b6c8a:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b6c8c:	b118      	cbz	r0, b6c96 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x5a>
			    - this->_M_impl._M_start);
   b6c8e:	68a1      	ldr	r1, [r4, #8]
   b6c90:	1a09      	subs	r1, r1, r0
   b6c92:	f7fd fa08 	bl	b40a6 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b6c96:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b6c98:	4446      	add	r6, r8
   b6c9a:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b6c9c:	6823      	ldr	r3, [r4, #0]
   b6c9e:	4443      	add	r3, r8
   b6ca0:	6063      	str	r3, [r4, #4]
    }
   b6ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6ca6:	6846      	ldr	r6, [r0, #4]
   b6ca8:	eba6 0609 	sub.w	r6, r6, r9
	  else if (size() >= __xlen)
   b6cac:	45b0      	cmp	r8, r6
   b6cae:	d80d      	bhi.n	b6ccc <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x90>
			      _Category>::__copy_m(__first, __last, __result);
   b6cb0:	4628      	mov	r0, r5
   b6cb2:	464a      	mov	r2, r9
   b6cb4:	4651      	mov	r1, sl
   b6cb6:	f7ff ffa3 	bl	b6c00 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
      : _M_current(__i) { }
   b6cba:	6866      	ldr	r6, [r4, #4]
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b6cbc:	4605      	mov	r5, r0
	  for (; __first != __last; ++__first)
   b6cbe:	42ae      	cmp	r6, r5
   b6cc0:	d0ec      	beq.n	b6c9c <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x60>
      __pointer->~_Tp();
   b6cc2:	4628      	mov	r0, r5
   b6cc4:	f7fe fa38 	bl	b5138 <_ZN7RailwayD1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   b6cc8:	356c      	adds	r5, #108	; 0x6c
	return *this;
   b6cca:	e7f8      	b.n	b6cbe <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x82>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6ccc:	4b0e      	ldr	r3, [pc, #56]	; (b6d08 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xcc>)
   b6cce:	10b6      	asrs	r6, r6, #2
   b6cd0:	435e      	muls	r6, r3
   b6cd2:	2e00      	cmp	r6, #0
   b6cd4:	dd08      	ble.n	b6ce8 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xac>
	      *__result = *__first;
   b6cd6:	4629      	mov	r1, r5
   b6cd8:	4648      	mov	r0, r9
   b6cda:	f7ff febb 	bl	b6a54 <_ZN7RailwayaSERKS_.isra.0>
	      ++__first;
   b6cde:	356c      	adds	r5, #108	; 0x6c
	      ++__result;
   b6ce0:	f109 096c 	add.w	r9, r9, #108	; 0x6c
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6ce4:	3e01      	subs	r6, #1
   b6ce6:	e7f4      	b.n	b6cd2 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x96>
   b6ce8:	e9d4 5600 	ldrd	r5, r6, [r4]
   b6cec:	1b71      	subs	r1, r6, r5
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b6cee:	683d      	ldr	r5, [r7, #0]
					  __x._M_impl._M_finish,
   b6cf0:	687f      	ldr	r7, [r7, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b6cf2:	440d      	add	r5, r1
   b6cf4:	42af      	cmp	r7, r5
   b6cf6:	d0d1      	beq.n	b6c9c <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x60>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6cf8:	b11e      	cbz	r6, b6d02 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xc6>
   b6cfa:	4629      	mov	r1, r5
   b6cfc:	4630      	mov	r0, r6
   b6cfe:	f7ff fdfb 	bl	b68f8 <_ZN7RailwayC1ERKS_>
   b6d02:	356c      	adds	r5, #108	; 0x6c
   b6d04:	366c      	adds	r6, #108	; 0x6c
   b6d06:	e7f5      	b.n	b6cf4 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xb8>
   b6d08:	684bda13 	.word	0x684bda13

000b6d0c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b6d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6d10:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b6d12:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6d14:	4810      	ldr	r0, [pc, #64]	; (b6d58 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_+0x4c>)
   b6d16:	10e4      	asrs	r4, r4, #3
   b6d18:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b6d1a:	4617      	mov	r7, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6d1c:	46a0      	mov	r8, r4
   b6d1e:	4616      	mov	r6, r2
   b6d20:	f1b8 0f00 	cmp.w	r8, #0
   b6d24:	dd10      	ble.n	b6d48 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_+0x3c>
   b6d26:	4629      	mov	r1, r5
   b6d28:	4630      	mov	r0, r6
   b6d2a:	f7ff ff87 	bl	b6c3c <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>
   b6d2e:	f105 010c 	add.w	r1, r5, #12
   b6d32:	f106 000c 	add.w	r0, r6, #12
   b6d36:	f005 f93d 	bl	bbfb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
   b6d3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b6d3c:	6273      	str	r3, [r6, #36]	; 0x24
	      ++__first;
   b6d3e:	3528      	adds	r5, #40	; 0x28
	      ++__result;
   b6d40:	3628      	adds	r6, #40	; 0x28
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6d42:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b6d46:	e7eb      	b.n	b6d20 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_+0x14>
	  return __result;
   b6d48:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b6d4c:	2028      	movs	r0, #40	; 0x28
   b6d4e:	fb00 7004 	mla	r0, r0, r4, r7
   b6d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6d56:	bf00      	nop
   b6d58:	cccccccd 	.word	0xcccccccd

000b6d5c <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0>:
      vector<_Tp, _Alloc>::
   b6d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      return __last - __first;
   b6d60:	eba2 0801 	sub.w	r8, r2, r1
			 - this->_M_impl._M_start); }
   b6d64:	6883      	ldr	r3, [r0, #8]
   b6d66:	4617      	mov	r7, r2
   b6d68:	6802      	ldr	r2, [r0, #0]
   b6d6a:	1a9b      	subs	r3, r3, r2
	if (__len > capacity())
   b6d6c:	4598      	cmp	r8, r3
      vector<_Tp, _Alloc>::
   b6d6e:	4604      	mov	r4, r0
   b6d70:	460e      	mov	r6, r1
	if (__len > capacity())
   b6d72:	d92a      	bls.n	b6dca <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x6e>
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b6d74:	4b26      	ldr	r3, [pc, #152]	; (b6e10 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xb4>)
   b6d76:	4598      	cmp	r8, r3
   b6d78:	d902      	bls.n	b6d80 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x24>
	  __throw_length_error(
   b6d7a:	4826      	ldr	r0, [pc, #152]	; (b6e14 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xb8>)
   b6d7c:	f005 f8ca 	bl	bbf14 <_ZSt20__throw_length_errorPKc>
	  pointer __result = this->_M_allocate(__n);
   b6d80:	4825      	ldr	r0, [pc, #148]	; (b6e18 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xbc>)
   b6d82:	ea4f 03a8 	mov.w	r3, r8, asr #2
   b6d86:	4358      	muls	r0, r3
   b6d88:	f7fd f9e8 	bl	b415c <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>
   b6d8c:	4605      	mov	r5, r0
	  _ForwardIterator __cur = __result;
   b6d8e:	4681      	mov	r9, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b6d90:	42b7      	cmp	r7, r6
   b6d92:	d00a      	beq.n	b6daa <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x4e>
   b6d94:	f1b9 0f00 	cmp.w	r9, #0
   b6d98:	d003      	beq.n	b6da2 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x46>
   b6d9a:	4631      	mov	r1, r6
   b6d9c:	4648      	mov	r0, r9
   b6d9e:	f7ff fdab 	bl	b68f8 <_ZN7RailwayC1ERKS_>
   b6da2:	366c      	adds	r6, #108	; 0x6c
   b6da4:	f109 096c 	add.w	r9, r9, #108	; 0x6c
   b6da8:	e7f2      	b.n	b6d90 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x34>
	__destroy(__first, __last);
   b6daa:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6dae:	f7fe f9e3 	bl	b5178 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	    _M_deallocate(this->_M_impl._M_start,
   b6db2:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b6db4:	b118      	cbz	r0, b6dbe <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x62>
			  - this->_M_impl._M_start);
   b6db6:	68a1      	ldr	r1, [r4, #8]
   b6db8:	1a09      	subs	r1, r1, r0
   b6dba:	f7fd f974 	bl	b40a6 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
   b6dbe:	6025      	str	r5, [r4, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b6dc0:	4445      	add	r5, r8
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b6dc2:	e9c4 5501 	strd	r5, r5, [r4, #4]
	      std::__uninitialized_copy_a(__mid, __last,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
	  }
      }
   b6dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6dca:	6845      	ldr	r5, [r0, #4]
   b6dcc:	1aad      	subs	r5, r5, r2
	else if (size() >= __len)
   b6dce:	45a8      	cmp	r8, r5
   b6dd0:	d80b      	bhi.n	b6dea <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x8e>
			      _Category>::__copy_m(__first, __last, __result);
   b6dd2:	4639      	mov	r1, r7
   b6dd4:	4630      	mov	r0, r6
   b6dd6:	f7ff ff13 	bl	b6c00 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b6dda:	6861      	ldr	r1, [r4, #4]
   b6ddc:	4288      	cmp	r0, r1
   b6dde:	4605      	mov	r5, r0
   b6de0:	d0f1      	beq.n	b6dc6 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x6a>
   b6de2:	f7fe f9c9 	bl	b5178 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	    this->_M_impl._M_finish = __pos;
   b6de6:	6065      	str	r5, [r4, #4]
   b6de8:	e7ed      	b.n	b6dc6 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x6a>
	__i += __n;
   b6dea:	440d      	add	r5, r1
   b6dec:	4630      	mov	r0, r6
   b6dee:	4629      	mov	r1, r5
   b6df0:	f7ff ff06 	bl	b6c00 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6df4:	6866      	ldr	r6, [r4, #4]
   b6df6:	42af      	cmp	r7, r5
   b6df8:	d007      	beq.n	b6e0a <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xae>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6dfa:	b11e      	cbz	r6, b6e04 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xa8>
   b6dfc:	4629      	mov	r1, r5
   b6dfe:	4630      	mov	r0, r6
   b6e00:	f7ff fd7a 	bl	b68f8 <_ZN7RailwayC1ERKS_>
   b6e04:	356c      	adds	r5, #108	; 0x6c
   b6e06:	366c      	adds	r6, #108	; 0x6c
   b6e08:	e7f5      	b.n	b6df6 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x9a>
	    this->_M_impl._M_finish =
   b6e0a:	6066      	str	r6, [r4, #4]
      }
   b6e0c:	e7db      	b.n	b6dc6 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x6a>
   b6e0e:	bf00      	nop
   b6e10:	7fffffa4 	.word	0x7fffffa4
   b6e14:	000bf117 	.word	0x000bf117
   b6e18:	684bda13 	.word	0x684bda13

000b6e1c <setup>:
void setup(){
   b6e1c:	b570      	push	{r4, r5, r6, lr}
   b6e1e:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
  Serial.begin(9600);
   b6e22:	f004 febd 	bl	bbba0 <_Z16_fetch_usbserialv>
   b6e26:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6e2a:	f004 fead 	bl	bbb88 <_ZN9USBSerial5beginEl>
  delay(500);
   b6e2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b6e32:	f002 fd29 	bl	b9888 <delay>
  BLE.on();
   b6e36:	f003 f893 	bl	b9f60 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6e3a:	f003 f8db 	bl	b9ff4 <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   b6e3e:	f003 f88f 	bl	b9f60 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6e42:	4a99      	ldr	r2, [pc, #612]	; (b70a8 <setup+0x28c>)
   b6e44:	4d99      	ldr	r5, [pc, #612]	; (b70ac <setup+0x290>)
   b6e46:	4601      	mov	r1, r0
   b6e48:	a817      	add	r0, sp, #92	; 0x5c
   b6e4a:	f003 fdbd 	bl	ba9c8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b6e4e:	a817      	add	r0, sp, #92	; 0x5c
   b6e50:	f003 f977 	bl	ba142 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   b6e54:	f003 f884 	bl	b9f60 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6e58:	4a95      	ldr	r2, [pc, #596]	; (b70b0 <setup+0x294>)
   b6e5a:	4601      	mov	r1, r0
   b6e5c:	a817      	add	r0, sp, #92	; 0x5c
   b6e5e:	f003 fdb3 	bl	ba9c8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b6e62:	a817      	add	r0, sp, #92	; 0x5c
   b6e64:	f003 f96d 	bl	ba142 <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData data;
   b6e68:	a802      	add	r0, sp, #8
   b6e6a:	f003 faa0 	bl	ba3ae <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   b6e6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6e70:	ac11      	add	r4, sp, #68	; 0x44
   b6e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6e74:	682e      	ldr	r6, [r5, #0]
   b6e76:	6026      	str	r6, [r4, #0]
        BleUuid tempUUID(uuid);
   b6e78:	ad11      	add	r5, sp, #68	; 0x44
   b6e7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6e7c:	ac17      	add	r4, sp, #92	; 0x5c
   b6e7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b6e80:	a817      	add	r0, sp, #92	; 0x5c
        BleUuid tempUUID(uuid);
   b6e82:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b6e84:	f002 fe6e 	bl	b9b64 <_ZNK8particle7BleUuid4typeEv>
   b6e88:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b6e8a:	a817      	add	r0, sp, #92	; 0x5c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b6e8c:	2c00      	cmp	r4, #0
   b6e8e:	f040 80e6 	bne.w	b705e <setup+0x242>
            uint16_t uuid16 = tempUUID.shorted();
   b6e92:	f002 fe83 	bl	b9b9c <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b6e96:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b6e98:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b6e9c:	2302      	movs	r3, #2
   b6e9e:	aa0b      	add	r2, sp, #44	; 0x2c
   b6ea0:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b6ea2:	a802      	add	r0, sp, #8
   b6ea4:	f003 fa78 	bl	ba398 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   b6ea8:	f003 f85a 	bl	b9f60 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6eac:	2200      	movs	r2, #0
   b6eae:	a902      	add	r1, sp, #8
   b6eb0:	f003 f8ea 	bl	ba088 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  acquireWireBuffer();
   b6eb4:	a817      	add	r0, sp, #92	; 0x5c
   b6eb6:	f7fd fc3d 	bl	b4734 <_Z17acquireWireBufferv>
  request.hostname = "trek.thewcl.com";
   b6eba:	4c7e      	ldr	r4, [pc, #504]	; (b70b4 <setup+0x298>)

    //loopIndex must point to either the first or last checkpoint, tripleIndex cannot be 0
    void setLoopIndex(int triple, int loop){
        tripleIndex = triple;
   b6ebc:	4e7e      	ldr	r6, [pc, #504]	; (b70b8 <setup+0x29c>)
  Wire.begin();
   b6ebe:	f004 ffbd 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b6ec2:	f003 ff0d 	bl	bace0 <_ZN7TwoWire5beginEv>
  vl.begin();
   b6ec6:	2100      	movs	r1, #0
   b6ec8:	487c      	ldr	r0, [pc, #496]	; (b70bc <setup+0x2a0>)
   b6eca:	f001 fdb6 	bl	b8a3a <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
  request.hostname = "trek.thewcl.com";
   b6ece:	497c      	ldr	r1, [pc, #496]	; (b70c0 <setup+0x2a4>)
   b6ed0:	4620      	mov	r0, r4
   b6ed2:	f004 f9cc 	bl	bb26e <_ZN6StringaSEPKc>
  request.port = 80;
   b6ed6:	2350      	movs	r3, #80	; 0x50
   b6ed8:	497a      	ldr	r1, [pc, #488]	; (b70c4 <setup+0x2a8>)
   b6eda:	63a3      	str	r3, [r4, #56]	; 0x38
   b6edc:	4c7a      	ldr	r4, [pc, #488]	; (b70c8 <setup+0x2ac>)
        loopIndex = loop;
   b6ede:	2502      	movs	r5, #2
   b6ee0:	2006      	movs	r0, #6
   b6ee2:	e9c1 5015 	strd	r5, r0, [r1, #84]	; 0x54
   b6ee6:	e9c4 5015 	strd	r5, r0, [r4, #84]	; 0x54
        tripleIndex = triple;
   b6eea:	4d78      	ldr	r5, [pc, #480]	; (b70cc <setup+0x2b0>)
        loopIndex = loop;
   b6eec:	2203      	movs	r2, #3
   b6eee:	2307      	movs	r3, #7
  ctaRailways = {brownLineCTA, orangeLineCTA, pinkLineCTA, purpleLineCTA, greenLineCTA};
   b6ef0:	a817      	add	r0, sp, #92	; 0x5c
   b6ef2:	e9c5 2315 	strd	r2, r3, [r5, #84]	; 0x54
   b6ef6:	e9c6 2315 	strd	r2, r3, [r6, #84]	; 0x54
   b6efa:	f7ff fcfd 	bl	b68f8 <_ZN7RailwayC1ERKS_>
   b6efe:	4631      	mov	r1, r6
   b6f00:	a832      	add	r0, sp, #200	; 0xc8
   b6f02:	f7ff fcf9 	bl	b68f8 <_ZN7RailwayC1ERKS_>
   b6f06:	4629      	mov	r1, r5
   b6f08:	a84d      	add	r0, sp, #308	; 0x134
   b6f0a:	f7ff fcf5 	bl	b68f8 <_ZN7RailwayC1ERKS_>
   b6f0e:	4621      	mov	r1, r4
   b6f10:	a868      	add	r0, sp, #416	; 0x1a0
   b6f12:	f7ff fcf1 	bl	b68f8 <_ZN7RailwayC1ERKS_>
   b6f16:	496e      	ldr	r1, [pc, #440]	; (b70d0 <setup+0x2b4>)
   b6f18:	a883      	add	r0, sp, #524	; 0x20c
   b6f1a:	f7ff fced 	bl	b68f8 <_ZN7RailwayC1ERKS_>
	this->_M_assign_aux(__l.begin(), __l.end(),
   b6f1e:	486d      	ldr	r0, [pc, #436]	; (b70d4 <setup+0x2b8>)
   b6f20:	aa9e      	add	r2, sp, #632	; 0x278
   b6f22:	a917      	add	r1, sp, #92	; 0x5c
   b6f24:	f7ff ff1a 	bl	b6d5c <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0>
   b6f28:	2404      	movs	r4, #4
   b6f2a:	256c      	movs	r5, #108	; 0x6c
   b6f2c:	ab17      	add	r3, sp, #92	; 0x5c
   b6f2e:	fb05 3004 	mla	r0, r5, r4, r3
   b6f32:	f7fe f901 	bl	b5138 <_ZN7RailwayD1Ev>
   b6f36:	3c01      	subs	r4, #1
   b6f38:	d2f8      	bcs.n	b6f2c <setup+0x110>
  mbtaRailways = {redLineMBTA, greenLine1MBTA, greenLine2MBTA, blueLineMBTA, orangeLineMBTA};
   b6f3a:	4967      	ldr	r1, [pc, #412]	; (b70d8 <setup+0x2bc>)
   b6f3c:	a817      	add	r0, sp, #92	; 0x5c
   b6f3e:	f7ff fcdb 	bl	b68f8 <_ZN7RailwayC1ERKS_>
   b6f42:	4966      	ldr	r1, [pc, #408]	; (b70dc <setup+0x2c0>)
   b6f44:	a832      	add	r0, sp, #200	; 0xc8
   b6f46:	f7ff fcd7 	bl	b68f8 <_ZN7RailwayC1ERKS_>
   b6f4a:	4965      	ldr	r1, [pc, #404]	; (b70e0 <setup+0x2c4>)
   b6f4c:	a84d      	add	r0, sp, #308	; 0x134
   b6f4e:	f7ff fcd3 	bl	b68f8 <_ZN7RailwayC1ERKS_>
   b6f52:	4964      	ldr	r1, [pc, #400]	; (b70e4 <setup+0x2c8>)
   b6f54:	a868      	add	r0, sp, #416	; 0x1a0
   b6f56:	f7ff fccf 	bl	b68f8 <_ZN7RailwayC1ERKS_>
   b6f5a:	4963      	ldr	r1, [pc, #396]	; (b70e8 <setup+0x2cc>)
   b6f5c:	a883      	add	r0, sp, #524	; 0x20c
   b6f5e:	f7ff fccb 	bl	b68f8 <_ZN7RailwayC1ERKS_>
   b6f62:	4862      	ldr	r0, [pc, #392]	; (b70ec <setup+0x2d0>)
   b6f64:	aa9e      	add	r2, sp, #632	; 0x278
   b6f66:	a917      	add	r1, sp, #92	; 0x5c
   b6f68:	f7ff fef8 	bl	b6d5c <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0>
   b6f6c:	2404      	movs	r4, #4
   b6f6e:	256c      	movs	r5, #108	; 0x6c
   b6f70:	ab17      	add	r3, sp, #92	; 0x5c
   b6f72:	fb05 3004 	mla	r0, r5, r4, r3
   b6f76:	f7fe f8df 	bl	b5138 <_ZN7RailwayD1Ev>
   b6f7a:	3c01      	subs	r4, #1
   b6f7c:	d2f8      	bcs.n	b6f70 <setup+0x154>
  cities = {City(ctaRailways, "cta", 5), City(mbtaRailways, "mbta", 5)};
   b6f7e:	4955      	ldr	r1, [pc, #340]	; (b70d4 <setup+0x2b8>)
   b6f80:	a805      	add	r0, sp, #20
   b6f82:	f7ff fd29 	bl	b69d8 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>
   b6f86:	495a      	ldr	r1, [pc, #360]	; (b70f0 <setup+0x2d4>)
   b6f88:	a80b      	add	r0, sp, #44	; 0x2c
   b6f8a:	f7fd f8bf 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6f8e:	2400      	movs	r4, #0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b6f90:	ab1c      	add	r3, sp, #112	; 0x70
        std::vector<Railway> railways;
        std::string name;
        int slaveCountExpected;

        City(std::vector<Railway> railwaysInput, std::string nameInput, int slaveCountExpectedInput){
            railways = railwaysInput;
   b6f92:	a905      	add	r1, sp, #20
   b6f94:	a817      	add	r0, sp, #92	; 0x5c
      { _M_string_length = __length; }
   b6f96:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
   b6f9a:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
   b6f9e:	9419      	str	r4, [sp, #100]	; 0x64
   b6fa0:	f88d 4070 	strb.w	r4, [sp, #112]	; 0x70
   b6fa4:	f7ff fe4a 	bl	b6c3c <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>
	this->_M_assign(__str);
   b6fa8:	a90b      	add	r1, sp, #44	; 0x2c
   b6faa:	a81a      	add	r0, sp, #104	; 0x68
   b6fac:	f005 f802 	bl	bbfb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
            name = nameInput;
            slaveCountExpected = slaveCountExpectedInput;
   b6fb0:	2505      	movs	r5, #5
   b6fb2:	494e      	ldr	r1, [pc, #312]	; (b70ec <setup+0x2d0>)
   b6fb4:	9520      	str	r5, [sp, #128]	; 0x80
   b6fb6:	a808      	add	r0, sp, #32
   b6fb8:	f7ff fd0e 	bl	b69d8 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>
   b6fbc:	494d      	ldr	r1, [pc, #308]	; (b70f4 <setup+0x2d8>)
   b6fbe:	a811      	add	r0, sp, #68	; 0x44
   b6fc0:	f7fd f8a4 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b6fc4:	ab26      	add	r3, sp, #152	; 0x98
      { _M_string_length = __length; }
   b6fc6:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
   b6fca:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
   b6fce:	9423      	str	r4, [sp, #140]	; 0x8c
   b6fd0:	f88d 4098 	strb.w	r4, [sp, #152]	; 0x98
            railways = railwaysInput;
   b6fd4:	a908      	add	r1, sp, #32
			 - this->_M_impl._M_start); }
   b6fd6:	4c48      	ldr	r4, [pc, #288]	; (b70f8 <setup+0x2dc>)
   b6fd8:	a821      	add	r0, sp, #132	; 0x84
   b6fda:	f7ff fe2f 	bl	b6c3c <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>
	this->_M_assign(__str);
   b6fde:	a911      	add	r1, sp, #68	; 0x44
   b6fe0:	a824      	add	r0, sp, #144	; 0x90
   b6fe2:	f004 ffe7 	bl	bbfb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
   b6fe6:	6822      	ldr	r2, [r4, #0]
   b6fe8:	68a3      	ldr	r3, [r4, #8]
            slaveCountExpected = slaveCountExpectedInput;
   b6fea:	952a      	str	r5, [sp, #168]	; 0xa8
   b6fec:	1a9b      	subs	r3, r3, r2
	if (__len > capacity())
   b6fee:	2b4f      	cmp	r3, #79	; 0x4f
   b6ff0:	d83d      	bhi.n	b706e <setup+0x252>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6ff2:	2050      	movs	r0, #80	; 0x50
   b6ff4:	f7fd f84f 	bl	b4096 <_Znwj>
	__uninit_copy(__first, __last, __result);
   b6ff8:	a92b      	add	r1, sp, #172	; 0xac
   b6ffa:	4602      	mov	r2, r0
   b6ffc:	4605      	mov	r5, r0
   b6ffe:	a817      	add	r0, sp, #92	; 0x5c
   b7000:	f7ff fd10 	bl	b6a24 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_>
	__destroy(__first, __last);
   b7004:	e9d4 0100 	ldrd	r0, r1, [r4]
   b7008:	f7fe f8cf 	bl	b51aa <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>
	    _M_deallocate(this->_M_impl._M_start,
   b700c:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b700e:	b118      	cbz	r0, b7018 <setup+0x1fc>
			  - this->_M_impl._M_start);
   b7010:	68a1      	ldr	r1, [r4, #8]
	::operator delete(__p
   b7012:	1a09      	subs	r1, r1, r0
   b7014:	f7fd f847 	bl	b40a6 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
   b7018:	4b37      	ldr	r3, [pc, #220]	; (b70f8 <setup+0x2dc>)
   b701a:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b701c:	3550      	adds	r5, #80	; 0x50
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b701e:	e9c3 5501 	strd	r5, r5, [r3, #4]
      { _M_dispose(); }
   b7022:	a824      	add	r0, sp, #144	; 0x90
   b7024:	f004 ffa8 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
class City{
   b7028:	a821      	add	r0, sp, #132	; 0x84
   b702a:	f7fe f8b0 	bl	b518e <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b702e:	a81a      	add	r0, sp, #104	; 0x68
   b7030:	f004 ffa2 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b7034:	a817      	add	r0, sp, #92	; 0x5c
   b7036:	f7fe f8aa 	bl	b518e <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b703a:	a811      	add	r0, sp, #68	; 0x44
   b703c:	f004 ff9c 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b7040:	a808      	add	r0, sp, #32
   b7042:	f7fe f8a4 	bl	b518e <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b7046:	a80b      	add	r0, sp, #44	; 0x2c
   b7048:	f004 ff96 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b704c:	a805      	add	r0, sp, #20
   b704e:	f7fe f89e 	bl	b518e <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b7052:	9802      	ldr	r0, [sp, #8]
   b7054:	f002 fbd0 	bl	b97f8 <free>
}
   b7058:	f50d 7d1e 	add.w	sp, sp, #632	; 0x278
   b705c:	bd70      	pop	{r4, r5, r6, pc}
   b705e:	f002 fd9f 	bl	b9ba0 <_ZNK8particle7BleUuid8rawBytesEv>
   b7062:	2300      	movs	r3, #0
   b7064:	9300      	str	r3, [sp, #0]
   b7066:	4602      	mov	r2, r0
   b7068:	2310      	movs	r3, #16
   b706a:	2107      	movs	r1, #7
   b706c:	e719      	b.n	b6ea2 <setup+0x86>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b706e:	6865      	ldr	r5, [r4, #4]
   b7070:	1aad      	subs	r5, r5, r2
	else if (size() >= __len)
   b7072:	2d4f      	cmp	r5, #79	; 0x4f
   b7074:	d90b      	bls.n	b708e <setup+0x272>
   b7076:	a92b      	add	r1, sp, #172	; 0xac
   b7078:	a817      	add	r0, sp, #92	; 0x5c
   b707a:	f7ff fe47 	bl	b6d0c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b707e:	6861      	ldr	r1, [r4, #4]
   b7080:	4288      	cmp	r0, r1
   b7082:	4605      	mov	r5, r0
   b7084:	d0cd      	beq.n	b7022 <setup+0x206>
   b7086:	f7fe f890 	bl	b51aa <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>
	    this->_M_impl._M_finish = __pos;
   b708a:	6065      	str	r5, [r4, #4]
   b708c:	e7c9      	b.n	b7022 <setup+0x206>
   b708e:	ab17      	add	r3, sp, #92	; 0x5c
   b7090:	441d      	add	r5, r3
   b7092:	4629      	mov	r1, r5
   b7094:	4618      	mov	r0, r3
   b7096:	f7ff fe39 	bl	b6d0c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_>
   b709a:	6862      	ldr	r2, [r4, #4]
   b709c:	a92b      	add	r1, sp, #172	; 0xac
   b709e:	4628      	mov	r0, r5
   b70a0:	f7ff fcc0 	bl	b6a24 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_>
	    this->_M_impl._M_finish =
   b70a4:	6060      	str	r0, [r4, #4]
   b70a6:	e7bc      	b.n	b7022 <setup+0x206>
   b70a8:	2003e6a4 	.word	0x2003e6a4
   b70ac:	20035254 	.word	0x20035254
   b70b0:	2003e68c 	.word	0x2003e68c
   b70b4:	2003e62c 	.word	0x2003e62c
   b70b8:	20037dd8 	.word	0x20037dd8
   b70bc:	2003e6b0 	.word	0x2003e6b0
   b70c0:	000bf344 	.word	0x000bf344
   b70c4:	20035378 	.word	0x20035378
   b70c8:	2003e4e8 	.word	0x2003e4e8
   b70cc:	2003e47c 	.word	0x2003e47c
   b70d0:	2003553c 	.word	0x2003553c
   b70d4:	20035458 	.word	0x20035458
   b70d8:	2003e5c0 	.word	0x2003e5c0
   b70dc:	20035464 	.word	0x20035464
   b70e0:	200354d0 	.word	0x200354d0
   b70e4:	2003530c 	.word	0x2003530c
   b70e8:	20037e44 	.word	0x20037e44
   b70ec:	20037dcc 	.word	0x20037dcc
   b70f0:	000bf354 	.word	0x000bf354
   b70f4:	000bf358 	.word	0x000bf358
   b70f8:	200353e8 	.word	0x200353e8

000b70fc <_GLOBAL__sub_I_SystemMode>:
   b70fc:	2001      	movs	r0, #1
   b70fe:	f7fe b9fb 	b.w	b54f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0>
	...

000b7104 <loop>:
void loop(){
   b7104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7108:	ed2d 8b06 	vpush	{d8-d10}
        WLanCredentials creds = credentials.getHalCredentials();
        network_set_credentials(*this, 0, &creds, NULL);
    }

    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
   b710c:	4b6c      	ldr	r3, [pc, #432]	; (b72c0 <loop+0x1bc>)
   b710e:	2200      	movs	r2, #0
   b7110:	b0b7      	sub	sp, #220	; 0xdc
   b7112:	6858      	ldr	r0, [r3, #4]
   b7114:	4611      	mov	r1, r2
   b7116:	f002 fb37 	bl	b9788 <network_has_credentials>
  if(WiFi.hasCredentials() && userInput){
   b711a:	2800      	cmp	r0, #0
   b711c:	f000 855c 	beq.w	b7bd8 <loop+0xad4>
   b7120:	4b68      	ldr	r3, [pc, #416]	; (b72c4 <loop+0x1c0>)
   b7122:	781b      	ldrb	r3, [r3, #0]
   b7124:	2b00      	cmp	r3, #0
   b7126:	f000 8557 	beq.w	b7bd8 <loop+0xad4>
    Serial.println("loop start");
   b712a:	f004 fd39 	bl	bbba0 <_Z16_fetch_usbserialv>
   b712e:	4966      	ldr	r1, [pc, #408]	; (b72c8 <loop+0x1c4>)
   b7130:	f003 ffab 	bl	bb08a <_ZN5Print7printlnEPKc>
    if(client.isConnected()){
   b7134:	4865      	ldr	r0, [pc, #404]	; (b72cc <loop+0x1c8>)
   b7136:	f001 fdfc 	bl	b8d32 <_ZN4MQTT11isConnectedEv>
   b713a:	b1d8      	cbz	r0, b7174 <loop+0x70>
      client.subscribe("loop-tracks/twitter");
   b713c:	4964      	ldr	r1, [pc, #400]	; (b72d0 <loop+0x1cc>)
   b713e:	4863      	ldr	r0, [pc, #396]	; (b72cc <loop+0x1c8>)
   b7140:	f002 f888 	bl	b9254 <_ZN4MQTT9subscribeEPKc>
      client.loop();
   b7144:	4861      	ldr	r0, [pc, #388]	; (b72cc <loop+0x1c8>)
   b7146:	f001 ff3d 	bl	b8fc4 <_ZN4MQTT4loopEv>
      Serial.println("mqtt loop");
   b714a:	f004 fd29 	bl	bbba0 <_Z16_fetch_usbserialv>
   b714e:	4961      	ldr	r1, [pc, #388]	; (b72d4 <loop+0x1d0>)
   b7150:	f003 ff9b 	bl	bb08a <_ZN5Print7printlnEPKc>
      : _M_current(__i) { }
   b7154:	4b60      	ldr	r3, [pc, #384]	; (b72d8 <loop+0x1d4>)
      Serial.printf("%i, ", i);
   b7156:	4d61      	ldr	r5, [pc, #388]	; (b72dc <loop+0x1d8>)
   b7158:	e9d3 4600 	ldrd	r4, r6, [r3]
    for(int i : sequenceArr){
   b715c:	42a6      	cmp	r6, r4
   b715e:	d00e      	beq.n	b717e <loop+0x7a>
   b7160:	f854 2b04 	ldr.w	r2, [r4], #4
   b7164:	9202      	str	r2, [sp, #8]
      Serial.printf("%i, ", i);
   b7166:	f004 fd1b 	bl	bbba0 <_Z16_fetch_usbserialv>
   b716a:	9a02      	ldr	r2, [sp, #8]
   b716c:	4629      	mov	r1, r5
   b716e:	f7fd f941 	bl	b43f4 <_ZN5Print6printfEPKcz>
	return *this;
   b7172:	e7f3      	b.n	b715c <loop+0x58>
      client.connect("sparkclient");
   b7174:	495a      	ldr	r1, [pc, #360]	; (b72e0 <loop+0x1dc>)
   b7176:	4855      	ldr	r0, [pc, #340]	; (b72cc <loop+0x1c8>)
   b7178:	f001 fecc 	bl	b8f14 <_ZN4MQTT7connectEPKc>
   b717c:	e7ea      	b.n	b7154 <loop+0x50>
    Serial.println();
   b717e:	f004 fd0f 	bl	bbba0 <_Z16_fetch_usbserialv>
   b7182:	f003 ff76 	bl	bb072 <_ZN5Print7printlnEv>
    cityIndexBuffer = cityIndex;
   b7186:	4b57      	ldr	r3, [pc, #348]	; (b72e4 <loop+0x1e0>)
   b7188:	f8df a194 	ldr.w	sl, [pc, #404]	; b7320 <loop+0x21c>
   b718c:	681b      	ldr	r3, [r3, #0]
   b718e:	f8ca 3000 	str.w	r3, [sl]
	return *(this->_M_impl._M_start + __n);
   b7192:	f8df 8190 	ldr.w	r8, [pc, #400]	; b7324 <loop+0x220>
    for(int j = 0; j < cities[cityIndexBuffer].railways.size(); j++){
   b7196:	2300      	movs	r3, #0
   b7198:	9302      	str	r3, [sp, #8]
   b719a:	f8da 2000 	ldr.w	r2, [sl]
   b719e:	f8d8 1000 	ldr.w	r1, [r8]
   b71a2:	2328      	movs	r3, #40	; 0x28
   b71a4:	435a      	muls	r2, r3
   b71a6:	188b      	adds	r3, r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b71a8:	588a      	ldr	r2, [r1, r2]
   b71aa:	685b      	ldr	r3, [r3, #4]
   b71ac:	1a9b      	subs	r3, r3, r2
   b71ae:	4a4e      	ldr	r2, [pc, #312]	; (b72e8 <loop+0x1e4>)
   b71b0:	109b      	asrs	r3, r3, #2
   b71b2:	4353      	muls	r3, r2
   b71b4:	9a02      	ldr	r2, [sp, #8]
   b71b6:	4293      	cmp	r3, r2
   b71b8:	f240 8492 	bls.w	b7ae0 <loop+0x9dc>
      Wire.lock();
   b71bc:	f004 fe3e 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b71c0:	f003 fdce 	bl	bad60 <_ZN7TwoWire4lockEv>
      uint8_t range = vl.readRange();
   b71c4:	4849      	ldr	r0, [pc, #292]	; (b72ec <loop+0x1e8>)
   b71c6:	f001 fc57 	bl	b8a78 <_ZN16Adafruit_VL6180X9readRangeEv>
   b71ca:	4604      	mov	r4, r0
      Wire.unlock();
   b71cc:	f004 fe36 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b71d0:	f003 fdcf 	bl	bad72 <_ZN7TwoWire6unlockEv>
      if (range <= 100) {
   b71d4:	2c64      	cmp	r4, #100	; 0x64
   b71d6:	d808      	bhi.n	b71ea <loop+0xe6>
        Serial.println("proximity");
   b71d8:	f004 fce2 	bl	bbba0 <_Z16_fetch_usbserialv>
   b71dc:	4944      	ldr	r1, [pc, #272]	; (b72f0 <loop+0x1ec>)
   b71de:	f003 ff54 	bl	bb08a <_ZN5Print7printlnEPKc>
        lightshow(1000);
   b71e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b71e6:	f7fd fabb 	bl	b4760 <_Z9lightshowi>
      delay(1000);
   b71ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b71ee:	f002 fb4b 	bl	b9888 <delay>
      if(cityIndex == -1){
   b71f2:	4b3c      	ldr	r3, [pc, #240]	; (b72e4 <loop+0x1e0>)
   b71f4:	681b      	ldr	r3, [r3, #0]
   b71f6:	3301      	adds	r3, #1
   b71f8:	f000 84ee 	beq.w	b7bd8 <loop+0xad4>
	StringSumHelper(const char *p) : String(p) {}
   b71fc:	493d      	ldr	r1, [pc, #244]	; (b72f4 <loop+0x1f0>)
   b71fe:	a817      	add	r0, sp, #92	; 0x5c
   b7200:	f003 ffed 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
	return *(this->_M_impl._M_start + __n);
   b7204:	f8da 2000 	ldr.w	r2, [sl]
      { return _M_dataplus._M_p; }
   b7208:	f8d8 3000 	ldr.w	r3, [r8]
   b720c:	2528      	movs	r5, #40	; 0x28
   b720e:	fb05 3302 	mla	r3, r5, r2, r3
      request.path = "/loop-tracks/" + String(cities[cityIndexBuffer].name.c_str()) + "?lines=" + String(cities[cityIndexBuffer].railways[j].name.c_str());
   b7212:	a813      	add	r0, sp, #76	; 0x4c
   b7214:	68d9      	ldr	r1, [r3, #12]
   b7216:	f003 ffe2 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
   b721a:	a913      	add	r1, sp, #76	; 0x4c
   b721c:	a817      	add	r0, sp, #92	; 0x5c
   b721e:	f004 f873 	bl	bb308 <_ZplRK15StringSumHelperRK6String>
   b7222:	4935      	ldr	r1, [pc, #212]	; (b72f8 <loop+0x1f4>)
   b7224:	f004 f87c 	bl	bb320 <_ZplRK15StringSumHelperPKc>
   b7228:	9b02      	ldr	r3, [sp, #8]
   b722a:	f8d8 2000 	ldr.w	r2, [r8]
   b722e:	246c      	movs	r4, #108	; 0x6c
   b7230:	435c      	muls	r4, r3
   b7232:	f8da 3000 	ldr.w	r3, [sl]
   b7236:	436b      	muls	r3, r5
   b7238:	4606      	mov	r6, r0
   b723a:	58d3      	ldr	r3, [r2, r3]
   b723c:	4423      	add	r3, r4
   b723e:	a81b      	add	r0, sp, #108	; 0x6c
   b7240:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b7242:	f003 ffcc 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
   b7246:	a91b      	add	r1, sp, #108	; 0x6c
   b7248:	4630      	mov	r0, r6
   b724a:	f004 f85d 	bl	bb308 <_ZplRK15StringSumHelperRK6String>
   b724e:	4601      	mov	r1, r0
   b7250:	482a      	ldr	r0, [pc, #168]	; (b72fc <loop+0x1f8>)
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   b7252:	4e2b      	ldr	r6, [pc, #172]	; (b7300 <loop+0x1fc>)
   b7254:	f003 fff4 	bl	bb240 <_ZN6StringaSERKS_>
   b7258:	a81b      	add	r0, sp, #108	; 0x6c
   b725a:	f003 ff75 	bl	bb148 <_ZN6StringD1Ev>
   b725e:	a813      	add	r0, sp, #76	; 0x4c
   b7260:	f003 ff72 	bl	bb148 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b7264:	a817      	add	r0, sp, #92	; 0x5c
   b7266:	f003 ff6f 	bl	bb148 <_ZN6StringD1Ev>
   b726a:	4b26      	ldr	r3, [pc, #152]	; (b7304 <loop+0x200>)
   b726c:	4926      	ldr	r1, [pc, #152]	; (b7308 <loop+0x204>)
   b726e:	4827      	ldr	r0, [pc, #156]	; (b730c <loop+0x208>)
   b7270:	9300      	str	r3, [sp, #0]
   b7272:	4632      	mov	r2, r6
   b7274:	4b26      	ldr	r3, [pc, #152]	; (b7310 <loop+0x20c>)
   b7276:	f000 fcf3 	bl	b7c60 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
      Serial.println("parsing");
   b727a:	f004 fc91 	bl	bbba0 <_Z16_fetch_usbserialv>
   b727e:	4925      	ldr	r1, [pc, #148]	; (b7314 <loop+0x210>)
   b7280:	f003 ff03 	bl	bb08a <_ZN5Print7printlnEPKc>
      parser.clear();
   b7284:	4824      	ldr	r0, [pc, #144]	; (b7318 <loop+0x214>)
   b7286:	f000 fe83 	bl	b7f90 <_ZN10JsonBuffer5clearEv>
	const char * c_str() const { return buffer; }
   b728a:	6871      	ldr	r1, [r6, #4]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b728c:	9103      	str	r1, [sp, #12]
   b728e:	4608      	mov	r0, r1
   b7290:	f005 fe92 	bl	bcfb8 <strlen>
   b7294:	9903      	ldr	r1, [sp, #12]
   b7296:	4602      	mov	r2, r0
   b7298:	481f      	ldr	r0, [pc, #124]	; (b7318 <loop+0x214>)
   b729a:	f000 fe5c 	bl	b7f56 <_ZN10JsonBuffer7addDataEPKcj>
      if(!parser.parse()){
   b729e:	481e      	ldr	r0, [pc, #120]	; (b7318 <loop+0x214>)
   b72a0:	f001 fa66 	bl	b8770 <_ZN10JsonParser5parseEv>
   b72a4:	9003      	str	r0, [sp, #12]
   b72a6:	2800      	cmp	r0, #0
   b72a8:	d140      	bne.n	b732c <loop+0x228>
        Serial.println("parsing failed");
   b72aa:	f004 fc79 	bl	bbba0 <_Z16_fetch_usbserialv>
   b72ae:	491b      	ldr	r1, [pc, #108]	; (b731c <loop+0x218>)
}
   b72b0:	b037      	add	sp, #220	; 0xdc
   b72b2:	ecbd 8b06 	vpop	{d8-d10}
   b72b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("parsing failed");
   b72ba:	f003 bee6 	b.w	bb08a <_ZN5Print7printlnEPKc>
   b72be:	bf00      	nop
   b72c0:	2003e718 	.word	0x2003e718
   b72c4:	2003e6ac 	.word	0x2003e6ac
   b72c8:	000bf35d 	.word	0x000bf35d
   b72cc:	200353f8 	.word	0x200353f8
   b72d0:	000bf368 	.word	0x000bf368
   b72d4:	000bf37c 	.word	0x000bf37c
   b72d8:	2003e694 	.word	0x2003e694
   b72dc:	000bf386 	.word	0x000bf386
   b72e0:	000bf20f 	.word	0x000bf20f
   b72e4:	20035040 	.word	0x20035040
   b72e8:	684bda13 	.word	0x684bda13
   b72ec:	2003e6b0 	.word	0x2003e6b0
   b72f0:	000bf38b 	.word	0x000bf38b
   b72f4:	000bf395 	.word	0x000bf395
   b72f8:	000bf3a3 	.word	0x000bf3a3
   b72fc:	2003e654 	.word	0x2003e654
   b7300:	2003e678 	.word	0x2003e678
   b7304:	000bf3ab 	.word	0x000bf3ab
   b7308:	2003e62c 	.word	0x2003e62c
   b730c:	200355b0 	.word	0x200355b0
   b7310:	20035044 	.word	0x20035044
   b7314:	000bf3af 	.word	0x000bf3af
   b7318:	20037eb0 	.word	0x20037eb0
   b731c:	000bf3b7 	.word	0x000bf3b7
   b7320:	200353f4 	.word	0x200353f4
   b7324:	200353e8 	.word	0x200353e8
   b7328:	00000000 	.word	0x00000000
   b732c:	f8da 3000 	ldr.w	r3, [sl]
   b7330:	f8d8 2000 	ldr.w	r2, [r8]
        float lat = train.key("latitude").valueFloat();
   b7334:	ed1f 9a04 	vldr	s18, [pc, #-16]	; b7328 <loop+0x224>
   b7338:	436b      	muls	r3, r5
      Railway currentRailway = cities[cityIndexBuffer].railways[j];
   b733a:	a81b      	add	r0, sp, #108	; 0x6c
   b733c:	58d1      	ldr	r1, [r2, r3]
   b733e:	4421      	add	r1, r4
   b7340:	f7ff fada 	bl	b68f8 <_ZN7RailwayC1ERKS_>
      std::vector<Checkpoint> currentCheckpoints = currentRailway.checkpoints;
   b7344:	a91b      	add	r1, sp, #108	; 0x6c
   b7346:	a807      	add	r0, sp, #28
   b7348:	f7fd fb2e 	bl	b49a8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      int count = 0;
   b734c:	f04f 0900 	mov.w	r9, #0
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b7350:	49a4      	ldr	r1, [pc, #656]	; (b75e4 <loop+0x4e0>)
   b7352:	a80d      	add	r0, sp, #52	; 0x34
   b7354:	f000 fe36 	bl	b7fc4 <_ZNK10JsonParser12getReferenceEv>
   b7358:	4aa3      	ldr	r2, [pc, #652]	; (b75e8 <loop+0x4e4>)
   b735a:	a90d      	add	r1, sp, #52	; 0x34
   b735c:	a810      	add	r0, sp, #64	; 0x40
   b735e:	f001 f801 	bl	b8364 <_ZNK13JsonReference3keyEPKc>
   b7362:	2200      	movs	r2, #0
   b7364:	a910      	add	r1, sp, #64	; 0x40
   b7366:	a813      	add	r0, sp, #76	; 0x4c
   b7368:	f000 fed0 	bl	b810c <_ZNK13JsonReference5indexEj>
   b736c:	4a9f      	ldr	r2, [pc, #636]	; (b75ec <loop+0x4e8>)
   b736e:	a913      	add	r1, sp, #76	; 0x4c
   b7370:	a817      	add	r0, sp, #92	; 0x5c
   b7372:	f000 fff7 	bl	b8364 <_ZNK13JsonReference3keyEPKc>
   b7376:	464a      	mov	r2, r9
   b7378:	a917      	add	r1, sp, #92	; 0x5c
   b737a:	a80a      	add	r0, sp, #40	; 0x28
   b737c:	f000 fec6 	bl	b810c <_ZNK13JsonReference5indexEj>
   b7380:	a817      	add	r0, sp, #92	; 0x5c
   b7382:	f000 fd97 	bl	b7eb4 <_ZN13JsonReferenceD1Ev>
   b7386:	a813      	add	r0, sp, #76	; 0x4c
   b7388:	f000 fd94 	bl	b7eb4 <_ZN13JsonReferenceD1Ev>
   b738c:	a810      	add	r0, sp, #64	; 0x40
   b738e:	f000 fd91 	bl	b7eb4 <_ZN13JsonReferenceD1Ev>
   b7392:	a80d      	add	r0, sp, #52	; 0x34
   b7394:	f000 fd8e 	bl	b7eb4 <_ZN13JsonReferenceD1Ev>
        String nextStation = train.key("next_stop").valueString();
   b7398:	4a95      	ldr	r2, [pc, #596]	; (b75f0 <loop+0x4ec>)
   b739a:	a90a      	add	r1, sp, #40	; 0x28
   b739c:	a817      	add	r0, sp, #92	; 0x5c
   b739e:	f000 ffe1 	bl	b8364 <_ZNK13JsonReference3keyEPKc>
   b73a2:	a917      	add	r1, sp, #92	; 0x5c
   b73a4:	a813      	add	r0, sp, #76	; 0x4c
   b73a6:	f000 fff7 	bl	b8398 <_ZNK13JsonReference11valueStringEv>
   b73aa:	a817      	add	r0, sp, #92	; 0x5c
   b73ac:	f000 fd82 	bl	b7eb4 <_ZN13JsonReferenceD1Ev>
        String destNm = train.key("destination").valueString();
   b73b0:	4a90      	ldr	r2, [pc, #576]	; (b75f4 <loop+0x4f0>)
   b73b2:	a90a      	add	r1, sp, #40	; 0x28
   b73b4:	a810      	add	r0, sp, #64	; 0x40
   b73b6:	f000 ffd5 	bl	b8364 <_ZNK13JsonReference3keyEPKc>
   b73ba:	a910      	add	r1, sp, #64	; 0x40
   b73bc:	a817      	add	r0, sp, #92	; 0x5c
   b73be:	f000 ffeb 	bl	b8398 <_ZNK13JsonReference11valueStringEv>
   b73c2:	a810      	add	r0, sp, #64	; 0x40
   b73c4:	f000 fd76 	bl	b7eb4 <_ZN13JsonReferenceD1Ev>
        int trainDir = train.key("direction").valueInt();
   b73c8:	4a8b      	ldr	r2, [pc, #556]	; (b75f8 <loop+0x4f4>)
   b73ca:	a90a      	add	r1, sp, #40	; 0x28
   b73cc:	a810      	add	r0, sp, #64	; 0x40
   b73ce:	f000 ffc9 	bl	b8364 <_ZNK13JsonReference3keyEPKc>
   b73d2:	2100      	movs	r1, #0
   b73d4:	a810      	add	r0, sp, #64	; 0x40
   b73d6:	f000 feb3 	bl	b8140 <_ZNK13JsonReference8valueIntEi>
   b73da:	4604      	mov	r4, r0
   b73dc:	a810      	add	r0, sp, #64	; 0x40
   b73de:	f000 fd69 	bl	b7eb4 <_ZN13JsonReferenceD1Ev>
        float lat = train.key("latitude").valueFloat();
   b73e2:	4a86      	ldr	r2, [pc, #536]	; (b75fc <loop+0x4f8>)
   b73e4:	a90a      	add	r1, sp, #40	; 0x28
   b73e6:	a810      	add	r0, sp, #64	; 0x40
   b73e8:	f000 ffbc 	bl	b8364 <_ZNK13JsonReference3keyEPKc>
   b73ec:	a810      	add	r0, sp, #64	; 0x40
   b73ee:	eeb0 0a49 	vmov.f32	s0, s18
   b73f2:	f000 feb1 	bl	b8158 <_ZNK13JsonReference10valueFloatEf>
   b73f6:	a810      	add	r0, sp, #64	; 0x40
   b73f8:	eef0 8a40 	vmov.f32	s17, s0
   b73fc:	f000 fd5a 	bl	b7eb4 <_ZN13JsonReferenceD1Ev>
        float lon = train.key("longitude").valueFloat();
   b7400:	4a7f      	ldr	r2, [pc, #508]	; (b7600 <loop+0x4fc>)
   b7402:	a90a      	add	r1, sp, #40	; 0x28
   b7404:	a810      	add	r0, sp, #64	; 0x40
   b7406:	f000 ffad 	bl	b8364 <_ZNK13JsonReference3keyEPKc>
   b740a:	a810      	add	r0, sp, #64	; 0x40
   b740c:	eeb0 0a49 	vmov.f32	s0, s18
   b7410:	f000 fea2 	bl	b8158 <_ZNK13JsonReference10valueFloatEf>
   b7414:	a810      	add	r0, sp, #64	; 0x40
   b7416:	eeb0 8a40 	vmov.f32	s16, s0
   b741a:	f000 fd4b 	bl	b7eb4 <_ZN13JsonReferenceD1Ev>
        if(nextStation.length() <= 1){
   b741e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b7420:	2b01      	cmp	r3, #1
   b7422:	f200 8084 	bhi.w	b752e <loop+0x42a>
          Serial.println("break");
   b7426:	f004 fbbb 	bl	bbba0 <_Z16_fetch_usbserialv>
   b742a:	4976      	ldr	r1, [pc, #472]	; (b7604 <loop+0x500>)
        if(cityIndexBuffer == 0 && (i == 2 || currentRailway.name == purpleLineCTA.name)){
   b742c:	4f76      	ldr	r7, [pc, #472]	; (b7608 <loop+0x504>)
          Serial.println("break");
   b742e:	f003 fe2c 	bl	bb08a <_ZN5Print7printlnEPKc>
          break;
   b7432:	a817      	add	r0, sp, #92	; 0x5c
   b7434:	f003 fe88 	bl	bb148 <_ZN6StringD1Ev>
   b7438:	a813      	add	r0, sp, #76	; 0x4c
   b743a:	f003 fe85 	bl	bb148 <_ZN6StringD1Ev>
   b743e:	a80a      	add	r0, sp, #40	; 0x28
   b7440:	f000 fd38 	bl	b7eb4 <_ZN13JsonReferenceD1Ev>
      Wire.lock();
   b7444:	f004 fcfa 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b7448:	f003 fc8a 	bl	bad60 <_ZN7TwoWire4lockEv>
      for(int i = 0; i < 4; i++){
   b744c:	9b02      	ldr	r3, [sp, #8]
   b744e:	2500      	movs	r5, #0
   b7450:	00de      	lsls	r6, r3, #3
        if(cityIndexBuffer == 0 && (i == 2 || currentRailway.name == purpleLineCTA.name)){
   b7452:	683b      	ldr	r3, [r7, #0]
   b7454:	2b00      	cmp	r3, #0
   b7456:	f040 8285 	bne.w	b7964 <loop+0x860>
   b745a:	2d02      	cmp	r5, #2
   b745c:	d006      	beq.n	b746c <loop+0x368>
   b745e:	496b      	ldr	r1, [pc, #428]	; (b760c <loop+0x508>)
   b7460:	a827      	add	r0, sp, #156	; 0x9c
   b7462:	f7fd fac5 	bl	b49f0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7466:	2800      	cmp	r0, #0
   b7468:	f000 826c 	beq.w	b7944 <loop+0x840>
          Wire.beginTransmission(brownLineCTAAdr);
   b746c:	f004 fce6 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b7470:	4b67      	ldr	r3, [pc, #412]	; (b7610 <loop+0x50c>)
   b7472:	6819      	ldr	r1, [r3, #0]
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b7474:	f003 fc6a 	bl	bad4c <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(String(currentRailway.colors[0].c_str()));
   b7478:	f004 fce0 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b747c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   b747e:	4604      	mov	r4, r0
   b7480:	6819      	ldr	r1, [r3, #0]
   b7482:	a817      	add	r0, sp, #92	; 0x5c
   b7484:	f003 feab 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
   b7488:	9917      	ldr	r1, [sp, #92]	; 0x5c
   b748a:	4620      	mov	r0, r4
   b748c:	f7fc fece 	bl	b422c <_ZN5Print5writeEPKc.isra.0>
   b7490:	a817      	add	r0, sp, #92	; 0x5c
   b7492:	f003 fe59 	bl	bb148 <_ZN6StringD1Ev>
        Wire.write(String(currentRailway.colors[1].c_str()));
   b7496:	f004 fcd1 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b749a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   b749c:	4604      	mov	r4, r0
   b749e:	6999      	ldr	r1, [r3, #24]
   b74a0:	a817      	add	r0, sp, #92	; 0x5c
   b74a2:	f003 fe9c 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
   b74a6:	9917      	ldr	r1, [sp, #92]	; 0x5c
   b74a8:	4620      	mov	r0, r4
   b74aa:	f7fc febf 	bl	b422c <_ZN5Print5writeEPKc.isra.0>
   b74ae:	a817      	add	r0, sp, #92	; 0x5c
   b74b0:	f003 fe4a 	bl	bb148 <_ZN6StringD1Ev>
        Wire.endTransmission();
   b74b4:	f004 fcc2 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b74b8:	f003 fc4f 	bl	bad5a <_ZN7TwoWire15endTransmissionEv>
        if(cityIndexBuffer == 0 && (i == 2 || currentRailway.name == purpleLineCTA.name)){
   b74bc:	683b      	ldr	r3, [r7, #0]
   b74be:	2b00      	cmp	r3, #0
   b74c0:	f040 8266 	bne.w	b7990 <loop+0x88c>
   b74c4:	2d02      	cmp	r5, #2
   b74c6:	d006      	beq.n	b74d6 <loop+0x3d2>
   b74c8:	4950      	ldr	r1, [pc, #320]	; (b760c <loop+0x508>)
   b74ca:	a827      	add	r0, sp, #156	; 0x9c
   b74cc:	f7fd fa90 	bl	b49f0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b74d0:	2800      	cmp	r0, #0
   b74d2:	f000 824d 	beq.w	b7970 <loop+0x86c>
          Wire.beginTransmission(brownLineCTAAdr);
   b74d6:	f004 fcb1 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b74da:	4b4d      	ldr	r3, [pc, #308]	; (b7610 <loop+0x50c>)
   b74dc:	6819      	ldr	r1, [r3, #0]
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b74de:	f003 fc35 	bl	bad4c <_ZN7TwoWire17beginTransmissionEi>
        if(cityIndexBuffer == 0){
   b74e2:	683c      	ldr	r4, [r7, #0]
   b74e4:	2c00      	cmp	r4, #0
   b74e6:	f040 8321 	bne.w	b7b2c <loop+0xa28>
          if(i == 2){
   b74ea:	2d02      	cmp	r5, #2
   b74ec:	f040 8285 	bne.w	b79fa <loop+0x8f6>
            if(currentRailway.name == greenLineCTA.name){
   b74f0:	4948      	ldr	r1, [pc, #288]	; (b7614 <loop+0x510>)
   b74f2:	f8df 9124 	ldr.w	r9, [pc, #292]	; b7618 <loop+0x514>
   b74f6:	a827      	add	r0, sp, #156	; 0x9c
   b74f8:	f7fd fa7a 	bl	b49f0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b74fc:	2800      	cmp	r0, #0
   b74fe:	f000 824d 	beq.w	b799c <loop+0x898>
   b7502:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7506:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   b750a:	1a9b      	subs	r3, r3, r2
   b750c:	109a      	asrs	r2, r3, #2
   b750e:	e9d1 1300 	ldrd	r1, r3, [r1]
   b7512:	1a5b      	subs	r3, r3, r1
   b7514:	109b      	asrs	r3, r3, #2
              for(int j = 0; j < brownLineCTA.outputs[0].size() + (brownLineCTA.outputs[2].size() / 2); j++){
   b7516:	eb03 0352 	add.w	r3, r3, r2, lsr #1
   b751a:	42a3      	cmp	r3, r4
   b751c:	f240 8306 	bls.w	b7b2c <loop+0xa28>
                Wire.write('0');
   b7520:	f004 fc8c 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b7524:	2130      	movs	r1, #48	; 0x30
   b7526:	f7fc fe7d 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
              for(int j = 0; j < brownLineCTA.outputs[0].size() + (brownLineCTA.outputs[2].size() / 2); j++){
   b752a:	3401      	adds	r4, #1
   b752c:	e7e9      	b.n	b7502 <loop+0x3fe>
   b752e:	e9dd 3507 	ldrd	r3, r5, [sp, #28]
   b7532:	1aed      	subs	r5, r5, r3
   b7534:	10ed      	asrs	r5, r5, #3
        for(int i = 0; i < checkpointCount; i++){
   b7536:	f04f 0b00 	mov.w	fp, #0
   b753a:	45ab      	cmp	fp, r5
	return *(this->_M_impl._M_start + __n);
   b753c:	9907      	ldr	r1, [sp, #28]
   b753e:	da3b      	bge.n	b75b8 <loop+0x4b4>
   b7540:	eb01 06cb 	add.w	r6, r1, fp, lsl #3
    }

    float getDistance(float trainLat, float trainLon){
      return sqrt(pow((trainLat - lat), 2) + pow((trainLon - lon), 2));
   b7544:	edd6 7a00 	vldr	s15, [r6]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b7548:	ee78 7ae7 	vsub.f32	s15, s17, s15
   b754c:	ee17 0a90 	vmov	r0, s15
   b7550:	f005 f912 	bl	bc778 <__aeabi_f2d>
   b7554:	edd6 7a01 	vldr	s15, [r6, #4]
   b7558:	ee78 7a67 	vsub.f32	s15, s16, s15
   b755c:	4602      	mov	r2, r0
   b755e:	460b      	mov	r3, r1
   b7560:	ee17 0a90 	vmov	r0, s15
   b7564:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b7568:	f005 f906 	bl	bc778 <__aeabi_f2d>
   b756c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b7570:	ec41 0b1a 	vmov	d10, r0, r1
   b7574:	4610      	mov	r0, r2
   b7576:	4619      	mov	r1, r3
   b7578:	f005 f956 	bl	bc828 <__aeabi_dmul>
   b757c:	ec53 2b1a 	vmov	r2, r3, d10
   b7580:	4606      	mov	r6, r0
   b7582:	460f      	mov	r7, r1
   b7584:	ee1a 0a10 	vmov	r0, s20
   b7588:	4619      	mov	r1, r3
   b758a:	f005 f94d 	bl	bc828 <__aeabi_dmul>
   b758e:	4602      	mov	r2, r0
   b7590:	460b      	mov	r3, r1
   b7592:	4630      	mov	r0, r6
   b7594:	4639      	mov	r1, r7
   b7596:	f004 ff91 	bl	bc4bc <__adddf3>
   b759a:	ec41 0b10 	vmov	d0, r0, r1
   b759e:	f004 fe81 	bl	bc2a4 <sqrt>
          currentRailway.distances[i] = currentCheckpoints[i].getDistance(lat, lon);
   b75a2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
   b75a4:	ec51 0b10 	vmov	r0, r1, d0
   b75a8:	f005 fc0e 	bl	bcdc8 <__aeabi_d2f>
   b75ac:	eb06 068b 	add.w	r6, r6, fp, lsl #2
        for(int i = 0; i < checkpointCount; i++){
   b75b0:	f10b 0b01 	add.w	fp, fp, #1
   b75b4:	6030      	str	r0, [r6, #0]
   b75b6:	e7c0      	b.n	b753a <loop+0x436>
      : _M_current(__i) { }
   b75b8:	e9dd 671e 	ldrd	r6, r7, [sp, #120]	; 0x78
    _GLIBCXX14_CONSTEXPR
    _ForwardIterator
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
		  _Compare __comp)
    {
      if (__first == __last)
   b75bc:	42be      	cmp	r6, r7
   b75be:	d02f      	beq.n	b7620 <loop+0x51c>
   b75c0:	1d32      	adds	r2, r6, #4
   b75c2:	4633      	mov	r3, r6
	return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
   b75c4:	4297      	cmp	r7, r2
	++_M_current;
   b75c6:	4610      	mov	r0, r2
   b75c8:	d02b      	beq.n	b7622 <loop+0x51e>
	if (__comp(__first, __result))
   b75ca:	edd3 7a00 	vldr	s15, [r3]
   b75ce:	ed90 7a00 	vldr	s14, [r0]
   b75d2:	eeb4 7a67 	vcmp.f32	s14, s15
   b75d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b75da:	f102 0204 	add.w	r2, r2, #4
   b75de:	bf48      	it	mi
   b75e0:	4603      	movmi	r3, r0
   b75e2:	e7ef      	b.n	b75c4 <loop+0x4c0>
   b75e4:	20037eb0 	.word	0x20037eb0
   b75e8:	000bf3c6 	.word	0x000bf3c6
   b75ec:	000bf3cc 	.word	0x000bf3cc
   b75f0:	000bf3d3 	.word	0x000bf3d3
   b75f4:	000bf3dd 	.word	0x000bf3dd
   b75f8:	000bf3e9 	.word	0x000bf3e9
   b75fc:	000bf3f3 	.word	0x000bf3f3
   b7600:	000bf3fc 	.word	0x000bf3fc
   b7604:	000bf406 	.word	0x000bf406
   b7608:	200353f4 	.word	0x200353f4
   b760c:	2003e518 	.word	0x2003e518
   b7610:	200353e4 	.word	0x200353e4
   b7614:	2003556c 	.word	0x2003556c
   b7618:	20035378 	.word	0x20035378
   b761c:	7dcccccc 	.word	0x7dcccccc
   b7620:	4633      	mov	r3, r6
        if(closestIndex == currentRailway.tripleIndex){
   b7622:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b7624:	1b9b      	subs	r3, r3, r6
   b7626:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
   b762a:	ea4f 00a3 	mov.w	r0, r3, asr #2
          closestIndex = currentRailway.loopIndex;
   b762e:	bf08      	it	eq
   b7630:	9831      	ldreq	r0, [sp, #196]	; 0xc4
   b7632:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
        x1 = currentCheckpoints[closestIndex].lat;
   b7636:	edd3 7a00 	vldr	s15, [r3]
        y1 = currentCheckpoints[closestIndex].lon;
   b763a:	edd3 6a01 	vldr	s13, [r3, #4]
        if(currentCheckpoints[closestIndex].lat > lat){
   b763e:	eef4 8ae7 	vcmpe.f32	s17, s15
   b7642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          slope = (y1 - y) / (x1 - x);
   b7646:	ee77 5ae8 	vsub.f32	s11, s15, s17
          slope = (y - y1) / (x - x1);
   b764a:	bf55      	itete	pl
   b764c:	ee38 6a66 	vsubpl.f32	s12, s16, s13
          slope = (y1 - y) / (x1 - x);
   b7650:	ee76 7ac8 	vsubmi.f32	s15, s13, s16
          slope = (y - y1) / (x - x1);
   b7654:	ee78 7ae7 	vsubpl.f32	s15, s17, s15
          slope = (y1 - y) / (x1 - x);
   b7658:	ee87 7aa5 	vdivmi.f32	s14, s15, s11
   b765c:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
          slope = (y - y1) / (x - x1);
   b7660:	bf58      	it	pl
   b7662:	ee86 7a27 	vdivpl.f32	s14, s12, s15
        if(slope == 0){
   b7666:	ed5f 7a13 	vldr	s15, [pc, #-76]	; b761c <loop+0x518>
   b766a:	eeb5 7a40 	vcmp.f32	s14, #0.0
   b766e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7672:	d00a      	beq.n	b768a <loop+0x586>
        }else if(slope >= __FLT_MAX__ / 10){
   b7674:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b7678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          perpendicularSlope = -1 / slope;
   b767c:	bfba      	itte	lt
   b767e:	eebf 6a00 	vmovlt.f32	s12, #240	; 0xbf800000 -1.0
   b7682:	eec6 7a07 	vdivlt.f32	s15, s12, s14
          perpendicularSlope = 0;
   b7686:	eef0 7a49 	vmovge.f32	s15, s18
          nearestSide = (perpendicularSlope * (currentCheckpoints[closestIndex].lat - x) + y) > currentCheckpoints[closestIndex].lon;
   b768a:	eeb0 7a48 	vmov.f32	s14, s16
   b768e:	eea7 7aa5 	vfma.f32	s14, s15, s11
   b7692:	eef4 6ac7 	vcmpe.f32	s13, s14
   b7696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b769a:	bf4c      	ite	mi
   b769c:	2701      	movmi	r7, #1
   b769e:	2700      	movpl	r7, #0
        if(closestIndex == 0){
   b76a0:	2800      	cmp	r0, #0
   b76a2:	d171      	bne.n	b7788 <loop+0x684>
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b76a4:	ed91 7a02 	vldr	s14, [r1, #8]
          if(currentRailway.loopIndex == closestIndex){
   b76a8:	f8dd c0c4 	ldr.w	ip, [sp, #196]	; 0xc4
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b76ac:	ee37 7a68 	vsub.f32	s14, s14, s17
   b76b0:	eef0 6a48 	vmov.f32	s13, s16
   b76b4:	eee7 6a27 	vfma.f32	s13, s14, s15
   b76b8:	ed91 7a03 	vldr	s14, [r1, #12]
   b76bc:	eef4 6ac7 	vcmpe.f32	s13, s14
   b76c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b76c4:	bfcc      	ite	gt
   b76c6:	2501      	movgt	r5, #1
   b76c8:	2500      	movle	r5, #0
          if(currentRailway.loopIndex == closestIndex){
   b76ca:	f1bc 0f00 	cmp.w	ip, #0
   b76ce:	d11d      	bne.n	b770c <loop+0x608>
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b76d0:	1e53      	subs	r3, r2, #1
   b76d2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
            if(nearestSide != pointSide){
   b76d6:	42bd      	cmp	r5, r7
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b76d8:	ed91 0a00 	vldr	s0, [r1]
   b76dc:	ed91 7a01 	vldr	s14, [r1, #4]
            if(nearestSide != pointSide){
   b76e0:	f040 809b 	bne.w	b781a <loop+0x716>
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b76e4:	ee70 8a68 	vsub.f32	s17, s0, s17
   b76e8:	eea8 8aa7 	vfma.f32	s16, s17, s15
   b76ec:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b76f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            }else if(nearestSide != loopPointSide){
   b76f4:	bfcc      	ite	gt
   b76f6:	2101      	movgt	r1, #1
   b76f8:	2100      	movle	r1, #0
   b76fa:	42a9      	cmp	r1, r5
              }else if(nearestSide != loopPointSide){
   b76fc:	d100      	bne.n	b7700 <loop+0x5fc>
                secondClosestIndex = currentRailway.tripleIndex + 1;
   b76fe:	1c53      	adds	r3, r2, #1
          if(closestIndex < secondClosestIndex){
   b7700:	429a      	cmp	r2, r3
   b7702:	f2c0 808c 	blt.w	b781e <loop+0x71a>
   b7706:	4611      	mov	r1, r2
   b7708:	469c      	mov	ip, r3
   b770a:	e005      	b.n	b7718 <loop+0x614>
            if(pointSide == nearestSide){
   b770c:	42bd      	cmp	r5, r7
   b770e:	d074      	beq.n	b77fa <loop+0x6f6>
   b7710:	4602      	mov	r2, r0
   b7712:	4684      	mov	ip, r0
   b7714:	2301      	movs	r3, #1
   b7716:	4619      	mov	r1, r3
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b7718:	eb06 008c 	add.w	r0, r6, ip, lsl #2
   b771c:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   b7720:	ed90 7a00 	vldr	s14, [r0]
   b7724:	edd1 7a00 	vldr	s15, [r1]
   b7728:	9821      	ldr	r0, [sp, #132]	; 0x84
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b772a:	9d35      	ldr	r5, [sp, #212]	; 0xd4
          segmentPos *= currentRailway.scalers[lowerIndex];
   b772c:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b7730:	ee77 7a27 	vadd.f32	s15, s14, s15
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b7734:	4295      	cmp	r5, r2
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b7736:	eec7 6a27 	vdiv.f32	s13, s14, s15
          segmentPos *= currentRailway.scalers[lowerIndex];
   b773a:	ee07 1a90 	vmov	s15, r1
   b773e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   b7742:	ee28 8a26 	vmul.f32	s16, s16, s13
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b7746:	db06      	blt.n	b7756 <loop+0x652>
   b7748:	9934      	ldr	r1, [sp, #208]	; 0xd0
   b774a:	4291      	cmp	r1, r2
   b774c:	dc03      	bgt.n	b7756 <loop+0x652>
   b774e:	429d      	cmp	r5, r3
   b7750:	db01      	blt.n	b7756 <loop+0x652>
   b7752:	4299      	cmp	r1, r3
   b7754:	dd66      	ble.n	b7824 <loop+0x720>
          else if(closestIndex < currentRailway.lowerLoopBound || secondClosestIndex < currentRailway.lowerLoopBound){
   b7756:	9d32      	ldr	r5, [sp, #200]	; 0xc8
   b7758:	4295      	cmp	r5, r2
   b775a:	dc66      	bgt.n	b782a <loop+0x726>
   b775c:	429d      	cmp	r5, r3
   b775e:	dc64      	bgt.n	b782a <loop+0x726>
          else if(closestIndex > currentRailway.upperLoopBound || secondClosestIndex > currentRailway.upperLoopBound){
   b7760:	9933      	ldr	r1, [sp, #204]	; 0xcc
   b7762:	4291      	cmp	r1, r2
   b7764:	db65      	blt.n	b7832 <loop+0x72e>
   b7766:	4299      	cmp	r1, r3
   b7768:	db63      	blt.n	b7832 <loop+0x72e>
            inLoop = true;
   b776a:	9b03      	ldr	r3, [sp, #12]
          else if(closestIndex > currentRailway.upperLoopBound || secondClosestIndex > currentRailway.upperLoopBound){
   b776c:	4629      	mov	r1, r5
            pcbSegment = 2;
   b776e:	2502      	movs	r5, #2
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b7770:	458c      	cmp	ip, r1
   b7772:	dd61      	ble.n	b7838 <loop+0x734>
            segmentPos += currentRailway.scalers[i];
   b7774:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   b7778:	ee07 2a90 	vmov	s15, r2
   b777c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b7780:	3101      	adds	r1, #1
            segmentPos += currentRailway.scalers[i];
   b7782:	ee38 8a27 	vadd.f32	s16, s16, s15
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b7786:	e7f3      	b.n	b7770 <loop+0x66c>
   b7788:	f1ac 0c08 	sub.w	ip, ip, #8
   b778c:	448c      	add	ip, r1
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b778e:	ed9c 7a00 	vldr	s14, [ip]
   b7792:	ee37 7a68 	vsub.f32	s14, s14, s17
   b7796:	eef0 6a48 	vmov.f32	s13, s16
   b779a:	eee7 6a27 	vfma.f32	s13, s14, s15
          if(closestIndex == checkpointCount - 1){
   b779e:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b77a2:	1e43      	subs	r3, r0, #1
   b77a4:	ed9c 7a01 	vldr	s14, [ip, #4]
   b77a8:	eef4 6ac7 	vcmpe.f32	s13, s14
   b77ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b77b0:	bfcc      	ite	gt
   b77b2:	f04f 0c01 	movgt.w	ip, #1
   b77b6:	f04f 0c00 	movle.w	ip, #0
          if(closestIndex == checkpointCount - 1){
   b77ba:	4586      	cmp	lr, r0
   b77bc:	d129      	bne.n	b7812 <loop+0x70e>
            if(closestIndex == currentRailway.loopIndex){
   b77be:	9b31      	ldr	r3, [sp, #196]	; 0xc4
   b77c0:	4283      	cmp	r3, r0
   b77c2:	d118      	bne.n	b77f6 <loop+0x6f2>
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b77c4:	1e53      	subs	r3, r2, #1
   b77c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
              if(nearestSide != pointSide){
   b77ca:	45bc      	cmp	ip, r7
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b77cc:	ed91 0a00 	vldr	s0, [r1]
   b77d0:	ed91 7a01 	vldr	s14, [r1, #4]
              if(nearestSide != pointSide){
   b77d4:	d002      	beq.n	b77dc <loop+0x6d8>
                secondClosestIndex = checkpointCount - 2;
   b77d6:	1eab      	subs	r3, r5, #2
   b77d8:	4602      	mov	r2, r0
   b77da:	e791      	b.n	b7700 <loop+0x5fc>
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b77dc:	ee70 8a68 	vsub.f32	s17, s0, s17
   b77e0:	eea8 8aa7 	vfma.f32	s16, s17, s15
   b77e4:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b77e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
              }else if(nearestSide != loopPointSide){
   b77ec:	bfcc      	ite	gt
   b77ee:	2101      	movgt	r1, #1
   b77f0:	2100      	movle	r1, #0
   b77f2:	4561      	cmp	r1, ip
   b77f4:	e782      	b.n	b76fc <loop+0x5f8>
              if(pointSide == nearestSide){
   b77f6:	45bc      	cmp	ip, r7
   b77f8:	d1ed      	bne.n	b77d6 <loop+0x6d2>
        String destNm = train.key("destination").valueString();
   b77fa:	a817      	add	r0, sp, #92	; 0x5c
   b77fc:	f003 fca4 	bl	bb148 <_ZN6StringD1Ev>
        String nextStation = train.key("next_stop").valueString();
   b7800:	a813      	add	r0, sp, #76	; 0x4c
   b7802:	f003 fca1 	bl	bb148 <_ZN6StringD1Ev>
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b7806:	a80a      	add	r0, sp, #40	; 0x28
        count++;
   b7808:	f109 0901 	add.w	r9, r9, #1
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b780c:	f000 fb52 	bl	b7eb4 <_ZN13JsonReferenceD1Ev>
   b7810:	e59e      	b.n	b7350 <loop+0x24c>
            if(pointSide == nearestSide){
   b7812:	45bc      	cmp	ip, r7
   b7814:	d1e0      	bne.n	b77d8 <loop+0x6d4>
              secondClosestIndex = closestIndex + 1;
   b7816:	1c43      	adds	r3, r0, #1
   b7818:	e7de      	b.n	b77d8 <loop+0x6d4>
   b781a:	4602      	mov	r2, r0
   b781c:	e77a      	b.n	b7714 <loop+0x610>
   b781e:	4619      	mov	r1, r3
   b7820:	4694      	mov	ip, r2
   b7822:	e779      	b.n	b7718 <loop+0x614>
        bool inLoop = false;
   b7824:	2300      	movs	r3, #0
            pcbSegment = 3;
   b7826:	2503      	movs	r5, #3
   b7828:	e7a2      	b.n	b7770 <loop+0x66c>
            lowerScaleBound = 0;
   b782a:	2100      	movs	r1, #0
        bool inLoop = false;
   b782c:	460b      	mov	r3, r1
            pcbSegment = 0;
   b782e:	460d      	mov	r5, r1
   b7830:	e79e      	b.n	b7770 <loop+0x66c>
        bool inLoop = false;
   b7832:	2300      	movs	r3, #0
            pcbSegment = 1;
   b7834:	2501      	movs	r5, #1
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b7836:	e79b      	b.n	b7770 <loop+0x66c>
          if(cityIndexBuffer == 0){
   b7838:	4aae      	ldr	r2, [pc, #696]	; (b7af4 <loop+0x9f0>)
   b783a:	9e24      	ldr	r6, [sp, #144]	; 0x90
   b783c:	6812      	ldr	r2, [r2, #0]
   b783e:	2a00      	cmp	r2, #0
   b7840:	d170      	bne.n	b7924 <loop+0x820>
            if(inLoop){
   b7842:	2b00      	cmp	r3, #0
   b7844:	d04a      	beq.n	b78dc <loop+0x7d8>
              if(currentRailway.name == pinkLineCTA.name){
   b7846:	49ac      	ldr	r1, [pc, #688]	; (b7af8 <loop+0x9f4>)
   b7848:	a827      	add	r0, sp, #156	; 0x9c
   b784a:	f7fd f8d1 	bl	b49f0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b784e:	b1f0      	cbz	r0, b788e <loop+0x78a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7850:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
   b7854:	1a9b      	subs	r3, r3, r2
   b7856:	109b      	asrs	r3, r3, #2
                segmentPos = (float)currentRailway.outputs[2].size() - segmentPos;
   b7858:	ee07 3a90 	vmov	s15, r3
   b785c:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b7860:	ee37 8ac8 	vsub.f32	s16, s15, s16
            if(pcbSegment == 1 && currentRailway.name == greenLineCTA.name){
   b7864:	2d01      	cmp	r5, #1
   b7866:	d147      	bne.n	b78f8 <loop+0x7f4>
   b7868:	49a4      	ldr	r1, [pc, #656]	; (b7afc <loop+0x9f8>)
   b786a:	a827      	add	r0, sp, #156	; 0x9c
   b786c:	f7fd f8c0 	bl	b49f0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7870:	2800      	cmp	r0, #0
   b7872:	d049      	beq.n	b7908 <loop+0x804>
   b7874:	e9d6 2303 	ldrd	r2, r3, [r6, #12]
   b7878:	1a9b      	subs	r3, r3, r2
   b787a:	109b      	asrs	r3, r3, #2
              segmentPos = (float)currentRailway.outputs[1].size() - segmentPos;
   b787c:	ee07 3a90 	vmov	s15, r3
   b7880:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b7884:	ee37 8ac8 	vsub.f32	s16, s15, s16
              trainDir = 6 - trainDir;
   b7888:	f1c4 0406 	rsb	r4, r4, #6
   b788c:	e03c      	b.n	b7908 <loop+0x804>
              }else if(currentRailway.name == orangeLineCTA.name){
   b788e:	499c      	ldr	r1, [pc, #624]	; (b7b00 <loop+0x9fc>)
   b7890:	a827      	add	r0, sp, #156	; 0x9c
   b7892:	f7fd f8ad 	bl	b49f0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7896:	b1c8      	cbz	r0, b78cc <loop+0x7c8>
	return *(this->_M_impl._M_start + __n);
   b7898:	4b9a      	ldr	r3, [pc, #616]	; (b7b04 <loop+0xa00>)
   b789a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b789c:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
   b78a0:	1ad2      	subs	r2, r2, r3
   b78a2:	1092      	asrs	r2, r2, #2
                segmentPos = (int)(segmentPos + orangeLineCTA.outputs[2].size() / 2) % orangeLineCTA.outputs[2].size();
   b78a4:	0853      	lsrs	r3, r2, #1
   b78a6:	ee07 3a90 	vmov	s15, r3
   b78aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b78ae:	ee37 8a88 	vadd.f32	s16, s15, s16
   b78b2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   b78b6:	ee17 3a90 	vmov	r3, s15
   b78ba:	fbb3 f1f2 	udiv	r1, r3, r2
   b78be:	fb02 3311 	mls	r3, r2, r1, r3
   b78c2:	ee08 3a10 	vmov	s16, r3
   b78c6:	eeb8 8a48 	vcvt.f32.u32	s16, s16
   b78ca:	e7cb      	b.n	b7864 <loop+0x760>
              }else if(currentRailway.name == purpleLineCTA.name){
   b78cc:	498e      	ldr	r1, [pc, #568]	; (b7b08 <loop+0xa04>)
   b78ce:	a827      	add	r0, sp, #156	; 0x9c
   b78d0:	f7fd f88e 	bl	b49f0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
                trainDir = 1;
   b78d4:	2800      	cmp	r0, #0
   b78d6:	bf18      	it	ne
   b78d8:	2401      	movne	r4, #1
   b78da:	e7c3      	b.n	b7864 <loop+0x760>
              if(currentRailway.name == brownLineCTA.name || currentRailway.name == purpleLineCTA.name){
   b78dc:	498b      	ldr	r1, [pc, #556]	; (b7b0c <loop+0xa08>)
   b78de:	a827      	add	r0, sp, #156	; 0x9c
   b78e0:	f7fd f886 	bl	b49f0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b78e4:	b928      	cbnz	r0, b78f2 <loop+0x7ee>
   b78e6:	4988      	ldr	r1, [pc, #544]	; (b7b08 <loop+0xa04>)
   b78e8:	a827      	add	r0, sp, #156	; 0x9c
   b78ea:	f7fd f881 	bl	b49f0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b78ee:	2800      	cmp	r0, #0
   b78f0:	d0b8      	beq.n	b7864 <loop+0x760>
                trainDir = 6 - trainDir;
   b78f2:	f1c4 0406 	rsb	r4, r4, #6
   b78f6:	e7b5      	b.n	b7864 <loop+0x760>
            if(pcbSegment == 3 && currentRailway.name == pinkLineCTA.name){
   b78f8:	2d03      	cmp	r5, #3
   b78fa:	d105      	bne.n	b7908 <loop+0x804>
   b78fc:	497e      	ldr	r1, [pc, #504]	; (b7af8 <loop+0x9f4>)
            if(currentRailway.name == orangeLineMBTA.name || currentRailway.name == greenLine1MBTA.name || currentRailway.name == redLineMBTA.name){
   b78fe:	a827      	add	r0, sp, #156	; 0x9c
   b7900:	f7fd f876 	bl	b49f0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7904:	2800      	cmp	r0, #0
   b7906:	d1bf      	bne.n	b7888 <loop+0x784>
  { return __builtin_floorf(__x); }
   b7908:	eeb0 0a48 	vmov.f32	s0, s16
   b790c:	f004 fc84 	bl	bc218 <floorf>
	return *(this->_M_impl._M_start + __n);
   b7910:	230c      	movs	r3, #12
          currentRailway.outputs[pcbSegment][(int)floor(segmentPos)] = trainDir;
   b7912:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b7916:	435d      	muls	r5, r3
   b7918:	ee10 2a10 	vmov	r2, s0
   b791c:	5973      	ldr	r3, [r6, r5]
   b791e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b7922:	e76a      	b.n	b77fa <loop+0x6f6>
          else if(cityIndexBuffer == 1){
   b7924:	2a01      	cmp	r2, #1
   b7926:	d1ef      	bne.n	b7908 <loop+0x804>
            if(currentRailway.name == orangeLineMBTA.name || currentRailway.name == greenLine1MBTA.name || currentRailway.name == redLineMBTA.name){
   b7928:	4979      	ldr	r1, [pc, #484]	; (b7b10 <loop+0xa0c>)
   b792a:	a827      	add	r0, sp, #156	; 0x9c
   b792c:	f7fd f860 	bl	b49f0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7930:	2800      	cmp	r0, #0
   b7932:	d1a9      	bne.n	b7888 <loop+0x784>
   b7934:	4977      	ldr	r1, [pc, #476]	; (b7b14 <loop+0xa10>)
   b7936:	a827      	add	r0, sp, #156	; 0x9c
   b7938:	f7fd f85a 	bl	b49f0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b793c:	2800      	cmp	r0, #0
   b793e:	d1a3      	bne.n	b7888 <loop+0x784>
   b7940:	4975      	ldr	r1, [pc, #468]	; (b7b18 <loop+0xa14>)
   b7942:	e7dc      	b.n	b78fe <loop+0x7fa>
        }else if(cityIndexBuffer == 0 && i == 3){
   b7944:	2d03      	cmp	r5, #3
   b7946:	d10d      	bne.n	b7964 <loop+0x860>
          if(currentRailway.name == orangeLineCTA.name){
   b7948:	496d      	ldr	r1, [pc, #436]	; (b7b00 <loop+0x9fc>)
   b794a:	4c74      	ldr	r4, [pc, #464]	; (b7b1c <loop+0xa18>)
   b794c:	a827      	add	r0, sp, #156	; 0x9c
   b794e:	f7fd f84f 	bl	b49f0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7952:	b118      	cbz	r0, b795c <loop+0x858>
            Wire.beginTransmission(greenLineCTAAdr[0]);
   b7954:	f004 fa72 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b7958:	6821      	ldr	r1, [r4, #0]
   b795a:	e58b      	b.n	b7474 <loop+0x370>
            Wire.beginTransmission(greenLineCTAAdr[1]);
   b795c:	f004 fa6e 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b7960:	6861      	ldr	r1, [r4, #4]
   b7962:	e587      	b.n	b7474 <loop+0x370>
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b7964:	f004 fa6a 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b7968:	4b6d      	ldr	r3, [pc, #436]	; (b7b20 <loop+0xa1c>)
   b796a:	681b      	ldr	r3, [r3, #0]
   b796c:	5999      	ldr	r1, [r3, r6]
   b796e:	e581      	b.n	b7474 <loop+0x370>
        }else if(cityIndexBuffer == 0 && i == 3){
   b7970:	2d03      	cmp	r5, #3
   b7972:	d10d      	bne.n	b7990 <loop+0x88c>
          if(currentRailway.name == orangeLineCTA.name){
   b7974:	4962      	ldr	r1, [pc, #392]	; (b7b00 <loop+0x9fc>)
   b7976:	4c69      	ldr	r4, [pc, #420]	; (b7b1c <loop+0xa18>)
   b7978:	a827      	add	r0, sp, #156	; 0x9c
   b797a:	f7fd f839 	bl	b49f0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b797e:	b118      	cbz	r0, b7988 <loop+0x884>
            Wire.beginTransmission(greenLineCTAAdr[0]);
   b7980:	f004 fa5c 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b7984:	6821      	ldr	r1, [r4, #0]
   b7986:	e5aa      	b.n	b74de <loop+0x3da>
            Wire.beginTransmission(greenLineCTAAdr[1]);
   b7988:	f004 fa58 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b798c:	6861      	ldr	r1, [r4, #4]
   b798e:	e5a6      	b.n	b74de <loop+0x3da>
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b7990:	f004 fa54 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b7994:	4b62      	ldr	r3, [pc, #392]	; (b7b20 <loop+0xa1c>)
   b7996:	681b      	ldr	r3, [r3, #0]
   b7998:	5999      	ldr	r1, [r3, r6]
   b799a:	e5a0      	b.n	b74de <loop+0x3da>
            else if(currentRailway.name == brownLineCTA.name || currentRailway.name == purpleLineCTA.name){
   b799c:	f109 0130 	add.w	r1, r9, #48	; 0x30
   b79a0:	a827      	add	r0, sp, #156	; 0x9c
   b79a2:	f7fd f825 	bl	b49f0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b79a6:	b920      	cbnz	r0, b79b2 <loop+0x8ae>
   b79a8:	4957      	ldr	r1, [pc, #348]	; (b7b08 <loop+0xa04>)
   b79aa:	a827      	add	r0, sp, #156	; 0x9c
   b79ac:	f7fd f820 	bl	b49f0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b79b0:	b198      	cbz	r0, b79da <loop+0x8d6>
   b79b2:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b79b6:	e9d2 2300 	ldrd	r2, r3, [r2]
   b79ba:	1a9b      	subs	r3, r3, r2
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b79bc:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b79c0:	f080 80b4 	bcs.w	b7b2c <loop+0xa28>
                Wire.write((char)currentRailway.outputs[0][j] + '0');
   b79c4:	f004 fa3a 	bl	bbe3c <_Z19__fetch_global_Wirev>
	return *(this->_M_impl._M_start + __n);
   b79c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b79ca:	681b      	ldr	r3, [r3, #0]
   b79cc:	f813 1024 	ldrb.w	r1, [r3, r4, lsl #2]
   b79d0:	3130      	adds	r1, #48	; 0x30
   b79d2:	f7fc fc27 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b79d6:	3401      	adds	r4, #1
   b79d8:	e7eb      	b.n	b79b2 <loop+0x8ae>
   b79da:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b79de:	e9d2 2300 	ldrd	r2, r3, [r2]
   b79e2:	1a9b      	subs	r3, r3, r2
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b79e4:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b79e8:	f080 80a0 	bcs.w	b7b2c <loop+0xa28>
                Wire.write('0');
   b79ec:	f004 fa26 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b79f0:	2130      	movs	r1, #48	; 0x30
   b79f2:	f7fc fc17 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b79f6:	3401      	adds	r4, #1
   b79f8:	e7ef      	b.n	b79da <loop+0x8d6>
          if(i == 1 && (currentRailway.name == brownLineCTA.name || currentRailway.name == purpleLineCTA.name)){
   b79fa:	2d01      	cmp	r5, #1
   b79fc:	f040 80c9 	bne.w	b7b92 <loop+0xa8e>
   b7a00:	4942      	ldr	r1, [pc, #264]	; (b7b0c <loop+0xa08>)
   b7a02:	a827      	add	r0, sp, #156	; 0x9c
   b7a04:	f7fc fff4 	bl	b49f0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7a08:	b930      	cbnz	r0, b7a18 <loop+0x914>
   b7a0a:	493f      	ldr	r1, [pc, #252]	; (b7b08 <loop+0xa04>)
   b7a0c:	a827      	add	r0, sp, #156	; 0x9c
   b7a0e:	f7fc ffef 	bl	b49f0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7a12:	2800      	cmp	r0, #0
   b7a14:	f000 808a 	beq.w	b7b2c <loop+0xa28>
	return *(this->_M_impl._M_start + __n);
   b7a18:	9a24      	ldr	r2, [sp, #144]	; 0x90
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7a1a:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
   b7a1e:	1a9b      	subs	r3, r3, r2
            for(int j = 0; j < currentRailway.outputs[2].size(); j++){
   b7a20:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b7a24:	f080 8082 	bcs.w	b7b2c <loop+0xa28>
              Wire.write('0');
   b7a28:	f004 fa08 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b7a2c:	2130      	movs	r1, #48	; 0x30
   b7a2e:	f7fc fbf9 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < currentRailway.outputs[2].size(); j++){
   b7a32:	3401      	adds	r4, #1
   b7a34:	e7f0      	b.n	b7a18 <loop+0x914>
          }else if(i == 3 && currentRailway.name == pinkLineCTA.name){
   b7a36:	4930      	ldr	r1, [pc, #192]	; (b7af8 <loop+0x9f4>)
   b7a38:	a827      	add	r0, sp, #156	; 0x9c
   b7a3a:	f7fc ffd9 	bl	b49f0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7a3e:	2800      	cmp	r0, #0
   b7a40:	d074      	beq.n	b7b2c <loop+0xa28>
	return *(this->_M_impl._M_start + __n);
   b7a42:	f8df 90e0 	ldr.w	r9, [pc, #224]	; b7b24 <loop+0xa20>
   b7a46:	f8df b0e0 	ldr.w	fp, [pc, #224]	; b7b28 <loop+0xa24>
   b7a4a:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
   b7a4e:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7a52:	e9d0 3200 	ldrd	r3, r2, [r0]
   b7a56:	1ad2      	subs	r2, r2, r3
   b7a58:	e9d1 1309 	ldrd	r1, r3, [r1, #36]	; 0x24
   b7a5c:	1a5b      	subs	r3, r3, r1
   b7a5e:	109b      	asrs	r3, r3, #2
            for(int j = 0; j < greenLineCTA.outputs[0].size() - pinkLineCTA.outputs[3].size(); j++){
   b7a60:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   b7a64:	42a3      	cmp	r3, r4
   b7a66:	d961      	bls.n	b7b2c <loop+0xa28>
              Wire.write('0');
   b7a68:	f004 f9e8 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b7a6c:	2130      	movs	r1, #48	; 0x30
   b7a6e:	f7fc fbd9 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < greenLineCTA.outputs[0].size() - pinkLineCTA.outputs[3].size(); j++){
   b7a72:	3401      	adds	r4, #1
   b7a74:	e7e9      	b.n	b7a4a <loop+0x946>
            val = n;
   b7a76:	4619      	mov	r1, r3
   b7a78:	e084      	b.n	b7b84 <loop+0xa80>
        Serial.println();
   b7a7a:	f004 f891 	bl	bbba0 <_Z16_fetch_usbserialv>
   b7a7e:	f003 faf8 	bl	bb072 <_ZN5Print7printlnEv>
      for(int i = 0; i < 4; i++){
   b7a82:	3501      	adds	r5, #1
        Wire.endTransmission();
   b7a84:	f004 f9da 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b7a88:	f003 f967 	bl	bad5a <_ZN7TwoWire15endTransmissionEv>
      for(int i = 0; i < 4; i++){
   b7a8c:	2d04      	cmp	r5, #4
   b7a8e:	f106 0604 	add.w	r6, r6, #4
   b7a92:	f47f acde 	bne.w	b7452 <loop+0x34e>
      Wire.unlock();
   b7a96:	f004 f9d1 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b7a9a:	f003 f96a 	bl	bad72 <_ZN7TwoWire6unlockEv>
   b7a9e:	2300      	movs	r3, #0
          currentRailway.outputs[i][j] = 0;
   b7aa0:	461c      	mov	r4, r3
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b7aa2:	2200      	movs	r2, #0
	return *(this->_M_impl._M_start + __n);
   b7aa4:	9924      	ldr	r1, [sp, #144]	; 0x90
   b7aa6:	18cd      	adds	r5, r1, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7aa8:	58c8      	ldr	r0, [r1, r3]
   b7aaa:	6869      	ldr	r1, [r5, #4]
   b7aac:	1a09      	subs	r1, r1, r0
   b7aae:	ebb2 0fa1 	cmp.w	r2, r1, asr #2
   b7ab2:	d203      	bcs.n	b7abc <loop+0x9b8>
          currentRailway.outputs[i][j] = 0;
   b7ab4:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b7ab8:	3201      	adds	r2, #1
   b7aba:	e7f3      	b.n	b7aa4 <loop+0x9a0>
      for(int i = 0; i < 4; i++){
   b7abc:	330c      	adds	r3, #12
   b7abe:	2b30      	cmp	r3, #48	; 0x30
   b7ac0:	d1ef      	bne.n	b7aa2 <loop+0x99e>
      Serial.println();
   b7ac2:	f004 f86d 	bl	bbba0 <_Z16_fetch_usbserialv>
   b7ac6:	f003 fad4 	bl	bb072 <_ZN5Print7printlnEv>
      }
   b7aca:	a807      	add	r0, sp, #28
   b7acc:	f7fc fe9a 	bl	b4804 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      Railway currentRailway = cities[cityIndexBuffer].railways[j];
   b7ad0:	a81b      	add	r0, sp, #108	; 0x6c
   b7ad2:	f7fd fb31 	bl	b5138 <_ZN7RailwayD1Ev>
    for(int j = 0; j < cities[cityIndexBuffer].railways.size(); j++){
   b7ad6:	9b02      	ldr	r3, [sp, #8]
   b7ad8:	3301      	adds	r3, #1
   b7ada:	9302      	str	r3, [sp, #8]
   b7adc:	f7ff bb5d 	b.w	b719a <loop+0x96>
    Serial.println();
   b7ae0:	f004 f85e 	bl	bbba0 <_Z16_fetch_usbserialv>
}
   b7ae4:	b037      	add	sp, #220	; 0xdc
   b7ae6:	ecbd 8b06 	vpop	{d8-d10}
   b7aea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Serial.println();
   b7aee:	f003 bac0 	b.w	bb072 <_ZN5Print7printlnEv>
   b7af2:	bf00      	nop
   b7af4:	200353f4 	.word	0x200353f4
   b7af8:	2003e4ac 	.word	0x2003e4ac
   b7afc:	2003556c 	.word	0x2003556c
   b7b00:	20037e08 	.word	0x20037e08
   b7b04:	20037dd8 	.word	0x20037dd8
   b7b08:	2003e518 	.word	0x2003e518
   b7b0c:	200353a8 	.word	0x200353a8
   b7b10:	20037e74 	.word	0x20037e74
   b7b14:	20035494 	.word	0x20035494
   b7b18:	2003e5f0 	.word	0x2003e5f0
   b7b1c:	200355a8 	.word	0x200355a8
   b7b20:	2003e694 	.word	0x2003e694
   b7b24:	2003553c 	.word	0x2003553c
   b7b28:	2003e47c 	.word	0x2003e47c
        Serial.printf("%s rail part %i: ", currentRailway.name.c_str(), i);
   b7b2c:	f004 f838 	bl	bbba0 <_Z16_fetch_usbserialv>
   b7b30:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   b7b32:	492c      	ldr	r1, [pc, #176]	; (b7be4 <loop+0xae0>)
   b7b34:	462b      	mov	r3, r5
   b7b36:	f7fc fc5d 	bl	b43f4 <_ZN5Print6printfEPKcz>
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b7b3a:	240c      	movs	r4, #12
   b7b3c:	436c      	muls	r4, r5
   b7b3e:	f04f 0900 	mov.w	r9, #0
	return *(this->_M_impl._M_start + __n);
   b7b42:	9a24      	ldr	r2, [sp, #144]	; 0x90
   b7b44:	1913      	adds	r3, r2, r4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7b46:	5912      	ldr	r2, [r2, r4]
   b7b48:	685b      	ldr	r3, [r3, #4]
   b7b4a:	1a9b      	subs	r3, r3, r2
   b7b4c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
   b7b50:	d293      	bcs.n	b7a7a <loop+0x976>
          Wire.write((char)currentRailway.outputs[i][j] + '0');
   b7b52:	f004 f973 	bl	bbe3c <_Z19__fetch_global_Wirev>
	return *(this->_M_impl._M_start + __n);
   b7b56:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b7b58:	591b      	ldr	r3, [r3, r4]
   b7b5a:	f813 1029 	ldrb.w	r1, [r3, r9, lsl #2]
   b7b5e:	3130      	adds	r1, #48	; 0x30
   b7b60:	f7fc fb60 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
          Serial.print(currentRailway.outputs[i][j]);
   b7b64:	f004 f81c 	bl	bbba0 <_Z16_fetch_usbserialv>
   b7b68:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b7b6a:	591b      	ldr	r3, [r3, r4]
   b7b6c:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
        if (n < 0 && base == 10) {
   b7b70:	2b00      	cmp	r3, #0
   b7b72:	4683      	mov	fp, r0
   b7b74:	f6bf af7f 	bge.w	b7a76 <loop+0x972>
            t = print('-');
   b7b78:	212d      	movs	r1, #45	; 0x2d
   b7b7a:	9303      	str	r3, [sp, #12]
   b7b7c:	f003 fa76 	bl	bb06c <_ZN5Print5printEc>
            val = -n;
   b7b80:	9b03      	ldr	r3, [sp, #12]
   b7b82:	4259      	negs	r1, r3
        return printNumber(val, base) + t;
   b7b84:	220a      	movs	r2, #10
   b7b86:	4658      	mov	r0, fp
   b7b88:	f003 fa89 	bl	bb09e <_ZN5Print11printNumberEmh>
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b7b8c:	f109 0901 	add.w	r9, r9, #1
   b7b90:	e7d7      	b.n	b7b42 <loop+0xa3e>
          if(i == 3 && currentRailway.name == orangeLineCTA.name){
   b7b92:	2d03      	cmp	r5, #3
   b7b94:	d1ca      	bne.n	b7b2c <loop+0xa28>
   b7b96:	4914      	ldr	r1, [pc, #80]	; (b7be8 <loop+0xae4>)
   b7b98:	a827      	add	r0, sp, #156	; 0x9c
   b7b9a:	f7fc ff29 	bl	b49f0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7b9e:	2800      	cmp	r0, #0
   b7ba0:	f43f af49 	beq.w	b7a36 <loop+0x932>
   b7ba4:	f8df 9044 	ldr.w	r9, [pc, #68]	; b7bec <loop+0xae8>
   b7ba8:	f8df b044 	ldr.w	fp, [pc, #68]	; b7bf0 <loop+0xaec>
   b7bac:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
   b7bb0:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7bb4:	e9d0 3200 	ldrd	r3, r2, [r0]
   b7bb8:	1ad2      	subs	r2, r2, r3
   b7bba:	e9d1 1309 	ldrd	r1, r3, [r1, #36]	; 0x24
   b7bbe:	1a5b      	subs	r3, r3, r1
   b7bc0:	109b      	asrs	r3, r3, #2
            for(int j = 0; j < greenLineCTA.outputs[0].size() - orangeLineCTA.outputs[3].size(); j++){
   b7bc2:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   b7bc6:	42a3      	cmp	r3, r4
   b7bc8:	d9b0      	bls.n	b7b2c <loop+0xa28>
              Wire.write('0');
   b7bca:	f004 f937 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b7bce:	2130      	movs	r1, #48	; 0x30
   b7bd0:	f7fc fb28 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < greenLineCTA.outputs[0].size() - orangeLineCTA.outputs[3].size(); j++){
   b7bd4:	3401      	adds	r4, #1
   b7bd6:	e7e9      	b.n	b7bac <loop+0xaa8>
}
   b7bd8:	b037      	add	sp, #220	; 0xdc
   b7bda:	ecbd 8b06 	vpop	{d8-d10}
   b7bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7be2:	bf00      	nop
   b7be4:	000bf40c 	.word	0x000bf40c
   b7be8:	20037e08 	.word	0x20037e08
   b7bec:	2003553c 	.word	0x2003553c
   b7bf0:	20037dd8 	.word	0x20037dd8

000b7bf4 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b7bf4:	b510      	push	{r4, lr}
   b7bf6:	4604      	mov	r4, r0
   b7bf8:	f003 ff04 	bl	bba04 <_ZN9TCPClientC1Ev>
{

}
   b7bfc:	4620      	mov	r0, r4
   b7bfe:	bd10      	pop	{r4, pc}

000b7c00 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b7c00:	b538      	push	{r3, r4, r5, lr}
   b7c02:	4604      	mov	r4, r0
   b7c04:	4615      	mov	r5, r2
    client.print(aHeaderName);
   b7c06:	f003 fa2d 	bl	bb064 <_ZN5Print5printEPKc>
    client.print(": ");
   b7c0a:	4905      	ldr	r1, [pc, #20]	; (b7c20 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   b7c0c:	4620      	mov	r0, r4
   b7c0e:	f003 fa29 	bl	bb064 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b7c12:	4629      	mov	r1, r5
   b7c14:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b7c16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
   b7c1a:	f003 ba36 	b.w	bb08a <_ZN5Print7printlnEPKc>
   b7c1e:	bf00      	nop
   b7c20:	000bf0b6 	.word	0x000bf0b6

000b7c24 <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b7c24:	b538      	push	{r3, r4, r5, lr}
   b7c26:	4605      	mov	r5, r0
   b7c28:	4614      	mov	r4, r2
    client.print(aHeaderName);
   b7c2a:	f003 fa1b 	bl	bb064 <_ZN5Print5printEPKc>
    client.print(": ");
   b7c2e:	490b      	ldr	r1, [pc, #44]	; (b7c5c <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   b7c30:	4628      	mov	r0, r5
   b7c32:	f003 fa17 	bl	bb064 <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
   b7c36:	2c00      	cmp	r4, #0
   b7c38:	da0d      	bge.n	b7c56 <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
   b7c3a:	212d      	movs	r1, #45	; 0x2d
   b7c3c:	4628      	mov	r0, r5
   b7c3e:	f003 fa15 	bl	bb06c <_ZN5Print5printEc>
            val = -n;
   b7c42:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b7c44:	4628      	mov	r0, r5
   b7c46:	220a      	movs	r2, #10
   b7c48:	f003 fa29 	bl	bb09e <_ZN5Print11printNumberEmh>
        n += println();
   b7c4c:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b7c4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7c52:	f003 ba0e 	b.w	bb072 <_ZN5Print7printlnEv>
            val = n;
   b7c56:	4621      	mov	r1, r4
   b7c58:	e7f4      	b.n	b7c44 <_ZN10HttpClient10sendHeaderEPKci+0x20>
   b7c5a:	bf00      	nop
   b7c5c:	000bf0b6 	.word	0x000bf0b6

000b7c60 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b7c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7c64:	460e      	mov	r6, r1
   b7c66:	b091      	sub	sp, #68	; 0x44
   b7c68:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b7c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7c6e:	6013      	str	r3, [r2, #0]
{
   b7c70:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b7c72:	2100      	movs	r1, #0
   b7c74:	4630      	mov	r0, r6
   b7c76:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b7c7a:	4617      	mov	r7, r2
   b7c7c:	f003 fb87 	bl	bb38e <_ZNK6String6equalsEPKc>
   b7c80:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b7c84:	4603      	mov	r3, r0
   b7c86:	b998      	cbnz	r0, b7cb0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	const char * c_str() const { return buffer; }
   b7c88:	f1be 0f00 	cmp.w	lr, #0
   b7c8c:	bf14      	ite	ne
   b7c8e:	4672      	movne	r2, lr
   b7c90:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b7c92:	6831      	ldr	r1, [r6, #0]
   b7c94:	b292      	uxth	r2, r2
   b7c96:	4620      	mov	r0, r4
   b7c98:	f003 fcb4 	bl	bb604 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b7c9c:	1e05      	subs	r5, r0, #0
   b7c9e:	bf18      	it	ne
   b7ca0:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   b7ca2:	b9c5      	cbnz	r5, b7cd6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   b7ca4:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b7ca6:	b011      	add	sp, #68	; 0x44
   b7ca8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b7cac:	f003 be60 	b.w	bb970 <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b7cb0:	4b76      	ldr	r3, [pc, #472]	; (b7e8c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
   b7cb2:	930a      	str	r3, [sp, #40]	; 0x28
   b7cb4:	f106 0c14 	add.w	ip, r6, #20
   b7cb8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7cbc:	ad0b      	add	r5, sp, #44	; 0x2c
   b7cbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7cc0:	f8dc 3000 	ldr.w	r3, [ip]
   b7cc4:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b7cc6:	fa1f f28e 	uxth.w	r2, lr
   b7cca:	2300      	movs	r3, #0
   b7ccc:	a90a      	add	r1, sp, #40	; 0x28
   b7cce:	4620      	mov	r0, r4
   b7cd0:	f003 fd78 	bl	bb7c4 <_ZN9TCPClient7connectE9IPAddresstm>
   b7cd4:	e7e2      	b.n	b7c9c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
   b7cd6:	4649      	mov	r1, r9
   b7cd8:	4620      	mov	r0, r4
   b7cda:	f003 f9c3 	bl	bb064 <_ZN5Print5printEPKc>
    client.print(" ");
   b7cde:	496c      	ldr	r1, [pc, #432]	; (b7e90 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   b7ce0:	4620      	mov	r0, r4
   b7ce2:	f003 f9bf 	bl	bb064 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b7ce6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b7ce8:	4620      	mov	r0, r4
   b7cea:	f003 f9bb 	bl	bb064 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b7cee:	4969      	ldr	r1, [pc, #420]	; (b7e94 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   b7cf0:	4620      	mov	r0, r4
   b7cf2:	f003 f9b7 	bl	bb064 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b7cf6:	4968      	ldr	r1, [pc, #416]	; (b7e98 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
   b7cf8:	4a68      	ldr	r2, [pc, #416]	; (b7e9c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
   b7cfa:	4620      	mov	r0, r4
   b7cfc:	f7ff ff80 	bl	b7c00 <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b7d00:	2100      	movs	r1, #0
   b7d02:	4630      	mov	r0, r6
   b7d04:	f003 fb43 	bl	bb38e <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b7d08:	b920      	cbnz	r0, b7d14 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   b7d0a:	6832      	ldr	r2, [r6, #0]
   b7d0c:	4964      	ldr	r1, [pc, #400]	; (b7ea0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
   b7d0e:	4620      	mov	r0, r4
   b7d10:	f7ff ff76 	bl	b7c00 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b7d14:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b7d18:	2100      	movs	r1, #0
   b7d1a:	4650      	mov	r0, sl
   b7d1c:	f003 fb37 	bl	bb38e <_ZNK6String6equalsEPKc>
   b7d20:	b928      	cbnz	r0, b7d2e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
   b7d22:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b7d24:	495f      	ldr	r1, [pc, #380]	; (b7ea4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
   b7d26:	4620      	mov	r0, r4
   b7d28:	f7ff ff7c 	bl	b7c24 <_ZN10HttpClient10sendHeaderEPKci>
   b7d2c:	e006      	b.n	b7d3c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b7d2e:	495e      	ldr	r1, [pc, #376]	; (b7ea8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
   b7d30:	4648      	mov	r0, r9
   b7d32:	f005 f92f 	bl	bcf94 <strcmp>
   b7d36:	4602      	mov	r2, r0
   b7d38:	2800      	cmp	r0, #0
   b7d3a:	d0f3      	beq.n	b7d24 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
   b7d3c:	f1b8 0f00 	cmp.w	r8, #0
   b7d40:	d00e      	beq.n	b7d60 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
   b7d42:	f8d8 1000 	ldr.w	r1, [r8]
   b7d46:	b159      	cbz	r1, b7d60 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
   b7d48:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
   b7d4c:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b7d4e:	b122      	cbz	r2, b7d5a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
   b7d50:	f7ff ff56 	bl	b7c00 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b7d54:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
   b7d58:	e7f3      	b.n	b7d42 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
   b7d5a:	f003 f996 	bl	bb08a <_ZN5Print7printlnEPKc>
}
   b7d5e:	e7f9      	b.n	b7d54 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
   b7d60:	4620      	mov	r0, r4
   b7d62:	f003 f986 	bl	bb072 <_ZN5Print7printlnEv>
    client.flush();
   b7d66:	4620      	mov	r0, r4
   b7d68:	f003 fbac 	bl	bb4c4 <_ZN9TCPClient5flushEv>
   b7d6c:	2100      	movs	r1, #0
   b7d6e:	4650      	mov	r0, sl
   b7d70:	f003 fb0d 	bl	bb38e <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b7d74:	b918      	cbnz	r0, b7d7e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
   b7d76:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b7d78:	4620      	mov	r0, r4
   b7d7a:	f003 f986 	bl	bb08a <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b7d7e:	f104 0a1c 	add.w	sl, r4, #28
   b7d82:	f44f 5220 	mov.w	r2, #10240	; 0x2800
   b7d86:	2100      	movs	r1, #0
   b7d88:	4650      	mov	r0, sl
   b7d8a:	f005 f8cd 	bl	bcf28 <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7d8e:	f001 fb47 	bl	b9420 <HAL_Timer_Get_Milli_Seconds>
   b7d92:	9001      	str	r0, [sp, #4]
   b7d94:	f001 fb44 	bl	b9420 <HAL_Timer_Get_Milli_Seconds>
    bool error = false;
   b7d98:	f04f 0800 	mov.w	r8, #0
    unsigned int bufferPosition = 0;
   b7d9c:	4646      	mov	r6, r8
    } while (client.connected() && !timeout && !error);
   b7d9e:	f241 3b88 	movw	fp, #5000	; 0x1388
        while (client.available()) {
   b7da2:	4620      	mov	r0, r4
   b7da4:	f003 fd8a 	bl	bb8bc <_ZN9TCPClient9availableEv>
   b7da8:	b1e8      	cbz	r0, b7de6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x186>
            char c = client.read();
   b7daa:	4620      	mov	r0, r4
   b7dac:	f003 fb70 	bl	bb490 <_ZN9TCPClient4readEv>
   b7db0:	4681      	mov	r9, r0
   b7db2:	f001 fb35 	bl	b9420 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b7db6:	f242 73fe 	movw	r3, #10238	; 0x27fe
   b7dba:	429e      	cmp	r6, r3
   b7dbc:	9001      	str	r0, [sp, #4]
   b7dbe:	d804      	bhi.n	b7dca <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = c;
   b7dc0:	19a3      	adds	r3, r4, r6
            char c = client.read();
   b7dc2:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
   b7dc6:	3601      	adds	r6, #1
        while (client.available()) {
   b7dc8:	e7eb      	b.n	b7da2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b7dca:	f242 73ff 	movw	r3, #10239	; 0x27ff
   b7dce:	429e      	cmp	r6, r3
   b7dd0:	d1f9      	bne.n	b7dc6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b7dd2:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
   b7dd6:	2200      	movs	r2, #0
   b7dd8:	f883 281b 	strb.w	r2, [r3, #2075]	; 0x81b
                client.stop();
   b7ddc:	4620      	mov	r0, r4
   b7dde:	f003 fdc7 	bl	bb970 <_ZN9TCPClient4stopEv>
                error = true;
   b7de2:	46a8      	mov	r8, r5
   b7de4:	e7ef      	b.n	b7dc6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b7de6:	19a3      	adds	r3, r4, r6
   b7de8:	7718      	strb	r0, [r3, #28]
   b7dea:	f001 fb19 	bl	b9420 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b7dee:	9b01      	ldr	r3, [sp, #4]
   b7df0:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b7df4:	f1b8 0f00 	cmp.w	r8, #0
   b7df8:	d104      	bne.n	b7e04 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
   b7dfa:	45d9      	cmp	r9, fp
   b7dfc:	d802      	bhi.n	b7e04 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
            delay(200);
   b7dfe:	20c8      	movs	r0, #200	; 0xc8
   b7e00:	f001 fd42 	bl	b9888 <delay>
    } while (client.connected() && !timeout && !error);
   b7e04:	4620      	mov	r0, r4
   b7e06:	f003 fc7b 	bl	bb700 <_ZN9TCPClient9connectedEv>
   b7e0a:	b120      	cbz	r0, b7e16 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b7e0c:	45d9      	cmp	r9, fp
   b7e0e:	d802      	bhi.n	b7e16 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b7e10:	f1b8 0f00 	cmp.w	r8, #0
   b7e14:	d0c5      	beq.n	b7da2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
    client.stop();
   b7e16:	4620      	mov	r0, r4
   b7e18:	f003 fdaa 	bl	bb970 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b7e1c:	4651      	mov	r1, sl
   b7e1e:	a802      	add	r0, sp, #8
   b7e20:	f003 f9dd 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b7e24:	230c      	movs	r3, #12
   b7e26:	2209      	movs	r2, #9
   b7e28:	a902      	add	r1, sp, #8
   b7e2a:	a806      	add	r0, sp, #24
   b7e2c:	f003 fad4 	bl	bb3d8 <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b7e30:	491e      	ldr	r1, [pc, #120]	; (b7eac <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x24c>)
   b7e32:	a80a      	add	r0, sp, #40	; 0x28
   b7e34:	f003 f9d3 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
   b7e38:	a90a      	add	r1, sp, #40	; 0x28
   b7e3a:	a802      	add	r0, sp, #8
   b7e3c:	f003 fac8 	bl	bb3d0 <_ZNK6String7indexOfERKS_>
   b7e40:	4604      	mov	r4, r0
   b7e42:	a80a      	add	r0, sp, #40	; 0x28
   b7e44:	f003 f980 	bl	bb148 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b7e48:	1c63      	adds	r3, r4, #1
   b7e4a:	d108      	bne.n	b7e5e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fe>
    String statusCode = raw_response.substring(9,12);
   b7e4c:	a806      	add	r0, sp, #24
   b7e4e:	f003 f97b 	bl	bb148 <_ZN6StringD1Ev>
    String raw_response(buffer);
   b7e52:	a802      	add	r0, sp, #8
   b7e54:	f003 f978 	bl	bb148 <_ZN6StringD1Ev>
}
   b7e58:	b011      	add	sp, #68	; 0x44
   b7e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aResponse.body = "";
   b7e5e:	1d3d      	adds	r5, r7, #4
   b7e60:	4913      	ldr	r1, [pc, #76]	; (b7eb0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x250>)
   b7e62:	4628      	mov	r0, r5
   b7e64:	f003 fa03 	bl	bb26e <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b7e68:	1d22      	adds	r2, r4, #4
   b7e6a:	a902      	add	r1, sp, #8
   b7e6c:	a80a      	add	r0, sp, #40	; 0x28
   b7e6e:	f003 fad3 	bl	bb418 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b7e72:	a90a      	add	r1, sp, #40	; 0x28
   b7e74:	4628      	mov	r0, r5
   b7e76:	f003 fa36 	bl	bb2e6 <_ZN6String6concatERKS_>
   b7e7a:	a80a      	add	r0, sp, #40	; 0x28
   b7e7c:	f003 f964 	bl	bb148 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b7e80:	9806      	ldr	r0, [sp, #24]
   b7e82:	f005 f815 	bl	bceb0 <atoi>
   b7e86:	6038      	str	r0, [r7, #0]
   b7e88:	e7e0      	b.n	b7e4c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ec>
   b7e8a:	bf00      	nop
   b7e8c:	000bf864 	.word	0x000bf864
   b7e90:	000bf389 	.word	0x000bf389
   b7e94:	000bf598 	.word	0x000bf598
   b7e98:	000bf5aa 	.word	0x000bf5aa
   b7e9c:	000bf5a4 	.word	0x000bf5a4
   b7ea0:	000bf5b5 	.word	0x000bf5b5
   b7ea4:	000bf5ba 	.word	0x000bf5ba
   b7ea8:	000bf5c9 	.word	0x000bf5c9
   b7eac:	000bf5ce 	.word	0x000bf5ce
   b7eb0:	000bf5d2 	.word	0x000bf5d2

000b7eb4 <_ZN13JsonReferenceD1Ev>:
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
}
   b7eb4:	4770      	bx	lr

000b7eb6 <_ZN13JsonReferenceD0Ev>:
JsonReference::~JsonReference() {
   b7eb6:	b510      	push	{r4, lr}
}
   b7eb8:	210c      	movs	r1, #12
JsonReference::~JsonReference() {
   b7eba:	4604      	mov	r4, r0
}
   b7ebc:	f7fc f8f3 	bl	b40a6 <_ZdlPvj>
   b7ec0:	4620      	mov	r0, r4
   b7ec2:	bd10      	pop	{r4, pc}

000b7ec4 <_ZN10JsonBufferD1Ev>:
JsonBuffer::~JsonBuffer() {
   b7ec4:	b510      	push	{r4, lr}
   b7ec6:	4b05      	ldr	r3, [pc, #20]	; (b7edc <_ZN10JsonBufferD1Ev+0x18>)
   b7ec8:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b7eca:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b7ecc:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b7ece:	b91b      	cbnz	r3, b7ed8 <_ZN10JsonBufferD1Ev+0x14>
   b7ed0:	6840      	ldr	r0, [r0, #4]
   b7ed2:	b108      	cbz	r0, b7ed8 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b7ed4:	f001 fc90 	bl	b97f8 <free>
}
   b7ed8:	4620      	mov	r0, r4
   b7eda:	bd10      	pop	{r4, pc}
   b7edc:	000bf5e0 	.word	0x000bf5e0

000b7ee0 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b7ee0:	b510      	push	{r4, lr}
   b7ee2:	4604      	mov	r4, r0
}
   b7ee4:	f7ff ffee 	bl	b7ec4 <_ZN10JsonBufferD1Ev>
   b7ee8:	4620      	mov	r0, r4
   b7eea:	2114      	movs	r1, #20
   b7eec:	f7fc f8db 	bl	b40a6 <_ZdlPvj>
   b7ef0:	4620      	mov	r0, r4
   b7ef2:	bd10      	pop	{r4, pc}

000b7ef4 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b7ef4:	b510      	push	{r4, lr}
   b7ef6:	4b07      	ldr	r3, [pc, #28]	; (b7f14 <_ZN10JsonParserD1Ev+0x20>)
   b7ef8:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b7efa:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b7efc:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b7efe:	b91b      	cbnz	r3, b7f08 <_ZN10JsonParserD1Ev+0x14>
   b7f00:	6940      	ldr	r0, [r0, #20]
   b7f02:	b108      	cbz	r0, b7f08 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b7f04:	f001 fc78 	bl	b97f8 <free>
JsonParser::~JsonParser() {
   b7f08:	4620      	mov	r0, r4
   b7f0a:	f7ff ffdb 	bl	b7ec4 <_ZN10JsonBufferD1Ev>
}
   b7f0e:	4620      	mov	r0, r4
   b7f10:	bd10      	pop	{r4, pc}
   b7f12:	bf00      	nop
   b7f14:	000bf5f0 	.word	0x000bf5f0

000b7f18 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b7f18:	b510      	push	{r4, lr}
   b7f1a:	4604      	mov	r4, r0
}
   b7f1c:	f7ff ffea 	bl	b7ef4 <_ZN10JsonParserD1Ev>
   b7f20:	4620      	mov	r0, r4
   b7f22:	212c      	movs	r1, #44	; 0x2c
   b7f24:	f7fc f8bf 	bl	b40a6 <_ZdlPvj>
   b7f28:	4620      	mov	r0, r4
   b7f2a:	bd10      	pop	{r4, pc}

000b7f2c <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b7f2c:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b7f2e:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b7f30:	4604      	mov	r4, r0
   b7f32:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b7f34:	b10b      	cbz	r3, b7f3a <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b7f36:	2000      	movs	r0, #0
}
   b7f38:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b7f3a:	6840      	ldr	r0, [r0, #4]
   b7f3c:	b138      	cbz	r0, b7f4e <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b7f3e:	f001 fc63 	bl	b9808 <realloc>
		if (newBuffer) {
   b7f42:	2800      	cmp	r0, #0
   b7f44:	d0f7      	beq.n	b7f36 <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b7f46:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b7f4a:	2001      	movs	r0, #1
   b7f4c:	e7f4      	b.n	b7f38 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b7f4e:	4608      	mov	r0, r1
   b7f50:	f001 fc4a 	bl	b97e8 <malloc>
   b7f54:	e7f5      	b.n	b7f42 <_ZN10JsonBuffer8allocateEj+0x16>

000b7f56 <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7f56:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7f58:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7f5a:	460e      	mov	r6, r1
   b7f5c:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7f5e:	18d1      	adds	r1, r2, r3
   b7f60:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7f62:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7f64:	b172      	cbz	r2, b7f84 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b7f66:	6882      	ldr	r2, [r0, #8]
   b7f68:	428a      	cmp	r2, r1
   b7f6a:	d30b      	bcc.n	b7f84 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b7f6c:	6860      	ldr	r0, [r4, #4]
   b7f6e:	68e3      	ldr	r3, [r4, #12]
   b7f70:	462a      	mov	r2, r5
   b7f72:	4631      	mov	r1, r6
   b7f74:	4418      	add	r0, r3
   b7f76:	f004 ffaf 	bl	bced8 <memcpy>
	offset += dataLen;
   b7f7a:	68e2      	ldr	r2, [r4, #12]
   b7f7c:	442a      	add	r2, r5
   b7f7e:	60e2      	str	r2, [r4, #12]
	return true;
   b7f80:	2001      	movs	r0, #1
}
   b7f82:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b7f84:	4620      	mov	r0, r4
   b7f86:	f7ff ffd1 	bl	b7f2c <_ZN10JsonBuffer8allocateEj>
   b7f8a:	2800      	cmp	r0, #0
   b7f8c:	d1ee      	bne.n	b7f6c <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b7f8e:	e7f8      	b.n	b7f82 <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b7f90 <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b7f90:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b7f92:	2100      	movs	r1, #0
   b7f94:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b7f96:	b123      	cbz	r3, b7fa2 <_ZN10JsonBuffer5clearEv+0x12>
   b7f98:	6882      	ldr	r2, [r0, #8]
   b7f9a:	b112      	cbz	r2, b7fa2 <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b7f9c:	4618      	mov	r0, r3
   b7f9e:	f004 bfc3 	b.w	bcf28 <memset>
}
   b7fa2:	4770      	bx	lr

000b7fa4 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b7fa4:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b7fa6:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b7faa:	2200      	movs	r2, #0
   b7fac:	60c2      	str	r2, [r0, #12]
   b7fae:	2201      	movs	r2, #1
   b7fb0:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b7fb2:	6143      	str	r3, [r0, #20]
   b7fb4:	4a02      	ldr	r2, [pc, #8]	; (b7fc0 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b7fb6:	9b02      	ldr	r3, [sp, #8]
   b7fb8:	6002      	str	r2, [r0, #0]
   b7fba:	61c3      	str	r3, [r0, #28]
}
   b7fbc:	bd10      	pop	{r4, pc}
   b7fbe:	bf00      	nop
   b7fc0:	000bf5f0 	.word	0x000bf5f0

000b7fc4 <_ZNK10JsonParser12getReferenceEv>:
	if (tokens < tokensEnd) {
   b7fc4:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   b7fc8:	429a      	cmp	r2, r3
   b7fca:	4b04      	ldr	r3, [pc, #16]	; (b7fdc <_ZNK10JsonParser12getReferenceEv+0x18>)

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b7fcc:	bf38      	it	cc
   b7fce:	6082      	strcc	r2, [r0, #8]
   b7fd0:	e9c0 3100 	strd	r3, r1, [r0]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b7fd4:	bf24      	itt	cs
   b7fd6:	2300      	movcs	r3, #0
   b7fd8:	6083      	strcs	r3, [r0, #8]
}
   b7fda:	4770      	bx	lr
   b7fdc:	000bf600 	.word	0x000bf600

000b7fe0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b7fe0:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b7fe2:	6813      	ldr	r3, [r2, #0]
   b7fe4:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b7fe6:	6813      	ldr	r3, [r2, #0]
   b7fe8:	f103 0410 	add.w	r4, r3, #16
   b7fec:	6014      	str	r4, [r2, #0]
   b7fee:	6986      	ldr	r6, [r0, #24]
   b7ff0:	42b4      	cmp	r4, r6
   b7ff2:	d20a      	bcs.n	b800a <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b7ff4:	699b      	ldr	r3, [r3, #24]
   b7ff6:	688c      	ldr	r4, [r1, #8]
   b7ff8:	42a3      	cmp	r3, r4
   b7ffa:	da01      	bge.n	b8000 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b7ffc:	42ab      	cmp	r3, r5
   b7ffe:	ddf2      	ble.n	b7fe6 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b8000:	42a3      	cmp	r3, r4
   b8002:	bfcc      	ite	gt
   b8004:	2000      	movgt	r0, #0
   b8006:	2001      	movle	r0, #1
   b8008:	e000      	b.n	b800c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b800a:	2000      	movs	r0, #0
}
   b800c:	bd70      	pop	{r4, r5, r6, pc}

000b800e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b800e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b8012:	9d08      	ldr	r5, [sp, #32]
   b8014:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b8016:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b801a:	4604      	mov	r4, r0
   b801c:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b801e:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b8020:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b8022:	9801      	ldr	r0, [sp, #4]
   b8024:	69a3      	ldr	r3, [r4, #24]
   b8026:	4283      	cmp	r3, r0
   b8028:	d91a      	bls.n	b8060 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b802a:	6882      	ldr	r2, [r0, #8]
   b802c:	688b      	ldr	r3, [r1, #8]
   b802e:	429a      	cmp	r2, r3
   b8030:	da16      	bge.n	b8060 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b8032:	42ae      	cmp	r6, r5
   b8034:	d10b      	bne.n	b804e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b8036:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b8038:	aa01      	add	r2, sp, #4
   b803a:	4620      	mov	r0, r4
   b803c:	f7ff ffd0 	bl	b7fe0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b8040:	b128      	cbz	r0, b804e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b8042:	9b01      	ldr	r3, [sp, #4]
   b8044:	f8c8 3000 	str.w	r3, [r8]
}
   b8048:	b002      	add	sp, #8
   b804a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b804e:	aa01      	add	r2, sp, #4
   b8050:	4620      	mov	r0, r4
   b8052:	f7ff ffc5 	bl	b7fe0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b8056:	4620      	mov	r0, r4
		index++;
   b8058:	3601      	adds	r6, #1
		skipObject(container, token);
   b805a:	f7ff ffc1 	bl	b7fe0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b805e:	e7e0      	b.n	b8022 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b8060:	2000      	movs	r0, #0
   b8062:	e7f1      	b.n	b8048 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b8064 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>:
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b8064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8066:	461f      	mov	r7, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b8068:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b806c:	4604      	mov	r4, r0
   b806e:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b8070:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b8072:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b8074:	9b01      	ldr	r3, [sp, #4]
   b8076:	69a2      	ldr	r2, [r4, #24]
   b8078:	429a      	cmp	r2, r3
   b807a:	d90f      	bls.n	b809c <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
   b807c:	6898      	ldr	r0, [r3, #8]
   b807e:	688a      	ldr	r2, [r1, #8]
   b8080:	4290      	cmp	r0, r2
   b8082:	da0b      	bge.n	b809c <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
		if (desiredIndex == index) {
   b8084:	42b5      	cmp	r5, r6
   b8086:	d103      	bne.n	b8090 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x2c>
			value = token;
   b8088:	603b      	str	r3, [r7, #0]
			return true;
   b808a:	2001      	movs	r0, #1
}
   b808c:	b003      	add	sp, #12
   b808e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		skipObject(container, token);
   b8090:	aa01      	add	r2, sp, #4
   b8092:	4620      	mov	r0, r4
		index++;
   b8094:	3501      	adds	r5, #1
		skipObject(container, token);
   b8096:	f7ff ffa3 	bl	b7fe0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b809a:	e7eb      	b.n	b8074 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x10>
	return false;
   b809c:	2000      	movs	r0, #0
   b809e:	e7f5      	b.n	b808c <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x28>

000b80a0 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
   b80a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b80a2:	3b01      	subs	r3, #1
   b80a4:	2400      	movs	r4, #0
   b80a6:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
   b80aa:	1bf6      	subs	r6, r6, r7
   b80ac:	42a6      	cmp	r6, r4
   b80ae:	dd08      	ble.n	b80c2 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
   b80b0:	42a3      	cmp	r3, r4
   b80b2:	dd06      	ble.n	b80c2 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
   b80b4:	6845      	ldr	r5, [r0, #4]
   b80b6:	443d      	add	r5, r7
   b80b8:	5d2d      	ldrb	r5, [r5, r4]
   b80ba:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b80be:	3401      	adds	r4, #1
   b80c0:	e7f1      	b.n	b80a6 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
   b80c2:	2300      	movs	r3, #0
   b80c4:	7013      	strb	r3, [r2, #0]
}
   b80c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b80c8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
   b80c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b80ca:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b80cc:	2310      	movs	r3, #16
   b80ce:	466a      	mov	r2, sp
   b80d0:	f7ff ffe6 	bl	b80a0 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
   b80d4:	4904      	ldr	r1, [pc, #16]	; (b80e8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
   b80d6:	4622      	mov	r2, r4
   b80d8:	4668      	mov	r0, sp
   b80da:	f001 fb9d 	bl	b9818 <sscanf>
}
   b80de:	1e43      	subs	r3, r0, #1
   b80e0:	4258      	negs	r0, r3
   b80e2:	4158      	adcs	r0, r3
   b80e4:	b004      	add	sp, #16
   b80e6:	bd10      	pop	{r4, pc}
   b80e8:	000bf8c4 	.word	0x000bf8c4

000b80ec <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, float &result) const {
   b80ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b80ee:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b80f0:	2310      	movs	r3, #16
   b80f2:	466a      	mov	r2, sp
   b80f4:	f7ff ffd4 	bl	b80a0 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	result = strtof(tmp, 0);
   b80f8:	4668      	mov	r0, sp
   b80fa:	2100      	movs	r1, #0
   b80fc:	f005 fdbe 	bl	bdc7c <strtof>
}
   b8100:	2001      	movs	r0, #1
	result = strtof(tmp, 0);
   b8102:	ed84 0a00 	vstr	s0, [r4]
}
   b8106:	b004      	add	sp, #16
   b8108:	bd10      	pop	{r4, pc}
	...

000b810c <_ZNK13JsonReference5indexEj>:
	else {
		return JsonReference(parser);
	}
}

JsonReference JsonReference::index(size_t index) const {
   b810c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b810e:	460d      	mov	r5, r1
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b8110:	6889      	ldr	r1, [r1, #8]
   b8112:	4e0a      	ldr	r6, [pc, #40]	; (b813c <_ZNK13JsonReference5indexEj+0x30>)
JsonReference JsonReference::index(size_t index) const {
   b8114:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b8116:	b161      	cbz	r1, b8132 <_ZNK13JsonReference5indexEj+0x26>
   b8118:	6868      	ldr	r0, [r5, #4]
   b811a:	ab01      	add	r3, sp, #4
   b811c:	f7ff ffa2 	bl	b8064 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>
   b8120:	b138      	cbz	r0, b8132 <_ZNK13JsonReference5indexEj+0x26>
		return JsonReference(parser, newToken);
   b8122:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b8124:	e9c4 6300 	strd	r6, r3, [r4]
   b8128:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b812a:	60a3      	str	r3, [r4, #8]
	}
	else {
		return JsonReference(parser);
	}
}
   b812c:	4620      	mov	r0, r4
   b812e:	b002      	add	sp, #8
   b8130:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b8132:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b8134:	e9c4 6300 	strd	r6, r3, [r4]
   b8138:	2300      	movs	r3, #0
   b813a:	e7f6      	b.n	b812a <_ZNK13JsonReference5indexEj+0x1e>
   b813c:	000bf600 	.word	0x000bf600

000b8140 <_ZNK13JsonReference8valueIntEi>:
bool JsonReference::valueBool(bool result) const {
	(void) value(result);
	return result;
}

int JsonReference::valueInt(int result) const {
   b8140:	b507      	push	{r0, r1, r2, lr}
   b8142:	9101      	str	r1, [sp, #4]
	 * There are also type-specific versions like valueBool that return the value, instead of having to pass an object
	 * to hold the value, as in this call.
	 */
	template<class T>
	bool value(T &result) const {
		if (token && parser->getTokenValue(token, result)) {
   b8144:	6881      	ldr	r1, [r0, #8]
   b8146:	b119      	cbz	r1, b8150 <_ZNK13JsonReference8valueIntEi+0x10>
   b8148:	6840      	ldr	r0, [r0, #4]
   b814a:	aa01      	add	r2, sp, #4
   b814c:	f7ff ffbc 	bl	b80c8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
	(void) value(result);
	return result;
}
   b8150:	9801      	ldr	r0, [sp, #4]
   b8152:	b003      	add	sp, #12
   b8154:	f85d fb04 	ldr.w	pc, [sp], #4

000b8158 <_ZNK13JsonReference10valueFloatEf>:
unsigned long JsonReference::valueUnsignedLong(unsigned long result) const {
	(void) value(result);
	return result;
}

float JsonReference::valueFloat(float result) const {
   b8158:	b507      	push	{r0, r1, r2, lr}
   b815a:	6881      	ldr	r1, [r0, #8]
   b815c:	ed8d 0a01 	vstr	s0, [sp, #4]
   b8160:	b119      	cbz	r1, b816a <_ZNK13JsonReference10valueFloatEf+0x12>
   b8162:	6840      	ldr	r0, [r0, #4]
   b8164:	aa01      	add	r2, sp, #4
   b8166:	f7ff ffc1 	bl	b80ec <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>
	(void) value(result);
	return result;
}
   b816a:	ed9d 0a01 	vldr	s0, [sp, #4]
   b816e:	b003      	add	sp, #12
   b8170:	f85d fb04 	ldr.w	pc, [sp], #4

000b8174 <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   b8174:	b510      	push	{r4, lr}
   b8176:	4604      	mov	r4, r0
	if (str) {
   b8178:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b817a:	460b      	mov	r3, r1
	if (str) {
   b817c:	b128      	cbz	r0, b818a <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b817e:	f003 f8b6 	bl	bb2ee <_ZN6String6concatEc>
	}
	else {
		if (buf && length < (bufLen - 1)) {
			buf[length] = ch;
		}
		length++;
   b8182:	68e3      	ldr	r3, [r4, #12]
   b8184:	3301      	adds	r3, #1
   b8186:	60e3      	str	r3, [r4, #12]
	}
}
   b8188:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b818a:	6860      	ldr	r0, [r4, #4]
   b818c:	2800      	cmp	r0, #0
   b818e:	d0f8      	beq.n	b8182 <_ZN16JsonParserString6appendEc+0xe>
   b8190:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b8194:	3a01      	subs	r2, #1
   b8196:	428a      	cmp	r2, r1
			buf[length] = ch;
   b8198:	bf88      	it	hi
   b819a:	5443      	strbhi	r3, [r0, r1]
   b819c:	e7f1      	b.n	b8182 <_ZN16JsonParserString6appendEc+0xe>

000b819e <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b819e:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b81a0:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b81a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b81a4:	4608      	mov	r0, r1
		str.append((char)unicode);
   b81a6:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b81a8:	d804      	bhi.n	b81b4 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b81aa:	b003      	add	sp, #12
   b81ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b81b0:	f7ff bfe0 	b.w	b8174 <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b81b4:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b81b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b81bc:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b81c0:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b81c4:	d207      	bcs.n	b81d6 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b81c6:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b81ca:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b81cc:	f7ff ffd2 	bl	b8174 <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b81d0:	9801      	ldr	r0, [sp, #4]
   b81d2:	4621      	mov	r1, r4
   b81d4:	e7e9      	b.n	b81aa <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b81d6:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b81d8:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b81dc:	9001      	str	r0, [sp, #4]
   b81de:	f7ff ffc9 	bl	b8174 <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b81e2:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b81e6:	9801      	ldr	r0, [sp, #4]
   b81e8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b81ec:	e7ee      	b.n	b81cc <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>
	...

000b81f0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b81f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b81f4:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b81f6:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b81f8:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b82c8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b81fc:	4680      	mov	r8, r0
   b81fe:	460f      	mov	r7, r1
   b8200:	4615      	mov	r5, r2
			escape = false;
   b8202:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b8204:	68b8      	ldr	r0, [r7, #8]
   b8206:	42b0      	cmp	r0, r6
   b8208:	dd5a      	ble.n	b82c0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b820a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b820e:	5d99      	ldrb	r1, [r3, r6]
   b8210:	199a      	adds	r2, r3, r6
		if (escape) {
   b8212:	2c00      	cmp	r4, #0
   b8214:	d04b      	beq.n	b82ae <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b8216:	2975      	cmp	r1, #117	; 0x75
   b8218:	d805      	bhi.n	b8226 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b821a:	296d      	cmp	r1, #109	; 0x6d
   b821c:	d807      	bhi.n	b822e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b821e:	2962      	cmp	r1, #98	; 0x62
   b8220:	d01e      	beq.n	b8260 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b8222:	2966      	cmp	r1, #102	; 0x66
   b8224:	d01e      	beq.n	b8264 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b8226:	4628      	mov	r0, r5
   b8228:	f7ff ffa4 	bl	b8174 <_ZN16JsonParserString6appendEc>
				break;
   b822c:	e03d      	b.n	b82aa <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b822e:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b8232:	2c07      	cmp	r4, #7
   b8234:	d8f7      	bhi.n	b8226 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b8236:	f20f 0c08 	addw	ip, pc, #8
   b823a:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b823e:	bf00      	nop
   b8240:	000b8269 	.word	0x000b8269
   b8244:	000b8227 	.word	0x000b8227
   b8248:	000b8227 	.word	0x000b8227
   b824c:	000b8227 	.word	0x000b8227
   b8250:	000b826d 	.word	0x000b826d
   b8254:	000b8227 	.word	0x000b8227
   b8258:	000b8271 	.word	0x000b8271
   b825c:	000b8275 	.word	0x000b8275
				str.append('\b');
   b8260:	2108      	movs	r1, #8
   b8262:	e7e0      	b.n	b8226 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b8264:	210c      	movs	r1, #12
   b8266:	e7de      	b.n	b8226 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b8268:	210a      	movs	r1, #10
   b826a:	e7dc      	b.n	b8226 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b826c:	210d      	movs	r1, #13
   b826e:	e7da      	b.n	b8226 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b8270:	2109      	movs	r1, #9
   b8272:	e7d8      	b.n	b8226 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b8274:	1d31      	adds	r1, r6, #4
   b8276:	4288      	cmp	r0, r1
   b8278:	dd17      	ble.n	b82aa <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b827a:	a902      	add	r1, sp, #8
   b827c:	3304      	adds	r3, #4
   b827e:	4433      	add	r3, r6
   b8280:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b8282:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b8286:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b828a:	429a      	cmp	r2, r3
   b828c:	d1f9      	bne.n	b8282 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b828e:	aa01      	add	r2, sp, #4
   b8290:	4651      	mov	r1, sl
					tmp[4] = 0;
   b8292:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b8296:	f001 fabf 	bl	b9818 <sscanf>
   b829a:	2801      	cmp	r0, #1
   b829c:	d105      	bne.n	b82aa <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b829e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b82a2:	4629      	mov	r1, r5
   b82a4:	f7ff ff7b 	bl	b819e <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b82a8:	3605      	adds	r6, #5
			escape = false;
   b82aa:	2400      	movs	r4, #0
   b82ac:	e004      	b.n	b82b8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b82ae:	295c      	cmp	r1, #92	; 0x5c
   b82b0:	d004      	beq.n	b82bc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b82b2:	4628      	mov	r0, r5
   b82b4:	f7ff ff5e 	bl	b8174 <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b82b8:	3601      	adds	r6, #1
   b82ba:	e7a3      	b.n	b8204 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b82bc:	2401      	movs	r4, #1
   b82be:	e7fb      	b.n	b82b8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b82c0:	2001      	movs	r0, #1
   b82c2:	b004      	add	sp, #16
   b82c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b82c8:	000bf5d3 	.word	0x000bf5d3

000b82cc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b82cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b82ce:	460c      	mov	r4, r1
   b82d0:	4606      	mov	r6, r0
	result = "";
   b82d2:	490c      	ldr	r1, [pc, #48]	; (b8304 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b82d4:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b82d6:	4615      	mov	r5, r2
	result = "";
   b82d8:	f002 ffc9 	bl	bb26e <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b82dc:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b82e0:	1ac9      	subs	r1, r1, r3
   b82e2:	3101      	adds	r1, #1
   b82e4:	4628      	mov	r0, r5
   b82e6:	f002 ff4d 	bl	bb184 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b82ea:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b82ec:	466a      	mov	r2, sp
   b82ee:	4621      	mov	r1, r4
   b82f0:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b82f2:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b82f6:	9500      	str	r5, [sp, #0]
   b82f8:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b82fa:	f7ff ff79 	bl	b81f0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b82fe:	b004      	add	sp, #16
   b8300:	bd70      	pop	{r4, r5, r6, pc}
   b8302:	bf00      	nop
   b8304:	000bf5d2 	.word	0x000bf5d2

000b8308 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b8308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b830c:	b089      	sub	sp, #36	; 0x24
   b830e:	4605      	mov	r5, r0
   b8310:	4688      	mov	r8, r1
	String keyName;
   b8312:	a804      	add	r0, sp, #16
   b8314:	4912      	ldr	r1, [pc, #72]	; (b8360 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b8316:	4616      	mov	r6, r2
   b8318:	4699      	mov	r9, r3
	String keyName;
   b831a:	f002 ff60 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b831e:	2700      	movs	r7, #0
   b8320:	9700      	str	r7, [sp, #0]
   b8322:	464b      	mov	r3, r9
   b8324:	aa03      	add	r2, sp, #12
   b8326:	4641      	mov	r1, r8
   b8328:	4628      	mov	r0, r5
   b832a:	f7ff fe70 	bl	b800e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b832e:	4604      	mov	r4, r0
   b8330:	b170      	cbz	r0, b8350 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b8332:	9903      	ldr	r1, [sp, #12]
   b8334:	aa04      	add	r2, sp, #16
   b8336:	4628      	mov	r0, r5
   b8338:	f7ff ffc8 	bl	b82cc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b833c:	4604      	mov	r4, r0
   b833e:	b908      	cbnz	r0, b8344 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b8340:	3701      	adds	r7, #1
   b8342:	e7ed      	b.n	b8320 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b8344:	4631      	mov	r1, r6
   b8346:	a804      	add	r0, sp, #16
   b8348:	f003 f821 	bl	bb38e <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b834c:	2800      	cmp	r0, #0
   b834e:	d0f7      	beq.n	b8340 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b8350:	a804      	add	r0, sp, #16
   b8352:	f002 fef9 	bl	bb148 <_ZN6StringD1Ev>
}
   b8356:	4620      	mov	r0, r4
   b8358:	b009      	add	sp, #36	; 0x24
   b835a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b835e:	bf00      	nop
   b8360:	000bf5d2 	.word	0x000bf5d2

000b8364 <_ZNK13JsonReference3keyEPKc>:
JsonReference JsonReference::key(const char *name) const {
   b8364:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8366:	460d      	mov	r5, r1
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b8368:	6889      	ldr	r1, [r1, #8]
   b836a:	4e0a      	ldr	r6, [pc, #40]	; (b8394 <_ZNK13JsonReference3keyEPKc+0x30>)
JsonReference JsonReference::key(const char *name) const {
   b836c:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b836e:	b161      	cbz	r1, b838a <_ZNK13JsonReference3keyEPKc+0x26>
   b8370:	6868      	ldr	r0, [r5, #4]
   b8372:	ab01      	add	r3, sp, #4
   b8374:	f7ff ffc8 	bl	b8308 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b8378:	b138      	cbz	r0, b838a <_ZNK13JsonReference3keyEPKc+0x26>
		return JsonReference(parser, newToken);
   b837a:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b837c:	e9c4 6300 	strd	r6, r3, [r4]
   b8380:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b8382:	60a3      	str	r3, [r4, #8]
}
   b8384:	4620      	mov	r0, r4
   b8386:	b002      	add	sp, #8
   b8388:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b838a:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b838c:	e9c4 6300 	strd	r6, r3, [r4]
   b8390:	2300      	movs	r3, #0
   b8392:	e7f6      	b.n	b8382 <_ZNK13JsonReference3keyEPKc+0x1e>
   b8394:	000bf600 	.word	0x000bf600

000b8398 <_ZNK13JsonReference11valueStringEv>:
String JsonReference::valueString() const {
   b8398:	b538      	push	{r3, r4, r5, lr}
   b839a:	460d      	mov	r5, r1
	String result;
   b839c:	4905      	ldr	r1, [pc, #20]	; (b83b4 <_ZNK13JsonReference11valueStringEv+0x1c>)
String JsonReference::valueString() const {
   b839e:	4604      	mov	r4, r0
	String result;
   b83a0:	f002 ff1d 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
   b83a4:	68a9      	ldr	r1, [r5, #8]
   b83a6:	b119      	cbz	r1, b83b0 <_ZNK13JsonReference11valueStringEv+0x18>
   b83a8:	6868      	ldr	r0, [r5, #4]
   b83aa:	4622      	mov	r2, r4
   b83ac:	f7ff ff8e 	bl	b82cc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
}
   b83b0:	4620      	mov	r0, r4
   b83b2:	bd38      	pop	{r3, r4, r5, pc}
   b83b4:	000bf5d2 	.word	0x000bf5d2

000b83b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b83b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b83bc:	6844      	ldr	r4, [r0, #4]
   b83be:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b83c2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b83c6:	f8d0 e000 	ldr.w	lr, [r0]
   b83ca:	4596      	cmp	lr, r2
   b83cc:	f080 81b9 	bcs.w	b8742 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b83d0:	f811 800e 	ldrb.w	r8, [r1, lr]
   b83d4:	f1b8 0f00 	cmp.w	r8, #0
   b83d8:	f000 81b3 	beq.w	b8742 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b83dc:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b83e0:	f000 8098 	beq.w	b8514 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b83e4:	d833      	bhi.n	b844e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b83e6:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b83ea:	f000 80a6 	beq.w	b853a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b83ee:	d810      	bhi.n	b8412 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b83f0:	f1a8 0809 	sub.w	r8, r8, #9
   b83f4:	fa5f f888 	uxtb.w	r8, r8
   b83f8:	f1b8 0f17 	cmp.w	r8, #23
   b83fc:	d80d      	bhi.n	b841a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b83fe:	4d9f      	ldr	r5, [pc, #636]	; (b867c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b8400:	fa0c f808 	lsl.w	r8, ip, r8
   b8404:	ea18 0f05 	tst.w	r8, r5
   b8408:	d007      	beq.n	b841a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b840a:	6805      	ldr	r5, [r0, #0]
   b840c:	3501      	adds	r5, #1
   b840e:	6005      	str	r5, [r0, #0]
   b8410:	e7d9      	b.n	b83c6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b8412:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b8416:	f000 8133 	beq.w	b8680 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b841a:	f8d0 8000 	ldr.w	r8, [r0]
   b841e:	4542      	cmp	r2, r8
   b8420:	d90e      	bls.n	b8440 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b8422:	f811 5008 	ldrb.w	r5, [r1, r8]
   b8426:	b15d      	cbz	r5, b8440 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b8428:	2d3a      	cmp	r5, #58	; 0x3a
   b842a:	f200 8169 	bhi.w	b8700 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b842e:	2d1f      	cmp	r5, #31
   b8430:	f200 8151 	bhi.w	b86d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b8434:	2d0a      	cmp	r5, #10
   b8436:	f200 8160 	bhi.w	b86fa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b843a:	2d08      	cmp	r5, #8
   b843c:	f240 8156 	bls.w	b86ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b8440:	2b00      	cmp	r3, #0
   b8442:	f040 8162 	bne.w	b870a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b8446:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b844a:	6005      	str	r5, [r0, #0]
   b844c:	e0a5      	b.n	b859a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b844e:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b8452:	d037      	beq.n	b84c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b8454:	d82e      	bhi.n	b84b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b8456:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b845a:	d033      	beq.n	b84c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b845c:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b8460:	d1db      	bne.n	b841a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b8462:	2b00      	cmp	r3, #0
   b8464:	d0d1      	beq.n	b840a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b8466:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b846a:	6845      	ldr	r5, [r0, #4]
   b846c:	3d01      	subs	r5, #1
   b846e:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b8472:	2d00      	cmp	r5, #0
   b8474:	db55      	blt.n	b8522 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b8476:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b847a:	3701      	adds	r7, #1
   b847c:	d04d      	beq.n	b851a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b847e:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b8482:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b8486:	d148      	bne.n	b851a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b8488:	f898 b000 	ldrb.w	fp, [r8]
   b848c:	45cb      	cmp	fp, r9
   b848e:	d14b      	bne.n	b8528 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b8490:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b8494:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b8498:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b849c:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b84a0:	f8de 7004 	ldr.w	r7, [lr, #4]
   b84a4:	3701      	adds	r7, #1
   b84a6:	d042      	beq.n	b852e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b84a8:	f8de 7008 	ldr.w	r7, [lr, #8]
   b84ac:	3701      	adds	r7, #1
   b84ae:	d13e      	bne.n	b852e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b84b0:	6085      	str	r5, [r0, #8]
				break;
   b84b2:	e7aa      	b.n	b840a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b84b4:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b84b8:	d1af      	bne.n	b841a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b84ba:	2b00      	cmp	r3, #0
   b84bc:	d0a5      	beq.n	b840a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b84be:	f04f 0901 	mov.w	r9, #1
   b84c2:	e7d2      	b.n	b846a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b84c4:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b84c6:	2b00      	cmp	r3, #0
   b84c8:	d09f      	beq.n	b840a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b84ca:	6845      	ldr	r5, [r0, #4]
   b84cc:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b84ce:	42af      	cmp	r7, r5
   b84d0:	d94a      	bls.n	b8568 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b84d2:	f105 0e01 	add.w	lr, r5, #1
   b84d6:	f8c0 e004 	str.w	lr, [r0, #4]
   b84da:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b84de:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b84e2:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b84e6:	2500      	movs	r5, #0
   b84e8:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b84ec:	6885      	ldr	r5, [r0, #8]
   b84ee:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b84f0:	bf1f      	itttt	ne
   b84f2:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b84f6:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b84fa:	3501      	addne	r5, #1
   b84fc:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b8500:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b8504:	bf0c      	ite	eq
   b8506:	2501      	moveq	r5, #1
   b8508:	2502      	movne	r5, #2
   b850a:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b850e:	6805      	ldr	r5, [r0, #0]
   b8510:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b8514:	6845      	ldr	r5, [r0, #4]
   b8516:	3d01      	subs	r5, #1
   b8518:	e7ca      	b.n	b84b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b851a:	3d01      	subs	r5, #1
   b851c:	f1a8 0810 	sub.w	r8, r8, #16
   b8520:	e7a7      	b.n	b8472 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b8522:	3501      	adds	r5, #1
   b8524:	f47f af71 	bne.w	b840a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b8528:	f06f 0401 	mvn.w	r4, #1
   b852c:	e01e      	b.n	b856c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b852e:	3d01      	subs	r5, #1
   b8530:	1c6f      	adds	r7, r5, #1
   b8532:	f1ae 0e10 	sub.w	lr, lr, #16
   b8536:	d1b3      	bne.n	b84a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b8538:	e767      	b.n	b840a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b853a:	f10e 0901 	add.w	r9, lr, #1
   b853e:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b8542:	f8d0 8000 	ldr.w	r8, [r0]
   b8546:	4542      	cmp	r2, r8
   b8548:	f240 8093 	bls.w	b8672 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b854c:	f811 5008 	ldrb.w	r5, [r1, r8]
   b8550:	2d00      	cmp	r5, #0
   b8552:	f000 808e 	beq.w	b8672 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b8556:	2d22      	cmp	r5, #34	; 0x22
   b8558:	d130      	bne.n	b85bc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b855a:	b1f3      	cbz	r3, b859a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b855c:	6845      	ldr	r5, [r0, #4]
   b855e:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b8560:	42af      	cmp	r7, r5
   b8562:	d806      	bhi.n	b8572 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b8564:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b8568:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b856c:	4620      	mov	r0, r4
   b856e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b8572:	f105 0e01 	add.w	lr, r5, #1
   b8576:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b857a:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b857e:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b8582:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b8586:	2700      	movs	r7, #0
   b8588:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b858a:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b858e:	f04f 0a03 	mov.w	sl, #3
   b8592:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b8596:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b859a:	6885      	ldr	r5, [r0, #8]
   b859c:	1c6f      	adds	r7, r5, #1
				count++;
   b859e:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b85a2:	f43f af32 	beq.w	b840a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b85a6:	2b00      	cmp	r3, #0
   b85a8:	f43f af2f 	beq.w	b840a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b85ac:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b85b0:	f8de 500c 	ldr.w	r5, [lr, #12]
   b85b4:	3501      	adds	r5, #1
   b85b6:	f8ce 500c 	str.w	r5, [lr, #12]
   b85ba:	e726      	b.n	b840a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b85bc:	2d5c      	cmp	r5, #92	; 0x5c
   b85be:	d111      	bne.n	b85e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b85c0:	f108 0501 	add.w	r5, r8, #1
   b85c4:	42aa      	cmp	r2, r5
   b85c6:	d90d      	bls.n	b85e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b85c8:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b85ca:	5d4d      	ldrb	r5, [r1, r5]
   b85cc:	2d75      	cmp	r5, #117	; 0x75
   b85ce:	d82b      	bhi.n	b8628 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b85d0:	2d6d      	cmp	r5, #109	; 0x6d
   b85d2:	d80b      	bhi.n	b85ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b85d4:	2d66      	cmp	r5, #102	; 0x66
   b85d6:	d827      	bhi.n	b8628 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b85d8:	2d5b      	cmp	r5, #91	; 0x5b
   b85da:	d81d      	bhi.n	b8618 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b85dc:	2d22      	cmp	r5, #34	; 0x22
   b85de:	d001      	beq.n	b85e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b85e0:	2d2f      	cmp	r5, #47	; 0x2f
   b85e2:	d121      	bne.n	b8628 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b85e4:	6805      	ldr	r5, [r0, #0]
   b85e6:	3501      	adds	r5, #1
   b85e8:	6005      	str	r5, [r0, #0]
   b85ea:	e7aa      	b.n	b8542 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b85ec:	3d6e      	subs	r5, #110	; 0x6e
   b85ee:	2d07      	cmp	r5, #7
   b85f0:	d81a      	bhi.n	b8628 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b85f2:	a701      	add	r7, pc, #4	; (adr r7, b85f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b85f4:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b85f8:	000b85e5 	.word	0x000b85e5
   b85fc:	000b8629 	.word	0x000b8629
   b8600:	000b8629 	.word	0x000b8629
   b8604:	000b8629 	.word	0x000b8629
   b8608:	000b85e5 	.word	0x000b85e5
   b860c:	000b8629 	.word	0x000b8629
   b8610:	000b85e5 	.word	0x000b85e5
   b8614:	000b862f 	.word	0x000b862f
   b8618:	3d5c      	subs	r5, #92	; 0x5c
   b861a:	b2ed      	uxtb	r5, r5
   b861c:	fa0c f505 	lsl.w	r5, ip, r5
   b8620:	f240 4741 	movw	r7, #1089	; 0x441
   b8624:	423d      	tst	r5, r7
   b8626:	d1dd      	bne.n	b85e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b8628:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b862c:	e77c      	b.n	b8528 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b862e:	f108 0502 	add.w	r5, r8, #2
   b8632:	6005      	str	r5, [r0, #0]
   b8634:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b8638:	f8d0 8000 	ldr.w	r8, [r0]
   b863c:	4542      	cmp	r2, r8
   b863e:	d803      	bhi.n	b8648 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b8640:	6805      	ldr	r5, [r0, #0]
   b8642:	3d01      	subs	r5, #1
   b8644:	6005      	str	r5, [r0, #0]
					break;
   b8646:	e7cd      	b.n	b85e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b8648:	f811 5008 	ldrb.w	r5, [r1, r8]
   b864c:	2d00      	cmp	r5, #0
   b864e:	d0f7      	beq.n	b8640 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b8650:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b8654:	f1bb 0f09 	cmp.w	fp, #9
   b8658:	d904      	bls.n	b8664 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b865a:	f025 0520 	bic.w	r5, r5, #32
   b865e:	3d41      	subs	r5, #65	; 0x41
   b8660:	2d05      	cmp	r5, #5
   b8662:	d8e1      	bhi.n	b8628 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b8664:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b8668:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b866c:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b866e:	d1e3      	bne.n	b8638 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b8670:	e7e6      	b.n	b8640 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b8672:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b8676:	f06f 0402 	mvn.w	r4, #2
   b867a:	e777      	b.n	b856c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b867c:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b8680:	2b00      	cmp	r3, #0
   b8682:	f43f aec2 	beq.w	b840a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b8686:	6885      	ldr	r5, [r0, #8]
   b8688:	1c6f      	adds	r7, r5, #1
   b868a:	f43f aebe 	beq.w	b840a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b868e:	012d      	lsls	r5, r5, #4
   b8690:	5d5d      	ldrb	r5, [r3, r5]
   b8692:	3d01      	subs	r5, #1
   b8694:	2d01      	cmp	r5, #1
   b8696:	f67f aeb8 	bls.w	b840a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b869a:	6845      	ldr	r5, [r0, #4]
   b869c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b86a0:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b86a4:	f1b8 0f00 	cmp.w	r8, #0
   b86a8:	f6ff aeaf 	blt.w	b840a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b86ac:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b86b0:	3d01      	subs	r5, #1
   b86b2:	2d01      	cmp	r5, #1
   b86b4:	d80a      	bhi.n	b86cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b86b6:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b86ba:	3501      	adds	r5, #1
   b86bc:	d006      	beq.n	b86cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b86be:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b86c2:	3501      	adds	r5, #1
   b86c4:	d102      	bne.n	b86cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b86c6:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b86ca:	e69e      	b.n	b840a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b86cc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b86d0:	f1ae 0e10 	sub.w	lr, lr, #16
   b86d4:	e7e6      	b.n	b86a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b86d6:	f1a5 0920 	sub.w	r9, r5, #32
   b86da:	4f24      	ldr	r7, [pc, #144]	; (b876c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b86dc:	fa5f f989 	uxtb.w	r9, r9
   b86e0:	fa0c f909 	lsl.w	r9, ip, r9
   b86e4:	ea19 0f07 	tst.w	r9, r7
   b86e8:	f47f aeaa 	bne.w	b8440 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b86ec:	3d20      	subs	r5, #32
   b86ee:	2d5e      	cmp	r5, #94	; 0x5e
   b86f0:	d89a      	bhi.n	b8628 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b86f2:	f108 0501 	add.w	r5, r8, #1
   b86f6:	6005      	str	r5, [r0, #0]
   b86f8:	e68f      	b.n	b841a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b86fa:	2d0d      	cmp	r5, #13
   b86fc:	d1f6      	bne.n	b86ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b86fe:	e69f      	b.n	b8440 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b8700:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b8704:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b8708:	e7f8      	b.n	b86fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b870a:	6845      	ldr	r5, [r0, #4]
   b870c:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b870e:	42af      	cmp	r7, r5
   b8710:	f67f af28 	bls.w	b8564 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b8714:	f105 0801 	add.w	r8, r5, #1
   b8718:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b871c:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b8720:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b8724:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b8728:	2700      	movs	r7, #0
   b872a:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b872c:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b8730:	f04f 0a04 	mov.w	sl, #4
   b8734:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b8738:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b873c:	6805      	ldr	r5, [r0, #0]
   b873e:	3d01      	subs	r5, #1
   b8740:	e683      	b.n	b844a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b8742:	2b00      	cmp	r3, #0
   b8744:	f43f af12 	beq.w	b856c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b8748:	6842      	ldr	r2, [r0, #4]
   b874a:	1e51      	subs	r1, r2, #1
   b874c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b8750:	2900      	cmp	r1, #0
   b8752:	f6ff af0b 	blt.w	b856c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b8756:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b875a:	3201      	adds	r2, #1
   b875c:	d003      	beq.n	b8766 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b875e:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b8762:	3201      	adds	r2, #1
   b8764:	d087      	beq.n	b8676 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b8766:	3901      	subs	r1, #1
   b8768:	3b10      	subs	r3, #16
   b876a:	e7f1      	b.n	b8750 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b876c:	04001001 	.word	0x04001001

000b8770 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b8770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b8772:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b8774:	4604      	mov	r4, r0
	if (offset == 0) {
   b8776:	b912      	cbnz	r2, b877e <_ZN10JsonParser5parseEv+0xe>
		return false;
   b8778:	2000      	movs	r0, #0
}
   b877a:	b003      	add	sp, #12
   b877c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b877e:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b8780:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b8784:	b1ab      	cbz	r3, b87b2 <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b8786:	2100      	movs	r1, #0
	parser->toknext = 0;
   b8788:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b878c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b8790:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b8792:	69c1      	ldr	r1, [r0, #28]
   b8794:	9100      	str	r1, [sp, #0]
   b8796:	6841      	ldr	r1, [r0, #4]
   b8798:	4630      	mov	r0, r6
   b879a:	f7ff fe0d 	bl	b83b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b879e:	1c43      	adds	r3, r0, #1
   b87a0:	d128      	bne.n	b87f4 <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b87a2:	7c25      	ldrb	r5, [r4, #16]
   b87a4:	2d00      	cmp	r5, #0
   b87a6:	d1e7      	bne.n	b8778 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b87a8:	6960      	ldr	r0, [r4, #20]
   b87aa:	f001 f825 	bl	b97f8 <free>
			tokens = 0;
   b87ae:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b87b0:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b87b2:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b87b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b87b8:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b87bc:	68e2      	ldr	r2, [r4, #12]
   b87be:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b87c0:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b87c2:	9500      	str	r5, [sp, #0]
   b87c4:	462b      	mov	r3, r5
   b87c6:	4630      	mov	r0, r6
   b87c8:	f7ff fdf6 	bl	b83b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b87cc:	2800      	cmp	r0, #0
   b87ce:	dbd3      	blt.n	b8778 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b87d0:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b87d2:	d017      	beq.n	b8804 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b87d4:	0100      	lsls	r0, r0, #4
   b87d6:	f001 f807 	bl	b97e8 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b87da:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b87dc:	6160      	str	r0, [r4, #20]
   b87de:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b87e0:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b87e2:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b87e6:	68e2      	ldr	r2, [r4, #12]
   b87e8:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b87ea:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b87ec:	4630      	mov	r0, r6
   b87ee:	f7ff fde3 	bl	b83b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b87f2:	e001      	b.n	b87f8 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b87f4:	2800      	cmp	r0, #0
   b87f6:	dbbf      	blt.n	b8778 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b87f8:	6963      	ldr	r3, [r4, #20]
   b87fa:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b87fe:	61a0      	str	r0, [r4, #24]
	return true;
   b8800:	2001      	movs	r0, #1
   b8802:	e7ba      	b.n	b877a <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b8804:	6963      	ldr	r3, [r4, #20]
   b8806:	61a3      	str	r3, [r4, #24]
   b8808:	e7fa      	b.n	b8800 <_ZN10JsonParser5parseEv+0x90>

000b880a <_ZN7TwoWire5writeEi.isra.0>:
   b880a:	6803      	ldr	r3, [r0, #0]
   b880c:	b2c9      	uxtb	r1, r1
   b880e:	689b      	ldr	r3, [r3, #8]
   b8810:	4718      	bx	r3

000b8812 <_ZN16Adafruit_VL6180XC1Ev>:
/*! 
    @brief  Instantiates a new VL6180X class
*/
/**************************************************************************/
Adafruit_VL6180X::Adafruit_VL6180X(void) {
}
   b8812:	4770      	bx	lr

000b8814 <_ZN16Adafruit_VL6180X5read8Et>:
/**************************************************************************/


// Read 1 byte from the VL6180X at 'address'
uint8_t Adafruit_VL6180X::read8(uint16_t address)
{
   b8814:	b538      	push	{r3, r4, r5, lr}
   b8816:	4604      	mov	r4, r0
   b8818:	460d      	mov	r5, r1
  uint8_t data;

  Wire.beginTransmission(_i2caddr);
   b881a:	f003 fb0f 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b881e:	7921      	ldrb	r1, [r4, #4]
   b8820:	f002 fa90 	bl	bad44 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(address>>8);
   b8824:	f003 fb0a 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b8828:	0a29      	lsrs	r1, r5, #8
   b882a:	f7ff ffee 	bl	b880a <_ZN7TwoWire5writeEi.isra.0>
  Wire.write(address);
   b882e:	f003 fb05 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b8832:	4629      	mov	r1, r5
   b8834:	f7ff ffe9 	bl	b880a <_ZN7TwoWire5writeEi.isra.0>
  Wire.endTransmission();
   b8838:	f003 fb00 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b883c:	f002 fa8d 	bl	bad5a <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(_i2caddr, (uint8_t)1);
   b8840:	f003 fafc 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b8844:	7921      	ldrb	r1, [r4, #4]
   b8846:	2201      	movs	r2, #1
   b8848:	f002 fa79 	bl	bad3e <_ZN7TwoWire11requestFromEhj>
  uint8_t r = Wire.read();
   b884c:	f003 faf6 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b8850:	6803      	ldr	r3, [r0, #0]
   b8852:	695b      	ldr	r3, [r3, #20]
   b8854:	4798      	blx	r3
#if defined(I2C_DEBUG)
  Serial.print("\t$"); Serial.print(address, HEX); Serial.print(": 0x"); Serial.println(r, HEX);
#endif

  return r;
}
   b8856:	b2c0      	uxtb	r0, r0
   b8858:	bd38      	pop	{r3, r4, r5, pc}

000b885a <_ZN16Adafruit_VL6180X6write8Eth>:
  return data;
}

// write 1 byte
void Adafruit_VL6180X::write8(uint16_t address, uint8_t data)
{
   b885a:	b570      	push	{r4, r5, r6, lr}
   b885c:	4606      	mov	r6, r0
   b885e:	4615      	mov	r5, r2
   b8860:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   b8862:	f003 faeb 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b8866:	7931      	ldrb	r1, [r6, #4]
   b8868:	f002 fa6c 	bl	bad44 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(address>>8);
   b886c:	f003 fae6 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b8870:	0a21      	lsrs	r1, r4, #8
   b8872:	f7ff ffca 	bl	b880a <_ZN7TwoWire5writeEi.isra.0>
  Wire.write(address);
   b8876:	f003 fae1 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b887a:	4621      	mov	r1, r4
   b887c:	f7ff ffc5 	bl	b880a <_ZN7TwoWire5writeEi.isra.0>
  Wire.write(data);  
   b8880:	f003 fadc 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b8884:	6803      	ldr	r3, [r0, #0]
   b8886:	4629      	mov	r1, r5
   b8888:	689b      	ldr	r3, [r3, #8]
   b888a:	4798      	blx	r3
  Wire.endTransmission();
   b888c:	f003 fad6 	bl	bbe3c <_Z19__fetch_global_Wirev>

#if defined(I2C_DEBUG)
  Serial.print("\t$"); Serial.print(address, HEX); Serial.print(" = 0x"); Serial.println(data, HEX);
#endif
}
   b8890:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Wire.endTransmission();
   b8894:	f002 ba61 	b.w	bad5a <_ZN7TwoWire15endTransmissionEv>

000b8898 <_ZN16Adafruit_VL6180X12loadSettingsEv>:
void Adafruit_VL6180X::loadSettings(void) {
   b8898:	b510      	push	{r4, lr}
    write8(0x0207, 0x01);
   b889a:	2201      	movs	r2, #1
void Adafruit_VL6180X::loadSettings(void) {
   b889c:	4604      	mov	r4, r0
    write8(0x0207, 0x01);
   b889e:	f240 2107 	movw	r1, #519	; 0x207
   b88a2:	f7ff ffda 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0208, 0x01);
   b88a6:	4620      	mov	r0, r4
   b88a8:	2201      	movs	r2, #1
   b88aa:	f44f 7102 	mov.w	r1, #520	; 0x208
   b88ae:	f7ff ffd4 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0096, 0x00);
   b88b2:	4620      	mov	r0, r4
   b88b4:	2200      	movs	r2, #0
   b88b6:	2196      	movs	r1, #150	; 0x96
   b88b8:	f7ff ffcf 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0097, 0xfd);
   b88bc:	4620      	mov	r0, r4
   b88be:	22fd      	movs	r2, #253	; 0xfd
   b88c0:	2197      	movs	r1, #151	; 0x97
   b88c2:	f7ff ffca 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00e3, 0x00);
   b88c6:	4620      	mov	r0, r4
   b88c8:	2200      	movs	r2, #0
   b88ca:	21e3      	movs	r1, #227	; 0xe3
   b88cc:	f7ff ffc5 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00e4, 0x04);
   b88d0:	4620      	mov	r0, r4
   b88d2:	2204      	movs	r2, #4
   b88d4:	21e4      	movs	r1, #228	; 0xe4
   b88d6:	f7ff ffc0 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00e5, 0x02);
   b88da:	4620      	mov	r0, r4
   b88dc:	2202      	movs	r2, #2
   b88de:	21e5      	movs	r1, #229	; 0xe5
   b88e0:	f7ff ffbb 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00e6, 0x01);
   b88e4:	4620      	mov	r0, r4
   b88e6:	2201      	movs	r2, #1
   b88e8:	21e6      	movs	r1, #230	; 0xe6
   b88ea:	f7ff ffb6 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00e7, 0x03);
   b88ee:	4620      	mov	r0, r4
   b88f0:	2203      	movs	r2, #3
   b88f2:	21e7      	movs	r1, #231	; 0xe7
   b88f4:	f7ff ffb1 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00f5, 0x02);
   b88f8:	4620      	mov	r0, r4
   b88fa:	2202      	movs	r2, #2
   b88fc:	21f5      	movs	r1, #245	; 0xf5
   b88fe:	f7ff ffac 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00d9, 0x05);
   b8902:	4620      	mov	r0, r4
   b8904:	2205      	movs	r2, #5
   b8906:	21d9      	movs	r1, #217	; 0xd9
   b8908:	f7ff ffa7 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00db, 0xce);
   b890c:	4620      	mov	r0, r4
   b890e:	22ce      	movs	r2, #206	; 0xce
   b8910:	21db      	movs	r1, #219	; 0xdb
   b8912:	f7ff ffa2 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00dc, 0x03);
   b8916:	4620      	mov	r0, r4
   b8918:	2203      	movs	r2, #3
   b891a:	21dc      	movs	r1, #220	; 0xdc
   b891c:	f7ff ff9d 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00dd, 0xf8);
   b8920:	4620      	mov	r0, r4
   b8922:	22f8      	movs	r2, #248	; 0xf8
   b8924:	21dd      	movs	r1, #221	; 0xdd
   b8926:	f7ff ff98 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x009f, 0x00);
   b892a:	4620      	mov	r0, r4
   b892c:	2200      	movs	r2, #0
   b892e:	219f      	movs	r1, #159	; 0x9f
   b8930:	f7ff ff93 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00a3, 0x3c);
   b8934:	4620      	mov	r0, r4
   b8936:	223c      	movs	r2, #60	; 0x3c
   b8938:	21a3      	movs	r1, #163	; 0xa3
   b893a:	f7ff ff8e 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00b7, 0x00);
   b893e:	4620      	mov	r0, r4
   b8940:	2200      	movs	r2, #0
   b8942:	21b7      	movs	r1, #183	; 0xb7
   b8944:	f7ff ff89 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00bb, 0x3c);
   b8948:	4620      	mov	r0, r4
   b894a:	223c      	movs	r2, #60	; 0x3c
   b894c:	21bb      	movs	r1, #187	; 0xbb
   b894e:	f7ff ff84 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00b2, 0x09);
   b8952:	4620      	mov	r0, r4
   b8954:	2209      	movs	r2, #9
   b8956:	21b2      	movs	r1, #178	; 0xb2
   b8958:	f7ff ff7f 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00ca, 0x09);
   b895c:	4620      	mov	r0, r4
   b895e:	2209      	movs	r2, #9
   b8960:	21ca      	movs	r1, #202	; 0xca
   b8962:	f7ff ff7a 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0198, 0x01);
   b8966:	4620      	mov	r0, r4
   b8968:	2201      	movs	r2, #1
   b896a:	f44f 71cc 	mov.w	r1, #408	; 0x198
   b896e:	f7ff ff74 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x01b0, 0x17);
   b8972:	4620      	mov	r0, r4
   b8974:	2217      	movs	r2, #23
   b8976:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
   b897a:	f7ff ff6e 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x01ad, 0x00);
   b897e:	4620      	mov	r0, r4
   b8980:	2200      	movs	r2, #0
   b8982:	f240 11ad 	movw	r1, #429	; 0x1ad
   b8986:	f7ff ff68 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00ff, 0x05);
   b898a:	4620      	mov	r0, r4
   b898c:	2205      	movs	r2, #5
   b898e:	21ff      	movs	r1, #255	; 0xff
   b8990:	f7ff ff63 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0100, 0x05);
   b8994:	4620      	mov	r0, r4
   b8996:	2205      	movs	r2, #5
   b8998:	f44f 7180 	mov.w	r1, #256	; 0x100
   b899c:	f7ff ff5d 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0199, 0x05);
   b89a0:	4620      	mov	r0, r4
   b89a2:	2205      	movs	r2, #5
   b89a4:	f240 1199 	movw	r1, #409	; 0x199
   b89a8:	f7ff ff57 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x01a6, 0x1b);
   b89ac:	4620      	mov	r0, r4
   b89ae:	221b      	movs	r2, #27
   b89b0:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   b89b4:	f7ff ff51 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x01ac, 0x3e);
   b89b8:	4620      	mov	r0, r4
   b89ba:	223e      	movs	r2, #62	; 0x3e
   b89bc:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   b89c0:	f7ff ff4b 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x01a7, 0x1f);
   b89c4:	4620      	mov	r0, r4
   b89c6:	221f      	movs	r2, #31
   b89c8:	f240 11a7 	movw	r1, #423	; 0x1a7
   b89cc:	f7ff ff45 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0030, 0x00);
   b89d0:	4620      	mov	r0, r4
   b89d2:	2200      	movs	r2, #0
   b89d4:	2130      	movs	r1, #48	; 0x30
   b89d6:	f7ff ff40 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0011, 0x10);       // Enables polling for 'New Sample ready'
   b89da:	4620      	mov	r0, r4
   b89dc:	2210      	movs	r2, #16
   b89de:	2111      	movs	r1, #17
   b89e0:	f7ff ff3b 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x010a, 0x30);       // Set the averaging sample period
   b89e4:	4620      	mov	r0, r4
   b89e6:	2230      	movs	r2, #48	; 0x30
   b89e8:	f44f 7185 	mov.w	r1, #266	; 0x10a
   b89ec:	f7ff ff35 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x003f, 0x46);       // Sets the light and dark gain (upper
   b89f0:	4620      	mov	r0, r4
   b89f2:	2246      	movs	r2, #70	; 0x46
   b89f4:	213f      	movs	r1, #63	; 0x3f
   b89f6:	f7ff ff30 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0031, 0xFF);       // sets the # of range measurements after
   b89fa:	4620      	mov	r0, r4
   b89fc:	22ff      	movs	r2, #255	; 0xff
   b89fe:	2131      	movs	r1, #49	; 0x31
   b8a00:	f7ff ff2b 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0040, 0x63);       // Set ALS integration time to 100ms
   b8a04:	4620      	mov	r0, r4
   b8a06:	2263      	movs	r2, #99	; 0x63
   b8a08:	2140      	movs	r1, #64	; 0x40
   b8a0a:	f7ff ff26 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x002e, 0x01);       // perform a single temperature calibration
   b8a0e:	4620      	mov	r0, r4
   b8a10:	2201      	movs	r2, #1
   b8a12:	212e      	movs	r1, #46	; 0x2e
   b8a14:	f7ff ff21 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x001b, 0x09);       // Set default ranging inter-measurement
   b8a18:	4620      	mov	r0, r4
   b8a1a:	2209      	movs	r2, #9
   b8a1c:	211b      	movs	r1, #27
   b8a1e:	f7ff ff1c 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x003e, 0x31);       // Set default ALS inter-measurement period
   b8a22:	4620      	mov	r0, r4
   b8a24:	2231      	movs	r2, #49	; 0x31
   b8a26:	213e      	movs	r1, #62	; 0x3e
   b8a28:	f7ff ff17 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0014, 0x24);       // Configures interrupt on 'New Sample
   b8a2c:	4620      	mov	r0, r4
   b8a2e:	2224      	movs	r2, #36	; 0x24
}
   b8a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write8(0x0014, 0x24);       // Configures interrupt on 'New Sample
   b8a34:	2114      	movs	r1, #20
   b8a36:	f7ff bf10 	b.w	b885a <_ZN16Adafruit_VL6180X6write8Eth>

000b8a3a <_ZN16Adafruit_VL6180X5beginEP7TwoWire>:
  _i2caddr = VL6180X_DEFAULT_I2C_ADDR;
   b8a3a:	2329      	movs	r3, #41	; 0x29
boolean Adafruit_VL6180X::begin(TwoWire *theWire) {
   b8a3c:	b510      	push	{r4, lr}
   b8a3e:	4604      	mov	r4, r0
  _i2caddr = VL6180X_DEFAULT_I2C_ADDR;
   b8a40:	7103      	strb	r3, [r0, #4]
  if (! theWire) {
   b8a42:	b9a9      	cbnz	r1, b8a70 <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x36>
    _i2c = &Wire;
   b8a44:	f003 f9fa 	bl	bbe3c <_Z19__fetch_global_Wirev>
   b8a48:	6020      	str	r0, [r4, #0]
  _i2c-> begin();
   b8a4a:	6820      	ldr	r0, [r4, #0]
   b8a4c:	f002 f948 	bl	bace0 <_ZN7TwoWire5beginEv>
  if (read8(VL6180X_REG_IDENTIFICATION_MODEL_ID) != 0xB4) {
   b8a50:	2100      	movs	r1, #0
   b8a52:	4620      	mov	r0, r4
   b8a54:	f7ff fede 	bl	b8814 <_ZN16Adafruit_VL6180X5read8Et>
   b8a58:	28b4      	cmp	r0, #180	; 0xb4
   b8a5a:	d10b      	bne.n	b8a74 <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x3a>
    loadSettings();
   b8a5c:	4620      	mov	r0, r4
   b8a5e:	f7ff ff1b 	bl	b8898 <_ZN16Adafruit_VL6180X12loadSettingsEv>
  write8(VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET, 0x00);
   b8a62:	4620      	mov	r0, r4
   b8a64:	2200      	movs	r2, #0
   b8a66:	2116      	movs	r1, #22
   b8a68:	f7ff fef7 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
   b8a6c:	2001      	movs	r0, #1
}
   b8a6e:	bd10      	pop	{r4, pc}
    _i2c = theWire;
   b8a70:	6001      	str	r1, [r0, #0]
   b8a72:	e7ea      	b.n	b8a4a <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x10>
    return false;
   b8a74:	2000      	movs	r0, #0
   b8a76:	e7fa      	b.n	b8a6e <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x34>

000b8a78 <_ZN16Adafruit_VL6180X9readRangeEv>:
uint8_t Adafruit_VL6180X::readRange(void) {
   b8a78:	b538      	push	{r3, r4, r5, lr}
   b8a7a:	4604      	mov	r4, r0
  while (! (read8(VL6180X_REG_RESULT_RANGE_STATUS) & 0x01));
   b8a7c:	214d      	movs	r1, #77	; 0x4d
   b8a7e:	4620      	mov	r0, r4
   b8a80:	f7ff fec8 	bl	b8814 <_ZN16Adafruit_VL6180X5read8Et>
   b8a84:	07c2      	lsls	r2, r0, #31
   b8a86:	d5f9      	bpl.n	b8a7c <_ZN16Adafruit_VL6180X9readRangeEv+0x4>
  write8(VL6180X_REG_SYSRANGE_START, 0x01);
   b8a88:	2201      	movs	r2, #1
   b8a8a:	2118      	movs	r1, #24
   b8a8c:	4620      	mov	r0, r4
   b8a8e:	f7ff fee4 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
  while (! (read8(VL6180X_REG_RESULT_INTERRUPT_STATUS_GPIO) & 0x04));
   b8a92:	214f      	movs	r1, #79	; 0x4f
   b8a94:	4620      	mov	r0, r4
   b8a96:	f7ff febd 	bl	b8814 <_ZN16Adafruit_VL6180X5read8Et>
   b8a9a:	0743      	lsls	r3, r0, #29
   b8a9c:	d5f9      	bpl.n	b8a92 <_ZN16Adafruit_VL6180X9readRangeEv+0x1a>
  uint8_t range = read8(VL6180X_REG_RESULT_RANGE_VAL);
   b8a9e:	2162      	movs	r1, #98	; 0x62
   b8aa0:	4620      	mov	r0, r4
   b8aa2:	f7ff feb7 	bl	b8814 <_ZN16Adafruit_VL6180X5read8Et>
  write8(VL6180X_REG_SYSTEM_INTERRUPT_CLEAR, 0x07);
   b8aa6:	2207      	movs	r2, #7
  uint8_t range = read8(VL6180X_REG_RESULT_RANGE_VAL);
   b8aa8:	4605      	mov	r5, r0
  write8(VL6180X_REG_SYSTEM_INTERRUPT_CLEAR, 0x07);
   b8aaa:	2115      	movs	r1, #21
   b8aac:	4620      	mov	r0, r4
   b8aae:	f7ff fed4 	bl	b885a <_ZN16Adafruit_VL6180X6write8Eth>
}
   b8ab2:	4628      	mov	r0, r5
   b8ab4:	bd38      	pop	{r3, r4, r5, pc}

000b8ab6 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b8ab6:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b8aba:	b510      	push	{r4, lr}
   b8abc:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b8abe:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b8ac0:	b113      	cbz	r3, b8ac8 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b8ac2:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b8ac4:	f000 fc74 	bl	b93b0 <os_mutex_lock>
#endif
#endif
#endif
        }
   b8ac8:	4620      	mov	r0, r4
   b8aca:	bd10      	pop	{r4, pc}

000b8acc <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b8acc:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b8ace:	6803      	ldr	r3, [r0, #0]
   b8ad0:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b8ad4:	4604      	mov	r4, r0
            if (mqtt->thread)
   b8ad6:	b112      	cbz	r2, b8ade <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b8ad8:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b8ada:	f000 fc71 	bl	b93c0 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b8ade:	4620      	mov	r0, r4
   b8ae0:	bd10      	pop	{r4, pc}

000b8ae2 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b8ae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8ae4:	461f      	mov	r7, r3
   b8ae6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b8aea:	4604      	mov	r4, r0
   b8aec:	460d      	mov	r5, r1
   b8aee:	4616      	mov	r6, r2
    if (thread) {
   b8af0:	b12b      	cbz	r3, b8afe <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b8af2:	2301      	movs	r3, #1
   b8af4:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b8af8:	3058      	adds	r0, #88	; 0x58
   b8afa:	f000 fc51 	bl	b93a0 <os_mutex_create>
    }
    this->callback = callback;
   b8afe:	9b08      	ldr	r3, [sp, #32]
   b8b00:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b8b02:	2300      	movs	r3, #0
   b8b04:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b8b06:	b106      	cbz	r6, b8b0a <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b8b08:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b8b0a:	b125      	cbz	r5, b8b16 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b8b0c:	4629      	mov	r1, r5
   b8b0e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b8b12:	f002 fbac 	bl	bb26e <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b8b16:	9b06      	ldr	r3, [sp, #24]
   b8b18:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b8b1a:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b8b1c:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b8b1e:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b8b22:	2bff      	cmp	r3, #255	; 0xff
   b8b24:	bfb8      	it	lt
   b8b26:	23ff      	movlt	r3, #255	; 0xff
   b8b28:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b8b2c:	b108      	cbz	r0, b8b32 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b8b2e:	f7fb fab8 	bl	b40a2 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b8b32:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b8b36:	f7fb fab0 	bl	b409a <_Znaj>
   b8b3a:	61e0      	str	r0, [r4, #28]
}
   b8b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b8b40 <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b8b40:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b8b44:	4604      	mov	r4, r0
            bool thread) {
   b8b46:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b8b48:	4617      	mov	r7, r2
   b8b4a:	4698      	mov	r8, r3
   b8b4c:	460e      	mov	r6, r1
            bool thread) {
   b8b4e:	f002 ff59 	bl	bba04 <_ZN9TCPClientC1Ev>
   b8b52:	490d      	ldr	r1, [pc, #52]	; (b8b88 <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b8b54:	61e5      	str	r5, [r4, #28]
   b8b56:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b8b5a:	f002 fb40 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b8b5e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b8b62:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b8b64:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b8b68:	22ff      	movs	r2, #255	; 0xff
   b8b6a:	230f      	movs	r3, #15
   b8b6c:	e9cd 3200 	strd	r3, r2, [sp]
   b8b70:	4620      	mov	r0, r4
            bool thread) {
   b8b72:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b8b76:	463b      	mov	r3, r7
   b8b78:	462a      	mov	r2, r5
   b8b7a:	4631      	mov	r1, r6
   b8b7c:	f7ff ffb1 	bl	b8ae2 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b8b80:	4620      	mov	r0, r4
   b8b82:	b004      	add	sp, #16
   b8b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8b88:	000bf5d2 	.word	0x000bf5d2

000b8b8c <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b8b8c:	b510      	push	{r4, lr}
   b8b8e:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b8b90:	4620      	mov	r0, r4
   b8b92:	f002 fe93 	bl	bb8bc <_ZN9TCPClient9availableEv>
   b8b96:	2800      	cmp	r0, #0
   b8b98:	d0fa      	beq.n	b8b90 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b8b9a:	4620      	mov	r0, r4
   b8b9c:	f002 fc78 	bl	bb490 <_ZN9TCPClient4readEv>
}
   b8ba0:	b2c0      	uxtb	r0, r0
   b8ba2:	bd10      	pop	{r4, pc}

000b8ba4 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b8ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8ba8:	4605      	mov	r5, r0
   b8baa:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b8bac:	f7ff ffee 	bl	b8b8c <_ZN4MQTT8readByteEv>
   b8bb0:	69eb      	ldr	r3, [r5, #28]
   b8bb2:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b8bb4:	69eb      	ldr	r3, [r5, #28]
   b8bb6:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b8bba:	f04f 0901 	mov.w	r9, #1
   b8bbe:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b8bc2:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b8bc4:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b8bc6:	4628      	mov	r0, r5
   b8bc8:	f7ff ffe0 	bl	b8b8c <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b8bcc:	4626      	mov	r6, r4
   b8bce:	69eb      	ldr	r3, [r5, #28]
   b8bd0:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b8bd2:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b8bd6:	fb13 f309 	smulbb	r3, r3, r9
   b8bda:	441f      	add	r7, r3
        buffer[len++] = digit;
   b8bdc:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b8bde:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b8be0:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b8be2:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b8be4:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b8be8:	d4ed      	bmi.n	b8bc6 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b8bea:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b8bec:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b8bf0:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b8bf4:	d11e      	bne.n	b8c34 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b8bf6:	4628      	mov	r0, r5
   b8bf8:	f7ff ffc8 	bl	b8b8c <_ZN4MQTT8readByteEv>
   b8bfc:	69eb      	ldr	r3, [r5, #28]
   b8bfe:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b8c00:	4628      	mov	r0, r5
   b8c02:	f7ff ffc3 	bl	b8b8c <_ZN4MQTT8readByteEv>
   b8c06:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b8c08:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b8c0a:	b2b6      	uxth	r6, r6
   b8c0c:	69eb      	ldr	r3, [r5, #28]
   b8c0e:	b2a4      	uxth	r4, r4
   b8c10:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b8c12:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b8c14:	b2b6      	uxth	r6, r6
   b8c16:	42be      	cmp	r6, r7
   b8c18:	d20e      	bcs.n	b8c38 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b8c1a:	4628      	mov	r0, r5
   b8c1c:	f7ff ffb6 	bl	b8b8c <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b8c20:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b8c24:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b8c26:	bf84      	itt	hi
   b8c28:	69eb      	ldrhi	r3, [r5, #28]
   b8c2a:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b8c2c:	3401      	adds	r4, #1
   b8c2e:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b8c30:	3601      	adds	r6, #1
   b8c32:	e7ef      	b.n	b8c14 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b8c34:	2600      	movs	r6, #0
   b8c36:	e7ed      	b.n	b8c14 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b8c38:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b8c3c:	42a3      	cmp	r3, r4
   b8c3e:	bf2c      	ite	cs
   b8c40:	4620      	movcs	r0, r4
   b8c42:	2000      	movcc	r0, #0
   b8c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b8c48 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b8c48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b8c4c:	4615      	mov	r5, r2
   b8c4e:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b8c50:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b8c52:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b8c54:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b8c56:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b8c58:	a802      	add	r0, sp, #8
        digit = len % 128;
   b8c5a:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b8c5e:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b8c62:	f103 0401 	add.w	r4, r3, #1
   b8c66:	4403      	add	r3, r0
            digit |= 0x80;
   b8c68:	bf88      	it	hi
   b8c6a:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b8c6e:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b8c72:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b8c76:	b2e4      	uxtb	r4, r4
   b8c78:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b8c7c:	d81e      	bhi.n	b8cbc <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b8c7e:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b8c82:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b8c86:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b8c88:	4622      	mov	r2, r4
   b8c8a:	a901      	add	r1, sp, #4
   b8c8c:	4428      	add	r0, r5
    buf[4-llen] = header;
   b8c8e:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b8c92:	f004 f921 	bl	bced8 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b8c96:	1c72      	adds	r2, r6, #1
   b8c98:	4422      	add	r2, r4
   b8c9a:	4641      	mov	r1, r8
   b8c9c:	4638      	mov	r0, r7
   b8c9e:	f002 fbe2 	bl	bb466 <_ZN9TCPClient5writeEPKhj>
   b8ca2:	4605      	mov	r5, r0
   b8ca4:	f000 fbbc 	bl	b9420 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b8ca8:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b8caa:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b8cac:	4432      	add	r2, r6
   b8cae:	b2a8      	uxth	r0, r5
}
   b8cb0:	1a13      	subs	r3, r2, r0
   b8cb2:	4258      	negs	r0, r3
   b8cb4:	4158      	adcs	r0, r3
   b8cb6:	b002      	add	sp, #8
   b8cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b8cbc:	4623      	mov	r3, r4
   b8cbe:	e7ca      	b.n	b8c56 <_ZN4MQTT5writeEhPht+0xe>

000b8cc0 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   b8cc0:	b513      	push	{r0, r1, r4, lr}
   b8cc2:	4604      	mov	r4, r0
    MutexLocker lock(this);
   b8cc4:	4601      	mov	r1, r0
   b8cc6:	a801      	add	r0, sp, #4
   b8cc8:	f7ff fef5 	bl	b8ab6 <_ZN4MQTT11MutexLockerC1EPS_>
    buffer[0] = MQTTDISCONNECT;
   b8ccc:	69e3      	ldr	r3, [r4, #28]
   b8cce:	22e0      	movs	r2, #224	; 0xe0
   b8cd0:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   b8cd2:	69e3      	ldr	r3, [r4, #28]
   b8cd4:	2200      	movs	r2, #0
   b8cd6:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
   b8cd8:	69e1      	ldr	r1, [r4, #28]
   b8cda:	2202      	movs	r2, #2
   b8cdc:	4620      	mov	r0, r4
   b8cde:	f002 fbc2 	bl	bb466 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   b8ce2:	4620      	mov	r0, r4
   b8ce4:	f002 fe44 	bl	bb970 <_ZN9TCPClient4stopEv>
   b8ce8:	f000 fb9a 	bl	b9420 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   b8cec:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
    MutexLocker lock(this);
   b8cf0:	a801      	add	r0, sp, #4
   b8cf2:	f7ff feeb 	bl	b8acc <_ZN4MQTT11MutexLockerD1Ev>
}
   b8cf6:	b002      	add	sp, #8
   b8cf8:	bd10      	pop	{r4, pc}

000b8cfa <_ZN4MQTT11writeStringEPKcPht>:

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b8cfa:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b8cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8cfe:	4605      	mov	r5, r0
    pos += 2;
   b8d00:	b298      	uxth	r0, r3
   b8d02:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b8d04:	5cce      	ldrb	r6, [r1, r3]
   b8d06:	b29c      	uxth	r4, r3
   b8d08:	b156      	cbz	r6, b8d20 <_ZN4MQTT11writeStringEPKcPht+0x26>
   b8d0a:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b8d0e:	4584      	cmp	ip, r0
   b8d10:	f103 0701 	add.w	r7, r3, #1
   b8d14:	d904      	bls.n	b8d20 <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b8d16:	1c44      	adds	r4, r0, #1
   b8d18:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b8d1a:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b8d1c:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b8d1e:	e7f1      	b.n	b8d04 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b8d20:	b299      	uxth	r1, r3
   b8d22:	1a41      	subs	r1, r0, r1
   b8d24:	440a      	add	r2, r1
   b8d26:	0a21      	lsrs	r1, r4, #8
   b8d28:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b8d2c:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b8d30:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8d32 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b8d32:	b538      	push	{r3, r4, r5, lr}
   b8d34:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b8d36:	f002 fce3 	bl	bb700 <_ZN9TCPClient9connectedEv>
   b8d3a:	2800      	cmp	r0, #0
   b8d3c:	bf14      	ite	ne
   b8d3e:	2501      	movne	r5, #1
   b8d40:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b8d42:	d102      	bne.n	b8d4a <_ZN4MQTT11isConnectedEv+0x18>
   b8d44:	4620      	mov	r0, r4
   b8d46:	f002 fe13 	bl	bb970 <_ZN9TCPClient4stopEv>
    return rc;
}
   b8d4a:	4628      	mov	r0, r5
   b8d4c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b8d50 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b8d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8d54:	b088      	sub	sp, #32
   b8d56:	4604      	mov	r4, r0
   b8d58:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b8d5c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b8d60:	4689      	mov	r9, r1
   b8d62:	4617      	mov	r7, r2
   b8d64:	461e      	mov	r6, r3
    if (!isConnected()) {
   b8d66:	f7ff ffe4 	bl	b8d32 <_ZN4MQTT11isConnectedEv>
   b8d6a:	4605      	mov	r5, r0
   b8d6c:	2800      	cmp	r0, #0
   b8d6e:	f040 80cd 	bne.w	b8f0c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b8d72:	4621      	mov	r1, r4
   b8d74:	a801      	add	r0, sp, #4
   b8d76:	f7ff fe9e 	bl	b8ab6 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b8d7a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b8d7c:	2900      	cmp	r1, #0
   b8d7e:	f040 8088 	bne.w	b8e92 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b8d82:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b8d86:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b8d88:	462b      	mov	r3, r5
   b8d8a:	4620      	mov	r0, r4
   b8d8c:	f002 fc3a 	bl	bb604 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b8d90:	2800      	cmp	r0, #0
   b8d92:	d07a      	beq.n	b8e8a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b8d94:	2301      	movs	r3, #1
   b8d96:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b8d98:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b8d9c:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b8d9e:	2b04      	cmp	r3, #4
   b8da0:	4b5b      	ldr	r3, [pc, #364]	; (b8f10 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b8da2:	f040 8081 	bne.w	b8ea8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b8da6:	6818      	ldr	r0, [r3, #0]
   b8da8:	8899      	ldrh	r1, [r3, #4]
   b8daa:	799b      	ldrb	r3, [r3, #6]
   b8dac:	f8ad 100c 	strh.w	r1, [sp, #12]
   b8db0:	f88d 300e 	strb.w	r3, [sp, #14]
   b8db4:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b8db6:	f8c2 0005 	str.w	r0, [r2, #5]
   b8dba:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b8dbe:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b8dc2:	f8a2 1009 	strh.w	r1, [r2, #9]
   b8dc6:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b8dc8:	230c      	movs	r3, #12
            if (willTopic) {
   b8dca:	f1b8 0f00 	cmp.w	r8, #0
   b8dce:	f000 8081 	beq.w	b8ed4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b8dd2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b8dd6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b8dda:	0140      	lsls	r0, r0, #5
   b8ddc:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b8de0:	f040 0006 	orr.w	r0, r0, #6
   b8de4:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b8de6:	f1ba 0f00 	cmp.w	sl, #0
   b8dea:	d101      	bne.n	b8df0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b8dec:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b8df0:	b11f      	cbz	r7, b8dfa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b8df2:	2e00      	cmp	r6, #0
   b8df4:	d170      	bne.n	b8ed8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b8df6:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b8dfa:	69e2      	ldr	r2, [r4, #28]
   b8dfc:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b8dfe:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b8e00:	69e1      	ldr	r1, [r4, #28]
   b8e02:	1c58      	adds	r0, r3, #1
   b8e04:	1212      	asrs	r2, r2, #8
   b8e06:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b8e08:	1c9a      	adds	r2, r3, #2
   b8e0a:	69e1      	ldr	r1, [r4, #28]
   b8e0c:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b8e0e:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b8e10:	3303      	adds	r3, #3
   b8e12:	69e2      	ldr	r2, [r4, #28]
   b8e14:	4649      	mov	r1, r9
   b8e16:	4620      	mov	r0, r4
   b8e18:	f7ff ff6f 	bl	b8cfa <_ZN4MQTT11writeStringEPKcPht>
   b8e1c:	4603      	mov	r3, r0
            if (willTopic) {
   b8e1e:	f1b8 0f00 	cmp.w	r8, #0
   b8e22:	d00b      	beq.n	b8e3c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b8e24:	69e2      	ldr	r2, [r4, #28]
   b8e26:	4641      	mov	r1, r8
   b8e28:	4620      	mov	r0, r4
   b8e2a:	f7ff ff66 	bl	b8cfa <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b8e2e:	69e2      	ldr	r2, [r4, #28]
   b8e30:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b8e32:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b8e34:	4620      	mov	r0, r4
   b8e36:	f7ff ff60 	bl	b8cfa <_ZN4MQTT11writeStringEPKcPht>
   b8e3a:	4603      	mov	r3, r0
            if(user != NULL) {
   b8e3c:	b167      	cbz	r7, b8e58 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b8e3e:	69e2      	ldr	r2, [r4, #28]
   b8e40:	4639      	mov	r1, r7
   b8e42:	4620      	mov	r0, r4
   b8e44:	f7ff ff59 	bl	b8cfa <_ZN4MQTT11writeStringEPKcPht>
   b8e48:	4603      	mov	r3, r0
                if(pass != NULL) {
   b8e4a:	b12e      	cbz	r6, b8e58 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b8e4c:	69e2      	ldr	r2, [r4, #28]
   b8e4e:	4631      	mov	r1, r6
   b8e50:	4620      	mov	r0, r4
   b8e52:	f7ff ff52 	bl	b8cfa <_ZN4MQTT11writeStringEPKcPht>
   b8e56:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b8e58:	3b05      	subs	r3, #5
   b8e5a:	69e2      	ldr	r2, [r4, #28]
   b8e5c:	b29b      	uxth	r3, r3
   b8e5e:	2110      	movs	r1, #16
   b8e60:	4620      	mov	r0, r4
   b8e62:	f7ff fef1 	bl	b8c48 <_ZN4MQTT5writeEhPht>
   b8e66:	f000 fadb 	bl	b9420 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b8e6a:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b8e6e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b8e72:	4620      	mov	r0, r4
   b8e74:	f002 fd22 	bl	bb8bc <_ZN9TCPClient9availableEv>
   b8e78:	bb88      	cbnz	r0, b8ede <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b8e7a:	f000 fad1 	bl	b9420 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b8e7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b8e80:	1ac0      	subs	r0, r0, r3
   b8e82:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b8e84:	4373      	muls	r3, r6
   b8e86:	4298      	cmp	r0, r3
   b8e88:	d9f3      	bls.n	b8e72 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b8e8a:	4620      	mov	r0, r4
   b8e8c:	f002 fd70 	bl	bb970 <_ZN9TCPClient4stopEv>
   b8e90:	e035      	b.n	b8efe <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b8e92:	a802      	add	r0, sp, #8
   b8e94:	f001 fff4 	bl	bae80 <_ZN9IPAddressC1EPKh>
   b8e98:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b8e9c:	462b      	mov	r3, r5
   b8e9e:	a902      	add	r1, sp, #8
   b8ea0:	4620      	mov	r0, r4
   b8ea2:	f002 fc8f 	bl	bb7c4 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b8ea6:	e773      	b.n	b8d90 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b8ea8:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b8eac:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b8eb0:	7bdb      	ldrb	r3, [r3, #15]
   b8eb2:	f10d 0c08 	add.w	ip, sp, #8
   b8eb6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b8eba:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b8ebe:	ab02      	add	r3, sp, #8
   b8ec0:	cb03      	ldmia	r3!, {r0, r1}
   b8ec2:	f8c2 0005 	str.w	r0, [r2, #5]
   b8ec6:	f8c2 1009 	str.w	r1, [r2, #9]
   b8eca:	f89c 3000 	ldrb.w	r3, [ip]
   b8ece:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b8ed0:	230e      	movs	r3, #14
   b8ed2:	e77a      	b.n	b8dca <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b8ed4:	2002      	movs	r0, #2
   b8ed6:	e786      	b.n	b8de6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b8ed8:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b8edc:	e78d      	b.n	b8dfa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b8ede:	a902      	add	r1, sp, #8
   b8ee0:	4620      	mov	r0, r4
   b8ee2:	f7ff fe5f 	bl	b8ba4 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b8ee6:	2804      	cmp	r0, #4
   b8ee8:	d1cf      	bne.n	b8e8a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b8eea:	69e3      	ldr	r3, [r4, #28]
   b8eec:	78de      	ldrb	r6, [r3, #3]
   b8eee:	2e00      	cmp	r6, #0
   b8ef0:	d1cb      	bne.n	b8e8a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b8ef2:	f000 fa95 	bl	b9420 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b8ef6:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b8ef8:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b8efa:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b8efe:	a801      	add	r0, sp, #4
   b8f00:	f7ff fde4 	bl	b8acc <_ZN4MQTT11MutexLockerD1Ev>
}
   b8f04:	4628      	mov	r0, r5
   b8f06:	b008      	add	sp, #32
   b8f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b8f0c:	2500      	movs	r5, #0
   b8f0e:	e7f9      	b.n	b8f04 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b8f10:	000bf608 	.word	0x000bf608

000b8f14 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b8f14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b8f16:	2301      	movs	r3, #1
   b8f18:	2204      	movs	r2, #4
   b8f1a:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b8f1e:	2300      	movs	r3, #0
   b8f20:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b8f24:	e9cd 3300 	strd	r3, r3, [sp]
   b8f28:	461a      	mov	r2, r3
   b8f2a:	f7ff ff11 	bl	b8d50 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b8f2e:	b007      	add	sp, #28
   b8f30:	f85d fb04 	ldr.w	pc, [sp], #4

000b8f34 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b8f34:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8f36:	4604      	mov	r4, r0
   b8f38:	460e      	mov	r6, r1
    if (isConnected()) {
   b8f3a:	f7ff fefa 	bl	b8d32 <_ZN4MQTT11isConnectedEv>
   b8f3e:	4605      	mov	r5, r0
   b8f40:	b1c8      	cbz	r0, b8f76 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b8f42:	4621      	mov	r1, r4
   b8f44:	a801      	add	r0, sp, #4
   b8f46:	f7ff fdb6 	bl	b8ab6 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b8f4a:	69e3      	ldr	r3, [r4, #28]
   b8f4c:	2262      	movs	r2, #98	; 0x62
   b8f4e:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b8f50:	69e3      	ldr	r3, [r4, #28]
   b8f52:	2202      	movs	r2, #2
   b8f54:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b8f56:	69e3      	ldr	r3, [r4, #28]
   b8f58:	0a32      	lsrs	r2, r6, #8
   b8f5a:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b8f5c:	69e3      	ldr	r3, [r4, #28]
   b8f5e:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b8f60:	69e1      	ldr	r1, [r4, #28]
   b8f62:	2204      	movs	r2, #4
   b8f64:	4620      	mov	r0, r4
   b8f66:	f002 fa7e 	bl	bb466 <_ZN9TCPClient5writeEPKhj>
   b8f6a:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b8f6c:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b8f6e:	bf18      	it	ne
   b8f70:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b8f72:	f7ff fdab 	bl	b8acc <_ZN4MQTT11MutexLockerD1Ev>
}
   b8f76:	4628      	mov	r0, r5
   b8f78:	b002      	add	sp, #8
   b8f7a:	bd70      	pop	{r4, r5, r6, pc}

000b8f7c <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b8f7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8f7e:	4604      	mov	r4, r0
   b8f80:	460e      	mov	r6, r1
    if (isConnected()) {
   b8f82:	f7ff fed6 	bl	b8d32 <_ZN4MQTT11isConnectedEv>
   b8f86:	4605      	mov	r5, r0
   b8f88:	b1c8      	cbz	r0, b8fbe <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b8f8a:	4621      	mov	r1, r4
   b8f8c:	a801      	add	r0, sp, #4
   b8f8e:	f7ff fd92 	bl	b8ab6 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b8f92:	69e3      	ldr	r3, [r4, #28]
   b8f94:	2272      	movs	r2, #114	; 0x72
   b8f96:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b8f98:	69e3      	ldr	r3, [r4, #28]
   b8f9a:	2202      	movs	r2, #2
   b8f9c:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b8f9e:	69e3      	ldr	r3, [r4, #28]
   b8fa0:	0a32      	lsrs	r2, r6, #8
   b8fa2:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b8fa4:	69e3      	ldr	r3, [r4, #28]
   b8fa6:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b8fa8:	69e1      	ldr	r1, [r4, #28]
   b8faa:	2204      	movs	r2, #4
   b8fac:	4620      	mov	r0, r4
   b8fae:	f002 fa5a 	bl	bb466 <_ZN9TCPClient5writeEPKhj>
   b8fb2:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b8fb4:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b8fb6:	bf18      	it	ne
   b8fb8:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b8fba:	f7ff fd87 	bl	b8acc <_ZN4MQTT11MutexLockerD1Ev>
}
   b8fbe:	4628      	mov	r0, r5
   b8fc0:	b002      	add	sp, #8
   b8fc2:	bd70      	pop	{r4, r5, r6, pc}

000b8fc4 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b8fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8fc8:	ed2d 8b02 	vpush	{d8}
   b8fcc:	b087      	sub	sp, #28
   b8fce:	af00      	add	r7, sp, #0
   b8fd0:	4604      	mov	r4, r0
    if (isConnected()) {
   b8fd2:	f7ff feae 	bl	b8d32 <_ZN4MQTT11isConnectedEv>
   b8fd6:	4681      	mov	r9, r0
   b8fd8:	b1f8      	cbz	r0, b901a <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b8fda:	4621      	mov	r1, r4
   b8fdc:	f107 0014 	add.w	r0, r7, #20
   b8fe0:	f7ff fd69 	bl	b8ab6 <_ZN4MQTT11MutexLockerC1EPS_>
   b8fe4:	f000 fa1c 	bl	b9420 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b8fe8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b8fea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b8fee:	4353      	muls	r3, r2
   b8ff0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b8ff2:	1a82      	subs	r2, r0, r2
   b8ff4:	429a      	cmp	r2, r3
   b8ff6:	4606      	mov	r6, r0
   b8ff8:	d803      	bhi.n	b9002 <_ZN4MQTT4loopEv+0x3e>
   b8ffa:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b8ffc:	1a82      	subs	r2, r0, r2
   b8ffe:	4293      	cmp	r3, r2
   b9000:	d221      	bcs.n	b9046 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b9002:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b9006:	b17b      	cbz	r3, b9028 <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b9008:	4620      	mov	r0, r4
   b900a:	f002 fcb1 	bl	bb970 <_ZN9TCPClient4stopEv>
                return false;
   b900e:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b9012:	f107 0014 	add.w	r0, r7, #20
   b9016:	f7ff fd59 	bl	b8acc <_ZN4MQTT11MutexLockerD1Ev>
}
   b901a:	4648      	mov	r0, r9
   b901c:	371c      	adds	r7, #28
   b901e:	46bd      	mov	sp, r7
   b9020:	ecbd 8b02 	vpop	{d8}
   b9024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b9028:	69e2      	ldr	r2, [r4, #28]
   b902a:	21c0      	movs	r1, #192	; 0xc0
   b902c:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b902e:	69e2      	ldr	r2, [r4, #28]
   b9030:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b9032:	69e1      	ldr	r1, [r4, #28]
   b9034:	2202      	movs	r2, #2
   b9036:	4620      	mov	r0, r4
   b9038:	f002 fa15 	bl	bb466 <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b903c:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b9040:	2301      	movs	r3, #1
   b9042:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b9046:	4620      	mov	r0, r4
   b9048:	f002 fc38 	bl	bb8bc <_ZN9TCPClient9availableEv>
   b904c:	2800      	cmp	r0, #0
   b904e:	d0e0      	beq.n	b9012 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b9050:	f107 0113 	add.w	r1, r7, #19
   b9054:	4620      	mov	r0, r4
   b9056:	f7ff fda5 	bl	b8ba4 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b905a:	4683      	mov	fp, r0
   b905c:	2800      	cmp	r0, #0
   b905e:	d0d8      	beq.n	b9012 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b9060:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b9062:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b9064:	7819      	ldrb	r1, [r3, #0]
   b9066:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b906a:	2a30      	cmp	r2, #48	; 0x30
   b906c:	d17f      	bne.n	b916e <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b906e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b9072:	f1ba 0f00 	cmp.w	sl, #0
   b9076:	d0cc      	beq.n	b9012 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b9078:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b907c:	466a      	mov	r2, sp
   b907e:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b9082:	eb03 020c 	add.w	r2, r3, ip
   b9086:	7851      	ldrb	r1, [r2, #1]
   b9088:	7895      	ldrb	r5, [r2, #2]
   b908a:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b908e:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b9090:	f105 0208 	add.w	r2, r5, #8
   b9094:	4669      	mov	r1, sp
   b9096:	08d2      	lsrs	r2, r2, #3
   b9098:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b909c:	4695      	mov	sp, r2
   b909e:	f10c 0203 	add.w	r2, ip, #3
   b90a2:	60fa      	str	r2, [r7, #12]
   b90a4:	eb03 0e02 	add.w	lr, r3, r2
   b90a8:	eb0d 0205 	add.w	r2, sp, r5
   b90ac:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b90ae:	f8c7 d008 	str.w	sp, [r7, #8]
   b90b2:	607a      	str	r2, [r7, #4]
   b90b4:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b90b8:	428a      	cmp	r2, r1
   b90ba:	d006      	beq.n	b90ca <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b90bc:	460a      	mov	r2, r1
   b90be:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b90c2:	f802 8b01 	strb.w	r8, [r2], #1
   b90c6:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b90c8:	e7f4      	b.n	b90b4 <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b90ca:	2200      	movs	r2, #0
   b90cc:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b90ce:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b90d2:	68f9      	ldr	r1, [r7, #12]
   b90d4:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b90d8:	ebab 020c 	sub.w	r2, fp, ip
   b90dc:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b90de:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b90e2:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b90e6:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b90e8:	d125      	bne.n	b9136 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b90ea:	f813 e001 	ldrb.w	lr, [r3, r1]
   b90ee:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b90f0:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b90f2:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b90f6:	f10c 0105 	add.w	r1, ip, #5
   b90fa:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b90fc:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b90fe:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b9102:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b9104:	69e3      	ldr	r3, [r4, #28]
   b9106:	2240      	movs	r2, #64	; 0x40
   b9108:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b910a:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b910c:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b9110:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b9114:	69e3      	ldr	r3, [r4, #28]
   b9116:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b911a:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b911c:	69e3      	ldr	r3, [r4, #28]
   b911e:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b9122:	69e1      	ldr	r1, [r4, #28]
   b9124:	2204      	movs	r2, #4
   b9126:	4620      	mov	r0, r4
   b9128:	f002 f99d 	bl	bb466 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b912c:	6266      	str	r6, [r4, #36]	; 0x24
   b912e:	ee18 3a10 	vmov	r3, s16
   b9132:	469d      	mov	sp, r3
   b9134:	e76d      	b.n	b9012 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b9136:	f1b8 0f04 	cmp.w	r8, #4
   b913a:	d115      	bne.n	b9168 <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b913c:	f813 e001 	ldrb.w	lr, [r3, r1]
   b9140:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b9142:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b9144:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b9148:	f10c 0105 	add.w	r1, ip, #5
   b914c:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b914e:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b9150:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b9154:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b9156:	69e3      	ldr	r3, [r4, #28]
   b9158:	2250      	movs	r2, #80	; 0x50
   b915a:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b915c:	69e3      	ldr	r3, [r4, #28]
   b915e:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b9160:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b9164:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b9166:	e7d5      	b.n	b9114 <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b9168:	4419      	add	r1, r3
   b916a:	47d0      	blx	sl
   b916c:	e7df      	b.n	b912e <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b916e:	2a50      	cmp	r2, #80	; 0x50
   b9170:	d108      	bne.n	b9184 <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b9172:	789a      	ldrb	r2, [r3, #2]
   b9174:	78d9      	ldrb	r1, [r3, #3]
   b9176:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b917a:	b289      	uxth	r1, r1
   b917c:	4620      	mov	r0, r4
   b917e:	f7ff fed9 	bl	b8f34 <_ZN4MQTT14publishReleaseEt>
   b9182:	e746      	b.n	b9012 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b9184:	2a40      	cmp	r2, #64	; 0x40
   b9186:	d112      	bne.n	b91ae <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b9188:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b918a:	2a00      	cmp	r2, #0
   b918c:	f43f af41 	beq.w	b9012 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b9190:	f1bb 0f04 	cmp.w	fp, #4
   b9194:	f47f af3d 	bne.w	b9012 <_ZN4MQTT4loopEv+0x4e>
   b9198:	f011 0f06 	tst.w	r1, #6
   b919c:	f47f af39 	bne.w	b9012 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b91a0:	7899      	ldrb	r1, [r3, #2]
   b91a2:	78d8      	ldrb	r0, [r3, #3]
   b91a4:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b91a8:	b280      	uxth	r0, r0
   b91aa:	4790      	blx	r2
   b91ac:	e731      	b.n	b9012 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b91ae:	2a60      	cmp	r2, #96	; 0x60
   b91b0:	d108      	bne.n	b91c4 <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b91b2:	789a      	ldrb	r2, [r3, #2]
   b91b4:	78d9      	ldrb	r1, [r3, #3]
   b91b6:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b91ba:	b289      	uxth	r1, r1
   b91bc:	4620      	mov	r0, r4
   b91be:	f7ff fedd 	bl	b8f7c <_ZN4MQTT15publishCompleteEt>
   b91c2:	e726      	b.n	b9012 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b91c4:	2a70      	cmp	r2, #112	; 0x70
   b91c6:	d0df      	beq.n	b9188 <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b91c8:	2a90      	cmp	r2, #144	; 0x90
   b91ca:	f43f af22 	beq.w	b9012 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b91ce:	2ac0      	cmp	r2, #192	; 0xc0
   b91d0:	d10a      	bne.n	b91e8 <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b91d2:	22d0      	movs	r2, #208	; 0xd0
   b91d4:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b91d6:	69e3      	ldr	r3, [r4, #28]
   b91d8:	2200      	movs	r2, #0
   b91da:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b91dc:	69e1      	ldr	r1, [r4, #28]
   b91de:	2202      	movs	r2, #2
   b91e0:	4620      	mov	r0, r4
   b91e2:	f002 f940 	bl	bb466 <_ZN9TCPClient5writeEPKhj>
   b91e6:	e714      	b.n	b9012 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b91e8:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b91ea:	bf04      	itt	eq
   b91ec:	2300      	moveq	r3, #0
   b91ee:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b91f2:	e70e      	b.n	b9012 <_ZN4MQTT4loopEv+0x4e>

000b91f4 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b91f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b91f6:	4604      	mov	r4, r0
   b91f8:	460f      	mov	r7, r1
   b91fa:	4616      	mov	r6, r2
    if (isConnected()) {
   b91fc:	f7ff fd99 	bl	b8d32 <_ZN4MQTT11isConnectedEv>
   b9200:	4605      	mov	r5, r0
   b9202:	b310      	cbz	r0, b924a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b9204:	4621      	mov	r1, r4
   b9206:	a801      	add	r0, sp, #4
   b9208:	f7ff fc55 	bl	b8ab6 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b920c:	8c23      	ldrh	r3, [r4, #32]
   b920e:	3301      	adds	r3, #1
   b9210:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b9212:	b1eb      	cbz	r3, b9250 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b9214:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b9216:	8c23      	ldrh	r3, [r4, #32]
   b9218:	69e2      	ldr	r2, [r4, #28]
   b921a:	0a1b      	lsrs	r3, r3, #8
   b921c:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b921e:	69e3      	ldr	r3, [r4, #28]
   b9220:	8c22      	ldrh	r2, [r4, #32]
   b9222:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b9224:	69e2      	ldr	r2, [r4, #28]
   b9226:	2307      	movs	r3, #7
   b9228:	4639      	mov	r1, r7
   b922a:	4620      	mov	r0, r4
   b922c:	f7ff fd65 	bl	b8cfa <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b9230:	69e3      	ldr	r3, [r4, #28]
   b9232:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b9234:	3804      	subs	r0, #4
   b9236:	b283      	uxth	r3, r0
   b9238:	69e2      	ldr	r2, [r4, #28]
   b923a:	2182      	movs	r1, #130	; 0x82
   b923c:	4620      	mov	r0, r4
   b923e:	f7ff fd03 	bl	b8c48 <_ZN4MQTT5writeEhPht>
   b9242:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b9244:	a801      	add	r0, sp, #4
   b9246:	f7ff fc41 	bl	b8acc <_ZN4MQTT11MutexLockerD1Ev>
}
   b924a:	4628      	mov	r0, r5
   b924c:	b003      	add	sp, #12
   b924e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b9250:	2301      	movs	r3, #1
   b9252:	e7df      	b.n	b9214 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b9254 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b9254:	2200      	movs	r2, #0
   b9256:	f7ff bfcd 	b.w	b91f4 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>
	...

000b925c <_ZN4MQTTD1Ev>:
MQTT::~MQTT() {
   b925c:	b538      	push	{r3, r4, r5, lr}
   b925e:	4605      	mov	r5, r0
    if (isConnected()) {
   b9260:	f7ff fd67 	bl	b8d32 <_ZN4MQTT11isConnectedEv>
   b9264:	b110      	cbz	r0, b926c <_ZN4MQTTD1Ev+0x10>
        disconnect();
   b9266:	4628      	mov	r0, r5
   b9268:	f7ff fd2a 	bl	b8cc0 <_ZN4MQTT10disconnectEv>
    if (buffer != NULL)
   b926c:	69e8      	ldr	r0, [r5, #28]
   b926e:	b108      	cbz	r0, b9274 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
   b9270:	f7fa ff17 	bl	b40a2 <_ZdaPv>
MQTT::~MQTT() {
   b9274:	f105 0038 	add.w	r0, r5, #56	; 0x38
   b9278:	f001 ff66 	bl	bb148 <_ZN6StringD1Ev>
	if (_M_pi != nullptr)
   b927c:	69ac      	ldr	r4, [r5, #24]
   b927e:	4b0a      	ldr	r3, [pc, #40]	; (b92a8 <_ZN4MQTTD1Ev+0x4c>)
   b9280:	602b      	str	r3, [r5, #0]
   b9282:	b17c      	cbz	r4, b92a4 <_ZN4MQTTD1Ev+0x48>
      if (--_M_use_count == 0)
   b9284:	6863      	ldr	r3, [r4, #4]
   b9286:	3b01      	subs	r3, #1
   b9288:	6063      	str	r3, [r4, #4]
   b928a:	b95b      	cbnz	r3, b92a4 <_ZN4MQTTD1Ev+0x48>
          _M_dispose();
   b928c:	6823      	ldr	r3, [r4, #0]
   b928e:	4620      	mov	r0, r4
   b9290:	689b      	ldr	r3, [r3, #8]
   b9292:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b9294:	68a3      	ldr	r3, [r4, #8]
   b9296:	3b01      	subs	r3, #1
   b9298:	60a3      	str	r3, [r4, #8]
   b929a:	b91b      	cbnz	r3, b92a4 <_ZN4MQTTD1Ev+0x48>
            _M_destroy();
   b929c:	6823      	ldr	r3, [r4, #0]
   b929e:	4620      	mov	r0, r4
   b92a0:	68db      	ldr	r3, [r3, #12]
   b92a2:	4798      	blx	r3
}
   b92a4:	4628      	mov	r0, r5
   b92a6:	bd38      	pop	{r3, r4, r5, pc}
   b92a8:	000bf8ec 	.word	0x000bf8ec

000b92ac <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b92ac:	b508      	push	{r3, lr}
   b92ae:	4b02      	ldr	r3, [pc, #8]	; (b92b8 <hal_ble_stack_init+0xc>)
   b92b0:	681b      	ldr	r3, [r3, #0]
   b92b2:	689b      	ldr	r3, [r3, #8]
   b92b4:	9301      	str	r3, [sp, #4]
   b92b6:	bd08      	pop	{r3, pc}
   b92b8:	00030278 	.word	0x00030278

000b92bc <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b92bc:	b508      	push	{r3, lr}
   b92be:	4b02      	ldr	r3, [pc, #8]	; (b92c8 <hal_ble_gap_set_advertising_data+0xc>)
   b92c0:	681b      	ldr	r3, [r3, #0]
   b92c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b92c4:	9301      	str	r3, [sp, #4]
   b92c6:	bd08      	pop	{r3, pc}
   b92c8:	00030278 	.word	0x00030278

000b92cc <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b92cc:	b508      	push	{r3, lr}
   b92ce:	4b02      	ldr	r3, [pc, #8]	; (b92d8 <hal_ble_gap_set_scan_response_data+0xc>)
   b92d0:	681b      	ldr	r3, [r3, #0]
   b92d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b92d4:	9301      	str	r3, [sp, #4]
   b92d6:	bd08      	pop	{r3, pc}
   b92d8:	00030278 	.word	0x00030278

000b92dc <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b92dc:	b508      	push	{r3, lr}
   b92de:	4b02      	ldr	r3, [pc, #8]	; (b92e8 <hal_ble_gap_start_advertising+0xc>)
   b92e0:	681b      	ldr	r3, [r3, #0]
   b92e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b92e4:	9301      	str	r3, [sp, #4]
   b92e6:	bd08      	pop	{r3, pc}
   b92e8:	00030278 	.word	0x00030278

000b92ec <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b92ec:	b508      	push	{r3, lr}
   b92ee:	4b03      	ldr	r3, [pc, #12]	; (b92fc <hal_ble_gap_disconnect+0x10>)
   b92f0:	681b      	ldr	r3, [r3, #0]
   b92f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b92f6:	9301      	str	r3, [sp, #4]
   b92f8:	bd08      	pop	{r3, pc}
   b92fa:	0000      	.short	0x0000
   b92fc:	00030278 	.word	0x00030278

000b9300 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b9300:	b508      	push	{r3, lr}
   b9302:	4b03      	ldr	r3, [pc, #12]	; (b9310 <hal_ble_gatt_server_add_service+0x10>)
   b9304:	681b      	ldr	r3, [r3, #0]
   b9306:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b930a:	9301      	str	r3, [sp, #4]
   b930c:	bd08      	pop	{r3, pc}
   b930e:	0000      	.short	0x0000
   b9310:	00030278 	.word	0x00030278

000b9314 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b9314:	b508      	push	{r3, lr}
   b9316:	4b03      	ldr	r3, [pc, #12]	; (b9324 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b9318:	681b      	ldr	r3, [r3, #0]
   b931a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b931e:	9301      	str	r3, [sp, #4]
   b9320:	bd08      	pop	{r3, pc}
   b9322:	0000      	.short	0x0000
   b9324:	00030278 	.word	0x00030278

000b9328 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b9328:	b508      	push	{r3, lr}
   b932a:	4b03      	ldr	r3, [pc, #12]	; (b9338 <hal_ble_gatt_client_write_with_response+0x10>)
   b932c:	681b      	ldr	r3, [r3, #0]
   b932e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b9332:	9301      	str	r3, [sp, #4]
   b9334:	bd08      	pop	{r3, pc}
   b9336:	0000      	.short	0x0000
   b9338:	00030278 	.word	0x00030278

000b933c <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b933c:	b508      	push	{r3, lr}
   b933e:	4b03      	ldr	r3, [pc, #12]	; (b934c <hal_ble_gatt_client_write_without_response+0x10>)
   b9340:	681b      	ldr	r3, [r3, #0]
   b9342:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b9346:	9301      	str	r3, [sp, #4]
   b9348:	bd08      	pop	{r3, pc}
   b934a:	0000      	.short	0x0000
   b934c:	00030278 	.word	0x00030278

000b9350 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b9350:	b508      	push	{r3, lr}
   b9352:	4b03      	ldr	r3, [pc, #12]	; (b9360 <hal_ble_gatt_server_add_characteristic+0x10>)
   b9354:	681b      	ldr	r3, [r3, #0]
   b9356:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b935a:	9301      	str	r3, [sp, #4]
   b935c:	bd08      	pop	{r3, pc}
   b935e:	0000      	.short	0x0000
   b9360:	00030278 	.word	0x00030278

000b9364 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b9364:	b508      	push	{r3, lr}
   b9366:	4b03      	ldr	r3, [pc, #12]	; (b9374 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b9368:	681b      	ldr	r3, [r3, #0]
   b936a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b936e:	9301      	str	r3, [sp, #4]
   b9370:	bd08      	pop	{r3, pc}
   b9372:	0000      	.short	0x0000
   b9374:	00030278 	.word	0x00030278

000b9378 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b9378:	b508      	push	{r3, lr}
   b937a:	4b03      	ldr	r3, [pc, #12]	; (b9388 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b937c:	681b      	ldr	r3, [r3, #0]
   b937e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b9382:	9301      	str	r3, [sp, #4]
   b9384:	bd08      	pop	{r3, pc}
   b9386:	0000      	.short	0x0000
   b9388:	00030278 	.word	0x00030278

000b938c <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b938c:	b508      	push	{r3, lr}
   b938e:	4b03      	ldr	r3, [pc, #12]	; (b939c <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b9390:	681b      	ldr	r3, [r3, #0]
   b9392:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b9396:	9301      	str	r3, [sp, #4]
   b9398:	bd08      	pop	{r3, pc}
   b939a:	0000      	.short	0x0000
   b939c:	00030278 	.word	0x00030278

000b93a0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b93a0:	b508      	push	{r3, lr}
   b93a2:	4b02      	ldr	r3, [pc, #8]	; (b93ac <os_mutex_create+0xc>)
   b93a4:	681b      	ldr	r3, [r3, #0]
   b93a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b93a8:	9301      	str	r3, [sp, #4]
   b93aa:	bd08      	pop	{r3, pc}
   b93ac:	00030248 	.word	0x00030248

000b93b0 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b93b0:	b508      	push	{r3, lr}
   b93b2:	4b02      	ldr	r3, [pc, #8]	; (b93bc <os_mutex_lock+0xc>)
   b93b4:	681b      	ldr	r3, [r3, #0]
   b93b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b93b8:	9301      	str	r3, [sp, #4]
   b93ba:	bd08      	pop	{r3, pc}
   b93bc:	00030248 	.word	0x00030248

000b93c0 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b93c0:	b508      	push	{r3, lr}
   b93c2:	4b02      	ldr	r3, [pc, #8]	; (b93cc <os_mutex_unlock+0xc>)
   b93c4:	681b      	ldr	r3, [r3, #0]
   b93c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b93c8:	9301      	str	r3, [sp, #4]
   b93ca:	bd08      	pop	{r3, pc}
   b93cc:	00030248 	.word	0x00030248

000b93d0 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b93d0:	b508      	push	{r3, lr}
   b93d2:	4b02      	ldr	r3, [pc, #8]	; (b93dc <os_mutex_recursive_create+0xc>)
   b93d4:	681b      	ldr	r3, [r3, #0]
   b93d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b93d8:	9301      	str	r3, [sp, #4]
   b93da:	bd08      	pop	{r3, pc}
   b93dc:	00030248 	.word	0x00030248

000b93e0 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b93e0:	b508      	push	{r3, lr}
   b93e2:	4b02      	ldr	r3, [pc, #8]	; (b93ec <os_mutex_recursive_lock+0xc>)
   b93e4:	681b      	ldr	r3, [r3, #0]
   b93e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b93e8:	9301      	str	r3, [sp, #4]
   b93ea:	bd08      	pop	{r3, pc}
   b93ec:	00030248 	.word	0x00030248

000b93f0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b93f0:	b508      	push	{r3, lr}
   b93f2:	4b02      	ldr	r3, [pc, #8]	; (b93fc <os_mutex_recursive_unlock+0xc>)
   b93f4:	681b      	ldr	r3, [r3, #0]
   b93f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b93f8:	9301      	str	r3, [sp, #4]
   b93fa:	bd08      	pop	{r3, pc}
   b93fc:	00030248 	.word	0x00030248

000b9400 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b9400:	b508      	push	{r3, lr}
   b9402:	4b02      	ldr	r3, [pc, #8]	; (b940c <HAL_RNG_GetRandomNumber+0xc>)
   b9404:	681b      	ldr	r3, [r3, #0]
   b9406:	685b      	ldr	r3, [r3, #4]
   b9408:	9301      	str	r3, [sp, #4]
   b940a:	bd08      	pop	{r3, pc}
   b940c:	00030218 	.word	0x00030218

000b9410 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b9410:	b508      	push	{r3, lr}
   b9412:	4b02      	ldr	r3, [pc, #8]	; (b941c <HAL_Delay_Microseconds+0xc>)
   b9414:	681b      	ldr	r3, [r3, #0]
   b9416:	68db      	ldr	r3, [r3, #12]
   b9418:	9301      	str	r3, [sp, #4]
   b941a:	bd08      	pop	{r3, pc}
   b941c:	00030218 	.word	0x00030218

000b9420 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b9420:	b508      	push	{r3, lr}
   b9422:	4b02      	ldr	r3, [pc, #8]	; (b942c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b9424:	681b      	ldr	r3, [r3, #0]
   b9426:	695b      	ldr	r3, [r3, #20]
   b9428:	9301      	str	r3, [sp, #4]
   b942a:	bd08      	pop	{r3, pc}
   b942c:	00030218 	.word	0x00030218

000b9430 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b9430:	b508      	push	{r3, lr}
   b9432:	4b02      	ldr	r3, [pc, #8]	; (b943c <hal_i2c_begin+0xc>)
   b9434:	681b      	ldr	r3, [r3, #0]
   b9436:	68db      	ldr	r3, [r3, #12]
   b9438:	9301      	str	r3, [sp, #4]
   b943a:	bd08      	pop	{r3, pc}
   b943c:	00030228 	.word	0x00030228

000b9440 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b9440:	b508      	push	{r3, lr}
   b9442:	4b02      	ldr	r3, [pc, #8]	; (b944c <hal_i2c_begin_transmission+0xc>)
   b9444:	681b      	ldr	r3, [r3, #0]
   b9446:	699b      	ldr	r3, [r3, #24]
   b9448:	9301      	str	r3, [sp, #4]
   b944a:	bd08      	pop	{r3, pc}
   b944c:	00030228 	.word	0x00030228

000b9450 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b9450:	b508      	push	{r3, lr}
   b9452:	4b02      	ldr	r3, [pc, #8]	; (b945c <hal_i2c_end_transmission+0xc>)
   b9454:	681b      	ldr	r3, [r3, #0]
   b9456:	69db      	ldr	r3, [r3, #28]
   b9458:	9301      	str	r3, [sp, #4]
   b945a:	bd08      	pop	{r3, pc}
   b945c:	00030228 	.word	0x00030228

000b9460 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b9460:	b508      	push	{r3, lr}
   b9462:	4b02      	ldr	r3, [pc, #8]	; (b946c <hal_i2c_write+0xc>)
   b9464:	681b      	ldr	r3, [r3, #0]
   b9466:	6a1b      	ldr	r3, [r3, #32]
   b9468:	9301      	str	r3, [sp, #4]
   b946a:	bd08      	pop	{r3, pc}
   b946c:	00030228 	.word	0x00030228

000b9470 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b9470:	b508      	push	{r3, lr}
   b9472:	4b02      	ldr	r3, [pc, #8]	; (b947c <hal_i2c_available+0xc>)
   b9474:	681b      	ldr	r3, [r3, #0]
   b9476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9478:	9301      	str	r3, [sp, #4]
   b947a:	bd08      	pop	{r3, pc}
   b947c:	00030228 	.word	0x00030228

000b9480 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b9480:	b508      	push	{r3, lr}
   b9482:	4b02      	ldr	r3, [pc, #8]	; (b948c <hal_i2c_read+0xc>)
   b9484:	681b      	ldr	r3, [r3, #0]
   b9486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9488:	9301      	str	r3, [sp, #4]
   b948a:	bd08      	pop	{r3, pc}
   b948c:	00030228 	.word	0x00030228

000b9490 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b9490:	b508      	push	{r3, lr}
   b9492:	4b02      	ldr	r3, [pc, #8]	; (b949c <hal_i2c_peek+0xc>)
   b9494:	681b      	ldr	r3, [r3, #0]
   b9496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9498:	9301      	str	r3, [sp, #4]
   b949a:	bd08      	pop	{r3, pc}
   b949c:	00030228 	.word	0x00030228

000b94a0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b94a0:	b508      	push	{r3, lr}
   b94a2:	4b02      	ldr	r3, [pc, #8]	; (b94ac <hal_i2c_flush+0xc>)
   b94a4:	681b      	ldr	r3, [r3, #0]
   b94a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b94a8:	9301      	str	r3, [sp, #4]
   b94aa:	bd08      	pop	{r3, pc}
   b94ac:	00030228 	.word	0x00030228

000b94b0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b94b0:	b508      	push	{r3, lr}
   b94b2:	4b02      	ldr	r3, [pc, #8]	; (b94bc <hal_i2c_init+0xc>)
   b94b4:	681b      	ldr	r3, [r3, #0]
   b94b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b94b8:	9301      	str	r3, [sp, #4]
   b94ba:	bd08      	pop	{r3, pc}
   b94bc:	00030228 	.word	0x00030228

000b94c0 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b94c0:	b508      	push	{r3, lr}
   b94c2:	4b02      	ldr	r3, [pc, #8]	; (b94cc <hal_i2c_lock+0xc>)
   b94c4:	681b      	ldr	r3, [r3, #0]
   b94c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b94c8:	9301      	str	r3, [sp, #4]
   b94ca:	bd08      	pop	{r3, pc}
   b94cc:	00030228 	.word	0x00030228

000b94d0 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b94d0:	b508      	push	{r3, lr}
   b94d2:	4b02      	ldr	r3, [pc, #8]	; (b94dc <hal_i2c_unlock+0xc>)
   b94d4:	681b      	ldr	r3, [r3, #0]
   b94d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b94d8:	9301      	str	r3, [sp, #4]
   b94da:	bd08      	pop	{r3, pc}
   b94dc:	00030228 	.word	0x00030228

000b94e0 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b94e0:	b508      	push	{r3, lr}
   b94e2:	4b02      	ldr	r3, [pc, #8]	; (b94ec <hal_i2c_request_ex+0xc>)
   b94e4:	681b      	ldr	r3, [r3, #0]
   b94e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b94e8:	9301      	str	r3, [sp, #4]
   b94ea:	bd08      	pop	{r3, pc}
   b94ec:	00030228 	.word	0x00030228

000b94f0 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b94f0:	b508      	push	{r3, lr}
   b94f2:	4b02      	ldr	r3, [pc, #8]	; (b94fc <if_index_to_name+0xc>)
   b94f4:	681b      	ldr	r3, [r3, #0]
   b94f6:	695b      	ldr	r3, [r3, #20]
   b94f8:	9301      	str	r3, [sp, #4]
   b94fa:	bd08      	pop	{r3, pc}
   b94fc:	0003026c 	.word	0x0003026c

000b9500 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b9500:	b508      	push	{r3, lr}
   b9502:	4b02      	ldr	r3, [pc, #8]	; (b950c <inet_inet_ntop+0xc>)
   b9504:	681b      	ldr	r3, [r3, #0]
   b9506:	695b      	ldr	r3, [r3, #20]
   b9508:	9301      	str	r3, [sp, #4]
   b950a:	bd08      	pop	{r3, pc}
   b950c:	00030264 	.word	0x00030264

000b9510 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b9510:	b508      	push	{r3, lr}
   b9512:	4b02      	ldr	r3, [pc, #8]	; (b951c <inet_htonl+0xc>)
   b9514:	681b      	ldr	r3, [r3, #0]
   b9516:	6a1b      	ldr	r3, [r3, #32]
   b9518:	9301      	str	r3, [sp, #4]
   b951a:	bd08      	pop	{r3, pc}
   b951c:	00030264 	.word	0x00030264

000b9520 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b9520:	b508      	push	{r3, lr}
   b9522:	4b02      	ldr	r3, [pc, #8]	; (b952c <inet_htons+0xc>)
   b9524:	681b      	ldr	r3, [r3, #0]
   b9526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9528:	9301      	str	r3, [sp, #4]
   b952a:	bd08      	pop	{r3, pc}
   b952c:	00030264 	.word	0x00030264

000b9530 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b9530:	b508      	push	{r3, lr}
   b9532:	4b02      	ldr	r3, [pc, #8]	; (b953c <netdb_freeaddrinfo+0xc>)
   b9534:	681b      	ldr	r3, [r3, #0]
   b9536:	689b      	ldr	r3, [r3, #8]
   b9538:	9301      	str	r3, [sp, #4]
   b953a:	bd08      	pop	{r3, pc}
   b953c:	00030268 	.word	0x00030268

000b9540 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b9540:	b508      	push	{r3, lr}
   b9542:	4b02      	ldr	r3, [pc, #8]	; (b954c <netdb_getaddrinfo+0xc>)
   b9544:	681b      	ldr	r3, [r3, #0]
   b9546:	68db      	ldr	r3, [r3, #12]
   b9548:	9301      	str	r3, [sp, #4]
   b954a:	bd08      	pop	{r3, pc}
   b954c:	00030268 	.word	0x00030268

000b9550 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b9550:	b508      	push	{r3, lr}
   b9552:	4b02      	ldr	r3, [pc, #8]	; (b955c <sock_setsockopt+0xc>)
   b9554:	681b      	ldr	r3, [r3, #0]
   b9556:	699b      	ldr	r3, [r3, #24]
   b9558:	9301      	str	r3, [sp, #4]
   b955a:	bd08      	pop	{r3, pc}
   b955c:	00030238 	.word	0x00030238

000b9560 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b9560:	b508      	push	{r3, lr}
   b9562:	4b02      	ldr	r3, [pc, #8]	; (b956c <sock_close+0xc>)
   b9564:	681b      	ldr	r3, [r3, #0]
   b9566:	69db      	ldr	r3, [r3, #28]
   b9568:	9301      	str	r3, [sp, #4]
   b956a:	bd08      	pop	{r3, pc}
   b956c:	00030238 	.word	0x00030238

000b9570 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b9570:	b508      	push	{r3, lr}
   b9572:	4b02      	ldr	r3, [pc, #8]	; (b957c <sock_connect+0xc>)
   b9574:	681b      	ldr	r3, [r3, #0]
   b9576:	6a1b      	ldr	r3, [r3, #32]
   b9578:	9301      	str	r3, [sp, #4]
   b957a:	bd08      	pop	{r3, pc}
   b957c:	00030238 	.word	0x00030238

000b9580 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b9580:	b508      	push	{r3, lr}
   b9582:	4b02      	ldr	r3, [pc, #8]	; (b958c <sock_recv+0xc>)
   b9584:	681b      	ldr	r3, [r3, #0]
   b9586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9588:	9301      	str	r3, [sp, #4]
   b958a:	bd08      	pop	{r3, pc}
   b958c:	00030238 	.word	0x00030238

000b9590 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b9590:	b508      	push	{r3, lr}
   b9592:	4b02      	ldr	r3, [pc, #8]	; (b959c <sock_send+0xc>)
   b9594:	681b      	ldr	r3, [r3, #0]
   b9596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9598:	9301      	str	r3, [sp, #4]
   b959a:	bd08      	pop	{r3, pc}
   b959c:	00030238 	.word	0x00030238

000b95a0 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b95a0:	b508      	push	{r3, lr}
   b95a2:	4b02      	ldr	r3, [pc, #8]	; (b95ac <sock_socket+0xc>)
   b95a4:	681b      	ldr	r3, [r3, #0]
   b95a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b95a8:	9301      	str	r3, [sp, #4]
   b95aa:	bd08      	pop	{r3, pc}
   b95ac:	00030238 	.word	0x00030238

000b95b0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b95b0:	b508      	push	{r3, lr}
   b95b2:	4b02      	ldr	r3, [pc, #8]	; (b95bc <hal_usart_write+0xc>)
   b95b4:	681b      	ldr	r3, [r3, #0]
   b95b6:	68db      	ldr	r3, [r3, #12]
   b95b8:	9301      	str	r3, [sp, #4]
   b95ba:	bd08      	pop	{r3, pc}
   b95bc:	0003023c 	.word	0x0003023c

000b95c0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b95c0:	b508      	push	{r3, lr}
   b95c2:	4b02      	ldr	r3, [pc, #8]	; (b95cc <hal_usart_available+0xc>)
   b95c4:	681b      	ldr	r3, [r3, #0]
   b95c6:	691b      	ldr	r3, [r3, #16]
   b95c8:	9301      	str	r3, [sp, #4]
   b95ca:	bd08      	pop	{r3, pc}
   b95cc:	0003023c 	.word	0x0003023c

000b95d0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b95d0:	b508      	push	{r3, lr}
   b95d2:	4b02      	ldr	r3, [pc, #8]	; (b95dc <hal_usart_read+0xc>)
   b95d4:	681b      	ldr	r3, [r3, #0]
   b95d6:	695b      	ldr	r3, [r3, #20]
   b95d8:	9301      	str	r3, [sp, #4]
   b95da:	bd08      	pop	{r3, pc}
   b95dc:	0003023c 	.word	0x0003023c

000b95e0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b95e0:	b508      	push	{r3, lr}
   b95e2:	4b02      	ldr	r3, [pc, #8]	; (b95ec <hal_usart_peek+0xc>)
   b95e4:	681b      	ldr	r3, [r3, #0]
   b95e6:	699b      	ldr	r3, [r3, #24]
   b95e8:	9301      	str	r3, [sp, #4]
   b95ea:	bd08      	pop	{r3, pc}
   b95ec:	0003023c 	.word	0x0003023c

000b95f0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b95f0:	b508      	push	{r3, lr}
   b95f2:	4b02      	ldr	r3, [pc, #8]	; (b95fc <hal_usart_flush+0xc>)
   b95f4:	681b      	ldr	r3, [r3, #0]
   b95f6:	69db      	ldr	r3, [r3, #28]
   b95f8:	9301      	str	r3, [sp, #4]
   b95fa:	bd08      	pop	{r3, pc}
   b95fc:	0003023c 	.word	0x0003023c

000b9600 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b9600:	b508      	push	{r3, lr}
   b9602:	4b02      	ldr	r3, [pc, #8]	; (b960c <hal_usart_available_data_for_write+0xc>)
   b9604:	681b      	ldr	r3, [r3, #0]
   b9606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9608:	9301      	str	r3, [sp, #4]
   b960a:	bd08      	pop	{r3, pc}
   b960c:	0003023c 	.word	0x0003023c

000b9610 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b9610:	b508      	push	{r3, lr}
   b9612:	4b02      	ldr	r3, [pc, #8]	; (b961c <hal_usart_init_ex+0xc>)
   b9614:	681b      	ldr	r3, [r3, #0]
   b9616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9618:	9301      	str	r3, [sp, #4]
   b961a:	bd08      	pop	{r3, pc}
   b961c:	0003023c 	.word	0x0003023c

000b9620 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b9620:	b508      	push	{r3, lr}
   b9622:	4b02      	ldr	r3, [pc, #8]	; (b962c <HAL_USB_USART_Init+0xc>)
   b9624:	681b      	ldr	r3, [r3, #0]
   b9626:	681b      	ldr	r3, [r3, #0]
   b9628:	9301      	str	r3, [sp, #4]
   b962a:	bd08      	pop	{r3, pc}
   b962c:	0003024c 	.word	0x0003024c

000b9630 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b9630:	b508      	push	{r3, lr}
   b9632:	4b02      	ldr	r3, [pc, #8]	; (b963c <HAL_USB_USART_Begin+0xc>)
   b9634:	681b      	ldr	r3, [r3, #0]
   b9636:	685b      	ldr	r3, [r3, #4]
   b9638:	9301      	str	r3, [sp, #4]
   b963a:	bd08      	pop	{r3, pc}
   b963c:	0003024c 	.word	0x0003024c

000b9640 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b9640:	b508      	push	{r3, lr}
   b9642:	4b02      	ldr	r3, [pc, #8]	; (b964c <HAL_USB_USART_Available_Data+0xc>)
   b9644:	681b      	ldr	r3, [r3, #0]
   b9646:	691b      	ldr	r3, [r3, #16]
   b9648:	9301      	str	r3, [sp, #4]
   b964a:	bd08      	pop	{r3, pc}
   b964c:	0003024c 	.word	0x0003024c

000b9650 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b9650:	b508      	push	{r3, lr}
   b9652:	4b02      	ldr	r3, [pc, #8]	; (b965c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b9654:	681b      	ldr	r3, [r3, #0]
   b9656:	695b      	ldr	r3, [r3, #20]
   b9658:	9301      	str	r3, [sp, #4]
   b965a:	bd08      	pop	{r3, pc}
   b965c:	0003024c 	.word	0x0003024c

000b9660 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b9660:	b508      	push	{r3, lr}
   b9662:	4b02      	ldr	r3, [pc, #8]	; (b966c <HAL_USB_USART_Receive_Data+0xc>)
   b9664:	681b      	ldr	r3, [r3, #0]
   b9666:	699b      	ldr	r3, [r3, #24]
   b9668:	9301      	str	r3, [sp, #4]
   b966a:	bd08      	pop	{r3, pc}
   b966c:	0003024c 	.word	0x0003024c

000b9670 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b9670:	b508      	push	{r3, lr}
   b9672:	4b02      	ldr	r3, [pc, #8]	; (b967c <HAL_USB_USART_Send_Data+0xc>)
   b9674:	681b      	ldr	r3, [r3, #0]
   b9676:	69db      	ldr	r3, [r3, #28]
   b9678:	9301      	str	r3, [sp, #4]
   b967a:	bd08      	pop	{r3, pc}
   b967c:	0003024c 	.word	0x0003024c

000b9680 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b9680:	b508      	push	{r3, lr}
   b9682:	4b02      	ldr	r3, [pc, #8]	; (b968c <HAL_USB_USART_Flush_Data+0xc>)
   b9684:	681b      	ldr	r3, [r3, #0]
   b9686:	6a1b      	ldr	r3, [r3, #32]
   b9688:	9301      	str	r3, [sp, #4]
   b968a:	bd08      	pop	{r3, pc}
   b968c:	0003024c 	.word	0x0003024c

000b9690 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b9690:	b508      	push	{r3, lr}
   b9692:	4b02      	ldr	r3, [pc, #8]	; (b969c <panic_+0xc>)
   b9694:	681b      	ldr	r3, [r3, #0]
   b9696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9698:	9301      	str	r3, [sp, #4]
   b969a:	bd08      	pop	{r3, pc}
   b969c:	00030260 	.word	0x00030260

000b96a0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b96a0:	b508      	push	{r3, lr}
   b96a2:	4b02      	ldr	r3, [pc, #8]	; (b96ac <log_message+0xc>)
   b96a4:	681b      	ldr	r3, [r3, #0]
   b96a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b96a8:	9301      	str	r3, [sp, #4]
   b96aa:	bd08      	pop	{r3, pc}
   b96ac:	00030260 	.word	0x00030260

000b96b0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b96b0:	b508      	push	{r3, lr}
   b96b2:	4b02      	ldr	r3, [pc, #8]	; (b96bc <set_system_mode+0xc>)
   b96b4:	681b      	ldr	r3, [r3, #0]
   b96b6:	685b      	ldr	r3, [r3, #4]
   b96b8:	9301      	str	r3, [sp, #4]
   b96ba:	bd08      	pop	{r3, pc}
   b96bc:	00030220 	.word	0x00030220

000b96c0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b96c0:	b508      	push	{r3, lr}
   b96c2:	4b02      	ldr	r3, [pc, #8]	; (b96cc <system_delay_ms+0xc>)
   b96c4:	681b      	ldr	r3, [r3, #0]
   b96c6:	695b      	ldr	r3, [r3, #20]
   b96c8:	9301      	str	r3, [sp, #4]
   b96ca:	bd08      	pop	{r3, pc}
   b96cc:	00030220 	.word	0x00030220

000b96d0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b96d0:	b508      	push	{r3, lr}
   b96d2:	4b03      	ldr	r3, [pc, #12]	; (b96e0 <system_ctrl_set_app_request_handler+0x10>)
   b96d4:	681b      	ldr	r3, [r3, #0]
   b96d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b96da:	9301      	str	r3, [sp, #4]
   b96dc:	bd08      	pop	{r3, pc}
   b96de:	0000      	.short	0x0000
   b96e0:	00030220 	.word	0x00030220

000b96e4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b96e4:	b508      	push	{r3, lr}
   b96e6:	4b03      	ldr	r3, [pc, #12]	; (b96f4 <system_ctrl_set_result+0x10>)
   b96e8:	681b      	ldr	r3, [r3, #0]
   b96ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b96ee:	9301      	str	r3, [sp, #4]
   b96f0:	bd08      	pop	{r3, pc}
   b96f2:	0000      	.short	0x0000
   b96f4:	00030220 	.word	0x00030220

000b96f8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b96f8:	b508      	push	{r3, lr}
   b96fa:	4b02      	ldr	r3, [pc, #8]	; (b9704 <spark_set_random_seed_from_cloud_handler+0xc>)
   b96fc:	681b      	ldr	r3, [r3, #0]
   b96fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9700:	9301      	str	r3, [sp, #4]
   b9702:	bd08      	pop	{r3, pc}
   b9704:	00030244 	.word	0x00030244

000b9708 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b9708:	b508      	push	{r3, lr}
   b970a:	4b02      	ldr	r3, [pc, #8]	; (b9714 <network_connect+0xc>)
   b970c:	681b      	ldr	r3, [r3, #0]
   b970e:	685b      	ldr	r3, [r3, #4]
   b9710:	9301      	str	r3, [sp, #4]
   b9712:	bd08      	pop	{r3, pc}
   b9714:	00030240 	.word	0x00030240

000b9718 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b9718:	b508      	push	{r3, lr}
   b971a:	4b02      	ldr	r3, [pc, #8]	; (b9724 <network_connecting+0xc>)
   b971c:	681b      	ldr	r3, [r3, #0]
   b971e:	689b      	ldr	r3, [r3, #8]
   b9720:	9301      	str	r3, [sp, #4]
   b9722:	bd08      	pop	{r3, pc}
   b9724:	00030240 	.word	0x00030240

000b9728 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b9728:	b508      	push	{r3, lr}
   b972a:	4b02      	ldr	r3, [pc, #8]	; (b9734 <network_disconnect+0xc>)
   b972c:	681b      	ldr	r3, [r3, #0]
   b972e:	68db      	ldr	r3, [r3, #12]
   b9730:	9301      	str	r3, [sp, #4]
   b9732:	bd08      	pop	{r3, pc}
   b9734:	00030240 	.word	0x00030240

000b9738 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b9738:	b508      	push	{r3, lr}
   b973a:	4b02      	ldr	r3, [pc, #8]	; (b9744 <network_ready+0xc>)
   b973c:	681b      	ldr	r3, [r3, #0]
   b973e:	691b      	ldr	r3, [r3, #16]
   b9740:	9301      	str	r3, [sp, #4]
   b9742:	bd08      	pop	{r3, pc}
   b9744:	00030240 	.word	0x00030240

000b9748 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b9748:	b508      	push	{r3, lr}
   b974a:	4b02      	ldr	r3, [pc, #8]	; (b9754 <network_on+0xc>)
   b974c:	681b      	ldr	r3, [r3, #0]
   b974e:	695b      	ldr	r3, [r3, #20]
   b9750:	9301      	str	r3, [sp, #4]
   b9752:	bd08      	pop	{r3, pc}
   b9754:	00030240 	.word	0x00030240

000b9758 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b9758:	b508      	push	{r3, lr}
   b975a:	4b02      	ldr	r3, [pc, #8]	; (b9764 <network_off+0xc>)
   b975c:	681b      	ldr	r3, [r3, #0]
   b975e:	699b      	ldr	r3, [r3, #24]
   b9760:	9301      	str	r3, [sp, #4]
   b9762:	bd08      	pop	{r3, pc}
   b9764:	00030240 	.word	0x00030240

000b9768 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b9768:	b508      	push	{r3, lr}
   b976a:	4b02      	ldr	r3, [pc, #8]	; (b9774 <network_listen+0xc>)
   b976c:	681b      	ldr	r3, [r3, #0]
   b976e:	69db      	ldr	r3, [r3, #28]
   b9770:	9301      	str	r3, [sp, #4]
   b9772:	bd08      	pop	{r3, pc}
   b9774:	00030240 	.word	0x00030240

000b9778 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b9778:	b508      	push	{r3, lr}
   b977a:	4b02      	ldr	r3, [pc, #8]	; (b9784 <network_listening+0xc>)
   b977c:	681b      	ldr	r3, [r3, #0]
   b977e:	6a1b      	ldr	r3, [r3, #32]
   b9780:	9301      	str	r3, [sp, #4]
   b9782:	bd08      	pop	{r3, pc}
   b9784:	00030240 	.word	0x00030240

000b9788 <network_has_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
   b9788:	b508      	push	{r3, lr}
   b978a:	4b02      	ldr	r3, [pc, #8]	; (b9794 <network_has_credentials+0xc>)
   b978c:	681b      	ldr	r3, [r3, #0]
   b978e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9790:	9301      	str	r3, [sp, #4]
   b9792:	bd08      	pop	{r3, pc}
   b9794:	00030240 	.word	0x00030240

000b9798 <network_set_credentials>:
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b9798:	b508      	push	{r3, lr}
   b979a:	4b02      	ldr	r3, [pc, #8]	; (b97a4 <network_set_credentials+0xc>)
   b979c:	681b      	ldr	r3, [r3, #0]
   b979e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b97a0:	9301      	str	r3, [sp, #4]
   b97a2:	bd08      	pop	{r3, pc}
   b97a4:	00030240 	.word	0x00030240

000b97a8 <network_set_listen_timeout>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b97a8:	b508      	push	{r3, lr}
   b97aa:	4b02      	ldr	r3, [pc, #8]	; (b97b4 <network_set_listen_timeout+0xc>)
   b97ac:	681b      	ldr	r3, [r3, #0]
   b97ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b97b0:	9301      	str	r3, [sp, #4]
   b97b2:	bd08      	pop	{r3, pc}
   b97b4:	00030240 	.word	0x00030240

000b97b8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b97b8:	b508      	push	{r3, lr}
   b97ba:	4b02      	ldr	r3, [pc, #8]	; (b97c4 <network_get_listen_timeout+0xc>)
   b97bc:	681b      	ldr	r3, [r3, #0]
   b97be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b97c0:	9301      	str	r3, [sp, #4]
   b97c2:	bd08      	pop	{r3, pc}
   b97c4:	00030240 	.word	0x00030240

000b97c8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b97c8:	b508      	push	{r3, lr}
   b97ca:	4b02      	ldr	r3, [pc, #8]	; (b97d4 <network_is_on+0xc>)
   b97cc:	681b      	ldr	r3, [r3, #0]
   b97ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b97d0:	9301      	str	r3, [sp, #4]
   b97d2:	bd08      	pop	{r3, pc}
   b97d4:	00030240 	.word	0x00030240

000b97d8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b97d8:	b508      	push	{r3, lr}
   b97da:	4b02      	ldr	r3, [pc, #8]	; (b97e4 <network_is_off+0xc>)
   b97dc:	681b      	ldr	r3, [r3, #0]
   b97de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b97e0:	9301      	str	r3, [sp, #4]
   b97e2:	bd08      	pop	{r3, pc}
   b97e4:	00030240 	.word	0x00030240

000b97e8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b97e8:	b508      	push	{r3, lr}
   b97ea:	4b02      	ldr	r3, [pc, #8]	; (b97f4 <malloc+0xc>)
   b97ec:	681b      	ldr	r3, [r3, #0]
   b97ee:	681b      	ldr	r3, [r3, #0]
   b97f0:	9301      	str	r3, [sp, #4]
   b97f2:	bd08      	pop	{r3, pc}
   b97f4:	0003021c 	.word	0x0003021c

000b97f8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b97f8:	b508      	push	{r3, lr}
   b97fa:	4b02      	ldr	r3, [pc, #8]	; (b9804 <free+0xc>)
   b97fc:	681b      	ldr	r3, [r3, #0]
   b97fe:	685b      	ldr	r3, [r3, #4]
   b9800:	9301      	str	r3, [sp, #4]
   b9802:	bd08      	pop	{r3, pc}
   b9804:	0003021c 	.word	0x0003021c

000b9808 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b9808:	b508      	push	{r3, lr}
   b980a:	4b02      	ldr	r3, [pc, #8]	; (b9814 <realloc+0xc>)
   b980c:	681b      	ldr	r3, [r3, #0]
   b980e:	689b      	ldr	r3, [r3, #8]
   b9810:	9301      	str	r3, [sp, #4]
   b9812:	bd08      	pop	{r3, pc}
   b9814:	0003021c 	.word	0x0003021c

000b9818 <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b9818:	b508      	push	{r3, lr}
   b981a:	4b02      	ldr	r3, [pc, #8]	; (b9824 <sscanf+0xc>)
   b981c:	681b      	ldr	r3, [r3, #0]
   b981e:	695b      	ldr	r3, [r3, #20]
   b9820:	9301      	str	r3, [sp, #4]
   b9822:	bd08      	pop	{r3, pc}
   b9824:	0003021c 	.word	0x0003021c

000b9828 <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b9828:	b508      	push	{r3, lr}
   b982a:	4b02      	ldr	r3, [pc, #8]	; (b9834 <vsnprintf+0xc>)
   b982c:	681b      	ldr	r3, [r3, #0]
   b982e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9830:	9301      	str	r3, [sp, #4]
   b9832:	bd08      	pop	{r3, pc}
   b9834:	0003021c 	.word	0x0003021c

000b9838 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b9838:	b508      	push	{r3, lr}
   b983a:	4b02      	ldr	r3, [pc, #8]	; (b9844 <abort+0xc>)
   b983c:	681b      	ldr	r3, [r3, #0]
   b983e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9840:	9301      	str	r3, [sp, #4]
   b9842:	bd08      	pop	{r3, pc}
   b9844:	0003021c 	.word	0x0003021c

000b9848 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b9848:	b508      	push	{r3, lr}
   b984a:	4b02      	ldr	r3, [pc, #8]	; (b9854 <_malloc_r+0xc>)
   b984c:	681b      	ldr	r3, [r3, #0]
   b984e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9850:	9301      	str	r3, [sp, #4]
   b9852:	bd08      	pop	{r3, pc}
   b9854:	0003021c 	.word	0x0003021c

000b9858 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b9858:	b508      	push	{r3, lr}
   b985a:	4b02      	ldr	r3, [pc, #8]	; (b9864 <__errno+0xc>)
   b985c:	681b      	ldr	r3, [r3, #0]
   b985e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9860:	9301      	str	r3, [sp, #4]
   b9862:	bd08      	pop	{r3, pc}
   b9864:	0003021c 	.word	0x0003021c

000b9868 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b9868:	b508      	push	{r3, lr}
   b986a:	4b02      	ldr	r3, [pc, #8]	; (b9874 <__assert_func+0xc>)
   b986c:	681b      	ldr	r3, [r3, #0]
   b986e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9870:	9301      	str	r3, [sp, #4]
   b9872:	bd08      	pop	{r3, pc}
   b9874:	0003021c 	.word	0x0003021c

000b9878 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b9878:	b508      	push	{r3, lr}
   b987a:	4b02      	ldr	r3, [pc, #8]	; (b9884 <newlib_impure_ptr_callback+0xc>)
   b987c:	681b      	ldr	r3, [r3, #0]
   b987e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9880:	9301      	str	r3, [sp, #4]
   b9882:	bd08      	pop	{r3, pc}
   b9884:	0003021c 	.word	0x0003021c

000b9888 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b9888:	2100      	movs	r1, #0
   b988a:	f7ff bf19 	b.w	b96c0 <system_delay_ms>

000b988e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b988e:	4770      	bx	lr

000b9890 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b9890:	4770      	bx	lr

000b9892 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b9892:	4770      	bx	lr

000b9894 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9894:	4770      	bx	lr
	...

000b9898 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9898:	4b06      	ldr	r3, [pc, #24]	; (b98b4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b989a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b989c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b989e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b98a2:	d005      	beq.n	b98b0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b98a4:	4608      	mov	r0, r1
   b98a6:	f002 fb3b 	bl	bbf20 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b98aa:	2800      	cmp	r0, #0
   b98ac:	bf08      	it	eq
   b98ae:	2400      	moveq	r4, #0
      }
   b98b0:	4620      	mov	r0, r4
   b98b2:	bd10      	pop	{r4, pc}
   b98b4:	000bf7b8 	.word	0x000bf7b8

000b98b8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b98b8:	4b06      	ldr	r3, [pc, #24]	; (b98d4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b98ba:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b98bc:	b510      	push	{r4, lr}
   b98be:	f100 040c 	add.w	r4, r0, #12
	    ||
   b98c2:	d005      	beq.n	b98d0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b98c4:	4608      	mov	r0, r1
   b98c6:	f002 fb2b 	bl	bbf20 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b98ca:	2800      	cmp	r0, #0
   b98cc:	bf08      	it	eq
   b98ce:	2400      	moveq	r4, #0
      }
   b98d0:	4620      	mov	r0, r4
   b98d2:	bd10      	pop	{r4, pc}
   b98d4:	000bf7b8 	.word	0x000bf7b8

000b98d8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b98d8:	4b06      	ldr	r3, [pc, #24]	; (b98f4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b98da:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b98dc:	b510      	push	{r4, lr}
   b98de:	f100 040c 	add.w	r4, r0, #12
	    ||
   b98e2:	d005      	beq.n	b98f0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b98e4:	4608      	mov	r0, r1
   b98e6:	f002 fb1b 	bl	bbf20 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b98ea:	2800      	cmp	r0, #0
   b98ec:	bf08      	it	eq
   b98ee:	2400      	moveq	r4, #0
      }
   b98f0:	4620      	mov	r0, r4
   b98f2:	bd10      	pop	{r4, pc}
   b98f4:	000bf7b8 	.word	0x000bf7b8

000b98f8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b98f8:	b510      	push	{r4, lr}
   b98fa:	2168      	movs	r1, #104	; 0x68
   b98fc:	4604      	mov	r4, r0
   b98fe:	f7fa fbd2 	bl	b40a6 <_ZdlPvj>
   b9902:	4620      	mov	r0, r4
   b9904:	bd10      	pop	{r4, pc}

000b9906 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b9906:	b510      	push	{r4, lr}
   b9908:	2128      	movs	r1, #40	; 0x28
   b990a:	4604      	mov	r4, r0
   b990c:	f7fa fbcb 	bl	b40a6 <_ZdlPvj>
   b9910:	4620      	mov	r0, r4
   b9912:	bd10      	pop	{r4, pc}

000b9914 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b9914:	b510      	push	{r4, lr}
   b9916:	2130      	movs	r1, #48	; 0x30
   b9918:	4604      	mov	r4, r0
   b991a:	f7fa fbc4 	bl	b40a6 <_ZdlPvj>
   b991e:	4620      	mov	r0, r4
   b9920:	bd10      	pop	{r4, pc}

000b9922 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b9922:	2168      	movs	r1, #104	; 0x68
   b9924:	f7fa bbbf 	b.w	b40a6 <_ZdlPvj>

000b9928 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b9928:	2128      	movs	r1, #40	; 0x28
   b992a:	f7fa bbbc 	b.w	b40a6 <_ZdlPvj>

000b992e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b992e:	2130      	movs	r1, #48	; 0x30
   b9930:	f7fa bbb9 	b.w	b40a6 <_ZdlPvj>

000b9934 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b9934:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b9936:	2500      	movs	r5, #0
   b9938:	1cec      	adds	r4, r5, #3
   b993a:	428c      	cmp	r4, r1
   b993c:	d80d      	bhi.n	b995a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b993e:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b9940:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b9942:	5d87      	ldrb	r7, [r0, r6]
   b9944:	4297      	cmp	r7, r2
   b9946:	d105      	bne.n	b9954 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b9948:	4426      	add	r6, r4
   b994a:	42b1      	cmp	r1, r6
   b994c:	d305      	bcc.n	b995a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b994e:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b9950:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b9952:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b9954:	3401      	adds	r4, #1
   b9956:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b9958:	e7ee      	b.n	b9938 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b995a:	2000      	movs	r0, #0
   b995c:	e7f9      	b.n	b9952 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b9960 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b9960:	4a02      	ldr	r2, [pc, #8]	; (b996c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b9962:	4903      	ldr	r1, [pc, #12]	; (b9970 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b9964:	200a      	movs	r0, #10
   b9966:	f7ff be93 	b.w	b9690 <panic_>
   b996a:	bf00      	nop
   b996c:	000b9411 	.word	0x000b9411
   b9970:	000bf618 	.word	0x000bf618

000b9974 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b9974:	b430      	push	{r4, r5}
   b9976:	460d      	mov	r5, r1
   b9978:	4611      	mov	r1, r2
   b997a:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b997c:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b997e:	6809      	ldr	r1, [r1, #0]
   b9980:	6828      	ldr	r0, [r5, #0]
   b9982:	e9d3 4300 	ldrd	r4, r3, [r3]
   b9986:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b9988:	bc30      	pop	{r4, r5}
   b998a:	4760      	bx	ip

000b998c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b998c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b998e:	b538      	push	{r3, r4, r5, lr}
   b9990:	4604      	mov	r4, r0
	switch (__op)
   b9992:	d102      	bne.n	b999a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b9994:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b9996:	6023      	str	r3, [r4, #0]
	}
   b9998:	e003      	b.n	b99a2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b999a:	2a02      	cmp	r2, #2
   b999c:	d003      	beq.n	b99a6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b999e:	2a03      	cmp	r2, #3
   b99a0:	d00d      	beq.n	b99be <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b99a2:	2000      	movs	r0, #0
   b99a4:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b99a6:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b99a8:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b99aa:	f7fa fb74 	bl	b4096 <_Znwj>
   b99ae:	4603      	mov	r3, r0
   b99b0:	2800      	cmp	r0, #0
   b99b2:	d0f0      	beq.n	b9996 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b99b4:	e895 0003 	ldmia.w	r5, {r0, r1}
   b99b8:	e883 0003 	stmia.w	r3, {r0, r1}
   b99bc:	e7eb      	b.n	b9996 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b99be:	6800      	ldr	r0, [r0, #0]
   b99c0:	2800      	cmp	r0, #0
   b99c2:	d0ee      	beq.n	b99a2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b99c4:	2108      	movs	r1, #8
   b99c6:	f7fa fb6e 	bl	b40a6 <_ZdlPvj>
   b99ca:	e7ea      	b.n	b99a2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b99cc <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b99cc:	b510      	push	{r4, lr}
      if (_M_manager)
   b99ce:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b99d0:	4604      	mov	r4, r0
      if (_M_manager)
   b99d2:	b113      	cbz	r3, b99da <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b99d4:	2203      	movs	r2, #3
   b99d6:	4601      	mov	r1, r0
   b99d8:	4798      	blx	r3
    }
   b99da:	4620      	mov	r0, r4
   b99dc:	bd10      	pop	{r4, pc}

000b99de <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b99de:	b510      	push	{r4, lr}
   b99e0:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b99e2:	3058      	adds	r0, #88	; 0x58
   b99e4:	f7ff fff2 	bl	b99cc <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b99e8:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b99ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b99f0:	f001 bbaa 	b.w	bb148 <_ZN6StringD1Ev>

000b99f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b99f4:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b99f6:	6843      	ldr	r3, [r0, #4]
   b99f8:	3b01      	subs	r3, #1
    {
   b99fa:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b99fc:	6043      	str	r3, [r0, #4]
   b99fe:	b963      	cbnz	r3, b9a1a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b9a00:	6803      	ldr	r3, [r0, #0]
   b9a02:	689b      	ldr	r3, [r3, #8]
   b9a04:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b9a06:	68a3      	ldr	r3, [r4, #8]
   b9a08:	3b01      	subs	r3, #1
   b9a0a:	60a3      	str	r3, [r4, #8]
   b9a0c:	b92b      	cbnz	r3, b9a1a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b9a0e:	6823      	ldr	r3, [r4, #0]
   b9a10:	4620      	mov	r0, r4
   b9a12:	68db      	ldr	r3, [r3, #12]
    }
   b9a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b9a18:	4718      	bx	r3
    }
   b9a1a:	bd10      	pop	{r4, pc}

000b9a1c <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b9a1c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b9a20:	b2da      	uxtb	r2, r3
   b9a22:	2a09      	cmp	r2, #9
   b9a24:	d801      	bhi.n	b9a2a <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b9a26:	4618      	mov	r0, r3
   b9a28:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b9a2a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b9a2e:	2b05      	cmp	r3, #5
   b9a30:	d801      	bhi.n	b9a36 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b9a32:	3857      	subs	r0, #87	; 0x57
   b9a34:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b9a36:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b9a3a:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b9a3c:	bf94      	ite	ls
   b9a3e:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b9a40:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b9a44:	4770      	bx	lr
	...

000b9a48 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b9a48:	b510      	push	{r4, lr}
            locked_(false) {
   b9a4a:	2300      	movs	r3, #0
   b9a4c:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b9a4e:	4b04      	ldr	r3, [pc, #16]	; (b9a60 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b9a50:	4604      	mov	r4, r0
   b9a52:	6818      	ldr	r0, [r3, #0]
   b9a54:	f7ff fcc4 	bl	b93e0 <os_mutex_recursive_lock>
        locked_ = true;
   b9a58:	2301      	movs	r3, #1
   b9a5a:	7023      	strb	r3, [r4, #0]
    }
   b9a5c:	4620      	mov	r0, r4
   b9a5e:	bd10      	pop	{r4, pc}
   b9a60:	2003e6c0 	.word	0x2003e6c0

000b9a64 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b9a64:	b510      	push	{r4, lr}
        if (locked_) {
   b9a66:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b9a68:	4604      	mov	r4, r0
        if (locked_) {
   b9a6a:	b11b      	cbz	r3, b9a74 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b9a6c:	4b02      	ldr	r3, [pc, #8]	; (b9a78 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b9a6e:	6818      	ldr	r0, [r3, #0]
   b9a70:	f7ff fcbe 	bl	b93f0 <os_mutex_recursive_unlock>
    }
   b9a74:	4620      	mov	r0, r4
   b9a76:	bd10      	pop	{r4, pc}
   b9a78:	2003e6c0 	.word	0x2003e6c0

000b9a7c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b9a7c:	b082      	sub	sp, #8
   b9a7e:	4603      	mov	r3, r0
    address_ = addr;
   b9a80:	6808      	ldr	r0, [r1, #0]
   b9a82:	6849      	ldr	r1, [r1, #4]
   b9a84:	466a      	mov	r2, sp
   b9a86:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b9a88:	466a      	mov	r2, sp
   b9a8a:	ca03      	ldmia	r2!, {r0, r1}
   b9a8c:	6018      	str	r0, [r3, #0]
}
   b9a8e:	4618      	mov	r0, r3
    address_ = addr.address_;
   b9a90:	6059      	str	r1, [r3, #4]
}
   b9a92:	b002      	add	sp, #8
   b9a94:	4770      	bx	lr

000b9a96 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b9a96:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b9a98:	7982      	ldrb	r2, [r0, #6]
   b9a9a:	798b      	ldrb	r3, [r1, #6]
   b9a9c:	429a      	cmp	r2, r3
   b9a9e:	d106      	bne.n	b9aae <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b9aa0:	2206      	movs	r2, #6
   b9aa2:	f003 fa09 	bl	bceb8 <memcmp>
   b9aa6:	fab0 f080 	clz	r0, r0
   b9aaa:	0940      	lsrs	r0, r0, #5
}
   b9aac:	bd08      	pop	{r3, pc}
    return false;
   b9aae:	2000      	movs	r0, #0
   b9ab0:	e7fc      	b.n	b9aac <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b9ab2 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b9ab2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9ab6:	6003      	str	r3, [r0, #0]
   b9ab8:	8083      	strh	r3, [r0, #4]
}
   b9aba:	2000      	movs	r0, #0
   b9abc:	4770      	bx	lr

000b9abe <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b9abe:	b508      	push	{r3, lr}
   b9ac0:	4602      	mov	r2, r0
        : address_{} {
   b9ac2:	2100      	movs	r1, #0
   b9ac4:	6001      	str	r1, [r0, #0]
   b9ac6:	6041      	str	r1, [r0, #4]
    clear();
   b9ac8:	f7ff fff3 	bl	b9ab2 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b9acc:	7191      	strb	r1, [r2, #6]
}
   b9ace:	4610      	mov	r0, r2
   b9ad0:	bd08      	pop	{r3, pc}
	...

000b9ad4 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b9ad4:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b9ad6:	2301      	movs	r3, #1
   b9ad8:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b9ada:	4b05      	ldr	r3, [pc, #20]	; (b9af0 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b9adc:	4602      	mov	r2, r0
   b9ade:	f103 0110 	add.w	r1, r3, #16
   b9ae2:	f853 4b04 	ldr.w	r4, [r3], #4
   b9ae6:	f842 4b04 	str.w	r4, [r2], #4
   b9aea:	428b      	cmp	r3, r1
   b9aec:	d1f9      	bne.n	b9ae2 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b9aee:	bd10      	pop	{r4, pc}
   b9af0:	000bf7c6 	.word	0x000bf7c6

000b9af4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b9af4:	b510      	push	{r4, lr}
    if (uuid128) {
   b9af6:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b9af8:	4604      	mov	r4, r0
    if (uuid128) {
   b9afa:	b1b1      	cbz	r1, b9b2a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b9afc:	2a01      	cmp	r2, #1
   b9afe:	f101 0210 	add.w	r2, r1, #16
   b9b02:	d10a      	bne.n	b9b1a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b9b04:	4601      	mov	r1, r0
   b9b06:	f853 0b04 	ldr.w	r0, [r3], #4
   b9b0a:	f841 0b04 	str.w	r0, [r1], #4
   b9b0e:	4293      	cmp	r3, r2
   b9b10:	d1f9      	bne.n	b9b06 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b9b12:	2301      	movs	r3, #1
   b9b14:	6123      	str	r3, [r4, #16]
}
   b9b16:	4620      	mov	r0, r4
   b9b18:	bd10      	pop	{r4, pc}
   b9b1a:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b9b1c:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b9b20:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b9b24:	429a      	cmp	r2, r3
   b9b26:	d1f9      	bne.n	b9b1c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b9b28:	e7f3      	b.n	b9b12 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b9b2a:	2210      	movs	r2, #16
   b9b2c:	f003 f9fc 	bl	bcf28 <memset>
   b9b30:	e7f1      	b.n	b9b16 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b9b32 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b9b32:	b538      	push	{r3, r4, r5, lr}
   b9b34:	4604      	mov	r4, r0
   b9b36:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b9b38:	461a      	mov	r2, r3
   b9b3a:	f7ff ffdb 	bl	b9af4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b9b3e:	81a5      	strh	r5, [r4, #12]
}
   b9b40:	4620      	mov	r0, r4
   b9b42:	bd38      	pop	{r3, r4, r5, pc}

000b9b44 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b9b44:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b9b46:	6902      	ldr	r2, [r0, #16]
   b9b48:	b922      	cbnz	r2, b9b54 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b9b4a:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b9b4c:	3800      	subs	r0, #0
   b9b4e:	bf18      	it	ne
   b9b50:	2001      	movne	r0, #1
}
   b9b52:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b9b54:	4902      	ldr	r1, [pc, #8]	; (b9b60 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b9b56:	2210      	movs	r2, #16
   b9b58:	f003 f9ae 	bl	bceb8 <memcmp>
   b9b5c:	e7f6      	b.n	b9b4c <_ZNK8particle7BleUuid7isValidEv+0x8>
   b9b5e:	bf00      	nop
   b9b60:	000bf7e6 	.word	0x000bf7e6

000b9b64 <_ZNK8particle7BleUuid4typeEv>:
}
   b9b64:	6900      	ldr	r0, [r0, #16]
   b9b66:	4770      	bx	lr

000b9b68 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b9b68:	b538      	push	{r3, r4, r5, lr}
   b9b6a:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b9b6c:	2214      	movs	r2, #20
   b9b6e:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b9b70:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b9b72:	f003 f9d9 	bl	bcf28 <memset>
    if (type_ == BleUuidType::SHORT) {
   b9b76:	6923      	ldr	r3, [r4, #16]
   b9b78:	b91b      	cbnz	r3, b9b82 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b9b7a:	89a3      	ldrh	r3, [r4, #12]
   b9b7c:	802b      	strh	r3, [r5, #0]
}
   b9b7e:	4628      	mov	r0, r5
   b9b80:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b9b82:	2301      	movs	r3, #1
   b9b84:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b9b86:	4621      	mov	r1, r4
   b9b88:	462b      	mov	r3, r5
   b9b8a:	f104 0210 	add.w	r2, r4, #16
   b9b8e:	f851 0b04 	ldr.w	r0, [r1], #4
   b9b92:	f843 0b04 	str.w	r0, [r3], #4
   b9b96:	4291      	cmp	r1, r2
   b9b98:	d1f9      	bne.n	b9b8e <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b9b9a:	e7f0      	b.n	b9b7e <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b9b9c <_ZNK8particle7BleUuid7shortedEv>:
}
   b9b9c:	8980      	ldrh	r0, [r0, #12]
   b9b9e:	4770      	bx	lr

000b9ba0 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b9ba0:	4770      	bx	lr

000b9ba2 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b9ba2:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b9ba4:	6902      	ldr	r2, [r0, #16]
   b9ba6:	690b      	ldr	r3, [r1, #16]
   b9ba8:	429a      	cmp	r2, r3
   b9baa:	d106      	bne.n	b9bba <_ZNK8particle7BleUuideqERKS0_+0x18>
   b9bac:	2210      	movs	r2, #16
   b9bae:	f003 f983 	bl	bceb8 <memcmp>
   b9bb2:	fab0 f080 	clz	r0, r0
   b9bb6:	0940      	lsrs	r0, r0, #5
}
   b9bb8:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b9bba:	2000      	movs	r0, #0
   b9bbc:	e7fc      	b.n	b9bb8 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b9bc0 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b9bc0:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b9bc2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b9bc6:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b9bc8:	4b34      	ldr	r3, [pc, #208]	; (b9c9c <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b9bca:	460c      	mov	r4, r1
   b9bcc:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b9bce:	4602      	mov	r2, r0
   b9bd0:	f103 0110 	add.w	r1, r3, #16
   b9bd4:	f853 0b04 	ldr.w	r0, [r3], #4
   b9bd8:	f842 0b04 	str.w	r0, [r2], #4
   b9bdc:	428b      	cmp	r3, r1
   b9bde:	d1f9      	bne.n	b9bd4 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b9be0:	b344      	cbz	r4, b9c34 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b9be2:	2124      	movs	r1, #36	; 0x24
   b9be4:	4620      	mov	r0, r4
   b9be6:	f003 fa03 	bl	bcff0 <strnlen>
   b9bea:	2804      	cmp	r0, #4
   b9bec:	f04f 0500 	mov.w	r5, #0
   b9bf0:	d123      	bne.n	b9c3a <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b9bf2:	f8ad 5004 	strh.w	r5, [sp, #4]
   b9bf6:	af01      	add	r7, sp, #4
   b9bf8:	1ca5      	adds	r5, r4, #2
   b9bfa:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b9bfc:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b9c00:	f7ff ff0c 	bl	b9a1c <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b9c04:	f1b0 0800 	subs.w	r8, r0, #0
   b9c08:	db12      	blt.n	b9c30 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b9c0a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b9c0e:	f7ff ff05 	bl	b9a1c <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b9c12:	2800      	cmp	r0, #0
   b9c14:	db0c      	blt.n	b9c30 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b9c16:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b9c18:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b9c1c:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b9c1e:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b9c22:	d1eb      	bne.n	b9bfc <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b9c24:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b9c28:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b9c2a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b9c2e:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b9c30:	2300      	movs	r3, #0
   b9c32:	6133      	str	r3, [r6, #16]
}
   b9c34:	b002      	add	sp, #8
   b9c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b9c3a:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b9c3e:	2124      	movs	r1, #36	; 0x24
   b9c40:	4620      	mov	r0, r4
   b9c42:	f003 f9d5 	bl	bcff0 <strnlen>
   b9c46:	42a8      	cmp	r0, r5
   b9c48:	d807      	bhi.n	b9c5a <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b9c4a:	4642      	mov	r2, r8
   b9c4c:	2100      	movs	r1, #0
   b9c4e:	4630      	mov	r0, r6
}
   b9c50:	b002      	add	sp, #8
   b9c52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b9c56:	f003 b967 	b.w	bcf28 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b9c5a:	f1b8 0f00 	cmp.w	r8, #0
   b9c5e:	d0e9      	beq.n	b9c34 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b9c60:	5d60      	ldrb	r0, [r4, r5]
   b9c62:	f7ff fedb 	bl	b9a1c <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b9c66:	0603      	lsls	r3, r0, #24
   b9c68:	d415      	bmi.n	b9c96 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b9c6a:	0100      	lsls	r0, r0, #4
   b9c6c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b9c70:	b2c7      	uxtb	r7, r0
   b9c72:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b9c76:	2124      	movs	r1, #36	; 0x24
   b9c78:	4620      	mov	r0, r4
   b9c7a:	f003 f9b9 	bl	bcff0 <strnlen>
   b9c7e:	3501      	adds	r5, #1
   b9c80:	42a8      	cmp	r0, r5
   b9c82:	d908      	bls.n	b9c96 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b9c84:	5d60      	ldrb	r0, [r4, r5]
   b9c86:	f7ff fec9 	bl	b9a1c <_ZN8particle11hexToNibbleEc>
   b9c8a:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b9c8c:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b9c8e:	bfa4      	itt	ge
   b9c90:	4338      	orrge	r0, r7
   b9c92:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b9c96:	3501      	adds	r5, #1
   b9c98:	e7d1      	b.n	b9c3e <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b9c9a:	bf00      	nop
   b9c9c:	000bf7c6 	.word	0x000bf7c6

000b9ca0 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b9ca0:	b513      	push	{r0, r1, r4, lr}
   b9ca2:	4604      	mov	r4, r0
   b9ca4:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b9ca6:	f7ff ff15 	bl	b9ad4 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b9caa:	4620      	mov	r0, r4
   b9cac:	9901      	ldr	r1, [sp, #4]
   b9cae:	f7ff ff87 	bl	b9bc0 <_ZN8particle7BleUuid9constructEPKc>
}
   b9cb2:	4620      	mov	r0, r4
   b9cb4:	b002      	add	sp, #8
   b9cb6:	bd10      	pop	{r4, pc}

000b9cb8 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b9cb8:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b9cba:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b9cbe:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b9cc0:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b9cc2:	8043      	strh	r3, [r0, #2]
   b9cc4:	220e      	movs	r2, #14
   b9cc6:	4629      	mov	r1, r5
   b9cc8:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b9cca:	7105      	strb	r5, [r0, #4]
   b9ccc:	3006      	adds	r0, #6
   b9cce:	f003 f92b 	bl	bcf28 <memset>
   b9cd2:	f104 0014 	add.w	r0, r4, #20
   b9cd6:	f7ff fefd 	bl	b9ad4 <_ZN8particle7BleUuidC1Ev>
   b9cda:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b9cde:	f7ff fef9 	bl	b9ad4 <_ZN8particle7BleUuidC1Ev>
   b9ce2:	4904      	ldr	r1, [pc, #16]	; (b9cf4 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b9ce4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b9ce8:	f001 fa79 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b9cec:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b9cee:	4620      	mov	r0, r4
   b9cf0:	bd38      	pop	{r3, r4, r5, pc}
   b9cf2:	bf00      	nop
   b9cf4:	000bf5d2 	.word	0x000bf5d2

000b9cf8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b9cf8:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b9cfa:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b9cfe:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b9d02:	4293      	cmp	r3, r2
   b9d04:	4618      	mov	r0, r3
   b9d06:	d006      	beq.n	b9d16 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b9d08:	6804      	ldr	r4, [r0, #0]
   b9d0a:	8824      	ldrh	r4, [r4, #0]
   b9d0c:	428c      	cmp	r4, r1
   b9d0e:	f103 0308 	add.w	r3, r3, #8
   b9d12:	d1f6      	bne.n	b9d02 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b9d14:	bd10      	pop	{r4, pc}
        return nullptr;
   b9d16:	2000      	movs	r0, #0
   b9d18:	e7fc      	b.n	b9d14 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b9d1c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b9d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9d1e:	4606      	mov	r6, r0
   b9d20:	b085      	sub	sp, #20
   b9d22:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b9d24:	460d      	mov	r5, r1
   b9d26:	2900      	cmp	r1, #0
   b9d28:	d050      	beq.n	b9dcc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b9d2a:	2a00      	cmp	r2, #0
   b9d2c:	d04e      	beq.n	b9dcc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b9d2e:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b9d30:	7823      	ldrb	r3, [r4, #0]
   b9d32:	2af4      	cmp	r2, #244	; 0xf4
   b9d34:	bf28      	it	cs
   b9d36:	22f4      	movcs	r2, #244	; 0xf4
   b9d38:	b343      	cbz	r3, b9d8c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b9d3a:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b9d3c:	0798      	lsls	r0, r3, #30
   b9d3e:	d509      	bpl.n	b9d54 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b9d40:	89a0      	ldrh	r0, [r4, #12]
   b9d42:	9203      	str	r2, [sp, #12]
   b9d44:	2300      	movs	r3, #0
   b9d46:	f7ff fae5 	bl	b9314 <hal_ble_gatt_server_set_characteristic_value>
   b9d4a:	2800      	cmp	r0, #0
   b9d4c:	9a03      	ldr	r2, [sp, #12]
   b9d4e:	da03      	bge.n	b9d58 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b9d50:	b005      	add	sp, #20
   b9d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b9d54:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b9d58:	6834      	ldr	r4, [r6, #0]
   b9d5a:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b9d5c:	06d9      	lsls	r1, r3, #27
   b9d5e:	d509      	bpl.n	b9d74 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b9d60:	2f01      	cmp	r7, #1
   b9d62:	d007      	beq.n	b9d74 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b9d64:	89a0      	ldrh	r0, [r4, #12]
   b9d66:	2300      	movs	r3, #0
   b9d68:	4629      	mov	r1, r5
}
   b9d6a:	b005      	add	sp, #20
   b9d6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b9d70:	f7ff bb02 	b.w	b9378 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b9d74:	069b      	lsls	r3, r3, #26
   b9d76:	d5eb      	bpl.n	b9d50 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b9d78:	2f02      	cmp	r7, #2
   b9d7a:	d0e9      	beq.n	b9d50 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b9d7c:	89a0      	ldrh	r0, [r4, #12]
   b9d7e:	2300      	movs	r3, #0
   b9d80:	4629      	mov	r1, r5
}
   b9d82:	b005      	add	sp, #20
   b9d84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b9d88:	f7ff bb00 	b.w	b938c <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b9d8c:	8860      	ldrh	r0, [r4, #2]
   b9d8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b9d92:	4288      	cmp	r0, r1
   b9d94:	d01c      	beq.n	b9dd0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b9d96:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b9d98:	074e      	lsls	r6, r1, #29
   b9d9a:	d501      	bpl.n	b9da0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b9d9c:	2f01      	cmp	r7, #1
   b9d9e:	d104      	bne.n	b9daa <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b9da0:	070b      	lsls	r3, r1, #28
   b9da2:	d409      	bmi.n	b9db8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b9da4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b9da8:	e7d2      	b.n	b9d50 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b9daa:	89a1      	ldrh	r1, [r4, #12]
   b9dac:	9300      	str	r3, [sp, #0]
   b9dae:	4613      	mov	r3, r2
   b9db0:	462a      	mov	r2, r5
   b9db2:	f7ff fac3 	bl	b933c <hal_ble_gatt_client_write_without_response>
   b9db6:	e7cb      	b.n	b9d50 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b9db8:	2f02      	cmp	r7, #2
   b9dba:	d0f3      	beq.n	b9da4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b9dbc:	2300      	movs	r3, #0
   b9dbe:	89a1      	ldrh	r1, [r4, #12]
   b9dc0:	9300      	str	r3, [sp, #0]
   b9dc2:	4613      	mov	r3, r2
   b9dc4:	462a      	mov	r2, r5
   b9dc6:	f7ff faaf 	bl	b9328 <hal_ble_gatt_client_write_with_response>
   b9dca:	e7c1      	b.n	b9d50 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b9dcc:	4802      	ldr	r0, [pc, #8]	; (b9dd8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b9dce:	e7bf      	b.n	b9d50 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b9dd0:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b9dd4:	e7bc      	b.n	b9d50 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b9dd6:	bf00      	nop
   b9dd8:	fffffef2 	.word	0xfffffef2

000b9ddc <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b9ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9dde:	460c      	mov	r4, r1
   b9de0:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b9de2:	21f4      	movs	r1, #244	; 0xf4
   b9de4:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b9de6:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b9de8:	f003 f902 	bl	bcff0 <strnlen>
   b9dec:	9b01      	ldr	r3, [sp, #4]
   b9dee:	4602      	mov	r2, r0
   b9df0:	4621      	mov	r1, r4
   b9df2:	4628      	mov	r0, r5
}
   b9df4:	b003      	add	sp, #12
   b9df6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b9dfa:	f7ff bf8f 	b.w	b9d1c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000b9e00 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b9e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9e04:	2600      	movs	r6, #0
   b9e06:	6006      	str	r6, [r0, #0]
   b9e08:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9e0a:	2028      	movs	r0, #40	; 0x28
   b9e0c:	460c      	mov	r4, r1
   b9e0e:	f7fa f942 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b9e12:	1e05      	subs	r5, r0, #0
   b9e14:	f105 080c 	add.w	r8, r5, #12
   b9e18:	d00f      	beq.n	b9e3a <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b9e1a:	2301      	movs	r3, #1
   b9e1c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b9e20:	4b08      	ldr	r3, [pc, #32]	; (b9e44 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b9e22:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b9e24:	4640      	mov	r0, r8
   b9e26:	f7ff fe55 	bl	b9ad4 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b9e2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b9e2c:	622e      	str	r6, [r5, #32]
   b9e2e:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b9e32:	4646      	mov	r6, r8
   b9e34:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b9e36:	6823      	ldr	r3, [r4, #0]
   b9e38:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b9e3a:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b9e3e:	4638      	mov	r0, r7
   b9e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9e44:	000bf788 	.word	0x000bf788

000b9e48 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b9e48:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9e4a:	2500      	movs	r5, #0
   b9e4c:	6005      	str	r5, [r0, #0]
   b9e4e:	4606      	mov	r6, r0
   b9e50:	2030      	movs	r0, #48	; 0x30
   b9e52:	f7fa f920 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b9e56:	4604      	mov	r4, r0
   b9e58:	b188      	cbz	r0, b9e7e <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b9e5a:	2301      	movs	r3, #1
   b9e5c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b9e60:	4b09      	ldr	r3, [pc, #36]	; (b9e88 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b9e62:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b9e64:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b9e68:	8183      	strh	r3, [r0, #12]
   b9e6a:	300e      	adds	r0, #14
   b9e6c:	f7ff fe27 	bl	b9abe <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b9e70:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b9e74:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b9e78:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b9e7c:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b9e7e:	6074      	str	r4, [r6, #4]
   b9e80:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b9e82:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b9e84:	4630      	mov	r0, r6
   b9e86:	bd70      	pop	{r4, r5, r6, pc}
   b9e88:	000bf7a4 	.word	0x000bf7a4

000b9e8c <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b9e8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9e8e:	460d      	mov	r5, r1
   b9e90:	4604      	mov	r4, r0
    WiringBleLock lk;
   b9e92:	a801      	add	r0, sp, #4
   b9e94:	f7ff fdd8 	bl	b9a48 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b9e98:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b9e9a:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b9e9e:	6023      	str	r3, [r4, #0]
   b9ea0:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b9ea4:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b9ea6:	a801      	add	r0, sp, #4
   b9ea8:	f7ff fddc 	bl	b9a64 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b9eac:	4620      	mov	r0, r4
   b9eae:	b003      	add	sp, #12
   b9eb0:	bd30      	pop	{r4, r5, pc}

000b9eb2 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b9eb2:	b530      	push	{r4, r5, lr}
   b9eb4:	4605      	mov	r5, r0
   b9eb6:	b087      	sub	sp, #28
   b9eb8:	460c      	mov	r4, r1
    WiringBleLock lk;
   b9eba:	a801      	add	r0, sp, #4
   b9ebc:	f7ff fdc4 	bl	b9a48 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b9ec0:	682a      	ldr	r2, [r5, #0]
   b9ec2:	6823      	ldr	r3, [r4, #0]
   b9ec4:	8812      	ldrh	r2, [r2, #0]
   b9ec6:	881b      	ldrh	r3, [r3, #0]
   b9ec8:	429a      	cmp	r2, r3
   b9eca:	d10d      	bne.n	b9ee8 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b9ecc:	4629      	mov	r1, r5
   b9ece:	a802      	add	r0, sp, #8
   b9ed0:	f7ff ffdc 	bl	b9e8c <_ZNK8particle13BlePeerDevice7addressEv>
   b9ed4:	4621      	mov	r1, r4
   b9ed6:	a804      	add	r0, sp, #16
   b9ed8:	f7ff ffd8 	bl	b9e8c <_ZNK8particle13BlePeerDevice7addressEv>
   b9edc:	a904      	add	r1, sp, #16
   b9ede:	a802      	add	r0, sp, #8
   b9ee0:	f7ff fdd9 	bl	b9a96 <_ZNK8particle10BleAddresseqERKS0_>
   b9ee4:	4604      	mov	r4, r0
   b9ee6:	b900      	cbnz	r0, b9eea <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b9ee8:	2400      	movs	r4, #0
    WiringBleLock lk;
   b9eea:	a801      	add	r0, sp, #4
   b9eec:	f7ff fdba 	bl	b9a64 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b9ef0:	4620      	mov	r0, r4
   b9ef2:	b007      	add	sp, #28
   b9ef4:	bd30      	pop	{r4, r5, pc}
	...

000b9ef8 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b9ef8:	b510      	push	{r4, lr}
   b9efa:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b9efc:	2064      	movs	r0, #100	; 0x64
   b9efe:	f7fa f8ca 	bl	b4096 <_Znwj>
   b9f02:	b168      	cbz	r0, b9f20 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b9f04:	2300      	movs	r3, #0
   b9f06:	e9c0 3300 	strd	r3, r3, [r0]
   b9f0a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b9f0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b9f12:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b9f16:	6203      	str	r3, [r0, #32]
   b9f18:	62c3      	str	r3, [r0, #44]	; 0x2c
   b9f1a:	63c3      	str	r3, [r0, #60]	; 0x3c
   b9f1c:	64c3      	str	r3, [r0, #76]	; 0x4c
   b9f1e:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b9f20:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b9f22:	b920      	cbnz	r0, b9f2e <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b9f24:	4a0a      	ldr	r2, [pc, #40]	; (b9f50 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b9f26:	490b      	ldr	r1, [pc, #44]	; (b9f54 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b9f28:	200a      	movs	r0, #10
   b9f2a:	f7ff fbb1 	bl	b9690 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b9f2e:	2000      	movs	r0, #0
   b9f30:	f7ff f9bc 	bl	b92ac <hal_ble_stack_init>
   b9f34:	b120      	cbz	r0, b9f40 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b9f36:	4a06      	ldr	r2, [pc, #24]	; (b9f50 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b9f38:	4907      	ldr	r1, [pc, #28]	; (b9f58 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b9f3a:	200a      	movs	r0, #10
   b9f3c:	f7ff fba8 	bl	b9690 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b9f40:	6821      	ldr	r1, [r4, #0]
   b9f42:	4806      	ldr	r0, [pc, #24]	; (b9f5c <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b9f44:	2200      	movs	r2, #0
   b9f46:	f7ff fa0d 	bl	b9364 <hal_ble_set_callback_on_periph_link_events>
}
   b9f4a:	4620      	mov	r0, r4
   b9f4c:	bd10      	pop	{r4, pc}
   b9f4e:	bf00      	nop
   b9f50:	000b9411 	.word	0x000b9411
   b9f54:	000bf618 	.word	0x000bf618
   b9f58:	000bf656 	.word	0x000bf656
   b9f5c:	000ba4e1 	.word	0x000ba4e1

000b9f60 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b9f60:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b9f62:	4c0a      	ldr	r4, [pc, #40]	; (b9f8c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b9f64:	7823      	ldrb	r3, [r4, #0]
   b9f66:	f3bf 8f5b 	dmb	ish
   b9f6a:	07db      	lsls	r3, r3, #31
   b9f6c:	d40c      	bmi.n	b9f88 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b9f6e:	4620      	mov	r0, r4
   b9f70:	f7fa f89b 	bl	b40aa <__cxa_guard_acquire>
   b9f74:	b140      	cbz	r0, b9f88 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b9f76:	4806      	ldr	r0, [pc, #24]	; (b9f90 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b9f78:	f7ff ffbe 	bl	b9ef8 <_ZN8particle14BleLocalDeviceC1Ev>
   b9f7c:	4620      	mov	r0, r4
   b9f7e:	f7fa f899 	bl	b40b4 <__cxa_guard_release>
   b9f82:	4804      	ldr	r0, [pc, #16]	; (b9f94 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b9f84:	f002 ff8e 	bl	bcea4 <atexit>
    return instance;
}
   b9f88:	4801      	ldr	r0, [pc, #4]	; (b9f90 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b9f8a:	bd10      	pop	{r4, pc}
   b9f8c:	2003e6b8 	.word	0x2003e6b8
   b9f90:	2003e6c4 	.word	0x2003e6c4
   b9f94:	000ba1ad 	.word	0x000ba1ad

000b9f98 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b9f98:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b9f9a:	6803      	ldr	r3, [r0, #0]
   b9f9c:	3b09      	subs	r3, #9
   b9f9e:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b9fa0:	b08d      	sub	sp, #52	; 0x34
   b9fa2:	4604      	mov	r4, r0
   b9fa4:	460d      	mov	r5, r1
    switch (event->type) {
   b9fa6:	d811      	bhi.n	b9fcc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b9fa8:	f7ff ffda 	bl	b9f60 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b9fac:	88a1      	ldrh	r1, [r4, #4]
   b9fae:	6800      	ldr	r0, [r0, #0]
   b9fb0:	f7ff fea2 	bl	b9cf8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b9fb4:	4603      	mov	r3, r0
   b9fb6:	b958      	cbnz	r0, b9fd0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b9fb8:	2220      	movs	r2, #32
   b9fba:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b9fbe:	4a0b      	ldr	r2, [pc, #44]	; (b9fec <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b9fc0:	9200      	str	r2, [sp, #0]
   b9fc2:	490b      	ldr	r1, [pc, #44]	; (b9ff0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b9fc4:	aa04      	add	r2, sp, #16
   b9fc6:	2032      	movs	r0, #50	; 0x32
   b9fc8:	f7ff fb6a 	bl	b96a0 <log_message>
}
   b9fcc:	b00d      	add	sp, #52	; 0x34
   b9fce:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b9fd0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b9fd2:	2a00      	cmp	r2, #0
   b9fd4:	d0fa      	beq.n	b9fcc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b9fd6:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9fda:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b9fde:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b9fe2:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b9fe4:	aa04      	add	r2, sp, #16
   b9fe6:	a903      	add	r1, sp, #12
   b9fe8:	47a0      	blx	r4
}
   b9fea:	e7ef      	b.n	b9fcc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b9fec:	000bf698 	.word	0x000bf698
   b9ff0:	000bf62f 	.word	0x000bf62f

000b9ff4 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b9ff4:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b9ff6:	2000      	movs	r0, #0
   b9ff8:	f7ff f958 	bl	b92ac <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b9ffc:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   ba000:	bd08      	pop	{r3, pc}

000ba002 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   ba002:	b919      	cbnz	r1, ba00c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   ba004:	460a      	mov	r2, r1
   ba006:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   ba008:	f7ff b958 	b.w	b92bc <hal_ble_gap_set_advertising_data>
   ba00c:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba010:	2200      	movs	r2, #0
   ba012:	e7f9      	b.n	ba008 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000ba014 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   ba014:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   ba016:	1e14      	subs	r4, r2, #0
   ba018:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   ba01a:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   ba01c:	db02      	blt.n	ba024 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   ba01e:	1862      	adds	r2, r4, r1
   ba020:	429a      	cmp	r2, r3
   ba022:	dd00      	ble.n	ba026 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   ba024:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   ba026:	682a      	ldr	r2, [r5, #0]
   ba028:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   ba02a:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   ba02c:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba02e:	1a52      	subs	r2, r2, r1
   ba030:	f002 ff60 	bl	bcef4 <memmove>
    size_ -= n;
   ba034:	686a      	ldr	r2, [r5, #4]
   ba036:	1b12      	subs	r2, r2, r4
   ba038:	606a      	str	r2, [r5, #4]
}
   ba03a:	bd38      	pop	{r3, r4, r5, pc}

000ba03c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   ba03c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   ba03e:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   ba040:	4604      	mov	r4, r0
   ba042:	460d      	mov	r5, r1
   ba044:	ab01      	add	r3, sp, #4
   ba046:	e9d0 0100 	ldrd	r0, r1, [r0]
   ba04a:	f7ff fc73 	bl	b9934 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   ba04e:	4602      	mov	r2, r0
   ba050:	b138      	cbz	r0, ba062 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   ba052:	9901      	ldr	r1, [sp, #4]
   ba054:	4620      	mov	r0, r4
   ba056:	f7ff ffdd 	bl	ba014 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   ba05a:	4629      	mov	r1, r5
   ba05c:	4620      	mov	r0, r4
   ba05e:	f7ff ffed 	bl	ba03c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   ba062:	b003      	add	sp, #12
   ba064:	bd30      	pop	{r4, r5, pc}

000ba066 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   ba066:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   ba068:	460c      	mov	r4, r1
   ba06a:	b929      	cbnz	r1, ba078 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   ba06c:	460a      	mov	r2, r1
   ba06e:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   ba070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   ba074:	f7ff b92a 	b.w	b92cc <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   ba078:	2101      	movs	r1, #1
   ba07a:	4620      	mov	r0, r4
   ba07c:	f7ff ffde 	bl	ba03c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   ba080:	e9d4 0100 	ldrd	r0, r1, [r4]
   ba084:	2200      	movs	r2, #0
   ba086:	e7f3      	b.n	ba070 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000ba088 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   ba088:	b538      	push	{r3, r4, r5, lr}
   ba08a:	4604      	mov	r4, r0
   ba08c:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   ba08e:	f7ff ffb8 	bl	ba002 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   ba092:	2800      	cmp	r0, #0
   ba094:	db0a      	blt.n	ba0ac <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   ba096:	4629      	mov	r1, r5
   ba098:	4620      	mov	r0, r4
   ba09a:	f7ff ffe4 	bl	ba066 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   ba09e:	2800      	cmp	r0, #0
   ba0a0:	db04      	blt.n	ba0ac <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   ba0a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   ba0a6:	2000      	movs	r0, #0
   ba0a8:	f7ff b918 	b.w	b92dc <hal_ble_gap_start_advertising>
}
   ba0ac:	bd38      	pop	{r3, r4, r5, pc}
	...

000ba0b0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   ba0b0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   ba0b2:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   ba0b4:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   ba0b6:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba0b8:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   ba0ba:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba0bc:	f7f9 ffeb 	bl	b4096 <_Znwj>
   ba0c0:	b118      	cbz	r0, ba0ca <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   ba0c2:	682b      	ldr	r3, [r5, #0]
   ba0c4:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   ba0c6:	686b      	ldr	r3, [r5, #4]
   ba0c8:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   ba0ca:	4b03      	ldr	r3, [pc, #12]	; (ba0d8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   ba0cc:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   ba0ce:	4b03      	ldr	r3, [pc, #12]	; (ba0dc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba0d0:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   ba0d2:	60a3      	str	r3, [r4, #8]
      }
   ba0d4:	4620      	mov	r0, r4
   ba0d6:	bd38      	pop	{r3, r4, r5, pc}
   ba0d8:	000b9975 	.word	0x000b9975
   ba0dc:	000b998d 	.word	0x000b998d

000ba0e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   ba0e0:	680b      	ldr	r3, [r1, #0]
   ba0e2:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   ba0e4:	b113      	cbz	r3, ba0ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   ba0e6:	685a      	ldr	r2, [r3, #4]
   ba0e8:	3201      	adds	r2, #1
   ba0ea:	605a      	str	r2, [r3, #4]
      }
   ba0ec:	4770      	bx	lr

000ba0ee <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   ba0ee:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   ba0f0:	f851 3b04 	ldr.w	r3, [r1], #4
   ba0f4:	4604      	mov	r4, r0
   ba0f6:	f840 3b04 	str.w	r3, [r0], #4
   ba0fa:	f7ff fff1 	bl	ba0e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   ba0fe:	6823      	ldr	r3, [r4, #0]
   ba100:	b90b      	cbnz	r3, ba106 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   ba102:	f7ff fc2d 	bl	b9960 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   ba106:	4620      	mov	r0, r4
   ba108:	bd10      	pop	{r4, pc}

000ba10a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   ba10a:	b510      	push	{r4, lr}
   ba10c:	f851 3b04 	ldr.w	r3, [r1], #4
   ba110:	4604      	mov	r4, r0
   ba112:	f840 3b04 	str.w	r3, [r0], #4
   ba116:	f7ff ffe3 	bl	ba0e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   ba11a:	4620      	mov	r0, r4
   ba11c:	bd10      	pop	{r4, pc}

000ba11e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   ba11e:	b510      	push	{r4, lr}
   ba120:	f851 3b04 	ldr.w	r3, [r1], #4
   ba124:	4604      	mov	r4, r0
   ba126:	f840 3b04 	str.w	r3, [r0], #4
   ba12a:	f7ff ffd9 	bl	ba0e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   ba12e:	4620      	mov	r0, r4
   ba130:	bd10      	pop	{r4, pc}

000ba132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   ba132:	b510      	push	{r4, lr}
   ba134:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   ba136:	6800      	ldr	r0, [r0, #0]
   ba138:	b108      	cbz	r0, ba13e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   ba13a:	f7ff fc5b 	bl	b99f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   ba13e:	4620      	mov	r0, r4
   ba140:	bd10      	pop	{r4, pc}

000ba142 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   ba142:	b510      	push	{r4, lr}
   ba144:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   ba146:	3004      	adds	r0, #4
   ba148:	f7ff fff3 	bl	ba132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   ba14c:	4620      	mov	r0, r4
   ba14e:	bd10      	pop	{r4, pc}

000ba150 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba150:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   ba152:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba156:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   ba158:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   ba15c:	42ae      	cmp	r6, r5
   ba15e:	d004      	beq.n	ba16a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   ba160:	1d28      	adds	r0, r5, #4
   ba162:	f7ff ffe6 	bl	ba132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba166:	3508      	adds	r5, #8
   ba168:	e7f8      	b.n	ba15c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   ba16a:	6820      	ldr	r0, [r4, #0]
   ba16c:	f7ff fb44 	bl	b97f8 <free>
}
   ba170:	4620      	mov	r0, r4
   ba172:	bd70      	pop	{r4, r5, r6, pc}

000ba174 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba174:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   ba176:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba17a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   ba17c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   ba180:	42ae      	cmp	r6, r5
   ba182:	d004      	beq.n	ba18e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   ba184:	1d28      	adds	r0, r5, #4
   ba186:	f7ff ffd4 	bl	ba132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba18a:	3508      	adds	r5, #8
   ba18c:	e7f8      	b.n	ba180 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   ba18e:	6820      	ldr	r0, [r4, #0]
   ba190:	f7ff fb32 	bl	b97f8 <free>
}
   ba194:	4620      	mov	r0, r4
   ba196:	bd70      	pop	{r4, r5, r6, pc}

000ba198 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   ba198:	b510      	push	{r4, lr}
   ba19a:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   ba19c:	3024      	adds	r0, #36	; 0x24
   ba19e:	f7ff ffe9 	bl	ba174 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   ba1a2:	f104 0018 	add.w	r0, r4, #24
   ba1a6:	f7ff ffd3 	bl	ba150 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   ba1aa:	bd10      	pop	{r4, pc}

000ba1ac <__tcf_0>:
    static BleLocalDevice instance;
   ba1ac:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   ba1ae:	4b17      	ldr	r3, [pc, #92]	; (ba20c <__tcf_0+0x60>)
   ba1b0:	681c      	ldr	r4, [r3, #0]
   ba1b2:	b354      	cbz	r4, ba20a <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   ba1b4:	f104 0054 	add.w	r0, r4, #84	; 0x54
   ba1b8:	f7ff fc08 	bl	b99cc <_ZNSt14_Function_baseD1Ev>
   ba1bc:	f104 0044 	add.w	r0, r4, #68	; 0x44
   ba1c0:	f7ff fc04 	bl	b99cc <_ZNSt14_Function_baseD1Ev>
   ba1c4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   ba1c8:	f7ff fc00 	bl	b99cc <_ZNSt14_Function_baseD1Ev>
   ba1cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   ba1d0:	f7ff fbfc 	bl	b99cc <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   ba1d4:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   ba1d8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   ba1dc:	42ae      	cmp	r6, r5
   ba1de:	d004      	beq.n	ba1ea <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   ba1e0:	1d28      	adds	r0, r5, #4
   ba1e2:	f7ff ffa6 	bl	ba132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba1e6:	3508      	adds	r5, #8
   ba1e8:	e7f8      	b.n	ba1dc <__tcf_0+0x30>
    ::free(ptr);
   ba1ea:	69a0      	ldr	r0, [r4, #24]
   ba1ec:	f7ff fb04 	bl	b97f8 <free>
    ~BleLocalDeviceImpl() = default;
   ba1f0:	f104 000c 	add.w	r0, r4, #12
   ba1f4:	f7ff ffbe 	bl	ba174 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   ba1f8:	4620      	mov	r0, r4
   ba1fa:	f7ff ffa9 	bl	ba150 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   ba1fe:	4620      	mov	r0, r4
   ba200:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   ba202:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba206:	f7f9 bf4e 	b.w	b40a6 <_ZdlPvj>
   ba20a:	bd70      	pop	{r4, r5, r6, pc}
   ba20c:	2003e6c4 	.word	0x2003e6c4

000ba210 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   ba210:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   ba212:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   ba214:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   ba218:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   ba21c:	6803      	ldr	r3, [r0, #0]
   ba21e:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   ba220:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   ba222:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   ba224:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   ba226:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   ba228:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   ba22a:	f7ff ff82 	bl	ba132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   ba22e:	b002      	add	sp, #8
   ba230:	bd10      	pop	{r4, pc}

000ba232 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   ba232:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   ba234:	b510      	push	{r4, lr}
      if (_M_empty())
   ba236:	b90a      	cbnz	r2, ba23c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   ba238:	f001 fe6f 	bl	bbf1a <_ZSt25__throw_bad_function_callv>
    }
   ba23c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba240:	68c3      	ldr	r3, [r0, #12]
   ba242:	4718      	bx	r3

000ba244 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   ba244:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   ba246:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   ba248:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   ba24a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   ba24c:	dd03      	ble.n	ba256 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   ba24e:	f7ff fadb 	bl	b9808 <realloc>
            if (!d) {
   ba252:	b918      	cbnz	r0, ba25c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   ba254:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   ba256:	f7ff facf 	bl	b97f8 <free>
        T* d = nullptr;
   ba25a:	2000      	movs	r0, #0
        data_ = d;
   ba25c:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   ba25e:	60a5      	str	r5, [r4, #8]
        return true;
   ba260:	2001      	movs	r0, #1
   ba262:	e7f7      	b.n	ba254 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000ba264 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   ba264:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   ba266:	6883      	ldr	r3, [r0, #8]
   ba268:	428b      	cmp	r3, r1
   ba26a:	da02      	bge.n	ba272 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   ba26c:	f7ff ffea 	bl	ba244 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   ba270:	bd08      	pop	{r3, pc}
    return true;
   ba272:	2001      	movs	r0, #1
   ba274:	e7fc      	b.n	ba270 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000ba276 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   ba276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba27a:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   ba27c:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   ba27e:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   ba280:	4419      	add	r1, r3
   ba282:	6883      	ldr	r3, [r0, #8]
   ba284:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   ba286:	4604      	mov	r4, r0
   ba288:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   ba28a:	dc12      	bgt.n	ba2b2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   ba28c:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba28e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   ba290:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba292:	1bd2      	subs	r2, r2, r7
   ba294:	4631      	mov	r1, r6
   ba296:	1970      	adds	r0, r6, r5
   ba298:	f002 fe2c 	bl	bcef4 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   ba29c:	462a      	mov	r2, r5
   ba29e:	4641      	mov	r1, r8
   ba2a0:	4630      	mov	r0, r6
   ba2a2:	f002 fe19 	bl	bced8 <memcpy>
    size_ += n;
   ba2a6:	6863      	ldr	r3, [r4, #4]
   ba2a8:	442b      	add	r3, r5
   ba2aa:	6063      	str	r3, [r4, #4]
    return true;
   ba2ac:	2001      	movs	r0, #1
}
   ba2ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   ba2b2:	f7ff ffc7 	bl	ba244 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   ba2b6:	2800      	cmp	r0, #0
   ba2b8:	d1e8      	bne.n	ba28c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   ba2ba:	e7f8      	b.n	ba2ae <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000ba2bc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   ba2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba2be:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba2c0:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   ba2c4:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   ba2c6:	4604      	mov	r4, r0
   ba2c8:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba2ca:	da0b      	bge.n	ba2e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   ba2cc:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba2ce:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   ba2d0:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba2d2:	1b52      	subs	r2, r2, r5
   ba2d4:	1c48      	adds	r0, r1, #1
   ba2d6:	f002 fe0d 	bl	bcef4 <memmove>
    new(p) T(std::move(value));
   ba2da:	557e      	strb	r6, [r7, r5]
    ++size_;
   ba2dc:	6863      	ldr	r3, [r4, #4]
   ba2de:	3301      	adds	r3, #1
   ba2e0:	6063      	str	r3, [r4, #4]
}
   ba2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba2e4:	3101      	adds	r1, #1
   ba2e6:	f7ff ffad 	bl	ba244 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   ba2ea:	2800      	cmp	r0, #0
   ba2ec:	d1ee      	bne.n	ba2cc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   ba2ee:	e7f8      	b.n	ba2e2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000ba2f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   ba2f0:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   ba2f2:	6841      	ldr	r1, [r0, #4]
   ba2f4:	f7ff bfe2 	b.w	ba2bc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000ba2f8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   ba2f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   ba2fc:	4604      	mov	r4, r0
   ba2fe:	461d      	mov	r5, r3
   ba300:	460f      	mov	r7, r1
   ba302:	ab01      	add	r3, sp, #4
   ba304:	4690      	mov	r8, r2
   ba306:	460a      	mov	r2, r1
   ba308:	e9d0 0100 	ldrd	r0, r1, [r0]
   ba30c:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   ba310:	f7ff fb10 	bl	b9934 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   ba314:	1cae      	adds	r6, r5, #2
   ba316:	6863      	ldr	r3, [r4, #4]
   ba318:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   ba31a:	f1b9 0f00 	cmp.w	r9, #0
   ba31e:	d126      	bne.n	ba36e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   ba320:	b328      	cbz	r0, ba36e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   ba322:	4433      	add	r3, r6
   ba324:	1a1b      	subs	r3, r3, r0
   ba326:	2bff      	cmp	r3, #255	; 0xff
   ba328:	d809      	bhi.n	ba33e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   ba32a:	9901      	ldr	r1, [sp, #4]
   ba32c:	4620      	mov	r0, r4
   ba32e:	f7ff fe71 	bl	ba014 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   ba332:	6861      	ldr	r1, [r4, #4]
   ba334:	4620      	mov	r0, r4
   ba336:	4431      	add	r1, r6
   ba338:	f7ff ff94 	bl	ba264 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   ba33c:	b918      	cbnz	r0, ba346 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   ba33e:	6860      	ldr	r0, [r4, #4]
}
   ba340:	b003      	add	sp, #12
   ba342:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   ba346:	1c6a      	adds	r2, r5, #1
   ba348:	9901      	ldr	r1, [sp, #4]
   ba34a:	b2d2      	uxtb	r2, r2
   ba34c:	4620      	mov	r0, r4
   ba34e:	f7ff ffb5 	bl	ba2bc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   ba352:	9901      	ldr	r1, [sp, #4]
   ba354:	463a      	mov	r2, r7
   ba356:	3101      	adds	r1, #1
   ba358:	4620      	mov	r0, r4
   ba35a:	f7ff ffaf 	bl	ba2bc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   ba35e:	9901      	ldr	r1, [sp, #4]
   ba360:	462b      	mov	r3, r5
   ba362:	4642      	mov	r2, r8
   ba364:	3102      	adds	r1, #2
    return insert(size_, values, n);
   ba366:	4620      	mov	r0, r4
   ba368:	f7ff ff85 	bl	ba276 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   ba36c:	e7e7      	b.n	ba33e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   ba36e:	18f1      	adds	r1, r6, r3
   ba370:	29ff      	cmp	r1, #255	; 0xff
   ba372:	d8e4      	bhi.n	ba33e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   ba374:	4620      	mov	r0, r4
   ba376:	f7ff ff75 	bl	ba264 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   ba37a:	2800      	cmp	r0, #0
   ba37c:	d0df      	beq.n	ba33e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   ba37e:	1c69      	adds	r1, r5, #1
   ba380:	b2c9      	uxtb	r1, r1
   ba382:	4620      	mov	r0, r4
   ba384:	f7ff ffb4 	bl	ba2f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   ba388:	4639      	mov	r1, r7
   ba38a:	4620      	mov	r0, r4
   ba38c:	f7ff ffb0 	bl	ba2f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   ba390:	6861      	ldr	r1, [r4, #4]
   ba392:	462b      	mov	r3, r5
   ba394:	4642      	mov	r2, r8
   ba396:	e7e6      	b.n	ba366 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000ba398 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   ba398:	b430      	push	{r4, r5}
   ba39a:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   ba39e:	b11a      	cbz	r2, ba3a8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   ba3a0:	9502      	str	r5, [sp, #8]
}
   ba3a2:	bc30      	pop	{r4, r5}
   ba3a4:	f7ff bfa8 	b.w	ba2f8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   ba3a8:	6840      	ldr	r0, [r0, #4]
}
   ba3aa:	bc30      	pop	{r4, r5}
   ba3ac:	4770      	bx	lr

000ba3ae <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   ba3ae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   ba3b0:	2300      	movs	r3, #0
   ba3b2:	e9c0 3300 	strd	r3, r3, [r0]
   ba3b6:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   ba3b8:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   ba3ba:	9300      	str	r3, [sp, #0]
   ba3bc:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   ba3be:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   ba3c2:	4619      	mov	r1, r3
   ba3c4:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   ba3c8:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   ba3ca:	f7ff ffe5 	bl	ba398 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   ba3ce:	4620      	mov	r0, r4
   ba3d0:	b004      	add	sp, #16
   ba3d2:	bd10      	pop	{r4, pc}

000ba3d4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   ba3d4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   ba3d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba3d8:	4604      	mov	r4, r0
   ba3da:	460d      	mov	r5, r1
   ba3dc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   ba3de:	d914      	bls.n	ba40a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   ba3e0:	4290      	cmp	r0, r2
   ba3e2:	d213      	bcs.n	ba40c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   ba3e4:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   ba3e8:	1a75      	subs	r5, r6, r1
   ba3ea:	f1a1 0708 	sub.w	r7, r1, #8
   ba3ee:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   ba3f0:	42b7      	cmp	r7, r6
   ba3f2:	d018      	beq.n	ba426 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   ba3f4:	b11c      	cbz	r4, ba3fe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   ba3f6:	4631      	mov	r1, r6
   ba3f8:	4620      	mov	r0, r4
   ba3fa:	f7ff fe90 	bl	ba11e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   ba3fe:	1d30      	adds	r0, r6, #4
   ba400:	f7ff fe97 	bl	ba132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   ba404:	3e08      	subs	r6, #8
   ba406:	3c08      	subs	r4, #8
   ba408:	e7f2      	b.n	ba3f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   ba40a:	d00c      	beq.n	ba426 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   ba40c:	42b5      	cmp	r5, r6
   ba40e:	d00a      	beq.n	ba426 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   ba410:	b11c      	cbz	r4, ba41a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   ba412:	4629      	mov	r1, r5
   ba414:	4620      	mov	r0, r4
   ba416:	f7ff fe82 	bl	ba11e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   ba41a:	1d28      	adds	r0, r5, #4
   ba41c:	f7ff fe89 	bl	ba132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   ba420:	3508      	adds	r5, #8
   ba422:	3408      	adds	r4, #8
   ba424:	e7f2      	b.n	ba40c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   ba426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba428 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   ba428:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba42a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   ba42c:	6846      	ldr	r6, [r0, #4]
   ba42e:	4668      	mov	r0, sp
   ba430:	f7ff fe75 	bl	ba11e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba434:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   ba438:	429f      	cmp	r7, r3
   ba43a:	db12      	blt.n	ba462 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   ba43c:	3701      	adds	r7, #1
        if (n > 0) {
   ba43e:	2f00      	cmp	r7, #0
   ba440:	dd29      	ble.n	ba496 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   ba442:	00f8      	lsls	r0, r7, #3
   ba444:	f7ff f9d0 	bl	b97e8 <malloc>
            if (!d) {
   ba448:	4605      	mov	r5, r0
   ba44a:	b1f0      	cbz	r0, ba48a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   ba44c:	e9d4 1200 	ldrd	r1, r2, [r4]
   ba450:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   ba454:	f7ff ffbe 	bl	ba3d4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   ba458:	6820      	ldr	r0, [r4, #0]
   ba45a:	f7ff f9cd 	bl	b97f8 <free>
        data_ = d;
   ba45e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   ba460:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   ba462:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   ba464:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   ba466:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   ba46a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   ba46e:	4631      	mov	r1, r6
   ba470:	f106 0008 	add.w	r0, r6, #8
   ba474:	f7ff ffae 	bl	ba3d4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   ba478:	b11e      	cbz	r6, ba482 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   ba47a:	4669      	mov	r1, sp
   ba47c:	4630      	mov	r0, r6
   ba47e:	f7ff fe4e 	bl	ba11e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   ba482:	6863      	ldr	r3, [r4, #4]
   ba484:	3301      	adds	r3, #1
   ba486:	6063      	str	r3, [r4, #4]
    return true;
   ba488:	2501      	movs	r5, #1
   ba48a:	a801      	add	r0, sp, #4
   ba48c:	f7ff fe51 	bl	ba132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   ba490:	4628      	mov	r0, r5
   ba492:	b003      	add	sp, #12
   ba494:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   ba496:	2500      	movs	r5, #0
   ba498:	e7de      	b.n	ba458 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000ba49a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   ba49a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   ba49c:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   ba4a0:	4605      	mov	r5, r0
   ba4a2:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   ba4a4:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   ba4a8:	42a6      	cmp	r6, r4
   ba4aa:	d005      	beq.n	ba4b8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   ba4ac:	4639      	mov	r1, r7
   ba4ae:	4620      	mov	r0, r4
   ba4b0:	f7ff fcff 	bl	b9eb2 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   ba4b4:	b108      	cbz	r0, ba4ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   ba4b6:	b914      	cbnz	r4, ba4be <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   ba4b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   ba4ba:	3408      	adds	r4, #8
   ba4bc:	e7f4      	b.n	ba4a8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   ba4be:	1d20      	adds	r0, r4, #4
   ba4c0:	f7ff fe37 	bl	ba132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   ba4c4:	e9d5 3200 	ldrd	r3, r2, [r5]
   ba4c8:	f104 0108 	add.w	r1, r4, #8
   ba4cc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   ba4d0:	4620      	mov	r0, r4
   ba4d2:	f7ff ff7f 	bl	ba3d4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   ba4d6:	686b      	ldr	r3, [r5, #4]
   ba4d8:	3b01      	subs	r3, #1
   ba4da:	606b      	str	r3, [r5, #4]
    return true;
   ba4dc:	e7ec      	b.n	ba4b8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000ba4e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   ba4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba4e4:	4605      	mov	r5, r0
   ba4e6:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   ba4e8:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   ba4ea:	460c      	mov	r4, r1
        WiringBleLock lk;
   ba4ec:	f7ff faac 	bl	b9a48 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   ba4f0:	682e      	ldr	r6, [r5, #0]
   ba4f2:	1ef3      	subs	r3, r6, #3
   ba4f4:	2b0d      	cmp	r3, #13
   ba4f6:	d83c      	bhi.n	ba572 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   ba4f8:	e8df f013 	tbh	[pc, r3, lsl #1]
   ba4fc:	0053000e 	.word	0x0053000e
   ba500:	00d1003b 	.word	0x00d1003b
   ba504:	003b003b 	.word	0x003b003b
   ba508:	003b003b 	.word	0x003b003b
   ba50c:	009b003b 	.word	0x009b003b
   ba510:	009b009b 	.word	0x009b009b
   ba514:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   ba518:	a804      	add	r0, sp, #16
   ba51a:	f7ff fc95 	bl	b9e48 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   ba51e:	9b04      	ldr	r3, [sp, #16]
   ba520:	89aa      	ldrh	r2, [r5, #12]
   ba522:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   ba524:	6869      	ldr	r1, [r5, #4]
   ba526:	9804      	ldr	r0, [sp, #16]
   ba528:	3108      	adds	r1, #8
   ba52a:	3002      	adds	r0, #2
   ba52c:	f7ff faa6 	bl	b9a7c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   ba530:	a904      	add	r1, sp, #16
   ba532:	a806      	add	r0, sp, #24
   ba534:	f7ff fdf3 	bl	ba11e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   ba538:	a906      	add	r1, sp, #24
   ba53a:	f104 0018 	add.w	r0, r4, #24
   ba53e:	f7ff ff73 	bl	ba428 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   ba542:	4605      	mov	r5, r0
   ba544:	a807      	add	r0, sp, #28
   ba546:	f7ff fdf4 	bl	ba132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba54a:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   ba54c:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   ba54e:	b9b5      	cbnz	r5, ba57e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   ba550:	4b5d      	ldr	r3, [pc, #372]	; (ba6c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   ba552:	495e      	ldr	r1, [pc, #376]	; (ba6cc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   ba554:	9300      	str	r3, [sp, #0]
   ba556:	2032      	movs	r0, #50	; 0x32
   ba558:	462b      	mov	r3, r5
   ba55a:	aa06      	add	r2, sp, #24
   ba55c:	9507      	str	r5, [sp, #28]
   ba55e:	f7ff f89f 	bl	b96a0 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   ba562:	9b04      	ldr	r3, [sp, #16]
   ba564:	4629      	mov	r1, r5
   ba566:	8818      	ldrh	r0, [r3, #0]
   ba568:	f7fe fec0 	bl	b92ec <hal_ble_gap_disconnect>
   ba56c:	a805      	add	r0, sp, #20
   ba56e:	f7ff fde0 	bl	ba132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   ba572:	a803      	add	r0, sp, #12
   ba574:	f7ff fa76 	bl	b9a64 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   ba578:	b00e      	add	sp, #56	; 0x38
   ba57a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   ba57e:	4a54      	ldr	r2, [pc, #336]	; (ba6d0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   ba580:	9200      	str	r2, [sp, #0]
   ba582:	2300      	movs	r3, #0
   ba584:	4951      	ldr	r1, [pc, #324]	; (ba6cc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   ba586:	9307      	str	r3, [sp, #28]
   ba588:	aa06      	add	r2, sp, #24
   ba58a:	2001      	movs	r0, #1
   ba58c:	f7ff f888 	bl	b96a0 <log_message>
                if (impl->connectedCallback_) {
   ba590:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba592:	2b00      	cmp	r3, #0
   ba594:	d0ea      	beq.n	ba56c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   ba596:	a904      	add	r1, sp, #16
   ba598:	f104 0024 	add.w	r0, r4, #36	; 0x24
   ba59c:	f7ff fe49 	bl	ba232 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   ba5a0:	e7e4      	b.n	ba56c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   ba5a2:	89a9      	ldrh	r1, [r5, #12]
   ba5a4:	4620      	mov	r0, r4
   ba5a6:	f7ff fba7 	bl	b9cf8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   ba5aa:	4606      	mov	r6, r0
   ba5ac:	2800      	cmp	r0, #0
   ba5ae:	d0e0      	beq.n	ba572 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   ba5b0:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   ba5b2:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   ba5b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   ba5ba:	8029      	strh	r1, [r5, #0]
   ba5bc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   ba5c0:	429a      	cmp	r2, r3
   ba5c2:	d003      	beq.n	ba5cc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   ba5c4:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   ba5c8:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   ba5ca:	e7f9      	b.n	ba5c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   ba5cc:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   ba5d0:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   ba5d4:	45b8      	cmp	r8, r7
   ba5d6:	d004      	beq.n	ba5e2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   ba5d8:	1d38      	adds	r0, r7, #4
   ba5da:	f7ff fdaa 	bl	ba132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba5de:	3708      	adds	r7, #8
   ba5e0:	e7f8      	b.n	ba5d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   ba5e2:	2300      	movs	r3, #0
   ba5e4:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   ba5e6:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   ba5ea:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   ba5ee:	45b8      	cmp	r8, r7
   ba5f0:	d004      	beq.n	ba5fc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   ba5f2:	1d38      	adds	r0, r7, #4
   ba5f4:	f7ff fd9d 	bl	ba132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba5f8:	3708      	adds	r7, #8
   ba5fa:	e7f8      	b.n	ba5ee <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   ba5fc:	2300      	movs	r3, #0
   ba5fe:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   ba600:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   ba602:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   ba604:	b123      	cbz	r3, ba610 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   ba606:	4631      	mov	r1, r6
   ba608:	f104 0034 	add.w	r0, r4, #52	; 0x34
   ba60c:	f7ff fe11 	bl	ba232 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   ba610:	2300      	movs	r3, #0
   ba612:	2220      	movs	r2, #32
   ba614:	e9cd 2306 	strd	r2, r3, [sp, #24]
   ba618:	4a2e      	ldr	r2, [pc, #184]	; (ba6d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   ba61a:	9200      	str	r2, [sp, #0]
   ba61c:	492b      	ldr	r1, [pc, #172]	; (ba6cc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   ba61e:	aa06      	add	r2, sp, #24
   ba620:	2001      	movs	r0, #1
   ba622:	f7ff f83d 	bl	b96a0 <log_message>
                    impl->peers_.removeOne(*peer);
   ba626:	4631      	mov	r1, r6
   ba628:	f104 0018 	add.w	r0, r4, #24
   ba62c:	f7ff ff35 	bl	ba49a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   ba630:	e79f      	b.n	ba572 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   ba632:	89a9      	ldrh	r1, [r5, #12]
   ba634:	4620      	mov	r0, r4
   ba636:	f7ff fb5f 	bl	b9cf8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   ba63a:	2800      	cmp	r0, #0
   ba63c:	d099      	beq.n	ba572 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   ba63e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   ba640:	2b00      	cmp	r3, #0
   ba642:	d096      	beq.n	ba572 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   ba644:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   ba646:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   ba648:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   ba64c:	d001      	beq.n	ba652 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   ba64e:	2e10      	cmp	r6, #16
   ba650:	d117      	bne.n	ba682 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   ba652:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   ba654:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   ba656:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   ba658:	2506      	movs	r5, #6
                        };
   ba65a:	f88d 3015 	strb.w	r3, [sp, #21]
   ba65e:	9104      	str	r1, [sp, #16]
   ba660:	f88d 2014 	strb.w	r2, [sp, #20]
   ba664:	9006      	str	r0, [sp, #24]
   ba666:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   ba66a:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   ba66c:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   ba670:	9508      	str	r5, [sp, #32]
   ba672:	e883 0003 	stmia.w	r3, {r0, r1}
   ba676:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba678:	a906      	add	r1, sp, #24
   ba67a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   ba67e:	4798      	blx	r3
   ba680:	e777      	b.n	ba572 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   ba682:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   ba684:	bf01      	itttt	eq
   ba686:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   ba688:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   ba68a:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   ba68e:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   ba690:	bf0f      	iteee	eq
   ba692:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   ba696:	461a      	movne	r2, r3
   ba698:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   ba69a:	461d      	movne	r5, r3
   ba69c:	e7dd      	b.n	ba65a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   ba69e:	89a9      	ldrh	r1, [r5, #12]
   ba6a0:	4620      	mov	r0, r4
   ba6a2:	f7ff fb29 	bl	b9cf8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   ba6a6:	4601      	mov	r1, r0
   ba6a8:	2800      	cmp	r0, #0
   ba6aa:	f43f af62 	beq.w	ba572 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   ba6ae:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba6b0:	2b00      	cmp	r3, #0
   ba6b2:	f43f af5e 	beq.w	ba572 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   ba6b6:	686b      	ldr	r3, [r5, #4]
   ba6b8:	9306      	str	r3, [sp, #24]
   ba6ba:	aa06      	add	r2, sp, #24
   ba6bc:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba6be:	f104 0054 	add.w	r0, r4, #84	; 0x54
   ba6c2:	4798      	blx	r3
   ba6c4:	e755      	b.n	ba572 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   ba6c6:	bf00      	nop
   ba6c8:	000bf6b0 	.word	0x000bf6b0
   ba6cc:	000bf62f 	.word	0x000bf62f
   ba6d0:	000bf6d6 	.word	0x000bf6d6
   ba6d4:	000bf6f3 	.word	0x000bf6f3

000ba6d8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   ba6d8:	b513      	push	{r0, r1, r4, lr}
   ba6da:	460b      	mov	r3, r1
   ba6dc:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba6de:	e9d0 0100 	ldrd	r0, r1, [r0]
   ba6e2:	466c      	mov	r4, sp
   ba6e4:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   ba6e8:	e893 0003 	ldmia.w	r3, {r0, r1}
   ba6ec:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   ba6f0:	e894 0003 	ldmia.w	r4, {r0, r1}
   ba6f4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   ba6f8:	b002      	add	sp, #8
   ba6fa:	bd10      	pop	{r4, pc}

000ba6fc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   ba6fc:	b538      	push	{r3, r4, r5, lr}
   ba6fe:	4605      	mov	r5, r0
   ba700:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   ba702:	f7ff ffe9 	bl	ba6d8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba706:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   ba708:	68a2      	ldr	r2, [r4, #8]
   ba70a:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba70c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba70e:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba710:	68e2      	ldr	r2, [r4, #12]
   ba712:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   ba714:	60e3      	str	r3, [r4, #12]
      }
   ba716:	bd38      	pop	{r3, r4, r5, pc}

000ba718 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   ba718:	b570      	push	{r4, r5, r6, lr}
   ba71a:	4604      	mov	r4, r0
   ba71c:	b08c      	sub	sp, #48	; 0x30
   ba71e:	460e      	mov	r6, r1
   ba720:	9201      	str	r2, [sp, #4]
   ba722:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   ba724:	f7ff fac8 	bl	b9cb8 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   ba728:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   ba72a:	9901      	ldr	r1, [sp, #4]
   ba72c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   ba730:	f000 fd9d 	bl	bb26e <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   ba734:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   ba738:	b1cd      	cbz	r5, ba76e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   ba73a:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   ba73c:	9502      	str	r5, [sp, #8]
   ba73e:	a902      	add	r1, sp, #8
   ba740:	a804      	add	r0, sp, #16
   ba742:	9303      	str	r3, [sp, #12]
   ba744:	f7ff fcb4 	bl	ba0b0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   ba748:	2300      	movs	r3, #0
	__x.swap(*this);
   ba74a:	a908      	add	r1, sp, #32
   ba74c:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   ba74e:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   ba750:	f7ff ffd4 	bl	ba6fc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   ba754:	4631      	mov	r1, r6
   ba756:	a808      	add	r0, sp, #32
   ba758:	f7ff ffd0 	bl	ba6fc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   ba75c:	a808      	add	r0, sp, #32
   ba75e:	f7ff f935 	bl	b99cc <_ZNSt14_Function_baseD1Ev>
   ba762:	a804      	add	r0, sp, #16
   ba764:	f7ff f932 	bl	b99cc <_ZNSt14_Function_baseD1Ev>
    }
   ba768:	4620      	mov	r0, r4
   ba76a:	b00c      	add	sp, #48	; 0x30
   ba76c:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   ba76e:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   ba770:	e7ea      	b.n	ba748 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000ba774 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   ba774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba778:	b087      	sub	sp, #28
   ba77a:	461d      	mov	r5, r3
   ba77c:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   ba780:	4680      	mov	r8, r0
   ba782:	468b      	mov	fp, r1
   ba784:	4692      	mov	sl, r2
   ba786:	9912      	ldr	r1, [sp, #72]	; 0x48
   ba788:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   ba78a:	2200      	movs	r2, #0
   ba78c:	2068      	movs	r0, #104	; 0x68
   ba78e:	9102      	str	r1, [sp, #8]
   ba790:	9204      	str	r2, [sp, #16]
   ba792:	f7f9 fc80 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   ba796:	1e06      	subs	r6, r0, #0
   ba798:	f106 090c 	add.w	r9, r6, #12
   ba79c:	d018      	beq.n	ba7d0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   ba79e:	2201      	movs	r2, #1
	: _M_impl(__a)
   ba7a0:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   ba7a2:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   ba7a6:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   ba7a8:	4a15      	ldr	r2, [pc, #84]	; (ba800 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   ba7aa:	f847 2b20 	str.w	r2, [r7], #32
   ba7ae:	9b03      	ldr	r3, [sp, #12]
   ba7b0:	9100      	str	r1, [sp, #0]
   ba7b2:	465a      	mov	r2, fp
   ba7b4:	4651      	mov	r1, sl
   ba7b6:	4648      	mov	r0, r9
   ba7b8:	f7ff ffae 	bl	ba718 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   ba7bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba7be:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   ba7c0:	682b      	ldr	r3, [r5, #0]
   ba7c2:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   ba7c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   ba7c6:	f106 0534 	add.w	r5, r6, #52	; 0x34
   ba7ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   ba7cc:	6823      	ldr	r3, [r4, #0]
   ba7ce:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   ba7d0:	a904      	add	r1, sp, #16
   ba7d2:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   ba7d4:	e9cd 9604 	strd	r9, r6, [sp, #16]
   ba7d8:	f7ff fd1a 	bl	ba210 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   ba7dc:	a805      	add	r0, sp, #20
   ba7de:	f7ff fca8 	bl	ba132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   ba7e2:	f8d8 3000 	ldr.w	r3, [r8]
   ba7e6:	b93b      	cbnz	r3, ba7f8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   ba7e8:	4a06      	ldr	r2, [pc, #24]	; (ba804 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   ba7ea:	4907      	ldr	r1, [pc, #28]	; (ba808 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   ba7ec:	200a      	movs	r0, #10
}
   ba7ee:	b007      	add	sp, #28
   ba7f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   ba7f4:	f7fe bf4c 	b.w	b9690 <panic_>
}
   ba7f8:	b007      	add	sp, #28
   ba7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba7fe:	bf00      	nop
   ba800:	000bf76c 	.word	0x000bf76c
   ba804:	000b9411 	.word	0x000b9411
   ba808:	000bf618 	.word	0x000bf618

000ba80c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   ba80c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   ba80e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba810:	4604      	mov	r4, r0
   ba812:	460d      	mov	r5, r1
   ba814:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   ba816:	d914      	bls.n	ba842 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   ba818:	4290      	cmp	r0, r2
   ba81a:	d213      	bcs.n	ba844 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   ba81c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   ba820:	1a75      	subs	r5, r6, r1
   ba822:	f1a1 0708 	sub.w	r7, r1, #8
   ba826:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   ba828:	42b7      	cmp	r7, r6
   ba82a:	d018      	beq.n	ba85e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   ba82c:	b11c      	cbz	r4, ba836 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   ba82e:	4631      	mov	r1, r6
   ba830:	4620      	mov	r0, r4
   ba832:	f7ff fc6a 	bl	ba10a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   ba836:	1d30      	adds	r0, r6, #4
   ba838:	f7ff fc7b 	bl	ba132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   ba83c:	3e08      	subs	r6, #8
   ba83e:	3c08      	subs	r4, #8
   ba840:	e7f2      	b.n	ba828 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   ba842:	d00c      	beq.n	ba85e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   ba844:	42b5      	cmp	r5, r6
   ba846:	d00a      	beq.n	ba85e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   ba848:	b11c      	cbz	r4, ba852 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   ba84a:	4629      	mov	r1, r5
   ba84c:	4620      	mov	r0, r4
   ba84e:	f7ff fc5c 	bl	ba10a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   ba852:	1d28      	adds	r0, r5, #4
   ba854:	f7ff fc6d 	bl	ba132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   ba858:	3508      	adds	r5, #8
   ba85a:	3408      	adds	r4, #8
   ba85c:	e7f2      	b.n	ba844 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   ba85e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba860 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   ba860:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   ba862:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   ba864:	4605      	mov	r5, r0
        if (n > 0) {
   ba866:	dd11      	ble.n	ba88c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   ba868:	00f0      	lsls	r0, r6, #3
   ba86a:	f7fe ffbd 	bl	b97e8 <malloc>
            if (!d) {
   ba86e:	4604      	mov	r4, r0
   ba870:	b158      	cbz	r0, ba88a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   ba872:	e9d5 1200 	ldrd	r1, r2, [r5]
   ba876:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   ba87a:	f7ff ffc7 	bl	ba80c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   ba87e:	6828      	ldr	r0, [r5, #0]
   ba880:	f7fe ffba 	bl	b97f8 <free>
        data_ = d;
   ba884:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   ba886:	60ae      	str	r6, [r5, #8]
        return true;
   ba888:	2001      	movs	r0, #1
    }
   ba88a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   ba88c:	2400      	movs	r4, #0
   ba88e:	e7f6      	b.n	ba87e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000ba890 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   ba890:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba892:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   ba894:	6845      	ldr	r5, [r0, #4]
   ba896:	4668      	mov	r0, sp
   ba898:	f7ff fc37 	bl	ba10a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba89c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   ba8a0:	4299      	cmp	r1, r3
   ba8a2:	da10      	bge.n	ba8c6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   ba8a4:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   ba8a6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   ba8a8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   ba8ac:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   ba8b0:	4629      	mov	r1, r5
   ba8b2:	f105 0008 	add.w	r0, r5, #8
   ba8b6:	f7ff ffa9 	bl	ba80c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   ba8ba:	b98d      	cbnz	r5, ba8e0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   ba8bc:	6863      	ldr	r3, [r4, #4]
   ba8be:	3301      	adds	r3, #1
   ba8c0:	6063      	str	r3, [r4, #4]
    return true;
   ba8c2:	2601      	movs	r6, #1
   ba8c4:	e006      	b.n	ba8d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba8c6:	3101      	adds	r1, #1
   ba8c8:	4620      	mov	r0, r4
   ba8ca:	f7ff ffc9 	bl	ba860 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   ba8ce:	4606      	mov	r6, r0
   ba8d0:	2800      	cmp	r0, #0
   ba8d2:	d1e7      	bne.n	ba8a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   ba8d4:	a801      	add	r0, sp, #4
   ba8d6:	f7ff fc2c 	bl	ba132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   ba8da:	4630      	mov	r0, r6
   ba8dc:	b002      	add	sp, #8
   ba8de:	bd70      	pop	{r4, r5, r6, pc}
   ba8e0:	4669      	mov	r1, sp
   ba8e2:	4628      	mov	r0, r5
   ba8e4:	f7ff fc11 	bl	ba10a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   ba8e8:	e7e8      	b.n	ba8bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000ba8ea <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   ba8ea:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   ba8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba8ee:	4604      	mov	r4, r0
   ba8f0:	460d      	mov	r5, r1
   ba8f2:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   ba8f4:	d914      	bls.n	ba920 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   ba8f6:	4290      	cmp	r0, r2
   ba8f8:	d213      	bcs.n	ba922 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   ba8fa:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   ba8fe:	1a75      	subs	r5, r6, r1
   ba900:	f1a1 0708 	sub.w	r7, r1, #8
   ba904:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   ba906:	42b7      	cmp	r7, r6
   ba908:	d018      	beq.n	ba93c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   ba90a:	b11c      	cbz	r4, ba914 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   ba90c:	4631      	mov	r1, r6
   ba90e:	4620      	mov	r0, r4
   ba910:	f7ff fbed 	bl	ba0ee <_ZN8particle17BleCharacteristicC1ERKS0_>
   ba914:	1d30      	adds	r0, r6, #4
   ba916:	f7ff fc0c 	bl	ba132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   ba91a:	3e08      	subs	r6, #8
   ba91c:	3c08      	subs	r4, #8
   ba91e:	e7f2      	b.n	ba906 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   ba920:	d00c      	beq.n	ba93c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   ba922:	42b5      	cmp	r5, r6
   ba924:	d00a      	beq.n	ba93c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   ba926:	b11c      	cbz	r4, ba930 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   ba928:	4629      	mov	r1, r5
   ba92a:	4620      	mov	r0, r4
   ba92c:	f7ff fbdf 	bl	ba0ee <_ZN8particle17BleCharacteristicC1ERKS0_>
   ba930:	1d28      	adds	r0, r5, #4
   ba932:	f7ff fbfe 	bl	ba132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   ba936:	3508      	adds	r5, #8
   ba938:	3408      	adds	r4, #8
   ba93a:	e7f2      	b.n	ba922 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   ba93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba93e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   ba93e:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   ba940:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   ba942:	4605      	mov	r5, r0
        if (n > 0) {
   ba944:	dd11      	ble.n	ba96a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   ba946:	00f0      	lsls	r0, r6, #3
   ba948:	f7fe ff4e 	bl	b97e8 <malloc>
            if (!d) {
   ba94c:	4604      	mov	r4, r0
   ba94e:	b158      	cbz	r0, ba968 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   ba950:	e9d5 1200 	ldrd	r1, r2, [r5]
   ba954:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   ba958:	f7ff ffc7 	bl	ba8ea <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   ba95c:	6828      	ldr	r0, [r5, #0]
   ba95e:	f7fe ff4b 	bl	b97f8 <free>
        data_ = d;
   ba962:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   ba964:	60ae      	str	r6, [r5, #8]
        return true;
   ba966:	2001      	movs	r0, #1
    }
   ba968:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   ba96a:	2400      	movs	r4, #0
   ba96c:	e7f6      	b.n	ba95c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000ba96e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   ba96e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba970:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   ba972:	6845      	ldr	r5, [r0, #4]
   ba974:	4668      	mov	r0, sp
   ba976:	f7ff fbba 	bl	ba0ee <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba97a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   ba97e:	4299      	cmp	r1, r3
   ba980:	da10      	bge.n	ba9a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   ba982:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   ba984:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   ba986:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   ba98a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   ba98e:	4629      	mov	r1, r5
   ba990:	f105 0008 	add.w	r0, r5, #8
   ba994:	f7ff ffa9 	bl	ba8ea <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   ba998:	b98d      	cbnz	r5, ba9be <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   ba99a:	6863      	ldr	r3, [r4, #4]
   ba99c:	3301      	adds	r3, #1
   ba99e:	6063      	str	r3, [r4, #4]
    return true;
   ba9a0:	2601      	movs	r6, #1
   ba9a2:	e006      	b.n	ba9b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba9a4:	3101      	adds	r1, #1
   ba9a6:	4620      	mov	r0, r4
   ba9a8:	f7ff ffc9 	bl	ba93e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   ba9ac:	4606      	mov	r6, r0
   ba9ae:	2800      	cmp	r0, #0
   ba9b0:	d1e7      	bne.n	ba982 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   ba9b2:	a801      	add	r0, sp, #4
   ba9b4:	f7ff fbbd 	bl	ba132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   ba9b8:	4630      	mov	r0, r6
   ba9ba:	b002      	add	sp, #8
   ba9bc:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   ba9be:	4669      	mov	r1, sp
   ba9c0:	4628      	mov	r0, r5
   ba9c2:	f7ff fb94 	bl	ba0ee <_ZN8particle17BleCharacteristicC1ERKS0_>
   ba9c6:	e7e8      	b.n	ba99a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000ba9c8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   ba9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba9cc:	4617      	mov	r7, r2
   ba9ce:	b0a1      	sub	sp, #132	; 0x84
   ba9d0:	4680      	mov	r8, r0
    WiringBleLock lk;
   ba9d2:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   ba9d4:	460e      	mov	r6, r1
    WiringBleLock lk;
   ba9d6:	f7ff f837 	bl	b9a48 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   ba9da:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   ba9dc:	7923      	ldrb	r3, [r4, #4]
   ba9de:	b953      	cbnz	r3, ba9f6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   ba9e0:	4639      	mov	r1, r7
   ba9e2:	4640      	mov	r0, r8
   ba9e4:	f7ff fb83 	bl	ba0ee <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   ba9e8:	a80a      	add	r0, sp, #40	; 0x28
   ba9ea:	f7ff f83b 	bl	b9a64 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   ba9ee:	4640      	mov	r0, r8
   ba9f0:	b021      	add	sp, #132	; 0x84
   ba9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   ba9f6:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   ba9f8:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   ba9fc:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   baa00:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   baa02:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   baa06:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   baa0a:	9b03      	ldr	r3, [sp, #12]
   baa0c:	429d      	cmp	r5, r3
   baa0e:	d021      	beq.n	baa54 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   baa10:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   baa14:	4658      	mov	r0, fp
   baa16:	f109 0114 	add.w	r1, r9, #20
   baa1a:	f7ff f8c2 	bl	b9ba2 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   baa1e:	b1b8      	cbz	r0, baa50 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   baa20:	f109 0128 	add.w	r1, r9, #40	; 0x28
   baa24:	4650      	mov	r0, sl
   baa26:	f7ff f8bc 	bl	b9ba2 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   baa2a:	b188      	cbz	r0, baa50 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   baa2c:	6823      	ldr	r3, [r4, #0]
   baa2e:	f8d9 2000 	ldr.w	r2, [r9]
   baa32:	4053      	eors	r3, r2
   baa34:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   baa38:	d10a      	bne.n	baa50 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   baa3a:	2220      	movs	r2, #32
   baa3c:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   baa40:	4a5e      	ldr	r2, [pc, #376]	; (babbc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   baa42:	9200      	str	r2, [sp, #0]
   baa44:	aa15      	add	r2, sp, #84	; 0x54
   baa46:	495e      	ldr	r1, [pc, #376]	; (babc0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   baa48:	2032      	movs	r0, #50	; 0x32
   baa4a:	f7fe fe29 	bl	b96a0 <log_message>
   baa4e:	e7c7      	b.n	ba9e0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   baa50:	3508      	adds	r5, #8
   baa52:	e7da      	b.n	baa0a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   baa54:	4650      	mov	r0, sl
   baa56:	f7ff f875 	bl	b9b44 <_ZNK8particle7BleUuid7isValidEv>
   baa5a:	b960      	cbnz	r0, baa76 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   baa5c:	4959      	ldr	r1, [pc, #356]	; (babc4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   baa5e:	2201      	movs	r2, #1
   baa60:	a815      	add	r0, sp, #84	; 0x54
   baa62:	ad15      	add	r5, sp, #84	; 0x54
   baa64:	f7ff f846 	bl	b9af4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   baa68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   baa6a:	46d4      	mov	ip, sl
   baa6c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   baa70:	682b      	ldr	r3, [r5, #0]
   baa72:	f8cc 3000 	str.w	r3, [ip]
   baa76:	6833      	ldr	r3, [r6, #0]
   baa78:	e9d3 5300 	ldrd	r5, r3, [r3]
   baa7c:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   baa80:	455d      	cmp	r5, fp
   baa82:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   baa84:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   baa86:	d06e      	beq.n	bab66 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   baa88:	f855 0b08 	ldr.w	r0, [r5], #8
   baa8c:	f7ff f889 	bl	b9ba2 <_ZNK8particle7BleUuideqERKS0_>
   baa90:	2800      	cmp	r0, #0
   baa92:	d0f5      	beq.n	baa80 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   baa94:	f104 0a14 	add.w	sl, r4, #20
   baa98:	4650      	mov	r0, sl
   baa9a:	f7ff f853 	bl	b9b44 <_ZNK8particle7BleUuid7isValidEv>
   baa9e:	b988      	cbnz	r0, baac4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   baaa0:	4b49      	ldr	r3, [pc, #292]	; (babc8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   baaa2:	4948      	ldr	r1, [pc, #288]	; (babc4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   baaa4:	881a      	ldrh	r2, [r3, #0]
   baaa6:	3201      	adds	r2, #1
   baaa8:	b292      	uxth	r2, r2
   baaaa:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   baaac:	a815      	add	r0, sp, #84	; 0x54
   baaae:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   baab0:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   baab2:	f7ff f83e 	bl	b9b32 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   baab6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   baab8:	46d4      	mov	ip, sl
   baaba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   baabe:	682b      	ldr	r3, [r5, #0]
   baac0:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   baac4:	4b41      	ldr	r3, [pc, #260]	; (babcc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   baac6:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   baac8:	2228      	movs	r2, #40	; 0x28
   baaca:	2100      	movs	r1, #0
   baacc:	a816      	add	r0, sp, #88	; 0x58
   baace:	f002 fa2b 	bl	bcf28 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   baad2:	4651      	mov	r1, sl
   baad4:	a804      	add	r0, sp, #16
   baad6:	f7ff f847 	bl	b9b68 <_ZN8particle7BleUuid7halUUIDEv>
   baada:	ab04      	add	r3, sp, #16
   baadc:	aa18      	add	r2, sp, #96	; 0x60
   baade:	f10d 0c20 	add.w	ip, sp, #32
   baae2:	6818      	ldr	r0, [r3, #0]
   baae4:	6859      	ldr	r1, [r3, #4]
   baae6:	4615      	mov	r5, r2
   baae8:	c503      	stmia	r5!, {r0, r1}
   baaea:	3308      	adds	r3, #8
   baaec:	4563      	cmp	r3, ip
   baaee:	462a      	mov	r2, r5
   baaf0:	d1f7      	bne.n	baae2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   baaf2:	6818      	ldr	r0, [r3, #0]
   baaf4:	6028      	str	r0, [r5, #0]
    return value_;
   baaf6:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   baaf8:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   baafc:	f8d9 3000 	ldr.w	r3, [r9]
   bab00:	8a9b      	ldrh	r3, [r3, #20]
   bab02:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   bab06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bab08:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   bab0a:	4b31      	ldr	r3, [pc, #196]	; (babd0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   bab0c:	2200      	movs	r2, #0
   bab0e:	1da1      	adds	r1, r4, #6
   bab10:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   bab12:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   bab16:	f7fe fc1b 	bl	b9350 <hal_ble_gatt_server_add_characteristic>
   bab1a:	2800      	cmp	r0, #0
   bab1c:	f47f af60 	bne.w	ba9e0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   bab20:	2301      	movs	r3, #1
   bab22:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   bab24:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   bab26:	4639      	mov	r1, r7
        return characteristics_;
   bab28:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   bab2a:	a80d      	add	r0, sp, #52	; 0x34
   bab2c:	f7ff fadf 	bl	ba0ee <_ZN8particle17BleCharacteristicC1ERKS0_>
   bab30:	4620      	mov	r0, r4
   bab32:	a90d      	add	r1, sp, #52	; 0x34
   bab34:	f7ff ff1b 	bl	ba96e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   bab38:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bab3a:	a80e      	add	r0, sp, #56	; 0x38
   bab3c:	f7ff faf9 	bl	ba132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bab40:	2c00      	cmp	r4, #0
   bab42:	f47f af4d 	bne.w	ba9e0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   bab46:	2320      	movs	r3, #32
   bab48:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   bab4c:	4b21      	ldr	r3, [pc, #132]	; (babd4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   bab4e:	9300      	str	r3, [sp, #0]
   bab50:	aa0d      	add	r2, sp, #52	; 0x34
   bab52:	4623      	mov	r3, r4
   bab54:	e777      	b.n	baa46 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   bab56:	4639      	mov	r1, r7
   bab58:	4640      	mov	r0, r8
   bab5a:	f7ff fac8 	bl	ba0ee <_ZN8particle17BleCharacteristicC1ERKS0_>
   bab5e:	a80c      	add	r0, sp, #48	; 0x30
   bab60:	f7ff fae7 	bl	ba132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bab64:	e740      	b.n	ba9e8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   bab66:	a80b      	add	r0, sp, #44	; 0x2c
   bab68:	f7ff f94a 	bl	b9e00 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   bab6c:	4651      	mov	r1, sl
   bab6e:	a815      	add	r0, sp, #84	; 0x54
   bab70:	f7fe fffa 	bl	b9b68 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   bab74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bab76:	2300      	movs	r3, #0
   bab78:	3214      	adds	r2, #20
   bab7a:	a915      	add	r1, sp, #84	; 0x54
   bab7c:	2001      	movs	r0, #1
   bab7e:	f7fe fbbf 	bl	b9300 <hal_ble_gatt_server_add_service>
   bab82:	2800      	cmp	r0, #0
   bab84:	d1e7      	bne.n	bab56 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   bab86:	6835      	ldr	r5, [r6, #0]
   bab88:	a90b      	add	r1, sp, #44	; 0x2c
   bab8a:	a80d      	add	r0, sp, #52	; 0x34
   bab8c:	f7ff fabd 	bl	ba10a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   bab90:	4628      	mov	r0, r5
   bab92:	a90d      	add	r1, sp, #52	; 0x34
   bab94:	f7ff fe7c 	bl	ba890 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   bab98:	4605      	mov	r5, r0
   bab9a:	a80e      	add	r0, sp, #56	; 0x38
   bab9c:	f7ff fac9 	bl	ba132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   baba0:	2d00      	cmp	r5, #0
   baba2:	d0d8      	beq.n	bab56 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   baba4:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   baba6:	6853      	ldr	r3, [r2, #4]
   baba8:	6812      	ldr	r2, [r2, #0]
   babaa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   babae:	3b01      	subs	r3, #1
   babb0:	a80c      	add	r0, sp, #48	; 0x30
   babb2:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   babb6:	f7ff fabc 	bl	ba132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   babba:	e76b      	b.n	baa94 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   babbc:	000bf712 	.word	0x000bf712
   babc0:	000bf62f 	.word	0x000bf62f
   babc4:	000bf7d6 	.word	0x000bf7d6
   babc8:	2003e6bc 	.word	0x2003e6bc
   babcc:	002c0003 	.word	0x002c0003
   babd0:	000b9f99 	.word	0x000b9f99
   babd4:	000bf73d 	.word	0x000bf73d

000babd8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   babd8:	4802      	ldr	r0, [pc, #8]	; (babe4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   babda:	2300      	movs	r3, #0
   babdc:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   babde:	f7fe bbf7 	b.w	b93d0 <os_mutex_recursive_create>
   babe2:	bf00      	nop
   babe4:	2003e6c0 	.word	0x2003e6c0

000babe8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   babe8:	2200      	movs	r2, #0
   babea:	6840      	ldr	r0, [r0, #4]
   babec:	4611      	mov	r1, r2
   babee:	f7fe bdc3 	b.w	b9778 <network_listening>

000babf2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   babf2:	2200      	movs	r2, #0
   babf4:	6840      	ldr	r0, [r0, #4]
   babf6:	4611      	mov	r1, r2
   babf8:	f7fe bdde 	b.w	b97b8 <network_get_listen_timeout>

000babfc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   babfc:	6840      	ldr	r0, [r0, #4]
   babfe:	2200      	movs	r2, #0
   bac00:	f7fe bdd2 	b.w	b97a8 <network_set_listen_timeout>

000bac04 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bac04:	6840      	ldr	r0, [r0, #4]
   bac06:	2200      	movs	r2, #0
   bac08:	f081 0101 	eor.w	r1, r1, #1
   bac0c:	f7fe bdac 	b.w	b9768 <network_listen>

000bac10 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bac10:	2300      	movs	r3, #0
   bac12:	6840      	ldr	r0, [r0, #4]
   bac14:	461a      	mov	r2, r3
   bac16:	4619      	mov	r1, r3
   bac18:	f7fe bd9e 	b.w	b9758 <network_off>

000bac1c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bac1c:	2300      	movs	r3, #0
   bac1e:	6840      	ldr	r0, [r0, #4]
   bac20:	461a      	mov	r2, r3
   bac22:	4619      	mov	r1, r3
   bac24:	f7fe bd90 	b.w	b9748 <network_on>

000bac28 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bac28:	2200      	movs	r2, #0
   bac2a:	6840      	ldr	r0, [r0, #4]
   bac2c:	4611      	mov	r1, r2
   bac2e:	f7fe bd83 	b.w	b9738 <network_ready>

000bac32 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bac32:	2200      	movs	r2, #0
   bac34:	6840      	ldr	r0, [r0, #4]
   bac36:	4611      	mov	r1, r2
   bac38:	f7fe bd6e 	b.w	b9718 <network_connecting>

000bac3c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bac3c:	6840      	ldr	r0, [r0, #4]
   bac3e:	2200      	movs	r2, #0
   bac40:	2102      	movs	r1, #2
   bac42:	f7fe bd71 	b.w	b9728 <network_disconnect>

000bac46 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bac46:	2300      	movs	r3, #0
   bac48:	6840      	ldr	r0, [r0, #4]
   bac4a:	461a      	mov	r2, r3
   bac4c:	f7fe bd5c 	b.w	b9708 <network_connect>

000bac50 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bac50:	4b02      	ldr	r3, [pc, #8]	; (bac5c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bac52:	2203      	movs	r2, #3
   bac54:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bac56:	4a02      	ldr	r2, [pc, #8]	; (bac60 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bac58:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bac5a:	4770      	bx	lr
   bac5c:	2003e6c8 	.word	0x2003e6c8
   bac60:	000bf800 	.word	0x000bf800

000bac64 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bac64:	4770      	bx	lr

000bac66 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bac66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bac68:	4606      	mov	r6, r0
   bac6a:	4615      	mov	r5, r2
   bac6c:	460c      	mov	r4, r1
   bac6e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bac70:	42bc      	cmp	r4, r7
   bac72:	d006      	beq.n	bac82 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bac74:	6833      	ldr	r3, [r6, #0]
   bac76:	f814 1b01 	ldrb.w	r1, [r4], #1
   bac7a:	689b      	ldr	r3, [r3, #8]
   bac7c:	4630      	mov	r0, r6
   bac7e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bac80:	e7f6      	b.n	bac70 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bac82:	4628      	mov	r0, r5
   bac84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bac86 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bac86:	7c00      	ldrb	r0, [r0, #16]
   bac88:	2200      	movs	r2, #0
   bac8a:	f7fe bbe9 	b.w	b9460 <hal_i2c_write>

000bac8e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bac8e:	7c00      	ldrb	r0, [r0, #16]
   bac90:	2100      	movs	r1, #0
   bac92:	f7fe bbed 	b.w	b9470 <hal_i2c_available>

000bac96 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bac96:	7c00      	ldrb	r0, [r0, #16]
   bac98:	2100      	movs	r1, #0
   bac9a:	f7fe bbf1 	b.w	b9480 <hal_i2c_read>

000bac9e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bac9e:	7c00      	ldrb	r0, [r0, #16]
   baca0:	2100      	movs	r1, #0
   baca2:	f7fe bbf5 	b.w	b9490 <hal_i2c_peek>

000baca6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   baca6:	7c00      	ldrb	r0, [r0, #16]
   baca8:	2100      	movs	r1, #0
   bacaa:	f7fe bbf9 	b.w	b94a0 <hal_i2c_flush>

000bacae <_ZN7TwoWireD0Ev>:
   bacae:	b510      	push	{r4, lr}
   bacb0:	2114      	movs	r1, #20
   bacb2:	4604      	mov	r4, r0
   bacb4:	f7f9 f9f7 	bl	b40a6 <_ZdlPvj>
   bacb8:	4620      	mov	r0, r4
   bacba:	bd10      	pop	{r4, pc}

000bacbc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bacbc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bacbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bacc2:	4604      	mov	r4, r0
   bacc4:	4608      	mov	r0, r1
   bacc6:	2100      	movs	r1, #0
   bacc8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   baccc:	4b03      	ldr	r3, [pc, #12]	; (bacdc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bacce:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bacd0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bacd2:	4611      	mov	r1, r2
   bacd4:	f7fe fbec 	bl	b94b0 <hal_i2c_init>
}
   bacd8:	4620      	mov	r0, r4
   bacda:	bd10      	pop	{r4, pc}
   bacdc:	000bf83c 	.word	0x000bf83c

000bace0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bace0:	2300      	movs	r3, #0
   bace2:	7c00      	ldrb	r0, [r0, #16]
   bace4:	461a      	mov	r2, r3
   bace6:	4619      	mov	r1, r3
   bace8:	f7fe bba2 	b.w	b9430 <hal_i2c_begin>

000bacec <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bacec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bacee:	2200      	movs	r2, #0
   bacf0:	2314      	movs	r3, #20
   bacf2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   bacf6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   bacfa:	780b      	ldrb	r3, [r1, #0]
   bacfc:	f88d 3008 	strb.w	r3, [sp, #8]
   bad00:	684b      	ldr	r3, [r1, #4]
   bad02:	9303      	str	r3, [sp, #12]
   bad04:	68cb      	ldr	r3, [r1, #12]
   bad06:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   bad08:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bad0a:	7a0b      	ldrb	r3, [r1, #8]
   bad0c:	9305      	str	r3, [sp, #20]
   bad0e:	a901      	add	r1, sp, #4
   bad10:	f7fe fbe6 	bl	b94e0 <hal_i2c_request_ex>
}
   bad14:	b007      	add	sp, #28
   bad16:	f85d fb04 	ldr.w	pc, [sp], #4

000bad1a <_ZN7TwoWire11requestFromEhjh>:
{
   bad1a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   bad1c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bad1e:	f88d 1000 	strb.w	r1, [sp]
   bad22:	f04f 0164 	mov.w	r1, #100	; 0x64
   bad26:	9103      	str	r1, [sp, #12]
   bad28:	bf18      	it	ne
   bad2a:	2301      	movne	r3, #1
   bad2c:	4669      	mov	r1, sp
    size_ = size;
   bad2e:	9201      	str	r2, [sp, #4]
   bad30:	f88d 3008 	strb.w	r3, [sp, #8]
   bad34:	f7ff ffda 	bl	bacec <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   bad38:	b005      	add	sp, #20
   bad3a:	f85d fb04 	ldr.w	pc, [sp], #4

000bad3e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   bad3e:	2301      	movs	r3, #1
   bad40:	f7ff bfeb 	b.w	bad1a <_ZN7TwoWire11requestFromEhjh>

000bad44 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bad44:	7c00      	ldrb	r0, [r0, #16]
   bad46:	2200      	movs	r2, #0
   bad48:	f7fe bb7a 	b.w	b9440 <hal_i2c_begin_transmission>

000bad4c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bad4c:	b2c9      	uxtb	r1, r1
   bad4e:	f7ff bff9 	b.w	bad44 <_ZN7TwoWire17beginTransmissionEh>

000bad52 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bad52:	7c00      	ldrb	r0, [r0, #16]
   bad54:	2200      	movs	r2, #0
   bad56:	f7fe bb7b 	b.w	b9450 <hal_i2c_end_transmission>

000bad5a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   bad5a:	2101      	movs	r1, #1
   bad5c:	f7ff bff9 	b.w	bad52 <_ZN7TwoWire15endTransmissionEh>

000bad60 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   bad60:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   bad62:	2100      	movs	r1, #0
   bad64:	7c00      	ldrb	r0, [r0, #16]
   bad66:	f7fe fbab 	bl	b94c0 <hal_i2c_lock>
}
   bad6a:	fab0 f080 	clz	r0, r0
   bad6e:	0940      	lsrs	r0, r0, #5
   bad70:	bd08      	pop	{r3, pc}

000bad72 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   bad72:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   bad74:	2100      	movs	r1, #0
   bad76:	7c00      	ldrb	r0, [r0, #16]
   bad78:	f7fe fbaa 	bl	b94d0 <hal_i2c_unlock>
}
   bad7c:	fab0 f080 	clz	r0, r0
   bad80:	0940      	lsrs	r0, r0, #5
   bad82:	bd08      	pop	{r3, pc}

000bad84 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bad84:	4770      	bx	lr

000bad86 <_ZN9IPAddressD0Ev>:
   bad86:	b510      	push	{r4, lr}
   bad88:	2118      	movs	r1, #24
   bad8a:	4604      	mov	r4, r0
   bad8c:	f7f9 f98b 	bl	b40a6 <_ZdlPvj>
   bad90:	4620      	mov	r0, r4
   bad92:	bd10      	pop	{r4, pc}

000bad94 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bad94:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bad96:	7d03      	ldrb	r3, [r0, #20]
   bad98:	2b06      	cmp	r3, #6
{
   bad9a:	b08d      	sub	sp, #52	; 0x34
   bad9c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bad9e:	f100 0704 	add.w	r7, r0, #4
   bada2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bada6:	d012      	beq.n	badce <_ZNK9IPAddress7printToER5Print+0x3a>
   bada8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   badac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   badb0:	220a      	movs	r2, #10
   badb2:	4630      	mov	r0, r6
   badb4:	f000 f973 	bl	bb09e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   badb8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   badba:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   badbc:	d019      	beq.n	badf2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   badbe:	2c00      	cmp	r4, #0
   badc0:	d0f4      	beq.n	badac <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   badc2:	212e      	movs	r1, #46	; 0x2e
   badc4:	4630      	mov	r0, r6
   badc6:	f000 f951 	bl	bb06c <_ZN5Print5printEc>
   badca:	4404      	add	r4, r0
   badcc:	e7ee      	b.n	badac <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   badce:	232f      	movs	r3, #47	; 0x2f
   badd0:	466a      	mov	r2, sp
   badd2:	4639      	mov	r1, r7
   badd4:	200a      	movs	r0, #10
		buf[0] = 0;
   badd6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   badda:	f7fe fb91 	bl	b9500 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   badde:	4668      	mov	r0, sp
   bade0:	f002 f8ea 	bl	bcfb8 <strlen>
   bade4:	6833      	ldr	r3, [r6, #0]
   bade6:	4602      	mov	r2, r0
   bade8:	68db      	ldr	r3, [r3, #12]
   badea:	4669      	mov	r1, sp
   badec:	4630      	mov	r0, r6
   badee:	4798      	blx	r3
   badf0:	4604      	mov	r4, r0
    }
    return n;
}
   badf2:	4620      	mov	r0, r4
   badf4:	b00d      	add	sp, #52	; 0x34
   badf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000badf8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   badf8:	b510      	push	{r4, lr}
   badfa:	4b05      	ldr	r3, [pc, #20]	; (bae10 <_ZN9IPAddressC1Ev+0x18>)
   badfc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   badfe:	2211      	movs	r2, #17
   bae00:	f840 3b04 	str.w	r3, [r0], #4
   bae04:	2100      	movs	r1, #0
   bae06:	f002 f88f 	bl	bcf28 <memset>
}
   bae0a:	4620      	mov	r0, r4
   bae0c:	bd10      	pop	{r4, pc}
   bae0e:	bf00      	nop
   bae10:	000bf864 	.word	0x000bf864

000bae14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bae14:	4603      	mov	r3, r0
   bae16:	4a07      	ldr	r2, [pc, #28]	; (bae34 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bae18:	b510      	push	{r4, lr}
   bae1a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bae1e:	f101 0210 	add.w	r2, r1, #16
   bae22:	f851 4b04 	ldr.w	r4, [r1], #4
   bae26:	f843 4b04 	str.w	r4, [r3], #4
   bae2a:	4291      	cmp	r1, r2
   bae2c:	d1f9      	bne.n	bae22 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bae2e:	780a      	ldrb	r2, [r1, #0]
   bae30:	701a      	strb	r2, [r3, #0]
}
   bae32:	bd10      	pop	{r4, pc}
   bae34:	000bf864 	.word	0x000bf864

000bae38 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   bae38:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   bae3a:	2b04      	cmp	r3, #4
   bae3c:	d104      	bne.n	bae48 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   bae3e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   bae40:	3800      	subs	r0, #0
   bae42:	bf18      	it	ne
   bae44:	2001      	movne	r0, #1
   bae46:	4770      	bx	lr
    } else if (version() == 6) {
   bae48:	2b06      	cmp	r3, #6
   bae4a:	d107      	bne.n	bae5c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   bae4c:	6843      	ldr	r3, [r0, #4]
   bae4e:	b93b      	cbnz	r3, bae60 <_ZNK9IPAddresscvbEv+0x28>
   bae50:	6883      	ldr	r3, [r0, #8]
   bae52:	b92b      	cbnz	r3, bae60 <_ZNK9IPAddresscvbEv+0x28>
   bae54:	68c3      	ldr	r3, [r0, #12]
   bae56:	b91b      	cbnz	r3, bae60 <_ZNK9IPAddresscvbEv+0x28>
   bae58:	6900      	ldr	r0, [r0, #16]
   bae5a:	e7f1      	b.n	bae40 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   bae5c:	2000      	movs	r0, #0
   bae5e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   bae60:	2001      	movs	r0, #1
}
   bae62:	4770      	bx	lr

000bae64 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bae64:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bae66:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bae6a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bae6e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bae72:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bae76:	2304      	movs	r3, #4
   bae78:	6041      	str	r1, [r0, #4]
   bae7a:	7503      	strb	r3, [r0, #20]
}
   bae7c:	bd10      	pop	{r4, pc}
	...

000bae80 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bae80:	b507      	push	{r0, r1, r2, lr}
   bae82:	4b06      	ldr	r3, [pc, #24]	; (bae9c <_ZN9IPAddressC1EPKh+0x1c>)
   bae84:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bae86:	78cb      	ldrb	r3, [r1, #3]
   bae88:	9300      	str	r3, [sp, #0]
   bae8a:	788b      	ldrb	r3, [r1, #2]
   bae8c:	784a      	ldrb	r2, [r1, #1]
   bae8e:	7809      	ldrb	r1, [r1, #0]
   bae90:	f7ff ffe8 	bl	bae64 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bae94:	b003      	add	sp, #12
   bae96:	f85d fb04 	ldr.w	pc, [sp], #4
   bae9a:	bf00      	nop
   bae9c:	000bf864 	.word	0x000bf864

000baea0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   baea0:	4b01      	ldr	r3, [pc, #4]	; (baea8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   baea2:	4a02      	ldr	r2, [pc, #8]	; (baeac <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   baea4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   baea6:	4770      	bx	lr
   baea8:	2003e6d0 	.word	0x2003e6d0
   baeac:	000bf870 	.word	0x000bf870

000baeb0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   baeb0:	2300      	movs	r3, #0
   baeb2:	6840      	ldr	r0, [r0, #4]
   baeb4:	461a      	mov	r2, r3
   baeb6:	f7fe bc27 	b.w	b9708 <network_connect>

000baeba <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   baeba:	6840      	ldr	r0, [r0, #4]
   baebc:	2200      	movs	r2, #0
   baebe:	2102      	movs	r1, #2
   baec0:	f7fe bc32 	b.w	b9728 <network_disconnect>

000baec4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   baec4:	2200      	movs	r2, #0
   baec6:	6840      	ldr	r0, [r0, #4]
   baec8:	4611      	mov	r1, r2
   baeca:	f7fe bc25 	b.w	b9718 <network_connecting>

000baece <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   baece:	2200      	movs	r2, #0
   baed0:	6840      	ldr	r0, [r0, #4]
   baed2:	4611      	mov	r1, r2
   baed4:	f7fe bc30 	b.w	b9738 <network_ready>

000baed8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   baed8:	2300      	movs	r3, #0
   baeda:	6840      	ldr	r0, [r0, #4]
   baedc:	461a      	mov	r2, r3
   baede:	4619      	mov	r1, r3
   baee0:	f7fe bc32 	b.w	b9748 <network_on>

000baee4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   baee4:	2300      	movs	r3, #0
   baee6:	6840      	ldr	r0, [r0, #4]
   baee8:	461a      	mov	r2, r3
   baeea:	4619      	mov	r1, r3
   baeec:	f7fe bc34 	b.w	b9758 <network_off>

000baef0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   baef0:	6840      	ldr	r0, [r0, #4]
   baef2:	2100      	movs	r1, #0
   baef4:	f7fe bc68 	b.w	b97c8 <network_is_on>

000baef8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   baef8:	6840      	ldr	r0, [r0, #4]
   baefa:	2100      	movs	r1, #0
   baefc:	f7fe bc6c 	b.w	b97d8 <network_is_off>

000baf00 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   baf00:	6840      	ldr	r0, [r0, #4]
   baf02:	2200      	movs	r2, #0
   baf04:	f081 0101 	eor.w	r1, r1, #1
   baf08:	f7fe bc2e 	b.w	b9768 <network_listen>

000baf0c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   baf0c:	6840      	ldr	r0, [r0, #4]
   baf0e:	2200      	movs	r2, #0
   baf10:	f7fe bc4a 	b.w	b97a8 <network_set_listen_timeout>

000baf14 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   baf14:	2200      	movs	r2, #0
   baf16:	6840      	ldr	r0, [r0, #4]
   baf18:	4611      	mov	r1, r2
   baf1a:	f7fe bc4d 	b.w	b97b8 <network_get_listen_timeout>

000baf1e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   baf1e:	2200      	movs	r2, #0
   baf20:	6840      	ldr	r0, [r0, #4]
   baf22:	4611      	mov	r1, r2
   baf24:	f7fe bc28 	b.w	b9778 <network_listening>

000baf28 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   baf28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   baf2c:	b095      	sub	sp, #84	; 0x54
   baf2e:	4614      	mov	r4, r2
   baf30:	460d      	mov	r5, r1
   baf32:	4607      	mov	r7, r0
    IPAddress addr;
   baf34:	f7ff ff60 	bl	badf8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   baf38:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   baf3a:	221c      	movs	r2, #28
   baf3c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   baf3e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   baf40:	f001 fff2 	bl	bcf28 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   baf44:	2340      	movs	r3, #64	; 0x40
   baf46:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   baf48:	4620      	mov	r0, r4
   baf4a:	466b      	mov	r3, sp
   baf4c:	aa0c      	add	r2, sp, #48	; 0x30
   baf4e:	2100      	movs	r1, #0
   baf50:	f7fe faf6 	bl	b9540 <netdb_getaddrinfo>
    if (!r) {
   baf54:	4604      	mov	r4, r0
   baf56:	2800      	cmp	r0, #0
   baf58:	d14b      	bne.n	baff2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   baf5a:	4602      	mov	r2, r0
   baf5c:	2101      	movs	r1, #1
   baf5e:	6868      	ldr	r0, [r5, #4]
   baf60:	f7fe fbea 	bl	b9738 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   baf64:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   baf66:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   baf68:	4622      	mov	r2, r4
   baf6a:	6868      	ldr	r0, [r5, #4]
   baf6c:	f7fe fbe4 	bl	b9738 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   baf70:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   baf72:	4681      	mov	r9, r0
        bool ok = false;
   baf74:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   baf76:	2e00      	cmp	r6, #0
   baf78:	d03b      	beq.n	baff2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   baf7a:	2900      	cmp	r1, #0
   baf7c:	d139      	bne.n	baff2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   baf7e:	6873      	ldr	r3, [r6, #4]
   baf80:	2b02      	cmp	r3, #2
   baf82:	d003      	beq.n	baf8c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   baf84:	2b0a      	cmp	r3, #10
   baf86:	d011      	beq.n	bafac <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   baf88:	69f6      	ldr	r6, [r6, #28]
   baf8a:	e7f4      	b.n	baf76 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   baf8c:	f1b8 0f00 	cmp.w	r8, #0
   baf90:	d0fa      	beq.n	baf88 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   baf92:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   baf94:	a806      	add	r0, sp, #24
   baf96:	3104      	adds	r1, #4
class IPAddress : public Printable {
   baf98:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   baf9a:	f7ff ff71 	bl	bae80 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   baf9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bafa0:	1d3c      	adds	r4, r7, #4
   bafa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bafa4:	682b      	ldr	r3, [r5, #0]
   bafa6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bafa8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bafaa:	e7ed      	b.n	baf88 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bafac:	f1b9 0f00 	cmp.w	r9, #0
   bafb0:	d0ea      	beq.n	baf88 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bafb2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bafb4:	2210      	movs	r2, #16
   bafb6:	a801      	add	r0, sp, #4
   bafb8:	f001 ffb6 	bl	bcf28 <memset>
                    a.v = 6;
   bafbc:	2306      	movs	r3, #6
   bafbe:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bafc2:	ad01      	add	r5, sp, #4
   bafc4:	f104 0308 	add.w	r3, r4, #8
   bafc8:	3418      	adds	r4, #24
   bafca:	6818      	ldr	r0, [r3, #0]
   bafcc:	6859      	ldr	r1, [r3, #4]
   bafce:	462a      	mov	r2, r5
   bafd0:	c203      	stmia	r2!, {r0, r1}
   bafd2:	3308      	adds	r3, #8
   bafd4:	42a3      	cmp	r3, r4
   bafd6:	4615      	mov	r5, r2
   bafd8:	d1f7      	bne.n	bafca <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bafda:	a901      	add	r1, sp, #4
   bafdc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bafde:	ad07      	add	r5, sp, #28
   bafe0:	f7ff ff18 	bl	bae14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bafe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bafe6:	1d3c      	adds	r4, r7, #4
   bafe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bafea:	682b      	ldr	r3, [r5, #0]
   bafec:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bafee:	4649      	mov	r1, r9
   baff0:	e7ca      	b.n	baf88 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   baff2:	9800      	ldr	r0, [sp, #0]
   baff4:	f7fe fa9c 	bl	b9530 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   baff8:	4638      	mov	r0, r7
   baffa:	b015      	add	sp, #84	; 0x54
   baffc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bb000 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bb000:	4b02      	ldr	r3, [pc, #8]	; (bb00c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bb002:	4a03      	ldr	r2, [pc, #12]	; (bb010 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bb004:	601a      	str	r2, [r3, #0]
   bb006:	2200      	movs	r2, #0
   bb008:	605a      	str	r2, [r3, #4]

} // spark
   bb00a:	4770      	bx	lr
   bb00c:	2003e6d4 	.word	0x2003e6d4
   bb010:	000bf87c 	.word	0x000bf87c

000bb014 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bb014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb016:	4606      	mov	r6, r0
   bb018:	460d      	mov	r5, r1
  size_t n = 0;
   bb01a:	188f      	adds	r7, r1, r2
   bb01c:	2400      	movs	r4, #0
  while (size--) {
   bb01e:	42bd      	cmp	r5, r7
   bb020:	d00c      	beq.n	bb03c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bb022:	6833      	ldr	r3, [r6, #0]
   bb024:	f815 1b01 	ldrb.w	r1, [r5], #1
   bb028:	689b      	ldr	r3, [r3, #8]
   bb02a:	4630      	mov	r0, r6
   bb02c:	4798      	blx	r3
     if (chunk>=0)
   bb02e:	1e03      	subs	r3, r0, #0
   bb030:	db01      	blt.n	bb036 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bb032:	441c      	add	r4, r3
  while (size--) {
   bb034:	e7f3      	b.n	bb01e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bb036:	2c00      	cmp	r4, #0
   bb038:	bf08      	it	eq
   bb03a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bb03c:	4620      	mov	r0, r4
   bb03e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb040 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   bb040:	b513      	push	{r0, r1, r4, lr}
   bb042:	4604      	mov	r4, r0
    }
   bb044:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   bb046:	b159      	cbz	r1, bb060 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   bb048:	9101      	str	r1, [sp, #4]
   bb04a:	f001 ffb5 	bl	bcfb8 <strlen>
   bb04e:	6823      	ldr	r3, [r4, #0]
   bb050:	9901      	ldr	r1, [sp, #4]
   bb052:	68db      	ldr	r3, [r3, #12]
   bb054:	4602      	mov	r2, r0
   bb056:	4620      	mov	r0, r4
    }
   bb058:	b002      	add	sp, #8
   bb05a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   bb05e:	4718      	bx	r3
    }
   bb060:	b002      	add	sp, #8
   bb062:	bd10      	pop	{r4, pc}

000bb064 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bb064:	b508      	push	{r3, lr}
  return write(str);
   bb066:	f7ff ffeb 	bl	bb040 <_ZN5Print5writeEPKc>
}
   bb06a:	bd08      	pop	{r3, pc}

000bb06c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bb06c:	6803      	ldr	r3, [r0, #0]
   bb06e:	689b      	ldr	r3, [r3, #8]
   bb070:	4718      	bx	r3

000bb072 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bb072:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bb074:	210d      	movs	r1, #13
{
   bb076:	4605      	mov	r5, r0
  size_t n = print('\r');
   bb078:	f7ff fff8 	bl	bb06c <_ZN5Print5printEc>
  n += print('\n');
   bb07c:	210a      	movs	r1, #10
  size_t n = print('\r');
   bb07e:	4604      	mov	r4, r0
  n += print('\n');
   bb080:	4628      	mov	r0, r5
   bb082:	f7ff fff3 	bl	bb06c <_ZN5Print5printEc>
  return n;
}
   bb086:	4420      	add	r0, r4
   bb088:	bd38      	pop	{r3, r4, r5, pc}

000bb08a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   bb08a:	b538      	push	{r3, r4, r5, lr}
   bb08c:	4605      	mov	r5, r0
  return write(str);
   bb08e:	f7ff ffd7 	bl	bb040 <_ZN5Print5writeEPKc>
   bb092:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   bb094:	4628      	mov	r0, r5
   bb096:	f7ff ffec 	bl	bb072 <_ZN5Print7printlnEv>
  return n;
}
   bb09a:	4420      	add	r0, r4
   bb09c:	bd38      	pop	{r3, r4, r5, pc}

000bb09e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bb09e:	b530      	push	{r4, r5, lr}
   bb0a0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bb0a2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bb0a4:	2a01      	cmp	r2, #1
  *str = '\0';
   bb0a6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bb0aa:	bf98      	it	ls
   bb0ac:	220a      	movls	r2, #10
   bb0ae:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bb0b0:	460d      	mov	r5, r1
   bb0b2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bb0b6:	fb01 5312 	mls	r3, r1, r2, r5
   bb0ba:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bb0be:	2b09      	cmp	r3, #9
   bb0c0:	bf94      	ite	ls
   bb0c2:	3330      	addls	r3, #48	; 0x30
   bb0c4:	3337      	addhi	r3, #55	; 0x37
   bb0c6:	b2db      	uxtb	r3, r3
  } while(n);
   bb0c8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bb0ca:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bb0ce:	d9ef      	bls.n	bb0b0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bb0d0:	4621      	mov	r1, r4
   bb0d2:	f7ff ffb5 	bl	bb040 <_ZN5Print5writeEPKc>
}
   bb0d6:	b00b      	add	sp, #44	; 0x2c
   bb0d8:	bd30      	pop	{r4, r5, pc}

000bb0da <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bb0da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb0de:	b086      	sub	sp, #24
   bb0e0:	af00      	add	r7, sp, #0
   bb0e2:	4605      	mov	r5, r0
   bb0e4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bb0e6:	1d38      	adds	r0, r7, #4
   bb0e8:	2114      	movs	r1, #20
{
   bb0ea:	4614      	mov	r4, r2
    va_copy(args2, args);
   bb0ec:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bb0ee:	f7fe fb9b 	bl	b9828 <vsnprintf>

    if (n<bufsize)
   bb0f2:	2813      	cmp	r0, #19
   bb0f4:	d80e      	bhi.n	bb114 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bb0f6:	1d39      	adds	r1, r7, #4
   bb0f8:	4628      	mov	r0, r5
   bb0fa:	f7ff ffa1 	bl	bb040 <_ZN5Print5writeEPKc>
   bb0fe:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bb100:	b11e      	cbz	r6, bb10a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bb102:	4628      	mov	r0, r5
   bb104:	f7ff ffb5 	bl	bb072 <_ZN5Print7printlnEv>
   bb108:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bb10a:	4620      	mov	r0, r4
   bb10c:	3718      	adds	r7, #24
   bb10e:	46bd      	mov	sp, r7
   bb110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bb114:	f100 0308 	add.w	r3, r0, #8
   bb118:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bb11c:	46e8      	mov	r8, sp
        char bigger[n+1];
   bb11e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bb122:	4622      	mov	r2, r4
   bb124:	1c41      	adds	r1, r0, #1
   bb126:	683b      	ldr	r3, [r7, #0]
   bb128:	4668      	mov	r0, sp
   bb12a:	f7fe fb7d 	bl	b9828 <vsnprintf>
  return write(str);
   bb12e:	4669      	mov	r1, sp
   bb130:	4628      	mov	r0, r5
   bb132:	f7ff ff85 	bl	bb040 <_ZN5Print5writeEPKc>
   bb136:	4604      	mov	r4, r0
   bb138:	46c5      	mov	sp, r8
   bb13a:	e7e1      	b.n	bb100 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bb13c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bb13c:	4b01      	ldr	r3, [pc, #4]	; (bb144 <_GLOBAL__sub_I_RGB+0x8>)
   bb13e:	2200      	movs	r2, #0
   bb140:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bb142:	4770      	bx	lr
   bb144:	2003e6dc 	.word	0x2003e6dc

000bb148 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bb148:	b510      	push	{r4, lr}
   bb14a:	4604      	mov	r4, r0
{
	free(buffer);
   bb14c:	6800      	ldr	r0, [r0, #0]
   bb14e:	f7fe fb53 	bl	b97f8 <free>
}
   bb152:	4620      	mov	r0, r4
   bb154:	bd10      	pop	{r4, pc}

000bb156 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bb156:	b510      	push	{r4, lr}
   bb158:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bb15a:	6800      	ldr	r0, [r0, #0]
   bb15c:	b108      	cbz	r0, bb162 <_ZN6String10invalidateEv+0xc>
   bb15e:	f7fe fb4b 	bl	b97f8 <free>
	buffer = NULL;
   bb162:	2300      	movs	r3, #0
	capacity = len = 0;
   bb164:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bb168:	6023      	str	r3, [r4, #0]
}
   bb16a:	bd10      	pop	{r4, pc}

000bb16c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bb16c:	b538      	push	{r3, r4, r5, lr}
   bb16e:	4604      	mov	r4, r0
   bb170:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bb172:	6800      	ldr	r0, [r0, #0]
   bb174:	3101      	adds	r1, #1
   bb176:	f7fe fb47 	bl	b9808 <realloc>
	if (newbuffer) {
   bb17a:	b110      	cbz	r0, bb182 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bb17c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bb180:	2001      	movs	r0, #1
	}
	return 0;
}
   bb182:	bd38      	pop	{r3, r4, r5, pc}

000bb184 <_ZN6String7reserveEj>:
{
   bb184:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bb186:	6803      	ldr	r3, [r0, #0]
{
   bb188:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bb18a:	b123      	cbz	r3, bb196 <_ZN6String7reserveEj+0x12>
   bb18c:	6843      	ldr	r3, [r0, #4]
   bb18e:	428b      	cmp	r3, r1
   bb190:	d301      	bcc.n	bb196 <_ZN6String7reserveEj+0x12>
   bb192:	2001      	movs	r0, #1
}
   bb194:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bb196:	4620      	mov	r0, r4
   bb198:	f7ff ffe8 	bl	bb16c <_ZN6String12changeBufferEj>
   bb19c:	2800      	cmp	r0, #0
   bb19e:	d0f9      	beq.n	bb194 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bb1a0:	68a3      	ldr	r3, [r4, #8]
   bb1a2:	2b00      	cmp	r3, #0
   bb1a4:	d1f5      	bne.n	bb192 <_ZN6String7reserveEj+0xe>
   bb1a6:	6822      	ldr	r2, [r4, #0]
   bb1a8:	7013      	strb	r3, [r2, #0]
   bb1aa:	e7f2      	b.n	bb192 <_ZN6String7reserveEj+0xe>

000bb1ac <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bb1ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bb1ae:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bb1b0:	4611      	mov	r1, r2
   bb1b2:	9201      	str	r2, [sp, #4]
{
   bb1b4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bb1b6:	f7ff ffe5 	bl	bb184 <_ZN6String7reserveEj>
   bb1ba:	9a01      	ldr	r2, [sp, #4]
   bb1bc:	b928      	cbnz	r0, bb1ca <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bb1be:	4620      	mov	r0, r4
   bb1c0:	f7ff ffc9 	bl	bb156 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bb1c4:	4620      	mov	r0, r4
   bb1c6:	b003      	add	sp, #12
   bb1c8:	bd30      	pop	{r4, r5, pc}
	len = length;
   bb1ca:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bb1cc:	4629      	mov	r1, r5
   bb1ce:	6820      	ldr	r0, [r4, #0]
   bb1d0:	f001 fe82 	bl	bced8 <memcpy>
	buffer[len] = 0;
   bb1d4:	6822      	ldr	r2, [r4, #0]
   bb1d6:	68a3      	ldr	r3, [r4, #8]
   bb1d8:	2100      	movs	r1, #0
   bb1da:	54d1      	strb	r1, [r2, r3]
	return *this;
   bb1dc:	e7f2      	b.n	bb1c4 <_ZN6String4copyEPKcj+0x18>

000bb1de <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   bb1de:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bb1e0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   bb1e2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bb1e6:	4604      	mov	r4, r0
	len = 0;
   bb1e8:	6083      	str	r3, [r0, #8]
	flags = 0;
   bb1ea:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   bb1ec:	b141      	cbz	r1, bb200 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   bb1ee:	4608      	mov	r0, r1
   bb1f0:	9101      	str	r1, [sp, #4]
   bb1f2:	f001 fee1 	bl	bcfb8 <strlen>
   bb1f6:	9901      	ldr	r1, [sp, #4]
   bb1f8:	4602      	mov	r2, r0
   bb1fa:	4620      	mov	r0, r4
   bb1fc:	f7ff ffd6 	bl	bb1ac <_ZN6String4copyEPKcj>
}
   bb200:	4620      	mov	r0, r4
   bb202:	b002      	add	sp, #8
   bb204:	bd10      	pop	{r4, pc}

000bb206 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bb206:	b538      	push	{r3, r4, r5, lr}
   bb208:	4605      	mov	r5, r0
	if (buffer) {
   bb20a:	6800      	ldr	r0, [r0, #0]
{
   bb20c:	460c      	mov	r4, r1
	if (buffer) {
   bb20e:	b168      	cbz	r0, bb22c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bb210:	686a      	ldr	r2, [r5, #4]
   bb212:	688b      	ldr	r3, [r1, #8]
   bb214:	429a      	cmp	r2, r3
   bb216:	d307      	bcc.n	bb228 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bb218:	6809      	ldr	r1, [r1, #0]
   bb21a:	f001 fec5 	bl	bcfa8 <strcpy>
			len = rhs.len;
   bb21e:	68a3      	ldr	r3, [r4, #8]
   bb220:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bb222:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bb224:	60a3      	str	r3, [r4, #8]
}
   bb226:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bb228:	f7fe fae6 	bl	b97f8 <free>
	buffer = rhs.buffer;
   bb22c:	6823      	ldr	r3, [r4, #0]
   bb22e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bb230:	6863      	ldr	r3, [r4, #4]
   bb232:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bb234:	68a3      	ldr	r3, [r4, #8]
   bb236:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bb238:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bb23a:	e9c4 3300 	strd	r3, r3, [r4]
   bb23e:	e7f1      	b.n	bb224 <_ZN6String4moveERS_+0x1e>

000bb240 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bb240:	4288      	cmp	r0, r1
{
   bb242:	b510      	push	{r4, lr}
   bb244:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bb246:	d005      	beq.n	bb254 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bb248:	680b      	ldr	r3, [r1, #0]
   bb24a:	b12b      	cbz	r3, bb258 <_ZN6StringaSERKS_+0x18>
   bb24c:	688a      	ldr	r2, [r1, #8]
   bb24e:	4619      	mov	r1, r3
   bb250:	f7ff ffac 	bl	bb1ac <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bb254:	4620      	mov	r0, r4
   bb256:	bd10      	pop	{r4, pc}
	else invalidate();
   bb258:	f7ff ff7d 	bl	bb156 <_ZN6String10invalidateEv>
   bb25c:	e7fa      	b.n	bb254 <_ZN6StringaSERKS_+0x14>

000bb25e <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   bb25e:	4288      	cmp	r0, r1
{
   bb260:	b510      	push	{r4, lr}
   bb262:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   bb264:	d001      	beq.n	bb26a <_ZN6StringaSEOS_+0xc>
   bb266:	f7ff ffce 	bl	bb206 <_ZN6String4moveERS_>
	return *this;
}
   bb26a:	4620      	mov	r0, r4
   bb26c:	bd10      	pop	{r4, pc}

000bb26e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   bb26e:	b513      	push	{r0, r1, r4, lr}
   bb270:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   bb272:	b159      	cbz	r1, bb28c <_ZN6StringaSEPKc+0x1e>
   bb274:	4608      	mov	r0, r1
   bb276:	9101      	str	r1, [sp, #4]
   bb278:	f001 fe9e 	bl	bcfb8 <strlen>
   bb27c:	9901      	ldr	r1, [sp, #4]
   bb27e:	4602      	mov	r2, r0
   bb280:	4620      	mov	r0, r4
   bb282:	f7ff ff93 	bl	bb1ac <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bb286:	4620      	mov	r0, r4
   bb288:	b002      	add	sp, #8
   bb28a:	bd10      	pop	{r4, pc}
	else invalidate();
   bb28c:	f7ff ff63 	bl	bb156 <_ZN6String10invalidateEv>
   bb290:	e7f9      	b.n	bb286 <_ZN6StringaSEPKc+0x18>

000bb292 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   bb292:	b510      	push	{r4, lr}
   bb294:	4604      	mov	r4, r0
   bb296:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   bb298:	2300      	movs	r3, #0
	capacity = 0;
   bb29a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   bb29e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   bb2a0:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   bb2a2:	4608      	mov	r0, r1
	itoa(value, buf, base);
   bb2a4:	a901      	add	r1, sp, #4
   bb2a6:	f000 fd15 	bl	bbcd4 <itoa>
	*this = buf;
   bb2aa:	a901      	add	r1, sp, #4
   bb2ac:	4620      	mov	r0, r4
   bb2ae:	f7ff ffde 	bl	bb26e <_ZN6StringaSEPKc>
}
   bb2b2:	4620      	mov	r0, r4
   bb2b4:	b00a      	add	sp, #40	; 0x28
   bb2b6:	bd10      	pop	{r4, pc}

000bb2b8 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   bb2b8:	b570      	push	{r4, r5, r6, lr}
   bb2ba:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   bb2bc:	460e      	mov	r6, r1
   bb2be:	b909      	cbnz	r1, bb2c4 <_ZN6String6concatEPKcj+0xc>
   bb2c0:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   bb2c2:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   bb2c4:	b16a      	cbz	r2, bb2e2 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   bb2c6:	6884      	ldr	r4, [r0, #8]
   bb2c8:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   bb2ca:	4621      	mov	r1, r4
   bb2cc:	f7ff ff5a 	bl	bb184 <_ZN6String7reserveEj>
   bb2d0:	2800      	cmp	r0, #0
   bb2d2:	d0f5      	beq.n	bb2c0 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   bb2d4:	6828      	ldr	r0, [r5, #0]
   bb2d6:	68ab      	ldr	r3, [r5, #8]
   bb2d8:	4631      	mov	r1, r6
   bb2da:	4418      	add	r0, r3
   bb2dc:	f001 fe64 	bl	bcfa8 <strcpy>
	len = newlen;
   bb2e0:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   bb2e2:	2001      	movs	r0, #1
   bb2e4:	e7ed      	b.n	bb2c2 <_ZN6String6concatEPKcj+0xa>

000bb2e6 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   bb2e6:	688a      	ldr	r2, [r1, #8]
   bb2e8:	6809      	ldr	r1, [r1, #0]
   bb2ea:	f7ff bfe5 	b.w	bb2b8 <_ZN6String6concatEPKcj>

000bb2ee <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   bb2ee:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   bb2f0:	2300      	movs	r3, #0
	buf[0] = c;
   bb2f2:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   bb2f6:	2201      	movs	r2, #1
   bb2f8:	a901      	add	r1, sp, #4
	buf[1] = 0;
   bb2fa:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   bb2fe:	f7ff ffdb 	bl	bb2b8 <_ZN6String6concatEPKcj>
}
   bb302:	b003      	add	sp, #12
   bb304:	f85d fb04 	ldr.w	pc, [sp], #4

000bb308 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   bb308:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bb30a:	688a      	ldr	r2, [r1, #8]
   bb30c:	6809      	ldr	r1, [r1, #0]
{
   bb30e:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bb310:	f7ff ffd2 	bl	bb2b8 <_ZN6String6concatEPKcj>
   bb314:	b910      	cbnz	r0, bb31c <_ZplRK15StringSumHelperRK6String+0x14>
   bb316:	4620      	mov	r0, r4
   bb318:	f7ff ff1d 	bl	bb156 <_ZN6String10invalidateEv>
	return a;
}
   bb31c:	4620      	mov	r0, r4
   bb31e:	bd10      	pop	{r4, pc}

000bb320 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   bb320:	b513      	push	{r0, r1, r4, lr}
   bb322:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   bb324:	b929      	cbnz	r1, bb332 <_ZplRK15StringSumHelperPKc+0x12>
   bb326:	4620      	mov	r0, r4
   bb328:	f7ff ff15 	bl	bb156 <_ZN6String10invalidateEv>
	return a;
}
   bb32c:	4620      	mov	r0, r4
   bb32e:	b002      	add	sp, #8
   bb330:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   bb332:	4608      	mov	r0, r1
   bb334:	9101      	str	r1, [sp, #4]
   bb336:	f001 fe3f 	bl	bcfb8 <strlen>
   bb33a:	9901      	ldr	r1, [sp, #4]
   bb33c:	4602      	mov	r2, r0
   bb33e:	4620      	mov	r0, r4
   bb340:	f7ff ffba 	bl	bb2b8 <_ZN6String6concatEPKcj>
   bb344:	2800      	cmp	r0, #0
   bb346:	d0ee      	beq.n	bb326 <_ZplRK15StringSumHelperPKc+0x6>
   bb348:	e7f0      	b.n	bb32c <_ZplRK15StringSumHelperPKc+0xc>

000bb34a <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   bb34a:	6802      	ldr	r2, [r0, #0]
{
   bb34c:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   bb34e:	6809      	ldr	r1, [r1, #0]
   bb350:	b162      	cbz	r2, bb36c <_ZNK6String9compareToERKS_+0x22>
   bb352:	b941      	cbnz	r1, bb366 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   bb354:	6880      	ldr	r0, [r0, #8]
   bb356:	b160      	cbz	r0, bb372 <_ZNK6String9compareToERKS_+0x28>
   bb358:	7810      	ldrb	r0, [r2, #0]
   bb35a:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   bb35c:	6898      	ldr	r0, [r3, #8]
   bb35e:	b140      	cbz	r0, bb372 <_ZNK6String9compareToERKS_+0x28>
   bb360:	7809      	ldrb	r1, [r1, #0]
   bb362:	4248      	negs	r0, r1
   bb364:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   bb366:	4610      	mov	r0, r2
   bb368:	f001 be14 	b.w	bcf94 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   bb36c:	2900      	cmp	r1, #0
   bb36e:	d1f5      	bne.n	bb35c <_ZNK6String9compareToERKS_+0x12>
		return 0;
   bb370:	4608      	mov	r0, r1
}
   bb372:	4770      	bx	lr

000bb374 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   bb374:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   bb376:	6882      	ldr	r2, [r0, #8]
   bb378:	688b      	ldr	r3, [r1, #8]
   bb37a:	429a      	cmp	r2, r3
   bb37c:	d105      	bne.n	bb38a <_ZNK6String6equalsERKS_+0x16>
   bb37e:	f7ff ffe4 	bl	bb34a <_ZNK6String9compareToERKS_>
   bb382:	fab0 f080 	clz	r0, r0
   bb386:	0940      	lsrs	r0, r0, #5
}
   bb388:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   bb38a:	2000      	movs	r0, #0
   bb38c:	e7fc      	b.n	bb388 <_ZNK6String6equalsERKS_+0x14>

000bb38e <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
   bb38e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bb390:	6882      	ldr	r2, [r0, #8]
   bb392:	b93a      	cbnz	r2, bb3a4 <_ZNK6String6equalsEPKc+0x16>
   bb394:	b121      	cbz	r1, bb3a0 <_ZNK6String6equalsEPKc+0x12>
   bb396:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   bb398:	fab0 f080 	clz	r0, r0
   bb39c:	0940      	lsrs	r0, r0, #5
   bb39e:	e000      	b.n	bb3a2 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bb3a0:	2001      	movs	r0, #1
}
   bb3a2:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   bb3a4:	6800      	ldr	r0, [r0, #0]
   bb3a6:	b909      	cbnz	r1, bb3ac <_ZNK6String6equalsEPKc+0x1e>
   bb3a8:	7800      	ldrb	r0, [r0, #0]
   bb3aa:	e7f5      	b.n	bb398 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   bb3ac:	f001 fdf2 	bl	bcf94 <strcmp>
   bb3b0:	e7f2      	b.n	bb398 <_ZNK6String6equalsEPKc+0xa>

000bb3b2 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   bb3b2:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   bb3b4:	6883      	ldr	r3, [r0, #8]
   bb3b6:	4293      	cmp	r3, r2
   bb3b8:	d907      	bls.n	bb3ca <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   bb3ba:	6804      	ldr	r4, [r0, #0]
   bb3bc:	6809      	ldr	r1, [r1, #0]
   bb3be:	18a0      	adds	r0, r4, r2
   bb3c0:	f001 fe22 	bl	bd008 <strstr>
	if (found == NULL) return -1;
   bb3c4:	b108      	cbz	r0, bb3ca <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   bb3c6:	1b00      	subs	r0, r0, r4
}
   bb3c8:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   bb3ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bb3ce:	e7fb      	b.n	bb3c8 <_ZNK6String7indexOfERKS_j+0x16>

000bb3d0 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   bb3d0:	2200      	movs	r2, #0
   bb3d2:	f7ff bfee 	b.w	bb3b2 <_ZNK6String7indexOfERKS_j>
	...

000bb3d8 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   bb3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   bb3da:	429a      	cmp	r2, r3
{
   bb3dc:	460f      	mov	r7, r1
   bb3de:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   bb3e0:	490c      	ldr	r1, [pc, #48]	; (bb414 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   bb3e2:	bf88      	it	hi
   bb3e4:	4613      	movhi	r3, r2
{
   bb3e6:	4614      	mov	r4, r2
   bb3e8:	4606      	mov	r6, r0
	if (left > right) {
   bb3ea:	bf84      	itt	hi
   bb3ec:	462c      	movhi	r4, r5
   bb3ee:	461d      	movhi	r5, r3
	String out;
   bb3f0:	f7ff fef5 	bl	bb1de <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   bb3f4:	68bb      	ldr	r3, [r7, #8]
   bb3f6:	42a3      	cmp	r3, r4
   bb3f8:	d30a      	bcc.n	bb410 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   bb3fa:	6839      	ldr	r1, [r7, #0]
   bb3fc:	42ab      	cmp	r3, r5
   bb3fe:	bf94      	ite	ls
   bb400:	ebc4 0203 	rsbls	r2, r4, r3
   bb404:	ebc4 0205 	rsbhi	r2, r4, r5
   bb408:	4421      	add	r1, r4
   bb40a:	4630      	mov	r0, r6
   bb40c:	f7ff fece 	bl	bb1ac <_ZN6String4copyEPKcj>
	return out;
}
   bb410:	4630      	mov	r0, r6
   bb412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bb414:	000bf5d2 	.word	0x000bf5d2

000bb418 <_ZNK6String9substringEj>:
{
   bb418:	b510      	push	{r4, lr}
   bb41a:	4604      	mov	r4, r0
	return substring(left, len);
   bb41c:	688b      	ldr	r3, [r1, #8]
   bb41e:	f7ff ffdb 	bl	bb3d8 <_ZNK6String9substringEjj>
}
   bb422:	4620      	mov	r0, r4
   bb424:	bd10      	pop	{r4, pc}
	...

000bb428 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bb428:	4b05      	ldr	r3, [pc, #20]	; (bb440 <_GLOBAL__sub_I_System+0x18>)
   bb42a:	2202      	movs	r2, #2
   bb42c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   bb42e:	4b05      	ldr	r3, [pc, #20]	; (bb444 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bb430:	4a05      	ldr	r2, [pc, #20]	; (bb448 <_GLOBAL__sub_I_System+0x20>)
   bb432:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bb434:	2000      	movs	r0, #0
   bb436:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bb43a:	f7fe b939 	b.w	b96b0 <set_system_mode>
   bb43e:	bf00      	nop
   bb440:	2003e6f8 	.word	0x2003e6f8
   bb444:	2003e6ec 	.word	0x2003e6ec
   bb448:	ffff0000 	.word	0xffff0000

000bb44c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   bb44c:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   bb44e:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   bb450:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   bb454:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   bb456:	2201      	movs	r2, #1
   bb458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bb45c:	f10d 0107 	add.w	r1, sp, #7
   bb460:	47a0      	blx	r4
}
   bb462:	b002      	add	sp, #8
   bb464:	bd10      	pop	{r4, pc}

000bb466 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   bb466:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   bb468:	6803      	ldr	r3, [r0, #0]
   bb46a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   bb46c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bb470:	46a4      	mov	ip, r4
}
   bb472:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   bb476:	4760      	bx	ip

000bb478 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   bb478:	b513      	push	{r0, r1, r4, lr}
   bb47a:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   bb47c:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   bb47e:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   bb482:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   bb484:	f10d 0107 	add.w	r1, sp, #7
   bb488:	2201      	movs	r2, #1
   bb48a:	47a0      	blx	r4
}
   bb48c:	b002      	add	sp, #8
   bb48e:	bd10      	pop	{r4, pc}

000bb490 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   bb490:	b510      	push	{r4, lr}
      { return _M_ptr; }
   bb492:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   bb494:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bb498:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   bb49c:	429a      	cmp	r2, r3
int TCPClient::read() {
   bb49e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   bb4a0:	d008      	beq.n	bb4b4 <_ZN9TCPClient4readEv+0x24>
   bb4a2:	6963      	ldr	r3, [r4, #20]
   bb4a4:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   bb4a8:	1c51      	adds	r1, r2, #1
   bb4aa:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   bb4ae:	4413      	add	r3, r2
   bb4b0:	7918      	ldrb	r0, [r3, #4]
}
   bb4b2:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   bb4b4:	6803      	ldr	r3, [r0, #0]
   bb4b6:	691b      	ldr	r3, [r3, #16]
   bb4b8:	4798      	blx	r3
   bb4ba:	2800      	cmp	r0, #0
   bb4bc:	d1f1      	bne.n	bb4a2 <_ZN9TCPClient4readEv+0x12>
   bb4be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bb4c2:	e7f6      	b.n	bb4b2 <_ZN9TCPClient4readEv+0x22>

000bb4c4 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   bb4c4:	4770      	bx	lr

000bb4c6 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   bb4c6:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   bb4c8:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   bb4ca:	43c0      	mvns	r0, r0
   bb4cc:	0fc0      	lsrs	r0, r0, #31
   bb4ce:	4770      	bx	lr

000bb4d0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bb4d0:	4770      	bx	lr
	...

000bb4d4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   bb4d4:	4b06      	ldr	r3, [pc, #24]	; (bb4f0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   bb4d6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   bb4d8:	b510      	push	{r4, lr}
   bb4da:	f100 040c 	add.w	r4, r0, #12
	    ||
   bb4de:	d005      	beq.n	bb4ec <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   bb4e0:	4608      	mov	r0, r1
   bb4e2:	f000 fd1d 	bl	bbf20 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   bb4e6:	2800      	cmp	r0, #0
   bb4e8:	bf08      	it	eq
   bb4ea:	2400      	moveq	r4, #0
      }
   bb4ec:	4620      	mov	r0, r4
   bb4ee:	bd10      	pop	{r4, pc}
   bb4f0:	000bf7b8 	.word	0x000bf7b8

000bb4f4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bb4f4:	b510      	push	{r4, lr}
   bb4f6:	21ac      	movs	r1, #172	; 0xac
   bb4f8:	4604      	mov	r4, r0
   bb4fa:	f7f8 fdd4 	bl	b40a6 <_ZdlPvj>
   bb4fe:	4620      	mov	r0, r4
   bb500:	bd10      	pop	{r4, pc}

000bb502 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   bb502:	21ac      	movs	r1, #172	; 0xac
   bb504:	f7f8 bdcf 	b.w	b40a6 <_ZdlPvj>

000bb508 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   bb508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   bb50c:	f04f 0800 	mov.w	r8, #0
   bb510:	b086      	sub	sp, #24
   bb512:	461c      	mov	r4, r3
   bb514:	f8c0 8004 	str.w	r8, [r0, #4]
   bb518:	4605      	mov	r5, r0
   bb51a:	460e      	mov	r6, r1
   bb51c:	4617      	mov	r7, r2
    struct timeval tv = {};
   bb51e:	4641      	mov	r1, r8
   bb520:	2210      	movs	r2, #16
   bb522:	a802      	add	r0, sp, #8
   bb524:	f001 fd00 	bl	bcf28 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   bb528:	1c63      	adds	r3, r4, #1
   bb52a:	d009      	beq.n	bb540 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   bb52c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb530:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   bb534:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   bb538:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   bb53c:	435c      	muls	r4, r3
   bb53e:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   bb540:	6968      	ldr	r0, [r5, #20]
   bb542:	2310      	movs	r3, #16
   bb544:	9300      	str	r3, [sp, #0]
   bb546:	6800      	ldr	r0, [r0, #0]
   bb548:	ab02      	add	r3, sp, #8
   bb54a:	f241 0205 	movw	r2, #4101	; 0x1005
   bb54e:	f640 71ff 	movw	r1, #4095	; 0xfff
   bb552:	f7fd fffd 	bl	b9550 <sock_setsockopt>
    if (ret < 0) {
   bb556:	2800      	cmp	r0, #0
   bb558:	da07      	bge.n	bb56a <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   bb55a:	f7fe f97d 	bl	b9858 <__errno>
   bb55e:	6803      	ldr	r3, [r0, #0]
   bb560:	606b      	str	r3, [r5, #4]
        return 0;
   bb562:	2000      	movs	r0, #0
}
   bb564:	b006      	add	sp, #24
   bb566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   bb56a:	6968      	ldr	r0, [r5, #20]
   bb56c:	2300      	movs	r3, #0
   bb56e:	6800      	ldr	r0, [r0, #0]
   bb570:	463a      	mov	r2, r7
   bb572:	4631      	mov	r1, r6
   bb574:	f7fe f80c 	bl	b9590 <sock_send>
    if (ret < 0) {
   bb578:	1e03      	subs	r3, r0, #0
   bb57a:	dbee      	blt.n	bb55a <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   bb57c:	4618      	mov	r0, r3
   bb57e:	e7f1      	b.n	bb564 <_ZN9TCPClient5writeEPKhjm+0x5c>

000bb580 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   bb580:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   bb582:	6984      	ldr	r4, [r0, #24]
   bb584:	4b0a      	ldr	r3, [pc, #40]	; (bb5b0 <_ZN9TCPClientD1Ev+0x30>)
   bb586:	6003      	str	r3, [r0, #0]
   bb588:	4605      	mov	r5, r0
   bb58a:	b17c      	cbz	r4, bb5ac <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   bb58c:	6863      	ldr	r3, [r4, #4]
   bb58e:	3b01      	subs	r3, #1
   bb590:	6063      	str	r3, [r4, #4]
   bb592:	b95b      	cbnz	r3, bb5ac <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   bb594:	6823      	ldr	r3, [r4, #0]
   bb596:	4620      	mov	r0, r4
   bb598:	689b      	ldr	r3, [r3, #8]
   bb59a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   bb59c:	68a3      	ldr	r3, [r4, #8]
   bb59e:	3b01      	subs	r3, #1
   bb5a0:	60a3      	str	r3, [r4, #8]
   bb5a2:	b91b      	cbnz	r3, bb5ac <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   bb5a4:	6823      	ldr	r3, [r4, #0]
   bb5a6:	4620      	mov	r0, r4
   bb5a8:	68db      	ldr	r3, [r3, #12]
   bb5aa:	4798      	blx	r3
   bb5ac:	4628      	mov	r0, r5
   bb5ae:	bd38      	pop	{r3, r4, r5, pc}
   bb5b0:	000bf8ec 	.word	0x000bf8ec

000bb5b4 <_ZN9TCPClientD0Ev>:
   bb5b4:	b510      	push	{r4, lr}
   bb5b6:	4604      	mov	r4, r0
   bb5b8:	f7ff ffe2 	bl	bb580 <_ZN9TCPClientD1Ev>
   bb5bc:	4620      	mov	r0, r4
   bb5be:	211c      	movs	r1, #28
   bb5c0:	f7f8 fd71 	bl	b40a6 <_ZdlPvj>
   bb5c4:	4620      	mov	r0, r4
   bb5c6:	bd10      	pop	{r4, pc}

000bb5c8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   bb5c8:	b530      	push	{r4, r5, lr}
   bb5ca:	b087      	sub	sp, #28
   bb5cc:	4604      	mov	r4, r0
class IPAddress : public Printable {
   bb5ce:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   bb5d0:	4668      	mov	r0, sp
   bb5d2:	f7ff fc55 	bl	bae80 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bb5d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb5d8:	3404      	adds	r4, #4
   bb5da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb5dc:	682b      	ldr	r3, [r5, #0]
   bb5de:	7023      	strb	r3, [r4, #0]
    }
   bb5e0:	b007      	add	sp, #28
   bb5e2:	bd30      	pop	{r4, r5, pc}

000bb5e4 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   bb5e4:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   bb5e6:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   bb5e8:	4b05      	ldr	r3, [pc, #20]	; (bb600 <_ZN9TCPClient8remoteIPEv+0x1c>)
   bb5ea:	4604      	mov	r4, r0
   bb5ec:	358c      	adds	r5, #140	; 0x8c
   bb5ee:	f844 3b04 	str.w	r3, [r4], #4
   bb5f2:	4606      	mov	r6, r0
   bb5f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb5f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb5f8:	682b      	ldr	r3, [r5, #0]
   bb5fa:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   bb5fc:	4630      	mov	r0, r6
   bb5fe:	bd70      	pop	{r4, r5, r6, pc}
   bb600:	000bf864 	.word	0x000bf864

000bb604 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   bb604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb608:	4698      	mov	r8, r3
    stop();
   bb60a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   bb60c:	b093      	sub	sp, #76	; 0x4c
   bb60e:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   bb610:	2400      	movs	r4, #0
    stop();
   bb612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   bb614:	4606      	mov	r6, r0
   bb616:	4617      	mov	r7, r2
    stop();
   bb618:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   bb61a:	4628      	mov	r0, r5
   bb61c:	466b      	mov	r3, sp
   bb61e:	4622      	mov	r2, r4
   bb620:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   bb622:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   bb624:	f7fd ff8c 	bl	b9540 <netdb_getaddrinfo>
   bb628:	4605      	mov	r5, r0
   bb62a:	2800      	cmp	r0, #0
   bb62c:	d163      	bne.n	bb6f6 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   bb62e:	9b00      	ldr	r3, [sp, #0]
   bb630:	2b00      	cmp	r3, #0
   bb632:	d04b      	beq.n	bb6cc <_ZN9TCPClient7connectEPKctm+0xc8>
   bb634:	695b      	ldr	r3, [r3, #20]
   bb636:	2b00      	cmp	r3, #0
   bb638:	d048      	beq.n	bb6cc <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   bb63a:	a806      	add	r0, sp, #24
   bb63c:	f7ff fbdc 	bl	badf8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   bb640:	9b00      	ldr	r3, [sp, #0]
   bb642:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   bb644:	7863      	ldrb	r3, [r4, #1]
   bb646:	2b02      	cmp	r3, #2
   bb648:	d104      	bne.n	bb654 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   bb64a:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   bb64c:	a806      	add	r0, sp, #24
   bb64e:	f7ff ffbb 	bl	bb5c8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   bb652:	e026      	b.n	bb6a2 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   bb654:	2b0a      	cmp	r3, #10
   bb656:	d124      	bne.n	bb6a2 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   bb658:	2211      	movs	r2, #17
   bb65a:	4629      	mov	r1, r5
   bb65c:	a801      	add	r0, sp, #4
   bb65e:	f001 fc63 	bl	bcf28 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   bb662:	68a3      	ldr	r3, [r4, #8]
   bb664:	2b00      	cmp	r3, #0
   bb666:	d038      	beq.n	bb6da <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   bb668:	f104 0308 	add.w	r3, r4, #8
   bb66c:	f10d 0c04 	add.w	ip, sp, #4
   bb670:	3418      	adds	r4, #24
   bb672:	6818      	ldr	r0, [r3, #0]
   bb674:	6859      	ldr	r1, [r3, #4]
   bb676:	4662      	mov	r2, ip
   bb678:	c203      	stmia	r2!, {r0, r1}
   bb67a:	3308      	adds	r3, #8
   bb67c:	42a3      	cmp	r3, r4
   bb67e:	4694      	mov	ip, r2
   bb680:	d1f7      	bne.n	bb672 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   bb682:	2306      	movs	r3, #6
            addr = IPAddress(a);
   bb684:	a901      	add	r1, sp, #4
   bb686:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   bb688:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   bb68c:	f7ff fbc2 	bl	bae14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bb690:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   bb694:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bb698:	ac07      	add	r4, sp, #28
   bb69a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb69c:	f8dc 3000 	ldr.w	r3, [ip]
   bb6a0:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   bb6a2:	a806      	add	r0, sp, #24
   bb6a4:	f7ff fbc8 	bl	bae38 <_ZNK9IPAddresscvbEv>
        if (addr) {
   bb6a8:	b180      	cbz	r0, bb6cc <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   bb6aa:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   bb6ac:	ad07      	add	r5, sp, #28
   bb6ae:	f8d3 9020 	ldr.w	r9, [r3, #32]
   bb6b2:	4b12      	ldr	r3, [pc, #72]	; (bb6fc <_ZN9TCPClient7connectEPKctm+0xf8>)
   bb6b4:	930c      	str	r3, [sp, #48]	; 0x30
   bb6b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb6b8:	ac0d      	add	r4, sp, #52	; 0x34
   bb6ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb6bc:	682b      	ldr	r3, [r5, #0]
   bb6be:	7023      	strb	r3, [r4, #0]
   bb6c0:	463a      	mov	r2, r7
   bb6c2:	4643      	mov	r3, r8
   bb6c4:	a90c      	add	r1, sp, #48	; 0x30
   bb6c6:	4630      	mov	r0, r6
   bb6c8:	47c8      	blx	r9
   bb6ca:	4605      	mov	r5, r0
    SCOPE_GUARD({
   bb6cc:	9800      	ldr	r0, [sp, #0]
   bb6ce:	f7fd ff2f 	bl	b9530 <netdb_freeaddrinfo>
}
   bb6d2:	4628      	mov	r0, r5
   bb6d4:	b013      	add	sp, #76	; 0x4c
   bb6d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   bb6da:	68e3      	ldr	r3, [r4, #12]
   bb6dc:	2b00      	cmp	r3, #0
   bb6de:	d1c3      	bne.n	bb668 <_ZN9TCPClient7connectEPKctm+0x64>
   bb6e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   bb6e4:	f8d4 9010 	ldr.w	r9, [r4, #16]
   bb6e8:	f7fd ff12 	bl	b9510 <inet_htonl>
   bb6ec:	4581      	cmp	r9, r0
   bb6ee:	d1bb      	bne.n	bb668 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   bb6f0:	f104 0114 	add.w	r1, r4, #20
   bb6f4:	e7aa      	b.n	bb64c <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   bb6f6:	4625      	mov	r5, r4
   bb6f8:	e7e8      	b.n	bb6cc <_ZN9TCPClient7connectEPKctm+0xc8>
   bb6fa:	bf00      	nop
   bb6fc:	000bf864 	.word	0x000bf864

000bb700 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   bb700:	b538      	push	{r3, r4, r5, lr}
   bb702:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   bb704:	681a      	ldr	r2, [r3, #0]
   bb706:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   bb708:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   bb70a:	da10      	bge.n	bb72e <_ZN9TCPClient9connectedEv+0x2e>
   bb70c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bb710:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   bb714:	429a      	cmp	r2, r3
   bb716:	d10a      	bne.n	bb72e <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   bb718:	6803      	ldr	r3, [r0, #0]
   bb71a:	691b      	ldr	r3, [r3, #16]
   bb71c:	4798      	blx	r3
        if (!rv) {
   bb71e:	4604      	mov	r4, r0
   bb720:	b928      	cbnz	r0, bb72e <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   bb722:	682b      	ldr	r3, [r5, #0]
   bb724:	4628      	mov	r0, r5
   bb726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bb728:	4798      	blx	r3
        rv = available();
   bb72a:	4620      	mov	r0, r4
}
   bb72c:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   bb72e:	2001      	movs	r0, #1
   bb730:	e7fc      	b.n	bb72c <_ZN9TCPClient9connectedEv+0x2c>

000bb732 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   bb732:	b510      	push	{r4, lr}
   bb734:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   bb736:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bb73a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   bb73e:	429a      	cmp	r2, r3
int TCPClient::peek() {
   bb740:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   bb742:	d005      	beq.n	bb750 <_ZN9TCPClient4peekEv+0x1e>
   bb744:	6963      	ldr	r3, [r4, #20]
   bb746:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   bb74a:	4413      	add	r3, r2
   bb74c:	7918      	ldrb	r0, [r3, #4]
}
   bb74e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   bb750:	6803      	ldr	r3, [r0, #0]
   bb752:	691b      	ldr	r3, [r3, #16]
   bb754:	4798      	blx	r3
   bb756:	2800      	cmp	r0, #0
   bb758:	d1f4      	bne.n	bb744 <_ZN9TCPClient4peekEv+0x12>
   bb75a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bb75e:	e7f6      	b.n	bb74e <_ZN9TCPClient4peekEv+0x1c>

000bb760 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   bb760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb762:	6943      	ldr	r3, [r0, #20]
   bb764:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   bb766:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bb76a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   bb76e:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   bb770:	4605      	mov	r5, r0
   bb772:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   bb774:	d016      	beq.n	bb7a4 <_ZN9TCPClient4readEPhj+0x44>
   bb776:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   bb778:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   bb77c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   bb780:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   bb782:	42bc      	cmp	r4, r7
   bb784:	bf28      	it	cs
   bb786:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   bb788:	3304      	adds	r3, #4
   bb78a:	4622      	mov	r2, r4
   bb78c:	4419      	add	r1, r3
   bb78e:	4630      	mov	r0, r6
   bb790:	f001 fba2 	bl	bced8 <memcpy>
   bb794:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   bb796:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   bb79a:	4423      	add	r3, r4
   bb79c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   bb7a0:	4620      	mov	r0, r4
   bb7a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   bb7a4:	6803      	ldr	r3, [r0, #0]
   bb7a6:	691b      	ldr	r3, [r3, #16]
   bb7a8:	4798      	blx	r3
   bb7aa:	2800      	cmp	r0, #0
   bb7ac:	d1e3      	bne.n	bb776 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   bb7ae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   bb7b2:	e7f5      	b.n	bb7a0 <_ZN9TCPClient4readEPhj+0x40>

000bb7b4 <_ZN9TCPClient12flush_bufferEv>:
   bb7b4:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   bb7b6:	2300      	movs	r3, #0
   bb7b8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   bb7bc:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   bb7be:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   bb7c2:	4770      	bx	lr

000bb7c4 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   bb7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb7c8:	461f      	mov	r7, r3
    stop();
   bb7ca:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   bb7cc:	460c      	mov	r4, r1
    stop();
   bb7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   bb7d0:	b08a      	sub	sp, #40	; 0x28
   bb7d2:	4605      	mov	r5, r0
   bb7d4:	4616      	mov	r6, r2
    stop();
   bb7d6:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   bb7d8:	7d23      	ldrb	r3, [r4, #20]
   bb7da:	f8d5 8014 	ldr.w	r8, [r5, #20]
   bb7de:	2b04      	cmp	r3, #4
   bb7e0:	bf0c      	ite	eq
   bb7e2:	2002      	moveq	r0, #2
   bb7e4:	200a      	movne	r0, #10
   bb7e6:	2206      	movs	r2, #6
   bb7e8:	2101      	movs	r1, #1
   bb7ea:	f7fd fed9 	bl	b95a0 <sock_socket>
   bb7ee:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   bb7f2:	696b      	ldr	r3, [r5, #20]
   bb7f4:	681b      	ldr	r3, [r3, #0]
   bb7f6:	2b00      	cmp	r3, #0
   bb7f8:	da08      	bge.n	bb80c <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   bb7fa:	682b      	ldr	r3, [r5, #0]
   bb7fc:	4628      	mov	r0, r5
   bb7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   bb800:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   bb802:	4798      	blx	r3
}
   bb804:	4620      	mov	r0, r4
   bb806:	b00a      	add	sp, #40	; 0x28
   bb808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   bb80c:	4628      	mov	r0, r5
   bb80e:	f7ff ffd1 	bl	bb7b4 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   bb812:	b1b7      	cbz	r7, bb842 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   bb814:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   bb816:	a903      	add	r1, sp, #12
   bb818:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   bb81a:	9303      	str	r3, [sp, #12]
   bb81c:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   bb820:	f7fd fe66 	bl	b94f0 <if_index_to_name>
   bb824:	2800      	cmp	r0, #0
   bb826:	d1e8      	bne.n	bb7fa <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   bb828:	6968      	ldr	r0, [r5, #20]
   bb82a:	2306      	movs	r3, #6
   bb82c:	9300      	str	r3, [sp, #0]
   bb82e:	6800      	ldr	r0, [r0, #0]
   bb830:	ab03      	add	r3, sp, #12
   bb832:	f241 020b 	movw	r2, #4107	; 0x100b
   bb836:	f640 71ff 	movw	r1, #4095	; 0xfff
   bb83a:	f7fd fe89 	bl	b9550 <sock_setsockopt>
   bb83e:	2800      	cmp	r0, #0
   bb840:	d1db      	bne.n	bb7fa <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   bb842:	221c      	movs	r2, #28
   bb844:	2100      	movs	r1, #0
   bb846:	a803      	add	r0, sp, #12
   bb848:	f001 fb6e 	bl	bcf28 <memset>
    if (ip.version() == 4) {
   bb84c:	7d23      	ldrb	r3, [r4, #20]
   bb84e:	2b04      	cmp	r3, #4
   bb850:	d11d      	bne.n	bb88e <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   bb852:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   bb856:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   bb858:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   bb85c:	f7fd fe60 	bl	b9520 <inet_htons>
   bb860:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   bb864:	6860      	ldr	r0, [r4, #4]
   bb866:	f7fd fe53 	bl	b9510 <inet_htonl>
   bb86a:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   bb86c:	696b      	ldr	r3, [r5, #20]
   bb86e:	221c      	movs	r2, #28
   bb870:	6818      	ldr	r0, [r3, #0]
   bb872:	a903      	add	r1, sp, #12
   bb874:	f7fd fe7c 	bl	b9570 <sock_connect>
   bb878:	2800      	cmp	r0, #0
   bb87a:	d1be      	bne.n	bb7fa <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   bb87c:	3404      	adds	r4, #4
   bb87e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bb880:	696d      	ldr	r5, [r5, #20]
   bb882:	358c      	adds	r5, #140	; 0x8c
   bb884:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bb886:	6823      	ldr	r3, [r4, #0]
   bb888:	702b      	strb	r3, [r5, #0]
    return 1; // success
   bb88a:	2401      	movs	r4, #1
   bb88c:	e7ba      	b.n	bb804 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   bb88e:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   bb892:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   bb894:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   bb898:	f7fd fe42 	bl	b9520 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   bb89c:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   bb89e:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   bb8a2:	1d23      	adds	r3, r4, #4
   bb8a4:	f104 0714 	add.w	r7, r4, #20
   bb8a8:	6818      	ldr	r0, [r3, #0]
   bb8aa:	6859      	ldr	r1, [r3, #4]
   bb8ac:	4632      	mov	r2, r6
   bb8ae:	c203      	stmia	r2!, {r0, r1}
   bb8b0:	3308      	adds	r3, #8
   bb8b2:	42bb      	cmp	r3, r7
   bb8b4:	4616      	mov	r6, r2
   bb8b6:	d1f7      	bne.n	bb8a8 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   bb8b8:	e7d8      	b.n	bb86c <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000bb8bc <_ZN9TCPClient9availableEv>:
{
   bb8bc:	b530      	push	{r4, r5, lr}
   bb8be:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   bb8c0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   bb8c4:	b08b      	sub	sp, #44	; 0x2c
   bb8c6:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   bb8c8:	b12b      	cbz	r3, bb8d6 <_ZN9TCPClient9availableEv+0x1a>
   bb8ca:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   bb8ce:	429a      	cmp	r2, r3
   bb8d0:	d101      	bne.n	bb8d6 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   bb8d2:	f7ff ff6f 	bl	bb7b4 <_ZN9TCPClient12flush_bufferEv>
   bb8d6:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   bb8d8:	6808      	ldr	r0, [r1, #0]
   bb8da:	2800      	cmp	r0, #0
   bb8dc:	db18      	blt.n	bb910 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   bb8de:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   bb8e2:	2d7f      	cmp	r5, #127	; 0x7f
   bb8e4:	d814      	bhi.n	bb910 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   bb8e6:	3104      	adds	r1, #4
   bb8e8:	2308      	movs	r3, #8
   bb8ea:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   bb8ee:	4429      	add	r1, r5
   bb8f0:	f7fd fe46 	bl	b9580 <sock_recv>
            if (ret > 0) {
   bb8f4:	2800      	cmp	r0, #0
   bb8f6:	dd13      	ble.n	bb920 <_ZN9TCPClient9availableEv+0x64>
   bb8f8:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   bb8fa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bb8fe:	b90a      	cbnz	r2, bb904 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   bb900:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   bb904:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   bb906:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bb90a:	4410      	add	r0, r2
   bb90c:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   bb910:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   bb912:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   bb916:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   bb91a:	1ac0      	subs	r0, r0, r3
   bb91c:	b00b      	add	sp, #44	; 0x2c
   bb91e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   bb920:	f7fd ff9a 	bl	b9858 <__errno>
   bb924:	6803      	ldr	r3, [r0, #0]
   bb926:	2b0b      	cmp	r3, #11
   bb928:	d0f2      	beq.n	bb910 <_ZN9TCPClient9availableEv+0x54>
   bb92a:	f7fd ff95 	bl	b9858 <__errno>
   bb92e:	6803      	ldr	r3, [r0, #0]
   bb930:	2b0b      	cmp	r3, #11
   bb932:	d0ed      	beq.n	bb910 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   bb934:	2320      	movs	r3, #32
   bb936:	2500      	movs	r5, #0
   bb938:	e9cd 3502 	strd	r3, r5, [sp, #8]
   bb93c:	f7fd ff8c 	bl	b9858 <__errno>
   bb940:	6803      	ldr	r3, [r0, #0]
   bb942:	9301      	str	r3, [sp, #4]
   bb944:	4b08      	ldr	r3, [pc, #32]	; (bb968 <_ZN9TCPClient9availableEv+0xac>)
   bb946:	4909      	ldr	r1, [pc, #36]	; (bb96c <_ZN9TCPClient9availableEv+0xb0>)
   bb948:	9300      	str	r3, [sp, #0]
   bb94a:	aa02      	add	r2, sp, #8
   bb94c:	462b      	mov	r3, r5
   bb94e:	2032      	movs	r0, #50	; 0x32
   bb950:	f7fd fea6 	bl	b96a0 <log_message>
                    sock_close(d_->sock);
   bb954:	6963      	ldr	r3, [r4, #20]
   bb956:	6818      	ldr	r0, [r3, #0]
   bb958:	f7fd fe02 	bl	b9560 <sock_close>
   bb95c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   bb95e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb962:	601a      	str	r2, [r3, #0]
   bb964:	e7d4      	b.n	bb910 <_ZN9TCPClient9availableEv+0x54>
   bb966:	bf00      	nop
   bb968:	000bf8b7 	.word	0x000bf8b7
   bb96c:	000bf8b0 	.word	0x000bf8b0

000bb970 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   bb970:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   bb972:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   bb974:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   bb976:	6818      	ldr	r0, [r3, #0]
   bb978:	2800      	cmp	r0, #0
   bb97a:	db01      	blt.n	bb980 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   bb97c:	f7fd fdf0 	bl	b9560 <sock_close>
   bb980:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   bb982:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb986:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   bb988:	6960      	ldr	r0, [r4, #20]
   bb98a:	2211      	movs	r2, #17
   bb98c:	2100      	movs	r1, #0
   bb98e:	308c      	adds	r0, #140	; 0x8c
   bb990:	f001 faca 	bl	bcf28 <memset>
    flush_buffer();
   bb994:	4620      	mov	r0, r4
}
   bb996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   bb99a:	f7ff bf0b 	b.w	bb7b4 <_ZN9TCPClient12flush_bufferEv>

000bb99e <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   bb99e:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   bb9a0:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   bb9a2:	4604      	mov	r4, r0
          total(0) {
   bb9a4:	6001      	str	r1, [r0, #0]
   bb9a6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   bb9aa:	3088      	adds	r0, #136	; 0x88
   bb9ac:	f7ff fa24 	bl	badf8 <_ZN9IPAddressC1Ev>
}
   bb9b0:	4620      	mov	r0, r4
   bb9b2:	bd10      	pop	{r4, pc}

000bb9b4 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   bb9b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb9b6:	2300      	movs	r3, #0
   bb9b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   bb9bc:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   bb9c0:	4a0e      	ldr	r2, [pc, #56]	; (bb9fc <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   bb9c2:	6103      	str	r3, [r0, #16]
   bb9c4:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bb9c6:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   bb9c8:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bb9ca:	20ac      	movs	r0, #172	; 0xac
   bb9cc:	9101      	str	r1, [sp, #4]
   bb9ce:	f7f8 fb62 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bb9d2:	1e05      	subs	r5, r0, #0
   bb9d4:	f105 060c 	add.w	r6, r5, #12
   bb9d8:	d008      	beq.n	bb9ec <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   bb9da:	2301      	movs	r3, #1
   bb9dc:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   bb9e0:	4b07      	ldr	r3, [pc, #28]	; (bba00 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bb9e2:	9901      	ldr	r1, [sp, #4]
   bb9e4:	602b      	str	r3, [r5, #0]
   bb9e6:	4630      	mov	r0, r6
   bb9e8:	f7ff ffd9 	bl	bb99e <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   bb9ec:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   bb9ee:	e9c4 6505 	strd	r6, r5, [r4, #20]
   bb9f2:	f7ff fedf 	bl	bb7b4 <_ZN9TCPClient12flush_bufferEv>
}
   bb9f6:	b002      	add	sp, #8
   bb9f8:	bd70      	pop	{r4, r5, r6, pc}
   bb9fa:	bf00      	nop
   bb9fc:	000bf8ec 	.word	0x000bf8ec
   bba00:	000bf8d0 	.word	0x000bf8d0

000bba04 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   bba04:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   bba06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   bba0a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   bba0c:	f7ff ffd2 	bl	bb9b4 <_ZN9TCPClientC1Ei>
}
   bba10:	4620      	mov	r0, r4
   bba12:	bd10      	pop	{r4, pc}

000bba14 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   bba14:	b510      	push	{r4, lr}
   bba16:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   bba18:	6800      	ldr	r0, [r0, #0]
   bba1a:	2800      	cmp	r0, #0
   bba1c:	db01      	blt.n	bba22 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   bba1e:	f7fd fd9f 	bl	b9560 <sock_close>
    }
}
   bba22:	4620      	mov	r0, r4
   bba24:	bd10      	pop	{r4, pc}

000bba26 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   bba26:	300c      	adds	r0, #12
   bba28:	f7ff bff4 	b.w	bba14 <_ZN9TCPClient4DataD1Ev>

000bba2c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bba2c:	4b02      	ldr	r3, [pc, #8]	; (bba38 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bba2e:	681a      	ldr	r2, [r3, #0]
   bba30:	4b02      	ldr	r3, [pc, #8]	; (bba3c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bba32:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bba34:	4770      	bx	lr
   bba36:	bf00      	nop
   bba38:	20035058 	.word	0x20035058
   bba3c:	2003e6fc 	.word	0x2003e6fc

000bba40 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bba40:	4770      	bx	lr

000bba42 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bba42:	7441      	strb	r1, [r0, #17]
}
   bba44:	4770      	bx	lr

000bba46 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bba46:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bba48:	7c00      	ldrb	r0, [r0, #16]
   bba4a:	f7fd fdd9 	bl	b9600 <hal_usart_available_data_for_write>
}
   bba4e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bba52:	bd08      	pop	{r3, pc}

000bba54 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bba54:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bba56:	7c00      	ldrb	r0, [r0, #16]
   bba58:	f7fd fdb2 	bl	b95c0 <hal_usart_available>
}
   bba5c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bba60:	bd08      	pop	{r3, pc}

000bba62 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bba62:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bba64:	7c00      	ldrb	r0, [r0, #16]
   bba66:	f7fd fdbb 	bl	b95e0 <hal_usart_peek>
}
   bba6a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bba6e:	bd08      	pop	{r3, pc}

000bba70 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bba70:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bba72:	7c00      	ldrb	r0, [r0, #16]
   bba74:	f7fd fdac 	bl	b95d0 <hal_usart_read>
}
   bba78:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bba7c:	bd08      	pop	{r3, pc}

000bba7e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bba7e:	7c00      	ldrb	r0, [r0, #16]
   bba80:	f7fd bdb6 	b.w	b95f0 <hal_usart_flush>

000bba84 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bba84:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bba86:	7c45      	ldrb	r5, [r0, #17]
{
   bba88:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bba8a:	b12d      	cbz	r5, bba98 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bba8c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bba8e:	b003      	add	sp, #12
   bba90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bba94:	f7fd bd8c 	b.w	b95b0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bba98:	7c00      	ldrb	r0, [r0, #16]
   bba9a:	9101      	str	r1, [sp, #4]
   bba9c:	f7fd fdb0 	bl	b9600 <hal_usart_available_data_for_write>
   bbaa0:	2800      	cmp	r0, #0
   bbaa2:	9901      	ldr	r1, [sp, #4]
   bbaa4:	dcf2      	bgt.n	bba8c <_ZN11USARTSerial5writeEh+0x8>
}
   bbaa6:	4628      	mov	r0, r5
   bbaa8:	b003      	add	sp, #12
   bbaaa:	bd30      	pop	{r4, r5, pc}

000bbaac <_ZN11USARTSerialD0Ev>:
   bbaac:	b510      	push	{r4, lr}
   bbaae:	2114      	movs	r1, #20
   bbab0:	4604      	mov	r4, r0
   bbab2:	f7f8 faf8 	bl	b40a6 <_ZdlPvj>
   bbab6:	4620      	mov	r0, r4
   bbab8:	bd10      	pop	{r4, pc}
	...

000bbabc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bbabc:	b510      	push	{r4, lr}
   bbabe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bbac2:	4604      	mov	r4, r0
   bbac4:	4608      	mov	r0, r1
   bbac6:	4611      	mov	r1, r2
   bbac8:	2200      	movs	r2, #0
   bbaca:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bbace:	4b04      	ldr	r3, [pc, #16]	; (bbae0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bbad0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bbad2:	2301      	movs	r3, #1
  _serial = serial;
   bbad4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bbad6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bbad8:	f7fd fd9a 	bl	b9610 <hal_usart_init_ex>
}
   bbadc:	4620      	mov	r0, r4
   bbade:	bd10      	pop	{r4, pc}
   bbae0:	000bf954 	.word	0x000bf954

000bbae4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bbae4:	7441      	strb	r1, [r0, #17]
}
   bbae6:	4770      	bx	lr

000bbae8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bbae8:	4770      	bx	lr

000bbaea <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bbaea:	4770      	bx	lr

000bbaec <_ZN9USBSerial4readEv>:
{
   bbaec:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bbaee:	2100      	movs	r1, #0
   bbaf0:	7c00      	ldrb	r0, [r0, #16]
   bbaf2:	f7fd fdb5 	bl	b9660 <HAL_USB_USART_Receive_Data>
}
   bbaf6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bbafa:	bd08      	pop	{r3, pc}

000bbafc <_ZN9USBSerial4peekEv>:
{
   bbafc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bbafe:	2101      	movs	r1, #1
   bbb00:	7c00      	ldrb	r0, [r0, #16]
   bbb02:	f7fd fdad 	bl	b9660 <HAL_USB_USART_Receive_Data>
}
   bbb06:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bbb0a:	bd08      	pop	{r3, pc}

000bbb0c <_ZN9USBSerial17availableForWriteEv>:
{
   bbb0c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bbb0e:	7c00      	ldrb	r0, [r0, #16]
   bbb10:	f7fd fd9e 	bl	b9650 <HAL_USB_USART_Available_Data_For_Write>
}
   bbb14:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bbb18:	bd08      	pop	{r3, pc}

000bbb1a <_ZN9USBSerial9availableEv>:
{
   bbb1a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bbb1c:	7c00      	ldrb	r0, [r0, #16]
   bbb1e:	f7fd fd8f 	bl	b9640 <HAL_USB_USART_Available_Data>
}
   bbb22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bbb26:	bd08      	pop	{r3, pc}

000bbb28 <_ZN9USBSerial5writeEh>:
{
   bbb28:	b513      	push	{r0, r1, r4, lr}
   bbb2a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bbb2c:	7c00      	ldrb	r0, [r0, #16]
{
   bbb2e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bbb30:	f7fd fd8e 	bl	b9650 <HAL_USB_USART_Available_Data_For_Write>
   bbb34:	2800      	cmp	r0, #0
   bbb36:	9901      	ldr	r1, [sp, #4]
   bbb38:	dc01      	bgt.n	bbb3e <_ZN9USBSerial5writeEh+0x16>
   bbb3a:	7c60      	ldrb	r0, [r4, #17]
   bbb3c:	b120      	cbz	r0, bbb48 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bbb3e:	7c20      	ldrb	r0, [r4, #16]
   bbb40:	f7fd fd96 	bl	b9670 <HAL_USB_USART_Send_Data>
   bbb44:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bbb48:	b002      	add	sp, #8
   bbb4a:	bd10      	pop	{r4, pc}

000bbb4c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bbb4c:	7c00      	ldrb	r0, [r0, #16]
   bbb4e:	f7fd bd97 	b.w	b9680 <HAL_USB_USART_Flush_Data>

000bbb52 <_ZN9USBSerialD0Ev>:
   bbb52:	b510      	push	{r4, lr}
   bbb54:	2114      	movs	r1, #20
   bbb56:	4604      	mov	r4, r0
   bbb58:	f7f8 faa5 	bl	b40a6 <_ZdlPvj>
   bbb5c:	4620      	mov	r0, r4
   bbb5e:	bd10      	pop	{r4, pc}

000bbb60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bbb60:	b510      	push	{r4, lr}
   bbb62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bbb66:	4604      	mov	r4, r0
   bbb68:	4608      	mov	r0, r1
   bbb6a:	2100      	movs	r1, #0
   bbb6c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bbb70:	4b04      	ldr	r3, [pc, #16]	; (bbb84 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bbb72:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bbb74:	2301      	movs	r3, #1
  _serial = serial;
   bbb76:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bbb78:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bbb7a:	4611      	mov	r1, r2
   bbb7c:	f7fd fd50 	bl	b9620 <HAL_USB_USART_Init>
}
   bbb80:	4620      	mov	r0, r4
   bbb82:	bd10      	pop	{r4, pc}
   bbb84:	000bf984 	.word	0x000bf984

000bbb88 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bbb88:	7c00      	ldrb	r0, [r0, #16]
   bbb8a:	2200      	movs	r2, #0
   bbb8c:	f7fd bd50 	b.w	b9630 <HAL_USB_USART_Begin>

000bbb90 <_Z19acquireSerialBufferv>:
{
   bbb90:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bbb92:	2214      	movs	r2, #20
{
   bbb94:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bbb96:	2100      	movs	r1, #0
   bbb98:	f001 f9c6 	bl	bcf28 <memset>
}
   bbb9c:	4620      	mov	r0, r4
   bbb9e:	bd10      	pop	{r4, pc}

000bbba0 <_Z16_fetch_usbserialv>:
{
   bbba0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bbba2:	4c0f      	ldr	r4, [pc, #60]	; (bbbe0 <_Z16_fetch_usbserialv+0x40>)
{
   bbba4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bbba6:	a803      	add	r0, sp, #12
   bbba8:	f7ff fff2 	bl	bbb90 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bbbac:	7821      	ldrb	r1, [r4, #0]
   bbbae:	f3bf 8f5b 	dmb	ish
   bbbb2:	f011 0101 	ands.w	r1, r1, #1
   bbbb6:	d10f      	bne.n	bbbd8 <_Z16_fetch_usbserialv+0x38>
   bbbb8:	4620      	mov	r0, r4
   bbbba:	9101      	str	r1, [sp, #4]
   bbbbc:	f7f8 fa75 	bl	b40aa <__cxa_guard_acquire>
   bbbc0:	9901      	ldr	r1, [sp, #4]
   bbbc2:	b148      	cbz	r0, bbbd8 <_Z16_fetch_usbserialv+0x38>
   bbbc4:	aa03      	add	r2, sp, #12
   bbbc6:	4807      	ldr	r0, [pc, #28]	; (bbbe4 <_Z16_fetch_usbserialv+0x44>)
   bbbc8:	f7ff ffca 	bl	bbb60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bbbcc:	4620      	mov	r0, r4
   bbbce:	f7f8 fa71 	bl	b40b4 <__cxa_guard_release>
   bbbd2:	4805      	ldr	r0, [pc, #20]	; (bbbe8 <_Z16_fetch_usbserialv+0x48>)
   bbbd4:	f001 f966 	bl	bcea4 <atexit>
	return _usbserial;
}
   bbbd8:	4802      	ldr	r0, [pc, #8]	; (bbbe4 <_Z16_fetch_usbserialv+0x44>)
   bbbda:	b008      	add	sp, #32
   bbbdc:	bd10      	pop	{r4, pc}
   bbbde:	bf00      	nop
   bbbe0:	2003e700 	.word	0x2003e700
   bbbe4:	2003e704 	.word	0x2003e704
   bbbe8:	000bbae9 	.word	0x000bbae9

000bbbec <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   bbbec:	2200      	movs	r2, #0
   bbbee:	6840      	ldr	r0, [r0, #4]
   bbbf0:	4611      	mov	r1, r2
   bbbf2:	f7fd bda1 	b.w	b9738 <network_ready>

000bbbf6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bbbf6:	2200      	movs	r2, #0
   bbbf8:	6840      	ldr	r0, [r0, #4]
   bbbfa:	4611      	mov	r1, r2
   bbbfc:	f7fd bdbc 	b.w	b9778 <network_listening>

000bbc00 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bbc00:	2200      	movs	r2, #0
   bbc02:	6840      	ldr	r0, [r0, #4]
   bbc04:	4611      	mov	r1, r2
   bbc06:	f7fd bdd7 	b.w	b97b8 <network_get_listen_timeout>

000bbc0a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bbc0a:	6840      	ldr	r0, [r0, #4]
   bbc0c:	2200      	movs	r2, #0
   bbc0e:	f7fd bdcb 	b.w	b97a8 <network_set_listen_timeout>

000bbc12 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bbc12:	6840      	ldr	r0, [r0, #4]
   bbc14:	2200      	movs	r2, #0
   bbc16:	f081 0101 	eor.w	r1, r1, #1
   bbc1a:	f7fd bda5 	b.w	b9768 <network_listen>

000bbc1e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bbc1e:	2300      	movs	r3, #0
   bbc20:	6840      	ldr	r0, [r0, #4]
   bbc22:	461a      	mov	r2, r3
   bbc24:	4619      	mov	r1, r3
   bbc26:	f7fd bd97 	b.w	b9758 <network_off>

000bbc2a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bbc2a:	2300      	movs	r3, #0
   bbc2c:	6840      	ldr	r0, [r0, #4]
   bbc2e:	461a      	mov	r2, r3
   bbc30:	4619      	mov	r1, r3
   bbc32:	f7fd bd89 	b.w	b9748 <network_on>

000bbc36 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bbc36:	2200      	movs	r2, #0
   bbc38:	6840      	ldr	r0, [r0, #4]
   bbc3a:	4611      	mov	r1, r2
   bbc3c:	f7fd bd6c 	b.w	b9718 <network_connecting>

000bbc40 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bbc40:	6840      	ldr	r0, [r0, #4]
   bbc42:	2200      	movs	r2, #0
   bbc44:	2102      	movs	r1, #2
   bbc46:	f7fd bd6f 	b.w	b9728 <network_disconnect>

000bbc4a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bbc4a:	2300      	movs	r3, #0
   bbc4c:	6840      	ldr	r0, [r0, #4]
   bbc4e:	461a      	mov	r2, r3
   bbc50:	f7fd bd5a 	b.w	b9708 <network_connect>

000bbc54 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   bbc54:	4b02      	ldr	r3, [pc, #8]	; (bbc60 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   bbc56:	2204      	movs	r2, #4
   bbc58:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   bbc5a:	4a02      	ldr	r2, [pc, #8]	; (bbc64 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   bbc5c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   bbc5e:	4770      	bx	lr
   bbc60:	2003e718 	.word	0x2003e718
   bbc64:	000bf9b4 	.word	0x000bf9b4

000bbc68 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   bbc68:	b510      	push	{r4, lr}
   bbc6a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   bbc6c:	f001 f9a4 	bl	bcfb8 <strlen>
   bbc70:	3801      	subs	r0, #1
   bbc72:	1823      	adds	r3, r4, r0
   bbc74:	4620      	mov	r0, r4
	while(i<j){
   bbc76:	4283      	cmp	r3, r0
   bbc78:	d906      	bls.n	bbc88 <_Z11str_reversePc+0x20>
		c = *i;
   bbc7a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   bbc7c:	7819      	ldrb	r1, [r3, #0]
   bbc7e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   bbc82:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   bbc86:	e7f6      	b.n	bbc76 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   bbc88:	bd10      	pop	{r4, pc}

000bbc8a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   bbc8a:	b570      	push	{r4, r5, r6, lr}
   bbc8c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   bbc8e:	1e91      	subs	r1, r2, #2
   bbc90:	2922      	cmp	r1, #34	; 0x22
   bbc92:	d81d      	bhi.n	bbcd0 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   bbc94:	4625      	mov	r5, r4

	div_t result;
	while(a){
   bbc96:	b930      	cbnz	r0, bbca6 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   bbc98:	4423      	add	r3, r4
            *ptr++ = '0';
   bbc9a:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   bbc9c:	429d      	cmp	r5, r3
   bbc9e:	d210      	bcs.n	bbcc2 <ultoa+0x38>
            *ptr++ = '0';
   bbca0:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   bbca4:	e7fa      	b.n	bbc9c <ultoa+0x12>
            result.quot = a/radix;
   bbca6:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   bbcaa:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   bbcae:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   bbcb0:	2809      	cmp	r0, #9
                *ptr += '0';
   bbcb2:	bf94      	ite	ls
   bbcb4:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   bbcb6:	3157      	addhi	r1, #87	; 0x57
   bbcb8:	b2c9      	uxtb	r1, r1
   bbcba:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   bbcbe:	4630      	mov	r0, r6
	while(a){
   bbcc0:	e7e9      	b.n	bbc96 <ultoa+0xc>

	*ptr = '\0';
   bbcc2:	2300      	movs	r3, #0
	str_reverse(buffer);
   bbcc4:	4620      	mov	r0, r4
	*ptr = '\0';
   bbcc6:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   bbcc8:	f7ff ffce 	bl	bbc68 <_Z11str_reversePc>
	return buffer;
   bbccc:	4620      	mov	r0, r4
}
   bbcce:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   bbcd0:	2000      	movs	r0, #0
   bbcd2:	e7fc      	b.n	bbcce <ultoa+0x44>

000bbcd4 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   bbcd4:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   bbcd6:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   bbcd8:	460c      	mov	r4, r1
   bbcda:	4615      	mov	r5, r2
	if(a<0){
   bbcdc:	da0e      	bge.n	bbcfc <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   bbcde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   bbce2:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   bbce6:	bf14      	ite	ne
   bbce8:	4258      	negne	r0, r3
   bbcea:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   bbcec:	2301      	movs	r3, #1
		*buffer = '-';
   bbcee:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   bbcf0:	462a      	mov	r2, r5
   bbcf2:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   bbcf4:	f7ff ffc9 	bl	bbc8a <ultoa>
	}
	return buffer;
}
   bbcf8:	4620      	mov	r0, r4
   bbcfa:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   bbcfc:	2301      	movs	r3, #1
   bbcfe:	e7f9      	b.n	bbcf4 <itoa+0x20>

000bbd00 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bbd00:	4b01      	ldr	r3, [pc, #4]	; (bbd08 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bbd02:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bbd04:	4770      	bx	lr
   bbd06:	bf00      	nop
   bbd08:	20035060 	.word	0x20035060

000bbd0c <serialEventRun>:
{
   bbd0c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bbd0e:	4b0b      	ldr	r3, [pc, #44]	; (bbd3c <serialEventRun+0x30>)
   bbd10:	b143      	cbz	r3, bbd24 <serialEventRun+0x18>
   bbd12:	f7ff ff45 	bl	bbba0 <_Z16_fetch_usbserialv>
   bbd16:	6803      	ldr	r3, [r0, #0]
   bbd18:	691b      	ldr	r3, [r3, #16]
   bbd1a:	4798      	blx	r3
   bbd1c:	2800      	cmp	r0, #0
   bbd1e:	dd01      	ble.n	bbd24 <serialEventRun+0x18>
        serialEvent();
   bbd20:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bbd24:	4b06      	ldr	r3, [pc, #24]	; (bbd40 <serialEventRun+0x34>)
   bbd26:	b143      	cbz	r3, bbd3a <serialEventRun+0x2e>
   bbd28:	f000 f8c8 	bl	bbebc <_Z22__fetch_global_Serial1v>
   bbd2c:	6803      	ldr	r3, [r0, #0]
   bbd2e:	691b      	ldr	r3, [r3, #16]
   bbd30:	4798      	blx	r3
   bbd32:	2800      	cmp	r0, #0
   bbd34:	dd01      	ble.n	bbd3a <serialEventRun+0x2e>
        serialEvent1();
   bbd36:	f3af 8000 	nop.w
}
   bbd3a:	bd08      	pop	{r3, pc}
	...

000bbd44 <_post_loop>:
{
   bbd44:	b508      	push	{r3, lr}
	serialEventRun();
   bbd46:	f7ff ffe1 	bl	bbd0c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bbd4a:	f7fd fb69 	bl	b9420 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bbd4e:	4b01      	ldr	r3, [pc, #4]	; (bbd54 <_post_loop+0x10>)
   bbd50:	6018      	str	r0, [r3, #0]
}
   bbd52:	bd08      	pop	{r3, pc}
   bbd54:	2003e728 	.word	0x2003e728

000bbd58 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bbd58:	4805      	ldr	r0, [pc, #20]	; (bbd70 <_Z33system_initialize_user_backup_ramv+0x18>)
   bbd5a:	4a06      	ldr	r2, [pc, #24]	; (bbd74 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bbd5c:	4906      	ldr	r1, [pc, #24]	; (bbd78 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bbd5e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bbd60:	1a12      	subs	r2, r2, r0
   bbd62:	f001 f8b9 	bl	bced8 <memcpy>
    __backup_sram_signature = signature;
   bbd66:	4b05      	ldr	r3, [pc, #20]	; (bbd7c <_Z33system_initialize_user_backup_ramv+0x24>)
   bbd68:	4a05      	ldr	r2, [pc, #20]	; (bbd80 <_Z33system_initialize_user_backup_ramv+0x28>)
   bbd6a:	601a      	str	r2, [r3, #0]
}
   bbd6c:	bd08      	pop	{r3, pc}
   bbd6e:	bf00      	nop
   bbd70:	2003f400 	.word	0x2003f400
   bbd74:	2003f404 	.word	0x2003f404
   bbd78:	000bfef4 	.word	0x000bfef4
   bbd7c:	2003f400 	.word	0x2003f400
   bbd80:	9a271c1e 	.word	0x9a271c1e

000bbd84 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bbd84:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bbd86:	2300      	movs	r3, #0
   bbd88:	9300      	str	r3, [sp, #0]
   bbd8a:	461a      	mov	r2, r3
   bbd8c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bbd90:	f7fd fca8 	bl	b96e4 <system_ctrl_set_result>
}
   bbd94:	b003      	add	sp, #12
   bbd96:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bbd9c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bbd9c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bbd9e:	8843      	ldrh	r3, [r0, #2]
   bbda0:	2b0a      	cmp	r3, #10
   bbda2:	d008      	beq.n	bbdb6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bbda4:	2b50      	cmp	r3, #80	; 0x50
   bbda6:	d10b      	bne.n	bbdc0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bbda8:	4b09      	ldr	r3, [pc, #36]	; (bbdd0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bbdaa:	681b      	ldr	r3, [r3, #0]
   bbdac:	b14b      	cbz	r3, bbdc2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bbdae:	b003      	add	sp, #12
   bbdb0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bbdb4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bbdb6:	f7ff ffe5 	bl	bbd84 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bbdba:	b003      	add	sp, #12
   bbdbc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bbdc0:	2300      	movs	r3, #0
   bbdc2:	9300      	str	r3, [sp, #0]
   bbdc4:	461a      	mov	r2, r3
   bbdc6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bbdca:	f7fd fc8b 	bl	b96e4 <system_ctrl_set_result>
}
   bbdce:	e7f4      	b.n	bbdba <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bbdd0:	2003e724 	.word	0x2003e724

000bbdd4 <module_user_init_hook>:
{
   bbdd4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bbdd6:	4812      	ldr	r0, [pc, #72]	; (bbe20 <module_user_init_hook+0x4c>)
   bbdd8:	2100      	movs	r1, #0
   bbdda:	f7fd fd4d 	bl	b9878 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bbdde:	4b11      	ldr	r3, [pc, #68]	; (bbe24 <module_user_init_hook+0x50>)
   bbde0:	681a      	ldr	r2, [r3, #0]
   bbde2:	4b11      	ldr	r3, [pc, #68]	; (bbe28 <module_user_init_hook+0x54>)
   bbde4:	429a      	cmp	r2, r3
   bbde6:	4b11      	ldr	r3, [pc, #68]	; (bbe2c <module_user_init_hook+0x58>)
   bbde8:	bf0c      	ite	eq
   bbdea:	2201      	moveq	r2, #1
   bbdec:	2200      	movne	r2, #0
   bbdee:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bbdf0:	d001      	beq.n	bbdf6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bbdf2:	f7ff ffb1 	bl	bbd58 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bbdf6:	f7fd fb03 	bl	b9400 <HAL_RNG_GetRandomNumber>
   bbdfa:	4604      	mov	r4, r0
    srand(seed);
   bbdfc:	f001 f89c 	bl	bcf38 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bbe00:	4b0b      	ldr	r3, [pc, #44]	; (bbe30 <module_user_init_hook+0x5c>)
   bbe02:	b113      	cbz	r3, bbe0a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bbe04:	4620      	mov	r0, r4
   bbe06:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bbe0a:	2100      	movs	r1, #0
   bbe0c:	4808      	ldr	r0, [pc, #32]	; (bbe30 <module_user_init_hook+0x5c>)
   bbe0e:	f7fd fc73 	bl	b96f8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bbe12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bbe16:	4807      	ldr	r0, [pc, #28]	; (bbe34 <module_user_init_hook+0x60>)
   bbe18:	2100      	movs	r1, #0
   bbe1a:	f7fd bc59 	b.w	b96d0 <system_ctrl_set_app_request_handler>
   bbe1e:	bf00      	nop
   bbe20:	000bbd01 	.word	0x000bbd01
   bbe24:	2003f400 	.word	0x2003f400
   bbe28:	9a271c1e 	.word	0x9a271c1e
   bbe2c:	2003e720 	.word	0x2003e720
   bbe30:	00000000 	.word	0x00000000
   bbe34:	000bbd9d 	.word	0x000bbd9d

000bbe38 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bbe38:	4770      	bx	lr
	...

000bbe3c <_Z19__fetch_global_Wirev>:
{
   bbe3c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bbe3e:	4d0e      	ldr	r5, [pc, #56]	; (bbe78 <_Z19__fetch_global_Wirev+0x3c>)
   bbe40:	7829      	ldrb	r1, [r5, #0]
   bbe42:	f3bf 8f5b 	dmb	ish
   bbe46:	f011 0401 	ands.w	r4, r1, #1
{
   bbe4a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bbe4c:	d111      	bne.n	bbe72 <_Z19__fetch_global_Wirev+0x36>
   bbe4e:	4628      	mov	r0, r5
   bbe50:	f7f8 f92b 	bl	b40aa <__cxa_guard_acquire>
   bbe54:	b168      	cbz	r0, bbe72 <_Z19__fetch_global_Wirev+0x36>
   bbe56:	a801      	add	r0, sp, #4
   bbe58:	f7f8 fc6c 	bl	b4734 <_Z17acquireWireBufferv>
   bbe5c:	aa01      	add	r2, sp, #4
   bbe5e:	4621      	mov	r1, r4
   bbe60:	4806      	ldr	r0, [pc, #24]	; (bbe7c <_Z19__fetch_global_Wirev+0x40>)
   bbe62:	f7fe ff2b 	bl	bacbc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bbe66:	4628      	mov	r0, r5
   bbe68:	f7f8 f924 	bl	b40b4 <__cxa_guard_release>
   bbe6c:	4804      	ldr	r0, [pc, #16]	; (bbe80 <_Z19__fetch_global_Wirev+0x44>)
   bbe6e:	f001 f819 	bl	bcea4 <atexit>
	return wire;
}
   bbe72:	4802      	ldr	r0, [pc, #8]	; (bbe7c <_Z19__fetch_global_Wirev+0x40>)
   bbe74:	b007      	add	sp, #28
   bbe76:	bd30      	pop	{r4, r5, pc}
   bbe78:	2003e72c 	.word	0x2003e72c
   bbe7c:	2003e730 	.word	0x2003e730
   bbe80:	000bbe39 	.word	0x000bbe39

000bbe84 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bbe84:	4770      	bx	lr
	...

000bbe88 <_Z20acquireSerial1Bufferv>:
{
   bbe88:	b538      	push	{r3, r4, r5, lr}
   bbe8a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bbe8c:	2514      	movs	r5, #20
   bbe8e:	462a      	mov	r2, r5
   bbe90:	2100      	movs	r1, #0
   bbe92:	f001 f849 	bl	bcf28 <memset>
   bbe96:	8025      	strh	r5, [r4, #0]
   bbe98:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbe9a:	4907      	ldr	r1, [pc, #28]	; (bbeb8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bbe9c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbe9e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bbea0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbea2:	f000 f82f 	bl	bbf04 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbea6:	4904      	ldr	r1, [pc, #16]	; (bbeb8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bbea8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbeaa:	4628      	mov	r0, r5
   bbeac:	f000 f82a 	bl	bbf04 <_ZnajRKSt9nothrow_t>
    };
   bbeb0:	60e0      	str	r0, [r4, #12]
}
   bbeb2:	4620      	mov	r0, r4
   bbeb4:	bd38      	pop	{r3, r4, r5, pc}
   bbeb6:	bf00      	nop
   bbeb8:	000bf9e8 	.word	0x000bf9e8

000bbebc <_Z22__fetch_global_Serial1v>:
{
   bbebc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bbebe:	4d0e      	ldr	r5, [pc, #56]	; (bbef8 <_Z22__fetch_global_Serial1v+0x3c>)
   bbec0:	7829      	ldrb	r1, [r5, #0]
   bbec2:	f3bf 8f5b 	dmb	ish
   bbec6:	f011 0401 	ands.w	r4, r1, #1
{
   bbeca:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bbecc:	d111      	bne.n	bbef2 <_Z22__fetch_global_Serial1v+0x36>
   bbece:	4628      	mov	r0, r5
   bbed0:	f7f8 f8eb 	bl	b40aa <__cxa_guard_acquire>
   bbed4:	b168      	cbz	r0, bbef2 <_Z22__fetch_global_Serial1v+0x36>
   bbed6:	a801      	add	r0, sp, #4
   bbed8:	f7ff ffd6 	bl	bbe88 <_Z20acquireSerial1Bufferv>
   bbedc:	aa01      	add	r2, sp, #4
   bbede:	4621      	mov	r1, r4
   bbee0:	4806      	ldr	r0, [pc, #24]	; (bbefc <_Z22__fetch_global_Serial1v+0x40>)
   bbee2:	f7ff fdeb 	bl	bbabc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bbee6:	4628      	mov	r0, r5
   bbee8:	f7f8 f8e4 	bl	b40b4 <__cxa_guard_release>
   bbeec:	4804      	ldr	r0, [pc, #16]	; (bbf00 <_Z22__fetch_global_Serial1v+0x44>)
   bbeee:	f000 ffd9 	bl	bcea4 <atexit>
    return serial1;
}
   bbef2:	4802      	ldr	r0, [pc, #8]	; (bbefc <_Z22__fetch_global_Serial1v+0x40>)
   bbef4:	b007      	add	sp, #28
   bbef6:	bd30      	pop	{r4, r5, pc}
   bbef8:	2003e744 	.word	0x2003e744
   bbefc:	2003e748 	.word	0x2003e748
   bbf00:	000bbe85 	.word	0x000bbe85

000bbf04 <_ZnajRKSt9nothrow_t>:
   bbf04:	f7f8 b8c9 	b.w	b409a <_Znaj>

000bbf08 <_ZSt17__throw_bad_allocv>:
   bbf08:	b508      	push	{r3, lr}
   bbf0a:	f7fd fc95 	bl	b9838 <abort>

000bbf0e <_ZSt19__throw_logic_errorPKc>:
   bbf0e:	b508      	push	{r3, lr}
   bbf10:	f7fd fc92 	bl	b9838 <abort>

000bbf14 <_ZSt20__throw_length_errorPKc>:
   bbf14:	b508      	push	{r3, lr}
   bbf16:	f7fd fc8f 	bl	b9838 <abort>

000bbf1a <_ZSt25__throw_bad_function_callv>:
   bbf1a:	b508      	push	{r3, lr}
   bbf1c:	f7fd fc8c 	bl	b9838 <abort>

000bbf20 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   bbf20:	4901      	ldr	r1, [pc, #4]	; (bbf28 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   bbf22:	f000 b963 	b.w	bc1ec <_ZNKSt9type_infoeqERKS_>
   bbf26:	bf00      	nop
   bbf28:	000bfa04 	.word	0x000bfa04

000bbf2c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   bbf2c:	b10a      	cbz	r2, bbf32 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   bbf2e:	f000 bfd3 	b.w	bced8 <memcpy>
   bbf32:	4770      	bx	lr

000bbf34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   bbf34:	b508      	push	{r3, lr}
   bbf36:	680b      	ldr	r3, [r1, #0]
   bbf38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   bbf3c:	d302      	bcc.n	bbf44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   bbf3e:	480d      	ldr	r0, [pc, #52]	; (bbf74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   bbf40:	f7ff ffe8 	bl	bbf14 <_ZSt20__throw_length_errorPKc>
   bbf44:	4293      	cmp	r3, r2
   bbf46:	d90b      	bls.n	bbf60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   bbf48:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   bbf4c:	ea4f 0042 	mov.w	r0, r2, lsl #1
   bbf50:	d206      	bcs.n	bbf60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   bbf52:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   bbf56:	bf2a      	itet	cs
   bbf58:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   bbf5c:	6008      	strcc	r0, [r1, #0]
   bbf5e:	600b      	strcs	r3, [r1, #0]
   bbf60:	6808      	ldr	r0, [r1, #0]
   bbf62:	3001      	adds	r0, #1
   bbf64:	d501      	bpl.n	bbf6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   bbf66:	f7ff ffcf 	bl	bbf08 <_ZSt17__throw_bad_allocv>
   bbf6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   bbf6e:	f7f8 b892 	b.w	b4096 <_Znwj>
   bbf72:	bf00      	nop
   bbf74:	000bfa0c 	.word	0x000bfa0c

000bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   bbf78:	f850 3b08 	ldr.w	r3, [r0], #8
   bbf7c:	4283      	cmp	r3, r0
   bbf7e:	d002      	beq.n	bbf86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   bbf80:	4618      	mov	r0, r3
   bbf82:	f7f8 b88c 	b.w	b409e <_ZdlPv>
   bbf86:	4770      	bx	lr

000bbf88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   bbf88:	2a01      	cmp	r2, #1
   bbf8a:	b410      	push	{r4}
   bbf8c:	d104      	bne.n	bbf98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   bbf8e:	780a      	ldrb	r2, [r1, #0]
   bbf90:	f85d 4b04 	ldr.w	r4, [sp], #4
   bbf94:	7002      	strb	r2, [r0, #0]
   bbf96:	4770      	bx	lr
   bbf98:	f85d 4b04 	ldr.w	r4, [sp], #4
   bbf9c:	f7ff bfc6 	b.w	bbf2c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000bbfa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
   bbfa0:	b508      	push	{r3, lr}
   bbfa2:	1a52      	subs	r2, r2, r1
   bbfa4:	f7ff fff0 	bl	bbf88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   bbfa8:	bd08      	pop	{r3, pc}

000bbfaa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   bbfaa:	b508      	push	{r3, lr}
   bbfac:	1a52      	subs	r2, r2, r1
   bbfae:	f7ff ffeb 	bl	bbf88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   bbfb2:	bd08      	pop	{r3, pc}

000bbfb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
   bbfb4:	4288      	cmp	r0, r1
   bbfb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bbfb8:	4604      	mov	r4, r0
   bbfba:	460e      	mov	r6, r1
   bbfbc:	d01e      	beq.n	bbffc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
   bbfbe:	4603      	mov	r3, r0
   bbfc0:	684d      	ldr	r5, [r1, #4]
   bbfc2:	f853 2b08 	ldr.w	r2, [r3], #8
   bbfc6:	429a      	cmp	r2, r3
   bbfc8:	bf14      	ite	ne
   bbfca:	6882      	ldrne	r2, [r0, #8]
   bbfcc:	220f      	moveq	r2, #15
   bbfce:	42aa      	cmp	r2, r5
   bbfd0:	d20a      	bcs.n	bbfe8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
   bbfd2:	a901      	add	r1, sp, #4
   bbfd4:	9501      	str	r5, [sp, #4]
   bbfd6:	f7ff ffad 	bl	bbf34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   bbfda:	4607      	mov	r7, r0
   bbfdc:	4620      	mov	r0, r4
   bbfde:	f7ff ffcb 	bl	bbf78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   bbfe2:	9b01      	ldr	r3, [sp, #4]
   bbfe4:	6027      	str	r7, [r4, #0]
   bbfe6:	60a3      	str	r3, [r4, #8]
   bbfe8:	b125      	cbz	r5, bbff4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
   bbfea:	6831      	ldr	r1, [r6, #0]
   bbfec:	6820      	ldr	r0, [r4, #0]
   bbfee:	462a      	mov	r2, r5
   bbff0:	f7ff ffca 	bl	bbf88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   bbff4:	6823      	ldr	r3, [r4, #0]
   bbff6:	6065      	str	r5, [r4, #4]
   bbff8:	2200      	movs	r2, #0
   bbffa:	555a      	strb	r2, [r3, r5]
   bbffc:	b003      	add	sp, #12
   bbffe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bc000 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   bc000:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bc002:	2400      	movs	r4, #0
   bc004:	2310      	movs	r3, #16
   bc006:	e9cd 3402 	strd	r3, r4, [sp, #8]
   bc00a:	6803      	ldr	r3, [r0, #0]
   bc00c:	4615      	mov	r5, r2
   bc00e:	699e      	ldr	r6, [r3, #24]
   bc010:	6812      	ldr	r2, [r2, #0]
   bc012:	466b      	mov	r3, sp
   bc014:	e9cd 4400 	strd	r4, r4, [sp]
   bc018:	47b0      	blx	r6
   bc01a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bc01e:	f003 0306 	and.w	r3, r3, #6
   bc022:	2b06      	cmp	r3, #6
   bc024:	bf03      	ittte	eq
   bc026:	9b00      	ldreq	r3, [sp, #0]
   bc028:	602b      	streq	r3, [r5, #0]
   bc02a:	2001      	moveq	r0, #1
   bc02c:	4620      	movne	r0, r4
   bc02e:	b004      	add	sp, #16
   bc030:	bd70      	pop	{r4, r5, r6, pc}

000bc032 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   bc032:	9800      	ldr	r0, [sp, #0]
   bc034:	4290      	cmp	r0, r2
   bc036:	bf14      	ite	ne
   bc038:	2001      	movne	r0, #1
   bc03a:	2006      	moveq	r0, #6
   bc03c:	4770      	bx	lr
	...

000bc040 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   bc040:	b510      	push	{r4, lr}
   bc042:	4b03      	ldr	r3, [pc, #12]	; (bc050 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   bc044:	6003      	str	r3, [r0, #0]
   bc046:	4604      	mov	r4, r0
   bc048:	f000 f8cd 	bl	bc1e6 <_ZNSt9type_infoD1Ev>
   bc04c:	4620      	mov	r0, r4
   bc04e:	bd10      	pop	{r4, pc}
   bc050:	000bfa5c 	.word	0x000bfa5c

000bc054 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   bc054:	b510      	push	{r4, lr}
   bc056:	4604      	mov	r4, r0
   bc058:	f7ff fff2 	bl	bc040 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bc05c:	4620      	mov	r0, r4
   bc05e:	2108      	movs	r1, #8
   bc060:	f7f8 f821 	bl	b40a6 <_ZdlPvj>
   bc064:	4620      	mov	r0, r4
   bc066:	bd10      	pop	{r4, pc}

000bc068 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   bc068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc06c:	461f      	mov	r7, r3
   bc06e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   bc072:	f8dd 8018 	ldr.w	r8, [sp, #24]
   bc076:	4598      	cmp	r8, r3
   bc078:	4606      	mov	r6, r0
   bc07a:	4615      	mov	r5, r2
   bc07c:	d107      	bne.n	bc08e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bc07e:	9907      	ldr	r1, [sp, #28]
   bc080:	f000 f8b4 	bl	bc1ec <_ZNKSt9type_infoeqERKS_>
   bc084:	b118      	cbz	r0, bc08e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bc086:	7165      	strb	r5, [r4, #5]
   bc088:	2000      	movs	r0, #0
   bc08a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc08e:	4639      	mov	r1, r7
   bc090:	4630      	mov	r0, r6
   bc092:	f000 f8ab 	bl	bc1ec <_ZNKSt9type_infoeqERKS_>
   bc096:	2800      	cmp	r0, #0
   bc098:	d0f6      	beq.n	bc088 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   bc09a:	2301      	movs	r3, #1
   bc09c:	f8c4 8000 	str.w	r8, [r4]
   bc0a0:	7125      	strb	r5, [r4, #4]
   bc0a2:	71a3      	strb	r3, [r4, #6]
   bc0a4:	e7f0      	b.n	bc088 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000bc0a6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   bc0a6:	b538      	push	{r3, r4, r5, lr}
   bc0a8:	4615      	mov	r5, r2
   bc0aa:	461c      	mov	r4, r3
   bc0ac:	f000 f89e 	bl	bc1ec <_ZNKSt9type_infoeqERKS_>
   bc0b0:	b120      	cbz	r0, bc0bc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   bc0b2:	2308      	movs	r3, #8
   bc0b4:	60e3      	str	r3, [r4, #12]
   bc0b6:	2306      	movs	r3, #6
   bc0b8:	6025      	str	r5, [r4, #0]
   bc0ba:	7123      	strb	r3, [r4, #4]
   bc0bc:	bd38      	pop	{r3, r4, r5, pc}

000bc0be <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   bc0be:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bc0c0:	4605      	mov	r5, r0
   bc0c2:	460c      	mov	r4, r1
   bc0c4:	9201      	str	r2, [sp, #4]
   bc0c6:	461e      	mov	r6, r3
   bc0c8:	f000 f890 	bl	bc1ec <_ZNKSt9type_infoeqERKS_>
   bc0cc:	b950      	cbnz	r0, bc0e4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bc0ce:	2e03      	cmp	r6, #3
   bc0d0:	d808      	bhi.n	bc0e4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bc0d2:	6823      	ldr	r3, [r4, #0]
   bc0d4:	9a01      	ldr	r2, [sp, #4]
   bc0d6:	695b      	ldr	r3, [r3, #20]
   bc0d8:	4629      	mov	r1, r5
   bc0da:	4620      	mov	r0, r4
   bc0dc:	b002      	add	sp, #8
   bc0de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bc0e2:	4718      	bx	r3
   bc0e4:	b002      	add	sp, #8
   bc0e6:	bd70      	pop	{r4, r5, r6, pc}

000bc0e8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   bc0e8:	b510      	push	{r4, lr}
   bc0ea:	4b03      	ldr	r3, [pc, #12]	; (bc0f8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   bc0ec:	6003      	str	r3, [r0, #0]
   bc0ee:	4604      	mov	r4, r0
   bc0f0:	f7ff ffa6 	bl	bc040 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bc0f4:	4620      	mov	r0, r4
   bc0f6:	bd10      	pop	{r4, pc}
   bc0f8:	000bfabc 	.word	0x000bfabc

000bc0fc <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   bc0fc:	b510      	push	{r4, lr}
   bc0fe:	4604      	mov	r4, r0
   bc100:	f7ff fff2 	bl	bc0e8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   bc104:	4620      	mov	r0, r4
   bc106:	210c      	movs	r1, #12
   bc108:	f7f7 ffcd 	bl	b40a6 <_ZdlPvj>
   bc10c:	4620      	mov	r0, r4
   bc10e:	bd10      	pop	{r4, pc}

000bc110 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   bc110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bc112:	9f08      	ldr	r7, [sp, #32]
   bc114:	4297      	cmp	r7, r2
   bc116:	4605      	mov	r5, r0
   bc118:	460e      	mov	r6, r1
   bc11a:	4614      	mov	r4, r2
   bc11c:	d00a      	beq.n	bc134 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   bc11e:	68a8      	ldr	r0, [r5, #8]
   bc120:	6802      	ldr	r2, [r0, #0]
   bc122:	9708      	str	r7, [sp, #32]
   bc124:	6a15      	ldr	r5, [r2, #32]
   bc126:	4631      	mov	r1, r6
   bc128:	4622      	mov	r2, r4
   bc12a:	46ac      	mov	ip, r5
   bc12c:	b003      	add	sp, #12
   bc12e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bc132:	4760      	bx	ip
   bc134:	4619      	mov	r1, r3
   bc136:	9301      	str	r3, [sp, #4]
   bc138:	f000 f858 	bl	bc1ec <_ZNKSt9type_infoeqERKS_>
   bc13c:	9b01      	ldr	r3, [sp, #4]
   bc13e:	2800      	cmp	r0, #0
   bc140:	d0ed      	beq.n	bc11e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   bc142:	2006      	movs	r0, #6
   bc144:	b003      	add	sp, #12
   bc146:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bc148 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   bc148:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc14c:	460d      	mov	r5, r1
   bc14e:	4619      	mov	r1, r3
   bc150:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   bc154:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   bc158:	4681      	mov	r9, r0
   bc15a:	4617      	mov	r7, r2
   bc15c:	4698      	mov	r8, r3
   bc15e:	f000 f845 	bl	bc1ec <_ZNKSt9type_infoeqERKS_>
   bc162:	b190      	cbz	r0, bc18a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   bc164:	2d00      	cmp	r5, #0
   bc166:	6034      	str	r4, [r6, #0]
   bc168:	7137      	strb	r7, [r6, #4]
   bc16a:	db09      	blt.n	bc180 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   bc16c:	1961      	adds	r1, r4, r5
   bc16e:	458a      	cmp	sl, r1
   bc170:	bf0c      	ite	eq
   bc172:	2106      	moveq	r1, #6
   bc174:	2101      	movne	r1, #1
   bc176:	71b1      	strb	r1, [r6, #6]
   bc178:	2000      	movs	r0, #0
   bc17a:	b001      	add	sp, #4
   bc17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc180:	3502      	adds	r5, #2
   bc182:	d1f9      	bne.n	bc178 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bc184:	2301      	movs	r3, #1
   bc186:	71b3      	strb	r3, [r6, #6]
   bc188:	e7f6      	b.n	bc178 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bc18a:	4554      	cmp	r4, sl
   bc18c:	d106      	bne.n	bc19c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bc18e:	4659      	mov	r1, fp
   bc190:	4648      	mov	r0, r9
   bc192:	f000 f82b 	bl	bc1ec <_ZNKSt9type_infoeqERKS_>
   bc196:	b108      	cbz	r0, bc19c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bc198:	7177      	strb	r7, [r6, #5]
   bc19a:	e7ed      	b.n	bc178 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bc19c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   bc1a0:	6803      	ldr	r3, [r0, #0]
   bc1a2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   bc1a6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   bc1aa:	69dc      	ldr	r4, [r3, #28]
   bc1ac:	463a      	mov	r2, r7
   bc1ae:	4643      	mov	r3, r8
   bc1b0:	4629      	mov	r1, r5
   bc1b2:	46a4      	mov	ip, r4
   bc1b4:	b001      	add	sp, #4
   bc1b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc1ba:	4760      	bx	ip

000bc1bc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   bc1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc1c0:	4607      	mov	r7, r0
   bc1c2:	460c      	mov	r4, r1
   bc1c4:	4615      	mov	r5, r2
   bc1c6:	461e      	mov	r6, r3
   bc1c8:	f7ff ff6d 	bl	bc0a6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   bc1cc:	b948      	cbnz	r0, bc1e2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   bc1ce:	68b8      	ldr	r0, [r7, #8]
   bc1d0:	6803      	ldr	r3, [r0, #0]
   bc1d2:	699f      	ldr	r7, [r3, #24]
   bc1d4:	462a      	mov	r2, r5
   bc1d6:	4633      	mov	r3, r6
   bc1d8:	4621      	mov	r1, r4
   bc1da:	46bc      	mov	ip, r7
   bc1dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bc1e0:	4760      	bx	ip
   bc1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bc1e6 <_ZNSt9type_infoD1Ev>:
   bc1e6:	4770      	bx	lr

000bc1e8 <_ZNKSt9type_info14__is_pointer_pEv>:
   bc1e8:	2000      	movs	r0, #0
   bc1ea:	4770      	bx	lr

000bc1ec <_ZNKSt9type_infoeqERKS_>:
   bc1ec:	4281      	cmp	r1, r0
   bc1ee:	b508      	push	{r3, lr}
   bc1f0:	d00e      	beq.n	bc210 <_ZNKSt9type_infoeqERKS_+0x24>
   bc1f2:	6840      	ldr	r0, [r0, #4]
   bc1f4:	7803      	ldrb	r3, [r0, #0]
   bc1f6:	2b2a      	cmp	r3, #42	; 0x2a
   bc1f8:	d00c      	beq.n	bc214 <_ZNKSt9type_infoeqERKS_+0x28>
   bc1fa:	6849      	ldr	r1, [r1, #4]
   bc1fc:	780b      	ldrb	r3, [r1, #0]
   bc1fe:	2b2a      	cmp	r3, #42	; 0x2a
   bc200:	bf08      	it	eq
   bc202:	3101      	addeq	r1, #1
   bc204:	f000 fec6 	bl	bcf94 <strcmp>
   bc208:	fab0 f080 	clz	r0, r0
   bc20c:	0940      	lsrs	r0, r0, #5
   bc20e:	bd08      	pop	{r3, pc}
   bc210:	2001      	movs	r0, #1
   bc212:	e7fc      	b.n	bc20e <_ZNKSt9type_infoeqERKS_+0x22>
   bc214:	2000      	movs	r0, #0
   bc216:	e7fa      	b.n	bc20e <_ZNKSt9type_infoeqERKS_+0x22>

000bc218 <floorf>:
   bc218:	ee10 2a10 	vmov	r2, s0
   bc21c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   bc220:	3b7f      	subs	r3, #127	; 0x7f
   bc222:	2b16      	cmp	r3, #22
   bc224:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   bc228:	dc28      	bgt.n	bc27c <floorf+0x64>
   bc22a:	2b00      	cmp	r3, #0
   bc22c:	db18      	blt.n	bc260 <floorf+0x48>
   bc22e:	491a      	ldr	r1, [pc, #104]	; (bc298 <floorf+0x80>)
   bc230:	4119      	asrs	r1, r3
   bc232:	420a      	tst	r2, r1
   bc234:	d021      	beq.n	bc27a <floorf+0x62>
   bc236:	eddf 7a19 	vldr	s15, [pc, #100]	; bc29c <floorf+0x84>
   bc23a:	ee70 7a27 	vadd.f32	s15, s0, s15
   bc23e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   bc242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bc246:	dd18      	ble.n	bc27a <floorf+0x62>
   bc248:	2a00      	cmp	r2, #0
   bc24a:	da04      	bge.n	bc256 <floorf+0x3e>
   bc24c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   bc250:	fa40 f303 	asr.w	r3, r0, r3
   bc254:	441a      	add	r2, r3
   bc256:	ea22 0301 	bic.w	r3, r2, r1
   bc25a:	ee00 3a10 	vmov	s0, r3
   bc25e:	4770      	bx	lr
   bc260:	eddf 7a0e 	vldr	s15, [pc, #56]	; bc29c <floorf+0x84>
   bc264:	ee70 7a27 	vadd.f32	s15, s0, s15
   bc268:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   bc26c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bc270:	dd03      	ble.n	bc27a <floorf+0x62>
   bc272:	2a00      	cmp	r2, #0
   bc274:	db08      	blt.n	bc288 <floorf+0x70>
   bc276:	ed9f 0a0a 	vldr	s0, [pc, #40]	; bc2a0 <floorf+0x88>
   bc27a:	4770      	bx	lr
   bc27c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   bc280:	d3fb      	bcc.n	bc27a <floorf+0x62>
   bc282:	ee30 0a00 	vadd.f32	s0, s0, s0
   bc286:	4770      	bx	lr
   bc288:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   bc28c:	2900      	cmp	r1, #0
   bc28e:	bf18      	it	ne
   bc290:	eeb0 0a67 	vmovne.f32	s0, s15
   bc294:	4770      	bx	lr
   bc296:	bf00      	nop
   bc298:	007fffff 	.word	0x007fffff
   bc29c:	7149f2ca 	.word	0x7149f2ca
   bc2a0:	00000000 	.word	0x00000000

000bc2a4 <sqrt>:
   bc2a4:	b538      	push	{r3, r4, r5, lr}
   bc2a6:	ed2d 8b02 	vpush	{d8}
   bc2aa:	ec55 4b10 	vmov	r4, r5, d0
   bc2ae:	f000 f833 	bl	bc318 <__ieee754_sqrt>
   bc2b2:	4b18      	ldr	r3, [pc, #96]	; (bc314 <sqrt+0x70>)
   bc2b4:	eeb0 8a40 	vmov.f32	s16, s0
   bc2b8:	eef0 8a60 	vmov.f32	s17, s1
   bc2bc:	f993 3000 	ldrsb.w	r3, [r3]
   bc2c0:	3301      	adds	r3, #1
   bc2c2:	d00d      	beq.n	bc2e0 <sqrt+0x3c>
   bc2c4:	4622      	mov	r2, r4
   bc2c6:	462b      	mov	r3, r5
   bc2c8:	4620      	mov	r0, r4
   bc2ca:	4629      	mov	r1, r5
   bc2cc:	f000 fd46 	bl	bcd5c <__aeabi_dcmpun>
   bc2d0:	b930      	cbnz	r0, bc2e0 <sqrt+0x3c>
   bc2d2:	2200      	movs	r2, #0
   bc2d4:	2300      	movs	r3, #0
   bc2d6:	4620      	mov	r0, r4
   bc2d8:	4629      	mov	r1, r5
   bc2da:	f000 fd17 	bl	bcd0c <__aeabi_dcmplt>
   bc2de:	b930      	cbnz	r0, bc2ee <sqrt+0x4a>
   bc2e0:	eeb0 0a48 	vmov.f32	s0, s16
   bc2e4:	eef0 0a68 	vmov.f32	s1, s17
   bc2e8:	ecbd 8b02 	vpop	{d8}
   bc2ec:	bd38      	pop	{r3, r4, r5, pc}
   bc2ee:	f7fd fab3 	bl	b9858 <__errno>
   bc2f2:	2200      	movs	r2, #0
   bc2f4:	2300      	movs	r3, #0
   bc2f6:	2121      	movs	r1, #33	; 0x21
   bc2f8:	6001      	str	r1, [r0, #0]
   bc2fa:	4610      	mov	r0, r2
   bc2fc:	4619      	mov	r1, r3
   bc2fe:	f000 fbbd 	bl	bca7c <__aeabi_ddiv>
   bc302:	ec41 0b18 	vmov	d8, r0, r1
   bc306:	eeb0 0a48 	vmov.f32	s0, s16
   bc30a:	eef0 0a68 	vmov.f32	s1, s17
   bc30e:	ecbd 8b02 	vpop	{d8}
   bc312:	bd38      	pop	{r3, r4, r5, pc}
   bc314:	2003505c 	.word	0x2003505c

000bc318 <__ieee754_sqrt>:
   bc318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc31c:	4a63      	ldr	r2, [pc, #396]	; (bc4ac <__ieee754_sqrt+0x194>)
   bc31e:	ec55 4b10 	vmov	r4, r5, d0
   bc322:	43aa      	bics	r2, r5
   bc324:	f000 809f 	beq.w	bc466 <__ieee754_sqrt+0x14e>
   bc328:	2d00      	cmp	r5, #0
   bc32a:	ee10 ca10 	vmov	ip, s0
   bc32e:	462b      	mov	r3, r5
   bc330:	dd54      	ble.n	bc3dc <__ieee754_sqrt+0xc4>
   bc332:	1529      	asrs	r1, r5, #20
   bc334:	d063      	beq.n	bc3fe <__ieee754_sqrt+0xe6>
   bc336:	f3c3 0313 	ubfx	r3, r3, #0, #20
   bc33a:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   bc33e:	07c9      	lsls	r1, r1, #31
   bc340:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bc344:	d404      	bmi.n	bc350 <__ieee754_sqrt+0x38>
   bc346:	005b      	lsls	r3, r3, #1
   bc348:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   bc34c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bc350:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   bc354:	2600      	movs	r6, #0
   bc356:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   bc35a:	107f      	asrs	r7, r7, #1
   bc35c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bc360:	f04f 0e16 	mov.w	lr, #22
   bc364:	4634      	mov	r4, r6
   bc366:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   bc36a:	18a1      	adds	r1, r4, r2
   bc36c:	4299      	cmp	r1, r3
   bc36e:	dc02      	bgt.n	bc376 <__ieee754_sqrt+0x5e>
   bc370:	1a5b      	subs	r3, r3, r1
   bc372:	188c      	adds	r4, r1, r2
   bc374:	4416      	add	r6, r2
   bc376:	005b      	lsls	r3, r3, #1
   bc378:	f1be 0e01 	subs.w	lr, lr, #1
   bc37c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   bc380:	ea4f 0252 	mov.w	r2, r2, lsr #1
   bc384:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bc388:	d1ef      	bne.n	bc36a <__ieee754_sqrt+0x52>
   bc38a:	4675      	mov	r5, lr
   bc38c:	2020      	movs	r0, #32
   bc38e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   bc392:	e00a      	b.n	bc3aa <__ieee754_sqrt+0x92>
   bc394:	d044      	beq.n	bc420 <__ieee754_sqrt+0x108>
   bc396:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   bc39a:	3801      	subs	r0, #1
   bc39c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   bc3a0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bc3a4:	ea4f 0252 	mov.w	r2, r2, lsr #1
   bc3a8:	d043      	beq.n	bc432 <__ieee754_sqrt+0x11a>
   bc3aa:	42a3      	cmp	r3, r4
   bc3ac:	eb02 010e 	add.w	r1, r2, lr
   bc3b0:	ddf0      	ble.n	bc394 <__ieee754_sqrt+0x7c>
   bc3b2:	2900      	cmp	r1, #0
   bc3b4:	eb01 0e02 	add.w	lr, r1, r2
   bc3b8:	db0a      	blt.n	bc3d0 <__ieee754_sqrt+0xb8>
   bc3ba:	46a0      	mov	r8, r4
   bc3bc:	1b1b      	subs	r3, r3, r4
   bc3be:	4561      	cmp	r1, ip
   bc3c0:	bf88      	it	hi
   bc3c2:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   bc3c6:	ebac 0c01 	sub.w	ip, ip, r1
   bc3ca:	4415      	add	r5, r2
   bc3cc:	4644      	mov	r4, r8
   bc3ce:	e7e2      	b.n	bc396 <__ieee754_sqrt+0x7e>
   bc3d0:	f1be 0f00 	cmp.w	lr, #0
   bc3d4:	dbf1      	blt.n	bc3ba <__ieee754_sqrt+0xa2>
   bc3d6:	f104 0801 	add.w	r8, r4, #1
   bc3da:	e7ef      	b.n	bc3bc <__ieee754_sqrt+0xa4>
   bc3dc:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   bc3e0:	4322      	orrs	r2, r4
   bc3e2:	d038      	beq.n	bc456 <__ieee754_sqrt+0x13e>
   bc3e4:	2d00      	cmp	r5, #0
   bc3e6:	d14e      	bne.n	bc486 <__ieee754_sqrt+0x16e>
   bc3e8:	4629      	mov	r1, r5
   bc3ea:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   bc3ee:	3915      	subs	r1, #21
   bc3f0:	4613      	mov	r3, r2
   bc3f2:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   bc3f6:	2a00      	cmp	r2, #0
   bc3f8:	d0f7      	beq.n	bc3ea <__ieee754_sqrt+0xd2>
   bc3fa:	02d6      	lsls	r6, r2, #11
   bc3fc:	d450      	bmi.n	bc4a0 <__ieee754_sqrt+0x188>
   bc3fe:	2000      	movs	r0, #0
   bc400:	005b      	lsls	r3, r3, #1
   bc402:	02dd      	lsls	r5, r3, #11
   bc404:	4604      	mov	r4, r0
   bc406:	f100 0001 	add.w	r0, r0, #1
   bc40a:	d5f9      	bpl.n	bc400 <__ieee754_sqrt+0xe8>
   bc40c:	461a      	mov	r2, r3
   bc40e:	4663      	mov	r3, ip
   bc410:	fa0c fc00 	lsl.w	ip, ip, r0
   bc414:	f1c0 0020 	rsb	r0, r0, #32
   bc418:	40c3      	lsrs	r3, r0
   bc41a:	1b09      	subs	r1, r1, r4
   bc41c:	4313      	orrs	r3, r2
   bc41e:	e78a      	b.n	bc336 <__ieee754_sqrt+0x1e>
   bc420:	4561      	cmp	r1, ip
   bc422:	d8b8      	bhi.n	bc396 <__ieee754_sqrt+0x7e>
   bc424:	2900      	cmp	r1, #0
   bc426:	eb01 0e02 	add.w	lr, r1, r2
   bc42a:	dbd1      	blt.n	bc3d0 <__ieee754_sqrt+0xb8>
   bc42c:	4698      	mov	r8, r3
   bc42e:	2300      	movs	r3, #0
   bc430:	e7c9      	b.n	bc3c6 <__ieee754_sqrt+0xae>
   bc432:	ea53 030c 	orrs.w	r3, r3, ip
   bc436:	d110      	bne.n	bc45a <__ieee754_sqrt+0x142>
   bc438:	0868      	lsrs	r0, r5, #1
   bc43a:	1071      	asrs	r1, r6, #1
   bc43c:	07f3      	lsls	r3, r6, #31
   bc43e:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   bc442:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   bc446:	bf48      	it	mi
   bc448:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   bc44c:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   bc450:	4602      	mov	r2, r0
   bc452:	ec43 2b10 	vmov	d0, r2, r3
   bc456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc45a:	1c6a      	adds	r2, r5, #1
   bc45c:	bf16      	itet	ne
   bc45e:	1c68      	addne	r0, r5, #1
   bc460:	3601      	addeq	r6, #1
   bc462:	0840      	lsrne	r0, r0, #1
   bc464:	e7e9      	b.n	bc43a <__ieee754_sqrt+0x122>
   bc466:	ee10 2a10 	vmov	r2, s0
   bc46a:	ee10 0a10 	vmov	r0, s0
   bc46e:	462b      	mov	r3, r5
   bc470:	4629      	mov	r1, r5
   bc472:	f000 f9d9 	bl	bc828 <__aeabi_dmul>
   bc476:	4622      	mov	r2, r4
   bc478:	462b      	mov	r3, r5
   bc47a:	f000 f81f 	bl	bc4bc <__adddf3>
   bc47e:	ec41 0b10 	vmov	d0, r0, r1
   bc482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc486:	ee10 2a10 	vmov	r2, s0
   bc48a:	4620      	mov	r0, r4
   bc48c:	4629      	mov	r1, r5
   bc48e:	f000 f813 	bl	bc4b8 <__aeabi_dsub>
   bc492:	4602      	mov	r2, r0
   bc494:	460b      	mov	r3, r1
   bc496:	f000 faf1 	bl	bca7c <__aeabi_ddiv>
   bc49a:	ec41 0b10 	vmov	d0, r0, r1
   bc49e:	e7da      	b.n	bc456 <__ieee754_sqrt+0x13e>
   bc4a0:	4663      	mov	r3, ip
   bc4a2:	2020      	movs	r0, #32
   bc4a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   bc4a8:	e7b6      	b.n	bc418 <__ieee754_sqrt+0x100>
   bc4aa:	bf00      	nop
   bc4ac:	7ff00000 	.word	0x7ff00000

000bc4b0 <__aeabi_drsub>:
   bc4b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bc4b4:	e002      	b.n	bc4bc <__adddf3>
   bc4b6:	bf00      	nop

000bc4b8 <__aeabi_dsub>:
   bc4b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bc4bc <__adddf3>:
   bc4bc:	b530      	push	{r4, r5, lr}
   bc4be:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bc4c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bc4c6:	ea94 0f05 	teq	r4, r5
   bc4ca:	bf08      	it	eq
   bc4cc:	ea90 0f02 	teqeq	r0, r2
   bc4d0:	bf1f      	itttt	ne
   bc4d2:	ea54 0c00 	orrsne.w	ip, r4, r0
   bc4d6:	ea55 0c02 	orrsne.w	ip, r5, r2
   bc4da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bc4de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bc4e2:	f000 80e2 	beq.w	bc6aa <__adddf3+0x1ee>
   bc4e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bc4ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bc4ee:	bfb8      	it	lt
   bc4f0:	426d      	neglt	r5, r5
   bc4f2:	dd0c      	ble.n	bc50e <__adddf3+0x52>
   bc4f4:	442c      	add	r4, r5
   bc4f6:	ea80 0202 	eor.w	r2, r0, r2
   bc4fa:	ea81 0303 	eor.w	r3, r1, r3
   bc4fe:	ea82 0000 	eor.w	r0, r2, r0
   bc502:	ea83 0101 	eor.w	r1, r3, r1
   bc506:	ea80 0202 	eor.w	r2, r0, r2
   bc50a:	ea81 0303 	eor.w	r3, r1, r3
   bc50e:	2d36      	cmp	r5, #54	; 0x36
   bc510:	bf88      	it	hi
   bc512:	bd30      	pophi	{r4, r5, pc}
   bc514:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bc518:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bc51c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bc520:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bc524:	d002      	beq.n	bc52c <__adddf3+0x70>
   bc526:	4240      	negs	r0, r0
   bc528:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bc52c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bc530:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bc534:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bc538:	d002      	beq.n	bc540 <__adddf3+0x84>
   bc53a:	4252      	negs	r2, r2
   bc53c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bc540:	ea94 0f05 	teq	r4, r5
   bc544:	f000 80a7 	beq.w	bc696 <__adddf3+0x1da>
   bc548:	f1a4 0401 	sub.w	r4, r4, #1
   bc54c:	f1d5 0e20 	rsbs	lr, r5, #32
   bc550:	db0d      	blt.n	bc56e <__adddf3+0xb2>
   bc552:	fa02 fc0e 	lsl.w	ip, r2, lr
   bc556:	fa22 f205 	lsr.w	r2, r2, r5
   bc55a:	1880      	adds	r0, r0, r2
   bc55c:	f141 0100 	adc.w	r1, r1, #0
   bc560:	fa03 f20e 	lsl.w	r2, r3, lr
   bc564:	1880      	adds	r0, r0, r2
   bc566:	fa43 f305 	asr.w	r3, r3, r5
   bc56a:	4159      	adcs	r1, r3
   bc56c:	e00e      	b.n	bc58c <__adddf3+0xd0>
   bc56e:	f1a5 0520 	sub.w	r5, r5, #32
   bc572:	f10e 0e20 	add.w	lr, lr, #32
   bc576:	2a01      	cmp	r2, #1
   bc578:	fa03 fc0e 	lsl.w	ip, r3, lr
   bc57c:	bf28      	it	cs
   bc57e:	f04c 0c02 	orrcs.w	ip, ip, #2
   bc582:	fa43 f305 	asr.w	r3, r3, r5
   bc586:	18c0      	adds	r0, r0, r3
   bc588:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bc58c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bc590:	d507      	bpl.n	bc5a2 <__adddf3+0xe6>
   bc592:	f04f 0e00 	mov.w	lr, #0
   bc596:	f1dc 0c00 	rsbs	ip, ip, #0
   bc59a:	eb7e 0000 	sbcs.w	r0, lr, r0
   bc59e:	eb6e 0101 	sbc.w	r1, lr, r1
   bc5a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bc5a6:	d31b      	bcc.n	bc5e0 <__adddf3+0x124>
   bc5a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bc5ac:	d30c      	bcc.n	bc5c8 <__adddf3+0x10c>
   bc5ae:	0849      	lsrs	r1, r1, #1
   bc5b0:	ea5f 0030 	movs.w	r0, r0, rrx
   bc5b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bc5b8:	f104 0401 	add.w	r4, r4, #1
   bc5bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bc5c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bc5c4:	f080 809a 	bcs.w	bc6fc <__adddf3+0x240>
   bc5c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bc5cc:	bf08      	it	eq
   bc5ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bc5d2:	f150 0000 	adcs.w	r0, r0, #0
   bc5d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bc5da:	ea41 0105 	orr.w	r1, r1, r5
   bc5de:	bd30      	pop	{r4, r5, pc}
   bc5e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bc5e4:	4140      	adcs	r0, r0
   bc5e6:	eb41 0101 	adc.w	r1, r1, r1
   bc5ea:	3c01      	subs	r4, #1
   bc5ec:	bf28      	it	cs
   bc5ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bc5f2:	d2e9      	bcs.n	bc5c8 <__adddf3+0x10c>
   bc5f4:	f091 0f00 	teq	r1, #0
   bc5f8:	bf04      	itt	eq
   bc5fa:	4601      	moveq	r1, r0
   bc5fc:	2000      	moveq	r0, #0
   bc5fe:	fab1 f381 	clz	r3, r1
   bc602:	bf08      	it	eq
   bc604:	3320      	addeq	r3, #32
   bc606:	f1a3 030b 	sub.w	r3, r3, #11
   bc60a:	f1b3 0220 	subs.w	r2, r3, #32
   bc60e:	da0c      	bge.n	bc62a <__adddf3+0x16e>
   bc610:	320c      	adds	r2, #12
   bc612:	dd08      	ble.n	bc626 <__adddf3+0x16a>
   bc614:	f102 0c14 	add.w	ip, r2, #20
   bc618:	f1c2 020c 	rsb	r2, r2, #12
   bc61c:	fa01 f00c 	lsl.w	r0, r1, ip
   bc620:	fa21 f102 	lsr.w	r1, r1, r2
   bc624:	e00c      	b.n	bc640 <__adddf3+0x184>
   bc626:	f102 0214 	add.w	r2, r2, #20
   bc62a:	bfd8      	it	le
   bc62c:	f1c2 0c20 	rsble	ip, r2, #32
   bc630:	fa01 f102 	lsl.w	r1, r1, r2
   bc634:	fa20 fc0c 	lsr.w	ip, r0, ip
   bc638:	bfdc      	itt	le
   bc63a:	ea41 010c 	orrle.w	r1, r1, ip
   bc63e:	4090      	lslle	r0, r2
   bc640:	1ae4      	subs	r4, r4, r3
   bc642:	bfa2      	ittt	ge
   bc644:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bc648:	4329      	orrge	r1, r5
   bc64a:	bd30      	popge	{r4, r5, pc}
   bc64c:	ea6f 0404 	mvn.w	r4, r4
   bc650:	3c1f      	subs	r4, #31
   bc652:	da1c      	bge.n	bc68e <__adddf3+0x1d2>
   bc654:	340c      	adds	r4, #12
   bc656:	dc0e      	bgt.n	bc676 <__adddf3+0x1ba>
   bc658:	f104 0414 	add.w	r4, r4, #20
   bc65c:	f1c4 0220 	rsb	r2, r4, #32
   bc660:	fa20 f004 	lsr.w	r0, r0, r4
   bc664:	fa01 f302 	lsl.w	r3, r1, r2
   bc668:	ea40 0003 	orr.w	r0, r0, r3
   bc66c:	fa21 f304 	lsr.w	r3, r1, r4
   bc670:	ea45 0103 	orr.w	r1, r5, r3
   bc674:	bd30      	pop	{r4, r5, pc}
   bc676:	f1c4 040c 	rsb	r4, r4, #12
   bc67a:	f1c4 0220 	rsb	r2, r4, #32
   bc67e:	fa20 f002 	lsr.w	r0, r0, r2
   bc682:	fa01 f304 	lsl.w	r3, r1, r4
   bc686:	ea40 0003 	orr.w	r0, r0, r3
   bc68a:	4629      	mov	r1, r5
   bc68c:	bd30      	pop	{r4, r5, pc}
   bc68e:	fa21 f004 	lsr.w	r0, r1, r4
   bc692:	4629      	mov	r1, r5
   bc694:	bd30      	pop	{r4, r5, pc}
   bc696:	f094 0f00 	teq	r4, #0
   bc69a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bc69e:	bf06      	itte	eq
   bc6a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bc6a4:	3401      	addeq	r4, #1
   bc6a6:	3d01      	subne	r5, #1
   bc6a8:	e74e      	b.n	bc548 <__adddf3+0x8c>
   bc6aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bc6ae:	bf18      	it	ne
   bc6b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bc6b4:	d029      	beq.n	bc70a <__adddf3+0x24e>
   bc6b6:	ea94 0f05 	teq	r4, r5
   bc6ba:	bf08      	it	eq
   bc6bc:	ea90 0f02 	teqeq	r0, r2
   bc6c0:	d005      	beq.n	bc6ce <__adddf3+0x212>
   bc6c2:	ea54 0c00 	orrs.w	ip, r4, r0
   bc6c6:	bf04      	itt	eq
   bc6c8:	4619      	moveq	r1, r3
   bc6ca:	4610      	moveq	r0, r2
   bc6cc:	bd30      	pop	{r4, r5, pc}
   bc6ce:	ea91 0f03 	teq	r1, r3
   bc6d2:	bf1e      	ittt	ne
   bc6d4:	2100      	movne	r1, #0
   bc6d6:	2000      	movne	r0, #0
   bc6d8:	bd30      	popne	{r4, r5, pc}
   bc6da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bc6de:	d105      	bne.n	bc6ec <__adddf3+0x230>
   bc6e0:	0040      	lsls	r0, r0, #1
   bc6e2:	4149      	adcs	r1, r1
   bc6e4:	bf28      	it	cs
   bc6e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bc6ea:	bd30      	pop	{r4, r5, pc}
   bc6ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bc6f0:	bf3c      	itt	cc
   bc6f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bc6f6:	bd30      	popcc	{r4, r5, pc}
   bc6f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bc6fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bc700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bc704:	f04f 0000 	mov.w	r0, #0
   bc708:	bd30      	pop	{r4, r5, pc}
   bc70a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bc70e:	bf1a      	itte	ne
   bc710:	4619      	movne	r1, r3
   bc712:	4610      	movne	r0, r2
   bc714:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bc718:	bf1c      	itt	ne
   bc71a:	460b      	movne	r3, r1
   bc71c:	4602      	movne	r2, r0
   bc71e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bc722:	bf06      	itte	eq
   bc724:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bc728:	ea91 0f03 	teqeq	r1, r3
   bc72c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bc730:	bd30      	pop	{r4, r5, pc}
   bc732:	bf00      	nop

000bc734 <__aeabi_ui2d>:
   bc734:	f090 0f00 	teq	r0, #0
   bc738:	bf04      	itt	eq
   bc73a:	2100      	moveq	r1, #0
   bc73c:	4770      	bxeq	lr
   bc73e:	b530      	push	{r4, r5, lr}
   bc740:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bc744:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bc748:	f04f 0500 	mov.w	r5, #0
   bc74c:	f04f 0100 	mov.w	r1, #0
   bc750:	e750      	b.n	bc5f4 <__adddf3+0x138>
   bc752:	bf00      	nop

000bc754 <__aeabi_i2d>:
   bc754:	f090 0f00 	teq	r0, #0
   bc758:	bf04      	itt	eq
   bc75a:	2100      	moveq	r1, #0
   bc75c:	4770      	bxeq	lr
   bc75e:	b530      	push	{r4, r5, lr}
   bc760:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bc764:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bc768:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bc76c:	bf48      	it	mi
   bc76e:	4240      	negmi	r0, r0
   bc770:	f04f 0100 	mov.w	r1, #0
   bc774:	e73e      	b.n	bc5f4 <__adddf3+0x138>
   bc776:	bf00      	nop

000bc778 <__aeabi_f2d>:
   bc778:	0042      	lsls	r2, r0, #1
   bc77a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bc77e:	ea4f 0131 	mov.w	r1, r1, rrx
   bc782:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bc786:	bf1f      	itttt	ne
   bc788:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bc78c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bc790:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bc794:	4770      	bxne	lr
   bc796:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bc79a:	bf08      	it	eq
   bc79c:	4770      	bxeq	lr
   bc79e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bc7a2:	bf04      	itt	eq
   bc7a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bc7a8:	4770      	bxeq	lr
   bc7aa:	b530      	push	{r4, r5, lr}
   bc7ac:	f44f 7460 	mov.w	r4, #896	; 0x380
   bc7b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bc7b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bc7b8:	e71c      	b.n	bc5f4 <__adddf3+0x138>
   bc7ba:	bf00      	nop

000bc7bc <__aeabi_ul2d>:
   bc7bc:	ea50 0201 	orrs.w	r2, r0, r1
   bc7c0:	bf08      	it	eq
   bc7c2:	4770      	bxeq	lr
   bc7c4:	b530      	push	{r4, r5, lr}
   bc7c6:	f04f 0500 	mov.w	r5, #0
   bc7ca:	e00a      	b.n	bc7e2 <__aeabi_l2d+0x16>

000bc7cc <__aeabi_l2d>:
   bc7cc:	ea50 0201 	orrs.w	r2, r0, r1
   bc7d0:	bf08      	it	eq
   bc7d2:	4770      	bxeq	lr
   bc7d4:	b530      	push	{r4, r5, lr}
   bc7d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bc7da:	d502      	bpl.n	bc7e2 <__aeabi_l2d+0x16>
   bc7dc:	4240      	negs	r0, r0
   bc7de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bc7e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bc7e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bc7ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bc7ee:	f43f aed8 	beq.w	bc5a2 <__adddf3+0xe6>
   bc7f2:	f04f 0203 	mov.w	r2, #3
   bc7f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bc7fa:	bf18      	it	ne
   bc7fc:	3203      	addne	r2, #3
   bc7fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bc802:	bf18      	it	ne
   bc804:	3203      	addne	r2, #3
   bc806:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bc80a:	f1c2 0320 	rsb	r3, r2, #32
   bc80e:	fa00 fc03 	lsl.w	ip, r0, r3
   bc812:	fa20 f002 	lsr.w	r0, r0, r2
   bc816:	fa01 fe03 	lsl.w	lr, r1, r3
   bc81a:	ea40 000e 	orr.w	r0, r0, lr
   bc81e:	fa21 f102 	lsr.w	r1, r1, r2
   bc822:	4414      	add	r4, r2
   bc824:	e6bd      	b.n	bc5a2 <__adddf3+0xe6>
   bc826:	bf00      	nop

000bc828 <__aeabi_dmul>:
   bc828:	b570      	push	{r4, r5, r6, lr}
   bc82a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bc82e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bc832:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bc836:	bf1d      	ittte	ne
   bc838:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bc83c:	ea94 0f0c 	teqne	r4, ip
   bc840:	ea95 0f0c 	teqne	r5, ip
   bc844:	f000 f8de 	bleq	bca04 <__aeabi_dmul+0x1dc>
   bc848:	442c      	add	r4, r5
   bc84a:	ea81 0603 	eor.w	r6, r1, r3
   bc84e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bc852:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bc856:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bc85a:	bf18      	it	ne
   bc85c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bc860:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bc864:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bc868:	d038      	beq.n	bc8dc <__aeabi_dmul+0xb4>
   bc86a:	fba0 ce02 	umull	ip, lr, r0, r2
   bc86e:	f04f 0500 	mov.w	r5, #0
   bc872:	fbe1 e502 	umlal	lr, r5, r1, r2
   bc876:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bc87a:	fbe0 e503 	umlal	lr, r5, r0, r3
   bc87e:	f04f 0600 	mov.w	r6, #0
   bc882:	fbe1 5603 	umlal	r5, r6, r1, r3
   bc886:	f09c 0f00 	teq	ip, #0
   bc88a:	bf18      	it	ne
   bc88c:	f04e 0e01 	orrne.w	lr, lr, #1
   bc890:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bc894:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bc898:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bc89c:	d204      	bcs.n	bc8a8 <__aeabi_dmul+0x80>
   bc89e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bc8a2:	416d      	adcs	r5, r5
   bc8a4:	eb46 0606 	adc.w	r6, r6, r6
   bc8a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bc8ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bc8b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bc8b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bc8b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bc8bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bc8c0:	bf88      	it	hi
   bc8c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bc8c6:	d81e      	bhi.n	bc906 <__aeabi_dmul+0xde>
   bc8c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bc8cc:	bf08      	it	eq
   bc8ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bc8d2:	f150 0000 	adcs.w	r0, r0, #0
   bc8d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bc8da:	bd70      	pop	{r4, r5, r6, pc}
   bc8dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bc8e0:	ea46 0101 	orr.w	r1, r6, r1
   bc8e4:	ea40 0002 	orr.w	r0, r0, r2
   bc8e8:	ea81 0103 	eor.w	r1, r1, r3
   bc8ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bc8f0:	bfc2      	ittt	gt
   bc8f2:	ebd4 050c 	rsbsgt	r5, r4, ip
   bc8f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bc8fa:	bd70      	popgt	{r4, r5, r6, pc}
   bc8fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bc900:	f04f 0e00 	mov.w	lr, #0
   bc904:	3c01      	subs	r4, #1
   bc906:	f300 80ab 	bgt.w	bca60 <__aeabi_dmul+0x238>
   bc90a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bc90e:	bfde      	ittt	le
   bc910:	2000      	movle	r0, #0
   bc912:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bc916:	bd70      	pople	{r4, r5, r6, pc}
   bc918:	f1c4 0400 	rsb	r4, r4, #0
   bc91c:	3c20      	subs	r4, #32
   bc91e:	da35      	bge.n	bc98c <__aeabi_dmul+0x164>
   bc920:	340c      	adds	r4, #12
   bc922:	dc1b      	bgt.n	bc95c <__aeabi_dmul+0x134>
   bc924:	f104 0414 	add.w	r4, r4, #20
   bc928:	f1c4 0520 	rsb	r5, r4, #32
   bc92c:	fa00 f305 	lsl.w	r3, r0, r5
   bc930:	fa20 f004 	lsr.w	r0, r0, r4
   bc934:	fa01 f205 	lsl.w	r2, r1, r5
   bc938:	ea40 0002 	orr.w	r0, r0, r2
   bc93c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bc940:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bc944:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bc948:	fa21 f604 	lsr.w	r6, r1, r4
   bc94c:	eb42 0106 	adc.w	r1, r2, r6
   bc950:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bc954:	bf08      	it	eq
   bc956:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bc95a:	bd70      	pop	{r4, r5, r6, pc}
   bc95c:	f1c4 040c 	rsb	r4, r4, #12
   bc960:	f1c4 0520 	rsb	r5, r4, #32
   bc964:	fa00 f304 	lsl.w	r3, r0, r4
   bc968:	fa20 f005 	lsr.w	r0, r0, r5
   bc96c:	fa01 f204 	lsl.w	r2, r1, r4
   bc970:	ea40 0002 	orr.w	r0, r0, r2
   bc974:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bc978:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bc97c:	f141 0100 	adc.w	r1, r1, #0
   bc980:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bc984:	bf08      	it	eq
   bc986:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bc98a:	bd70      	pop	{r4, r5, r6, pc}
   bc98c:	f1c4 0520 	rsb	r5, r4, #32
   bc990:	fa00 f205 	lsl.w	r2, r0, r5
   bc994:	ea4e 0e02 	orr.w	lr, lr, r2
   bc998:	fa20 f304 	lsr.w	r3, r0, r4
   bc99c:	fa01 f205 	lsl.w	r2, r1, r5
   bc9a0:	ea43 0302 	orr.w	r3, r3, r2
   bc9a4:	fa21 f004 	lsr.w	r0, r1, r4
   bc9a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bc9ac:	fa21 f204 	lsr.w	r2, r1, r4
   bc9b0:	ea20 0002 	bic.w	r0, r0, r2
   bc9b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bc9b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bc9bc:	bf08      	it	eq
   bc9be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bc9c2:	bd70      	pop	{r4, r5, r6, pc}
   bc9c4:	f094 0f00 	teq	r4, #0
   bc9c8:	d10f      	bne.n	bc9ea <__aeabi_dmul+0x1c2>
   bc9ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bc9ce:	0040      	lsls	r0, r0, #1
   bc9d0:	eb41 0101 	adc.w	r1, r1, r1
   bc9d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bc9d8:	bf08      	it	eq
   bc9da:	3c01      	subeq	r4, #1
   bc9dc:	d0f7      	beq.n	bc9ce <__aeabi_dmul+0x1a6>
   bc9de:	ea41 0106 	orr.w	r1, r1, r6
   bc9e2:	f095 0f00 	teq	r5, #0
   bc9e6:	bf18      	it	ne
   bc9e8:	4770      	bxne	lr
   bc9ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bc9ee:	0052      	lsls	r2, r2, #1
   bc9f0:	eb43 0303 	adc.w	r3, r3, r3
   bc9f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bc9f8:	bf08      	it	eq
   bc9fa:	3d01      	subeq	r5, #1
   bc9fc:	d0f7      	beq.n	bc9ee <__aeabi_dmul+0x1c6>
   bc9fe:	ea43 0306 	orr.w	r3, r3, r6
   bca02:	4770      	bx	lr
   bca04:	ea94 0f0c 	teq	r4, ip
   bca08:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bca0c:	bf18      	it	ne
   bca0e:	ea95 0f0c 	teqne	r5, ip
   bca12:	d00c      	beq.n	bca2e <__aeabi_dmul+0x206>
   bca14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bca18:	bf18      	it	ne
   bca1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bca1e:	d1d1      	bne.n	bc9c4 <__aeabi_dmul+0x19c>
   bca20:	ea81 0103 	eor.w	r1, r1, r3
   bca24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bca28:	f04f 0000 	mov.w	r0, #0
   bca2c:	bd70      	pop	{r4, r5, r6, pc}
   bca2e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bca32:	bf06      	itte	eq
   bca34:	4610      	moveq	r0, r2
   bca36:	4619      	moveq	r1, r3
   bca38:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bca3c:	d019      	beq.n	bca72 <__aeabi_dmul+0x24a>
   bca3e:	ea94 0f0c 	teq	r4, ip
   bca42:	d102      	bne.n	bca4a <__aeabi_dmul+0x222>
   bca44:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bca48:	d113      	bne.n	bca72 <__aeabi_dmul+0x24a>
   bca4a:	ea95 0f0c 	teq	r5, ip
   bca4e:	d105      	bne.n	bca5c <__aeabi_dmul+0x234>
   bca50:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bca54:	bf1c      	itt	ne
   bca56:	4610      	movne	r0, r2
   bca58:	4619      	movne	r1, r3
   bca5a:	d10a      	bne.n	bca72 <__aeabi_dmul+0x24a>
   bca5c:	ea81 0103 	eor.w	r1, r1, r3
   bca60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bca64:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bca68:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bca6c:	f04f 0000 	mov.w	r0, #0
   bca70:	bd70      	pop	{r4, r5, r6, pc}
   bca72:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bca76:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bca7a:	bd70      	pop	{r4, r5, r6, pc}

000bca7c <__aeabi_ddiv>:
   bca7c:	b570      	push	{r4, r5, r6, lr}
   bca7e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bca82:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bca86:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bca8a:	bf1d      	ittte	ne
   bca8c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bca90:	ea94 0f0c 	teqne	r4, ip
   bca94:	ea95 0f0c 	teqne	r5, ip
   bca98:	f000 f8a7 	bleq	bcbea <__aeabi_ddiv+0x16e>
   bca9c:	eba4 0405 	sub.w	r4, r4, r5
   bcaa0:	ea81 0e03 	eor.w	lr, r1, r3
   bcaa4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bcaa8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bcaac:	f000 8088 	beq.w	bcbc0 <__aeabi_ddiv+0x144>
   bcab0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bcab4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bcab8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bcabc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bcac0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bcac4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bcac8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bcacc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bcad0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bcad4:	429d      	cmp	r5, r3
   bcad6:	bf08      	it	eq
   bcad8:	4296      	cmpeq	r6, r2
   bcada:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bcade:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bcae2:	d202      	bcs.n	bcaea <__aeabi_ddiv+0x6e>
   bcae4:	085b      	lsrs	r3, r3, #1
   bcae6:	ea4f 0232 	mov.w	r2, r2, rrx
   bcaea:	1ab6      	subs	r6, r6, r2
   bcaec:	eb65 0503 	sbc.w	r5, r5, r3
   bcaf0:	085b      	lsrs	r3, r3, #1
   bcaf2:	ea4f 0232 	mov.w	r2, r2, rrx
   bcaf6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bcafa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bcafe:	ebb6 0e02 	subs.w	lr, r6, r2
   bcb02:	eb75 0e03 	sbcs.w	lr, r5, r3
   bcb06:	bf22      	ittt	cs
   bcb08:	1ab6      	subcs	r6, r6, r2
   bcb0a:	4675      	movcs	r5, lr
   bcb0c:	ea40 000c 	orrcs.w	r0, r0, ip
   bcb10:	085b      	lsrs	r3, r3, #1
   bcb12:	ea4f 0232 	mov.w	r2, r2, rrx
   bcb16:	ebb6 0e02 	subs.w	lr, r6, r2
   bcb1a:	eb75 0e03 	sbcs.w	lr, r5, r3
   bcb1e:	bf22      	ittt	cs
   bcb20:	1ab6      	subcs	r6, r6, r2
   bcb22:	4675      	movcs	r5, lr
   bcb24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bcb28:	085b      	lsrs	r3, r3, #1
   bcb2a:	ea4f 0232 	mov.w	r2, r2, rrx
   bcb2e:	ebb6 0e02 	subs.w	lr, r6, r2
   bcb32:	eb75 0e03 	sbcs.w	lr, r5, r3
   bcb36:	bf22      	ittt	cs
   bcb38:	1ab6      	subcs	r6, r6, r2
   bcb3a:	4675      	movcs	r5, lr
   bcb3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bcb40:	085b      	lsrs	r3, r3, #1
   bcb42:	ea4f 0232 	mov.w	r2, r2, rrx
   bcb46:	ebb6 0e02 	subs.w	lr, r6, r2
   bcb4a:	eb75 0e03 	sbcs.w	lr, r5, r3
   bcb4e:	bf22      	ittt	cs
   bcb50:	1ab6      	subcs	r6, r6, r2
   bcb52:	4675      	movcs	r5, lr
   bcb54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bcb58:	ea55 0e06 	orrs.w	lr, r5, r6
   bcb5c:	d018      	beq.n	bcb90 <__aeabi_ddiv+0x114>
   bcb5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bcb62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bcb66:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bcb6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bcb6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bcb72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bcb76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bcb7a:	d1c0      	bne.n	bcafe <__aeabi_ddiv+0x82>
   bcb7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bcb80:	d10b      	bne.n	bcb9a <__aeabi_ddiv+0x11e>
   bcb82:	ea41 0100 	orr.w	r1, r1, r0
   bcb86:	f04f 0000 	mov.w	r0, #0
   bcb8a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bcb8e:	e7b6      	b.n	bcafe <__aeabi_ddiv+0x82>
   bcb90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bcb94:	bf04      	itt	eq
   bcb96:	4301      	orreq	r1, r0
   bcb98:	2000      	moveq	r0, #0
   bcb9a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bcb9e:	bf88      	it	hi
   bcba0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bcba4:	f63f aeaf 	bhi.w	bc906 <__aeabi_dmul+0xde>
   bcba8:	ebb5 0c03 	subs.w	ip, r5, r3
   bcbac:	bf04      	itt	eq
   bcbae:	ebb6 0c02 	subseq.w	ip, r6, r2
   bcbb2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bcbb6:	f150 0000 	adcs.w	r0, r0, #0
   bcbba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bcbbe:	bd70      	pop	{r4, r5, r6, pc}
   bcbc0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bcbc4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bcbc8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bcbcc:	bfc2      	ittt	gt
   bcbce:	ebd4 050c 	rsbsgt	r5, r4, ip
   bcbd2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bcbd6:	bd70      	popgt	{r4, r5, r6, pc}
   bcbd8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bcbdc:	f04f 0e00 	mov.w	lr, #0
   bcbe0:	3c01      	subs	r4, #1
   bcbe2:	e690      	b.n	bc906 <__aeabi_dmul+0xde>
   bcbe4:	ea45 0e06 	orr.w	lr, r5, r6
   bcbe8:	e68d      	b.n	bc906 <__aeabi_dmul+0xde>
   bcbea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bcbee:	ea94 0f0c 	teq	r4, ip
   bcbf2:	bf08      	it	eq
   bcbf4:	ea95 0f0c 	teqeq	r5, ip
   bcbf8:	f43f af3b 	beq.w	bca72 <__aeabi_dmul+0x24a>
   bcbfc:	ea94 0f0c 	teq	r4, ip
   bcc00:	d10a      	bne.n	bcc18 <__aeabi_ddiv+0x19c>
   bcc02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bcc06:	f47f af34 	bne.w	bca72 <__aeabi_dmul+0x24a>
   bcc0a:	ea95 0f0c 	teq	r5, ip
   bcc0e:	f47f af25 	bne.w	bca5c <__aeabi_dmul+0x234>
   bcc12:	4610      	mov	r0, r2
   bcc14:	4619      	mov	r1, r3
   bcc16:	e72c      	b.n	bca72 <__aeabi_dmul+0x24a>
   bcc18:	ea95 0f0c 	teq	r5, ip
   bcc1c:	d106      	bne.n	bcc2c <__aeabi_ddiv+0x1b0>
   bcc1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bcc22:	f43f aefd 	beq.w	bca20 <__aeabi_dmul+0x1f8>
   bcc26:	4610      	mov	r0, r2
   bcc28:	4619      	mov	r1, r3
   bcc2a:	e722      	b.n	bca72 <__aeabi_dmul+0x24a>
   bcc2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bcc30:	bf18      	it	ne
   bcc32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bcc36:	f47f aec5 	bne.w	bc9c4 <__aeabi_dmul+0x19c>
   bcc3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bcc3e:	f47f af0d 	bne.w	bca5c <__aeabi_dmul+0x234>
   bcc42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bcc46:	f47f aeeb 	bne.w	bca20 <__aeabi_dmul+0x1f8>
   bcc4a:	e712      	b.n	bca72 <__aeabi_dmul+0x24a>

000bcc4c <__gedf2>:
   bcc4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bcc50:	e006      	b.n	bcc60 <__cmpdf2+0x4>
   bcc52:	bf00      	nop

000bcc54 <__ledf2>:
   bcc54:	f04f 0c01 	mov.w	ip, #1
   bcc58:	e002      	b.n	bcc60 <__cmpdf2+0x4>
   bcc5a:	bf00      	nop

000bcc5c <__cmpdf2>:
   bcc5c:	f04f 0c01 	mov.w	ip, #1
   bcc60:	f84d cd04 	str.w	ip, [sp, #-4]!
   bcc64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bcc68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bcc6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bcc70:	bf18      	it	ne
   bcc72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bcc76:	d01b      	beq.n	bccb0 <__cmpdf2+0x54>
   bcc78:	b001      	add	sp, #4
   bcc7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bcc7e:	bf0c      	ite	eq
   bcc80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bcc84:	ea91 0f03 	teqne	r1, r3
   bcc88:	bf02      	ittt	eq
   bcc8a:	ea90 0f02 	teqeq	r0, r2
   bcc8e:	2000      	moveq	r0, #0
   bcc90:	4770      	bxeq	lr
   bcc92:	f110 0f00 	cmn.w	r0, #0
   bcc96:	ea91 0f03 	teq	r1, r3
   bcc9a:	bf58      	it	pl
   bcc9c:	4299      	cmppl	r1, r3
   bcc9e:	bf08      	it	eq
   bcca0:	4290      	cmpeq	r0, r2
   bcca2:	bf2c      	ite	cs
   bcca4:	17d8      	asrcs	r0, r3, #31
   bcca6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bccaa:	f040 0001 	orr.w	r0, r0, #1
   bccae:	4770      	bx	lr
   bccb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bccb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bccb8:	d102      	bne.n	bccc0 <__cmpdf2+0x64>
   bccba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bccbe:	d107      	bne.n	bccd0 <__cmpdf2+0x74>
   bccc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bccc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bccc8:	d1d6      	bne.n	bcc78 <__cmpdf2+0x1c>
   bccca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bccce:	d0d3      	beq.n	bcc78 <__cmpdf2+0x1c>
   bccd0:	f85d 0b04 	ldr.w	r0, [sp], #4
   bccd4:	4770      	bx	lr
   bccd6:	bf00      	nop

000bccd8 <__aeabi_cdrcmple>:
   bccd8:	4684      	mov	ip, r0
   bccda:	4610      	mov	r0, r2
   bccdc:	4662      	mov	r2, ip
   bccde:	468c      	mov	ip, r1
   bcce0:	4619      	mov	r1, r3
   bcce2:	4663      	mov	r3, ip
   bcce4:	e000      	b.n	bcce8 <__aeabi_cdcmpeq>
   bcce6:	bf00      	nop

000bcce8 <__aeabi_cdcmpeq>:
   bcce8:	b501      	push	{r0, lr}
   bccea:	f7ff ffb7 	bl	bcc5c <__cmpdf2>
   bccee:	2800      	cmp	r0, #0
   bccf0:	bf48      	it	mi
   bccf2:	f110 0f00 	cmnmi.w	r0, #0
   bccf6:	bd01      	pop	{r0, pc}

000bccf8 <__aeabi_dcmpeq>:
   bccf8:	f84d ed08 	str.w	lr, [sp, #-8]!
   bccfc:	f7ff fff4 	bl	bcce8 <__aeabi_cdcmpeq>
   bcd00:	bf0c      	ite	eq
   bcd02:	2001      	moveq	r0, #1
   bcd04:	2000      	movne	r0, #0
   bcd06:	f85d fb08 	ldr.w	pc, [sp], #8
   bcd0a:	bf00      	nop

000bcd0c <__aeabi_dcmplt>:
   bcd0c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bcd10:	f7ff ffea 	bl	bcce8 <__aeabi_cdcmpeq>
   bcd14:	bf34      	ite	cc
   bcd16:	2001      	movcc	r0, #1
   bcd18:	2000      	movcs	r0, #0
   bcd1a:	f85d fb08 	ldr.w	pc, [sp], #8
   bcd1e:	bf00      	nop

000bcd20 <__aeabi_dcmple>:
   bcd20:	f84d ed08 	str.w	lr, [sp, #-8]!
   bcd24:	f7ff ffe0 	bl	bcce8 <__aeabi_cdcmpeq>
   bcd28:	bf94      	ite	ls
   bcd2a:	2001      	movls	r0, #1
   bcd2c:	2000      	movhi	r0, #0
   bcd2e:	f85d fb08 	ldr.w	pc, [sp], #8
   bcd32:	bf00      	nop

000bcd34 <__aeabi_dcmpge>:
   bcd34:	f84d ed08 	str.w	lr, [sp, #-8]!
   bcd38:	f7ff ffce 	bl	bccd8 <__aeabi_cdrcmple>
   bcd3c:	bf94      	ite	ls
   bcd3e:	2001      	movls	r0, #1
   bcd40:	2000      	movhi	r0, #0
   bcd42:	f85d fb08 	ldr.w	pc, [sp], #8
   bcd46:	bf00      	nop

000bcd48 <__aeabi_dcmpgt>:
   bcd48:	f84d ed08 	str.w	lr, [sp, #-8]!
   bcd4c:	f7ff ffc4 	bl	bccd8 <__aeabi_cdrcmple>
   bcd50:	bf34      	ite	cc
   bcd52:	2001      	movcc	r0, #1
   bcd54:	2000      	movcs	r0, #0
   bcd56:	f85d fb08 	ldr.w	pc, [sp], #8
   bcd5a:	bf00      	nop

000bcd5c <__aeabi_dcmpun>:
   bcd5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bcd60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bcd64:	d102      	bne.n	bcd6c <__aeabi_dcmpun+0x10>
   bcd66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bcd6a:	d10a      	bne.n	bcd82 <__aeabi_dcmpun+0x26>
   bcd6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bcd70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bcd74:	d102      	bne.n	bcd7c <__aeabi_dcmpun+0x20>
   bcd76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bcd7a:	d102      	bne.n	bcd82 <__aeabi_dcmpun+0x26>
   bcd7c:	f04f 0000 	mov.w	r0, #0
   bcd80:	4770      	bx	lr
   bcd82:	f04f 0001 	mov.w	r0, #1
   bcd86:	4770      	bx	lr

000bcd88 <__aeabi_d2uiz>:
   bcd88:	004a      	lsls	r2, r1, #1
   bcd8a:	d211      	bcs.n	bcdb0 <__aeabi_d2uiz+0x28>
   bcd8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bcd90:	d211      	bcs.n	bcdb6 <__aeabi_d2uiz+0x2e>
   bcd92:	d50d      	bpl.n	bcdb0 <__aeabi_d2uiz+0x28>
   bcd94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bcd98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bcd9c:	d40e      	bmi.n	bcdbc <__aeabi_d2uiz+0x34>
   bcd9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bcda2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bcda6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bcdaa:	fa23 f002 	lsr.w	r0, r3, r2
   bcdae:	4770      	bx	lr
   bcdb0:	f04f 0000 	mov.w	r0, #0
   bcdb4:	4770      	bx	lr
   bcdb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bcdba:	d102      	bne.n	bcdc2 <__aeabi_d2uiz+0x3a>
   bcdbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bcdc0:	4770      	bx	lr
   bcdc2:	f04f 0000 	mov.w	r0, #0
   bcdc6:	4770      	bx	lr

000bcdc8 <__aeabi_d2f>:
   bcdc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bcdcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bcdd0:	bf24      	itt	cs
   bcdd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bcdd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bcdda:	d90d      	bls.n	bcdf8 <__aeabi_d2f+0x30>
   bcddc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bcde0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bcde4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bcde8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bcdec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bcdf0:	bf08      	it	eq
   bcdf2:	f020 0001 	biceq.w	r0, r0, #1
   bcdf6:	4770      	bx	lr
   bcdf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bcdfc:	d121      	bne.n	bce42 <__aeabi_d2f+0x7a>
   bcdfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bce02:	bfbc      	itt	lt
   bce04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bce08:	4770      	bxlt	lr
   bce0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bce0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bce12:	f1c2 0218 	rsb	r2, r2, #24
   bce16:	f1c2 0c20 	rsb	ip, r2, #32
   bce1a:	fa10 f30c 	lsls.w	r3, r0, ip
   bce1e:	fa20 f002 	lsr.w	r0, r0, r2
   bce22:	bf18      	it	ne
   bce24:	f040 0001 	orrne.w	r0, r0, #1
   bce28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bce2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bce30:	fa03 fc0c 	lsl.w	ip, r3, ip
   bce34:	ea40 000c 	orr.w	r0, r0, ip
   bce38:	fa23 f302 	lsr.w	r3, r3, r2
   bce3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bce40:	e7cc      	b.n	bcddc <__aeabi_d2f+0x14>
   bce42:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bce46:	d107      	bne.n	bce58 <__aeabi_d2f+0x90>
   bce48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bce4c:	bf1e      	ittt	ne
   bce4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bce52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bce56:	4770      	bxne	lr
   bce58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bce5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bce60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bce64:	4770      	bx	lr
   bce66:	bf00      	nop

000bce68 <__aeabi_d2ulz>:
   bce68:	b5d0      	push	{r4, r6, r7, lr}
   bce6a:	4b0c      	ldr	r3, [pc, #48]	; (bce9c <__aeabi_d2ulz+0x34>)
   bce6c:	2200      	movs	r2, #0
   bce6e:	4606      	mov	r6, r0
   bce70:	460f      	mov	r7, r1
   bce72:	f7ff fcd9 	bl	bc828 <__aeabi_dmul>
   bce76:	f7ff ff87 	bl	bcd88 <__aeabi_d2uiz>
   bce7a:	4604      	mov	r4, r0
   bce7c:	f7ff fc5a 	bl	bc734 <__aeabi_ui2d>
   bce80:	4b07      	ldr	r3, [pc, #28]	; (bcea0 <__aeabi_d2ulz+0x38>)
   bce82:	2200      	movs	r2, #0
   bce84:	f7ff fcd0 	bl	bc828 <__aeabi_dmul>
   bce88:	4602      	mov	r2, r0
   bce8a:	460b      	mov	r3, r1
   bce8c:	4630      	mov	r0, r6
   bce8e:	4639      	mov	r1, r7
   bce90:	f7ff fb12 	bl	bc4b8 <__aeabi_dsub>
   bce94:	f7ff ff78 	bl	bcd88 <__aeabi_d2uiz>
   bce98:	4621      	mov	r1, r4
   bce9a:	bdd0      	pop	{r4, r6, r7, pc}
   bce9c:	3df00000 	.word	0x3df00000
   bcea0:	41f00000 	.word	0x41f00000

000bcea4 <atexit>:
   bcea4:	2300      	movs	r3, #0
   bcea6:	4601      	mov	r1, r0
   bcea8:	461a      	mov	r2, r3
   bceaa:	4618      	mov	r0, r3
   bceac:	f000 bfce 	b.w	bde4c <__register_exitproc>

000bceb0 <atoi>:
   bceb0:	220a      	movs	r2, #10
   bceb2:	2100      	movs	r1, #0
   bceb4:	f000 bfc0 	b.w	bde38 <strtol>

000bceb8 <memcmp>:
   bceb8:	b510      	push	{r4, lr}
   bceba:	3901      	subs	r1, #1
   bcebc:	4402      	add	r2, r0
   bcebe:	4290      	cmp	r0, r2
   bcec0:	d101      	bne.n	bcec6 <memcmp+0xe>
   bcec2:	2000      	movs	r0, #0
   bcec4:	e005      	b.n	bced2 <memcmp+0x1a>
   bcec6:	7803      	ldrb	r3, [r0, #0]
   bcec8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bcecc:	42a3      	cmp	r3, r4
   bcece:	d001      	beq.n	bced4 <memcmp+0x1c>
   bced0:	1b18      	subs	r0, r3, r4
   bced2:	bd10      	pop	{r4, pc}
   bced4:	3001      	adds	r0, #1
   bced6:	e7f2      	b.n	bcebe <memcmp+0x6>

000bced8 <memcpy>:
   bced8:	440a      	add	r2, r1
   bceda:	4291      	cmp	r1, r2
   bcedc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bcee0:	d100      	bne.n	bcee4 <memcpy+0xc>
   bcee2:	4770      	bx	lr
   bcee4:	b510      	push	{r4, lr}
   bcee6:	f811 4b01 	ldrb.w	r4, [r1], #1
   bceea:	f803 4f01 	strb.w	r4, [r3, #1]!
   bceee:	4291      	cmp	r1, r2
   bcef0:	d1f9      	bne.n	bcee6 <memcpy+0xe>
   bcef2:	bd10      	pop	{r4, pc}

000bcef4 <memmove>:
   bcef4:	4288      	cmp	r0, r1
   bcef6:	b510      	push	{r4, lr}
   bcef8:	eb01 0402 	add.w	r4, r1, r2
   bcefc:	d902      	bls.n	bcf04 <memmove+0x10>
   bcefe:	4284      	cmp	r4, r0
   bcf00:	4623      	mov	r3, r4
   bcf02:	d807      	bhi.n	bcf14 <memmove+0x20>
   bcf04:	1e43      	subs	r3, r0, #1
   bcf06:	42a1      	cmp	r1, r4
   bcf08:	d008      	beq.n	bcf1c <memmove+0x28>
   bcf0a:	f811 2b01 	ldrb.w	r2, [r1], #1
   bcf0e:	f803 2f01 	strb.w	r2, [r3, #1]!
   bcf12:	e7f8      	b.n	bcf06 <memmove+0x12>
   bcf14:	4402      	add	r2, r0
   bcf16:	4601      	mov	r1, r0
   bcf18:	428a      	cmp	r2, r1
   bcf1a:	d100      	bne.n	bcf1e <memmove+0x2a>
   bcf1c:	bd10      	pop	{r4, pc}
   bcf1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bcf22:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bcf26:	e7f7      	b.n	bcf18 <memmove+0x24>

000bcf28 <memset>:
   bcf28:	4402      	add	r2, r0
   bcf2a:	4603      	mov	r3, r0
   bcf2c:	4293      	cmp	r3, r2
   bcf2e:	d100      	bne.n	bcf32 <memset+0xa>
   bcf30:	4770      	bx	lr
   bcf32:	f803 1b01 	strb.w	r1, [r3], #1
   bcf36:	e7f9      	b.n	bcf2c <memset+0x4>

000bcf38 <srand>:
   bcf38:	b538      	push	{r3, r4, r5, lr}
   bcf3a:	4b10      	ldr	r3, [pc, #64]	; (bcf7c <srand+0x44>)
   bcf3c:	681d      	ldr	r5, [r3, #0]
   bcf3e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bcf40:	4604      	mov	r4, r0
   bcf42:	b9b3      	cbnz	r3, bcf72 <srand+0x3a>
   bcf44:	2018      	movs	r0, #24
   bcf46:	f7fc fc4f 	bl	b97e8 <malloc>
   bcf4a:	4602      	mov	r2, r0
   bcf4c:	63a8      	str	r0, [r5, #56]	; 0x38
   bcf4e:	b920      	cbnz	r0, bcf5a <srand+0x22>
   bcf50:	4b0b      	ldr	r3, [pc, #44]	; (bcf80 <srand+0x48>)
   bcf52:	480c      	ldr	r0, [pc, #48]	; (bcf84 <srand+0x4c>)
   bcf54:	2142      	movs	r1, #66	; 0x42
   bcf56:	f7fc fc87 	bl	b9868 <__assert_func>
   bcf5a:	490b      	ldr	r1, [pc, #44]	; (bcf88 <srand+0x50>)
   bcf5c:	4b0b      	ldr	r3, [pc, #44]	; (bcf8c <srand+0x54>)
   bcf5e:	e9c0 1300 	strd	r1, r3, [r0]
   bcf62:	4b0b      	ldr	r3, [pc, #44]	; (bcf90 <srand+0x58>)
   bcf64:	6083      	str	r3, [r0, #8]
   bcf66:	230b      	movs	r3, #11
   bcf68:	8183      	strh	r3, [r0, #12]
   bcf6a:	2100      	movs	r1, #0
   bcf6c:	2001      	movs	r0, #1
   bcf6e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bcf72:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bcf74:	2200      	movs	r2, #0
   bcf76:	611c      	str	r4, [r3, #16]
   bcf78:	615a      	str	r2, [r3, #20]
   bcf7a:	bd38      	pop	{r3, r4, r5, pc}
   bcf7c:	20035060 	.word	0x20035060
   bcf80:	000bfaf5 	.word	0x000bfaf5
   bcf84:	000bfb0c 	.word	0x000bfb0c
   bcf88:	abcd330e 	.word	0xabcd330e
   bcf8c:	e66d1234 	.word	0xe66d1234
   bcf90:	0005deec 	.word	0x0005deec

000bcf94 <strcmp>:
   bcf94:	f810 2b01 	ldrb.w	r2, [r0], #1
   bcf98:	f811 3b01 	ldrb.w	r3, [r1], #1
   bcf9c:	2a01      	cmp	r2, #1
   bcf9e:	bf28      	it	cs
   bcfa0:	429a      	cmpcs	r2, r3
   bcfa2:	d0f7      	beq.n	bcf94 <strcmp>
   bcfa4:	1ad0      	subs	r0, r2, r3
   bcfa6:	4770      	bx	lr

000bcfa8 <strcpy>:
   bcfa8:	4603      	mov	r3, r0
   bcfaa:	f811 2b01 	ldrb.w	r2, [r1], #1
   bcfae:	f803 2b01 	strb.w	r2, [r3], #1
   bcfb2:	2a00      	cmp	r2, #0
   bcfb4:	d1f9      	bne.n	bcfaa <strcpy+0x2>
   bcfb6:	4770      	bx	lr

000bcfb8 <strlen>:
   bcfb8:	4603      	mov	r3, r0
   bcfba:	f813 2b01 	ldrb.w	r2, [r3], #1
   bcfbe:	2a00      	cmp	r2, #0
   bcfc0:	d1fb      	bne.n	bcfba <strlen+0x2>
   bcfc2:	1a18      	subs	r0, r3, r0
   bcfc4:	3801      	subs	r0, #1
   bcfc6:	4770      	bx	lr

000bcfc8 <strncmp>:
   bcfc8:	b510      	push	{r4, lr}
   bcfca:	b17a      	cbz	r2, bcfec <strncmp+0x24>
   bcfcc:	4603      	mov	r3, r0
   bcfce:	3901      	subs	r1, #1
   bcfd0:	1884      	adds	r4, r0, r2
   bcfd2:	f813 0b01 	ldrb.w	r0, [r3], #1
   bcfd6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bcfda:	4290      	cmp	r0, r2
   bcfdc:	d101      	bne.n	bcfe2 <strncmp+0x1a>
   bcfde:	42a3      	cmp	r3, r4
   bcfe0:	d101      	bne.n	bcfe6 <strncmp+0x1e>
   bcfe2:	1a80      	subs	r0, r0, r2
   bcfe4:	bd10      	pop	{r4, pc}
   bcfe6:	2800      	cmp	r0, #0
   bcfe8:	d1f3      	bne.n	bcfd2 <strncmp+0xa>
   bcfea:	e7fa      	b.n	bcfe2 <strncmp+0x1a>
   bcfec:	4610      	mov	r0, r2
   bcfee:	e7f9      	b.n	bcfe4 <strncmp+0x1c>

000bcff0 <strnlen>:
   bcff0:	b510      	push	{r4, lr}
   bcff2:	4602      	mov	r2, r0
   bcff4:	4401      	add	r1, r0
   bcff6:	428a      	cmp	r2, r1
   bcff8:	4613      	mov	r3, r2
   bcffa:	d003      	beq.n	bd004 <strnlen+0x14>
   bcffc:	781c      	ldrb	r4, [r3, #0]
   bcffe:	3201      	adds	r2, #1
   bd000:	2c00      	cmp	r4, #0
   bd002:	d1f8      	bne.n	bcff6 <strnlen+0x6>
   bd004:	1a18      	subs	r0, r3, r0
   bd006:	bd10      	pop	{r4, pc}

000bd008 <strstr>:
   bd008:	780a      	ldrb	r2, [r1, #0]
   bd00a:	b570      	push	{r4, r5, r6, lr}
   bd00c:	b96a      	cbnz	r2, bd02a <strstr+0x22>
   bd00e:	bd70      	pop	{r4, r5, r6, pc}
   bd010:	429a      	cmp	r2, r3
   bd012:	d109      	bne.n	bd028 <strstr+0x20>
   bd014:	460c      	mov	r4, r1
   bd016:	4605      	mov	r5, r0
   bd018:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   bd01c:	2b00      	cmp	r3, #0
   bd01e:	d0f6      	beq.n	bd00e <strstr+0x6>
   bd020:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   bd024:	429e      	cmp	r6, r3
   bd026:	d0f7      	beq.n	bd018 <strstr+0x10>
   bd028:	3001      	adds	r0, #1
   bd02a:	7803      	ldrb	r3, [r0, #0]
   bd02c:	2b00      	cmp	r3, #0
   bd02e:	d1ef      	bne.n	bd010 <strstr+0x8>
   bd030:	4618      	mov	r0, r3
   bd032:	e7ec      	b.n	bd00e <strstr+0x6>

000bd034 <sulp>:
   bd034:	b570      	push	{r4, r5, r6, lr}
   bd036:	4604      	mov	r4, r0
   bd038:	460d      	mov	r5, r1
   bd03a:	ec45 4b10 	vmov	d0, r4, r5
   bd03e:	4616      	mov	r6, r2
   bd040:	f001 fe5e 	bl	bed00 <__ulp>
   bd044:	ec51 0b10 	vmov	r0, r1, d0
   bd048:	b17e      	cbz	r6, bd06a <sulp+0x36>
   bd04a:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bd04e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bd052:	2b00      	cmp	r3, #0
   bd054:	dd09      	ble.n	bd06a <sulp+0x36>
   bd056:	051b      	lsls	r3, r3, #20
   bd058:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bd05c:	2400      	movs	r4, #0
   bd05e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bd062:	4622      	mov	r2, r4
   bd064:	462b      	mov	r3, r5
   bd066:	f7ff fbdf 	bl	bc828 <__aeabi_dmul>
   bd06a:	bd70      	pop	{r4, r5, r6, pc}
   bd06c:	0000      	movs	r0, r0
	...

000bd070 <_strtod_l>:
   bd070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd074:	ed2d 8b02 	vpush	{d8}
   bd078:	b09d      	sub	sp, #116	; 0x74
   bd07a:	461f      	mov	r7, r3
   bd07c:	2300      	movs	r3, #0
   bd07e:	9318      	str	r3, [sp, #96]	; 0x60
   bd080:	4ba2      	ldr	r3, [pc, #648]	; (bd30c <_strtod_l+0x29c>)
   bd082:	9213      	str	r2, [sp, #76]	; 0x4c
   bd084:	681b      	ldr	r3, [r3, #0]
   bd086:	9305      	str	r3, [sp, #20]
   bd088:	4604      	mov	r4, r0
   bd08a:	4618      	mov	r0, r3
   bd08c:	4688      	mov	r8, r1
   bd08e:	f7ff ff93 	bl	bcfb8 <strlen>
   bd092:	f04f 0a00 	mov.w	sl, #0
   bd096:	4605      	mov	r5, r0
   bd098:	f04f 0b00 	mov.w	fp, #0
   bd09c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bd0a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bd0a2:	781a      	ldrb	r2, [r3, #0]
   bd0a4:	2a2b      	cmp	r2, #43	; 0x2b
   bd0a6:	d04e      	beq.n	bd146 <_strtod_l+0xd6>
   bd0a8:	d83b      	bhi.n	bd122 <_strtod_l+0xb2>
   bd0aa:	2a0d      	cmp	r2, #13
   bd0ac:	d834      	bhi.n	bd118 <_strtod_l+0xa8>
   bd0ae:	2a08      	cmp	r2, #8
   bd0b0:	d834      	bhi.n	bd11c <_strtod_l+0xac>
   bd0b2:	2a00      	cmp	r2, #0
   bd0b4:	d03e      	beq.n	bd134 <_strtod_l+0xc4>
   bd0b6:	2300      	movs	r3, #0
   bd0b8:	930a      	str	r3, [sp, #40]	; 0x28
   bd0ba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bd0bc:	7833      	ldrb	r3, [r6, #0]
   bd0be:	2b30      	cmp	r3, #48	; 0x30
   bd0c0:	f040 80b0 	bne.w	bd224 <_strtod_l+0x1b4>
   bd0c4:	7873      	ldrb	r3, [r6, #1]
   bd0c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bd0ca:	2b58      	cmp	r3, #88	; 0x58
   bd0cc:	d168      	bne.n	bd1a0 <_strtod_l+0x130>
   bd0ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bd0d0:	9301      	str	r3, [sp, #4]
   bd0d2:	ab18      	add	r3, sp, #96	; 0x60
   bd0d4:	9702      	str	r7, [sp, #8]
   bd0d6:	9300      	str	r3, [sp, #0]
   bd0d8:	4a8d      	ldr	r2, [pc, #564]	; (bd310 <_strtod_l+0x2a0>)
   bd0da:	ab19      	add	r3, sp, #100	; 0x64
   bd0dc:	a917      	add	r1, sp, #92	; 0x5c
   bd0de:	4620      	mov	r0, r4
   bd0e0:	f000 ff7e 	bl	bdfe0 <__gethex>
   bd0e4:	f010 0707 	ands.w	r7, r0, #7
   bd0e8:	4605      	mov	r5, r0
   bd0ea:	d005      	beq.n	bd0f8 <_strtod_l+0x88>
   bd0ec:	2f06      	cmp	r7, #6
   bd0ee:	d12c      	bne.n	bd14a <_strtod_l+0xda>
   bd0f0:	3601      	adds	r6, #1
   bd0f2:	2300      	movs	r3, #0
   bd0f4:	9617      	str	r6, [sp, #92]	; 0x5c
   bd0f6:	930a      	str	r3, [sp, #40]	; 0x28
   bd0f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bd0fa:	2b00      	cmp	r3, #0
   bd0fc:	f040 8590 	bne.w	bdc20 <_strtod_l+0xbb0>
   bd100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bd102:	b1eb      	cbz	r3, bd140 <_strtod_l+0xd0>
   bd104:	4652      	mov	r2, sl
   bd106:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bd10a:	ec43 2b10 	vmov	d0, r2, r3
   bd10e:	b01d      	add	sp, #116	; 0x74
   bd110:	ecbd 8b02 	vpop	{d8}
   bd114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd118:	2a20      	cmp	r2, #32
   bd11a:	d1cc      	bne.n	bd0b6 <_strtod_l+0x46>
   bd11c:	3301      	adds	r3, #1
   bd11e:	9317      	str	r3, [sp, #92]	; 0x5c
   bd120:	e7be      	b.n	bd0a0 <_strtod_l+0x30>
   bd122:	2a2d      	cmp	r2, #45	; 0x2d
   bd124:	d1c7      	bne.n	bd0b6 <_strtod_l+0x46>
   bd126:	2201      	movs	r2, #1
   bd128:	920a      	str	r2, [sp, #40]	; 0x28
   bd12a:	1c5a      	adds	r2, r3, #1
   bd12c:	9217      	str	r2, [sp, #92]	; 0x5c
   bd12e:	785b      	ldrb	r3, [r3, #1]
   bd130:	2b00      	cmp	r3, #0
   bd132:	d1c2      	bne.n	bd0ba <_strtod_l+0x4a>
   bd134:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bd136:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bd13a:	2b00      	cmp	r3, #0
   bd13c:	f040 856e 	bne.w	bdc1c <_strtod_l+0xbac>
   bd140:	4652      	mov	r2, sl
   bd142:	465b      	mov	r3, fp
   bd144:	e7e1      	b.n	bd10a <_strtod_l+0x9a>
   bd146:	2200      	movs	r2, #0
   bd148:	e7ee      	b.n	bd128 <_strtod_l+0xb8>
   bd14a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bd14c:	b13a      	cbz	r2, bd15e <_strtod_l+0xee>
   bd14e:	2135      	movs	r1, #53	; 0x35
   bd150:	a81a      	add	r0, sp, #104	; 0x68
   bd152:	f001 fee0 	bl	bef16 <__copybits>
   bd156:	9918      	ldr	r1, [sp, #96]	; 0x60
   bd158:	4620      	mov	r0, r4
   bd15a:	f001 fa9f 	bl	be69c <_Bfree>
   bd15e:	3f01      	subs	r7, #1
   bd160:	2f04      	cmp	r7, #4
   bd162:	d806      	bhi.n	bd172 <_strtod_l+0x102>
   bd164:	e8df f007 	tbb	[pc, r7]
   bd168:	1714030a 	.word	0x1714030a
   bd16c:	0a          	.byte	0x0a
   bd16d:	00          	.byte	0x00
   bd16e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bd172:	0728      	lsls	r0, r5, #28
   bd174:	d5c0      	bpl.n	bd0f8 <_strtod_l+0x88>
   bd176:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bd17a:	e7bd      	b.n	bd0f8 <_strtod_l+0x88>
   bd17c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bd180:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bd182:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bd186:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bd18a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bd18e:	e7f0      	b.n	bd172 <_strtod_l+0x102>
   bd190:	f8df b180 	ldr.w	fp, [pc, #384]	; bd314 <_strtod_l+0x2a4>
   bd194:	e7ed      	b.n	bd172 <_strtod_l+0x102>
   bd196:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bd19a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bd19e:	e7e8      	b.n	bd172 <_strtod_l+0x102>
   bd1a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bd1a2:	1c5a      	adds	r2, r3, #1
   bd1a4:	9217      	str	r2, [sp, #92]	; 0x5c
   bd1a6:	785b      	ldrb	r3, [r3, #1]
   bd1a8:	2b30      	cmp	r3, #48	; 0x30
   bd1aa:	d0f9      	beq.n	bd1a0 <_strtod_l+0x130>
   bd1ac:	2b00      	cmp	r3, #0
   bd1ae:	d0a3      	beq.n	bd0f8 <_strtod_l+0x88>
   bd1b0:	2301      	movs	r3, #1
   bd1b2:	f04f 0900 	mov.w	r9, #0
   bd1b6:	9304      	str	r3, [sp, #16]
   bd1b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bd1ba:	9308      	str	r3, [sp, #32]
   bd1bc:	f8cd 901c 	str.w	r9, [sp, #28]
   bd1c0:	464f      	mov	r7, r9
   bd1c2:	220a      	movs	r2, #10
   bd1c4:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bd1c6:	7806      	ldrb	r6, [r0, #0]
   bd1c8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bd1cc:	b2d9      	uxtb	r1, r3
   bd1ce:	2909      	cmp	r1, #9
   bd1d0:	d92a      	bls.n	bd228 <_strtod_l+0x1b8>
   bd1d2:	9905      	ldr	r1, [sp, #20]
   bd1d4:	462a      	mov	r2, r5
   bd1d6:	f7ff fef7 	bl	bcfc8 <strncmp>
   bd1da:	b398      	cbz	r0, bd244 <_strtod_l+0x1d4>
   bd1dc:	2000      	movs	r0, #0
   bd1de:	4632      	mov	r2, r6
   bd1e0:	463d      	mov	r5, r7
   bd1e2:	9005      	str	r0, [sp, #20]
   bd1e4:	4603      	mov	r3, r0
   bd1e6:	2a65      	cmp	r2, #101	; 0x65
   bd1e8:	d001      	beq.n	bd1ee <_strtod_l+0x17e>
   bd1ea:	2a45      	cmp	r2, #69	; 0x45
   bd1ec:	d118      	bne.n	bd220 <_strtod_l+0x1b0>
   bd1ee:	b91d      	cbnz	r5, bd1f8 <_strtod_l+0x188>
   bd1f0:	9a04      	ldr	r2, [sp, #16]
   bd1f2:	4302      	orrs	r2, r0
   bd1f4:	d09e      	beq.n	bd134 <_strtod_l+0xc4>
   bd1f6:	2500      	movs	r5, #0
   bd1f8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bd1fc:	f108 0201 	add.w	r2, r8, #1
   bd200:	9217      	str	r2, [sp, #92]	; 0x5c
   bd202:	f898 2001 	ldrb.w	r2, [r8, #1]
   bd206:	2a2b      	cmp	r2, #43	; 0x2b
   bd208:	d075      	beq.n	bd2f6 <_strtod_l+0x286>
   bd20a:	2a2d      	cmp	r2, #45	; 0x2d
   bd20c:	d07b      	beq.n	bd306 <_strtod_l+0x296>
   bd20e:	f04f 0c00 	mov.w	ip, #0
   bd212:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bd216:	2909      	cmp	r1, #9
   bd218:	f240 8082 	bls.w	bd320 <_strtod_l+0x2b0>
   bd21c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bd220:	2600      	movs	r6, #0
   bd222:	e09d      	b.n	bd360 <_strtod_l+0x2f0>
   bd224:	2300      	movs	r3, #0
   bd226:	e7c4      	b.n	bd1b2 <_strtod_l+0x142>
   bd228:	2f08      	cmp	r7, #8
   bd22a:	bfd8      	it	le
   bd22c:	9907      	ldrle	r1, [sp, #28]
   bd22e:	f100 0001 	add.w	r0, r0, #1
   bd232:	bfda      	itte	le
   bd234:	fb02 3301 	mlale	r3, r2, r1, r3
   bd238:	9307      	strle	r3, [sp, #28]
   bd23a:	fb02 3909 	mlagt	r9, r2, r9, r3
   bd23e:	3701      	adds	r7, #1
   bd240:	9017      	str	r0, [sp, #92]	; 0x5c
   bd242:	e7bf      	b.n	bd1c4 <_strtod_l+0x154>
   bd244:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bd246:	195a      	adds	r2, r3, r5
   bd248:	9217      	str	r2, [sp, #92]	; 0x5c
   bd24a:	5d5a      	ldrb	r2, [r3, r5]
   bd24c:	2f00      	cmp	r7, #0
   bd24e:	d037      	beq.n	bd2c0 <_strtod_l+0x250>
   bd250:	9005      	str	r0, [sp, #20]
   bd252:	463d      	mov	r5, r7
   bd254:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bd258:	2b09      	cmp	r3, #9
   bd25a:	d912      	bls.n	bd282 <_strtod_l+0x212>
   bd25c:	2301      	movs	r3, #1
   bd25e:	e7c2      	b.n	bd1e6 <_strtod_l+0x176>
   bd260:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bd262:	1c5a      	adds	r2, r3, #1
   bd264:	9217      	str	r2, [sp, #92]	; 0x5c
   bd266:	785a      	ldrb	r2, [r3, #1]
   bd268:	3001      	adds	r0, #1
   bd26a:	2a30      	cmp	r2, #48	; 0x30
   bd26c:	d0f8      	beq.n	bd260 <_strtod_l+0x1f0>
   bd26e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bd272:	2b08      	cmp	r3, #8
   bd274:	f200 84d9 	bhi.w	bdc2a <_strtod_l+0xbba>
   bd278:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bd27a:	9005      	str	r0, [sp, #20]
   bd27c:	2000      	movs	r0, #0
   bd27e:	9308      	str	r3, [sp, #32]
   bd280:	4605      	mov	r5, r0
   bd282:	3a30      	subs	r2, #48	; 0x30
   bd284:	f100 0301 	add.w	r3, r0, #1
   bd288:	d014      	beq.n	bd2b4 <_strtod_l+0x244>
   bd28a:	9905      	ldr	r1, [sp, #20]
   bd28c:	4419      	add	r1, r3
   bd28e:	9105      	str	r1, [sp, #20]
   bd290:	462b      	mov	r3, r5
   bd292:	eb00 0e05 	add.w	lr, r0, r5
   bd296:	210a      	movs	r1, #10
   bd298:	4573      	cmp	r3, lr
   bd29a:	d113      	bne.n	bd2c4 <_strtod_l+0x254>
   bd29c:	182b      	adds	r3, r5, r0
   bd29e:	2b08      	cmp	r3, #8
   bd2a0:	f105 0501 	add.w	r5, r5, #1
   bd2a4:	4405      	add	r5, r0
   bd2a6:	dc1c      	bgt.n	bd2e2 <_strtod_l+0x272>
   bd2a8:	9907      	ldr	r1, [sp, #28]
   bd2aa:	230a      	movs	r3, #10
   bd2ac:	fb03 2301 	mla	r3, r3, r1, r2
   bd2b0:	9307      	str	r3, [sp, #28]
   bd2b2:	2300      	movs	r3, #0
   bd2b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bd2b6:	1c51      	adds	r1, r2, #1
   bd2b8:	9117      	str	r1, [sp, #92]	; 0x5c
   bd2ba:	7852      	ldrb	r2, [r2, #1]
   bd2bc:	4618      	mov	r0, r3
   bd2be:	e7c9      	b.n	bd254 <_strtod_l+0x1e4>
   bd2c0:	4638      	mov	r0, r7
   bd2c2:	e7d2      	b.n	bd26a <_strtod_l+0x1fa>
   bd2c4:	2b08      	cmp	r3, #8
   bd2c6:	dc04      	bgt.n	bd2d2 <_strtod_l+0x262>
   bd2c8:	9e07      	ldr	r6, [sp, #28]
   bd2ca:	434e      	muls	r6, r1
   bd2cc:	9607      	str	r6, [sp, #28]
   bd2ce:	3301      	adds	r3, #1
   bd2d0:	e7e2      	b.n	bd298 <_strtod_l+0x228>
   bd2d2:	f103 0c01 	add.w	ip, r3, #1
   bd2d6:	f1bc 0f10 	cmp.w	ip, #16
   bd2da:	bfd8      	it	le
   bd2dc:	fb01 f909 	mulle.w	r9, r1, r9
   bd2e0:	e7f5      	b.n	bd2ce <_strtod_l+0x25e>
   bd2e2:	2d10      	cmp	r5, #16
   bd2e4:	bfdc      	itt	le
   bd2e6:	230a      	movle	r3, #10
   bd2e8:	fb03 2909 	mlale	r9, r3, r9, r2
   bd2ec:	e7e1      	b.n	bd2b2 <_strtod_l+0x242>
   bd2ee:	2300      	movs	r3, #0
   bd2f0:	9305      	str	r3, [sp, #20]
   bd2f2:	2301      	movs	r3, #1
   bd2f4:	e77c      	b.n	bd1f0 <_strtod_l+0x180>
   bd2f6:	f04f 0c00 	mov.w	ip, #0
   bd2fa:	f108 0202 	add.w	r2, r8, #2
   bd2fe:	9217      	str	r2, [sp, #92]	; 0x5c
   bd300:	f898 2002 	ldrb.w	r2, [r8, #2]
   bd304:	e785      	b.n	bd212 <_strtod_l+0x1a2>
   bd306:	f04f 0c01 	mov.w	ip, #1
   bd30a:	e7f6      	b.n	bd2fa <_strtod_l+0x28a>
   bd30c:	000bfd3c 	.word	0x000bfd3c
   bd310:	000bfb74 	.word	0x000bfb74
   bd314:	7ff00000 	.word	0x7ff00000
   bd318:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bd31a:	1c51      	adds	r1, r2, #1
   bd31c:	9117      	str	r1, [sp, #92]	; 0x5c
   bd31e:	7852      	ldrb	r2, [r2, #1]
   bd320:	2a30      	cmp	r2, #48	; 0x30
   bd322:	d0f9      	beq.n	bd318 <_strtod_l+0x2a8>
   bd324:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bd328:	2908      	cmp	r1, #8
   bd32a:	f63f af79 	bhi.w	bd220 <_strtod_l+0x1b0>
   bd32e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bd332:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bd334:	9206      	str	r2, [sp, #24]
   bd336:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bd338:	1c51      	adds	r1, r2, #1
   bd33a:	9117      	str	r1, [sp, #92]	; 0x5c
   bd33c:	7852      	ldrb	r2, [r2, #1]
   bd33e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bd342:	2e09      	cmp	r6, #9
   bd344:	d937      	bls.n	bd3b6 <_strtod_l+0x346>
   bd346:	9e06      	ldr	r6, [sp, #24]
   bd348:	1b89      	subs	r1, r1, r6
   bd34a:	2908      	cmp	r1, #8
   bd34c:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bd350:	dc02      	bgt.n	bd358 <_strtod_l+0x2e8>
   bd352:	4576      	cmp	r6, lr
   bd354:	bfa8      	it	ge
   bd356:	4676      	movge	r6, lr
   bd358:	f1bc 0f00 	cmp.w	ip, #0
   bd35c:	d000      	beq.n	bd360 <_strtod_l+0x2f0>
   bd35e:	4276      	negs	r6, r6
   bd360:	2d00      	cmp	r5, #0
   bd362:	d14d      	bne.n	bd400 <_strtod_l+0x390>
   bd364:	9904      	ldr	r1, [sp, #16]
   bd366:	4301      	orrs	r1, r0
   bd368:	f47f aec6 	bne.w	bd0f8 <_strtod_l+0x88>
   bd36c:	2b00      	cmp	r3, #0
   bd36e:	f47f aee1 	bne.w	bd134 <_strtod_l+0xc4>
   bd372:	2a69      	cmp	r2, #105	; 0x69
   bd374:	d027      	beq.n	bd3c6 <_strtod_l+0x356>
   bd376:	dc24      	bgt.n	bd3c2 <_strtod_l+0x352>
   bd378:	2a49      	cmp	r2, #73	; 0x49
   bd37a:	d024      	beq.n	bd3c6 <_strtod_l+0x356>
   bd37c:	2a4e      	cmp	r2, #78	; 0x4e
   bd37e:	f47f aed9 	bne.w	bd134 <_strtod_l+0xc4>
   bd382:	499f      	ldr	r1, [pc, #636]	; (bd600 <_strtod_l+0x590>)
   bd384:	a817      	add	r0, sp, #92	; 0x5c
   bd386:	f001 f883 	bl	be490 <__match>
   bd38a:	2800      	cmp	r0, #0
   bd38c:	f43f aed2 	beq.w	bd134 <_strtod_l+0xc4>
   bd390:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bd392:	781b      	ldrb	r3, [r3, #0]
   bd394:	2b28      	cmp	r3, #40	; 0x28
   bd396:	d12d      	bne.n	bd3f4 <_strtod_l+0x384>
   bd398:	499a      	ldr	r1, [pc, #616]	; (bd604 <_strtod_l+0x594>)
   bd39a:	aa1a      	add	r2, sp, #104	; 0x68
   bd39c:	a817      	add	r0, sp, #92	; 0x5c
   bd39e:	f001 f88b 	bl	be4b8 <__hexnan>
   bd3a2:	2805      	cmp	r0, #5
   bd3a4:	d126      	bne.n	bd3f4 <_strtod_l+0x384>
   bd3a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bd3a8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bd3ac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bd3b0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bd3b4:	e6a0      	b.n	bd0f8 <_strtod_l+0x88>
   bd3b6:	210a      	movs	r1, #10
   bd3b8:	fb01 2e0e 	mla	lr, r1, lr, r2
   bd3bc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bd3c0:	e7b9      	b.n	bd336 <_strtod_l+0x2c6>
   bd3c2:	2a6e      	cmp	r2, #110	; 0x6e
   bd3c4:	e7db      	b.n	bd37e <_strtod_l+0x30e>
   bd3c6:	4990      	ldr	r1, [pc, #576]	; (bd608 <_strtod_l+0x598>)
   bd3c8:	a817      	add	r0, sp, #92	; 0x5c
   bd3ca:	f001 f861 	bl	be490 <__match>
   bd3ce:	2800      	cmp	r0, #0
   bd3d0:	f43f aeb0 	beq.w	bd134 <_strtod_l+0xc4>
   bd3d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bd3d6:	498d      	ldr	r1, [pc, #564]	; (bd60c <_strtod_l+0x59c>)
   bd3d8:	3b01      	subs	r3, #1
   bd3da:	a817      	add	r0, sp, #92	; 0x5c
   bd3dc:	9317      	str	r3, [sp, #92]	; 0x5c
   bd3de:	f001 f857 	bl	be490 <__match>
   bd3e2:	b910      	cbnz	r0, bd3ea <_strtod_l+0x37a>
   bd3e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bd3e6:	3301      	adds	r3, #1
   bd3e8:	9317      	str	r3, [sp, #92]	; 0x5c
   bd3ea:	f8df b230 	ldr.w	fp, [pc, #560]	; bd61c <_strtod_l+0x5ac>
   bd3ee:	f04f 0a00 	mov.w	sl, #0
   bd3f2:	e681      	b.n	bd0f8 <_strtod_l+0x88>
   bd3f4:	4886      	ldr	r0, [pc, #536]	; (bd610 <_strtod_l+0x5a0>)
   bd3f6:	f001 fde3 	bl	befc0 <nan>
   bd3fa:	ec5b ab10 	vmov	sl, fp, d0
   bd3fe:	e67b      	b.n	bd0f8 <_strtod_l+0x88>
   bd400:	9b05      	ldr	r3, [sp, #20]
   bd402:	9807      	ldr	r0, [sp, #28]
   bd404:	1af3      	subs	r3, r6, r3
   bd406:	2f00      	cmp	r7, #0
   bd408:	bf08      	it	eq
   bd40a:	462f      	moveq	r7, r5
   bd40c:	2d10      	cmp	r5, #16
   bd40e:	9306      	str	r3, [sp, #24]
   bd410:	46a8      	mov	r8, r5
   bd412:	bfa8      	it	ge
   bd414:	f04f 0810 	movge.w	r8, #16
   bd418:	f7ff f98c 	bl	bc734 <__aeabi_ui2d>
   bd41c:	2d09      	cmp	r5, #9
   bd41e:	4682      	mov	sl, r0
   bd420:	468b      	mov	fp, r1
   bd422:	dd13      	ble.n	bd44c <_strtod_l+0x3dc>
   bd424:	4b7b      	ldr	r3, [pc, #492]	; (bd614 <_strtod_l+0x5a4>)
   bd426:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bd42a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bd42e:	f7ff f9fb 	bl	bc828 <__aeabi_dmul>
   bd432:	4682      	mov	sl, r0
   bd434:	4648      	mov	r0, r9
   bd436:	468b      	mov	fp, r1
   bd438:	f7ff f97c 	bl	bc734 <__aeabi_ui2d>
   bd43c:	4602      	mov	r2, r0
   bd43e:	460b      	mov	r3, r1
   bd440:	4650      	mov	r0, sl
   bd442:	4659      	mov	r1, fp
   bd444:	f7ff f83a 	bl	bc4bc <__adddf3>
   bd448:	4682      	mov	sl, r0
   bd44a:	468b      	mov	fp, r1
   bd44c:	2d0f      	cmp	r5, #15
   bd44e:	dc38      	bgt.n	bd4c2 <_strtod_l+0x452>
   bd450:	9b06      	ldr	r3, [sp, #24]
   bd452:	2b00      	cmp	r3, #0
   bd454:	f43f ae50 	beq.w	bd0f8 <_strtod_l+0x88>
   bd458:	dd24      	ble.n	bd4a4 <_strtod_l+0x434>
   bd45a:	2b16      	cmp	r3, #22
   bd45c:	dc0b      	bgt.n	bd476 <_strtod_l+0x406>
   bd45e:	496d      	ldr	r1, [pc, #436]	; (bd614 <_strtod_l+0x5a4>)
   bd460:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bd464:	e9d1 0100 	ldrd	r0, r1, [r1]
   bd468:	4652      	mov	r2, sl
   bd46a:	465b      	mov	r3, fp
   bd46c:	f7ff f9dc 	bl	bc828 <__aeabi_dmul>
   bd470:	4682      	mov	sl, r0
   bd472:	468b      	mov	fp, r1
   bd474:	e640      	b.n	bd0f8 <_strtod_l+0x88>
   bd476:	9a06      	ldr	r2, [sp, #24]
   bd478:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bd47c:	4293      	cmp	r3, r2
   bd47e:	db20      	blt.n	bd4c2 <_strtod_l+0x452>
   bd480:	4c64      	ldr	r4, [pc, #400]	; (bd614 <_strtod_l+0x5a4>)
   bd482:	f1c5 050f 	rsb	r5, r5, #15
   bd486:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bd48a:	4652      	mov	r2, sl
   bd48c:	465b      	mov	r3, fp
   bd48e:	e9d1 0100 	ldrd	r0, r1, [r1]
   bd492:	f7ff f9c9 	bl	bc828 <__aeabi_dmul>
   bd496:	9b06      	ldr	r3, [sp, #24]
   bd498:	1b5d      	subs	r5, r3, r5
   bd49a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bd49e:	e9d4 2300 	ldrd	r2, r3, [r4]
   bd4a2:	e7e3      	b.n	bd46c <_strtod_l+0x3fc>
   bd4a4:	9b06      	ldr	r3, [sp, #24]
   bd4a6:	3316      	adds	r3, #22
   bd4a8:	db0b      	blt.n	bd4c2 <_strtod_l+0x452>
   bd4aa:	9b05      	ldr	r3, [sp, #20]
   bd4ac:	1b9e      	subs	r6, r3, r6
   bd4ae:	4b59      	ldr	r3, [pc, #356]	; (bd614 <_strtod_l+0x5a4>)
   bd4b0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bd4b4:	e9d6 2300 	ldrd	r2, r3, [r6]
   bd4b8:	4650      	mov	r0, sl
   bd4ba:	4659      	mov	r1, fp
   bd4bc:	f7ff fade 	bl	bca7c <__aeabi_ddiv>
   bd4c0:	e7d6      	b.n	bd470 <_strtod_l+0x400>
   bd4c2:	9b06      	ldr	r3, [sp, #24]
   bd4c4:	eba5 0808 	sub.w	r8, r5, r8
   bd4c8:	4498      	add	r8, r3
   bd4ca:	f1b8 0f00 	cmp.w	r8, #0
   bd4ce:	dd74      	ble.n	bd5ba <_strtod_l+0x54a>
   bd4d0:	f018 030f 	ands.w	r3, r8, #15
   bd4d4:	d00a      	beq.n	bd4ec <_strtod_l+0x47c>
   bd4d6:	494f      	ldr	r1, [pc, #316]	; (bd614 <_strtod_l+0x5a4>)
   bd4d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bd4dc:	4652      	mov	r2, sl
   bd4de:	465b      	mov	r3, fp
   bd4e0:	e9d1 0100 	ldrd	r0, r1, [r1]
   bd4e4:	f7ff f9a0 	bl	bc828 <__aeabi_dmul>
   bd4e8:	4682      	mov	sl, r0
   bd4ea:	468b      	mov	fp, r1
   bd4ec:	f038 080f 	bics.w	r8, r8, #15
   bd4f0:	d04f      	beq.n	bd592 <_strtod_l+0x522>
   bd4f2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bd4f6:	dd22      	ble.n	bd53e <_strtod_l+0x4ce>
   bd4f8:	2500      	movs	r5, #0
   bd4fa:	462e      	mov	r6, r5
   bd4fc:	9507      	str	r5, [sp, #28]
   bd4fe:	9505      	str	r5, [sp, #20]
   bd500:	2322      	movs	r3, #34	; 0x22
   bd502:	f8df b118 	ldr.w	fp, [pc, #280]	; bd61c <_strtod_l+0x5ac>
   bd506:	6023      	str	r3, [r4, #0]
   bd508:	f04f 0a00 	mov.w	sl, #0
   bd50c:	9b07      	ldr	r3, [sp, #28]
   bd50e:	2b00      	cmp	r3, #0
   bd510:	f43f adf2 	beq.w	bd0f8 <_strtod_l+0x88>
   bd514:	9918      	ldr	r1, [sp, #96]	; 0x60
   bd516:	4620      	mov	r0, r4
   bd518:	f001 f8c0 	bl	be69c <_Bfree>
   bd51c:	9905      	ldr	r1, [sp, #20]
   bd51e:	4620      	mov	r0, r4
   bd520:	f001 f8bc 	bl	be69c <_Bfree>
   bd524:	4631      	mov	r1, r6
   bd526:	4620      	mov	r0, r4
   bd528:	f001 f8b8 	bl	be69c <_Bfree>
   bd52c:	9907      	ldr	r1, [sp, #28]
   bd52e:	4620      	mov	r0, r4
   bd530:	f001 f8b4 	bl	be69c <_Bfree>
   bd534:	4629      	mov	r1, r5
   bd536:	4620      	mov	r0, r4
   bd538:	f001 f8b0 	bl	be69c <_Bfree>
   bd53c:	e5dc      	b.n	bd0f8 <_strtod_l+0x88>
   bd53e:	4b36      	ldr	r3, [pc, #216]	; (bd618 <_strtod_l+0x5a8>)
   bd540:	9304      	str	r3, [sp, #16]
   bd542:	2300      	movs	r3, #0
   bd544:	ea4f 1828 	mov.w	r8, r8, asr #4
   bd548:	4650      	mov	r0, sl
   bd54a:	4659      	mov	r1, fp
   bd54c:	4699      	mov	r9, r3
   bd54e:	f1b8 0f01 	cmp.w	r8, #1
   bd552:	dc21      	bgt.n	bd598 <_strtod_l+0x528>
   bd554:	b10b      	cbz	r3, bd55a <_strtod_l+0x4ea>
   bd556:	4682      	mov	sl, r0
   bd558:	468b      	mov	fp, r1
   bd55a:	4b2f      	ldr	r3, [pc, #188]	; (bd618 <_strtod_l+0x5a8>)
   bd55c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bd560:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bd564:	4652      	mov	r2, sl
   bd566:	465b      	mov	r3, fp
   bd568:	e9d9 0100 	ldrd	r0, r1, [r9]
   bd56c:	f7ff f95c 	bl	bc828 <__aeabi_dmul>
   bd570:	4b2a      	ldr	r3, [pc, #168]	; (bd61c <_strtod_l+0x5ac>)
   bd572:	460a      	mov	r2, r1
   bd574:	400b      	ands	r3, r1
   bd576:	492a      	ldr	r1, [pc, #168]	; (bd620 <_strtod_l+0x5b0>)
   bd578:	428b      	cmp	r3, r1
   bd57a:	4682      	mov	sl, r0
   bd57c:	d8bc      	bhi.n	bd4f8 <_strtod_l+0x488>
   bd57e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bd582:	428b      	cmp	r3, r1
   bd584:	bf86      	itte	hi
   bd586:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bd624 <_strtod_l+0x5b4>
   bd58a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   bd58e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bd592:	2300      	movs	r3, #0
   bd594:	9304      	str	r3, [sp, #16]
   bd596:	e084      	b.n	bd6a2 <_strtod_l+0x632>
   bd598:	f018 0f01 	tst.w	r8, #1
   bd59c:	d005      	beq.n	bd5aa <_strtod_l+0x53a>
   bd59e:	9b04      	ldr	r3, [sp, #16]
   bd5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   bd5a4:	f7ff f940 	bl	bc828 <__aeabi_dmul>
   bd5a8:	2301      	movs	r3, #1
   bd5aa:	9a04      	ldr	r2, [sp, #16]
   bd5ac:	3208      	adds	r2, #8
   bd5ae:	f109 0901 	add.w	r9, r9, #1
   bd5b2:	ea4f 0868 	mov.w	r8, r8, asr #1
   bd5b6:	9204      	str	r2, [sp, #16]
   bd5b8:	e7c9      	b.n	bd54e <_strtod_l+0x4de>
   bd5ba:	d0ea      	beq.n	bd592 <_strtod_l+0x522>
   bd5bc:	f1c8 0800 	rsb	r8, r8, #0
   bd5c0:	f018 020f 	ands.w	r2, r8, #15
   bd5c4:	d00a      	beq.n	bd5dc <_strtod_l+0x56c>
   bd5c6:	4b13      	ldr	r3, [pc, #76]	; (bd614 <_strtod_l+0x5a4>)
   bd5c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bd5cc:	4650      	mov	r0, sl
   bd5ce:	4659      	mov	r1, fp
   bd5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   bd5d4:	f7ff fa52 	bl	bca7c <__aeabi_ddiv>
   bd5d8:	4682      	mov	sl, r0
   bd5da:	468b      	mov	fp, r1
   bd5dc:	ea5f 1828 	movs.w	r8, r8, asr #4
   bd5e0:	d0d7      	beq.n	bd592 <_strtod_l+0x522>
   bd5e2:	f1b8 0f1f 	cmp.w	r8, #31
   bd5e6:	dd1f      	ble.n	bd628 <_strtod_l+0x5b8>
   bd5e8:	2500      	movs	r5, #0
   bd5ea:	462e      	mov	r6, r5
   bd5ec:	9507      	str	r5, [sp, #28]
   bd5ee:	9505      	str	r5, [sp, #20]
   bd5f0:	2322      	movs	r3, #34	; 0x22
   bd5f2:	f04f 0a00 	mov.w	sl, #0
   bd5f6:	f04f 0b00 	mov.w	fp, #0
   bd5fa:	6023      	str	r3, [r4, #0]
   bd5fc:	e786      	b.n	bd50c <_strtod_l+0x49c>
   bd5fe:	bf00      	nop
   bd600:	000bfb6e 	.word	0x000bfb6e
   bd604:	000bfb88 	.word	0x000bfb88
   bd608:	000bfb65 	.word	0x000bfb65
   bd60c:	000bfb68 	.word	0x000bfb68
   bd610:	000bf5d2 	.word	0x000bf5d2
   bd614:	000bfdd8 	.word	0x000bfdd8
   bd618:	000bfdb0 	.word	0x000bfdb0
   bd61c:	7ff00000 	.word	0x7ff00000
   bd620:	7ca00000 	.word	0x7ca00000
   bd624:	7fefffff 	.word	0x7fefffff
   bd628:	f018 0310 	ands.w	r3, r8, #16
   bd62c:	bf18      	it	ne
   bd62e:	236a      	movne	r3, #106	; 0x6a
   bd630:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bd9e0 <_strtod_l+0x970>
   bd634:	9304      	str	r3, [sp, #16]
   bd636:	4650      	mov	r0, sl
   bd638:	4659      	mov	r1, fp
   bd63a:	2300      	movs	r3, #0
   bd63c:	f018 0f01 	tst.w	r8, #1
   bd640:	d004      	beq.n	bd64c <_strtod_l+0x5dc>
   bd642:	e9d9 2300 	ldrd	r2, r3, [r9]
   bd646:	f7ff f8ef 	bl	bc828 <__aeabi_dmul>
   bd64a:	2301      	movs	r3, #1
   bd64c:	ea5f 0868 	movs.w	r8, r8, asr #1
   bd650:	f109 0908 	add.w	r9, r9, #8
   bd654:	d1f2      	bne.n	bd63c <_strtod_l+0x5cc>
   bd656:	b10b      	cbz	r3, bd65c <_strtod_l+0x5ec>
   bd658:	4682      	mov	sl, r0
   bd65a:	468b      	mov	fp, r1
   bd65c:	9b04      	ldr	r3, [sp, #16]
   bd65e:	b1c3      	cbz	r3, bd692 <_strtod_l+0x622>
   bd660:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bd664:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bd668:	2b00      	cmp	r3, #0
   bd66a:	4659      	mov	r1, fp
   bd66c:	dd11      	ble.n	bd692 <_strtod_l+0x622>
   bd66e:	2b1f      	cmp	r3, #31
   bd670:	f340 8124 	ble.w	bd8bc <_strtod_l+0x84c>
   bd674:	2b34      	cmp	r3, #52	; 0x34
   bd676:	bfde      	ittt	le
   bd678:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bd67c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   bd680:	fa03 f202 	lslle.w	r2, r3, r2
   bd684:	f04f 0a00 	mov.w	sl, #0
   bd688:	bfcc      	ite	gt
   bd68a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bd68e:	ea02 0b01 	andle.w	fp, r2, r1
   bd692:	2200      	movs	r2, #0
   bd694:	2300      	movs	r3, #0
   bd696:	4650      	mov	r0, sl
   bd698:	4659      	mov	r1, fp
   bd69a:	f7ff fb2d 	bl	bccf8 <__aeabi_dcmpeq>
   bd69e:	2800      	cmp	r0, #0
   bd6a0:	d1a2      	bne.n	bd5e8 <_strtod_l+0x578>
   bd6a2:	9b07      	ldr	r3, [sp, #28]
   bd6a4:	9300      	str	r3, [sp, #0]
   bd6a6:	9908      	ldr	r1, [sp, #32]
   bd6a8:	462b      	mov	r3, r5
   bd6aa:	463a      	mov	r2, r7
   bd6ac:	4620      	mov	r0, r4
   bd6ae:	f001 f85d 	bl	be76c <__s2b>
   bd6b2:	9007      	str	r0, [sp, #28]
   bd6b4:	2800      	cmp	r0, #0
   bd6b6:	f43f af1f 	beq.w	bd4f8 <_strtod_l+0x488>
   bd6ba:	9b05      	ldr	r3, [sp, #20]
   bd6bc:	1b9e      	subs	r6, r3, r6
   bd6be:	9b06      	ldr	r3, [sp, #24]
   bd6c0:	2b00      	cmp	r3, #0
   bd6c2:	bfb4      	ite	lt
   bd6c4:	4633      	movlt	r3, r6
   bd6c6:	2300      	movge	r3, #0
   bd6c8:	930c      	str	r3, [sp, #48]	; 0x30
   bd6ca:	9b06      	ldr	r3, [sp, #24]
   bd6cc:	2500      	movs	r5, #0
   bd6ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bd6d2:	9312      	str	r3, [sp, #72]	; 0x48
   bd6d4:	462e      	mov	r6, r5
   bd6d6:	9b07      	ldr	r3, [sp, #28]
   bd6d8:	4620      	mov	r0, r4
   bd6da:	6859      	ldr	r1, [r3, #4]
   bd6dc:	f000 ff9e 	bl	be61c <_Balloc>
   bd6e0:	9005      	str	r0, [sp, #20]
   bd6e2:	2800      	cmp	r0, #0
   bd6e4:	f43f af0c 	beq.w	bd500 <_strtod_l+0x490>
   bd6e8:	9b07      	ldr	r3, [sp, #28]
   bd6ea:	691a      	ldr	r2, [r3, #16]
   bd6ec:	3202      	adds	r2, #2
   bd6ee:	f103 010c 	add.w	r1, r3, #12
   bd6f2:	0092      	lsls	r2, r2, #2
   bd6f4:	300c      	adds	r0, #12
   bd6f6:	f7ff fbef 	bl	bced8 <memcpy>
   bd6fa:	ec4b ab10 	vmov	d0, sl, fp
   bd6fe:	aa1a      	add	r2, sp, #104	; 0x68
   bd700:	a919      	add	r1, sp, #100	; 0x64
   bd702:	4620      	mov	r0, r4
   bd704:	f001 fb78 	bl	bedf8 <__d2b>
   bd708:	ec4b ab18 	vmov	d8, sl, fp
   bd70c:	9018      	str	r0, [sp, #96]	; 0x60
   bd70e:	2800      	cmp	r0, #0
   bd710:	f43f aef6 	beq.w	bd500 <_strtod_l+0x490>
   bd714:	2101      	movs	r1, #1
   bd716:	4620      	mov	r0, r4
   bd718:	f001 f8c2 	bl	be8a0 <__i2b>
   bd71c:	4606      	mov	r6, r0
   bd71e:	2800      	cmp	r0, #0
   bd720:	f43f aeee 	beq.w	bd500 <_strtod_l+0x490>
   bd724:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bd726:	9904      	ldr	r1, [sp, #16]
   bd728:	2b00      	cmp	r3, #0
   bd72a:	bfab      	itete	ge
   bd72c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bd72e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bd730:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bd732:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bd736:	bfac      	ite	ge
   bd738:	eb03 0902 	addge.w	r9, r3, r2
   bd73c:	1ad7      	sublt	r7, r2, r3
   bd73e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bd740:	eba3 0801 	sub.w	r8, r3, r1
   bd744:	4490      	add	r8, r2
   bd746:	4ba1      	ldr	r3, [pc, #644]	; (bd9cc <_strtod_l+0x95c>)
   bd748:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bd74c:	4598      	cmp	r8, r3
   bd74e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bd752:	f280 80c7 	bge.w	bd8e4 <_strtod_l+0x874>
   bd756:	eba3 0308 	sub.w	r3, r3, r8
   bd75a:	2b1f      	cmp	r3, #31
   bd75c:	eba2 0203 	sub.w	r2, r2, r3
   bd760:	f04f 0101 	mov.w	r1, #1
   bd764:	f300 80b1 	bgt.w	bd8ca <_strtod_l+0x85a>
   bd768:	fa01 f303 	lsl.w	r3, r1, r3
   bd76c:	930d      	str	r3, [sp, #52]	; 0x34
   bd76e:	2300      	movs	r3, #0
   bd770:	9308      	str	r3, [sp, #32]
   bd772:	eb09 0802 	add.w	r8, r9, r2
   bd776:	9b04      	ldr	r3, [sp, #16]
   bd778:	45c1      	cmp	r9, r8
   bd77a:	4417      	add	r7, r2
   bd77c:	441f      	add	r7, r3
   bd77e:	464b      	mov	r3, r9
   bd780:	bfa8      	it	ge
   bd782:	4643      	movge	r3, r8
   bd784:	42bb      	cmp	r3, r7
   bd786:	bfa8      	it	ge
   bd788:	463b      	movge	r3, r7
   bd78a:	2b00      	cmp	r3, #0
   bd78c:	bfc2      	ittt	gt
   bd78e:	eba8 0803 	subgt.w	r8, r8, r3
   bd792:	1aff      	subgt	r7, r7, r3
   bd794:	eba9 0903 	subgt.w	r9, r9, r3
   bd798:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bd79a:	2b00      	cmp	r3, #0
   bd79c:	dd17      	ble.n	bd7ce <_strtod_l+0x75e>
   bd79e:	4631      	mov	r1, r6
   bd7a0:	461a      	mov	r2, r3
   bd7a2:	4620      	mov	r0, r4
   bd7a4:	f001 f93c 	bl	bea20 <__pow5mult>
   bd7a8:	4606      	mov	r6, r0
   bd7aa:	2800      	cmp	r0, #0
   bd7ac:	f43f aea8 	beq.w	bd500 <_strtod_l+0x490>
   bd7b0:	4601      	mov	r1, r0
   bd7b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bd7b4:	4620      	mov	r0, r4
   bd7b6:	f001 f889 	bl	be8cc <__multiply>
   bd7ba:	900b      	str	r0, [sp, #44]	; 0x2c
   bd7bc:	2800      	cmp	r0, #0
   bd7be:	f43f ae9f 	beq.w	bd500 <_strtod_l+0x490>
   bd7c2:	9918      	ldr	r1, [sp, #96]	; 0x60
   bd7c4:	4620      	mov	r0, r4
   bd7c6:	f000 ff69 	bl	be69c <_Bfree>
   bd7ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bd7cc:	9318      	str	r3, [sp, #96]	; 0x60
   bd7ce:	f1b8 0f00 	cmp.w	r8, #0
   bd7d2:	f300 808c 	bgt.w	bd8ee <_strtod_l+0x87e>
   bd7d6:	9b06      	ldr	r3, [sp, #24]
   bd7d8:	2b00      	cmp	r3, #0
   bd7da:	dd08      	ble.n	bd7ee <_strtod_l+0x77e>
   bd7dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bd7de:	9905      	ldr	r1, [sp, #20]
   bd7e0:	4620      	mov	r0, r4
   bd7e2:	f001 f91d 	bl	bea20 <__pow5mult>
   bd7e6:	9005      	str	r0, [sp, #20]
   bd7e8:	2800      	cmp	r0, #0
   bd7ea:	f43f ae89 	beq.w	bd500 <_strtod_l+0x490>
   bd7ee:	2f00      	cmp	r7, #0
   bd7f0:	dd08      	ble.n	bd804 <_strtod_l+0x794>
   bd7f2:	9905      	ldr	r1, [sp, #20]
   bd7f4:	463a      	mov	r2, r7
   bd7f6:	4620      	mov	r0, r4
   bd7f8:	f001 f96c 	bl	bead4 <__lshift>
   bd7fc:	9005      	str	r0, [sp, #20]
   bd7fe:	2800      	cmp	r0, #0
   bd800:	f43f ae7e 	beq.w	bd500 <_strtod_l+0x490>
   bd804:	f1b9 0f00 	cmp.w	r9, #0
   bd808:	dd08      	ble.n	bd81c <_strtod_l+0x7ac>
   bd80a:	4631      	mov	r1, r6
   bd80c:	464a      	mov	r2, r9
   bd80e:	4620      	mov	r0, r4
   bd810:	f001 f960 	bl	bead4 <__lshift>
   bd814:	4606      	mov	r6, r0
   bd816:	2800      	cmp	r0, #0
   bd818:	f43f ae72 	beq.w	bd500 <_strtod_l+0x490>
   bd81c:	9a05      	ldr	r2, [sp, #20]
   bd81e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bd820:	4620      	mov	r0, r4
   bd822:	f001 f9e3 	bl	bebec <__mdiff>
   bd826:	4605      	mov	r5, r0
   bd828:	2800      	cmp	r0, #0
   bd82a:	f43f ae69 	beq.w	bd500 <_strtod_l+0x490>
   bd82e:	68c3      	ldr	r3, [r0, #12]
   bd830:	930b      	str	r3, [sp, #44]	; 0x2c
   bd832:	2300      	movs	r3, #0
   bd834:	60c3      	str	r3, [r0, #12]
   bd836:	4631      	mov	r1, r6
   bd838:	f001 f9bc 	bl	bebb4 <__mcmp>
   bd83c:	2800      	cmp	r0, #0
   bd83e:	da60      	bge.n	bd902 <_strtod_l+0x892>
   bd840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bd842:	ea53 030a 	orrs.w	r3, r3, sl
   bd846:	f040 8082 	bne.w	bd94e <_strtod_l+0x8de>
   bd84a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bd84e:	2b00      	cmp	r3, #0
   bd850:	d17d      	bne.n	bd94e <_strtod_l+0x8de>
   bd852:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bd856:	0d1b      	lsrs	r3, r3, #20
   bd858:	051b      	lsls	r3, r3, #20
   bd85a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bd85e:	d976      	bls.n	bd94e <_strtod_l+0x8de>
   bd860:	696b      	ldr	r3, [r5, #20]
   bd862:	b913      	cbnz	r3, bd86a <_strtod_l+0x7fa>
   bd864:	692b      	ldr	r3, [r5, #16]
   bd866:	2b01      	cmp	r3, #1
   bd868:	dd71      	ble.n	bd94e <_strtod_l+0x8de>
   bd86a:	4629      	mov	r1, r5
   bd86c:	2201      	movs	r2, #1
   bd86e:	4620      	mov	r0, r4
   bd870:	f001 f930 	bl	bead4 <__lshift>
   bd874:	4631      	mov	r1, r6
   bd876:	4605      	mov	r5, r0
   bd878:	f001 f99c 	bl	bebb4 <__mcmp>
   bd87c:	2800      	cmp	r0, #0
   bd87e:	dd66      	ble.n	bd94e <_strtod_l+0x8de>
   bd880:	9904      	ldr	r1, [sp, #16]
   bd882:	4a53      	ldr	r2, [pc, #332]	; (bd9d0 <_strtod_l+0x960>)
   bd884:	465b      	mov	r3, fp
   bd886:	2900      	cmp	r1, #0
   bd888:	f000 8081 	beq.w	bd98e <_strtod_l+0x91e>
   bd88c:	ea02 010b 	and.w	r1, r2, fp
   bd890:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bd894:	dc7b      	bgt.n	bd98e <_strtod_l+0x91e>
   bd896:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bd89a:	f77f aea9 	ble.w	bd5f0 <_strtod_l+0x580>
   bd89e:	4b4d      	ldr	r3, [pc, #308]	; (bd9d4 <_strtod_l+0x964>)
   bd8a0:	4650      	mov	r0, sl
   bd8a2:	4659      	mov	r1, fp
   bd8a4:	2200      	movs	r2, #0
   bd8a6:	f7fe ffbf 	bl	bc828 <__aeabi_dmul>
   bd8aa:	460b      	mov	r3, r1
   bd8ac:	4303      	orrs	r3, r0
   bd8ae:	bf08      	it	eq
   bd8b0:	2322      	moveq	r3, #34	; 0x22
   bd8b2:	4682      	mov	sl, r0
   bd8b4:	468b      	mov	fp, r1
   bd8b6:	bf08      	it	eq
   bd8b8:	6023      	streq	r3, [r4, #0]
   bd8ba:	e62b      	b.n	bd514 <_strtod_l+0x4a4>
   bd8bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd8c0:	fa02 f303 	lsl.w	r3, r2, r3
   bd8c4:	ea03 0a0a 	and.w	sl, r3, sl
   bd8c8:	e6e3      	b.n	bd692 <_strtod_l+0x622>
   bd8ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bd8ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bd8d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bd8d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bd8da:	fa01 f308 	lsl.w	r3, r1, r8
   bd8de:	9308      	str	r3, [sp, #32]
   bd8e0:	910d      	str	r1, [sp, #52]	; 0x34
   bd8e2:	e746      	b.n	bd772 <_strtod_l+0x702>
   bd8e4:	2300      	movs	r3, #0
   bd8e6:	9308      	str	r3, [sp, #32]
   bd8e8:	2301      	movs	r3, #1
   bd8ea:	930d      	str	r3, [sp, #52]	; 0x34
   bd8ec:	e741      	b.n	bd772 <_strtod_l+0x702>
   bd8ee:	9918      	ldr	r1, [sp, #96]	; 0x60
   bd8f0:	4642      	mov	r2, r8
   bd8f2:	4620      	mov	r0, r4
   bd8f4:	f001 f8ee 	bl	bead4 <__lshift>
   bd8f8:	9018      	str	r0, [sp, #96]	; 0x60
   bd8fa:	2800      	cmp	r0, #0
   bd8fc:	f47f af6b 	bne.w	bd7d6 <_strtod_l+0x766>
   bd900:	e5fe      	b.n	bd500 <_strtod_l+0x490>
   bd902:	465f      	mov	r7, fp
   bd904:	d16e      	bne.n	bd9e4 <_strtod_l+0x974>
   bd906:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bd908:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bd90c:	b342      	cbz	r2, bd960 <_strtod_l+0x8f0>
   bd90e:	4a32      	ldr	r2, [pc, #200]	; (bd9d8 <_strtod_l+0x968>)
   bd910:	4293      	cmp	r3, r2
   bd912:	d128      	bne.n	bd966 <_strtod_l+0x8f6>
   bd914:	9b04      	ldr	r3, [sp, #16]
   bd916:	4651      	mov	r1, sl
   bd918:	b1eb      	cbz	r3, bd956 <_strtod_l+0x8e6>
   bd91a:	4b2d      	ldr	r3, [pc, #180]	; (bd9d0 <_strtod_l+0x960>)
   bd91c:	403b      	ands	r3, r7
   bd91e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bd922:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd926:	d819      	bhi.n	bd95c <_strtod_l+0x8ec>
   bd928:	0d1b      	lsrs	r3, r3, #20
   bd92a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bd92e:	fa02 f303 	lsl.w	r3, r2, r3
   bd932:	4299      	cmp	r1, r3
   bd934:	d117      	bne.n	bd966 <_strtod_l+0x8f6>
   bd936:	4b29      	ldr	r3, [pc, #164]	; (bd9dc <_strtod_l+0x96c>)
   bd938:	429f      	cmp	r7, r3
   bd93a:	d102      	bne.n	bd942 <_strtod_l+0x8d2>
   bd93c:	3101      	adds	r1, #1
   bd93e:	f43f addf 	beq.w	bd500 <_strtod_l+0x490>
   bd942:	4b23      	ldr	r3, [pc, #140]	; (bd9d0 <_strtod_l+0x960>)
   bd944:	403b      	ands	r3, r7
   bd946:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bd94a:	f04f 0a00 	mov.w	sl, #0
   bd94e:	9b04      	ldr	r3, [sp, #16]
   bd950:	2b00      	cmp	r3, #0
   bd952:	d1a4      	bne.n	bd89e <_strtod_l+0x82e>
   bd954:	e5de      	b.n	bd514 <_strtod_l+0x4a4>
   bd956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bd95a:	e7ea      	b.n	bd932 <_strtod_l+0x8c2>
   bd95c:	4613      	mov	r3, r2
   bd95e:	e7e8      	b.n	bd932 <_strtod_l+0x8c2>
   bd960:	ea53 030a 	orrs.w	r3, r3, sl
   bd964:	d08c      	beq.n	bd880 <_strtod_l+0x810>
   bd966:	9b08      	ldr	r3, [sp, #32]
   bd968:	b1db      	cbz	r3, bd9a2 <_strtod_l+0x932>
   bd96a:	423b      	tst	r3, r7
   bd96c:	d0ef      	beq.n	bd94e <_strtod_l+0x8de>
   bd96e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bd970:	9a04      	ldr	r2, [sp, #16]
   bd972:	4650      	mov	r0, sl
   bd974:	4659      	mov	r1, fp
   bd976:	b1c3      	cbz	r3, bd9aa <_strtod_l+0x93a>
   bd978:	f7ff fb5c 	bl	bd034 <sulp>
   bd97c:	4602      	mov	r2, r0
   bd97e:	460b      	mov	r3, r1
   bd980:	ec51 0b18 	vmov	r0, r1, d8
   bd984:	f7fe fd9a 	bl	bc4bc <__adddf3>
   bd988:	4682      	mov	sl, r0
   bd98a:	468b      	mov	fp, r1
   bd98c:	e7df      	b.n	bd94e <_strtod_l+0x8de>
   bd98e:	4013      	ands	r3, r2
   bd990:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bd994:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bd998:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bd99c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bd9a0:	e7d5      	b.n	bd94e <_strtod_l+0x8de>
   bd9a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bd9a4:	ea13 0f0a 	tst.w	r3, sl
   bd9a8:	e7e0      	b.n	bd96c <_strtod_l+0x8fc>
   bd9aa:	f7ff fb43 	bl	bd034 <sulp>
   bd9ae:	4602      	mov	r2, r0
   bd9b0:	460b      	mov	r3, r1
   bd9b2:	ec51 0b18 	vmov	r0, r1, d8
   bd9b6:	f7fe fd7f 	bl	bc4b8 <__aeabi_dsub>
   bd9ba:	2200      	movs	r2, #0
   bd9bc:	2300      	movs	r3, #0
   bd9be:	4682      	mov	sl, r0
   bd9c0:	468b      	mov	fp, r1
   bd9c2:	f7ff f999 	bl	bccf8 <__aeabi_dcmpeq>
   bd9c6:	2800      	cmp	r0, #0
   bd9c8:	d0c1      	beq.n	bd94e <_strtod_l+0x8de>
   bd9ca:	e611      	b.n	bd5f0 <_strtod_l+0x580>
   bd9cc:	fffffc02 	.word	0xfffffc02
   bd9d0:	7ff00000 	.word	0x7ff00000
   bd9d4:	39500000 	.word	0x39500000
   bd9d8:	000fffff 	.word	0x000fffff
   bd9dc:	7fefffff 	.word	0x7fefffff
   bd9e0:	000bfba0 	.word	0x000bfba0
   bd9e4:	4631      	mov	r1, r6
   bd9e6:	4628      	mov	r0, r5
   bd9e8:	f001 fa62 	bl	beeb0 <__ratio>
   bd9ec:	ec59 8b10 	vmov	r8, r9, d0
   bd9f0:	ee10 0a10 	vmov	r0, s0
   bd9f4:	2200      	movs	r2, #0
   bd9f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bd9fa:	4649      	mov	r1, r9
   bd9fc:	f7ff f990 	bl	bcd20 <__aeabi_dcmple>
   bda00:	2800      	cmp	r0, #0
   bda02:	d07a      	beq.n	bdafa <_strtod_l+0xa8a>
   bda04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bda06:	2b00      	cmp	r3, #0
   bda08:	d04a      	beq.n	bdaa0 <_strtod_l+0xa30>
   bda0a:	4b95      	ldr	r3, [pc, #596]	; (bdc60 <_strtod_l+0xbf0>)
   bda0c:	2200      	movs	r2, #0
   bda0e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bda12:	f8df 924c 	ldr.w	r9, [pc, #588]	; bdc60 <_strtod_l+0xbf0>
   bda16:	f04f 0800 	mov.w	r8, #0
   bda1a:	4b92      	ldr	r3, [pc, #584]	; (bdc64 <_strtod_l+0xbf4>)
   bda1c:	403b      	ands	r3, r7
   bda1e:	930d      	str	r3, [sp, #52]	; 0x34
   bda20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bda22:	4b91      	ldr	r3, [pc, #580]	; (bdc68 <_strtod_l+0xbf8>)
   bda24:	429a      	cmp	r2, r3
   bda26:	f040 80b0 	bne.w	bdb8a <_strtod_l+0xb1a>
   bda2a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bda2e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bda32:	ec4b ab10 	vmov	d0, sl, fp
   bda36:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bda3a:	f001 f961 	bl	bed00 <__ulp>
   bda3e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bda42:	ec53 2b10 	vmov	r2, r3, d0
   bda46:	f7fe feef 	bl	bc828 <__aeabi_dmul>
   bda4a:	4652      	mov	r2, sl
   bda4c:	465b      	mov	r3, fp
   bda4e:	f7fe fd35 	bl	bc4bc <__adddf3>
   bda52:	460b      	mov	r3, r1
   bda54:	4983      	ldr	r1, [pc, #524]	; (bdc64 <_strtod_l+0xbf4>)
   bda56:	4a85      	ldr	r2, [pc, #532]	; (bdc6c <_strtod_l+0xbfc>)
   bda58:	4019      	ands	r1, r3
   bda5a:	4291      	cmp	r1, r2
   bda5c:	4682      	mov	sl, r0
   bda5e:	d960      	bls.n	bdb22 <_strtod_l+0xab2>
   bda60:	ee18 3a90 	vmov	r3, s17
   bda64:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bda68:	4293      	cmp	r3, r2
   bda6a:	d104      	bne.n	bda76 <_strtod_l+0xa06>
   bda6c:	ee18 3a10 	vmov	r3, s16
   bda70:	3301      	adds	r3, #1
   bda72:	f43f ad45 	beq.w	bd500 <_strtod_l+0x490>
   bda76:	f8df b200 	ldr.w	fp, [pc, #512]	; bdc78 <_strtod_l+0xc08>
   bda7a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bda7e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bda80:	4620      	mov	r0, r4
   bda82:	f000 fe0b 	bl	be69c <_Bfree>
   bda86:	9905      	ldr	r1, [sp, #20]
   bda88:	4620      	mov	r0, r4
   bda8a:	f000 fe07 	bl	be69c <_Bfree>
   bda8e:	4631      	mov	r1, r6
   bda90:	4620      	mov	r0, r4
   bda92:	f000 fe03 	bl	be69c <_Bfree>
   bda96:	4629      	mov	r1, r5
   bda98:	4620      	mov	r0, r4
   bda9a:	f000 fdff 	bl	be69c <_Bfree>
   bda9e:	e61a      	b.n	bd6d6 <_strtod_l+0x666>
   bdaa0:	f1ba 0f00 	cmp.w	sl, #0
   bdaa4:	d11b      	bne.n	bdade <_strtod_l+0xa6e>
   bdaa6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bdaaa:	b9f3      	cbnz	r3, bdaea <_strtod_l+0xa7a>
   bdaac:	4b6c      	ldr	r3, [pc, #432]	; (bdc60 <_strtod_l+0xbf0>)
   bdaae:	2200      	movs	r2, #0
   bdab0:	4640      	mov	r0, r8
   bdab2:	4649      	mov	r1, r9
   bdab4:	f7ff f92a 	bl	bcd0c <__aeabi_dcmplt>
   bdab8:	b9d0      	cbnz	r0, bdaf0 <_strtod_l+0xa80>
   bdaba:	4640      	mov	r0, r8
   bdabc:	4649      	mov	r1, r9
   bdabe:	4b6c      	ldr	r3, [pc, #432]	; (bdc70 <_strtod_l+0xc00>)
   bdac0:	2200      	movs	r2, #0
   bdac2:	f7fe feb1 	bl	bc828 <__aeabi_dmul>
   bdac6:	4680      	mov	r8, r0
   bdac8:	4689      	mov	r9, r1
   bdaca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bdace:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bdad2:	9315      	str	r3, [sp, #84]	; 0x54
   bdad4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bdad8:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bdadc:	e79d      	b.n	bda1a <_strtod_l+0x9aa>
   bdade:	f1ba 0f01 	cmp.w	sl, #1
   bdae2:	d102      	bne.n	bdaea <_strtod_l+0xa7a>
   bdae4:	2f00      	cmp	r7, #0
   bdae6:	f43f ad83 	beq.w	bd5f0 <_strtod_l+0x580>
   bdaea:	4b62      	ldr	r3, [pc, #392]	; (bdc74 <_strtod_l+0xc04>)
   bdaec:	2200      	movs	r2, #0
   bdaee:	e78e      	b.n	bda0e <_strtod_l+0x99e>
   bdaf0:	f8df 917c 	ldr.w	r9, [pc, #380]	; bdc70 <_strtod_l+0xc00>
   bdaf4:	f04f 0800 	mov.w	r8, #0
   bdaf8:	e7e7      	b.n	bdaca <_strtod_l+0xa5a>
   bdafa:	4b5d      	ldr	r3, [pc, #372]	; (bdc70 <_strtod_l+0xc00>)
   bdafc:	4640      	mov	r0, r8
   bdafe:	4649      	mov	r1, r9
   bdb00:	2200      	movs	r2, #0
   bdb02:	f7fe fe91 	bl	bc828 <__aeabi_dmul>
   bdb06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bdb08:	4680      	mov	r8, r0
   bdb0a:	4689      	mov	r9, r1
   bdb0c:	b933      	cbnz	r3, bdb1c <_strtod_l+0xaac>
   bdb0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bdb12:	900e      	str	r0, [sp, #56]	; 0x38
   bdb14:	930f      	str	r3, [sp, #60]	; 0x3c
   bdb16:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bdb1a:	e7dd      	b.n	bdad8 <_strtod_l+0xa68>
   bdb1c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bdb20:	e7f9      	b.n	bdb16 <_strtod_l+0xaa6>
   bdb22:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bdb26:	9b04      	ldr	r3, [sp, #16]
   bdb28:	2b00      	cmp	r3, #0
   bdb2a:	d1a8      	bne.n	bda7e <_strtod_l+0xa0e>
   bdb2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bdb30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bdb32:	0d1b      	lsrs	r3, r3, #20
   bdb34:	051b      	lsls	r3, r3, #20
   bdb36:	429a      	cmp	r2, r3
   bdb38:	d1a1      	bne.n	bda7e <_strtod_l+0xa0e>
   bdb3a:	4640      	mov	r0, r8
   bdb3c:	4649      	mov	r1, r9
   bdb3e:	f001 fa5b 	bl	beff8 <__aeabi_d2lz>
   bdb42:	f7fe fe43 	bl	bc7cc <__aeabi_l2d>
   bdb46:	4602      	mov	r2, r0
   bdb48:	460b      	mov	r3, r1
   bdb4a:	4640      	mov	r0, r8
   bdb4c:	4649      	mov	r1, r9
   bdb4e:	f7fe fcb3 	bl	bc4b8 <__aeabi_dsub>
   bdb52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bdb54:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bdb58:	ea43 030a 	orr.w	r3, r3, sl
   bdb5c:	4313      	orrs	r3, r2
   bdb5e:	4680      	mov	r8, r0
   bdb60:	4689      	mov	r9, r1
   bdb62:	d055      	beq.n	bdc10 <_strtod_l+0xba0>
   bdb64:	a336      	add	r3, pc, #216	; (adr r3, bdc40 <_strtod_l+0xbd0>)
   bdb66:	e9d3 2300 	ldrd	r2, r3, [r3]
   bdb6a:	f7ff f8cf 	bl	bcd0c <__aeabi_dcmplt>
   bdb6e:	2800      	cmp	r0, #0
   bdb70:	f47f acd0 	bne.w	bd514 <_strtod_l+0x4a4>
   bdb74:	a334      	add	r3, pc, #208	; (adr r3, bdc48 <_strtod_l+0xbd8>)
   bdb76:	e9d3 2300 	ldrd	r2, r3, [r3]
   bdb7a:	4640      	mov	r0, r8
   bdb7c:	4649      	mov	r1, r9
   bdb7e:	f7ff f8e3 	bl	bcd48 <__aeabi_dcmpgt>
   bdb82:	2800      	cmp	r0, #0
   bdb84:	f43f af7b 	beq.w	bda7e <_strtod_l+0xa0e>
   bdb88:	e4c4      	b.n	bd514 <_strtod_l+0x4a4>
   bdb8a:	9b04      	ldr	r3, [sp, #16]
   bdb8c:	b333      	cbz	r3, bdbdc <_strtod_l+0xb6c>
   bdb8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bdb90:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bdb94:	d822      	bhi.n	bdbdc <_strtod_l+0xb6c>
   bdb96:	a32e      	add	r3, pc, #184	; (adr r3, bdc50 <_strtod_l+0xbe0>)
   bdb98:	e9d3 2300 	ldrd	r2, r3, [r3]
   bdb9c:	4640      	mov	r0, r8
   bdb9e:	4649      	mov	r1, r9
   bdba0:	f7ff f8be 	bl	bcd20 <__aeabi_dcmple>
   bdba4:	b1a0      	cbz	r0, bdbd0 <_strtod_l+0xb60>
   bdba6:	4649      	mov	r1, r9
   bdba8:	4640      	mov	r0, r8
   bdbaa:	f7ff f8ed 	bl	bcd88 <__aeabi_d2uiz>
   bdbae:	2801      	cmp	r0, #1
   bdbb0:	bf38      	it	cc
   bdbb2:	2001      	movcc	r0, #1
   bdbb4:	f7fe fdbe 	bl	bc734 <__aeabi_ui2d>
   bdbb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bdbba:	4680      	mov	r8, r0
   bdbbc:	4689      	mov	r9, r1
   bdbbe:	bb23      	cbnz	r3, bdc0a <_strtod_l+0xb9a>
   bdbc0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bdbc4:	9010      	str	r0, [sp, #64]	; 0x40
   bdbc6:	9311      	str	r3, [sp, #68]	; 0x44
   bdbc8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bdbcc:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bdbd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bdbd2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bdbd4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bdbd8:	1a9b      	subs	r3, r3, r2
   bdbda:	9309      	str	r3, [sp, #36]	; 0x24
   bdbdc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bdbe0:	eeb0 0a48 	vmov.f32	s0, s16
   bdbe4:	eef0 0a68 	vmov.f32	s1, s17
   bdbe8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bdbec:	f001 f888 	bl	bed00 <__ulp>
   bdbf0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bdbf4:	ec53 2b10 	vmov	r2, r3, d0
   bdbf8:	f7fe fe16 	bl	bc828 <__aeabi_dmul>
   bdbfc:	ec53 2b18 	vmov	r2, r3, d8
   bdc00:	f7fe fc5c 	bl	bc4bc <__adddf3>
   bdc04:	4682      	mov	sl, r0
   bdc06:	468b      	mov	fp, r1
   bdc08:	e78d      	b.n	bdb26 <_strtod_l+0xab6>
   bdc0a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bdc0e:	e7db      	b.n	bdbc8 <_strtod_l+0xb58>
   bdc10:	a311      	add	r3, pc, #68	; (adr r3, bdc58 <_strtod_l+0xbe8>)
   bdc12:	e9d3 2300 	ldrd	r2, r3, [r3]
   bdc16:	f7ff f879 	bl	bcd0c <__aeabi_dcmplt>
   bdc1a:	e7b2      	b.n	bdb82 <_strtod_l+0xb12>
   bdc1c:	2300      	movs	r3, #0
   bdc1e:	930a      	str	r3, [sp, #40]	; 0x28
   bdc20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bdc22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bdc24:	6013      	str	r3, [r2, #0]
   bdc26:	f7ff ba6b 	b.w	bd100 <_strtod_l+0x90>
   bdc2a:	2a65      	cmp	r2, #101	; 0x65
   bdc2c:	f43f ab5f 	beq.w	bd2ee <_strtod_l+0x27e>
   bdc30:	2a45      	cmp	r2, #69	; 0x45
   bdc32:	f43f ab5c 	beq.w	bd2ee <_strtod_l+0x27e>
   bdc36:	2301      	movs	r3, #1
   bdc38:	f7ff bb94 	b.w	bd364 <_strtod_l+0x2f4>
   bdc3c:	f3af 8000 	nop.w
   bdc40:	94a03595 	.word	0x94a03595
   bdc44:	3fdfffff 	.word	0x3fdfffff
   bdc48:	35afe535 	.word	0x35afe535
   bdc4c:	3fe00000 	.word	0x3fe00000
   bdc50:	ffc00000 	.word	0xffc00000
   bdc54:	41dfffff 	.word	0x41dfffff
   bdc58:	94a03595 	.word	0x94a03595
   bdc5c:	3fcfffff 	.word	0x3fcfffff
   bdc60:	3ff00000 	.word	0x3ff00000
   bdc64:	7ff00000 	.word	0x7ff00000
   bdc68:	7fe00000 	.word	0x7fe00000
   bdc6c:	7c9fffff 	.word	0x7c9fffff
   bdc70:	3fe00000 	.word	0x3fe00000
   bdc74:	bff00000 	.word	0xbff00000
   bdc78:	7fefffff 	.word	0x7fefffff

000bdc7c <strtof>:
   bdc7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bdc80:	f8df 80ac 	ldr.w	r8, [pc, #172]	; bdd30 <strtof+0xb4>
   bdc84:	4b26      	ldr	r3, [pc, #152]	; (bdd20 <strtof+0xa4>)
   bdc86:	460a      	mov	r2, r1
   bdc88:	ed2d 8b02 	vpush	{d8}
   bdc8c:	4601      	mov	r1, r0
   bdc8e:	f8d8 0000 	ldr.w	r0, [r8]
   bdc92:	f7ff f9ed 	bl	bd070 <_strtod_l>
   bdc96:	ec55 4b10 	vmov	r4, r5, d0
   bdc9a:	ee10 2a10 	vmov	r2, s0
   bdc9e:	ee10 0a10 	vmov	r0, s0
   bdca2:	462b      	mov	r3, r5
   bdca4:	4629      	mov	r1, r5
   bdca6:	f7ff f859 	bl	bcd5c <__aeabi_dcmpun>
   bdcaa:	b190      	cbz	r0, bdcd2 <strtof+0x56>
   bdcac:	2d00      	cmp	r5, #0
   bdcae:	481d      	ldr	r0, [pc, #116]	; (bdd24 <strtof+0xa8>)
   bdcb0:	da09      	bge.n	bdcc6 <strtof+0x4a>
   bdcb2:	f001 f98d 	bl	befd0 <nanf>
   bdcb6:	eeb1 8a40 	vneg.f32	s16, s0
   bdcba:	eeb0 0a48 	vmov.f32	s0, s16
   bdcbe:	ecbd 8b02 	vpop	{d8}
   bdcc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bdcc6:	ecbd 8b02 	vpop	{d8}
   bdcca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bdcce:	f001 b97f 	b.w	befd0 <nanf>
   bdcd2:	4620      	mov	r0, r4
   bdcd4:	4629      	mov	r1, r5
   bdcd6:	f7ff f877 	bl	bcdc8 <__aeabi_d2f>
   bdcda:	ee08 0a10 	vmov	s16, r0
   bdcde:	eddf 7a12 	vldr	s15, [pc, #72]	; bdd28 <strtof+0xac>
   bdce2:	eeb0 7ac8 	vabs.f32	s14, s16
   bdce6:	eeb4 7a67 	vcmp.f32	s14, s15
   bdcea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bdcee:	dde4      	ble.n	bdcba <strtof+0x3e>
   bdcf0:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   bdcf4:	4b0d      	ldr	r3, [pc, #52]	; (bdd2c <strtof+0xb0>)
   bdcf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bdcfa:	4620      	mov	r0, r4
   bdcfc:	4639      	mov	r1, r7
   bdcfe:	f7ff f82d 	bl	bcd5c <__aeabi_dcmpun>
   bdd02:	b940      	cbnz	r0, bdd16 <strtof+0x9a>
   bdd04:	4b09      	ldr	r3, [pc, #36]	; (bdd2c <strtof+0xb0>)
   bdd06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bdd0a:	4620      	mov	r0, r4
   bdd0c:	4639      	mov	r1, r7
   bdd0e:	f7ff f807 	bl	bcd20 <__aeabi_dcmple>
   bdd12:	2800      	cmp	r0, #0
   bdd14:	d0d1      	beq.n	bdcba <strtof+0x3e>
   bdd16:	f8d8 3000 	ldr.w	r3, [r8]
   bdd1a:	2222      	movs	r2, #34	; 0x22
   bdd1c:	601a      	str	r2, [r3, #0]
   bdd1e:	e7cc      	b.n	bdcba <strtof+0x3e>
   bdd20:	200350cc 	.word	0x200350cc
   bdd24:	000bf5d2 	.word	0x000bf5d2
   bdd28:	7f7fffff 	.word	0x7f7fffff
   bdd2c:	7fefffff 	.word	0x7fefffff
   bdd30:	20035060 	.word	0x20035060

000bdd34 <_strtol_l.constprop.0>:
   bdd34:	2b01      	cmp	r3, #1
   bdd36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bdd3a:	d001      	beq.n	bdd40 <_strtol_l.constprop.0+0xc>
   bdd3c:	2b24      	cmp	r3, #36	; 0x24
   bdd3e:	d906      	bls.n	bdd4e <_strtol_l.constprop.0+0x1a>
   bdd40:	f7fb fd8a 	bl	b9858 <__errno>
   bdd44:	2316      	movs	r3, #22
   bdd46:	6003      	str	r3, [r0, #0]
   bdd48:	2000      	movs	r0, #0
   bdd4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bdd4e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bde34 <_strtol_l.constprop.0+0x100>
   bdd52:	460d      	mov	r5, r1
   bdd54:	462e      	mov	r6, r5
   bdd56:	f815 4b01 	ldrb.w	r4, [r5], #1
   bdd5a:	f814 700c 	ldrb.w	r7, [r4, ip]
   bdd5e:	f017 0708 	ands.w	r7, r7, #8
   bdd62:	d1f7      	bne.n	bdd54 <_strtol_l.constprop.0+0x20>
   bdd64:	2c2d      	cmp	r4, #45	; 0x2d
   bdd66:	d132      	bne.n	bddce <_strtol_l.constprop.0+0x9a>
   bdd68:	782c      	ldrb	r4, [r5, #0]
   bdd6a:	2701      	movs	r7, #1
   bdd6c:	1cb5      	adds	r5, r6, #2
   bdd6e:	2b00      	cmp	r3, #0
   bdd70:	d05b      	beq.n	bde2a <_strtol_l.constprop.0+0xf6>
   bdd72:	2b10      	cmp	r3, #16
   bdd74:	d109      	bne.n	bdd8a <_strtol_l.constprop.0+0x56>
   bdd76:	2c30      	cmp	r4, #48	; 0x30
   bdd78:	d107      	bne.n	bdd8a <_strtol_l.constprop.0+0x56>
   bdd7a:	782c      	ldrb	r4, [r5, #0]
   bdd7c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bdd80:	2c58      	cmp	r4, #88	; 0x58
   bdd82:	d14d      	bne.n	bde20 <_strtol_l.constprop.0+0xec>
   bdd84:	786c      	ldrb	r4, [r5, #1]
   bdd86:	2310      	movs	r3, #16
   bdd88:	3502      	adds	r5, #2
   bdd8a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bdd8e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bdd92:	f04f 0c00 	mov.w	ip, #0
   bdd96:	fbb8 f9f3 	udiv	r9, r8, r3
   bdd9a:	4666      	mov	r6, ip
   bdd9c:	fb03 8a19 	mls	sl, r3, r9, r8
   bdda0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bdda4:	f1be 0f09 	cmp.w	lr, #9
   bdda8:	d816      	bhi.n	bddd8 <_strtol_l.constprop.0+0xa4>
   bddaa:	4674      	mov	r4, lr
   bddac:	42a3      	cmp	r3, r4
   bddae:	dd24      	ble.n	bddfa <_strtol_l.constprop.0+0xc6>
   bddb0:	f1bc 0f00 	cmp.w	ip, #0
   bddb4:	db1e      	blt.n	bddf4 <_strtol_l.constprop.0+0xc0>
   bddb6:	45b1      	cmp	r9, r6
   bddb8:	d31c      	bcc.n	bddf4 <_strtol_l.constprop.0+0xc0>
   bddba:	d101      	bne.n	bddc0 <_strtol_l.constprop.0+0x8c>
   bddbc:	45a2      	cmp	sl, r4
   bddbe:	db19      	blt.n	bddf4 <_strtol_l.constprop.0+0xc0>
   bddc0:	fb06 4603 	mla	r6, r6, r3, r4
   bddc4:	f04f 0c01 	mov.w	ip, #1
   bddc8:	f815 4b01 	ldrb.w	r4, [r5], #1
   bddcc:	e7e8      	b.n	bdda0 <_strtol_l.constprop.0+0x6c>
   bddce:	2c2b      	cmp	r4, #43	; 0x2b
   bddd0:	bf04      	itt	eq
   bddd2:	782c      	ldrbeq	r4, [r5, #0]
   bddd4:	1cb5      	addeq	r5, r6, #2
   bddd6:	e7ca      	b.n	bdd6e <_strtol_l.constprop.0+0x3a>
   bddd8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bdddc:	f1be 0f19 	cmp.w	lr, #25
   bdde0:	d801      	bhi.n	bdde6 <_strtol_l.constprop.0+0xb2>
   bdde2:	3c37      	subs	r4, #55	; 0x37
   bdde4:	e7e2      	b.n	bddac <_strtol_l.constprop.0+0x78>
   bdde6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bddea:	f1be 0f19 	cmp.w	lr, #25
   bddee:	d804      	bhi.n	bddfa <_strtol_l.constprop.0+0xc6>
   bddf0:	3c57      	subs	r4, #87	; 0x57
   bddf2:	e7db      	b.n	bddac <_strtol_l.constprop.0+0x78>
   bddf4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bddf8:	e7e6      	b.n	bddc8 <_strtol_l.constprop.0+0x94>
   bddfa:	f1bc 0f00 	cmp.w	ip, #0
   bddfe:	da05      	bge.n	bde0c <_strtol_l.constprop.0+0xd8>
   bde00:	2322      	movs	r3, #34	; 0x22
   bde02:	6003      	str	r3, [r0, #0]
   bde04:	4646      	mov	r6, r8
   bde06:	b942      	cbnz	r2, bde1a <_strtol_l.constprop.0+0xe6>
   bde08:	4630      	mov	r0, r6
   bde0a:	e79e      	b.n	bdd4a <_strtol_l.constprop.0+0x16>
   bde0c:	b107      	cbz	r7, bde10 <_strtol_l.constprop.0+0xdc>
   bde0e:	4276      	negs	r6, r6
   bde10:	2a00      	cmp	r2, #0
   bde12:	d0f9      	beq.n	bde08 <_strtol_l.constprop.0+0xd4>
   bde14:	f1bc 0f00 	cmp.w	ip, #0
   bde18:	d000      	beq.n	bde1c <_strtol_l.constprop.0+0xe8>
   bde1a:	1e69      	subs	r1, r5, #1
   bde1c:	6011      	str	r1, [r2, #0]
   bde1e:	e7f3      	b.n	bde08 <_strtol_l.constprop.0+0xd4>
   bde20:	2430      	movs	r4, #48	; 0x30
   bde22:	2b00      	cmp	r3, #0
   bde24:	d1b1      	bne.n	bdd8a <_strtol_l.constprop.0+0x56>
   bde26:	2308      	movs	r3, #8
   bde28:	e7af      	b.n	bdd8a <_strtol_l.constprop.0+0x56>
   bde2a:	2c30      	cmp	r4, #48	; 0x30
   bde2c:	d0a5      	beq.n	bdd7a <_strtol_l.constprop.0+0x46>
   bde2e:	230a      	movs	r3, #10
   bde30:	e7ab      	b.n	bdd8a <_strtol_l.constprop.0+0x56>
   bde32:	bf00      	nop
   bde34:	000bfbc9 	.word	0x000bfbc9

000bde38 <strtol>:
   bde38:	4613      	mov	r3, r2
   bde3a:	460a      	mov	r2, r1
   bde3c:	4601      	mov	r1, r0
   bde3e:	4802      	ldr	r0, [pc, #8]	; (bde48 <strtol+0x10>)
   bde40:	6800      	ldr	r0, [r0, #0]
   bde42:	f7ff bf77 	b.w	bdd34 <_strtol_l.constprop.0>
   bde46:	bf00      	nop
   bde48:	20035060 	.word	0x20035060

000bde4c <__register_exitproc>:
   bde4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bde50:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bdf0c <__register_exitproc+0xc0>
   bde54:	4606      	mov	r6, r0
   bde56:	f8d8 0000 	ldr.w	r0, [r8]
   bde5a:	461f      	mov	r7, r3
   bde5c:	460d      	mov	r5, r1
   bde5e:	4691      	mov	r9, r2
   bde60:	f000 fbc6 	bl	be5f0 <__retarget_lock_acquire_recursive>
   bde64:	4b25      	ldr	r3, [pc, #148]	; (bdefc <__register_exitproc+0xb0>)
   bde66:	681c      	ldr	r4, [r3, #0]
   bde68:	b934      	cbnz	r4, bde78 <__register_exitproc+0x2c>
   bde6a:	4c25      	ldr	r4, [pc, #148]	; (bdf00 <__register_exitproc+0xb4>)
   bde6c:	601c      	str	r4, [r3, #0]
   bde6e:	4b25      	ldr	r3, [pc, #148]	; (bdf04 <__register_exitproc+0xb8>)
   bde70:	b113      	cbz	r3, bde78 <__register_exitproc+0x2c>
   bde72:	681b      	ldr	r3, [r3, #0]
   bde74:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bde78:	6863      	ldr	r3, [r4, #4]
   bde7a:	2b1f      	cmp	r3, #31
   bde7c:	dd07      	ble.n	bde8e <__register_exitproc+0x42>
   bde7e:	f8d8 0000 	ldr.w	r0, [r8]
   bde82:	f000 fbb7 	bl	be5f4 <__retarget_lock_release_recursive>
   bde86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bde8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bde8e:	b34e      	cbz	r6, bdee4 <__register_exitproc+0x98>
   bde90:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bde94:	b988      	cbnz	r0, bdeba <__register_exitproc+0x6e>
   bde96:	4b1c      	ldr	r3, [pc, #112]	; (bdf08 <__register_exitproc+0xbc>)
   bde98:	b923      	cbnz	r3, bdea4 <__register_exitproc+0x58>
   bde9a:	f8d8 0000 	ldr.w	r0, [r8]
   bde9e:	f000 fba8 	bl	be5f2 <__retarget_lock_release>
   bdea2:	e7f0      	b.n	bde86 <__register_exitproc+0x3a>
   bdea4:	f44f 7084 	mov.w	r0, #264	; 0x108
   bdea8:	f7fb fc9e 	bl	b97e8 <malloc>
   bdeac:	2800      	cmp	r0, #0
   bdeae:	d0f4      	beq.n	bde9a <__register_exitproc+0x4e>
   bdeb0:	2300      	movs	r3, #0
   bdeb2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bdeb6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bdeba:	6863      	ldr	r3, [r4, #4]
   bdebc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bdec0:	2201      	movs	r2, #1
   bdec2:	409a      	lsls	r2, r3
   bdec4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bdec8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bdecc:	4313      	orrs	r3, r2
   bdece:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bded2:	2e02      	cmp	r6, #2
   bded4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bded8:	bf02      	ittt	eq
   bdeda:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bdede:	4313      	orreq	r3, r2
   bdee0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bdee4:	6863      	ldr	r3, [r4, #4]
   bdee6:	f8d8 0000 	ldr.w	r0, [r8]
   bdeea:	1c5a      	adds	r2, r3, #1
   bdeec:	3302      	adds	r3, #2
   bdeee:	6062      	str	r2, [r4, #4]
   bdef0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bdef4:	f000 fb7e 	bl	be5f4 <__retarget_lock_release_recursive>
   bdef8:	2000      	movs	r0, #0
   bdefa:	e7c6      	b.n	bde8a <__register_exitproc+0x3e>
   bdefc:	2003e7e8 	.word	0x2003e7e8
   bdf00:	2003e75c 	.word	0x2003e75c
   bdf04:	00000000 	.word	0x00000000
   bdf08:	000b97e9 	.word	0x000b97e9
   bdf0c:	200350c4 	.word	0x200350c4

000bdf10 <rshift>:
   bdf10:	6903      	ldr	r3, [r0, #16]
   bdf12:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bdf16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bdf1a:	ea4f 1261 	mov.w	r2, r1, asr #5
   bdf1e:	f100 0414 	add.w	r4, r0, #20
   bdf22:	dd45      	ble.n	bdfb0 <rshift+0xa0>
   bdf24:	f011 011f 	ands.w	r1, r1, #31
   bdf28:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bdf2c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bdf30:	d10c      	bne.n	bdf4c <rshift+0x3c>
   bdf32:	f100 0710 	add.w	r7, r0, #16
   bdf36:	4629      	mov	r1, r5
   bdf38:	42b1      	cmp	r1, r6
   bdf3a:	d334      	bcc.n	bdfa6 <rshift+0x96>
   bdf3c:	1a9b      	subs	r3, r3, r2
   bdf3e:	009b      	lsls	r3, r3, #2
   bdf40:	1eea      	subs	r2, r5, #3
   bdf42:	4296      	cmp	r6, r2
   bdf44:	bf38      	it	cc
   bdf46:	2300      	movcc	r3, #0
   bdf48:	4423      	add	r3, r4
   bdf4a:	e015      	b.n	bdf78 <rshift+0x68>
   bdf4c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bdf50:	f1c1 0820 	rsb	r8, r1, #32
   bdf54:	40cf      	lsrs	r7, r1
   bdf56:	f105 0e04 	add.w	lr, r5, #4
   bdf5a:	46a1      	mov	r9, r4
   bdf5c:	4576      	cmp	r6, lr
   bdf5e:	46f4      	mov	ip, lr
   bdf60:	d815      	bhi.n	bdf8e <rshift+0x7e>
   bdf62:	1a9a      	subs	r2, r3, r2
   bdf64:	0092      	lsls	r2, r2, #2
   bdf66:	3a04      	subs	r2, #4
   bdf68:	3501      	adds	r5, #1
   bdf6a:	42ae      	cmp	r6, r5
   bdf6c:	bf38      	it	cc
   bdf6e:	2200      	movcc	r2, #0
   bdf70:	18a3      	adds	r3, r4, r2
   bdf72:	50a7      	str	r7, [r4, r2]
   bdf74:	b107      	cbz	r7, bdf78 <rshift+0x68>
   bdf76:	3304      	adds	r3, #4
   bdf78:	1b1a      	subs	r2, r3, r4
   bdf7a:	42a3      	cmp	r3, r4
   bdf7c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bdf80:	bf08      	it	eq
   bdf82:	2300      	moveq	r3, #0
   bdf84:	6102      	str	r2, [r0, #16]
   bdf86:	bf08      	it	eq
   bdf88:	6143      	streq	r3, [r0, #20]
   bdf8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bdf8e:	f8dc c000 	ldr.w	ip, [ip]
   bdf92:	fa0c fc08 	lsl.w	ip, ip, r8
   bdf96:	ea4c 0707 	orr.w	r7, ip, r7
   bdf9a:	f849 7b04 	str.w	r7, [r9], #4
   bdf9e:	f85e 7b04 	ldr.w	r7, [lr], #4
   bdfa2:	40cf      	lsrs	r7, r1
   bdfa4:	e7da      	b.n	bdf5c <rshift+0x4c>
   bdfa6:	f851 cb04 	ldr.w	ip, [r1], #4
   bdfaa:	f847 cf04 	str.w	ip, [r7, #4]!
   bdfae:	e7c3      	b.n	bdf38 <rshift+0x28>
   bdfb0:	4623      	mov	r3, r4
   bdfb2:	e7e1      	b.n	bdf78 <rshift+0x68>

000bdfb4 <__hexdig_fun>:
   bdfb4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bdfb8:	2b09      	cmp	r3, #9
   bdfba:	d802      	bhi.n	bdfc2 <__hexdig_fun+0xe>
   bdfbc:	3820      	subs	r0, #32
   bdfbe:	b2c0      	uxtb	r0, r0
   bdfc0:	4770      	bx	lr
   bdfc2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bdfc6:	2b05      	cmp	r3, #5
   bdfc8:	d801      	bhi.n	bdfce <__hexdig_fun+0x1a>
   bdfca:	3847      	subs	r0, #71	; 0x47
   bdfcc:	e7f7      	b.n	bdfbe <__hexdig_fun+0xa>
   bdfce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bdfd2:	2b05      	cmp	r3, #5
   bdfd4:	d801      	bhi.n	bdfda <__hexdig_fun+0x26>
   bdfd6:	3827      	subs	r0, #39	; 0x27
   bdfd8:	e7f1      	b.n	bdfbe <__hexdig_fun+0xa>
   bdfda:	2000      	movs	r0, #0
   bdfdc:	4770      	bx	lr
	...

000bdfe0 <__gethex>:
   bdfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdfe4:	ed2d 8b02 	vpush	{d8}
   bdfe8:	b089      	sub	sp, #36	; 0x24
   bdfea:	ee08 0a10 	vmov	s16, r0
   bdfee:	9304      	str	r3, [sp, #16]
   bdff0:	4bb4      	ldr	r3, [pc, #720]	; (be2c4 <__gethex+0x2e4>)
   bdff2:	681b      	ldr	r3, [r3, #0]
   bdff4:	9301      	str	r3, [sp, #4]
   bdff6:	4618      	mov	r0, r3
   bdff8:	468b      	mov	fp, r1
   bdffa:	4690      	mov	r8, r2
   bdffc:	f7fe ffdc 	bl	bcfb8 <strlen>
   be000:	9b01      	ldr	r3, [sp, #4]
   be002:	f8db 2000 	ldr.w	r2, [fp]
   be006:	4403      	add	r3, r0
   be008:	4682      	mov	sl, r0
   be00a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   be00e:	9305      	str	r3, [sp, #20]
   be010:	1c93      	adds	r3, r2, #2
   be012:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   be016:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   be01a:	32fe      	adds	r2, #254	; 0xfe
   be01c:	18d1      	adds	r1, r2, r3
   be01e:	461f      	mov	r7, r3
   be020:	f813 0b01 	ldrb.w	r0, [r3], #1
   be024:	9100      	str	r1, [sp, #0]
   be026:	2830      	cmp	r0, #48	; 0x30
   be028:	d0f8      	beq.n	be01c <__gethex+0x3c>
   be02a:	f7ff ffc3 	bl	bdfb4 <__hexdig_fun>
   be02e:	4604      	mov	r4, r0
   be030:	2800      	cmp	r0, #0
   be032:	d13a      	bne.n	be0aa <__gethex+0xca>
   be034:	9901      	ldr	r1, [sp, #4]
   be036:	4652      	mov	r2, sl
   be038:	4638      	mov	r0, r7
   be03a:	f7fe ffc5 	bl	bcfc8 <strncmp>
   be03e:	4605      	mov	r5, r0
   be040:	2800      	cmp	r0, #0
   be042:	d168      	bne.n	be116 <__gethex+0x136>
   be044:	f817 000a 	ldrb.w	r0, [r7, sl]
   be048:	eb07 060a 	add.w	r6, r7, sl
   be04c:	f7ff ffb2 	bl	bdfb4 <__hexdig_fun>
   be050:	2800      	cmp	r0, #0
   be052:	d062      	beq.n	be11a <__gethex+0x13a>
   be054:	4633      	mov	r3, r6
   be056:	7818      	ldrb	r0, [r3, #0]
   be058:	2830      	cmp	r0, #48	; 0x30
   be05a:	461f      	mov	r7, r3
   be05c:	f103 0301 	add.w	r3, r3, #1
   be060:	d0f9      	beq.n	be056 <__gethex+0x76>
   be062:	f7ff ffa7 	bl	bdfb4 <__hexdig_fun>
   be066:	2301      	movs	r3, #1
   be068:	fab0 f480 	clz	r4, r0
   be06c:	0964      	lsrs	r4, r4, #5
   be06e:	4635      	mov	r5, r6
   be070:	9300      	str	r3, [sp, #0]
   be072:	463a      	mov	r2, r7
   be074:	4616      	mov	r6, r2
   be076:	3201      	adds	r2, #1
   be078:	7830      	ldrb	r0, [r6, #0]
   be07a:	f7ff ff9b 	bl	bdfb4 <__hexdig_fun>
   be07e:	2800      	cmp	r0, #0
   be080:	d1f8      	bne.n	be074 <__gethex+0x94>
   be082:	9901      	ldr	r1, [sp, #4]
   be084:	4652      	mov	r2, sl
   be086:	4630      	mov	r0, r6
   be088:	f7fe ff9e 	bl	bcfc8 <strncmp>
   be08c:	b980      	cbnz	r0, be0b0 <__gethex+0xd0>
   be08e:	b94d      	cbnz	r5, be0a4 <__gethex+0xc4>
   be090:	eb06 050a 	add.w	r5, r6, sl
   be094:	462a      	mov	r2, r5
   be096:	4616      	mov	r6, r2
   be098:	3201      	adds	r2, #1
   be09a:	7830      	ldrb	r0, [r6, #0]
   be09c:	f7ff ff8a 	bl	bdfb4 <__hexdig_fun>
   be0a0:	2800      	cmp	r0, #0
   be0a2:	d1f8      	bne.n	be096 <__gethex+0xb6>
   be0a4:	1bad      	subs	r5, r5, r6
   be0a6:	00ad      	lsls	r5, r5, #2
   be0a8:	e004      	b.n	be0b4 <__gethex+0xd4>
   be0aa:	2400      	movs	r4, #0
   be0ac:	4625      	mov	r5, r4
   be0ae:	e7e0      	b.n	be072 <__gethex+0x92>
   be0b0:	2d00      	cmp	r5, #0
   be0b2:	d1f7      	bne.n	be0a4 <__gethex+0xc4>
   be0b4:	7833      	ldrb	r3, [r6, #0]
   be0b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   be0ba:	2b50      	cmp	r3, #80	; 0x50
   be0bc:	d13b      	bne.n	be136 <__gethex+0x156>
   be0be:	7873      	ldrb	r3, [r6, #1]
   be0c0:	2b2b      	cmp	r3, #43	; 0x2b
   be0c2:	d02c      	beq.n	be11e <__gethex+0x13e>
   be0c4:	2b2d      	cmp	r3, #45	; 0x2d
   be0c6:	d02e      	beq.n	be126 <__gethex+0x146>
   be0c8:	1c71      	adds	r1, r6, #1
   be0ca:	f04f 0900 	mov.w	r9, #0
   be0ce:	7808      	ldrb	r0, [r1, #0]
   be0d0:	f7ff ff70 	bl	bdfb4 <__hexdig_fun>
   be0d4:	1e43      	subs	r3, r0, #1
   be0d6:	b2db      	uxtb	r3, r3
   be0d8:	2b18      	cmp	r3, #24
   be0da:	d82c      	bhi.n	be136 <__gethex+0x156>
   be0dc:	f1a0 0210 	sub.w	r2, r0, #16
   be0e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   be0e4:	f7ff ff66 	bl	bdfb4 <__hexdig_fun>
   be0e8:	1e43      	subs	r3, r0, #1
   be0ea:	b2db      	uxtb	r3, r3
   be0ec:	2b18      	cmp	r3, #24
   be0ee:	d91d      	bls.n	be12c <__gethex+0x14c>
   be0f0:	f1b9 0f00 	cmp.w	r9, #0
   be0f4:	d000      	beq.n	be0f8 <__gethex+0x118>
   be0f6:	4252      	negs	r2, r2
   be0f8:	4415      	add	r5, r2
   be0fa:	f8cb 1000 	str.w	r1, [fp]
   be0fe:	b1e4      	cbz	r4, be13a <__gethex+0x15a>
   be100:	9b00      	ldr	r3, [sp, #0]
   be102:	2b00      	cmp	r3, #0
   be104:	bf14      	ite	ne
   be106:	2700      	movne	r7, #0
   be108:	2706      	moveq	r7, #6
   be10a:	4638      	mov	r0, r7
   be10c:	b009      	add	sp, #36	; 0x24
   be10e:	ecbd 8b02 	vpop	{d8}
   be112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be116:	463e      	mov	r6, r7
   be118:	4625      	mov	r5, r4
   be11a:	2401      	movs	r4, #1
   be11c:	e7ca      	b.n	be0b4 <__gethex+0xd4>
   be11e:	f04f 0900 	mov.w	r9, #0
   be122:	1cb1      	adds	r1, r6, #2
   be124:	e7d3      	b.n	be0ce <__gethex+0xee>
   be126:	f04f 0901 	mov.w	r9, #1
   be12a:	e7fa      	b.n	be122 <__gethex+0x142>
   be12c:	230a      	movs	r3, #10
   be12e:	fb03 0202 	mla	r2, r3, r2, r0
   be132:	3a10      	subs	r2, #16
   be134:	e7d4      	b.n	be0e0 <__gethex+0x100>
   be136:	4631      	mov	r1, r6
   be138:	e7df      	b.n	be0fa <__gethex+0x11a>
   be13a:	1bf3      	subs	r3, r6, r7
   be13c:	3b01      	subs	r3, #1
   be13e:	4621      	mov	r1, r4
   be140:	2b07      	cmp	r3, #7
   be142:	dc0b      	bgt.n	be15c <__gethex+0x17c>
   be144:	ee18 0a10 	vmov	r0, s16
   be148:	f000 fa68 	bl	be61c <_Balloc>
   be14c:	4604      	mov	r4, r0
   be14e:	b940      	cbnz	r0, be162 <__gethex+0x182>
   be150:	4b5d      	ldr	r3, [pc, #372]	; (be2c8 <__gethex+0x2e8>)
   be152:	4602      	mov	r2, r0
   be154:	21de      	movs	r1, #222	; 0xde
   be156:	485d      	ldr	r0, [pc, #372]	; (be2cc <__gethex+0x2ec>)
   be158:	f7fb fb86 	bl	b9868 <__assert_func>
   be15c:	3101      	adds	r1, #1
   be15e:	105b      	asrs	r3, r3, #1
   be160:	e7ee      	b.n	be140 <__gethex+0x160>
   be162:	f100 0914 	add.w	r9, r0, #20
   be166:	f04f 0b00 	mov.w	fp, #0
   be16a:	f1ca 0301 	rsb	r3, sl, #1
   be16e:	f8cd 9008 	str.w	r9, [sp, #8]
   be172:	f8cd b000 	str.w	fp, [sp]
   be176:	9306      	str	r3, [sp, #24]
   be178:	42b7      	cmp	r7, r6
   be17a:	d340      	bcc.n	be1fe <__gethex+0x21e>
   be17c:	9802      	ldr	r0, [sp, #8]
   be17e:	9b00      	ldr	r3, [sp, #0]
   be180:	f840 3b04 	str.w	r3, [r0], #4
   be184:	eba0 0009 	sub.w	r0, r0, r9
   be188:	1080      	asrs	r0, r0, #2
   be18a:	0146      	lsls	r6, r0, #5
   be18c:	6120      	str	r0, [r4, #16]
   be18e:	4618      	mov	r0, r3
   be190:	f000 fb36 	bl	be800 <__hi0bits>
   be194:	1a30      	subs	r0, r6, r0
   be196:	f8d8 6000 	ldr.w	r6, [r8]
   be19a:	42b0      	cmp	r0, r6
   be19c:	dd63      	ble.n	be266 <__gethex+0x286>
   be19e:	1b87      	subs	r7, r0, r6
   be1a0:	4639      	mov	r1, r7
   be1a2:	4620      	mov	r0, r4
   be1a4:	f000 feda 	bl	bef5c <__any_on>
   be1a8:	4682      	mov	sl, r0
   be1aa:	b1a8      	cbz	r0, be1d8 <__gethex+0x1f8>
   be1ac:	1e7b      	subs	r3, r7, #1
   be1ae:	1159      	asrs	r1, r3, #5
   be1b0:	f003 021f 	and.w	r2, r3, #31
   be1b4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   be1b8:	f04f 0a01 	mov.w	sl, #1
   be1bc:	fa0a f202 	lsl.w	r2, sl, r2
   be1c0:	420a      	tst	r2, r1
   be1c2:	d009      	beq.n	be1d8 <__gethex+0x1f8>
   be1c4:	4553      	cmp	r3, sl
   be1c6:	dd05      	ble.n	be1d4 <__gethex+0x1f4>
   be1c8:	1eb9      	subs	r1, r7, #2
   be1ca:	4620      	mov	r0, r4
   be1cc:	f000 fec6 	bl	bef5c <__any_on>
   be1d0:	2800      	cmp	r0, #0
   be1d2:	d145      	bne.n	be260 <__gethex+0x280>
   be1d4:	f04f 0a02 	mov.w	sl, #2
   be1d8:	4639      	mov	r1, r7
   be1da:	4620      	mov	r0, r4
   be1dc:	f7ff fe98 	bl	bdf10 <rshift>
   be1e0:	443d      	add	r5, r7
   be1e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   be1e6:	42ab      	cmp	r3, r5
   be1e8:	da4c      	bge.n	be284 <__gethex+0x2a4>
   be1ea:	ee18 0a10 	vmov	r0, s16
   be1ee:	4621      	mov	r1, r4
   be1f0:	f000 fa54 	bl	be69c <_Bfree>
   be1f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   be1f6:	2300      	movs	r3, #0
   be1f8:	6013      	str	r3, [r2, #0]
   be1fa:	27a3      	movs	r7, #163	; 0xa3
   be1fc:	e785      	b.n	be10a <__gethex+0x12a>
   be1fe:	1e73      	subs	r3, r6, #1
   be200:	9a05      	ldr	r2, [sp, #20]
   be202:	9303      	str	r3, [sp, #12]
   be204:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   be208:	4293      	cmp	r3, r2
   be20a:	d019      	beq.n	be240 <__gethex+0x260>
   be20c:	f1bb 0f20 	cmp.w	fp, #32
   be210:	d107      	bne.n	be222 <__gethex+0x242>
   be212:	9b02      	ldr	r3, [sp, #8]
   be214:	9a00      	ldr	r2, [sp, #0]
   be216:	f843 2b04 	str.w	r2, [r3], #4
   be21a:	9302      	str	r3, [sp, #8]
   be21c:	2300      	movs	r3, #0
   be21e:	9300      	str	r3, [sp, #0]
   be220:	469b      	mov	fp, r3
   be222:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   be226:	f7ff fec5 	bl	bdfb4 <__hexdig_fun>
   be22a:	9b00      	ldr	r3, [sp, #0]
   be22c:	f000 000f 	and.w	r0, r0, #15
   be230:	fa00 f00b 	lsl.w	r0, r0, fp
   be234:	4303      	orrs	r3, r0
   be236:	9300      	str	r3, [sp, #0]
   be238:	f10b 0b04 	add.w	fp, fp, #4
   be23c:	9b03      	ldr	r3, [sp, #12]
   be23e:	e00d      	b.n	be25c <__gethex+0x27c>
   be240:	9b03      	ldr	r3, [sp, #12]
   be242:	9a06      	ldr	r2, [sp, #24]
   be244:	4413      	add	r3, r2
   be246:	42bb      	cmp	r3, r7
   be248:	d3e0      	bcc.n	be20c <__gethex+0x22c>
   be24a:	4618      	mov	r0, r3
   be24c:	9901      	ldr	r1, [sp, #4]
   be24e:	9307      	str	r3, [sp, #28]
   be250:	4652      	mov	r2, sl
   be252:	f7fe feb9 	bl	bcfc8 <strncmp>
   be256:	9b07      	ldr	r3, [sp, #28]
   be258:	2800      	cmp	r0, #0
   be25a:	d1d7      	bne.n	be20c <__gethex+0x22c>
   be25c:	461e      	mov	r6, r3
   be25e:	e78b      	b.n	be178 <__gethex+0x198>
   be260:	f04f 0a03 	mov.w	sl, #3
   be264:	e7b8      	b.n	be1d8 <__gethex+0x1f8>
   be266:	da0a      	bge.n	be27e <__gethex+0x29e>
   be268:	1a37      	subs	r7, r6, r0
   be26a:	4621      	mov	r1, r4
   be26c:	ee18 0a10 	vmov	r0, s16
   be270:	463a      	mov	r2, r7
   be272:	f000 fc2f 	bl	bead4 <__lshift>
   be276:	1bed      	subs	r5, r5, r7
   be278:	4604      	mov	r4, r0
   be27a:	f100 0914 	add.w	r9, r0, #20
   be27e:	f04f 0a00 	mov.w	sl, #0
   be282:	e7ae      	b.n	be1e2 <__gethex+0x202>
   be284:	f8d8 0004 	ldr.w	r0, [r8, #4]
   be288:	42a8      	cmp	r0, r5
   be28a:	dd72      	ble.n	be372 <__gethex+0x392>
   be28c:	1b45      	subs	r5, r0, r5
   be28e:	42ae      	cmp	r6, r5
   be290:	dc36      	bgt.n	be300 <__gethex+0x320>
   be292:	f8d8 300c 	ldr.w	r3, [r8, #12]
   be296:	2b02      	cmp	r3, #2
   be298:	d02a      	beq.n	be2f0 <__gethex+0x310>
   be29a:	2b03      	cmp	r3, #3
   be29c:	d02c      	beq.n	be2f8 <__gethex+0x318>
   be29e:	2b01      	cmp	r3, #1
   be2a0:	d11c      	bne.n	be2dc <__gethex+0x2fc>
   be2a2:	42ae      	cmp	r6, r5
   be2a4:	d11a      	bne.n	be2dc <__gethex+0x2fc>
   be2a6:	2e01      	cmp	r6, #1
   be2a8:	d112      	bne.n	be2d0 <__gethex+0x2f0>
   be2aa:	9a04      	ldr	r2, [sp, #16]
   be2ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
   be2b0:	6013      	str	r3, [r2, #0]
   be2b2:	2301      	movs	r3, #1
   be2b4:	6123      	str	r3, [r4, #16]
   be2b6:	f8c9 3000 	str.w	r3, [r9]
   be2ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
   be2bc:	2762      	movs	r7, #98	; 0x62
   be2be:	601c      	str	r4, [r3, #0]
   be2c0:	e723      	b.n	be10a <__gethex+0x12a>
   be2c2:	bf00      	nop
   be2c4:	000bfd3c 	.word	0x000bfd3c
   be2c8:	000bfcc9 	.word	0x000bfcc9
   be2cc:	000bfcda 	.word	0x000bfcda
   be2d0:	1e71      	subs	r1, r6, #1
   be2d2:	4620      	mov	r0, r4
   be2d4:	f000 fe42 	bl	bef5c <__any_on>
   be2d8:	2800      	cmp	r0, #0
   be2da:	d1e6      	bne.n	be2aa <__gethex+0x2ca>
   be2dc:	ee18 0a10 	vmov	r0, s16
   be2e0:	4621      	mov	r1, r4
   be2e2:	f000 f9db 	bl	be69c <_Bfree>
   be2e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   be2e8:	2300      	movs	r3, #0
   be2ea:	6013      	str	r3, [r2, #0]
   be2ec:	2750      	movs	r7, #80	; 0x50
   be2ee:	e70c      	b.n	be10a <__gethex+0x12a>
   be2f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   be2f2:	2b00      	cmp	r3, #0
   be2f4:	d1f2      	bne.n	be2dc <__gethex+0x2fc>
   be2f6:	e7d8      	b.n	be2aa <__gethex+0x2ca>
   be2f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   be2fa:	2b00      	cmp	r3, #0
   be2fc:	d1d5      	bne.n	be2aa <__gethex+0x2ca>
   be2fe:	e7ed      	b.n	be2dc <__gethex+0x2fc>
   be300:	1e6f      	subs	r7, r5, #1
   be302:	f1ba 0f00 	cmp.w	sl, #0
   be306:	d131      	bne.n	be36c <__gethex+0x38c>
   be308:	b127      	cbz	r7, be314 <__gethex+0x334>
   be30a:	4639      	mov	r1, r7
   be30c:	4620      	mov	r0, r4
   be30e:	f000 fe25 	bl	bef5c <__any_on>
   be312:	4682      	mov	sl, r0
   be314:	117b      	asrs	r3, r7, #5
   be316:	2101      	movs	r1, #1
   be318:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   be31c:	f007 071f 	and.w	r7, r7, #31
   be320:	fa01 f707 	lsl.w	r7, r1, r7
   be324:	421f      	tst	r7, r3
   be326:	4629      	mov	r1, r5
   be328:	4620      	mov	r0, r4
   be32a:	bf18      	it	ne
   be32c:	f04a 0a02 	orrne.w	sl, sl, #2
   be330:	1b76      	subs	r6, r6, r5
   be332:	f7ff fded 	bl	bdf10 <rshift>
   be336:	f8d8 5004 	ldr.w	r5, [r8, #4]
   be33a:	2702      	movs	r7, #2
   be33c:	f1ba 0f00 	cmp.w	sl, #0
   be340:	d048      	beq.n	be3d4 <__gethex+0x3f4>
   be342:	f8d8 300c 	ldr.w	r3, [r8, #12]
   be346:	2b02      	cmp	r3, #2
   be348:	d015      	beq.n	be376 <__gethex+0x396>
   be34a:	2b03      	cmp	r3, #3
   be34c:	d017      	beq.n	be37e <__gethex+0x39e>
   be34e:	2b01      	cmp	r3, #1
   be350:	d109      	bne.n	be366 <__gethex+0x386>
   be352:	f01a 0f02 	tst.w	sl, #2
   be356:	d006      	beq.n	be366 <__gethex+0x386>
   be358:	f8d9 0000 	ldr.w	r0, [r9]
   be35c:	ea4a 0a00 	orr.w	sl, sl, r0
   be360:	f01a 0f01 	tst.w	sl, #1
   be364:	d10e      	bne.n	be384 <__gethex+0x3a4>
   be366:	f047 0710 	orr.w	r7, r7, #16
   be36a:	e033      	b.n	be3d4 <__gethex+0x3f4>
   be36c:	f04f 0a01 	mov.w	sl, #1
   be370:	e7d0      	b.n	be314 <__gethex+0x334>
   be372:	2701      	movs	r7, #1
   be374:	e7e2      	b.n	be33c <__gethex+0x35c>
   be376:	9b15      	ldr	r3, [sp, #84]	; 0x54
   be378:	f1c3 0301 	rsb	r3, r3, #1
   be37c:	9315      	str	r3, [sp, #84]	; 0x54
   be37e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   be380:	2b00      	cmp	r3, #0
   be382:	d0f0      	beq.n	be366 <__gethex+0x386>
   be384:	f8d4 b010 	ldr.w	fp, [r4, #16]
   be388:	f104 0314 	add.w	r3, r4, #20
   be38c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   be390:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   be394:	f04f 0c00 	mov.w	ip, #0
   be398:	4618      	mov	r0, r3
   be39a:	f853 2b04 	ldr.w	r2, [r3], #4
   be39e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   be3a2:	d01c      	beq.n	be3de <__gethex+0x3fe>
   be3a4:	3201      	adds	r2, #1
   be3a6:	6002      	str	r2, [r0, #0]
   be3a8:	2f02      	cmp	r7, #2
   be3aa:	f104 0314 	add.w	r3, r4, #20
   be3ae:	d13f      	bne.n	be430 <__gethex+0x450>
   be3b0:	f8d8 2000 	ldr.w	r2, [r8]
   be3b4:	3a01      	subs	r2, #1
   be3b6:	42b2      	cmp	r2, r6
   be3b8:	d10a      	bne.n	be3d0 <__gethex+0x3f0>
   be3ba:	1171      	asrs	r1, r6, #5
   be3bc:	2201      	movs	r2, #1
   be3be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   be3c2:	f006 061f 	and.w	r6, r6, #31
   be3c6:	fa02 f606 	lsl.w	r6, r2, r6
   be3ca:	421e      	tst	r6, r3
   be3cc:	bf18      	it	ne
   be3ce:	4617      	movne	r7, r2
   be3d0:	f047 0720 	orr.w	r7, r7, #32
   be3d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   be3d6:	601c      	str	r4, [r3, #0]
   be3d8:	9b04      	ldr	r3, [sp, #16]
   be3da:	601d      	str	r5, [r3, #0]
   be3dc:	e695      	b.n	be10a <__gethex+0x12a>
   be3de:	4299      	cmp	r1, r3
   be3e0:	f843 cc04 	str.w	ip, [r3, #-4]
   be3e4:	d8d8      	bhi.n	be398 <__gethex+0x3b8>
   be3e6:	68a3      	ldr	r3, [r4, #8]
   be3e8:	459b      	cmp	fp, r3
   be3ea:	db19      	blt.n	be420 <__gethex+0x440>
   be3ec:	6861      	ldr	r1, [r4, #4]
   be3ee:	ee18 0a10 	vmov	r0, s16
   be3f2:	3101      	adds	r1, #1
   be3f4:	f000 f912 	bl	be61c <_Balloc>
   be3f8:	4681      	mov	r9, r0
   be3fa:	b918      	cbnz	r0, be404 <__gethex+0x424>
   be3fc:	4b1a      	ldr	r3, [pc, #104]	; (be468 <__gethex+0x488>)
   be3fe:	4602      	mov	r2, r0
   be400:	2184      	movs	r1, #132	; 0x84
   be402:	e6a8      	b.n	be156 <__gethex+0x176>
   be404:	6922      	ldr	r2, [r4, #16]
   be406:	3202      	adds	r2, #2
   be408:	f104 010c 	add.w	r1, r4, #12
   be40c:	0092      	lsls	r2, r2, #2
   be40e:	300c      	adds	r0, #12
   be410:	f7fe fd62 	bl	bced8 <memcpy>
   be414:	4621      	mov	r1, r4
   be416:	ee18 0a10 	vmov	r0, s16
   be41a:	f000 f93f 	bl	be69c <_Bfree>
   be41e:	464c      	mov	r4, r9
   be420:	6923      	ldr	r3, [r4, #16]
   be422:	1c5a      	adds	r2, r3, #1
   be424:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   be428:	6122      	str	r2, [r4, #16]
   be42a:	2201      	movs	r2, #1
   be42c:	615a      	str	r2, [r3, #20]
   be42e:	e7bb      	b.n	be3a8 <__gethex+0x3c8>
   be430:	6922      	ldr	r2, [r4, #16]
   be432:	455a      	cmp	r2, fp
   be434:	dd0b      	ble.n	be44e <__gethex+0x46e>
   be436:	2101      	movs	r1, #1
   be438:	4620      	mov	r0, r4
   be43a:	f7ff fd69 	bl	bdf10 <rshift>
   be43e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   be442:	3501      	adds	r5, #1
   be444:	42ab      	cmp	r3, r5
   be446:	f6ff aed0 	blt.w	be1ea <__gethex+0x20a>
   be44a:	2701      	movs	r7, #1
   be44c:	e7c0      	b.n	be3d0 <__gethex+0x3f0>
   be44e:	f016 061f 	ands.w	r6, r6, #31
   be452:	d0fa      	beq.n	be44a <__gethex+0x46a>
   be454:	4453      	add	r3, sl
   be456:	f1c6 0620 	rsb	r6, r6, #32
   be45a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   be45e:	f000 f9cf 	bl	be800 <__hi0bits>
   be462:	42b0      	cmp	r0, r6
   be464:	dbe7      	blt.n	be436 <__gethex+0x456>
   be466:	e7f0      	b.n	be44a <__gethex+0x46a>
   be468:	000bfcc9 	.word	0x000bfcc9

000be46c <L_shift>:
   be46c:	f1c2 0208 	rsb	r2, r2, #8
   be470:	0092      	lsls	r2, r2, #2
   be472:	b570      	push	{r4, r5, r6, lr}
   be474:	f1c2 0620 	rsb	r6, r2, #32
   be478:	6843      	ldr	r3, [r0, #4]
   be47a:	6804      	ldr	r4, [r0, #0]
   be47c:	fa03 f506 	lsl.w	r5, r3, r6
   be480:	432c      	orrs	r4, r5
   be482:	40d3      	lsrs	r3, r2
   be484:	6004      	str	r4, [r0, #0]
   be486:	f840 3f04 	str.w	r3, [r0, #4]!
   be48a:	4288      	cmp	r0, r1
   be48c:	d3f4      	bcc.n	be478 <L_shift+0xc>
   be48e:	bd70      	pop	{r4, r5, r6, pc}

000be490 <__match>:
   be490:	b530      	push	{r4, r5, lr}
   be492:	6803      	ldr	r3, [r0, #0]
   be494:	3301      	adds	r3, #1
   be496:	f811 4b01 	ldrb.w	r4, [r1], #1
   be49a:	b914      	cbnz	r4, be4a2 <__match+0x12>
   be49c:	6003      	str	r3, [r0, #0]
   be49e:	2001      	movs	r0, #1
   be4a0:	bd30      	pop	{r4, r5, pc}
   be4a2:	f813 2b01 	ldrb.w	r2, [r3], #1
   be4a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   be4aa:	2d19      	cmp	r5, #25
   be4ac:	bf98      	it	ls
   be4ae:	3220      	addls	r2, #32
   be4b0:	42a2      	cmp	r2, r4
   be4b2:	d0f0      	beq.n	be496 <__match+0x6>
   be4b4:	2000      	movs	r0, #0
   be4b6:	e7f3      	b.n	be4a0 <__match+0x10>

000be4b8 <__hexnan>:
   be4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be4bc:	680b      	ldr	r3, [r1, #0]
   be4be:	115e      	asrs	r6, r3, #5
   be4c0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   be4c4:	f013 031f 	ands.w	r3, r3, #31
   be4c8:	b087      	sub	sp, #28
   be4ca:	bf18      	it	ne
   be4cc:	3604      	addne	r6, #4
   be4ce:	2500      	movs	r5, #0
   be4d0:	1f37      	subs	r7, r6, #4
   be4d2:	4690      	mov	r8, r2
   be4d4:	6802      	ldr	r2, [r0, #0]
   be4d6:	9301      	str	r3, [sp, #4]
   be4d8:	4682      	mov	sl, r0
   be4da:	f846 5c04 	str.w	r5, [r6, #-4]
   be4de:	46b9      	mov	r9, r7
   be4e0:	463c      	mov	r4, r7
   be4e2:	9502      	str	r5, [sp, #8]
   be4e4:	46ab      	mov	fp, r5
   be4e6:	7851      	ldrb	r1, [r2, #1]
   be4e8:	1c53      	adds	r3, r2, #1
   be4ea:	9303      	str	r3, [sp, #12]
   be4ec:	b341      	cbz	r1, be540 <__hexnan+0x88>
   be4ee:	4608      	mov	r0, r1
   be4f0:	9205      	str	r2, [sp, #20]
   be4f2:	9104      	str	r1, [sp, #16]
   be4f4:	f7ff fd5e 	bl	bdfb4 <__hexdig_fun>
   be4f8:	2800      	cmp	r0, #0
   be4fa:	d14f      	bne.n	be59c <__hexnan+0xe4>
   be4fc:	9904      	ldr	r1, [sp, #16]
   be4fe:	9a05      	ldr	r2, [sp, #20]
   be500:	2920      	cmp	r1, #32
   be502:	d818      	bhi.n	be536 <__hexnan+0x7e>
   be504:	9b02      	ldr	r3, [sp, #8]
   be506:	459b      	cmp	fp, r3
   be508:	dd13      	ble.n	be532 <__hexnan+0x7a>
   be50a:	454c      	cmp	r4, r9
   be50c:	d206      	bcs.n	be51c <__hexnan+0x64>
   be50e:	2d07      	cmp	r5, #7
   be510:	dc04      	bgt.n	be51c <__hexnan+0x64>
   be512:	462a      	mov	r2, r5
   be514:	4649      	mov	r1, r9
   be516:	4620      	mov	r0, r4
   be518:	f7ff ffa8 	bl	be46c <L_shift>
   be51c:	4544      	cmp	r4, r8
   be51e:	d950      	bls.n	be5c2 <__hexnan+0x10a>
   be520:	2300      	movs	r3, #0
   be522:	f1a4 0904 	sub.w	r9, r4, #4
   be526:	f844 3c04 	str.w	r3, [r4, #-4]
   be52a:	f8cd b008 	str.w	fp, [sp, #8]
   be52e:	464c      	mov	r4, r9
   be530:	461d      	mov	r5, r3
   be532:	9a03      	ldr	r2, [sp, #12]
   be534:	e7d7      	b.n	be4e6 <__hexnan+0x2e>
   be536:	2929      	cmp	r1, #41	; 0x29
   be538:	d156      	bne.n	be5e8 <__hexnan+0x130>
   be53a:	3202      	adds	r2, #2
   be53c:	f8ca 2000 	str.w	r2, [sl]
   be540:	f1bb 0f00 	cmp.w	fp, #0
   be544:	d050      	beq.n	be5e8 <__hexnan+0x130>
   be546:	454c      	cmp	r4, r9
   be548:	d206      	bcs.n	be558 <__hexnan+0xa0>
   be54a:	2d07      	cmp	r5, #7
   be54c:	dc04      	bgt.n	be558 <__hexnan+0xa0>
   be54e:	462a      	mov	r2, r5
   be550:	4649      	mov	r1, r9
   be552:	4620      	mov	r0, r4
   be554:	f7ff ff8a 	bl	be46c <L_shift>
   be558:	4544      	cmp	r4, r8
   be55a:	d934      	bls.n	be5c6 <__hexnan+0x10e>
   be55c:	f1a8 0204 	sub.w	r2, r8, #4
   be560:	4623      	mov	r3, r4
   be562:	f853 1b04 	ldr.w	r1, [r3], #4
   be566:	f842 1f04 	str.w	r1, [r2, #4]!
   be56a:	429f      	cmp	r7, r3
   be56c:	d2f9      	bcs.n	be562 <__hexnan+0xaa>
   be56e:	1b3b      	subs	r3, r7, r4
   be570:	f023 0303 	bic.w	r3, r3, #3
   be574:	3304      	adds	r3, #4
   be576:	3401      	adds	r4, #1
   be578:	3e03      	subs	r6, #3
   be57a:	42b4      	cmp	r4, r6
   be57c:	bf88      	it	hi
   be57e:	2304      	movhi	r3, #4
   be580:	4443      	add	r3, r8
   be582:	2200      	movs	r2, #0
   be584:	f843 2b04 	str.w	r2, [r3], #4
   be588:	429f      	cmp	r7, r3
   be58a:	d2fb      	bcs.n	be584 <__hexnan+0xcc>
   be58c:	683b      	ldr	r3, [r7, #0]
   be58e:	b91b      	cbnz	r3, be598 <__hexnan+0xe0>
   be590:	4547      	cmp	r7, r8
   be592:	d127      	bne.n	be5e4 <__hexnan+0x12c>
   be594:	2301      	movs	r3, #1
   be596:	603b      	str	r3, [r7, #0]
   be598:	2005      	movs	r0, #5
   be59a:	e026      	b.n	be5ea <__hexnan+0x132>
   be59c:	3501      	adds	r5, #1
   be59e:	2d08      	cmp	r5, #8
   be5a0:	f10b 0b01 	add.w	fp, fp, #1
   be5a4:	dd06      	ble.n	be5b4 <__hexnan+0xfc>
   be5a6:	4544      	cmp	r4, r8
   be5a8:	d9c3      	bls.n	be532 <__hexnan+0x7a>
   be5aa:	2300      	movs	r3, #0
   be5ac:	f844 3c04 	str.w	r3, [r4, #-4]
   be5b0:	2501      	movs	r5, #1
   be5b2:	3c04      	subs	r4, #4
   be5b4:	6822      	ldr	r2, [r4, #0]
   be5b6:	f000 000f 	and.w	r0, r0, #15
   be5ba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   be5be:	6022      	str	r2, [r4, #0]
   be5c0:	e7b7      	b.n	be532 <__hexnan+0x7a>
   be5c2:	2508      	movs	r5, #8
   be5c4:	e7b5      	b.n	be532 <__hexnan+0x7a>
   be5c6:	9b01      	ldr	r3, [sp, #4]
   be5c8:	2b00      	cmp	r3, #0
   be5ca:	d0df      	beq.n	be58c <__hexnan+0xd4>
   be5cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   be5d0:	f1c3 0320 	rsb	r3, r3, #32
   be5d4:	fa22 f303 	lsr.w	r3, r2, r3
   be5d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   be5dc:	401a      	ands	r2, r3
   be5de:	f846 2c04 	str.w	r2, [r6, #-4]
   be5e2:	e7d3      	b.n	be58c <__hexnan+0xd4>
   be5e4:	3f04      	subs	r7, #4
   be5e6:	e7d1      	b.n	be58c <__hexnan+0xd4>
   be5e8:	2004      	movs	r0, #4
   be5ea:	b007      	add	sp, #28
   be5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000be5f0 <__retarget_lock_acquire_recursive>:
   be5f0:	4770      	bx	lr

000be5f2 <__retarget_lock_release>:
   be5f2:	4770      	bx	lr

000be5f4 <__retarget_lock_release_recursive>:
   be5f4:	4770      	bx	lr

000be5f6 <__ascii_mbtowc>:
   be5f6:	b082      	sub	sp, #8
   be5f8:	b901      	cbnz	r1, be5fc <__ascii_mbtowc+0x6>
   be5fa:	a901      	add	r1, sp, #4
   be5fc:	b142      	cbz	r2, be610 <__ascii_mbtowc+0x1a>
   be5fe:	b14b      	cbz	r3, be614 <__ascii_mbtowc+0x1e>
   be600:	7813      	ldrb	r3, [r2, #0]
   be602:	600b      	str	r3, [r1, #0]
   be604:	7812      	ldrb	r2, [r2, #0]
   be606:	1e10      	subs	r0, r2, #0
   be608:	bf18      	it	ne
   be60a:	2001      	movne	r0, #1
   be60c:	b002      	add	sp, #8
   be60e:	4770      	bx	lr
   be610:	4610      	mov	r0, r2
   be612:	e7fb      	b.n	be60c <__ascii_mbtowc+0x16>
   be614:	f06f 0001 	mvn.w	r0, #1
   be618:	e7f8      	b.n	be60c <__ascii_mbtowc+0x16>
	...

000be61c <_Balloc>:
   be61c:	b570      	push	{r4, r5, r6, lr}
   be61e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   be620:	4604      	mov	r4, r0
   be622:	460d      	mov	r5, r1
   be624:	b976      	cbnz	r6, be644 <_Balloc+0x28>
   be626:	2010      	movs	r0, #16
   be628:	f7fb f8de 	bl	b97e8 <malloc>
   be62c:	4602      	mov	r2, r0
   be62e:	6260      	str	r0, [r4, #36]	; 0x24
   be630:	b920      	cbnz	r0, be63c <_Balloc+0x20>
   be632:	4b18      	ldr	r3, [pc, #96]	; (be694 <_Balloc+0x78>)
   be634:	4818      	ldr	r0, [pc, #96]	; (be698 <_Balloc+0x7c>)
   be636:	2166      	movs	r1, #102	; 0x66
   be638:	f7fb f916 	bl	b9868 <__assert_func>
   be63c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   be640:	6006      	str	r6, [r0, #0]
   be642:	60c6      	str	r6, [r0, #12]
   be644:	6a66      	ldr	r6, [r4, #36]	; 0x24
   be646:	68f3      	ldr	r3, [r6, #12]
   be648:	b183      	cbz	r3, be66c <_Balloc+0x50>
   be64a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   be64c:	68db      	ldr	r3, [r3, #12]
   be64e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   be652:	b9b8      	cbnz	r0, be684 <_Balloc+0x68>
   be654:	2101      	movs	r1, #1
   be656:	fa01 f605 	lsl.w	r6, r1, r5
   be65a:	1d72      	adds	r2, r6, #5
   be65c:	0092      	lsls	r2, r2, #2
   be65e:	4620      	mov	r0, r4
   be660:	f000 fc9d 	bl	bef9e <_calloc_r>
   be664:	b160      	cbz	r0, be680 <_Balloc+0x64>
   be666:	e9c0 5601 	strd	r5, r6, [r0, #4]
   be66a:	e00e      	b.n	be68a <_Balloc+0x6e>
   be66c:	2221      	movs	r2, #33	; 0x21
   be66e:	2104      	movs	r1, #4
   be670:	4620      	mov	r0, r4
   be672:	f000 fc94 	bl	bef9e <_calloc_r>
   be676:	6a63      	ldr	r3, [r4, #36]	; 0x24
   be678:	60f0      	str	r0, [r6, #12]
   be67a:	68db      	ldr	r3, [r3, #12]
   be67c:	2b00      	cmp	r3, #0
   be67e:	d1e4      	bne.n	be64a <_Balloc+0x2e>
   be680:	2000      	movs	r0, #0
   be682:	bd70      	pop	{r4, r5, r6, pc}
   be684:	6802      	ldr	r2, [r0, #0]
   be686:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   be68a:	2300      	movs	r3, #0
   be68c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   be690:	e7f7      	b.n	be682 <_Balloc+0x66>
   be692:	bf00      	nop
   be694:	000bfaf5 	.word	0x000bfaf5
   be698:	000bfd50 	.word	0x000bfd50

000be69c <_Bfree>:
   be69c:	b570      	push	{r4, r5, r6, lr}
   be69e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   be6a0:	4605      	mov	r5, r0
   be6a2:	460c      	mov	r4, r1
   be6a4:	b976      	cbnz	r6, be6c4 <_Bfree+0x28>
   be6a6:	2010      	movs	r0, #16
   be6a8:	f7fb f89e 	bl	b97e8 <malloc>
   be6ac:	4602      	mov	r2, r0
   be6ae:	6268      	str	r0, [r5, #36]	; 0x24
   be6b0:	b920      	cbnz	r0, be6bc <_Bfree+0x20>
   be6b2:	4b09      	ldr	r3, [pc, #36]	; (be6d8 <_Bfree+0x3c>)
   be6b4:	4809      	ldr	r0, [pc, #36]	; (be6dc <_Bfree+0x40>)
   be6b6:	218a      	movs	r1, #138	; 0x8a
   be6b8:	f7fb f8d6 	bl	b9868 <__assert_func>
   be6bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   be6c0:	6006      	str	r6, [r0, #0]
   be6c2:	60c6      	str	r6, [r0, #12]
   be6c4:	b13c      	cbz	r4, be6d6 <_Bfree+0x3a>
   be6c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   be6c8:	6862      	ldr	r2, [r4, #4]
   be6ca:	68db      	ldr	r3, [r3, #12]
   be6cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   be6d0:	6021      	str	r1, [r4, #0]
   be6d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   be6d6:	bd70      	pop	{r4, r5, r6, pc}
   be6d8:	000bfaf5 	.word	0x000bfaf5
   be6dc:	000bfd50 	.word	0x000bfd50

000be6e0 <__multadd>:
   be6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   be6e4:	690d      	ldr	r5, [r1, #16]
   be6e6:	4607      	mov	r7, r0
   be6e8:	460c      	mov	r4, r1
   be6ea:	461e      	mov	r6, r3
   be6ec:	f101 0c14 	add.w	ip, r1, #20
   be6f0:	2000      	movs	r0, #0
   be6f2:	f8dc 3000 	ldr.w	r3, [ip]
   be6f6:	b299      	uxth	r1, r3
   be6f8:	fb02 6101 	mla	r1, r2, r1, r6
   be6fc:	0c1e      	lsrs	r6, r3, #16
   be6fe:	0c0b      	lsrs	r3, r1, #16
   be700:	fb02 3306 	mla	r3, r2, r6, r3
   be704:	b289      	uxth	r1, r1
   be706:	3001      	adds	r0, #1
   be708:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   be70c:	4285      	cmp	r5, r0
   be70e:	f84c 1b04 	str.w	r1, [ip], #4
   be712:	ea4f 4613 	mov.w	r6, r3, lsr #16
   be716:	dcec      	bgt.n	be6f2 <__multadd+0x12>
   be718:	b30e      	cbz	r6, be75e <__multadd+0x7e>
   be71a:	68a3      	ldr	r3, [r4, #8]
   be71c:	42ab      	cmp	r3, r5
   be71e:	dc19      	bgt.n	be754 <__multadd+0x74>
   be720:	6861      	ldr	r1, [r4, #4]
   be722:	4638      	mov	r0, r7
   be724:	3101      	adds	r1, #1
   be726:	f7ff ff79 	bl	be61c <_Balloc>
   be72a:	4680      	mov	r8, r0
   be72c:	b928      	cbnz	r0, be73a <__multadd+0x5a>
   be72e:	4602      	mov	r2, r0
   be730:	4b0c      	ldr	r3, [pc, #48]	; (be764 <__multadd+0x84>)
   be732:	480d      	ldr	r0, [pc, #52]	; (be768 <__multadd+0x88>)
   be734:	21b5      	movs	r1, #181	; 0xb5
   be736:	f7fb f897 	bl	b9868 <__assert_func>
   be73a:	6922      	ldr	r2, [r4, #16]
   be73c:	3202      	adds	r2, #2
   be73e:	f104 010c 	add.w	r1, r4, #12
   be742:	0092      	lsls	r2, r2, #2
   be744:	300c      	adds	r0, #12
   be746:	f7fe fbc7 	bl	bced8 <memcpy>
   be74a:	4621      	mov	r1, r4
   be74c:	4638      	mov	r0, r7
   be74e:	f7ff ffa5 	bl	be69c <_Bfree>
   be752:	4644      	mov	r4, r8
   be754:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   be758:	3501      	adds	r5, #1
   be75a:	615e      	str	r6, [r3, #20]
   be75c:	6125      	str	r5, [r4, #16]
   be75e:	4620      	mov	r0, r4
   be760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   be764:	000bfcc9 	.word	0x000bfcc9
   be768:	000bfd50 	.word	0x000bfd50

000be76c <__s2b>:
   be76c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   be770:	460c      	mov	r4, r1
   be772:	4615      	mov	r5, r2
   be774:	461f      	mov	r7, r3
   be776:	2209      	movs	r2, #9
   be778:	3308      	adds	r3, #8
   be77a:	4606      	mov	r6, r0
   be77c:	fb93 f3f2 	sdiv	r3, r3, r2
   be780:	2100      	movs	r1, #0
   be782:	2201      	movs	r2, #1
   be784:	429a      	cmp	r2, r3
   be786:	db09      	blt.n	be79c <__s2b+0x30>
   be788:	4630      	mov	r0, r6
   be78a:	f7ff ff47 	bl	be61c <_Balloc>
   be78e:	b940      	cbnz	r0, be7a2 <__s2b+0x36>
   be790:	4602      	mov	r2, r0
   be792:	4b19      	ldr	r3, [pc, #100]	; (be7f8 <__s2b+0x8c>)
   be794:	4819      	ldr	r0, [pc, #100]	; (be7fc <__s2b+0x90>)
   be796:	21ce      	movs	r1, #206	; 0xce
   be798:	f7fb f866 	bl	b9868 <__assert_func>
   be79c:	0052      	lsls	r2, r2, #1
   be79e:	3101      	adds	r1, #1
   be7a0:	e7f0      	b.n	be784 <__s2b+0x18>
   be7a2:	9b08      	ldr	r3, [sp, #32]
   be7a4:	6143      	str	r3, [r0, #20]
   be7a6:	2d09      	cmp	r5, #9
   be7a8:	f04f 0301 	mov.w	r3, #1
   be7ac:	6103      	str	r3, [r0, #16]
   be7ae:	dd16      	ble.n	be7de <__s2b+0x72>
   be7b0:	f104 0909 	add.w	r9, r4, #9
   be7b4:	46c8      	mov	r8, r9
   be7b6:	442c      	add	r4, r5
   be7b8:	f818 3b01 	ldrb.w	r3, [r8], #1
   be7bc:	4601      	mov	r1, r0
   be7be:	3b30      	subs	r3, #48	; 0x30
   be7c0:	220a      	movs	r2, #10
   be7c2:	4630      	mov	r0, r6
   be7c4:	f7ff ff8c 	bl	be6e0 <__multadd>
   be7c8:	45a0      	cmp	r8, r4
   be7ca:	d1f5      	bne.n	be7b8 <__s2b+0x4c>
   be7cc:	f1a5 0408 	sub.w	r4, r5, #8
   be7d0:	444c      	add	r4, r9
   be7d2:	1b2d      	subs	r5, r5, r4
   be7d4:	1963      	adds	r3, r4, r5
   be7d6:	42bb      	cmp	r3, r7
   be7d8:	db04      	blt.n	be7e4 <__s2b+0x78>
   be7da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   be7de:	340a      	adds	r4, #10
   be7e0:	2509      	movs	r5, #9
   be7e2:	e7f6      	b.n	be7d2 <__s2b+0x66>
   be7e4:	f814 3b01 	ldrb.w	r3, [r4], #1
   be7e8:	4601      	mov	r1, r0
   be7ea:	3b30      	subs	r3, #48	; 0x30
   be7ec:	220a      	movs	r2, #10
   be7ee:	4630      	mov	r0, r6
   be7f0:	f7ff ff76 	bl	be6e0 <__multadd>
   be7f4:	e7ee      	b.n	be7d4 <__s2b+0x68>
   be7f6:	bf00      	nop
   be7f8:	000bfcc9 	.word	0x000bfcc9
   be7fc:	000bfd50 	.word	0x000bfd50

000be800 <__hi0bits>:
   be800:	0c03      	lsrs	r3, r0, #16
   be802:	041b      	lsls	r3, r3, #16
   be804:	b9d3      	cbnz	r3, be83c <__hi0bits+0x3c>
   be806:	0400      	lsls	r0, r0, #16
   be808:	2310      	movs	r3, #16
   be80a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   be80e:	bf04      	itt	eq
   be810:	0200      	lsleq	r0, r0, #8
   be812:	3308      	addeq	r3, #8
   be814:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   be818:	bf04      	itt	eq
   be81a:	0100      	lsleq	r0, r0, #4
   be81c:	3304      	addeq	r3, #4
   be81e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   be822:	bf04      	itt	eq
   be824:	0080      	lsleq	r0, r0, #2
   be826:	3302      	addeq	r3, #2
   be828:	2800      	cmp	r0, #0
   be82a:	db05      	blt.n	be838 <__hi0bits+0x38>
   be82c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   be830:	f103 0301 	add.w	r3, r3, #1
   be834:	bf08      	it	eq
   be836:	2320      	moveq	r3, #32
   be838:	4618      	mov	r0, r3
   be83a:	4770      	bx	lr
   be83c:	2300      	movs	r3, #0
   be83e:	e7e4      	b.n	be80a <__hi0bits+0xa>

000be840 <__lo0bits>:
   be840:	6803      	ldr	r3, [r0, #0]
   be842:	f013 0207 	ands.w	r2, r3, #7
   be846:	4601      	mov	r1, r0
   be848:	d00b      	beq.n	be862 <__lo0bits+0x22>
   be84a:	07da      	lsls	r2, r3, #31
   be84c:	d423      	bmi.n	be896 <__lo0bits+0x56>
   be84e:	0798      	lsls	r0, r3, #30
   be850:	bf49      	itett	mi
   be852:	085b      	lsrmi	r3, r3, #1
   be854:	089b      	lsrpl	r3, r3, #2
   be856:	2001      	movmi	r0, #1
   be858:	600b      	strmi	r3, [r1, #0]
   be85a:	bf5c      	itt	pl
   be85c:	600b      	strpl	r3, [r1, #0]
   be85e:	2002      	movpl	r0, #2
   be860:	4770      	bx	lr
   be862:	b298      	uxth	r0, r3
   be864:	b9a8      	cbnz	r0, be892 <__lo0bits+0x52>
   be866:	0c1b      	lsrs	r3, r3, #16
   be868:	2010      	movs	r0, #16
   be86a:	b2da      	uxtb	r2, r3
   be86c:	b90a      	cbnz	r2, be872 <__lo0bits+0x32>
   be86e:	3008      	adds	r0, #8
   be870:	0a1b      	lsrs	r3, r3, #8
   be872:	071a      	lsls	r2, r3, #28
   be874:	bf04      	itt	eq
   be876:	091b      	lsreq	r3, r3, #4
   be878:	3004      	addeq	r0, #4
   be87a:	079a      	lsls	r2, r3, #30
   be87c:	bf04      	itt	eq
   be87e:	089b      	lsreq	r3, r3, #2
   be880:	3002      	addeq	r0, #2
   be882:	07da      	lsls	r2, r3, #31
   be884:	d403      	bmi.n	be88e <__lo0bits+0x4e>
   be886:	085b      	lsrs	r3, r3, #1
   be888:	f100 0001 	add.w	r0, r0, #1
   be88c:	d005      	beq.n	be89a <__lo0bits+0x5a>
   be88e:	600b      	str	r3, [r1, #0]
   be890:	4770      	bx	lr
   be892:	4610      	mov	r0, r2
   be894:	e7e9      	b.n	be86a <__lo0bits+0x2a>
   be896:	2000      	movs	r0, #0
   be898:	4770      	bx	lr
   be89a:	2020      	movs	r0, #32
   be89c:	4770      	bx	lr
	...

000be8a0 <__i2b>:
   be8a0:	b510      	push	{r4, lr}
   be8a2:	460c      	mov	r4, r1
   be8a4:	2101      	movs	r1, #1
   be8a6:	f7ff feb9 	bl	be61c <_Balloc>
   be8aa:	4602      	mov	r2, r0
   be8ac:	b928      	cbnz	r0, be8ba <__i2b+0x1a>
   be8ae:	4b05      	ldr	r3, [pc, #20]	; (be8c4 <__i2b+0x24>)
   be8b0:	4805      	ldr	r0, [pc, #20]	; (be8c8 <__i2b+0x28>)
   be8b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
   be8b6:	f7fa ffd7 	bl	b9868 <__assert_func>
   be8ba:	2301      	movs	r3, #1
   be8bc:	6144      	str	r4, [r0, #20]
   be8be:	6103      	str	r3, [r0, #16]
   be8c0:	bd10      	pop	{r4, pc}
   be8c2:	bf00      	nop
   be8c4:	000bfcc9 	.word	0x000bfcc9
   be8c8:	000bfd50 	.word	0x000bfd50

000be8cc <__multiply>:
   be8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be8d0:	4691      	mov	r9, r2
   be8d2:	690a      	ldr	r2, [r1, #16]
   be8d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   be8d8:	429a      	cmp	r2, r3
   be8da:	bfb8      	it	lt
   be8dc:	460b      	movlt	r3, r1
   be8de:	460c      	mov	r4, r1
   be8e0:	bfbc      	itt	lt
   be8e2:	464c      	movlt	r4, r9
   be8e4:	4699      	movlt	r9, r3
   be8e6:	6927      	ldr	r7, [r4, #16]
   be8e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
   be8ec:	68a3      	ldr	r3, [r4, #8]
   be8ee:	6861      	ldr	r1, [r4, #4]
   be8f0:	eb07 060a 	add.w	r6, r7, sl
   be8f4:	42b3      	cmp	r3, r6
   be8f6:	b085      	sub	sp, #20
   be8f8:	bfb8      	it	lt
   be8fa:	3101      	addlt	r1, #1
   be8fc:	f7ff fe8e 	bl	be61c <_Balloc>
   be900:	b930      	cbnz	r0, be910 <__multiply+0x44>
   be902:	4602      	mov	r2, r0
   be904:	4b44      	ldr	r3, [pc, #272]	; (bea18 <__multiply+0x14c>)
   be906:	4845      	ldr	r0, [pc, #276]	; (bea1c <__multiply+0x150>)
   be908:	f240 115d 	movw	r1, #349	; 0x15d
   be90c:	f7fa ffac 	bl	b9868 <__assert_func>
   be910:	f100 0514 	add.w	r5, r0, #20
   be914:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   be918:	462b      	mov	r3, r5
   be91a:	2200      	movs	r2, #0
   be91c:	4543      	cmp	r3, r8
   be91e:	d321      	bcc.n	be964 <__multiply+0x98>
   be920:	f104 0314 	add.w	r3, r4, #20
   be924:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   be928:	f109 0314 	add.w	r3, r9, #20
   be92c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   be930:	9202      	str	r2, [sp, #8]
   be932:	1b3a      	subs	r2, r7, r4
   be934:	3a15      	subs	r2, #21
   be936:	f022 0203 	bic.w	r2, r2, #3
   be93a:	3204      	adds	r2, #4
   be93c:	f104 0115 	add.w	r1, r4, #21
   be940:	428f      	cmp	r7, r1
   be942:	bf38      	it	cc
   be944:	2204      	movcc	r2, #4
   be946:	9201      	str	r2, [sp, #4]
   be948:	9a02      	ldr	r2, [sp, #8]
   be94a:	9303      	str	r3, [sp, #12]
   be94c:	429a      	cmp	r2, r3
   be94e:	d80c      	bhi.n	be96a <__multiply+0x9e>
   be950:	2e00      	cmp	r6, #0
   be952:	dd03      	ble.n	be95c <__multiply+0x90>
   be954:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   be958:	2b00      	cmp	r3, #0
   be95a:	d05a      	beq.n	bea12 <__multiply+0x146>
   be95c:	6106      	str	r6, [r0, #16]
   be95e:	b005      	add	sp, #20
   be960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be964:	f843 2b04 	str.w	r2, [r3], #4
   be968:	e7d8      	b.n	be91c <__multiply+0x50>
   be96a:	f8b3 a000 	ldrh.w	sl, [r3]
   be96e:	f1ba 0f00 	cmp.w	sl, #0
   be972:	d024      	beq.n	be9be <__multiply+0xf2>
   be974:	f104 0e14 	add.w	lr, r4, #20
   be978:	46a9      	mov	r9, r5
   be97a:	f04f 0c00 	mov.w	ip, #0
   be97e:	f85e 2b04 	ldr.w	r2, [lr], #4
   be982:	f8d9 1000 	ldr.w	r1, [r9]
   be986:	fa1f fb82 	uxth.w	fp, r2
   be98a:	b289      	uxth	r1, r1
   be98c:	fb0a 110b 	mla	r1, sl, fp, r1
   be990:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   be994:	f8d9 2000 	ldr.w	r2, [r9]
   be998:	4461      	add	r1, ip
   be99a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   be99e:	fb0a c20b 	mla	r2, sl, fp, ip
   be9a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   be9a6:	b289      	uxth	r1, r1
   be9a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   be9ac:	4577      	cmp	r7, lr
   be9ae:	f849 1b04 	str.w	r1, [r9], #4
   be9b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   be9b6:	d8e2      	bhi.n	be97e <__multiply+0xb2>
   be9b8:	9a01      	ldr	r2, [sp, #4]
   be9ba:	f845 c002 	str.w	ip, [r5, r2]
   be9be:	9a03      	ldr	r2, [sp, #12]
   be9c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   be9c4:	3304      	adds	r3, #4
   be9c6:	f1b9 0f00 	cmp.w	r9, #0
   be9ca:	d020      	beq.n	bea0e <__multiply+0x142>
   be9cc:	6829      	ldr	r1, [r5, #0]
   be9ce:	f104 0c14 	add.w	ip, r4, #20
   be9d2:	46ae      	mov	lr, r5
   be9d4:	f04f 0a00 	mov.w	sl, #0
   be9d8:	f8bc b000 	ldrh.w	fp, [ip]
   be9dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
   be9e0:	fb09 220b 	mla	r2, r9, fp, r2
   be9e4:	4492      	add	sl, r2
   be9e6:	b289      	uxth	r1, r1
   be9e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   be9ec:	f84e 1b04 	str.w	r1, [lr], #4
   be9f0:	f85c 2b04 	ldr.w	r2, [ip], #4
   be9f4:	f8be 1000 	ldrh.w	r1, [lr]
   be9f8:	0c12      	lsrs	r2, r2, #16
   be9fa:	fb09 1102 	mla	r1, r9, r2, r1
   be9fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bea02:	4567      	cmp	r7, ip
   bea04:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bea08:	d8e6      	bhi.n	be9d8 <__multiply+0x10c>
   bea0a:	9a01      	ldr	r2, [sp, #4]
   bea0c:	50a9      	str	r1, [r5, r2]
   bea0e:	3504      	adds	r5, #4
   bea10:	e79a      	b.n	be948 <__multiply+0x7c>
   bea12:	3e01      	subs	r6, #1
   bea14:	e79c      	b.n	be950 <__multiply+0x84>
   bea16:	bf00      	nop
   bea18:	000bfcc9 	.word	0x000bfcc9
   bea1c:	000bfd50 	.word	0x000bfd50

000bea20 <__pow5mult>:
   bea20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bea24:	4615      	mov	r5, r2
   bea26:	f012 0203 	ands.w	r2, r2, #3
   bea2a:	4606      	mov	r6, r0
   bea2c:	460f      	mov	r7, r1
   bea2e:	d007      	beq.n	bea40 <__pow5mult+0x20>
   bea30:	4c25      	ldr	r4, [pc, #148]	; (beac8 <__pow5mult+0xa8>)
   bea32:	3a01      	subs	r2, #1
   bea34:	2300      	movs	r3, #0
   bea36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bea3a:	f7ff fe51 	bl	be6e0 <__multadd>
   bea3e:	4607      	mov	r7, r0
   bea40:	10ad      	asrs	r5, r5, #2
   bea42:	d03d      	beq.n	beac0 <__pow5mult+0xa0>
   bea44:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bea46:	b97c      	cbnz	r4, bea68 <__pow5mult+0x48>
   bea48:	2010      	movs	r0, #16
   bea4a:	f7fa fecd 	bl	b97e8 <malloc>
   bea4e:	4602      	mov	r2, r0
   bea50:	6270      	str	r0, [r6, #36]	; 0x24
   bea52:	b928      	cbnz	r0, bea60 <__pow5mult+0x40>
   bea54:	4b1d      	ldr	r3, [pc, #116]	; (beacc <__pow5mult+0xac>)
   bea56:	481e      	ldr	r0, [pc, #120]	; (bead0 <__pow5mult+0xb0>)
   bea58:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bea5c:	f7fa ff04 	bl	b9868 <__assert_func>
   bea60:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bea64:	6004      	str	r4, [r0, #0]
   bea66:	60c4      	str	r4, [r0, #12]
   bea68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bea6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bea70:	b94c      	cbnz	r4, bea86 <__pow5mult+0x66>
   bea72:	f240 2171 	movw	r1, #625	; 0x271
   bea76:	4630      	mov	r0, r6
   bea78:	f7ff ff12 	bl	be8a0 <__i2b>
   bea7c:	2300      	movs	r3, #0
   bea7e:	f8c8 0008 	str.w	r0, [r8, #8]
   bea82:	4604      	mov	r4, r0
   bea84:	6003      	str	r3, [r0, #0]
   bea86:	f04f 0900 	mov.w	r9, #0
   bea8a:	07eb      	lsls	r3, r5, #31
   bea8c:	d50a      	bpl.n	beaa4 <__pow5mult+0x84>
   bea8e:	4639      	mov	r1, r7
   bea90:	4622      	mov	r2, r4
   bea92:	4630      	mov	r0, r6
   bea94:	f7ff ff1a 	bl	be8cc <__multiply>
   bea98:	4639      	mov	r1, r7
   bea9a:	4680      	mov	r8, r0
   bea9c:	4630      	mov	r0, r6
   bea9e:	f7ff fdfd 	bl	be69c <_Bfree>
   beaa2:	4647      	mov	r7, r8
   beaa4:	106d      	asrs	r5, r5, #1
   beaa6:	d00b      	beq.n	beac0 <__pow5mult+0xa0>
   beaa8:	6820      	ldr	r0, [r4, #0]
   beaaa:	b938      	cbnz	r0, beabc <__pow5mult+0x9c>
   beaac:	4622      	mov	r2, r4
   beaae:	4621      	mov	r1, r4
   beab0:	4630      	mov	r0, r6
   beab2:	f7ff ff0b 	bl	be8cc <__multiply>
   beab6:	6020      	str	r0, [r4, #0]
   beab8:	f8c0 9000 	str.w	r9, [r0]
   beabc:	4604      	mov	r4, r0
   beabe:	e7e4      	b.n	bea8a <__pow5mult+0x6a>
   beac0:	4638      	mov	r0, r7
   beac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   beac6:	bf00      	nop
   beac8:	000bfea0 	.word	0x000bfea0
   beacc:	000bfaf5 	.word	0x000bfaf5
   bead0:	000bfd50 	.word	0x000bfd50

000bead4 <__lshift>:
   bead4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bead8:	460c      	mov	r4, r1
   beada:	6849      	ldr	r1, [r1, #4]
   beadc:	6923      	ldr	r3, [r4, #16]
   beade:	eb03 1862 	add.w	r8, r3, r2, asr #5
   beae2:	68a3      	ldr	r3, [r4, #8]
   beae4:	4607      	mov	r7, r0
   beae6:	4691      	mov	r9, r2
   beae8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   beaec:	f108 0601 	add.w	r6, r8, #1
   beaf0:	42b3      	cmp	r3, r6
   beaf2:	db0b      	blt.n	beb0c <__lshift+0x38>
   beaf4:	4638      	mov	r0, r7
   beaf6:	f7ff fd91 	bl	be61c <_Balloc>
   beafa:	4605      	mov	r5, r0
   beafc:	b948      	cbnz	r0, beb12 <__lshift+0x3e>
   beafe:	4602      	mov	r2, r0
   beb00:	4b2a      	ldr	r3, [pc, #168]	; (bebac <__lshift+0xd8>)
   beb02:	482b      	ldr	r0, [pc, #172]	; (bebb0 <__lshift+0xdc>)
   beb04:	f240 11d9 	movw	r1, #473	; 0x1d9
   beb08:	f7fa feae 	bl	b9868 <__assert_func>
   beb0c:	3101      	adds	r1, #1
   beb0e:	005b      	lsls	r3, r3, #1
   beb10:	e7ee      	b.n	beaf0 <__lshift+0x1c>
   beb12:	2300      	movs	r3, #0
   beb14:	f100 0114 	add.w	r1, r0, #20
   beb18:	f100 0210 	add.w	r2, r0, #16
   beb1c:	4618      	mov	r0, r3
   beb1e:	4553      	cmp	r3, sl
   beb20:	db37      	blt.n	beb92 <__lshift+0xbe>
   beb22:	6920      	ldr	r0, [r4, #16]
   beb24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   beb28:	f104 0314 	add.w	r3, r4, #20
   beb2c:	f019 091f 	ands.w	r9, r9, #31
   beb30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   beb34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   beb38:	d02f      	beq.n	beb9a <__lshift+0xc6>
   beb3a:	f1c9 0e20 	rsb	lr, r9, #32
   beb3e:	468a      	mov	sl, r1
   beb40:	f04f 0c00 	mov.w	ip, #0
   beb44:	681a      	ldr	r2, [r3, #0]
   beb46:	fa02 f209 	lsl.w	r2, r2, r9
   beb4a:	ea42 020c 	orr.w	r2, r2, ip
   beb4e:	f84a 2b04 	str.w	r2, [sl], #4
   beb52:	f853 2b04 	ldr.w	r2, [r3], #4
   beb56:	4298      	cmp	r0, r3
   beb58:	fa22 fc0e 	lsr.w	ip, r2, lr
   beb5c:	d8f2      	bhi.n	beb44 <__lshift+0x70>
   beb5e:	1b03      	subs	r3, r0, r4
   beb60:	3b15      	subs	r3, #21
   beb62:	f023 0303 	bic.w	r3, r3, #3
   beb66:	3304      	adds	r3, #4
   beb68:	f104 0215 	add.w	r2, r4, #21
   beb6c:	4290      	cmp	r0, r2
   beb6e:	bf38      	it	cc
   beb70:	2304      	movcc	r3, #4
   beb72:	f841 c003 	str.w	ip, [r1, r3]
   beb76:	f1bc 0f00 	cmp.w	ip, #0
   beb7a:	d001      	beq.n	beb80 <__lshift+0xac>
   beb7c:	f108 0602 	add.w	r6, r8, #2
   beb80:	3e01      	subs	r6, #1
   beb82:	4638      	mov	r0, r7
   beb84:	612e      	str	r6, [r5, #16]
   beb86:	4621      	mov	r1, r4
   beb88:	f7ff fd88 	bl	be69c <_Bfree>
   beb8c:	4628      	mov	r0, r5
   beb8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   beb92:	f842 0f04 	str.w	r0, [r2, #4]!
   beb96:	3301      	adds	r3, #1
   beb98:	e7c1      	b.n	beb1e <__lshift+0x4a>
   beb9a:	3904      	subs	r1, #4
   beb9c:	f853 2b04 	ldr.w	r2, [r3], #4
   beba0:	f841 2f04 	str.w	r2, [r1, #4]!
   beba4:	4298      	cmp	r0, r3
   beba6:	d8f9      	bhi.n	beb9c <__lshift+0xc8>
   beba8:	e7ea      	b.n	beb80 <__lshift+0xac>
   bebaa:	bf00      	nop
   bebac:	000bfcc9 	.word	0x000bfcc9
   bebb0:	000bfd50 	.word	0x000bfd50

000bebb4 <__mcmp>:
   bebb4:	b530      	push	{r4, r5, lr}
   bebb6:	6902      	ldr	r2, [r0, #16]
   bebb8:	690c      	ldr	r4, [r1, #16]
   bebba:	1b12      	subs	r2, r2, r4
   bebbc:	d10e      	bne.n	bebdc <__mcmp+0x28>
   bebbe:	f100 0314 	add.w	r3, r0, #20
   bebc2:	3114      	adds	r1, #20
   bebc4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bebc8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bebcc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bebd0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bebd4:	42a5      	cmp	r5, r4
   bebd6:	d003      	beq.n	bebe0 <__mcmp+0x2c>
   bebd8:	d305      	bcc.n	bebe6 <__mcmp+0x32>
   bebda:	2201      	movs	r2, #1
   bebdc:	4610      	mov	r0, r2
   bebde:	bd30      	pop	{r4, r5, pc}
   bebe0:	4283      	cmp	r3, r0
   bebe2:	d3f3      	bcc.n	bebcc <__mcmp+0x18>
   bebe4:	e7fa      	b.n	bebdc <__mcmp+0x28>
   bebe6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bebea:	e7f7      	b.n	bebdc <__mcmp+0x28>

000bebec <__mdiff>:
   bebec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bebf0:	460c      	mov	r4, r1
   bebf2:	4606      	mov	r6, r0
   bebf4:	4611      	mov	r1, r2
   bebf6:	4620      	mov	r0, r4
   bebf8:	4690      	mov	r8, r2
   bebfa:	f7ff ffdb 	bl	bebb4 <__mcmp>
   bebfe:	1e05      	subs	r5, r0, #0
   bec00:	d110      	bne.n	bec24 <__mdiff+0x38>
   bec02:	4629      	mov	r1, r5
   bec04:	4630      	mov	r0, r6
   bec06:	f7ff fd09 	bl	be61c <_Balloc>
   bec0a:	b930      	cbnz	r0, bec1a <__mdiff+0x2e>
   bec0c:	4b3a      	ldr	r3, [pc, #232]	; (becf8 <__mdiff+0x10c>)
   bec0e:	4602      	mov	r2, r0
   bec10:	f240 2132 	movw	r1, #562	; 0x232
   bec14:	4839      	ldr	r0, [pc, #228]	; (becfc <__mdiff+0x110>)
   bec16:	f7fa fe27 	bl	b9868 <__assert_func>
   bec1a:	2301      	movs	r3, #1
   bec1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bec20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bec24:	bfa4      	itt	ge
   bec26:	4643      	movge	r3, r8
   bec28:	46a0      	movge	r8, r4
   bec2a:	4630      	mov	r0, r6
   bec2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bec30:	bfa6      	itte	ge
   bec32:	461c      	movge	r4, r3
   bec34:	2500      	movge	r5, #0
   bec36:	2501      	movlt	r5, #1
   bec38:	f7ff fcf0 	bl	be61c <_Balloc>
   bec3c:	b920      	cbnz	r0, bec48 <__mdiff+0x5c>
   bec3e:	4b2e      	ldr	r3, [pc, #184]	; (becf8 <__mdiff+0x10c>)
   bec40:	4602      	mov	r2, r0
   bec42:	f44f 7110 	mov.w	r1, #576	; 0x240
   bec46:	e7e5      	b.n	bec14 <__mdiff+0x28>
   bec48:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bec4c:	6926      	ldr	r6, [r4, #16]
   bec4e:	60c5      	str	r5, [r0, #12]
   bec50:	f104 0914 	add.w	r9, r4, #20
   bec54:	f108 0514 	add.w	r5, r8, #20
   bec58:	f100 0e14 	add.w	lr, r0, #20
   bec5c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bec60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bec64:	f108 0210 	add.w	r2, r8, #16
   bec68:	46f2      	mov	sl, lr
   bec6a:	2100      	movs	r1, #0
   bec6c:	f859 3b04 	ldr.w	r3, [r9], #4
   bec70:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bec74:	fa1f f883 	uxth.w	r8, r3
   bec78:	fa11 f18b 	uxtah	r1, r1, fp
   bec7c:	0c1b      	lsrs	r3, r3, #16
   bec7e:	eba1 0808 	sub.w	r8, r1, r8
   bec82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bec86:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bec8a:	fa1f f888 	uxth.w	r8, r8
   bec8e:	1419      	asrs	r1, r3, #16
   bec90:	454e      	cmp	r6, r9
   bec92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bec96:	f84a 3b04 	str.w	r3, [sl], #4
   bec9a:	d8e7      	bhi.n	bec6c <__mdiff+0x80>
   bec9c:	1b33      	subs	r3, r6, r4
   bec9e:	3b15      	subs	r3, #21
   beca0:	f023 0303 	bic.w	r3, r3, #3
   beca4:	3304      	adds	r3, #4
   beca6:	3415      	adds	r4, #21
   beca8:	42a6      	cmp	r6, r4
   becaa:	bf38      	it	cc
   becac:	2304      	movcc	r3, #4
   becae:	441d      	add	r5, r3
   becb0:	4473      	add	r3, lr
   becb2:	469e      	mov	lr, r3
   becb4:	462e      	mov	r6, r5
   becb6:	4566      	cmp	r6, ip
   becb8:	d30e      	bcc.n	becd8 <__mdiff+0xec>
   becba:	f10c 0203 	add.w	r2, ip, #3
   becbe:	1b52      	subs	r2, r2, r5
   becc0:	f022 0203 	bic.w	r2, r2, #3
   becc4:	3d03      	subs	r5, #3
   becc6:	45ac      	cmp	ip, r5
   becc8:	bf38      	it	cc
   becca:	2200      	movcc	r2, #0
   beccc:	441a      	add	r2, r3
   becce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   becd2:	b17b      	cbz	r3, becf4 <__mdiff+0x108>
   becd4:	6107      	str	r7, [r0, #16]
   becd6:	e7a3      	b.n	bec20 <__mdiff+0x34>
   becd8:	f856 8b04 	ldr.w	r8, [r6], #4
   becdc:	fa11 f288 	uxtah	r2, r1, r8
   bece0:	1414      	asrs	r4, r2, #16
   bece2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bece6:	b292      	uxth	r2, r2
   bece8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   becec:	f84e 2b04 	str.w	r2, [lr], #4
   becf0:	1421      	asrs	r1, r4, #16
   becf2:	e7e0      	b.n	becb6 <__mdiff+0xca>
   becf4:	3f01      	subs	r7, #1
   becf6:	e7ea      	b.n	becce <__mdiff+0xe2>
   becf8:	000bfcc9 	.word	0x000bfcc9
   becfc:	000bfd50 	.word	0x000bfd50

000bed00 <__ulp>:
   bed00:	b082      	sub	sp, #8
   bed02:	ed8d 0b00 	vstr	d0, [sp]
   bed06:	9b01      	ldr	r3, [sp, #4]
   bed08:	4912      	ldr	r1, [pc, #72]	; (bed54 <__ulp+0x54>)
   bed0a:	4019      	ands	r1, r3
   bed0c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bed10:	2900      	cmp	r1, #0
   bed12:	dd05      	ble.n	bed20 <__ulp+0x20>
   bed14:	2200      	movs	r2, #0
   bed16:	460b      	mov	r3, r1
   bed18:	ec43 2b10 	vmov	d0, r2, r3
   bed1c:	b002      	add	sp, #8
   bed1e:	4770      	bx	lr
   bed20:	4249      	negs	r1, r1
   bed22:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bed26:	ea4f 5021 	mov.w	r0, r1, asr #20
   bed2a:	f04f 0200 	mov.w	r2, #0
   bed2e:	f04f 0300 	mov.w	r3, #0
   bed32:	da04      	bge.n	bed3e <__ulp+0x3e>
   bed34:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bed38:	fa41 f300 	asr.w	r3, r1, r0
   bed3c:	e7ec      	b.n	bed18 <__ulp+0x18>
   bed3e:	f1a0 0114 	sub.w	r1, r0, #20
   bed42:	291e      	cmp	r1, #30
   bed44:	bfda      	itte	le
   bed46:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bed4a:	fa20 f101 	lsrle.w	r1, r0, r1
   bed4e:	2101      	movgt	r1, #1
   bed50:	460a      	mov	r2, r1
   bed52:	e7e1      	b.n	bed18 <__ulp+0x18>
   bed54:	7ff00000 	.word	0x7ff00000

000bed58 <__b2d>:
   bed58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bed5a:	6905      	ldr	r5, [r0, #16]
   bed5c:	f100 0714 	add.w	r7, r0, #20
   bed60:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bed64:	1f2e      	subs	r6, r5, #4
   bed66:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bed6a:	4620      	mov	r0, r4
   bed6c:	f7ff fd48 	bl	be800 <__hi0bits>
   bed70:	f1c0 0320 	rsb	r3, r0, #32
   bed74:	280a      	cmp	r0, #10
   bed76:	f8df c07c 	ldr.w	ip, [pc, #124]	; bedf4 <__b2d+0x9c>
   bed7a:	600b      	str	r3, [r1, #0]
   bed7c:	dc14      	bgt.n	beda8 <__b2d+0x50>
   bed7e:	f1c0 0e0b 	rsb	lr, r0, #11
   bed82:	fa24 f10e 	lsr.w	r1, r4, lr
   bed86:	42b7      	cmp	r7, r6
   bed88:	ea41 030c 	orr.w	r3, r1, ip
   bed8c:	bf34      	ite	cc
   bed8e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bed92:	2100      	movcs	r1, #0
   bed94:	3015      	adds	r0, #21
   bed96:	fa04 f000 	lsl.w	r0, r4, r0
   bed9a:	fa21 f10e 	lsr.w	r1, r1, lr
   bed9e:	ea40 0201 	orr.w	r2, r0, r1
   beda2:	ec43 2b10 	vmov	d0, r2, r3
   beda6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   beda8:	42b7      	cmp	r7, r6
   bedaa:	bf3a      	itte	cc
   bedac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bedb0:	f1a5 0608 	subcc.w	r6, r5, #8
   bedb4:	2100      	movcs	r1, #0
   bedb6:	380b      	subs	r0, #11
   bedb8:	d017      	beq.n	bedea <__b2d+0x92>
   bedba:	f1c0 0c20 	rsb	ip, r0, #32
   bedbe:	fa04 f500 	lsl.w	r5, r4, r0
   bedc2:	42be      	cmp	r6, r7
   bedc4:	fa21 f40c 	lsr.w	r4, r1, ip
   bedc8:	ea45 0504 	orr.w	r5, r5, r4
   bedcc:	bf8c      	ite	hi
   bedce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bedd2:	2400      	movls	r4, #0
   bedd4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bedd8:	fa01 f000 	lsl.w	r0, r1, r0
   beddc:	fa24 f40c 	lsr.w	r4, r4, ip
   bede0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bede4:	ea40 0204 	orr.w	r2, r0, r4
   bede8:	e7db      	b.n	beda2 <__b2d+0x4a>
   bedea:	ea44 030c 	orr.w	r3, r4, ip
   bedee:	460a      	mov	r2, r1
   bedf0:	e7d7      	b.n	beda2 <__b2d+0x4a>
   bedf2:	bf00      	nop
   bedf4:	3ff00000 	.word	0x3ff00000

000bedf8 <__d2b>:
   bedf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bedfc:	4689      	mov	r9, r1
   bedfe:	2101      	movs	r1, #1
   bee00:	ec57 6b10 	vmov	r6, r7, d0
   bee04:	4690      	mov	r8, r2
   bee06:	f7ff fc09 	bl	be61c <_Balloc>
   bee0a:	4604      	mov	r4, r0
   bee0c:	b930      	cbnz	r0, bee1c <__d2b+0x24>
   bee0e:	4602      	mov	r2, r0
   bee10:	4b25      	ldr	r3, [pc, #148]	; (beea8 <__d2b+0xb0>)
   bee12:	4826      	ldr	r0, [pc, #152]	; (beeac <__d2b+0xb4>)
   bee14:	f240 310a 	movw	r1, #778	; 0x30a
   bee18:	f7fa fd26 	bl	b9868 <__assert_func>
   bee1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bee20:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bee24:	bb35      	cbnz	r5, bee74 <__d2b+0x7c>
   bee26:	2e00      	cmp	r6, #0
   bee28:	9301      	str	r3, [sp, #4]
   bee2a:	d028      	beq.n	bee7e <__d2b+0x86>
   bee2c:	4668      	mov	r0, sp
   bee2e:	9600      	str	r6, [sp, #0]
   bee30:	f7ff fd06 	bl	be840 <__lo0bits>
   bee34:	9900      	ldr	r1, [sp, #0]
   bee36:	b300      	cbz	r0, bee7a <__d2b+0x82>
   bee38:	9a01      	ldr	r2, [sp, #4]
   bee3a:	f1c0 0320 	rsb	r3, r0, #32
   bee3e:	fa02 f303 	lsl.w	r3, r2, r3
   bee42:	430b      	orrs	r3, r1
   bee44:	40c2      	lsrs	r2, r0
   bee46:	6163      	str	r3, [r4, #20]
   bee48:	9201      	str	r2, [sp, #4]
   bee4a:	9b01      	ldr	r3, [sp, #4]
   bee4c:	61a3      	str	r3, [r4, #24]
   bee4e:	2b00      	cmp	r3, #0
   bee50:	bf14      	ite	ne
   bee52:	2202      	movne	r2, #2
   bee54:	2201      	moveq	r2, #1
   bee56:	6122      	str	r2, [r4, #16]
   bee58:	b1d5      	cbz	r5, bee90 <__d2b+0x98>
   bee5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bee5e:	4405      	add	r5, r0
   bee60:	f8c9 5000 	str.w	r5, [r9]
   bee64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bee68:	f8c8 0000 	str.w	r0, [r8]
   bee6c:	4620      	mov	r0, r4
   bee6e:	b003      	add	sp, #12
   bee70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bee74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bee78:	e7d5      	b.n	bee26 <__d2b+0x2e>
   bee7a:	6161      	str	r1, [r4, #20]
   bee7c:	e7e5      	b.n	bee4a <__d2b+0x52>
   bee7e:	a801      	add	r0, sp, #4
   bee80:	f7ff fcde 	bl	be840 <__lo0bits>
   bee84:	9b01      	ldr	r3, [sp, #4]
   bee86:	6163      	str	r3, [r4, #20]
   bee88:	2201      	movs	r2, #1
   bee8a:	6122      	str	r2, [r4, #16]
   bee8c:	3020      	adds	r0, #32
   bee8e:	e7e3      	b.n	bee58 <__d2b+0x60>
   bee90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bee94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bee98:	f8c9 0000 	str.w	r0, [r9]
   bee9c:	6918      	ldr	r0, [r3, #16]
   bee9e:	f7ff fcaf 	bl	be800 <__hi0bits>
   beea2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   beea6:	e7df      	b.n	bee68 <__d2b+0x70>
   beea8:	000bfcc9 	.word	0x000bfcc9
   beeac:	000bfd50 	.word	0x000bfd50

000beeb0 <__ratio>:
   beeb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   beeb4:	4688      	mov	r8, r1
   beeb6:	4669      	mov	r1, sp
   beeb8:	4681      	mov	r9, r0
   beeba:	f7ff ff4d 	bl	bed58 <__b2d>
   beebe:	a901      	add	r1, sp, #4
   beec0:	4640      	mov	r0, r8
   beec2:	ec55 4b10 	vmov	r4, r5, d0
   beec6:	f7ff ff47 	bl	bed58 <__b2d>
   beeca:	f8d9 3010 	ldr.w	r3, [r9, #16]
   beece:	f8d8 2010 	ldr.w	r2, [r8, #16]
   beed2:	eba3 0c02 	sub.w	ip, r3, r2
   beed6:	e9dd 3200 	ldrd	r3, r2, [sp]
   beeda:	1a9b      	subs	r3, r3, r2
   beedc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   beee0:	ec51 0b10 	vmov	r0, r1, d0
   beee4:	2b00      	cmp	r3, #0
   beee6:	bfd6      	itet	le
   beee8:	460a      	movle	r2, r1
   beeea:	462a      	movgt	r2, r5
   beeec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   beef0:	468b      	mov	fp, r1
   beef2:	462f      	mov	r7, r5
   beef4:	bfd4      	ite	le
   beef6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   beefa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   beefe:	4620      	mov	r0, r4
   bef00:	ee10 2a10 	vmov	r2, s0
   bef04:	465b      	mov	r3, fp
   bef06:	4639      	mov	r1, r7
   bef08:	f7fd fdb8 	bl	bca7c <__aeabi_ddiv>
   bef0c:	ec41 0b10 	vmov	d0, r0, r1
   bef10:	b003      	add	sp, #12
   bef12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bef16 <__copybits>:
   bef16:	3901      	subs	r1, #1
   bef18:	b570      	push	{r4, r5, r6, lr}
   bef1a:	1149      	asrs	r1, r1, #5
   bef1c:	6914      	ldr	r4, [r2, #16]
   bef1e:	3101      	adds	r1, #1
   bef20:	f102 0314 	add.w	r3, r2, #20
   bef24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bef28:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bef2c:	1f05      	subs	r5, r0, #4
   bef2e:	42a3      	cmp	r3, r4
   bef30:	d30c      	bcc.n	bef4c <__copybits+0x36>
   bef32:	1aa3      	subs	r3, r4, r2
   bef34:	3b11      	subs	r3, #17
   bef36:	f023 0303 	bic.w	r3, r3, #3
   bef3a:	3211      	adds	r2, #17
   bef3c:	42a2      	cmp	r2, r4
   bef3e:	bf88      	it	hi
   bef40:	2300      	movhi	r3, #0
   bef42:	4418      	add	r0, r3
   bef44:	2300      	movs	r3, #0
   bef46:	4288      	cmp	r0, r1
   bef48:	d305      	bcc.n	bef56 <__copybits+0x40>
   bef4a:	bd70      	pop	{r4, r5, r6, pc}
   bef4c:	f853 6b04 	ldr.w	r6, [r3], #4
   bef50:	f845 6f04 	str.w	r6, [r5, #4]!
   bef54:	e7eb      	b.n	bef2e <__copybits+0x18>
   bef56:	f840 3b04 	str.w	r3, [r0], #4
   bef5a:	e7f4      	b.n	bef46 <__copybits+0x30>

000bef5c <__any_on>:
   bef5c:	f100 0214 	add.w	r2, r0, #20
   bef60:	6900      	ldr	r0, [r0, #16]
   bef62:	114b      	asrs	r3, r1, #5
   bef64:	4298      	cmp	r0, r3
   bef66:	b510      	push	{r4, lr}
   bef68:	db11      	blt.n	bef8e <__any_on+0x32>
   bef6a:	dd0a      	ble.n	bef82 <__any_on+0x26>
   bef6c:	f011 011f 	ands.w	r1, r1, #31
   bef70:	d007      	beq.n	bef82 <__any_on+0x26>
   bef72:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bef76:	fa24 f001 	lsr.w	r0, r4, r1
   bef7a:	fa00 f101 	lsl.w	r1, r0, r1
   bef7e:	428c      	cmp	r4, r1
   bef80:	d10b      	bne.n	bef9a <__any_on+0x3e>
   bef82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bef86:	4293      	cmp	r3, r2
   bef88:	d803      	bhi.n	bef92 <__any_on+0x36>
   bef8a:	2000      	movs	r0, #0
   bef8c:	bd10      	pop	{r4, pc}
   bef8e:	4603      	mov	r3, r0
   bef90:	e7f7      	b.n	bef82 <__any_on+0x26>
   bef92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bef96:	2900      	cmp	r1, #0
   bef98:	d0f5      	beq.n	bef86 <__any_on+0x2a>
   bef9a:	2001      	movs	r0, #1
   bef9c:	e7f6      	b.n	bef8c <__any_on+0x30>

000bef9e <_calloc_r>:
   bef9e:	b513      	push	{r0, r1, r4, lr}
   befa0:	434a      	muls	r2, r1
   befa2:	4611      	mov	r1, r2
   befa4:	9201      	str	r2, [sp, #4]
   befa6:	f7fa fc4f 	bl	b9848 <_malloc_r>
   befaa:	4604      	mov	r4, r0
   befac:	b118      	cbz	r0, befb6 <_calloc_r+0x18>
   befae:	9a01      	ldr	r2, [sp, #4]
   befb0:	2100      	movs	r1, #0
   befb2:	f7fd ffb9 	bl	bcf28 <memset>
   befb6:	4620      	mov	r0, r4
   befb8:	b002      	add	sp, #8
   befba:	bd10      	pop	{r4, pc}
   befbc:	0000      	movs	r0, r0
	...

000befc0 <nan>:
   befc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; befc8 <nan+0x8>
   befc4:	4770      	bx	lr
   befc6:	bf00      	nop
   befc8:	00000000 	.word	0x00000000
   befcc:	7ff80000 	.word	0x7ff80000

000befd0 <nanf>:
   befd0:	ed9f 0a01 	vldr	s0, [pc, #4]	; befd8 <nanf+0x8>
   befd4:	4770      	bx	lr
   befd6:	bf00      	nop
   befd8:	7fc00000 	.word	0x7fc00000

000befdc <__ascii_wctomb>:
   befdc:	b149      	cbz	r1, beff2 <__ascii_wctomb+0x16>
   befde:	2aff      	cmp	r2, #255	; 0xff
   befe0:	bf85      	ittet	hi
   befe2:	238a      	movhi	r3, #138	; 0x8a
   befe4:	6003      	strhi	r3, [r0, #0]
   befe6:	700a      	strbls	r2, [r1, #0]
   befe8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   befec:	bf98      	it	ls
   befee:	2001      	movls	r0, #1
   beff0:	4770      	bx	lr
   beff2:	4608      	mov	r0, r1
   beff4:	4770      	bx	lr
	...

000beff8 <__aeabi_d2lz>:
   beff8:	b538      	push	{r3, r4, r5, lr}
   beffa:	2200      	movs	r2, #0
   beffc:	2300      	movs	r3, #0
   beffe:	4604      	mov	r4, r0
   bf000:	460d      	mov	r5, r1
   bf002:	f7fd fe83 	bl	bcd0c <__aeabi_dcmplt>
   bf006:	b928      	cbnz	r0, bf014 <__aeabi_d2lz+0x1c>
   bf008:	4620      	mov	r0, r4
   bf00a:	4629      	mov	r1, r5
   bf00c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bf010:	f7fd bf2a 	b.w	bce68 <__aeabi_d2ulz>
   bf014:	4620      	mov	r0, r4
   bf016:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bf01a:	f7fd ff25 	bl	bce68 <__aeabi_d2ulz>
   bf01e:	4240      	negs	r0, r0
   bf020:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bf024:	bd38      	pop	{r3, r4, r5, pc}
   bf026:	bf00      	nop

000bf028 <dynalib_user>:
   bf028:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bf038:	0000 0000 6162 6973 5f63 7473 6972 676e     ....basic_string
   bf048:	3a3a 4d5f 635f 6e6f 7473 7572 7463 6e20     ::_M_construct n
   bf058:	6c75 206c 6f6e 2074 6176 696c 0064 6c73     ull not valid.sl
   bf068:	7661 4365 756f 746e 203a 6925 0a00 6572     aveCount: %i..re
   bf078:	7571 7365 2074 6f63 6564 3120 202c 6461     quest code 1, ad
   bf088:	7264 7365 3a73 0020 7274 6e61 6d73 7369     dress: .transmis
   bf098:	6973 6e6f 7220 6365 6569 6576 2064 7266     sion recieved fr
   bf0a8:	6d6f 203a 6400 7665 6369 2065 6469 203a     om: .device id: 
   bf0b8:	7400 6172 736e 696d 7373 6f69 206e 6573     .transmission se
   bf0c8:	746e 7420 3a6f 0020 6572 7571 7365 2074     nt to: .request 
   bf0d8:	6f63 6564 3220 202c 6461 7264 7365 3a73     code 2, address:
   bf0e8:	0020 6f63 666e 696c 7463 7620 7265 6669      .conflict verif
   bf0f8:	6369 7461 6f69 3a6e 0020 6170 7373 0a00     ication: .pass..
   bf108:	6f43 6e6e 6365 6574 2064 6f74 203a 6300     Connected to: .c
   bf118:	6e61 6f6e 2074 7263 6165 6574 7320 6474     annot create std
   bf128:	3a3a 6576 7463 726f 6c20 7261 6567 2072     ::vector larger 
   bf138:	6874 6e61 6d20 7861 735f 7a69 2865 0029     than max_size().
   bf148:	6b6f 7700 6669 3a69 2c00 5300 4953 3a44     ok.wifi:.,.SSID:
   bf158:	2520 2c73 7020 7361 7773 726f 3a64 2520      %s, password: %
   bf168:	0073 6963 7974 003a 6e69 6f63 7272 6365     s.city:.incorrec
   bf178:	2074 6963 7974 6e20 6d61 0065 6c73 7661     t city name.slav
   bf188:	2065 6461 7264 7365 6573 2073 6f73 7472     e addresses sort
   bf198:	6465 6300 7469 3a79 2520 0073 6f63 6f6c     ed.city: %s.colo
   bf1a8:	3a72 6300 7469 2079 6f6e 2074 6573 0074     r:.city not set.
   bf1b8:	7267 6565 316e 6700 6572 6e65 6700 6572     green1.green.gre
   bf1c8:	6e65 0032 6172 6c69 6177 2079 6e69 6564     en2.railway inde
   bf1d8:	3a78 2520 0069 6e69 6f63 7272 6365 2074     x: %i.incorrect 
   bf1e8:	6172 6c69 6177 2079 6f63 6f6c 0072 6461     railway color.ad
   bf1f8:	7264 7365 3a73 2520 0069 4c42 2045 6966     dress: %i.BLE fi
   bf208:	696e 6873 6465 7300 6170 6b72 6c63 6569     nished.sparkclie
   bf218:	746e 7200 7365 7465 7400 7275 696e 676e     nt.reset.turning
   bf228:	6f20 6666 203a 6925 7200 7365 7465 6420      off: %i.reset d
   bf238:	6e6f 0065 6572 0064 4646 3030 3030 3000     one.red.FF0000.0
   bf248:	3041 3030 0030 6c62 6575 3000 3030 4630     A0000.blue.0000F
   bf258:	0046 3030 3030 4130 6200 6f72 6e77 4600     F.00000A.brown.F
   bf268:	4646 3046 0030 4130 4130 3030 3000 4630     FFF00.0A0A00.00F
   bf278:	3046 0030 3030 4130 3030 6f00 6172 676e     F00.000A00.orang
   bf288:	0065 4646 3038 3030 3000 3041 3035 0030     e.FF8000.0A0500.
   bf298:	7570 7072 656c 3200 3030 4630 0046 3230     purple.2000FF.02
   bf2a8:	3030 4130 7000 6e69 006b 4646 3038 3038     000A.pink.FF8080
   bf2b8:	3000 3041 3035 0035 3761 6233 3161 3130     .0A0505.a73ba101
   bf2c8:	382d 3931 2d32 6134 3135 622d 3234 2d64     -8192-4a51-b42d-
   bf2d8:	6561 6339 3164 6234 3431 3561 3600 3445     ae9cd14b14a5.6E4
   bf2e8:	3030 3030 2d32 3542 3341 462d 3933 2d33     00002-B5A3-F393-
   bf2f8:	3045 3941 452d 3035 3245 4434 4343 3941     E0A9-E50E24DCCA9
   bf308:	0045 4536 3034 3030 3330 422d 4135 2d33     E.6E400003-B5A3-
   bf318:	3346 3339 452d 4130 2d39 3545 4530 3432     F393-E0A9-E50E24
   bf328:	4344 4143 4539 7400 0078 7872 6c00 6261     DCCA9E.tx.rx.lab
   bf338:	742e 6568 6377 2e6c 6f63 006d 7274 6b65     .thewcl.com.trek
   bf348:	742e 6568 6377 2e6c 6f63 006d 7463 0061     .thewcl.com.cta.
   bf358:	626d 6174 6c00 6f6f 2070 7473 7261 0074     mbta.loop start.
   bf368:	6f6c 706f 742d 6172 6b63 2f73 7774 7469     loop-tracks/twit
   bf378:	6574 0072 716d 7474 6c20 6f6f 0070 6925     ter.mqtt loop.%i
   bf388:	202c 7000 6f72 6978 696d 7974 2f00 6f6c     , .proximity./lo
   bf398:	706f 742d 6172 6b63 2f73 3f00 696c 656e     op-tracks/.?line
   bf3a8:	3d73 4700 5445 7000 7261 6973 676e 7000     s=.GET.parsing.p
   bf3b8:	7261 6973 676e 6620 6961 656c 0064 696c     arsing failed.li
   bf3c8:	656e 0073 7274 6961 736e 6e00 7865 5f74     nes.trains.next_
   bf3d8:	7473 706f 6400 7365 6974 616e 6974 6e6f     stop.destination
   bf3e8:	6400 7269 6365 6974 6e6f 6c00 7461 7469     .direction.latit
   bf3f8:	6475 0065 6f6c 676e 7469 6475 0065 7262     ude.longitude.br
   bf408:	6165 006b 7325 7220 6961 206c 6170 7472     eak.%s rail part
   bf418:	2520 3a69 0020 0000                          %i: ...

000bf420 <_ZTV16JsonParserStaticILj10000ELj1000EE>:
	...
   bf428:	40bd 000b 40d1 000b 6341 6563 7470 2f00     .@...@..Accept./
   bf438:	2f2a 0000 0019 0000 0003 0000 0007 0000     */..............
   bf448:	0005 0000 000c 0000 0008 0000 0005 0000     ................
   bf458:	0005 0000 0005 0000 0019 0000 0005 0000     ................
   bf468:	000f 0000 000a 0000 000a 0000 000a 0000     ................
   bf478:	000a 0000 0014 0000 0000 0000 0028 0000     ............(...
   bf488:	0000 0000 0002 0000 0006 0000 0000 0000     ................
   bf498:	0000 0000 000f 0000 000a 0000 000a 0000     ................
   bf4a8:	000f 0000 000f 0000 000f 0000 0014 0000     ................
   bf4b8:	0000 0000 0001 0000 0003 0000 0000 0000     ................
   bf4c8:	0000 0000 000c 0000 0007 0000 0001 0000     ................
   bf4d8:	000a 0000 000a 0000 000a 0000 000a 0000     ................
   bf4e8:	000c 0000 0000 0000 0028 0000 0008 0000     ........(.......
   bf4f8:	0003 0000 0007 0000 0001 0000 0003 0000     ................
   bf508:	0007 0000 0007 0000 0006 0000 000a 0000     ................
   bf518:	000a 0000 000a 0000 000a 0000 000e 0000     ................
   bf528:	0000 0000 0028 0000 0006 0000 0003 0000     ....(...........
   bf538:	0007 0000 0002 0000 0003 0000 0005 0000     ................
   bf548:	000a 0000 0005 0000 000a 0000 000a 0000     ................
   bf558:	000a 0000 0014 0000 000a 0000 000a 0000     ................
   bf568:	000a 0000 0005 0000 000a 0000 000a 0000     ................
   bf578:	000a 0000 000a 0000 000a 0000 000a 0000     ................
   bf588:	000a 0000 000a 0000 000a 0000 000a 0000     ................
   bf598:	4820 5454 2f50 2e31 0d30 000a 6c63 736f      HTTP/1.0...clos
   bf5a8:	0065 6f43 6e6e 6365 6974 6e6f 4800 534f     e.Connection.HOS
   bf5b8:	0054 6f43 746e 6e65 2d74 654c 676e 6874     T.Content-Length
   bf5c8:	5000 534f 0054 0a0d 0a0d 2500 3430 0078     .POST......%04x.

000bf5d8 <_ZTV10JsonBuffer>:
	...
   bf5e0:	7ec5 000b 7ee1 000b                         .~...~..

000bf5e8 <_ZTV10JsonParser>:
	...
   bf5f0:	7ef5 000b 7f19 000b                         .~......

000bf5f8 <_ZTV13JsonReference>:
	...
   bf600:	7eb5 000b 7eb7 000b 0400 514d 5454 0004     .~...~....MQTT..
   bf610:	4d06 4951 6473 0370 7341 6573 7472 6f69     .MQIsdp.Assertio
   bf620:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   bf630:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   bf640:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   bf650:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   bf660:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   bf670:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   bf680:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   bf690:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   bf6a0:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   bf6b0:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   bf6c0:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   bf6d0:	6976 6563 002e 6f43 6e6e 6365 6574 2064     vice..Connected 
   bf6e0:	7962 4320 6e65 7274 6c61 6420 7665 6369     by Central devic
   bf6f0:	2e65 4400 7369 6f63 6e6e 6365 6574 2064     e..Disconnected 
   bf700:	7962 7220 6d65 746f 2065 6564 6976 6563     by remote device
   bf710:	002e 7544 6c70 6369 7461 6465 6320 6168     ..Duplicated cha
   bf720:	6172 7463 7265 7369 6974 2063 6163 6e6e     racteristic cann
   bf730:	746f 6220 2065 6461 6564 2e64 4600 6961     ot be added..Fai
   bf740:	656c 2064 6f74 6120 7070 6e65 2064 6f6c     led to append lo
   bf750:	6163 206c 6863 7261 6361 6574 6972 7473     cal characterist
   bf760:	6369 002e                                   ic..

000bf764 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bf76c:	9895 000b 98f9 000b 99df 000b 9923 000b     ............#...
   bf77c:	9899 000b                                   ....

000bf780 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bf788:	9891 000b 9907 000b 9893 000b 9929 000b     ............)...
   bf798:	98b9 000b                                   ....

000bf79c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bf7a4:	988f 000b 9915 000b a199 000b 992f 000b     ............/...
   bf7b4:	98d9 000b                                   ....

000bf7b8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bf7c4:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000bf7d6 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bf7d6:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000bf7e6 <_ZN8particle7BleUuid9BASE_UUIDE>:
   bf7e6:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000bf7f8 <_ZTVN5spark13EthernetClassE>:
	...
   bf800:	ac47 000b ac3d 000b ac33 000b ac29 000b     G...=...3...)...
   bf810:	ac1d 000b ac11 000b aef1 000b aef9 000b     ................
   bf820:	ac05 000b abfd 000b abf3 000b abe9 000b     ................
   bf830:	af29 000b                                   )...

000bf834 <_ZTV7TwoWire>:
	...
   bf83c:	ac65 000b acaf 000b ac87 000b ac67 000b     e...........g...
   bf84c:	ac8f 000b ac97 000b ac9f 000b aca7 000b     ................

000bf85c <_ZTV9IPAddress>:
	...
   bf864:	ad95 000b ad85 000b ad87 000b 7061 0070     ............app.

000bf874 <_ZTVN5spark12NetworkClassE>:
	...
   bf87c:	aeb1 000b aebb 000b aec5 000b aecf 000b     ................
   bf88c:	aed9 000b aee5 000b aef1 000b aef9 000b     ................
   bf89c:	af01 000b af0d 000b af15 000b af1f 000b     ................
   bf8ac:	af29 000b 6977 6972 676e 7200 6365 2076     )...wiring.recv 
   bf8bc:	7265 6f72 2072 203d 6425 0000               error = %d..

000bf8c8 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bf8d0:	b4d1 000b b4f5 000b ba27 000b b503 000b     ........'.......
   bf8e0:	b4d5 000b                                   ....

000bf8e4 <_ZTV9TCPClient>:
	...
   bf8ec:	b581 000b b5b5 000b b44d 000b b467 000b     ........M...g...
   bf8fc:	b8bd 000b b491 000b b733 000b b4c5 000b     ........3.......
   bf90c:	b7c5 000b b605 000b b761 000b b971 000b     ........a...q...
   bf91c:	b701 000b b4c7 000b b479 000b b509 000b     ........y.......
   bf92c:	b5e5 000b 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
   bf93c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000bf94c <_ZTV11USARTSerial>:
	...
   bf954:	ba41 000b baad 000b ba85 000b b015 000b     A...............
   bf964:	ba55 000b ba71 000b ba63 000b ba7f 000b     U...q...c.......
   bf974:	ba43 000b ba47 000b                         C...G...

000bf97c <_ZTV9USBSerial>:
	...
   bf984:	baeb 000b bb53 000b bb29 000b b015 000b     ....S...).......
   bf994:	bb1b 000b baed 000b bafd 000b bb4d 000b     ............M...
   bf9a4:	bb0d 000b bae5 000b                         ........

000bf9ac <_ZTVN5spark9WiFiClassE>:
	...
   bf9b4:	bc4b 000b bc41 000b bc37 000b bbed 000b     K...A...7.......
   bf9c4:	bc2b 000b bc1f 000b aef1 000b aef9 000b     +...............
   bf9d4:	bc13 000b bc0b 000b bc01 000b bbf7 000b     ................
   bf9e4:	af29 000b                                   )...

000bf9e8 <_ZSt7nothrow>:
	...

000bf9e9 <_ZTSSt19_Sp_make_shared_tag>:
   bf9e9:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bf9f9:	6572 5f64 6174 0067 0000                     red_tag....

000bfa04 <_ZTISt19_Sp_make_shared_tag>:
   bfa04:	fa5c 000b f9e9 000b 6162 6973 5f63 7473     \.......basic_st
   bfa14:	6972 676e 3a3a 4d5f 635f 6572 7461 0065     ring::_M_create.

000bfa24 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bfa24:	fabc 000b fa30 000b fae0 000b               ....0.......

000bfa30 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bfa30:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bfa40:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bfa50:	0045 0000                                   E...

000bfa54 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bfa54:	0000 0000 fa24 000b c041 000b c055 000b     ....$...A...U...
   bfa64:	c1e9 000b c1e9 000b c0bf 000b c001 000b     ................
   bfa74:	c0a7 000b c069 000b c033 000b               ....i...3...

000bfa80 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bfa80:	fabc 000b fa8c 000b fa24 000b               ........$...

000bfa8c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bfa8c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bfa9c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bfaac:	666e 456f 0000 0000                         nfoE....

000bfab4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bfab4:	0000 0000 fa80 000b c0e9 000b c0fd 000b     ................
   bfac4:	c1e9 000b c1e9 000b c0bf 000b c001 000b     ................
   bfad4:	c1bd 000b c149 000b c111 000b               ....I.......

000bfae0 <_ZTISt9type_info>:
   bfae0:	fa5c 000b fae8 000b                         \.......

000bfae8 <_ZTSSt9type_info>:
   bfae8:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bfaf8:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bfb08:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   bfb18:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bfb28:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bfb38:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bfb48:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bfb58:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   bfb68:	6e69 7469 0079 6e61 0000 0000               inity.an....

000bfb74 <fpi.1>:
   bfb74:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bfb84:	0000 0000                                   ....

000bfb88 <fpinan.0>:
   bfb88:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000bfba0 <tinytens>:
   bfba0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bfbb0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bfbc0:	6f43 64ac 0628 1168                         Co.d(.h.

000bfbc8 <_ctype_>:
   bfbc8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bfbd8:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bfbe8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bfbf8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bfc08:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bfc18:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bfc28:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bfc38:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bfc48:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bfcc8:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bfcd8:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   bfce8:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   bfcf8:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   bfd08:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   bfd18:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   bfd28:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   bfd38:	632e 0000                                   .c..

000bfd3c <_C_numeric_locale>:
   bfd3c:	f762 000b f5d2 000b 50c8 2003 0043 4f50     b........P. C.PO
   bfd4c:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   bfd5c:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bfd6c:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bfd7c:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bfd8c:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bfd9c:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   bfdac:	0000 0000                                   ....

000bfdb0 <__mprec_bigtens>:
   bfdb0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bfdc0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bfdd0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bfdd8 <__mprec_tens>:
   bfdd8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bfde8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bfdf8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bfe08:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bfe18:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bfe28:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bfe38:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bfe48:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bfe58:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bfe68:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bfe78:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bfe88:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bfe98:	9db4 79d9 7843 44ea                         ...yCx.D

000bfea0 <p05.0>:
   bfea0:	0005 0000 0019 0000 007d 0000               ........}...

000bfeac <link_const_variable_data_end>:
   bfeac:	000b70fd 	.word	0x000b70fd
   bfeb0:	000babd9 	.word	0x000babd9
   bfeb4:	000bac51 	.word	0x000bac51
   bfeb8:	000baea1 	.word	0x000baea1
   bfebc:	000bb001 	.word	0x000bb001
   bfec0:	000bb13d 	.word	0x000bb13d
   bfec4:	000bb429 	.word	0x000bb429
   bfec8:	000bba2d 	.word	0x000bba2d
   bfecc:	000bbc55 	.word	0x000bbc55
