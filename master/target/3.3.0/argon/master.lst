
/Users/sainihome/Documents/GitHub/loop-tracks/master/target/3.3.0/argon/master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009040  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bd060  000bd060  0000d060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bd084  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f0  20035548  000bd088  00015548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000090b8  20035738  20035738  00025738  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000bd278  000bd278  0001d278  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bd2a0  000bd2a0  0001d2a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00134e05  00000000  00000000  0001d2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00012c2a  00000000  00000000  001520a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00044302  00000000  00000000  00164cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003250  00000000  00000000  001a8fd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000c6b0  00000000  00000000  001ac225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003808c  00000000  00000000  001b88d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00042bb6  00000000  00000000  001f0961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014e0d4  00000000  00000000  00233517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000ab40  00000000  00000000  003815ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f006 f93e 	bl	ba2b2 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f006 f960 	bl	ba302 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	20035548 	.word	0x20035548
   b404c:	000bd088 	.word	0x000bd088
   b4050:	20035738 	.word	0x20035738
   b4054:	20035738 	.word	0x20035738
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f004 ffed 	bl	b9040 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bd02c 	.word	0x000bd02c
   b4080:	000bd054 	.word	0x000bd054

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 ba68 	b.w	b4558 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 fa1d 	bl	b54c8 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f004 bf8d 	b.w	b8fb0 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 bd03 	b.w	b6aa0 <malloc>

000b409a <_Znaj>:
   b409a:	f002 bd01 	b.w	b6aa0 <malloc>

000b409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409e:	f002 bd07 	b.w	b6ab0 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f002 bd05 	b.w	b6ab0 <free>

000b40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a6:	7800      	ldrb	r0, [r0, #0]
   b40a8:	fab0 f080 	clz	r0, r0
   b40ac:	0940      	lsrs	r0, r0, #5
   b40ae:	4770      	bx	lr

000b40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b0:	2301      	movs	r3, #1
   b40b2:	7003      	strb	r3, [r0, #0]
   b40b4:	4770      	bx	lr
	...

000b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40b8:	b510      	push	{r4, lr}
   b40ba:	4b03      	ldr	r3, [pc, #12]	; (b40c8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev+0x10>)
   b40bc:	6003      	str	r3, [r0, #0]
   b40be:	4604      	mov	r4, r0
   b40c0:	f001 fe16 	bl	b5cf0 <_ZN10JsonParserD1Ev>
   b40c4:	4620      	mov	r0, r4
   b40c6:	bd10      	pop	{r4, pc}
   b40c8:	000bc684 	.word	0x000bc684

000b40cc <_ZN16JsonParserStaticILj10000ELj1000EED0Ev>:
   b40cc:	b510      	push	{r4, lr}
   b40ce:	4604      	mov	r4, r0
   b40d0:	f7ff fff2 	bl	b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
   b40d4:	4620      	mov	r0, r4
   b40d6:	f246 51bc 	movw	r1, #26044	; 0x65bc
   b40da:	f7ff ffe2 	bl	b40a2 <_ZdlPvj>
   b40de:	4620      	mov	r0, r4
   b40e0:	bd10      	pop	{r4, pc}
	...

000b40e4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>:

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
   b40e4:	b508      	push	{r3, lr}
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b40e6:	4603      	mov	r3, r0
   b40e8:	b150      	cbz	r0, b4100 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x1c>
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      _GLIBCXX_NODISCARD _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {
	if (__n > this->_M_max_size())
   b40ea:	4a06      	ldr	r2, [pc, #24]	; (b4104 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x20>)
   b40ec:	4290      	cmp	r0, r2
   b40ee:	d901      	bls.n	b40f4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b40f0:	f005 f840 	bl	b9174 <_ZSt17__throw_bad_allocv>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b40f4:	2018      	movs	r0, #24
   b40f6:	4358      	muls	r0, r3
      }
   b40f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b40fc:	f7ff bfcb 	b.w	b4096 <_Znwj>
   b4100:	bd08      	pop	{r3, pc}
   b4102:	bf00      	nop
   b4104:	05555555 	.word	0x05555555

000b4108 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b4108:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b410a:	b148      	cbz	r0, b4120 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b410c:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   b4110:	d301      	bcc.n	b4116 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b4112:	f005 f82f 	bl	b9174 <_ZSt17__throw_bad_allocv>
      }
   b4116:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b411a:	0080      	lsls	r0, r0, #2
   b411c:	f7ff bfbb 	b.w	b4096 <_Znwj>
   b4120:	bd08      	pop	{r3, pc}
	...

000b4124 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b4124:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4126:	4603      	mov	r3, r0
   b4128:	b150      	cbz	r0, b4140 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0x1c>
	if (__n > this->_M_max_size())
   b412a:	4a06      	ldr	r2, [pc, #24]	; (b4144 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0x20>)
   b412c:	4290      	cmp	r0, r2
   b412e:	d901      	bls.n	b4134 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b4130:	f005 f820 	bl	b9174 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4134:	2014      	movs	r0, #20
   b4136:	4358      	muls	r0, r3
      }
   b4138:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b413c:	f7ff bfab 	b.w	b4096 <_Znwj>
   b4140:	bd08      	pop	{r3, pc}
   b4142:	bf00      	nop
   b4144:	06666666 	.word	0x06666666

000b4148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>:

      /**
       *  @brief  Construct string with copy of value of @a __str.
       *  @param  __str  Source string.
       */
      basic_string(const basic_string& __str)
   b4148:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b414a:	f100 0308 	add.w	r3, r0, #8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b414e:	6003      	str	r3, [r0, #0]

      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      size_type
      length() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
   b4150:	e9d1 5300 	ldrd	r5, r3, [r1]
      basic_string(const basic_string& __str)
   b4154:	4604      	mov	r4, r0
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b4156:	18ee      	adds	r6, r5, r3
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   b4158:	b91d      	cbnz	r5, b4162 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
   b415a:	b116      	cbz	r6, b4162 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
	  std::__throw_logic_error(__N("basic_string::"
   b415c:	480c      	ldr	r0, [pc, #48]	; (b4190 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x48>)
   b415e:	f005 f80c 	bl	b917a <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
   b4162:	2b0f      	cmp	r3, #15
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b4164:	9301      	str	r3, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b4166:	d907      	bls.n	b4178 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x30>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   b4168:	2200      	movs	r2, #0
   b416a:	a901      	add	r1, sp, #4
   b416c:	4620      	mov	r0, r4
   b416e:	f005 f8c7 	bl	b9300 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b4172:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4174:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4176:	60a3      	str	r3, [r4, #8]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b4178:	4632      	mov	r2, r6
   b417a:	4629      	mov	r1, r5
   b417c:	6820      	ldr	r0, [r4, #0]
   b417e:	f005 f8f5 	bl	b936c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   b4182:	9b01      	ldr	r3, [sp, #4]
      using comparison_category = strong_ordering;
#endif

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
      { __c1 = __c2; }
   b4184:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4186:	6063      	str	r3, [r4, #4]
   b4188:	2100      	movs	r1, #0
   b418a:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b418c:	b002      	add	sp, #8
   b418e:	bd70      	pop	{r4, r5, r6, pc}
   b4190:	000bc388 	.word	0x000bc388

000b4194 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4194:	6803      	ldr	r3, [r0, #0]
   b4196:	b2c9      	uxtb	r1, r1
   b4198:	689b      	ldr	r3, [r3, #8]
   b419a:	4718      	bx	r3

000b419c <_ZN5Print5writeEPKc.isra.0>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b419c:	b513      	push	{r0, r1, r4, lr}
   b419e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
   b41a0:	b161      	cbz	r1, b41bc <_ZN5Print5writeEPKc.isra.0+0x20>
      return write((const uint8_t *)str, strlen(str));
   b41a2:	4608      	mov	r0, r1
   b41a4:	9101      	str	r1, [sp, #4]
   b41a6:	f006 f904 	bl	ba3b2 <strlen>
   b41aa:	6823      	ldr	r3, [r4, #0]
   b41ac:	9901      	ldr	r1, [sp, #4]
   b41ae:	68db      	ldr	r3, [r3, #12]
   b41b0:	4602      	mov	r2, r0
   b41b2:	4620      	mov	r0, r4
    }
   b41b4:	b002      	add	sp, #8
   b41b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b41ba:	4718      	bx	r3
    }
   b41bc:	b002      	add	sp, #8
   b41be:	bd10      	pop	{r4, pc}

000b41c0 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>:
  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
   b41c0:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b41c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b41c6:	4604      	mov	r4, r0
   b41c8:	460d      	mov	r5, r1
      if (&__x != this)
   b41ca:	d02c      	beq.n	b4226 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x66>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b41cc:	e9d1 9a00 	ldrd	r9, sl, [r1]
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_end_of_storage
			 - this->_M_impl._M_start); }
   b41d0:	6800      	ldr	r0, [r0, #0]
   b41d2:	68a3      	ldr	r3, [r4, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b41d4:	ebaa 0709 	sub.w	r7, sl, r9
			 - this->_M_impl._M_start); }
   b41d8:	1a1b      	subs	r3, r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
   b41da:	429f      	cmp	r7, r3
   b41dc:	d925      	bls.n	b422a <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x6a>
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
   b41de:	4827      	ldr	r0, [pc, #156]	; (b427c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0xbc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b41e0:	10bb      	asrs	r3, r7, #2
	  pointer __result = this->_M_allocate(__n);
   b41e2:	4358      	muls	r0, r3
   b41e4:	f7ff ff9e 	bl	b4124 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
   b41e8:	f04f 0c00 	mov.w	ip, #0
   b41ec:	4680      	mov	r8, r0
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
   b41ee:	eb09 050c 	add.w	r5, r9, ip
   b41f2:	45aa      	cmp	sl, r5
   b41f4:	d009      	beq.n	b420a <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x4a>
   */
#if __cplusplus >= 201103L
  template<typename _Tp, typename... _Args>
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b41f6:	eb18 060c 	adds.w	r6, r8, ip
   b41fa:	bf1f      	itttt	ne
   b41fc:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   b41fe:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   b4200:	682b      	ldrne	r3, [r5, #0]
   b4202:	6033      	strne	r3, [r6, #0]
   b4204:	f10c 0c14 	add.w	ip, ip, #20
   b4208:	e7f1      	b.n	b41ee <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x2e>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b420a:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b420c:	b118      	cbz	r0, b4216 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x56>
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
   b420e:	68a1      	ldr	r1, [r4, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b4210:	1a09      	subs	r1, r1, r0
   b4212:	f7ff ff46 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4216:	eb08 0007 	add.w	r0, r8, r7
	      this->_M_impl._M_start = __tmp;
   b421a:	f8c4 8000 	str.w	r8, [r4]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b421e:	60a0      	str	r0, [r4, #8]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4220:	6823      	ldr	r3, [r4, #0]
   b4222:	443b      	add	r3, r7
   b4224:	6063      	str	r3, [r4, #4]
	}
      return *this;
    }
   b4226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b422a:	6862      	ldr	r2, [r4, #4]
   b422c:	1a12      	subs	r2, r2, r0
	  else if (size() >= __xlen)
   b422e:	4297      	cmp	r7, r2
   b4230:	d806      	bhi.n	b4240 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x80>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   b4232:	45ca      	cmp	sl, r9
   b4234:	d0f4      	beq.n	b4220 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x60>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b4236:	463a      	mov	r2, r7
   b4238:	4649      	mov	r1, r9
   b423a:	f006 f848 	bl	ba2ce <memmove>

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b423e:	e7ef      	b.n	b4220 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x60>
	  if (_Num)
   b4240:	b112      	cbz	r2, b4248 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x88>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b4242:	4649      	mov	r1, r9
   b4244:	f006 f843 	bl	ba2ce <memmove>
   b4248:	e9d4 3e00 	ldrd	r3, lr, [r4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b424c:	682a      	ldr	r2, [r5, #0]
					  __x._M_impl._M_finish,
   b424e:	f8d5 9004 	ldr.w	r9, [r5, #4]
   b4252:	ebae 0303 	sub.w	r3, lr, r3
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b4256:	eb02 0803 	add.w	r8, r2, r3
					  __x._M_impl._M_finish,
   b425a:	f04f 0c00 	mov.w	ip, #0
   b425e:	eb08 050c 	add.w	r5, r8, ip
   b4262:	45a9      	cmp	r9, r5
   b4264:	d0dc      	beq.n	b4220 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x60>
   b4266:	eb1e 060c 	adds.w	r6, lr, ip
   b426a:	bf1f      	itttt	ne
   b426c:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   b426e:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   b4270:	682b      	ldrne	r3, [r5, #0]
   b4272:	6033      	strne	r3, [r6, #0]
   b4274:	f10c 0c14 	add.w	ip, ip, #20
   b4278:	e7f1      	b.n	b425e <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x9e>
   b427a:	bf00      	nop
   b427c:	cccccccd 	.word	0xcccccccd

000b4280 <_Z16randomizeAddressv>:
  delay(5000);
  Serial.println();
}

//clears up conflicts with multiple i2c slaves having the same address
void randomizeAddress(){
   b4280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while(slaveCount != slaveCountExpected){
   b4284:	4d9e      	ldr	r5, [pc, #632]	; (b4500 <_Z16randomizeAddressv+0x280>)

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b4286:	f8df 829c 	ldr.w	r8, [pc, #668]	; b4524 <_Z16randomizeAddressv+0x2a4>
void randomizeAddress(){
   b428a:	b08c      	sub	sp, #48	; 0x30
  while(slaveCount != slaveCountExpected){
   b428c:	682b      	ldr	r3, [r5, #0]
   b428e:	2b02      	cmp	r3, #2
   b4290:	f000 80fd 	beq.w	b448e <_Z16randomizeAddressv+0x20e>
    slaveCount = 0;
   b4294:	2300      	movs	r3, #0
   b4296:	f8df 9290 	ldr.w	r9, [pc, #656]	; b4528 <_Z16randomizeAddressv+0x2a8>
      if(Wire.available() > 0){
        Serial.println("transmission recieved from: " + String(i));

        slaveCount++;

        String inputBuffer = "";
   b429a:	4f9a      	ldr	r7, [pc, #616]	; (b4504 <_Z16randomizeAddressv+0x284>)
    slaveCount = 0;
   b429c:	602b      	str	r3, [r5, #0]
    for(int i = 8; i <= 119; i++){
   b429e:	2408      	movs	r4, #8
      Serial.println("\nrequest code 1, address: " + String(i));
   b42a0:	f004 fdb4 	bl	b8e0c <_Z16_fetch_usbserialv>
   b42a4:	4641      	mov	r1, r8
   b42a6:	4606      	mov	r6, r0
   b42a8:	a808      	add	r0, sp, #32
   b42aa:	f004 f924 	bl	b84f6 <_ZN6StringC1EPK19__FlashStringHelper>
   b42ae:	220a      	movs	r2, #10
   b42b0:	4621      	mov	r1, r4
   b42b2:	a804      	add	r0, sp, #16
   b42b4:	f004 f945 	bl	b8542 <_ZN6StringC1Eih>
   b42b8:	a904      	add	r1, sp, #16
   b42ba:	a808      	add	r0, sp, #32
   b42bc:	f004 f97c 	bl	b85b8 <_ZplRK15StringSumHelperRK6String>
   b42c0:	6801      	ldr	r1, [r0, #0]
   b42c2:	4630      	mov	r0, r6
   b42c4:	f004 f89d 	bl	b8402 <_ZN5Print7printlnEPKc>
   b42c8:	a804      	add	r0, sp, #16
   b42ca:	f004 f8c9 	bl	b8460 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b42ce:	a808      	add	r0, sp, #32
   b42d0:	f004 f8c6 	bl	b8460 <_ZN6StringD1Ev>
      Wire.beginTransmission(i);
   b42d4:	f004 fee8 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b42d8:	4621      	mov	r1, r4
   b42da:	f003 ff05 	bl	b80e8 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('1');
   b42de:	f004 fee3 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b42e2:	2131      	movs	r1, #49	; 0x31
   b42e4:	f7ff ff56 	bl	b4194 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b42e8:	fa5f fa84 	uxtb.w	sl, r4
   b42ec:	f004 fedc 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b42f0:	f003 ff01 	bl	b80f6 <_ZN7TwoWire15endTransmissionEv>
      Wire.requestFrom(i, 24);
   b42f4:	f004 fed8 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b42f8:	2218      	movs	r2, #24
   b42fa:	4651      	mov	r1, sl
   b42fc:	f003 feed 	bl	b80da <_ZN7TwoWire11requestFromEhj>
      if(Wire.available() > 0){
   b4300:	f004 fed2 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b4304:	6803      	ldr	r3, [r0, #0]
   b4306:	691b      	ldr	r3, [r3, #16]
   b4308:	4798      	blx	r3
   b430a:	2800      	cmp	r0, #0
   b430c:	f340 80ba 	ble.w	b4484 <_Z16randomizeAddressv+0x204>
        Serial.println("transmission recieved from: " + String(i));
   b4310:	f004 fd7c 	bl	b8e0c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4314:	4649      	mov	r1, r9
   b4316:	4606      	mov	r6, r0
   b4318:	a808      	add	r0, sp, #32
   b431a:	f004 f8ec 	bl	b84f6 <_ZN6StringC1EPK19__FlashStringHelper>
   b431e:	220a      	movs	r2, #10
   b4320:	4621      	mov	r1, r4
   b4322:	a804      	add	r0, sp, #16
   b4324:	f004 f90d 	bl	b8542 <_ZN6StringC1Eih>
   b4328:	a904      	add	r1, sp, #16
   b432a:	a808      	add	r0, sp, #32
   b432c:	f004 f944 	bl	b85b8 <_ZplRK15StringSumHelperRK6String>
   b4330:	6801      	ldr	r1, [r0, #0]
   b4332:	4630      	mov	r0, r6
   b4334:	f004 f865 	bl	b8402 <_ZN5Print7printlnEPKc>
   b4338:	a804      	add	r0, sp, #16
   b433a:	f004 f891 	bl	b8460 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b433e:	a808      	add	r0, sp, #32
   b4340:	f004 f88e 	bl	b8460 <_ZN6StringD1Ev>
        slaveCount++;
   b4344:	682b      	ldr	r3, [r5, #0]
        String inputBuffer = "";
   b4346:	4639      	mov	r1, r7
        slaveCount++;
   b4348:	3301      	adds	r3, #1
        String inputBuffer = "";
   b434a:	4668      	mov	r0, sp
        slaveCount++;
   b434c:	602b      	str	r3, [r5, #0]
        String inputBuffer = "";
   b434e:	f004 f8d2 	bl	b84f6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4352:	2618      	movs	r6, #24
        char c;
        for(int j = 0; j < 24; j++){
          c = Wire.read();
   b4354:	f004 fea8 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b4358:	6803      	ldr	r3, [r0, #0]
   b435a:	695b      	ldr	r3, [r3, #20]
   b435c:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b435e:	b2c1      	uxtb	r1, r0
   b4360:	4668      	mov	r0, sp
   b4362:	f004 f91c 	bl	b859e <_ZN6String6concatEc>
        for(int j = 0; j < 24; j++){
   b4366:	3e01      	subs	r6, #1
   b4368:	d1f4      	bne.n	b4354 <_Z16randomizeAddressv+0xd4>
          inputBuffer += c;
        }
        Wire.beginTransmission(i);
   b436a:	f004 fe9d 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b436e:	4621      	mov	r1, r4
   b4370:	f003 feba 	bl	b80e8 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(inputBuffer);
   b4374:	f004 fe98 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b4378:	9900      	ldr	r1, [sp, #0]
   b437a:	f7ff ff0f 	bl	b419c <_ZN5Print5writeEPKc.isra.0>
        Serial.println("device id: " + inputBuffer);
   b437e:	f004 fd45 	bl	b8e0c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4382:	4961      	ldr	r1, [pc, #388]	; (b4508 <_Z16randomizeAddressv+0x288>)
   b4384:	4606      	mov	r6, r0
   b4386:	a808      	add	r0, sp, #32
   b4388:	f004 f8b5 	bl	b84f6 <_ZN6StringC1EPK19__FlashStringHelper>
   b438c:	4669      	mov	r1, sp
   b438e:	a808      	add	r0, sp, #32
   b4390:	f004 f912 	bl	b85b8 <_ZplRK15StringSumHelperRK6String>
   b4394:	6801      	ldr	r1, [r0, #0]
   b4396:	4630      	mov	r0, r6
   b4398:	f004 f833 	bl	b8402 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b439c:	a808      	add	r0, sp, #32
   b439e:	f004 f85f 	bl	b8460 <_ZN6StringD1Ev>
        Wire.endTransmission();
   b43a2:	f004 fe81 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b43a6:	f003 fea6 	bl	b80f6 <_ZN7TwoWire15endTransmissionEv>
        Serial.println("transmission sent to: " + String(i));
   b43aa:	f004 fd2f 	bl	b8e0c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b43ae:	4957      	ldr	r1, [pc, #348]	; (b450c <_Z16randomizeAddressv+0x28c>)
   b43b0:	4606      	mov	r6, r0
   b43b2:	a808      	add	r0, sp, #32
   b43b4:	f004 f89f 	bl	b84f6 <_ZN6StringC1EPK19__FlashStringHelper>
   b43b8:	220a      	movs	r2, #10
   b43ba:	4621      	mov	r1, r4
   b43bc:	a804      	add	r0, sp, #16
   b43be:	f004 f8c0 	bl	b8542 <_ZN6StringC1Eih>
   b43c2:	a904      	add	r1, sp, #16
   b43c4:	a808      	add	r0, sp, #32
   b43c6:	f004 f8f7 	bl	b85b8 <_ZplRK15StringSumHelperRK6String>
   b43ca:	6801      	ldr	r1, [r0, #0]
   b43cc:	4630      	mov	r0, r6
   b43ce:	f004 f818 	bl	b8402 <_ZN5Print7printlnEPKc>
   b43d2:	a804      	add	r0, sp, #16
   b43d4:	f004 f844 	bl	b8460 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b43d8:	a808      	add	r0, sp, #32
   b43da:	f004 f841 	bl	b8460 <_ZN6StringD1Ev>

        Wire.beginTransmission(i);
   b43de:	f004 fe63 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b43e2:	4621      	mov	r1, r4
   b43e4:	f003 fe80 	bl	b80e8 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('2');
   b43e8:	f004 fe5e 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b43ec:	2132      	movs	r1, #50	; 0x32
   b43ee:	f7ff fed1 	bl	b4194 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b43f2:	f004 fe59 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b43f6:	f003 fe7e 	bl	b80f6 <_ZN7TwoWire15endTransmissionEv>

        Serial.println("request code 2, address: " + String(i));
   b43fa:	f004 fd07 	bl	b8e0c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b43fe:	4944      	ldr	r1, [pc, #272]	; (b4510 <_Z16randomizeAddressv+0x290>)
   b4400:	4606      	mov	r6, r0
   b4402:	a808      	add	r0, sp, #32
   b4404:	f004 f877 	bl	b84f6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4408:	220a      	movs	r2, #10
   b440a:	4621      	mov	r1, r4
   b440c:	a804      	add	r0, sp, #16
   b440e:	f004 f898 	bl	b8542 <_ZN6StringC1Eih>
   b4412:	a904      	add	r1, sp, #16
   b4414:	a808      	add	r0, sp, #32
   b4416:	f004 f8cf 	bl	b85b8 <_ZplRK15StringSumHelperRK6String>
   b441a:	6801      	ldr	r1, [r0, #0]
   b441c:	4630      	mov	r0, r6
   b441e:	f003 fff0 	bl	b8402 <_ZN5Print7printlnEPKc>
   b4422:	a804      	add	r0, sp, #16
   b4424:	f004 f81c 	bl	b8460 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4428:	a808      	add	r0, sp, #32
   b442a:	f004 f819 	bl	b8460 <_ZN6StringD1Ev>
        Wire.requestFrom(i, 4);
   b442e:	f004 fe3b 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b4432:	2204      	movs	r2, #4
   b4434:	4651      	mov	r1, sl
   b4436:	f003 fe50 	bl	b80da <_ZN7TwoWire11requestFromEhj>
        inputBuffer = "";
   b443a:	4639      	mov	r1, r7
   b443c:	4668      	mov	r0, sp
   b443e:	f004 f86e 	bl	b851e <_ZN6StringaSEPKc>
   b4442:	2604      	movs	r6, #4
        for(int j = 0; j < 4; j++){
          inputBuffer += (char)Wire.read();
   b4444:	f004 fe30 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b4448:	6803      	ldr	r3, [r0, #0]
   b444a:	695b      	ldr	r3, [r3, #20]
   b444c:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b444e:	b2c1      	uxtb	r1, r0
   b4450:	4668      	mov	r0, sp
   b4452:	f004 f8a4 	bl	b859e <_ZN6String6concatEc>
        for(int j = 0; j < 4; j++){
   b4456:	3e01      	subs	r6, #1
   b4458:	d1f4      	bne.n	b4444 <_Z16randomizeAddressv+0x1c4>
        }
        
        Serial.println("conflict verification: " + inputBuffer);
   b445a:	f004 fcd7 	bl	b8e0c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b445e:	492d      	ldr	r1, [pc, #180]	; (b4514 <_Z16randomizeAddressv+0x294>)
   b4460:	4606      	mov	r6, r0
   b4462:	a808      	add	r0, sp, #32
   b4464:	f004 f847 	bl	b84f6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4468:	4669      	mov	r1, sp
   b446a:	a808      	add	r0, sp, #32
   b446c:	f004 f8a4 	bl	b85b8 <_ZplRK15StringSumHelperRK6String>
   b4470:	6801      	ldr	r1, [r0, #0]
   b4472:	4630      	mov	r0, r6
   b4474:	f003 ffc5 	bl	b8402 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4478:	a808      	add	r0, sp, #32
   b447a:	f003 fff1 	bl	b8460 <_ZN6StringD1Ev>
        String inputBuffer = "";
   b447e:	4668      	mov	r0, sp
   b4480:	f003 ffee 	bl	b8460 <_ZN6StringD1Ev>
    for(int i = 8; i <= 119; i++){
   b4484:	3401      	adds	r4, #1
   b4486:	2c78      	cmp	r4, #120	; 0x78
   b4488:	f47f af0a 	bne.w	b42a0 <_Z16randomizeAddressv+0x20>
   b448c:	e6fe      	b.n	b428c <_Z16randomizeAddressv+0xc>
      }
    }
  }

  Serial.println("\nConnected to: ");
   b448e:	f004 fcbd 	bl	b8e0c <_Z16_fetch_usbserialv>
   b4492:	4921      	ldr	r1, [pc, #132]	; (b4518 <_Z16randomizeAddressv+0x298>)
    Wire.endTransmission();

    Wire.requestFrom(i, 24);
    if(Wire.available() > 0){
      Serial.print(i);
      Serial.print(", ");
   b4494:	4e21      	ldr	r6, [pc, #132]	; (b451c <_Z16randomizeAddressv+0x29c>)

      addressArr[count] = i;
   b4496:	4f22      	ldr	r7, [pc, #136]	; (b4520 <_Z16randomizeAddressv+0x2a0>)
  Serial.println("\nConnected to: ");
   b4498:	f003 ffb3 	bl	b8402 <_ZN5Print7printlnEPKc>
  for(int i = 8; i<= 119; i++){
   b449c:	2408      	movs	r4, #8
  int count = 0;
   b449e:	2500      	movs	r5, #0
    Wire.beginTransmission(i);
   b44a0:	f004 fe02 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b44a4:	4621      	mov	r1, r4
   b44a6:	f003 fe1f 	bl	b80e8 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('1');
   b44aa:	f004 fdfd 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b44ae:	2131      	movs	r1, #49	; 0x31
   b44b0:	f7ff fe70 	bl	b4194 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b44b4:	f004 fdf8 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b44b8:	f003 fe1d 	bl	b80f6 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(i, 24);
   b44bc:	f004 fdf4 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b44c0:	2218      	movs	r2, #24
   b44c2:	b2e1      	uxtb	r1, r4
   b44c4:	f003 fe09 	bl	b80da <_ZN7TwoWire11requestFromEhj>
    if(Wire.available() > 0){
   b44c8:	f004 fdee 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b44cc:	6803      	ldr	r3, [r0, #0]
   b44ce:	691b      	ldr	r3, [r3, #16]
   b44d0:	4798      	blx	r3
   b44d2:	2800      	cmp	r0, #0
   b44d4:	dd0d      	ble.n	b44f2 <_Z16randomizeAddressv+0x272>
      Serial.print(i);
   b44d6:	f004 fc99 	bl	b8e0c <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b44da:	220a      	movs	r2, #10
   b44dc:	4621      	mov	r1, r4
   b44de:	f003 ff9a 	bl	b8416 <_ZN5Print11printNumberEmh>
      Serial.print(", ");
   b44e2:	f004 fc93 	bl	b8e0c <_Z16_fetch_usbserialv>
   b44e6:	4631      	mov	r1, r6
   b44e8:	f003 ff78 	bl	b83dc <_ZN5Print5printEPKc>
      addressArr[count] = i;
   b44ec:	f847 4025 	str.w	r4, [r7, r5, lsl #2]

      count++;
   b44f0:	3501      	adds	r5, #1
  for(int i = 8; i<= 119; i++){
   b44f2:	3401      	adds	r4, #1
   b44f4:	2c78      	cmp	r4, #120	; 0x78
   b44f6:	d1d3      	bne.n	b44a0 <_Z16randomizeAddressv+0x220>
    }
  }
}
   b44f8:	b00c      	add	sp, #48	; 0x30
   b44fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b44fe:	bf00      	nop
   b4500:	2003e6a4 	.word	0x2003e6a4
   b4504:	000bc6f2 	.word	0x000bc6f2
   b4508:	000bc3ea 	.word	0x000bc3ea
   b450c:	000bc3f6 	.word	0x000bc3f6
   b4510:	000bc40d 	.word	0x000bc40d
   b4514:	000bc427 	.word	0x000bc427
   b4518:	000bc43f 	.word	0x000bc43f
   b451c:	000bc44f 	.word	0x000bc44f
   b4520:	20035774 	.word	0x20035774
   b4524:	000bc3b2 	.word	0x000bc3b2
   b4528:	000bc3cd 	.word	0x000bc3cd

000b452c <_Z17acquireWireBufferv>:
  }

  bleCount++;
}

hal_i2c_config_t acquireWireBuffer() {
   b452c:	b538      	push	{r3, r4, r5, lr}
    hal_i2c_config_t config = {
   b452e:	f44f 7500 	mov.w	r5, #512	; 0x200
   b4532:	2314      	movs	r3, #20
hal_i2c_config_t acquireWireBuffer() {
   b4534:	4604      	mov	r4, r0
    hal_i2c_config_t config = {
   b4536:	6003      	str	r3, [r0, #0]
   b4538:	6085      	str	r5, [r0, #8]
   b453a:	6105      	str	r5, [r0, #16]
        .size = sizeof(hal_i2c_config_t),
        .version = HAL_I2C_CONFIG_VERSION_1,
        .rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b453c:	4905      	ldr	r1, [pc, #20]	; (b4554 <_Z17acquireWireBufferv+0x28>)
   b453e:	4628      	mov	r0, r5
   b4540:	f004 fe16 	bl	b9170 <_ZnajRKSt9nothrow_t>
        .rx_buffer_size = I2C_BUFFER_SIZE,
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4544:	4903      	ldr	r1, [pc, #12]	; (b4554 <_Z17acquireWireBufferv+0x28>)
        .tx_buffer_size = I2C_BUFFER_SIZE
    };
   b4546:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4548:	4628      	mov	r0, r5
   b454a:	f004 fe11 	bl	b9170 <_ZnajRKSt9nothrow_t>
    };
   b454e:	60e0      	str	r0, [r4, #12]
    return config;
   b4550:	4620      	mov	r0, r4
   b4552:	bd38      	pop	{r3, r4, r5, pc}
   b4554:	000bcaf8 	.word	0x000bcaf8

000b4558 <setup>:
void setup() {
   b4558:	b570      	push	{r4, r5, r6, lr}
   b455a:	b090      	sub	sp, #64	; 0x40
  Serial.begin(9600);
   b455c:	f004 fc56 	bl	b8e0c <_Z16_fetch_usbserialv>
   b4560:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4564:	f004 fc46 	bl	b8df4 <_ZN9USBSerial5beginEl>
  delay(2000);
   b4568:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b456c:	f002 fae0 	bl	b6b30 <delay>
  BLE.on();
   b4570:	f002 fe4a 	bl	b7208 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4574:	f002 fe92 	bl	b729c <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   b4578:	f002 fe46 	bl	b7208 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b457c:	4a29      	ldr	r2, [pc, #164]	; (b4624 <setup+0xcc>)
   b457e:	4c2a      	ldr	r4, [pc, #168]	; (b4628 <setup+0xd0>)
   b4580:	4601      	mov	r1, r0
   b4582:	a80b      	add	r0, sp, #44	; 0x2c
   b4584:	f003 fbee 	bl	b7d64 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4588:	a80b      	add	r0, sp, #44	; 0x2c
   b458a:	f002 ff32 	bl	b73f2 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   b458e:	f002 fe3b 	bl	b7208 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4592:	4a26      	ldr	r2, [pc, #152]	; (b462c <setup+0xd4>)
   b4594:	4601      	mov	r1, r0
   b4596:	a80b      	add	r0, sp, #44	; 0x2c
   b4598:	f003 fbe4 	bl	b7d64 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b459c:	a80b      	add	r0, sp, #44	; 0x2c
   b459e:	f002 ff28 	bl	b73f2 <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData data;
   b45a2:	a803      	add	r0, sp, #12
   b45a4:	f003 f887 	bl	b76b6 <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   b45a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b45aa:	ad06      	add	r5, sp, #24
   b45ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b45ae:	ad06      	add	r5, sp, #24
   b45b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b45b2:	6826      	ldr	r6, [r4, #0]
   b45b4:	ac0b      	add	r4, sp, #44	; 0x2c
   b45b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b45b8:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b45ba:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b45bc:	f002 fc26 	bl	b6e0c <_ZNK8particle7BleUuid4typeEv>
   b45c0:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b45c2:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b45c4:	bb34      	cbnz	r4, b4614 <setup+0xbc>
            uint16_t uuid16 = tempUUID.shorted();
   b45c6:	f002 fc3d 	bl	b6e44 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b45ca:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b45cc:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b45d0:	2302      	movs	r3, #2
   b45d2:	f10d 020a 	add.w	r2, sp, #10
   b45d6:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b45d8:	a803      	add	r0, sp, #12
   b45da:	f003 f861 	bl	b76a0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   b45de:	f002 fe13 	bl	b7208 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b45e2:	2200      	movs	r2, #0
   b45e4:	a903      	add	r1, sp, #12
   b45e6:	f002 fea7 	bl	b7338 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  request.hostname = "lapi.transitchicago.com";
   b45ea:	4c11      	ldr	r4, [pc, #68]	; (b4630 <setup+0xd8>)
  acquireWireBuffer();
   b45ec:	a80b      	add	r0, sp, #44	; 0x2c
   b45ee:	f7ff ff9d 	bl	b452c <_Z17acquireWireBufferv>
  Wire.begin();
   b45f2:	f004 fd59 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b45f6:	f003 fd41 	bl	b807c <_ZN7TwoWire5beginEv>
  randomizeAddress();
   b45fa:	f7ff fe41 	bl	b4280 <_Z16randomizeAddressv>
  request.hostname = "lapi.transitchicago.com";
   b45fe:	490d      	ldr	r1, [pc, #52]	; (b4634 <setup+0xdc>)
   b4600:	4620      	mov	r0, r4
   b4602:	f003 ff8c 	bl	b851e <_ZN6StringaSEPKc>
  request.port = 80;
   b4606:	2350      	movs	r3, #80	; 0x50
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b4608:	9803      	ldr	r0, [sp, #12]
   b460a:	63a3      	str	r3, [r4, #56]	; 0x38
   b460c:	f002 fa50 	bl	b6ab0 <free>
}
   b4610:	b010      	add	sp, #64	; 0x40
   b4612:	bd70      	pop	{r4, r5, r6, pc}
   b4614:	f002 fc18 	bl	b6e48 <_ZNK8particle7BleUuid8rawBytesEv>
   b4618:	2300      	movs	r3, #0
   b461a:	9300      	str	r3, [sp, #0]
   b461c:	4602      	mov	r2, r0
   b461e:	2310      	movs	r3, #16
   b4620:	2107      	movs	r1, #7
   b4622:	e7d9      	b.n	b45d8 <setup+0x80>
   b4624:	2003e6a8 	.word	0x2003e6a8
   b4628:	20035738 	.word	0x20035738
   b462c:	2003e694 	.word	0x2003e694
   b4630:	2003e634 	.word	0x2003e634
   b4634:	000bc452 	.word	0x000bc452

000b4638 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4638:	b510      	push	{r4, lr}
   b463a:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b463c:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b463e:	b118      	cbz	r0, b4648 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4640:	68a1      	ldr	r1, [r4, #8]
   b4642:	1a09      	subs	r1, r1, r0
   b4644:	f7ff fd2d 	bl	b40a2 <_ZdlPvj>
      }
   b4648:	4620      	mov	r0, r4
   b464a:	bd10      	pop	{r4, pc}

000b464c <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj>:
      at(size_type __n)
   b464c:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b464e:	e9d0 4200 	ldrd	r4, r2, [r0]
   b4652:	4806      	ldr	r0, [pc, #24]	; (b466c <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj+0x20>)
   b4654:	1b12      	subs	r2, r2, r4
   b4656:	1092      	asrs	r2, r2, #2
   b4658:	4342      	muls	r2, r0
	if (__n >= this->size())
   b465a:	4291      	cmp	r1, r2
   b465c:	d302      	bcc.n	b4664 <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b465e:	4804      	ldr	r0, [pc, #16]	; (b4670 <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj+0x24>)
   b4660:	f004 fd91 	bl	b9186 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b4664:	2014      	movs	r0, #20
   b4666:	fb00 4001 	mla	r0, r0, r1, r4
   b466a:	bd10      	pop	{r4, pc}
   b466c:	cccccccd 	.word	0xcccccccd
   b4670:	000bc46a 	.word	0x000bc46a

000b4674 <_ZN10LinkedListC1ESt6vectorI10CheckpointSaIS1_EE>:
        int size;
        std::vector<Checkpoint> vectorForm;

        LinkedList(){}

        LinkedList(std::vector<Checkpoint> cpv){
   b4674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4678:	e9d1 2300 	ldrd	r2, r3, [r1]
   b467c:	4f17      	ldr	r7, [pc, #92]	; (b46dc <_ZN10LinkedListC1ESt6vectorI10CheckpointSaIS1_EE+0x68>)
   b467e:	1a9b      	subs	r3, r3, r2
   b4680:	109b      	asrs	r3, r3, #2
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4682:	2400      	movs	r4, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4684:	437b      	muls	r3, r7
            size = cpv.size();
   b4686:	6043      	str	r3, [r0, #4]
        LinkedList(std::vector<Checkpoint> cpv){
   b4688:	460e      	mov	r6, r1
	: _M_start(), _M_finish(), _M_end_of_storage()
   b468a:	6104      	str	r4, [r0, #16]
   b468c:	e9c0 4402 	strd	r4, r4, [r0, #8]
   b4690:	4605      	mov	r5, r0
            vectorForm = cpv;
   b4692:	3008      	adds	r0, #8
   b4694:	f7ff fd94 	bl	b41c0 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>

            head = &cpv.at(0);
   b4698:	4621      	mov	r1, r4
   b469a:	4630      	mov	r0, r6
   b469c:	f7ff ffd6 	bl	b464c <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj>
            Checkpoint *prev = nullptr;
   b46a0:	46a1      	mov	r9, r4
            head = &cpv.at(0);
   b46a2:	4680      	mov	r8, r0
   b46a4:	6028      	str	r0, [r5, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b46a6:	e9d6 2300 	ldrd	r2, r3, [r6]
   b46aa:	1a9b      	subs	r3, r3, r2
   b46ac:	109b      	asrs	r3, r3, #2
   b46ae:	437b      	muls	r3, r7
            Checkpoint *current = head;

            for(int i = 0; i < cpv.size(); i++){
   b46b0:	42a3      	cmp	r3, r4
   b46b2:	4622      	mov	r2, r4
   b46b4:	d90f      	bls.n	b46d6 <_ZN10LinkedListC1ESt6vectorI10CheckpointSaIS1_EE+0x62>
                if(i != cpv.size() - 1){
   b46b6:	3b01      	subs	r3, #1
   b46b8:	4293      	cmp	r3, r2
                    current->next = &cpv.at(i + 1);
   b46ba:	f104 0401 	add.w	r4, r4, #1
                if(i != cpv.size() - 1){
   b46be:	d007      	beq.n	b46d0 <_ZN10LinkedListC1ESt6vectorI10CheckpointSaIS1_EE+0x5c>
                    current->next = &cpv.at(i + 1);
   b46c0:	4621      	mov	r1, r4
   b46c2:	4630      	mov	r0, r6
   b46c4:	f7ff ffc2 	bl	b464c <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj>
                    current->prev = prev;
   b46c8:	e9c8 0902 	strd	r0, r9, [r8, #8]
                    prev = current;
   b46cc:	46c1      	mov	r9, r8
   b46ce:	e7ea      	b.n	b46a6 <_ZN10LinkedListC1ESt6vectorI10CheckpointSaIS1_EE+0x32>
                }else{
                    current->prev = prev;
   b46d0:	f8c8 900c 	str.w	r9, [r8, #12]
            for(int i = 0; i < cpv.size(); i++){
   b46d4:	e7e7      	b.n	b46a6 <_ZN10LinkedListC1ESt6vectorI10CheckpointSaIS1_EE+0x32>
                }
            }
        }
   b46d6:	4628      	mov	r0, r5
   b46d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b46dc:	cccccccd 	.word	0xcccccccd

000b46e0 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b46e0:	b510      	push	{r4, lr}
   b46e2:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b46e4:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b46e6:	b118      	cbz	r0, b46f0 <_ZNSt12_Vector_baseIfSaIfEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b46e8:	68a1      	ldr	r1, [r4, #8]
   b46ea:	1a09      	subs	r1, r1, r0
   b46ec:	f7ff fcd9 	bl	b40a2 <_ZdlPvj>
      }
   b46f0:	4620      	mov	r0, r4
   b46f2:	bd10      	pop	{r4, pc}

000b46f4 <_ZNSt12_Vector_baseIiSaIiEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b46f4:	b510      	push	{r4, lr}
   b46f6:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b46f8:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b46fa:	b118      	cbz	r0, b4704 <_ZNSt12_Vector_baseIiSaIiEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b46fc:	68a1      	ldr	r1, [r4, #8]
   b46fe:	1a09      	subs	r1, r1, r0
   b4700:	f7ff fccf 	bl	b40a2 <_ZdlPvj>
      }
   b4704:	4620      	mov	r0, r4
   b4706:	bd10      	pop	{r4, pc}

000b4708 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b4708:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b470a:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   b470e:	4604      	mov	r4, r0
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   b4710:	42ae      	cmp	r6, r5
   b4712:	d004      	beq.n	b471e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x16>
      { _M_dispose(); }
   b4714:	4628      	mov	r0, r5
   b4716:	f004 fe15 	bl	b9344 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b471a:	3518      	adds	r5, #24
   b471c:	e7f8      	b.n	b4710 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   b471e:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4720:	b118      	cbz	r0, b472a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x22>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4722:	68a1      	ldr	r1, [r4, #8]
   b4724:	1a09      	subs	r1, r1, r0
   b4726:	f7ff fcbc 	bl	b40a2 <_ZdlPvj>
      }
   b472a:	4620      	mov	r0, r4
   b472c:	bd70      	pop	{r4, r5, r6, pc}

000b472e <_ZN7RailwayD1Ev>:
#include "LinkedList.cpp"
#include <string>

//container for all data for each rail line
class Railway{
   b472e:	b510      	push	{r4, lr}
   b4730:	4604      	mov	r4, r0
   b4732:	305c      	adds	r0, #92	; 0x5c
   b4734:	f7ff ffe8 	bl	b4708 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b4738:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b473c:	f004 fe02 	bl	b9344 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4740:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b4744:	f7ff ffd6 	bl	b46f4 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4748:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b474c:	f7ff ffd2 	bl	b46f4 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4750:	f104 0020 	add.w	r0, r4, #32
   b4754:	f7ff ffc4 	bl	b46e0 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b4758:	f104 0014 	add.w	r0, r4, #20
   b475c:	f7ff ff6c 	bl	b4638 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
   b4760:	f104 0008 	add.w	r0, r4, #8
   b4764:	f7ff ff68 	bl	b4638 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
   b4768:	4620      	mov	r0, r4
   b476a:	bd10      	pop	{r4, pc}

000b476c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
   b476c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b4770:	ab02      	add	r3, sp, #8
   b4772:	e903 0006 	stmdb	r3, {r1, r2}
      constexpr const_iterator
      begin() const noexcept { return _M_array; }

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
   b4776:	4614      	mov	r4, r2
   b4778:	2314      	movs	r3, #20
   b477a:	435c      	muls	r4, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b477c:	2500      	movs	r5, #0
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b477e:	4b19      	ldr	r3, [pc, #100]	; (b47e4 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x78>)
   b4780:	6085      	str	r5, [r0, #8]
   b4782:	e9c0 5500 	strd	r5, r5, [r0]
      vector(initializer_list<value_type> __l,
   b4786:	4607      	mov	r7, r0
   b4788:	10a0      	asrs	r0, r4, #2
   b478a:	4358      	muls	r0, r3

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b478c:	4b16      	ldr	r3, [pc, #88]	; (b47e8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x7c>)
   b478e:	429c      	cmp	r4, r3
   b4790:	4688      	mov	r8, r1
   b4792:	eb01 0904 	add.w	r9, r1, r4
   b4796:	d902      	bls.n	b479e <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x32>
	  __throw_length_error(
   b4798:	4814      	ldr	r0, [pc, #80]	; (b47ec <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x80>)
   b479a:	f004 fcf1 	bl	b9180 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b479e:	f7ff fcc1 	bl	b4124 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b47a2:	1903      	adds	r3, r0, r4
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b47a4:	4684      	mov	ip, r0
   b47a6:	6038      	str	r0, [r7, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b47a8:	60bb      	str	r3, [r7, #8]
   b47aa:	eb08 0605 	add.w	r6, r8, r5
   b47ae:	45b1      	cmp	r9, r6
   b47b0:	d00a      	beq.n	b47c8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x5c>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b47b2:	eb1c 0e05 	adds.w	lr, ip, r5
   b47b6:	bf1f      	itttt	ne
   b47b8:	ce0f      	ldmiane	r6!, {r0, r1, r2, r3}
   b47ba:	e8ae 000f 	stmiane.w	lr!, {r0, r1, r2, r3}
   b47be:	6833      	ldrne	r3, [r6, #0]
   b47c0:	f8ce 3000 	strne.w	r3, [lr]
   b47c4:	3514      	adds	r5, #20
   b47c6:	e7f0      	b.n	b47aa <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x3e>
	  this->_M_impl._M_finish =
   b47c8:	4b09      	ldr	r3, [pc, #36]	; (b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x84>)
   b47ca:	08a4      	lsrs	r4, r4, #2
   b47cc:	435c      	muls	r4, r3
   b47ce:	2014      	movs	r0, #20
   b47d0:	f024 4440 	bic.w	r4, r4, #3221225472	; 0xc0000000
   b47d4:	fb00 c404 	mla	r4, r0, r4, ip
      }
   b47d8:	4638      	mov	r0, r7
	  this->_M_impl._M_finish =
   b47da:	607c      	str	r4, [r7, #4]
      }
   b47dc:	b003      	add	sp, #12
   b47de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b47e2:	bf00      	nop
   b47e4:	cccccccd 	.word	0xcccccccd
   b47e8:	7ffffff8 	.word	0x7ffffff8
   b47ec:	000bc4b4 	.word	0x000bc4b4
   b47f0:	0ccccccd 	.word	0x0ccccccd

000b47f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b47f4:	f100 0308 	add.w	r3, r0, #8
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
   b47f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b47fa:	4604      	mov	r4, r0
	: allocator_type(__a), _M_p(__dat) { }
   b47fc:	6003      	str	r3, [r0, #0]
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b47fe:	460d      	mov	r5, r1
   b4800:	b1e1      	cbz	r1, b483c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x48>
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   b4802:	4608      	mov	r0, r1
   b4804:	f005 fdd5 	bl	ba3b2 <strlen>
	if (__dnew > size_type(_S_local_capacity))
   b4808:	280f      	cmp	r0, #15
   b480a:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b480e:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b4810:	d907      	bls.n	b4822 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x2e>
	    _M_data(_M_create(__dnew, size_type(0)));
   b4812:	2200      	movs	r2, #0
   b4814:	a901      	add	r1, sp, #4
   b4816:	4620      	mov	r0, r4
   b4818:	f004 fd72 	bl	b9300 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b481c:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b481e:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4820:	60a3      	str	r3, [r4, #8]
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b4822:	6820      	ldr	r0, [r4, #0]
   b4824:	4632      	mov	r2, r6
   b4826:	4629      	mov	r1, r5
   b4828:	f004 fda5 	bl	b9376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	_M_set_length(__dnew);
   b482c:	9b01      	ldr	r3, [sp, #4]
      { __c1 = __c2; }
   b482e:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4830:	6063      	str	r3, [r4, #4]
   b4832:	2100      	movs	r1, #0
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b4834:	4620      	mov	r0, r4
   b4836:	54d1      	strb	r1, [r2, r3]
   b4838:	b002      	add	sp, #8
   b483a:	bd70      	pop	{r4, r5, r6, pc}
	  std::__throw_logic_error(__N("basic_string::"
   b483c:	4801      	ldr	r0, [pc, #4]	; (b4844 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x50>)
   b483e:	f004 fc9c 	bl	b917a <_ZSt19__throw_logic_errorPKc>
   b4842:	bf00      	nop
   b4844:	000bc388 	.word	0x000bc388

000b4848 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>:
      vector(initializer_list<value_type> __l,
   b4848:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b484c:	ab02      	add	r3, sp, #8
   b484e:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4852:	2300      	movs	r3, #0
   b4854:	e9c0 3300 	strd	r3, r3, [r0]
   b4858:	6083      	str	r3, [r0, #8]
   b485a:	4616      	mov	r6, r2
   b485c:	2318      	movs	r3, #24
   b485e:	435e      	muls	r6, r3
   b4860:	4b10      	ldr	r3, [pc, #64]	; (b48a4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x5c>)
      vector(initializer_list<value_type> __l,
   b4862:	4604      	mov	r4, r0
   b4864:	10f0      	asrs	r0, r6, #3
   b4866:	4358      	muls	r0, r3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4868:	4b0f      	ldr	r3, [pc, #60]	; (b48a8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x60>)
   b486a:	429e      	cmp	r6, r3
   b486c:	460f      	mov	r7, r1
   b486e:	eb01 0806 	add.w	r8, r1, r6
   b4872:	d902      	bls.n	b487a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x32>
	  __throw_length_error(
   b4874:	480d      	ldr	r0, [pc, #52]	; (b48ac <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x64>)
   b4876:	f004 fc83 	bl	b9180 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b487a:	f7ff fc33 	bl	b40e4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b487e:	4406      	add	r6, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4880:	4605      	mov	r5, r0
   b4882:	6020      	str	r0, [r4, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4884:	60a6      	str	r6, [r4, #8]
   b4886:	45b8      	cmp	r8, r7
   b4888:	d007      	beq.n	b489a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x52>
   b488a:	b11d      	cbz	r5, b4894 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x4c>
   b488c:	4639      	mov	r1, r7
   b488e:	4628      	mov	r0, r5
   b4890:	f7ff fc5a 	bl	b4148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b4894:	3718      	adds	r7, #24
   b4896:	3518      	adds	r5, #24
   b4898:	e7f5      	b.n	b4886 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x3e>
      }
   b489a:	4620      	mov	r0, r4
	  this->_M_impl._M_finish =
   b489c:	6065      	str	r5, [r4, #4]
      }
   b489e:	b002      	add	sp, #8
   b48a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b48a4:	aaaaaaab 	.word	0xaaaaaaab
   b48a8:	7ffffff8 	.word	0x7ffffff8
   b48ac:	000bc4b4 	.word	0x000bc4b4

000b48b0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   b48b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b48b4:	e9d1 2300 	ldrd	r2, r3, [r1]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b48b8:	2700      	movs	r7, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b48ba:	eba3 0802 	sub.w	r8, r3, r2
      vector(const vector& __x)
   b48be:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b48c0:	e9c0 7700 	strd	r7, r7, [r0]
   b48c4:	6087      	str	r7, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b48c6:	4817      	ldr	r0, [pc, #92]	; (b4924 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x74>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b48c8:	ea4f 03a8 	mov.w	r3, r8, asr #2
	this->_M_impl._M_start = this->_M_allocate(__n);
   b48cc:	4358      	muls	r0, r3
      vector(const vector& __x)
   b48ce:	460e      	mov	r6, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b48d0:	f7ff fc28 	bl	b4124 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b48d4:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b48d8:	eb00 0308 	add.w	r3, r0, r8
   b48dc:	60a3      	str	r3, [r4, #8]
      : _M_current(__i) { }
   b48de:	e9d6 8600 	ldrd	r8, r6, [r6]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b48e2:	4605      	mov	r5, r0
   b48e4:	eb08 0c07 	add.w	ip, r8, r7
   b48e8:	4566      	cmp	r6, ip
   b48ea:	d00c      	beq.n	b4906 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x56>
   b48ec:	eb15 0e07 	adds.w	lr, r5, r7
   b48f0:	bf1f      	itttt	ne
   b48f2:	e8bc 000f 	ldmiane.w	ip!, {r0, r1, r2, r3}
   b48f6:	e8ae 000f 	stmiane.w	lr!, {r0, r1, r2, r3}
   b48fa:	f8dc 3000 	ldrne.w	r3, [ip]
   b48fe:	f8ce 3000 	strne.w	r3, [lr]
   b4902:	3714      	adds	r7, #20
   b4904:	e7ee      	b.n	b48e4 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x34>
	this->_M_impl._M_finish =
   b4906:	eba6 0008 	sub.w	r0, r6, r8
   b490a:	4e07      	ldr	r6, [pc, #28]	; (b4928 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x78>)
   b490c:	0880      	lsrs	r0, r0, #2
   b490e:	4370      	muls	r0, r6
   b4910:	2314      	movs	r3, #20
   b4912:	f020 4040 	bic.w	r0, r0, #3221225472	; 0xc0000000
   b4916:	fb03 5000 	mla	r0, r3, r0, r5
   b491a:	6060      	str	r0, [r4, #4]
      }
   b491c:	4620      	mov	r0, r4
   b491e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4922:	bf00      	nop
   b4924:	cccccccd 	.word	0xcccccccd
   b4928:	0ccccccd 	.word	0x0ccccccd

000b492c <_ZNSt6vectorI7RailwaySaIS0_EE2atEj>:
      at(size_type __n)
   b492c:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b492e:	e9d0 4200 	ldrd	r4, r2, [r0]
   b4932:	4806      	ldr	r0, [pc, #24]	; (b494c <_ZNSt6vectorI7RailwaySaIS0_EE2atEj+0x20>)
   b4934:	1b12      	subs	r2, r2, r4
   b4936:	10d2      	asrs	r2, r2, #3
   b4938:	4342      	muls	r2, r0
	if (__n >= this->size())
   b493a:	4291      	cmp	r1, r2
   b493c:	d302      	bcc.n	b4944 <_ZNSt6vectorI7RailwaySaIS0_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b493e:	4804      	ldr	r0, [pc, #16]	; (b4950 <_ZNSt6vectorI7RailwaySaIS0_EE2atEj+0x24>)
   b4940:	f004 fc21 	bl	b9186 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b4944:	2068      	movs	r0, #104	; 0x68
   b4946:	fb00 4001 	mla	r0, r0, r1, r4
   b494a:	bd10      	pop	{r4, pc}
   b494c:	c4ec4ec5 	.word	0xc4ec4ec5
   b4950:	000bc46a 	.word	0x000bc46a

000b4954 <_ZNSt6vectorIfSaIfEE2atEj>:
      at(size_type __n)
   b4954:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4956:	e9d0 5400 	ldrd	r5, r4, [r0]
   b495a:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
   b495c:	ebb1 0fa4 	cmp.w	r1, r4, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4960:	ea4f 02a4 	mov.w	r2, r4, asr #2
	if (__n >= this->size())
   b4964:	d302      	bcc.n	b496c <_ZNSt6vectorIfSaIfEE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b4966:	4803      	ldr	r0, [pc, #12]	; (b4974 <_ZNSt6vectorIfSaIfEE2atEj+0x20>)
   b4968:	f004 fc0d 	bl	b9186 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b496c:	eb05 0081 	add.w	r0, r5, r1, lsl #2
   b4970:	bd38      	pop	{r3, r4, r5, pc}
   b4972:	bf00      	nop
   b4974:	000bc46a 	.word	0x000bc46a

000b4978 <_ZNSt6vectorIiSaIiEE2atEj>:
      at(size_type __n)
   b4978:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b497a:	e9d0 5400 	ldrd	r5, r4, [r0]
   b497e:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
   b4980:	ebb1 0fa4 	cmp.w	r1, r4, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4984:	ea4f 02a4 	mov.w	r2, r4, asr #2
	if (__n >= this->size())
   b4988:	d302      	bcc.n	b4990 <_ZNSt6vectorIiSaIiEE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b498a:	4803      	ldr	r0, [pc, #12]	; (b4998 <_ZNSt6vectorIiSaIiEE2atEj+0x20>)
   b498c:	f004 fbfb 	bl	b9186 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b4990:	eb05 0081 	add.w	r0, r5, r1, lsl #2
   b4994:	bd38      	pop	{r3, r4, r5, pc}
   b4996:	bf00      	nop
   b4998:	000bc46a 	.word	0x000bc46a

000b499c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>:
      at(size_type __n)
   b499c:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b499e:	e9d0 4200 	ldrd	r4, r2, [r0]
   b49a2:	4806      	ldr	r0, [pc, #24]	; (b49bc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj+0x20>)
   b49a4:	1b12      	subs	r2, r2, r4
   b49a6:	10d2      	asrs	r2, r2, #3
   b49a8:	4342      	muls	r2, r0
	if (__n >= this->size())
   b49aa:	4291      	cmp	r1, r2
   b49ac:	d302      	bcc.n	b49b4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b49ae:	4804      	ldr	r0, [pc, #16]	; (b49c0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj+0x24>)
   b49b0:	f004 fbe9 	bl	b9186 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b49b4:	2018      	movs	r0, #24
   b49b6:	fb00 4001 	mla	r0, r0, r1, r4
   b49ba:	bd10      	pop	{r4, pc}
   b49bc:	aaaaaaab 	.word	0xaaaaaaab
   b49c0:	000bc46a 	.word	0x000bc46a

000b49c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b49c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(bleCount <= slaveCountExpected){
   b49c8:	4c6f      	ldr	r4, [pc, #444]	; (b4b88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c4>)
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b49ca:	b089      	sub	sp, #36	; 0x24
   b49cc:	4680      	mov	r8, r0
   b49ce:	460d      	mov	r5, r1
  String inputBuffer = "";
   b49d0:	4668      	mov	r0, sp
   b49d2:	496e      	ldr	r1, [pc, #440]	; (b4b8c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c8>)
   b49d4:	f003 fd8f 	bl	b84f6 <_ZN6StringC1EPK19__FlashStringHelper>
  if(bleCount <= slaveCountExpected){
   b49d8:	6823      	ldr	r3, [r4, #0]
   b49da:	2b02      	cmp	r3, #2
   b49dc:	f300 80b7 	bgt.w	b4b4e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18a>
    for(int i = 0; i < len - 1; i++){
   b49e0:	2600      	movs	r6, #0
   b49e2:	3d01      	subs	r5, #1
   b49e4:	42b5      	cmp	r5, r6
   b49e6:	d906      	bls.n	b49f6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x32>
	String & operator += (char c)			{concat(c); return (*this);}
   b49e8:	f818 1006 	ldrb.w	r1, [r8, r6]
   b49ec:	4668      	mov	r0, sp
   b49ee:	f003 fdd6 	bl	b859e <_ZN6String6concatEc>
   b49f2:	3601      	adds	r6, #1
   b49f4:	e7f6      	b.n	b49e4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x20>
    if(bleCount < slaveCountExpected){
   b49f6:	6823      	ldr	r3, [r4, #0]
   b49f8:	2b01      	cmp	r3, #1
   b49fa:	dc04      	bgt.n	b4a06 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x42>
      txCharacteristic.setValue("\nEnter the line color of the device with the blinking LED: ");
   b49fc:	4964      	ldr	r1, [pc, #400]	; (b4b90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1cc>)
   b49fe:	4865      	ldr	r0, [pc, #404]	; (b4b94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1d0>)
   b4a00:	2200      	movs	r2, #0
   b4a02:	f002 fb3f 	bl	b7084 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    Wire.beginTransmission(addressArr[bleCount]);
   b4a06:	f004 fb4f 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b4a0a:	4d63      	ldr	r5, [pc, #396]	; (b4b98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1d4>)
   b4a0c:	6823      	ldr	r3, [r4, #0]
   b4a0e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   b4a12:	f003 fb69 	bl	b80e8 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('3');
   b4a16:	f004 fb47 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b4a1a:	2133      	movs	r1, #51	; 0x33
   b4a1c:	f7ff fbba 	bl	b4194 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b4a20:	f004 fb42 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b4a24:	f003 fb67 	bl	b80f6 <_ZN7TwoWire15endTransmissionEv>
    if(bleCount > 0){
   b4a28:	6823      	ldr	r3, [r4, #0]
   b4a2a:	2b00      	cmp	r3, #0
   b4a2c:	f340 808f 	ble.w	b4b4e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18a>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4a30:	495a      	ldr	r1, [pc, #360]	; (b4b9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1d8>)
   b4a32:	4668      	mov	r0, sp
   b4a34:	f003 fdcc 	bl	b85d0 <_ZNK6String6equalsEPKc>
      if(inputBuffer == "red"){
   b4a38:	2800      	cmp	r0, #0
   b4a3a:	f000 8091 	beq.w	b4b60 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x19c>
        Serial.println("receive red");
   b4a3e:	f004 f9e5 	bl	b8e0c <_Z16_fetch_usbserialv>
   b4a42:	4957      	ldr	r1, [pc, #348]	; (b4ba0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1dc>)
   b4a44:	f003 fcdd 	bl	b8402 <_ZN5Print7printlnEPKc>
        colorAdr = 0;
   b4a48:	2700      	movs	r7, #0
      Wire.beginTransmission(addressArr[bleCount - 1]);
   b4a4a:	f004 fb2d 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b4a4e:	6823      	ldr	r3, [r4, #0]
   b4a50:	3b01      	subs	r3, #1
   b4a52:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   b4a56:	f003 fb47 	bl	b80e8 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(String(railways.at(colorAdr).colors.at(0).c_str()));
   b4a5a:	f004 fb25 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b4a5e:	4639      	mov	r1, r7
   b4a60:	4606      	mov	r6, r0
   b4a62:	4850      	ldr	r0, [pc, #320]	; (b4ba4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1e0>)
   b4a64:	f7ff ff62 	bl	b492c <_ZNSt6vectorI7RailwaySaIS0_EE2atEj>
   b4a68:	2100      	movs	r1, #0
   b4a6a:	305c      	adds	r0, #92	; 0x5c
   b4a6c:	f7ff ff96 	bl	b499c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
   b4a70:	6801      	ldr	r1, [r0, #0]
   b4a72:	a804      	add	r0, sp, #16
   b4a74:	f003 fd3f 	bl	b84f6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4a78:	9904      	ldr	r1, [sp, #16]
   b4a7a:	4630      	mov	r0, r6
   b4a7c:	f7ff fb8e 	bl	b419c <_ZN5Print5writeEPKc.isra.0>
   b4a80:	a804      	add	r0, sp, #16
   b4a82:	f003 fced 	bl	b8460 <_ZN6StringD1Ev>
      Wire.write(String(railways.at(colorAdr).colors.at(1).c_str()));
   b4a86:	f004 fb0f 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b4a8a:	4639      	mov	r1, r7
   b4a8c:	4606      	mov	r6, r0
   b4a8e:	4845      	ldr	r0, [pc, #276]	; (b4ba4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1e0>)
   b4a90:	f7ff ff4c 	bl	b492c <_ZNSt6vectorI7RailwaySaIS0_EE2atEj>
   b4a94:	2101      	movs	r1, #1
   b4a96:	305c      	adds	r0, #92	; 0x5c
   b4a98:	f7ff ff80 	bl	b499c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
   b4a9c:	6801      	ldr	r1, [r0, #0]
   b4a9e:	a804      	add	r0, sp, #16
   b4aa0:	f003 fd29 	bl	b84f6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4aa4:	9904      	ldr	r1, [sp, #16]
   b4aa6:	4630      	mov	r0, r6
   b4aa8:	f7ff fb78 	bl	b419c <_ZN5Print5writeEPKc.isra.0>
   b4aac:	a804      	add	r0, sp, #16
   b4aae:	f003 fcd7 	bl	b8460 <_ZN6StringD1Ev>
      Wire.endTransmission();
   b4ab2:	f004 faf9 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b4ab6:	f003 fb1e 	bl	b80f6 <_ZN7TwoWire15endTransmissionEv>
      sequenceArr[bleCount - 1] = addressArr[colorAdr];
   b4aba:	6823      	ldr	r3, [r4, #0]
   b4abc:	4e3a      	ldr	r6, [pc, #232]	; (b4ba8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1e4>)
   b4abe:	f855 2027 	ldr.w	r2, [r5, r7, lsl #2]
   b4ac2:	3b01      	subs	r3, #1
   b4ac4:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
      Wire.beginTransmission(addressArr[bleCount - 1]);
   b4ac8:	f004 faee 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b4acc:	6823      	ldr	r3, [r4, #0]
   b4ace:	3b01      	subs	r3, #1
   b4ad0:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   b4ad4:	f003 fb08 	bl	b80e8 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('4');
   b4ad8:	f004 fae6 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b4adc:	2134      	movs	r1, #52	; 0x34
   b4ade:	f7ff fb59 	bl	b4194 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4ae2:	f004 fae1 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b4ae6:	f003 fb06 	bl	b80f6 <_ZN7TwoWire15endTransmissionEv>
      if(bleCount == slaveCountExpected){
   b4aea:	6823      	ldr	r3, [r4, #0]
   b4aec:	2b02      	cmp	r3, #2
   b4aee:	d12e      	bne.n	b4b4e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18a>
        userInput = true;
   b4af0:	4b2e      	ldr	r3, [pc, #184]	; (b4bac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1e8>)
      Serial.print(", ");
   b4af2:	f8df 90c8 	ldr.w	r9, [pc, #200]	; b4bbc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1f8>
        userInput = true;
   b4af6:	2201      	movs	r2, #1
    delay(1000);
   b4af8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
        userInput = true;
   b4afc:	701a      	strb	r2, [r3, #0]
    delay(1000);
   b4afe:	f002 f817 	bl	b6b30 <delay>
    Serial.println("\nSequence: ");
   b4b02:	f004 f983 	bl	b8e0c <_Z16_fetch_usbserialv>
   b4b06:	492a      	ldr	r1, [pc, #168]	; (b4bb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1ec>)
   b4b08:	f003 fc7b 	bl	b8402 <_ZN5Print7printlnEPKc>
    for(int i = 0; i < slaveCountExpected; i++){
   b4b0c:	f04f 0800 	mov.w	r8, #0
      Serial.print(sequenceArr[i]);
   b4b10:	f004 f97c 	bl	b8e0c <_Z16_fetch_usbserialv>
   b4b14:	f856 5b04 	ldr.w	r5, [r6], #4
        if (n < 0 && base == 10) {
   b4b18:	2d00      	cmp	r5, #0
   b4b1a:	4607      	mov	r7, r0
   b4b1c:	da31      	bge.n	b4b82 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1be>
            t = print('-');
   b4b1e:	212d      	movs	r1, #45	; 0x2d
   b4b20:	f003 fc60 	bl	b83e4 <_ZN5Print5printEc>
            val = -n;
   b4b24:	4269      	negs	r1, r5
        return printNumber(val, base) + t;
   b4b26:	220a      	movs	r2, #10
   b4b28:	4638      	mov	r0, r7
   b4b2a:	f003 fc74 	bl	b8416 <_ZN5Print11printNumberEmh>
      Serial.print(", ");
   b4b2e:	f004 f96d 	bl	b8e0c <_Z16_fetch_usbserialv>
   b4b32:	4649      	mov	r1, r9
   b4b34:	f003 fc52 	bl	b83dc <_ZN5Print5printEPKc>
    for(int i = 0; i < slaveCountExpected; i++){
   b4b38:	f1b8 0f00 	cmp.w	r8, #0
   b4b3c:	d01e      	beq.n	b4b7c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1b8>
    BLE.disconnect();
   b4b3e:	f002 fb63 	bl	b7208 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4b42:	f002 ff4d 	bl	b79e0 <_ZNK8particle14BleLocalDevice10disconnectEv>
    BLE.off();
   b4b46:	f002 fb5f 	bl	b7208 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4b4a:	f002 fce3 	bl	b7514 <_ZNK8particle14BleLocalDevice3offEv>
  bleCount++;
   b4b4e:	6823      	ldr	r3, [r4, #0]
  String inputBuffer = "";
   b4b50:	4668      	mov	r0, sp
  bleCount++;
   b4b52:	3301      	adds	r3, #1
   b4b54:	6023      	str	r3, [r4, #0]
  String inputBuffer = "";
   b4b56:	f003 fc83 	bl	b8460 <_ZN6StringD1Ev>
}
   b4b5a:	b009      	add	sp, #36	; 0x24
   b4b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4b60:	4914      	ldr	r1, [pc, #80]	; (b4bb4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1f0>)
   b4b62:	4668      	mov	r0, sp
   b4b64:	f003 fd34 	bl	b85d0 <_ZNK6String6equalsEPKc>
      }else if(inputBuffer == "blue"){
   b4b68:	2800      	cmp	r0, #0
   b4b6a:	f43f af6e 	beq.w	b4a4a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x86>
        Serial.println("receive blue");
   b4b6e:	f004 f94d 	bl	b8e0c <_Z16_fetch_usbserialv>
   b4b72:	4911      	ldr	r1, [pc, #68]	; (b4bb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1f4>)
   b4b74:	f003 fc45 	bl	b8402 <_ZN5Print7printlnEPKc>
        colorAdr = 1;
   b4b78:	2701      	movs	r7, #1
   b4b7a:	e766      	b.n	b4a4a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x86>
   b4b7c:	f04f 0801 	mov.w	r8, #1
   b4b80:	e7c6      	b.n	b4b10 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14c>
            val = n;
   b4b82:	4629      	mov	r1, r5
   b4b84:	e7cf      	b.n	b4b26 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x162>
   b4b86:	bf00      	nop
   b4b88:	2003577c 	.word	0x2003577c
   b4b8c:	000bc6f2 	.word	0x000bc6f2
   b4b90:	000bc4e5 	.word	0x000bc4e5
   b4b94:	2003e6a8 	.word	0x2003e6a8
   b4b98:	20035774 	.word	0x20035774
   b4b9c:	000bc529 	.word	0x000bc529
   b4ba0:	000bc521 	.word	0x000bc521
   b4ba4:	2003e5c0 	.word	0x2003e5c0
   b4ba8:	2003e69c 	.word	0x2003e69c
   b4bac:	2003e6b0 	.word	0x2003e6b0
   b4bb0:	000bc53a 	.word	0x000bc53a
   b4bb4:	000bc535 	.word	0x000bc535
   b4bb8:	000bc52d 	.word	0x000bc52d
   b4bbc:	000bc44f 	.word	0x000bc44f

000b4bc0 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4bc0:	2900      	cmp	r1, #0
      _M_create_storage(size_t __n)
   b4bc2:	b538      	push	{r3, r4, r5, lr}
   b4bc4:	4604      	mov	r4, r0
      _M_allocate(size_t __n)
   b4bc6:	ea4f 0581 	mov.w	r5, r1, lsl #2
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4bca:	d00c      	beq.n	b4be6 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x26>
	if (__n > this->_M_max_size())
   b4bcc:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   b4bd0:	d301      	bcc.n	b4bd6 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x16>
	  std::__throw_bad_alloc();
   b4bd2:	f004 facf 	bl	b9174 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4bd6:	4628      	mov	r0, r5
   b4bd8:	f7ff fa5d 	bl	b4096 <_Znwj>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4bdc:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4be0:	4428      	add	r0, r5
   b4be2:	60a0      	str	r0, [r4, #8]
      }
   b4be4:	bd38      	pop	{r3, r4, r5, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4be6:	4608      	mov	r0, r1
   b4be8:	e7f8      	b.n	b4bdc <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x1c>

000b4bea <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b4bea:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b4bec:	b510      	push	{r4, lr}
   b4bee:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b4bf0:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b4bf4:	d005      	beq.n	b4c02 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b4bf6:	4601      	mov	r1, r0
   b4bf8:	4622      	mov	r2, r4
   b4bfa:	4618      	mov	r0, r3
   b4bfc:	f005 fb67 	bl	ba2ce <memmove>
   b4c00:	4603      	mov	r3, r0
	  return __result + _Num;
	}
   b4c02:	1918      	adds	r0, r3, r4
   b4c04:	bd10      	pop	{r4, pc}

000b4c06 <_ZNSt6vectorIiSaIiEEC1ERKS1_>:
      vector(const vector& __x)
   b4c06:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c08:	e9d1 3600 	ldrd	r3, r6, [r1]
   b4c0c:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4c0e:	2300      	movs	r3, #0
      vector(const vector& __x)
   b4c10:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4c12:	e9c0 3300 	strd	r3, r3, [r0]
   b4c16:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4c18:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
   b4c1a:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4c1c:	f7ff fa74 	bl	b4108 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4c20:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4c24:	4406      	add	r6, r0
   b4c26:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4c28:	4602      	mov	r2, r0
      if (std::is_constant_evaluated())
	return std::__copy_move<_IsMove, false, _Category>::
	  __copy_m(__first, __last, __result);
#endif
      return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
			      _Category>::__copy_m(__first, __last, __result);
   b4c2a:	e9d5 0100 	ldrd	r0, r1, [r5]
   b4c2e:	f7ff ffdc 	bl	b4bea <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
   b4c32:	6060      	str	r0, [r4, #4]
      }
   b4c34:	4620      	mov	r0, r4
   b4c36:	bd70      	pop	{r4, r5, r6, pc}

000b4c38 <_ZN7RailwayC1ERKS_>:
   b4c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
class LinkedList{
   b4c3a:	680b      	ldr	r3, [r1, #0]
   b4c3c:	6003      	str	r3, [r0, #0]
   b4c3e:	684b      	ldr	r3, [r1, #4]
   b4c40:	6043      	str	r3, [r0, #4]
   b4c42:	4604      	mov	r4, r0
   b4c44:	460d      	mov	r5, r1
   b4c46:	3008      	adds	r0, #8
   b4c48:	3108      	adds	r1, #8
   b4c4a:	f7ff fe31 	bl	b48b0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
   b4c4e:	f105 0114 	add.w	r1, r5, #20
   b4c52:	f104 0014 	add.w	r0, r4, #20
   b4c56:	f7ff fe2b 	bl	b48b0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c5a:	e9d5 3108 	ldrd	r3, r1, [r5, #32]
   b4c5e:	1ac9      	subs	r1, r1, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4c60:	2300      	movs	r3, #0
   b4c62:	e9c4 3308 	strd	r3, r3, [r4, #32]
   b4c66:	62a3      	str	r3, [r4, #40]	; 0x28
      { _M_create_storage(__n); }
   b4c68:	1089      	asrs	r1, r1, #2
   b4c6a:	f104 0020 	add.w	r0, r4, #32
   b4c6e:	f7ff ffa7 	bl	b4bc0 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
   b4c72:	e9d5 1208 	ldrd	r1, r2, [r5, #32]
	  if (_Num)
   b4c76:	4291      	cmp	r1, r2
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
   b4c78:	6a23      	ldr	r3, [r4, #32]
	  const ptrdiff_t _Num = __last - __first;
   b4c7a:	eba2 0601 	sub.w	r6, r2, r1
	  if (_Num)
   b4c7e:	d004      	beq.n	b4c8a <_ZN7RailwayC1ERKS_+0x52>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b4c80:	4618      	mov	r0, r3
   b4c82:	4632      	mov	r2, r6
   b4c84:	f005 fb23 	bl	ba2ce <memmove>
   b4c88:	4603      	mov	r3, r0
	  return __result + _Num;
   b4c8a:	4433      	add	r3, r6
	this->_M_impl._M_finish =
   b4c8c:	6263      	str	r3, [r4, #36]	; 0x24
   b4c8e:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   b4c92:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b4c96:	f7ff ffb6 	bl	b4c06 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b4c9a:	f105 0138 	add.w	r1, r5, #56	; 0x38
   b4c9e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b4ca2:	f7ff ffb0 	bl	b4c06 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b4ca6:	f105 0144 	add.w	r1, r5, #68	; 0x44
   b4caa:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b4cae:	f7ff fa4b 	bl	b4148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4cb2:	e9d5 3717 	ldrd	r3, r7, [r5, #92]	; 0x5c
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4cb6:	480f      	ldr	r0, [pc, #60]	; (b4cf4 <_ZN7RailwayC1ERKS_+0xbc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4cb8:	1aff      	subs	r7, r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4cba:	2300      	movs	r3, #0
   b4cbc:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   b4cc0:	6663      	str	r3, [r4, #100]	; 0x64
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4cc2:	10fb      	asrs	r3, r7, #3
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4cc4:	4358      	muls	r0, r3
   b4cc6:	f7ff fa0d 	bl	b40e4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4cca:	e9c4 0017 	strd	r0, r0, [r4, #92]	; 0x5c
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4cce:	4407      	add	r7, r0
   b4cd0:	6667      	str	r7, [r4, #100]	; 0x64
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b4cd2:	e9d5 5717 	ldrd	r5, r7, [r5, #92]	; 0x5c
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4cd6:	4606      	mov	r6, r0
   b4cd8:	42af      	cmp	r7, r5
   b4cda:	d007      	beq.n	b4cec <_ZN7RailwayC1ERKS_+0xb4>
   b4cdc:	b11e      	cbz	r6, b4ce6 <_ZN7RailwayC1ERKS_+0xae>
   b4cde:	4629      	mov	r1, r5
   b4ce0:	4630      	mov	r0, r6
   b4ce2:	f7ff fa31 	bl	b4148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b4ce6:	3618      	adds	r6, #24
   b4ce8:	3518      	adds	r5, #24
   b4cea:	e7f5      	b.n	b4cd8 <_ZN7RailwayC1ERKS_+0xa0>
	this->_M_impl._M_finish =
   b4cec:	6626      	str	r6, [r4, #96]	; 0x60
   b4cee:	4620      	mov	r0, r4
   b4cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b4cf2:	bf00      	nop
   b4cf4:	aaaaaaab 	.word	0xaaaaaaab

000b4cf8 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>:
      vector(initializer_list<value_type> __l,
   b4cf8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b4cfa:	ab04      	add	r3, sp, #16
   b4cfc:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4d00:	2300      	movs	r3, #0
   b4d02:	e9c0 3300 	strd	r3, r3, [r0]
   b4d06:	6083      	str	r3, [r0, #8]
      vector(initializer_list<value_type> __l,
   b4d08:	4604      	mov	r4, r0
   b4d0a:	4613      	mov	r3, r2
   b4d0c:	460e      	mov	r6, r1
   b4d0e:	0095      	lsls	r5, r2, #2
   b4d10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   b4d14:	f342 001d 	sbfx	r0, r2, #0, #30
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4d18:	4a0a      	ldr	r2, [pc, #40]	; (b4d44 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_+0x4c>)
   b4d1a:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   b4d1e:	d202      	bcs.n	b4d26 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_+0x2e>
	  __throw_length_error(
   b4d20:	4809      	ldr	r0, [pc, #36]	; (b4d48 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_+0x50>)
   b4d22:	f004 fa2d 	bl	b9180 <_ZSt20__throw_length_errorPKc>
   b4d26:	9101      	str	r1, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4d28:	f7ff f9ee 	bl	b4108 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4d2c:	4405      	add	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4d2e:	4602      	mov	r2, r0
   b4d30:	6020      	str	r0, [r4, #0]
			      _Category>::__copy_m(__first, __last, __result);
   b4d32:	9901      	ldr	r1, [sp, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4d34:	60a5      	str	r5, [r4, #8]
   b4d36:	4630      	mov	r0, r6
   b4d38:	f7ff ff57 	bl	b4bea <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
   b4d3c:	6060      	str	r0, [r4, #4]
      }
   b4d3e:	4620      	mov	r0, r4
   b4d40:	b004      	add	sp, #16
   b4d42:	bd70      	pop	{r4, r5, r6, pc}
   b4d44:	7ffffffc 	.word	0x7ffffffc
   b4d48:	000bc4b4 	.word	0x000bc4b4

000b4d4c <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE>:
    std::vector<int> scalers;
    std::vector<int> outputs;
    std::string name;
    std::vector<std::string> colors;

    Railway(LinkedList checkpointInput, std::vector<int> scalerInput, int outputSize, std::string nameInput, std::vector<std::string> colorInput){
   b4d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4d50:	2500      	movs	r5, #0
   b4d52:	461e      	mov	r6, r3
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b4d54:	f100 034c 	add.w	r3, r0, #76	; 0x4c
      { _M_string_length = __length; }
   b4d58:	e9c0 3511 	strd	r3, r5, [r0, #68]	; 0x44
   b4d5c:	680b      	ldr	r3, [r1, #0]
   b4d5e:	6003      	str	r3, [r0, #0]
   b4d60:	b089      	sub	sp, #36	; 0x24
   b4d62:	684b      	ldr	r3, [r1, #4]
   b4d64:	6043      	str	r3, [r0, #4]
   b4d66:	6285      	str	r5, [r0, #40]	; 0x28
   b4d68:	f880 504c 	strb.w	r5, [r0, #76]	; 0x4c
   b4d6c:	6645      	str	r5, [r0, #100]	; 0x64
   b4d6e:	4604      	mov	r4, r0
   b4d70:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b4d74:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b4d78:	e9c0 5506 	strd	r5, r5, [r0, #24]
   b4d7c:	e9c0 5508 	strd	r5, r5, [r0, #32]
   b4d80:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
   b4d84:	e9c0 550d 	strd	r5, r5, [r0, #52]	; 0x34
   b4d88:	e9c0 550f 	strd	r5, r5, [r0, #60]	; 0x3c
   b4d8c:	e9c0 5517 	strd	r5, r5, [r0, #92]	; 0x5c
   b4d90:	3108      	adds	r1, #8
   b4d92:	f100 0b2c 	add.w	fp, r0, #44	; 0x2c
   b4d96:	f100 0a44 	add.w	sl, r0, #68	; 0x44
   b4d9a:	f100 095c 	add.w	r9, r0, #92	; 0x5c
   b4d9e:	3008      	adds	r0, #8
   b4da0:	4690      	mov	r8, r2
   b4da2:	9000      	str	r0, [sp, #0]
   b4da4:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   b4da6:	f7ff fa0b 	bl	b41c0 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
      checkpointList = checkpointInput;
      checkpointVector = checkpointList.vectorForm;
   b4daa:	9800      	ldr	r0, [sp, #0]
   b4dac:	4601      	mov	r1, r0
   b4dae:	f104 0014 	add.w	r0, r4, #20
   b4db2:	f7ff fa05 	bl	b41c0 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4db6:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
   b4dba:	1a9b      	subs	r3, r3, r2
   b4dbc:	4a86      	ldr	r2, [pc, #536]	; (b4fd8 <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE+0x28c>)
   b4dbe:	1099      	asrs	r1, r3, #2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4dc0:	42ab      	cmp	r3, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4dc2:	fb02 f101 	mul.w	r1, r2, r1
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4dc6:	da02      	bge.n	b4dce <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE+0x82>
	  __throw_length_error(
   b4dc8:	4884      	ldr	r0, [pc, #528]	; (b4fdc <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE+0x290>)
   b4dca:	f004 f9d9 	bl	b9180 <_ZSt20__throw_length_errorPKc>
      { _M_create_storage(__n); }
   b4dce:	a802      	add	r0, sp, #8
   b4dd0:	9100      	str	r1, [sp, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4dd2:	e9cd 5502 	strd	r5, r5, [sp, #8]
   b4dd6:	9504      	str	r5, [sp, #16]
      { _M_create_storage(__n); }
   b4dd8:	f7ff fef2 	bl	b4bc0 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
   b4ddc:	9900      	ldr	r1, [sp, #0]
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
   b4dde:	9802      	ldr	r0, [sp, #8]
   b4de0:	b141      	cbz	r1, b4df4 <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE+0xa8>
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
   b4de2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
	*__first = __tmp;
   b4de6:	008a      	lsls	r2, r1, #2
   b4de8:	4629      	mov	r1, r5
      std::__fill_a(__first, __first + __n, __value);
   b4dea:	9300      	str	r3, [sp, #0]
	*__first = __tmp;
   b4dec:	f005 fa89 	bl	ba302 <memset>
   b4df0:	9b00      	ldr	r3, [sp, #0]
   b4df2:	4618      	mov	r0, r3
	  _M_start = __x._M_start;
   b4df4:	9902      	ldr	r1, [sp, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4df6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b4df8:	9307      	str	r3, [sp, #28]
	  _M_finish = __x._M_finish;
   b4dfa:	e9d4 5208 	ldrd	r5, r2, [r4, #32]
   b4dfe:	e9c4 1008 	strd	r1, r0, [r4, #32]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4e02:	9904      	ldr	r1, [sp, #16]
   b4e04:	62a1      	str	r1, [r4, #40]	; 0x28
	  _M_start = __x._M_start;
   b4e06:	2300      	movs	r3, #0
      }
   b4e08:	a805      	add	r0, sp, #20
	  _M_finish = __x._M_finish;
   b4e0a:	e9cd 5205 	strd	r5, r2, [sp, #20]
   b4e0e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4e12:	9304      	str	r3, [sp, #16]
      }
   b4e14:	f7ff fc64 	bl	b46e0 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b4e18:	a802      	add	r0, sp, #8
   b4e1a:	f7ff fc61 	bl	b46e0 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
      if (&__x != this)
   b4e1e:	45c3      	cmp	fp, r8
   b4e20:	d021      	beq.n	b4e66 <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE+0x11a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4e22:	e9d8 3100 	ldrd	r3, r1, [r8]
			 - this->_M_impl._M_start); }
   b4e26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   b4e28:	6b60      	ldr	r0, [r4, #52]	; 0x34
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4e2a:	eba1 0b03 	sub.w	fp, r1, r3
			 - this->_M_impl._M_start); }
   b4e2e:	1a80      	subs	r0, r0, r2
	  if (__xlen > capacity())
   b4e30:	4583      	cmp	fp, r0
   b4e32:	d967      	bls.n	b4f04 <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE+0x1b8>
	  pointer __result = this->_M_allocate(__n);
   b4e34:	ea4f 00ab 	mov.w	r0, fp, asr #2
   b4e38:	e9cd 1300 	strd	r1, r3, [sp]
   b4e3c:	f7ff f964 	bl	b4108 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
   b4e40:	e9dd 1300 	ldrd	r1, r3, [sp]
   b4e44:	4602      	mov	r2, r0
   b4e46:	4605      	mov	r5, r0
   b4e48:	4618      	mov	r0, r3
   b4e4a:	f7ff fece 	bl	b4bea <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4e4e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (__p)
   b4e50:	b118      	cbz	r0, b4e5a <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE+0x10e>
			    - this->_M_impl._M_start);
   b4e52:	6b61      	ldr	r1, [r4, #52]	; 0x34
	::operator delete(__p
   b4e54:	1a09      	subs	r1, r1, r0
   b4e56:	f7ff f924 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b4e5a:	62e5      	str	r5, [r4, #44]	; 0x2c
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4e5c:	445d      	add	r5, fp
   b4e5e:	6365      	str	r5, [r4, #52]	; 0x34
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4e60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b4e62:	445b      	add	r3, fp
   b4e64:	6323      	str	r3, [r4, #48]	; 0x30
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4e66:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
   b4e6a:	d2ad      	bcs.n	b4dc8 <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE+0x7c>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4e6c:	f04f 0800 	mov.w	r8, #0
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4e70:	4630      	mov	r0, r6
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4e72:	e9cd 8802 	strd	r8, r8, [sp, #8]
   b4e76:	f8cd 8010 	str.w	r8, [sp, #16]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4e7a:	f7ff f945 	bl	b4108 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4e7e:	00b2      	lsls	r2, r6, #2
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4e80:	4605      	mov	r5, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4e82:	eb00 0b86 	add.w	fp, r0, r6, lsl #2
      if (__n <= 0)
   b4e86:	2e00      	cmp	r6, #0
   b4e88:	d04f      	beq.n	b4f2a <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE+0x1de>
	*__first = __tmp;
   b4e8a:	4641      	mov	r1, r8
   b4e8c:	f005 fa39 	bl	ba302 <memset>
   b4e90:	465b      	mov	r3, fp
	  _M_finish = __x._M_finish;
   b4e92:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
	  _M_end_of_storage = __x._M_end_of_storage;
   b4e96:	6c22      	ldr	r2, [r4, #64]	; 0x40
   b4e98:	f8c4 b040 	str.w	fp, [r4, #64]	; 0x40
	  _M_finish = __x._M_finish;
   b4e9c:	e9cd 0105 	strd	r0, r1, [sp, #20]
   b4ea0:	e9c4 530e 	strd	r5, r3, [r4, #56]	; 0x38
      }
   b4ea4:	a805      	add	r0, sp, #20
	  _M_start = __x._M_start;
   b4ea6:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
   b4ea8:	e9cd 3302 	strd	r3, r3, [sp, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4eac:	9207      	str	r2, [sp, #28]
   b4eae:	9304      	str	r3, [sp, #16]
      }
   b4eb0:	f7ff fc20 	bl	b46f4 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4eb4:	a802      	add	r0, sp, #8
   b4eb6:	f7ff fc1d 	bl	b46f4 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
		  }
	      }
	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
	  }
#endif
	this->_M_assign(__str);
   b4eba:	9912      	ldr	r1, [sp, #72]	; 0x48
   b4ebc:	4650      	mov	r0, sl
   b4ebe:	f004 fa5f 	bl	b9380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
      if (&__x != this)
   b4ec2:	45b9      	cmp	r9, r7
   b4ec4:	d048      	beq.n	b4f58 <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE+0x20c>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4ec6:	e9d7 5b00 	ldrd	r5, fp, [r7]
			 - this->_M_impl._M_start); }
   b4eca:	f8d4 a05c 	ldr.w	sl, [r4, #92]	; 0x5c
   b4ece:	6e63      	ldr	r3, [r4, #100]	; 0x64
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4ed0:	4a43      	ldr	r2, [pc, #268]	; (b4fe0 <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE+0x294>)
   b4ed2:	ebab 0805 	sub.w	r8, fp, r5
			 - this->_M_impl._M_start); }
   b4ed6:	eba3 030a 	sub.w	r3, r3, sl
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4eda:	ea4f 09e8 	mov.w	r9, r8, asr #3
	  if (__xlen > capacity())
   b4ede:	4543      	cmp	r3, r8
   b4ee0:	fb02 f909 	mul.w	r9, r2, r9
   b4ee4:	d23c      	bcs.n	b4f60 <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE+0x214>
	  pointer __result = this->_M_allocate(__n);
   b4ee6:	4648      	mov	r0, r9
   b4ee8:	f7ff f8fc 	bl	b40e4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
   b4eec:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   b4eee:	4607      	mov	r7, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b4ef0:	45ab      	cmp	fp, r5
   b4ef2:	d01c      	beq.n	b4f2e <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE+0x1e2>
   b4ef4:	b11f      	cbz	r7, b4efe <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE+0x1b2>
   b4ef6:	4629      	mov	r1, r5
   b4ef8:	4638      	mov	r0, r7
   b4efa:	f7ff f925 	bl	b4148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b4efe:	3718      	adds	r7, #24
   b4f00:	3518      	adds	r5, #24
   b4f02:	e7f5      	b.n	b4ef0 <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE+0x1a4>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4f04:	6b20      	ldr	r0, [r4, #48]	; 0x30
   b4f06:	1a80      	subs	r0, r0, r2
	  else if (size() >= __xlen)
   b4f08:	4583      	cmp	fp, r0
   b4f0a:	d803      	bhi.n	b4f14 <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE+0x1c8>
			      _Category>::__copy_m(__first, __last, __result);
   b4f0c:	4618      	mov	r0, r3
   b4f0e:	f7ff fe6c 	bl	b4bea <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
   b4f12:	e7a5      	b.n	b4e60 <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE+0x114>
   b4f14:	1819      	adds	r1, r3, r0
   b4f16:	4618      	mov	r0, r3
   b4f18:	f7ff fe67 	bl	b4bea <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
   b4f1c:	e9d4 020b 	ldrd	r0, r2, [r4, #44]	; 0x2c
   b4f20:	e9d8 3100 	ldrd	r3, r1, [r8]
   b4f24:	1a10      	subs	r0, r2, r0
   b4f26:	4418      	add	r0, r3
   b4f28:	e7f1      	b.n	b4f0e <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE+0x1c2>
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4f2a:	4603      	mov	r3, r0
   b4f2c:	e7b1      	b.n	b4e92 <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE+0x146>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4f2e:	e9d4 5717 	ldrd	r5, r7, [r4, #92]	; 0x5c
	  for (; __first != __last; ++__first)
   b4f32:	42af      	cmp	r7, r5
   b4f34:	d004      	beq.n	b4f40 <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE+0x1f4>
      { _M_dispose(); }
   b4f36:	4628      	mov	r0, r5
   b4f38:	f004 fa04 	bl	b9344 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4f3c:	3518      	adds	r5, #24
   b4f3e:	e7f8      	b.n	b4f32 <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE+0x1e6>
	      _M_deallocate(this->_M_impl._M_start,
   b4f40:	6de0      	ldr	r0, [r4, #92]	; 0x5c
	if (__p)
   b4f42:	b118      	cbz	r0, b4f4c <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE+0x200>
			    - this->_M_impl._M_start);
   b4f44:	6e61      	ldr	r1, [r4, #100]	; 0x64
   b4f46:	1a09      	subs	r1, r1, r0
   b4f48:	f7ff f8ab 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b4f4c:	65e6      	str	r6, [r4, #92]	; 0x5c
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4f4e:	4446      	add	r6, r8
   b4f50:	6666      	str	r6, [r4, #100]	; 0x64
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4f52:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b4f54:	4443      	add	r3, r8
   b4f56:	6623      	str	r3, [r4, #96]	; 0x60
      distances = std::vector<float>(checkpointVector.size(), 0);
      scalers = scalerInput;
      outputs = std::vector<int>(outputSize, 0);
      name = nameInput;
      colors = colorInput;
    }
   b4f58:	4620      	mov	r0, r4
   b4f5a:	b009      	add	sp, #36	; 0x24
   b4f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4f60:	6e26      	ldr	r6, [r4, #96]	; 0x60
   b4f62:	eba6 060a 	sub.w	r6, r6, sl
	  else if (size() >= __xlen)
   b4f66:	45b0      	cmp	r8, r6
   b4f68:	d818      	bhi.n	b4f9c <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE+0x250>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4f6a:	464e      	mov	r6, r9
   b4f6c:	4657      	mov	r7, sl
   b4f6e:	2e00      	cmp	r6, #0
   b4f70:	dd07      	ble.n	b4f82 <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE+0x236>
	this->_M_assign(__str);
   b4f72:	4629      	mov	r1, r5
   b4f74:	4638      	mov	r0, r7
   b4f76:	f004 fa03 	bl	b9380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b4f7a:	3518      	adds	r5, #24
	      ++__result;
   b4f7c:	3718      	adds	r7, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4f7e:	3e01      	subs	r6, #1
   b4f80:	e7f5      	b.n	b4f6e <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE+0x222>
   b4f82:	ea29 75e9 	bic.w	r5, r9, r9, asr #31
   b4f86:	2018      	movs	r0, #24
      : _M_current(__i) { }
   b4f88:	6e26      	ldr	r6, [r4, #96]	; 0x60
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b4f8a:	fb00 a505 	mla	r5, r0, r5, sl
	  for (; __first != __last; ++__first)
   b4f8e:	42ae      	cmp	r6, r5
   b4f90:	d0df      	beq.n	b4f52 <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE+0x206>
      { _M_dispose(); }
   b4f92:	4628      	mov	r0, r5
   b4f94:	f004 f9d6 	bl	b9344 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b4f98:	3518      	adds	r5, #24
      {
	++_M_current;
	return *this;
   b4f9a:	e7f8      	b.n	b4f8e <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE+0x242>
   b4f9c:	10f6      	asrs	r6, r6, #3
   b4f9e:	4356      	muls	r6, r2
   b4fa0:	2e00      	cmp	r6, #0
   b4fa2:	dd08      	ble.n	b4fb6 <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE+0x26a>
	this->_M_assign(__str);
   b4fa4:	4629      	mov	r1, r5
   b4fa6:	4650      	mov	r0, sl
   b4fa8:	f004 f9ea 	bl	b9380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b4fac:	3518      	adds	r5, #24
	      ++__result;
   b4fae:	f10a 0a18 	add.w	sl, sl, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4fb2:	3e01      	subs	r6, #1
   b4fb4:	e7f4      	b.n	b4fa0 <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE+0x254>
   b4fb6:	e9d4 5617 	ldrd	r5, r6, [r4, #92]	; 0x5c
   b4fba:	1b71      	subs	r1, r6, r5
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b4fbc:	683d      	ldr	r5, [r7, #0]
					  __x._M_impl._M_finish,
   b4fbe:	687f      	ldr	r7, [r7, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b4fc0:	440d      	add	r5, r1
	      for (; __first != __last; ++__first, (void)++__cur)
   b4fc2:	42af      	cmp	r7, r5
   b4fc4:	d0c5      	beq.n	b4f52 <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE+0x206>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4fc6:	b11e      	cbz	r6, b4fd0 <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE+0x284>
   b4fc8:	4629      	mov	r1, r5
   b4fca:	4630      	mov	r0, r6
   b4fcc:	f7ff f8bc 	bl	b4148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b4fd0:	3518      	adds	r5, #24
   b4fd2:	3618      	adds	r6, #24
   b4fd4:	e7f5      	b.n	b4fc2 <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE+0x276>
   b4fd6:	bf00      	nop
   b4fd8:	cccccccd 	.word	0xcccccccd
   b4fdc:	000bc4b4 	.word	0x000bc4b4
   b4fe0:	aaaaaaab 	.word	0xaaaaaaab

000b4fe4 <_Z41__static_initialization_and_destruction_0ii.constprop.0>:
   b4fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4fe8:	2801      	cmp	r0, #1
   b4fea:	b0f1      	sub	sp, #452	; 0x1c4
   b4fec:	f040 820e 	bne.w	b540c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x428>
    Checkpoint *next = nullptr;
    Checkpoint *prev = nullptr;
    Checkpoint *extra = nullptr;

    Checkpoint(float la, float lo){
      lat = la;
   b4ff0:	4bab      	ldr	r3, [pc, #684]	; (b52a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2bc>)
   b4ff2:	933c      	str	r3, [sp, #240]	; 0xf0
      lon = lo;
   b4ff4:	4bab      	ldr	r3, [pc, #684]	; (b52a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2c0>)
   b4ff6:	933d      	str	r3, [sp, #244]	; 0xf4
      lat = la;
   b4ff8:	4bab      	ldr	r3, [pc, #684]	; (b52a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2c4>)
   b4ffa:	9341      	str	r3, [sp, #260]	; 0x104
      lon = lo;
   b4ffc:	4bab      	ldr	r3, [pc, #684]	; (b52ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2c8>)
   b4ffe:	9342      	str	r3, [sp, #264]	; 0x108
      lat = la;
   b5000:	4bab      	ldr	r3, [pc, #684]	; (b52b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2cc>)
   b5002:	9346      	str	r3, [sp, #280]	; 0x118
      lon = lo;
   b5004:	4bab      	ldr	r3, [pc, #684]	; (b52b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2d0>)
   b5006:	9347      	str	r3, [sp, #284]	; 0x11c
      lat = la;
   b5008:	4bab      	ldr	r3, [pc, #684]	; (b52b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2d4>)
   b500a:	934b      	str	r3, [sp, #300]	; 0x12c
      lon = lo;
   b500c:	4bab      	ldr	r3, [pc, #684]	; (b52bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2d8>)
   b500e:	934c      	str	r3, [sp, #304]	; 0x130
  LinkedList({Checkpoint(41.853028, -87.63109), Checkpoint(41.9041, -87.628921), Checkpoint(41.903888, -87.639506), Checkpoint(41.913732, -87.652380), Checkpoint(41.9253, -87.65286)}),
   b5010:	af3c      	add	r7, sp, #240	; 0xf0
      lat = la;
   b5012:	4bab      	ldr	r3, [pc, #684]	; (b52c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2dc>)
   b5014:	9350      	str	r3, [sp, #320]	; 0x140
   b5016:	f04f 0b05 	mov.w	fp, #5
      lon = lo;
   b501a:	4baa      	ldr	r3, [pc, #680]	; (b52c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e0>)
   b501c:	9716      	str	r7, [sp, #88]	; 0x58
   b501e:	f8cd b05c 	str.w	fp, [sp, #92]	; 0x5c
   b5022:	f10d 0a40 	add.w	sl, sp, #64	; 0x40
   b5026:	aa16      	add	r2, sp, #88	; 0x58
    Checkpoint(float la, float lo){
   b5028:	2400      	movs	r4, #0
   b502a:	ca06      	ldmia	r2, {r1, r2}
);
   b502c:	4ea6      	ldr	r6, [pc, #664]	; (b52c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e4>)
      lon = lo;
   b502e:	9351      	str	r3, [sp, #324]	; 0x144
  LinkedList({Checkpoint(41.853028, -87.63109), Checkpoint(41.9041, -87.628921), Checkpoint(41.903888, -87.639506), Checkpoint(41.913732, -87.652380), Checkpoint(41.9253, -87.65286)}),
   b5030:	a81e      	add	r0, sp, #120	; 0x78
   b5032:	4653      	mov	r3, sl
    Checkpoint(float la, float lo){
   b5034:	e9cd 443e 	strd	r4, r4, [sp, #248]	; 0xf8
   b5038:	e9cd 4443 	strd	r4, r4, [sp, #268]	; 0x10c
   b503c:	e9cd 4448 	strd	r4, r4, [sp, #288]	; 0x120
   b5040:	e9cd 444d 	strd	r4, r4, [sp, #308]	; 0x134
   b5044:	e9cd 4452 	strd	r4, r4, [sp, #328]	; 0x148
   b5048:	9440      	str	r4, [sp, #256]	; 0x100
   b504a:	9445      	str	r4, [sp, #276]	; 0x114
   b504c:	944a      	str	r4, [sp, #296]	; 0x128
   b504e:	944f      	str	r4, [sp, #316]	; 0x13c
   b5050:	9454      	str	r4, [sp, #336]	; 0x150
   b5052:	f7ff fb8b 	bl	b476c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5056:	a91e      	add	r1, sp, #120	; 0x78
   b5058:	a825      	add	r0, sp, #148	; 0x94
   b505a:	f7ff fb0b 	bl	b4674 <_ZN10LinkedListC1ESt6vectorI10CheckpointSaIS1_EE>
);
   b505e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   b5062:	ad21      	add	r5, sp, #132	; 0x84
   b5064:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   b5068:	2304      	movs	r3, #4
   b506a:	9514      	str	r5, [sp, #80]	; 0x50
   b506c:	9315      	str	r3, [sp, #84]	; 0x54
   b506e:	f10d 0938 	add.w	r9, sp, #56	; 0x38
   b5072:	aa14      	add	r2, sp, #80	; 0x50
   b5074:	464b      	mov	r3, r9
   b5076:	ca06      	ldmia	r2, {r1, r2}
   b5078:	f10d 0830 	add.w	r8, sp, #48	; 0x30
   b507c:	a81b      	add	r0, sp, #108	; 0x6c
   b507e:	f7ff fe3b 	bl	b4cf8 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
   b5082:	4992      	ldr	r1, [pc, #584]	; (b52cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e8>)
   b5084:	4642      	mov	r2, r8
   b5086:	a82a      	add	r0, sp, #168	; 0xa8
   b5088:	f7ff fbb4 	bl	b47f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
   b508c:	4990      	ldr	r1, [pc, #576]	; (b52d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2ec>)
   b508e:	aa0b      	add	r2, sp, #44	; 0x2c
   b5090:	a830      	add	r0, sp, #192	; 0xc0
   b5092:	f7ff fbaf 	bl	b47f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
   b5096:	498f      	ldr	r1, [pc, #572]	; (b52d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f0>)
   b5098:	aa0a      	add	r2, sp, #40	; 0x28
   b509a:	a836      	add	r0, sp, #216	; 0xd8
   b509c:	f7ff fbaa 	bl	b47f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
   b50a0:	ab30      	add	r3, sp, #192	; 0xc0
   b50a2:	9312      	str	r3, [sp, #72]	; 0x48
   b50a4:	2302      	movs	r3, #2
   b50a6:	9313      	str	r3, [sp, #76]	; 0x4c
   b50a8:	aa12      	add	r2, sp, #72	; 0x48
   b50aa:	ca06      	ldmia	r2, {r1, r2}
   b50ac:	ab09      	add	r3, sp, #36	; 0x24
   b50ae:	a818      	add	r0, sp, #96	; 0x60
   b50b0:	f7ff fbca 	bl	b4848 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
Railway redLine = Railway(
   b50b4:	ab18      	add	r3, sp, #96	; 0x60
   b50b6:	9301      	str	r3, [sp, #4]
   b50b8:	ab2a      	add	r3, sp, #168	; 0xa8
   b50ba:	aa1b      	add	r2, sp, #108	; 0x6c
   b50bc:	a925      	add	r1, sp, #148	; 0x94
   b50be:	9300      	str	r3, [sp, #0]
   b50c0:	4885      	ldr	r0, [pc, #532]	; (b52d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f4>)
   b50c2:	2328      	movs	r3, #40	; 0x28
   b50c4:	f7ff fe42 	bl	b4d4c <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE>
);
   b50c8:	a818      	add	r0, sp, #96	; 0x60
   b50ca:	f7ff fb1d 	bl	b4708 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b50ce:	a836      	add	r0, sp, #216	; 0xd8
   b50d0:	f004 f938 	bl	b9344 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b50d4:	a830      	add	r0, sp, #192	; 0xc0
   b50d6:	f004 f935 	bl	b9344 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b50da:	a82a      	add	r0, sp, #168	; 0xa8
   b50dc:	f004 f932 	bl	b9344 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      }
   b50e0:	a81b      	add	r0, sp, #108	; 0x6c
   b50e2:	f7ff fb07 	bl	b46f4 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b50e6:	a827      	add	r0, sp, #156	; 0x9c
   b50e8:	f7ff faa6 	bl	b4638 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
   b50ec:	a81e      	add	r0, sp, #120	; 0x78
   b50ee:	f7ff faa3 	bl	b4638 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b50f2:	4b7a      	ldr	r3, [pc, #488]	; (b52dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f8>)
   b50f4:	933c      	str	r3, [sp, #240]	; 0xf0
      lon = lo;
   b50f6:	4b7a      	ldr	r3, [pc, #488]	; (b52e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2fc>)
   b50f8:	933d      	str	r3, [sp, #244]	; 0xf4
      lat = la;
   b50fa:	4b7a      	ldr	r3, [pc, #488]	; (b52e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x300>)
   b50fc:	9341      	str	r3, [sp, #260]	; 0x104
      lon = lo;
   b50fe:	4b7a      	ldr	r3, [pc, #488]	; (b52e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x304>)
   b5100:	9342      	str	r3, [sp, #264]	; 0x108
      lat = la;
   b5102:	4b7a      	ldr	r3, [pc, #488]	; (b52ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x308>)
   b5104:	9346      	str	r3, [sp, #280]	; 0x118
      lon = lo;
   b5106:	4b7a      	ldr	r3, [pc, #488]	; (b52f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x30c>)
   b5108:	9347      	str	r3, [sp, #284]	; 0x11c
      lat = la;
   b510a:	4b7a      	ldr	r3, [pc, #488]	; (b52f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x310>)
   b510c:	934b      	str	r3, [sp, #300]	; 0x12c
  LinkedList({Checkpoint(41.873797, -87.725663), Checkpoint(41.876313, -87.628210), Checkpoint(41.886032, -87.629817), Checkpoint(41.885716, -87.639876), Checkpoint(41.916157, -87.687364)}),
   b510e:	e9cd 7b10 	strd	r7, fp, [sp, #64]	; 0x40
      lon = lo;
   b5112:	4b79      	ldr	r3, [pc, #484]	; (b52f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x314>)
   b5114:	934c      	str	r3, [sp, #304]	; 0x130
      lat = la;
   b5116:	4b79      	ldr	r3, [pc, #484]	; (b52fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x318>)
   b5118:	9350      	str	r3, [sp, #320]	; 0x140
      lon = lo;
   b511a:	4b79      	ldr	r3, [pc, #484]	; (b5300 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x31c>)
   b511c:	9351      	str	r3, [sp, #324]	; 0x144
   b511e:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b5122:	ab0b      	add	r3, sp, #44	; 0x2c
   b5124:	a81e      	add	r0, sp, #120	; 0x78
    Checkpoint(float la, float lo){
   b5126:	e9cd 443e 	strd	r4, r4, [sp, #248]	; 0xf8
   b512a:	e9cd 4443 	strd	r4, r4, [sp, #268]	; 0x10c
   b512e:	e9cd 4448 	strd	r4, r4, [sp, #288]	; 0x120
   b5132:	e9cd 444d 	strd	r4, r4, [sp, #308]	; 0x134
   b5136:	e9cd 4452 	strd	r4, r4, [sp, #328]	; 0x148
   b513a:	9440      	str	r4, [sp, #256]	; 0x100
   b513c:	9445      	str	r4, [sp, #276]	; 0x114
   b513e:	944a      	str	r4, [sp, #296]	; 0x128
   b5140:	944f      	str	r4, [sp, #316]	; 0x13c
   b5142:	9454      	str	r4, [sp, #336]	; 0x150
);
   b5144:	3610      	adds	r6, #16
  LinkedList({Checkpoint(41.873797, -87.725663), Checkpoint(41.876313, -87.628210), Checkpoint(41.886032, -87.629817), Checkpoint(41.885716, -87.639876), Checkpoint(41.916157, -87.687364)}),
   b5146:	f7ff fb11 	bl	b476c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b514a:	a91e      	add	r1, sp, #120	; 0x78
   b514c:	a825      	add	r0, sp, #148	; 0x94
   b514e:	f7ff fa91 	bl	b4674 <_ZN10LinkedListC1ESt6vectorI10CheckpointSaIS1_EE>
);
   b5152:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   b5156:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   b515a:	2304      	movs	r3, #4
   b515c:	950e      	str	r5, [sp, #56]	; 0x38
   b515e:	930f      	str	r3, [sp, #60]	; 0x3c
   b5160:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5164:	ab0a      	add	r3, sp, #40	; 0x28
   b5166:	a81b      	add	r0, sp, #108	; 0x6c
   b5168:	f7ff fdc6 	bl	b4cf8 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
   b516c:	4965      	ldr	r1, [pc, #404]	; (b5304 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x320>)
	: _M_start(), _M_finish(), _M_end_of_storage()
   b516e:	4d66      	ldr	r5, [pc, #408]	; (b5308 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x324>)
   b5170:	aa09      	add	r2, sp, #36	; 0x24
   b5172:	a82a      	add	r0, sp, #168	; 0xa8
   b5174:	f7ff fb3e 	bl	b47f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
   b5178:	4964      	ldr	r1, [pc, #400]	; (b530c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x328>)
   b517a:	aa08      	add	r2, sp, #32
   b517c:	a830      	add	r0, sp, #192	; 0xc0
   b517e:	f7ff fb39 	bl	b47f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
   b5182:	4963      	ldr	r1, [pc, #396]	; (b5310 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x32c>)
   b5184:	aa07      	add	r2, sp, #28
   b5186:	a836      	add	r0, sp, #216	; 0xd8
   b5188:	f7ff fb34 	bl	b47f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
   b518c:	ab30      	add	r3, sp, #192	; 0xc0
   b518e:	930c      	str	r3, [sp, #48]	; 0x30
   b5190:	2302      	movs	r3, #2
   b5192:	930d      	str	r3, [sp, #52]	; 0x34
   b5194:	e898 0006 	ldmia.w	r8, {r1, r2}
   b5198:	ab06      	add	r3, sp, #24
   b519a:	a818      	add	r0, sp, #96	; 0x60
   b519c:	f7ff fb54 	bl	b4848 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
Railway blueLine = Railway(
   b51a0:	ab18      	add	r3, sp, #96	; 0x60
   b51a2:	9301      	str	r3, [sp, #4]
   b51a4:	ab2a      	add	r3, sp, #168	; 0xa8
   b51a6:	aa1b      	add	r2, sp, #108	; 0x6c
   b51a8:	a925      	add	r1, sp, #148	; 0x94
   b51aa:	9300      	str	r3, [sp, #0]
   b51ac:	4859      	ldr	r0, [pc, #356]	; (b5314 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x330>)
   b51ae:	233c      	movs	r3, #60	; 0x3c
   b51b0:	f7ff fdcc 	bl	b4d4c <_ZN7RailwayC1E10LinkedListSt6vectorIiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_IS9_SaIS9_EE>
);
   b51b4:	a818      	add	r0, sp, #96	; 0x60
   b51b6:	f7ff faa7 	bl	b4708 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b51ba:	a836      	add	r0, sp, #216	; 0xd8
   b51bc:	f004 f8c2 	bl	b9344 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b51c0:	a830      	add	r0, sp, #192	; 0xc0
   b51c2:	f004 f8bf 	bl	b9344 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b51c6:	a82a      	add	r0, sp, #168	; 0xa8
   b51c8:	f004 f8bc 	bl	b9344 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      }
   b51cc:	a81b      	add	r0, sp, #108	; 0x6c
   b51ce:	f7ff fa91 	bl	b46f4 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b51d2:	a827      	add	r0, sp, #156	; 0x9c
   b51d4:	f7ff fa30 	bl	b4638 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
   b51d8:	a81e      	add	r0, sp, #120	; 0x78
   b51da:	f7ff fa2d 	bl	b4638 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
std::vector<Railway> railways = {redLine, blueLine};
   b51de:	493e      	ldr	r1, [pc, #248]	; (b52d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f4>)
   b51e0:	4638      	mov	r0, r7
   b51e2:	f7ff fd29 	bl	b4c38 <_ZN7RailwayC1ERKS_>
   b51e6:	494b      	ldr	r1, [pc, #300]	; (b5314 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x330>)
   b51e8:	a856      	add	r0, sp, #344	; 0x158
   b51ea:	f7ff fd25 	bl	b4c38 <_ZN7RailwayC1ERKS_>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b51ee:	e9c5 4400 	strd	r4, r4, [r5]
   b51f2:	60ac      	str	r4, [r5, #8]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b51f4:	20d0      	movs	r0, #208	; 0xd0
   b51f6:	f7fe ff4e 	bl	b4096 <_Znwj>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b51fa:	f100 06d0 	add.w	r6, r0, #208	; 0xd0
   b51fe:	4604      	mov	r4, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b5200:	6028      	str	r0, [r5, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5202:	60ae      	str	r6, [r5, #8]
   b5204:	b110      	cbz	r0, b520c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x228>
   b5206:	4639      	mov	r1, r7
   b5208:	f7ff fd16 	bl	b4c38 <_ZN7RailwayC1ERKS_>
   b520c:	a956      	add	r1, sp, #344	; 0x158
   b520e:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b5212:	f7ff fd11 	bl	b4c38 <_ZN7RailwayC1ERKS_>
   b5216:	a856      	add	r0, sp, #344	; 0x158
	  this->_M_impl._M_finish =
   b5218:	606e      	str	r6, [r5, #4]
   b521a:	f7ff fa88 	bl	b472e <_ZN7RailwayD1Ev>
   b521e:	4638      	mov	r0, r7
   b5220:	f7ff fa85 	bl	b472e <_ZN7RailwayD1Ev>
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b5224:	493c      	ldr	r1, [pc, #240]	; (b5318 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x334>)
   b5226:	483d      	ldr	r0, [pc, #244]	; (b531c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x338>)
   b5228:	4c3d      	ldr	r4, [pc, #244]	; (b5320 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x33c>)
   b522a:	f8df 80f0 	ldr.w	r8, [pc, #240]	; b531c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x338>
   b522e:	f001 fe8b 	bl	b6f48 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b5232:	493c      	ldr	r1, [pc, #240]	; (b5324 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x340>)
   b5234:	483c      	ldr	r0, [pc, #240]	; (b5328 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x344>)
   b5236:	f001 fe87 	bl	b6f48 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b523a:	493c      	ldr	r1, [pc, #240]	; (b532c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x348>)
   b523c:	4838      	ldr	r0, [pc, #224]	; (b5320 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x33c>)
   b523e:	f001 fe83 	bl	b6f48 <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b5242:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5244:	f10d 0a94 	add.w	sl, sp, #148	; 0x94
   b5248:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
   b524c:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   b5250:	ae2a      	add	r6, sp, #168	; 0xa8
   b5252:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5254:	46c1      	mov	r9, r8
   b5256:	f8d4 c000 	ldr.w	ip, [r4]
   b525a:	f859 3910 	ldr.w	r3, [r9], #-16
   b525e:	f8ca c000 	str.w	ip, [sl]
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b5262:	ac25      	add	r4, sp, #148	; 0x94
   b5264:	6033      	str	r3, [r6, #0]

#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
   b5266:	9305      	str	r3, [sp, #20]
   b5268:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b526a:	ad30      	add	r5, sp, #192	; 0xc0
   b526c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
      : _M_ptr(0), _M_refcount()
   b526e:	f8df e0c4 	ldr.w	lr, [pc, #196]	; b5334 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x350>
   b5272:	f8c5 c000 	str.w	ip, [r5]
   b5276:	f04f 0b00 	mov.w	fp, #0
        BleUuid sUuid(svcUuid);
   b527a:	f10d 0ca8 	add.w	ip, sp, #168	; 0xa8
      constexpr __shared_count() noexcept : _M_pi(0)
   b527e:	e9ce bb00 	strd	fp, fp, [lr]
   b5282:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5286:	463c      	mov	r4, r7
   b5288:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b528a:	9b05      	ldr	r3, [sp, #20]
   b528c:	6023      	str	r3, [r4, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b528e:	4670      	mov	r0, lr
   b5290:	4927      	ldr	r1, [pc, #156]	; (b5330 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x34c>)
   b5292:	9700      	str	r7, [sp, #0]
   b5294:	ab30      	add	r3, sp, #192	; 0xc0
   b5296:	f04f 0210 	mov.w	r2, #16
   b529a:	e9cd bb01 	strd	fp, fp, [sp, #4]
   b529e:	e04b      	b.n	b5338 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x354>
   b52a0:	42276980 	.word	0x42276980
   b52a4:	c2af431e 	.word	0xc2af431e
   b52a8:	42279dcc 	.word	0x42279dcc
   b52ac:	c2af4202 	.word	0xc2af4202
   b52b0:	42279d95 	.word	0x42279d95
   b52b4:	c2af476d 	.word	0xc2af476d
   b52b8:	4227a7a9 	.word	0x4227a7a9
   b52bc:	c2af4e05 	.word	0xc2af4e05
   b52c0:	4227b382 	.word	0x4227b382
   b52c4:	c2af4e44 	.word	0xc2af4e44
   b52c8:	000bc698 	.word	0x000bc698
   b52cc:	000bc529 	.word	0x000bc529
   b52d0:	000bc546 	.word	0x000bc546
   b52d4:	000bc54d 	.word	0x000bc54d
   b52d8:	2003e5cc 	.word	0x2003e5cc
   b52dc:	42277ec5 	.word	0x42277ec5
   b52e0:	c2af738a 	.word	0xc2af738a
   b52e4:	42278158 	.word	0x42278158
   b52e8:	c2af41a5 	.word	0xc2af41a5
   b52ec:	42278b4c 	.word	0x42278b4c
   b52f0:	c2af4277 	.word	0xc2af4277
   b52f4:	42278af9 	.word	0x42278af9
   b52f8:	c2af479e 	.word	0xc2af479e
   b52fc:	4227aa25 	.word	0x4227aa25
   b5300:	c2af5fee 	.word	0xc2af5fee
   b5304:	000bc535 	.word	0x000bc535
   b5308:	2003e5c0 	.word	0x2003e5c0
   b530c:	000bc554 	.word	0x000bc554
   b5310:	000bc55b 	.word	0x000bc55b
   b5314:	20035780 	.word	0x20035780
   b5318:	000bc562 	.word	0x000bc562
   b531c:	20035738 	.word	0x20035738
   b5320:	20035760 	.word	0x20035760
   b5324:	000bc587 	.word	0x000bc587
   b5328:	2003574c 	.word	0x2003574c
   b532c:	000bc5ac 	.word	0x000bc5ac
   b5330:	000bc5d1 	.word	0x000bc5d1
   b5334:	2003e6a8 	.word	0x2003e6a8
   b5338:	f002 fbea 	bl	b7b10 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b533c:	f8df c17c 	ldr.w	ip, [pc, #380]	; b54bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x4d8>
   b5340:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5344:	f10d 0e94 	add.w	lr, sp, #148	; 0x94
   b5348:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b534c:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   b5350:	f10d 0ea8 	add.w	lr, sp, #168	; 0xa8
   b5354:	f8dc c000 	ldr.w	ip, [ip]
   b5358:	f8ca c000 	str.w	ip, [sl]
   b535c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b5360:	f8d8 e000 	ldr.w	lr, [r8]
   b5364:	f8c6 e000 	str.w	lr, [r6]
        BleUuid cUuid(charUuid);
   b5368:	ae25      	add	r6, sp, #148	; 0x94
   b536a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
      : _M_ptr(0), _M_refcount()
   b536c:	f8df 8144 	ldr.w	r8, [pc, #324]	; b54b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x4d0>
   b5370:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   b5374:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
   b5378:	f8c5 c000 	str.w	ip, [r5]
        BleUuid sUuid(svcUuid);
   b537c:	ad2a      	add	r5, sp, #168	; 0xa8
      constexpr __shared_count() noexcept : _M_pi(0)
   b537e:	e9c8 bb00 	strd	fp, fp, [r8]
   b5382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5384:	463e      	mov	r6, r7
   b5386:	c60f      	stmia	r6!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5388:	4b3a      	ldr	r3, [pc, #232]	; (b5474 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x490>)
        BleUuid sUuid(svcUuid);
   b538a:	f8c4 e000 	str.w	lr, [r4]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b538e:	f04f 0204 	mov.w	r2, #4
   b5392:	e9cd 7300 	strd	r7, r3, [sp]
   b5396:	4938      	ldr	r1, [pc, #224]	; (b5478 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x494>)
   b5398:	f8cd b008 	str.w	fp, [sp, #8]
   b539c:	ab30      	add	r3, sp, #192	; 0xc0
   b539e:	4640      	mov	r0, r8
   b53a0:	f002 fbb6 	bl	b7b10 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
   b53a4:	4935      	ldr	r1, [pc, #212]	; (b547c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x498>)
   b53a6:	4836      	ldr	r0, [pc, #216]	; (b5480 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x49c>)
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b53a8:	4c36      	ldr	r4, [pc, #216]	; (b5484 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x4a0>)
   b53aa:	f003 f8a4 	bl	b84f6 <_ZN6StringC1EPK19__FlashStringHelper>
   b53ae:	4836      	ldr	r0, [pc, #216]	; (b5488 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x4a4>)
   b53b0:	f002 fede 	bl	b8170 <_ZN9IPAddressC1Ev>
   b53b4:	4931      	ldr	r1, [pc, #196]	; (b547c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x498>)
   b53b6:	4835      	ldr	r0, [pc, #212]	; (b548c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x4a8>)
   b53b8:	f003 f89d 	bl	b84f6 <_ZN6StringC1EPK19__FlashStringHelper>
   b53bc:	492f      	ldr	r1, [pc, #188]	; (b547c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x498>)
   b53be:	4834      	ldr	r0, [pc, #208]	; (b5490 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x4ac>)
   b53c0:	f003 f899 	bl	b84f6 <_ZN6StringC1EPK19__FlashStringHelper>
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   b53c4:	492d      	ldr	r1, [pc, #180]	; (b547c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x498>)
   b53c6:	4833      	ldr	r0, [pc, #204]	; (b5494 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x4b0>)
   b53c8:	f003 f895 	bl	b84f6 <_ZN6StringC1EPK19__FlashStringHelper>
HttpClient http;
   b53cc:	4832      	ldr	r0, [pc, #200]	; (b5498 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x4b4>)
   b53ce:	f000 fb0f 	bl	b59f0 <_ZN10HttpClientC1Ev>
   b53d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b53d6:	9300      	str	r3, [sp, #0]
   b53d8:	f242 7210 	movw	r2, #10000	; 0x2710
   b53dc:	4b2f      	ldr	r3, [pc, #188]	; (b549c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x4b8>)
   b53de:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b53e2:	4620      	mov	r0, r4
   b53e4:	f000 fcdc 	bl	b5da0 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b53e8:	4b2d      	ldr	r3, [pc, #180]	; (b54a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x4bc>)
   b53ea:	6023      	str	r3, [r4, #0]
   b53ec:	b071      	add	sp, #452	; 0x1c4
   b53ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_M_deallocate(_M_impl._M_start,
   b53f2:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b53f4:	b118      	cbz	r0, b53fe <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x41a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b53f6:	68a1      	ldr	r1, [r4, #8]
	::operator delete(__p
   b53f8:	1a09      	subs	r1, r1, r0
   b53fa:	f7fe fe52 	bl	b40a2 <_ZdlPvj>
Railway blueLine = Railway(
   b53fe:	4829      	ldr	r0, [pc, #164]	; (b54a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x4c0>)
   b5400:	f7ff f995 	bl	b472e <_ZN7RailwayD1Ev>
Railway redLine = Railway(
   b5404:	4828      	ldr	r0, [pc, #160]	; (b54a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x4c4>)
   b5406:	f7ff f992 	bl	b472e <_ZN7RailwayD1Ev>
   b540a:	e7ef      	b.n	b53ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x408>
JsonParserStatic<10000, 1000> parser;
   b540c:	481d      	ldr	r0, [pc, #116]	; (b5484 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x4a0>)
   b540e:	f7fe fe53 	bl	b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b5412:	4b21      	ldr	r3, [pc, #132]	; (b5498 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x4b4>)
   b5414:	4a25      	ldr	r2, [pc, #148]	; (b54ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x4c8>)
	if (_M_pi != nullptr)
   b5416:	699c      	ldr	r4, [r3, #24]
   b5418:	601a      	str	r2, [r3, #0]
   b541a:	b17c      	cbz	r4, b543c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x458>
      if (--_M_use_count == 0)
   b541c:	6863      	ldr	r3, [r4, #4]
   b541e:	3b01      	subs	r3, #1
   b5420:	6063      	str	r3, [r4, #4]
   b5422:	b95b      	cbnz	r3, b543c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x458>
          _M_dispose();
   b5424:	6823      	ldr	r3, [r4, #0]
   b5426:	4620      	mov	r0, r4
   b5428:	689b      	ldr	r3, [r3, #8]
   b542a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b542c:	68a3      	ldr	r3, [r4, #8]
   b542e:	3b01      	subs	r3, #1
   b5430:	60a3      	str	r3, [r4, #8]
   b5432:	b91b      	cbnz	r3, b543c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x458>
            _M_destroy();
   b5434:	6823      	ldr	r3, [r4, #0]
   b5436:	4620      	mov	r0, r4
   b5438:	68db      	ldr	r3, [r3, #12]
   b543a:	4798      	blx	r3
   b543c:	4815      	ldr	r0, [pc, #84]	; (b5494 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x4b0>)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b543e:	4c1c      	ldr	r4, [pc, #112]	; (b54b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x4cc>)
   b5440:	f003 f80e 	bl	b8460 <_ZN6StringD1Ev>
} http_request_t;
   b5444:	4812      	ldr	r0, [pc, #72]	; (b5490 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x4ac>)
   b5446:	f003 f80b 	bl	b8460 <_ZN6StringD1Ev>
   b544a:	4810      	ldr	r0, [pc, #64]	; (b548c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x4a8>)
   b544c:	f003 f808 	bl	b8460 <_ZN6StringD1Ev>
   b5450:	480b      	ldr	r0, [pc, #44]	; (b5480 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x49c>)
   b5452:	f003 f805 	bl	b8460 <_ZN6StringD1Ev>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   b5456:	4817      	ldr	r0, [pc, #92]	; (b54b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x4d0>)
   b5458:	f001 ffcb 	bl	b73f2 <_ZN8particle17BleCharacteristicD1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   b545c:	4816      	ldr	r0, [pc, #88]	; (b54b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x4d4>)
   b545e:	f001 ffc8 	bl	b73f2 <_ZN8particle17BleCharacteristicD1Ev>
   b5462:	e9d4 5600 	ldrd	r5, r6, [r4]
	  for (; __first != __last; ++__first)
   b5466:	42ae      	cmp	r6, r5
   b5468:	d0c3      	beq.n	b53f2 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x40e>
      __pointer->~_Tp();
   b546a:	4628      	mov	r0, r5
   b546c:	f7ff f95f 	bl	b472e <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b5470:	3568      	adds	r5, #104	; 0x68
   b5472:	e7f8      	b.n	b5466 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x482>
   b5474:	000b49c5 	.word	0x000b49c5
   b5478:	000bc5d4 	.word	0x000bc5d4
   b547c:	000bc6f2 	.word	0x000bc6f2
   b5480:	2003e634 	.word	0x2003e634
   b5484:	20038004 	.word	0x20038004
   b5488:	2003e644 	.word	0x2003e644
   b548c:	2003e65c 	.word	0x2003e65c
   b5490:	2003e670 	.word	0x2003e670
   b5494:	2003e684 	.word	0x2003e684
   b5498:	200357e8 	.word	0x200357e8
   b549c:	2003a740 	.word	0x2003a740
   b54a0:	000bc684 	.word	0x000bc684
   b54a4:	20035780 	.word	0x20035780
   b54a8:	2003e5cc 	.word	0x2003e5cc
   b54ac:	000bc9fc 	.word	0x000bc9fc
   b54b0:	2003e5c0 	.word	0x2003e5c0
   b54b4:	2003e694 	.word	0x2003e694
   b54b8:	2003e6a8 	.word	0x2003e6a8
   b54bc:	2003574c 	.word	0x2003574c

000b54c0 <_GLOBAL__sub_I_redLine>:
   b54c0:	2001      	movs	r0, #1
   b54c2:	f7ff bd8f 	b.w	b4fe4 <_Z41__static_initialization_and_destruction_0ii.constprop.0>
	...

000b54c8 <loop>:
void loop() {
   b54c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b54cc:	ed2d 8b06 	vpush	{d8-d10}
   b54d0:	b0b9      	sub	sp, #228	; 0xe4
  Serial.println("loop start");
   b54d2:	f003 fc9b 	bl	b8e0c <_Z16_fetch_usbserialv>
   b54d6:	499f      	ldr	r1, [pc, #636]	; (b5754 <loop+0x28c>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b54d8:	f8df a2d4 	ldr.w	sl, [pc, #724]	; b57b0 <loop+0x2e8>
   b54dc:	f002 ff91 	bl	b8402 <_ZN5Print7printlnEPKc>
  while(userInput){
   b54e0:	4b9d      	ldr	r3, [pc, #628]	; (b5758 <loop+0x290>)
   b54e2:	781b      	ldrb	r3, [r3, #0]
   b54e4:	2b00      	cmp	r3, #0
   b54e6:	f000 8275 	beq.w	b59d4 <loop+0x50c>
   b54ea:	4b9c      	ldr	r3, [pc, #624]	; (b575c <loop+0x294>)
   b54ec:	9302      	str	r3, [sp, #8]
    for(int j = 0; j < railways.size(); j++){
   b54ee:	2400      	movs	r4, #0
   b54f0:	e9da 2300 	ldrd	r2, r3, [sl]
   b54f4:	1a9b      	subs	r3, r3, r2
   b54f6:	4a9a      	ldr	r2, [pc, #616]	; (b5760 <loop+0x298>)
   b54f8:	10db      	asrs	r3, r3, #3
   b54fa:	4353      	muls	r3, r2
   b54fc:	42a3      	cmp	r3, r4
   b54fe:	d9ef      	bls.n	b54e0 <loop+0x18>
      delay(1000);
   b5500:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b5504:	f001 fb14 	bl	b6b30 <delay>
      request.path = strcat(strcat("/api/1.0/ttpositions.aspx?key=00ff09063caa46748434d5fa321d048f&rt=" , railways.at(j).name.c_str()), "&outputType=JSON");
   b5508:	4621      	mov	r1, r4
   b550a:	4650      	mov	r0, sl
   b550c:	f7ff fa0e 	bl	b492c <_ZNSt6vectorI7RailwaySaIS0_EE2atEj>
   b5510:	6c41      	ldr	r1, [r0, #68]	; 0x44
   b5512:	4894      	ldr	r0, [pc, #592]	; (b5764 <loop+0x29c>)
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   b5514:	4d94      	ldr	r5, [pc, #592]	; (b5768 <loop+0x2a0>)
   b5516:	f004 ff2b 	bl	ba370 <strcat>
   b551a:	4994      	ldr	r1, [pc, #592]	; (b576c <loop+0x2a4>)
   b551c:	f004 ff28 	bl	ba370 <strcat>
   b5520:	4601      	mov	r1, r0
   b5522:	4893      	ldr	r0, [pc, #588]	; (b5770 <loop+0x2a8>)
   b5524:	f002 fffb 	bl	b851e <_ZN6StringaSEPKc>
   b5528:	4b92      	ldr	r3, [pc, #584]	; (b5774 <loop+0x2ac>)
   b552a:	4993      	ldr	r1, [pc, #588]	; (b5778 <loop+0x2b0>)
   b552c:	4893      	ldr	r0, [pc, #588]	; (b577c <loop+0x2b4>)
   b552e:	9300      	str	r3, [sp, #0]
   b5530:	462a      	mov	r2, r5
   b5532:	4b93      	ldr	r3, [pc, #588]	; (b5780 <loop+0x2b8>)
   b5534:	f000 fa92 	bl	b5a5c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
      Serial.println("parsing");
   b5538:	f003 fc68 	bl	b8e0c <_Z16_fetch_usbserialv>
   b553c:	4991      	ldr	r1, [pc, #580]	; (b5784 <loop+0x2bc>)
   b553e:	f002 ff60 	bl	b8402 <_ZN5Print7printlnEPKc>
      parser.clear();
   b5542:	4891      	ldr	r0, [pc, #580]	; (b5788 <loop+0x2c0>)
   b5544:	f000 fc22 	bl	b5d8c <_ZN10JsonBuffer5clearEv>
	const char * c_str() const { return buffer; }
   b5548:	6869      	ldr	r1, [r5, #4]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b554a:	9103      	str	r1, [sp, #12]
   b554c:	4608      	mov	r0, r1
   b554e:	f004 ff30 	bl	ba3b2 <strlen>
   b5552:	9903      	ldr	r1, [sp, #12]
   b5554:	4602      	mov	r2, r0
   b5556:	488c      	ldr	r0, [pc, #560]	; (b5788 <loop+0x2c0>)
   b5558:	f000 fbfb 	bl	b5d52 <_ZN10JsonBuffer7addDataEPKcj>
      if (!parser.parse()) {
   b555c:	488a      	ldr	r0, [pc, #552]	; (b5788 <loop+0x2c0>)
   b555e:	f000 ffb5 	bl	b64cc <_ZN10JsonParser5parseEv>
   b5562:	b948      	cbnz	r0, b5578 <loop+0xb0>
        Serial.println("parsing failed");
   b5564:	f003 fc52 	bl	b8e0c <_Z16_fetch_usbserialv>
   b5568:	4988      	ldr	r1, [pc, #544]	; (b578c <loop+0x2c4>)
}
   b556a:	b039      	add	sp, #228	; 0xe4
   b556c:	ecbd 8b06 	vpop	{d8-d10}
   b5570:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("parsing failed");
   b5574:	f002 bf45 	b.w	b8402 <_ZN5Print7printlnEPKc>
      Railway currentRailway = railways.at(j);
   b5578:	4621      	mov	r1, r4
   b557a:	4650      	mov	r0, sl
   b557c:	f7ff f9d6 	bl	b492c <_ZNSt6vectorI7RailwaySaIS0_EE2atEj>
   b5580:	4601      	mov	r1, r0
   b5582:	a81e      	add	r0, sp, #120	; 0x78
   b5584:	f7ff fb58 	bl	b4c38 <_ZN7RailwayC1ERKS_>
      std::vector<Checkpoint> currentCheckpoint = currentRailway.checkpointVector;
   b5588:	a923      	add	r1, sp, #140	; 0x8c
   b558a:	a807      	add	r0, sp, #28
   b558c:	f7ff f990 	bl	b48b0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      int count = 0;
   b5590:	f04f 0b00 	mov.w	fp, #0
        JsonReference train = parser.getReference().key("ctatt").key("route").index(0).key("train").index(count);
   b5594:	497c      	ldr	r1, [pc, #496]	; (b5788 <loop+0x2c0>)
   b5596:	a80d      	add	r0, sp, #52	; 0x34
   b5598:	f000 fc12 	bl	b5dc0 <_ZNK10JsonParser12getReferenceEv>
   b559c:	4a7c      	ldr	r2, [pc, #496]	; (b5790 <loop+0x2c8>)
   b559e:	a90d      	add	r1, sp, #52	; 0x34
   b55a0:	a810      	add	r0, sp, #64	; 0x40
   b55a2:	f000 fd8d 	bl	b60c0 <_ZNK13JsonReference3keyEPKc>
   b55a6:	4a7b      	ldr	r2, [pc, #492]	; (b5794 <loop+0x2cc>)
   b55a8:	a910      	add	r1, sp, #64	; 0x40
   b55aa:	a813      	add	r0, sp, #76	; 0x4c
   b55ac:	f000 fd88 	bl	b60c0 <_ZNK13JsonReference3keyEPKc>
   b55b0:	2200      	movs	r2, #0
   b55b2:	a913      	add	r1, sp, #76	; 0x4c
   b55b4:	a816      	add	r0, sp, #88	; 0x58
   b55b6:	f000 fc71 	bl	b5e9c <_ZNK13JsonReference5indexEj>
   b55ba:	4a77      	ldr	r2, [pc, #476]	; (b5798 <loop+0x2d0>)
   b55bc:	a916      	add	r1, sp, #88	; 0x58
   b55be:	a81a      	add	r0, sp, #104	; 0x68
   b55c0:	f000 fd7e 	bl	b60c0 <_ZNK13JsonReference3keyEPKc>
   b55c4:	465a      	mov	r2, fp
   b55c6:	a91a      	add	r1, sp, #104	; 0x68
   b55c8:	a80a      	add	r0, sp, #40	; 0x28
   b55ca:	f000 fc67 	bl	b5e9c <_ZNK13JsonReference5indexEj>
   b55ce:	a81a      	add	r0, sp, #104	; 0x68
   b55d0:	f000 fb6e 	bl	b5cb0 <_ZN13JsonReferenceD1Ev>
   b55d4:	a816      	add	r0, sp, #88	; 0x58
   b55d6:	f000 fb6b 	bl	b5cb0 <_ZN13JsonReferenceD1Ev>
   b55da:	a813      	add	r0, sp, #76	; 0x4c
   b55dc:	f000 fb68 	bl	b5cb0 <_ZN13JsonReferenceD1Ev>
   b55e0:	a810      	add	r0, sp, #64	; 0x40
   b55e2:	f000 fb65 	bl	b5cb0 <_ZN13JsonReferenceD1Ev>
   b55e6:	a80d      	add	r0, sp, #52	; 0x34
   b55e8:	f000 fb62 	bl	b5cb0 <_ZN13JsonReferenceD1Ev>
        String nextStation = train.key("nextStaNm").valueString();
   b55ec:	4a6b      	ldr	r2, [pc, #428]	; (b579c <loop+0x2d4>)
   b55ee:	a90a      	add	r1, sp, #40	; 0x28
   b55f0:	a81a      	add	r0, sp, #104	; 0x68
   b55f2:	f000 fd65 	bl	b60c0 <_ZNK13JsonReference3keyEPKc>
   b55f6:	a91a      	add	r1, sp, #104	; 0x68
   b55f8:	a816      	add	r0, sp, #88	; 0x58
   b55fa:	f000 fd7b 	bl	b60f4 <_ZNK13JsonReference11valueStringEv>
   b55fe:	a81a      	add	r0, sp, #104	; 0x68
   b5600:	f000 fb56 	bl	b5cb0 <_ZN13JsonReferenceD1Ev>
        Serial.println(nextStation);
   b5604:	f003 fc02 	bl	b8e0c <_Z16_fetch_usbserialv>
   b5608:	9916      	ldr	r1, [sp, #88]	; 0x58
   b560a:	f002 fefa 	bl	b8402 <_ZN5Print7printlnEPKc>
        int trainDir = train.key("trDr").valueString().toInt();
   b560e:	4a64      	ldr	r2, [pc, #400]	; (b57a0 <loop+0x2d8>)
   b5610:	a90a      	add	r1, sp, #40	; 0x28
   b5612:	a813      	add	r0, sp, #76	; 0x4c
   b5614:	f000 fd54 	bl	b60c0 <_ZNK13JsonReference3keyEPKc>
   b5618:	a913      	add	r1, sp, #76	; 0x4c
   b561a:	a81a      	add	r0, sp, #104	; 0x68
   b561c:	f000 fd6a 	bl	b60f4 <_ZNK13JsonReference11valueStringEv>
   b5620:	a81a      	add	r0, sp, #104	; 0x68
   b5622:	f003 f820 	bl	b8666 <_ZNK6String5toIntEv>
   b5626:	9003      	str	r0, [sp, #12]
   b5628:	a81a      	add	r0, sp, #104	; 0x68
   b562a:	f002 ff19 	bl	b8460 <_ZN6StringD1Ev>
   b562e:	a813      	add	r0, sp, #76	; 0x4c
   b5630:	f000 fb3e 	bl	b5cb0 <_ZN13JsonReferenceD1Ev>
        float lat = train.key("lat").valueString().toFloat();
   b5634:	4a5b      	ldr	r2, [pc, #364]	; (b57a4 <loop+0x2dc>)
   b5636:	a90a      	add	r1, sp, #40	; 0x28
   b5638:	a813      	add	r0, sp, #76	; 0x4c
   b563a:	f000 fd41 	bl	b60c0 <_ZNK13JsonReference3keyEPKc>
   b563e:	a913      	add	r1, sp, #76	; 0x4c
   b5640:	a81a      	add	r0, sp, #104	; 0x68
   b5642:	f000 fd57 	bl	b60f4 <_ZNK13JsonReference11valueStringEv>
   b5646:	a81a      	add	r0, sp, #104	; 0x68
   b5648:	f003 f812 	bl	b8670 <_ZNK6String7toFloatEv>
   b564c:	a81a      	add	r0, sp, #104	; 0x68
   b564e:	eef0 8a40 	vmov.f32	s17, s0
   b5652:	f002 ff05 	bl	b8460 <_ZN6StringD1Ev>
   b5656:	a813      	add	r0, sp, #76	; 0x4c
   b5658:	f000 fb2a 	bl	b5cb0 <_ZN13JsonReferenceD1Ev>
        float lon = train.key("lon").valueString().toFloat();
   b565c:	4a52      	ldr	r2, [pc, #328]	; (b57a8 <loop+0x2e0>)
   b565e:	a90a      	add	r1, sp, #40	; 0x28
   b5660:	a813      	add	r0, sp, #76	; 0x4c
   b5662:	f000 fd2d 	bl	b60c0 <_ZNK13JsonReference3keyEPKc>
   b5666:	a913      	add	r1, sp, #76	; 0x4c
   b5668:	a81a      	add	r0, sp, #104	; 0x68
   b566a:	f000 fd43 	bl	b60f4 <_ZNK13JsonReference11valueStringEv>
   b566e:	a81a      	add	r0, sp, #104	; 0x68
   b5670:	f002 fffe 	bl	b8670 <_ZNK6String7toFloatEv>
   b5674:	a81a      	add	r0, sp, #104	; 0x68
   b5676:	eeb0 8a40 	vmov.f32	s16, s0
   b567a:	f002 fef1 	bl	b8460 <_ZN6StringD1Ev>
   b567e:	a813      	add	r0, sp, #76	; 0x4c
   b5680:	f000 fb16 	bl	b5cb0 <_ZN13JsonReferenceD1Ev>
        if(nextStation.length() <= 1){
   b5684:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b5686:	2b01      	cmp	r3, #1
   b5688:	f240 816f 	bls.w	b596a <loop+0x4a2>
   b568c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
   b5690:	1a9b      	subs	r3, r3, r2
   b5692:	4a46      	ldr	r2, [pc, #280]	; (b57ac <loop+0x2e4>)
   b5694:	109b      	asrs	r3, r3, #2
   b5696:	fb02 f903 	mul.w	r9, r2, r3
        for(int i = 0; i < checkpointCount; i++){
   b569a:	2500      	movs	r5, #0
   b569c:	454d      	cmp	r5, r9
   b569e:	da42      	bge.n	b5726 <loop+0x25e>
          currentRailway.distances.at(i) = currentCheckpoint.at(i).getDistance(lat, lon);
   b56a0:	4629      	mov	r1, r5
   b56a2:	a807      	add	r0, sp, #28
   b56a4:	f7fe ffd2 	bl	b464c <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj>
    }

    float getDistance(float trainLat, float trainLon){
      return sqrt(pow((trainLat - lat), 2) + pow((trainLon - lon), 2));
   b56a8:	edd0 7a00 	vldr	s15, [r0]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b56ac:	ee78 7ae7 	vsub.f32	s15, s17, s15
   b56b0:	4606      	mov	r6, r0
   b56b2:	ee17 0a90 	vmov	r0, s15
   b56b6:	f004 fa45 	bl	b9b44 <__aeabi_f2d>
   b56ba:	edd6 7a01 	vldr	s15, [r6, #4]
   b56be:	ee78 7a67 	vsub.f32	s15, s16, s15
   b56c2:	4602      	mov	r2, r0
   b56c4:	460b      	mov	r3, r1
   b56c6:	ee17 0a90 	vmov	r0, s15
   b56ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b56ce:	f004 fa39 	bl	b9b44 <__aeabi_f2d>
   b56d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b56d6:	ec41 0b19 	vmov	d9, r0, r1
   b56da:	4610      	mov	r0, r2
   b56dc:	4619      	mov	r1, r3
   b56de:	f004 fa89 	bl	b9bf4 <__aeabi_dmul>
   b56e2:	ec53 2b19 	vmov	r2, r3, d9
   b56e6:	4606      	mov	r6, r0
   b56e8:	460f      	mov	r7, r1
   b56ea:	ee19 0a10 	vmov	r0, s18
   b56ee:	4619      	mov	r1, r3
   b56f0:	f004 fa80 	bl	b9bf4 <__aeabi_dmul>
   b56f4:	4602      	mov	r2, r0
   b56f6:	460b      	mov	r3, r1
   b56f8:	4630      	mov	r0, r6
   b56fa:	4639      	mov	r1, r7
   b56fc:	f004 f8c4 	bl	b9888 <__adddf3>
   b5700:	ec41 0b10 	vmov	d0, r0, r1
   b5704:	f003 ffb4 	bl	b9670 <sqrt>
   b5708:	4629      	mov	r1, r5
   b570a:	a826      	add	r0, sp, #152	; 0x98
   b570c:	ec57 6b10 	vmov	r6, r7, d0
   b5710:	f7ff f920 	bl	b4954 <_ZNSt6vectorIfSaIfEE2atEj>
   b5714:	4639      	mov	r1, r7
   b5716:	4680      	mov	r8, r0
   b5718:	4630      	mov	r0, r6
   b571a:	f004 fd3b 	bl	ba194 <__aeabi_d2f>
        for(int i = 0; i < checkpointCount; i++){
   b571e:	3501      	adds	r5, #1
   b5720:	f8c8 0000 	str.w	r0, [r8]
   b5724:	e7ba      	b.n	b569c <loop+0x1d4>
      : _M_current(__i) { }
   b5726:	e9dd 7126 	ldrd	r7, r1, [sp, #152]	; 0x98
    _GLIBCXX14_CONSTEXPR
    _ForwardIterator
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
		  _Compare __comp)
    {
      if (__first == __last)
   b572a:	428f      	cmp	r7, r1
   b572c:	d042      	beq.n	b57b4 <loop+0x2ec>
   b572e:	1d3b      	adds	r3, r7, #4
   b5730:	463e      	mov	r6, r7
	return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
   b5732:	4299      	cmp	r1, r3
	++_M_current;
   b5734:	461a      	mov	r2, r3
   b5736:	d03e      	beq.n	b57b6 <loop+0x2ee>
	if (__comp(__first, __result))
   b5738:	edd6 7a00 	vldr	s15, [r6]
   b573c:	ed92 7a00 	vldr	s14, [r2]
   b5740:	eeb4 7a67 	vcmp.f32	s14, s15
   b5744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5748:	f103 0304 	add.w	r3, r3, #4
   b574c:	bf48      	it	mi
   b574e:	4616      	movmi	r6, r2
   b5750:	e7ef      	b.n	b5732 <loop+0x26a>
   b5752:	bf00      	nop
   b5754:	000bc5d7 	.word	0x000bc5d7
   b5758:	2003e6b0 	.word	0x2003e6b0
   b575c:	2003e69c 	.word	0x2003e69c
   b5760:	c4ec4ec5 	.word	0xc4ec4ec5
   b5764:	000bc5e2 	.word	0x000bc5e2
   b5768:	2003e680 	.word	0x2003e680
   b576c:	000bc625 	.word	0x000bc625
   b5770:	2003e65c 	.word	0x2003e65c
   b5774:	000bc636 	.word	0x000bc636
   b5778:	2003e634 	.word	0x2003e634
   b577c:	200357e8 	.word	0x200357e8
   b5780:	20035548 	.word	0x20035548
   b5784:	000bc63a 	.word	0x000bc63a
   b5788:	20038004 	.word	0x20038004
   b578c:	000bc642 	.word	0x000bc642
   b5790:	000bc651 	.word	0x000bc651
   b5794:	000bc657 	.word	0x000bc657
   b5798:	000bc65d 	.word	0x000bc65d
   b579c:	000bc663 	.word	0x000bc663
   b57a0:	000bc66d 	.word	0x000bc66d
   b57a4:	000bc672 	.word	0x000bc672
   b57a8:	000bc676 	.word	0x000bc676
   b57ac:	cccccccd 	.word	0xcccccccd
   b57b0:	2003e5c0 	.word	0x2003e5c0
   b57b4:	463e      	mov	r6, r7
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b57b6:	1bf5      	subs	r5, r6, r7
   b57b8:	10ad      	asrs	r5, r5, #2
        x1 = currentCheckpoint.at(closestIndex).lat;
   b57ba:	4629      	mov	r1, r5
   b57bc:	a807      	add	r0, sp, #28
   b57be:	f7fe ff45 	bl	b464c <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj>
   b57c2:	edd0 7a00 	vldr	s15, [r0]
        y1 = currentCheckpoint.at(closestIndex).lon;
   b57c6:	ed90 9a01 	vldr	s18, [r0, #4]
        if(currentCheckpoint.at(closestIndex).lat > lat){
   b57ca:	eef4 8ae7 	vcmpe.f32	s17, s15
   b57ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b57d2:	ee37 aae8 	vsub.f32	s20, s15, s17
          slope = (y - y1) / (x - x1);
   b57d6:	bf55      	itete	pl
   b57d8:	ee38 7a49 	vsubpl.f32	s14, s16, s18
          slope = (y1 - y) / (x1 - x);
   b57dc:	ee79 7a48 	vsubmi.f32	s15, s18, s16
          slope = (y - y1) / (x - x1);
   b57e0:	ee78 7ae7 	vsubpl.f32	s15, s17, s15
          slope = (y1 - y) / (x1 - x);
   b57e4:	eec7 6a8a 	vdivmi.f32	s13, s15, s20
          slope = (y - y1) / (x - x1);
   b57e8:	bf58      	it	pl
   b57ea:	eec7 6a27 	vdivpl.f32	s13, s14, s15
        if(closestIndex == 0){
   b57ee:	42b7      	cmp	r7, r6
          pointSide = (-1 / slope * (currentCheckpoint.at(closestIndex + 1).lat - x) + y) > currentCheckpoint.at(closestIndex + 1).lon;
   b57f0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b57f4:	eec7 9aa6 	vdiv.f32	s19, s15, s13
        if(closestIndex == 0){
   b57f8:	d14c      	bne.n	b5894 <loop+0x3cc>
          pointSide = (-1 / slope * (currentCheckpoint.at(closestIndex + 1).lat - x) + y) > currentCheckpoint.at(closestIndex + 1).lon;
   b57fa:	1c69      	adds	r1, r5, #1
   b57fc:	a807      	add	r0, sp, #28
   b57fe:	f7fe ff25 	bl	b464c <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj>
   b5802:	ed90 0a00 	vldr	s0, [r0]
   b5806:	edd0 7a01 	vldr	s15, [r0, #4]
   b580a:	ee70 8a68 	vsub.f32	s17, s0, s17
   b580e:	eeb0 7a48 	vmov.f32	s14, s16
   b5812:	eea8 7aa9 	vfma.f32	s14, s17, s19
          nearestSide = (-1 / slope * (currentCheckpoint.at(closestIndex).lat - x) + y) > currentCheckpoint.at(closestIndex).lon;
   b5816:	eeaa 8a29 	vfma.f32	s16, s20, s19
          pointSide = (-1 / slope * (currentCheckpoint.at(closestIndex + 1).lat - x) + y) > currentCheckpoint.at(closestIndex + 1).lon;
   b581a:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b581e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          nearestSide = (-1 / slope * (currentCheckpoint.at(closestIndex).lat - x) + y) > currentCheckpoint.at(closestIndex).lon;
   b5822:	eeb4 8ac9 	vcmpe.f32	s16, s18
          pointSide = (-1 / slope * (currentCheckpoint.at(closestIndex + 1).lat - x) + y) > currentCheckpoint.at(closestIndex + 1).lon;
   b5826:	bfcc      	ite	gt
   b5828:	2301      	movgt	r3, #1
   b582a:	2300      	movle	r3, #0
          nearestSide = (-1 / slope * (currentCheckpoint.at(closestIndex).lat - x) + y) > currentCheckpoint.at(closestIndex).lon;
   b582c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          if(pointSide == nearestSide){
   b5830:	bfcc      	ite	gt
   b5832:	2201      	movgt	r2, #1
   b5834:	2200      	movle	r2, #0
   b5836:	429a      	cmp	r2, r3
   b5838:	f000 808e 	beq.w	b5958 <loop+0x490>
            secondClosestIndex = 1;
   b583c:	2601      	movs	r6, #1
          if(closestIndex < secondClosestIndex){
   b583e:	42ae      	cmp	r6, r5
   b5840:	dd54      	ble.n	b58ec <loop+0x424>
            segmentPos = currentRailway.distances.at(closestIndex) / (currentRailway.distances.at(closestIndex) + currentRailway.distances.at(secondClosestIndex));
   b5842:	4629      	mov	r1, r5
   b5844:	a826      	add	r0, sp, #152	; 0x98
   b5846:	f7ff f885 	bl	b4954 <_ZNSt6vectorIfSaIfEE2atEj>
   b584a:	4631      	mov	r1, r6
   b584c:	edd0 8a00 	vldr	s17, [r0]
   b5850:	a826      	add	r0, sp, #152	; 0x98
   b5852:	f7ff f87f 	bl	b4954 <_ZNSt6vectorIfSaIfEE2atEj>
   b5856:	edd0 7a00 	vldr	s15, [r0]
   b585a:	ee78 7aa7 	vadd.f32	s15, s17, s15
            segmentPos *= currentRailway.scalers.at(closestIndex);
   b585e:	4629      	mov	r1, r5
            segmentPos = currentRailway.distances.at(closestIndex) / (currentRailway.distances.at(closestIndex) + currentRailway.distances.at(secondClosestIndex));
   b5860:	ee88 9aa7 	vdiv.f32	s18, s17, s15
            segmentPos *= currentRailway.scalers.at(closestIndex);
   b5864:	a829      	add	r0, sp, #164	; 0xa4
   b5866:	f7ff f887 	bl	b4978 <_ZNSt6vectorIiSaIiEE2atEj>
            for(int i = 0; i < closestIndex; i++){
   b586a:	2600      	movs	r6, #0
            segmentPos *= currentRailway.scalers.at(closestIndex);
   b586c:	ed90 8a00 	vldr	s16, [r0]
   b5870:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   b5874:	ee28 8a09 	vmul.f32	s16, s16, s18
            for(int i = 0; i < closestIndex; i++){
   b5878:	42ae      	cmp	r6, r5
   b587a:	da60      	bge.n	b593e <loop+0x476>
              segmentPos += currentRailway.scalers.at(i);
   b587c:	4631      	mov	r1, r6
   b587e:	a829      	add	r0, sp, #164	; 0xa4
   b5880:	f7ff f87a 	bl	b4978 <_ZNSt6vectorIiSaIiEE2atEj>
   b5884:	edd0 7a00 	vldr	s15, [r0]
   b5888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            for(int i = 0; i < closestIndex; i++){
   b588c:	3601      	adds	r6, #1
              segmentPos += currentRailway.scalers.at(i);
   b588e:	ee38 8a27 	vadd.f32	s16, s16, s15
            for(int i = 0; i < closestIndex; i++){
   b5892:	e7f1      	b.n	b5878 <loop+0x3b0>
          pointSide = (-1 / slope * (currentCheckpoint.at(closestIndex - 1).lat - x) + y) > currentCheckpoint.at(closestIndex - 1).lon;
   b5894:	1e6e      	subs	r6, r5, #1
   b5896:	4631      	mov	r1, r6
   b5898:	a807      	add	r0, sp, #28
   b589a:	f7fe fed7 	bl	b464c <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj>
   b589e:	ed90 0a00 	vldr	s0, [r0]
   b58a2:	edd0 7a01 	vldr	s15, [r0, #4]
   b58a6:	ee70 8a68 	vsub.f32	s17, s0, s17
   b58aa:	eeb0 7a48 	vmov.f32	s14, s16
   b58ae:	eea8 7aa9 	vfma.f32	s14, s17, s19
          if(closestIndex == checkpointCount - 1){
   b58b2:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
          nearestSide = (-1 / slope * (currentCheckpoint.at(closestIndex).lat - x) + y) > currentCheckpoint.at(closestIndex).lon;
   b58b6:	eeaa 8a29 	vfma.f32	s16, s20, s19
          pointSide = (-1 / slope * (currentCheckpoint.at(closestIndex - 1).lat - x) + y) > currentCheckpoint.at(closestIndex - 1).lon;
   b58ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b58be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          nearestSide = (-1 / slope * (currentCheckpoint.at(closestIndex).lat - x) + y) > currentCheckpoint.at(closestIndex).lon;
   b58c2:	eeb4 8ac9 	vcmpe.f32	s16, s18
          pointSide = (-1 / slope * (currentCheckpoint.at(closestIndex - 1).lat - x) + y) > currentCheckpoint.at(closestIndex - 1).lon;
   b58c6:	bfcc      	ite	gt
   b58c8:	2201      	movgt	r2, #1
   b58ca:	2200      	movle	r2, #0
          nearestSide = (-1 / slope * (currentCheckpoint.at(closestIndex).lat - x) + y) > currentCheckpoint.at(closestIndex).lon;
   b58cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b58d0:	bfcc      	ite	gt
   b58d2:	2301      	movgt	r3, #1
   b58d4:	2300      	movle	r3, #0
          if(closestIndex == checkpointCount - 1){
   b58d6:	42a9      	cmp	r1, r5
   b58d8:	d104      	bne.n	b58e4 <loop+0x41c>
            if(pointSide == nearestSide){
   b58da:	429a      	cmp	r2, r3
   b58dc:	d03c      	beq.n	b5958 <loop+0x490>
              secondClosestIndex = checkpointCount - 2;
   b58de:	f1a9 0602 	sub.w	r6, r9, #2
        if(validTrain){
   b58e2:	e7ac      	b.n	b583e <loop+0x376>
            if(pointSide == nearestSide){
   b58e4:	429a      	cmp	r2, r3
              secondClosestIndex = closestIndex + 1;
   b58e6:	bf08      	it	eq
   b58e8:	1c6e      	addeq	r6, r5, #1
        if(validTrain){
   b58ea:	e7a8      	b.n	b583e <loop+0x376>
            segmentPos = currentRailway.distances.at(secondClosestIndex) / (currentRailway.distances.at(closestIndex) + currentRailway.distances.at(secondClosestIndex));
   b58ec:	4631      	mov	r1, r6
   b58ee:	a826      	add	r0, sp, #152	; 0x98
   b58f0:	f7ff f830 	bl	b4954 <_ZNSt6vectorIfSaIfEE2atEj>
   b58f4:	4629      	mov	r1, r5
   b58f6:	edd0 8a00 	vldr	s17, [r0]
   b58fa:	a826      	add	r0, sp, #152	; 0x98
   b58fc:	f7ff f82a 	bl	b4954 <_ZNSt6vectorIfSaIfEE2atEj>
   b5900:	edd0 7a00 	vldr	s15, [r0]
   b5904:	ee78 7aa7 	vadd.f32	s15, s17, s15
            segmentPos *= currentRailway.scalers.at(secondClosestIndex);
   b5908:	4631      	mov	r1, r6
            segmentPos = currentRailway.distances.at(secondClosestIndex) / (currentRailway.distances.at(closestIndex) + currentRailway.distances.at(secondClosestIndex));
   b590a:	ee88 9aa7 	vdiv.f32	s18, s17, s15
            segmentPos *= currentRailway.scalers.at(secondClosestIndex);
   b590e:	a829      	add	r0, sp, #164	; 0xa4
   b5910:	f7ff f832 	bl	b4978 <_ZNSt6vectorIiSaIiEE2atEj>
            for(int i = 0; i < secondClosestIndex; i++){
   b5914:	2500      	movs	r5, #0
            segmentPos *= currentRailway.scalers.at(secondClosestIndex);
   b5916:	ed90 8a00 	vldr	s16, [r0]
   b591a:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   b591e:	ee28 8a09 	vmul.f32	s16, s16, s18
            for(int i = 0; i < secondClosestIndex; i++){
   b5922:	42ae      	cmp	r6, r5
   b5924:	dd0b      	ble.n	b593e <loop+0x476>
              segmentPos += currentRailway.scalers.at(i);
   b5926:	4629      	mov	r1, r5
   b5928:	a829      	add	r0, sp, #164	; 0xa4
   b592a:	f7ff f825 	bl	b4978 <_ZNSt6vectorIiSaIiEE2atEj>
   b592e:	edd0 7a00 	vldr	s15, [r0]
   b5932:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            for(int i = 0; i < secondClosestIndex; i++){
   b5936:	3501      	adds	r5, #1
              segmentPos += currentRailway.scalers.at(i);
   b5938:	ee38 8a27 	vadd.f32	s16, s16, s15
            for(int i = 0; i < secondClosestIndex; i++){
   b593c:	e7f1      	b.n	b5922 <loop+0x45a>
  { return __builtin_floorf(__x); }
   b593e:	eeb0 0a48 	vmov.f32	s0, s16
   b5942:	f003 fe4f 	bl	b95e4 <floorf>
          currentRailway.outputs.at((int)floor(segmentPos)) = trainDir;
   b5946:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b594a:	a82c      	add	r0, sp, #176	; 0xb0
   b594c:	ee17 1a90 	vmov	r1, s15
   b5950:	f7ff f812 	bl	b4978 <_ZNSt6vectorIiSaIiEE2atEj>
   b5954:	9b03      	ldr	r3, [sp, #12]
   b5956:	6003      	str	r3, [r0, #0]
        String nextStation = train.key("nextStaNm").valueString();
   b5958:	a816      	add	r0, sp, #88	; 0x58
   b595a:	f002 fd81 	bl	b8460 <_ZN6StringD1Ev>
        JsonReference train = parser.getReference().key("ctatt").key("route").index(0).key("train").index(count);
   b595e:	a80a      	add	r0, sp, #40	; 0x28
        count++;
   b5960:	f10b 0b01 	add.w	fp, fp, #1
        JsonReference train = parser.getReference().key("ctatt").key("route").index(0).key("train").index(count);
   b5964:	f000 f9a4 	bl	b5cb0 <_ZN13JsonReferenceD1Ev>
   b5968:	e614      	b.n	b5594 <loop+0xcc>
   b596a:	a816      	add	r0, sp, #88	; 0x58
   b596c:	f002 fd78 	bl	b8460 <_ZN6StringD1Ev>
   b5970:	a80a      	add	r0, sp, #40	; 0x28
   b5972:	f000 f99d 	bl	b5cb0 <_ZN13JsonReferenceD1Ev>
      Wire.beginTransmission(sequenceArr[j]);
   b5976:	f003 fb97 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b597a:	9b02      	ldr	r3, [sp, #8]
   b597c:	f853 1b04 	ldr.w	r1, [r3], #4
   b5980:	9302      	str	r3, [sp, #8]
   b5982:	f002 fbb1 	bl	b80e8 <_ZN7TwoWire17beginTransmissionEi>
      for(int i = 0; i < currentRailway.outputs.size(); i++){
   b5986:	2500      	movs	r5, #0
        currentRailway.outputs.at(i) = 0;
   b5988:	462e      	mov	r6, r5
   b598a:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
   b598e:	1a9b      	subs	r3, r3, r2
      for(int i = 0; i < currentRailway.outputs.size(); i++){
   b5990:	ebb5 0fa3 	cmp.w	r5, r3, asr #2
   b5994:	d212      	bcs.n	b59bc <loop+0x4f4>
        Wire.write((char)currentRailway.outputs.at(i) + '0');
   b5996:	f003 fb87 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b599a:	4629      	mov	r1, r5
   b599c:	4607      	mov	r7, r0
   b599e:	a82c      	add	r0, sp, #176	; 0xb0
   b59a0:	f7fe ffea 	bl	b4978 <_ZNSt6vectorIiSaIiEE2atEj>
   b59a4:	7801      	ldrb	r1, [r0, #0]
   b59a6:	4638      	mov	r0, r7
   b59a8:	3130      	adds	r1, #48	; 0x30
   b59aa:	f7fe fbf3 	bl	b4194 <_ZN7TwoWire5writeEi.isra.0>
        currentRailway.outputs.at(i) = 0;
   b59ae:	4629      	mov	r1, r5
   b59b0:	a82c      	add	r0, sp, #176	; 0xb0
   b59b2:	f7fe ffe1 	bl	b4978 <_ZNSt6vectorIiSaIiEE2atEj>
      for(int i = 0; i < currentRailway.outputs.size(); i++){
   b59b6:	3501      	adds	r5, #1
        currentRailway.outputs.at(i) = 0;
   b59b8:	6006      	str	r6, [r0, #0]
      for(int i = 0; i < currentRailway.outputs.size(); i++){
   b59ba:	e7e6      	b.n	b598a <loop+0x4c2>
      Wire.endTransmission();
   b59bc:	f003 fb74 	bl	b90a8 <_Z19__fetch_global_Wirev>
   b59c0:	f002 fb99 	bl	b80f6 <_ZN7TwoWire15endTransmissionEv>
      }
   b59c4:	a807      	add	r0, sp, #28
   b59c6:	f7fe fe37 	bl	b4638 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      Railway currentRailway = railways.at(j);
   b59ca:	a81e      	add	r0, sp, #120	; 0x78
   b59cc:	f7fe feaf 	bl	b472e <_ZN7RailwayD1Ev>
    for(int j = 0; j < railways.size(); j++){
   b59d0:	3401      	adds	r4, #1
   b59d2:	e58d      	b.n	b54f0 <loop+0x28>
  delay(5000);
   b59d4:	f241 3088 	movw	r0, #5000	; 0x1388
   b59d8:	f001 f8aa 	bl	b6b30 <delay>
  Serial.println();
   b59dc:	f003 fa16 	bl	b8e0c <_Z16_fetch_usbserialv>
}
   b59e0:	b039      	add	sp, #228	; 0xe4
   b59e2:	ecbd 8b06 	vpop	{d8-d10}
   b59e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Serial.println();
   b59ea:	f002 bcfe 	b.w	b83ea <_ZN5Print7printlnEv>
   b59ee:	bf00      	nop

000b59f0 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b59f0:	b510      	push	{r4, lr}
   b59f2:	4604      	mov	r4, r0
   b59f4:	f003 f93c 	bl	b8c70 <_ZN9TCPClientC1Ev>
{

}
   b59f8:	4620      	mov	r0, r4
   b59fa:	bd10      	pop	{r4, pc}

000b59fc <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b59fc:	b538      	push	{r3, r4, r5, lr}
   b59fe:	4604      	mov	r4, r0
   b5a00:	4615      	mov	r5, r2
    client.print(aHeaderName);
   b5a02:	f002 fceb 	bl	b83dc <_ZN5Print5printEPKc>
    client.print(": ");
   b5a06:	4905      	ldr	r1, [pc, #20]	; (b5a1c <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   b5a08:	4620      	mov	r0, r4
   b5a0a:	f002 fce7 	bl	b83dc <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b5a0e:	4629      	mov	r1, r5
   b5a10:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b5a12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
   b5a16:	f002 bcf4 	b.w	b8402 <_ZN5Print7printlnEPKc>
   b5a1a:	bf00      	nop
   b5a1c:	000bc51e 	.word	0x000bc51e

000b5a20 <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b5a20:	b538      	push	{r3, r4, r5, lr}
   b5a22:	4605      	mov	r5, r0
   b5a24:	4614      	mov	r4, r2
    client.print(aHeaderName);
   b5a26:	f002 fcd9 	bl	b83dc <_ZN5Print5printEPKc>
    client.print(": ");
   b5a2a:	490b      	ldr	r1, [pc, #44]	; (b5a58 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   b5a2c:	4628      	mov	r0, r5
   b5a2e:	f002 fcd5 	bl	b83dc <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
   b5a32:	2c00      	cmp	r4, #0
   b5a34:	da0d      	bge.n	b5a52 <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
   b5a36:	212d      	movs	r1, #45	; 0x2d
   b5a38:	4628      	mov	r0, r5
   b5a3a:	f002 fcd3 	bl	b83e4 <_ZN5Print5printEc>
            val = -n;
   b5a3e:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b5a40:	4628      	mov	r0, r5
   b5a42:	220a      	movs	r2, #10
   b5a44:	f002 fce7 	bl	b8416 <_ZN5Print11printNumberEmh>
        n += println();
   b5a48:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b5a4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5a4e:	f002 bccc 	b.w	b83ea <_ZN5Print7printlnEv>
            val = n;
   b5a52:	4621      	mov	r1, r4
   b5a54:	e7f4      	b.n	b5a40 <_ZN10HttpClient10sendHeaderEPKci+0x20>
   b5a56:	bf00      	nop
   b5a58:	000bc51e 	.word	0x000bc51e

000b5a5c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b5a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5a60:	460e      	mov	r6, r1
   b5a62:	b091      	sub	sp, #68	; 0x44
   b5a64:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b5a66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5a6a:	6013      	str	r3, [r2, #0]
{
   b5a6c:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b5a6e:	2100      	movs	r1, #0
   b5a70:	4630      	mov	r0, r6
   b5a72:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b5a76:	4617      	mov	r7, r2
   b5a78:	f002 fdaa 	bl	b85d0 <_ZNK6String6equalsEPKc>
   b5a7c:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b5a80:	4603      	mov	r3, r0
   b5a82:	b998      	cbnz	r0, b5aac <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	const char * c_str() const { return buffer; }
   b5a84:	f1be 0f00 	cmp.w	lr, #0
   b5a88:	bf14      	ite	ne
   b5a8a:	4672      	movne	r2, lr
   b5a8c:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b5a8e:	6831      	ldr	r1, [r6, #0]
   b5a90:	b292      	uxth	r2, r2
   b5a92:	4620      	mov	r0, r4
   b5a94:	f002 feec 	bl	b8870 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b5a98:	1e05      	subs	r5, r0, #0
   b5a9a:	bf18      	it	ne
   b5a9c:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   b5a9e:	b9c5      	cbnz	r5, b5ad2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   b5aa0:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b5aa2:	b011      	add	sp, #68	; 0x44
   b5aa4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b5aa8:	f003 b898 	b.w	b8bdc <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b5aac:	4b76      	ldr	r3, [pc, #472]	; (b5c88 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
   b5aae:	930a      	str	r3, [sp, #40]	; 0x28
   b5ab0:	f106 0c14 	add.w	ip, r6, #20
   b5ab4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5ab8:	ad0b      	add	r5, sp, #44	; 0x2c
   b5aba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5abc:	f8dc 3000 	ldr.w	r3, [ip]
   b5ac0:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b5ac2:	fa1f f28e 	uxth.w	r2, lr
   b5ac6:	2300      	movs	r3, #0
   b5ac8:	a90a      	add	r1, sp, #40	; 0x28
   b5aca:	4620      	mov	r0, r4
   b5acc:	f002 ffb0 	bl	b8a30 <_ZN9TCPClient7connectE9IPAddresstm>
   b5ad0:	e7e2      	b.n	b5a98 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
   b5ad2:	4649      	mov	r1, r9
   b5ad4:	4620      	mov	r0, r4
   b5ad6:	f002 fc81 	bl	b83dc <_ZN5Print5printEPKc>
    client.print(" ");
   b5ada:	496c      	ldr	r1, [pc, #432]	; (b5c8c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   b5adc:	4620      	mov	r0, r4
   b5ade:	f002 fc7d 	bl	b83dc <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b5ae2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b5ae4:	4620      	mov	r0, r4
   b5ae6:	f002 fc79 	bl	b83dc <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b5aea:	4969      	ldr	r1, [pc, #420]	; (b5c90 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   b5aec:	4620      	mov	r0, r4
   b5aee:	f002 fc75 	bl	b83dc <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b5af2:	4968      	ldr	r1, [pc, #416]	; (b5c94 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
   b5af4:	4a68      	ldr	r2, [pc, #416]	; (b5c98 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
   b5af6:	4620      	mov	r0, r4
   b5af8:	f7ff ff80 	bl	b59fc <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b5afc:	2100      	movs	r1, #0
   b5afe:	4630      	mov	r0, r6
   b5b00:	f002 fd66 	bl	b85d0 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b5b04:	b920      	cbnz	r0, b5b10 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   b5b06:	6832      	ldr	r2, [r6, #0]
   b5b08:	4964      	ldr	r1, [pc, #400]	; (b5c9c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
   b5b0a:	4620      	mov	r0, r4
   b5b0c:	f7ff ff76 	bl	b59fc <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b5b10:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b5b14:	2100      	movs	r1, #0
   b5b16:	4650      	mov	r0, sl
   b5b18:	f002 fd5a 	bl	b85d0 <_ZNK6String6equalsEPKc>
   b5b1c:	b928      	cbnz	r0, b5b2a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
   b5b1e:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b5b20:	495f      	ldr	r1, [pc, #380]	; (b5ca0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
   b5b22:	4620      	mov	r0, r4
   b5b24:	f7ff ff7c 	bl	b5a20 <_ZN10HttpClient10sendHeaderEPKci>
   b5b28:	e006      	b.n	b5b38 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b5b2a:	495e      	ldr	r1, [pc, #376]	; (b5ca4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
   b5b2c:	4648      	mov	r0, r9
   b5b2e:	f004 fc2e 	bl	ba38e <strcmp>
   b5b32:	4602      	mov	r2, r0
   b5b34:	2800      	cmp	r0, #0
   b5b36:	d0f3      	beq.n	b5b20 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
   b5b38:	f1b8 0f00 	cmp.w	r8, #0
   b5b3c:	d00e      	beq.n	b5b5c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
   b5b3e:	f8d8 1000 	ldr.w	r1, [r8]
   b5b42:	b159      	cbz	r1, b5b5c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
   b5b44:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
   b5b48:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b5b4a:	b122      	cbz	r2, b5b56 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
   b5b4c:	f7ff ff56 	bl	b59fc <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b5b50:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
   b5b54:	e7f3      	b.n	b5b3e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
   b5b56:	f002 fc54 	bl	b8402 <_ZN5Print7printlnEPKc>
}
   b5b5a:	e7f9      	b.n	b5b50 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
   b5b5c:	4620      	mov	r0, r4
   b5b5e:	f002 fc44 	bl	b83ea <_ZN5Print7printlnEv>
    client.flush();
   b5b62:	4620      	mov	r0, r4
   b5b64:	f002 fde4 	bl	b8730 <_ZN9TCPClient5flushEv>
   b5b68:	2100      	movs	r1, #0
   b5b6a:	4650      	mov	r0, sl
   b5b6c:	f002 fd30 	bl	b85d0 <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b5b70:	b918      	cbnz	r0, b5b7a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
   b5b72:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b5b74:	4620      	mov	r0, r4
   b5b76:	f002 fc44 	bl	b8402 <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b5b7a:	f104 0a1c 	add.w	sl, r4, #28
   b5b7e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
   b5b82:	2100      	movs	r1, #0
   b5b84:	4650      	mov	r0, sl
   b5b86:	f004 fbbc 	bl	ba302 <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5b8a:	f000 fda9 	bl	b66e0 <HAL_Timer_Get_Milli_Seconds>
   b5b8e:	9001      	str	r0, [sp, #4]
   b5b90:	f000 fda6 	bl	b66e0 <HAL_Timer_Get_Milli_Seconds>
    bool error = false;
   b5b94:	f04f 0800 	mov.w	r8, #0
    unsigned int bufferPosition = 0;
   b5b98:	4646      	mov	r6, r8
    } while (client.connected() && !timeout && !error);
   b5b9a:	f241 3b88 	movw	fp, #5000	; 0x1388
        while (client.available()) {
   b5b9e:	4620      	mov	r0, r4
   b5ba0:	f002 ffc2 	bl	b8b28 <_ZN9TCPClient9availableEv>
   b5ba4:	b1e8      	cbz	r0, b5be2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x186>
            char c = client.read();
   b5ba6:	4620      	mov	r0, r4
   b5ba8:	f002 fda8 	bl	b86fc <_ZN9TCPClient4readEv>
   b5bac:	4681      	mov	r9, r0
   b5bae:	f000 fd97 	bl	b66e0 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b5bb2:	f242 73fe 	movw	r3, #10238	; 0x27fe
   b5bb6:	429e      	cmp	r6, r3
   b5bb8:	9001      	str	r0, [sp, #4]
   b5bba:	d804      	bhi.n	b5bc6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = c;
   b5bbc:	19a3      	adds	r3, r4, r6
            char c = client.read();
   b5bbe:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
   b5bc2:	3601      	adds	r6, #1
        while (client.available()) {
   b5bc4:	e7eb      	b.n	b5b9e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b5bc6:	f242 73ff 	movw	r3, #10239	; 0x27ff
   b5bca:	429e      	cmp	r6, r3
   b5bcc:	d1f9      	bne.n	b5bc2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b5bce:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
   b5bd2:	2200      	movs	r2, #0
   b5bd4:	f883 281b 	strb.w	r2, [r3, #2075]	; 0x81b
                client.stop();
   b5bd8:	4620      	mov	r0, r4
   b5bda:	f002 ffff 	bl	b8bdc <_ZN9TCPClient4stopEv>
                error = true;
   b5bde:	46a8      	mov	r8, r5
   b5be0:	e7ef      	b.n	b5bc2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b5be2:	19a3      	adds	r3, r4, r6
   b5be4:	7718      	strb	r0, [r3, #28]
   b5be6:	f000 fd7b 	bl	b66e0 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b5bea:	9b01      	ldr	r3, [sp, #4]
   b5bec:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b5bf0:	f1b8 0f00 	cmp.w	r8, #0
   b5bf4:	d104      	bne.n	b5c00 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
   b5bf6:	45d9      	cmp	r9, fp
   b5bf8:	d802      	bhi.n	b5c00 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
            delay(200);
   b5bfa:	20c8      	movs	r0, #200	; 0xc8
   b5bfc:	f000 ff98 	bl	b6b30 <delay>
    } while (client.connected() && !timeout && !error);
   b5c00:	4620      	mov	r0, r4
   b5c02:	f002 feb3 	bl	b896c <_ZN9TCPClient9connectedEv>
   b5c06:	b120      	cbz	r0, b5c12 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b5c08:	45d9      	cmp	r9, fp
   b5c0a:	d802      	bhi.n	b5c12 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b5c0c:	f1b8 0f00 	cmp.w	r8, #0
   b5c10:	d0c5      	beq.n	b5b9e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
    client.stop();
   b5c12:	4620      	mov	r0, r4
   b5c14:	f002 ffe2 	bl	b8bdc <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b5c18:	4651      	mov	r1, sl
   b5c1a:	a802      	add	r0, sp, #8
   b5c1c:	f002 fc6b 	bl	b84f6 <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b5c20:	230c      	movs	r3, #12
   b5c22:	2209      	movs	r2, #9
   b5c24:	a902      	add	r1, sp, #8
   b5c26:	a806      	add	r0, sp, #24
   b5c28:	f002 fcf6 	bl	b8618 <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b5c2c:	491e      	ldr	r1, [pc, #120]	; (b5ca8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x24c>)
   b5c2e:	a80a      	add	r0, sp, #40	; 0x28
   b5c30:	f002 fc61 	bl	b84f6 <_ZN6StringC1EPK19__FlashStringHelper>
   b5c34:	a90a      	add	r1, sp, #40	; 0x28
   b5c36:	a802      	add	r0, sp, #8
   b5c38:	f002 fceb 	bl	b8612 <_ZNK6String7indexOfERKS_>
   b5c3c:	4604      	mov	r4, r0
   b5c3e:	a80a      	add	r0, sp, #40	; 0x28
   b5c40:	f002 fc0e 	bl	b8460 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b5c44:	1c63      	adds	r3, r4, #1
   b5c46:	d108      	bne.n	b5c5a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fe>
    String statusCode = raw_response.substring(9,12);
   b5c48:	a806      	add	r0, sp, #24
   b5c4a:	f002 fc09 	bl	b8460 <_ZN6StringD1Ev>
    String raw_response(buffer);
   b5c4e:	a802      	add	r0, sp, #8
   b5c50:	f002 fc06 	bl	b8460 <_ZN6StringD1Ev>
}
   b5c54:	b011      	add	sp, #68	; 0x44
   b5c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aResponse.body = "";
   b5c5a:	1d3d      	adds	r5, r7, #4
   b5c5c:	4913      	ldr	r1, [pc, #76]	; (b5cac <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x250>)
   b5c5e:	4628      	mov	r0, r5
   b5c60:	f002 fc5d 	bl	b851e <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b5c64:	1d22      	adds	r2, r4, #4
   b5c66:	a902      	add	r1, sp, #8
   b5c68:	a80a      	add	r0, sp, #40	; 0x28
   b5c6a:	f002 fcf5 	bl	b8658 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b5c6e:	a90a      	add	r1, sp, #40	; 0x28
   b5c70:	4628      	mov	r0, r5
   b5c72:	f002 fc90 	bl	b8596 <_ZN6String6concatERKS_>
   b5c76:	a80a      	add	r0, sp, #40	; 0x28
   b5c78:	f002 fbf2 	bl	b8460 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b5c7c:	9806      	ldr	r0, [sp, #24]
   b5c7e:	f004 fb00 	bl	ba282 <atoi>
   b5c82:	6038      	str	r0, [r7, #0]
   b5c84:	e7e0      	b.n	b5c48 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ec>
   b5c86:	bf00      	nop
   b5c88:	000bc974 	.word	0x000bc974
   b5c8c:	000bcb83 	.word	0x000bcb83
   b5c90:	000bc6b8 	.word	0x000bc6b8
   b5c94:	000bc6ca 	.word	0x000bc6ca
   b5c98:	000bc6c4 	.word	0x000bc6c4
   b5c9c:	000bc6d5 	.word	0x000bc6d5
   b5ca0:	000bc6da 	.word	0x000bc6da
   b5ca4:	000bc6e9 	.word	0x000bc6e9
   b5ca8:	000bc6ee 	.word	0x000bc6ee
   b5cac:	000bc6f2 	.word	0x000bc6f2

000b5cb0 <_ZN13JsonReferenceD1Ev>:
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
}
   b5cb0:	4770      	bx	lr

000b5cb2 <_ZN13JsonReferenceD0Ev>:
JsonReference::~JsonReference() {
   b5cb2:	b510      	push	{r4, lr}
}
   b5cb4:	210c      	movs	r1, #12
JsonReference::~JsonReference() {
   b5cb6:	4604      	mov	r4, r0
}
   b5cb8:	f7fe f9f3 	bl	b40a2 <_ZdlPvj>
   b5cbc:	4620      	mov	r0, r4
   b5cbe:	bd10      	pop	{r4, pc}

000b5cc0 <_ZN10JsonBufferD1Ev>:
JsonBuffer::~JsonBuffer() {
   b5cc0:	b510      	push	{r4, lr}
   b5cc2:	4b05      	ldr	r3, [pc, #20]	; (b5cd8 <_ZN10JsonBufferD1Ev+0x18>)
   b5cc4:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b5cc6:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b5cc8:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b5cca:	b91b      	cbnz	r3, b5cd4 <_ZN10JsonBufferD1Ev+0x14>
   b5ccc:	6840      	ldr	r0, [r0, #4]
   b5cce:	b108      	cbz	r0, b5cd4 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b5cd0:	f000 feee 	bl	b6ab0 <free>
}
   b5cd4:	4620      	mov	r0, r4
   b5cd6:	bd10      	pop	{r4, pc}
   b5cd8:	000bc700 	.word	0x000bc700

000b5cdc <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b5cdc:	b510      	push	{r4, lr}
   b5cde:	4604      	mov	r4, r0
}
   b5ce0:	f7ff ffee 	bl	b5cc0 <_ZN10JsonBufferD1Ev>
   b5ce4:	4620      	mov	r0, r4
   b5ce6:	2114      	movs	r1, #20
   b5ce8:	f7fe f9db 	bl	b40a2 <_ZdlPvj>
   b5cec:	4620      	mov	r0, r4
   b5cee:	bd10      	pop	{r4, pc}

000b5cf0 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b5cf0:	b510      	push	{r4, lr}
   b5cf2:	4b07      	ldr	r3, [pc, #28]	; (b5d10 <_ZN10JsonParserD1Ev+0x20>)
   b5cf4:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b5cf6:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b5cf8:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b5cfa:	b91b      	cbnz	r3, b5d04 <_ZN10JsonParserD1Ev+0x14>
   b5cfc:	6940      	ldr	r0, [r0, #20]
   b5cfe:	b108      	cbz	r0, b5d04 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b5d00:	f000 fed6 	bl	b6ab0 <free>
JsonParser::~JsonParser() {
   b5d04:	4620      	mov	r0, r4
   b5d06:	f7ff ffdb 	bl	b5cc0 <_ZN10JsonBufferD1Ev>
}
   b5d0a:	4620      	mov	r0, r4
   b5d0c:	bd10      	pop	{r4, pc}
   b5d0e:	bf00      	nop
   b5d10:	000bc710 	.word	0x000bc710

000b5d14 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b5d14:	b510      	push	{r4, lr}
   b5d16:	4604      	mov	r4, r0
}
   b5d18:	f7ff ffea 	bl	b5cf0 <_ZN10JsonParserD1Ev>
   b5d1c:	4620      	mov	r0, r4
   b5d1e:	212c      	movs	r1, #44	; 0x2c
   b5d20:	f7fe f9bf 	bl	b40a2 <_ZdlPvj>
   b5d24:	4620      	mov	r0, r4
   b5d26:	bd10      	pop	{r4, pc}

000b5d28 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b5d28:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b5d2a:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b5d2c:	4604      	mov	r4, r0
   b5d2e:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b5d30:	b10b      	cbz	r3, b5d36 <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b5d32:	2000      	movs	r0, #0
}
   b5d34:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b5d36:	6840      	ldr	r0, [r0, #4]
   b5d38:	b138      	cbz	r0, b5d4a <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b5d3a:	f000 fec1 	bl	b6ac0 <realloc>
		if (newBuffer) {
   b5d3e:	2800      	cmp	r0, #0
   b5d40:	d0f7      	beq.n	b5d32 <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b5d42:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b5d46:	2001      	movs	r0, #1
   b5d48:	e7f4      	b.n	b5d34 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b5d4a:	4608      	mov	r0, r1
   b5d4c:	f000 fea8 	bl	b6aa0 <malloc>
   b5d50:	e7f5      	b.n	b5d3e <_ZN10JsonBuffer8allocateEj+0x16>

000b5d52 <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b5d52:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b5d54:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b5d56:	460e      	mov	r6, r1
   b5d58:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b5d5a:	18d1      	adds	r1, r2, r3
   b5d5c:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b5d5e:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b5d60:	b172      	cbz	r2, b5d80 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b5d62:	6882      	ldr	r2, [r0, #8]
   b5d64:	428a      	cmp	r2, r1
   b5d66:	d30b      	bcc.n	b5d80 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b5d68:	6860      	ldr	r0, [r4, #4]
   b5d6a:	68e3      	ldr	r3, [r4, #12]
   b5d6c:	462a      	mov	r2, r5
   b5d6e:	4631      	mov	r1, r6
   b5d70:	4418      	add	r0, r3
   b5d72:	f004 fa9e 	bl	ba2b2 <memcpy>
	offset += dataLen;
   b5d76:	68e2      	ldr	r2, [r4, #12]
   b5d78:	442a      	add	r2, r5
   b5d7a:	60e2      	str	r2, [r4, #12]
	return true;
   b5d7c:	2001      	movs	r0, #1
}
   b5d7e:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b5d80:	4620      	mov	r0, r4
   b5d82:	f7ff ffd1 	bl	b5d28 <_ZN10JsonBuffer8allocateEj>
   b5d86:	2800      	cmp	r0, #0
   b5d88:	d1ee      	bne.n	b5d68 <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b5d8a:	e7f8      	b.n	b5d7e <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b5d8c <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b5d8c:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b5d8e:	2100      	movs	r1, #0
   b5d90:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b5d92:	b123      	cbz	r3, b5d9e <_ZN10JsonBuffer5clearEv+0x12>
   b5d94:	6882      	ldr	r2, [r0, #8]
   b5d96:	b112      	cbz	r2, b5d9e <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b5d98:	4618      	mov	r0, r3
   b5d9a:	f004 bab2 	b.w	ba302 <memset>
}
   b5d9e:	4770      	bx	lr

000b5da0 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b5da0:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b5da2:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b5da6:	2200      	movs	r2, #0
   b5da8:	60c2      	str	r2, [r0, #12]
   b5daa:	2201      	movs	r2, #1
   b5dac:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b5dae:	6143      	str	r3, [r0, #20]
   b5db0:	4a02      	ldr	r2, [pc, #8]	; (b5dbc <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b5db2:	9b02      	ldr	r3, [sp, #8]
   b5db4:	6002      	str	r2, [r0, #0]
   b5db6:	61c3      	str	r3, [r0, #28]
}
   b5db8:	bd10      	pop	{r4, pc}
   b5dba:	bf00      	nop
   b5dbc:	000bc710 	.word	0x000bc710

000b5dc0 <_ZNK10JsonParser12getReferenceEv>:
	if (tokens < tokensEnd) {
   b5dc0:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   b5dc4:	429a      	cmp	r2, r3
   b5dc6:	4b04      	ldr	r3, [pc, #16]	; (b5dd8 <_ZNK10JsonParser12getReferenceEv+0x18>)

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b5dc8:	bf38      	it	cc
   b5dca:	6082      	strcc	r2, [r0, #8]
   b5dcc:	e9c0 3100 	strd	r3, r1, [r0]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b5dd0:	bf24      	itt	cs
   b5dd2:	2300      	movcs	r3, #0
   b5dd4:	6083      	strcs	r3, [r0, #8]
}
   b5dd6:	4770      	bx	lr
   b5dd8:	000bc720 	.word	0x000bc720

000b5ddc <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b5ddc:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b5dde:	6813      	ldr	r3, [r2, #0]
   b5de0:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b5de2:	6813      	ldr	r3, [r2, #0]
   b5de4:	f103 0410 	add.w	r4, r3, #16
   b5de8:	6014      	str	r4, [r2, #0]
   b5dea:	6986      	ldr	r6, [r0, #24]
   b5dec:	42b4      	cmp	r4, r6
   b5dee:	d20a      	bcs.n	b5e06 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b5df0:	699b      	ldr	r3, [r3, #24]
   b5df2:	688c      	ldr	r4, [r1, #8]
   b5df4:	42a3      	cmp	r3, r4
   b5df6:	da01      	bge.n	b5dfc <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b5df8:	42ab      	cmp	r3, r5
   b5dfa:	ddf2      	ble.n	b5de2 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b5dfc:	42a3      	cmp	r3, r4
   b5dfe:	bfcc      	ite	gt
   b5e00:	2000      	movgt	r0, #0
   b5e02:	2001      	movle	r0, #1
   b5e04:	e000      	b.n	b5e08 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b5e06:	2000      	movs	r0, #0
}
   b5e08:	bd70      	pop	{r4, r5, r6, pc}

000b5e0a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b5e0a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5e0e:	9d08      	ldr	r5, [sp, #32]
   b5e10:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b5e12:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b5e16:	4604      	mov	r4, r0
   b5e18:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b5e1a:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b5e1c:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b5e1e:	9801      	ldr	r0, [sp, #4]
   b5e20:	69a3      	ldr	r3, [r4, #24]
   b5e22:	4283      	cmp	r3, r0
   b5e24:	d91a      	bls.n	b5e5c <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b5e26:	6882      	ldr	r2, [r0, #8]
   b5e28:	688b      	ldr	r3, [r1, #8]
   b5e2a:	429a      	cmp	r2, r3
   b5e2c:	da16      	bge.n	b5e5c <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b5e2e:	42ae      	cmp	r6, r5
   b5e30:	d10b      	bne.n	b5e4a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b5e32:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b5e34:	aa01      	add	r2, sp, #4
   b5e36:	4620      	mov	r0, r4
   b5e38:	f7ff ffd0 	bl	b5ddc <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b5e3c:	b128      	cbz	r0, b5e4a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b5e3e:	9b01      	ldr	r3, [sp, #4]
   b5e40:	f8c8 3000 	str.w	r3, [r8]
}
   b5e44:	b002      	add	sp, #8
   b5e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b5e4a:	aa01      	add	r2, sp, #4
   b5e4c:	4620      	mov	r0, r4
   b5e4e:	f7ff ffc5 	bl	b5ddc <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b5e52:	4620      	mov	r0, r4
		index++;
   b5e54:	3601      	adds	r6, #1
		skipObject(container, token);
   b5e56:	f7ff ffc1 	bl	b5ddc <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b5e5a:	e7e0      	b.n	b5e1e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b5e5c:	2000      	movs	r0, #0
   b5e5e:	e7f1      	b.n	b5e44 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b5e60 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>:
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b5e60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5e62:	461f      	mov	r7, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b5e64:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b5e68:	4604      	mov	r4, r0
   b5e6a:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b5e6c:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b5e6e:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b5e70:	9b01      	ldr	r3, [sp, #4]
   b5e72:	69a2      	ldr	r2, [r4, #24]
   b5e74:	429a      	cmp	r2, r3
   b5e76:	d90f      	bls.n	b5e98 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
   b5e78:	6898      	ldr	r0, [r3, #8]
   b5e7a:	688a      	ldr	r2, [r1, #8]
   b5e7c:	4290      	cmp	r0, r2
   b5e7e:	da0b      	bge.n	b5e98 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
		if (desiredIndex == index) {
   b5e80:	42b5      	cmp	r5, r6
   b5e82:	d103      	bne.n	b5e8c <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x2c>
			value = token;
   b5e84:	603b      	str	r3, [r7, #0]
			return true;
   b5e86:	2001      	movs	r0, #1
}
   b5e88:	b003      	add	sp, #12
   b5e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		skipObject(container, token);
   b5e8c:	aa01      	add	r2, sp, #4
   b5e8e:	4620      	mov	r0, r4
		index++;
   b5e90:	3501      	adds	r5, #1
		skipObject(container, token);
   b5e92:	f7ff ffa3 	bl	b5ddc <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b5e96:	e7eb      	b.n	b5e70 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x10>
	return false;
   b5e98:	2000      	movs	r0, #0
   b5e9a:	e7f5      	b.n	b5e88 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x28>

000b5e9c <_ZNK13JsonReference5indexEj>:
	else {
		return JsonReference(parser);
	}
}

JsonReference JsonReference::index(size_t index) const {
   b5e9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5e9e:	460d      	mov	r5, r1
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b5ea0:	6889      	ldr	r1, [r1, #8]
   b5ea2:	4e0a      	ldr	r6, [pc, #40]	; (b5ecc <_ZNK13JsonReference5indexEj+0x30>)
JsonReference JsonReference::index(size_t index) const {
   b5ea4:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b5ea6:	b161      	cbz	r1, b5ec2 <_ZNK13JsonReference5indexEj+0x26>
   b5ea8:	6868      	ldr	r0, [r5, #4]
   b5eaa:	ab01      	add	r3, sp, #4
   b5eac:	f7ff ffd8 	bl	b5e60 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>
   b5eb0:	b138      	cbz	r0, b5ec2 <_ZNK13JsonReference5indexEj+0x26>
		return JsonReference(parser, newToken);
   b5eb2:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b5eb4:	e9c4 6300 	strd	r6, r3, [r4]
   b5eb8:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b5eba:	60a3      	str	r3, [r4, #8]
	}
	else {
		return JsonReference(parser);
	}
}
   b5ebc:	4620      	mov	r0, r4
   b5ebe:	b002      	add	sp, #8
   b5ec0:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b5ec2:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b5ec4:	e9c4 6300 	strd	r6, r3, [r4]
   b5ec8:	2300      	movs	r3, #0
   b5eca:	e7f6      	b.n	b5eba <_ZNK13JsonReference5indexEj+0x1e>
   b5ecc:	000bc720 	.word	0x000bc720

000b5ed0 <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   b5ed0:	b510      	push	{r4, lr}
   b5ed2:	4604      	mov	r4, r0
	if (str) {
   b5ed4:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b5ed6:	460b      	mov	r3, r1
	if (str) {
   b5ed8:	b128      	cbz	r0, b5ee6 <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b5eda:	f002 fb60 	bl	b859e <_ZN6String6concatEc>
	}
	else {
		if (buf && length < (bufLen - 1)) {
			buf[length] = ch;
		}
		length++;
   b5ede:	68e3      	ldr	r3, [r4, #12]
   b5ee0:	3301      	adds	r3, #1
   b5ee2:	60e3      	str	r3, [r4, #12]
	}
}
   b5ee4:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b5ee6:	6860      	ldr	r0, [r4, #4]
   b5ee8:	2800      	cmp	r0, #0
   b5eea:	d0f8      	beq.n	b5ede <_ZN16JsonParserString6appendEc+0xe>
   b5eec:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b5ef0:	3a01      	subs	r2, #1
   b5ef2:	428a      	cmp	r2, r1
			buf[length] = ch;
   b5ef4:	bf88      	it	hi
   b5ef6:	5443      	strbhi	r3, [r0, r1]
   b5ef8:	e7f1      	b.n	b5ede <_ZN16JsonParserString6appendEc+0xe>

000b5efa <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b5efa:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b5efc:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b5efe:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5f00:	4608      	mov	r0, r1
		str.append((char)unicode);
   b5f02:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b5f04:	d804      	bhi.n	b5f10 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b5f06:	b003      	add	sp, #12
   b5f08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b5f0c:	f7ff bfe0 	b.w	b5ed0 <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b5f10:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b5f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b5f18:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b5f1c:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b5f20:	d207      	bcs.n	b5f32 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b5f22:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b5f26:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b5f28:	f7ff ffd2 	bl	b5ed0 <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b5f2c:	9801      	ldr	r0, [sp, #4]
   b5f2e:	4621      	mov	r1, r4
   b5f30:	e7e9      	b.n	b5f06 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b5f32:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b5f34:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b5f38:	9001      	str	r0, [sp, #4]
   b5f3a:	f7ff ffc9 	bl	b5ed0 <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b5f3e:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b5f42:	9801      	ldr	r0, [sp, #4]
   b5f44:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b5f48:	e7ee      	b.n	b5f28 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>
	...

000b5f4c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b5f4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b5f50:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b5f52:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b5f54:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b6024 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b5f58:	4680      	mov	r8, r0
   b5f5a:	460f      	mov	r7, r1
   b5f5c:	4615      	mov	r5, r2
			escape = false;
   b5f5e:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b5f60:	68b8      	ldr	r0, [r7, #8]
   b5f62:	42b0      	cmp	r0, r6
   b5f64:	dd5a      	ble.n	b601c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b5f66:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b5f6a:	5d99      	ldrb	r1, [r3, r6]
   b5f6c:	199a      	adds	r2, r3, r6
		if (escape) {
   b5f6e:	2c00      	cmp	r4, #0
   b5f70:	d04b      	beq.n	b600a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b5f72:	2975      	cmp	r1, #117	; 0x75
   b5f74:	d805      	bhi.n	b5f82 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b5f76:	296d      	cmp	r1, #109	; 0x6d
   b5f78:	d807      	bhi.n	b5f8a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b5f7a:	2962      	cmp	r1, #98	; 0x62
   b5f7c:	d01e      	beq.n	b5fbc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b5f7e:	2966      	cmp	r1, #102	; 0x66
   b5f80:	d01e      	beq.n	b5fc0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b5f82:	4628      	mov	r0, r5
   b5f84:	f7ff ffa4 	bl	b5ed0 <_ZN16JsonParserString6appendEc>
				break;
   b5f88:	e03d      	b.n	b6006 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b5f8a:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b5f8e:	2c07      	cmp	r4, #7
   b5f90:	d8f7      	bhi.n	b5f82 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b5f92:	f20f 0c08 	addw	ip, pc, #8
   b5f96:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b5f9a:	bf00      	nop
   b5f9c:	000b5fc5 	.word	0x000b5fc5
   b5fa0:	000b5f83 	.word	0x000b5f83
   b5fa4:	000b5f83 	.word	0x000b5f83
   b5fa8:	000b5f83 	.word	0x000b5f83
   b5fac:	000b5fc9 	.word	0x000b5fc9
   b5fb0:	000b5f83 	.word	0x000b5f83
   b5fb4:	000b5fcd 	.word	0x000b5fcd
   b5fb8:	000b5fd1 	.word	0x000b5fd1
				str.append('\b');
   b5fbc:	2108      	movs	r1, #8
   b5fbe:	e7e0      	b.n	b5f82 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b5fc0:	210c      	movs	r1, #12
   b5fc2:	e7de      	b.n	b5f82 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b5fc4:	210a      	movs	r1, #10
   b5fc6:	e7dc      	b.n	b5f82 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b5fc8:	210d      	movs	r1, #13
   b5fca:	e7da      	b.n	b5f82 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b5fcc:	2109      	movs	r1, #9
   b5fce:	e7d8      	b.n	b5f82 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b5fd0:	1d31      	adds	r1, r6, #4
   b5fd2:	4288      	cmp	r0, r1
   b5fd4:	dd17      	ble.n	b6006 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b5fd6:	a902      	add	r1, sp, #8
   b5fd8:	3304      	adds	r3, #4
   b5fda:	4433      	add	r3, r6
   b5fdc:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b5fde:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b5fe2:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b5fe6:	429a      	cmp	r2, r3
   b5fe8:	d1f9      	bne.n	b5fde <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b5fea:	aa01      	add	r2, sp, #4
   b5fec:	4651      	mov	r1, sl
					tmp[4] = 0;
   b5fee:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b5ff2:	f000 fd6d 	bl	b6ad0 <sscanf>
   b5ff6:	2801      	cmp	r0, #1
   b5ff8:	d105      	bne.n	b6006 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b5ffa:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b5ffe:	4629      	mov	r1, r5
   b6000:	f7ff ff7b 	bl	b5efa <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b6004:	3605      	adds	r6, #5
			escape = false;
   b6006:	2400      	movs	r4, #0
   b6008:	e004      	b.n	b6014 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b600a:	295c      	cmp	r1, #92	; 0x5c
   b600c:	d004      	beq.n	b6018 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b600e:	4628      	mov	r0, r5
   b6010:	f7ff ff5e 	bl	b5ed0 <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b6014:	3601      	adds	r6, #1
   b6016:	e7a3      	b.n	b5f60 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b6018:	2401      	movs	r4, #1
   b601a:	e7fb      	b.n	b6014 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b601c:	2001      	movs	r0, #1
   b601e:	b004      	add	sp, #16
   b6020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6024:	000bc6f3 	.word	0x000bc6f3

000b6028 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b6028:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b602a:	460c      	mov	r4, r1
   b602c:	4606      	mov	r6, r0
	result = "";
   b602e:	490c      	ldr	r1, [pc, #48]	; (b6060 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b6030:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b6032:	4615      	mov	r5, r2
	result = "";
   b6034:	f002 fa73 	bl	b851e <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b6038:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b603c:	1ac9      	subs	r1, r1, r3
   b603e:	3101      	adds	r1, #1
   b6040:	4628      	mov	r0, r5
   b6042:	f002 fa2b 	bl	b849c <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b6046:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b6048:	466a      	mov	r2, sp
   b604a:	4621      	mov	r1, r4
   b604c:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b604e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b6052:	9500      	str	r5, [sp, #0]
   b6054:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b6056:	f7ff ff79 	bl	b5f4c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b605a:	b004      	add	sp, #16
   b605c:	bd70      	pop	{r4, r5, r6, pc}
   b605e:	bf00      	nop
   b6060:	000bc6f2 	.word	0x000bc6f2

000b6064 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b6064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6068:	b089      	sub	sp, #36	; 0x24
   b606a:	4605      	mov	r5, r0
   b606c:	4688      	mov	r8, r1
	String keyName;
   b606e:	a804      	add	r0, sp, #16
   b6070:	4912      	ldr	r1, [pc, #72]	; (b60bc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b6072:	4616      	mov	r6, r2
   b6074:	4699      	mov	r9, r3
	String keyName;
   b6076:	f002 fa3e 	bl	b84f6 <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b607a:	2700      	movs	r7, #0
   b607c:	9700      	str	r7, [sp, #0]
   b607e:	464b      	mov	r3, r9
   b6080:	aa03      	add	r2, sp, #12
   b6082:	4641      	mov	r1, r8
   b6084:	4628      	mov	r0, r5
   b6086:	f7ff fec0 	bl	b5e0a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b608a:	4604      	mov	r4, r0
   b608c:	b170      	cbz	r0, b60ac <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b608e:	9903      	ldr	r1, [sp, #12]
   b6090:	aa04      	add	r2, sp, #16
   b6092:	4628      	mov	r0, r5
   b6094:	f7ff ffc8 	bl	b6028 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b6098:	4604      	mov	r4, r0
   b609a:	b908      	cbnz	r0, b60a0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b609c:	3701      	adds	r7, #1
   b609e:	e7ed      	b.n	b607c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b60a0:	4631      	mov	r1, r6
   b60a2:	a804      	add	r0, sp, #16
   b60a4:	f002 fa94 	bl	b85d0 <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b60a8:	2800      	cmp	r0, #0
   b60aa:	d0f7      	beq.n	b609c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b60ac:	a804      	add	r0, sp, #16
   b60ae:	f002 f9d7 	bl	b8460 <_ZN6StringD1Ev>
}
   b60b2:	4620      	mov	r0, r4
   b60b4:	b009      	add	sp, #36	; 0x24
   b60b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b60ba:	bf00      	nop
   b60bc:	000bc6f2 	.word	0x000bc6f2

000b60c0 <_ZNK13JsonReference3keyEPKc>:
JsonReference JsonReference::key(const char *name) const {
   b60c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b60c2:	460d      	mov	r5, r1
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b60c4:	6889      	ldr	r1, [r1, #8]
   b60c6:	4e0a      	ldr	r6, [pc, #40]	; (b60f0 <_ZNK13JsonReference3keyEPKc+0x30>)
JsonReference JsonReference::key(const char *name) const {
   b60c8:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b60ca:	b161      	cbz	r1, b60e6 <_ZNK13JsonReference3keyEPKc+0x26>
   b60cc:	6868      	ldr	r0, [r5, #4]
   b60ce:	ab01      	add	r3, sp, #4
   b60d0:	f7ff ffc8 	bl	b6064 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b60d4:	b138      	cbz	r0, b60e6 <_ZNK13JsonReference3keyEPKc+0x26>
		return JsonReference(parser, newToken);
   b60d6:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b60d8:	e9c4 6300 	strd	r6, r3, [r4]
   b60dc:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b60de:	60a3      	str	r3, [r4, #8]
}
   b60e0:	4620      	mov	r0, r4
   b60e2:	b002      	add	sp, #8
   b60e4:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b60e6:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b60e8:	e9c4 6300 	strd	r6, r3, [r4]
   b60ec:	2300      	movs	r3, #0
   b60ee:	e7f6      	b.n	b60de <_ZNK13JsonReference3keyEPKc+0x1e>
   b60f0:	000bc720 	.word	0x000bc720

000b60f4 <_ZNK13JsonReference11valueStringEv>:
String JsonReference::valueString() const {
   b60f4:	b538      	push	{r3, r4, r5, lr}
   b60f6:	460d      	mov	r5, r1
	String result;
   b60f8:	4905      	ldr	r1, [pc, #20]	; (b6110 <_ZNK13JsonReference11valueStringEv+0x1c>)
String JsonReference::valueString() const {
   b60fa:	4604      	mov	r4, r0
	String result;
   b60fc:	f002 f9fb 	bl	b84f6 <_ZN6StringC1EPK19__FlashStringHelper>
	 * There are also type-specific versions like valueBool that return the value, instead of having to pass an object
	 * to hold the value, as in this call.
	 */
	template<class T>
	bool value(T &result) const {
		if (token && parser->getTokenValue(token, result)) {
   b6100:	68a9      	ldr	r1, [r5, #8]
   b6102:	b119      	cbz	r1, b610c <_ZNK13JsonReference11valueStringEv+0x18>
   b6104:	6868      	ldr	r0, [r5, #4]
   b6106:	4622      	mov	r2, r4
   b6108:	f7ff ff8e 	bl	b6028 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
}
   b610c:	4620      	mov	r0, r4
   b610e:	bd38      	pop	{r3, r4, r5, pc}
   b6110:	000bc6f2 	.word	0x000bc6f2

000b6114 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b6114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b6118:	6844      	ldr	r4, [r0, #4]
   b611a:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b611e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b6122:	f8d0 e000 	ldr.w	lr, [r0]
   b6126:	4596      	cmp	lr, r2
   b6128:	f080 81b9 	bcs.w	b649e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b612c:	f811 800e 	ldrb.w	r8, [r1, lr]
   b6130:	f1b8 0f00 	cmp.w	r8, #0
   b6134:	f000 81b3 	beq.w	b649e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b6138:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b613c:	f000 8098 	beq.w	b6270 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b6140:	d833      	bhi.n	b61aa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b6142:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b6146:	f000 80a6 	beq.w	b6296 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b614a:	d810      	bhi.n	b616e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b614c:	f1a8 0809 	sub.w	r8, r8, #9
   b6150:	fa5f f888 	uxtb.w	r8, r8
   b6154:	f1b8 0f17 	cmp.w	r8, #23
   b6158:	d80d      	bhi.n	b6176 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b615a:	4d9f      	ldr	r5, [pc, #636]	; (b63d8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b615c:	fa0c f808 	lsl.w	r8, ip, r8
   b6160:	ea18 0f05 	tst.w	r8, r5
   b6164:	d007      	beq.n	b6176 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b6166:	6805      	ldr	r5, [r0, #0]
   b6168:	3501      	adds	r5, #1
   b616a:	6005      	str	r5, [r0, #0]
   b616c:	e7d9      	b.n	b6122 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b616e:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b6172:	f000 8133 	beq.w	b63dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b6176:	f8d0 8000 	ldr.w	r8, [r0]
   b617a:	4542      	cmp	r2, r8
   b617c:	d90e      	bls.n	b619c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b617e:	f811 5008 	ldrb.w	r5, [r1, r8]
   b6182:	b15d      	cbz	r5, b619c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b6184:	2d3a      	cmp	r5, #58	; 0x3a
   b6186:	f200 8169 	bhi.w	b645c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b618a:	2d1f      	cmp	r5, #31
   b618c:	f200 8151 	bhi.w	b6432 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b6190:	2d0a      	cmp	r5, #10
   b6192:	f200 8160 	bhi.w	b6456 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b6196:	2d08      	cmp	r5, #8
   b6198:	f240 8156 	bls.w	b6448 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b619c:	2b00      	cmp	r3, #0
   b619e:	f040 8162 	bne.w	b6466 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b61a2:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b61a6:	6005      	str	r5, [r0, #0]
   b61a8:	e0a5      	b.n	b62f6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b61aa:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b61ae:	d037      	beq.n	b6220 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b61b0:	d82e      	bhi.n	b6210 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b61b2:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b61b6:	d033      	beq.n	b6220 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b61b8:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b61bc:	d1db      	bne.n	b6176 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b61be:	2b00      	cmp	r3, #0
   b61c0:	d0d1      	beq.n	b6166 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b61c2:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b61c6:	6845      	ldr	r5, [r0, #4]
   b61c8:	3d01      	subs	r5, #1
   b61ca:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b61ce:	2d00      	cmp	r5, #0
   b61d0:	db55      	blt.n	b627e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b61d2:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b61d6:	3701      	adds	r7, #1
   b61d8:	d04d      	beq.n	b6276 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b61da:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b61de:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b61e2:	d148      	bne.n	b6276 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b61e4:	f898 b000 	ldrb.w	fp, [r8]
   b61e8:	45cb      	cmp	fp, r9
   b61ea:	d14b      	bne.n	b6284 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b61ec:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b61f0:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b61f4:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b61f8:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b61fc:	f8de 7004 	ldr.w	r7, [lr, #4]
   b6200:	3701      	adds	r7, #1
   b6202:	d042      	beq.n	b628a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b6204:	f8de 7008 	ldr.w	r7, [lr, #8]
   b6208:	3701      	adds	r7, #1
   b620a:	d13e      	bne.n	b628a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b620c:	6085      	str	r5, [r0, #8]
				break;
   b620e:	e7aa      	b.n	b6166 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b6210:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b6214:	d1af      	bne.n	b6176 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b6216:	2b00      	cmp	r3, #0
   b6218:	d0a5      	beq.n	b6166 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b621a:	f04f 0901 	mov.w	r9, #1
   b621e:	e7d2      	b.n	b61c6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b6220:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b6222:	2b00      	cmp	r3, #0
   b6224:	d09f      	beq.n	b6166 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b6226:	6845      	ldr	r5, [r0, #4]
   b6228:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b622a:	42af      	cmp	r7, r5
   b622c:	d94a      	bls.n	b62c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b622e:	f105 0e01 	add.w	lr, r5, #1
   b6232:	f8c0 e004 	str.w	lr, [r0, #4]
   b6236:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b623a:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b623e:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b6242:	2500      	movs	r5, #0
   b6244:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b6248:	6885      	ldr	r5, [r0, #8]
   b624a:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b624c:	bf1f      	itttt	ne
   b624e:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b6252:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b6256:	3501      	addne	r5, #1
   b6258:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b625c:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b6260:	bf0c      	ite	eq
   b6262:	2501      	moveq	r5, #1
   b6264:	2502      	movne	r5, #2
   b6266:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b626a:	6805      	ldr	r5, [r0, #0]
   b626c:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b6270:	6845      	ldr	r5, [r0, #4]
   b6272:	3d01      	subs	r5, #1
   b6274:	e7ca      	b.n	b620c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b6276:	3d01      	subs	r5, #1
   b6278:	f1a8 0810 	sub.w	r8, r8, #16
   b627c:	e7a7      	b.n	b61ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b627e:	3501      	adds	r5, #1
   b6280:	f47f af71 	bne.w	b6166 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b6284:	f06f 0401 	mvn.w	r4, #1
   b6288:	e01e      	b.n	b62c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b628a:	3d01      	subs	r5, #1
   b628c:	1c6f      	adds	r7, r5, #1
   b628e:	f1ae 0e10 	sub.w	lr, lr, #16
   b6292:	d1b3      	bne.n	b61fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b6294:	e767      	b.n	b6166 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b6296:	f10e 0901 	add.w	r9, lr, #1
   b629a:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b629e:	f8d0 8000 	ldr.w	r8, [r0]
   b62a2:	4542      	cmp	r2, r8
   b62a4:	f240 8093 	bls.w	b63ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b62a8:	f811 5008 	ldrb.w	r5, [r1, r8]
   b62ac:	2d00      	cmp	r5, #0
   b62ae:	f000 808e 	beq.w	b63ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b62b2:	2d22      	cmp	r5, #34	; 0x22
   b62b4:	d130      	bne.n	b6318 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b62b6:	b1f3      	cbz	r3, b62f6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b62b8:	6845      	ldr	r5, [r0, #4]
   b62ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b62bc:	42af      	cmp	r7, r5
   b62be:	d806      	bhi.n	b62ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b62c0:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b62c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b62c8:	4620      	mov	r0, r4
   b62ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b62ce:	f105 0e01 	add.w	lr, r5, #1
   b62d2:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b62d6:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b62da:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b62de:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b62e2:	2700      	movs	r7, #0
   b62e4:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b62e6:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b62ea:	f04f 0a03 	mov.w	sl, #3
   b62ee:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b62f2:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b62f6:	6885      	ldr	r5, [r0, #8]
   b62f8:	1c6f      	adds	r7, r5, #1
				count++;
   b62fa:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b62fe:	f43f af32 	beq.w	b6166 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b6302:	2b00      	cmp	r3, #0
   b6304:	f43f af2f 	beq.w	b6166 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b6308:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b630c:	f8de 500c 	ldr.w	r5, [lr, #12]
   b6310:	3501      	adds	r5, #1
   b6312:	f8ce 500c 	str.w	r5, [lr, #12]
   b6316:	e726      	b.n	b6166 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b6318:	2d5c      	cmp	r5, #92	; 0x5c
   b631a:	d111      	bne.n	b6340 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b631c:	f108 0501 	add.w	r5, r8, #1
   b6320:	42aa      	cmp	r2, r5
   b6322:	d90d      	bls.n	b6340 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b6324:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b6326:	5d4d      	ldrb	r5, [r1, r5]
   b6328:	2d75      	cmp	r5, #117	; 0x75
   b632a:	d82b      	bhi.n	b6384 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b632c:	2d6d      	cmp	r5, #109	; 0x6d
   b632e:	d80b      	bhi.n	b6348 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b6330:	2d66      	cmp	r5, #102	; 0x66
   b6332:	d827      	bhi.n	b6384 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b6334:	2d5b      	cmp	r5, #91	; 0x5b
   b6336:	d81d      	bhi.n	b6374 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b6338:	2d22      	cmp	r5, #34	; 0x22
   b633a:	d001      	beq.n	b6340 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b633c:	2d2f      	cmp	r5, #47	; 0x2f
   b633e:	d121      	bne.n	b6384 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b6340:	6805      	ldr	r5, [r0, #0]
   b6342:	3501      	adds	r5, #1
   b6344:	6005      	str	r5, [r0, #0]
   b6346:	e7aa      	b.n	b629e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b6348:	3d6e      	subs	r5, #110	; 0x6e
   b634a:	2d07      	cmp	r5, #7
   b634c:	d81a      	bhi.n	b6384 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b634e:	a701      	add	r7, pc, #4	; (adr r7, b6354 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b6350:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b6354:	000b6341 	.word	0x000b6341
   b6358:	000b6385 	.word	0x000b6385
   b635c:	000b6385 	.word	0x000b6385
   b6360:	000b6385 	.word	0x000b6385
   b6364:	000b6341 	.word	0x000b6341
   b6368:	000b6385 	.word	0x000b6385
   b636c:	000b6341 	.word	0x000b6341
   b6370:	000b638b 	.word	0x000b638b
   b6374:	3d5c      	subs	r5, #92	; 0x5c
   b6376:	b2ed      	uxtb	r5, r5
   b6378:	fa0c f505 	lsl.w	r5, ip, r5
   b637c:	f240 4741 	movw	r7, #1089	; 0x441
   b6380:	423d      	tst	r5, r7
   b6382:	d1dd      	bne.n	b6340 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b6384:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b6388:	e77c      	b.n	b6284 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b638a:	f108 0502 	add.w	r5, r8, #2
   b638e:	6005      	str	r5, [r0, #0]
   b6390:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b6394:	f8d0 8000 	ldr.w	r8, [r0]
   b6398:	4542      	cmp	r2, r8
   b639a:	d803      	bhi.n	b63a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b639c:	6805      	ldr	r5, [r0, #0]
   b639e:	3d01      	subs	r5, #1
   b63a0:	6005      	str	r5, [r0, #0]
					break;
   b63a2:	e7cd      	b.n	b6340 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b63a4:	f811 5008 	ldrb.w	r5, [r1, r8]
   b63a8:	2d00      	cmp	r5, #0
   b63aa:	d0f7      	beq.n	b639c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b63ac:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b63b0:	f1bb 0f09 	cmp.w	fp, #9
   b63b4:	d904      	bls.n	b63c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b63b6:	f025 0520 	bic.w	r5, r5, #32
   b63ba:	3d41      	subs	r5, #65	; 0x41
   b63bc:	2d05      	cmp	r5, #5
   b63be:	d8e1      	bhi.n	b6384 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b63c0:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b63c4:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b63c8:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b63ca:	d1e3      	bne.n	b6394 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b63cc:	e7e6      	b.n	b639c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b63ce:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b63d2:	f06f 0402 	mvn.w	r4, #2
   b63d6:	e777      	b.n	b62c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b63d8:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b63dc:	2b00      	cmp	r3, #0
   b63de:	f43f aec2 	beq.w	b6166 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b63e2:	6885      	ldr	r5, [r0, #8]
   b63e4:	1c6f      	adds	r7, r5, #1
   b63e6:	f43f aebe 	beq.w	b6166 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b63ea:	012d      	lsls	r5, r5, #4
   b63ec:	5d5d      	ldrb	r5, [r3, r5]
   b63ee:	3d01      	subs	r5, #1
   b63f0:	2d01      	cmp	r5, #1
   b63f2:	f67f aeb8 	bls.w	b6166 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b63f6:	6845      	ldr	r5, [r0, #4]
   b63f8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b63fc:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b6400:	f1b8 0f00 	cmp.w	r8, #0
   b6404:	f6ff aeaf 	blt.w	b6166 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b6408:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b640c:	3d01      	subs	r5, #1
   b640e:	2d01      	cmp	r5, #1
   b6410:	d80a      	bhi.n	b6428 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b6412:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b6416:	3501      	adds	r5, #1
   b6418:	d006      	beq.n	b6428 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b641a:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b641e:	3501      	adds	r5, #1
   b6420:	d102      	bne.n	b6428 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b6422:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b6426:	e69e      	b.n	b6166 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b6428:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b642c:	f1ae 0e10 	sub.w	lr, lr, #16
   b6430:	e7e6      	b.n	b6400 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b6432:	f1a5 0920 	sub.w	r9, r5, #32
   b6436:	4f24      	ldr	r7, [pc, #144]	; (b64c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b6438:	fa5f f989 	uxtb.w	r9, r9
   b643c:	fa0c f909 	lsl.w	r9, ip, r9
   b6440:	ea19 0f07 	tst.w	r9, r7
   b6444:	f47f aeaa 	bne.w	b619c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b6448:	3d20      	subs	r5, #32
   b644a:	2d5e      	cmp	r5, #94	; 0x5e
   b644c:	d89a      	bhi.n	b6384 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b644e:	f108 0501 	add.w	r5, r8, #1
   b6452:	6005      	str	r5, [r0, #0]
   b6454:	e68f      	b.n	b6176 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b6456:	2d0d      	cmp	r5, #13
   b6458:	d1f6      	bne.n	b6448 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b645a:	e69f      	b.n	b619c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b645c:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b6460:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b6464:	e7f8      	b.n	b6458 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b6466:	6845      	ldr	r5, [r0, #4]
   b6468:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b646a:	42af      	cmp	r7, r5
   b646c:	f67f af28 	bls.w	b62c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b6470:	f105 0801 	add.w	r8, r5, #1
   b6474:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b6478:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b647c:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b6480:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b6484:	2700      	movs	r7, #0
   b6486:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b6488:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b648c:	f04f 0a04 	mov.w	sl, #4
   b6490:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b6494:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b6498:	6805      	ldr	r5, [r0, #0]
   b649a:	3d01      	subs	r5, #1
   b649c:	e683      	b.n	b61a6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b649e:	2b00      	cmp	r3, #0
   b64a0:	f43f af12 	beq.w	b62c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b64a4:	6842      	ldr	r2, [r0, #4]
   b64a6:	1e51      	subs	r1, r2, #1
   b64a8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b64ac:	2900      	cmp	r1, #0
   b64ae:	f6ff af0b 	blt.w	b62c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b64b2:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b64b6:	3201      	adds	r2, #1
   b64b8:	d003      	beq.n	b64c2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b64ba:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b64be:	3201      	adds	r2, #1
   b64c0:	d087      	beq.n	b63d2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b64c2:	3901      	subs	r1, #1
   b64c4:	3b10      	subs	r3, #16
   b64c6:	e7f1      	b.n	b64ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b64c8:	04001001 	.word	0x04001001

000b64cc <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b64cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b64ce:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b64d0:	4604      	mov	r4, r0
	if (offset == 0) {
   b64d2:	b912      	cbnz	r2, b64da <_ZN10JsonParser5parseEv+0xe>
		return false;
   b64d4:	2000      	movs	r0, #0
}
   b64d6:	b003      	add	sp, #12
   b64d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b64da:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b64dc:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b64e0:	b1ab      	cbz	r3, b650e <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b64e2:	2100      	movs	r1, #0
	parser->toknext = 0;
   b64e4:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b64e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b64ec:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b64ee:	69c1      	ldr	r1, [r0, #28]
   b64f0:	9100      	str	r1, [sp, #0]
   b64f2:	6841      	ldr	r1, [r0, #4]
   b64f4:	4630      	mov	r0, r6
   b64f6:	f7ff fe0d 	bl	b6114 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b64fa:	1c43      	adds	r3, r0, #1
   b64fc:	d128      	bne.n	b6550 <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b64fe:	7c25      	ldrb	r5, [r4, #16]
   b6500:	2d00      	cmp	r5, #0
   b6502:	d1e7      	bne.n	b64d4 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b6504:	6960      	ldr	r0, [r4, #20]
   b6506:	f000 fad3 	bl	b6ab0 <free>
			tokens = 0;
   b650a:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b650c:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b650e:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b6510:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b6514:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b6518:	68e2      	ldr	r2, [r4, #12]
   b651a:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b651c:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b651e:	9500      	str	r5, [sp, #0]
   b6520:	462b      	mov	r3, r5
   b6522:	4630      	mov	r0, r6
   b6524:	f7ff fdf6 	bl	b6114 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b6528:	2800      	cmp	r0, #0
   b652a:	dbd3      	blt.n	b64d4 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b652c:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b652e:	d017      	beq.n	b6560 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b6530:	0100      	lsls	r0, r0, #4
   b6532:	f000 fab5 	bl	b6aa0 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b6536:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b6538:	6160      	str	r0, [r4, #20]
   b653a:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b653c:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b653e:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b6542:	68e2      	ldr	r2, [r4, #12]
   b6544:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b6546:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b6548:	4630      	mov	r0, r6
   b654a:	f7ff fde3 	bl	b6114 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b654e:	e001      	b.n	b6554 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b6550:	2800      	cmp	r0, #0
   b6552:	dbbf      	blt.n	b64d4 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b6554:	6963      	ldr	r3, [r4, #20]
   b6556:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b655a:	61a0      	str	r0, [r4, #24]
	return true;
   b655c:	2001      	movs	r0, #1
   b655e:	e7ba      	b.n	b64d6 <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b6560:	6963      	ldr	r3, [r4, #20]
   b6562:	61a3      	str	r3, [r4, #24]
   b6564:	e7fa      	b.n	b655c <_ZN10JsonParser5parseEv+0x90>
	...

000b6568 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   b6568:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b656a:	f000 f8c1 	bl	b66f0 <HAL_Pin_Map>
   b656e:	4b01      	ldr	r3, [pc, #4]	; (b6574 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b6570:	6018      	str	r0, [r3, #0]
}
   b6572:	bd08      	pop	{r3, pc}
   b6574:	2003e6b4 	.word	0x2003e6b4

000b6578 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b6578:	b508      	push	{r3, lr}
   b657a:	4b02      	ldr	r3, [pc, #8]	; (b6584 <hal_ble_stack_init+0xc>)
   b657c:	681b      	ldr	r3, [r3, #0]
   b657e:	689b      	ldr	r3, [r3, #8]
   b6580:	9301      	str	r3, [sp, #4]
   b6582:	bd08      	pop	{r3, pc}
   b6584:	00030278 	.word	0x00030278

000b6588 <hal_ble_stack_deinit>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
   b6588:	b508      	push	{r3, lr}
   b658a:	4b02      	ldr	r3, [pc, #8]	; (b6594 <hal_ble_stack_deinit+0xc>)
   b658c:	681b      	ldr	r3, [r3, #0]
   b658e:	68db      	ldr	r3, [r3, #12]
   b6590:	9301      	str	r3, [sp, #4]
   b6592:	bd08      	pop	{r3, pc}
   b6594:	00030278 	.word	0x00030278

000b6598 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b6598:	b508      	push	{r3, lr}
   b659a:	4b02      	ldr	r3, [pc, #8]	; (b65a4 <hal_ble_gap_set_advertising_data+0xc>)
   b659c:	681b      	ldr	r3, [r3, #0]
   b659e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b65a0:	9301      	str	r3, [sp, #4]
   b65a2:	bd08      	pop	{r3, pc}
   b65a4:	00030278 	.word	0x00030278

000b65a8 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b65a8:	b508      	push	{r3, lr}
   b65aa:	4b02      	ldr	r3, [pc, #8]	; (b65b4 <hal_ble_gap_set_scan_response_data+0xc>)
   b65ac:	681b      	ldr	r3, [r3, #0]
   b65ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b65b0:	9301      	str	r3, [sp, #4]
   b65b2:	bd08      	pop	{r3, pc}
   b65b4:	00030278 	.word	0x00030278

000b65b8 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b65b8:	b508      	push	{r3, lr}
   b65ba:	4b02      	ldr	r3, [pc, #8]	; (b65c4 <hal_ble_gap_start_advertising+0xc>)
   b65bc:	681b      	ldr	r3, [r3, #0]
   b65be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b65c0:	9301      	str	r3, [sp, #4]
   b65c2:	bd08      	pop	{r3, pc}
   b65c4:	00030278 	.word	0x00030278

000b65c8 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b65c8:	b508      	push	{r3, lr}
   b65ca:	4b03      	ldr	r3, [pc, #12]	; (b65d8 <hal_ble_gap_disconnect+0x10>)
   b65cc:	681b      	ldr	r3, [r3, #0]
   b65ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b65d2:	9301      	str	r3, [sp, #4]
   b65d4:	bd08      	pop	{r3, pc}
   b65d6:	0000      	.short	0x0000
   b65d8:	00030278 	.word	0x00030278

000b65dc <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b65dc:	b508      	push	{r3, lr}
   b65de:	4b03      	ldr	r3, [pc, #12]	; (b65ec <hal_ble_gatt_server_add_service+0x10>)
   b65e0:	681b      	ldr	r3, [r3, #0]
   b65e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b65e6:	9301      	str	r3, [sp, #4]
   b65e8:	bd08      	pop	{r3, pc}
   b65ea:	0000      	.short	0x0000
   b65ec:	00030278 	.word	0x00030278

000b65f0 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b65f0:	b508      	push	{r3, lr}
   b65f2:	4b03      	ldr	r3, [pc, #12]	; (b6600 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b65f4:	681b      	ldr	r3, [r3, #0]
   b65f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b65fa:	9301      	str	r3, [sp, #4]
   b65fc:	bd08      	pop	{r3, pc}
   b65fe:	0000      	.short	0x0000
   b6600:	00030278 	.word	0x00030278

000b6604 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6604:	b508      	push	{r3, lr}
   b6606:	4b03      	ldr	r3, [pc, #12]	; (b6614 <hal_ble_gatt_client_write_with_response+0x10>)
   b6608:	681b      	ldr	r3, [r3, #0]
   b660a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b660e:	9301      	str	r3, [sp, #4]
   b6610:	bd08      	pop	{r3, pc}
   b6612:	0000      	.short	0x0000
   b6614:	00030278 	.word	0x00030278

000b6618 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6618:	b508      	push	{r3, lr}
   b661a:	4b03      	ldr	r3, [pc, #12]	; (b6628 <hal_ble_gatt_client_write_without_response+0x10>)
   b661c:	681b      	ldr	r3, [r3, #0]
   b661e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b6622:	9301      	str	r3, [sp, #4]
   b6624:	bd08      	pop	{r3, pc}
   b6626:	0000      	.short	0x0000
   b6628:	00030278 	.word	0x00030278

000b662c <hal_ble_gap_get_connection_info>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
   b662c:	b508      	push	{r3, lr}
   b662e:	4b03      	ldr	r3, [pc, #12]	; (b663c <hal_ble_gap_get_connection_info+0x10>)
   b6630:	681b      	ldr	r3, [r3, #0]
   b6632:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   b6636:	9301      	str	r3, [sp, #4]
   b6638:	bd08      	pop	{r3, pc}
   b663a:	0000      	.short	0x0000
   b663c:	00030278 	.word	0x00030278

000b6640 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b6640:	b508      	push	{r3, lr}
   b6642:	4b03      	ldr	r3, [pc, #12]	; (b6650 <hal_ble_gatt_server_add_characteristic+0x10>)
   b6644:	681b      	ldr	r3, [r3, #0]
   b6646:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b664a:	9301      	str	r3, [sp, #4]
   b664c:	bd08      	pop	{r3, pc}
   b664e:	0000      	.short	0x0000
   b6650:	00030278 	.word	0x00030278

000b6654 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b6654:	b508      	push	{r3, lr}
   b6656:	4b03      	ldr	r3, [pc, #12]	; (b6664 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b6658:	681b      	ldr	r3, [r3, #0]
   b665a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b665e:	9301      	str	r3, [sp, #4]
   b6660:	bd08      	pop	{r3, pc}
   b6662:	0000      	.short	0x0000
   b6664:	00030278 	.word	0x00030278

000b6668 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6668:	b508      	push	{r3, lr}
   b666a:	4b03      	ldr	r3, [pc, #12]	; (b6678 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b666c:	681b      	ldr	r3, [r3, #0]
   b666e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b6672:	9301      	str	r3, [sp, #4]
   b6674:	bd08      	pop	{r3, pc}
   b6676:	0000      	.short	0x0000
   b6678:	00030278 	.word	0x00030278

000b667c <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b667c:	b508      	push	{r3, lr}
   b667e:	4b03      	ldr	r3, [pc, #12]	; (b668c <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b6680:	681b      	ldr	r3, [r3, #0]
   b6682:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b6686:	9301      	str	r3, [sp, #4]
   b6688:	bd08      	pop	{r3, pc}
   b668a:	0000      	.short	0x0000
   b668c:	00030278 	.word	0x00030278

000b6690 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6690:	b508      	push	{r3, lr}
   b6692:	4b02      	ldr	r3, [pc, #8]	; (b669c <os_mutex_recursive_create+0xc>)
   b6694:	681b      	ldr	r3, [r3, #0]
   b6696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6698:	9301      	str	r3, [sp, #4]
   b669a:	bd08      	pop	{r3, pc}
   b669c:	00030248 	.word	0x00030248

000b66a0 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b66a0:	b508      	push	{r3, lr}
   b66a2:	4b02      	ldr	r3, [pc, #8]	; (b66ac <os_mutex_recursive_lock+0xc>)
   b66a4:	681b      	ldr	r3, [r3, #0]
   b66a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b66a8:	9301      	str	r3, [sp, #4]
   b66aa:	bd08      	pop	{r3, pc}
   b66ac:	00030248 	.word	0x00030248

000b66b0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b66b0:	b508      	push	{r3, lr}
   b66b2:	4b02      	ldr	r3, [pc, #8]	; (b66bc <os_mutex_recursive_unlock+0xc>)
   b66b4:	681b      	ldr	r3, [r3, #0]
   b66b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b66b8:	9301      	str	r3, [sp, #4]
   b66ba:	bd08      	pop	{r3, pc}
   b66bc:	00030248 	.word	0x00030248

000b66c0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b66c0:	b508      	push	{r3, lr}
   b66c2:	4b02      	ldr	r3, [pc, #8]	; (b66cc <HAL_RNG_GetRandomNumber+0xc>)
   b66c4:	681b      	ldr	r3, [r3, #0]
   b66c6:	685b      	ldr	r3, [r3, #4]
   b66c8:	9301      	str	r3, [sp, #4]
   b66ca:	bd08      	pop	{r3, pc}
   b66cc:	00030218 	.word	0x00030218

000b66d0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b66d0:	b508      	push	{r3, lr}
   b66d2:	4b02      	ldr	r3, [pc, #8]	; (b66dc <HAL_Delay_Microseconds+0xc>)
   b66d4:	681b      	ldr	r3, [r3, #0]
   b66d6:	68db      	ldr	r3, [r3, #12]
   b66d8:	9301      	str	r3, [sp, #4]
   b66da:	bd08      	pop	{r3, pc}
   b66dc:	00030218 	.word	0x00030218

000b66e0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b66e0:	b508      	push	{r3, lr}
   b66e2:	4b02      	ldr	r3, [pc, #8]	; (b66ec <HAL_Timer_Get_Milli_Seconds+0xc>)
   b66e4:	681b      	ldr	r3, [r3, #0]
   b66e6:	695b      	ldr	r3, [r3, #20]
   b66e8:	9301      	str	r3, [sp, #4]
   b66ea:	bd08      	pop	{r3, pc}
   b66ec:	00030218 	.word	0x00030218

000b66f0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b66f0:	b508      	push	{r3, lr}
   b66f2:	4b02      	ldr	r3, [pc, #8]	; (b66fc <HAL_Pin_Map+0xc>)
   b66f4:	681b      	ldr	r3, [r3, #0]
   b66f6:	681b      	ldr	r3, [r3, #0]
   b66f8:	9301      	str	r3, [sp, #4]
   b66fa:	bd08      	pop	{r3, pc}
   b66fc:	0003022c 	.word	0x0003022c

000b6700 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6700:	b508      	push	{r3, lr}
   b6702:	4b02      	ldr	r3, [pc, #8]	; (b670c <hal_i2c_begin+0xc>)
   b6704:	681b      	ldr	r3, [r3, #0]
   b6706:	68db      	ldr	r3, [r3, #12]
   b6708:	9301      	str	r3, [sp, #4]
   b670a:	bd08      	pop	{r3, pc}
   b670c:	00030228 	.word	0x00030228

000b6710 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6710:	b508      	push	{r3, lr}
   b6712:	4b02      	ldr	r3, [pc, #8]	; (b671c <hal_i2c_begin_transmission+0xc>)
   b6714:	681b      	ldr	r3, [r3, #0]
   b6716:	699b      	ldr	r3, [r3, #24]
   b6718:	9301      	str	r3, [sp, #4]
   b671a:	bd08      	pop	{r3, pc}
   b671c:	00030228 	.word	0x00030228

000b6720 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6720:	b508      	push	{r3, lr}
   b6722:	4b02      	ldr	r3, [pc, #8]	; (b672c <hal_i2c_end_transmission+0xc>)
   b6724:	681b      	ldr	r3, [r3, #0]
   b6726:	69db      	ldr	r3, [r3, #28]
   b6728:	9301      	str	r3, [sp, #4]
   b672a:	bd08      	pop	{r3, pc}
   b672c:	00030228 	.word	0x00030228

000b6730 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6730:	b508      	push	{r3, lr}
   b6732:	4b02      	ldr	r3, [pc, #8]	; (b673c <hal_i2c_write+0xc>)
   b6734:	681b      	ldr	r3, [r3, #0]
   b6736:	6a1b      	ldr	r3, [r3, #32]
   b6738:	9301      	str	r3, [sp, #4]
   b673a:	bd08      	pop	{r3, pc}
   b673c:	00030228 	.word	0x00030228

000b6740 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6740:	b508      	push	{r3, lr}
   b6742:	4b02      	ldr	r3, [pc, #8]	; (b674c <hal_i2c_available+0xc>)
   b6744:	681b      	ldr	r3, [r3, #0]
   b6746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6748:	9301      	str	r3, [sp, #4]
   b674a:	bd08      	pop	{r3, pc}
   b674c:	00030228 	.word	0x00030228

000b6750 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6750:	b508      	push	{r3, lr}
   b6752:	4b02      	ldr	r3, [pc, #8]	; (b675c <hal_i2c_read+0xc>)
   b6754:	681b      	ldr	r3, [r3, #0]
   b6756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6758:	9301      	str	r3, [sp, #4]
   b675a:	bd08      	pop	{r3, pc}
   b675c:	00030228 	.word	0x00030228

000b6760 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6760:	b508      	push	{r3, lr}
   b6762:	4b02      	ldr	r3, [pc, #8]	; (b676c <hal_i2c_peek+0xc>)
   b6764:	681b      	ldr	r3, [r3, #0]
   b6766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6768:	9301      	str	r3, [sp, #4]
   b676a:	bd08      	pop	{r3, pc}
   b676c:	00030228 	.word	0x00030228

000b6770 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6770:	b508      	push	{r3, lr}
   b6772:	4b02      	ldr	r3, [pc, #8]	; (b677c <hal_i2c_flush+0xc>)
   b6774:	681b      	ldr	r3, [r3, #0]
   b6776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6778:	9301      	str	r3, [sp, #4]
   b677a:	bd08      	pop	{r3, pc}
   b677c:	00030228 	.word	0x00030228

000b6780 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6780:	b508      	push	{r3, lr}
   b6782:	4b02      	ldr	r3, [pc, #8]	; (b678c <hal_i2c_init+0xc>)
   b6784:	681b      	ldr	r3, [r3, #0]
   b6786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6788:	9301      	str	r3, [sp, #4]
   b678a:	bd08      	pop	{r3, pc}
   b678c:	00030228 	.word	0x00030228

000b6790 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b6790:	b508      	push	{r3, lr}
   b6792:	4b02      	ldr	r3, [pc, #8]	; (b679c <hal_i2c_request_ex+0xc>)
   b6794:	681b      	ldr	r3, [r3, #0]
   b6796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6798:	9301      	str	r3, [sp, #4]
   b679a:	bd08      	pop	{r3, pc}
   b679c:	00030228 	.word	0x00030228

000b67a0 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b67a0:	b508      	push	{r3, lr}
   b67a2:	4b02      	ldr	r3, [pc, #8]	; (b67ac <if_index_to_name+0xc>)
   b67a4:	681b      	ldr	r3, [r3, #0]
   b67a6:	695b      	ldr	r3, [r3, #20]
   b67a8:	9301      	str	r3, [sp, #4]
   b67aa:	bd08      	pop	{r3, pc}
   b67ac:	0003026c 	.word	0x0003026c

000b67b0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b67b0:	b508      	push	{r3, lr}
   b67b2:	4b02      	ldr	r3, [pc, #8]	; (b67bc <inet_inet_ntop+0xc>)
   b67b4:	681b      	ldr	r3, [r3, #0]
   b67b6:	695b      	ldr	r3, [r3, #20]
   b67b8:	9301      	str	r3, [sp, #4]
   b67ba:	bd08      	pop	{r3, pc}
   b67bc:	00030264 	.word	0x00030264

000b67c0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b67c0:	b508      	push	{r3, lr}
   b67c2:	4b02      	ldr	r3, [pc, #8]	; (b67cc <inet_htonl+0xc>)
   b67c4:	681b      	ldr	r3, [r3, #0]
   b67c6:	6a1b      	ldr	r3, [r3, #32]
   b67c8:	9301      	str	r3, [sp, #4]
   b67ca:	bd08      	pop	{r3, pc}
   b67cc:	00030264 	.word	0x00030264

000b67d0 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b67d0:	b508      	push	{r3, lr}
   b67d2:	4b02      	ldr	r3, [pc, #8]	; (b67dc <inet_htons+0xc>)
   b67d4:	681b      	ldr	r3, [r3, #0]
   b67d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b67d8:	9301      	str	r3, [sp, #4]
   b67da:	bd08      	pop	{r3, pc}
   b67dc:	00030264 	.word	0x00030264

000b67e0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b67e0:	b508      	push	{r3, lr}
   b67e2:	4b02      	ldr	r3, [pc, #8]	; (b67ec <netdb_freeaddrinfo+0xc>)
   b67e4:	681b      	ldr	r3, [r3, #0]
   b67e6:	689b      	ldr	r3, [r3, #8]
   b67e8:	9301      	str	r3, [sp, #4]
   b67ea:	bd08      	pop	{r3, pc}
   b67ec:	00030268 	.word	0x00030268

000b67f0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b67f0:	b508      	push	{r3, lr}
   b67f2:	4b02      	ldr	r3, [pc, #8]	; (b67fc <netdb_getaddrinfo+0xc>)
   b67f4:	681b      	ldr	r3, [r3, #0]
   b67f6:	68db      	ldr	r3, [r3, #12]
   b67f8:	9301      	str	r3, [sp, #4]
   b67fa:	bd08      	pop	{r3, pc}
   b67fc:	00030268 	.word	0x00030268

000b6800 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6800:	b508      	push	{r3, lr}
   b6802:	4b02      	ldr	r3, [pc, #8]	; (b680c <sock_setsockopt+0xc>)
   b6804:	681b      	ldr	r3, [r3, #0]
   b6806:	699b      	ldr	r3, [r3, #24]
   b6808:	9301      	str	r3, [sp, #4]
   b680a:	bd08      	pop	{r3, pc}
   b680c:	00030238 	.word	0x00030238

000b6810 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6810:	b508      	push	{r3, lr}
   b6812:	4b02      	ldr	r3, [pc, #8]	; (b681c <sock_close+0xc>)
   b6814:	681b      	ldr	r3, [r3, #0]
   b6816:	69db      	ldr	r3, [r3, #28]
   b6818:	9301      	str	r3, [sp, #4]
   b681a:	bd08      	pop	{r3, pc}
   b681c:	00030238 	.word	0x00030238

000b6820 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6820:	b508      	push	{r3, lr}
   b6822:	4b02      	ldr	r3, [pc, #8]	; (b682c <sock_connect+0xc>)
   b6824:	681b      	ldr	r3, [r3, #0]
   b6826:	6a1b      	ldr	r3, [r3, #32]
   b6828:	9301      	str	r3, [sp, #4]
   b682a:	bd08      	pop	{r3, pc}
   b682c:	00030238 	.word	0x00030238

000b6830 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6830:	b508      	push	{r3, lr}
   b6832:	4b02      	ldr	r3, [pc, #8]	; (b683c <sock_recv+0xc>)
   b6834:	681b      	ldr	r3, [r3, #0]
   b6836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6838:	9301      	str	r3, [sp, #4]
   b683a:	bd08      	pop	{r3, pc}
   b683c:	00030238 	.word	0x00030238

000b6840 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6840:	b508      	push	{r3, lr}
   b6842:	4b02      	ldr	r3, [pc, #8]	; (b684c <sock_send+0xc>)
   b6844:	681b      	ldr	r3, [r3, #0]
   b6846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6848:	9301      	str	r3, [sp, #4]
   b684a:	bd08      	pop	{r3, pc}
   b684c:	00030238 	.word	0x00030238

000b6850 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6850:	b508      	push	{r3, lr}
   b6852:	4b02      	ldr	r3, [pc, #8]	; (b685c <sock_socket+0xc>)
   b6854:	681b      	ldr	r3, [r3, #0]
   b6856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6858:	9301      	str	r3, [sp, #4]
   b685a:	bd08      	pop	{r3, pc}
   b685c:	00030238 	.word	0x00030238

000b6860 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6860:	b508      	push	{r3, lr}
   b6862:	4b02      	ldr	r3, [pc, #8]	; (b686c <hal_usart_write+0xc>)
   b6864:	681b      	ldr	r3, [r3, #0]
   b6866:	68db      	ldr	r3, [r3, #12]
   b6868:	9301      	str	r3, [sp, #4]
   b686a:	bd08      	pop	{r3, pc}
   b686c:	0003023c 	.word	0x0003023c

000b6870 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6870:	b508      	push	{r3, lr}
   b6872:	4b02      	ldr	r3, [pc, #8]	; (b687c <hal_usart_available+0xc>)
   b6874:	681b      	ldr	r3, [r3, #0]
   b6876:	691b      	ldr	r3, [r3, #16]
   b6878:	9301      	str	r3, [sp, #4]
   b687a:	bd08      	pop	{r3, pc}
   b687c:	0003023c 	.word	0x0003023c

000b6880 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6880:	b508      	push	{r3, lr}
   b6882:	4b02      	ldr	r3, [pc, #8]	; (b688c <hal_usart_read+0xc>)
   b6884:	681b      	ldr	r3, [r3, #0]
   b6886:	695b      	ldr	r3, [r3, #20]
   b6888:	9301      	str	r3, [sp, #4]
   b688a:	bd08      	pop	{r3, pc}
   b688c:	0003023c 	.word	0x0003023c

000b6890 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6890:	b508      	push	{r3, lr}
   b6892:	4b02      	ldr	r3, [pc, #8]	; (b689c <hal_usart_peek+0xc>)
   b6894:	681b      	ldr	r3, [r3, #0]
   b6896:	699b      	ldr	r3, [r3, #24]
   b6898:	9301      	str	r3, [sp, #4]
   b689a:	bd08      	pop	{r3, pc}
   b689c:	0003023c 	.word	0x0003023c

000b68a0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b68a0:	b508      	push	{r3, lr}
   b68a2:	4b02      	ldr	r3, [pc, #8]	; (b68ac <hal_usart_flush+0xc>)
   b68a4:	681b      	ldr	r3, [r3, #0]
   b68a6:	69db      	ldr	r3, [r3, #28]
   b68a8:	9301      	str	r3, [sp, #4]
   b68aa:	bd08      	pop	{r3, pc}
   b68ac:	0003023c 	.word	0x0003023c

000b68b0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b68b0:	b508      	push	{r3, lr}
   b68b2:	4b02      	ldr	r3, [pc, #8]	; (b68bc <hal_usart_available_data_for_write+0xc>)
   b68b4:	681b      	ldr	r3, [r3, #0]
   b68b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b68b8:	9301      	str	r3, [sp, #4]
   b68ba:	bd08      	pop	{r3, pc}
   b68bc:	0003023c 	.word	0x0003023c

000b68c0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b68c0:	b508      	push	{r3, lr}
   b68c2:	4b02      	ldr	r3, [pc, #8]	; (b68cc <hal_usart_init_ex+0xc>)
   b68c4:	681b      	ldr	r3, [r3, #0]
   b68c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b68c8:	9301      	str	r3, [sp, #4]
   b68ca:	bd08      	pop	{r3, pc}
   b68cc:	0003023c 	.word	0x0003023c

000b68d0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b68d0:	b508      	push	{r3, lr}
   b68d2:	4b02      	ldr	r3, [pc, #8]	; (b68dc <HAL_USB_USART_Init+0xc>)
   b68d4:	681b      	ldr	r3, [r3, #0]
   b68d6:	681b      	ldr	r3, [r3, #0]
   b68d8:	9301      	str	r3, [sp, #4]
   b68da:	bd08      	pop	{r3, pc}
   b68dc:	0003024c 	.word	0x0003024c

000b68e0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b68e0:	b508      	push	{r3, lr}
   b68e2:	4b02      	ldr	r3, [pc, #8]	; (b68ec <HAL_USB_USART_Begin+0xc>)
   b68e4:	681b      	ldr	r3, [r3, #0]
   b68e6:	685b      	ldr	r3, [r3, #4]
   b68e8:	9301      	str	r3, [sp, #4]
   b68ea:	bd08      	pop	{r3, pc}
   b68ec:	0003024c 	.word	0x0003024c

000b68f0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b68f0:	b508      	push	{r3, lr}
   b68f2:	4b02      	ldr	r3, [pc, #8]	; (b68fc <HAL_USB_USART_Available_Data+0xc>)
   b68f4:	681b      	ldr	r3, [r3, #0]
   b68f6:	691b      	ldr	r3, [r3, #16]
   b68f8:	9301      	str	r3, [sp, #4]
   b68fa:	bd08      	pop	{r3, pc}
   b68fc:	0003024c 	.word	0x0003024c

000b6900 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6900:	b508      	push	{r3, lr}
   b6902:	4b02      	ldr	r3, [pc, #8]	; (b690c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6904:	681b      	ldr	r3, [r3, #0]
   b6906:	695b      	ldr	r3, [r3, #20]
   b6908:	9301      	str	r3, [sp, #4]
   b690a:	bd08      	pop	{r3, pc}
   b690c:	0003024c 	.word	0x0003024c

000b6910 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6910:	b508      	push	{r3, lr}
   b6912:	4b02      	ldr	r3, [pc, #8]	; (b691c <HAL_USB_USART_Receive_Data+0xc>)
   b6914:	681b      	ldr	r3, [r3, #0]
   b6916:	699b      	ldr	r3, [r3, #24]
   b6918:	9301      	str	r3, [sp, #4]
   b691a:	bd08      	pop	{r3, pc}
   b691c:	0003024c 	.word	0x0003024c

000b6920 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6920:	b508      	push	{r3, lr}
   b6922:	4b02      	ldr	r3, [pc, #8]	; (b692c <HAL_USB_USART_Send_Data+0xc>)
   b6924:	681b      	ldr	r3, [r3, #0]
   b6926:	69db      	ldr	r3, [r3, #28]
   b6928:	9301      	str	r3, [sp, #4]
   b692a:	bd08      	pop	{r3, pc}
   b692c:	0003024c 	.word	0x0003024c

000b6930 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6930:	b508      	push	{r3, lr}
   b6932:	4b02      	ldr	r3, [pc, #8]	; (b693c <HAL_USB_USART_Flush_Data+0xc>)
   b6934:	681b      	ldr	r3, [r3, #0]
   b6936:	6a1b      	ldr	r3, [r3, #32]
   b6938:	9301      	str	r3, [sp, #4]
   b693a:	bd08      	pop	{r3, pc}
   b693c:	0003024c 	.word	0x0003024c

000b6940 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6940:	b508      	push	{r3, lr}
   b6942:	4b02      	ldr	r3, [pc, #8]	; (b694c <panic_+0xc>)
   b6944:	681b      	ldr	r3, [r3, #0]
   b6946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6948:	9301      	str	r3, [sp, #4]
   b694a:	bd08      	pop	{r3, pc}
   b694c:	00030260 	.word	0x00030260

000b6950 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6950:	b508      	push	{r3, lr}
   b6952:	4b02      	ldr	r3, [pc, #8]	; (b695c <log_message+0xc>)
   b6954:	681b      	ldr	r3, [r3, #0]
   b6956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6958:	9301      	str	r3, [sp, #4]
   b695a:	bd08      	pop	{r3, pc}
   b695c:	00030260 	.word	0x00030260

000b6960 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6960:	b508      	push	{r3, lr}
   b6962:	4b02      	ldr	r3, [pc, #8]	; (b696c <set_system_mode+0xc>)
   b6964:	681b      	ldr	r3, [r3, #0]
   b6966:	685b      	ldr	r3, [r3, #4]
   b6968:	9301      	str	r3, [sp, #4]
   b696a:	bd08      	pop	{r3, pc}
   b696c:	00030220 	.word	0x00030220

000b6970 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6970:	b508      	push	{r3, lr}
   b6972:	4b02      	ldr	r3, [pc, #8]	; (b697c <system_delay_ms+0xc>)
   b6974:	681b      	ldr	r3, [r3, #0]
   b6976:	695b      	ldr	r3, [r3, #20]
   b6978:	9301      	str	r3, [sp, #4]
   b697a:	bd08      	pop	{r3, pc}
   b697c:	00030220 	.word	0x00030220

000b6980 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6980:	b508      	push	{r3, lr}
   b6982:	4b03      	ldr	r3, [pc, #12]	; (b6990 <system_ctrl_set_app_request_handler+0x10>)
   b6984:	681b      	ldr	r3, [r3, #0]
   b6986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b698a:	9301      	str	r3, [sp, #4]
   b698c:	bd08      	pop	{r3, pc}
   b698e:	0000      	.short	0x0000
   b6990:	00030220 	.word	0x00030220

000b6994 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6994:	b508      	push	{r3, lr}
   b6996:	4b03      	ldr	r3, [pc, #12]	; (b69a4 <system_ctrl_set_result+0x10>)
   b6998:	681b      	ldr	r3, [r3, #0]
   b699a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b699e:	9301      	str	r3, [sp, #4]
   b69a0:	bd08      	pop	{r3, pc}
   b69a2:	0000      	.short	0x0000
   b69a4:	00030220 	.word	0x00030220

000b69a8 <system_ble_prov_mode>:
DYNALIB_FN(BASE_IDX2 + 0, system, system_info_get_unstable, int(hal_system_info_t* info, uint32_t flags, void* reserved))
DYNALIB_FN(BASE_IDX2 + 1, system, system_info_free_unstable, int(hal_system_info_t* info, void* reserved))
DYNALIB_FN(BASE_IDX2 + 2, system, system_ctrl_set_request_filter, int(system_ctrl_acl default_action, system_ctrl_filter* filters, void* reserved))

#if HAL_PLATFORM_BLE
DYNALIB_FN(BASE_IDX2 + 3, system, system_ble_prov_mode, int(bool enabled, void* reserved))
   b69a8:	b508      	push	{r3, lr}
   b69aa:	4b03      	ldr	r3, [pc, #12]	; (b69b8 <system_ble_prov_mode+0x10>)
   b69ac:	681b      	ldr	r3, [r3, #0]
   b69ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   b69b2:	9301      	str	r3, [sp, #4]
   b69b4:	bd08      	pop	{r3, pc}
   b69b6:	0000      	.short	0x0000
   b69b8:	00030220 	.word	0x00030220

000b69bc <system_ble_prov_get_status>:
DYNALIB_FN(BASE_IDX2 + 4, system, system_ble_prov_get_status, bool(void* reserved))
   b69bc:	b508      	push	{r3, lr}
   b69be:	4b03      	ldr	r3, [pc, #12]	; (b69cc <system_ble_prov_get_status+0x10>)
   b69c0:	681b      	ldr	r3, [r3, #0]
   b69c2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
   b69c6:	9301      	str	r3, [sp, #4]
   b69c8:	bd08      	pop	{r3, pc}
   b69ca:	0000      	.short	0x0000
   b69cc:	00030220 	.word	0x00030220

000b69d0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b69d0:	b508      	push	{r3, lr}
   b69d2:	4b02      	ldr	r3, [pc, #8]	; (b69dc <spark_set_random_seed_from_cloud_handler+0xc>)
   b69d4:	681b      	ldr	r3, [r3, #0]
   b69d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b69d8:	9301      	str	r3, [sp, #4]
   b69da:	bd08      	pop	{r3, pc}
   b69dc:	00030244 	.word	0x00030244

000b69e0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b69e0:	b508      	push	{r3, lr}
   b69e2:	4b02      	ldr	r3, [pc, #8]	; (b69ec <network_connect+0xc>)
   b69e4:	681b      	ldr	r3, [r3, #0]
   b69e6:	685b      	ldr	r3, [r3, #4]
   b69e8:	9301      	str	r3, [sp, #4]
   b69ea:	bd08      	pop	{r3, pc}
   b69ec:	00030240 	.word	0x00030240

000b69f0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b69f0:	b508      	push	{r3, lr}
   b69f2:	4b02      	ldr	r3, [pc, #8]	; (b69fc <network_connecting+0xc>)
   b69f4:	681b      	ldr	r3, [r3, #0]
   b69f6:	689b      	ldr	r3, [r3, #8]
   b69f8:	9301      	str	r3, [sp, #4]
   b69fa:	bd08      	pop	{r3, pc}
   b69fc:	00030240 	.word	0x00030240

000b6a00 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6a00:	b508      	push	{r3, lr}
   b6a02:	4b02      	ldr	r3, [pc, #8]	; (b6a0c <network_disconnect+0xc>)
   b6a04:	681b      	ldr	r3, [r3, #0]
   b6a06:	68db      	ldr	r3, [r3, #12]
   b6a08:	9301      	str	r3, [sp, #4]
   b6a0a:	bd08      	pop	{r3, pc}
   b6a0c:	00030240 	.word	0x00030240

000b6a10 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6a10:	b508      	push	{r3, lr}
   b6a12:	4b02      	ldr	r3, [pc, #8]	; (b6a1c <network_ready+0xc>)
   b6a14:	681b      	ldr	r3, [r3, #0]
   b6a16:	691b      	ldr	r3, [r3, #16]
   b6a18:	9301      	str	r3, [sp, #4]
   b6a1a:	bd08      	pop	{r3, pc}
   b6a1c:	00030240 	.word	0x00030240

000b6a20 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6a20:	b508      	push	{r3, lr}
   b6a22:	4b02      	ldr	r3, [pc, #8]	; (b6a2c <network_on+0xc>)
   b6a24:	681b      	ldr	r3, [r3, #0]
   b6a26:	695b      	ldr	r3, [r3, #20]
   b6a28:	9301      	str	r3, [sp, #4]
   b6a2a:	bd08      	pop	{r3, pc}
   b6a2c:	00030240 	.word	0x00030240

000b6a30 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6a30:	b508      	push	{r3, lr}
   b6a32:	4b02      	ldr	r3, [pc, #8]	; (b6a3c <network_off+0xc>)
   b6a34:	681b      	ldr	r3, [r3, #0]
   b6a36:	699b      	ldr	r3, [r3, #24]
   b6a38:	9301      	str	r3, [sp, #4]
   b6a3a:	bd08      	pop	{r3, pc}
   b6a3c:	00030240 	.word	0x00030240

000b6a40 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6a40:	b508      	push	{r3, lr}
   b6a42:	4b02      	ldr	r3, [pc, #8]	; (b6a4c <network_listen+0xc>)
   b6a44:	681b      	ldr	r3, [r3, #0]
   b6a46:	69db      	ldr	r3, [r3, #28]
   b6a48:	9301      	str	r3, [sp, #4]
   b6a4a:	bd08      	pop	{r3, pc}
   b6a4c:	00030240 	.word	0x00030240

000b6a50 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6a50:	b508      	push	{r3, lr}
   b6a52:	4b02      	ldr	r3, [pc, #8]	; (b6a5c <network_listening+0xc>)
   b6a54:	681b      	ldr	r3, [r3, #0]
   b6a56:	6a1b      	ldr	r3, [r3, #32]
   b6a58:	9301      	str	r3, [sp, #4]
   b6a5a:	bd08      	pop	{r3, pc}
   b6a5c:	00030240 	.word	0x00030240

000b6a60 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6a60:	b508      	push	{r3, lr}
   b6a62:	4b02      	ldr	r3, [pc, #8]	; (b6a6c <network_set_listen_timeout+0xc>)
   b6a64:	681b      	ldr	r3, [r3, #0]
   b6a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6a68:	9301      	str	r3, [sp, #4]
   b6a6a:	bd08      	pop	{r3, pc}
   b6a6c:	00030240 	.word	0x00030240

000b6a70 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6a70:	b508      	push	{r3, lr}
   b6a72:	4b02      	ldr	r3, [pc, #8]	; (b6a7c <network_get_listen_timeout+0xc>)
   b6a74:	681b      	ldr	r3, [r3, #0]
   b6a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6a78:	9301      	str	r3, [sp, #4]
   b6a7a:	bd08      	pop	{r3, pc}
   b6a7c:	00030240 	.word	0x00030240

000b6a80 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6a80:	b508      	push	{r3, lr}
   b6a82:	4b02      	ldr	r3, [pc, #8]	; (b6a8c <network_is_on+0xc>)
   b6a84:	681b      	ldr	r3, [r3, #0]
   b6a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6a88:	9301      	str	r3, [sp, #4]
   b6a8a:	bd08      	pop	{r3, pc}
   b6a8c:	00030240 	.word	0x00030240

000b6a90 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6a90:	b508      	push	{r3, lr}
   b6a92:	4b02      	ldr	r3, [pc, #8]	; (b6a9c <network_is_off+0xc>)
   b6a94:	681b      	ldr	r3, [r3, #0]
   b6a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6a98:	9301      	str	r3, [sp, #4]
   b6a9a:	bd08      	pop	{r3, pc}
   b6a9c:	00030240 	.word	0x00030240

000b6aa0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6aa0:	b508      	push	{r3, lr}
   b6aa2:	4b02      	ldr	r3, [pc, #8]	; (b6aac <malloc+0xc>)
   b6aa4:	681b      	ldr	r3, [r3, #0]
   b6aa6:	681b      	ldr	r3, [r3, #0]
   b6aa8:	9301      	str	r3, [sp, #4]
   b6aaa:	bd08      	pop	{r3, pc}
   b6aac:	0003021c 	.word	0x0003021c

000b6ab0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6ab0:	b508      	push	{r3, lr}
   b6ab2:	4b02      	ldr	r3, [pc, #8]	; (b6abc <free+0xc>)
   b6ab4:	681b      	ldr	r3, [r3, #0]
   b6ab6:	685b      	ldr	r3, [r3, #4]
   b6ab8:	9301      	str	r3, [sp, #4]
   b6aba:	bd08      	pop	{r3, pc}
   b6abc:	0003021c 	.word	0x0003021c

000b6ac0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6ac0:	b508      	push	{r3, lr}
   b6ac2:	4b02      	ldr	r3, [pc, #8]	; (b6acc <realloc+0xc>)
   b6ac4:	681b      	ldr	r3, [r3, #0]
   b6ac6:	689b      	ldr	r3, [r3, #8]
   b6ac8:	9301      	str	r3, [sp, #4]
   b6aca:	bd08      	pop	{r3, pc}
   b6acc:	0003021c 	.word	0x0003021c

000b6ad0 <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b6ad0:	b508      	push	{r3, lr}
   b6ad2:	4b02      	ldr	r3, [pc, #8]	; (b6adc <sscanf+0xc>)
   b6ad4:	681b      	ldr	r3, [r3, #0]
   b6ad6:	695b      	ldr	r3, [r3, #20]
   b6ad8:	9301      	str	r3, [sp, #4]
   b6ada:	bd08      	pop	{r3, pc}
   b6adc:	0003021c 	.word	0x0003021c

000b6ae0 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6ae0:	b508      	push	{r3, lr}
   b6ae2:	4b02      	ldr	r3, [pc, #8]	; (b6aec <abort+0xc>)
   b6ae4:	681b      	ldr	r3, [r3, #0]
   b6ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6ae8:	9301      	str	r3, [sp, #4]
   b6aea:	bd08      	pop	{r3, pc}
   b6aec:	0003021c 	.word	0x0003021c

000b6af0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b6af0:	b508      	push	{r3, lr}
   b6af2:	4b02      	ldr	r3, [pc, #8]	; (b6afc <_malloc_r+0xc>)
   b6af4:	681b      	ldr	r3, [r3, #0]
   b6af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6af8:	9301      	str	r3, [sp, #4]
   b6afa:	bd08      	pop	{r3, pc}
   b6afc:	0003021c 	.word	0x0003021c

000b6b00 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6b00:	b508      	push	{r3, lr}
   b6b02:	4b02      	ldr	r3, [pc, #8]	; (b6b0c <__errno+0xc>)
   b6b04:	681b      	ldr	r3, [r3, #0]
   b6b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6b08:	9301      	str	r3, [sp, #4]
   b6b0a:	bd08      	pop	{r3, pc}
   b6b0c:	0003021c 	.word	0x0003021c

000b6b10 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6b10:	b508      	push	{r3, lr}
   b6b12:	4b02      	ldr	r3, [pc, #8]	; (b6b1c <__assert_func+0xc>)
   b6b14:	681b      	ldr	r3, [r3, #0]
   b6b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6b18:	9301      	str	r3, [sp, #4]
   b6b1a:	bd08      	pop	{r3, pc}
   b6b1c:	0003021c 	.word	0x0003021c

000b6b20 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6b20:	b508      	push	{r3, lr}
   b6b22:	4b02      	ldr	r3, [pc, #8]	; (b6b2c <newlib_impure_ptr_callback+0xc>)
   b6b24:	681b      	ldr	r3, [r3, #0]
   b6b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6b28:	9301      	str	r3, [sp, #4]
   b6b2a:	bd08      	pop	{r3, pc}
   b6b2c:	0003021c 	.word	0x0003021c

000b6b30 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6b30:	2100      	movs	r1, #0
   b6b32:	f7ff bf1d 	b.w	b6970 <system_delay_ms>

000b6b36 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6b36:	4770      	bx	lr

000b6b38 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b6b38:	4770      	bx	lr

000b6b3a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b6b3a:	4770      	bx	lr

000b6b3c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6b3c:	4770      	bx	lr
	...

000b6b40 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6b40:	4b06      	ldr	r3, [pc, #24]	; (b6b5c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6b42:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6b44:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6b46:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6b4a:	d005      	beq.n	b6b58 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6b4c:	4608      	mov	r0, r1
   b6b4e:	f002 fb39 	bl	b91c4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6b52:	2800      	cmp	r0, #0
   b6b54:	bf08      	it	eq
   b6b56:	2400      	moveq	r4, #0
      }
   b6b58:	4620      	mov	r0, r4
   b6b5a:	bd10      	pop	{r4, pc}
   b6b5c:	000bc8c8 	.word	0x000bc8c8

000b6b60 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6b60:	4b06      	ldr	r3, [pc, #24]	; (b6b7c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6b62:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6b64:	b510      	push	{r4, lr}
   b6b66:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6b6a:	d005      	beq.n	b6b78 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6b6c:	4608      	mov	r0, r1
   b6b6e:	f002 fb29 	bl	b91c4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6b72:	2800      	cmp	r0, #0
   b6b74:	bf08      	it	eq
   b6b76:	2400      	moveq	r4, #0
      }
   b6b78:	4620      	mov	r0, r4
   b6b7a:	bd10      	pop	{r4, pc}
   b6b7c:	000bc8c8 	.word	0x000bc8c8

000b6b80 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6b80:	4b06      	ldr	r3, [pc, #24]	; (b6b9c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6b82:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6b84:	b510      	push	{r4, lr}
   b6b86:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6b8a:	d005      	beq.n	b6b98 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6b8c:	4608      	mov	r0, r1
   b6b8e:	f002 fb19 	bl	b91c4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6b92:	2800      	cmp	r0, #0
   b6b94:	bf08      	it	eq
   b6b96:	2400      	moveq	r4, #0
      }
   b6b98:	4620      	mov	r0, r4
   b6b9a:	bd10      	pop	{r4, pc}
   b6b9c:	000bc8c8 	.word	0x000bc8c8

000b6ba0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6ba0:	b510      	push	{r4, lr}
   b6ba2:	2168      	movs	r1, #104	; 0x68
   b6ba4:	4604      	mov	r4, r0
   b6ba6:	f7fd fa7c 	bl	b40a2 <_ZdlPvj>
   b6baa:	4620      	mov	r0, r4
   b6bac:	bd10      	pop	{r4, pc}

000b6bae <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6bae:	b510      	push	{r4, lr}
   b6bb0:	2128      	movs	r1, #40	; 0x28
   b6bb2:	4604      	mov	r4, r0
   b6bb4:	f7fd fa75 	bl	b40a2 <_ZdlPvj>
   b6bb8:	4620      	mov	r0, r4
   b6bba:	bd10      	pop	{r4, pc}

000b6bbc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6bbc:	b510      	push	{r4, lr}
   b6bbe:	2130      	movs	r1, #48	; 0x30
   b6bc0:	4604      	mov	r4, r0
   b6bc2:	f7fd fa6e 	bl	b40a2 <_ZdlPvj>
   b6bc6:	4620      	mov	r0, r4
   b6bc8:	bd10      	pop	{r4, pc}

000b6bca <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6bca:	2168      	movs	r1, #104	; 0x68
   b6bcc:	f7fd ba69 	b.w	b40a2 <_ZdlPvj>

000b6bd0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6bd0:	2128      	movs	r1, #40	; 0x28
   b6bd2:	f7fd ba66 	b.w	b40a2 <_ZdlPvj>

000b6bd6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6bd6:	2130      	movs	r1, #48	; 0x30
   b6bd8:	f7fd ba63 	b.w	b40a2 <_ZdlPvj>

000b6bdc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b6bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6bde:	2500      	movs	r5, #0
   b6be0:	1cec      	adds	r4, r5, #3
   b6be2:	428c      	cmp	r4, r1
   b6be4:	d80d      	bhi.n	b6c02 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b6be6:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b6be8:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b6bea:	5d87      	ldrb	r7, [r0, r6]
   b6bec:	4297      	cmp	r7, r2
   b6bee:	d105      	bne.n	b6bfc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b6bf0:	4426      	add	r6, r4
   b6bf2:	42b1      	cmp	r1, r6
   b6bf4:	d305      	bcc.n	b6c02 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b6bf6:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b6bf8:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b6bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b6bfc:	3401      	adds	r4, #1
   b6bfe:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6c00:	e7ee      	b.n	b6be0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b6c02:	2000      	movs	r0, #0
   b6c04:	e7f9      	b.n	b6bfa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b6c08 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b6c08:	4a02      	ldr	r2, [pc, #8]	; (b6c14 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b6c0a:	4903      	ldr	r1, [pc, #12]	; (b6c18 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b6c0c:	200a      	movs	r0, #10
   b6c0e:	f7ff be97 	b.w	b6940 <panic_>
   b6c12:	bf00      	nop
   b6c14:	000b66d1 	.word	0x000b66d1
   b6c18:	000bc728 	.word	0x000bc728

000b6c1c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6c1c:	b430      	push	{r4, r5}
   b6c1e:	460d      	mov	r5, r1
   b6c20:	4611      	mov	r1, r2
   b6c22:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b6c24:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b6c26:	6809      	ldr	r1, [r1, #0]
   b6c28:	6828      	ldr	r0, [r5, #0]
   b6c2a:	e9d3 4300 	ldrd	r4, r3, [r3]
   b6c2e:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b6c30:	bc30      	pop	{r4, r5}
   b6c32:	4760      	bx	ip

000b6c34 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b6c34:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6c36:	b538      	push	{r3, r4, r5, lr}
   b6c38:	4604      	mov	r4, r0
	switch (__op)
   b6c3a:	d102      	bne.n	b6c42 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6c3c:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6c3e:	6023      	str	r3, [r4, #0]
	}
   b6c40:	e003      	b.n	b6c4a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b6c42:	2a02      	cmp	r2, #2
   b6c44:	d003      	beq.n	b6c4e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b6c46:	2a03      	cmp	r2, #3
   b6c48:	d00d      	beq.n	b6c66 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b6c4a:	2000      	movs	r0, #0
   b6c4c:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6c4e:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b6c50:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6c52:	f7fd fa20 	bl	b4096 <_Znwj>
   b6c56:	4603      	mov	r3, r0
   b6c58:	2800      	cmp	r0, #0
   b6c5a:	d0f0      	beq.n	b6c3e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b6c5c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6c60:	e883 0003 	stmia.w	r3, {r0, r1}
   b6c64:	e7eb      	b.n	b6c3e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6c66:	6800      	ldr	r0, [r0, #0]
   b6c68:	2800      	cmp	r0, #0
   b6c6a:	d0ee      	beq.n	b6c4a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b6c6c:	2108      	movs	r1, #8
   b6c6e:	f7fd fa18 	bl	b40a2 <_ZdlPvj>
   b6c72:	e7ea      	b.n	b6c4a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b6c74 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b6c74:	b510      	push	{r4, lr}
      if (_M_manager)
   b6c76:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b6c78:	4604      	mov	r4, r0
      if (_M_manager)
   b6c7a:	b113      	cbz	r3, b6c82 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6c7c:	2203      	movs	r2, #3
   b6c7e:	4601      	mov	r1, r0
   b6c80:	4798      	blx	r3
    }
   b6c82:	4620      	mov	r0, r4
   b6c84:	bd10      	pop	{r4, pc}

000b6c86 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6c86:	b510      	push	{r4, lr}
   b6c88:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b6c8a:	3058      	adds	r0, #88	; 0x58
   b6c8c:	f7ff fff2 	bl	b6c74 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b6c90:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b6c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6c98:	f001 bbe2 	b.w	b8460 <_ZN6StringD1Ev>

000b6c9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b6c9c:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b6c9e:	6843      	ldr	r3, [r0, #4]
   b6ca0:	3b01      	subs	r3, #1
    {
   b6ca2:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b6ca4:	6043      	str	r3, [r0, #4]
   b6ca6:	b963      	cbnz	r3, b6cc2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b6ca8:	6803      	ldr	r3, [r0, #0]
   b6caa:	689b      	ldr	r3, [r3, #8]
   b6cac:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6cae:	68a3      	ldr	r3, [r4, #8]
   b6cb0:	3b01      	subs	r3, #1
   b6cb2:	60a3      	str	r3, [r4, #8]
   b6cb4:	b92b      	cbnz	r3, b6cc2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b6cb6:	6823      	ldr	r3, [r4, #0]
   b6cb8:	4620      	mov	r0, r4
   b6cba:	68db      	ldr	r3, [r3, #12]
    }
   b6cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b6cc0:	4718      	bx	r3
    }
   b6cc2:	bd10      	pop	{r4, pc}

000b6cc4 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b6cc4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6cc8:	b2da      	uxtb	r2, r3
   b6cca:	2a09      	cmp	r2, #9
   b6ccc:	d801      	bhi.n	b6cd2 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b6cce:	4618      	mov	r0, r3
   b6cd0:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b6cd2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b6cd6:	2b05      	cmp	r3, #5
   b6cd8:	d801      	bhi.n	b6cde <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b6cda:	3857      	subs	r0, #87	; 0x57
   b6cdc:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b6cde:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b6ce2:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b6ce4:	bf94      	ite	ls
   b6ce6:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b6ce8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b6cec:	4770      	bx	lr
	...

000b6cf0 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b6cf0:	b510      	push	{r4, lr}
            locked_(false) {
   b6cf2:	2300      	movs	r3, #0
   b6cf4:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b6cf6:	4b04      	ldr	r3, [pc, #16]	; (b6d08 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b6cf8:	4604      	mov	r4, r0
   b6cfa:	6818      	ldr	r0, [r3, #0]
   b6cfc:	f7ff fcd0 	bl	b66a0 <os_mutex_recursive_lock>
        locked_ = true;
   b6d00:	2301      	movs	r3, #1
   b6d02:	7023      	strb	r3, [r4, #0]
    }
   b6d04:	4620      	mov	r0, r4
   b6d06:	bd10      	pop	{r4, pc}
   b6d08:	2003e6c0 	.word	0x2003e6c0

000b6d0c <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b6d0c:	b510      	push	{r4, lr}
        if (locked_) {
   b6d0e:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b6d10:	4604      	mov	r4, r0
        if (locked_) {
   b6d12:	b11b      	cbz	r3, b6d1c <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b6d14:	4b02      	ldr	r3, [pc, #8]	; (b6d20 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b6d16:	6818      	ldr	r0, [r3, #0]
   b6d18:	f7ff fcca 	bl	b66b0 <os_mutex_recursive_unlock>
    }
   b6d1c:	4620      	mov	r0, r4
   b6d1e:	bd10      	pop	{r4, pc}
   b6d20:	2003e6c0 	.word	0x2003e6c0

000b6d24 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b6d24:	b082      	sub	sp, #8
   b6d26:	4603      	mov	r3, r0
    address_ = addr;
   b6d28:	6808      	ldr	r0, [r1, #0]
   b6d2a:	6849      	ldr	r1, [r1, #4]
   b6d2c:	466a      	mov	r2, sp
   b6d2e:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b6d30:	466a      	mov	r2, sp
   b6d32:	ca03      	ldmia	r2!, {r0, r1}
   b6d34:	6018      	str	r0, [r3, #0]
}
   b6d36:	4618      	mov	r0, r3
    address_ = addr.address_;
   b6d38:	6059      	str	r1, [r3, #4]
}
   b6d3a:	b002      	add	sp, #8
   b6d3c:	4770      	bx	lr

000b6d3e <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b6d3e:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b6d40:	7982      	ldrb	r2, [r0, #6]
   b6d42:	798b      	ldrb	r3, [r1, #6]
   b6d44:	429a      	cmp	r2, r3
   b6d46:	d106      	bne.n	b6d56 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b6d48:	2206      	movs	r2, #6
   b6d4a:	f003 faa2 	bl	ba292 <memcmp>
   b6d4e:	fab0 f080 	clz	r0, r0
   b6d52:	0940      	lsrs	r0, r0, #5
}
   b6d54:	bd08      	pop	{r3, pc}
    return false;
   b6d56:	2000      	movs	r0, #0
   b6d58:	e7fc      	b.n	b6d54 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b6d5a <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b6d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6d5e:	6003      	str	r3, [r0, #0]
   b6d60:	8083      	strh	r3, [r0, #4]
}
   b6d62:	2000      	movs	r0, #0
   b6d64:	4770      	bx	lr

000b6d66 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b6d66:	b508      	push	{r3, lr}
   b6d68:	4602      	mov	r2, r0
        : address_{} {
   b6d6a:	2100      	movs	r1, #0
   b6d6c:	6001      	str	r1, [r0, #0]
   b6d6e:	6041      	str	r1, [r0, #4]
    clear();
   b6d70:	f7ff fff3 	bl	b6d5a <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b6d74:	7191      	strb	r1, [r2, #6]
}
   b6d76:	4610      	mov	r0, r2
   b6d78:	bd08      	pop	{r3, pc}
	...

000b6d7c <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b6d7c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b6d7e:	2301      	movs	r3, #1
   b6d80:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6d82:	4b05      	ldr	r3, [pc, #20]	; (b6d98 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b6d84:	4602      	mov	r2, r0
   b6d86:	f103 0110 	add.w	r1, r3, #16
   b6d8a:	f853 4b04 	ldr.w	r4, [r3], #4
   b6d8e:	f842 4b04 	str.w	r4, [r2], #4
   b6d92:	428b      	cmp	r3, r1
   b6d94:	d1f9      	bne.n	b6d8a <_ZN8particle7BleUuidC1Ev+0xe>
}
   b6d96:	bd10      	pop	{r4, pc}
   b6d98:	000bc8d6 	.word	0x000bc8d6

000b6d9c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6d9c:	b510      	push	{r4, lr}
    if (uuid128) {
   b6d9e:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6da0:	4604      	mov	r4, r0
    if (uuid128) {
   b6da2:	b1b1      	cbz	r1, b6dd2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b6da4:	2a01      	cmp	r2, #1
   b6da6:	f101 0210 	add.w	r2, r1, #16
   b6daa:	d10a      	bne.n	b6dc2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b6dac:	4601      	mov	r1, r0
   b6dae:	f853 0b04 	ldr.w	r0, [r3], #4
   b6db2:	f841 0b04 	str.w	r0, [r1], #4
   b6db6:	4293      	cmp	r3, r2
   b6db8:	d1f9      	bne.n	b6dae <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b6dba:	2301      	movs	r3, #1
   b6dbc:	6123      	str	r3, [r4, #16]
}
   b6dbe:	4620      	mov	r0, r4
   b6dc0:	bd10      	pop	{r4, pc}
   b6dc2:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b6dc4:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b6dc8:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b6dcc:	429a      	cmp	r2, r3
   b6dce:	d1f9      	bne.n	b6dc4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b6dd0:	e7f3      	b.n	b6dba <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b6dd2:	2210      	movs	r2, #16
   b6dd4:	f003 fa95 	bl	ba302 <memset>
   b6dd8:	e7f1      	b.n	b6dbe <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b6dda <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b6dda:	b538      	push	{r3, r4, r5, lr}
   b6ddc:	4604      	mov	r4, r0
   b6dde:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b6de0:	461a      	mov	r2, r3
   b6de2:	f7ff ffdb 	bl	b6d9c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b6de6:	81a5      	strh	r5, [r4, #12]
}
   b6de8:	4620      	mov	r0, r4
   b6dea:	bd38      	pop	{r3, r4, r5, pc}

000b6dec <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b6dec:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b6dee:	6902      	ldr	r2, [r0, #16]
   b6df0:	b922      	cbnz	r2, b6dfc <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b6df2:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6df4:	3800      	subs	r0, #0
   b6df6:	bf18      	it	ne
   b6df8:	2001      	movne	r0, #1
}
   b6dfa:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6dfc:	4902      	ldr	r1, [pc, #8]	; (b6e08 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b6dfe:	2210      	movs	r2, #16
   b6e00:	f003 fa47 	bl	ba292 <memcmp>
   b6e04:	e7f6      	b.n	b6df4 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b6e06:	bf00      	nop
   b6e08:	000bc8f6 	.word	0x000bc8f6

000b6e0c <_ZNK8particle7BleUuid4typeEv>:
}
   b6e0c:	6900      	ldr	r0, [r0, #16]
   b6e0e:	4770      	bx	lr

000b6e10 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b6e10:	b538      	push	{r3, r4, r5, lr}
   b6e12:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b6e14:	2214      	movs	r2, #20
   b6e16:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b6e18:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b6e1a:	f003 fa72 	bl	ba302 <memset>
    if (type_ == BleUuidType::SHORT) {
   b6e1e:	6923      	ldr	r3, [r4, #16]
   b6e20:	b91b      	cbnz	r3, b6e2a <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b6e22:	89a3      	ldrh	r3, [r4, #12]
   b6e24:	802b      	strh	r3, [r5, #0]
}
   b6e26:	4628      	mov	r0, r5
   b6e28:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b6e2a:	2301      	movs	r3, #1
   b6e2c:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b6e2e:	4621      	mov	r1, r4
   b6e30:	462b      	mov	r3, r5
   b6e32:	f104 0210 	add.w	r2, r4, #16
   b6e36:	f851 0b04 	ldr.w	r0, [r1], #4
   b6e3a:	f843 0b04 	str.w	r0, [r3], #4
   b6e3e:	4291      	cmp	r1, r2
   b6e40:	d1f9      	bne.n	b6e36 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b6e42:	e7f0      	b.n	b6e26 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b6e44 <_ZNK8particle7BleUuid7shortedEv>:
}
   b6e44:	8980      	ldrh	r0, [r0, #12]
   b6e46:	4770      	bx	lr

000b6e48 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b6e48:	4770      	bx	lr

000b6e4a <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b6e4a:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6e4c:	6902      	ldr	r2, [r0, #16]
   b6e4e:	690b      	ldr	r3, [r1, #16]
   b6e50:	429a      	cmp	r2, r3
   b6e52:	d106      	bne.n	b6e62 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b6e54:	2210      	movs	r2, #16
   b6e56:	f003 fa1c 	bl	ba292 <memcmp>
   b6e5a:	fab0 f080 	clz	r0, r0
   b6e5e:	0940      	lsrs	r0, r0, #5
}
   b6e60:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6e62:	2000      	movs	r0, #0
   b6e64:	e7fc      	b.n	b6e60 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b6e68 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b6e68:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b6e6a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b6e6e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6e70:	4b34      	ldr	r3, [pc, #208]	; (b6f44 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b6e72:	460c      	mov	r4, r1
   b6e74:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6e76:	4602      	mov	r2, r0
   b6e78:	f103 0110 	add.w	r1, r3, #16
   b6e7c:	f853 0b04 	ldr.w	r0, [r3], #4
   b6e80:	f842 0b04 	str.w	r0, [r2], #4
   b6e84:	428b      	cmp	r3, r1
   b6e86:	d1f9      	bne.n	b6e7c <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b6e88:	b344      	cbz	r4, b6edc <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b6e8a:	2124      	movs	r1, #36	; 0x24
   b6e8c:	4620      	mov	r0, r4
   b6e8e:	f003 faac 	bl	ba3ea <strnlen>
   b6e92:	2804      	cmp	r0, #4
   b6e94:	f04f 0500 	mov.w	r5, #0
   b6e98:	d123      	bne.n	b6ee2 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b6e9a:	f8ad 5004 	strh.w	r5, [sp, #4]
   b6e9e:	af01      	add	r7, sp, #4
   b6ea0:	1ca5      	adds	r5, r4, #2
   b6ea2:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b6ea4:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b6ea8:	f7ff ff0c 	bl	b6cc4 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b6eac:	f1b0 0800 	subs.w	r8, r0, #0
   b6eb0:	db12      	blt.n	b6ed8 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b6eb2:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b6eb6:	f7ff ff05 	bl	b6cc4 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b6eba:	2800      	cmp	r0, #0
   b6ebc:	db0c      	blt.n	b6ed8 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b6ebe:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6ec0:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b6ec4:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6ec6:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b6eca:	d1eb      	bne.n	b6ea4 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b6ecc:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b6ed0:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b6ed2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b6ed6:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b6ed8:	2300      	movs	r3, #0
   b6eda:	6133      	str	r3, [r6, #16]
}
   b6edc:	b002      	add	sp, #8
   b6ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b6ee2:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6ee6:	2124      	movs	r1, #36	; 0x24
   b6ee8:	4620      	mov	r0, r4
   b6eea:	f003 fa7e 	bl	ba3ea <strnlen>
   b6eee:	42a8      	cmp	r0, r5
   b6ef0:	d807      	bhi.n	b6f02 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b6ef2:	4642      	mov	r2, r8
   b6ef4:	2100      	movs	r1, #0
   b6ef6:	4630      	mov	r0, r6
}
   b6ef8:	b002      	add	sp, #8
   b6efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b6efe:	f003 ba00 	b.w	ba302 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6f02:	f1b8 0f00 	cmp.w	r8, #0
   b6f06:	d0e9      	beq.n	b6edc <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b6f08:	5d60      	ldrb	r0, [r4, r5]
   b6f0a:	f7ff fedb 	bl	b6cc4 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b6f0e:	0603      	lsls	r3, r0, #24
   b6f10:	d415      	bmi.n	b6f3e <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b6f12:	0100      	lsls	r0, r0, #4
   b6f14:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b6f18:	b2c7      	uxtb	r7, r0
   b6f1a:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b6f1e:	2124      	movs	r1, #36	; 0x24
   b6f20:	4620      	mov	r0, r4
   b6f22:	f003 fa62 	bl	ba3ea <strnlen>
   b6f26:	3501      	adds	r5, #1
   b6f28:	42a8      	cmp	r0, r5
   b6f2a:	d908      	bls.n	b6f3e <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b6f2c:	5d60      	ldrb	r0, [r4, r5]
   b6f2e:	f7ff fec9 	bl	b6cc4 <_ZN8particle11hexToNibbleEc>
   b6f32:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b6f34:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b6f36:	bfa4      	itt	ge
   b6f38:	4338      	orrge	r0, r7
   b6f3a:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6f3e:	3501      	adds	r5, #1
   b6f40:	e7d1      	b.n	b6ee6 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b6f42:	bf00      	nop
   b6f44:	000bc8d6 	.word	0x000bc8d6

000b6f48 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b6f48:	b513      	push	{r0, r1, r4, lr}
   b6f4a:	4604      	mov	r4, r0
   b6f4c:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b6f4e:	f7ff ff15 	bl	b6d7c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b6f52:	4620      	mov	r0, r4
   b6f54:	9901      	ldr	r1, [sp, #4]
   b6f56:	f7ff ff87 	bl	b6e68 <_ZN8particle7BleUuid9constructEPKc>
}
   b6f5a:	4620      	mov	r0, r4
   b6f5c:	b002      	add	sp, #8
   b6f5e:	bd10      	pop	{r4, pc}

000b6f60 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b6f60:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b6f62:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6f66:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b6f68:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b6f6a:	8043      	strh	r3, [r0, #2]
   b6f6c:	220e      	movs	r2, #14
   b6f6e:	4629      	mov	r1, r5
   b6f70:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b6f72:	7105      	strb	r5, [r0, #4]
   b6f74:	3006      	adds	r0, #6
   b6f76:	f003 f9c4 	bl	ba302 <memset>
   b6f7a:	f104 0014 	add.w	r0, r4, #20
   b6f7e:	f7ff fefd 	bl	b6d7c <_ZN8particle7BleUuidC1Ev>
   b6f82:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6f86:	f7ff fef9 	bl	b6d7c <_ZN8particle7BleUuidC1Ev>
   b6f8a:	4904      	ldr	r1, [pc, #16]	; (b6f9c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b6f8c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b6f90:	f001 fab1 	bl	b84f6 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b6f94:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b6f96:	4620      	mov	r0, r4
   b6f98:	bd38      	pop	{r3, r4, r5, pc}
   b6f9a:	bf00      	nop
   b6f9c:	000bc6f2 	.word	0x000bc6f2

000b6fa0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b6fa0:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b6fa2:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b6fa6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b6faa:	4293      	cmp	r3, r2
   b6fac:	4618      	mov	r0, r3
   b6fae:	d006      	beq.n	b6fbe <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b6fb0:	6804      	ldr	r4, [r0, #0]
   b6fb2:	8824      	ldrh	r4, [r4, #0]
   b6fb4:	428c      	cmp	r4, r1
   b6fb6:	f103 0308 	add.w	r3, r3, #8
   b6fba:	d1f6      	bne.n	b6faa <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b6fbc:	bd10      	pop	{r4, pc}
        return nullptr;
   b6fbe:	2000      	movs	r0, #0
   b6fc0:	e7fc      	b.n	b6fbc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b6fc4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b6fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6fc6:	4606      	mov	r6, r0
   b6fc8:	b085      	sub	sp, #20
   b6fca:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b6fcc:	460d      	mov	r5, r1
   b6fce:	2900      	cmp	r1, #0
   b6fd0:	d050      	beq.n	b7074 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b6fd2:	2a00      	cmp	r2, #0
   b6fd4:	d04e      	beq.n	b7074 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6fd6:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b6fd8:	7823      	ldrb	r3, [r4, #0]
   b6fda:	2af4      	cmp	r2, #244	; 0xf4
   b6fdc:	bf28      	it	cs
   b6fde:	22f4      	movcs	r2, #244	; 0xf4
   b6fe0:	b343      	cbz	r3, b7034 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b6fe2:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b6fe4:	0798      	lsls	r0, r3, #30
   b6fe6:	d509      	bpl.n	b6ffc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b6fe8:	89a0      	ldrh	r0, [r4, #12]
   b6fea:	9203      	str	r2, [sp, #12]
   b6fec:	2300      	movs	r3, #0
   b6fee:	f7ff faff 	bl	b65f0 <hal_ble_gatt_server_set_characteristic_value>
   b6ff2:	2800      	cmp	r0, #0
   b6ff4:	9a03      	ldr	r2, [sp, #12]
   b6ff6:	da03      	bge.n	b7000 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b6ff8:	b005      	add	sp, #20
   b6ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b6ffc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7000:	6834      	ldr	r4, [r6, #0]
   b7002:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b7004:	06d9      	lsls	r1, r3, #27
   b7006:	d509      	bpl.n	b701c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b7008:	2f01      	cmp	r7, #1
   b700a:	d007      	beq.n	b701c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b700c:	89a0      	ldrh	r0, [r4, #12]
   b700e:	2300      	movs	r3, #0
   b7010:	4629      	mov	r1, r5
}
   b7012:	b005      	add	sp, #20
   b7014:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7018:	f7ff bb26 	b.w	b6668 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b701c:	069b      	lsls	r3, r3, #26
   b701e:	d5eb      	bpl.n	b6ff8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b7020:	2f02      	cmp	r7, #2
   b7022:	d0e9      	beq.n	b6ff8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7024:	89a0      	ldrh	r0, [r4, #12]
   b7026:	2300      	movs	r3, #0
   b7028:	4629      	mov	r1, r5
}
   b702a:	b005      	add	sp, #20
   b702c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7030:	f7ff bb24 	b.w	b667c <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b7034:	8860      	ldrh	r0, [r4, #2]
   b7036:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b703a:	4288      	cmp	r0, r1
   b703c:	d01c      	beq.n	b7078 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b703e:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b7040:	074e      	lsls	r6, r1, #29
   b7042:	d501      	bpl.n	b7048 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b7044:	2f01      	cmp	r7, #1
   b7046:	d104      	bne.n	b7052 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7048:	070b      	lsls	r3, r1, #28
   b704a:	d409      	bmi.n	b7060 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b704c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7050:	e7d2      	b.n	b6ff8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b7052:	89a1      	ldrh	r1, [r4, #12]
   b7054:	9300      	str	r3, [sp, #0]
   b7056:	4613      	mov	r3, r2
   b7058:	462a      	mov	r2, r5
   b705a:	f7ff fadd 	bl	b6618 <hal_ble_gatt_client_write_without_response>
   b705e:	e7cb      	b.n	b6ff8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7060:	2f02      	cmp	r7, #2
   b7062:	d0f3      	beq.n	b704c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b7064:	2300      	movs	r3, #0
   b7066:	89a1      	ldrh	r1, [r4, #12]
   b7068:	9300      	str	r3, [sp, #0]
   b706a:	4613      	mov	r3, r2
   b706c:	462a      	mov	r2, r5
   b706e:	f7ff fac9 	bl	b6604 <hal_ble_gatt_client_write_with_response>
   b7072:	e7c1      	b.n	b6ff8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b7074:	4802      	ldr	r0, [pc, #8]	; (b7080 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b7076:	e7bf      	b.n	b6ff8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b7078:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b707c:	e7bc      	b.n	b6ff8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b707e:	bf00      	nop
   b7080:	fffffef2 	.word	0xfffffef2

000b7084 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b7084:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7086:	460c      	mov	r4, r1
   b7088:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b708a:	21f4      	movs	r1, #244	; 0xf4
   b708c:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b708e:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b7090:	f003 f9ab 	bl	ba3ea <strnlen>
   b7094:	9b01      	ldr	r3, [sp, #4]
   b7096:	4602      	mov	r2, r0
   b7098:	4621      	mov	r1, r4
   b709a:	4628      	mov	r0, r5
}
   b709c:	b003      	add	sp, #12
   b709e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b70a2:	f7ff bf8f 	b.w	b6fc4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000b70a8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b70a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b70ac:	2600      	movs	r6, #0
   b70ae:	6006      	str	r6, [r0, #0]
   b70b0:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b70b2:	2028      	movs	r0, #40	; 0x28
   b70b4:	460c      	mov	r4, r1
   b70b6:	f7fc ffee 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b70ba:	1e05      	subs	r5, r0, #0
   b70bc:	f105 080c 	add.w	r8, r5, #12
   b70c0:	d00f      	beq.n	b70e2 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b70c2:	2301      	movs	r3, #1
   b70c4:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b70c8:	4b08      	ldr	r3, [pc, #32]	; (b70ec <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b70ca:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b70cc:	4640      	mov	r0, r8
   b70ce:	f7ff fe55 	bl	b6d7c <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b70d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b70d4:	622e      	str	r6, [r5, #32]
   b70d6:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b70da:	4646      	mov	r6, r8
   b70dc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b70de:	6823      	ldr	r3, [r4, #0]
   b70e0:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b70e2:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b70e6:	4638      	mov	r0, r7
   b70e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b70ec:	000bc898 	.word	0x000bc898

000b70f0 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b70f0:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b70f2:	2500      	movs	r5, #0
   b70f4:	6005      	str	r5, [r0, #0]
   b70f6:	4606      	mov	r6, r0
   b70f8:	2030      	movs	r0, #48	; 0x30
   b70fa:	f7fc ffcc 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b70fe:	4604      	mov	r4, r0
   b7100:	b188      	cbz	r0, b7126 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b7102:	2301      	movs	r3, #1
   b7104:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b7108:	4b09      	ldr	r3, [pc, #36]	; (b7130 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b710a:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b710c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7110:	8183      	strh	r3, [r0, #12]
   b7112:	300e      	adds	r0, #14
   b7114:	f7ff fe27 	bl	b6d66 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b7118:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b711c:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b7120:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b7124:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b7126:	6074      	str	r4, [r6, #4]
   b7128:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b712a:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b712c:	4630      	mov	r0, r6
   b712e:	bd70      	pop	{r4, r5, r6, pc}
   b7130:	000bc8b4 	.word	0x000bc8b4

000b7134 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b7134:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7136:	460d      	mov	r5, r1
   b7138:	4604      	mov	r4, r0
    WiringBleLock lk;
   b713a:	a801      	add	r0, sp, #4
   b713c:	f7ff fdd8 	bl	b6cf0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b7140:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b7142:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b7146:	6023      	str	r3, [r4, #0]
   b7148:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b714c:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b714e:	a801      	add	r0, sp, #4
   b7150:	f7ff fddc 	bl	b6d0c <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b7154:	4620      	mov	r0, r4
   b7156:	b003      	add	sp, #12
   b7158:	bd30      	pop	{r4, r5, pc}

000b715a <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b715a:	b530      	push	{r4, r5, lr}
   b715c:	4605      	mov	r5, r0
   b715e:	b087      	sub	sp, #28
   b7160:	460c      	mov	r4, r1
    WiringBleLock lk;
   b7162:	a801      	add	r0, sp, #4
   b7164:	f7ff fdc4 	bl	b6cf0 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b7168:	682a      	ldr	r2, [r5, #0]
   b716a:	6823      	ldr	r3, [r4, #0]
   b716c:	8812      	ldrh	r2, [r2, #0]
   b716e:	881b      	ldrh	r3, [r3, #0]
   b7170:	429a      	cmp	r2, r3
   b7172:	d10d      	bne.n	b7190 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b7174:	4629      	mov	r1, r5
   b7176:	a802      	add	r0, sp, #8
   b7178:	f7ff ffdc 	bl	b7134 <_ZNK8particle13BlePeerDevice7addressEv>
   b717c:	4621      	mov	r1, r4
   b717e:	a804      	add	r0, sp, #16
   b7180:	f7ff ffd8 	bl	b7134 <_ZNK8particle13BlePeerDevice7addressEv>
   b7184:	a904      	add	r1, sp, #16
   b7186:	a802      	add	r0, sp, #8
   b7188:	f7ff fdd9 	bl	b6d3e <_ZNK8particle10BleAddresseqERKS0_>
   b718c:	4604      	mov	r4, r0
   b718e:	b900      	cbnz	r0, b7192 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b7190:	2400      	movs	r4, #0
    WiringBleLock lk;
   b7192:	a801      	add	r0, sp, #4
   b7194:	f7ff fdba 	bl	b6d0c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b7198:	4620      	mov	r0, r4
   b719a:	b007      	add	sp, #28
   b719c:	bd30      	pop	{r4, r5, pc}
	...

000b71a0 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b71a0:	b510      	push	{r4, lr}
   b71a2:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b71a4:	2064      	movs	r0, #100	; 0x64
   b71a6:	f7fc ff76 	bl	b4096 <_Znwj>
   b71aa:	b168      	cbz	r0, b71c8 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b71ac:	2300      	movs	r3, #0
   b71ae:	e9c0 3300 	strd	r3, r3, [r0]
   b71b2:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b71b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b71ba:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b71be:	6203      	str	r3, [r0, #32]
   b71c0:	62c3      	str	r3, [r0, #44]	; 0x2c
   b71c2:	63c3      	str	r3, [r0, #60]	; 0x3c
   b71c4:	64c3      	str	r3, [r0, #76]	; 0x4c
   b71c6:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b71c8:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b71ca:	b920      	cbnz	r0, b71d6 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b71cc:	4a0a      	ldr	r2, [pc, #40]	; (b71f8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b71ce:	490b      	ldr	r1, [pc, #44]	; (b71fc <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b71d0:	200a      	movs	r0, #10
   b71d2:	f7ff fbb5 	bl	b6940 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b71d6:	2000      	movs	r0, #0
   b71d8:	f7ff f9ce 	bl	b6578 <hal_ble_stack_init>
   b71dc:	b120      	cbz	r0, b71e8 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b71de:	4a06      	ldr	r2, [pc, #24]	; (b71f8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b71e0:	4907      	ldr	r1, [pc, #28]	; (b7200 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b71e2:	200a      	movs	r0, #10
   b71e4:	f7ff fbac 	bl	b6940 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b71e8:	6821      	ldr	r1, [r4, #0]
   b71ea:	4806      	ldr	r0, [pc, #24]	; (b7204 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b71ec:	2200      	movs	r2, #0
   b71ee:	f7ff fa31 	bl	b6654 <hal_ble_set_callback_on_periph_link_events>
}
   b71f2:	4620      	mov	r0, r4
   b71f4:	bd10      	pop	{r4, pc}
   b71f6:	bf00      	nop
   b71f8:	000b66d1 	.word	0x000b66d1
   b71fc:	000bc728 	.word	0x000bc728
   b7200:	000bc766 	.word	0x000bc766
   b7204:	000b77e9 	.word	0x000b77e9

000b7208 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b7208:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b720a:	4c0a      	ldr	r4, [pc, #40]	; (b7234 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b720c:	7823      	ldrb	r3, [r4, #0]
   b720e:	f3bf 8f5b 	dmb	ish
   b7212:	07db      	lsls	r3, r3, #31
   b7214:	d40c      	bmi.n	b7230 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b7216:	4620      	mov	r0, r4
   b7218:	f7fc ff45 	bl	b40a6 <__cxa_guard_acquire>
   b721c:	b140      	cbz	r0, b7230 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b721e:	4806      	ldr	r0, [pc, #24]	; (b7238 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b7220:	f7ff ffbe 	bl	b71a0 <_ZN8particle14BleLocalDeviceC1Ev>
   b7224:	4620      	mov	r0, r4
   b7226:	f7fc ff43 	bl	b40b0 <__cxa_guard_release>
   b722a:	4804      	ldr	r0, [pc, #16]	; (b723c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b722c:	f003 f820 	bl	ba270 <atexit>
    return instance;
}
   b7230:	4801      	ldr	r0, [pc, #4]	; (b7238 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b7232:	bd10      	pop	{r4, pc}
   b7234:	2003e6b8 	.word	0x2003e6b8
   b7238:	2003e6c4 	.word	0x2003e6c4
   b723c:	000b745d 	.word	0x000b745d

000b7240 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7240:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b7242:	6803      	ldr	r3, [r0, #0]
   b7244:	3b09      	subs	r3, #9
   b7246:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7248:	b08d      	sub	sp, #52	; 0x34
   b724a:	4604      	mov	r4, r0
   b724c:	460d      	mov	r5, r1
    switch (event->type) {
   b724e:	d811      	bhi.n	b7274 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b7250:	f7ff ffda 	bl	b7208 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b7254:	88a1      	ldrh	r1, [r4, #4]
   b7256:	6800      	ldr	r0, [r0, #0]
   b7258:	f7ff fea2 	bl	b6fa0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b725c:	4603      	mov	r3, r0
   b725e:	b958      	cbnz	r0, b7278 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b7260:	2220      	movs	r2, #32
   b7262:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b7266:	4a0b      	ldr	r2, [pc, #44]	; (b7294 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b7268:	9200      	str	r2, [sp, #0]
   b726a:	490b      	ldr	r1, [pc, #44]	; (b7298 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b726c:	aa04      	add	r2, sp, #16
   b726e:	2032      	movs	r0, #50	; 0x32
   b7270:	f7ff fb6e 	bl	b6950 <log_message>
}
   b7274:	b00d      	add	sp, #52	; 0x34
   b7276:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b7278:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b727a:	2a00      	cmp	r2, #0
   b727c:	d0fa      	beq.n	b7274 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b727e:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7282:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b7286:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b728a:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b728c:	aa04      	add	r2, sp, #16
   b728e:	a903      	add	r1, sp, #12
   b7290:	47a0      	blx	r4
}
   b7292:	e7ef      	b.n	b7274 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b7294:	000bc7a8 	.word	0x000bc7a8
   b7298:	000bc73f 	.word	0x000bc73f

000b729c <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b729c:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b729e:	2000      	movs	r0, #0
   b72a0:	f7ff f96a 	bl	b6578 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b72a4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b72a8:	bd08      	pop	{r3, pc}

000b72aa <_ZNK8particle14BleLocalDevice16provisioningModeEb>:

int BleLocalDevice::selectAntenna(BleAntennaType antenna) const {
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
}

int BleLocalDevice::provisioningMode(bool enabled) const {
   b72aa:	4608      	mov	r0, r1
    return system_ble_prov_mode(enabled, nullptr);
   b72ac:	2100      	movs	r1, #0
   b72ae:	f7ff bb7b 	b.w	b69a8 <system_ble_prov_mode>

000b72b2 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b72b2:	b919      	cbnz	r1, b72bc <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b72b4:	460a      	mov	r2, r1
   b72b6:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b72b8:	f7ff b96e 	b.w	b6598 <hal_ble_gap_set_advertising_data>
   b72bc:	e9d1 0100 	ldrd	r0, r1, [r1]
   b72c0:	2200      	movs	r2, #0
   b72c2:	e7f9      	b.n	b72b8 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b72c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b72c4:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b72c6:	1e14      	subs	r4, r2, #0
   b72c8:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b72ca:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b72cc:	db02      	blt.n	b72d4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b72ce:	1862      	adds	r2, r4, r1
   b72d0:	429a      	cmp	r2, r3
   b72d2:	dd00      	ble.n	b72d6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b72d4:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b72d6:	682a      	ldr	r2, [r5, #0]
   b72d8:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b72da:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b72dc:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b72de:	1a52      	subs	r2, r2, r1
   b72e0:	f002 fff5 	bl	ba2ce <memmove>
    size_ -= n;
   b72e4:	686a      	ldr	r2, [r5, #4]
   b72e6:	1b12      	subs	r2, r2, r4
   b72e8:	606a      	str	r2, [r5, #4]
}
   b72ea:	bd38      	pop	{r3, r4, r5, pc}

000b72ec <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b72ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b72ee:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b72f0:	4604      	mov	r4, r0
   b72f2:	460d      	mov	r5, r1
   b72f4:	ab01      	add	r3, sp, #4
   b72f6:	e9d0 0100 	ldrd	r0, r1, [r0]
   b72fa:	f7ff fc6f 	bl	b6bdc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b72fe:	4602      	mov	r2, r0
   b7300:	b138      	cbz	r0, b7312 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b7302:	9901      	ldr	r1, [sp, #4]
   b7304:	4620      	mov	r0, r4
   b7306:	f7ff ffdd 	bl	b72c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b730a:	4629      	mov	r1, r5
   b730c:	4620      	mov	r0, r4
   b730e:	f7ff ffed 	bl	b72ec <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b7312:	b003      	add	sp, #12
   b7314:	bd30      	pop	{r4, r5, pc}

000b7316 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b7316:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b7318:	460c      	mov	r4, r1
   b731a:	b929      	cbnz	r1, b7328 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b731c:	460a      	mov	r2, r1
   b731e:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b7320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b7324:	f7ff b940 	b.w	b65a8 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b7328:	2101      	movs	r1, #1
   b732a:	4620      	mov	r0, r4
   b732c:	f7ff ffde 	bl	b72ec <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b7330:	e9d4 0100 	ldrd	r0, r1, [r4]
   b7334:	2200      	movs	r2, #0
   b7336:	e7f3      	b.n	b7320 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b7338 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b7338:	b538      	push	{r3, r4, r5, lr}
   b733a:	4604      	mov	r4, r0
   b733c:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b733e:	f7ff ffb8 	bl	b72b2 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b7342:	2800      	cmp	r0, #0
   b7344:	db0a      	blt.n	b735c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b7346:	4629      	mov	r1, r5
   b7348:	4620      	mov	r0, r4
   b734a:	f7ff ffe4 	bl	b7316 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b734e:	2800      	cmp	r0, #0
   b7350:	db04      	blt.n	b735c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b7352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b7356:	2000      	movs	r0, #0
   b7358:	f7ff b92e 	b.w	b65b8 <hal_ble_gap_start_advertising>
}
   b735c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b7360 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b7360:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7362:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b7364:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b7366:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7368:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b736a:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b736c:	f7fc fe93 	bl	b4096 <_Znwj>
   b7370:	b118      	cbz	r0, b737a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b7372:	682b      	ldr	r3, [r5, #0]
   b7374:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b7376:	686b      	ldr	r3, [r5, #4]
   b7378:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b737a:	4b03      	ldr	r3, [pc, #12]	; (b7388 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b737c:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b737e:	4b03      	ldr	r3, [pc, #12]	; (b738c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7380:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7382:	60a3      	str	r3, [r4, #8]
      }
   b7384:	4620      	mov	r0, r4
   b7386:	bd38      	pop	{r3, r4, r5, pc}
   b7388:	000b6c1d 	.word	0x000b6c1d
   b738c:	000b6c35 	.word	0x000b6c35

000b7390 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b7390:	680b      	ldr	r3, [r1, #0]
   b7392:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b7394:	b113      	cbz	r3, b739c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b7396:	685a      	ldr	r2, [r3, #4]
   b7398:	3201      	adds	r2, #1
   b739a:	605a      	str	r2, [r3, #4]
      }
   b739c:	4770      	bx	lr

000b739e <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b739e:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b73a0:	f851 3b04 	ldr.w	r3, [r1], #4
   b73a4:	4604      	mov	r4, r0
   b73a6:	f840 3b04 	str.w	r3, [r0], #4
   b73aa:	f7ff fff1 	bl	b7390 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b73ae:	6823      	ldr	r3, [r4, #0]
   b73b0:	b90b      	cbnz	r3, b73b6 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b73b2:	f7ff fc29 	bl	b6c08 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b73b6:	4620      	mov	r0, r4
   b73b8:	bd10      	pop	{r4, pc}

000b73ba <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b73ba:	b510      	push	{r4, lr}
   b73bc:	f851 3b04 	ldr.w	r3, [r1], #4
   b73c0:	4604      	mov	r4, r0
   b73c2:	f840 3b04 	str.w	r3, [r0], #4
   b73c6:	f7ff ffe3 	bl	b7390 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b73ca:	4620      	mov	r0, r4
   b73cc:	bd10      	pop	{r4, pc}

000b73ce <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b73ce:	b510      	push	{r4, lr}
   b73d0:	f851 3b04 	ldr.w	r3, [r1], #4
   b73d4:	4604      	mov	r4, r0
   b73d6:	f840 3b04 	str.w	r3, [r0], #4
   b73da:	f7ff ffd9 	bl	b7390 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b73de:	4620      	mov	r0, r4
   b73e0:	bd10      	pop	{r4, pc}

000b73e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b73e2:	b510      	push	{r4, lr}
   b73e4:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b73e6:	6800      	ldr	r0, [r0, #0]
   b73e8:	b108      	cbz	r0, b73ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b73ea:	f7ff fc57 	bl	b6c9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b73ee:	4620      	mov	r0, r4
   b73f0:	bd10      	pop	{r4, pc}

000b73f2 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b73f2:	b510      	push	{r4, lr}
   b73f4:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b73f6:	3004      	adds	r0, #4
   b73f8:	f7ff fff3 	bl	b73e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b73fc:	4620      	mov	r0, r4
   b73fe:	bd10      	pop	{r4, pc}

000b7400 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7400:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7402:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7406:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7408:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b740c:	42ae      	cmp	r6, r5
   b740e:	d004      	beq.n	b741a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b7410:	1d28      	adds	r0, r5, #4
   b7412:	f7ff ffe6 	bl	b73e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7416:	3508      	adds	r5, #8
   b7418:	e7f8      	b.n	b740c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b741a:	6820      	ldr	r0, [r4, #0]
   b741c:	f7ff fb48 	bl	b6ab0 <free>
}
   b7420:	4620      	mov	r0, r4
   b7422:	bd70      	pop	{r4, r5, r6, pc}

000b7424 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7424:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7426:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b742a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b742c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7430:	42ae      	cmp	r6, r5
   b7432:	d004      	beq.n	b743e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b7434:	1d28      	adds	r0, r5, #4
   b7436:	f7ff ffd4 	bl	b73e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b743a:	3508      	adds	r5, #8
   b743c:	e7f8      	b.n	b7430 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b743e:	6820      	ldr	r0, [r4, #0]
   b7440:	f7ff fb36 	bl	b6ab0 <free>
}
   b7444:	4620      	mov	r0, r4
   b7446:	bd70      	pop	{r4, r5, r6, pc}

000b7448 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7448:	b510      	push	{r4, lr}
   b744a:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b744c:	3024      	adds	r0, #36	; 0x24
   b744e:	f7ff ffe9 	bl	b7424 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b7452:	f104 0018 	add.w	r0, r4, #24
   b7456:	f7ff ffd3 	bl	b7400 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b745a:	bd10      	pop	{r4, pc}

000b745c <__tcf_0>:
    static BleLocalDevice instance;
   b745c:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b745e:	4b17      	ldr	r3, [pc, #92]	; (b74bc <__tcf_0+0x60>)
   b7460:	681c      	ldr	r4, [r3, #0]
   b7462:	b354      	cbz	r4, b74ba <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b7464:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b7468:	f7ff fc04 	bl	b6c74 <_ZNSt14_Function_baseD1Ev>
   b746c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7470:	f7ff fc00 	bl	b6c74 <_ZNSt14_Function_baseD1Ev>
   b7474:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7478:	f7ff fbfc 	bl	b6c74 <_ZNSt14_Function_baseD1Ev>
   b747c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7480:	f7ff fbf8 	bl	b6c74 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b7484:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b7488:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b748c:	42ae      	cmp	r6, r5
   b748e:	d004      	beq.n	b749a <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b7490:	1d28      	adds	r0, r5, #4
   b7492:	f7ff ffa6 	bl	b73e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7496:	3508      	adds	r5, #8
   b7498:	e7f8      	b.n	b748c <__tcf_0+0x30>
    ::free(ptr);
   b749a:	69a0      	ldr	r0, [r4, #24]
   b749c:	f7ff fb08 	bl	b6ab0 <free>
    ~BleLocalDeviceImpl() = default;
   b74a0:	f104 000c 	add.w	r0, r4, #12
   b74a4:	f7ff ffbe 	bl	b7424 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b74a8:	4620      	mov	r0, r4
   b74aa:	f7ff ffa9 	bl	b7400 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b74ae:	4620      	mov	r0, r4
   b74b0:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b74b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b74b6:	f7fc bdf4 	b.w	b40a2 <_ZdlPvj>
   b74ba:	bd70      	pop	{r4, r5, r6, pc}
   b74bc:	2003e6c4 	.word	0x2003e6c4

000b74c0 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b74c0:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b74c2:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b74c4:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b74c8:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b74cc:	6803      	ldr	r3, [r0, #0]
   b74ce:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b74d0:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b74d2:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b74d4:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b74d6:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b74d8:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b74da:	f7ff ff82 	bl	b73e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b74de:	b002      	add	sp, #8
   b74e0:	bd10      	pop	{r4, pc}

000b74e2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b74e2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b74e4:	b510      	push	{r4, lr}
      if (_M_empty())
   b74e6:	b90a      	cbnz	r2, b74ec <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b74e8:	f001 fe69 	bl	b91be <_ZSt25__throw_bad_function_callv>
    }
   b74ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b74f0:	68c3      	ldr	r3, [r0, #12]
   b74f2:	4718      	bx	r3

000b74f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>:
inline void spark::Vector<T, AllocatorT>::clear() {
   b74f4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b74f6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline void spark::Vector<T, AllocatorT>::clear() {
   b74fa:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b74fc:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7500:	42ae      	cmp	r6, r5
   b7502:	d004      	beq.n	b750e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0x1a>
      ~__shared_ptr() = default;
   b7504:	1d28      	adds	r0, r5, #4
   b7506:	f7ff ff6c 	bl	b73e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b750a:	3508      	adds	r5, #8
   b750c:	e7f8      	b.n	b7500 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0xc>
    size_ = 0;
   b750e:	2300      	movs	r3, #0
   b7510:	6063      	str	r3, [r4, #4]
}
   b7512:	bd70      	pop	{r4, r5, r6, pc}

000b7514 <_ZNK8particle14BleLocalDevice3offEv>:
int BleLocalDevice::off() const {
   b7514:	b513      	push	{r0, r1, r4, lr}
   b7516:	4604      	mov	r4, r0
    CHECK(hal_ble_stack_deinit(nullptr));
   b7518:	2000      	movs	r0, #0
   b751a:	f7ff f835 	bl	b6588 <hal_ble_stack_deinit>
   b751e:	2800      	cmp	r0, #0
   b7520:	db12      	blt.n	b7548 <_ZNK8particle14BleLocalDevice3offEv+0x34>
    return system_ble_prov_get_status(nullptr);
   b7522:	2000      	movs	r0, #0
   b7524:	f7ff fa4a 	bl	b69bc <system_ble_prov_get_status>
        if (getProvisioningStatus()) {
   b7528:	b118      	cbz	r0, b7532 <_ZNK8particle14BleLocalDevice3offEv+0x1e>
            provisioningMode(false);
   b752a:	2100      	movs	r1, #0
   b752c:	4620      	mov	r0, r4
   b752e:	f7ff febc 	bl	b72aa <_ZNK8particle14BleLocalDevice16provisioningModeEb>
        WiringBleLock lk;
   b7532:	a801      	add	r0, sp, #4
   b7534:	f7ff fbdc 	bl	b6cf0 <_ZN8particle3ble13WiringBleLockC1Ev>
        return peers_;
   b7538:	6820      	ldr	r0, [r4, #0]
        impl()->peers().clear();
   b753a:	3018      	adds	r0, #24
   b753c:	f7ff ffda 	bl	b74f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>
        WiringBleLock lk;
   b7540:	a801      	add	r0, sp, #4
   b7542:	f7ff fbe3 	bl	b6d0c <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
   b7546:	2000      	movs	r0, #0
}
   b7548:	b002      	add	sp, #8
   b754a:	bd10      	pop	{r4, pc}

000b754c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b754c:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b754e:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b7550:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b7552:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b7554:	dd03      	ble.n	b755e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b7556:	f7ff fab3 	bl	b6ac0 <realloc>
            if (!d) {
   b755a:	b918      	cbnz	r0, b7564 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b755c:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b755e:	f7ff faa7 	bl	b6ab0 <free>
        T* d = nullptr;
   b7562:	2000      	movs	r0, #0
        data_ = d;
   b7564:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b7566:	60a5      	str	r5, [r4, #8]
        return true;
   b7568:	2001      	movs	r0, #1
   b756a:	e7f7      	b.n	b755c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b756c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b756c:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b756e:	6883      	ldr	r3, [r0, #8]
   b7570:	428b      	cmp	r3, r1
   b7572:	da02      	bge.n	b757a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b7574:	f7ff ffea 	bl	b754c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b7578:	bd08      	pop	{r3, pc}
    return true;
   b757a:	2001      	movs	r0, #1
   b757c:	e7fc      	b.n	b7578 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b757e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b757e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7582:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7584:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7586:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7588:	4419      	add	r1, r3
   b758a:	6883      	ldr	r3, [r0, #8]
   b758c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b758e:	4604      	mov	r4, r0
   b7590:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7592:	dc12      	bgt.n	b75ba <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b7594:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7596:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7598:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b759a:	1bd2      	subs	r2, r2, r7
   b759c:	4631      	mov	r1, r6
   b759e:	1970      	adds	r0, r6, r5
   b75a0:	f002 fe95 	bl	ba2ce <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b75a4:	462a      	mov	r2, r5
   b75a6:	4641      	mov	r1, r8
   b75a8:	4630      	mov	r0, r6
   b75aa:	f002 fe82 	bl	ba2b2 <memcpy>
    size_ += n;
   b75ae:	6863      	ldr	r3, [r4, #4]
   b75b0:	442b      	add	r3, r5
   b75b2:	6063      	str	r3, [r4, #4]
    return true;
   b75b4:	2001      	movs	r0, #1
}
   b75b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b75ba:	f7ff ffc7 	bl	b754c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b75be:	2800      	cmp	r0, #0
   b75c0:	d1e8      	bne.n	b7594 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b75c2:	e7f8      	b.n	b75b6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b75c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b75c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b75c6:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b75c8:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b75cc:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b75ce:	4604      	mov	r4, r0
   b75d0:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b75d2:	da0b      	bge.n	b75ec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b75d4:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b75d6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b75d8:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b75da:	1b52      	subs	r2, r2, r5
   b75dc:	1c48      	adds	r0, r1, #1
   b75de:	f002 fe76 	bl	ba2ce <memmove>
    new(p) T(std::move(value));
   b75e2:	557e      	strb	r6, [r7, r5]
    ++size_;
   b75e4:	6863      	ldr	r3, [r4, #4]
   b75e6:	3301      	adds	r3, #1
   b75e8:	6063      	str	r3, [r4, #4]
}
   b75ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b75ec:	3101      	adds	r1, #1
   b75ee:	f7ff ffad 	bl	b754c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b75f2:	2800      	cmp	r0, #0
   b75f4:	d1ee      	bne.n	b75d4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b75f6:	e7f8      	b.n	b75ea <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b75f8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b75f8:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b75fa:	6841      	ldr	r1, [r0, #4]
   b75fc:	f7ff bfe2 	b.w	b75c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b7600 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7600:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7604:	4604      	mov	r4, r0
   b7606:	461d      	mov	r5, r3
   b7608:	460f      	mov	r7, r1
   b760a:	ab01      	add	r3, sp, #4
   b760c:	4690      	mov	r8, r2
   b760e:	460a      	mov	r2, r1
   b7610:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7614:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b7618:	f7ff fae0 	bl	b6bdc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b761c:	1cae      	adds	r6, r5, #2
   b761e:	6863      	ldr	r3, [r4, #4]
   b7620:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b7622:	f1b9 0f00 	cmp.w	r9, #0
   b7626:	d126      	bne.n	b7676 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b7628:	b328      	cbz	r0, b7676 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b762a:	4433      	add	r3, r6
   b762c:	1a1b      	subs	r3, r3, r0
   b762e:	2bff      	cmp	r3, #255	; 0xff
   b7630:	d809      	bhi.n	b7646 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b7632:	9901      	ldr	r1, [sp, #4]
   b7634:	4620      	mov	r0, r4
   b7636:	f7ff fe45 	bl	b72c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b763a:	6861      	ldr	r1, [r4, #4]
   b763c:	4620      	mov	r0, r4
   b763e:	4431      	add	r1, r6
   b7640:	f7ff ff94 	bl	b756c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7644:	b918      	cbnz	r0, b764e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b7646:	6860      	ldr	r0, [r4, #4]
}
   b7648:	b003      	add	sp, #12
   b764a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b764e:	1c6a      	adds	r2, r5, #1
   b7650:	9901      	ldr	r1, [sp, #4]
   b7652:	b2d2      	uxtb	r2, r2
   b7654:	4620      	mov	r0, r4
   b7656:	f7ff ffb5 	bl	b75c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b765a:	9901      	ldr	r1, [sp, #4]
   b765c:	463a      	mov	r2, r7
   b765e:	3101      	adds	r1, #1
   b7660:	4620      	mov	r0, r4
   b7662:	f7ff ffaf 	bl	b75c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b7666:	9901      	ldr	r1, [sp, #4]
   b7668:	462b      	mov	r3, r5
   b766a:	4642      	mov	r2, r8
   b766c:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b766e:	4620      	mov	r0, r4
   b7670:	f7ff ff85 	bl	b757e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b7674:	e7e7      	b.n	b7646 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7676:	18f1      	adds	r1, r6, r3
   b7678:	29ff      	cmp	r1, #255	; 0xff
   b767a:	d8e4      	bhi.n	b7646 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b767c:	4620      	mov	r0, r4
   b767e:	f7ff ff75 	bl	b756c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7682:	2800      	cmp	r0, #0
   b7684:	d0df      	beq.n	b7646 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b7686:	1c69      	adds	r1, r5, #1
   b7688:	b2c9      	uxtb	r1, r1
   b768a:	4620      	mov	r0, r4
   b768c:	f7ff ffb4 	bl	b75f8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b7690:	4639      	mov	r1, r7
   b7692:	4620      	mov	r0, r4
   b7694:	f7ff ffb0 	bl	b75f8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b7698:	6861      	ldr	r1, [r4, #4]
   b769a:	462b      	mov	r3, r5
   b769c:	4642      	mov	r2, r8
   b769e:	e7e6      	b.n	b766e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b76a0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b76a0:	b430      	push	{r4, r5}
   b76a2:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b76a6:	b11a      	cbz	r2, b76b0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b76a8:	9502      	str	r5, [sp, #8]
}
   b76aa:	bc30      	pop	{r4, r5}
   b76ac:	f7ff bfa8 	b.w	b7600 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b76b0:	6840      	ldr	r0, [r0, #4]
}
   b76b2:	bc30      	pop	{r4, r5}
   b76b4:	4770      	bx	lr

000b76b6 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b76b6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b76b8:	2300      	movs	r3, #0
   b76ba:	e9c0 3300 	strd	r3, r3, [r0]
   b76be:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b76c0:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b76c2:	9300      	str	r3, [sp, #0]
   b76c4:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b76c6:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b76ca:	4619      	mov	r1, r3
   b76cc:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b76d0:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b76d2:	f7ff ffe5 	bl	b76a0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b76d6:	4620      	mov	r0, r4
   b76d8:	b004      	add	sp, #16
   b76da:	bd10      	pop	{r4, pc}

000b76dc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b76dc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b76de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b76e0:	4604      	mov	r4, r0
   b76e2:	460d      	mov	r5, r1
   b76e4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b76e6:	d914      	bls.n	b7712 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b76e8:	4290      	cmp	r0, r2
   b76ea:	d213      	bcs.n	b7714 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b76ec:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b76f0:	1a75      	subs	r5, r6, r1
   b76f2:	f1a1 0708 	sub.w	r7, r1, #8
   b76f6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b76f8:	42b7      	cmp	r7, r6
   b76fa:	d018      	beq.n	b772e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b76fc:	b11c      	cbz	r4, b7706 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b76fe:	4631      	mov	r1, r6
   b7700:	4620      	mov	r0, r4
   b7702:	f7ff fe64 	bl	b73ce <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7706:	1d30      	adds	r0, r6, #4
   b7708:	f7ff fe6b 	bl	b73e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b770c:	3e08      	subs	r6, #8
   b770e:	3c08      	subs	r4, #8
   b7710:	e7f2      	b.n	b76f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7712:	d00c      	beq.n	b772e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7714:	42b5      	cmp	r5, r6
   b7716:	d00a      	beq.n	b772e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7718:	b11c      	cbz	r4, b7722 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b771a:	4629      	mov	r1, r5
   b771c:	4620      	mov	r0, r4
   b771e:	f7ff fe56 	bl	b73ce <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7722:	1d28      	adds	r0, r5, #4
   b7724:	f7ff fe5d 	bl	b73e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7728:	3508      	adds	r5, #8
   b772a:	3408      	adds	r4, #8
   b772c:	e7f2      	b.n	b7714 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b772e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7730 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7732:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7734:	6846      	ldr	r6, [r0, #4]
   b7736:	4668      	mov	r0, sp
   b7738:	f7ff fe49 	bl	b73ce <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b773c:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b7740:	429f      	cmp	r7, r3
   b7742:	db12      	blt.n	b776a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b7744:	3701      	adds	r7, #1
        if (n > 0) {
   b7746:	2f00      	cmp	r7, #0
   b7748:	dd29      	ble.n	b779e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b774a:	00f8      	lsls	r0, r7, #3
   b774c:	f7ff f9a8 	bl	b6aa0 <malloc>
            if (!d) {
   b7750:	4605      	mov	r5, r0
   b7752:	b1f0      	cbz	r0, b7792 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b7754:	e9d4 1200 	ldrd	r1, r2, [r4]
   b7758:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b775c:	f7ff ffbe 	bl	b76dc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7760:	6820      	ldr	r0, [r4, #0]
   b7762:	f7ff f9a5 	bl	b6ab0 <free>
        data_ = d;
   b7766:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b7768:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b776a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b776c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b776e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b7772:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7776:	4631      	mov	r1, r6
   b7778:	f106 0008 	add.w	r0, r6, #8
   b777c:	f7ff ffae 	bl	b76dc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7780:	b11e      	cbz	r6, b778a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b7782:	4669      	mov	r1, sp
   b7784:	4630      	mov	r0, r6
   b7786:	f7ff fe22 	bl	b73ce <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b778a:	6863      	ldr	r3, [r4, #4]
   b778c:	3301      	adds	r3, #1
   b778e:	6063      	str	r3, [r4, #4]
    return true;
   b7790:	2501      	movs	r5, #1
   b7792:	a801      	add	r0, sp, #4
   b7794:	f7ff fe25 	bl	b73e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7798:	4628      	mov	r0, r5
   b779a:	b003      	add	sp, #12
   b779c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b779e:	2500      	movs	r5, #0
   b77a0:	e7de      	b.n	b7760 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b77a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b77a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b77a4:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b77a8:	4605      	mov	r5, r0
   b77aa:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b77ac:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b77b0:	42a6      	cmp	r6, r4
   b77b2:	d005      	beq.n	b77c0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b77b4:	4639      	mov	r1, r7
   b77b6:	4620      	mov	r0, r4
   b77b8:	f7ff fccf 	bl	b715a <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b77bc:	b108      	cbz	r0, b77c2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b77be:	b914      	cbnz	r4, b77c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b77c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b77c2:	3408      	adds	r4, #8
   b77c4:	e7f4      	b.n	b77b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b77c6:	1d20      	adds	r0, r4, #4
   b77c8:	f7ff fe0b 	bl	b73e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b77cc:	e9d5 3200 	ldrd	r3, r2, [r5]
   b77d0:	f104 0108 	add.w	r1, r4, #8
   b77d4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b77d8:	4620      	mov	r0, r4
   b77da:	f7ff ff7f 	bl	b76dc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b77de:	686b      	ldr	r3, [r5, #4]
   b77e0:	3b01      	subs	r3, #1
   b77e2:	606b      	str	r3, [r5, #4]
    return true;
   b77e4:	e7ec      	b.n	b77c0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b77e8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b77e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b77ec:	4605      	mov	r5, r0
   b77ee:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b77f0:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b77f2:	460c      	mov	r4, r1
        WiringBleLock lk;
   b77f4:	f7ff fa7c 	bl	b6cf0 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b77f8:	682e      	ldr	r6, [r5, #0]
   b77fa:	1ef3      	subs	r3, r6, #3
   b77fc:	2b0d      	cmp	r3, #13
   b77fe:	d83c      	bhi.n	b787a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7800:	e8df f013 	tbh	[pc, r3, lsl #1]
   b7804:	0053000e 	.word	0x0053000e
   b7808:	00d1003b 	.word	0x00d1003b
   b780c:	003b003b 	.word	0x003b003b
   b7810:	003b003b 	.word	0x003b003b
   b7814:	009b003b 	.word	0x009b003b
   b7818:	009b009b 	.word	0x009b009b
   b781c:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b7820:	a804      	add	r0, sp, #16
   b7822:	f7ff fc65 	bl	b70f0 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b7826:	9b04      	ldr	r3, [sp, #16]
   b7828:	89aa      	ldrh	r2, [r5, #12]
   b782a:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b782c:	6869      	ldr	r1, [r5, #4]
   b782e:	9804      	ldr	r0, [sp, #16]
   b7830:	3108      	adds	r1, #8
   b7832:	3002      	adds	r0, #2
   b7834:	f7ff fa76 	bl	b6d24 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b7838:	a904      	add	r1, sp, #16
   b783a:	a806      	add	r0, sp, #24
   b783c:	f7ff fdc7 	bl	b73ce <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b7840:	a906      	add	r1, sp, #24
   b7842:	f104 0018 	add.w	r0, r4, #24
   b7846:	f7ff ff73 	bl	b7730 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b784a:	4605      	mov	r5, r0
   b784c:	a807      	add	r0, sp, #28
   b784e:	f7ff fdc8 	bl	b73e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7852:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b7854:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b7856:	b9b5      	cbnz	r5, b7886 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b7858:	4b5d      	ldr	r3, [pc, #372]	; (b79d0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b785a:	495e      	ldr	r1, [pc, #376]	; (b79d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b785c:	9300      	str	r3, [sp, #0]
   b785e:	2032      	movs	r0, #50	; 0x32
   b7860:	462b      	mov	r3, r5
   b7862:	aa06      	add	r2, sp, #24
   b7864:	9507      	str	r5, [sp, #28]
   b7866:	f7ff f873 	bl	b6950 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b786a:	9b04      	ldr	r3, [sp, #16]
   b786c:	4629      	mov	r1, r5
   b786e:	8818      	ldrh	r0, [r3, #0]
   b7870:	f7fe feaa 	bl	b65c8 <hal_ble_gap_disconnect>
   b7874:	a805      	add	r0, sp, #20
   b7876:	f7ff fdb4 	bl	b73e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b787a:	a803      	add	r0, sp, #12
   b787c:	f7ff fa46 	bl	b6d0c <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b7880:	b00e      	add	sp, #56	; 0x38
   b7882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b7886:	4a54      	ldr	r2, [pc, #336]	; (b79d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b7888:	9200      	str	r2, [sp, #0]
   b788a:	2300      	movs	r3, #0
   b788c:	4951      	ldr	r1, [pc, #324]	; (b79d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b788e:	9307      	str	r3, [sp, #28]
   b7890:	aa06      	add	r2, sp, #24
   b7892:	2001      	movs	r0, #1
   b7894:	f7ff f85c 	bl	b6950 <log_message>
                if (impl->connectedCallback_) {
   b7898:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b789a:	2b00      	cmp	r3, #0
   b789c:	d0ea      	beq.n	b7874 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b789e:	a904      	add	r1, sp, #16
   b78a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b78a4:	f7ff fe1d 	bl	b74e2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b78a8:	e7e4      	b.n	b7874 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b78aa:	89a9      	ldrh	r1, [r5, #12]
   b78ac:	4620      	mov	r0, r4
   b78ae:	f7ff fb77 	bl	b6fa0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b78b2:	4606      	mov	r6, r0
   b78b4:	2800      	cmp	r0, #0
   b78b6:	d0e0      	beq.n	b787a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b78b8:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b78ba:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b78be:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b78c2:	8029      	strh	r1, [r5, #0]
   b78c4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b78c8:	429a      	cmp	r2, r3
   b78ca:	d003      	beq.n	b78d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b78cc:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b78d0:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b78d2:	e7f9      	b.n	b78c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b78d4:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b78d8:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b78dc:	45b8      	cmp	r8, r7
   b78de:	d004      	beq.n	b78ea <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b78e0:	1d38      	adds	r0, r7, #4
   b78e2:	f7ff fd7e 	bl	b73e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b78e6:	3708      	adds	r7, #8
   b78e8:	e7f8      	b.n	b78dc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b78ea:	2300      	movs	r3, #0
   b78ec:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b78ee:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b78f2:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b78f6:	45b8      	cmp	r8, r7
   b78f8:	d004      	beq.n	b7904 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b78fa:	1d38      	adds	r0, r7, #4
   b78fc:	f7ff fd71 	bl	b73e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7900:	3708      	adds	r7, #8
   b7902:	e7f8      	b.n	b78f6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b7904:	2300      	movs	r3, #0
   b7906:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b7908:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b790a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b790c:	b123      	cbz	r3, b7918 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b790e:	4631      	mov	r1, r6
   b7910:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7914:	f7ff fde5 	bl	b74e2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b7918:	2300      	movs	r3, #0
   b791a:	2220      	movs	r2, #32
   b791c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b7920:	4a2e      	ldr	r2, [pc, #184]	; (b79dc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b7922:	9200      	str	r2, [sp, #0]
   b7924:	492b      	ldr	r1, [pc, #172]	; (b79d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7926:	aa06      	add	r2, sp, #24
   b7928:	2001      	movs	r0, #1
   b792a:	f7ff f811 	bl	b6950 <log_message>
                    impl->peers_.removeOne(*peer);
   b792e:	4631      	mov	r1, r6
   b7930:	f104 0018 	add.w	r0, r4, #24
   b7934:	f7ff ff35 	bl	b77a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b7938:	e79f      	b.n	b787a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b793a:	89a9      	ldrh	r1, [r5, #12]
   b793c:	4620      	mov	r0, r4
   b793e:	f7ff fb2f 	bl	b6fa0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7942:	2800      	cmp	r0, #0
   b7944:	d099      	beq.n	b787a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b7946:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b7948:	2b00      	cmp	r3, #0
   b794a:	d096      	beq.n	b787a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b794c:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b794e:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b7950:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7954:	d001      	beq.n	b795a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b7956:	2e10      	cmp	r6, #16
   b7958:	d117      	bne.n	b798a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b795a:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b795c:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b795e:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b7960:	2506      	movs	r5, #6
                        };
   b7962:	f88d 3015 	strb.w	r3, [sp, #21]
   b7966:	9104      	str	r1, [sp, #16]
   b7968:	f88d 2014 	strb.w	r2, [sp, #20]
   b796c:	9006      	str	r0, [sp, #24]
   b796e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b7972:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b7974:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b7978:	9508      	str	r5, [sp, #32]
   b797a:	e883 0003 	stmia.w	r3, {r0, r1}
   b797e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b7980:	a906      	add	r1, sp, #24
   b7982:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7986:	4798      	blx	r3
   b7988:	e777      	b.n	b787a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b798a:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b798c:	bf01      	itttt	eq
   b798e:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b7990:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7992:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b7996:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b7998:	bf0f      	iteee	eq
   b799a:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b799e:	461a      	movne	r2, r3
   b79a0:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b79a2:	461d      	movne	r5, r3
   b79a4:	e7dd      	b.n	b7962 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b79a6:	89a9      	ldrh	r1, [r5, #12]
   b79a8:	4620      	mov	r0, r4
   b79aa:	f7ff faf9 	bl	b6fa0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b79ae:	4601      	mov	r1, r0
   b79b0:	2800      	cmp	r0, #0
   b79b2:	f43f af62 	beq.w	b787a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b79b6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b79b8:	2b00      	cmp	r3, #0
   b79ba:	f43f af5e 	beq.w	b787a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b79be:	686b      	ldr	r3, [r5, #4]
   b79c0:	9306      	str	r3, [sp, #24]
   b79c2:	aa06      	add	r2, sp, #24
   b79c4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b79c6:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b79ca:	4798      	blx	r3
   b79cc:	e755      	b.n	b787a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b79ce:	bf00      	nop
   b79d0:	000bc7c0 	.word	0x000bc7c0
   b79d4:	000bc73f 	.word	0x000bc73f
   b79d8:	000bc7e6 	.word	0x000bc7e6
   b79dc:	000bc803 	.word	0x000bc803

000b79e0 <_ZNK8particle14BleLocalDevice10disconnectEv>:

void BleLocalDevice::onPairingEvent(const BleOnPairingEventStdFunction& callback) const {
    impl()->onPairingEvent(callback);
}

int BleLocalDevice::disconnect() const {
   b79e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b79e4:	4607      	mov	r7, r0
   b79e6:	b08b      	sub	sp, #44	; 0x2c
    WiringBleLock lk;
   b79e8:	4668      	mov	r0, sp
   b79ea:	f7ff f981 	bl	b6cf0 <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b79ee:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   b79f0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
   b79f4:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    for (auto& p : impl()->peers()) {
   b79f8:	42ac      	cmp	r4, r5
   b79fa:	d035      	beq.n	b7a68 <_ZNK8particle14BleLocalDevice10disconnectEv+0x88>
        hal_ble_conn_info_t connInfo = {};
   b79fc:	2224      	movs	r2, #36	; 0x24
   b79fe:	2100      	movs	r1, #0
   b7a00:	a801      	add	r0, sp, #4
   b7a02:	f002 fc7e 	bl	ba302 <memset>
        if (hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr) != SYSTEM_ERROR_NONE) {
   b7a06:	6823      	ldr	r3, [r4, #0]
   b7a08:	2200      	movs	r2, #0
   b7a0a:	8818      	ldrh	r0, [r3, #0]
   b7a0c:	a901      	add	r1, sp, #4
   b7a0e:	f7fe fe0d 	bl	b662c <hal_ble_gap_get_connection_info>
   b7a12:	4606      	mov	r6, r0
   b7a14:	b108      	cbz	r0, b7a1a <_ZNK8particle14BleLocalDevice10disconnectEv+0x3a>
    for (auto& p : impl()->peers()) {
   b7a16:	3408      	adds	r4, #8
   b7a18:	e7ee      	b.n	b79f8 <_ZNK8particle14BleLocalDevice10disconnectEv+0x18>
            continue;
        }
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
   b7a1a:	f89d 8008 	ldrb.w	r8, [sp, #8]
   b7a1e:	f1b8 0f01 	cmp.w	r8, #1
   b7a22:	d1f8      	bne.n	b7a16 <_ZNK8particle14BleLocalDevice10disconnectEv+0x36>
   b7a24:	f8df 9048 	ldr.w	r9, [pc, #72]	; b7a70 <_ZNK8particle14BleLocalDevice10disconnectEv+0x90>
   b7a28:	f8d9 0000 	ldr.w	r0, [r9]
   b7a2c:	f7fe fe40 	bl	b66b0 <os_mutex_recursive_unlock>
        locked_ = false;
   b7a30:	f88d 6000 	strb.w	r6, [sp]
            lk.unlock(); // To allow HAL BLE thread to invoke wiring callback
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
   b7a34:	6823      	ldr	r3, [r4, #0]
   b7a36:	4631      	mov	r1, r6
   b7a38:	8818      	ldrh	r0, [r3, #0]
   b7a3a:	f7fe fdc5 	bl	b65c8 <hal_ble_gap_disconnect>
   b7a3e:	1e05      	subs	r5, r0, #0
   b7a40:	db0b      	blt.n	b7a5a <_ZNK8particle14BleLocalDevice10disconnectEv+0x7a>
    void lock() { os_mutex_recursive_lock(handle_); }
   b7a42:	f8d9 0000 	ldr.w	r0, [r9]
   b7a46:	f7fe fe2b 	bl	b66a0 <os_mutex_recursive_lock>
        return peers_;
   b7a4a:	6838      	ldr	r0, [r7, #0]
        locked_ = true;
   b7a4c:	f88d 8000 	strb.w	r8, [sp]
            lk.lock();
            impl()->peers().removeOne(p);
   b7a50:	4621      	mov	r1, r4
   b7a52:	3018      	adds	r0, #24
   b7a54:	f7ff fea5 	bl	b77a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
            return SYSTEM_ERROR_NONE;
   b7a58:	4635      	mov	r5, r6
    WiringBleLock lk;
   b7a5a:	4668      	mov	r0, sp
   b7a5c:	f7ff f956 	bl	b6d0c <_ZN8particle3ble13WiringBleLockD1Ev>
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
}
   b7a60:	4628      	mov	r0, r5
   b7a62:	b00b      	add	sp, #44	; 0x2c
   b7a64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return SYSTEM_ERROR_NOT_FOUND;
   b7a68:	f06f 05a9 	mvn.w	r5, #169	; 0xa9
   b7a6c:	e7f5      	b.n	b7a5a <_ZNK8particle14BleLocalDevice10disconnectEv+0x7a>
   b7a6e:	bf00      	nop
   b7a70:	2003e6c0 	.word	0x2003e6c0

000b7a74 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b7a74:	b513      	push	{r0, r1, r4, lr}
   b7a76:	460b      	mov	r3, r1
   b7a78:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7a7a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7a7e:	466c      	mov	r4, sp
   b7a80:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b7a84:	e893 0003 	ldmia.w	r3, {r0, r1}
   b7a88:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b7a8c:	e894 0003 	ldmia.w	r4, {r0, r1}
   b7a90:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b7a94:	b002      	add	sp, #8
   b7a96:	bd10      	pop	{r4, pc}

000b7a98 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b7a98:	b538      	push	{r3, r4, r5, lr}
   b7a9a:	4605      	mov	r5, r0
   b7a9c:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b7a9e:	f7ff ffe9 	bl	b7a74 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7aa2:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7aa4:	68a2      	ldr	r2, [r4, #8]
   b7aa6:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7aa8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7aaa:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7aac:	68e2      	ldr	r2, [r4, #12]
   b7aae:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7ab0:	60e3      	str	r3, [r4, #12]
      }
   b7ab2:	bd38      	pop	{r3, r4, r5, pc}

000b7ab4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b7ab4:	b570      	push	{r4, r5, r6, lr}
   b7ab6:	4604      	mov	r4, r0
   b7ab8:	b08c      	sub	sp, #48	; 0x30
   b7aba:	460e      	mov	r6, r1
   b7abc:	9201      	str	r2, [sp, #4]
   b7abe:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b7ac0:	f7ff fa4e 	bl	b6f60 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b7ac4:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b7ac6:	9901      	ldr	r1, [sp, #4]
   b7ac8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7acc:	f000 fd27 	bl	b851e <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b7ad0:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b7ad4:	b1cd      	cbz	r5, b7b0a <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b7ad6:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b7ad8:	9502      	str	r5, [sp, #8]
   b7ada:	a902      	add	r1, sp, #8
   b7adc:	a804      	add	r0, sp, #16
   b7ade:	9303      	str	r3, [sp, #12]
   b7ae0:	f7ff fc3e 	bl	b7360 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7ae4:	2300      	movs	r3, #0
	__x.swap(*this);
   b7ae6:	a908      	add	r1, sp, #32
   b7ae8:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b7aea:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b7aec:	f7ff ffd4 	bl	b7a98 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b7af0:	4631      	mov	r1, r6
   b7af2:	a808      	add	r0, sp, #32
   b7af4:	f7ff ffd0 	bl	b7a98 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b7af8:	a808      	add	r0, sp, #32
   b7afa:	f7ff f8bb 	bl	b6c74 <_ZNSt14_Function_baseD1Ev>
   b7afe:	a804      	add	r0, sp, #16
   b7b00:	f7ff f8b8 	bl	b6c74 <_ZNSt14_Function_baseD1Ev>
    }
   b7b04:	4620      	mov	r0, r4
   b7b06:	b00c      	add	sp, #48	; 0x30
   b7b08:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7b0a:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b7b0c:	e7ea      	b.n	b7ae4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b7b10 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b7b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7b14:	b087      	sub	sp, #28
   b7b16:	461d      	mov	r5, r3
   b7b18:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b7b1c:	4680      	mov	r8, r0
   b7b1e:	468b      	mov	fp, r1
   b7b20:	4692      	mov	sl, r2
   b7b22:	9912      	ldr	r1, [sp, #72]	; 0x48
   b7b24:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7b26:	2200      	movs	r2, #0
   b7b28:	2068      	movs	r0, #104	; 0x68
   b7b2a:	9102      	str	r1, [sp, #8]
   b7b2c:	9204      	str	r2, [sp, #16]
   b7b2e:	f7fc fab2 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b7b32:	1e06      	subs	r6, r0, #0
   b7b34:	f106 090c 	add.w	r9, r6, #12
   b7b38:	d018      	beq.n	b7b6c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b7b3a:	2201      	movs	r2, #1
	: _M_impl(__a)
   b7b3c:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b7b3e:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b7b42:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b7b44:	4a15      	ldr	r2, [pc, #84]	; (b7b9c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b7b46:	f847 2b20 	str.w	r2, [r7], #32
   b7b4a:	9b03      	ldr	r3, [sp, #12]
   b7b4c:	9100      	str	r1, [sp, #0]
   b7b4e:	465a      	mov	r2, fp
   b7b50:	4651      	mov	r1, sl
   b7b52:	4648      	mov	r0, r9
   b7b54:	f7ff ffae 	bl	b7ab4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b7b58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7b5a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b7b5c:	682b      	ldr	r3, [r5, #0]
   b7b5e:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b7b60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7b62:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b7b66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7b68:	6823      	ldr	r3, [r4, #0]
   b7b6a:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b7b6c:	a904      	add	r1, sp, #16
   b7b6e:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b7b70:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b7b74:	f7ff fca4 	bl	b74c0 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b7b78:	a805      	add	r0, sp, #20
   b7b7a:	f7ff fc32 	bl	b73e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b7b7e:	f8d8 3000 	ldr.w	r3, [r8]
   b7b82:	b93b      	cbnz	r3, b7b94 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b7b84:	4a06      	ldr	r2, [pc, #24]	; (b7ba0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b7b86:	4907      	ldr	r1, [pc, #28]	; (b7ba4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b7b88:	200a      	movs	r0, #10
}
   b7b8a:	b007      	add	sp, #28
   b7b8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b7b90:	f7fe bed6 	b.w	b6940 <panic_>
}
   b7b94:	b007      	add	sp, #28
   b7b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7b9a:	bf00      	nop
   b7b9c:	000bc87c 	.word	0x000bc87c
   b7ba0:	000b66d1 	.word	0x000b66d1
   b7ba4:	000bc728 	.word	0x000bc728

000b7ba8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7ba8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7bac:	4604      	mov	r4, r0
   b7bae:	460d      	mov	r5, r1
   b7bb0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7bb2:	d914      	bls.n	b7bde <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7bb4:	4290      	cmp	r0, r2
   b7bb6:	d213      	bcs.n	b7be0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7bb8:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7bbc:	1a75      	subs	r5, r6, r1
   b7bbe:	f1a1 0708 	sub.w	r7, r1, #8
   b7bc2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7bc4:	42b7      	cmp	r7, r6
   b7bc6:	d018      	beq.n	b7bfa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7bc8:	b11c      	cbz	r4, b7bd2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7bca:	4631      	mov	r1, r6
   b7bcc:	4620      	mov	r0, r4
   b7bce:	f7ff fbf4 	bl	b73ba <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7bd2:	1d30      	adds	r0, r6, #4
   b7bd4:	f7ff fc05 	bl	b73e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7bd8:	3e08      	subs	r6, #8
   b7bda:	3c08      	subs	r4, #8
   b7bdc:	e7f2      	b.n	b7bc4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7bde:	d00c      	beq.n	b7bfa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7be0:	42b5      	cmp	r5, r6
   b7be2:	d00a      	beq.n	b7bfa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7be4:	b11c      	cbz	r4, b7bee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7be6:	4629      	mov	r1, r5
   b7be8:	4620      	mov	r0, r4
   b7bea:	f7ff fbe6 	bl	b73ba <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7bee:	1d28      	adds	r0, r5, #4
   b7bf0:	f7ff fbf7 	bl	b73e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7bf4:	3508      	adds	r5, #8
   b7bf6:	3408      	adds	r4, #8
   b7bf8:	e7f2      	b.n	b7be0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7bfc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7bfc:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7bfe:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7c00:	4605      	mov	r5, r0
        if (n > 0) {
   b7c02:	dd11      	ble.n	b7c28 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7c04:	00f0      	lsls	r0, r6, #3
   b7c06:	f7fe ff4b 	bl	b6aa0 <malloc>
            if (!d) {
   b7c0a:	4604      	mov	r4, r0
   b7c0c:	b158      	cbz	r0, b7c26 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7c0e:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7c12:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7c16:	f7ff ffc7 	bl	b7ba8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7c1a:	6828      	ldr	r0, [r5, #0]
   b7c1c:	f7fe ff48 	bl	b6ab0 <free>
        data_ = d;
   b7c20:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7c22:	60ae      	str	r6, [r5, #8]
        return true;
   b7c24:	2001      	movs	r0, #1
    }
   b7c26:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7c28:	2400      	movs	r4, #0
   b7c2a:	e7f6      	b.n	b7c1a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7c2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7c2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7c2e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7c30:	6845      	ldr	r5, [r0, #4]
   b7c32:	4668      	mov	r0, sp
   b7c34:	f7ff fbc1 	bl	b73ba <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7c38:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7c3c:	4299      	cmp	r1, r3
   b7c3e:	da10      	bge.n	b7c62 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7c40:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7c42:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7c44:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7c48:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7c4c:	4629      	mov	r1, r5
   b7c4e:	f105 0008 	add.w	r0, r5, #8
   b7c52:	f7ff ffa9 	bl	b7ba8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7c56:	b98d      	cbnz	r5, b7c7c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7c58:	6863      	ldr	r3, [r4, #4]
   b7c5a:	3301      	adds	r3, #1
   b7c5c:	6063      	str	r3, [r4, #4]
    return true;
   b7c5e:	2601      	movs	r6, #1
   b7c60:	e006      	b.n	b7c70 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7c62:	3101      	adds	r1, #1
   b7c64:	4620      	mov	r0, r4
   b7c66:	f7ff ffc9 	bl	b7bfc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7c6a:	4606      	mov	r6, r0
   b7c6c:	2800      	cmp	r0, #0
   b7c6e:	d1e7      	bne.n	b7c40 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b7c70:	a801      	add	r0, sp, #4
   b7c72:	f7ff fbb6 	bl	b73e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7c76:	4630      	mov	r0, r6
   b7c78:	b002      	add	sp, #8
   b7c7a:	bd70      	pop	{r4, r5, r6, pc}
   b7c7c:	4669      	mov	r1, sp
   b7c7e:	4628      	mov	r0, r5
   b7c80:	f7ff fb9b 	bl	b73ba <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7c84:	e7e8      	b.n	b7c58 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b7c86 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7c86:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7c8a:	4604      	mov	r4, r0
   b7c8c:	460d      	mov	r5, r1
   b7c8e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7c90:	d914      	bls.n	b7cbc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7c92:	4290      	cmp	r0, r2
   b7c94:	d213      	bcs.n	b7cbe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7c96:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7c9a:	1a75      	subs	r5, r6, r1
   b7c9c:	f1a1 0708 	sub.w	r7, r1, #8
   b7ca0:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7ca2:	42b7      	cmp	r7, r6
   b7ca4:	d018      	beq.n	b7cd8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7ca6:	b11c      	cbz	r4, b7cb0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b7ca8:	4631      	mov	r1, r6
   b7caa:	4620      	mov	r0, r4
   b7cac:	f7ff fb77 	bl	b739e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7cb0:	1d30      	adds	r0, r6, #4
   b7cb2:	f7ff fb96 	bl	b73e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7cb6:	3e08      	subs	r6, #8
   b7cb8:	3c08      	subs	r4, #8
   b7cba:	e7f2      	b.n	b7ca2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7cbc:	d00c      	beq.n	b7cd8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7cbe:	42b5      	cmp	r5, r6
   b7cc0:	d00a      	beq.n	b7cd8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7cc2:	b11c      	cbz	r4, b7ccc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7cc4:	4629      	mov	r1, r5
   b7cc6:	4620      	mov	r0, r4
   b7cc8:	f7ff fb69 	bl	b739e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7ccc:	1d28      	adds	r0, r5, #4
   b7cce:	f7ff fb88 	bl	b73e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7cd2:	3508      	adds	r5, #8
   b7cd4:	3408      	adds	r4, #8
   b7cd6:	e7f2      	b.n	b7cbe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7cda <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7cda:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7cdc:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7cde:	4605      	mov	r5, r0
        if (n > 0) {
   b7ce0:	dd11      	ble.n	b7d06 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7ce2:	00f0      	lsls	r0, r6, #3
   b7ce4:	f7fe fedc 	bl	b6aa0 <malloc>
            if (!d) {
   b7ce8:	4604      	mov	r4, r0
   b7cea:	b158      	cbz	r0, b7d04 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7cec:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7cf0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7cf4:	f7ff ffc7 	bl	b7c86 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7cf8:	6828      	ldr	r0, [r5, #0]
   b7cfa:	f7fe fed9 	bl	b6ab0 <free>
        data_ = d;
   b7cfe:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7d00:	60ae      	str	r6, [r5, #8]
        return true;
   b7d02:	2001      	movs	r0, #1
    }
   b7d04:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7d06:	2400      	movs	r4, #0
   b7d08:	e7f6      	b.n	b7cf8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7d0a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7d0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7d0c:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7d0e:	6845      	ldr	r5, [r0, #4]
   b7d10:	4668      	mov	r0, sp
   b7d12:	f7ff fb44 	bl	b739e <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7d16:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7d1a:	4299      	cmp	r1, r3
   b7d1c:	da10      	bge.n	b7d40 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7d1e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7d20:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7d22:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7d26:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7d2a:	4629      	mov	r1, r5
   b7d2c:	f105 0008 	add.w	r0, r5, #8
   b7d30:	f7ff ffa9 	bl	b7c86 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7d34:	b98d      	cbnz	r5, b7d5a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7d36:	6863      	ldr	r3, [r4, #4]
   b7d38:	3301      	adds	r3, #1
   b7d3a:	6063      	str	r3, [r4, #4]
    return true;
   b7d3c:	2601      	movs	r6, #1
   b7d3e:	e006      	b.n	b7d4e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7d40:	3101      	adds	r1, #1
   b7d42:	4620      	mov	r0, r4
   b7d44:	f7ff ffc9 	bl	b7cda <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7d48:	4606      	mov	r6, r0
   b7d4a:	2800      	cmp	r0, #0
   b7d4c:	d1e7      	bne.n	b7d1e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b7d4e:	a801      	add	r0, sp, #4
   b7d50:	f7ff fb47 	bl	b73e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7d54:	4630      	mov	r0, r6
   b7d56:	b002      	add	sp, #8
   b7d58:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b7d5a:	4669      	mov	r1, sp
   b7d5c:	4628      	mov	r0, r5
   b7d5e:	f7ff fb1e 	bl	b739e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7d62:	e7e8      	b.n	b7d36 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b7d64 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b7d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7d68:	4617      	mov	r7, r2
   b7d6a:	b0a1      	sub	sp, #132	; 0x84
   b7d6c:	4680      	mov	r8, r0
    WiringBleLock lk;
   b7d6e:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b7d70:	460e      	mov	r6, r1
    WiringBleLock lk;
   b7d72:	f7fe ffbd 	bl	b6cf0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b7d76:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b7d78:	7923      	ldrb	r3, [r4, #4]
   b7d7a:	b953      	cbnz	r3, b7d92 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b7d7c:	4639      	mov	r1, r7
   b7d7e:	4640      	mov	r0, r8
   b7d80:	f7ff fb0d 	bl	b739e <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b7d84:	a80a      	add	r0, sp, #40	; 0x28
   b7d86:	f7fe ffc1 	bl	b6d0c <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b7d8a:	4640      	mov	r0, r8
   b7d8c:	b021      	add	sp, #132	; 0x84
   b7d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7d92:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b7d94:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b7d98:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b7d9c:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b7d9e:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b7da2:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b7da6:	9b03      	ldr	r3, [sp, #12]
   b7da8:	429d      	cmp	r5, r3
   b7daa:	d021      	beq.n	b7df0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b7dac:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b7db0:	4658      	mov	r0, fp
   b7db2:	f109 0114 	add.w	r1, r9, #20
   b7db6:	f7ff f848 	bl	b6e4a <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b7dba:	b1b8      	cbz	r0, b7dec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b7dbc:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b7dc0:	4650      	mov	r0, sl
   b7dc2:	f7ff f842 	bl	b6e4a <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b7dc6:	b188      	cbz	r0, b7dec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b7dc8:	6823      	ldr	r3, [r4, #0]
   b7dca:	f8d9 2000 	ldr.w	r2, [r9]
   b7dce:	4053      	eors	r3, r2
   b7dd0:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b7dd4:	d10a      	bne.n	b7dec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b7dd6:	2220      	movs	r2, #32
   b7dd8:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b7ddc:	4a5e      	ldr	r2, [pc, #376]	; (b7f58 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b7dde:	9200      	str	r2, [sp, #0]
   b7de0:	aa15      	add	r2, sp, #84	; 0x54
   b7de2:	495e      	ldr	r1, [pc, #376]	; (b7f5c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b7de4:	2032      	movs	r0, #50	; 0x32
   b7de6:	f7fe fdb3 	bl	b6950 <log_message>
   b7dea:	e7c7      	b.n	b7d7c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b7dec:	3508      	adds	r5, #8
   b7dee:	e7da      	b.n	b7da6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b7df0:	4650      	mov	r0, sl
   b7df2:	f7fe fffb 	bl	b6dec <_ZNK8particle7BleUuid7isValidEv>
   b7df6:	b960      	cbnz	r0, b7e12 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b7df8:	4959      	ldr	r1, [pc, #356]	; (b7f60 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b7dfa:	2201      	movs	r2, #1
   b7dfc:	a815      	add	r0, sp, #84	; 0x54
   b7dfe:	ad15      	add	r5, sp, #84	; 0x54
   b7e00:	f7fe ffcc 	bl	b6d9c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b7e04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7e06:	46d4      	mov	ip, sl
   b7e08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7e0c:	682b      	ldr	r3, [r5, #0]
   b7e0e:	f8cc 3000 	str.w	r3, [ip]
   b7e12:	6833      	ldr	r3, [r6, #0]
   b7e14:	e9d3 5300 	ldrd	r5, r3, [r3]
   b7e18:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b7e1c:	455d      	cmp	r5, fp
   b7e1e:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b7e20:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b7e22:	d06e      	beq.n	b7f02 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b7e24:	f855 0b08 	ldr.w	r0, [r5], #8
   b7e28:	f7ff f80f 	bl	b6e4a <_ZNK8particle7BleUuideqERKS0_>
   b7e2c:	2800      	cmp	r0, #0
   b7e2e:	d0f5      	beq.n	b7e1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b7e30:	f104 0a14 	add.w	sl, r4, #20
   b7e34:	4650      	mov	r0, sl
   b7e36:	f7fe ffd9 	bl	b6dec <_ZNK8particle7BleUuid7isValidEv>
   b7e3a:	b988      	cbnz	r0, b7e60 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b7e3c:	4b49      	ldr	r3, [pc, #292]	; (b7f64 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7e3e:	4948      	ldr	r1, [pc, #288]	; (b7f60 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b7e40:	881a      	ldrh	r2, [r3, #0]
   b7e42:	3201      	adds	r2, #1
   b7e44:	b292      	uxth	r2, r2
   b7e46:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7e48:	a815      	add	r0, sp, #84	; 0x54
   b7e4a:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b7e4c:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7e4e:	f7fe ffc4 	bl	b6dda <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b7e52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7e54:	46d4      	mov	ip, sl
   b7e56:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7e5a:	682b      	ldr	r3, [r5, #0]
   b7e5c:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b7e60:	4b41      	ldr	r3, [pc, #260]	; (b7f68 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b7e62:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b7e64:	2228      	movs	r2, #40	; 0x28
   b7e66:	2100      	movs	r1, #0
   b7e68:	a816      	add	r0, sp, #88	; 0x58
   b7e6a:	f002 fa4a 	bl	ba302 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b7e6e:	4651      	mov	r1, sl
   b7e70:	a804      	add	r0, sp, #16
   b7e72:	f7fe ffcd 	bl	b6e10 <_ZN8particle7BleUuid7halUUIDEv>
   b7e76:	ab04      	add	r3, sp, #16
   b7e78:	aa18      	add	r2, sp, #96	; 0x60
   b7e7a:	f10d 0c20 	add.w	ip, sp, #32
   b7e7e:	6818      	ldr	r0, [r3, #0]
   b7e80:	6859      	ldr	r1, [r3, #4]
   b7e82:	4615      	mov	r5, r2
   b7e84:	c503      	stmia	r5!, {r0, r1}
   b7e86:	3308      	adds	r3, #8
   b7e88:	4563      	cmp	r3, ip
   b7e8a:	462a      	mov	r2, r5
   b7e8c:	d1f7      	bne.n	b7e7e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b7e8e:	6818      	ldr	r0, [r3, #0]
   b7e90:	6028      	str	r0, [r5, #0]
    return value_;
   b7e92:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b7e94:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b7e98:	f8d9 3000 	ldr.w	r3, [r9]
   b7e9c:	8a9b      	ldrh	r3, [r3, #20]
   b7e9e:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b7ea2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7ea4:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b7ea6:	4b31      	ldr	r3, [pc, #196]	; (b7f6c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b7ea8:	2200      	movs	r2, #0
   b7eaa:	1da1      	adds	r1, r4, #6
   b7eac:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b7eae:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b7eb2:	f7fe fbc5 	bl	b6640 <hal_ble_gatt_server_add_characteristic>
   b7eb6:	2800      	cmp	r0, #0
   b7eb8:	f47f af60 	bne.w	b7d7c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b7ebc:	2301      	movs	r3, #1
   b7ebe:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b7ec0:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b7ec2:	4639      	mov	r1, r7
        return characteristics_;
   b7ec4:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b7ec6:	a80d      	add	r0, sp, #52	; 0x34
   b7ec8:	f7ff fa69 	bl	b739e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7ecc:	4620      	mov	r0, r4
   b7ece:	a90d      	add	r1, sp, #52	; 0x34
   b7ed0:	f7ff ff1b 	bl	b7d0a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b7ed4:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b7ed6:	a80e      	add	r0, sp, #56	; 0x38
   b7ed8:	f7ff fa83 	bl	b73e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7edc:	2c00      	cmp	r4, #0
   b7ede:	f47f af4d 	bne.w	b7d7c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b7ee2:	2320      	movs	r3, #32
   b7ee4:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b7ee8:	4b21      	ldr	r3, [pc, #132]	; (b7f70 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b7eea:	9300      	str	r3, [sp, #0]
   b7eec:	aa0d      	add	r2, sp, #52	; 0x34
   b7eee:	4623      	mov	r3, r4
   b7ef0:	e777      	b.n	b7de2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b7ef2:	4639      	mov	r1, r7
   b7ef4:	4640      	mov	r0, r8
   b7ef6:	f7ff fa52 	bl	b739e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7efa:	a80c      	add	r0, sp, #48	; 0x30
   b7efc:	f7ff fa71 	bl	b73e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7f00:	e740      	b.n	b7d84 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b7f02:	a80b      	add	r0, sp, #44	; 0x2c
   b7f04:	f7ff f8d0 	bl	b70a8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b7f08:	4651      	mov	r1, sl
   b7f0a:	a815      	add	r0, sp, #84	; 0x54
   b7f0c:	f7fe ff80 	bl	b6e10 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b7f10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b7f12:	2300      	movs	r3, #0
   b7f14:	3214      	adds	r2, #20
   b7f16:	a915      	add	r1, sp, #84	; 0x54
   b7f18:	2001      	movs	r0, #1
   b7f1a:	f7fe fb5f 	bl	b65dc <hal_ble_gatt_server_add_service>
   b7f1e:	2800      	cmp	r0, #0
   b7f20:	d1e7      	bne.n	b7ef2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b7f22:	6835      	ldr	r5, [r6, #0]
   b7f24:	a90b      	add	r1, sp, #44	; 0x2c
   b7f26:	a80d      	add	r0, sp, #52	; 0x34
   b7f28:	f7ff fa47 	bl	b73ba <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b7f2c:	4628      	mov	r0, r5
   b7f2e:	a90d      	add	r1, sp, #52	; 0x34
   b7f30:	f7ff fe7c 	bl	b7c2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b7f34:	4605      	mov	r5, r0
   b7f36:	a80e      	add	r0, sp, #56	; 0x38
   b7f38:	f7ff fa53 	bl	b73e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7f3c:	2d00      	cmp	r5, #0
   b7f3e:	d0d8      	beq.n	b7ef2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b7f40:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b7f42:	6853      	ldr	r3, [r2, #4]
   b7f44:	6812      	ldr	r2, [r2, #0]
   b7f46:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b7f4a:	3b01      	subs	r3, #1
   b7f4c:	a80c      	add	r0, sp, #48	; 0x30
   b7f4e:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b7f52:	f7ff fa46 	bl	b73e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7f56:	e76b      	b.n	b7e30 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b7f58:	000bc822 	.word	0x000bc822
   b7f5c:	000bc73f 	.word	0x000bc73f
   b7f60:	000bc8e6 	.word	0x000bc8e6
   b7f64:	2003e6bc 	.word	0x2003e6bc
   b7f68:	002c0003 	.word	0x002c0003
   b7f6c:	000b7241 	.word	0x000b7241
   b7f70:	000bc84d 	.word	0x000bc84d

000b7f74 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b7f74:	4802      	ldr	r0, [pc, #8]	; (b7f80 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b7f76:	2300      	movs	r3, #0
   b7f78:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b7f7a:	f7fe bb89 	b.w	b6690 <os_mutex_recursive_create>
   b7f7e:	bf00      	nop
   b7f80:	2003e6c0 	.word	0x2003e6c0

000b7f84 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7f84:	2200      	movs	r2, #0
   b7f86:	6840      	ldr	r0, [r0, #4]
   b7f88:	4611      	mov	r1, r2
   b7f8a:	f7fe bd61 	b.w	b6a50 <network_listening>

000b7f8e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7f8e:	2200      	movs	r2, #0
   b7f90:	6840      	ldr	r0, [r0, #4]
   b7f92:	4611      	mov	r1, r2
   b7f94:	f7fe bd6c 	b.w	b6a70 <network_get_listen_timeout>

000b7f98 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7f98:	6840      	ldr	r0, [r0, #4]
   b7f9a:	2200      	movs	r2, #0
   b7f9c:	f7fe bd60 	b.w	b6a60 <network_set_listen_timeout>

000b7fa0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7fa0:	6840      	ldr	r0, [r0, #4]
   b7fa2:	2200      	movs	r2, #0
   b7fa4:	f081 0101 	eor.w	r1, r1, #1
   b7fa8:	f7fe bd4a 	b.w	b6a40 <network_listen>

000b7fac <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7fac:	2300      	movs	r3, #0
   b7fae:	6840      	ldr	r0, [r0, #4]
   b7fb0:	461a      	mov	r2, r3
   b7fb2:	4619      	mov	r1, r3
   b7fb4:	f7fe bd3c 	b.w	b6a30 <network_off>

000b7fb8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7fb8:	2300      	movs	r3, #0
   b7fba:	6840      	ldr	r0, [r0, #4]
   b7fbc:	461a      	mov	r2, r3
   b7fbe:	4619      	mov	r1, r3
   b7fc0:	f7fe bd2e 	b.w	b6a20 <network_on>

000b7fc4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7fc4:	2200      	movs	r2, #0
   b7fc6:	6840      	ldr	r0, [r0, #4]
   b7fc8:	4611      	mov	r1, r2
   b7fca:	f7fe bd21 	b.w	b6a10 <network_ready>

000b7fce <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7fce:	2200      	movs	r2, #0
   b7fd0:	6840      	ldr	r0, [r0, #4]
   b7fd2:	4611      	mov	r1, r2
   b7fd4:	f7fe bd0c 	b.w	b69f0 <network_connecting>

000b7fd8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7fd8:	6840      	ldr	r0, [r0, #4]
   b7fda:	2200      	movs	r2, #0
   b7fdc:	2102      	movs	r1, #2
   b7fde:	f7fe bd0f 	b.w	b6a00 <network_disconnect>

000b7fe2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7fe2:	2300      	movs	r3, #0
   b7fe4:	6840      	ldr	r0, [r0, #4]
   b7fe6:	461a      	mov	r2, r3
   b7fe8:	f7fe bcfa 	b.w	b69e0 <network_connect>

000b7fec <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7fec:	4b02      	ldr	r3, [pc, #8]	; (b7ff8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7fee:	2203      	movs	r2, #3
   b7ff0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7ff2:	4a02      	ldr	r2, [pc, #8]	; (b7ffc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7ff4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7ff6:	4770      	bx	lr
   b7ff8:	2003e6c8 	.word	0x2003e6c8
   b7ffc:	000bc910 	.word	0x000bc910

000b8000 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b8000:	4770      	bx	lr

000b8002 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b8002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8004:	4606      	mov	r6, r0
   b8006:	4615      	mov	r5, r2
   b8008:	460c      	mov	r4, r1
   b800a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b800c:	42bc      	cmp	r4, r7
   b800e:	d006      	beq.n	b801e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b8010:	6833      	ldr	r3, [r6, #0]
   b8012:	f814 1b01 	ldrb.w	r1, [r4], #1
   b8016:	689b      	ldr	r3, [r3, #8]
   b8018:	4630      	mov	r0, r6
   b801a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b801c:	e7f6      	b.n	b800c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b801e:	4628      	mov	r0, r5
   b8020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8022 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b8022:	7c00      	ldrb	r0, [r0, #16]
   b8024:	2200      	movs	r2, #0
   b8026:	f7fe bb83 	b.w	b6730 <hal_i2c_write>

000b802a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b802a:	7c00      	ldrb	r0, [r0, #16]
   b802c:	2100      	movs	r1, #0
   b802e:	f7fe bb87 	b.w	b6740 <hal_i2c_available>

000b8032 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b8032:	7c00      	ldrb	r0, [r0, #16]
   b8034:	2100      	movs	r1, #0
   b8036:	f7fe bb8b 	b.w	b6750 <hal_i2c_read>

000b803a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b803a:	7c00      	ldrb	r0, [r0, #16]
   b803c:	2100      	movs	r1, #0
   b803e:	f7fe bb8f 	b.w	b6760 <hal_i2c_peek>

000b8042 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b8042:	7c00      	ldrb	r0, [r0, #16]
   b8044:	2100      	movs	r1, #0
   b8046:	f7fe bb93 	b.w	b6770 <hal_i2c_flush>

000b804a <_ZN7TwoWireD0Ev>:
   b804a:	b510      	push	{r4, lr}
   b804c:	2114      	movs	r1, #20
   b804e:	4604      	mov	r4, r0
   b8050:	f7fc f827 	bl	b40a2 <_ZdlPvj>
   b8054:	4620      	mov	r0, r4
   b8056:	bd10      	pop	{r4, pc}

000b8058 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8058:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b805a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b805e:	4604      	mov	r4, r0
   b8060:	4608      	mov	r0, r1
   b8062:	2100      	movs	r1, #0
   b8064:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8068:	4b03      	ldr	r3, [pc, #12]	; (b8078 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b806a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b806c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b806e:	4611      	mov	r1, r2
   b8070:	f7fe fb86 	bl	b6780 <hal_i2c_init>
}
   b8074:	4620      	mov	r0, r4
   b8076:	bd10      	pop	{r4, pc}
   b8078:	000bc94c 	.word	0x000bc94c

000b807c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b807c:	2300      	movs	r3, #0
   b807e:	7c00      	ldrb	r0, [r0, #16]
   b8080:	461a      	mov	r2, r3
   b8082:	4619      	mov	r1, r3
   b8084:	f7fe bb3c 	b.w	b6700 <hal_i2c_begin>

000b8088 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b8088:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b808a:	2200      	movs	r2, #0
   b808c:	2314      	movs	r3, #20
   b808e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b8092:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b8096:	780b      	ldrb	r3, [r1, #0]
   b8098:	f88d 3008 	strb.w	r3, [sp, #8]
   b809c:	684b      	ldr	r3, [r1, #4]
   b809e:	9303      	str	r3, [sp, #12]
   b80a0:	68cb      	ldr	r3, [r1, #12]
   b80a2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b80a4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b80a6:	7a0b      	ldrb	r3, [r1, #8]
   b80a8:	9305      	str	r3, [sp, #20]
   b80aa:	a901      	add	r1, sp, #4
   b80ac:	f7fe fb70 	bl	b6790 <hal_i2c_request_ex>
}
   b80b0:	b007      	add	sp, #28
   b80b2:	f85d fb04 	ldr.w	pc, [sp], #4

000b80b6 <_ZN7TwoWire11requestFromEhjh>:
{
   b80b6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b80b8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b80ba:	f88d 1000 	strb.w	r1, [sp]
   b80be:	f04f 0164 	mov.w	r1, #100	; 0x64
   b80c2:	9103      	str	r1, [sp, #12]
   b80c4:	bf18      	it	ne
   b80c6:	2301      	movne	r3, #1
   b80c8:	4669      	mov	r1, sp
    size_ = size;
   b80ca:	9201      	str	r2, [sp, #4]
   b80cc:	f88d 3008 	strb.w	r3, [sp, #8]
   b80d0:	f7ff ffda 	bl	b8088 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b80d4:	b005      	add	sp, #20
   b80d6:	f85d fb04 	ldr.w	pc, [sp], #4

000b80da <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b80da:	2301      	movs	r3, #1
   b80dc:	f7ff bfeb 	b.w	b80b6 <_ZN7TwoWire11requestFromEhjh>

000b80e0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b80e0:	7c00      	ldrb	r0, [r0, #16]
   b80e2:	2200      	movs	r2, #0
   b80e4:	f7fe bb14 	b.w	b6710 <hal_i2c_begin_transmission>

000b80e8 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b80e8:	b2c9      	uxtb	r1, r1
   b80ea:	f7ff bff9 	b.w	b80e0 <_ZN7TwoWire17beginTransmissionEh>

000b80ee <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b80ee:	7c00      	ldrb	r0, [r0, #16]
   b80f0:	2200      	movs	r2, #0
   b80f2:	f7fe bb15 	b.w	b6720 <hal_i2c_end_transmission>

000b80f6 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b80f6:	2101      	movs	r1, #1
   b80f8:	f7ff bff9 	b.w	b80ee <_ZN7TwoWire15endTransmissionEh>

000b80fc <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b80fc:	4770      	bx	lr

000b80fe <_ZN9IPAddressD0Ev>:
   b80fe:	b510      	push	{r4, lr}
   b8100:	2118      	movs	r1, #24
   b8102:	4604      	mov	r4, r0
   b8104:	f7fb ffcd 	bl	b40a2 <_ZdlPvj>
   b8108:	4620      	mov	r0, r4
   b810a:	bd10      	pop	{r4, pc}

000b810c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b810c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b810e:	7d03      	ldrb	r3, [r0, #20]
   b8110:	2b06      	cmp	r3, #6
{
   b8112:	b08d      	sub	sp, #52	; 0x34
   b8114:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8116:	f100 0704 	add.w	r7, r0, #4
   b811a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b811e:	d012      	beq.n	b8146 <_ZNK9IPAddress7printToER5Print+0x3a>
   b8120:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8124:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8128:	220a      	movs	r2, #10
   b812a:	4630      	mov	r0, r6
   b812c:	f000 f973 	bl	b8416 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b8130:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b8132:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b8134:	d019      	beq.n	b816a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b8136:	2c00      	cmp	r4, #0
   b8138:	d0f4      	beq.n	b8124 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b813a:	212e      	movs	r1, #46	; 0x2e
   b813c:	4630      	mov	r0, r6
   b813e:	f000 f951 	bl	b83e4 <_ZN5Print5printEc>
   b8142:	4404      	add	r4, r0
   b8144:	e7ee      	b.n	b8124 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8146:	232f      	movs	r3, #47	; 0x2f
   b8148:	466a      	mov	r2, sp
   b814a:	4639      	mov	r1, r7
   b814c:	200a      	movs	r0, #10
		buf[0] = 0;
   b814e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8152:	f7fe fb2d 	bl	b67b0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b8156:	4668      	mov	r0, sp
   b8158:	f002 f92b 	bl	ba3b2 <strlen>
   b815c:	6833      	ldr	r3, [r6, #0]
   b815e:	4602      	mov	r2, r0
   b8160:	68db      	ldr	r3, [r3, #12]
   b8162:	4669      	mov	r1, sp
   b8164:	4630      	mov	r0, r6
   b8166:	4798      	blx	r3
   b8168:	4604      	mov	r4, r0
    }
    return n;
}
   b816a:	4620      	mov	r0, r4
   b816c:	b00d      	add	sp, #52	; 0x34
   b816e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8170 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b8170:	b510      	push	{r4, lr}
   b8172:	4b05      	ldr	r3, [pc, #20]	; (b8188 <_ZN9IPAddressC1Ev+0x18>)
   b8174:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b8176:	2211      	movs	r2, #17
   b8178:	f840 3b04 	str.w	r3, [r0], #4
   b817c:	2100      	movs	r1, #0
   b817e:	f002 f8c0 	bl	ba302 <memset>
}
   b8182:	4620      	mov	r0, r4
   b8184:	bd10      	pop	{r4, pc}
   b8186:	bf00      	nop
   b8188:	000bc974 	.word	0x000bc974

000b818c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b818c:	4603      	mov	r3, r0
   b818e:	4a07      	ldr	r2, [pc, #28]	; (b81ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b8190:	b510      	push	{r4, lr}
   b8192:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b8196:	f101 0210 	add.w	r2, r1, #16
   b819a:	f851 4b04 	ldr.w	r4, [r1], #4
   b819e:	f843 4b04 	str.w	r4, [r3], #4
   b81a2:	4291      	cmp	r1, r2
   b81a4:	d1f9      	bne.n	b819a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b81a6:	780a      	ldrb	r2, [r1, #0]
   b81a8:	701a      	strb	r2, [r3, #0]
}
   b81aa:	bd10      	pop	{r4, pc}
   b81ac:	000bc974 	.word	0x000bc974

000b81b0 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b81b0:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b81b2:	2b04      	cmp	r3, #4
   b81b4:	d104      	bne.n	b81c0 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b81b6:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b81b8:	3800      	subs	r0, #0
   b81ba:	bf18      	it	ne
   b81bc:	2001      	movne	r0, #1
   b81be:	4770      	bx	lr
    } else if (version() == 6) {
   b81c0:	2b06      	cmp	r3, #6
   b81c2:	d107      	bne.n	b81d4 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b81c4:	6843      	ldr	r3, [r0, #4]
   b81c6:	b93b      	cbnz	r3, b81d8 <_ZNK9IPAddresscvbEv+0x28>
   b81c8:	6883      	ldr	r3, [r0, #8]
   b81ca:	b92b      	cbnz	r3, b81d8 <_ZNK9IPAddresscvbEv+0x28>
   b81cc:	68c3      	ldr	r3, [r0, #12]
   b81ce:	b91b      	cbnz	r3, b81d8 <_ZNK9IPAddresscvbEv+0x28>
   b81d0:	6900      	ldr	r0, [r0, #16]
   b81d2:	e7f1      	b.n	b81b8 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b81d4:	2000      	movs	r0, #0
   b81d6:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b81d8:	2001      	movs	r0, #1
}
   b81da:	4770      	bx	lr

000b81dc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b81dc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b81de:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b81e2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b81e6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b81ea:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b81ee:	2304      	movs	r3, #4
   b81f0:	6041      	str	r1, [r0, #4]
   b81f2:	7503      	strb	r3, [r0, #20]
}
   b81f4:	bd10      	pop	{r4, pc}
	...

000b81f8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b81f8:	b507      	push	{r0, r1, r2, lr}
   b81fa:	4b06      	ldr	r3, [pc, #24]	; (b8214 <_ZN9IPAddressC1EPKh+0x1c>)
   b81fc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b81fe:	78cb      	ldrb	r3, [r1, #3]
   b8200:	9300      	str	r3, [sp, #0]
   b8202:	788b      	ldrb	r3, [r1, #2]
   b8204:	784a      	ldrb	r2, [r1, #1]
   b8206:	7809      	ldrb	r1, [r1, #0]
   b8208:	f7ff ffe8 	bl	b81dc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b820c:	b003      	add	sp, #12
   b820e:	f85d fb04 	ldr.w	pc, [sp], #4
   b8212:	bf00      	nop
   b8214:	000bc974 	.word	0x000bc974

000b8218 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b8218:	4b01      	ldr	r3, [pc, #4]	; (b8220 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b821a:	4a02      	ldr	r2, [pc, #8]	; (b8224 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b821c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b821e:	4770      	bx	lr
   b8220:	2003e6d0 	.word	0x2003e6d0
   b8224:	000bc980 	.word	0x000bc980

000b8228 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b8228:	2300      	movs	r3, #0
   b822a:	6840      	ldr	r0, [r0, #4]
   b822c:	461a      	mov	r2, r3
   b822e:	f7fe bbd7 	b.w	b69e0 <network_connect>

000b8232 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b8232:	6840      	ldr	r0, [r0, #4]
   b8234:	2200      	movs	r2, #0
   b8236:	2102      	movs	r1, #2
   b8238:	f7fe bbe2 	b.w	b6a00 <network_disconnect>

000b823c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b823c:	2200      	movs	r2, #0
   b823e:	6840      	ldr	r0, [r0, #4]
   b8240:	4611      	mov	r1, r2
   b8242:	f7fe bbd5 	b.w	b69f0 <network_connecting>

000b8246 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b8246:	2200      	movs	r2, #0
   b8248:	6840      	ldr	r0, [r0, #4]
   b824a:	4611      	mov	r1, r2
   b824c:	f7fe bbe0 	b.w	b6a10 <network_ready>

000b8250 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b8250:	2300      	movs	r3, #0
   b8252:	6840      	ldr	r0, [r0, #4]
   b8254:	461a      	mov	r2, r3
   b8256:	4619      	mov	r1, r3
   b8258:	f7fe bbe2 	b.w	b6a20 <network_on>

000b825c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b825c:	2300      	movs	r3, #0
   b825e:	6840      	ldr	r0, [r0, #4]
   b8260:	461a      	mov	r2, r3
   b8262:	4619      	mov	r1, r3
   b8264:	f7fe bbe4 	b.w	b6a30 <network_off>

000b8268 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b8268:	6840      	ldr	r0, [r0, #4]
   b826a:	2100      	movs	r1, #0
   b826c:	f7fe bc08 	b.w	b6a80 <network_is_on>

000b8270 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b8270:	6840      	ldr	r0, [r0, #4]
   b8272:	2100      	movs	r1, #0
   b8274:	f7fe bc0c 	b.w	b6a90 <network_is_off>

000b8278 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b8278:	6840      	ldr	r0, [r0, #4]
   b827a:	2200      	movs	r2, #0
   b827c:	f081 0101 	eor.w	r1, r1, #1
   b8280:	f7fe bbde 	b.w	b6a40 <network_listen>

000b8284 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b8284:	6840      	ldr	r0, [r0, #4]
   b8286:	2200      	movs	r2, #0
   b8288:	f7fe bbea 	b.w	b6a60 <network_set_listen_timeout>

000b828c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b828c:	2200      	movs	r2, #0
   b828e:	6840      	ldr	r0, [r0, #4]
   b8290:	4611      	mov	r1, r2
   b8292:	f7fe bbed 	b.w	b6a70 <network_get_listen_timeout>

000b8296 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b8296:	2200      	movs	r2, #0
   b8298:	6840      	ldr	r0, [r0, #4]
   b829a:	4611      	mov	r1, r2
   b829c:	f7fe bbd8 	b.w	b6a50 <network_listening>

000b82a0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b82a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b82a4:	b095      	sub	sp, #84	; 0x54
   b82a6:	4614      	mov	r4, r2
   b82a8:	460d      	mov	r5, r1
   b82aa:	4607      	mov	r7, r0
    IPAddress addr;
   b82ac:	f7ff ff60 	bl	b8170 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b82b0:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b82b2:	221c      	movs	r2, #28
   b82b4:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b82b6:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b82b8:	f002 f823 	bl	ba302 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b82bc:	2340      	movs	r3, #64	; 0x40
   b82be:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b82c0:	4620      	mov	r0, r4
   b82c2:	466b      	mov	r3, sp
   b82c4:	aa0c      	add	r2, sp, #48	; 0x30
   b82c6:	2100      	movs	r1, #0
   b82c8:	f7fe fa92 	bl	b67f0 <netdb_getaddrinfo>
    if (!r) {
   b82cc:	4604      	mov	r4, r0
   b82ce:	2800      	cmp	r0, #0
   b82d0:	d14b      	bne.n	b836a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b82d2:	4602      	mov	r2, r0
   b82d4:	2101      	movs	r1, #1
   b82d6:	6868      	ldr	r0, [r5, #4]
   b82d8:	f7fe fb9a 	bl	b6a10 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b82dc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b82de:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b82e0:	4622      	mov	r2, r4
   b82e2:	6868      	ldr	r0, [r5, #4]
   b82e4:	f7fe fb94 	bl	b6a10 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b82e8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b82ea:	4681      	mov	r9, r0
        bool ok = false;
   b82ec:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b82ee:	2e00      	cmp	r6, #0
   b82f0:	d03b      	beq.n	b836a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b82f2:	2900      	cmp	r1, #0
   b82f4:	d139      	bne.n	b836a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b82f6:	6873      	ldr	r3, [r6, #4]
   b82f8:	2b02      	cmp	r3, #2
   b82fa:	d003      	beq.n	b8304 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b82fc:	2b0a      	cmp	r3, #10
   b82fe:	d011      	beq.n	b8324 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8300:	69f6      	ldr	r6, [r6, #28]
   b8302:	e7f4      	b.n	b82ee <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b8304:	f1b8 0f00 	cmp.w	r8, #0
   b8308:	d0fa      	beq.n	b8300 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b830a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b830c:	a806      	add	r0, sp, #24
   b830e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b8310:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b8312:	f7ff ff71 	bl	b81f8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8316:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8318:	1d3c      	adds	r4, r7, #4
   b831a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b831c:	682b      	ldr	r3, [r5, #0]
   b831e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8320:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b8322:	e7ed      	b.n	b8300 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b8324:	f1b9 0f00 	cmp.w	r9, #0
   b8328:	d0ea      	beq.n	b8300 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b832a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b832c:	2210      	movs	r2, #16
   b832e:	a801      	add	r0, sp, #4
   b8330:	f001 ffe7 	bl	ba302 <memset>
                    a.v = 6;
   b8334:	2306      	movs	r3, #6
   b8336:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b833a:	ad01      	add	r5, sp, #4
   b833c:	f104 0308 	add.w	r3, r4, #8
   b8340:	3418      	adds	r4, #24
   b8342:	6818      	ldr	r0, [r3, #0]
   b8344:	6859      	ldr	r1, [r3, #4]
   b8346:	462a      	mov	r2, r5
   b8348:	c203      	stmia	r2!, {r0, r1}
   b834a:	3308      	adds	r3, #8
   b834c:	42a3      	cmp	r3, r4
   b834e:	4615      	mov	r5, r2
   b8350:	d1f7      	bne.n	b8342 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b8352:	a901      	add	r1, sp, #4
   b8354:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b8356:	ad07      	add	r5, sp, #28
   b8358:	f7ff ff18 	bl	b818c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b835c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b835e:	1d3c      	adds	r4, r7, #4
   b8360:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8362:	682b      	ldr	r3, [r5, #0]
   b8364:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8366:	4649      	mov	r1, r9
   b8368:	e7ca      	b.n	b8300 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b836a:	9800      	ldr	r0, [sp, #0]
   b836c:	f7fe fa38 	bl	b67e0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b8370:	4638      	mov	r0, r7
   b8372:	b015      	add	sp, #84	; 0x54
   b8374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b8378 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b8378:	4b02      	ldr	r3, [pc, #8]	; (b8384 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b837a:	4a03      	ldr	r2, [pc, #12]	; (b8388 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b837c:	601a      	str	r2, [r3, #0]
   b837e:	2200      	movs	r2, #0
   b8380:	605a      	str	r2, [r3, #4]

} // spark
   b8382:	4770      	bx	lr
   b8384:	2003e6d4 	.word	0x2003e6d4
   b8388:	000bc98c 	.word	0x000bc98c

000b838c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b838c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b838e:	4606      	mov	r6, r0
   b8390:	460d      	mov	r5, r1
  size_t n = 0;
   b8392:	188f      	adds	r7, r1, r2
   b8394:	2400      	movs	r4, #0
  while (size--) {
   b8396:	42bd      	cmp	r5, r7
   b8398:	d00c      	beq.n	b83b4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b839a:	6833      	ldr	r3, [r6, #0]
   b839c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b83a0:	689b      	ldr	r3, [r3, #8]
   b83a2:	4630      	mov	r0, r6
   b83a4:	4798      	blx	r3
     if (chunk>=0)
   b83a6:	1e03      	subs	r3, r0, #0
   b83a8:	db01      	blt.n	b83ae <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b83aa:	441c      	add	r4, r3
  while (size--) {
   b83ac:	e7f3      	b.n	b8396 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b83ae:	2c00      	cmp	r4, #0
   b83b0:	bf08      	it	eq
   b83b2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b83b4:	4620      	mov	r0, r4
   b83b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b83b8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b83b8:	b513      	push	{r0, r1, r4, lr}
   b83ba:	4604      	mov	r4, r0
    }
   b83bc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b83be:	b159      	cbz	r1, b83d8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b83c0:	9101      	str	r1, [sp, #4]
   b83c2:	f001 fff6 	bl	ba3b2 <strlen>
   b83c6:	6823      	ldr	r3, [r4, #0]
   b83c8:	9901      	ldr	r1, [sp, #4]
   b83ca:	68db      	ldr	r3, [r3, #12]
   b83cc:	4602      	mov	r2, r0
   b83ce:	4620      	mov	r0, r4
    }
   b83d0:	b002      	add	sp, #8
   b83d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b83d6:	4718      	bx	r3
    }
   b83d8:	b002      	add	sp, #8
   b83da:	bd10      	pop	{r4, pc}

000b83dc <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b83dc:	b508      	push	{r3, lr}
  return write(str);
   b83de:	f7ff ffeb 	bl	b83b8 <_ZN5Print5writeEPKc>
}
   b83e2:	bd08      	pop	{r3, pc}

000b83e4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b83e4:	6803      	ldr	r3, [r0, #0]
   b83e6:	689b      	ldr	r3, [r3, #8]
   b83e8:	4718      	bx	r3

000b83ea <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b83ea:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b83ec:	210d      	movs	r1, #13
{
   b83ee:	4605      	mov	r5, r0
  size_t n = print('\r');
   b83f0:	f7ff fff8 	bl	b83e4 <_ZN5Print5printEc>
  n += print('\n');
   b83f4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b83f6:	4604      	mov	r4, r0
  n += print('\n');
   b83f8:	4628      	mov	r0, r5
   b83fa:	f7ff fff3 	bl	b83e4 <_ZN5Print5printEc>
  return n;
}
   b83fe:	4420      	add	r0, r4
   b8400:	bd38      	pop	{r3, r4, r5, pc}

000b8402 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b8402:	b538      	push	{r3, r4, r5, lr}
   b8404:	4605      	mov	r5, r0
  return write(str);
   b8406:	f7ff ffd7 	bl	b83b8 <_ZN5Print5writeEPKc>
   b840a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b840c:	4628      	mov	r0, r5
   b840e:	f7ff ffec 	bl	b83ea <_ZN5Print7printlnEv>
  return n;
}
   b8412:	4420      	add	r0, r4
   b8414:	bd38      	pop	{r3, r4, r5, pc}

000b8416 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b8416:	b530      	push	{r4, r5, lr}
   b8418:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b841a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b841c:	2a01      	cmp	r2, #1
  *str = '\0';
   b841e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b8422:	bf98      	it	ls
   b8424:	220a      	movls	r2, #10
   b8426:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b8428:	460d      	mov	r5, r1
   b842a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b842e:	fb01 5312 	mls	r3, r1, r2, r5
   b8432:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8436:	2b09      	cmp	r3, #9
   b8438:	bf94      	ite	ls
   b843a:	3330      	addls	r3, #48	; 0x30
   b843c:	3337      	addhi	r3, #55	; 0x37
   b843e:	b2db      	uxtb	r3, r3
  } while(n);
   b8440:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8442:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b8446:	d9ef      	bls.n	b8428 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b8448:	4621      	mov	r1, r4
   b844a:	f7ff ffb5 	bl	b83b8 <_ZN5Print5writeEPKc>
}
   b844e:	b00b      	add	sp, #44	; 0x2c
   b8450:	bd30      	pop	{r4, r5, pc}
	...

000b8454 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b8454:	4b01      	ldr	r3, [pc, #4]	; (b845c <_GLOBAL__sub_I_RGB+0x8>)
   b8456:	2200      	movs	r2, #0
   b8458:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b845a:	4770      	bx	lr
   b845c:	2003e6dc 	.word	0x2003e6dc

000b8460 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b8460:	b510      	push	{r4, lr}
   b8462:	4604      	mov	r4, r0
{
	free(buffer);
   b8464:	6800      	ldr	r0, [r0, #0]
   b8466:	f7fe fb23 	bl	b6ab0 <free>
}
   b846a:	4620      	mov	r0, r4
   b846c:	bd10      	pop	{r4, pc}

000b846e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b846e:	b510      	push	{r4, lr}
   b8470:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b8472:	6800      	ldr	r0, [r0, #0]
   b8474:	b108      	cbz	r0, b847a <_ZN6String10invalidateEv+0xc>
   b8476:	f7fe fb1b 	bl	b6ab0 <free>
	buffer = NULL;
   b847a:	2300      	movs	r3, #0
	capacity = len = 0;
   b847c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b8480:	6023      	str	r3, [r4, #0]
}
   b8482:	bd10      	pop	{r4, pc}

000b8484 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b8484:	b538      	push	{r3, r4, r5, lr}
   b8486:	4604      	mov	r4, r0
   b8488:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b848a:	6800      	ldr	r0, [r0, #0]
   b848c:	3101      	adds	r1, #1
   b848e:	f7fe fb17 	bl	b6ac0 <realloc>
	if (newbuffer) {
   b8492:	b110      	cbz	r0, b849a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b8494:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b8498:	2001      	movs	r0, #1
	}
	return 0;
}
   b849a:	bd38      	pop	{r3, r4, r5, pc}

000b849c <_ZN6String7reserveEj>:
{
   b849c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b849e:	6803      	ldr	r3, [r0, #0]
{
   b84a0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b84a2:	b123      	cbz	r3, b84ae <_ZN6String7reserveEj+0x12>
   b84a4:	6843      	ldr	r3, [r0, #4]
   b84a6:	428b      	cmp	r3, r1
   b84a8:	d301      	bcc.n	b84ae <_ZN6String7reserveEj+0x12>
   b84aa:	2001      	movs	r0, #1
}
   b84ac:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b84ae:	4620      	mov	r0, r4
   b84b0:	f7ff ffe8 	bl	b8484 <_ZN6String12changeBufferEj>
   b84b4:	2800      	cmp	r0, #0
   b84b6:	d0f9      	beq.n	b84ac <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b84b8:	68a3      	ldr	r3, [r4, #8]
   b84ba:	2b00      	cmp	r3, #0
   b84bc:	d1f5      	bne.n	b84aa <_ZN6String7reserveEj+0xe>
   b84be:	6822      	ldr	r2, [r4, #0]
   b84c0:	7013      	strb	r3, [r2, #0]
   b84c2:	e7f2      	b.n	b84aa <_ZN6String7reserveEj+0xe>

000b84c4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b84c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b84c6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b84c8:	4611      	mov	r1, r2
   b84ca:	9201      	str	r2, [sp, #4]
{
   b84cc:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b84ce:	f7ff ffe5 	bl	b849c <_ZN6String7reserveEj>
   b84d2:	9a01      	ldr	r2, [sp, #4]
   b84d4:	b928      	cbnz	r0, b84e2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b84d6:	4620      	mov	r0, r4
   b84d8:	f7ff ffc9 	bl	b846e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b84dc:	4620      	mov	r0, r4
   b84de:	b003      	add	sp, #12
   b84e0:	bd30      	pop	{r4, r5, pc}
	len = length;
   b84e2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b84e4:	4629      	mov	r1, r5
   b84e6:	6820      	ldr	r0, [r4, #0]
   b84e8:	f001 fee3 	bl	ba2b2 <memcpy>
	buffer[len] = 0;
   b84ec:	6822      	ldr	r2, [r4, #0]
   b84ee:	68a3      	ldr	r3, [r4, #8]
   b84f0:	2100      	movs	r1, #0
   b84f2:	54d1      	strb	r1, [r2, r3]
	return *this;
   b84f4:	e7f2      	b.n	b84dc <_ZN6String4copyEPKcj+0x18>

000b84f6 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b84f6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b84f8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b84fa:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b84fe:	4604      	mov	r4, r0
	len = 0;
   b8500:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8502:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b8504:	b141      	cbz	r1, b8518 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b8506:	4608      	mov	r0, r1
   b8508:	9101      	str	r1, [sp, #4]
   b850a:	f001 ff52 	bl	ba3b2 <strlen>
   b850e:	9901      	ldr	r1, [sp, #4]
   b8510:	4602      	mov	r2, r0
   b8512:	4620      	mov	r0, r4
   b8514:	f7ff ffd6 	bl	b84c4 <_ZN6String4copyEPKcj>
}
   b8518:	4620      	mov	r0, r4
   b851a:	b002      	add	sp, #8
   b851c:	bd10      	pop	{r4, pc}

000b851e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b851e:	b513      	push	{r0, r1, r4, lr}
   b8520:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b8522:	b159      	cbz	r1, b853c <_ZN6StringaSEPKc+0x1e>
   b8524:	4608      	mov	r0, r1
   b8526:	9101      	str	r1, [sp, #4]
   b8528:	f001 ff43 	bl	ba3b2 <strlen>
   b852c:	9901      	ldr	r1, [sp, #4]
   b852e:	4602      	mov	r2, r0
   b8530:	4620      	mov	r0, r4
   b8532:	f7ff ffc7 	bl	b84c4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8536:	4620      	mov	r0, r4
   b8538:	b002      	add	sp, #8
   b853a:	bd10      	pop	{r4, pc}
	else invalidate();
   b853c:	f7ff ff97 	bl	b846e <_ZN6String10invalidateEv>
   b8540:	e7f9      	b.n	b8536 <_ZN6StringaSEPKc+0x18>

000b8542 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b8542:	b510      	push	{r4, lr}
   b8544:	4604      	mov	r4, r0
   b8546:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b8548:	2300      	movs	r3, #0
	capacity = 0;
   b854a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b854e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b8550:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b8552:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b8554:	a901      	add	r1, sp, #4
   b8556:	f000 fcf3 	bl	b8f40 <itoa>
	*this = buf;
   b855a:	a901      	add	r1, sp, #4
   b855c:	4620      	mov	r0, r4
   b855e:	f7ff ffde 	bl	b851e <_ZN6StringaSEPKc>
}
   b8562:	4620      	mov	r0, r4
   b8564:	b00a      	add	sp, #40	; 0x28
   b8566:	bd10      	pop	{r4, pc}

000b8568 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b8568:	b570      	push	{r4, r5, r6, lr}
   b856a:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b856c:	460e      	mov	r6, r1
   b856e:	b909      	cbnz	r1, b8574 <_ZN6String6concatEPKcj+0xc>
   b8570:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b8572:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b8574:	b16a      	cbz	r2, b8592 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b8576:	6884      	ldr	r4, [r0, #8]
   b8578:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b857a:	4621      	mov	r1, r4
   b857c:	f7ff ff8e 	bl	b849c <_ZN6String7reserveEj>
   b8580:	2800      	cmp	r0, #0
   b8582:	d0f5      	beq.n	b8570 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b8584:	6828      	ldr	r0, [r5, #0]
   b8586:	68ab      	ldr	r3, [r5, #8]
   b8588:	4631      	mov	r1, r6
   b858a:	4418      	add	r0, r3
   b858c:	f001 ff09 	bl	ba3a2 <strcpy>
	len = newlen;
   b8590:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b8592:	2001      	movs	r0, #1
   b8594:	e7ed      	b.n	b8572 <_ZN6String6concatEPKcj+0xa>

000b8596 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b8596:	688a      	ldr	r2, [r1, #8]
   b8598:	6809      	ldr	r1, [r1, #0]
   b859a:	f7ff bfe5 	b.w	b8568 <_ZN6String6concatEPKcj>

000b859e <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b859e:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b85a0:	2300      	movs	r3, #0
	buf[0] = c;
   b85a2:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b85a6:	2201      	movs	r2, #1
   b85a8:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b85aa:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b85ae:	f7ff ffdb 	bl	b8568 <_ZN6String6concatEPKcj>
}
   b85b2:	b003      	add	sp, #12
   b85b4:	f85d fb04 	ldr.w	pc, [sp], #4

000b85b8 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b85b8:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b85ba:	688a      	ldr	r2, [r1, #8]
   b85bc:	6809      	ldr	r1, [r1, #0]
{
   b85be:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b85c0:	f7ff ffd2 	bl	b8568 <_ZN6String6concatEPKcj>
   b85c4:	b910      	cbnz	r0, b85cc <_ZplRK15StringSumHelperRK6String+0x14>
   b85c6:	4620      	mov	r0, r4
   b85c8:	f7ff ff51 	bl	b846e <_ZN6String10invalidateEv>
	return a;
}
   b85cc:	4620      	mov	r0, r4
   b85ce:	bd10      	pop	{r4, pc}

000b85d0 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b85d0:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b85d2:	6882      	ldr	r2, [r0, #8]
   b85d4:	b93a      	cbnz	r2, b85e6 <_ZNK6String6equalsEPKc+0x16>
   b85d6:	b121      	cbz	r1, b85e2 <_ZNK6String6equalsEPKc+0x12>
   b85d8:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b85da:	fab0 f080 	clz	r0, r0
   b85de:	0940      	lsrs	r0, r0, #5
   b85e0:	e000      	b.n	b85e4 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b85e2:	2001      	movs	r0, #1
}
   b85e4:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b85e6:	6800      	ldr	r0, [r0, #0]
   b85e8:	b909      	cbnz	r1, b85ee <_ZNK6String6equalsEPKc+0x1e>
   b85ea:	7800      	ldrb	r0, [r0, #0]
   b85ec:	e7f5      	b.n	b85da <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b85ee:	f001 fece 	bl	ba38e <strcmp>
   b85f2:	e7f2      	b.n	b85da <_ZNK6String6equalsEPKc+0xa>

000b85f4 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   b85f4:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   b85f6:	6883      	ldr	r3, [r0, #8]
   b85f8:	4293      	cmp	r3, r2
   b85fa:	d907      	bls.n	b860c <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   b85fc:	6804      	ldr	r4, [r0, #0]
   b85fe:	6809      	ldr	r1, [r1, #0]
   b8600:	18a0      	adds	r0, r4, r2
   b8602:	f001 fefe 	bl	ba402 <strstr>
	if (found == NULL) return -1;
   b8606:	b108      	cbz	r0, b860c <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   b8608:	1b00      	subs	r0, r0, r4
}
   b860a:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   b860c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8610:	e7fb      	b.n	b860a <_ZNK6String7indexOfERKS_j+0x16>

000b8612 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   b8612:	2200      	movs	r2, #0
   b8614:	f7ff bfee 	b.w	b85f4 <_ZNK6String7indexOfERKS_j>

000b8618 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b8618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b861a:	429a      	cmp	r2, r3
{
   b861c:	460f      	mov	r7, r1
   b861e:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b8620:	490c      	ldr	r1, [pc, #48]	; (b8654 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b8622:	bf88      	it	hi
   b8624:	4613      	movhi	r3, r2
{
   b8626:	4614      	mov	r4, r2
   b8628:	4606      	mov	r6, r0
	if (left > right) {
   b862a:	bf84      	itt	hi
   b862c:	462c      	movhi	r4, r5
   b862e:	461d      	movhi	r5, r3
	String out;
   b8630:	f7ff ff61 	bl	b84f6 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b8634:	68bb      	ldr	r3, [r7, #8]
   b8636:	42a3      	cmp	r3, r4
   b8638:	d30a      	bcc.n	b8650 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b863a:	6839      	ldr	r1, [r7, #0]
   b863c:	42ab      	cmp	r3, r5
   b863e:	bf94      	ite	ls
   b8640:	ebc4 0203 	rsbls	r2, r4, r3
   b8644:	ebc4 0205 	rsbhi	r2, r4, r5
   b8648:	4421      	add	r1, r4
   b864a:	4630      	mov	r0, r6
   b864c:	f7ff ff3a 	bl	b84c4 <_ZN6String4copyEPKcj>
	return out;
}
   b8650:	4630      	mov	r0, r6
   b8652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b8654:	000bc6f2 	.word	0x000bc6f2

000b8658 <_ZNK6String9substringEj>:
{
   b8658:	b510      	push	{r4, lr}
   b865a:	4604      	mov	r4, r0
	return substring(left, len);
   b865c:	688b      	ldr	r3, [r1, #8]
   b865e:	f7ff ffdb 	bl	b8618 <_ZNK6String9substringEjj>
}
   b8662:	4620      	mov	r0, r4
   b8664:	bd10      	pop	{r4, pc}

000b8666 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   b8666:	6800      	ldr	r0, [r0, #0]
   b8668:	b108      	cbz	r0, b866e <_ZNK6String5toIntEv+0x8>
   b866a:	f001 be0e 	b.w	ba28a <atol>
	return 0;
}
   b866e:	4770      	bx	lr

000b8670 <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
   b8670:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   b8672:	6800      	ldr	r0, [r0, #0]
   b8674:	b140      	cbz	r0, b8688 <_ZNK6String7toFloatEv+0x18>
   b8676:	f001 fe01 	bl	ba27c <atof>
   b867a:	ec51 0b10 	vmov	r0, r1, d0
   b867e:	f001 fd89 	bl	ba194 <__aeabi_d2f>
   b8682:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   b8686:	bd08      	pop	{r3, pc}
	return 0;
   b8688:	ed9f 0a01 	vldr	s0, [pc, #4]	; b8690 <_ZNK6String7toFloatEv+0x20>
   b868c:	e7fb      	b.n	b8686 <_ZNK6String7toFloatEv+0x16>
   b868e:	bf00      	nop
   b8690:	00000000 	.word	0x00000000

000b8694 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8694:	4b05      	ldr	r3, [pc, #20]	; (b86ac <_GLOBAL__sub_I_System+0x18>)
   b8696:	2202      	movs	r2, #2
   b8698:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b869a:	4b05      	ldr	r3, [pc, #20]	; (b86b0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b869c:	4a05      	ldr	r2, [pc, #20]	; (b86b4 <_GLOBAL__sub_I_System+0x20>)
   b869e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b86a0:	2000      	movs	r0, #0
   b86a2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b86a6:	f7fe b95b 	b.w	b6960 <set_system_mode>
   b86aa:	bf00      	nop
   b86ac:	2003e6f8 	.word	0x2003e6f8
   b86b0:	2003e6ec 	.word	0x2003e6ec
   b86b4:	ffff0000 	.word	0xffff0000

000b86b8 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b86b8:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b86ba:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b86bc:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b86c0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b86c2:	2201      	movs	r2, #1
   b86c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b86c8:	f10d 0107 	add.w	r1, sp, #7
   b86cc:	47a0      	blx	r4
}
   b86ce:	b002      	add	sp, #8
   b86d0:	bd10      	pop	{r4, pc}

000b86d2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b86d2:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b86d4:	6803      	ldr	r3, [r0, #0]
   b86d6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b86d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b86dc:	46a4      	mov	ip, r4
}
   b86de:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b86e2:	4760      	bx	ip

000b86e4 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b86e4:	b513      	push	{r0, r1, r4, lr}
   b86e6:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b86e8:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b86ea:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b86ee:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b86f0:	f10d 0107 	add.w	r1, sp, #7
   b86f4:	2201      	movs	r2, #1
   b86f6:	47a0      	blx	r4
}
   b86f8:	b002      	add	sp, #8
   b86fa:	bd10      	pop	{r4, pc}

000b86fc <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b86fc:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b86fe:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8700:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8704:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8708:	429a      	cmp	r2, r3
int TCPClient::read() {
   b870a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b870c:	d008      	beq.n	b8720 <_ZN9TCPClient4readEv+0x24>
   b870e:	6963      	ldr	r3, [r4, #20]
   b8710:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b8714:	1c51      	adds	r1, r2, #1
   b8716:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b871a:	4413      	add	r3, r2
   b871c:	7918      	ldrb	r0, [r3, #4]
}
   b871e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8720:	6803      	ldr	r3, [r0, #0]
   b8722:	691b      	ldr	r3, [r3, #16]
   b8724:	4798      	blx	r3
   b8726:	2800      	cmp	r0, #0
   b8728:	d1f1      	bne.n	b870e <_ZN9TCPClient4readEv+0x12>
   b872a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b872e:	e7f6      	b.n	b871e <_ZN9TCPClient4readEv+0x22>

000b8730 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b8730:	4770      	bx	lr

000b8732 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b8732:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b8734:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b8736:	43c0      	mvns	r0, r0
   b8738:	0fc0      	lsrs	r0, r0, #31
   b873a:	4770      	bx	lr

000b873c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b873c:	4770      	bx	lr
	...

000b8740 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8740:	4b06      	ldr	r3, [pc, #24]	; (b875c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8742:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8744:	b510      	push	{r4, lr}
   b8746:	f100 040c 	add.w	r4, r0, #12
	    ||
   b874a:	d005      	beq.n	b8758 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b874c:	4608      	mov	r0, r1
   b874e:	f000 fd39 	bl	b91c4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8752:	2800      	cmp	r0, #0
   b8754:	bf08      	it	eq
   b8756:	2400      	moveq	r4, #0
      }
   b8758:	4620      	mov	r0, r4
   b875a:	bd10      	pop	{r4, pc}
   b875c:	000bc8c8 	.word	0x000bc8c8

000b8760 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8760:	b510      	push	{r4, lr}
   b8762:	21ac      	movs	r1, #172	; 0xac
   b8764:	4604      	mov	r4, r0
   b8766:	f7fb fc9c 	bl	b40a2 <_ZdlPvj>
   b876a:	4620      	mov	r0, r4
   b876c:	bd10      	pop	{r4, pc}

000b876e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b876e:	21ac      	movs	r1, #172	; 0xac
   b8770:	f7fb bc97 	b.w	b40a2 <_ZdlPvj>

000b8774 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b8774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b8778:	f04f 0800 	mov.w	r8, #0
   b877c:	b086      	sub	sp, #24
   b877e:	461c      	mov	r4, r3
   b8780:	f8c0 8004 	str.w	r8, [r0, #4]
   b8784:	4605      	mov	r5, r0
   b8786:	460e      	mov	r6, r1
   b8788:	4617      	mov	r7, r2
    struct timeval tv = {};
   b878a:	4641      	mov	r1, r8
   b878c:	2210      	movs	r2, #16
   b878e:	a802      	add	r0, sp, #8
   b8790:	f001 fdb7 	bl	ba302 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b8794:	1c63      	adds	r3, r4, #1
   b8796:	d009      	beq.n	b87ac <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b8798:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b879c:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b87a0:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b87a4:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b87a8:	435c      	muls	r4, r3
   b87aa:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b87ac:	6968      	ldr	r0, [r5, #20]
   b87ae:	2310      	movs	r3, #16
   b87b0:	9300      	str	r3, [sp, #0]
   b87b2:	6800      	ldr	r0, [r0, #0]
   b87b4:	ab02      	add	r3, sp, #8
   b87b6:	f241 0205 	movw	r2, #4101	; 0x1005
   b87ba:	f640 71ff 	movw	r1, #4095	; 0xfff
   b87be:	f7fe f81f 	bl	b6800 <sock_setsockopt>
    if (ret < 0) {
   b87c2:	2800      	cmp	r0, #0
   b87c4:	da07      	bge.n	b87d6 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b87c6:	f7fe f99b 	bl	b6b00 <__errno>
   b87ca:	6803      	ldr	r3, [r0, #0]
   b87cc:	606b      	str	r3, [r5, #4]
        return 0;
   b87ce:	2000      	movs	r0, #0
}
   b87d0:	b006      	add	sp, #24
   b87d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b87d6:	6968      	ldr	r0, [r5, #20]
   b87d8:	2300      	movs	r3, #0
   b87da:	6800      	ldr	r0, [r0, #0]
   b87dc:	463a      	mov	r2, r7
   b87de:	4631      	mov	r1, r6
   b87e0:	f7fe f82e 	bl	b6840 <sock_send>
    if (ret < 0) {
   b87e4:	1e03      	subs	r3, r0, #0
   b87e6:	dbee      	blt.n	b87c6 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b87e8:	4618      	mov	r0, r3
   b87ea:	e7f1      	b.n	b87d0 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b87ec <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b87ec:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b87ee:	6984      	ldr	r4, [r0, #24]
   b87f0:	4b0a      	ldr	r3, [pc, #40]	; (b881c <_ZN9TCPClientD1Ev+0x30>)
   b87f2:	6003      	str	r3, [r0, #0]
   b87f4:	4605      	mov	r5, r0
   b87f6:	b17c      	cbz	r4, b8818 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b87f8:	6863      	ldr	r3, [r4, #4]
   b87fa:	3b01      	subs	r3, #1
   b87fc:	6063      	str	r3, [r4, #4]
   b87fe:	b95b      	cbnz	r3, b8818 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b8800:	6823      	ldr	r3, [r4, #0]
   b8802:	4620      	mov	r0, r4
   b8804:	689b      	ldr	r3, [r3, #8]
   b8806:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b8808:	68a3      	ldr	r3, [r4, #8]
   b880a:	3b01      	subs	r3, #1
   b880c:	60a3      	str	r3, [r4, #8]
   b880e:	b91b      	cbnz	r3, b8818 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b8810:	6823      	ldr	r3, [r4, #0]
   b8812:	4620      	mov	r0, r4
   b8814:	68db      	ldr	r3, [r3, #12]
   b8816:	4798      	blx	r3
   b8818:	4628      	mov	r0, r5
   b881a:	bd38      	pop	{r3, r4, r5, pc}
   b881c:	000bc9fc 	.word	0x000bc9fc

000b8820 <_ZN9TCPClientD0Ev>:
   b8820:	b510      	push	{r4, lr}
   b8822:	4604      	mov	r4, r0
   b8824:	f7ff ffe2 	bl	b87ec <_ZN9TCPClientD1Ev>
   b8828:	4620      	mov	r0, r4
   b882a:	211c      	movs	r1, #28
   b882c:	f7fb fc39 	bl	b40a2 <_ZdlPvj>
   b8830:	4620      	mov	r0, r4
   b8832:	bd10      	pop	{r4, pc}

000b8834 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b8834:	b530      	push	{r4, r5, lr}
   b8836:	b087      	sub	sp, #28
   b8838:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b883a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b883c:	4668      	mov	r0, sp
   b883e:	f7ff fcdb 	bl	b81f8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8842:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8844:	3404      	adds	r4, #4
   b8846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8848:	682b      	ldr	r3, [r5, #0]
   b884a:	7023      	strb	r3, [r4, #0]
    }
   b884c:	b007      	add	sp, #28
   b884e:	bd30      	pop	{r4, r5, pc}

000b8850 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b8850:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b8852:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b8854:	4b05      	ldr	r3, [pc, #20]	; (b886c <_ZN9TCPClient8remoteIPEv+0x1c>)
   b8856:	4604      	mov	r4, r0
   b8858:	358c      	adds	r5, #140	; 0x8c
   b885a:	f844 3b04 	str.w	r3, [r4], #4
   b885e:	4606      	mov	r6, r0
   b8860:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8862:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8864:	682b      	ldr	r3, [r5, #0]
   b8866:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b8868:	4630      	mov	r0, r6
   b886a:	bd70      	pop	{r4, r5, r6, pc}
   b886c:	000bc974 	.word	0x000bc974

000b8870 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8874:	4698      	mov	r8, r3
    stop();
   b8876:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8878:	b093      	sub	sp, #76	; 0x4c
   b887a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b887c:	2400      	movs	r4, #0
    stop();
   b887e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8880:	4606      	mov	r6, r0
   b8882:	4617      	mov	r7, r2
    stop();
   b8884:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8886:	4628      	mov	r0, r5
   b8888:	466b      	mov	r3, sp
   b888a:	4622      	mov	r2, r4
   b888c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b888e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8890:	f7fd ffae 	bl	b67f0 <netdb_getaddrinfo>
   b8894:	4605      	mov	r5, r0
   b8896:	2800      	cmp	r0, #0
   b8898:	d163      	bne.n	b8962 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b889a:	9b00      	ldr	r3, [sp, #0]
   b889c:	2b00      	cmp	r3, #0
   b889e:	d04b      	beq.n	b8938 <_ZN9TCPClient7connectEPKctm+0xc8>
   b88a0:	695b      	ldr	r3, [r3, #20]
   b88a2:	2b00      	cmp	r3, #0
   b88a4:	d048      	beq.n	b8938 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b88a6:	a806      	add	r0, sp, #24
   b88a8:	f7ff fc62 	bl	b8170 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b88ac:	9b00      	ldr	r3, [sp, #0]
   b88ae:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b88b0:	7863      	ldrb	r3, [r4, #1]
   b88b2:	2b02      	cmp	r3, #2
   b88b4:	d104      	bne.n	b88c0 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b88b6:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b88b8:	a806      	add	r0, sp, #24
   b88ba:	f7ff ffbb 	bl	b8834 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b88be:	e026      	b.n	b890e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b88c0:	2b0a      	cmp	r3, #10
   b88c2:	d124      	bne.n	b890e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b88c4:	2211      	movs	r2, #17
   b88c6:	4629      	mov	r1, r5
   b88c8:	a801      	add	r0, sp, #4
   b88ca:	f001 fd1a 	bl	ba302 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b88ce:	68a3      	ldr	r3, [r4, #8]
   b88d0:	2b00      	cmp	r3, #0
   b88d2:	d038      	beq.n	b8946 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b88d4:	f104 0308 	add.w	r3, r4, #8
   b88d8:	f10d 0c04 	add.w	ip, sp, #4
   b88dc:	3418      	adds	r4, #24
   b88de:	6818      	ldr	r0, [r3, #0]
   b88e0:	6859      	ldr	r1, [r3, #4]
   b88e2:	4662      	mov	r2, ip
   b88e4:	c203      	stmia	r2!, {r0, r1}
   b88e6:	3308      	adds	r3, #8
   b88e8:	42a3      	cmp	r3, r4
   b88ea:	4694      	mov	ip, r2
   b88ec:	d1f7      	bne.n	b88de <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b88ee:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b88f0:	a901      	add	r1, sp, #4
   b88f2:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b88f4:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b88f8:	f7ff fc48 	bl	b818c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b88fc:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b8900:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b8904:	ac07      	add	r4, sp, #28
   b8906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8908:	f8dc 3000 	ldr.w	r3, [ip]
   b890c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b890e:	a806      	add	r0, sp, #24
   b8910:	f7ff fc4e 	bl	b81b0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b8914:	b180      	cbz	r0, b8938 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b8916:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b8918:	ad07      	add	r5, sp, #28
   b891a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b891e:	4b12      	ldr	r3, [pc, #72]	; (b8968 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b8920:	930c      	str	r3, [sp, #48]	; 0x30
   b8922:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8924:	ac0d      	add	r4, sp, #52	; 0x34
   b8926:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8928:	682b      	ldr	r3, [r5, #0]
   b892a:	7023      	strb	r3, [r4, #0]
   b892c:	463a      	mov	r2, r7
   b892e:	4643      	mov	r3, r8
   b8930:	a90c      	add	r1, sp, #48	; 0x30
   b8932:	4630      	mov	r0, r6
   b8934:	47c8      	blx	r9
   b8936:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b8938:	9800      	ldr	r0, [sp, #0]
   b893a:	f7fd ff51 	bl	b67e0 <netdb_freeaddrinfo>
}
   b893e:	4628      	mov	r0, r5
   b8940:	b013      	add	sp, #76	; 0x4c
   b8942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8946:	68e3      	ldr	r3, [r4, #12]
   b8948:	2b00      	cmp	r3, #0
   b894a:	d1c3      	bne.n	b88d4 <_ZN9TCPClient7connectEPKctm+0x64>
   b894c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b8950:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b8954:	f7fd ff34 	bl	b67c0 <inet_htonl>
   b8958:	4581      	cmp	r9, r0
   b895a:	d1bb      	bne.n	b88d4 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b895c:	f104 0114 	add.w	r1, r4, #20
   b8960:	e7aa      	b.n	b88b8 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8962:	4625      	mov	r5, r4
   b8964:	e7e8      	b.n	b8938 <_ZN9TCPClient7connectEPKctm+0xc8>
   b8966:	bf00      	nop
   b8968:	000bc974 	.word	0x000bc974

000b896c <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b896c:	b538      	push	{r3, r4, r5, lr}
   b896e:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b8970:	681a      	ldr	r2, [r3, #0]
   b8972:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b8974:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b8976:	da10      	bge.n	b899a <_ZN9TCPClient9connectedEv+0x2e>
   b8978:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b897c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8980:	429a      	cmp	r2, r3
   b8982:	d10a      	bne.n	b899a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b8984:	6803      	ldr	r3, [r0, #0]
   b8986:	691b      	ldr	r3, [r3, #16]
   b8988:	4798      	blx	r3
        if (!rv) {
   b898a:	4604      	mov	r4, r0
   b898c:	b928      	cbnz	r0, b899a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b898e:	682b      	ldr	r3, [r5, #0]
   b8990:	4628      	mov	r0, r5
   b8992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8994:	4798      	blx	r3
        rv = available();
   b8996:	4620      	mov	r0, r4
}
   b8998:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b899a:	2001      	movs	r0, #1
   b899c:	e7fc      	b.n	b8998 <_ZN9TCPClient9connectedEv+0x2c>

000b899e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b899e:	b510      	push	{r4, lr}
   b89a0:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b89a2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b89a6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b89aa:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b89ac:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b89ae:	d005      	beq.n	b89bc <_ZN9TCPClient4peekEv+0x1e>
   b89b0:	6963      	ldr	r3, [r4, #20]
   b89b2:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b89b6:	4413      	add	r3, r2
   b89b8:	7918      	ldrb	r0, [r3, #4]
}
   b89ba:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b89bc:	6803      	ldr	r3, [r0, #0]
   b89be:	691b      	ldr	r3, [r3, #16]
   b89c0:	4798      	blx	r3
   b89c2:	2800      	cmp	r0, #0
   b89c4:	d1f4      	bne.n	b89b0 <_ZN9TCPClient4peekEv+0x12>
   b89c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b89ca:	e7f6      	b.n	b89ba <_ZN9TCPClient4peekEv+0x1c>

000b89cc <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b89cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b89ce:	6943      	ldr	r3, [r0, #20]
   b89d0:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b89d2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b89d6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b89da:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b89dc:	4605      	mov	r5, r0
   b89de:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b89e0:	d016      	beq.n	b8a10 <_ZN9TCPClient4readEPhj+0x44>
   b89e2:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b89e4:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b89e8:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b89ec:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b89ee:	42bc      	cmp	r4, r7
   b89f0:	bf28      	it	cs
   b89f2:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b89f4:	3304      	adds	r3, #4
   b89f6:	4622      	mov	r2, r4
   b89f8:	4419      	add	r1, r3
   b89fa:	4630      	mov	r0, r6
   b89fc:	f001 fc59 	bl	ba2b2 <memcpy>
   b8a00:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b8a02:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b8a06:	4423      	add	r3, r4
   b8a08:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b8a0c:	4620      	mov	r0, r4
   b8a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b8a10:	6803      	ldr	r3, [r0, #0]
   b8a12:	691b      	ldr	r3, [r3, #16]
   b8a14:	4798      	blx	r3
   b8a16:	2800      	cmp	r0, #0
   b8a18:	d1e3      	bne.n	b89e2 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b8a1a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b8a1e:	e7f5      	b.n	b8a0c <_ZN9TCPClient4readEPhj+0x40>

000b8a20 <_ZN9TCPClient12flush_bufferEv>:
   b8a20:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b8a22:	2300      	movs	r3, #0
   b8a24:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b8a28:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b8a2a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b8a2e:	4770      	bx	lr

000b8a30 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8a34:	461f      	mov	r7, r3
    stop();
   b8a36:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8a38:	460c      	mov	r4, r1
    stop();
   b8a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8a3c:	b08a      	sub	sp, #40	; 0x28
   b8a3e:	4605      	mov	r5, r0
   b8a40:	4616      	mov	r6, r2
    stop();
   b8a42:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b8a44:	7d23      	ldrb	r3, [r4, #20]
   b8a46:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b8a4a:	2b04      	cmp	r3, #4
   b8a4c:	bf0c      	ite	eq
   b8a4e:	2002      	moveq	r0, #2
   b8a50:	200a      	movne	r0, #10
   b8a52:	2206      	movs	r2, #6
   b8a54:	2101      	movs	r1, #1
   b8a56:	f7fd fefb 	bl	b6850 <sock_socket>
   b8a5a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b8a5e:	696b      	ldr	r3, [r5, #20]
   b8a60:	681b      	ldr	r3, [r3, #0]
   b8a62:	2b00      	cmp	r3, #0
   b8a64:	da08      	bge.n	b8a78 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b8a66:	682b      	ldr	r3, [r5, #0]
   b8a68:	4628      	mov	r0, r5
   b8a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8a6c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b8a6e:	4798      	blx	r3
}
   b8a70:	4620      	mov	r0, r4
   b8a72:	b00a      	add	sp, #40	; 0x28
   b8a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b8a78:	4628      	mov	r0, r5
   b8a7a:	f7ff ffd1 	bl	b8a20 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b8a7e:	b1b7      	cbz	r7, b8aae <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b8a80:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8a82:	a903      	add	r1, sp, #12
   b8a84:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b8a86:	9303      	str	r3, [sp, #12]
   b8a88:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8a8c:	f7fd fe88 	bl	b67a0 <if_index_to_name>
   b8a90:	2800      	cmp	r0, #0
   b8a92:	d1e8      	bne.n	b8a66 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b8a94:	6968      	ldr	r0, [r5, #20]
   b8a96:	2306      	movs	r3, #6
   b8a98:	9300      	str	r3, [sp, #0]
   b8a9a:	6800      	ldr	r0, [r0, #0]
   b8a9c:	ab03      	add	r3, sp, #12
   b8a9e:	f241 020b 	movw	r2, #4107	; 0x100b
   b8aa2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8aa6:	f7fd feab 	bl	b6800 <sock_setsockopt>
   b8aaa:	2800      	cmp	r0, #0
   b8aac:	d1db      	bne.n	b8a66 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b8aae:	221c      	movs	r2, #28
   b8ab0:	2100      	movs	r1, #0
   b8ab2:	a803      	add	r0, sp, #12
   b8ab4:	f001 fc25 	bl	ba302 <memset>
    if (ip.version() == 4) {
   b8ab8:	7d23      	ldrb	r3, [r4, #20]
   b8aba:	2b04      	cmp	r3, #4
   b8abc:	d11d      	bne.n	b8afa <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b8abe:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b8ac2:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b8ac4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b8ac8:	f7fd fe82 	bl	b67d0 <inet_htons>
   b8acc:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b8ad0:	6860      	ldr	r0, [r4, #4]
   b8ad2:	f7fd fe75 	bl	b67c0 <inet_htonl>
   b8ad6:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b8ad8:	696b      	ldr	r3, [r5, #20]
   b8ada:	221c      	movs	r2, #28
   b8adc:	6818      	ldr	r0, [r3, #0]
   b8ade:	a903      	add	r1, sp, #12
   b8ae0:	f7fd fe9e 	bl	b6820 <sock_connect>
   b8ae4:	2800      	cmp	r0, #0
   b8ae6:	d1be      	bne.n	b8a66 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b8ae8:	3404      	adds	r4, #4
   b8aea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8aec:	696d      	ldr	r5, [r5, #20]
   b8aee:	358c      	adds	r5, #140	; 0x8c
   b8af0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8af2:	6823      	ldr	r3, [r4, #0]
   b8af4:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b8af6:	2401      	movs	r4, #1
   b8af8:	e7ba      	b.n	b8a70 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b8afa:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b8afe:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b8b00:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b8b04:	f7fd fe64 	bl	b67d0 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b8b08:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b8b0a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b8b0e:	1d23      	adds	r3, r4, #4
   b8b10:	f104 0714 	add.w	r7, r4, #20
   b8b14:	6818      	ldr	r0, [r3, #0]
   b8b16:	6859      	ldr	r1, [r3, #4]
   b8b18:	4632      	mov	r2, r6
   b8b1a:	c203      	stmia	r2!, {r0, r1}
   b8b1c:	3308      	adds	r3, #8
   b8b1e:	42bb      	cmp	r3, r7
   b8b20:	4616      	mov	r6, r2
   b8b22:	d1f7      	bne.n	b8b14 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b8b24:	e7d8      	b.n	b8ad8 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b8b28 <_ZN9TCPClient9availableEv>:
{
   b8b28:	b530      	push	{r4, r5, lr}
   b8b2a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b8b2c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b8b30:	b08b      	sub	sp, #44	; 0x2c
   b8b32:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b8b34:	b12b      	cbz	r3, b8b42 <_ZN9TCPClient9availableEv+0x1a>
   b8b36:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b8b3a:	429a      	cmp	r2, r3
   b8b3c:	d101      	bne.n	b8b42 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b8b3e:	f7ff ff6f 	bl	b8a20 <_ZN9TCPClient12flush_bufferEv>
   b8b42:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b8b44:	6808      	ldr	r0, [r1, #0]
   b8b46:	2800      	cmp	r0, #0
   b8b48:	db18      	blt.n	b8b7c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b8b4a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b8b4e:	2d7f      	cmp	r5, #127	; 0x7f
   b8b50:	d814      	bhi.n	b8b7c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b8b52:	3104      	adds	r1, #4
   b8b54:	2308      	movs	r3, #8
   b8b56:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b8b5a:	4429      	add	r1, r5
   b8b5c:	f7fd fe68 	bl	b6830 <sock_recv>
            if (ret > 0) {
   b8b60:	2800      	cmp	r0, #0
   b8b62:	dd13      	ble.n	b8b8c <_ZN9TCPClient9availableEv+0x64>
   b8b64:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b8b66:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8b6a:	b90a      	cbnz	r2, b8b70 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b8b6c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b8b70:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b8b72:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8b76:	4410      	add	r0, r2
   b8b78:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b8b7c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b8b7e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b8b82:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b8b86:	1ac0      	subs	r0, r0, r3
   b8b88:	b00b      	add	sp, #44	; 0x2c
   b8b8a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b8b8c:	f7fd ffb8 	bl	b6b00 <__errno>
   b8b90:	6803      	ldr	r3, [r0, #0]
   b8b92:	2b0b      	cmp	r3, #11
   b8b94:	d0f2      	beq.n	b8b7c <_ZN9TCPClient9availableEv+0x54>
   b8b96:	f7fd ffb3 	bl	b6b00 <__errno>
   b8b9a:	6803      	ldr	r3, [r0, #0]
   b8b9c:	2b0b      	cmp	r3, #11
   b8b9e:	d0ed      	beq.n	b8b7c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b8ba0:	2320      	movs	r3, #32
   b8ba2:	2500      	movs	r5, #0
   b8ba4:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b8ba8:	f7fd ffaa 	bl	b6b00 <__errno>
   b8bac:	6803      	ldr	r3, [r0, #0]
   b8bae:	9301      	str	r3, [sp, #4]
   b8bb0:	4b08      	ldr	r3, [pc, #32]	; (b8bd4 <_ZN9TCPClient9availableEv+0xac>)
   b8bb2:	4909      	ldr	r1, [pc, #36]	; (b8bd8 <_ZN9TCPClient9availableEv+0xb0>)
   b8bb4:	9300      	str	r3, [sp, #0]
   b8bb6:	aa02      	add	r2, sp, #8
   b8bb8:	462b      	mov	r3, r5
   b8bba:	2032      	movs	r0, #50	; 0x32
   b8bbc:	f7fd fec8 	bl	b6950 <log_message>
                    sock_close(d_->sock);
   b8bc0:	6963      	ldr	r3, [r4, #20]
   b8bc2:	6818      	ldr	r0, [r3, #0]
   b8bc4:	f7fd fe24 	bl	b6810 <sock_close>
   b8bc8:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b8bca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8bce:	601a      	str	r2, [r3, #0]
   b8bd0:	e7d4      	b.n	b8b7c <_ZN9TCPClient9availableEv+0x54>
   b8bd2:	bf00      	nop
   b8bd4:	000bc9c7 	.word	0x000bc9c7
   b8bd8:	000bc9c0 	.word	0x000bc9c0

000b8bdc <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b8bdc:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b8bde:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b8be0:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b8be2:	6818      	ldr	r0, [r3, #0]
   b8be4:	2800      	cmp	r0, #0
   b8be6:	db01      	blt.n	b8bec <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b8be8:	f7fd fe12 	bl	b6810 <sock_close>
   b8bec:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b8bee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8bf2:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b8bf4:	6960      	ldr	r0, [r4, #20]
   b8bf6:	2211      	movs	r2, #17
   b8bf8:	2100      	movs	r1, #0
   b8bfa:	308c      	adds	r0, #140	; 0x8c
   b8bfc:	f001 fb81 	bl	ba302 <memset>
    flush_buffer();
   b8c00:	4620      	mov	r0, r4
}
   b8c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b8c06:	f7ff bf0b 	b.w	b8a20 <_ZN9TCPClient12flush_bufferEv>

000b8c0a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b8c0a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b8c0c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b8c0e:	4604      	mov	r4, r0
          total(0) {
   b8c10:	6001      	str	r1, [r0, #0]
   b8c12:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b8c16:	3088      	adds	r0, #136	; 0x88
   b8c18:	f7ff faaa 	bl	b8170 <_ZN9IPAddressC1Ev>
}
   b8c1c:	4620      	mov	r0, r4
   b8c1e:	bd10      	pop	{r4, pc}

000b8c20 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b8c20:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8c22:	2300      	movs	r3, #0
   b8c24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b8c28:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b8c2c:	4a0e      	ldr	r2, [pc, #56]	; (b8c68 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b8c2e:	6103      	str	r3, [r0, #16]
   b8c30:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8c32:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b8c34:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8c36:	20ac      	movs	r0, #172	; 0xac
   b8c38:	9101      	str	r1, [sp, #4]
   b8c3a:	f7fb fa2c 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b8c3e:	1e05      	subs	r5, r0, #0
   b8c40:	f105 060c 	add.w	r6, r5, #12
   b8c44:	d008      	beq.n	b8c58 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b8c46:	2301      	movs	r3, #1
   b8c48:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b8c4c:	4b07      	ldr	r3, [pc, #28]	; (b8c6c <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b8c4e:	9901      	ldr	r1, [sp, #4]
   b8c50:	602b      	str	r3, [r5, #0]
   b8c52:	4630      	mov	r0, r6
   b8c54:	f7ff ffd9 	bl	b8c0a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b8c58:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b8c5a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b8c5e:	f7ff fedf 	bl	b8a20 <_ZN9TCPClient12flush_bufferEv>
}
   b8c62:	b002      	add	sp, #8
   b8c64:	bd70      	pop	{r4, r5, r6, pc}
   b8c66:	bf00      	nop
   b8c68:	000bc9fc 	.word	0x000bc9fc
   b8c6c:	000bc9e0 	.word	0x000bc9e0

000b8c70 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b8c70:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b8c72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b8c76:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b8c78:	f7ff ffd2 	bl	b8c20 <_ZN9TCPClientC1Ei>
}
   b8c7c:	4620      	mov	r0, r4
   b8c7e:	bd10      	pop	{r4, pc}

000b8c80 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b8c80:	b510      	push	{r4, lr}
   b8c82:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b8c84:	6800      	ldr	r0, [r0, #0]
   b8c86:	2800      	cmp	r0, #0
   b8c88:	db01      	blt.n	b8c8e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b8c8a:	f7fd fdc1 	bl	b6810 <sock_close>
    }
}
   b8c8e:	4620      	mov	r0, r4
   b8c90:	bd10      	pop	{r4, pc}

000b8c92 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b8c92:	300c      	adds	r0, #12
   b8c94:	f7ff bff4 	b.w	b8c80 <_ZN9TCPClient4DataD1Ev>

000b8c98 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b8c98:	4b02      	ldr	r3, [pc, #8]	; (b8ca4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b8c9a:	681a      	ldr	r2, [r3, #0]
   b8c9c:	4b02      	ldr	r3, [pc, #8]	; (b8ca8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b8c9e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b8ca0:	4770      	bx	lr
   b8ca2:	bf00      	nop
   b8ca4:	20035558 	.word	0x20035558
   b8ca8:	2003e6fc 	.word	0x2003e6fc

000b8cac <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b8cac:	4770      	bx	lr

000b8cae <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8cae:	7441      	strb	r1, [r0, #17]
}
   b8cb0:	4770      	bx	lr

000b8cb2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b8cb2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8cb4:	7c00      	ldrb	r0, [r0, #16]
   b8cb6:	f7fd fdfb 	bl	b68b0 <hal_usart_available_data_for_write>
}
   b8cba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8cbe:	bd08      	pop	{r3, pc}

000b8cc0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b8cc0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b8cc2:	7c00      	ldrb	r0, [r0, #16]
   b8cc4:	f7fd fdd4 	bl	b6870 <hal_usart_available>
}
   b8cc8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8ccc:	bd08      	pop	{r3, pc}

000b8cce <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b8cce:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b8cd0:	7c00      	ldrb	r0, [r0, #16]
   b8cd2:	f7fd fddd 	bl	b6890 <hal_usart_peek>
}
   b8cd6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8cda:	bd08      	pop	{r3, pc}

000b8cdc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8cdc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b8cde:	7c00      	ldrb	r0, [r0, #16]
   b8ce0:	f7fd fdce 	bl	b6880 <hal_usart_read>
}
   b8ce4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8ce8:	bd08      	pop	{r3, pc}

000b8cea <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b8cea:	7c00      	ldrb	r0, [r0, #16]
   b8cec:	f7fd bdd8 	b.w	b68a0 <hal_usart_flush>

000b8cf0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b8cf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8cf2:	7c45      	ldrb	r5, [r0, #17]
{
   b8cf4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8cf6:	b12d      	cbz	r5, b8d04 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b8cf8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b8cfa:	b003      	add	sp, #12
   b8cfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b8d00:	f7fd bdae 	b.w	b6860 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8d04:	7c00      	ldrb	r0, [r0, #16]
   b8d06:	9101      	str	r1, [sp, #4]
   b8d08:	f7fd fdd2 	bl	b68b0 <hal_usart_available_data_for_write>
   b8d0c:	2800      	cmp	r0, #0
   b8d0e:	9901      	ldr	r1, [sp, #4]
   b8d10:	dcf2      	bgt.n	b8cf8 <_ZN11USARTSerial5writeEh+0x8>
}
   b8d12:	4628      	mov	r0, r5
   b8d14:	b003      	add	sp, #12
   b8d16:	bd30      	pop	{r4, r5, pc}

000b8d18 <_ZN11USARTSerialD0Ev>:
   b8d18:	b510      	push	{r4, lr}
   b8d1a:	2114      	movs	r1, #20
   b8d1c:	4604      	mov	r4, r0
   b8d1e:	f7fb f9c0 	bl	b40a2 <_ZdlPvj>
   b8d22:	4620      	mov	r0, r4
   b8d24:	bd10      	pop	{r4, pc}
	...

000b8d28 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b8d28:	b510      	push	{r4, lr}
   b8d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8d2e:	4604      	mov	r4, r0
   b8d30:	4608      	mov	r0, r1
   b8d32:	4611      	mov	r1, r2
   b8d34:	2200      	movs	r2, #0
   b8d36:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b8d3a:	4b04      	ldr	r3, [pc, #16]	; (b8d4c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b8d3c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8d3e:	2301      	movs	r3, #1
  _serial = serial;
   b8d40:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8d42:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b8d44:	f7fd fdbc 	bl	b68c0 <hal_usart_init_ex>
}
   b8d48:	4620      	mov	r0, r4
   b8d4a:	bd10      	pop	{r4, pc}
   b8d4c:	000bca64 	.word	0x000bca64

000b8d50 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8d50:	7441      	strb	r1, [r0, #17]
}
   b8d52:	4770      	bx	lr

000b8d54 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8d54:	4770      	bx	lr

000b8d56 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b8d56:	4770      	bx	lr

000b8d58 <_ZN9USBSerial4readEv>:
{
   b8d58:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b8d5a:	2100      	movs	r1, #0
   b8d5c:	7c00      	ldrb	r0, [r0, #16]
   b8d5e:	f7fd fdd7 	bl	b6910 <HAL_USB_USART_Receive_Data>
}
   b8d62:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8d66:	bd08      	pop	{r3, pc}

000b8d68 <_ZN9USBSerial4peekEv>:
{
   b8d68:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8d6a:	2101      	movs	r1, #1
   b8d6c:	7c00      	ldrb	r0, [r0, #16]
   b8d6e:	f7fd fdcf 	bl	b6910 <HAL_USB_USART_Receive_Data>
}
   b8d72:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8d76:	bd08      	pop	{r3, pc}

000b8d78 <_ZN9USBSerial17availableForWriteEv>:
{
   b8d78:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b8d7a:	7c00      	ldrb	r0, [r0, #16]
   b8d7c:	f7fd fdc0 	bl	b6900 <HAL_USB_USART_Available_Data_For_Write>
}
   b8d80:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8d84:	bd08      	pop	{r3, pc}

000b8d86 <_ZN9USBSerial9availableEv>:
{
   b8d86:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8d88:	7c00      	ldrb	r0, [r0, #16]
   b8d8a:	f7fd fdb1 	bl	b68f0 <HAL_USB_USART_Available_Data>
}
   b8d8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8d92:	bd08      	pop	{r3, pc}

000b8d94 <_ZN9USBSerial5writeEh>:
{
   b8d94:	b513      	push	{r0, r1, r4, lr}
   b8d96:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8d98:	7c00      	ldrb	r0, [r0, #16]
{
   b8d9a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8d9c:	f7fd fdb0 	bl	b6900 <HAL_USB_USART_Available_Data_For_Write>
   b8da0:	2800      	cmp	r0, #0
   b8da2:	9901      	ldr	r1, [sp, #4]
   b8da4:	dc01      	bgt.n	b8daa <_ZN9USBSerial5writeEh+0x16>
   b8da6:	7c60      	ldrb	r0, [r4, #17]
   b8da8:	b120      	cbz	r0, b8db4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b8daa:	7c20      	ldrb	r0, [r4, #16]
   b8dac:	f7fd fdb8 	bl	b6920 <HAL_USB_USART_Send_Data>
   b8db0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b8db4:	b002      	add	sp, #8
   b8db6:	bd10      	pop	{r4, pc}

000b8db8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b8db8:	7c00      	ldrb	r0, [r0, #16]
   b8dba:	f7fd bdb9 	b.w	b6930 <HAL_USB_USART_Flush_Data>

000b8dbe <_ZN9USBSerialD0Ev>:
   b8dbe:	b510      	push	{r4, lr}
   b8dc0:	2114      	movs	r1, #20
   b8dc2:	4604      	mov	r4, r0
   b8dc4:	f7fb f96d 	bl	b40a2 <_ZdlPvj>
   b8dc8:	4620      	mov	r0, r4
   b8dca:	bd10      	pop	{r4, pc}

000b8dcc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b8dcc:	b510      	push	{r4, lr}
   b8dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8dd2:	4604      	mov	r4, r0
   b8dd4:	4608      	mov	r0, r1
   b8dd6:	2100      	movs	r1, #0
   b8dd8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8ddc:	4b04      	ldr	r3, [pc, #16]	; (b8df0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b8dde:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8de0:	2301      	movs	r3, #1
  _serial = serial;
   b8de2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8de4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b8de6:	4611      	mov	r1, r2
   b8de8:	f7fd fd72 	bl	b68d0 <HAL_USB_USART_Init>
}
   b8dec:	4620      	mov	r0, r4
   b8dee:	bd10      	pop	{r4, pc}
   b8df0:	000bca94 	.word	0x000bca94

000b8df4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b8df4:	7c00      	ldrb	r0, [r0, #16]
   b8df6:	2200      	movs	r2, #0
   b8df8:	f7fd bd72 	b.w	b68e0 <HAL_USB_USART_Begin>

000b8dfc <_Z19acquireSerialBufferv>:
{
   b8dfc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b8dfe:	2214      	movs	r2, #20
{
   b8e00:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b8e02:	2100      	movs	r1, #0
   b8e04:	f001 fa7d 	bl	ba302 <memset>
}
   b8e08:	4620      	mov	r0, r4
   b8e0a:	bd10      	pop	{r4, pc}

000b8e0c <_Z16_fetch_usbserialv>:
{
   b8e0c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8e0e:	4c0f      	ldr	r4, [pc, #60]	; (b8e4c <_Z16_fetch_usbserialv+0x40>)
{
   b8e10:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b8e12:	a803      	add	r0, sp, #12
   b8e14:	f7ff fff2 	bl	b8dfc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8e18:	7821      	ldrb	r1, [r4, #0]
   b8e1a:	f3bf 8f5b 	dmb	ish
   b8e1e:	f011 0101 	ands.w	r1, r1, #1
   b8e22:	d10f      	bne.n	b8e44 <_Z16_fetch_usbserialv+0x38>
   b8e24:	4620      	mov	r0, r4
   b8e26:	9101      	str	r1, [sp, #4]
   b8e28:	f7fb f93d 	bl	b40a6 <__cxa_guard_acquire>
   b8e2c:	9901      	ldr	r1, [sp, #4]
   b8e2e:	b148      	cbz	r0, b8e44 <_Z16_fetch_usbserialv+0x38>
   b8e30:	aa03      	add	r2, sp, #12
   b8e32:	4807      	ldr	r0, [pc, #28]	; (b8e50 <_Z16_fetch_usbserialv+0x44>)
   b8e34:	f7ff ffca 	bl	b8dcc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8e38:	4620      	mov	r0, r4
   b8e3a:	f7fb f939 	bl	b40b0 <__cxa_guard_release>
   b8e3e:	4805      	ldr	r0, [pc, #20]	; (b8e54 <_Z16_fetch_usbserialv+0x48>)
   b8e40:	f001 fa16 	bl	ba270 <atexit>
	return _usbserial;
}
   b8e44:	4802      	ldr	r0, [pc, #8]	; (b8e50 <_Z16_fetch_usbserialv+0x44>)
   b8e46:	b008      	add	sp, #32
   b8e48:	bd10      	pop	{r4, pc}
   b8e4a:	bf00      	nop
   b8e4c:	2003e700 	.word	0x2003e700
   b8e50:	2003e704 	.word	0x2003e704
   b8e54:	000b8d55 	.word	0x000b8d55

000b8e58 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b8e58:	2200      	movs	r2, #0
   b8e5a:	6840      	ldr	r0, [r0, #4]
   b8e5c:	4611      	mov	r1, r2
   b8e5e:	f7fd bdd7 	b.w	b6a10 <network_ready>

000b8e62 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8e62:	2200      	movs	r2, #0
   b8e64:	6840      	ldr	r0, [r0, #4]
   b8e66:	4611      	mov	r1, r2
   b8e68:	f7fd bdf2 	b.w	b6a50 <network_listening>

000b8e6c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8e6c:	2200      	movs	r2, #0
   b8e6e:	6840      	ldr	r0, [r0, #4]
   b8e70:	4611      	mov	r1, r2
   b8e72:	f7fd bdfd 	b.w	b6a70 <network_get_listen_timeout>

000b8e76 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8e76:	6840      	ldr	r0, [r0, #4]
   b8e78:	2200      	movs	r2, #0
   b8e7a:	f7fd bdf1 	b.w	b6a60 <network_set_listen_timeout>

000b8e7e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8e7e:	6840      	ldr	r0, [r0, #4]
   b8e80:	2200      	movs	r2, #0
   b8e82:	f081 0101 	eor.w	r1, r1, #1
   b8e86:	f7fd bddb 	b.w	b6a40 <network_listen>

000b8e8a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8e8a:	2300      	movs	r3, #0
   b8e8c:	6840      	ldr	r0, [r0, #4]
   b8e8e:	461a      	mov	r2, r3
   b8e90:	4619      	mov	r1, r3
   b8e92:	f7fd bdcd 	b.w	b6a30 <network_off>

000b8e96 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8e96:	2300      	movs	r3, #0
   b8e98:	6840      	ldr	r0, [r0, #4]
   b8e9a:	461a      	mov	r2, r3
   b8e9c:	4619      	mov	r1, r3
   b8e9e:	f7fd bdbf 	b.w	b6a20 <network_on>

000b8ea2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8ea2:	2200      	movs	r2, #0
   b8ea4:	6840      	ldr	r0, [r0, #4]
   b8ea6:	4611      	mov	r1, r2
   b8ea8:	f7fd bda2 	b.w	b69f0 <network_connecting>

000b8eac <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8eac:	6840      	ldr	r0, [r0, #4]
   b8eae:	2200      	movs	r2, #0
   b8eb0:	2102      	movs	r1, #2
   b8eb2:	f7fd bda5 	b.w	b6a00 <network_disconnect>

000b8eb6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8eb6:	2300      	movs	r3, #0
   b8eb8:	6840      	ldr	r0, [r0, #4]
   b8eba:	461a      	mov	r2, r3
   b8ebc:	f7fd bd90 	b.w	b69e0 <network_connect>

000b8ec0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b8ec0:	4b02      	ldr	r3, [pc, #8]	; (b8ecc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b8ec2:	2204      	movs	r2, #4
   b8ec4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b8ec6:	4a02      	ldr	r2, [pc, #8]	; (b8ed0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b8ec8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b8eca:	4770      	bx	lr
   b8ecc:	2003e718 	.word	0x2003e718
   b8ed0:	000bcac4 	.word	0x000bcac4

000b8ed4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b8ed4:	b510      	push	{r4, lr}
   b8ed6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b8ed8:	f001 fa6b 	bl	ba3b2 <strlen>
   b8edc:	3801      	subs	r0, #1
   b8ede:	1823      	adds	r3, r4, r0
   b8ee0:	4620      	mov	r0, r4
	while(i<j){
   b8ee2:	4283      	cmp	r3, r0
   b8ee4:	d906      	bls.n	b8ef4 <_Z11str_reversePc+0x20>
		c = *i;
   b8ee6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b8ee8:	7819      	ldrb	r1, [r3, #0]
   b8eea:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b8eee:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b8ef2:	e7f6      	b.n	b8ee2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b8ef4:	bd10      	pop	{r4, pc}

000b8ef6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b8ef6:	b570      	push	{r4, r5, r6, lr}
   b8ef8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b8efa:	1e91      	subs	r1, r2, #2
   b8efc:	2922      	cmp	r1, #34	; 0x22
   b8efe:	d81d      	bhi.n	b8f3c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b8f00:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b8f02:	b930      	cbnz	r0, b8f12 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b8f04:	4423      	add	r3, r4
            *ptr++ = '0';
   b8f06:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b8f08:	429d      	cmp	r5, r3
   b8f0a:	d210      	bcs.n	b8f2e <ultoa+0x38>
            *ptr++ = '0';
   b8f0c:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b8f10:	e7fa      	b.n	b8f08 <ultoa+0x12>
            result.quot = a/radix;
   b8f12:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b8f16:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b8f1a:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b8f1c:	2809      	cmp	r0, #9
                *ptr += '0';
   b8f1e:	bf94      	ite	ls
   b8f20:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b8f22:	3157      	addhi	r1, #87	; 0x57
   b8f24:	b2c9      	uxtb	r1, r1
   b8f26:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b8f2a:	4630      	mov	r0, r6
	while(a){
   b8f2c:	e7e9      	b.n	b8f02 <ultoa+0xc>

	*ptr = '\0';
   b8f2e:	2300      	movs	r3, #0
	str_reverse(buffer);
   b8f30:	4620      	mov	r0, r4
	*ptr = '\0';
   b8f32:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b8f34:	f7ff ffce 	bl	b8ed4 <_Z11str_reversePc>
	return buffer;
   b8f38:	4620      	mov	r0, r4
}
   b8f3a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b8f3c:	2000      	movs	r0, #0
   b8f3e:	e7fc      	b.n	b8f3a <ultoa+0x44>

000b8f40 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b8f40:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b8f42:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b8f44:	460c      	mov	r4, r1
   b8f46:	4615      	mov	r5, r2
	if(a<0){
   b8f48:	da0e      	bge.n	b8f68 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b8f4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b8f4e:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b8f52:	bf14      	ite	ne
   b8f54:	4258      	negne	r0, r3
   b8f56:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b8f58:	2301      	movs	r3, #1
		*buffer = '-';
   b8f5a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b8f5c:	462a      	mov	r2, r5
   b8f5e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b8f60:	f7ff ffc9 	bl	b8ef6 <ultoa>
	}
	return buffer;
}
   b8f64:	4620      	mov	r0, r4
   b8f66:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b8f68:	2301      	movs	r3, #1
   b8f6a:	e7f9      	b.n	b8f60 <itoa+0x20>

000b8f6c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b8f6c:	4b01      	ldr	r3, [pc, #4]	; (b8f74 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b8f6e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b8f70:	4770      	bx	lr
   b8f72:	bf00      	nop
   b8f74:	20035560 	.word	0x20035560

000b8f78 <serialEventRun>:
{
   b8f78:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b8f7a:	4b0b      	ldr	r3, [pc, #44]	; (b8fa8 <serialEventRun+0x30>)
   b8f7c:	b143      	cbz	r3, b8f90 <serialEventRun+0x18>
   b8f7e:	f7ff ff45 	bl	b8e0c <_Z16_fetch_usbserialv>
   b8f82:	6803      	ldr	r3, [r0, #0]
   b8f84:	691b      	ldr	r3, [r3, #16]
   b8f86:	4798      	blx	r3
   b8f88:	2800      	cmp	r0, #0
   b8f8a:	dd01      	ble.n	b8f90 <serialEventRun+0x18>
        serialEvent();
   b8f8c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b8f90:	4b06      	ldr	r3, [pc, #24]	; (b8fac <serialEventRun+0x34>)
   b8f92:	b143      	cbz	r3, b8fa6 <serialEventRun+0x2e>
   b8f94:	f000 f8c8 	bl	b9128 <_Z22__fetch_global_Serial1v>
   b8f98:	6803      	ldr	r3, [r0, #0]
   b8f9a:	691b      	ldr	r3, [r3, #16]
   b8f9c:	4798      	blx	r3
   b8f9e:	2800      	cmp	r0, #0
   b8fa0:	dd01      	ble.n	b8fa6 <serialEventRun+0x2e>
        serialEvent1();
   b8fa2:	f3af 8000 	nop.w
}
   b8fa6:	bd08      	pop	{r3, pc}
	...

000b8fb0 <_post_loop>:
{
   b8fb0:	b508      	push	{r3, lr}
	serialEventRun();
   b8fb2:	f7ff ffe1 	bl	b8f78 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b8fb6:	f7fd fb93 	bl	b66e0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b8fba:	4b01      	ldr	r3, [pc, #4]	; (b8fc0 <_post_loop+0x10>)
   b8fbc:	6018      	str	r0, [r3, #0]
}
   b8fbe:	bd08      	pop	{r3, pc}
   b8fc0:	2003e728 	.word	0x2003e728

000b8fc4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8fc4:	4805      	ldr	r0, [pc, #20]	; (b8fdc <_Z33system_initialize_user_backup_ramv+0x18>)
   b8fc6:	4a06      	ldr	r2, [pc, #24]	; (b8fe0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8fc8:	4906      	ldr	r1, [pc, #24]	; (b8fe4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b8fca:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8fcc:	1a12      	subs	r2, r2, r0
   b8fce:	f001 f970 	bl	ba2b2 <memcpy>
    __backup_sram_signature = signature;
   b8fd2:	4b05      	ldr	r3, [pc, #20]	; (b8fe8 <_Z33system_initialize_user_backup_ramv+0x24>)
   b8fd4:	4a05      	ldr	r2, [pc, #20]	; (b8fec <_Z33system_initialize_user_backup_ramv+0x28>)
   b8fd6:	601a      	str	r2, [r3, #0]
}
   b8fd8:	bd08      	pop	{r3, pc}
   b8fda:	bf00      	nop
   b8fdc:	2003f400 	.word	0x2003f400
   b8fe0:	2003f404 	.word	0x2003f404
   b8fe4:	000bd084 	.word	0x000bd084
   b8fe8:	2003f400 	.word	0x2003f400
   b8fec:	9a271c1e 	.word	0x9a271c1e

000b8ff0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b8ff0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8ff2:	2300      	movs	r3, #0
   b8ff4:	9300      	str	r3, [sp, #0]
   b8ff6:	461a      	mov	r2, r3
   b8ff8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8ffc:	f7fd fcca 	bl	b6994 <system_ctrl_set_result>
}
   b9000:	b003      	add	sp, #12
   b9002:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b9008 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b9008:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b900a:	8843      	ldrh	r3, [r0, #2]
   b900c:	2b0a      	cmp	r3, #10
   b900e:	d008      	beq.n	b9022 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b9010:	2b50      	cmp	r3, #80	; 0x50
   b9012:	d10b      	bne.n	b902c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b9014:	4b09      	ldr	r3, [pc, #36]	; (b903c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b9016:	681b      	ldr	r3, [r3, #0]
   b9018:	b14b      	cbz	r3, b902e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b901a:	b003      	add	sp, #12
   b901c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b9020:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b9022:	f7ff ffe5 	bl	b8ff0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b9026:	b003      	add	sp, #12
   b9028:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b902c:	2300      	movs	r3, #0
   b902e:	9300      	str	r3, [sp, #0]
   b9030:	461a      	mov	r2, r3
   b9032:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9036:	f7fd fcad 	bl	b6994 <system_ctrl_set_result>
}
   b903a:	e7f4      	b.n	b9026 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b903c:	2003e724 	.word	0x2003e724

000b9040 <module_user_init_hook>:
{
   b9040:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b9042:	4812      	ldr	r0, [pc, #72]	; (b908c <module_user_init_hook+0x4c>)
   b9044:	2100      	movs	r1, #0
   b9046:	f7fd fd6b 	bl	b6b20 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b904a:	4b11      	ldr	r3, [pc, #68]	; (b9090 <module_user_init_hook+0x50>)
   b904c:	681a      	ldr	r2, [r3, #0]
   b904e:	4b11      	ldr	r3, [pc, #68]	; (b9094 <module_user_init_hook+0x54>)
   b9050:	429a      	cmp	r2, r3
   b9052:	4b11      	ldr	r3, [pc, #68]	; (b9098 <module_user_init_hook+0x58>)
   b9054:	bf0c      	ite	eq
   b9056:	2201      	moveq	r2, #1
   b9058:	2200      	movne	r2, #0
   b905a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b905c:	d001      	beq.n	b9062 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b905e:	f7ff ffb1 	bl	b8fc4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b9062:	f7fd fb2d 	bl	b66c0 <HAL_RNG_GetRandomNumber>
   b9066:	4604      	mov	r4, r0
    srand(seed);
   b9068:	f001 f954 	bl	ba314 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b906c:	4b0b      	ldr	r3, [pc, #44]	; (b909c <module_user_init_hook+0x5c>)
   b906e:	b113      	cbz	r3, b9076 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b9070:	4620      	mov	r0, r4
   b9072:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b9076:	2100      	movs	r1, #0
   b9078:	4808      	ldr	r0, [pc, #32]	; (b909c <module_user_init_hook+0x5c>)
   b907a:	f7fd fca9 	bl	b69d0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b907e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b9082:	4807      	ldr	r0, [pc, #28]	; (b90a0 <module_user_init_hook+0x60>)
   b9084:	2100      	movs	r1, #0
   b9086:	f7fd bc7b 	b.w	b6980 <system_ctrl_set_app_request_handler>
   b908a:	bf00      	nop
   b908c:	000b8f6d 	.word	0x000b8f6d
   b9090:	2003f400 	.word	0x2003f400
   b9094:	9a271c1e 	.word	0x9a271c1e
   b9098:	2003e720 	.word	0x2003e720
   b909c:	00000000 	.word	0x00000000
   b90a0:	000b9009 	.word	0x000b9009

000b90a4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b90a4:	4770      	bx	lr
	...

000b90a8 <_Z19__fetch_global_Wirev>:
{
   b90a8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b90aa:	4d0e      	ldr	r5, [pc, #56]	; (b90e4 <_Z19__fetch_global_Wirev+0x3c>)
   b90ac:	7829      	ldrb	r1, [r5, #0]
   b90ae:	f3bf 8f5b 	dmb	ish
   b90b2:	f011 0401 	ands.w	r4, r1, #1
{
   b90b6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b90b8:	d111      	bne.n	b90de <_Z19__fetch_global_Wirev+0x36>
   b90ba:	4628      	mov	r0, r5
   b90bc:	f7fa fff3 	bl	b40a6 <__cxa_guard_acquire>
   b90c0:	b168      	cbz	r0, b90de <_Z19__fetch_global_Wirev+0x36>
   b90c2:	a801      	add	r0, sp, #4
   b90c4:	f7fb fa32 	bl	b452c <_Z17acquireWireBufferv>
   b90c8:	aa01      	add	r2, sp, #4
   b90ca:	4621      	mov	r1, r4
   b90cc:	4806      	ldr	r0, [pc, #24]	; (b90e8 <_Z19__fetch_global_Wirev+0x40>)
   b90ce:	f7fe ffc3 	bl	b8058 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b90d2:	4628      	mov	r0, r5
   b90d4:	f7fa ffec 	bl	b40b0 <__cxa_guard_release>
   b90d8:	4804      	ldr	r0, [pc, #16]	; (b90ec <_Z19__fetch_global_Wirev+0x44>)
   b90da:	f001 f8c9 	bl	ba270 <atexit>
	return wire;
}
   b90de:	4802      	ldr	r0, [pc, #8]	; (b90e8 <_Z19__fetch_global_Wirev+0x40>)
   b90e0:	b007      	add	sp, #28
   b90e2:	bd30      	pop	{r4, r5, pc}
   b90e4:	2003e72c 	.word	0x2003e72c
   b90e8:	2003e730 	.word	0x2003e730
   b90ec:	000b90a5 	.word	0x000b90a5

000b90f0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b90f0:	4770      	bx	lr
	...

000b90f4 <_Z20acquireSerial1Bufferv>:
{
   b90f4:	b538      	push	{r3, r4, r5, lr}
   b90f6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b90f8:	2514      	movs	r5, #20
   b90fa:	462a      	mov	r2, r5
   b90fc:	2100      	movs	r1, #0
   b90fe:	f001 f900 	bl	ba302 <memset>
   b9102:	8025      	strh	r5, [r4, #0]
   b9104:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9106:	4907      	ldr	r1, [pc, #28]	; (b9124 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b9108:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b910a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b910c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b910e:	f000 f82f 	bl	b9170 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9112:	4904      	ldr	r1, [pc, #16]	; (b9124 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b9114:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9116:	4628      	mov	r0, r5
   b9118:	f000 f82a 	bl	b9170 <_ZnajRKSt9nothrow_t>
    };
   b911c:	60e0      	str	r0, [r4, #12]
}
   b911e:	4620      	mov	r0, r4
   b9120:	bd38      	pop	{r3, r4, r5, pc}
   b9122:	bf00      	nop
   b9124:	000bcaf8 	.word	0x000bcaf8

000b9128 <_Z22__fetch_global_Serial1v>:
{
   b9128:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b912a:	4d0e      	ldr	r5, [pc, #56]	; (b9164 <_Z22__fetch_global_Serial1v+0x3c>)
   b912c:	7829      	ldrb	r1, [r5, #0]
   b912e:	f3bf 8f5b 	dmb	ish
   b9132:	f011 0401 	ands.w	r4, r1, #1
{
   b9136:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9138:	d111      	bne.n	b915e <_Z22__fetch_global_Serial1v+0x36>
   b913a:	4628      	mov	r0, r5
   b913c:	f7fa ffb3 	bl	b40a6 <__cxa_guard_acquire>
   b9140:	b168      	cbz	r0, b915e <_Z22__fetch_global_Serial1v+0x36>
   b9142:	a801      	add	r0, sp, #4
   b9144:	f7ff ffd6 	bl	b90f4 <_Z20acquireSerial1Bufferv>
   b9148:	aa01      	add	r2, sp, #4
   b914a:	4621      	mov	r1, r4
   b914c:	4806      	ldr	r0, [pc, #24]	; (b9168 <_Z22__fetch_global_Serial1v+0x40>)
   b914e:	f7ff fdeb 	bl	b8d28 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b9152:	4628      	mov	r0, r5
   b9154:	f7fa ffac 	bl	b40b0 <__cxa_guard_release>
   b9158:	4804      	ldr	r0, [pc, #16]	; (b916c <_Z22__fetch_global_Serial1v+0x44>)
   b915a:	f001 f889 	bl	ba270 <atexit>
    return serial1;
}
   b915e:	4802      	ldr	r0, [pc, #8]	; (b9168 <_Z22__fetch_global_Serial1v+0x40>)
   b9160:	b007      	add	sp, #28
   b9162:	bd30      	pop	{r4, r5, pc}
   b9164:	2003e744 	.word	0x2003e744
   b9168:	2003e748 	.word	0x2003e748
   b916c:	000b90f1 	.word	0x000b90f1

000b9170 <_ZnajRKSt9nothrow_t>:
   b9170:	f7fa bf93 	b.w	b409a <_Znaj>

000b9174 <_ZSt17__throw_bad_allocv>:
   b9174:	b508      	push	{r3, lr}
   b9176:	f7fd fcb3 	bl	b6ae0 <abort>

000b917a <_ZSt19__throw_logic_errorPKc>:
   b917a:	b508      	push	{r3, lr}
   b917c:	f7fd fcb0 	bl	b6ae0 <abort>

000b9180 <_ZSt20__throw_length_errorPKc>:
   b9180:	b508      	push	{r3, lr}
   b9182:	f7fd fcad 	bl	b6ae0 <abort>

000b9186 <_ZSt24__throw_out_of_range_fmtPKcz>:
   b9186:	b40f      	push	{r0, r1, r2, r3}
   b9188:	b580      	push	{r7, lr}
   b918a:	b084      	sub	sp, #16
   b918c:	af00      	add	r7, sp, #0
   b918e:	f107 0418 	add.w	r4, r7, #24
   b9192:	f854 2b04 	ldr.w	r2, [r4], #4
   b9196:	607a      	str	r2, [r7, #4]
   b9198:	4610      	mov	r0, r2
   b919a:	f001 f90a 	bl	ba3b2 <strlen>
   b919e:	f200 2307 	addw	r3, r0, #519	; 0x207
   b91a2:	f023 0307 	bic.w	r3, r3, #7
   b91a6:	ebad 0d03 	sub.w	sp, sp, r3
   b91aa:	f500 7100 	add.w	r1, r0, #512	; 0x200
   b91ae:	687a      	ldr	r2, [r7, #4]
   b91b0:	60fc      	str	r4, [r7, #12]
   b91b2:	4623      	mov	r3, r4
   b91b4:	4668      	mov	r0, sp
   b91b6:	f000 f85d 	bl	b9274 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   b91ba:	f7fd fc91 	bl	b6ae0 <abort>

000b91be <_ZSt25__throw_bad_function_callv>:
   b91be:	b508      	push	{r3, lr}
   b91c0:	f7fd fc8e 	bl	b6ae0 <abort>

000b91c4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b91c4:	4901      	ldr	r1, [pc, #4]	; (b91cc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b91c6:	f000 b9f7 	b.w	b95b8 <_ZNKSt9type_infoeqERKS_>
   b91ca:	bf00      	nop
   b91cc:	000bcb14 	.word	0x000bcb14

000b91d0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   b91d0:	b580      	push	{r7, lr}
   b91d2:	b09c      	sub	sp, #112	; 0x70
   b91d4:	4606      	mov	r6, r0
   b91d6:	af00      	add	r7, sp, #0
   b91d8:	460c      	mov	r4, r1
   b91da:	1ba4      	subs	r4, r4, r6
   b91dc:	490e      	ldr	r1, [pc, #56]	; (b9218 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   b91de:	2269      	movs	r2, #105	; 0x69
   b91e0:	1d38      	adds	r0, r7, #4
   b91e2:	f001 f866 	bl	ba2b2 <memcpy>
   b91e6:	f104 0370 	add.w	r3, r4, #112	; 0x70
   b91ea:	f023 0307 	bic.w	r3, r3, #7
   b91ee:	ebad 0d03 	sub.w	sp, sp, r3
   b91f2:	466d      	mov	r5, sp
   b91f4:	2268      	movs	r2, #104	; 0x68
   b91f6:	1d39      	adds	r1, r7, #4
   b91f8:	4628      	mov	r0, r5
   b91fa:	f001 f85a 	bl	ba2b2 <memcpy>
   b91fe:	4622      	mov	r2, r4
   b9200:	4631      	mov	r1, r6
   b9202:	f105 0068 	add.w	r0, r5, #104	; 0x68
   b9206:	442c      	add	r4, r5
   b9208:	f001 f853 	bl	ba2b2 <memcpy>
   b920c:	2300      	movs	r3, #0
   b920e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   b9212:	4628      	mov	r0, r5
   b9214:	f7ff ffb1 	bl	b917a <_ZSt19__throw_logic_errorPKc>
   b9218:	000bcb1c 	.word	0x000bcb1c

000b921c <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   b921c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9220:	af00      	add	r7, sp, #0
   b9222:	b084      	sub	sp, #16
   b9224:	466d      	mov	r5, sp
   b9226:	f105 040c 	add.w	r4, r5, #12
   b922a:	f8df 8044 	ldr.w	r8, [pc, #68]	; b9270 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
   b922e:	4623      	mov	r3, r4
   b9230:	f04f 0c0a 	mov.w	ip, #10
   b9234:	fbb2 f6fc 	udiv	r6, r2, ip
   b9238:	fb0c 2e16 	mls	lr, ip, r6, r2
   b923c:	f818 e00e 	ldrb.w	lr, [r8, lr]
   b9240:	f803 ed01 	strb.w	lr, [r3, #-1]!
   b9244:	4696      	mov	lr, r2
   b9246:	f1be 0f09 	cmp.w	lr, #9
   b924a:	4632      	mov	r2, r6
   b924c:	d8f2      	bhi.n	b9234 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
   b924e:	1ae4      	subs	r4, r4, r3
   b9250:	428c      	cmp	r4, r1
   b9252:	d809      	bhi.n	b9268 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
   b9254:	f1c4 030c 	rsb	r3, r4, #12
   b9258:	4622      	mov	r2, r4
   b925a:	18e9      	adds	r1, r5, r3
   b925c:	f001 f829 	bl	ba2b2 <memcpy>
   b9260:	4620      	mov	r0, r4
   b9262:	46bd      	mov	sp, r7
   b9264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9268:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b926c:	e7f8      	b.n	b9260 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
   b926e:	bf00      	nop
   b9270:	000bcb85 	.word	0x000bcb85

000b9274 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   b9274:	3901      	subs	r1, #1
   b9276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b927a:	4607      	mov	r7, r0
   b927c:	4615      	mov	r5, r2
   b927e:	eb00 0801 	add.w	r8, r0, r1
   b9282:	4604      	mov	r4, r0
   b9284:	782a      	ldrb	r2, [r5, #0]
   b9286:	b392      	cbz	r2, b92ee <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
   b9288:	4544      	cmp	r4, r8
   b928a:	d22a      	bcs.n	b92e2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b928c:	2a25      	cmp	r2, #37	; 0x25
   b928e:	d107      	bne.n	b92a0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b9290:	786a      	ldrb	r2, [r5, #1]
   b9292:	2a73      	cmp	r2, #115	; 0x73
   b9294:	d009      	beq.n	b92aa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   b9296:	2a7a      	cmp	r2, #122	; 0x7a
   b9298:	d012      	beq.n	b92c0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   b929a:	2a25      	cmp	r2, #37	; 0x25
   b929c:	d100      	bne.n	b92a0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b929e:	3501      	adds	r5, #1
   b92a0:	f815 2b01 	ldrb.w	r2, [r5], #1
   b92a4:	f804 2b01 	strb.w	r2, [r4], #1
   b92a8:	e7ec      	b.n	b9284 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b92aa:	f853 2b04 	ldr.w	r2, [r3], #4
   b92ae:	3a01      	subs	r2, #1
   b92b0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   b92b4:	b1c9      	cbz	r1, b92ea <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   b92b6:	4544      	cmp	r4, r8
   b92b8:	d013      	beq.n	b92e2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b92ba:	f804 1b01 	strb.w	r1, [r4], #1
   b92be:	e7f7      	b.n	b92b0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   b92c0:	78aa      	ldrb	r2, [r5, #2]
   b92c2:	2a75      	cmp	r2, #117	; 0x75
   b92c4:	d1ec      	bne.n	b92a0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b92c6:	461e      	mov	r6, r3
   b92c8:	eba8 0104 	sub.w	r1, r8, r4
   b92cc:	f856 2b04 	ldr.w	r2, [r6], #4
   b92d0:	4620      	mov	r0, r4
   b92d2:	f7ff ffa3 	bl	b921c <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   b92d6:	2800      	cmp	r0, #0
   b92d8:	dd03      	ble.n	b92e2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b92da:	4404      	add	r4, r0
   b92dc:	3503      	adds	r5, #3
   b92de:	4633      	mov	r3, r6
   b92e0:	e7d0      	b.n	b9284 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b92e2:	4621      	mov	r1, r4
   b92e4:	4638      	mov	r0, r7
   b92e6:	f7ff ff73 	bl	b91d0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   b92ea:	3502      	adds	r5, #2
   b92ec:	e7ca      	b.n	b9284 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b92ee:	7022      	strb	r2, [r4, #0]
   b92f0:	1be0      	subs	r0, r4, r7
   b92f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b92f6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   b92f6:	b10a      	cbz	r2, b92fc <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   b92f8:	f000 bfdb 	b.w	ba2b2 <memcpy>
   b92fc:	4770      	bx	lr
	...

000b9300 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   b9300:	b508      	push	{r3, lr}
   b9302:	680b      	ldr	r3, [r1, #0]
   b9304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   b9308:	d302      	bcc.n	b9310 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   b930a:	480d      	ldr	r0, [pc, #52]	; (b9340 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   b930c:	f7ff ff38 	bl	b9180 <_ZSt20__throw_length_errorPKc>
   b9310:	4293      	cmp	r3, r2
   b9312:	d90b      	bls.n	b932c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b9314:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   b9318:	ea4f 0042 	mov.w	r0, r2, lsl #1
   b931c:	d206      	bcs.n	b932c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b931e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   b9322:	bf2a      	itet	cs
   b9324:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   b9328:	6008      	strcc	r0, [r1, #0]
   b932a:	600b      	strcs	r3, [r1, #0]
   b932c:	6808      	ldr	r0, [r1, #0]
   b932e:	3001      	adds	r0, #1
   b9330:	d501      	bpl.n	b9336 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   b9332:	f7ff ff1f 	bl	b9174 <_ZSt17__throw_bad_allocv>
   b9336:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b933a:	f7fa beac 	b.w	b4096 <_Znwj>
   b933e:	bf00      	nop
   b9340:	000bcb90 	.word	0x000bcb90

000b9344 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   b9344:	f850 3b08 	ldr.w	r3, [r0], #8
   b9348:	4283      	cmp	r3, r0
   b934a:	d002      	beq.n	b9352 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   b934c:	4618      	mov	r0, r3
   b934e:	f7fa bea6 	b.w	b409e <_ZdlPv>
   b9352:	4770      	bx	lr

000b9354 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   b9354:	2a01      	cmp	r2, #1
   b9356:	b410      	push	{r4}
   b9358:	d104      	bne.n	b9364 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   b935a:	780a      	ldrb	r2, [r1, #0]
   b935c:	f85d 4b04 	ldr.w	r4, [sp], #4
   b9360:	7002      	strb	r2, [r0, #0]
   b9362:	4770      	bx	lr
   b9364:	f85d 4b04 	ldr.w	r4, [sp], #4
   b9368:	f7ff bfc5 	b.w	b92f6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000b936c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
   b936c:	b508      	push	{r3, lr}
   b936e:	1a52      	subs	r2, r2, r1
   b9370:	f7ff fff0 	bl	b9354 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b9374:	bd08      	pop	{r3, pc}

000b9376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   b9376:	b508      	push	{r3, lr}
   b9378:	1a52      	subs	r2, r2, r1
   b937a:	f7ff ffeb 	bl	b9354 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b937e:	bd08      	pop	{r3, pc}

000b9380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
   b9380:	4288      	cmp	r0, r1
   b9382:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b9384:	4604      	mov	r4, r0
   b9386:	460e      	mov	r6, r1
   b9388:	d01e      	beq.n	b93c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
   b938a:	4603      	mov	r3, r0
   b938c:	684d      	ldr	r5, [r1, #4]
   b938e:	f853 2b08 	ldr.w	r2, [r3], #8
   b9392:	429a      	cmp	r2, r3
   b9394:	bf14      	ite	ne
   b9396:	6882      	ldrne	r2, [r0, #8]
   b9398:	220f      	moveq	r2, #15
   b939a:	42aa      	cmp	r2, r5
   b939c:	d20a      	bcs.n	b93b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
   b939e:	a901      	add	r1, sp, #4
   b93a0:	9501      	str	r5, [sp, #4]
   b93a2:	f7ff ffad 	bl	b9300 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   b93a6:	4607      	mov	r7, r0
   b93a8:	4620      	mov	r0, r4
   b93aa:	f7ff ffcb 	bl	b9344 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b93ae:	9b01      	ldr	r3, [sp, #4]
   b93b0:	6027      	str	r7, [r4, #0]
   b93b2:	60a3      	str	r3, [r4, #8]
   b93b4:	b125      	cbz	r5, b93c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
   b93b6:	6831      	ldr	r1, [r6, #0]
   b93b8:	6820      	ldr	r0, [r4, #0]
   b93ba:	462a      	mov	r2, r5
   b93bc:	f7ff ffca 	bl	b9354 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b93c0:	6823      	ldr	r3, [r4, #0]
   b93c2:	6065      	str	r5, [r4, #4]
   b93c4:	2200      	movs	r2, #0
   b93c6:	555a      	strb	r2, [r3, r5]
   b93c8:	b003      	add	sp, #12
   b93ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b93cc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b93cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b93ce:	2400      	movs	r4, #0
   b93d0:	2310      	movs	r3, #16
   b93d2:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b93d6:	6803      	ldr	r3, [r0, #0]
   b93d8:	4615      	mov	r5, r2
   b93da:	699e      	ldr	r6, [r3, #24]
   b93dc:	6812      	ldr	r2, [r2, #0]
   b93de:	466b      	mov	r3, sp
   b93e0:	e9cd 4400 	strd	r4, r4, [sp]
   b93e4:	47b0      	blx	r6
   b93e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b93ea:	f003 0306 	and.w	r3, r3, #6
   b93ee:	2b06      	cmp	r3, #6
   b93f0:	bf03      	ittte	eq
   b93f2:	9b00      	ldreq	r3, [sp, #0]
   b93f4:	602b      	streq	r3, [r5, #0]
   b93f6:	2001      	moveq	r0, #1
   b93f8:	4620      	movne	r0, r4
   b93fa:	b004      	add	sp, #16
   b93fc:	bd70      	pop	{r4, r5, r6, pc}

000b93fe <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b93fe:	9800      	ldr	r0, [sp, #0]
   b9400:	4290      	cmp	r0, r2
   b9402:	bf14      	ite	ne
   b9404:	2001      	movne	r0, #1
   b9406:	2006      	moveq	r0, #6
   b9408:	4770      	bx	lr
	...

000b940c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b940c:	b510      	push	{r4, lr}
   b940e:	4b03      	ldr	r3, [pc, #12]	; (b941c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b9410:	6003      	str	r3, [r0, #0]
   b9412:	4604      	mov	r4, r0
   b9414:	f000 f8cd 	bl	b95b2 <_ZNSt9type_infoD1Ev>
   b9418:	4620      	mov	r0, r4
   b941a:	bd10      	pop	{r4, pc}
   b941c:	000bcbe0 	.word	0x000bcbe0

000b9420 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b9420:	b510      	push	{r4, lr}
   b9422:	4604      	mov	r4, r0
   b9424:	f7ff fff2 	bl	b940c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9428:	4620      	mov	r0, r4
   b942a:	2108      	movs	r1, #8
   b942c:	f7fa fe39 	bl	b40a2 <_ZdlPvj>
   b9430:	4620      	mov	r0, r4
   b9432:	bd10      	pop	{r4, pc}

000b9434 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b9434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9438:	461f      	mov	r7, r3
   b943a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b943e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b9442:	4598      	cmp	r8, r3
   b9444:	4606      	mov	r6, r0
   b9446:	4615      	mov	r5, r2
   b9448:	d107      	bne.n	b945a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b944a:	9907      	ldr	r1, [sp, #28]
   b944c:	f000 f8b4 	bl	b95b8 <_ZNKSt9type_infoeqERKS_>
   b9450:	b118      	cbz	r0, b945a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9452:	7165      	strb	r5, [r4, #5]
   b9454:	2000      	movs	r0, #0
   b9456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b945a:	4639      	mov	r1, r7
   b945c:	4630      	mov	r0, r6
   b945e:	f000 f8ab 	bl	b95b8 <_ZNKSt9type_infoeqERKS_>
   b9462:	2800      	cmp	r0, #0
   b9464:	d0f6      	beq.n	b9454 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b9466:	2301      	movs	r3, #1
   b9468:	f8c4 8000 	str.w	r8, [r4]
   b946c:	7125      	strb	r5, [r4, #4]
   b946e:	71a3      	strb	r3, [r4, #6]
   b9470:	e7f0      	b.n	b9454 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b9472 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b9472:	b538      	push	{r3, r4, r5, lr}
   b9474:	4615      	mov	r5, r2
   b9476:	461c      	mov	r4, r3
   b9478:	f000 f89e 	bl	b95b8 <_ZNKSt9type_infoeqERKS_>
   b947c:	b120      	cbz	r0, b9488 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b947e:	2308      	movs	r3, #8
   b9480:	60e3      	str	r3, [r4, #12]
   b9482:	2306      	movs	r3, #6
   b9484:	6025      	str	r5, [r4, #0]
   b9486:	7123      	strb	r3, [r4, #4]
   b9488:	bd38      	pop	{r3, r4, r5, pc}

000b948a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b948a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b948c:	4605      	mov	r5, r0
   b948e:	460c      	mov	r4, r1
   b9490:	9201      	str	r2, [sp, #4]
   b9492:	461e      	mov	r6, r3
   b9494:	f000 f890 	bl	b95b8 <_ZNKSt9type_infoeqERKS_>
   b9498:	b950      	cbnz	r0, b94b0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b949a:	2e03      	cmp	r6, #3
   b949c:	d808      	bhi.n	b94b0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b949e:	6823      	ldr	r3, [r4, #0]
   b94a0:	9a01      	ldr	r2, [sp, #4]
   b94a2:	695b      	ldr	r3, [r3, #20]
   b94a4:	4629      	mov	r1, r5
   b94a6:	4620      	mov	r0, r4
   b94a8:	b002      	add	sp, #8
   b94aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b94ae:	4718      	bx	r3
   b94b0:	b002      	add	sp, #8
   b94b2:	bd70      	pop	{r4, r5, r6, pc}

000b94b4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b94b4:	b510      	push	{r4, lr}
   b94b6:	4b03      	ldr	r3, [pc, #12]	; (b94c4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b94b8:	6003      	str	r3, [r0, #0]
   b94ba:	4604      	mov	r4, r0
   b94bc:	f7ff ffa6 	bl	b940c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b94c0:	4620      	mov	r0, r4
   b94c2:	bd10      	pop	{r4, pc}
   b94c4:	000bcc40 	.word	0x000bcc40

000b94c8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b94c8:	b510      	push	{r4, lr}
   b94ca:	4604      	mov	r4, r0
   b94cc:	f7ff fff2 	bl	b94b4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b94d0:	4620      	mov	r0, r4
   b94d2:	210c      	movs	r1, #12
   b94d4:	f7fa fde5 	bl	b40a2 <_ZdlPvj>
   b94d8:	4620      	mov	r0, r4
   b94da:	bd10      	pop	{r4, pc}

000b94dc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b94dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b94de:	9f08      	ldr	r7, [sp, #32]
   b94e0:	4297      	cmp	r7, r2
   b94e2:	4605      	mov	r5, r0
   b94e4:	460e      	mov	r6, r1
   b94e6:	4614      	mov	r4, r2
   b94e8:	d00a      	beq.n	b9500 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b94ea:	68a8      	ldr	r0, [r5, #8]
   b94ec:	6802      	ldr	r2, [r0, #0]
   b94ee:	9708      	str	r7, [sp, #32]
   b94f0:	6a15      	ldr	r5, [r2, #32]
   b94f2:	4631      	mov	r1, r6
   b94f4:	4622      	mov	r2, r4
   b94f6:	46ac      	mov	ip, r5
   b94f8:	b003      	add	sp, #12
   b94fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b94fe:	4760      	bx	ip
   b9500:	4619      	mov	r1, r3
   b9502:	9301      	str	r3, [sp, #4]
   b9504:	f000 f858 	bl	b95b8 <_ZNKSt9type_infoeqERKS_>
   b9508:	9b01      	ldr	r3, [sp, #4]
   b950a:	2800      	cmp	r0, #0
   b950c:	d0ed      	beq.n	b94ea <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b950e:	2006      	movs	r0, #6
   b9510:	b003      	add	sp, #12
   b9512:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9514 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b9514:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9518:	460d      	mov	r5, r1
   b951a:	4619      	mov	r1, r3
   b951c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b9520:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b9524:	4681      	mov	r9, r0
   b9526:	4617      	mov	r7, r2
   b9528:	4698      	mov	r8, r3
   b952a:	f000 f845 	bl	b95b8 <_ZNKSt9type_infoeqERKS_>
   b952e:	b190      	cbz	r0, b9556 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b9530:	2d00      	cmp	r5, #0
   b9532:	6034      	str	r4, [r6, #0]
   b9534:	7137      	strb	r7, [r6, #4]
   b9536:	db09      	blt.n	b954c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b9538:	1961      	adds	r1, r4, r5
   b953a:	458a      	cmp	sl, r1
   b953c:	bf0c      	ite	eq
   b953e:	2106      	moveq	r1, #6
   b9540:	2101      	movne	r1, #1
   b9542:	71b1      	strb	r1, [r6, #6]
   b9544:	2000      	movs	r0, #0
   b9546:	b001      	add	sp, #4
   b9548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b954c:	3502      	adds	r5, #2
   b954e:	d1f9      	bne.n	b9544 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9550:	2301      	movs	r3, #1
   b9552:	71b3      	strb	r3, [r6, #6]
   b9554:	e7f6      	b.n	b9544 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9556:	4554      	cmp	r4, sl
   b9558:	d106      	bne.n	b9568 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b955a:	4659      	mov	r1, fp
   b955c:	4648      	mov	r0, r9
   b955e:	f000 f82b 	bl	b95b8 <_ZNKSt9type_infoeqERKS_>
   b9562:	b108      	cbz	r0, b9568 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9564:	7177      	strb	r7, [r6, #5]
   b9566:	e7ed      	b.n	b9544 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9568:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b956c:	6803      	ldr	r3, [r0, #0]
   b956e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b9572:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b9576:	69dc      	ldr	r4, [r3, #28]
   b9578:	463a      	mov	r2, r7
   b957a:	4643      	mov	r3, r8
   b957c:	4629      	mov	r1, r5
   b957e:	46a4      	mov	ip, r4
   b9580:	b001      	add	sp, #4
   b9582:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9586:	4760      	bx	ip

000b9588 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b9588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b958c:	4607      	mov	r7, r0
   b958e:	460c      	mov	r4, r1
   b9590:	4615      	mov	r5, r2
   b9592:	461e      	mov	r6, r3
   b9594:	f7ff ff6d 	bl	b9472 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b9598:	b948      	cbnz	r0, b95ae <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b959a:	68b8      	ldr	r0, [r7, #8]
   b959c:	6803      	ldr	r3, [r0, #0]
   b959e:	699f      	ldr	r7, [r3, #24]
   b95a0:	462a      	mov	r2, r5
   b95a2:	4633      	mov	r3, r6
   b95a4:	4621      	mov	r1, r4
   b95a6:	46bc      	mov	ip, r7
   b95a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b95ac:	4760      	bx	ip
   b95ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b95b2 <_ZNSt9type_infoD1Ev>:
   b95b2:	4770      	bx	lr

000b95b4 <_ZNKSt9type_info14__is_pointer_pEv>:
   b95b4:	2000      	movs	r0, #0
   b95b6:	4770      	bx	lr

000b95b8 <_ZNKSt9type_infoeqERKS_>:
   b95b8:	4281      	cmp	r1, r0
   b95ba:	b508      	push	{r3, lr}
   b95bc:	d00e      	beq.n	b95dc <_ZNKSt9type_infoeqERKS_+0x24>
   b95be:	6840      	ldr	r0, [r0, #4]
   b95c0:	7803      	ldrb	r3, [r0, #0]
   b95c2:	2b2a      	cmp	r3, #42	; 0x2a
   b95c4:	d00c      	beq.n	b95e0 <_ZNKSt9type_infoeqERKS_+0x28>
   b95c6:	6849      	ldr	r1, [r1, #4]
   b95c8:	780b      	ldrb	r3, [r1, #0]
   b95ca:	2b2a      	cmp	r3, #42	; 0x2a
   b95cc:	bf08      	it	eq
   b95ce:	3101      	addeq	r1, #1
   b95d0:	f000 fedd 	bl	ba38e <strcmp>
   b95d4:	fab0 f080 	clz	r0, r0
   b95d8:	0940      	lsrs	r0, r0, #5
   b95da:	bd08      	pop	{r3, pc}
   b95dc:	2001      	movs	r0, #1
   b95de:	e7fc      	b.n	b95da <_ZNKSt9type_infoeqERKS_+0x22>
   b95e0:	2000      	movs	r0, #0
   b95e2:	e7fa      	b.n	b95da <_ZNKSt9type_infoeqERKS_+0x22>

000b95e4 <floorf>:
   b95e4:	ee10 2a10 	vmov	r2, s0
   b95e8:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   b95ec:	3b7f      	subs	r3, #127	; 0x7f
   b95ee:	2b16      	cmp	r3, #22
   b95f0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   b95f4:	dc28      	bgt.n	b9648 <floorf+0x64>
   b95f6:	2b00      	cmp	r3, #0
   b95f8:	db18      	blt.n	b962c <floorf+0x48>
   b95fa:	491a      	ldr	r1, [pc, #104]	; (b9664 <floorf+0x80>)
   b95fc:	4119      	asrs	r1, r3
   b95fe:	420a      	tst	r2, r1
   b9600:	d021      	beq.n	b9646 <floorf+0x62>
   b9602:	eddf 7a19 	vldr	s15, [pc, #100]	; b9668 <floorf+0x84>
   b9606:	ee70 7a27 	vadd.f32	s15, s0, s15
   b960a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b960e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b9612:	dd18      	ble.n	b9646 <floorf+0x62>
   b9614:	2a00      	cmp	r2, #0
   b9616:	da04      	bge.n	b9622 <floorf+0x3e>
   b9618:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   b961c:	fa40 f303 	asr.w	r3, r0, r3
   b9620:	441a      	add	r2, r3
   b9622:	ea22 0301 	bic.w	r3, r2, r1
   b9626:	ee00 3a10 	vmov	s0, r3
   b962a:	4770      	bx	lr
   b962c:	eddf 7a0e 	vldr	s15, [pc, #56]	; b9668 <floorf+0x84>
   b9630:	ee70 7a27 	vadd.f32	s15, s0, s15
   b9634:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b9638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b963c:	dd03      	ble.n	b9646 <floorf+0x62>
   b963e:	2a00      	cmp	r2, #0
   b9640:	db08      	blt.n	b9654 <floorf+0x70>
   b9642:	ed9f 0a0a 	vldr	s0, [pc, #40]	; b966c <floorf+0x88>
   b9646:	4770      	bx	lr
   b9648:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   b964c:	d3fb      	bcc.n	b9646 <floorf+0x62>
   b964e:	ee30 0a00 	vadd.f32	s0, s0, s0
   b9652:	4770      	bx	lr
   b9654:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b9658:	2900      	cmp	r1, #0
   b965a:	bf18      	it	ne
   b965c:	eeb0 0a67 	vmovne.f32	s0, s15
   b9660:	4770      	bx	lr
   b9662:	bf00      	nop
   b9664:	007fffff 	.word	0x007fffff
   b9668:	7149f2ca 	.word	0x7149f2ca
   b966c:	00000000 	.word	0x00000000

000b9670 <sqrt>:
   b9670:	b538      	push	{r3, r4, r5, lr}
   b9672:	ed2d 8b02 	vpush	{d8}
   b9676:	ec55 4b10 	vmov	r4, r5, d0
   b967a:	f000 f833 	bl	b96e4 <__ieee754_sqrt>
   b967e:	4b18      	ldr	r3, [pc, #96]	; (b96e0 <sqrt+0x70>)
   b9680:	eeb0 8a40 	vmov.f32	s16, s0
   b9684:	eef0 8a60 	vmov.f32	s17, s1
   b9688:	f993 3000 	ldrsb.w	r3, [r3]
   b968c:	3301      	adds	r3, #1
   b968e:	d00d      	beq.n	b96ac <sqrt+0x3c>
   b9690:	4622      	mov	r2, r4
   b9692:	462b      	mov	r3, r5
   b9694:	4620      	mov	r0, r4
   b9696:	4629      	mov	r1, r5
   b9698:	f000 fd46 	bl	ba128 <__aeabi_dcmpun>
   b969c:	b930      	cbnz	r0, b96ac <sqrt+0x3c>
   b969e:	2200      	movs	r2, #0
   b96a0:	2300      	movs	r3, #0
   b96a2:	4620      	mov	r0, r4
   b96a4:	4629      	mov	r1, r5
   b96a6:	f000 fd17 	bl	ba0d8 <__aeabi_dcmplt>
   b96aa:	b930      	cbnz	r0, b96ba <sqrt+0x4a>
   b96ac:	eeb0 0a48 	vmov.f32	s0, s16
   b96b0:	eef0 0a68 	vmov.f32	s1, s17
   b96b4:	ecbd 8b02 	vpop	{d8}
   b96b8:	bd38      	pop	{r3, r4, r5, pc}
   b96ba:	f7fd fa21 	bl	b6b00 <__errno>
   b96be:	2200      	movs	r2, #0
   b96c0:	2300      	movs	r3, #0
   b96c2:	2121      	movs	r1, #33	; 0x21
   b96c4:	6001      	str	r1, [r0, #0]
   b96c6:	4610      	mov	r0, r2
   b96c8:	4619      	mov	r1, r3
   b96ca:	f000 fbbd 	bl	b9e48 <__aeabi_ddiv>
   b96ce:	ec41 0b18 	vmov	d8, r0, r1
   b96d2:	eeb0 0a48 	vmov.f32	s0, s16
   b96d6:	eef0 0a68 	vmov.f32	s1, s17
   b96da:	ecbd 8b02 	vpop	{d8}
   b96de:	bd38      	pop	{r3, r4, r5, pc}
   b96e0:	2003555c 	.word	0x2003555c

000b96e4 <__ieee754_sqrt>:
   b96e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b96e8:	4a63      	ldr	r2, [pc, #396]	; (b9878 <__ieee754_sqrt+0x194>)
   b96ea:	ec55 4b10 	vmov	r4, r5, d0
   b96ee:	43aa      	bics	r2, r5
   b96f0:	f000 809f 	beq.w	b9832 <__ieee754_sqrt+0x14e>
   b96f4:	2d00      	cmp	r5, #0
   b96f6:	ee10 ca10 	vmov	ip, s0
   b96fa:	462b      	mov	r3, r5
   b96fc:	dd54      	ble.n	b97a8 <__ieee754_sqrt+0xc4>
   b96fe:	1529      	asrs	r1, r5, #20
   b9700:	d063      	beq.n	b97ca <__ieee754_sqrt+0xe6>
   b9702:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b9706:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   b970a:	07c9      	lsls	r1, r1, #31
   b970c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b9710:	d404      	bmi.n	b971c <__ieee754_sqrt+0x38>
   b9712:	005b      	lsls	r3, r3, #1
   b9714:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b9718:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b971c:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   b9720:	2600      	movs	r6, #0
   b9722:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   b9726:	107f      	asrs	r7, r7, #1
   b9728:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b972c:	f04f 0e16 	mov.w	lr, #22
   b9730:	4634      	mov	r4, r6
   b9732:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   b9736:	18a1      	adds	r1, r4, r2
   b9738:	4299      	cmp	r1, r3
   b973a:	dc02      	bgt.n	b9742 <__ieee754_sqrt+0x5e>
   b973c:	1a5b      	subs	r3, r3, r1
   b973e:	188c      	adds	r4, r1, r2
   b9740:	4416      	add	r6, r2
   b9742:	005b      	lsls	r3, r3, #1
   b9744:	f1be 0e01 	subs.w	lr, lr, #1
   b9748:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b974c:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b9750:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b9754:	d1ef      	bne.n	b9736 <__ieee754_sqrt+0x52>
   b9756:	4675      	mov	r5, lr
   b9758:	2020      	movs	r0, #32
   b975a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b975e:	e00a      	b.n	b9776 <__ieee754_sqrt+0x92>
   b9760:	d044      	beq.n	b97ec <__ieee754_sqrt+0x108>
   b9762:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   b9766:	3801      	subs	r0, #1
   b9768:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   b976c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b9770:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b9774:	d043      	beq.n	b97fe <__ieee754_sqrt+0x11a>
   b9776:	42a3      	cmp	r3, r4
   b9778:	eb02 010e 	add.w	r1, r2, lr
   b977c:	ddf0      	ble.n	b9760 <__ieee754_sqrt+0x7c>
   b977e:	2900      	cmp	r1, #0
   b9780:	eb01 0e02 	add.w	lr, r1, r2
   b9784:	db0a      	blt.n	b979c <__ieee754_sqrt+0xb8>
   b9786:	46a0      	mov	r8, r4
   b9788:	1b1b      	subs	r3, r3, r4
   b978a:	4561      	cmp	r1, ip
   b978c:	bf88      	it	hi
   b978e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   b9792:	ebac 0c01 	sub.w	ip, ip, r1
   b9796:	4415      	add	r5, r2
   b9798:	4644      	mov	r4, r8
   b979a:	e7e2      	b.n	b9762 <__ieee754_sqrt+0x7e>
   b979c:	f1be 0f00 	cmp.w	lr, #0
   b97a0:	dbf1      	blt.n	b9786 <__ieee754_sqrt+0xa2>
   b97a2:	f104 0801 	add.w	r8, r4, #1
   b97a6:	e7ef      	b.n	b9788 <__ieee754_sqrt+0xa4>
   b97a8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   b97ac:	4322      	orrs	r2, r4
   b97ae:	d038      	beq.n	b9822 <__ieee754_sqrt+0x13e>
   b97b0:	2d00      	cmp	r5, #0
   b97b2:	d14e      	bne.n	b9852 <__ieee754_sqrt+0x16e>
   b97b4:	4629      	mov	r1, r5
   b97b6:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   b97ba:	3915      	subs	r1, #21
   b97bc:	4613      	mov	r3, r2
   b97be:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   b97c2:	2a00      	cmp	r2, #0
   b97c4:	d0f7      	beq.n	b97b6 <__ieee754_sqrt+0xd2>
   b97c6:	02d6      	lsls	r6, r2, #11
   b97c8:	d450      	bmi.n	b986c <__ieee754_sqrt+0x188>
   b97ca:	2000      	movs	r0, #0
   b97cc:	005b      	lsls	r3, r3, #1
   b97ce:	02dd      	lsls	r5, r3, #11
   b97d0:	4604      	mov	r4, r0
   b97d2:	f100 0001 	add.w	r0, r0, #1
   b97d6:	d5f9      	bpl.n	b97cc <__ieee754_sqrt+0xe8>
   b97d8:	461a      	mov	r2, r3
   b97da:	4663      	mov	r3, ip
   b97dc:	fa0c fc00 	lsl.w	ip, ip, r0
   b97e0:	f1c0 0020 	rsb	r0, r0, #32
   b97e4:	40c3      	lsrs	r3, r0
   b97e6:	1b09      	subs	r1, r1, r4
   b97e8:	4313      	orrs	r3, r2
   b97ea:	e78a      	b.n	b9702 <__ieee754_sqrt+0x1e>
   b97ec:	4561      	cmp	r1, ip
   b97ee:	d8b8      	bhi.n	b9762 <__ieee754_sqrt+0x7e>
   b97f0:	2900      	cmp	r1, #0
   b97f2:	eb01 0e02 	add.w	lr, r1, r2
   b97f6:	dbd1      	blt.n	b979c <__ieee754_sqrt+0xb8>
   b97f8:	4698      	mov	r8, r3
   b97fa:	2300      	movs	r3, #0
   b97fc:	e7c9      	b.n	b9792 <__ieee754_sqrt+0xae>
   b97fe:	ea53 030c 	orrs.w	r3, r3, ip
   b9802:	d110      	bne.n	b9826 <__ieee754_sqrt+0x142>
   b9804:	0868      	lsrs	r0, r5, #1
   b9806:	1071      	asrs	r1, r6, #1
   b9808:	07f3      	lsls	r3, r6, #31
   b980a:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   b980e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   b9812:	bf48      	it	mi
   b9814:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   b9818:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   b981c:	4602      	mov	r2, r0
   b981e:	ec43 2b10 	vmov	d0, r2, r3
   b9822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9826:	1c6a      	adds	r2, r5, #1
   b9828:	bf16      	itet	ne
   b982a:	1c68      	addne	r0, r5, #1
   b982c:	3601      	addeq	r6, #1
   b982e:	0840      	lsrne	r0, r0, #1
   b9830:	e7e9      	b.n	b9806 <__ieee754_sqrt+0x122>
   b9832:	ee10 2a10 	vmov	r2, s0
   b9836:	ee10 0a10 	vmov	r0, s0
   b983a:	462b      	mov	r3, r5
   b983c:	4629      	mov	r1, r5
   b983e:	f000 f9d9 	bl	b9bf4 <__aeabi_dmul>
   b9842:	4622      	mov	r2, r4
   b9844:	462b      	mov	r3, r5
   b9846:	f000 f81f 	bl	b9888 <__adddf3>
   b984a:	ec41 0b10 	vmov	d0, r0, r1
   b984e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9852:	ee10 2a10 	vmov	r2, s0
   b9856:	4620      	mov	r0, r4
   b9858:	4629      	mov	r1, r5
   b985a:	f000 f813 	bl	b9884 <__aeabi_dsub>
   b985e:	4602      	mov	r2, r0
   b9860:	460b      	mov	r3, r1
   b9862:	f000 faf1 	bl	b9e48 <__aeabi_ddiv>
   b9866:	ec41 0b10 	vmov	d0, r0, r1
   b986a:	e7da      	b.n	b9822 <__ieee754_sqrt+0x13e>
   b986c:	4663      	mov	r3, ip
   b986e:	2020      	movs	r0, #32
   b9870:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b9874:	e7b6      	b.n	b97e4 <__ieee754_sqrt+0x100>
   b9876:	bf00      	nop
   b9878:	7ff00000 	.word	0x7ff00000

000b987c <__aeabi_drsub>:
   b987c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b9880:	e002      	b.n	b9888 <__adddf3>
   b9882:	bf00      	nop

000b9884 <__aeabi_dsub>:
   b9884:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b9888 <__adddf3>:
   b9888:	b530      	push	{r4, r5, lr}
   b988a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b988e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b9892:	ea94 0f05 	teq	r4, r5
   b9896:	bf08      	it	eq
   b9898:	ea90 0f02 	teqeq	r0, r2
   b989c:	bf1f      	itttt	ne
   b989e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b98a2:	ea55 0c02 	orrsne.w	ip, r5, r2
   b98a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b98aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b98ae:	f000 80e2 	beq.w	b9a76 <__adddf3+0x1ee>
   b98b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b98b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b98ba:	bfb8      	it	lt
   b98bc:	426d      	neglt	r5, r5
   b98be:	dd0c      	ble.n	b98da <__adddf3+0x52>
   b98c0:	442c      	add	r4, r5
   b98c2:	ea80 0202 	eor.w	r2, r0, r2
   b98c6:	ea81 0303 	eor.w	r3, r1, r3
   b98ca:	ea82 0000 	eor.w	r0, r2, r0
   b98ce:	ea83 0101 	eor.w	r1, r3, r1
   b98d2:	ea80 0202 	eor.w	r2, r0, r2
   b98d6:	ea81 0303 	eor.w	r3, r1, r3
   b98da:	2d36      	cmp	r5, #54	; 0x36
   b98dc:	bf88      	it	hi
   b98de:	bd30      	pophi	{r4, r5, pc}
   b98e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b98e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b98e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b98ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b98f0:	d002      	beq.n	b98f8 <__adddf3+0x70>
   b98f2:	4240      	negs	r0, r0
   b98f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b98f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b98fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b9900:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b9904:	d002      	beq.n	b990c <__adddf3+0x84>
   b9906:	4252      	negs	r2, r2
   b9908:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b990c:	ea94 0f05 	teq	r4, r5
   b9910:	f000 80a7 	beq.w	b9a62 <__adddf3+0x1da>
   b9914:	f1a4 0401 	sub.w	r4, r4, #1
   b9918:	f1d5 0e20 	rsbs	lr, r5, #32
   b991c:	db0d      	blt.n	b993a <__adddf3+0xb2>
   b991e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b9922:	fa22 f205 	lsr.w	r2, r2, r5
   b9926:	1880      	adds	r0, r0, r2
   b9928:	f141 0100 	adc.w	r1, r1, #0
   b992c:	fa03 f20e 	lsl.w	r2, r3, lr
   b9930:	1880      	adds	r0, r0, r2
   b9932:	fa43 f305 	asr.w	r3, r3, r5
   b9936:	4159      	adcs	r1, r3
   b9938:	e00e      	b.n	b9958 <__adddf3+0xd0>
   b993a:	f1a5 0520 	sub.w	r5, r5, #32
   b993e:	f10e 0e20 	add.w	lr, lr, #32
   b9942:	2a01      	cmp	r2, #1
   b9944:	fa03 fc0e 	lsl.w	ip, r3, lr
   b9948:	bf28      	it	cs
   b994a:	f04c 0c02 	orrcs.w	ip, ip, #2
   b994e:	fa43 f305 	asr.w	r3, r3, r5
   b9952:	18c0      	adds	r0, r0, r3
   b9954:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b9958:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b995c:	d507      	bpl.n	b996e <__adddf3+0xe6>
   b995e:	f04f 0e00 	mov.w	lr, #0
   b9962:	f1dc 0c00 	rsbs	ip, ip, #0
   b9966:	eb7e 0000 	sbcs.w	r0, lr, r0
   b996a:	eb6e 0101 	sbc.w	r1, lr, r1
   b996e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b9972:	d31b      	bcc.n	b99ac <__adddf3+0x124>
   b9974:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b9978:	d30c      	bcc.n	b9994 <__adddf3+0x10c>
   b997a:	0849      	lsrs	r1, r1, #1
   b997c:	ea5f 0030 	movs.w	r0, r0, rrx
   b9980:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b9984:	f104 0401 	add.w	r4, r4, #1
   b9988:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b998c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b9990:	f080 809a 	bcs.w	b9ac8 <__adddf3+0x240>
   b9994:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b9998:	bf08      	it	eq
   b999a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b999e:	f150 0000 	adcs.w	r0, r0, #0
   b99a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b99a6:	ea41 0105 	orr.w	r1, r1, r5
   b99aa:	bd30      	pop	{r4, r5, pc}
   b99ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b99b0:	4140      	adcs	r0, r0
   b99b2:	eb41 0101 	adc.w	r1, r1, r1
   b99b6:	3c01      	subs	r4, #1
   b99b8:	bf28      	it	cs
   b99ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b99be:	d2e9      	bcs.n	b9994 <__adddf3+0x10c>
   b99c0:	f091 0f00 	teq	r1, #0
   b99c4:	bf04      	itt	eq
   b99c6:	4601      	moveq	r1, r0
   b99c8:	2000      	moveq	r0, #0
   b99ca:	fab1 f381 	clz	r3, r1
   b99ce:	bf08      	it	eq
   b99d0:	3320      	addeq	r3, #32
   b99d2:	f1a3 030b 	sub.w	r3, r3, #11
   b99d6:	f1b3 0220 	subs.w	r2, r3, #32
   b99da:	da0c      	bge.n	b99f6 <__adddf3+0x16e>
   b99dc:	320c      	adds	r2, #12
   b99de:	dd08      	ble.n	b99f2 <__adddf3+0x16a>
   b99e0:	f102 0c14 	add.w	ip, r2, #20
   b99e4:	f1c2 020c 	rsb	r2, r2, #12
   b99e8:	fa01 f00c 	lsl.w	r0, r1, ip
   b99ec:	fa21 f102 	lsr.w	r1, r1, r2
   b99f0:	e00c      	b.n	b9a0c <__adddf3+0x184>
   b99f2:	f102 0214 	add.w	r2, r2, #20
   b99f6:	bfd8      	it	le
   b99f8:	f1c2 0c20 	rsble	ip, r2, #32
   b99fc:	fa01 f102 	lsl.w	r1, r1, r2
   b9a00:	fa20 fc0c 	lsr.w	ip, r0, ip
   b9a04:	bfdc      	itt	le
   b9a06:	ea41 010c 	orrle.w	r1, r1, ip
   b9a0a:	4090      	lslle	r0, r2
   b9a0c:	1ae4      	subs	r4, r4, r3
   b9a0e:	bfa2      	ittt	ge
   b9a10:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b9a14:	4329      	orrge	r1, r5
   b9a16:	bd30      	popge	{r4, r5, pc}
   b9a18:	ea6f 0404 	mvn.w	r4, r4
   b9a1c:	3c1f      	subs	r4, #31
   b9a1e:	da1c      	bge.n	b9a5a <__adddf3+0x1d2>
   b9a20:	340c      	adds	r4, #12
   b9a22:	dc0e      	bgt.n	b9a42 <__adddf3+0x1ba>
   b9a24:	f104 0414 	add.w	r4, r4, #20
   b9a28:	f1c4 0220 	rsb	r2, r4, #32
   b9a2c:	fa20 f004 	lsr.w	r0, r0, r4
   b9a30:	fa01 f302 	lsl.w	r3, r1, r2
   b9a34:	ea40 0003 	orr.w	r0, r0, r3
   b9a38:	fa21 f304 	lsr.w	r3, r1, r4
   b9a3c:	ea45 0103 	orr.w	r1, r5, r3
   b9a40:	bd30      	pop	{r4, r5, pc}
   b9a42:	f1c4 040c 	rsb	r4, r4, #12
   b9a46:	f1c4 0220 	rsb	r2, r4, #32
   b9a4a:	fa20 f002 	lsr.w	r0, r0, r2
   b9a4e:	fa01 f304 	lsl.w	r3, r1, r4
   b9a52:	ea40 0003 	orr.w	r0, r0, r3
   b9a56:	4629      	mov	r1, r5
   b9a58:	bd30      	pop	{r4, r5, pc}
   b9a5a:	fa21 f004 	lsr.w	r0, r1, r4
   b9a5e:	4629      	mov	r1, r5
   b9a60:	bd30      	pop	{r4, r5, pc}
   b9a62:	f094 0f00 	teq	r4, #0
   b9a66:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b9a6a:	bf06      	itte	eq
   b9a6c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b9a70:	3401      	addeq	r4, #1
   b9a72:	3d01      	subne	r5, #1
   b9a74:	e74e      	b.n	b9914 <__adddf3+0x8c>
   b9a76:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9a7a:	bf18      	it	ne
   b9a7c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b9a80:	d029      	beq.n	b9ad6 <__adddf3+0x24e>
   b9a82:	ea94 0f05 	teq	r4, r5
   b9a86:	bf08      	it	eq
   b9a88:	ea90 0f02 	teqeq	r0, r2
   b9a8c:	d005      	beq.n	b9a9a <__adddf3+0x212>
   b9a8e:	ea54 0c00 	orrs.w	ip, r4, r0
   b9a92:	bf04      	itt	eq
   b9a94:	4619      	moveq	r1, r3
   b9a96:	4610      	moveq	r0, r2
   b9a98:	bd30      	pop	{r4, r5, pc}
   b9a9a:	ea91 0f03 	teq	r1, r3
   b9a9e:	bf1e      	ittt	ne
   b9aa0:	2100      	movne	r1, #0
   b9aa2:	2000      	movne	r0, #0
   b9aa4:	bd30      	popne	{r4, r5, pc}
   b9aa6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b9aaa:	d105      	bne.n	b9ab8 <__adddf3+0x230>
   b9aac:	0040      	lsls	r0, r0, #1
   b9aae:	4149      	adcs	r1, r1
   b9ab0:	bf28      	it	cs
   b9ab2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b9ab6:	bd30      	pop	{r4, r5, pc}
   b9ab8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b9abc:	bf3c      	itt	cc
   b9abe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b9ac2:	bd30      	popcc	{r4, r5, pc}
   b9ac4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9ac8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b9acc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9ad0:	f04f 0000 	mov.w	r0, #0
   b9ad4:	bd30      	pop	{r4, r5, pc}
   b9ad6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9ada:	bf1a      	itte	ne
   b9adc:	4619      	movne	r1, r3
   b9ade:	4610      	movne	r0, r2
   b9ae0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b9ae4:	bf1c      	itt	ne
   b9ae6:	460b      	movne	r3, r1
   b9ae8:	4602      	movne	r2, r0
   b9aea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b9aee:	bf06      	itte	eq
   b9af0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b9af4:	ea91 0f03 	teqeq	r1, r3
   b9af8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b9afc:	bd30      	pop	{r4, r5, pc}
   b9afe:	bf00      	nop

000b9b00 <__aeabi_ui2d>:
   b9b00:	f090 0f00 	teq	r0, #0
   b9b04:	bf04      	itt	eq
   b9b06:	2100      	moveq	r1, #0
   b9b08:	4770      	bxeq	lr
   b9b0a:	b530      	push	{r4, r5, lr}
   b9b0c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9b10:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9b14:	f04f 0500 	mov.w	r5, #0
   b9b18:	f04f 0100 	mov.w	r1, #0
   b9b1c:	e750      	b.n	b99c0 <__adddf3+0x138>
   b9b1e:	bf00      	nop

000b9b20 <__aeabi_i2d>:
   b9b20:	f090 0f00 	teq	r0, #0
   b9b24:	bf04      	itt	eq
   b9b26:	2100      	moveq	r1, #0
   b9b28:	4770      	bxeq	lr
   b9b2a:	b530      	push	{r4, r5, lr}
   b9b2c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9b30:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9b34:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b9b38:	bf48      	it	mi
   b9b3a:	4240      	negmi	r0, r0
   b9b3c:	f04f 0100 	mov.w	r1, #0
   b9b40:	e73e      	b.n	b99c0 <__adddf3+0x138>
   b9b42:	bf00      	nop

000b9b44 <__aeabi_f2d>:
   b9b44:	0042      	lsls	r2, r0, #1
   b9b46:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b9b4a:	ea4f 0131 	mov.w	r1, r1, rrx
   b9b4e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b9b52:	bf1f      	itttt	ne
   b9b54:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b9b58:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b9b5c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b9b60:	4770      	bxne	lr
   b9b62:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b9b66:	bf08      	it	eq
   b9b68:	4770      	bxeq	lr
   b9b6a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b9b6e:	bf04      	itt	eq
   b9b70:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b9b74:	4770      	bxeq	lr
   b9b76:	b530      	push	{r4, r5, lr}
   b9b78:	f44f 7460 	mov.w	r4, #896	; 0x380
   b9b7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9b80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9b84:	e71c      	b.n	b99c0 <__adddf3+0x138>
   b9b86:	bf00      	nop

000b9b88 <__aeabi_ul2d>:
   b9b88:	ea50 0201 	orrs.w	r2, r0, r1
   b9b8c:	bf08      	it	eq
   b9b8e:	4770      	bxeq	lr
   b9b90:	b530      	push	{r4, r5, lr}
   b9b92:	f04f 0500 	mov.w	r5, #0
   b9b96:	e00a      	b.n	b9bae <__aeabi_l2d+0x16>

000b9b98 <__aeabi_l2d>:
   b9b98:	ea50 0201 	orrs.w	r2, r0, r1
   b9b9c:	bf08      	it	eq
   b9b9e:	4770      	bxeq	lr
   b9ba0:	b530      	push	{r4, r5, lr}
   b9ba2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b9ba6:	d502      	bpl.n	b9bae <__aeabi_l2d+0x16>
   b9ba8:	4240      	negs	r0, r0
   b9baa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9bae:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9bb2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9bb6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b9bba:	f43f aed8 	beq.w	b996e <__adddf3+0xe6>
   b9bbe:	f04f 0203 	mov.w	r2, #3
   b9bc2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9bc6:	bf18      	it	ne
   b9bc8:	3203      	addne	r2, #3
   b9bca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9bce:	bf18      	it	ne
   b9bd0:	3203      	addne	r2, #3
   b9bd2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b9bd6:	f1c2 0320 	rsb	r3, r2, #32
   b9bda:	fa00 fc03 	lsl.w	ip, r0, r3
   b9bde:	fa20 f002 	lsr.w	r0, r0, r2
   b9be2:	fa01 fe03 	lsl.w	lr, r1, r3
   b9be6:	ea40 000e 	orr.w	r0, r0, lr
   b9bea:	fa21 f102 	lsr.w	r1, r1, r2
   b9bee:	4414      	add	r4, r2
   b9bf0:	e6bd      	b.n	b996e <__adddf3+0xe6>
   b9bf2:	bf00      	nop

000b9bf4 <__aeabi_dmul>:
   b9bf4:	b570      	push	{r4, r5, r6, lr}
   b9bf6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b9bfa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b9bfe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b9c02:	bf1d      	ittte	ne
   b9c04:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b9c08:	ea94 0f0c 	teqne	r4, ip
   b9c0c:	ea95 0f0c 	teqne	r5, ip
   b9c10:	f000 f8de 	bleq	b9dd0 <__aeabi_dmul+0x1dc>
   b9c14:	442c      	add	r4, r5
   b9c16:	ea81 0603 	eor.w	r6, r1, r3
   b9c1a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b9c1e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b9c22:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b9c26:	bf18      	it	ne
   b9c28:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b9c2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9c30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b9c34:	d038      	beq.n	b9ca8 <__aeabi_dmul+0xb4>
   b9c36:	fba0 ce02 	umull	ip, lr, r0, r2
   b9c3a:	f04f 0500 	mov.w	r5, #0
   b9c3e:	fbe1 e502 	umlal	lr, r5, r1, r2
   b9c42:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b9c46:	fbe0 e503 	umlal	lr, r5, r0, r3
   b9c4a:	f04f 0600 	mov.w	r6, #0
   b9c4e:	fbe1 5603 	umlal	r5, r6, r1, r3
   b9c52:	f09c 0f00 	teq	ip, #0
   b9c56:	bf18      	it	ne
   b9c58:	f04e 0e01 	orrne.w	lr, lr, #1
   b9c5c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b9c60:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b9c64:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b9c68:	d204      	bcs.n	b9c74 <__aeabi_dmul+0x80>
   b9c6a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b9c6e:	416d      	adcs	r5, r5
   b9c70:	eb46 0606 	adc.w	r6, r6, r6
   b9c74:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b9c78:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b9c7c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b9c80:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b9c84:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b9c88:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b9c8c:	bf88      	it	hi
   b9c8e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b9c92:	d81e      	bhi.n	b9cd2 <__aeabi_dmul+0xde>
   b9c94:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b9c98:	bf08      	it	eq
   b9c9a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b9c9e:	f150 0000 	adcs.w	r0, r0, #0
   b9ca2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9ca6:	bd70      	pop	{r4, r5, r6, pc}
   b9ca8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b9cac:	ea46 0101 	orr.w	r1, r6, r1
   b9cb0:	ea40 0002 	orr.w	r0, r0, r2
   b9cb4:	ea81 0103 	eor.w	r1, r1, r3
   b9cb8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b9cbc:	bfc2      	ittt	gt
   b9cbe:	ebd4 050c 	rsbsgt	r5, r4, ip
   b9cc2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b9cc6:	bd70      	popgt	{r4, r5, r6, pc}
   b9cc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9ccc:	f04f 0e00 	mov.w	lr, #0
   b9cd0:	3c01      	subs	r4, #1
   b9cd2:	f300 80ab 	bgt.w	b9e2c <__aeabi_dmul+0x238>
   b9cd6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b9cda:	bfde      	ittt	le
   b9cdc:	2000      	movle	r0, #0
   b9cde:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b9ce2:	bd70      	pople	{r4, r5, r6, pc}
   b9ce4:	f1c4 0400 	rsb	r4, r4, #0
   b9ce8:	3c20      	subs	r4, #32
   b9cea:	da35      	bge.n	b9d58 <__aeabi_dmul+0x164>
   b9cec:	340c      	adds	r4, #12
   b9cee:	dc1b      	bgt.n	b9d28 <__aeabi_dmul+0x134>
   b9cf0:	f104 0414 	add.w	r4, r4, #20
   b9cf4:	f1c4 0520 	rsb	r5, r4, #32
   b9cf8:	fa00 f305 	lsl.w	r3, r0, r5
   b9cfc:	fa20 f004 	lsr.w	r0, r0, r4
   b9d00:	fa01 f205 	lsl.w	r2, r1, r5
   b9d04:	ea40 0002 	orr.w	r0, r0, r2
   b9d08:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b9d0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9d10:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b9d14:	fa21 f604 	lsr.w	r6, r1, r4
   b9d18:	eb42 0106 	adc.w	r1, r2, r6
   b9d1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9d20:	bf08      	it	eq
   b9d22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9d26:	bd70      	pop	{r4, r5, r6, pc}
   b9d28:	f1c4 040c 	rsb	r4, r4, #12
   b9d2c:	f1c4 0520 	rsb	r5, r4, #32
   b9d30:	fa00 f304 	lsl.w	r3, r0, r4
   b9d34:	fa20 f005 	lsr.w	r0, r0, r5
   b9d38:	fa01 f204 	lsl.w	r2, r1, r4
   b9d3c:	ea40 0002 	orr.w	r0, r0, r2
   b9d40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9d44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b9d48:	f141 0100 	adc.w	r1, r1, #0
   b9d4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9d50:	bf08      	it	eq
   b9d52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9d56:	bd70      	pop	{r4, r5, r6, pc}
   b9d58:	f1c4 0520 	rsb	r5, r4, #32
   b9d5c:	fa00 f205 	lsl.w	r2, r0, r5
   b9d60:	ea4e 0e02 	orr.w	lr, lr, r2
   b9d64:	fa20 f304 	lsr.w	r3, r0, r4
   b9d68:	fa01 f205 	lsl.w	r2, r1, r5
   b9d6c:	ea43 0302 	orr.w	r3, r3, r2
   b9d70:	fa21 f004 	lsr.w	r0, r1, r4
   b9d74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9d78:	fa21 f204 	lsr.w	r2, r1, r4
   b9d7c:	ea20 0002 	bic.w	r0, r0, r2
   b9d80:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b9d84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9d88:	bf08      	it	eq
   b9d8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9d8e:	bd70      	pop	{r4, r5, r6, pc}
   b9d90:	f094 0f00 	teq	r4, #0
   b9d94:	d10f      	bne.n	b9db6 <__aeabi_dmul+0x1c2>
   b9d96:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b9d9a:	0040      	lsls	r0, r0, #1
   b9d9c:	eb41 0101 	adc.w	r1, r1, r1
   b9da0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9da4:	bf08      	it	eq
   b9da6:	3c01      	subeq	r4, #1
   b9da8:	d0f7      	beq.n	b9d9a <__aeabi_dmul+0x1a6>
   b9daa:	ea41 0106 	orr.w	r1, r1, r6
   b9dae:	f095 0f00 	teq	r5, #0
   b9db2:	bf18      	it	ne
   b9db4:	4770      	bxne	lr
   b9db6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b9dba:	0052      	lsls	r2, r2, #1
   b9dbc:	eb43 0303 	adc.w	r3, r3, r3
   b9dc0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b9dc4:	bf08      	it	eq
   b9dc6:	3d01      	subeq	r5, #1
   b9dc8:	d0f7      	beq.n	b9dba <__aeabi_dmul+0x1c6>
   b9dca:	ea43 0306 	orr.w	r3, r3, r6
   b9dce:	4770      	bx	lr
   b9dd0:	ea94 0f0c 	teq	r4, ip
   b9dd4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b9dd8:	bf18      	it	ne
   b9dda:	ea95 0f0c 	teqne	r5, ip
   b9dde:	d00c      	beq.n	b9dfa <__aeabi_dmul+0x206>
   b9de0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9de4:	bf18      	it	ne
   b9de6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b9dea:	d1d1      	bne.n	b9d90 <__aeabi_dmul+0x19c>
   b9dec:	ea81 0103 	eor.w	r1, r1, r3
   b9df0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9df4:	f04f 0000 	mov.w	r0, #0
   b9df8:	bd70      	pop	{r4, r5, r6, pc}
   b9dfa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9dfe:	bf06      	itte	eq
   b9e00:	4610      	moveq	r0, r2
   b9e02:	4619      	moveq	r1, r3
   b9e04:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b9e08:	d019      	beq.n	b9e3e <__aeabi_dmul+0x24a>
   b9e0a:	ea94 0f0c 	teq	r4, ip
   b9e0e:	d102      	bne.n	b9e16 <__aeabi_dmul+0x222>
   b9e10:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b9e14:	d113      	bne.n	b9e3e <__aeabi_dmul+0x24a>
   b9e16:	ea95 0f0c 	teq	r5, ip
   b9e1a:	d105      	bne.n	b9e28 <__aeabi_dmul+0x234>
   b9e1c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b9e20:	bf1c      	itt	ne
   b9e22:	4610      	movne	r0, r2
   b9e24:	4619      	movne	r1, r3
   b9e26:	d10a      	bne.n	b9e3e <__aeabi_dmul+0x24a>
   b9e28:	ea81 0103 	eor.w	r1, r1, r3
   b9e2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9e30:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b9e34:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9e38:	f04f 0000 	mov.w	r0, #0
   b9e3c:	bd70      	pop	{r4, r5, r6, pc}
   b9e3e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b9e42:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b9e46:	bd70      	pop	{r4, r5, r6, pc}

000b9e48 <__aeabi_ddiv>:
   b9e48:	b570      	push	{r4, r5, r6, lr}
   b9e4a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b9e4e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b9e52:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b9e56:	bf1d      	ittte	ne
   b9e58:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b9e5c:	ea94 0f0c 	teqne	r4, ip
   b9e60:	ea95 0f0c 	teqne	r5, ip
   b9e64:	f000 f8a7 	bleq	b9fb6 <__aeabi_ddiv+0x16e>
   b9e68:	eba4 0405 	sub.w	r4, r4, r5
   b9e6c:	ea81 0e03 	eor.w	lr, r1, r3
   b9e70:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b9e74:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9e78:	f000 8088 	beq.w	b9f8c <__aeabi_ddiv+0x144>
   b9e7c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b9e80:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b9e84:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b9e88:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b9e8c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b9e90:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b9e94:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b9e98:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b9e9c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b9ea0:	429d      	cmp	r5, r3
   b9ea2:	bf08      	it	eq
   b9ea4:	4296      	cmpeq	r6, r2
   b9ea6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b9eaa:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b9eae:	d202      	bcs.n	b9eb6 <__aeabi_ddiv+0x6e>
   b9eb0:	085b      	lsrs	r3, r3, #1
   b9eb2:	ea4f 0232 	mov.w	r2, r2, rrx
   b9eb6:	1ab6      	subs	r6, r6, r2
   b9eb8:	eb65 0503 	sbc.w	r5, r5, r3
   b9ebc:	085b      	lsrs	r3, r3, #1
   b9ebe:	ea4f 0232 	mov.w	r2, r2, rrx
   b9ec2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b9ec6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b9eca:	ebb6 0e02 	subs.w	lr, r6, r2
   b9ece:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9ed2:	bf22      	ittt	cs
   b9ed4:	1ab6      	subcs	r6, r6, r2
   b9ed6:	4675      	movcs	r5, lr
   b9ed8:	ea40 000c 	orrcs.w	r0, r0, ip
   b9edc:	085b      	lsrs	r3, r3, #1
   b9ede:	ea4f 0232 	mov.w	r2, r2, rrx
   b9ee2:	ebb6 0e02 	subs.w	lr, r6, r2
   b9ee6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9eea:	bf22      	ittt	cs
   b9eec:	1ab6      	subcs	r6, r6, r2
   b9eee:	4675      	movcs	r5, lr
   b9ef0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b9ef4:	085b      	lsrs	r3, r3, #1
   b9ef6:	ea4f 0232 	mov.w	r2, r2, rrx
   b9efa:	ebb6 0e02 	subs.w	lr, r6, r2
   b9efe:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9f02:	bf22      	ittt	cs
   b9f04:	1ab6      	subcs	r6, r6, r2
   b9f06:	4675      	movcs	r5, lr
   b9f08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b9f0c:	085b      	lsrs	r3, r3, #1
   b9f0e:	ea4f 0232 	mov.w	r2, r2, rrx
   b9f12:	ebb6 0e02 	subs.w	lr, r6, r2
   b9f16:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9f1a:	bf22      	ittt	cs
   b9f1c:	1ab6      	subcs	r6, r6, r2
   b9f1e:	4675      	movcs	r5, lr
   b9f20:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b9f24:	ea55 0e06 	orrs.w	lr, r5, r6
   b9f28:	d018      	beq.n	b9f5c <__aeabi_ddiv+0x114>
   b9f2a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b9f2e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b9f32:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b9f36:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b9f3a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b9f3e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b9f42:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b9f46:	d1c0      	bne.n	b9eca <__aeabi_ddiv+0x82>
   b9f48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9f4c:	d10b      	bne.n	b9f66 <__aeabi_ddiv+0x11e>
   b9f4e:	ea41 0100 	orr.w	r1, r1, r0
   b9f52:	f04f 0000 	mov.w	r0, #0
   b9f56:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b9f5a:	e7b6      	b.n	b9eca <__aeabi_ddiv+0x82>
   b9f5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9f60:	bf04      	itt	eq
   b9f62:	4301      	orreq	r1, r0
   b9f64:	2000      	moveq	r0, #0
   b9f66:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b9f6a:	bf88      	it	hi
   b9f6c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b9f70:	f63f aeaf 	bhi.w	b9cd2 <__aeabi_dmul+0xde>
   b9f74:	ebb5 0c03 	subs.w	ip, r5, r3
   b9f78:	bf04      	itt	eq
   b9f7a:	ebb6 0c02 	subseq.w	ip, r6, r2
   b9f7e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b9f82:	f150 0000 	adcs.w	r0, r0, #0
   b9f86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9f8a:	bd70      	pop	{r4, r5, r6, pc}
   b9f8c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b9f90:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b9f94:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b9f98:	bfc2      	ittt	gt
   b9f9a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b9f9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b9fa2:	bd70      	popgt	{r4, r5, r6, pc}
   b9fa4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9fa8:	f04f 0e00 	mov.w	lr, #0
   b9fac:	3c01      	subs	r4, #1
   b9fae:	e690      	b.n	b9cd2 <__aeabi_dmul+0xde>
   b9fb0:	ea45 0e06 	orr.w	lr, r5, r6
   b9fb4:	e68d      	b.n	b9cd2 <__aeabi_dmul+0xde>
   b9fb6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b9fba:	ea94 0f0c 	teq	r4, ip
   b9fbe:	bf08      	it	eq
   b9fc0:	ea95 0f0c 	teqeq	r5, ip
   b9fc4:	f43f af3b 	beq.w	b9e3e <__aeabi_dmul+0x24a>
   b9fc8:	ea94 0f0c 	teq	r4, ip
   b9fcc:	d10a      	bne.n	b9fe4 <__aeabi_ddiv+0x19c>
   b9fce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b9fd2:	f47f af34 	bne.w	b9e3e <__aeabi_dmul+0x24a>
   b9fd6:	ea95 0f0c 	teq	r5, ip
   b9fda:	f47f af25 	bne.w	b9e28 <__aeabi_dmul+0x234>
   b9fde:	4610      	mov	r0, r2
   b9fe0:	4619      	mov	r1, r3
   b9fe2:	e72c      	b.n	b9e3e <__aeabi_dmul+0x24a>
   b9fe4:	ea95 0f0c 	teq	r5, ip
   b9fe8:	d106      	bne.n	b9ff8 <__aeabi_ddiv+0x1b0>
   b9fea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b9fee:	f43f aefd 	beq.w	b9dec <__aeabi_dmul+0x1f8>
   b9ff2:	4610      	mov	r0, r2
   b9ff4:	4619      	mov	r1, r3
   b9ff6:	e722      	b.n	b9e3e <__aeabi_dmul+0x24a>
   b9ff8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9ffc:	bf18      	it	ne
   b9ffe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ba002:	f47f aec5 	bne.w	b9d90 <__aeabi_dmul+0x19c>
   ba006:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   ba00a:	f47f af0d 	bne.w	b9e28 <__aeabi_dmul+0x234>
   ba00e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   ba012:	f47f aeeb 	bne.w	b9dec <__aeabi_dmul+0x1f8>
   ba016:	e712      	b.n	b9e3e <__aeabi_dmul+0x24a>

000ba018 <__gedf2>:
   ba018:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   ba01c:	e006      	b.n	ba02c <__cmpdf2+0x4>
   ba01e:	bf00      	nop

000ba020 <__ledf2>:
   ba020:	f04f 0c01 	mov.w	ip, #1
   ba024:	e002      	b.n	ba02c <__cmpdf2+0x4>
   ba026:	bf00      	nop

000ba028 <__cmpdf2>:
   ba028:	f04f 0c01 	mov.w	ip, #1
   ba02c:	f84d cd04 	str.w	ip, [sp, #-4]!
   ba030:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   ba034:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba038:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   ba03c:	bf18      	it	ne
   ba03e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   ba042:	d01b      	beq.n	ba07c <__cmpdf2+0x54>
   ba044:	b001      	add	sp, #4
   ba046:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   ba04a:	bf0c      	ite	eq
   ba04c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   ba050:	ea91 0f03 	teqne	r1, r3
   ba054:	bf02      	ittt	eq
   ba056:	ea90 0f02 	teqeq	r0, r2
   ba05a:	2000      	moveq	r0, #0
   ba05c:	4770      	bxeq	lr
   ba05e:	f110 0f00 	cmn.w	r0, #0
   ba062:	ea91 0f03 	teq	r1, r3
   ba066:	bf58      	it	pl
   ba068:	4299      	cmppl	r1, r3
   ba06a:	bf08      	it	eq
   ba06c:	4290      	cmpeq	r0, r2
   ba06e:	bf2c      	ite	cs
   ba070:	17d8      	asrcs	r0, r3, #31
   ba072:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   ba076:	f040 0001 	orr.w	r0, r0, #1
   ba07a:	4770      	bx	lr
   ba07c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   ba080:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba084:	d102      	bne.n	ba08c <__cmpdf2+0x64>
   ba086:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   ba08a:	d107      	bne.n	ba09c <__cmpdf2+0x74>
   ba08c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   ba090:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba094:	d1d6      	bne.n	ba044 <__cmpdf2+0x1c>
   ba096:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   ba09a:	d0d3      	beq.n	ba044 <__cmpdf2+0x1c>
   ba09c:	f85d 0b04 	ldr.w	r0, [sp], #4
   ba0a0:	4770      	bx	lr
   ba0a2:	bf00      	nop

000ba0a4 <__aeabi_cdrcmple>:
   ba0a4:	4684      	mov	ip, r0
   ba0a6:	4610      	mov	r0, r2
   ba0a8:	4662      	mov	r2, ip
   ba0aa:	468c      	mov	ip, r1
   ba0ac:	4619      	mov	r1, r3
   ba0ae:	4663      	mov	r3, ip
   ba0b0:	e000      	b.n	ba0b4 <__aeabi_cdcmpeq>
   ba0b2:	bf00      	nop

000ba0b4 <__aeabi_cdcmpeq>:
   ba0b4:	b501      	push	{r0, lr}
   ba0b6:	f7ff ffb7 	bl	ba028 <__cmpdf2>
   ba0ba:	2800      	cmp	r0, #0
   ba0bc:	bf48      	it	mi
   ba0be:	f110 0f00 	cmnmi.w	r0, #0
   ba0c2:	bd01      	pop	{r0, pc}

000ba0c4 <__aeabi_dcmpeq>:
   ba0c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba0c8:	f7ff fff4 	bl	ba0b4 <__aeabi_cdcmpeq>
   ba0cc:	bf0c      	ite	eq
   ba0ce:	2001      	moveq	r0, #1
   ba0d0:	2000      	movne	r0, #0
   ba0d2:	f85d fb08 	ldr.w	pc, [sp], #8
   ba0d6:	bf00      	nop

000ba0d8 <__aeabi_dcmplt>:
   ba0d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba0dc:	f7ff ffea 	bl	ba0b4 <__aeabi_cdcmpeq>
   ba0e0:	bf34      	ite	cc
   ba0e2:	2001      	movcc	r0, #1
   ba0e4:	2000      	movcs	r0, #0
   ba0e6:	f85d fb08 	ldr.w	pc, [sp], #8
   ba0ea:	bf00      	nop

000ba0ec <__aeabi_dcmple>:
   ba0ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba0f0:	f7ff ffe0 	bl	ba0b4 <__aeabi_cdcmpeq>
   ba0f4:	bf94      	ite	ls
   ba0f6:	2001      	movls	r0, #1
   ba0f8:	2000      	movhi	r0, #0
   ba0fa:	f85d fb08 	ldr.w	pc, [sp], #8
   ba0fe:	bf00      	nop

000ba100 <__aeabi_dcmpge>:
   ba100:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba104:	f7ff ffce 	bl	ba0a4 <__aeabi_cdrcmple>
   ba108:	bf94      	ite	ls
   ba10a:	2001      	movls	r0, #1
   ba10c:	2000      	movhi	r0, #0
   ba10e:	f85d fb08 	ldr.w	pc, [sp], #8
   ba112:	bf00      	nop

000ba114 <__aeabi_dcmpgt>:
   ba114:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba118:	f7ff ffc4 	bl	ba0a4 <__aeabi_cdrcmple>
   ba11c:	bf34      	ite	cc
   ba11e:	2001      	movcc	r0, #1
   ba120:	2000      	movcs	r0, #0
   ba122:	f85d fb08 	ldr.w	pc, [sp], #8
   ba126:	bf00      	nop

000ba128 <__aeabi_dcmpun>:
   ba128:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   ba12c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba130:	d102      	bne.n	ba138 <__aeabi_dcmpun+0x10>
   ba132:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   ba136:	d10a      	bne.n	ba14e <__aeabi_dcmpun+0x26>
   ba138:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   ba13c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba140:	d102      	bne.n	ba148 <__aeabi_dcmpun+0x20>
   ba142:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   ba146:	d102      	bne.n	ba14e <__aeabi_dcmpun+0x26>
   ba148:	f04f 0000 	mov.w	r0, #0
   ba14c:	4770      	bx	lr
   ba14e:	f04f 0001 	mov.w	r0, #1
   ba152:	4770      	bx	lr

000ba154 <__aeabi_d2uiz>:
   ba154:	004a      	lsls	r2, r1, #1
   ba156:	d211      	bcs.n	ba17c <__aeabi_d2uiz+0x28>
   ba158:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   ba15c:	d211      	bcs.n	ba182 <__aeabi_d2uiz+0x2e>
   ba15e:	d50d      	bpl.n	ba17c <__aeabi_d2uiz+0x28>
   ba160:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   ba164:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   ba168:	d40e      	bmi.n	ba188 <__aeabi_d2uiz+0x34>
   ba16a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   ba16e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   ba172:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   ba176:	fa23 f002 	lsr.w	r0, r3, r2
   ba17a:	4770      	bx	lr
   ba17c:	f04f 0000 	mov.w	r0, #0
   ba180:	4770      	bx	lr
   ba182:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   ba186:	d102      	bne.n	ba18e <__aeabi_d2uiz+0x3a>
   ba188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   ba18c:	4770      	bx	lr
   ba18e:	f04f 0000 	mov.w	r0, #0
   ba192:	4770      	bx	lr

000ba194 <__aeabi_d2f>:
   ba194:	ea4f 0241 	mov.w	r2, r1, lsl #1
   ba198:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   ba19c:	bf24      	itt	cs
   ba19e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   ba1a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   ba1a6:	d90d      	bls.n	ba1c4 <__aeabi_d2f+0x30>
   ba1a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   ba1ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   ba1b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   ba1b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   ba1b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   ba1bc:	bf08      	it	eq
   ba1be:	f020 0001 	biceq.w	r0, r0, #1
   ba1c2:	4770      	bx	lr
   ba1c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   ba1c8:	d121      	bne.n	ba20e <__aeabi_d2f+0x7a>
   ba1ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   ba1ce:	bfbc      	itt	lt
   ba1d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   ba1d4:	4770      	bxlt	lr
   ba1d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba1da:	ea4f 5252 	mov.w	r2, r2, lsr #21
   ba1de:	f1c2 0218 	rsb	r2, r2, #24
   ba1e2:	f1c2 0c20 	rsb	ip, r2, #32
   ba1e6:	fa10 f30c 	lsls.w	r3, r0, ip
   ba1ea:	fa20 f002 	lsr.w	r0, r0, r2
   ba1ee:	bf18      	it	ne
   ba1f0:	f040 0001 	orrne.w	r0, r0, #1
   ba1f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   ba1f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   ba1fc:	fa03 fc0c 	lsl.w	ip, r3, ip
   ba200:	ea40 000c 	orr.w	r0, r0, ip
   ba204:	fa23 f302 	lsr.w	r3, r3, r2
   ba208:	ea4f 0343 	mov.w	r3, r3, lsl #1
   ba20c:	e7cc      	b.n	ba1a8 <__aeabi_d2f+0x14>
   ba20e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   ba212:	d107      	bne.n	ba224 <__aeabi_d2f+0x90>
   ba214:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   ba218:	bf1e      	ittt	ne
   ba21a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   ba21e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   ba222:	4770      	bxne	lr
   ba224:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   ba228:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   ba22c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   ba230:	4770      	bx	lr
   ba232:	bf00      	nop

000ba234 <__aeabi_d2ulz>:
   ba234:	b5d0      	push	{r4, r6, r7, lr}
   ba236:	4b0c      	ldr	r3, [pc, #48]	; (ba268 <__aeabi_d2ulz+0x34>)
   ba238:	2200      	movs	r2, #0
   ba23a:	4606      	mov	r6, r0
   ba23c:	460f      	mov	r7, r1
   ba23e:	f7ff fcd9 	bl	b9bf4 <__aeabi_dmul>
   ba242:	f7ff ff87 	bl	ba154 <__aeabi_d2uiz>
   ba246:	4604      	mov	r4, r0
   ba248:	f7ff fc5a 	bl	b9b00 <__aeabi_ui2d>
   ba24c:	4b07      	ldr	r3, [pc, #28]	; (ba26c <__aeabi_d2ulz+0x38>)
   ba24e:	2200      	movs	r2, #0
   ba250:	f7ff fcd0 	bl	b9bf4 <__aeabi_dmul>
   ba254:	4602      	mov	r2, r0
   ba256:	460b      	mov	r3, r1
   ba258:	4630      	mov	r0, r6
   ba25a:	4639      	mov	r1, r7
   ba25c:	f7ff fb12 	bl	b9884 <__aeabi_dsub>
   ba260:	f7ff ff78 	bl	ba154 <__aeabi_d2uiz>
   ba264:	4621      	mov	r1, r4
   ba266:	bdd0      	pop	{r4, r6, r7, pc}
   ba268:	3df00000 	.word	0x3df00000
   ba26c:	41f00000 	.word	0x41f00000

000ba270 <atexit>:
   ba270:	2300      	movs	r3, #0
   ba272:	4601      	mov	r1, r0
   ba274:	461a      	mov	r2, r3
   ba276:	4618      	mov	r0, r3
   ba278:	f000 bf94 	b.w	bb1a4 <__register_exitproc>

000ba27c <atof>:
   ba27c:	2100      	movs	r1, #0
   ba27e:	f000 bef9 	b.w	bb074 <strtod>

000ba282 <atoi>:
   ba282:	220a      	movs	r2, #10
   ba284:	2100      	movs	r1, #0
   ba286:	f000 bf83 	b.w	bb190 <strtol>

000ba28a <atol>:
   ba28a:	220a      	movs	r2, #10
   ba28c:	2100      	movs	r1, #0
   ba28e:	f000 bf7f 	b.w	bb190 <strtol>

000ba292 <memcmp>:
   ba292:	b510      	push	{r4, lr}
   ba294:	3901      	subs	r1, #1
   ba296:	4402      	add	r2, r0
   ba298:	4290      	cmp	r0, r2
   ba29a:	d101      	bne.n	ba2a0 <memcmp+0xe>
   ba29c:	2000      	movs	r0, #0
   ba29e:	e005      	b.n	ba2ac <memcmp+0x1a>
   ba2a0:	7803      	ldrb	r3, [r0, #0]
   ba2a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   ba2a6:	42a3      	cmp	r3, r4
   ba2a8:	d001      	beq.n	ba2ae <memcmp+0x1c>
   ba2aa:	1b18      	subs	r0, r3, r4
   ba2ac:	bd10      	pop	{r4, pc}
   ba2ae:	3001      	adds	r0, #1
   ba2b0:	e7f2      	b.n	ba298 <memcmp+0x6>

000ba2b2 <memcpy>:
   ba2b2:	440a      	add	r2, r1
   ba2b4:	4291      	cmp	r1, r2
   ba2b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   ba2ba:	d100      	bne.n	ba2be <memcpy+0xc>
   ba2bc:	4770      	bx	lr
   ba2be:	b510      	push	{r4, lr}
   ba2c0:	f811 4b01 	ldrb.w	r4, [r1], #1
   ba2c4:	f803 4f01 	strb.w	r4, [r3, #1]!
   ba2c8:	4291      	cmp	r1, r2
   ba2ca:	d1f9      	bne.n	ba2c0 <memcpy+0xe>
   ba2cc:	bd10      	pop	{r4, pc}

000ba2ce <memmove>:
   ba2ce:	4288      	cmp	r0, r1
   ba2d0:	b510      	push	{r4, lr}
   ba2d2:	eb01 0402 	add.w	r4, r1, r2
   ba2d6:	d902      	bls.n	ba2de <memmove+0x10>
   ba2d8:	4284      	cmp	r4, r0
   ba2da:	4623      	mov	r3, r4
   ba2dc:	d807      	bhi.n	ba2ee <memmove+0x20>
   ba2de:	1e43      	subs	r3, r0, #1
   ba2e0:	42a1      	cmp	r1, r4
   ba2e2:	d008      	beq.n	ba2f6 <memmove+0x28>
   ba2e4:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba2e8:	f803 2f01 	strb.w	r2, [r3, #1]!
   ba2ec:	e7f8      	b.n	ba2e0 <memmove+0x12>
   ba2ee:	4402      	add	r2, r0
   ba2f0:	4601      	mov	r1, r0
   ba2f2:	428a      	cmp	r2, r1
   ba2f4:	d100      	bne.n	ba2f8 <memmove+0x2a>
   ba2f6:	bd10      	pop	{r4, pc}
   ba2f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   ba2fc:	f802 4d01 	strb.w	r4, [r2, #-1]!
   ba300:	e7f7      	b.n	ba2f2 <memmove+0x24>

000ba302 <memset>:
   ba302:	4402      	add	r2, r0
   ba304:	4603      	mov	r3, r0
   ba306:	4293      	cmp	r3, r2
   ba308:	d100      	bne.n	ba30c <memset+0xa>
   ba30a:	4770      	bx	lr
   ba30c:	f803 1b01 	strb.w	r1, [r3], #1
   ba310:	e7f9      	b.n	ba306 <memset+0x4>
	...

000ba314 <srand>:
   ba314:	b538      	push	{r3, r4, r5, lr}
   ba316:	4b10      	ldr	r3, [pc, #64]	; (ba358 <srand+0x44>)
   ba318:	681d      	ldr	r5, [r3, #0]
   ba31a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba31c:	4604      	mov	r4, r0
   ba31e:	b9b3      	cbnz	r3, ba34e <srand+0x3a>
   ba320:	2018      	movs	r0, #24
   ba322:	f7fc fbbd 	bl	b6aa0 <malloc>
   ba326:	4602      	mov	r2, r0
   ba328:	63a8      	str	r0, [r5, #56]	; 0x38
   ba32a:	b920      	cbnz	r0, ba336 <srand+0x22>
   ba32c:	4b0b      	ldr	r3, [pc, #44]	; (ba35c <srand+0x48>)
   ba32e:	480c      	ldr	r0, [pc, #48]	; (ba360 <srand+0x4c>)
   ba330:	2142      	movs	r1, #66	; 0x42
   ba332:	f7fc fbed 	bl	b6b10 <__assert_func>
   ba336:	490b      	ldr	r1, [pc, #44]	; (ba364 <srand+0x50>)
   ba338:	4b0b      	ldr	r3, [pc, #44]	; (ba368 <srand+0x54>)
   ba33a:	e9c0 1300 	strd	r1, r3, [r0]
   ba33e:	4b0b      	ldr	r3, [pc, #44]	; (ba36c <srand+0x58>)
   ba340:	6083      	str	r3, [r0, #8]
   ba342:	230b      	movs	r3, #11
   ba344:	8183      	strh	r3, [r0, #12]
   ba346:	2100      	movs	r1, #0
   ba348:	2001      	movs	r0, #1
   ba34a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   ba34e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba350:	2200      	movs	r2, #0
   ba352:	611c      	str	r4, [r3, #16]
   ba354:	615a      	str	r2, [r3, #20]
   ba356:	bd38      	pop	{r3, r4, r5, pc}
   ba358:	20035560 	.word	0x20035560
   ba35c:	000bcc79 	.word	0x000bcc79
   ba360:	000bcc90 	.word	0x000bcc90
   ba364:	abcd330e 	.word	0xabcd330e
   ba368:	e66d1234 	.word	0xe66d1234
   ba36c:	0005deec 	.word	0x0005deec

000ba370 <strcat>:
   ba370:	b510      	push	{r4, lr}
   ba372:	4602      	mov	r2, r0
   ba374:	7814      	ldrb	r4, [r2, #0]
   ba376:	4613      	mov	r3, r2
   ba378:	3201      	adds	r2, #1
   ba37a:	2c00      	cmp	r4, #0
   ba37c:	d1fa      	bne.n	ba374 <strcat+0x4>
   ba37e:	3b01      	subs	r3, #1
   ba380:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba384:	f803 2f01 	strb.w	r2, [r3, #1]!
   ba388:	2a00      	cmp	r2, #0
   ba38a:	d1f9      	bne.n	ba380 <strcat+0x10>
   ba38c:	bd10      	pop	{r4, pc}

000ba38e <strcmp>:
   ba38e:	f810 2b01 	ldrb.w	r2, [r0], #1
   ba392:	f811 3b01 	ldrb.w	r3, [r1], #1
   ba396:	2a01      	cmp	r2, #1
   ba398:	bf28      	it	cs
   ba39a:	429a      	cmpcs	r2, r3
   ba39c:	d0f7      	beq.n	ba38e <strcmp>
   ba39e:	1ad0      	subs	r0, r2, r3
   ba3a0:	4770      	bx	lr

000ba3a2 <strcpy>:
   ba3a2:	4603      	mov	r3, r0
   ba3a4:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba3a8:	f803 2b01 	strb.w	r2, [r3], #1
   ba3ac:	2a00      	cmp	r2, #0
   ba3ae:	d1f9      	bne.n	ba3a4 <strcpy+0x2>
   ba3b0:	4770      	bx	lr

000ba3b2 <strlen>:
   ba3b2:	4603      	mov	r3, r0
   ba3b4:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba3b8:	2a00      	cmp	r2, #0
   ba3ba:	d1fb      	bne.n	ba3b4 <strlen+0x2>
   ba3bc:	1a18      	subs	r0, r3, r0
   ba3be:	3801      	subs	r0, #1
   ba3c0:	4770      	bx	lr

000ba3c2 <strncmp>:
   ba3c2:	b510      	push	{r4, lr}
   ba3c4:	b17a      	cbz	r2, ba3e6 <strncmp+0x24>
   ba3c6:	4603      	mov	r3, r0
   ba3c8:	3901      	subs	r1, #1
   ba3ca:	1884      	adds	r4, r0, r2
   ba3cc:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba3d0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   ba3d4:	4290      	cmp	r0, r2
   ba3d6:	d101      	bne.n	ba3dc <strncmp+0x1a>
   ba3d8:	42a3      	cmp	r3, r4
   ba3da:	d101      	bne.n	ba3e0 <strncmp+0x1e>
   ba3dc:	1a80      	subs	r0, r0, r2
   ba3de:	bd10      	pop	{r4, pc}
   ba3e0:	2800      	cmp	r0, #0
   ba3e2:	d1f3      	bne.n	ba3cc <strncmp+0xa>
   ba3e4:	e7fa      	b.n	ba3dc <strncmp+0x1a>
   ba3e6:	4610      	mov	r0, r2
   ba3e8:	e7f9      	b.n	ba3de <strncmp+0x1c>

000ba3ea <strnlen>:
   ba3ea:	b510      	push	{r4, lr}
   ba3ec:	4602      	mov	r2, r0
   ba3ee:	4401      	add	r1, r0
   ba3f0:	428a      	cmp	r2, r1
   ba3f2:	4613      	mov	r3, r2
   ba3f4:	d003      	beq.n	ba3fe <strnlen+0x14>
   ba3f6:	781c      	ldrb	r4, [r3, #0]
   ba3f8:	3201      	adds	r2, #1
   ba3fa:	2c00      	cmp	r4, #0
   ba3fc:	d1f8      	bne.n	ba3f0 <strnlen+0x6>
   ba3fe:	1a18      	subs	r0, r3, r0
   ba400:	bd10      	pop	{r4, pc}

000ba402 <strstr>:
   ba402:	780a      	ldrb	r2, [r1, #0]
   ba404:	b570      	push	{r4, r5, r6, lr}
   ba406:	b96a      	cbnz	r2, ba424 <strstr+0x22>
   ba408:	bd70      	pop	{r4, r5, r6, pc}
   ba40a:	429a      	cmp	r2, r3
   ba40c:	d109      	bne.n	ba422 <strstr+0x20>
   ba40e:	460c      	mov	r4, r1
   ba410:	4605      	mov	r5, r0
   ba412:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   ba416:	2b00      	cmp	r3, #0
   ba418:	d0f6      	beq.n	ba408 <strstr+0x6>
   ba41a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   ba41e:	429e      	cmp	r6, r3
   ba420:	d0f7      	beq.n	ba412 <strstr+0x10>
   ba422:	3001      	adds	r0, #1
   ba424:	7803      	ldrb	r3, [r0, #0]
   ba426:	2b00      	cmp	r3, #0
   ba428:	d1ef      	bne.n	ba40a <strstr+0x8>
   ba42a:	4618      	mov	r0, r3
   ba42c:	e7ec      	b.n	ba408 <strstr+0x6>

000ba42e <sulp>:
   ba42e:	b570      	push	{r4, r5, r6, lr}
   ba430:	4604      	mov	r4, r0
   ba432:	460d      	mov	r5, r1
   ba434:	ec45 4b10 	vmov	d0, r4, r5
   ba438:	4616      	mov	r6, r2
   ba43a:	f001 fe0d 	bl	bc058 <__ulp>
   ba43e:	ec51 0b10 	vmov	r0, r1, d0
   ba442:	b17e      	cbz	r6, ba464 <sulp+0x36>
   ba444:	f3c5 530a 	ubfx	r3, r5, #20, #11
   ba448:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   ba44c:	2b00      	cmp	r3, #0
   ba44e:	dd09      	ble.n	ba464 <sulp+0x36>
   ba450:	051b      	lsls	r3, r3, #20
   ba452:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   ba456:	2400      	movs	r4, #0
   ba458:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   ba45c:	4622      	mov	r2, r4
   ba45e:	462b      	mov	r3, r5
   ba460:	f7ff fbc8 	bl	b9bf4 <__aeabi_dmul>
   ba464:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba468 <_strtod_l>:
   ba468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba46c:	ed2d 8b02 	vpush	{d8}
   ba470:	b09d      	sub	sp, #116	; 0x74
   ba472:	461f      	mov	r7, r3
   ba474:	2300      	movs	r3, #0
   ba476:	9318      	str	r3, [sp, #96]	; 0x60
   ba478:	4ba2      	ldr	r3, [pc, #648]	; (ba704 <_strtod_l+0x29c>)
   ba47a:	9213      	str	r2, [sp, #76]	; 0x4c
   ba47c:	681b      	ldr	r3, [r3, #0]
   ba47e:	9305      	str	r3, [sp, #20]
   ba480:	4604      	mov	r4, r0
   ba482:	4618      	mov	r0, r3
   ba484:	4688      	mov	r8, r1
   ba486:	f7ff ff94 	bl	ba3b2 <strlen>
   ba48a:	f04f 0a00 	mov.w	sl, #0
   ba48e:	4605      	mov	r5, r0
   ba490:	f04f 0b00 	mov.w	fp, #0
   ba494:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba498:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba49a:	781a      	ldrb	r2, [r3, #0]
   ba49c:	2a2b      	cmp	r2, #43	; 0x2b
   ba49e:	d04e      	beq.n	ba53e <_strtod_l+0xd6>
   ba4a0:	d83b      	bhi.n	ba51a <_strtod_l+0xb2>
   ba4a2:	2a0d      	cmp	r2, #13
   ba4a4:	d834      	bhi.n	ba510 <_strtod_l+0xa8>
   ba4a6:	2a08      	cmp	r2, #8
   ba4a8:	d834      	bhi.n	ba514 <_strtod_l+0xac>
   ba4aa:	2a00      	cmp	r2, #0
   ba4ac:	d03e      	beq.n	ba52c <_strtod_l+0xc4>
   ba4ae:	2300      	movs	r3, #0
   ba4b0:	930a      	str	r3, [sp, #40]	; 0x28
   ba4b2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   ba4b4:	7833      	ldrb	r3, [r6, #0]
   ba4b6:	2b30      	cmp	r3, #48	; 0x30
   ba4b8:	f040 80b0 	bne.w	ba61c <_strtod_l+0x1b4>
   ba4bc:	7873      	ldrb	r3, [r6, #1]
   ba4be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   ba4c2:	2b58      	cmp	r3, #88	; 0x58
   ba4c4:	d168      	bne.n	ba598 <_strtod_l+0x130>
   ba4c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba4c8:	9301      	str	r3, [sp, #4]
   ba4ca:	ab18      	add	r3, sp, #96	; 0x60
   ba4cc:	9702      	str	r7, [sp, #8]
   ba4ce:	9300      	str	r3, [sp, #0]
   ba4d0:	4a8d      	ldr	r2, [pc, #564]	; (ba708 <_strtod_l+0x2a0>)
   ba4d2:	ab19      	add	r3, sp, #100	; 0x64
   ba4d4:	a917      	add	r1, sp, #92	; 0x5c
   ba4d6:	4620      	mov	r0, r4
   ba4d8:	f000 ff2e 	bl	bb338 <__gethex>
   ba4dc:	f010 0707 	ands.w	r7, r0, #7
   ba4e0:	4605      	mov	r5, r0
   ba4e2:	d005      	beq.n	ba4f0 <_strtod_l+0x88>
   ba4e4:	2f06      	cmp	r7, #6
   ba4e6:	d12c      	bne.n	ba542 <_strtod_l+0xda>
   ba4e8:	3601      	adds	r6, #1
   ba4ea:	2300      	movs	r3, #0
   ba4ec:	9617      	str	r6, [sp, #92]	; 0x5c
   ba4ee:	930a      	str	r3, [sp, #40]	; 0x28
   ba4f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ba4f2:	2b00      	cmp	r3, #0
   ba4f4:	f040 8590 	bne.w	bb018 <_strtod_l+0xbb0>
   ba4f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba4fa:	b1eb      	cbz	r3, ba538 <_strtod_l+0xd0>
   ba4fc:	4652      	mov	r2, sl
   ba4fe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   ba502:	ec43 2b10 	vmov	d0, r2, r3
   ba506:	b01d      	add	sp, #116	; 0x74
   ba508:	ecbd 8b02 	vpop	{d8}
   ba50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba510:	2a20      	cmp	r2, #32
   ba512:	d1cc      	bne.n	ba4ae <_strtod_l+0x46>
   ba514:	3301      	adds	r3, #1
   ba516:	9317      	str	r3, [sp, #92]	; 0x5c
   ba518:	e7be      	b.n	ba498 <_strtod_l+0x30>
   ba51a:	2a2d      	cmp	r2, #45	; 0x2d
   ba51c:	d1c7      	bne.n	ba4ae <_strtod_l+0x46>
   ba51e:	2201      	movs	r2, #1
   ba520:	920a      	str	r2, [sp, #40]	; 0x28
   ba522:	1c5a      	adds	r2, r3, #1
   ba524:	9217      	str	r2, [sp, #92]	; 0x5c
   ba526:	785b      	ldrb	r3, [r3, #1]
   ba528:	2b00      	cmp	r3, #0
   ba52a:	d1c2      	bne.n	ba4b2 <_strtod_l+0x4a>
   ba52c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ba52e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba532:	2b00      	cmp	r3, #0
   ba534:	f040 856e 	bne.w	bb014 <_strtod_l+0xbac>
   ba538:	4652      	mov	r2, sl
   ba53a:	465b      	mov	r3, fp
   ba53c:	e7e1      	b.n	ba502 <_strtod_l+0x9a>
   ba53e:	2200      	movs	r2, #0
   ba540:	e7ee      	b.n	ba520 <_strtod_l+0xb8>
   ba542:	9a18      	ldr	r2, [sp, #96]	; 0x60
   ba544:	b13a      	cbz	r2, ba556 <_strtod_l+0xee>
   ba546:	2135      	movs	r1, #53	; 0x35
   ba548:	a81a      	add	r0, sp, #104	; 0x68
   ba54a:	f001 fe90 	bl	bc26e <__copybits>
   ba54e:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba550:	4620      	mov	r0, r4
   ba552:	f001 fa4f 	bl	bb9f4 <_Bfree>
   ba556:	3f01      	subs	r7, #1
   ba558:	2f04      	cmp	r7, #4
   ba55a:	d806      	bhi.n	ba56a <_strtod_l+0x102>
   ba55c:	e8df f007 	tbb	[pc, r7]
   ba560:	1714030a 	.word	0x1714030a
   ba564:	0a          	.byte	0x0a
   ba565:	00          	.byte	0x00
   ba566:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   ba56a:	0728      	lsls	r0, r5, #28
   ba56c:	d5c0      	bpl.n	ba4f0 <_strtod_l+0x88>
   ba56e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   ba572:	e7bd      	b.n	ba4f0 <_strtod_l+0x88>
   ba574:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   ba578:	9a19      	ldr	r2, [sp, #100]	; 0x64
   ba57a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   ba57e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   ba582:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   ba586:	e7f0      	b.n	ba56a <_strtod_l+0x102>
   ba588:	f8df b180 	ldr.w	fp, [pc, #384]	; ba70c <_strtod_l+0x2a4>
   ba58c:	e7ed      	b.n	ba56a <_strtod_l+0x102>
   ba58e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   ba592:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   ba596:	e7e8      	b.n	ba56a <_strtod_l+0x102>
   ba598:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba59a:	1c5a      	adds	r2, r3, #1
   ba59c:	9217      	str	r2, [sp, #92]	; 0x5c
   ba59e:	785b      	ldrb	r3, [r3, #1]
   ba5a0:	2b30      	cmp	r3, #48	; 0x30
   ba5a2:	d0f9      	beq.n	ba598 <_strtod_l+0x130>
   ba5a4:	2b00      	cmp	r3, #0
   ba5a6:	d0a3      	beq.n	ba4f0 <_strtod_l+0x88>
   ba5a8:	2301      	movs	r3, #1
   ba5aa:	f04f 0900 	mov.w	r9, #0
   ba5ae:	9304      	str	r3, [sp, #16]
   ba5b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba5b2:	9308      	str	r3, [sp, #32]
   ba5b4:	f8cd 901c 	str.w	r9, [sp, #28]
   ba5b8:	464f      	mov	r7, r9
   ba5ba:	220a      	movs	r2, #10
   ba5bc:	9817      	ldr	r0, [sp, #92]	; 0x5c
   ba5be:	7806      	ldrb	r6, [r0, #0]
   ba5c0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   ba5c4:	b2d9      	uxtb	r1, r3
   ba5c6:	2909      	cmp	r1, #9
   ba5c8:	d92a      	bls.n	ba620 <_strtod_l+0x1b8>
   ba5ca:	9905      	ldr	r1, [sp, #20]
   ba5cc:	462a      	mov	r2, r5
   ba5ce:	f7ff fef8 	bl	ba3c2 <strncmp>
   ba5d2:	b398      	cbz	r0, ba63c <_strtod_l+0x1d4>
   ba5d4:	2000      	movs	r0, #0
   ba5d6:	4632      	mov	r2, r6
   ba5d8:	463d      	mov	r5, r7
   ba5da:	9005      	str	r0, [sp, #20]
   ba5dc:	4603      	mov	r3, r0
   ba5de:	2a65      	cmp	r2, #101	; 0x65
   ba5e0:	d001      	beq.n	ba5e6 <_strtod_l+0x17e>
   ba5e2:	2a45      	cmp	r2, #69	; 0x45
   ba5e4:	d118      	bne.n	ba618 <_strtod_l+0x1b0>
   ba5e6:	b91d      	cbnz	r5, ba5f0 <_strtod_l+0x188>
   ba5e8:	9a04      	ldr	r2, [sp, #16]
   ba5ea:	4302      	orrs	r2, r0
   ba5ec:	d09e      	beq.n	ba52c <_strtod_l+0xc4>
   ba5ee:	2500      	movs	r5, #0
   ba5f0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   ba5f4:	f108 0201 	add.w	r2, r8, #1
   ba5f8:	9217      	str	r2, [sp, #92]	; 0x5c
   ba5fa:	f898 2001 	ldrb.w	r2, [r8, #1]
   ba5fe:	2a2b      	cmp	r2, #43	; 0x2b
   ba600:	d075      	beq.n	ba6ee <_strtod_l+0x286>
   ba602:	2a2d      	cmp	r2, #45	; 0x2d
   ba604:	d07b      	beq.n	ba6fe <_strtod_l+0x296>
   ba606:	f04f 0c00 	mov.w	ip, #0
   ba60a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   ba60e:	2909      	cmp	r1, #9
   ba610:	f240 8082 	bls.w	ba718 <_strtod_l+0x2b0>
   ba614:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba618:	2600      	movs	r6, #0
   ba61a:	e09d      	b.n	ba758 <_strtod_l+0x2f0>
   ba61c:	2300      	movs	r3, #0
   ba61e:	e7c4      	b.n	ba5aa <_strtod_l+0x142>
   ba620:	2f08      	cmp	r7, #8
   ba622:	bfd8      	it	le
   ba624:	9907      	ldrle	r1, [sp, #28]
   ba626:	f100 0001 	add.w	r0, r0, #1
   ba62a:	bfda      	itte	le
   ba62c:	fb02 3301 	mlale	r3, r2, r1, r3
   ba630:	9307      	strle	r3, [sp, #28]
   ba632:	fb02 3909 	mlagt	r9, r2, r9, r3
   ba636:	3701      	adds	r7, #1
   ba638:	9017      	str	r0, [sp, #92]	; 0x5c
   ba63a:	e7bf      	b.n	ba5bc <_strtod_l+0x154>
   ba63c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba63e:	195a      	adds	r2, r3, r5
   ba640:	9217      	str	r2, [sp, #92]	; 0x5c
   ba642:	5d5a      	ldrb	r2, [r3, r5]
   ba644:	2f00      	cmp	r7, #0
   ba646:	d037      	beq.n	ba6b8 <_strtod_l+0x250>
   ba648:	9005      	str	r0, [sp, #20]
   ba64a:	463d      	mov	r5, r7
   ba64c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   ba650:	2b09      	cmp	r3, #9
   ba652:	d912      	bls.n	ba67a <_strtod_l+0x212>
   ba654:	2301      	movs	r3, #1
   ba656:	e7c2      	b.n	ba5de <_strtod_l+0x176>
   ba658:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba65a:	1c5a      	adds	r2, r3, #1
   ba65c:	9217      	str	r2, [sp, #92]	; 0x5c
   ba65e:	785a      	ldrb	r2, [r3, #1]
   ba660:	3001      	adds	r0, #1
   ba662:	2a30      	cmp	r2, #48	; 0x30
   ba664:	d0f8      	beq.n	ba658 <_strtod_l+0x1f0>
   ba666:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   ba66a:	2b08      	cmp	r3, #8
   ba66c:	f200 84d9 	bhi.w	bb022 <_strtod_l+0xbba>
   ba670:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba672:	9005      	str	r0, [sp, #20]
   ba674:	2000      	movs	r0, #0
   ba676:	9308      	str	r3, [sp, #32]
   ba678:	4605      	mov	r5, r0
   ba67a:	3a30      	subs	r2, #48	; 0x30
   ba67c:	f100 0301 	add.w	r3, r0, #1
   ba680:	d014      	beq.n	ba6ac <_strtod_l+0x244>
   ba682:	9905      	ldr	r1, [sp, #20]
   ba684:	4419      	add	r1, r3
   ba686:	9105      	str	r1, [sp, #20]
   ba688:	462b      	mov	r3, r5
   ba68a:	eb00 0e05 	add.w	lr, r0, r5
   ba68e:	210a      	movs	r1, #10
   ba690:	4573      	cmp	r3, lr
   ba692:	d113      	bne.n	ba6bc <_strtod_l+0x254>
   ba694:	182b      	adds	r3, r5, r0
   ba696:	2b08      	cmp	r3, #8
   ba698:	f105 0501 	add.w	r5, r5, #1
   ba69c:	4405      	add	r5, r0
   ba69e:	dc1c      	bgt.n	ba6da <_strtod_l+0x272>
   ba6a0:	9907      	ldr	r1, [sp, #28]
   ba6a2:	230a      	movs	r3, #10
   ba6a4:	fb03 2301 	mla	r3, r3, r1, r2
   ba6a8:	9307      	str	r3, [sp, #28]
   ba6aa:	2300      	movs	r3, #0
   ba6ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba6ae:	1c51      	adds	r1, r2, #1
   ba6b0:	9117      	str	r1, [sp, #92]	; 0x5c
   ba6b2:	7852      	ldrb	r2, [r2, #1]
   ba6b4:	4618      	mov	r0, r3
   ba6b6:	e7c9      	b.n	ba64c <_strtod_l+0x1e4>
   ba6b8:	4638      	mov	r0, r7
   ba6ba:	e7d2      	b.n	ba662 <_strtod_l+0x1fa>
   ba6bc:	2b08      	cmp	r3, #8
   ba6be:	dc04      	bgt.n	ba6ca <_strtod_l+0x262>
   ba6c0:	9e07      	ldr	r6, [sp, #28]
   ba6c2:	434e      	muls	r6, r1
   ba6c4:	9607      	str	r6, [sp, #28]
   ba6c6:	3301      	adds	r3, #1
   ba6c8:	e7e2      	b.n	ba690 <_strtod_l+0x228>
   ba6ca:	f103 0c01 	add.w	ip, r3, #1
   ba6ce:	f1bc 0f10 	cmp.w	ip, #16
   ba6d2:	bfd8      	it	le
   ba6d4:	fb01 f909 	mulle.w	r9, r1, r9
   ba6d8:	e7f5      	b.n	ba6c6 <_strtod_l+0x25e>
   ba6da:	2d10      	cmp	r5, #16
   ba6dc:	bfdc      	itt	le
   ba6de:	230a      	movle	r3, #10
   ba6e0:	fb03 2909 	mlale	r9, r3, r9, r2
   ba6e4:	e7e1      	b.n	ba6aa <_strtod_l+0x242>
   ba6e6:	2300      	movs	r3, #0
   ba6e8:	9305      	str	r3, [sp, #20]
   ba6ea:	2301      	movs	r3, #1
   ba6ec:	e77c      	b.n	ba5e8 <_strtod_l+0x180>
   ba6ee:	f04f 0c00 	mov.w	ip, #0
   ba6f2:	f108 0202 	add.w	r2, r8, #2
   ba6f6:	9217      	str	r2, [sp, #92]	; 0x5c
   ba6f8:	f898 2002 	ldrb.w	r2, [r8, #2]
   ba6fc:	e785      	b.n	ba60a <_strtod_l+0x1a2>
   ba6fe:	f04f 0c01 	mov.w	ip, #1
   ba702:	e7f6      	b.n	ba6f2 <_strtod_l+0x28a>
   ba704:	000bcebc 	.word	0x000bcebc
   ba708:	000bccf8 	.word	0x000bccf8
   ba70c:	7ff00000 	.word	0x7ff00000
   ba710:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba712:	1c51      	adds	r1, r2, #1
   ba714:	9117      	str	r1, [sp, #92]	; 0x5c
   ba716:	7852      	ldrb	r2, [r2, #1]
   ba718:	2a30      	cmp	r2, #48	; 0x30
   ba71a:	d0f9      	beq.n	ba710 <_strtod_l+0x2a8>
   ba71c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   ba720:	2908      	cmp	r1, #8
   ba722:	f63f af79 	bhi.w	ba618 <_strtod_l+0x1b0>
   ba726:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   ba72a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba72c:	9206      	str	r2, [sp, #24]
   ba72e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba730:	1c51      	adds	r1, r2, #1
   ba732:	9117      	str	r1, [sp, #92]	; 0x5c
   ba734:	7852      	ldrb	r2, [r2, #1]
   ba736:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   ba73a:	2e09      	cmp	r6, #9
   ba73c:	d937      	bls.n	ba7ae <_strtod_l+0x346>
   ba73e:	9e06      	ldr	r6, [sp, #24]
   ba740:	1b89      	subs	r1, r1, r6
   ba742:	2908      	cmp	r1, #8
   ba744:	f644 661f 	movw	r6, #19999	; 0x4e1f
   ba748:	dc02      	bgt.n	ba750 <_strtod_l+0x2e8>
   ba74a:	4576      	cmp	r6, lr
   ba74c:	bfa8      	it	ge
   ba74e:	4676      	movge	r6, lr
   ba750:	f1bc 0f00 	cmp.w	ip, #0
   ba754:	d000      	beq.n	ba758 <_strtod_l+0x2f0>
   ba756:	4276      	negs	r6, r6
   ba758:	2d00      	cmp	r5, #0
   ba75a:	d14d      	bne.n	ba7f8 <_strtod_l+0x390>
   ba75c:	9904      	ldr	r1, [sp, #16]
   ba75e:	4301      	orrs	r1, r0
   ba760:	f47f aec6 	bne.w	ba4f0 <_strtod_l+0x88>
   ba764:	2b00      	cmp	r3, #0
   ba766:	f47f aee1 	bne.w	ba52c <_strtod_l+0xc4>
   ba76a:	2a69      	cmp	r2, #105	; 0x69
   ba76c:	d027      	beq.n	ba7be <_strtod_l+0x356>
   ba76e:	dc24      	bgt.n	ba7ba <_strtod_l+0x352>
   ba770:	2a49      	cmp	r2, #73	; 0x49
   ba772:	d024      	beq.n	ba7be <_strtod_l+0x356>
   ba774:	2a4e      	cmp	r2, #78	; 0x4e
   ba776:	f47f aed9 	bne.w	ba52c <_strtod_l+0xc4>
   ba77a:	499f      	ldr	r1, [pc, #636]	; (ba9f8 <_strtod_l+0x590>)
   ba77c:	a817      	add	r0, sp, #92	; 0x5c
   ba77e:	f001 f833 	bl	bb7e8 <__match>
   ba782:	2800      	cmp	r0, #0
   ba784:	f43f aed2 	beq.w	ba52c <_strtod_l+0xc4>
   ba788:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba78a:	781b      	ldrb	r3, [r3, #0]
   ba78c:	2b28      	cmp	r3, #40	; 0x28
   ba78e:	d12d      	bne.n	ba7ec <_strtod_l+0x384>
   ba790:	499a      	ldr	r1, [pc, #616]	; (ba9fc <_strtod_l+0x594>)
   ba792:	aa1a      	add	r2, sp, #104	; 0x68
   ba794:	a817      	add	r0, sp, #92	; 0x5c
   ba796:	f001 f83b 	bl	bb810 <__hexnan>
   ba79a:	2805      	cmp	r0, #5
   ba79c:	d126      	bne.n	ba7ec <_strtod_l+0x384>
   ba79e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   ba7a0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   ba7a4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   ba7a8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   ba7ac:	e6a0      	b.n	ba4f0 <_strtod_l+0x88>
   ba7ae:	210a      	movs	r1, #10
   ba7b0:	fb01 2e0e 	mla	lr, r1, lr, r2
   ba7b4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   ba7b8:	e7b9      	b.n	ba72e <_strtod_l+0x2c6>
   ba7ba:	2a6e      	cmp	r2, #110	; 0x6e
   ba7bc:	e7db      	b.n	ba776 <_strtod_l+0x30e>
   ba7be:	4990      	ldr	r1, [pc, #576]	; (baa00 <_strtod_l+0x598>)
   ba7c0:	a817      	add	r0, sp, #92	; 0x5c
   ba7c2:	f001 f811 	bl	bb7e8 <__match>
   ba7c6:	2800      	cmp	r0, #0
   ba7c8:	f43f aeb0 	beq.w	ba52c <_strtod_l+0xc4>
   ba7cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba7ce:	498d      	ldr	r1, [pc, #564]	; (baa04 <_strtod_l+0x59c>)
   ba7d0:	3b01      	subs	r3, #1
   ba7d2:	a817      	add	r0, sp, #92	; 0x5c
   ba7d4:	9317      	str	r3, [sp, #92]	; 0x5c
   ba7d6:	f001 f807 	bl	bb7e8 <__match>
   ba7da:	b910      	cbnz	r0, ba7e2 <_strtod_l+0x37a>
   ba7dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba7de:	3301      	adds	r3, #1
   ba7e0:	9317      	str	r3, [sp, #92]	; 0x5c
   ba7e2:	f8df b230 	ldr.w	fp, [pc, #560]	; baa14 <_strtod_l+0x5ac>
   ba7e6:	f04f 0a00 	mov.w	sl, #0
   ba7ea:	e681      	b.n	ba4f0 <_strtod_l+0x88>
   ba7ec:	4886      	ldr	r0, [pc, #536]	; (baa08 <_strtod_l+0x5a0>)
   ba7ee:	f001 fd93 	bl	bc318 <nan>
   ba7f2:	ec5b ab10 	vmov	sl, fp, d0
   ba7f6:	e67b      	b.n	ba4f0 <_strtod_l+0x88>
   ba7f8:	9b05      	ldr	r3, [sp, #20]
   ba7fa:	9807      	ldr	r0, [sp, #28]
   ba7fc:	1af3      	subs	r3, r6, r3
   ba7fe:	2f00      	cmp	r7, #0
   ba800:	bf08      	it	eq
   ba802:	462f      	moveq	r7, r5
   ba804:	2d10      	cmp	r5, #16
   ba806:	9306      	str	r3, [sp, #24]
   ba808:	46a8      	mov	r8, r5
   ba80a:	bfa8      	it	ge
   ba80c:	f04f 0810 	movge.w	r8, #16
   ba810:	f7ff f976 	bl	b9b00 <__aeabi_ui2d>
   ba814:	2d09      	cmp	r5, #9
   ba816:	4682      	mov	sl, r0
   ba818:	468b      	mov	fp, r1
   ba81a:	dd13      	ble.n	ba844 <_strtod_l+0x3dc>
   ba81c:	4b7b      	ldr	r3, [pc, #492]	; (baa0c <_strtod_l+0x5a4>)
   ba81e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   ba822:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   ba826:	f7ff f9e5 	bl	b9bf4 <__aeabi_dmul>
   ba82a:	4682      	mov	sl, r0
   ba82c:	4648      	mov	r0, r9
   ba82e:	468b      	mov	fp, r1
   ba830:	f7ff f966 	bl	b9b00 <__aeabi_ui2d>
   ba834:	4602      	mov	r2, r0
   ba836:	460b      	mov	r3, r1
   ba838:	4650      	mov	r0, sl
   ba83a:	4659      	mov	r1, fp
   ba83c:	f7ff f824 	bl	b9888 <__adddf3>
   ba840:	4682      	mov	sl, r0
   ba842:	468b      	mov	fp, r1
   ba844:	2d0f      	cmp	r5, #15
   ba846:	dc38      	bgt.n	ba8ba <_strtod_l+0x452>
   ba848:	9b06      	ldr	r3, [sp, #24]
   ba84a:	2b00      	cmp	r3, #0
   ba84c:	f43f ae50 	beq.w	ba4f0 <_strtod_l+0x88>
   ba850:	dd24      	ble.n	ba89c <_strtod_l+0x434>
   ba852:	2b16      	cmp	r3, #22
   ba854:	dc0b      	bgt.n	ba86e <_strtod_l+0x406>
   ba856:	496d      	ldr	r1, [pc, #436]	; (baa0c <_strtod_l+0x5a4>)
   ba858:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   ba85c:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba860:	4652      	mov	r2, sl
   ba862:	465b      	mov	r3, fp
   ba864:	f7ff f9c6 	bl	b9bf4 <__aeabi_dmul>
   ba868:	4682      	mov	sl, r0
   ba86a:	468b      	mov	fp, r1
   ba86c:	e640      	b.n	ba4f0 <_strtod_l+0x88>
   ba86e:	9a06      	ldr	r2, [sp, #24]
   ba870:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   ba874:	4293      	cmp	r3, r2
   ba876:	db20      	blt.n	ba8ba <_strtod_l+0x452>
   ba878:	4c64      	ldr	r4, [pc, #400]	; (baa0c <_strtod_l+0x5a4>)
   ba87a:	f1c5 050f 	rsb	r5, r5, #15
   ba87e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   ba882:	4652      	mov	r2, sl
   ba884:	465b      	mov	r3, fp
   ba886:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba88a:	f7ff f9b3 	bl	b9bf4 <__aeabi_dmul>
   ba88e:	9b06      	ldr	r3, [sp, #24]
   ba890:	1b5d      	subs	r5, r3, r5
   ba892:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   ba896:	e9d4 2300 	ldrd	r2, r3, [r4]
   ba89a:	e7e3      	b.n	ba864 <_strtod_l+0x3fc>
   ba89c:	9b06      	ldr	r3, [sp, #24]
   ba89e:	3316      	adds	r3, #22
   ba8a0:	db0b      	blt.n	ba8ba <_strtod_l+0x452>
   ba8a2:	9b05      	ldr	r3, [sp, #20]
   ba8a4:	1b9e      	subs	r6, r3, r6
   ba8a6:	4b59      	ldr	r3, [pc, #356]	; (baa0c <_strtod_l+0x5a4>)
   ba8a8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   ba8ac:	e9d6 2300 	ldrd	r2, r3, [r6]
   ba8b0:	4650      	mov	r0, sl
   ba8b2:	4659      	mov	r1, fp
   ba8b4:	f7ff fac8 	bl	b9e48 <__aeabi_ddiv>
   ba8b8:	e7d6      	b.n	ba868 <_strtod_l+0x400>
   ba8ba:	9b06      	ldr	r3, [sp, #24]
   ba8bc:	eba5 0808 	sub.w	r8, r5, r8
   ba8c0:	4498      	add	r8, r3
   ba8c2:	f1b8 0f00 	cmp.w	r8, #0
   ba8c6:	dd74      	ble.n	ba9b2 <_strtod_l+0x54a>
   ba8c8:	f018 030f 	ands.w	r3, r8, #15
   ba8cc:	d00a      	beq.n	ba8e4 <_strtod_l+0x47c>
   ba8ce:	494f      	ldr	r1, [pc, #316]	; (baa0c <_strtod_l+0x5a4>)
   ba8d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   ba8d4:	4652      	mov	r2, sl
   ba8d6:	465b      	mov	r3, fp
   ba8d8:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba8dc:	f7ff f98a 	bl	b9bf4 <__aeabi_dmul>
   ba8e0:	4682      	mov	sl, r0
   ba8e2:	468b      	mov	fp, r1
   ba8e4:	f038 080f 	bics.w	r8, r8, #15
   ba8e8:	d04f      	beq.n	ba98a <_strtod_l+0x522>
   ba8ea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   ba8ee:	dd22      	ble.n	ba936 <_strtod_l+0x4ce>
   ba8f0:	2500      	movs	r5, #0
   ba8f2:	462e      	mov	r6, r5
   ba8f4:	9507      	str	r5, [sp, #28]
   ba8f6:	9505      	str	r5, [sp, #20]
   ba8f8:	2322      	movs	r3, #34	; 0x22
   ba8fa:	f8df b118 	ldr.w	fp, [pc, #280]	; baa14 <_strtod_l+0x5ac>
   ba8fe:	6023      	str	r3, [r4, #0]
   ba900:	f04f 0a00 	mov.w	sl, #0
   ba904:	9b07      	ldr	r3, [sp, #28]
   ba906:	2b00      	cmp	r3, #0
   ba908:	f43f adf2 	beq.w	ba4f0 <_strtod_l+0x88>
   ba90c:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba90e:	4620      	mov	r0, r4
   ba910:	f001 f870 	bl	bb9f4 <_Bfree>
   ba914:	9905      	ldr	r1, [sp, #20]
   ba916:	4620      	mov	r0, r4
   ba918:	f001 f86c 	bl	bb9f4 <_Bfree>
   ba91c:	4631      	mov	r1, r6
   ba91e:	4620      	mov	r0, r4
   ba920:	f001 f868 	bl	bb9f4 <_Bfree>
   ba924:	9907      	ldr	r1, [sp, #28]
   ba926:	4620      	mov	r0, r4
   ba928:	f001 f864 	bl	bb9f4 <_Bfree>
   ba92c:	4629      	mov	r1, r5
   ba92e:	4620      	mov	r0, r4
   ba930:	f001 f860 	bl	bb9f4 <_Bfree>
   ba934:	e5dc      	b.n	ba4f0 <_strtod_l+0x88>
   ba936:	4b36      	ldr	r3, [pc, #216]	; (baa10 <_strtod_l+0x5a8>)
   ba938:	9304      	str	r3, [sp, #16]
   ba93a:	2300      	movs	r3, #0
   ba93c:	ea4f 1828 	mov.w	r8, r8, asr #4
   ba940:	4650      	mov	r0, sl
   ba942:	4659      	mov	r1, fp
   ba944:	4699      	mov	r9, r3
   ba946:	f1b8 0f01 	cmp.w	r8, #1
   ba94a:	dc21      	bgt.n	ba990 <_strtod_l+0x528>
   ba94c:	b10b      	cbz	r3, ba952 <_strtod_l+0x4ea>
   ba94e:	4682      	mov	sl, r0
   ba950:	468b      	mov	fp, r1
   ba952:	4b2f      	ldr	r3, [pc, #188]	; (baa10 <_strtod_l+0x5a8>)
   ba954:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   ba958:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   ba95c:	4652      	mov	r2, sl
   ba95e:	465b      	mov	r3, fp
   ba960:	e9d9 0100 	ldrd	r0, r1, [r9]
   ba964:	f7ff f946 	bl	b9bf4 <__aeabi_dmul>
   ba968:	4b2a      	ldr	r3, [pc, #168]	; (baa14 <_strtod_l+0x5ac>)
   ba96a:	460a      	mov	r2, r1
   ba96c:	400b      	ands	r3, r1
   ba96e:	492a      	ldr	r1, [pc, #168]	; (baa18 <_strtod_l+0x5b0>)
   ba970:	428b      	cmp	r3, r1
   ba972:	4682      	mov	sl, r0
   ba974:	d8bc      	bhi.n	ba8f0 <_strtod_l+0x488>
   ba976:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   ba97a:	428b      	cmp	r3, r1
   ba97c:	bf86      	itte	hi
   ba97e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; baa1c <_strtod_l+0x5b4>
   ba982:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   ba986:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   ba98a:	2300      	movs	r3, #0
   ba98c:	9304      	str	r3, [sp, #16]
   ba98e:	e084      	b.n	baa9a <_strtod_l+0x632>
   ba990:	f018 0f01 	tst.w	r8, #1
   ba994:	d005      	beq.n	ba9a2 <_strtod_l+0x53a>
   ba996:	9b04      	ldr	r3, [sp, #16]
   ba998:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba99c:	f7ff f92a 	bl	b9bf4 <__aeabi_dmul>
   ba9a0:	2301      	movs	r3, #1
   ba9a2:	9a04      	ldr	r2, [sp, #16]
   ba9a4:	3208      	adds	r2, #8
   ba9a6:	f109 0901 	add.w	r9, r9, #1
   ba9aa:	ea4f 0868 	mov.w	r8, r8, asr #1
   ba9ae:	9204      	str	r2, [sp, #16]
   ba9b0:	e7c9      	b.n	ba946 <_strtod_l+0x4de>
   ba9b2:	d0ea      	beq.n	ba98a <_strtod_l+0x522>
   ba9b4:	f1c8 0800 	rsb	r8, r8, #0
   ba9b8:	f018 020f 	ands.w	r2, r8, #15
   ba9bc:	d00a      	beq.n	ba9d4 <_strtod_l+0x56c>
   ba9be:	4b13      	ldr	r3, [pc, #76]	; (baa0c <_strtod_l+0x5a4>)
   ba9c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   ba9c4:	4650      	mov	r0, sl
   ba9c6:	4659      	mov	r1, fp
   ba9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba9cc:	f7ff fa3c 	bl	b9e48 <__aeabi_ddiv>
   ba9d0:	4682      	mov	sl, r0
   ba9d2:	468b      	mov	fp, r1
   ba9d4:	ea5f 1828 	movs.w	r8, r8, asr #4
   ba9d8:	d0d7      	beq.n	ba98a <_strtod_l+0x522>
   ba9da:	f1b8 0f1f 	cmp.w	r8, #31
   ba9de:	dd1f      	ble.n	baa20 <_strtod_l+0x5b8>
   ba9e0:	2500      	movs	r5, #0
   ba9e2:	462e      	mov	r6, r5
   ba9e4:	9507      	str	r5, [sp, #28]
   ba9e6:	9505      	str	r5, [sp, #20]
   ba9e8:	2322      	movs	r3, #34	; 0x22
   ba9ea:	f04f 0a00 	mov.w	sl, #0
   ba9ee:	f04f 0b00 	mov.w	fp, #0
   ba9f2:	6023      	str	r3, [r4, #0]
   ba9f4:	e786      	b.n	ba904 <_strtod_l+0x49c>
   ba9f6:	bf00      	nop
   ba9f8:	000bccf2 	.word	0x000bccf2
   ba9fc:	000bcd0c 	.word	0x000bcd0c
   baa00:	000bcce9 	.word	0x000bcce9
   baa04:	000bccec 	.word	0x000bccec
   baa08:	000bc6f2 	.word	0x000bc6f2
   baa0c:	000bcf58 	.word	0x000bcf58
   baa10:	000bcf30 	.word	0x000bcf30
   baa14:	7ff00000 	.word	0x7ff00000
   baa18:	7ca00000 	.word	0x7ca00000
   baa1c:	7fefffff 	.word	0x7fefffff
   baa20:	f018 0310 	ands.w	r3, r8, #16
   baa24:	bf18      	it	ne
   baa26:	236a      	movne	r3, #106	; 0x6a
   baa28:	f8df 93ac 	ldr.w	r9, [pc, #940]	; badd8 <_strtod_l+0x970>
   baa2c:	9304      	str	r3, [sp, #16]
   baa2e:	4650      	mov	r0, sl
   baa30:	4659      	mov	r1, fp
   baa32:	2300      	movs	r3, #0
   baa34:	f018 0f01 	tst.w	r8, #1
   baa38:	d004      	beq.n	baa44 <_strtod_l+0x5dc>
   baa3a:	e9d9 2300 	ldrd	r2, r3, [r9]
   baa3e:	f7ff f8d9 	bl	b9bf4 <__aeabi_dmul>
   baa42:	2301      	movs	r3, #1
   baa44:	ea5f 0868 	movs.w	r8, r8, asr #1
   baa48:	f109 0908 	add.w	r9, r9, #8
   baa4c:	d1f2      	bne.n	baa34 <_strtod_l+0x5cc>
   baa4e:	b10b      	cbz	r3, baa54 <_strtod_l+0x5ec>
   baa50:	4682      	mov	sl, r0
   baa52:	468b      	mov	fp, r1
   baa54:	9b04      	ldr	r3, [sp, #16]
   baa56:	b1c3      	cbz	r3, baa8a <_strtod_l+0x622>
   baa58:	f3cb 520a 	ubfx	r2, fp, #20, #11
   baa5c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   baa60:	2b00      	cmp	r3, #0
   baa62:	4659      	mov	r1, fp
   baa64:	dd11      	ble.n	baa8a <_strtod_l+0x622>
   baa66:	2b1f      	cmp	r3, #31
   baa68:	f340 8124 	ble.w	bacb4 <_strtod_l+0x84c>
   baa6c:	2b34      	cmp	r3, #52	; 0x34
   baa6e:	bfde      	ittt	le
   baa70:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   baa74:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   baa78:	fa03 f202 	lslle.w	r2, r3, r2
   baa7c:	f04f 0a00 	mov.w	sl, #0
   baa80:	bfcc      	ite	gt
   baa82:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   baa86:	ea02 0b01 	andle.w	fp, r2, r1
   baa8a:	2200      	movs	r2, #0
   baa8c:	2300      	movs	r3, #0
   baa8e:	4650      	mov	r0, sl
   baa90:	4659      	mov	r1, fp
   baa92:	f7ff fb17 	bl	ba0c4 <__aeabi_dcmpeq>
   baa96:	2800      	cmp	r0, #0
   baa98:	d1a2      	bne.n	ba9e0 <_strtod_l+0x578>
   baa9a:	9b07      	ldr	r3, [sp, #28]
   baa9c:	9300      	str	r3, [sp, #0]
   baa9e:	9908      	ldr	r1, [sp, #32]
   baaa0:	462b      	mov	r3, r5
   baaa2:	463a      	mov	r2, r7
   baaa4:	4620      	mov	r0, r4
   baaa6:	f001 f80d 	bl	bbac4 <__s2b>
   baaaa:	9007      	str	r0, [sp, #28]
   baaac:	2800      	cmp	r0, #0
   baaae:	f43f af1f 	beq.w	ba8f0 <_strtod_l+0x488>
   baab2:	9b05      	ldr	r3, [sp, #20]
   baab4:	1b9e      	subs	r6, r3, r6
   baab6:	9b06      	ldr	r3, [sp, #24]
   baab8:	2b00      	cmp	r3, #0
   baaba:	bfb4      	ite	lt
   baabc:	4633      	movlt	r3, r6
   baabe:	2300      	movge	r3, #0
   baac0:	930c      	str	r3, [sp, #48]	; 0x30
   baac2:	9b06      	ldr	r3, [sp, #24]
   baac4:	2500      	movs	r5, #0
   baac6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   baaca:	9312      	str	r3, [sp, #72]	; 0x48
   baacc:	462e      	mov	r6, r5
   baace:	9b07      	ldr	r3, [sp, #28]
   baad0:	4620      	mov	r0, r4
   baad2:	6859      	ldr	r1, [r3, #4]
   baad4:	f000 ff4e 	bl	bb974 <_Balloc>
   baad8:	9005      	str	r0, [sp, #20]
   baada:	2800      	cmp	r0, #0
   baadc:	f43f af0c 	beq.w	ba8f8 <_strtod_l+0x490>
   baae0:	9b07      	ldr	r3, [sp, #28]
   baae2:	691a      	ldr	r2, [r3, #16]
   baae4:	3202      	adds	r2, #2
   baae6:	f103 010c 	add.w	r1, r3, #12
   baaea:	0092      	lsls	r2, r2, #2
   baaec:	300c      	adds	r0, #12
   baaee:	f7ff fbe0 	bl	ba2b2 <memcpy>
   baaf2:	ec4b ab10 	vmov	d0, sl, fp
   baaf6:	aa1a      	add	r2, sp, #104	; 0x68
   baaf8:	a919      	add	r1, sp, #100	; 0x64
   baafa:	4620      	mov	r0, r4
   baafc:	f001 fb28 	bl	bc150 <__d2b>
   bab00:	ec4b ab18 	vmov	d8, sl, fp
   bab04:	9018      	str	r0, [sp, #96]	; 0x60
   bab06:	2800      	cmp	r0, #0
   bab08:	f43f aef6 	beq.w	ba8f8 <_strtod_l+0x490>
   bab0c:	2101      	movs	r1, #1
   bab0e:	4620      	mov	r0, r4
   bab10:	f001 f872 	bl	bbbf8 <__i2b>
   bab14:	4606      	mov	r6, r0
   bab16:	2800      	cmp	r0, #0
   bab18:	f43f aeee 	beq.w	ba8f8 <_strtod_l+0x490>
   bab1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bab1e:	9904      	ldr	r1, [sp, #16]
   bab20:	2b00      	cmp	r3, #0
   bab22:	bfab      	itete	ge
   bab24:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bab26:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bab28:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bab2a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bab2e:	bfac      	ite	ge
   bab30:	eb03 0902 	addge.w	r9, r3, r2
   bab34:	1ad7      	sublt	r7, r2, r3
   bab36:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bab38:	eba3 0801 	sub.w	r8, r3, r1
   bab3c:	4490      	add	r8, r2
   bab3e:	4ba1      	ldr	r3, [pc, #644]	; (badc4 <_strtod_l+0x95c>)
   bab40:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bab44:	4598      	cmp	r8, r3
   bab46:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bab4a:	f280 80c7 	bge.w	bacdc <_strtod_l+0x874>
   bab4e:	eba3 0308 	sub.w	r3, r3, r8
   bab52:	2b1f      	cmp	r3, #31
   bab54:	eba2 0203 	sub.w	r2, r2, r3
   bab58:	f04f 0101 	mov.w	r1, #1
   bab5c:	f300 80b1 	bgt.w	bacc2 <_strtod_l+0x85a>
   bab60:	fa01 f303 	lsl.w	r3, r1, r3
   bab64:	930d      	str	r3, [sp, #52]	; 0x34
   bab66:	2300      	movs	r3, #0
   bab68:	9308      	str	r3, [sp, #32]
   bab6a:	eb09 0802 	add.w	r8, r9, r2
   bab6e:	9b04      	ldr	r3, [sp, #16]
   bab70:	45c1      	cmp	r9, r8
   bab72:	4417      	add	r7, r2
   bab74:	441f      	add	r7, r3
   bab76:	464b      	mov	r3, r9
   bab78:	bfa8      	it	ge
   bab7a:	4643      	movge	r3, r8
   bab7c:	42bb      	cmp	r3, r7
   bab7e:	bfa8      	it	ge
   bab80:	463b      	movge	r3, r7
   bab82:	2b00      	cmp	r3, #0
   bab84:	bfc2      	ittt	gt
   bab86:	eba8 0803 	subgt.w	r8, r8, r3
   bab8a:	1aff      	subgt	r7, r7, r3
   bab8c:	eba9 0903 	subgt.w	r9, r9, r3
   bab90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bab92:	2b00      	cmp	r3, #0
   bab94:	dd17      	ble.n	babc6 <_strtod_l+0x75e>
   bab96:	4631      	mov	r1, r6
   bab98:	461a      	mov	r2, r3
   bab9a:	4620      	mov	r0, r4
   bab9c:	f001 f8ec 	bl	bbd78 <__pow5mult>
   baba0:	4606      	mov	r6, r0
   baba2:	2800      	cmp	r0, #0
   baba4:	f43f aea8 	beq.w	ba8f8 <_strtod_l+0x490>
   baba8:	4601      	mov	r1, r0
   babaa:	9a18      	ldr	r2, [sp, #96]	; 0x60
   babac:	4620      	mov	r0, r4
   babae:	f001 f839 	bl	bbc24 <__multiply>
   babb2:	900b      	str	r0, [sp, #44]	; 0x2c
   babb4:	2800      	cmp	r0, #0
   babb6:	f43f ae9f 	beq.w	ba8f8 <_strtod_l+0x490>
   babba:	9918      	ldr	r1, [sp, #96]	; 0x60
   babbc:	4620      	mov	r0, r4
   babbe:	f000 ff19 	bl	bb9f4 <_Bfree>
   babc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   babc4:	9318      	str	r3, [sp, #96]	; 0x60
   babc6:	f1b8 0f00 	cmp.w	r8, #0
   babca:	f300 808c 	bgt.w	bace6 <_strtod_l+0x87e>
   babce:	9b06      	ldr	r3, [sp, #24]
   babd0:	2b00      	cmp	r3, #0
   babd2:	dd08      	ble.n	babe6 <_strtod_l+0x77e>
   babd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   babd6:	9905      	ldr	r1, [sp, #20]
   babd8:	4620      	mov	r0, r4
   babda:	f001 f8cd 	bl	bbd78 <__pow5mult>
   babde:	9005      	str	r0, [sp, #20]
   babe0:	2800      	cmp	r0, #0
   babe2:	f43f ae89 	beq.w	ba8f8 <_strtod_l+0x490>
   babe6:	2f00      	cmp	r7, #0
   babe8:	dd08      	ble.n	babfc <_strtod_l+0x794>
   babea:	9905      	ldr	r1, [sp, #20]
   babec:	463a      	mov	r2, r7
   babee:	4620      	mov	r0, r4
   babf0:	f001 f91c 	bl	bbe2c <__lshift>
   babf4:	9005      	str	r0, [sp, #20]
   babf6:	2800      	cmp	r0, #0
   babf8:	f43f ae7e 	beq.w	ba8f8 <_strtod_l+0x490>
   babfc:	f1b9 0f00 	cmp.w	r9, #0
   bac00:	dd08      	ble.n	bac14 <_strtod_l+0x7ac>
   bac02:	4631      	mov	r1, r6
   bac04:	464a      	mov	r2, r9
   bac06:	4620      	mov	r0, r4
   bac08:	f001 f910 	bl	bbe2c <__lshift>
   bac0c:	4606      	mov	r6, r0
   bac0e:	2800      	cmp	r0, #0
   bac10:	f43f ae72 	beq.w	ba8f8 <_strtod_l+0x490>
   bac14:	9a05      	ldr	r2, [sp, #20]
   bac16:	9918      	ldr	r1, [sp, #96]	; 0x60
   bac18:	4620      	mov	r0, r4
   bac1a:	f001 f993 	bl	bbf44 <__mdiff>
   bac1e:	4605      	mov	r5, r0
   bac20:	2800      	cmp	r0, #0
   bac22:	f43f ae69 	beq.w	ba8f8 <_strtod_l+0x490>
   bac26:	68c3      	ldr	r3, [r0, #12]
   bac28:	930b      	str	r3, [sp, #44]	; 0x2c
   bac2a:	2300      	movs	r3, #0
   bac2c:	60c3      	str	r3, [r0, #12]
   bac2e:	4631      	mov	r1, r6
   bac30:	f001 f96c 	bl	bbf0c <__mcmp>
   bac34:	2800      	cmp	r0, #0
   bac36:	da60      	bge.n	bacfa <_strtod_l+0x892>
   bac38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bac3a:	ea53 030a 	orrs.w	r3, r3, sl
   bac3e:	f040 8082 	bne.w	bad46 <_strtod_l+0x8de>
   bac42:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bac46:	2b00      	cmp	r3, #0
   bac48:	d17d      	bne.n	bad46 <_strtod_l+0x8de>
   bac4a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bac4e:	0d1b      	lsrs	r3, r3, #20
   bac50:	051b      	lsls	r3, r3, #20
   bac52:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bac56:	d976      	bls.n	bad46 <_strtod_l+0x8de>
   bac58:	696b      	ldr	r3, [r5, #20]
   bac5a:	b913      	cbnz	r3, bac62 <_strtod_l+0x7fa>
   bac5c:	692b      	ldr	r3, [r5, #16]
   bac5e:	2b01      	cmp	r3, #1
   bac60:	dd71      	ble.n	bad46 <_strtod_l+0x8de>
   bac62:	4629      	mov	r1, r5
   bac64:	2201      	movs	r2, #1
   bac66:	4620      	mov	r0, r4
   bac68:	f001 f8e0 	bl	bbe2c <__lshift>
   bac6c:	4631      	mov	r1, r6
   bac6e:	4605      	mov	r5, r0
   bac70:	f001 f94c 	bl	bbf0c <__mcmp>
   bac74:	2800      	cmp	r0, #0
   bac76:	dd66      	ble.n	bad46 <_strtod_l+0x8de>
   bac78:	9904      	ldr	r1, [sp, #16]
   bac7a:	4a53      	ldr	r2, [pc, #332]	; (badc8 <_strtod_l+0x960>)
   bac7c:	465b      	mov	r3, fp
   bac7e:	2900      	cmp	r1, #0
   bac80:	f000 8081 	beq.w	bad86 <_strtod_l+0x91e>
   bac84:	ea02 010b 	and.w	r1, r2, fp
   bac88:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bac8c:	dc7b      	bgt.n	bad86 <_strtod_l+0x91e>
   bac8e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bac92:	f77f aea9 	ble.w	ba9e8 <_strtod_l+0x580>
   bac96:	4b4d      	ldr	r3, [pc, #308]	; (badcc <_strtod_l+0x964>)
   bac98:	4650      	mov	r0, sl
   bac9a:	4659      	mov	r1, fp
   bac9c:	2200      	movs	r2, #0
   bac9e:	f7fe ffa9 	bl	b9bf4 <__aeabi_dmul>
   baca2:	460b      	mov	r3, r1
   baca4:	4303      	orrs	r3, r0
   baca6:	bf08      	it	eq
   baca8:	2322      	moveq	r3, #34	; 0x22
   bacaa:	4682      	mov	sl, r0
   bacac:	468b      	mov	fp, r1
   bacae:	bf08      	it	eq
   bacb0:	6023      	streq	r3, [r4, #0]
   bacb2:	e62b      	b.n	ba90c <_strtod_l+0x4a4>
   bacb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bacb8:	fa02 f303 	lsl.w	r3, r2, r3
   bacbc:	ea03 0a0a 	and.w	sl, r3, sl
   bacc0:	e6e3      	b.n	baa8a <_strtod_l+0x622>
   bacc2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bacc6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bacca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bacce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bacd2:	fa01 f308 	lsl.w	r3, r1, r8
   bacd6:	9308      	str	r3, [sp, #32]
   bacd8:	910d      	str	r1, [sp, #52]	; 0x34
   bacda:	e746      	b.n	bab6a <_strtod_l+0x702>
   bacdc:	2300      	movs	r3, #0
   bacde:	9308      	str	r3, [sp, #32]
   bace0:	2301      	movs	r3, #1
   bace2:	930d      	str	r3, [sp, #52]	; 0x34
   bace4:	e741      	b.n	bab6a <_strtod_l+0x702>
   bace6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bace8:	4642      	mov	r2, r8
   bacea:	4620      	mov	r0, r4
   bacec:	f001 f89e 	bl	bbe2c <__lshift>
   bacf0:	9018      	str	r0, [sp, #96]	; 0x60
   bacf2:	2800      	cmp	r0, #0
   bacf4:	f47f af6b 	bne.w	babce <_strtod_l+0x766>
   bacf8:	e5fe      	b.n	ba8f8 <_strtod_l+0x490>
   bacfa:	465f      	mov	r7, fp
   bacfc:	d16e      	bne.n	baddc <_strtod_l+0x974>
   bacfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bad00:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bad04:	b342      	cbz	r2, bad58 <_strtod_l+0x8f0>
   bad06:	4a32      	ldr	r2, [pc, #200]	; (badd0 <_strtod_l+0x968>)
   bad08:	4293      	cmp	r3, r2
   bad0a:	d128      	bne.n	bad5e <_strtod_l+0x8f6>
   bad0c:	9b04      	ldr	r3, [sp, #16]
   bad0e:	4651      	mov	r1, sl
   bad10:	b1eb      	cbz	r3, bad4e <_strtod_l+0x8e6>
   bad12:	4b2d      	ldr	r3, [pc, #180]	; (badc8 <_strtod_l+0x960>)
   bad14:	403b      	ands	r3, r7
   bad16:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bad1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bad1e:	d819      	bhi.n	bad54 <_strtod_l+0x8ec>
   bad20:	0d1b      	lsrs	r3, r3, #20
   bad22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bad26:	fa02 f303 	lsl.w	r3, r2, r3
   bad2a:	4299      	cmp	r1, r3
   bad2c:	d117      	bne.n	bad5e <_strtod_l+0x8f6>
   bad2e:	4b29      	ldr	r3, [pc, #164]	; (badd4 <_strtod_l+0x96c>)
   bad30:	429f      	cmp	r7, r3
   bad32:	d102      	bne.n	bad3a <_strtod_l+0x8d2>
   bad34:	3101      	adds	r1, #1
   bad36:	f43f addf 	beq.w	ba8f8 <_strtod_l+0x490>
   bad3a:	4b23      	ldr	r3, [pc, #140]	; (badc8 <_strtod_l+0x960>)
   bad3c:	403b      	ands	r3, r7
   bad3e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bad42:	f04f 0a00 	mov.w	sl, #0
   bad46:	9b04      	ldr	r3, [sp, #16]
   bad48:	2b00      	cmp	r3, #0
   bad4a:	d1a4      	bne.n	bac96 <_strtod_l+0x82e>
   bad4c:	e5de      	b.n	ba90c <_strtod_l+0x4a4>
   bad4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bad52:	e7ea      	b.n	bad2a <_strtod_l+0x8c2>
   bad54:	4613      	mov	r3, r2
   bad56:	e7e8      	b.n	bad2a <_strtod_l+0x8c2>
   bad58:	ea53 030a 	orrs.w	r3, r3, sl
   bad5c:	d08c      	beq.n	bac78 <_strtod_l+0x810>
   bad5e:	9b08      	ldr	r3, [sp, #32]
   bad60:	b1db      	cbz	r3, bad9a <_strtod_l+0x932>
   bad62:	423b      	tst	r3, r7
   bad64:	d0ef      	beq.n	bad46 <_strtod_l+0x8de>
   bad66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bad68:	9a04      	ldr	r2, [sp, #16]
   bad6a:	4650      	mov	r0, sl
   bad6c:	4659      	mov	r1, fp
   bad6e:	b1c3      	cbz	r3, bada2 <_strtod_l+0x93a>
   bad70:	f7ff fb5d 	bl	ba42e <sulp>
   bad74:	4602      	mov	r2, r0
   bad76:	460b      	mov	r3, r1
   bad78:	ec51 0b18 	vmov	r0, r1, d8
   bad7c:	f7fe fd84 	bl	b9888 <__adddf3>
   bad80:	4682      	mov	sl, r0
   bad82:	468b      	mov	fp, r1
   bad84:	e7df      	b.n	bad46 <_strtod_l+0x8de>
   bad86:	4013      	ands	r3, r2
   bad88:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bad8c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bad90:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bad94:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bad98:	e7d5      	b.n	bad46 <_strtod_l+0x8de>
   bad9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bad9c:	ea13 0f0a 	tst.w	r3, sl
   bada0:	e7e0      	b.n	bad64 <_strtod_l+0x8fc>
   bada2:	f7ff fb44 	bl	ba42e <sulp>
   bada6:	4602      	mov	r2, r0
   bada8:	460b      	mov	r3, r1
   badaa:	ec51 0b18 	vmov	r0, r1, d8
   badae:	f7fe fd69 	bl	b9884 <__aeabi_dsub>
   badb2:	2200      	movs	r2, #0
   badb4:	2300      	movs	r3, #0
   badb6:	4682      	mov	sl, r0
   badb8:	468b      	mov	fp, r1
   badba:	f7ff f983 	bl	ba0c4 <__aeabi_dcmpeq>
   badbe:	2800      	cmp	r0, #0
   badc0:	d0c1      	beq.n	bad46 <_strtod_l+0x8de>
   badc2:	e611      	b.n	ba9e8 <_strtod_l+0x580>
   badc4:	fffffc02 	.word	0xfffffc02
   badc8:	7ff00000 	.word	0x7ff00000
   badcc:	39500000 	.word	0x39500000
   badd0:	000fffff 	.word	0x000fffff
   badd4:	7fefffff 	.word	0x7fefffff
   badd8:	000bcd20 	.word	0x000bcd20
   baddc:	4631      	mov	r1, r6
   badde:	4628      	mov	r0, r5
   bade0:	f001 fa12 	bl	bc208 <__ratio>
   bade4:	ec59 8b10 	vmov	r8, r9, d0
   bade8:	ee10 0a10 	vmov	r0, s0
   badec:	2200      	movs	r2, #0
   badee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   badf2:	4649      	mov	r1, r9
   badf4:	f7ff f97a 	bl	ba0ec <__aeabi_dcmple>
   badf8:	2800      	cmp	r0, #0
   badfa:	d07a      	beq.n	baef2 <_strtod_l+0xa8a>
   badfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   badfe:	2b00      	cmp	r3, #0
   bae00:	d04a      	beq.n	bae98 <_strtod_l+0xa30>
   bae02:	4b95      	ldr	r3, [pc, #596]	; (bb058 <_strtod_l+0xbf0>)
   bae04:	2200      	movs	r2, #0
   bae06:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bae0a:	f8df 924c 	ldr.w	r9, [pc, #588]	; bb058 <_strtod_l+0xbf0>
   bae0e:	f04f 0800 	mov.w	r8, #0
   bae12:	4b92      	ldr	r3, [pc, #584]	; (bb05c <_strtod_l+0xbf4>)
   bae14:	403b      	ands	r3, r7
   bae16:	930d      	str	r3, [sp, #52]	; 0x34
   bae18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bae1a:	4b91      	ldr	r3, [pc, #580]	; (bb060 <_strtod_l+0xbf8>)
   bae1c:	429a      	cmp	r2, r3
   bae1e:	f040 80b0 	bne.w	baf82 <_strtod_l+0xb1a>
   bae22:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bae26:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bae2a:	ec4b ab10 	vmov	d0, sl, fp
   bae2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bae32:	f001 f911 	bl	bc058 <__ulp>
   bae36:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bae3a:	ec53 2b10 	vmov	r2, r3, d0
   bae3e:	f7fe fed9 	bl	b9bf4 <__aeabi_dmul>
   bae42:	4652      	mov	r2, sl
   bae44:	465b      	mov	r3, fp
   bae46:	f7fe fd1f 	bl	b9888 <__adddf3>
   bae4a:	460b      	mov	r3, r1
   bae4c:	4983      	ldr	r1, [pc, #524]	; (bb05c <_strtod_l+0xbf4>)
   bae4e:	4a85      	ldr	r2, [pc, #532]	; (bb064 <_strtod_l+0xbfc>)
   bae50:	4019      	ands	r1, r3
   bae52:	4291      	cmp	r1, r2
   bae54:	4682      	mov	sl, r0
   bae56:	d960      	bls.n	baf1a <_strtod_l+0xab2>
   bae58:	ee18 3a90 	vmov	r3, s17
   bae5c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bae60:	4293      	cmp	r3, r2
   bae62:	d104      	bne.n	bae6e <_strtod_l+0xa06>
   bae64:	ee18 3a10 	vmov	r3, s16
   bae68:	3301      	adds	r3, #1
   bae6a:	f43f ad45 	beq.w	ba8f8 <_strtod_l+0x490>
   bae6e:	f8df b200 	ldr.w	fp, [pc, #512]	; bb070 <_strtod_l+0xc08>
   bae72:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bae76:	9918      	ldr	r1, [sp, #96]	; 0x60
   bae78:	4620      	mov	r0, r4
   bae7a:	f000 fdbb 	bl	bb9f4 <_Bfree>
   bae7e:	9905      	ldr	r1, [sp, #20]
   bae80:	4620      	mov	r0, r4
   bae82:	f000 fdb7 	bl	bb9f4 <_Bfree>
   bae86:	4631      	mov	r1, r6
   bae88:	4620      	mov	r0, r4
   bae8a:	f000 fdb3 	bl	bb9f4 <_Bfree>
   bae8e:	4629      	mov	r1, r5
   bae90:	4620      	mov	r0, r4
   bae92:	f000 fdaf 	bl	bb9f4 <_Bfree>
   bae96:	e61a      	b.n	baace <_strtod_l+0x666>
   bae98:	f1ba 0f00 	cmp.w	sl, #0
   bae9c:	d11b      	bne.n	baed6 <_strtod_l+0xa6e>
   bae9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   baea2:	b9f3      	cbnz	r3, baee2 <_strtod_l+0xa7a>
   baea4:	4b6c      	ldr	r3, [pc, #432]	; (bb058 <_strtod_l+0xbf0>)
   baea6:	2200      	movs	r2, #0
   baea8:	4640      	mov	r0, r8
   baeaa:	4649      	mov	r1, r9
   baeac:	f7ff f914 	bl	ba0d8 <__aeabi_dcmplt>
   baeb0:	b9d0      	cbnz	r0, baee8 <_strtod_l+0xa80>
   baeb2:	4640      	mov	r0, r8
   baeb4:	4649      	mov	r1, r9
   baeb6:	4b6c      	ldr	r3, [pc, #432]	; (bb068 <_strtod_l+0xc00>)
   baeb8:	2200      	movs	r2, #0
   baeba:	f7fe fe9b 	bl	b9bf4 <__aeabi_dmul>
   baebe:	4680      	mov	r8, r0
   baec0:	4689      	mov	r9, r1
   baec2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   baec6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   baeca:	9315      	str	r3, [sp, #84]	; 0x54
   baecc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   baed0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   baed4:	e79d      	b.n	bae12 <_strtod_l+0x9aa>
   baed6:	f1ba 0f01 	cmp.w	sl, #1
   baeda:	d102      	bne.n	baee2 <_strtod_l+0xa7a>
   baedc:	2f00      	cmp	r7, #0
   baede:	f43f ad83 	beq.w	ba9e8 <_strtod_l+0x580>
   baee2:	4b62      	ldr	r3, [pc, #392]	; (bb06c <_strtod_l+0xc04>)
   baee4:	2200      	movs	r2, #0
   baee6:	e78e      	b.n	bae06 <_strtod_l+0x99e>
   baee8:	f8df 917c 	ldr.w	r9, [pc, #380]	; bb068 <_strtod_l+0xc00>
   baeec:	f04f 0800 	mov.w	r8, #0
   baef0:	e7e7      	b.n	baec2 <_strtod_l+0xa5a>
   baef2:	4b5d      	ldr	r3, [pc, #372]	; (bb068 <_strtod_l+0xc00>)
   baef4:	4640      	mov	r0, r8
   baef6:	4649      	mov	r1, r9
   baef8:	2200      	movs	r2, #0
   baefa:	f7fe fe7b 	bl	b9bf4 <__aeabi_dmul>
   baefe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   baf00:	4680      	mov	r8, r0
   baf02:	4689      	mov	r9, r1
   baf04:	b933      	cbnz	r3, baf14 <_strtod_l+0xaac>
   baf06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   baf0a:	900e      	str	r0, [sp, #56]	; 0x38
   baf0c:	930f      	str	r3, [sp, #60]	; 0x3c
   baf0e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   baf12:	e7dd      	b.n	baed0 <_strtod_l+0xa68>
   baf14:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   baf18:	e7f9      	b.n	baf0e <_strtod_l+0xaa6>
   baf1a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   baf1e:	9b04      	ldr	r3, [sp, #16]
   baf20:	2b00      	cmp	r3, #0
   baf22:	d1a8      	bne.n	bae76 <_strtod_l+0xa0e>
   baf24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   baf28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   baf2a:	0d1b      	lsrs	r3, r3, #20
   baf2c:	051b      	lsls	r3, r3, #20
   baf2e:	429a      	cmp	r2, r3
   baf30:	d1a1      	bne.n	bae76 <_strtod_l+0xa0e>
   baf32:	4640      	mov	r0, r8
   baf34:	4649      	mov	r1, r9
   baf36:	f001 fa05 	bl	bc344 <__aeabi_d2lz>
   baf3a:	f7fe fe2d 	bl	b9b98 <__aeabi_l2d>
   baf3e:	4602      	mov	r2, r0
   baf40:	460b      	mov	r3, r1
   baf42:	4640      	mov	r0, r8
   baf44:	4649      	mov	r1, r9
   baf46:	f7fe fc9d 	bl	b9884 <__aeabi_dsub>
   baf4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   baf4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   baf50:	ea43 030a 	orr.w	r3, r3, sl
   baf54:	4313      	orrs	r3, r2
   baf56:	4680      	mov	r8, r0
   baf58:	4689      	mov	r9, r1
   baf5a:	d055      	beq.n	bb008 <_strtod_l+0xba0>
   baf5c:	a336      	add	r3, pc, #216	; (adr r3, bb038 <_strtod_l+0xbd0>)
   baf5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   baf62:	f7ff f8b9 	bl	ba0d8 <__aeabi_dcmplt>
   baf66:	2800      	cmp	r0, #0
   baf68:	f47f acd0 	bne.w	ba90c <_strtod_l+0x4a4>
   baf6c:	a334      	add	r3, pc, #208	; (adr r3, bb040 <_strtod_l+0xbd8>)
   baf6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   baf72:	4640      	mov	r0, r8
   baf74:	4649      	mov	r1, r9
   baf76:	f7ff f8cd 	bl	ba114 <__aeabi_dcmpgt>
   baf7a:	2800      	cmp	r0, #0
   baf7c:	f43f af7b 	beq.w	bae76 <_strtod_l+0xa0e>
   baf80:	e4c4      	b.n	ba90c <_strtod_l+0x4a4>
   baf82:	9b04      	ldr	r3, [sp, #16]
   baf84:	b333      	cbz	r3, bafd4 <_strtod_l+0xb6c>
   baf86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   baf88:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   baf8c:	d822      	bhi.n	bafd4 <_strtod_l+0xb6c>
   baf8e:	a32e      	add	r3, pc, #184	; (adr r3, bb048 <_strtod_l+0xbe0>)
   baf90:	e9d3 2300 	ldrd	r2, r3, [r3]
   baf94:	4640      	mov	r0, r8
   baf96:	4649      	mov	r1, r9
   baf98:	f7ff f8a8 	bl	ba0ec <__aeabi_dcmple>
   baf9c:	b1a0      	cbz	r0, bafc8 <_strtod_l+0xb60>
   baf9e:	4649      	mov	r1, r9
   bafa0:	4640      	mov	r0, r8
   bafa2:	f7ff f8d7 	bl	ba154 <__aeabi_d2uiz>
   bafa6:	2801      	cmp	r0, #1
   bafa8:	bf38      	it	cc
   bafaa:	2001      	movcc	r0, #1
   bafac:	f7fe fda8 	bl	b9b00 <__aeabi_ui2d>
   bafb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bafb2:	4680      	mov	r8, r0
   bafb4:	4689      	mov	r9, r1
   bafb6:	bb23      	cbnz	r3, bb002 <_strtod_l+0xb9a>
   bafb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bafbc:	9010      	str	r0, [sp, #64]	; 0x40
   bafbe:	9311      	str	r3, [sp, #68]	; 0x44
   bafc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bafc4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bafc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bafca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bafcc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bafd0:	1a9b      	subs	r3, r3, r2
   bafd2:	9309      	str	r3, [sp, #36]	; 0x24
   bafd4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bafd8:	eeb0 0a48 	vmov.f32	s0, s16
   bafdc:	eef0 0a68 	vmov.f32	s1, s17
   bafe0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bafe4:	f001 f838 	bl	bc058 <__ulp>
   bafe8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bafec:	ec53 2b10 	vmov	r2, r3, d0
   baff0:	f7fe fe00 	bl	b9bf4 <__aeabi_dmul>
   baff4:	ec53 2b18 	vmov	r2, r3, d8
   baff8:	f7fe fc46 	bl	b9888 <__adddf3>
   baffc:	4682      	mov	sl, r0
   baffe:	468b      	mov	fp, r1
   bb000:	e78d      	b.n	baf1e <_strtod_l+0xab6>
   bb002:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bb006:	e7db      	b.n	bafc0 <_strtod_l+0xb58>
   bb008:	a311      	add	r3, pc, #68	; (adr r3, bb050 <_strtod_l+0xbe8>)
   bb00a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb00e:	f7ff f863 	bl	ba0d8 <__aeabi_dcmplt>
   bb012:	e7b2      	b.n	baf7a <_strtod_l+0xb12>
   bb014:	2300      	movs	r3, #0
   bb016:	930a      	str	r3, [sp, #40]	; 0x28
   bb018:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bb01a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb01c:	6013      	str	r3, [r2, #0]
   bb01e:	f7ff ba6b 	b.w	ba4f8 <_strtod_l+0x90>
   bb022:	2a65      	cmp	r2, #101	; 0x65
   bb024:	f43f ab5f 	beq.w	ba6e6 <_strtod_l+0x27e>
   bb028:	2a45      	cmp	r2, #69	; 0x45
   bb02a:	f43f ab5c 	beq.w	ba6e6 <_strtod_l+0x27e>
   bb02e:	2301      	movs	r3, #1
   bb030:	f7ff bb94 	b.w	ba75c <_strtod_l+0x2f4>
   bb034:	f3af 8000 	nop.w
   bb038:	94a03595 	.word	0x94a03595
   bb03c:	3fdfffff 	.word	0x3fdfffff
   bb040:	35afe535 	.word	0x35afe535
   bb044:	3fe00000 	.word	0x3fe00000
   bb048:	ffc00000 	.word	0xffc00000
   bb04c:	41dfffff 	.word	0x41dfffff
   bb050:	94a03595 	.word	0x94a03595
   bb054:	3fcfffff 	.word	0x3fcfffff
   bb058:	3ff00000 	.word	0x3ff00000
   bb05c:	7ff00000 	.word	0x7ff00000
   bb060:	7fe00000 	.word	0x7fe00000
   bb064:	7c9fffff 	.word	0x7c9fffff
   bb068:	3fe00000 	.word	0x3fe00000
   bb06c:	bff00000 	.word	0xbff00000
   bb070:	7fefffff 	.word	0x7fefffff

000bb074 <strtod>:
   bb074:	460a      	mov	r2, r1
   bb076:	4601      	mov	r1, r0
   bb078:	4802      	ldr	r0, [pc, #8]	; (bb084 <strtod+0x10>)
   bb07a:	4b03      	ldr	r3, [pc, #12]	; (bb088 <strtod+0x14>)
   bb07c:	6800      	ldr	r0, [r0, #0]
   bb07e:	f7ff b9f3 	b.w	ba468 <_strtod_l>
   bb082:	bf00      	nop
   bb084:	20035560 	.word	0x20035560
   bb088:	200355cc 	.word	0x200355cc

000bb08c <_strtol_l.constprop.0>:
   bb08c:	2b01      	cmp	r3, #1
   bb08e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb092:	d001      	beq.n	bb098 <_strtol_l.constprop.0+0xc>
   bb094:	2b24      	cmp	r3, #36	; 0x24
   bb096:	d906      	bls.n	bb0a6 <_strtol_l.constprop.0+0x1a>
   bb098:	f7fb fd32 	bl	b6b00 <__errno>
   bb09c:	2316      	movs	r3, #22
   bb09e:	6003      	str	r3, [r0, #0]
   bb0a0:	2000      	movs	r0, #0
   bb0a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb0a6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bb18c <_strtol_l.constprop.0+0x100>
   bb0aa:	460d      	mov	r5, r1
   bb0ac:	462e      	mov	r6, r5
   bb0ae:	f815 4b01 	ldrb.w	r4, [r5], #1
   bb0b2:	f814 700c 	ldrb.w	r7, [r4, ip]
   bb0b6:	f017 0708 	ands.w	r7, r7, #8
   bb0ba:	d1f7      	bne.n	bb0ac <_strtol_l.constprop.0+0x20>
   bb0bc:	2c2d      	cmp	r4, #45	; 0x2d
   bb0be:	d132      	bne.n	bb126 <_strtol_l.constprop.0+0x9a>
   bb0c0:	782c      	ldrb	r4, [r5, #0]
   bb0c2:	2701      	movs	r7, #1
   bb0c4:	1cb5      	adds	r5, r6, #2
   bb0c6:	2b00      	cmp	r3, #0
   bb0c8:	d05b      	beq.n	bb182 <_strtol_l.constprop.0+0xf6>
   bb0ca:	2b10      	cmp	r3, #16
   bb0cc:	d109      	bne.n	bb0e2 <_strtol_l.constprop.0+0x56>
   bb0ce:	2c30      	cmp	r4, #48	; 0x30
   bb0d0:	d107      	bne.n	bb0e2 <_strtol_l.constprop.0+0x56>
   bb0d2:	782c      	ldrb	r4, [r5, #0]
   bb0d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bb0d8:	2c58      	cmp	r4, #88	; 0x58
   bb0da:	d14d      	bne.n	bb178 <_strtol_l.constprop.0+0xec>
   bb0dc:	786c      	ldrb	r4, [r5, #1]
   bb0de:	2310      	movs	r3, #16
   bb0e0:	3502      	adds	r5, #2
   bb0e2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bb0e6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bb0ea:	f04f 0c00 	mov.w	ip, #0
   bb0ee:	fbb8 f9f3 	udiv	r9, r8, r3
   bb0f2:	4666      	mov	r6, ip
   bb0f4:	fb03 8a19 	mls	sl, r3, r9, r8
   bb0f8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bb0fc:	f1be 0f09 	cmp.w	lr, #9
   bb100:	d816      	bhi.n	bb130 <_strtol_l.constprop.0+0xa4>
   bb102:	4674      	mov	r4, lr
   bb104:	42a3      	cmp	r3, r4
   bb106:	dd24      	ble.n	bb152 <_strtol_l.constprop.0+0xc6>
   bb108:	f1bc 0f00 	cmp.w	ip, #0
   bb10c:	db1e      	blt.n	bb14c <_strtol_l.constprop.0+0xc0>
   bb10e:	45b1      	cmp	r9, r6
   bb110:	d31c      	bcc.n	bb14c <_strtol_l.constprop.0+0xc0>
   bb112:	d101      	bne.n	bb118 <_strtol_l.constprop.0+0x8c>
   bb114:	45a2      	cmp	sl, r4
   bb116:	db19      	blt.n	bb14c <_strtol_l.constprop.0+0xc0>
   bb118:	fb06 4603 	mla	r6, r6, r3, r4
   bb11c:	f04f 0c01 	mov.w	ip, #1
   bb120:	f815 4b01 	ldrb.w	r4, [r5], #1
   bb124:	e7e8      	b.n	bb0f8 <_strtol_l.constprop.0+0x6c>
   bb126:	2c2b      	cmp	r4, #43	; 0x2b
   bb128:	bf04      	itt	eq
   bb12a:	782c      	ldrbeq	r4, [r5, #0]
   bb12c:	1cb5      	addeq	r5, r6, #2
   bb12e:	e7ca      	b.n	bb0c6 <_strtol_l.constprop.0+0x3a>
   bb130:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bb134:	f1be 0f19 	cmp.w	lr, #25
   bb138:	d801      	bhi.n	bb13e <_strtol_l.constprop.0+0xb2>
   bb13a:	3c37      	subs	r4, #55	; 0x37
   bb13c:	e7e2      	b.n	bb104 <_strtol_l.constprop.0+0x78>
   bb13e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bb142:	f1be 0f19 	cmp.w	lr, #25
   bb146:	d804      	bhi.n	bb152 <_strtol_l.constprop.0+0xc6>
   bb148:	3c57      	subs	r4, #87	; 0x57
   bb14a:	e7db      	b.n	bb104 <_strtol_l.constprop.0+0x78>
   bb14c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bb150:	e7e6      	b.n	bb120 <_strtol_l.constprop.0+0x94>
   bb152:	f1bc 0f00 	cmp.w	ip, #0
   bb156:	da05      	bge.n	bb164 <_strtol_l.constprop.0+0xd8>
   bb158:	2322      	movs	r3, #34	; 0x22
   bb15a:	6003      	str	r3, [r0, #0]
   bb15c:	4646      	mov	r6, r8
   bb15e:	b942      	cbnz	r2, bb172 <_strtol_l.constprop.0+0xe6>
   bb160:	4630      	mov	r0, r6
   bb162:	e79e      	b.n	bb0a2 <_strtol_l.constprop.0+0x16>
   bb164:	b107      	cbz	r7, bb168 <_strtol_l.constprop.0+0xdc>
   bb166:	4276      	negs	r6, r6
   bb168:	2a00      	cmp	r2, #0
   bb16a:	d0f9      	beq.n	bb160 <_strtol_l.constprop.0+0xd4>
   bb16c:	f1bc 0f00 	cmp.w	ip, #0
   bb170:	d000      	beq.n	bb174 <_strtol_l.constprop.0+0xe8>
   bb172:	1e69      	subs	r1, r5, #1
   bb174:	6011      	str	r1, [r2, #0]
   bb176:	e7f3      	b.n	bb160 <_strtol_l.constprop.0+0xd4>
   bb178:	2430      	movs	r4, #48	; 0x30
   bb17a:	2b00      	cmp	r3, #0
   bb17c:	d1b1      	bne.n	bb0e2 <_strtol_l.constprop.0+0x56>
   bb17e:	2308      	movs	r3, #8
   bb180:	e7af      	b.n	bb0e2 <_strtol_l.constprop.0+0x56>
   bb182:	2c30      	cmp	r4, #48	; 0x30
   bb184:	d0a5      	beq.n	bb0d2 <_strtol_l.constprop.0+0x46>
   bb186:	230a      	movs	r3, #10
   bb188:	e7ab      	b.n	bb0e2 <_strtol_l.constprop.0+0x56>
   bb18a:	bf00      	nop
   bb18c:	000bcd49 	.word	0x000bcd49

000bb190 <strtol>:
   bb190:	4613      	mov	r3, r2
   bb192:	460a      	mov	r2, r1
   bb194:	4601      	mov	r1, r0
   bb196:	4802      	ldr	r0, [pc, #8]	; (bb1a0 <strtol+0x10>)
   bb198:	6800      	ldr	r0, [r0, #0]
   bb19a:	f7ff bf77 	b.w	bb08c <_strtol_l.constprop.0>
   bb19e:	bf00      	nop
   bb1a0:	20035560 	.word	0x20035560

000bb1a4 <__register_exitproc>:
   bb1a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bb1a8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bb264 <__register_exitproc+0xc0>
   bb1ac:	4606      	mov	r6, r0
   bb1ae:	f8d8 0000 	ldr.w	r0, [r8]
   bb1b2:	461f      	mov	r7, r3
   bb1b4:	460d      	mov	r5, r1
   bb1b6:	4691      	mov	r9, r2
   bb1b8:	f000 fbc6 	bl	bb948 <__retarget_lock_acquire_recursive>
   bb1bc:	4b25      	ldr	r3, [pc, #148]	; (bb254 <__register_exitproc+0xb0>)
   bb1be:	681c      	ldr	r4, [r3, #0]
   bb1c0:	b934      	cbnz	r4, bb1d0 <__register_exitproc+0x2c>
   bb1c2:	4c25      	ldr	r4, [pc, #148]	; (bb258 <__register_exitproc+0xb4>)
   bb1c4:	601c      	str	r4, [r3, #0]
   bb1c6:	4b25      	ldr	r3, [pc, #148]	; (bb25c <__register_exitproc+0xb8>)
   bb1c8:	b113      	cbz	r3, bb1d0 <__register_exitproc+0x2c>
   bb1ca:	681b      	ldr	r3, [r3, #0]
   bb1cc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bb1d0:	6863      	ldr	r3, [r4, #4]
   bb1d2:	2b1f      	cmp	r3, #31
   bb1d4:	dd07      	ble.n	bb1e6 <__register_exitproc+0x42>
   bb1d6:	f8d8 0000 	ldr.w	r0, [r8]
   bb1da:	f000 fbb7 	bl	bb94c <__retarget_lock_release_recursive>
   bb1de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bb1e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bb1e6:	b34e      	cbz	r6, bb23c <__register_exitproc+0x98>
   bb1e8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bb1ec:	b988      	cbnz	r0, bb212 <__register_exitproc+0x6e>
   bb1ee:	4b1c      	ldr	r3, [pc, #112]	; (bb260 <__register_exitproc+0xbc>)
   bb1f0:	b923      	cbnz	r3, bb1fc <__register_exitproc+0x58>
   bb1f2:	f8d8 0000 	ldr.w	r0, [r8]
   bb1f6:	f000 fba8 	bl	bb94a <__retarget_lock_release>
   bb1fa:	e7f0      	b.n	bb1de <__register_exitproc+0x3a>
   bb1fc:	f44f 7084 	mov.w	r0, #264	; 0x108
   bb200:	f7fb fc4e 	bl	b6aa0 <malloc>
   bb204:	2800      	cmp	r0, #0
   bb206:	d0f4      	beq.n	bb1f2 <__register_exitproc+0x4e>
   bb208:	2300      	movs	r3, #0
   bb20a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bb20e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bb212:	6863      	ldr	r3, [r4, #4]
   bb214:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bb218:	2201      	movs	r2, #1
   bb21a:	409a      	lsls	r2, r3
   bb21c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bb220:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bb224:	4313      	orrs	r3, r2
   bb226:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bb22a:	2e02      	cmp	r6, #2
   bb22c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bb230:	bf02      	ittt	eq
   bb232:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bb236:	4313      	orreq	r3, r2
   bb238:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bb23c:	6863      	ldr	r3, [r4, #4]
   bb23e:	f8d8 0000 	ldr.w	r0, [r8]
   bb242:	1c5a      	adds	r2, r3, #1
   bb244:	3302      	adds	r3, #2
   bb246:	6062      	str	r2, [r4, #4]
   bb248:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bb24c:	f000 fb7e 	bl	bb94c <__retarget_lock_release_recursive>
   bb250:	2000      	movs	r0, #0
   bb252:	e7c6      	b.n	bb1e2 <__register_exitproc+0x3e>
   bb254:	2003e7e8 	.word	0x2003e7e8
   bb258:	2003e75c 	.word	0x2003e75c
   bb25c:	00000000 	.word	0x00000000
   bb260:	000b6aa1 	.word	0x000b6aa1
   bb264:	200355c4 	.word	0x200355c4

000bb268 <rshift>:
   bb268:	6903      	ldr	r3, [r0, #16]
   bb26a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bb26e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb272:	ea4f 1261 	mov.w	r2, r1, asr #5
   bb276:	f100 0414 	add.w	r4, r0, #20
   bb27a:	dd45      	ble.n	bb308 <rshift+0xa0>
   bb27c:	f011 011f 	ands.w	r1, r1, #31
   bb280:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bb284:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bb288:	d10c      	bne.n	bb2a4 <rshift+0x3c>
   bb28a:	f100 0710 	add.w	r7, r0, #16
   bb28e:	4629      	mov	r1, r5
   bb290:	42b1      	cmp	r1, r6
   bb292:	d334      	bcc.n	bb2fe <rshift+0x96>
   bb294:	1a9b      	subs	r3, r3, r2
   bb296:	009b      	lsls	r3, r3, #2
   bb298:	1eea      	subs	r2, r5, #3
   bb29a:	4296      	cmp	r6, r2
   bb29c:	bf38      	it	cc
   bb29e:	2300      	movcc	r3, #0
   bb2a0:	4423      	add	r3, r4
   bb2a2:	e015      	b.n	bb2d0 <rshift+0x68>
   bb2a4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bb2a8:	f1c1 0820 	rsb	r8, r1, #32
   bb2ac:	40cf      	lsrs	r7, r1
   bb2ae:	f105 0e04 	add.w	lr, r5, #4
   bb2b2:	46a1      	mov	r9, r4
   bb2b4:	4576      	cmp	r6, lr
   bb2b6:	46f4      	mov	ip, lr
   bb2b8:	d815      	bhi.n	bb2e6 <rshift+0x7e>
   bb2ba:	1a9a      	subs	r2, r3, r2
   bb2bc:	0092      	lsls	r2, r2, #2
   bb2be:	3a04      	subs	r2, #4
   bb2c0:	3501      	adds	r5, #1
   bb2c2:	42ae      	cmp	r6, r5
   bb2c4:	bf38      	it	cc
   bb2c6:	2200      	movcc	r2, #0
   bb2c8:	18a3      	adds	r3, r4, r2
   bb2ca:	50a7      	str	r7, [r4, r2]
   bb2cc:	b107      	cbz	r7, bb2d0 <rshift+0x68>
   bb2ce:	3304      	adds	r3, #4
   bb2d0:	1b1a      	subs	r2, r3, r4
   bb2d2:	42a3      	cmp	r3, r4
   bb2d4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bb2d8:	bf08      	it	eq
   bb2da:	2300      	moveq	r3, #0
   bb2dc:	6102      	str	r2, [r0, #16]
   bb2de:	bf08      	it	eq
   bb2e0:	6143      	streq	r3, [r0, #20]
   bb2e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bb2e6:	f8dc c000 	ldr.w	ip, [ip]
   bb2ea:	fa0c fc08 	lsl.w	ip, ip, r8
   bb2ee:	ea4c 0707 	orr.w	r7, ip, r7
   bb2f2:	f849 7b04 	str.w	r7, [r9], #4
   bb2f6:	f85e 7b04 	ldr.w	r7, [lr], #4
   bb2fa:	40cf      	lsrs	r7, r1
   bb2fc:	e7da      	b.n	bb2b4 <rshift+0x4c>
   bb2fe:	f851 cb04 	ldr.w	ip, [r1], #4
   bb302:	f847 cf04 	str.w	ip, [r7, #4]!
   bb306:	e7c3      	b.n	bb290 <rshift+0x28>
   bb308:	4623      	mov	r3, r4
   bb30a:	e7e1      	b.n	bb2d0 <rshift+0x68>

000bb30c <__hexdig_fun>:
   bb30c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bb310:	2b09      	cmp	r3, #9
   bb312:	d802      	bhi.n	bb31a <__hexdig_fun+0xe>
   bb314:	3820      	subs	r0, #32
   bb316:	b2c0      	uxtb	r0, r0
   bb318:	4770      	bx	lr
   bb31a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bb31e:	2b05      	cmp	r3, #5
   bb320:	d801      	bhi.n	bb326 <__hexdig_fun+0x1a>
   bb322:	3847      	subs	r0, #71	; 0x47
   bb324:	e7f7      	b.n	bb316 <__hexdig_fun+0xa>
   bb326:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bb32a:	2b05      	cmp	r3, #5
   bb32c:	d801      	bhi.n	bb332 <__hexdig_fun+0x26>
   bb32e:	3827      	subs	r0, #39	; 0x27
   bb330:	e7f1      	b.n	bb316 <__hexdig_fun+0xa>
   bb332:	2000      	movs	r0, #0
   bb334:	4770      	bx	lr
	...

000bb338 <__gethex>:
   bb338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb33c:	ed2d 8b02 	vpush	{d8}
   bb340:	b089      	sub	sp, #36	; 0x24
   bb342:	ee08 0a10 	vmov	s16, r0
   bb346:	9304      	str	r3, [sp, #16]
   bb348:	4bb4      	ldr	r3, [pc, #720]	; (bb61c <__gethex+0x2e4>)
   bb34a:	681b      	ldr	r3, [r3, #0]
   bb34c:	9301      	str	r3, [sp, #4]
   bb34e:	4618      	mov	r0, r3
   bb350:	468b      	mov	fp, r1
   bb352:	4690      	mov	r8, r2
   bb354:	f7ff f82d 	bl	ba3b2 <strlen>
   bb358:	9b01      	ldr	r3, [sp, #4]
   bb35a:	f8db 2000 	ldr.w	r2, [fp]
   bb35e:	4403      	add	r3, r0
   bb360:	4682      	mov	sl, r0
   bb362:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bb366:	9305      	str	r3, [sp, #20]
   bb368:	1c93      	adds	r3, r2, #2
   bb36a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bb36e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bb372:	32fe      	adds	r2, #254	; 0xfe
   bb374:	18d1      	adds	r1, r2, r3
   bb376:	461f      	mov	r7, r3
   bb378:	f813 0b01 	ldrb.w	r0, [r3], #1
   bb37c:	9100      	str	r1, [sp, #0]
   bb37e:	2830      	cmp	r0, #48	; 0x30
   bb380:	d0f8      	beq.n	bb374 <__gethex+0x3c>
   bb382:	f7ff ffc3 	bl	bb30c <__hexdig_fun>
   bb386:	4604      	mov	r4, r0
   bb388:	2800      	cmp	r0, #0
   bb38a:	d13a      	bne.n	bb402 <__gethex+0xca>
   bb38c:	9901      	ldr	r1, [sp, #4]
   bb38e:	4652      	mov	r2, sl
   bb390:	4638      	mov	r0, r7
   bb392:	f7ff f816 	bl	ba3c2 <strncmp>
   bb396:	4605      	mov	r5, r0
   bb398:	2800      	cmp	r0, #0
   bb39a:	d168      	bne.n	bb46e <__gethex+0x136>
   bb39c:	f817 000a 	ldrb.w	r0, [r7, sl]
   bb3a0:	eb07 060a 	add.w	r6, r7, sl
   bb3a4:	f7ff ffb2 	bl	bb30c <__hexdig_fun>
   bb3a8:	2800      	cmp	r0, #0
   bb3aa:	d062      	beq.n	bb472 <__gethex+0x13a>
   bb3ac:	4633      	mov	r3, r6
   bb3ae:	7818      	ldrb	r0, [r3, #0]
   bb3b0:	2830      	cmp	r0, #48	; 0x30
   bb3b2:	461f      	mov	r7, r3
   bb3b4:	f103 0301 	add.w	r3, r3, #1
   bb3b8:	d0f9      	beq.n	bb3ae <__gethex+0x76>
   bb3ba:	f7ff ffa7 	bl	bb30c <__hexdig_fun>
   bb3be:	2301      	movs	r3, #1
   bb3c0:	fab0 f480 	clz	r4, r0
   bb3c4:	0964      	lsrs	r4, r4, #5
   bb3c6:	4635      	mov	r5, r6
   bb3c8:	9300      	str	r3, [sp, #0]
   bb3ca:	463a      	mov	r2, r7
   bb3cc:	4616      	mov	r6, r2
   bb3ce:	3201      	adds	r2, #1
   bb3d0:	7830      	ldrb	r0, [r6, #0]
   bb3d2:	f7ff ff9b 	bl	bb30c <__hexdig_fun>
   bb3d6:	2800      	cmp	r0, #0
   bb3d8:	d1f8      	bne.n	bb3cc <__gethex+0x94>
   bb3da:	9901      	ldr	r1, [sp, #4]
   bb3dc:	4652      	mov	r2, sl
   bb3de:	4630      	mov	r0, r6
   bb3e0:	f7fe ffef 	bl	ba3c2 <strncmp>
   bb3e4:	b980      	cbnz	r0, bb408 <__gethex+0xd0>
   bb3e6:	b94d      	cbnz	r5, bb3fc <__gethex+0xc4>
   bb3e8:	eb06 050a 	add.w	r5, r6, sl
   bb3ec:	462a      	mov	r2, r5
   bb3ee:	4616      	mov	r6, r2
   bb3f0:	3201      	adds	r2, #1
   bb3f2:	7830      	ldrb	r0, [r6, #0]
   bb3f4:	f7ff ff8a 	bl	bb30c <__hexdig_fun>
   bb3f8:	2800      	cmp	r0, #0
   bb3fa:	d1f8      	bne.n	bb3ee <__gethex+0xb6>
   bb3fc:	1bad      	subs	r5, r5, r6
   bb3fe:	00ad      	lsls	r5, r5, #2
   bb400:	e004      	b.n	bb40c <__gethex+0xd4>
   bb402:	2400      	movs	r4, #0
   bb404:	4625      	mov	r5, r4
   bb406:	e7e0      	b.n	bb3ca <__gethex+0x92>
   bb408:	2d00      	cmp	r5, #0
   bb40a:	d1f7      	bne.n	bb3fc <__gethex+0xc4>
   bb40c:	7833      	ldrb	r3, [r6, #0]
   bb40e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bb412:	2b50      	cmp	r3, #80	; 0x50
   bb414:	d13b      	bne.n	bb48e <__gethex+0x156>
   bb416:	7873      	ldrb	r3, [r6, #1]
   bb418:	2b2b      	cmp	r3, #43	; 0x2b
   bb41a:	d02c      	beq.n	bb476 <__gethex+0x13e>
   bb41c:	2b2d      	cmp	r3, #45	; 0x2d
   bb41e:	d02e      	beq.n	bb47e <__gethex+0x146>
   bb420:	1c71      	adds	r1, r6, #1
   bb422:	f04f 0900 	mov.w	r9, #0
   bb426:	7808      	ldrb	r0, [r1, #0]
   bb428:	f7ff ff70 	bl	bb30c <__hexdig_fun>
   bb42c:	1e43      	subs	r3, r0, #1
   bb42e:	b2db      	uxtb	r3, r3
   bb430:	2b18      	cmp	r3, #24
   bb432:	d82c      	bhi.n	bb48e <__gethex+0x156>
   bb434:	f1a0 0210 	sub.w	r2, r0, #16
   bb438:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bb43c:	f7ff ff66 	bl	bb30c <__hexdig_fun>
   bb440:	1e43      	subs	r3, r0, #1
   bb442:	b2db      	uxtb	r3, r3
   bb444:	2b18      	cmp	r3, #24
   bb446:	d91d      	bls.n	bb484 <__gethex+0x14c>
   bb448:	f1b9 0f00 	cmp.w	r9, #0
   bb44c:	d000      	beq.n	bb450 <__gethex+0x118>
   bb44e:	4252      	negs	r2, r2
   bb450:	4415      	add	r5, r2
   bb452:	f8cb 1000 	str.w	r1, [fp]
   bb456:	b1e4      	cbz	r4, bb492 <__gethex+0x15a>
   bb458:	9b00      	ldr	r3, [sp, #0]
   bb45a:	2b00      	cmp	r3, #0
   bb45c:	bf14      	ite	ne
   bb45e:	2700      	movne	r7, #0
   bb460:	2706      	moveq	r7, #6
   bb462:	4638      	mov	r0, r7
   bb464:	b009      	add	sp, #36	; 0x24
   bb466:	ecbd 8b02 	vpop	{d8}
   bb46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb46e:	463e      	mov	r6, r7
   bb470:	4625      	mov	r5, r4
   bb472:	2401      	movs	r4, #1
   bb474:	e7ca      	b.n	bb40c <__gethex+0xd4>
   bb476:	f04f 0900 	mov.w	r9, #0
   bb47a:	1cb1      	adds	r1, r6, #2
   bb47c:	e7d3      	b.n	bb426 <__gethex+0xee>
   bb47e:	f04f 0901 	mov.w	r9, #1
   bb482:	e7fa      	b.n	bb47a <__gethex+0x142>
   bb484:	230a      	movs	r3, #10
   bb486:	fb03 0202 	mla	r2, r3, r2, r0
   bb48a:	3a10      	subs	r2, #16
   bb48c:	e7d4      	b.n	bb438 <__gethex+0x100>
   bb48e:	4631      	mov	r1, r6
   bb490:	e7df      	b.n	bb452 <__gethex+0x11a>
   bb492:	1bf3      	subs	r3, r6, r7
   bb494:	3b01      	subs	r3, #1
   bb496:	4621      	mov	r1, r4
   bb498:	2b07      	cmp	r3, #7
   bb49a:	dc0b      	bgt.n	bb4b4 <__gethex+0x17c>
   bb49c:	ee18 0a10 	vmov	r0, s16
   bb4a0:	f000 fa68 	bl	bb974 <_Balloc>
   bb4a4:	4604      	mov	r4, r0
   bb4a6:	b940      	cbnz	r0, bb4ba <__gethex+0x182>
   bb4a8:	4b5d      	ldr	r3, [pc, #372]	; (bb620 <__gethex+0x2e8>)
   bb4aa:	4602      	mov	r2, r0
   bb4ac:	21de      	movs	r1, #222	; 0xde
   bb4ae:	485d      	ldr	r0, [pc, #372]	; (bb624 <__gethex+0x2ec>)
   bb4b0:	f7fb fb2e 	bl	b6b10 <__assert_func>
   bb4b4:	3101      	adds	r1, #1
   bb4b6:	105b      	asrs	r3, r3, #1
   bb4b8:	e7ee      	b.n	bb498 <__gethex+0x160>
   bb4ba:	f100 0914 	add.w	r9, r0, #20
   bb4be:	f04f 0b00 	mov.w	fp, #0
   bb4c2:	f1ca 0301 	rsb	r3, sl, #1
   bb4c6:	f8cd 9008 	str.w	r9, [sp, #8]
   bb4ca:	f8cd b000 	str.w	fp, [sp]
   bb4ce:	9306      	str	r3, [sp, #24]
   bb4d0:	42b7      	cmp	r7, r6
   bb4d2:	d340      	bcc.n	bb556 <__gethex+0x21e>
   bb4d4:	9802      	ldr	r0, [sp, #8]
   bb4d6:	9b00      	ldr	r3, [sp, #0]
   bb4d8:	f840 3b04 	str.w	r3, [r0], #4
   bb4dc:	eba0 0009 	sub.w	r0, r0, r9
   bb4e0:	1080      	asrs	r0, r0, #2
   bb4e2:	0146      	lsls	r6, r0, #5
   bb4e4:	6120      	str	r0, [r4, #16]
   bb4e6:	4618      	mov	r0, r3
   bb4e8:	f000 fb36 	bl	bbb58 <__hi0bits>
   bb4ec:	1a30      	subs	r0, r6, r0
   bb4ee:	f8d8 6000 	ldr.w	r6, [r8]
   bb4f2:	42b0      	cmp	r0, r6
   bb4f4:	dd63      	ble.n	bb5be <__gethex+0x286>
   bb4f6:	1b87      	subs	r7, r0, r6
   bb4f8:	4639      	mov	r1, r7
   bb4fa:	4620      	mov	r0, r4
   bb4fc:	f000 feda 	bl	bc2b4 <__any_on>
   bb500:	4682      	mov	sl, r0
   bb502:	b1a8      	cbz	r0, bb530 <__gethex+0x1f8>
   bb504:	1e7b      	subs	r3, r7, #1
   bb506:	1159      	asrs	r1, r3, #5
   bb508:	f003 021f 	and.w	r2, r3, #31
   bb50c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bb510:	f04f 0a01 	mov.w	sl, #1
   bb514:	fa0a f202 	lsl.w	r2, sl, r2
   bb518:	420a      	tst	r2, r1
   bb51a:	d009      	beq.n	bb530 <__gethex+0x1f8>
   bb51c:	4553      	cmp	r3, sl
   bb51e:	dd05      	ble.n	bb52c <__gethex+0x1f4>
   bb520:	1eb9      	subs	r1, r7, #2
   bb522:	4620      	mov	r0, r4
   bb524:	f000 fec6 	bl	bc2b4 <__any_on>
   bb528:	2800      	cmp	r0, #0
   bb52a:	d145      	bne.n	bb5b8 <__gethex+0x280>
   bb52c:	f04f 0a02 	mov.w	sl, #2
   bb530:	4639      	mov	r1, r7
   bb532:	4620      	mov	r0, r4
   bb534:	f7ff fe98 	bl	bb268 <rshift>
   bb538:	443d      	add	r5, r7
   bb53a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bb53e:	42ab      	cmp	r3, r5
   bb540:	da4c      	bge.n	bb5dc <__gethex+0x2a4>
   bb542:	ee18 0a10 	vmov	r0, s16
   bb546:	4621      	mov	r1, r4
   bb548:	f000 fa54 	bl	bb9f4 <_Bfree>
   bb54c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bb54e:	2300      	movs	r3, #0
   bb550:	6013      	str	r3, [r2, #0]
   bb552:	27a3      	movs	r7, #163	; 0xa3
   bb554:	e785      	b.n	bb462 <__gethex+0x12a>
   bb556:	1e73      	subs	r3, r6, #1
   bb558:	9a05      	ldr	r2, [sp, #20]
   bb55a:	9303      	str	r3, [sp, #12]
   bb55c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bb560:	4293      	cmp	r3, r2
   bb562:	d019      	beq.n	bb598 <__gethex+0x260>
   bb564:	f1bb 0f20 	cmp.w	fp, #32
   bb568:	d107      	bne.n	bb57a <__gethex+0x242>
   bb56a:	9b02      	ldr	r3, [sp, #8]
   bb56c:	9a00      	ldr	r2, [sp, #0]
   bb56e:	f843 2b04 	str.w	r2, [r3], #4
   bb572:	9302      	str	r3, [sp, #8]
   bb574:	2300      	movs	r3, #0
   bb576:	9300      	str	r3, [sp, #0]
   bb578:	469b      	mov	fp, r3
   bb57a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bb57e:	f7ff fec5 	bl	bb30c <__hexdig_fun>
   bb582:	9b00      	ldr	r3, [sp, #0]
   bb584:	f000 000f 	and.w	r0, r0, #15
   bb588:	fa00 f00b 	lsl.w	r0, r0, fp
   bb58c:	4303      	orrs	r3, r0
   bb58e:	9300      	str	r3, [sp, #0]
   bb590:	f10b 0b04 	add.w	fp, fp, #4
   bb594:	9b03      	ldr	r3, [sp, #12]
   bb596:	e00d      	b.n	bb5b4 <__gethex+0x27c>
   bb598:	9b03      	ldr	r3, [sp, #12]
   bb59a:	9a06      	ldr	r2, [sp, #24]
   bb59c:	4413      	add	r3, r2
   bb59e:	42bb      	cmp	r3, r7
   bb5a0:	d3e0      	bcc.n	bb564 <__gethex+0x22c>
   bb5a2:	4618      	mov	r0, r3
   bb5a4:	9901      	ldr	r1, [sp, #4]
   bb5a6:	9307      	str	r3, [sp, #28]
   bb5a8:	4652      	mov	r2, sl
   bb5aa:	f7fe ff0a 	bl	ba3c2 <strncmp>
   bb5ae:	9b07      	ldr	r3, [sp, #28]
   bb5b0:	2800      	cmp	r0, #0
   bb5b2:	d1d7      	bne.n	bb564 <__gethex+0x22c>
   bb5b4:	461e      	mov	r6, r3
   bb5b6:	e78b      	b.n	bb4d0 <__gethex+0x198>
   bb5b8:	f04f 0a03 	mov.w	sl, #3
   bb5bc:	e7b8      	b.n	bb530 <__gethex+0x1f8>
   bb5be:	da0a      	bge.n	bb5d6 <__gethex+0x29e>
   bb5c0:	1a37      	subs	r7, r6, r0
   bb5c2:	4621      	mov	r1, r4
   bb5c4:	ee18 0a10 	vmov	r0, s16
   bb5c8:	463a      	mov	r2, r7
   bb5ca:	f000 fc2f 	bl	bbe2c <__lshift>
   bb5ce:	1bed      	subs	r5, r5, r7
   bb5d0:	4604      	mov	r4, r0
   bb5d2:	f100 0914 	add.w	r9, r0, #20
   bb5d6:	f04f 0a00 	mov.w	sl, #0
   bb5da:	e7ae      	b.n	bb53a <__gethex+0x202>
   bb5dc:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bb5e0:	42a8      	cmp	r0, r5
   bb5e2:	dd72      	ble.n	bb6ca <__gethex+0x392>
   bb5e4:	1b45      	subs	r5, r0, r5
   bb5e6:	42ae      	cmp	r6, r5
   bb5e8:	dc36      	bgt.n	bb658 <__gethex+0x320>
   bb5ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bb5ee:	2b02      	cmp	r3, #2
   bb5f0:	d02a      	beq.n	bb648 <__gethex+0x310>
   bb5f2:	2b03      	cmp	r3, #3
   bb5f4:	d02c      	beq.n	bb650 <__gethex+0x318>
   bb5f6:	2b01      	cmp	r3, #1
   bb5f8:	d11c      	bne.n	bb634 <__gethex+0x2fc>
   bb5fa:	42ae      	cmp	r6, r5
   bb5fc:	d11a      	bne.n	bb634 <__gethex+0x2fc>
   bb5fe:	2e01      	cmp	r6, #1
   bb600:	d112      	bne.n	bb628 <__gethex+0x2f0>
   bb602:	9a04      	ldr	r2, [sp, #16]
   bb604:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bb608:	6013      	str	r3, [r2, #0]
   bb60a:	2301      	movs	r3, #1
   bb60c:	6123      	str	r3, [r4, #16]
   bb60e:	f8c9 3000 	str.w	r3, [r9]
   bb612:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bb614:	2762      	movs	r7, #98	; 0x62
   bb616:	601c      	str	r4, [r3, #0]
   bb618:	e723      	b.n	bb462 <__gethex+0x12a>
   bb61a:	bf00      	nop
   bb61c:	000bcebc 	.word	0x000bcebc
   bb620:	000bce49 	.word	0x000bce49
   bb624:	000bce5a 	.word	0x000bce5a
   bb628:	1e71      	subs	r1, r6, #1
   bb62a:	4620      	mov	r0, r4
   bb62c:	f000 fe42 	bl	bc2b4 <__any_on>
   bb630:	2800      	cmp	r0, #0
   bb632:	d1e6      	bne.n	bb602 <__gethex+0x2ca>
   bb634:	ee18 0a10 	vmov	r0, s16
   bb638:	4621      	mov	r1, r4
   bb63a:	f000 f9db 	bl	bb9f4 <_Bfree>
   bb63e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bb640:	2300      	movs	r3, #0
   bb642:	6013      	str	r3, [r2, #0]
   bb644:	2750      	movs	r7, #80	; 0x50
   bb646:	e70c      	b.n	bb462 <__gethex+0x12a>
   bb648:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb64a:	2b00      	cmp	r3, #0
   bb64c:	d1f2      	bne.n	bb634 <__gethex+0x2fc>
   bb64e:	e7d8      	b.n	bb602 <__gethex+0x2ca>
   bb650:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb652:	2b00      	cmp	r3, #0
   bb654:	d1d5      	bne.n	bb602 <__gethex+0x2ca>
   bb656:	e7ed      	b.n	bb634 <__gethex+0x2fc>
   bb658:	1e6f      	subs	r7, r5, #1
   bb65a:	f1ba 0f00 	cmp.w	sl, #0
   bb65e:	d131      	bne.n	bb6c4 <__gethex+0x38c>
   bb660:	b127      	cbz	r7, bb66c <__gethex+0x334>
   bb662:	4639      	mov	r1, r7
   bb664:	4620      	mov	r0, r4
   bb666:	f000 fe25 	bl	bc2b4 <__any_on>
   bb66a:	4682      	mov	sl, r0
   bb66c:	117b      	asrs	r3, r7, #5
   bb66e:	2101      	movs	r1, #1
   bb670:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bb674:	f007 071f 	and.w	r7, r7, #31
   bb678:	fa01 f707 	lsl.w	r7, r1, r7
   bb67c:	421f      	tst	r7, r3
   bb67e:	4629      	mov	r1, r5
   bb680:	4620      	mov	r0, r4
   bb682:	bf18      	it	ne
   bb684:	f04a 0a02 	orrne.w	sl, sl, #2
   bb688:	1b76      	subs	r6, r6, r5
   bb68a:	f7ff fded 	bl	bb268 <rshift>
   bb68e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bb692:	2702      	movs	r7, #2
   bb694:	f1ba 0f00 	cmp.w	sl, #0
   bb698:	d048      	beq.n	bb72c <__gethex+0x3f4>
   bb69a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bb69e:	2b02      	cmp	r3, #2
   bb6a0:	d015      	beq.n	bb6ce <__gethex+0x396>
   bb6a2:	2b03      	cmp	r3, #3
   bb6a4:	d017      	beq.n	bb6d6 <__gethex+0x39e>
   bb6a6:	2b01      	cmp	r3, #1
   bb6a8:	d109      	bne.n	bb6be <__gethex+0x386>
   bb6aa:	f01a 0f02 	tst.w	sl, #2
   bb6ae:	d006      	beq.n	bb6be <__gethex+0x386>
   bb6b0:	f8d9 0000 	ldr.w	r0, [r9]
   bb6b4:	ea4a 0a00 	orr.w	sl, sl, r0
   bb6b8:	f01a 0f01 	tst.w	sl, #1
   bb6bc:	d10e      	bne.n	bb6dc <__gethex+0x3a4>
   bb6be:	f047 0710 	orr.w	r7, r7, #16
   bb6c2:	e033      	b.n	bb72c <__gethex+0x3f4>
   bb6c4:	f04f 0a01 	mov.w	sl, #1
   bb6c8:	e7d0      	b.n	bb66c <__gethex+0x334>
   bb6ca:	2701      	movs	r7, #1
   bb6cc:	e7e2      	b.n	bb694 <__gethex+0x35c>
   bb6ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb6d0:	f1c3 0301 	rsb	r3, r3, #1
   bb6d4:	9315      	str	r3, [sp, #84]	; 0x54
   bb6d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb6d8:	2b00      	cmp	r3, #0
   bb6da:	d0f0      	beq.n	bb6be <__gethex+0x386>
   bb6dc:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bb6e0:	f104 0314 	add.w	r3, r4, #20
   bb6e4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bb6e8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bb6ec:	f04f 0c00 	mov.w	ip, #0
   bb6f0:	4618      	mov	r0, r3
   bb6f2:	f853 2b04 	ldr.w	r2, [r3], #4
   bb6f6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bb6fa:	d01c      	beq.n	bb736 <__gethex+0x3fe>
   bb6fc:	3201      	adds	r2, #1
   bb6fe:	6002      	str	r2, [r0, #0]
   bb700:	2f02      	cmp	r7, #2
   bb702:	f104 0314 	add.w	r3, r4, #20
   bb706:	d13f      	bne.n	bb788 <__gethex+0x450>
   bb708:	f8d8 2000 	ldr.w	r2, [r8]
   bb70c:	3a01      	subs	r2, #1
   bb70e:	42b2      	cmp	r2, r6
   bb710:	d10a      	bne.n	bb728 <__gethex+0x3f0>
   bb712:	1171      	asrs	r1, r6, #5
   bb714:	2201      	movs	r2, #1
   bb716:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bb71a:	f006 061f 	and.w	r6, r6, #31
   bb71e:	fa02 f606 	lsl.w	r6, r2, r6
   bb722:	421e      	tst	r6, r3
   bb724:	bf18      	it	ne
   bb726:	4617      	movne	r7, r2
   bb728:	f047 0720 	orr.w	r7, r7, #32
   bb72c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bb72e:	601c      	str	r4, [r3, #0]
   bb730:	9b04      	ldr	r3, [sp, #16]
   bb732:	601d      	str	r5, [r3, #0]
   bb734:	e695      	b.n	bb462 <__gethex+0x12a>
   bb736:	4299      	cmp	r1, r3
   bb738:	f843 cc04 	str.w	ip, [r3, #-4]
   bb73c:	d8d8      	bhi.n	bb6f0 <__gethex+0x3b8>
   bb73e:	68a3      	ldr	r3, [r4, #8]
   bb740:	459b      	cmp	fp, r3
   bb742:	db19      	blt.n	bb778 <__gethex+0x440>
   bb744:	6861      	ldr	r1, [r4, #4]
   bb746:	ee18 0a10 	vmov	r0, s16
   bb74a:	3101      	adds	r1, #1
   bb74c:	f000 f912 	bl	bb974 <_Balloc>
   bb750:	4681      	mov	r9, r0
   bb752:	b918      	cbnz	r0, bb75c <__gethex+0x424>
   bb754:	4b1a      	ldr	r3, [pc, #104]	; (bb7c0 <__gethex+0x488>)
   bb756:	4602      	mov	r2, r0
   bb758:	2184      	movs	r1, #132	; 0x84
   bb75a:	e6a8      	b.n	bb4ae <__gethex+0x176>
   bb75c:	6922      	ldr	r2, [r4, #16]
   bb75e:	3202      	adds	r2, #2
   bb760:	f104 010c 	add.w	r1, r4, #12
   bb764:	0092      	lsls	r2, r2, #2
   bb766:	300c      	adds	r0, #12
   bb768:	f7fe fda3 	bl	ba2b2 <memcpy>
   bb76c:	4621      	mov	r1, r4
   bb76e:	ee18 0a10 	vmov	r0, s16
   bb772:	f000 f93f 	bl	bb9f4 <_Bfree>
   bb776:	464c      	mov	r4, r9
   bb778:	6923      	ldr	r3, [r4, #16]
   bb77a:	1c5a      	adds	r2, r3, #1
   bb77c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bb780:	6122      	str	r2, [r4, #16]
   bb782:	2201      	movs	r2, #1
   bb784:	615a      	str	r2, [r3, #20]
   bb786:	e7bb      	b.n	bb700 <__gethex+0x3c8>
   bb788:	6922      	ldr	r2, [r4, #16]
   bb78a:	455a      	cmp	r2, fp
   bb78c:	dd0b      	ble.n	bb7a6 <__gethex+0x46e>
   bb78e:	2101      	movs	r1, #1
   bb790:	4620      	mov	r0, r4
   bb792:	f7ff fd69 	bl	bb268 <rshift>
   bb796:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bb79a:	3501      	adds	r5, #1
   bb79c:	42ab      	cmp	r3, r5
   bb79e:	f6ff aed0 	blt.w	bb542 <__gethex+0x20a>
   bb7a2:	2701      	movs	r7, #1
   bb7a4:	e7c0      	b.n	bb728 <__gethex+0x3f0>
   bb7a6:	f016 061f 	ands.w	r6, r6, #31
   bb7aa:	d0fa      	beq.n	bb7a2 <__gethex+0x46a>
   bb7ac:	4453      	add	r3, sl
   bb7ae:	f1c6 0620 	rsb	r6, r6, #32
   bb7b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bb7b6:	f000 f9cf 	bl	bbb58 <__hi0bits>
   bb7ba:	42b0      	cmp	r0, r6
   bb7bc:	dbe7      	blt.n	bb78e <__gethex+0x456>
   bb7be:	e7f0      	b.n	bb7a2 <__gethex+0x46a>
   bb7c0:	000bce49 	.word	0x000bce49

000bb7c4 <L_shift>:
   bb7c4:	f1c2 0208 	rsb	r2, r2, #8
   bb7c8:	0092      	lsls	r2, r2, #2
   bb7ca:	b570      	push	{r4, r5, r6, lr}
   bb7cc:	f1c2 0620 	rsb	r6, r2, #32
   bb7d0:	6843      	ldr	r3, [r0, #4]
   bb7d2:	6804      	ldr	r4, [r0, #0]
   bb7d4:	fa03 f506 	lsl.w	r5, r3, r6
   bb7d8:	432c      	orrs	r4, r5
   bb7da:	40d3      	lsrs	r3, r2
   bb7dc:	6004      	str	r4, [r0, #0]
   bb7de:	f840 3f04 	str.w	r3, [r0, #4]!
   bb7e2:	4288      	cmp	r0, r1
   bb7e4:	d3f4      	bcc.n	bb7d0 <L_shift+0xc>
   bb7e6:	bd70      	pop	{r4, r5, r6, pc}

000bb7e8 <__match>:
   bb7e8:	b530      	push	{r4, r5, lr}
   bb7ea:	6803      	ldr	r3, [r0, #0]
   bb7ec:	3301      	adds	r3, #1
   bb7ee:	f811 4b01 	ldrb.w	r4, [r1], #1
   bb7f2:	b914      	cbnz	r4, bb7fa <__match+0x12>
   bb7f4:	6003      	str	r3, [r0, #0]
   bb7f6:	2001      	movs	r0, #1
   bb7f8:	bd30      	pop	{r4, r5, pc}
   bb7fa:	f813 2b01 	ldrb.w	r2, [r3], #1
   bb7fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bb802:	2d19      	cmp	r5, #25
   bb804:	bf98      	it	ls
   bb806:	3220      	addls	r2, #32
   bb808:	42a2      	cmp	r2, r4
   bb80a:	d0f0      	beq.n	bb7ee <__match+0x6>
   bb80c:	2000      	movs	r0, #0
   bb80e:	e7f3      	b.n	bb7f8 <__match+0x10>

000bb810 <__hexnan>:
   bb810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb814:	680b      	ldr	r3, [r1, #0]
   bb816:	115e      	asrs	r6, r3, #5
   bb818:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bb81c:	f013 031f 	ands.w	r3, r3, #31
   bb820:	b087      	sub	sp, #28
   bb822:	bf18      	it	ne
   bb824:	3604      	addne	r6, #4
   bb826:	2500      	movs	r5, #0
   bb828:	1f37      	subs	r7, r6, #4
   bb82a:	4690      	mov	r8, r2
   bb82c:	6802      	ldr	r2, [r0, #0]
   bb82e:	9301      	str	r3, [sp, #4]
   bb830:	4682      	mov	sl, r0
   bb832:	f846 5c04 	str.w	r5, [r6, #-4]
   bb836:	46b9      	mov	r9, r7
   bb838:	463c      	mov	r4, r7
   bb83a:	9502      	str	r5, [sp, #8]
   bb83c:	46ab      	mov	fp, r5
   bb83e:	7851      	ldrb	r1, [r2, #1]
   bb840:	1c53      	adds	r3, r2, #1
   bb842:	9303      	str	r3, [sp, #12]
   bb844:	b341      	cbz	r1, bb898 <__hexnan+0x88>
   bb846:	4608      	mov	r0, r1
   bb848:	9205      	str	r2, [sp, #20]
   bb84a:	9104      	str	r1, [sp, #16]
   bb84c:	f7ff fd5e 	bl	bb30c <__hexdig_fun>
   bb850:	2800      	cmp	r0, #0
   bb852:	d14f      	bne.n	bb8f4 <__hexnan+0xe4>
   bb854:	9904      	ldr	r1, [sp, #16]
   bb856:	9a05      	ldr	r2, [sp, #20]
   bb858:	2920      	cmp	r1, #32
   bb85a:	d818      	bhi.n	bb88e <__hexnan+0x7e>
   bb85c:	9b02      	ldr	r3, [sp, #8]
   bb85e:	459b      	cmp	fp, r3
   bb860:	dd13      	ble.n	bb88a <__hexnan+0x7a>
   bb862:	454c      	cmp	r4, r9
   bb864:	d206      	bcs.n	bb874 <__hexnan+0x64>
   bb866:	2d07      	cmp	r5, #7
   bb868:	dc04      	bgt.n	bb874 <__hexnan+0x64>
   bb86a:	462a      	mov	r2, r5
   bb86c:	4649      	mov	r1, r9
   bb86e:	4620      	mov	r0, r4
   bb870:	f7ff ffa8 	bl	bb7c4 <L_shift>
   bb874:	4544      	cmp	r4, r8
   bb876:	d950      	bls.n	bb91a <__hexnan+0x10a>
   bb878:	2300      	movs	r3, #0
   bb87a:	f1a4 0904 	sub.w	r9, r4, #4
   bb87e:	f844 3c04 	str.w	r3, [r4, #-4]
   bb882:	f8cd b008 	str.w	fp, [sp, #8]
   bb886:	464c      	mov	r4, r9
   bb888:	461d      	mov	r5, r3
   bb88a:	9a03      	ldr	r2, [sp, #12]
   bb88c:	e7d7      	b.n	bb83e <__hexnan+0x2e>
   bb88e:	2929      	cmp	r1, #41	; 0x29
   bb890:	d156      	bne.n	bb940 <__hexnan+0x130>
   bb892:	3202      	adds	r2, #2
   bb894:	f8ca 2000 	str.w	r2, [sl]
   bb898:	f1bb 0f00 	cmp.w	fp, #0
   bb89c:	d050      	beq.n	bb940 <__hexnan+0x130>
   bb89e:	454c      	cmp	r4, r9
   bb8a0:	d206      	bcs.n	bb8b0 <__hexnan+0xa0>
   bb8a2:	2d07      	cmp	r5, #7
   bb8a4:	dc04      	bgt.n	bb8b0 <__hexnan+0xa0>
   bb8a6:	462a      	mov	r2, r5
   bb8a8:	4649      	mov	r1, r9
   bb8aa:	4620      	mov	r0, r4
   bb8ac:	f7ff ff8a 	bl	bb7c4 <L_shift>
   bb8b0:	4544      	cmp	r4, r8
   bb8b2:	d934      	bls.n	bb91e <__hexnan+0x10e>
   bb8b4:	f1a8 0204 	sub.w	r2, r8, #4
   bb8b8:	4623      	mov	r3, r4
   bb8ba:	f853 1b04 	ldr.w	r1, [r3], #4
   bb8be:	f842 1f04 	str.w	r1, [r2, #4]!
   bb8c2:	429f      	cmp	r7, r3
   bb8c4:	d2f9      	bcs.n	bb8ba <__hexnan+0xaa>
   bb8c6:	1b3b      	subs	r3, r7, r4
   bb8c8:	f023 0303 	bic.w	r3, r3, #3
   bb8cc:	3304      	adds	r3, #4
   bb8ce:	3401      	adds	r4, #1
   bb8d0:	3e03      	subs	r6, #3
   bb8d2:	42b4      	cmp	r4, r6
   bb8d4:	bf88      	it	hi
   bb8d6:	2304      	movhi	r3, #4
   bb8d8:	4443      	add	r3, r8
   bb8da:	2200      	movs	r2, #0
   bb8dc:	f843 2b04 	str.w	r2, [r3], #4
   bb8e0:	429f      	cmp	r7, r3
   bb8e2:	d2fb      	bcs.n	bb8dc <__hexnan+0xcc>
   bb8e4:	683b      	ldr	r3, [r7, #0]
   bb8e6:	b91b      	cbnz	r3, bb8f0 <__hexnan+0xe0>
   bb8e8:	4547      	cmp	r7, r8
   bb8ea:	d127      	bne.n	bb93c <__hexnan+0x12c>
   bb8ec:	2301      	movs	r3, #1
   bb8ee:	603b      	str	r3, [r7, #0]
   bb8f0:	2005      	movs	r0, #5
   bb8f2:	e026      	b.n	bb942 <__hexnan+0x132>
   bb8f4:	3501      	adds	r5, #1
   bb8f6:	2d08      	cmp	r5, #8
   bb8f8:	f10b 0b01 	add.w	fp, fp, #1
   bb8fc:	dd06      	ble.n	bb90c <__hexnan+0xfc>
   bb8fe:	4544      	cmp	r4, r8
   bb900:	d9c3      	bls.n	bb88a <__hexnan+0x7a>
   bb902:	2300      	movs	r3, #0
   bb904:	f844 3c04 	str.w	r3, [r4, #-4]
   bb908:	2501      	movs	r5, #1
   bb90a:	3c04      	subs	r4, #4
   bb90c:	6822      	ldr	r2, [r4, #0]
   bb90e:	f000 000f 	and.w	r0, r0, #15
   bb912:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bb916:	6022      	str	r2, [r4, #0]
   bb918:	e7b7      	b.n	bb88a <__hexnan+0x7a>
   bb91a:	2508      	movs	r5, #8
   bb91c:	e7b5      	b.n	bb88a <__hexnan+0x7a>
   bb91e:	9b01      	ldr	r3, [sp, #4]
   bb920:	2b00      	cmp	r3, #0
   bb922:	d0df      	beq.n	bb8e4 <__hexnan+0xd4>
   bb924:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb928:	f1c3 0320 	rsb	r3, r3, #32
   bb92c:	fa22 f303 	lsr.w	r3, r2, r3
   bb930:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bb934:	401a      	ands	r2, r3
   bb936:	f846 2c04 	str.w	r2, [r6, #-4]
   bb93a:	e7d3      	b.n	bb8e4 <__hexnan+0xd4>
   bb93c:	3f04      	subs	r7, #4
   bb93e:	e7d1      	b.n	bb8e4 <__hexnan+0xd4>
   bb940:	2004      	movs	r0, #4
   bb942:	b007      	add	sp, #28
   bb944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb948 <__retarget_lock_acquire_recursive>:
   bb948:	4770      	bx	lr

000bb94a <__retarget_lock_release>:
   bb94a:	4770      	bx	lr

000bb94c <__retarget_lock_release_recursive>:
   bb94c:	4770      	bx	lr

000bb94e <__ascii_mbtowc>:
   bb94e:	b082      	sub	sp, #8
   bb950:	b901      	cbnz	r1, bb954 <__ascii_mbtowc+0x6>
   bb952:	a901      	add	r1, sp, #4
   bb954:	b142      	cbz	r2, bb968 <__ascii_mbtowc+0x1a>
   bb956:	b14b      	cbz	r3, bb96c <__ascii_mbtowc+0x1e>
   bb958:	7813      	ldrb	r3, [r2, #0]
   bb95a:	600b      	str	r3, [r1, #0]
   bb95c:	7812      	ldrb	r2, [r2, #0]
   bb95e:	1e10      	subs	r0, r2, #0
   bb960:	bf18      	it	ne
   bb962:	2001      	movne	r0, #1
   bb964:	b002      	add	sp, #8
   bb966:	4770      	bx	lr
   bb968:	4610      	mov	r0, r2
   bb96a:	e7fb      	b.n	bb964 <__ascii_mbtowc+0x16>
   bb96c:	f06f 0001 	mvn.w	r0, #1
   bb970:	e7f8      	b.n	bb964 <__ascii_mbtowc+0x16>
	...

000bb974 <_Balloc>:
   bb974:	b570      	push	{r4, r5, r6, lr}
   bb976:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bb978:	4604      	mov	r4, r0
   bb97a:	460d      	mov	r5, r1
   bb97c:	b976      	cbnz	r6, bb99c <_Balloc+0x28>
   bb97e:	2010      	movs	r0, #16
   bb980:	f7fb f88e 	bl	b6aa0 <malloc>
   bb984:	4602      	mov	r2, r0
   bb986:	6260      	str	r0, [r4, #36]	; 0x24
   bb988:	b920      	cbnz	r0, bb994 <_Balloc+0x20>
   bb98a:	4b18      	ldr	r3, [pc, #96]	; (bb9ec <_Balloc+0x78>)
   bb98c:	4818      	ldr	r0, [pc, #96]	; (bb9f0 <_Balloc+0x7c>)
   bb98e:	2166      	movs	r1, #102	; 0x66
   bb990:	f7fb f8be 	bl	b6b10 <__assert_func>
   bb994:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bb998:	6006      	str	r6, [r0, #0]
   bb99a:	60c6      	str	r6, [r0, #12]
   bb99c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bb99e:	68f3      	ldr	r3, [r6, #12]
   bb9a0:	b183      	cbz	r3, bb9c4 <_Balloc+0x50>
   bb9a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bb9a4:	68db      	ldr	r3, [r3, #12]
   bb9a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bb9aa:	b9b8      	cbnz	r0, bb9dc <_Balloc+0x68>
   bb9ac:	2101      	movs	r1, #1
   bb9ae:	fa01 f605 	lsl.w	r6, r1, r5
   bb9b2:	1d72      	adds	r2, r6, #5
   bb9b4:	0092      	lsls	r2, r2, #2
   bb9b6:	4620      	mov	r0, r4
   bb9b8:	f000 fc9d 	bl	bc2f6 <_calloc_r>
   bb9bc:	b160      	cbz	r0, bb9d8 <_Balloc+0x64>
   bb9be:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bb9c2:	e00e      	b.n	bb9e2 <_Balloc+0x6e>
   bb9c4:	2221      	movs	r2, #33	; 0x21
   bb9c6:	2104      	movs	r1, #4
   bb9c8:	4620      	mov	r0, r4
   bb9ca:	f000 fc94 	bl	bc2f6 <_calloc_r>
   bb9ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bb9d0:	60f0      	str	r0, [r6, #12]
   bb9d2:	68db      	ldr	r3, [r3, #12]
   bb9d4:	2b00      	cmp	r3, #0
   bb9d6:	d1e4      	bne.n	bb9a2 <_Balloc+0x2e>
   bb9d8:	2000      	movs	r0, #0
   bb9da:	bd70      	pop	{r4, r5, r6, pc}
   bb9dc:	6802      	ldr	r2, [r0, #0]
   bb9de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bb9e2:	2300      	movs	r3, #0
   bb9e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bb9e8:	e7f7      	b.n	bb9da <_Balloc+0x66>
   bb9ea:	bf00      	nop
   bb9ec:	000bcc79 	.word	0x000bcc79
   bb9f0:	000bced0 	.word	0x000bced0

000bb9f4 <_Bfree>:
   bb9f4:	b570      	push	{r4, r5, r6, lr}
   bb9f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bb9f8:	4605      	mov	r5, r0
   bb9fa:	460c      	mov	r4, r1
   bb9fc:	b976      	cbnz	r6, bba1c <_Bfree+0x28>
   bb9fe:	2010      	movs	r0, #16
   bba00:	f7fb f84e 	bl	b6aa0 <malloc>
   bba04:	4602      	mov	r2, r0
   bba06:	6268      	str	r0, [r5, #36]	; 0x24
   bba08:	b920      	cbnz	r0, bba14 <_Bfree+0x20>
   bba0a:	4b09      	ldr	r3, [pc, #36]	; (bba30 <_Bfree+0x3c>)
   bba0c:	4809      	ldr	r0, [pc, #36]	; (bba34 <_Bfree+0x40>)
   bba0e:	218a      	movs	r1, #138	; 0x8a
   bba10:	f7fb f87e 	bl	b6b10 <__assert_func>
   bba14:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bba18:	6006      	str	r6, [r0, #0]
   bba1a:	60c6      	str	r6, [r0, #12]
   bba1c:	b13c      	cbz	r4, bba2e <_Bfree+0x3a>
   bba1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bba20:	6862      	ldr	r2, [r4, #4]
   bba22:	68db      	ldr	r3, [r3, #12]
   bba24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bba28:	6021      	str	r1, [r4, #0]
   bba2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bba2e:	bd70      	pop	{r4, r5, r6, pc}
   bba30:	000bcc79 	.word	0x000bcc79
   bba34:	000bced0 	.word	0x000bced0

000bba38 <__multadd>:
   bba38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bba3c:	690d      	ldr	r5, [r1, #16]
   bba3e:	4607      	mov	r7, r0
   bba40:	460c      	mov	r4, r1
   bba42:	461e      	mov	r6, r3
   bba44:	f101 0c14 	add.w	ip, r1, #20
   bba48:	2000      	movs	r0, #0
   bba4a:	f8dc 3000 	ldr.w	r3, [ip]
   bba4e:	b299      	uxth	r1, r3
   bba50:	fb02 6101 	mla	r1, r2, r1, r6
   bba54:	0c1e      	lsrs	r6, r3, #16
   bba56:	0c0b      	lsrs	r3, r1, #16
   bba58:	fb02 3306 	mla	r3, r2, r6, r3
   bba5c:	b289      	uxth	r1, r1
   bba5e:	3001      	adds	r0, #1
   bba60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bba64:	4285      	cmp	r5, r0
   bba66:	f84c 1b04 	str.w	r1, [ip], #4
   bba6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bba6e:	dcec      	bgt.n	bba4a <__multadd+0x12>
   bba70:	b30e      	cbz	r6, bbab6 <__multadd+0x7e>
   bba72:	68a3      	ldr	r3, [r4, #8]
   bba74:	42ab      	cmp	r3, r5
   bba76:	dc19      	bgt.n	bbaac <__multadd+0x74>
   bba78:	6861      	ldr	r1, [r4, #4]
   bba7a:	4638      	mov	r0, r7
   bba7c:	3101      	adds	r1, #1
   bba7e:	f7ff ff79 	bl	bb974 <_Balloc>
   bba82:	4680      	mov	r8, r0
   bba84:	b928      	cbnz	r0, bba92 <__multadd+0x5a>
   bba86:	4602      	mov	r2, r0
   bba88:	4b0c      	ldr	r3, [pc, #48]	; (bbabc <__multadd+0x84>)
   bba8a:	480d      	ldr	r0, [pc, #52]	; (bbac0 <__multadd+0x88>)
   bba8c:	21b5      	movs	r1, #181	; 0xb5
   bba8e:	f7fb f83f 	bl	b6b10 <__assert_func>
   bba92:	6922      	ldr	r2, [r4, #16]
   bba94:	3202      	adds	r2, #2
   bba96:	f104 010c 	add.w	r1, r4, #12
   bba9a:	0092      	lsls	r2, r2, #2
   bba9c:	300c      	adds	r0, #12
   bba9e:	f7fe fc08 	bl	ba2b2 <memcpy>
   bbaa2:	4621      	mov	r1, r4
   bbaa4:	4638      	mov	r0, r7
   bbaa6:	f7ff ffa5 	bl	bb9f4 <_Bfree>
   bbaaa:	4644      	mov	r4, r8
   bbaac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bbab0:	3501      	adds	r5, #1
   bbab2:	615e      	str	r6, [r3, #20]
   bbab4:	6125      	str	r5, [r4, #16]
   bbab6:	4620      	mov	r0, r4
   bbab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bbabc:	000bce49 	.word	0x000bce49
   bbac0:	000bced0 	.word	0x000bced0

000bbac4 <__s2b>:
   bbac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bbac8:	460c      	mov	r4, r1
   bbaca:	4615      	mov	r5, r2
   bbacc:	461f      	mov	r7, r3
   bbace:	2209      	movs	r2, #9
   bbad0:	3308      	adds	r3, #8
   bbad2:	4606      	mov	r6, r0
   bbad4:	fb93 f3f2 	sdiv	r3, r3, r2
   bbad8:	2100      	movs	r1, #0
   bbada:	2201      	movs	r2, #1
   bbadc:	429a      	cmp	r2, r3
   bbade:	db09      	blt.n	bbaf4 <__s2b+0x30>
   bbae0:	4630      	mov	r0, r6
   bbae2:	f7ff ff47 	bl	bb974 <_Balloc>
   bbae6:	b940      	cbnz	r0, bbafa <__s2b+0x36>
   bbae8:	4602      	mov	r2, r0
   bbaea:	4b19      	ldr	r3, [pc, #100]	; (bbb50 <__s2b+0x8c>)
   bbaec:	4819      	ldr	r0, [pc, #100]	; (bbb54 <__s2b+0x90>)
   bbaee:	21ce      	movs	r1, #206	; 0xce
   bbaf0:	f7fb f80e 	bl	b6b10 <__assert_func>
   bbaf4:	0052      	lsls	r2, r2, #1
   bbaf6:	3101      	adds	r1, #1
   bbaf8:	e7f0      	b.n	bbadc <__s2b+0x18>
   bbafa:	9b08      	ldr	r3, [sp, #32]
   bbafc:	6143      	str	r3, [r0, #20]
   bbafe:	2d09      	cmp	r5, #9
   bbb00:	f04f 0301 	mov.w	r3, #1
   bbb04:	6103      	str	r3, [r0, #16]
   bbb06:	dd16      	ble.n	bbb36 <__s2b+0x72>
   bbb08:	f104 0909 	add.w	r9, r4, #9
   bbb0c:	46c8      	mov	r8, r9
   bbb0e:	442c      	add	r4, r5
   bbb10:	f818 3b01 	ldrb.w	r3, [r8], #1
   bbb14:	4601      	mov	r1, r0
   bbb16:	3b30      	subs	r3, #48	; 0x30
   bbb18:	220a      	movs	r2, #10
   bbb1a:	4630      	mov	r0, r6
   bbb1c:	f7ff ff8c 	bl	bba38 <__multadd>
   bbb20:	45a0      	cmp	r8, r4
   bbb22:	d1f5      	bne.n	bbb10 <__s2b+0x4c>
   bbb24:	f1a5 0408 	sub.w	r4, r5, #8
   bbb28:	444c      	add	r4, r9
   bbb2a:	1b2d      	subs	r5, r5, r4
   bbb2c:	1963      	adds	r3, r4, r5
   bbb2e:	42bb      	cmp	r3, r7
   bbb30:	db04      	blt.n	bbb3c <__s2b+0x78>
   bbb32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bbb36:	340a      	adds	r4, #10
   bbb38:	2509      	movs	r5, #9
   bbb3a:	e7f6      	b.n	bbb2a <__s2b+0x66>
   bbb3c:	f814 3b01 	ldrb.w	r3, [r4], #1
   bbb40:	4601      	mov	r1, r0
   bbb42:	3b30      	subs	r3, #48	; 0x30
   bbb44:	220a      	movs	r2, #10
   bbb46:	4630      	mov	r0, r6
   bbb48:	f7ff ff76 	bl	bba38 <__multadd>
   bbb4c:	e7ee      	b.n	bbb2c <__s2b+0x68>
   bbb4e:	bf00      	nop
   bbb50:	000bce49 	.word	0x000bce49
   bbb54:	000bced0 	.word	0x000bced0

000bbb58 <__hi0bits>:
   bbb58:	0c03      	lsrs	r3, r0, #16
   bbb5a:	041b      	lsls	r3, r3, #16
   bbb5c:	b9d3      	cbnz	r3, bbb94 <__hi0bits+0x3c>
   bbb5e:	0400      	lsls	r0, r0, #16
   bbb60:	2310      	movs	r3, #16
   bbb62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bbb66:	bf04      	itt	eq
   bbb68:	0200      	lsleq	r0, r0, #8
   bbb6a:	3308      	addeq	r3, #8
   bbb6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bbb70:	bf04      	itt	eq
   bbb72:	0100      	lsleq	r0, r0, #4
   bbb74:	3304      	addeq	r3, #4
   bbb76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bbb7a:	bf04      	itt	eq
   bbb7c:	0080      	lsleq	r0, r0, #2
   bbb7e:	3302      	addeq	r3, #2
   bbb80:	2800      	cmp	r0, #0
   bbb82:	db05      	blt.n	bbb90 <__hi0bits+0x38>
   bbb84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bbb88:	f103 0301 	add.w	r3, r3, #1
   bbb8c:	bf08      	it	eq
   bbb8e:	2320      	moveq	r3, #32
   bbb90:	4618      	mov	r0, r3
   bbb92:	4770      	bx	lr
   bbb94:	2300      	movs	r3, #0
   bbb96:	e7e4      	b.n	bbb62 <__hi0bits+0xa>

000bbb98 <__lo0bits>:
   bbb98:	6803      	ldr	r3, [r0, #0]
   bbb9a:	f013 0207 	ands.w	r2, r3, #7
   bbb9e:	4601      	mov	r1, r0
   bbba0:	d00b      	beq.n	bbbba <__lo0bits+0x22>
   bbba2:	07da      	lsls	r2, r3, #31
   bbba4:	d423      	bmi.n	bbbee <__lo0bits+0x56>
   bbba6:	0798      	lsls	r0, r3, #30
   bbba8:	bf49      	itett	mi
   bbbaa:	085b      	lsrmi	r3, r3, #1
   bbbac:	089b      	lsrpl	r3, r3, #2
   bbbae:	2001      	movmi	r0, #1
   bbbb0:	600b      	strmi	r3, [r1, #0]
   bbbb2:	bf5c      	itt	pl
   bbbb4:	600b      	strpl	r3, [r1, #0]
   bbbb6:	2002      	movpl	r0, #2
   bbbb8:	4770      	bx	lr
   bbbba:	b298      	uxth	r0, r3
   bbbbc:	b9a8      	cbnz	r0, bbbea <__lo0bits+0x52>
   bbbbe:	0c1b      	lsrs	r3, r3, #16
   bbbc0:	2010      	movs	r0, #16
   bbbc2:	b2da      	uxtb	r2, r3
   bbbc4:	b90a      	cbnz	r2, bbbca <__lo0bits+0x32>
   bbbc6:	3008      	adds	r0, #8
   bbbc8:	0a1b      	lsrs	r3, r3, #8
   bbbca:	071a      	lsls	r2, r3, #28
   bbbcc:	bf04      	itt	eq
   bbbce:	091b      	lsreq	r3, r3, #4
   bbbd0:	3004      	addeq	r0, #4
   bbbd2:	079a      	lsls	r2, r3, #30
   bbbd4:	bf04      	itt	eq
   bbbd6:	089b      	lsreq	r3, r3, #2
   bbbd8:	3002      	addeq	r0, #2
   bbbda:	07da      	lsls	r2, r3, #31
   bbbdc:	d403      	bmi.n	bbbe6 <__lo0bits+0x4e>
   bbbde:	085b      	lsrs	r3, r3, #1
   bbbe0:	f100 0001 	add.w	r0, r0, #1
   bbbe4:	d005      	beq.n	bbbf2 <__lo0bits+0x5a>
   bbbe6:	600b      	str	r3, [r1, #0]
   bbbe8:	4770      	bx	lr
   bbbea:	4610      	mov	r0, r2
   bbbec:	e7e9      	b.n	bbbc2 <__lo0bits+0x2a>
   bbbee:	2000      	movs	r0, #0
   bbbf0:	4770      	bx	lr
   bbbf2:	2020      	movs	r0, #32
   bbbf4:	4770      	bx	lr
	...

000bbbf8 <__i2b>:
   bbbf8:	b510      	push	{r4, lr}
   bbbfa:	460c      	mov	r4, r1
   bbbfc:	2101      	movs	r1, #1
   bbbfe:	f7ff feb9 	bl	bb974 <_Balloc>
   bbc02:	4602      	mov	r2, r0
   bbc04:	b928      	cbnz	r0, bbc12 <__i2b+0x1a>
   bbc06:	4b05      	ldr	r3, [pc, #20]	; (bbc1c <__i2b+0x24>)
   bbc08:	4805      	ldr	r0, [pc, #20]	; (bbc20 <__i2b+0x28>)
   bbc0a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bbc0e:	f7fa ff7f 	bl	b6b10 <__assert_func>
   bbc12:	2301      	movs	r3, #1
   bbc14:	6144      	str	r4, [r0, #20]
   bbc16:	6103      	str	r3, [r0, #16]
   bbc18:	bd10      	pop	{r4, pc}
   bbc1a:	bf00      	nop
   bbc1c:	000bce49 	.word	0x000bce49
   bbc20:	000bced0 	.word	0x000bced0

000bbc24 <__multiply>:
   bbc24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbc28:	4691      	mov	r9, r2
   bbc2a:	690a      	ldr	r2, [r1, #16]
   bbc2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bbc30:	429a      	cmp	r2, r3
   bbc32:	bfb8      	it	lt
   bbc34:	460b      	movlt	r3, r1
   bbc36:	460c      	mov	r4, r1
   bbc38:	bfbc      	itt	lt
   bbc3a:	464c      	movlt	r4, r9
   bbc3c:	4699      	movlt	r9, r3
   bbc3e:	6927      	ldr	r7, [r4, #16]
   bbc40:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bbc44:	68a3      	ldr	r3, [r4, #8]
   bbc46:	6861      	ldr	r1, [r4, #4]
   bbc48:	eb07 060a 	add.w	r6, r7, sl
   bbc4c:	42b3      	cmp	r3, r6
   bbc4e:	b085      	sub	sp, #20
   bbc50:	bfb8      	it	lt
   bbc52:	3101      	addlt	r1, #1
   bbc54:	f7ff fe8e 	bl	bb974 <_Balloc>
   bbc58:	b930      	cbnz	r0, bbc68 <__multiply+0x44>
   bbc5a:	4602      	mov	r2, r0
   bbc5c:	4b44      	ldr	r3, [pc, #272]	; (bbd70 <__multiply+0x14c>)
   bbc5e:	4845      	ldr	r0, [pc, #276]	; (bbd74 <__multiply+0x150>)
   bbc60:	f240 115d 	movw	r1, #349	; 0x15d
   bbc64:	f7fa ff54 	bl	b6b10 <__assert_func>
   bbc68:	f100 0514 	add.w	r5, r0, #20
   bbc6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bbc70:	462b      	mov	r3, r5
   bbc72:	2200      	movs	r2, #0
   bbc74:	4543      	cmp	r3, r8
   bbc76:	d321      	bcc.n	bbcbc <__multiply+0x98>
   bbc78:	f104 0314 	add.w	r3, r4, #20
   bbc7c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bbc80:	f109 0314 	add.w	r3, r9, #20
   bbc84:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bbc88:	9202      	str	r2, [sp, #8]
   bbc8a:	1b3a      	subs	r2, r7, r4
   bbc8c:	3a15      	subs	r2, #21
   bbc8e:	f022 0203 	bic.w	r2, r2, #3
   bbc92:	3204      	adds	r2, #4
   bbc94:	f104 0115 	add.w	r1, r4, #21
   bbc98:	428f      	cmp	r7, r1
   bbc9a:	bf38      	it	cc
   bbc9c:	2204      	movcc	r2, #4
   bbc9e:	9201      	str	r2, [sp, #4]
   bbca0:	9a02      	ldr	r2, [sp, #8]
   bbca2:	9303      	str	r3, [sp, #12]
   bbca4:	429a      	cmp	r2, r3
   bbca6:	d80c      	bhi.n	bbcc2 <__multiply+0x9e>
   bbca8:	2e00      	cmp	r6, #0
   bbcaa:	dd03      	ble.n	bbcb4 <__multiply+0x90>
   bbcac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bbcb0:	2b00      	cmp	r3, #0
   bbcb2:	d05a      	beq.n	bbd6a <__multiply+0x146>
   bbcb4:	6106      	str	r6, [r0, #16]
   bbcb6:	b005      	add	sp, #20
   bbcb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbcbc:	f843 2b04 	str.w	r2, [r3], #4
   bbcc0:	e7d8      	b.n	bbc74 <__multiply+0x50>
   bbcc2:	f8b3 a000 	ldrh.w	sl, [r3]
   bbcc6:	f1ba 0f00 	cmp.w	sl, #0
   bbcca:	d024      	beq.n	bbd16 <__multiply+0xf2>
   bbccc:	f104 0e14 	add.w	lr, r4, #20
   bbcd0:	46a9      	mov	r9, r5
   bbcd2:	f04f 0c00 	mov.w	ip, #0
   bbcd6:	f85e 2b04 	ldr.w	r2, [lr], #4
   bbcda:	f8d9 1000 	ldr.w	r1, [r9]
   bbcde:	fa1f fb82 	uxth.w	fp, r2
   bbce2:	b289      	uxth	r1, r1
   bbce4:	fb0a 110b 	mla	r1, sl, fp, r1
   bbce8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bbcec:	f8d9 2000 	ldr.w	r2, [r9]
   bbcf0:	4461      	add	r1, ip
   bbcf2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bbcf6:	fb0a c20b 	mla	r2, sl, fp, ip
   bbcfa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bbcfe:	b289      	uxth	r1, r1
   bbd00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bbd04:	4577      	cmp	r7, lr
   bbd06:	f849 1b04 	str.w	r1, [r9], #4
   bbd0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bbd0e:	d8e2      	bhi.n	bbcd6 <__multiply+0xb2>
   bbd10:	9a01      	ldr	r2, [sp, #4]
   bbd12:	f845 c002 	str.w	ip, [r5, r2]
   bbd16:	9a03      	ldr	r2, [sp, #12]
   bbd18:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bbd1c:	3304      	adds	r3, #4
   bbd1e:	f1b9 0f00 	cmp.w	r9, #0
   bbd22:	d020      	beq.n	bbd66 <__multiply+0x142>
   bbd24:	6829      	ldr	r1, [r5, #0]
   bbd26:	f104 0c14 	add.w	ip, r4, #20
   bbd2a:	46ae      	mov	lr, r5
   bbd2c:	f04f 0a00 	mov.w	sl, #0
   bbd30:	f8bc b000 	ldrh.w	fp, [ip]
   bbd34:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bbd38:	fb09 220b 	mla	r2, r9, fp, r2
   bbd3c:	4492      	add	sl, r2
   bbd3e:	b289      	uxth	r1, r1
   bbd40:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bbd44:	f84e 1b04 	str.w	r1, [lr], #4
   bbd48:	f85c 2b04 	ldr.w	r2, [ip], #4
   bbd4c:	f8be 1000 	ldrh.w	r1, [lr]
   bbd50:	0c12      	lsrs	r2, r2, #16
   bbd52:	fb09 1102 	mla	r1, r9, r2, r1
   bbd56:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bbd5a:	4567      	cmp	r7, ip
   bbd5c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bbd60:	d8e6      	bhi.n	bbd30 <__multiply+0x10c>
   bbd62:	9a01      	ldr	r2, [sp, #4]
   bbd64:	50a9      	str	r1, [r5, r2]
   bbd66:	3504      	adds	r5, #4
   bbd68:	e79a      	b.n	bbca0 <__multiply+0x7c>
   bbd6a:	3e01      	subs	r6, #1
   bbd6c:	e79c      	b.n	bbca8 <__multiply+0x84>
   bbd6e:	bf00      	nop
   bbd70:	000bce49 	.word	0x000bce49
   bbd74:	000bced0 	.word	0x000bced0

000bbd78 <__pow5mult>:
   bbd78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bbd7c:	4615      	mov	r5, r2
   bbd7e:	f012 0203 	ands.w	r2, r2, #3
   bbd82:	4606      	mov	r6, r0
   bbd84:	460f      	mov	r7, r1
   bbd86:	d007      	beq.n	bbd98 <__pow5mult+0x20>
   bbd88:	4c25      	ldr	r4, [pc, #148]	; (bbe20 <__pow5mult+0xa8>)
   bbd8a:	3a01      	subs	r2, #1
   bbd8c:	2300      	movs	r3, #0
   bbd8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bbd92:	f7ff fe51 	bl	bba38 <__multadd>
   bbd96:	4607      	mov	r7, r0
   bbd98:	10ad      	asrs	r5, r5, #2
   bbd9a:	d03d      	beq.n	bbe18 <__pow5mult+0xa0>
   bbd9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bbd9e:	b97c      	cbnz	r4, bbdc0 <__pow5mult+0x48>
   bbda0:	2010      	movs	r0, #16
   bbda2:	f7fa fe7d 	bl	b6aa0 <malloc>
   bbda6:	4602      	mov	r2, r0
   bbda8:	6270      	str	r0, [r6, #36]	; 0x24
   bbdaa:	b928      	cbnz	r0, bbdb8 <__pow5mult+0x40>
   bbdac:	4b1d      	ldr	r3, [pc, #116]	; (bbe24 <__pow5mult+0xac>)
   bbdae:	481e      	ldr	r0, [pc, #120]	; (bbe28 <__pow5mult+0xb0>)
   bbdb0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bbdb4:	f7fa feac 	bl	b6b10 <__assert_func>
   bbdb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bbdbc:	6004      	str	r4, [r0, #0]
   bbdbe:	60c4      	str	r4, [r0, #12]
   bbdc0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bbdc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bbdc8:	b94c      	cbnz	r4, bbdde <__pow5mult+0x66>
   bbdca:	f240 2171 	movw	r1, #625	; 0x271
   bbdce:	4630      	mov	r0, r6
   bbdd0:	f7ff ff12 	bl	bbbf8 <__i2b>
   bbdd4:	2300      	movs	r3, #0
   bbdd6:	f8c8 0008 	str.w	r0, [r8, #8]
   bbdda:	4604      	mov	r4, r0
   bbddc:	6003      	str	r3, [r0, #0]
   bbdde:	f04f 0900 	mov.w	r9, #0
   bbde2:	07eb      	lsls	r3, r5, #31
   bbde4:	d50a      	bpl.n	bbdfc <__pow5mult+0x84>
   bbde6:	4639      	mov	r1, r7
   bbde8:	4622      	mov	r2, r4
   bbdea:	4630      	mov	r0, r6
   bbdec:	f7ff ff1a 	bl	bbc24 <__multiply>
   bbdf0:	4639      	mov	r1, r7
   bbdf2:	4680      	mov	r8, r0
   bbdf4:	4630      	mov	r0, r6
   bbdf6:	f7ff fdfd 	bl	bb9f4 <_Bfree>
   bbdfa:	4647      	mov	r7, r8
   bbdfc:	106d      	asrs	r5, r5, #1
   bbdfe:	d00b      	beq.n	bbe18 <__pow5mult+0xa0>
   bbe00:	6820      	ldr	r0, [r4, #0]
   bbe02:	b938      	cbnz	r0, bbe14 <__pow5mult+0x9c>
   bbe04:	4622      	mov	r2, r4
   bbe06:	4621      	mov	r1, r4
   bbe08:	4630      	mov	r0, r6
   bbe0a:	f7ff ff0b 	bl	bbc24 <__multiply>
   bbe0e:	6020      	str	r0, [r4, #0]
   bbe10:	f8c0 9000 	str.w	r9, [r0]
   bbe14:	4604      	mov	r4, r0
   bbe16:	e7e4      	b.n	bbde2 <__pow5mult+0x6a>
   bbe18:	4638      	mov	r0, r7
   bbe1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bbe1e:	bf00      	nop
   bbe20:	000bd020 	.word	0x000bd020
   bbe24:	000bcc79 	.word	0x000bcc79
   bbe28:	000bced0 	.word	0x000bced0

000bbe2c <__lshift>:
   bbe2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bbe30:	460c      	mov	r4, r1
   bbe32:	6849      	ldr	r1, [r1, #4]
   bbe34:	6923      	ldr	r3, [r4, #16]
   bbe36:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bbe3a:	68a3      	ldr	r3, [r4, #8]
   bbe3c:	4607      	mov	r7, r0
   bbe3e:	4691      	mov	r9, r2
   bbe40:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bbe44:	f108 0601 	add.w	r6, r8, #1
   bbe48:	42b3      	cmp	r3, r6
   bbe4a:	db0b      	blt.n	bbe64 <__lshift+0x38>
   bbe4c:	4638      	mov	r0, r7
   bbe4e:	f7ff fd91 	bl	bb974 <_Balloc>
   bbe52:	4605      	mov	r5, r0
   bbe54:	b948      	cbnz	r0, bbe6a <__lshift+0x3e>
   bbe56:	4602      	mov	r2, r0
   bbe58:	4b2a      	ldr	r3, [pc, #168]	; (bbf04 <__lshift+0xd8>)
   bbe5a:	482b      	ldr	r0, [pc, #172]	; (bbf08 <__lshift+0xdc>)
   bbe5c:	f240 11d9 	movw	r1, #473	; 0x1d9
   bbe60:	f7fa fe56 	bl	b6b10 <__assert_func>
   bbe64:	3101      	adds	r1, #1
   bbe66:	005b      	lsls	r3, r3, #1
   bbe68:	e7ee      	b.n	bbe48 <__lshift+0x1c>
   bbe6a:	2300      	movs	r3, #0
   bbe6c:	f100 0114 	add.w	r1, r0, #20
   bbe70:	f100 0210 	add.w	r2, r0, #16
   bbe74:	4618      	mov	r0, r3
   bbe76:	4553      	cmp	r3, sl
   bbe78:	db37      	blt.n	bbeea <__lshift+0xbe>
   bbe7a:	6920      	ldr	r0, [r4, #16]
   bbe7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bbe80:	f104 0314 	add.w	r3, r4, #20
   bbe84:	f019 091f 	ands.w	r9, r9, #31
   bbe88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bbe8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bbe90:	d02f      	beq.n	bbef2 <__lshift+0xc6>
   bbe92:	f1c9 0e20 	rsb	lr, r9, #32
   bbe96:	468a      	mov	sl, r1
   bbe98:	f04f 0c00 	mov.w	ip, #0
   bbe9c:	681a      	ldr	r2, [r3, #0]
   bbe9e:	fa02 f209 	lsl.w	r2, r2, r9
   bbea2:	ea42 020c 	orr.w	r2, r2, ip
   bbea6:	f84a 2b04 	str.w	r2, [sl], #4
   bbeaa:	f853 2b04 	ldr.w	r2, [r3], #4
   bbeae:	4298      	cmp	r0, r3
   bbeb0:	fa22 fc0e 	lsr.w	ip, r2, lr
   bbeb4:	d8f2      	bhi.n	bbe9c <__lshift+0x70>
   bbeb6:	1b03      	subs	r3, r0, r4
   bbeb8:	3b15      	subs	r3, #21
   bbeba:	f023 0303 	bic.w	r3, r3, #3
   bbebe:	3304      	adds	r3, #4
   bbec0:	f104 0215 	add.w	r2, r4, #21
   bbec4:	4290      	cmp	r0, r2
   bbec6:	bf38      	it	cc
   bbec8:	2304      	movcc	r3, #4
   bbeca:	f841 c003 	str.w	ip, [r1, r3]
   bbece:	f1bc 0f00 	cmp.w	ip, #0
   bbed2:	d001      	beq.n	bbed8 <__lshift+0xac>
   bbed4:	f108 0602 	add.w	r6, r8, #2
   bbed8:	3e01      	subs	r6, #1
   bbeda:	4638      	mov	r0, r7
   bbedc:	612e      	str	r6, [r5, #16]
   bbede:	4621      	mov	r1, r4
   bbee0:	f7ff fd88 	bl	bb9f4 <_Bfree>
   bbee4:	4628      	mov	r0, r5
   bbee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bbeea:	f842 0f04 	str.w	r0, [r2, #4]!
   bbeee:	3301      	adds	r3, #1
   bbef0:	e7c1      	b.n	bbe76 <__lshift+0x4a>
   bbef2:	3904      	subs	r1, #4
   bbef4:	f853 2b04 	ldr.w	r2, [r3], #4
   bbef8:	f841 2f04 	str.w	r2, [r1, #4]!
   bbefc:	4298      	cmp	r0, r3
   bbefe:	d8f9      	bhi.n	bbef4 <__lshift+0xc8>
   bbf00:	e7ea      	b.n	bbed8 <__lshift+0xac>
   bbf02:	bf00      	nop
   bbf04:	000bce49 	.word	0x000bce49
   bbf08:	000bced0 	.word	0x000bced0

000bbf0c <__mcmp>:
   bbf0c:	b530      	push	{r4, r5, lr}
   bbf0e:	6902      	ldr	r2, [r0, #16]
   bbf10:	690c      	ldr	r4, [r1, #16]
   bbf12:	1b12      	subs	r2, r2, r4
   bbf14:	d10e      	bne.n	bbf34 <__mcmp+0x28>
   bbf16:	f100 0314 	add.w	r3, r0, #20
   bbf1a:	3114      	adds	r1, #20
   bbf1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bbf20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bbf24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bbf28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bbf2c:	42a5      	cmp	r5, r4
   bbf2e:	d003      	beq.n	bbf38 <__mcmp+0x2c>
   bbf30:	d305      	bcc.n	bbf3e <__mcmp+0x32>
   bbf32:	2201      	movs	r2, #1
   bbf34:	4610      	mov	r0, r2
   bbf36:	bd30      	pop	{r4, r5, pc}
   bbf38:	4283      	cmp	r3, r0
   bbf3a:	d3f3      	bcc.n	bbf24 <__mcmp+0x18>
   bbf3c:	e7fa      	b.n	bbf34 <__mcmp+0x28>
   bbf3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbf42:	e7f7      	b.n	bbf34 <__mcmp+0x28>

000bbf44 <__mdiff>:
   bbf44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbf48:	460c      	mov	r4, r1
   bbf4a:	4606      	mov	r6, r0
   bbf4c:	4611      	mov	r1, r2
   bbf4e:	4620      	mov	r0, r4
   bbf50:	4690      	mov	r8, r2
   bbf52:	f7ff ffdb 	bl	bbf0c <__mcmp>
   bbf56:	1e05      	subs	r5, r0, #0
   bbf58:	d110      	bne.n	bbf7c <__mdiff+0x38>
   bbf5a:	4629      	mov	r1, r5
   bbf5c:	4630      	mov	r0, r6
   bbf5e:	f7ff fd09 	bl	bb974 <_Balloc>
   bbf62:	b930      	cbnz	r0, bbf72 <__mdiff+0x2e>
   bbf64:	4b3a      	ldr	r3, [pc, #232]	; (bc050 <__mdiff+0x10c>)
   bbf66:	4602      	mov	r2, r0
   bbf68:	f240 2132 	movw	r1, #562	; 0x232
   bbf6c:	4839      	ldr	r0, [pc, #228]	; (bc054 <__mdiff+0x110>)
   bbf6e:	f7fa fdcf 	bl	b6b10 <__assert_func>
   bbf72:	2301      	movs	r3, #1
   bbf74:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bbf78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbf7c:	bfa4      	itt	ge
   bbf7e:	4643      	movge	r3, r8
   bbf80:	46a0      	movge	r8, r4
   bbf82:	4630      	mov	r0, r6
   bbf84:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bbf88:	bfa6      	itte	ge
   bbf8a:	461c      	movge	r4, r3
   bbf8c:	2500      	movge	r5, #0
   bbf8e:	2501      	movlt	r5, #1
   bbf90:	f7ff fcf0 	bl	bb974 <_Balloc>
   bbf94:	b920      	cbnz	r0, bbfa0 <__mdiff+0x5c>
   bbf96:	4b2e      	ldr	r3, [pc, #184]	; (bc050 <__mdiff+0x10c>)
   bbf98:	4602      	mov	r2, r0
   bbf9a:	f44f 7110 	mov.w	r1, #576	; 0x240
   bbf9e:	e7e5      	b.n	bbf6c <__mdiff+0x28>
   bbfa0:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bbfa4:	6926      	ldr	r6, [r4, #16]
   bbfa6:	60c5      	str	r5, [r0, #12]
   bbfa8:	f104 0914 	add.w	r9, r4, #20
   bbfac:	f108 0514 	add.w	r5, r8, #20
   bbfb0:	f100 0e14 	add.w	lr, r0, #20
   bbfb4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bbfb8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bbfbc:	f108 0210 	add.w	r2, r8, #16
   bbfc0:	46f2      	mov	sl, lr
   bbfc2:	2100      	movs	r1, #0
   bbfc4:	f859 3b04 	ldr.w	r3, [r9], #4
   bbfc8:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bbfcc:	fa1f f883 	uxth.w	r8, r3
   bbfd0:	fa11 f18b 	uxtah	r1, r1, fp
   bbfd4:	0c1b      	lsrs	r3, r3, #16
   bbfd6:	eba1 0808 	sub.w	r8, r1, r8
   bbfda:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bbfde:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bbfe2:	fa1f f888 	uxth.w	r8, r8
   bbfe6:	1419      	asrs	r1, r3, #16
   bbfe8:	454e      	cmp	r6, r9
   bbfea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bbfee:	f84a 3b04 	str.w	r3, [sl], #4
   bbff2:	d8e7      	bhi.n	bbfc4 <__mdiff+0x80>
   bbff4:	1b33      	subs	r3, r6, r4
   bbff6:	3b15      	subs	r3, #21
   bbff8:	f023 0303 	bic.w	r3, r3, #3
   bbffc:	3304      	adds	r3, #4
   bbffe:	3415      	adds	r4, #21
   bc000:	42a6      	cmp	r6, r4
   bc002:	bf38      	it	cc
   bc004:	2304      	movcc	r3, #4
   bc006:	441d      	add	r5, r3
   bc008:	4473      	add	r3, lr
   bc00a:	469e      	mov	lr, r3
   bc00c:	462e      	mov	r6, r5
   bc00e:	4566      	cmp	r6, ip
   bc010:	d30e      	bcc.n	bc030 <__mdiff+0xec>
   bc012:	f10c 0203 	add.w	r2, ip, #3
   bc016:	1b52      	subs	r2, r2, r5
   bc018:	f022 0203 	bic.w	r2, r2, #3
   bc01c:	3d03      	subs	r5, #3
   bc01e:	45ac      	cmp	ip, r5
   bc020:	bf38      	it	cc
   bc022:	2200      	movcc	r2, #0
   bc024:	441a      	add	r2, r3
   bc026:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bc02a:	b17b      	cbz	r3, bc04c <__mdiff+0x108>
   bc02c:	6107      	str	r7, [r0, #16]
   bc02e:	e7a3      	b.n	bbf78 <__mdiff+0x34>
   bc030:	f856 8b04 	ldr.w	r8, [r6], #4
   bc034:	fa11 f288 	uxtah	r2, r1, r8
   bc038:	1414      	asrs	r4, r2, #16
   bc03a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bc03e:	b292      	uxth	r2, r2
   bc040:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bc044:	f84e 2b04 	str.w	r2, [lr], #4
   bc048:	1421      	asrs	r1, r4, #16
   bc04a:	e7e0      	b.n	bc00e <__mdiff+0xca>
   bc04c:	3f01      	subs	r7, #1
   bc04e:	e7ea      	b.n	bc026 <__mdiff+0xe2>
   bc050:	000bce49 	.word	0x000bce49
   bc054:	000bced0 	.word	0x000bced0

000bc058 <__ulp>:
   bc058:	b082      	sub	sp, #8
   bc05a:	ed8d 0b00 	vstr	d0, [sp]
   bc05e:	9b01      	ldr	r3, [sp, #4]
   bc060:	4912      	ldr	r1, [pc, #72]	; (bc0ac <__ulp+0x54>)
   bc062:	4019      	ands	r1, r3
   bc064:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bc068:	2900      	cmp	r1, #0
   bc06a:	dd05      	ble.n	bc078 <__ulp+0x20>
   bc06c:	2200      	movs	r2, #0
   bc06e:	460b      	mov	r3, r1
   bc070:	ec43 2b10 	vmov	d0, r2, r3
   bc074:	b002      	add	sp, #8
   bc076:	4770      	bx	lr
   bc078:	4249      	negs	r1, r1
   bc07a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bc07e:	ea4f 5021 	mov.w	r0, r1, asr #20
   bc082:	f04f 0200 	mov.w	r2, #0
   bc086:	f04f 0300 	mov.w	r3, #0
   bc08a:	da04      	bge.n	bc096 <__ulp+0x3e>
   bc08c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bc090:	fa41 f300 	asr.w	r3, r1, r0
   bc094:	e7ec      	b.n	bc070 <__ulp+0x18>
   bc096:	f1a0 0114 	sub.w	r1, r0, #20
   bc09a:	291e      	cmp	r1, #30
   bc09c:	bfda      	itte	le
   bc09e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bc0a2:	fa20 f101 	lsrle.w	r1, r0, r1
   bc0a6:	2101      	movgt	r1, #1
   bc0a8:	460a      	mov	r2, r1
   bc0aa:	e7e1      	b.n	bc070 <__ulp+0x18>
   bc0ac:	7ff00000 	.word	0x7ff00000

000bc0b0 <__b2d>:
   bc0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc0b2:	6905      	ldr	r5, [r0, #16]
   bc0b4:	f100 0714 	add.w	r7, r0, #20
   bc0b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bc0bc:	1f2e      	subs	r6, r5, #4
   bc0be:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bc0c2:	4620      	mov	r0, r4
   bc0c4:	f7ff fd48 	bl	bbb58 <__hi0bits>
   bc0c8:	f1c0 0320 	rsb	r3, r0, #32
   bc0cc:	280a      	cmp	r0, #10
   bc0ce:	f8df c07c 	ldr.w	ip, [pc, #124]	; bc14c <__b2d+0x9c>
   bc0d2:	600b      	str	r3, [r1, #0]
   bc0d4:	dc14      	bgt.n	bc100 <__b2d+0x50>
   bc0d6:	f1c0 0e0b 	rsb	lr, r0, #11
   bc0da:	fa24 f10e 	lsr.w	r1, r4, lr
   bc0de:	42b7      	cmp	r7, r6
   bc0e0:	ea41 030c 	orr.w	r3, r1, ip
   bc0e4:	bf34      	ite	cc
   bc0e6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bc0ea:	2100      	movcs	r1, #0
   bc0ec:	3015      	adds	r0, #21
   bc0ee:	fa04 f000 	lsl.w	r0, r4, r0
   bc0f2:	fa21 f10e 	lsr.w	r1, r1, lr
   bc0f6:	ea40 0201 	orr.w	r2, r0, r1
   bc0fa:	ec43 2b10 	vmov	d0, r2, r3
   bc0fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bc100:	42b7      	cmp	r7, r6
   bc102:	bf3a      	itte	cc
   bc104:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bc108:	f1a5 0608 	subcc.w	r6, r5, #8
   bc10c:	2100      	movcs	r1, #0
   bc10e:	380b      	subs	r0, #11
   bc110:	d017      	beq.n	bc142 <__b2d+0x92>
   bc112:	f1c0 0c20 	rsb	ip, r0, #32
   bc116:	fa04 f500 	lsl.w	r5, r4, r0
   bc11a:	42be      	cmp	r6, r7
   bc11c:	fa21 f40c 	lsr.w	r4, r1, ip
   bc120:	ea45 0504 	orr.w	r5, r5, r4
   bc124:	bf8c      	ite	hi
   bc126:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bc12a:	2400      	movls	r4, #0
   bc12c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bc130:	fa01 f000 	lsl.w	r0, r1, r0
   bc134:	fa24 f40c 	lsr.w	r4, r4, ip
   bc138:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bc13c:	ea40 0204 	orr.w	r2, r0, r4
   bc140:	e7db      	b.n	bc0fa <__b2d+0x4a>
   bc142:	ea44 030c 	orr.w	r3, r4, ip
   bc146:	460a      	mov	r2, r1
   bc148:	e7d7      	b.n	bc0fa <__b2d+0x4a>
   bc14a:	bf00      	nop
   bc14c:	3ff00000 	.word	0x3ff00000

000bc150 <__d2b>:
   bc150:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bc154:	4689      	mov	r9, r1
   bc156:	2101      	movs	r1, #1
   bc158:	ec57 6b10 	vmov	r6, r7, d0
   bc15c:	4690      	mov	r8, r2
   bc15e:	f7ff fc09 	bl	bb974 <_Balloc>
   bc162:	4604      	mov	r4, r0
   bc164:	b930      	cbnz	r0, bc174 <__d2b+0x24>
   bc166:	4602      	mov	r2, r0
   bc168:	4b25      	ldr	r3, [pc, #148]	; (bc200 <__d2b+0xb0>)
   bc16a:	4826      	ldr	r0, [pc, #152]	; (bc204 <__d2b+0xb4>)
   bc16c:	f240 310a 	movw	r1, #778	; 0x30a
   bc170:	f7fa fcce 	bl	b6b10 <__assert_func>
   bc174:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bc178:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bc17c:	bb35      	cbnz	r5, bc1cc <__d2b+0x7c>
   bc17e:	2e00      	cmp	r6, #0
   bc180:	9301      	str	r3, [sp, #4]
   bc182:	d028      	beq.n	bc1d6 <__d2b+0x86>
   bc184:	4668      	mov	r0, sp
   bc186:	9600      	str	r6, [sp, #0]
   bc188:	f7ff fd06 	bl	bbb98 <__lo0bits>
   bc18c:	9900      	ldr	r1, [sp, #0]
   bc18e:	b300      	cbz	r0, bc1d2 <__d2b+0x82>
   bc190:	9a01      	ldr	r2, [sp, #4]
   bc192:	f1c0 0320 	rsb	r3, r0, #32
   bc196:	fa02 f303 	lsl.w	r3, r2, r3
   bc19a:	430b      	orrs	r3, r1
   bc19c:	40c2      	lsrs	r2, r0
   bc19e:	6163      	str	r3, [r4, #20]
   bc1a0:	9201      	str	r2, [sp, #4]
   bc1a2:	9b01      	ldr	r3, [sp, #4]
   bc1a4:	61a3      	str	r3, [r4, #24]
   bc1a6:	2b00      	cmp	r3, #0
   bc1a8:	bf14      	ite	ne
   bc1aa:	2202      	movne	r2, #2
   bc1ac:	2201      	moveq	r2, #1
   bc1ae:	6122      	str	r2, [r4, #16]
   bc1b0:	b1d5      	cbz	r5, bc1e8 <__d2b+0x98>
   bc1b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bc1b6:	4405      	add	r5, r0
   bc1b8:	f8c9 5000 	str.w	r5, [r9]
   bc1bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bc1c0:	f8c8 0000 	str.w	r0, [r8]
   bc1c4:	4620      	mov	r0, r4
   bc1c6:	b003      	add	sp, #12
   bc1c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bc1cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bc1d0:	e7d5      	b.n	bc17e <__d2b+0x2e>
   bc1d2:	6161      	str	r1, [r4, #20]
   bc1d4:	e7e5      	b.n	bc1a2 <__d2b+0x52>
   bc1d6:	a801      	add	r0, sp, #4
   bc1d8:	f7ff fcde 	bl	bbb98 <__lo0bits>
   bc1dc:	9b01      	ldr	r3, [sp, #4]
   bc1de:	6163      	str	r3, [r4, #20]
   bc1e0:	2201      	movs	r2, #1
   bc1e2:	6122      	str	r2, [r4, #16]
   bc1e4:	3020      	adds	r0, #32
   bc1e6:	e7e3      	b.n	bc1b0 <__d2b+0x60>
   bc1e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bc1ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bc1f0:	f8c9 0000 	str.w	r0, [r9]
   bc1f4:	6918      	ldr	r0, [r3, #16]
   bc1f6:	f7ff fcaf 	bl	bbb58 <__hi0bits>
   bc1fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bc1fe:	e7df      	b.n	bc1c0 <__d2b+0x70>
   bc200:	000bce49 	.word	0x000bce49
   bc204:	000bced0 	.word	0x000bced0

000bc208 <__ratio>:
   bc208:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc20c:	4688      	mov	r8, r1
   bc20e:	4669      	mov	r1, sp
   bc210:	4681      	mov	r9, r0
   bc212:	f7ff ff4d 	bl	bc0b0 <__b2d>
   bc216:	a901      	add	r1, sp, #4
   bc218:	4640      	mov	r0, r8
   bc21a:	ec55 4b10 	vmov	r4, r5, d0
   bc21e:	f7ff ff47 	bl	bc0b0 <__b2d>
   bc222:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bc226:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bc22a:	eba3 0c02 	sub.w	ip, r3, r2
   bc22e:	e9dd 3200 	ldrd	r3, r2, [sp]
   bc232:	1a9b      	subs	r3, r3, r2
   bc234:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bc238:	ec51 0b10 	vmov	r0, r1, d0
   bc23c:	2b00      	cmp	r3, #0
   bc23e:	bfd6      	itet	le
   bc240:	460a      	movle	r2, r1
   bc242:	462a      	movgt	r2, r5
   bc244:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bc248:	468b      	mov	fp, r1
   bc24a:	462f      	mov	r7, r5
   bc24c:	bfd4      	ite	le
   bc24e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bc252:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bc256:	4620      	mov	r0, r4
   bc258:	ee10 2a10 	vmov	r2, s0
   bc25c:	465b      	mov	r3, fp
   bc25e:	4639      	mov	r1, r7
   bc260:	f7fd fdf2 	bl	b9e48 <__aeabi_ddiv>
   bc264:	ec41 0b10 	vmov	d0, r0, r1
   bc268:	b003      	add	sp, #12
   bc26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bc26e <__copybits>:
   bc26e:	3901      	subs	r1, #1
   bc270:	b570      	push	{r4, r5, r6, lr}
   bc272:	1149      	asrs	r1, r1, #5
   bc274:	6914      	ldr	r4, [r2, #16]
   bc276:	3101      	adds	r1, #1
   bc278:	f102 0314 	add.w	r3, r2, #20
   bc27c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bc280:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bc284:	1f05      	subs	r5, r0, #4
   bc286:	42a3      	cmp	r3, r4
   bc288:	d30c      	bcc.n	bc2a4 <__copybits+0x36>
   bc28a:	1aa3      	subs	r3, r4, r2
   bc28c:	3b11      	subs	r3, #17
   bc28e:	f023 0303 	bic.w	r3, r3, #3
   bc292:	3211      	adds	r2, #17
   bc294:	42a2      	cmp	r2, r4
   bc296:	bf88      	it	hi
   bc298:	2300      	movhi	r3, #0
   bc29a:	4418      	add	r0, r3
   bc29c:	2300      	movs	r3, #0
   bc29e:	4288      	cmp	r0, r1
   bc2a0:	d305      	bcc.n	bc2ae <__copybits+0x40>
   bc2a2:	bd70      	pop	{r4, r5, r6, pc}
   bc2a4:	f853 6b04 	ldr.w	r6, [r3], #4
   bc2a8:	f845 6f04 	str.w	r6, [r5, #4]!
   bc2ac:	e7eb      	b.n	bc286 <__copybits+0x18>
   bc2ae:	f840 3b04 	str.w	r3, [r0], #4
   bc2b2:	e7f4      	b.n	bc29e <__copybits+0x30>

000bc2b4 <__any_on>:
   bc2b4:	f100 0214 	add.w	r2, r0, #20
   bc2b8:	6900      	ldr	r0, [r0, #16]
   bc2ba:	114b      	asrs	r3, r1, #5
   bc2bc:	4298      	cmp	r0, r3
   bc2be:	b510      	push	{r4, lr}
   bc2c0:	db11      	blt.n	bc2e6 <__any_on+0x32>
   bc2c2:	dd0a      	ble.n	bc2da <__any_on+0x26>
   bc2c4:	f011 011f 	ands.w	r1, r1, #31
   bc2c8:	d007      	beq.n	bc2da <__any_on+0x26>
   bc2ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bc2ce:	fa24 f001 	lsr.w	r0, r4, r1
   bc2d2:	fa00 f101 	lsl.w	r1, r0, r1
   bc2d6:	428c      	cmp	r4, r1
   bc2d8:	d10b      	bne.n	bc2f2 <__any_on+0x3e>
   bc2da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bc2de:	4293      	cmp	r3, r2
   bc2e0:	d803      	bhi.n	bc2ea <__any_on+0x36>
   bc2e2:	2000      	movs	r0, #0
   bc2e4:	bd10      	pop	{r4, pc}
   bc2e6:	4603      	mov	r3, r0
   bc2e8:	e7f7      	b.n	bc2da <__any_on+0x26>
   bc2ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bc2ee:	2900      	cmp	r1, #0
   bc2f0:	d0f5      	beq.n	bc2de <__any_on+0x2a>
   bc2f2:	2001      	movs	r0, #1
   bc2f4:	e7f6      	b.n	bc2e4 <__any_on+0x30>

000bc2f6 <_calloc_r>:
   bc2f6:	b513      	push	{r0, r1, r4, lr}
   bc2f8:	434a      	muls	r2, r1
   bc2fa:	4611      	mov	r1, r2
   bc2fc:	9201      	str	r2, [sp, #4]
   bc2fe:	f7fa fbf7 	bl	b6af0 <_malloc_r>
   bc302:	4604      	mov	r4, r0
   bc304:	b118      	cbz	r0, bc30e <_calloc_r+0x18>
   bc306:	9a01      	ldr	r2, [sp, #4]
   bc308:	2100      	movs	r1, #0
   bc30a:	f7fd fffa 	bl	ba302 <memset>
   bc30e:	4620      	mov	r0, r4
   bc310:	b002      	add	sp, #8
   bc312:	bd10      	pop	{r4, pc}
   bc314:	0000      	movs	r0, r0
	...

000bc318 <nan>:
   bc318:	ed9f 0b01 	vldr	d0, [pc, #4]	; bc320 <nan+0x8>
   bc31c:	4770      	bx	lr
   bc31e:	bf00      	nop
   bc320:	00000000 	.word	0x00000000
   bc324:	7ff80000 	.word	0x7ff80000

000bc328 <__ascii_wctomb>:
   bc328:	b149      	cbz	r1, bc33e <__ascii_wctomb+0x16>
   bc32a:	2aff      	cmp	r2, #255	; 0xff
   bc32c:	bf85      	ittet	hi
   bc32e:	238a      	movhi	r3, #138	; 0x8a
   bc330:	6003      	strhi	r3, [r0, #0]
   bc332:	700a      	strbls	r2, [r1, #0]
   bc334:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   bc338:	bf98      	it	ls
   bc33a:	2001      	movls	r0, #1
   bc33c:	4770      	bx	lr
   bc33e:	4608      	mov	r0, r1
   bc340:	4770      	bx	lr
	...

000bc344 <__aeabi_d2lz>:
   bc344:	b538      	push	{r3, r4, r5, lr}
   bc346:	2200      	movs	r2, #0
   bc348:	2300      	movs	r3, #0
   bc34a:	4604      	mov	r4, r0
   bc34c:	460d      	mov	r5, r1
   bc34e:	f7fd fec3 	bl	ba0d8 <__aeabi_dcmplt>
   bc352:	b928      	cbnz	r0, bc360 <__aeabi_d2lz+0x1c>
   bc354:	4620      	mov	r0, r4
   bc356:	4629      	mov	r1, r5
   bc358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bc35c:	f7fd bf6a 	b.w	ba234 <__aeabi_d2ulz>
   bc360:	4620      	mov	r0, r4
   bc362:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bc366:	f7fd ff65 	bl	ba234 <__aeabi_d2ulz>
   bc36a:	4240      	negs	r0, r0
   bc36c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bc370:	bd38      	pop	{r3, r4, r5, pc}
   bc372:	bf00      	nop

000bc374 <dynalib_user>:
   bc374:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bc384:	0000 0000 6162 6973 5f63 7473 6972 676e     ....basic_string
   bc394:	3a3a 4d5f 635f 6e6f 7473 7572 7463 6e20     ::_M_construct n
   bc3a4:	6c75 206c 6f6e 2074 6176 696c 0064 720a     ull not valid..r
   bc3b4:	7165 6575 7473 6320 646f 2065 2c31 6120     equest code 1, a
   bc3c4:	6464 6572 7373 203a 7400 6172 736e 696d     ddress: .transmi
   bc3d4:	7373 6f69 206e 6572 6963 7665 6465 6620     ssion recieved f
   bc3e4:	6f72 3a6d 0020 6564 6976 6563 6920 3a64     rom: .device id:
   bc3f4:	0020 7274 6e61 6d73 7369 6973 6e6f 7320      .transmission s
   bc404:	6e65 2074 6f74 203a 7200 7165 6575 7473     ent to: .request
   bc414:	6320 646f 2065 2c32 6120 6464 6572 7373      code 2, address
   bc424:	203a 6300 6e6f 6c66 6369 2074 6576 6972     : .conflict veri
   bc434:	6966 6163 6974 6e6f 203a 0a00 6f43 6e6e     fication: ..Conn
   bc444:	6365 6574 2064 6f74 203a 2c00 0020 616c     ected to: ., .la
   bc454:	6970 742e 6172 736e 7469 6863 6369 6761     pi.transitchicag
   bc464:	2e6f 6f63 006d 6576 7463 726f 3a3a 4d5f     o.com.vector::_M
   bc474:	725f 6e61 6567 635f 6568 6b63 203a 5f5f     _range_check: __
   bc484:	206e 7728 6968 6863 6920 2073 7a25 2975     n (which is %zu)
   bc494:	3e20 203d 6874 7369 3e2d 6973 657a 2928      >= this->size()
   bc4a4:	2820 6877 6369 2068 7369 2520 757a 0029      (which is %zu).
   bc4b4:	6163 6e6e 746f 6320 6572 7461 2065 7473     cannot create st
   bc4c4:	3a64 763a 6365 6f74 2072 616c 6772 7265     d::vector larger
   bc4d4:	7420 6168 206e 616d 5f78 6973 657a 2928      than max_size()
   bc4e4:	0a00 6e45 6574 2072 6874 2065 696c 656e     ..Enter the line
   bc4f4:	6320 6c6f 726f 6f20 2066 6874 2065 6564      color of the de
   bc504:	6976 6563 7720 7469 2068 6874 2065 6c62     vice with the bl
   bc514:	6e69 696b 676e 4c20 4445 203a 7200 6365     inking LED: .rec
   bc524:	6965 6576 7220 6465 7200 6365 6965 6576     eive red.receive
   bc534:	6220 756c 0065 530a 7165 6575 636e 3a65      blue..Sequence:
   bc544:	0020 4646 3030 3030 3000 3041 3030 0030      .FF0000.0A0000.
   bc554:	3030 3030 4646 3000 3030 3030 0041 4536     0000FF.00000A.6E
   bc564:	3034 3030 3130 422d 4135 2d33 3346 3339     400001-B5A3-F393
   bc574:	452d 4130 2d39 3545 4530 3432 4344 4143     -E0A9-E50E24DCCA
   bc584:	4539 3600 3445 3030 3030 2d32 3542 3341     9E.6E400002-B5A3
   bc594:	462d 3933 2d33 3045 3941 452d 3035 3245     -F393-E0A9-E50E2
   bc5a4:	4434 4343 3941 0045 4536 3034 3030 3330     4DCCA9E.6E400003
   bc5b4:	422d 4135 2d33 3346 3339 452d 4130 2d39     -B5A3-F393-E0A9-
   bc5c4:	3545 4530 3432 4344 4143 4539 7400 0078     E50E24DCCA9E.tx.
   bc5d4:	7872 6c00 6f6f 2070 7473 7261 0074 612f     rx.loop start./a
   bc5e4:	6970 312f 302e 742f 7074 736f 7469 6f69     pi/1.0/ttpositio
   bc5f4:	736e 612e 7073 3f78 656b 3d79 3030 6666     ns.aspx?key=00ff
   bc604:	3930 3630 6333 6161 3634 3437 3438 3433     09063caa46748434
   bc614:	3564 6166 3233 6431 3430 6638 7226 3d74     d5fa321d048f&rt=
   bc624:	2600 756f 7074 7475 7954 6570 4a3d 4f53     .&outputType=JSO
   bc634:	004e 4547 0054 6170 7372 6e69 0067 6170     N.GET.parsing.pa
   bc644:	7372 6e69 2067 6166 6c69 6465 6300 6174     rsing failed.cta
   bc654:	7474 7200 756f 6574 7400 6172 6e69 6e00     tt.route.train.n
   bc664:	7865 5374 6174 6d4e 7400 4472 0072 616c     extStaNm.trDr.la
   bc674:	0074 6f6c 006e 0000                         t.lon...

000bc67c <_ZTV16JsonParserStaticILj10000ELj1000EE>:
	...
   bc684:	40b9 000b 40cd 000b 6341 6563 7470 2f00     .@...@..Accept./
   bc694:	2f2a 0000 0019 0000 0003 0000 0007 0000     */..............
   bc6a4:	0005 0000 0019 0000 0005 0000 0005 0000     ................
   bc6b4:	0019 0000 4820 5454 2f50 2e31 0d30 000a     .... HTTP/1.0...
   bc6c4:	6c63 736f 0065 6f43 6e6e 6365 6974 6e6f     close.Connection
   bc6d4:	4800 534f 0054 6f43 746e 6e65 2d74 654c     .HOST.Content-Le
   bc6e4:	676e 6874 5000 534f 0054 0a0d 0a0d 2500     ngth.POST......%
   bc6f4:	3430 0078                                   04x.

000bc6f8 <_ZTV10JsonBuffer>:
	...
   bc700:	5cc1 000b 5cdd 000b                         .\...\..

000bc708 <_ZTV10JsonParser>:
	...
   bc710:	5cf1 000b 5d15 000b                         .\...]..

000bc718 <_ZTV13JsonReference>:
	...
   bc720:	5cb1 000b 5cb3 000b 7341 6573 7472 6f69     .\...\..Assertio
   bc730:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   bc740:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   bc750:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   bc760:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   bc770:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   bc780:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   bc790:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   bc7a0:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   bc7b0:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   bc7c0:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   bc7d0:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   bc7e0:	6976 6563 002e 6f43 6e6e 6365 6574 2064     vice..Connected 
   bc7f0:	7962 4320 6e65 7274 6c61 6420 7665 6369     by Central devic
   bc800:	2e65 4400 7369 6f63 6e6e 6365 6574 2064     e..Disconnected 
   bc810:	7962 7220 6d65 746f 2065 6564 6976 6563     by remote device
   bc820:	002e 7544 6c70 6369 7461 6465 6320 6168     ..Duplicated cha
   bc830:	6172 7463 7265 7369 6974 2063 6163 6e6e     racteristic cann
   bc840:	746f 6220 2065 6461 6564 2e64 4600 6961     ot be added..Fai
   bc850:	656c 2064 6f74 6120 7070 6e65 2064 6f6c     led to append lo
   bc860:	6163 206c 6863 7261 6361 6574 6972 7473     cal characterist
   bc870:	6369 002e                                   ic..

000bc874 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bc87c:	6b3d 000b 6ba1 000b 6c87 000b 6bcb 000b     =k...k...l...k..
   bc88c:	6b41 000b                                   Ak..

000bc890 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bc898:	6b39 000b 6baf 000b 6b3b 000b 6bd1 000b     9k...k..;k...k..
   bc8a8:	6b61 000b                                   ak..

000bc8ac <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bc8b4:	6b37 000b 6bbd 000b 7449 000b 6bd7 000b     7k...k..It...k..
   bc8c4:	6b81 000b                                   .k..

000bc8c8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bc8d4:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000bc8e6 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bc8e6:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000bc8f6 <_ZN8particle7BleUuid9BASE_UUIDE>:
   bc8f6:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000bc908 <_ZTVN5spark13EthernetClassE>:
	...
   bc910:	7fe3 000b 7fd9 000b 7fcf 000b 7fc5 000b     ................
   bc920:	7fb9 000b 7fad 000b 8269 000b 8271 000b     ........i...q...
   bc930:	7fa1 000b 7f99 000b 7f8f 000b 7f85 000b     ................
   bc940:	82a1 000b                                   ....

000bc944 <_ZTV7TwoWire>:
	...
   bc94c:	8001 000b 804b 000b 8023 000b 8003 000b     ....K...#.......
   bc95c:	802b 000b 8033 000b 803b 000b 8043 000b     +...3...;...C...

000bc96c <_ZTV9IPAddress>:
	...
   bc974:	810d 000b 80fd 000b 80ff 000b 7061 0070     ............app.

000bc984 <_ZTVN5spark12NetworkClassE>:
	...
   bc98c:	8229 000b 8233 000b 823d 000b 8247 000b     )...3...=...G...
   bc99c:	8251 000b 825d 000b 8269 000b 8271 000b     Q...]...i...q...
   bc9ac:	8279 000b 8285 000b 828d 000b 8297 000b     y...............
   bc9bc:	82a1 000b 6977 6972 676e 7200 6365 2076     ....wiring.recv 
   bc9cc:	7265 6f72 2072 203d 6425 0000               error = %d..

000bc9d8 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bc9e0:	873d 000b 8761 000b 8c93 000b 876f 000b     =...a.......o...
   bc9f0:	8741 000b                                   A...

000bc9f4 <_ZTV9TCPClient>:
	...
   bc9fc:	87ed 000b 8821 000b 86b9 000b 86d3 000b     ....!...........
   bca0c:	8b29 000b 86fd 000b 899f 000b 8731 000b     )...........1...
   bca1c:	8a31 000b 8871 000b 89cd 000b 8bdd 000b     1...q...........
   bca2c:	896d 000b 8733 000b 86e5 000b 8775 000b     m...3.......u...
   bca3c:	8851 000b 5925 252d 2d6d 6425 2554 3a48     Q...%Y-%m-%dT%H:
   bca4c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000bca5c <_ZTV11USARTSerial>:
	...
   bca64:	8cad 000b 8d19 000b 8cf1 000b 838d 000b     ................
   bca74:	8cc1 000b 8cdd 000b 8ccf 000b 8ceb 000b     ................
   bca84:	8caf 000b 8cb3 000b                         ........

000bca8c <_ZTV9USBSerial>:
	...
   bca94:	8d57 000b 8dbf 000b 8d95 000b 838d 000b     W...............
   bcaa4:	8d87 000b 8d59 000b 8d69 000b 8db9 000b     ....Y...i.......
   bcab4:	8d79 000b 8d51 000b                         y...Q...

000bcabc <_ZTVN5spark9WiFiClassE>:
	...
   bcac4:	8eb7 000b 8ead 000b 8ea3 000b 8e59 000b     ............Y...
   bcad4:	8e97 000b 8e8b 000b 8269 000b 8271 000b     ........i...q...
   bcae4:	8e7f 000b 8e77 000b 8e6d 000b 8e63 000b     ....w...m...c...
   bcaf4:	82a1 000b                                   ....

000bcaf8 <_ZSt7nothrow>:
	...

000bcaf9 <_ZTSSt19_Sp_make_shared_tag>:
   bcaf9:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bcb09:	6572 5f64 6174 0067 0000                     red_tag....

000bcb14 <_ZTISt19_Sp_make_shared_tag>:
   bcb14:	cbe0 000b caf9 000b 6f6e 2074 6e65 756f     ........not enou
   bcb24:	6867 7320 6170 6563 6620 726f 6620 726f     gh space for for
   bcb34:	616d 2074 7865 6170 736e 6f69 206e 5028     mat expansion (P
   bcb44:	656c 7361 2065 7573 6d62 7469 6620 6c75     lease submit ful
   bcb54:	206c 7562 2067 6572 6f70 7472 6120 2074     l bug report at 
   bcb64:	7468 7074 3a73 2f2f 6367 2e63 6e67 2e75     https://gcc.gnu.
   bcb74:	726f 2f67 7562 7367 292f 0a3a 2020 2020     org/bugs/):.    
   bcb84:	3000 3231 3433 3635 3837 0039 6162 6973     .0123456789.basi
   bcb94:	5f63 7473 6972 676e 3a3a 4d5f 635f 6572     c_string::_M_cre
   bcba4:	7461 0065                                   ate.

000bcba8 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bcba8:	cc40 000b cbb4 000b cc64 000b               @.......d...

000bcbb4 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bcbb4:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bcbc4:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bcbd4:	0045 0000                                   E...

000bcbd8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bcbd8:	0000 0000 cba8 000b 940d 000b 9421 000b     ............!...
   bcbe8:	95b5 000b 95b5 000b 948b 000b 93cd 000b     ................
   bcbf8:	9473 000b 9435 000b 93ff 000b               s...5.......

000bcc04 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bcc04:	cc40 000b cc10 000b cba8 000b               @...........

000bcc10 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bcc10:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bcc20:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bcc30:	666e 456f 0000 0000                         nfoE....

000bcc38 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bcc38:	0000 0000 cc04 000b 94b5 000b 94c9 000b     ................
   bcc48:	95b5 000b 95b5 000b 948b 000b 93cd 000b     ................
   bcc58:	9589 000b 9515 000b 94dd 000b               ............

000bcc64 <_ZTISt9type_info>:
   bcc64:	cbe0 000b cc6c 000b                         ....l...

000bcc6c <_ZTSSt9type_info>:
   bcc6c:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bcc7c:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bcc8c:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   bcc9c:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bccac:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bccbc:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bcccc:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bccdc:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   bccec:	6e69 7469 0079 6e61 0000 0000               inity.an....

000bccf8 <fpi.1>:
   bccf8:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bcd08:	0000 0000                                   ....

000bcd0c <fpinan.0>:
   bcd0c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   bcd1c:	0000 0000                                   ....

000bcd20 <tinytens>:
   bcd20:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bcd30:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bcd40:	6f43 64ac 0628 1168                         Co.d(.h.

000bcd48 <_ctype_>:
   bcd48:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bcd58:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bcd68:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bcd78:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bcd88:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bcd98:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bcda8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bcdb8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bcdc8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bce48:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bce58:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   bce68:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   bce78:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   bce88:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   bce98:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   bcea8:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   bceb8:	632e 0000                                   .c..

000bcebc <_C_numeric_locale>:
   bcebc:	c872 000b c6f2 000b 55c8 2003 0043 4f50     r........U. C.PO
   bcecc:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   bcedc:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bceec:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bcefc:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bcf0c:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bcf1c:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   bcf2c:	0000 0000                                   ....

000bcf30 <__mprec_bigtens>:
   bcf30:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bcf40:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bcf50:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bcf58 <__mprec_tens>:
   bcf58:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bcf68:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bcf78:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bcf88:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bcf98:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bcfa8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bcfb8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bcfc8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bcfd8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bcfe8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bcff8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bd008:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bd018:	9db4 79d9 7843 44ea                         ...yCx.D

000bd020 <p05.0>:
   bd020:	0005 0000 0019 0000 007d 0000               ........}...

000bd02c <link_const_variable_data_end>:
   bd02c:	000b54c1 	.word	0x000b54c1
   bd030:	000b6569 	.word	0x000b6569
   bd034:	000b7f75 	.word	0x000b7f75
   bd038:	000b7fed 	.word	0x000b7fed
   bd03c:	000b8219 	.word	0x000b8219
   bd040:	000b8379 	.word	0x000b8379
   bd044:	000b8455 	.word	0x000b8455
   bd048:	000b8695 	.word	0x000b8695
   bd04c:	000b8c99 	.word	0x000b8c99
   bd050:	000b8ec1 	.word	0x000b8ec1

000bd054 <link_constructors_end>:
	...
