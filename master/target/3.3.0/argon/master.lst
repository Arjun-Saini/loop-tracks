
/Users/sainihome/Documents/GitHub/loop-tracks/master/target/3.3.0/argon/master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a440  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000be460  000be460  0000e460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000be484  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001fc  200352d0  000be488  000152d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00009324  200354cc  200354cc  000254cc  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000be684  000be684  0001e684  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000be6ac  000be6ac  0001e6ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0014593e  00000000  00000000  0001e6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00011ee3  00000000  00000000  00163fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004a896  00000000  00000000  00175ed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003090  00000000  00000000  001c0767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000d360  00000000  00000000  001c37f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034efe  00000000  00000000  001d0b57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00042632  00000000  00000000  00205a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00156843  00000000  00000000  00248087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a7d0  00000000  00000000  0039e8cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f007 fadb 	bl	bb5ec <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f007 fafd 	bl	bb63c <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	200352d0 	.word	0x200352d0
   b404c:	000be488 	.word	0x000be488
   b4050:	200354cc 	.word	0x200354cc
   b4054:	200354cc 	.word	0x200354cc
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f006 fa41 	bl	ba4e8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000be43c 	.word	0x000be43c
   b4080:	000be460 	.word	0x000be460

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f002 b924 	b.w	b62d0 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f002 fa8d 	bl	b65a8 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f006 b9e1 	b.w	ba458 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f003 bfcb 	b.w	b8030 <malloc>

000b409a <_Znaj>:
   b409a:	f003 bfc9 	b.w	b8030 <malloc>

000b409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409e:	f003 bfcf 	b.w	b8040 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f003 bfcd 	b.w	b8040 <free>

000b40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a6:	7800      	ldrb	r0, [r0, #0]
   b40a8:	fab0 f080 	clz	r0, r0
   b40ac:	0940      	lsrs	r0, r0, #5
   b40ae:	4770      	bx	lr

000b40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b0:	2301      	movs	r3, #1
   b40b2:	7003      	strb	r3, [r0, #0]
   b40b4:	4770      	bx	lr
	...

000b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40b8:	b510      	push	{r4, lr}
   b40ba:	4b03      	ldr	r3, [pc, #12]	; (b40c8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev+0x10>)
   b40bc:	6003      	str	r3, [r0, #0]
   b40be:	4604      	mov	r4, r0
   b40c0:	f003 f8de 	bl	b7280 <_ZN10JsonParserD1Ev>
   b40c4:	4620      	mov	r0, r4
   b40c6:	bd10      	pop	{r4, pc}
   b40c8:	000bda1c 	.word	0x000bda1c

000b40cc <_ZN16JsonParserStaticILj10000ELj1000EED0Ev>:
   b40cc:	b510      	push	{r4, lr}
   b40ce:	4604      	mov	r4, r0
   b40d0:	f7ff fff2 	bl	b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
   b40d4:	4620      	mov	r0, r4
   b40d6:	f246 51bc 	movw	r1, #26044	; 0x65bc
   b40da:	f7ff ffe2 	bl	b40a2 <_ZdlPvj>
   b40de:	4620      	mov	r0, r4
   b40e0:	bd10      	pop	{r4, pc}
	...

000b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>:

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
   b40e4:	b508      	push	{r3, lr}
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b40e6:	4603      	mov	r3, r0
   b40e8:	b150      	cbz	r0, b4100 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x1c>
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      _GLIBCXX_NODISCARD _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {
	if (__n > this->_M_max_size())
   b40ea:	4a06      	ldr	r2, [pc, #24]	; (b4104 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x20>)
   b40ec:	4290      	cmp	r0, r2
   b40ee:	d901      	bls.n	b40f4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b40f0:	f006 fa94 	bl	ba61c <_ZSt17__throw_bad_allocv>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b40f4:	200c      	movs	r0, #12
   b40f6:	4358      	muls	r0, r3
      }
   b40f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b40fc:	f7ff bfcb 	b.w	b4096 <_Znwj>
   b4100:	bd08      	pop	{r3, pc}
   b4102:	bf00      	nop
   b4104:	0aaaaaaa 	.word	0x0aaaaaaa

000b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>:

      pointer
      _M_local_data()
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b4108:	f100 0308 	add.w	r3, r0, #8
#if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
   b410c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b410e:	4604      	mov	r4, r0
	: allocator_type(__a), _M_p(__dat) { }
   b4110:	6003      	str	r3, [r0, #0]
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b4112:	460d      	mov	r5, r1
   b4114:	b1d9      	cbz	r1, b414e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x46>
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   b4116:	4608      	mov	r0, r1
   b4118:	f007 fad8 	bl	bb6cc <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
   b411c:	280f      	cmp	r0, #15
   b411e:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b4122:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b4124:	d907      	bls.n	b4136 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x2e>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   b4126:	2200      	movs	r2, #0
   b4128:	a901      	add	r1, sp, #4
   b412a:	4620      	mov	r0, r4
   b412c:	f006 fa8c 	bl	ba648 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b4130:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4132:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4134:	60a3      	str	r3, [r4, #8]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b4136:	4632      	mov	r2, r6
   b4138:	4629      	mov	r1, r5
   b413a:	6820      	ldr	r0, [r4, #0]
   b413c:	f006 fabf 	bl	ba6be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   b4140:	9b01      	ldr	r3, [sp, #4]
      { __c1 = __c2; }
   b4142:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4144:	6063      	str	r3, [r4, #4]
   b4146:	2100      	movs	r1, #0
   b4148:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b414a:	b002      	add	sp, #8
   b414c:	bd70      	pop	{r4, r5, r6, pc}
	  std::__throw_logic_error(__N("basic_string::"
   b414e:	4801      	ldr	r0, [pc, #4]	; (b4154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x4c>)
   b4150:	f006 fa67 	bl	ba622 <_ZSt19__throw_logic_errorPKc>
   b4154:	000bd74c 	.word	0x000bd74c

000b4158 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b4158:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b415a:	4603      	mov	r3, r0
   b415c:	b150      	cbz	r0, b4174 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0+0x1c>
	if (__n > this->_M_max_size())
   b415e:	4a06      	ldr	r2, [pc, #24]	; (b4178 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0+0x20>)
   b4160:	4290      	cmp	r0, r2
   b4162:	d901      	bls.n	b4168 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b4164:	f006 fa5a 	bl	ba61c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4168:	206c      	movs	r0, #108	; 0x6c
   b416a:	4358      	muls	r0, r3
      }
   b416c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4170:	f7ff bf91 	b.w	b4096 <_Znwj>
   b4174:	bd08      	pop	{r3, pc}
   b4176:	bf00      	nop
   b4178:	012f684b 	.word	0x012f684b

000b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b417c:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b417e:	4603      	mov	r3, r0
   b4180:	b150      	cbz	r0, b4198 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x1c>
	if (__n > this->_M_max_size())
   b4182:	4a06      	ldr	r2, [pc, #24]	; (b419c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x20>)
   b4184:	4290      	cmp	r0, r2
   b4186:	d901      	bls.n	b418c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b4188:	f006 fa48 	bl	ba61c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b418c:	2018      	movs	r0, #24
   b418e:	4358      	muls	r0, r3
      }
   b4190:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4194:	f7ff bf7f 	b.w	b4096 <_Znwj>
   b4198:	bd08      	pop	{r3, pc}
   b419a:	bf00      	nop
   b419c:	05555555 	.word	0x05555555

000b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b41a0:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b41a2:	b148      	cbz	r0, b41b8 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b41a4:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   b41a8:	d301      	bcc.n	b41ae <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b41aa:	f006 fa37 	bl	ba61c <_ZSt17__throw_bad_allocv>
      }
   b41ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b41b2:	0080      	lsls	r0, r0, #2
   b41b4:	f7ff bf6f 	b.w	b4096 <_Znwj>
   b41b8:	bd08      	pop	{r3, pc}

000b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b41ba:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b41bc:	b148      	cbz	r0, b41d2 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b41be:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
   b41c2:	d301      	bcc.n	b41c8 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b41c4:	f006 fa2a 	bl	ba61c <_ZSt17__throw_bad_allocv>
      }
   b41c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b41cc:	00c0      	lsls	r0, r0, #3
   b41ce:	f7ff bf62 	b.w	b4096 <_Znwj>
   b41d2:	bd08      	pop	{r3, pc}

000b41d4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b41d4:	b570      	push	{r4, r5, r6, lr}
   b41d6:	4606      	mov	r6, r0
   b41d8:	460c      	mov	r4, r1
{
    if (base == 0) {
   b41da:	4615      	mov	r5, r2
   b41dc:	b92a      	cbnz	r2, b41ea <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x16>
        return write(n);
   b41de:	6803      	ldr	r3, [r0, #0]
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
    }
}
   b41e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return write(n);
   b41e4:	689b      	ldr	r3, [r3, #8]
   b41e6:	b2c9      	uxtb	r1, r1
   b41e8:	4718      	bx	r3
        if (n < 0 && base == 10) {
   b41ea:	2900      	cmp	r1, #0
   b41ec:	da0b      	bge.n	b4206 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x32>
   b41ee:	2a0a      	cmp	r2, #10
   b41f0:	d109      	bne.n	b4206 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x32>
            t = print('-');
   b41f2:	212d      	movs	r1, #45	; 0x2d
   b41f4:	f005 fada 	bl	b97ac <_ZN5Print5printEc>
            val = -n;
   b41f8:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b41fa:	b2ea      	uxtb	r2, r5
   b41fc:	4630      	mov	r0, r6
}
   b41fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b4202:	f005 baec 	b.w	b97de <_ZN5Print11printNumberEmh>
            val = n;
   b4206:	4621      	mov	r1, r4
   b4208:	e7f7      	b.n	b41fa <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x26>

000b420a <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b420a:	b510      	push	{r4, lr}
   b420c:	4604      	mov	r4, r0
        size_t n = print(b, base);
   b420e:	f7ff ffe1 	bl	b41d4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
        n += println();
   b4212:	4620      	mov	r0, r4
    }
   b4214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b4218:	f005 bacb 	b.w	b97b2 <_ZN5Print7printlnEv>

000b421c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>:
      basic_string(const basic_string& __str)
   b421c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b421e:	f100 0308 	add.w	r3, r0, #8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b4222:	6003      	str	r3, [r0, #0]

      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      size_type
      length() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
   b4224:	e9d1 5300 	ldrd	r5, r3, [r1]
      basic_string(const basic_string& __str)
   b4228:	4604      	mov	r4, r0
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b422a:	18ee      	adds	r6, r5, r3
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   b422c:	b91d      	cbnz	r5, b4236 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
   b422e:	b116      	cbz	r6, b4236 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
	  std::__throw_logic_error(__N("basic_string::"
   b4230:	480c      	ldr	r0, [pc, #48]	; (b4264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x48>)
   b4232:	f006 f9f6 	bl	ba622 <_ZSt19__throw_logic_errorPKc>
	if (__dnew > size_type(_S_local_capacity))
   b4236:	2b0f      	cmp	r3, #15
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b4238:	9301      	str	r3, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b423a:	d907      	bls.n	b424c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x30>
	    _M_data(_M_create(__dnew, size_type(0)));
   b423c:	2200      	movs	r2, #0
   b423e:	a901      	add	r1, sp, #4
   b4240:	4620      	mov	r0, r4
   b4242:	f006 fa01 	bl	ba648 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b4246:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4248:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b424a:	60a3      	str	r3, [r4, #8]
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b424c:	4632      	mov	r2, r6
   b424e:	4629      	mov	r1, r5
   b4250:	6820      	ldr	r0, [r4, #0]
   b4252:	f006 fa2f 	bl	ba6b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	_M_set_length(__dnew);
   b4256:	9b01      	ldr	r3, [sp, #4]
   b4258:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b425a:	6063      	str	r3, [r4, #4]
   b425c:	2100      	movs	r1, #0
   b425e:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b4260:	b002      	add	sp, #8
   b4262:	bd70      	pop	{r4, r5, r6, pc}
   b4264:	000bd74c 	.word	0x000bd74c

000b4268 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4268:	6803      	ldr	r3, [r0, #0]
   b426a:	b2c9      	uxtb	r1, r1
   b426c:	689b      	ldr	r3, [r3, #8]
   b426e:	4718      	bx	r3

000b4270 <_ZN5Print5writeEPKc.isra.0>:
    size_t write(const char *str) {
   b4270:	b513      	push	{r0, r1, r4, lr}
   b4272:	4604      	mov	r4, r0
      if (str == NULL) return 0;
   b4274:	b161      	cbz	r1, b4290 <_ZN5Print5writeEPKc.isra.0+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4276:	4608      	mov	r0, r1
   b4278:	9101      	str	r1, [sp, #4]
   b427a:	f007 fa27 	bl	bb6cc <strlen>
   b427e:	6823      	ldr	r3, [r4, #0]
   b4280:	9901      	ldr	r1, [sp, #4]
   b4282:	68db      	ldr	r3, [r3, #12]
   b4284:	4602      	mov	r2, r0
   b4286:	4620      	mov	r0, r4
    }
   b4288:	b002      	add	sp, #8
   b428a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b428e:	4718      	bx	r3
    }
   b4290:	b002      	add	sp, #8
   b4292:	bd10      	pop	{r4, pc}

000b4294 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>:
  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
   b4294:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b4296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4298:	4604      	mov	r4, r0
   b429a:	460d      	mov	r5, r1
      if (&__x != this)
   b429c:	d025      	beq.n	b42ea <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x56>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b429e:	e9d1 7100 	ldrd	r7, r1, [r1]
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_end_of_storage
			 - this->_M_impl._M_start); }
   b42a2:	6800      	ldr	r0, [r0, #0]
   b42a4:	68a3      	ldr	r3, [r4, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b42a6:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b42a8:	1a1b      	subs	r3, r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
   b42aa:	429e      	cmp	r6, r3
   b42ac:	d91e      	bls.n	b42ec <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x58>
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
   b42ae:	10f0      	asrs	r0, r6, #3
   b42b0:	f7ff ff83 	bl	b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
   b42b4:	2300      	movs	r3, #0
   b42b6:	4605      	mov	r5, r0
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
   b42b8:	429e      	cmp	r6, r3
   b42ba:	d00a      	beq.n	b42d2 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x3e>
   */
#if __cplusplus >= 201103L
  template<typename _Tp, typename... _Args>
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b42bc:	18ea      	adds	r2, r5, r3
   b42be:	bf1c      	itt	ne
   b42c0:	18f9      	addne	r1, r7, r3
   b42c2:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b42c6:	f103 0308 	add.w	r3, r3, #8
   b42ca:	bf18      	it	ne
   b42cc:	e9c2 0100 	strdne	r0, r1, [r2]
   b42d0:	e7f2      	b.n	b42b8 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x24>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b42d2:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b42d4:	b118      	cbz	r0, b42de <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x4a>
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
   b42d6:	68a1      	ldr	r1, [r4, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b42d8:	1a09      	subs	r1, r1, r0
   b42da:	f7ff fee2 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b42de:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b42e0:	4435      	add	r5, r6
   b42e2:	60a5      	str	r5, [r4, #8]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b42e4:	6823      	ldr	r3, [r4, #0]
   b42e6:	4433      	add	r3, r6
   b42e8:	6063      	str	r3, [r4, #4]
	}
      return *this;
    }
   b42ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b42ec:	6862      	ldr	r2, [r4, #4]
   b42ee:	1a12      	subs	r2, r2, r0
	  else if (size() >= __xlen)
   b42f0:	4296      	cmp	r6, r2
   b42f2:	d806      	bhi.n	b4302 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x6e>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   b42f4:	42b9      	cmp	r1, r7
   b42f6:	d0f5      	beq.n	b42e4 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b42f8:	4632      	mov	r2, r6
   b42fa:	4639      	mov	r1, r7
   b42fc:	f007 f984 	bl	bb608 <memmove>

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b4300:	e7f0      	b.n	b42e4 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	  if (_Num)
   b4302:	b112      	cbz	r2, b430a <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x76>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b4304:	4639      	mov	r1, r7
   b4306:	f007 f97f 	bl	bb608 <memmove>
   b430a:	e9d4 2700 	ldrd	r2, r7, [r4]
   b430e:	1abb      	subs	r3, r7, r2
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b4310:	682a      	ldr	r2, [r5, #0]
   b4312:	686d      	ldr	r5, [r5, #4]
   b4314:	441a      	add	r2, r3
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   b4316:	1aad      	subs	r5, r5, r2
					  __x._M_impl._M_finish,
   b4318:	2300      	movs	r3, #0
	      for (; __first != __last; ++__first, (void)++__cur)
   b431a:	429d      	cmp	r5, r3
   b431c:	d0e2      	beq.n	b42e4 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
   b431e:	eb17 0c03 	adds.w	ip, r7, r3
   b4322:	bf1c      	itt	ne
   b4324:	18d1      	addne	r1, r2, r3
   b4326:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b432a:	f103 0308 	add.w	r3, r3, #8
   b432e:	bf18      	it	ne
   b4330:	e9cc 0100 	strdne	r0, r1, [ip]
   b4334:	e7f1      	b.n	b431a <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x86>
	...

000b4338 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>:
      if (&__x != this)
   b4338:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b433a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b433e:	4604      	mov	r4, r0
   b4340:	468a      	mov	sl, r1
      if (&__x != this)
   b4342:	d036      	beq.n	b43b2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7a>
   b4344:	e9d1 5b00 	ldrd	r5, fp, [r1]
			 - this->_M_impl._M_start); }
   b4348:	f8d0 9000 	ldr.w	r9, [r0]
   b434c:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b434e:	4a39      	ldr	r2, [pc, #228]	; (b4434 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xfc>)
   b4350:	ebab 0705 	sub.w	r7, fp, r5
			 - this->_M_impl._M_start); }
   b4354:	eba3 0309 	sub.w	r3, r3, r9
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4358:	ea4f 08e7 	mov.w	r8, r7, asr #3
	  if (__xlen > capacity())
   b435c:	42bb      	cmp	r3, r7
   b435e:	fb02 f808 	mul.w	r8, r2, r8
   b4362:	d228      	bcs.n	b43b6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7e>
	  pointer __result = this->_M_allocate(__n);
   b4364:	4640      	mov	r0, r8
   b4366:	f7ff ff09 	bl	b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
   b436a:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   b436c:	4680      	mov	r8, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b436e:	45ab      	cmp	fp, r5
   b4370:	d00a      	beq.n	b4388 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x50>
   b4372:	f1b8 0f00 	cmp.w	r8, #0
   b4376:	d003      	beq.n	b4380 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x48>
   b4378:	4629      	mov	r1, r5
   b437a:	4640      	mov	r0, r8
   b437c:	f7ff ff4e 	bl	b421c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b4380:	f108 0818 	add.w	r8, r8, #24
   b4384:	3518      	adds	r5, #24
   b4386:	e7f2      	b.n	b436e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x36>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4388:	e9d4 5800 	ldrd	r5, r8, [r4]
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   b438c:	45a8      	cmp	r8, r5
   b438e:	d004      	beq.n	b439a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x62>
      { _M_dispose(); }
   b4390:	4628      	mov	r0, r5
   b4392:	f006 f97b 	bl	ba68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4396:	3518      	adds	r5, #24
   b4398:	e7f8      	b.n	b438c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x54>
	      _M_deallocate(this->_M_impl._M_start,
   b439a:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b439c:	b118      	cbz	r0, b43a6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x6e>
			    - this->_M_impl._M_start);
   b439e:	68a1      	ldr	r1, [r4, #8]
   b43a0:	1a09      	subs	r1, r1, r0
   b43a2:	f7ff fe7e 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b43a6:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b43a8:	443e      	add	r6, r7
   b43aa:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b43ac:	6823      	ldr	r3, [r4, #0]
   b43ae:	443b      	add	r3, r7
   b43b0:	6063      	str	r3, [r4, #4]
    }
   b43b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b43b6:	6846      	ldr	r6, [r0, #4]
   b43b8:	eba6 0609 	sub.w	r6, r6, r9
	  else if (size() >= __xlen)
   b43bc:	42b7      	cmp	r7, r6
   b43be:	d819      	bhi.n	b43f4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xbc>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b43c0:	4646      	mov	r6, r8
   b43c2:	46ca      	mov	sl, r9
   b43c4:	2e00      	cmp	r6, #0
   b43c6:	dd08      	ble.n	b43da <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xa2>
		  }
	      }
	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
	  }
#endif
	this->_M_assign(__str);
   b43c8:	4629      	mov	r1, r5
   b43ca:	4650      	mov	r0, sl
   b43cc:	f006 f97c 	bl	ba6c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b43d0:	3518      	adds	r5, #24
	      ++__result;
   b43d2:	f10a 0a18 	add.w	sl, sl, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b43d6:	3e01      	subs	r6, #1
   b43d8:	e7f4      	b.n	b43c4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x8c>
   b43da:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
   b43de:	2518      	movs	r5, #24
      : _M_current(__i) { }
   b43e0:	6866      	ldr	r6, [r4, #4]
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b43e2:	fb05 9508 	mla	r5, r5, r8, r9
	  for (; __first != __last; ++__first)
   b43e6:	42ae      	cmp	r6, r5
   b43e8:	d0e0      	beq.n	b43ac <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
      { _M_dispose(); }
   b43ea:	4628      	mov	r0, r5
   b43ec:	f006 f94e 	bl	ba68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b43f0:	3518      	adds	r5, #24
      {
	++_M_current;
	return *this;
   b43f2:	e7f8      	b.n	b43e6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xae>
   b43f4:	10f6      	asrs	r6, r6, #3
   b43f6:	4356      	muls	r6, r2
   b43f8:	2e00      	cmp	r6, #0
   b43fa:	dd08      	ble.n	b440e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xd6>
	this->_M_assign(__str);
   b43fc:	4629      	mov	r1, r5
   b43fe:	4648      	mov	r0, r9
   b4400:	f006 f962 	bl	ba6c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b4404:	3518      	adds	r5, #24
	      ++__result;
   b4406:	f109 0918 	add.w	r9, r9, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b440a:	3e01      	subs	r6, #1
   b440c:	e7f4      	b.n	b43f8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xc0>
   b440e:	e9d4 5600 	ldrd	r5, r6, [r4]
   b4412:	1b71      	subs	r1, r6, r5
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b4414:	f8da 5000 	ldr.w	r5, [sl]
					  __x._M_impl._M_finish,
   b4418:	f8da 8004 	ldr.w	r8, [sl, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b441c:	440d      	add	r5, r1
   b441e:	45a8      	cmp	r8, r5
   b4420:	d0c4      	beq.n	b43ac <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4422:	b11e      	cbz	r6, b442c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xf4>
   b4424:	4629      	mov	r1, r5
   b4426:	4630      	mov	r0, r6
   b4428:	f7ff fef8 	bl	b421c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b442c:	3518      	adds	r5, #24
   b442e:	3618      	adds	r6, #24
   b4430:	e7f5      	b.n	b441e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xe6>
   b4432:	bf00      	nop
   b4434:	aaaaaaab 	.word	0xaaaaaaab

000b4438 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4438:	b40e      	push	{r1, r2, r3}
   b443a:	b503      	push	{r0, r1, lr}
   b443c:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b443e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4440:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4444:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4446:	f005 f9e8 	bl	b981a <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b444a:	b002      	add	sp, #8
   b444c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4450:	b003      	add	sp, #12
   b4452:	4770      	bx	lr

000b4454 <_Z16randomizeAddressv>:
    Serial.println();
  }
}

//clears up conflicts with multiple i2c slaves having the same address
void randomizeAddress(){
   b4454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while(slaveCount != slaveCountExpected){
   b4458:	4da0      	ldr	r5, [pc, #640]	; (b46dc <_Z16randomizeAddressv+0x288>)
   b445a:	f8df 82a4 	ldr.w	r8, [pc, #676]	; b4700 <_Z16randomizeAddressv+0x2ac>
void randomizeAddress(){
   b445e:	b08d      	sub	sp, #52	; 0x34
  while(slaveCount != slaveCountExpected){
   b4460:	682a      	ldr	r2, [r5, #0]
   b4462:	f8d8 3000 	ldr.w	r3, [r8]
   b4466:	429a      	cmp	r2, r3
   b4468:	f000 80ff 	beq.w	b466a <_Z16randomizeAddressv+0x216>
    slaveCount = 0;
   b446c:	2300      	movs	r3, #0

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b446e:	f8df 9294 	ldr.w	r9, [pc, #660]	; b4704 <_Z16randomizeAddressv+0x2b0>
   b4472:	f8df a294 	ldr.w	sl, [pc, #660]	; b4708 <_Z16randomizeAddressv+0x2b4>
      if(Wire.available() > 0){
        Serial.println("transmission recieved from: " + String(i));

        slaveCount++;

        String inputBuffer = "";
   b4476:	4f9a      	ldr	r7, [pc, #616]	; (b46e0 <_Z16randomizeAddressv+0x28c>)
    slaveCount = 0;
   b4478:	602b      	str	r3, [r5, #0]
    for(int i = 8; i <= 119; i++){
   b447a:	2408      	movs	r4, #8
      Serial.println("\nrequest code 1, address: " + String(i));
   b447c:	f005 ff1a 	bl	ba2b4 <_Z16_fetch_usbserialv>
   b4480:	4649      	mov	r1, r9
   b4482:	4606      	mov	r6, r0
   b4484:	a808      	add	r0, sp, #32
   b4486:	f005 fa4a 	bl	b991e <_ZN6StringC1EPK19__FlashStringHelper>
   b448a:	220a      	movs	r2, #10
   b448c:	4621      	mov	r1, r4
   b448e:	a804      	add	r0, sp, #16
   b4490:	f005 fa9f 	bl	b99d2 <_ZN6StringC1Eih>
   b4494:	a904      	add	r1, sp, #16
   b4496:	a808      	add	r0, sp, #32
   b4498:	f005 fad6 	bl	b9a48 <_ZplRK15StringSumHelperRK6String>
   b449c:	6801      	ldr	r1, [r0, #0]
   b449e:	4630      	mov	r0, r6
   b44a0:	f005 f993 	bl	b97ca <_ZN5Print7printlnEPKc>
   b44a4:	a804      	add	r0, sp, #16
   b44a6:	f005 f9ef 	bl	b9888 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b44aa:	a808      	add	r0, sp, #32
   b44ac:	f005 f9ec 	bl	b9888 <_ZN6StringD1Ev>
      Wire.beginTransmission(i);
   b44b0:	f006 f84e 	bl	ba550 <_Z19__fetch_global_Wirev>
   b44b4:	4621      	mov	r1, r4
   b44b6:	f004 fffb 	bl	b94b0 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('1');
   b44ba:	f006 f849 	bl	ba550 <_Z19__fetch_global_Wirev>
   b44be:	2131      	movs	r1, #49	; 0x31
   b44c0:	f7ff fed2 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b44c4:	fa5f fb84 	uxtb.w	fp, r4
   b44c8:	f006 f842 	bl	ba550 <_Z19__fetch_global_Wirev>
   b44cc:	f004 fff7 	bl	b94be <_ZN7TwoWire15endTransmissionEv>
      Wire.requestFrom(i, 24);
   b44d0:	f006 f83e 	bl	ba550 <_Z19__fetch_global_Wirev>
   b44d4:	2218      	movs	r2, #24
   b44d6:	4659      	mov	r1, fp
   b44d8:	f004 ffe3 	bl	b94a2 <_ZN7TwoWire11requestFromEhj>
      if(Wire.available() > 0){
   b44dc:	f006 f838 	bl	ba550 <_Z19__fetch_global_Wirev>
   b44e0:	6803      	ldr	r3, [r0, #0]
   b44e2:	691b      	ldr	r3, [r3, #16]
   b44e4:	4798      	blx	r3
   b44e6:	2800      	cmp	r0, #0
   b44e8:	f340 80ba 	ble.w	b4660 <_Z16randomizeAddressv+0x20c>
        Serial.println("transmission recieved from: " + String(i));
   b44ec:	f005 fee2 	bl	ba2b4 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b44f0:	4651      	mov	r1, sl
   b44f2:	4606      	mov	r6, r0
   b44f4:	a808      	add	r0, sp, #32
   b44f6:	f005 fa12 	bl	b991e <_ZN6StringC1EPK19__FlashStringHelper>
   b44fa:	220a      	movs	r2, #10
   b44fc:	4621      	mov	r1, r4
   b44fe:	a804      	add	r0, sp, #16
   b4500:	f005 fa67 	bl	b99d2 <_ZN6StringC1Eih>
   b4504:	a904      	add	r1, sp, #16
   b4506:	a808      	add	r0, sp, #32
   b4508:	f005 fa9e 	bl	b9a48 <_ZplRK15StringSumHelperRK6String>
   b450c:	6801      	ldr	r1, [r0, #0]
   b450e:	4630      	mov	r0, r6
   b4510:	f005 f95b 	bl	b97ca <_ZN5Print7printlnEPKc>
   b4514:	a804      	add	r0, sp, #16
   b4516:	f005 f9b7 	bl	b9888 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b451a:	a808      	add	r0, sp, #32
   b451c:	f005 f9b4 	bl	b9888 <_ZN6StringD1Ev>
        slaveCount++;
   b4520:	682b      	ldr	r3, [r5, #0]
        String inputBuffer = "";
   b4522:	4639      	mov	r1, r7
        slaveCount++;
   b4524:	3301      	adds	r3, #1
        String inputBuffer = "";
   b4526:	4668      	mov	r0, sp
        slaveCount++;
   b4528:	602b      	str	r3, [r5, #0]
        String inputBuffer = "";
   b452a:	f005 f9f8 	bl	b991e <_ZN6StringC1EPK19__FlashStringHelper>
   b452e:	2618      	movs	r6, #24
        char c;
        for(int j = 0; j < 24; j++){
          c = Wire.read();
   b4530:	f006 f80e 	bl	ba550 <_Z19__fetch_global_Wirev>
   b4534:	6803      	ldr	r3, [r0, #0]
   b4536:	695b      	ldr	r3, [r3, #20]
   b4538:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b453a:	b2c1      	uxtb	r1, r0
   b453c:	4668      	mov	r0, sp
   b453e:	f005 fa76 	bl	b9a2e <_ZN6String6concatEc>
        for(int j = 0; j < 24; j++){
   b4542:	3e01      	subs	r6, #1
   b4544:	d1f4      	bne.n	b4530 <_Z16randomizeAddressv+0xdc>
          inputBuffer += c;
        }
        Wire.beginTransmission(i);
   b4546:	f006 f803 	bl	ba550 <_Z19__fetch_global_Wirev>
   b454a:	4621      	mov	r1, r4
   b454c:	f004 ffb0 	bl	b94b0 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(inputBuffer);
   b4550:	f005 fffe 	bl	ba550 <_Z19__fetch_global_Wirev>
   b4554:	9900      	ldr	r1, [sp, #0]
   b4556:	f7ff fe8b 	bl	b4270 <_ZN5Print5writeEPKc.isra.0>
        Serial.println("device id: " + inputBuffer);
   b455a:	f005 feab 	bl	ba2b4 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b455e:	4961      	ldr	r1, [pc, #388]	; (b46e4 <_Z16randomizeAddressv+0x290>)
   b4560:	4606      	mov	r6, r0
   b4562:	a808      	add	r0, sp, #32
   b4564:	f005 f9db 	bl	b991e <_ZN6StringC1EPK19__FlashStringHelper>
   b4568:	4669      	mov	r1, sp
   b456a:	a808      	add	r0, sp, #32
   b456c:	f005 fa6c 	bl	b9a48 <_ZplRK15StringSumHelperRK6String>
   b4570:	6801      	ldr	r1, [r0, #0]
   b4572:	4630      	mov	r0, r6
   b4574:	f005 f929 	bl	b97ca <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4578:	a808      	add	r0, sp, #32
   b457a:	f005 f985 	bl	b9888 <_ZN6StringD1Ev>
        Wire.endTransmission();
   b457e:	f005 ffe7 	bl	ba550 <_Z19__fetch_global_Wirev>
   b4582:	f004 ff9c 	bl	b94be <_ZN7TwoWire15endTransmissionEv>
        Serial.println("transmission sent to: " + String(i));
   b4586:	f005 fe95 	bl	ba2b4 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b458a:	4957      	ldr	r1, [pc, #348]	; (b46e8 <_Z16randomizeAddressv+0x294>)
   b458c:	4606      	mov	r6, r0
   b458e:	a808      	add	r0, sp, #32
   b4590:	f005 f9c5 	bl	b991e <_ZN6StringC1EPK19__FlashStringHelper>
   b4594:	220a      	movs	r2, #10
   b4596:	4621      	mov	r1, r4
   b4598:	a804      	add	r0, sp, #16
   b459a:	f005 fa1a 	bl	b99d2 <_ZN6StringC1Eih>
   b459e:	a904      	add	r1, sp, #16
   b45a0:	a808      	add	r0, sp, #32
   b45a2:	f005 fa51 	bl	b9a48 <_ZplRK15StringSumHelperRK6String>
   b45a6:	6801      	ldr	r1, [r0, #0]
   b45a8:	4630      	mov	r0, r6
   b45aa:	f005 f90e 	bl	b97ca <_ZN5Print7printlnEPKc>
   b45ae:	a804      	add	r0, sp, #16
   b45b0:	f005 f96a 	bl	b9888 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b45b4:	a808      	add	r0, sp, #32
   b45b6:	f005 f967 	bl	b9888 <_ZN6StringD1Ev>

        Wire.beginTransmission(i);
   b45ba:	f005 ffc9 	bl	ba550 <_Z19__fetch_global_Wirev>
   b45be:	4621      	mov	r1, r4
   b45c0:	f004 ff76 	bl	b94b0 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('2');
   b45c4:	f005 ffc4 	bl	ba550 <_Z19__fetch_global_Wirev>
   b45c8:	2132      	movs	r1, #50	; 0x32
   b45ca:	f7ff fe4d 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b45ce:	f005 ffbf 	bl	ba550 <_Z19__fetch_global_Wirev>
   b45d2:	f004 ff74 	bl	b94be <_ZN7TwoWire15endTransmissionEv>

        Serial.println("request code 2, address: " + String(i));
   b45d6:	f005 fe6d 	bl	ba2b4 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b45da:	4944      	ldr	r1, [pc, #272]	; (b46ec <_Z16randomizeAddressv+0x298>)
   b45dc:	4606      	mov	r6, r0
   b45de:	a808      	add	r0, sp, #32
   b45e0:	f005 f99d 	bl	b991e <_ZN6StringC1EPK19__FlashStringHelper>
   b45e4:	220a      	movs	r2, #10
   b45e6:	4621      	mov	r1, r4
   b45e8:	a804      	add	r0, sp, #16
   b45ea:	f005 f9f2 	bl	b99d2 <_ZN6StringC1Eih>
   b45ee:	a904      	add	r1, sp, #16
   b45f0:	a808      	add	r0, sp, #32
   b45f2:	f005 fa29 	bl	b9a48 <_ZplRK15StringSumHelperRK6String>
   b45f6:	6801      	ldr	r1, [r0, #0]
   b45f8:	4630      	mov	r0, r6
   b45fa:	f005 f8e6 	bl	b97ca <_ZN5Print7printlnEPKc>
   b45fe:	a804      	add	r0, sp, #16
   b4600:	f005 f942 	bl	b9888 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4604:	a808      	add	r0, sp, #32
   b4606:	f005 f93f 	bl	b9888 <_ZN6StringD1Ev>
        Wire.requestFrom(i, 4);
   b460a:	f005 ffa1 	bl	ba550 <_Z19__fetch_global_Wirev>
   b460e:	2204      	movs	r2, #4
   b4610:	4659      	mov	r1, fp
   b4612:	f004 ff46 	bl	b94a2 <_ZN7TwoWire11requestFromEhj>
        inputBuffer = "";
   b4616:	4639      	mov	r1, r7
   b4618:	4668      	mov	r0, sp
   b461a:	f005 f9c8 	bl	b99ae <_ZN6StringaSEPKc>
   b461e:	2604      	movs	r6, #4
        for(int j = 0; j < 4; j++){
          inputBuffer += (char)Wire.read();
   b4620:	f005 ff96 	bl	ba550 <_Z19__fetch_global_Wirev>
   b4624:	6803      	ldr	r3, [r0, #0]
   b4626:	695b      	ldr	r3, [r3, #20]
   b4628:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b462a:	b2c1      	uxtb	r1, r0
   b462c:	4668      	mov	r0, sp
   b462e:	f005 f9fe 	bl	b9a2e <_ZN6String6concatEc>
        for(int j = 0; j < 4; j++){
   b4632:	3e01      	subs	r6, #1
   b4634:	d1f4      	bne.n	b4620 <_Z16randomizeAddressv+0x1cc>
        }
        
        Serial.println("conflict verification: " + inputBuffer);
   b4636:	f005 fe3d 	bl	ba2b4 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b463a:	492d      	ldr	r1, [pc, #180]	; (b46f0 <_Z16randomizeAddressv+0x29c>)
   b463c:	4606      	mov	r6, r0
   b463e:	a808      	add	r0, sp, #32
   b4640:	f005 f96d 	bl	b991e <_ZN6StringC1EPK19__FlashStringHelper>
   b4644:	4669      	mov	r1, sp
   b4646:	a808      	add	r0, sp, #32
   b4648:	f005 f9fe 	bl	b9a48 <_ZplRK15StringSumHelperRK6String>
   b464c:	6801      	ldr	r1, [r0, #0]
   b464e:	4630      	mov	r0, r6
   b4650:	f005 f8bb 	bl	b97ca <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4654:	a808      	add	r0, sp, #32
   b4656:	f005 f917 	bl	b9888 <_ZN6StringD1Ev>
        String inputBuffer = "";
   b465a:	4668      	mov	r0, sp
   b465c:	f005 f914 	bl	b9888 <_ZN6StringD1Ev>
    for(int i = 8; i <= 119; i++){
   b4660:	3401      	adds	r4, #1
   b4662:	2c78      	cmp	r4, #120	; 0x78
   b4664:	f47f af0a 	bne.w	b447c <_Z16randomizeAddressv+0x28>
   b4668:	e6fa      	b.n	b4460 <_Z16randomizeAddressv+0xc>
      }
    }
  }

  Serial.println("\nConnected to: ");
   b466a:	f005 fe23 	bl	ba2b4 <_Z16_fetch_usbserialv>
   b466e:	4921      	ldr	r1, [pc, #132]	; (b46f4 <_Z16randomizeAddressv+0x2a0>)
    Wire.endTransmission();

    Wire.requestFrom(i, 24);
    if(Wire.available() > 0){
      Serial.print(i);
      Serial.print(", ");
   b4670:	4e21      	ldr	r6, [pc, #132]	; (b46f8 <_Z16randomizeAddressv+0x2a4>)
	return *(this->_M_impl._M_start + __n);
   b4672:	4f22      	ldr	r7, [pc, #136]	; (b46fc <_Z16randomizeAddressv+0x2a8>)
  Serial.println("\nConnected to: ");
   b4674:	f005 f8a9 	bl	b97ca <_ZN5Print7printlnEPKc>
  for(int i = 8; i<= 119; i++){
   b4678:	2408      	movs	r4, #8
  int count = 0;
   b467a:	2500      	movs	r5, #0
    Wire.beginTransmission(i);
   b467c:	f005 ff68 	bl	ba550 <_Z19__fetch_global_Wirev>
   b4680:	4621      	mov	r1, r4
   b4682:	f004 ff15 	bl	b94b0 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('1');
   b4686:	f005 ff63 	bl	ba550 <_Z19__fetch_global_Wirev>
   b468a:	2131      	movs	r1, #49	; 0x31
   b468c:	f7ff fdec 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b4690:	f005 ff5e 	bl	ba550 <_Z19__fetch_global_Wirev>
   b4694:	f004 ff13 	bl	b94be <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(i, 24);
   b4698:	f005 ff5a 	bl	ba550 <_Z19__fetch_global_Wirev>
   b469c:	2218      	movs	r2, #24
   b469e:	b2e1      	uxtb	r1, r4
   b46a0:	f004 feff 	bl	b94a2 <_ZN7TwoWire11requestFromEhj>
    if(Wire.available() > 0){
   b46a4:	f005 ff54 	bl	ba550 <_Z19__fetch_global_Wirev>
   b46a8:	6803      	ldr	r3, [r0, #0]
   b46aa:	691b      	ldr	r3, [r3, #16]
   b46ac:	4798      	blx	r3
   b46ae:	2800      	cmp	r0, #0
   b46b0:	dd0e      	ble.n	b46d0 <_Z16randomizeAddressv+0x27c>
      Serial.print(i);
   b46b2:	f005 fdff 	bl	ba2b4 <_Z16_fetch_usbserialv>
   b46b6:	220a      	movs	r2, #10
   b46b8:	4621      	mov	r1, r4
   b46ba:	f7ff fd8b 	bl	b41d4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
      Serial.print(", ");
   b46be:	f005 fdf9 	bl	ba2b4 <_Z16_fetch_usbserialv>
   b46c2:	4631      	mov	r1, r6
   b46c4:	f005 f86e 	bl	b97a4 <_ZN5Print5printEPKc>

      addressArr[count++] = i;
   b46c8:	683b      	ldr	r3, [r7, #0]
   b46ca:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
   b46ce:	3501      	adds	r5, #1
  for(int i = 8; i<= 119; i++){
   b46d0:	3401      	adds	r4, #1
   b46d2:	2c78      	cmp	r4, #120	; 0x78
   b46d4:	d1d2      	bne.n	b467c <_Z16randomizeAddressv+0x228>
    }
  }
}
   b46d6:	b00d      	add	sp, #52	; 0x34
   b46d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b46dc:	2003e6a8 	.word	0x2003e6a8
   b46e0:	000bdb72 	.word	0x000bdb72
   b46e4:	000bd7ae 	.word	0x000bd7ae
   b46e8:	000bd7ba 	.word	0x000bd7ba
   b46ec:	000bd7d1 	.word	0x000bd7d1
   b46f0:	000bd7eb 	.word	0x000bd7eb
   b46f4:	000bd803 	.word	0x000bd803
   b46f8:	000bd97d 	.word	0x000bd97d
   b46fc:	20035524 	.word	0x20035524
   b4700:	200352e8 	.word	0x200352e8
   b4704:	000bd776 	.word	0x000bd776
   b4708:	000bd791 	.word	0x000bd791

000b470c <_Z17acquireWireBufferv>:
    }
  }
  bleCount++;
}

hal_i2c_config_t acquireWireBuffer() {
   b470c:	b538      	push	{r3, r4, r5, lr}
    hal_i2c_config_t config = {
   b470e:	f44f 7500 	mov.w	r5, #512	; 0x200
   b4712:	2314      	movs	r3, #20
hal_i2c_config_t acquireWireBuffer() {
   b4714:	4604      	mov	r4, r0
    hal_i2c_config_t config = {
   b4716:	6003      	str	r3, [r0, #0]
   b4718:	6085      	str	r5, [r0, #8]
   b471a:	6105      	str	r5, [r0, #16]
        .size = sizeof(hal_i2c_config_t),
        .version = HAL_I2C_CONFIG_VERSION_1,
        .rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b471c:	4905      	ldr	r1, [pc, #20]	; (b4734 <_Z17acquireWireBufferv+0x28>)
   b471e:	4628      	mov	r0, r5
   b4720:	f005 ff7a 	bl	ba618 <_ZnajRKSt9nothrow_t>
        .rx_buffer_size = I2C_BUFFER_SIZE,
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4724:	4903      	ldr	r1, [pc, #12]	; (b4734 <_Z17acquireWireBufferv+0x28>)
        .tx_buffer_size = I2C_BUFFER_SIZE
    };
   b4726:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4728:	4628      	mov	r0, r5
   b472a:	f005 ff75 	bl	ba618 <_ZnajRKSt9nothrow_t>
    };
   b472e:	60e0      	str	r0, [r4, #12]
    return config;
   b4730:	4620      	mov	r0, r4
   b4732:	bd38      	pop	{r3, r4, r5, pc}
   b4734:	000bdf78 	.word	0x000bdf78

000b4738 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4738:	b510      	push	{r4, lr}
   b473a:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b473c:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b473e:	b118      	cbz	r0, b4748 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4740:	68a1      	ldr	r1, [r4, #8]
   b4742:	1a09      	subs	r1, r1, r0
   b4744:	f7ff fcad 	bl	b40a2 <_ZdlPvj>
      }
   b4748:	4620      	mov	r0, r4
   b474a:	bd10      	pop	{r4, pc}

000b474c <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b474c:	b510      	push	{r4, lr}
   b474e:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4750:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b4752:	b118      	cbz	r0, b475c <_ZNSt12_Vector_baseIfSaIfEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4754:	68a1      	ldr	r1, [r4, #8]
   b4756:	1a09      	subs	r1, r1, r0
   b4758:	f7ff fca3 	bl	b40a2 <_ZdlPvj>
      }
   b475c:	4620      	mov	r0, r4
   b475e:	bd10      	pop	{r4, pc}

000b4760 <_ZNSt12_Vector_baseIiSaIiEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4760:	b510      	push	{r4, lr}
   b4762:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4764:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b4766:	b118      	cbz	r0, b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4768:	68a1      	ldr	r1, [r4, #8]
   b476a:	1a09      	subs	r1, r1, r0
   b476c:	f7ff fc99 	bl	b40a2 <_ZdlPvj>
      }
   b4770:	4620      	mov	r0, r4
   b4772:	bd10      	pop	{r4, pc}

000b4774 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b4774:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4776:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   b477a:	4604      	mov	r4, r0
	  for (; __first != __last; ++__first)
   b477c:	42ae      	cmp	r6, r5
   b477e:	d004      	beq.n	b478a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x16>
      { _M_dispose(); }
   b4780:	4628      	mov	r0, r5
   b4782:	f005 ff83 	bl	ba68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4786:	3518      	adds	r5, #24
   b4788:	e7f8      	b.n	b477c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   b478a:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b478c:	b118      	cbz	r0, b4796 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x22>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b478e:	68a1      	ldr	r1, [r4, #8]
   b4790:	1a09      	subs	r1, r1, r0
   b4792:	f7ff fc86 	bl	b40a2 <_ZdlPvj>
      }
   b4796:	4620      	mov	r0, r4
   b4798:	bd70      	pop	{r4, r5, r6, pc}
	...

000b479c <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>:

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b479c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
      vector(size_type __n, const value_type& __value,
   b47a0:	b570      	push	{r4, r5, r6, lr}
   b47a2:	4604      	mov	r4, r0
   b47a4:	460d      	mov	r5, r1
   b47a6:	4616      	mov	r6, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b47a8:	d302      	bcc.n	b47b0 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x14>
	  __throw_length_error(
   b47aa:	480c      	ldr	r0, [pc, #48]	; (b47dc <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x40>)
   b47ac:	f005 ff3c 	bl	ba628 <_ZSt20__throw_length_errorPKc>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b47b0:	2300      	movs	r3, #0
   b47b2:	e9c0 3300 	strd	r3, r3, [r0]
   b47b6:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b47b8:	4608      	mov	r0, r1
   b47ba:	f7ff fcf1 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b47be:	eb00 0385 	add.w	r3, r0, r5, lsl #2
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b47c2:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b47c6:	60a3      	str	r3, [r4, #8]
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
   b47c8:	b12d      	cbz	r5, b47d6 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x3a>
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
   b47ca:	6832      	ldr	r2, [r6, #0]
      for (; __first != __last; ++__first)
   b47cc:	4283      	cmp	r3, r0
   b47ce:	d002      	beq.n	b47d6 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x3a>
	*__first = __tmp;
   b47d0:	f840 2b04 	str.w	r2, [r0], #4
      for (; __first != __last; ++__first)
   b47d4:	e7fa      	b.n	b47cc <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x30>
	this->_M_impl._M_finish =
   b47d6:	6060      	str	r0, [r4, #4]
      { _M_fill_initialize(__n, __value); }
   b47d8:	4620      	mov	r0, r4
   b47da:	bd70      	pop	{r4, r5, r6, pc}
   b47dc:	000bd813 	.word	0x000bd813

000b47e0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
   b47e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b47e4:	2400      	movs	r4, #0
      vector(initializer_list<value_type> __l,
   b47e6:	ab02      	add	r3, sp, #8
   b47e8:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b47ec:	e9c0 4400 	strd	r4, r4, [r0]
      constexpr const_iterator
      begin() const noexcept { return _M_array; }

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
   b47f0:	4613      	mov	r3, r2
      vector(initializer_list<value_type> __l,
   b47f2:	4605      	mov	r5, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b47f4:	6084      	str	r4, [r0, #8]
   b47f6:	00d7      	lsls	r7, r2, #3
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b47f8:	f342 001c 	sbfx	r0, r2, #0, #29
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b47fc:	4a10      	ldr	r2, [pc, #64]	; (b4840 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x60>)
   b47fe:	ebb2 0fc3 	cmp.w	r2, r3, lsl #3
   b4802:	4688      	mov	r8, r1
   b4804:	d202      	bcs.n	b480c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x2c>
	  __throw_length_error(
   b4806:	480f      	ldr	r0, [pc, #60]	; (b4844 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x64>)
   b4808:	f005 ff0e 	bl	ba628 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b480c:	f7ff fcd5 	bl	b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4810:	19c6      	adds	r6, r0, r7
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4812:	4602      	mov	r2, r0
   b4814:	6028      	str	r0, [r5, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4816:	60ae      	str	r6, [r5, #8]
   b4818:	4623      	mov	r3, r4
   b481a:	429f      	cmp	r7, r3
   b481c:	d00b      	beq.n	b4836 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x56>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b481e:	18d4      	adds	r4, r2, r3
   b4820:	bf1c      	itt	ne
   b4822:	eb08 0103 	addne.w	r1, r8, r3
   b4826:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b482a:	f103 0308 	add.w	r3, r3, #8
   b482e:	bf18      	it	ne
   b4830:	e9c4 0100 	strdne	r0, r1, [r4]
   b4834:	e7f1      	b.n	b481a <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x3a>
      }
   b4836:	4628      	mov	r0, r5
	  this->_M_impl._M_finish =
   b4838:	606e      	str	r6, [r5, #4]
      }
   b483a:	b002      	add	sp, #8
   b483c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4840:	7ffffff8 	.word	0x7ffffff8
   b4844:	000bd813 	.word	0x000bd813

000b4848 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>:
      vector(initializer_list<value_type> __l,
   b4848:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b484c:	ab02      	add	r3, sp, #8
   b484e:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4852:	2300      	movs	r3, #0
   b4854:	e9c0 3300 	strd	r3, r3, [r0]
   b4858:	6083      	str	r3, [r0, #8]
   b485a:	4616      	mov	r6, r2
   b485c:	2318      	movs	r3, #24
   b485e:	435e      	muls	r6, r3
   b4860:	4b10      	ldr	r3, [pc, #64]	; (b48a4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x5c>)
      vector(initializer_list<value_type> __l,
   b4862:	4604      	mov	r4, r0
   b4864:	10f0      	asrs	r0, r6, #3
   b4866:	4358      	muls	r0, r3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4868:	4b0f      	ldr	r3, [pc, #60]	; (b48a8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x60>)
   b486a:	429e      	cmp	r6, r3
   b486c:	460f      	mov	r7, r1
   b486e:	eb01 0806 	add.w	r8, r1, r6
   b4872:	d902      	bls.n	b487a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x32>
	  __throw_length_error(
   b4874:	480d      	ldr	r0, [pc, #52]	; (b48ac <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x64>)
   b4876:	f005 fed7 	bl	ba628 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b487a:	f7ff fc7f 	bl	b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b487e:	4406      	add	r6, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4880:	4605      	mov	r5, r0
   b4882:	6020      	str	r0, [r4, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4884:	60a6      	str	r6, [r4, #8]
   b4886:	45b8      	cmp	r8, r7
   b4888:	d007      	beq.n	b489a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x52>
   b488a:	b11d      	cbz	r5, b4894 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x4c>
   b488c:	4639      	mov	r1, r7
   b488e:	4628      	mov	r0, r5
   b4890:	f7ff fcc4 	bl	b421c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b4894:	3718      	adds	r7, #24
   b4896:	3518      	adds	r5, #24
   b4898:	e7f5      	b.n	b4886 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x3e>
      }
   b489a:	4620      	mov	r0, r4
	  this->_M_impl._M_finish =
   b489c:	6065      	str	r5, [r4, #4]
      }
   b489e:	b002      	add	sp, #8
   b48a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b48a4:	aaaaaaab 	.word	0xaaaaaaab
   b48a8:	7ffffff8 	.word	0x7ffffff8
   b48ac:	000bd813 	.word	0x000bd813

000b48b0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   b48b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b48b2:	e9d1 3700 	ldrd	r3, r7, [r1]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b48b6:	2500      	movs	r5, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b48b8:	1aff      	subs	r7, r7, r3
      vector(const vector& __x)
   b48ba:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b48bc:	e9c0 5500 	strd	r5, r5, [r0]
   b48c0:	6085      	str	r5, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b48c2:	10f8      	asrs	r0, r7, #3
      vector(const vector& __x)
   b48c4:	460e      	mov	r6, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b48c6:	f7ff fc78 	bl	b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b48ca:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b48ce:	4407      	add	r7, r0
   b48d0:	60a7      	str	r7, [r4, #8]
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b48d2:	e9d6 7600 	ldrd	r7, r6, [r6]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b48d6:	4602      	mov	r2, r0
   b48d8:	1bf6      	subs	r6, r6, r7
      : _M_current(__i) { }
   b48da:	462b      	mov	r3, r5
   b48dc:	42b3      	cmp	r3, r6
   b48de:	eb02 0503 	add.w	r5, r2, r3
   b48e2:	d006      	beq.n	b48f2 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x42>
   b48e4:	b11d      	cbz	r5, b48ee <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x3e>
   b48e6:	18f9      	adds	r1, r7, r3
   b48e8:	c903      	ldmia	r1, {r0, r1}
   b48ea:	e885 0003 	stmia.w	r5, {r0, r1}
   b48ee:	3308      	adds	r3, #8
   b48f0:	e7f4      	b.n	b48dc <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x2c>
	this->_M_impl._M_finish =
   b48f2:	6065      	str	r5, [r4, #4]
      }
   b48f4:	4620      	mov	r0, r4
   b48f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b48f8 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>:
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
   b48f8:	b508      	push	{r3, lr}
      { return _M_string_length; }
   b48fa:	6842      	ldr	r2, [r0, #4]
	       const basic_string<_CharT>& __rhs) _GLIBCXX_NOEXCEPT
    { return (__lhs.size() == __rhs.size()
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
   b48fc:	684b      	ldr	r3, [r1, #4]
   b48fe:	429a      	cmp	r2, r3
   b4900:	d108      	bne.n	b4914 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1c>
	if (__n == 0)
   b4902:	b14a      	cbz	r2, b4918 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x20>
	return __builtin_memcmp(__s1, __s2, __n);
   b4904:	6809      	ldr	r1, [r1, #0]
   b4906:	6800      	ldr	r0, [r0, #0]
   b4908:	f006 fe60 	bl	bb5cc <memcmp>
   b490c:	fab0 f080 	clz	r0, r0
   b4910:	0940      	lsrs	r0, r0, #5
						    __lhs.size())); }
   b4912:	bd08      	pop	{r3, pc}
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
   b4914:	2000      	movs	r0, #0
   b4916:	e7fc      	b.n	b4912 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1a>
   b4918:	2001      	movs	r0, #1
   b491a:	e7fa      	b.n	b4912 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1a>

000b491c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b491c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4920:	b0a5      	sub	sp, #148	; 0x94
   b4922:	460c      	mov	r4, r1
   b4924:	4606      	mov	r6, r0
  String inputBuffer = "";
   b4926:	499b      	ldr	r1, [pc, #620]	; (b4b94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x278>)
   b4928:	a805      	add	r0, sp, #20
   b492a:	f004 fff8 	bl	b991e <_ZN6StringC1EPK19__FlashStringHelper>
  String nameBuffer;
   b492e:	4999      	ldr	r1, [pc, #612]	; (b4b94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x278>)
   b4930:	a809      	add	r0, sp, #36	; 0x24
   b4932:	f004 fff4 	bl	b991e <_ZN6StringC1EPK19__FlashStringHelper>
  for(int i = 0; i < len - 1; i++){
   b4936:	2500      	movs	r5, #0
   b4938:	3c01      	subs	r4, #1
   b493a:	42ac      	cmp	r4, r5
   b493c:	d905      	bls.n	b494a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
	String & operator += (char c)			{concat(c); return (*this);}
   b493e:	5d71      	ldrb	r1, [r6, r5]
   b4940:	a805      	add	r0, sp, #20
   b4942:	f005 f874 	bl	b9a2e <_ZN6String6concatEc>
   b4946:	3501      	adds	r5, #1
   b4948:	e7f7      	b.n	b493a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1e>
  switch(bleCount){
   b494a:	4c93      	ldr	r4, [pc, #588]	; (b4b98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x27c>)
  Serial.println(inputBuffer);
   b494c:	f005 fcb2 	bl	ba2b4 <_Z16_fetch_usbserialv>
   b4950:	9905      	ldr	r1, [sp, #20]
   b4952:	f004 ff3a 	bl	b97ca <_ZN5Print7printlnEPKc>
  switch(bleCount){
   b4956:	6823      	ldr	r3, [r4, #0]
   b4958:	2b01      	cmp	r3, #1
   b495a:	d014      	beq.n	b4986 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6a>
   b495c:	2b02      	cmp	r3, #2
   b495e:	d041      	beq.n	b49e4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xc8>
      nameBuffer = inputBuffer;
   b4960:	a905      	add	r1, sp, #20
  switch(bleCount){
   b4962:	2b00      	cmp	r3, #0
   b4964:	f040 809f 	bne.w	b4aa6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18a>
      SSID = inputBuffer;
   b4968:	488c      	ldr	r0, [pc, #560]	; (b4b9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x280>)
   b496a:	f005 f809 	bl	b9980 <_ZN6StringaSERKS_>
  bleCount++;
   b496e:	6823      	ldr	r3, [r4, #0]
  String nameBuffer;
   b4970:	a809      	add	r0, sp, #36	; 0x24
  bleCount++;
   b4972:	3301      	adds	r3, #1
   b4974:	6023      	str	r3, [r4, #0]
  String nameBuffer;
   b4976:	f004 ff87 	bl	b9888 <_ZN6StringD1Ev>
  String inputBuffer = "";
   b497a:	a805      	add	r0, sp, #20
   b497c:	f004 ff84 	bl	b9888 <_ZN6StringD1Ev>
}
   b4980:	b025      	add	sp, #148	; 0x94
   b4982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      password = inputBuffer;
   b4986:	4d86      	ldr	r5, [pc, #536]	; (b4ba0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x284>)
   b4988:	a905      	add	r1, sp, #20
   b498a:	4628      	mov	r0, r5
   b498c:	f004 fff8 	bl	b9980 <_ZN6StringaSERKS_>
	const char * c_str() const { return buffer; }
   b4990:	4b82      	ldr	r3, [pc, #520]	; (b4b9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x280>)
   b4992:	682e      	ldr	r6, [r5, #0]
   b4994:	f8d3 8000 	ldr.w	r8, [r3]
    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b4998:	f1b8 0f00 	cmp.w	r8, #0
   b499c:	d01e      	beq.n	b49dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xc0>
   b499e:	4640      	mov	r0, r8
   b49a0:	f006 fe94 	bl	bb6cc <strlen>
   b49a4:	4607      	mov	r7, r0
   b49a6:	b1de      	cbz	r6, b49e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xc4>
   b49a8:	4630      	mov	r0, r6
   b49aa:	f006 fe8f 	bl	bb6cc <strlen>
   b49ae:	4605      	mov	r5, r0

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   b49b0:	2238      	movs	r2, #56	; 0x38
   b49b2:	2100      	movs	r1, #0
   b49b4:	a816      	add	r0, sp, #88	; 0x58
   b49b6:	f006 fe41 	bl	bb63c <memset>
        creds.size = sizeof(creds);
   b49ba:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
   b49bc:	e9cd 3811 	strd	r3, r8, [sp, #68]	; 0x44
        creds.ssid_len = ssidLen;
        creds.password = password;
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b49c0:	4878      	ldr	r0, [pc, #480]	; (b4ba4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x288>)
        creds.password_len = passwordLen;
   b49c2:	9515      	str	r5, [sp, #84]	; 0x54
        creds.security = WLanSecurityType(security);
   b49c4:	2303      	movs	r3, #3
   b49c6:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b49ca:	2300      	movs	r3, #0
   b49cc:	aa11      	add	r2, sp, #68	; 0x44
   b49ce:	4619      	mov	r1, r3
   b49d0:	6840      	ldr	r0, [r0, #4]
        creds.password = password;
   b49d2:	e9cd 7613 	strd	r7, r6, [sp, #76]	; 0x4c
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b49d6:	f003 fafb 	bl	b7fd0 <network_set_credentials>
   b49da:	e7c8      	b.n	b496e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x52>
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b49dc:	4647      	mov	r7, r8
   b49de:	e7e2      	b.n	b49a6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8a>
   b49e0:	4635      	mov	r5, r6
   b49e2:	e7e5      	b.n	b49b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b49e4:	4e70      	ldr	r6, [pc, #448]	; (b4ba8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x28c>)
   b49e6:	4f71      	ldr	r7, [pc, #452]	; (b4bac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x290>)
  switch(bleCount){
   b49e8:	2500      	movs	r5, #0
   b49ea:	e9d6 2300 	ldrd	r2, r3, [r6]
   b49ee:	1a9b      	subs	r3, r3, r2
   b49f0:	109b      	asrs	r3, r3, #2
   b49f2:	437b      	muls	r3, r7
      for(int i = 0; i < cities.size(); i++){
   b49f4:	42ab      	cmp	r3, r5
   b49f6:	d913      	bls.n	b4a20 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x104>
      { return _M_dataplus._M_p; }
   b49f8:	2324      	movs	r3, #36	; 0x24
   b49fa:	fb03 2205 	mla	r2, r3, r5, r2
        if(inputBuffer == String(cities[i].name.c_str())){
   b49fe:	a811      	add	r0, sp, #68	; 0x44
   b4a00:	68d1      	ldr	r1, [r2, #12]
   b4a02:	f004 ff8c 	bl	b991e <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b4a06:	a911      	add	r1, sp, #68	; 0x44
   b4a08:	a805      	add	r0, sp, #20
   b4a0a:	f005 f83e 	bl	b9a8a <_ZNK6String6equalsERKS_>
   b4a0e:	4680      	mov	r8, r0
   b4a10:	a811      	add	r0, sp, #68	; 0x44
   b4a12:	f004 ff39 	bl	b9888 <_ZN6StringD1Ev>
   b4a16:	f1b8 0f00 	cmp.w	r8, #0
   b4a1a:	d009      	beq.n	b4a30 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x114>
          cityIndex = i;
   b4a1c:	4b64      	ldr	r3, [pc, #400]	; (b4bb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x294>)
   b4a1e:	601d      	str	r5, [r3, #0]
      if(cityIndex == -1){
   b4a20:	4b63      	ldr	r3, [pc, #396]	; (b4bb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x294>)
   b4a22:	681b      	ldr	r3, [r3, #0]
   b4a24:	1c5a      	adds	r2, r3, #1
   b4a26:	d105      	bne.n	b4a34 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x118>
          bleCount--;
   b4a28:	6823      	ldr	r3, [r4, #0]
   b4a2a:	3b01      	subs	r3, #1
   b4a2c:	6023      	str	r3, [r4, #0]
          break;
   b4a2e:	e79e      	b.n	b496e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x52>
      for(int i = 0; i < cities.size(); i++){
   b4a30:	3501      	adds	r5, #1
   b4a32:	e7da      	b.n	b49ea <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xce>
	return *(this->_M_impl._M_start + __n);
   b4a34:	2224      	movs	r2, #36	; 0x24
   b4a36:	4353      	muls	r3, r2
   b4a38:	6832      	ldr	r2, [r6, #0]
   b4a3a:	18d1      	adds	r1, r2, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4a3c:	58d3      	ldr	r3, [r2, r3]
   b4a3e:	6849      	ldr	r1, [r1, #4]
   b4a40:	1ac9      	subs	r1, r1, r3
   b4a42:	4b5c      	ldr	r3, [pc, #368]	; (b4bb4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x298>)
   b4a44:	1089      	asrs	r1, r1, #2
   b4a46:	4359      	muls	r1, r3
      sequenceArr = std::vector<int>(cities[cityIndex].railways.size() * 2, 0);
   b4a48:	2500      	movs	r5, #0
   b4a4a:	ab03      	add	r3, sp, #12
   b4a4c:	aa04      	add	r2, sp, #16
   b4a4e:	0049      	lsls	r1, r1, #1
   b4a50:	a80d      	add	r0, sp, #52	; 0x34
   b4a52:	9504      	str	r5, [sp, #16]
   b4a54:	f7ff fea2 	bl	b479c <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
	  _M_start = __x._M_start;
   b4a58:	4b57      	ldr	r3, [pc, #348]	; (b4bb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x29c>)
   b4a5a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	  _M_end_of_storage = __x._M_end_of_storage;
   b4a5c:	689a      	ldr	r2, [r3, #8]
   b4a5e:	9213      	str	r2, [sp, #76]	; 0x4c
	  _M_finish = __x._M_finish;
   b4a60:	e9d3 0100 	ldrd	r0, r1, [r3]
	  _M_start = __x._M_start;
   b4a64:	601e      	str	r6, [r3, #0]
	  _M_finish = __x._M_finish;
   b4a66:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   b4a68:	605e      	str	r6, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4a6a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   b4a6c:	609e      	str	r6, [r3, #8]
	  _M_finish = __x._M_finish;
   b4a6e:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
      }
   b4a72:	a811      	add	r0, sp, #68	; 0x44
	  _M_finish = __x._M_finish;
   b4a74:	e9cd 550d 	strd	r5, r5, [sp, #52]	; 0x34
	  _M_end_of_storage = __x._M_end_of_storage;
   b4a78:	950f      	str	r5, [sp, #60]	; 0x3c
      }
   b4a7a:	f7ff fe71 	bl	b4760 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4a7e:	a80d      	add	r0, sp, #52	; 0x34
   b4a80:	f7ff fe6e 	bl	b4760 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
      Wire.beginTransmission(addressArr[0]);
   b4a84:	f005 fd64 	bl	ba550 <_Z19__fetch_global_Wirev>
	return *(this->_M_impl._M_start + __n);
   b4a88:	4b4c      	ldr	r3, [pc, #304]	; (b4bbc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a0>)
   b4a8a:	681b      	ldr	r3, [r3, #0]
   b4a8c:	6819      	ldr	r1, [r3, #0]
   b4a8e:	f004 fd0f 	bl	b94b0 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('3');
   b4a92:	f005 fd5d 	bl	ba550 <_Z19__fetch_global_Wirev>
   b4a96:	2133      	movs	r1, #51	; 0x33
   b4a98:	f7ff fbe6 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4a9c:	f005 fd58 	bl	ba550 <_Z19__fetch_global_Wirev>
   b4aa0:	f004 fd0d 	bl	b94be <_ZN7TwoWire15endTransmissionEv>
      break;
   b4aa4:	e763      	b.n	b496e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x52>
      if(index < cities[cityIndex].railways.size()){
   b4aa6:	4f42      	ldr	r7, [pc, #264]	; (b4bb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x294>)
   b4aa8:	f8df 80fc 	ldr.w	r8, [pc, #252]	; b4ba8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x28c>
      nameBuffer = inputBuffer;
   b4aac:	a809      	add	r0, sp, #36	; 0x24
   b4aae:	f004 ff67 	bl	b9980 <_ZN6StringaSERKS_>
      if(index < cities[cityIndex].railways.size()){
   b4ab2:	6839      	ldr	r1, [r7, #0]
   b4ab4:	f8d8 0000 	ldr.w	r0, [r8]
      int index = bleCount - 3;
   b4ab8:	6826      	ldr	r6, [r4, #0]
   b4aba:	2224      	movs	r2, #36	; 0x24
   b4abc:	434a      	muls	r2, r1
   b4abe:	1883      	adds	r3, r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4ac0:	5882      	ldr	r2, [r0, r2]
   b4ac2:	685b      	ldr	r3, [r3, #4]
   b4ac4:	1a9b      	subs	r3, r3, r2
   b4ac6:	4a3b      	ldr	r2, [pc, #236]	; (b4bb4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x298>)
   b4ac8:	109b      	asrs	r3, r3, #2
   b4aca:	3e03      	subs	r6, #3
   b4acc:	4353      	muls	r3, r2
      if(index < cities[cityIndex].railways.size()){
   b4ace:	429e      	cmp	r6, r3
   b4ad0:	f080 80d7 	bcs.w	b4c82 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x366>
        if(cityIndex == 0 && (inputBuffer == "green1" || inputBuffer == "green2")){
   b4ad4:	b981      	cbnz	r1, b4af8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1dc>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4ad6:	493a      	ldr	r1, [pc, #232]	; (b4bc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a4>)
   b4ad8:	a805      	add	r0, sp, #20
   b4ada:	f004 ffe3 	bl	b9aa4 <_ZNK6String6equalsEPKc>
   b4ade:	b370      	cbz	r0, b4b3e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x222>
          nameBuffer = String(greenLine.name.c_str());
   b4ae0:	4b38      	ldr	r3, [pc, #224]	; (b4bc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a8>)
   b4ae2:	a811      	add	r0, sp, #68	; 0x44
   b4ae4:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b4ae6:	f004 ff1a 	bl	b991e <_ZN6StringC1EPK19__FlashStringHelper>
   b4aea:	a911      	add	r1, sp, #68	; 0x44
   b4aec:	a809      	add	r0, sp, #36	; 0x24
   b4aee:	f004 ff56 	bl	b999e <_ZN6StringaSEOS_>
   b4af2:	a811      	add	r0, sp, #68	; 0x44
   b4af4:	f004 fec8 	bl	b9888 <_ZN6StringD1Ev>
            railwayIndex = i;
   b4af8:	f8df b0d4 	ldr.w	fp, [pc, #212]	; b4bd0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b4>
  switch(bleCount){
   b4afc:	f04f 0a00 	mov.w	sl, #0
	return *(this->_M_impl._M_start + __n);
   b4b00:	f04f 0924 	mov.w	r9, #36	; 0x24
        for(int i = 0; i < cities[cityIndex].railways.size(); i++){
   b4b04:	683d      	ldr	r5, [r7, #0]
   b4b06:	f8d8 0000 	ldr.w	r0, [r8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4b0a:	4b2a      	ldr	r3, [pc, #168]	; (b4bb4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x298>)
	return *(this->_M_impl._M_start + __n);
   b4b0c:	fb09 f105 	mul.w	r1, r9, r5
   b4b10:	1842      	adds	r2, r0, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4b12:	5841      	ldr	r1, [r0, r1]
   b4b14:	6852      	ldr	r2, [r2, #4]
   b4b16:	1a52      	subs	r2, r2, r1
   b4b18:	1092      	asrs	r2, r2, #2
   b4b1a:	435a      	muls	r2, r3
   b4b1c:	4552      	cmp	r2, sl
   b4b1e:	d959      	bls.n	b4bd4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>
          if((cityIndex != 0 || nameBuffer != String(purpleLine.name.c_str())) && String(cities[cityIndex].railways[i].name.c_str()) == nameBuffer){
   b4b20:	b9a5      	cbnz	r5, b4b4c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x230>
   b4b22:	4b29      	ldr	r3, [pc, #164]	; (b4bc8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2ac>)
   b4b24:	a80d      	add	r0, sp, #52	; 0x34
   b4b26:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b4b28:	f004 fef9 	bl	b991e <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
   b4b2c:	a90d      	add	r1, sp, #52	; 0x34
   b4b2e:	a809      	add	r0, sp, #36	; 0x24
   b4b30:	f004 ffab 	bl	b9a8a <_ZNK6String6equalsERKS_>
   b4b34:	b360      	cbz	r0, b4b90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x274>
   b4b36:	a80d      	add	r0, sp, #52	; 0x34
   b4b38:	f004 fea6 	bl	b9888 <_ZN6StringD1Ev>
   b4b3c:	e022      	b.n	b4b84 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x268>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4b3e:	4923      	ldr	r1, [pc, #140]	; (b4bcc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b0>)
   b4b40:	a805      	add	r0, sp, #20
   b4b42:	f004 ffaf 	bl	b9aa4 <_ZNK6String6equalsEPKc>
        if(cityIndex == 0 && (inputBuffer == "green1" || inputBuffer == "green2")){
   b4b46:	2800      	cmp	r0, #0
   b4b48:	d1ca      	bne.n	b4ae0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c4>
   b4b4a:	e7d5      	b.n	b4af8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1dc>
          if((cityIndex != 0 || nameBuffer != String(purpleLine.name.c_str())) && String(cities[cityIndex].railways[i].name.c_str()) == nameBuffer){
   b4b4c:	2200      	movs	r2, #0
	return *(this->_M_impl._M_start + __n);
   b4b4e:	6839      	ldr	r1, [r7, #0]
   b4b50:	f8d8 0000 	ldr.w	r0, [r8]
   b4b54:	9201      	str	r2, [sp, #4]
   b4b56:	fb09 f101 	mul.w	r1, r9, r1
   b4b5a:	5841      	ldr	r1, [r0, r1]
   b4b5c:	206c      	movs	r0, #108	; 0x6c
   b4b5e:	fb00 110a 	mla	r1, r0, sl, r1
   b4b62:	a811      	add	r0, sp, #68	; 0x44
   b4b64:	6b09      	ldr	r1, [r1, #48]	; 0x30
   b4b66:	f004 feda 	bl	b991e <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b4b6a:	a909      	add	r1, sp, #36	; 0x24
   b4b6c:	a811      	add	r0, sp, #68	; 0x44
   b4b6e:	f004 ff8c 	bl	b9a8a <_ZNK6String6equalsERKS_>
   b4b72:	1e05      	subs	r5, r0, #0
   b4b74:	a811      	add	r0, sp, #68	; 0x44
   b4b76:	bf18      	it	ne
   b4b78:	2501      	movne	r5, #1
   b4b7a:	f004 fe85 	bl	b9888 <_ZN6StringD1Ev>
   b4b7e:	9a01      	ldr	r2, [sp, #4]
   b4b80:	2a00      	cmp	r2, #0
   b4b82:	d1d8      	bne.n	b4b36 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x21a>
   b4b84:	b10d      	cbz	r5, b4b8a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x26e>
            railwayIndex = i;
   b4b86:	f8cb a000 	str.w	sl, [fp]
        for(int i = 0; i < cities[cityIndex].railways.size(); i++){
   b4b8a:	f10a 0a01 	add.w	sl, sl, #1
   b4b8e:	e7b9      	b.n	b4b04 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1e8>
          if((cityIndex != 0 || nameBuffer != String(purpleLine.name.c_str())) && String(cities[cityIndex].railways[i].name.c_str()) == nameBuffer){
   b4b90:	2201      	movs	r2, #1
   b4b92:	e7dc      	b.n	b4b4e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x232>
   b4b94:	000bdb72 	.word	0x000bdb72
   b4b98:	20035530 	.word	0x20035530
   b4b9c:	200354cc 	.word	0x200354cc
   b4ba0:	2003e4e0 	.word	0x2003e4e0
   b4ba4:	2003e718 	.word	0x2003e718
   b4ba8:	20035610 	.word	0x20035610
   b4bac:	38e38e39 	.word	0x38e38e39
   b4bb0:	200352d0 	.word	0x200352d0
   b4bb4:	684bda13 	.word	0x684bda13
   b4bb8:	2003e69c 	.word	0x2003e69c
   b4bbc:	20035524 	.word	0x20035524
   b4bc0:	000bd844 	.word	0x000bd844
   b4bc4:	20035628 	.word	0x20035628
   b4bc8:	2003e55c 	.word	0x2003e55c
   b4bcc:	000bd84b 	.word	0x000bd84b
   b4bd0:	200352e4 	.word	0x200352e4
        if(railwayIndex == -1){
   b4bd4:	f8df b1b4 	ldr.w	fp, [pc, #436]	; b4d8c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x470>
   b4bd8:	f8db 3000 	ldr.w	r3, [fp]
   b4bdc:	3301      	adds	r3, #1
   b4bde:	f43f af23 	beq.w	b4a28 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10c>
   b4be2:	00b3      	lsls	r3, r6, #2
   b4be4:	f8df a1a8 	ldr.w	sl, [pc, #424]	; b4d90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x474>
   b4be8:	9301      	str	r3, [sp, #4]
        for(int i = 0; i < 2; i++){
   b4bea:	2500      	movs	r5, #0
          if(cities[cityIndex].railways[railwayIndex].outputs[i].size() == 0 || (cityIndex == 0 && cities[cityIndex].railways[railwayIndex].name == purpleLine.name)){
   b4bec:	6839      	ldr	r1, [r7, #0]
   b4bee:	f8d8 2000 	ldr.w	r2, [r8]
   b4bf2:	f8db 3000 	ldr.w	r3, [fp]
   b4bf6:	2024      	movs	r0, #36	; 0x24
   b4bf8:	4348      	muls	r0, r1
   b4bfa:	ea4f 0943 	mov.w	r9, r3, lsl #1
   b4bfe:	5810      	ldr	r0, [r2, r0]
   b4c00:	226c      	movs	r2, #108	; 0x6c
   b4c02:	fb02 0003 	mla	r0, r2, r3, r0
   b4c06:	220c      	movs	r2, #12
   b4c08:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
   b4c0c:	436a      	muls	r2, r5
   b4c0e:	eb0c 0e02 	add.w	lr, ip, r2
   b4c12:	f85c 2002 	ldr.w	r2, [ip, r2]
   b4c16:	f8de e004 	ldr.w	lr, [lr, #4]
   b4c1a:	4596      	cmp	lr, r2
   b4c1c:	d007      	beq.n	b4c2e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x312>
   b4c1e:	2900      	cmp	r1, #0
   b4c20:	d157      	bne.n	b4cd2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3b6>
   b4c22:	494f      	ldr	r1, [pc, #316]	; (b4d60 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x444>)
   b4c24:	3030      	adds	r0, #48	; 0x30
   b4c26:	f7ff fe67 	bl	b48f8 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b4c2a:	2800      	cmp	r0, #0
   b4c2c:	d051      	beq.n	b4cd2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3b6>
            sequenceArr[2 * railwayIndex + i] = 0;
   b4c2e:	f8da 2000 	ldr.w	r2, [sl]
   b4c32:	44a9      	add	r9, r5
   b4c34:	2100      	movs	r1, #0
   b4c36:	f842 1029 	str.w	r1, [r2, r9, lsl #2]
        for(int i = 0; i < 2; i++){
   b4c3a:	2d00      	cmp	r5, #0
   b4c3c:	d047      	beq.n	b4cce <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3b2>
   b4c3e:	4d49      	ldr	r5, [pc, #292]	; (b4d64 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x448>)
        Wire.beginTransmission(addressArr[index]);
   b4c40:	f005 fc86 	bl	ba550 <_Z19__fetch_global_Wirev>
   b4c44:	682b      	ldr	r3, [r5, #0]
   b4c46:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   b4c4a:	f004 fc31 	bl	b94b0 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('4');
   b4c4e:	f005 fc7f 	bl	ba550 <_Z19__fetch_global_Wirev>
   b4c52:	2134      	movs	r1, #52	; 0x34
   b4c54:	f7ff fb08 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b4c58:	f005 fc7a 	bl	ba550 <_Z19__fetch_global_Wirev>
   b4c5c:	f004 fc2f 	bl	b94be <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(addressArr[index + 1]);
   b4c60:	f005 fc76 	bl	ba550 <_Z19__fetch_global_Wirev>
   b4c64:	9a01      	ldr	r2, [sp, #4]
   b4c66:	682b      	ldr	r3, [r5, #0]
   b4c68:	4413      	add	r3, r2
   b4c6a:	6859      	ldr	r1, [r3, #4]
   b4c6c:	f004 fc20 	bl	b94b0 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('3');
   b4c70:	f005 fc6e 	bl	ba550 <_Z19__fetch_global_Wirev>
   b4c74:	2133      	movs	r1, #51	; 0x33
   b4c76:	f7ff faf7 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b4c7a:	f005 fc69 	bl	ba550 <_Z19__fetch_global_Wirev>
   b4c7e:	f004 fc1e 	bl	b94be <_ZN7TwoWire15endTransmissionEv>
   b4c82:	683a      	ldr	r2, [r7, #0]
   b4c84:	f8d8 1000 	ldr.w	r1, [r8]
   b4c88:	2324      	movs	r3, #36	; 0x24
   b4c8a:	435a      	muls	r2, r3
   b4c8c:	188b      	adds	r3, r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c8e:	588a      	ldr	r2, [r1, r2]
   b4c90:	685b      	ldr	r3, [r3, #4]
   b4c92:	1a9b      	subs	r3, r3, r2
   b4c94:	4a34      	ldr	r2, [pc, #208]	; (b4d68 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44c>)
   b4c96:	109b      	asrs	r3, r3, #2
   b4c98:	4353      	muls	r3, r2
      if(index == cities[cityIndex].railways.size() - 1){
   b4c9a:	3b01      	subs	r3, #1
   b4c9c:	429e      	cmp	r6, r3
   b4c9e:	f47f ae66 	bne.w	b496e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x52>
        Serial.println("BLE finished");
   b4ca2:	f005 fb07 	bl	ba2b4 <_Z16_fetch_usbserialv>
   b4ca6:	4931      	ldr	r1, [pc, #196]	; (b4d6c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x450>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4ca8:	4d31      	ldr	r5, [pc, #196]	; (b4d70 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x454>)
   b4caa:	f004 fd8e 	bl	b97ca <_ZN5Print7printlnEPKc>
        userInput = true;
   b4cae:	4b31      	ldr	r3, [pc, #196]	; (b4d74 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x458>)
        network_on(*this, 0, 0, NULL);
   b4cb0:	6868      	ldr	r0, [r5, #4]
   b4cb2:	2201      	movs	r2, #1
   b4cb4:	701a      	strb	r2, [r3, #0]
   b4cb6:	2300      	movs	r3, #0
   b4cb8:	461a      	mov	r2, r3
   b4cba:	4619      	mov	r1, r3
   b4cbc:	f003 f960 	bl	b7f80 <network_on>
        network_connect(*this, flags, 0, NULL);
   b4cc0:	2300      	movs	r3, #0
   b4cc2:	6868      	ldr	r0, [r5, #4]
   b4cc4:	461a      	mov	r2, r3
   b4cc6:	4619      	mov	r1, r3
   b4cc8:	f003 f93a 	bl	b7f40 <network_connect>
    }
   b4ccc:	e64f      	b.n	b496e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x52>
   b4cce:	2501      	movs	r5, #1
   b4cd0:	e78c      	b.n	b4bec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2d0>
            sequenceArr[2 * railwayIndex + i] = addressArr[index];
   b4cd2:	4b24      	ldr	r3, [pc, #144]	; (b4d64 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x448>)
   b4cd4:	681a      	ldr	r2, [r3, #0]
   b4cd6:	9b01      	ldr	r3, [sp, #4]
	return *(this->_M_impl._M_start + __n);
   b4cd8:	44a9      	add	r9, r5
   b4cda:	58d1      	ldr	r1, [r2, r3]
   b4cdc:	f8da 2000 	ldr.w	r2, [sl]
   b4ce0:	f842 1029 	str.w	r1, [r2, r9, lsl #2]
            if(cityIndex == 0){
   b4ce4:	683a      	ldr	r2, [r7, #0]
   b4ce6:	2a00      	cmp	r2, #0
   b4ce8:	d1a7      	bne.n	b4c3a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x31e>
              if(inputBuffer == String(brownLine.name.c_str())){
   b4cea:	4b23      	ldr	r3, [pc, #140]	; (b4d78 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x45c>)
   b4cec:	a811      	add	r0, sp, #68	; 0x44
   b4cee:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b4cf0:	f004 fe15 	bl	b991e <_ZN6StringC1EPK19__FlashStringHelper>
   b4cf4:	a911      	add	r1, sp, #68	; 0x44
   b4cf6:	a805      	add	r0, sp, #20
   b4cf8:	f004 fec7 	bl	b9a8a <_ZNK6String6equalsERKS_>
   b4cfc:	4681      	mov	r9, r0
   b4cfe:	a811      	add	r0, sp, #68	; 0x44
   b4d00:	f004 fdc2 	bl	b9888 <_ZN6StringD1Ev>
   b4d04:	f1b9 0f00 	cmp.w	r9, #0
   b4d08:	d00a      	beq.n	b4d20 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x404>
              brownLineAdr = sequenceArr[2 * railwayIndex + i];
   b4d0a:	f8db 2000 	ldr.w	r2, [fp]
   b4d0e:	f8da 1000 	ldr.w	r1, [sl]
   b4d12:	eb05 0242 	add.w	r2, r5, r2, lsl #1
   b4d16:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   b4d1a:	4a18      	ldr	r2, [pc, #96]	; (b4d7c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x460>)
                greenLineAdr[0] = sequenceArr[2 * railwayIndex];
   b4d1c:	6011      	str	r1, [r2, #0]
   b4d1e:	e78c      	b.n	b4c3a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x31e>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4d20:	4917      	ldr	r1, [pc, #92]	; (b4d80 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x464>)
   b4d22:	a805      	add	r0, sp, #20
   b4d24:	f004 febe 	bl	b9aa4 <_ZNK6String6equalsEPKc>
              }else if(inputBuffer == "green1"){
   b4d28:	b138      	cbz	r0, b4d3a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x41e>
                greenLineAdr[0] = sequenceArr[2 * railwayIndex];
   b4d2a:	f8da 2000 	ldr.w	r2, [sl]
   b4d2e:	f8db 1000 	ldr.w	r1, [fp]
   b4d32:	f852 1031 	ldr.w	r1, [r2, r1, lsl #3]
   b4d36:	4a13      	ldr	r2, [pc, #76]	; (b4d84 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x468>)
   b4d38:	e7f0      	b.n	b4d1c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x400>
   b4d3a:	4913      	ldr	r1, [pc, #76]	; (b4d88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x46c>)
   b4d3c:	a805      	add	r0, sp, #20
   b4d3e:	f004 feb1 	bl	b9aa4 <_ZNK6String6equalsEPKc>
              }else if(inputBuffer == "green2"){
   b4d42:	2800      	cmp	r0, #0
   b4d44:	f43f af79 	beq.w	b4c3a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x31e>
                greenLineAdr[1] = sequenceArr[2 * railwayIndex + 1];
   b4d48:	f8db 2000 	ldr.w	r2, [fp]
   b4d4c:	f8da 1000 	ldr.w	r1, [sl]
   b4d50:	0052      	lsls	r2, r2, #1
   b4d52:	3201      	adds	r2, #1
   b4d54:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   b4d58:	4a0a      	ldr	r2, [pc, #40]	; (b4d84 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x468>)
   b4d5a:	6051      	str	r1, [r2, #4]
   b4d5c:	e76d      	b.n	b4c3a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x31e>
   b4d5e:	bf00      	nop
   b4d60:	2003e58c 	.word	0x2003e58c
   b4d64:	20035524 	.word	0x20035524
   b4d68:	684bda13 	.word	0x684bda13
   b4d6c:	000bd852 	.word	0x000bd852
   b4d70:	2003e718 	.word	0x2003e718
   b4d74:	2003e6b4 	.word	0x2003e6b4
   b4d78:	200355a0 	.word	0x200355a0
   b4d7c:	2003560c 	.word	0x2003560c
   b4d80:	000bd844 	.word	0x000bd844
   b4d84:	20035694 	.word	0x20035694
   b4d88:	000bd84b 	.word	0x000bd84b
   b4d8c:	200352e4 	.word	0x200352e4
   b4d90:	2003e69c 	.word	0x2003e69c

000b4d94 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4d94:	2900      	cmp	r1, #0
      _M_create_storage(size_t __n)
   b4d96:	b538      	push	{r3, r4, r5, lr}
   b4d98:	4604      	mov	r4, r0
      _M_allocate(size_t __n)
   b4d9a:	ea4f 0581 	mov.w	r5, r1, lsl #2
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4d9e:	d00c      	beq.n	b4dba <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x26>
	if (__n > this->_M_max_size())
   b4da0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   b4da4:	d301      	bcc.n	b4daa <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x16>
	  std::__throw_bad_alloc();
   b4da6:	f005 fc39 	bl	ba61c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4daa:	4628      	mov	r0, r5
   b4dac:	f7ff f973 	bl	b4096 <_Znwj>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4db0:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4db4:	4428      	add	r0, r5
   b4db6:	60a0      	str	r0, [r4, #8]
      }
   b4db8:	bd38      	pop	{r3, r4, r5, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4dba:	4608      	mov	r0, r1
   b4dbc:	e7f8      	b.n	b4db0 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x1c>

000b4dbe <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b4dbe:	b538      	push	{r3, r4, r5, lr}
   b4dc0:	4604      	mov	r4, r0
   b4dc2:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b4dc4:	42ac      	cmp	r4, r5
   b4dc6:	d004      	beq.n	b4dd2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x14>
      }
   b4dc8:	4620      	mov	r0, r4
   b4dca:	f7ff fcc9 	bl	b4760 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4dce:	340c      	adds	r4, #12
   b4dd0:	e7f8      	b.n	b4dc4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x6>
	    std::_Destroy(std::__addressof(*__first));
	}
   b4dd2:	bd38      	pop	{r3, r4, r5, pc}

000b4dd4 <_ZN7RailwayD1Ev>:
#include "Checkpoint.cpp"
#include <string>

//container for all data for each rail line
class Railway{
   b4dd4:	b510      	push	{r4, lr}
   b4dd6:	4604      	mov	r4, r0
   b4dd8:	3048      	adds	r0, #72	; 0x48
   b4dda:	f7ff fccb 	bl	b4774 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b4dde:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b4de2:	f005 fc53 	bl	ba68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
   b4de6:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b4dea:	f7ff ffe8 	bl	b4dbe <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	_M_deallocate(_M_impl._M_start,
   b4dee:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b4df0:	b118      	cbz	r0, b4dfa <_ZN7RailwayD1Ev+0x26>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4df2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	::operator delete(__p
   b4df4:	1a09      	subs	r1, r1, r0
   b4df6:	f7ff f954 	bl	b40a2 <_ZdlPvj>
      }
   b4dfa:	f104 0018 	add.w	r0, r4, #24
   b4dfe:	f7ff fcaf 	bl	b4760 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4e02:	f104 000c 	add.w	r0, r4, #12
   b4e06:	f7ff fca1 	bl	b474c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b4e0a:	4620      	mov	r0, r4
   b4e0c:	f7ff fc94 	bl	b4738 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
   b4e10:	4620      	mov	r0, r4
   b4e12:	bd10      	pop	{r4, pc}

000b4e14 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b4e14:	b538      	push	{r3, r4, r5, lr}
   b4e16:	4604      	mov	r4, r0
   b4e18:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b4e1a:	42ac      	cmp	r4, r5
   b4e1c:	d004      	beq.n	b4e28 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_+0x14>
      __pointer->~_Tp();
   b4e1e:	4620      	mov	r0, r4
   b4e20:	f7ff ffd8 	bl	b4dd4 <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b4e24:	346c      	adds	r4, #108	; 0x6c
   b4e26:	e7f8      	b.n	b4e1a <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_+0x6>
	}
   b4e28:	bd38      	pop	{r3, r4, r5, pc}

000b4e2a <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b4e2a:	b510      	push	{r4, lr}
   b4e2c:	4604      	mov	r4, r0
	__destroy(__first, __last);
   b4e2e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b4e32:	f7ff ffef 	bl	b4e14 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
   b4e36:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4e38:	b118      	cbz	r0, b4e42 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4e3a:	68a1      	ldr	r1, [r4, #8]
   b4e3c:	1a09      	subs	r1, r1, r0
   b4e3e:	f7ff f930 	bl	b40a2 <_ZdlPvj>
      }
   b4e42:	4620      	mov	r0, r4
   b4e44:	bd10      	pop	{r4, pc}

000b4e46 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b4e46:	b538      	push	{r3, r4, r5, lr}
   b4e48:	4604      	mov	r4, r0
   b4e4a:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b4e4c:	42ac      	cmp	r4, r5
   b4e4e:	d008      	beq.n	b4e62 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_+0x1c>
   b4e50:	f104 000c 	add.w	r0, r4, #12
   b4e54:	f005 fc1a 	bl	ba68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
#include "Railway.cpp"

class City{
   b4e58:	4620      	mov	r0, r4
   b4e5a:	f7ff ffe6 	bl	b4e2a <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b4e5e:	3424      	adds	r4, #36	; 0x24
   b4e60:	e7f4      	b.n	b4e4c <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_+0x6>
	}
   b4e62:	bd38      	pop	{r3, r4, r5, pc}

000b4e64 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b4e64:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b4e66:	b510      	push	{r4, lr}
   b4e68:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b4e6a:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b4e6e:	d005      	beq.n	b4e7c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b4e70:	4601      	mov	r1, r0
   b4e72:	4622      	mov	r2, r4
   b4e74:	4618      	mov	r0, r3
   b4e76:	f006 fbc7 	bl	bb608 <memmove>
   b4e7a:	4603      	mov	r3, r0
	}
   b4e7c:	1918      	adds	r0, r3, r4
   b4e7e:	bd10      	pop	{r4, pc}

000b4e80 <_ZNSt6vectorIiSaIiEEC1ERKS1_>:
      vector(const vector& __x)
   b4e80:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4e82:	e9d1 3600 	ldrd	r3, r6, [r1]
   b4e86:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4e88:	2300      	movs	r3, #0
      vector(const vector& __x)
   b4e8a:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4e8c:	e9c0 3300 	strd	r3, r3, [r0]
   b4e90:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4e92:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
   b4e94:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4e96:	f7ff f983 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4e9a:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4e9e:	4406      	add	r6, r0
   b4ea0:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4ea2:	4602      	mov	r2, r0
			      _Category>::__copy_m(__first, __last, __result);
   b4ea4:	e9d5 0100 	ldrd	r0, r1, [r5]
   b4ea8:	f7ff ffdc 	bl	b4e64 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
   b4eac:	6060      	str	r0, [r4, #4]
      }
   b4eae:	4620      	mov	r0, r4
   b4eb0:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4eb4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>:
      vector(initializer_list<value_type> __l,
   b4eb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b4eb6:	ab04      	add	r3, sp, #16
   b4eb8:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4ebc:	2300      	movs	r3, #0
   b4ebe:	e9c0 3300 	strd	r3, r3, [r0]
   b4ec2:	6083      	str	r3, [r0, #8]
      vector(initializer_list<value_type> __l,
   b4ec4:	4604      	mov	r4, r0
   b4ec6:	4613      	mov	r3, r2
   b4ec8:	460e      	mov	r6, r1
   b4eca:	0095      	lsls	r5, r2, #2
   b4ecc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   b4ed0:	f342 001d 	sbfx	r0, r2, #0, #30
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4ed4:	4a0a      	ldr	r2, [pc, #40]	; (b4f00 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x4c>)
   b4ed6:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   b4eda:	d202      	bcs.n	b4ee2 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x2e>
	  __throw_length_error(
   b4edc:	4809      	ldr	r0, [pc, #36]	; (b4f04 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x50>)
   b4ede:	f005 fba3 	bl	ba628 <_ZSt20__throw_length_errorPKc>
   b4ee2:	9101      	str	r1, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4ee4:	f7ff f95c 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4ee8:	4405      	add	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4eea:	4602      	mov	r2, r0
   b4eec:	6020      	str	r0, [r4, #0]
   b4eee:	9901      	ldr	r1, [sp, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4ef0:	60a5      	str	r5, [r4, #8]
   b4ef2:	4630      	mov	r0, r6
   b4ef4:	f7ff ffb6 	bl	b4e64 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
   b4ef8:	6060      	str	r0, [r4, #4]
      }
   b4efa:	b004      	add	sp, #16
   b4efc:	bd70      	pop	{r4, r5, r6, pc}
   b4efe:	bf00      	nop
   b4f00:	7ffffffc 	.word	0x7ffffffc
   b4f04:	000bd813 	.word	0x000bd813

000b4f08 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>:
      if (&__x != this)
   b4f08:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b4f0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b4f0c:	4604      	mov	r4, r0
   b4f0e:	460d      	mov	r5, r1
      if (&__x != this)
   b4f10:	d01d      	beq.n	b4f4e <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x46>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4f12:	e9d1 7100 	ldrd	r7, r1, [r1]
			 - this->_M_impl._M_start); }
   b4f16:	6802      	ldr	r2, [r0, #0]
   b4f18:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4f1a:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b4f1c:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b4f1e:	429e      	cmp	r6, r3
   b4f20:	d917      	bls.n	b4f52 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x4a>
	  pointer __result = this->_M_allocate(__n);
   b4f22:	10b0      	asrs	r0, r6, #2
   b4f24:	9101      	str	r1, [sp, #4]
   b4f26:	f7ff f93b 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
   b4f2a:	9901      	ldr	r1, [sp, #4]
   b4f2c:	4602      	mov	r2, r0
   b4f2e:	4605      	mov	r5, r0
   b4f30:	4638      	mov	r0, r7
   b4f32:	f7ff ff97 	bl	b4e64 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4f36:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4f38:	b118      	cbz	r0, b4f42 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x3a>
			    - this->_M_impl._M_start);
   b4f3a:	68a1      	ldr	r1, [r4, #8]
   b4f3c:	1a09      	subs	r1, r1, r0
   b4f3e:	f7ff f8b0 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b4f42:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4f44:	4435      	add	r5, r6
   b4f46:	60a5      	str	r5, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4f48:	6823      	ldr	r3, [r4, #0]
   b4f4a:	4433      	add	r3, r6
   b4f4c:	6063      	str	r3, [r4, #4]
    }
   b4f4e:	b003      	add	sp, #12
   b4f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4f52:	6843      	ldr	r3, [r0, #4]
   b4f54:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b4f56:	429e      	cmp	r6, r3
   b4f58:	d803      	bhi.n	b4f62 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x5a>
   b4f5a:	4638      	mov	r0, r7
   b4f5c:	f7ff ff82 	bl	b4e64 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
   b4f60:	e7f2      	b.n	b4f48 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x40>
   b4f62:	18f9      	adds	r1, r7, r3
   b4f64:	4638      	mov	r0, r7
   b4f66:	f7ff ff7d 	bl	b4e64 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
   b4f6a:	e9d4 0200 	ldrd	r0, r2, [r4]
   b4f6e:	e9d5 3100 	ldrd	r3, r1, [r5]
   b4f72:	1a10      	subs	r0, r2, r0
   b4f74:	4418      	add	r0, r3
   b4f76:	e7f1      	b.n	b4f5c <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x54>

000b4f78 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b4f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4f7c:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b4f7e:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4f80:	480b      	ldr	r0, [pc, #44]	; (b4fb0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x38>)
   b4f82:	10a4      	asrs	r4, r4, #2
   b4f84:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b4f86:	4616      	mov	r6, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4f88:	4627      	mov	r7, r4
   b4f8a:	4690      	mov	r8, r2
   b4f8c:	2f00      	cmp	r7, #0
   b4f8e:	dd08      	ble.n	b4fa2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x2a>
	      *__result = *__first;
   b4f90:	4629      	mov	r1, r5
   b4f92:	4640      	mov	r0, r8
   b4f94:	f7ff ffb8 	bl	b4f08 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	      ++__first;
   b4f98:	350c      	adds	r5, #12
	      ++__result;
   b4f9a:	f108 080c 	add.w	r8, r8, #12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4f9e:	3f01      	subs	r7, #1
   b4fa0:	e7f4      	b.n	b4f8c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x14>
	  return __result;
   b4fa2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b4fa6:	200c      	movs	r0, #12
   b4fa8:	fb00 6004 	mla	r0, r0, r4, r6
   b4fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4fb0:	aaaaaaab 	.word	0xaaaaaaab

000b4fb4 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>:
    std::vector<std::string> colors;
    int tripleIndex = -1;
    int loopIndex = -1;
    int lowerLoopBound, upperLoopBound, lowerGreenBound, upperGreenBound;

    Railway(std::vector<Checkpoint> checkpointInput, std::vector<int> scalerInput, std::vector<int> outputSize, std::string nameInput, std::vector<std::string> colorInput, std::vector<int> boundInput = {0, 0, 0, 0}){
   b4fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4fb8:	2500      	movs	r5, #0
   b4fba:	4699      	mov	r9, r3
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b4fbc:	f100 0338 	add.w	r3, r0, #56	; 0x38
      { _M_string_length = __length; }
   b4fc0:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   b4fc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4fc8:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
   b4fcc:	4604      	mov	r4, r0
   b4fce:	e9c0 5500 	strd	r5, r5, [r0]
   b4fd2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b4fd6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b4fda:	e9c0 5506 	strd	r5, r5, [r0, #24]
   b4fde:	e9c0 5508 	strd	r5, r5, [r0, #32]
   b4fe2:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
   b4fe6:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
   b4fea:	b099      	sub	sp, #100	; 0x64
      { __c1 = __c2; }
   b4fec:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
   b4ff0:	6505      	str	r5, [r0, #80]	; 0x50
   b4ff2:	4692      	mov	sl, r2
   b4ff4:	f100 0b18 	add.w	fp, r0, #24
   b4ff8:	f100 0830 	add.w	r8, r0, #48	; 0x30
   b4ffc:	f100 0748 	add.w	r7, r0, #72	; 0x48
      checkpoints = checkpointInput;
   b5000:	f7ff f948 	bl	b4294 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5004:	e9d4 2300 	ldrd	r2, r3, [r4]
   b5008:	1a9b      	subs	r3, r3, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b500a:	42ab      	cmp	r3, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b500c:	ea4f 01e3 	mov.w	r1, r3, asr #3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b5010:	da02      	bge.n	b5018 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x64>
	  __throw_length_error(
   b5012:	485f      	ldr	r0, [pc, #380]	; (b5190 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1dc>)
   b5014:	f005 fb08 	bl	ba628 <_ZSt20__throw_length_errorPKc>
      { _M_create_storage(__n); }
   b5018:	a809      	add	r0, sp, #36	; 0x24
   b501a:	9101      	str	r1, [sp, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b501c:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b5020:	950b      	str	r5, [sp, #44]	; 0x2c
      { _M_create_storage(__n); }
   b5022:	f7ff feb7 	bl	b4d94 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
      if (__n <= 0)
   b5026:	9901      	ldr	r1, [sp, #4]
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
   b5028:	9809      	ldr	r0, [sp, #36]	; 0x24
   b502a:	b131      	cbz	r1, b503a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x86>
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
   b502c:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	*__first = __tmp;
   b5030:	008a      	lsls	r2, r1, #2
   b5032:	4629      	mov	r1, r5
   b5034:	f006 fb02 	bl	bb63c <memset>
   b5038:	4630      	mov	r0, r6
	  _M_finish = __x._M_finish;
   b503a:	e9d4 5203 	ldrd	r5, r2, [r4, #12]
	  _M_start = __x._M_start;
   b503e:	9909      	ldr	r1, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
   b5040:	6963      	ldr	r3, [r4, #20]
   b5042:	930e      	str	r3, [sp, #56]	; 0x38
	  _M_finish = __x._M_finish;
   b5044:	e9c4 1003 	strd	r1, r0, [r4, #12]
      }
   b5048:	ae0c      	add	r6, sp, #48	; 0x30
	  _M_end_of_storage = __x._M_end_of_storage;
   b504a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   b504c:	6161      	str	r1, [r4, #20]
	  _M_finish = __x._M_finish;
   b504e:	e9cd 520c 	strd	r5, r2, [sp, #48]	; 0x30
      }
   b5052:	4630      	mov	r0, r6
	  _M_start = __x._M_start;
   b5054:	2500      	movs	r5, #0
	  _M_finish = __x._M_finish;
   b5056:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
   b505a:	950b      	str	r5, [sp, #44]	; 0x2c
      }
   b505c:	f7ff fb76 	bl	b474c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b5060:	a809      	add	r0, sp, #36	; 0x24
   b5062:	f7ff fb73 	bl	b474c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
      distances = std::vector<float>(checkpoints.size(), 0);
      scalers = scalerInput;
   b5066:	4651      	mov	r1, sl
   b5068:	4658      	mov	r0, fp
   b506a:	f7ff ff4d 	bl	b4f08 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
      outputs = {std::vector<int>(outputSize[0], 0), std::vector<int>(outputSize[1], 0), std::vector<int>(outputSize[2], 0), std::vector<int>(outputSize[3], 0)};
   b506e:	f8d9 1000 	ldr.w	r1, [r9]
   b5072:	9506      	str	r5, [sp, #24]
   b5074:	6809      	ldr	r1, [r1, #0]
   b5076:	ab02      	add	r3, sp, #8
   b5078:	aa06      	add	r2, sp, #24
   b507a:	4630      	mov	r0, r6
   b507c:	f7ff fb8e 	bl	b479c <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b5080:	f8d9 1000 	ldr.w	r1, [r9]
   b5084:	9507      	str	r5, [sp, #28]
   b5086:	6849      	ldr	r1, [r1, #4]
   b5088:	ab03      	add	r3, sp, #12
   b508a:	aa07      	add	r2, sp, #28
   b508c:	a80f      	add	r0, sp, #60	; 0x3c
   b508e:	f7ff fb85 	bl	b479c <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b5092:	f8d9 1000 	ldr.w	r1, [r9]
   b5096:	9508      	str	r5, [sp, #32]
   b5098:	6889      	ldr	r1, [r1, #8]
   b509a:	ab04      	add	r3, sp, #16
   b509c:	aa08      	add	r2, sp, #32
   b509e:	a812      	add	r0, sp, #72	; 0x48
   b50a0:	f7ff fb7c 	bl	b479c <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b50a4:	f8d9 1000 	ldr.w	r1, [r9]
   b50a8:	9509      	str	r5, [sp, #36]	; 0x24
   b50aa:	ab05      	add	r3, sp, #20
   b50ac:	aa09      	add	r2, sp, #36	; 0x24
   b50ae:	68c9      	ldr	r1, [r1, #12]
   b50b0:	a815      	add	r0, sp, #84	; 0x54
   b50b2:	f7ff fb73 	bl	b479c <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
			 - this->_M_impl._M_start); }
   b50b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b50b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b50ba:	1a9b      	subs	r3, r3, r2
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
		    std::forward_iterator_tag)
      {
	const size_type __len = std::distance(__first, __last);

	if (__len > capacity())
   b50bc:	2b2f      	cmp	r3, #47	; 0x2f
   b50be:	d83f      	bhi.n	b5140 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x18c>
	  pointer __result = this->_M_allocate(__n);
   b50c0:	2004      	movs	r0, #4
   b50c2:	f7ff f80f 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
   b50c6:	46b3      	mov	fp, r6
   b50c8:	4605      	mov	r5, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b50ca:	f100 0a30 	add.w	sl, r0, #48	; 0x30
	  _ForwardIterator __cur = __result;
   b50ce:	4681      	mov	r9, r0
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b50d0:	f1b9 0f00 	cmp.w	r9, #0
   b50d4:	d003      	beq.n	b50de <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x12a>
   b50d6:	4659      	mov	r1, fp
   b50d8:	4648      	mov	r0, r9
   b50da:	f7ff fed1 	bl	b4e80 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
	      for (; __first != __last; ++__first, (void)++__cur)
   b50de:	f109 090c 	add.w	r9, r9, #12
   b50e2:	45d1      	cmp	r9, sl
   b50e4:	f10b 0b0c 	add.w	fp, fp, #12
   b50e8:	d1f2      	bne.n	b50d0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x11c>
	__destroy(__first, __last);
   b50ea:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b50ee:	f7ff fe66 	bl	b4dbe <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	    _S_check_init_len(__len, _M_get_Tp_allocator());
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
	    _M_deallocate(this->_M_impl._M_start,
   b50f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b50f4:	b118      	cbz	r0, b50fe <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x14a>
			  this->_M_impl._M_end_of_storage
			  - this->_M_impl._M_start);
   b50f6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b50f8:	1a09      	subs	r1, r1, r0
   b50fa:	f7fe ffd2 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b50fe:	e9c4 5a09 	strd	r5, sl, [r4, #36]	; 0x24
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b5102:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
   b5106:	ad18      	add	r5, sp, #96	; 0x60
   b5108:	3d0c      	subs	r5, #12
      }
   b510a:	4628      	mov	r0, r5
   b510c:	f7ff fb28 	bl	b4760 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5110:	42b5      	cmp	r5, r6
   b5112:	d1f9      	bne.n	b5108 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x154>
	this->_M_assign(__str);
   b5114:	9922      	ldr	r1, [sp, #136]	; 0x88
   b5116:	4640      	mov	r0, r8
   b5118:	f005 fad6 	bl	ba6c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
      name = nameInput;
      colors = colorInput;
   b511c:	4638      	mov	r0, r7
   b511e:	9923      	ldr	r1, [sp, #140]	; 0x8c
   b5120:	f7ff f90a 	bl	b4338 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
	return *(this->_M_impl._M_start + __n);
   b5124:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b5126:	681b      	ldr	r3, [r3, #0]
      lowerLoopBound = boundInput[0];
   b5128:	681a      	ldr	r2, [r3, #0]
   b512a:	65e2      	str	r2, [r4, #92]	; 0x5c
      upperLoopBound = boundInput[1];
   b512c:	685a      	ldr	r2, [r3, #4]
   b512e:	6622      	str	r2, [r4, #96]	; 0x60
      lowerGreenBound = boundInput[2];
   b5130:	689a      	ldr	r2, [r3, #8]
      upperGreenBound = boundInput[3];
   b5132:	68db      	ldr	r3, [r3, #12]
      lowerGreenBound = boundInput[2];
   b5134:	6662      	str	r2, [r4, #100]	; 0x64
    }
   b5136:	4620      	mov	r0, r4
      upperGreenBound = boundInput[3];
   b5138:	66a3      	str	r3, [r4, #104]	; 0x68
    }
   b513a:	b019      	add	sp, #100	; 0x64
   b513c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5140:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   b5142:	1aad      	subs	r5, r5, r2
	  }
	else if (size() >= __len)
   b5144:	2d2f      	cmp	r5, #47	; 0x2f
   b5146:	d90b      	bls.n	b5160 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ac>
			      _Category>::__copy_m(__first, __last, __result);
   b5148:	a918      	add	r1, sp, #96	; 0x60
   b514a:	4630      	mov	r0, r6
   b514c:	f7ff ff14 	bl	b4f78 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b5150:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b5152:	4288      	cmp	r0, r1
   b5154:	4605      	mov	r5, r0
   b5156:	d0d6      	beq.n	b5106 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
   b5158:	f7ff fe31 	bl	b4dbe <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   b515c:	62a5      	str	r5, [r4, #40]	; 0x28
   b515e:	e7d2      	b.n	b5106 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b5160:	4435      	add	r5, r6
   b5162:	4629      	mov	r1, r5
   b5164:	4630      	mov	r0, r6
   b5166:	f7ff ff07 	bl	b4f78 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b516a:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
   b516e:	ab18      	add	r3, sp, #96	; 0x60
   b5170:	429d      	cmp	r5, r3
   b5172:	d00a      	beq.n	b518a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1d6>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b5174:	f1b9 0f00 	cmp.w	r9, #0
   b5178:	d003      	beq.n	b5182 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ce>
   b517a:	4629      	mov	r1, r5
   b517c:	4648      	mov	r0, r9
   b517e:	f7ff fe7f 	bl	b4e80 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b5182:	350c      	adds	r5, #12
   b5184:	f109 090c 	add.w	r9, r9, #12
   b5188:	e7f1      	b.n	b516e <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ba>
	    _ForwardIterator __mid = __first;
	    std::advance(__mid, size());
	    std::copy(__first, __mid, this->_M_impl._M_start);
	    const size_type __attribute__((__unused__)) __n = __len - size();
	    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	    this->_M_impl._M_finish =
   b518a:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
   b518e:	e7ba      	b.n	b5106 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
   b5190:	000bd813 	.word	0x000bd813

000b5194 <_Z41__static_initialization_and_destruction_0ii.constprop.0>:
   b5194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5198:	ed2d 8b0e 	vpush	{d8-d14}
   b519c:	2801      	cmp	r0, #1
   b519e:	4eb3      	ldr	r6, [pc, #716]	; (b546c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2d8>)
   b51a0:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
   b51a4:	f040 85bc 	bne.w	b5d20 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb8c>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b51a8:	2500      	movs	r5, #0
    SleepResult() {}
   b51aa:	4bb1      	ldr	r3, [pc, #708]	; (b5470 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2dc>)
   b51ac:	60b3      	str	r3, [r6, #8]
              error_(SYSTEM_ERROR_NONE) {
   b51ae:	e9c6 5500 	strd	r5, r5, [r6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b51b2:	2003      	movs	r0, #3
   b51b4:	f002 fe98 	bl	b7ee8 <set_system_mode>
  public:
    float lat;
    float lon;

    Checkpoint(float la, float lo){
      lat = la;
   b51b8:	4bae      	ldr	r3, [pc, #696]	; (b5474 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e0>)
   b51ba:	9372      	str	r3, [sp, #456]	; 0x1c8
      lon = lo;
   b51bc:	4bae      	ldr	r3, [pc, #696]	; (b5478 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e4>)
   b51be:	9373      	str	r3, [sp, #460]	; 0x1cc
      lat = la;
   b51c0:	4bae      	ldr	r3, [pc, #696]	; (b547c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e8>)
   b51c2:	9374      	str	r3, [sp, #464]	; 0x1d0
      lon = lo;
   b51c4:	4bae      	ldr	r3, [pc, #696]	; (b5480 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2ec>)
   b51c6:	9375      	str	r3, [sp, #468]	; 0x1d4
      lat = la;
   b51c8:	4bae      	ldr	r3, [pc, #696]	; (b5484 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f0>)
   b51ca:	9376      	str	r3, [sp, #472]	; 0x1d8
      lon = lo;
   b51cc:	4bae      	ldr	r3, [pc, #696]	; (b5488 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f4>)
   b51ce:	9377      	str	r3, [sp, #476]	; 0x1dc
      lat = la;
   b51d0:	4bae      	ldr	r3, [pc, #696]	; (b548c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f8>)
   b51d2:	9378      	str	r3, [sp, #480]	; 0x1e0
      lon = lo;
   b51d4:	4bae      	ldr	r3, [pc, #696]	; (b5490 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2fc>)
   b51d6:	9379      	str	r3, [sp, #484]	; 0x1e4
      lat = la;
   b51d8:	4bae      	ldr	r3, [pc, #696]	; (b5494 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x300>)
   b51da:	937a      	str	r3, [sp, #488]	; 0x1e8
      lon = lo;
   b51dc:	4bae      	ldr	r3, [pc, #696]	; (b5498 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x304>)
   b51de:	937b      	str	r3, [sp, #492]	; 0x1ec
);
   b51e0:	ab72      	add	r3, sp, #456	; 0x1c8
   b51e2:	934c      	str	r3, [sp, #304]	; 0x130
   b51e4:	2305      	movs	r3, #5
   b51e6:	f8df a340 	ldr.w	sl, [pc, #832]	; b5528 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x394>
   b51ea:	934d      	str	r3, [sp, #308]	; 0x134
   b51ec:	f50d 7884 	add.w	r8, sp, #264	; 0x108
   b51f0:	aa4c      	add	r2, sp, #304	; 0x130
   b51f2:	4643      	mov	r3, r8
   b51f4:	ca06      	ldmia	r2, {r1, r2}
   b51f6:	a85a      	add	r0, sp, #360	; 0x168
   b51f8:	f7ff faf2 	bl	b47e0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b51fc:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
   b5200:	ac65      	add	r4, sp, #404	; 0x194
   b5202:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b5206:	2204      	movs	r2, #4
   b5208:	ab4a      	add	r3, sp, #296	; 0x128
   b520a:	944a      	str	r4, [sp, #296]	; 0x128
   b520c:	924b      	str	r2, [sp, #300]	; 0x12c
   b520e:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5212:	a857      	add	r0, sp, #348	; 0x15c
   b5214:	f7ff fe4e 	bl	b4eb4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5218:	aa61      	add	r2, sp, #388	; 0x184
   b521a:	9248      	str	r2, [sp, #288]	; 0x120
   b521c:	2328      	movs	r3, #40	; 0x28
   b521e:	2204      	movs	r2, #4
   b5220:	e9cd 3562 	strd	r3, r5, [sp, #392]	; 0x188
   b5224:	9249      	str	r2, [sp, #292]	; 0x124
   b5226:	ab48      	add	r3, sp, #288	; 0x120
   b5228:	f50d 7bd6 	add.w	fp, sp, #428	; 0x1ac
   b522c:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5230:	a854      	add	r0, sp, #336	; 0x150
   b5232:	9561      	str	r5, [sp, #388]	; 0x184
   b5234:	9564      	str	r5, [sp, #400]	; 0x190
   b5236:	f7ff fe3d 	bl	b4eb4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b523a:	4658      	mov	r0, fp
   b523c:	4997      	ldr	r1, [pc, #604]	; (b549c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x308>)
      lat = la;
   b523e:	eddf 8a98 	vldr	s17, [pc, #608]	; b54a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x30c>
      lon = lo;
   b5242:	ed9f 8a98 	vldr	s16, [pc, #608]	; b54a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x310>
      lat = la;
   b5246:	eddf 9a98 	vldr	s19, [pc, #608]	; b54a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x314>
      lon = lo;
   b524a:	ed9f 9a98 	vldr	s18, [pc, #608]	; b54ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x318>
      lat = la;
   b524e:	eddf aa98 	vldr	s21, [pc, #608]	; b54b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x31c>
      lon = lo;
   b5252:	ed9f aa98 	vldr	s20, [pc, #608]	; b54b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x320>
      lat = la;
   b5256:	eddf ba98 	vldr	s23, [pc, #608]	; b54b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x324>
      lon = lo;
   b525a:	ed9f ba98 	vldr	s22, [pc, #608]	; b54bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x328>
      lat = la;
   b525e:	eddf da98 	vldr	s27, [pc, #608]	; b54c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x32c>
      lon = lo;
   b5262:	ed9f da98 	vldr	s26, [pc, #608]	; b54c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x330>
      lat = la;
   b5266:	eddf ca98 	vldr	s25, [pc, #608]	; b54c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x334>
      lon = lo;
   b526a:	ed9f ca98 	vldr	s24, [pc, #608]	; b54cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x338>
   b526e:	ed9f ea98 	vldr	s28, [pc, #608]	; b54d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x33c>
   b5272:	f7fe ff49 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5276:	a87e      	add	r0, sp, #504	; 0x1f8
   b5278:	4996      	ldr	r1, [pc, #600]	; (b54d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x340>)
   b527a:	f7fe ff45 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b527e:	a884      	add	r0, sp, #528	; 0x210
   b5280:	4995      	ldr	r1, [pc, #596]	; (b54d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x344>)
   b5282:	f7fe ff41 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5286:	ab7e      	add	r3, sp, #504	; 0x1f8
   b5288:	9346      	str	r3, [sp, #280]	; 0x118
   b528a:	2302      	movs	r3, #2
   b528c:	9347      	str	r3, [sp, #284]	; 0x11c
   b528e:	aa46      	add	r2, sp, #280	; 0x118
   b5290:	f50d 79ba 	add.w	r9, sp, #372	; 0x174
   b5294:	ab40      	add	r3, sp, #256	; 0x100
   b5296:	ca06      	ldmia	r2, {r1, r2}
   b5298:	a851      	add	r0, sp, #324	; 0x144
   b529a:	f7ff fad5 	bl	b4848 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b529e:	4629      	mov	r1, r5
   b52a0:	2210      	movs	r2, #16
   b52a2:	4648      	mov	r0, r9
   b52a4:	f006 f9ca 	bl	bb63c <memset>
   b52a8:	2204      	movs	r2, #4
   b52aa:	ab44      	add	r3, sp, #272	; 0x110
   b52ac:	f8cd 9110 	str.w	r9, [sp, #272]	; 0x110
   b52b0:	9245      	str	r2, [sp, #276]	; 0x114
   b52b2:	e893 0006 	ldmia.w	r3, {r1, r2}
   b52b6:	a84e      	add	r0, sp, #312	; 0x138
   b52b8:	f7ff fdfc 	bl	b4eb4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway redLine = Railway(
   b52bc:	ab4e      	add	r3, sp, #312	; 0x138
   b52be:	9302      	str	r3, [sp, #8]
   b52c0:	ab51      	add	r3, sp, #324	; 0x144
   b52c2:	aa57      	add	r2, sp, #348	; 0x15c
   b52c4:	a95a      	add	r1, sp, #360	; 0x168
   b52c6:	e9cd b300 	strd	fp, r3, [sp]
   b52ca:	4884      	ldr	r0, [pc, #528]	; (b54dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x348>)
   b52cc:	ab54      	add	r3, sp, #336	; 0x150
   b52ce:	f7ff fe71 	bl	b4fb4 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
      }
   b52d2:	a84e      	add	r0, sp, #312	; 0x138
   b52d4:	f7ff fa44 	bl	b4760 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b52d8:	a851      	add	r0, sp, #324	; 0x144
   b52da:	f7ff fa4b 	bl	b4774 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b52de:	a884      	add	r0, sp, #528	; 0x210
   b52e0:	f005 f9d4 	bl	ba68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b52e4:	a87e      	add	r0, sp, #504	; 0x1f8
   b52e6:	f005 f9d1 	bl	ba68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b52ea:	4658      	mov	r0, fp
   b52ec:	f005 f9ce 	bl	ba68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b52f0:	a854      	add	r0, sp, #336	; 0x150
   b52f2:	f7ff fa35 	bl	b4760 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b52f6:	a857      	add	r0, sp, #348	; 0x15c
   b52f8:	f7ff fa32 	bl	b4760 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b52fc:	a85a      	add	r0, sp, #360	; 0x168
   b52fe:	f7ff fa1b 	bl	b4738 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5302:	4b77      	ldr	r3, [pc, #476]	; (b54e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x34c>)
   b5304:	937e      	str	r3, [sp, #504]	; 0x1f8
      lon = lo;
   b5306:	4b77      	ldr	r3, [pc, #476]	; (b54e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x350>)
   b5308:	937f      	str	r3, [sp, #508]	; 0x1fc
      lat = la;
   b530a:	4b77      	ldr	r3, [pc, #476]	; (b54e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x354>)
   b530c:	9380      	str	r3, [sp, #512]	; 0x200
      lon = lo;
   b530e:	4b77      	ldr	r3, [pc, #476]	; (b54ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x358>)
   b5310:	9381      	str	r3, [sp, #516]	; 0x204
      lat = la;
   b5312:	4b77      	ldr	r3, [pc, #476]	; (b54f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x35c>)
   b5314:	9382      	str	r3, [sp, #520]	; 0x208
      lon = lo;
   b5316:	4b77      	ldr	r3, [pc, #476]	; (b54f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x360>)
   b5318:	9383      	str	r3, [sp, #524]	; 0x20c
      lat = la;
   b531a:	4b77      	ldr	r3, [pc, #476]	; (b54f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x364>)
   b531c:	9384      	str	r3, [sp, #528]	; 0x210
      lon = lo;
   b531e:	4b77      	ldr	r3, [pc, #476]	; (b54fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x368>)
   b5320:	9385      	str	r3, [sp, #532]	; 0x214
      lat = la;
   b5322:	4b77      	ldr	r3, [pc, #476]	; (b5500 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x36c>)
   b5324:	9386      	str	r3, [sp, #536]	; 0x218
      lon = lo;
   b5326:	4b77      	ldr	r3, [pc, #476]	; (b5504 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x370>)
   b5328:	9387      	str	r3, [sp, #540]	; 0x21c
      lat = la;
   b532a:	4b77      	ldr	r3, [pc, #476]	; (b5508 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x374>)
   b532c:	9388      	str	r3, [sp, #544]	; 0x220
      lon = lo;
   b532e:	4b77      	ldr	r3, [pc, #476]	; (b550c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x378>)
   b5330:	9389      	str	r3, [sp, #548]	; 0x224
      lat = la;
   b5332:	4b77      	ldr	r3, [pc, #476]	; (b5510 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x37c>)
   b5334:	938a      	str	r3, [sp, #552]	; 0x228
      lon = lo;
   b5336:	4b77      	ldr	r3, [pc, #476]	; (b5514 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x380>)
   b5338:	938b      	str	r3, [sp, #556]	; 0x22c
);
   b533a:	ab7e      	add	r3, sp, #504	; 0x1f8
   b533c:	9342      	str	r3, [sp, #264]	; 0x108
   b533e:	2307      	movs	r3, #7
   b5340:	9343      	str	r3, [sp, #268]	; 0x10c
   b5342:	af38      	add	r7, sp, #224	; 0xe0
   b5344:	e898 0006 	ldmia.w	r8, {r1, r2}
   b5348:	463b      	mov	r3, r7
   b534a:	a85a      	add	r0, sp, #360	; 0x168
   b534c:	f7ff fa48 	bl	b47e0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5350:	f10a 0c10 	add.w	ip, sl, #16
   b5354:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5358:	465e      	mov	r6, fp
   b535a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b535c:	e89c 0003 	ldmia.w	ip, {r0, r1}
   b5360:	2306      	movs	r3, #6
   b5362:	9341      	str	r3, [sp, #260]	; 0x104
   b5364:	f8cd b100 	str.w	fp, [sp, #256]	; 0x100
   b5368:	ab40      	add	r3, sp, #256	; 0x100
   b536a:	e9c6 0100 	strd	r0, r1, [r6]
   b536e:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5372:	a857      	add	r0, sp, #348	; 0x15c
   b5374:	9604      	str	r6, [sp, #16]
   b5376:	f7ff fd9d 	bl	b4eb4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b537a:	aa61      	add	r2, sp, #388	; 0x184
   b537c:	923e      	str	r2, [sp, #248]	; 0xf8
   b537e:	233c      	movs	r3, #60	; 0x3c
   b5380:	2204      	movs	r2, #4
   b5382:	e9cd 3562 	strd	r3, r5, [sp, #392]	; 0x188
   b5386:	923f      	str	r2, [sp, #252]	; 0xfc
   b5388:	ab3e      	add	r3, sp, #248	; 0xf8
   b538a:	e893 0006 	ldmia.w	r3, {r1, r2}
   b538e:	a854      	add	r0, sp, #336	; 0x150
   b5390:	9561      	str	r5, [sp, #388]	; 0x184
   b5392:	9564      	str	r5, [sp, #400]	; 0x190
   b5394:	f7ff fd8e 	bl	b4eb4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5398:	4620      	mov	r0, r4
   b539a:	495f      	ldr	r1, [pc, #380]	; (b5518 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x384>)
   b539c:	f7fe feb4 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b53a0:	a872      	add	r0, sp, #456	; 0x1c8
   b53a2:	495e      	ldr	r1, [pc, #376]	; (b551c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x388>)
   b53a4:	f7fe feb0 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b53a8:	a878      	add	r0, sp, #480	; 0x1e0
   b53aa:	495d      	ldr	r1, [pc, #372]	; (b5520 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x38c>)
   b53ac:	f7fe feac 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b53b0:	ab72      	add	r3, sp, #456	; 0x1c8
   b53b2:	933c      	str	r3, [sp, #240]	; 0xf0
   b53b4:	2302      	movs	r3, #2
   b53b6:	933d      	str	r3, [sp, #244]	; 0xf4
   b53b8:	ae36      	add	r6, sp, #216	; 0xd8
   b53ba:	aa3c      	add	r2, sp, #240	; 0xf0
   b53bc:	4633      	mov	r3, r6
   b53be:	ca06      	ldmia	r2, {r1, r2}
   b53c0:	a851      	add	r0, sp, #324	; 0x144
   b53c2:	f7ff fa41 	bl	b4848 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b53c6:	4629      	mov	r1, r5
   b53c8:	2210      	movs	r2, #16
   b53ca:	4648      	mov	r0, r9
   b53cc:	f006 f936 	bl	bb63c <memset>
   b53d0:	2204      	movs	r2, #4
   b53d2:	ab3a      	add	r3, sp, #232	; 0xe8
   b53d4:	f8cd 90e8 	str.w	r9, [sp, #232]	; 0xe8
   b53d8:	923b      	str	r2, [sp, #236]	; 0xec
   b53da:	e893 0006 	ldmia.w	r3, {r1, r2}
   b53de:	a84e      	add	r0, sp, #312	; 0x138
   b53e0:	f7ff fd68 	bl	b4eb4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway blueLine = Railway(
   b53e4:	ab4e      	add	r3, sp, #312	; 0x138
   b53e6:	9302      	str	r3, [sp, #8]
   b53e8:	ab51      	add	r3, sp, #324	; 0x144
   b53ea:	aa57      	add	r2, sp, #348	; 0x15c
   b53ec:	a95a      	add	r1, sp, #360	; 0x168
   b53ee:	e9cd 4300 	strd	r4, r3, [sp]
   b53f2:	484c      	ldr	r0, [pc, #304]	; (b5524 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x390>)
   b53f4:	ab54      	add	r3, sp, #336	; 0x150
   b53f6:	f7ff fddd 	bl	b4fb4 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b53fa:	a84e      	add	r0, sp, #312	; 0x138
   b53fc:	f7ff f9b0 	bl	b4760 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5400:	a851      	add	r0, sp, #324	; 0x144
   b5402:	f7ff f9b7 	bl	b4774 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5406:	a878      	add	r0, sp, #480	; 0x1e0
   b5408:	f005 f940 	bl	ba68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b540c:	a872      	add	r0, sp, #456	; 0x1c8
   b540e:	f005 f93d 	bl	ba68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5412:	4620      	mov	r0, r4
   b5414:	f005 f93a 	bl	ba68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5418:	a854      	add	r0, sp, #336	; 0x150
   b541a:	f7ff f9a1 	bl	b4760 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b541e:	a857      	add	r0, sp, #348	; 0x15c
   b5420:	f7ff f99e 	bl	b4760 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5424:	a85a      	add	r0, sp, #360	; 0x168
   b5426:	f7ff f987 	bl	b4738 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b542a:	ab7e      	add	r3, sp, #504	; 0x1f8
   b542c:	9338      	str	r3, [sp, #224]	; 0xe0
   b542e:	2307      	movs	r3, #7
   b5430:	9339      	str	r3, [sp, #228]	; 0xe4
   b5432:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
   b5436:	e897 0006 	ldmia.w	r7, {r1, r2}
   b543a:	4643      	mov	r3, r8
   b543c:	a85a      	add	r0, sp, #360	; 0x168
      lat = la;
   b543e:	edcd da7e 	vstr	s27, [sp, #504]	; 0x1f8
      lon = lo;
   b5442:	ed8d da7f 	vstr	s26, [sp, #508]	; 0x1fc
      lat = la;
   b5446:	edcd ca80 	vstr	s25, [sp, #512]	; 0x200
      lon = lo;
   b544a:	ed8d ca81 	vstr	s24, [sp, #516]	; 0x204
      lat = la;
   b544e:	edcd 8a82 	vstr	s17, [sp, #520]	; 0x208
      lon = lo;
   b5452:	ed8d 8a83 	vstr	s16, [sp, #524]	; 0x20c
      lat = la;
   b5456:	edcd ba84 	vstr	s23, [sp, #528]	; 0x210
      lon = lo;
   b545a:	ed8d ba85 	vstr	s22, [sp, #532]	; 0x214
      lat = la;
   b545e:	edcd aa86 	vstr	s21, [sp, #536]	; 0x218
      lon = lo;
   b5462:	ed8d aa87 	vstr	s20, [sp, #540]	; 0x21c
      lat = la;
   b5466:	edcd 9a88 	vstr	s19, [sp, #544]	; 0x220
   b546a:	e05f      	b.n	b552c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x398>
   b546c:	200354dc 	.word	0x200354dc
   b5470:	ffff0000 	.word	0xffff0000
   b5474:	42276980 	.word	0x42276980
   b5478:	c2af431e 	.word	0xc2af431e
   b547c:	42279dcc 	.word	0x42279dcc
   b5480:	c2af4202 	.word	0xc2af4202
   b5484:	42279d95 	.word	0x42279d95
   b5488:	c2af476d 	.word	0xc2af476d
   b548c:	4227a7a9 	.word	0x4227a7a9
   b5490:	c2af4e05 	.word	0xc2af4e05
   b5494:	4227b382 	.word	0x4227b382
   b5498:	c2af4e44 	.word	0xc2af4e44
   b549c:	000bd85f 	.word	0x000bd85f
   b54a0:	42278b1a 	.word	0x42278b1a
   b54a4:	c2af449a 	.word	0xc2af449a
   b54a8:	42278b2f 	.word	0x42278b2f
   b54ac:	c2af4095 	.word	0xc2af4095
   b54b0:	422781d8 	.word	0x422781d8
   b54b4:	c2af4044 	.word	0xc2af4044
   b54b8:	42278216 	.word	0x42278216
   b54bc:	c2af44c1 	.word	0xc2af44c1
   b54c0:	4227a49e 	.word	0x4227a49e
   b54c4:	c2af4bd0 	.word	0xc2af4bd0
   b54c8:	4227a437 	.word	0x4227a437
   b54cc:	c2af4659 	.word	0xc2af4659
   b54d0:	c2af4089 	.word	0xc2af4089
   b54d4:	000bd863 	.word	0x000bd863
   b54d8:	000bd86a 	.word	0x000bd86a
   b54dc:	2003e5c8 	.word	0x2003e5c8
   b54e0:	42277e9d 	.word	0x42277e9d
   b54e4:	c2af74b3 	.word	0xc2af74b3
   b54e8:	422780af 	.word	0x422780af
   b54ec:	c2af588e 	.word	0xc2af588e
   b54f0:	4227804d 	.word	0x4227804d
   b54f4:	c2af482e 	.word	0xc2af482e
   b54f8:	422780ad 	.word	0x422780ad
   b54fc:	c2af4157 	.word	0xc2af4157
   b5500:	42278aff 	.word	0x42278aff
   b5504:	c2af4253 	.word	0xc2af4253
   b5508:	42278af4 	.word	0x42278af4
   b550c:	c2af4798 	.word	0xc2af4798
   b5510:	4227a978 	.word	0x4227a978
   b5514:	c2af5f5d 	.word	0xc2af5f5d
   b5518:	000bd871 	.word	0x000bd871
   b551c:	000bd876 	.word	0x000bd876
   b5520:	000bd87d 	.word	0x000bd87d
   b5524:	20035534 	.word	0x20035534
   b5528:	000bda30 	.word	0x000bda30
      lon = lo;
   b552c:	ed8d 9a89 	vstr	s18, [sp, #548]	; 0x224
      lat = la;
   b5530:	edcd 8a8a 	vstr	s17, [sp, #552]	; 0x228
      lon = lo;
   b5534:	ed8d 8a8b 	vstr	s16, [sp, #556]	; 0x22c
   b5538:	f7ff f952 	bl	b47e0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b553c:	f10a 0328 	add.w	r3, sl, #40	; 0x28
   b5540:	461f      	mov	r7, r3
   b5542:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b5544:	46dc      	mov	ip, fp
   b5546:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b554a:	e9d7 0100 	ldrd	r0, r1, [r7]
   b554e:	9b04      	ldr	r3, [sp, #16]
   b5550:	f8cd b0d8 	str.w	fp, [sp, #216]	; 0xd8
   b5554:	e883 0003 	stmia.w	r3, {r0, r1}
   b5558:	2306      	movs	r3, #6
   b555a:	9337      	str	r3, [sp, #220]	; 0xdc
   b555c:	e896 0006 	ldmia.w	r6, {r1, r2}
   b5560:	a857      	add	r0, sp, #348	; 0x15c
   b5562:	9705      	str	r7, [sp, #20]
   b5564:	f7ff fca6 	bl	b4eb4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5568:	f107 0308 	add.w	r3, r7, #8
   b556c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b556e:	ae61      	add	r6, sp, #388	; 0x184
   b5570:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   b5574:	2204      	movs	r2, #4
   b5576:	ab34      	add	r3, sp, #208	; 0xd0
   b5578:	9634      	str	r6, [sp, #208]	; 0xd0
   b557a:	9235      	str	r2, [sp, #212]	; 0xd4
   b557c:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5580:	a854      	add	r0, sp, #336	; 0x150
   b5582:	f7ff fc97 	bl	b4eb4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5586:	4620      	mov	r0, r4
   b5588:	49b2      	ldr	r1, [pc, #712]	; (b5854 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c0>)
   b558a:	f7fe fdbd 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b558e:	a872      	add	r0, sp, #456	; 0x1c8
   b5590:	49b1      	ldr	r1, [pc, #708]	; (b5858 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c4>)
   b5592:	f7fe fdb9 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5596:	a878      	add	r0, sp, #480	; 0x1e0
   b5598:	49b0      	ldr	r1, [pc, #704]	; (b585c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c8>)
   b559a:	f7fe fdb5 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b559e:	a972      	add	r1, sp, #456	; 0x1c8
   b55a0:	9132      	str	r1, [sp, #200]	; 0xc8
   b55a2:	2102      	movs	r1, #2
   b55a4:	ae2c      	add	r6, sp, #176	; 0xb0
   b55a6:	9133      	str	r1, [sp, #204]	; 0xcc
   b55a8:	aa32      	add	r2, sp, #200	; 0xc8
   b55aa:	ca06      	ldmia	r2, {r1, r2}
   b55ac:	4633      	mov	r3, r6
   b55ae:	a851      	add	r0, sp, #324	; 0x144
   b55b0:	f7ff f94a 	bl	b4848 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b55b4:	f107 0218 	add.w	r2, r7, #24
   b55b8:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   b55ba:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b55be:	2104      	movs	r1, #4
   b55c0:	ab30      	add	r3, sp, #192	; 0xc0
   b55c2:	f8cd 90c0 	str.w	r9, [sp, #192]	; 0xc0
   b55c6:	9131      	str	r1, [sp, #196]	; 0xc4
   b55c8:	e893 0006 	ldmia.w	r3, {r1, r2}
   b55cc:	a84e      	add	r0, sp, #312	; 0x138
   b55ce:	f7ff fc71 	bl	b4eb4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway brownLine = Railway(
   b55d2:	a94e      	add	r1, sp, #312	; 0x138
   b55d4:	9102      	str	r1, [sp, #8]
   b55d6:	a951      	add	r1, sp, #324	; 0x144
   b55d8:	e9cd 4100 	strd	r4, r1, [sp]
   b55dc:	a954      	add	r1, sp, #336	; 0x150
   b55de:	460b      	mov	r3, r1
   b55e0:	a957      	add	r1, sp, #348	; 0x15c
   b55e2:	460a      	mov	r2, r1
   b55e4:	489e      	ldr	r0, [pc, #632]	; (b5860 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6cc>)
   b55e6:	a95a      	add	r1, sp, #360	; 0x168
   b55e8:	f7ff fce4 	bl	b4fb4 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b55ec:	a84e      	add	r0, sp, #312	; 0x138
   b55ee:	f7ff f8b7 	bl	b4760 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b55f2:	a851      	add	r0, sp, #324	; 0x144
   b55f4:	f7ff f8be 	bl	b4774 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b55f8:	a878      	add	r0, sp, #480	; 0x1e0
   b55fa:	f005 f847 	bl	ba68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b55fe:	a872      	add	r0, sp, #456	; 0x1c8
   b5600:	f005 f844 	bl	ba68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5604:	4620      	mov	r0, r4
   b5606:	f005 f841 	bl	ba68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b560a:	a854      	add	r0, sp, #336	; 0x150
   b560c:	f7ff f8a8 	bl	b4760 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5610:	a857      	add	r0, sp, #348	; 0x15c
   b5612:	f7ff f8a5 	bl	b4760 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5616:	a85a      	add	r0, sp, #360	; 0x168
   b5618:	f7ff f88e 	bl	b4738 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b561c:	4b91      	ldr	r3, [pc, #580]	; (b5864 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d0>)
   b561e:	9372      	str	r3, [sp, #456]	; 0x1c8
      lon = lo;
   b5620:	4b91      	ldr	r3, [pc, #580]	; (b5868 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d4>)
   b5622:	9373      	str	r3, [sp, #460]	; 0x1cc
      lat = la;
   b5624:	4b91      	ldr	r3, [pc, #580]	; (b586c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d8>)
   b5626:	9374      	str	r3, [sp, #464]	; 0x1d0
   b5628:	4b91      	ldr	r3, [pc, #580]	; (b5870 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6dc>)
   b562a:	9378      	str	r3, [sp, #480]	; 0x1e0
);
   b562c:	a972      	add	r1, sp, #456	; 0x1c8
      lon = lo;
   b562e:	4b91      	ldr	r3, [pc, #580]	; (b5874 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e0>)
   b5630:	912e      	str	r1, [sp, #184]	; 0xb8
   b5632:	9379      	str	r3, [sp, #484]	; 0x1e4
   b5634:	2105      	movs	r1, #5
      lat = la;
   b5636:	4b90      	ldr	r3, [pc, #576]	; (b5878 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e4>)
   b5638:	937a      	str	r3, [sp, #488]	; 0x1e8
   b563a:	af24      	add	r7, sp, #144	; 0x90
   b563c:	912f      	str	r1, [sp, #188]	; 0xbc
      lon = lo;
   b563e:	4b8f      	ldr	r3, [pc, #572]	; (b587c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e8>)
   b5640:	937b      	str	r3, [sp, #492]	; 0x1ec
   b5642:	e898 0006 	ldmia.w	r8, {r1, r2}
   b5646:	463b      	mov	r3, r7
   b5648:	a85a      	add	r0, sp, #360	; 0x168
   b564a:	ed8d ea75 	vstr	s28, [sp, #468]	; 0x1d4
      lat = la;
   b564e:	edcd 9a76 	vstr	s19, [sp, #472]	; 0x1d8
      lon = lo;
   b5652:	ed8d 9a77 	vstr	s18, [sp, #476]	; 0x1dc
   b5656:	f7ff f8c3 	bl	b47e0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b565a:	f10a 0360 	add.w	r3, sl, #96	; 0x60
   b565e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5660:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b5664:	2104      	movs	r1, #4
   b5666:	942c      	str	r4, [sp, #176]	; 0xb0
   b5668:	912d      	str	r1, [sp, #180]	; 0xb4
   b566a:	e896 0006 	ldmia.w	r6, {r1, r2}
   b566e:	a857      	add	r0, sp, #348	; 0x15c
   b5670:	f7ff fc20 	bl	b4eb4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5674:	f10a 0370 	add.w	r3, sl, #112	; 0x70
   b5678:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b567a:	ae61      	add	r6, sp, #388	; 0x184
   b567c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   b5680:	2104      	movs	r1, #4
   b5682:	ab2a      	add	r3, sp, #168	; 0xa8
   b5684:	962a      	str	r6, [sp, #168]	; 0xa8
   b5686:	912b      	str	r1, [sp, #172]	; 0xac
   b5688:	e893 0006 	ldmia.w	r3, {r1, r2}
   b568c:	a854      	add	r0, sp, #336	; 0x150
   b568e:	f7ff fc11 	bl	b4eb4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5692:	4658      	mov	r0, fp
   b5694:	497a      	ldr	r1, [pc, #488]	; (b5880 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6ec>)
   b5696:	f7fe fd37 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b569a:	a87e      	add	r0, sp, #504	; 0x1f8
   b569c:	4979      	ldr	r1, [pc, #484]	; (b5884 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f0>)
   b569e:	f7fe fd33 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b56a2:	a884      	add	r0, sp, #528	; 0x210
   b56a4:	4978      	ldr	r1, [pc, #480]	; (b5888 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f4>)
   b56a6:	f7fe fd2f 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b56aa:	a97e      	add	r1, sp, #504	; 0x1f8
   b56ac:	9128      	str	r1, [sp, #160]	; 0xa0
   b56ae:	2102      	movs	r1, #2
   b56b0:	ae22      	add	r6, sp, #136	; 0x88
   b56b2:	9129      	str	r1, [sp, #164]	; 0xa4
   b56b4:	aa28      	add	r2, sp, #160	; 0xa0
   b56b6:	4633      	mov	r3, r6
   b56b8:	ca06      	ldmia	r2, {r1, r2}
   b56ba:	a851      	add	r0, sp, #324	; 0x144
   b56bc:	f7ff f8c4 	bl	b4848 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b56c0:	f10a 0380 	add.w	r3, sl, #128	; 0x80
   b56c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b56c6:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b56ca:	2104      	movs	r1, #4
   b56cc:	ab26      	add	r3, sp, #152	; 0x98
   b56ce:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
   b56d2:	9127      	str	r1, [sp, #156]	; 0x9c
   b56d4:	e893 0006 	ldmia.w	r3, {r1, r2}
   b56d8:	a84e      	add	r0, sp, #312	; 0x138
   b56da:	f7ff fbeb 	bl	b4eb4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway greenLine = Railway(
   b56de:	a94e      	add	r1, sp, #312	; 0x138
   b56e0:	9102      	str	r1, [sp, #8]
   b56e2:	a951      	add	r1, sp, #324	; 0x144
   b56e4:	e9cd b100 	strd	fp, r1, [sp]
   b56e8:	a954      	add	r1, sp, #336	; 0x150
   b56ea:	460b      	mov	r3, r1
   b56ec:	a957      	add	r1, sp, #348	; 0x15c
   b56ee:	460a      	mov	r2, r1
   b56f0:	4866      	ldr	r0, [pc, #408]	; (b588c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f8>)
   b56f2:	a95a      	add	r1, sp, #360	; 0x168
   b56f4:	f7ff fc5e 	bl	b4fb4 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b56f8:	a84e      	add	r0, sp, #312	; 0x138
   b56fa:	f7ff f831 	bl	b4760 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b56fe:	a851      	add	r0, sp, #324	; 0x144
   b5700:	f7ff f838 	bl	b4774 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5704:	a884      	add	r0, sp, #528	; 0x210
   b5706:	f004 ffc1 	bl	ba68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b570a:	a87e      	add	r0, sp, #504	; 0x1f8
   b570c:	f004 ffbe 	bl	ba68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5710:	4658      	mov	r0, fp
   b5712:	f004 ffbb 	bl	ba68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5716:	a854      	add	r0, sp, #336	; 0x150
   b5718:	f7ff f822 	bl	b4760 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b571c:	a857      	add	r0, sp, #348	; 0x15c
   b571e:	f7ff f81f 	bl	b4760 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5722:	a85a      	add	r0, sp, #360	; 0x168
   b5724:	f7ff f808 	bl	b4738 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5728:	4b59      	ldr	r3, [pc, #356]	; (b5890 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6fc>)
   b572a:	937e      	str	r3, [sp, #504]	; 0x1f8
      lon = lo;
   b572c:	4b59      	ldr	r3, [pc, #356]	; (b5894 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x700>)
   b572e:	937f      	str	r3, [sp, #508]	; 0x1fc
      lat = la;
   b5730:	4b59      	ldr	r3, [pc, #356]	; (b5898 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x704>)
   b5732:	9380      	str	r3, [sp, #512]	; 0x200
      lon = lo;
   b5734:	4b59      	ldr	r3, [pc, #356]	; (b589c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x708>)
   b5736:	9381      	str	r3, [sp, #516]	; 0x204
      lat = la;
   b5738:	4b59      	ldr	r3, [pc, #356]	; (b58a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x70c>)
   b573a:	9382      	str	r3, [sp, #520]	; 0x208
      lon = lo;
   b573c:	4b59      	ldr	r3, [pc, #356]	; (b58a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x710>)
   b573e:	9383      	str	r3, [sp, #524]	; 0x20c
);
   b5740:	a97e      	add	r1, sp, #504	; 0x1f8
      lat = la;
   b5742:	4b59      	ldr	r3, [pc, #356]	; (b58a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x714>)
   b5744:	9124      	str	r1, [sp, #144]	; 0x90
   b5746:	9384      	str	r3, [sp, #528]	; 0x210
   b5748:	2108      	movs	r1, #8
   b574a:	4b58      	ldr	r3, [pc, #352]	; (b58ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x718>)
   b574c:	938a      	str	r3, [sp, #552]	; 0x228
   b574e:	f10d 0868 	add.w	r8, sp, #104	; 0x68
   b5752:	9125      	str	r1, [sp, #148]	; 0x94
      lon = lo;
   b5754:	4b56      	ldr	r3, [pc, #344]	; (b58b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x71c>)
   b5756:	938b      	str	r3, [sp, #556]	; 0x22c
   b5758:	e897 0006 	ldmia.w	r7, {r1, r2}
   b575c:	4643      	mov	r3, r8
   b575e:	a85a      	add	r0, sp, #360	; 0x168
   b5760:	f10a 0790 	add.w	r7, sl, #144	; 0x90
   b5764:	ed8d ea85 	vstr	s28, [sp, #532]	; 0x214
      lat = la;
   b5768:	edcd 9a86 	vstr	s19, [sp, #536]	; 0x218
      lon = lo;
   b576c:	ed8d 9a87 	vstr	s18, [sp, #540]	; 0x21c
      lat = la;
   b5770:	edcd 8a88 	vstr	s17, [sp, #544]	; 0x220
      lon = lo;
   b5774:	ed8d 8a89 	vstr	s16, [sp, #548]	; 0x224
      lat = la;
   b5778:	edcd aa8c 	vstr	s21, [sp, #560]	; 0x230
      lon = lo;
   b577c:	ed8d aa8d 	vstr	s20, [sp, #564]	; 0x234
   b5780:	f7ff f82e 	bl	b47e0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5784:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b5786:	46dc      	mov	ip, fp
   b5788:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b578c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   b5790:	9f04      	ldr	r7, [sp, #16]
   b5792:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
   b5796:	e887 0007 	stmia.w	r7, {r0, r1, r2}
   b579a:	2107      	movs	r1, #7
   b579c:	9123      	str	r1, [sp, #140]	; 0x8c
   b579e:	e896 0006 	ldmia.w	r6, {r1, r2}
   b57a2:	a857      	add	r0, sp, #348	; 0x15c
   b57a4:	f7ff fb86 	bl	b4eb4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b57a8:	f10a 03ac 	add.w	r3, sl, #172	; 0xac
   b57ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b57ae:	ae61      	add	r6, sp, #388	; 0x184
   b57b0:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   b57b4:	2104      	movs	r1, #4
   b57b6:	ab20      	add	r3, sp, #128	; 0x80
   b57b8:	9620      	str	r6, [sp, #128]	; 0x80
   b57ba:	9121      	str	r1, [sp, #132]	; 0x84
   b57bc:	e893 0006 	ldmia.w	r3, {r1, r2}
   b57c0:	a854      	add	r0, sp, #336	; 0x150
   b57c2:	f7ff fb77 	bl	b4eb4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b57c6:	4620      	mov	r0, r4
   b57c8:	493a      	ldr	r1, [pc, #232]	; (b58b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x720>)
   b57ca:	f7fe fc9d 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b57ce:	a872      	add	r0, sp, #456	; 0x1c8
   b57d0:	4939      	ldr	r1, [pc, #228]	; (b58b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x724>)
   b57d2:	f7fe fc99 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b57d6:	a878      	add	r0, sp, #480	; 0x1e0
   b57d8:	4938      	ldr	r1, [pc, #224]	; (b58bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x728>)
   b57da:	f7fe fc95 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b57de:	a972      	add	r1, sp, #456	; 0x1c8
   b57e0:	911e      	str	r1, [sp, #120]	; 0x78
   b57e2:	2102      	movs	r1, #2
   b57e4:	af18      	add	r7, sp, #96	; 0x60
   b57e6:	911f      	str	r1, [sp, #124]	; 0x7c
   b57e8:	aa1e      	add	r2, sp, #120	; 0x78
   b57ea:	463b      	mov	r3, r7
   b57ec:	ca06      	ldmia	r2, {r1, r2}
   b57ee:	a851      	add	r0, sp, #324	; 0x144
   b57f0:	f7ff f82a 	bl	b4848 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b57f4:	f10a 03bc 	add.w	r3, sl, #188	; 0xbc
   b57f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b57fa:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b57fe:	2104      	movs	r1, #4
   b5800:	ab1c      	add	r3, sp, #112	; 0x70
   b5802:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
   b5806:	911d      	str	r1, [sp, #116]	; 0x74
   b5808:	e893 0006 	ldmia.w	r3, {r1, r2}
   b580c:	a84e      	add	r0, sp, #312	; 0x138
   b580e:	f7ff fb51 	bl	b4eb4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway orangeLine = Railway(
   b5812:	a94e      	add	r1, sp, #312	; 0x138
   b5814:	9102      	str	r1, [sp, #8]
   b5816:	a951      	add	r1, sp, #324	; 0x144
   b5818:	e9cd 4100 	strd	r4, r1, [sp]
   b581c:	a954      	add	r1, sp, #336	; 0x150
   b581e:	460b      	mov	r3, r1
   b5820:	a957      	add	r1, sp, #348	; 0x15c
   b5822:	460a      	mov	r2, r1
   b5824:	4826      	ldr	r0, [pc, #152]	; (b58c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x72c>)
   b5826:	a95a      	add	r1, sp, #360	; 0x168
   b5828:	f7ff fbc4 	bl	b4fb4 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b582c:	a84e      	add	r0, sp, #312	; 0x138
   b582e:	f7fe ff97 	bl	b4760 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5832:	a851      	add	r0, sp, #324	; 0x144
   b5834:	f7fe ff9e 	bl	b4774 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5838:	a878      	add	r0, sp, #480	; 0x1e0
   b583a:	f004 ff27 	bl	ba68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b583e:	a872      	add	r0, sp, #456	; 0x1c8
   b5840:	f004 ff24 	bl	ba68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5844:	4620      	mov	r0, r4
   b5846:	f004 ff21 	bl	ba68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b584a:	a854      	add	r0, sp, #336	; 0x150
   b584c:	f7fe ff88 	bl	b4760 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5850:	a857      	add	r0, sp, #348	; 0x15c
   b5852:	e037      	b.n	b58c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x730>
   b5854:	000bd884 	.word	0x000bd884
   b5858:	000bd88a 	.word	0x000bd88a
   b585c:	000bd891 	.word	0x000bd891
   b5860:	200355a0 	.word	0x200355a0
   b5864:	42276997 	.word	0x42276997
   b5868:	c2af40b8 	.word	0xc2af40b8
   b586c:	422781fe 	.word	0x422781fe
   b5870:	42278afb 	.word	0x42278afb
   b5874:	c2af4494 	.word	0xc2af4494
   b5878:	42278971 	.word	0x42278971
   b587c:	c2af6479 	.word	0xc2af6479
   b5880:	000bd9fc 	.word	0x000bd9fc
   b5884:	000bd898 	.word	0x000bd898
   b5888:	000bd89f 	.word	0x000bd89f
   b588c:	20035628 	.word	0x20035628
   b5890:	4227631a 	.word	0x4227631a
   b5894:	c2af4bd2 	.word	0xc2af4bd2
   b5898:	42276ec4 	.word	0x42276ec4
   b589c:	c2af4115 	.word	0xc2af4115
   b58a0:	422780b5 	.word	0x422780b5
   b58a4:	c2af4086 	.word	0xc2af4086
   b58a8:	42278200 	.word	0x42278200
   b58ac:	422781e1 	.word	0x422781e1
   b58b0:	c2af4476 	.word	0xc2af4476
   b58b4:	000bd8a6 	.word	0x000bd8a6
   b58b8:	000bd8ad 	.word	0x000bd8ad
   b58bc:	000bd8b4 	.word	0x000bd8b4
   b58c0:	20037eb8 	.word	0x20037eb8
   b58c4:	f7fe ff4c 	bl	b4760 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b58c8:	a85a      	add	r0, sp, #360	; 0x168
   b58ca:	f7fe ff35 	bl	b4738 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b58ce:	a97e      	add	r1, sp, #504	; 0x1f8
   b58d0:	911a      	str	r1, [sp, #104]	; 0x68
   b58d2:	2107      	movs	r1, #7
   b58d4:	ae10      	add	r6, sp, #64	; 0x40
   b58d6:	911b      	str	r1, [sp, #108]	; 0x6c
   b58d8:	e898 0006 	ldmia.w	r8, {r1, r2}
   b58dc:	4633      	mov	r3, r6
   b58de:	a85a      	add	r0, sp, #360	; 0x168
      lat = la;
   b58e0:	edcd da7e 	vstr	s27, [sp, #504]	; 0x1f8
      lon = lo;
   b58e4:	ed8d da7f 	vstr	s26, [sp, #508]	; 0x1fc
      lat = la;
   b58e8:	edcd ca80 	vstr	s25, [sp, #512]	; 0x200
      lon = lo;
   b58ec:	ed8d ca81 	vstr	s24, [sp, #516]	; 0x204
      lat = la;
   b58f0:	edcd 8a82 	vstr	s17, [sp, #520]	; 0x208
      lon = lo;
   b58f4:	ed8d 8a83 	vstr	s16, [sp, #524]	; 0x20c
      lat = la;
   b58f8:	edcd ba84 	vstr	s23, [sp, #528]	; 0x210
      lon = lo;
   b58fc:	ed8d ba85 	vstr	s22, [sp, #532]	; 0x214
      lat = la;
   b5900:	edcd aa86 	vstr	s21, [sp, #536]	; 0x218
      lon = lo;
   b5904:	ed8d aa87 	vstr	s20, [sp, #540]	; 0x21c
      lat = la;
   b5908:	edcd 9a88 	vstr	s19, [sp, #544]	; 0x220
      lon = lo;
   b590c:	ed8d 9a89 	vstr	s18, [sp, #548]	; 0x224
      lat = la;
   b5910:	edcd 8a8a 	vstr	s17, [sp, #552]	; 0x228
      lon = lo;
   b5914:	ed8d 8a8b 	vstr	s16, [sp, #556]	; 0x22c
   b5918:	f7fe ff62 	bl	b47e0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b591c:	f10a 0e28 	add.w	lr, sl, #40	; 0x28
   b5920:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5924:	46dc      	mov	ip, fp
   b5926:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b592a:	9905      	ldr	r1, [sp, #20]
   b592c:	9a04      	ldr	r2, [sp, #16]
   b592e:	f8cd b060 	str.w	fp, [sp, #96]	; 0x60
   b5932:	c903      	ldmia	r1, {r0, r1}
   b5934:	e9c2 0100 	strd	r0, r1, [r2]
   b5938:	2106      	movs	r1, #6
   b593a:	9119      	str	r1, [sp, #100]	; 0x64
   b593c:	e897 0006 	ldmia.w	r7, {r1, r2}
   b5940:	a857      	add	r0, sp, #348	; 0x15c
   b5942:	f7ff fab7 	bl	b4eb4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5946:	f10a 0340 	add.w	r3, sl, #64	; 0x40
   b594a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b594c:	af61      	add	r7, sp, #388	; 0x184
   b594e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5952:	2104      	movs	r1, #4
   b5954:	ab16      	add	r3, sp, #88	; 0x58
   b5956:	9716      	str	r7, [sp, #88]	; 0x58
   b5958:	9117      	str	r1, [sp, #92]	; 0x5c
   b595a:	e893 0006 	ldmia.w	r3, {r1, r2}
   b595e:	a854      	add	r0, sp, #336	; 0x150
   b5960:	f7ff faa8 	bl	b4eb4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5964:	4620      	mov	r0, r4
   b5966:	49b8      	ldr	r1, [pc, #736]	; (b5c48 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xab4>)
   b5968:	f8df 8330 	ldr.w	r8, [pc, #816]	; b5c9c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb08>
   b596c:	f7fe fbcc 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5970:	a872      	add	r0, sp, #456	; 0x1c8
   b5972:	49b6      	ldr	r1, [pc, #728]	; (b5c4c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xab8>)
   b5974:	f7fe fbc8 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5978:	a878      	add	r0, sp, #480	; 0x1e0
   b597a:	49b5      	ldr	r1, [pc, #724]	; (b5c50 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xabc>)
   b597c:	f7fe fbc4 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5980:	ab72      	add	r3, sp, #456	; 0x1c8
   b5982:	9314      	str	r3, [sp, #80]	; 0x50
   b5984:	2302      	movs	r3, #2
   b5986:	9315      	str	r3, [sp, #84]	; 0x54
   b5988:	af0e      	add	r7, sp, #56	; 0x38
   b598a:	aa14      	add	r2, sp, #80	; 0x50
   b598c:	ca06      	ldmia	r2, {r1, r2}
   b598e:	463b      	mov	r3, r7
   b5990:	a851      	add	r0, sp, #324	; 0x144
   b5992:	f7fe ff59 	bl	b4848 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5996:	f10a 0250 	add.w	r2, sl, #80	; 0x50
   b599a:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   b599c:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b59a0:	2204      	movs	r2, #4
   b59a2:	ab12      	add	r3, sp, #72	; 0x48
   b59a4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   b59a8:	9213      	str	r2, [sp, #76]	; 0x4c
   b59aa:	e893 0006 	ldmia.w	r3, {r1, r2}
   b59ae:	a84e      	add	r0, sp, #312	; 0x138
   b59b0:	f7ff fa80 	bl	b4eb4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway purpleLine = Railway(
   b59b4:	ab4e      	add	r3, sp, #312	; 0x138
   b59b6:	9302      	str	r3, [sp, #8]
   b59b8:	ab51      	add	r3, sp, #324	; 0x144
   b59ba:	aa57      	add	r2, sp, #348	; 0x15c
   b59bc:	a95a      	add	r1, sp, #360	; 0x168
   b59be:	e9cd 4300 	strd	r4, r3, [sp]
   b59c2:	48a4      	ldr	r0, [pc, #656]	; (b5c54 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xac0>)
   b59c4:	ab54      	add	r3, sp, #336	; 0x150
   b59c6:	f7ff faf5 	bl	b4fb4 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b59ca:	a84e      	add	r0, sp, #312	; 0x138
   b59cc:	f7fe fec8 	bl	b4760 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b59d0:	a851      	add	r0, sp, #324	; 0x144
   b59d2:	f7fe fecf 	bl	b4774 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b59d6:	a878      	add	r0, sp, #480	; 0x1e0
   b59d8:	f004 fe58 	bl	ba68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b59dc:	a872      	add	r0, sp, #456	; 0x1c8
   b59de:	f004 fe55 	bl	ba68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b59e2:	4620      	mov	r0, r4
   b59e4:	f004 fe52 	bl	ba68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b59e8:	a854      	add	r0, sp, #336	; 0x150
   b59ea:	f7fe feb9 	bl	b4760 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b59ee:	a857      	add	r0, sp, #348	; 0x15c
   b59f0:	f7fe feb6 	bl	b4760 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b59f4:	a85a      	add	r0, sp, #360	; 0x168
   b59f6:	f7fe fe9f 	bl	b4738 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b59fa:	4b97      	ldr	r3, [pc, #604]	; (b5c58 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xac4>)
   b59fc:	937e      	str	r3, [sp, #504]	; 0x1f8
      lon = lo;
   b59fe:	4b97      	ldr	r3, [pc, #604]	; (b5c5c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xac8>)
   b5a00:	937f      	str	r3, [sp, #508]	; 0x1fc
      lat = la;
   b5a02:	4b97      	ldr	r3, [pc, #604]	; (b5c60 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xacc>)
   b5a04:	9380      	str	r3, [sp, #512]	; 0x200
      lon = lo;
   b5a06:	4b97      	ldr	r3, [pc, #604]	; (b5c64 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xad0>)
   b5a08:	9381      	str	r3, [sp, #516]	; 0x204
      lat = la;
   b5a0a:	4b97      	ldr	r3, [pc, #604]	; (b5c68 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xad4>)
   b5a0c:	9382      	str	r3, [sp, #520]	; 0x208
      lon = lo;
   b5a0e:	4b97      	ldr	r3, [pc, #604]	; (b5c6c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xad8>)
   b5a10:	9383      	str	r3, [sp, #524]	; 0x20c
);
   b5a12:	ab7e      	add	r3, sp, #504	; 0x1f8
   b5a14:	9310      	str	r3, [sp, #64]	; 0x40
   b5a16:	2308      	movs	r3, #8
   b5a18:	9311      	str	r3, [sp, #68]	; 0x44
   b5a1a:	e896 0006 	ldmia.w	r6, {r1, r2}
   b5a1e:	ab07      	add	r3, sp, #28
   b5a20:	a85a      	add	r0, sp, #360	; 0x168
   b5a22:	f10a 06cc 	add.w	r6, sl, #204	; 0xcc
      lat = la;
   b5a26:	edcd 8a84 	vstr	s17, [sp, #528]	; 0x210
      lon = lo;
   b5a2a:	ed8d 8a85 	vstr	s16, [sp, #532]	; 0x214
      lat = la;
   b5a2e:	edcd 9a86 	vstr	s19, [sp, #536]	; 0x218
      lon = lo;
   b5a32:	ed8d 9a87 	vstr	s18, [sp, #540]	; 0x21c
      lat = la;
   b5a36:	edcd aa88 	vstr	s21, [sp, #544]	; 0x220
      lon = lo;
   b5a3a:	ed8d aa89 	vstr	s20, [sp, #548]	; 0x224
      lat = la;
   b5a3e:	edcd ba8a 	vstr	s23, [sp, #552]	; 0x228
      lon = lo;
   b5a42:	ed8d ba8b 	vstr	s22, [sp, #556]	; 0x22c
      lat = la;
   b5a46:	edcd 8a8c 	vstr	s17, [sp, #560]	; 0x230
      lon = lo;
   b5a4a:	ed8d 8a8d 	vstr	s16, [sp, #564]	; 0x234
   b5a4e:	f7fe fec7 	bl	b47e0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5a52:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b5a54:	46dc      	mov	ip, fp
   b5a56:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5a5a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   b5a5e:	9b04      	ldr	r3, [sp, #16]
   b5a60:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
   b5a64:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b5a68:	2307      	movs	r3, #7
   b5a6a:	930f      	str	r3, [sp, #60]	; 0x3c
   b5a6c:	e897 0006 	ldmia.w	r7, {r1, r2}
   b5a70:	a857      	add	r0, sp, #348	; 0x15c
   b5a72:	f7ff fa1f 	bl	b4eb4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5a76:	f10a 03e8 	add.w	r3, sl, #232	; 0xe8
   b5a7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5a7c:	ae61      	add	r6, sp, #388	; 0x184
   b5a7e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   b5a82:	2204      	movs	r2, #4
   b5a84:	ab0c      	add	r3, sp, #48	; 0x30
   b5a86:	960c      	str	r6, [sp, #48]	; 0x30
   b5a88:	920d      	str	r2, [sp, #52]	; 0x34
   b5a8a:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5a8e:	a854      	add	r0, sp, #336	; 0x150
   b5a90:	f7ff fa10 	bl	b4eb4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5a94:	4620      	mov	r0, r4
   b5a96:	4976      	ldr	r1, [pc, #472]	; (b5c70 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xadc>)
   b5a98:	4e76      	ldr	r6, [pc, #472]	; (b5c74 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xae0>)
   b5a9a:	f7fe fb35 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5a9e:	a872      	add	r0, sp, #456	; 0x1c8
   b5aa0:	4975      	ldr	r1, [pc, #468]	; (b5c78 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xae4>)
   b5aa2:	f7fe fb31 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5aa6:	a878      	add	r0, sp, #480	; 0x1e0
   b5aa8:	4974      	ldr	r1, [pc, #464]	; (b5c7c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xae8>)
   b5aaa:	f7fe fb2d 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5aae:	ab72      	add	r3, sp, #456	; 0x1c8
   b5ab0:	930a      	str	r3, [sp, #40]	; 0x28
   b5ab2:	2302      	movs	r3, #2
   b5ab4:	930b      	str	r3, [sp, #44]	; 0x2c
   b5ab6:	aa0a      	add	r2, sp, #40	; 0x28
   b5ab8:	ab06      	add	r3, sp, #24
   b5aba:	ca06      	ldmia	r2, {r1, r2}
   b5abc:	a851      	add	r0, sp, #324	; 0x144
   b5abe:	f10a 0af8 	add.w	sl, sl, #248	; 0xf8
   b5ac2:	f7fe fec1 	bl	b4848 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5ac6:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
   b5aca:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b5ace:	2204      	movs	r2, #4
   b5ad0:	ab08      	add	r3, sp, #32
   b5ad2:	f8cd 9020 	str.w	r9, [sp, #32]
   b5ad6:	9209      	str	r2, [sp, #36]	; 0x24
   b5ad8:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5adc:	a84e      	add	r0, sp, #312	; 0x138
   b5ade:	f7ff f9e9 	bl	b4eb4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway pinkLine = Railway(
   b5ae2:	ab4e      	add	r3, sp, #312	; 0x138
   b5ae4:	9302      	str	r3, [sp, #8]
   b5ae6:	ab51      	add	r3, sp, #324	; 0x144
   b5ae8:	aa57      	add	r2, sp, #348	; 0x15c
   b5aea:	a95a      	add	r1, sp, #360	; 0x168
   b5aec:	e9cd 4300 	strd	r4, r3, [sp]
   b5af0:	4863      	ldr	r0, [pc, #396]	; (b5c80 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaec>)
   b5af2:	ab54      	add	r3, sp, #336	; 0x150
   b5af4:	f7ff fa5e 	bl	b4fb4 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5af8:	a84e      	add	r0, sp, #312	; 0x138
   b5afa:	f7fe fe31 	bl	b4760 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5afe:	a851      	add	r0, sp, #324	; 0x144
   b5b00:	f7fe fe38 	bl	b4774 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5b04:	a878      	add	r0, sp, #480	; 0x1e0
   b5b06:	f004 fdc1 	bl	ba68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5b0a:	a872      	add	r0, sp, #456	; 0x1c8
   b5b0c:	f004 fdbe 	bl	ba68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5b10:	4620      	mov	r0, r4
   b5b12:	f004 fdbb 	bl	ba68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5b16:	a854      	add	r0, sp, #336	; 0x150
   b5b18:	f7fe fe22 	bl	b4760 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5b1c:	a857      	add	r0, sp, #348	; 0x15c
   b5b1e:	f7fe fe1f 	bl	b4760 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5b22:	a85a      	add	r0, sp, #360	; 0x168
   b5b24:	f7fe fe08 	bl	b4738 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5b28:	4b56      	ldr	r3, [pc, #344]	; (b5c84 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaf0>)
std::vector<int> addressArr = std::vector<int>(slaveCountExpected, 0);
   b5b2a:	4957      	ldr	r1, [pc, #348]	; (b5c88 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaf4>)
   b5b2c:	609d      	str	r5, [r3, #8]
   b5b2e:	e9c3 5500 	strd	r5, r5, [r3]
   b5b32:	4b56      	ldr	r3, [pc, #344]	; (b5c8c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaf8>)
   b5b34:	6809      	ldr	r1, [r1, #0]
   b5b36:	609d      	str	r5, [r3, #8]
   b5b38:	aa7e      	add	r2, sp, #504	; 0x1f8
   b5b3a:	e9c3 5500 	strd	r5, r5, [r3]
   b5b3e:	4854      	ldr	r0, [pc, #336]	; (b5c90 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xafc>)
   b5b40:	957e      	str	r5, [sp, #504]	; 0x1f8
   b5b42:	ab72      	add	r3, sp, #456	; 0x1c8
   b5b44:	f7fe fe2a 	bl	b479c <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b5b48:	4b52      	ldr	r3, [pc, #328]	; (b5c94 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb00>)
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b5b4a:	4953      	ldr	r1, [pc, #332]	; (b5c98 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb04>)
   b5b4c:	609d      	str	r5, [r3, #8]
   b5b4e:	e9c3 5500 	strd	r5, r5, [r3]
   b5b52:	4852      	ldr	r0, [pc, #328]	; (b5c9c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb08>)
   b5b54:	f002 fcc8 	bl	b84e8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b5b58:	4951      	ldr	r1, [pc, #324]	; (b5ca0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb0c>)
   b5b5a:	4852      	ldr	r0, [pc, #328]	; (b5ca4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb10>)
   b5b5c:	f002 fcc4 	bl	b84e8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b5b60:	4951      	ldr	r1, [pc, #324]	; (b5ca8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb14>)
   b5b62:	4844      	ldr	r0, [pc, #272]	; (b5c74 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xae0>)
   b5b64:	f002 fcc0 	bl	b84e8 <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b5b68:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b5b6a:	46a2      	mov	sl, r4
   b5b6c:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
   b5b70:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   b5b74:	46c1      	mov	r9, r8
   b5b76:	f8d6 c000 	ldr.w	ip, [r6]
   b5b7a:	f8ca c000 	str.w	ip, [sl]
   b5b7e:	465e      	mov	r6, fp
   b5b80:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5b82:	f859 3910 	ldr.w	r3, [r9], #-16
   b5b86:	9305      	str	r3, [sp, #20]
   b5b88:	9b04      	ldr	r3, [sp, #16]
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b5b8a:	f8df e140 	ldr.w	lr, [pc, #320]	; b5ccc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb38>
   b5b8e:	461a      	mov	r2, r3
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b5b90:	4626      	mov	r6, r4
   b5b92:	9b05      	ldr	r3, [sp, #20]
   b5b94:	6013      	str	r3, [r2, #0]
   b5b96:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b5b98:	af72      	add	r7, sp, #456	; 0x1c8
      constexpr __shared_count() noexcept : _M_pi(0)
   b5b9a:	e9ce 5500 	strd	r5, r5, [lr]
   b5b9e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b5ba0:	f8c7 c000 	str.w	ip, [r7]
        BleUuid sUuid(svcUuid);
   b5ba4:	46dc      	mov	ip, fp
   b5ba6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5baa:	ae7e      	add	r6, sp, #504	; 0x1f8
   b5bac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5bae:	9b05      	ldr	r3, [sp, #20]
   b5bb0:	6033      	str	r3, [r6, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5bb2:	ab7e      	add	r3, sp, #504	; 0x1f8
   b5bb4:	9300      	str	r3, [sp, #0]
   b5bb6:	4670      	mov	r0, lr
   b5bb8:	ab72      	add	r3, sp, #456	; 0x1c8
   b5bba:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b5bbe:	493b      	ldr	r1, [pc, #236]	; (b5cac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb18>)
   b5bc0:	f04f 0210 	mov.w	r2, #16
   b5bc4:	f003 f988 	bl	b8ed8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b5bc8:	f8df c0d8 	ldr.w	ip, [pc, #216]	; b5ca4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb10>
   b5bcc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5bd0:	46a6      	mov	lr, r4
   b5bd2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b5bd6:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   b5bda:	f8dc e000 	ldr.w	lr, [ip]
   b5bde:	f8ca e000 	str.w	lr, [sl]
   b5be2:	46dc      	mov	ip, fp
   b5be4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5be8:	9b04      	ldr	r3, [sp, #16]
   b5bea:	f8d8 9000 	ldr.w	r9, [r8]
   b5bee:	f8c3 9000 	str.w	r9, [r3]
        BleUuid cUuid(charUuid);
   b5bf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
      : _M_ptr(0), _M_refcount()
   b5bf4:	f8df 80d8 	ldr.w	r8, [pc, #216]	; b5cd0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb3c>
   b5bf8:	f50d 7ce4 	add.w	ip, sp, #456	; 0x1c8
        BleUuid sUuid(svcUuid);
   b5bfc:	465c      	mov	r4, fp
        BleUuid cUuid(charUuid);
   b5bfe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
      constexpr __shared_count() noexcept : _M_pi(0)
   b5c02:	e9c8 5500 	strd	r5, r5, [r8]
   b5c06:	f8c7 e000 	str.w	lr, [r7]
        BleUuid sUuid(svcUuid);
   b5c0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5c0c:	af7e      	add	r7, sp, #504	; 0x1f8
   b5c0e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5c10:	4b27      	ldr	r3, [pc, #156]	; (b5cb0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb1c>)
        BleUuid sUuid(svcUuid);
   b5c12:	f8c6 9000 	str.w	r9, [r6]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5c16:	9301      	str	r3, [sp, #4]
   b5c18:	ab7e      	add	r3, sp, #504	; 0x1f8
   b5c1a:	f04f 0204 	mov.w	r2, #4
   b5c1e:	9300      	str	r3, [sp, #0]
   b5c20:	4640      	mov	r0, r8
   b5c22:	ab72      	add	r3, sp, #456	; 0x1c8
   b5c24:	4923      	ldr	r1, [pc, #140]	; (b5cb4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb20>)
   b5c26:	9502      	str	r5, [sp, #8]
   b5c28:	f003 f956 	bl	b8ed8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
   b5c2c:	4922      	ldr	r1, [pc, #136]	; (b5cb8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb24>)
   b5c2e:	4823      	ldr	r0, [pc, #140]	; (b5cbc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb28>)
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b5c30:	4c23      	ldr	r4, [pc, #140]	; (b5cc0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb2c>)
   b5c32:	f003 fe74 	bl	b991e <_ZN6StringC1EPK19__FlashStringHelper>
   b5c36:	4823      	ldr	r0, [pc, #140]	; (b5cc4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb30>)
   b5c38:	f003 fc7e 	bl	b9538 <_ZN9IPAddressC1Ev>
   b5c3c:	491e      	ldr	r1, [pc, #120]	; (b5cb8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb24>)
   b5c3e:	4822      	ldr	r0, [pc, #136]	; (b5cc8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb34>)
   b5c40:	f003 fe6d 	bl	b991e <_ZN6StringC1EPK19__FlashStringHelper>
   b5c44:	e046      	b.n	b5cd4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb40>
   b5c46:	bf00      	nop
   b5c48:	000bd8bb 	.word	0x000bd8bb
   b5c4c:	000bd8c2 	.word	0x000bd8c2
   b5c50:	000bd8c9 	.word	0x000bd8c9
   b5c54:	2003e55c 	.word	0x2003e55c
   b5c58:	42276a76 	.word	0x42276a76
   b5c5c:	c2af692b 	.word	0xc2af692b
   b5c60:	42276b5f 	.word	0x42276b5f
   b5c64:	c2af56cd 	.word	0xc2af56cd
   b5c68:	42278a2d 	.word	0x42278a2d
   b5c6c:	c2af56d8 	.word	0xc2af56d8
   b5c70:	000bd8d0 	.word	0x000bd8d0
   b5c74:	20035510 	.word	0x20035510
   b5c78:	000bd8d5 	.word	0x000bd8d5
   b5c7c:	000bd8dc 	.word	0x000bd8dc
   b5c80:	2003e4f0 	.word	0x2003e4f0
   b5c84:	20035610 	.word	0x20035610
   b5c88:	200352e8 	.word	0x200352e8
   b5c8c:	2003561c 	.word	0x2003561c
   b5c90:	20035524 	.word	0x20035524
   b5c94:	2003e69c 	.word	0x2003e69c
   b5c98:	000bd8e3 	.word	0x000bd8e3
   b5c9c:	200354e8 	.word	0x200354e8
   b5ca0:	000bd908 	.word	0x000bd908
   b5ca4:	200354fc 	.word	0x200354fc
   b5ca8:	000bd92d 	.word	0x000bd92d
   b5cac:	000bd952 	.word	0x000bd952
   b5cb0:	000b491d 	.word	0x000b491d
   b5cb4:	000bd955 	.word	0x000bd955
   b5cb8:	000bdb72 	.word	0x000bdb72
   b5cbc:	2003e634 	.word	0x2003e634
   b5cc0:	20037f24 	.word	0x20037f24
   b5cc4:	2003e644 	.word	0x2003e644
   b5cc8:	2003e65c 	.word	0x2003e65c
   b5ccc:	2003e6ac 	.word	0x2003e6ac
   b5cd0:	2003e694 	.word	0x2003e694
   b5cd4:	4947      	ldr	r1, [pc, #284]	; (b5df4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc60>)
   b5cd6:	4848      	ldr	r0, [pc, #288]	; (b5df8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc64>)
   b5cd8:	f003 fe21 	bl	b991e <_ZN6StringC1EPK19__FlashStringHelper>
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   b5cdc:	4945      	ldr	r1, [pc, #276]	; (b5df4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc60>)
   b5cde:	4847      	ldr	r0, [pc, #284]	; (b5dfc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc68>)
   b5ce0:	f003 fe1d 	bl	b991e <_ZN6StringC1EPK19__FlashStringHelper>
HttpClient http;
   b5ce4:	4846      	ldr	r0, [pc, #280]	; (b5e00 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc6c>)
   b5ce6:	f001 f94b 	bl	b6f80 <_ZN10HttpClientC1Ev>
   b5cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5cee:	9300      	str	r3, [sp, #0]
   b5cf0:	f242 7210 	movw	r2, #10000	; 0x2710
   b5cf4:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b5cf8:	4b42      	ldr	r3, [pc, #264]	; (b5e04 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc70>)
   b5cfa:	4620      	mov	r0, r4
   b5cfc:	f001 fb18 	bl	b7330 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b5d00:	4b41      	ldr	r3, [pc, #260]	; (b5e08 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc74>)
String SSID = "";
   b5d02:	493c      	ldr	r1, [pc, #240]	; (b5df4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc60>)
   b5d04:	6023      	str	r3, [r4, #0]
   b5d06:	4841      	ldr	r0, [pc, #260]	; (b5e0c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc78>)
   b5d08:	f003 fe09 	bl	b991e <_ZN6StringC1EPK19__FlashStringHelper>
String password = "";
   b5d0c:	4939      	ldr	r1, [pc, #228]	; (b5df4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc60>)
   b5d0e:	4840      	ldr	r0, [pc, #256]	; (b5e10 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc7c>)
   b5d10:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   b5d14:	ecbd 8b0e 	vpop	{d8-d14}
   b5d18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
String password = "";
   b5d1c:	f003 bdff 	b.w	b991e <_ZN6StringC1EPK19__FlashStringHelper>
   b5d20:	483b      	ldr	r0, [pc, #236]	; (b5e10 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc7c>)
   b5d22:	f003 fdb1 	bl	b9888 <_ZN6StringD1Ev>
String SSID = "";
   b5d26:	4839      	ldr	r0, [pc, #228]	; (b5e0c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc78>)
   b5d28:	f003 fdae 	bl	b9888 <_ZN6StringD1Ev>
JsonParserStatic<10000, 1000> parser;
   b5d2c:	4839      	ldr	r0, [pc, #228]	; (b5e14 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc80>)
   b5d2e:	f7fe f9c3 	bl	b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b5d32:	4b33      	ldr	r3, [pc, #204]	; (b5e00 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc6c>)
   b5d34:	4a38      	ldr	r2, [pc, #224]	; (b5e18 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc84>)
	if (_M_pi != nullptr)
   b5d36:	699c      	ldr	r4, [r3, #24]
   b5d38:	601a      	str	r2, [r3, #0]
   b5d3a:	b17c      	cbz	r4, b5d5c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbc8>
      if (--_M_use_count == 0)
   b5d3c:	6863      	ldr	r3, [r4, #4]
   b5d3e:	3b01      	subs	r3, #1
   b5d40:	6063      	str	r3, [r4, #4]
   b5d42:	b95b      	cbnz	r3, b5d5c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbc8>
          _M_dispose();
   b5d44:	6823      	ldr	r3, [r4, #0]
   b5d46:	4620      	mov	r0, r4
   b5d48:	689b      	ldr	r3, [r3, #8]
   b5d4a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5d4c:	68a3      	ldr	r3, [r4, #8]
   b5d4e:	3b01      	subs	r3, #1
   b5d50:	60a3      	str	r3, [r4, #8]
   b5d52:	b91b      	cbnz	r3, b5d5c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbc8>
            _M_destroy();
   b5d54:	6823      	ldr	r3, [r4, #0]
   b5d56:	4620      	mov	r0, r4
   b5d58:	68db      	ldr	r3, [r3, #12]
   b5d5a:	4798      	blx	r3
   b5d5c:	4827      	ldr	r0, [pc, #156]	; (b5dfc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc68>)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b5d5e:	4c2f      	ldr	r4, [pc, #188]	; (b5e1c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc88>)
   b5d60:	f003 fd92 	bl	b9888 <_ZN6StringD1Ev>
} http_request_t;
   b5d64:	4824      	ldr	r0, [pc, #144]	; (b5df8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc64>)
   b5d66:	f003 fd8f 	bl	b9888 <_ZN6StringD1Ev>
   b5d6a:	482d      	ldr	r0, [pc, #180]	; (b5e20 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc8c>)
   b5d6c:	f003 fd8c 	bl	b9888 <_ZN6StringD1Ev>
   b5d70:	482c      	ldr	r0, [pc, #176]	; (b5e24 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc90>)
   b5d72:	f003 fd89 	bl	b9888 <_ZN6StringD1Ev>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   b5d76:	482c      	ldr	r0, [pc, #176]	; (b5e28 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc94>)
   b5d78:	f002 fd95 	bl	b88a6 <_ZN8particle17BleCharacteristicD1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   b5d7c:	482b      	ldr	r0, [pc, #172]	; (b5e2c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc98>)
   b5d7e:	f002 fd92 	bl	b88a6 <_ZN8particle17BleCharacteristicD1Ev>
      }
   b5d82:	482b      	ldr	r0, [pc, #172]	; (b5e30 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc9c>)
   b5d84:	f7fe fcec 	bl	b4760 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5d88:	482a      	ldr	r0, [pc, #168]	; (b5e34 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xca0>)
   b5d8a:	f7fe fce9 	bl	b4760 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
std::vector<Railway> ctaRailways;
   b5d8e:	482a      	ldr	r0, [pc, #168]	; (b5e38 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xca4>)
   b5d90:	f7ff f84b 	bl	b4e2a <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
	__destroy(__first, __last);
   b5d94:	e9d4 0100 	ldrd	r0, r1, [r4]
   b5d98:	f7ff f855 	bl	b4e46 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
   b5d9c:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b5d9e:	b118      	cbz	r0, b5da8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b5da0:	68a1      	ldr	r1, [r4, #8]
   b5da2:	1a09      	subs	r1, r1, r0
   b5da4:	f7fe f97d 	bl	b40a2 <_ZdlPvj>
Railway pinkLine = Railway(
   b5da8:	4824      	ldr	r0, [pc, #144]	; (b5e3c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xca8>)
   b5daa:	f7ff f813 	bl	b4dd4 <_ZN7RailwayD1Ev>
Railway purpleLine = Railway(
   b5dae:	4824      	ldr	r0, [pc, #144]	; (b5e40 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcac>)
   b5db0:	f7ff f810 	bl	b4dd4 <_ZN7RailwayD1Ev>
Railway orangeLine = Railway(
   b5db4:	4823      	ldr	r0, [pc, #140]	; (b5e44 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcb0>)
   b5db6:	f7ff f80d 	bl	b4dd4 <_ZN7RailwayD1Ev>
Railway greenLine = Railway(
   b5dba:	4823      	ldr	r0, [pc, #140]	; (b5e48 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcb4>)
   b5dbc:	f7ff f80a 	bl	b4dd4 <_ZN7RailwayD1Ev>
Railway brownLine = Railway(
   b5dc0:	4822      	ldr	r0, [pc, #136]	; (b5e4c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcb8>)
   b5dc2:	f7ff f807 	bl	b4dd4 <_ZN7RailwayD1Ev>
Railway blueLine = Railway(
   b5dc6:	4822      	ldr	r0, [pc, #136]	; (b5e50 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcbc>)
   b5dc8:	f7ff f804 	bl	b4dd4 <_ZN7RailwayD1Ev>
Railway redLine = Railway(
   b5dcc:	4821      	ldr	r0, [pc, #132]	; (b5e54 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcc0>)
   b5dce:	f7ff f801 	bl	b4dd4 <_ZN7RailwayD1Ev>
        if (wakeupSource_) {
   b5dd2:	6830      	ldr	r0, [r6, #0]
   b5dd4:	b138      	cbz	r0, b5de6 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc52>
   b5dd6:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   b5dda:	ecbd 8b0e 	vpop	{d8-d14}
   b5dde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            free(wakeupSource_);
   b5de2:	f002 b92d 	b.w	b8040 <free>
   b5de6:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   b5dea:	ecbd 8b0e 	vpop	{d8-d14}
   b5dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5df2:	bf00      	nop
   b5df4:	000bdb72 	.word	0x000bdb72
   b5df8:	2003e670 	.word	0x2003e670
   b5dfc:	2003e684 	.word	0x2003e684
   b5e00:	2003569c 	.word	0x2003569c
   b5e04:	2003a660 	.word	0x2003a660
   b5e08:	000bda1c 	.word	0x000bda1c
   b5e0c:	200354cc 	.word	0x200354cc
   b5e10:	2003e4e0 	.word	0x2003e4e0
   b5e14:	20037f24 	.word	0x20037f24
   b5e18:	000bde7c 	.word	0x000bde7c
   b5e1c:	20035610 	.word	0x20035610
   b5e20:	2003e65c 	.word	0x2003e65c
   b5e24:	2003e634 	.word	0x2003e634
   b5e28:	2003e694 	.word	0x2003e694
   b5e2c:	2003e6ac 	.word	0x2003e6ac
   b5e30:	2003e69c 	.word	0x2003e69c
   b5e34:	20035524 	.word	0x20035524
   b5e38:	2003561c 	.word	0x2003561c
   b5e3c:	2003e4f0 	.word	0x2003e4f0
   b5e40:	2003e55c 	.word	0x2003e55c
   b5e44:	20037eb8 	.word	0x20037eb8
   b5e48:	20035628 	.word	0x20035628
   b5e4c:	200355a0 	.word	0x200355a0
   b5e50:	20035534 	.word	0x20035534
   b5e54:	2003e5c8 	.word	0x2003e5c8

000b5e58 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b5e58:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b5e5a:	b510      	push	{r4, lr}
   b5e5c:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b5e5e:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b5e62:	d005      	beq.n	b5e70 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b5e64:	4601      	mov	r1, r0
   b5e66:	4622      	mov	r2, r4
   b5e68:	4618      	mov	r0, r3
   b5e6a:	f005 fbcd 	bl	bb608 <memmove>
   b5e6e:	4603      	mov	r3, r0
	}
   b5e70:	1918      	adds	r0, r3, r4
   b5e72:	bd10      	pop	{r4, pc}

000b5e74 <_ZN7RailwayC1ERKS_>:
class Railway{
   b5e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5e78:	460d      	mov	r5, r1
   b5e7a:	4604      	mov	r4, r0
   b5e7c:	f7fe fd18 	bl	b48b0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5e80:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5e84:	2600      	movs	r6, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5e86:	1ac9      	subs	r1, r1, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5e88:	e9c4 6603 	strd	r6, r6, [r4, #12]
   b5e8c:	6166      	str	r6, [r4, #20]
      { _M_create_storage(__n); }
   b5e8e:	1089      	asrs	r1, r1, #2
   b5e90:	f104 000c 	add.w	r0, r4, #12
   b5e94:	f7fe ff7e 	bl	b4d94 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
			      _Category>::__copy_m(__first, __last, __result);
   b5e98:	68e2      	ldr	r2, [r4, #12]
   b5e9a:	e9d5 0103 	ldrd	r0, r1, [r5, #12]
   b5e9e:	f7ff ffdb 	bl	b5e58 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b5ea2:	f105 0118 	add.w	r1, r5, #24
	this->_M_impl._M_finish =
   b5ea6:	6120      	str	r0, [r4, #16]
   b5ea8:	f104 0018 	add.w	r0, r4, #24
   b5eac:	f7fe ffe8 	bl	b4e80 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5eb0:	e9d5 3709 	ldrd	r3, r7, [r5, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5eb4:	4826      	ldr	r0, [pc, #152]	; (b5f50 <_ZN7RailwayC1ERKS_+0xdc>)
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5eb6:	62e6      	str	r6, [r4, #44]	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5eb8:	1aff      	subs	r7, r7, r3
   b5eba:	10bb      	asrs	r3, r7, #2
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5ebc:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5ec0:	4358      	muls	r0, r3
   b5ec2:	f7fe f90f 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b5ec6:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5eca:	4407      	add	r7, r0
   b5ecc:	62e7      	str	r7, [r4, #44]	; 0x2c
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b5ece:	e9d5 7809 	ldrd	r7, r8, [r5, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5ed2:	4606      	mov	r6, r0
   b5ed4:	45b8      	cmp	r8, r7
   b5ed6:	d007      	beq.n	b5ee8 <_ZN7RailwayC1ERKS_+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b5ed8:	b11e      	cbz	r6, b5ee2 <_ZN7RailwayC1ERKS_+0x6e>
   b5eda:	4639      	mov	r1, r7
   b5edc:	4630      	mov	r0, r6
   b5ede:	f7fe ffcf 	bl	b4e80 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b5ee2:	360c      	adds	r6, #12
   b5ee4:	370c      	adds	r7, #12
   b5ee6:	e7f5      	b.n	b5ed4 <_ZN7RailwayC1ERKS_+0x60>
	this->_M_impl._M_finish =
   b5ee8:	62a6      	str	r6, [r4, #40]	; 0x28
   b5eea:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b5eee:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b5ef2:	f7fe f993 	bl	b421c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5ef6:	e9d5 3712 	ldrd	r3, r7, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5efa:	4815      	ldr	r0, [pc, #84]	; (b5f50 <_ZN7RailwayC1ERKS_+0xdc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5efc:	1aff      	subs	r7, r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5efe:	2300      	movs	r3, #0
   b5f00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   b5f04:	6523      	str	r3, [r4, #80]	; 0x50
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5f06:	10fb      	asrs	r3, r7, #3
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5f08:	4358      	muls	r0, r3
   b5f0a:	f7fe f937 	bl	b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b5f0e:	e9c4 0012 	strd	r0, r0, [r4, #72]	; 0x48
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5f12:	4407      	add	r7, r0
   b5f14:	6527      	str	r7, [r4, #80]	; 0x50
   b5f16:	e9d5 7812 	ldrd	r7, r8, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5f1a:	4606      	mov	r6, r0
   b5f1c:	45b8      	cmp	r8, r7
   b5f1e:	d007      	beq.n	b5f30 <_ZN7RailwayC1ERKS_+0xbc>
   b5f20:	b11e      	cbz	r6, b5f2a <_ZN7RailwayC1ERKS_+0xb6>
   b5f22:	4639      	mov	r1, r7
   b5f24:	4630      	mov	r0, r6
   b5f26:	f7fe f979 	bl	b421c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b5f2a:	3618      	adds	r6, #24
   b5f2c:	3718      	adds	r7, #24
   b5f2e:	e7f5      	b.n	b5f1c <_ZN7RailwayC1ERKS_+0xa8>
	this->_M_impl._M_finish =
   b5f30:	64e6      	str	r6, [r4, #76]	; 0x4c
   b5f32:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b5f34:	6563      	str	r3, [r4, #84]	; 0x54
   b5f36:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b5f38:	65a3      	str	r3, [r4, #88]	; 0x58
   b5f3a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b5f3c:	65e3      	str	r3, [r4, #92]	; 0x5c
   b5f3e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b5f40:	6623      	str	r3, [r4, #96]	; 0x60
   b5f42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   b5f44:	6663      	str	r3, [r4, #100]	; 0x64
   b5f46:	6eab      	ldr	r3, [r5, #104]	; 0x68
   b5f48:	66a3      	str	r3, [r4, #104]	; 0x68
   b5f4a:	4620      	mov	r0, r4
   b5f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5f50:	aaaaaaab 	.word	0xaaaaaaab

000b5f54 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   b5f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5f56:	e9d1 3700 	ldrd	r3, r7, [r1]
   b5f5a:	1aff      	subs	r7, r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5f5c:	2300      	movs	r3, #0
   b5f5e:	e9c0 3300 	strd	r3, r3, [r0]
      vector(const vector& __x)
   b5f62:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5f64:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5f66:	480d      	ldr	r0, [pc, #52]	; (b5f9c <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x48>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5f68:	10bb      	asrs	r3, r7, #2
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5f6a:	4358      	muls	r0, r3
      vector(const vector& __x)
   b5f6c:	460e      	mov	r6, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5f6e:	f7fe f8f3 	bl	b4158 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b5f72:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5f76:	4407      	add	r7, r0
   b5f78:	60a7      	str	r7, [r4, #8]
   b5f7a:	e9d6 6700 	ldrd	r6, r7, [r6]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5f7e:	4605      	mov	r5, r0
   b5f80:	42b7      	cmp	r7, r6
   b5f82:	d007      	beq.n	b5f94 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x40>
   b5f84:	b11d      	cbz	r5, b5f8e <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x3a>
   b5f86:	4631      	mov	r1, r6
   b5f88:	4628      	mov	r0, r5
   b5f8a:	f7ff ff73 	bl	b5e74 <_ZN7RailwayC1ERKS_>
   b5f8e:	356c      	adds	r5, #108	; 0x6c
   b5f90:	366c      	adds	r6, #108	; 0x6c
   b5f92:	e7f5      	b.n	b5f80 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x2c>
	this->_M_impl._M_finish =
   b5f94:	6065      	str	r5, [r4, #4]
      }
   b5f96:	4620      	mov	r0, r4
   b5f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5f9a:	bf00      	nop
   b5f9c:	684bda13 	.word	0x684bda13

000b5fa0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   b5fa0:	b570      	push	{r4, r5, r6, lr}
   b5fa2:	4605      	mov	r5, r0
   b5fa4:	460e      	mov	r6, r1
   b5fa6:	4614      	mov	r4, r2
	      for (; __first != __last; ++__first, (void)++__cur)
   b5fa8:	42b5      	cmp	r5, r6
   b5faa:	d00d      	beq.n	b5fc8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_+0x28>
   b5fac:	b14c      	cbz	r4, b5fc2 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_+0x22>
   b5fae:	4629      	mov	r1, r5
   b5fb0:	4620      	mov	r0, r4
   b5fb2:	f7ff ffcf 	bl	b5f54 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>
   b5fb6:	f105 010c 	add.w	r1, r5, #12
   b5fba:	f104 000c 	add.w	r0, r4, #12
   b5fbe:	f7fe f92d 	bl	b421c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b5fc2:	3524      	adds	r5, #36	; 0x24
   b5fc4:	3424      	adds	r4, #36	; 0x24
   b5fc6:	e7ef      	b.n	b5fa8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_+0x8>
	}
   b5fc8:	4620      	mov	r0, r4
   b5fca:	bd70      	pop	{r4, r5, r6, pc}

000b5fcc <_ZN7RailwayaSERKS_.isra.0>:
   b5fcc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5fd0:	4604      	mov	r4, r0
   b5fd2:	460d      	mov	r5, r1
   b5fd4:	f7fe f95e 	bl	b4294 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
   b5fd8:	f105 020c 	add.w	r2, r5, #12
   b5fdc:	f104 030c 	add.w	r3, r4, #12
      if (&__x != this)
   b5fe0:	429a      	cmp	r2, r3
   b5fe2:	d025      	beq.n	b6030 <_ZN7RailwayaSERKS_.isra.0+0x64>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5fe4:	e9d5 8103 	ldrd	r8, r1, [r5, #12]
			 - this->_M_impl._M_start); }
   b5fe8:	68e2      	ldr	r2, [r4, #12]
   b5fea:	6963      	ldr	r3, [r4, #20]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5fec:	eba1 0608 	sub.w	r6, r1, r8
			 - this->_M_impl._M_start); }
   b5ff0:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b5ff2:	429e      	cmp	r6, r3
   b5ff4:	d94a      	bls.n	b608c <_ZN7RailwayaSERKS_.isra.0+0xc0>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5ff6:	2e00      	cmp	r6, #0
   b5ff8:	d046      	beq.n	b6088 <_ZN7RailwayaSERKS_.isra.0+0xbc>
	if (__n > this->_M_max_size())
   b5ffa:	4b5d      	ldr	r3, [pc, #372]	; (b6170 <_ZN7RailwayaSERKS_.isra.0+0x1a4>)
   b5ffc:	429e      	cmp	r6, r3
   b5ffe:	d901      	bls.n	b6004 <_ZN7RailwayaSERKS_.isra.0+0x38>
	  std::__throw_bad_alloc();
   b6000:	f004 fb0c 	bl	ba61c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6004:	4630      	mov	r0, r6
   b6006:	9101      	str	r1, [sp, #4]
   b6008:	f7fe f845 	bl	b4096 <_Znwj>
   b600c:	9901      	ldr	r1, [sp, #4]
   b600e:	4607      	mov	r7, r0
   b6010:	463a      	mov	r2, r7
   b6012:	4640      	mov	r0, r8
   b6014:	f7ff ff20 	bl	b5e58 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b6018:	68e0      	ldr	r0, [r4, #12]
	if (__p)
   b601a:	b118      	cbz	r0, b6024 <_ZN7RailwayaSERKS_.isra.0+0x58>
			    - this->_M_impl._M_start);
   b601c:	6961      	ldr	r1, [r4, #20]
	::operator delete(__p
   b601e:	1a09      	subs	r1, r1, r0
   b6020:	f7fe f83f 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b6024:	60e7      	str	r7, [r4, #12]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b6026:	4437      	add	r7, r6
   b6028:	6167      	str	r7, [r4, #20]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b602a:	68e3      	ldr	r3, [r4, #12]
   b602c:	4433      	add	r3, r6
   b602e:	6123      	str	r3, [r4, #16]
   b6030:	f105 0118 	add.w	r1, r5, #24
   b6034:	f104 0018 	add.w	r0, r4, #24
   b6038:	f7fe ff66 	bl	b4f08 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
   b603c:	f105 0324 	add.w	r3, r5, #36	; 0x24
   b6040:	f104 0224 	add.w	r2, r4, #36	; 0x24
      if (&__x != this)
   b6044:	4293      	cmp	r3, r2
   b6046:	d045      	beq.n	b60d4 <_ZN7RailwayaSERKS_.isra.0+0x108>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6048:	e9d5 6a09 	ldrd	r6, sl, [r5, #36]	; 0x24
			 - this->_M_impl._M_start); }
   b604c:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
   b6050:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6052:	ebaa 0806 	sub.w	r8, sl, r6
			 - this->_M_impl._M_start); }
   b6056:	eba3 0309 	sub.w	r3, r3, r9
	  if (__xlen > capacity())
   b605a:	4543      	cmp	r3, r8
   b605c:	d255      	bcs.n	b610a <_ZN7RailwayaSERKS_.isra.0+0x13e>
	  pointer __result = this->_M_allocate(__n);
   b605e:	4845      	ldr	r0, [pc, #276]	; (b6174 <_ZN7RailwayaSERKS_.isra.0+0x1a8>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6060:	ea4f 03a8 	mov.w	r3, r8, asr #2
	  pointer __result = this->_M_allocate(__n);
   b6064:	4358      	muls	r0, r3
   b6066:	f7fe f83d 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
   b606a:	4607      	mov	r7, r0
	  _ForwardIterator __cur = __result;
   b606c:	4681      	mov	r9, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b606e:	45b2      	cmp	sl, r6
   b6070:	d020      	beq.n	b60b4 <_ZN7RailwayaSERKS_.isra.0+0xe8>
   b6072:	f1b9 0f00 	cmp.w	r9, #0
   b6076:	d003      	beq.n	b6080 <_ZN7RailwayaSERKS_.isra.0+0xb4>
   b6078:	4631      	mov	r1, r6
   b607a:	4648      	mov	r0, r9
   b607c:	f7fe ff00 	bl	b4e80 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b6080:	f109 090c 	add.w	r9, r9, #12
   b6084:	360c      	adds	r6, #12
   b6086:	e7f2      	b.n	b606e <_ZN7RailwayaSERKS_.isra.0+0xa2>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b6088:	4637      	mov	r7, r6
   b608a:	e7c1      	b.n	b6010 <_ZN7RailwayaSERKS_.isra.0+0x44>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b608c:	6923      	ldr	r3, [r4, #16]
   b608e:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b6090:	429e      	cmp	r6, r3
   b6092:	d803      	bhi.n	b609c <_ZN7RailwayaSERKS_.isra.0+0xd0>
   b6094:	4640      	mov	r0, r8
   b6096:	f7ff fedf 	bl	b5e58 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
    { return std::uninitialized_copy(__first, __last, __result); }
   b609a:	e7c6      	b.n	b602a <_ZN7RailwayaSERKS_.isra.0+0x5e>
   b609c:	eb08 0103 	add.w	r1, r8, r3
   b60a0:	4640      	mov	r0, r8
   b60a2:	f7ff fed9 	bl	b5e58 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b60a6:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
   b60aa:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
   b60ae:	1a10      	subs	r0, r2, r0
   b60b0:	4418      	add	r0, r3
   b60b2:	e7f0      	b.n	b6096 <_ZN7RailwayaSERKS_.isra.0+0xca>
	__destroy(__first, __last);
   b60b4:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b60b8:	f7fe fe81 	bl	b4dbe <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	      _M_deallocate(this->_M_impl._M_start,
   b60bc:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b60be:	b118      	cbz	r0, b60c8 <_ZN7RailwayaSERKS_.isra.0+0xfc>
			    - this->_M_impl._M_start);
   b60c0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b60c2:	1a09      	subs	r1, r1, r0
   b60c4:	f7fd ffed 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b60c8:	6267      	str	r7, [r4, #36]	; 0x24
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b60ca:	4447      	add	r7, r8
   b60cc:	62e7      	str	r7, [r4, #44]	; 0x2c
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b60ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b60d0:	4443      	add	r3, r8
   b60d2:	62a3      	str	r3, [r4, #40]	; 0x28
	this->_M_assign(__str);
   b60d4:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b60d8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b60dc:	f004 faf4 	bl	ba6c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
   b60e0:	f105 0148 	add.w	r1, r5, #72	; 0x48
   b60e4:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b60e8:	f7fe f926 	bl	b4338 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
   b60ec:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b60ee:	6563      	str	r3, [r4, #84]	; 0x54
   b60f0:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b60f2:	65a3      	str	r3, [r4, #88]	; 0x58
   b60f4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b60f6:	65e3      	str	r3, [r4, #92]	; 0x5c
   b60f8:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b60fa:	6623      	str	r3, [r4, #96]	; 0x60
   b60fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   b60fe:	6663      	str	r3, [r4, #100]	; 0x64
   b6100:	6eab      	ldr	r3, [r5, #104]	; 0x68
   b6102:	66a3      	str	r3, [r4, #104]	; 0x68
   b6104:	b002      	add	sp, #8
   b6106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b610a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   b610c:	eba7 0709 	sub.w	r7, r7, r9
	  else if (size() >= __xlen)
   b6110:	45b8      	cmp	r8, r7
   b6112:	d80d      	bhi.n	b6130 <_ZN7RailwayaSERKS_.isra.0+0x164>
   b6114:	4630      	mov	r0, r6
   b6116:	464a      	mov	r2, r9
   b6118:	4651      	mov	r1, sl
   b611a:	f7fe ff2d 	bl	b4f78 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      : _M_current(__i) { }
   b611e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b6120:	4606      	mov	r6, r0
	  for (; __first != __last; ++__first)
   b6122:	42b7      	cmp	r7, r6
   b6124:	d0d3      	beq.n	b60ce <_ZN7RailwayaSERKS_.isra.0+0x102>
      }
   b6126:	4630      	mov	r0, r6
   b6128:	f7fe fb1a 	bl	b4760 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   b612c:	360c      	adds	r6, #12
	return *this;
   b612e:	e7f8      	b.n	b6122 <_ZN7RailwayaSERKS_.isra.0+0x156>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6130:	4b10      	ldr	r3, [pc, #64]	; (b6174 <_ZN7RailwayaSERKS_.isra.0+0x1a8>)
   b6132:	10bf      	asrs	r7, r7, #2
   b6134:	435f      	muls	r7, r3
   b6136:	2f00      	cmp	r7, #0
   b6138:	dd08      	ble.n	b614c <_ZN7RailwayaSERKS_.isra.0+0x180>
	      *__result = *__first;
   b613a:	4631      	mov	r1, r6
   b613c:	4648      	mov	r0, r9
   b613e:	f7fe fee3 	bl	b4f08 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	      ++__first;
   b6142:	360c      	adds	r6, #12
	      ++__result;
   b6144:	f109 090c 	add.w	r9, r9, #12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6148:	3f01      	subs	r7, #1
   b614a:	e7f4      	b.n	b6136 <_ZN7RailwayaSERKS_.isra.0+0x16a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b614c:	e9d4 6709 	ldrd	r6, r7, [r4, #36]	; 0x24
   b6150:	1bb9      	subs	r1, r7, r6
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b6152:	6a6e      	ldr	r6, [r5, #36]	; 0x24
					  __x._M_impl._M_finish,
   b6154:	f8d5 9028 	ldr.w	r9, [r5, #40]	; 0x28
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b6158:	440e      	add	r6, r1
	      for (; __first != __last; ++__first, (void)++__cur)
   b615a:	45b1      	cmp	r9, r6
   b615c:	d0b7      	beq.n	b60ce <_ZN7RailwayaSERKS_.isra.0+0x102>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b615e:	b11f      	cbz	r7, b6168 <_ZN7RailwayaSERKS_.isra.0+0x19c>
   b6160:	4631      	mov	r1, r6
   b6162:	4638      	mov	r0, r7
   b6164:	f7fe fe8c 	bl	b4e80 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b6168:	360c      	adds	r6, #12
   b616a:	370c      	adds	r7, #12
   b616c:	e7f5      	b.n	b615a <_ZN7RailwayaSERKS_.isra.0+0x18e>
   b616e:	bf00      	nop
   b6170:	7ffffffc 	.word	0x7ffffffc
   b6174:	aaaaaaab 	.word	0xaaaaaaab

000b6178 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b6178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b617c:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b617e:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6180:	480b      	ldr	r0, [pc, #44]	; (b61b0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x38>)
   b6182:	10a4      	asrs	r4, r4, #2
   b6184:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b6186:	4616      	mov	r6, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6188:	4627      	mov	r7, r4
   b618a:	4690      	mov	r8, r2
   b618c:	2f00      	cmp	r7, #0
   b618e:	dd08      	ble.n	b61a2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x2a>
	      *__result = *__first;
   b6190:	4629      	mov	r1, r5
   b6192:	4640      	mov	r0, r8
   b6194:	f7ff ff1a 	bl	b5fcc <_ZN7RailwayaSERKS_.isra.0>
	      ++__first;
   b6198:	356c      	adds	r5, #108	; 0x6c
	      ++__result;
   b619a:	f108 086c 	add.w	r8, r8, #108	; 0x6c
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b619e:	3f01      	subs	r7, #1
   b61a0:	e7f4      	b.n	b618c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x14>
	  return __result;
   b61a2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b61a6:	206c      	movs	r0, #108	; 0x6c
   b61a8:	fb00 6004 	mla	r0, r0, r4, r6
   b61ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b61b0:	684bda13 	.word	0x684bda13

000b61b4 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>:
      if (&__x != this)
   b61b4:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b61b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b61ba:	4604      	mov	r4, r0
   b61bc:	460f      	mov	r7, r1
      if (&__x != this)
   b61be:	d02c      	beq.n	b621a <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x66>
   b61c0:	e9d1 5a00 	ldrd	r5, sl, [r1]
			 - this->_M_impl._M_start); }
   b61c4:	f8d0 9000 	ldr.w	r9, [r0]
   b61c8:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b61ca:	ebaa 0805 	sub.w	r8, sl, r5
			 - this->_M_impl._M_start); }
   b61ce:	eba3 0309 	sub.w	r3, r3, r9
	  if (__xlen > capacity())
   b61d2:	4543      	cmp	r3, r8
   b61d4:	d223      	bcs.n	b621e <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x6a>
	  pointer __result = this->_M_allocate(__n);
   b61d6:	482a      	ldr	r0, [pc, #168]	; (b6280 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xcc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b61d8:	ea4f 03a8 	mov.w	r3, r8, asr #2
	  pointer __result = this->_M_allocate(__n);
   b61dc:	4358      	muls	r0, r3
   b61de:	f7fd ffbb 	bl	b4158 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>
   b61e2:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   b61e4:	4607      	mov	r7, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b61e6:	45aa      	cmp	sl, r5
   b61e8:	d007      	beq.n	b61fa <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x46>
   b61ea:	b11f      	cbz	r7, b61f4 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x40>
   b61ec:	4629      	mov	r1, r5
   b61ee:	4638      	mov	r0, r7
   b61f0:	f7ff fe40 	bl	b5e74 <_ZN7RailwayC1ERKS_>
   b61f4:	376c      	adds	r7, #108	; 0x6c
   b61f6:	356c      	adds	r5, #108	; 0x6c
   b61f8:	e7f5      	b.n	b61e6 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x32>
	__destroy(__first, __last);
   b61fa:	e9d4 0100 	ldrd	r0, r1, [r4]
   b61fe:	f7fe fe09 	bl	b4e14 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	      _M_deallocate(this->_M_impl._M_start,
   b6202:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b6204:	b118      	cbz	r0, b620e <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x5a>
			    - this->_M_impl._M_start);
   b6206:	68a1      	ldr	r1, [r4, #8]
   b6208:	1a09      	subs	r1, r1, r0
   b620a:	f7fd ff4a 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b620e:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b6210:	4446      	add	r6, r8
   b6212:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b6214:	6823      	ldr	r3, [r4, #0]
   b6216:	4443      	add	r3, r8
   b6218:	6063      	str	r3, [r4, #4]
    }
   b621a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b621e:	6846      	ldr	r6, [r0, #4]
   b6220:	eba6 0609 	sub.w	r6, r6, r9
	  else if (size() >= __xlen)
   b6224:	45b0      	cmp	r8, r6
   b6226:	d80d      	bhi.n	b6244 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x90>
			      _Category>::__copy_m(__first, __last, __result);
   b6228:	4628      	mov	r0, r5
   b622a:	464a      	mov	r2, r9
   b622c:	4651      	mov	r1, sl
   b622e:	f7ff ffa3 	bl	b6178 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
      : _M_current(__i) { }
   b6232:	6866      	ldr	r6, [r4, #4]
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b6234:	4605      	mov	r5, r0
	  for (; __first != __last; ++__first)
   b6236:	42ae      	cmp	r6, r5
   b6238:	d0ec      	beq.n	b6214 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x60>
      __pointer->~_Tp();
   b623a:	4628      	mov	r0, r5
   b623c:	f7fe fdca 	bl	b4dd4 <_ZN7RailwayD1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   b6240:	356c      	adds	r5, #108	; 0x6c
	return *this;
   b6242:	e7f8      	b.n	b6236 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x82>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6244:	4b0e      	ldr	r3, [pc, #56]	; (b6280 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xcc>)
   b6246:	10b6      	asrs	r6, r6, #2
   b6248:	435e      	muls	r6, r3
   b624a:	2e00      	cmp	r6, #0
   b624c:	dd08      	ble.n	b6260 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xac>
	      *__result = *__first;
   b624e:	4629      	mov	r1, r5
   b6250:	4648      	mov	r0, r9
   b6252:	f7ff febb 	bl	b5fcc <_ZN7RailwayaSERKS_.isra.0>
	      ++__first;
   b6256:	356c      	adds	r5, #108	; 0x6c
	      ++__result;
   b6258:	f109 096c 	add.w	r9, r9, #108	; 0x6c
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b625c:	3e01      	subs	r6, #1
   b625e:	e7f4      	b.n	b624a <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x96>
   b6260:	e9d4 5600 	ldrd	r5, r6, [r4]
   b6264:	1b71      	subs	r1, r6, r5
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b6266:	683d      	ldr	r5, [r7, #0]
					  __x._M_impl._M_finish,
   b6268:	687f      	ldr	r7, [r7, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b626a:	440d      	add	r5, r1
   b626c:	42af      	cmp	r7, r5
   b626e:	d0d1      	beq.n	b6214 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x60>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6270:	b11e      	cbz	r6, b627a <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xc6>
   b6272:	4629      	mov	r1, r5
   b6274:	4630      	mov	r0, r6
   b6276:	f7ff fdfd 	bl	b5e74 <_ZN7RailwayC1ERKS_>
   b627a:	356c      	adds	r5, #108	; 0x6c
   b627c:	366c      	adds	r6, #108	; 0x6c
   b627e:	e7f5      	b.n	b626c <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xb8>
   b6280:	684bda13 	.word	0x684bda13

000b6284 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b6284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6288:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b628a:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b628c:	480f      	ldr	r0, [pc, #60]	; (b62cc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_+0x48>)
   b628e:	10a4      	asrs	r4, r4, #2
   b6290:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b6292:	4616      	mov	r6, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6294:	46a0      	mov	r8, r4
   b6296:	4617      	mov	r7, r2
   b6298:	f1b8 0f00 	cmp.w	r8, #0
   b629c:	dd0e      	ble.n	b62bc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_+0x38>
   b629e:	4629      	mov	r1, r5
   b62a0:	4638      	mov	r0, r7
   b62a2:	f7ff ff87 	bl	b61b4 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>
   b62a6:	f105 010c 	add.w	r1, r5, #12
   b62aa:	f107 000c 	add.w	r0, r7, #12
   b62ae:	f004 fa0b 	bl	ba6c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b62b2:	3524      	adds	r5, #36	; 0x24
	      ++__result;
   b62b4:	3724      	adds	r7, #36	; 0x24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b62b6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b62ba:	e7ed      	b.n	b6298 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_+0x14>
	  return __result;
   b62bc:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b62c0:	2024      	movs	r0, #36	; 0x24
   b62c2:	fb00 6004 	mla	r0, r0, r4, r6
   b62c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b62ca:	bf00      	nop
   b62cc:	38e38e39 	.word	0x38e38e39

000b62d0 <setup>:
void setup() {
   b62d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b62d4:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
  Serial.begin(9600);
   b62d8:	f003 ffec 	bl	ba2b4 <_Z16_fetch_usbserialv>
   b62dc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b62e0:	f003 ffdc 	bl	ba29c <_ZN9USBSerial5beginEl>
  delay(500);
   b62e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b62e8:	f001 fef2 	bl	b80d0 <delay>
  BLE.on();
   b62ec:	f002 f9ea 	bl	b86c4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b62f0:	f002 fa32 	bl	b8758 <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   b62f4:	f002 f9e6 	bl	b86c4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b62f8:	4a9b      	ldr	r2, [pc, #620]	; (b6568 <setup+0x298>)
   b62fa:	4d9c      	ldr	r5, [pc, #624]	; (b656c <setup+0x29c>)
   b62fc:	4601      	mov	r1, r0
   b62fe:	a80f      	add	r0, sp, #60	; 0x3c
   b6300:	f002 ff14 	bl	b912c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b6304:	a80f      	add	r0, sp, #60	; 0x3c
   b6306:	f002 face 	bl	b88a6 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   b630a:	f002 f9db 	bl	b86c4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b630e:	4a98      	ldr	r2, [pc, #608]	; (b6570 <setup+0x2a0>)
   b6310:	4601      	mov	r1, r0
   b6312:	a80f      	add	r0, sp, #60	; 0x3c
   b6314:	f002 ff0a 	bl	b912c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b6318:	a80f      	add	r0, sp, #60	; 0x3c
   b631a:	f002 fac4 	bl	b88a6 <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData data;
   b631e:	a803      	add	r0, sp, #12
   b6320:	f002 fbf7 	bl	b8b12 <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   b6324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6326:	ac09      	add	r4, sp, #36	; 0x24
   b6328:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b632a:	682e      	ldr	r6, [r5, #0]
   b632c:	6026      	str	r6, [r4, #0]
        BleUuid tempUUID(uuid);
   b632e:	ad09      	add	r5, sp, #36	; 0x24
   b6330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6332:	ac0f      	add	r4, sp, #60	; 0x3c
   b6334:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b6336:	a80f      	add	r0, sp, #60	; 0x3c
        BleUuid tempUUID(uuid);
   b6338:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b633a:	f002 f837 	bl	b83ac <_ZNK8particle7BleUuid4typeEv>
   b633e:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b6340:	a80f      	add	r0, sp, #60	; 0x3c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b6342:	2c00      	cmp	r4, #0
   b6344:	f040 80c5 	bne.w	b64d2 <setup+0x202>
            uint16_t uuid16 = tempUUID.shorted();
   b6348:	f002 f84c 	bl	b83e4 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b634c:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b634e:	f8ad 0018 	strh.w	r0, [sp, #24]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b6352:	2302      	movs	r3, #2
   b6354:	aa06      	add	r2, sp, #24
   b6356:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b6358:	a803      	add	r0, sp, #12
   b635a:	f002 fbcf 	bl	b8afc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   b635e:	f002 f9b1 	bl	b86c4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6362:	2200      	movs	r2, #0
   b6364:	a903      	add	r1, sp, #12
   b6366:	f002 fa41 	bl	b87ec <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  request.hostname = "trek.thewcl.com";
   b636a:	4c82      	ldr	r4, [pc, #520]	; (b6574 <setup+0x2a4>)

    //loopIndex must point to either the first or last checkpoint, tripleIndex cannot be 0
    void setLoopIndex(int triple, int loop){
        tripleIndex = triple;
   b636c:	4e82      	ldr	r6, [pc, #520]	; (b6578 <setup+0x2a8>)
  acquireWireBuffer();
   b636e:	a80f      	add	r0, sp, #60	; 0x3c
   b6370:	f7fe f9cc 	bl	b470c <_Z17acquireWireBufferv>
  Wire.begin();
   b6374:	f004 f8ec 	bl	ba550 <_Z19__fetch_global_Wirev>
   b6378:	f003 f864 	bl	b9444 <_ZN7TwoWire5beginEv>
  request.hostname = "trek.thewcl.com";
   b637c:	497f      	ldr	r1, [pc, #508]	; (b657c <setup+0x2ac>)
   b637e:	4620      	mov	r0, r4
   b6380:	f003 fb15 	bl	b99ae <_ZN6StringaSEPKc>
  request.port = 80;
   b6384:	2350      	movs	r3, #80	; 0x50
   b6386:	497e      	ldr	r1, [pc, #504]	; (b6580 <setup+0x2b0>)
   b6388:	63a3      	str	r3, [r4, #56]	; 0x38
   b638a:	4c7e      	ldr	r4, [pc, #504]	; (b6584 <setup+0x2b4>)
        loopIndex = loop;
   b638c:	2502      	movs	r5, #2
   b638e:	2006      	movs	r0, #6
   b6390:	e9c1 5015 	strd	r5, r0, [r1, #84]	; 0x54
   b6394:	e9c4 5015 	strd	r5, r0, [r4, #84]	; 0x54
        tripleIndex = triple;
   b6398:	4d7b      	ldr	r5, [pc, #492]	; (b6588 <setup+0x2b8>)
        loopIndex = loop;
   b639a:	2203      	movs	r2, #3
   b639c:	2307      	movs	r3, #7
  ctaRailways = {brownLine, orangeLine, pinkLine, purpleLine, greenLine};
   b639e:	a80f      	add	r0, sp, #60	; 0x3c
   b63a0:	e9c6 2315 	strd	r2, r3, [r6, #84]	; 0x54
   b63a4:	e9c5 2315 	strd	r2, r3, [r5, #84]	; 0x54
   b63a8:	f7ff fd64 	bl	b5e74 <_ZN7RailwayC1ERKS_>
   b63ac:	4631      	mov	r1, r6
   b63ae:	a82a      	add	r0, sp, #168	; 0xa8
   b63b0:	f7ff fd60 	bl	b5e74 <_ZN7RailwayC1ERKS_>
   b63b4:	4629      	mov	r1, r5
   b63b6:	a845      	add	r0, sp, #276	; 0x114
   b63b8:	f7ff fd5c 	bl	b5e74 <_ZN7RailwayC1ERKS_>
   b63bc:	4621      	mov	r1, r4
   b63be:	a860      	add	r0, sp, #384	; 0x180
			 - this->_M_impl._M_start); }
   b63c0:	4c72      	ldr	r4, [pc, #456]	; (b658c <setup+0x2bc>)
   b63c2:	f7ff fd57 	bl	b5e74 <_ZN7RailwayC1ERKS_>
   b63c6:	4972      	ldr	r1, [pc, #456]	; (b6590 <setup+0x2c0>)
   b63c8:	a87b      	add	r0, sp, #492	; 0x1ec
   b63ca:	f7ff fd53 	bl	b5e74 <_ZN7RailwayC1ERKS_>
   b63ce:	6822      	ldr	r2, [r4, #0]
   b63d0:	68a3      	ldr	r3, [r4, #8]
   b63d2:	1a9b      	subs	r3, r3, r2
	if (__len > capacity())
   b63d4:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
   b63d8:	f080 8083 	bcs.w	b64e2 <setup+0x212>
	  pointer __result = this->_M_allocate(__n);
   b63dc:	2005      	movs	r0, #5
   b63de:	f7fd febb 	bl	b4158 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>
   b63e2:	f10d 083c 	add.w	r8, sp, #60	; 0x3c
   b63e6:	4605      	mov	r5, r0
   b63e8:	f500 7707 	add.w	r7, r0, #540	; 0x21c
	  _ForwardIterator __cur = __result;
   b63ec:	4606      	mov	r6, r0
   b63ee:	b11e      	cbz	r6, b63f8 <setup+0x128>
   b63f0:	4641      	mov	r1, r8
   b63f2:	4630      	mov	r0, r6
   b63f4:	f7ff fd3e 	bl	b5e74 <_ZN7RailwayC1ERKS_>
	      for (; __first != __last; ++__first, (void)++__cur)
   b63f8:	366c      	adds	r6, #108	; 0x6c
   b63fa:	42b7      	cmp	r7, r6
   b63fc:	f108 086c 	add.w	r8, r8, #108	; 0x6c
   b6400:	d1f5      	bne.n	b63ee <setup+0x11e>
	__destroy(__first, __last);
   b6402:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6406:	f7fe fd05 	bl	b4e14 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	    _M_deallocate(this->_M_impl._M_start,
   b640a:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b640c:	b118      	cbz	r0, b6416 <setup+0x146>
			  - this->_M_impl._M_start);
   b640e:	68a1      	ldr	r1, [r4, #8]
   b6410:	1a09      	subs	r1, r1, r0
   b6412:	f7fd fe46 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b6416:	e9c4 5700 	strd	r5, r7, [r4]
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b641a:	60a7      	str	r7, [r4, #8]
	  pointer __result = this->_M_allocate(__n);
   b641c:	2404      	movs	r4, #4
   b641e:	256c      	movs	r5, #108	; 0x6c
   b6420:	ab0f      	add	r3, sp, #60	; 0x3c
   b6422:	fb05 3004 	mla	r0, r5, r4, r3
   b6426:	f7fe fcd5 	bl	b4dd4 <_ZN7RailwayD1Ev>
   b642a:	3c01      	subs	r4, #1
   b642c:	d2f8      	bcs.n	b6420 <setup+0x150>
  cities = {City(ctaRailways, "chicago")};
   b642e:	4957      	ldr	r1, [pc, #348]	; (b658c <setup+0x2bc>)
			 - this->_M_impl._M_start); }
   b6430:	4c58      	ldr	r4, [pc, #352]	; (b6594 <setup+0x2c4>)
   b6432:	a806      	add	r0, sp, #24
   b6434:	f7ff fd8e 	bl	b5f54 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>
   b6438:	4957      	ldr	r1, [pc, #348]	; (b6598 <setup+0x2c8>)
   b643a:	a809      	add	r0, sp, #36	; 0x24
   b643c:	f7fd fe64 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6440:	2300      	movs	r3, #0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b6442:	aa14      	add	r2, sp, #80	; 0x50
    public:
        std::vector<Railway> railways;
        std::string name;

        City(std::vector<Railway> railwaysInput, std::string nameInput){
            railways = railwaysInput;
   b6444:	a906      	add	r1, sp, #24
   b6446:	a80f      	add	r0, sp, #60	; 0x3c
      { _M_string_length = __length; }
   b6448:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   b644c:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   b6450:	9311      	str	r3, [sp, #68]	; 0x44
   b6452:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
   b6456:	f7ff fead 	bl	b61b4 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>
	this->_M_assign(__str);
   b645a:	a909      	add	r1, sp, #36	; 0x24
   b645c:	a812      	add	r0, sp, #72	; 0x48
   b645e:	f004 f933 	bl	ba6c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
			 - this->_M_impl._M_start); }
   b6462:	6822      	ldr	r2, [r4, #0]
   b6464:	68a3      	ldr	r3, [r4, #8]
   b6466:	1a9b      	subs	r3, r3, r2
	if (__len > capacity())
   b6468:	2b23      	cmp	r3, #35	; 0x23
   b646a:	d85f      	bhi.n	b652c <setup+0x25c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b646c:	2024      	movs	r0, #36	; 0x24
   b646e:	f7fd fe12 	bl	b4096 <_Znwj>
	__uninit_copy(__first, __last, __result);
   b6472:	a918      	add	r1, sp, #96	; 0x60
   b6474:	4602      	mov	r2, r0
   b6476:	4605      	mov	r5, r0
   b6478:	a80f      	add	r0, sp, #60	; 0x3c
   b647a:	f7ff fd91 	bl	b5fa0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_>
   b647e:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6482:	f7fe fce0 	bl	b4e46 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>
	    _M_deallocate(this->_M_impl._M_start,
   b6486:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b6488:	b118      	cbz	r0, b6492 <setup+0x1c2>
			  - this->_M_impl._M_start);
   b648a:	68a1      	ldr	r1, [r4, #8]
	::operator delete(__p
   b648c:	1a09      	subs	r1, r1, r0
   b648e:	f7fd fe08 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
   b6492:	6025      	str	r5, [r4, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b6494:	3524      	adds	r5, #36	; 0x24
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b6496:	e9c4 5501 	strd	r5, r5, [r4, #4]
      { _M_dispose(); }
   b649a:	a812      	add	r0, sp, #72	; 0x48
   b649c:	f004 f8f6 	bl	ba68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
class City{
   b64a0:	a80f      	add	r0, sp, #60	; 0x3c
   b64a2:	f7fe fcc2 	bl	b4e2a <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b64a6:	a809      	add	r0, sp, #36	; 0x24
   b64a8:	f004 f8f0 	bl	ba68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b64ac:	a806      	add	r0, sp, #24
   b64ae:	f7fe fcbc 	bl	b4e2a <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
  randomizeAddress();
   b64b2:	f7fd ffcf 	bl	b4454 <_Z16randomizeAddressv>
    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
    }

    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
   b64b6:	4839      	ldr	r0, [pc, #228]	; (b659c <setup+0x2cc>)
   b64b8:	2300      	movs	r3, #0
   b64ba:	461a      	mov	r2, r3
   b64bc:	4619      	mov	r1, r3
   b64be:	6840      	ldr	r0, [r0, #4]
   b64c0:	f001 fd8e 	bl	b7fe0 <network_clear_credentials>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b64c4:	9803      	ldr	r0, [sp, #12]
   b64c6:	f001 fdbb 	bl	b8040 <free>
}
   b64ca:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
   b64ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b64d2:	f001 ff89 	bl	b83e8 <_ZNK8particle7BleUuid8rawBytesEv>
   b64d6:	2300      	movs	r3, #0
   b64d8:	9300      	str	r3, [sp, #0]
   b64da:	4602      	mov	r2, r0
   b64dc:	2310      	movs	r3, #16
   b64de:	2107      	movs	r1, #7
   b64e0:	e73a      	b.n	b6358 <setup+0x88>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b64e2:	6865      	ldr	r5, [r4, #4]
   b64e4:	1aad      	subs	r5, r5, r2
	else if (size() >= __len)
   b64e6:	f5b5 7f07 	cmp.w	r5, #540	; 0x21c
   b64ea:	d30b      	bcc.n	b6504 <setup+0x234>
			      _Category>::__copy_m(__first, __last, __result);
   b64ec:	a996      	add	r1, sp, #600	; 0x258
   b64ee:	a80f      	add	r0, sp, #60	; 0x3c
   b64f0:	f7ff fe42 	bl	b6178 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b64f4:	6861      	ldr	r1, [r4, #4]
   b64f6:	4288      	cmp	r0, r1
   b64f8:	4605      	mov	r5, r0
   b64fa:	d08f      	beq.n	b641c <setup+0x14c>
   b64fc:	f7fe fc8a 	bl	b4e14 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	    this->_M_impl._M_finish = __pos;
   b6500:	6065      	str	r5, [r4, #4]
   b6502:	e78b      	b.n	b641c <setup+0x14c>
   b6504:	ab0f      	add	r3, sp, #60	; 0x3c
   b6506:	441d      	add	r5, r3
   b6508:	4629      	mov	r1, r5
   b650a:	4618      	mov	r0, r3
   b650c:	f7ff fe34 	bl	b6178 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6510:	6866      	ldr	r6, [r4, #4]
	      for (; __first != __last; ++__first, (void)++__cur)
   b6512:	ab96      	add	r3, sp, #600	; 0x258
   b6514:	429d      	cmp	r5, r3
   b6516:	d007      	beq.n	b6528 <setup+0x258>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6518:	b11e      	cbz	r6, b6522 <setup+0x252>
   b651a:	4629      	mov	r1, r5
   b651c:	4630      	mov	r0, r6
   b651e:	f7ff fca9 	bl	b5e74 <_ZN7RailwayC1ERKS_>
   b6522:	356c      	adds	r5, #108	; 0x6c
   b6524:	366c      	adds	r6, #108	; 0x6c
   b6526:	e7f4      	b.n	b6512 <setup+0x242>
	    this->_M_impl._M_finish =
   b6528:	6066      	str	r6, [r4, #4]
   b652a:	e777      	b.n	b641c <setup+0x14c>
   b652c:	6865      	ldr	r5, [r4, #4]
   b652e:	1aad      	subs	r5, r5, r2
	else if (size() >= __len)
   b6530:	2d23      	cmp	r5, #35	; 0x23
   b6532:	d90b      	bls.n	b654c <setup+0x27c>
   b6534:	a918      	add	r1, sp, #96	; 0x60
   b6536:	a80f      	add	r0, sp, #60	; 0x3c
   b6538:	f7ff fea4 	bl	b6284 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b653c:	6861      	ldr	r1, [r4, #4]
   b653e:	4288      	cmp	r0, r1
   b6540:	4605      	mov	r5, r0
   b6542:	d0aa      	beq.n	b649a <setup+0x1ca>
	__destroy(__first, __last);
   b6544:	f7fe fc7f 	bl	b4e46 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>
	    this->_M_impl._M_finish = __pos;
   b6548:	6065      	str	r5, [r4, #4]
   b654a:	e7a6      	b.n	b649a <setup+0x1ca>
   b654c:	ab0f      	add	r3, sp, #60	; 0x3c
   b654e:	441d      	add	r5, r3
   b6550:	4629      	mov	r1, r5
   b6552:	4618      	mov	r0, r3
   b6554:	f7ff fe96 	bl	b6284 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_>
	__uninit_copy(__first, __last, __result);
   b6558:	6862      	ldr	r2, [r4, #4]
   b655a:	a918      	add	r1, sp, #96	; 0x60
   b655c:	4628      	mov	r0, r5
   b655e:	f7ff fd1f 	bl	b5fa0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_>
	    this->_M_impl._M_finish =
   b6562:	6060      	str	r0, [r4, #4]
   b6564:	e799      	b.n	b649a <setup+0x1ca>
   b6566:	bf00      	nop
   b6568:	2003e6ac 	.word	0x2003e6ac
   b656c:	200354e8 	.word	0x200354e8
   b6570:	2003e694 	.word	0x2003e694
   b6574:	2003e634 	.word	0x2003e634
   b6578:	20037eb8 	.word	0x20037eb8
   b657c:	000bd958 	.word	0x000bd958
   b6580:	200355a0 	.word	0x200355a0
   b6584:	2003e55c 	.word	0x2003e55c
   b6588:	2003e4f0 	.word	0x2003e4f0
   b658c:	2003561c 	.word	0x2003561c
   b6590:	20035628 	.word	0x20035628
   b6594:	20035610 	.word	0x20035610
   b6598:	000bd968 	.word	0x000bd968
   b659c:	2003e718 	.word	0x2003e718

000b65a0 <_GLOBAL__sub_I_SystemMode>:
   b65a0:	2001      	movs	r0, #1
   b65a2:	f7fe bdf7 	b.w	b5194 <_Z41__static_initialization_and_destruction_0ii.constprop.0>
	...

000b65a8 <loop>:
void loop(){
   b65a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b65ac:	ed2d 8b06 	vpush	{d8-d10}
        return network_has_credentials(*this, 0, NULL);
   b65b0:	4b4e      	ldr	r3, [pc, #312]	; (b66ec <loop+0x144>)
   b65b2:	2200      	movs	r2, #0
   b65b4:	b0b7      	sub	sp, #220	; 0xdc
   b65b6:	6858      	ldr	r0, [r3, #4]
   b65b8:	4611      	mov	r1, r2
   b65ba:	f001 fd01 	bl	b7fc0 <network_has_credentials>
  if(WiFi.hasCredentials() && userInput){
   b65be:	2800      	cmp	r0, #0
   b65c0:	f000 84cc 	beq.w	b6f5c <loop+0x9b4>
   b65c4:	4b4a      	ldr	r3, [pc, #296]	; (b66f0 <loop+0x148>)
   b65c6:	781b      	ldrb	r3, [r3, #0]
   b65c8:	2b00      	cmp	r3, #0
   b65ca:	f000 84c7 	beq.w	b6f5c <loop+0x9b4>
      : _M_current(__i) { }
   b65ce:	f8df b164 	ldr.w	fp, [pc, #356]	; b6734 <loop+0x18c>
      Serial.printf("%i, ", i);
   b65d2:	4d48      	ldr	r5, [pc, #288]	; (b66f4 <loop+0x14c>)
    Serial.println("loop start");
   b65d4:	f003 fe6e 	bl	ba2b4 <_Z16_fetch_usbserialv>
   b65d8:	4947      	ldr	r1, [pc, #284]	; (b66f8 <loop+0x150>)
   b65da:	f003 f8f6 	bl	b97ca <_ZN5Print7printlnEPKc>
   b65de:	e9db 4600 	ldrd	r4, r6, [fp]
    for(int i : sequenceArr){
   b65e2:	42b4      	cmp	r4, r6
   b65e4:	d009      	beq.n	b65fa <loop+0x52>
   b65e6:	f854 2b04 	ldr.w	r2, [r4], #4
   b65ea:	9203      	str	r2, [sp, #12]
      Serial.printf("%i, ", i);
   b65ec:	f003 fe62 	bl	ba2b4 <_Z16_fetch_usbserialv>
   b65f0:	9a03      	ldr	r2, [sp, #12]
   b65f2:	4629      	mov	r1, r5
   b65f4:	f7fd ff20 	bl	b4438 <_ZN5Print6printfEPKcz>
	return *this;
   b65f8:	e7f3      	b.n	b65e2 <loop+0x3a>
    Serial.println();
   b65fa:	f003 fe5b 	bl	ba2b4 <_Z16_fetch_usbserialv>
   b65fe:	f003 f8d8 	bl	b97b2 <_ZN5Print7printlnEv>
    Serial.println(brownLineAdr);
   b6602:	f003 fe57 	bl	ba2b4 <_Z16_fetch_usbserialv>
   b6606:	4b3d      	ldr	r3, [pc, #244]	; (b66fc <loop+0x154>)
    Serial.println(greenLineAdr[0]);
   b6608:	4c3d      	ldr	r4, [pc, #244]	; (b6700 <loop+0x158>)
    Serial.println(brownLineAdr);
   b660a:	6819      	ldr	r1, [r3, #0]
   b660c:	220a      	movs	r2, #10
   b660e:	f7fd fdfc 	bl	b420a <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    Serial.println(greenLineAdr[0]);
   b6612:	f003 fe4f 	bl	ba2b4 <_Z16_fetch_usbserialv>
   b6616:	6821      	ldr	r1, [r4, #0]
   b6618:	220a      	movs	r2, #10
   b661a:	f7fd fdf6 	bl	b420a <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    Serial.println(greenLineAdr[1]);
   b661e:	f003 fe49 	bl	ba2b4 <_Z16_fetch_usbserialv>
   b6622:	6861      	ldr	r1, [r4, #4]
   b6624:	220a      	movs	r2, #10
   b6626:	f7fd fdf0 	bl	b420a <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    for(int j = 0; j < cities[cityIndex].railways.size(); j++){
   b662a:	f04f 0900 	mov.w	r9, #0
   b662e:	4f35      	ldr	r7, [pc, #212]	; (b6704 <loop+0x15c>)
	return *(this->_M_impl._M_start + __n);
   b6630:	4e35      	ldr	r6, [pc, #212]	; (b6708 <loop+0x160>)
   b6632:	683a      	ldr	r2, [r7, #0]
   b6634:	6831      	ldr	r1, [r6, #0]
   b6636:	2524      	movs	r5, #36	; 0x24
   b6638:	436a      	muls	r2, r5
   b663a:	188b      	adds	r3, r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b663c:	588a      	ldr	r2, [r1, r2]
   b663e:	685b      	ldr	r3, [r3, #4]
   b6640:	1a9b      	subs	r3, r3, r2
   b6642:	4a32      	ldr	r2, [pc, #200]	; (b670c <loop+0x164>)
   b6644:	109b      	asrs	r3, r3, #2
   b6646:	4353      	muls	r3, r2
   b6648:	454b      	cmp	r3, r9
   b664a:	f240 8439 	bls.w	b6ec0 <loop+0x918>
      delay(1000);
   b664e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b6652:	f001 fd3d 	bl	b80d0 <delay>
	StringSumHelper(const char *p) : String(p) {}
   b6656:	492e      	ldr	r1, [pc, #184]	; (b6710 <loop+0x168>)
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   b6658:	f8df 80dc 	ldr.w	r8, [pc, #220]	; b6738 <loop+0x190>
   b665c:	a81b      	add	r0, sp, #108	; 0x6c
   b665e:	f003 f95e 	bl	b991e <_ZN6StringC1EPK19__FlashStringHelper>
	return *(this->_M_impl._M_start + __n);
   b6662:	683b      	ldr	r3, [r7, #0]
   b6664:	6832      	ldr	r2, [r6, #0]
   b6666:	436b      	muls	r3, r5
   b6668:	246c      	movs	r4, #108	; 0x6c
      { return _M_dataplus._M_p; }
   b666a:	58d3      	ldr	r3, [r2, r3]
   b666c:	fb04 f409 	mul.w	r4, r4, r9
   b6670:	4423      	add	r3, r4
      request.path = "/loop-tracks/cta?lines=" + String(cities[cityIndex].railways[j].name.c_str());
   b6672:	a817      	add	r0, sp, #92	; 0x5c
   b6674:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b6676:	f003 f952 	bl	b991e <_ZN6StringC1EPK19__FlashStringHelper>
   b667a:	a917      	add	r1, sp, #92	; 0x5c
   b667c:	a81b      	add	r0, sp, #108	; 0x6c
   b667e:	f003 f9e3 	bl	b9a48 <_ZplRK15StringSumHelperRK6String>
   b6682:	4601      	mov	r1, r0
   b6684:	4823      	ldr	r0, [pc, #140]	; (b6714 <loop+0x16c>)
   b6686:	f003 f97b 	bl	b9980 <_ZN6StringaSERKS_>
   b668a:	a817      	add	r0, sp, #92	; 0x5c
   b668c:	f003 f8fc 	bl	b9888 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b6690:	a81b      	add	r0, sp, #108	; 0x6c
   b6692:	f003 f8f9 	bl	b9888 <_ZN6StringD1Ev>
   b6696:	4b20      	ldr	r3, [pc, #128]	; (b6718 <loop+0x170>)
   b6698:	4920      	ldr	r1, [pc, #128]	; (b671c <loop+0x174>)
   b669a:	4821      	ldr	r0, [pc, #132]	; (b6720 <loop+0x178>)
   b669c:	9300      	str	r3, [sp, #0]
   b669e:	4642      	mov	r2, r8
   b66a0:	4b20      	ldr	r3, [pc, #128]	; (b6724 <loop+0x17c>)
   b66a2:	f000 fca3 	bl	b6fec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
      Serial.println("parsing");
   b66a6:	f003 fe05 	bl	ba2b4 <_Z16_fetch_usbserialv>
   b66aa:	491f      	ldr	r1, [pc, #124]	; (b6728 <loop+0x180>)
   b66ac:	f003 f88d 	bl	b97ca <_ZN5Print7printlnEPKc>
      parser.clear();
   b66b0:	481e      	ldr	r0, [pc, #120]	; (b672c <loop+0x184>)
   b66b2:	f000 fe33 	bl	b731c <_ZN10JsonBuffer5clearEv>
	const char * c_str() const { return buffer; }
   b66b6:	f8d8 1004 	ldr.w	r1, [r8, #4]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b66ba:	9103      	str	r1, [sp, #12]
   b66bc:	4608      	mov	r0, r1
   b66be:	f005 f805 	bl	bb6cc <strlen>
   b66c2:	9903      	ldr	r1, [sp, #12]
   b66c4:	4602      	mov	r2, r0
   b66c6:	4819      	ldr	r0, [pc, #100]	; (b672c <loop+0x184>)
   b66c8:	f000 fe0b 	bl	b72e2 <_ZN10JsonBuffer7addDataEPKcj>
      if(!parser.parse()){
   b66cc:	4817      	ldr	r0, [pc, #92]	; (b672c <loop+0x184>)
   b66ce:	f001 fa15 	bl	b7afc <_ZN10JsonParser5parseEv>
   b66d2:	9003      	str	r0, [sp, #12]
   b66d4:	bba0      	cbnz	r0, b6740 <loop+0x198>
        Serial.println("parsing failed");
   b66d6:	f003 fded 	bl	ba2b4 <_Z16_fetch_usbserialv>
   b66da:	4915      	ldr	r1, [pc, #84]	; (b6730 <loop+0x188>)
}
   b66dc:	b037      	add	sp, #220	; 0xdc
   b66de:	ecbd 8b06 	vpop	{d8-d10}
   b66e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("parsing failed");
   b66e6:	f003 b870 	b.w	b97ca <_ZN5Print7printlnEPKc>
   b66ea:	bf00      	nop
   b66ec:	2003e718 	.word	0x2003e718
   b66f0:	2003e6b4 	.word	0x2003e6b4
   b66f4:	000bd97b 	.word	0x000bd97b
   b66f8:	000bd970 	.word	0x000bd970
   b66fc:	2003560c 	.word	0x2003560c
   b6700:	20035694 	.word	0x20035694
   b6704:	200352d0 	.word	0x200352d0
   b6708:	20035610 	.word	0x20035610
   b670c:	684bda13 	.word	0x684bda13
   b6710:	000bd980 	.word	0x000bd980
   b6714:	2003e65c 	.word	0x2003e65c
   b6718:	000bd998 	.word	0x000bd998
   b671c:	2003e634 	.word	0x2003e634
   b6720:	2003569c 	.word	0x2003569c
   b6724:	200352d4 	.word	0x200352d4
   b6728:	000bd99c 	.word	0x000bd99c
   b672c:	20037f24 	.word	0x20037f24
   b6730:	000bd9a4 	.word	0x000bd9a4
   b6734:	2003e69c 	.word	0x2003e69c
   b6738:	2003e680 	.word	0x2003e680
   b673c:	00000000 	.word	0x00000000
   b6740:	683b      	ldr	r3, [r7, #0]
   b6742:	6832      	ldr	r2, [r6, #0]
        float lat = train.key("latitude").valueFloat();
   b6744:	ed1f 9a03 	vldr	s18, [pc, #-12]	; b673c <loop+0x194>
   b6748:	435d      	muls	r5, r3
      Railway currentRailway = cities[cityIndex].railways[j];
   b674a:	a81b      	add	r0, sp, #108	; 0x6c
   b674c:	5951      	ldr	r1, [r2, r5]
   b674e:	4421      	add	r1, r4
   b6750:	f7ff fb90 	bl	b5e74 <_ZN7RailwayC1ERKS_>
      std::vector<Checkpoint> currentCheckpoints = currentRailway.checkpoints;
   b6754:	a91b      	add	r1, sp, #108	; 0x6c
   b6756:	a807      	add	r0, sp, #28
   b6758:	f7fe f8aa 	bl	b48b0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      int count = 0;
   b675c:	f04f 0800 	mov.w	r8, #0
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b6760:	49a3      	ldr	r1, [pc, #652]	; (b69f0 <loop+0x448>)
   b6762:	a80d      	add	r0, sp, #52	; 0x34
   b6764:	f000 fdf4 	bl	b7350 <_ZNK10JsonParser12getReferenceEv>
   b6768:	4aa2      	ldr	r2, [pc, #648]	; (b69f4 <loop+0x44c>)
   b676a:	a90d      	add	r1, sp, #52	; 0x34
   b676c:	a810      	add	r0, sp, #64	; 0x40
   b676e:	f000 ffbf 	bl	b76f0 <_ZNK13JsonReference3keyEPKc>
   b6772:	2200      	movs	r2, #0
   b6774:	a910      	add	r1, sp, #64	; 0x40
   b6776:	a813      	add	r0, sp, #76	; 0x4c
   b6778:	f000 fe8e 	bl	b7498 <_ZNK13JsonReference5indexEj>
   b677c:	4a9e      	ldr	r2, [pc, #632]	; (b69f8 <loop+0x450>)
   b677e:	a913      	add	r1, sp, #76	; 0x4c
   b6780:	a817      	add	r0, sp, #92	; 0x5c
   b6782:	f000 ffb5 	bl	b76f0 <_ZNK13JsonReference3keyEPKc>
   b6786:	4642      	mov	r2, r8
   b6788:	a917      	add	r1, sp, #92	; 0x5c
   b678a:	a80a      	add	r0, sp, #40	; 0x28
   b678c:	f000 fe84 	bl	b7498 <_ZNK13JsonReference5indexEj>
   b6790:	a817      	add	r0, sp, #92	; 0x5c
   b6792:	f000 fd55 	bl	b7240 <_ZN13JsonReferenceD1Ev>
   b6796:	a813      	add	r0, sp, #76	; 0x4c
   b6798:	f000 fd52 	bl	b7240 <_ZN13JsonReferenceD1Ev>
   b679c:	a810      	add	r0, sp, #64	; 0x40
   b679e:	f000 fd4f 	bl	b7240 <_ZN13JsonReferenceD1Ev>
   b67a2:	a80d      	add	r0, sp, #52	; 0x34
   b67a4:	f000 fd4c 	bl	b7240 <_ZN13JsonReferenceD1Ev>
        String nextStation = train.key("next_stop").valueString();
   b67a8:	4a94      	ldr	r2, [pc, #592]	; (b69fc <loop+0x454>)
   b67aa:	a90a      	add	r1, sp, #40	; 0x28
   b67ac:	a817      	add	r0, sp, #92	; 0x5c
   b67ae:	f000 ff9f 	bl	b76f0 <_ZNK13JsonReference3keyEPKc>
   b67b2:	a917      	add	r1, sp, #92	; 0x5c
   b67b4:	a813      	add	r0, sp, #76	; 0x4c
   b67b6:	f000 ffb5 	bl	b7724 <_ZNK13JsonReference11valueStringEv>
   b67ba:	a817      	add	r0, sp, #92	; 0x5c
   b67bc:	f000 fd40 	bl	b7240 <_ZN13JsonReferenceD1Ev>
        String destNm = train.key("destination").valueString();
   b67c0:	4a8f      	ldr	r2, [pc, #572]	; (b6a00 <loop+0x458>)
   b67c2:	a90a      	add	r1, sp, #40	; 0x28
   b67c4:	a810      	add	r0, sp, #64	; 0x40
   b67c6:	f000 ff93 	bl	b76f0 <_ZNK13JsonReference3keyEPKc>
   b67ca:	a910      	add	r1, sp, #64	; 0x40
   b67cc:	a817      	add	r0, sp, #92	; 0x5c
   b67ce:	f000 ffa9 	bl	b7724 <_ZNK13JsonReference11valueStringEv>
   b67d2:	a810      	add	r0, sp, #64	; 0x40
   b67d4:	f000 fd34 	bl	b7240 <_ZN13JsonReferenceD1Ev>
        int trainDir = train.key("direction").valueInt();
   b67d8:	4a8a      	ldr	r2, [pc, #552]	; (b6a04 <loop+0x45c>)
   b67da:	a90a      	add	r1, sp, #40	; 0x28
   b67dc:	a810      	add	r0, sp, #64	; 0x40
   b67de:	f000 ff87 	bl	b76f0 <_ZNK13JsonReference3keyEPKc>
   b67e2:	2100      	movs	r1, #0
   b67e4:	a810      	add	r0, sp, #64	; 0x40
   b67e6:	f000 fe71 	bl	b74cc <_ZNK13JsonReference8valueIntEi>
   b67ea:	4604      	mov	r4, r0
   b67ec:	a810      	add	r0, sp, #64	; 0x40
   b67ee:	f000 fd27 	bl	b7240 <_ZN13JsonReferenceD1Ev>
        float lat = train.key("latitude").valueFloat();
   b67f2:	4a85      	ldr	r2, [pc, #532]	; (b6a08 <loop+0x460>)
   b67f4:	a90a      	add	r1, sp, #40	; 0x28
   b67f6:	a810      	add	r0, sp, #64	; 0x40
   b67f8:	f000 ff7a 	bl	b76f0 <_ZNK13JsonReference3keyEPKc>
   b67fc:	a810      	add	r0, sp, #64	; 0x40
   b67fe:	eeb0 0a49 	vmov.f32	s0, s18
   b6802:	f000 fe6f 	bl	b74e4 <_ZNK13JsonReference10valueFloatEf>
   b6806:	a810      	add	r0, sp, #64	; 0x40
   b6808:	eef0 8a40 	vmov.f32	s17, s0
   b680c:	f000 fd18 	bl	b7240 <_ZN13JsonReferenceD1Ev>
        float lon = train.key("longitude").valueFloat();
   b6810:	4a7e      	ldr	r2, [pc, #504]	; (b6a0c <loop+0x464>)
   b6812:	a90a      	add	r1, sp, #40	; 0x28
   b6814:	a810      	add	r0, sp, #64	; 0x40
   b6816:	f000 ff6b 	bl	b76f0 <_ZNK13JsonReference3keyEPKc>
   b681a:	a810      	add	r0, sp, #64	; 0x40
   b681c:	eeb0 0a49 	vmov.f32	s0, s18
   b6820:	f000 fe60 	bl	b74e4 <_ZNK13JsonReference10valueFloatEf>
   b6824:	a810      	add	r0, sp, #64	; 0x40
   b6826:	eeb0 8a40 	vmov.f32	s16, s0
   b682a:	f000 fd09 	bl	b7240 <_ZN13JsonReferenceD1Ev>
        if(nextStation.length() <= 1){
   b682e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b6830:	2b01      	cmp	r3, #1
   b6832:	f200 8082 	bhi.w	b693a <loop+0x392>
          Serial.println("break");
   b6836:	f003 fd3d 	bl	ba2b4 <_Z16_fetch_usbserialv>
   b683a:	4975      	ldr	r1, [pc, #468]	; (b6a10 <loop+0x468>)
        if(cityIndex == 0 && (i == 2 || currentRailway.name == purpleLine.name)){
   b683c:	f8df 81e4 	ldr.w	r8, [pc, #484]	; b6a24 <loop+0x47c>
          Serial.println("break");
   b6840:	f002 ffc3 	bl	b97ca <_ZN5Print7printlnEPKc>
          break;
   b6844:	a817      	add	r0, sp, #92	; 0x5c
   b6846:	f003 f81f 	bl	b9888 <_ZN6StringD1Ev>
   b684a:	a813      	add	r0, sp, #76	; 0x4c
   b684c:	f003 f81c 	bl	b9888 <_ZN6StringD1Ev>
   b6850:	a80a      	add	r0, sp, #40	; 0x28
   b6852:	f000 fcf5 	bl	b7240 <_ZN13JsonReferenceD1Ev>
      for(int i = 0; i < 4; i++){
   b6856:	ea4f 06c9 	mov.w	r6, r9, lsl #3
   b685a:	2500      	movs	r5, #0
        if(cityIndex == 0 && (i == 2 || currentRailway.name == purpleLine.name)){
   b685c:	f8d8 3000 	ldr.w	r3, [r8]
   b6860:	2b00      	cmp	r3, #0
   b6862:	f040 826c 	bne.w	b6d3e <loop+0x796>
   b6866:	2d02      	cmp	r5, #2
   b6868:	d006      	beq.n	b6878 <loop+0x2d0>
   b686a:	496a      	ldr	r1, [pc, #424]	; (b6a14 <loop+0x46c>)
   b686c:	a827      	add	r0, sp, #156	; 0x9c
   b686e:	f7fe f843 	bl	b48f8 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6872:	2800      	cmp	r0, #0
   b6874:	f000 8253 	beq.w	b6d1e <loop+0x776>
          Wire.beginTransmission(brownLineAdr);
   b6878:	f003 fe6a 	bl	ba550 <_Z19__fetch_global_Wirev>
   b687c:	4b66      	ldr	r3, [pc, #408]	; (b6a18 <loop+0x470>)
   b687e:	6819      	ldr	r1, [r3, #0]
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b6880:	f002 fe16 	bl	b94b0 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(String(currentRailway.colors[0].c_str()));
   b6884:	f003 fe64 	bl	ba550 <_Z19__fetch_global_Wirev>
   b6888:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   b688a:	4604      	mov	r4, r0
   b688c:	6819      	ldr	r1, [r3, #0]
   b688e:	a817      	add	r0, sp, #92	; 0x5c
   b6890:	f003 f845 	bl	b991e <_ZN6StringC1EPK19__FlashStringHelper>
   b6894:	9917      	ldr	r1, [sp, #92]	; 0x5c
   b6896:	4620      	mov	r0, r4
   b6898:	f7fd fcea 	bl	b4270 <_ZN5Print5writeEPKc.isra.0>
   b689c:	a817      	add	r0, sp, #92	; 0x5c
   b689e:	f002 fff3 	bl	b9888 <_ZN6StringD1Ev>
        Wire.write(String(currentRailway.colors[1].c_str()));
   b68a2:	f003 fe55 	bl	ba550 <_Z19__fetch_global_Wirev>
   b68a6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   b68a8:	4604      	mov	r4, r0
   b68aa:	6999      	ldr	r1, [r3, #24]
   b68ac:	a817      	add	r0, sp, #92	; 0x5c
   b68ae:	f003 f836 	bl	b991e <_ZN6StringC1EPK19__FlashStringHelper>
   b68b2:	9917      	ldr	r1, [sp, #92]	; 0x5c
   b68b4:	4620      	mov	r0, r4
   b68b6:	f7fd fcdb 	bl	b4270 <_ZN5Print5writeEPKc.isra.0>
   b68ba:	a817      	add	r0, sp, #92	; 0x5c
   b68bc:	f002 ffe4 	bl	b9888 <_ZN6StringD1Ev>
        Wire.endTransmission();
   b68c0:	f003 fe46 	bl	ba550 <_Z19__fetch_global_Wirev>
   b68c4:	f002 fdfb 	bl	b94be <_ZN7TwoWire15endTransmissionEv>
        if(cityIndex == 0 && (i == 2 || currentRailway.name == purpleLine.name)){
   b68c8:	f8d8 3000 	ldr.w	r3, [r8]
   b68cc:	2b00      	cmp	r3, #0
   b68ce:	f040 824c 	bne.w	b6d6a <loop+0x7c2>
   b68d2:	2d02      	cmp	r5, #2
   b68d4:	d006      	beq.n	b68e4 <loop+0x33c>
   b68d6:	494f      	ldr	r1, [pc, #316]	; (b6a14 <loop+0x46c>)
   b68d8:	a827      	add	r0, sp, #156	; 0x9c
   b68da:	f7fe f80d 	bl	b48f8 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b68de:	2800      	cmp	r0, #0
   b68e0:	f000 8233 	beq.w	b6d4a <loop+0x7a2>
          Wire.beginTransmission(brownLineAdr);
   b68e4:	f003 fe34 	bl	ba550 <_Z19__fetch_global_Wirev>
   b68e8:	4b4b      	ldr	r3, [pc, #300]	; (b6a18 <loop+0x470>)
   b68ea:	6819      	ldr	r1, [r3, #0]
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b68ec:	f002 fde0 	bl	b94b0 <_ZN7TwoWire17beginTransmissionEi>
        if(cityIndex == 0){
   b68f0:	f8d8 4000 	ldr.w	r4, [r8]
   b68f4:	2c00      	cmp	r4, #0
   b68f6:	f040 82ec 	bne.w	b6ed2 <loop+0x92a>
          if(i == 2){
   b68fa:	2d02      	cmp	r5, #2
   b68fc:	f040 8268 	bne.w	b6dd0 <loop+0x828>
            if(currentRailway.name == greenLine.name){
   b6900:	4946      	ldr	r1, [pc, #280]	; (b6a1c <loop+0x474>)
   b6902:	4f47      	ldr	r7, [pc, #284]	; (b6a20 <loop+0x478>)
   b6904:	a827      	add	r0, sp, #156	; 0x9c
   b6906:	f7fd fff7 	bl	b48f8 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b690a:	2800      	cmp	r0, #0
   b690c:	f000 8233 	beq.w	b6d76 <loop+0x7ce>
   b6910:	6a79      	ldr	r1, [r7, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6912:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   b6916:	1a9b      	subs	r3, r3, r2
   b6918:	109a      	asrs	r2, r3, #2
   b691a:	e9d1 1300 	ldrd	r1, r3, [r1]
   b691e:	1a5b      	subs	r3, r3, r1
   b6920:	109b      	asrs	r3, r3, #2
              for(int j = 0; j < brownLine.outputs[0].size() + (brownLine.outputs[2].size() / 2); j++){
   b6922:	eb03 0352 	add.w	r3, r3, r2, lsr #1
   b6926:	42a3      	cmp	r3, r4
   b6928:	f240 82d3 	bls.w	b6ed2 <loop+0x92a>
                Wire.write('0');
   b692c:	f003 fe10 	bl	ba550 <_Z19__fetch_global_Wirev>
   b6930:	2130      	movs	r1, #48	; 0x30
   b6932:	f7fd fc99 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
              for(int j = 0; j < brownLine.outputs[0].size() + (brownLine.outputs[2].size() / 2); j++){
   b6936:	3401      	adds	r4, #1
   b6938:	e7ea      	b.n	b6910 <loop+0x368>
   b693a:	e9dd 3507 	ldrd	r3, r5, [sp, #28]
   b693e:	1aed      	subs	r5, r5, r3
   b6940:	10ed      	asrs	r5, r5, #3
        for(int i = 0; i < checkpointCount; i++){
   b6942:	f04f 0a00 	mov.w	sl, #0
   b6946:	45aa      	cmp	sl, r5
	return *(this->_M_impl._M_start + __n);
   b6948:	9907      	ldr	r1, [sp, #28]
   b694a:	da3b      	bge.n	b69c4 <loop+0x41c>
   b694c:	eb01 06ca 	add.w	r6, r1, sl, lsl #3
    }

    float getDistance(float trainLat, float trainLon){
      return sqrt(pow((trainLat - lat), 2) + pow((trainLon - lon), 2));
   b6950:	edd6 7a00 	vldr	s15, [r6]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b6954:	ee78 7ae7 	vsub.f32	s15, s17, s15
   b6958:	ee17 0a90 	vmov	r0, s15
   b695c:	f004 fa96 	bl	bae8c <__aeabi_f2d>
   b6960:	edd6 7a01 	vldr	s15, [r6, #4]
   b6964:	ee78 7a67 	vsub.f32	s15, s16, s15
   b6968:	4602      	mov	r2, r0
   b696a:	460b      	mov	r3, r1
   b696c:	ee17 0a90 	vmov	r0, s15
   b6970:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b6974:	f004 fa8a 	bl	bae8c <__aeabi_f2d>
   b6978:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b697c:	ec41 0b1a 	vmov	d10, r0, r1
   b6980:	4610      	mov	r0, r2
   b6982:	4619      	mov	r1, r3
   b6984:	f004 fada 	bl	baf3c <__aeabi_dmul>
   b6988:	ec53 2b1a 	vmov	r2, r3, d10
   b698c:	4606      	mov	r6, r0
   b698e:	460f      	mov	r7, r1
   b6990:	ee1a 0a10 	vmov	r0, s20
   b6994:	4619      	mov	r1, r3
   b6996:	f004 fad1 	bl	baf3c <__aeabi_dmul>
   b699a:	4602      	mov	r2, r0
   b699c:	460b      	mov	r3, r1
   b699e:	4630      	mov	r0, r6
   b69a0:	4639      	mov	r1, r7
   b69a2:	f004 f915 	bl	babd0 <__adddf3>
   b69a6:	ec41 0b10 	vmov	d0, r0, r1
   b69aa:	f004 f805 	bl	ba9b8 <sqrt>
          currentRailway.distances[i] = currentCheckpoints[i].getDistance(lat, lon);
   b69ae:	9e1e      	ldr	r6, [sp, #120]	; 0x78
   b69b0:	ec51 0b10 	vmov	r0, r1, d0
   b69b4:	f004 fd92 	bl	bb4dc <__aeabi_d2f>
   b69b8:	eb06 068a 	add.w	r6, r6, sl, lsl #2
        for(int i = 0; i < checkpointCount; i++){
   b69bc:	f10a 0a01 	add.w	sl, sl, #1
   b69c0:	6030      	str	r0, [r6, #0]
   b69c2:	e7c0      	b.n	b6946 <loop+0x39e>
      : _M_current(__i) { }
   b69c4:	e9dd 761e 	ldrd	r7, r6, [sp, #120]	; 0x78
    _GLIBCXX14_CONSTEXPR
    _ForwardIterator
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
		  _Compare __comp)
    {
      if (__first == __last)
   b69c8:	42b7      	cmp	r7, r6
   b69ca:	d02f      	beq.n	b6a2c <loop+0x484>
   b69cc:	1d3a      	adds	r2, r7, #4
   b69ce:	463b      	mov	r3, r7
	return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
   b69d0:	4296      	cmp	r6, r2
	++_M_current;
   b69d2:	4610      	mov	r0, r2
   b69d4:	d02b      	beq.n	b6a2e <loop+0x486>
	if (__comp(__first, __result))
   b69d6:	edd3 7a00 	vldr	s15, [r3]
   b69da:	ed90 7a00 	vldr	s14, [r0]
   b69de:	eeb4 7a67 	vcmp.f32	s14, s15
   b69e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b69e6:	f102 0204 	add.w	r2, r2, #4
   b69ea:	bf48      	it	mi
   b69ec:	4603      	movmi	r3, r0
   b69ee:	e7ef      	b.n	b69d0 <loop+0x428>
   b69f0:	20037f24 	.word	0x20037f24
   b69f4:	000bd9b3 	.word	0x000bd9b3
   b69f8:	000bd9b9 	.word	0x000bd9b9
   b69fc:	000bd9c0 	.word	0x000bd9c0
   b6a00:	000bd9ca 	.word	0x000bd9ca
   b6a04:	000bd9d6 	.word	0x000bd9d6
   b6a08:	000bd9e0 	.word	0x000bd9e0
   b6a0c:	000bd9e9 	.word	0x000bd9e9
   b6a10:	000bd9f3 	.word	0x000bd9f3
   b6a14:	2003e58c 	.word	0x2003e58c
   b6a18:	2003560c 	.word	0x2003560c
   b6a1c:	20035658 	.word	0x20035658
   b6a20:	200355a0 	.word	0x200355a0
   b6a24:	200352d0 	.word	0x200352d0
   b6a28:	7dcccccc 	.word	0x7dcccccc
   b6a2c:	463b      	mov	r3, r7
        if(closestIndex == currentRailway.tripleIndex){
   b6a2e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b6a30:	1bdb      	subs	r3, r3, r7
   b6a32:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
   b6a36:	ea4f 00a3 	mov.w	r0, r3, asr #2
          closestIndex = currentRailway.loopIndex;
   b6a3a:	bf08      	it	eq
   b6a3c:	9831      	ldreq	r0, [sp, #196]	; 0xc4
   b6a3e:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
        x1 = currentCheckpoints[closestIndex].lat;
   b6a42:	edd3 7a00 	vldr	s15, [r3]
        y1 = currentCheckpoints[closestIndex].lon;
   b6a46:	edd3 6a01 	vldr	s13, [r3, #4]
        if(currentCheckpoints[closestIndex].lat > lat){
   b6a4a:	eef4 8ae7 	vcmpe.f32	s17, s15
   b6a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          slope = (y1 - y) / (x1 - x);
   b6a52:	ee77 5ae8 	vsub.f32	s11, s15, s17
          slope = (y - y1) / (x - x1);
   b6a56:	bf55      	itete	pl
   b6a58:	ee38 6a66 	vsubpl.f32	s12, s16, s13
          slope = (y1 - y) / (x1 - x);
   b6a5c:	ee76 7ac8 	vsubmi.f32	s15, s13, s16
          slope = (y - y1) / (x - x1);
   b6a60:	ee78 7ae7 	vsubpl.f32	s15, s17, s15
          slope = (y1 - y) / (x1 - x);
   b6a64:	ee87 7aa5 	vdivmi.f32	s14, s15, s11
   b6a68:	ea4f 06c0 	mov.w	r6, r0, lsl #3
          slope = (y - y1) / (x - x1);
   b6a6c:	bf58      	it	pl
   b6a6e:	ee86 7a27 	vdivpl.f32	s14, s12, s15
        if(slope == 0){
   b6a72:	ed5f 7a13 	vldr	s15, [pc, #-76]	; b6a28 <loop+0x480>
   b6a76:	eeb5 7a40 	vcmp.f32	s14, #0.0
   b6a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6a7e:	d00a      	beq.n	b6a96 <loop+0x4ee>
        }else if(slope >= __FLT_MAX__ / 10){
   b6a80:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b6a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          perpendicularSlope = -1 / slope;
   b6a88:	bfba      	itte	lt
   b6a8a:	eebf 6a00 	vmovlt.f32	s12, #240	; 0xbf800000 -1.0
   b6a8e:	eec6 7a07 	vdivlt.f32	s15, s12, s14
          perpendicularSlope = 0;
   b6a92:	eef0 7a49 	vmovge.f32	s15, s18
          nearestSide = (perpendicularSlope * (currentCheckpoints[closestIndex].lat - x) + y) > currentCheckpoints[closestIndex].lon;
   b6a96:	eeb0 7a48 	vmov.f32	s14, s16
   b6a9a:	eea7 7aa5 	vfma.f32	s14, s15, s11
   b6a9e:	eef4 6ac7 	vcmpe.f32	s13, s14
   b6aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6aa6:	bf4c      	ite	mi
   b6aa8:	f04f 0c01 	movmi.w	ip, #1
   b6aac:	f04f 0c00 	movpl.w	ip, #0
        if(closestIndex == 0){
   b6ab0:	2800      	cmp	r0, #0
   b6ab2:	d169      	bne.n	b6b88 <loop+0x5e0>
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b6ab4:	ed91 7a02 	vldr	s14, [r1, #8]
          if(currentRailway.loopIndex == closestIndex){
   b6ab8:	9e31      	ldr	r6, [sp, #196]	; 0xc4
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b6aba:	ee37 7a68 	vsub.f32	s14, s14, s17
   b6abe:	eef0 6a48 	vmov.f32	s13, s16
   b6ac2:	eee7 6a27 	vfma.f32	s13, s14, s15
   b6ac6:	ed91 7a03 	vldr	s14, [r1, #12]
   b6aca:	eef4 6ac7 	vcmpe.f32	s13, s14
   b6ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6ad2:	bfcc      	ite	gt
   b6ad4:	2501      	movgt	r5, #1
   b6ad6:	2500      	movle	r5, #0
          if(currentRailway.loopIndex == closestIndex){
   b6ad8:	b9ee      	cbnz	r6, b6b16 <loop+0x56e>
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b6ada:	1e53      	subs	r3, r2, #1
   b6adc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
            if(nearestSide != pointSide){
   b6ae0:	4565      	cmp	r5, ip
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b6ae2:	ed91 0a00 	vldr	s0, [r1]
   b6ae6:	ed91 7a01 	vldr	s14, [r1, #4]
            if(nearestSide != pointSide){
   b6aea:	f040 8093 	bne.w	b6c14 <loop+0x66c>
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b6aee:	ee70 8a68 	vsub.f32	s17, s0, s17
   b6af2:	eea8 8aa7 	vfma.f32	s16, s17, s15
   b6af6:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b6afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            }else if(nearestSide != loopPointSide){
   b6afe:	bfcc      	ite	gt
   b6b00:	2101      	movgt	r1, #1
   b6b02:	2100      	movle	r1, #0
   b6b04:	42a9      	cmp	r1, r5
              }else if(nearestSide != loopPointSide){
   b6b06:	d100      	bne.n	b6b0a <loop+0x562>
                secondClosestIndex = currentRailway.tripleIndex + 1;
   b6b08:	1c53      	adds	r3, r2, #1
          if(closestIndex < secondClosestIndex){
   b6b0a:	429a      	cmp	r2, r3
   b6b0c:	f2c0 8084 	blt.w	b6c18 <loop+0x670>
   b6b10:	4611      	mov	r1, r2
   b6b12:	461e      	mov	r6, r3
   b6b14:	e005      	b.n	b6b22 <loop+0x57a>
            if(pointSide == nearestSide){
   b6b16:	4565      	cmp	r5, ip
   b6b18:	d06c      	beq.n	b6bf4 <loop+0x64c>
   b6b1a:	4602      	mov	r2, r0
   b6b1c:	4606      	mov	r6, r0
   b6b1e:	2301      	movs	r3, #1
   b6b20:	4619      	mov	r1, r3
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b6b22:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   b6b26:	eb07 0086 	add.w	r0, r7, r6, lsl #2
   b6b2a:	ed90 7a00 	vldr	s14, [r0]
   b6b2e:	edd1 7a00 	vldr	s15, [r1]
          segmentPos *= currentRailway.scalers[lowerIndex];
   b6b32:	9921      	ldr	r1, [sp, #132]	; 0x84
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b6b34:	ee77 7a27 	vadd.f32	s15, s14, s15
          segmentPos *= currentRailway.scalers[lowerIndex];
   b6b38:	eb01 0186 	add.w	r1, r1, r6, lsl #2
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b6b3c:	eec7 6a27 	vdiv.f32	s13, s14, s15
          segmentPos *= currentRailway.scalers[lowerIndex];
   b6b40:	ed91 8a00 	vldr	s16, [r1]
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b6b44:	9935      	ldr	r1, [sp, #212]	; 0xd4
          segmentPos *= currentRailway.scalers[lowerIndex];
   b6b46:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b6b4a:	4291      	cmp	r1, r2
          segmentPos *= currentRailway.scalers[lowerIndex];
   b6b4c:	ee28 8a26 	vmul.f32	s16, s16, s13
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b6b50:	db65      	blt.n	b6c1e <loop+0x676>
   b6b52:	9d34      	ldr	r5, [sp, #208]	; 0xd0
   b6b54:	4295      	cmp	r5, r2
   b6b56:	dc62      	bgt.n	b6c1e <loop+0x676>
   b6b58:	4299      	cmp	r1, r3
   b6b5a:	db60      	blt.n	b6c1e <loop+0x676>
   b6b5c:	429d      	cmp	r5, r3
   b6b5e:	dc5e      	bgt.n	b6c1e <loop+0x676>
            Serial.println("in green");
   b6b60:	f003 fba8 	bl	ba2b4 <_Z16_fetch_usbserialv>
   b6b64:	49a8      	ldr	r1, [pc, #672]	; (b6e08 <loop+0x860>)
   b6b66:	f002 fe30 	bl	b97ca <_ZN5Print7printlnEPKc>
            pcbSegment = 3;
   b6b6a:	2703      	movs	r7, #3
        bool inLoop = false;
   b6b6c:	2300      	movs	r3, #0
   b6b6e:	9a21      	ldr	r2, [sp, #132]	; 0x84
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b6b70:	42ae      	cmp	r6, r5
   b6b72:	dd69      	ble.n	b6c48 <loop+0x6a0>
            segmentPos += currentRailway.scalers[i];
   b6b74:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
   b6b78:	ee07 1a90 	vmov	s15, r1
   b6b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b6b80:	3501      	adds	r5, #1
            segmentPos += currentRailway.scalers[i];
   b6b82:	ee38 8a27 	vadd.f32	s16, s16, s15
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b6b86:	e7f3      	b.n	b6b70 <loop+0x5c8>
   b6b88:	3e08      	subs	r6, #8
   b6b8a:	440e      	add	r6, r1
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b6b8c:	ed96 7a00 	vldr	s14, [r6]
   b6b90:	ee37 7a68 	vsub.f32	s14, s14, s17
   b6b94:	eef0 6a48 	vmov.f32	s13, s16
   b6b98:	eee7 6a27 	vfma.f32	s13, s14, s15
          if(closestIndex == checkpointCount - 1){
   b6b9c:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b6ba0:	1e43      	subs	r3, r0, #1
   b6ba2:	ed96 7a01 	vldr	s14, [r6, #4]
   b6ba6:	eef4 6ac7 	vcmpe.f32	s13, s14
   b6baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6bae:	bfcc      	ite	gt
   b6bb0:	2601      	movgt	r6, #1
   b6bb2:	2600      	movle	r6, #0
          if(closestIndex == checkpointCount - 1){
   b6bb4:	4586      	cmp	lr, r0
   b6bb6:	d129      	bne.n	b6c0c <loop+0x664>
            if(closestIndex == currentRailway.loopIndex){
   b6bb8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
   b6bba:	4283      	cmp	r3, r0
   b6bbc:	d118      	bne.n	b6bf0 <loop+0x648>
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b6bbe:	1e53      	subs	r3, r2, #1
   b6bc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
              if(nearestSide != pointSide){
   b6bc4:	4566      	cmp	r6, ip
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b6bc6:	ed91 0a00 	vldr	s0, [r1]
   b6bca:	ed91 7a01 	vldr	s14, [r1, #4]
              if(nearestSide != pointSide){
   b6bce:	d002      	beq.n	b6bd6 <loop+0x62e>
                secondClosestIndex = checkpointCount - 2;
   b6bd0:	1eab      	subs	r3, r5, #2
   b6bd2:	4602      	mov	r2, r0
   b6bd4:	e799      	b.n	b6b0a <loop+0x562>
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b6bd6:	ee70 8a68 	vsub.f32	s17, s0, s17
   b6bda:	eea8 8aa7 	vfma.f32	s16, s17, s15
   b6bde:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b6be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
              }else if(nearestSide != loopPointSide){
   b6be6:	bfcc      	ite	gt
   b6be8:	2101      	movgt	r1, #1
   b6bea:	2100      	movle	r1, #0
   b6bec:	42b1      	cmp	r1, r6
   b6bee:	e78a      	b.n	b6b06 <loop+0x55e>
              if(pointSide == nearestSide){
   b6bf0:	4566      	cmp	r6, ip
   b6bf2:	d1ed      	bne.n	b6bd0 <loop+0x628>
        String destNm = train.key("destination").valueString();
   b6bf4:	a817      	add	r0, sp, #92	; 0x5c
   b6bf6:	f002 fe47 	bl	b9888 <_ZN6StringD1Ev>
        String nextStation = train.key("next_stop").valueString();
   b6bfa:	a813      	add	r0, sp, #76	; 0x4c
   b6bfc:	f002 fe44 	bl	b9888 <_ZN6StringD1Ev>
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b6c00:	a80a      	add	r0, sp, #40	; 0x28
        count++;
   b6c02:	f108 0801 	add.w	r8, r8, #1
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b6c06:	f000 fb1b 	bl	b7240 <_ZN13JsonReferenceD1Ev>
   b6c0a:	e5a9      	b.n	b6760 <loop+0x1b8>
            if(pointSide == nearestSide){
   b6c0c:	4566      	cmp	r6, ip
   b6c0e:	d1e0      	bne.n	b6bd2 <loop+0x62a>
              secondClosestIndex = closestIndex + 1;
   b6c10:	1c43      	adds	r3, r0, #1
   b6c12:	e7de      	b.n	b6bd2 <loop+0x62a>
   b6c14:	4602      	mov	r2, r0
   b6c16:	e782      	b.n	b6b1e <loop+0x576>
   b6c18:	4619      	mov	r1, r3
   b6c1a:	4616      	mov	r6, r2
   b6c1c:	e781      	b.n	b6b22 <loop+0x57a>
          else if(closestIndex < currentRailway.lowerLoopBound || secondClosestIndex < currentRailway.lowerLoopBound){
   b6c1e:	9932      	ldr	r1, [sp, #200]	; 0xc8
   b6c20:	4291      	cmp	r1, r2
   b6c22:	dc0a      	bgt.n	b6c3a <loop+0x692>
   b6c24:	4299      	cmp	r1, r3
   b6c26:	dc08      	bgt.n	b6c3a <loop+0x692>
          else if(closestIndex > currentRailway.upperLoopBound || secondClosestIndex > currentRailway.upperLoopBound){
   b6c28:	9d33      	ldr	r5, [sp, #204]	; 0xcc
   b6c2a:	4295      	cmp	r5, r2
   b6c2c:	db09      	blt.n	b6c42 <loop+0x69a>
   b6c2e:	429d      	cmp	r5, r3
   b6c30:	db07      	blt.n	b6c42 <loop+0x69a>
            inLoop = true;
   b6c32:	9b03      	ldr	r3, [sp, #12]
          else if(closestIndex > currentRailway.upperLoopBound || secondClosestIndex > currentRailway.upperLoopBound){
   b6c34:	460d      	mov	r5, r1
            pcbSegment = 2;
   b6c36:	2702      	movs	r7, #2
   b6c38:	e799      	b.n	b6b6e <loop+0x5c6>
            lowerScaleBound = 0;
   b6c3a:	2500      	movs	r5, #0
        bool inLoop = false;
   b6c3c:	462b      	mov	r3, r5
            pcbSegment = 0;
   b6c3e:	462f      	mov	r7, r5
   b6c40:	e795      	b.n	b6b6e <loop+0x5c6>
        bool inLoop = false;
   b6c42:	2300      	movs	r3, #0
            pcbSegment = 1;
   b6c44:	2701      	movs	r7, #1
   b6c46:	e792      	b.n	b6b6e <loop+0x5c6>
   b6c48:	9d24      	ldr	r5, [sp, #144]	; 0x90
          if(inLoop){
   b6c4a:	2b00      	cmp	r3, #0
   b6c4c:	d043      	beq.n	b6cd6 <loop+0x72e>
            if(currentRailway.name == pinkLine.name){
   b6c4e:	496f      	ldr	r1, [pc, #444]	; (b6e0c <loop+0x864>)
   b6c50:	a827      	add	r0, sp, #156	; 0x9c
   b6c52:	f7fd fe51 	bl	b48f8 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6c56:	b1f0      	cbz	r0, b6c96 <loop+0x6ee>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6c58:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b6c5c:	1a9b      	subs	r3, r3, r2
   b6c5e:	109b      	asrs	r3, r3, #2
              segmentPos = (float)currentRailway.outputs[2].size() - segmentPos;
   b6c60:	ee07 3a90 	vmov	s15, r3
   b6c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b6c68:	ee37 8ac8 	vsub.f32	s16, s15, s16
          if(pcbSegment == 1 && currentRailway.name == greenLine.name){
   b6c6c:	2f01      	cmp	r7, #1
   b6c6e:	d140      	bne.n	b6cf2 <loop+0x74a>
   b6c70:	4967      	ldr	r1, [pc, #412]	; (b6e10 <loop+0x868>)
   b6c72:	a827      	add	r0, sp, #156	; 0x9c
   b6c74:	f7fd fe40 	bl	b48f8 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6c78:	2800      	cmp	r0, #0
   b6c7a:	d042      	beq.n	b6d02 <loop+0x75a>
   b6c7c:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   b6c80:	1a9b      	subs	r3, r3, r2
   b6c82:	109b      	asrs	r3, r3, #2
            segmentPos = (float)currentRailway.outputs[1].size() - segmentPos;
   b6c84:	ee07 3a90 	vmov	s15, r3
   b6c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b6c8c:	ee37 8ac8 	vsub.f32	s16, s15, s16
            trainDir = 6 - trainDir;
   b6c90:	f1c4 0406 	rsb	r4, r4, #6
   b6c94:	e035      	b.n	b6d02 <loop+0x75a>
            }else if(currentRailway.name == orangeLine.name){
   b6c96:	495f      	ldr	r1, [pc, #380]	; (b6e14 <loop+0x86c>)
   b6c98:	a827      	add	r0, sp, #156	; 0x9c
   b6c9a:	f7fd fe2d 	bl	b48f8 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6c9e:	2800      	cmp	r0, #0
   b6ca0:	d0e4      	beq.n	b6c6c <loop+0x6c4>
	return *(this->_M_impl._M_start + __n);
   b6ca2:	4b5d      	ldr	r3, [pc, #372]	; (b6e18 <loop+0x870>)
   b6ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6ca6:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
   b6caa:	1ad2      	subs	r2, r2, r3
   b6cac:	1092      	asrs	r2, r2, #2
              segmentPos = (int)(segmentPos + orangeLine.outputs[2].size() / 2) % orangeLine.outputs[2].size();
   b6cae:	0853      	lsrs	r3, r2, #1
   b6cb0:	ee07 3a90 	vmov	s15, r3
   b6cb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b6cb8:	ee37 8a88 	vadd.f32	s16, s15, s16
   b6cbc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   b6cc0:	ee17 3a90 	vmov	r3, s15
   b6cc4:	fbb3 f1f2 	udiv	r1, r3, r2
   b6cc8:	fb02 3311 	mls	r3, r2, r1, r3
   b6ccc:	ee08 3a10 	vmov	s16, r3
   b6cd0:	eeb8 8a48 	vcvt.f32.u32	s16, s16
   b6cd4:	e7ca      	b.n	b6c6c <loop+0x6c4>
            if(currentRailway.name == brownLine.name || currentRailway.name == purpleLine.name){
   b6cd6:	4951      	ldr	r1, [pc, #324]	; (b6e1c <loop+0x874>)
   b6cd8:	a827      	add	r0, sp, #156	; 0x9c
   b6cda:	f7fd fe0d 	bl	b48f8 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6cde:	b928      	cbnz	r0, b6cec <loop+0x744>
   b6ce0:	494f      	ldr	r1, [pc, #316]	; (b6e20 <loop+0x878>)
   b6ce2:	a827      	add	r0, sp, #156	; 0x9c
   b6ce4:	f7fd fe08 	bl	b48f8 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6ce8:	2800      	cmp	r0, #0
   b6cea:	d0bf      	beq.n	b6c6c <loop+0x6c4>
              trainDir = 6 - trainDir;
   b6cec:	f1c4 0406 	rsb	r4, r4, #6
   b6cf0:	e7bc      	b.n	b6c6c <loop+0x6c4>
          if(pcbSegment == 3 && currentRailway.name == pinkLine.name){
   b6cf2:	2f03      	cmp	r7, #3
   b6cf4:	d105      	bne.n	b6d02 <loop+0x75a>
   b6cf6:	4945      	ldr	r1, [pc, #276]	; (b6e0c <loop+0x864>)
   b6cf8:	a827      	add	r0, sp, #156	; 0x9c
   b6cfa:	f7fd fdfd 	bl	b48f8 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6cfe:	2800      	cmp	r0, #0
   b6d00:	d1c6      	bne.n	b6c90 <loop+0x6e8>
  { return __builtin_floorf(__x); }
   b6d02:	eeb0 0a48 	vmov.f32	s0, s16
   b6d06:	f003 fe11 	bl	ba92c <floorf>
	return *(this->_M_impl._M_start + __n);
   b6d0a:	230c      	movs	r3, #12
          currentRailway.outputs[pcbSegment][(int)floor(segmentPos)] = trainDir;
   b6d0c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b6d10:	435f      	muls	r7, r3
   b6d12:	ee10 2a10 	vmov	r2, s0
   b6d16:	59eb      	ldr	r3, [r5, r7]
   b6d18:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b6d1c:	e76a      	b.n	b6bf4 <loop+0x64c>
        }else if(cityIndex == 0 && i == 3){
   b6d1e:	2d03      	cmp	r5, #3
   b6d20:	d10d      	bne.n	b6d3e <loop+0x796>
          if(currentRailway.name == orangeLine.name){
   b6d22:	493c      	ldr	r1, [pc, #240]	; (b6e14 <loop+0x86c>)
   b6d24:	4c3f      	ldr	r4, [pc, #252]	; (b6e24 <loop+0x87c>)
   b6d26:	a827      	add	r0, sp, #156	; 0x9c
   b6d28:	f7fd fde6 	bl	b48f8 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6d2c:	b118      	cbz	r0, b6d36 <loop+0x78e>
            Wire.beginTransmission(greenLineAdr[0]);
   b6d2e:	f003 fc0f 	bl	ba550 <_Z19__fetch_global_Wirev>
   b6d32:	6821      	ldr	r1, [r4, #0]
   b6d34:	e5a4      	b.n	b6880 <loop+0x2d8>
            Wire.beginTransmission(greenLineAdr[1]);
   b6d36:	f003 fc0b 	bl	ba550 <_Z19__fetch_global_Wirev>
   b6d3a:	6861      	ldr	r1, [r4, #4]
   b6d3c:	e5a0      	b.n	b6880 <loop+0x2d8>
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b6d3e:	f003 fc07 	bl	ba550 <_Z19__fetch_global_Wirev>
   b6d42:	f8db 3000 	ldr.w	r3, [fp]
   b6d46:	5999      	ldr	r1, [r3, r6]
   b6d48:	e59a      	b.n	b6880 <loop+0x2d8>
        }else if(cityIndex == 0 && i == 3){
   b6d4a:	2d03      	cmp	r5, #3
   b6d4c:	d10d      	bne.n	b6d6a <loop+0x7c2>
          if(currentRailway.name == orangeLine.name){
   b6d4e:	4931      	ldr	r1, [pc, #196]	; (b6e14 <loop+0x86c>)
   b6d50:	4c34      	ldr	r4, [pc, #208]	; (b6e24 <loop+0x87c>)
   b6d52:	a827      	add	r0, sp, #156	; 0x9c
   b6d54:	f7fd fdd0 	bl	b48f8 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6d58:	b118      	cbz	r0, b6d62 <loop+0x7ba>
            Wire.beginTransmission(greenLineAdr[0]);
   b6d5a:	f003 fbf9 	bl	ba550 <_Z19__fetch_global_Wirev>
   b6d5e:	6821      	ldr	r1, [r4, #0]
   b6d60:	e5c4      	b.n	b68ec <loop+0x344>
            Wire.beginTransmission(greenLineAdr[1]);
   b6d62:	f003 fbf5 	bl	ba550 <_Z19__fetch_global_Wirev>
   b6d66:	6861      	ldr	r1, [r4, #4]
   b6d68:	e5c0      	b.n	b68ec <loop+0x344>
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b6d6a:	f003 fbf1 	bl	ba550 <_Z19__fetch_global_Wirev>
   b6d6e:	f8db 3000 	ldr.w	r3, [fp]
   b6d72:	5999      	ldr	r1, [r3, r6]
   b6d74:	e5ba      	b.n	b68ec <loop+0x344>
            else if(currentRailway.name == brownLine.name || currentRailway.name == purpleLine.name){
   b6d76:	f107 0130 	add.w	r1, r7, #48	; 0x30
   b6d7a:	a827      	add	r0, sp, #156	; 0x9c
   b6d7c:	f7fd fdbc 	bl	b48f8 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6d80:	b920      	cbnz	r0, b6d8c <loop+0x7e4>
   b6d82:	4927      	ldr	r1, [pc, #156]	; (b6e20 <loop+0x878>)
   b6d84:	a827      	add	r0, sp, #156	; 0x9c
   b6d86:	f7fd fdb7 	bl	b48f8 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6d8a:	b190      	cbz	r0, b6db2 <loop+0x80a>
   b6d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6d8e:	e9d2 2300 	ldrd	r2, r3, [r2]
   b6d92:	1a9b      	subs	r3, r3, r2
              for(int j = 0; j < brownLine.outputs[0].size(); j++){
   b6d94:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b6d98:	f080 809b 	bcs.w	b6ed2 <loop+0x92a>
                Wire.write((char)currentRailway.outputs[0][j] + '0');
   b6d9c:	f003 fbd8 	bl	ba550 <_Z19__fetch_global_Wirev>
	return *(this->_M_impl._M_start + __n);
   b6da0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b6da2:	681b      	ldr	r3, [r3, #0]
   b6da4:	f813 1024 	ldrb.w	r1, [r3, r4, lsl #2]
   b6da8:	3130      	adds	r1, #48	; 0x30
   b6daa:	f7fd fa5d 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
              for(int j = 0; j < brownLine.outputs[0].size(); j++){
   b6dae:	3401      	adds	r4, #1
   b6db0:	e7ec      	b.n	b6d8c <loop+0x7e4>
   b6db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6db4:	e9d2 2300 	ldrd	r2, r3, [r2]
   b6db8:	1a9b      	subs	r3, r3, r2
              for(int j = 0; j < brownLine.outputs[0].size(); j++){
   b6dba:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b6dbe:	f080 8088 	bcs.w	b6ed2 <loop+0x92a>
                Wire.write('0');
   b6dc2:	f003 fbc5 	bl	ba550 <_Z19__fetch_global_Wirev>
   b6dc6:	2130      	movs	r1, #48	; 0x30
   b6dc8:	f7fd fa4e 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
              for(int j = 0; j < brownLine.outputs[0].size(); j++){
   b6dcc:	3401      	adds	r4, #1
   b6dce:	e7f0      	b.n	b6db2 <loop+0x80a>
          if(i == 1 && (currentRailway.name == brownLine.name || currentRailway.name == purpleLine.name)){
   b6dd0:	2d01      	cmp	r5, #1
   b6dd2:	f040 80a4 	bne.w	b6f1e <loop+0x976>
   b6dd6:	4911      	ldr	r1, [pc, #68]	; (b6e1c <loop+0x874>)
   b6dd8:	a827      	add	r0, sp, #156	; 0x9c
   b6dda:	f7fd fd8d 	bl	b48f8 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6dde:	b928      	cbnz	r0, b6dec <loop+0x844>
   b6de0:	490f      	ldr	r1, [pc, #60]	; (b6e20 <loop+0x878>)
   b6de2:	a827      	add	r0, sp, #156	; 0x9c
   b6de4:	f7fd fd88 	bl	b48f8 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6de8:	2800      	cmp	r0, #0
   b6dea:	d072      	beq.n	b6ed2 <loop+0x92a>
	return *(this->_M_impl._M_start + __n);
   b6dec:	9a24      	ldr	r2, [sp, #144]	; 0x90
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6dee:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
   b6df2:	1a9b      	subs	r3, r3, r2
            for(int j = 0; j < currentRailway.outputs[2].size(); j++){
   b6df4:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b6df8:	d26b      	bcs.n	b6ed2 <loop+0x92a>
              Wire.write('0');
   b6dfa:	f003 fba9 	bl	ba550 <_Z19__fetch_global_Wirev>
   b6dfe:	2130      	movs	r1, #48	; 0x30
   b6e00:	f7fd fa32 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < currentRailway.outputs[2].size(); j++){
   b6e04:	3401      	adds	r4, #1
   b6e06:	e7f1      	b.n	b6dec <loop+0x844>
   b6e08:	000bd9f9 	.word	0x000bd9f9
   b6e0c:	2003e520 	.word	0x2003e520
   b6e10:	20035658 	.word	0x20035658
   b6e14:	20037ee8 	.word	0x20037ee8
   b6e18:	20037eb8 	.word	0x20037eb8
   b6e1c:	200355d0 	.word	0x200355d0
   b6e20:	2003e58c 	.word	0x2003e58c
   b6e24:	20035694 	.word	0x20035694
          }else if(i == 3 && currentRailway.name == pinkLine.name){
   b6e28:	494f      	ldr	r1, [pc, #316]	; (b6f68 <loop+0x9c0>)
   b6e2a:	a827      	add	r0, sp, #156	; 0x9c
   b6e2c:	f7fd fd64 	bl	b48f8 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6e30:	2800      	cmp	r0, #0
   b6e32:	d04e      	beq.n	b6ed2 <loop+0x92a>
	return *(this->_M_impl._M_start + __n);
   b6e34:	4f4d      	ldr	r7, [pc, #308]	; (b6f6c <loop+0x9c4>)
   b6e36:	f8df a144 	ldr.w	sl, [pc, #324]	; b6f7c <loop+0x9d4>
   b6e3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
   b6e3c:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6e40:	e9d0 3200 	ldrd	r3, r2, [r0]
   b6e44:	1ad2      	subs	r2, r2, r3
   b6e46:	e9d1 1309 	ldrd	r1, r3, [r1, #36]	; 0x24
   b6e4a:	1a5b      	subs	r3, r3, r1
   b6e4c:	109b      	asrs	r3, r3, #2
            for(int j = 0; j < greenLine.outputs[0].size() - pinkLine.outputs[3].size(); j++){
   b6e4e:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   b6e52:	42a3      	cmp	r3, r4
   b6e54:	d93d      	bls.n	b6ed2 <loop+0x92a>
              Wire.write('0');
   b6e56:	f003 fb7b 	bl	ba550 <_Z19__fetch_global_Wirev>
   b6e5a:	2130      	movs	r1, #48	; 0x30
   b6e5c:	f7fd fa04 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < greenLine.outputs[0].size() - pinkLine.outputs[3].size(); j++){
   b6e60:	3401      	adds	r4, #1
   b6e62:	e7ea      	b.n	b6e3a <loop+0x892>
        Serial.println();
   b6e64:	f003 fa26 	bl	ba2b4 <_Z16_fetch_usbserialv>
   b6e68:	f002 fca3 	bl	b97b2 <_ZN5Print7printlnEv>
      for(int i = 0; i < 4; i++){
   b6e6c:	3501      	adds	r5, #1
        Wire.endTransmission();
   b6e6e:	f003 fb6f 	bl	ba550 <_Z19__fetch_global_Wirev>
   b6e72:	f002 fb24 	bl	b94be <_ZN7TwoWire15endTransmissionEv>
      for(int i = 0; i < 4; i++){
   b6e76:	2d04      	cmp	r5, #4
   b6e78:	f106 0604 	add.w	r6, r6, #4
   b6e7c:	f47f acee 	bne.w	b685c <loop+0x2b4>
   b6e80:	2300      	movs	r3, #0
          currentRailway.outputs[i][j] = 0;
   b6e82:	461c      	mov	r4, r3
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b6e84:	2200      	movs	r2, #0
	return *(this->_M_impl._M_start + __n);
   b6e86:	9924      	ldr	r1, [sp, #144]	; 0x90
   b6e88:	18cd      	adds	r5, r1, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6e8a:	58c8      	ldr	r0, [r1, r3]
   b6e8c:	6869      	ldr	r1, [r5, #4]
   b6e8e:	1a09      	subs	r1, r1, r0
   b6e90:	ebb2 0fa1 	cmp.w	r2, r1, asr #2
   b6e94:	d203      	bcs.n	b6e9e <loop+0x8f6>
          currentRailway.outputs[i][j] = 0;
   b6e96:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b6e9a:	3201      	adds	r2, #1
   b6e9c:	e7f3      	b.n	b6e86 <loop+0x8de>
      for(int i = 0; i < 4; i++){
   b6e9e:	330c      	adds	r3, #12
   b6ea0:	2b30      	cmp	r3, #48	; 0x30
   b6ea2:	d1ef      	bne.n	b6e84 <loop+0x8dc>
      Serial.println();
   b6ea4:	f003 fa06 	bl	ba2b4 <_Z16_fetch_usbserialv>
   b6ea8:	f002 fc83 	bl	b97b2 <_ZN5Print7printlnEv>
      }
   b6eac:	a807      	add	r0, sp, #28
   b6eae:	f7fd fc43 	bl	b4738 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      Railway currentRailway = cities[cityIndex].railways[j];
   b6eb2:	a81b      	add	r0, sp, #108	; 0x6c
   b6eb4:	f7fd ff8e 	bl	b4dd4 <_ZN7RailwayD1Ev>
    for(int j = 0; j < cities[cityIndex].railways.size(); j++){
   b6eb8:	f109 0901 	add.w	r9, r9, #1
   b6ebc:	f7ff bbb7 	b.w	b662e <loop+0x86>
    Serial.println();
   b6ec0:	f003 f9f8 	bl	ba2b4 <_Z16_fetch_usbserialv>
}
   b6ec4:	b037      	add	sp, #220	; 0xdc
   b6ec6:	ecbd 8b06 	vpop	{d8-d10}
   b6eca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Serial.println();
   b6ece:	f002 bc70 	b.w	b97b2 <_ZN5Print7printlnEv>
        Serial.printf("%s rail part %i: ", currentRailway.name.c_str(), i);
   b6ed2:	f003 f9ef 	bl	ba2b4 <_Z16_fetch_usbserialv>
   b6ed6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   b6ed8:	4925      	ldr	r1, [pc, #148]	; (b6f70 <loop+0x9c8>)
   b6eda:	462b      	mov	r3, r5
   b6edc:	f7fd faac 	bl	b4438 <_ZN5Print6printfEPKcz>
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b6ee0:	240c      	movs	r4, #12
   b6ee2:	436c      	muls	r4, r5
   b6ee4:	2700      	movs	r7, #0
	return *(this->_M_impl._M_start + __n);
   b6ee6:	9a24      	ldr	r2, [sp, #144]	; 0x90
   b6ee8:	1913      	adds	r3, r2, r4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6eea:	5912      	ldr	r2, [r2, r4]
   b6eec:	685b      	ldr	r3, [r3, #4]
   b6eee:	1a9b      	subs	r3, r3, r2
   b6ef0:	ebb7 0fa3 	cmp.w	r7, r3, asr #2
   b6ef4:	d2b6      	bcs.n	b6e64 <loop+0x8bc>
          Wire.write((char)currentRailway.outputs[i][j] + '0');
   b6ef6:	f003 fb2b 	bl	ba550 <_Z19__fetch_global_Wirev>
	return *(this->_M_impl._M_start + __n);
   b6efa:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b6efc:	591b      	ldr	r3, [r3, r4]
   b6efe:	f813 1027 	ldrb.w	r1, [r3, r7, lsl #2]
   b6f02:	3130      	adds	r1, #48	; 0x30
   b6f04:	f7fd f9b0 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
          Serial.print(currentRailway.outputs[i][j]);
   b6f08:	f003 f9d4 	bl	ba2b4 <_Z16_fetch_usbserialv>
   b6f0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b6f0e:	591b      	ldr	r3, [r3, r4]
   b6f10:	220a      	movs	r2, #10
   b6f12:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
   b6f16:	f7fd f95d 	bl	b41d4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b6f1a:	3701      	adds	r7, #1
   b6f1c:	e7e3      	b.n	b6ee6 <loop+0x93e>
          if(i == 3 && currentRailway.name == orangeLine.name){
   b6f1e:	2d03      	cmp	r5, #3
   b6f20:	d1d7      	bne.n	b6ed2 <loop+0x92a>
   b6f22:	4914      	ldr	r1, [pc, #80]	; (b6f74 <loop+0x9cc>)
   b6f24:	a827      	add	r0, sp, #156	; 0x9c
   b6f26:	f7fd fce7 	bl	b48f8 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6f2a:	2800      	cmp	r0, #0
   b6f2c:	f43f af7c 	beq.w	b6e28 <loop+0x880>
   b6f30:	4f0e      	ldr	r7, [pc, #56]	; (b6f6c <loop+0x9c4>)
   b6f32:	4b11      	ldr	r3, [pc, #68]	; (b6f78 <loop+0x9d0>)
   b6f34:	6a78      	ldr	r0, [r7, #36]	; 0x24
   b6f36:	6a59      	ldr	r1, [r3, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6f38:	e9d0 3200 	ldrd	r3, r2, [r0]
   b6f3c:	1ad2      	subs	r2, r2, r3
   b6f3e:	e9d1 1309 	ldrd	r1, r3, [r1, #36]	; 0x24
   b6f42:	1a5b      	subs	r3, r3, r1
   b6f44:	109b      	asrs	r3, r3, #2
            for(int j = 0; j < greenLine.outputs[0].size() - orangeLine.outputs[3].size(); j++){
   b6f46:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   b6f4a:	42a3      	cmp	r3, r4
   b6f4c:	d9c1      	bls.n	b6ed2 <loop+0x92a>
              Wire.write('0');
   b6f4e:	f003 faff 	bl	ba550 <_Z19__fetch_global_Wirev>
   b6f52:	2130      	movs	r1, #48	; 0x30
   b6f54:	f7fd f988 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < greenLine.outputs[0].size() - orangeLine.outputs[3].size(); j++){
   b6f58:	3401      	adds	r4, #1
   b6f5a:	e7ea      	b.n	b6f32 <loop+0x98a>
}
   b6f5c:	b037      	add	sp, #220	; 0xdc
   b6f5e:	ecbd 8b06 	vpop	{d8-d10}
   b6f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6f66:	bf00      	nop
   b6f68:	2003e520 	.word	0x2003e520
   b6f6c:	20035628 	.word	0x20035628
   b6f70:	000bda02 	.word	0x000bda02
   b6f74:	20037ee8 	.word	0x20037ee8
   b6f78:	20037eb8 	.word	0x20037eb8
   b6f7c:	2003e4f0 	.word	0x2003e4f0

000b6f80 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b6f80:	b510      	push	{r4, lr}
   b6f82:	4604      	mov	r4, r0
   b6f84:	f003 f8c8 	bl	ba118 <_ZN9TCPClientC1Ev>
{

}
   b6f88:	4620      	mov	r0, r4
   b6f8a:	bd10      	pop	{r4, pc}

000b6f8c <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b6f8c:	b538      	push	{r3, r4, r5, lr}
   b6f8e:	4604      	mov	r4, r0
   b6f90:	4615      	mov	r5, r2
    client.print(aHeaderName);
   b6f92:	f002 fc07 	bl	b97a4 <_ZN5Print5printEPKc>
    client.print(": ");
   b6f96:	4905      	ldr	r1, [pc, #20]	; (b6fac <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   b6f98:	4620      	mov	r0, r4
   b6f9a:	f002 fc03 	bl	b97a4 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b6f9e:	4629      	mov	r1, r5
   b6fa0:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b6fa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
   b6fa6:	f002 bc10 	b.w	b97ca <_ZN5Print7printlnEPKc>
   b6faa:	bf00      	nop
   b6fac:	000bd7b7 	.word	0x000bd7b7

000b6fb0 <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b6fb0:	b538      	push	{r3, r4, r5, lr}
   b6fb2:	4605      	mov	r5, r0
   b6fb4:	4614      	mov	r4, r2
    client.print(aHeaderName);
   b6fb6:	f002 fbf5 	bl	b97a4 <_ZN5Print5printEPKc>
    client.print(": ");
   b6fba:	490b      	ldr	r1, [pc, #44]	; (b6fe8 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   b6fbc:	4628      	mov	r0, r5
   b6fbe:	f002 fbf1 	bl	b97a4 <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
   b6fc2:	2c00      	cmp	r4, #0
   b6fc4:	da0d      	bge.n	b6fe2 <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
   b6fc6:	212d      	movs	r1, #45	; 0x2d
   b6fc8:	4628      	mov	r0, r5
   b6fca:	f002 fbef 	bl	b97ac <_ZN5Print5printEc>
            val = -n;
   b6fce:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b6fd0:	4628      	mov	r0, r5
   b6fd2:	220a      	movs	r2, #10
   b6fd4:	f002 fc03 	bl	b97de <_ZN5Print11printNumberEmh>
        n += println();
   b6fd8:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b6fda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6fde:	f002 bbe8 	b.w	b97b2 <_ZN5Print7printlnEv>
            val = n;
   b6fe2:	4621      	mov	r1, r4
   b6fe4:	e7f4      	b.n	b6fd0 <_ZN10HttpClient10sendHeaderEPKci+0x20>
   b6fe6:	bf00      	nop
   b6fe8:	000bd7b7 	.word	0x000bd7b7

000b6fec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b6fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6ff0:	460e      	mov	r6, r1
   b6ff2:	b091      	sub	sp, #68	; 0x44
   b6ff4:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b6ff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6ffa:	6013      	str	r3, [r2, #0]
{
   b6ffc:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b6ffe:	2100      	movs	r1, #0
   b7000:	4630      	mov	r0, r6
   b7002:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b7006:	4617      	mov	r7, r2
   b7008:	f002 fd4c 	bl	b9aa4 <_ZNK6String6equalsEPKc>
   b700c:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b7010:	4603      	mov	r3, r0
   b7012:	b998      	cbnz	r0, b703c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	const char * c_str() const { return buffer; }
   b7014:	f1be 0f00 	cmp.w	lr, #0
   b7018:	bf14      	ite	ne
   b701a:	4672      	movne	r2, lr
   b701c:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b701e:	6831      	ldr	r1, [r6, #0]
   b7020:	b292      	uxth	r2, r2
   b7022:	4620      	mov	r0, r4
   b7024:	f002 fe78 	bl	b9d18 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b7028:	1e05      	subs	r5, r0, #0
   b702a:	bf18      	it	ne
   b702c:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   b702e:	b9c5      	cbnz	r5, b7062 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   b7030:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b7032:	b011      	add	sp, #68	; 0x44
   b7034:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b7038:	f003 b824 	b.w	ba084 <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b703c:	4b76      	ldr	r3, [pc, #472]	; (b7218 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
   b703e:	930a      	str	r3, [sp, #40]	; 0x28
   b7040:	f106 0c14 	add.w	ip, r6, #20
   b7044:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7048:	ad0b      	add	r5, sp, #44	; 0x2c
   b704a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b704c:	f8dc 3000 	ldr.w	r3, [ip]
   b7050:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b7052:	fa1f f28e 	uxth.w	r2, lr
   b7056:	2300      	movs	r3, #0
   b7058:	a90a      	add	r1, sp, #40	; 0x28
   b705a:	4620      	mov	r0, r4
   b705c:	f002 ff3c 	bl	b9ed8 <_ZN9TCPClient7connectE9IPAddresstm>
   b7060:	e7e2      	b.n	b7028 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
   b7062:	4649      	mov	r1, r9
   b7064:	4620      	mov	r0, r4
   b7066:	f002 fb9d 	bl	b97a4 <_ZN5Print5printEPKc>
    client.print(" ");
   b706a:	496c      	ldr	r1, [pc, #432]	; (b721c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   b706c:	4620      	mov	r0, r4
   b706e:	f002 fb99 	bl	b97a4 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b7072:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b7074:	4620      	mov	r0, r4
   b7076:	f002 fb95 	bl	b97a4 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b707a:	4969      	ldr	r1, [pc, #420]	; (b7220 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   b707c:	4620      	mov	r0, r4
   b707e:	f002 fb91 	bl	b97a4 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b7082:	4968      	ldr	r1, [pc, #416]	; (b7224 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
   b7084:	4a68      	ldr	r2, [pc, #416]	; (b7228 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
   b7086:	4620      	mov	r0, r4
   b7088:	f7ff ff80 	bl	b6f8c <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b708c:	2100      	movs	r1, #0
   b708e:	4630      	mov	r0, r6
   b7090:	f002 fd08 	bl	b9aa4 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b7094:	b920      	cbnz	r0, b70a0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   b7096:	6832      	ldr	r2, [r6, #0]
   b7098:	4964      	ldr	r1, [pc, #400]	; (b722c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
   b709a:	4620      	mov	r0, r4
   b709c:	f7ff ff76 	bl	b6f8c <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b70a0:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b70a4:	2100      	movs	r1, #0
   b70a6:	4650      	mov	r0, sl
   b70a8:	f002 fcfc 	bl	b9aa4 <_ZNK6String6equalsEPKc>
   b70ac:	b928      	cbnz	r0, b70ba <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
   b70ae:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b70b0:	495f      	ldr	r1, [pc, #380]	; (b7230 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
   b70b2:	4620      	mov	r0, r4
   b70b4:	f7ff ff7c 	bl	b6fb0 <_ZN10HttpClient10sendHeaderEPKci>
   b70b8:	e006      	b.n	b70c8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b70ba:	495e      	ldr	r1, [pc, #376]	; (b7234 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
   b70bc:	4648      	mov	r0, r9
   b70be:	f004 faf3 	bl	bb6a8 <strcmp>
   b70c2:	4602      	mov	r2, r0
   b70c4:	2800      	cmp	r0, #0
   b70c6:	d0f3      	beq.n	b70b0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
   b70c8:	f1b8 0f00 	cmp.w	r8, #0
   b70cc:	d00e      	beq.n	b70ec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
   b70ce:	f8d8 1000 	ldr.w	r1, [r8]
   b70d2:	b159      	cbz	r1, b70ec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
   b70d4:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
   b70d8:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b70da:	b122      	cbz	r2, b70e6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
   b70dc:	f7ff ff56 	bl	b6f8c <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b70e0:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
   b70e4:	e7f3      	b.n	b70ce <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
   b70e6:	f002 fb70 	bl	b97ca <_ZN5Print7printlnEPKc>
}
   b70ea:	e7f9      	b.n	b70e0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
   b70ec:	4620      	mov	r0, r4
   b70ee:	f002 fb60 	bl	b97b2 <_ZN5Print7printlnEv>
    client.flush();
   b70f2:	4620      	mov	r0, r4
   b70f4:	f002 fd70 	bl	b9bd8 <_ZN9TCPClient5flushEv>
   b70f8:	2100      	movs	r1, #0
   b70fa:	4650      	mov	r0, sl
   b70fc:	f002 fcd2 	bl	b9aa4 <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b7100:	b918      	cbnz	r0, b710a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
   b7102:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b7104:	4620      	mov	r0, r4
   b7106:	f002 fb60 	bl	b97ca <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b710a:	f104 0a1c 	add.w	sl, r4, #28
   b710e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
   b7112:	2100      	movs	r1, #0
   b7114:	4650      	mov	r0, sl
   b7116:	f004 fa91 	bl	bb63c <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b711a:	f000 fdad 	bl	b7c78 <HAL_Timer_Get_Milli_Seconds>
   b711e:	9001      	str	r0, [sp, #4]
   b7120:	f000 fdaa 	bl	b7c78 <HAL_Timer_Get_Milli_Seconds>
    bool error = false;
   b7124:	f04f 0800 	mov.w	r8, #0
    unsigned int bufferPosition = 0;
   b7128:	4646      	mov	r6, r8
    } while (client.connected() && !timeout && !error);
   b712a:	f241 3b88 	movw	fp, #5000	; 0x1388
        while (client.available()) {
   b712e:	4620      	mov	r0, r4
   b7130:	f002 ff4e 	bl	b9fd0 <_ZN9TCPClient9availableEv>
   b7134:	b1e8      	cbz	r0, b7172 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x186>
            char c = client.read();
   b7136:	4620      	mov	r0, r4
   b7138:	f002 fd34 	bl	b9ba4 <_ZN9TCPClient4readEv>
   b713c:	4681      	mov	r9, r0
   b713e:	f000 fd9b 	bl	b7c78 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b7142:	f242 73fe 	movw	r3, #10238	; 0x27fe
   b7146:	429e      	cmp	r6, r3
   b7148:	9001      	str	r0, [sp, #4]
   b714a:	d804      	bhi.n	b7156 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = c;
   b714c:	19a3      	adds	r3, r4, r6
            char c = client.read();
   b714e:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
   b7152:	3601      	adds	r6, #1
        while (client.available()) {
   b7154:	e7eb      	b.n	b712e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b7156:	f242 73ff 	movw	r3, #10239	; 0x27ff
   b715a:	429e      	cmp	r6, r3
   b715c:	d1f9      	bne.n	b7152 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b715e:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
   b7162:	2200      	movs	r2, #0
   b7164:	f883 281b 	strb.w	r2, [r3, #2075]	; 0x81b
                client.stop();
   b7168:	4620      	mov	r0, r4
   b716a:	f002 ff8b 	bl	ba084 <_ZN9TCPClient4stopEv>
                error = true;
   b716e:	46a8      	mov	r8, r5
   b7170:	e7ef      	b.n	b7152 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b7172:	19a3      	adds	r3, r4, r6
   b7174:	7718      	strb	r0, [r3, #28]
   b7176:	f000 fd7f 	bl	b7c78 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b717a:	9b01      	ldr	r3, [sp, #4]
   b717c:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b7180:	f1b8 0f00 	cmp.w	r8, #0
   b7184:	d104      	bne.n	b7190 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
   b7186:	45d9      	cmp	r9, fp
   b7188:	d802      	bhi.n	b7190 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
            delay(200);
   b718a:	20c8      	movs	r0, #200	; 0xc8
   b718c:	f000 ffa0 	bl	b80d0 <delay>
    } while (client.connected() && !timeout && !error);
   b7190:	4620      	mov	r0, r4
   b7192:	f002 fe3f 	bl	b9e14 <_ZN9TCPClient9connectedEv>
   b7196:	b120      	cbz	r0, b71a2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b7198:	45d9      	cmp	r9, fp
   b719a:	d802      	bhi.n	b71a2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b719c:	f1b8 0f00 	cmp.w	r8, #0
   b71a0:	d0c5      	beq.n	b712e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
    client.stop();
   b71a2:	4620      	mov	r0, r4
   b71a4:	f002 ff6e 	bl	ba084 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b71a8:	4651      	mov	r1, sl
   b71aa:	a802      	add	r0, sp, #8
   b71ac:	f002 fbb7 	bl	b991e <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b71b0:	230c      	movs	r3, #12
   b71b2:	2209      	movs	r2, #9
   b71b4:	a902      	add	r1, sp, #8
   b71b6:	a806      	add	r0, sp, #24
   b71b8:	f002 fc98 	bl	b9aec <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b71bc:	491e      	ldr	r1, [pc, #120]	; (b7238 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x24c>)
   b71be:	a80a      	add	r0, sp, #40	; 0x28
   b71c0:	f002 fbad 	bl	b991e <_ZN6StringC1EPK19__FlashStringHelper>
   b71c4:	a90a      	add	r1, sp, #40	; 0x28
   b71c6:	a802      	add	r0, sp, #8
   b71c8:	f002 fc8d 	bl	b9ae6 <_ZNK6String7indexOfERKS_>
   b71cc:	4604      	mov	r4, r0
   b71ce:	a80a      	add	r0, sp, #40	; 0x28
   b71d0:	f002 fb5a 	bl	b9888 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b71d4:	1c63      	adds	r3, r4, #1
   b71d6:	d108      	bne.n	b71ea <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fe>
    String statusCode = raw_response.substring(9,12);
   b71d8:	a806      	add	r0, sp, #24
   b71da:	f002 fb55 	bl	b9888 <_ZN6StringD1Ev>
    String raw_response(buffer);
   b71de:	a802      	add	r0, sp, #8
   b71e0:	f002 fb52 	bl	b9888 <_ZN6StringD1Ev>
}
   b71e4:	b011      	add	sp, #68	; 0x44
   b71e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aResponse.body = "";
   b71ea:	1d3d      	adds	r5, r7, #4
   b71ec:	4913      	ldr	r1, [pc, #76]	; (b723c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x250>)
   b71ee:	4628      	mov	r0, r5
   b71f0:	f002 fbdd 	bl	b99ae <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b71f4:	1d22      	adds	r2, r4, #4
   b71f6:	a902      	add	r1, sp, #8
   b71f8:	a80a      	add	r0, sp, #40	; 0x28
   b71fa:	f002 fc97 	bl	b9b2c <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b71fe:	a90a      	add	r1, sp, #40	; 0x28
   b7200:	4628      	mov	r0, r5
   b7202:	f002 fc10 	bl	b9a26 <_ZN6String6concatERKS_>
   b7206:	a80a      	add	r0, sp, #40	; 0x28
   b7208:	f002 fb3e 	bl	b9888 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b720c:	9806      	ldr	r0, [sp, #24]
   b720e:	f004 f9d9 	bl	bb5c4 <atoi>
   b7212:	6038      	str	r0, [r7, #0]
   b7214:	e7e0      	b.n	b71d8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ec>
   b7216:	bf00      	nop
   b7218:	000bddf4 	.word	0x000bddf4
   b721c:	000bd97e 	.word	0x000bd97e
   b7220:	000bdb38 	.word	0x000bdb38
   b7224:	000bdb4a 	.word	0x000bdb4a
   b7228:	000bdb44 	.word	0x000bdb44
   b722c:	000bdb55 	.word	0x000bdb55
   b7230:	000bdb5a 	.word	0x000bdb5a
   b7234:	000bdb69 	.word	0x000bdb69
   b7238:	000bdb6e 	.word	0x000bdb6e
   b723c:	000bdb72 	.word	0x000bdb72

000b7240 <_ZN13JsonReferenceD1Ev>:
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
}
   b7240:	4770      	bx	lr

000b7242 <_ZN13JsonReferenceD0Ev>:
JsonReference::~JsonReference() {
   b7242:	b510      	push	{r4, lr}
}
   b7244:	210c      	movs	r1, #12
JsonReference::~JsonReference() {
   b7246:	4604      	mov	r4, r0
}
   b7248:	f7fc ff2b 	bl	b40a2 <_ZdlPvj>
   b724c:	4620      	mov	r0, r4
   b724e:	bd10      	pop	{r4, pc}

000b7250 <_ZN10JsonBufferD1Ev>:
JsonBuffer::~JsonBuffer() {
   b7250:	b510      	push	{r4, lr}
   b7252:	4b05      	ldr	r3, [pc, #20]	; (b7268 <_ZN10JsonBufferD1Ev+0x18>)
   b7254:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b7256:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b7258:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b725a:	b91b      	cbnz	r3, b7264 <_ZN10JsonBufferD1Ev+0x14>
   b725c:	6840      	ldr	r0, [r0, #4]
   b725e:	b108      	cbz	r0, b7264 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b7260:	f000 feee 	bl	b8040 <free>
}
   b7264:	4620      	mov	r0, r4
   b7266:	bd10      	pop	{r4, pc}
   b7268:	000bdb80 	.word	0x000bdb80

000b726c <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b726c:	b510      	push	{r4, lr}
   b726e:	4604      	mov	r4, r0
}
   b7270:	f7ff ffee 	bl	b7250 <_ZN10JsonBufferD1Ev>
   b7274:	4620      	mov	r0, r4
   b7276:	2114      	movs	r1, #20
   b7278:	f7fc ff13 	bl	b40a2 <_ZdlPvj>
   b727c:	4620      	mov	r0, r4
   b727e:	bd10      	pop	{r4, pc}

000b7280 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b7280:	b510      	push	{r4, lr}
   b7282:	4b07      	ldr	r3, [pc, #28]	; (b72a0 <_ZN10JsonParserD1Ev+0x20>)
   b7284:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b7286:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b7288:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b728a:	b91b      	cbnz	r3, b7294 <_ZN10JsonParserD1Ev+0x14>
   b728c:	6940      	ldr	r0, [r0, #20]
   b728e:	b108      	cbz	r0, b7294 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b7290:	f000 fed6 	bl	b8040 <free>
JsonParser::~JsonParser() {
   b7294:	4620      	mov	r0, r4
   b7296:	f7ff ffdb 	bl	b7250 <_ZN10JsonBufferD1Ev>
}
   b729a:	4620      	mov	r0, r4
   b729c:	bd10      	pop	{r4, pc}
   b729e:	bf00      	nop
   b72a0:	000bdb90 	.word	0x000bdb90

000b72a4 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b72a4:	b510      	push	{r4, lr}
   b72a6:	4604      	mov	r4, r0
}
   b72a8:	f7ff ffea 	bl	b7280 <_ZN10JsonParserD1Ev>
   b72ac:	4620      	mov	r0, r4
   b72ae:	212c      	movs	r1, #44	; 0x2c
   b72b0:	f7fc fef7 	bl	b40a2 <_ZdlPvj>
   b72b4:	4620      	mov	r0, r4
   b72b6:	bd10      	pop	{r4, pc}

000b72b8 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b72b8:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b72ba:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b72bc:	4604      	mov	r4, r0
   b72be:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b72c0:	b10b      	cbz	r3, b72c6 <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b72c2:	2000      	movs	r0, #0
}
   b72c4:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b72c6:	6840      	ldr	r0, [r0, #4]
   b72c8:	b138      	cbz	r0, b72da <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b72ca:	f000 fec1 	bl	b8050 <realloc>
		if (newBuffer) {
   b72ce:	2800      	cmp	r0, #0
   b72d0:	d0f7      	beq.n	b72c2 <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b72d2:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b72d6:	2001      	movs	r0, #1
   b72d8:	e7f4      	b.n	b72c4 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b72da:	4608      	mov	r0, r1
   b72dc:	f000 fea8 	bl	b8030 <malloc>
   b72e0:	e7f5      	b.n	b72ce <_ZN10JsonBuffer8allocateEj+0x16>

000b72e2 <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b72e2:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b72e4:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b72e6:	460e      	mov	r6, r1
   b72e8:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b72ea:	18d1      	adds	r1, r2, r3
   b72ec:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b72ee:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b72f0:	b172      	cbz	r2, b7310 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b72f2:	6882      	ldr	r2, [r0, #8]
   b72f4:	428a      	cmp	r2, r1
   b72f6:	d30b      	bcc.n	b7310 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b72f8:	6860      	ldr	r0, [r4, #4]
   b72fa:	68e3      	ldr	r3, [r4, #12]
   b72fc:	462a      	mov	r2, r5
   b72fe:	4631      	mov	r1, r6
   b7300:	4418      	add	r0, r3
   b7302:	f004 f973 	bl	bb5ec <memcpy>
	offset += dataLen;
   b7306:	68e2      	ldr	r2, [r4, #12]
   b7308:	442a      	add	r2, r5
   b730a:	60e2      	str	r2, [r4, #12]
	return true;
   b730c:	2001      	movs	r0, #1
}
   b730e:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b7310:	4620      	mov	r0, r4
   b7312:	f7ff ffd1 	bl	b72b8 <_ZN10JsonBuffer8allocateEj>
   b7316:	2800      	cmp	r0, #0
   b7318:	d1ee      	bne.n	b72f8 <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b731a:	e7f8      	b.n	b730e <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b731c <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b731c:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b731e:	2100      	movs	r1, #0
   b7320:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b7322:	b123      	cbz	r3, b732e <_ZN10JsonBuffer5clearEv+0x12>
   b7324:	6882      	ldr	r2, [r0, #8]
   b7326:	b112      	cbz	r2, b732e <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b7328:	4618      	mov	r0, r3
   b732a:	f004 b987 	b.w	bb63c <memset>
}
   b732e:	4770      	bx	lr

000b7330 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b7330:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b7332:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b7336:	2200      	movs	r2, #0
   b7338:	60c2      	str	r2, [r0, #12]
   b733a:	2201      	movs	r2, #1
   b733c:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b733e:	6143      	str	r3, [r0, #20]
   b7340:	4a02      	ldr	r2, [pc, #8]	; (b734c <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b7342:	9b02      	ldr	r3, [sp, #8]
   b7344:	6002      	str	r2, [r0, #0]
   b7346:	61c3      	str	r3, [r0, #28]
}
   b7348:	bd10      	pop	{r4, pc}
   b734a:	bf00      	nop
   b734c:	000bdb90 	.word	0x000bdb90

000b7350 <_ZNK10JsonParser12getReferenceEv>:
	if (tokens < tokensEnd) {
   b7350:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   b7354:	429a      	cmp	r2, r3
   b7356:	4b04      	ldr	r3, [pc, #16]	; (b7368 <_ZNK10JsonParser12getReferenceEv+0x18>)

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b7358:	bf38      	it	cc
   b735a:	6082      	strcc	r2, [r0, #8]
   b735c:	e9c0 3100 	strd	r3, r1, [r0]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b7360:	bf24      	itt	cs
   b7362:	2300      	movcs	r3, #0
   b7364:	6083      	strcs	r3, [r0, #8]
}
   b7366:	4770      	bx	lr
   b7368:	000bdba0 	.word	0x000bdba0

000b736c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b736c:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b736e:	6813      	ldr	r3, [r2, #0]
   b7370:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b7372:	6813      	ldr	r3, [r2, #0]
   b7374:	f103 0410 	add.w	r4, r3, #16
   b7378:	6014      	str	r4, [r2, #0]
   b737a:	6986      	ldr	r6, [r0, #24]
   b737c:	42b4      	cmp	r4, r6
   b737e:	d20a      	bcs.n	b7396 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b7380:	699b      	ldr	r3, [r3, #24]
   b7382:	688c      	ldr	r4, [r1, #8]
   b7384:	42a3      	cmp	r3, r4
   b7386:	da01      	bge.n	b738c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b7388:	42ab      	cmp	r3, r5
   b738a:	ddf2      	ble.n	b7372 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b738c:	42a3      	cmp	r3, r4
   b738e:	bfcc      	ite	gt
   b7390:	2000      	movgt	r0, #0
   b7392:	2001      	movle	r0, #1
   b7394:	e000      	b.n	b7398 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b7396:	2000      	movs	r0, #0
}
   b7398:	bd70      	pop	{r4, r5, r6, pc}

000b739a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b739a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b739e:	9d08      	ldr	r5, [sp, #32]
   b73a0:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b73a2:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b73a6:	4604      	mov	r4, r0
   b73a8:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b73aa:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b73ac:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b73ae:	9801      	ldr	r0, [sp, #4]
   b73b0:	69a3      	ldr	r3, [r4, #24]
   b73b2:	4283      	cmp	r3, r0
   b73b4:	d91a      	bls.n	b73ec <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b73b6:	6882      	ldr	r2, [r0, #8]
   b73b8:	688b      	ldr	r3, [r1, #8]
   b73ba:	429a      	cmp	r2, r3
   b73bc:	da16      	bge.n	b73ec <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b73be:	42ae      	cmp	r6, r5
   b73c0:	d10b      	bne.n	b73da <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b73c2:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b73c4:	aa01      	add	r2, sp, #4
   b73c6:	4620      	mov	r0, r4
   b73c8:	f7ff ffd0 	bl	b736c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b73cc:	b128      	cbz	r0, b73da <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b73ce:	9b01      	ldr	r3, [sp, #4]
   b73d0:	f8c8 3000 	str.w	r3, [r8]
}
   b73d4:	b002      	add	sp, #8
   b73d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b73da:	aa01      	add	r2, sp, #4
   b73dc:	4620      	mov	r0, r4
   b73de:	f7ff ffc5 	bl	b736c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b73e2:	4620      	mov	r0, r4
		index++;
   b73e4:	3601      	adds	r6, #1
		skipObject(container, token);
   b73e6:	f7ff ffc1 	bl	b736c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b73ea:	e7e0      	b.n	b73ae <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b73ec:	2000      	movs	r0, #0
   b73ee:	e7f1      	b.n	b73d4 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b73f0 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>:
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b73f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b73f2:	461f      	mov	r7, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b73f4:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b73f8:	4604      	mov	r4, r0
   b73fa:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b73fc:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b73fe:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b7400:	9b01      	ldr	r3, [sp, #4]
   b7402:	69a2      	ldr	r2, [r4, #24]
   b7404:	429a      	cmp	r2, r3
   b7406:	d90f      	bls.n	b7428 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
   b7408:	6898      	ldr	r0, [r3, #8]
   b740a:	688a      	ldr	r2, [r1, #8]
   b740c:	4290      	cmp	r0, r2
   b740e:	da0b      	bge.n	b7428 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
		if (desiredIndex == index) {
   b7410:	42b5      	cmp	r5, r6
   b7412:	d103      	bne.n	b741c <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x2c>
			value = token;
   b7414:	603b      	str	r3, [r7, #0]
			return true;
   b7416:	2001      	movs	r0, #1
}
   b7418:	b003      	add	sp, #12
   b741a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		skipObject(container, token);
   b741c:	aa01      	add	r2, sp, #4
   b741e:	4620      	mov	r0, r4
		index++;
   b7420:	3501      	adds	r5, #1
		skipObject(container, token);
   b7422:	f7ff ffa3 	bl	b736c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b7426:	e7eb      	b.n	b7400 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x10>
	return false;
   b7428:	2000      	movs	r0, #0
   b742a:	e7f5      	b.n	b7418 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x28>

000b742c <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
   b742c:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b742e:	3b01      	subs	r3, #1
   b7430:	2400      	movs	r4, #0
   b7432:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
   b7436:	1bf6      	subs	r6, r6, r7
   b7438:	42a6      	cmp	r6, r4
   b743a:	dd08      	ble.n	b744e <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
   b743c:	42a3      	cmp	r3, r4
   b743e:	dd06      	ble.n	b744e <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
   b7440:	6845      	ldr	r5, [r0, #4]
   b7442:	443d      	add	r5, r7
   b7444:	5d2d      	ldrb	r5, [r5, r4]
   b7446:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b744a:	3401      	adds	r4, #1
   b744c:	e7f1      	b.n	b7432 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
   b744e:	2300      	movs	r3, #0
   b7450:	7013      	strb	r3, [r2, #0]
}
   b7452:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7454 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
   b7454:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7456:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b7458:	2310      	movs	r3, #16
   b745a:	466a      	mov	r2, sp
   b745c:	f7ff ffe6 	bl	b742c <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
   b7460:	4904      	ldr	r1, [pc, #16]	; (b7474 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
   b7462:	4622      	mov	r2, r4
   b7464:	4668      	mov	r0, sp
   b7466:	f000 fdfb 	bl	b8060 <sscanf>
}
   b746a:	1e43      	subs	r3, r0, #1
   b746c:	4258      	negs	r0, r3
   b746e:	4158      	adcs	r0, r3
   b7470:	b004      	add	sp, #16
   b7472:	bd10      	pop	{r4, pc}
   b7474:	000bde54 	.word	0x000bde54

000b7478 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, float &result) const {
   b7478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b747a:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b747c:	2310      	movs	r3, #16
   b747e:	466a      	mov	r2, sp
   b7480:	f7ff ffd4 	bl	b742c <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	result = strtof(tmp, 0);
   b7484:	4668      	mov	r0, sp
   b7486:	2100      	movs	r1, #0
   b7488:	f004 ff80 	bl	bc38c <strtof>
}
   b748c:	2001      	movs	r0, #1
	result = strtof(tmp, 0);
   b748e:	ed84 0a00 	vstr	s0, [r4]
}
   b7492:	b004      	add	sp, #16
   b7494:	bd10      	pop	{r4, pc}
	...

000b7498 <_ZNK13JsonReference5indexEj>:
	else {
		return JsonReference(parser);
	}
}

JsonReference JsonReference::index(size_t index) const {
   b7498:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b749a:	460d      	mov	r5, r1
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b749c:	6889      	ldr	r1, [r1, #8]
   b749e:	4e0a      	ldr	r6, [pc, #40]	; (b74c8 <_ZNK13JsonReference5indexEj+0x30>)
JsonReference JsonReference::index(size_t index) const {
   b74a0:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b74a2:	b161      	cbz	r1, b74be <_ZNK13JsonReference5indexEj+0x26>
   b74a4:	6868      	ldr	r0, [r5, #4]
   b74a6:	ab01      	add	r3, sp, #4
   b74a8:	f7ff ffa2 	bl	b73f0 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>
   b74ac:	b138      	cbz	r0, b74be <_ZNK13JsonReference5indexEj+0x26>
		return JsonReference(parser, newToken);
   b74ae:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b74b0:	e9c4 6300 	strd	r6, r3, [r4]
   b74b4:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b74b6:	60a3      	str	r3, [r4, #8]
	}
	else {
		return JsonReference(parser);
	}
}
   b74b8:	4620      	mov	r0, r4
   b74ba:	b002      	add	sp, #8
   b74bc:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b74be:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b74c0:	e9c4 6300 	strd	r6, r3, [r4]
   b74c4:	2300      	movs	r3, #0
   b74c6:	e7f6      	b.n	b74b6 <_ZNK13JsonReference5indexEj+0x1e>
   b74c8:	000bdba0 	.word	0x000bdba0

000b74cc <_ZNK13JsonReference8valueIntEi>:
bool JsonReference::valueBool(bool result) const {
	(void) value(result);
	return result;
}

int JsonReference::valueInt(int result) const {
   b74cc:	b507      	push	{r0, r1, r2, lr}
   b74ce:	9101      	str	r1, [sp, #4]
	 * There are also type-specific versions like valueBool that return the value, instead of having to pass an object
	 * to hold the value, as in this call.
	 */
	template<class T>
	bool value(T &result) const {
		if (token && parser->getTokenValue(token, result)) {
   b74d0:	6881      	ldr	r1, [r0, #8]
   b74d2:	b119      	cbz	r1, b74dc <_ZNK13JsonReference8valueIntEi+0x10>
   b74d4:	6840      	ldr	r0, [r0, #4]
   b74d6:	aa01      	add	r2, sp, #4
   b74d8:	f7ff ffbc 	bl	b7454 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
	(void) value(result);
	return result;
}
   b74dc:	9801      	ldr	r0, [sp, #4]
   b74de:	b003      	add	sp, #12
   b74e0:	f85d fb04 	ldr.w	pc, [sp], #4

000b74e4 <_ZNK13JsonReference10valueFloatEf>:
unsigned long JsonReference::valueUnsignedLong(unsigned long result) const {
	(void) value(result);
	return result;
}

float JsonReference::valueFloat(float result) const {
   b74e4:	b507      	push	{r0, r1, r2, lr}
   b74e6:	6881      	ldr	r1, [r0, #8]
   b74e8:	ed8d 0a01 	vstr	s0, [sp, #4]
   b74ec:	b119      	cbz	r1, b74f6 <_ZNK13JsonReference10valueFloatEf+0x12>
   b74ee:	6840      	ldr	r0, [r0, #4]
   b74f0:	aa01      	add	r2, sp, #4
   b74f2:	f7ff ffc1 	bl	b7478 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>
	(void) value(result);
	return result;
}
   b74f6:	ed9d 0a01 	vldr	s0, [sp, #4]
   b74fa:	b003      	add	sp, #12
   b74fc:	f85d fb04 	ldr.w	pc, [sp], #4

000b7500 <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   b7500:	b510      	push	{r4, lr}
   b7502:	4604      	mov	r4, r0
	if (str) {
   b7504:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b7506:	460b      	mov	r3, r1
	if (str) {
   b7508:	b128      	cbz	r0, b7516 <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b750a:	f002 fa90 	bl	b9a2e <_ZN6String6concatEc>
	}
	else {
		if (buf && length < (bufLen - 1)) {
			buf[length] = ch;
		}
		length++;
   b750e:	68e3      	ldr	r3, [r4, #12]
   b7510:	3301      	adds	r3, #1
   b7512:	60e3      	str	r3, [r4, #12]
	}
}
   b7514:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b7516:	6860      	ldr	r0, [r4, #4]
   b7518:	2800      	cmp	r0, #0
   b751a:	d0f8      	beq.n	b750e <_ZN16JsonParserString6appendEc+0xe>
   b751c:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b7520:	3a01      	subs	r2, #1
   b7522:	428a      	cmp	r2, r1
			buf[length] = ch;
   b7524:	bf88      	it	hi
   b7526:	5443      	strbhi	r3, [r0, r1]
   b7528:	e7f1      	b.n	b750e <_ZN16JsonParserString6appendEc+0xe>

000b752a <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b752a:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b752c:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b752e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7530:	4608      	mov	r0, r1
		str.append((char)unicode);
   b7532:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b7534:	d804      	bhi.n	b7540 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b7536:	b003      	add	sp, #12
   b7538:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b753c:	f7ff bfe0 	b.w	b7500 <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b7540:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b7544:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b7548:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b754c:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b7550:	d207      	bcs.n	b7562 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b7552:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b7556:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b7558:	f7ff ffd2 	bl	b7500 <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b755c:	9801      	ldr	r0, [sp, #4]
   b755e:	4621      	mov	r1, r4
   b7560:	e7e9      	b.n	b7536 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b7562:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b7564:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b7568:	9001      	str	r0, [sp, #4]
   b756a:	f7ff ffc9 	bl	b7500 <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b756e:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b7572:	9801      	ldr	r0, [sp, #4]
   b7574:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b7578:	e7ee      	b.n	b7558 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>
	...

000b757c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b757c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b7580:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b7582:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b7584:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b7654 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b7588:	4680      	mov	r8, r0
   b758a:	460f      	mov	r7, r1
   b758c:	4615      	mov	r5, r2
			escape = false;
   b758e:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b7590:	68b8      	ldr	r0, [r7, #8]
   b7592:	42b0      	cmp	r0, r6
   b7594:	dd5a      	ble.n	b764c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b7596:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b759a:	5d99      	ldrb	r1, [r3, r6]
   b759c:	199a      	adds	r2, r3, r6
		if (escape) {
   b759e:	2c00      	cmp	r4, #0
   b75a0:	d04b      	beq.n	b763a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b75a2:	2975      	cmp	r1, #117	; 0x75
   b75a4:	d805      	bhi.n	b75b2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b75a6:	296d      	cmp	r1, #109	; 0x6d
   b75a8:	d807      	bhi.n	b75ba <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b75aa:	2962      	cmp	r1, #98	; 0x62
   b75ac:	d01e      	beq.n	b75ec <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b75ae:	2966      	cmp	r1, #102	; 0x66
   b75b0:	d01e      	beq.n	b75f0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b75b2:	4628      	mov	r0, r5
   b75b4:	f7ff ffa4 	bl	b7500 <_ZN16JsonParserString6appendEc>
				break;
   b75b8:	e03d      	b.n	b7636 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b75ba:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b75be:	2c07      	cmp	r4, #7
   b75c0:	d8f7      	bhi.n	b75b2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b75c2:	f20f 0c08 	addw	ip, pc, #8
   b75c6:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b75ca:	bf00      	nop
   b75cc:	000b75f5 	.word	0x000b75f5
   b75d0:	000b75b3 	.word	0x000b75b3
   b75d4:	000b75b3 	.word	0x000b75b3
   b75d8:	000b75b3 	.word	0x000b75b3
   b75dc:	000b75f9 	.word	0x000b75f9
   b75e0:	000b75b3 	.word	0x000b75b3
   b75e4:	000b75fd 	.word	0x000b75fd
   b75e8:	000b7601 	.word	0x000b7601
				str.append('\b');
   b75ec:	2108      	movs	r1, #8
   b75ee:	e7e0      	b.n	b75b2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b75f0:	210c      	movs	r1, #12
   b75f2:	e7de      	b.n	b75b2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b75f4:	210a      	movs	r1, #10
   b75f6:	e7dc      	b.n	b75b2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b75f8:	210d      	movs	r1, #13
   b75fa:	e7da      	b.n	b75b2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b75fc:	2109      	movs	r1, #9
   b75fe:	e7d8      	b.n	b75b2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b7600:	1d31      	adds	r1, r6, #4
   b7602:	4288      	cmp	r0, r1
   b7604:	dd17      	ble.n	b7636 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b7606:	a902      	add	r1, sp, #8
   b7608:	3304      	adds	r3, #4
   b760a:	4433      	add	r3, r6
   b760c:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b760e:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b7612:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b7616:	429a      	cmp	r2, r3
   b7618:	d1f9      	bne.n	b760e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b761a:	aa01      	add	r2, sp, #4
   b761c:	4651      	mov	r1, sl
					tmp[4] = 0;
   b761e:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b7622:	f000 fd1d 	bl	b8060 <sscanf>
   b7626:	2801      	cmp	r0, #1
   b7628:	d105      	bne.n	b7636 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b762a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b762e:	4629      	mov	r1, r5
   b7630:	f7ff ff7b 	bl	b752a <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b7634:	3605      	adds	r6, #5
			escape = false;
   b7636:	2400      	movs	r4, #0
   b7638:	e004      	b.n	b7644 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b763a:	295c      	cmp	r1, #92	; 0x5c
   b763c:	d004      	beq.n	b7648 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b763e:	4628      	mov	r0, r5
   b7640:	f7ff ff5e 	bl	b7500 <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b7644:	3601      	adds	r6, #1
   b7646:	e7a3      	b.n	b7590 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b7648:	2401      	movs	r4, #1
   b764a:	e7fb      	b.n	b7644 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b764c:	2001      	movs	r0, #1
   b764e:	b004      	add	sp, #16
   b7650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7654:	000bdb73 	.word	0x000bdb73

000b7658 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b7658:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b765a:	460c      	mov	r4, r1
   b765c:	4606      	mov	r6, r0
	result = "";
   b765e:	490c      	ldr	r1, [pc, #48]	; (b7690 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b7660:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b7662:	4615      	mov	r5, r2
	result = "";
   b7664:	f002 f9a3 	bl	b99ae <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b7668:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b766c:	1ac9      	subs	r1, r1, r3
   b766e:	3101      	adds	r1, #1
   b7670:	4628      	mov	r0, r5
   b7672:	f002 f927 	bl	b98c4 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b7676:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b7678:	466a      	mov	r2, sp
   b767a:	4621      	mov	r1, r4
   b767c:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b767e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b7682:	9500      	str	r5, [sp, #0]
   b7684:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b7686:	f7ff ff79 	bl	b757c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b768a:	b004      	add	sp, #16
   b768c:	bd70      	pop	{r4, r5, r6, pc}
   b768e:	bf00      	nop
   b7690:	000bdb72 	.word	0x000bdb72

000b7694 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b7694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7698:	b089      	sub	sp, #36	; 0x24
   b769a:	4605      	mov	r5, r0
   b769c:	4688      	mov	r8, r1
	String keyName;
   b769e:	a804      	add	r0, sp, #16
   b76a0:	4912      	ldr	r1, [pc, #72]	; (b76ec <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b76a2:	4616      	mov	r6, r2
   b76a4:	4699      	mov	r9, r3
	String keyName;
   b76a6:	f002 f93a 	bl	b991e <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b76aa:	2700      	movs	r7, #0
   b76ac:	9700      	str	r7, [sp, #0]
   b76ae:	464b      	mov	r3, r9
   b76b0:	aa03      	add	r2, sp, #12
   b76b2:	4641      	mov	r1, r8
   b76b4:	4628      	mov	r0, r5
   b76b6:	f7ff fe70 	bl	b739a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b76ba:	4604      	mov	r4, r0
   b76bc:	b170      	cbz	r0, b76dc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b76be:	9903      	ldr	r1, [sp, #12]
   b76c0:	aa04      	add	r2, sp, #16
   b76c2:	4628      	mov	r0, r5
   b76c4:	f7ff ffc8 	bl	b7658 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b76c8:	4604      	mov	r4, r0
   b76ca:	b908      	cbnz	r0, b76d0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b76cc:	3701      	adds	r7, #1
   b76ce:	e7ed      	b.n	b76ac <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b76d0:	4631      	mov	r1, r6
   b76d2:	a804      	add	r0, sp, #16
   b76d4:	f002 f9e6 	bl	b9aa4 <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b76d8:	2800      	cmp	r0, #0
   b76da:	d0f7      	beq.n	b76cc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b76dc:	a804      	add	r0, sp, #16
   b76de:	f002 f8d3 	bl	b9888 <_ZN6StringD1Ev>
}
   b76e2:	4620      	mov	r0, r4
   b76e4:	b009      	add	sp, #36	; 0x24
   b76e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b76ea:	bf00      	nop
   b76ec:	000bdb72 	.word	0x000bdb72

000b76f0 <_ZNK13JsonReference3keyEPKc>:
JsonReference JsonReference::key(const char *name) const {
   b76f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b76f2:	460d      	mov	r5, r1
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b76f4:	6889      	ldr	r1, [r1, #8]
   b76f6:	4e0a      	ldr	r6, [pc, #40]	; (b7720 <_ZNK13JsonReference3keyEPKc+0x30>)
JsonReference JsonReference::key(const char *name) const {
   b76f8:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b76fa:	b161      	cbz	r1, b7716 <_ZNK13JsonReference3keyEPKc+0x26>
   b76fc:	6868      	ldr	r0, [r5, #4]
   b76fe:	ab01      	add	r3, sp, #4
   b7700:	f7ff ffc8 	bl	b7694 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b7704:	b138      	cbz	r0, b7716 <_ZNK13JsonReference3keyEPKc+0x26>
		return JsonReference(parser, newToken);
   b7706:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b7708:	e9c4 6300 	strd	r6, r3, [r4]
   b770c:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b770e:	60a3      	str	r3, [r4, #8]
}
   b7710:	4620      	mov	r0, r4
   b7712:	b002      	add	sp, #8
   b7714:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b7716:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b7718:	e9c4 6300 	strd	r6, r3, [r4]
   b771c:	2300      	movs	r3, #0
   b771e:	e7f6      	b.n	b770e <_ZNK13JsonReference3keyEPKc+0x1e>
   b7720:	000bdba0 	.word	0x000bdba0

000b7724 <_ZNK13JsonReference11valueStringEv>:
String JsonReference::valueString() const {
   b7724:	b538      	push	{r3, r4, r5, lr}
   b7726:	460d      	mov	r5, r1
	String result;
   b7728:	4905      	ldr	r1, [pc, #20]	; (b7740 <_ZNK13JsonReference11valueStringEv+0x1c>)
String JsonReference::valueString() const {
   b772a:	4604      	mov	r4, r0
	String result;
   b772c:	f002 f8f7 	bl	b991e <_ZN6StringC1EPK19__FlashStringHelper>
   b7730:	68a9      	ldr	r1, [r5, #8]
   b7732:	b119      	cbz	r1, b773c <_ZNK13JsonReference11valueStringEv+0x18>
   b7734:	6868      	ldr	r0, [r5, #4]
   b7736:	4622      	mov	r2, r4
   b7738:	f7ff ff8e 	bl	b7658 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
}
   b773c:	4620      	mov	r0, r4
   b773e:	bd38      	pop	{r3, r4, r5, pc}
   b7740:	000bdb72 	.word	0x000bdb72

000b7744 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b7744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b7748:	6844      	ldr	r4, [r0, #4]
   b774a:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b774e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b7752:	f8d0 e000 	ldr.w	lr, [r0]
   b7756:	4596      	cmp	lr, r2
   b7758:	f080 81b9 	bcs.w	b7ace <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b775c:	f811 800e 	ldrb.w	r8, [r1, lr]
   b7760:	f1b8 0f00 	cmp.w	r8, #0
   b7764:	f000 81b3 	beq.w	b7ace <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b7768:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b776c:	f000 8098 	beq.w	b78a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b7770:	d833      	bhi.n	b77da <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b7772:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b7776:	f000 80a6 	beq.w	b78c6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b777a:	d810      	bhi.n	b779e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b777c:	f1a8 0809 	sub.w	r8, r8, #9
   b7780:	fa5f f888 	uxtb.w	r8, r8
   b7784:	f1b8 0f17 	cmp.w	r8, #23
   b7788:	d80d      	bhi.n	b77a6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b778a:	4d9f      	ldr	r5, [pc, #636]	; (b7a08 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b778c:	fa0c f808 	lsl.w	r8, ip, r8
   b7790:	ea18 0f05 	tst.w	r8, r5
   b7794:	d007      	beq.n	b77a6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b7796:	6805      	ldr	r5, [r0, #0]
   b7798:	3501      	adds	r5, #1
   b779a:	6005      	str	r5, [r0, #0]
   b779c:	e7d9      	b.n	b7752 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b779e:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b77a2:	f000 8133 	beq.w	b7a0c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b77a6:	f8d0 8000 	ldr.w	r8, [r0]
   b77aa:	4542      	cmp	r2, r8
   b77ac:	d90e      	bls.n	b77cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b77ae:	f811 5008 	ldrb.w	r5, [r1, r8]
   b77b2:	b15d      	cbz	r5, b77cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b77b4:	2d3a      	cmp	r5, #58	; 0x3a
   b77b6:	f200 8169 	bhi.w	b7a8c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b77ba:	2d1f      	cmp	r5, #31
   b77bc:	f200 8151 	bhi.w	b7a62 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b77c0:	2d0a      	cmp	r5, #10
   b77c2:	f200 8160 	bhi.w	b7a86 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b77c6:	2d08      	cmp	r5, #8
   b77c8:	f240 8156 	bls.w	b7a78 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b77cc:	2b00      	cmp	r3, #0
   b77ce:	f040 8162 	bne.w	b7a96 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b77d2:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b77d6:	6005      	str	r5, [r0, #0]
   b77d8:	e0a5      	b.n	b7926 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b77da:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b77de:	d037      	beq.n	b7850 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b77e0:	d82e      	bhi.n	b7840 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b77e2:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b77e6:	d033      	beq.n	b7850 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b77e8:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b77ec:	d1db      	bne.n	b77a6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b77ee:	2b00      	cmp	r3, #0
   b77f0:	d0d1      	beq.n	b7796 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b77f2:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b77f6:	6845      	ldr	r5, [r0, #4]
   b77f8:	3d01      	subs	r5, #1
   b77fa:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b77fe:	2d00      	cmp	r5, #0
   b7800:	db55      	blt.n	b78ae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b7802:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b7806:	3701      	adds	r7, #1
   b7808:	d04d      	beq.n	b78a6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b780a:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b780e:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b7812:	d148      	bne.n	b78a6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b7814:	f898 b000 	ldrb.w	fp, [r8]
   b7818:	45cb      	cmp	fp, r9
   b781a:	d14b      	bne.n	b78b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b781c:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b7820:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b7824:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b7828:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b782c:	f8de 7004 	ldr.w	r7, [lr, #4]
   b7830:	3701      	adds	r7, #1
   b7832:	d042      	beq.n	b78ba <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b7834:	f8de 7008 	ldr.w	r7, [lr, #8]
   b7838:	3701      	adds	r7, #1
   b783a:	d13e      	bne.n	b78ba <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b783c:	6085      	str	r5, [r0, #8]
				break;
   b783e:	e7aa      	b.n	b7796 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b7840:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b7844:	d1af      	bne.n	b77a6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b7846:	2b00      	cmp	r3, #0
   b7848:	d0a5      	beq.n	b7796 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b784a:	f04f 0901 	mov.w	r9, #1
   b784e:	e7d2      	b.n	b77f6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b7850:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b7852:	2b00      	cmp	r3, #0
   b7854:	d09f      	beq.n	b7796 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b7856:	6845      	ldr	r5, [r0, #4]
   b7858:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b785a:	42af      	cmp	r7, r5
   b785c:	d94a      	bls.n	b78f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b785e:	f105 0e01 	add.w	lr, r5, #1
   b7862:	f8c0 e004 	str.w	lr, [r0, #4]
   b7866:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b786a:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b786e:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b7872:	2500      	movs	r5, #0
   b7874:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b7878:	6885      	ldr	r5, [r0, #8]
   b787a:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b787c:	bf1f      	itttt	ne
   b787e:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b7882:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b7886:	3501      	addne	r5, #1
   b7888:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b788c:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b7890:	bf0c      	ite	eq
   b7892:	2501      	moveq	r5, #1
   b7894:	2502      	movne	r5, #2
   b7896:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b789a:	6805      	ldr	r5, [r0, #0]
   b789c:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b78a0:	6845      	ldr	r5, [r0, #4]
   b78a2:	3d01      	subs	r5, #1
   b78a4:	e7ca      	b.n	b783c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b78a6:	3d01      	subs	r5, #1
   b78a8:	f1a8 0810 	sub.w	r8, r8, #16
   b78ac:	e7a7      	b.n	b77fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b78ae:	3501      	adds	r5, #1
   b78b0:	f47f af71 	bne.w	b7796 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b78b4:	f06f 0401 	mvn.w	r4, #1
   b78b8:	e01e      	b.n	b78f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b78ba:	3d01      	subs	r5, #1
   b78bc:	1c6f      	adds	r7, r5, #1
   b78be:	f1ae 0e10 	sub.w	lr, lr, #16
   b78c2:	d1b3      	bne.n	b782c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b78c4:	e767      	b.n	b7796 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b78c6:	f10e 0901 	add.w	r9, lr, #1
   b78ca:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b78ce:	f8d0 8000 	ldr.w	r8, [r0]
   b78d2:	4542      	cmp	r2, r8
   b78d4:	f240 8093 	bls.w	b79fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b78d8:	f811 5008 	ldrb.w	r5, [r1, r8]
   b78dc:	2d00      	cmp	r5, #0
   b78de:	f000 808e 	beq.w	b79fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b78e2:	2d22      	cmp	r5, #34	; 0x22
   b78e4:	d130      	bne.n	b7948 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b78e6:	b1f3      	cbz	r3, b7926 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b78e8:	6845      	ldr	r5, [r0, #4]
   b78ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b78ec:	42af      	cmp	r7, r5
   b78ee:	d806      	bhi.n	b78fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b78f0:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b78f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b78f8:	4620      	mov	r0, r4
   b78fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b78fe:	f105 0e01 	add.w	lr, r5, #1
   b7902:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b7906:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b790a:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b790e:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b7912:	2700      	movs	r7, #0
   b7914:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b7916:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b791a:	f04f 0a03 	mov.w	sl, #3
   b791e:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b7922:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b7926:	6885      	ldr	r5, [r0, #8]
   b7928:	1c6f      	adds	r7, r5, #1
				count++;
   b792a:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b792e:	f43f af32 	beq.w	b7796 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b7932:	2b00      	cmp	r3, #0
   b7934:	f43f af2f 	beq.w	b7796 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b7938:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b793c:	f8de 500c 	ldr.w	r5, [lr, #12]
   b7940:	3501      	adds	r5, #1
   b7942:	f8ce 500c 	str.w	r5, [lr, #12]
   b7946:	e726      	b.n	b7796 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b7948:	2d5c      	cmp	r5, #92	; 0x5c
   b794a:	d111      	bne.n	b7970 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b794c:	f108 0501 	add.w	r5, r8, #1
   b7950:	42aa      	cmp	r2, r5
   b7952:	d90d      	bls.n	b7970 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b7954:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b7956:	5d4d      	ldrb	r5, [r1, r5]
   b7958:	2d75      	cmp	r5, #117	; 0x75
   b795a:	d82b      	bhi.n	b79b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b795c:	2d6d      	cmp	r5, #109	; 0x6d
   b795e:	d80b      	bhi.n	b7978 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b7960:	2d66      	cmp	r5, #102	; 0x66
   b7962:	d827      	bhi.n	b79b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b7964:	2d5b      	cmp	r5, #91	; 0x5b
   b7966:	d81d      	bhi.n	b79a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b7968:	2d22      	cmp	r5, #34	; 0x22
   b796a:	d001      	beq.n	b7970 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b796c:	2d2f      	cmp	r5, #47	; 0x2f
   b796e:	d121      	bne.n	b79b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b7970:	6805      	ldr	r5, [r0, #0]
   b7972:	3501      	adds	r5, #1
   b7974:	6005      	str	r5, [r0, #0]
   b7976:	e7aa      	b.n	b78ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b7978:	3d6e      	subs	r5, #110	; 0x6e
   b797a:	2d07      	cmp	r5, #7
   b797c:	d81a      	bhi.n	b79b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b797e:	a701      	add	r7, pc, #4	; (adr r7, b7984 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b7980:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b7984:	000b7971 	.word	0x000b7971
   b7988:	000b79b5 	.word	0x000b79b5
   b798c:	000b79b5 	.word	0x000b79b5
   b7990:	000b79b5 	.word	0x000b79b5
   b7994:	000b7971 	.word	0x000b7971
   b7998:	000b79b5 	.word	0x000b79b5
   b799c:	000b7971 	.word	0x000b7971
   b79a0:	000b79bb 	.word	0x000b79bb
   b79a4:	3d5c      	subs	r5, #92	; 0x5c
   b79a6:	b2ed      	uxtb	r5, r5
   b79a8:	fa0c f505 	lsl.w	r5, ip, r5
   b79ac:	f240 4741 	movw	r7, #1089	; 0x441
   b79b0:	423d      	tst	r5, r7
   b79b2:	d1dd      	bne.n	b7970 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b79b4:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b79b8:	e77c      	b.n	b78b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b79ba:	f108 0502 	add.w	r5, r8, #2
   b79be:	6005      	str	r5, [r0, #0]
   b79c0:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b79c4:	f8d0 8000 	ldr.w	r8, [r0]
   b79c8:	4542      	cmp	r2, r8
   b79ca:	d803      	bhi.n	b79d4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b79cc:	6805      	ldr	r5, [r0, #0]
   b79ce:	3d01      	subs	r5, #1
   b79d0:	6005      	str	r5, [r0, #0]
					break;
   b79d2:	e7cd      	b.n	b7970 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b79d4:	f811 5008 	ldrb.w	r5, [r1, r8]
   b79d8:	2d00      	cmp	r5, #0
   b79da:	d0f7      	beq.n	b79cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b79dc:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b79e0:	f1bb 0f09 	cmp.w	fp, #9
   b79e4:	d904      	bls.n	b79f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b79e6:	f025 0520 	bic.w	r5, r5, #32
   b79ea:	3d41      	subs	r5, #65	; 0x41
   b79ec:	2d05      	cmp	r5, #5
   b79ee:	d8e1      	bhi.n	b79b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b79f0:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b79f4:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b79f8:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b79fa:	d1e3      	bne.n	b79c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b79fc:	e7e6      	b.n	b79cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b79fe:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b7a02:	f06f 0402 	mvn.w	r4, #2
   b7a06:	e777      	b.n	b78f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b7a08:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b7a0c:	2b00      	cmp	r3, #0
   b7a0e:	f43f aec2 	beq.w	b7796 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b7a12:	6885      	ldr	r5, [r0, #8]
   b7a14:	1c6f      	adds	r7, r5, #1
   b7a16:	f43f aebe 	beq.w	b7796 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b7a1a:	012d      	lsls	r5, r5, #4
   b7a1c:	5d5d      	ldrb	r5, [r3, r5]
   b7a1e:	3d01      	subs	r5, #1
   b7a20:	2d01      	cmp	r5, #1
   b7a22:	f67f aeb8 	bls.w	b7796 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b7a26:	6845      	ldr	r5, [r0, #4]
   b7a28:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b7a2c:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b7a30:	f1b8 0f00 	cmp.w	r8, #0
   b7a34:	f6ff aeaf 	blt.w	b7796 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b7a38:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b7a3c:	3d01      	subs	r5, #1
   b7a3e:	2d01      	cmp	r5, #1
   b7a40:	d80a      	bhi.n	b7a58 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b7a42:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b7a46:	3501      	adds	r5, #1
   b7a48:	d006      	beq.n	b7a58 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b7a4a:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b7a4e:	3501      	adds	r5, #1
   b7a50:	d102      	bne.n	b7a58 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b7a52:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b7a56:	e69e      	b.n	b7796 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b7a58:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b7a5c:	f1ae 0e10 	sub.w	lr, lr, #16
   b7a60:	e7e6      	b.n	b7a30 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b7a62:	f1a5 0920 	sub.w	r9, r5, #32
   b7a66:	4f24      	ldr	r7, [pc, #144]	; (b7af8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b7a68:	fa5f f989 	uxtb.w	r9, r9
   b7a6c:	fa0c f909 	lsl.w	r9, ip, r9
   b7a70:	ea19 0f07 	tst.w	r9, r7
   b7a74:	f47f aeaa 	bne.w	b77cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b7a78:	3d20      	subs	r5, #32
   b7a7a:	2d5e      	cmp	r5, #94	; 0x5e
   b7a7c:	d89a      	bhi.n	b79b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b7a7e:	f108 0501 	add.w	r5, r8, #1
   b7a82:	6005      	str	r5, [r0, #0]
   b7a84:	e68f      	b.n	b77a6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b7a86:	2d0d      	cmp	r5, #13
   b7a88:	d1f6      	bne.n	b7a78 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b7a8a:	e69f      	b.n	b77cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b7a8c:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b7a90:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b7a94:	e7f8      	b.n	b7a88 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b7a96:	6845      	ldr	r5, [r0, #4]
   b7a98:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b7a9a:	42af      	cmp	r7, r5
   b7a9c:	f67f af28 	bls.w	b78f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b7aa0:	f105 0801 	add.w	r8, r5, #1
   b7aa4:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b7aa8:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b7aac:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b7ab0:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b7ab4:	2700      	movs	r7, #0
   b7ab6:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b7ab8:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b7abc:	f04f 0a04 	mov.w	sl, #4
   b7ac0:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b7ac4:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b7ac8:	6805      	ldr	r5, [r0, #0]
   b7aca:	3d01      	subs	r5, #1
   b7acc:	e683      	b.n	b77d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b7ace:	2b00      	cmp	r3, #0
   b7ad0:	f43f af12 	beq.w	b78f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b7ad4:	6842      	ldr	r2, [r0, #4]
   b7ad6:	1e51      	subs	r1, r2, #1
   b7ad8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b7adc:	2900      	cmp	r1, #0
   b7ade:	f6ff af0b 	blt.w	b78f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b7ae2:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b7ae6:	3201      	adds	r2, #1
   b7ae8:	d003      	beq.n	b7af2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b7aea:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b7aee:	3201      	adds	r2, #1
   b7af0:	d087      	beq.n	b7a02 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b7af2:	3901      	subs	r1, #1
   b7af4:	3b10      	subs	r3, #16
   b7af6:	e7f1      	b.n	b7adc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b7af8:	04001001 	.word	0x04001001

000b7afc <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b7afc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b7afe:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b7b00:	4604      	mov	r4, r0
	if (offset == 0) {
   b7b02:	b912      	cbnz	r2, b7b0a <_ZN10JsonParser5parseEv+0xe>
		return false;
   b7b04:	2000      	movs	r0, #0
}
   b7b06:	b003      	add	sp, #12
   b7b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b7b0a:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b7b0c:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b7b10:	b1ab      	cbz	r3, b7b3e <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b7b12:	2100      	movs	r1, #0
	parser->toknext = 0;
   b7b14:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b7b18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b7b1c:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b7b1e:	69c1      	ldr	r1, [r0, #28]
   b7b20:	9100      	str	r1, [sp, #0]
   b7b22:	6841      	ldr	r1, [r0, #4]
   b7b24:	4630      	mov	r0, r6
   b7b26:	f7ff fe0d 	bl	b7744 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b7b2a:	1c43      	adds	r3, r0, #1
   b7b2c:	d128      	bne.n	b7b80 <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b7b2e:	7c25      	ldrb	r5, [r4, #16]
   b7b30:	2d00      	cmp	r5, #0
   b7b32:	d1e7      	bne.n	b7b04 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b7b34:	6960      	ldr	r0, [r4, #20]
   b7b36:	f000 fa83 	bl	b8040 <free>
			tokens = 0;
   b7b3a:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b7b3c:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b7b3e:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b7b40:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b7b44:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b7b48:	68e2      	ldr	r2, [r4, #12]
   b7b4a:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b7b4c:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b7b4e:	9500      	str	r5, [sp, #0]
   b7b50:	462b      	mov	r3, r5
   b7b52:	4630      	mov	r0, r6
   b7b54:	f7ff fdf6 	bl	b7744 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b7b58:	2800      	cmp	r0, #0
   b7b5a:	dbd3      	blt.n	b7b04 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b7b5c:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b7b5e:	d017      	beq.n	b7b90 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b7b60:	0100      	lsls	r0, r0, #4
   b7b62:	f000 fa65 	bl	b8030 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b7b66:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b7b68:	6160      	str	r0, [r4, #20]
   b7b6a:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b7b6c:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b7b6e:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b7b72:	68e2      	ldr	r2, [r4, #12]
   b7b74:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b7b76:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b7b78:	4630      	mov	r0, r6
   b7b7a:	f7ff fde3 	bl	b7744 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b7b7e:	e001      	b.n	b7b84 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b7b80:	2800      	cmp	r0, #0
   b7b82:	dbbf      	blt.n	b7b04 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b7b84:	6963      	ldr	r3, [r4, #20]
   b7b86:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b7b8a:	61a0      	str	r0, [r4, #24]
	return true;
   b7b8c:	2001      	movs	r0, #1
   b7b8e:	e7ba      	b.n	b7b06 <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b7b90:	6963      	ldr	r3, [r4, #20]
   b7b92:	61a3      	str	r3, [r4, #24]
   b7b94:	e7fa      	b.n	b7b8c <_ZN10JsonParser5parseEv+0x90>
	...

000b7b98 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b7b98:	b508      	push	{r3, lr}
   b7b9a:	4b02      	ldr	r3, [pc, #8]	; (b7ba4 <hal_ble_stack_init+0xc>)
   b7b9c:	681b      	ldr	r3, [r3, #0]
   b7b9e:	689b      	ldr	r3, [r3, #8]
   b7ba0:	9301      	str	r3, [sp, #4]
   b7ba2:	bd08      	pop	{r3, pc}
   b7ba4:	00030278 	.word	0x00030278

000b7ba8 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b7ba8:	b508      	push	{r3, lr}
   b7baa:	4b02      	ldr	r3, [pc, #8]	; (b7bb4 <hal_ble_gap_set_advertising_data+0xc>)
   b7bac:	681b      	ldr	r3, [r3, #0]
   b7bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7bb0:	9301      	str	r3, [sp, #4]
   b7bb2:	bd08      	pop	{r3, pc}
   b7bb4:	00030278 	.word	0x00030278

000b7bb8 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b7bb8:	b508      	push	{r3, lr}
   b7bba:	4b02      	ldr	r3, [pc, #8]	; (b7bc4 <hal_ble_gap_set_scan_response_data+0xc>)
   b7bbc:	681b      	ldr	r3, [r3, #0]
   b7bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b7bc0:	9301      	str	r3, [sp, #4]
   b7bc2:	bd08      	pop	{r3, pc}
   b7bc4:	00030278 	.word	0x00030278

000b7bc8 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b7bc8:	b508      	push	{r3, lr}
   b7bca:	4b02      	ldr	r3, [pc, #8]	; (b7bd4 <hal_ble_gap_start_advertising+0xc>)
   b7bcc:	681b      	ldr	r3, [r3, #0]
   b7bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b7bd0:	9301      	str	r3, [sp, #4]
   b7bd2:	bd08      	pop	{r3, pc}
   b7bd4:	00030278 	.word	0x00030278

000b7bd8 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b7bd8:	b508      	push	{r3, lr}
   b7bda:	4b03      	ldr	r3, [pc, #12]	; (b7be8 <hal_ble_gap_disconnect+0x10>)
   b7bdc:	681b      	ldr	r3, [r3, #0]
   b7bde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b7be2:	9301      	str	r3, [sp, #4]
   b7be4:	bd08      	pop	{r3, pc}
   b7be6:	0000      	.short	0x0000
   b7be8:	00030278 	.word	0x00030278

000b7bec <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b7bec:	b508      	push	{r3, lr}
   b7bee:	4b03      	ldr	r3, [pc, #12]	; (b7bfc <hal_ble_gatt_server_add_service+0x10>)
   b7bf0:	681b      	ldr	r3, [r3, #0]
   b7bf2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b7bf6:	9301      	str	r3, [sp, #4]
   b7bf8:	bd08      	pop	{r3, pc}
   b7bfa:	0000      	.short	0x0000
   b7bfc:	00030278 	.word	0x00030278

000b7c00 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b7c00:	b508      	push	{r3, lr}
   b7c02:	4b03      	ldr	r3, [pc, #12]	; (b7c10 <hal_ble_gatt_server_add_characteristic+0x10>)
   b7c04:	681b      	ldr	r3, [r3, #0]
   b7c06:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b7c0a:	9301      	str	r3, [sp, #4]
   b7c0c:	bd08      	pop	{r3, pc}
   b7c0e:	0000      	.short	0x0000
   b7c10:	00030278 	.word	0x00030278

000b7c14 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b7c14:	b508      	push	{r3, lr}
   b7c16:	4b03      	ldr	r3, [pc, #12]	; (b7c24 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b7c18:	681b      	ldr	r3, [r3, #0]
   b7c1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b7c1e:	9301      	str	r3, [sp, #4]
   b7c20:	bd08      	pop	{r3, pc}
   b7c22:	0000      	.short	0x0000
   b7c24:	00030278 	.word	0x00030278

000b7c28 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b7c28:	b508      	push	{r3, lr}
   b7c2a:	4b02      	ldr	r3, [pc, #8]	; (b7c34 <os_mutex_recursive_create+0xc>)
   b7c2c:	681b      	ldr	r3, [r3, #0]
   b7c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7c30:	9301      	str	r3, [sp, #4]
   b7c32:	bd08      	pop	{r3, pc}
   b7c34:	00030248 	.word	0x00030248

000b7c38 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b7c38:	b508      	push	{r3, lr}
   b7c3a:	4b02      	ldr	r3, [pc, #8]	; (b7c44 <os_mutex_recursive_lock+0xc>)
   b7c3c:	681b      	ldr	r3, [r3, #0]
   b7c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7c40:	9301      	str	r3, [sp, #4]
   b7c42:	bd08      	pop	{r3, pc}
   b7c44:	00030248 	.word	0x00030248

000b7c48 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b7c48:	b508      	push	{r3, lr}
   b7c4a:	4b02      	ldr	r3, [pc, #8]	; (b7c54 <os_mutex_recursive_unlock+0xc>)
   b7c4c:	681b      	ldr	r3, [r3, #0]
   b7c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7c50:	9301      	str	r3, [sp, #4]
   b7c52:	bd08      	pop	{r3, pc}
   b7c54:	00030248 	.word	0x00030248

000b7c58 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b7c58:	b508      	push	{r3, lr}
   b7c5a:	4b02      	ldr	r3, [pc, #8]	; (b7c64 <HAL_RNG_GetRandomNumber+0xc>)
   b7c5c:	681b      	ldr	r3, [r3, #0]
   b7c5e:	685b      	ldr	r3, [r3, #4]
   b7c60:	9301      	str	r3, [sp, #4]
   b7c62:	bd08      	pop	{r3, pc}
   b7c64:	00030218 	.word	0x00030218

000b7c68 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b7c68:	b508      	push	{r3, lr}
   b7c6a:	4b02      	ldr	r3, [pc, #8]	; (b7c74 <HAL_Delay_Microseconds+0xc>)
   b7c6c:	681b      	ldr	r3, [r3, #0]
   b7c6e:	68db      	ldr	r3, [r3, #12]
   b7c70:	9301      	str	r3, [sp, #4]
   b7c72:	bd08      	pop	{r3, pc}
   b7c74:	00030218 	.word	0x00030218

000b7c78 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b7c78:	b508      	push	{r3, lr}
   b7c7a:	4b02      	ldr	r3, [pc, #8]	; (b7c84 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b7c7c:	681b      	ldr	r3, [r3, #0]
   b7c7e:	695b      	ldr	r3, [r3, #20]
   b7c80:	9301      	str	r3, [sp, #4]
   b7c82:	bd08      	pop	{r3, pc}
   b7c84:	00030218 	.word	0x00030218

000b7c88 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b7c88:	b508      	push	{r3, lr}
   b7c8a:	4b02      	ldr	r3, [pc, #8]	; (b7c94 <hal_i2c_begin+0xc>)
   b7c8c:	681b      	ldr	r3, [r3, #0]
   b7c8e:	68db      	ldr	r3, [r3, #12]
   b7c90:	9301      	str	r3, [sp, #4]
   b7c92:	bd08      	pop	{r3, pc}
   b7c94:	00030228 	.word	0x00030228

000b7c98 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b7c98:	b508      	push	{r3, lr}
   b7c9a:	4b02      	ldr	r3, [pc, #8]	; (b7ca4 <hal_i2c_begin_transmission+0xc>)
   b7c9c:	681b      	ldr	r3, [r3, #0]
   b7c9e:	699b      	ldr	r3, [r3, #24]
   b7ca0:	9301      	str	r3, [sp, #4]
   b7ca2:	bd08      	pop	{r3, pc}
   b7ca4:	00030228 	.word	0x00030228

000b7ca8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b7ca8:	b508      	push	{r3, lr}
   b7caa:	4b02      	ldr	r3, [pc, #8]	; (b7cb4 <hal_i2c_end_transmission+0xc>)
   b7cac:	681b      	ldr	r3, [r3, #0]
   b7cae:	69db      	ldr	r3, [r3, #28]
   b7cb0:	9301      	str	r3, [sp, #4]
   b7cb2:	bd08      	pop	{r3, pc}
   b7cb4:	00030228 	.word	0x00030228

000b7cb8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b7cb8:	b508      	push	{r3, lr}
   b7cba:	4b02      	ldr	r3, [pc, #8]	; (b7cc4 <hal_i2c_write+0xc>)
   b7cbc:	681b      	ldr	r3, [r3, #0]
   b7cbe:	6a1b      	ldr	r3, [r3, #32]
   b7cc0:	9301      	str	r3, [sp, #4]
   b7cc2:	bd08      	pop	{r3, pc}
   b7cc4:	00030228 	.word	0x00030228

000b7cc8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b7cc8:	b508      	push	{r3, lr}
   b7cca:	4b02      	ldr	r3, [pc, #8]	; (b7cd4 <hal_i2c_available+0xc>)
   b7ccc:	681b      	ldr	r3, [r3, #0]
   b7cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7cd0:	9301      	str	r3, [sp, #4]
   b7cd2:	bd08      	pop	{r3, pc}
   b7cd4:	00030228 	.word	0x00030228

000b7cd8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b7cd8:	b508      	push	{r3, lr}
   b7cda:	4b02      	ldr	r3, [pc, #8]	; (b7ce4 <hal_i2c_read+0xc>)
   b7cdc:	681b      	ldr	r3, [r3, #0]
   b7cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7ce0:	9301      	str	r3, [sp, #4]
   b7ce2:	bd08      	pop	{r3, pc}
   b7ce4:	00030228 	.word	0x00030228

000b7ce8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b7ce8:	b508      	push	{r3, lr}
   b7cea:	4b02      	ldr	r3, [pc, #8]	; (b7cf4 <hal_i2c_peek+0xc>)
   b7cec:	681b      	ldr	r3, [r3, #0]
   b7cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7cf0:	9301      	str	r3, [sp, #4]
   b7cf2:	bd08      	pop	{r3, pc}
   b7cf4:	00030228 	.word	0x00030228

000b7cf8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b7cf8:	b508      	push	{r3, lr}
   b7cfa:	4b02      	ldr	r3, [pc, #8]	; (b7d04 <hal_i2c_flush+0xc>)
   b7cfc:	681b      	ldr	r3, [r3, #0]
   b7cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7d00:	9301      	str	r3, [sp, #4]
   b7d02:	bd08      	pop	{r3, pc}
   b7d04:	00030228 	.word	0x00030228

000b7d08 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b7d08:	b508      	push	{r3, lr}
   b7d0a:	4b02      	ldr	r3, [pc, #8]	; (b7d14 <hal_i2c_init+0xc>)
   b7d0c:	681b      	ldr	r3, [r3, #0]
   b7d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7d10:	9301      	str	r3, [sp, #4]
   b7d12:	bd08      	pop	{r3, pc}
   b7d14:	00030228 	.word	0x00030228

000b7d18 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b7d18:	b508      	push	{r3, lr}
   b7d1a:	4b02      	ldr	r3, [pc, #8]	; (b7d24 <hal_i2c_request_ex+0xc>)
   b7d1c:	681b      	ldr	r3, [r3, #0]
   b7d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7d20:	9301      	str	r3, [sp, #4]
   b7d22:	bd08      	pop	{r3, pc}
   b7d24:	00030228 	.word	0x00030228

000b7d28 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b7d28:	b508      	push	{r3, lr}
   b7d2a:	4b02      	ldr	r3, [pc, #8]	; (b7d34 <if_index_to_name+0xc>)
   b7d2c:	681b      	ldr	r3, [r3, #0]
   b7d2e:	695b      	ldr	r3, [r3, #20]
   b7d30:	9301      	str	r3, [sp, #4]
   b7d32:	bd08      	pop	{r3, pc}
   b7d34:	0003026c 	.word	0x0003026c

000b7d38 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b7d38:	b508      	push	{r3, lr}
   b7d3a:	4b02      	ldr	r3, [pc, #8]	; (b7d44 <inet_inet_ntop+0xc>)
   b7d3c:	681b      	ldr	r3, [r3, #0]
   b7d3e:	695b      	ldr	r3, [r3, #20]
   b7d40:	9301      	str	r3, [sp, #4]
   b7d42:	bd08      	pop	{r3, pc}
   b7d44:	00030264 	.word	0x00030264

000b7d48 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b7d48:	b508      	push	{r3, lr}
   b7d4a:	4b02      	ldr	r3, [pc, #8]	; (b7d54 <inet_htonl+0xc>)
   b7d4c:	681b      	ldr	r3, [r3, #0]
   b7d4e:	6a1b      	ldr	r3, [r3, #32]
   b7d50:	9301      	str	r3, [sp, #4]
   b7d52:	bd08      	pop	{r3, pc}
   b7d54:	00030264 	.word	0x00030264

000b7d58 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b7d58:	b508      	push	{r3, lr}
   b7d5a:	4b02      	ldr	r3, [pc, #8]	; (b7d64 <inet_htons+0xc>)
   b7d5c:	681b      	ldr	r3, [r3, #0]
   b7d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7d60:	9301      	str	r3, [sp, #4]
   b7d62:	bd08      	pop	{r3, pc}
   b7d64:	00030264 	.word	0x00030264

000b7d68 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b7d68:	b508      	push	{r3, lr}
   b7d6a:	4b02      	ldr	r3, [pc, #8]	; (b7d74 <netdb_freeaddrinfo+0xc>)
   b7d6c:	681b      	ldr	r3, [r3, #0]
   b7d6e:	689b      	ldr	r3, [r3, #8]
   b7d70:	9301      	str	r3, [sp, #4]
   b7d72:	bd08      	pop	{r3, pc}
   b7d74:	00030268 	.word	0x00030268

000b7d78 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b7d78:	b508      	push	{r3, lr}
   b7d7a:	4b02      	ldr	r3, [pc, #8]	; (b7d84 <netdb_getaddrinfo+0xc>)
   b7d7c:	681b      	ldr	r3, [r3, #0]
   b7d7e:	68db      	ldr	r3, [r3, #12]
   b7d80:	9301      	str	r3, [sp, #4]
   b7d82:	bd08      	pop	{r3, pc}
   b7d84:	00030268 	.word	0x00030268

000b7d88 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b7d88:	b508      	push	{r3, lr}
   b7d8a:	4b02      	ldr	r3, [pc, #8]	; (b7d94 <sock_setsockopt+0xc>)
   b7d8c:	681b      	ldr	r3, [r3, #0]
   b7d8e:	699b      	ldr	r3, [r3, #24]
   b7d90:	9301      	str	r3, [sp, #4]
   b7d92:	bd08      	pop	{r3, pc}
   b7d94:	00030238 	.word	0x00030238

000b7d98 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b7d98:	b508      	push	{r3, lr}
   b7d9a:	4b02      	ldr	r3, [pc, #8]	; (b7da4 <sock_close+0xc>)
   b7d9c:	681b      	ldr	r3, [r3, #0]
   b7d9e:	69db      	ldr	r3, [r3, #28]
   b7da0:	9301      	str	r3, [sp, #4]
   b7da2:	bd08      	pop	{r3, pc}
   b7da4:	00030238 	.word	0x00030238

000b7da8 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b7da8:	b508      	push	{r3, lr}
   b7daa:	4b02      	ldr	r3, [pc, #8]	; (b7db4 <sock_connect+0xc>)
   b7dac:	681b      	ldr	r3, [r3, #0]
   b7dae:	6a1b      	ldr	r3, [r3, #32]
   b7db0:	9301      	str	r3, [sp, #4]
   b7db2:	bd08      	pop	{r3, pc}
   b7db4:	00030238 	.word	0x00030238

000b7db8 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b7db8:	b508      	push	{r3, lr}
   b7dba:	4b02      	ldr	r3, [pc, #8]	; (b7dc4 <sock_recv+0xc>)
   b7dbc:	681b      	ldr	r3, [r3, #0]
   b7dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7dc0:	9301      	str	r3, [sp, #4]
   b7dc2:	bd08      	pop	{r3, pc}
   b7dc4:	00030238 	.word	0x00030238

000b7dc8 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b7dc8:	b508      	push	{r3, lr}
   b7dca:	4b02      	ldr	r3, [pc, #8]	; (b7dd4 <sock_send+0xc>)
   b7dcc:	681b      	ldr	r3, [r3, #0]
   b7dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7dd0:	9301      	str	r3, [sp, #4]
   b7dd2:	bd08      	pop	{r3, pc}
   b7dd4:	00030238 	.word	0x00030238

000b7dd8 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b7dd8:	b508      	push	{r3, lr}
   b7dda:	4b02      	ldr	r3, [pc, #8]	; (b7de4 <sock_socket+0xc>)
   b7ddc:	681b      	ldr	r3, [r3, #0]
   b7dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b7de0:	9301      	str	r3, [sp, #4]
   b7de2:	bd08      	pop	{r3, pc}
   b7de4:	00030238 	.word	0x00030238

000b7de8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b7de8:	b508      	push	{r3, lr}
   b7dea:	4b02      	ldr	r3, [pc, #8]	; (b7df4 <hal_usart_write+0xc>)
   b7dec:	681b      	ldr	r3, [r3, #0]
   b7dee:	68db      	ldr	r3, [r3, #12]
   b7df0:	9301      	str	r3, [sp, #4]
   b7df2:	bd08      	pop	{r3, pc}
   b7df4:	0003023c 	.word	0x0003023c

000b7df8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b7df8:	b508      	push	{r3, lr}
   b7dfa:	4b02      	ldr	r3, [pc, #8]	; (b7e04 <hal_usart_available+0xc>)
   b7dfc:	681b      	ldr	r3, [r3, #0]
   b7dfe:	691b      	ldr	r3, [r3, #16]
   b7e00:	9301      	str	r3, [sp, #4]
   b7e02:	bd08      	pop	{r3, pc}
   b7e04:	0003023c 	.word	0x0003023c

000b7e08 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b7e08:	b508      	push	{r3, lr}
   b7e0a:	4b02      	ldr	r3, [pc, #8]	; (b7e14 <hal_usart_read+0xc>)
   b7e0c:	681b      	ldr	r3, [r3, #0]
   b7e0e:	695b      	ldr	r3, [r3, #20]
   b7e10:	9301      	str	r3, [sp, #4]
   b7e12:	bd08      	pop	{r3, pc}
   b7e14:	0003023c 	.word	0x0003023c

000b7e18 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b7e18:	b508      	push	{r3, lr}
   b7e1a:	4b02      	ldr	r3, [pc, #8]	; (b7e24 <hal_usart_peek+0xc>)
   b7e1c:	681b      	ldr	r3, [r3, #0]
   b7e1e:	699b      	ldr	r3, [r3, #24]
   b7e20:	9301      	str	r3, [sp, #4]
   b7e22:	bd08      	pop	{r3, pc}
   b7e24:	0003023c 	.word	0x0003023c

000b7e28 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b7e28:	b508      	push	{r3, lr}
   b7e2a:	4b02      	ldr	r3, [pc, #8]	; (b7e34 <hal_usart_flush+0xc>)
   b7e2c:	681b      	ldr	r3, [r3, #0]
   b7e2e:	69db      	ldr	r3, [r3, #28]
   b7e30:	9301      	str	r3, [sp, #4]
   b7e32:	bd08      	pop	{r3, pc}
   b7e34:	0003023c 	.word	0x0003023c

000b7e38 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b7e38:	b508      	push	{r3, lr}
   b7e3a:	4b02      	ldr	r3, [pc, #8]	; (b7e44 <hal_usart_available_data_for_write+0xc>)
   b7e3c:	681b      	ldr	r3, [r3, #0]
   b7e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7e40:	9301      	str	r3, [sp, #4]
   b7e42:	bd08      	pop	{r3, pc}
   b7e44:	0003023c 	.word	0x0003023c

000b7e48 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b7e48:	b508      	push	{r3, lr}
   b7e4a:	4b02      	ldr	r3, [pc, #8]	; (b7e54 <hal_usart_init_ex+0xc>)
   b7e4c:	681b      	ldr	r3, [r3, #0]
   b7e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7e50:	9301      	str	r3, [sp, #4]
   b7e52:	bd08      	pop	{r3, pc}
   b7e54:	0003023c 	.word	0x0003023c

000b7e58 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b7e58:	b508      	push	{r3, lr}
   b7e5a:	4b02      	ldr	r3, [pc, #8]	; (b7e64 <HAL_USB_USART_Init+0xc>)
   b7e5c:	681b      	ldr	r3, [r3, #0]
   b7e5e:	681b      	ldr	r3, [r3, #0]
   b7e60:	9301      	str	r3, [sp, #4]
   b7e62:	bd08      	pop	{r3, pc}
   b7e64:	0003024c 	.word	0x0003024c

000b7e68 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b7e68:	b508      	push	{r3, lr}
   b7e6a:	4b02      	ldr	r3, [pc, #8]	; (b7e74 <HAL_USB_USART_Begin+0xc>)
   b7e6c:	681b      	ldr	r3, [r3, #0]
   b7e6e:	685b      	ldr	r3, [r3, #4]
   b7e70:	9301      	str	r3, [sp, #4]
   b7e72:	bd08      	pop	{r3, pc}
   b7e74:	0003024c 	.word	0x0003024c

000b7e78 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b7e78:	b508      	push	{r3, lr}
   b7e7a:	4b02      	ldr	r3, [pc, #8]	; (b7e84 <HAL_USB_USART_Available_Data+0xc>)
   b7e7c:	681b      	ldr	r3, [r3, #0]
   b7e7e:	691b      	ldr	r3, [r3, #16]
   b7e80:	9301      	str	r3, [sp, #4]
   b7e82:	bd08      	pop	{r3, pc}
   b7e84:	0003024c 	.word	0x0003024c

000b7e88 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b7e88:	b508      	push	{r3, lr}
   b7e8a:	4b02      	ldr	r3, [pc, #8]	; (b7e94 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b7e8c:	681b      	ldr	r3, [r3, #0]
   b7e8e:	695b      	ldr	r3, [r3, #20]
   b7e90:	9301      	str	r3, [sp, #4]
   b7e92:	bd08      	pop	{r3, pc}
   b7e94:	0003024c 	.word	0x0003024c

000b7e98 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7e98:	b508      	push	{r3, lr}
   b7e9a:	4b02      	ldr	r3, [pc, #8]	; (b7ea4 <HAL_USB_USART_Receive_Data+0xc>)
   b7e9c:	681b      	ldr	r3, [r3, #0]
   b7e9e:	699b      	ldr	r3, [r3, #24]
   b7ea0:	9301      	str	r3, [sp, #4]
   b7ea2:	bd08      	pop	{r3, pc}
   b7ea4:	0003024c 	.word	0x0003024c

000b7ea8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7ea8:	b508      	push	{r3, lr}
   b7eaa:	4b02      	ldr	r3, [pc, #8]	; (b7eb4 <HAL_USB_USART_Send_Data+0xc>)
   b7eac:	681b      	ldr	r3, [r3, #0]
   b7eae:	69db      	ldr	r3, [r3, #28]
   b7eb0:	9301      	str	r3, [sp, #4]
   b7eb2:	bd08      	pop	{r3, pc}
   b7eb4:	0003024c 	.word	0x0003024c

000b7eb8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7eb8:	b508      	push	{r3, lr}
   b7eba:	4b02      	ldr	r3, [pc, #8]	; (b7ec4 <HAL_USB_USART_Flush_Data+0xc>)
   b7ebc:	681b      	ldr	r3, [r3, #0]
   b7ebe:	6a1b      	ldr	r3, [r3, #32]
   b7ec0:	9301      	str	r3, [sp, #4]
   b7ec2:	bd08      	pop	{r3, pc}
   b7ec4:	0003024c 	.word	0x0003024c

000b7ec8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7ec8:	b508      	push	{r3, lr}
   b7eca:	4b02      	ldr	r3, [pc, #8]	; (b7ed4 <panic_+0xc>)
   b7ecc:	681b      	ldr	r3, [r3, #0]
   b7ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7ed0:	9301      	str	r3, [sp, #4]
   b7ed2:	bd08      	pop	{r3, pc}
   b7ed4:	00030260 	.word	0x00030260

000b7ed8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b7ed8:	b508      	push	{r3, lr}
   b7eda:	4b02      	ldr	r3, [pc, #8]	; (b7ee4 <log_message+0xc>)
   b7edc:	681b      	ldr	r3, [r3, #0]
   b7ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7ee0:	9301      	str	r3, [sp, #4]
   b7ee2:	bd08      	pop	{r3, pc}
   b7ee4:	00030260 	.word	0x00030260

000b7ee8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7ee8:	b508      	push	{r3, lr}
   b7eea:	4b02      	ldr	r3, [pc, #8]	; (b7ef4 <set_system_mode+0xc>)
   b7eec:	681b      	ldr	r3, [r3, #0]
   b7eee:	685b      	ldr	r3, [r3, #4]
   b7ef0:	9301      	str	r3, [sp, #4]
   b7ef2:	bd08      	pop	{r3, pc}
   b7ef4:	00030220 	.word	0x00030220

000b7ef8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7ef8:	b508      	push	{r3, lr}
   b7efa:	4b02      	ldr	r3, [pc, #8]	; (b7f04 <system_delay_ms+0xc>)
   b7efc:	681b      	ldr	r3, [r3, #0]
   b7efe:	695b      	ldr	r3, [r3, #20]
   b7f00:	9301      	str	r3, [sp, #4]
   b7f02:	bd08      	pop	{r3, pc}
   b7f04:	00030220 	.word	0x00030220

000b7f08 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7f08:	b508      	push	{r3, lr}
   b7f0a:	4b03      	ldr	r3, [pc, #12]	; (b7f18 <system_ctrl_set_app_request_handler+0x10>)
   b7f0c:	681b      	ldr	r3, [r3, #0]
   b7f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b7f12:	9301      	str	r3, [sp, #4]
   b7f14:	bd08      	pop	{r3, pc}
   b7f16:	0000      	.short	0x0000
   b7f18:	00030220 	.word	0x00030220

000b7f1c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7f1c:	b508      	push	{r3, lr}
   b7f1e:	4b03      	ldr	r3, [pc, #12]	; (b7f2c <system_ctrl_set_result+0x10>)
   b7f20:	681b      	ldr	r3, [r3, #0]
   b7f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b7f26:	9301      	str	r3, [sp, #4]
   b7f28:	bd08      	pop	{r3, pc}
   b7f2a:	0000      	.short	0x0000
   b7f2c:	00030220 	.word	0x00030220

000b7f30 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7f30:	b508      	push	{r3, lr}
   b7f32:	4b02      	ldr	r3, [pc, #8]	; (b7f3c <spark_set_random_seed_from_cloud_handler+0xc>)
   b7f34:	681b      	ldr	r3, [r3, #0]
   b7f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7f38:	9301      	str	r3, [sp, #4]
   b7f3a:	bd08      	pop	{r3, pc}
   b7f3c:	00030244 	.word	0x00030244

000b7f40 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7f40:	b508      	push	{r3, lr}
   b7f42:	4b02      	ldr	r3, [pc, #8]	; (b7f4c <network_connect+0xc>)
   b7f44:	681b      	ldr	r3, [r3, #0]
   b7f46:	685b      	ldr	r3, [r3, #4]
   b7f48:	9301      	str	r3, [sp, #4]
   b7f4a:	bd08      	pop	{r3, pc}
   b7f4c:	00030240 	.word	0x00030240

000b7f50 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7f50:	b508      	push	{r3, lr}
   b7f52:	4b02      	ldr	r3, [pc, #8]	; (b7f5c <network_connecting+0xc>)
   b7f54:	681b      	ldr	r3, [r3, #0]
   b7f56:	689b      	ldr	r3, [r3, #8]
   b7f58:	9301      	str	r3, [sp, #4]
   b7f5a:	bd08      	pop	{r3, pc}
   b7f5c:	00030240 	.word	0x00030240

000b7f60 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7f60:	b508      	push	{r3, lr}
   b7f62:	4b02      	ldr	r3, [pc, #8]	; (b7f6c <network_disconnect+0xc>)
   b7f64:	681b      	ldr	r3, [r3, #0]
   b7f66:	68db      	ldr	r3, [r3, #12]
   b7f68:	9301      	str	r3, [sp, #4]
   b7f6a:	bd08      	pop	{r3, pc}
   b7f6c:	00030240 	.word	0x00030240

000b7f70 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7f70:	b508      	push	{r3, lr}
   b7f72:	4b02      	ldr	r3, [pc, #8]	; (b7f7c <network_ready+0xc>)
   b7f74:	681b      	ldr	r3, [r3, #0]
   b7f76:	691b      	ldr	r3, [r3, #16]
   b7f78:	9301      	str	r3, [sp, #4]
   b7f7a:	bd08      	pop	{r3, pc}
   b7f7c:	00030240 	.word	0x00030240

000b7f80 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7f80:	b508      	push	{r3, lr}
   b7f82:	4b02      	ldr	r3, [pc, #8]	; (b7f8c <network_on+0xc>)
   b7f84:	681b      	ldr	r3, [r3, #0]
   b7f86:	695b      	ldr	r3, [r3, #20]
   b7f88:	9301      	str	r3, [sp, #4]
   b7f8a:	bd08      	pop	{r3, pc}
   b7f8c:	00030240 	.word	0x00030240

000b7f90 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7f90:	b508      	push	{r3, lr}
   b7f92:	4b02      	ldr	r3, [pc, #8]	; (b7f9c <network_off+0xc>)
   b7f94:	681b      	ldr	r3, [r3, #0]
   b7f96:	699b      	ldr	r3, [r3, #24]
   b7f98:	9301      	str	r3, [sp, #4]
   b7f9a:	bd08      	pop	{r3, pc}
   b7f9c:	00030240 	.word	0x00030240

000b7fa0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7fa0:	b508      	push	{r3, lr}
   b7fa2:	4b02      	ldr	r3, [pc, #8]	; (b7fac <network_listen+0xc>)
   b7fa4:	681b      	ldr	r3, [r3, #0]
   b7fa6:	69db      	ldr	r3, [r3, #28]
   b7fa8:	9301      	str	r3, [sp, #4]
   b7faa:	bd08      	pop	{r3, pc}
   b7fac:	00030240 	.word	0x00030240

000b7fb0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7fb0:	b508      	push	{r3, lr}
   b7fb2:	4b02      	ldr	r3, [pc, #8]	; (b7fbc <network_listening+0xc>)
   b7fb4:	681b      	ldr	r3, [r3, #0]
   b7fb6:	6a1b      	ldr	r3, [r3, #32]
   b7fb8:	9301      	str	r3, [sp, #4]
   b7fba:	bd08      	pop	{r3, pc}
   b7fbc:	00030240 	.word	0x00030240

000b7fc0 <network_has_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
   b7fc0:	b508      	push	{r3, lr}
   b7fc2:	4b02      	ldr	r3, [pc, #8]	; (b7fcc <network_has_credentials+0xc>)
   b7fc4:	681b      	ldr	r3, [r3, #0]
   b7fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7fc8:	9301      	str	r3, [sp, #4]
   b7fca:	bd08      	pop	{r3, pc}
   b7fcc:	00030240 	.word	0x00030240

000b7fd0 <network_set_credentials>:
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b7fd0:	b508      	push	{r3, lr}
   b7fd2:	4b02      	ldr	r3, [pc, #8]	; (b7fdc <network_set_credentials+0xc>)
   b7fd4:	681b      	ldr	r3, [r3, #0]
   b7fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7fd8:	9301      	str	r3, [sp, #4]
   b7fda:	bd08      	pop	{r3, pc}
   b7fdc:	00030240 	.word	0x00030240

000b7fe0 <network_clear_credentials>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b7fe0:	b508      	push	{r3, lr}
   b7fe2:	4b02      	ldr	r3, [pc, #8]	; (b7fec <network_clear_credentials+0xc>)
   b7fe4:	681b      	ldr	r3, [r3, #0]
   b7fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7fe8:	9301      	str	r3, [sp, #4]
   b7fea:	bd08      	pop	{r3, pc}
   b7fec:	00030240 	.word	0x00030240

000b7ff0 <network_set_listen_timeout>:
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7ff0:	b508      	push	{r3, lr}
   b7ff2:	4b02      	ldr	r3, [pc, #8]	; (b7ffc <network_set_listen_timeout+0xc>)
   b7ff4:	681b      	ldr	r3, [r3, #0]
   b7ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7ff8:	9301      	str	r3, [sp, #4]
   b7ffa:	bd08      	pop	{r3, pc}
   b7ffc:	00030240 	.word	0x00030240

000b8000 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b8000:	b508      	push	{r3, lr}
   b8002:	4b02      	ldr	r3, [pc, #8]	; (b800c <network_get_listen_timeout+0xc>)
   b8004:	681b      	ldr	r3, [r3, #0]
   b8006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8008:	9301      	str	r3, [sp, #4]
   b800a:	bd08      	pop	{r3, pc}
   b800c:	00030240 	.word	0x00030240

000b8010 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b8010:	b508      	push	{r3, lr}
   b8012:	4b02      	ldr	r3, [pc, #8]	; (b801c <network_is_on+0xc>)
   b8014:	681b      	ldr	r3, [r3, #0]
   b8016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8018:	9301      	str	r3, [sp, #4]
   b801a:	bd08      	pop	{r3, pc}
   b801c:	00030240 	.word	0x00030240

000b8020 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b8020:	b508      	push	{r3, lr}
   b8022:	4b02      	ldr	r3, [pc, #8]	; (b802c <network_is_off+0xc>)
   b8024:	681b      	ldr	r3, [r3, #0]
   b8026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8028:	9301      	str	r3, [sp, #4]
   b802a:	bd08      	pop	{r3, pc}
   b802c:	00030240 	.word	0x00030240

000b8030 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b8030:	b508      	push	{r3, lr}
   b8032:	4b02      	ldr	r3, [pc, #8]	; (b803c <malloc+0xc>)
   b8034:	681b      	ldr	r3, [r3, #0]
   b8036:	681b      	ldr	r3, [r3, #0]
   b8038:	9301      	str	r3, [sp, #4]
   b803a:	bd08      	pop	{r3, pc}
   b803c:	0003021c 	.word	0x0003021c

000b8040 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b8040:	b508      	push	{r3, lr}
   b8042:	4b02      	ldr	r3, [pc, #8]	; (b804c <free+0xc>)
   b8044:	681b      	ldr	r3, [r3, #0]
   b8046:	685b      	ldr	r3, [r3, #4]
   b8048:	9301      	str	r3, [sp, #4]
   b804a:	bd08      	pop	{r3, pc}
   b804c:	0003021c 	.word	0x0003021c

000b8050 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b8050:	b508      	push	{r3, lr}
   b8052:	4b02      	ldr	r3, [pc, #8]	; (b805c <realloc+0xc>)
   b8054:	681b      	ldr	r3, [r3, #0]
   b8056:	689b      	ldr	r3, [r3, #8]
   b8058:	9301      	str	r3, [sp, #4]
   b805a:	bd08      	pop	{r3, pc}
   b805c:	0003021c 	.word	0x0003021c

000b8060 <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b8060:	b508      	push	{r3, lr}
   b8062:	4b02      	ldr	r3, [pc, #8]	; (b806c <sscanf+0xc>)
   b8064:	681b      	ldr	r3, [r3, #0]
   b8066:	695b      	ldr	r3, [r3, #20]
   b8068:	9301      	str	r3, [sp, #4]
   b806a:	bd08      	pop	{r3, pc}
   b806c:	0003021c 	.word	0x0003021c

000b8070 <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b8070:	b508      	push	{r3, lr}
   b8072:	4b02      	ldr	r3, [pc, #8]	; (b807c <vsnprintf+0xc>)
   b8074:	681b      	ldr	r3, [r3, #0]
   b8076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8078:	9301      	str	r3, [sp, #4]
   b807a:	bd08      	pop	{r3, pc}
   b807c:	0003021c 	.word	0x0003021c

000b8080 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b8080:	b508      	push	{r3, lr}
   b8082:	4b02      	ldr	r3, [pc, #8]	; (b808c <abort+0xc>)
   b8084:	681b      	ldr	r3, [r3, #0]
   b8086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8088:	9301      	str	r3, [sp, #4]
   b808a:	bd08      	pop	{r3, pc}
   b808c:	0003021c 	.word	0x0003021c

000b8090 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b8090:	b508      	push	{r3, lr}
   b8092:	4b02      	ldr	r3, [pc, #8]	; (b809c <_malloc_r+0xc>)
   b8094:	681b      	ldr	r3, [r3, #0]
   b8096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8098:	9301      	str	r3, [sp, #4]
   b809a:	bd08      	pop	{r3, pc}
   b809c:	0003021c 	.word	0x0003021c

000b80a0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b80a0:	b508      	push	{r3, lr}
   b80a2:	4b02      	ldr	r3, [pc, #8]	; (b80ac <__errno+0xc>)
   b80a4:	681b      	ldr	r3, [r3, #0]
   b80a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b80a8:	9301      	str	r3, [sp, #4]
   b80aa:	bd08      	pop	{r3, pc}
   b80ac:	0003021c 	.word	0x0003021c

000b80b0 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b80b0:	b508      	push	{r3, lr}
   b80b2:	4b02      	ldr	r3, [pc, #8]	; (b80bc <__assert_func+0xc>)
   b80b4:	681b      	ldr	r3, [r3, #0]
   b80b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b80b8:	9301      	str	r3, [sp, #4]
   b80ba:	bd08      	pop	{r3, pc}
   b80bc:	0003021c 	.word	0x0003021c

000b80c0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b80c0:	b508      	push	{r3, lr}
   b80c2:	4b02      	ldr	r3, [pc, #8]	; (b80cc <newlib_impure_ptr_callback+0xc>)
   b80c4:	681b      	ldr	r3, [r3, #0]
   b80c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b80c8:	9301      	str	r3, [sp, #4]
   b80ca:	bd08      	pop	{r3, pc}
   b80cc:	0003021c 	.word	0x0003021c

000b80d0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b80d0:	2100      	movs	r1, #0
   b80d2:	f7ff bf11 	b.w	b7ef8 <system_delay_ms>

000b80d6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b80d6:	4770      	bx	lr

000b80d8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b80d8:	4770      	bx	lr

000b80da <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b80da:	4770      	bx	lr

000b80dc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b80dc:	4770      	bx	lr
	...

000b80e0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b80e0:	4b06      	ldr	r3, [pc, #24]	; (b80fc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b80e2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b80e4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b80e6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b80ea:	d005      	beq.n	b80f8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b80ec:	4608      	mov	r0, r1
   b80ee:	f002 faa1 	bl	ba634 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b80f2:	2800      	cmp	r0, #0
   b80f4:	bf08      	it	eq
   b80f6:	2400      	moveq	r4, #0
      }
   b80f8:	4620      	mov	r0, r4
   b80fa:	bd10      	pop	{r4, pc}
   b80fc:	000bdd48 	.word	0x000bdd48

000b8100 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8100:	4b06      	ldr	r3, [pc, #24]	; (b811c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8102:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8104:	b510      	push	{r4, lr}
   b8106:	f100 040c 	add.w	r4, r0, #12
	    ||
   b810a:	d005      	beq.n	b8118 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b810c:	4608      	mov	r0, r1
   b810e:	f002 fa91 	bl	ba634 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8112:	2800      	cmp	r0, #0
   b8114:	bf08      	it	eq
   b8116:	2400      	moveq	r4, #0
      }
   b8118:	4620      	mov	r0, r4
   b811a:	bd10      	pop	{r4, pc}
   b811c:	000bdd48 	.word	0x000bdd48

000b8120 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8120:	4b06      	ldr	r3, [pc, #24]	; (b813c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8122:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8124:	b510      	push	{r4, lr}
   b8126:	f100 040c 	add.w	r4, r0, #12
	    ||
   b812a:	d005      	beq.n	b8138 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b812c:	4608      	mov	r0, r1
   b812e:	f002 fa81 	bl	ba634 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8132:	2800      	cmp	r0, #0
   b8134:	bf08      	it	eq
   b8136:	2400      	moveq	r4, #0
      }
   b8138:	4620      	mov	r0, r4
   b813a:	bd10      	pop	{r4, pc}
   b813c:	000bdd48 	.word	0x000bdd48

000b8140 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8140:	b510      	push	{r4, lr}
   b8142:	2168      	movs	r1, #104	; 0x68
   b8144:	4604      	mov	r4, r0
   b8146:	f7fb ffac 	bl	b40a2 <_ZdlPvj>
   b814a:	4620      	mov	r0, r4
   b814c:	bd10      	pop	{r4, pc}

000b814e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b814e:	b510      	push	{r4, lr}
   b8150:	2128      	movs	r1, #40	; 0x28
   b8152:	4604      	mov	r4, r0
   b8154:	f7fb ffa5 	bl	b40a2 <_ZdlPvj>
   b8158:	4620      	mov	r0, r4
   b815a:	bd10      	pop	{r4, pc}

000b815c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b815c:	b510      	push	{r4, lr}
   b815e:	2130      	movs	r1, #48	; 0x30
   b8160:	4604      	mov	r4, r0
   b8162:	f7fb ff9e 	bl	b40a2 <_ZdlPvj>
   b8166:	4620      	mov	r0, r4
   b8168:	bd10      	pop	{r4, pc}

000b816a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b816a:	2168      	movs	r1, #104	; 0x68
   b816c:	f7fb bf99 	b.w	b40a2 <_ZdlPvj>

000b8170 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b8170:	2128      	movs	r1, #40	; 0x28
   b8172:	f7fb bf96 	b.w	b40a2 <_ZdlPvj>

000b8176 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b8176:	2130      	movs	r1, #48	; 0x30
   b8178:	f7fb bf93 	b.w	b40a2 <_ZdlPvj>

000b817c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b817c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b817e:	2500      	movs	r5, #0
   b8180:	1cec      	adds	r4, r5, #3
   b8182:	428c      	cmp	r4, r1
   b8184:	d80d      	bhi.n	b81a2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b8186:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b8188:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b818a:	5d87      	ldrb	r7, [r0, r6]
   b818c:	4297      	cmp	r7, r2
   b818e:	d105      	bne.n	b819c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b8190:	4426      	add	r6, r4
   b8192:	42b1      	cmp	r1, r6
   b8194:	d305      	bcc.n	b81a2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b8196:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b8198:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b819a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b819c:	3401      	adds	r4, #1
   b819e:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b81a0:	e7ee      	b.n	b8180 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b81a2:	2000      	movs	r0, #0
   b81a4:	e7f9      	b.n	b819a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b81a8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b81a8:	4a02      	ldr	r2, [pc, #8]	; (b81b4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b81aa:	4903      	ldr	r1, [pc, #12]	; (b81b8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b81ac:	200a      	movs	r0, #10
   b81ae:	f7ff be8b 	b.w	b7ec8 <panic_>
   b81b2:	bf00      	nop
   b81b4:	000b7c69 	.word	0x000b7c69
   b81b8:	000bdba8 	.word	0x000bdba8

000b81bc <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b81bc:	b430      	push	{r4, r5}
   b81be:	460d      	mov	r5, r1
   b81c0:	4611      	mov	r1, r2
   b81c2:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b81c4:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b81c6:	6809      	ldr	r1, [r1, #0]
   b81c8:	6828      	ldr	r0, [r5, #0]
   b81ca:	e9d3 4300 	ldrd	r4, r3, [r3]
   b81ce:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b81d0:	bc30      	pop	{r4, r5}
   b81d2:	4760      	bx	ip

000b81d4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b81d4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b81d6:	b538      	push	{r3, r4, r5, lr}
   b81d8:	4604      	mov	r4, r0
	switch (__op)
   b81da:	d102      	bne.n	b81e2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b81dc:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b81de:	6023      	str	r3, [r4, #0]
	}
   b81e0:	e003      	b.n	b81ea <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b81e2:	2a02      	cmp	r2, #2
   b81e4:	d003      	beq.n	b81ee <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b81e6:	2a03      	cmp	r2, #3
   b81e8:	d00d      	beq.n	b8206 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b81ea:	2000      	movs	r0, #0
   b81ec:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b81ee:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b81f0:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b81f2:	f7fb ff50 	bl	b4096 <_Znwj>
   b81f6:	4603      	mov	r3, r0
   b81f8:	2800      	cmp	r0, #0
   b81fa:	d0f0      	beq.n	b81de <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b81fc:	e895 0003 	ldmia.w	r5, {r0, r1}
   b8200:	e883 0003 	stmia.w	r3, {r0, r1}
   b8204:	e7eb      	b.n	b81de <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b8206:	6800      	ldr	r0, [r0, #0]
   b8208:	2800      	cmp	r0, #0
   b820a:	d0ee      	beq.n	b81ea <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b820c:	2108      	movs	r1, #8
   b820e:	f7fb ff48 	bl	b40a2 <_ZdlPvj>
   b8212:	e7ea      	b.n	b81ea <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b8214 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b8214:	b510      	push	{r4, lr}
      if (_M_manager)
   b8216:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b8218:	4604      	mov	r4, r0
      if (_M_manager)
   b821a:	b113      	cbz	r3, b8222 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b821c:	2203      	movs	r2, #3
   b821e:	4601      	mov	r1, r0
   b8220:	4798      	blx	r3
    }
   b8222:	4620      	mov	r0, r4
   b8224:	bd10      	pop	{r4, pc}

000b8226 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b8226:	b510      	push	{r4, lr}
   b8228:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b822a:	3058      	adds	r0, #88	; 0x58
   b822c:	f7ff fff2 	bl	b8214 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b8230:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b8234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8238:	f001 bb26 	b.w	b9888 <_ZN6StringD1Ev>

000b823c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b823c:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b823e:	6843      	ldr	r3, [r0, #4]
   b8240:	3b01      	subs	r3, #1
    {
   b8242:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b8244:	6043      	str	r3, [r0, #4]
   b8246:	b963      	cbnz	r3, b8262 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b8248:	6803      	ldr	r3, [r0, #0]
   b824a:	689b      	ldr	r3, [r3, #8]
   b824c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b824e:	68a3      	ldr	r3, [r4, #8]
   b8250:	3b01      	subs	r3, #1
   b8252:	60a3      	str	r3, [r4, #8]
   b8254:	b92b      	cbnz	r3, b8262 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b8256:	6823      	ldr	r3, [r4, #0]
   b8258:	4620      	mov	r0, r4
   b825a:	68db      	ldr	r3, [r3, #12]
    }
   b825c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b8260:	4718      	bx	r3
    }
   b8262:	bd10      	pop	{r4, pc}

000b8264 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b8264:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b8268:	b2da      	uxtb	r2, r3
   b826a:	2a09      	cmp	r2, #9
   b826c:	d801      	bhi.n	b8272 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b826e:	4618      	mov	r0, r3
   b8270:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b8272:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b8276:	2b05      	cmp	r3, #5
   b8278:	d801      	bhi.n	b827e <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b827a:	3857      	subs	r0, #87	; 0x57
   b827c:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b827e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b8282:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b8284:	bf94      	ite	ls
   b8286:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b8288:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b828c:	4770      	bx	lr
	...

000b8290 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b8290:	b510      	push	{r4, lr}
            locked_(false) {
   b8292:	2300      	movs	r3, #0
   b8294:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b8296:	4b04      	ldr	r3, [pc, #16]	; (b82a8 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b8298:	4604      	mov	r4, r0
   b829a:	6818      	ldr	r0, [r3, #0]
   b829c:	f7ff fccc 	bl	b7c38 <os_mutex_recursive_lock>
        locked_ = true;
   b82a0:	2301      	movs	r3, #1
   b82a2:	7023      	strb	r3, [r4, #0]
    }
   b82a4:	4620      	mov	r0, r4
   b82a6:	bd10      	pop	{r4, pc}
   b82a8:	2003e6c0 	.word	0x2003e6c0

000b82ac <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b82ac:	b510      	push	{r4, lr}
        if (locked_) {
   b82ae:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b82b0:	4604      	mov	r4, r0
        if (locked_) {
   b82b2:	b11b      	cbz	r3, b82bc <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b82b4:	4b02      	ldr	r3, [pc, #8]	; (b82c0 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b82b6:	6818      	ldr	r0, [r3, #0]
   b82b8:	f7ff fcc6 	bl	b7c48 <os_mutex_recursive_unlock>
    }
   b82bc:	4620      	mov	r0, r4
   b82be:	bd10      	pop	{r4, pc}
   b82c0:	2003e6c0 	.word	0x2003e6c0

000b82c4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b82c4:	b082      	sub	sp, #8
   b82c6:	4603      	mov	r3, r0
    address_ = addr;
   b82c8:	6808      	ldr	r0, [r1, #0]
   b82ca:	6849      	ldr	r1, [r1, #4]
   b82cc:	466a      	mov	r2, sp
   b82ce:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b82d0:	466a      	mov	r2, sp
   b82d2:	ca03      	ldmia	r2!, {r0, r1}
   b82d4:	6018      	str	r0, [r3, #0]
}
   b82d6:	4618      	mov	r0, r3
    address_ = addr.address_;
   b82d8:	6059      	str	r1, [r3, #4]
}
   b82da:	b002      	add	sp, #8
   b82dc:	4770      	bx	lr

000b82de <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b82de:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b82e0:	7982      	ldrb	r2, [r0, #6]
   b82e2:	798b      	ldrb	r3, [r1, #6]
   b82e4:	429a      	cmp	r2, r3
   b82e6:	d106      	bne.n	b82f6 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b82e8:	2206      	movs	r2, #6
   b82ea:	f003 f96f 	bl	bb5cc <memcmp>
   b82ee:	fab0 f080 	clz	r0, r0
   b82f2:	0940      	lsrs	r0, r0, #5
}
   b82f4:	bd08      	pop	{r3, pc}
    return false;
   b82f6:	2000      	movs	r0, #0
   b82f8:	e7fc      	b.n	b82f4 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b82fa <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b82fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b82fe:	6003      	str	r3, [r0, #0]
   b8300:	8083      	strh	r3, [r0, #4]
}
   b8302:	2000      	movs	r0, #0
   b8304:	4770      	bx	lr

000b8306 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b8306:	b508      	push	{r3, lr}
   b8308:	4602      	mov	r2, r0
        : address_{} {
   b830a:	2100      	movs	r1, #0
   b830c:	6001      	str	r1, [r0, #0]
   b830e:	6041      	str	r1, [r0, #4]
    clear();
   b8310:	f7ff fff3 	bl	b82fa <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b8314:	7191      	strb	r1, [r2, #6]
}
   b8316:	4610      	mov	r0, r2
   b8318:	bd08      	pop	{r3, pc}
	...

000b831c <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b831c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b831e:	2301      	movs	r3, #1
   b8320:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8322:	4b05      	ldr	r3, [pc, #20]	; (b8338 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b8324:	4602      	mov	r2, r0
   b8326:	f103 0110 	add.w	r1, r3, #16
   b832a:	f853 4b04 	ldr.w	r4, [r3], #4
   b832e:	f842 4b04 	str.w	r4, [r2], #4
   b8332:	428b      	cmp	r3, r1
   b8334:	d1f9      	bne.n	b832a <_ZN8particle7BleUuidC1Ev+0xe>
}
   b8336:	bd10      	pop	{r4, pc}
   b8338:	000bdd56 	.word	0x000bdd56

000b833c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b833c:	b510      	push	{r4, lr}
    if (uuid128) {
   b833e:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b8340:	4604      	mov	r4, r0
    if (uuid128) {
   b8342:	b1b1      	cbz	r1, b8372 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b8344:	2a01      	cmp	r2, #1
   b8346:	f101 0210 	add.w	r2, r1, #16
   b834a:	d10a      	bne.n	b8362 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b834c:	4601      	mov	r1, r0
   b834e:	f853 0b04 	ldr.w	r0, [r3], #4
   b8352:	f841 0b04 	str.w	r0, [r1], #4
   b8356:	4293      	cmp	r3, r2
   b8358:	d1f9      	bne.n	b834e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b835a:	2301      	movs	r3, #1
   b835c:	6123      	str	r3, [r4, #16]
}
   b835e:	4620      	mov	r0, r4
   b8360:	bd10      	pop	{r4, pc}
   b8362:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b8364:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b8368:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b836c:	429a      	cmp	r2, r3
   b836e:	d1f9      	bne.n	b8364 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b8370:	e7f3      	b.n	b835a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b8372:	2210      	movs	r2, #16
   b8374:	f003 f962 	bl	bb63c <memset>
   b8378:	e7f1      	b.n	b835e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b837a <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b837a:	b538      	push	{r3, r4, r5, lr}
   b837c:	4604      	mov	r4, r0
   b837e:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b8380:	461a      	mov	r2, r3
   b8382:	f7ff ffdb 	bl	b833c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b8386:	81a5      	strh	r5, [r4, #12]
}
   b8388:	4620      	mov	r0, r4
   b838a:	bd38      	pop	{r3, r4, r5, pc}

000b838c <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b838c:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b838e:	6902      	ldr	r2, [r0, #16]
   b8390:	b922      	cbnz	r2, b839c <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b8392:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8394:	3800      	subs	r0, #0
   b8396:	bf18      	it	ne
   b8398:	2001      	movne	r0, #1
}
   b839a:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b839c:	4902      	ldr	r1, [pc, #8]	; (b83a8 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b839e:	2210      	movs	r2, #16
   b83a0:	f003 f914 	bl	bb5cc <memcmp>
   b83a4:	e7f6      	b.n	b8394 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b83a6:	bf00      	nop
   b83a8:	000bdd76 	.word	0x000bdd76

000b83ac <_ZNK8particle7BleUuid4typeEv>:
}
   b83ac:	6900      	ldr	r0, [r0, #16]
   b83ae:	4770      	bx	lr

000b83b0 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b83b0:	b538      	push	{r3, r4, r5, lr}
   b83b2:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b83b4:	2214      	movs	r2, #20
   b83b6:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b83b8:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b83ba:	f003 f93f 	bl	bb63c <memset>
    if (type_ == BleUuidType::SHORT) {
   b83be:	6923      	ldr	r3, [r4, #16]
   b83c0:	b91b      	cbnz	r3, b83ca <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b83c2:	89a3      	ldrh	r3, [r4, #12]
   b83c4:	802b      	strh	r3, [r5, #0]
}
   b83c6:	4628      	mov	r0, r5
   b83c8:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b83ca:	2301      	movs	r3, #1
   b83cc:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b83ce:	4621      	mov	r1, r4
   b83d0:	462b      	mov	r3, r5
   b83d2:	f104 0210 	add.w	r2, r4, #16
   b83d6:	f851 0b04 	ldr.w	r0, [r1], #4
   b83da:	f843 0b04 	str.w	r0, [r3], #4
   b83de:	4291      	cmp	r1, r2
   b83e0:	d1f9      	bne.n	b83d6 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b83e2:	e7f0      	b.n	b83c6 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b83e4 <_ZNK8particle7BleUuid7shortedEv>:
}
   b83e4:	8980      	ldrh	r0, [r0, #12]
   b83e6:	4770      	bx	lr

000b83e8 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b83e8:	4770      	bx	lr

000b83ea <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b83ea:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b83ec:	6902      	ldr	r2, [r0, #16]
   b83ee:	690b      	ldr	r3, [r1, #16]
   b83f0:	429a      	cmp	r2, r3
   b83f2:	d106      	bne.n	b8402 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b83f4:	2210      	movs	r2, #16
   b83f6:	f003 f8e9 	bl	bb5cc <memcmp>
   b83fa:	fab0 f080 	clz	r0, r0
   b83fe:	0940      	lsrs	r0, r0, #5
}
   b8400:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b8402:	2000      	movs	r0, #0
   b8404:	e7fc      	b.n	b8400 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b8408 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b8408:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b840a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b840e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8410:	4b34      	ldr	r3, [pc, #208]	; (b84e4 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b8412:	460c      	mov	r4, r1
   b8414:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8416:	4602      	mov	r2, r0
   b8418:	f103 0110 	add.w	r1, r3, #16
   b841c:	f853 0b04 	ldr.w	r0, [r3], #4
   b8420:	f842 0b04 	str.w	r0, [r2], #4
   b8424:	428b      	cmp	r3, r1
   b8426:	d1f9      	bne.n	b841c <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b8428:	b344      	cbz	r4, b847c <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b842a:	2124      	movs	r1, #36	; 0x24
   b842c:	4620      	mov	r0, r4
   b842e:	f003 f969 	bl	bb704 <strnlen>
   b8432:	2804      	cmp	r0, #4
   b8434:	f04f 0500 	mov.w	r5, #0
   b8438:	d123      	bne.n	b8482 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b843a:	f8ad 5004 	strh.w	r5, [sp, #4]
   b843e:	af01      	add	r7, sp, #4
   b8440:	1ca5      	adds	r5, r4, #2
   b8442:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b8444:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b8448:	f7ff ff0c 	bl	b8264 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b844c:	f1b0 0800 	subs.w	r8, r0, #0
   b8450:	db12      	blt.n	b8478 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b8452:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b8456:	f7ff ff05 	bl	b8264 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b845a:	2800      	cmp	r0, #0
   b845c:	db0c      	blt.n	b8478 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b845e:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b8460:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b8464:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b8466:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b846a:	d1eb      	bne.n	b8444 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b846c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b8470:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b8472:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b8476:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b8478:	2300      	movs	r3, #0
   b847a:	6133      	str	r3, [r6, #16]
}
   b847c:	b002      	add	sp, #8
   b847e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b8482:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b8486:	2124      	movs	r1, #36	; 0x24
   b8488:	4620      	mov	r0, r4
   b848a:	f003 f93b 	bl	bb704 <strnlen>
   b848e:	42a8      	cmp	r0, r5
   b8490:	d807      	bhi.n	b84a2 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b8492:	4642      	mov	r2, r8
   b8494:	2100      	movs	r1, #0
   b8496:	4630      	mov	r0, r6
}
   b8498:	b002      	add	sp, #8
   b849a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b849e:	f003 b8cd 	b.w	bb63c <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b84a2:	f1b8 0f00 	cmp.w	r8, #0
   b84a6:	d0e9      	beq.n	b847c <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b84a8:	5d60      	ldrb	r0, [r4, r5]
   b84aa:	f7ff fedb 	bl	b8264 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b84ae:	0603      	lsls	r3, r0, #24
   b84b0:	d415      	bmi.n	b84de <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b84b2:	0100      	lsls	r0, r0, #4
   b84b4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b84b8:	b2c7      	uxtb	r7, r0
   b84ba:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b84be:	2124      	movs	r1, #36	; 0x24
   b84c0:	4620      	mov	r0, r4
   b84c2:	f003 f91f 	bl	bb704 <strnlen>
   b84c6:	3501      	adds	r5, #1
   b84c8:	42a8      	cmp	r0, r5
   b84ca:	d908      	bls.n	b84de <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b84cc:	5d60      	ldrb	r0, [r4, r5]
   b84ce:	f7ff fec9 	bl	b8264 <_ZN8particle11hexToNibbleEc>
   b84d2:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b84d4:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b84d6:	bfa4      	itt	ge
   b84d8:	4338      	orrge	r0, r7
   b84da:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b84de:	3501      	adds	r5, #1
   b84e0:	e7d1      	b.n	b8486 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b84e2:	bf00      	nop
   b84e4:	000bdd56 	.word	0x000bdd56

000b84e8 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b84e8:	b513      	push	{r0, r1, r4, lr}
   b84ea:	4604      	mov	r4, r0
   b84ec:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b84ee:	f7ff ff15 	bl	b831c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b84f2:	4620      	mov	r0, r4
   b84f4:	9901      	ldr	r1, [sp, #4]
   b84f6:	f7ff ff87 	bl	b8408 <_ZN8particle7BleUuid9constructEPKc>
}
   b84fa:	4620      	mov	r0, r4
   b84fc:	b002      	add	sp, #8
   b84fe:	bd10      	pop	{r4, pc}

000b8500 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b8500:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b8502:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b8506:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b8508:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b850a:	8043      	strh	r3, [r0, #2]
   b850c:	220e      	movs	r2, #14
   b850e:	4629      	mov	r1, r5
   b8510:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b8512:	7105      	strb	r5, [r0, #4]
   b8514:	3006      	adds	r0, #6
   b8516:	f003 f891 	bl	bb63c <memset>
   b851a:	f104 0014 	add.w	r0, r4, #20
   b851e:	f7ff fefd 	bl	b831c <_ZN8particle7BleUuidC1Ev>
   b8522:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b8526:	f7ff fef9 	bl	b831c <_ZN8particle7BleUuidC1Ev>
   b852a:	4904      	ldr	r1, [pc, #16]	; (b853c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b852c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b8530:	f001 f9f5 	bl	b991e <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b8534:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b8536:	4620      	mov	r0, r4
   b8538:	bd38      	pop	{r3, r4, r5, pc}
   b853a:	bf00      	nop
   b853c:	000bdb72 	.word	0x000bdb72

000b8540 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b8540:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b8542:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b8546:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b854a:	4293      	cmp	r3, r2
   b854c:	4618      	mov	r0, r3
   b854e:	d006      	beq.n	b855e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b8550:	6804      	ldr	r4, [r0, #0]
   b8552:	8824      	ldrh	r4, [r4, #0]
   b8554:	428c      	cmp	r4, r1
   b8556:	f103 0308 	add.w	r3, r3, #8
   b855a:	d1f6      	bne.n	b854a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b855c:	bd10      	pop	{r4, pc}
        return nullptr;
   b855e:	2000      	movs	r0, #0
   b8560:	e7fc      	b.n	b855c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b8564 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b8564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8568:	2600      	movs	r6, #0
   b856a:	6006      	str	r6, [r0, #0]
   b856c:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b856e:	2028      	movs	r0, #40	; 0x28
   b8570:	460c      	mov	r4, r1
   b8572:	f7fb fd90 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b8576:	1e05      	subs	r5, r0, #0
   b8578:	f105 080c 	add.w	r8, r5, #12
   b857c:	d00f      	beq.n	b859e <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b857e:	2301      	movs	r3, #1
   b8580:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b8584:	4b08      	ldr	r3, [pc, #32]	; (b85a8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b8586:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b8588:	4640      	mov	r0, r8
   b858a:	f7ff fec7 	bl	b831c <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b858e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b8590:	622e      	str	r6, [r5, #32]
   b8592:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b8596:	4646      	mov	r6, r8
   b8598:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b859a:	6823      	ldr	r3, [r4, #0]
   b859c:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b859e:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b85a2:	4638      	mov	r0, r7
   b85a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b85a8:	000bdd18 	.word	0x000bdd18

000b85ac <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b85ac:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b85ae:	2500      	movs	r5, #0
   b85b0:	6005      	str	r5, [r0, #0]
   b85b2:	4606      	mov	r6, r0
   b85b4:	2030      	movs	r0, #48	; 0x30
   b85b6:	f7fb fd6e 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b85ba:	4604      	mov	r4, r0
   b85bc:	b188      	cbz	r0, b85e2 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b85be:	2301      	movs	r3, #1
   b85c0:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b85c4:	4b09      	ldr	r3, [pc, #36]	; (b85ec <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b85c6:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b85c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b85cc:	8183      	strh	r3, [r0, #12]
   b85ce:	300e      	adds	r0, #14
   b85d0:	f7ff fe99 	bl	b8306 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b85d4:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b85d8:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b85dc:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b85e0:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b85e2:	6074      	str	r4, [r6, #4]
   b85e4:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b85e6:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b85e8:	4630      	mov	r0, r6
   b85ea:	bd70      	pop	{r4, r5, r6, pc}
   b85ec:	000bdd34 	.word	0x000bdd34

000b85f0 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b85f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b85f2:	460d      	mov	r5, r1
   b85f4:	4604      	mov	r4, r0
    WiringBleLock lk;
   b85f6:	a801      	add	r0, sp, #4
   b85f8:	f7ff fe4a 	bl	b8290 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b85fc:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b85fe:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b8602:	6023      	str	r3, [r4, #0]
   b8604:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b8608:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b860a:	a801      	add	r0, sp, #4
   b860c:	f7ff fe4e 	bl	b82ac <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b8610:	4620      	mov	r0, r4
   b8612:	b003      	add	sp, #12
   b8614:	bd30      	pop	{r4, r5, pc}

000b8616 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b8616:	b530      	push	{r4, r5, lr}
   b8618:	4605      	mov	r5, r0
   b861a:	b087      	sub	sp, #28
   b861c:	460c      	mov	r4, r1
    WiringBleLock lk;
   b861e:	a801      	add	r0, sp, #4
   b8620:	f7ff fe36 	bl	b8290 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b8624:	682a      	ldr	r2, [r5, #0]
   b8626:	6823      	ldr	r3, [r4, #0]
   b8628:	8812      	ldrh	r2, [r2, #0]
   b862a:	881b      	ldrh	r3, [r3, #0]
   b862c:	429a      	cmp	r2, r3
   b862e:	d10d      	bne.n	b864c <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b8630:	4629      	mov	r1, r5
   b8632:	a802      	add	r0, sp, #8
   b8634:	f7ff ffdc 	bl	b85f0 <_ZNK8particle13BlePeerDevice7addressEv>
   b8638:	4621      	mov	r1, r4
   b863a:	a804      	add	r0, sp, #16
   b863c:	f7ff ffd8 	bl	b85f0 <_ZNK8particle13BlePeerDevice7addressEv>
   b8640:	a904      	add	r1, sp, #16
   b8642:	a802      	add	r0, sp, #8
   b8644:	f7ff fe4b 	bl	b82de <_ZNK8particle10BleAddresseqERKS0_>
   b8648:	4604      	mov	r4, r0
   b864a:	b900      	cbnz	r0, b864e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b864c:	2400      	movs	r4, #0
    WiringBleLock lk;
   b864e:	a801      	add	r0, sp, #4
   b8650:	f7ff fe2c 	bl	b82ac <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b8654:	4620      	mov	r0, r4
   b8656:	b007      	add	sp, #28
   b8658:	bd30      	pop	{r4, r5, pc}
	...

000b865c <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b865c:	b510      	push	{r4, lr}
   b865e:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b8660:	2064      	movs	r0, #100	; 0x64
   b8662:	f7fb fd18 	bl	b4096 <_Znwj>
   b8666:	b168      	cbz	r0, b8684 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b8668:	2300      	movs	r3, #0
   b866a:	e9c0 3300 	strd	r3, r3, [r0]
   b866e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b8672:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b8676:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b867a:	6203      	str	r3, [r0, #32]
   b867c:	62c3      	str	r3, [r0, #44]	; 0x2c
   b867e:	63c3      	str	r3, [r0, #60]	; 0x3c
   b8680:	64c3      	str	r3, [r0, #76]	; 0x4c
   b8682:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b8684:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b8686:	b920      	cbnz	r0, b8692 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b8688:	4a0a      	ldr	r2, [pc, #40]	; (b86b4 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b868a:	490b      	ldr	r1, [pc, #44]	; (b86b8 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b868c:	200a      	movs	r0, #10
   b868e:	f7ff fc1b 	bl	b7ec8 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b8692:	2000      	movs	r0, #0
   b8694:	f7ff fa80 	bl	b7b98 <hal_ble_stack_init>
   b8698:	b120      	cbz	r0, b86a4 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b869a:	4a06      	ldr	r2, [pc, #24]	; (b86b4 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b869c:	4907      	ldr	r1, [pc, #28]	; (b86bc <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b869e:	200a      	movs	r0, #10
   b86a0:	f7ff fc12 	bl	b7ec8 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b86a4:	6821      	ldr	r1, [r4, #0]
   b86a6:	4806      	ldr	r0, [pc, #24]	; (b86c0 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b86a8:	2200      	movs	r2, #0
   b86aa:	f7ff fab3 	bl	b7c14 <hal_ble_set_callback_on_periph_link_events>
}
   b86ae:	4620      	mov	r0, r4
   b86b0:	bd10      	pop	{r4, pc}
   b86b2:	bf00      	nop
   b86b4:	000b7c69 	.word	0x000b7c69
   b86b8:	000bdba8 	.word	0x000bdba8
   b86bc:	000bdbe6 	.word	0x000bdbe6
   b86c0:	000b8c45 	.word	0x000b8c45

000b86c4 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b86c4:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b86c6:	4c0a      	ldr	r4, [pc, #40]	; (b86f0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b86c8:	7823      	ldrb	r3, [r4, #0]
   b86ca:	f3bf 8f5b 	dmb	ish
   b86ce:	07db      	lsls	r3, r3, #31
   b86d0:	d40c      	bmi.n	b86ec <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b86d2:	4620      	mov	r0, r4
   b86d4:	f7fb fce7 	bl	b40a6 <__cxa_guard_acquire>
   b86d8:	b140      	cbz	r0, b86ec <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b86da:	4806      	ldr	r0, [pc, #24]	; (b86f4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b86dc:	f7ff ffbe 	bl	b865c <_ZN8particle14BleLocalDeviceC1Ev>
   b86e0:	4620      	mov	r0, r4
   b86e2:	f7fb fce5 	bl	b40b0 <__cxa_guard_release>
   b86e6:	4804      	ldr	r0, [pc, #16]	; (b86f8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b86e8:	f002 ff66 	bl	bb5b8 <atexit>
    return instance;
}
   b86ec:	4801      	ldr	r0, [pc, #4]	; (b86f4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b86ee:	bd10      	pop	{r4, pc}
   b86f0:	2003e6b8 	.word	0x2003e6b8
   b86f4:	2003e6c4 	.word	0x2003e6c4
   b86f8:	000b8911 	.word	0x000b8911

000b86fc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b86fc:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b86fe:	6803      	ldr	r3, [r0, #0]
   b8700:	3b09      	subs	r3, #9
   b8702:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b8704:	b08d      	sub	sp, #52	; 0x34
   b8706:	4604      	mov	r4, r0
   b8708:	460d      	mov	r5, r1
    switch (event->type) {
   b870a:	d811      	bhi.n	b8730 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b870c:	f7ff ffda 	bl	b86c4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b8710:	88a1      	ldrh	r1, [r4, #4]
   b8712:	6800      	ldr	r0, [r0, #0]
   b8714:	f7ff ff14 	bl	b8540 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b8718:	4603      	mov	r3, r0
   b871a:	b958      	cbnz	r0, b8734 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b871c:	2220      	movs	r2, #32
   b871e:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b8722:	4a0b      	ldr	r2, [pc, #44]	; (b8750 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b8724:	9200      	str	r2, [sp, #0]
   b8726:	490b      	ldr	r1, [pc, #44]	; (b8754 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b8728:	aa04      	add	r2, sp, #16
   b872a:	2032      	movs	r0, #50	; 0x32
   b872c:	f7ff fbd4 	bl	b7ed8 <log_message>
}
   b8730:	b00d      	add	sp, #52	; 0x34
   b8732:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b8734:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b8736:	2a00      	cmp	r2, #0
   b8738:	d0fa      	beq.n	b8730 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b873a:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b873e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b8742:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b8746:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b8748:	aa04      	add	r2, sp, #16
   b874a:	a903      	add	r1, sp, #12
   b874c:	47a0      	blx	r4
}
   b874e:	e7ef      	b.n	b8730 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b8750:	000bdc28 	.word	0x000bdc28
   b8754:	000bdbbf 	.word	0x000bdbbf

000b8758 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b8758:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b875a:	2000      	movs	r0, #0
   b875c:	f7ff fa1c 	bl	b7b98 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b8760:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b8764:	bd08      	pop	{r3, pc}

000b8766 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b8766:	b919      	cbnz	r1, b8770 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b8768:	460a      	mov	r2, r1
   b876a:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b876c:	f7ff ba1c 	b.w	b7ba8 <hal_ble_gap_set_advertising_data>
   b8770:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8774:	2200      	movs	r2, #0
   b8776:	e7f9      	b.n	b876c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b8778 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b8778:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b877a:	1e14      	subs	r4, r2, #0
   b877c:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b877e:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b8780:	db02      	blt.n	b8788 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b8782:	1862      	adds	r2, r4, r1
   b8784:	429a      	cmp	r2, r3
   b8786:	dd00      	ble.n	b878a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b8788:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b878a:	682a      	ldr	r2, [r5, #0]
   b878c:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b878e:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b8790:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8792:	1a52      	subs	r2, r2, r1
   b8794:	f002 ff38 	bl	bb608 <memmove>
    size_ -= n;
   b8798:	686a      	ldr	r2, [r5, #4]
   b879a:	1b12      	subs	r2, r2, r4
   b879c:	606a      	str	r2, [r5, #4]
}
   b879e:	bd38      	pop	{r3, r4, r5, pc}

000b87a0 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b87a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b87a2:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b87a4:	4604      	mov	r4, r0
   b87a6:	460d      	mov	r5, r1
   b87a8:	ab01      	add	r3, sp, #4
   b87aa:	e9d0 0100 	ldrd	r0, r1, [r0]
   b87ae:	f7ff fce5 	bl	b817c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b87b2:	4602      	mov	r2, r0
   b87b4:	b138      	cbz	r0, b87c6 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b87b6:	9901      	ldr	r1, [sp, #4]
   b87b8:	4620      	mov	r0, r4
   b87ba:	f7ff ffdd 	bl	b8778 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b87be:	4629      	mov	r1, r5
   b87c0:	4620      	mov	r0, r4
   b87c2:	f7ff ffed 	bl	b87a0 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b87c6:	b003      	add	sp, #12
   b87c8:	bd30      	pop	{r4, r5, pc}

000b87ca <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b87ca:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b87cc:	460c      	mov	r4, r1
   b87ce:	b929      	cbnz	r1, b87dc <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b87d0:	460a      	mov	r2, r1
   b87d2:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b87d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b87d8:	f7ff b9ee 	b.w	b7bb8 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b87dc:	2101      	movs	r1, #1
   b87de:	4620      	mov	r0, r4
   b87e0:	f7ff ffde 	bl	b87a0 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b87e4:	e9d4 0100 	ldrd	r0, r1, [r4]
   b87e8:	2200      	movs	r2, #0
   b87ea:	e7f3      	b.n	b87d4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b87ec <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b87ec:	b538      	push	{r3, r4, r5, lr}
   b87ee:	4604      	mov	r4, r0
   b87f0:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b87f2:	f7ff ffb8 	bl	b8766 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b87f6:	2800      	cmp	r0, #0
   b87f8:	db0a      	blt.n	b8810 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b87fa:	4629      	mov	r1, r5
   b87fc:	4620      	mov	r0, r4
   b87fe:	f7ff ffe4 	bl	b87ca <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b8802:	2800      	cmp	r0, #0
   b8804:	db04      	blt.n	b8810 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b8806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b880a:	2000      	movs	r0, #0
   b880c:	f7ff b9dc 	b.w	b7bc8 <hal_ble_gap_start_advertising>
}
   b8810:	bd38      	pop	{r3, r4, r5, pc}
	...

000b8814 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b8814:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b8816:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b8818:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b881a:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b881c:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b881e:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8820:	f7fb fc39 	bl	b4096 <_Znwj>
   b8824:	b118      	cbz	r0, b882e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b8826:	682b      	ldr	r3, [r5, #0]
   b8828:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b882a:	686b      	ldr	r3, [r5, #4]
   b882c:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b882e:	4b03      	ldr	r3, [pc, #12]	; (b883c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b8830:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8832:	4b03      	ldr	r3, [pc, #12]	; (b8840 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8834:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b8836:	60a3      	str	r3, [r4, #8]
      }
   b8838:	4620      	mov	r0, r4
   b883a:	bd38      	pop	{r3, r4, r5, pc}
   b883c:	000b81bd 	.word	0x000b81bd
   b8840:	000b81d5 	.word	0x000b81d5

000b8844 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b8844:	680b      	ldr	r3, [r1, #0]
   b8846:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b8848:	b113      	cbz	r3, b8850 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b884a:	685a      	ldr	r2, [r3, #4]
   b884c:	3201      	adds	r2, #1
   b884e:	605a      	str	r2, [r3, #4]
      }
   b8850:	4770      	bx	lr

000b8852 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b8852:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8854:	f851 3b04 	ldr.w	r3, [r1], #4
   b8858:	4604      	mov	r4, r0
   b885a:	f840 3b04 	str.w	r3, [r0], #4
   b885e:	f7ff fff1 	bl	b8844 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b8862:	6823      	ldr	r3, [r4, #0]
   b8864:	b90b      	cbnz	r3, b886a <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b8866:	f7ff fc9f 	bl	b81a8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b886a:	4620      	mov	r0, r4
   b886c:	bd10      	pop	{r4, pc}

000b886e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b886e:	b510      	push	{r4, lr}
   b8870:	f851 3b04 	ldr.w	r3, [r1], #4
   b8874:	4604      	mov	r4, r0
   b8876:	f840 3b04 	str.w	r3, [r0], #4
   b887a:	f7ff ffe3 	bl	b8844 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b887e:	4620      	mov	r0, r4
   b8880:	bd10      	pop	{r4, pc}

000b8882 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b8882:	b510      	push	{r4, lr}
   b8884:	f851 3b04 	ldr.w	r3, [r1], #4
   b8888:	4604      	mov	r4, r0
   b888a:	f840 3b04 	str.w	r3, [r0], #4
   b888e:	f7ff ffd9 	bl	b8844 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b8892:	4620      	mov	r0, r4
   b8894:	bd10      	pop	{r4, pc}

000b8896 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b8896:	b510      	push	{r4, lr}
   b8898:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b889a:	6800      	ldr	r0, [r0, #0]
   b889c:	b108      	cbz	r0, b88a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b889e:	f7ff fccd 	bl	b823c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b88a2:	4620      	mov	r0, r4
   b88a4:	bd10      	pop	{r4, pc}

000b88a6 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b88a6:	b510      	push	{r4, lr}
   b88a8:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b88aa:	3004      	adds	r0, #4
   b88ac:	f7ff fff3 	bl	b8896 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b88b0:	4620      	mov	r0, r4
   b88b2:	bd10      	pop	{r4, pc}

000b88b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b88b4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b88b6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b88ba:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b88bc:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b88c0:	42ae      	cmp	r6, r5
   b88c2:	d004      	beq.n	b88ce <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b88c4:	1d28      	adds	r0, r5, #4
   b88c6:	f7ff ffe6 	bl	b8896 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b88ca:	3508      	adds	r5, #8
   b88cc:	e7f8      	b.n	b88c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b88ce:	6820      	ldr	r0, [r4, #0]
   b88d0:	f7ff fbb6 	bl	b8040 <free>
}
   b88d4:	4620      	mov	r0, r4
   b88d6:	bd70      	pop	{r4, r5, r6, pc}

000b88d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b88d8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b88da:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b88de:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b88e0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b88e4:	42ae      	cmp	r6, r5
   b88e6:	d004      	beq.n	b88f2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b88e8:	1d28      	adds	r0, r5, #4
   b88ea:	f7ff ffd4 	bl	b8896 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b88ee:	3508      	adds	r5, #8
   b88f0:	e7f8      	b.n	b88e4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b88f2:	6820      	ldr	r0, [r4, #0]
   b88f4:	f7ff fba4 	bl	b8040 <free>
}
   b88f8:	4620      	mov	r0, r4
   b88fa:	bd70      	pop	{r4, r5, r6, pc}

000b88fc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b88fc:	b510      	push	{r4, lr}
   b88fe:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b8900:	3024      	adds	r0, #36	; 0x24
   b8902:	f7ff ffe9 	bl	b88d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b8906:	f104 0018 	add.w	r0, r4, #24
   b890a:	f7ff ffd3 	bl	b88b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b890e:	bd10      	pop	{r4, pc}

000b8910 <__tcf_0>:
    static BleLocalDevice instance;
   b8910:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b8912:	4b17      	ldr	r3, [pc, #92]	; (b8970 <__tcf_0+0x60>)
   b8914:	681c      	ldr	r4, [r3, #0]
   b8916:	b354      	cbz	r4, b896e <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b8918:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b891c:	f7ff fc7a 	bl	b8214 <_ZNSt14_Function_baseD1Ev>
   b8920:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8924:	f7ff fc76 	bl	b8214 <_ZNSt14_Function_baseD1Ev>
   b8928:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b892c:	f7ff fc72 	bl	b8214 <_ZNSt14_Function_baseD1Ev>
   b8930:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b8934:	f7ff fc6e 	bl	b8214 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b8938:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b893c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8940:	42ae      	cmp	r6, r5
   b8942:	d004      	beq.n	b894e <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b8944:	1d28      	adds	r0, r5, #4
   b8946:	f7ff ffa6 	bl	b8896 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b894a:	3508      	adds	r5, #8
   b894c:	e7f8      	b.n	b8940 <__tcf_0+0x30>
    ::free(ptr);
   b894e:	69a0      	ldr	r0, [r4, #24]
   b8950:	f7ff fb76 	bl	b8040 <free>
    ~BleLocalDeviceImpl() = default;
   b8954:	f104 000c 	add.w	r0, r4, #12
   b8958:	f7ff ffbe 	bl	b88d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b895c:	4620      	mov	r0, r4
   b895e:	f7ff ffa9 	bl	b88b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b8962:	4620      	mov	r0, r4
   b8964:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b8966:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b896a:	f7fb bb9a 	b.w	b40a2 <_ZdlPvj>
   b896e:	bd70      	pop	{r4, r5, r6, pc}
   b8970:	2003e6c4 	.word	0x2003e6c4

000b8974 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b8974:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b8976:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8978:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b897c:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b8980:	6803      	ldr	r3, [r0, #0]
   b8982:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b8984:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8986:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b8988:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b898a:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b898c:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b898e:	f7ff ff82 	bl	b8896 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b8992:	b002      	add	sp, #8
   b8994:	bd10      	pop	{r4, pc}

000b8996 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b8996:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b8998:	b510      	push	{r4, lr}
      if (_M_empty())
   b899a:	b90a      	cbnz	r2, b89a0 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b899c:	f001 fe47 	bl	ba62e <_ZSt25__throw_bad_function_callv>
    }
   b89a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b89a4:	68c3      	ldr	r3, [r0, #12]
   b89a6:	4718      	bx	r3

000b89a8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b89a8:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b89aa:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b89ac:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b89ae:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b89b0:	dd03      	ble.n	b89ba <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b89b2:	f7ff fb4d 	bl	b8050 <realloc>
            if (!d) {
   b89b6:	b918      	cbnz	r0, b89c0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b89b8:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b89ba:	f7ff fb41 	bl	b8040 <free>
        T* d = nullptr;
   b89be:	2000      	movs	r0, #0
        data_ = d;
   b89c0:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b89c2:	60a5      	str	r5, [r4, #8]
        return true;
   b89c4:	2001      	movs	r0, #1
   b89c6:	e7f7      	b.n	b89b8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b89c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b89c8:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b89ca:	6883      	ldr	r3, [r0, #8]
   b89cc:	428b      	cmp	r3, r1
   b89ce:	da02      	bge.n	b89d6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b89d0:	f7ff ffea 	bl	b89a8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b89d4:	bd08      	pop	{r3, pc}
    return true;
   b89d6:	2001      	movs	r0, #1
   b89d8:	e7fc      	b.n	b89d4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b89da <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b89da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b89de:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b89e0:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b89e2:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b89e4:	4419      	add	r1, r3
   b89e6:	6883      	ldr	r3, [r0, #8]
   b89e8:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b89ea:	4604      	mov	r4, r0
   b89ec:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b89ee:	dc12      	bgt.n	b8a16 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b89f0:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b89f2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b89f4:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b89f6:	1bd2      	subs	r2, r2, r7
   b89f8:	4631      	mov	r1, r6
   b89fa:	1970      	adds	r0, r6, r5
   b89fc:	f002 fe04 	bl	bb608 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b8a00:	462a      	mov	r2, r5
   b8a02:	4641      	mov	r1, r8
   b8a04:	4630      	mov	r0, r6
   b8a06:	f002 fdf1 	bl	bb5ec <memcpy>
    size_ += n;
   b8a0a:	6863      	ldr	r3, [r4, #4]
   b8a0c:	442b      	add	r3, r5
   b8a0e:	6063      	str	r3, [r4, #4]
    return true;
   b8a10:	2001      	movs	r0, #1
}
   b8a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8a16:	f7ff ffc7 	bl	b89a8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8a1a:	2800      	cmp	r0, #0
   b8a1c:	d1e8      	bne.n	b89f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b8a1e:	e7f8      	b.n	b8a12 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b8a20 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8a22:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8a24:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b8a28:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8a2a:	4604      	mov	r4, r0
   b8a2c:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8a2e:	da0b      	bge.n	b8a48 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b8a30:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8a32:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8a34:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8a36:	1b52      	subs	r2, r2, r5
   b8a38:	1c48      	adds	r0, r1, #1
   b8a3a:	f002 fde5 	bl	bb608 <memmove>
    new(p) T(std::move(value));
   b8a3e:	557e      	strb	r6, [r7, r5]
    ++size_;
   b8a40:	6863      	ldr	r3, [r4, #4]
   b8a42:	3301      	adds	r3, #1
   b8a44:	6063      	str	r3, [r4, #4]
}
   b8a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8a48:	3101      	adds	r1, #1
   b8a4a:	f7ff ffad 	bl	b89a8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8a4e:	2800      	cmp	r0, #0
   b8a50:	d1ee      	bne.n	b8a30 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b8a52:	e7f8      	b.n	b8a46 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b8a54 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8a54:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b8a56:	6841      	ldr	r1, [r0, #4]
   b8a58:	f7ff bfe2 	b.w	b8a20 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b8a5c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b8a5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b8a60:	4604      	mov	r4, r0
   b8a62:	461d      	mov	r5, r3
   b8a64:	460f      	mov	r7, r1
   b8a66:	ab01      	add	r3, sp, #4
   b8a68:	4690      	mov	r8, r2
   b8a6a:	460a      	mov	r2, r1
   b8a6c:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8a70:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b8a74:	f7ff fb82 	bl	b817c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b8a78:	1cae      	adds	r6, r5, #2
   b8a7a:	6863      	ldr	r3, [r4, #4]
   b8a7c:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b8a7e:	f1b9 0f00 	cmp.w	r9, #0
   b8a82:	d126      	bne.n	b8ad2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b8a84:	b328      	cbz	r0, b8ad2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b8a86:	4433      	add	r3, r6
   b8a88:	1a1b      	subs	r3, r3, r0
   b8a8a:	2bff      	cmp	r3, #255	; 0xff
   b8a8c:	d809      	bhi.n	b8aa2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b8a8e:	9901      	ldr	r1, [sp, #4]
   b8a90:	4620      	mov	r0, r4
   b8a92:	f7ff fe71 	bl	b8778 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b8a96:	6861      	ldr	r1, [r4, #4]
   b8a98:	4620      	mov	r0, r4
   b8a9a:	4431      	add	r1, r6
   b8a9c:	f7ff ff94 	bl	b89c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b8aa0:	b918      	cbnz	r0, b8aaa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b8aa2:	6860      	ldr	r0, [r4, #4]
}
   b8aa4:	b003      	add	sp, #12
   b8aa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b8aaa:	1c6a      	adds	r2, r5, #1
   b8aac:	9901      	ldr	r1, [sp, #4]
   b8aae:	b2d2      	uxtb	r2, r2
   b8ab0:	4620      	mov	r0, r4
   b8ab2:	f7ff ffb5 	bl	b8a20 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b8ab6:	9901      	ldr	r1, [sp, #4]
   b8ab8:	463a      	mov	r2, r7
   b8aba:	3101      	adds	r1, #1
   b8abc:	4620      	mov	r0, r4
   b8abe:	f7ff ffaf 	bl	b8a20 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b8ac2:	9901      	ldr	r1, [sp, #4]
   b8ac4:	462b      	mov	r3, r5
   b8ac6:	4642      	mov	r2, r8
   b8ac8:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b8aca:	4620      	mov	r0, r4
   b8acc:	f7ff ff85 	bl	b89da <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b8ad0:	e7e7      	b.n	b8aa2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b8ad2:	18f1      	adds	r1, r6, r3
   b8ad4:	29ff      	cmp	r1, #255	; 0xff
   b8ad6:	d8e4      	bhi.n	b8aa2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b8ad8:	4620      	mov	r0, r4
   b8ada:	f7ff ff75 	bl	b89c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b8ade:	2800      	cmp	r0, #0
   b8ae0:	d0df      	beq.n	b8aa2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b8ae2:	1c69      	adds	r1, r5, #1
   b8ae4:	b2c9      	uxtb	r1, r1
   b8ae6:	4620      	mov	r0, r4
   b8ae8:	f7ff ffb4 	bl	b8a54 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b8aec:	4639      	mov	r1, r7
   b8aee:	4620      	mov	r0, r4
   b8af0:	f7ff ffb0 	bl	b8a54 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b8af4:	6861      	ldr	r1, [r4, #4]
   b8af6:	462b      	mov	r3, r5
   b8af8:	4642      	mov	r2, r8
   b8afa:	e7e6      	b.n	b8aca <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b8afc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b8afc:	b430      	push	{r4, r5}
   b8afe:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b8b02:	b11a      	cbz	r2, b8b0c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b8b04:	9502      	str	r5, [sp, #8]
}
   b8b06:	bc30      	pop	{r4, r5}
   b8b08:	f7ff bfa8 	b.w	b8a5c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b8b0c:	6840      	ldr	r0, [r0, #4]
}
   b8b0e:	bc30      	pop	{r4, r5}
   b8b10:	4770      	bx	lr

000b8b12 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b8b12:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b8b14:	2300      	movs	r3, #0
   b8b16:	e9c0 3300 	strd	r3, r3, [r0]
   b8b1a:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b8b1c:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8b1e:	9300      	str	r3, [sp, #0]
   b8b20:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b8b22:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8b26:	4619      	mov	r1, r3
   b8b28:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b8b2c:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8b2e:	f7ff ffe5 	bl	b8afc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b8b32:	4620      	mov	r0, r4
   b8b34:	b004      	add	sp, #16
   b8b36:	bd10      	pop	{r4, pc}

000b8b38 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8b38:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8b3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8b3c:	4604      	mov	r4, r0
   b8b3e:	460d      	mov	r5, r1
   b8b40:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8b42:	d914      	bls.n	b8b6e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8b44:	4290      	cmp	r0, r2
   b8b46:	d213      	bcs.n	b8b70 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8b48:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8b4c:	1a75      	subs	r5, r6, r1
   b8b4e:	f1a1 0708 	sub.w	r7, r1, #8
   b8b52:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8b54:	42b7      	cmp	r7, r6
   b8b56:	d018      	beq.n	b8b8a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8b58:	b11c      	cbz	r4, b8b62 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8b5a:	4631      	mov	r1, r6
   b8b5c:	4620      	mov	r0, r4
   b8b5e:	f7ff fe90 	bl	b8882 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b8b62:	1d30      	adds	r0, r6, #4
   b8b64:	f7ff fe97 	bl	b8896 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8b68:	3e08      	subs	r6, #8
   b8b6a:	3c08      	subs	r4, #8
   b8b6c:	e7f2      	b.n	b8b54 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8b6e:	d00c      	beq.n	b8b8a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8b70:	42b5      	cmp	r5, r6
   b8b72:	d00a      	beq.n	b8b8a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8b74:	b11c      	cbz	r4, b8b7e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8b76:	4629      	mov	r1, r5
   b8b78:	4620      	mov	r0, r4
   b8b7a:	f7ff fe82 	bl	b8882 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8b7e:	1d28      	adds	r0, r5, #4
   b8b80:	f7ff fe89 	bl	b8896 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8b84:	3508      	adds	r5, #8
   b8b86:	3408      	adds	r4, #8
   b8b88:	e7f2      	b.n	b8b70 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8b8c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8b8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8b8e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8b90:	6846      	ldr	r6, [r0, #4]
   b8b92:	4668      	mov	r0, sp
   b8b94:	f7ff fe75 	bl	b8882 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8b98:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b8b9c:	429f      	cmp	r7, r3
   b8b9e:	db12      	blt.n	b8bc6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b8ba0:	3701      	adds	r7, #1
        if (n > 0) {
   b8ba2:	2f00      	cmp	r7, #0
   b8ba4:	dd29      	ble.n	b8bfa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b8ba6:	00f8      	lsls	r0, r7, #3
   b8ba8:	f7ff fa42 	bl	b8030 <malloc>
            if (!d) {
   b8bac:	4605      	mov	r5, r0
   b8bae:	b1f0      	cbz	r0, b8bee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b8bb0:	e9d4 1200 	ldrd	r1, r2, [r4]
   b8bb4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8bb8:	f7ff ffbe 	bl	b8b38 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8bbc:	6820      	ldr	r0, [r4, #0]
   b8bbe:	f7ff fa3f 	bl	b8040 <free>
        data_ = d;
   b8bc2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b8bc4:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b8bc6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8bc8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8bca:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b8bce:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8bd2:	4631      	mov	r1, r6
   b8bd4:	f106 0008 	add.w	r0, r6, #8
   b8bd8:	f7ff ffae 	bl	b8b38 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8bdc:	b11e      	cbz	r6, b8be6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b8bde:	4669      	mov	r1, sp
   b8be0:	4630      	mov	r0, r6
   b8be2:	f7ff fe4e 	bl	b8882 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b8be6:	6863      	ldr	r3, [r4, #4]
   b8be8:	3301      	adds	r3, #1
   b8bea:	6063      	str	r3, [r4, #4]
    return true;
   b8bec:	2501      	movs	r5, #1
   b8bee:	a801      	add	r0, sp, #4
   b8bf0:	f7ff fe51 	bl	b8896 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8bf4:	4628      	mov	r0, r5
   b8bf6:	b003      	add	sp, #12
   b8bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b8bfa:	2500      	movs	r5, #0
   b8bfc:	e7de      	b.n	b8bbc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b8bfe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8bfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b8c00:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8c04:	4605      	mov	r5, r0
   b8c06:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b8c08:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b8c0c:	42a6      	cmp	r6, r4
   b8c0e:	d005      	beq.n	b8c1c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b8c10:	4639      	mov	r1, r7
   b8c12:	4620      	mov	r0, r4
   b8c14:	f7ff fcff 	bl	b8616 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b8c18:	b108      	cbz	r0, b8c1e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b8c1a:	b914      	cbnz	r4, b8c22 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b8c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b8c1e:	3408      	adds	r4, #8
   b8c20:	e7f4      	b.n	b8c0c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b8c22:	1d20      	adds	r0, r4, #4
   b8c24:	f7ff fe37 	bl	b8896 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b8c28:	e9d5 3200 	ldrd	r3, r2, [r5]
   b8c2c:	f104 0108 	add.w	r1, r4, #8
   b8c30:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8c34:	4620      	mov	r0, r4
   b8c36:	f7ff ff7f 	bl	b8b38 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b8c3a:	686b      	ldr	r3, [r5, #4]
   b8c3c:	3b01      	subs	r3, #1
   b8c3e:	606b      	str	r3, [r5, #4]
    return true;
   b8c40:	e7ec      	b.n	b8c1c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b8c44 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b8c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8c48:	4605      	mov	r5, r0
   b8c4a:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b8c4c:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b8c4e:	460c      	mov	r4, r1
        WiringBleLock lk;
   b8c50:	f7ff fb1e 	bl	b8290 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b8c54:	682e      	ldr	r6, [r5, #0]
   b8c56:	1ef3      	subs	r3, r6, #3
   b8c58:	2b0d      	cmp	r3, #13
   b8c5a:	d83c      	bhi.n	b8cd6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8c5c:	e8df f013 	tbh	[pc, r3, lsl #1]
   b8c60:	0053000e 	.word	0x0053000e
   b8c64:	00d1003b 	.word	0x00d1003b
   b8c68:	003b003b 	.word	0x003b003b
   b8c6c:	003b003b 	.word	0x003b003b
   b8c70:	009b003b 	.word	0x009b003b
   b8c74:	009b009b 	.word	0x009b009b
   b8c78:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b8c7c:	a804      	add	r0, sp, #16
   b8c7e:	f7ff fc95 	bl	b85ac <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b8c82:	9b04      	ldr	r3, [sp, #16]
   b8c84:	89aa      	ldrh	r2, [r5, #12]
   b8c86:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b8c88:	6869      	ldr	r1, [r5, #4]
   b8c8a:	9804      	ldr	r0, [sp, #16]
   b8c8c:	3108      	adds	r1, #8
   b8c8e:	3002      	adds	r0, #2
   b8c90:	f7ff fb18 	bl	b82c4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b8c94:	a904      	add	r1, sp, #16
   b8c96:	a806      	add	r0, sp, #24
   b8c98:	f7ff fdf3 	bl	b8882 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b8c9c:	a906      	add	r1, sp, #24
   b8c9e:	f104 0018 	add.w	r0, r4, #24
   b8ca2:	f7ff ff73 	bl	b8b8c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b8ca6:	4605      	mov	r5, r0
   b8ca8:	a807      	add	r0, sp, #28
   b8caa:	f7ff fdf4 	bl	b8896 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8cae:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b8cb0:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b8cb2:	b9b5      	cbnz	r5, b8ce2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b8cb4:	4b5d      	ldr	r3, [pc, #372]	; (b8e2c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b8cb6:	495e      	ldr	r1, [pc, #376]	; (b8e30 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8cb8:	9300      	str	r3, [sp, #0]
   b8cba:	2032      	movs	r0, #50	; 0x32
   b8cbc:	462b      	mov	r3, r5
   b8cbe:	aa06      	add	r2, sp, #24
   b8cc0:	9507      	str	r5, [sp, #28]
   b8cc2:	f7ff f909 	bl	b7ed8 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b8cc6:	9b04      	ldr	r3, [sp, #16]
   b8cc8:	4629      	mov	r1, r5
   b8cca:	8818      	ldrh	r0, [r3, #0]
   b8ccc:	f7fe ff84 	bl	b7bd8 <hal_ble_gap_disconnect>
   b8cd0:	a805      	add	r0, sp, #20
   b8cd2:	f7ff fde0 	bl	b8896 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b8cd6:	a803      	add	r0, sp, #12
   b8cd8:	f7ff fae8 	bl	b82ac <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b8cdc:	b00e      	add	sp, #56	; 0x38
   b8cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b8ce2:	4a54      	ldr	r2, [pc, #336]	; (b8e34 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b8ce4:	9200      	str	r2, [sp, #0]
   b8ce6:	2300      	movs	r3, #0
   b8ce8:	4951      	ldr	r1, [pc, #324]	; (b8e30 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8cea:	9307      	str	r3, [sp, #28]
   b8cec:	aa06      	add	r2, sp, #24
   b8cee:	2001      	movs	r0, #1
   b8cf0:	f7ff f8f2 	bl	b7ed8 <log_message>
                if (impl->connectedCallback_) {
   b8cf4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b8cf6:	2b00      	cmp	r3, #0
   b8cf8:	d0ea      	beq.n	b8cd0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b8cfa:	a904      	add	r1, sp, #16
   b8cfc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b8d00:	f7ff fe49 	bl	b8996 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b8d04:	e7e4      	b.n	b8cd0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b8d06:	89a9      	ldrh	r1, [r5, #12]
   b8d08:	4620      	mov	r0, r4
   b8d0a:	f7ff fc19 	bl	b8540 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b8d0e:	4606      	mov	r6, r0
   b8d10:	2800      	cmp	r0, #0
   b8d12:	d0e0      	beq.n	b8cd6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b8d14:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b8d16:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b8d1a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8d1e:	8029      	strh	r1, [r5, #0]
   b8d20:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b8d24:	429a      	cmp	r2, r3
   b8d26:	d003      	beq.n	b8d30 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b8d28:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b8d2c:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b8d2e:	e7f9      	b.n	b8d24 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b8d30:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b8d34:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b8d38:	45b8      	cmp	r8, r7
   b8d3a:	d004      	beq.n	b8d46 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b8d3c:	1d38      	adds	r0, r7, #4
   b8d3e:	f7ff fdaa 	bl	b8896 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8d42:	3708      	adds	r7, #8
   b8d44:	e7f8      	b.n	b8d38 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b8d46:	2300      	movs	r3, #0
   b8d48:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b8d4a:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b8d4e:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b8d52:	45b8      	cmp	r8, r7
   b8d54:	d004      	beq.n	b8d60 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b8d56:	1d38      	adds	r0, r7, #4
   b8d58:	f7ff fd9d 	bl	b8896 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8d5c:	3708      	adds	r7, #8
   b8d5e:	e7f8      	b.n	b8d52 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b8d60:	2300      	movs	r3, #0
   b8d62:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b8d64:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b8d66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8d68:	b123      	cbz	r3, b8d74 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b8d6a:	4631      	mov	r1, r6
   b8d6c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8d70:	f7ff fe11 	bl	b8996 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b8d74:	2300      	movs	r3, #0
   b8d76:	2220      	movs	r2, #32
   b8d78:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b8d7c:	4a2e      	ldr	r2, [pc, #184]	; (b8e38 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b8d7e:	9200      	str	r2, [sp, #0]
   b8d80:	492b      	ldr	r1, [pc, #172]	; (b8e30 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8d82:	aa06      	add	r2, sp, #24
   b8d84:	2001      	movs	r0, #1
   b8d86:	f7ff f8a7 	bl	b7ed8 <log_message>
                    impl->peers_.removeOne(*peer);
   b8d8a:	4631      	mov	r1, r6
   b8d8c:	f104 0018 	add.w	r0, r4, #24
   b8d90:	f7ff ff35 	bl	b8bfe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b8d94:	e79f      	b.n	b8cd6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b8d96:	89a9      	ldrh	r1, [r5, #12]
   b8d98:	4620      	mov	r0, r4
   b8d9a:	f7ff fbd1 	bl	b8540 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b8d9e:	2800      	cmp	r0, #0
   b8da0:	d099      	beq.n	b8cd6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b8da2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b8da4:	2b00      	cmp	r3, #0
   b8da6:	d096      	beq.n	b8cd6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b8da8:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b8daa:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b8dac:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b8db0:	d001      	beq.n	b8db6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b8db2:	2e10      	cmp	r6, #16
   b8db4:	d117      	bne.n	b8de6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b8db6:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b8db8:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b8dba:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b8dbc:	2506      	movs	r5, #6
                        };
   b8dbe:	f88d 3015 	strb.w	r3, [sp, #21]
   b8dc2:	9104      	str	r1, [sp, #16]
   b8dc4:	f88d 2014 	strb.w	r2, [sp, #20]
   b8dc8:	9006      	str	r0, [sp, #24]
   b8dca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b8dce:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b8dd0:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b8dd4:	9508      	str	r5, [sp, #32]
   b8dd6:	e883 0003 	stmia.w	r3, {r0, r1}
   b8dda:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b8ddc:	a906      	add	r1, sp, #24
   b8dde:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8de2:	4798      	blx	r3
   b8de4:	e777      	b.n	b8cd6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b8de6:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b8de8:	bf01      	itttt	eq
   b8dea:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b8dec:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b8dee:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b8df2:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b8df4:	bf0f      	iteee	eq
   b8df6:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b8dfa:	461a      	movne	r2, r3
   b8dfc:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b8dfe:	461d      	movne	r5, r3
   b8e00:	e7dd      	b.n	b8dbe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b8e02:	89a9      	ldrh	r1, [r5, #12]
   b8e04:	4620      	mov	r0, r4
   b8e06:	f7ff fb9b 	bl	b8540 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b8e0a:	4601      	mov	r1, r0
   b8e0c:	2800      	cmp	r0, #0
   b8e0e:	f43f af62 	beq.w	b8cd6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8e12:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b8e14:	2b00      	cmp	r3, #0
   b8e16:	f43f af5e 	beq.w	b8cd6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b8e1a:	686b      	ldr	r3, [r5, #4]
   b8e1c:	9306      	str	r3, [sp, #24]
   b8e1e:	aa06      	add	r2, sp, #24
   b8e20:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b8e22:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b8e26:	4798      	blx	r3
   b8e28:	e755      	b.n	b8cd6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8e2a:	bf00      	nop
   b8e2c:	000bdc40 	.word	0x000bdc40
   b8e30:	000bdbbf 	.word	0x000bdbbf
   b8e34:	000bdc66 	.word	0x000bdc66
   b8e38:	000bdc83 	.word	0x000bdc83

000b8e3c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b8e3c:	b513      	push	{r0, r1, r4, lr}
   b8e3e:	460b      	mov	r3, r1
   b8e40:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8e42:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8e46:	466c      	mov	r4, sp
   b8e48:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b8e4c:	e893 0003 	ldmia.w	r3, {r0, r1}
   b8e50:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b8e54:	e894 0003 	ldmia.w	r4, {r0, r1}
   b8e58:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b8e5c:	b002      	add	sp, #8
   b8e5e:	bd10      	pop	{r4, pc}

000b8e60 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b8e60:	b538      	push	{r3, r4, r5, lr}
   b8e62:	4605      	mov	r5, r0
   b8e64:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b8e66:	f7ff ffe9 	bl	b8e3c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8e6a:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8e6c:	68a2      	ldr	r2, [r4, #8]
   b8e6e:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8e70:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8e72:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8e74:	68e2      	ldr	r2, [r4, #12]
   b8e76:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8e78:	60e3      	str	r3, [r4, #12]
      }
   b8e7a:	bd38      	pop	{r3, r4, r5, pc}

000b8e7c <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b8e7c:	b570      	push	{r4, r5, r6, lr}
   b8e7e:	4604      	mov	r4, r0
   b8e80:	b08c      	sub	sp, #48	; 0x30
   b8e82:	460e      	mov	r6, r1
   b8e84:	9201      	str	r2, [sp, #4]
   b8e86:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b8e88:	f7ff fb3a 	bl	b8500 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b8e8c:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b8e8e:	9901      	ldr	r1, [sp, #4]
   b8e90:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b8e94:	f000 fd8b 	bl	b99ae <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b8e98:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b8e9c:	b1cd      	cbz	r5, b8ed2 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b8e9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b8ea0:	9502      	str	r5, [sp, #8]
   b8ea2:	a902      	add	r1, sp, #8
   b8ea4:	a804      	add	r0, sp, #16
   b8ea6:	9303      	str	r3, [sp, #12]
   b8ea8:	f7ff fcb4 	bl	b8814 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b8eac:	2300      	movs	r3, #0
	__x.swap(*this);
   b8eae:	a908      	add	r1, sp, #32
   b8eb0:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b8eb2:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b8eb4:	f7ff ffd4 	bl	b8e60 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b8eb8:	4631      	mov	r1, r6
   b8eba:	a808      	add	r0, sp, #32
   b8ebc:	f7ff ffd0 	bl	b8e60 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b8ec0:	a808      	add	r0, sp, #32
   b8ec2:	f7ff f9a7 	bl	b8214 <_ZNSt14_Function_baseD1Ev>
   b8ec6:	a804      	add	r0, sp, #16
   b8ec8:	f7ff f9a4 	bl	b8214 <_ZNSt14_Function_baseD1Ev>
    }
   b8ecc:	4620      	mov	r0, r4
   b8ece:	b00c      	add	sp, #48	; 0x30
   b8ed0:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b8ed2:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b8ed4:	e7ea      	b.n	b8eac <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b8ed8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b8ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8edc:	b087      	sub	sp, #28
   b8ede:	461d      	mov	r5, r3
   b8ee0:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b8ee4:	4680      	mov	r8, r0
   b8ee6:	468b      	mov	fp, r1
   b8ee8:	4692      	mov	sl, r2
   b8eea:	9912      	ldr	r1, [sp, #72]	; 0x48
   b8eec:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8eee:	2200      	movs	r2, #0
   b8ef0:	2068      	movs	r0, #104	; 0x68
   b8ef2:	9102      	str	r1, [sp, #8]
   b8ef4:	9204      	str	r2, [sp, #16]
   b8ef6:	f7fb f8ce 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b8efa:	1e06      	subs	r6, r0, #0
   b8efc:	f106 090c 	add.w	r9, r6, #12
   b8f00:	d018      	beq.n	b8f34 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b8f02:	2201      	movs	r2, #1
	: _M_impl(__a)
   b8f04:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b8f06:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b8f0a:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b8f0c:	4a15      	ldr	r2, [pc, #84]	; (b8f64 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b8f0e:	f847 2b20 	str.w	r2, [r7], #32
   b8f12:	9b03      	ldr	r3, [sp, #12]
   b8f14:	9100      	str	r1, [sp, #0]
   b8f16:	465a      	mov	r2, fp
   b8f18:	4651      	mov	r1, sl
   b8f1a:	4648      	mov	r0, r9
   b8f1c:	f7ff ffae 	bl	b8e7c <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b8f20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8f22:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b8f24:	682b      	ldr	r3, [r5, #0]
   b8f26:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b8f28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8f2a:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b8f2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8f30:	6823      	ldr	r3, [r4, #0]
   b8f32:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b8f34:	a904      	add	r1, sp, #16
   b8f36:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b8f38:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b8f3c:	f7ff fd1a 	bl	b8974 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b8f40:	a805      	add	r0, sp, #20
   b8f42:	f7ff fca8 	bl	b8896 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b8f46:	f8d8 3000 	ldr.w	r3, [r8]
   b8f4a:	b93b      	cbnz	r3, b8f5c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b8f4c:	4a06      	ldr	r2, [pc, #24]	; (b8f68 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b8f4e:	4907      	ldr	r1, [pc, #28]	; (b8f6c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b8f50:	200a      	movs	r0, #10
}
   b8f52:	b007      	add	sp, #28
   b8f54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b8f58:	f7fe bfb6 	b.w	b7ec8 <panic_>
}
   b8f5c:	b007      	add	sp, #28
   b8f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8f62:	bf00      	nop
   b8f64:	000bdcfc 	.word	0x000bdcfc
   b8f68:	000b7c69 	.word	0x000b7c69
   b8f6c:	000bdba8 	.word	0x000bdba8

000b8f70 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8f70:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8f72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8f74:	4604      	mov	r4, r0
   b8f76:	460d      	mov	r5, r1
   b8f78:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8f7a:	d914      	bls.n	b8fa6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8f7c:	4290      	cmp	r0, r2
   b8f7e:	d213      	bcs.n	b8fa8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8f80:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8f84:	1a75      	subs	r5, r6, r1
   b8f86:	f1a1 0708 	sub.w	r7, r1, #8
   b8f8a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8f8c:	42b7      	cmp	r7, r6
   b8f8e:	d018      	beq.n	b8fc2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8f90:	b11c      	cbz	r4, b8f9a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8f92:	4631      	mov	r1, r6
   b8f94:	4620      	mov	r0, r4
   b8f96:	f7ff fc6a 	bl	b886e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8f9a:	1d30      	adds	r0, r6, #4
   b8f9c:	f7ff fc7b 	bl	b8896 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8fa0:	3e08      	subs	r6, #8
   b8fa2:	3c08      	subs	r4, #8
   b8fa4:	e7f2      	b.n	b8f8c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8fa6:	d00c      	beq.n	b8fc2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8fa8:	42b5      	cmp	r5, r6
   b8faa:	d00a      	beq.n	b8fc2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8fac:	b11c      	cbz	r4, b8fb6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8fae:	4629      	mov	r1, r5
   b8fb0:	4620      	mov	r0, r4
   b8fb2:	f7ff fc5c 	bl	b886e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8fb6:	1d28      	adds	r0, r5, #4
   b8fb8:	f7ff fc6d 	bl	b8896 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8fbc:	3508      	adds	r5, #8
   b8fbe:	3408      	adds	r4, #8
   b8fc0:	e7f2      	b.n	b8fa8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8fc4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b8fc4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8fc6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8fc8:	4605      	mov	r5, r0
        if (n > 0) {
   b8fca:	dd11      	ble.n	b8ff0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b8fcc:	00f0      	lsls	r0, r6, #3
   b8fce:	f7ff f82f 	bl	b8030 <malloc>
            if (!d) {
   b8fd2:	4604      	mov	r4, r0
   b8fd4:	b158      	cbz	r0, b8fee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b8fd6:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8fda:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8fde:	f7ff ffc7 	bl	b8f70 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8fe2:	6828      	ldr	r0, [r5, #0]
   b8fe4:	f7ff f82c 	bl	b8040 <free>
        data_ = d;
   b8fe8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8fea:	60ae      	str	r6, [r5, #8]
        return true;
   b8fec:	2001      	movs	r0, #1
    }
   b8fee:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b8ff0:	2400      	movs	r4, #0
   b8ff2:	e7f6      	b.n	b8fe2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b8ff4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8ff4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8ff6:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8ff8:	6845      	ldr	r5, [r0, #4]
   b8ffa:	4668      	mov	r0, sp
   b8ffc:	f7ff fc37 	bl	b886e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9000:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b9004:	4299      	cmp	r1, r3
   b9006:	da10      	bge.n	b902a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b9008:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b900a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b900c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b9010:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b9014:	4629      	mov	r1, r5
   b9016:	f105 0008 	add.w	r0, r5, #8
   b901a:	f7ff ffa9 	bl	b8f70 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b901e:	b98d      	cbnz	r5, b9044 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b9020:	6863      	ldr	r3, [r4, #4]
   b9022:	3301      	adds	r3, #1
   b9024:	6063      	str	r3, [r4, #4]
    return true;
   b9026:	2601      	movs	r6, #1
   b9028:	e006      	b.n	b9038 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b902a:	3101      	adds	r1, #1
   b902c:	4620      	mov	r0, r4
   b902e:	f7ff ffc9 	bl	b8fc4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b9032:	4606      	mov	r6, r0
   b9034:	2800      	cmp	r0, #0
   b9036:	d1e7      	bne.n	b9008 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b9038:	a801      	add	r0, sp, #4
   b903a:	f7ff fc2c 	bl	b8896 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b903e:	4630      	mov	r0, r6
   b9040:	b002      	add	sp, #8
   b9042:	bd70      	pop	{r4, r5, r6, pc}
   b9044:	4669      	mov	r1, sp
   b9046:	4628      	mov	r0, r5
   b9048:	f7ff fc11 	bl	b886e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b904c:	e7e8      	b.n	b9020 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b904e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b904e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9052:	4604      	mov	r4, r0
   b9054:	460d      	mov	r5, r1
   b9056:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9058:	d914      	bls.n	b9084 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b905a:	4290      	cmp	r0, r2
   b905c:	d213      	bcs.n	b9086 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b905e:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b9062:	1a75      	subs	r5, r6, r1
   b9064:	f1a1 0708 	sub.w	r7, r1, #8
   b9068:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b906a:	42b7      	cmp	r7, r6
   b906c:	d018      	beq.n	b90a0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b906e:	b11c      	cbz	r4, b9078 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b9070:	4631      	mov	r1, r6
   b9072:	4620      	mov	r0, r4
   b9074:	f7ff fbed 	bl	b8852 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9078:	1d30      	adds	r0, r6, #4
   b907a:	f7ff fc0c 	bl	b8896 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b907e:	3e08      	subs	r6, #8
   b9080:	3c08      	subs	r4, #8
   b9082:	e7f2      	b.n	b906a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b9084:	d00c      	beq.n	b90a0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b9086:	42b5      	cmp	r5, r6
   b9088:	d00a      	beq.n	b90a0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b908a:	b11c      	cbz	r4, b9094 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b908c:	4629      	mov	r1, r5
   b908e:	4620      	mov	r0, r4
   b9090:	f7ff fbdf 	bl	b8852 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9094:	1d28      	adds	r0, r5, #4
   b9096:	f7ff fbfe 	bl	b8896 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b909a:	3508      	adds	r5, #8
   b909c:	3408      	adds	r4, #8
   b909e:	e7f2      	b.n	b9086 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b90a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b90a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b90a2:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b90a4:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b90a6:	4605      	mov	r5, r0
        if (n > 0) {
   b90a8:	dd11      	ble.n	b90ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b90aa:	00f0      	lsls	r0, r6, #3
   b90ac:	f7fe ffc0 	bl	b8030 <malloc>
            if (!d) {
   b90b0:	4604      	mov	r4, r0
   b90b2:	b158      	cbz	r0, b90cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b90b4:	e9d5 1200 	ldrd	r1, r2, [r5]
   b90b8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b90bc:	f7ff ffc7 	bl	b904e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b90c0:	6828      	ldr	r0, [r5, #0]
   b90c2:	f7fe ffbd 	bl	b8040 <free>
        data_ = d;
   b90c6:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b90c8:	60ae      	str	r6, [r5, #8]
        return true;
   b90ca:	2001      	movs	r0, #1
    }
   b90cc:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b90ce:	2400      	movs	r4, #0
   b90d0:	e7f6      	b.n	b90c0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b90d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b90d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b90d4:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b90d6:	6845      	ldr	r5, [r0, #4]
   b90d8:	4668      	mov	r0, sp
   b90da:	f7ff fbba 	bl	b8852 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b90de:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b90e2:	4299      	cmp	r1, r3
   b90e4:	da10      	bge.n	b9108 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b90e6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b90e8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b90ea:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b90ee:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b90f2:	4629      	mov	r1, r5
   b90f4:	f105 0008 	add.w	r0, r5, #8
   b90f8:	f7ff ffa9 	bl	b904e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b90fc:	b98d      	cbnz	r5, b9122 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b90fe:	6863      	ldr	r3, [r4, #4]
   b9100:	3301      	adds	r3, #1
   b9102:	6063      	str	r3, [r4, #4]
    return true;
   b9104:	2601      	movs	r6, #1
   b9106:	e006      	b.n	b9116 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9108:	3101      	adds	r1, #1
   b910a:	4620      	mov	r0, r4
   b910c:	f7ff ffc9 	bl	b90a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b9110:	4606      	mov	r6, r0
   b9112:	2800      	cmp	r0, #0
   b9114:	d1e7      	bne.n	b90e6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b9116:	a801      	add	r0, sp, #4
   b9118:	f7ff fbbd 	bl	b8896 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b911c:	4630      	mov	r0, r6
   b911e:	b002      	add	sp, #8
   b9120:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b9122:	4669      	mov	r1, sp
   b9124:	4628      	mov	r0, r5
   b9126:	f7ff fb94 	bl	b8852 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b912a:	e7e8      	b.n	b90fe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b912c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b912c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9130:	4617      	mov	r7, r2
   b9132:	b0a1      	sub	sp, #132	; 0x84
   b9134:	4680      	mov	r8, r0
    WiringBleLock lk;
   b9136:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b9138:	460e      	mov	r6, r1
    WiringBleLock lk;
   b913a:	f7ff f8a9 	bl	b8290 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b913e:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b9140:	7923      	ldrb	r3, [r4, #4]
   b9142:	b953      	cbnz	r3, b915a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b9144:	4639      	mov	r1, r7
   b9146:	4640      	mov	r0, r8
   b9148:	f7ff fb83 	bl	b8852 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b914c:	a80a      	add	r0, sp, #40	; 0x28
   b914e:	f7ff f8ad 	bl	b82ac <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b9152:	4640      	mov	r0, r8
   b9154:	b021      	add	sp, #132	; 0x84
   b9156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b915a:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b915c:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b9160:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b9164:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b9166:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b916a:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b916e:	9b03      	ldr	r3, [sp, #12]
   b9170:	429d      	cmp	r5, r3
   b9172:	d021      	beq.n	b91b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b9174:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b9178:	4658      	mov	r0, fp
   b917a:	f109 0114 	add.w	r1, r9, #20
   b917e:	f7ff f934 	bl	b83ea <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b9182:	b1b8      	cbz	r0, b91b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b9184:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b9188:	4650      	mov	r0, sl
   b918a:	f7ff f92e 	bl	b83ea <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b918e:	b188      	cbz	r0, b91b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b9190:	6823      	ldr	r3, [r4, #0]
   b9192:	f8d9 2000 	ldr.w	r2, [r9]
   b9196:	4053      	eors	r3, r2
   b9198:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b919c:	d10a      	bne.n	b91b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b919e:	2220      	movs	r2, #32
   b91a0:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b91a4:	4a5e      	ldr	r2, [pc, #376]	; (b9320 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b91a6:	9200      	str	r2, [sp, #0]
   b91a8:	aa15      	add	r2, sp, #84	; 0x54
   b91aa:	495e      	ldr	r1, [pc, #376]	; (b9324 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b91ac:	2032      	movs	r0, #50	; 0x32
   b91ae:	f7fe fe93 	bl	b7ed8 <log_message>
   b91b2:	e7c7      	b.n	b9144 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b91b4:	3508      	adds	r5, #8
   b91b6:	e7da      	b.n	b916e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b91b8:	4650      	mov	r0, sl
   b91ba:	f7ff f8e7 	bl	b838c <_ZNK8particle7BleUuid7isValidEv>
   b91be:	b960      	cbnz	r0, b91da <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b91c0:	4959      	ldr	r1, [pc, #356]	; (b9328 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b91c2:	2201      	movs	r2, #1
   b91c4:	a815      	add	r0, sp, #84	; 0x54
   b91c6:	ad15      	add	r5, sp, #84	; 0x54
   b91c8:	f7ff f8b8 	bl	b833c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b91cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b91ce:	46d4      	mov	ip, sl
   b91d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b91d4:	682b      	ldr	r3, [r5, #0]
   b91d6:	f8cc 3000 	str.w	r3, [ip]
   b91da:	6833      	ldr	r3, [r6, #0]
   b91dc:	e9d3 5300 	ldrd	r5, r3, [r3]
   b91e0:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b91e4:	455d      	cmp	r5, fp
   b91e6:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b91e8:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b91ea:	d06e      	beq.n	b92ca <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b91ec:	f855 0b08 	ldr.w	r0, [r5], #8
   b91f0:	f7ff f8fb 	bl	b83ea <_ZNK8particle7BleUuideqERKS0_>
   b91f4:	2800      	cmp	r0, #0
   b91f6:	d0f5      	beq.n	b91e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b91f8:	f104 0a14 	add.w	sl, r4, #20
   b91fc:	4650      	mov	r0, sl
   b91fe:	f7ff f8c5 	bl	b838c <_ZNK8particle7BleUuid7isValidEv>
   b9202:	b988      	cbnz	r0, b9228 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b9204:	4b49      	ldr	r3, [pc, #292]	; (b932c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b9206:	4948      	ldr	r1, [pc, #288]	; (b9328 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b9208:	881a      	ldrh	r2, [r3, #0]
   b920a:	3201      	adds	r2, #1
   b920c:	b292      	uxth	r2, r2
   b920e:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b9210:	a815      	add	r0, sp, #84	; 0x54
   b9212:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b9214:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b9216:	f7ff f8b0 	bl	b837a <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b921a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b921c:	46d4      	mov	ip, sl
   b921e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b9222:	682b      	ldr	r3, [r5, #0]
   b9224:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b9228:	4b41      	ldr	r3, [pc, #260]	; (b9330 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b922a:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b922c:	2228      	movs	r2, #40	; 0x28
   b922e:	2100      	movs	r1, #0
   b9230:	a816      	add	r0, sp, #88	; 0x58
   b9232:	f002 fa03 	bl	bb63c <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b9236:	4651      	mov	r1, sl
   b9238:	a804      	add	r0, sp, #16
   b923a:	f7ff f8b9 	bl	b83b0 <_ZN8particle7BleUuid7halUUIDEv>
   b923e:	ab04      	add	r3, sp, #16
   b9240:	aa18      	add	r2, sp, #96	; 0x60
   b9242:	f10d 0c20 	add.w	ip, sp, #32
   b9246:	6818      	ldr	r0, [r3, #0]
   b9248:	6859      	ldr	r1, [r3, #4]
   b924a:	4615      	mov	r5, r2
   b924c:	c503      	stmia	r5!, {r0, r1}
   b924e:	3308      	adds	r3, #8
   b9250:	4563      	cmp	r3, ip
   b9252:	462a      	mov	r2, r5
   b9254:	d1f7      	bne.n	b9246 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b9256:	6818      	ldr	r0, [r3, #0]
   b9258:	6028      	str	r0, [r5, #0]
    return *this;
}

template<typename T>
inline typename std::underlying_type_t<T> particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::value() const {
    return value_;
   b925a:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b925c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b9260:	f8d9 3000 	ldr.w	r3, [r9]
   b9264:	8a9b      	ldrh	r3, [r3, #20]
   b9266:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b926a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b926c:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b926e:	4b31      	ldr	r3, [pc, #196]	; (b9334 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b9270:	2200      	movs	r2, #0
   b9272:	1da1      	adds	r1, r4, #6
   b9274:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b9276:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b927a:	f7fe fcc1 	bl	b7c00 <hal_ble_gatt_server_add_characteristic>
   b927e:	2800      	cmp	r0, #0
   b9280:	f47f af60 	bne.w	b9144 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b9284:	2301      	movs	r3, #1
   b9286:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b9288:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b928a:	4639      	mov	r1, r7
        return characteristics_;
   b928c:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b928e:	a80d      	add	r0, sp, #52	; 0x34
   b9290:	f7ff fadf 	bl	b8852 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9294:	4620      	mov	r0, r4
   b9296:	a90d      	add	r1, sp, #52	; 0x34
   b9298:	f7ff ff1b 	bl	b90d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b929c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b929e:	a80e      	add	r0, sp, #56	; 0x38
   b92a0:	f7ff faf9 	bl	b8896 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b92a4:	2c00      	cmp	r4, #0
   b92a6:	f47f af4d 	bne.w	b9144 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b92aa:	2320      	movs	r3, #32
   b92ac:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b92b0:	4b21      	ldr	r3, [pc, #132]	; (b9338 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b92b2:	9300      	str	r3, [sp, #0]
   b92b4:	aa0d      	add	r2, sp, #52	; 0x34
   b92b6:	4623      	mov	r3, r4
   b92b8:	e777      	b.n	b91aa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b92ba:	4639      	mov	r1, r7
   b92bc:	4640      	mov	r0, r8
   b92be:	f7ff fac8 	bl	b8852 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b92c2:	a80c      	add	r0, sp, #48	; 0x30
   b92c4:	f7ff fae7 	bl	b8896 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b92c8:	e740      	b.n	b914c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b92ca:	a80b      	add	r0, sp, #44	; 0x2c
   b92cc:	f7ff f94a 	bl	b8564 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b92d0:	4651      	mov	r1, sl
   b92d2:	a815      	add	r0, sp, #84	; 0x54
   b92d4:	f7ff f86c 	bl	b83b0 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b92d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b92da:	2300      	movs	r3, #0
   b92dc:	3214      	adds	r2, #20
   b92de:	a915      	add	r1, sp, #84	; 0x54
   b92e0:	2001      	movs	r0, #1
   b92e2:	f7fe fc83 	bl	b7bec <hal_ble_gatt_server_add_service>
   b92e6:	2800      	cmp	r0, #0
   b92e8:	d1e7      	bne.n	b92ba <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b92ea:	6835      	ldr	r5, [r6, #0]
   b92ec:	a90b      	add	r1, sp, #44	; 0x2c
   b92ee:	a80d      	add	r0, sp, #52	; 0x34
   b92f0:	f7ff fabd 	bl	b886e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b92f4:	4628      	mov	r0, r5
   b92f6:	a90d      	add	r1, sp, #52	; 0x34
   b92f8:	f7ff fe7c 	bl	b8ff4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b92fc:	4605      	mov	r5, r0
   b92fe:	a80e      	add	r0, sp, #56	; 0x38
   b9300:	f7ff fac9 	bl	b8896 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9304:	2d00      	cmp	r5, #0
   b9306:	d0d8      	beq.n	b92ba <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b9308:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b930a:	6853      	ldr	r3, [r2, #4]
   b930c:	6812      	ldr	r2, [r2, #0]
   b930e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b9312:	3b01      	subs	r3, #1
   b9314:	a80c      	add	r0, sp, #48	; 0x30
   b9316:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b931a:	f7ff fabc 	bl	b8896 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b931e:	e76b      	b.n	b91f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b9320:	000bdca2 	.word	0x000bdca2
   b9324:	000bdbbf 	.word	0x000bdbbf
   b9328:	000bdd66 	.word	0x000bdd66
   b932c:	2003e6bc 	.word	0x2003e6bc
   b9330:	002c0003 	.word	0x002c0003
   b9334:	000b86fd 	.word	0x000b86fd
   b9338:	000bdccd 	.word	0x000bdccd

000b933c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b933c:	4802      	ldr	r0, [pc, #8]	; (b9348 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b933e:	2300      	movs	r3, #0
   b9340:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b9342:	f7fe bc71 	b.w	b7c28 <os_mutex_recursive_create>
   b9346:	bf00      	nop
   b9348:	2003e6c0 	.word	0x2003e6c0

000b934c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b934c:	2200      	movs	r2, #0
   b934e:	6840      	ldr	r0, [r0, #4]
   b9350:	4611      	mov	r1, r2
   b9352:	f7fe be2d 	b.w	b7fb0 <network_listening>

000b9356 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9356:	2200      	movs	r2, #0
   b9358:	6840      	ldr	r0, [r0, #4]
   b935a:	4611      	mov	r1, r2
   b935c:	f7fe be50 	b.w	b8000 <network_get_listen_timeout>

000b9360 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9360:	6840      	ldr	r0, [r0, #4]
   b9362:	2200      	movs	r2, #0
   b9364:	f7fe be44 	b.w	b7ff0 <network_set_listen_timeout>

000b9368 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9368:	6840      	ldr	r0, [r0, #4]
   b936a:	2200      	movs	r2, #0
   b936c:	f081 0101 	eor.w	r1, r1, #1
   b9370:	f7fe be16 	b.w	b7fa0 <network_listen>

000b9374 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9374:	2300      	movs	r3, #0
   b9376:	6840      	ldr	r0, [r0, #4]
   b9378:	461a      	mov	r2, r3
   b937a:	4619      	mov	r1, r3
   b937c:	f7fe be08 	b.w	b7f90 <network_off>

000b9380 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b9380:	2300      	movs	r3, #0
   b9382:	6840      	ldr	r0, [r0, #4]
   b9384:	461a      	mov	r2, r3
   b9386:	4619      	mov	r1, r3
   b9388:	f7fe bdfa 	b.w	b7f80 <network_on>

000b938c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b938c:	2200      	movs	r2, #0
   b938e:	6840      	ldr	r0, [r0, #4]
   b9390:	4611      	mov	r1, r2
   b9392:	f7fe bded 	b.w	b7f70 <network_ready>

000b9396 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9396:	2200      	movs	r2, #0
   b9398:	6840      	ldr	r0, [r0, #4]
   b939a:	4611      	mov	r1, r2
   b939c:	f7fe bdd8 	b.w	b7f50 <network_connecting>

000b93a0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b93a0:	6840      	ldr	r0, [r0, #4]
   b93a2:	2200      	movs	r2, #0
   b93a4:	2102      	movs	r1, #2
   b93a6:	f7fe bddb 	b.w	b7f60 <network_disconnect>

000b93aa <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b93aa:	2300      	movs	r3, #0
   b93ac:	6840      	ldr	r0, [r0, #4]
   b93ae:	461a      	mov	r2, r3
   b93b0:	f7fe bdc6 	b.w	b7f40 <network_connect>

000b93b4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b93b4:	4b02      	ldr	r3, [pc, #8]	; (b93c0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b93b6:	2203      	movs	r2, #3
   b93b8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b93ba:	4a02      	ldr	r2, [pc, #8]	; (b93c4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b93bc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b93be:	4770      	bx	lr
   b93c0:	2003e6c8 	.word	0x2003e6c8
   b93c4:	000bdd90 	.word	0x000bdd90

000b93c8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b93c8:	4770      	bx	lr

000b93ca <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b93ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b93cc:	4606      	mov	r6, r0
   b93ce:	4615      	mov	r5, r2
   b93d0:	460c      	mov	r4, r1
   b93d2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b93d4:	42bc      	cmp	r4, r7
   b93d6:	d006      	beq.n	b93e6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b93d8:	6833      	ldr	r3, [r6, #0]
   b93da:	f814 1b01 	ldrb.w	r1, [r4], #1
   b93de:	689b      	ldr	r3, [r3, #8]
   b93e0:	4630      	mov	r0, r6
   b93e2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b93e4:	e7f6      	b.n	b93d4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b93e6:	4628      	mov	r0, r5
   b93e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b93ea <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b93ea:	7c00      	ldrb	r0, [r0, #16]
   b93ec:	2200      	movs	r2, #0
   b93ee:	f7fe bc63 	b.w	b7cb8 <hal_i2c_write>

000b93f2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b93f2:	7c00      	ldrb	r0, [r0, #16]
   b93f4:	2100      	movs	r1, #0
   b93f6:	f7fe bc67 	b.w	b7cc8 <hal_i2c_available>

000b93fa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b93fa:	7c00      	ldrb	r0, [r0, #16]
   b93fc:	2100      	movs	r1, #0
   b93fe:	f7fe bc6b 	b.w	b7cd8 <hal_i2c_read>

000b9402 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b9402:	7c00      	ldrb	r0, [r0, #16]
   b9404:	2100      	movs	r1, #0
   b9406:	f7fe bc6f 	b.w	b7ce8 <hal_i2c_peek>

000b940a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b940a:	7c00      	ldrb	r0, [r0, #16]
   b940c:	2100      	movs	r1, #0
   b940e:	f7fe bc73 	b.w	b7cf8 <hal_i2c_flush>

000b9412 <_ZN7TwoWireD0Ev>:
   b9412:	b510      	push	{r4, lr}
   b9414:	2114      	movs	r1, #20
   b9416:	4604      	mov	r4, r0
   b9418:	f7fa fe43 	bl	b40a2 <_ZdlPvj>
   b941c:	4620      	mov	r0, r4
   b941e:	bd10      	pop	{r4, pc}

000b9420 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b9420:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b9422:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9426:	4604      	mov	r4, r0
   b9428:	4608      	mov	r0, r1
   b942a:	2100      	movs	r1, #0
   b942c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b9430:	4b03      	ldr	r3, [pc, #12]	; (b9440 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b9432:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b9434:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b9436:	4611      	mov	r1, r2
   b9438:	f7fe fc66 	bl	b7d08 <hal_i2c_init>
}
   b943c:	4620      	mov	r0, r4
   b943e:	bd10      	pop	{r4, pc}
   b9440:	000bddcc 	.word	0x000bddcc

000b9444 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b9444:	2300      	movs	r3, #0
   b9446:	7c00      	ldrb	r0, [r0, #16]
   b9448:	461a      	mov	r2, r3
   b944a:	4619      	mov	r1, r3
   b944c:	f7fe bc1c 	b.w	b7c88 <hal_i2c_begin>

000b9450 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b9450:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b9452:	2200      	movs	r2, #0
   b9454:	2314      	movs	r3, #20
   b9456:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b945a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b945e:	780b      	ldrb	r3, [r1, #0]
   b9460:	f88d 3008 	strb.w	r3, [sp, #8]
   b9464:	684b      	ldr	r3, [r1, #4]
   b9466:	9303      	str	r3, [sp, #12]
   b9468:	68cb      	ldr	r3, [r1, #12]
   b946a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b946c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b946e:	7a0b      	ldrb	r3, [r1, #8]
   b9470:	9305      	str	r3, [sp, #20]
   b9472:	a901      	add	r1, sp, #4
   b9474:	f7fe fc50 	bl	b7d18 <hal_i2c_request_ex>
}
   b9478:	b007      	add	sp, #28
   b947a:	f85d fb04 	ldr.w	pc, [sp], #4

000b947e <_ZN7TwoWire11requestFromEhjh>:
{
   b947e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b9480:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b9482:	f88d 1000 	strb.w	r1, [sp]
   b9486:	f04f 0164 	mov.w	r1, #100	; 0x64
   b948a:	9103      	str	r1, [sp, #12]
   b948c:	bf18      	it	ne
   b948e:	2301      	movne	r3, #1
   b9490:	4669      	mov	r1, sp
    size_ = size;
   b9492:	9201      	str	r2, [sp, #4]
   b9494:	f88d 3008 	strb.w	r3, [sp, #8]
   b9498:	f7ff ffda 	bl	b9450 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b949c:	b005      	add	sp, #20
   b949e:	f85d fb04 	ldr.w	pc, [sp], #4

000b94a2 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b94a2:	2301      	movs	r3, #1
   b94a4:	f7ff bfeb 	b.w	b947e <_ZN7TwoWire11requestFromEhjh>

000b94a8 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b94a8:	7c00      	ldrb	r0, [r0, #16]
   b94aa:	2200      	movs	r2, #0
   b94ac:	f7fe bbf4 	b.w	b7c98 <hal_i2c_begin_transmission>

000b94b0 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b94b0:	b2c9      	uxtb	r1, r1
   b94b2:	f7ff bff9 	b.w	b94a8 <_ZN7TwoWire17beginTransmissionEh>

000b94b6 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b94b6:	7c00      	ldrb	r0, [r0, #16]
   b94b8:	2200      	movs	r2, #0
   b94ba:	f7fe bbf5 	b.w	b7ca8 <hal_i2c_end_transmission>

000b94be <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b94be:	2101      	movs	r1, #1
   b94c0:	f7ff bff9 	b.w	b94b6 <_ZN7TwoWire15endTransmissionEh>

000b94c4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b94c4:	4770      	bx	lr

000b94c6 <_ZN9IPAddressD0Ev>:
   b94c6:	b510      	push	{r4, lr}
   b94c8:	2118      	movs	r1, #24
   b94ca:	4604      	mov	r4, r0
   b94cc:	f7fa fde9 	bl	b40a2 <_ZdlPvj>
   b94d0:	4620      	mov	r0, r4
   b94d2:	bd10      	pop	{r4, pc}

000b94d4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b94d4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b94d6:	7d03      	ldrb	r3, [r0, #20]
   b94d8:	2b06      	cmp	r3, #6
{
   b94da:	b08d      	sub	sp, #52	; 0x34
   b94dc:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b94de:	f100 0704 	add.w	r7, r0, #4
   b94e2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b94e6:	d012      	beq.n	b950e <_ZNK9IPAddress7printToER5Print+0x3a>
   b94e8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b94ec:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b94f0:	220a      	movs	r2, #10
   b94f2:	4630      	mov	r0, r6
   b94f4:	f000 f973 	bl	b97de <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b94f8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b94fa:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b94fc:	d019      	beq.n	b9532 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b94fe:	2c00      	cmp	r4, #0
   b9500:	d0f4      	beq.n	b94ec <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b9502:	212e      	movs	r1, #46	; 0x2e
   b9504:	4630      	mov	r0, r6
   b9506:	f000 f951 	bl	b97ac <_ZN5Print5printEc>
   b950a:	4404      	add	r4, r0
   b950c:	e7ee      	b.n	b94ec <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b950e:	232f      	movs	r3, #47	; 0x2f
   b9510:	466a      	mov	r2, sp
   b9512:	4639      	mov	r1, r7
   b9514:	200a      	movs	r0, #10
		buf[0] = 0;
   b9516:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b951a:	f7fe fc0d 	bl	b7d38 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b951e:	4668      	mov	r0, sp
   b9520:	f002 f8d4 	bl	bb6cc <strlen>
   b9524:	6833      	ldr	r3, [r6, #0]
   b9526:	4602      	mov	r2, r0
   b9528:	68db      	ldr	r3, [r3, #12]
   b952a:	4669      	mov	r1, sp
   b952c:	4630      	mov	r0, r6
   b952e:	4798      	blx	r3
   b9530:	4604      	mov	r4, r0
    }
    return n;
}
   b9532:	4620      	mov	r0, r4
   b9534:	b00d      	add	sp, #52	; 0x34
   b9536:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9538 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b9538:	b510      	push	{r4, lr}
   b953a:	4b05      	ldr	r3, [pc, #20]	; (b9550 <_ZN9IPAddressC1Ev+0x18>)
   b953c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b953e:	2211      	movs	r2, #17
   b9540:	f840 3b04 	str.w	r3, [r0], #4
   b9544:	2100      	movs	r1, #0
   b9546:	f002 f879 	bl	bb63c <memset>
}
   b954a:	4620      	mov	r0, r4
   b954c:	bd10      	pop	{r4, pc}
   b954e:	bf00      	nop
   b9550:	000bddf4 	.word	0x000bddf4

000b9554 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b9554:	4603      	mov	r3, r0
   b9556:	4a07      	ldr	r2, [pc, #28]	; (b9574 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b9558:	b510      	push	{r4, lr}
   b955a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b955e:	f101 0210 	add.w	r2, r1, #16
   b9562:	f851 4b04 	ldr.w	r4, [r1], #4
   b9566:	f843 4b04 	str.w	r4, [r3], #4
   b956a:	4291      	cmp	r1, r2
   b956c:	d1f9      	bne.n	b9562 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b956e:	780a      	ldrb	r2, [r1, #0]
   b9570:	701a      	strb	r2, [r3, #0]
}
   b9572:	bd10      	pop	{r4, pc}
   b9574:	000bddf4 	.word	0x000bddf4

000b9578 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b9578:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b957a:	2b04      	cmp	r3, #4
   b957c:	d104      	bne.n	b9588 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b957e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b9580:	3800      	subs	r0, #0
   b9582:	bf18      	it	ne
   b9584:	2001      	movne	r0, #1
   b9586:	4770      	bx	lr
    } else if (version() == 6) {
   b9588:	2b06      	cmp	r3, #6
   b958a:	d107      	bne.n	b959c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b958c:	6843      	ldr	r3, [r0, #4]
   b958e:	b93b      	cbnz	r3, b95a0 <_ZNK9IPAddresscvbEv+0x28>
   b9590:	6883      	ldr	r3, [r0, #8]
   b9592:	b92b      	cbnz	r3, b95a0 <_ZNK9IPAddresscvbEv+0x28>
   b9594:	68c3      	ldr	r3, [r0, #12]
   b9596:	b91b      	cbnz	r3, b95a0 <_ZNK9IPAddresscvbEv+0x28>
   b9598:	6900      	ldr	r0, [r0, #16]
   b959a:	e7f1      	b.n	b9580 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b959c:	2000      	movs	r0, #0
   b959e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b95a0:	2001      	movs	r0, #1
}
   b95a2:	4770      	bx	lr

000b95a4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b95a4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b95a6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b95aa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b95ae:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b95b2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b95b6:	2304      	movs	r3, #4
   b95b8:	6041      	str	r1, [r0, #4]
   b95ba:	7503      	strb	r3, [r0, #20]
}
   b95bc:	bd10      	pop	{r4, pc}
	...

000b95c0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b95c0:	b507      	push	{r0, r1, r2, lr}
   b95c2:	4b06      	ldr	r3, [pc, #24]	; (b95dc <_ZN9IPAddressC1EPKh+0x1c>)
   b95c4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b95c6:	78cb      	ldrb	r3, [r1, #3]
   b95c8:	9300      	str	r3, [sp, #0]
   b95ca:	788b      	ldrb	r3, [r1, #2]
   b95cc:	784a      	ldrb	r2, [r1, #1]
   b95ce:	7809      	ldrb	r1, [r1, #0]
   b95d0:	f7ff ffe8 	bl	b95a4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b95d4:	b003      	add	sp, #12
   b95d6:	f85d fb04 	ldr.w	pc, [sp], #4
   b95da:	bf00      	nop
   b95dc:	000bddf4 	.word	0x000bddf4

000b95e0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b95e0:	4b01      	ldr	r3, [pc, #4]	; (b95e8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b95e2:	4a02      	ldr	r2, [pc, #8]	; (b95ec <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b95e4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b95e6:	4770      	bx	lr
   b95e8:	2003e6d0 	.word	0x2003e6d0
   b95ec:	000bde00 	.word	0x000bde00

000b95f0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b95f0:	2300      	movs	r3, #0
   b95f2:	6840      	ldr	r0, [r0, #4]
   b95f4:	461a      	mov	r2, r3
   b95f6:	f7fe bca3 	b.w	b7f40 <network_connect>

000b95fa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b95fa:	6840      	ldr	r0, [r0, #4]
   b95fc:	2200      	movs	r2, #0
   b95fe:	2102      	movs	r1, #2
   b9600:	f7fe bcae 	b.w	b7f60 <network_disconnect>

000b9604 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b9604:	2200      	movs	r2, #0
   b9606:	6840      	ldr	r0, [r0, #4]
   b9608:	4611      	mov	r1, r2
   b960a:	f7fe bca1 	b.w	b7f50 <network_connecting>

000b960e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b960e:	2200      	movs	r2, #0
   b9610:	6840      	ldr	r0, [r0, #4]
   b9612:	4611      	mov	r1, r2
   b9614:	f7fe bcac 	b.w	b7f70 <network_ready>

000b9618 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b9618:	2300      	movs	r3, #0
   b961a:	6840      	ldr	r0, [r0, #4]
   b961c:	461a      	mov	r2, r3
   b961e:	4619      	mov	r1, r3
   b9620:	f7fe bcae 	b.w	b7f80 <network_on>

000b9624 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b9624:	2300      	movs	r3, #0
   b9626:	6840      	ldr	r0, [r0, #4]
   b9628:	461a      	mov	r2, r3
   b962a:	4619      	mov	r1, r3
   b962c:	f7fe bcb0 	b.w	b7f90 <network_off>

000b9630 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b9630:	6840      	ldr	r0, [r0, #4]
   b9632:	2100      	movs	r1, #0
   b9634:	f7fe bcec 	b.w	b8010 <network_is_on>

000b9638 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b9638:	6840      	ldr	r0, [r0, #4]
   b963a:	2100      	movs	r1, #0
   b963c:	f7fe bcf0 	b.w	b8020 <network_is_off>

000b9640 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b9640:	6840      	ldr	r0, [r0, #4]
   b9642:	2200      	movs	r2, #0
   b9644:	f081 0101 	eor.w	r1, r1, #1
   b9648:	f7fe bcaa 	b.w	b7fa0 <network_listen>

000b964c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b964c:	6840      	ldr	r0, [r0, #4]
   b964e:	2200      	movs	r2, #0
   b9650:	f7fe bcce 	b.w	b7ff0 <network_set_listen_timeout>

000b9654 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b9654:	2200      	movs	r2, #0
   b9656:	6840      	ldr	r0, [r0, #4]
   b9658:	4611      	mov	r1, r2
   b965a:	f7fe bcd1 	b.w	b8000 <network_get_listen_timeout>

000b965e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b965e:	2200      	movs	r2, #0
   b9660:	6840      	ldr	r0, [r0, #4]
   b9662:	4611      	mov	r1, r2
   b9664:	f7fe bca4 	b.w	b7fb0 <network_listening>

000b9668 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b9668:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b966c:	b095      	sub	sp, #84	; 0x54
   b966e:	4614      	mov	r4, r2
   b9670:	460d      	mov	r5, r1
   b9672:	4607      	mov	r7, r0
    IPAddress addr;
   b9674:	f7ff ff60 	bl	b9538 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b9678:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b967a:	221c      	movs	r2, #28
   b967c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b967e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b9680:	f001 ffdc 	bl	bb63c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b9684:	2340      	movs	r3, #64	; 0x40
   b9686:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b9688:	4620      	mov	r0, r4
   b968a:	466b      	mov	r3, sp
   b968c:	aa0c      	add	r2, sp, #48	; 0x30
   b968e:	2100      	movs	r1, #0
   b9690:	f7fe fb72 	bl	b7d78 <netdb_getaddrinfo>
    if (!r) {
   b9694:	4604      	mov	r4, r0
   b9696:	2800      	cmp	r0, #0
   b9698:	d14b      	bne.n	b9732 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b969a:	4602      	mov	r2, r0
   b969c:	2101      	movs	r1, #1
   b969e:	6868      	ldr	r0, [r5, #4]
   b96a0:	f7fe fc66 	bl	b7f70 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b96a4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b96a6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b96a8:	4622      	mov	r2, r4
   b96aa:	6868      	ldr	r0, [r5, #4]
   b96ac:	f7fe fc60 	bl	b7f70 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b96b0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b96b2:	4681      	mov	r9, r0
        bool ok = false;
   b96b4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b96b6:	2e00      	cmp	r6, #0
   b96b8:	d03b      	beq.n	b9732 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b96ba:	2900      	cmp	r1, #0
   b96bc:	d139      	bne.n	b9732 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b96be:	6873      	ldr	r3, [r6, #4]
   b96c0:	2b02      	cmp	r3, #2
   b96c2:	d003      	beq.n	b96cc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b96c4:	2b0a      	cmp	r3, #10
   b96c6:	d011      	beq.n	b96ec <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b96c8:	69f6      	ldr	r6, [r6, #28]
   b96ca:	e7f4      	b.n	b96b6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b96cc:	f1b8 0f00 	cmp.w	r8, #0
   b96d0:	d0fa      	beq.n	b96c8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b96d2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b96d4:	a806      	add	r0, sp, #24
   b96d6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b96d8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b96da:	f7ff ff71 	bl	b95c0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b96de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b96e0:	1d3c      	adds	r4, r7, #4
   b96e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b96e4:	682b      	ldr	r3, [r5, #0]
   b96e6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b96e8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b96ea:	e7ed      	b.n	b96c8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b96ec:	f1b9 0f00 	cmp.w	r9, #0
   b96f0:	d0ea      	beq.n	b96c8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b96f2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b96f4:	2210      	movs	r2, #16
   b96f6:	a801      	add	r0, sp, #4
   b96f8:	f001 ffa0 	bl	bb63c <memset>
                    a.v = 6;
   b96fc:	2306      	movs	r3, #6
   b96fe:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b9702:	ad01      	add	r5, sp, #4
   b9704:	f104 0308 	add.w	r3, r4, #8
   b9708:	3418      	adds	r4, #24
   b970a:	6818      	ldr	r0, [r3, #0]
   b970c:	6859      	ldr	r1, [r3, #4]
   b970e:	462a      	mov	r2, r5
   b9710:	c203      	stmia	r2!, {r0, r1}
   b9712:	3308      	adds	r3, #8
   b9714:	42a3      	cmp	r3, r4
   b9716:	4615      	mov	r5, r2
   b9718:	d1f7      	bne.n	b970a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b971a:	a901      	add	r1, sp, #4
   b971c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b971e:	ad07      	add	r5, sp, #28
   b9720:	f7ff ff18 	bl	b9554 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9726:	1d3c      	adds	r4, r7, #4
   b9728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b972a:	682b      	ldr	r3, [r5, #0]
   b972c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b972e:	4649      	mov	r1, r9
   b9730:	e7ca      	b.n	b96c8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b9732:	9800      	ldr	r0, [sp, #0]
   b9734:	f7fe fb18 	bl	b7d68 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b9738:	4638      	mov	r0, r7
   b973a:	b015      	add	sp, #84	; 0x54
   b973c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b9740 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b9740:	4b02      	ldr	r3, [pc, #8]	; (b974c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b9742:	4a03      	ldr	r2, [pc, #12]	; (b9750 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b9744:	601a      	str	r2, [r3, #0]
   b9746:	2200      	movs	r2, #0
   b9748:	605a      	str	r2, [r3, #4]

} // spark
   b974a:	4770      	bx	lr
   b974c:	2003e6d4 	.word	0x2003e6d4
   b9750:	000bde0c 	.word	0x000bde0c

000b9754 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b9754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9756:	4606      	mov	r6, r0
   b9758:	460d      	mov	r5, r1
  size_t n = 0;
   b975a:	188f      	adds	r7, r1, r2
   b975c:	2400      	movs	r4, #0
  while (size--) {
   b975e:	42bd      	cmp	r5, r7
   b9760:	d00c      	beq.n	b977c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b9762:	6833      	ldr	r3, [r6, #0]
   b9764:	f815 1b01 	ldrb.w	r1, [r5], #1
   b9768:	689b      	ldr	r3, [r3, #8]
   b976a:	4630      	mov	r0, r6
   b976c:	4798      	blx	r3
     if (chunk>=0)
   b976e:	1e03      	subs	r3, r0, #0
   b9770:	db01      	blt.n	b9776 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b9772:	441c      	add	r4, r3
  while (size--) {
   b9774:	e7f3      	b.n	b975e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b9776:	2c00      	cmp	r4, #0
   b9778:	bf08      	it	eq
   b977a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b977c:	4620      	mov	r0, r4
   b977e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9780 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b9780:	b513      	push	{r0, r1, r4, lr}
   b9782:	4604      	mov	r4, r0
    }
   b9784:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b9786:	b159      	cbz	r1, b97a0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b9788:	9101      	str	r1, [sp, #4]
   b978a:	f001 ff9f 	bl	bb6cc <strlen>
   b978e:	6823      	ldr	r3, [r4, #0]
   b9790:	9901      	ldr	r1, [sp, #4]
   b9792:	68db      	ldr	r3, [r3, #12]
   b9794:	4602      	mov	r2, r0
   b9796:	4620      	mov	r0, r4
    }
   b9798:	b002      	add	sp, #8
   b979a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b979e:	4718      	bx	r3
    }
   b97a0:	b002      	add	sp, #8
   b97a2:	bd10      	pop	{r4, pc}

000b97a4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b97a4:	b508      	push	{r3, lr}
  return write(str);
   b97a6:	f7ff ffeb 	bl	b9780 <_ZN5Print5writeEPKc>
}
   b97aa:	bd08      	pop	{r3, pc}

000b97ac <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b97ac:	6803      	ldr	r3, [r0, #0]
   b97ae:	689b      	ldr	r3, [r3, #8]
   b97b0:	4718      	bx	r3

000b97b2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b97b2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b97b4:	210d      	movs	r1, #13
{
   b97b6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b97b8:	f7ff fff8 	bl	b97ac <_ZN5Print5printEc>
  n += print('\n');
   b97bc:	210a      	movs	r1, #10
  size_t n = print('\r');
   b97be:	4604      	mov	r4, r0
  n += print('\n');
   b97c0:	4628      	mov	r0, r5
   b97c2:	f7ff fff3 	bl	b97ac <_ZN5Print5printEc>
  return n;
}
   b97c6:	4420      	add	r0, r4
   b97c8:	bd38      	pop	{r3, r4, r5, pc}

000b97ca <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b97ca:	b538      	push	{r3, r4, r5, lr}
   b97cc:	4605      	mov	r5, r0
  return write(str);
   b97ce:	f7ff ffd7 	bl	b9780 <_ZN5Print5writeEPKc>
   b97d2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b97d4:	4628      	mov	r0, r5
   b97d6:	f7ff ffec 	bl	b97b2 <_ZN5Print7printlnEv>
  return n;
}
   b97da:	4420      	add	r0, r4
   b97dc:	bd38      	pop	{r3, r4, r5, pc}

000b97de <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b97de:	b530      	push	{r4, r5, lr}
   b97e0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b97e2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b97e4:	2a01      	cmp	r2, #1
  *str = '\0';
   b97e6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b97ea:	bf98      	it	ls
   b97ec:	220a      	movls	r2, #10
   b97ee:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b97f0:	460d      	mov	r5, r1
   b97f2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b97f6:	fb01 5312 	mls	r3, r1, r2, r5
   b97fa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b97fe:	2b09      	cmp	r3, #9
   b9800:	bf94      	ite	ls
   b9802:	3330      	addls	r3, #48	; 0x30
   b9804:	3337      	addhi	r3, #55	; 0x37
   b9806:	b2db      	uxtb	r3, r3
  } while(n);
   b9808:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b980a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b980e:	d9ef      	bls.n	b97f0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b9810:	4621      	mov	r1, r4
   b9812:	f7ff ffb5 	bl	b9780 <_ZN5Print5writeEPKc>
}
   b9816:	b00b      	add	sp, #44	; 0x2c
   b9818:	bd30      	pop	{r4, r5, pc}

000b981a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b981a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b981e:	b086      	sub	sp, #24
   b9820:	af00      	add	r7, sp, #0
   b9822:	4605      	mov	r5, r0
   b9824:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b9826:	1d38      	adds	r0, r7, #4
   b9828:	2114      	movs	r1, #20
{
   b982a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b982c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b982e:	f7fe fc1f 	bl	b8070 <vsnprintf>

    if (n<bufsize)
   b9832:	2813      	cmp	r0, #19
   b9834:	d80e      	bhi.n	b9854 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b9836:	1d39      	adds	r1, r7, #4
   b9838:	4628      	mov	r0, r5
   b983a:	f7ff ffa1 	bl	b9780 <_ZN5Print5writeEPKc>
   b983e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b9840:	b11e      	cbz	r6, b984a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b9842:	4628      	mov	r0, r5
   b9844:	f7ff ffb5 	bl	b97b2 <_ZN5Print7printlnEv>
   b9848:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b984a:	4620      	mov	r0, r4
   b984c:	3718      	adds	r7, #24
   b984e:	46bd      	mov	sp, r7
   b9850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b9854:	f100 0308 	add.w	r3, r0, #8
   b9858:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b985c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b985e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b9862:	4622      	mov	r2, r4
   b9864:	1c41      	adds	r1, r0, #1
   b9866:	683b      	ldr	r3, [r7, #0]
   b9868:	4668      	mov	r0, sp
   b986a:	f7fe fc01 	bl	b8070 <vsnprintf>
  return write(str);
   b986e:	4669      	mov	r1, sp
   b9870:	4628      	mov	r0, r5
   b9872:	f7ff ff85 	bl	b9780 <_ZN5Print5writeEPKc>
   b9876:	4604      	mov	r4, r0
   b9878:	46c5      	mov	sp, r8
   b987a:	e7e1      	b.n	b9840 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b987c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b987c:	4b01      	ldr	r3, [pc, #4]	; (b9884 <_GLOBAL__sub_I_RGB+0x8>)
   b987e:	2200      	movs	r2, #0
   b9880:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b9882:	4770      	bx	lr
   b9884:	2003e6dc 	.word	0x2003e6dc

000b9888 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b9888:	b510      	push	{r4, lr}
   b988a:	4604      	mov	r4, r0
{
	free(buffer);
   b988c:	6800      	ldr	r0, [r0, #0]
   b988e:	f7fe fbd7 	bl	b8040 <free>
}
   b9892:	4620      	mov	r0, r4
   b9894:	bd10      	pop	{r4, pc}

000b9896 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b9896:	b510      	push	{r4, lr}
   b9898:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b989a:	6800      	ldr	r0, [r0, #0]
   b989c:	b108      	cbz	r0, b98a2 <_ZN6String10invalidateEv+0xc>
   b989e:	f7fe fbcf 	bl	b8040 <free>
	buffer = NULL;
   b98a2:	2300      	movs	r3, #0
	capacity = len = 0;
   b98a4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b98a8:	6023      	str	r3, [r4, #0]
}
   b98aa:	bd10      	pop	{r4, pc}

000b98ac <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b98ac:	b538      	push	{r3, r4, r5, lr}
   b98ae:	4604      	mov	r4, r0
   b98b0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b98b2:	6800      	ldr	r0, [r0, #0]
   b98b4:	3101      	adds	r1, #1
   b98b6:	f7fe fbcb 	bl	b8050 <realloc>
	if (newbuffer) {
   b98ba:	b110      	cbz	r0, b98c2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b98bc:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b98c0:	2001      	movs	r0, #1
	}
	return 0;
}
   b98c2:	bd38      	pop	{r3, r4, r5, pc}

000b98c4 <_ZN6String7reserveEj>:
{
   b98c4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b98c6:	6803      	ldr	r3, [r0, #0]
{
   b98c8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b98ca:	b123      	cbz	r3, b98d6 <_ZN6String7reserveEj+0x12>
   b98cc:	6843      	ldr	r3, [r0, #4]
   b98ce:	428b      	cmp	r3, r1
   b98d0:	d301      	bcc.n	b98d6 <_ZN6String7reserveEj+0x12>
   b98d2:	2001      	movs	r0, #1
}
   b98d4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b98d6:	4620      	mov	r0, r4
   b98d8:	f7ff ffe8 	bl	b98ac <_ZN6String12changeBufferEj>
   b98dc:	2800      	cmp	r0, #0
   b98de:	d0f9      	beq.n	b98d4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b98e0:	68a3      	ldr	r3, [r4, #8]
   b98e2:	2b00      	cmp	r3, #0
   b98e4:	d1f5      	bne.n	b98d2 <_ZN6String7reserveEj+0xe>
   b98e6:	6822      	ldr	r2, [r4, #0]
   b98e8:	7013      	strb	r3, [r2, #0]
   b98ea:	e7f2      	b.n	b98d2 <_ZN6String7reserveEj+0xe>

000b98ec <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b98ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b98ee:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b98f0:	4611      	mov	r1, r2
   b98f2:	9201      	str	r2, [sp, #4]
{
   b98f4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b98f6:	f7ff ffe5 	bl	b98c4 <_ZN6String7reserveEj>
   b98fa:	9a01      	ldr	r2, [sp, #4]
   b98fc:	b928      	cbnz	r0, b990a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b98fe:	4620      	mov	r0, r4
   b9900:	f7ff ffc9 	bl	b9896 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b9904:	4620      	mov	r0, r4
   b9906:	b003      	add	sp, #12
   b9908:	bd30      	pop	{r4, r5, pc}
	len = length;
   b990a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b990c:	4629      	mov	r1, r5
   b990e:	6820      	ldr	r0, [r4, #0]
   b9910:	f001 fe6c 	bl	bb5ec <memcpy>
	buffer[len] = 0;
   b9914:	6822      	ldr	r2, [r4, #0]
   b9916:	68a3      	ldr	r3, [r4, #8]
   b9918:	2100      	movs	r1, #0
   b991a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b991c:	e7f2      	b.n	b9904 <_ZN6String4copyEPKcj+0x18>

000b991e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b991e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b9920:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b9922:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b9926:	4604      	mov	r4, r0
	len = 0;
   b9928:	6083      	str	r3, [r0, #8]
	flags = 0;
   b992a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b992c:	b141      	cbz	r1, b9940 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b992e:	4608      	mov	r0, r1
   b9930:	9101      	str	r1, [sp, #4]
   b9932:	f001 fecb 	bl	bb6cc <strlen>
   b9936:	9901      	ldr	r1, [sp, #4]
   b9938:	4602      	mov	r2, r0
   b993a:	4620      	mov	r0, r4
   b993c:	f7ff ffd6 	bl	b98ec <_ZN6String4copyEPKcj>
}
   b9940:	4620      	mov	r0, r4
   b9942:	b002      	add	sp, #8
   b9944:	bd10      	pop	{r4, pc}

000b9946 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b9946:	b538      	push	{r3, r4, r5, lr}
   b9948:	4605      	mov	r5, r0
	if (buffer) {
   b994a:	6800      	ldr	r0, [r0, #0]
{
   b994c:	460c      	mov	r4, r1
	if (buffer) {
   b994e:	b168      	cbz	r0, b996c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b9950:	686a      	ldr	r2, [r5, #4]
   b9952:	688b      	ldr	r3, [r1, #8]
   b9954:	429a      	cmp	r2, r3
   b9956:	d307      	bcc.n	b9968 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b9958:	6809      	ldr	r1, [r1, #0]
   b995a:	f001 feaf 	bl	bb6bc <strcpy>
			len = rhs.len;
   b995e:	68a3      	ldr	r3, [r4, #8]
   b9960:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b9962:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b9964:	60a3      	str	r3, [r4, #8]
}
   b9966:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b9968:	f7fe fb6a 	bl	b8040 <free>
	buffer = rhs.buffer;
   b996c:	6823      	ldr	r3, [r4, #0]
   b996e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b9970:	6863      	ldr	r3, [r4, #4]
   b9972:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b9974:	68a3      	ldr	r3, [r4, #8]
   b9976:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b9978:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b997a:	e9c4 3300 	strd	r3, r3, [r4]
   b997e:	e7f1      	b.n	b9964 <_ZN6String4moveERS_+0x1e>

000b9980 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b9980:	4288      	cmp	r0, r1
{
   b9982:	b510      	push	{r4, lr}
   b9984:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b9986:	d005      	beq.n	b9994 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b9988:	680b      	ldr	r3, [r1, #0]
   b998a:	b12b      	cbz	r3, b9998 <_ZN6StringaSERKS_+0x18>
   b998c:	688a      	ldr	r2, [r1, #8]
   b998e:	4619      	mov	r1, r3
   b9990:	f7ff ffac 	bl	b98ec <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b9994:	4620      	mov	r0, r4
   b9996:	bd10      	pop	{r4, pc}
	else invalidate();
   b9998:	f7ff ff7d 	bl	b9896 <_ZN6String10invalidateEv>
   b999c:	e7fa      	b.n	b9994 <_ZN6StringaSERKS_+0x14>

000b999e <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b999e:	4288      	cmp	r0, r1
{
   b99a0:	b510      	push	{r4, lr}
   b99a2:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b99a4:	d001      	beq.n	b99aa <_ZN6StringaSEOS_+0xc>
   b99a6:	f7ff ffce 	bl	b9946 <_ZN6String4moveERS_>
	return *this;
}
   b99aa:	4620      	mov	r0, r4
   b99ac:	bd10      	pop	{r4, pc}

000b99ae <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b99ae:	b513      	push	{r0, r1, r4, lr}
   b99b0:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b99b2:	b159      	cbz	r1, b99cc <_ZN6StringaSEPKc+0x1e>
   b99b4:	4608      	mov	r0, r1
   b99b6:	9101      	str	r1, [sp, #4]
   b99b8:	f001 fe88 	bl	bb6cc <strlen>
   b99bc:	9901      	ldr	r1, [sp, #4]
   b99be:	4602      	mov	r2, r0
   b99c0:	4620      	mov	r0, r4
   b99c2:	f7ff ff93 	bl	b98ec <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b99c6:	4620      	mov	r0, r4
   b99c8:	b002      	add	sp, #8
   b99ca:	bd10      	pop	{r4, pc}
	else invalidate();
   b99cc:	f7ff ff63 	bl	b9896 <_ZN6String10invalidateEv>
   b99d0:	e7f9      	b.n	b99c6 <_ZN6StringaSEPKc+0x18>

000b99d2 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b99d2:	b510      	push	{r4, lr}
   b99d4:	4604      	mov	r4, r0
   b99d6:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b99d8:	2300      	movs	r3, #0
	capacity = 0;
   b99da:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b99de:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b99e0:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b99e2:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b99e4:	a901      	add	r1, sp, #4
   b99e6:	f000 fcff 	bl	ba3e8 <itoa>
	*this = buf;
   b99ea:	a901      	add	r1, sp, #4
   b99ec:	4620      	mov	r0, r4
   b99ee:	f7ff ffde 	bl	b99ae <_ZN6StringaSEPKc>
}
   b99f2:	4620      	mov	r0, r4
   b99f4:	b00a      	add	sp, #40	; 0x28
   b99f6:	bd10      	pop	{r4, pc}

000b99f8 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b99f8:	b570      	push	{r4, r5, r6, lr}
   b99fa:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b99fc:	460e      	mov	r6, r1
   b99fe:	b909      	cbnz	r1, b9a04 <_ZN6String6concatEPKcj+0xc>
   b9a00:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b9a02:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b9a04:	b16a      	cbz	r2, b9a22 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b9a06:	6884      	ldr	r4, [r0, #8]
   b9a08:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b9a0a:	4621      	mov	r1, r4
   b9a0c:	f7ff ff5a 	bl	b98c4 <_ZN6String7reserveEj>
   b9a10:	2800      	cmp	r0, #0
   b9a12:	d0f5      	beq.n	b9a00 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b9a14:	6828      	ldr	r0, [r5, #0]
   b9a16:	68ab      	ldr	r3, [r5, #8]
   b9a18:	4631      	mov	r1, r6
   b9a1a:	4418      	add	r0, r3
   b9a1c:	f001 fe4e 	bl	bb6bc <strcpy>
	len = newlen;
   b9a20:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b9a22:	2001      	movs	r0, #1
   b9a24:	e7ed      	b.n	b9a02 <_ZN6String6concatEPKcj+0xa>

000b9a26 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b9a26:	688a      	ldr	r2, [r1, #8]
   b9a28:	6809      	ldr	r1, [r1, #0]
   b9a2a:	f7ff bfe5 	b.w	b99f8 <_ZN6String6concatEPKcj>

000b9a2e <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b9a2e:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b9a30:	2300      	movs	r3, #0
	buf[0] = c;
   b9a32:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b9a36:	2201      	movs	r2, #1
   b9a38:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b9a3a:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b9a3e:	f7ff ffdb 	bl	b99f8 <_ZN6String6concatEPKcj>
}
   b9a42:	b003      	add	sp, #12
   b9a44:	f85d fb04 	ldr.w	pc, [sp], #4

000b9a48 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b9a48:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b9a4a:	688a      	ldr	r2, [r1, #8]
   b9a4c:	6809      	ldr	r1, [r1, #0]
{
   b9a4e:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b9a50:	f7ff ffd2 	bl	b99f8 <_ZN6String6concatEPKcj>
   b9a54:	b910      	cbnz	r0, b9a5c <_ZplRK15StringSumHelperRK6String+0x14>
   b9a56:	4620      	mov	r0, r4
   b9a58:	f7ff ff1d 	bl	b9896 <_ZN6String10invalidateEv>
	return a;
}
   b9a5c:	4620      	mov	r0, r4
   b9a5e:	bd10      	pop	{r4, pc}

000b9a60 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b9a60:	6802      	ldr	r2, [r0, #0]
{
   b9a62:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b9a64:	6809      	ldr	r1, [r1, #0]
   b9a66:	b162      	cbz	r2, b9a82 <_ZNK6String9compareToERKS_+0x22>
   b9a68:	b941      	cbnz	r1, b9a7c <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b9a6a:	6880      	ldr	r0, [r0, #8]
   b9a6c:	b160      	cbz	r0, b9a88 <_ZNK6String9compareToERKS_+0x28>
   b9a6e:	7810      	ldrb	r0, [r2, #0]
   b9a70:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b9a72:	6898      	ldr	r0, [r3, #8]
   b9a74:	b140      	cbz	r0, b9a88 <_ZNK6String9compareToERKS_+0x28>
   b9a76:	7809      	ldrb	r1, [r1, #0]
   b9a78:	4248      	negs	r0, r1
   b9a7a:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b9a7c:	4610      	mov	r0, r2
   b9a7e:	f001 be13 	b.w	bb6a8 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b9a82:	2900      	cmp	r1, #0
   b9a84:	d1f5      	bne.n	b9a72 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b9a86:	4608      	mov	r0, r1
}
   b9a88:	4770      	bx	lr

000b9a8a <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   b9a8a:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   b9a8c:	6882      	ldr	r2, [r0, #8]
   b9a8e:	688b      	ldr	r3, [r1, #8]
   b9a90:	429a      	cmp	r2, r3
   b9a92:	d105      	bne.n	b9aa0 <_ZNK6String6equalsERKS_+0x16>
   b9a94:	f7ff ffe4 	bl	b9a60 <_ZNK6String9compareToERKS_>
   b9a98:	fab0 f080 	clz	r0, r0
   b9a9c:	0940      	lsrs	r0, r0, #5
}
   b9a9e:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   b9aa0:	2000      	movs	r0, #0
   b9aa2:	e7fc      	b.n	b9a9e <_ZNK6String6equalsERKS_+0x14>

000b9aa4 <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
   b9aa4:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b9aa6:	6882      	ldr	r2, [r0, #8]
   b9aa8:	b93a      	cbnz	r2, b9aba <_ZNK6String6equalsEPKc+0x16>
   b9aaa:	b121      	cbz	r1, b9ab6 <_ZNK6String6equalsEPKc+0x12>
   b9aac:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b9aae:	fab0 f080 	clz	r0, r0
   b9ab2:	0940      	lsrs	r0, r0, #5
   b9ab4:	e000      	b.n	b9ab8 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b9ab6:	2001      	movs	r0, #1
}
   b9ab8:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b9aba:	6800      	ldr	r0, [r0, #0]
   b9abc:	b909      	cbnz	r1, b9ac2 <_ZNK6String6equalsEPKc+0x1e>
   b9abe:	7800      	ldrb	r0, [r0, #0]
   b9ac0:	e7f5      	b.n	b9aae <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b9ac2:	f001 fdf1 	bl	bb6a8 <strcmp>
   b9ac6:	e7f2      	b.n	b9aae <_ZNK6String6equalsEPKc+0xa>

000b9ac8 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   b9ac8:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   b9aca:	6883      	ldr	r3, [r0, #8]
   b9acc:	4293      	cmp	r3, r2
   b9ace:	d907      	bls.n	b9ae0 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   b9ad0:	6804      	ldr	r4, [r0, #0]
   b9ad2:	6809      	ldr	r1, [r1, #0]
   b9ad4:	18a0      	adds	r0, r4, r2
   b9ad6:	f001 fe21 	bl	bb71c <strstr>
	if (found == NULL) return -1;
   b9ada:	b108      	cbz	r0, b9ae0 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   b9adc:	1b00      	subs	r0, r0, r4
}
   b9ade:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   b9ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9ae4:	e7fb      	b.n	b9ade <_ZNK6String7indexOfERKS_j+0x16>

000b9ae6 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   b9ae6:	2200      	movs	r2, #0
   b9ae8:	f7ff bfee 	b.w	b9ac8 <_ZNK6String7indexOfERKS_j>

000b9aec <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b9aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b9aee:	429a      	cmp	r2, r3
{
   b9af0:	460f      	mov	r7, r1
   b9af2:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b9af4:	490c      	ldr	r1, [pc, #48]	; (b9b28 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b9af6:	bf88      	it	hi
   b9af8:	4613      	movhi	r3, r2
{
   b9afa:	4614      	mov	r4, r2
   b9afc:	4606      	mov	r6, r0
	if (left > right) {
   b9afe:	bf84      	itt	hi
   b9b00:	462c      	movhi	r4, r5
   b9b02:	461d      	movhi	r5, r3
	String out;
   b9b04:	f7ff ff0b 	bl	b991e <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b9b08:	68bb      	ldr	r3, [r7, #8]
   b9b0a:	42a3      	cmp	r3, r4
   b9b0c:	d30a      	bcc.n	b9b24 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b9b0e:	6839      	ldr	r1, [r7, #0]
   b9b10:	42ab      	cmp	r3, r5
   b9b12:	bf94      	ite	ls
   b9b14:	ebc4 0203 	rsbls	r2, r4, r3
   b9b18:	ebc4 0205 	rsbhi	r2, r4, r5
   b9b1c:	4421      	add	r1, r4
   b9b1e:	4630      	mov	r0, r6
   b9b20:	f7ff fee4 	bl	b98ec <_ZN6String4copyEPKcj>
	return out;
}
   b9b24:	4630      	mov	r0, r6
   b9b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9b28:	000bdb72 	.word	0x000bdb72

000b9b2c <_ZNK6String9substringEj>:
{
   b9b2c:	b510      	push	{r4, lr}
   b9b2e:	4604      	mov	r4, r0
	return substring(left, len);
   b9b30:	688b      	ldr	r3, [r1, #8]
   b9b32:	f7ff ffdb 	bl	b9aec <_ZNK6String9substringEjj>
}
   b9b36:	4620      	mov	r0, r4
   b9b38:	bd10      	pop	{r4, pc}
	...

000b9b3c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b9b3c:	4b05      	ldr	r3, [pc, #20]	; (b9b54 <_GLOBAL__sub_I_System+0x18>)
   b9b3e:	2202      	movs	r2, #2
   b9b40:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b9b42:	4b05      	ldr	r3, [pc, #20]	; (b9b58 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b9b44:	4a05      	ldr	r2, [pc, #20]	; (b9b5c <_GLOBAL__sub_I_System+0x20>)
   b9b46:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b9b48:	2000      	movs	r0, #0
   b9b4a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b9b4e:	f7fe b9cb 	b.w	b7ee8 <set_system_mode>
   b9b52:	bf00      	nop
   b9b54:	2003e6f8 	.word	0x2003e6f8
   b9b58:	2003e6ec 	.word	0x2003e6ec
   b9b5c:	ffff0000 	.word	0xffff0000

000b9b60 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b9b60:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b9b62:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b9b64:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b9b68:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b9b6a:	2201      	movs	r2, #1
   b9b6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9b70:	f10d 0107 	add.w	r1, sp, #7
   b9b74:	47a0      	blx	r4
}
   b9b76:	b002      	add	sp, #8
   b9b78:	bd10      	pop	{r4, pc}

000b9b7a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b9b7a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b9b7c:	6803      	ldr	r3, [r0, #0]
   b9b7e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b9b80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9b84:	46a4      	mov	ip, r4
}
   b9b86:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b9b8a:	4760      	bx	ip

000b9b8c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b9b8c:	b513      	push	{r0, r1, r4, lr}
   b9b8e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b9b90:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b9b92:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b9b96:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b9b98:	f10d 0107 	add.w	r1, sp, #7
   b9b9c:	2201      	movs	r2, #1
   b9b9e:	47a0      	blx	r4
}
   b9ba0:	b002      	add	sp, #8
   b9ba2:	bd10      	pop	{r4, pc}

000b9ba4 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b9ba4:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b9ba6:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9ba8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9bac:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9bb0:	429a      	cmp	r2, r3
int TCPClient::read() {
   b9bb2:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9bb4:	d008      	beq.n	b9bc8 <_ZN9TCPClient4readEv+0x24>
   b9bb6:	6963      	ldr	r3, [r4, #20]
   b9bb8:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b9bbc:	1c51      	adds	r1, r2, #1
   b9bbe:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b9bc2:	4413      	add	r3, r2
   b9bc4:	7918      	ldrb	r0, [r3, #4]
}
   b9bc6:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9bc8:	6803      	ldr	r3, [r0, #0]
   b9bca:	691b      	ldr	r3, [r3, #16]
   b9bcc:	4798      	blx	r3
   b9bce:	2800      	cmp	r0, #0
   b9bd0:	d1f1      	bne.n	b9bb6 <_ZN9TCPClient4readEv+0x12>
   b9bd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9bd6:	e7f6      	b.n	b9bc6 <_ZN9TCPClient4readEv+0x22>

000b9bd8 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b9bd8:	4770      	bx	lr

000b9bda <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b9bda:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b9bdc:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b9bde:	43c0      	mvns	r0, r0
   b9be0:	0fc0      	lsrs	r0, r0, #31
   b9be2:	4770      	bx	lr

000b9be4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9be4:	4770      	bx	lr
	...

000b9be8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9be8:	4b06      	ldr	r3, [pc, #24]	; (b9c04 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b9bea:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b9bec:	b510      	push	{r4, lr}
   b9bee:	f100 040c 	add.w	r4, r0, #12
	    ||
   b9bf2:	d005      	beq.n	b9c00 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b9bf4:	4608      	mov	r0, r1
   b9bf6:	f000 fd1d 	bl	ba634 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b9bfa:	2800      	cmp	r0, #0
   b9bfc:	bf08      	it	eq
   b9bfe:	2400      	moveq	r4, #0
      }
   b9c00:	4620      	mov	r0, r4
   b9c02:	bd10      	pop	{r4, pc}
   b9c04:	000bdd48 	.word	0x000bdd48

000b9c08 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9c08:	b510      	push	{r4, lr}
   b9c0a:	21ac      	movs	r1, #172	; 0xac
   b9c0c:	4604      	mov	r4, r0
   b9c0e:	f7fa fa48 	bl	b40a2 <_ZdlPvj>
   b9c12:	4620      	mov	r0, r4
   b9c14:	bd10      	pop	{r4, pc}

000b9c16 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b9c16:	21ac      	movs	r1, #172	; 0xac
   b9c18:	f7fa ba43 	b.w	b40a2 <_ZdlPvj>

000b9c1c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b9c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b9c20:	f04f 0800 	mov.w	r8, #0
   b9c24:	b086      	sub	sp, #24
   b9c26:	461c      	mov	r4, r3
   b9c28:	f8c0 8004 	str.w	r8, [r0, #4]
   b9c2c:	4605      	mov	r5, r0
   b9c2e:	460e      	mov	r6, r1
   b9c30:	4617      	mov	r7, r2
    struct timeval tv = {};
   b9c32:	4641      	mov	r1, r8
   b9c34:	2210      	movs	r2, #16
   b9c36:	a802      	add	r0, sp, #8
   b9c38:	f001 fd00 	bl	bb63c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b9c3c:	1c63      	adds	r3, r4, #1
   b9c3e:	d009      	beq.n	b9c54 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b9c40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9c44:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b9c48:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b9c4c:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b9c50:	435c      	muls	r4, r3
   b9c52:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b9c54:	6968      	ldr	r0, [r5, #20]
   b9c56:	2310      	movs	r3, #16
   b9c58:	9300      	str	r3, [sp, #0]
   b9c5a:	6800      	ldr	r0, [r0, #0]
   b9c5c:	ab02      	add	r3, sp, #8
   b9c5e:	f241 0205 	movw	r2, #4101	; 0x1005
   b9c62:	f640 71ff 	movw	r1, #4095	; 0xfff
   b9c66:	f7fe f88f 	bl	b7d88 <sock_setsockopt>
    if (ret < 0) {
   b9c6a:	2800      	cmp	r0, #0
   b9c6c:	da07      	bge.n	b9c7e <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b9c6e:	f7fe fa17 	bl	b80a0 <__errno>
   b9c72:	6803      	ldr	r3, [r0, #0]
   b9c74:	606b      	str	r3, [r5, #4]
        return 0;
   b9c76:	2000      	movs	r0, #0
}
   b9c78:	b006      	add	sp, #24
   b9c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b9c7e:	6968      	ldr	r0, [r5, #20]
   b9c80:	2300      	movs	r3, #0
   b9c82:	6800      	ldr	r0, [r0, #0]
   b9c84:	463a      	mov	r2, r7
   b9c86:	4631      	mov	r1, r6
   b9c88:	f7fe f89e 	bl	b7dc8 <sock_send>
    if (ret < 0) {
   b9c8c:	1e03      	subs	r3, r0, #0
   b9c8e:	dbee      	blt.n	b9c6e <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b9c90:	4618      	mov	r0, r3
   b9c92:	e7f1      	b.n	b9c78 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b9c94 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b9c94:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b9c96:	6984      	ldr	r4, [r0, #24]
   b9c98:	4b0a      	ldr	r3, [pc, #40]	; (b9cc4 <_ZN9TCPClientD1Ev+0x30>)
   b9c9a:	6003      	str	r3, [r0, #0]
   b9c9c:	4605      	mov	r5, r0
   b9c9e:	b17c      	cbz	r4, b9cc0 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b9ca0:	6863      	ldr	r3, [r4, #4]
   b9ca2:	3b01      	subs	r3, #1
   b9ca4:	6063      	str	r3, [r4, #4]
   b9ca6:	b95b      	cbnz	r3, b9cc0 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b9ca8:	6823      	ldr	r3, [r4, #0]
   b9caa:	4620      	mov	r0, r4
   b9cac:	689b      	ldr	r3, [r3, #8]
   b9cae:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b9cb0:	68a3      	ldr	r3, [r4, #8]
   b9cb2:	3b01      	subs	r3, #1
   b9cb4:	60a3      	str	r3, [r4, #8]
   b9cb6:	b91b      	cbnz	r3, b9cc0 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b9cb8:	6823      	ldr	r3, [r4, #0]
   b9cba:	4620      	mov	r0, r4
   b9cbc:	68db      	ldr	r3, [r3, #12]
   b9cbe:	4798      	blx	r3
   b9cc0:	4628      	mov	r0, r5
   b9cc2:	bd38      	pop	{r3, r4, r5, pc}
   b9cc4:	000bde7c 	.word	0x000bde7c

000b9cc8 <_ZN9TCPClientD0Ev>:
   b9cc8:	b510      	push	{r4, lr}
   b9cca:	4604      	mov	r4, r0
   b9ccc:	f7ff ffe2 	bl	b9c94 <_ZN9TCPClientD1Ev>
   b9cd0:	4620      	mov	r0, r4
   b9cd2:	211c      	movs	r1, #28
   b9cd4:	f7fa f9e5 	bl	b40a2 <_ZdlPvj>
   b9cd8:	4620      	mov	r0, r4
   b9cda:	bd10      	pop	{r4, pc}

000b9cdc <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b9cdc:	b530      	push	{r4, r5, lr}
   b9cde:	b087      	sub	sp, #28
   b9ce0:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b9ce2:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b9ce4:	4668      	mov	r0, sp
   b9ce6:	f7ff fc6b 	bl	b95c0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9cea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9cec:	3404      	adds	r4, #4
   b9cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9cf0:	682b      	ldr	r3, [r5, #0]
   b9cf2:	7023      	strb	r3, [r4, #0]
    }
   b9cf4:	b007      	add	sp, #28
   b9cf6:	bd30      	pop	{r4, r5, pc}

000b9cf8 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b9cf8:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b9cfa:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b9cfc:	4b05      	ldr	r3, [pc, #20]	; (b9d14 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b9cfe:	4604      	mov	r4, r0
   b9d00:	358c      	adds	r5, #140	; 0x8c
   b9d02:	f844 3b04 	str.w	r3, [r4], #4
   b9d06:	4606      	mov	r6, r0
   b9d08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9d0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9d0c:	682b      	ldr	r3, [r5, #0]
   b9d0e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b9d10:	4630      	mov	r0, r6
   b9d12:	bd70      	pop	{r4, r5, r6, pc}
   b9d14:	000bddf4 	.word	0x000bddf4

000b9d18 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9d18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9d1c:	4698      	mov	r8, r3
    stop();
   b9d1e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9d20:	b093      	sub	sp, #76	; 0x4c
   b9d22:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b9d24:	2400      	movs	r4, #0
    stop();
   b9d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9d28:	4606      	mov	r6, r0
   b9d2a:	4617      	mov	r7, r2
    stop();
   b9d2c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9d2e:	4628      	mov	r0, r5
   b9d30:	466b      	mov	r3, sp
   b9d32:	4622      	mov	r2, r4
   b9d34:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b9d36:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9d38:	f7fe f81e 	bl	b7d78 <netdb_getaddrinfo>
   b9d3c:	4605      	mov	r5, r0
   b9d3e:	2800      	cmp	r0, #0
   b9d40:	d163      	bne.n	b9e0a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b9d42:	9b00      	ldr	r3, [sp, #0]
   b9d44:	2b00      	cmp	r3, #0
   b9d46:	d04b      	beq.n	b9de0 <_ZN9TCPClient7connectEPKctm+0xc8>
   b9d48:	695b      	ldr	r3, [r3, #20]
   b9d4a:	2b00      	cmp	r3, #0
   b9d4c:	d048      	beq.n	b9de0 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b9d4e:	a806      	add	r0, sp, #24
   b9d50:	f7ff fbf2 	bl	b9538 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b9d54:	9b00      	ldr	r3, [sp, #0]
   b9d56:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b9d58:	7863      	ldrb	r3, [r4, #1]
   b9d5a:	2b02      	cmp	r3, #2
   b9d5c:	d104      	bne.n	b9d68 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b9d5e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b9d60:	a806      	add	r0, sp, #24
   b9d62:	f7ff ffbb 	bl	b9cdc <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b9d66:	e026      	b.n	b9db6 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b9d68:	2b0a      	cmp	r3, #10
   b9d6a:	d124      	bne.n	b9db6 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b9d6c:	2211      	movs	r2, #17
   b9d6e:	4629      	mov	r1, r5
   b9d70:	a801      	add	r0, sp, #4
   b9d72:	f001 fc63 	bl	bb63c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b9d76:	68a3      	ldr	r3, [r4, #8]
   b9d78:	2b00      	cmp	r3, #0
   b9d7a:	d038      	beq.n	b9dee <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b9d7c:	f104 0308 	add.w	r3, r4, #8
   b9d80:	f10d 0c04 	add.w	ip, sp, #4
   b9d84:	3418      	adds	r4, #24
   b9d86:	6818      	ldr	r0, [r3, #0]
   b9d88:	6859      	ldr	r1, [r3, #4]
   b9d8a:	4662      	mov	r2, ip
   b9d8c:	c203      	stmia	r2!, {r0, r1}
   b9d8e:	3308      	adds	r3, #8
   b9d90:	42a3      	cmp	r3, r4
   b9d92:	4694      	mov	ip, r2
   b9d94:	d1f7      	bne.n	b9d86 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b9d96:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b9d98:	a901      	add	r1, sp, #4
   b9d9a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b9d9c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b9da0:	f7ff fbd8 	bl	b9554 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9da4:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b9da8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b9dac:	ac07      	add	r4, sp, #28
   b9dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9db0:	f8dc 3000 	ldr.w	r3, [ip]
   b9db4:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b9db6:	a806      	add	r0, sp, #24
   b9db8:	f7ff fbde 	bl	b9578 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b9dbc:	b180      	cbz	r0, b9de0 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b9dbe:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b9dc0:	ad07      	add	r5, sp, #28
   b9dc2:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b9dc6:	4b12      	ldr	r3, [pc, #72]	; (b9e10 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b9dc8:	930c      	str	r3, [sp, #48]	; 0x30
   b9dca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9dcc:	ac0d      	add	r4, sp, #52	; 0x34
   b9dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9dd0:	682b      	ldr	r3, [r5, #0]
   b9dd2:	7023      	strb	r3, [r4, #0]
   b9dd4:	463a      	mov	r2, r7
   b9dd6:	4643      	mov	r3, r8
   b9dd8:	a90c      	add	r1, sp, #48	; 0x30
   b9dda:	4630      	mov	r0, r6
   b9ddc:	47c8      	blx	r9
   b9dde:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b9de0:	9800      	ldr	r0, [sp, #0]
   b9de2:	f7fd ffc1 	bl	b7d68 <netdb_freeaddrinfo>
}
   b9de6:	4628      	mov	r0, r5
   b9de8:	b013      	add	sp, #76	; 0x4c
   b9dea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b9dee:	68e3      	ldr	r3, [r4, #12]
   b9df0:	2b00      	cmp	r3, #0
   b9df2:	d1c3      	bne.n	b9d7c <_ZN9TCPClient7connectEPKctm+0x64>
   b9df4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b9df8:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b9dfc:	f7fd ffa4 	bl	b7d48 <inet_htonl>
   b9e00:	4581      	cmp	r9, r0
   b9e02:	d1bb      	bne.n	b9d7c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b9e04:	f104 0114 	add.w	r1, r4, #20
   b9e08:	e7aa      	b.n	b9d60 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9e0a:	4625      	mov	r5, r4
   b9e0c:	e7e8      	b.n	b9de0 <_ZN9TCPClient7connectEPKctm+0xc8>
   b9e0e:	bf00      	nop
   b9e10:	000bddf4 	.word	0x000bddf4

000b9e14 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b9e14:	b538      	push	{r3, r4, r5, lr}
   b9e16:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b9e18:	681a      	ldr	r2, [r3, #0]
   b9e1a:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b9e1c:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b9e1e:	da10      	bge.n	b9e42 <_ZN9TCPClient9connectedEv+0x2e>
   b9e20:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9e24:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9e28:	429a      	cmp	r2, r3
   b9e2a:	d10a      	bne.n	b9e42 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b9e2c:	6803      	ldr	r3, [r0, #0]
   b9e2e:	691b      	ldr	r3, [r3, #16]
   b9e30:	4798      	blx	r3
        if (!rv) {
   b9e32:	4604      	mov	r4, r0
   b9e34:	b928      	cbnz	r0, b9e42 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b9e36:	682b      	ldr	r3, [r5, #0]
   b9e38:	4628      	mov	r0, r5
   b9e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9e3c:	4798      	blx	r3
        rv = available();
   b9e3e:	4620      	mov	r0, r4
}
   b9e40:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b9e42:	2001      	movs	r0, #1
   b9e44:	e7fc      	b.n	b9e40 <_ZN9TCPClient9connectedEv+0x2c>

000b9e46 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b9e46:	b510      	push	{r4, lr}
   b9e48:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9e4a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9e4e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9e52:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b9e54:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9e56:	d005      	beq.n	b9e64 <_ZN9TCPClient4peekEv+0x1e>
   b9e58:	6963      	ldr	r3, [r4, #20]
   b9e5a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b9e5e:	4413      	add	r3, r2
   b9e60:	7918      	ldrb	r0, [r3, #4]
}
   b9e62:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9e64:	6803      	ldr	r3, [r0, #0]
   b9e66:	691b      	ldr	r3, [r3, #16]
   b9e68:	4798      	blx	r3
   b9e6a:	2800      	cmp	r0, #0
   b9e6c:	d1f4      	bne.n	b9e58 <_ZN9TCPClient4peekEv+0x12>
   b9e6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9e72:	e7f6      	b.n	b9e62 <_ZN9TCPClient4peekEv+0x1c>

000b9e74 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b9e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9e76:	6943      	ldr	r3, [r0, #20]
   b9e78:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b9e7a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9e7e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9e82:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b9e84:	4605      	mov	r5, r0
   b9e86:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b9e88:	d016      	beq.n	b9eb8 <_ZN9TCPClient4readEPhj+0x44>
   b9e8a:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b9e8c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b9e90:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b9e94:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b9e96:	42bc      	cmp	r4, r7
   b9e98:	bf28      	it	cs
   b9e9a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b9e9c:	3304      	adds	r3, #4
   b9e9e:	4622      	mov	r2, r4
   b9ea0:	4419      	add	r1, r3
   b9ea2:	4630      	mov	r0, r6
   b9ea4:	f001 fba2 	bl	bb5ec <memcpy>
   b9ea8:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b9eaa:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b9eae:	4423      	add	r3, r4
   b9eb0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b9eb4:	4620      	mov	r0, r4
   b9eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b9eb8:	6803      	ldr	r3, [r0, #0]
   b9eba:	691b      	ldr	r3, [r3, #16]
   b9ebc:	4798      	blx	r3
   b9ebe:	2800      	cmp	r0, #0
   b9ec0:	d1e3      	bne.n	b9e8a <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b9ec2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b9ec6:	e7f5      	b.n	b9eb4 <_ZN9TCPClient4readEPhj+0x40>

000b9ec8 <_ZN9TCPClient12flush_bufferEv>:
   b9ec8:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b9eca:	2300      	movs	r3, #0
   b9ecc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b9ed0:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b9ed2:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b9ed6:	4770      	bx	lr

000b9ed8 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9edc:	461f      	mov	r7, r3
    stop();
   b9ede:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9ee0:	460c      	mov	r4, r1
    stop();
   b9ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9ee4:	b08a      	sub	sp, #40	; 0x28
   b9ee6:	4605      	mov	r5, r0
   b9ee8:	4616      	mov	r6, r2
    stop();
   b9eea:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b9eec:	7d23      	ldrb	r3, [r4, #20]
   b9eee:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b9ef2:	2b04      	cmp	r3, #4
   b9ef4:	bf0c      	ite	eq
   b9ef6:	2002      	moveq	r0, #2
   b9ef8:	200a      	movne	r0, #10
   b9efa:	2206      	movs	r2, #6
   b9efc:	2101      	movs	r1, #1
   b9efe:	f7fd ff6b 	bl	b7dd8 <sock_socket>
   b9f02:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b9f06:	696b      	ldr	r3, [r5, #20]
   b9f08:	681b      	ldr	r3, [r3, #0]
   b9f0a:	2b00      	cmp	r3, #0
   b9f0c:	da08      	bge.n	b9f20 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b9f0e:	682b      	ldr	r3, [r5, #0]
   b9f10:	4628      	mov	r0, r5
   b9f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9f14:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b9f16:	4798      	blx	r3
}
   b9f18:	4620      	mov	r0, r4
   b9f1a:	b00a      	add	sp, #40	; 0x28
   b9f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b9f20:	4628      	mov	r0, r5
   b9f22:	f7ff ffd1 	bl	b9ec8 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b9f26:	b1b7      	cbz	r7, b9f56 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b9f28:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9f2a:	a903      	add	r1, sp, #12
   b9f2c:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b9f2e:	9303      	str	r3, [sp, #12]
   b9f30:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9f34:	f7fd fef8 	bl	b7d28 <if_index_to_name>
   b9f38:	2800      	cmp	r0, #0
   b9f3a:	d1e8      	bne.n	b9f0e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b9f3c:	6968      	ldr	r0, [r5, #20]
   b9f3e:	2306      	movs	r3, #6
   b9f40:	9300      	str	r3, [sp, #0]
   b9f42:	6800      	ldr	r0, [r0, #0]
   b9f44:	ab03      	add	r3, sp, #12
   b9f46:	f241 020b 	movw	r2, #4107	; 0x100b
   b9f4a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b9f4e:	f7fd ff1b 	bl	b7d88 <sock_setsockopt>
   b9f52:	2800      	cmp	r0, #0
   b9f54:	d1db      	bne.n	b9f0e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b9f56:	221c      	movs	r2, #28
   b9f58:	2100      	movs	r1, #0
   b9f5a:	a803      	add	r0, sp, #12
   b9f5c:	f001 fb6e 	bl	bb63c <memset>
    if (ip.version() == 4) {
   b9f60:	7d23      	ldrb	r3, [r4, #20]
   b9f62:	2b04      	cmp	r3, #4
   b9f64:	d11d      	bne.n	b9fa2 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b9f66:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b9f6a:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b9f6c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b9f70:	f7fd fef2 	bl	b7d58 <inet_htons>
   b9f74:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b9f78:	6860      	ldr	r0, [r4, #4]
   b9f7a:	f7fd fee5 	bl	b7d48 <inet_htonl>
   b9f7e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b9f80:	696b      	ldr	r3, [r5, #20]
   b9f82:	221c      	movs	r2, #28
   b9f84:	6818      	ldr	r0, [r3, #0]
   b9f86:	a903      	add	r1, sp, #12
   b9f88:	f7fd ff0e 	bl	b7da8 <sock_connect>
   b9f8c:	2800      	cmp	r0, #0
   b9f8e:	d1be      	bne.n	b9f0e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b9f90:	3404      	adds	r4, #4
   b9f92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9f94:	696d      	ldr	r5, [r5, #20]
   b9f96:	358c      	adds	r5, #140	; 0x8c
   b9f98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9f9a:	6823      	ldr	r3, [r4, #0]
   b9f9c:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b9f9e:	2401      	movs	r4, #1
   b9fa0:	e7ba      	b.n	b9f18 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b9fa2:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b9fa6:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b9fa8:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b9fac:	f7fd fed4 	bl	b7d58 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9fb0:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b9fb2:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9fb6:	1d23      	adds	r3, r4, #4
   b9fb8:	f104 0714 	add.w	r7, r4, #20
   b9fbc:	6818      	ldr	r0, [r3, #0]
   b9fbe:	6859      	ldr	r1, [r3, #4]
   b9fc0:	4632      	mov	r2, r6
   b9fc2:	c203      	stmia	r2!, {r0, r1}
   b9fc4:	3308      	adds	r3, #8
   b9fc6:	42bb      	cmp	r3, r7
   b9fc8:	4616      	mov	r6, r2
   b9fca:	d1f7      	bne.n	b9fbc <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b9fcc:	e7d8      	b.n	b9f80 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b9fd0 <_ZN9TCPClient9availableEv>:
{
   b9fd0:	b530      	push	{r4, r5, lr}
   b9fd2:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b9fd4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b9fd8:	b08b      	sub	sp, #44	; 0x2c
   b9fda:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b9fdc:	b12b      	cbz	r3, b9fea <_ZN9TCPClient9availableEv+0x1a>
   b9fde:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b9fe2:	429a      	cmp	r2, r3
   b9fe4:	d101      	bne.n	b9fea <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b9fe6:	f7ff ff6f 	bl	b9ec8 <_ZN9TCPClient12flush_bufferEv>
   b9fea:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b9fec:	6808      	ldr	r0, [r1, #0]
   b9fee:	2800      	cmp	r0, #0
   b9ff0:	db18      	blt.n	ba024 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b9ff2:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b9ff6:	2d7f      	cmp	r5, #127	; 0x7f
   b9ff8:	d814      	bhi.n	ba024 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b9ffa:	3104      	adds	r1, #4
   b9ffc:	2308      	movs	r3, #8
   b9ffe:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   ba002:	4429      	add	r1, r5
   ba004:	f7fd fed8 	bl	b7db8 <sock_recv>
            if (ret > 0) {
   ba008:	2800      	cmp	r0, #0
   ba00a:	dd13      	ble.n	ba034 <_ZN9TCPClient9availableEv+0x64>
   ba00c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   ba00e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   ba012:	b90a      	cbnz	r2, ba018 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   ba014:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   ba018:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   ba01a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   ba01e:	4410      	add	r0, r2
   ba020:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   ba024:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   ba026:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   ba02a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   ba02e:	1ac0      	subs	r0, r0, r3
   ba030:	b00b      	add	sp, #44	; 0x2c
   ba032:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   ba034:	f7fe f834 	bl	b80a0 <__errno>
   ba038:	6803      	ldr	r3, [r0, #0]
   ba03a:	2b0b      	cmp	r3, #11
   ba03c:	d0f2      	beq.n	ba024 <_ZN9TCPClient9availableEv+0x54>
   ba03e:	f7fe f82f 	bl	b80a0 <__errno>
   ba042:	6803      	ldr	r3, [r0, #0]
   ba044:	2b0b      	cmp	r3, #11
   ba046:	d0ed      	beq.n	ba024 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   ba048:	2320      	movs	r3, #32
   ba04a:	2500      	movs	r5, #0
   ba04c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   ba050:	f7fe f826 	bl	b80a0 <__errno>
   ba054:	6803      	ldr	r3, [r0, #0]
   ba056:	9301      	str	r3, [sp, #4]
   ba058:	4b08      	ldr	r3, [pc, #32]	; (ba07c <_ZN9TCPClient9availableEv+0xac>)
   ba05a:	4909      	ldr	r1, [pc, #36]	; (ba080 <_ZN9TCPClient9availableEv+0xb0>)
   ba05c:	9300      	str	r3, [sp, #0]
   ba05e:	aa02      	add	r2, sp, #8
   ba060:	462b      	mov	r3, r5
   ba062:	2032      	movs	r0, #50	; 0x32
   ba064:	f7fd ff38 	bl	b7ed8 <log_message>
                    sock_close(d_->sock);
   ba068:	6963      	ldr	r3, [r4, #20]
   ba06a:	6818      	ldr	r0, [r3, #0]
   ba06c:	f7fd fe94 	bl	b7d98 <sock_close>
   ba070:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   ba072:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba076:	601a      	str	r2, [r3, #0]
   ba078:	e7d4      	b.n	ba024 <_ZN9TCPClient9availableEv+0x54>
   ba07a:	bf00      	nop
   ba07c:	000bde47 	.word	0x000bde47
   ba080:	000bde40 	.word	0x000bde40

000ba084 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   ba084:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   ba086:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   ba088:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   ba08a:	6818      	ldr	r0, [r3, #0]
   ba08c:	2800      	cmp	r0, #0
   ba08e:	db01      	blt.n	ba094 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   ba090:	f7fd fe82 	bl	b7d98 <sock_close>
   ba094:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   ba096:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba09a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   ba09c:	6960      	ldr	r0, [r4, #20]
   ba09e:	2211      	movs	r2, #17
   ba0a0:	2100      	movs	r1, #0
   ba0a2:	308c      	adds	r0, #140	; 0x8c
   ba0a4:	f001 faca 	bl	bb63c <memset>
    flush_buffer();
   ba0a8:	4620      	mov	r0, r4
}
   ba0aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   ba0ae:	f7ff bf0b 	b.w	b9ec8 <_ZN9TCPClient12flush_bufferEv>

000ba0b2 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   ba0b2:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   ba0b4:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   ba0b6:	4604      	mov	r4, r0
          total(0) {
   ba0b8:	6001      	str	r1, [r0, #0]
   ba0ba:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   ba0be:	3088      	adds	r0, #136	; 0x88
   ba0c0:	f7ff fa3a 	bl	b9538 <_ZN9IPAddressC1Ev>
}
   ba0c4:	4620      	mov	r0, r4
   ba0c6:	bd10      	pop	{r4, pc}

000ba0c8 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   ba0c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba0ca:	2300      	movs	r3, #0
   ba0cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   ba0d0:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   ba0d4:	4a0e      	ldr	r2, [pc, #56]	; (ba110 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   ba0d6:	6103      	str	r3, [r0, #16]
   ba0d8:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   ba0da:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   ba0dc:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba0de:	20ac      	movs	r0, #172	; 0xac
   ba0e0:	9101      	str	r1, [sp, #4]
   ba0e2:	f7f9 ffd8 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   ba0e6:	1e05      	subs	r5, r0, #0
   ba0e8:	f105 060c 	add.w	r6, r5, #12
   ba0ec:	d008      	beq.n	ba100 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   ba0ee:	2301      	movs	r3, #1
   ba0f0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   ba0f4:	4b07      	ldr	r3, [pc, #28]	; (ba114 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba0f6:	9901      	ldr	r1, [sp, #4]
   ba0f8:	602b      	str	r3, [r5, #0]
   ba0fa:	4630      	mov	r0, r6
   ba0fc:	f7ff ffd9 	bl	ba0b2 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   ba100:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   ba102:	e9c4 6505 	strd	r6, r5, [r4, #20]
   ba106:	f7ff fedf 	bl	b9ec8 <_ZN9TCPClient12flush_bufferEv>
}
   ba10a:	b002      	add	sp, #8
   ba10c:	bd70      	pop	{r4, r5, r6, pc}
   ba10e:	bf00      	nop
   ba110:	000bde7c 	.word	0x000bde7c
   ba114:	000bde60 	.word	0x000bde60

000ba118 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   ba118:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   ba11a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   ba11e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   ba120:	f7ff ffd2 	bl	ba0c8 <_ZN9TCPClientC1Ei>
}
   ba124:	4620      	mov	r0, r4
   ba126:	bd10      	pop	{r4, pc}

000ba128 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   ba128:	b510      	push	{r4, lr}
   ba12a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   ba12c:	6800      	ldr	r0, [r0, #0]
   ba12e:	2800      	cmp	r0, #0
   ba130:	db01      	blt.n	ba136 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   ba132:	f7fd fe31 	bl	b7d98 <sock_close>
    }
}
   ba136:	4620      	mov	r0, r4
   ba138:	bd10      	pop	{r4, pc}

000ba13a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   ba13a:	300c      	adds	r0, #12
   ba13c:	f7ff bff4 	b.w	ba128 <_ZN9TCPClient4DataD1Ev>

000ba140 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   ba140:	4b02      	ldr	r3, [pc, #8]	; (ba14c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   ba142:	681a      	ldr	r2, [r3, #0]
   ba144:	4b02      	ldr	r3, [pc, #8]	; (ba150 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   ba146:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   ba148:	4770      	bx	lr
   ba14a:	bf00      	nop
   ba14c:	200352ec 	.word	0x200352ec
   ba150:	2003e6fc 	.word	0x2003e6fc

000ba154 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   ba154:	4770      	bx	lr

000ba156 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ba156:	7441      	strb	r1, [r0, #17]
}
   ba158:	4770      	bx	lr

000ba15a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   ba15a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   ba15c:	7c00      	ldrb	r0, [r0, #16]
   ba15e:	f7fd fe6b 	bl	b7e38 <hal_usart_available_data_for_write>
}
   ba162:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba166:	bd08      	pop	{r3, pc}

000ba168 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   ba168:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   ba16a:	7c00      	ldrb	r0, [r0, #16]
   ba16c:	f7fd fe44 	bl	b7df8 <hal_usart_available>
}
   ba170:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba174:	bd08      	pop	{r3, pc}

000ba176 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   ba176:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   ba178:	7c00      	ldrb	r0, [r0, #16]
   ba17a:	f7fd fe4d 	bl	b7e18 <hal_usart_peek>
}
   ba17e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba182:	bd08      	pop	{r3, pc}

000ba184 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   ba184:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   ba186:	7c00      	ldrb	r0, [r0, #16]
   ba188:	f7fd fe3e 	bl	b7e08 <hal_usart_read>
}
   ba18c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba190:	bd08      	pop	{r3, pc}

000ba192 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   ba192:	7c00      	ldrb	r0, [r0, #16]
   ba194:	f7fd be48 	b.w	b7e28 <hal_usart_flush>

000ba198 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   ba198:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba19a:	7c45      	ldrb	r5, [r0, #17]
{
   ba19c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba19e:	b12d      	cbz	r5, ba1ac <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   ba1a0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   ba1a2:	b003      	add	sp, #12
   ba1a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   ba1a8:	f7fd be1e 	b.w	b7de8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba1ac:	7c00      	ldrb	r0, [r0, #16]
   ba1ae:	9101      	str	r1, [sp, #4]
   ba1b0:	f7fd fe42 	bl	b7e38 <hal_usart_available_data_for_write>
   ba1b4:	2800      	cmp	r0, #0
   ba1b6:	9901      	ldr	r1, [sp, #4]
   ba1b8:	dcf2      	bgt.n	ba1a0 <_ZN11USARTSerial5writeEh+0x8>
}
   ba1ba:	4628      	mov	r0, r5
   ba1bc:	b003      	add	sp, #12
   ba1be:	bd30      	pop	{r4, r5, pc}

000ba1c0 <_ZN11USARTSerialD0Ev>:
   ba1c0:	b510      	push	{r4, lr}
   ba1c2:	2114      	movs	r1, #20
   ba1c4:	4604      	mov	r4, r0
   ba1c6:	f7f9 ff6c 	bl	b40a2 <_ZdlPvj>
   ba1ca:	4620      	mov	r0, r4
   ba1cc:	bd10      	pop	{r4, pc}
	...

000ba1d0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   ba1d0:	b510      	push	{r4, lr}
   ba1d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba1d6:	4604      	mov	r4, r0
   ba1d8:	4608      	mov	r0, r1
   ba1da:	4611      	mov	r1, r2
   ba1dc:	2200      	movs	r2, #0
   ba1de:	e9c4 2301 	strd	r2, r3, [r4, #4]
   ba1e2:	4b04      	ldr	r3, [pc, #16]	; (ba1f4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   ba1e4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   ba1e6:	2301      	movs	r3, #1
  _serial = serial;
   ba1e8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   ba1ea:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   ba1ec:	f7fd fe2c 	bl	b7e48 <hal_usart_init_ex>
}
   ba1f0:	4620      	mov	r0, r4
   ba1f2:	bd10      	pop	{r4, pc}
   ba1f4:	000bdee4 	.word	0x000bdee4

000ba1f8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ba1f8:	7441      	strb	r1, [r0, #17]
}
   ba1fa:	4770      	bx	lr

000ba1fc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba1fc:	4770      	bx	lr

000ba1fe <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   ba1fe:	4770      	bx	lr

000ba200 <_ZN9USBSerial4readEv>:
{
   ba200:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   ba202:	2100      	movs	r1, #0
   ba204:	7c00      	ldrb	r0, [r0, #16]
   ba206:	f7fd fe47 	bl	b7e98 <HAL_USB_USART_Receive_Data>
}
   ba20a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba20e:	bd08      	pop	{r3, pc}

000ba210 <_ZN9USBSerial4peekEv>:
{
   ba210:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   ba212:	2101      	movs	r1, #1
   ba214:	7c00      	ldrb	r0, [r0, #16]
   ba216:	f7fd fe3f 	bl	b7e98 <HAL_USB_USART_Receive_Data>
}
   ba21a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba21e:	bd08      	pop	{r3, pc}

000ba220 <_ZN9USBSerial17availableForWriteEv>:
{
   ba220:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   ba222:	7c00      	ldrb	r0, [r0, #16]
   ba224:	f7fd fe30 	bl	b7e88 <HAL_USB_USART_Available_Data_For_Write>
}
   ba228:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba22c:	bd08      	pop	{r3, pc}

000ba22e <_ZN9USBSerial9availableEv>:
{
   ba22e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   ba230:	7c00      	ldrb	r0, [r0, #16]
   ba232:	f7fd fe21 	bl	b7e78 <HAL_USB_USART_Available_Data>
}
   ba236:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba23a:	bd08      	pop	{r3, pc}

000ba23c <_ZN9USBSerial5writeEh>:
{
   ba23c:	b513      	push	{r0, r1, r4, lr}
   ba23e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ba240:	7c00      	ldrb	r0, [r0, #16]
{
   ba242:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ba244:	f7fd fe20 	bl	b7e88 <HAL_USB_USART_Available_Data_For_Write>
   ba248:	2800      	cmp	r0, #0
   ba24a:	9901      	ldr	r1, [sp, #4]
   ba24c:	dc01      	bgt.n	ba252 <_ZN9USBSerial5writeEh+0x16>
   ba24e:	7c60      	ldrb	r0, [r4, #17]
   ba250:	b120      	cbz	r0, ba25c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   ba252:	7c20      	ldrb	r0, [r4, #16]
   ba254:	f7fd fe28 	bl	b7ea8 <HAL_USB_USART_Send_Data>
   ba258:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   ba25c:	b002      	add	sp, #8
   ba25e:	bd10      	pop	{r4, pc}

000ba260 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   ba260:	7c00      	ldrb	r0, [r0, #16]
   ba262:	f7fd be29 	b.w	b7eb8 <HAL_USB_USART_Flush_Data>

000ba266 <_ZN9USBSerialD0Ev>:
   ba266:	b510      	push	{r4, lr}
   ba268:	2114      	movs	r1, #20
   ba26a:	4604      	mov	r4, r0
   ba26c:	f7f9 ff19 	bl	b40a2 <_ZdlPvj>
   ba270:	4620      	mov	r0, r4
   ba272:	bd10      	pop	{r4, pc}

000ba274 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   ba274:	b510      	push	{r4, lr}
   ba276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba27a:	4604      	mov	r4, r0
   ba27c:	4608      	mov	r0, r1
   ba27e:	2100      	movs	r1, #0
   ba280:	e9c4 1301 	strd	r1, r3, [r4, #4]
   ba284:	4b04      	ldr	r3, [pc, #16]	; (ba298 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   ba286:	6023      	str	r3, [r4, #0]
  _blocking = true;
   ba288:	2301      	movs	r3, #1
  _serial = serial;
   ba28a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   ba28c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   ba28e:	4611      	mov	r1, r2
   ba290:	f7fd fde2 	bl	b7e58 <HAL_USB_USART_Init>
}
   ba294:	4620      	mov	r0, r4
   ba296:	bd10      	pop	{r4, pc}
   ba298:	000bdf14 	.word	0x000bdf14

000ba29c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   ba29c:	7c00      	ldrb	r0, [r0, #16]
   ba29e:	2200      	movs	r2, #0
   ba2a0:	f7fd bde2 	b.w	b7e68 <HAL_USB_USART_Begin>

000ba2a4 <_Z19acquireSerialBufferv>:
{
   ba2a4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   ba2a6:	2214      	movs	r2, #20
{
   ba2a8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   ba2aa:	2100      	movs	r1, #0
   ba2ac:	f001 f9c6 	bl	bb63c <memset>
}
   ba2b0:	4620      	mov	r0, r4
   ba2b2:	bd10      	pop	{r4, pc}

000ba2b4 <_Z16_fetch_usbserialv>:
{
   ba2b4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba2b6:	4c0f      	ldr	r4, [pc, #60]	; (ba2f4 <_Z16_fetch_usbserialv+0x40>)
{
   ba2b8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   ba2ba:	a803      	add	r0, sp, #12
   ba2bc:	f7ff fff2 	bl	ba2a4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba2c0:	7821      	ldrb	r1, [r4, #0]
   ba2c2:	f3bf 8f5b 	dmb	ish
   ba2c6:	f011 0101 	ands.w	r1, r1, #1
   ba2ca:	d10f      	bne.n	ba2ec <_Z16_fetch_usbserialv+0x38>
   ba2cc:	4620      	mov	r0, r4
   ba2ce:	9101      	str	r1, [sp, #4]
   ba2d0:	f7f9 fee9 	bl	b40a6 <__cxa_guard_acquire>
   ba2d4:	9901      	ldr	r1, [sp, #4]
   ba2d6:	b148      	cbz	r0, ba2ec <_Z16_fetch_usbserialv+0x38>
   ba2d8:	aa03      	add	r2, sp, #12
   ba2da:	4807      	ldr	r0, [pc, #28]	; (ba2f8 <_Z16_fetch_usbserialv+0x44>)
   ba2dc:	f7ff ffca 	bl	ba274 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   ba2e0:	4620      	mov	r0, r4
   ba2e2:	f7f9 fee5 	bl	b40b0 <__cxa_guard_release>
   ba2e6:	4805      	ldr	r0, [pc, #20]	; (ba2fc <_Z16_fetch_usbserialv+0x48>)
   ba2e8:	f001 f966 	bl	bb5b8 <atexit>
	return _usbserial;
}
   ba2ec:	4802      	ldr	r0, [pc, #8]	; (ba2f8 <_Z16_fetch_usbserialv+0x44>)
   ba2ee:	b008      	add	sp, #32
   ba2f0:	bd10      	pop	{r4, pc}
   ba2f2:	bf00      	nop
   ba2f4:	2003e700 	.word	0x2003e700
   ba2f8:	2003e704 	.word	0x2003e704
   ba2fc:	000ba1fd 	.word	0x000ba1fd

000ba300 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   ba300:	2200      	movs	r2, #0
   ba302:	6840      	ldr	r0, [r0, #4]
   ba304:	4611      	mov	r1, r2
   ba306:	f7fd be33 	b.w	b7f70 <network_ready>

000ba30a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   ba30a:	2200      	movs	r2, #0
   ba30c:	6840      	ldr	r0, [r0, #4]
   ba30e:	4611      	mov	r1, r2
   ba310:	f7fd be4e 	b.w	b7fb0 <network_listening>

000ba314 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   ba314:	2200      	movs	r2, #0
   ba316:	6840      	ldr	r0, [r0, #4]
   ba318:	4611      	mov	r1, r2
   ba31a:	f7fd be71 	b.w	b8000 <network_get_listen_timeout>

000ba31e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   ba31e:	6840      	ldr	r0, [r0, #4]
   ba320:	2200      	movs	r2, #0
   ba322:	f7fd be65 	b.w	b7ff0 <network_set_listen_timeout>

000ba326 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   ba326:	6840      	ldr	r0, [r0, #4]
   ba328:	2200      	movs	r2, #0
   ba32a:	f081 0101 	eor.w	r1, r1, #1
   ba32e:	f7fd be37 	b.w	b7fa0 <network_listen>

000ba332 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   ba332:	2300      	movs	r3, #0
   ba334:	6840      	ldr	r0, [r0, #4]
   ba336:	461a      	mov	r2, r3
   ba338:	4619      	mov	r1, r3
   ba33a:	f7fd be29 	b.w	b7f90 <network_off>

000ba33e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   ba33e:	2300      	movs	r3, #0
   ba340:	6840      	ldr	r0, [r0, #4]
   ba342:	461a      	mov	r2, r3
   ba344:	4619      	mov	r1, r3
   ba346:	f7fd be1b 	b.w	b7f80 <network_on>

000ba34a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   ba34a:	2200      	movs	r2, #0
   ba34c:	6840      	ldr	r0, [r0, #4]
   ba34e:	4611      	mov	r1, r2
   ba350:	f7fd bdfe 	b.w	b7f50 <network_connecting>

000ba354 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   ba354:	6840      	ldr	r0, [r0, #4]
   ba356:	2200      	movs	r2, #0
   ba358:	2102      	movs	r1, #2
   ba35a:	f7fd be01 	b.w	b7f60 <network_disconnect>

000ba35e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   ba35e:	2300      	movs	r3, #0
   ba360:	6840      	ldr	r0, [r0, #4]
   ba362:	461a      	mov	r2, r3
   ba364:	f7fd bdec 	b.w	b7f40 <network_connect>

000ba368 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   ba368:	4b02      	ldr	r3, [pc, #8]	; (ba374 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   ba36a:	2204      	movs	r2, #4
   ba36c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   ba36e:	4a02      	ldr	r2, [pc, #8]	; (ba378 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   ba370:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   ba372:	4770      	bx	lr
   ba374:	2003e718 	.word	0x2003e718
   ba378:	000bdf44 	.word	0x000bdf44

000ba37c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   ba37c:	b510      	push	{r4, lr}
   ba37e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   ba380:	f001 f9a4 	bl	bb6cc <strlen>
   ba384:	3801      	subs	r0, #1
   ba386:	1823      	adds	r3, r4, r0
   ba388:	4620      	mov	r0, r4
	while(i<j){
   ba38a:	4283      	cmp	r3, r0
   ba38c:	d906      	bls.n	ba39c <_Z11str_reversePc+0x20>
		c = *i;
   ba38e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   ba390:	7819      	ldrb	r1, [r3, #0]
   ba392:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   ba396:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   ba39a:	e7f6      	b.n	ba38a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   ba39c:	bd10      	pop	{r4, pc}

000ba39e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   ba39e:	b570      	push	{r4, r5, r6, lr}
   ba3a0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   ba3a2:	1e91      	subs	r1, r2, #2
   ba3a4:	2922      	cmp	r1, #34	; 0x22
   ba3a6:	d81d      	bhi.n	ba3e4 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   ba3a8:	4625      	mov	r5, r4

	div_t result;
	while(a){
   ba3aa:	b930      	cbnz	r0, ba3ba <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   ba3ac:	4423      	add	r3, r4
            *ptr++ = '0';
   ba3ae:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   ba3b0:	429d      	cmp	r5, r3
   ba3b2:	d210      	bcs.n	ba3d6 <ultoa+0x38>
            *ptr++ = '0';
   ba3b4:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   ba3b8:	e7fa      	b.n	ba3b0 <ultoa+0x12>
            result.quot = a/radix;
   ba3ba:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   ba3be:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   ba3c2:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   ba3c4:	2809      	cmp	r0, #9
                *ptr += '0';
   ba3c6:	bf94      	ite	ls
   ba3c8:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   ba3ca:	3157      	addhi	r1, #87	; 0x57
   ba3cc:	b2c9      	uxtb	r1, r1
   ba3ce:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   ba3d2:	4630      	mov	r0, r6
	while(a){
   ba3d4:	e7e9      	b.n	ba3aa <ultoa+0xc>

	*ptr = '\0';
   ba3d6:	2300      	movs	r3, #0
	str_reverse(buffer);
   ba3d8:	4620      	mov	r0, r4
	*ptr = '\0';
   ba3da:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   ba3dc:	f7ff ffce 	bl	ba37c <_Z11str_reversePc>
	return buffer;
   ba3e0:	4620      	mov	r0, r4
}
   ba3e2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   ba3e4:	2000      	movs	r0, #0
   ba3e6:	e7fc      	b.n	ba3e2 <ultoa+0x44>

000ba3e8 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   ba3e8:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   ba3ea:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   ba3ec:	460c      	mov	r4, r1
   ba3ee:	4615      	mov	r5, r2
	if(a<0){
   ba3f0:	da0e      	bge.n	ba410 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   ba3f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   ba3f6:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   ba3fa:	bf14      	ite	ne
   ba3fc:	4258      	negne	r0, r3
   ba3fe:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   ba400:	2301      	movs	r3, #1
		*buffer = '-';
   ba402:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   ba404:	462a      	mov	r2, r5
   ba406:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   ba408:	f7ff ffc9 	bl	ba39e <ultoa>
	}
	return buffer;
}
   ba40c:	4620      	mov	r0, r4
   ba40e:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   ba410:	2301      	movs	r3, #1
   ba412:	e7f9      	b.n	ba408 <itoa+0x20>

000ba414 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   ba414:	4b01      	ldr	r3, [pc, #4]	; (ba41c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   ba416:	6018      	str	r0, [r3, #0]
    }, nullptr);
   ba418:	4770      	bx	lr
   ba41a:	bf00      	nop
   ba41c:	200352f4 	.word	0x200352f4

000ba420 <serialEventRun>:
{
   ba420:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   ba422:	4b0b      	ldr	r3, [pc, #44]	; (ba450 <serialEventRun+0x30>)
   ba424:	b143      	cbz	r3, ba438 <serialEventRun+0x18>
   ba426:	f7ff ff45 	bl	ba2b4 <_Z16_fetch_usbserialv>
   ba42a:	6803      	ldr	r3, [r0, #0]
   ba42c:	691b      	ldr	r3, [r3, #16]
   ba42e:	4798      	blx	r3
   ba430:	2800      	cmp	r0, #0
   ba432:	dd01      	ble.n	ba438 <serialEventRun+0x18>
        serialEvent();
   ba434:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   ba438:	4b06      	ldr	r3, [pc, #24]	; (ba454 <serialEventRun+0x34>)
   ba43a:	b143      	cbz	r3, ba44e <serialEventRun+0x2e>
   ba43c:	f000 f8c8 	bl	ba5d0 <_Z22__fetch_global_Serial1v>
   ba440:	6803      	ldr	r3, [r0, #0]
   ba442:	691b      	ldr	r3, [r3, #16]
   ba444:	4798      	blx	r3
   ba446:	2800      	cmp	r0, #0
   ba448:	dd01      	ble.n	ba44e <serialEventRun+0x2e>
        serialEvent1();
   ba44a:	f3af 8000 	nop.w
}
   ba44e:	bd08      	pop	{r3, pc}
	...

000ba458 <_post_loop>:
{
   ba458:	b508      	push	{r3, lr}
	serialEventRun();
   ba45a:	f7ff ffe1 	bl	ba420 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   ba45e:	f7fd fc0b 	bl	b7c78 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   ba462:	4b01      	ldr	r3, [pc, #4]	; (ba468 <_post_loop+0x10>)
   ba464:	6018      	str	r0, [r3, #0]
}
   ba466:	bd08      	pop	{r3, pc}
   ba468:	2003e728 	.word	0x2003e728

000ba46c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   ba46c:	4805      	ldr	r0, [pc, #20]	; (ba484 <_Z33system_initialize_user_backup_ramv+0x18>)
   ba46e:	4a06      	ldr	r2, [pc, #24]	; (ba488 <_Z33system_initialize_user_backup_ramv+0x1c>)
   ba470:	4906      	ldr	r1, [pc, #24]	; (ba48c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   ba472:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   ba474:	1a12      	subs	r2, r2, r0
   ba476:	f001 f8b9 	bl	bb5ec <memcpy>
    __backup_sram_signature = signature;
   ba47a:	4b05      	ldr	r3, [pc, #20]	; (ba490 <_Z33system_initialize_user_backup_ramv+0x24>)
   ba47c:	4a05      	ldr	r2, [pc, #20]	; (ba494 <_Z33system_initialize_user_backup_ramv+0x28>)
   ba47e:	601a      	str	r2, [r3, #0]
}
   ba480:	bd08      	pop	{r3, pc}
   ba482:	bf00      	nop
   ba484:	2003f400 	.word	0x2003f400
   ba488:	2003f404 	.word	0x2003f404
   ba48c:	000be484 	.word	0x000be484
   ba490:	2003f400 	.word	0x2003f400
   ba494:	9a271c1e 	.word	0x9a271c1e

000ba498 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   ba498:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ba49a:	2300      	movs	r3, #0
   ba49c:	9300      	str	r3, [sp, #0]
   ba49e:	461a      	mov	r2, r3
   ba4a0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ba4a4:	f7fd fd3a 	bl	b7f1c <system_ctrl_set_result>
}
   ba4a8:	b003      	add	sp, #12
   ba4aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ba4b0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   ba4b0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   ba4b2:	8843      	ldrh	r3, [r0, #2]
   ba4b4:	2b0a      	cmp	r3, #10
   ba4b6:	d008      	beq.n	ba4ca <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   ba4b8:	2b50      	cmp	r3, #80	; 0x50
   ba4ba:	d10b      	bne.n	ba4d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   ba4bc:	4b09      	ldr	r3, [pc, #36]	; (ba4e4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   ba4be:	681b      	ldr	r3, [r3, #0]
   ba4c0:	b14b      	cbz	r3, ba4d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   ba4c2:	b003      	add	sp, #12
   ba4c4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   ba4c8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   ba4ca:	f7ff ffe5 	bl	ba498 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   ba4ce:	b003      	add	sp, #12
   ba4d0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ba4d4:	2300      	movs	r3, #0
   ba4d6:	9300      	str	r3, [sp, #0]
   ba4d8:	461a      	mov	r2, r3
   ba4da:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ba4de:	f7fd fd1d 	bl	b7f1c <system_ctrl_set_result>
}
   ba4e2:	e7f4      	b.n	ba4ce <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   ba4e4:	2003e724 	.word	0x2003e724

000ba4e8 <module_user_init_hook>:
{
   ba4e8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   ba4ea:	4812      	ldr	r0, [pc, #72]	; (ba534 <module_user_init_hook+0x4c>)
   ba4ec:	2100      	movs	r1, #0
   ba4ee:	f7fd fde7 	bl	b80c0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   ba4f2:	4b11      	ldr	r3, [pc, #68]	; (ba538 <module_user_init_hook+0x50>)
   ba4f4:	681a      	ldr	r2, [r3, #0]
   ba4f6:	4b11      	ldr	r3, [pc, #68]	; (ba53c <module_user_init_hook+0x54>)
   ba4f8:	429a      	cmp	r2, r3
   ba4fa:	4b11      	ldr	r3, [pc, #68]	; (ba540 <module_user_init_hook+0x58>)
   ba4fc:	bf0c      	ite	eq
   ba4fe:	2201      	moveq	r2, #1
   ba500:	2200      	movne	r2, #0
   ba502:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   ba504:	d001      	beq.n	ba50a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   ba506:	f7ff ffb1 	bl	ba46c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   ba50a:	f7fd fba5 	bl	b7c58 <HAL_RNG_GetRandomNumber>
   ba50e:	4604      	mov	r4, r0
    srand(seed);
   ba510:	f001 f89c 	bl	bb64c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   ba514:	4b0b      	ldr	r3, [pc, #44]	; (ba544 <module_user_init_hook+0x5c>)
   ba516:	b113      	cbz	r3, ba51e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   ba518:	4620      	mov	r0, r4
   ba51a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   ba51e:	2100      	movs	r1, #0
   ba520:	4808      	ldr	r0, [pc, #32]	; (ba544 <module_user_init_hook+0x5c>)
   ba522:	f7fd fd05 	bl	b7f30 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   ba526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   ba52a:	4807      	ldr	r0, [pc, #28]	; (ba548 <module_user_init_hook+0x60>)
   ba52c:	2100      	movs	r1, #0
   ba52e:	f7fd bceb 	b.w	b7f08 <system_ctrl_set_app_request_handler>
   ba532:	bf00      	nop
   ba534:	000ba415 	.word	0x000ba415
   ba538:	2003f400 	.word	0x2003f400
   ba53c:	9a271c1e 	.word	0x9a271c1e
   ba540:	2003e720 	.word	0x2003e720
   ba544:	00000000 	.word	0x00000000
   ba548:	000ba4b1 	.word	0x000ba4b1

000ba54c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba54c:	4770      	bx	lr
	...

000ba550 <_Z19__fetch_global_Wirev>:
{
   ba550:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba552:	4d0e      	ldr	r5, [pc, #56]	; (ba58c <_Z19__fetch_global_Wirev+0x3c>)
   ba554:	7829      	ldrb	r1, [r5, #0]
   ba556:	f3bf 8f5b 	dmb	ish
   ba55a:	f011 0401 	ands.w	r4, r1, #1
{
   ba55e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba560:	d111      	bne.n	ba586 <_Z19__fetch_global_Wirev+0x36>
   ba562:	4628      	mov	r0, r5
   ba564:	f7f9 fd9f 	bl	b40a6 <__cxa_guard_acquire>
   ba568:	b168      	cbz	r0, ba586 <_Z19__fetch_global_Wirev+0x36>
   ba56a:	a801      	add	r0, sp, #4
   ba56c:	f7fa f8ce 	bl	b470c <_Z17acquireWireBufferv>
   ba570:	aa01      	add	r2, sp, #4
   ba572:	4621      	mov	r1, r4
   ba574:	4806      	ldr	r0, [pc, #24]	; (ba590 <_Z19__fetch_global_Wirev+0x40>)
   ba576:	f7fe ff53 	bl	b9420 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   ba57a:	4628      	mov	r0, r5
   ba57c:	f7f9 fd98 	bl	b40b0 <__cxa_guard_release>
   ba580:	4804      	ldr	r0, [pc, #16]	; (ba594 <_Z19__fetch_global_Wirev+0x44>)
   ba582:	f001 f819 	bl	bb5b8 <atexit>
	return wire;
}
   ba586:	4802      	ldr	r0, [pc, #8]	; (ba590 <_Z19__fetch_global_Wirev+0x40>)
   ba588:	b007      	add	sp, #28
   ba58a:	bd30      	pop	{r4, r5, pc}
   ba58c:	2003e72c 	.word	0x2003e72c
   ba590:	2003e730 	.word	0x2003e730
   ba594:	000ba54d 	.word	0x000ba54d

000ba598 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba598:	4770      	bx	lr
	...

000ba59c <_Z20acquireSerial1Bufferv>:
{
   ba59c:	b538      	push	{r3, r4, r5, lr}
   ba59e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   ba5a0:	2514      	movs	r5, #20
   ba5a2:	462a      	mov	r2, r5
   ba5a4:	2100      	movs	r1, #0
   ba5a6:	f001 f849 	bl	bb63c <memset>
   ba5aa:	8025      	strh	r5, [r4, #0]
   ba5ac:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba5ae:	4907      	ldr	r1, [pc, #28]	; (ba5cc <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   ba5b0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba5b2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   ba5b4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba5b6:	f000 f82f 	bl	ba618 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba5ba:	4904      	ldr	r1, [pc, #16]	; (ba5cc <_Z20acquireSerial1Bufferv+0x30>)
    };
   ba5bc:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba5be:	4628      	mov	r0, r5
   ba5c0:	f000 f82a 	bl	ba618 <_ZnajRKSt9nothrow_t>
    };
   ba5c4:	60e0      	str	r0, [r4, #12]
}
   ba5c6:	4620      	mov	r0, r4
   ba5c8:	bd38      	pop	{r3, r4, r5, pc}
   ba5ca:	bf00      	nop
   ba5cc:	000bdf78 	.word	0x000bdf78

000ba5d0 <_Z22__fetch_global_Serial1v>:
{
   ba5d0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba5d2:	4d0e      	ldr	r5, [pc, #56]	; (ba60c <_Z22__fetch_global_Serial1v+0x3c>)
   ba5d4:	7829      	ldrb	r1, [r5, #0]
   ba5d6:	f3bf 8f5b 	dmb	ish
   ba5da:	f011 0401 	ands.w	r4, r1, #1
{
   ba5de:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba5e0:	d111      	bne.n	ba606 <_Z22__fetch_global_Serial1v+0x36>
   ba5e2:	4628      	mov	r0, r5
   ba5e4:	f7f9 fd5f 	bl	b40a6 <__cxa_guard_acquire>
   ba5e8:	b168      	cbz	r0, ba606 <_Z22__fetch_global_Serial1v+0x36>
   ba5ea:	a801      	add	r0, sp, #4
   ba5ec:	f7ff ffd6 	bl	ba59c <_Z20acquireSerial1Bufferv>
   ba5f0:	aa01      	add	r2, sp, #4
   ba5f2:	4621      	mov	r1, r4
   ba5f4:	4806      	ldr	r0, [pc, #24]	; (ba610 <_Z22__fetch_global_Serial1v+0x40>)
   ba5f6:	f7ff fdeb 	bl	ba1d0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   ba5fa:	4628      	mov	r0, r5
   ba5fc:	f7f9 fd58 	bl	b40b0 <__cxa_guard_release>
   ba600:	4804      	ldr	r0, [pc, #16]	; (ba614 <_Z22__fetch_global_Serial1v+0x44>)
   ba602:	f000 ffd9 	bl	bb5b8 <atexit>
    return serial1;
}
   ba606:	4802      	ldr	r0, [pc, #8]	; (ba610 <_Z22__fetch_global_Serial1v+0x40>)
   ba608:	b007      	add	sp, #28
   ba60a:	bd30      	pop	{r4, r5, pc}
   ba60c:	2003e744 	.word	0x2003e744
   ba610:	2003e748 	.word	0x2003e748
   ba614:	000ba599 	.word	0x000ba599

000ba618 <_ZnajRKSt9nothrow_t>:
   ba618:	f7f9 bd3f 	b.w	b409a <_Znaj>

000ba61c <_ZSt17__throw_bad_allocv>:
   ba61c:	b508      	push	{r3, lr}
   ba61e:	f7fd fd2f 	bl	b8080 <abort>

000ba622 <_ZSt19__throw_logic_errorPKc>:
   ba622:	b508      	push	{r3, lr}
   ba624:	f7fd fd2c 	bl	b8080 <abort>

000ba628 <_ZSt20__throw_length_errorPKc>:
   ba628:	b508      	push	{r3, lr}
   ba62a:	f7fd fd29 	bl	b8080 <abort>

000ba62e <_ZSt25__throw_bad_function_callv>:
   ba62e:	b508      	push	{r3, lr}
   ba630:	f7fd fd26 	bl	b8080 <abort>

000ba634 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   ba634:	4901      	ldr	r1, [pc, #4]	; (ba63c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   ba636:	f000 b963 	b.w	ba900 <_ZNKSt9type_infoeqERKS_>
   ba63a:	bf00      	nop
   ba63c:	000bdf94 	.word	0x000bdf94

000ba640 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   ba640:	b10a      	cbz	r2, ba646 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   ba642:	f000 bfd3 	b.w	bb5ec <memcpy>
   ba646:	4770      	bx	lr

000ba648 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   ba648:	b508      	push	{r3, lr}
   ba64a:	680b      	ldr	r3, [r1, #0]
   ba64c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   ba650:	d302      	bcc.n	ba658 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   ba652:	480d      	ldr	r0, [pc, #52]	; (ba688 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   ba654:	f7ff ffe8 	bl	ba628 <_ZSt20__throw_length_errorPKc>
   ba658:	4293      	cmp	r3, r2
   ba65a:	d90b      	bls.n	ba674 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   ba65c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   ba660:	ea4f 0042 	mov.w	r0, r2, lsl #1
   ba664:	d206      	bcs.n	ba674 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   ba666:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   ba66a:	bf2a      	itet	cs
   ba66c:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   ba670:	6008      	strcc	r0, [r1, #0]
   ba672:	600b      	strcs	r3, [r1, #0]
   ba674:	6808      	ldr	r0, [r1, #0]
   ba676:	3001      	adds	r0, #1
   ba678:	d501      	bpl.n	ba67e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   ba67a:	f7ff ffcf 	bl	ba61c <_ZSt17__throw_bad_allocv>
   ba67e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   ba682:	f7f9 bd08 	b.w	b4096 <_Znwj>
   ba686:	bf00      	nop
   ba688:	000bdf9c 	.word	0x000bdf9c

000ba68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   ba68c:	f850 3b08 	ldr.w	r3, [r0], #8
   ba690:	4283      	cmp	r3, r0
   ba692:	d002      	beq.n	ba69a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   ba694:	4618      	mov	r0, r3
   ba696:	f7f9 bd02 	b.w	b409e <_ZdlPv>
   ba69a:	4770      	bx	lr

000ba69c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   ba69c:	2a01      	cmp	r2, #1
   ba69e:	b410      	push	{r4}
   ba6a0:	d104      	bne.n	ba6ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   ba6a2:	780a      	ldrb	r2, [r1, #0]
   ba6a4:	f85d 4b04 	ldr.w	r4, [sp], #4
   ba6a8:	7002      	strb	r2, [r0, #0]
   ba6aa:	4770      	bx	lr
   ba6ac:	f85d 4b04 	ldr.w	r4, [sp], #4
   ba6b0:	f7ff bfc6 	b.w	ba640 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000ba6b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
   ba6b4:	b508      	push	{r3, lr}
   ba6b6:	1a52      	subs	r2, r2, r1
   ba6b8:	f7ff fff0 	bl	ba69c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   ba6bc:	bd08      	pop	{r3, pc}

000ba6be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   ba6be:	b508      	push	{r3, lr}
   ba6c0:	1a52      	subs	r2, r2, r1
   ba6c2:	f7ff ffeb 	bl	ba69c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   ba6c6:	bd08      	pop	{r3, pc}

000ba6c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
   ba6c8:	4288      	cmp	r0, r1
   ba6ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba6cc:	4604      	mov	r4, r0
   ba6ce:	460e      	mov	r6, r1
   ba6d0:	d01e      	beq.n	ba710 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
   ba6d2:	4603      	mov	r3, r0
   ba6d4:	684d      	ldr	r5, [r1, #4]
   ba6d6:	f853 2b08 	ldr.w	r2, [r3], #8
   ba6da:	429a      	cmp	r2, r3
   ba6dc:	bf14      	ite	ne
   ba6de:	6882      	ldrne	r2, [r0, #8]
   ba6e0:	220f      	moveq	r2, #15
   ba6e2:	42aa      	cmp	r2, r5
   ba6e4:	d20a      	bcs.n	ba6fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
   ba6e6:	a901      	add	r1, sp, #4
   ba6e8:	9501      	str	r5, [sp, #4]
   ba6ea:	f7ff ffad 	bl	ba648 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   ba6ee:	4607      	mov	r7, r0
   ba6f0:	4620      	mov	r0, r4
   ba6f2:	f7ff ffcb 	bl	ba68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   ba6f6:	9b01      	ldr	r3, [sp, #4]
   ba6f8:	6027      	str	r7, [r4, #0]
   ba6fa:	60a3      	str	r3, [r4, #8]
   ba6fc:	b125      	cbz	r5, ba708 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
   ba6fe:	6831      	ldr	r1, [r6, #0]
   ba700:	6820      	ldr	r0, [r4, #0]
   ba702:	462a      	mov	r2, r5
   ba704:	f7ff ffca 	bl	ba69c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   ba708:	6823      	ldr	r3, [r4, #0]
   ba70a:	6065      	str	r5, [r4, #4]
   ba70c:	2200      	movs	r2, #0
   ba70e:	555a      	strb	r2, [r3, r5]
   ba710:	b003      	add	sp, #12
   ba712:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba714 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   ba714:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   ba716:	2400      	movs	r4, #0
   ba718:	2310      	movs	r3, #16
   ba71a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   ba71e:	6803      	ldr	r3, [r0, #0]
   ba720:	4615      	mov	r5, r2
   ba722:	699e      	ldr	r6, [r3, #24]
   ba724:	6812      	ldr	r2, [r2, #0]
   ba726:	466b      	mov	r3, sp
   ba728:	e9cd 4400 	strd	r4, r4, [sp]
   ba72c:	47b0      	blx	r6
   ba72e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   ba732:	f003 0306 	and.w	r3, r3, #6
   ba736:	2b06      	cmp	r3, #6
   ba738:	bf03      	ittte	eq
   ba73a:	9b00      	ldreq	r3, [sp, #0]
   ba73c:	602b      	streq	r3, [r5, #0]
   ba73e:	2001      	moveq	r0, #1
   ba740:	4620      	movne	r0, r4
   ba742:	b004      	add	sp, #16
   ba744:	bd70      	pop	{r4, r5, r6, pc}

000ba746 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   ba746:	9800      	ldr	r0, [sp, #0]
   ba748:	4290      	cmp	r0, r2
   ba74a:	bf14      	ite	ne
   ba74c:	2001      	movne	r0, #1
   ba74e:	2006      	moveq	r0, #6
   ba750:	4770      	bx	lr
	...

000ba754 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   ba754:	b510      	push	{r4, lr}
   ba756:	4b03      	ldr	r3, [pc, #12]	; (ba764 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   ba758:	6003      	str	r3, [r0, #0]
   ba75a:	4604      	mov	r4, r0
   ba75c:	f000 f8cd 	bl	ba8fa <_ZNSt9type_infoD1Ev>
   ba760:	4620      	mov	r0, r4
   ba762:	bd10      	pop	{r4, pc}
   ba764:	000bdfec 	.word	0x000bdfec

000ba768 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   ba768:	b510      	push	{r4, lr}
   ba76a:	4604      	mov	r4, r0
   ba76c:	f7ff fff2 	bl	ba754 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba770:	4620      	mov	r0, r4
   ba772:	2108      	movs	r1, #8
   ba774:	f7f9 fc95 	bl	b40a2 <_ZdlPvj>
   ba778:	4620      	mov	r0, r4
   ba77a:	bd10      	pop	{r4, pc}

000ba77c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   ba77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba780:	461f      	mov	r7, r3
   ba782:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   ba786:	f8dd 8018 	ldr.w	r8, [sp, #24]
   ba78a:	4598      	cmp	r8, r3
   ba78c:	4606      	mov	r6, r0
   ba78e:	4615      	mov	r5, r2
   ba790:	d107      	bne.n	ba7a2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba792:	9907      	ldr	r1, [sp, #28]
   ba794:	f000 f8b4 	bl	ba900 <_ZNKSt9type_infoeqERKS_>
   ba798:	b118      	cbz	r0, ba7a2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba79a:	7165      	strb	r5, [r4, #5]
   ba79c:	2000      	movs	r0, #0
   ba79e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba7a2:	4639      	mov	r1, r7
   ba7a4:	4630      	mov	r0, r6
   ba7a6:	f000 f8ab 	bl	ba900 <_ZNKSt9type_infoeqERKS_>
   ba7aa:	2800      	cmp	r0, #0
   ba7ac:	d0f6      	beq.n	ba79c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   ba7ae:	2301      	movs	r3, #1
   ba7b0:	f8c4 8000 	str.w	r8, [r4]
   ba7b4:	7125      	strb	r5, [r4, #4]
   ba7b6:	71a3      	strb	r3, [r4, #6]
   ba7b8:	e7f0      	b.n	ba79c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000ba7ba <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   ba7ba:	b538      	push	{r3, r4, r5, lr}
   ba7bc:	4615      	mov	r5, r2
   ba7be:	461c      	mov	r4, r3
   ba7c0:	f000 f89e 	bl	ba900 <_ZNKSt9type_infoeqERKS_>
   ba7c4:	b120      	cbz	r0, ba7d0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   ba7c6:	2308      	movs	r3, #8
   ba7c8:	60e3      	str	r3, [r4, #12]
   ba7ca:	2306      	movs	r3, #6
   ba7cc:	6025      	str	r5, [r4, #0]
   ba7ce:	7123      	strb	r3, [r4, #4]
   ba7d0:	bd38      	pop	{r3, r4, r5, pc}

000ba7d2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   ba7d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba7d4:	4605      	mov	r5, r0
   ba7d6:	460c      	mov	r4, r1
   ba7d8:	9201      	str	r2, [sp, #4]
   ba7da:	461e      	mov	r6, r3
   ba7dc:	f000 f890 	bl	ba900 <_ZNKSt9type_infoeqERKS_>
   ba7e0:	b950      	cbnz	r0, ba7f8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba7e2:	2e03      	cmp	r6, #3
   ba7e4:	d808      	bhi.n	ba7f8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba7e6:	6823      	ldr	r3, [r4, #0]
   ba7e8:	9a01      	ldr	r2, [sp, #4]
   ba7ea:	695b      	ldr	r3, [r3, #20]
   ba7ec:	4629      	mov	r1, r5
   ba7ee:	4620      	mov	r0, r4
   ba7f0:	b002      	add	sp, #8
   ba7f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba7f6:	4718      	bx	r3
   ba7f8:	b002      	add	sp, #8
   ba7fa:	bd70      	pop	{r4, r5, r6, pc}

000ba7fc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   ba7fc:	b510      	push	{r4, lr}
   ba7fe:	4b03      	ldr	r3, [pc, #12]	; (ba80c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   ba800:	6003      	str	r3, [r0, #0]
   ba802:	4604      	mov	r4, r0
   ba804:	f7ff ffa6 	bl	ba754 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba808:	4620      	mov	r0, r4
   ba80a:	bd10      	pop	{r4, pc}
   ba80c:	000be04c 	.word	0x000be04c

000ba810 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   ba810:	b510      	push	{r4, lr}
   ba812:	4604      	mov	r4, r0
   ba814:	f7ff fff2 	bl	ba7fc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   ba818:	4620      	mov	r0, r4
   ba81a:	210c      	movs	r1, #12
   ba81c:	f7f9 fc41 	bl	b40a2 <_ZdlPvj>
   ba820:	4620      	mov	r0, r4
   ba822:	bd10      	pop	{r4, pc}

000ba824 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   ba824:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba826:	9f08      	ldr	r7, [sp, #32]
   ba828:	4297      	cmp	r7, r2
   ba82a:	4605      	mov	r5, r0
   ba82c:	460e      	mov	r6, r1
   ba82e:	4614      	mov	r4, r2
   ba830:	d00a      	beq.n	ba848 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   ba832:	68a8      	ldr	r0, [r5, #8]
   ba834:	6802      	ldr	r2, [r0, #0]
   ba836:	9708      	str	r7, [sp, #32]
   ba838:	6a15      	ldr	r5, [r2, #32]
   ba83a:	4631      	mov	r1, r6
   ba83c:	4622      	mov	r2, r4
   ba83e:	46ac      	mov	ip, r5
   ba840:	b003      	add	sp, #12
   ba842:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   ba846:	4760      	bx	ip
   ba848:	4619      	mov	r1, r3
   ba84a:	9301      	str	r3, [sp, #4]
   ba84c:	f000 f858 	bl	ba900 <_ZNKSt9type_infoeqERKS_>
   ba850:	9b01      	ldr	r3, [sp, #4]
   ba852:	2800      	cmp	r0, #0
   ba854:	d0ed      	beq.n	ba832 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   ba856:	2006      	movs	r0, #6
   ba858:	b003      	add	sp, #12
   ba85a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba85c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   ba85c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba860:	460d      	mov	r5, r1
   ba862:	4619      	mov	r1, r3
   ba864:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   ba868:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   ba86c:	4681      	mov	r9, r0
   ba86e:	4617      	mov	r7, r2
   ba870:	4698      	mov	r8, r3
   ba872:	f000 f845 	bl	ba900 <_ZNKSt9type_infoeqERKS_>
   ba876:	b190      	cbz	r0, ba89e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   ba878:	2d00      	cmp	r5, #0
   ba87a:	6034      	str	r4, [r6, #0]
   ba87c:	7137      	strb	r7, [r6, #4]
   ba87e:	db09      	blt.n	ba894 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   ba880:	1961      	adds	r1, r4, r5
   ba882:	458a      	cmp	sl, r1
   ba884:	bf0c      	ite	eq
   ba886:	2106      	moveq	r1, #6
   ba888:	2101      	movne	r1, #1
   ba88a:	71b1      	strb	r1, [r6, #6]
   ba88c:	2000      	movs	r0, #0
   ba88e:	b001      	add	sp, #4
   ba890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba894:	3502      	adds	r5, #2
   ba896:	d1f9      	bne.n	ba88c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba898:	2301      	movs	r3, #1
   ba89a:	71b3      	strb	r3, [r6, #6]
   ba89c:	e7f6      	b.n	ba88c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba89e:	4554      	cmp	r4, sl
   ba8a0:	d106      	bne.n	ba8b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba8a2:	4659      	mov	r1, fp
   ba8a4:	4648      	mov	r0, r9
   ba8a6:	f000 f82b 	bl	ba900 <_ZNKSt9type_infoeqERKS_>
   ba8aa:	b108      	cbz	r0, ba8b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba8ac:	7177      	strb	r7, [r6, #5]
   ba8ae:	e7ed      	b.n	ba88c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba8b0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   ba8b4:	6803      	ldr	r3, [r0, #0]
   ba8b6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   ba8ba:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   ba8be:	69dc      	ldr	r4, [r3, #28]
   ba8c0:	463a      	mov	r2, r7
   ba8c2:	4643      	mov	r3, r8
   ba8c4:	4629      	mov	r1, r5
   ba8c6:	46a4      	mov	ip, r4
   ba8c8:	b001      	add	sp, #4
   ba8ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba8ce:	4760      	bx	ip

000ba8d0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   ba8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba8d4:	4607      	mov	r7, r0
   ba8d6:	460c      	mov	r4, r1
   ba8d8:	4615      	mov	r5, r2
   ba8da:	461e      	mov	r6, r3
   ba8dc:	f7ff ff6d 	bl	ba7ba <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   ba8e0:	b948      	cbnz	r0, ba8f6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   ba8e2:	68b8      	ldr	r0, [r7, #8]
   ba8e4:	6803      	ldr	r3, [r0, #0]
   ba8e6:	699f      	ldr	r7, [r3, #24]
   ba8e8:	462a      	mov	r2, r5
   ba8ea:	4633      	mov	r3, r6
   ba8ec:	4621      	mov	r1, r4
   ba8ee:	46bc      	mov	ip, r7
   ba8f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   ba8f4:	4760      	bx	ip
   ba8f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000ba8fa <_ZNSt9type_infoD1Ev>:
   ba8fa:	4770      	bx	lr

000ba8fc <_ZNKSt9type_info14__is_pointer_pEv>:
   ba8fc:	2000      	movs	r0, #0
   ba8fe:	4770      	bx	lr

000ba900 <_ZNKSt9type_infoeqERKS_>:
   ba900:	4281      	cmp	r1, r0
   ba902:	b508      	push	{r3, lr}
   ba904:	d00e      	beq.n	ba924 <_ZNKSt9type_infoeqERKS_+0x24>
   ba906:	6840      	ldr	r0, [r0, #4]
   ba908:	7803      	ldrb	r3, [r0, #0]
   ba90a:	2b2a      	cmp	r3, #42	; 0x2a
   ba90c:	d00c      	beq.n	ba928 <_ZNKSt9type_infoeqERKS_+0x28>
   ba90e:	6849      	ldr	r1, [r1, #4]
   ba910:	780b      	ldrb	r3, [r1, #0]
   ba912:	2b2a      	cmp	r3, #42	; 0x2a
   ba914:	bf08      	it	eq
   ba916:	3101      	addeq	r1, #1
   ba918:	f000 fec6 	bl	bb6a8 <strcmp>
   ba91c:	fab0 f080 	clz	r0, r0
   ba920:	0940      	lsrs	r0, r0, #5
   ba922:	bd08      	pop	{r3, pc}
   ba924:	2001      	movs	r0, #1
   ba926:	e7fc      	b.n	ba922 <_ZNKSt9type_infoeqERKS_+0x22>
   ba928:	2000      	movs	r0, #0
   ba92a:	e7fa      	b.n	ba922 <_ZNKSt9type_infoeqERKS_+0x22>

000ba92c <floorf>:
   ba92c:	ee10 2a10 	vmov	r2, s0
   ba930:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   ba934:	3b7f      	subs	r3, #127	; 0x7f
   ba936:	2b16      	cmp	r3, #22
   ba938:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   ba93c:	dc28      	bgt.n	ba990 <floorf+0x64>
   ba93e:	2b00      	cmp	r3, #0
   ba940:	db18      	blt.n	ba974 <floorf+0x48>
   ba942:	491a      	ldr	r1, [pc, #104]	; (ba9ac <floorf+0x80>)
   ba944:	4119      	asrs	r1, r3
   ba946:	420a      	tst	r2, r1
   ba948:	d021      	beq.n	ba98e <floorf+0x62>
   ba94a:	eddf 7a19 	vldr	s15, [pc, #100]	; ba9b0 <floorf+0x84>
   ba94e:	ee70 7a27 	vadd.f32	s15, s0, s15
   ba952:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   ba956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba95a:	dd18      	ble.n	ba98e <floorf+0x62>
   ba95c:	2a00      	cmp	r2, #0
   ba95e:	da04      	bge.n	ba96a <floorf+0x3e>
   ba960:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   ba964:	fa40 f303 	asr.w	r3, r0, r3
   ba968:	441a      	add	r2, r3
   ba96a:	ea22 0301 	bic.w	r3, r2, r1
   ba96e:	ee00 3a10 	vmov	s0, r3
   ba972:	4770      	bx	lr
   ba974:	eddf 7a0e 	vldr	s15, [pc, #56]	; ba9b0 <floorf+0x84>
   ba978:	ee70 7a27 	vadd.f32	s15, s0, s15
   ba97c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   ba980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba984:	dd03      	ble.n	ba98e <floorf+0x62>
   ba986:	2a00      	cmp	r2, #0
   ba988:	db08      	blt.n	ba99c <floorf+0x70>
   ba98a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; ba9b4 <floorf+0x88>
   ba98e:	4770      	bx	lr
   ba990:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   ba994:	d3fb      	bcc.n	ba98e <floorf+0x62>
   ba996:	ee30 0a00 	vadd.f32	s0, s0, s0
   ba99a:	4770      	bx	lr
   ba99c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   ba9a0:	2900      	cmp	r1, #0
   ba9a2:	bf18      	it	ne
   ba9a4:	eeb0 0a67 	vmovne.f32	s0, s15
   ba9a8:	4770      	bx	lr
   ba9aa:	bf00      	nop
   ba9ac:	007fffff 	.word	0x007fffff
   ba9b0:	7149f2ca 	.word	0x7149f2ca
   ba9b4:	00000000 	.word	0x00000000

000ba9b8 <sqrt>:
   ba9b8:	b538      	push	{r3, r4, r5, lr}
   ba9ba:	ed2d 8b02 	vpush	{d8}
   ba9be:	ec55 4b10 	vmov	r4, r5, d0
   ba9c2:	f000 f833 	bl	baa2c <__ieee754_sqrt>
   ba9c6:	4b18      	ldr	r3, [pc, #96]	; (baa28 <sqrt+0x70>)
   ba9c8:	eeb0 8a40 	vmov.f32	s16, s0
   ba9cc:	eef0 8a60 	vmov.f32	s17, s1
   ba9d0:	f993 3000 	ldrsb.w	r3, [r3]
   ba9d4:	3301      	adds	r3, #1
   ba9d6:	d00d      	beq.n	ba9f4 <sqrt+0x3c>
   ba9d8:	4622      	mov	r2, r4
   ba9da:	462b      	mov	r3, r5
   ba9dc:	4620      	mov	r0, r4
   ba9de:	4629      	mov	r1, r5
   ba9e0:	f000 fd46 	bl	bb470 <__aeabi_dcmpun>
   ba9e4:	b930      	cbnz	r0, ba9f4 <sqrt+0x3c>
   ba9e6:	2200      	movs	r2, #0
   ba9e8:	2300      	movs	r3, #0
   ba9ea:	4620      	mov	r0, r4
   ba9ec:	4629      	mov	r1, r5
   ba9ee:	f000 fd17 	bl	bb420 <__aeabi_dcmplt>
   ba9f2:	b930      	cbnz	r0, baa02 <sqrt+0x4a>
   ba9f4:	eeb0 0a48 	vmov.f32	s0, s16
   ba9f8:	eef0 0a68 	vmov.f32	s1, s17
   ba9fc:	ecbd 8b02 	vpop	{d8}
   baa00:	bd38      	pop	{r3, r4, r5, pc}
   baa02:	f7fd fb4d 	bl	b80a0 <__errno>
   baa06:	2200      	movs	r2, #0
   baa08:	2300      	movs	r3, #0
   baa0a:	2121      	movs	r1, #33	; 0x21
   baa0c:	6001      	str	r1, [r0, #0]
   baa0e:	4610      	mov	r0, r2
   baa10:	4619      	mov	r1, r3
   baa12:	f000 fbbd 	bl	bb190 <__aeabi_ddiv>
   baa16:	ec41 0b18 	vmov	d8, r0, r1
   baa1a:	eeb0 0a48 	vmov.f32	s0, s16
   baa1e:	eef0 0a68 	vmov.f32	s1, s17
   baa22:	ecbd 8b02 	vpop	{d8}
   baa26:	bd38      	pop	{r3, r4, r5, pc}
   baa28:	200352f0 	.word	0x200352f0

000baa2c <__ieee754_sqrt>:
   baa2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   baa30:	4a63      	ldr	r2, [pc, #396]	; (babc0 <__ieee754_sqrt+0x194>)
   baa32:	ec55 4b10 	vmov	r4, r5, d0
   baa36:	43aa      	bics	r2, r5
   baa38:	f000 809f 	beq.w	bab7a <__ieee754_sqrt+0x14e>
   baa3c:	2d00      	cmp	r5, #0
   baa3e:	ee10 ca10 	vmov	ip, s0
   baa42:	462b      	mov	r3, r5
   baa44:	dd54      	ble.n	baaf0 <__ieee754_sqrt+0xc4>
   baa46:	1529      	asrs	r1, r5, #20
   baa48:	d063      	beq.n	bab12 <__ieee754_sqrt+0xe6>
   baa4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   baa4e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   baa52:	07c9      	lsls	r1, r1, #31
   baa54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   baa58:	d404      	bmi.n	baa64 <__ieee754_sqrt+0x38>
   baa5a:	005b      	lsls	r3, r3, #1
   baa5c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   baa60:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   baa64:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   baa68:	2600      	movs	r6, #0
   baa6a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   baa6e:	107f      	asrs	r7, r7, #1
   baa70:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   baa74:	f04f 0e16 	mov.w	lr, #22
   baa78:	4634      	mov	r4, r6
   baa7a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   baa7e:	18a1      	adds	r1, r4, r2
   baa80:	4299      	cmp	r1, r3
   baa82:	dc02      	bgt.n	baa8a <__ieee754_sqrt+0x5e>
   baa84:	1a5b      	subs	r3, r3, r1
   baa86:	188c      	adds	r4, r1, r2
   baa88:	4416      	add	r6, r2
   baa8a:	005b      	lsls	r3, r3, #1
   baa8c:	f1be 0e01 	subs.w	lr, lr, #1
   baa90:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   baa94:	ea4f 0252 	mov.w	r2, r2, lsr #1
   baa98:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   baa9c:	d1ef      	bne.n	baa7e <__ieee754_sqrt+0x52>
   baa9e:	4675      	mov	r5, lr
   baaa0:	2020      	movs	r0, #32
   baaa2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   baaa6:	e00a      	b.n	baabe <__ieee754_sqrt+0x92>
   baaa8:	d044      	beq.n	bab34 <__ieee754_sqrt+0x108>
   baaaa:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   baaae:	3801      	subs	r0, #1
   baab0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   baab4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   baab8:	ea4f 0252 	mov.w	r2, r2, lsr #1
   baabc:	d043      	beq.n	bab46 <__ieee754_sqrt+0x11a>
   baabe:	42a3      	cmp	r3, r4
   baac0:	eb02 010e 	add.w	r1, r2, lr
   baac4:	ddf0      	ble.n	baaa8 <__ieee754_sqrt+0x7c>
   baac6:	2900      	cmp	r1, #0
   baac8:	eb01 0e02 	add.w	lr, r1, r2
   baacc:	db0a      	blt.n	baae4 <__ieee754_sqrt+0xb8>
   baace:	46a0      	mov	r8, r4
   baad0:	1b1b      	subs	r3, r3, r4
   baad2:	4561      	cmp	r1, ip
   baad4:	bf88      	it	hi
   baad6:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   baada:	ebac 0c01 	sub.w	ip, ip, r1
   baade:	4415      	add	r5, r2
   baae0:	4644      	mov	r4, r8
   baae2:	e7e2      	b.n	baaaa <__ieee754_sqrt+0x7e>
   baae4:	f1be 0f00 	cmp.w	lr, #0
   baae8:	dbf1      	blt.n	baace <__ieee754_sqrt+0xa2>
   baaea:	f104 0801 	add.w	r8, r4, #1
   baaee:	e7ef      	b.n	baad0 <__ieee754_sqrt+0xa4>
   baaf0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   baaf4:	4322      	orrs	r2, r4
   baaf6:	d038      	beq.n	bab6a <__ieee754_sqrt+0x13e>
   baaf8:	2d00      	cmp	r5, #0
   baafa:	d14e      	bne.n	bab9a <__ieee754_sqrt+0x16e>
   baafc:	4629      	mov	r1, r5
   baafe:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   bab02:	3915      	subs	r1, #21
   bab04:	4613      	mov	r3, r2
   bab06:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   bab0a:	2a00      	cmp	r2, #0
   bab0c:	d0f7      	beq.n	baafe <__ieee754_sqrt+0xd2>
   bab0e:	02d6      	lsls	r6, r2, #11
   bab10:	d450      	bmi.n	babb4 <__ieee754_sqrt+0x188>
   bab12:	2000      	movs	r0, #0
   bab14:	005b      	lsls	r3, r3, #1
   bab16:	02dd      	lsls	r5, r3, #11
   bab18:	4604      	mov	r4, r0
   bab1a:	f100 0001 	add.w	r0, r0, #1
   bab1e:	d5f9      	bpl.n	bab14 <__ieee754_sqrt+0xe8>
   bab20:	461a      	mov	r2, r3
   bab22:	4663      	mov	r3, ip
   bab24:	fa0c fc00 	lsl.w	ip, ip, r0
   bab28:	f1c0 0020 	rsb	r0, r0, #32
   bab2c:	40c3      	lsrs	r3, r0
   bab2e:	1b09      	subs	r1, r1, r4
   bab30:	4313      	orrs	r3, r2
   bab32:	e78a      	b.n	baa4a <__ieee754_sqrt+0x1e>
   bab34:	4561      	cmp	r1, ip
   bab36:	d8b8      	bhi.n	baaaa <__ieee754_sqrt+0x7e>
   bab38:	2900      	cmp	r1, #0
   bab3a:	eb01 0e02 	add.w	lr, r1, r2
   bab3e:	dbd1      	blt.n	baae4 <__ieee754_sqrt+0xb8>
   bab40:	4698      	mov	r8, r3
   bab42:	2300      	movs	r3, #0
   bab44:	e7c9      	b.n	baada <__ieee754_sqrt+0xae>
   bab46:	ea53 030c 	orrs.w	r3, r3, ip
   bab4a:	d110      	bne.n	bab6e <__ieee754_sqrt+0x142>
   bab4c:	0868      	lsrs	r0, r5, #1
   bab4e:	1071      	asrs	r1, r6, #1
   bab50:	07f3      	lsls	r3, r6, #31
   bab52:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   bab56:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   bab5a:	bf48      	it	mi
   bab5c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   bab60:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   bab64:	4602      	mov	r2, r0
   bab66:	ec43 2b10 	vmov	d0, r2, r3
   bab6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bab6e:	1c6a      	adds	r2, r5, #1
   bab70:	bf16      	itet	ne
   bab72:	1c68      	addne	r0, r5, #1
   bab74:	3601      	addeq	r6, #1
   bab76:	0840      	lsrne	r0, r0, #1
   bab78:	e7e9      	b.n	bab4e <__ieee754_sqrt+0x122>
   bab7a:	ee10 2a10 	vmov	r2, s0
   bab7e:	ee10 0a10 	vmov	r0, s0
   bab82:	462b      	mov	r3, r5
   bab84:	4629      	mov	r1, r5
   bab86:	f000 f9d9 	bl	baf3c <__aeabi_dmul>
   bab8a:	4622      	mov	r2, r4
   bab8c:	462b      	mov	r3, r5
   bab8e:	f000 f81f 	bl	babd0 <__adddf3>
   bab92:	ec41 0b10 	vmov	d0, r0, r1
   bab96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bab9a:	ee10 2a10 	vmov	r2, s0
   bab9e:	4620      	mov	r0, r4
   baba0:	4629      	mov	r1, r5
   baba2:	f000 f813 	bl	babcc <__aeabi_dsub>
   baba6:	4602      	mov	r2, r0
   baba8:	460b      	mov	r3, r1
   babaa:	f000 faf1 	bl	bb190 <__aeabi_ddiv>
   babae:	ec41 0b10 	vmov	d0, r0, r1
   babb2:	e7da      	b.n	bab6a <__ieee754_sqrt+0x13e>
   babb4:	4663      	mov	r3, ip
   babb6:	2020      	movs	r0, #32
   babb8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   babbc:	e7b6      	b.n	bab2c <__ieee754_sqrt+0x100>
   babbe:	bf00      	nop
   babc0:	7ff00000 	.word	0x7ff00000

000babc4 <__aeabi_drsub>:
   babc4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   babc8:	e002      	b.n	babd0 <__adddf3>
   babca:	bf00      	nop

000babcc <__aeabi_dsub>:
   babcc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000babd0 <__adddf3>:
   babd0:	b530      	push	{r4, r5, lr}
   babd2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   babd6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   babda:	ea94 0f05 	teq	r4, r5
   babde:	bf08      	it	eq
   babe0:	ea90 0f02 	teqeq	r0, r2
   babe4:	bf1f      	itttt	ne
   babe6:	ea54 0c00 	orrsne.w	ip, r4, r0
   babea:	ea55 0c02 	orrsne.w	ip, r5, r2
   babee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   babf2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   babf6:	f000 80e2 	beq.w	badbe <__adddf3+0x1ee>
   babfa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   babfe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bac02:	bfb8      	it	lt
   bac04:	426d      	neglt	r5, r5
   bac06:	dd0c      	ble.n	bac22 <__adddf3+0x52>
   bac08:	442c      	add	r4, r5
   bac0a:	ea80 0202 	eor.w	r2, r0, r2
   bac0e:	ea81 0303 	eor.w	r3, r1, r3
   bac12:	ea82 0000 	eor.w	r0, r2, r0
   bac16:	ea83 0101 	eor.w	r1, r3, r1
   bac1a:	ea80 0202 	eor.w	r2, r0, r2
   bac1e:	ea81 0303 	eor.w	r3, r1, r3
   bac22:	2d36      	cmp	r5, #54	; 0x36
   bac24:	bf88      	it	hi
   bac26:	bd30      	pophi	{r4, r5, pc}
   bac28:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bac2c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bac30:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bac34:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bac38:	d002      	beq.n	bac40 <__adddf3+0x70>
   bac3a:	4240      	negs	r0, r0
   bac3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bac40:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bac44:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bac48:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bac4c:	d002      	beq.n	bac54 <__adddf3+0x84>
   bac4e:	4252      	negs	r2, r2
   bac50:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bac54:	ea94 0f05 	teq	r4, r5
   bac58:	f000 80a7 	beq.w	badaa <__adddf3+0x1da>
   bac5c:	f1a4 0401 	sub.w	r4, r4, #1
   bac60:	f1d5 0e20 	rsbs	lr, r5, #32
   bac64:	db0d      	blt.n	bac82 <__adddf3+0xb2>
   bac66:	fa02 fc0e 	lsl.w	ip, r2, lr
   bac6a:	fa22 f205 	lsr.w	r2, r2, r5
   bac6e:	1880      	adds	r0, r0, r2
   bac70:	f141 0100 	adc.w	r1, r1, #0
   bac74:	fa03 f20e 	lsl.w	r2, r3, lr
   bac78:	1880      	adds	r0, r0, r2
   bac7a:	fa43 f305 	asr.w	r3, r3, r5
   bac7e:	4159      	adcs	r1, r3
   bac80:	e00e      	b.n	baca0 <__adddf3+0xd0>
   bac82:	f1a5 0520 	sub.w	r5, r5, #32
   bac86:	f10e 0e20 	add.w	lr, lr, #32
   bac8a:	2a01      	cmp	r2, #1
   bac8c:	fa03 fc0e 	lsl.w	ip, r3, lr
   bac90:	bf28      	it	cs
   bac92:	f04c 0c02 	orrcs.w	ip, ip, #2
   bac96:	fa43 f305 	asr.w	r3, r3, r5
   bac9a:	18c0      	adds	r0, r0, r3
   bac9c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   baca0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   baca4:	d507      	bpl.n	bacb6 <__adddf3+0xe6>
   baca6:	f04f 0e00 	mov.w	lr, #0
   bacaa:	f1dc 0c00 	rsbs	ip, ip, #0
   bacae:	eb7e 0000 	sbcs.w	r0, lr, r0
   bacb2:	eb6e 0101 	sbc.w	r1, lr, r1
   bacb6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bacba:	d31b      	bcc.n	bacf4 <__adddf3+0x124>
   bacbc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bacc0:	d30c      	bcc.n	bacdc <__adddf3+0x10c>
   bacc2:	0849      	lsrs	r1, r1, #1
   bacc4:	ea5f 0030 	movs.w	r0, r0, rrx
   bacc8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   baccc:	f104 0401 	add.w	r4, r4, #1
   bacd0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bacd4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bacd8:	f080 809a 	bcs.w	bae10 <__adddf3+0x240>
   bacdc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bace0:	bf08      	it	eq
   bace2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bace6:	f150 0000 	adcs.w	r0, r0, #0
   bacea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bacee:	ea41 0105 	orr.w	r1, r1, r5
   bacf2:	bd30      	pop	{r4, r5, pc}
   bacf4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bacf8:	4140      	adcs	r0, r0
   bacfa:	eb41 0101 	adc.w	r1, r1, r1
   bacfe:	3c01      	subs	r4, #1
   bad00:	bf28      	it	cs
   bad02:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bad06:	d2e9      	bcs.n	bacdc <__adddf3+0x10c>
   bad08:	f091 0f00 	teq	r1, #0
   bad0c:	bf04      	itt	eq
   bad0e:	4601      	moveq	r1, r0
   bad10:	2000      	moveq	r0, #0
   bad12:	fab1 f381 	clz	r3, r1
   bad16:	bf08      	it	eq
   bad18:	3320      	addeq	r3, #32
   bad1a:	f1a3 030b 	sub.w	r3, r3, #11
   bad1e:	f1b3 0220 	subs.w	r2, r3, #32
   bad22:	da0c      	bge.n	bad3e <__adddf3+0x16e>
   bad24:	320c      	adds	r2, #12
   bad26:	dd08      	ble.n	bad3a <__adddf3+0x16a>
   bad28:	f102 0c14 	add.w	ip, r2, #20
   bad2c:	f1c2 020c 	rsb	r2, r2, #12
   bad30:	fa01 f00c 	lsl.w	r0, r1, ip
   bad34:	fa21 f102 	lsr.w	r1, r1, r2
   bad38:	e00c      	b.n	bad54 <__adddf3+0x184>
   bad3a:	f102 0214 	add.w	r2, r2, #20
   bad3e:	bfd8      	it	le
   bad40:	f1c2 0c20 	rsble	ip, r2, #32
   bad44:	fa01 f102 	lsl.w	r1, r1, r2
   bad48:	fa20 fc0c 	lsr.w	ip, r0, ip
   bad4c:	bfdc      	itt	le
   bad4e:	ea41 010c 	orrle.w	r1, r1, ip
   bad52:	4090      	lslle	r0, r2
   bad54:	1ae4      	subs	r4, r4, r3
   bad56:	bfa2      	ittt	ge
   bad58:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bad5c:	4329      	orrge	r1, r5
   bad5e:	bd30      	popge	{r4, r5, pc}
   bad60:	ea6f 0404 	mvn.w	r4, r4
   bad64:	3c1f      	subs	r4, #31
   bad66:	da1c      	bge.n	bada2 <__adddf3+0x1d2>
   bad68:	340c      	adds	r4, #12
   bad6a:	dc0e      	bgt.n	bad8a <__adddf3+0x1ba>
   bad6c:	f104 0414 	add.w	r4, r4, #20
   bad70:	f1c4 0220 	rsb	r2, r4, #32
   bad74:	fa20 f004 	lsr.w	r0, r0, r4
   bad78:	fa01 f302 	lsl.w	r3, r1, r2
   bad7c:	ea40 0003 	orr.w	r0, r0, r3
   bad80:	fa21 f304 	lsr.w	r3, r1, r4
   bad84:	ea45 0103 	orr.w	r1, r5, r3
   bad88:	bd30      	pop	{r4, r5, pc}
   bad8a:	f1c4 040c 	rsb	r4, r4, #12
   bad8e:	f1c4 0220 	rsb	r2, r4, #32
   bad92:	fa20 f002 	lsr.w	r0, r0, r2
   bad96:	fa01 f304 	lsl.w	r3, r1, r4
   bad9a:	ea40 0003 	orr.w	r0, r0, r3
   bad9e:	4629      	mov	r1, r5
   bada0:	bd30      	pop	{r4, r5, pc}
   bada2:	fa21 f004 	lsr.w	r0, r1, r4
   bada6:	4629      	mov	r1, r5
   bada8:	bd30      	pop	{r4, r5, pc}
   badaa:	f094 0f00 	teq	r4, #0
   badae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   badb2:	bf06      	itte	eq
   badb4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   badb8:	3401      	addeq	r4, #1
   badba:	3d01      	subne	r5, #1
   badbc:	e74e      	b.n	bac5c <__adddf3+0x8c>
   badbe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   badc2:	bf18      	it	ne
   badc4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   badc8:	d029      	beq.n	bae1e <__adddf3+0x24e>
   badca:	ea94 0f05 	teq	r4, r5
   badce:	bf08      	it	eq
   badd0:	ea90 0f02 	teqeq	r0, r2
   badd4:	d005      	beq.n	bade2 <__adddf3+0x212>
   badd6:	ea54 0c00 	orrs.w	ip, r4, r0
   badda:	bf04      	itt	eq
   baddc:	4619      	moveq	r1, r3
   badde:	4610      	moveq	r0, r2
   bade0:	bd30      	pop	{r4, r5, pc}
   bade2:	ea91 0f03 	teq	r1, r3
   bade6:	bf1e      	ittt	ne
   bade8:	2100      	movne	r1, #0
   badea:	2000      	movne	r0, #0
   badec:	bd30      	popne	{r4, r5, pc}
   badee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   badf2:	d105      	bne.n	bae00 <__adddf3+0x230>
   badf4:	0040      	lsls	r0, r0, #1
   badf6:	4149      	adcs	r1, r1
   badf8:	bf28      	it	cs
   badfa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   badfe:	bd30      	pop	{r4, r5, pc}
   bae00:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bae04:	bf3c      	itt	cc
   bae06:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bae0a:	bd30      	popcc	{r4, r5, pc}
   bae0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bae10:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bae14:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bae18:	f04f 0000 	mov.w	r0, #0
   bae1c:	bd30      	pop	{r4, r5, pc}
   bae1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bae22:	bf1a      	itte	ne
   bae24:	4619      	movne	r1, r3
   bae26:	4610      	movne	r0, r2
   bae28:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bae2c:	bf1c      	itt	ne
   bae2e:	460b      	movne	r3, r1
   bae30:	4602      	movne	r2, r0
   bae32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bae36:	bf06      	itte	eq
   bae38:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bae3c:	ea91 0f03 	teqeq	r1, r3
   bae40:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bae44:	bd30      	pop	{r4, r5, pc}
   bae46:	bf00      	nop

000bae48 <__aeabi_ui2d>:
   bae48:	f090 0f00 	teq	r0, #0
   bae4c:	bf04      	itt	eq
   bae4e:	2100      	moveq	r1, #0
   bae50:	4770      	bxeq	lr
   bae52:	b530      	push	{r4, r5, lr}
   bae54:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bae58:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bae5c:	f04f 0500 	mov.w	r5, #0
   bae60:	f04f 0100 	mov.w	r1, #0
   bae64:	e750      	b.n	bad08 <__adddf3+0x138>
   bae66:	bf00      	nop

000bae68 <__aeabi_i2d>:
   bae68:	f090 0f00 	teq	r0, #0
   bae6c:	bf04      	itt	eq
   bae6e:	2100      	moveq	r1, #0
   bae70:	4770      	bxeq	lr
   bae72:	b530      	push	{r4, r5, lr}
   bae74:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bae78:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bae7c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bae80:	bf48      	it	mi
   bae82:	4240      	negmi	r0, r0
   bae84:	f04f 0100 	mov.w	r1, #0
   bae88:	e73e      	b.n	bad08 <__adddf3+0x138>
   bae8a:	bf00      	nop

000bae8c <__aeabi_f2d>:
   bae8c:	0042      	lsls	r2, r0, #1
   bae8e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bae92:	ea4f 0131 	mov.w	r1, r1, rrx
   bae96:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bae9a:	bf1f      	itttt	ne
   bae9c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   baea0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   baea4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   baea8:	4770      	bxne	lr
   baeaa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   baeae:	bf08      	it	eq
   baeb0:	4770      	bxeq	lr
   baeb2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   baeb6:	bf04      	itt	eq
   baeb8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   baebc:	4770      	bxeq	lr
   baebe:	b530      	push	{r4, r5, lr}
   baec0:	f44f 7460 	mov.w	r4, #896	; 0x380
   baec4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   baec8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   baecc:	e71c      	b.n	bad08 <__adddf3+0x138>
   baece:	bf00      	nop

000baed0 <__aeabi_ul2d>:
   baed0:	ea50 0201 	orrs.w	r2, r0, r1
   baed4:	bf08      	it	eq
   baed6:	4770      	bxeq	lr
   baed8:	b530      	push	{r4, r5, lr}
   baeda:	f04f 0500 	mov.w	r5, #0
   baede:	e00a      	b.n	baef6 <__aeabi_l2d+0x16>

000baee0 <__aeabi_l2d>:
   baee0:	ea50 0201 	orrs.w	r2, r0, r1
   baee4:	bf08      	it	eq
   baee6:	4770      	bxeq	lr
   baee8:	b530      	push	{r4, r5, lr}
   baeea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   baeee:	d502      	bpl.n	baef6 <__aeabi_l2d+0x16>
   baef0:	4240      	negs	r0, r0
   baef2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   baef6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   baefa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   baefe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   baf02:	f43f aed8 	beq.w	bacb6 <__adddf3+0xe6>
   baf06:	f04f 0203 	mov.w	r2, #3
   baf0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   baf0e:	bf18      	it	ne
   baf10:	3203      	addne	r2, #3
   baf12:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   baf16:	bf18      	it	ne
   baf18:	3203      	addne	r2, #3
   baf1a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   baf1e:	f1c2 0320 	rsb	r3, r2, #32
   baf22:	fa00 fc03 	lsl.w	ip, r0, r3
   baf26:	fa20 f002 	lsr.w	r0, r0, r2
   baf2a:	fa01 fe03 	lsl.w	lr, r1, r3
   baf2e:	ea40 000e 	orr.w	r0, r0, lr
   baf32:	fa21 f102 	lsr.w	r1, r1, r2
   baf36:	4414      	add	r4, r2
   baf38:	e6bd      	b.n	bacb6 <__adddf3+0xe6>
   baf3a:	bf00      	nop

000baf3c <__aeabi_dmul>:
   baf3c:	b570      	push	{r4, r5, r6, lr}
   baf3e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   baf42:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   baf46:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   baf4a:	bf1d      	ittte	ne
   baf4c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   baf50:	ea94 0f0c 	teqne	r4, ip
   baf54:	ea95 0f0c 	teqne	r5, ip
   baf58:	f000 f8de 	bleq	bb118 <__aeabi_dmul+0x1dc>
   baf5c:	442c      	add	r4, r5
   baf5e:	ea81 0603 	eor.w	r6, r1, r3
   baf62:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   baf66:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   baf6a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   baf6e:	bf18      	it	ne
   baf70:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   baf74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   baf78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   baf7c:	d038      	beq.n	baff0 <__aeabi_dmul+0xb4>
   baf7e:	fba0 ce02 	umull	ip, lr, r0, r2
   baf82:	f04f 0500 	mov.w	r5, #0
   baf86:	fbe1 e502 	umlal	lr, r5, r1, r2
   baf8a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   baf8e:	fbe0 e503 	umlal	lr, r5, r0, r3
   baf92:	f04f 0600 	mov.w	r6, #0
   baf96:	fbe1 5603 	umlal	r5, r6, r1, r3
   baf9a:	f09c 0f00 	teq	ip, #0
   baf9e:	bf18      	it	ne
   bafa0:	f04e 0e01 	orrne.w	lr, lr, #1
   bafa4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bafa8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bafac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bafb0:	d204      	bcs.n	bafbc <__aeabi_dmul+0x80>
   bafb2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bafb6:	416d      	adcs	r5, r5
   bafb8:	eb46 0606 	adc.w	r6, r6, r6
   bafbc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bafc0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bafc4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bafc8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bafcc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bafd0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bafd4:	bf88      	it	hi
   bafd6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bafda:	d81e      	bhi.n	bb01a <__aeabi_dmul+0xde>
   bafdc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bafe0:	bf08      	it	eq
   bafe2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bafe6:	f150 0000 	adcs.w	r0, r0, #0
   bafea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bafee:	bd70      	pop	{r4, r5, r6, pc}
   baff0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   baff4:	ea46 0101 	orr.w	r1, r6, r1
   baff8:	ea40 0002 	orr.w	r0, r0, r2
   baffc:	ea81 0103 	eor.w	r1, r1, r3
   bb000:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bb004:	bfc2      	ittt	gt
   bb006:	ebd4 050c 	rsbsgt	r5, r4, ip
   bb00a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bb00e:	bd70      	popgt	{r4, r5, r6, pc}
   bb010:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb014:	f04f 0e00 	mov.w	lr, #0
   bb018:	3c01      	subs	r4, #1
   bb01a:	f300 80ab 	bgt.w	bb174 <__aeabi_dmul+0x238>
   bb01e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bb022:	bfde      	ittt	le
   bb024:	2000      	movle	r0, #0
   bb026:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bb02a:	bd70      	pople	{r4, r5, r6, pc}
   bb02c:	f1c4 0400 	rsb	r4, r4, #0
   bb030:	3c20      	subs	r4, #32
   bb032:	da35      	bge.n	bb0a0 <__aeabi_dmul+0x164>
   bb034:	340c      	adds	r4, #12
   bb036:	dc1b      	bgt.n	bb070 <__aeabi_dmul+0x134>
   bb038:	f104 0414 	add.w	r4, r4, #20
   bb03c:	f1c4 0520 	rsb	r5, r4, #32
   bb040:	fa00 f305 	lsl.w	r3, r0, r5
   bb044:	fa20 f004 	lsr.w	r0, r0, r4
   bb048:	fa01 f205 	lsl.w	r2, r1, r5
   bb04c:	ea40 0002 	orr.w	r0, r0, r2
   bb050:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bb054:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bb058:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bb05c:	fa21 f604 	lsr.w	r6, r1, r4
   bb060:	eb42 0106 	adc.w	r1, r2, r6
   bb064:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb068:	bf08      	it	eq
   bb06a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb06e:	bd70      	pop	{r4, r5, r6, pc}
   bb070:	f1c4 040c 	rsb	r4, r4, #12
   bb074:	f1c4 0520 	rsb	r5, r4, #32
   bb078:	fa00 f304 	lsl.w	r3, r0, r4
   bb07c:	fa20 f005 	lsr.w	r0, r0, r5
   bb080:	fa01 f204 	lsl.w	r2, r1, r4
   bb084:	ea40 0002 	orr.w	r0, r0, r2
   bb088:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb08c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bb090:	f141 0100 	adc.w	r1, r1, #0
   bb094:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb098:	bf08      	it	eq
   bb09a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb09e:	bd70      	pop	{r4, r5, r6, pc}
   bb0a0:	f1c4 0520 	rsb	r5, r4, #32
   bb0a4:	fa00 f205 	lsl.w	r2, r0, r5
   bb0a8:	ea4e 0e02 	orr.w	lr, lr, r2
   bb0ac:	fa20 f304 	lsr.w	r3, r0, r4
   bb0b0:	fa01 f205 	lsl.w	r2, r1, r5
   bb0b4:	ea43 0302 	orr.w	r3, r3, r2
   bb0b8:	fa21 f004 	lsr.w	r0, r1, r4
   bb0bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb0c0:	fa21 f204 	lsr.w	r2, r1, r4
   bb0c4:	ea20 0002 	bic.w	r0, r0, r2
   bb0c8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bb0cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb0d0:	bf08      	it	eq
   bb0d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb0d6:	bd70      	pop	{r4, r5, r6, pc}
   bb0d8:	f094 0f00 	teq	r4, #0
   bb0dc:	d10f      	bne.n	bb0fe <__aeabi_dmul+0x1c2>
   bb0de:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bb0e2:	0040      	lsls	r0, r0, #1
   bb0e4:	eb41 0101 	adc.w	r1, r1, r1
   bb0e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb0ec:	bf08      	it	eq
   bb0ee:	3c01      	subeq	r4, #1
   bb0f0:	d0f7      	beq.n	bb0e2 <__aeabi_dmul+0x1a6>
   bb0f2:	ea41 0106 	orr.w	r1, r1, r6
   bb0f6:	f095 0f00 	teq	r5, #0
   bb0fa:	bf18      	it	ne
   bb0fc:	4770      	bxne	lr
   bb0fe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bb102:	0052      	lsls	r2, r2, #1
   bb104:	eb43 0303 	adc.w	r3, r3, r3
   bb108:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bb10c:	bf08      	it	eq
   bb10e:	3d01      	subeq	r5, #1
   bb110:	d0f7      	beq.n	bb102 <__aeabi_dmul+0x1c6>
   bb112:	ea43 0306 	orr.w	r3, r3, r6
   bb116:	4770      	bx	lr
   bb118:	ea94 0f0c 	teq	r4, ip
   bb11c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bb120:	bf18      	it	ne
   bb122:	ea95 0f0c 	teqne	r5, ip
   bb126:	d00c      	beq.n	bb142 <__aeabi_dmul+0x206>
   bb128:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb12c:	bf18      	it	ne
   bb12e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb132:	d1d1      	bne.n	bb0d8 <__aeabi_dmul+0x19c>
   bb134:	ea81 0103 	eor.w	r1, r1, r3
   bb138:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb13c:	f04f 0000 	mov.w	r0, #0
   bb140:	bd70      	pop	{r4, r5, r6, pc}
   bb142:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb146:	bf06      	itte	eq
   bb148:	4610      	moveq	r0, r2
   bb14a:	4619      	moveq	r1, r3
   bb14c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb150:	d019      	beq.n	bb186 <__aeabi_dmul+0x24a>
   bb152:	ea94 0f0c 	teq	r4, ip
   bb156:	d102      	bne.n	bb15e <__aeabi_dmul+0x222>
   bb158:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bb15c:	d113      	bne.n	bb186 <__aeabi_dmul+0x24a>
   bb15e:	ea95 0f0c 	teq	r5, ip
   bb162:	d105      	bne.n	bb170 <__aeabi_dmul+0x234>
   bb164:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bb168:	bf1c      	itt	ne
   bb16a:	4610      	movne	r0, r2
   bb16c:	4619      	movne	r1, r3
   bb16e:	d10a      	bne.n	bb186 <__aeabi_dmul+0x24a>
   bb170:	ea81 0103 	eor.w	r1, r1, r3
   bb174:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb178:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bb17c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bb180:	f04f 0000 	mov.w	r0, #0
   bb184:	bd70      	pop	{r4, r5, r6, pc}
   bb186:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bb18a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bb18e:	bd70      	pop	{r4, r5, r6, pc}

000bb190 <__aeabi_ddiv>:
   bb190:	b570      	push	{r4, r5, r6, lr}
   bb192:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bb196:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bb19a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bb19e:	bf1d      	ittte	ne
   bb1a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bb1a4:	ea94 0f0c 	teqne	r4, ip
   bb1a8:	ea95 0f0c 	teqne	r5, ip
   bb1ac:	f000 f8a7 	bleq	bb2fe <__aeabi_ddiv+0x16e>
   bb1b0:	eba4 0405 	sub.w	r4, r4, r5
   bb1b4:	ea81 0e03 	eor.w	lr, r1, r3
   bb1b8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bb1bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bb1c0:	f000 8088 	beq.w	bb2d4 <__aeabi_ddiv+0x144>
   bb1c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bb1c8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bb1cc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bb1d0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bb1d4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bb1d8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bb1dc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bb1e0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bb1e4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bb1e8:	429d      	cmp	r5, r3
   bb1ea:	bf08      	it	eq
   bb1ec:	4296      	cmpeq	r6, r2
   bb1ee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bb1f2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bb1f6:	d202      	bcs.n	bb1fe <__aeabi_ddiv+0x6e>
   bb1f8:	085b      	lsrs	r3, r3, #1
   bb1fa:	ea4f 0232 	mov.w	r2, r2, rrx
   bb1fe:	1ab6      	subs	r6, r6, r2
   bb200:	eb65 0503 	sbc.w	r5, r5, r3
   bb204:	085b      	lsrs	r3, r3, #1
   bb206:	ea4f 0232 	mov.w	r2, r2, rrx
   bb20a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bb20e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bb212:	ebb6 0e02 	subs.w	lr, r6, r2
   bb216:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb21a:	bf22      	ittt	cs
   bb21c:	1ab6      	subcs	r6, r6, r2
   bb21e:	4675      	movcs	r5, lr
   bb220:	ea40 000c 	orrcs.w	r0, r0, ip
   bb224:	085b      	lsrs	r3, r3, #1
   bb226:	ea4f 0232 	mov.w	r2, r2, rrx
   bb22a:	ebb6 0e02 	subs.w	lr, r6, r2
   bb22e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb232:	bf22      	ittt	cs
   bb234:	1ab6      	subcs	r6, r6, r2
   bb236:	4675      	movcs	r5, lr
   bb238:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bb23c:	085b      	lsrs	r3, r3, #1
   bb23e:	ea4f 0232 	mov.w	r2, r2, rrx
   bb242:	ebb6 0e02 	subs.w	lr, r6, r2
   bb246:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb24a:	bf22      	ittt	cs
   bb24c:	1ab6      	subcs	r6, r6, r2
   bb24e:	4675      	movcs	r5, lr
   bb250:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bb254:	085b      	lsrs	r3, r3, #1
   bb256:	ea4f 0232 	mov.w	r2, r2, rrx
   bb25a:	ebb6 0e02 	subs.w	lr, r6, r2
   bb25e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb262:	bf22      	ittt	cs
   bb264:	1ab6      	subcs	r6, r6, r2
   bb266:	4675      	movcs	r5, lr
   bb268:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bb26c:	ea55 0e06 	orrs.w	lr, r5, r6
   bb270:	d018      	beq.n	bb2a4 <__aeabi_ddiv+0x114>
   bb272:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bb276:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bb27a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bb27e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bb282:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bb286:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bb28a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bb28e:	d1c0      	bne.n	bb212 <__aeabi_ddiv+0x82>
   bb290:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb294:	d10b      	bne.n	bb2ae <__aeabi_ddiv+0x11e>
   bb296:	ea41 0100 	orr.w	r1, r1, r0
   bb29a:	f04f 0000 	mov.w	r0, #0
   bb29e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bb2a2:	e7b6      	b.n	bb212 <__aeabi_ddiv+0x82>
   bb2a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb2a8:	bf04      	itt	eq
   bb2aa:	4301      	orreq	r1, r0
   bb2ac:	2000      	moveq	r0, #0
   bb2ae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bb2b2:	bf88      	it	hi
   bb2b4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bb2b8:	f63f aeaf 	bhi.w	bb01a <__aeabi_dmul+0xde>
   bb2bc:	ebb5 0c03 	subs.w	ip, r5, r3
   bb2c0:	bf04      	itt	eq
   bb2c2:	ebb6 0c02 	subseq.w	ip, r6, r2
   bb2c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bb2ca:	f150 0000 	adcs.w	r0, r0, #0
   bb2ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb2d2:	bd70      	pop	{r4, r5, r6, pc}
   bb2d4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bb2d8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bb2dc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bb2e0:	bfc2      	ittt	gt
   bb2e2:	ebd4 050c 	rsbsgt	r5, r4, ip
   bb2e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bb2ea:	bd70      	popgt	{r4, r5, r6, pc}
   bb2ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb2f0:	f04f 0e00 	mov.w	lr, #0
   bb2f4:	3c01      	subs	r4, #1
   bb2f6:	e690      	b.n	bb01a <__aeabi_dmul+0xde>
   bb2f8:	ea45 0e06 	orr.w	lr, r5, r6
   bb2fc:	e68d      	b.n	bb01a <__aeabi_dmul+0xde>
   bb2fe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bb302:	ea94 0f0c 	teq	r4, ip
   bb306:	bf08      	it	eq
   bb308:	ea95 0f0c 	teqeq	r5, ip
   bb30c:	f43f af3b 	beq.w	bb186 <__aeabi_dmul+0x24a>
   bb310:	ea94 0f0c 	teq	r4, ip
   bb314:	d10a      	bne.n	bb32c <__aeabi_ddiv+0x19c>
   bb316:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bb31a:	f47f af34 	bne.w	bb186 <__aeabi_dmul+0x24a>
   bb31e:	ea95 0f0c 	teq	r5, ip
   bb322:	f47f af25 	bne.w	bb170 <__aeabi_dmul+0x234>
   bb326:	4610      	mov	r0, r2
   bb328:	4619      	mov	r1, r3
   bb32a:	e72c      	b.n	bb186 <__aeabi_dmul+0x24a>
   bb32c:	ea95 0f0c 	teq	r5, ip
   bb330:	d106      	bne.n	bb340 <__aeabi_ddiv+0x1b0>
   bb332:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bb336:	f43f aefd 	beq.w	bb134 <__aeabi_dmul+0x1f8>
   bb33a:	4610      	mov	r0, r2
   bb33c:	4619      	mov	r1, r3
   bb33e:	e722      	b.n	bb186 <__aeabi_dmul+0x24a>
   bb340:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb344:	bf18      	it	ne
   bb346:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb34a:	f47f aec5 	bne.w	bb0d8 <__aeabi_dmul+0x19c>
   bb34e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bb352:	f47f af0d 	bne.w	bb170 <__aeabi_dmul+0x234>
   bb356:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bb35a:	f47f aeeb 	bne.w	bb134 <__aeabi_dmul+0x1f8>
   bb35e:	e712      	b.n	bb186 <__aeabi_dmul+0x24a>

000bb360 <__gedf2>:
   bb360:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bb364:	e006      	b.n	bb374 <__cmpdf2+0x4>
   bb366:	bf00      	nop

000bb368 <__ledf2>:
   bb368:	f04f 0c01 	mov.w	ip, #1
   bb36c:	e002      	b.n	bb374 <__cmpdf2+0x4>
   bb36e:	bf00      	nop

000bb370 <__cmpdf2>:
   bb370:	f04f 0c01 	mov.w	ip, #1
   bb374:	f84d cd04 	str.w	ip, [sp, #-4]!
   bb378:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb37c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb380:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb384:	bf18      	it	ne
   bb386:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bb38a:	d01b      	beq.n	bb3c4 <__cmpdf2+0x54>
   bb38c:	b001      	add	sp, #4
   bb38e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bb392:	bf0c      	ite	eq
   bb394:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bb398:	ea91 0f03 	teqne	r1, r3
   bb39c:	bf02      	ittt	eq
   bb39e:	ea90 0f02 	teqeq	r0, r2
   bb3a2:	2000      	moveq	r0, #0
   bb3a4:	4770      	bxeq	lr
   bb3a6:	f110 0f00 	cmn.w	r0, #0
   bb3aa:	ea91 0f03 	teq	r1, r3
   bb3ae:	bf58      	it	pl
   bb3b0:	4299      	cmppl	r1, r3
   bb3b2:	bf08      	it	eq
   bb3b4:	4290      	cmpeq	r0, r2
   bb3b6:	bf2c      	ite	cs
   bb3b8:	17d8      	asrcs	r0, r3, #31
   bb3ba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bb3be:	f040 0001 	orr.w	r0, r0, #1
   bb3c2:	4770      	bx	lr
   bb3c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb3c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb3cc:	d102      	bne.n	bb3d4 <__cmpdf2+0x64>
   bb3ce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bb3d2:	d107      	bne.n	bb3e4 <__cmpdf2+0x74>
   bb3d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb3d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb3dc:	d1d6      	bne.n	bb38c <__cmpdf2+0x1c>
   bb3de:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bb3e2:	d0d3      	beq.n	bb38c <__cmpdf2+0x1c>
   bb3e4:	f85d 0b04 	ldr.w	r0, [sp], #4
   bb3e8:	4770      	bx	lr
   bb3ea:	bf00      	nop

000bb3ec <__aeabi_cdrcmple>:
   bb3ec:	4684      	mov	ip, r0
   bb3ee:	4610      	mov	r0, r2
   bb3f0:	4662      	mov	r2, ip
   bb3f2:	468c      	mov	ip, r1
   bb3f4:	4619      	mov	r1, r3
   bb3f6:	4663      	mov	r3, ip
   bb3f8:	e000      	b.n	bb3fc <__aeabi_cdcmpeq>
   bb3fa:	bf00      	nop

000bb3fc <__aeabi_cdcmpeq>:
   bb3fc:	b501      	push	{r0, lr}
   bb3fe:	f7ff ffb7 	bl	bb370 <__cmpdf2>
   bb402:	2800      	cmp	r0, #0
   bb404:	bf48      	it	mi
   bb406:	f110 0f00 	cmnmi.w	r0, #0
   bb40a:	bd01      	pop	{r0, pc}

000bb40c <__aeabi_dcmpeq>:
   bb40c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb410:	f7ff fff4 	bl	bb3fc <__aeabi_cdcmpeq>
   bb414:	bf0c      	ite	eq
   bb416:	2001      	moveq	r0, #1
   bb418:	2000      	movne	r0, #0
   bb41a:	f85d fb08 	ldr.w	pc, [sp], #8
   bb41e:	bf00      	nop

000bb420 <__aeabi_dcmplt>:
   bb420:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb424:	f7ff ffea 	bl	bb3fc <__aeabi_cdcmpeq>
   bb428:	bf34      	ite	cc
   bb42a:	2001      	movcc	r0, #1
   bb42c:	2000      	movcs	r0, #0
   bb42e:	f85d fb08 	ldr.w	pc, [sp], #8
   bb432:	bf00      	nop

000bb434 <__aeabi_dcmple>:
   bb434:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb438:	f7ff ffe0 	bl	bb3fc <__aeabi_cdcmpeq>
   bb43c:	bf94      	ite	ls
   bb43e:	2001      	movls	r0, #1
   bb440:	2000      	movhi	r0, #0
   bb442:	f85d fb08 	ldr.w	pc, [sp], #8
   bb446:	bf00      	nop

000bb448 <__aeabi_dcmpge>:
   bb448:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb44c:	f7ff ffce 	bl	bb3ec <__aeabi_cdrcmple>
   bb450:	bf94      	ite	ls
   bb452:	2001      	movls	r0, #1
   bb454:	2000      	movhi	r0, #0
   bb456:	f85d fb08 	ldr.w	pc, [sp], #8
   bb45a:	bf00      	nop

000bb45c <__aeabi_dcmpgt>:
   bb45c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb460:	f7ff ffc4 	bl	bb3ec <__aeabi_cdrcmple>
   bb464:	bf34      	ite	cc
   bb466:	2001      	movcc	r0, #1
   bb468:	2000      	movcs	r0, #0
   bb46a:	f85d fb08 	ldr.w	pc, [sp], #8
   bb46e:	bf00      	nop

000bb470 <__aeabi_dcmpun>:
   bb470:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb474:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb478:	d102      	bne.n	bb480 <__aeabi_dcmpun+0x10>
   bb47a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bb47e:	d10a      	bne.n	bb496 <__aeabi_dcmpun+0x26>
   bb480:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb484:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb488:	d102      	bne.n	bb490 <__aeabi_dcmpun+0x20>
   bb48a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bb48e:	d102      	bne.n	bb496 <__aeabi_dcmpun+0x26>
   bb490:	f04f 0000 	mov.w	r0, #0
   bb494:	4770      	bx	lr
   bb496:	f04f 0001 	mov.w	r0, #1
   bb49a:	4770      	bx	lr

000bb49c <__aeabi_d2uiz>:
   bb49c:	004a      	lsls	r2, r1, #1
   bb49e:	d211      	bcs.n	bb4c4 <__aeabi_d2uiz+0x28>
   bb4a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bb4a4:	d211      	bcs.n	bb4ca <__aeabi_d2uiz+0x2e>
   bb4a6:	d50d      	bpl.n	bb4c4 <__aeabi_d2uiz+0x28>
   bb4a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bb4ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bb4b0:	d40e      	bmi.n	bb4d0 <__aeabi_d2uiz+0x34>
   bb4b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb4b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bb4ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bb4be:	fa23 f002 	lsr.w	r0, r3, r2
   bb4c2:	4770      	bx	lr
   bb4c4:	f04f 0000 	mov.w	r0, #0
   bb4c8:	4770      	bx	lr
   bb4ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bb4ce:	d102      	bne.n	bb4d6 <__aeabi_d2uiz+0x3a>
   bb4d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bb4d4:	4770      	bx	lr
   bb4d6:	f04f 0000 	mov.w	r0, #0
   bb4da:	4770      	bx	lr

000bb4dc <__aeabi_d2f>:
   bb4dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bb4e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bb4e4:	bf24      	itt	cs
   bb4e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bb4ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bb4ee:	d90d      	bls.n	bb50c <__aeabi_d2f+0x30>
   bb4f0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bb4f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bb4f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bb4fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bb500:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bb504:	bf08      	it	eq
   bb506:	f020 0001 	biceq.w	r0, r0, #1
   bb50a:	4770      	bx	lr
   bb50c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bb510:	d121      	bne.n	bb556 <__aeabi_d2f+0x7a>
   bb512:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bb516:	bfbc      	itt	lt
   bb518:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bb51c:	4770      	bxlt	lr
   bb51e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb522:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bb526:	f1c2 0218 	rsb	r2, r2, #24
   bb52a:	f1c2 0c20 	rsb	ip, r2, #32
   bb52e:	fa10 f30c 	lsls.w	r3, r0, ip
   bb532:	fa20 f002 	lsr.w	r0, r0, r2
   bb536:	bf18      	it	ne
   bb538:	f040 0001 	orrne.w	r0, r0, #1
   bb53c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb540:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bb544:	fa03 fc0c 	lsl.w	ip, r3, ip
   bb548:	ea40 000c 	orr.w	r0, r0, ip
   bb54c:	fa23 f302 	lsr.w	r3, r3, r2
   bb550:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bb554:	e7cc      	b.n	bb4f0 <__aeabi_d2f+0x14>
   bb556:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bb55a:	d107      	bne.n	bb56c <__aeabi_d2f+0x90>
   bb55c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bb560:	bf1e      	ittt	ne
   bb562:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bb566:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bb56a:	4770      	bxne	lr
   bb56c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bb570:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bb574:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bb578:	4770      	bx	lr
   bb57a:	bf00      	nop

000bb57c <__aeabi_d2ulz>:
   bb57c:	b5d0      	push	{r4, r6, r7, lr}
   bb57e:	4b0c      	ldr	r3, [pc, #48]	; (bb5b0 <__aeabi_d2ulz+0x34>)
   bb580:	2200      	movs	r2, #0
   bb582:	4606      	mov	r6, r0
   bb584:	460f      	mov	r7, r1
   bb586:	f7ff fcd9 	bl	baf3c <__aeabi_dmul>
   bb58a:	f7ff ff87 	bl	bb49c <__aeabi_d2uiz>
   bb58e:	4604      	mov	r4, r0
   bb590:	f7ff fc5a 	bl	bae48 <__aeabi_ui2d>
   bb594:	4b07      	ldr	r3, [pc, #28]	; (bb5b4 <__aeabi_d2ulz+0x38>)
   bb596:	2200      	movs	r2, #0
   bb598:	f7ff fcd0 	bl	baf3c <__aeabi_dmul>
   bb59c:	4602      	mov	r2, r0
   bb59e:	460b      	mov	r3, r1
   bb5a0:	4630      	mov	r0, r6
   bb5a2:	4639      	mov	r1, r7
   bb5a4:	f7ff fb12 	bl	babcc <__aeabi_dsub>
   bb5a8:	f7ff ff78 	bl	bb49c <__aeabi_d2uiz>
   bb5ac:	4621      	mov	r1, r4
   bb5ae:	bdd0      	pop	{r4, r6, r7, pc}
   bb5b0:	3df00000 	.word	0x3df00000
   bb5b4:	41f00000 	.word	0x41f00000

000bb5b8 <atexit>:
   bb5b8:	2300      	movs	r3, #0
   bb5ba:	4601      	mov	r1, r0
   bb5bc:	461a      	mov	r2, r3
   bb5be:	4618      	mov	r0, r3
   bb5c0:	f000 bfcc 	b.w	bc55c <__register_exitproc>

000bb5c4 <atoi>:
   bb5c4:	220a      	movs	r2, #10
   bb5c6:	2100      	movs	r1, #0
   bb5c8:	f000 bfbe 	b.w	bc548 <strtol>

000bb5cc <memcmp>:
   bb5cc:	b510      	push	{r4, lr}
   bb5ce:	3901      	subs	r1, #1
   bb5d0:	4402      	add	r2, r0
   bb5d2:	4290      	cmp	r0, r2
   bb5d4:	d101      	bne.n	bb5da <memcmp+0xe>
   bb5d6:	2000      	movs	r0, #0
   bb5d8:	e005      	b.n	bb5e6 <memcmp+0x1a>
   bb5da:	7803      	ldrb	r3, [r0, #0]
   bb5dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bb5e0:	42a3      	cmp	r3, r4
   bb5e2:	d001      	beq.n	bb5e8 <memcmp+0x1c>
   bb5e4:	1b18      	subs	r0, r3, r4
   bb5e6:	bd10      	pop	{r4, pc}
   bb5e8:	3001      	adds	r0, #1
   bb5ea:	e7f2      	b.n	bb5d2 <memcmp+0x6>

000bb5ec <memcpy>:
   bb5ec:	440a      	add	r2, r1
   bb5ee:	4291      	cmp	r1, r2
   bb5f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bb5f4:	d100      	bne.n	bb5f8 <memcpy+0xc>
   bb5f6:	4770      	bx	lr
   bb5f8:	b510      	push	{r4, lr}
   bb5fa:	f811 4b01 	ldrb.w	r4, [r1], #1
   bb5fe:	f803 4f01 	strb.w	r4, [r3, #1]!
   bb602:	4291      	cmp	r1, r2
   bb604:	d1f9      	bne.n	bb5fa <memcpy+0xe>
   bb606:	bd10      	pop	{r4, pc}

000bb608 <memmove>:
   bb608:	4288      	cmp	r0, r1
   bb60a:	b510      	push	{r4, lr}
   bb60c:	eb01 0402 	add.w	r4, r1, r2
   bb610:	d902      	bls.n	bb618 <memmove+0x10>
   bb612:	4284      	cmp	r4, r0
   bb614:	4623      	mov	r3, r4
   bb616:	d807      	bhi.n	bb628 <memmove+0x20>
   bb618:	1e43      	subs	r3, r0, #1
   bb61a:	42a1      	cmp	r1, r4
   bb61c:	d008      	beq.n	bb630 <memmove+0x28>
   bb61e:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb622:	f803 2f01 	strb.w	r2, [r3, #1]!
   bb626:	e7f8      	b.n	bb61a <memmove+0x12>
   bb628:	4402      	add	r2, r0
   bb62a:	4601      	mov	r1, r0
   bb62c:	428a      	cmp	r2, r1
   bb62e:	d100      	bne.n	bb632 <memmove+0x2a>
   bb630:	bd10      	pop	{r4, pc}
   bb632:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bb636:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bb63a:	e7f7      	b.n	bb62c <memmove+0x24>

000bb63c <memset>:
   bb63c:	4402      	add	r2, r0
   bb63e:	4603      	mov	r3, r0
   bb640:	4293      	cmp	r3, r2
   bb642:	d100      	bne.n	bb646 <memset+0xa>
   bb644:	4770      	bx	lr
   bb646:	f803 1b01 	strb.w	r1, [r3], #1
   bb64a:	e7f9      	b.n	bb640 <memset+0x4>

000bb64c <srand>:
   bb64c:	b538      	push	{r3, r4, r5, lr}
   bb64e:	4b10      	ldr	r3, [pc, #64]	; (bb690 <srand+0x44>)
   bb650:	681d      	ldr	r5, [r3, #0]
   bb652:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb654:	4604      	mov	r4, r0
   bb656:	b9b3      	cbnz	r3, bb686 <srand+0x3a>
   bb658:	2018      	movs	r0, #24
   bb65a:	f7fc fce9 	bl	b8030 <malloc>
   bb65e:	4602      	mov	r2, r0
   bb660:	63a8      	str	r0, [r5, #56]	; 0x38
   bb662:	b920      	cbnz	r0, bb66e <srand+0x22>
   bb664:	4b0b      	ldr	r3, [pc, #44]	; (bb694 <srand+0x48>)
   bb666:	480c      	ldr	r0, [pc, #48]	; (bb698 <srand+0x4c>)
   bb668:	2142      	movs	r1, #66	; 0x42
   bb66a:	f7fc fd21 	bl	b80b0 <__assert_func>
   bb66e:	490b      	ldr	r1, [pc, #44]	; (bb69c <srand+0x50>)
   bb670:	4b0b      	ldr	r3, [pc, #44]	; (bb6a0 <srand+0x54>)
   bb672:	e9c0 1300 	strd	r1, r3, [r0]
   bb676:	4b0b      	ldr	r3, [pc, #44]	; (bb6a4 <srand+0x58>)
   bb678:	6083      	str	r3, [r0, #8]
   bb67a:	230b      	movs	r3, #11
   bb67c:	8183      	strh	r3, [r0, #12]
   bb67e:	2100      	movs	r1, #0
   bb680:	2001      	movs	r0, #1
   bb682:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bb686:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb688:	2200      	movs	r2, #0
   bb68a:	611c      	str	r4, [r3, #16]
   bb68c:	615a      	str	r2, [r3, #20]
   bb68e:	bd38      	pop	{r3, r4, r5, pc}
   bb690:	200352f4 	.word	0x200352f4
   bb694:	000be085 	.word	0x000be085
   bb698:	000be09c 	.word	0x000be09c
   bb69c:	abcd330e 	.word	0xabcd330e
   bb6a0:	e66d1234 	.word	0xe66d1234
   bb6a4:	0005deec 	.word	0x0005deec

000bb6a8 <strcmp>:
   bb6a8:	f810 2b01 	ldrb.w	r2, [r0], #1
   bb6ac:	f811 3b01 	ldrb.w	r3, [r1], #1
   bb6b0:	2a01      	cmp	r2, #1
   bb6b2:	bf28      	it	cs
   bb6b4:	429a      	cmpcs	r2, r3
   bb6b6:	d0f7      	beq.n	bb6a8 <strcmp>
   bb6b8:	1ad0      	subs	r0, r2, r3
   bb6ba:	4770      	bx	lr

000bb6bc <strcpy>:
   bb6bc:	4603      	mov	r3, r0
   bb6be:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb6c2:	f803 2b01 	strb.w	r2, [r3], #1
   bb6c6:	2a00      	cmp	r2, #0
   bb6c8:	d1f9      	bne.n	bb6be <strcpy+0x2>
   bb6ca:	4770      	bx	lr

000bb6cc <strlen>:
   bb6cc:	4603      	mov	r3, r0
   bb6ce:	f813 2b01 	ldrb.w	r2, [r3], #1
   bb6d2:	2a00      	cmp	r2, #0
   bb6d4:	d1fb      	bne.n	bb6ce <strlen+0x2>
   bb6d6:	1a18      	subs	r0, r3, r0
   bb6d8:	3801      	subs	r0, #1
   bb6da:	4770      	bx	lr

000bb6dc <strncmp>:
   bb6dc:	b510      	push	{r4, lr}
   bb6de:	b17a      	cbz	r2, bb700 <strncmp+0x24>
   bb6e0:	4603      	mov	r3, r0
   bb6e2:	3901      	subs	r1, #1
   bb6e4:	1884      	adds	r4, r0, r2
   bb6e6:	f813 0b01 	ldrb.w	r0, [r3], #1
   bb6ea:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bb6ee:	4290      	cmp	r0, r2
   bb6f0:	d101      	bne.n	bb6f6 <strncmp+0x1a>
   bb6f2:	42a3      	cmp	r3, r4
   bb6f4:	d101      	bne.n	bb6fa <strncmp+0x1e>
   bb6f6:	1a80      	subs	r0, r0, r2
   bb6f8:	bd10      	pop	{r4, pc}
   bb6fa:	2800      	cmp	r0, #0
   bb6fc:	d1f3      	bne.n	bb6e6 <strncmp+0xa>
   bb6fe:	e7fa      	b.n	bb6f6 <strncmp+0x1a>
   bb700:	4610      	mov	r0, r2
   bb702:	e7f9      	b.n	bb6f8 <strncmp+0x1c>

000bb704 <strnlen>:
   bb704:	b510      	push	{r4, lr}
   bb706:	4602      	mov	r2, r0
   bb708:	4401      	add	r1, r0
   bb70a:	428a      	cmp	r2, r1
   bb70c:	4613      	mov	r3, r2
   bb70e:	d003      	beq.n	bb718 <strnlen+0x14>
   bb710:	781c      	ldrb	r4, [r3, #0]
   bb712:	3201      	adds	r2, #1
   bb714:	2c00      	cmp	r4, #0
   bb716:	d1f8      	bne.n	bb70a <strnlen+0x6>
   bb718:	1a18      	subs	r0, r3, r0
   bb71a:	bd10      	pop	{r4, pc}

000bb71c <strstr>:
   bb71c:	780a      	ldrb	r2, [r1, #0]
   bb71e:	b570      	push	{r4, r5, r6, lr}
   bb720:	b96a      	cbnz	r2, bb73e <strstr+0x22>
   bb722:	bd70      	pop	{r4, r5, r6, pc}
   bb724:	429a      	cmp	r2, r3
   bb726:	d109      	bne.n	bb73c <strstr+0x20>
   bb728:	460c      	mov	r4, r1
   bb72a:	4605      	mov	r5, r0
   bb72c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   bb730:	2b00      	cmp	r3, #0
   bb732:	d0f6      	beq.n	bb722 <strstr+0x6>
   bb734:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   bb738:	429e      	cmp	r6, r3
   bb73a:	d0f7      	beq.n	bb72c <strstr+0x10>
   bb73c:	3001      	adds	r0, #1
   bb73e:	7803      	ldrb	r3, [r0, #0]
   bb740:	2b00      	cmp	r3, #0
   bb742:	d1ef      	bne.n	bb724 <strstr+0x8>
   bb744:	4618      	mov	r0, r3
   bb746:	e7ec      	b.n	bb722 <strstr+0x6>

000bb748 <sulp>:
   bb748:	b570      	push	{r4, r5, r6, lr}
   bb74a:	4604      	mov	r4, r0
   bb74c:	460d      	mov	r5, r1
   bb74e:	ec45 4b10 	vmov	d0, r4, r5
   bb752:	4616      	mov	r6, r2
   bb754:	f001 fe5c 	bl	bd410 <__ulp>
   bb758:	ec51 0b10 	vmov	r0, r1, d0
   bb75c:	b17e      	cbz	r6, bb77e <sulp+0x36>
   bb75e:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bb762:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bb766:	2b00      	cmp	r3, #0
   bb768:	dd09      	ble.n	bb77e <sulp+0x36>
   bb76a:	051b      	lsls	r3, r3, #20
   bb76c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bb770:	2400      	movs	r4, #0
   bb772:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bb776:	4622      	mov	r2, r4
   bb778:	462b      	mov	r3, r5
   bb77a:	f7ff fbdf 	bl	baf3c <__aeabi_dmul>
   bb77e:	bd70      	pop	{r4, r5, r6, pc}

000bb780 <_strtod_l>:
   bb780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb784:	ed2d 8b02 	vpush	{d8}
   bb788:	b09d      	sub	sp, #116	; 0x74
   bb78a:	461f      	mov	r7, r3
   bb78c:	2300      	movs	r3, #0
   bb78e:	9318      	str	r3, [sp, #96]	; 0x60
   bb790:	4ba2      	ldr	r3, [pc, #648]	; (bba1c <_strtod_l+0x29c>)
   bb792:	9213      	str	r2, [sp, #76]	; 0x4c
   bb794:	681b      	ldr	r3, [r3, #0]
   bb796:	9305      	str	r3, [sp, #20]
   bb798:	4604      	mov	r4, r0
   bb79a:	4618      	mov	r0, r3
   bb79c:	4688      	mov	r8, r1
   bb79e:	f7ff ff95 	bl	bb6cc <strlen>
   bb7a2:	f04f 0a00 	mov.w	sl, #0
   bb7a6:	4605      	mov	r5, r0
   bb7a8:	f04f 0b00 	mov.w	fp, #0
   bb7ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb7b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb7b2:	781a      	ldrb	r2, [r3, #0]
   bb7b4:	2a2b      	cmp	r2, #43	; 0x2b
   bb7b6:	d04e      	beq.n	bb856 <_strtod_l+0xd6>
   bb7b8:	d83b      	bhi.n	bb832 <_strtod_l+0xb2>
   bb7ba:	2a0d      	cmp	r2, #13
   bb7bc:	d834      	bhi.n	bb828 <_strtod_l+0xa8>
   bb7be:	2a08      	cmp	r2, #8
   bb7c0:	d834      	bhi.n	bb82c <_strtod_l+0xac>
   bb7c2:	2a00      	cmp	r2, #0
   bb7c4:	d03e      	beq.n	bb844 <_strtod_l+0xc4>
   bb7c6:	2300      	movs	r3, #0
   bb7c8:	930a      	str	r3, [sp, #40]	; 0x28
   bb7ca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bb7cc:	7833      	ldrb	r3, [r6, #0]
   bb7ce:	2b30      	cmp	r3, #48	; 0x30
   bb7d0:	f040 80b0 	bne.w	bb934 <_strtod_l+0x1b4>
   bb7d4:	7873      	ldrb	r3, [r6, #1]
   bb7d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bb7da:	2b58      	cmp	r3, #88	; 0x58
   bb7dc:	d168      	bne.n	bb8b0 <_strtod_l+0x130>
   bb7de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bb7e0:	9301      	str	r3, [sp, #4]
   bb7e2:	ab18      	add	r3, sp, #96	; 0x60
   bb7e4:	9702      	str	r7, [sp, #8]
   bb7e6:	9300      	str	r3, [sp, #0]
   bb7e8:	4a8d      	ldr	r2, [pc, #564]	; (bba20 <_strtod_l+0x2a0>)
   bb7ea:	ab19      	add	r3, sp, #100	; 0x64
   bb7ec:	a917      	add	r1, sp, #92	; 0x5c
   bb7ee:	4620      	mov	r0, r4
   bb7f0:	f000 ff7e 	bl	bc6f0 <__gethex>
   bb7f4:	f010 0707 	ands.w	r7, r0, #7
   bb7f8:	4605      	mov	r5, r0
   bb7fa:	d005      	beq.n	bb808 <_strtod_l+0x88>
   bb7fc:	2f06      	cmp	r7, #6
   bb7fe:	d12c      	bne.n	bb85a <_strtod_l+0xda>
   bb800:	3601      	adds	r6, #1
   bb802:	2300      	movs	r3, #0
   bb804:	9617      	str	r6, [sp, #92]	; 0x5c
   bb806:	930a      	str	r3, [sp, #40]	; 0x28
   bb808:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb80a:	2b00      	cmp	r3, #0
   bb80c:	f040 8590 	bne.w	bc330 <_strtod_l+0xbb0>
   bb810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bb812:	b1eb      	cbz	r3, bb850 <_strtod_l+0xd0>
   bb814:	4652      	mov	r2, sl
   bb816:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bb81a:	ec43 2b10 	vmov	d0, r2, r3
   bb81e:	b01d      	add	sp, #116	; 0x74
   bb820:	ecbd 8b02 	vpop	{d8}
   bb824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb828:	2a20      	cmp	r2, #32
   bb82a:	d1cc      	bne.n	bb7c6 <_strtod_l+0x46>
   bb82c:	3301      	adds	r3, #1
   bb82e:	9317      	str	r3, [sp, #92]	; 0x5c
   bb830:	e7be      	b.n	bb7b0 <_strtod_l+0x30>
   bb832:	2a2d      	cmp	r2, #45	; 0x2d
   bb834:	d1c7      	bne.n	bb7c6 <_strtod_l+0x46>
   bb836:	2201      	movs	r2, #1
   bb838:	920a      	str	r2, [sp, #40]	; 0x28
   bb83a:	1c5a      	adds	r2, r3, #1
   bb83c:	9217      	str	r2, [sp, #92]	; 0x5c
   bb83e:	785b      	ldrb	r3, [r3, #1]
   bb840:	2b00      	cmp	r3, #0
   bb842:	d1c2      	bne.n	bb7ca <_strtod_l+0x4a>
   bb844:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb846:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb84a:	2b00      	cmp	r3, #0
   bb84c:	f040 856e 	bne.w	bc32c <_strtod_l+0xbac>
   bb850:	4652      	mov	r2, sl
   bb852:	465b      	mov	r3, fp
   bb854:	e7e1      	b.n	bb81a <_strtod_l+0x9a>
   bb856:	2200      	movs	r2, #0
   bb858:	e7ee      	b.n	bb838 <_strtod_l+0xb8>
   bb85a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bb85c:	b13a      	cbz	r2, bb86e <_strtod_l+0xee>
   bb85e:	2135      	movs	r1, #53	; 0x35
   bb860:	a81a      	add	r0, sp, #104	; 0x68
   bb862:	f001 fee0 	bl	bd626 <__copybits>
   bb866:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb868:	4620      	mov	r0, r4
   bb86a:	f001 fa9f 	bl	bcdac <_Bfree>
   bb86e:	3f01      	subs	r7, #1
   bb870:	2f04      	cmp	r7, #4
   bb872:	d806      	bhi.n	bb882 <_strtod_l+0x102>
   bb874:	e8df f007 	tbb	[pc, r7]
   bb878:	1714030a 	.word	0x1714030a
   bb87c:	0a          	.byte	0x0a
   bb87d:	00          	.byte	0x00
   bb87e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bb882:	0728      	lsls	r0, r5, #28
   bb884:	d5c0      	bpl.n	bb808 <_strtod_l+0x88>
   bb886:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bb88a:	e7bd      	b.n	bb808 <_strtod_l+0x88>
   bb88c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bb890:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bb892:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bb896:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bb89a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bb89e:	e7f0      	b.n	bb882 <_strtod_l+0x102>
   bb8a0:	f8df b180 	ldr.w	fp, [pc, #384]	; bba24 <_strtod_l+0x2a4>
   bb8a4:	e7ed      	b.n	bb882 <_strtod_l+0x102>
   bb8a6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bb8aa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bb8ae:	e7e8      	b.n	bb882 <_strtod_l+0x102>
   bb8b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb8b2:	1c5a      	adds	r2, r3, #1
   bb8b4:	9217      	str	r2, [sp, #92]	; 0x5c
   bb8b6:	785b      	ldrb	r3, [r3, #1]
   bb8b8:	2b30      	cmp	r3, #48	; 0x30
   bb8ba:	d0f9      	beq.n	bb8b0 <_strtod_l+0x130>
   bb8bc:	2b00      	cmp	r3, #0
   bb8be:	d0a3      	beq.n	bb808 <_strtod_l+0x88>
   bb8c0:	2301      	movs	r3, #1
   bb8c2:	f04f 0900 	mov.w	r9, #0
   bb8c6:	9304      	str	r3, [sp, #16]
   bb8c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb8ca:	9308      	str	r3, [sp, #32]
   bb8cc:	f8cd 901c 	str.w	r9, [sp, #28]
   bb8d0:	464f      	mov	r7, r9
   bb8d2:	220a      	movs	r2, #10
   bb8d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bb8d6:	7806      	ldrb	r6, [r0, #0]
   bb8d8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bb8dc:	b2d9      	uxtb	r1, r3
   bb8de:	2909      	cmp	r1, #9
   bb8e0:	d92a      	bls.n	bb938 <_strtod_l+0x1b8>
   bb8e2:	9905      	ldr	r1, [sp, #20]
   bb8e4:	462a      	mov	r2, r5
   bb8e6:	f7ff fef9 	bl	bb6dc <strncmp>
   bb8ea:	b398      	cbz	r0, bb954 <_strtod_l+0x1d4>
   bb8ec:	2000      	movs	r0, #0
   bb8ee:	4632      	mov	r2, r6
   bb8f0:	463d      	mov	r5, r7
   bb8f2:	9005      	str	r0, [sp, #20]
   bb8f4:	4603      	mov	r3, r0
   bb8f6:	2a65      	cmp	r2, #101	; 0x65
   bb8f8:	d001      	beq.n	bb8fe <_strtod_l+0x17e>
   bb8fa:	2a45      	cmp	r2, #69	; 0x45
   bb8fc:	d118      	bne.n	bb930 <_strtod_l+0x1b0>
   bb8fe:	b91d      	cbnz	r5, bb908 <_strtod_l+0x188>
   bb900:	9a04      	ldr	r2, [sp, #16]
   bb902:	4302      	orrs	r2, r0
   bb904:	d09e      	beq.n	bb844 <_strtod_l+0xc4>
   bb906:	2500      	movs	r5, #0
   bb908:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bb90c:	f108 0201 	add.w	r2, r8, #1
   bb910:	9217      	str	r2, [sp, #92]	; 0x5c
   bb912:	f898 2001 	ldrb.w	r2, [r8, #1]
   bb916:	2a2b      	cmp	r2, #43	; 0x2b
   bb918:	d075      	beq.n	bba06 <_strtod_l+0x286>
   bb91a:	2a2d      	cmp	r2, #45	; 0x2d
   bb91c:	d07b      	beq.n	bba16 <_strtod_l+0x296>
   bb91e:	f04f 0c00 	mov.w	ip, #0
   bb922:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bb926:	2909      	cmp	r1, #9
   bb928:	f240 8082 	bls.w	bba30 <_strtod_l+0x2b0>
   bb92c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb930:	2600      	movs	r6, #0
   bb932:	e09d      	b.n	bba70 <_strtod_l+0x2f0>
   bb934:	2300      	movs	r3, #0
   bb936:	e7c4      	b.n	bb8c2 <_strtod_l+0x142>
   bb938:	2f08      	cmp	r7, #8
   bb93a:	bfd8      	it	le
   bb93c:	9907      	ldrle	r1, [sp, #28]
   bb93e:	f100 0001 	add.w	r0, r0, #1
   bb942:	bfda      	itte	le
   bb944:	fb02 3301 	mlale	r3, r2, r1, r3
   bb948:	9307      	strle	r3, [sp, #28]
   bb94a:	fb02 3909 	mlagt	r9, r2, r9, r3
   bb94e:	3701      	adds	r7, #1
   bb950:	9017      	str	r0, [sp, #92]	; 0x5c
   bb952:	e7bf      	b.n	bb8d4 <_strtod_l+0x154>
   bb954:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb956:	195a      	adds	r2, r3, r5
   bb958:	9217      	str	r2, [sp, #92]	; 0x5c
   bb95a:	5d5a      	ldrb	r2, [r3, r5]
   bb95c:	2f00      	cmp	r7, #0
   bb95e:	d037      	beq.n	bb9d0 <_strtod_l+0x250>
   bb960:	9005      	str	r0, [sp, #20]
   bb962:	463d      	mov	r5, r7
   bb964:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bb968:	2b09      	cmp	r3, #9
   bb96a:	d912      	bls.n	bb992 <_strtod_l+0x212>
   bb96c:	2301      	movs	r3, #1
   bb96e:	e7c2      	b.n	bb8f6 <_strtod_l+0x176>
   bb970:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb972:	1c5a      	adds	r2, r3, #1
   bb974:	9217      	str	r2, [sp, #92]	; 0x5c
   bb976:	785a      	ldrb	r2, [r3, #1]
   bb978:	3001      	adds	r0, #1
   bb97a:	2a30      	cmp	r2, #48	; 0x30
   bb97c:	d0f8      	beq.n	bb970 <_strtod_l+0x1f0>
   bb97e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bb982:	2b08      	cmp	r3, #8
   bb984:	f200 84d9 	bhi.w	bc33a <_strtod_l+0xbba>
   bb988:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb98a:	9005      	str	r0, [sp, #20]
   bb98c:	2000      	movs	r0, #0
   bb98e:	9308      	str	r3, [sp, #32]
   bb990:	4605      	mov	r5, r0
   bb992:	3a30      	subs	r2, #48	; 0x30
   bb994:	f100 0301 	add.w	r3, r0, #1
   bb998:	d014      	beq.n	bb9c4 <_strtod_l+0x244>
   bb99a:	9905      	ldr	r1, [sp, #20]
   bb99c:	4419      	add	r1, r3
   bb99e:	9105      	str	r1, [sp, #20]
   bb9a0:	462b      	mov	r3, r5
   bb9a2:	eb00 0e05 	add.w	lr, r0, r5
   bb9a6:	210a      	movs	r1, #10
   bb9a8:	4573      	cmp	r3, lr
   bb9aa:	d113      	bne.n	bb9d4 <_strtod_l+0x254>
   bb9ac:	182b      	adds	r3, r5, r0
   bb9ae:	2b08      	cmp	r3, #8
   bb9b0:	f105 0501 	add.w	r5, r5, #1
   bb9b4:	4405      	add	r5, r0
   bb9b6:	dc1c      	bgt.n	bb9f2 <_strtod_l+0x272>
   bb9b8:	9907      	ldr	r1, [sp, #28]
   bb9ba:	230a      	movs	r3, #10
   bb9bc:	fb03 2301 	mla	r3, r3, r1, r2
   bb9c0:	9307      	str	r3, [sp, #28]
   bb9c2:	2300      	movs	r3, #0
   bb9c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb9c6:	1c51      	adds	r1, r2, #1
   bb9c8:	9117      	str	r1, [sp, #92]	; 0x5c
   bb9ca:	7852      	ldrb	r2, [r2, #1]
   bb9cc:	4618      	mov	r0, r3
   bb9ce:	e7c9      	b.n	bb964 <_strtod_l+0x1e4>
   bb9d0:	4638      	mov	r0, r7
   bb9d2:	e7d2      	b.n	bb97a <_strtod_l+0x1fa>
   bb9d4:	2b08      	cmp	r3, #8
   bb9d6:	dc04      	bgt.n	bb9e2 <_strtod_l+0x262>
   bb9d8:	9e07      	ldr	r6, [sp, #28]
   bb9da:	434e      	muls	r6, r1
   bb9dc:	9607      	str	r6, [sp, #28]
   bb9de:	3301      	adds	r3, #1
   bb9e0:	e7e2      	b.n	bb9a8 <_strtod_l+0x228>
   bb9e2:	f103 0c01 	add.w	ip, r3, #1
   bb9e6:	f1bc 0f10 	cmp.w	ip, #16
   bb9ea:	bfd8      	it	le
   bb9ec:	fb01 f909 	mulle.w	r9, r1, r9
   bb9f0:	e7f5      	b.n	bb9de <_strtod_l+0x25e>
   bb9f2:	2d10      	cmp	r5, #16
   bb9f4:	bfdc      	itt	le
   bb9f6:	230a      	movle	r3, #10
   bb9f8:	fb03 2909 	mlale	r9, r3, r9, r2
   bb9fc:	e7e1      	b.n	bb9c2 <_strtod_l+0x242>
   bb9fe:	2300      	movs	r3, #0
   bba00:	9305      	str	r3, [sp, #20]
   bba02:	2301      	movs	r3, #1
   bba04:	e77c      	b.n	bb900 <_strtod_l+0x180>
   bba06:	f04f 0c00 	mov.w	ip, #0
   bba0a:	f108 0202 	add.w	r2, r8, #2
   bba0e:	9217      	str	r2, [sp, #92]	; 0x5c
   bba10:	f898 2002 	ldrb.w	r2, [r8, #2]
   bba14:	e785      	b.n	bb922 <_strtod_l+0x1a2>
   bba16:	f04f 0c01 	mov.w	ip, #1
   bba1a:	e7f6      	b.n	bba0a <_strtod_l+0x28a>
   bba1c:	000be2cc 	.word	0x000be2cc
   bba20:	000be104 	.word	0x000be104
   bba24:	7ff00000 	.word	0x7ff00000
   bba28:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bba2a:	1c51      	adds	r1, r2, #1
   bba2c:	9117      	str	r1, [sp, #92]	; 0x5c
   bba2e:	7852      	ldrb	r2, [r2, #1]
   bba30:	2a30      	cmp	r2, #48	; 0x30
   bba32:	d0f9      	beq.n	bba28 <_strtod_l+0x2a8>
   bba34:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bba38:	2908      	cmp	r1, #8
   bba3a:	f63f af79 	bhi.w	bb930 <_strtod_l+0x1b0>
   bba3e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bba42:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bba44:	9206      	str	r2, [sp, #24]
   bba46:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bba48:	1c51      	adds	r1, r2, #1
   bba4a:	9117      	str	r1, [sp, #92]	; 0x5c
   bba4c:	7852      	ldrb	r2, [r2, #1]
   bba4e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bba52:	2e09      	cmp	r6, #9
   bba54:	d937      	bls.n	bbac6 <_strtod_l+0x346>
   bba56:	9e06      	ldr	r6, [sp, #24]
   bba58:	1b89      	subs	r1, r1, r6
   bba5a:	2908      	cmp	r1, #8
   bba5c:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bba60:	dc02      	bgt.n	bba68 <_strtod_l+0x2e8>
   bba62:	4576      	cmp	r6, lr
   bba64:	bfa8      	it	ge
   bba66:	4676      	movge	r6, lr
   bba68:	f1bc 0f00 	cmp.w	ip, #0
   bba6c:	d000      	beq.n	bba70 <_strtod_l+0x2f0>
   bba6e:	4276      	negs	r6, r6
   bba70:	2d00      	cmp	r5, #0
   bba72:	d14d      	bne.n	bbb10 <_strtod_l+0x390>
   bba74:	9904      	ldr	r1, [sp, #16]
   bba76:	4301      	orrs	r1, r0
   bba78:	f47f aec6 	bne.w	bb808 <_strtod_l+0x88>
   bba7c:	2b00      	cmp	r3, #0
   bba7e:	f47f aee1 	bne.w	bb844 <_strtod_l+0xc4>
   bba82:	2a69      	cmp	r2, #105	; 0x69
   bba84:	d027      	beq.n	bbad6 <_strtod_l+0x356>
   bba86:	dc24      	bgt.n	bbad2 <_strtod_l+0x352>
   bba88:	2a49      	cmp	r2, #73	; 0x49
   bba8a:	d024      	beq.n	bbad6 <_strtod_l+0x356>
   bba8c:	2a4e      	cmp	r2, #78	; 0x4e
   bba8e:	f47f aed9 	bne.w	bb844 <_strtod_l+0xc4>
   bba92:	499f      	ldr	r1, [pc, #636]	; (bbd10 <_strtod_l+0x590>)
   bba94:	a817      	add	r0, sp, #92	; 0x5c
   bba96:	f001 f883 	bl	bcba0 <__match>
   bba9a:	2800      	cmp	r0, #0
   bba9c:	f43f aed2 	beq.w	bb844 <_strtod_l+0xc4>
   bbaa0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbaa2:	781b      	ldrb	r3, [r3, #0]
   bbaa4:	2b28      	cmp	r3, #40	; 0x28
   bbaa6:	d12d      	bne.n	bbb04 <_strtod_l+0x384>
   bbaa8:	499a      	ldr	r1, [pc, #616]	; (bbd14 <_strtod_l+0x594>)
   bbaaa:	aa1a      	add	r2, sp, #104	; 0x68
   bbaac:	a817      	add	r0, sp, #92	; 0x5c
   bbaae:	f001 f88b 	bl	bcbc8 <__hexnan>
   bbab2:	2805      	cmp	r0, #5
   bbab4:	d126      	bne.n	bbb04 <_strtod_l+0x384>
   bbab6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bbab8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bbabc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bbac0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bbac4:	e6a0      	b.n	bb808 <_strtod_l+0x88>
   bbac6:	210a      	movs	r1, #10
   bbac8:	fb01 2e0e 	mla	lr, r1, lr, r2
   bbacc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bbad0:	e7b9      	b.n	bba46 <_strtod_l+0x2c6>
   bbad2:	2a6e      	cmp	r2, #110	; 0x6e
   bbad4:	e7db      	b.n	bba8e <_strtod_l+0x30e>
   bbad6:	4990      	ldr	r1, [pc, #576]	; (bbd18 <_strtod_l+0x598>)
   bbad8:	a817      	add	r0, sp, #92	; 0x5c
   bbada:	f001 f861 	bl	bcba0 <__match>
   bbade:	2800      	cmp	r0, #0
   bbae0:	f43f aeb0 	beq.w	bb844 <_strtod_l+0xc4>
   bbae4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbae6:	498d      	ldr	r1, [pc, #564]	; (bbd1c <_strtod_l+0x59c>)
   bbae8:	3b01      	subs	r3, #1
   bbaea:	a817      	add	r0, sp, #92	; 0x5c
   bbaec:	9317      	str	r3, [sp, #92]	; 0x5c
   bbaee:	f001 f857 	bl	bcba0 <__match>
   bbaf2:	b910      	cbnz	r0, bbafa <_strtod_l+0x37a>
   bbaf4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbaf6:	3301      	adds	r3, #1
   bbaf8:	9317      	str	r3, [sp, #92]	; 0x5c
   bbafa:	f8df b230 	ldr.w	fp, [pc, #560]	; bbd2c <_strtod_l+0x5ac>
   bbafe:	f04f 0a00 	mov.w	sl, #0
   bbb02:	e681      	b.n	bb808 <_strtod_l+0x88>
   bbb04:	4886      	ldr	r0, [pc, #536]	; (bbd20 <_strtod_l+0x5a0>)
   bbb06:	f001 fde3 	bl	bd6d0 <nan>
   bbb0a:	ec5b ab10 	vmov	sl, fp, d0
   bbb0e:	e67b      	b.n	bb808 <_strtod_l+0x88>
   bbb10:	9b05      	ldr	r3, [sp, #20]
   bbb12:	9807      	ldr	r0, [sp, #28]
   bbb14:	1af3      	subs	r3, r6, r3
   bbb16:	2f00      	cmp	r7, #0
   bbb18:	bf08      	it	eq
   bbb1a:	462f      	moveq	r7, r5
   bbb1c:	2d10      	cmp	r5, #16
   bbb1e:	9306      	str	r3, [sp, #24]
   bbb20:	46a8      	mov	r8, r5
   bbb22:	bfa8      	it	ge
   bbb24:	f04f 0810 	movge.w	r8, #16
   bbb28:	f7ff f98e 	bl	bae48 <__aeabi_ui2d>
   bbb2c:	2d09      	cmp	r5, #9
   bbb2e:	4682      	mov	sl, r0
   bbb30:	468b      	mov	fp, r1
   bbb32:	dd13      	ble.n	bbb5c <_strtod_l+0x3dc>
   bbb34:	4b7b      	ldr	r3, [pc, #492]	; (bbd24 <_strtod_l+0x5a4>)
   bbb36:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bbb3a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bbb3e:	f7ff f9fd 	bl	baf3c <__aeabi_dmul>
   bbb42:	4682      	mov	sl, r0
   bbb44:	4648      	mov	r0, r9
   bbb46:	468b      	mov	fp, r1
   bbb48:	f7ff f97e 	bl	bae48 <__aeabi_ui2d>
   bbb4c:	4602      	mov	r2, r0
   bbb4e:	460b      	mov	r3, r1
   bbb50:	4650      	mov	r0, sl
   bbb52:	4659      	mov	r1, fp
   bbb54:	f7ff f83c 	bl	babd0 <__adddf3>
   bbb58:	4682      	mov	sl, r0
   bbb5a:	468b      	mov	fp, r1
   bbb5c:	2d0f      	cmp	r5, #15
   bbb5e:	dc38      	bgt.n	bbbd2 <_strtod_l+0x452>
   bbb60:	9b06      	ldr	r3, [sp, #24]
   bbb62:	2b00      	cmp	r3, #0
   bbb64:	f43f ae50 	beq.w	bb808 <_strtod_l+0x88>
   bbb68:	dd24      	ble.n	bbbb4 <_strtod_l+0x434>
   bbb6a:	2b16      	cmp	r3, #22
   bbb6c:	dc0b      	bgt.n	bbb86 <_strtod_l+0x406>
   bbb6e:	496d      	ldr	r1, [pc, #436]	; (bbd24 <_strtod_l+0x5a4>)
   bbb70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bbb74:	e9d1 0100 	ldrd	r0, r1, [r1]
   bbb78:	4652      	mov	r2, sl
   bbb7a:	465b      	mov	r3, fp
   bbb7c:	f7ff f9de 	bl	baf3c <__aeabi_dmul>
   bbb80:	4682      	mov	sl, r0
   bbb82:	468b      	mov	fp, r1
   bbb84:	e640      	b.n	bb808 <_strtod_l+0x88>
   bbb86:	9a06      	ldr	r2, [sp, #24]
   bbb88:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bbb8c:	4293      	cmp	r3, r2
   bbb8e:	db20      	blt.n	bbbd2 <_strtod_l+0x452>
   bbb90:	4c64      	ldr	r4, [pc, #400]	; (bbd24 <_strtod_l+0x5a4>)
   bbb92:	f1c5 050f 	rsb	r5, r5, #15
   bbb96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bbb9a:	4652      	mov	r2, sl
   bbb9c:	465b      	mov	r3, fp
   bbb9e:	e9d1 0100 	ldrd	r0, r1, [r1]
   bbba2:	f7ff f9cb 	bl	baf3c <__aeabi_dmul>
   bbba6:	9b06      	ldr	r3, [sp, #24]
   bbba8:	1b5d      	subs	r5, r3, r5
   bbbaa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bbbae:	e9d4 2300 	ldrd	r2, r3, [r4]
   bbbb2:	e7e3      	b.n	bbb7c <_strtod_l+0x3fc>
   bbbb4:	9b06      	ldr	r3, [sp, #24]
   bbbb6:	3316      	adds	r3, #22
   bbbb8:	db0b      	blt.n	bbbd2 <_strtod_l+0x452>
   bbbba:	9b05      	ldr	r3, [sp, #20]
   bbbbc:	1b9e      	subs	r6, r3, r6
   bbbbe:	4b59      	ldr	r3, [pc, #356]	; (bbd24 <_strtod_l+0x5a4>)
   bbbc0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bbbc4:	e9d6 2300 	ldrd	r2, r3, [r6]
   bbbc8:	4650      	mov	r0, sl
   bbbca:	4659      	mov	r1, fp
   bbbcc:	f7ff fae0 	bl	bb190 <__aeabi_ddiv>
   bbbd0:	e7d6      	b.n	bbb80 <_strtod_l+0x400>
   bbbd2:	9b06      	ldr	r3, [sp, #24]
   bbbd4:	eba5 0808 	sub.w	r8, r5, r8
   bbbd8:	4498      	add	r8, r3
   bbbda:	f1b8 0f00 	cmp.w	r8, #0
   bbbde:	dd74      	ble.n	bbcca <_strtod_l+0x54a>
   bbbe0:	f018 030f 	ands.w	r3, r8, #15
   bbbe4:	d00a      	beq.n	bbbfc <_strtod_l+0x47c>
   bbbe6:	494f      	ldr	r1, [pc, #316]	; (bbd24 <_strtod_l+0x5a4>)
   bbbe8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bbbec:	4652      	mov	r2, sl
   bbbee:	465b      	mov	r3, fp
   bbbf0:	e9d1 0100 	ldrd	r0, r1, [r1]
   bbbf4:	f7ff f9a2 	bl	baf3c <__aeabi_dmul>
   bbbf8:	4682      	mov	sl, r0
   bbbfa:	468b      	mov	fp, r1
   bbbfc:	f038 080f 	bics.w	r8, r8, #15
   bbc00:	d04f      	beq.n	bbca2 <_strtod_l+0x522>
   bbc02:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bbc06:	dd22      	ble.n	bbc4e <_strtod_l+0x4ce>
   bbc08:	2500      	movs	r5, #0
   bbc0a:	462e      	mov	r6, r5
   bbc0c:	9507      	str	r5, [sp, #28]
   bbc0e:	9505      	str	r5, [sp, #20]
   bbc10:	2322      	movs	r3, #34	; 0x22
   bbc12:	f8df b118 	ldr.w	fp, [pc, #280]	; bbd2c <_strtod_l+0x5ac>
   bbc16:	6023      	str	r3, [r4, #0]
   bbc18:	f04f 0a00 	mov.w	sl, #0
   bbc1c:	9b07      	ldr	r3, [sp, #28]
   bbc1e:	2b00      	cmp	r3, #0
   bbc20:	f43f adf2 	beq.w	bb808 <_strtod_l+0x88>
   bbc24:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbc26:	4620      	mov	r0, r4
   bbc28:	f001 f8c0 	bl	bcdac <_Bfree>
   bbc2c:	9905      	ldr	r1, [sp, #20]
   bbc2e:	4620      	mov	r0, r4
   bbc30:	f001 f8bc 	bl	bcdac <_Bfree>
   bbc34:	4631      	mov	r1, r6
   bbc36:	4620      	mov	r0, r4
   bbc38:	f001 f8b8 	bl	bcdac <_Bfree>
   bbc3c:	9907      	ldr	r1, [sp, #28]
   bbc3e:	4620      	mov	r0, r4
   bbc40:	f001 f8b4 	bl	bcdac <_Bfree>
   bbc44:	4629      	mov	r1, r5
   bbc46:	4620      	mov	r0, r4
   bbc48:	f001 f8b0 	bl	bcdac <_Bfree>
   bbc4c:	e5dc      	b.n	bb808 <_strtod_l+0x88>
   bbc4e:	4b36      	ldr	r3, [pc, #216]	; (bbd28 <_strtod_l+0x5a8>)
   bbc50:	9304      	str	r3, [sp, #16]
   bbc52:	2300      	movs	r3, #0
   bbc54:	ea4f 1828 	mov.w	r8, r8, asr #4
   bbc58:	4650      	mov	r0, sl
   bbc5a:	4659      	mov	r1, fp
   bbc5c:	4699      	mov	r9, r3
   bbc5e:	f1b8 0f01 	cmp.w	r8, #1
   bbc62:	dc21      	bgt.n	bbca8 <_strtod_l+0x528>
   bbc64:	b10b      	cbz	r3, bbc6a <_strtod_l+0x4ea>
   bbc66:	4682      	mov	sl, r0
   bbc68:	468b      	mov	fp, r1
   bbc6a:	4b2f      	ldr	r3, [pc, #188]	; (bbd28 <_strtod_l+0x5a8>)
   bbc6c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bbc70:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bbc74:	4652      	mov	r2, sl
   bbc76:	465b      	mov	r3, fp
   bbc78:	e9d9 0100 	ldrd	r0, r1, [r9]
   bbc7c:	f7ff f95e 	bl	baf3c <__aeabi_dmul>
   bbc80:	4b2a      	ldr	r3, [pc, #168]	; (bbd2c <_strtod_l+0x5ac>)
   bbc82:	460a      	mov	r2, r1
   bbc84:	400b      	ands	r3, r1
   bbc86:	492a      	ldr	r1, [pc, #168]	; (bbd30 <_strtod_l+0x5b0>)
   bbc88:	428b      	cmp	r3, r1
   bbc8a:	4682      	mov	sl, r0
   bbc8c:	d8bc      	bhi.n	bbc08 <_strtod_l+0x488>
   bbc8e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bbc92:	428b      	cmp	r3, r1
   bbc94:	bf86      	itte	hi
   bbc96:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bbd34 <_strtod_l+0x5b4>
   bbc9a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   bbc9e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bbca2:	2300      	movs	r3, #0
   bbca4:	9304      	str	r3, [sp, #16]
   bbca6:	e084      	b.n	bbdb2 <_strtod_l+0x632>
   bbca8:	f018 0f01 	tst.w	r8, #1
   bbcac:	d005      	beq.n	bbcba <_strtod_l+0x53a>
   bbcae:	9b04      	ldr	r3, [sp, #16]
   bbcb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbcb4:	f7ff f942 	bl	baf3c <__aeabi_dmul>
   bbcb8:	2301      	movs	r3, #1
   bbcba:	9a04      	ldr	r2, [sp, #16]
   bbcbc:	3208      	adds	r2, #8
   bbcbe:	f109 0901 	add.w	r9, r9, #1
   bbcc2:	ea4f 0868 	mov.w	r8, r8, asr #1
   bbcc6:	9204      	str	r2, [sp, #16]
   bbcc8:	e7c9      	b.n	bbc5e <_strtod_l+0x4de>
   bbcca:	d0ea      	beq.n	bbca2 <_strtod_l+0x522>
   bbccc:	f1c8 0800 	rsb	r8, r8, #0
   bbcd0:	f018 020f 	ands.w	r2, r8, #15
   bbcd4:	d00a      	beq.n	bbcec <_strtod_l+0x56c>
   bbcd6:	4b13      	ldr	r3, [pc, #76]	; (bbd24 <_strtod_l+0x5a4>)
   bbcd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bbcdc:	4650      	mov	r0, sl
   bbcde:	4659      	mov	r1, fp
   bbce0:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbce4:	f7ff fa54 	bl	bb190 <__aeabi_ddiv>
   bbce8:	4682      	mov	sl, r0
   bbcea:	468b      	mov	fp, r1
   bbcec:	ea5f 1828 	movs.w	r8, r8, asr #4
   bbcf0:	d0d7      	beq.n	bbca2 <_strtod_l+0x522>
   bbcf2:	f1b8 0f1f 	cmp.w	r8, #31
   bbcf6:	dd1f      	ble.n	bbd38 <_strtod_l+0x5b8>
   bbcf8:	2500      	movs	r5, #0
   bbcfa:	462e      	mov	r6, r5
   bbcfc:	9507      	str	r5, [sp, #28]
   bbcfe:	9505      	str	r5, [sp, #20]
   bbd00:	2322      	movs	r3, #34	; 0x22
   bbd02:	f04f 0a00 	mov.w	sl, #0
   bbd06:	f04f 0b00 	mov.w	fp, #0
   bbd0a:	6023      	str	r3, [r4, #0]
   bbd0c:	e786      	b.n	bbc1c <_strtod_l+0x49c>
   bbd0e:	bf00      	nop
   bbd10:	000be0fe 	.word	0x000be0fe
   bbd14:	000be118 	.word	0x000be118
   bbd18:	000be0f5 	.word	0x000be0f5
   bbd1c:	000be0f8 	.word	0x000be0f8
   bbd20:	000bdb72 	.word	0x000bdb72
   bbd24:	000be368 	.word	0x000be368
   bbd28:	000be340 	.word	0x000be340
   bbd2c:	7ff00000 	.word	0x7ff00000
   bbd30:	7ca00000 	.word	0x7ca00000
   bbd34:	7fefffff 	.word	0x7fefffff
   bbd38:	f018 0310 	ands.w	r3, r8, #16
   bbd3c:	bf18      	it	ne
   bbd3e:	236a      	movne	r3, #106	; 0x6a
   bbd40:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bc0f0 <_strtod_l+0x970>
   bbd44:	9304      	str	r3, [sp, #16]
   bbd46:	4650      	mov	r0, sl
   bbd48:	4659      	mov	r1, fp
   bbd4a:	2300      	movs	r3, #0
   bbd4c:	f018 0f01 	tst.w	r8, #1
   bbd50:	d004      	beq.n	bbd5c <_strtod_l+0x5dc>
   bbd52:	e9d9 2300 	ldrd	r2, r3, [r9]
   bbd56:	f7ff f8f1 	bl	baf3c <__aeabi_dmul>
   bbd5a:	2301      	movs	r3, #1
   bbd5c:	ea5f 0868 	movs.w	r8, r8, asr #1
   bbd60:	f109 0908 	add.w	r9, r9, #8
   bbd64:	d1f2      	bne.n	bbd4c <_strtod_l+0x5cc>
   bbd66:	b10b      	cbz	r3, bbd6c <_strtod_l+0x5ec>
   bbd68:	4682      	mov	sl, r0
   bbd6a:	468b      	mov	fp, r1
   bbd6c:	9b04      	ldr	r3, [sp, #16]
   bbd6e:	b1c3      	cbz	r3, bbda2 <_strtod_l+0x622>
   bbd70:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bbd74:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bbd78:	2b00      	cmp	r3, #0
   bbd7a:	4659      	mov	r1, fp
   bbd7c:	dd11      	ble.n	bbda2 <_strtod_l+0x622>
   bbd7e:	2b1f      	cmp	r3, #31
   bbd80:	f340 8124 	ble.w	bbfcc <_strtod_l+0x84c>
   bbd84:	2b34      	cmp	r3, #52	; 0x34
   bbd86:	bfde      	ittt	le
   bbd88:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bbd8c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   bbd90:	fa03 f202 	lslle.w	r2, r3, r2
   bbd94:	f04f 0a00 	mov.w	sl, #0
   bbd98:	bfcc      	ite	gt
   bbd9a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bbd9e:	ea02 0b01 	andle.w	fp, r2, r1
   bbda2:	2200      	movs	r2, #0
   bbda4:	2300      	movs	r3, #0
   bbda6:	4650      	mov	r0, sl
   bbda8:	4659      	mov	r1, fp
   bbdaa:	f7ff fb2f 	bl	bb40c <__aeabi_dcmpeq>
   bbdae:	2800      	cmp	r0, #0
   bbdb0:	d1a2      	bne.n	bbcf8 <_strtod_l+0x578>
   bbdb2:	9b07      	ldr	r3, [sp, #28]
   bbdb4:	9300      	str	r3, [sp, #0]
   bbdb6:	9908      	ldr	r1, [sp, #32]
   bbdb8:	462b      	mov	r3, r5
   bbdba:	463a      	mov	r2, r7
   bbdbc:	4620      	mov	r0, r4
   bbdbe:	f001 f85d 	bl	bce7c <__s2b>
   bbdc2:	9007      	str	r0, [sp, #28]
   bbdc4:	2800      	cmp	r0, #0
   bbdc6:	f43f af1f 	beq.w	bbc08 <_strtod_l+0x488>
   bbdca:	9b05      	ldr	r3, [sp, #20]
   bbdcc:	1b9e      	subs	r6, r3, r6
   bbdce:	9b06      	ldr	r3, [sp, #24]
   bbdd0:	2b00      	cmp	r3, #0
   bbdd2:	bfb4      	ite	lt
   bbdd4:	4633      	movlt	r3, r6
   bbdd6:	2300      	movge	r3, #0
   bbdd8:	930c      	str	r3, [sp, #48]	; 0x30
   bbdda:	9b06      	ldr	r3, [sp, #24]
   bbddc:	2500      	movs	r5, #0
   bbdde:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bbde2:	9312      	str	r3, [sp, #72]	; 0x48
   bbde4:	462e      	mov	r6, r5
   bbde6:	9b07      	ldr	r3, [sp, #28]
   bbde8:	4620      	mov	r0, r4
   bbdea:	6859      	ldr	r1, [r3, #4]
   bbdec:	f000 ff9e 	bl	bcd2c <_Balloc>
   bbdf0:	9005      	str	r0, [sp, #20]
   bbdf2:	2800      	cmp	r0, #0
   bbdf4:	f43f af0c 	beq.w	bbc10 <_strtod_l+0x490>
   bbdf8:	9b07      	ldr	r3, [sp, #28]
   bbdfa:	691a      	ldr	r2, [r3, #16]
   bbdfc:	3202      	adds	r2, #2
   bbdfe:	f103 010c 	add.w	r1, r3, #12
   bbe02:	0092      	lsls	r2, r2, #2
   bbe04:	300c      	adds	r0, #12
   bbe06:	f7ff fbf1 	bl	bb5ec <memcpy>
   bbe0a:	ec4b ab10 	vmov	d0, sl, fp
   bbe0e:	aa1a      	add	r2, sp, #104	; 0x68
   bbe10:	a919      	add	r1, sp, #100	; 0x64
   bbe12:	4620      	mov	r0, r4
   bbe14:	f001 fb78 	bl	bd508 <__d2b>
   bbe18:	ec4b ab18 	vmov	d8, sl, fp
   bbe1c:	9018      	str	r0, [sp, #96]	; 0x60
   bbe1e:	2800      	cmp	r0, #0
   bbe20:	f43f aef6 	beq.w	bbc10 <_strtod_l+0x490>
   bbe24:	2101      	movs	r1, #1
   bbe26:	4620      	mov	r0, r4
   bbe28:	f001 f8c2 	bl	bcfb0 <__i2b>
   bbe2c:	4606      	mov	r6, r0
   bbe2e:	2800      	cmp	r0, #0
   bbe30:	f43f aeee 	beq.w	bbc10 <_strtod_l+0x490>
   bbe34:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bbe36:	9904      	ldr	r1, [sp, #16]
   bbe38:	2b00      	cmp	r3, #0
   bbe3a:	bfab      	itete	ge
   bbe3c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bbe3e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bbe40:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bbe42:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bbe46:	bfac      	ite	ge
   bbe48:	eb03 0902 	addge.w	r9, r3, r2
   bbe4c:	1ad7      	sublt	r7, r2, r3
   bbe4e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bbe50:	eba3 0801 	sub.w	r8, r3, r1
   bbe54:	4490      	add	r8, r2
   bbe56:	4ba1      	ldr	r3, [pc, #644]	; (bc0dc <_strtod_l+0x95c>)
   bbe58:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bbe5c:	4598      	cmp	r8, r3
   bbe5e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bbe62:	f280 80c7 	bge.w	bbff4 <_strtod_l+0x874>
   bbe66:	eba3 0308 	sub.w	r3, r3, r8
   bbe6a:	2b1f      	cmp	r3, #31
   bbe6c:	eba2 0203 	sub.w	r2, r2, r3
   bbe70:	f04f 0101 	mov.w	r1, #1
   bbe74:	f300 80b1 	bgt.w	bbfda <_strtod_l+0x85a>
   bbe78:	fa01 f303 	lsl.w	r3, r1, r3
   bbe7c:	930d      	str	r3, [sp, #52]	; 0x34
   bbe7e:	2300      	movs	r3, #0
   bbe80:	9308      	str	r3, [sp, #32]
   bbe82:	eb09 0802 	add.w	r8, r9, r2
   bbe86:	9b04      	ldr	r3, [sp, #16]
   bbe88:	45c1      	cmp	r9, r8
   bbe8a:	4417      	add	r7, r2
   bbe8c:	441f      	add	r7, r3
   bbe8e:	464b      	mov	r3, r9
   bbe90:	bfa8      	it	ge
   bbe92:	4643      	movge	r3, r8
   bbe94:	42bb      	cmp	r3, r7
   bbe96:	bfa8      	it	ge
   bbe98:	463b      	movge	r3, r7
   bbe9a:	2b00      	cmp	r3, #0
   bbe9c:	bfc2      	ittt	gt
   bbe9e:	eba8 0803 	subgt.w	r8, r8, r3
   bbea2:	1aff      	subgt	r7, r7, r3
   bbea4:	eba9 0903 	subgt.w	r9, r9, r3
   bbea8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bbeaa:	2b00      	cmp	r3, #0
   bbeac:	dd17      	ble.n	bbede <_strtod_l+0x75e>
   bbeae:	4631      	mov	r1, r6
   bbeb0:	461a      	mov	r2, r3
   bbeb2:	4620      	mov	r0, r4
   bbeb4:	f001 f93c 	bl	bd130 <__pow5mult>
   bbeb8:	4606      	mov	r6, r0
   bbeba:	2800      	cmp	r0, #0
   bbebc:	f43f aea8 	beq.w	bbc10 <_strtod_l+0x490>
   bbec0:	4601      	mov	r1, r0
   bbec2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bbec4:	4620      	mov	r0, r4
   bbec6:	f001 f889 	bl	bcfdc <__multiply>
   bbeca:	900b      	str	r0, [sp, #44]	; 0x2c
   bbecc:	2800      	cmp	r0, #0
   bbece:	f43f ae9f 	beq.w	bbc10 <_strtod_l+0x490>
   bbed2:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbed4:	4620      	mov	r0, r4
   bbed6:	f000 ff69 	bl	bcdac <_Bfree>
   bbeda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbedc:	9318      	str	r3, [sp, #96]	; 0x60
   bbede:	f1b8 0f00 	cmp.w	r8, #0
   bbee2:	f300 808c 	bgt.w	bbffe <_strtod_l+0x87e>
   bbee6:	9b06      	ldr	r3, [sp, #24]
   bbee8:	2b00      	cmp	r3, #0
   bbeea:	dd08      	ble.n	bbefe <_strtod_l+0x77e>
   bbeec:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bbeee:	9905      	ldr	r1, [sp, #20]
   bbef0:	4620      	mov	r0, r4
   bbef2:	f001 f91d 	bl	bd130 <__pow5mult>
   bbef6:	9005      	str	r0, [sp, #20]
   bbef8:	2800      	cmp	r0, #0
   bbefa:	f43f ae89 	beq.w	bbc10 <_strtod_l+0x490>
   bbefe:	2f00      	cmp	r7, #0
   bbf00:	dd08      	ble.n	bbf14 <_strtod_l+0x794>
   bbf02:	9905      	ldr	r1, [sp, #20]
   bbf04:	463a      	mov	r2, r7
   bbf06:	4620      	mov	r0, r4
   bbf08:	f001 f96c 	bl	bd1e4 <__lshift>
   bbf0c:	9005      	str	r0, [sp, #20]
   bbf0e:	2800      	cmp	r0, #0
   bbf10:	f43f ae7e 	beq.w	bbc10 <_strtod_l+0x490>
   bbf14:	f1b9 0f00 	cmp.w	r9, #0
   bbf18:	dd08      	ble.n	bbf2c <_strtod_l+0x7ac>
   bbf1a:	4631      	mov	r1, r6
   bbf1c:	464a      	mov	r2, r9
   bbf1e:	4620      	mov	r0, r4
   bbf20:	f001 f960 	bl	bd1e4 <__lshift>
   bbf24:	4606      	mov	r6, r0
   bbf26:	2800      	cmp	r0, #0
   bbf28:	f43f ae72 	beq.w	bbc10 <_strtod_l+0x490>
   bbf2c:	9a05      	ldr	r2, [sp, #20]
   bbf2e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbf30:	4620      	mov	r0, r4
   bbf32:	f001 f9e3 	bl	bd2fc <__mdiff>
   bbf36:	4605      	mov	r5, r0
   bbf38:	2800      	cmp	r0, #0
   bbf3a:	f43f ae69 	beq.w	bbc10 <_strtod_l+0x490>
   bbf3e:	68c3      	ldr	r3, [r0, #12]
   bbf40:	930b      	str	r3, [sp, #44]	; 0x2c
   bbf42:	2300      	movs	r3, #0
   bbf44:	60c3      	str	r3, [r0, #12]
   bbf46:	4631      	mov	r1, r6
   bbf48:	f001 f9bc 	bl	bd2c4 <__mcmp>
   bbf4c:	2800      	cmp	r0, #0
   bbf4e:	da60      	bge.n	bc012 <_strtod_l+0x892>
   bbf50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbf52:	ea53 030a 	orrs.w	r3, r3, sl
   bbf56:	f040 8082 	bne.w	bc05e <_strtod_l+0x8de>
   bbf5a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bbf5e:	2b00      	cmp	r3, #0
   bbf60:	d17d      	bne.n	bc05e <_strtod_l+0x8de>
   bbf62:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bbf66:	0d1b      	lsrs	r3, r3, #20
   bbf68:	051b      	lsls	r3, r3, #20
   bbf6a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bbf6e:	d976      	bls.n	bc05e <_strtod_l+0x8de>
   bbf70:	696b      	ldr	r3, [r5, #20]
   bbf72:	b913      	cbnz	r3, bbf7a <_strtod_l+0x7fa>
   bbf74:	692b      	ldr	r3, [r5, #16]
   bbf76:	2b01      	cmp	r3, #1
   bbf78:	dd71      	ble.n	bc05e <_strtod_l+0x8de>
   bbf7a:	4629      	mov	r1, r5
   bbf7c:	2201      	movs	r2, #1
   bbf7e:	4620      	mov	r0, r4
   bbf80:	f001 f930 	bl	bd1e4 <__lshift>
   bbf84:	4631      	mov	r1, r6
   bbf86:	4605      	mov	r5, r0
   bbf88:	f001 f99c 	bl	bd2c4 <__mcmp>
   bbf8c:	2800      	cmp	r0, #0
   bbf8e:	dd66      	ble.n	bc05e <_strtod_l+0x8de>
   bbf90:	9904      	ldr	r1, [sp, #16]
   bbf92:	4a53      	ldr	r2, [pc, #332]	; (bc0e0 <_strtod_l+0x960>)
   bbf94:	465b      	mov	r3, fp
   bbf96:	2900      	cmp	r1, #0
   bbf98:	f000 8081 	beq.w	bc09e <_strtod_l+0x91e>
   bbf9c:	ea02 010b 	and.w	r1, r2, fp
   bbfa0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bbfa4:	dc7b      	bgt.n	bc09e <_strtod_l+0x91e>
   bbfa6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bbfaa:	f77f aea9 	ble.w	bbd00 <_strtod_l+0x580>
   bbfae:	4b4d      	ldr	r3, [pc, #308]	; (bc0e4 <_strtod_l+0x964>)
   bbfb0:	4650      	mov	r0, sl
   bbfb2:	4659      	mov	r1, fp
   bbfb4:	2200      	movs	r2, #0
   bbfb6:	f7fe ffc1 	bl	baf3c <__aeabi_dmul>
   bbfba:	460b      	mov	r3, r1
   bbfbc:	4303      	orrs	r3, r0
   bbfbe:	bf08      	it	eq
   bbfc0:	2322      	moveq	r3, #34	; 0x22
   bbfc2:	4682      	mov	sl, r0
   bbfc4:	468b      	mov	fp, r1
   bbfc6:	bf08      	it	eq
   bbfc8:	6023      	streq	r3, [r4, #0]
   bbfca:	e62b      	b.n	bbc24 <_strtod_l+0x4a4>
   bbfcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbfd0:	fa02 f303 	lsl.w	r3, r2, r3
   bbfd4:	ea03 0a0a 	and.w	sl, r3, sl
   bbfd8:	e6e3      	b.n	bbda2 <_strtod_l+0x622>
   bbfda:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bbfde:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bbfe2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bbfe6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bbfea:	fa01 f308 	lsl.w	r3, r1, r8
   bbfee:	9308      	str	r3, [sp, #32]
   bbff0:	910d      	str	r1, [sp, #52]	; 0x34
   bbff2:	e746      	b.n	bbe82 <_strtod_l+0x702>
   bbff4:	2300      	movs	r3, #0
   bbff6:	9308      	str	r3, [sp, #32]
   bbff8:	2301      	movs	r3, #1
   bbffa:	930d      	str	r3, [sp, #52]	; 0x34
   bbffc:	e741      	b.n	bbe82 <_strtod_l+0x702>
   bbffe:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc000:	4642      	mov	r2, r8
   bc002:	4620      	mov	r0, r4
   bc004:	f001 f8ee 	bl	bd1e4 <__lshift>
   bc008:	9018      	str	r0, [sp, #96]	; 0x60
   bc00a:	2800      	cmp	r0, #0
   bc00c:	f47f af6b 	bne.w	bbee6 <_strtod_l+0x766>
   bc010:	e5fe      	b.n	bbc10 <_strtod_l+0x490>
   bc012:	465f      	mov	r7, fp
   bc014:	d16e      	bne.n	bc0f4 <_strtod_l+0x974>
   bc016:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bc018:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc01c:	b342      	cbz	r2, bc070 <_strtod_l+0x8f0>
   bc01e:	4a32      	ldr	r2, [pc, #200]	; (bc0e8 <_strtod_l+0x968>)
   bc020:	4293      	cmp	r3, r2
   bc022:	d128      	bne.n	bc076 <_strtod_l+0x8f6>
   bc024:	9b04      	ldr	r3, [sp, #16]
   bc026:	4651      	mov	r1, sl
   bc028:	b1eb      	cbz	r3, bc066 <_strtod_l+0x8e6>
   bc02a:	4b2d      	ldr	r3, [pc, #180]	; (bc0e0 <_strtod_l+0x960>)
   bc02c:	403b      	ands	r3, r7
   bc02e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bc032:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc036:	d819      	bhi.n	bc06c <_strtod_l+0x8ec>
   bc038:	0d1b      	lsrs	r3, r3, #20
   bc03a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bc03e:	fa02 f303 	lsl.w	r3, r2, r3
   bc042:	4299      	cmp	r1, r3
   bc044:	d117      	bne.n	bc076 <_strtod_l+0x8f6>
   bc046:	4b29      	ldr	r3, [pc, #164]	; (bc0ec <_strtod_l+0x96c>)
   bc048:	429f      	cmp	r7, r3
   bc04a:	d102      	bne.n	bc052 <_strtod_l+0x8d2>
   bc04c:	3101      	adds	r1, #1
   bc04e:	f43f addf 	beq.w	bbc10 <_strtod_l+0x490>
   bc052:	4b23      	ldr	r3, [pc, #140]	; (bc0e0 <_strtod_l+0x960>)
   bc054:	403b      	ands	r3, r7
   bc056:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bc05a:	f04f 0a00 	mov.w	sl, #0
   bc05e:	9b04      	ldr	r3, [sp, #16]
   bc060:	2b00      	cmp	r3, #0
   bc062:	d1a4      	bne.n	bbfae <_strtod_l+0x82e>
   bc064:	e5de      	b.n	bbc24 <_strtod_l+0x4a4>
   bc066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bc06a:	e7ea      	b.n	bc042 <_strtod_l+0x8c2>
   bc06c:	4613      	mov	r3, r2
   bc06e:	e7e8      	b.n	bc042 <_strtod_l+0x8c2>
   bc070:	ea53 030a 	orrs.w	r3, r3, sl
   bc074:	d08c      	beq.n	bbf90 <_strtod_l+0x810>
   bc076:	9b08      	ldr	r3, [sp, #32]
   bc078:	b1db      	cbz	r3, bc0b2 <_strtod_l+0x932>
   bc07a:	423b      	tst	r3, r7
   bc07c:	d0ef      	beq.n	bc05e <_strtod_l+0x8de>
   bc07e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc080:	9a04      	ldr	r2, [sp, #16]
   bc082:	4650      	mov	r0, sl
   bc084:	4659      	mov	r1, fp
   bc086:	b1c3      	cbz	r3, bc0ba <_strtod_l+0x93a>
   bc088:	f7ff fb5e 	bl	bb748 <sulp>
   bc08c:	4602      	mov	r2, r0
   bc08e:	460b      	mov	r3, r1
   bc090:	ec51 0b18 	vmov	r0, r1, d8
   bc094:	f7fe fd9c 	bl	babd0 <__adddf3>
   bc098:	4682      	mov	sl, r0
   bc09a:	468b      	mov	fp, r1
   bc09c:	e7df      	b.n	bc05e <_strtod_l+0x8de>
   bc09e:	4013      	ands	r3, r2
   bc0a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bc0a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bc0a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bc0ac:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bc0b0:	e7d5      	b.n	bc05e <_strtod_l+0x8de>
   bc0b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bc0b4:	ea13 0f0a 	tst.w	r3, sl
   bc0b8:	e7e0      	b.n	bc07c <_strtod_l+0x8fc>
   bc0ba:	f7ff fb45 	bl	bb748 <sulp>
   bc0be:	4602      	mov	r2, r0
   bc0c0:	460b      	mov	r3, r1
   bc0c2:	ec51 0b18 	vmov	r0, r1, d8
   bc0c6:	f7fe fd81 	bl	babcc <__aeabi_dsub>
   bc0ca:	2200      	movs	r2, #0
   bc0cc:	2300      	movs	r3, #0
   bc0ce:	4682      	mov	sl, r0
   bc0d0:	468b      	mov	fp, r1
   bc0d2:	f7ff f99b 	bl	bb40c <__aeabi_dcmpeq>
   bc0d6:	2800      	cmp	r0, #0
   bc0d8:	d0c1      	beq.n	bc05e <_strtod_l+0x8de>
   bc0da:	e611      	b.n	bbd00 <_strtod_l+0x580>
   bc0dc:	fffffc02 	.word	0xfffffc02
   bc0e0:	7ff00000 	.word	0x7ff00000
   bc0e4:	39500000 	.word	0x39500000
   bc0e8:	000fffff 	.word	0x000fffff
   bc0ec:	7fefffff 	.word	0x7fefffff
   bc0f0:	000be130 	.word	0x000be130
   bc0f4:	4631      	mov	r1, r6
   bc0f6:	4628      	mov	r0, r5
   bc0f8:	f001 fa62 	bl	bd5c0 <__ratio>
   bc0fc:	ec59 8b10 	vmov	r8, r9, d0
   bc100:	ee10 0a10 	vmov	r0, s0
   bc104:	2200      	movs	r2, #0
   bc106:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bc10a:	4649      	mov	r1, r9
   bc10c:	f7ff f992 	bl	bb434 <__aeabi_dcmple>
   bc110:	2800      	cmp	r0, #0
   bc112:	d07a      	beq.n	bc20a <_strtod_l+0xa8a>
   bc114:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc116:	2b00      	cmp	r3, #0
   bc118:	d04a      	beq.n	bc1b0 <_strtod_l+0xa30>
   bc11a:	4b95      	ldr	r3, [pc, #596]	; (bc370 <_strtod_l+0xbf0>)
   bc11c:	2200      	movs	r2, #0
   bc11e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc122:	f8df 924c 	ldr.w	r9, [pc, #588]	; bc370 <_strtod_l+0xbf0>
   bc126:	f04f 0800 	mov.w	r8, #0
   bc12a:	4b92      	ldr	r3, [pc, #584]	; (bc374 <_strtod_l+0xbf4>)
   bc12c:	403b      	ands	r3, r7
   bc12e:	930d      	str	r3, [sp, #52]	; 0x34
   bc130:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc132:	4b91      	ldr	r3, [pc, #580]	; (bc378 <_strtod_l+0xbf8>)
   bc134:	429a      	cmp	r2, r3
   bc136:	f040 80b0 	bne.w	bc29a <_strtod_l+0xb1a>
   bc13a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc13e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bc142:	ec4b ab10 	vmov	d0, sl, fp
   bc146:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bc14a:	f001 f961 	bl	bd410 <__ulp>
   bc14e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc152:	ec53 2b10 	vmov	r2, r3, d0
   bc156:	f7fe fef1 	bl	baf3c <__aeabi_dmul>
   bc15a:	4652      	mov	r2, sl
   bc15c:	465b      	mov	r3, fp
   bc15e:	f7fe fd37 	bl	babd0 <__adddf3>
   bc162:	460b      	mov	r3, r1
   bc164:	4983      	ldr	r1, [pc, #524]	; (bc374 <_strtod_l+0xbf4>)
   bc166:	4a85      	ldr	r2, [pc, #532]	; (bc37c <_strtod_l+0xbfc>)
   bc168:	4019      	ands	r1, r3
   bc16a:	4291      	cmp	r1, r2
   bc16c:	4682      	mov	sl, r0
   bc16e:	d960      	bls.n	bc232 <_strtod_l+0xab2>
   bc170:	ee18 3a90 	vmov	r3, s17
   bc174:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bc178:	4293      	cmp	r3, r2
   bc17a:	d104      	bne.n	bc186 <_strtod_l+0xa06>
   bc17c:	ee18 3a10 	vmov	r3, s16
   bc180:	3301      	adds	r3, #1
   bc182:	f43f ad45 	beq.w	bbc10 <_strtod_l+0x490>
   bc186:	f8df b200 	ldr.w	fp, [pc, #512]	; bc388 <_strtod_l+0xc08>
   bc18a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bc18e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc190:	4620      	mov	r0, r4
   bc192:	f000 fe0b 	bl	bcdac <_Bfree>
   bc196:	9905      	ldr	r1, [sp, #20]
   bc198:	4620      	mov	r0, r4
   bc19a:	f000 fe07 	bl	bcdac <_Bfree>
   bc19e:	4631      	mov	r1, r6
   bc1a0:	4620      	mov	r0, r4
   bc1a2:	f000 fe03 	bl	bcdac <_Bfree>
   bc1a6:	4629      	mov	r1, r5
   bc1a8:	4620      	mov	r0, r4
   bc1aa:	f000 fdff 	bl	bcdac <_Bfree>
   bc1ae:	e61a      	b.n	bbde6 <_strtod_l+0x666>
   bc1b0:	f1ba 0f00 	cmp.w	sl, #0
   bc1b4:	d11b      	bne.n	bc1ee <_strtod_l+0xa6e>
   bc1b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc1ba:	b9f3      	cbnz	r3, bc1fa <_strtod_l+0xa7a>
   bc1bc:	4b6c      	ldr	r3, [pc, #432]	; (bc370 <_strtod_l+0xbf0>)
   bc1be:	2200      	movs	r2, #0
   bc1c0:	4640      	mov	r0, r8
   bc1c2:	4649      	mov	r1, r9
   bc1c4:	f7ff f92c 	bl	bb420 <__aeabi_dcmplt>
   bc1c8:	b9d0      	cbnz	r0, bc200 <_strtod_l+0xa80>
   bc1ca:	4640      	mov	r0, r8
   bc1cc:	4649      	mov	r1, r9
   bc1ce:	4b6c      	ldr	r3, [pc, #432]	; (bc380 <_strtod_l+0xc00>)
   bc1d0:	2200      	movs	r2, #0
   bc1d2:	f7fe feb3 	bl	baf3c <__aeabi_dmul>
   bc1d6:	4680      	mov	r8, r0
   bc1d8:	4689      	mov	r9, r1
   bc1da:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bc1de:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bc1e2:	9315      	str	r3, [sp, #84]	; 0x54
   bc1e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bc1e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc1ec:	e79d      	b.n	bc12a <_strtod_l+0x9aa>
   bc1ee:	f1ba 0f01 	cmp.w	sl, #1
   bc1f2:	d102      	bne.n	bc1fa <_strtod_l+0xa7a>
   bc1f4:	2f00      	cmp	r7, #0
   bc1f6:	f43f ad83 	beq.w	bbd00 <_strtod_l+0x580>
   bc1fa:	4b62      	ldr	r3, [pc, #392]	; (bc384 <_strtod_l+0xc04>)
   bc1fc:	2200      	movs	r2, #0
   bc1fe:	e78e      	b.n	bc11e <_strtod_l+0x99e>
   bc200:	f8df 917c 	ldr.w	r9, [pc, #380]	; bc380 <_strtod_l+0xc00>
   bc204:	f04f 0800 	mov.w	r8, #0
   bc208:	e7e7      	b.n	bc1da <_strtod_l+0xa5a>
   bc20a:	4b5d      	ldr	r3, [pc, #372]	; (bc380 <_strtod_l+0xc00>)
   bc20c:	4640      	mov	r0, r8
   bc20e:	4649      	mov	r1, r9
   bc210:	2200      	movs	r2, #0
   bc212:	f7fe fe93 	bl	baf3c <__aeabi_dmul>
   bc216:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc218:	4680      	mov	r8, r0
   bc21a:	4689      	mov	r9, r1
   bc21c:	b933      	cbnz	r3, bc22c <_strtod_l+0xaac>
   bc21e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bc222:	900e      	str	r0, [sp, #56]	; 0x38
   bc224:	930f      	str	r3, [sp, #60]	; 0x3c
   bc226:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bc22a:	e7dd      	b.n	bc1e8 <_strtod_l+0xa68>
   bc22c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bc230:	e7f9      	b.n	bc226 <_strtod_l+0xaa6>
   bc232:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bc236:	9b04      	ldr	r3, [sp, #16]
   bc238:	2b00      	cmp	r3, #0
   bc23a:	d1a8      	bne.n	bc18e <_strtod_l+0xa0e>
   bc23c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bc240:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc242:	0d1b      	lsrs	r3, r3, #20
   bc244:	051b      	lsls	r3, r3, #20
   bc246:	429a      	cmp	r2, r3
   bc248:	d1a1      	bne.n	bc18e <_strtod_l+0xa0e>
   bc24a:	4640      	mov	r0, r8
   bc24c:	4649      	mov	r1, r9
   bc24e:	f001 fa5b 	bl	bd708 <__aeabi_d2lz>
   bc252:	f7fe fe45 	bl	baee0 <__aeabi_l2d>
   bc256:	4602      	mov	r2, r0
   bc258:	460b      	mov	r3, r1
   bc25a:	4640      	mov	r0, r8
   bc25c:	4649      	mov	r1, r9
   bc25e:	f7fe fcb5 	bl	babcc <__aeabi_dsub>
   bc262:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bc264:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc268:	ea43 030a 	orr.w	r3, r3, sl
   bc26c:	4313      	orrs	r3, r2
   bc26e:	4680      	mov	r8, r0
   bc270:	4689      	mov	r9, r1
   bc272:	d055      	beq.n	bc320 <_strtod_l+0xba0>
   bc274:	a336      	add	r3, pc, #216	; (adr r3, bc350 <_strtod_l+0xbd0>)
   bc276:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc27a:	f7ff f8d1 	bl	bb420 <__aeabi_dcmplt>
   bc27e:	2800      	cmp	r0, #0
   bc280:	f47f acd0 	bne.w	bbc24 <_strtod_l+0x4a4>
   bc284:	a334      	add	r3, pc, #208	; (adr r3, bc358 <_strtod_l+0xbd8>)
   bc286:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc28a:	4640      	mov	r0, r8
   bc28c:	4649      	mov	r1, r9
   bc28e:	f7ff f8e5 	bl	bb45c <__aeabi_dcmpgt>
   bc292:	2800      	cmp	r0, #0
   bc294:	f43f af7b 	beq.w	bc18e <_strtod_l+0xa0e>
   bc298:	e4c4      	b.n	bbc24 <_strtod_l+0x4a4>
   bc29a:	9b04      	ldr	r3, [sp, #16]
   bc29c:	b333      	cbz	r3, bc2ec <_strtod_l+0xb6c>
   bc29e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bc2a0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bc2a4:	d822      	bhi.n	bc2ec <_strtod_l+0xb6c>
   bc2a6:	a32e      	add	r3, pc, #184	; (adr r3, bc360 <_strtod_l+0xbe0>)
   bc2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc2ac:	4640      	mov	r0, r8
   bc2ae:	4649      	mov	r1, r9
   bc2b0:	f7ff f8c0 	bl	bb434 <__aeabi_dcmple>
   bc2b4:	b1a0      	cbz	r0, bc2e0 <_strtod_l+0xb60>
   bc2b6:	4649      	mov	r1, r9
   bc2b8:	4640      	mov	r0, r8
   bc2ba:	f7ff f8ef 	bl	bb49c <__aeabi_d2uiz>
   bc2be:	2801      	cmp	r0, #1
   bc2c0:	bf38      	it	cc
   bc2c2:	2001      	movcc	r0, #1
   bc2c4:	f7fe fdc0 	bl	bae48 <__aeabi_ui2d>
   bc2c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc2ca:	4680      	mov	r8, r0
   bc2cc:	4689      	mov	r9, r1
   bc2ce:	bb23      	cbnz	r3, bc31a <_strtod_l+0xb9a>
   bc2d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bc2d4:	9010      	str	r0, [sp, #64]	; 0x40
   bc2d6:	9311      	str	r3, [sp, #68]	; 0x44
   bc2d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bc2dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc2e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bc2e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc2e4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bc2e8:	1a9b      	subs	r3, r3, r2
   bc2ea:	9309      	str	r3, [sp, #36]	; 0x24
   bc2ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc2f0:	eeb0 0a48 	vmov.f32	s0, s16
   bc2f4:	eef0 0a68 	vmov.f32	s1, s17
   bc2f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bc2fc:	f001 f888 	bl	bd410 <__ulp>
   bc300:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc304:	ec53 2b10 	vmov	r2, r3, d0
   bc308:	f7fe fe18 	bl	baf3c <__aeabi_dmul>
   bc30c:	ec53 2b18 	vmov	r2, r3, d8
   bc310:	f7fe fc5e 	bl	babd0 <__adddf3>
   bc314:	4682      	mov	sl, r0
   bc316:	468b      	mov	fp, r1
   bc318:	e78d      	b.n	bc236 <_strtod_l+0xab6>
   bc31a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bc31e:	e7db      	b.n	bc2d8 <_strtod_l+0xb58>
   bc320:	a311      	add	r3, pc, #68	; (adr r3, bc368 <_strtod_l+0xbe8>)
   bc322:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc326:	f7ff f87b 	bl	bb420 <__aeabi_dcmplt>
   bc32a:	e7b2      	b.n	bc292 <_strtod_l+0xb12>
   bc32c:	2300      	movs	r3, #0
   bc32e:	930a      	str	r3, [sp, #40]	; 0x28
   bc330:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bc332:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc334:	6013      	str	r3, [r2, #0]
   bc336:	f7ff ba6b 	b.w	bb810 <_strtod_l+0x90>
   bc33a:	2a65      	cmp	r2, #101	; 0x65
   bc33c:	f43f ab5f 	beq.w	bb9fe <_strtod_l+0x27e>
   bc340:	2a45      	cmp	r2, #69	; 0x45
   bc342:	f43f ab5c 	beq.w	bb9fe <_strtod_l+0x27e>
   bc346:	2301      	movs	r3, #1
   bc348:	f7ff bb94 	b.w	bba74 <_strtod_l+0x2f4>
   bc34c:	f3af 8000 	nop.w
   bc350:	94a03595 	.word	0x94a03595
   bc354:	3fdfffff 	.word	0x3fdfffff
   bc358:	35afe535 	.word	0x35afe535
   bc35c:	3fe00000 	.word	0x3fe00000
   bc360:	ffc00000 	.word	0xffc00000
   bc364:	41dfffff 	.word	0x41dfffff
   bc368:	94a03595 	.word	0x94a03595
   bc36c:	3fcfffff 	.word	0x3fcfffff
   bc370:	3ff00000 	.word	0x3ff00000
   bc374:	7ff00000 	.word	0x7ff00000
   bc378:	7fe00000 	.word	0x7fe00000
   bc37c:	7c9fffff 	.word	0x7c9fffff
   bc380:	3fe00000 	.word	0x3fe00000
   bc384:	bff00000 	.word	0xbff00000
   bc388:	7fefffff 	.word	0x7fefffff

000bc38c <strtof>:
   bc38c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc390:	f8df 80ac 	ldr.w	r8, [pc, #172]	; bc440 <strtof+0xb4>
   bc394:	4b26      	ldr	r3, [pc, #152]	; (bc430 <strtof+0xa4>)
   bc396:	460a      	mov	r2, r1
   bc398:	ed2d 8b02 	vpush	{d8}
   bc39c:	4601      	mov	r1, r0
   bc39e:	f8d8 0000 	ldr.w	r0, [r8]
   bc3a2:	f7ff f9ed 	bl	bb780 <_strtod_l>
   bc3a6:	ec55 4b10 	vmov	r4, r5, d0
   bc3aa:	ee10 2a10 	vmov	r2, s0
   bc3ae:	ee10 0a10 	vmov	r0, s0
   bc3b2:	462b      	mov	r3, r5
   bc3b4:	4629      	mov	r1, r5
   bc3b6:	f7ff f85b 	bl	bb470 <__aeabi_dcmpun>
   bc3ba:	b190      	cbz	r0, bc3e2 <strtof+0x56>
   bc3bc:	2d00      	cmp	r5, #0
   bc3be:	481d      	ldr	r0, [pc, #116]	; (bc434 <strtof+0xa8>)
   bc3c0:	da09      	bge.n	bc3d6 <strtof+0x4a>
   bc3c2:	f001 f98d 	bl	bd6e0 <nanf>
   bc3c6:	eeb1 8a40 	vneg.f32	s16, s0
   bc3ca:	eeb0 0a48 	vmov.f32	s0, s16
   bc3ce:	ecbd 8b02 	vpop	{d8}
   bc3d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc3d6:	ecbd 8b02 	vpop	{d8}
   bc3da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bc3de:	f001 b97f 	b.w	bd6e0 <nanf>
   bc3e2:	4620      	mov	r0, r4
   bc3e4:	4629      	mov	r1, r5
   bc3e6:	f7ff f879 	bl	bb4dc <__aeabi_d2f>
   bc3ea:	ee08 0a10 	vmov	s16, r0
   bc3ee:	eddf 7a12 	vldr	s15, [pc, #72]	; bc438 <strtof+0xac>
   bc3f2:	eeb0 7ac8 	vabs.f32	s14, s16
   bc3f6:	eeb4 7a67 	vcmp.f32	s14, s15
   bc3fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bc3fe:	dde4      	ble.n	bc3ca <strtof+0x3e>
   bc400:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   bc404:	4b0d      	ldr	r3, [pc, #52]	; (bc43c <strtof+0xb0>)
   bc406:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc40a:	4620      	mov	r0, r4
   bc40c:	4639      	mov	r1, r7
   bc40e:	f7ff f82f 	bl	bb470 <__aeabi_dcmpun>
   bc412:	b940      	cbnz	r0, bc426 <strtof+0x9a>
   bc414:	4b09      	ldr	r3, [pc, #36]	; (bc43c <strtof+0xb0>)
   bc416:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc41a:	4620      	mov	r0, r4
   bc41c:	4639      	mov	r1, r7
   bc41e:	f7ff f809 	bl	bb434 <__aeabi_dcmple>
   bc422:	2800      	cmp	r0, #0
   bc424:	d0d1      	beq.n	bc3ca <strtof+0x3e>
   bc426:	f8d8 3000 	ldr.w	r3, [r8]
   bc42a:	2222      	movs	r2, #34	; 0x22
   bc42c:	601a      	str	r2, [r3, #0]
   bc42e:	e7cc      	b.n	bc3ca <strtof+0x3e>
   bc430:	20035360 	.word	0x20035360
   bc434:	000bdb72 	.word	0x000bdb72
   bc438:	7f7fffff 	.word	0x7f7fffff
   bc43c:	7fefffff 	.word	0x7fefffff
   bc440:	200352f4 	.word	0x200352f4

000bc444 <_strtol_l.constprop.0>:
   bc444:	2b01      	cmp	r3, #1
   bc446:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bc44a:	d001      	beq.n	bc450 <_strtol_l.constprop.0+0xc>
   bc44c:	2b24      	cmp	r3, #36	; 0x24
   bc44e:	d906      	bls.n	bc45e <_strtol_l.constprop.0+0x1a>
   bc450:	f7fb fe26 	bl	b80a0 <__errno>
   bc454:	2316      	movs	r3, #22
   bc456:	6003      	str	r3, [r0, #0]
   bc458:	2000      	movs	r0, #0
   bc45a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc45e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bc544 <_strtol_l.constprop.0+0x100>
   bc462:	460d      	mov	r5, r1
   bc464:	462e      	mov	r6, r5
   bc466:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc46a:	f814 700c 	ldrb.w	r7, [r4, ip]
   bc46e:	f017 0708 	ands.w	r7, r7, #8
   bc472:	d1f7      	bne.n	bc464 <_strtol_l.constprop.0+0x20>
   bc474:	2c2d      	cmp	r4, #45	; 0x2d
   bc476:	d132      	bne.n	bc4de <_strtol_l.constprop.0+0x9a>
   bc478:	782c      	ldrb	r4, [r5, #0]
   bc47a:	2701      	movs	r7, #1
   bc47c:	1cb5      	adds	r5, r6, #2
   bc47e:	2b00      	cmp	r3, #0
   bc480:	d05b      	beq.n	bc53a <_strtol_l.constprop.0+0xf6>
   bc482:	2b10      	cmp	r3, #16
   bc484:	d109      	bne.n	bc49a <_strtol_l.constprop.0+0x56>
   bc486:	2c30      	cmp	r4, #48	; 0x30
   bc488:	d107      	bne.n	bc49a <_strtol_l.constprop.0+0x56>
   bc48a:	782c      	ldrb	r4, [r5, #0]
   bc48c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bc490:	2c58      	cmp	r4, #88	; 0x58
   bc492:	d14d      	bne.n	bc530 <_strtol_l.constprop.0+0xec>
   bc494:	786c      	ldrb	r4, [r5, #1]
   bc496:	2310      	movs	r3, #16
   bc498:	3502      	adds	r5, #2
   bc49a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bc49e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bc4a2:	f04f 0c00 	mov.w	ip, #0
   bc4a6:	fbb8 f9f3 	udiv	r9, r8, r3
   bc4aa:	4666      	mov	r6, ip
   bc4ac:	fb03 8a19 	mls	sl, r3, r9, r8
   bc4b0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bc4b4:	f1be 0f09 	cmp.w	lr, #9
   bc4b8:	d816      	bhi.n	bc4e8 <_strtol_l.constprop.0+0xa4>
   bc4ba:	4674      	mov	r4, lr
   bc4bc:	42a3      	cmp	r3, r4
   bc4be:	dd24      	ble.n	bc50a <_strtol_l.constprop.0+0xc6>
   bc4c0:	f1bc 0f00 	cmp.w	ip, #0
   bc4c4:	db1e      	blt.n	bc504 <_strtol_l.constprop.0+0xc0>
   bc4c6:	45b1      	cmp	r9, r6
   bc4c8:	d31c      	bcc.n	bc504 <_strtol_l.constprop.0+0xc0>
   bc4ca:	d101      	bne.n	bc4d0 <_strtol_l.constprop.0+0x8c>
   bc4cc:	45a2      	cmp	sl, r4
   bc4ce:	db19      	blt.n	bc504 <_strtol_l.constprop.0+0xc0>
   bc4d0:	fb06 4603 	mla	r6, r6, r3, r4
   bc4d4:	f04f 0c01 	mov.w	ip, #1
   bc4d8:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc4dc:	e7e8      	b.n	bc4b0 <_strtol_l.constprop.0+0x6c>
   bc4de:	2c2b      	cmp	r4, #43	; 0x2b
   bc4e0:	bf04      	itt	eq
   bc4e2:	782c      	ldrbeq	r4, [r5, #0]
   bc4e4:	1cb5      	addeq	r5, r6, #2
   bc4e6:	e7ca      	b.n	bc47e <_strtol_l.constprop.0+0x3a>
   bc4e8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bc4ec:	f1be 0f19 	cmp.w	lr, #25
   bc4f0:	d801      	bhi.n	bc4f6 <_strtol_l.constprop.0+0xb2>
   bc4f2:	3c37      	subs	r4, #55	; 0x37
   bc4f4:	e7e2      	b.n	bc4bc <_strtol_l.constprop.0+0x78>
   bc4f6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bc4fa:	f1be 0f19 	cmp.w	lr, #25
   bc4fe:	d804      	bhi.n	bc50a <_strtol_l.constprop.0+0xc6>
   bc500:	3c57      	subs	r4, #87	; 0x57
   bc502:	e7db      	b.n	bc4bc <_strtol_l.constprop.0+0x78>
   bc504:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bc508:	e7e6      	b.n	bc4d8 <_strtol_l.constprop.0+0x94>
   bc50a:	f1bc 0f00 	cmp.w	ip, #0
   bc50e:	da05      	bge.n	bc51c <_strtol_l.constprop.0+0xd8>
   bc510:	2322      	movs	r3, #34	; 0x22
   bc512:	6003      	str	r3, [r0, #0]
   bc514:	4646      	mov	r6, r8
   bc516:	b942      	cbnz	r2, bc52a <_strtol_l.constprop.0+0xe6>
   bc518:	4630      	mov	r0, r6
   bc51a:	e79e      	b.n	bc45a <_strtol_l.constprop.0+0x16>
   bc51c:	b107      	cbz	r7, bc520 <_strtol_l.constprop.0+0xdc>
   bc51e:	4276      	negs	r6, r6
   bc520:	2a00      	cmp	r2, #0
   bc522:	d0f9      	beq.n	bc518 <_strtol_l.constprop.0+0xd4>
   bc524:	f1bc 0f00 	cmp.w	ip, #0
   bc528:	d000      	beq.n	bc52c <_strtol_l.constprop.0+0xe8>
   bc52a:	1e69      	subs	r1, r5, #1
   bc52c:	6011      	str	r1, [r2, #0]
   bc52e:	e7f3      	b.n	bc518 <_strtol_l.constprop.0+0xd4>
   bc530:	2430      	movs	r4, #48	; 0x30
   bc532:	2b00      	cmp	r3, #0
   bc534:	d1b1      	bne.n	bc49a <_strtol_l.constprop.0+0x56>
   bc536:	2308      	movs	r3, #8
   bc538:	e7af      	b.n	bc49a <_strtol_l.constprop.0+0x56>
   bc53a:	2c30      	cmp	r4, #48	; 0x30
   bc53c:	d0a5      	beq.n	bc48a <_strtol_l.constprop.0+0x46>
   bc53e:	230a      	movs	r3, #10
   bc540:	e7ab      	b.n	bc49a <_strtol_l.constprop.0+0x56>
   bc542:	bf00      	nop
   bc544:	000be159 	.word	0x000be159

000bc548 <strtol>:
   bc548:	4613      	mov	r3, r2
   bc54a:	460a      	mov	r2, r1
   bc54c:	4601      	mov	r1, r0
   bc54e:	4802      	ldr	r0, [pc, #8]	; (bc558 <strtol+0x10>)
   bc550:	6800      	ldr	r0, [r0, #0]
   bc552:	f7ff bf77 	b.w	bc444 <_strtol_l.constprop.0>
   bc556:	bf00      	nop
   bc558:	200352f4 	.word	0x200352f4

000bc55c <__register_exitproc>:
   bc55c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc560:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bc61c <__register_exitproc+0xc0>
   bc564:	4606      	mov	r6, r0
   bc566:	f8d8 0000 	ldr.w	r0, [r8]
   bc56a:	461f      	mov	r7, r3
   bc56c:	460d      	mov	r5, r1
   bc56e:	4691      	mov	r9, r2
   bc570:	f000 fbc6 	bl	bcd00 <__retarget_lock_acquire_recursive>
   bc574:	4b25      	ldr	r3, [pc, #148]	; (bc60c <__register_exitproc+0xb0>)
   bc576:	681c      	ldr	r4, [r3, #0]
   bc578:	b934      	cbnz	r4, bc588 <__register_exitproc+0x2c>
   bc57a:	4c25      	ldr	r4, [pc, #148]	; (bc610 <__register_exitproc+0xb4>)
   bc57c:	601c      	str	r4, [r3, #0]
   bc57e:	4b25      	ldr	r3, [pc, #148]	; (bc614 <__register_exitproc+0xb8>)
   bc580:	b113      	cbz	r3, bc588 <__register_exitproc+0x2c>
   bc582:	681b      	ldr	r3, [r3, #0]
   bc584:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bc588:	6863      	ldr	r3, [r4, #4]
   bc58a:	2b1f      	cmp	r3, #31
   bc58c:	dd07      	ble.n	bc59e <__register_exitproc+0x42>
   bc58e:	f8d8 0000 	ldr.w	r0, [r8]
   bc592:	f000 fbb7 	bl	bcd04 <__retarget_lock_release_recursive>
   bc596:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bc59a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc59e:	b34e      	cbz	r6, bc5f4 <__register_exitproc+0x98>
   bc5a0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bc5a4:	b988      	cbnz	r0, bc5ca <__register_exitproc+0x6e>
   bc5a6:	4b1c      	ldr	r3, [pc, #112]	; (bc618 <__register_exitproc+0xbc>)
   bc5a8:	b923      	cbnz	r3, bc5b4 <__register_exitproc+0x58>
   bc5aa:	f8d8 0000 	ldr.w	r0, [r8]
   bc5ae:	f000 fba8 	bl	bcd02 <__retarget_lock_release>
   bc5b2:	e7f0      	b.n	bc596 <__register_exitproc+0x3a>
   bc5b4:	f44f 7084 	mov.w	r0, #264	; 0x108
   bc5b8:	f7fb fd3a 	bl	b8030 <malloc>
   bc5bc:	2800      	cmp	r0, #0
   bc5be:	d0f4      	beq.n	bc5aa <__register_exitproc+0x4e>
   bc5c0:	2300      	movs	r3, #0
   bc5c2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bc5c6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bc5ca:	6863      	ldr	r3, [r4, #4]
   bc5cc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bc5d0:	2201      	movs	r2, #1
   bc5d2:	409a      	lsls	r2, r3
   bc5d4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bc5d8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bc5dc:	4313      	orrs	r3, r2
   bc5de:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bc5e2:	2e02      	cmp	r6, #2
   bc5e4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bc5e8:	bf02      	ittt	eq
   bc5ea:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bc5ee:	4313      	orreq	r3, r2
   bc5f0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bc5f4:	6863      	ldr	r3, [r4, #4]
   bc5f6:	f8d8 0000 	ldr.w	r0, [r8]
   bc5fa:	1c5a      	adds	r2, r3, #1
   bc5fc:	3302      	adds	r3, #2
   bc5fe:	6062      	str	r2, [r4, #4]
   bc600:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bc604:	f000 fb7e 	bl	bcd04 <__retarget_lock_release_recursive>
   bc608:	2000      	movs	r0, #0
   bc60a:	e7c6      	b.n	bc59a <__register_exitproc+0x3e>
   bc60c:	2003e7e8 	.word	0x2003e7e8
   bc610:	2003e75c 	.word	0x2003e75c
   bc614:	00000000 	.word	0x00000000
   bc618:	000b8031 	.word	0x000b8031
   bc61c:	20035358 	.word	0x20035358

000bc620 <rshift>:
   bc620:	6903      	ldr	r3, [r0, #16]
   bc622:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bc626:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc62a:	ea4f 1261 	mov.w	r2, r1, asr #5
   bc62e:	f100 0414 	add.w	r4, r0, #20
   bc632:	dd45      	ble.n	bc6c0 <rshift+0xa0>
   bc634:	f011 011f 	ands.w	r1, r1, #31
   bc638:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bc63c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bc640:	d10c      	bne.n	bc65c <rshift+0x3c>
   bc642:	f100 0710 	add.w	r7, r0, #16
   bc646:	4629      	mov	r1, r5
   bc648:	42b1      	cmp	r1, r6
   bc64a:	d334      	bcc.n	bc6b6 <rshift+0x96>
   bc64c:	1a9b      	subs	r3, r3, r2
   bc64e:	009b      	lsls	r3, r3, #2
   bc650:	1eea      	subs	r2, r5, #3
   bc652:	4296      	cmp	r6, r2
   bc654:	bf38      	it	cc
   bc656:	2300      	movcc	r3, #0
   bc658:	4423      	add	r3, r4
   bc65a:	e015      	b.n	bc688 <rshift+0x68>
   bc65c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bc660:	f1c1 0820 	rsb	r8, r1, #32
   bc664:	40cf      	lsrs	r7, r1
   bc666:	f105 0e04 	add.w	lr, r5, #4
   bc66a:	46a1      	mov	r9, r4
   bc66c:	4576      	cmp	r6, lr
   bc66e:	46f4      	mov	ip, lr
   bc670:	d815      	bhi.n	bc69e <rshift+0x7e>
   bc672:	1a9a      	subs	r2, r3, r2
   bc674:	0092      	lsls	r2, r2, #2
   bc676:	3a04      	subs	r2, #4
   bc678:	3501      	adds	r5, #1
   bc67a:	42ae      	cmp	r6, r5
   bc67c:	bf38      	it	cc
   bc67e:	2200      	movcc	r2, #0
   bc680:	18a3      	adds	r3, r4, r2
   bc682:	50a7      	str	r7, [r4, r2]
   bc684:	b107      	cbz	r7, bc688 <rshift+0x68>
   bc686:	3304      	adds	r3, #4
   bc688:	1b1a      	subs	r2, r3, r4
   bc68a:	42a3      	cmp	r3, r4
   bc68c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bc690:	bf08      	it	eq
   bc692:	2300      	moveq	r3, #0
   bc694:	6102      	str	r2, [r0, #16]
   bc696:	bf08      	it	eq
   bc698:	6143      	streq	r3, [r0, #20]
   bc69a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bc69e:	f8dc c000 	ldr.w	ip, [ip]
   bc6a2:	fa0c fc08 	lsl.w	ip, ip, r8
   bc6a6:	ea4c 0707 	orr.w	r7, ip, r7
   bc6aa:	f849 7b04 	str.w	r7, [r9], #4
   bc6ae:	f85e 7b04 	ldr.w	r7, [lr], #4
   bc6b2:	40cf      	lsrs	r7, r1
   bc6b4:	e7da      	b.n	bc66c <rshift+0x4c>
   bc6b6:	f851 cb04 	ldr.w	ip, [r1], #4
   bc6ba:	f847 cf04 	str.w	ip, [r7, #4]!
   bc6be:	e7c3      	b.n	bc648 <rshift+0x28>
   bc6c0:	4623      	mov	r3, r4
   bc6c2:	e7e1      	b.n	bc688 <rshift+0x68>

000bc6c4 <__hexdig_fun>:
   bc6c4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bc6c8:	2b09      	cmp	r3, #9
   bc6ca:	d802      	bhi.n	bc6d2 <__hexdig_fun+0xe>
   bc6cc:	3820      	subs	r0, #32
   bc6ce:	b2c0      	uxtb	r0, r0
   bc6d0:	4770      	bx	lr
   bc6d2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bc6d6:	2b05      	cmp	r3, #5
   bc6d8:	d801      	bhi.n	bc6de <__hexdig_fun+0x1a>
   bc6da:	3847      	subs	r0, #71	; 0x47
   bc6dc:	e7f7      	b.n	bc6ce <__hexdig_fun+0xa>
   bc6de:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bc6e2:	2b05      	cmp	r3, #5
   bc6e4:	d801      	bhi.n	bc6ea <__hexdig_fun+0x26>
   bc6e6:	3827      	subs	r0, #39	; 0x27
   bc6e8:	e7f1      	b.n	bc6ce <__hexdig_fun+0xa>
   bc6ea:	2000      	movs	r0, #0
   bc6ec:	4770      	bx	lr
	...

000bc6f0 <__gethex>:
   bc6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc6f4:	ed2d 8b02 	vpush	{d8}
   bc6f8:	b089      	sub	sp, #36	; 0x24
   bc6fa:	ee08 0a10 	vmov	s16, r0
   bc6fe:	9304      	str	r3, [sp, #16]
   bc700:	4bb4      	ldr	r3, [pc, #720]	; (bc9d4 <__gethex+0x2e4>)
   bc702:	681b      	ldr	r3, [r3, #0]
   bc704:	9301      	str	r3, [sp, #4]
   bc706:	4618      	mov	r0, r3
   bc708:	468b      	mov	fp, r1
   bc70a:	4690      	mov	r8, r2
   bc70c:	f7fe ffde 	bl	bb6cc <strlen>
   bc710:	9b01      	ldr	r3, [sp, #4]
   bc712:	f8db 2000 	ldr.w	r2, [fp]
   bc716:	4403      	add	r3, r0
   bc718:	4682      	mov	sl, r0
   bc71a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bc71e:	9305      	str	r3, [sp, #20]
   bc720:	1c93      	adds	r3, r2, #2
   bc722:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bc726:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bc72a:	32fe      	adds	r2, #254	; 0xfe
   bc72c:	18d1      	adds	r1, r2, r3
   bc72e:	461f      	mov	r7, r3
   bc730:	f813 0b01 	ldrb.w	r0, [r3], #1
   bc734:	9100      	str	r1, [sp, #0]
   bc736:	2830      	cmp	r0, #48	; 0x30
   bc738:	d0f8      	beq.n	bc72c <__gethex+0x3c>
   bc73a:	f7ff ffc3 	bl	bc6c4 <__hexdig_fun>
   bc73e:	4604      	mov	r4, r0
   bc740:	2800      	cmp	r0, #0
   bc742:	d13a      	bne.n	bc7ba <__gethex+0xca>
   bc744:	9901      	ldr	r1, [sp, #4]
   bc746:	4652      	mov	r2, sl
   bc748:	4638      	mov	r0, r7
   bc74a:	f7fe ffc7 	bl	bb6dc <strncmp>
   bc74e:	4605      	mov	r5, r0
   bc750:	2800      	cmp	r0, #0
   bc752:	d168      	bne.n	bc826 <__gethex+0x136>
   bc754:	f817 000a 	ldrb.w	r0, [r7, sl]
   bc758:	eb07 060a 	add.w	r6, r7, sl
   bc75c:	f7ff ffb2 	bl	bc6c4 <__hexdig_fun>
   bc760:	2800      	cmp	r0, #0
   bc762:	d062      	beq.n	bc82a <__gethex+0x13a>
   bc764:	4633      	mov	r3, r6
   bc766:	7818      	ldrb	r0, [r3, #0]
   bc768:	2830      	cmp	r0, #48	; 0x30
   bc76a:	461f      	mov	r7, r3
   bc76c:	f103 0301 	add.w	r3, r3, #1
   bc770:	d0f9      	beq.n	bc766 <__gethex+0x76>
   bc772:	f7ff ffa7 	bl	bc6c4 <__hexdig_fun>
   bc776:	2301      	movs	r3, #1
   bc778:	fab0 f480 	clz	r4, r0
   bc77c:	0964      	lsrs	r4, r4, #5
   bc77e:	4635      	mov	r5, r6
   bc780:	9300      	str	r3, [sp, #0]
   bc782:	463a      	mov	r2, r7
   bc784:	4616      	mov	r6, r2
   bc786:	3201      	adds	r2, #1
   bc788:	7830      	ldrb	r0, [r6, #0]
   bc78a:	f7ff ff9b 	bl	bc6c4 <__hexdig_fun>
   bc78e:	2800      	cmp	r0, #0
   bc790:	d1f8      	bne.n	bc784 <__gethex+0x94>
   bc792:	9901      	ldr	r1, [sp, #4]
   bc794:	4652      	mov	r2, sl
   bc796:	4630      	mov	r0, r6
   bc798:	f7fe ffa0 	bl	bb6dc <strncmp>
   bc79c:	b980      	cbnz	r0, bc7c0 <__gethex+0xd0>
   bc79e:	b94d      	cbnz	r5, bc7b4 <__gethex+0xc4>
   bc7a0:	eb06 050a 	add.w	r5, r6, sl
   bc7a4:	462a      	mov	r2, r5
   bc7a6:	4616      	mov	r6, r2
   bc7a8:	3201      	adds	r2, #1
   bc7aa:	7830      	ldrb	r0, [r6, #0]
   bc7ac:	f7ff ff8a 	bl	bc6c4 <__hexdig_fun>
   bc7b0:	2800      	cmp	r0, #0
   bc7b2:	d1f8      	bne.n	bc7a6 <__gethex+0xb6>
   bc7b4:	1bad      	subs	r5, r5, r6
   bc7b6:	00ad      	lsls	r5, r5, #2
   bc7b8:	e004      	b.n	bc7c4 <__gethex+0xd4>
   bc7ba:	2400      	movs	r4, #0
   bc7bc:	4625      	mov	r5, r4
   bc7be:	e7e0      	b.n	bc782 <__gethex+0x92>
   bc7c0:	2d00      	cmp	r5, #0
   bc7c2:	d1f7      	bne.n	bc7b4 <__gethex+0xc4>
   bc7c4:	7833      	ldrb	r3, [r6, #0]
   bc7c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bc7ca:	2b50      	cmp	r3, #80	; 0x50
   bc7cc:	d13b      	bne.n	bc846 <__gethex+0x156>
   bc7ce:	7873      	ldrb	r3, [r6, #1]
   bc7d0:	2b2b      	cmp	r3, #43	; 0x2b
   bc7d2:	d02c      	beq.n	bc82e <__gethex+0x13e>
   bc7d4:	2b2d      	cmp	r3, #45	; 0x2d
   bc7d6:	d02e      	beq.n	bc836 <__gethex+0x146>
   bc7d8:	1c71      	adds	r1, r6, #1
   bc7da:	f04f 0900 	mov.w	r9, #0
   bc7de:	7808      	ldrb	r0, [r1, #0]
   bc7e0:	f7ff ff70 	bl	bc6c4 <__hexdig_fun>
   bc7e4:	1e43      	subs	r3, r0, #1
   bc7e6:	b2db      	uxtb	r3, r3
   bc7e8:	2b18      	cmp	r3, #24
   bc7ea:	d82c      	bhi.n	bc846 <__gethex+0x156>
   bc7ec:	f1a0 0210 	sub.w	r2, r0, #16
   bc7f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bc7f4:	f7ff ff66 	bl	bc6c4 <__hexdig_fun>
   bc7f8:	1e43      	subs	r3, r0, #1
   bc7fa:	b2db      	uxtb	r3, r3
   bc7fc:	2b18      	cmp	r3, #24
   bc7fe:	d91d      	bls.n	bc83c <__gethex+0x14c>
   bc800:	f1b9 0f00 	cmp.w	r9, #0
   bc804:	d000      	beq.n	bc808 <__gethex+0x118>
   bc806:	4252      	negs	r2, r2
   bc808:	4415      	add	r5, r2
   bc80a:	f8cb 1000 	str.w	r1, [fp]
   bc80e:	b1e4      	cbz	r4, bc84a <__gethex+0x15a>
   bc810:	9b00      	ldr	r3, [sp, #0]
   bc812:	2b00      	cmp	r3, #0
   bc814:	bf14      	ite	ne
   bc816:	2700      	movne	r7, #0
   bc818:	2706      	moveq	r7, #6
   bc81a:	4638      	mov	r0, r7
   bc81c:	b009      	add	sp, #36	; 0x24
   bc81e:	ecbd 8b02 	vpop	{d8}
   bc822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc826:	463e      	mov	r6, r7
   bc828:	4625      	mov	r5, r4
   bc82a:	2401      	movs	r4, #1
   bc82c:	e7ca      	b.n	bc7c4 <__gethex+0xd4>
   bc82e:	f04f 0900 	mov.w	r9, #0
   bc832:	1cb1      	adds	r1, r6, #2
   bc834:	e7d3      	b.n	bc7de <__gethex+0xee>
   bc836:	f04f 0901 	mov.w	r9, #1
   bc83a:	e7fa      	b.n	bc832 <__gethex+0x142>
   bc83c:	230a      	movs	r3, #10
   bc83e:	fb03 0202 	mla	r2, r3, r2, r0
   bc842:	3a10      	subs	r2, #16
   bc844:	e7d4      	b.n	bc7f0 <__gethex+0x100>
   bc846:	4631      	mov	r1, r6
   bc848:	e7df      	b.n	bc80a <__gethex+0x11a>
   bc84a:	1bf3      	subs	r3, r6, r7
   bc84c:	3b01      	subs	r3, #1
   bc84e:	4621      	mov	r1, r4
   bc850:	2b07      	cmp	r3, #7
   bc852:	dc0b      	bgt.n	bc86c <__gethex+0x17c>
   bc854:	ee18 0a10 	vmov	r0, s16
   bc858:	f000 fa68 	bl	bcd2c <_Balloc>
   bc85c:	4604      	mov	r4, r0
   bc85e:	b940      	cbnz	r0, bc872 <__gethex+0x182>
   bc860:	4b5d      	ldr	r3, [pc, #372]	; (bc9d8 <__gethex+0x2e8>)
   bc862:	4602      	mov	r2, r0
   bc864:	21de      	movs	r1, #222	; 0xde
   bc866:	485d      	ldr	r0, [pc, #372]	; (bc9dc <__gethex+0x2ec>)
   bc868:	f7fb fc22 	bl	b80b0 <__assert_func>
   bc86c:	3101      	adds	r1, #1
   bc86e:	105b      	asrs	r3, r3, #1
   bc870:	e7ee      	b.n	bc850 <__gethex+0x160>
   bc872:	f100 0914 	add.w	r9, r0, #20
   bc876:	f04f 0b00 	mov.w	fp, #0
   bc87a:	f1ca 0301 	rsb	r3, sl, #1
   bc87e:	f8cd 9008 	str.w	r9, [sp, #8]
   bc882:	f8cd b000 	str.w	fp, [sp]
   bc886:	9306      	str	r3, [sp, #24]
   bc888:	42b7      	cmp	r7, r6
   bc88a:	d340      	bcc.n	bc90e <__gethex+0x21e>
   bc88c:	9802      	ldr	r0, [sp, #8]
   bc88e:	9b00      	ldr	r3, [sp, #0]
   bc890:	f840 3b04 	str.w	r3, [r0], #4
   bc894:	eba0 0009 	sub.w	r0, r0, r9
   bc898:	1080      	asrs	r0, r0, #2
   bc89a:	0146      	lsls	r6, r0, #5
   bc89c:	6120      	str	r0, [r4, #16]
   bc89e:	4618      	mov	r0, r3
   bc8a0:	f000 fb36 	bl	bcf10 <__hi0bits>
   bc8a4:	1a30      	subs	r0, r6, r0
   bc8a6:	f8d8 6000 	ldr.w	r6, [r8]
   bc8aa:	42b0      	cmp	r0, r6
   bc8ac:	dd63      	ble.n	bc976 <__gethex+0x286>
   bc8ae:	1b87      	subs	r7, r0, r6
   bc8b0:	4639      	mov	r1, r7
   bc8b2:	4620      	mov	r0, r4
   bc8b4:	f000 feda 	bl	bd66c <__any_on>
   bc8b8:	4682      	mov	sl, r0
   bc8ba:	b1a8      	cbz	r0, bc8e8 <__gethex+0x1f8>
   bc8bc:	1e7b      	subs	r3, r7, #1
   bc8be:	1159      	asrs	r1, r3, #5
   bc8c0:	f003 021f 	and.w	r2, r3, #31
   bc8c4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bc8c8:	f04f 0a01 	mov.w	sl, #1
   bc8cc:	fa0a f202 	lsl.w	r2, sl, r2
   bc8d0:	420a      	tst	r2, r1
   bc8d2:	d009      	beq.n	bc8e8 <__gethex+0x1f8>
   bc8d4:	4553      	cmp	r3, sl
   bc8d6:	dd05      	ble.n	bc8e4 <__gethex+0x1f4>
   bc8d8:	1eb9      	subs	r1, r7, #2
   bc8da:	4620      	mov	r0, r4
   bc8dc:	f000 fec6 	bl	bd66c <__any_on>
   bc8e0:	2800      	cmp	r0, #0
   bc8e2:	d145      	bne.n	bc970 <__gethex+0x280>
   bc8e4:	f04f 0a02 	mov.w	sl, #2
   bc8e8:	4639      	mov	r1, r7
   bc8ea:	4620      	mov	r0, r4
   bc8ec:	f7ff fe98 	bl	bc620 <rshift>
   bc8f0:	443d      	add	r5, r7
   bc8f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bc8f6:	42ab      	cmp	r3, r5
   bc8f8:	da4c      	bge.n	bc994 <__gethex+0x2a4>
   bc8fa:	ee18 0a10 	vmov	r0, s16
   bc8fe:	4621      	mov	r1, r4
   bc900:	f000 fa54 	bl	bcdac <_Bfree>
   bc904:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bc906:	2300      	movs	r3, #0
   bc908:	6013      	str	r3, [r2, #0]
   bc90a:	27a3      	movs	r7, #163	; 0xa3
   bc90c:	e785      	b.n	bc81a <__gethex+0x12a>
   bc90e:	1e73      	subs	r3, r6, #1
   bc910:	9a05      	ldr	r2, [sp, #20]
   bc912:	9303      	str	r3, [sp, #12]
   bc914:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bc918:	4293      	cmp	r3, r2
   bc91a:	d019      	beq.n	bc950 <__gethex+0x260>
   bc91c:	f1bb 0f20 	cmp.w	fp, #32
   bc920:	d107      	bne.n	bc932 <__gethex+0x242>
   bc922:	9b02      	ldr	r3, [sp, #8]
   bc924:	9a00      	ldr	r2, [sp, #0]
   bc926:	f843 2b04 	str.w	r2, [r3], #4
   bc92a:	9302      	str	r3, [sp, #8]
   bc92c:	2300      	movs	r3, #0
   bc92e:	9300      	str	r3, [sp, #0]
   bc930:	469b      	mov	fp, r3
   bc932:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bc936:	f7ff fec5 	bl	bc6c4 <__hexdig_fun>
   bc93a:	9b00      	ldr	r3, [sp, #0]
   bc93c:	f000 000f 	and.w	r0, r0, #15
   bc940:	fa00 f00b 	lsl.w	r0, r0, fp
   bc944:	4303      	orrs	r3, r0
   bc946:	9300      	str	r3, [sp, #0]
   bc948:	f10b 0b04 	add.w	fp, fp, #4
   bc94c:	9b03      	ldr	r3, [sp, #12]
   bc94e:	e00d      	b.n	bc96c <__gethex+0x27c>
   bc950:	9b03      	ldr	r3, [sp, #12]
   bc952:	9a06      	ldr	r2, [sp, #24]
   bc954:	4413      	add	r3, r2
   bc956:	42bb      	cmp	r3, r7
   bc958:	d3e0      	bcc.n	bc91c <__gethex+0x22c>
   bc95a:	4618      	mov	r0, r3
   bc95c:	9901      	ldr	r1, [sp, #4]
   bc95e:	9307      	str	r3, [sp, #28]
   bc960:	4652      	mov	r2, sl
   bc962:	f7fe febb 	bl	bb6dc <strncmp>
   bc966:	9b07      	ldr	r3, [sp, #28]
   bc968:	2800      	cmp	r0, #0
   bc96a:	d1d7      	bne.n	bc91c <__gethex+0x22c>
   bc96c:	461e      	mov	r6, r3
   bc96e:	e78b      	b.n	bc888 <__gethex+0x198>
   bc970:	f04f 0a03 	mov.w	sl, #3
   bc974:	e7b8      	b.n	bc8e8 <__gethex+0x1f8>
   bc976:	da0a      	bge.n	bc98e <__gethex+0x29e>
   bc978:	1a37      	subs	r7, r6, r0
   bc97a:	4621      	mov	r1, r4
   bc97c:	ee18 0a10 	vmov	r0, s16
   bc980:	463a      	mov	r2, r7
   bc982:	f000 fc2f 	bl	bd1e4 <__lshift>
   bc986:	1bed      	subs	r5, r5, r7
   bc988:	4604      	mov	r4, r0
   bc98a:	f100 0914 	add.w	r9, r0, #20
   bc98e:	f04f 0a00 	mov.w	sl, #0
   bc992:	e7ae      	b.n	bc8f2 <__gethex+0x202>
   bc994:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bc998:	42a8      	cmp	r0, r5
   bc99a:	dd72      	ble.n	bca82 <__gethex+0x392>
   bc99c:	1b45      	subs	r5, r0, r5
   bc99e:	42ae      	cmp	r6, r5
   bc9a0:	dc36      	bgt.n	bca10 <__gethex+0x320>
   bc9a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bc9a6:	2b02      	cmp	r3, #2
   bc9a8:	d02a      	beq.n	bca00 <__gethex+0x310>
   bc9aa:	2b03      	cmp	r3, #3
   bc9ac:	d02c      	beq.n	bca08 <__gethex+0x318>
   bc9ae:	2b01      	cmp	r3, #1
   bc9b0:	d11c      	bne.n	bc9ec <__gethex+0x2fc>
   bc9b2:	42ae      	cmp	r6, r5
   bc9b4:	d11a      	bne.n	bc9ec <__gethex+0x2fc>
   bc9b6:	2e01      	cmp	r6, #1
   bc9b8:	d112      	bne.n	bc9e0 <__gethex+0x2f0>
   bc9ba:	9a04      	ldr	r2, [sp, #16]
   bc9bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bc9c0:	6013      	str	r3, [r2, #0]
   bc9c2:	2301      	movs	r3, #1
   bc9c4:	6123      	str	r3, [r4, #16]
   bc9c6:	f8c9 3000 	str.w	r3, [r9]
   bc9ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bc9cc:	2762      	movs	r7, #98	; 0x62
   bc9ce:	601c      	str	r4, [r3, #0]
   bc9d0:	e723      	b.n	bc81a <__gethex+0x12a>
   bc9d2:	bf00      	nop
   bc9d4:	000be2cc 	.word	0x000be2cc
   bc9d8:	000be259 	.word	0x000be259
   bc9dc:	000be26a 	.word	0x000be26a
   bc9e0:	1e71      	subs	r1, r6, #1
   bc9e2:	4620      	mov	r0, r4
   bc9e4:	f000 fe42 	bl	bd66c <__any_on>
   bc9e8:	2800      	cmp	r0, #0
   bc9ea:	d1e6      	bne.n	bc9ba <__gethex+0x2ca>
   bc9ec:	ee18 0a10 	vmov	r0, s16
   bc9f0:	4621      	mov	r1, r4
   bc9f2:	f000 f9db 	bl	bcdac <_Bfree>
   bc9f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bc9f8:	2300      	movs	r3, #0
   bc9fa:	6013      	str	r3, [r2, #0]
   bc9fc:	2750      	movs	r7, #80	; 0x50
   bc9fe:	e70c      	b.n	bc81a <__gethex+0x12a>
   bca00:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bca02:	2b00      	cmp	r3, #0
   bca04:	d1f2      	bne.n	bc9ec <__gethex+0x2fc>
   bca06:	e7d8      	b.n	bc9ba <__gethex+0x2ca>
   bca08:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bca0a:	2b00      	cmp	r3, #0
   bca0c:	d1d5      	bne.n	bc9ba <__gethex+0x2ca>
   bca0e:	e7ed      	b.n	bc9ec <__gethex+0x2fc>
   bca10:	1e6f      	subs	r7, r5, #1
   bca12:	f1ba 0f00 	cmp.w	sl, #0
   bca16:	d131      	bne.n	bca7c <__gethex+0x38c>
   bca18:	b127      	cbz	r7, bca24 <__gethex+0x334>
   bca1a:	4639      	mov	r1, r7
   bca1c:	4620      	mov	r0, r4
   bca1e:	f000 fe25 	bl	bd66c <__any_on>
   bca22:	4682      	mov	sl, r0
   bca24:	117b      	asrs	r3, r7, #5
   bca26:	2101      	movs	r1, #1
   bca28:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bca2c:	f007 071f 	and.w	r7, r7, #31
   bca30:	fa01 f707 	lsl.w	r7, r1, r7
   bca34:	421f      	tst	r7, r3
   bca36:	4629      	mov	r1, r5
   bca38:	4620      	mov	r0, r4
   bca3a:	bf18      	it	ne
   bca3c:	f04a 0a02 	orrne.w	sl, sl, #2
   bca40:	1b76      	subs	r6, r6, r5
   bca42:	f7ff fded 	bl	bc620 <rshift>
   bca46:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bca4a:	2702      	movs	r7, #2
   bca4c:	f1ba 0f00 	cmp.w	sl, #0
   bca50:	d048      	beq.n	bcae4 <__gethex+0x3f4>
   bca52:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bca56:	2b02      	cmp	r3, #2
   bca58:	d015      	beq.n	bca86 <__gethex+0x396>
   bca5a:	2b03      	cmp	r3, #3
   bca5c:	d017      	beq.n	bca8e <__gethex+0x39e>
   bca5e:	2b01      	cmp	r3, #1
   bca60:	d109      	bne.n	bca76 <__gethex+0x386>
   bca62:	f01a 0f02 	tst.w	sl, #2
   bca66:	d006      	beq.n	bca76 <__gethex+0x386>
   bca68:	f8d9 0000 	ldr.w	r0, [r9]
   bca6c:	ea4a 0a00 	orr.w	sl, sl, r0
   bca70:	f01a 0f01 	tst.w	sl, #1
   bca74:	d10e      	bne.n	bca94 <__gethex+0x3a4>
   bca76:	f047 0710 	orr.w	r7, r7, #16
   bca7a:	e033      	b.n	bcae4 <__gethex+0x3f4>
   bca7c:	f04f 0a01 	mov.w	sl, #1
   bca80:	e7d0      	b.n	bca24 <__gethex+0x334>
   bca82:	2701      	movs	r7, #1
   bca84:	e7e2      	b.n	bca4c <__gethex+0x35c>
   bca86:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bca88:	f1c3 0301 	rsb	r3, r3, #1
   bca8c:	9315      	str	r3, [sp, #84]	; 0x54
   bca8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bca90:	2b00      	cmp	r3, #0
   bca92:	d0f0      	beq.n	bca76 <__gethex+0x386>
   bca94:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bca98:	f104 0314 	add.w	r3, r4, #20
   bca9c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bcaa0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bcaa4:	f04f 0c00 	mov.w	ip, #0
   bcaa8:	4618      	mov	r0, r3
   bcaaa:	f853 2b04 	ldr.w	r2, [r3], #4
   bcaae:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bcab2:	d01c      	beq.n	bcaee <__gethex+0x3fe>
   bcab4:	3201      	adds	r2, #1
   bcab6:	6002      	str	r2, [r0, #0]
   bcab8:	2f02      	cmp	r7, #2
   bcaba:	f104 0314 	add.w	r3, r4, #20
   bcabe:	d13f      	bne.n	bcb40 <__gethex+0x450>
   bcac0:	f8d8 2000 	ldr.w	r2, [r8]
   bcac4:	3a01      	subs	r2, #1
   bcac6:	42b2      	cmp	r2, r6
   bcac8:	d10a      	bne.n	bcae0 <__gethex+0x3f0>
   bcaca:	1171      	asrs	r1, r6, #5
   bcacc:	2201      	movs	r2, #1
   bcace:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bcad2:	f006 061f 	and.w	r6, r6, #31
   bcad6:	fa02 f606 	lsl.w	r6, r2, r6
   bcada:	421e      	tst	r6, r3
   bcadc:	bf18      	it	ne
   bcade:	4617      	movne	r7, r2
   bcae0:	f047 0720 	orr.w	r7, r7, #32
   bcae4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bcae6:	601c      	str	r4, [r3, #0]
   bcae8:	9b04      	ldr	r3, [sp, #16]
   bcaea:	601d      	str	r5, [r3, #0]
   bcaec:	e695      	b.n	bc81a <__gethex+0x12a>
   bcaee:	4299      	cmp	r1, r3
   bcaf0:	f843 cc04 	str.w	ip, [r3, #-4]
   bcaf4:	d8d8      	bhi.n	bcaa8 <__gethex+0x3b8>
   bcaf6:	68a3      	ldr	r3, [r4, #8]
   bcaf8:	459b      	cmp	fp, r3
   bcafa:	db19      	blt.n	bcb30 <__gethex+0x440>
   bcafc:	6861      	ldr	r1, [r4, #4]
   bcafe:	ee18 0a10 	vmov	r0, s16
   bcb02:	3101      	adds	r1, #1
   bcb04:	f000 f912 	bl	bcd2c <_Balloc>
   bcb08:	4681      	mov	r9, r0
   bcb0a:	b918      	cbnz	r0, bcb14 <__gethex+0x424>
   bcb0c:	4b1a      	ldr	r3, [pc, #104]	; (bcb78 <__gethex+0x488>)
   bcb0e:	4602      	mov	r2, r0
   bcb10:	2184      	movs	r1, #132	; 0x84
   bcb12:	e6a8      	b.n	bc866 <__gethex+0x176>
   bcb14:	6922      	ldr	r2, [r4, #16]
   bcb16:	3202      	adds	r2, #2
   bcb18:	f104 010c 	add.w	r1, r4, #12
   bcb1c:	0092      	lsls	r2, r2, #2
   bcb1e:	300c      	adds	r0, #12
   bcb20:	f7fe fd64 	bl	bb5ec <memcpy>
   bcb24:	4621      	mov	r1, r4
   bcb26:	ee18 0a10 	vmov	r0, s16
   bcb2a:	f000 f93f 	bl	bcdac <_Bfree>
   bcb2e:	464c      	mov	r4, r9
   bcb30:	6923      	ldr	r3, [r4, #16]
   bcb32:	1c5a      	adds	r2, r3, #1
   bcb34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bcb38:	6122      	str	r2, [r4, #16]
   bcb3a:	2201      	movs	r2, #1
   bcb3c:	615a      	str	r2, [r3, #20]
   bcb3e:	e7bb      	b.n	bcab8 <__gethex+0x3c8>
   bcb40:	6922      	ldr	r2, [r4, #16]
   bcb42:	455a      	cmp	r2, fp
   bcb44:	dd0b      	ble.n	bcb5e <__gethex+0x46e>
   bcb46:	2101      	movs	r1, #1
   bcb48:	4620      	mov	r0, r4
   bcb4a:	f7ff fd69 	bl	bc620 <rshift>
   bcb4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bcb52:	3501      	adds	r5, #1
   bcb54:	42ab      	cmp	r3, r5
   bcb56:	f6ff aed0 	blt.w	bc8fa <__gethex+0x20a>
   bcb5a:	2701      	movs	r7, #1
   bcb5c:	e7c0      	b.n	bcae0 <__gethex+0x3f0>
   bcb5e:	f016 061f 	ands.w	r6, r6, #31
   bcb62:	d0fa      	beq.n	bcb5a <__gethex+0x46a>
   bcb64:	4453      	add	r3, sl
   bcb66:	f1c6 0620 	rsb	r6, r6, #32
   bcb6a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bcb6e:	f000 f9cf 	bl	bcf10 <__hi0bits>
   bcb72:	42b0      	cmp	r0, r6
   bcb74:	dbe7      	blt.n	bcb46 <__gethex+0x456>
   bcb76:	e7f0      	b.n	bcb5a <__gethex+0x46a>
   bcb78:	000be259 	.word	0x000be259

000bcb7c <L_shift>:
   bcb7c:	f1c2 0208 	rsb	r2, r2, #8
   bcb80:	0092      	lsls	r2, r2, #2
   bcb82:	b570      	push	{r4, r5, r6, lr}
   bcb84:	f1c2 0620 	rsb	r6, r2, #32
   bcb88:	6843      	ldr	r3, [r0, #4]
   bcb8a:	6804      	ldr	r4, [r0, #0]
   bcb8c:	fa03 f506 	lsl.w	r5, r3, r6
   bcb90:	432c      	orrs	r4, r5
   bcb92:	40d3      	lsrs	r3, r2
   bcb94:	6004      	str	r4, [r0, #0]
   bcb96:	f840 3f04 	str.w	r3, [r0, #4]!
   bcb9a:	4288      	cmp	r0, r1
   bcb9c:	d3f4      	bcc.n	bcb88 <L_shift+0xc>
   bcb9e:	bd70      	pop	{r4, r5, r6, pc}

000bcba0 <__match>:
   bcba0:	b530      	push	{r4, r5, lr}
   bcba2:	6803      	ldr	r3, [r0, #0]
   bcba4:	3301      	adds	r3, #1
   bcba6:	f811 4b01 	ldrb.w	r4, [r1], #1
   bcbaa:	b914      	cbnz	r4, bcbb2 <__match+0x12>
   bcbac:	6003      	str	r3, [r0, #0]
   bcbae:	2001      	movs	r0, #1
   bcbb0:	bd30      	pop	{r4, r5, pc}
   bcbb2:	f813 2b01 	ldrb.w	r2, [r3], #1
   bcbb6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bcbba:	2d19      	cmp	r5, #25
   bcbbc:	bf98      	it	ls
   bcbbe:	3220      	addls	r2, #32
   bcbc0:	42a2      	cmp	r2, r4
   bcbc2:	d0f0      	beq.n	bcba6 <__match+0x6>
   bcbc4:	2000      	movs	r0, #0
   bcbc6:	e7f3      	b.n	bcbb0 <__match+0x10>

000bcbc8 <__hexnan>:
   bcbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcbcc:	680b      	ldr	r3, [r1, #0]
   bcbce:	115e      	asrs	r6, r3, #5
   bcbd0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bcbd4:	f013 031f 	ands.w	r3, r3, #31
   bcbd8:	b087      	sub	sp, #28
   bcbda:	bf18      	it	ne
   bcbdc:	3604      	addne	r6, #4
   bcbde:	2500      	movs	r5, #0
   bcbe0:	1f37      	subs	r7, r6, #4
   bcbe2:	4690      	mov	r8, r2
   bcbe4:	6802      	ldr	r2, [r0, #0]
   bcbe6:	9301      	str	r3, [sp, #4]
   bcbe8:	4682      	mov	sl, r0
   bcbea:	f846 5c04 	str.w	r5, [r6, #-4]
   bcbee:	46b9      	mov	r9, r7
   bcbf0:	463c      	mov	r4, r7
   bcbf2:	9502      	str	r5, [sp, #8]
   bcbf4:	46ab      	mov	fp, r5
   bcbf6:	7851      	ldrb	r1, [r2, #1]
   bcbf8:	1c53      	adds	r3, r2, #1
   bcbfa:	9303      	str	r3, [sp, #12]
   bcbfc:	b341      	cbz	r1, bcc50 <__hexnan+0x88>
   bcbfe:	4608      	mov	r0, r1
   bcc00:	9205      	str	r2, [sp, #20]
   bcc02:	9104      	str	r1, [sp, #16]
   bcc04:	f7ff fd5e 	bl	bc6c4 <__hexdig_fun>
   bcc08:	2800      	cmp	r0, #0
   bcc0a:	d14f      	bne.n	bccac <__hexnan+0xe4>
   bcc0c:	9904      	ldr	r1, [sp, #16]
   bcc0e:	9a05      	ldr	r2, [sp, #20]
   bcc10:	2920      	cmp	r1, #32
   bcc12:	d818      	bhi.n	bcc46 <__hexnan+0x7e>
   bcc14:	9b02      	ldr	r3, [sp, #8]
   bcc16:	459b      	cmp	fp, r3
   bcc18:	dd13      	ble.n	bcc42 <__hexnan+0x7a>
   bcc1a:	454c      	cmp	r4, r9
   bcc1c:	d206      	bcs.n	bcc2c <__hexnan+0x64>
   bcc1e:	2d07      	cmp	r5, #7
   bcc20:	dc04      	bgt.n	bcc2c <__hexnan+0x64>
   bcc22:	462a      	mov	r2, r5
   bcc24:	4649      	mov	r1, r9
   bcc26:	4620      	mov	r0, r4
   bcc28:	f7ff ffa8 	bl	bcb7c <L_shift>
   bcc2c:	4544      	cmp	r4, r8
   bcc2e:	d950      	bls.n	bccd2 <__hexnan+0x10a>
   bcc30:	2300      	movs	r3, #0
   bcc32:	f1a4 0904 	sub.w	r9, r4, #4
   bcc36:	f844 3c04 	str.w	r3, [r4, #-4]
   bcc3a:	f8cd b008 	str.w	fp, [sp, #8]
   bcc3e:	464c      	mov	r4, r9
   bcc40:	461d      	mov	r5, r3
   bcc42:	9a03      	ldr	r2, [sp, #12]
   bcc44:	e7d7      	b.n	bcbf6 <__hexnan+0x2e>
   bcc46:	2929      	cmp	r1, #41	; 0x29
   bcc48:	d156      	bne.n	bccf8 <__hexnan+0x130>
   bcc4a:	3202      	adds	r2, #2
   bcc4c:	f8ca 2000 	str.w	r2, [sl]
   bcc50:	f1bb 0f00 	cmp.w	fp, #0
   bcc54:	d050      	beq.n	bccf8 <__hexnan+0x130>
   bcc56:	454c      	cmp	r4, r9
   bcc58:	d206      	bcs.n	bcc68 <__hexnan+0xa0>
   bcc5a:	2d07      	cmp	r5, #7
   bcc5c:	dc04      	bgt.n	bcc68 <__hexnan+0xa0>
   bcc5e:	462a      	mov	r2, r5
   bcc60:	4649      	mov	r1, r9
   bcc62:	4620      	mov	r0, r4
   bcc64:	f7ff ff8a 	bl	bcb7c <L_shift>
   bcc68:	4544      	cmp	r4, r8
   bcc6a:	d934      	bls.n	bccd6 <__hexnan+0x10e>
   bcc6c:	f1a8 0204 	sub.w	r2, r8, #4
   bcc70:	4623      	mov	r3, r4
   bcc72:	f853 1b04 	ldr.w	r1, [r3], #4
   bcc76:	f842 1f04 	str.w	r1, [r2, #4]!
   bcc7a:	429f      	cmp	r7, r3
   bcc7c:	d2f9      	bcs.n	bcc72 <__hexnan+0xaa>
   bcc7e:	1b3b      	subs	r3, r7, r4
   bcc80:	f023 0303 	bic.w	r3, r3, #3
   bcc84:	3304      	adds	r3, #4
   bcc86:	3401      	adds	r4, #1
   bcc88:	3e03      	subs	r6, #3
   bcc8a:	42b4      	cmp	r4, r6
   bcc8c:	bf88      	it	hi
   bcc8e:	2304      	movhi	r3, #4
   bcc90:	4443      	add	r3, r8
   bcc92:	2200      	movs	r2, #0
   bcc94:	f843 2b04 	str.w	r2, [r3], #4
   bcc98:	429f      	cmp	r7, r3
   bcc9a:	d2fb      	bcs.n	bcc94 <__hexnan+0xcc>
   bcc9c:	683b      	ldr	r3, [r7, #0]
   bcc9e:	b91b      	cbnz	r3, bcca8 <__hexnan+0xe0>
   bcca0:	4547      	cmp	r7, r8
   bcca2:	d127      	bne.n	bccf4 <__hexnan+0x12c>
   bcca4:	2301      	movs	r3, #1
   bcca6:	603b      	str	r3, [r7, #0]
   bcca8:	2005      	movs	r0, #5
   bccaa:	e026      	b.n	bccfa <__hexnan+0x132>
   bccac:	3501      	adds	r5, #1
   bccae:	2d08      	cmp	r5, #8
   bccb0:	f10b 0b01 	add.w	fp, fp, #1
   bccb4:	dd06      	ble.n	bccc4 <__hexnan+0xfc>
   bccb6:	4544      	cmp	r4, r8
   bccb8:	d9c3      	bls.n	bcc42 <__hexnan+0x7a>
   bccba:	2300      	movs	r3, #0
   bccbc:	f844 3c04 	str.w	r3, [r4, #-4]
   bccc0:	2501      	movs	r5, #1
   bccc2:	3c04      	subs	r4, #4
   bccc4:	6822      	ldr	r2, [r4, #0]
   bccc6:	f000 000f 	and.w	r0, r0, #15
   bccca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bccce:	6022      	str	r2, [r4, #0]
   bccd0:	e7b7      	b.n	bcc42 <__hexnan+0x7a>
   bccd2:	2508      	movs	r5, #8
   bccd4:	e7b5      	b.n	bcc42 <__hexnan+0x7a>
   bccd6:	9b01      	ldr	r3, [sp, #4]
   bccd8:	2b00      	cmp	r3, #0
   bccda:	d0df      	beq.n	bcc9c <__hexnan+0xd4>
   bccdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bcce0:	f1c3 0320 	rsb	r3, r3, #32
   bcce4:	fa22 f303 	lsr.w	r3, r2, r3
   bcce8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bccec:	401a      	ands	r2, r3
   bccee:	f846 2c04 	str.w	r2, [r6, #-4]
   bccf2:	e7d3      	b.n	bcc9c <__hexnan+0xd4>
   bccf4:	3f04      	subs	r7, #4
   bccf6:	e7d1      	b.n	bcc9c <__hexnan+0xd4>
   bccf8:	2004      	movs	r0, #4
   bccfa:	b007      	add	sp, #28
   bccfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bcd00 <__retarget_lock_acquire_recursive>:
   bcd00:	4770      	bx	lr

000bcd02 <__retarget_lock_release>:
   bcd02:	4770      	bx	lr

000bcd04 <__retarget_lock_release_recursive>:
   bcd04:	4770      	bx	lr

000bcd06 <__ascii_mbtowc>:
   bcd06:	b082      	sub	sp, #8
   bcd08:	b901      	cbnz	r1, bcd0c <__ascii_mbtowc+0x6>
   bcd0a:	a901      	add	r1, sp, #4
   bcd0c:	b142      	cbz	r2, bcd20 <__ascii_mbtowc+0x1a>
   bcd0e:	b14b      	cbz	r3, bcd24 <__ascii_mbtowc+0x1e>
   bcd10:	7813      	ldrb	r3, [r2, #0]
   bcd12:	600b      	str	r3, [r1, #0]
   bcd14:	7812      	ldrb	r2, [r2, #0]
   bcd16:	1e10      	subs	r0, r2, #0
   bcd18:	bf18      	it	ne
   bcd1a:	2001      	movne	r0, #1
   bcd1c:	b002      	add	sp, #8
   bcd1e:	4770      	bx	lr
   bcd20:	4610      	mov	r0, r2
   bcd22:	e7fb      	b.n	bcd1c <__ascii_mbtowc+0x16>
   bcd24:	f06f 0001 	mvn.w	r0, #1
   bcd28:	e7f8      	b.n	bcd1c <__ascii_mbtowc+0x16>
	...

000bcd2c <_Balloc>:
   bcd2c:	b570      	push	{r4, r5, r6, lr}
   bcd2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bcd30:	4604      	mov	r4, r0
   bcd32:	460d      	mov	r5, r1
   bcd34:	b976      	cbnz	r6, bcd54 <_Balloc+0x28>
   bcd36:	2010      	movs	r0, #16
   bcd38:	f7fb f97a 	bl	b8030 <malloc>
   bcd3c:	4602      	mov	r2, r0
   bcd3e:	6260      	str	r0, [r4, #36]	; 0x24
   bcd40:	b920      	cbnz	r0, bcd4c <_Balloc+0x20>
   bcd42:	4b18      	ldr	r3, [pc, #96]	; (bcda4 <_Balloc+0x78>)
   bcd44:	4818      	ldr	r0, [pc, #96]	; (bcda8 <_Balloc+0x7c>)
   bcd46:	2166      	movs	r1, #102	; 0x66
   bcd48:	f7fb f9b2 	bl	b80b0 <__assert_func>
   bcd4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bcd50:	6006      	str	r6, [r0, #0]
   bcd52:	60c6      	str	r6, [r0, #12]
   bcd54:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bcd56:	68f3      	ldr	r3, [r6, #12]
   bcd58:	b183      	cbz	r3, bcd7c <_Balloc+0x50>
   bcd5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bcd5c:	68db      	ldr	r3, [r3, #12]
   bcd5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bcd62:	b9b8      	cbnz	r0, bcd94 <_Balloc+0x68>
   bcd64:	2101      	movs	r1, #1
   bcd66:	fa01 f605 	lsl.w	r6, r1, r5
   bcd6a:	1d72      	adds	r2, r6, #5
   bcd6c:	0092      	lsls	r2, r2, #2
   bcd6e:	4620      	mov	r0, r4
   bcd70:	f000 fc9d 	bl	bd6ae <_calloc_r>
   bcd74:	b160      	cbz	r0, bcd90 <_Balloc+0x64>
   bcd76:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bcd7a:	e00e      	b.n	bcd9a <_Balloc+0x6e>
   bcd7c:	2221      	movs	r2, #33	; 0x21
   bcd7e:	2104      	movs	r1, #4
   bcd80:	4620      	mov	r0, r4
   bcd82:	f000 fc94 	bl	bd6ae <_calloc_r>
   bcd86:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bcd88:	60f0      	str	r0, [r6, #12]
   bcd8a:	68db      	ldr	r3, [r3, #12]
   bcd8c:	2b00      	cmp	r3, #0
   bcd8e:	d1e4      	bne.n	bcd5a <_Balloc+0x2e>
   bcd90:	2000      	movs	r0, #0
   bcd92:	bd70      	pop	{r4, r5, r6, pc}
   bcd94:	6802      	ldr	r2, [r0, #0]
   bcd96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bcd9a:	2300      	movs	r3, #0
   bcd9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bcda0:	e7f7      	b.n	bcd92 <_Balloc+0x66>
   bcda2:	bf00      	nop
   bcda4:	000be085 	.word	0x000be085
   bcda8:	000be2e0 	.word	0x000be2e0

000bcdac <_Bfree>:
   bcdac:	b570      	push	{r4, r5, r6, lr}
   bcdae:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bcdb0:	4605      	mov	r5, r0
   bcdb2:	460c      	mov	r4, r1
   bcdb4:	b976      	cbnz	r6, bcdd4 <_Bfree+0x28>
   bcdb6:	2010      	movs	r0, #16
   bcdb8:	f7fb f93a 	bl	b8030 <malloc>
   bcdbc:	4602      	mov	r2, r0
   bcdbe:	6268      	str	r0, [r5, #36]	; 0x24
   bcdc0:	b920      	cbnz	r0, bcdcc <_Bfree+0x20>
   bcdc2:	4b09      	ldr	r3, [pc, #36]	; (bcde8 <_Bfree+0x3c>)
   bcdc4:	4809      	ldr	r0, [pc, #36]	; (bcdec <_Bfree+0x40>)
   bcdc6:	218a      	movs	r1, #138	; 0x8a
   bcdc8:	f7fb f972 	bl	b80b0 <__assert_func>
   bcdcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bcdd0:	6006      	str	r6, [r0, #0]
   bcdd2:	60c6      	str	r6, [r0, #12]
   bcdd4:	b13c      	cbz	r4, bcde6 <_Bfree+0x3a>
   bcdd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bcdd8:	6862      	ldr	r2, [r4, #4]
   bcdda:	68db      	ldr	r3, [r3, #12]
   bcddc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bcde0:	6021      	str	r1, [r4, #0]
   bcde2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bcde6:	bd70      	pop	{r4, r5, r6, pc}
   bcde8:	000be085 	.word	0x000be085
   bcdec:	000be2e0 	.word	0x000be2e0

000bcdf0 <__multadd>:
   bcdf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bcdf4:	690d      	ldr	r5, [r1, #16]
   bcdf6:	4607      	mov	r7, r0
   bcdf8:	460c      	mov	r4, r1
   bcdfa:	461e      	mov	r6, r3
   bcdfc:	f101 0c14 	add.w	ip, r1, #20
   bce00:	2000      	movs	r0, #0
   bce02:	f8dc 3000 	ldr.w	r3, [ip]
   bce06:	b299      	uxth	r1, r3
   bce08:	fb02 6101 	mla	r1, r2, r1, r6
   bce0c:	0c1e      	lsrs	r6, r3, #16
   bce0e:	0c0b      	lsrs	r3, r1, #16
   bce10:	fb02 3306 	mla	r3, r2, r6, r3
   bce14:	b289      	uxth	r1, r1
   bce16:	3001      	adds	r0, #1
   bce18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bce1c:	4285      	cmp	r5, r0
   bce1e:	f84c 1b04 	str.w	r1, [ip], #4
   bce22:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bce26:	dcec      	bgt.n	bce02 <__multadd+0x12>
   bce28:	b30e      	cbz	r6, bce6e <__multadd+0x7e>
   bce2a:	68a3      	ldr	r3, [r4, #8]
   bce2c:	42ab      	cmp	r3, r5
   bce2e:	dc19      	bgt.n	bce64 <__multadd+0x74>
   bce30:	6861      	ldr	r1, [r4, #4]
   bce32:	4638      	mov	r0, r7
   bce34:	3101      	adds	r1, #1
   bce36:	f7ff ff79 	bl	bcd2c <_Balloc>
   bce3a:	4680      	mov	r8, r0
   bce3c:	b928      	cbnz	r0, bce4a <__multadd+0x5a>
   bce3e:	4602      	mov	r2, r0
   bce40:	4b0c      	ldr	r3, [pc, #48]	; (bce74 <__multadd+0x84>)
   bce42:	480d      	ldr	r0, [pc, #52]	; (bce78 <__multadd+0x88>)
   bce44:	21b5      	movs	r1, #181	; 0xb5
   bce46:	f7fb f933 	bl	b80b0 <__assert_func>
   bce4a:	6922      	ldr	r2, [r4, #16]
   bce4c:	3202      	adds	r2, #2
   bce4e:	f104 010c 	add.w	r1, r4, #12
   bce52:	0092      	lsls	r2, r2, #2
   bce54:	300c      	adds	r0, #12
   bce56:	f7fe fbc9 	bl	bb5ec <memcpy>
   bce5a:	4621      	mov	r1, r4
   bce5c:	4638      	mov	r0, r7
   bce5e:	f7ff ffa5 	bl	bcdac <_Bfree>
   bce62:	4644      	mov	r4, r8
   bce64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bce68:	3501      	adds	r5, #1
   bce6a:	615e      	str	r6, [r3, #20]
   bce6c:	6125      	str	r5, [r4, #16]
   bce6e:	4620      	mov	r0, r4
   bce70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bce74:	000be259 	.word	0x000be259
   bce78:	000be2e0 	.word	0x000be2e0

000bce7c <__s2b>:
   bce7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bce80:	460c      	mov	r4, r1
   bce82:	4615      	mov	r5, r2
   bce84:	461f      	mov	r7, r3
   bce86:	2209      	movs	r2, #9
   bce88:	3308      	adds	r3, #8
   bce8a:	4606      	mov	r6, r0
   bce8c:	fb93 f3f2 	sdiv	r3, r3, r2
   bce90:	2100      	movs	r1, #0
   bce92:	2201      	movs	r2, #1
   bce94:	429a      	cmp	r2, r3
   bce96:	db09      	blt.n	bceac <__s2b+0x30>
   bce98:	4630      	mov	r0, r6
   bce9a:	f7ff ff47 	bl	bcd2c <_Balloc>
   bce9e:	b940      	cbnz	r0, bceb2 <__s2b+0x36>
   bcea0:	4602      	mov	r2, r0
   bcea2:	4b19      	ldr	r3, [pc, #100]	; (bcf08 <__s2b+0x8c>)
   bcea4:	4819      	ldr	r0, [pc, #100]	; (bcf0c <__s2b+0x90>)
   bcea6:	21ce      	movs	r1, #206	; 0xce
   bcea8:	f7fb f902 	bl	b80b0 <__assert_func>
   bceac:	0052      	lsls	r2, r2, #1
   bceae:	3101      	adds	r1, #1
   bceb0:	e7f0      	b.n	bce94 <__s2b+0x18>
   bceb2:	9b08      	ldr	r3, [sp, #32]
   bceb4:	6143      	str	r3, [r0, #20]
   bceb6:	2d09      	cmp	r5, #9
   bceb8:	f04f 0301 	mov.w	r3, #1
   bcebc:	6103      	str	r3, [r0, #16]
   bcebe:	dd16      	ble.n	bceee <__s2b+0x72>
   bcec0:	f104 0909 	add.w	r9, r4, #9
   bcec4:	46c8      	mov	r8, r9
   bcec6:	442c      	add	r4, r5
   bcec8:	f818 3b01 	ldrb.w	r3, [r8], #1
   bcecc:	4601      	mov	r1, r0
   bcece:	3b30      	subs	r3, #48	; 0x30
   bced0:	220a      	movs	r2, #10
   bced2:	4630      	mov	r0, r6
   bced4:	f7ff ff8c 	bl	bcdf0 <__multadd>
   bced8:	45a0      	cmp	r8, r4
   bceda:	d1f5      	bne.n	bcec8 <__s2b+0x4c>
   bcedc:	f1a5 0408 	sub.w	r4, r5, #8
   bcee0:	444c      	add	r4, r9
   bcee2:	1b2d      	subs	r5, r5, r4
   bcee4:	1963      	adds	r3, r4, r5
   bcee6:	42bb      	cmp	r3, r7
   bcee8:	db04      	blt.n	bcef4 <__s2b+0x78>
   bceea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bceee:	340a      	adds	r4, #10
   bcef0:	2509      	movs	r5, #9
   bcef2:	e7f6      	b.n	bcee2 <__s2b+0x66>
   bcef4:	f814 3b01 	ldrb.w	r3, [r4], #1
   bcef8:	4601      	mov	r1, r0
   bcefa:	3b30      	subs	r3, #48	; 0x30
   bcefc:	220a      	movs	r2, #10
   bcefe:	4630      	mov	r0, r6
   bcf00:	f7ff ff76 	bl	bcdf0 <__multadd>
   bcf04:	e7ee      	b.n	bcee4 <__s2b+0x68>
   bcf06:	bf00      	nop
   bcf08:	000be259 	.word	0x000be259
   bcf0c:	000be2e0 	.word	0x000be2e0

000bcf10 <__hi0bits>:
   bcf10:	0c03      	lsrs	r3, r0, #16
   bcf12:	041b      	lsls	r3, r3, #16
   bcf14:	b9d3      	cbnz	r3, bcf4c <__hi0bits+0x3c>
   bcf16:	0400      	lsls	r0, r0, #16
   bcf18:	2310      	movs	r3, #16
   bcf1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bcf1e:	bf04      	itt	eq
   bcf20:	0200      	lsleq	r0, r0, #8
   bcf22:	3308      	addeq	r3, #8
   bcf24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bcf28:	bf04      	itt	eq
   bcf2a:	0100      	lsleq	r0, r0, #4
   bcf2c:	3304      	addeq	r3, #4
   bcf2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bcf32:	bf04      	itt	eq
   bcf34:	0080      	lsleq	r0, r0, #2
   bcf36:	3302      	addeq	r3, #2
   bcf38:	2800      	cmp	r0, #0
   bcf3a:	db05      	blt.n	bcf48 <__hi0bits+0x38>
   bcf3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bcf40:	f103 0301 	add.w	r3, r3, #1
   bcf44:	bf08      	it	eq
   bcf46:	2320      	moveq	r3, #32
   bcf48:	4618      	mov	r0, r3
   bcf4a:	4770      	bx	lr
   bcf4c:	2300      	movs	r3, #0
   bcf4e:	e7e4      	b.n	bcf1a <__hi0bits+0xa>

000bcf50 <__lo0bits>:
   bcf50:	6803      	ldr	r3, [r0, #0]
   bcf52:	f013 0207 	ands.w	r2, r3, #7
   bcf56:	4601      	mov	r1, r0
   bcf58:	d00b      	beq.n	bcf72 <__lo0bits+0x22>
   bcf5a:	07da      	lsls	r2, r3, #31
   bcf5c:	d423      	bmi.n	bcfa6 <__lo0bits+0x56>
   bcf5e:	0798      	lsls	r0, r3, #30
   bcf60:	bf49      	itett	mi
   bcf62:	085b      	lsrmi	r3, r3, #1
   bcf64:	089b      	lsrpl	r3, r3, #2
   bcf66:	2001      	movmi	r0, #1
   bcf68:	600b      	strmi	r3, [r1, #0]
   bcf6a:	bf5c      	itt	pl
   bcf6c:	600b      	strpl	r3, [r1, #0]
   bcf6e:	2002      	movpl	r0, #2
   bcf70:	4770      	bx	lr
   bcf72:	b298      	uxth	r0, r3
   bcf74:	b9a8      	cbnz	r0, bcfa2 <__lo0bits+0x52>
   bcf76:	0c1b      	lsrs	r3, r3, #16
   bcf78:	2010      	movs	r0, #16
   bcf7a:	b2da      	uxtb	r2, r3
   bcf7c:	b90a      	cbnz	r2, bcf82 <__lo0bits+0x32>
   bcf7e:	3008      	adds	r0, #8
   bcf80:	0a1b      	lsrs	r3, r3, #8
   bcf82:	071a      	lsls	r2, r3, #28
   bcf84:	bf04      	itt	eq
   bcf86:	091b      	lsreq	r3, r3, #4
   bcf88:	3004      	addeq	r0, #4
   bcf8a:	079a      	lsls	r2, r3, #30
   bcf8c:	bf04      	itt	eq
   bcf8e:	089b      	lsreq	r3, r3, #2
   bcf90:	3002      	addeq	r0, #2
   bcf92:	07da      	lsls	r2, r3, #31
   bcf94:	d403      	bmi.n	bcf9e <__lo0bits+0x4e>
   bcf96:	085b      	lsrs	r3, r3, #1
   bcf98:	f100 0001 	add.w	r0, r0, #1
   bcf9c:	d005      	beq.n	bcfaa <__lo0bits+0x5a>
   bcf9e:	600b      	str	r3, [r1, #0]
   bcfa0:	4770      	bx	lr
   bcfa2:	4610      	mov	r0, r2
   bcfa4:	e7e9      	b.n	bcf7a <__lo0bits+0x2a>
   bcfa6:	2000      	movs	r0, #0
   bcfa8:	4770      	bx	lr
   bcfaa:	2020      	movs	r0, #32
   bcfac:	4770      	bx	lr
	...

000bcfb0 <__i2b>:
   bcfb0:	b510      	push	{r4, lr}
   bcfb2:	460c      	mov	r4, r1
   bcfb4:	2101      	movs	r1, #1
   bcfb6:	f7ff feb9 	bl	bcd2c <_Balloc>
   bcfba:	4602      	mov	r2, r0
   bcfbc:	b928      	cbnz	r0, bcfca <__i2b+0x1a>
   bcfbe:	4b05      	ldr	r3, [pc, #20]	; (bcfd4 <__i2b+0x24>)
   bcfc0:	4805      	ldr	r0, [pc, #20]	; (bcfd8 <__i2b+0x28>)
   bcfc2:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bcfc6:	f7fb f873 	bl	b80b0 <__assert_func>
   bcfca:	2301      	movs	r3, #1
   bcfcc:	6144      	str	r4, [r0, #20]
   bcfce:	6103      	str	r3, [r0, #16]
   bcfd0:	bd10      	pop	{r4, pc}
   bcfd2:	bf00      	nop
   bcfd4:	000be259 	.word	0x000be259
   bcfd8:	000be2e0 	.word	0x000be2e0

000bcfdc <__multiply>:
   bcfdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcfe0:	4691      	mov	r9, r2
   bcfe2:	690a      	ldr	r2, [r1, #16]
   bcfe4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bcfe8:	429a      	cmp	r2, r3
   bcfea:	bfb8      	it	lt
   bcfec:	460b      	movlt	r3, r1
   bcfee:	460c      	mov	r4, r1
   bcff0:	bfbc      	itt	lt
   bcff2:	464c      	movlt	r4, r9
   bcff4:	4699      	movlt	r9, r3
   bcff6:	6927      	ldr	r7, [r4, #16]
   bcff8:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bcffc:	68a3      	ldr	r3, [r4, #8]
   bcffe:	6861      	ldr	r1, [r4, #4]
   bd000:	eb07 060a 	add.w	r6, r7, sl
   bd004:	42b3      	cmp	r3, r6
   bd006:	b085      	sub	sp, #20
   bd008:	bfb8      	it	lt
   bd00a:	3101      	addlt	r1, #1
   bd00c:	f7ff fe8e 	bl	bcd2c <_Balloc>
   bd010:	b930      	cbnz	r0, bd020 <__multiply+0x44>
   bd012:	4602      	mov	r2, r0
   bd014:	4b44      	ldr	r3, [pc, #272]	; (bd128 <__multiply+0x14c>)
   bd016:	4845      	ldr	r0, [pc, #276]	; (bd12c <__multiply+0x150>)
   bd018:	f240 115d 	movw	r1, #349	; 0x15d
   bd01c:	f7fb f848 	bl	b80b0 <__assert_func>
   bd020:	f100 0514 	add.w	r5, r0, #20
   bd024:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bd028:	462b      	mov	r3, r5
   bd02a:	2200      	movs	r2, #0
   bd02c:	4543      	cmp	r3, r8
   bd02e:	d321      	bcc.n	bd074 <__multiply+0x98>
   bd030:	f104 0314 	add.w	r3, r4, #20
   bd034:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bd038:	f109 0314 	add.w	r3, r9, #20
   bd03c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bd040:	9202      	str	r2, [sp, #8]
   bd042:	1b3a      	subs	r2, r7, r4
   bd044:	3a15      	subs	r2, #21
   bd046:	f022 0203 	bic.w	r2, r2, #3
   bd04a:	3204      	adds	r2, #4
   bd04c:	f104 0115 	add.w	r1, r4, #21
   bd050:	428f      	cmp	r7, r1
   bd052:	bf38      	it	cc
   bd054:	2204      	movcc	r2, #4
   bd056:	9201      	str	r2, [sp, #4]
   bd058:	9a02      	ldr	r2, [sp, #8]
   bd05a:	9303      	str	r3, [sp, #12]
   bd05c:	429a      	cmp	r2, r3
   bd05e:	d80c      	bhi.n	bd07a <__multiply+0x9e>
   bd060:	2e00      	cmp	r6, #0
   bd062:	dd03      	ble.n	bd06c <__multiply+0x90>
   bd064:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bd068:	2b00      	cmp	r3, #0
   bd06a:	d05a      	beq.n	bd122 <__multiply+0x146>
   bd06c:	6106      	str	r6, [r0, #16]
   bd06e:	b005      	add	sp, #20
   bd070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd074:	f843 2b04 	str.w	r2, [r3], #4
   bd078:	e7d8      	b.n	bd02c <__multiply+0x50>
   bd07a:	f8b3 a000 	ldrh.w	sl, [r3]
   bd07e:	f1ba 0f00 	cmp.w	sl, #0
   bd082:	d024      	beq.n	bd0ce <__multiply+0xf2>
   bd084:	f104 0e14 	add.w	lr, r4, #20
   bd088:	46a9      	mov	r9, r5
   bd08a:	f04f 0c00 	mov.w	ip, #0
   bd08e:	f85e 2b04 	ldr.w	r2, [lr], #4
   bd092:	f8d9 1000 	ldr.w	r1, [r9]
   bd096:	fa1f fb82 	uxth.w	fp, r2
   bd09a:	b289      	uxth	r1, r1
   bd09c:	fb0a 110b 	mla	r1, sl, fp, r1
   bd0a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bd0a4:	f8d9 2000 	ldr.w	r2, [r9]
   bd0a8:	4461      	add	r1, ip
   bd0aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bd0ae:	fb0a c20b 	mla	r2, sl, fp, ip
   bd0b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bd0b6:	b289      	uxth	r1, r1
   bd0b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bd0bc:	4577      	cmp	r7, lr
   bd0be:	f849 1b04 	str.w	r1, [r9], #4
   bd0c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bd0c6:	d8e2      	bhi.n	bd08e <__multiply+0xb2>
   bd0c8:	9a01      	ldr	r2, [sp, #4]
   bd0ca:	f845 c002 	str.w	ip, [r5, r2]
   bd0ce:	9a03      	ldr	r2, [sp, #12]
   bd0d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bd0d4:	3304      	adds	r3, #4
   bd0d6:	f1b9 0f00 	cmp.w	r9, #0
   bd0da:	d020      	beq.n	bd11e <__multiply+0x142>
   bd0dc:	6829      	ldr	r1, [r5, #0]
   bd0de:	f104 0c14 	add.w	ip, r4, #20
   bd0e2:	46ae      	mov	lr, r5
   bd0e4:	f04f 0a00 	mov.w	sl, #0
   bd0e8:	f8bc b000 	ldrh.w	fp, [ip]
   bd0ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bd0f0:	fb09 220b 	mla	r2, r9, fp, r2
   bd0f4:	4492      	add	sl, r2
   bd0f6:	b289      	uxth	r1, r1
   bd0f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bd0fc:	f84e 1b04 	str.w	r1, [lr], #4
   bd100:	f85c 2b04 	ldr.w	r2, [ip], #4
   bd104:	f8be 1000 	ldrh.w	r1, [lr]
   bd108:	0c12      	lsrs	r2, r2, #16
   bd10a:	fb09 1102 	mla	r1, r9, r2, r1
   bd10e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bd112:	4567      	cmp	r7, ip
   bd114:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bd118:	d8e6      	bhi.n	bd0e8 <__multiply+0x10c>
   bd11a:	9a01      	ldr	r2, [sp, #4]
   bd11c:	50a9      	str	r1, [r5, r2]
   bd11e:	3504      	adds	r5, #4
   bd120:	e79a      	b.n	bd058 <__multiply+0x7c>
   bd122:	3e01      	subs	r6, #1
   bd124:	e79c      	b.n	bd060 <__multiply+0x84>
   bd126:	bf00      	nop
   bd128:	000be259 	.word	0x000be259
   bd12c:	000be2e0 	.word	0x000be2e0

000bd130 <__pow5mult>:
   bd130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd134:	4615      	mov	r5, r2
   bd136:	f012 0203 	ands.w	r2, r2, #3
   bd13a:	4606      	mov	r6, r0
   bd13c:	460f      	mov	r7, r1
   bd13e:	d007      	beq.n	bd150 <__pow5mult+0x20>
   bd140:	4c25      	ldr	r4, [pc, #148]	; (bd1d8 <__pow5mult+0xa8>)
   bd142:	3a01      	subs	r2, #1
   bd144:	2300      	movs	r3, #0
   bd146:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bd14a:	f7ff fe51 	bl	bcdf0 <__multadd>
   bd14e:	4607      	mov	r7, r0
   bd150:	10ad      	asrs	r5, r5, #2
   bd152:	d03d      	beq.n	bd1d0 <__pow5mult+0xa0>
   bd154:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bd156:	b97c      	cbnz	r4, bd178 <__pow5mult+0x48>
   bd158:	2010      	movs	r0, #16
   bd15a:	f7fa ff69 	bl	b8030 <malloc>
   bd15e:	4602      	mov	r2, r0
   bd160:	6270      	str	r0, [r6, #36]	; 0x24
   bd162:	b928      	cbnz	r0, bd170 <__pow5mult+0x40>
   bd164:	4b1d      	ldr	r3, [pc, #116]	; (bd1dc <__pow5mult+0xac>)
   bd166:	481e      	ldr	r0, [pc, #120]	; (bd1e0 <__pow5mult+0xb0>)
   bd168:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bd16c:	f7fa ffa0 	bl	b80b0 <__assert_func>
   bd170:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bd174:	6004      	str	r4, [r0, #0]
   bd176:	60c4      	str	r4, [r0, #12]
   bd178:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bd17c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bd180:	b94c      	cbnz	r4, bd196 <__pow5mult+0x66>
   bd182:	f240 2171 	movw	r1, #625	; 0x271
   bd186:	4630      	mov	r0, r6
   bd188:	f7ff ff12 	bl	bcfb0 <__i2b>
   bd18c:	2300      	movs	r3, #0
   bd18e:	f8c8 0008 	str.w	r0, [r8, #8]
   bd192:	4604      	mov	r4, r0
   bd194:	6003      	str	r3, [r0, #0]
   bd196:	f04f 0900 	mov.w	r9, #0
   bd19a:	07eb      	lsls	r3, r5, #31
   bd19c:	d50a      	bpl.n	bd1b4 <__pow5mult+0x84>
   bd19e:	4639      	mov	r1, r7
   bd1a0:	4622      	mov	r2, r4
   bd1a2:	4630      	mov	r0, r6
   bd1a4:	f7ff ff1a 	bl	bcfdc <__multiply>
   bd1a8:	4639      	mov	r1, r7
   bd1aa:	4680      	mov	r8, r0
   bd1ac:	4630      	mov	r0, r6
   bd1ae:	f7ff fdfd 	bl	bcdac <_Bfree>
   bd1b2:	4647      	mov	r7, r8
   bd1b4:	106d      	asrs	r5, r5, #1
   bd1b6:	d00b      	beq.n	bd1d0 <__pow5mult+0xa0>
   bd1b8:	6820      	ldr	r0, [r4, #0]
   bd1ba:	b938      	cbnz	r0, bd1cc <__pow5mult+0x9c>
   bd1bc:	4622      	mov	r2, r4
   bd1be:	4621      	mov	r1, r4
   bd1c0:	4630      	mov	r0, r6
   bd1c2:	f7ff ff0b 	bl	bcfdc <__multiply>
   bd1c6:	6020      	str	r0, [r4, #0]
   bd1c8:	f8c0 9000 	str.w	r9, [r0]
   bd1cc:	4604      	mov	r4, r0
   bd1ce:	e7e4      	b.n	bd19a <__pow5mult+0x6a>
   bd1d0:	4638      	mov	r0, r7
   bd1d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bd1d6:	bf00      	nop
   bd1d8:	000be430 	.word	0x000be430
   bd1dc:	000be085 	.word	0x000be085
   bd1e0:	000be2e0 	.word	0x000be2e0

000bd1e4 <__lshift>:
   bd1e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bd1e8:	460c      	mov	r4, r1
   bd1ea:	6849      	ldr	r1, [r1, #4]
   bd1ec:	6923      	ldr	r3, [r4, #16]
   bd1ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bd1f2:	68a3      	ldr	r3, [r4, #8]
   bd1f4:	4607      	mov	r7, r0
   bd1f6:	4691      	mov	r9, r2
   bd1f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bd1fc:	f108 0601 	add.w	r6, r8, #1
   bd200:	42b3      	cmp	r3, r6
   bd202:	db0b      	blt.n	bd21c <__lshift+0x38>
   bd204:	4638      	mov	r0, r7
   bd206:	f7ff fd91 	bl	bcd2c <_Balloc>
   bd20a:	4605      	mov	r5, r0
   bd20c:	b948      	cbnz	r0, bd222 <__lshift+0x3e>
   bd20e:	4602      	mov	r2, r0
   bd210:	4b2a      	ldr	r3, [pc, #168]	; (bd2bc <__lshift+0xd8>)
   bd212:	482b      	ldr	r0, [pc, #172]	; (bd2c0 <__lshift+0xdc>)
   bd214:	f240 11d9 	movw	r1, #473	; 0x1d9
   bd218:	f7fa ff4a 	bl	b80b0 <__assert_func>
   bd21c:	3101      	adds	r1, #1
   bd21e:	005b      	lsls	r3, r3, #1
   bd220:	e7ee      	b.n	bd200 <__lshift+0x1c>
   bd222:	2300      	movs	r3, #0
   bd224:	f100 0114 	add.w	r1, r0, #20
   bd228:	f100 0210 	add.w	r2, r0, #16
   bd22c:	4618      	mov	r0, r3
   bd22e:	4553      	cmp	r3, sl
   bd230:	db37      	blt.n	bd2a2 <__lshift+0xbe>
   bd232:	6920      	ldr	r0, [r4, #16]
   bd234:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bd238:	f104 0314 	add.w	r3, r4, #20
   bd23c:	f019 091f 	ands.w	r9, r9, #31
   bd240:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bd244:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bd248:	d02f      	beq.n	bd2aa <__lshift+0xc6>
   bd24a:	f1c9 0e20 	rsb	lr, r9, #32
   bd24e:	468a      	mov	sl, r1
   bd250:	f04f 0c00 	mov.w	ip, #0
   bd254:	681a      	ldr	r2, [r3, #0]
   bd256:	fa02 f209 	lsl.w	r2, r2, r9
   bd25a:	ea42 020c 	orr.w	r2, r2, ip
   bd25e:	f84a 2b04 	str.w	r2, [sl], #4
   bd262:	f853 2b04 	ldr.w	r2, [r3], #4
   bd266:	4298      	cmp	r0, r3
   bd268:	fa22 fc0e 	lsr.w	ip, r2, lr
   bd26c:	d8f2      	bhi.n	bd254 <__lshift+0x70>
   bd26e:	1b03      	subs	r3, r0, r4
   bd270:	3b15      	subs	r3, #21
   bd272:	f023 0303 	bic.w	r3, r3, #3
   bd276:	3304      	adds	r3, #4
   bd278:	f104 0215 	add.w	r2, r4, #21
   bd27c:	4290      	cmp	r0, r2
   bd27e:	bf38      	it	cc
   bd280:	2304      	movcc	r3, #4
   bd282:	f841 c003 	str.w	ip, [r1, r3]
   bd286:	f1bc 0f00 	cmp.w	ip, #0
   bd28a:	d001      	beq.n	bd290 <__lshift+0xac>
   bd28c:	f108 0602 	add.w	r6, r8, #2
   bd290:	3e01      	subs	r6, #1
   bd292:	4638      	mov	r0, r7
   bd294:	612e      	str	r6, [r5, #16]
   bd296:	4621      	mov	r1, r4
   bd298:	f7ff fd88 	bl	bcdac <_Bfree>
   bd29c:	4628      	mov	r0, r5
   bd29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bd2a2:	f842 0f04 	str.w	r0, [r2, #4]!
   bd2a6:	3301      	adds	r3, #1
   bd2a8:	e7c1      	b.n	bd22e <__lshift+0x4a>
   bd2aa:	3904      	subs	r1, #4
   bd2ac:	f853 2b04 	ldr.w	r2, [r3], #4
   bd2b0:	f841 2f04 	str.w	r2, [r1, #4]!
   bd2b4:	4298      	cmp	r0, r3
   bd2b6:	d8f9      	bhi.n	bd2ac <__lshift+0xc8>
   bd2b8:	e7ea      	b.n	bd290 <__lshift+0xac>
   bd2ba:	bf00      	nop
   bd2bc:	000be259 	.word	0x000be259
   bd2c0:	000be2e0 	.word	0x000be2e0

000bd2c4 <__mcmp>:
   bd2c4:	b530      	push	{r4, r5, lr}
   bd2c6:	6902      	ldr	r2, [r0, #16]
   bd2c8:	690c      	ldr	r4, [r1, #16]
   bd2ca:	1b12      	subs	r2, r2, r4
   bd2cc:	d10e      	bne.n	bd2ec <__mcmp+0x28>
   bd2ce:	f100 0314 	add.w	r3, r0, #20
   bd2d2:	3114      	adds	r1, #20
   bd2d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bd2d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bd2dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bd2e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bd2e4:	42a5      	cmp	r5, r4
   bd2e6:	d003      	beq.n	bd2f0 <__mcmp+0x2c>
   bd2e8:	d305      	bcc.n	bd2f6 <__mcmp+0x32>
   bd2ea:	2201      	movs	r2, #1
   bd2ec:	4610      	mov	r0, r2
   bd2ee:	bd30      	pop	{r4, r5, pc}
   bd2f0:	4283      	cmp	r3, r0
   bd2f2:	d3f3      	bcc.n	bd2dc <__mcmp+0x18>
   bd2f4:	e7fa      	b.n	bd2ec <__mcmp+0x28>
   bd2f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd2fa:	e7f7      	b.n	bd2ec <__mcmp+0x28>

000bd2fc <__mdiff>:
   bd2fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd300:	460c      	mov	r4, r1
   bd302:	4606      	mov	r6, r0
   bd304:	4611      	mov	r1, r2
   bd306:	4620      	mov	r0, r4
   bd308:	4690      	mov	r8, r2
   bd30a:	f7ff ffdb 	bl	bd2c4 <__mcmp>
   bd30e:	1e05      	subs	r5, r0, #0
   bd310:	d110      	bne.n	bd334 <__mdiff+0x38>
   bd312:	4629      	mov	r1, r5
   bd314:	4630      	mov	r0, r6
   bd316:	f7ff fd09 	bl	bcd2c <_Balloc>
   bd31a:	b930      	cbnz	r0, bd32a <__mdiff+0x2e>
   bd31c:	4b3a      	ldr	r3, [pc, #232]	; (bd408 <__mdiff+0x10c>)
   bd31e:	4602      	mov	r2, r0
   bd320:	f240 2132 	movw	r1, #562	; 0x232
   bd324:	4839      	ldr	r0, [pc, #228]	; (bd40c <__mdiff+0x110>)
   bd326:	f7fa fec3 	bl	b80b0 <__assert_func>
   bd32a:	2301      	movs	r3, #1
   bd32c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bd330:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd334:	bfa4      	itt	ge
   bd336:	4643      	movge	r3, r8
   bd338:	46a0      	movge	r8, r4
   bd33a:	4630      	mov	r0, r6
   bd33c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bd340:	bfa6      	itte	ge
   bd342:	461c      	movge	r4, r3
   bd344:	2500      	movge	r5, #0
   bd346:	2501      	movlt	r5, #1
   bd348:	f7ff fcf0 	bl	bcd2c <_Balloc>
   bd34c:	b920      	cbnz	r0, bd358 <__mdiff+0x5c>
   bd34e:	4b2e      	ldr	r3, [pc, #184]	; (bd408 <__mdiff+0x10c>)
   bd350:	4602      	mov	r2, r0
   bd352:	f44f 7110 	mov.w	r1, #576	; 0x240
   bd356:	e7e5      	b.n	bd324 <__mdiff+0x28>
   bd358:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bd35c:	6926      	ldr	r6, [r4, #16]
   bd35e:	60c5      	str	r5, [r0, #12]
   bd360:	f104 0914 	add.w	r9, r4, #20
   bd364:	f108 0514 	add.w	r5, r8, #20
   bd368:	f100 0e14 	add.w	lr, r0, #20
   bd36c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bd370:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bd374:	f108 0210 	add.w	r2, r8, #16
   bd378:	46f2      	mov	sl, lr
   bd37a:	2100      	movs	r1, #0
   bd37c:	f859 3b04 	ldr.w	r3, [r9], #4
   bd380:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bd384:	fa1f f883 	uxth.w	r8, r3
   bd388:	fa11 f18b 	uxtah	r1, r1, fp
   bd38c:	0c1b      	lsrs	r3, r3, #16
   bd38e:	eba1 0808 	sub.w	r8, r1, r8
   bd392:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bd396:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bd39a:	fa1f f888 	uxth.w	r8, r8
   bd39e:	1419      	asrs	r1, r3, #16
   bd3a0:	454e      	cmp	r6, r9
   bd3a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bd3a6:	f84a 3b04 	str.w	r3, [sl], #4
   bd3aa:	d8e7      	bhi.n	bd37c <__mdiff+0x80>
   bd3ac:	1b33      	subs	r3, r6, r4
   bd3ae:	3b15      	subs	r3, #21
   bd3b0:	f023 0303 	bic.w	r3, r3, #3
   bd3b4:	3304      	adds	r3, #4
   bd3b6:	3415      	adds	r4, #21
   bd3b8:	42a6      	cmp	r6, r4
   bd3ba:	bf38      	it	cc
   bd3bc:	2304      	movcc	r3, #4
   bd3be:	441d      	add	r5, r3
   bd3c0:	4473      	add	r3, lr
   bd3c2:	469e      	mov	lr, r3
   bd3c4:	462e      	mov	r6, r5
   bd3c6:	4566      	cmp	r6, ip
   bd3c8:	d30e      	bcc.n	bd3e8 <__mdiff+0xec>
   bd3ca:	f10c 0203 	add.w	r2, ip, #3
   bd3ce:	1b52      	subs	r2, r2, r5
   bd3d0:	f022 0203 	bic.w	r2, r2, #3
   bd3d4:	3d03      	subs	r5, #3
   bd3d6:	45ac      	cmp	ip, r5
   bd3d8:	bf38      	it	cc
   bd3da:	2200      	movcc	r2, #0
   bd3dc:	441a      	add	r2, r3
   bd3de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bd3e2:	b17b      	cbz	r3, bd404 <__mdiff+0x108>
   bd3e4:	6107      	str	r7, [r0, #16]
   bd3e6:	e7a3      	b.n	bd330 <__mdiff+0x34>
   bd3e8:	f856 8b04 	ldr.w	r8, [r6], #4
   bd3ec:	fa11 f288 	uxtah	r2, r1, r8
   bd3f0:	1414      	asrs	r4, r2, #16
   bd3f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bd3f6:	b292      	uxth	r2, r2
   bd3f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bd3fc:	f84e 2b04 	str.w	r2, [lr], #4
   bd400:	1421      	asrs	r1, r4, #16
   bd402:	e7e0      	b.n	bd3c6 <__mdiff+0xca>
   bd404:	3f01      	subs	r7, #1
   bd406:	e7ea      	b.n	bd3de <__mdiff+0xe2>
   bd408:	000be259 	.word	0x000be259
   bd40c:	000be2e0 	.word	0x000be2e0

000bd410 <__ulp>:
   bd410:	b082      	sub	sp, #8
   bd412:	ed8d 0b00 	vstr	d0, [sp]
   bd416:	9b01      	ldr	r3, [sp, #4]
   bd418:	4912      	ldr	r1, [pc, #72]	; (bd464 <__ulp+0x54>)
   bd41a:	4019      	ands	r1, r3
   bd41c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bd420:	2900      	cmp	r1, #0
   bd422:	dd05      	ble.n	bd430 <__ulp+0x20>
   bd424:	2200      	movs	r2, #0
   bd426:	460b      	mov	r3, r1
   bd428:	ec43 2b10 	vmov	d0, r2, r3
   bd42c:	b002      	add	sp, #8
   bd42e:	4770      	bx	lr
   bd430:	4249      	negs	r1, r1
   bd432:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bd436:	ea4f 5021 	mov.w	r0, r1, asr #20
   bd43a:	f04f 0200 	mov.w	r2, #0
   bd43e:	f04f 0300 	mov.w	r3, #0
   bd442:	da04      	bge.n	bd44e <__ulp+0x3e>
   bd444:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bd448:	fa41 f300 	asr.w	r3, r1, r0
   bd44c:	e7ec      	b.n	bd428 <__ulp+0x18>
   bd44e:	f1a0 0114 	sub.w	r1, r0, #20
   bd452:	291e      	cmp	r1, #30
   bd454:	bfda      	itte	le
   bd456:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bd45a:	fa20 f101 	lsrle.w	r1, r0, r1
   bd45e:	2101      	movgt	r1, #1
   bd460:	460a      	mov	r2, r1
   bd462:	e7e1      	b.n	bd428 <__ulp+0x18>
   bd464:	7ff00000 	.word	0x7ff00000

000bd468 <__b2d>:
   bd468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd46a:	6905      	ldr	r5, [r0, #16]
   bd46c:	f100 0714 	add.w	r7, r0, #20
   bd470:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bd474:	1f2e      	subs	r6, r5, #4
   bd476:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bd47a:	4620      	mov	r0, r4
   bd47c:	f7ff fd48 	bl	bcf10 <__hi0bits>
   bd480:	f1c0 0320 	rsb	r3, r0, #32
   bd484:	280a      	cmp	r0, #10
   bd486:	f8df c07c 	ldr.w	ip, [pc, #124]	; bd504 <__b2d+0x9c>
   bd48a:	600b      	str	r3, [r1, #0]
   bd48c:	dc14      	bgt.n	bd4b8 <__b2d+0x50>
   bd48e:	f1c0 0e0b 	rsb	lr, r0, #11
   bd492:	fa24 f10e 	lsr.w	r1, r4, lr
   bd496:	42b7      	cmp	r7, r6
   bd498:	ea41 030c 	orr.w	r3, r1, ip
   bd49c:	bf34      	ite	cc
   bd49e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bd4a2:	2100      	movcs	r1, #0
   bd4a4:	3015      	adds	r0, #21
   bd4a6:	fa04 f000 	lsl.w	r0, r4, r0
   bd4aa:	fa21 f10e 	lsr.w	r1, r1, lr
   bd4ae:	ea40 0201 	orr.w	r2, r0, r1
   bd4b2:	ec43 2b10 	vmov	d0, r2, r3
   bd4b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bd4b8:	42b7      	cmp	r7, r6
   bd4ba:	bf3a      	itte	cc
   bd4bc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bd4c0:	f1a5 0608 	subcc.w	r6, r5, #8
   bd4c4:	2100      	movcs	r1, #0
   bd4c6:	380b      	subs	r0, #11
   bd4c8:	d017      	beq.n	bd4fa <__b2d+0x92>
   bd4ca:	f1c0 0c20 	rsb	ip, r0, #32
   bd4ce:	fa04 f500 	lsl.w	r5, r4, r0
   bd4d2:	42be      	cmp	r6, r7
   bd4d4:	fa21 f40c 	lsr.w	r4, r1, ip
   bd4d8:	ea45 0504 	orr.w	r5, r5, r4
   bd4dc:	bf8c      	ite	hi
   bd4de:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bd4e2:	2400      	movls	r4, #0
   bd4e4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bd4e8:	fa01 f000 	lsl.w	r0, r1, r0
   bd4ec:	fa24 f40c 	lsr.w	r4, r4, ip
   bd4f0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bd4f4:	ea40 0204 	orr.w	r2, r0, r4
   bd4f8:	e7db      	b.n	bd4b2 <__b2d+0x4a>
   bd4fa:	ea44 030c 	orr.w	r3, r4, ip
   bd4fe:	460a      	mov	r2, r1
   bd500:	e7d7      	b.n	bd4b2 <__b2d+0x4a>
   bd502:	bf00      	nop
   bd504:	3ff00000 	.word	0x3ff00000

000bd508 <__d2b>:
   bd508:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bd50c:	4689      	mov	r9, r1
   bd50e:	2101      	movs	r1, #1
   bd510:	ec57 6b10 	vmov	r6, r7, d0
   bd514:	4690      	mov	r8, r2
   bd516:	f7ff fc09 	bl	bcd2c <_Balloc>
   bd51a:	4604      	mov	r4, r0
   bd51c:	b930      	cbnz	r0, bd52c <__d2b+0x24>
   bd51e:	4602      	mov	r2, r0
   bd520:	4b25      	ldr	r3, [pc, #148]	; (bd5b8 <__d2b+0xb0>)
   bd522:	4826      	ldr	r0, [pc, #152]	; (bd5bc <__d2b+0xb4>)
   bd524:	f240 310a 	movw	r1, #778	; 0x30a
   bd528:	f7fa fdc2 	bl	b80b0 <__assert_func>
   bd52c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bd530:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bd534:	bb35      	cbnz	r5, bd584 <__d2b+0x7c>
   bd536:	2e00      	cmp	r6, #0
   bd538:	9301      	str	r3, [sp, #4]
   bd53a:	d028      	beq.n	bd58e <__d2b+0x86>
   bd53c:	4668      	mov	r0, sp
   bd53e:	9600      	str	r6, [sp, #0]
   bd540:	f7ff fd06 	bl	bcf50 <__lo0bits>
   bd544:	9900      	ldr	r1, [sp, #0]
   bd546:	b300      	cbz	r0, bd58a <__d2b+0x82>
   bd548:	9a01      	ldr	r2, [sp, #4]
   bd54a:	f1c0 0320 	rsb	r3, r0, #32
   bd54e:	fa02 f303 	lsl.w	r3, r2, r3
   bd552:	430b      	orrs	r3, r1
   bd554:	40c2      	lsrs	r2, r0
   bd556:	6163      	str	r3, [r4, #20]
   bd558:	9201      	str	r2, [sp, #4]
   bd55a:	9b01      	ldr	r3, [sp, #4]
   bd55c:	61a3      	str	r3, [r4, #24]
   bd55e:	2b00      	cmp	r3, #0
   bd560:	bf14      	ite	ne
   bd562:	2202      	movne	r2, #2
   bd564:	2201      	moveq	r2, #1
   bd566:	6122      	str	r2, [r4, #16]
   bd568:	b1d5      	cbz	r5, bd5a0 <__d2b+0x98>
   bd56a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bd56e:	4405      	add	r5, r0
   bd570:	f8c9 5000 	str.w	r5, [r9]
   bd574:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bd578:	f8c8 0000 	str.w	r0, [r8]
   bd57c:	4620      	mov	r0, r4
   bd57e:	b003      	add	sp, #12
   bd580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bd584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bd588:	e7d5      	b.n	bd536 <__d2b+0x2e>
   bd58a:	6161      	str	r1, [r4, #20]
   bd58c:	e7e5      	b.n	bd55a <__d2b+0x52>
   bd58e:	a801      	add	r0, sp, #4
   bd590:	f7ff fcde 	bl	bcf50 <__lo0bits>
   bd594:	9b01      	ldr	r3, [sp, #4]
   bd596:	6163      	str	r3, [r4, #20]
   bd598:	2201      	movs	r2, #1
   bd59a:	6122      	str	r2, [r4, #16]
   bd59c:	3020      	adds	r0, #32
   bd59e:	e7e3      	b.n	bd568 <__d2b+0x60>
   bd5a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bd5a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bd5a8:	f8c9 0000 	str.w	r0, [r9]
   bd5ac:	6918      	ldr	r0, [r3, #16]
   bd5ae:	f7ff fcaf 	bl	bcf10 <__hi0bits>
   bd5b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bd5b6:	e7df      	b.n	bd578 <__d2b+0x70>
   bd5b8:	000be259 	.word	0x000be259
   bd5bc:	000be2e0 	.word	0x000be2e0

000bd5c0 <__ratio>:
   bd5c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd5c4:	4688      	mov	r8, r1
   bd5c6:	4669      	mov	r1, sp
   bd5c8:	4681      	mov	r9, r0
   bd5ca:	f7ff ff4d 	bl	bd468 <__b2d>
   bd5ce:	a901      	add	r1, sp, #4
   bd5d0:	4640      	mov	r0, r8
   bd5d2:	ec55 4b10 	vmov	r4, r5, d0
   bd5d6:	f7ff ff47 	bl	bd468 <__b2d>
   bd5da:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bd5de:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bd5e2:	eba3 0c02 	sub.w	ip, r3, r2
   bd5e6:	e9dd 3200 	ldrd	r3, r2, [sp]
   bd5ea:	1a9b      	subs	r3, r3, r2
   bd5ec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bd5f0:	ec51 0b10 	vmov	r0, r1, d0
   bd5f4:	2b00      	cmp	r3, #0
   bd5f6:	bfd6      	itet	le
   bd5f8:	460a      	movle	r2, r1
   bd5fa:	462a      	movgt	r2, r5
   bd5fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bd600:	468b      	mov	fp, r1
   bd602:	462f      	mov	r7, r5
   bd604:	bfd4      	ite	le
   bd606:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bd60a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bd60e:	4620      	mov	r0, r4
   bd610:	ee10 2a10 	vmov	r2, s0
   bd614:	465b      	mov	r3, fp
   bd616:	4639      	mov	r1, r7
   bd618:	f7fd fdba 	bl	bb190 <__aeabi_ddiv>
   bd61c:	ec41 0b10 	vmov	d0, r0, r1
   bd620:	b003      	add	sp, #12
   bd622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bd626 <__copybits>:
   bd626:	3901      	subs	r1, #1
   bd628:	b570      	push	{r4, r5, r6, lr}
   bd62a:	1149      	asrs	r1, r1, #5
   bd62c:	6914      	ldr	r4, [r2, #16]
   bd62e:	3101      	adds	r1, #1
   bd630:	f102 0314 	add.w	r3, r2, #20
   bd634:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bd638:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bd63c:	1f05      	subs	r5, r0, #4
   bd63e:	42a3      	cmp	r3, r4
   bd640:	d30c      	bcc.n	bd65c <__copybits+0x36>
   bd642:	1aa3      	subs	r3, r4, r2
   bd644:	3b11      	subs	r3, #17
   bd646:	f023 0303 	bic.w	r3, r3, #3
   bd64a:	3211      	adds	r2, #17
   bd64c:	42a2      	cmp	r2, r4
   bd64e:	bf88      	it	hi
   bd650:	2300      	movhi	r3, #0
   bd652:	4418      	add	r0, r3
   bd654:	2300      	movs	r3, #0
   bd656:	4288      	cmp	r0, r1
   bd658:	d305      	bcc.n	bd666 <__copybits+0x40>
   bd65a:	bd70      	pop	{r4, r5, r6, pc}
   bd65c:	f853 6b04 	ldr.w	r6, [r3], #4
   bd660:	f845 6f04 	str.w	r6, [r5, #4]!
   bd664:	e7eb      	b.n	bd63e <__copybits+0x18>
   bd666:	f840 3b04 	str.w	r3, [r0], #4
   bd66a:	e7f4      	b.n	bd656 <__copybits+0x30>

000bd66c <__any_on>:
   bd66c:	f100 0214 	add.w	r2, r0, #20
   bd670:	6900      	ldr	r0, [r0, #16]
   bd672:	114b      	asrs	r3, r1, #5
   bd674:	4298      	cmp	r0, r3
   bd676:	b510      	push	{r4, lr}
   bd678:	db11      	blt.n	bd69e <__any_on+0x32>
   bd67a:	dd0a      	ble.n	bd692 <__any_on+0x26>
   bd67c:	f011 011f 	ands.w	r1, r1, #31
   bd680:	d007      	beq.n	bd692 <__any_on+0x26>
   bd682:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bd686:	fa24 f001 	lsr.w	r0, r4, r1
   bd68a:	fa00 f101 	lsl.w	r1, r0, r1
   bd68e:	428c      	cmp	r4, r1
   bd690:	d10b      	bne.n	bd6aa <__any_on+0x3e>
   bd692:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bd696:	4293      	cmp	r3, r2
   bd698:	d803      	bhi.n	bd6a2 <__any_on+0x36>
   bd69a:	2000      	movs	r0, #0
   bd69c:	bd10      	pop	{r4, pc}
   bd69e:	4603      	mov	r3, r0
   bd6a0:	e7f7      	b.n	bd692 <__any_on+0x26>
   bd6a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bd6a6:	2900      	cmp	r1, #0
   bd6a8:	d0f5      	beq.n	bd696 <__any_on+0x2a>
   bd6aa:	2001      	movs	r0, #1
   bd6ac:	e7f6      	b.n	bd69c <__any_on+0x30>

000bd6ae <_calloc_r>:
   bd6ae:	b513      	push	{r0, r1, r4, lr}
   bd6b0:	434a      	muls	r2, r1
   bd6b2:	4611      	mov	r1, r2
   bd6b4:	9201      	str	r2, [sp, #4]
   bd6b6:	f7fa fceb 	bl	b8090 <_malloc_r>
   bd6ba:	4604      	mov	r4, r0
   bd6bc:	b118      	cbz	r0, bd6c6 <_calloc_r+0x18>
   bd6be:	9a01      	ldr	r2, [sp, #4]
   bd6c0:	2100      	movs	r1, #0
   bd6c2:	f7fd ffbb 	bl	bb63c <memset>
   bd6c6:	4620      	mov	r0, r4
   bd6c8:	b002      	add	sp, #8
   bd6ca:	bd10      	pop	{r4, pc}
   bd6cc:	0000      	movs	r0, r0
	...

000bd6d0 <nan>:
   bd6d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; bd6d8 <nan+0x8>
   bd6d4:	4770      	bx	lr
   bd6d6:	bf00      	nop
   bd6d8:	00000000 	.word	0x00000000
   bd6dc:	7ff80000 	.word	0x7ff80000

000bd6e0 <nanf>:
   bd6e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; bd6e8 <nanf+0x8>
   bd6e4:	4770      	bx	lr
   bd6e6:	bf00      	nop
   bd6e8:	7fc00000 	.word	0x7fc00000

000bd6ec <__ascii_wctomb>:
   bd6ec:	b149      	cbz	r1, bd702 <__ascii_wctomb+0x16>
   bd6ee:	2aff      	cmp	r2, #255	; 0xff
   bd6f0:	bf85      	ittet	hi
   bd6f2:	238a      	movhi	r3, #138	; 0x8a
   bd6f4:	6003      	strhi	r3, [r0, #0]
   bd6f6:	700a      	strbls	r2, [r1, #0]
   bd6f8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   bd6fc:	bf98      	it	ls
   bd6fe:	2001      	movls	r0, #1
   bd700:	4770      	bx	lr
   bd702:	4608      	mov	r0, r1
   bd704:	4770      	bx	lr
	...

000bd708 <__aeabi_d2lz>:
   bd708:	b538      	push	{r3, r4, r5, lr}
   bd70a:	2200      	movs	r2, #0
   bd70c:	2300      	movs	r3, #0
   bd70e:	4604      	mov	r4, r0
   bd710:	460d      	mov	r5, r1
   bd712:	f7fd fe85 	bl	bb420 <__aeabi_dcmplt>
   bd716:	b928      	cbnz	r0, bd724 <__aeabi_d2lz+0x1c>
   bd718:	4620      	mov	r0, r4
   bd71a:	4629      	mov	r1, r5
   bd71c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bd720:	f7fd bf2c 	b.w	bb57c <__aeabi_d2ulz>
   bd724:	4620      	mov	r0, r4
   bd726:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bd72a:	f7fd ff27 	bl	bb57c <__aeabi_d2ulz>
   bd72e:	4240      	negs	r0, r0
   bd730:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bd734:	bd38      	pop	{r3, r4, r5, pc}
   bd736:	bf00      	nop

000bd738 <dynalib_user>:
   bd738:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bd748:	0000 0000 6162 6973 5f63 7473 6972 676e     ....basic_string
   bd758:	3a3a 4d5f 635f 6e6f 7473 7572 7463 6e20     ::_M_construct n
   bd768:	6c75 206c 6f6e 2074 6176 696c 0064 720a     ull not valid..r
   bd778:	7165 6575 7473 6320 646f 2065 2c31 6120     equest code 1, a
   bd788:	6464 6572 7373 203a 7400 6172 736e 696d     ddress: .transmi
   bd798:	7373 6f69 206e 6572 6963 7665 6465 6620     ssion recieved f
   bd7a8:	6f72 3a6d 0020 6564 6976 6563 6920 3a64     rom: .device id:
   bd7b8:	0020 7274 6e61 6d73 7369 6973 6e6f 7320      .transmission s
   bd7c8:	6e65 2074 6f74 203a 7200 7165 6575 7473     ent to: .request
   bd7d8:	6320 646f 2065 2c32 6120 6464 6572 7373      code 2, address
   bd7e8:	203a 6300 6e6f 6c66 6369 2074 6576 6972     : .conflict veri
   bd7f8:	6966 6163 6974 6e6f 203a 0a00 6f43 6e6e     fication: ..Conn
   bd808:	6365 6574 2064 6f74 203a 6300 6e61 6f6e     ected to: .canno
   bd818:	2074 7263 6165 6574 7320 6474 3a3a 6576     t create std::ve
   bd828:	7463 726f 6c20 7261 6567 2072 6874 6e61     ctor larger than
   bd838:	6d20 7861 735f 7a69 2865 0029 7267 6565      max_size().gree
   bd848:	316e 6700 6572 6e65 0032 4c42 2045 6966     n1.green2.BLE fi
   bd858:	696e 6873 6465 7200 6465 4600 3046 3030     nished.red.FF000
   bd868:	0030 4130 3030 3030 6200 756c 0065 3030     0.0A0000.blue.00
   bd878:	3030 4646 3000 3030 3030 0041 7262 776f     00FF.00000A.brow
   bd888:	006e 4646 4646 3030 3000 3041 3041 0030     n.FFFF00.0A0A00.
   bd898:	3030 4646 3030 3000 3030 3041 0030 726f     00FF00.000A00.or
   bd8a8:	6e61 6567 4600 3846 3030 0030 4130 3530     ange.FF8000.0A05
   bd8b8:	3030 7000 7275 6c70 0065 3032 3030 4646     00.purple.2000FF
   bd8c8:	3000 3032 3030 0041 6970 6b6e 4600 3846     .02000A.pink.FF8
   bd8d8:	3830 0030 4130 3530 3530 3600 3445 3030     080.0A0505.6E400
   bd8e8:	3030 2d31 3542 3341 462d 3933 2d33 3045     001-B5A3-F393-E0
   bd8f8:	3941 452d 3035 3245 4434 4343 3941 0045     A9-E50E24DCCA9E.
   bd908:	4536 3034 3030 3230 422d 4135 2d33 3346     6E400002-B5A3-F3
   bd918:	3339 452d 4130 2d39 3545 4530 3432 4344     93-E0A9-E50E24DC
   bd928:	4143 4539 3600 3445 3030 3030 2d33 3542     CA9E.6E400003-B5
   bd938:	3341 462d 3933 2d33 3045 3941 452d 3035     A3-F393-E0A9-E50
   bd948:	3245 4434 4343 3941 0045 7874 7200 0078     E24DCCA9E.tx.rx.
   bd958:	7274 6b65 742e 6568 6377 2e6c 6f63 006d     trek.thewcl.com.
   bd968:	6863 6369 6761 006f 6f6c 706f 7320 6174     chicago.loop sta
   bd978:	7472 2500 2c69 0020 6c2f 6f6f 2d70 7274     rt.%i, ./loop-tr
   bd988:	6361 736b 632f 6174 6c3f 6e69 7365 003d     acks/cta?lines=.
   bd998:	4547 0054 6170 7372 6e69 0067 6170 7372     GET.parsing.pars
   bd9a8:	6e69 2067 6166 6c69 6465 6c00 6e69 7365     ing failed.lines
   bd9b8:	7400 6172 6e69 0073 656e 7478 735f 6f74     .trains.next_sto
   bd9c8:	0070 6564 7473 6e69 7461 6f69 006e 6964     p.destination.di
   bd9d8:	6572 7463 6f69 006e 616c 6974 7574 6564     rection.latitude
   bd9e8:	6c00 6e6f 6967 7574 6564 6200 6572 6b61     .longitude.break
   bd9f8:	6900 206e 7267 6565 006e 7325 7220 6961     .in green.%s rai
   bda08:	206c 6170 7472 2520 3a69 0020               l part %i: .

000bda14 <_ZTV16JsonParserStaticILj10000ELj1000EE>:
	...
   bda1c:	40b9 000b 40cd 000b 6341 6563 7470 2f00     .@...@..Accept./
   bda2c:	2f2a 0000 0019 0000 0003 0000 0007 0000     */..............
   bda3c:	0005 0000 000c 0000 0008 0000 0005 0000     ................
   bda4c:	0005 0000 0005 0000 0019 0000 0005 0000     ................
   bda5c:	000f 0000 000a 0000 000a 0000 000a 0000     ................
   bda6c:	000a 0000 0014 0000 0000 0000 0028 0000     ............(...
   bda7c:	0000 0000 0002 0000 0006 0000 0000 0000     ................
   bda8c:	0000 0000 000f 0000 000a 0000 000a 0000     ................
   bda9c:	000f 0000 000f 0000 000f 0000 0014 0000     ................
   bdaac:	0000 0000 0001 0000 0003 0000 0000 0000     ................
   bdabc:	0000 0000 000c 0000 0007 0000 0001 0000     ................
   bdacc:	000a 0000 000a 0000 000a 0000 000a 0000     ................
   bdadc:	000c 0000 0000 0000 0028 0000 0008 0000     ........(.......
   bdaec:	0003 0000 0007 0000 0001 0000 0003 0000     ................
   bdafc:	0007 0000 0007 0000 0006 0000 000a 0000     ................
   bdb0c:	000a 0000 000a 0000 000a 0000 000e 0000     ................
   bdb1c:	0000 0000 0028 0000 0006 0000 0003 0000     ....(...........
   bdb2c:	0007 0000 0002 0000 0003 0000 4820 5454     ............ HTT
   bdb3c:	2f50 2e31 0d30 000a 6c63 736f 0065 6f43     P/1.0...close.Co
   bdb4c:	6e6e 6365 6974 6e6f 4800 534f 0054 6f43     nnection.HOST.Co
   bdb5c:	746e 6e65 2d74 654c 676e 6874 5000 534f     ntent-Length.POS
   bdb6c:	0054 0a0d 0a0d 2500 3430 0078               T......%04x.

000bdb78 <_ZTV10JsonBuffer>:
	...
   bdb80:	7251 000b 726d 000b                         Qr..mr..

000bdb88 <_ZTV10JsonParser>:
	...
   bdb90:	7281 000b 72a5 000b                         .r...r..

000bdb98 <_ZTV13JsonReference>:
	...
   bdba0:	7241 000b 7243 000b 7341 6573 7472 6f69     Ar..Cr..Assertio
   bdbb0:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   bdbc0:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   bdbd0:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   bdbe0:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   bdbf0:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   bdc00:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   bdc10:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   bdc20:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   bdc30:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   bdc40:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   bdc50:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   bdc60:	6976 6563 002e 6f43 6e6e 6365 6574 2064     vice..Connected 
   bdc70:	7962 4320 6e65 7274 6c61 6420 7665 6369     by Central devic
   bdc80:	2e65 4400 7369 6f63 6e6e 6365 6574 2064     e..Disconnected 
   bdc90:	7962 7220 6d65 746f 2065 6564 6976 6563     by remote device
   bdca0:	002e 7544 6c70 6369 7461 6465 6320 6168     ..Duplicated cha
   bdcb0:	6172 7463 7265 7369 6974 2063 6163 6e6e     racteristic cann
   bdcc0:	746f 6220 2065 6461 6564 2e64 4600 6961     ot be added..Fai
   bdcd0:	656c 2064 6f74 6120 7070 6e65 2064 6f6c     led to append lo
   bdce0:	6163 206c 6863 7261 6361 6574 6972 7473     cal characterist
   bdcf0:	6369 002e                                   ic..

000bdcf4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bdcfc:	80dd 000b 8141 000b 8227 000b 816b 000b     ....A...'...k...
   bdd0c:	80e1 000b                                   ....

000bdd10 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bdd18:	80d9 000b 814f 000b 80db 000b 8171 000b     ....O.......q...
   bdd28:	8101 000b                                   ....

000bdd2c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bdd34:	80d7 000b 815d 000b 88fd 000b 8177 000b     ....].......w...
   bdd44:	8121 000b                                   !...

000bdd48 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bdd54:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000bdd66 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bdd66:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000bdd76 <_ZN8particle7BleUuid9BASE_UUIDE>:
   bdd76:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000bdd88 <_ZTVN5spark13EthernetClassE>:
	...
   bdd90:	93ab 000b 93a1 000b 9397 000b 938d 000b     ................
   bdda0:	9381 000b 9375 000b 9631 000b 9639 000b     ....u...1...9...
   bddb0:	9369 000b 9361 000b 9357 000b 934d 000b     i...a...W...M...
   bddc0:	9669 000b                                   i...

000bddc4 <_ZTV7TwoWire>:
	...
   bddcc:	93c9 000b 9413 000b 93eb 000b 93cb 000b     ................
   bdddc:	93f3 000b 93fb 000b 9403 000b 940b 000b     ................

000bddec <_ZTV9IPAddress>:
	...
   bddf4:	94d5 000b 94c5 000b 94c7 000b 7061 0070     ............app.

000bde04 <_ZTVN5spark12NetworkClassE>:
	...
   bde0c:	95f1 000b 95fb 000b 9605 000b 960f 000b     ................
   bde1c:	9619 000b 9625 000b 9631 000b 9639 000b     ....%...1...9...
   bde2c:	9641 000b 964d 000b 9655 000b 965f 000b     A...M...U..._...
   bde3c:	9669 000b 6977 6972 676e 7200 6365 2076     i...wiring.recv 
   bde4c:	7265 6f72 2072 203d 6425 0000               error = %d..

000bde58 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bde60:	9be5 000b 9c09 000b a13b 000b 9c17 000b     ........;.......
   bde70:	9be9 000b                                   ....

000bde74 <_ZTV9TCPClient>:
	...
   bde7c:	9c95 000b 9cc9 000b 9b61 000b 9b7b 000b     ........a...{...
   bde8c:	9fd1 000b 9ba5 000b 9e47 000b 9bd9 000b     ........G.......
   bde9c:	9ed9 000b 9d19 000b 9e75 000b a085 000b     ........u.......
   bdeac:	9e15 000b 9bdb 000b 9b8d 000b 9c1d 000b     ................
   bdebc:	9cf9 000b 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
   bdecc:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000bdedc <_ZTV11USARTSerial>:
	...
   bdee4:	a155 000b a1c1 000b a199 000b 9755 000b     U...........U...
   bdef4:	a169 000b a185 000b a177 000b a193 000b     i.......w.......
   bdf04:	a157 000b a15b 000b                         W...[...

000bdf0c <_ZTV9USBSerial>:
	...
   bdf14:	a1ff 000b a267 000b a23d 000b 9755 000b     ....g...=...U...
   bdf24:	a22f 000b a201 000b a211 000b a261 000b     /...........a...
   bdf34:	a221 000b a1f9 000b                         !.......

000bdf3c <_ZTVN5spark9WiFiClassE>:
	...
   bdf44:	a35f 000b a355 000b a34b 000b a301 000b     _...U...K.......
   bdf54:	a33f 000b a333 000b 9631 000b 9639 000b     ?...3...1...9...
   bdf64:	a327 000b a31f 000b a315 000b a30b 000b     '...............
   bdf74:	9669 000b                                   i...

000bdf78 <_ZSt7nothrow>:
	...

000bdf79 <_ZTSSt19_Sp_make_shared_tag>:
   bdf79:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bdf89:	6572 5f64 6174 0067 0000                     red_tag....

000bdf94 <_ZTISt19_Sp_make_shared_tag>:
   bdf94:	dfec 000b df79 000b 6162 6973 5f63 7473     ....y...basic_st
   bdfa4:	6972 676e 3a3a 4d5f 635f 6572 7461 0065     ring::_M_create.

000bdfb4 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bdfb4:	e04c 000b dfc0 000b e070 000b               L.......p...

000bdfc0 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bdfc0:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bdfd0:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bdfe0:	0045 0000                                   E...

000bdfe4 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bdfe4:	0000 0000 dfb4 000b a755 000b a769 000b     ........U...i...
   bdff4:	a8fd 000b a8fd 000b a7d3 000b a715 000b     ................
   be004:	a7bb 000b a77d 000b a747 000b               ....}...G...

000be010 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   be010:	e04c 000b e01c 000b dfb4 000b               L...........

000be01c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   be01c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   be02c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   be03c:	666e 456f 0000 0000                         nfoE....

000be044 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   be044:	0000 0000 e010 000b a7fd 000b a811 000b     ................
   be054:	a8fd 000b a8fd 000b a7d3 000b a715 000b     ................
   be064:	a8d1 000b a85d 000b a825 000b               ....]...%...

000be070 <_ZTISt9type_info>:
   be070:	dfec 000b e078 000b                         ....x...

000be078 <_ZTSSt9type_info>:
   be078:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   be088:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   be098:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   be0a8:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   be0b8:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   be0c8:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   be0d8:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   be0e8:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   be0f8:	6e69 7469 0079 6e61 0000 0000               inity.an....

000be104 <fpi.1>:
   be104:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   be114:	0000 0000                                   ....

000be118 <fpinan.0>:
   be118:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000be130 <tinytens>:
   be130:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   be140:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   be150:	6f43 64ac 0628 1168                         Co.d(.h.

000be158 <_ctype_>:
   be158:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   be168:	2020 2020 2020 2020 2020 2020 2020 2020                     
   be178:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   be188:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   be198:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   be1a8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   be1b8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   be1c8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   be1d8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   be258:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   be268:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   be278:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   be288:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   be298:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   be2a8:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   be2b8:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   be2c8:	632e 0000                                   .c..

000be2cc <_C_numeric_locale>:
   be2cc:	dcf2 000b db72 000b 535c 2003 0043 4f50     ....r...\S. C.PO
   be2dc:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   be2ec:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   be2fc:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   be30c:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   be31c:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   be32c:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   be33c:	0000 0000                                   ....

000be340 <__mprec_bigtens>:
   be340:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   be350:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   be360:	bf3c 7f73 4fdd 7515                         <.s..O.u

000be368 <__mprec_tens>:
   be368:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   be378:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   be388:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   be398:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   be3a8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   be3b8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   be3c8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   be3d8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   be3e8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   be3f8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   be408:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   be418:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   be428:	9db4 79d9 7843 44ea                         ...yCx.D

000be430 <p05.0>:
   be430:	0005 0000 0019 0000 007d 0000               ........}...

000be43c <link_const_variable_data_end>:
   be43c:	000b65a1 	.word	0x000b65a1
   be440:	000b933d 	.word	0x000b933d
   be444:	000b93b5 	.word	0x000b93b5
   be448:	000b95e1 	.word	0x000b95e1
   be44c:	000b9741 	.word	0x000b9741
   be450:	000b987d 	.word	0x000b987d
   be454:	000b9b3d 	.word	0x000b9b3d
   be458:	000ba141 	.word	0x000ba141
   be45c:	000ba369 	.word	0x000ba369
