
/Users/sainihome/Documents/GitHub/loop-tracks/master/target/3.3.0/argon/master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000ac90  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000becb0  000becb0  0000ecb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000becd4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f8  20035118  000becd8  00015118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000094e0  20035310  20035310  00025310  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000beed0  000beed0  0001eed0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000beef8  000beef8  0001eef8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001488c5  00000000  00000000  0001eefc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00011ebb  00000000  00000000  001677c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004be20  00000000  00000000  0017967c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003098  00000000  00000000  001c549c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000d6d8  00000000  00000000  001c8534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034efe  00000000  00000000  001d5c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004345f  00000000  00000000  0020ab0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001568b6  00000000  00000000  0024df69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a7f0  00000000  00000000  003a4820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f007 feef 	bl	bbe14 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f007 ff11 	bl	bbe64 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	20035118 	.word	0x20035118
   b404c:	000becd8 	.word	0x000becd8
   b4050:	20035310 	.word	0x20035310
   b4054:	20035310 	.word	0x20035310
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f006 fe55 	bl	bad10 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bec8c 	.word	0x000bec8c
   b4080:	000becb0 	.word	0x000becb0

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f002 bc7e 	b.w	b6984 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f002 fdd5 	bl	b6c38 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f006 bdf5 	b.w	bac80 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f004 bb57 	b.w	b8748 <malloc>

000b409a <_Znaj>:
   b409a:	f004 bb55 	b.w	b8748 <malloc>

000b409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409e:	f004 bb5b 	b.w	b8758 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f004 bb59 	b.w	b8758 <free>

000b40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a6:	7800      	ldrb	r0, [r0, #0]
   b40a8:	fab0 f080 	clz	r0, r0
   b40ac:	0940      	lsrs	r0, r0, #5
   b40ae:	4770      	bx	lr

000b40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b0:	2301      	movs	r3, #1
   b40b2:	7003      	strb	r3, [r0, #0]
   b40b4:	4770      	bx	lr
	...

000b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40b8:	b510      	push	{r4, lr}
   b40ba:	4b03      	ldr	r3, [pc, #12]	; (b40c8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev+0x10>)
   b40bc:	6003      	str	r3, [r0, #0]
   b40be:	4604      	mov	r4, r0
   b40c0:	f003 fc38 	bl	b7934 <_ZN10JsonParserD1Ev>
   b40c4:	4620      	mov	r0, r4
   b40c6:	bd10      	pop	{r4, pc}
   b40c8:	000be25c 	.word	0x000be25c

000b40cc <_ZN16JsonParserStaticILj10000ELj1000EED0Ev>:
   b40cc:	b510      	push	{r4, lr}
   b40ce:	4604      	mov	r4, r0
   b40d0:	f7ff fff2 	bl	b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
   b40d4:	4620      	mov	r0, r4
   b40d6:	f246 51bc 	movw	r1, #26044	; 0x65bc
   b40da:	f7ff ffe2 	bl	b40a2 <_ZdlPvj>
   b40de:	4620      	mov	r0, r4
   b40e0:	bd10      	pop	{r4, pc}
	...

000b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>:

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
   b40e4:	b508      	push	{r3, lr}
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b40e6:	4603      	mov	r3, r0
   b40e8:	b150      	cbz	r0, b4100 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x1c>
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      _GLIBCXX_NODISCARD _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {
	if (__n > this->_M_max_size())
   b40ea:	4a06      	ldr	r2, [pc, #24]	; (b4104 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x20>)
   b40ec:	4290      	cmp	r0, r2
   b40ee:	d901      	bls.n	b40f4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b40f0:	f006 fea8 	bl	bae44 <_ZSt17__throw_bad_allocv>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b40f4:	200c      	movs	r0, #12
   b40f6:	4358      	muls	r0, r3
      }
   b40f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b40fc:	f7ff bfcb 	b.w	b4096 <_Znwj>
   b4100:	bd08      	pop	{r3, pc}
   b4102:	bf00      	nop
   b4104:	0aaaaaaa 	.word	0x0aaaaaaa

000b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>:

      pointer
      _M_local_data()
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b4108:	f100 0308 	add.w	r3, r0, #8
#if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
   b410c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b410e:	4604      	mov	r4, r0
	: allocator_type(__a), _M_p(__dat) { }
   b4110:	6003      	str	r3, [r0, #0]
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b4112:	460d      	mov	r5, r1
   b4114:	b1d9      	cbz	r1, b414e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x46>
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   b4116:	4608      	mov	r0, r1
   b4118:	f007 feec 	bl	bbef4 <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
   b411c:	280f      	cmp	r0, #15
   b411e:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b4122:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b4124:	d907      	bls.n	b4136 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x2e>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   b4126:	2200      	movs	r2, #0
   b4128:	a901      	add	r1, sp, #4
   b412a:	4620      	mov	r0, r4
   b412c:	f006 fea0 	bl	bae70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b4130:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4132:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4134:	60a3      	str	r3, [r4, #8]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b4136:	4632      	mov	r2, r6
   b4138:	4629      	mov	r1, r5
   b413a:	6820      	ldr	r0, [r4, #0]
   b413c:	f006 fed3 	bl	baee6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   b4140:	9b01      	ldr	r3, [sp, #4]
      { __c1 = __c2; }
   b4142:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4144:	6063      	str	r3, [r4, #4]
   b4146:	2100      	movs	r1, #0
   b4148:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b414a:	b002      	add	sp, #8
   b414c:	bd70      	pop	{r4, r5, r6, pc}
	  std::__throw_logic_error(__N("basic_string::"
   b414e:	4801      	ldr	r0, [pc, #4]	; (b4154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x4c>)
   b4150:	f006 fe7b 	bl	bae4a <_ZSt19__throw_logic_errorPKc>
   b4154:	000bdf74 	.word	0x000bdf74

000b4158 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b4158:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b415a:	4603      	mov	r3, r0
   b415c:	b150      	cbz	r0, b4174 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0+0x1c>
	if (__n > this->_M_max_size())
   b415e:	4a06      	ldr	r2, [pc, #24]	; (b4178 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0+0x20>)
   b4160:	4290      	cmp	r0, r2
   b4162:	d901      	bls.n	b4168 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b4164:	f006 fe6e 	bl	bae44 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4168:	206c      	movs	r0, #108	; 0x6c
   b416a:	4358      	muls	r0, r3
      }
   b416c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4170:	f7ff bf91 	b.w	b4096 <_Znwj>
   b4174:	bd08      	pop	{r3, pc}
   b4176:	bf00      	nop
   b4178:	012f684b 	.word	0x012f684b

000b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b417c:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b417e:	4603      	mov	r3, r0
   b4180:	b150      	cbz	r0, b4198 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x1c>
	if (__n > this->_M_max_size())
   b4182:	4a06      	ldr	r2, [pc, #24]	; (b419c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x20>)
   b4184:	4290      	cmp	r0, r2
   b4186:	d901      	bls.n	b418c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b4188:	f006 fe5c 	bl	bae44 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b418c:	2018      	movs	r0, #24
   b418e:	4358      	muls	r0, r3
      }
   b4190:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4194:	f7ff bf7f 	b.w	b4096 <_Znwj>
   b4198:	bd08      	pop	{r3, pc}
   b419a:	bf00      	nop
   b419c:	05555555 	.word	0x05555555

000b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b41a0:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b41a2:	b148      	cbz	r0, b41b8 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b41a4:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   b41a8:	d301      	bcc.n	b41ae <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b41aa:	f006 fe4b 	bl	bae44 <_ZSt17__throw_bad_allocv>
      }
   b41ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b41b2:	0080      	lsls	r0, r0, #2
   b41b4:	f7ff bf6f 	b.w	b4096 <_Znwj>
   b41b8:	bd08      	pop	{r3, pc}

000b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b41ba:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b41bc:	b148      	cbz	r0, b41d2 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b41be:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
   b41c2:	d301      	bcc.n	b41c8 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b41c4:	f006 fe3e 	bl	bae44 <_ZSt17__throw_bad_allocv>
      }
   b41c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b41cc:	00c0      	lsls	r0, r0, #3
   b41ce:	f7ff bf62 	b.w	b4096 <_Znwj>
   b41d2:	bd08      	pop	{r3, pc}

000b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>:
      basic_string(const basic_string& __str)
   b41d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b41d6:	f100 0308 	add.w	r3, r0, #8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b41da:	6003      	str	r3, [r0, #0]

      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      size_type
      length() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
   b41dc:	e9d1 5300 	ldrd	r5, r3, [r1]
      basic_string(const basic_string& __str)
   b41e0:	4604      	mov	r4, r0
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b41e2:	18ee      	adds	r6, r5, r3
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   b41e4:	b91d      	cbnz	r5, b41ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
   b41e6:	b116      	cbz	r6, b41ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
	  std::__throw_logic_error(__N("basic_string::"
   b41e8:	480c      	ldr	r0, [pc, #48]	; (b421c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x48>)
   b41ea:	f006 fe2e 	bl	bae4a <_ZSt19__throw_logic_errorPKc>
	if (__dnew > size_type(_S_local_capacity))
   b41ee:	2b0f      	cmp	r3, #15
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b41f0:	9301      	str	r3, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b41f2:	d907      	bls.n	b4204 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x30>
	    _M_data(_M_create(__dnew, size_type(0)));
   b41f4:	2200      	movs	r2, #0
   b41f6:	a901      	add	r1, sp, #4
   b41f8:	4620      	mov	r0, r4
   b41fa:	f006 fe39 	bl	bae70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b41fe:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4200:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4202:	60a3      	str	r3, [r4, #8]
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b4204:	4632      	mov	r2, r6
   b4206:	4629      	mov	r1, r5
   b4208:	6820      	ldr	r0, [r4, #0]
   b420a:	f006 fe67 	bl	baedc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	_M_set_length(__dnew);
   b420e:	9b01      	ldr	r3, [sp, #4]
   b4210:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4212:	6063      	str	r3, [r4, #4]
   b4214:	2100      	movs	r1, #0
   b4216:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b4218:	b002      	add	sp, #8
   b421a:	bd70      	pop	{r4, r5, r6, pc}
   b421c:	000bdf74 	.word	0x000bdf74

000b4220 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4220:	6803      	ldr	r3, [r0, #0]
   b4222:	b2c9      	uxtb	r1, r1
   b4224:	689b      	ldr	r3, [r3, #8]
   b4226:	4718      	bx	r3

000b4228 <_ZN5Print5writeEPKc.isra.0>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4228:	b513      	push	{r0, r1, r4, lr}
   b422a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
   b422c:	b161      	cbz	r1, b4248 <_ZN5Print5writeEPKc.isra.0+0x20>
      return write((const uint8_t *)str, strlen(str));
   b422e:	4608      	mov	r0, r1
   b4230:	9101      	str	r1, [sp, #4]
   b4232:	f007 fe5f 	bl	bbef4 <strlen>
   b4236:	6823      	ldr	r3, [r4, #0]
   b4238:	9901      	ldr	r1, [sp, #4]
   b423a:	68db      	ldr	r3, [r3, #12]
   b423c:	4602      	mov	r2, r0
   b423e:	4620      	mov	r0, r4
    }
   b4240:	b002      	add	sp, #8
   b4242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4246:	4718      	bx	r3
    }
   b4248:	b002      	add	sp, #8
   b424a:	bd10      	pop	{r4, pc}

000b424c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>:
  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
   b424c:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b424e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4250:	4604      	mov	r4, r0
   b4252:	460d      	mov	r5, r1
      if (&__x != this)
   b4254:	d025      	beq.n	b42a2 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x56>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4256:	e9d1 7100 	ldrd	r7, r1, [r1]
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_end_of_storage
			 - this->_M_impl._M_start); }
   b425a:	6800      	ldr	r0, [r0, #0]
   b425c:	68a3      	ldr	r3, [r4, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b425e:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b4260:	1a1b      	subs	r3, r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
   b4262:	429e      	cmp	r6, r3
   b4264:	d91e      	bls.n	b42a4 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x58>
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
   b4266:	10f0      	asrs	r0, r6, #3
   b4268:	f7ff ffa7 	bl	b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
   b426c:	2300      	movs	r3, #0
   b426e:	4605      	mov	r5, r0
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
   b4270:	429e      	cmp	r6, r3
   b4272:	d00a      	beq.n	b428a <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x3e>
   */
#if __cplusplus >= 201103L
  template<typename _Tp, typename... _Args>
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4274:	18ea      	adds	r2, r5, r3
   b4276:	bf1c      	itt	ne
   b4278:	18f9      	addne	r1, r7, r3
   b427a:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b427e:	f103 0308 	add.w	r3, r3, #8
   b4282:	bf18      	it	ne
   b4284:	e9c2 0100 	strdne	r0, r1, [r2]
   b4288:	e7f2      	b.n	b4270 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x24>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b428a:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b428c:	b118      	cbz	r0, b4296 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x4a>
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
   b428e:	68a1      	ldr	r1, [r4, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b4290:	1a09      	subs	r1, r1, r0
   b4292:	f7ff ff06 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b4296:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4298:	4435      	add	r5, r6
   b429a:	60a5      	str	r5, [r4, #8]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b429c:	6823      	ldr	r3, [r4, #0]
   b429e:	4433      	add	r3, r6
   b42a0:	6063      	str	r3, [r4, #4]
	}
      return *this;
    }
   b42a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b42a4:	6862      	ldr	r2, [r4, #4]
   b42a6:	1a12      	subs	r2, r2, r0
	  else if (size() >= __xlen)
   b42a8:	4296      	cmp	r6, r2
   b42aa:	d806      	bhi.n	b42ba <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x6e>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   b42ac:	42b9      	cmp	r1, r7
   b42ae:	d0f5      	beq.n	b429c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b42b0:	4632      	mov	r2, r6
   b42b2:	4639      	mov	r1, r7
   b42b4:	f007 fdbc 	bl	bbe30 <memmove>

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b42b8:	e7f0      	b.n	b429c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	  if (_Num)
   b42ba:	b112      	cbz	r2, b42c2 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x76>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b42bc:	4639      	mov	r1, r7
   b42be:	f007 fdb7 	bl	bbe30 <memmove>
   b42c2:	e9d4 2700 	ldrd	r2, r7, [r4]
   b42c6:	1abb      	subs	r3, r7, r2
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b42c8:	682a      	ldr	r2, [r5, #0]
   b42ca:	686d      	ldr	r5, [r5, #4]
   b42cc:	441a      	add	r2, r3
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   b42ce:	1aad      	subs	r5, r5, r2
					  __x._M_impl._M_finish,
   b42d0:	2300      	movs	r3, #0
	      for (; __first != __last; ++__first, (void)++__cur)
   b42d2:	429d      	cmp	r5, r3
   b42d4:	d0e2      	beq.n	b429c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
   b42d6:	eb17 0c03 	adds.w	ip, r7, r3
   b42da:	bf1c      	itt	ne
   b42dc:	18d1      	addne	r1, r2, r3
   b42de:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b42e2:	f103 0308 	add.w	r3, r3, #8
   b42e6:	bf18      	it	ne
   b42e8:	e9cc 0100 	strdne	r0, r1, [ip]
   b42ec:	e7f1      	b.n	b42d2 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x86>
	...

000b42f0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>:
      if (&__x != this)
   b42f0:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b42f2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b42f6:	4604      	mov	r4, r0
   b42f8:	468a      	mov	sl, r1
      if (&__x != this)
   b42fa:	d036      	beq.n	b436a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7a>
   b42fc:	e9d1 5b00 	ldrd	r5, fp, [r1]
			 - this->_M_impl._M_start); }
   b4300:	f8d0 9000 	ldr.w	r9, [r0]
   b4304:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4306:	4a39      	ldr	r2, [pc, #228]	; (b43ec <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xfc>)
   b4308:	ebab 0705 	sub.w	r7, fp, r5
			 - this->_M_impl._M_start); }
   b430c:	eba3 0309 	sub.w	r3, r3, r9
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4310:	ea4f 08e7 	mov.w	r8, r7, asr #3
	  if (__xlen > capacity())
   b4314:	42bb      	cmp	r3, r7
   b4316:	fb02 f808 	mul.w	r8, r2, r8
   b431a:	d228      	bcs.n	b436e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7e>
	  pointer __result = this->_M_allocate(__n);
   b431c:	4640      	mov	r0, r8
   b431e:	f7ff ff2d 	bl	b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
   b4322:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   b4324:	4680      	mov	r8, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b4326:	45ab      	cmp	fp, r5
   b4328:	d00a      	beq.n	b4340 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x50>
   b432a:	f1b8 0f00 	cmp.w	r8, #0
   b432e:	d003      	beq.n	b4338 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x48>
   b4330:	4629      	mov	r1, r5
   b4332:	4640      	mov	r0, r8
   b4334:	f7ff ff4e 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b4338:	f108 0818 	add.w	r8, r8, #24
   b433c:	3518      	adds	r5, #24
   b433e:	e7f2      	b.n	b4326 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x36>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4340:	e9d4 5800 	ldrd	r5, r8, [r4]
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   b4344:	45a8      	cmp	r8, r5
   b4346:	d004      	beq.n	b4352 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x62>
      { _M_dispose(); }
   b4348:	4628      	mov	r0, r5
   b434a:	f006 fdb3 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b434e:	3518      	adds	r5, #24
   b4350:	e7f8      	b.n	b4344 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x54>
	      _M_deallocate(this->_M_impl._M_start,
   b4352:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4354:	b118      	cbz	r0, b435e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x6e>
			    - this->_M_impl._M_start);
   b4356:	68a1      	ldr	r1, [r4, #8]
   b4358:	1a09      	subs	r1, r1, r0
   b435a:	f7ff fea2 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b435e:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4360:	443e      	add	r6, r7
   b4362:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4364:	6823      	ldr	r3, [r4, #0]
   b4366:	443b      	add	r3, r7
   b4368:	6063      	str	r3, [r4, #4]
    }
   b436a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b436e:	6846      	ldr	r6, [r0, #4]
   b4370:	eba6 0609 	sub.w	r6, r6, r9
	  else if (size() >= __xlen)
   b4374:	42b7      	cmp	r7, r6
   b4376:	d819      	bhi.n	b43ac <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xbc>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4378:	4646      	mov	r6, r8
   b437a:	46ca      	mov	sl, r9
   b437c:	2e00      	cmp	r6, #0
   b437e:	dd08      	ble.n	b4392 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xa2>
		  }
	      }
	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
	  }
#endif
	this->_M_assign(__str);
   b4380:	4629      	mov	r1, r5
   b4382:	4650      	mov	r0, sl
   b4384:	f006 fdb4 	bl	baef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b4388:	3518      	adds	r5, #24
	      ++__result;
   b438a:	f10a 0a18 	add.w	sl, sl, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b438e:	3e01      	subs	r6, #1
   b4390:	e7f4      	b.n	b437c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x8c>
   b4392:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
   b4396:	2518      	movs	r5, #24
      : _M_current(__i) { }
   b4398:	6866      	ldr	r6, [r4, #4]
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b439a:	fb05 9508 	mla	r5, r5, r8, r9
	  for (; __first != __last; ++__first)
   b439e:	42ae      	cmp	r6, r5
   b43a0:	d0e0      	beq.n	b4364 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
      { _M_dispose(); }
   b43a2:	4628      	mov	r0, r5
   b43a4:	f006 fd86 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b43a8:	3518      	adds	r5, #24
      {
	++_M_current;
	return *this;
   b43aa:	e7f8      	b.n	b439e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xae>
   b43ac:	10f6      	asrs	r6, r6, #3
   b43ae:	4356      	muls	r6, r2
   b43b0:	2e00      	cmp	r6, #0
   b43b2:	dd08      	ble.n	b43c6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xd6>
	this->_M_assign(__str);
   b43b4:	4629      	mov	r1, r5
   b43b6:	4648      	mov	r0, r9
   b43b8:	f006 fd9a 	bl	baef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b43bc:	3518      	adds	r5, #24
	      ++__result;
   b43be:	f109 0918 	add.w	r9, r9, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b43c2:	3e01      	subs	r6, #1
   b43c4:	e7f4      	b.n	b43b0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xc0>
   b43c6:	e9d4 5600 	ldrd	r5, r6, [r4]
   b43ca:	1b71      	subs	r1, r6, r5
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b43cc:	f8da 5000 	ldr.w	r5, [sl]
					  __x._M_impl._M_finish,
   b43d0:	f8da 8004 	ldr.w	r8, [sl, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b43d4:	440d      	add	r5, r1
   b43d6:	45a8      	cmp	r8, r5
   b43d8:	d0c4      	beq.n	b4364 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b43da:	b11e      	cbz	r6, b43e4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xf4>
   b43dc:	4629      	mov	r1, r5
   b43de:	4630      	mov	r0, r6
   b43e0:	f7ff fef8 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b43e4:	3518      	adds	r5, #24
   b43e6:	3618      	adds	r6, #24
   b43e8:	e7f5      	b.n	b43d6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xe6>
   b43ea:	bf00      	nop
   b43ec:	aaaaaaab 	.word	0xaaaaaaab

000b43f0 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43f0:	b40e      	push	{r1, r2, r3}
   b43f2:	b503      	push	{r0, r1, lr}
   b43f4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b43f6:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43f8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b43fc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b43fe:	f005 fe0a 	bl	ba016 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4402:	b002      	add	sp, #8
   b4404:	f85d eb04 	ldr.w	lr, [sp], #4
   b4408:	b003      	add	sp, #12
   b440a:	4770      	bx	lr

000b440c <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b440c:	b40e      	push	{r1, r2, r3}
   b440e:	b503      	push	{r0, r1, lr}
   b4410:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b4412:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4414:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4418:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b441a:	f005 fdfc 	bl	ba016 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b441e:	b002      	add	sp, #8
   b4420:	f85d eb04 	ldr.w	lr, [sp], #4
   b4424:	b003      	add	sp, #12
   b4426:	4770      	bx	lr

000b4428 <_Z16randomizeAddressv>:
    Serial.println();
  }
}

//clears up conflicts with multiple i2c slaves having the same address
void randomizeAddress(){
   b4428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return *(this->_M_impl._M_start + __n);
   b442c:	f8df 82b4 	ldr.w	r8, [pc, #692]	; b46e4 <_Z16randomizeAddressv+0x2bc>
  while(slaveCount != cities[cityIndex].slaveCountExpected){
   b4430:	4da2      	ldr	r5, [pc, #648]	; (b46bc <_Z16randomizeAddressv+0x294>)
void randomizeAddress(){
   b4432:	b08d      	sub	sp, #52	; 0x34
  while(slaveCount != cities[cityIndex].slaveCountExpected){
   b4434:	4ba2      	ldr	r3, [pc, #648]	; (b46c0 <_Z16randomizeAddressv+0x298>)
   b4436:	681a      	ldr	r2, [r3, #0]
   b4438:	f8d8 3000 	ldr.w	r3, [r8]
   b443c:	2128      	movs	r1, #40	; 0x28
   b443e:	fb01 3302 	mla	r3, r1, r2, r3
   b4442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b4444:	682b      	ldr	r3, [r5, #0]
   b4446:	429a      	cmp	r2, r3
   b4448:	f000 80ff 	beq.w	b464a <_Z16randomizeAddressv+0x222>
    slaveCount = 0;
   b444c:	2300      	movs	r3, #0

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b444e:	f8df 9298 	ldr.w	r9, [pc, #664]	; b46e8 <_Z16randomizeAddressv+0x2c0>
   b4452:	f8df a298 	ldr.w	sl, [pc, #664]	; b46ec <_Z16randomizeAddressv+0x2c4>
      if(Wire.available() > 0){
        Serial.println("transmission recieved from: " + String(i));

        slaveCount++;

        String inputBuffer = "";
   b4456:	4f9b      	ldr	r7, [pc, #620]	; (b46c4 <_Z16randomizeAddressv+0x29c>)
    slaveCount = 0;
   b4458:	602b      	str	r3, [r5, #0]
    for(int i = 8; i <= 119; i++){
   b445a:	2408      	movs	r4, #8
      Serial.println("\nrequest code 1, address: " + String(i));
   b445c:	f006 fb3e 	bl	baadc <_Z16_fetch_usbserialv>
   b4460:	4649      	mov	r1, r9
   b4462:	4606      	mov	r6, r0
   b4464:	a808      	add	r0, sp, #32
   b4466:	f005 fe58 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
   b446a:	220a      	movs	r2, #10
   b446c:	4621      	mov	r1, r4
   b446e:	a804      	add	r0, sp, #16
   b4470:	f005 fead 	bl	ba1ce <_ZN6StringC1Eih>
   b4474:	a904      	add	r1, sp, #16
   b4476:	a808      	add	r0, sp, #32
   b4478:	f005 fee4 	bl	ba244 <_ZplRK15StringSumHelperRK6String>
   b447c:	6801      	ldr	r1, [r0, #0]
   b447e:	4630      	mov	r0, r6
   b4480:	f005 fda1 	bl	b9fc6 <_ZN5Print7printlnEPKc>
   b4484:	a804      	add	r0, sp, #16
   b4486:	f005 fdfd 	bl	ba084 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b448a:	a808      	add	r0, sp, #32
   b448c:	f005 fdfa 	bl	ba084 <_ZN6StringD1Ev>
      Wire.beginTransmission(i);
   b4490:	f006 fc72 	bl	bad78 <_Z19__fetch_global_Wirev>
   b4494:	4621      	mov	r1, r4
   b4496:	f005 fc09 	bl	b9cac <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('1');
   b449a:	f006 fc6d 	bl	bad78 <_Z19__fetch_global_Wirev>
   b449e:	2131      	movs	r1, #49	; 0x31
   b44a0:	f7ff febe 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b44a4:	fa5f fb84 	uxtb.w	fp, r4
   b44a8:	f006 fc66 	bl	bad78 <_Z19__fetch_global_Wirev>
   b44ac:	f005 fc05 	bl	b9cba <_ZN7TwoWire15endTransmissionEv>
      Wire.requestFrom(i, 24);
   b44b0:	f006 fc62 	bl	bad78 <_Z19__fetch_global_Wirev>
   b44b4:	2218      	movs	r2, #24
   b44b6:	4659      	mov	r1, fp
   b44b8:	f005 fbf1 	bl	b9c9e <_ZN7TwoWire11requestFromEhj>
      if(Wire.available() > 0){
   b44bc:	f006 fc5c 	bl	bad78 <_Z19__fetch_global_Wirev>
   b44c0:	6803      	ldr	r3, [r0, #0]
   b44c2:	691b      	ldr	r3, [r3, #16]
   b44c4:	4798      	blx	r3
   b44c6:	2800      	cmp	r0, #0
   b44c8:	f340 80ba 	ble.w	b4640 <_Z16randomizeAddressv+0x218>
        Serial.println("transmission recieved from: " + String(i));
   b44cc:	f006 fb06 	bl	baadc <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b44d0:	4651      	mov	r1, sl
   b44d2:	4606      	mov	r6, r0
   b44d4:	a808      	add	r0, sp, #32
   b44d6:	f005 fe20 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
   b44da:	220a      	movs	r2, #10
   b44dc:	4621      	mov	r1, r4
   b44de:	a804      	add	r0, sp, #16
   b44e0:	f005 fe75 	bl	ba1ce <_ZN6StringC1Eih>
   b44e4:	a904      	add	r1, sp, #16
   b44e6:	a808      	add	r0, sp, #32
   b44e8:	f005 feac 	bl	ba244 <_ZplRK15StringSumHelperRK6String>
   b44ec:	6801      	ldr	r1, [r0, #0]
   b44ee:	4630      	mov	r0, r6
   b44f0:	f005 fd69 	bl	b9fc6 <_ZN5Print7printlnEPKc>
   b44f4:	a804      	add	r0, sp, #16
   b44f6:	f005 fdc5 	bl	ba084 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b44fa:	a808      	add	r0, sp, #32
   b44fc:	f005 fdc2 	bl	ba084 <_ZN6StringD1Ev>
        slaveCount++;
   b4500:	682b      	ldr	r3, [r5, #0]
        String inputBuffer = "";
   b4502:	4639      	mov	r1, r7
        slaveCount++;
   b4504:	3301      	adds	r3, #1
        String inputBuffer = "";
   b4506:	4668      	mov	r0, sp
        slaveCount++;
   b4508:	602b      	str	r3, [r5, #0]
        String inputBuffer = "";
   b450a:	f005 fe06 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
   b450e:	2618      	movs	r6, #24
        char c;
        for(int j = 0; j < 24; j++){
          c = Wire.read();
   b4510:	f006 fc32 	bl	bad78 <_Z19__fetch_global_Wirev>
   b4514:	6803      	ldr	r3, [r0, #0]
   b4516:	695b      	ldr	r3, [r3, #20]
   b4518:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b451a:	b2c1      	uxtb	r1, r0
   b451c:	4668      	mov	r0, sp
   b451e:	f005 fe84 	bl	ba22a <_ZN6String6concatEc>
        for(int j = 0; j < 24; j++){
   b4522:	3e01      	subs	r6, #1
   b4524:	d1f4      	bne.n	b4510 <_Z16randomizeAddressv+0xe8>
          inputBuffer += c;
        }
        Wire.beginTransmission(i);
   b4526:	f006 fc27 	bl	bad78 <_Z19__fetch_global_Wirev>
   b452a:	4621      	mov	r1, r4
   b452c:	f005 fbbe 	bl	b9cac <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(inputBuffer);
   b4530:	f006 fc22 	bl	bad78 <_Z19__fetch_global_Wirev>
   b4534:	9900      	ldr	r1, [sp, #0]
   b4536:	f7ff fe77 	bl	b4228 <_ZN5Print5writeEPKc.isra.0>
        Serial.println("device id: " + inputBuffer);
   b453a:	f006 facf 	bl	baadc <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b453e:	4962      	ldr	r1, [pc, #392]	; (b46c8 <_Z16randomizeAddressv+0x2a0>)
   b4540:	4606      	mov	r6, r0
   b4542:	a808      	add	r0, sp, #32
   b4544:	f005 fde9 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
   b4548:	4669      	mov	r1, sp
   b454a:	a808      	add	r0, sp, #32
   b454c:	f005 fe7a 	bl	ba244 <_ZplRK15StringSumHelperRK6String>
   b4550:	6801      	ldr	r1, [r0, #0]
   b4552:	4630      	mov	r0, r6
   b4554:	f005 fd37 	bl	b9fc6 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4558:	a808      	add	r0, sp, #32
   b455a:	f005 fd93 	bl	ba084 <_ZN6StringD1Ev>
        Wire.endTransmission();
   b455e:	f006 fc0b 	bl	bad78 <_Z19__fetch_global_Wirev>
   b4562:	f005 fbaa 	bl	b9cba <_ZN7TwoWire15endTransmissionEv>
        Serial.println("transmission sent to: " + String(i));
   b4566:	f006 fab9 	bl	baadc <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b456a:	4958      	ldr	r1, [pc, #352]	; (b46cc <_Z16randomizeAddressv+0x2a4>)
   b456c:	4606      	mov	r6, r0
   b456e:	a808      	add	r0, sp, #32
   b4570:	f005 fdd3 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
   b4574:	220a      	movs	r2, #10
   b4576:	4621      	mov	r1, r4
   b4578:	a804      	add	r0, sp, #16
   b457a:	f005 fe28 	bl	ba1ce <_ZN6StringC1Eih>
   b457e:	a904      	add	r1, sp, #16
   b4580:	a808      	add	r0, sp, #32
   b4582:	f005 fe5f 	bl	ba244 <_ZplRK15StringSumHelperRK6String>
   b4586:	6801      	ldr	r1, [r0, #0]
   b4588:	4630      	mov	r0, r6
   b458a:	f005 fd1c 	bl	b9fc6 <_ZN5Print7printlnEPKc>
   b458e:	a804      	add	r0, sp, #16
   b4590:	f005 fd78 	bl	ba084 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4594:	a808      	add	r0, sp, #32
   b4596:	f005 fd75 	bl	ba084 <_ZN6StringD1Ev>

        Wire.beginTransmission(i);
   b459a:	f006 fbed 	bl	bad78 <_Z19__fetch_global_Wirev>
   b459e:	4621      	mov	r1, r4
   b45a0:	f005 fb84 	bl	b9cac <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('2');
   b45a4:	f006 fbe8 	bl	bad78 <_Z19__fetch_global_Wirev>
   b45a8:	2132      	movs	r1, #50	; 0x32
   b45aa:	f7ff fe39 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b45ae:	f006 fbe3 	bl	bad78 <_Z19__fetch_global_Wirev>
   b45b2:	f005 fb82 	bl	b9cba <_ZN7TwoWire15endTransmissionEv>

        Serial.println("request code 2, address: " + String(i));
   b45b6:	f006 fa91 	bl	baadc <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b45ba:	4945      	ldr	r1, [pc, #276]	; (b46d0 <_Z16randomizeAddressv+0x2a8>)
   b45bc:	4606      	mov	r6, r0
   b45be:	a808      	add	r0, sp, #32
   b45c0:	f005 fdab 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
   b45c4:	220a      	movs	r2, #10
   b45c6:	4621      	mov	r1, r4
   b45c8:	a804      	add	r0, sp, #16
   b45ca:	f005 fe00 	bl	ba1ce <_ZN6StringC1Eih>
   b45ce:	a904      	add	r1, sp, #16
   b45d0:	a808      	add	r0, sp, #32
   b45d2:	f005 fe37 	bl	ba244 <_ZplRK15StringSumHelperRK6String>
   b45d6:	6801      	ldr	r1, [r0, #0]
   b45d8:	4630      	mov	r0, r6
   b45da:	f005 fcf4 	bl	b9fc6 <_ZN5Print7printlnEPKc>
   b45de:	a804      	add	r0, sp, #16
   b45e0:	f005 fd50 	bl	ba084 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b45e4:	a808      	add	r0, sp, #32
   b45e6:	f005 fd4d 	bl	ba084 <_ZN6StringD1Ev>
        Wire.requestFrom(i, 4);
   b45ea:	f006 fbc5 	bl	bad78 <_Z19__fetch_global_Wirev>
   b45ee:	2204      	movs	r2, #4
   b45f0:	4659      	mov	r1, fp
   b45f2:	f005 fb54 	bl	b9c9e <_ZN7TwoWire11requestFromEhj>
        inputBuffer = "";
   b45f6:	4639      	mov	r1, r7
   b45f8:	4668      	mov	r0, sp
   b45fa:	f005 fdd6 	bl	ba1aa <_ZN6StringaSEPKc>
   b45fe:	2604      	movs	r6, #4
        for(int j = 0; j < 4; j++){
          inputBuffer += (char)Wire.read();
   b4600:	f006 fbba 	bl	bad78 <_Z19__fetch_global_Wirev>
   b4604:	6803      	ldr	r3, [r0, #0]
   b4606:	695b      	ldr	r3, [r3, #20]
   b4608:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b460a:	b2c1      	uxtb	r1, r0
   b460c:	4668      	mov	r0, sp
   b460e:	f005 fe0c 	bl	ba22a <_ZN6String6concatEc>
        for(int j = 0; j < 4; j++){
   b4612:	3e01      	subs	r6, #1
   b4614:	d1f4      	bne.n	b4600 <_Z16randomizeAddressv+0x1d8>
        }
        
        Serial.println("conflict verification: " + inputBuffer);
   b4616:	f006 fa61 	bl	baadc <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b461a:	492e      	ldr	r1, [pc, #184]	; (b46d4 <_Z16randomizeAddressv+0x2ac>)
   b461c:	4606      	mov	r6, r0
   b461e:	a808      	add	r0, sp, #32
   b4620:	f005 fd7b 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
   b4624:	4669      	mov	r1, sp
   b4626:	a808      	add	r0, sp, #32
   b4628:	f005 fe0c 	bl	ba244 <_ZplRK15StringSumHelperRK6String>
   b462c:	6801      	ldr	r1, [r0, #0]
   b462e:	4630      	mov	r0, r6
   b4630:	f005 fcc9 	bl	b9fc6 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4634:	a808      	add	r0, sp, #32
   b4636:	f005 fd25 	bl	ba084 <_ZN6StringD1Ev>
        String inputBuffer = "";
   b463a:	4668      	mov	r0, sp
   b463c:	f005 fd22 	bl	ba084 <_ZN6StringD1Ev>
    for(int i = 8; i <= 119; i++){
   b4640:	3401      	adds	r4, #1
   b4642:	2c78      	cmp	r4, #120	; 0x78
   b4644:	f47f af0a 	bne.w	b445c <_Z16randomizeAddressv+0x34>
   b4648:	e6f4      	b.n	b4434 <_Z16randomizeAddressv+0xc>
      }
    }
  }

  Serial.println("\nConnected to: ");
   b464a:	f006 fa47 	bl	baadc <_Z16_fetch_usbserialv>
   b464e:	4922      	ldr	r1, [pc, #136]	; (b46d8 <_Z16randomizeAddressv+0x2b0>)
    Wire.endTransmission();

    Wire.requestFrom(i, 24);
    if(Wire.available() > 0){
      Serial.print(i);
      Serial.print(", ");
   b4650:	4e22      	ldr	r6, [pc, #136]	; (b46dc <_Z16randomizeAddressv+0x2b4>)
   b4652:	4f23      	ldr	r7, [pc, #140]	; (b46e0 <_Z16randomizeAddressv+0x2b8>)
  Serial.println("\nConnected to: ");
   b4654:	f005 fcb7 	bl	b9fc6 <_ZN5Print7printlnEPKc>
  for(int i = 8; i<= 119; i++){
   b4658:	2408      	movs	r4, #8
  int count = 0;
   b465a:	2500      	movs	r5, #0
    Wire.beginTransmission(i);
   b465c:	f006 fb8c 	bl	bad78 <_Z19__fetch_global_Wirev>
   b4660:	4621      	mov	r1, r4
   b4662:	f005 fb23 	bl	b9cac <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('1');
   b4666:	f006 fb87 	bl	bad78 <_Z19__fetch_global_Wirev>
   b466a:	2131      	movs	r1, #49	; 0x31
   b466c:	f7ff fdd8 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b4670:	f006 fb82 	bl	bad78 <_Z19__fetch_global_Wirev>
   b4674:	f005 fb21 	bl	b9cba <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(i, 24);
   b4678:	f006 fb7e 	bl	bad78 <_Z19__fetch_global_Wirev>
   b467c:	2218      	movs	r2, #24
   b467e:	b2e1      	uxtb	r1, r4
   b4680:	f005 fb0d 	bl	b9c9e <_ZN7TwoWire11requestFromEhj>
    if(Wire.available() > 0){
   b4684:	f006 fb78 	bl	bad78 <_Z19__fetch_global_Wirev>
   b4688:	6803      	ldr	r3, [r0, #0]
   b468a:	691b      	ldr	r3, [r3, #16]
   b468c:	4798      	blx	r3
   b468e:	2800      	cmp	r0, #0
   b4690:	dd0e      	ble.n	b46b0 <_Z16randomizeAddressv+0x288>
      Serial.print(i);
   b4692:	f006 fa23 	bl	baadc <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4696:	220a      	movs	r2, #10
   b4698:	4621      	mov	r1, r4
   b469a:	f005 fc9e 	bl	b9fda <_ZN5Print11printNumberEmh>
      Serial.print(", ");
   b469e:	f006 fa1d 	bl	baadc <_Z16_fetch_usbserialv>
   b46a2:	4631      	mov	r1, r6
   b46a4:	f005 fc7c 	bl	b9fa0 <_ZN5Print5printEPKc>

      addressArr[count++] = i;
   b46a8:	683b      	ldr	r3, [r7, #0]
   b46aa:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
   b46ae:	3501      	adds	r5, #1
  for(int i = 8; i<= 119; i++){
   b46b0:	3401      	adds	r4, #1
   b46b2:	2c78      	cmp	r4, #120	; 0x78
   b46b4:	d1d2      	bne.n	b465c <_Z16randomizeAddressv+0x234>
    }
  }
}
   b46b6:	b00d      	add	sp, #52	; 0x34
   b46b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b46bc:	2003e6a8 	.word	0x2003e6a8
   b46c0:	20035118 	.word	0x20035118
   b46c4:	000be3ca 	.word	0x000be3ca
   b46c8:	000bdfd6 	.word	0x000bdfd6
   b46cc:	000bdfe2 	.word	0x000bdfe2
   b46d0:	000bdff9 	.word	0x000bdff9
   b46d4:	000be013 	.word	0x000be013
   b46d8:	000be02b 	.word	0x000be02b
   b46dc:	000be1c7 	.word	0x000be1c7
   b46e0:	20035368 	.word	0x20035368
   b46e4:	200354c0 	.word	0x200354c0
   b46e8:	000bdf9e 	.word	0x000bdf9e
   b46ec:	000bdfb9 	.word	0x000bdfb9

000b46f0 <_Z17acquireWireBufferv>:
    }
    bleCount++;
  }
}

hal_i2c_config_t acquireWireBuffer() {
   b46f0:	b538      	push	{r3, r4, r5, lr}
    hal_i2c_config_t config = {
   b46f2:	f44f 7500 	mov.w	r5, #512	; 0x200
   b46f6:	2314      	movs	r3, #20
hal_i2c_config_t acquireWireBuffer() {
   b46f8:	4604      	mov	r4, r0
    hal_i2c_config_t config = {
   b46fa:	6003      	str	r3, [r0, #0]
   b46fc:	6085      	str	r5, [r0, #8]
   b46fe:	6105      	str	r5, [r0, #16]
        .size = sizeof(hal_i2c_config_t),
        .version = HAL_I2C_CONFIG_VERSION_1,
        .rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4700:	4905      	ldr	r1, [pc, #20]	; (b4718 <_Z17acquireWireBufferv+0x28>)
   b4702:	4628      	mov	r0, r5
   b4704:	f006 fb9c 	bl	bae40 <_ZnajRKSt9nothrow_t>
        .rx_buffer_size = I2C_BUFFER_SIZE,
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4708:	4903      	ldr	r1, [pc, #12]	; (b4718 <_Z17acquireWireBufferv+0x28>)
        .tx_buffer_size = I2C_BUFFER_SIZE
    };
   b470a:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b470c:	4628      	mov	r0, r5
   b470e:	f006 fb97 	bl	bae40 <_ZnajRKSt9nothrow_t>
    };
   b4712:	60e0      	str	r0, [r4, #12]
    return config;
   b4714:	4620      	mov	r0, r4
   b4716:	bd38      	pop	{r3, r4, r5, pc}
   b4718:	000be7d0 	.word	0x000be7d0

000b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b471c:	b510      	push	{r4, lr}
   b471e:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4720:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b4722:	b118      	cbz	r0, b472c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4724:	68a1      	ldr	r1, [r4, #8]
   b4726:	1a09      	subs	r1, r1, r0
   b4728:	f7ff fcbb 	bl	b40a2 <_ZdlPvj>
      }
   b472c:	4620      	mov	r0, r4
   b472e:	bd10      	pop	{r4, pc}

000b4730 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4730:	b510      	push	{r4, lr}
   b4732:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4734:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b4736:	b118      	cbz	r0, b4740 <_ZNSt12_Vector_baseIfSaIfEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4738:	68a1      	ldr	r1, [r4, #8]
   b473a:	1a09      	subs	r1, r1, r0
   b473c:	f7ff fcb1 	bl	b40a2 <_ZdlPvj>
      }
   b4740:	4620      	mov	r0, r4
   b4742:	bd10      	pop	{r4, pc}

000b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4744:	b510      	push	{r4, lr}
   b4746:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4748:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b474a:	b118      	cbz	r0, b4754 <_ZNSt12_Vector_baseIiSaIiEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b474c:	68a1      	ldr	r1, [r4, #8]
   b474e:	1a09      	subs	r1, r1, r0
   b4750:	f7ff fca7 	bl	b40a2 <_ZdlPvj>
      }
   b4754:	4620      	mov	r0, r4
   b4756:	bd10      	pop	{r4, pc}

000b4758 <_ZNSt6vectorIiSaIiEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
   b4758:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
   b475a:	680d      	ldr	r5, [r1, #0]
	  _M_end_of_storage = __x._M_end_of_storage;
   b475c:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
   b475e:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
   b4762:	6005      	str	r5, [r0, #0]
      _M_move_assign(vector&& __x, true_type) noexcept
   b4764:	b085      	sub	sp, #20
	  _M_finish = __x._M_finish;
   b4766:	684d      	ldr	r5, [r1, #4]
   b4768:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
   b476a:	688d      	ldr	r5, [r1, #8]
   b476c:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
   b476e:	2300      	movs	r3, #0
	  _M_end_of_storage = __x._M_end_of_storage;
   b4770:	6085      	str	r5, [r0, #8]
	  _M_finish = __x._M_finish;
   b4772:	e9c1 3300 	strd	r3, r3, [r1]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4776:	608b      	str	r3, [r1, #8]
      }
   b4778:	a801      	add	r0, sp, #4
	  _M_finish = __x._M_finish;
   b477a:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
   b477e:	f7ff ffe1 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
      {
	vector __tmp(get_allocator());
	this->_M_impl._M_swap_data(__x._M_impl);
	__tmp._M_impl._M_swap_data(__x._M_impl);
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
      }
   b4782:	b005      	add	sp, #20
   b4784:	bd30      	pop	{r4, r5, pc}

000b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b4786:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4788:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   b478c:	4604      	mov	r4, r0
	  for (; __first != __last; ++__first)
   b478e:	42ae      	cmp	r6, r5
   b4790:	d004      	beq.n	b479c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x16>
      { _M_dispose(); }
   b4792:	4628      	mov	r0, r5
   b4794:	f006 fb8e 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4798:	3518      	adds	r5, #24
   b479a:	e7f8      	b.n	b478e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   b479c:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b479e:	b118      	cbz	r0, b47a8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x22>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b47a0:	68a1      	ldr	r1, [r4, #8]
   b47a2:	1a09      	subs	r1, r1, r0
   b47a4:	f7ff fc7d 	bl	b40a2 <_ZdlPvj>
      }
   b47a8:	4620      	mov	r0, r4
   b47aa:	bd70      	pop	{r4, r5, r6, pc}

000b47ac <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>:
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b47ac:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
      vector(size_type __n, const value_type& __value,
   b47b0:	b570      	push	{r4, r5, r6, lr}
   b47b2:	4604      	mov	r4, r0
   b47b4:	460d      	mov	r5, r1
   b47b6:	4616      	mov	r6, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b47b8:	d302      	bcc.n	b47c0 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x14>
	  __throw_length_error(
   b47ba:	480c      	ldr	r0, [pc, #48]	; (b47ec <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x40>)
   b47bc:	f006 fb48 	bl	bae50 <_ZSt20__throw_length_errorPKc>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b47c0:	2300      	movs	r3, #0
   b47c2:	e9c0 3300 	strd	r3, r3, [r0]
   b47c6:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b47c8:	4608      	mov	r0, r1
   b47ca:	f7ff fce9 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b47ce:	eb00 0385 	add.w	r3, r0, r5, lsl #2
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b47d2:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b47d6:	60a3      	str	r3, [r4, #8]
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
   b47d8:	b12d      	cbz	r5, b47e6 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x3a>
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
   b47da:	6832      	ldr	r2, [r6, #0]
      for (; __first != __last; ++__first)
   b47dc:	4283      	cmp	r3, r0
   b47de:	d002      	beq.n	b47e6 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x3a>
	*__first = __tmp;
   b47e0:	f840 2b04 	str.w	r2, [r0], #4
      for (; __first != __last; ++__first)
   b47e4:	e7fa      	b.n	b47dc <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x30>
	this->_M_impl._M_finish =
   b47e6:	6060      	str	r0, [r4, #4]
      { _M_fill_initialize(__n, __value); }
   b47e8:	4620      	mov	r0, r4
   b47ea:	bd70      	pop	{r4, r5, r6, pc}
   b47ec:	000be03b 	.word	0x000be03b

000b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
   b47f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b47f4:	2400      	movs	r4, #0
      vector(initializer_list<value_type> __l,
   b47f6:	ab02      	add	r3, sp, #8
   b47f8:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b47fc:	e9c0 4400 	strd	r4, r4, [r0]
      constexpr const_iterator
      begin() const noexcept { return _M_array; }

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
   b4800:	4613      	mov	r3, r2
      vector(initializer_list<value_type> __l,
   b4802:	4605      	mov	r5, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4804:	6084      	str	r4, [r0, #8]
   b4806:	00d7      	lsls	r7, r2, #3
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b4808:	f342 001c 	sbfx	r0, r2, #0, #29
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b480c:	4a10      	ldr	r2, [pc, #64]	; (b4850 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x60>)
   b480e:	ebb2 0fc3 	cmp.w	r2, r3, lsl #3
   b4812:	4688      	mov	r8, r1
   b4814:	d202      	bcs.n	b481c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x2c>
	  __throw_length_error(
   b4816:	480f      	ldr	r0, [pc, #60]	; (b4854 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x64>)
   b4818:	f006 fb1a 	bl	bae50 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b481c:	f7ff fccd 	bl	b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4820:	19c6      	adds	r6, r0, r7
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4822:	4602      	mov	r2, r0
   b4824:	6028      	str	r0, [r5, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4826:	60ae      	str	r6, [r5, #8]
   b4828:	4623      	mov	r3, r4
   b482a:	429f      	cmp	r7, r3
   b482c:	d00b      	beq.n	b4846 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x56>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b482e:	18d4      	adds	r4, r2, r3
   b4830:	bf1c      	itt	ne
   b4832:	eb08 0103 	addne.w	r1, r8, r3
   b4836:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b483a:	f103 0308 	add.w	r3, r3, #8
   b483e:	bf18      	it	ne
   b4840:	e9c4 0100 	strdne	r0, r1, [r4]
   b4844:	e7f1      	b.n	b482a <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x3a>
      }
   b4846:	4628      	mov	r0, r5
	  this->_M_impl._M_finish =
   b4848:	606e      	str	r6, [r5, #4]
      }
   b484a:	b002      	add	sp, #8
   b484c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4850:	7ffffff8 	.word	0x7ffffff8
   b4854:	000be03b 	.word	0x000be03b

000b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>:
      vector(initializer_list<value_type> __l,
   b4858:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b485c:	ab02      	add	r3, sp, #8
   b485e:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4862:	2300      	movs	r3, #0
   b4864:	e9c0 3300 	strd	r3, r3, [r0]
   b4868:	6083      	str	r3, [r0, #8]
   b486a:	4616      	mov	r6, r2
   b486c:	2318      	movs	r3, #24
   b486e:	435e      	muls	r6, r3
   b4870:	4b10      	ldr	r3, [pc, #64]	; (b48b4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x5c>)
      vector(initializer_list<value_type> __l,
   b4872:	4604      	mov	r4, r0
   b4874:	10f0      	asrs	r0, r6, #3
   b4876:	4358      	muls	r0, r3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4878:	4b0f      	ldr	r3, [pc, #60]	; (b48b8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x60>)
   b487a:	429e      	cmp	r6, r3
   b487c:	460f      	mov	r7, r1
   b487e:	eb01 0806 	add.w	r8, r1, r6
   b4882:	d902      	bls.n	b488a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x32>
	  __throw_length_error(
   b4884:	480d      	ldr	r0, [pc, #52]	; (b48bc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x64>)
   b4886:	f006 fae3 	bl	bae50 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b488a:	f7ff fc77 	bl	b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b488e:	4406      	add	r6, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4890:	4605      	mov	r5, r0
   b4892:	6020      	str	r0, [r4, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4894:	60a6      	str	r6, [r4, #8]
   b4896:	45b8      	cmp	r8, r7
   b4898:	d007      	beq.n	b48aa <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x52>
   b489a:	b11d      	cbz	r5, b48a4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x4c>
   b489c:	4639      	mov	r1, r7
   b489e:	4628      	mov	r0, r5
   b48a0:	f7ff fc98 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b48a4:	3718      	adds	r7, #24
   b48a6:	3518      	adds	r5, #24
   b48a8:	e7f5      	b.n	b4896 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x3e>
      }
   b48aa:	4620      	mov	r0, r4
	  this->_M_impl._M_finish =
   b48ac:	6065      	str	r5, [r4, #4]
      }
   b48ae:	b002      	add	sp, #8
   b48b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b48b4:	aaaaaaab 	.word	0xaaaaaaab
   b48b8:	7ffffff8 	.word	0x7ffffff8
   b48bc:	000be03b 	.word	0x000be03b

000b48c0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   b48c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b48c2:	e9d1 3700 	ldrd	r3, r7, [r1]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b48c6:	2500      	movs	r5, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b48c8:	1aff      	subs	r7, r7, r3
      vector(const vector& __x)
   b48ca:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b48cc:	e9c0 5500 	strd	r5, r5, [r0]
   b48d0:	6085      	str	r5, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b48d2:	10f8      	asrs	r0, r7, #3
      vector(const vector& __x)
   b48d4:	460e      	mov	r6, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b48d6:	f7ff fc70 	bl	b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b48da:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b48de:	4407      	add	r7, r0
   b48e0:	60a7      	str	r7, [r4, #8]
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b48e2:	e9d6 7600 	ldrd	r7, r6, [r6]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b48e6:	4602      	mov	r2, r0
   b48e8:	1bf6      	subs	r6, r6, r7
      : _M_current(__i) { }
   b48ea:	462b      	mov	r3, r5
   b48ec:	42b3      	cmp	r3, r6
   b48ee:	eb02 0503 	add.w	r5, r2, r3
   b48f2:	d006      	beq.n	b4902 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x42>
   b48f4:	b11d      	cbz	r5, b48fe <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x3e>
   b48f6:	18f9      	adds	r1, r7, r3
   b48f8:	c903      	ldmia	r1, {r0, r1}
   b48fa:	e885 0003 	stmia.w	r5, {r0, r1}
   b48fe:	3308      	adds	r3, #8
   b4900:	e7f4      	b.n	b48ec <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x2c>
	this->_M_impl._M_finish =
   b4902:	6065      	str	r5, [r4, #4]
      }
   b4904:	4620      	mov	r0, r4
   b4906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>:
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
   b4908:	b508      	push	{r3, lr}
      { return _M_string_length; }
   b490a:	6842      	ldr	r2, [r0, #4]
	       const basic_string<_CharT>& __rhs) _GLIBCXX_NOEXCEPT
    { return (__lhs.size() == __rhs.size()
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
   b490c:	684b      	ldr	r3, [r1, #4]
   b490e:	429a      	cmp	r2, r3
   b4910:	d108      	bne.n	b4924 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1c>
	if (__n == 0)
   b4912:	b14a      	cbz	r2, b4928 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x20>
	return __builtin_memcmp(__s1, __s2, __n);
   b4914:	6809      	ldr	r1, [r1, #0]
   b4916:	6800      	ldr	r0, [r0, #0]
   b4918:	f007 fa6c 	bl	bbdf4 <memcmp>
   b491c:	fab0 f080 	clz	r0, r0
   b4920:	0940      	lsrs	r0, r0, #5
						    __lhs.size())); }
   b4922:	bd08      	pop	{r3, pc}
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
   b4924:	2000      	movs	r0, #0
   b4926:	e7fc      	b.n	b4922 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1a>
   b4928:	2001      	movs	r0, #1
   b492a:	e7fa      	b.n	b4922 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1a>

000b492c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b492c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  txCharacteristic.setValue("ok");
   b4930:	2200      	movs	r2, #0
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4932:	b0a3      	sub	sp, #140	; 0x8c
   b4934:	4604      	mov	r4, r0
   b4936:	460d      	mov	r5, r1
  txCharacteristic.setValue("ok");
   b4938:	4893      	ldr	r0, [pc, #588]	; (b4b88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x25c>)
   b493a:	4994      	ldr	r1, [pc, #592]	; (b4b8c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x260>)
   b493c:	f004 f9fe 	bl	b8d3c <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
  String inputBuffer = "";
   b4940:	4993      	ldr	r1, [pc, #588]	; (b4b90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x264>)
   b4942:	a803      	add	r0, sp, #12
   b4944:	f005 fbe9 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
  String nameBuffer;
   b4948:	4991      	ldr	r1, [pc, #580]	; (b4b90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x264>)
   b494a:	a807      	add	r0, sp, #28
   b494c:	f005 fbe5 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
  for(int i = 0; i < len; i++){
   b4950:	4425      	add	r5, r4
   b4952:	42a5      	cmp	r5, r4
   b4954:	d005      	beq.n	b4962 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x36>
	String & operator += (char c)			{concat(c); return (*this);}
   b4956:	f814 1b01 	ldrb.w	r1, [r4], #1
   b495a:	a803      	add	r0, sp, #12
   b495c:	f005 fc65 	bl	ba22a <_ZN6String6concatEc>
   b4960:	e7f7      	b.n	b4952 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x26>
  Serial.println(inputBuffer);
   b4962:	f006 f8bb 	bl	baadc <_Z16_fetch_usbserialv>
   b4966:	9903      	ldr	r1, [sp, #12]
   b4968:	f005 fb2d 	bl	b9fc6 <_ZN5Print7printlnEPKc>
  if(inputBuffer.indexOf("wifi:") == 0){
   b496c:	4989      	ldr	r1, [pc, #548]	; (b4b94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x268>)
   b496e:	a80f      	add	r0, sp, #60	; 0x3c
   b4970:	f005 fbd3 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
   b4974:	a90f      	add	r1, sp, #60	; 0x3c
   b4976:	a803      	add	r0, sp, #12
   b4978:	f005 fcc8 	bl	ba30c <_ZNK6String7indexOfERKS_>
   b497c:	4604      	mov	r4, r0
   b497e:	a80f      	add	r0, sp, #60	; 0x3c
   b4980:	f005 fb80 	bl	ba084 <_ZN6StringD1Ev>
   b4984:	2c00      	cmp	r4, #0
   b4986:	d15b      	bne.n	b4a40 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x114>
    int commaIndex = inputBuffer.indexOf(",");
   b4988:	4983      	ldr	r1, [pc, #524]	; (b4b98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x26c>)
    SSID = inputBuffer.substring(5, commaIndex);
   b498a:	4d84      	ldr	r5, [pc, #528]	; (b4b9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x270>)
    int commaIndex = inputBuffer.indexOf(",");
   b498c:	a80f      	add	r0, sp, #60	; 0x3c
   b498e:	f005 fbc4 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
   b4992:	a90f      	add	r1, sp, #60	; 0x3c
   b4994:	a803      	add	r0, sp, #12
   b4996:	f005 fcb9 	bl	ba30c <_ZNK6String7indexOfERKS_>
   b499a:	4604      	mov	r4, r0
   b499c:	a80f      	add	r0, sp, #60	; 0x3c
   b499e:	f005 fb71 	bl	ba084 <_ZN6StringD1Ev>
    SSID = inputBuffer.substring(5, commaIndex);
   b49a2:	4623      	mov	r3, r4
   b49a4:	2205      	movs	r2, #5
   b49a6:	a903      	add	r1, sp, #12
   b49a8:	a80f      	add	r0, sp, #60	; 0x3c
   b49aa:	f005 fcb3 	bl	ba314 <_ZNK6String9substringEjj>
   b49ae:	a90f      	add	r1, sp, #60	; 0x3c
   b49b0:	4628      	mov	r0, r5
   b49b2:	f005 fbf2 	bl	ba19a <_ZN6StringaSEOS_>
   b49b6:	a80f      	add	r0, sp, #60	; 0x3c
   b49b8:	f005 fb64 	bl	ba084 <_ZN6StringD1Ev>
    password = inputBuffer.substring(commaIndex + 1);
   b49bc:	1c62      	adds	r2, r4, #1
   b49be:	4c78      	ldr	r4, [pc, #480]	; (b4ba0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x274>)
   b49c0:	a903      	add	r1, sp, #12
   b49c2:	a80f      	add	r0, sp, #60	; 0x3c
   b49c4:	f005 fcc6 	bl	ba354 <_ZNK6String9substringEj>
   b49c8:	a90f      	add	r1, sp, #60	; 0x3c
   b49ca:	4620      	mov	r0, r4
   b49cc:	f005 fbe5 	bl	ba19a <_ZN6StringaSEOS_>
   b49d0:	a80f      	add	r0, sp, #60	; 0x3c
   b49d2:	f005 fb57 	bl	ba084 <_ZN6StringD1Ev>
    Serial.printlnf("SSID: %s, password: %s", SSID.c_str(), password.c_str());
   b49d6:	f006 f881 	bl	baadc <_Z16_fetch_usbserialv>
   b49da:	682a      	ldr	r2, [r5, #0]
   b49dc:	6823      	ldr	r3, [r4, #0]
   b49de:	4971      	ldr	r1, [pc, #452]	; (b4ba4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x278>)
   b49e0:	f7ff fd14 	bl	b440c <_ZN5Print8printlnfEPKcz>
	const char * c_str() const { return buffer; }
   b49e4:	682f      	ldr	r7, [r5, #0]
   b49e6:	6825      	ldr	r5, [r4, #0]
    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b49e8:	b337      	cbz	r7, b4a38 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10c>
   b49ea:	4638      	mov	r0, r7
   b49ec:	f007 fa82 	bl	bbef4 <strlen>
   b49f0:	4606      	mov	r6, r0
   b49f2:	b31d      	cbz	r5, b4a3c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x110>
   b49f4:	4628      	mov	r0, r5
   b49f6:	f007 fa7d 	bl	bbef4 <strlen>
   b49fa:	4604      	mov	r4, r0

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   b49fc:	2238      	movs	r2, #56	; 0x38
   b49fe:	2100      	movs	r1, #0
   b4a00:	a814      	add	r0, sp, #80	; 0x50
   b4a02:	f007 fa2f 	bl	bbe64 <memset>
        creds.size = sizeof(creds);
   b4a06:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
   b4a08:	e9cd 370f 	strd	r3, r7, [sp, #60]	; 0x3c
        creds.ssid_len = ssidLen;
        creds.password = password;
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4a0c:	4866      	ldr	r0, [pc, #408]	; (b4ba8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x27c>)
        creds.password_len = passwordLen;
   b4a0e:	9413      	str	r4, [sp, #76]	; 0x4c
        creds.security = WLanSecurityType(security);
   b4a10:	2303      	movs	r3, #3
   b4a12:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4a16:	2300      	movs	r3, #0
   b4a18:	6840      	ldr	r0, [r0, #4]
   b4a1a:	aa0f      	add	r2, sp, #60	; 0x3c
   b4a1c:	4619      	mov	r1, r3
        creds.password = password;
   b4a1e:	e9cd 6511 	strd	r6, r5, [sp, #68]	; 0x44
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4a22:	f003 fe61 	bl	b86e8 <network_set_credentials>
  String nameBuffer;
   b4a26:	a807      	add	r0, sp, #28
   b4a28:	f005 fb2c 	bl	ba084 <_ZN6StringD1Ev>
  String inputBuffer = "";
   b4a2c:	a803      	add	r0, sp, #12
   b4a2e:	f005 fb29 	bl	ba084 <_ZN6StringD1Ev>
}
   b4a32:	b023      	add	sp, #140	; 0x8c
   b4a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b4a38:	463e      	mov	r6, r7
   b4a3a:	e7da      	b.n	b49f2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xc6>
   b4a3c:	462c      	mov	r4, r5
   b4a3e:	e7dd      	b.n	b49fc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xd0>
  else if(inputBuffer.indexOf("city:") == 0){
   b4a40:	495a      	ldr	r1, [pc, #360]	; (b4bac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x280>)
   b4a42:	a80f      	add	r0, sp, #60	; 0x3c
   b4a44:	f005 fb69 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
   b4a48:	a90f      	add	r1, sp, #60	; 0x3c
   b4a4a:	a803      	add	r0, sp, #12
   b4a4c:	f005 fc5e 	bl	ba30c <_ZNK6String7indexOfERKS_>
   b4a50:	4604      	mov	r4, r0
   b4a52:	a80f      	add	r0, sp, #60	; 0x3c
   b4a54:	f005 fb16 	bl	ba084 <_ZN6StringD1Ev>
   b4a58:	2c00      	cmp	r4, #0
   b4a5a:	d17f      	bne.n	b4b5c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x230>
    inputBuffer = inputBuffer.substring(5);
   b4a5c:	2205      	movs	r2, #5
   b4a5e:	a903      	add	r1, sp, #12
   b4a60:	a80f      	add	r0, sp, #60	; 0x3c
   b4a62:	f005 fc77 	bl	ba354 <_ZNK6String9substringEj>
   b4a66:	a90f      	add	r1, sp, #60	; 0x3c
   b4a68:	a803      	add	r0, sp, #12
   b4a6a:	f005 fb96 	bl	ba19a <_ZN6StringaSEOS_>
   b4a6e:	a80f      	add	r0, sp, #60	; 0x3c
   b4a70:	f005 fb08 	bl	ba084 <_ZN6StringD1Ev>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4a74:	4d4e      	ldr	r5, [pc, #312]	; (b4bb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x284>)
   b4a76:	f8df 815c 	ldr.w	r8, [pc, #348]	; b4bd4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a8>
   b4a7a:	494e      	ldr	r1, [pc, #312]	; (b4bb4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x288>)
   b4a7c:	4e4e      	ldr	r6, [pc, #312]	; (b4bb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x28c>)
   b4a7e:	e9d5 2300 	ldrd	r2, r3, [r5]
   b4a82:	1a9b      	subs	r3, r3, r2
   b4a84:	10db      	asrs	r3, r3, #3
   b4a86:	434b      	muls	r3, r1
    for(int i = 0; i < cities.size(); i++){
   b4a88:	42a3      	cmp	r3, r4
   b4a8a:	d95b      	bls.n	b4b44 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x218>
      { return _M_dataplus._M_p; }
   b4a8c:	2328      	movs	r3, #40	; 0x28
   b4a8e:	fb03 2204 	mla	r2, r3, r4, r2
      if(inputBuffer == String(cities[i].name.c_str())){
   b4a92:	a80f      	add	r0, sp, #60	; 0x3c
   b4a94:	68d1      	ldr	r1, [r2, #12]
   b4a96:	f005 fb40 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b4a9a:	a90f      	add	r1, sp, #60	; 0x3c
   b4a9c:	a803      	add	r0, sp, #12
   b4a9e:	f005 fc07 	bl	ba2b0 <_ZNK6String6equalsERKS_>
   b4aa2:	4607      	mov	r7, r0
   b4aa4:	a80f      	add	r0, sp, #60	; 0x3c
   b4aa6:	f005 faed 	bl	ba084 <_ZN6StringD1Ev>
   b4aaa:	b107      	cbz	r7, b4aae <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x182>
        cityIndex = i;
   b4aac:	6034      	str	r4, [r6, #0]
      if(cityIndex == -1){
   b4aae:	6833      	ldr	r3, [r6, #0]
   b4ab0:	1c5a      	adds	r2, r3, #1
   b4ab2:	d105      	bne.n	b4ac0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x194>
        txCharacteristic.setValue("incorrect city name");
   b4ab4:	4941      	ldr	r1, [pc, #260]	; (b4bbc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x290>)
   b4ab6:	2200      	movs	r2, #0
      txCharacteristic.setValue("city not set");
   b4ab8:	4833      	ldr	r0, [pc, #204]	; (b4b88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x25c>)
   b4aba:	f004 f93f 	bl	b8d3c <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      return;
   b4abe:	e7b2      	b.n	b4a26 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfa>
	return *(this->_M_impl._M_start + __n);
   b4ac0:	682a      	ldr	r2, [r5, #0]
   b4ac2:	2728      	movs	r7, #40	; 0x28
   b4ac4:	437b      	muls	r3, r7
   b4ac6:	18d1      	adds	r1, r2, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4ac8:	58d3      	ldr	r3, [r2, r3]
   b4aca:	6849      	ldr	r1, [r1, #4]
   b4acc:	1ac9      	subs	r1, r1, r3
   b4ace:	1089      	asrs	r1, r1, #2
   b4ad0:	fb08 f101 	mul.w	r1, r8, r1
      sequenceArr = std::vector<int>(cities[cityIndex].railways.size() * 2, 0);
   b4ad4:	ab02      	add	r3, sp, #8
   b4ad6:	aa0b      	add	r2, sp, #44	; 0x2c
   b4ad8:	f04f 0900 	mov.w	r9, #0
   b4adc:	0049      	lsls	r1, r1, #1
   b4ade:	a80f      	add	r0, sp, #60	; 0x3c
   b4ae0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   b4ae4:	f7ff fe62 	bl	b47ac <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
   b4ae8:	a90f      	add	r1, sp, #60	; 0x3c
   b4aea:	4835      	ldr	r0, [pc, #212]	; (b4bc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x294>)
   b4aec:	f7ff fe34 	bl	b4758 <_ZNSt6vectorIiSaIiEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>
      }
   b4af0:	a80f      	add	r0, sp, #60	; 0x3c
   b4af2:	f7ff fe27 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
	return *(this->_M_impl._M_start + __n);
   b4af6:	6832      	ldr	r2, [r6, #0]
      addressArr = std::vector<int>(cities[cityIndex].slaveCountExpected, 0);
   b4af8:	682b      	ldr	r3, [r5, #0]
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
   b4afa:	4e32      	ldr	r6, [pc, #200]	; (b4bc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x298>)
   b4afc:	fb07 3302 	mla	r3, r7, r2, r3
   b4b00:	a80f      	add	r0, sp, #60	; 0x3c
   b4b02:	aa0b      	add	r2, sp, #44	; 0x2c
   b4b04:	6a59      	ldr	r1, [r3, #36]	; 0x24
   b4b06:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   b4b0a:	ab02      	add	r3, sp, #8
   b4b0c:	f7ff fe4e 	bl	b47ac <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b4b10:	a90f      	add	r1, sp, #60	; 0x3c
   b4b12:	4630      	mov	r0, r6
   b4b14:	f7ff fe20 	bl	b4758 <_ZNSt6vectorIiSaIiEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>
      }
   b4b18:	a80f      	add	r0, sp, #60	; 0x3c
   b4b1a:	f7ff fe13 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
      randomizeAddress();
   b4b1e:	f7ff fc83 	bl	b4428 <_Z16randomizeAddressv>
      Wire.beginTransmission(addressArr[0]);
   b4b22:	f006 f929 	bl	bad78 <_Z19__fetch_global_Wirev>
   b4b26:	6833      	ldr	r3, [r6, #0]
   b4b28:	6819      	ldr	r1, [r3, #0]
   b4b2a:	f005 f8bf 	bl	b9cac <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('3');
   b4b2e:	f006 f923 	bl	bad78 <_Z19__fetch_global_Wirev>
   b4b32:	2133      	movs	r1, #51	; 0x33
   b4b34:	f7ff fb74 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4b38:	f006 f91e 	bl	bad78 <_Z19__fetch_global_Wirev>
   b4b3c:	f005 f8bd 	bl	b9cba <_ZN7TwoWire15endTransmissionEv>
    for(int i = 0; i < cities.size(); i++){
   b4b40:	3401      	adds	r4, #1
   b4b42:	e79a      	b.n	b4a7a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14e>
    Serial.printlnf("city: %s", cities[cityIndex].name.c_str());
   b4b44:	f005 ffca 	bl	baadc <_Z16_fetch_usbserialv>
	return *(this->_M_impl._M_start + __n);
   b4b48:	6832      	ldr	r2, [r6, #0]
   b4b4a:	682b      	ldr	r3, [r5, #0]
   b4b4c:	2128      	movs	r1, #40	; 0x28
   b4b4e:	fb01 3302 	mla	r3, r1, r2, r3
   b4b52:	491d      	ldr	r1, [pc, #116]	; (b4bc8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x29c>)
   b4b54:	68da      	ldr	r2, [r3, #12]
   b4b56:	f7ff fc59 	bl	b440c <_ZN5Print8printlnfEPKcz>
   b4b5a:	e764      	b.n	b4a26 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfa>
  else if(inputBuffer.indexOf("color:") == 0){
   b4b5c:	491b      	ldr	r1, [pc, #108]	; (b4bcc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a0>)
   b4b5e:	a80f      	add	r0, sp, #60	; 0x3c
   b4b60:	f005 fadb 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
   b4b64:	a90f      	add	r1, sp, #60	; 0x3c
   b4b66:	a803      	add	r0, sp, #12
   b4b68:	f005 fbd0 	bl	ba30c <_ZNK6String7indexOfERKS_>
   b4b6c:	4604      	mov	r4, r0
   b4b6e:	a80f      	add	r0, sp, #60	; 0x3c
   b4b70:	f005 fa88 	bl	ba084 <_ZN6StringD1Ev>
   b4b74:	2c00      	cmp	r4, #0
   b4b76:	f47f af56 	bne.w	b4a26 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfa>
    if(cityIndex == -1){
   b4b7a:	4f0f      	ldr	r7, [pc, #60]	; (b4bb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x28c>)
   b4b7c:	683b      	ldr	r3, [r7, #0]
   b4b7e:	3301      	adds	r3, #1
   b4b80:	d12a      	bne.n	b4bd8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2ac>
      txCharacteristic.setValue("city not set");
   b4b82:	4913      	ldr	r1, [pc, #76]	; (b4bd0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a4>)
   b4b84:	4622      	mov	r2, r4
   b4b86:	e797      	b.n	b4ab8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18c>
   b4b88:	2003e6ac 	.word	0x2003e6ac
   b4b8c:	000be06c 	.word	0x000be06c
   b4b90:	000be3ca 	.word	0x000be3ca
   b4b94:	000be06f 	.word	0x000be06f
   b4b98:	000be075 	.word	0x000be075
   b4b9c:	20035310 	.word	0x20035310
   b4ba0:	2003e474 	.word	0x2003e474
   b4ba4:	000be077 	.word	0x000be077
   b4ba8:	2003e718 	.word	0x2003e718
   b4bac:	000be08e 	.word	0x000be08e
   b4bb0:	200354c0 	.word	0x200354c0
   b4bb4:	cccccccd 	.word	0xcccccccd
   b4bb8:	20035118 	.word	0x20035118
   b4bbc:	000be094 	.word	0x000be094
   b4bc0:	2003e69c 	.word	0x2003e69c
   b4bc4:	20035368 	.word	0x20035368
   b4bc8:	000be0a8 	.word	0x000be0a8
   b4bcc:	000be0b1 	.word	0x000be0b1
   b4bd0:	000be0b8 	.word	0x000be0b8
   b4bd4:	684bda13 	.word	0x684bda13
    inputBuffer = inputBuffer.substring(6);
   b4bd8:	2206      	movs	r2, #6
   b4bda:	a903      	add	r1, sp, #12
   b4bdc:	a80f      	add	r0, sp, #60	; 0x3c
   b4bde:	f005 fbb9 	bl	ba354 <_ZNK6String9substringEj>
   b4be2:	a90f      	add	r1, sp, #60	; 0x3c
   b4be4:	a803      	add	r0, sp, #12
   b4be6:	f005 fad8 	bl	ba19a <_ZN6StringaSEOS_>
   b4bea:	a80f      	add	r0, sp, #60	; 0x3c
   b4bec:	f005 fa4a 	bl	ba084 <_ZN6StringD1Ev>
    nameBuffer = inputBuffer;
   b4bf0:	a903      	add	r1, sp, #12
   b4bf2:	a807      	add	r0, sp, #28
   b4bf4:	f005 fac2 	bl	ba17c <_ZN6StringaSERKS_>
   b4bf8:	f8df 82c8 	ldr.w	r8, [pc, #712]	; b4ec4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x598>
    if(bleCount < cities[cityIndex].railways.size()){
   b4bfc:	4ea1      	ldr	r6, [pc, #644]	; (b4e84 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x558>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4bfe:	f8df a2c8 	ldr.w	sl, [pc, #712]	; b4ec8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x59c>
    Serial.println(inputBuffer);
   b4c02:	f005 ff6b 	bl	baadc <_Z16_fetch_usbserialv>
   b4c06:	9903      	ldr	r1, [sp, #12]
   b4c08:	f005 f9dd 	bl	b9fc6 <_ZN5Print7printlnEPKc>
    if(bleCount < cities[cityIndex].railways.size()){
   b4c0c:	6839      	ldr	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
   b4c0e:	f8d8 0000 	ldr.w	r0, [r8]
   b4c12:	2228      	movs	r2, #40	; 0x28
   b4c14:	434a      	muls	r2, r1
   b4c16:	1883      	adds	r3, r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c18:	5882      	ldr	r2, [r0, r2]
   b4c1a:	685b      	ldr	r3, [r3, #4]
   b4c1c:	1a9b      	subs	r3, r3, r2
   b4c1e:	109b      	asrs	r3, r3, #2
   b4c20:	6832      	ldr	r2, [r6, #0]
   b4c22:	fb0a f303 	mul.w	r3, sl, r3
   b4c26:	429a      	cmp	r2, r3
   b4c28:	f080 80b9 	bcs.w	b4d9e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x472>
      if(cityIndex == 0 && (inputBuffer == "green1" || inputBuffer == "green2")){
   b4c2c:	b9b1      	cbnz	r1, b4c5c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x330>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4c2e:	4996      	ldr	r1, [pc, #600]	; (b4e88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x55c>)
   b4c30:	a803      	add	r0, sp, #12
   b4c32:	f005 fb4a 	bl	ba2ca <_ZNK6String6equalsEPKc>
   b4c36:	2800      	cmp	r0, #0
   b4c38:	d032      	beq.n	b4ca0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x374>
   b4c3a:	4b94      	ldr	r3, [pc, #592]	; (b4e8c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x560>)
        nameBuffer = String(greenLineCTA.name.c_str());
   b4c3c:	a80f      	add	r0, sp, #60	; 0x3c
   b4c3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b4c40:	f005 fa6b 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
   b4c44:	a90f      	add	r1, sp, #60	; 0x3c
   b4c46:	a807      	add	r0, sp, #28
   b4c48:	f005 faa7 	bl	ba19a <_ZN6StringaSEOS_>
   b4c4c:	a80f      	add	r0, sp, #60	; 0x3c
   b4c4e:	f005 fa19 	bl	ba084 <_ZN6StringD1Ev>
        Serial.println("green fix");
   b4c52:	f005 ff43 	bl	baadc <_Z16_fetch_usbserialv>
   b4c56:	498e      	ldr	r1, [pc, #568]	; (b4e90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x564>)
   b4c58:	f005 f9b5 	bl	b9fc6 <_ZN5Print7printlnEPKc>
   b4c5c:	f04f 0b00 	mov.w	fp, #0
	return *(this->_M_impl._M_start + __n);
   b4c60:	f04f 0928 	mov.w	r9, #40	; 0x28
      for(int i = 0; i < cities[cityIndex].railways.size(); i++){
   b4c64:	683d      	ldr	r5, [r7, #0]
   b4c66:	f8d8 0000 	ldr.w	r0, [r8]
   b4c6a:	fb09 f105 	mul.w	r1, r9, r5
   b4c6e:	1842      	adds	r2, r0, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c70:	5841      	ldr	r1, [r0, r1]
   b4c72:	6852      	ldr	r2, [r2, #4]
   b4c74:	1a52      	subs	r2, r2, r1
   b4c76:	1092      	asrs	r2, r2, #2
   b4c78:	fb0a f202 	mul.w	r2, sl, r2
   b4c7c:	455a      	cmp	r2, fp
   b4c7e:	d93b      	bls.n	b4cf8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3cc>
        if((cityIndex != 0 || nameBuffer != String(purpleLineCTA.name.c_str())) && String(cities[cityIndex].railways[i].name.c_str()) == nameBuffer){
   b4c80:	b9ad      	cbnz	r5, b4cae <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x382>
   b4c82:	4b84      	ldr	r3, [pc, #528]	; (b4e94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x568>)
   b4c84:	a80b      	add	r0, sp, #44	; 0x2c
   b4c86:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b4c88:	f005 fa47 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
   b4c8c:	a90b      	add	r1, sp, #44	; 0x2c
   b4c8e:	a807      	add	r0, sp, #28
   b4c90:	f005 fb0e 	bl	ba2b0 <_ZNK6String6equalsERKS_>
   b4c94:	2800      	cmp	r0, #0
   b4c96:	d02d      	beq.n	b4cf4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3c8>
   b4c98:	a80b      	add	r0, sp, #44	; 0x2c
   b4c9a:	f005 f9f3 	bl	ba084 <_ZN6StringD1Ev>
   b4c9e:	e022      	b.n	b4ce6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3ba>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4ca0:	497d      	ldr	r1, [pc, #500]	; (b4e98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x56c>)
   b4ca2:	a803      	add	r0, sp, #12
   b4ca4:	f005 fb11 	bl	ba2ca <_ZNK6String6equalsEPKc>
      if(cityIndex == 0 && (inputBuffer == "green1" || inputBuffer == "green2")){
   b4ca8:	2800      	cmp	r0, #0
   b4caa:	d1c6      	bne.n	b4c3a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x30e>
   b4cac:	e7d6      	b.n	b4c5c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x330>
        if((cityIndex != 0 || nameBuffer != String(purpleLineCTA.name.c_str())) && String(cities[cityIndex].railways[i].name.c_str()) == nameBuffer){
   b4cae:	2200      	movs	r2, #0
	return *(this->_M_impl._M_start + __n);
   b4cb0:	6839      	ldr	r1, [r7, #0]
   b4cb2:	f8d8 0000 	ldr.w	r0, [r8]
   b4cb6:	9201      	str	r2, [sp, #4]
   b4cb8:	fb09 f101 	mul.w	r1, r9, r1
   b4cbc:	5841      	ldr	r1, [r0, r1]
   b4cbe:	206c      	movs	r0, #108	; 0x6c
   b4cc0:	fb00 110b 	mla	r1, r0, fp, r1
   b4cc4:	a80f      	add	r0, sp, #60	; 0x3c
   b4cc6:	6b09      	ldr	r1, [r1, #48]	; 0x30
   b4cc8:	f005 fa27 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b4ccc:	a907      	add	r1, sp, #28
   b4cce:	a80f      	add	r0, sp, #60	; 0x3c
   b4cd0:	f005 faee 	bl	ba2b0 <_ZNK6String6equalsERKS_>
   b4cd4:	1e05      	subs	r5, r0, #0
   b4cd6:	a80f      	add	r0, sp, #60	; 0x3c
   b4cd8:	bf18      	it	ne
   b4cda:	2501      	movne	r5, #1
   b4cdc:	f005 f9d2 	bl	ba084 <_ZN6StringD1Ev>
   b4ce0:	9a01      	ldr	r2, [sp, #4]
   b4ce2:	2a00      	cmp	r2, #0
   b4ce4:	d1d8      	bne.n	b4c98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x36c>
   b4ce6:	b115      	cbz	r5, b4cee <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3c2>
          railwayIndex = i;
   b4ce8:	4b6c      	ldr	r3, [pc, #432]	; (b4e9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x570>)
   b4cea:	f8c3 b000 	str.w	fp, [r3]
      for(int i = 0; i < cities[cityIndex].railways.size(); i++){
   b4cee:	f10b 0b01 	add.w	fp, fp, #1
   b4cf2:	e7b7      	b.n	b4c64 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x338>
        if((cityIndex != 0 || nameBuffer != String(purpleLineCTA.name.c_str())) && String(cities[cityIndex].railways[i].name.c_str()) == nameBuffer){
   b4cf4:	2201      	movs	r2, #1
   b4cf6:	e7db      	b.n	b4cb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x384>
      if(railwayIndex == -1){
   b4cf8:	f8df b1a0 	ldr.w	fp, [pc, #416]	; b4e9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x570>
   b4cfc:	f8db 3000 	ldr.w	r3, [fp]
   b4d00:	3301      	adds	r3, #1
   b4d02:	d075      	beq.n	b4df0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4c4>
   b4d04:	f8df 91c4 	ldr.w	r9, [pc, #452]	; b4ecc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a0>
        if(cities[cityIndex].railways[railwayIndex].outputs[i].size() == 0 || (cityIndex == 0 && cities[cityIndex].railways[railwayIndex].name == purpleLineCTA.name)){
   b4d08:	6839      	ldr	r1, [r7, #0]
   b4d0a:	f8d8 2000 	ldr.w	r2, [r8]
   b4d0e:	f8db 3000 	ldr.w	r3, [fp]
   b4d12:	2028      	movs	r0, #40	; 0x28
   b4d14:	4348      	muls	r0, r1
   b4d16:	5810      	ldr	r0, [r2, r0]
   b4d18:	226c      	movs	r2, #108	; 0x6c
   b4d1a:	fb02 0003 	mla	r0, r2, r3, r0
   b4d1e:	220c      	movs	r2, #12
   b4d20:	6a45      	ldr	r5, [r0, #36]	; 0x24
   b4d22:	4362      	muls	r2, r4
   b4d24:	eb05 0c02 	add.w	ip, r5, r2
   b4d28:	58aa      	ldr	r2, [r5, r2]
   b4d2a:	f8dc c004 	ldr.w	ip, [ip, #4]
   b4d2e:	4594      	cmp	ip, r2
   b4d30:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4d34:	d007      	beq.n	b4d46 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x41a>
   b4d36:	2900      	cmp	r1, #0
   b4d38:	d15f      	bne.n	b4dfa <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4ce>
   b4d3a:	4959      	ldr	r1, [pc, #356]	; (b4ea0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x574>)
   b4d3c:	3030      	adds	r0, #48	; 0x30
   b4d3e:	f7ff fde3 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b4d42:	2800      	cmp	r0, #0
   b4d44:	d059      	beq.n	b4dfa <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4ce>
          sequenceArr[2 * railwayIndex + i] = 0;
   b4d46:	f8d9 2000 	ldr.w	r2, [r9]
   b4d4a:	4425      	add	r5, r4
   b4d4c:	2100      	movs	r1, #0
   b4d4e:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
      for(int i = 0; i < 2; i++){
   b4d52:	2c01      	cmp	r4, #1
   b4d54:	d14f      	bne.n	b4df6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4ca>
   b4d56:	4c53      	ldr	r4, [pc, #332]	; (b4ea4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x578>)
      Wire.beginTransmission(addressArr[bleCount]);
   b4d58:	f006 f80e 	bl	bad78 <_Z19__fetch_global_Wirev>
   b4d5c:	6832      	ldr	r2, [r6, #0]
   b4d5e:	6823      	ldr	r3, [r4, #0]
   b4d60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b4d64:	f004 ffa2 	bl	b9cac <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('4');
   b4d68:	f006 f806 	bl	bad78 <_Z19__fetch_global_Wirev>
   b4d6c:	2134      	movs	r1, #52	; 0x34
   b4d6e:	f7ff fa57 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4d72:	f006 f801 	bl	bad78 <_Z19__fetch_global_Wirev>
   b4d76:	f004 ffa0 	bl	b9cba <_ZN7TwoWire15endTransmissionEv>
      Wire.beginTransmission(addressArr[bleCount + 1]);
   b4d7a:	f005 fffd 	bl	bad78 <_Z19__fetch_global_Wirev>
   b4d7e:	6833      	ldr	r3, [r6, #0]
   b4d80:	6822      	ldr	r2, [r4, #0]
   b4d82:	3301      	adds	r3, #1
   b4d84:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   b4d88:	f004 ff90 	bl	b9cac <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('3');
   b4d8c:	f005 fff4 	bl	bad78 <_Z19__fetch_global_Wirev>
   b4d90:	2133      	movs	r1, #51	; 0x33
   b4d92:	f7ff fa45 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4d96:	f005 ffef 	bl	bad78 <_Z19__fetch_global_Wirev>
   b4d9a:	f004 ff8e 	bl	b9cba <_ZN7TwoWire15endTransmissionEv>
   b4d9e:	683a      	ldr	r2, [r7, #0]
   b4da0:	f8d8 1000 	ldr.w	r1, [r8]
   b4da4:	2328      	movs	r3, #40	; 0x28
   b4da6:	435a      	muls	r2, r3
   b4da8:	188b      	adds	r3, r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4daa:	588a      	ldr	r2, [r1, r2]
   b4dac:	685b      	ldr	r3, [r3, #4]
   b4dae:	1a9b      	subs	r3, r3, r2
   b4db0:	109b      	asrs	r3, r3, #2
    if(bleCount == cities[cityIndex].railways.size() - 1){
   b4db2:	6832      	ldr	r2, [r6, #0]
   b4db4:	fb0a f303 	mul.w	r3, sl, r3
   b4db8:	3b01      	subs	r3, #1
   b4dba:	4293      	cmp	r3, r2
   b4dbc:	d114      	bne.n	b4de8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4bc>
      Serial.println("BLE finished");
   b4dbe:	f005 fe8d 	bl	baadc <_Z16_fetch_usbserialv>
   b4dc2:	4939      	ldr	r1, [pc, #228]	; (b4ea8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x57c>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4dc4:	4c39      	ldr	r4, [pc, #228]	; (b4eac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x580>)
   b4dc6:	f005 f8fe 	bl	b9fc6 <_ZN5Print7printlnEPKc>
      userInput = true;
   b4dca:	4b39      	ldr	r3, [pc, #228]	; (b4eb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x584>)
        network_on(*this, 0, 0, NULL);
   b4dcc:	6860      	ldr	r0, [r4, #4]
   b4dce:	2201      	movs	r2, #1
   b4dd0:	701a      	strb	r2, [r3, #0]
   b4dd2:	2300      	movs	r3, #0
   b4dd4:	461a      	mov	r2, r3
   b4dd6:	4619      	mov	r1, r3
   b4dd8:	f003 fc5e 	bl	b8698 <network_on>
        network_connect(*this, flags, 0, NULL);
   b4ddc:	2300      	movs	r3, #0
   b4dde:	6860      	ldr	r0, [r4, #4]
   b4de0:	461a      	mov	r2, r3
   b4de2:	4619      	mov	r1, r3
   b4de4:	f003 fc38 	bl	b8658 <network_connect>
    bleCount++;
   b4de8:	6833      	ldr	r3, [r6, #0]
   b4dea:	3301      	adds	r3, #1
   b4dec:	6033      	str	r3, [r6, #0]
   b4dee:	e61a      	b.n	b4a26 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfa>
        txCharacteristic.setValue("incorrect railway color");
   b4df0:	4930      	ldr	r1, [pc, #192]	; (b4eb4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x588>)
   b4df2:	2200      	movs	r2, #0
   b4df4:	e660      	b.n	b4ab8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18c>
   b4df6:	2401      	movs	r4, #1
   b4df8:	e786      	b.n	b4d08 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3dc>
          sequenceArr[2 * railwayIndex + i] = addressArr[bleCount];
   b4dfa:	4b2a      	ldr	r3, [pc, #168]	; (b4ea4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x578>)
	return *(this->_M_impl._M_start + __n);
   b4dfc:	6831      	ldr	r1, [r6, #0]
   b4dfe:	681a      	ldr	r2, [r3, #0]
   b4e00:	4425      	add	r5, r4
   b4e02:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   b4e06:	f8d9 2000 	ldr.w	r2, [r9]
   b4e0a:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
          if(cityIndex == 0){
   b4e0e:	683a      	ldr	r2, [r7, #0]
   b4e10:	2a00      	cmp	r2, #0
   b4e12:	d19e      	bne.n	b4d52 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x426>
            if(inputBuffer == String(brownLineCTA.name.c_str())){
   b4e14:	4b28      	ldr	r3, [pc, #160]	; (b4eb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x58c>)
   b4e16:	a80f      	add	r0, sp, #60	; 0x3c
   b4e18:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b4e1a:	f005 f97e 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
   b4e1e:	a90f      	add	r1, sp, #60	; 0x3c
   b4e20:	a803      	add	r0, sp, #12
   b4e22:	f005 fa45 	bl	ba2b0 <_ZNK6String6equalsERKS_>
   b4e26:	4605      	mov	r5, r0
   b4e28:	a80f      	add	r0, sp, #60	; 0x3c
   b4e2a:	f005 f92b 	bl	ba084 <_ZN6StringD1Ev>
   b4e2e:	b155      	cbz	r5, b4e46 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x51a>
            brownLineCTAAdr = sequenceArr[2 * railwayIndex + i];
   b4e30:	f8db 2000 	ldr.w	r2, [fp]
   b4e34:	f8d9 1000 	ldr.w	r1, [r9]
   b4e38:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b4e3c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   b4e40:	4a1e      	ldr	r2, [pc, #120]	; (b4ebc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x590>)
              greenLineCTAAdr[0] = sequenceArr[2 * railwayIndex];
   b4e42:	6011      	str	r1, [r2, #0]
   b4e44:	e785      	b.n	b4d52 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x426>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4e46:	4910      	ldr	r1, [pc, #64]	; (b4e88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x55c>)
   b4e48:	a803      	add	r0, sp, #12
   b4e4a:	f005 fa3e 	bl	ba2ca <_ZNK6String6equalsEPKc>
            }else if(inputBuffer == "green1"){
   b4e4e:	b138      	cbz	r0, b4e60 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x534>
              greenLineCTAAdr[0] = sequenceArr[2 * railwayIndex];
   b4e50:	f8d9 2000 	ldr.w	r2, [r9]
   b4e54:	f8db 1000 	ldr.w	r1, [fp]
   b4e58:	f852 1031 	ldr.w	r1, [r2, r1, lsl #3]
   b4e5c:	4a18      	ldr	r2, [pc, #96]	; (b4ec0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x594>)
   b4e5e:	e7f0      	b.n	b4e42 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x516>
   b4e60:	490d      	ldr	r1, [pc, #52]	; (b4e98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x56c>)
   b4e62:	a803      	add	r0, sp, #12
   b4e64:	f005 fa31 	bl	ba2ca <_ZNK6String6equalsEPKc>
            }else if(inputBuffer == "green2"){
   b4e68:	2800      	cmp	r0, #0
   b4e6a:	f43f af72 	beq.w	b4d52 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x426>
              greenLineCTAAdr[1] = sequenceArr[2 * railwayIndex + 1];
   b4e6e:	f8db 2000 	ldr.w	r2, [fp]
   b4e72:	f8d9 1000 	ldr.w	r1, [r9]
   b4e76:	0052      	lsls	r2, r2, #1
   b4e78:	3201      	adds	r2, #1
   b4e7a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   b4e7e:	4a10      	ldr	r2, [pc, #64]	; (b4ec0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x594>)
   b4e80:	6051      	str	r1, [r2, #4]
   b4e82:	e766      	b.n	b4d52 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x426>
   b4e84:	20035374 	.word	0x20035374
   b4e88:	000be0c5 	.word	0x000be0c5
   b4e8c:	200354d8 	.word	0x200354d8
   b4e90:	000be0cc 	.word	0x000be0cc
   b4e94:	2003e4f0 	.word	0x2003e4f0
   b4e98:	000be0d6 	.word	0x000be0d6
   b4e9c:	2003512c 	.word	0x2003512c
   b4ea0:	2003e520 	.word	0x2003e520
   b4ea4:	20035368 	.word	0x20035368
   b4ea8:	000be0f5 	.word	0x000be0f5
   b4eac:	2003e718 	.word	0x2003e718
   b4eb0:	2003e6b4 	.word	0x2003e6b4
   b4eb4:	000be0dd 	.word	0x000be0dd
   b4eb8:	20035450 	.word	0x20035450
   b4ebc:	200354bc 	.word	0x200354bc
   b4ec0:	20035544 	.word	0x20035544
   b4ec4:	200354c0 	.word	0x200354c0
   b4ec8:	684bda13 	.word	0x684bda13
   b4ecc:	2003e69c 	.word	0x2003e69c

000b4ed0 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4ed0:	2900      	cmp	r1, #0
      _M_create_storage(size_t __n)
   b4ed2:	b538      	push	{r3, r4, r5, lr}
   b4ed4:	4604      	mov	r4, r0
      _M_allocate(size_t __n)
   b4ed6:	ea4f 0581 	mov.w	r5, r1, lsl #2
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4eda:	d00c      	beq.n	b4ef6 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x26>
	if (__n > this->_M_max_size())
   b4edc:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   b4ee0:	d301      	bcc.n	b4ee6 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x16>
	  std::__throw_bad_alloc();
   b4ee2:	f005 ffaf 	bl	bae44 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4ee6:	4628      	mov	r0, r5
   b4ee8:	f7ff f8d5 	bl	b4096 <_Znwj>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4eec:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4ef0:	4428      	add	r0, r5
   b4ef2:	60a0      	str	r0, [r4, #8]
      }
   b4ef4:	bd38      	pop	{r3, r4, r5, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4ef6:	4608      	mov	r0, r1
   b4ef8:	e7f8      	b.n	b4eec <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x1c>

000b4efa <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b4efa:	b538      	push	{r3, r4, r5, lr}
   b4efc:	4604      	mov	r4, r0
   b4efe:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b4f00:	42ac      	cmp	r4, r5
   b4f02:	d004      	beq.n	b4f0e <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x14>
      }
   b4f04:	4620      	mov	r0, r4
   b4f06:	f7ff fc1d 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4f0a:	340c      	adds	r4, #12
   b4f0c:	e7f8      	b.n	b4f00 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x6>
	    std::_Destroy(std::__addressof(*__first));
	}
   b4f0e:	bd38      	pop	{r3, r4, r5, pc}

000b4f10 <_ZN7RailwayD1Ev>:
#include "Checkpoint.cpp"
#include <string>

//container for all data for each rail line
class Railway{
   b4f10:	b510      	push	{r4, lr}
   b4f12:	4604      	mov	r4, r0
   b4f14:	3048      	adds	r0, #72	; 0x48
   b4f16:	f7ff fc36 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b4f1a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b4f1e:	f005 ffc9 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
   b4f22:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b4f26:	f7ff ffe8 	bl	b4efa <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	_M_deallocate(_M_impl._M_start,
   b4f2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b4f2c:	b118      	cbz	r0, b4f36 <_ZN7RailwayD1Ev+0x26>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4f2e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	::operator delete(__p
   b4f30:	1a09      	subs	r1, r1, r0
   b4f32:	f7ff f8b6 	bl	b40a2 <_ZdlPvj>
      }
   b4f36:	f104 0018 	add.w	r0, r4, #24
   b4f3a:	f7ff fc03 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4f3e:	f104 000c 	add.w	r0, r4, #12
   b4f42:	f7ff fbf5 	bl	b4730 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b4f46:	4620      	mov	r0, r4
   b4f48:	f7ff fbe8 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
   b4f4c:	4620      	mov	r0, r4
   b4f4e:	bd10      	pop	{r4, pc}

000b4f50 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b4f50:	b538      	push	{r3, r4, r5, lr}
   b4f52:	4604      	mov	r4, r0
   b4f54:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b4f56:	42ac      	cmp	r4, r5
   b4f58:	d004      	beq.n	b4f64 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_+0x14>
      __pointer->~_Tp();
   b4f5a:	4620      	mov	r0, r4
   b4f5c:	f7ff ffd8 	bl	b4f10 <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b4f60:	346c      	adds	r4, #108	; 0x6c
   b4f62:	e7f8      	b.n	b4f56 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_+0x6>
	}
   b4f64:	bd38      	pop	{r3, r4, r5, pc}

000b4f66 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b4f66:	b510      	push	{r4, lr}
   b4f68:	4604      	mov	r4, r0
	__destroy(__first, __last);
   b4f6a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b4f6e:	f7ff ffef 	bl	b4f50 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
   b4f72:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4f74:	b118      	cbz	r0, b4f7e <_ZNSt6vectorI7RailwaySaIS0_EED1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4f76:	68a1      	ldr	r1, [r4, #8]
   b4f78:	1a09      	subs	r1, r1, r0
   b4f7a:	f7ff f892 	bl	b40a2 <_ZdlPvj>
      }
   b4f7e:	4620      	mov	r0, r4
   b4f80:	bd10      	pop	{r4, pc}

000b4f82 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b4f82:	b538      	push	{r3, r4, r5, lr}
   b4f84:	4604      	mov	r4, r0
   b4f86:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b4f88:	42ac      	cmp	r4, r5
   b4f8a:	d008      	beq.n	b4f9e <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_+0x1c>
   b4f8c:	f104 000c 	add.w	r0, r4, #12
   b4f90:	f005 ff90 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
#include "Railway.cpp"

class City{
   b4f94:	4620      	mov	r0, r4
   b4f96:	f7ff ffe6 	bl	b4f66 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b4f9a:	3428      	adds	r4, #40	; 0x28
   b4f9c:	e7f4      	b.n	b4f88 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_+0x6>
	}
   b4f9e:	bd38      	pop	{r3, r4, r5, pc}

000b4fa0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b4fa0:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b4fa2:	b510      	push	{r4, lr}
   b4fa4:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b4fa6:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b4faa:	d005      	beq.n	b4fb8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b4fac:	4601      	mov	r1, r0
   b4fae:	4622      	mov	r2, r4
   b4fb0:	4618      	mov	r0, r3
   b4fb2:	f006 ff3d 	bl	bbe30 <memmove>
   b4fb6:	4603      	mov	r3, r0
	}
   b4fb8:	1918      	adds	r0, r3, r4
   b4fba:	bd10      	pop	{r4, pc}

000b4fbc <_ZNSt6vectorIiSaIiEEC1ERKS1_>:
      vector(const vector& __x)
   b4fbc:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4fbe:	e9d1 3600 	ldrd	r3, r6, [r1]
   b4fc2:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4fc4:	2300      	movs	r3, #0
      vector(const vector& __x)
   b4fc6:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4fc8:	e9c0 3300 	strd	r3, r3, [r0]
   b4fcc:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4fce:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
   b4fd0:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4fd2:	f7ff f8e5 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4fd6:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4fda:	4406      	add	r6, r0
   b4fdc:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4fde:	4602      	mov	r2, r0
			      _Category>::__copy_m(__first, __last, __result);
   b4fe0:	e9d5 0100 	ldrd	r0, r1, [r5]
   b4fe4:	f7ff ffdc 	bl	b4fa0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
   b4fe8:	6060      	str	r0, [r4, #4]
      }
   b4fea:	4620      	mov	r0, r4
   b4fec:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>:
      vector(initializer_list<value_type> __l,
   b4ff0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b4ff2:	ab04      	add	r3, sp, #16
   b4ff4:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4ff8:	2300      	movs	r3, #0
   b4ffa:	e9c0 3300 	strd	r3, r3, [r0]
   b4ffe:	6083      	str	r3, [r0, #8]
      vector(initializer_list<value_type> __l,
   b5000:	4604      	mov	r4, r0
   b5002:	4613      	mov	r3, r2
   b5004:	460e      	mov	r6, r1
   b5006:	0095      	lsls	r5, r2, #2
   b5008:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   b500c:	f342 001d 	sbfx	r0, r2, #0, #30
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b5010:	4a0a      	ldr	r2, [pc, #40]	; (b503c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x4c>)
   b5012:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   b5016:	d202      	bcs.n	b501e <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x2e>
	  __throw_length_error(
   b5018:	4809      	ldr	r0, [pc, #36]	; (b5040 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x50>)
   b501a:	f005 ff19 	bl	bae50 <_ZSt20__throw_length_errorPKc>
   b501e:	9101      	str	r1, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b5020:	f7ff f8be 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5024:	4405      	add	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b5026:	4602      	mov	r2, r0
   b5028:	6020      	str	r0, [r4, #0]
   b502a:	9901      	ldr	r1, [sp, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b502c:	60a5      	str	r5, [r4, #8]
   b502e:	4630      	mov	r0, r6
   b5030:	f7ff ffb6 	bl	b4fa0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
   b5034:	6060      	str	r0, [r4, #4]
      }
   b5036:	b004      	add	sp, #16
   b5038:	bd70      	pop	{r4, r5, r6, pc}
   b503a:	bf00      	nop
   b503c:	7ffffffc 	.word	0x7ffffffc
   b5040:	000be03b 	.word	0x000be03b

000b5044 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>:
      if (&__x != this)
   b5044:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b5046:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5048:	4604      	mov	r4, r0
   b504a:	460d      	mov	r5, r1
      if (&__x != this)
   b504c:	d01d      	beq.n	b508a <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x46>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b504e:	e9d1 7100 	ldrd	r7, r1, [r1]
			 - this->_M_impl._M_start); }
   b5052:	6802      	ldr	r2, [r0, #0]
   b5054:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5056:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b5058:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b505a:	429e      	cmp	r6, r3
   b505c:	d917      	bls.n	b508e <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x4a>
	  pointer __result = this->_M_allocate(__n);
   b505e:	10b0      	asrs	r0, r6, #2
   b5060:	9101      	str	r1, [sp, #4]
   b5062:	f7ff f89d 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
   b5066:	9901      	ldr	r1, [sp, #4]
   b5068:	4602      	mov	r2, r0
   b506a:	4605      	mov	r5, r0
   b506c:	4638      	mov	r0, r7
   b506e:	f7ff ff97 	bl	b4fa0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b5072:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b5074:	b118      	cbz	r0, b507e <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x3a>
			    - this->_M_impl._M_start);
   b5076:	68a1      	ldr	r1, [r4, #8]
   b5078:	1a09      	subs	r1, r1, r0
   b507a:	f7ff f812 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b507e:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b5080:	4435      	add	r5, r6
   b5082:	60a5      	str	r5, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b5084:	6823      	ldr	r3, [r4, #0]
   b5086:	4433      	add	r3, r6
   b5088:	6063      	str	r3, [r4, #4]
    }
   b508a:	b003      	add	sp, #12
   b508c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b508e:	6843      	ldr	r3, [r0, #4]
   b5090:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b5092:	429e      	cmp	r6, r3
   b5094:	d803      	bhi.n	b509e <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x5a>
   b5096:	4638      	mov	r0, r7
   b5098:	f7ff ff82 	bl	b4fa0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
   b509c:	e7f2      	b.n	b5084 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x40>
   b509e:	18f9      	adds	r1, r7, r3
   b50a0:	4638      	mov	r0, r7
   b50a2:	f7ff ff7d 	bl	b4fa0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
   b50a6:	e9d4 0200 	ldrd	r0, r2, [r4]
   b50aa:	e9d5 3100 	ldrd	r3, r1, [r5]
   b50ae:	1a10      	subs	r0, r2, r0
   b50b0:	4418      	add	r0, r3
   b50b2:	e7f1      	b.n	b5098 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x54>

000b50b4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b50b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b50b8:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b50ba:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b50bc:	480b      	ldr	r0, [pc, #44]	; (b50ec <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x38>)
   b50be:	10a4      	asrs	r4, r4, #2
   b50c0:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b50c2:	4616      	mov	r6, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b50c4:	4627      	mov	r7, r4
   b50c6:	4690      	mov	r8, r2
   b50c8:	2f00      	cmp	r7, #0
   b50ca:	dd08      	ble.n	b50de <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x2a>
	      *__result = *__first;
   b50cc:	4629      	mov	r1, r5
   b50ce:	4640      	mov	r0, r8
   b50d0:	f7ff ffb8 	bl	b5044 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	      ++__first;
   b50d4:	350c      	adds	r5, #12
	      ++__result;
   b50d6:	f108 080c 	add.w	r8, r8, #12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b50da:	3f01      	subs	r7, #1
   b50dc:	e7f4      	b.n	b50c8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x14>
	  return __result;
   b50de:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b50e2:	200c      	movs	r0, #12
   b50e4:	fb00 6004 	mla	r0, r0, r4, r6
   b50e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b50ec:	aaaaaaab 	.word	0xaaaaaaab

000b50f0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>:
    std::vector<std::string> colors;
    int tripleIndex = -1;
    int loopIndex = -1;
    int lowerLoopBound, upperLoopBound, lowerGreenBound, upperGreenBound;

    Railway(std::vector<Checkpoint> checkpointInput, std::vector<int> scalerInput, std::vector<int> outputSize, std::string nameInput, std::vector<std::string> colorInput, std::vector<int> boundInput = {0, 0, 0, 0}){
   b50f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b50f4:	2500      	movs	r5, #0
   b50f6:	4699      	mov	r9, r3
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b50f8:	f100 0338 	add.w	r3, r0, #56	; 0x38
      { _M_string_length = __length; }
   b50fc:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   b5100:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5104:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
   b5108:	4604      	mov	r4, r0
   b510a:	e9c0 5500 	strd	r5, r5, [r0]
   b510e:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b5112:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b5116:	e9c0 5506 	strd	r5, r5, [r0, #24]
   b511a:	e9c0 5508 	strd	r5, r5, [r0, #32]
   b511e:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
   b5122:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
   b5126:	b099      	sub	sp, #100	; 0x64
      { __c1 = __c2; }
   b5128:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
   b512c:	6505      	str	r5, [r0, #80]	; 0x50
   b512e:	4692      	mov	sl, r2
   b5130:	f100 0b18 	add.w	fp, r0, #24
   b5134:	f100 0830 	add.w	r8, r0, #48	; 0x30
   b5138:	f100 0748 	add.w	r7, r0, #72	; 0x48
      checkpoints = checkpointInput;
   b513c:	f7ff f886 	bl	b424c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5140:	e9d4 2300 	ldrd	r2, r3, [r4]
   b5144:	1a9b      	subs	r3, r3, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b5146:	42ab      	cmp	r3, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5148:	ea4f 01e3 	mov.w	r1, r3, asr #3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b514c:	da02      	bge.n	b5154 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x64>
	  __throw_length_error(
   b514e:	485f      	ldr	r0, [pc, #380]	; (b52cc <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1dc>)
   b5150:	f005 fe7e 	bl	bae50 <_ZSt20__throw_length_errorPKc>
      { _M_create_storage(__n); }
   b5154:	a809      	add	r0, sp, #36	; 0x24
   b5156:	9101      	str	r1, [sp, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5158:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b515c:	950b      	str	r5, [sp, #44]	; 0x2c
      { _M_create_storage(__n); }
   b515e:	f7ff feb7 	bl	b4ed0 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
      if (__n <= 0)
   b5162:	9901      	ldr	r1, [sp, #4]
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
   b5164:	9809      	ldr	r0, [sp, #36]	; 0x24
   b5166:	b131      	cbz	r1, b5176 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x86>
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
   b5168:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	*__first = __tmp;
   b516c:	008a      	lsls	r2, r1, #2
   b516e:	4629      	mov	r1, r5
   b5170:	f006 fe78 	bl	bbe64 <memset>
   b5174:	4630      	mov	r0, r6
	  _M_finish = __x._M_finish;
   b5176:	e9d4 5203 	ldrd	r5, r2, [r4, #12]
	  _M_start = __x._M_start;
   b517a:	9909      	ldr	r1, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
   b517c:	6963      	ldr	r3, [r4, #20]
   b517e:	930e      	str	r3, [sp, #56]	; 0x38
	  _M_finish = __x._M_finish;
   b5180:	e9c4 1003 	strd	r1, r0, [r4, #12]
      }
   b5184:	ae0c      	add	r6, sp, #48	; 0x30
	  _M_end_of_storage = __x._M_end_of_storage;
   b5186:	990b      	ldr	r1, [sp, #44]	; 0x2c
   b5188:	6161      	str	r1, [r4, #20]
	  _M_finish = __x._M_finish;
   b518a:	e9cd 520c 	strd	r5, r2, [sp, #48]	; 0x30
      }
   b518e:	4630      	mov	r0, r6
	  _M_start = __x._M_start;
   b5190:	2500      	movs	r5, #0
	  _M_finish = __x._M_finish;
   b5192:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
   b5196:	950b      	str	r5, [sp, #44]	; 0x2c
      }
   b5198:	f7ff faca 	bl	b4730 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b519c:	a809      	add	r0, sp, #36	; 0x24
   b519e:	f7ff fac7 	bl	b4730 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
      distances = std::vector<float>(checkpoints.size(), 0);
      scalers = scalerInput;
   b51a2:	4651      	mov	r1, sl
   b51a4:	4658      	mov	r0, fp
   b51a6:	f7ff ff4d 	bl	b5044 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
      outputs = {std::vector<int>(outputSize[0], 0), std::vector<int>(outputSize[1], 0), std::vector<int>(outputSize[2], 0), std::vector<int>(outputSize[3], 0)};
   b51aa:	f8d9 1000 	ldr.w	r1, [r9]
   b51ae:	9506      	str	r5, [sp, #24]
   b51b0:	6809      	ldr	r1, [r1, #0]
   b51b2:	ab02      	add	r3, sp, #8
   b51b4:	aa06      	add	r2, sp, #24
   b51b6:	4630      	mov	r0, r6
   b51b8:	f7ff faf8 	bl	b47ac <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b51bc:	f8d9 1000 	ldr.w	r1, [r9]
   b51c0:	9507      	str	r5, [sp, #28]
   b51c2:	6849      	ldr	r1, [r1, #4]
   b51c4:	ab03      	add	r3, sp, #12
   b51c6:	aa07      	add	r2, sp, #28
   b51c8:	a80f      	add	r0, sp, #60	; 0x3c
   b51ca:	f7ff faef 	bl	b47ac <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b51ce:	f8d9 1000 	ldr.w	r1, [r9]
   b51d2:	9508      	str	r5, [sp, #32]
   b51d4:	6889      	ldr	r1, [r1, #8]
   b51d6:	ab04      	add	r3, sp, #16
   b51d8:	aa08      	add	r2, sp, #32
   b51da:	a812      	add	r0, sp, #72	; 0x48
   b51dc:	f7ff fae6 	bl	b47ac <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b51e0:	f8d9 1000 	ldr.w	r1, [r9]
   b51e4:	9509      	str	r5, [sp, #36]	; 0x24
   b51e6:	ab05      	add	r3, sp, #20
   b51e8:	aa09      	add	r2, sp, #36	; 0x24
   b51ea:	68c9      	ldr	r1, [r1, #12]
   b51ec:	a815      	add	r0, sp, #84	; 0x54
   b51ee:	f7ff fadd 	bl	b47ac <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
			 - this->_M_impl._M_start); }
   b51f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b51f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b51f6:	1a9b      	subs	r3, r3, r2
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
		    std::forward_iterator_tag)
      {
	const size_type __len = std::distance(__first, __last);

	if (__len > capacity())
   b51f8:	2b2f      	cmp	r3, #47	; 0x2f
   b51fa:	d83f      	bhi.n	b527c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x18c>
	  pointer __result = this->_M_allocate(__n);
   b51fc:	2004      	movs	r0, #4
   b51fe:	f7fe ff71 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
   b5202:	46b3      	mov	fp, r6
   b5204:	4605      	mov	r5, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b5206:	f100 0a30 	add.w	sl, r0, #48	; 0x30
	  _ForwardIterator __cur = __result;
   b520a:	4681      	mov	r9, r0
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b520c:	f1b9 0f00 	cmp.w	r9, #0
   b5210:	d003      	beq.n	b521a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x12a>
   b5212:	4659      	mov	r1, fp
   b5214:	4648      	mov	r0, r9
   b5216:	f7ff fed1 	bl	b4fbc <_ZNSt6vectorIiSaIiEEC1ERKS1_>
	      for (; __first != __last; ++__first, (void)++__cur)
   b521a:	f109 090c 	add.w	r9, r9, #12
   b521e:	45d1      	cmp	r9, sl
   b5220:	f10b 0b0c 	add.w	fp, fp, #12
   b5224:	d1f2      	bne.n	b520c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x11c>
	__destroy(__first, __last);
   b5226:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b522a:	f7ff fe66 	bl	b4efa <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	    _S_check_init_len(__len, _M_get_Tp_allocator());
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
	    _M_deallocate(this->_M_impl._M_start,
   b522e:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b5230:	b118      	cbz	r0, b523a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x14a>
			  this->_M_impl._M_end_of_storage
			  - this->_M_impl._M_start);
   b5232:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b5234:	1a09      	subs	r1, r1, r0
   b5236:	f7fe ff34 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b523a:	e9c4 5a09 	strd	r5, sl, [r4, #36]	; 0x24
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b523e:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
   b5242:	ad18      	add	r5, sp, #96	; 0x60
   b5244:	3d0c      	subs	r5, #12
      }
   b5246:	4628      	mov	r0, r5
   b5248:	f7ff fa7c 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b524c:	42b5      	cmp	r5, r6
   b524e:	d1f9      	bne.n	b5244 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x154>
	this->_M_assign(__str);
   b5250:	9922      	ldr	r1, [sp, #136]	; 0x88
   b5252:	4640      	mov	r0, r8
   b5254:	f005 fe4c 	bl	baef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
      name = nameInput;
      colors = colorInput;
   b5258:	4638      	mov	r0, r7
   b525a:	9923      	ldr	r1, [sp, #140]	; 0x8c
   b525c:	f7ff f848 	bl	b42f0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
	return *(this->_M_impl._M_start + __n);
   b5260:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b5262:	681b      	ldr	r3, [r3, #0]
      lowerLoopBound = boundInput[0];
   b5264:	681a      	ldr	r2, [r3, #0]
   b5266:	65e2      	str	r2, [r4, #92]	; 0x5c
      upperLoopBound = boundInput[1];
   b5268:	685a      	ldr	r2, [r3, #4]
   b526a:	6622      	str	r2, [r4, #96]	; 0x60
      lowerGreenBound = boundInput[2];
   b526c:	689a      	ldr	r2, [r3, #8]
      upperGreenBound = boundInput[3];
   b526e:	68db      	ldr	r3, [r3, #12]
      lowerGreenBound = boundInput[2];
   b5270:	6662      	str	r2, [r4, #100]	; 0x64
    }
   b5272:	4620      	mov	r0, r4
      upperGreenBound = boundInput[3];
   b5274:	66a3      	str	r3, [r4, #104]	; 0x68
    }
   b5276:	b019      	add	sp, #100	; 0x64
   b5278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b527c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   b527e:	1aad      	subs	r5, r5, r2
	  }
	else if (size() >= __len)
   b5280:	2d2f      	cmp	r5, #47	; 0x2f
   b5282:	d90b      	bls.n	b529c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ac>
			      _Category>::__copy_m(__first, __last, __result);
   b5284:	a918      	add	r1, sp, #96	; 0x60
   b5286:	4630      	mov	r0, r6
   b5288:	f7ff ff14 	bl	b50b4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b528c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b528e:	4288      	cmp	r0, r1
   b5290:	4605      	mov	r5, r0
   b5292:	d0d6      	beq.n	b5242 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
   b5294:	f7ff fe31 	bl	b4efa <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	    this->_M_impl._M_finish = __pos;
   b5298:	62a5      	str	r5, [r4, #40]	; 0x28
   b529a:	e7d2      	b.n	b5242 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b529c:	4435      	add	r5, r6
   b529e:	4629      	mov	r1, r5
   b52a0:	4630      	mov	r0, r6
   b52a2:	f7ff ff07 	bl	b50b4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b52a6:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
   b52aa:	ab18      	add	r3, sp, #96	; 0x60
   b52ac:	429d      	cmp	r5, r3
   b52ae:	d00a      	beq.n	b52c6 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1d6>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b52b0:	f1b9 0f00 	cmp.w	r9, #0
   b52b4:	d003      	beq.n	b52be <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ce>
   b52b6:	4629      	mov	r1, r5
   b52b8:	4648      	mov	r0, r9
   b52ba:	f7ff fe7f 	bl	b4fbc <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b52be:	350c      	adds	r5, #12
   b52c0:	f109 090c 	add.w	r9, r9, #12
   b52c4:	e7f1      	b.n	b52aa <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ba>
	    _ForwardIterator __mid = __first;
	    std::advance(__mid, size());
	    std::copy(__first, __mid, this->_M_impl._M_start);
	    const size_type __attribute__((__unused__)) __n = __len - size();
	    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	    this->_M_impl._M_finish =
   b52c6:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
   b52ca:	e7ba      	b.n	b5242 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
   b52cc:	000be03b 	.word	0x000be03b

000b52d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0>:
   b52d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b52d4:	ed2d 8b0e 	vpush	{d8-d14}
   b52d8:	2801      	cmp	r0, #1
   b52da:	4db8      	ldr	r5, [pc, #736]	; (b55bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2ec>)
   b52dc:	f5ad 7d33 	sub.w	sp, sp, #716	; 0x2cc
   b52e0:	f040 87e8 	bne.w	b62b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xfe4>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b52e4:	2400      	movs	r4, #0
    SleepResult() {}
   b52e6:	4bb6      	ldr	r3, [pc, #728]	; (b55c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f0>)
   b52e8:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   b52ea:	e9c5 4400 	strd	r4, r4, [r5]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b52ee:	2003      	movs	r0, #3
   b52f0:	f003 f986 	bl	b8600 <set_system_mode>
  public:
    float lat;
    float lon;

    Checkpoint(float la, float lo){
      lat = la;
   b52f4:	4bb3      	ldr	r3, [pc, #716]	; (b55c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f4>)
   b52f6:	9396      	str	r3, [sp, #600]	; 0x258
      lon = lo;
   b52f8:	4bb3      	ldr	r3, [pc, #716]	; (b55c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f8>)
   b52fa:	9397      	str	r3, [sp, #604]	; 0x25c
      lat = la;
   b52fc:	4bb3      	ldr	r3, [pc, #716]	; (b55cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2fc>)
   b52fe:	9398      	str	r3, [sp, #608]	; 0x260
      lon = lo;
   b5300:	4bb3      	ldr	r3, [pc, #716]	; (b55d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x300>)
   b5302:	9399      	str	r3, [sp, #612]	; 0x264
      lat = la;
   b5304:	4bb3      	ldr	r3, [pc, #716]	; (b55d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x304>)
   b5306:	939a      	str	r3, [sp, #616]	; 0x268
      lon = lo;
   b5308:	4bb3      	ldr	r3, [pc, #716]	; (b55d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x308>)
   b530a:	939b      	str	r3, [sp, #620]	; 0x26c
      lat = la;
   b530c:	4bb3      	ldr	r3, [pc, #716]	; (b55dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x30c>)
   b530e:	939c      	str	r3, [sp, #624]	; 0x270
      lon = lo;
   b5310:	4bb3      	ldr	r3, [pc, #716]	; (b55e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x310>)
   b5312:	939d      	str	r3, [sp, #628]	; 0x274
      lat = la;
   b5314:	4bb3      	ldr	r3, [pc, #716]	; (b55e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x314>)
   b5316:	939e      	str	r3, [sp, #632]	; 0x278
      lon = lo;
   b5318:	4bb3      	ldr	r3, [pc, #716]	; (b55e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x318>)
   b531a:	939f      	str	r3, [sp, #636]	; 0x27c
);
   b531c:	ab96      	add	r3, sp, #600	; 0x258
   b531e:	9370      	str	r3, [sp, #448]	; 0x1c0
   b5320:	2305      	movs	r3, #5
   b5322:	9371      	str	r3, [sp, #452]	; 0x1c4
   b5324:	f50d 78cc 	add.w	r8, sp, #408	; 0x198
   b5328:	aa70      	add	r2, sp, #448	; 0x1c0
   b532a:	4643      	mov	r3, r8
   b532c:	ca06      	ldmia	r2, {r1, r2}
   b532e:	a87e      	add	r0, sp, #504	; 0x1f8
   b5330:	f7ff fa5e 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5334:	4bad      	ldr	r3, [pc, #692]	; (b55ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x31c>)
      lat = la;
   b5336:	eddf 8aae 	vldr	s17, [pc, #696]	; b55f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x320>
      lon = lo;
   b533a:	ed9f 8aae 	vldr	s16, [pc, #696]	; b55f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x324>
      lat = la;
   b533e:	eddf 9aae 	vldr	s19, [pc, #696]	; b55f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x328>
      lon = lo;
   b5342:	ed9f 9aae 	vldr	s18, [pc, #696]	; b55fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x32c>
      lat = la;
   b5346:	eddf aaae 	vldr	s21, [pc, #696]	; b5600 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x330>
      lon = lo;
   b534a:	ed9f aaae 	vldr	s20, [pc, #696]	; b5604 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x334>
      lat = la;
   b534e:	eddf baae 	vldr	s23, [pc, #696]	; b5608 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x338>
      lon = lo;
   b5352:	ed9f baae 	vldr	s22, [pc, #696]	; b560c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x33c>
      lat = la;
   b5356:	eddf daae 	vldr	s27, [pc, #696]	; b5610 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x340>
      lon = lo;
   b535a:	ed9f daae 	vldr	s26, [pc, #696]	; b5614 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x344>
      lat = la;
   b535e:	eddf caae 	vldr	s25, [pc, #696]	; b5618 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x348>
      lon = lo;
   b5362:	ed9f caae 	vldr	s24, [pc, #696]	; b561c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x34c>
   b5366:	ed9f eaae 	vldr	s28, [pc, #696]	; b5620 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x350>
   b536a:	461f      	mov	r7, r3
   b536c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b536e:	f50d 7a09 	add.w	sl, sp, #548	; 0x224
   b5372:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
   b5376:	2204      	movs	r2, #4
   b5378:	ab6e      	add	r3, sp, #440	; 0x1b8
   b537a:	f8cd a1b8 	str.w	sl, [sp, #440]	; 0x1b8
   b537e:	926f      	str	r2, [sp, #444]	; 0x1bc
   b5380:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5384:	a87b      	add	r0, sp, #492	; 0x1ec
   b5386:	f7ff fe33 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b538a:	aa85      	add	r2, sp, #532	; 0x214
   b538c:	926c      	str	r2, [sp, #432]	; 0x1b0
   b538e:	2328      	movs	r3, #40	; 0x28
   b5390:	2204      	movs	r2, #4
   b5392:	e9cd 3486 	strd	r3, r4, [sp, #536]	; 0x218
   b5396:	926d      	str	r2, [sp, #436]	; 0x1b4
   b5398:	ab6c      	add	r3, sp, #432	; 0x1b0
   b539a:	ad8f      	add	r5, sp, #572	; 0x23c
   b539c:	e893 0006 	ldmia.w	r3, {r1, r2}
   b53a0:	a878      	add	r0, sp, #480	; 0x1e0
   b53a2:	f50d 7b22 	add.w	fp, sp, #648	; 0x288
   b53a6:	9485      	str	r4, [sp, #532]	; 0x214
   b53a8:	9488      	str	r4, [sp, #544]	; 0x220
   b53aa:	f7ff fe21 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b53ae:	4628      	mov	r0, r5
   b53b0:	499c      	ldr	r1, [pc, #624]	; (b5624 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x354>)
   b53b2:	f7fe fea9 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b53b6:	4658      	mov	r0, fp
   b53b8:	499b      	ldr	r1, [pc, #620]	; (b5628 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x358>)
   b53ba:	f7fe fea5 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b53be:	a8a8      	add	r0, sp, #672	; 0x2a0
   b53c0:	499a      	ldr	r1, [pc, #616]	; (b562c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x35c>)
   b53c2:	f7fe fea1 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b53c6:	2102      	movs	r1, #2
   b53c8:	f8cd b1a8 	str.w	fp, [sp, #424]	; 0x1a8
   b53cc:	916b      	str	r1, [sp, #428]	; 0x1ac
   b53ce:	aa6a      	add	r2, sp, #424	; 0x1a8
   b53d0:	f50d 7901 	add.w	r9, sp, #516	; 0x204
   b53d4:	ab64      	add	r3, sp, #400	; 0x190
   b53d6:	ca06      	ldmia	r2, {r1, r2}
   b53d8:	a875      	add	r0, sp, #468	; 0x1d4
   b53da:	f7ff fa3d 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b53de:	4621      	mov	r1, r4
   b53e0:	2210      	movs	r2, #16
   b53e2:	4648      	mov	r0, r9
   b53e4:	f006 fd3e 	bl	bbe64 <memset>
   b53e8:	2204      	movs	r2, #4
   b53ea:	ae72      	add	r6, sp, #456	; 0x1c8
   b53ec:	ab68      	add	r3, sp, #416	; 0x1a0
   b53ee:	f8cd 91a0 	str.w	r9, [sp, #416]	; 0x1a0
   b53f2:	9269      	str	r2, [sp, #420]	; 0x1a4
   b53f4:	e893 0006 	ldmia.w	r3, {r1, r2}
   b53f8:	4630      	mov	r0, r6
   b53fa:	f7ff fdf9 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway redLineCTA = Railway(
   b53fe:	aa75      	add	r2, sp, #468	; 0x1d4
   b5400:	e9cd 5200 	strd	r5, r2, [sp]
   b5404:	aa78      	add	r2, sp, #480	; 0x1e0
   b5406:	4613      	mov	r3, r2
   b5408:	a97e      	add	r1, sp, #504	; 0x1f8
   b540a:	aa7b      	add	r2, sp, #492	; 0x1ec
   b540c:	9602      	str	r6, [sp, #8]
   b540e:	4888      	ldr	r0, [pc, #544]	; (b5630 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x360>)
   b5410:	f7ff fe6e 	bl	b50f0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
      }
   b5414:	4630      	mov	r0, r6
   b5416:	f7ff f995 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b541a:	a875      	add	r0, sp, #468	; 0x1d4
   b541c:	f7ff f9b3 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b5420:	a8a8      	add	r0, sp, #672	; 0x2a0
   b5422:	f005 fd47 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5426:	4658      	mov	r0, fp
   b5428:	f005 fd44 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b542c:	4628      	mov	r0, r5
   b542e:	f005 fd41 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5432:	a878      	add	r0, sp, #480	; 0x1e0
   b5434:	f7ff f986 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5438:	a87b      	add	r0, sp, #492	; 0x1ec
   b543a:	f7ff f983 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b543e:	a87e      	add	r0, sp, #504	; 0x1f8
   b5440:	f7ff f96c 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5444:	4b7b      	ldr	r3, [pc, #492]	; (b5634 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x364>)
   b5446:	93a2      	str	r3, [sp, #648]	; 0x288
      lon = lo;
   b5448:	4b7b      	ldr	r3, [pc, #492]	; (b5638 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x368>)
   b544a:	93a3      	str	r3, [sp, #652]	; 0x28c
      lat = la;
   b544c:	4b7b      	ldr	r3, [pc, #492]	; (b563c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x36c>)
   b544e:	93a4      	str	r3, [sp, #656]	; 0x290
      lon = lo;
   b5450:	4b7b      	ldr	r3, [pc, #492]	; (b5640 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x370>)
   b5452:	93a5      	str	r3, [sp, #660]	; 0x294
      lat = la;
   b5454:	4b7b      	ldr	r3, [pc, #492]	; (b5644 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x374>)
   b5456:	93a6      	str	r3, [sp, #664]	; 0x298
      lon = lo;
   b5458:	4b7b      	ldr	r3, [pc, #492]	; (b5648 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x378>)
   b545a:	93a7      	str	r3, [sp, #668]	; 0x29c
      lat = la;
   b545c:	4b7b      	ldr	r3, [pc, #492]	; (b564c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x37c>)
   b545e:	93a8      	str	r3, [sp, #672]	; 0x2a0
      lon = lo;
   b5460:	4b7b      	ldr	r3, [pc, #492]	; (b5650 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x380>)
   b5462:	93a9      	str	r3, [sp, #676]	; 0x2a4
      lat = la;
   b5464:	4b7b      	ldr	r3, [pc, #492]	; (b5654 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x384>)
   b5466:	93aa      	str	r3, [sp, #680]	; 0x2a8
      lon = lo;
   b5468:	4b7b      	ldr	r3, [pc, #492]	; (b5658 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x388>)
   b546a:	93ab      	str	r3, [sp, #684]	; 0x2ac
      lat = la;
   b546c:	4b7b      	ldr	r3, [pc, #492]	; (b565c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x38c>)
   b546e:	93ac      	str	r3, [sp, #688]	; 0x2b0
      lon = lo;
   b5470:	4b7b      	ldr	r3, [pc, #492]	; (b5660 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x390>)
   b5472:	93ad      	str	r3, [sp, #692]	; 0x2b4
);
   b5474:	2207      	movs	r2, #7
      lat = la;
   b5476:	4b7b      	ldr	r3, [pc, #492]	; (b5664 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x394>)
   b5478:	9267      	str	r2, [sp, #412]	; 0x19c
   b547a:	93ae      	str	r3, [sp, #696]	; 0x2b8
   b547c:	f8cd b198 	str.w	fp, [sp, #408]	; 0x198
   b5480:	aa5c      	add	r2, sp, #368	; 0x170
      lon = lo;
   b5482:	4b79      	ldr	r3, [pc, #484]	; (b5668 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x398>)
   b5484:	93af      	str	r3, [sp, #700]	; 0x2bc
   b5486:	a87e      	add	r0, sp, #504	; 0x1f8
   b5488:	4613      	mov	r3, r2
   b548a:	e898 0006 	ldmia.w	r8, {r1, r2}
   b548e:	f7ff f9af 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5492:	f107 0c10 	add.w	ip, r7, #16
   b5496:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b549a:	462f      	mov	r7, r5
   b549c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b549e:	e89c 0003 	ldmia.w	ip, {r0, r1}
   b54a2:	2206      	movs	r2, #6
   b54a4:	9564      	str	r5, [sp, #400]	; 0x190
   b54a6:	ab64      	add	r3, sp, #400	; 0x190
   b54a8:	9265      	str	r2, [sp, #404]	; 0x194
   b54aa:	e9c7 0100 	strd	r0, r1, [r7]
   b54ae:	e893 0006 	ldmia.w	r3, {r1, r2}
   b54b2:	a87b      	add	r0, sp, #492	; 0x1ec
   b54b4:	9704      	str	r7, [sp, #16]
   b54b6:	f7ff fd9b 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b54ba:	aa85      	add	r2, sp, #532	; 0x214
   b54bc:	9262      	str	r2, [sp, #392]	; 0x188
   b54be:	233c      	movs	r3, #60	; 0x3c
   b54c0:	2204      	movs	r2, #4
   b54c2:	e9cd 3486 	strd	r3, r4, [sp, #536]	; 0x218
   b54c6:	9263      	str	r2, [sp, #396]	; 0x18c
   b54c8:	ab62      	add	r3, sp, #392	; 0x188
   b54ca:	e893 0006 	ldmia.w	r3, {r1, r2}
   b54ce:	a878      	add	r0, sp, #480	; 0x1e0
   b54d0:	9485      	str	r4, [sp, #532]	; 0x214
   b54d2:	9488      	str	r4, [sp, #544]	; 0x220
   b54d4:	f7ff fd8c 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b54d8:	4650      	mov	r0, sl
   b54da:	4964      	ldr	r1, [pc, #400]	; (b566c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x39c>)
   b54dc:	f7fe fe14 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b54e0:	a896      	add	r0, sp, #600	; 0x258
   b54e2:	4963      	ldr	r1, [pc, #396]	; (b5670 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3a0>)
   b54e4:	f7fe fe10 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b54e8:	a89c      	add	r0, sp, #624	; 0x270
   b54ea:	4962      	ldr	r1, [pc, #392]	; (b5674 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3a4>)
   b54ec:	f7fe fe0c 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b54f0:	a996      	add	r1, sp, #600	; 0x258
   b54f2:	9160      	str	r1, [sp, #384]	; 0x180
   b54f4:	2102      	movs	r1, #2
   b54f6:	9161      	str	r1, [sp, #388]	; 0x184
   b54f8:	aa60      	add	r2, sp, #384	; 0x180
   b54fa:	ab5a      	add	r3, sp, #360	; 0x168
   b54fc:	ca06      	ldmia	r2, {r1, r2}
   b54fe:	a875      	add	r0, sp, #468	; 0x1d4
   b5500:	f7ff f9aa 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5504:	4621      	mov	r1, r4
   b5506:	2210      	movs	r2, #16
   b5508:	4648      	mov	r0, r9
   b550a:	f006 fcab 	bl	bbe64 <memset>
   b550e:	2204      	movs	r2, #4
   b5510:	ab5e      	add	r3, sp, #376	; 0x178
   b5512:	f8cd 9178 	str.w	r9, [sp, #376]	; 0x178
   b5516:	925f      	str	r2, [sp, #380]	; 0x17c
   b5518:	e893 0006 	ldmia.w	r3, {r1, r2}
   b551c:	4630      	mov	r0, r6
   b551e:	f7ff fd67 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway blueLineCTA = Railway(
   b5522:	aa75      	add	r2, sp, #468	; 0x1d4
   b5524:	e9cd a200 	strd	sl, r2, [sp]
   b5528:	aa78      	add	r2, sp, #480	; 0x1e0
   b552a:	4613      	mov	r3, r2
   b552c:	a97e      	add	r1, sp, #504	; 0x1f8
   b552e:	aa7b      	add	r2, sp, #492	; 0x1ec
   b5530:	9602      	str	r6, [sp, #8]
   b5532:	4851      	ldr	r0, [pc, #324]	; (b5678 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3a8>)
   b5534:	f7ff fddc 	bl	b50f0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5538:	4630      	mov	r0, r6
   b553a:	f7ff f903 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b553e:	a875      	add	r0, sp, #468	; 0x1d4
   b5540:	f7ff f921 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5544:	a89c      	add	r0, sp, #624	; 0x270
   b5546:	f005 fcb5 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b554a:	a896      	add	r0, sp, #600	; 0x258
   b554c:	f005 fcb2 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5550:	4650      	mov	r0, sl
   b5552:	f005 fcaf 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5556:	a878      	add	r0, sp, #480	; 0x1e0
   b5558:	f7ff f8f4 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b555c:	a87b      	add	r0, sp, #492	; 0x1ec
   b555e:	f7ff f8f1 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5562:	a87e      	add	r0, sp, #504	; 0x1f8
   b5564:	f7ff f8da 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b5568:	2207      	movs	r2, #7
   b556a:	925d      	str	r2, [sp, #372]	; 0x174
   b556c:	f50d 78a4 	add.w	r8, sp, #328	; 0x148
   b5570:	f8cd b170 	str.w	fp, [sp, #368]	; 0x170
   b5574:	aa5c      	add	r2, sp, #368	; 0x170
   b5576:	ca06      	ldmia	r2, {r1, r2}
   b5578:	4643      	mov	r3, r8
   b557a:	a87e      	add	r0, sp, #504	; 0x1f8
      lat = la;
   b557c:	edcd daa2 	vstr	s27, [sp, #648]	; 0x288
      lon = lo;
   b5580:	ed8d daa3 	vstr	s26, [sp, #652]	; 0x28c
      lat = la;
   b5584:	edcd caa4 	vstr	s25, [sp, #656]	; 0x290
      lon = lo;
   b5588:	ed8d caa5 	vstr	s24, [sp, #660]	; 0x294
      lat = la;
   b558c:	edcd 8aa6 	vstr	s17, [sp, #664]	; 0x298
      lon = lo;
   b5590:	ed8d 8aa7 	vstr	s16, [sp, #668]	; 0x29c
      lat = la;
   b5594:	edcd baa8 	vstr	s23, [sp, #672]	; 0x2a0
      lon = lo;
   b5598:	ed8d baa9 	vstr	s22, [sp, #676]	; 0x2a4
      lat = la;
   b559c:	edcd aaaa 	vstr	s21, [sp, #680]	; 0x2a8
      lon = lo;
   b55a0:	ed8d aaab 	vstr	s20, [sp, #684]	; 0x2ac
      lat = la;
   b55a4:	edcd 9aac 	vstr	s19, [sp, #688]	; 0x2b0
      lon = lo;
   b55a8:	ed8d 9aad 	vstr	s18, [sp, #692]	; 0x2b4
      lat = la;
   b55ac:	edcd 8aae 	vstr	s17, [sp, #696]	; 0x2b8
      lon = lo;
   b55b0:	ed8d 8aaf 	vstr	s16, [sp, #700]	; 0x2bc
   b55b4:	f7ff f91c 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b55b8:	e060      	b.n	b567c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3ac>
   b55ba:	bf00      	nop
   b55bc:	20035320 	.word	0x20035320
   b55c0:	ffff0000 	.word	0xffff0000
   b55c4:	42276980 	.word	0x42276980
   b55c8:	c2af431e 	.word	0xc2af431e
   b55cc:	42279dcc 	.word	0x42279dcc
   b55d0:	c2af4202 	.word	0xc2af4202
   b55d4:	42279d95 	.word	0x42279d95
   b55d8:	c2af476d 	.word	0xc2af476d
   b55dc:	4227a7a9 	.word	0x4227a7a9
   b55e0:	c2af4e05 	.word	0xc2af4e05
   b55e4:	4227b382 	.word	0x4227b382
   b55e8:	c2af4e44 	.word	0xc2af4e44
   b55ec:	000be270 	.word	0x000be270
   b55f0:	42278b1a 	.word	0x42278b1a
   b55f4:	c2af449a 	.word	0xc2af449a
   b55f8:	42278b2f 	.word	0x42278b2f
   b55fc:	c2af4095 	.word	0xc2af4095
   b5600:	422781d8 	.word	0x422781d8
   b5604:	c2af4044 	.word	0xc2af4044
   b5608:	42278216 	.word	0x42278216
   b560c:	c2af44c1 	.word	0xc2af44c1
   b5610:	4227a49e 	.word	0x4227a49e
   b5614:	c2af4bd0 	.word	0xc2af4bd0
   b5618:	4227a437 	.word	0x4227a437
   b561c:	c2af4659 	.word	0xc2af4659
   b5620:	c2af4089 	.word	0xc2af4089
   b5624:	000be102 	.word	0x000be102
   b5628:	000be106 	.word	0x000be106
   b562c:	000be10d 	.word	0x000be10d
   b5630:	2003e55c 	.word	0x2003e55c
   b5634:	42277e9d 	.word	0x42277e9d
   b5638:	c2af74b3 	.word	0xc2af74b3
   b563c:	422780af 	.word	0x422780af
   b5640:	c2af588e 	.word	0xc2af588e
   b5644:	4227804d 	.word	0x4227804d
   b5648:	c2af482e 	.word	0xc2af482e
   b564c:	422780ad 	.word	0x422780ad
   b5650:	c2af4157 	.word	0xc2af4157
   b5654:	42278aff 	.word	0x42278aff
   b5658:	c2af4253 	.word	0xc2af4253
   b565c:	42278af4 	.word	0x42278af4
   b5660:	c2af4798 	.word	0xc2af4798
   b5664:	4227a978 	.word	0x4227a978
   b5668:	c2af5f5d 	.word	0xc2af5f5d
   b566c:	000be114 	.word	0x000be114
   b5670:	000be119 	.word	0x000be119
   b5674:	000be120 	.word	0x000be120
   b5678:	20035378 	.word	0x20035378
   b567c:	4bb5      	ldr	r3, [pc, #724]	; (b5954 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x684>)
   b567e:	955a      	str	r5, [sp, #360]	; 0x168
   b5680:	f103 0228 	add.w	r2, r3, #40	; 0x28
   b5684:	4617      	mov	r7, r2
   b5686:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b5688:	46ac      	mov	ip, r5
   b568a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b568e:	e9d7 0100 	ldrd	r0, r1, [r7]
   b5692:	9a04      	ldr	r2, [sp, #16]
   b5694:	9705      	str	r7, [sp, #20]
   b5696:	e882 0003 	stmia.w	r2, {r0, r1}
   b569a:	2206      	movs	r2, #6
   b569c:	ab5a      	add	r3, sp, #360	; 0x168
   b569e:	925b      	str	r2, [sp, #364]	; 0x16c
   b56a0:	e893 0006 	ldmia.w	r3, {r1, r2}
   b56a4:	a87b      	add	r0, sp, #492	; 0x1ec
   b56a6:	f7ff fca3 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b56aa:	f107 0208 	add.w	r2, r7, #8
   b56ae:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   b56b0:	af85      	add	r7, sp, #532	; 0x214
   b56b2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b56b6:	2104      	movs	r1, #4
   b56b8:	ab58      	add	r3, sp, #352	; 0x160
   b56ba:	9758      	str	r7, [sp, #352]	; 0x160
   b56bc:	9159      	str	r1, [sp, #356]	; 0x164
   b56be:	e893 0006 	ldmia.w	r3, {r1, r2}
   b56c2:	a878      	add	r0, sp, #480	; 0x1e0
   b56c4:	f7ff fc94 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b56c8:	4650      	mov	r0, sl
   b56ca:	49a3      	ldr	r1, [pc, #652]	; (b5958 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x688>)
   b56cc:	f7fe fd1c 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b56d0:	a896      	add	r0, sp, #600	; 0x258
   b56d2:	49a2      	ldr	r1, [pc, #648]	; (b595c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b56d4:	f7fe fd18 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b56d8:	a89c      	add	r0, sp, #624	; 0x270
   b56da:	49a1      	ldr	r1, [pc, #644]	; (b5960 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x690>)
   b56dc:	f7fe fd14 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b56e0:	a996      	add	r1, sp, #600	; 0x258
   b56e2:	9156      	str	r1, [sp, #344]	; 0x158
   b56e4:	2102      	movs	r1, #2
   b56e6:	af50      	add	r7, sp, #320	; 0x140
   b56e8:	9157      	str	r1, [sp, #348]	; 0x15c
   b56ea:	aa56      	add	r2, sp, #344	; 0x158
   b56ec:	ca06      	ldmia	r2, {r1, r2}
   b56ee:	463b      	mov	r3, r7
   b56f0:	a875      	add	r0, sp, #468	; 0x1d4
   b56f2:	f7ff f8b1 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b56f6:	499b      	ldr	r1, [pc, #620]	; (b5964 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x694>)
   b56f8:	f8cd 9150 	str.w	r9, [sp, #336]	; 0x150
   b56fc:	c90f      	ldmia	r1, {r0, r1, r2, r3}
   b56fe:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b5702:	2004      	movs	r0, #4
   b5704:	ab54      	add	r3, sp, #336	; 0x150
   b5706:	9055      	str	r0, [sp, #340]	; 0x154
   b5708:	e893 0006 	ldmia.w	r3, {r1, r2}
   b570c:	4630      	mov	r0, r6
   b570e:	f7ff fc6f 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway brownLineCTA = Railway(
   b5712:	a875      	add	r0, sp, #468	; 0x1d4
   b5714:	e9cd a000 	strd	sl, r0, [sp]
   b5718:	a878      	add	r0, sp, #480	; 0x1e0
   b571a:	4603      	mov	r3, r0
   b571c:	a87b      	add	r0, sp, #492	; 0x1ec
   b571e:	4602      	mov	r2, r0
   b5720:	a87e      	add	r0, sp, #504	; 0x1f8
   b5722:	4601      	mov	r1, r0
   b5724:	9602      	str	r6, [sp, #8]
   b5726:	4890      	ldr	r0, [pc, #576]	; (b5968 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x698>)
   b5728:	f7ff fce2 	bl	b50f0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b572c:	4630      	mov	r0, r6
   b572e:	f7ff f809 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5732:	a875      	add	r0, sp, #468	; 0x1d4
   b5734:	f7ff f827 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5738:	a89c      	add	r0, sp, #624	; 0x270
   b573a:	f005 fbbb 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b573e:	a896      	add	r0, sp, #600	; 0x258
   b5740:	f005 fbb8 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5744:	4650      	mov	r0, sl
   b5746:	f005 fbb5 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b574a:	a878      	add	r0, sp, #480	; 0x1e0
   b574c:	f7fe fffa 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5750:	a87b      	add	r0, sp, #492	; 0x1ec
   b5752:	f7fe fff7 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5756:	a87e      	add	r0, sp, #504	; 0x1f8
   b5758:	f7fe ffe0 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b575c:	4b83      	ldr	r3, [pc, #524]	; (b596c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x69c>)
   b575e:	9396      	str	r3, [sp, #600]	; 0x258
      lon = lo;
   b5760:	4b83      	ldr	r3, [pc, #524]	; (b5970 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a0>)
   b5762:	9397      	str	r3, [sp, #604]	; 0x25c
      lat = la;
   b5764:	4b83      	ldr	r3, [pc, #524]	; (b5974 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a4>)
   b5766:	9398      	str	r3, [sp, #608]	; 0x260
   b5768:	4b83      	ldr	r3, [pc, #524]	; (b5978 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a8>)
   b576a:	939c      	str	r3, [sp, #624]	; 0x270
);
   b576c:	a896      	add	r0, sp, #600	; 0x258
      lon = lo;
   b576e:	4b83      	ldr	r3, [pc, #524]	; (b597c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6ac>)
   b5770:	9052      	str	r0, [sp, #328]	; 0x148
   b5772:	939d      	str	r3, [sp, #628]	; 0x274
   b5774:	2005      	movs	r0, #5
      lat = la;
   b5776:	4b82      	ldr	r3, [pc, #520]	; (b5980 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b0>)
   b5778:	9053      	str	r0, [sp, #332]	; 0x14c
   b577a:	939e      	str	r3, [sp, #632]	; 0x278
   b577c:	a848      	add	r0, sp, #288	; 0x120
      lon = lo;
   b577e:	4b81      	ldr	r3, [pc, #516]	; (b5984 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b4>)
   b5780:	939f      	str	r3, [sp, #636]	; 0x27c
   b5782:	e898 0006 	ldmia.w	r8, {r1, r2}
   b5786:	4603      	mov	r3, r0
   b5788:	a87e      	add	r0, sp, #504	; 0x1f8
   b578a:	ed8d ea99 	vstr	s28, [sp, #612]	; 0x264
      lat = la;
   b578e:	edcd 9a9a 	vstr	s19, [sp, #616]	; 0x268
      lon = lo;
   b5792:	ed8d 9a9b 	vstr	s18, [sp, #620]	; 0x26c
   b5796:	f7ff f82b 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b579a:	4b6e      	ldr	r3, [pc, #440]	; (b5954 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x684>)
   b579c:	f8cd a140 	str.w	sl, [sp, #320]	; 0x140
   b57a0:	3360      	adds	r3, #96	; 0x60
   b57a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b57a4:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
   b57a8:	2004      	movs	r0, #4
   b57aa:	9051      	str	r0, [sp, #324]	; 0x144
   b57ac:	e897 0006 	ldmia.w	r7, {r1, r2}
   b57b0:	a87b      	add	r0, sp, #492	; 0x1ec
   b57b2:	f7ff fc1d 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b57b6:	4b67      	ldr	r3, [pc, #412]	; (b5954 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x684>)
   b57b8:	3370      	adds	r3, #112	; 0x70
   b57ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b57bc:	af85      	add	r7, sp, #532	; 0x214
   b57be:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b57c2:	2004      	movs	r0, #4
   b57c4:	ab4e      	add	r3, sp, #312	; 0x138
   b57c6:	974e      	str	r7, [sp, #312]	; 0x138
   b57c8:	904f      	str	r0, [sp, #316]	; 0x13c
   b57ca:	e893 0006 	ldmia.w	r3, {r1, r2}
   b57ce:	a878      	add	r0, sp, #480	; 0x1e0
   b57d0:	f7ff fc0e 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b57d4:	4628      	mov	r0, r5
   b57d6:	496c      	ldr	r1, [pc, #432]	; (b5988 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b8>)
   b57d8:	f7fe fc96 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b57dc:	4658      	mov	r0, fp
   b57de:	496b      	ldr	r1, [pc, #428]	; (b598c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6bc>)
   b57e0:	f7fe fc92 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b57e4:	a8a8      	add	r0, sp, #672	; 0x2a0
   b57e6:	496a      	ldr	r1, [pc, #424]	; (b5990 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c0>)
   b57e8:	f7fe fc8e 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b57ec:	2002      	movs	r0, #2
   b57ee:	904d      	str	r0, [sp, #308]	; 0x134
   b57f0:	af46      	add	r7, sp, #280	; 0x118
   b57f2:	f8cd b130 	str.w	fp, [sp, #304]	; 0x130
   b57f6:	aa4c      	add	r2, sp, #304	; 0x130
   b57f8:	463b      	mov	r3, r7
   b57fa:	ca06      	ldmia	r2, {r1, r2}
   b57fc:	a875      	add	r0, sp, #468	; 0x1d4
   b57fe:	f7ff f82b 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5802:	4b54      	ldr	r3, [pc, #336]	; (b5954 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x684>)
   b5804:	f8cd 9128 	str.w	r9, [sp, #296]	; 0x128
   b5808:	3380      	adds	r3, #128	; 0x80
   b580a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b580c:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b5810:	2004      	movs	r0, #4
   b5812:	ab4a      	add	r3, sp, #296	; 0x128
   b5814:	904b      	str	r0, [sp, #300]	; 0x12c
   b5816:	e893 0006 	ldmia.w	r3, {r1, r2}
   b581a:	4630      	mov	r0, r6
   b581c:	f7ff fbe8 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway greenLineCTA = Railway(
   b5820:	a875      	add	r0, sp, #468	; 0x1d4
   b5822:	e9cd 5000 	strd	r5, r0, [sp]
   b5826:	a878      	add	r0, sp, #480	; 0x1e0
   b5828:	4603      	mov	r3, r0
   b582a:	a87b      	add	r0, sp, #492	; 0x1ec
   b582c:	4602      	mov	r2, r0
   b582e:	a87e      	add	r0, sp, #504	; 0x1f8
   b5830:	4601      	mov	r1, r0
   b5832:	9602      	str	r6, [sp, #8]
   b5834:	4857      	ldr	r0, [pc, #348]	; (b5994 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c4>)
   b5836:	f7ff fc5b 	bl	b50f0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b583a:	4630      	mov	r0, r6
   b583c:	f7fe ff82 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5840:	a875      	add	r0, sp, #468	; 0x1d4
   b5842:	f7fe ffa0 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5846:	a8a8      	add	r0, sp, #672	; 0x2a0
   b5848:	f005 fb34 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b584c:	4658      	mov	r0, fp
   b584e:	f005 fb31 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5852:	4628      	mov	r0, r5
   b5854:	f005 fb2e 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5858:	a878      	add	r0, sp, #480	; 0x1e0
   b585a:	f7fe ff73 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b585e:	a87b      	add	r0, sp, #492	; 0x1ec
   b5860:	f7fe ff70 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5864:	a87e      	add	r0, sp, #504	; 0x1f8
   b5866:	f7fe ff59 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b586a:	4b4b      	ldr	r3, [pc, #300]	; (b5998 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c8>)
   b586c:	93a2      	str	r3, [sp, #648]	; 0x288
      lon = lo;
   b586e:	4b4b      	ldr	r3, [pc, #300]	; (b599c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6cc>)
   b5870:	93a3      	str	r3, [sp, #652]	; 0x28c
      lat = la;
   b5872:	4b4b      	ldr	r3, [pc, #300]	; (b59a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d0>)
   b5874:	93a4      	str	r3, [sp, #656]	; 0x290
      lon = lo;
   b5876:	4b4b      	ldr	r3, [pc, #300]	; (b59a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d4>)
   b5878:	93a5      	str	r3, [sp, #660]	; 0x294
      lat = la;
   b587a:	4b4b      	ldr	r3, [pc, #300]	; (b59a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d8>)
   b587c:	93a6      	str	r3, [sp, #664]	; 0x298
      lon = lo;
   b587e:	4b4b      	ldr	r3, [pc, #300]	; (b59ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6dc>)
   b5880:	93a7      	str	r3, [sp, #668]	; 0x29c
      lat = la;
   b5882:	4b4b      	ldr	r3, [pc, #300]	; (b59b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e0>)
   b5884:	93a8      	str	r3, [sp, #672]	; 0x2a0
);
   b5886:	2008      	movs	r0, #8
   b5888:	4b4a      	ldr	r3, [pc, #296]	; (b59b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e4>)
   b588a:	9049      	str	r0, [sp, #292]	; 0x124
   b588c:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
   b5890:	93ae      	str	r3, [sp, #696]	; 0x2b8
   b5892:	f8cd b120 	str.w	fp, [sp, #288]	; 0x120
   b5896:	a848      	add	r0, sp, #288	; 0x120
      lon = lo;
   b5898:	4b47      	ldr	r3, [pc, #284]	; (b59b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e8>)
   b589a:	93af      	str	r3, [sp, #700]	; 0x2bc
   b589c:	e890 0006 	ldmia.w	r0, {r1, r2}
   b58a0:	4643      	mov	r3, r8
   b58a2:	a87e      	add	r0, sp, #504	; 0x1f8
   b58a4:	ed8d eaa9 	vstr	s28, [sp, #676]	; 0x2a4
      lat = la;
   b58a8:	edcd 9aaa 	vstr	s19, [sp, #680]	; 0x2a8
      lon = lo;
   b58ac:	ed8d 9aab 	vstr	s18, [sp, #684]	; 0x2ac
      lat = la;
   b58b0:	edcd 8aac 	vstr	s17, [sp, #688]	; 0x2b0
      lon = lo;
   b58b4:	ed8d 8aad 	vstr	s16, [sp, #692]	; 0x2b4
      lat = la;
   b58b8:	edcd aab0 	vstr	s21, [sp, #704]	; 0x2c0
      lon = lo;
   b58bc:	ed8d aab1 	vstr	s20, [sp, #708]	; 0x2c4
   b58c0:	f7fe ff96 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b58c4:	4b23      	ldr	r3, [pc, #140]	; (b5954 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x684>)
   b58c6:	9546      	str	r5, [sp, #280]	; 0x118
   b58c8:	f103 0c90 	add.w	ip, r3, #144	; 0x90
   b58cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b58d0:	46ae      	mov	lr, r5
   b58d2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b58d6:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
   b58da:	9b04      	ldr	r3, [sp, #16]
   b58dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b58e0:	2007      	movs	r0, #7
   b58e2:	9047      	str	r0, [sp, #284]	; 0x11c
   b58e4:	e897 0006 	ldmia.w	r7, {r1, r2}
   b58e8:	a87b      	add	r0, sp, #492	; 0x1ec
   b58ea:	f7ff fb81 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b58ee:	4b19      	ldr	r3, [pc, #100]	; (b5954 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x684>)
   b58f0:	33ac      	adds	r3, #172	; 0xac
   b58f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b58f4:	af85      	add	r7, sp, #532	; 0x214
   b58f6:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b58fa:	2004      	movs	r0, #4
   b58fc:	ab44      	add	r3, sp, #272	; 0x110
   b58fe:	9744      	str	r7, [sp, #272]	; 0x110
   b5900:	9045      	str	r0, [sp, #276]	; 0x114
   b5902:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5906:	a878      	add	r0, sp, #480	; 0x1e0
   b5908:	f7ff fb72 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b590c:	4650      	mov	r0, sl
   b590e:	492b      	ldr	r1, [pc, #172]	; (b59bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6ec>)
   b5910:	f7fe fbfa 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5914:	a896      	add	r0, sp, #600	; 0x258
   b5916:	492a      	ldr	r1, [pc, #168]	; (b59c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f0>)
   b5918:	f7fe fbf6 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b591c:	a89c      	add	r0, sp, #624	; 0x270
   b591e:	4929      	ldr	r1, [pc, #164]	; (b59c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f4>)
   b5920:	f7fe fbf2 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5924:	a896      	add	r0, sp, #600	; 0x258
   b5926:	9042      	str	r0, [sp, #264]	; 0x108
   b5928:	2002      	movs	r0, #2
   b592a:	9043      	str	r0, [sp, #268]	; 0x10c
   b592c:	af3c      	add	r7, sp, #240	; 0xf0
   b592e:	aa42      	add	r2, sp, #264	; 0x108
   b5930:	463b      	mov	r3, r7
   b5932:	ca06      	ldmia	r2, {r1, r2}
   b5934:	a875      	add	r0, sp, #468	; 0x1d4
   b5936:	f7fe ff8f 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b593a:	4b06      	ldr	r3, [pc, #24]	; (b5954 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x684>)
   b593c:	f8cd 9100 	str.w	r9, [sp, #256]	; 0x100
   b5940:	33bc      	adds	r3, #188	; 0xbc
   b5942:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5944:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b5948:	2004      	movs	r0, #4
   b594a:	ab40      	add	r3, sp, #256	; 0x100
   b594c:	9041      	str	r0, [sp, #260]	; 0x104
   b594e:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5952:	e039      	b.n	b59c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f8>
   b5954:	000be270 	.word	0x000be270
   b5958:	000be127 	.word	0x000be127
   b595c:	000be12d 	.word	0x000be12d
   b5960:	000be134 	.word	0x000be134
   b5964:	000be2c0 	.word	0x000be2c0
   b5968:	20035450 	.word	0x20035450
   b596c:	42276997 	.word	0x42276997
   b5970:	c2af40b8 	.word	0xc2af40b8
   b5974:	422781fe 	.word	0x422781fe
   b5978:	42278afb 	.word	0x42278afb
   b597c:	c2af4494 	.word	0xc2af4494
   b5980:	42278971 	.word	0x42278971
   b5984:	c2af6479 	.word	0xc2af6479
   b5988:	000be13b 	.word	0x000be13b
   b598c:	000be141 	.word	0x000be141
   b5990:	000be148 	.word	0x000be148
   b5994:	200354d8 	.word	0x200354d8
   b5998:	4227631a 	.word	0x4227631a
   b599c:	c2af4bd2 	.word	0xc2af4bd2
   b59a0:	42276ec4 	.word	0x42276ec4
   b59a4:	c2af4115 	.word	0xc2af4115
   b59a8:	422780b5 	.word	0x422780b5
   b59ac:	c2af4086 	.word	0xc2af4086
   b59b0:	42278200 	.word	0x42278200
   b59b4:	422781e1 	.word	0x422781e1
   b59b8:	c2af4476 	.word	0xc2af4476
   b59bc:	000be14f 	.word	0x000be14f
   b59c0:	000be156 	.word	0x000be156
   b59c4:	000be15d 	.word	0x000be15d
   b59c8:	4630      	mov	r0, r6
   b59ca:	f7ff fb11 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway orangeLineCTA = Railway(
   b59ce:	a875      	add	r0, sp, #468	; 0x1d4
   b59d0:	e9cd a000 	strd	sl, r0, [sp]
   b59d4:	a878      	add	r0, sp, #480	; 0x1e0
   b59d6:	4603      	mov	r3, r0
   b59d8:	a87b      	add	r0, sp, #492	; 0x1ec
   b59da:	4602      	mov	r2, r0
   b59dc:	a87e      	add	r0, sp, #504	; 0x1f8
   b59de:	4601      	mov	r1, r0
   b59e0:	9602      	str	r6, [sp, #8]
   b59e2:	48b8      	ldr	r0, [pc, #736]	; (b5cc4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9f4>)
   b59e4:	f7ff fb84 	bl	b50f0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b59e8:	4630      	mov	r0, r6
   b59ea:	f7fe feab 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b59ee:	a875      	add	r0, sp, #468	; 0x1d4
   b59f0:	f7fe fec9 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b59f4:	a89c      	add	r0, sp, #624	; 0x270
   b59f6:	f005 fa5d 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b59fa:	a896      	add	r0, sp, #600	; 0x258
   b59fc:	f005 fa5a 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5a00:	4650      	mov	r0, sl
   b5a02:	f005 fa57 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5a06:	a878      	add	r0, sp, #480	; 0x1e0
   b5a08:	f7fe fe9c 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5a0c:	a87b      	add	r0, sp, #492	; 0x1ec
   b5a0e:	f7fe fe99 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5a12:	a87e      	add	r0, sp, #504	; 0x1f8
   b5a14:	f7fe fe82 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b5a18:	2007      	movs	r0, #7
   b5a1a:	903f      	str	r0, [sp, #252]	; 0xfc
   b5a1c:	f8cd b0f8 	str.w	fp, [sp, #248]	; 0xf8
   b5a20:	a834      	add	r0, sp, #208	; 0xd0
   b5a22:	e898 0006 	ldmia.w	r8, {r1, r2}
   b5a26:	4603      	mov	r3, r0
   b5a28:	a87e      	add	r0, sp, #504	; 0x1f8
      lat = la;
   b5a2a:	edcd daa2 	vstr	s27, [sp, #648]	; 0x288
      lon = lo;
   b5a2e:	ed8d daa3 	vstr	s26, [sp, #652]	; 0x28c
      lat = la;
   b5a32:	edcd caa4 	vstr	s25, [sp, #656]	; 0x290
      lon = lo;
   b5a36:	ed8d caa5 	vstr	s24, [sp, #660]	; 0x294
      lat = la;
   b5a3a:	edcd 8aa6 	vstr	s17, [sp, #664]	; 0x298
      lon = lo;
   b5a3e:	ed8d 8aa7 	vstr	s16, [sp, #668]	; 0x29c
      lat = la;
   b5a42:	edcd baa8 	vstr	s23, [sp, #672]	; 0x2a0
      lon = lo;
   b5a46:	ed8d baa9 	vstr	s22, [sp, #676]	; 0x2a4
      lat = la;
   b5a4a:	edcd aaaa 	vstr	s21, [sp, #680]	; 0x2a8
      lon = lo;
   b5a4e:	ed8d aaab 	vstr	s20, [sp, #684]	; 0x2ac
      lat = la;
   b5a52:	edcd 9aac 	vstr	s19, [sp, #688]	; 0x2b0
      lon = lo;
   b5a56:	ed8d 9aad 	vstr	s18, [sp, #692]	; 0x2b4
      lat = la;
   b5a5a:	edcd 8aae 	vstr	s17, [sp, #696]	; 0x2b8
      lon = lo;
   b5a5e:	ed8d 8aaf 	vstr	s16, [sp, #700]	; 0x2bc
   b5a62:	f7fe fec5 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5a66:	4a98      	ldr	r2, [pc, #608]	; (b5cc8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9f8>)
   b5a68:	953c      	str	r5, [sp, #240]	; 0xf0
   b5a6a:	f1a2 0e18 	sub.w	lr, r2, #24
   b5a6e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5a72:	46ac      	mov	ip, r5
   b5a74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5a78:	9805      	ldr	r0, [sp, #20]
   b5a7a:	9a04      	ldr	r2, [sp, #16]
   b5a7c:	c803      	ldmia	r0, {r0, r1}
   b5a7e:	e9c2 0100 	strd	r0, r1, [r2]
   b5a82:	2006      	movs	r0, #6
   b5a84:	903d      	str	r0, [sp, #244]	; 0xf4
   b5a86:	e897 0006 	ldmia.w	r7, {r1, r2}
   b5a8a:	a87b      	add	r0, sp, #492	; 0x1ec
   b5a8c:	f7ff fab0 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5a90:	4a8d      	ldr	r2, [pc, #564]	; (b5cc8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9f8>)
   b5a92:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   b5a94:	af85      	add	r7, sp, #532	; 0x214
   b5a96:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5a9a:	2204      	movs	r2, #4
   b5a9c:	ab3a      	add	r3, sp, #232	; 0xe8
   b5a9e:	973a      	str	r7, [sp, #232]	; 0xe8
   b5aa0:	923b      	str	r2, [sp, #236]	; 0xec
   b5aa2:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5aa6:	a878      	add	r0, sp, #480	; 0x1e0
   b5aa8:	f7ff faa2 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5aac:	4650      	mov	r0, sl
   b5aae:	4987      	ldr	r1, [pc, #540]	; (b5ccc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9fc>)
   b5ab0:	f7fe fb2a 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5ab4:	a896      	add	r0, sp, #600	; 0x258
   b5ab6:	4986      	ldr	r1, [pc, #536]	; (b5cd0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa00>)
   b5ab8:	f7fe fb26 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5abc:	a89c      	add	r0, sp, #624	; 0x270
   b5abe:	4985      	ldr	r1, [pc, #532]	; (b5cd4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa04>)
   b5ac0:	f7fe fb22 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5ac4:	a896      	add	r0, sp, #600	; 0x258
   b5ac6:	9038      	str	r0, [sp, #224]	; 0xe0
   b5ac8:	2002      	movs	r0, #2
   b5aca:	9039      	str	r0, [sp, #228]	; 0xe4
   b5acc:	af32      	add	r7, sp, #200	; 0xc8
   b5ace:	aa38      	add	r2, sp, #224	; 0xe0
   b5ad0:	ca06      	ldmia	r2, {r1, r2}
   b5ad2:	463b      	mov	r3, r7
   b5ad4:	a875      	add	r0, sp, #468	; 0x1d4
   b5ad6:	f7fe febf 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5ada:	497f      	ldr	r1, [pc, #508]	; (b5cd8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa08>)
   b5adc:	f8cd 90d8 	str.w	r9, [sp, #216]	; 0xd8
   b5ae0:	c90f      	ldmia	r1, {r0, r1, r2, r3}
   b5ae2:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b5ae6:	2204      	movs	r2, #4
   b5ae8:	ab36      	add	r3, sp, #216	; 0xd8
   b5aea:	9237      	str	r2, [sp, #220]	; 0xdc
   b5aec:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5af0:	4630      	mov	r0, r6
   b5af2:	f7ff fa7d 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway purpleLineCTA = Railway(
   b5af6:	aa75      	add	r2, sp, #468	; 0x1d4
   b5af8:	e9cd a200 	strd	sl, r2, [sp]
   b5afc:	aa78      	add	r2, sp, #480	; 0x1e0
   b5afe:	4613      	mov	r3, r2
   b5b00:	a97e      	add	r1, sp, #504	; 0x1f8
   b5b02:	aa7b      	add	r2, sp, #492	; 0x1ec
   b5b04:	9602      	str	r6, [sp, #8]
   b5b06:	4875      	ldr	r0, [pc, #468]	; (b5cdc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa0c>)
   b5b08:	f7ff faf2 	bl	b50f0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5b0c:	4630      	mov	r0, r6
   b5b0e:	f7fe fe19 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5b12:	a875      	add	r0, sp, #468	; 0x1d4
   b5b14:	f7fe fe37 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5b18:	a89c      	add	r0, sp, #624	; 0x270
   b5b1a:	f005 f9cb 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5b1e:	a896      	add	r0, sp, #600	; 0x258
   b5b20:	f005 f9c8 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5b24:	4650      	mov	r0, sl
   b5b26:	f005 f9c5 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5b2a:	a878      	add	r0, sp, #480	; 0x1e0
   b5b2c:	f7fe fe0a 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5b30:	a87b      	add	r0, sp, #492	; 0x1ec
   b5b32:	f7fe fe07 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5b36:	a87e      	add	r0, sp, #504	; 0x1f8
   b5b38:	f7fe fdf0 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5b3c:	4b68      	ldr	r3, [pc, #416]	; (b5ce0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa10>)
   b5b3e:	93a2      	str	r3, [sp, #648]	; 0x288
      lon = lo;
   b5b40:	4b68      	ldr	r3, [pc, #416]	; (b5ce4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa14>)
   b5b42:	93a3      	str	r3, [sp, #652]	; 0x28c
      lat = la;
   b5b44:	4b68      	ldr	r3, [pc, #416]	; (b5ce8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa18>)
   b5b46:	93a4      	str	r3, [sp, #656]	; 0x290
      lon = lo;
   b5b48:	4b68      	ldr	r3, [pc, #416]	; (b5cec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa1c>)
   b5b4a:	93a5      	str	r3, [sp, #660]	; 0x294
);
   b5b4c:	2208      	movs	r2, #8
      lat = la;
   b5b4e:	4b68      	ldr	r3, [pc, #416]	; (b5cf0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa20>)
   b5b50:	9235      	str	r2, [sp, #212]	; 0xd4
   b5b52:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
   b5b56:	93a6      	str	r3, [sp, #664]	; 0x298
   b5b58:	f8cd b0d0 	str.w	fp, [sp, #208]	; 0xd0
      lon = lo;
   b5b5c:	4b65      	ldr	r3, [pc, #404]	; (b5cf4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa24>)
   b5b5e:	93a7      	str	r3, [sp, #668]	; 0x29c
   b5b60:	aa34      	add	r2, sp, #208	; 0xd0
   b5b62:	4643      	mov	r3, r8
   b5b64:	ca06      	ldmia	r2, {r1, r2}
   b5b66:	a87e      	add	r0, sp, #504	; 0x1f8
      lat = la;
   b5b68:	edcd 8aa8 	vstr	s17, [sp, #672]	; 0x2a0
      lon = lo;
   b5b6c:	ed8d 8aa9 	vstr	s16, [sp, #676]	; 0x2a4
      lat = la;
   b5b70:	edcd 9aaa 	vstr	s19, [sp, #680]	; 0x2a8
      lon = lo;
   b5b74:	ed8d 9aab 	vstr	s18, [sp, #684]	; 0x2ac
      lat = la;
   b5b78:	edcd aaac 	vstr	s21, [sp, #688]	; 0x2b0
      lon = lo;
   b5b7c:	ed8d aaad 	vstr	s20, [sp, #692]	; 0x2b4
      lat = la;
   b5b80:	edcd baae 	vstr	s23, [sp, #696]	; 0x2b8
      lon = lo;
   b5b84:	ed8d baaf 	vstr	s22, [sp, #700]	; 0x2bc
      lat = la;
   b5b88:	edcd 8ab0 	vstr	s17, [sp, #704]	; 0x2c0
      lon = lo;
   b5b8c:	ed8d 8ab1 	vstr	s16, [sp, #708]	; 0x2c4
   b5b90:	f7fe fe2e 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5b94:	4b58      	ldr	r3, [pc, #352]	; (b5cf8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa28>)
   b5b96:	9532      	str	r5, [sp, #200]	; 0xc8
   b5b98:	f103 0ccc 	add.w	ip, r3, #204	; 0xcc
   b5b9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5ba0:	46ae      	mov	lr, r5
   b5ba2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b5ba6:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
   b5baa:	9b04      	ldr	r3, [sp, #16]
   b5bac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b5bb0:	2207      	movs	r2, #7
   b5bb2:	9233      	str	r2, [sp, #204]	; 0xcc
   b5bb4:	e897 0006 	ldmia.w	r7, {r1, r2}
   b5bb8:	a87b      	add	r0, sp, #492	; 0x1ec
   b5bba:	f7ff fa19 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5bbe:	4b4e      	ldr	r3, [pc, #312]	; (b5cf8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa28>)
   b5bc0:	33e8      	adds	r3, #232	; 0xe8
   b5bc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5bc4:	af85      	add	r7, sp, #532	; 0x214
   b5bc6:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5bca:	2204      	movs	r2, #4
   b5bcc:	ab30      	add	r3, sp, #192	; 0xc0
   b5bce:	9730      	str	r7, [sp, #192]	; 0xc0
   b5bd0:	9231      	str	r2, [sp, #196]	; 0xc4
   b5bd2:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5bd6:	a878      	add	r0, sp, #480	; 0x1e0
   b5bd8:	f7ff fa0a 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5bdc:	4650      	mov	r0, sl
   b5bde:	4947      	ldr	r1, [pc, #284]	; (b5cfc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa2c>)
   b5be0:	f7fe fa92 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5be4:	a896      	add	r0, sp, #600	; 0x258
   b5be6:	4946      	ldr	r1, [pc, #280]	; (b5d00 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa30>)
   b5be8:	f7fe fa8e 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5bec:	a89c      	add	r0, sp, #624	; 0x270
   b5bee:	4945      	ldr	r1, [pc, #276]	; (b5d04 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa34>)
   b5bf0:	f7fe fa8a 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5bf4:	a996      	add	r1, sp, #600	; 0x258
   b5bf6:	912e      	str	r1, [sp, #184]	; 0xb8
   b5bf8:	2102      	movs	r1, #2
   b5bfa:	912f      	str	r1, [sp, #188]	; 0xbc
   b5bfc:	aa2e      	add	r2, sp, #184	; 0xb8
   b5bfe:	ab28      	add	r3, sp, #160	; 0xa0
   b5c00:	ca06      	ldmia	r2, {r1, r2}
   b5c02:	a875      	add	r0, sp, #468	; 0x1d4
   b5c04:	f7fe fe28 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5c08:	4b3b      	ldr	r3, [pc, #236]	; (b5cf8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa28>)
   b5c0a:	f8cd 90b0 	str.w	r9, [sp, #176]	; 0xb0
   b5c0e:	461f      	mov	r7, r3
   b5c10:	33f8      	adds	r3, #248	; 0xf8
   b5c12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5c14:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b5c18:	2204      	movs	r2, #4
   b5c1a:	ab2c      	add	r3, sp, #176	; 0xb0
   b5c1c:	922d      	str	r2, [sp, #180]	; 0xb4
   b5c1e:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5c22:	4630      	mov	r0, r6
   b5c24:	f7ff f9e4 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway pinkLineCTA = Railway(
   b5c28:	aa75      	add	r2, sp, #468	; 0x1d4
   b5c2a:	e9cd a200 	strd	sl, r2, [sp]
   b5c2e:	aa78      	add	r2, sp, #480	; 0x1e0
   b5c30:	4613      	mov	r3, r2
   b5c32:	a97e      	add	r1, sp, #504	; 0x1f8
   b5c34:	aa7b      	add	r2, sp, #492	; 0x1ec
   b5c36:	9602      	str	r6, [sp, #8]
   b5c38:	4833      	ldr	r0, [pc, #204]	; (b5d08 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa38>)
   b5c3a:	f7ff fa59 	bl	b50f0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5c3e:	4630      	mov	r0, r6
   b5c40:	f7fe fd80 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5c44:	a875      	add	r0, sp, #468	; 0x1d4
   b5c46:	f7fe fd9e 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5c4a:	a89c      	add	r0, sp, #624	; 0x270
   b5c4c:	f005 f932 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5c50:	a896      	add	r0, sp, #600	; 0x258
   b5c52:	f005 f92f 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5c56:	4650      	mov	r0, sl
   b5c58:	f005 f92c 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5c5c:	a878      	add	r0, sp, #480	; 0x1e0
   b5c5e:	f7fe fd71 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5c62:	a87b      	add	r0, sp, #492	; 0x1ec
   b5c64:	f7fe fd6e 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5c68:	a87e      	add	r0, sp, #504	; 0x1f8
   b5c6a:	f7fe fd57 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5c6e:	4b27      	ldr	r3, [pc, #156]	; (b5d0c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa3c>)
   b5c70:	93a2      	str	r3, [sp, #648]	; 0x288
      lon = lo;
   b5c72:	4b27      	ldr	r3, [pc, #156]	; (b5d10 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa40>)
   b5c74:	93a3      	str	r3, [sp, #652]	; 0x28c
      lat = la;
   b5c76:	4b27      	ldr	r3, [pc, #156]	; (b5d14 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa44>)
   b5c78:	93a4      	str	r3, [sp, #656]	; 0x290
      lon = lo;
   b5c7a:	4b27      	ldr	r3, [pc, #156]	; (b5d18 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa48>)
   b5c7c:	93a5      	str	r3, [sp, #660]	; 0x294
      lat = la;
   b5c7e:	4b27      	ldr	r3, [pc, #156]	; (b5d1c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa4c>)
   b5c80:	93a6      	str	r3, [sp, #664]	; 0x298
      lon = lo;
   b5c82:	4b27      	ldr	r3, [pc, #156]	; (b5d20 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa50>)
   b5c84:	93a7      	str	r3, [sp, #668]	; 0x29c
      lat = la;
   b5c86:	4b27      	ldr	r3, [pc, #156]	; (b5d24 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa54>)
   b5c88:	93a8      	str	r3, [sp, #672]	; 0x2a0
      lon = lo;
   b5c8a:	4b27      	ldr	r3, [pc, #156]	; (b5d28 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa58>)
   b5c8c:	93a9      	str	r3, [sp, #676]	; 0x2a4
      lat = la;
   b5c8e:	4b27      	ldr	r3, [pc, #156]	; (b5d2c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa5c>)
   b5c90:	93aa      	str	r3, [sp, #680]	; 0x2a8
      lon = lo;
   b5c92:	4b27      	ldr	r3, [pc, #156]	; (b5d30 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa60>)
   b5c94:	93ab      	str	r3, [sp, #684]	; 0x2ac
      lat = la;
   b5c96:	4b27      	ldr	r3, [pc, #156]	; (b5d34 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa64>)
   b5c98:	93ac      	str	r3, [sp, #688]	; 0x2b0
      lon = lo;
   b5c9a:	4b27      	ldr	r3, [pc, #156]	; (b5d38 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa68>)
   b5c9c:	93ad      	str	r3, [sp, #692]	; 0x2b4
};
   b5c9e:	2207      	movs	r2, #7
      lat = la;
   b5ca0:	4b26      	ldr	r3, [pc, #152]	; (b5d3c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa6c>)
   b5ca2:	922b      	str	r2, [sp, #172]	; 0xac
   b5ca4:	93ae      	str	r3, [sp, #696]	; 0x2b8
   b5ca6:	f8cd b0a8 	str.w	fp, [sp, #168]	; 0xa8
   b5caa:	aa20      	add	r2, sp, #128	; 0x80
      lon = lo;
   b5cac:	4b24      	ldr	r3, [pc, #144]	; (b5d40 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa70>)
   b5cae:	93af      	str	r3, [sp, #700]	; 0x2bc
   b5cb0:	a87e      	add	r0, sp, #504	; 0x1f8
   b5cb2:	4613      	mov	r3, r2
   b5cb4:	e898 0006 	ldmia.w	r8, {r1, r2}
   b5cb8:	f7fe fd9a 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5cbc:	f507 7284 	add.w	r2, r7, #264	; 0x108
   b5cc0:	4617      	mov	r7, r2
   b5cc2:	e03f      	b.n	b5d44 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa74>
   b5cc4:	20037de0 	.word	0x20037de0
   b5cc8:	000be2b0 	.word	0x000be2b0
   b5ccc:	000be164 	.word	0x000be164
   b5cd0:	000be16b 	.word	0x000be16b
   b5cd4:	000be172 	.word	0x000be172
   b5cd8:	000be2c0 	.word	0x000be2c0
   b5cdc:	2003e4f0 	.word	0x2003e4f0
   b5ce0:	42276a76 	.word	0x42276a76
   b5ce4:	c2af692b 	.word	0xc2af692b
   b5ce8:	42276b5f 	.word	0x42276b5f
   b5cec:	c2af56cd 	.word	0xc2af56cd
   b5cf0:	42278a2d 	.word	0x42278a2d
   b5cf4:	c2af56d8 	.word	0xc2af56d8
   b5cf8:	000be270 	.word	0x000be270
   b5cfc:	000be179 	.word	0x000be179
   b5d00:	000be17e 	.word	0x000be17e
   b5d04:	000be185 	.word	0x000be185
   b5d08:	2003e484 	.word	0x2003e484
   b5d0c:	4229481b 	.word	0x4229481b
   b5d10:	c28e1ab2 	.word	0xc28e1ab2
   b5d14:	42294f83 	.word	0x42294f83
   b5d18:	c28e1d93 	.word	0xc28e1d93
   b5d1c:	422960e6 	.word	0x422960e6
   b5d20:	c28e1d2d 	.word	0xc28e1d2d
   b5d24:	422966f9 	.word	0x422966f9
   b5d28:	c28e1af0 	.word	0xc28e1af0
   b5d2c:	422971a5 	.word	0x422971a5
   b5d30:	c28e23e6 	.word	0xc28e23e6
   b5d34:	42297437 	.word	0x42297437
   b5d38:	c28e3373 	.word	0xc28e3373
   b5d3c:	42297d7a 	.word	0x42297d7a
   b5d40:	c28e3b5d 	.word	0xc28e3b5d
   b5d44:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b5d46:	46ac      	mov	ip, r5
   b5d48:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5d4c:	e9d7 0100 	ldrd	r0, r1, [r7]
   b5d50:	9a04      	ldr	r2, [sp, #16]
   b5d52:	9528      	str	r5, [sp, #160]	; 0xa0
   b5d54:	e882 0003 	stmia.w	r2, {r0, r1}
   b5d58:	2206      	movs	r2, #6
   b5d5a:	ab28      	add	r3, sp, #160	; 0xa0
   b5d5c:	9229      	str	r2, [sp, #164]	; 0xa4
   b5d5e:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5d62:	a87b      	add	r0, sp, #492	; 0x1ec
   b5d64:	9706      	str	r7, [sp, #24]
   b5d66:	f7ff f943 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5d6a:	2232      	movs	r2, #50	; 0x32
   b5d6c:	e9cd 2486 	strd	r2, r4, [sp, #536]	; 0x218
   b5d70:	aa85      	add	r2, sp, #532	; 0x214
   b5d72:	9226      	str	r2, [sp, #152]	; 0x98
   b5d74:	2204      	movs	r2, #4
   b5d76:	ab26      	add	r3, sp, #152	; 0x98
   b5d78:	9227      	str	r2, [sp, #156]	; 0x9c
   b5d7a:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5d7e:	a878      	add	r0, sp, #480	; 0x1e0
   b5d80:	9485      	str	r4, [sp, #532]	; 0x214
   b5d82:	9488      	str	r4, [sp, #544]	; 0x220
   b5d84:	f7ff f934 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5d88:	4650      	mov	r0, sl
   b5d8a:	49bc      	ldr	r1, [pc, #752]	; (b607c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdac>)
   b5d8c:	f7fe f9bc 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5d90:	a896      	add	r0, sp, #600	; 0x258
   b5d92:	49bb      	ldr	r1, [pc, #748]	; (b6080 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdb0>)
   b5d94:	f7fe f9b8 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5d98:	a89c      	add	r0, sp, #624	; 0x270
   b5d9a:	49ba      	ldr	r1, [pc, #744]	; (b6084 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdb4>)
   b5d9c:	f7fe f9b4 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5da0:	a996      	add	r1, sp, #600	; 0x258
   b5da2:	9124      	str	r1, [sp, #144]	; 0x90
   b5da4:	2102      	movs	r1, #2
   b5da6:	f10d 0878 	add.w	r8, sp, #120	; 0x78
   b5daa:	9125      	str	r1, [sp, #148]	; 0x94
   b5dac:	aa24      	add	r2, sp, #144	; 0x90
   b5dae:	4643      	mov	r3, r8
   b5db0:	ca06      	ldmia	r2, {r1, r2}
   b5db2:	a875      	add	r0, sp, #468	; 0x1d4
   b5db4:	f7fe fd50 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5db8:	4621      	mov	r1, r4
   b5dba:	2210      	movs	r2, #16
   b5dbc:	4648      	mov	r0, r9
   b5dbe:	f006 f851 	bl	bbe64 <memset>
   b5dc2:	2204      	movs	r2, #4
   b5dc4:	ab22      	add	r3, sp, #136	; 0x88
   b5dc6:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
   b5dca:	9223      	str	r2, [sp, #140]	; 0x8c
   b5dcc:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5dd0:	4630      	mov	r0, r6
   b5dd2:	f7ff f90d 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway redLineMBTA = Railway{
   b5dd6:	aa75      	add	r2, sp, #468	; 0x1d4
   b5dd8:	e9cd a200 	strd	sl, r2, [sp]
   b5ddc:	aa78      	add	r2, sp, #480	; 0x1e0
   b5dde:	4613      	mov	r3, r2
   b5de0:	a97e      	add	r1, sp, #504	; 0x1f8
   b5de2:	aa7b      	add	r2, sp, #492	; 0x1ec
   b5de4:	9602      	str	r6, [sp, #8]
   b5de6:	48a8      	ldr	r0, [pc, #672]	; (b6088 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdb8>)
   b5de8:	f7ff f982 	bl	b50f0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5dec:	4630      	mov	r0, r6
   b5dee:	f7fe fca9 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b5df2:	a875      	add	r0, sp, #468	; 0x1d4
   b5df4:	f7fe fcc7 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5df8:	a89c      	add	r0, sp, #624	; 0x270
   b5dfa:	f005 f85b 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5dfe:	a896      	add	r0, sp, #600	; 0x258
   b5e00:	f005 f858 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5e04:	4650      	mov	r0, sl
   b5e06:	f005 f855 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5e0a:	a878      	add	r0, sp, #480	; 0x1e0
   b5e0c:	f7fe fc9a 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5e10:	a87b      	add	r0, sp, #492	; 0x1ec
   b5e12:	f7fe fc97 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5e16:	a87e      	add	r0, sp, #504	; 0x1f8
   b5e18:	f7fe fc80 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5e1c:	4b9b      	ldr	r3, [pc, #620]	; (b608c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdbc>)
   b5e1e:	9389      	str	r3, [sp, #548]	; 0x224
      lon = lo;
   b5e20:	4b9b      	ldr	r3, [pc, #620]	; (b6090 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdc0>)
   b5e22:	938a      	str	r3, [sp, #552]	; 0x228
};
   b5e24:	2202      	movs	r2, #2
      lat = la;
   b5e26:	4b9b      	ldr	r3, [pc, #620]	; (b6094 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdc4>)
   b5e28:	9221      	str	r2, [sp, #132]	; 0x84
   b5e2a:	938b      	str	r3, [sp, #556]	; 0x22c
   b5e2c:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
      lon = lo;
   b5e30:	4b99      	ldr	r3, [pc, #612]	; (b6098 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdc8>)
   b5e32:	938c      	str	r3, [sp, #560]	; 0x230
   b5e34:	aa20      	add	r2, sp, #128	; 0x80
   b5e36:	ca06      	ldmia	r2, {r1, r2}
   b5e38:	ab16      	add	r3, sp, #88	; 0x58
   b5e3a:	a87e      	add	r0, sp, #504	; 0x1f8
   b5e3c:	f7fe fcd8 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5e40:	aa96      	add	r2, sp, #600	; 0x258
   b5e42:	f1a7 0c10 	sub.w	ip, r7, #16
   b5e46:	9205      	str	r2, [sp, #20]
   b5e48:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5e4c:	9f05      	ldr	r7, [sp, #20]
   b5e4e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b5e50:	9a06      	ldr	r2, [sp, #24]
   b5e52:	9705      	str	r7, [sp, #20]
   b5e54:	e892 0003 	ldmia.w	r2, {r0, r1}
   b5e58:	aa96      	add	r2, sp, #600	; 0x258
   b5e5a:	921e      	str	r2, [sp, #120]	; 0x78
   b5e5c:	2206      	movs	r2, #6
   b5e5e:	921f      	str	r2, [sp, #124]	; 0x7c
   b5e60:	e9c7 0100 	strd	r0, r1, [r7]
   b5e64:	e898 0006 	ldmia.w	r8, {r1, r2}
   b5e68:	a87b      	add	r0, sp, #492	; 0x1ec
   b5e6a:	f7ff f8c1 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5e6e:	2232      	movs	r2, #50	; 0x32
   b5e70:	e9cd 2486 	strd	r2, r4, [sp, #536]	; 0x218
   b5e74:	aa85      	add	r2, sp, #532	; 0x214
   b5e76:	921c      	str	r2, [sp, #112]	; 0x70
   b5e78:	2204      	movs	r2, #4
   b5e7a:	ab1c      	add	r3, sp, #112	; 0x70
   b5e7c:	921d      	str	r2, [sp, #116]	; 0x74
   b5e7e:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5e82:	a878      	add	r0, sp, #480	; 0x1e0
   b5e84:	9485      	str	r4, [sp, #532]	; 0x214
   b5e86:	9488      	str	r4, [sp, #544]	; 0x220
   b5e88:	f7ff f8b2 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5e8c:	4628      	mov	r0, r5
   b5e8e:	4983      	ldr	r1, [pc, #524]	; (b609c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdcc>)
   b5e90:	f7fe f93a 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5e94:	4658      	mov	r0, fp
   b5e96:	4982      	ldr	r1, [pc, #520]	; (b60a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdd0>)
   b5e98:	f7fe f936 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5e9c:	a8a8      	add	r0, sp, #672	; 0x2a0
   b5e9e:	4981      	ldr	r1, [pc, #516]	; (b60a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdd4>)
   b5ea0:	f7fe f932 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5ea4:	2102      	movs	r1, #2
   b5ea6:	f10d 0850 	add.w	r8, sp, #80	; 0x50
   b5eaa:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
   b5eae:	911b      	str	r1, [sp, #108]	; 0x6c
   b5eb0:	aa1a      	add	r2, sp, #104	; 0x68
   b5eb2:	4643      	mov	r3, r8
   b5eb4:	ca06      	ldmia	r2, {r1, r2}
   b5eb6:	a875      	add	r0, sp, #468	; 0x1d4
   b5eb8:	f7fe fcce 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5ebc:	4621      	mov	r1, r4
   b5ebe:	2210      	movs	r2, #16
   b5ec0:	4648      	mov	r0, r9
   b5ec2:	f005 ffcf 	bl	bbe64 <memset>
   b5ec6:	2204      	movs	r2, #4
   b5ec8:	ab18      	add	r3, sp, #96	; 0x60
   b5eca:	f8cd 9060 	str.w	r9, [sp, #96]	; 0x60
   b5ece:	9219      	str	r2, [sp, #100]	; 0x64
   b5ed0:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5ed4:	4630      	mov	r0, r6
   b5ed6:	f7ff f88b 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway blueLineMBTA = Railway{
   b5eda:	aa75      	add	r2, sp, #468	; 0x1d4
   b5edc:	e9cd 5200 	strd	r5, r2, [sp]
   b5ee0:	aa78      	add	r2, sp, #480	; 0x1e0
   b5ee2:	4613      	mov	r3, r2
   b5ee4:	a97e      	add	r1, sp, #504	; 0x1f8
   b5ee6:	aa7b      	add	r2, sp, #492	; 0x1ec
   b5ee8:	9602      	str	r6, [sp, #8]
   b5eea:	486f      	ldr	r0, [pc, #444]	; (b60a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdd8>)
   b5eec:	f7ff f900 	bl	b50f0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5ef0:	4630      	mov	r0, r6
   b5ef2:	f7fe fc27 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b5ef6:	a875      	add	r0, sp, #468	; 0x1d4
   b5ef8:	f7fe fc45 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5efc:	a8a8      	add	r0, sp, #672	; 0x2a0
   b5efe:	f004 ffd9 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5f02:	4658      	mov	r0, fp
   b5f04:	f004 ffd6 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5f08:	4628      	mov	r0, r5
   b5f0a:	f004 ffd3 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5f0e:	a878      	add	r0, sp, #480	; 0x1e0
   b5f10:	f7fe fc18 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5f14:	a87b      	add	r0, sp, #492	; 0x1ec
   b5f16:	f7fe fc15 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5f1a:	a87e      	add	r0, sp, #504	; 0x1f8
   b5f1c:	f7fe fbfe 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
};
   b5f20:	4b62      	ldr	r3, [pc, #392]	; (b60ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xddc>)
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5f22:	9483      	str	r4, [sp, #524]	; 0x20c
   b5f24:	f503 7e84 	add.w	lr, r3, #264	; 0x108
   b5f28:	461f      	mov	r7, r3
   b5f2a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5f2e:	f50d 7c16 	add.w	ip, sp, #600	; 0x258
   b5f32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5f36:	9a06      	ldr	r2, [sp, #24]
   b5f38:	e892 0003 	ldmia.w	r2, {r0, r1}
   b5f3c:	9a05      	ldr	r2, [sp, #20]
   b5f3e:	e882 0003 	stmia.w	r2, {r0, r1}
   b5f42:	aa96      	add	r2, sp, #600	; 0x258
   b5f44:	6032      	str	r2, [r6, #0]
   b5f46:	2206      	movs	r2, #6
   b5f48:	6072      	str	r2, [r6, #4]
   b5f4a:	e896 0006 	ldmia.w	r6, {r1, r2}
   b5f4e:	a87e      	add	r0, sp, #504	; 0x1f8
   b5f50:	e9cd 4481 	strd	r4, r4, [sp, #516]	; 0x204
   b5f54:	f7ff f84c 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5f58:	2232      	movs	r2, #50	; 0x32
   b5f5a:	e9cd 248a 	strd	r2, r4, [sp, #552]	; 0x228
   b5f5e:	2204      	movs	r2, #4
   b5f60:	ab16      	add	r3, sp, #88	; 0x58
   b5f62:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
   b5f66:	9217      	str	r2, [sp, #92]	; 0x5c
   b5f68:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5f6c:	a87b      	add	r0, sp, #492	; 0x1ec
   b5f6e:	9489      	str	r4, [sp, #548]	; 0x224
   b5f70:	948c      	str	r4, [sp, #560]	; 0x230
   b5f72:	f7ff f83d 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5f76:	4628      	mov	r0, r5
   b5f78:	494d      	ldr	r1, [pc, #308]	; (b60b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xde0>)
   b5f7a:	f7fe f8c5 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5f7e:	4658      	mov	r0, fp
   b5f80:	494c      	ldr	r1, [pc, #304]	; (b60b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xde4>)
   b5f82:	f7fe f8c1 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5f86:	a8a8      	add	r0, sp, #672	; 0x2a0
   b5f88:	494b      	ldr	r1, [pc, #300]	; (b60b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xde8>)
   b5f8a:	f7fe f8bd 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5f8e:	2202      	movs	r2, #2
   b5f90:	ae10      	add	r6, sp, #64	; 0x40
   b5f92:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
   b5f96:	9215      	str	r2, [sp, #84]	; 0x54
   b5f98:	e898 0006 	ldmia.w	r8, {r1, r2}
   b5f9c:	4633      	mov	r3, r6
   b5f9e:	a878      	add	r0, sp, #480	; 0x1e0
   b5fa0:	f7fe fc5a 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5fa4:	4621      	mov	r1, r4
   b5fa6:	2210      	movs	r2, #16
   b5fa8:	a885      	add	r0, sp, #532	; 0x214
   b5faa:	f005 ff5b 	bl	bbe64 <memset>
   b5fae:	aa85      	add	r2, sp, #532	; 0x214
   b5fb0:	9212      	str	r2, [sp, #72]	; 0x48
   b5fb2:	2204      	movs	r2, #4
   b5fb4:	ab12      	add	r3, sp, #72	; 0x48
   b5fb6:	9213      	str	r2, [sp, #76]	; 0x4c
   b5fb8:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5fbc:	a875      	add	r0, sp, #468	; 0x1d4
   b5fbe:	f7ff f817 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway orangeLineMBTA = Railway{
   b5fc2:	aa75      	add	r2, sp, #468	; 0x1d4
   b5fc4:	9202      	str	r2, [sp, #8]
   b5fc6:	aa78      	add	r2, sp, #480	; 0x1e0
   b5fc8:	e9cd 5200 	strd	r5, r2, [sp]
   b5fcc:	aa7b      	add	r2, sp, #492	; 0x1ec
   b5fce:	4613      	mov	r3, r2
   b5fd0:	4649      	mov	r1, r9
   b5fd2:	aa7e      	add	r2, sp, #504	; 0x1f8
   b5fd4:	4839      	ldr	r0, [pc, #228]	; (b60bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdec>)
   b5fd6:	f7ff f88b 	bl	b50f0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
      }
   b5fda:	a875      	add	r0, sp, #468	; 0x1d4
   b5fdc:	f7fe fbb2 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b5fe0:	a878      	add	r0, sp, #480	; 0x1e0
   b5fe2:	f7fe fbd0 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5fe6:	a8a8      	add	r0, sp, #672	; 0x2a0
   b5fe8:	f004 ff64 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5fec:	4658      	mov	r0, fp
   b5fee:	f004 ff61 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5ff2:	4628      	mov	r0, r5
   b5ff4:	f004 ff5e 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5ff8:	a87b      	add	r0, sp, #492	; 0x1ec
   b5ffa:	f7fe fba3 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5ffe:	a87e      	add	r0, sp, #504	; 0x1f8
   b6000:	f7fe fba0 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b6004:	f507 7784 	add.w	r7, r7, #264	; 0x108
   b6008:	4648      	mov	r0, r9
   b600a:	f7fe fb87 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
   b600e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b6010:	f50d 7c16 	add.w	ip, sp, #600	; 0x258
   b6014:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6018:	9b06      	ldr	r3, [sp, #24]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b601a:	9483      	str	r4, [sp, #524]	; 0x20c
   b601c:	e893 0003 	ldmia.w	r3, {r0, r1}
   b6020:	9b05      	ldr	r3, [sp, #20]
   b6022:	4f27      	ldr	r7, [pc, #156]	; (b60c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdf0>)
   b6024:	e883 0003 	stmia.w	r3, {r0, r1}
   b6028:	ab96      	add	r3, sp, #600	; 0x258
   b602a:	9310      	str	r3, [sp, #64]	; 0x40
   b602c:	2306      	movs	r3, #6
   b602e:	9311      	str	r3, [sp, #68]	; 0x44
   b6030:	e896 0006 	ldmia.w	r6, {r1, r2}
   b6034:	a87e      	add	r0, sp, #504	; 0x1f8
   b6036:	e9cd 4481 	strd	r4, r4, [sp, #516]	; 0x204
   b603a:	f7fe ffd9 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b603e:	2332      	movs	r3, #50	; 0x32
   b6040:	2204      	movs	r2, #4
   b6042:	e9cd 348a 	strd	r3, r4, [sp, #552]	; 0x228
   b6046:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   b604a:	ab0e      	add	r3, sp, #56	; 0x38
   b604c:	920f      	str	r2, [sp, #60]	; 0x3c
   b604e:	e893 0006 	ldmia.w	r3, {r1, r2}
   b6052:	a87b      	add	r0, sp, #492	; 0x1ec
   b6054:	9489      	str	r4, [sp, #548]	; 0x224
   b6056:	948c      	str	r4, [sp, #560]	; 0x230
   b6058:	f7fe ffca 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b605c:	4628      	mov	r0, r5
   b605e:	4919      	ldr	r1, [pc, #100]	; (b60c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdf4>)
   b6060:	4e19      	ldr	r6, [pc, #100]	; (b60c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdf8>)
   b6062:	f7fe f851 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6066:	4658      	mov	r0, fp
   b6068:	4918      	ldr	r1, [pc, #96]	; (b60cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdfc>)
   b606a:	f7fe f84d 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b606e:	a8a8      	add	r0, sp, #672	; 0x2a0
   b6070:	4917      	ldr	r1, [pc, #92]	; (b60d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xe00>)
   b6072:	f7fe f849 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6076:	2302      	movs	r3, #2
   b6078:	e02c      	b.n	b60d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xe04>
   b607a:	bf00      	nop
   b607c:	000be102 	.word	0x000be102
   b6080:	000be106 	.word	0x000be106
   b6084:	000be10d 	.word	0x000be10d
   b6088:	2003e5c8 	.word	0x2003e5c8
   b608c:	422984ab 	.word	0x422984ab
   b6090:	c28e0bc2 	.word	0xc28e0bc2
   b6094:	4229709e 	.word	0x4229709e
   b6098:	c28e186e 	.word	0xc28e186e
   b609c:	000be114 	.word	0x000be114
   b60a0:	000be119 	.word	0x000be119
   b60a4:	000be120 	.word	0x000be120
   b60a8:	200353e4 	.word	0x200353e4
   b60ac:	000be270 	.word	0x000be270
   b60b0:	000be14f 	.word	0x000be14f
   b60b4:	000be156 	.word	0x000be156
   b60b8:	000be15d 	.word	0x000be15d
   b60bc:	20037e4c 	.word	0x20037e4c
   b60c0:	2003532c 	.word	0x2003532c
   b60c4:	000be13b 	.word	0x000be13b
   b60c8:	20035354 	.word	0x20035354
   b60cc:	000be141 	.word	0x000be141
   b60d0:	000be148 	.word	0x000be148
   b60d4:	930d      	str	r3, [sp, #52]	; 0x34
   b60d6:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   b60da:	aa0c      	add	r2, sp, #48	; 0x30
   b60dc:	ab09      	add	r3, sp, #36	; 0x24
   b60de:	ca06      	ldmia	r2, {r1, r2}
   b60e0:	a878      	add	r0, sp, #480	; 0x1e0
   b60e2:	f7fe fbb9 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b60e6:	4621      	mov	r1, r4
   b60e8:	2210      	movs	r2, #16
   b60ea:	a885      	add	r0, sp, #532	; 0x214
   b60ec:	f005 feba 	bl	bbe64 <memset>
   b60f0:	aa85      	add	r2, sp, #532	; 0x214
   b60f2:	920a      	str	r2, [sp, #40]	; 0x28
   b60f4:	2204      	movs	r2, #4
   b60f6:	ab0a      	add	r3, sp, #40	; 0x28
   b60f8:	920b      	str	r2, [sp, #44]	; 0x2c
   b60fa:	e893 0006 	ldmia.w	r3, {r1, r2}
   b60fe:	a875      	add	r0, sp, #468	; 0x1d4
   b6100:	f7fe ff76 	bl	b4ff0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway greenLineMBTA = Railway{
   b6104:	ab75      	add	r3, sp, #468	; 0x1d4
   b6106:	9302      	str	r3, [sp, #8]
   b6108:	ab78      	add	r3, sp, #480	; 0x1e0
   b610a:	aa7e      	add	r2, sp, #504	; 0x1f8
   b610c:	4649      	mov	r1, r9
   b610e:	e9cd 5300 	strd	r5, r3, [sp]
   b6112:	48a4      	ldr	r0, [pc, #656]	; (b63a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10d4>)
   b6114:	ab7b      	add	r3, sp, #492	; 0x1ec
   b6116:	f7fe ffeb 	bl	b50f0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
      }
   b611a:	a875      	add	r0, sp, #468	; 0x1d4
   b611c:	f7fe fb12 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b6120:	a878      	add	r0, sp, #480	; 0x1e0
   b6122:	f7fe fb30 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b6126:	a8a8      	add	r0, sp, #672	; 0x2a0
   b6128:	f004 fec4 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b612c:	4658      	mov	r0, fp
   b612e:	f004 fec1 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6132:	4628      	mov	r0, r5
   b6134:	f004 febe 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6138:	a87b      	add	r0, sp, #492	; 0x1ec
   b613a:	f7fe fb03 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b613e:	a87e      	add	r0, sp, #504	; 0x1f8
   b6140:	f7fe fb00 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b6144:	4648      	mov	r0, r9
   b6146:	f7fe fae9 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b614a:	4b97      	ldr	r3, [pc, #604]	; (b63a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10d8>)
const BleUuid serviceUuid("123A");
   b614c:	4997      	ldr	r1, [pc, #604]	; (b63ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10dc>)
   b614e:	609c      	str	r4, [r3, #8]
   b6150:	e9c3 4400 	strd	r4, r4, [r3]
   b6154:	4b96      	ldr	r3, [pc, #600]	; (b63b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10e0>)
   b6156:	4897      	ldr	r0, [pc, #604]	; (b63b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10e4>)
   b6158:	609c      	str	r4, [r3, #8]
   b615a:	e9c3 4400 	strd	r4, r4, [r3]
   b615e:	4b96      	ldr	r3, [pc, #600]	; (b63b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10e8>)
   b6160:	e9c3 4400 	strd	r4, r4, [r3]
   b6164:	609c      	str	r4, [r3, #8]
   b6166:	4b95      	ldr	r3, [pc, #596]	; (b63bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10ec>)
   b6168:	e9c3 4400 	strd	r4, r4, [r3]
   b616c:	609c      	str	r4, [r3, #8]
   b616e:	4b94      	ldr	r3, [pc, #592]	; (b63c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f0>)
   b6170:	e9c3 4400 	strd	r4, r4, [r3]
   b6174:	609c      	str	r4, [r3, #8]
   b6176:	f002 fd43 	bl	b8c00 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("123B");
   b617a:	4992      	ldr	r1, [pc, #584]	; (b63c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f4>)
   b617c:	4892      	ldr	r0, [pc, #584]	; (b63c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f8>)
   b617e:	f002 fd3f 	bl	b8c00 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("123C");
   b6182:	4992      	ldr	r1, [pc, #584]	; (b63cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10fc>)
   b6184:	4892      	ldr	r0, [pc, #584]	; (b63d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1100>)
   b6186:	f002 fd3b 	bl	b8c00 <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b618a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b618c:	46d1      	mov	r9, sl
   b618e:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
   b6192:	6833      	ldr	r3, [r6, #0]
   b6194:	f8c9 3000 	str.w	r3, [r9]
   b6198:	9306      	str	r3, [sp, #24]
   b619a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b619c:	46b8      	mov	r8, r7
   b619e:	462e      	mov	r6, r5
   b61a0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b61a2:	f858 3910 	ldr.w	r3, [r8], #-16
   b61a6:	9307      	str	r3, [sp, #28]
   b61a8:	9b04      	ldr	r3, [sp, #16]
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b61aa:	f8df e26c 	ldr.w	lr, [pc, #620]	; b6418 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1148>
   b61ae:	461a      	mov	r2, r3
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b61b0:	46d4      	mov	ip, sl
   b61b2:	9b07      	ldr	r3, [sp, #28]
   b61b4:	6013      	str	r3, [r2, #0]
   b61b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b61ba:	ae96      	add	r6, sp, #600	; 0x258
      constexpr __shared_count() noexcept : _M_pi(0)
   b61bc:	e9ce 4400 	strd	r4, r4, [lr]
   b61c0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b61c2:	9b05      	ldr	r3, [sp, #20]
   b61c4:	461a      	mov	r2, r3
        BleUuid sUuid(svcUuid);
   b61c6:	46ac      	mov	ip, r5
        BleUuid cUuid(charUuid);
   b61c8:	9b06      	ldr	r3, [sp, #24]
   b61ca:	6013      	str	r3, [r2, #0]
        BleUuid sUuid(svcUuid);
   b61cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b61d0:	465e      	mov	r6, fp
   b61d2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b61d4:	9b07      	ldr	r3, [sp, #28]
   b61d6:	6033      	str	r3, [r6, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b61d8:	4670      	mov	r0, lr
   b61da:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b61de:	ab96      	add	r3, sp, #600	; 0x258
   b61e0:	497c      	ldr	r1, [pc, #496]	; (b63d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1104>)
   b61e2:	f8cd b000 	str.w	fp, [sp]
   b61e6:	f04f 0210 	mov.w	r2, #16
   b61ea:	f003 fa73 	bl	b96d4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b61ee:	f8df c1d8 	ldr.w	ip, [pc, #472]	; b63c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f8>
   b61f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b61f6:	46d6      	mov	lr, sl
   b61f8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b61fc:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   b6200:	46ae      	mov	lr, r5
   b6202:	f8dc c000 	ldr.w	ip, [ip]
   b6206:	f8c9 c000 	str.w	ip, [r9]
   b620a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b620e:	9b04      	ldr	r3, [sp, #16]
   b6210:	f8d7 8000 	ldr.w	r8, [r7]
   b6214:	f8c3 8000 	str.w	r8, [r3]
        BleUuid cUuid(charUuid);
   b6218:	46d1      	mov	r9, sl
   b621a:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   b621e:	af96      	add	r7, sp, #600	; 0x258
      : _M_ptr(0), _M_refcount()
   b6220:	f8df e1f0 	ldr.w	lr, [pc, #496]	; b6414 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1144>
   b6224:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b6226:	9b05      	ldr	r3, [sp, #20]
      constexpr __shared_count() noexcept : _M_pi(0)
   b6228:	e9ce 4400 	strd	r4, r4, [lr]
   b622c:	f8c3 c000 	str.w	ip, [r3]
        BleUuid sUuid(svcUuid);
   b6230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6232:	465f      	mov	r7, fp
   b6234:	c70f      	stmia	r7!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b6236:	4b68      	ldr	r3, [pc, #416]	; (b63d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1108>)
        BleUuid sUuid(svcUuid);
   b6238:	f8c6 8000 	str.w	r8, [r6]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b623c:	4670      	mov	r0, lr
   b623e:	f04f 0204 	mov.w	r2, #4
   b6242:	e9cd b300 	strd	fp, r3, [sp]
   b6246:	9402      	str	r4, [sp, #8]
   b6248:	ab96      	add	r3, sp, #600	; 0x258
   b624a:	4964      	ldr	r1, [pc, #400]	; (b63dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x110c>)
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b624c:	4c64      	ldr	r4, [pc, #400]	; (b63e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1110>)
   b624e:	f003 fa41 	bl	b96d4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
   b6252:	4964      	ldr	r1, [pc, #400]	; (b63e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1114>)
   b6254:	4864      	ldr	r0, [pc, #400]	; (b63e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1118>)
   b6256:	f003 ff60 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
   b625a:	4864      	ldr	r0, [pc, #400]	; (b63ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x111c>)
   b625c:	f003 fd6a 	bl	b9d34 <_ZN9IPAddressC1Ev>
   b6260:	4960      	ldr	r1, [pc, #384]	; (b63e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1114>)
   b6262:	4863      	ldr	r0, [pc, #396]	; (b63f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1120>)
   b6264:	f003 ff59 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
   b6268:	495e      	ldr	r1, [pc, #376]	; (b63e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1114>)
   b626a:	4862      	ldr	r0, [pc, #392]	; (b63f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1124>)
   b626c:	f003 ff55 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   b6270:	495c      	ldr	r1, [pc, #368]	; (b63e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1114>)
   b6272:	4861      	ldr	r0, [pc, #388]	; (b63f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1128>)
   b6274:	f003 ff51 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
HttpClient http;
   b6278:	4860      	ldr	r0, [pc, #384]	; (b63fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x112c>)
   b627a:	f001 f9db 	bl	b7634 <_ZN10HttpClientC1Ev>
   b627e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6282:	9300      	str	r3, [sp, #0]
   b6284:	f242 7210 	movw	r2, #10000	; 0x2710
   b6288:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b628c:	4b5c      	ldr	r3, [pc, #368]	; (b6400 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1130>)
   b628e:	4620      	mov	r0, r4
   b6290:	f001 fba8 	bl	b79e4 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b6294:	4b5b      	ldr	r3, [pc, #364]	; (b6404 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1134>)
String SSID = "";
   b6296:	4953      	ldr	r1, [pc, #332]	; (b63e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1114>)
   b6298:	6023      	str	r3, [r4, #0]
   b629a:	485b      	ldr	r0, [pc, #364]	; (b6408 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1138>)
   b629c:	f003 ff3d 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
String password = "";
   b62a0:	4950      	ldr	r1, [pc, #320]	; (b63e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1114>)
   b62a2:	485a      	ldr	r0, [pc, #360]	; (b640c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x113c>)
   b62a4:	f50d 7d33 	add.w	sp, sp, #716	; 0x2cc
   b62a8:	ecbd 8b0e 	vpop	{d8-d14}
   b62ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
String password = "";
   b62b0:	f003 bf33 	b.w	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
   b62b4:	4855      	ldr	r0, [pc, #340]	; (b640c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x113c>)
   b62b6:	f003 fee5 	bl	ba084 <_ZN6StringD1Ev>
String SSID = "";
   b62ba:	4853      	ldr	r0, [pc, #332]	; (b6408 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1138>)
   b62bc:	f003 fee2 	bl	ba084 <_ZN6StringD1Ev>
JsonParserStatic<10000, 1000> parser;
   b62c0:	4847      	ldr	r0, [pc, #284]	; (b63e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1110>)
   b62c2:	f7fd fef9 	bl	b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b62c6:	4b4d      	ldr	r3, [pc, #308]	; (b63fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x112c>)
   b62c8:	4a51      	ldr	r2, [pc, #324]	; (b6410 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1140>)
	if (_M_pi != nullptr)
   b62ca:	699c      	ldr	r4, [r3, #24]
   b62cc:	601a      	str	r2, [r3, #0]
   b62ce:	b17c      	cbz	r4, b62f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1020>
      if (--_M_use_count == 0)
   b62d0:	6863      	ldr	r3, [r4, #4]
   b62d2:	3b01      	subs	r3, #1
   b62d4:	6063      	str	r3, [r4, #4]
   b62d6:	b95b      	cbnz	r3, b62f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1020>
          _M_dispose();
   b62d8:	6823      	ldr	r3, [r4, #0]
   b62da:	4620      	mov	r0, r4
   b62dc:	689b      	ldr	r3, [r3, #8]
   b62de:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b62e0:	68a3      	ldr	r3, [r4, #8]
   b62e2:	3b01      	subs	r3, #1
   b62e4:	60a3      	str	r3, [r4, #8]
   b62e6:	b91b      	cbnz	r3, b62f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1020>
            _M_destroy();
   b62e8:	6823      	ldr	r3, [r4, #0]
   b62ea:	4620      	mov	r0, r4
   b62ec:	68db      	ldr	r3, [r3, #12]
   b62ee:	4798      	blx	r3
   b62f0:	4841      	ldr	r0, [pc, #260]	; (b63f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1128>)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b62f2:	4c2d      	ldr	r4, [pc, #180]	; (b63a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10d8>)
   b62f4:	f003 fec6 	bl	ba084 <_ZN6StringD1Ev>
} http_request_t;
   b62f8:	483e      	ldr	r0, [pc, #248]	; (b63f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1124>)
   b62fa:	f003 fec3 	bl	ba084 <_ZN6StringD1Ev>
   b62fe:	483c      	ldr	r0, [pc, #240]	; (b63f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1120>)
   b6300:	f003 fec0 	bl	ba084 <_ZN6StringD1Ev>
   b6304:	4838      	ldr	r0, [pc, #224]	; (b63e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1118>)
   b6306:	f003 febd 	bl	ba084 <_ZN6StringD1Ev>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   b630a:	4842      	ldr	r0, [pc, #264]	; (b6414 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1144>)
   b630c:	f002 fec9 	bl	b90a2 <_ZN8particle17BleCharacteristicD1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   b6310:	4841      	ldr	r0, [pc, #260]	; (b6418 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1148>)
   b6312:	f002 fec6 	bl	b90a2 <_ZN8particle17BleCharacteristicD1Ev>
      }
   b6316:	482a      	ldr	r0, [pc, #168]	; (b63c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f0>)
   b6318:	f7fe fa14 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b631c:	4827      	ldr	r0, [pc, #156]	; (b63bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10ec>)
   b631e:	f7fe fa11 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
std::vector<Railway> ctaRailways, mbtaRailways;
   b6322:	4825      	ldr	r0, [pc, #148]	; (b63b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10e8>)
   b6324:	f7fe fe1f 	bl	b4f66 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b6328:	4821      	ldr	r0, [pc, #132]	; (b63b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10e0>)
   b632a:	f7fe fe1c 	bl	b4f66 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
	__destroy(__first, __last);
   b632e:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6332:	f7fe fe26 	bl	b4f82 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
   b6336:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b6338:	b118      	cbz	r0, b6342 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1072>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b633a:	68a1      	ldr	r1, [r4, #8]
   b633c:	1a09      	subs	r1, r1, r0
   b633e:	f7fd feb0 	bl	b40a2 <_ZdlPvj>
Railway greenLineMBTA = Railway{
   b6342:	4818      	ldr	r0, [pc, #96]	; (b63a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10d4>)
   b6344:	f7fe fde4 	bl	b4f10 <_ZN7RailwayD1Ev>
Railway orangeLineMBTA = Railway{
   b6348:	4834      	ldr	r0, [pc, #208]	; (b641c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x114c>)
   b634a:	f7fe fde1 	bl	b4f10 <_ZN7RailwayD1Ev>
Railway blueLineMBTA = Railway{
   b634e:	4834      	ldr	r0, [pc, #208]	; (b6420 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1150>)
   b6350:	f7fe fdde 	bl	b4f10 <_ZN7RailwayD1Ev>
Railway redLineMBTA = Railway{
   b6354:	4833      	ldr	r0, [pc, #204]	; (b6424 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1154>)
   b6356:	f7fe fddb 	bl	b4f10 <_ZN7RailwayD1Ev>
Railway pinkLineCTA = Railway(
   b635a:	4833      	ldr	r0, [pc, #204]	; (b6428 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1158>)
   b635c:	f7fe fdd8 	bl	b4f10 <_ZN7RailwayD1Ev>
Railway purpleLineCTA = Railway(
   b6360:	4832      	ldr	r0, [pc, #200]	; (b642c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x115c>)
   b6362:	f7fe fdd5 	bl	b4f10 <_ZN7RailwayD1Ev>
Railway orangeLineCTA = Railway(
   b6366:	4832      	ldr	r0, [pc, #200]	; (b6430 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1160>)
   b6368:	f7fe fdd2 	bl	b4f10 <_ZN7RailwayD1Ev>
Railway greenLineCTA = Railway(
   b636c:	4831      	ldr	r0, [pc, #196]	; (b6434 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1164>)
   b636e:	f7fe fdcf 	bl	b4f10 <_ZN7RailwayD1Ev>
Railway brownLineCTA = Railway(
   b6372:	4831      	ldr	r0, [pc, #196]	; (b6438 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1168>)
   b6374:	f7fe fdcc 	bl	b4f10 <_ZN7RailwayD1Ev>
Railway blueLineCTA = Railway(
   b6378:	4830      	ldr	r0, [pc, #192]	; (b643c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x116c>)
   b637a:	f7fe fdc9 	bl	b4f10 <_ZN7RailwayD1Ev>
Railway redLineCTA = Railway(
   b637e:	4830      	ldr	r0, [pc, #192]	; (b6440 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1170>)
   b6380:	f7fe fdc6 	bl	b4f10 <_ZN7RailwayD1Ev>
        if (wakeupSource_) {
   b6384:	6828      	ldr	r0, [r5, #0]
   b6386:	b138      	cbz	r0, b6398 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10c8>
   b6388:	f50d 7d33 	add.w	sp, sp, #716	; 0x2cc
   b638c:	ecbd 8b0e 	vpop	{d8-d14}
   b6390:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            free(wakeupSource_);
   b6394:	f002 b9e0 	b.w	b8758 <free>
   b6398:	f50d 7d33 	add.w	sp, sp, #716	; 0x2cc
   b639c:	ecbd 8b0e 	vpop	{d8-d14}
   b63a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b63a4:	2003554c 	.word	0x2003554c
   b63a8:	200354c0 	.word	0x200354c0
   b63ac:	000be18c 	.word	0x000be18c
   b63b0:	200354cc 	.word	0x200354cc
   b63b4:	2003532c 	.word	0x2003532c
   b63b8:	20037dd4 	.word	0x20037dd4
   b63bc:	20035368 	.word	0x20035368
   b63c0:	2003e69c 	.word	0x2003e69c
   b63c4:	000be191 	.word	0x000be191
   b63c8:	20035340 	.word	0x20035340
   b63cc:	000be196 	.word	0x000be196
   b63d0:	20035354 	.word	0x20035354
   b63d4:	000be19b 	.word	0x000be19b
   b63d8:	000b492d 	.word	0x000b492d
   b63dc:	000be19e 	.word	0x000be19e
   b63e0:	20037eb8 	.word	0x20037eb8
   b63e4:	000be3ca 	.word	0x000be3ca
   b63e8:	2003e634 	.word	0x2003e634
   b63ec:	2003e644 	.word	0x2003e644
   b63f0:	2003e65c 	.word	0x2003e65c
   b63f4:	2003e670 	.word	0x2003e670
   b63f8:	2003e684 	.word	0x2003e684
   b63fc:	200355b8 	.word	0x200355b8
   b6400:	2003a5f4 	.word	0x2003a5f4
   b6404:	000be25c 	.word	0x000be25c
   b6408:	20035310 	.word	0x20035310
   b640c:	2003e474 	.word	0x2003e474
   b6410:	000be6d4 	.word	0x000be6d4
   b6414:	2003e694 	.word	0x2003e694
   b6418:	2003e6ac 	.word	0x2003e6ac
   b641c:	20037e4c 	.word	0x20037e4c
   b6420:	200353e4 	.word	0x200353e4
   b6424:	2003e5c8 	.word	0x2003e5c8
   b6428:	2003e484 	.word	0x2003e484
   b642c:	2003e4f0 	.word	0x2003e4f0
   b6430:	20037de0 	.word	0x20037de0
   b6434:	200354d8 	.word	0x200354d8
   b6438:	20035450 	.word	0x20035450
   b643c:	20035378 	.word	0x20035378
   b6440:	2003e55c 	.word	0x2003e55c

000b6444 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b6444:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b6446:	b510      	push	{r4, lr}
   b6448:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b644a:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b644e:	d005      	beq.n	b645c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b6450:	4601      	mov	r1, r0
   b6452:	4622      	mov	r2, r4
   b6454:	4618      	mov	r0, r3
   b6456:	f005 fceb 	bl	bbe30 <memmove>
   b645a:	4603      	mov	r3, r0
	}
   b645c:	1918      	adds	r0, r3, r4
   b645e:	bd10      	pop	{r4, pc}

000b6460 <_ZN7RailwayC1ERKS_>:
class Railway{
   b6460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6464:	460d      	mov	r5, r1
   b6466:	4604      	mov	r4, r0
   b6468:	f7fe fa2a 	bl	b48c0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b646c:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6470:	2600      	movs	r6, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6472:	1ac9      	subs	r1, r1, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6474:	e9c4 6603 	strd	r6, r6, [r4, #12]
   b6478:	6166      	str	r6, [r4, #20]
      { _M_create_storage(__n); }
   b647a:	1089      	asrs	r1, r1, #2
   b647c:	f104 000c 	add.w	r0, r4, #12
   b6480:	f7fe fd26 	bl	b4ed0 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
			      _Category>::__copy_m(__first, __last, __result);
   b6484:	68e2      	ldr	r2, [r4, #12]
   b6486:	e9d5 0103 	ldrd	r0, r1, [r5, #12]
   b648a:	f7ff ffdb 	bl	b6444 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b648e:	f105 0118 	add.w	r1, r5, #24
	this->_M_impl._M_finish =
   b6492:	6120      	str	r0, [r4, #16]
   b6494:	f104 0018 	add.w	r0, r4, #24
   b6498:	f7fe fd90 	bl	b4fbc <_ZNSt6vectorIiSaIiEEC1ERKS1_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b649c:	e9d5 3709 	ldrd	r3, r7, [r5, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b64a0:	4826      	ldr	r0, [pc, #152]	; (b653c <_ZN7RailwayC1ERKS_+0xdc>)
	: _M_start(), _M_finish(), _M_end_of_storage()
   b64a2:	62e6      	str	r6, [r4, #44]	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b64a4:	1aff      	subs	r7, r7, r3
   b64a6:	10bb      	asrs	r3, r7, #2
	: _M_start(), _M_finish(), _M_end_of_storage()
   b64a8:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b64ac:	4358      	muls	r0, r3
   b64ae:	f7fd fe19 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b64b2:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b64b6:	4407      	add	r7, r0
   b64b8:	62e7      	str	r7, [r4, #44]	; 0x2c
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b64ba:	e9d5 7809 	ldrd	r7, r8, [r5, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b64be:	4606      	mov	r6, r0
   b64c0:	45b8      	cmp	r8, r7
   b64c2:	d007      	beq.n	b64d4 <_ZN7RailwayC1ERKS_+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b64c4:	b11e      	cbz	r6, b64ce <_ZN7RailwayC1ERKS_+0x6e>
   b64c6:	4639      	mov	r1, r7
   b64c8:	4630      	mov	r0, r6
   b64ca:	f7fe fd77 	bl	b4fbc <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b64ce:	360c      	adds	r6, #12
   b64d0:	370c      	adds	r7, #12
   b64d2:	e7f5      	b.n	b64c0 <_ZN7RailwayC1ERKS_+0x60>
	this->_M_impl._M_finish =
   b64d4:	62a6      	str	r6, [r4, #40]	; 0x28
   b64d6:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b64da:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b64de:	f7fd fe79 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b64e2:	e9d5 3712 	ldrd	r3, r7, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b64e6:	4815      	ldr	r0, [pc, #84]	; (b653c <_ZN7RailwayC1ERKS_+0xdc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b64e8:	1aff      	subs	r7, r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b64ea:	2300      	movs	r3, #0
   b64ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   b64f0:	6523      	str	r3, [r4, #80]	; 0x50
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b64f2:	10fb      	asrs	r3, r7, #3
	this->_M_impl._M_start = this->_M_allocate(__n);
   b64f4:	4358      	muls	r0, r3
   b64f6:	f7fd fe41 	bl	b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b64fa:	e9c4 0012 	strd	r0, r0, [r4, #72]	; 0x48
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b64fe:	4407      	add	r7, r0
   b6500:	6527      	str	r7, [r4, #80]	; 0x50
   b6502:	e9d5 7812 	ldrd	r7, r8, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b6506:	4606      	mov	r6, r0
   b6508:	45b8      	cmp	r8, r7
   b650a:	d007      	beq.n	b651c <_ZN7RailwayC1ERKS_+0xbc>
   b650c:	b11e      	cbz	r6, b6516 <_ZN7RailwayC1ERKS_+0xb6>
   b650e:	4639      	mov	r1, r7
   b6510:	4630      	mov	r0, r6
   b6512:	f7fd fe5f 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b6516:	3618      	adds	r6, #24
   b6518:	3718      	adds	r7, #24
   b651a:	e7f5      	b.n	b6508 <_ZN7RailwayC1ERKS_+0xa8>
	this->_M_impl._M_finish =
   b651c:	64e6      	str	r6, [r4, #76]	; 0x4c
   b651e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b6520:	6563      	str	r3, [r4, #84]	; 0x54
   b6522:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b6524:	65a3      	str	r3, [r4, #88]	; 0x58
   b6526:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b6528:	65e3      	str	r3, [r4, #92]	; 0x5c
   b652a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b652c:	6623      	str	r3, [r4, #96]	; 0x60
   b652e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   b6530:	6663      	str	r3, [r4, #100]	; 0x64
   b6532:	6eab      	ldr	r3, [r5, #104]	; 0x68
   b6534:	66a3      	str	r3, [r4, #104]	; 0x68
   b6536:	4620      	mov	r0, r4
   b6538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b653c:	aaaaaaab 	.word	0xaaaaaaab

000b6540 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   b6540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6542:	e9d1 3700 	ldrd	r3, r7, [r1]
   b6546:	1aff      	subs	r7, r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6548:	2300      	movs	r3, #0
   b654a:	e9c0 3300 	strd	r3, r3, [r0]
      vector(const vector& __x)
   b654e:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6550:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b6552:	480d      	ldr	r0, [pc, #52]	; (b6588 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x48>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6554:	10bb      	asrs	r3, r7, #2
	this->_M_impl._M_start = this->_M_allocate(__n);
   b6556:	4358      	muls	r0, r3
      vector(const vector& __x)
   b6558:	460e      	mov	r6, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b655a:	f7fd fdfd 	bl	b4158 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b655e:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b6562:	4407      	add	r7, r0
   b6564:	60a7      	str	r7, [r4, #8]
   b6566:	e9d6 6700 	ldrd	r6, r7, [r6]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b656a:	4605      	mov	r5, r0
   b656c:	42b7      	cmp	r7, r6
   b656e:	d007      	beq.n	b6580 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x40>
   b6570:	b11d      	cbz	r5, b657a <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x3a>
   b6572:	4631      	mov	r1, r6
   b6574:	4628      	mov	r0, r5
   b6576:	f7ff ff73 	bl	b6460 <_ZN7RailwayC1ERKS_>
   b657a:	356c      	adds	r5, #108	; 0x6c
   b657c:	366c      	adds	r6, #108	; 0x6c
   b657e:	e7f5      	b.n	b656c <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x2c>
	this->_M_impl._M_finish =
   b6580:	6065      	str	r5, [r4, #4]
      }
   b6582:	4620      	mov	r0, r4
   b6584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6586:	bf00      	nop
   b6588:	684bda13 	.word	0x684bda13

000b658c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   b658c:	b570      	push	{r4, r5, r6, lr}
   b658e:	4605      	mov	r5, r0
   b6590:	460e      	mov	r6, r1
   b6592:	4614      	mov	r4, r2
	      for (; __first != __last; ++__first, (void)++__cur)
   b6594:	42b5      	cmp	r5, r6
   b6596:	d00f      	beq.n	b65b8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_+0x2c>
   b6598:	b15c      	cbz	r4, b65b2 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_+0x26>
   b659a:	4629      	mov	r1, r5
   b659c:	4620      	mov	r0, r4
   b659e:	f7ff ffcf 	bl	b6540 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>
   b65a2:	f105 010c 	add.w	r1, r5, #12
   b65a6:	f104 000c 	add.w	r0, r4, #12
   b65aa:	f7fd fe13 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b65ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b65b0:	6263      	str	r3, [r4, #36]	; 0x24
   b65b2:	3528      	adds	r5, #40	; 0x28
   b65b4:	3428      	adds	r4, #40	; 0x28
   b65b6:	e7ed      	b.n	b6594 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_+0x8>
	}
   b65b8:	4620      	mov	r0, r4
   b65ba:	bd70      	pop	{r4, r5, r6, pc}

000b65bc <_ZN7RailwayaSERKS_.isra.0>:
   b65bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b65c0:	4604      	mov	r4, r0
   b65c2:	460d      	mov	r5, r1
   b65c4:	f7fd fe42 	bl	b424c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
   b65c8:	f105 020c 	add.w	r2, r5, #12
   b65cc:	f104 030c 	add.w	r3, r4, #12
      if (&__x != this)
   b65d0:	429a      	cmp	r2, r3
   b65d2:	d025      	beq.n	b6620 <_ZN7RailwayaSERKS_.isra.0+0x64>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b65d4:	e9d5 8103 	ldrd	r8, r1, [r5, #12]
			 - this->_M_impl._M_start); }
   b65d8:	68e2      	ldr	r2, [r4, #12]
   b65da:	6963      	ldr	r3, [r4, #20]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b65dc:	eba1 0608 	sub.w	r6, r1, r8
			 - this->_M_impl._M_start); }
   b65e0:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b65e2:	429e      	cmp	r6, r3
   b65e4:	d94a      	bls.n	b667c <_ZN7RailwayaSERKS_.isra.0+0xc0>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b65e6:	2e00      	cmp	r6, #0
   b65e8:	d046      	beq.n	b6678 <_ZN7RailwayaSERKS_.isra.0+0xbc>
	if (__n > this->_M_max_size())
   b65ea:	4b5d      	ldr	r3, [pc, #372]	; (b6760 <_ZN7RailwayaSERKS_.isra.0+0x1a4>)
   b65ec:	429e      	cmp	r6, r3
   b65ee:	d901      	bls.n	b65f4 <_ZN7RailwayaSERKS_.isra.0+0x38>
	  std::__throw_bad_alloc();
   b65f0:	f004 fc28 	bl	bae44 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b65f4:	4630      	mov	r0, r6
   b65f6:	9101      	str	r1, [sp, #4]
   b65f8:	f7fd fd4d 	bl	b4096 <_Znwj>
   b65fc:	9901      	ldr	r1, [sp, #4]
   b65fe:	4607      	mov	r7, r0
   b6600:	463a      	mov	r2, r7
   b6602:	4640      	mov	r0, r8
   b6604:	f7ff ff1e 	bl	b6444 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b6608:	68e0      	ldr	r0, [r4, #12]
	if (__p)
   b660a:	b118      	cbz	r0, b6614 <_ZN7RailwayaSERKS_.isra.0+0x58>
			    - this->_M_impl._M_start);
   b660c:	6961      	ldr	r1, [r4, #20]
	::operator delete(__p
   b660e:	1a09      	subs	r1, r1, r0
   b6610:	f7fd fd47 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b6614:	60e7      	str	r7, [r4, #12]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b6616:	4437      	add	r7, r6
   b6618:	6167      	str	r7, [r4, #20]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b661a:	68e3      	ldr	r3, [r4, #12]
   b661c:	4433      	add	r3, r6
   b661e:	6123      	str	r3, [r4, #16]
   b6620:	f105 0118 	add.w	r1, r5, #24
   b6624:	f104 0018 	add.w	r0, r4, #24
   b6628:	f7fe fd0c 	bl	b5044 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
   b662c:	f105 0324 	add.w	r3, r5, #36	; 0x24
   b6630:	f104 0224 	add.w	r2, r4, #36	; 0x24
      if (&__x != this)
   b6634:	4293      	cmp	r3, r2
   b6636:	d045      	beq.n	b66c4 <_ZN7RailwayaSERKS_.isra.0+0x108>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6638:	e9d5 6a09 	ldrd	r6, sl, [r5, #36]	; 0x24
			 - this->_M_impl._M_start); }
   b663c:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
   b6640:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6642:	ebaa 0806 	sub.w	r8, sl, r6
			 - this->_M_impl._M_start); }
   b6646:	eba3 0309 	sub.w	r3, r3, r9
	  if (__xlen > capacity())
   b664a:	4543      	cmp	r3, r8
   b664c:	d255      	bcs.n	b66fa <_ZN7RailwayaSERKS_.isra.0+0x13e>
	  pointer __result = this->_M_allocate(__n);
   b664e:	4845      	ldr	r0, [pc, #276]	; (b6764 <_ZN7RailwayaSERKS_.isra.0+0x1a8>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6650:	ea4f 03a8 	mov.w	r3, r8, asr #2
	  pointer __result = this->_M_allocate(__n);
   b6654:	4358      	muls	r0, r3
   b6656:	f7fd fd45 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
   b665a:	4607      	mov	r7, r0
	  _ForwardIterator __cur = __result;
   b665c:	4681      	mov	r9, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b665e:	45b2      	cmp	sl, r6
   b6660:	d020      	beq.n	b66a4 <_ZN7RailwayaSERKS_.isra.0+0xe8>
   b6662:	f1b9 0f00 	cmp.w	r9, #0
   b6666:	d003      	beq.n	b6670 <_ZN7RailwayaSERKS_.isra.0+0xb4>
   b6668:	4631      	mov	r1, r6
   b666a:	4648      	mov	r0, r9
   b666c:	f7fe fca6 	bl	b4fbc <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b6670:	f109 090c 	add.w	r9, r9, #12
   b6674:	360c      	adds	r6, #12
   b6676:	e7f2      	b.n	b665e <_ZN7RailwayaSERKS_.isra.0+0xa2>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b6678:	4637      	mov	r7, r6
   b667a:	e7c1      	b.n	b6600 <_ZN7RailwayaSERKS_.isra.0+0x44>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b667c:	6923      	ldr	r3, [r4, #16]
   b667e:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b6680:	429e      	cmp	r6, r3
   b6682:	d803      	bhi.n	b668c <_ZN7RailwayaSERKS_.isra.0+0xd0>
   b6684:	4640      	mov	r0, r8
   b6686:	f7ff fedd 	bl	b6444 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
    { return std::uninitialized_copy(__first, __last, __result); }
   b668a:	e7c6      	b.n	b661a <_ZN7RailwayaSERKS_.isra.0+0x5e>
   b668c:	eb08 0103 	add.w	r1, r8, r3
   b6690:	4640      	mov	r0, r8
   b6692:	f7ff fed7 	bl	b6444 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b6696:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
   b669a:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
   b669e:	1a10      	subs	r0, r2, r0
   b66a0:	4418      	add	r0, r3
   b66a2:	e7f0      	b.n	b6686 <_ZN7RailwayaSERKS_.isra.0+0xca>
	__destroy(__first, __last);
   b66a4:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b66a8:	f7fe fc27 	bl	b4efa <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	      _M_deallocate(this->_M_impl._M_start,
   b66ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b66ae:	b118      	cbz	r0, b66b8 <_ZN7RailwayaSERKS_.isra.0+0xfc>
			    - this->_M_impl._M_start);
   b66b0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b66b2:	1a09      	subs	r1, r1, r0
   b66b4:	f7fd fcf5 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b66b8:	6267      	str	r7, [r4, #36]	; 0x24
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b66ba:	4447      	add	r7, r8
   b66bc:	62e7      	str	r7, [r4, #44]	; 0x2c
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b66be:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b66c0:	4443      	add	r3, r8
   b66c2:	62a3      	str	r3, [r4, #40]	; 0x28
	this->_M_assign(__str);
   b66c4:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b66c8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b66cc:	f004 fc10 	bl	baef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
   b66d0:	f105 0148 	add.w	r1, r5, #72	; 0x48
   b66d4:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b66d8:	f7fd fe0a 	bl	b42f0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
   b66dc:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b66de:	6563      	str	r3, [r4, #84]	; 0x54
   b66e0:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b66e2:	65a3      	str	r3, [r4, #88]	; 0x58
   b66e4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b66e6:	65e3      	str	r3, [r4, #92]	; 0x5c
   b66e8:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b66ea:	6623      	str	r3, [r4, #96]	; 0x60
   b66ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   b66ee:	6663      	str	r3, [r4, #100]	; 0x64
   b66f0:	6eab      	ldr	r3, [r5, #104]	; 0x68
   b66f2:	66a3      	str	r3, [r4, #104]	; 0x68
   b66f4:	b002      	add	sp, #8
   b66f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b66fa:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   b66fc:	eba7 0709 	sub.w	r7, r7, r9
	  else if (size() >= __xlen)
   b6700:	45b8      	cmp	r8, r7
   b6702:	d80d      	bhi.n	b6720 <_ZN7RailwayaSERKS_.isra.0+0x164>
   b6704:	4630      	mov	r0, r6
   b6706:	464a      	mov	r2, r9
   b6708:	4651      	mov	r1, sl
   b670a:	f7fe fcd3 	bl	b50b4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      : _M_current(__i) { }
   b670e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b6710:	4606      	mov	r6, r0
	  for (; __first != __last; ++__first)
   b6712:	42b7      	cmp	r7, r6
   b6714:	d0d3      	beq.n	b66be <_ZN7RailwayaSERKS_.isra.0+0x102>
      }
   b6716:	4630      	mov	r0, r6
   b6718:	f7fe f814 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   b671c:	360c      	adds	r6, #12
	return *this;
   b671e:	e7f8      	b.n	b6712 <_ZN7RailwayaSERKS_.isra.0+0x156>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6720:	4b10      	ldr	r3, [pc, #64]	; (b6764 <_ZN7RailwayaSERKS_.isra.0+0x1a8>)
   b6722:	10bf      	asrs	r7, r7, #2
   b6724:	435f      	muls	r7, r3
   b6726:	2f00      	cmp	r7, #0
   b6728:	dd08      	ble.n	b673c <_ZN7RailwayaSERKS_.isra.0+0x180>
	      *__result = *__first;
   b672a:	4631      	mov	r1, r6
   b672c:	4648      	mov	r0, r9
   b672e:	f7fe fc89 	bl	b5044 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	      ++__first;
   b6732:	360c      	adds	r6, #12
	      ++__result;
   b6734:	f109 090c 	add.w	r9, r9, #12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6738:	3f01      	subs	r7, #1
   b673a:	e7f4      	b.n	b6726 <_ZN7RailwayaSERKS_.isra.0+0x16a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b673c:	e9d4 6709 	ldrd	r6, r7, [r4, #36]	; 0x24
   b6740:	1bb9      	subs	r1, r7, r6
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b6742:	6a6e      	ldr	r6, [r5, #36]	; 0x24
					  __x._M_impl._M_finish,
   b6744:	f8d5 9028 	ldr.w	r9, [r5, #40]	; 0x28
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b6748:	440e      	add	r6, r1
	      for (; __first != __last; ++__first, (void)++__cur)
   b674a:	45b1      	cmp	r9, r6
   b674c:	d0b7      	beq.n	b66be <_ZN7RailwayaSERKS_.isra.0+0x102>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b674e:	b11f      	cbz	r7, b6758 <_ZN7RailwayaSERKS_.isra.0+0x19c>
   b6750:	4631      	mov	r1, r6
   b6752:	4638      	mov	r0, r7
   b6754:	f7fe fc32 	bl	b4fbc <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b6758:	360c      	adds	r6, #12
   b675a:	370c      	adds	r7, #12
   b675c:	e7f5      	b.n	b674a <_ZN7RailwayaSERKS_.isra.0+0x18e>
   b675e:	bf00      	nop
   b6760:	7ffffffc 	.word	0x7ffffffc
   b6764:	aaaaaaab 	.word	0xaaaaaaab

000b6768 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b6768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b676c:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b676e:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6770:	480b      	ldr	r0, [pc, #44]	; (b67a0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x38>)
   b6772:	10a4      	asrs	r4, r4, #2
   b6774:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b6776:	4616      	mov	r6, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6778:	4627      	mov	r7, r4
   b677a:	4690      	mov	r8, r2
   b677c:	2f00      	cmp	r7, #0
   b677e:	dd08      	ble.n	b6792 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x2a>
	      *__result = *__first;
   b6780:	4629      	mov	r1, r5
   b6782:	4640      	mov	r0, r8
   b6784:	f7ff ff1a 	bl	b65bc <_ZN7RailwayaSERKS_.isra.0>
	      ++__first;
   b6788:	356c      	adds	r5, #108	; 0x6c
	      ++__result;
   b678a:	f108 086c 	add.w	r8, r8, #108	; 0x6c
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b678e:	3f01      	subs	r7, #1
   b6790:	e7f4      	b.n	b677c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x14>
	  return __result;
   b6792:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b6796:	206c      	movs	r0, #108	; 0x6c
   b6798:	fb00 6004 	mla	r0, r0, r4, r6
   b679c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b67a0:	684bda13 	.word	0x684bda13

000b67a4 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>:
      if (&__x != this)
   b67a4:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b67a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b67aa:	4604      	mov	r4, r0
   b67ac:	460f      	mov	r7, r1
      if (&__x != this)
   b67ae:	d02c      	beq.n	b680a <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x66>
   b67b0:	e9d1 5a00 	ldrd	r5, sl, [r1]
			 - this->_M_impl._M_start); }
   b67b4:	f8d0 9000 	ldr.w	r9, [r0]
   b67b8:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b67ba:	ebaa 0805 	sub.w	r8, sl, r5
			 - this->_M_impl._M_start); }
   b67be:	eba3 0309 	sub.w	r3, r3, r9
	  if (__xlen > capacity())
   b67c2:	4543      	cmp	r3, r8
   b67c4:	d223      	bcs.n	b680e <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x6a>
	  pointer __result = this->_M_allocate(__n);
   b67c6:	482a      	ldr	r0, [pc, #168]	; (b6870 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xcc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b67c8:	ea4f 03a8 	mov.w	r3, r8, asr #2
	  pointer __result = this->_M_allocate(__n);
   b67cc:	4358      	muls	r0, r3
   b67ce:	f7fd fcc3 	bl	b4158 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>
   b67d2:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   b67d4:	4607      	mov	r7, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b67d6:	45aa      	cmp	sl, r5
   b67d8:	d007      	beq.n	b67ea <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x46>
   b67da:	b11f      	cbz	r7, b67e4 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x40>
   b67dc:	4629      	mov	r1, r5
   b67de:	4638      	mov	r0, r7
   b67e0:	f7ff fe3e 	bl	b6460 <_ZN7RailwayC1ERKS_>
   b67e4:	376c      	adds	r7, #108	; 0x6c
   b67e6:	356c      	adds	r5, #108	; 0x6c
   b67e8:	e7f5      	b.n	b67d6 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x32>
	__destroy(__first, __last);
   b67ea:	e9d4 0100 	ldrd	r0, r1, [r4]
   b67ee:	f7fe fbaf 	bl	b4f50 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	      _M_deallocate(this->_M_impl._M_start,
   b67f2:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b67f4:	b118      	cbz	r0, b67fe <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x5a>
			    - this->_M_impl._M_start);
   b67f6:	68a1      	ldr	r1, [r4, #8]
   b67f8:	1a09      	subs	r1, r1, r0
   b67fa:	f7fd fc52 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b67fe:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b6800:	4446      	add	r6, r8
   b6802:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b6804:	6823      	ldr	r3, [r4, #0]
   b6806:	4443      	add	r3, r8
   b6808:	6063      	str	r3, [r4, #4]
    }
   b680a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b680e:	6846      	ldr	r6, [r0, #4]
   b6810:	eba6 0609 	sub.w	r6, r6, r9
	  else if (size() >= __xlen)
   b6814:	45b0      	cmp	r8, r6
   b6816:	d80d      	bhi.n	b6834 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x90>
			      _Category>::__copy_m(__first, __last, __result);
   b6818:	4628      	mov	r0, r5
   b681a:	464a      	mov	r2, r9
   b681c:	4651      	mov	r1, sl
   b681e:	f7ff ffa3 	bl	b6768 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
      : _M_current(__i) { }
   b6822:	6866      	ldr	r6, [r4, #4]
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b6824:	4605      	mov	r5, r0
	  for (; __first != __last; ++__first)
   b6826:	42ae      	cmp	r6, r5
   b6828:	d0ec      	beq.n	b6804 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x60>
      __pointer->~_Tp();
   b682a:	4628      	mov	r0, r5
   b682c:	f7fe fb70 	bl	b4f10 <_ZN7RailwayD1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   b6830:	356c      	adds	r5, #108	; 0x6c
	return *this;
   b6832:	e7f8      	b.n	b6826 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x82>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6834:	4b0e      	ldr	r3, [pc, #56]	; (b6870 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xcc>)
   b6836:	10b6      	asrs	r6, r6, #2
   b6838:	435e      	muls	r6, r3
   b683a:	2e00      	cmp	r6, #0
   b683c:	dd08      	ble.n	b6850 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xac>
	      *__result = *__first;
   b683e:	4629      	mov	r1, r5
   b6840:	4648      	mov	r0, r9
   b6842:	f7ff febb 	bl	b65bc <_ZN7RailwayaSERKS_.isra.0>
	      ++__first;
   b6846:	356c      	adds	r5, #108	; 0x6c
	      ++__result;
   b6848:	f109 096c 	add.w	r9, r9, #108	; 0x6c
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b684c:	3e01      	subs	r6, #1
   b684e:	e7f4      	b.n	b683a <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x96>
   b6850:	e9d4 5600 	ldrd	r5, r6, [r4]
   b6854:	1b71      	subs	r1, r6, r5
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b6856:	683d      	ldr	r5, [r7, #0]
					  __x._M_impl._M_finish,
   b6858:	687f      	ldr	r7, [r7, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b685a:	440d      	add	r5, r1
   b685c:	42af      	cmp	r7, r5
   b685e:	d0d1      	beq.n	b6804 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x60>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6860:	b11e      	cbz	r6, b686a <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xc6>
   b6862:	4629      	mov	r1, r5
   b6864:	4630      	mov	r0, r6
   b6866:	f7ff fdfb 	bl	b6460 <_ZN7RailwayC1ERKS_>
   b686a:	356c      	adds	r5, #108	; 0x6c
   b686c:	366c      	adds	r6, #108	; 0x6c
   b686e:	e7f5      	b.n	b685c <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xb8>
   b6870:	684bda13 	.word	0x684bda13

000b6874 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b6874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6878:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b687a:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b687c:	4810      	ldr	r0, [pc, #64]	; (b68c0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_+0x4c>)
   b687e:	10e4      	asrs	r4, r4, #3
   b6880:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b6882:	4617      	mov	r7, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6884:	46a0      	mov	r8, r4
   b6886:	4616      	mov	r6, r2
   b6888:	f1b8 0f00 	cmp.w	r8, #0
   b688c:	dd10      	ble.n	b68b0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_+0x3c>
   b688e:	4629      	mov	r1, r5
   b6890:	4630      	mov	r0, r6
   b6892:	f7ff ff87 	bl	b67a4 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>
   b6896:	f105 010c 	add.w	r1, r5, #12
   b689a:	f106 000c 	add.w	r0, r6, #12
   b689e:	f004 fb27 	bl	baef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
   b68a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b68a4:	6273      	str	r3, [r6, #36]	; 0x24
	      ++__first;
   b68a6:	3528      	adds	r5, #40	; 0x28
	      ++__result;
   b68a8:	3628      	adds	r6, #40	; 0x28
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b68aa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b68ae:	e7eb      	b.n	b6888 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_+0x14>
	  return __result;
   b68b0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b68b4:	2028      	movs	r0, #40	; 0x28
   b68b6:	fb00 7004 	mla	r0, r0, r4, r7
   b68ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b68be:	bf00      	nop
   b68c0:	cccccccd 	.word	0xcccccccd

000b68c4 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0>:
      vector<_Tp, _Alloc>::
   b68c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      return __last - __first;
   b68c8:	eba2 0801 	sub.w	r8, r2, r1
			 - this->_M_impl._M_start); }
   b68cc:	6883      	ldr	r3, [r0, #8]
   b68ce:	4617      	mov	r7, r2
   b68d0:	6802      	ldr	r2, [r0, #0]
   b68d2:	1a9b      	subs	r3, r3, r2
	if (__len > capacity())
   b68d4:	4598      	cmp	r8, r3
      vector<_Tp, _Alloc>::
   b68d6:	4604      	mov	r4, r0
   b68d8:	460e      	mov	r6, r1
	if (__len > capacity())
   b68da:	d92a      	bls.n	b6932 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x6e>
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b68dc:	4b26      	ldr	r3, [pc, #152]	; (b6978 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xb4>)
   b68de:	4598      	cmp	r8, r3
   b68e0:	d902      	bls.n	b68e8 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x24>
	  __throw_length_error(
   b68e2:	4826      	ldr	r0, [pc, #152]	; (b697c <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xb8>)
   b68e4:	f004 fab4 	bl	bae50 <_ZSt20__throw_length_errorPKc>
	  pointer __result = this->_M_allocate(__n);
   b68e8:	4825      	ldr	r0, [pc, #148]	; (b6980 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xbc>)
   b68ea:	ea4f 03a8 	mov.w	r3, r8, asr #2
   b68ee:	4358      	muls	r0, r3
   b68f0:	f7fd fc32 	bl	b4158 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>
   b68f4:	4605      	mov	r5, r0
	  _ForwardIterator __cur = __result;
   b68f6:	4681      	mov	r9, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b68f8:	42b7      	cmp	r7, r6
   b68fa:	d00a      	beq.n	b6912 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x4e>
   b68fc:	f1b9 0f00 	cmp.w	r9, #0
   b6900:	d003      	beq.n	b690a <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x46>
   b6902:	4631      	mov	r1, r6
   b6904:	4648      	mov	r0, r9
   b6906:	f7ff fdab 	bl	b6460 <_ZN7RailwayC1ERKS_>
   b690a:	366c      	adds	r6, #108	; 0x6c
   b690c:	f109 096c 	add.w	r9, r9, #108	; 0x6c
   b6910:	e7f2      	b.n	b68f8 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x34>
	__destroy(__first, __last);
   b6912:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6916:	f7fe fb1b 	bl	b4f50 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	    _M_deallocate(this->_M_impl._M_start,
   b691a:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b691c:	b118      	cbz	r0, b6926 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x62>
			  - this->_M_impl._M_start);
   b691e:	68a1      	ldr	r1, [r4, #8]
   b6920:	1a09      	subs	r1, r1, r0
   b6922:	f7fd fbbe 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
   b6926:	6025      	str	r5, [r4, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b6928:	4445      	add	r5, r8
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b692a:	e9c4 5501 	strd	r5, r5, [r4, #4]
	      std::__uninitialized_copy_a(__mid, __last,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
	  }
      }
   b692e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6932:	6845      	ldr	r5, [r0, #4]
   b6934:	1aad      	subs	r5, r5, r2
	else if (size() >= __len)
   b6936:	45a8      	cmp	r8, r5
   b6938:	d80b      	bhi.n	b6952 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x8e>
			      _Category>::__copy_m(__first, __last, __result);
   b693a:	4639      	mov	r1, r7
   b693c:	4630      	mov	r0, r6
   b693e:	f7ff ff13 	bl	b6768 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b6942:	6861      	ldr	r1, [r4, #4]
   b6944:	4288      	cmp	r0, r1
   b6946:	4605      	mov	r5, r0
   b6948:	d0f1      	beq.n	b692e <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x6a>
   b694a:	f7fe fb01 	bl	b4f50 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	    this->_M_impl._M_finish = __pos;
   b694e:	6065      	str	r5, [r4, #4]
   b6950:	e7ed      	b.n	b692e <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x6a>
	__i += __n;
   b6952:	440d      	add	r5, r1
   b6954:	4630      	mov	r0, r6
   b6956:	4629      	mov	r1, r5
   b6958:	f7ff ff06 	bl	b6768 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b695c:	6866      	ldr	r6, [r4, #4]
   b695e:	42af      	cmp	r7, r5
   b6960:	d007      	beq.n	b6972 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xae>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6962:	b11e      	cbz	r6, b696c <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xa8>
   b6964:	4629      	mov	r1, r5
   b6966:	4630      	mov	r0, r6
   b6968:	f7ff fd7a 	bl	b6460 <_ZN7RailwayC1ERKS_>
   b696c:	356c      	adds	r5, #108	; 0x6c
   b696e:	366c      	adds	r6, #108	; 0x6c
   b6970:	e7f5      	b.n	b695e <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x9a>
	    this->_M_impl._M_finish =
   b6972:	6066      	str	r6, [r4, #4]
      }
   b6974:	e7db      	b.n	b692e <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x6a>
   b6976:	bf00      	nop
   b6978:	7fffffa4 	.word	0x7fffffa4
   b697c:	000be03b 	.word	0x000be03b
   b6980:	684bda13 	.word	0x684bda13

000b6984 <setup>:
void setup(){
   b6984:	b570      	push	{r4, r5, r6, lr}
   b6986:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
  Serial.begin(9600);
   b698a:	f004 f8a7 	bl	baadc <_Z16_fetch_usbserialv>
   b698e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6992:	f004 f897 	bl	baac4 <_ZN9USBSerial5beginEl>
  delay(500);
   b6996:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b699a:	f001 ff25 	bl	b87e8 <delay>
  BLE.on();
   b699e:	f002 fa8f 	bl	b8ec0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b69a2:	f002 fad7 	bl	b8f54 <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   b69a6:	f002 fa8b 	bl	b8ec0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b69aa:	4a90      	ldr	r2, [pc, #576]	; (b6bec <setup+0x268>)
   b69ac:	4d90      	ldr	r5, [pc, #576]	; (b6bf0 <setup+0x26c>)
   b69ae:	4601      	mov	r1, r0
   b69b0:	a817      	add	r0, sp, #92	; 0x5c
   b69b2:	f002 ffb9 	bl	b9928 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b69b6:	a817      	add	r0, sp, #92	; 0x5c
   b69b8:	f002 fb73 	bl	b90a2 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   b69bc:	f002 fa80 	bl	b8ec0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b69c0:	4a8c      	ldr	r2, [pc, #560]	; (b6bf4 <setup+0x270>)
   b69c2:	4601      	mov	r1, r0
   b69c4:	a817      	add	r0, sp, #92	; 0x5c
   b69c6:	f002 ffaf 	bl	b9928 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b69ca:	a817      	add	r0, sp, #92	; 0x5c
   b69cc:	f002 fb69 	bl	b90a2 <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData data;
   b69d0:	a802      	add	r0, sp, #8
   b69d2:	f002 fc9c 	bl	b930e <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   b69d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b69d8:	ac11      	add	r4, sp, #68	; 0x44
   b69da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b69dc:	682e      	ldr	r6, [r5, #0]
   b69de:	6026      	str	r6, [r4, #0]
        BleUuid tempUUID(uuid);
   b69e0:	ad11      	add	r5, sp, #68	; 0x44
   b69e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b69e4:	ac17      	add	r4, sp, #92	; 0x5c
   b69e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b69e8:	a817      	add	r0, sp, #92	; 0x5c
        BleUuid tempUUID(uuid);
   b69ea:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b69ec:	f002 f86a 	bl	b8ac4 <_ZNK8particle7BleUuid4typeEv>
   b69f0:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b69f2:	a817      	add	r0, sp, #92	; 0x5c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b69f4:	2c00      	cmp	r4, #0
   b69f6:	f040 80d4 	bne.w	b6ba2 <setup+0x21e>
            uint16_t uuid16 = tempUUID.shorted();
   b69fa:	f002 f87f 	bl	b8afc <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b69fe:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b6a00:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b6a04:	2302      	movs	r3, #2
   b6a06:	aa0b      	add	r2, sp, #44	; 0x2c
   b6a08:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b6a0a:	a802      	add	r0, sp, #8
   b6a0c:	f002 fc74 	bl	b92f8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   b6a10:	f002 fa56 	bl	b8ec0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6a14:	2200      	movs	r2, #0
   b6a16:	a902      	add	r1, sp, #8
   b6a18:	f002 fae6 	bl	b8fe8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  request.hostname = "trek.thewcl.com";
   b6a1c:	4c76      	ldr	r4, [pc, #472]	; (b6bf8 <setup+0x274>)

    //loopIndex must point to either the first or last checkpoint, tripleIndex cannot be 0
    void setLoopIndex(int triple, int loop){
        tripleIndex = triple;
   b6a1e:	4e77      	ldr	r6, [pc, #476]	; (b6bfc <setup+0x278>)
  acquireWireBuffer();
   b6a20:	a817      	add	r0, sp, #92	; 0x5c
   b6a22:	f7fd fe65 	bl	b46f0 <_Z17acquireWireBufferv>
  Wire.begin();
   b6a26:	f004 f9a7 	bl	bad78 <_Z19__fetch_global_Wirev>
   b6a2a:	f003 f909 	bl	b9c40 <_ZN7TwoWire5beginEv>
  request.hostname = "trek.thewcl.com";
   b6a2e:	4974      	ldr	r1, [pc, #464]	; (b6c00 <setup+0x27c>)
   b6a30:	4620      	mov	r0, r4
   b6a32:	f003 fbba 	bl	ba1aa <_ZN6StringaSEPKc>
  request.port = 80;
   b6a36:	2350      	movs	r3, #80	; 0x50
   b6a38:	4972      	ldr	r1, [pc, #456]	; (b6c04 <setup+0x280>)
   b6a3a:	63a3      	str	r3, [r4, #56]	; 0x38
   b6a3c:	4c72      	ldr	r4, [pc, #456]	; (b6c08 <setup+0x284>)
        loopIndex = loop;
   b6a3e:	2502      	movs	r5, #2
   b6a40:	2006      	movs	r0, #6
   b6a42:	e9c1 5015 	strd	r5, r0, [r1, #84]	; 0x54
   b6a46:	e9c4 5015 	strd	r5, r0, [r4, #84]	; 0x54
        tripleIndex = triple;
   b6a4a:	4d70      	ldr	r5, [pc, #448]	; (b6c0c <setup+0x288>)
        loopIndex = loop;
   b6a4c:	2203      	movs	r2, #3
   b6a4e:	2307      	movs	r3, #7
  ctaRailways = {brownLineCTA, orangeLineCTA, pinkLineCTA, purpleLineCTA, greenLineCTA};
   b6a50:	a817      	add	r0, sp, #92	; 0x5c
   b6a52:	e9c5 2315 	strd	r2, r3, [r5, #84]	; 0x54
   b6a56:	e9c6 2315 	strd	r2, r3, [r6, #84]	; 0x54
   b6a5a:	f7ff fd01 	bl	b6460 <_ZN7RailwayC1ERKS_>
   b6a5e:	4631      	mov	r1, r6
   b6a60:	a832      	add	r0, sp, #200	; 0xc8
   b6a62:	f7ff fcfd 	bl	b6460 <_ZN7RailwayC1ERKS_>
   b6a66:	4629      	mov	r1, r5
   b6a68:	a84d      	add	r0, sp, #308	; 0x134
   b6a6a:	f7ff fcf9 	bl	b6460 <_ZN7RailwayC1ERKS_>
   b6a6e:	4621      	mov	r1, r4
   b6a70:	a868      	add	r0, sp, #416	; 0x1a0
   b6a72:	f7ff fcf5 	bl	b6460 <_ZN7RailwayC1ERKS_>
   b6a76:	4966      	ldr	r1, [pc, #408]	; (b6c10 <setup+0x28c>)
   b6a78:	a883      	add	r0, sp, #524	; 0x20c
   b6a7a:	f7ff fcf1 	bl	b6460 <_ZN7RailwayC1ERKS_>
	this->_M_assign_aux(__l.begin(), __l.end(),
   b6a7e:	4865      	ldr	r0, [pc, #404]	; (b6c14 <setup+0x290>)
   b6a80:	aa9e      	add	r2, sp, #632	; 0x278
   b6a82:	a917      	add	r1, sp, #92	; 0x5c
   b6a84:	f7ff ff1e 	bl	b68c4 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0>
   b6a88:	2404      	movs	r4, #4
   b6a8a:	256c      	movs	r5, #108	; 0x6c
   b6a8c:	ab17      	add	r3, sp, #92	; 0x5c
   b6a8e:	fb05 3004 	mla	r0, r5, r4, r3
   b6a92:	f7fe fa3d 	bl	b4f10 <_ZN7RailwayD1Ev>
   b6a96:	3c01      	subs	r4, #1
   b6a98:	d2f8      	bcs.n	b6a8c <setup+0x108>
  mbtaRailways = {redLineMBTA};
   b6a9a:	495f      	ldr	r1, [pc, #380]	; (b6c18 <setup+0x294>)
   b6a9c:	a817      	add	r0, sp, #92	; 0x5c
   b6a9e:	f7ff fcdf 	bl	b6460 <_ZN7RailwayC1ERKS_>
   b6aa2:	aa32      	add	r2, sp, #200	; 0xc8
   b6aa4:	a917      	add	r1, sp, #92	; 0x5c
   b6aa6:	485d      	ldr	r0, [pc, #372]	; (b6c1c <setup+0x298>)
   b6aa8:	f7ff ff0c 	bl	b68c4 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0>
   b6aac:	a817      	add	r0, sp, #92	; 0x5c
   b6aae:	f7fe fa2f 	bl	b4f10 <_ZN7RailwayD1Ev>
  cities = {City(ctaRailways, "cta", 5), City(mbtaRailways, "mbta", 1)};
   b6ab2:	4958      	ldr	r1, [pc, #352]	; (b6c14 <setup+0x290>)
   b6ab4:	a805      	add	r0, sp, #20
   b6ab6:	f7ff fd43 	bl	b6540 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>
   b6aba:	4959      	ldr	r1, [pc, #356]	; (b6c20 <setup+0x29c>)
   b6abc:	a80b      	add	r0, sp, #44	; 0x2c
   b6abe:	f7fd fb23 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6ac2:	2400      	movs	r4, #0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b6ac4:	ab1c      	add	r3, sp, #112	; 0x70
        std::vector<Railway> railways;
        std::string name;
        int slaveCountExpected;

        City(std::vector<Railway> railwaysInput, std::string nameInput, int slaveCountExpectedInput){
            railways = railwaysInput;
   b6ac6:	a905      	add	r1, sp, #20
   b6ac8:	a817      	add	r0, sp, #92	; 0x5c
      { _M_string_length = __length; }
   b6aca:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
   b6ace:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
   b6ad2:	9419      	str	r4, [sp, #100]	; 0x64
   b6ad4:	f88d 4070 	strb.w	r4, [sp, #112]	; 0x70
   b6ad8:	f7ff fe64 	bl	b67a4 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>
	this->_M_assign(__str);
   b6adc:	a90b      	add	r1, sp, #44	; 0x2c
   b6ade:	a81a      	add	r0, sp, #104	; 0x68
   b6ae0:	f004 fa06 	bl	baef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
            name = nameInput;
            slaveCountExpected = slaveCountExpectedInput;
   b6ae4:	2305      	movs	r3, #5
   b6ae6:	494d      	ldr	r1, [pc, #308]	; (b6c1c <setup+0x298>)
   b6ae8:	9320      	str	r3, [sp, #128]	; 0x80
   b6aea:	a808      	add	r0, sp, #32
   b6aec:	f7ff fd28 	bl	b6540 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>
   b6af0:	494c      	ldr	r1, [pc, #304]	; (b6c24 <setup+0x2a0>)
   b6af2:	a811      	add	r0, sp, #68	; 0x44
   b6af4:	f7fd fb08 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b6af8:	ab26      	add	r3, sp, #152	; 0x98
            railways = railwaysInput;
   b6afa:	a908      	add	r1, sp, #32
   b6afc:	a821      	add	r0, sp, #132	; 0x84
      { _M_string_length = __length; }
   b6afe:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
   b6b02:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
   b6b06:	9423      	str	r4, [sp, #140]	; 0x8c
   b6b08:	f88d 4098 	strb.w	r4, [sp, #152]	; 0x98
   b6b0c:	f7ff fe4a 	bl	b67a4 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>
			 - this->_M_impl._M_start); }
   b6b10:	4c45      	ldr	r4, [pc, #276]	; (b6c28 <setup+0x2a4>)
	this->_M_assign(__str);
   b6b12:	a911      	add	r1, sp, #68	; 0x44
   b6b14:	a824      	add	r0, sp, #144	; 0x90
   b6b16:	f004 f9eb 	bl	baef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
            slaveCountExpected = slaveCountExpectedInput;
   b6b1a:	2301      	movs	r3, #1
   b6b1c:	6822      	ldr	r2, [r4, #0]
   b6b1e:	932a      	str	r3, [sp, #168]	; 0xa8
   b6b20:	68a3      	ldr	r3, [r4, #8]
   b6b22:	1a9b      	subs	r3, r3, r2
	if (__len > capacity())
   b6b24:	2b4f      	cmp	r3, #79	; 0x4f
   b6b26:	d844      	bhi.n	b6bb2 <setup+0x22e>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6b28:	2050      	movs	r0, #80	; 0x50
   b6b2a:	f7fd fab4 	bl	b4096 <_Znwj>
	__uninit_copy(__first, __last, __result);
   b6b2e:	a92b      	add	r1, sp, #172	; 0xac
   b6b30:	4602      	mov	r2, r0
   b6b32:	4605      	mov	r5, r0
   b6b34:	a817      	add	r0, sp, #92	; 0x5c
   b6b36:	f7ff fd29 	bl	b658c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_>
	__destroy(__first, __last);
   b6b3a:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6b3e:	f7fe fa20 	bl	b4f82 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>
	    _M_deallocate(this->_M_impl._M_start,
   b6b42:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b6b44:	b118      	cbz	r0, b6b4e <setup+0x1ca>
			  - this->_M_impl._M_start);
   b6b46:	68a1      	ldr	r1, [r4, #8]
	::operator delete(__p
   b6b48:	1a09      	subs	r1, r1, r0
   b6b4a:	f7fd faaa 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
   b6b4e:	4b36      	ldr	r3, [pc, #216]	; (b6c28 <setup+0x2a4>)
   b6b50:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b6b52:	3550      	adds	r5, #80	; 0x50
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b6b54:	e9c3 5501 	strd	r5, r5, [r3, #4]
      { _M_dispose(); }
   b6b58:	a824      	add	r0, sp, #144	; 0x90
   b6b5a:	f004 f9ab 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
class City{
   b6b5e:	a821      	add	r0, sp, #132	; 0x84
   b6b60:	f7fe fa01 	bl	b4f66 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b6b64:	a81a      	add	r0, sp, #104	; 0x68
   b6b66:	f004 f9a5 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6b6a:	a817      	add	r0, sp, #92	; 0x5c
   b6b6c:	f7fe f9fb 	bl	b4f66 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b6b70:	a811      	add	r0, sp, #68	; 0x44
   b6b72:	f004 f99f 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6b76:	a808      	add	r0, sp, #32
   b6b78:	f7fe f9f5 	bl	b4f66 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b6b7c:	a80b      	add	r0, sp, #44	; 0x2c
   b6b7e:	f004 f999 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6b82:	a805      	add	r0, sp, #20
   b6b84:	f7fe f9ef 	bl	b4f66 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
    }

    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
   b6b88:	4828      	ldr	r0, [pc, #160]	; (b6c2c <setup+0x2a8>)
   b6b8a:	2300      	movs	r3, #0
   b6b8c:	461a      	mov	r2, r3
   b6b8e:	4619      	mov	r1, r3
   b6b90:	6840      	ldr	r0, [r0, #4]
   b6b92:	f001 fdb1 	bl	b86f8 <network_clear_credentials>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b6b96:	9802      	ldr	r0, [sp, #8]
   b6b98:	f001 fdde 	bl	b8758 <free>
}
   b6b9c:	f50d 7d1e 	add.w	sp, sp, #632	; 0x278
   b6ba0:	bd70      	pop	{r4, r5, r6, pc}
   b6ba2:	f001 ffad 	bl	b8b00 <_ZNK8particle7BleUuid8rawBytesEv>
   b6ba6:	2300      	movs	r3, #0
   b6ba8:	9300      	str	r3, [sp, #0]
   b6baa:	4602      	mov	r2, r0
   b6bac:	2310      	movs	r3, #16
   b6bae:	2107      	movs	r1, #7
   b6bb0:	e72b      	b.n	b6a0a <setup+0x86>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6bb2:	6865      	ldr	r5, [r4, #4]
   b6bb4:	1aad      	subs	r5, r5, r2
	else if (size() >= __len)
   b6bb6:	2d4f      	cmp	r5, #79	; 0x4f
   b6bb8:	d90b      	bls.n	b6bd2 <setup+0x24e>
   b6bba:	a92b      	add	r1, sp, #172	; 0xac
   b6bbc:	a817      	add	r0, sp, #92	; 0x5c
   b6bbe:	f7ff fe59 	bl	b6874 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b6bc2:	6861      	ldr	r1, [r4, #4]
   b6bc4:	4288      	cmp	r0, r1
   b6bc6:	4605      	mov	r5, r0
   b6bc8:	d0c6      	beq.n	b6b58 <setup+0x1d4>
   b6bca:	f7fe f9da 	bl	b4f82 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>
	    this->_M_impl._M_finish = __pos;
   b6bce:	6065      	str	r5, [r4, #4]
   b6bd0:	e7c2      	b.n	b6b58 <setup+0x1d4>
   b6bd2:	ab17      	add	r3, sp, #92	; 0x5c
   b6bd4:	441d      	add	r5, r3
   b6bd6:	4629      	mov	r1, r5
   b6bd8:	4618      	mov	r0, r3
   b6bda:	f7ff fe4b 	bl	b6874 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_>
   b6bde:	6862      	ldr	r2, [r4, #4]
   b6be0:	a92b      	add	r1, sp, #172	; 0xac
   b6be2:	4628      	mov	r0, r5
   b6be4:	f7ff fcd2 	bl	b658c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_>
	    this->_M_impl._M_finish =
   b6be8:	6060      	str	r0, [r4, #4]
   b6bea:	e7b5      	b.n	b6b58 <setup+0x1d4>
   b6bec:	2003e6ac 	.word	0x2003e6ac
   b6bf0:	2003532c 	.word	0x2003532c
   b6bf4:	2003e694 	.word	0x2003e694
   b6bf8:	2003e634 	.word	0x2003e634
   b6bfc:	20037de0 	.word	0x20037de0
   b6c00:	000be1a1 	.word	0x000be1a1
   b6c04:	20035450 	.word	0x20035450
   b6c08:	2003e4f0 	.word	0x2003e4f0
   b6c0c:	2003e484 	.word	0x2003e484
   b6c10:	200354d8 	.word	0x200354d8
   b6c14:	200354cc 	.word	0x200354cc
   b6c18:	2003e5c8 	.word	0x2003e5c8
   b6c1c:	20037dd4 	.word	0x20037dd4
   b6c20:	000be1b1 	.word	0x000be1b1
   b6c24:	000be1b5 	.word	0x000be1b5
   b6c28:	200354c0 	.word	0x200354c0
   b6c2c:	2003e718 	.word	0x2003e718

000b6c30 <_GLOBAL__sub_I_SystemMode>:
   b6c30:	2001      	movs	r0, #1
   b6c32:	f7fe bb4d 	b.w	b52d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0>
	...

000b6c38 <loop>:
void loop(){
   b6c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6c3c:	ed2d 8b06 	vpush	{d8-d10}
        return network_has_credentials(*this, 0, NULL);
   b6c40:	4b4e      	ldr	r3, [pc, #312]	; (b6d7c <loop+0x144>)
   b6c42:	2200      	movs	r2, #0
   b6c44:	b0b7      	sub	sp, #220	; 0xdc
   b6c46:	6858      	ldr	r0, [r3, #4]
   b6c48:	4611      	mov	r1, r2
   b6c4a:	f001 fd45 	bl	b86d8 <network_has_credentials>
  if(WiFi.hasCredentials() && userInput){
   b6c4e:	2800      	cmp	r0, #0
   b6c50:	f000 84e5 	beq.w	b761e <loop+0x9e6>
   b6c54:	4b4a      	ldr	r3, [pc, #296]	; (b6d80 <loop+0x148>)
   b6c56:	781b      	ldrb	r3, [r3, #0]
   b6c58:	2b00      	cmp	r3, #0
   b6c5a:	f000 84e0 	beq.w	b761e <loop+0x9e6>
      : _M_current(__i) { }
   b6c5e:	f8df b160 	ldr.w	fp, [pc, #352]	; b6dc0 <loop+0x188>
      Serial.printf("%i, ", i);
   b6c62:	4d48      	ldr	r5, [pc, #288]	; (b6d84 <loop+0x14c>)
    Serial.println("loop start");
   b6c64:	f003 ff3a 	bl	baadc <_Z16_fetch_usbserialv>
   b6c68:	4947      	ldr	r1, [pc, #284]	; (b6d88 <loop+0x150>)
   b6c6a:	f003 f9ac 	bl	b9fc6 <_ZN5Print7printlnEPKc>
   b6c6e:	e9db 4600 	ldrd	r4, r6, [fp]
    for(int i : sequenceArr){
   b6c72:	42b4      	cmp	r4, r6
   b6c74:	d009      	beq.n	b6c8a <loop+0x52>
   b6c76:	f854 2b04 	ldr.w	r2, [r4], #4
   b6c7a:	9203      	str	r2, [sp, #12]
      Serial.printf("%i, ", i);
   b6c7c:	f003 ff2e 	bl	baadc <_Z16_fetch_usbserialv>
   b6c80:	9a03      	ldr	r2, [sp, #12]
   b6c82:	4629      	mov	r1, r5
   b6c84:	f7fd fbb4 	bl	b43f0 <_ZN5Print6printfEPKcz>
	return *this;
   b6c88:	e7f3      	b.n	b6c72 <loop+0x3a>
    Serial.println();
   b6c8a:	f003 ff27 	bl	baadc <_Z16_fetch_usbserialv>
   b6c8e:	f003 f98e 	bl	b9fae <_ZN5Print7printlnEv>
    for(int j = 0; j < cities[cityIndex].railways.size(); j++){
   b6c92:	2300      	movs	r3, #0
   b6c94:	4f3d      	ldr	r7, [pc, #244]	; (b6d8c <loop+0x154>)
	return *(this->_M_impl._M_start + __n);
   b6c96:	4e3e      	ldr	r6, [pc, #248]	; (b6d90 <loop+0x158>)
   b6c98:	683a      	ldr	r2, [r7, #0]
   b6c9a:	6831      	ldr	r1, [r6, #0]
   b6c9c:	9303      	str	r3, [sp, #12]
   b6c9e:	2528      	movs	r5, #40	; 0x28
   b6ca0:	436a      	muls	r2, r5
   b6ca2:	188b      	adds	r3, r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6ca4:	588a      	ldr	r2, [r1, r2]
   b6ca6:	685b      	ldr	r3, [r3, #4]
   b6ca8:	1a9b      	subs	r3, r3, r2
   b6caa:	4a3a      	ldr	r2, [pc, #232]	; (b6d94 <loop+0x15c>)
   b6cac:	109b      	asrs	r3, r3, #2
   b6cae:	4353      	muls	r3, r2
   b6cb0:	9a03      	ldr	r2, [sp, #12]
   b6cb2:	4293      	cmp	r3, r2
   b6cb4:	f240 8441 	bls.w	b753a <loop+0x902>
      delay(1000);
   b6cb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b6cbc:	f001 fd94 	bl	b87e8 <delay>
	StringSumHelper(const char *p) : String(p) {}
   b6cc0:	4935      	ldr	r1, [pc, #212]	; (b6d98 <loop+0x160>)
   b6cc2:	a817      	add	r0, sp, #92	; 0x5c
   b6cc4:	f003 fa29 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
	return *(this->_M_impl._M_start + __n);
   b6cc8:	683a      	ldr	r2, [r7, #0]
      { return _M_dataplus._M_p; }
   b6cca:	6833      	ldr	r3, [r6, #0]
   b6ccc:	fb05 3302 	mla	r3, r5, r2, r3
      request.path = "/loop-tracks/" + String(cities[cityIndex].name.c_str()) + "?lines=" + String(cities[cityIndex].railways[j].name.c_str());
   b6cd0:	a813      	add	r0, sp, #76	; 0x4c
   b6cd2:	68d9      	ldr	r1, [r3, #12]
   b6cd4:	f003 fa21 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
   b6cd8:	a913      	add	r1, sp, #76	; 0x4c
   b6cda:	a817      	add	r0, sp, #92	; 0x5c
   b6cdc:	f003 fab2 	bl	ba244 <_ZplRK15StringSumHelperRK6String>
   b6ce0:	492e      	ldr	r1, [pc, #184]	; (b6d9c <loop+0x164>)
   b6ce2:	f003 fabb 	bl	ba25c <_ZplRK15StringSumHelperPKc>
   b6ce6:	9b03      	ldr	r3, [sp, #12]
   b6ce8:	6832      	ldr	r2, [r6, #0]
   b6cea:	246c      	movs	r4, #108	; 0x6c
   b6cec:	435c      	muls	r4, r3
   b6cee:	683b      	ldr	r3, [r7, #0]
   b6cf0:	436b      	muls	r3, r5
   b6cf2:	4680      	mov	r8, r0
   b6cf4:	58d3      	ldr	r3, [r2, r3]
   b6cf6:	4423      	add	r3, r4
   b6cf8:	a81b      	add	r0, sp, #108	; 0x6c
   b6cfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b6cfc:	f003 fa0d 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
   b6d00:	a91b      	add	r1, sp, #108	; 0x6c
   b6d02:	4640      	mov	r0, r8
   b6d04:	f003 fa9e 	bl	ba244 <_ZplRK15StringSumHelperRK6String>
   b6d08:	4601      	mov	r1, r0
   b6d0a:	4825      	ldr	r0, [pc, #148]	; (b6da0 <loop+0x168>)
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   b6d0c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; b6dc4 <loop+0x18c>
   b6d10:	f003 fa34 	bl	ba17c <_ZN6StringaSERKS_>
   b6d14:	a81b      	add	r0, sp, #108	; 0x6c
   b6d16:	f003 f9b5 	bl	ba084 <_ZN6StringD1Ev>
   b6d1a:	a813      	add	r0, sp, #76	; 0x4c
   b6d1c:	f003 f9b2 	bl	ba084 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b6d20:	a817      	add	r0, sp, #92	; 0x5c
   b6d22:	f003 f9af 	bl	ba084 <_ZN6StringD1Ev>
   b6d26:	4b1f      	ldr	r3, [pc, #124]	; (b6da4 <loop+0x16c>)
   b6d28:	491f      	ldr	r1, [pc, #124]	; (b6da8 <loop+0x170>)
   b6d2a:	4820      	ldr	r0, [pc, #128]	; (b6dac <loop+0x174>)
   b6d2c:	9300      	str	r3, [sp, #0]
   b6d2e:	4642      	mov	r2, r8
   b6d30:	4b1f      	ldr	r3, [pc, #124]	; (b6db0 <loop+0x178>)
   b6d32:	f000 fcb5 	bl	b76a0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
      Serial.println("parsing");
   b6d36:	f003 fed1 	bl	baadc <_Z16_fetch_usbserialv>
   b6d3a:	491e      	ldr	r1, [pc, #120]	; (b6db4 <loop+0x17c>)
   b6d3c:	f003 f943 	bl	b9fc6 <_ZN5Print7printlnEPKc>
      parser.clear();
   b6d40:	481d      	ldr	r0, [pc, #116]	; (b6db8 <loop+0x180>)
   b6d42:	f000 fe45 	bl	b79d0 <_ZN10JsonBuffer5clearEv>
	const char * c_str() const { return buffer; }
   b6d46:	f8d8 1004 	ldr.w	r1, [r8, #4]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b6d4a:	9104      	str	r1, [sp, #16]
   b6d4c:	4608      	mov	r0, r1
   b6d4e:	f005 f8d1 	bl	bbef4 <strlen>
   b6d52:	9904      	ldr	r1, [sp, #16]
   b6d54:	4602      	mov	r2, r0
   b6d56:	4818      	ldr	r0, [pc, #96]	; (b6db8 <loop+0x180>)
   b6d58:	f000 fe1d 	bl	b7996 <_ZN10JsonBuffer7addDataEPKcj>
      if(!parser.parse()){
   b6d5c:	4816      	ldr	r0, [pc, #88]	; (b6db8 <loop+0x180>)
   b6d5e:	f001 fa27 	bl	b81b0 <_ZN10JsonParser5parseEv>
   b6d62:	4681      	mov	r9, r0
   b6d64:	bb90      	cbnz	r0, b6dcc <loop+0x194>
        Serial.println("parsing failed");
   b6d66:	f003 feb9 	bl	baadc <_Z16_fetch_usbserialv>
   b6d6a:	4914      	ldr	r1, [pc, #80]	; (b6dbc <loop+0x184>)
}
   b6d6c:	b037      	add	sp, #220	; 0xdc
   b6d6e:	ecbd 8b06 	vpop	{d8-d10}
   b6d72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("parsing failed");
   b6d76:	f003 b926 	b.w	b9fc6 <_ZN5Print7printlnEPKc>
   b6d7a:	bf00      	nop
   b6d7c:	2003e718 	.word	0x2003e718
   b6d80:	2003e6b4 	.word	0x2003e6b4
   b6d84:	000be1c5 	.word	0x000be1c5
   b6d88:	000be1ba 	.word	0x000be1ba
   b6d8c:	20035118 	.word	0x20035118
   b6d90:	200354c0 	.word	0x200354c0
   b6d94:	684bda13 	.word	0x684bda13
   b6d98:	000be1ca 	.word	0x000be1ca
   b6d9c:	000be1d8 	.word	0x000be1d8
   b6da0:	2003e65c 	.word	0x2003e65c
   b6da4:	000be1e0 	.word	0x000be1e0
   b6da8:	2003e634 	.word	0x2003e634
   b6dac:	200355b8 	.word	0x200355b8
   b6db0:	2003511c 	.word	0x2003511c
   b6db4:	000be1e4 	.word	0x000be1e4
   b6db8:	20037eb8 	.word	0x20037eb8
   b6dbc:	000be1ec 	.word	0x000be1ec
   b6dc0:	2003e69c 	.word	0x2003e69c
   b6dc4:	2003e680 	.word	0x2003e680
   b6dc8:	00000000 	.word	0x00000000
   b6dcc:	683b      	ldr	r3, [r7, #0]
   b6dce:	6832      	ldr	r2, [r6, #0]
        float lat = train.key("latitude").valueFloat();
   b6dd0:	ed1f 9a03 	vldr	s18, [pc, #-12]	; b6dc8 <loop+0x190>
   b6dd4:	435d      	muls	r5, r3
      Railway currentRailway = cities[cityIndex].railways[j];
   b6dd6:	a81b      	add	r0, sp, #108	; 0x6c
   b6dd8:	5951      	ldr	r1, [r2, r5]
   b6dda:	4421      	add	r1, r4
   b6ddc:	f7ff fb40 	bl	b6460 <_ZN7RailwayC1ERKS_>
      std::vector<Checkpoint> currentCheckpoints = currentRailway.checkpoints;
   b6de0:	a91b      	add	r1, sp, #108	; 0x6c
   b6de2:	a807      	add	r0, sp, #28
   b6de4:	f7fd fd6c 	bl	b48c0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      int count = 0;
   b6de8:	f04f 0800 	mov.w	r8, #0
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b6dec:	49a3      	ldr	r1, [pc, #652]	; (b707c <loop+0x444>)
   b6dee:	a80d      	add	r0, sp, #52	; 0x34
   b6df0:	f000 fe08 	bl	b7a04 <_ZNK10JsonParser12getReferenceEv>
   b6df4:	4aa2      	ldr	r2, [pc, #648]	; (b7080 <loop+0x448>)
   b6df6:	a90d      	add	r1, sp, #52	; 0x34
   b6df8:	a810      	add	r0, sp, #64	; 0x40
   b6dfa:	f000 ffd3 	bl	b7da4 <_ZNK13JsonReference3keyEPKc>
   b6dfe:	2200      	movs	r2, #0
   b6e00:	a910      	add	r1, sp, #64	; 0x40
   b6e02:	a813      	add	r0, sp, #76	; 0x4c
   b6e04:	f000 fea2 	bl	b7b4c <_ZNK13JsonReference5indexEj>
   b6e08:	4a9e      	ldr	r2, [pc, #632]	; (b7084 <loop+0x44c>)
   b6e0a:	a913      	add	r1, sp, #76	; 0x4c
   b6e0c:	a817      	add	r0, sp, #92	; 0x5c
   b6e0e:	f000 ffc9 	bl	b7da4 <_ZNK13JsonReference3keyEPKc>
   b6e12:	4642      	mov	r2, r8
   b6e14:	a917      	add	r1, sp, #92	; 0x5c
   b6e16:	a80a      	add	r0, sp, #40	; 0x28
   b6e18:	f000 fe98 	bl	b7b4c <_ZNK13JsonReference5indexEj>
   b6e1c:	a817      	add	r0, sp, #92	; 0x5c
   b6e1e:	f000 fd69 	bl	b78f4 <_ZN13JsonReferenceD1Ev>
   b6e22:	a813      	add	r0, sp, #76	; 0x4c
   b6e24:	f000 fd66 	bl	b78f4 <_ZN13JsonReferenceD1Ev>
   b6e28:	a810      	add	r0, sp, #64	; 0x40
   b6e2a:	f000 fd63 	bl	b78f4 <_ZN13JsonReferenceD1Ev>
   b6e2e:	a80d      	add	r0, sp, #52	; 0x34
   b6e30:	f000 fd60 	bl	b78f4 <_ZN13JsonReferenceD1Ev>
        String nextStation = train.key("next_stop").valueString();
   b6e34:	4a94      	ldr	r2, [pc, #592]	; (b7088 <loop+0x450>)
   b6e36:	a90a      	add	r1, sp, #40	; 0x28
   b6e38:	a817      	add	r0, sp, #92	; 0x5c
   b6e3a:	f000 ffb3 	bl	b7da4 <_ZNK13JsonReference3keyEPKc>
   b6e3e:	a917      	add	r1, sp, #92	; 0x5c
   b6e40:	a813      	add	r0, sp, #76	; 0x4c
   b6e42:	f000 ffc9 	bl	b7dd8 <_ZNK13JsonReference11valueStringEv>
   b6e46:	a817      	add	r0, sp, #92	; 0x5c
   b6e48:	f000 fd54 	bl	b78f4 <_ZN13JsonReferenceD1Ev>
        String destNm = train.key("destination").valueString();
   b6e4c:	4a8f      	ldr	r2, [pc, #572]	; (b708c <loop+0x454>)
   b6e4e:	a90a      	add	r1, sp, #40	; 0x28
   b6e50:	a810      	add	r0, sp, #64	; 0x40
   b6e52:	f000 ffa7 	bl	b7da4 <_ZNK13JsonReference3keyEPKc>
   b6e56:	a910      	add	r1, sp, #64	; 0x40
   b6e58:	a817      	add	r0, sp, #92	; 0x5c
   b6e5a:	f000 ffbd 	bl	b7dd8 <_ZNK13JsonReference11valueStringEv>
   b6e5e:	a810      	add	r0, sp, #64	; 0x40
   b6e60:	f000 fd48 	bl	b78f4 <_ZN13JsonReferenceD1Ev>
        int trainDir = train.key("direction").valueInt();
   b6e64:	4a8a      	ldr	r2, [pc, #552]	; (b7090 <loop+0x458>)
   b6e66:	a90a      	add	r1, sp, #40	; 0x28
   b6e68:	a810      	add	r0, sp, #64	; 0x40
   b6e6a:	f000 ff9b 	bl	b7da4 <_ZNK13JsonReference3keyEPKc>
   b6e6e:	2100      	movs	r1, #0
   b6e70:	a810      	add	r0, sp, #64	; 0x40
   b6e72:	f000 fe85 	bl	b7b80 <_ZNK13JsonReference8valueIntEi>
   b6e76:	4604      	mov	r4, r0
   b6e78:	a810      	add	r0, sp, #64	; 0x40
   b6e7a:	f000 fd3b 	bl	b78f4 <_ZN13JsonReferenceD1Ev>
        float lat = train.key("latitude").valueFloat();
   b6e7e:	4a85      	ldr	r2, [pc, #532]	; (b7094 <loop+0x45c>)
   b6e80:	a90a      	add	r1, sp, #40	; 0x28
   b6e82:	a810      	add	r0, sp, #64	; 0x40
   b6e84:	f000 ff8e 	bl	b7da4 <_ZNK13JsonReference3keyEPKc>
   b6e88:	a810      	add	r0, sp, #64	; 0x40
   b6e8a:	eeb0 0a49 	vmov.f32	s0, s18
   b6e8e:	f000 fe83 	bl	b7b98 <_ZNK13JsonReference10valueFloatEf>
   b6e92:	a810      	add	r0, sp, #64	; 0x40
   b6e94:	eef0 8a40 	vmov.f32	s17, s0
   b6e98:	f000 fd2c 	bl	b78f4 <_ZN13JsonReferenceD1Ev>
        float lon = train.key("longitude").valueFloat();
   b6e9c:	4a7e      	ldr	r2, [pc, #504]	; (b7098 <loop+0x460>)
   b6e9e:	a90a      	add	r1, sp, #40	; 0x28
   b6ea0:	a810      	add	r0, sp, #64	; 0x40
   b6ea2:	f000 ff7f 	bl	b7da4 <_ZNK13JsonReference3keyEPKc>
   b6ea6:	a810      	add	r0, sp, #64	; 0x40
   b6ea8:	eeb0 0a49 	vmov.f32	s0, s18
   b6eac:	f000 fe74 	bl	b7b98 <_ZNK13JsonReference10valueFloatEf>
   b6eb0:	a810      	add	r0, sp, #64	; 0x40
   b6eb2:	eeb0 8a40 	vmov.f32	s16, s0
   b6eb6:	f000 fd1d 	bl	b78f4 <_ZN13JsonReferenceD1Ev>
        if(nextStation.length() <= 1){
   b6eba:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b6ebc:	2b01      	cmp	r3, #1
   b6ebe:	f200 8082 	bhi.w	b6fc6 <loop+0x38e>
          Serial.println("break");
   b6ec2:	f003 fe0b 	bl	baadc <_Z16_fetch_usbserialv>
   b6ec6:	4975      	ldr	r1, [pc, #468]	; (b709c <loop+0x464>)
        if(cityIndex == 0 && (i == 2 || currentRailway.name == purpleLineCTA.name)){
   b6ec8:	4f75      	ldr	r7, [pc, #468]	; (b70a0 <loop+0x468>)
          Wire.beginTransmission(brownLineCTAAdr);
   b6eca:	f8df 81e0 	ldr.w	r8, [pc, #480]	; b70ac <loop+0x474>
          Serial.println("break");
   b6ece:	f003 f87a 	bl	b9fc6 <_ZN5Print7printlnEPKc>
          break;
   b6ed2:	a817      	add	r0, sp, #92	; 0x5c
   b6ed4:	f003 f8d6 	bl	ba084 <_ZN6StringD1Ev>
   b6ed8:	a813      	add	r0, sp, #76	; 0x4c
   b6eda:	f003 f8d3 	bl	ba084 <_ZN6StringD1Ev>
   b6ede:	a80a      	add	r0, sp, #40	; 0x28
   b6ee0:	f000 fd08 	bl	b78f4 <_ZN13JsonReferenceD1Ev>
      for(int i = 0; i < 4; i++){
   b6ee4:	9b03      	ldr	r3, [sp, #12]
   b6ee6:	2500      	movs	r5, #0
   b6ee8:	00de      	lsls	r6, r3, #3
        if(cityIndex == 0 && (i == 2 || currentRailway.name == purpleLineCTA.name)){
   b6eea:	683b      	ldr	r3, [r7, #0]
   b6eec:	2b00      	cmp	r3, #0
   b6eee:	f040 826e 	bne.w	b73ce <loop+0x796>
   b6ef2:	2d02      	cmp	r5, #2
   b6ef4:	d006      	beq.n	b6f04 <loop+0x2cc>
   b6ef6:	496b      	ldr	r1, [pc, #428]	; (b70a4 <loop+0x46c>)
   b6ef8:	a827      	add	r0, sp, #156	; 0x9c
   b6efa:	f7fd fd05 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6efe:	2800      	cmp	r0, #0
   b6f00:	f000 8255 	beq.w	b73ae <loop+0x776>
          Wire.beginTransmission(brownLineCTAAdr);
   b6f04:	f003 ff38 	bl	bad78 <_Z19__fetch_global_Wirev>
   b6f08:	f8d8 1000 	ldr.w	r1, [r8]
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b6f0c:	f002 fece 	bl	b9cac <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(String(currentRailway.colors[0].c_str()));
   b6f10:	f003 ff32 	bl	bad78 <_Z19__fetch_global_Wirev>
   b6f14:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   b6f16:	4604      	mov	r4, r0
   b6f18:	6819      	ldr	r1, [r3, #0]
   b6f1a:	a817      	add	r0, sp, #92	; 0x5c
   b6f1c:	f003 f8fd 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
   b6f20:	9917      	ldr	r1, [sp, #92]	; 0x5c
   b6f22:	4620      	mov	r0, r4
   b6f24:	f7fd f980 	bl	b4228 <_ZN5Print5writeEPKc.isra.0>
   b6f28:	a817      	add	r0, sp, #92	; 0x5c
   b6f2a:	f003 f8ab 	bl	ba084 <_ZN6StringD1Ev>
        Wire.write(String(currentRailway.colors[1].c_str()));
   b6f2e:	f003 ff23 	bl	bad78 <_Z19__fetch_global_Wirev>
   b6f32:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   b6f34:	4604      	mov	r4, r0
   b6f36:	6999      	ldr	r1, [r3, #24]
   b6f38:	a817      	add	r0, sp, #92	; 0x5c
   b6f3a:	f003 f8ee 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
   b6f3e:	9917      	ldr	r1, [sp, #92]	; 0x5c
   b6f40:	4620      	mov	r0, r4
   b6f42:	f7fd f971 	bl	b4228 <_ZN5Print5writeEPKc.isra.0>
   b6f46:	a817      	add	r0, sp, #92	; 0x5c
   b6f48:	f003 f89c 	bl	ba084 <_ZN6StringD1Ev>
        Wire.endTransmission();
   b6f4c:	f003 ff14 	bl	bad78 <_Z19__fetch_global_Wirev>
   b6f50:	f002 feb3 	bl	b9cba <_ZN7TwoWire15endTransmissionEv>
        if(cityIndex == 0 && (i == 2 || currentRailway.name == purpleLineCTA.name)){
   b6f54:	683b      	ldr	r3, [r7, #0]
   b6f56:	2b00      	cmp	r3, #0
   b6f58:	f040 824f 	bne.w	b73fa <loop+0x7c2>
   b6f5c:	2d02      	cmp	r5, #2
   b6f5e:	d006      	beq.n	b6f6e <loop+0x336>
   b6f60:	4950      	ldr	r1, [pc, #320]	; (b70a4 <loop+0x46c>)
   b6f62:	a827      	add	r0, sp, #156	; 0x9c
   b6f64:	f7fd fcd0 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6f68:	2800      	cmp	r0, #0
   b6f6a:	f000 8236 	beq.w	b73da <loop+0x7a2>
          Wire.beginTransmission(brownLineCTAAdr);
   b6f6e:	f003 ff03 	bl	bad78 <_Z19__fetch_global_Wirev>
   b6f72:	f8d8 1000 	ldr.w	r1, [r8]
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b6f76:	f002 fe99 	bl	b9cac <_ZN7TwoWire17beginTransmissionEi>
        if(cityIndex == 0){
   b6f7a:	683c      	ldr	r4, [r7, #0]
   b6f7c:	2c00      	cmp	r4, #0
   b6f7e:	f040 82e5 	bne.w	b754c <loop+0x914>
          if(i == 2){
   b6f82:	2d02      	cmp	r5, #2
   b6f84:	f040 826d 	bne.w	b7462 <loop+0x82a>
            if(currentRailway.name == greenLineCTA.name){
   b6f88:	4947      	ldr	r1, [pc, #284]	; (b70a8 <loop+0x470>)
   b6f8a:	f8df 9124 	ldr.w	r9, [pc, #292]	; b70b0 <loop+0x478>
   b6f8e:	a827      	add	r0, sp, #156	; 0x9c
   b6f90:	f7fd fcba 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6f94:	2800      	cmp	r0, #0
   b6f96:	f000 8236 	beq.w	b7406 <loop+0x7ce>
   b6f9a:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6f9e:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   b6fa2:	1a9b      	subs	r3, r3, r2
   b6fa4:	109a      	asrs	r2, r3, #2
   b6fa6:	e9d1 1300 	ldrd	r1, r3, [r1]
   b6faa:	1a5b      	subs	r3, r3, r1
   b6fac:	109b      	asrs	r3, r3, #2
              for(int j = 0; j < brownLineCTA.outputs[0].size() + (brownLineCTA.outputs[2].size() / 2); j++){
   b6fae:	eb03 0352 	add.w	r3, r3, r2, lsr #1
   b6fb2:	42a3      	cmp	r3, r4
   b6fb4:	f240 82ca 	bls.w	b754c <loop+0x914>
                Wire.write('0');
   b6fb8:	f003 fede 	bl	bad78 <_Z19__fetch_global_Wirev>
   b6fbc:	2130      	movs	r1, #48	; 0x30
   b6fbe:	f7fd f92f 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
              for(int j = 0; j < brownLineCTA.outputs[0].size() + (brownLineCTA.outputs[2].size() / 2); j++){
   b6fc2:	3401      	adds	r4, #1
   b6fc4:	e7e9      	b.n	b6f9a <loop+0x362>
   b6fc6:	e9dd 3507 	ldrd	r3, r5, [sp, #28]
   b6fca:	1aed      	subs	r5, r5, r3
   b6fcc:	10ed      	asrs	r5, r5, #3
        for(int i = 0; i < checkpointCount; i++){
   b6fce:	f04f 0a00 	mov.w	sl, #0
   b6fd2:	45aa      	cmp	sl, r5
	return *(this->_M_impl._M_start + __n);
   b6fd4:	9907      	ldr	r1, [sp, #28]
   b6fd6:	da3b      	bge.n	b7050 <loop+0x418>
   b6fd8:	eb01 06ca 	add.w	r6, r1, sl, lsl #3
    }

    float getDistance(float trainLat, float trainLon){
      return sqrt(pow((trainLat - lat), 2) + pow((trainLon - lon), 2));
   b6fdc:	edd6 7a00 	vldr	s15, [r6]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b6fe0:	ee78 7ae7 	vsub.f32	s15, s17, s15
   b6fe4:	ee17 0a90 	vmov	r0, s15
   b6fe8:	f004 fb64 	bl	bb6b4 <__aeabi_f2d>
   b6fec:	edd6 7a01 	vldr	s15, [r6, #4]
   b6ff0:	ee78 7a67 	vsub.f32	s15, s16, s15
   b6ff4:	4602      	mov	r2, r0
   b6ff6:	460b      	mov	r3, r1
   b6ff8:	ee17 0a90 	vmov	r0, s15
   b6ffc:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b7000:	f004 fb58 	bl	bb6b4 <__aeabi_f2d>
   b7004:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b7008:	ec41 0b1a 	vmov	d10, r0, r1
   b700c:	4610      	mov	r0, r2
   b700e:	4619      	mov	r1, r3
   b7010:	f004 fba8 	bl	bb764 <__aeabi_dmul>
   b7014:	ec53 2b1a 	vmov	r2, r3, d10
   b7018:	4606      	mov	r6, r0
   b701a:	460f      	mov	r7, r1
   b701c:	ee1a 0a10 	vmov	r0, s20
   b7020:	4619      	mov	r1, r3
   b7022:	f004 fb9f 	bl	bb764 <__aeabi_dmul>
   b7026:	4602      	mov	r2, r0
   b7028:	460b      	mov	r3, r1
   b702a:	4630      	mov	r0, r6
   b702c:	4639      	mov	r1, r7
   b702e:	f004 f9e3 	bl	bb3f8 <__adddf3>
   b7032:	ec41 0b10 	vmov	d0, r0, r1
   b7036:	f004 f8d3 	bl	bb1e0 <sqrt>
          currentRailway.distances[i] = currentCheckpoints[i].getDistance(lat, lon);
   b703a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
   b703c:	ec51 0b10 	vmov	r0, r1, d0
   b7040:	f004 fe60 	bl	bbd04 <__aeabi_d2f>
   b7044:	eb06 068a 	add.w	r6, r6, sl, lsl #2
        for(int i = 0; i < checkpointCount; i++){
   b7048:	f10a 0a01 	add.w	sl, sl, #1
   b704c:	6030      	str	r0, [r6, #0]
   b704e:	e7c0      	b.n	b6fd2 <loop+0x39a>
      : _M_current(__i) { }
   b7050:	e9dd 671e 	ldrd	r6, r7, [sp, #120]	; 0x78
    _GLIBCXX14_CONSTEXPR
    _ForwardIterator
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
		  _Compare __comp)
    {
      if (__first == __last)
   b7054:	42be      	cmp	r6, r7
   b7056:	d02f      	beq.n	b70b8 <loop+0x480>
   b7058:	1d32      	adds	r2, r6, #4
   b705a:	4633      	mov	r3, r6
	return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
   b705c:	4297      	cmp	r7, r2
	++_M_current;
   b705e:	4610      	mov	r0, r2
   b7060:	d02b      	beq.n	b70ba <loop+0x482>
	if (__comp(__first, __result))
   b7062:	edd3 7a00 	vldr	s15, [r3]
   b7066:	ed90 7a00 	vldr	s14, [r0]
   b706a:	eeb4 7a67 	vcmp.f32	s14, s15
   b706e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7072:	f102 0204 	add.w	r2, r2, #4
   b7076:	bf48      	it	mi
   b7078:	4603      	movmi	r3, r0
   b707a:	e7ef      	b.n	b705c <loop+0x424>
   b707c:	20037eb8 	.word	0x20037eb8
   b7080:	000be1fb 	.word	0x000be1fb
   b7084:	000be201 	.word	0x000be201
   b7088:	000be208 	.word	0x000be208
   b708c:	000be212 	.word	0x000be212
   b7090:	000be21e 	.word	0x000be21e
   b7094:	000be228 	.word	0x000be228
   b7098:	000be231 	.word	0x000be231
   b709c:	000be23b 	.word	0x000be23b
   b70a0:	20035118 	.word	0x20035118
   b70a4:	2003e520 	.word	0x2003e520
   b70a8:	20035508 	.word	0x20035508
   b70ac:	200354bc 	.word	0x200354bc
   b70b0:	20035450 	.word	0x20035450
   b70b4:	7dcccccc 	.word	0x7dcccccc
   b70b8:	4633      	mov	r3, r6
        if(closestIndex == currentRailway.tripleIndex){
   b70ba:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b70bc:	1b9b      	subs	r3, r3, r6
   b70be:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
   b70c2:	ea4f 00a3 	mov.w	r0, r3, asr #2
          closestIndex = currentRailway.loopIndex;
   b70c6:	bf08      	it	eq
   b70c8:	9831      	ldreq	r0, [sp, #196]	; 0xc4
   b70ca:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
        x1 = currentCheckpoints[closestIndex].lat;
   b70ce:	edd3 7a00 	vldr	s15, [r3]
        y1 = currentCheckpoints[closestIndex].lon;
   b70d2:	edd3 6a01 	vldr	s13, [r3, #4]
        if(currentCheckpoints[closestIndex].lat > lat){
   b70d6:	eef4 8ae7 	vcmpe.f32	s17, s15
   b70da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          slope = (y1 - y) / (x1 - x);
   b70de:	ee77 5ae8 	vsub.f32	s11, s15, s17
          slope = (y - y1) / (x - x1);
   b70e2:	bf55      	itete	pl
   b70e4:	ee38 6a66 	vsubpl.f32	s12, s16, s13
          slope = (y1 - y) / (x1 - x);
   b70e8:	ee76 7ac8 	vsubmi.f32	s15, s13, s16
          slope = (y - y1) / (x - x1);
   b70ec:	ee78 7ae7 	vsubpl.f32	s15, s17, s15
          slope = (y1 - y) / (x1 - x);
   b70f0:	ee87 7aa5 	vdivmi.f32	s14, s15, s11
   b70f4:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
          slope = (y - y1) / (x - x1);
   b70f8:	bf58      	it	pl
   b70fa:	ee86 7a27 	vdivpl.f32	s14, s12, s15
        if(slope == 0){
   b70fe:	ed5f 7a13 	vldr	s15, [pc, #-76]	; b70b4 <loop+0x47c>
   b7102:	eeb5 7a40 	vcmp.f32	s14, #0.0
   b7106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b710a:	d00a      	beq.n	b7122 <loop+0x4ea>
        }else if(slope >= __FLT_MAX__ / 10){
   b710c:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b7110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          perpendicularSlope = -1 / slope;
   b7114:	bfba      	itte	lt
   b7116:	eebf 6a00 	vmovlt.f32	s12, #240	; 0xbf800000 -1.0
   b711a:	eec6 7a07 	vdivlt.f32	s15, s12, s14
          perpendicularSlope = 0;
   b711e:	eef0 7a49 	vmovge.f32	s15, s18
          nearestSide = (perpendicularSlope * (currentCheckpoints[closestIndex].lat - x) + y) > currentCheckpoints[closestIndex].lon;
   b7122:	eeb0 7a48 	vmov.f32	s14, s16
   b7126:	eea7 7aa5 	vfma.f32	s14, s15, s11
   b712a:	eef4 6ac7 	vcmpe.f32	s13, s14
   b712e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7132:	bf4c      	ite	mi
   b7134:	2701      	movmi	r7, #1
   b7136:	2700      	movpl	r7, #0
        if(closestIndex == 0){
   b7138:	2800      	cmp	r0, #0
   b713a:	d171      	bne.n	b7220 <loop+0x5e8>
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b713c:	ed91 7a02 	vldr	s14, [r1, #8]
          if(currentRailway.loopIndex == closestIndex){
   b7140:	f8dd c0c4 	ldr.w	ip, [sp, #196]	; 0xc4
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b7144:	ee37 7a68 	vsub.f32	s14, s14, s17
   b7148:	eef0 6a48 	vmov.f32	s13, s16
   b714c:	eee7 6a27 	vfma.f32	s13, s14, s15
   b7150:	ed91 7a03 	vldr	s14, [r1, #12]
   b7154:	eef4 6ac7 	vcmpe.f32	s13, s14
   b7158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b715c:	bfcc      	ite	gt
   b715e:	2501      	movgt	r5, #1
   b7160:	2500      	movle	r5, #0
          if(currentRailway.loopIndex == closestIndex){
   b7162:	f1bc 0f00 	cmp.w	ip, #0
   b7166:	d11d      	bne.n	b71a4 <loop+0x56c>
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b7168:	1e53      	subs	r3, r2, #1
   b716a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
            if(nearestSide != pointSide){
   b716e:	42bd      	cmp	r5, r7
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b7170:	ed91 0a00 	vldr	s0, [r1]
   b7174:	ed91 7a01 	vldr	s14, [r1, #4]
            if(nearestSide != pointSide){
   b7178:	f040 809b 	bne.w	b72b2 <loop+0x67a>
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b717c:	ee70 8a68 	vsub.f32	s17, s0, s17
   b7180:	eea8 8aa7 	vfma.f32	s16, s17, s15
   b7184:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b7188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            }else if(nearestSide != loopPointSide){
   b718c:	bfcc      	ite	gt
   b718e:	2101      	movgt	r1, #1
   b7190:	2100      	movle	r1, #0
   b7192:	42a9      	cmp	r1, r5
              }else if(nearestSide != loopPointSide){
   b7194:	d100      	bne.n	b7198 <loop+0x560>
                secondClosestIndex = currentRailway.tripleIndex + 1;
   b7196:	1c53      	adds	r3, r2, #1
          if(closestIndex < secondClosestIndex){
   b7198:	429a      	cmp	r2, r3
   b719a:	f2c0 808c 	blt.w	b72b6 <loop+0x67e>
   b719e:	4611      	mov	r1, r2
   b71a0:	469c      	mov	ip, r3
   b71a2:	e005      	b.n	b71b0 <loop+0x578>
            if(pointSide == nearestSide){
   b71a4:	42bd      	cmp	r5, r7
   b71a6:	d074      	beq.n	b7292 <loop+0x65a>
   b71a8:	4602      	mov	r2, r0
   b71aa:	4684      	mov	ip, r0
   b71ac:	2301      	movs	r3, #1
   b71ae:	4619      	mov	r1, r3
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b71b0:	eb06 008c 	add.w	r0, r6, ip, lsl #2
   b71b4:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   b71b8:	ed90 7a00 	vldr	s14, [r0]
   b71bc:	edd1 7a00 	vldr	s15, [r1]
   b71c0:	9821      	ldr	r0, [sp, #132]	; 0x84
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b71c2:	9d35      	ldr	r5, [sp, #212]	; 0xd4
          segmentPos *= currentRailway.scalers[lowerIndex];
   b71c4:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b71c8:	ee77 7a27 	vadd.f32	s15, s14, s15
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b71cc:	4295      	cmp	r5, r2
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b71ce:	eec7 6a27 	vdiv.f32	s13, s14, s15
          segmentPos *= currentRailway.scalers[lowerIndex];
   b71d2:	ee07 1a90 	vmov	s15, r1
   b71d6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   b71da:	ee28 8a26 	vmul.f32	s16, s16, s13
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b71de:	db06      	blt.n	b71ee <loop+0x5b6>
   b71e0:	9934      	ldr	r1, [sp, #208]	; 0xd0
   b71e2:	4291      	cmp	r1, r2
   b71e4:	dc03      	bgt.n	b71ee <loop+0x5b6>
   b71e6:	429d      	cmp	r5, r3
   b71e8:	db01      	blt.n	b71ee <loop+0x5b6>
   b71ea:	4299      	cmp	r1, r3
   b71ec:	dd66      	ble.n	b72bc <loop+0x684>
          else if(closestIndex < currentRailway.lowerLoopBound || secondClosestIndex < currentRailway.lowerLoopBound){
   b71ee:	9d32      	ldr	r5, [sp, #200]	; 0xc8
   b71f0:	4295      	cmp	r5, r2
   b71f2:	dc66      	bgt.n	b72c2 <loop+0x68a>
   b71f4:	429d      	cmp	r5, r3
   b71f6:	dc64      	bgt.n	b72c2 <loop+0x68a>
          else if(closestIndex > currentRailway.upperLoopBound || secondClosestIndex > currentRailway.upperLoopBound){
   b71f8:	9933      	ldr	r1, [sp, #204]	; 0xcc
   b71fa:	4291      	cmp	r1, r2
   b71fc:	db65      	blt.n	b72ca <loop+0x692>
   b71fe:	4299      	cmp	r1, r3
   b7200:	db63      	blt.n	b72ca <loop+0x692>
   b7202:	4629      	mov	r1, r5
            inLoop = true;
   b7204:	464b      	mov	r3, r9
            pcbSegment = 2;
   b7206:	2502      	movs	r5, #2
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b7208:	458c      	cmp	ip, r1
   b720a:	dd61      	ble.n	b72d0 <loop+0x698>
            segmentPos += currentRailway.scalers[i];
   b720c:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   b7210:	ee07 2a90 	vmov	s15, r2
   b7214:	eef8 7ae7 	vcvt.f32.s32	s15, s15
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b7218:	3101      	adds	r1, #1
            segmentPos += currentRailway.scalers[i];
   b721a:	ee38 8a27 	vadd.f32	s16, s16, s15
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b721e:	e7f3      	b.n	b7208 <loop+0x5d0>
   b7220:	f1ac 0c08 	sub.w	ip, ip, #8
   b7224:	448c      	add	ip, r1
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b7226:	ed9c 7a00 	vldr	s14, [ip]
   b722a:	ee37 7a68 	vsub.f32	s14, s14, s17
   b722e:	eef0 6a48 	vmov.f32	s13, s16
   b7232:	eee7 6a27 	vfma.f32	s13, s14, s15
          if(closestIndex == checkpointCount - 1){
   b7236:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b723a:	1e43      	subs	r3, r0, #1
   b723c:	ed9c 7a01 	vldr	s14, [ip, #4]
   b7240:	eef4 6ac7 	vcmpe.f32	s13, s14
   b7244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7248:	bfcc      	ite	gt
   b724a:	f04f 0c01 	movgt.w	ip, #1
   b724e:	f04f 0c00 	movle.w	ip, #0
          if(closestIndex == checkpointCount - 1){
   b7252:	4586      	cmp	lr, r0
   b7254:	d129      	bne.n	b72aa <loop+0x672>
            if(closestIndex == currentRailway.loopIndex){
   b7256:	9b31      	ldr	r3, [sp, #196]	; 0xc4
   b7258:	4283      	cmp	r3, r0
   b725a:	d118      	bne.n	b728e <loop+0x656>
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b725c:	1e53      	subs	r3, r2, #1
   b725e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
              if(nearestSide != pointSide){
   b7262:	45bc      	cmp	ip, r7
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b7264:	ed91 0a00 	vldr	s0, [r1]
   b7268:	ed91 7a01 	vldr	s14, [r1, #4]
              if(nearestSide != pointSide){
   b726c:	d002      	beq.n	b7274 <loop+0x63c>
                secondClosestIndex = checkpointCount - 2;
   b726e:	1eab      	subs	r3, r5, #2
   b7270:	4602      	mov	r2, r0
   b7272:	e791      	b.n	b7198 <loop+0x560>
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b7274:	ee70 8a68 	vsub.f32	s17, s0, s17
   b7278:	eea8 8aa7 	vfma.f32	s16, s17, s15
   b727c:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b7280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
              }else if(nearestSide != loopPointSide){
   b7284:	bfcc      	ite	gt
   b7286:	2101      	movgt	r1, #1
   b7288:	2100      	movle	r1, #0
   b728a:	4561      	cmp	r1, ip
   b728c:	e782      	b.n	b7194 <loop+0x55c>
              if(pointSide == nearestSide){
   b728e:	45bc      	cmp	ip, r7
   b7290:	d1ed      	bne.n	b726e <loop+0x636>
        String destNm = train.key("destination").valueString();
   b7292:	a817      	add	r0, sp, #92	; 0x5c
   b7294:	f002 fef6 	bl	ba084 <_ZN6StringD1Ev>
        String nextStation = train.key("next_stop").valueString();
   b7298:	a813      	add	r0, sp, #76	; 0x4c
   b729a:	f002 fef3 	bl	ba084 <_ZN6StringD1Ev>
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b729e:	a80a      	add	r0, sp, #40	; 0x28
        count++;
   b72a0:	f108 0801 	add.w	r8, r8, #1
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b72a4:	f000 fb26 	bl	b78f4 <_ZN13JsonReferenceD1Ev>
   b72a8:	e5a0      	b.n	b6dec <loop+0x1b4>
            if(pointSide == nearestSide){
   b72aa:	45bc      	cmp	ip, r7
   b72ac:	d1e0      	bne.n	b7270 <loop+0x638>
              secondClosestIndex = closestIndex + 1;
   b72ae:	1c43      	adds	r3, r0, #1
   b72b0:	e7de      	b.n	b7270 <loop+0x638>
   b72b2:	4602      	mov	r2, r0
   b72b4:	e77a      	b.n	b71ac <loop+0x574>
   b72b6:	4619      	mov	r1, r3
   b72b8:	4694      	mov	ip, r2
   b72ba:	e779      	b.n	b71b0 <loop+0x578>
        bool inLoop = false;
   b72bc:	2300      	movs	r3, #0
            pcbSegment = 3;
   b72be:	2503      	movs	r5, #3
   b72c0:	e7a2      	b.n	b7208 <loop+0x5d0>
            lowerScaleBound = 0;
   b72c2:	2100      	movs	r1, #0
        bool inLoop = false;
   b72c4:	460b      	mov	r3, r1
            pcbSegment = 0;
   b72c6:	460d      	mov	r5, r1
   b72c8:	e79e      	b.n	b7208 <loop+0x5d0>
        bool inLoop = false;
   b72ca:	2300      	movs	r3, #0
            pcbSegment = 1;
   b72cc:	2501      	movs	r5, #1
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b72ce:	e79b      	b.n	b7208 <loop+0x5d0>
          if(cityIndex == 0){
   b72d0:	4ab7      	ldr	r2, [pc, #732]	; (b75b0 <loop+0x978>)
   b72d2:	9e24      	ldr	r6, [sp, #144]	; 0x90
   b72d4:	6812      	ldr	r2, [r2, #0]
   b72d6:	2a00      	cmp	r2, #0
   b72d8:	d15b      	bne.n	b7392 <loop+0x75a>
            if(inLoop){
   b72da:	2b00      	cmp	r3, #0
   b72dc:	d043      	beq.n	b7366 <loop+0x72e>
              if(currentRailway.name == pinkLineCTA.name){
   b72de:	49b5      	ldr	r1, [pc, #724]	; (b75b4 <loop+0x97c>)
   b72e0:	a827      	add	r0, sp, #156	; 0x9c
   b72e2:	f7fd fb11 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b72e6:	b1f0      	cbz	r0, b7326 <loop+0x6ee>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b72e8:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
   b72ec:	1a9b      	subs	r3, r3, r2
   b72ee:	109b      	asrs	r3, r3, #2
                segmentPos = (float)currentRailway.outputs[2].size() - segmentPos;
   b72f0:	ee07 3a90 	vmov	s15, r3
   b72f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b72f8:	ee37 8ac8 	vsub.f32	s16, s15, s16
            if(pcbSegment == 1 && currentRailway.name == greenLineCTA.name){
   b72fc:	2d01      	cmp	r5, #1
   b72fe:	d140      	bne.n	b7382 <loop+0x74a>
   b7300:	49ad      	ldr	r1, [pc, #692]	; (b75b8 <loop+0x980>)
   b7302:	a827      	add	r0, sp, #156	; 0x9c
   b7304:	f7fd fb00 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7308:	2800      	cmp	r0, #0
   b730a:	d042      	beq.n	b7392 <loop+0x75a>
   b730c:	e9d6 2303 	ldrd	r2, r3, [r6, #12]
   b7310:	1a9b      	subs	r3, r3, r2
   b7312:	109b      	asrs	r3, r3, #2
              segmentPos = (float)currentRailway.outputs[1].size() - segmentPos;
   b7314:	ee07 3a90 	vmov	s15, r3
   b7318:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b731c:	ee37 8ac8 	vsub.f32	s16, s15, s16
              trainDir = 6 - trainDir;
   b7320:	f1c4 0406 	rsb	r4, r4, #6
   b7324:	e035      	b.n	b7392 <loop+0x75a>
              }else if(currentRailway.name == orangeLineCTA.name){
   b7326:	49a5      	ldr	r1, [pc, #660]	; (b75bc <loop+0x984>)
   b7328:	a827      	add	r0, sp, #156	; 0x9c
   b732a:	f7fd faed 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b732e:	2800      	cmp	r0, #0
   b7330:	d0e4      	beq.n	b72fc <loop+0x6c4>
	return *(this->_M_impl._M_start + __n);
   b7332:	4ba3      	ldr	r3, [pc, #652]	; (b75c0 <loop+0x988>)
   b7334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7336:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
   b733a:	1ad2      	subs	r2, r2, r3
   b733c:	1092      	asrs	r2, r2, #2
                segmentPos = (int)(segmentPos + orangeLineCTA.outputs[2].size() / 2) % orangeLineCTA.outputs[2].size();
   b733e:	0853      	lsrs	r3, r2, #1
   b7340:	ee07 3a90 	vmov	s15, r3
   b7344:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b7348:	ee37 8a88 	vadd.f32	s16, s15, s16
   b734c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   b7350:	ee17 3a90 	vmov	r3, s15
   b7354:	fbb3 f1f2 	udiv	r1, r3, r2
   b7358:	fb02 3311 	mls	r3, r2, r1, r3
   b735c:	ee08 3a10 	vmov	s16, r3
   b7360:	eeb8 8a48 	vcvt.f32.u32	s16, s16
   b7364:	e7ca      	b.n	b72fc <loop+0x6c4>
              if(currentRailway.name == brownLineCTA.name || currentRailway.name == purpleLineCTA.name){
   b7366:	4997      	ldr	r1, [pc, #604]	; (b75c4 <loop+0x98c>)
   b7368:	a827      	add	r0, sp, #156	; 0x9c
   b736a:	f7fd facd 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b736e:	b928      	cbnz	r0, b737c <loop+0x744>
   b7370:	4995      	ldr	r1, [pc, #596]	; (b75c8 <loop+0x990>)
   b7372:	a827      	add	r0, sp, #156	; 0x9c
   b7374:	f7fd fac8 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7378:	2800      	cmp	r0, #0
   b737a:	d0bf      	beq.n	b72fc <loop+0x6c4>
                trainDir = 6 - trainDir;
   b737c:	f1c4 0406 	rsb	r4, r4, #6
   b7380:	e7bc      	b.n	b72fc <loop+0x6c4>
            if(pcbSegment == 3 && currentRailway.name == pinkLineCTA.name){
   b7382:	2d03      	cmp	r5, #3
   b7384:	d105      	bne.n	b7392 <loop+0x75a>
   b7386:	498b      	ldr	r1, [pc, #556]	; (b75b4 <loop+0x97c>)
   b7388:	a827      	add	r0, sp, #156	; 0x9c
   b738a:	f7fd fabd 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b738e:	2800      	cmp	r0, #0
   b7390:	d1c6      	bne.n	b7320 <loop+0x6e8>
  { return __builtin_floorf(__x); }
   b7392:	eeb0 0a48 	vmov.f32	s0, s16
   b7396:	f003 fedd 	bl	bb154 <floorf>
	return *(this->_M_impl._M_start + __n);
   b739a:	230c      	movs	r3, #12
          currentRailway.outputs[pcbSegment][(int)floor(segmentPos)] = trainDir;
   b739c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b73a0:	435d      	muls	r5, r3
   b73a2:	ee10 2a10 	vmov	r2, s0
   b73a6:	5973      	ldr	r3, [r6, r5]
   b73a8:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b73ac:	e771      	b.n	b7292 <loop+0x65a>
        }else if(cityIndex == 0 && i == 3){
   b73ae:	2d03      	cmp	r5, #3
   b73b0:	d10d      	bne.n	b73ce <loop+0x796>
          if(currentRailway.name == orangeLineCTA.name){
   b73b2:	4982      	ldr	r1, [pc, #520]	; (b75bc <loop+0x984>)
   b73b4:	4c85      	ldr	r4, [pc, #532]	; (b75cc <loop+0x994>)
   b73b6:	a827      	add	r0, sp, #156	; 0x9c
   b73b8:	f7fd faa6 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b73bc:	b118      	cbz	r0, b73c6 <loop+0x78e>
            Wire.beginTransmission(greenLineCTAAdr[0]);
   b73be:	f003 fcdb 	bl	bad78 <_Z19__fetch_global_Wirev>
   b73c2:	6821      	ldr	r1, [r4, #0]
   b73c4:	e5a2      	b.n	b6f0c <loop+0x2d4>
            Wire.beginTransmission(greenLineCTAAdr[1]);
   b73c6:	f003 fcd7 	bl	bad78 <_Z19__fetch_global_Wirev>
   b73ca:	6861      	ldr	r1, [r4, #4]
   b73cc:	e59e      	b.n	b6f0c <loop+0x2d4>
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b73ce:	f003 fcd3 	bl	bad78 <_Z19__fetch_global_Wirev>
   b73d2:	f8db 3000 	ldr.w	r3, [fp]
   b73d6:	5999      	ldr	r1, [r3, r6]
   b73d8:	e598      	b.n	b6f0c <loop+0x2d4>
        }else if(cityIndex == 0 && i == 3){
   b73da:	2d03      	cmp	r5, #3
   b73dc:	d10d      	bne.n	b73fa <loop+0x7c2>
          if(currentRailway.name == orangeLineCTA.name){
   b73de:	4977      	ldr	r1, [pc, #476]	; (b75bc <loop+0x984>)
   b73e0:	4c7a      	ldr	r4, [pc, #488]	; (b75cc <loop+0x994>)
   b73e2:	a827      	add	r0, sp, #156	; 0x9c
   b73e4:	f7fd fa90 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b73e8:	b118      	cbz	r0, b73f2 <loop+0x7ba>
            Wire.beginTransmission(greenLineCTAAdr[0]);
   b73ea:	f003 fcc5 	bl	bad78 <_Z19__fetch_global_Wirev>
   b73ee:	6821      	ldr	r1, [r4, #0]
   b73f0:	e5c1      	b.n	b6f76 <loop+0x33e>
            Wire.beginTransmission(greenLineCTAAdr[1]);
   b73f2:	f003 fcc1 	bl	bad78 <_Z19__fetch_global_Wirev>
   b73f6:	6861      	ldr	r1, [r4, #4]
   b73f8:	e5bd      	b.n	b6f76 <loop+0x33e>
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b73fa:	f003 fcbd 	bl	bad78 <_Z19__fetch_global_Wirev>
   b73fe:	f8db 3000 	ldr.w	r3, [fp]
   b7402:	5999      	ldr	r1, [r3, r6]
   b7404:	e5b7      	b.n	b6f76 <loop+0x33e>
            else if(currentRailway.name == brownLineCTA.name || currentRailway.name == purpleLineCTA.name){
   b7406:	f109 0130 	add.w	r1, r9, #48	; 0x30
   b740a:	a827      	add	r0, sp, #156	; 0x9c
   b740c:	f7fd fa7c 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7410:	b920      	cbnz	r0, b741c <loop+0x7e4>
   b7412:	496d      	ldr	r1, [pc, #436]	; (b75c8 <loop+0x990>)
   b7414:	a827      	add	r0, sp, #156	; 0x9c
   b7416:	f7fd fa77 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b741a:	b198      	cbz	r0, b7444 <loop+0x80c>
   b741c:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7420:	e9d2 2300 	ldrd	r2, r3, [r2]
   b7424:	1a9b      	subs	r3, r3, r2
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b7426:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b742a:	f080 808f 	bcs.w	b754c <loop+0x914>
                Wire.write((char)currentRailway.outputs[0][j] + '0');
   b742e:	f003 fca3 	bl	bad78 <_Z19__fetch_global_Wirev>
	return *(this->_M_impl._M_start + __n);
   b7432:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b7434:	681b      	ldr	r3, [r3, #0]
   b7436:	f813 1024 	ldrb.w	r1, [r3, r4, lsl #2]
   b743a:	3130      	adds	r1, #48	; 0x30
   b743c:	f7fc fef0 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b7440:	3401      	adds	r4, #1
   b7442:	e7eb      	b.n	b741c <loop+0x7e4>
   b7444:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7448:	e9d2 2300 	ldrd	r2, r3, [r2]
   b744c:	1a9b      	subs	r3, r3, r2
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b744e:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b7452:	d27b      	bcs.n	b754c <loop+0x914>
                Wire.write('0');
   b7454:	f003 fc90 	bl	bad78 <_Z19__fetch_global_Wirev>
   b7458:	2130      	movs	r1, #48	; 0x30
   b745a:	f7fc fee1 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b745e:	3401      	adds	r4, #1
   b7460:	e7f0      	b.n	b7444 <loop+0x80c>
          if(i == 1 && (currentRailway.name == brownLineCTA.name || currentRailway.name == purpleLineCTA.name)){
   b7462:	2d01      	cmp	r5, #1
   b7464:	f040 80ba 	bne.w	b75dc <loop+0x9a4>
   b7468:	4956      	ldr	r1, [pc, #344]	; (b75c4 <loop+0x98c>)
   b746a:	a827      	add	r0, sp, #156	; 0x9c
   b746c:	f7fd fa4c 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7470:	b928      	cbnz	r0, b747e <loop+0x846>
   b7472:	4955      	ldr	r1, [pc, #340]	; (b75c8 <loop+0x990>)
   b7474:	a827      	add	r0, sp, #156	; 0x9c
   b7476:	f7fd fa47 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b747a:	2800      	cmp	r0, #0
   b747c:	d066      	beq.n	b754c <loop+0x914>
	return *(this->_M_impl._M_start + __n);
   b747e:	9a24      	ldr	r2, [sp, #144]	; 0x90
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7480:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
   b7484:	1a9b      	subs	r3, r3, r2
            for(int j = 0; j < currentRailway.outputs[2].size(); j++){
   b7486:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b748a:	d25f      	bcs.n	b754c <loop+0x914>
              Wire.write('0');
   b748c:	f003 fc74 	bl	bad78 <_Z19__fetch_global_Wirev>
   b7490:	2130      	movs	r1, #48	; 0x30
   b7492:	f7fc fec5 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < currentRailway.outputs[2].size(); j++){
   b7496:	3401      	adds	r4, #1
   b7498:	e7f1      	b.n	b747e <loop+0x846>
          }else if(i == 3 && currentRailway.name == pinkLineCTA.name){
   b749a:	4946      	ldr	r1, [pc, #280]	; (b75b4 <loop+0x97c>)
   b749c:	a827      	add	r0, sp, #156	; 0x9c
   b749e:	f7fd fa33 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b74a2:	2800      	cmp	r0, #0
   b74a4:	d052      	beq.n	b754c <loop+0x914>
	return *(this->_M_impl._M_start + __n);
   b74a6:	f8df 912c 	ldr.w	r9, [pc, #300]	; b75d4 <loop+0x99c>
   b74aa:	f8df a12c 	ldr.w	sl, [pc, #300]	; b75d8 <loop+0x9a0>
   b74ae:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
   b74b2:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b74b6:	e9d0 3200 	ldrd	r3, r2, [r0]
   b74ba:	1ad2      	subs	r2, r2, r3
   b74bc:	e9d1 1309 	ldrd	r1, r3, [r1, #36]	; 0x24
   b74c0:	1a5b      	subs	r3, r3, r1
   b74c2:	109b      	asrs	r3, r3, #2
            for(int j = 0; j < greenLineCTA.outputs[0].size() - pinkLineCTA.outputs[3].size(); j++){
   b74c4:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   b74c8:	42a3      	cmp	r3, r4
   b74ca:	d93f      	bls.n	b754c <loop+0x914>
              Wire.write('0');
   b74cc:	f003 fc54 	bl	bad78 <_Z19__fetch_global_Wirev>
   b74d0:	2130      	movs	r1, #48	; 0x30
   b74d2:	f7fc fea5 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < greenLineCTA.outputs[0].size() - pinkLineCTA.outputs[3].size(); j++){
   b74d6:	3401      	adds	r4, #1
   b74d8:	e7e9      	b.n	b74ae <loop+0x876>
            val = n;
   b74da:	4619      	mov	r1, r3
   b74dc:	e061      	b.n	b75a2 <loop+0x96a>
        Serial.println();
   b74de:	f003 fafd 	bl	baadc <_Z16_fetch_usbserialv>
   b74e2:	f002 fd64 	bl	b9fae <_ZN5Print7printlnEv>
      for(int i = 0; i < 4; i++){
   b74e6:	3501      	adds	r5, #1
        Wire.endTransmission();
   b74e8:	f003 fc46 	bl	bad78 <_Z19__fetch_global_Wirev>
   b74ec:	f002 fbe5 	bl	b9cba <_ZN7TwoWire15endTransmissionEv>
      for(int i = 0; i < 4; i++){
   b74f0:	2d04      	cmp	r5, #4
   b74f2:	f106 0604 	add.w	r6, r6, #4
   b74f6:	f47f acf8 	bne.w	b6eea <loop+0x2b2>
   b74fa:	2300      	movs	r3, #0
          currentRailway.outputs[i][j] = 0;
   b74fc:	461c      	mov	r4, r3
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b74fe:	2200      	movs	r2, #0
	return *(this->_M_impl._M_start + __n);
   b7500:	9924      	ldr	r1, [sp, #144]	; 0x90
   b7502:	18cd      	adds	r5, r1, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7504:	58c8      	ldr	r0, [r1, r3]
   b7506:	6869      	ldr	r1, [r5, #4]
   b7508:	1a09      	subs	r1, r1, r0
   b750a:	ebb2 0fa1 	cmp.w	r2, r1, asr #2
   b750e:	d203      	bcs.n	b7518 <loop+0x8e0>
          currentRailway.outputs[i][j] = 0;
   b7510:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b7514:	3201      	adds	r2, #1
   b7516:	e7f3      	b.n	b7500 <loop+0x8c8>
      for(int i = 0; i < 4; i++){
   b7518:	330c      	adds	r3, #12
   b751a:	2b30      	cmp	r3, #48	; 0x30
   b751c:	d1ef      	bne.n	b74fe <loop+0x8c6>
      Serial.println();
   b751e:	f003 fadd 	bl	baadc <_Z16_fetch_usbserialv>
   b7522:	f002 fd44 	bl	b9fae <_ZN5Print7printlnEv>
      }
   b7526:	a807      	add	r0, sp, #28
   b7528:	f7fd f8f8 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      Railway currentRailway = cities[cityIndex].railways[j];
   b752c:	a81b      	add	r0, sp, #108	; 0x6c
   b752e:	f7fd fcef 	bl	b4f10 <_ZN7RailwayD1Ev>
    for(int j = 0; j < cities[cityIndex].railways.size(); j++){
   b7532:	9b03      	ldr	r3, [sp, #12]
   b7534:	3301      	adds	r3, #1
   b7536:	f7ff bbad 	b.w	b6c94 <loop+0x5c>
    Serial.println();
   b753a:	f003 facf 	bl	baadc <_Z16_fetch_usbserialv>
}
   b753e:	b037      	add	sp, #220	; 0xdc
   b7540:	ecbd 8b06 	vpop	{d8-d10}
   b7544:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Serial.println();
   b7548:	f002 bd31 	b.w	b9fae <_ZN5Print7printlnEv>
        Serial.printf("%s rail part %i: ", currentRailway.name.c_str(), i);
   b754c:	f003 fac6 	bl	baadc <_Z16_fetch_usbserialv>
   b7550:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   b7552:	491f      	ldr	r1, [pc, #124]	; (b75d0 <loop+0x998>)
   b7554:	462b      	mov	r3, r5
   b7556:	f7fc ff4b 	bl	b43f0 <_ZN5Print6printfEPKcz>
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b755a:	240c      	movs	r4, #12
   b755c:	436c      	muls	r4, r5
   b755e:	f04f 0900 	mov.w	r9, #0
	return *(this->_M_impl._M_start + __n);
   b7562:	9a24      	ldr	r2, [sp, #144]	; 0x90
   b7564:	1913      	adds	r3, r2, r4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7566:	5912      	ldr	r2, [r2, r4]
   b7568:	685b      	ldr	r3, [r3, #4]
   b756a:	1a9b      	subs	r3, r3, r2
   b756c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
   b7570:	d2b5      	bcs.n	b74de <loop+0x8a6>
          Wire.write((char)currentRailway.outputs[i][j] + '0');
   b7572:	f003 fc01 	bl	bad78 <_Z19__fetch_global_Wirev>
	return *(this->_M_impl._M_start + __n);
   b7576:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b7578:	591b      	ldr	r3, [r3, r4]
   b757a:	f813 1029 	ldrb.w	r1, [r3, r9, lsl #2]
   b757e:	3130      	adds	r1, #48	; 0x30
   b7580:	f7fc fe4e 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
          Serial.print(currentRailway.outputs[i][j]);
   b7584:	f003 faaa 	bl	baadc <_Z16_fetch_usbserialv>
   b7588:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b758a:	591b      	ldr	r3, [r3, r4]
   b758c:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
        if (n < 0 && base == 10) {
   b7590:	2b00      	cmp	r3, #0
   b7592:	4682      	mov	sl, r0
   b7594:	daa1      	bge.n	b74da <loop+0x8a2>
            t = print('-');
   b7596:	212d      	movs	r1, #45	; 0x2d
   b7598:	9304      	str	r3, [sp, #16]
   b759a:	f002 fd05 	bl	b9fa8 <_ZN5Print5printEc>
            val = -n;
   b759e:	9b04      	ldr	r3, [sp, #16]
   b75a0:	4259      	negs	r1, r3
        return printNumber(val, base) + t;
   b75a2:	220a      	movs	r2, #10
   b75a4:	4650      	mov	r0, sl
   b75a6:	f002 fd18 	bl	b9fda <_ZN5Print11printNumberEmh>
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b75aa:	f109 0901 	add.w	r9, r9, #1
   b75ae:	e7d8      	b.n	b7562 <loop+0x92a>
   b75b0:	20035118 	.word	0x20035118
   b75b4:	2003e4b4 	.word	0x2003e4b4
   b75b8:	20035508 	.word	0x20035508
   b75bc:	20037e10 	.word	0x20037e10
   b75c0:	20037de0 	.word	0x20037de0
   b75c4:	20035480 	.word	0x20035480
   b75c8:	2003e520 	.word	0x2003e520
   b75cc:	20035544 	.word	0x20035544
   b75d0:	000be241 	.word	0x000be241
   b75d4:	200354d8 	.word	0x200354d8
   b75d8:	2003e484 	.word	0x2003e484
          if(i == 3 && currentRailway.name == orangeLineCTA.name){
   b75dc:	2d03      	cmp	r5, #3
   b75de:	d1b5      	bne.n	b754c <loop+0x914>
   b75e0:	4911      	ldr	r1, [pc, #68]	; (b7628 <loop+0x9f0>)
   b75e2:	a827      	add	r0, sp, #156	; 0x9c
   b75e4:	f7fd f990 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b75e8:	2800      	cmp	r0, #0
   b75ea:	f43f af56 	beq.w	b749a <loop+0x862>
   b75ee:	f8df 9040 	ldr.w	r9, [pc, #64]	; b7630 <loop+0x9f8>
   b75f2:	4b0e      	ldr	r3, [pc, #56]	; (b762c <loop+0x9f4>)
   b75f4:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
   b75f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b75fa:	e9d0 3200 	ldrd	r3, r2, [r0]
   b75fe:	1ad2      	subs	r2, r2, r3
   b7600:	e9d1 1309 	ldrd	r1, r3, [r1, #36]	; 0x24
   b7604:	1a5b      	subs	r3, r3, r1
   b7606:	109b      	asrs	r3, r3, #2
            for(int j = 0; j < greenLineCTA.outputs[0].size() - orangeLineCTA.outputs[3].size(); j++){
   b7608:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   b760c:	42a3      	cmp	r3, r4
   b760e:	d99d      	bls.n	b754c <loop+0x914>
              Wire.write('0');
   b7610:	f003 fbb2 	bl	bad78 <_Z19__fetch_global_Wirev>
   b7614:	2130      	movs	r1, #48	; 0x30
   b7616:	f7fc fe03 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < greenLineCTA.outputs[0].size() - orangeLineCTA.outputs[3].size(); j++){
   b761a:	3401      	adds	r4, #1
   b761c:	e7e9      	b.n	b75f2 <loop+0x9ba>
}
   b761e:	b037      	add	sp, #220	; 0xdc
   b7620:	ecbd 8b06 	vpop	{d8-d10}
   b7624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7628:	20037e10 	.word	0x20037e10
   b762c:	20037de0 	.word	0x20037de0
   b7630:	200354d8 	.word	0x200354d8

000b7634 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b7634:	b510      	push	{r4, lr}
   b7636:	4604      	mov	r4, r0
   b7638:	f003 f982 	bl	ba940 <_ZN9TCPClientC1Ev>
{

}
   b763c:	4620      	mov	r0, r4
   b763e:	bd10      	pop	{r4, pc}

000b7640 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b7640:	b538      	push	{r3, r4, r5, lr}
   b7642:	4604      	mov	r4, r0
   b7644:	4615      	mov	r5, r2
    client.print(aHeaderName);
   b7646:	f002 fcab 	bl	b9fa0 <_ZN5Print5printEPKc>
    client.print(": ");
   b764a:	4905      	ldr	r1, [pc, #20]	; (b7660 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   b764c:	4620      	mov	r0, r4
   b764e:	f002 fca7 	bl	b9fa0 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b7652:	4629      	mov	r1, r5
   b7654:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b7656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
   b765a:	f002 bcb4 	b.w	b9fc6 <_ZN5Print7printlnEPKc>
   b765e:	bf00      	nop
   b7660:	000bdfdf 	.word	0x000bdfdf

000b7664 <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b7664:	b538      	push	{r3, r4, r5, lr}
   b7666:	4605      	mov	r5, r0
   b7668:	4614      	mov	r4, r2
    client.print(aHeaderName);
   b766a:	f002 fc99 	bl	b9fa0 <_ZN5Print5printEPKc>
    client.print(": ");
   b766e:	490b      	ldr	r1, [pc, #44]	; (b769c <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   b7670:	4628      	mov	r0, r5
   b7672:	f002 fc95 	bl	b9fa0 <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
   b7676:	2c00      	cmp	r4, #0
   b7678:	da0d      	bge.n	b7696 <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
   b767a:	212d      	movs	r1, #45	; 0x2d
   b767c:	4628      	mov	r0, r5
   b767e:	f002 fc93 	bl	b9fa8 <_ZN5Print5printEc>
            val = -n;
   b7682:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b7684:	4628      	mov	r0, r5
   b7686:	220a      	movs	r2, #10
   b7688:	f002 fca7 	bl	b9fda <_ZN5Print11printNumberEmh>
        n += println();
   b768c:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b768e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7692:	f002 bc8c 	b.w	b9fae <_ZN5Print7printlnEv>
            val = n;
   b7696:	4621      	mov	r1, r4
   b7698:	e7f4      	b.n	b7684 <_ZN10HttpClient10sendHeaderEPKci+0x20>
   b769a:	bf00      	nop
   b769c:	000bdfdf 	.word	0x000bdfdf

000b76a0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b76a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b76a4:	460e      	mov	r6, r1
   b76a6:	b091      	sub	sp, #68	; 0x44
   b76a8:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b76aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b76ae:	6013      	str	r3, [r2, #0]
{
   b76b0:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b76b2:	2100      	movs	r1, #0
   b76b4:	4630      	mov	r0, r6
   b76b6:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b76ba:	4617      	mov	r7, r2
   b76bc:	f002 fe05 	bl	ba2ca <_ZNK6String6equalsEPKc>
   b76c0:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b76c4:	4603      	mov	r3, r0
   b76c6:	b998      	cbnz	r0, b76f0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	const char * c_str() const { return buffer; }
   b76c8:	f1be 0f00 	cmp.w	lr, #0
   b76cc:	bf14      	ite	ne
   b76ce:	4672      	movne	r2, lr
   b76d0:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b76d2:	6831      	ldr	r1, [r6, #0]
   b76d4:	b292      	uxth	r2, r2
   b76d6:	4620      	mov	r0, r4
   b76d8:	f002 ff32 	bl	ba540 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b76dc:	1e05      	subs	r5, r0, #0
   b76de:	bf18      	it	ne
   b76e0:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   b76e2:	b9c5      	cbnz	r5, b7716 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   b76e4:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b76e6:	b011      	add	sp, #68	; 0x44
   b76e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b76ec:	f003 b8de 	b.w	ba8ac <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b76f0:	4b76      	ldr	r3, [pc, #472]	; (b78cc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
   b76f2:	930a      	str	r3, [sp, #40]	; 0x28
   b76f4:	f106 0c14 	add.w	ip, r6, #20
   b76f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b76fc:	ad0b      	add	r5, sp, #44	; 0x2c
   b76fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7700:	f8dc 3000 	ldr.w	r3, [ip]
   b7704:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b7706:	fa1f f28e 	uxth.w	r2, lr
   b770a:	2300      	movs	r3, #0
   b770c:	a90a      	add	r1, sp, #40	; 0x28
   b770e:	4620      	mov	r0, r4
   b7710:	f002 fff6 	bl	ba700 <_ZN9TCPClient7connectE9IPAddresstm>
   b7714:	e7e2      	b.n	b76dc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
   b7716:	4649      	mov	r1, r9
   b7718:	4620      	mov	r0, r4
   b771a:	f002 fc41 	bl	b9fa0 <_ZN5Print5printEPKc>
    client.print(" ");
   b771e:	496c      	ldr	r1, [pc, #432]	; (b78d0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   b7720:	4620      	mov	r0, r4
   b7722:	f002 fc3d 	bl	b9fa0 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b7726:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b7728:	4620      	mov	r0, r4
   b772a:	f002 fc39 	bl	b9fa0 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b772e:	4969      	ldr	r1, [pc, #420]	; (b78d4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   b7730:	4620      	mov	r0, r4
   b7732:	f002 fc35 	bl	b9fa0 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b7736:	4968      	ldr	r1, [pc, #416]	; (b78d8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
   b7738:	4a68      	ldr	r2, [pc, #416]	; (b78dc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
   b773a:	4620      	mov	r0, r4
   b773c:	f7ff ff80 	bl	b7640 <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b7740:	2100      	movs	r1, #0
   b7742:	4630      	mov	r0, r6
   b7744:	f002 fdc1 	bl	ba2ca <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b7748:	b920      	cbnz	r0, b7754 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   b774a:	6832      	ldr	r2, [r6, #0]
   b774c:	4964      	ldr	r1, [pc, #400]	; (b78e0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
   b774e:	4620      	mov	r0, r4
   b7750:	f7ff ff76 	bl	b7640 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b7754:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b7758:	2100      	movs	r1, #0
   b775a:	4650      	mov	r0, sl
   b775c:	f002 fdb5 	bl	ba2ca <_ZNK6String6equalsEPKc>
   b7760:	b928      	cbnz	r0, b776e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
   b7762:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b7764:	495f      	ldr	r1, [pc, #380]	; (b78e4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
   b7766:	4620      	mov	r0, r4
   b7768:	f7ff ff7c 	bl	b7664 <_ZN10HttpClient10sendHeaderEPKci>
   b776c:	e006      	b.n	b777c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b776e:	495e      	ldr	r1, [pc, #376]	; (b78e8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
   b7770:	4648      	mov	r0, r9
   b7772:	f004 fbad 	bl	bbed0 <strcmp>
   b7776:	4602      	mov	r2, r0
   b7778:	2800      	cmp	r0, #0
   b777a:	d0f3      	beq.n	b7764 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
   b777c:	f1b8 0f00 	cmp.w	r8, #0
   b7780:	d00e      	beq.n	b77a0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
   b7782:	f8d8 1000 	ldr.w	r1, [r8]
   b7786:	b159      	cbz	r1, b77a0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
   b7788:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
   b778c:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b778e:	b122      	cbz	r2, b779a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
   b7790:	f7ff ff56 	bl	b7640 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b7794:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
   b7798:	e7f3      	b.n	b7782 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
   b779a:	f002 fc14 	bl	b9fc6 <_ZN5Print7printlnEPKc>
}
   b779e:	e7f9      	b.n	b7794 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
   b77a0:	4620      	mov	r0, r4
   b77a2:	f002 fc04 	bl	b9fae <_ZN5Print7printlnEv>
    client.flush();
   b77a6:	4620      	mov	r0, r4
   b77a8:	f002 fe2a 	bl	ba400 <_ZN9TCPClient5flushEv>
   b77ac:	2100      	movs	r1, #0
   b77ae:	4650      	mov	r0, sl
   b77b0:	f002 fd8b 	bl	ba2ca <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b77b4:	b918      	cbnz	r0, b77be <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
   b77b6:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b77b8:	4620      	mov	r0, r4
   b77ba:	f002 fc04 	bl	b9fc6 <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b77be:	f104 0a1c 	add.w	sl, r4, #28
   b77c2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
   b77c6:	2100      	movs	r1, #0
   b77c8:	4650      	mov	r0, sl
   b77ca:	f004 fb4b 	bl	bbe64 <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b77ce:	f000 fddf 	bl	b8390 <HAL_Timer_Get_Milli_Seconds>
   b77d2:	9001      	str	r0, [sp, #4]
   b77d4:	f000 fddc 	bl	b8390 <HAL_Timer_Get_Milli_Seconds>
    bool error = false;
   b77d8:	f04f 0800 	mov.w	r8, #0
    unsigned int bufferPosition = 0;
   b77dc:	4646      	mov	r6, r8
    } while (client.connected() && !timeout && !error);
   b77de:	f241 3b88 	movw	fp, #5000	; 0x1388
        while (client.available()) {
   b77e2:	4620      	mov	r0, r4
   b77e4:	f003 f808 	bl	ba7f8 <_ZN9TCPClient9availableEv>
   b77e8:	b1e8      	cbz	r0, b7826 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x186>
            char c = client.read();
   b77ea:	4620      	mov	r0, r4
   b77ec:	f002 fdee 	bl	ba3cc <_ZN9TCPClient4readEv>
   b77f0:	4681      	mov	r9, r0
   b77f2:	f000 fdcd 	bl	b8390 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b77f6:	f242 73fe 	movw	r3, #10238	; 0x27fe
   b77fa:	429e      	cmp	r6, r3
   b77fc:	9001      	str	r0, [sp, #4]
   b77fe:	d804      	bhi.n	b780a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = c;
   b7800:	19a3      	adds	r3, r4, r6
            char c = client.read();
   b7802:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
   b7806:	3601      	adds	r6, #1
        while (client.available()) {
   b7808:	e7eb      	b.n	b77e2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b780a:	f242 73ff 	movw	r3, #10239	; 0x27ff
   b780e:	429e      	cmp	r6, r3
   b7810:	d1f9      	bne.n	b7806 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b7812:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
   b7816:	2200      	movs	r2, #0
   b7818:	f883 281b 	strb.w	r2, [r3, #2075]	; 0x81b
                client.stop();
   b781c:	4620      	mov	r0, r4
   b781e:	f003 f845 	bl	ba8ac <_ZN9TCPClient4stopEv>
                error = true;
   b7822:	46a8      	mov	r8, r5
   b7824:	e7ef      	b.n	b7806 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b7826:	19a3      	adds	r3, r4, r6
   b7828:	7718      	strb	r0, [r3, #28]
   b782a:	f000 fdb1 	bl	b8390 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b782e:	9b01      	ldr	r3, [sp, #4]
   b7830:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b7834:	f1b8 0f00 	cmp.w	r8, #0
   b7838:	d104      	bne.n	b7844 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
   b783a:	45d9      	cmp	r9, fp
   b783c:	d802      	bhi.n	b7844 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
            delay(200);
   b783e:	20c8      	movs	r0, #200	; 0xc8
   b7840:	f000 ffd2 	bl	b87e8 <delay>
    } while (client.connected() && !timeout && !error);
   b7844:	4620      	mov	r0, r4
   b7846:	f002 fef9 	bl	ba63c <_ZN9TCPClient9connectedEv>
   b784a:	b120      	cbz	r0, b7856 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b784c:	45d9      	cmp	r9, fp
   b784e:	d802      	bhi.n	b7856 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b7850:	f1b8 0f00 	cmp.w	r8, #0
   b7854:	d0c5      	beq.n	b77e2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
    client.stop();
   b7856:	4620      	mov	r0, r4
   b7858:	f003 f828 	bl	ba8ac <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b785c:	4651      	mov	r1, sl
   b785e:	a802      	add	r0, sp, #8
   b7860:	f002 fc5b 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b7864:	230c      	movs	r3, #12
   b7866:	2209      	movs	r2, #9
   b7868:	a902      	add	r1, sp, #8
   b786a:	a806      	add	r0, sp, #24
   b786c:	f002 fd52 	bl	ba314 <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b7870:	491e      	ldr	r1, [pc, #120]	; (b78ec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x24c>)
   b7872:	a80a      	add	r0, sp, #40	; 0x28
   b7874:	f002 fc51 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
   b7878:	a90a      	add	r1, sp, #40	; 0x28
   b787a:	a802      	add	r0, sp, #8
   b787c:	f002 fd46 	bl	ba30c <_ZNK6String7indexOfERKS_>
   b7880:	4604      	mov	r4, r0
   b7882:	a80a      	add	r0, sp, #40	; 0x28
   b7884:	f002 fbfe 	bl	ba084 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b7888:	1c63      	adds	r3, r4, #1
   b788a:	d108      	bne.n	b789e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fe>
    String statusCode = raw_response.substring(9,12);
   b788c:	a806      	add	r0, sp, #24
   b788e:	f002 fbf9 	bl	ba084 <_ZN6StringD1Ev>
    String raw_response(buffer);
   b7892:	a802      	add	r0, sp, #8
   b7894:	f002 fbf6 	bl	ba084 <_ZN6StringD1Ev>
}
   b7898:	b011      	add	sp, #68	; 0x44
   b789a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aResponse.body = "";
   b789e:	1d3d      	adds	r5, r7, #4
   b78a0:	4913      	ldr	r1, [pc, #76]	; (b78f0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x250>)
   b78a2:	4628      	mov	r0, r5
   b78a4:	f002 fc81 	bl	ba1aa <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b78a8:	1d22      	adds	r2, r4, #4
   b78aa:	a902      	add	r1, sp, #8
   b78ac:	a80a      	add	r0, sp, #40	; 0x28
   b78ae:	f002 fd51 	bl	ba354 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b78b2:	a90a      	add	r1, sp, #40	; 0x28
   b78b4:	4628      	mov	r0, r5
   b78b6:	f002 fcb4 	bl	ba222 <_ZN6String6concatERKS_>
   b78ba:	a80a      	add	r0, sp, #40	; 0x28
   b78bc:	f002 fbe2 	bl	ba084 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b78c0:	9806      	ldr	r0, [sp, #24]
   b78c2:	f004 fa93 	bl	bbdec <atoi>
   b78c6:	6038      	str	r0, [r7, #0]
   b78c8:	e7e0      	b.n	b788c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ec>
   b78ca:	bf00      	nop
   b78cc:	000be64c 	.word	0x000be64c
   b78d0:	000be1c8 	.word	0x000be1c8
   b78d4:	000be390 	.word	0x000be390
   b78d8:	000be3a2 	.word	0x000be3a2
   b78dc:	000be39c 	.word	0x000be39c
   b78e0:	000be3ad 	.word	0x000be3ad
   b78e4:	000be3b2 	.word	0x000be3b2
   b78e8:	000be3c1 	.word	0x000be3c1
   b78ec:	000be3c6 	.word	0x000be3c6
   b78f0:	000be3ca 	.word	0x000be3ca

000b78f4 <_ZN13JsonReferenceD1Ev>:
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
}
   b78f4:	4770      	bx	lr

000b78f6 <_ZN13JsonReferenceD0Ev>:
JsonReference::~JsonReference() {
   b78f6:	b510      	push	{r4, lr}
}
   b78f8:	210c      	movs	r1, #12
JsonReference::~JsonReference() {
   b78fa:	4604      	mov	r4, r0
}
   b78fc:	f7fc fbd1 	bl	b40a2 <_ZdlPvj>
   b7900:	4620      	mov	r0, r4
   b7902:	bd10      	pop	{r4, pc}

000b7904 <_ZN10JsonBufferD1Ev>:
JsonBuffer::~JsonBuffer() {
   b7904:	b510      	push	{r4, lr}
   b7906:	4b05      	ldr	r3, [pc, #20]	; (b791c <_ZN10JsonBufferD1Ev+0x18>)
   b7908:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b790a:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b790c:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b790e:	b91b      	cbnz	r3, b7918 <_ZN10JsonBufferD1Ev+0x14>
   b7910:	6840      	ldr	r0, [r0, #4]
   b7912:	b108      	cbz	r0, b7918 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b7914:	f000 ff20 	bl	b8758 <free>
}
   b7918:	4620      	mov	r0, r4
   b791a:	bd10      	pop	{r4, pc}
   b791c:	000be3d8 	.word	0x000be3d8

000b7920 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b7920:	b510      	push	{r4, lr}
   b7922:	4604      	mov	r4, r0
}
   b7924:	f7ff ffee 	bl	b7904 <_ZN10JsonBufferD1Ev>
   b7928:	4620      	mov	r0, r4
   b792a:	2114      	movs	r1, #20
   b792c:	f7fc fbb9 	bl	b40a2 <_ZdlPvj>
   b7930:	4620      	mov	r0, r4
   b7932:	bd10      	pop	{r4, pc}

000b7934 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b7934:	b510      	push	{r4, lr}
   b7936:	4b07      	ldr	r3, [pc, #28]	; (b7954 <_ZN10JsonParserD1Ev+0x20>)
   b7938:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b793a:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b793c:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b793e:	b91b      	cbnz	r3, b7948 <_ZN10JsonParserD1Ev+0x14>
   b7940:	6940      	ldr	r0, [r0, #20]
   b7942:	b108      	cbz	r0, b7948 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b7944:	f000 ff08 	bl	b8758 <free>
JsonParser::~JsonParser() {
   b7948:	4620      	mov	r0, r4
   b794a:	f7ff ffdb 	bl	b7904 <_ZN10JsonBufferD1Ev>
}
   b794e:	4620      	mov	r0, r4
   b7950:	bd10      	pop	{r4, pc}
   b7952:	bf00      	nop
   b7954:	000be3e8 	.word	0x000be3e8

000b7958 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b7958:	b510      	push	{r4, lr}
   b795a:	4604      	mov	r4, r0
}
   b795c:	f7ff ffea 	bl	b7934 <_ZN10JsonParserD1Ev>
   b7960:	4620      	mov	r0, r4
   b7962:	212c      	movs	r1, #44	; 0x2c
   b7964:	f7fc fb9d 	bl	b40a2 <_ZdlPvj>
   b7968:	4620      	mov	r0, r4
   b796a:	bd10      	pop	{r4, pc}

000b796c <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b796c:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b796e:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b7970:	4604      	mov	r4, r0
   b7972:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b7974:	b10b      	cbz	r3, b797a <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b7976:	2000      	movs	r0, #0
}
   b7978:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b797a:	6840      	ldr	r0, [r0, #4]
   b797c:	b138      	cbz	r0, b798e <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b797e:	f000 fef3 	bl	b8768 <realloc>
		if (newBuffer) {
   b7982:	2800      	cmp	r0, #0
   b7984:	d0f7      	beq.n	b7976 <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b7986:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b798a:	2001      	movs	r0, #1
   b798c:	e7f4      	b.n	b7978 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b798e:	4608      	mov	r0, r1
   b7990:	f000 feda 	bl	b8748 <malloc>
   b7994:	e7f5      	b.n	b7982 <_ZN10JsonBuffer8allocateEj+0x16>

000b7996 <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7996:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7998:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b799a:	460e      	mov	r6, r1
   b799c:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b799e:	18d1      	adds	r1, r2, r3
   b79a0:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b79a2:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b79a4:	b172      	cbz	r2, b79c4 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b79a6:	6882      	ldr	r2, [r0, #8]
   b79a8:	428a      	cmp	r2, r1
   b79aa:	d30b      	bcc.n	b79c4 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b79ac:	6860      	ldr	r0, [r4, #4]
   b79ae:	68e3      	ldr	r3, [r4, #12]
   b79b0:	462a      	mov	r2, r5
   b79b2:	4631      	mov	r1, r6
   b79b4:	4418      	add	r0, r3
   b79b6:	f004 fa2d 	bl	bbe14 <memcpy>
	offset += dataLen;
   b79ba:	68e2      	ldr	r2, [r4, #12]
   b79bc:	442a      	add	r2, r5
   b79be:	60e2      	str	r2, [r4, #12]
	return true;
   b79c0:	2001      	movs	r0, #1
}
   b79c2:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b79c4:	4620      	mov	r0, r4
   b79c6:	f7ff ffd1 	bl	b796c <_ZN10JsonBuffer8allocateEj>
   b79ca:	2800      	cmp	r0, #0
   b79cc:	d1ee      	bne.n	b79ac <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b79ce:	e7f8      	b.n	b79c2 <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b79d0 <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b79d0:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b79d2:	2100      	movs	r1, #0
   b79d4:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b79d6:	b123      	cbz	r3, b79e2 <_ZN10JsonBuffer5clearEv+0x12>
   b79d8:	6882      	ldr	r2, [r0, #8]
   b79da:	b112      	cbz	r2, b79e2 <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b79dc:	4618      	mov	r0, r3
   b79de:	f004 ba41 	b.w	bbe64 <memset>
}
   b79e2:	4770      	bx	lr

000b79e4 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b79e4:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b79e6:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b79ea:	2200      	movs	r2, #0
   b79ec:	60c2      	str	r2, [r0, #12]
   b79ee:	2201      	movs	r2, #1
   b79f0:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b79f2:	6143      	str	r3, [r0, #20]
   b79f4:	4a02      	ldr	r2, [pc, #8]	; (b7a00 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b79f6:	9b02      	ldr	r3, [sp, #8]
   b79f8:	6002      	str	r2, [r0, #0]
   b79fa:	61c3      	str	r3, [r0, #28]
}
   b79fc:	bd10      	pop	{r4, pc}
   b79fe:	bf00      	nop
   b7a00:	000be3e8 	.word	0x000be3e8

000b7a04 <_ZNK10JsonParser12getReferenceEv>:
	if (tokens < tokensEnd) {
   b7a04:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   b7a08:	429a      	cmp	r2, r3
   b7a0a:	4b04      	ldr	r3, [pc, #16]	; (b7a1c <_ZNK10JsonParser12getReferenceEv+0x18>)

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b7a0c:	bf38      	it	cc
   b7a0e:	6082      	strcc	r2, [r0, #8]
   b7a10:	e9c0 3100 	strd	r3, r1, [r0]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b7a14:	bf24      	itt	cs
   b7a16:	2300      	movcs	r3, #0
   b7a18:	6083      	strcs	r3, [r0, #8]
}
   b7a1a:	4770      	bx	lr
   b7a1c:	000be3f8 	.word	0x000be3f8

000b7a20 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b7a20:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b7a22:	6813      	ldr	r3, [r2, #0]
   b7a24:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b7a26:	6813      	ldr	r3, [r2, #0]
   b7a28:	f103 0410 	add.w	r4, r3, #16
   b7a2c:	6014      	str	r4, [r2, #0]
   b7a2e:	6986      	ldr	r6, [r0, #24]
   b7a30:	42b4      	cmp	r4, r6
   b7a32:	d20a      	bcs.n	b7a4a <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b7a34:	699b      	ldr	r3, [r3, #24]
   b7a36:	688c      	ldr	r4, [r1, #8]
   b7a38:	42a3      	cmp	r3, r4
   b7a3a:	da01      	bge.n	b7a40 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b7a3c:	42ab      	cmp	r3, r5
   b7a3e:	ddf2      	ble.n	b7a26 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b7a40:	42a3      	cmp	r3, r4
   b7a42:	bfcc      	ite	gt
   b7a44:	2000      	movgt	r0, #0
   b7a46:	2001      	movle	r0, #1
   b7a48:	e000      	b.n	b7a4c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b7a4a:	2000      	movs	r0, #0
}
   b7a4c:	bd70      	pop	{r4, r5, r6, pc}

000b7a4e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b7a4e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7a52:	9d08      	ldr	r5, [sp, #32]
   b7a54:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7a56:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b7a5a:	4604      	mov	r4, r0
   b7a5c:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7a5e:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b7a60:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b7a62:	9801      	ldr	r0, [sp, #4]
   b7a64:	69a3      	ldr	r3, [r4, #24]
   b7a66:	4283      	cmp	r3, r0
   b7a68:	d91a      	bls.n	b7aa0 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b7a6a:	6882      	ldr	r2, [r0, #8]
   b7a6c:	688b      	ldr	r3, [r1, #8]
   b7a6e:	429a      	cmp	r2, r3
   b7a70:	da16      	bge.n	b7aa0 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b7a72:	42ae      	cmp	r6, r5
   b7a74:	d10b      	bne.n	b7a8e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b7a76:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b7a78:	aa01      	add	r2, sp, #4
   b7a7a:	4620      	mov	r0, r4
   b7a7c:	f7ff ffd0 	bl	b7a20 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b7a80:	b128      	cbz	r0, b7a8e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b7a82:	9b01      	ldr	r3, [sp, #4]
   b7a84:	f8c8 3000 	str.w	r3, [r8]
}
   b7a88:	b002      	add	sp, #8
   b7a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b7a8e:	aa01      	add	r2, sp, #4
   b7a90:	4620      	mov	r0, r4
   b7a92:	f7ff ffc5 	bl	b7a20 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b7a96:	4620      	mov	r0, r4
		index++;
   b7a98:	3601      	adds	r6, #1
		skipObject(container, token);
   b7a9a:	f7ff ffc1 	bl	b7a20 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b7a9e:	e7e0      	b.n	b7a62 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b7aa0:	2000      	movs	r0, #0
   b7aa2:	e7f1      	b.n	b7a88 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b7aa4 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>:
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b7aa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7aa6:	461f      	mov	r7, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7aa8:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b7aac:	4604      	mov	r4, r0
   b7aae:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7ab0:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b7ab2:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b7ab4:	9b01      	ldr	r3, [sp, #4]
   b7ab6:	69a2      	ldr	r2, [r4, #24]
   b7ab8:	429a      	cmp	r2, r3
   b7aba:	d90f      	bls.n	b7adc <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
   b7abc:	6898      	ldr	r0, [r3, #8]
   b7abe:	688a      	ldr	r2, [r1, #8]
   b7ac0:	4290      	cmp	r0, r2
   b7ac2:	da0b      	bge.n	b7adc <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
		if (desiredIndex == index) {
   b7ac4:	42b5      	cmp	r5, r6
   b7ac6:	d103      	bne.n	b7ad0 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x2c>
			value = token;
   b7ac8:	603b      	str	r3, [r7, #0]
			return true;
   b7aca:	2001      	movs	r0, #1
}
   b7acc:	b003      	add	sp, #12
   b7ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
		skipObject(container, token);
   b7ad0:	aa01      	add	r2, sp, #4
   b7ad2:	4620      	mov	r0, r4
		index++;
   b7ad4:	3501      	adds	r5, #1
		skipObject(container, token);
   b7ad6:	f7ff ffa3 	bl	b7a20 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b7ada:	e7eb      	b.n	b7ab4 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x10>
	return false;
   b7adc:	2000      	movs	r0, #0
   b7ade:	e7f5      	b.n	b7acc <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x28>

000b7ae0 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
   b7ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b7ae2:	3b01      	subs	r3, #1
   b7ae4:	2400      	movs	r4, #0
   b7ae6:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
   b7aea:	1bf6      	subs	r6, r6, r7
   b7aec:	42a6      	cmp	r6, r4
   b7aee:	dd08      	ble.n	b7b02 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
   b7af0:	42a3      	cmp	r3, r4
   b7af2:	dd06      	ble.n	b7b02 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
   b7af4:	6845      	ldr	r5, [r0, #4]
   b7af6:	443d      	add	r5, r7
   b7af8:	5d2d      	ldrb	r5, [r5, r4]
   b7afa:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b7afe:	3401      	adds	r4, #1
   b7b00:	e7f1      	b.n	b7ae6 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
   b7b02:	2300      	movs	r3, #0
   b7b04:	7013      	strb	r3, [r2, #0]
}
   b7b06:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7b08 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
   b7b08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7b0a:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b7b0c:	2310      	movs	r3, #16
   b7b0e:	466a      	mov	r2, sp
   b7b10:	f7ff ffe6 	bl	b7ae0 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
   b7b14:	4904      	ldr	r1, [pc, #16]	; (b7b28 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
   b7b16:	4622      	mov	r2, r4
   b7b18:	4668      	mov	r0, sp
   b7b1a:	f000 fe2d 	bl	b8778 <sscanf>
}
   b7b1e:	1e43      	subs	r3, r0, #1
   b7b20:	4258      	negs	r0, r3
   b7b22:	4158      	adcs	r0, r3
   b7b24:	b004      	add	sp, #16
   b7b26:	bd10      	pop	{r4, pc}
   b7b28:	000be6ac 	.word	0x000be6ac

000b7b2c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, float &result) const {
   b7b2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7b2e:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b7b30:	2310      	movs	r3, #16
   b7b32:	466a      	mov	r2, sp
   b7b34:	f7ff ffd4 	bl	b7ae0 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	result = strtof(tmp, 0);
   b7b38:	4668      	mov	r0, sp
   b7b3a:	2100      	movs	r1, #0
   b7b3c:	f005 f83a 	bl	bcbb4 <strtof>
}
   b7b40:	2001      	movs	r0, #1
	result = strtof(tmp, 0);
   b7b42:	ed84 0a00 	vstr	s0, [r4]
}
   b7b46:	b004      	add	sp, #16
   b7b48:	bd10      	pop	{r4, pc}
	...

000b7b4c <_ZNK13JsonReference5indexEj>:
	else {
		return JsonReference(parser);
	}
}

JsonReference JsonReference::index(size_t index) const {
   b7b4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7b4e:	460d      	mov	r5, r1
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b7b50:	6889      	ldr	r1, [r1, #8]
   b7b52:	4e0a      	ldr	r6, [pc, #40]	; (b7b7c <_ZNK13JsonReference5indexEj+0x30>)
JsonReference JsonReference::index(size_t index) const {
   b7b54:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b7b56:	b161      	cbz	r1, b7b72 <_ZNK13JsonReference5indexEj+0x26>
   b7b58:	6868      	ldr	r0, [r5, #4]
   b7b5a:	ab01      	add	r3, sp, #4
   b7b5c:	f7ff ffa2 	bl	b7aa4 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>
   b7b60:	b138      	cbz	r0, b7b72 <_ZNK13JsonReference5indexEj+0x26>
		return JsonReference(parser, newToken);
   b7b62:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b7b64:	e9c4 6300 	strd	r6, r3, [r4]
   b7b68:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b7b6a:	60a3      	str	r3, [r4, #8]
	}
	else {
		return JsonReference(parser);
	}
}
   b7b6c:	4620      	mov	r0, r4
   b7b6e:	b002      	add	sp, #8
   b7b70:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b7b72:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b7b74:	e9c4 6300 	strd	r6, r3, [r4]
   b7b78:	2300      	movs	r3, #0
   b7b7a:	e7f6      	b.n	b7b6a <_ZNK13JsonReference5indexEj+0x1e>
   b7b7c:	000be3f8 	.word	0x000be3f8

000b7b80 <_ZNK13JsonReference8valueIntEi>:
bool JsonReference::valueBool(bool result) const {
	(void) value(result);
	return result;
}

int JsonReference::valueInt(int result) const {
   b7b80:	b507      	push	{r0, r1, r2, lr}
   b7b82:	9101      	str	r1, [sp, #4]
	 * There are also type-specific versions like valueBool that return the value, instead of having to pass an object
	 * to hold the value, as in this call.
	 */
	template<class T>
	bool value(T &result) const {
		if (token && parser->getTokenValue(token, result)) {
   b7b84:	6881      	ldr	r1, [r0, #8]
   b7b86:	b119      	cbz	r1, b7b90 <_ZNK13JsonReference8valueIntEi+0x10>
   b7b88:	6840      	ldr	r0, [r0, #4]
   b7b8a:	aa01      	add	r2, sp, #4
   b7b8c:	f7ff ffbc 	bl	b7b08 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
	(void) value(result);
	return result;
}
   b7b90:	9801      	ldr	r0, [sp, #4]
   b7b92:	b003      	add	sp, #12
   b7b94:	f85d fb04 	ldr.w	pc, [sp], #4

000b7b98 <_ZNK13JsonReference10valueFloatEf>:
unsigned long JsonReference::valueUnsignedLong(unsigned long result) const {
	(void) value(result);
	return result;
}

float JsonReference::valueFloat(float result) const {
   b7b98:	b507      	push	{r0, r1, r2, lr}
   b7b9a:	6881      	ldr	r1, [r0, #8]
   b7b9c:	ed8d 0a01 	vstr	s0, [sp, #4]
   b7ba0:	b119      	cbz	r1, b7baa <_ZNK13JsonReference10valueFloatEf+0x12>
   b7ba2:	6840      	ldr	r0, [r0, #4]
   b7ba4:	aa01      	add	r2, sp, #4
   b7ba6:	f7ff ffc1 	bl	b7b2c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>
	(void) value(result);
	return result;
}
   b7baa:	ed9d 0a01 	vldr	s0, [sp, #4]
   b7bae:	b003      	add	sp, #12
   b7bb0:	f85d fb04 	ldr.w	pc, [sp], #4

000b7bb4 <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   b7bb4:	b510      	push	{r4, lr}
   b7bb6:	4604      	mov	r4, r0
	if (str) {
   b7bb8:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b7bba:	460b      	mov	r3, r1
	if (str) {
   b7bbc:	b128      	cbz	r0, b7bca <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b7bbe:	f002 fb34 	bl	ba22a <_ZN6String6concatEc>
	}
	else {
		if (buf && length < (bufLen - 1)) {
			buf[length] = ch;
		}
		length++;
   b7bc2:	68e3      	ldr	r3, [r4, #12]
   b7bc4:	3301      	adds	r3, #1
   b7bc6:	60e3      	str	r3, [r4, #12]
	}
}
   b7bc8:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b7bca:	6860      	ldr	r0, [r4, #4]
   b7bcc:	2800      	cmp	r0, #0
   b7bce:	d0f8      	beq.n	b7bc2 <_ZN16JsonParserString6appendEc+0xe>
   b7bd0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b7bd4:	3a01      	subs	r2, #1
   b7bd6:	428a      	cmp	r2, r1
			buf[length] = ch;
   b7bd8:	bf88      	it	hi
   b7bda:	5443      	strbhi	r3, [r0, r1]
   b7bdc:	e7f1      	b.n	b7bc2 <_ZN16JsonParserString6appendEc+0xe>

000b7bde <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b7bde:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b7be0:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b7be2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7be4:	4608      	mov	r0, r1
		str.append((char)unicode);
   b7be6:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b7be8:	d804      	bhi.n	b7bf4 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b7bea:	b003      	add	sp, #12
   b7bec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b7bf0:	f7ff bfe0 	b.w	b7bb4 <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b7bf4:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b7bf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b7bfc:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b7c00:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b7c04:	d207      	bcs.n	b7c16 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b7c06:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b7c0a:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b7c0c:	f7ff ffd2 	bl	b7bb4 <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b7c10:	9801      	ldr	r0, [sp, #4]
   b7c12:	4621      	mov	r1, r4
   b7c14:	e7e9      	b.n	b7bea <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b7c16:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b7c18:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b7c1c:	9001      	str	r0, [sp, #4]
   b7c1e:	f7ff ffc9 	bl	b7bb4 <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b7c22:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b7c26:	9801      	ldr	r0, [sp, #4]
   b7c28:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b7c2c:	e7ee      	b.n	b7c0c <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>
	...

000b7c30 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b7c30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b7c34:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b7c36:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b7c38:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b7d08 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b7c3c:	4680      	mov	r8, r0
   b7c3e:	460f      	mov	r7, r1
   b7c40:	4615      	mov	r5, r2
			escape = false;
   b7c42:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b7c44:	68b8      	ldr	r0, [r7, #8]
   b7c46:	42b0      	cmp	r0, r6
   b7c48:	dd5a      	ble.n	b7d00 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b7c4a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b7c4e:	5d99      	ldrb	r1, [r3, r6]
   b7c50:	199a      	adds	r2, r3, r6
		if (escape) {
   b7c52:	2c00      	cmp	r4, #0
   b7c54:	d04b      	beq.n	b7cee <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b7c56:	2975      	cmp	r1, #117	; 0x75
   b7c58:	d805      	bhi.n	b7c66 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b7c5a:	296d      	cmp	r1, #109	; 0x6d
   b7c5c:	d807      	bhi.n	b7c6e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b7c5e:	2962      	cmp	r1, #98	; 0x62
   b7c60:	d01e      	beq.n	b7ca0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b7c62:	2966      	cmp	r1, #102	; 0x66
   b7c64:	d01e      	beq.n	b7ca4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b7c66:	4628      	mov	r0, r5
   b7c68:	f7ff ffa4 	bl	b7bb4 <_ZN16JsonParserString6appendEc>
				break;
   b7c6c:	e03d      	b.n	b7cea <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b7c6e:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b7c72:	2c07      	cmp	r4, #7
   b7c74:	d8f7      	bhi.n	b7c66 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b7c76:	f20f 0c08 	addw	ip, pc, #8
   b7c7a:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b7c7e:	bf00      	nop
   b7c80:	000b7ca9 	.word	0x000b7ca9
   b7c84:	000b7c67 	.word	0x000b7c67
   b7c88:	000b7c67 	.word	0x000b7c67
   b7c8c:	000b7c67 	.word	0x000b7c67
   b7c90:	000b7cad 	.word	0x000b7cad
   b7c94:	000b7c67 	.word	0x000b7c67
   b7c98:	000b7cb1 	.word	0x000b7cb1
   b7c9c:	000b7cb5 	.word	0x000b7cb5
				str.append('\b');
   b7ca0:	2108      	movs	r1, #8
   b7ca2:	e7e0      	b.n	b7c66 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b7ca4:	210c      	movs	r1, #12
   b7ca6:	e7de      	b.n	b7c66 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b7ca8:	210a      	movs	r1, #10
   b7caa:	e7dc      	b.n	b7c66 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b7cac:	210d      	movs	r1, #13
   b7cae:	e7da      	b.n	b7c66 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b7cb0:	2109      	movs	r1, #9
   b7cb2:	e7d8      	b.n	b7c66 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b7cb4:	1d31      	adds	r1, r6, #4
   b7cb6:	4288      	cmp	r0, r1
   b7cb8:	dd17      	ble.n	b7cea <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b7cba:	a902      	add	r1, sp, #8
   b7cbc:	3304      	adds	r3, #4
   b7cbe:	4433      	add	r3, r6
   b7cc0:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b7cc2:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b7cc6:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b7cca:	429a      	cmp	r2, r3
   b7ccc:	d1f9      	bne.n	b7cc2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b7cce:	aa01      	add	r2, sp, #4
   b7cd0:	4651      	mov	r1, sl
					tmp[4] = 0;
   b7cd2:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b7cd6:	f000 fd4f 	bl	b8778 <sscanf>
   b7cda:	2801      	cmp	r0, #1
   b7cdc:	d105      	bne.n	b7cea <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b7cde:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b7ce2:	4629      	mov	r1, r5
   b7ce4:	f7ff ff7b 	bl	b7bde <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b7ce8:	3605      	adds	r6, #5
			escape = false;
   b7cea:	2400      	movs	r4, #0
   b7cec:	e004      	b.n	b7cf8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b7cee:	295c      	cmp	r1, #92	; 0x5c
   b7cf0:	d004      	beq.n	b7cfc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b7cf2:	4628      	mov	r0, r5
   b7cf4:	f7ff ff5e 	bl	b7bb4 <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b7cf8:	3601      	adds	r6, #1
   b7cfa:	e7a3      	b.n	b7c44 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b7cfc:	2401      	movs	r4, #1
   b7cfe:	e7fb      	b.n	b7cf8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b7d00:	2001      	movs	r0, #1
   b7d02:	b004      	add	sp, #16
   b7d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7d08:	000be3cb 	.word	0x000be3cb

000b7d0c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b7d0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7d0e:	460c      	mov	r4, r1
   b7d10:	4606      	mov	r6, r0
	result = "";
   b7d12:	490c      	ldr	r1, [pc, #48]	; (b7d44 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b7d14:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b7d16:	4615      	mov	r5, r2
	result = "";
   b7d18:	f002 fa47 	bl	ba1aa <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b7d1c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b7d20:	1ac9      	subs	r1, r1, r3
   b7d22:	3101      	adds	r1, #1
   b7d24:	4628      	mov	r0, r5
   b7d26:	f002 f9cb 	bl	ba0c0 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b7d2a:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b7d2c:	466a      	mov	r2, sp
   b7d2e:	4621      	mov	r1, r4
   b7d30:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b7d32:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b7d36:	9500      	str	r5, [sp, #0]
   b7d38:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b7d3a:	f7ff ff79 	bl	b7c30 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b7d3e:	b004      	add	sp, #16
   b7d40:	bd70      	pop	{r4, r5, r6, pc}
   b7d42:	bf00      	nop
   b7d44:	000be3ca 	.word	0x000be3ca

000b7d48 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b7d48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7d4c:	b089      	sub	sp, #36	; 0x24
   b7d4e:	4605      	mov	r5, r0
   b7d50:	4688      	mov	r8, r1
	String keyName;
   b7d52:	a804      	add	r0, sp, #16
   b7d54:	4912      	ldr	r1, [pc, #72]	; (b7da0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b7d56:	4616      	mov	r6, r2
   b7d58:	4699      	mov	r9, r3
	String keyName;
   b7d5a:	f002 f9de 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b7d5e:	2700      	movs	r7, #0
   b7d60:	9700      	str	r7, [sp, #0]
   b7d62:	464b      	mov	r3, r9
   b7d64:	aa03      	add	r2, sp, #12
   b7d66:	4641      	mov	r1, r8
   b7d68:	4628      	mov	r0, r5
   b7d6a:	f7ff fe70 	bl	b7a4e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b7d6e:	4604      	mov	r4, r0
   b7d70:	b170      	cbz	r0, b7d90 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b7d72:	9903      	ldr	r1, [sp, #12]
   b7d74:	aa04      	add	r2, sp, #16
   b7d76:	4628      	mov	r0, r5
   b7d78:	f7ff ffc8 	bl	b7d0c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b7d7c:	4604      	mov	r4, r0
   b7d7e:	b908      	cbnz	r0, b7d84 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b7d80:	3701      	adds	r7, #1
   b7d82:	e7ed      	b.n	b7d60 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b7d84:	4631      	mov	r1, r6
   b7d86:	a804      	add	r0, sp, #16
   b7d88:	f002 fa9f 	bl	ba2ca <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b7d8c:	2800      	cmp	r0, #0
   b7d8e:	d0f7      	beq.n	b7d80 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b7d90:	a804      	add	r0, sp, #16
   b7d92:	f002 f977 	bl	ba084 <_ZN6StringD1Ev>
}
   b7d96:	4620      	mov	r0, r4
   b7d98:	b009      	add	sp, #36	; 0x24
   b7d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7d9e:	bf00      	nop
   b7da0:	000be3ca 	.word	0x000be3ca

000b7da4 <_ZNK13JsonReference3keyEPKc>:
JsonReference JsonReference::key(const char *name) const {
   b7da4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7da6:	460d      	mov	r5, r1
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b7da8:	6889      	ldr	r1, [r1, #8]
   b7daa:	4e0a      	ldr	r6, [pc, #40]	; (b7dd4 <_ZNK13JsonReference3keyEPKc+0x30>)
JsonReference JsonReference::key(const char *name) const {
   b7dac:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b7dae:	b161      	cbz	r1, b7dca <_ZNK13JsonReference3keyEPKc+0x26>
   b7db0:	6868      	ldr	r0, [r5, #4]
   b7db2:	ab01      	add	r3, sp, #4
   b7db4:	f7ff ffc8 	bl	b7d48 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b7db8:	b138      	cbz	r0, b7dca <_ZNK13JsonReference3keyEPKc+0x26>
		return JsonReference(parser, newToken);
   b7dba:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b7dbc:	e9c4 6300 	strd	r6, r3, [r4]
   b7dc0:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b7dc2:	60a3      	str	r3, [r4, #8]
}
   b7dc4:	4620      	mov	r0, r4
   b7dc6:	b002      	add	sp, #8
   b7dc8:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b7dca:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b7dcc:	e9c4 6300 	strd	r6, r3, [r4]
   b7dd0:	2300      	movs	r3, #0
   b7dd2:	e7f6      	b.n	b7dc2 <_ZNK13JsonReference3keyEPKc+0x1e>
   b7dd4:	000be3f8 	.word	0x000be3f8

000b7dd8 <_ZNK13JsonReference11valueStringEv>:
String JsonReference::valueString() const {
   b7dd8:	b538      	push	{r3, r4, r5, lr}
   b7dda:	460d      	mov	r5, r1
	String result;
   b7ddc:	4905      	ldr	r1, [pc, #20]	; (b7df4 <_ZNK13JsonReference11valueStringEv+0x1c>)
String JsonReference::valueString() const {
   b7dde:	4604      	mov	r4, r0
	String result;
   b7de0:	f002 f99b 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
   b7de4:	68a9      	ldr	r1, [r5, #8]
   b7de6:	b119      	cbz	r1, b7df0 <_ZNK13JsonReference11valueStringEv+0x18>
   b7de8:	6868      	ldr	r0, [r5, #4]
   b7dea:	4622      	mov	r2, r4
   b7dec:	f7ff ff8e 	bl	b7d0c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
}
   b7df0:	4620      	mov	r0, r4
   b7df2:	bd38      	pop	{r3, r4, r5, pc}
   b7df4:	000be3ca 	.word	0x000be3ca

000b7df8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b7df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b7dfc:	6844      	ldr	r4, [r0, #4]
   b7dfe:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b7e02:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b7e06:	f8d0 e000 	ldr.w	lr, [r0]
   b7e0a:	4596      	cmp	lr, r2
   b7e0c:	f080 81b9 	bcs.w	b8182 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b7e10:	f811 800e 	ldrb.w	r8, [r1, lr]
   b7e14:	f1b8 0f00 	cmp.w	r8, #0
   b7e18:	f000 81b3 	beq.w	b8182 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b7e1c:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b7e20:	f000 8098 	beq.w	b7f54 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b7e24:	d833      	bhi.n	b7e8e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b7e26:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b7e2a:	f000 80a6 	beq.w	b7f7a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b7e2e:	d810      	bhi.n	b7e52 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b7e30:	f1a8 0809 	sub.w	r8, r8, #9
   b7e34:	fa5f f888 	uxtb.w	r8, r8
   b7e38:	f1b8 0f17 	cmp.w	r8, #23
   b7e3c:	d80d      	bhi.n	b7e5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b7e3e:	4d9f      	ldr	r5, [pc, #636]	; (b80bc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b7e40:	fa0c f808 	lsl.w	r8, ip, r8
   b7e44:	ea18 0f05 	tst.w	r8, r5
   b7e48:	d007      	beq.n	b7e5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b7e4a:	6805      	ldr	r5, [r0, #0]
   b7e4c:	3501      	adds	r5, #1
   b7e4e:	6005      	str	r5, [r0, #0]
   b7e50:	e7d9      	b.n	b7e06 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b7e52:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b7e56:	f000 8133 	beq.w	b80c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b7e5a:	f8d0 8000 	ldr.w	r8, [r0]
   b7e5e:	4542      	cmp	r2, r8
   b7e60:	d90e      	bls.n	b7e80 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b7e62:	f811 5008 	ldrb.w	r5, [r1, r8]
   b7e66:	b15d      	cbz	r5, b7e80 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b7e68:	2d3a      	cmp	r5, #58	; 0x3a
   b7e6a:	f200 8169 	bhi.w	b8140 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b7e6e:	2d1f      	cmp	r5, #31
   b7e70:	f200 8151 	bhi.w	b8116 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b7e74:	2d0a      	cmp	r5, #10
   b7e76:	f200 8160 	bhi.w	b813a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b7e7a:	2d08      	cmp	r5, #8
   b7e7c:	f240 8156 	bls.w	b812c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b7e80:	2b00      	cmp	r3, #0
   b7e82:	f040 8162 	bne.w	b814a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b7e86:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b7e8a:	6005      	str	r5, [r0, #0]
   b7e8c:	e0a5      	b.n	b7fda <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b7e8e:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b7e92:	d037      	beq.n	b7f04 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b7e94:	d82e      	bhi.n	b7ef4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b7e96:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b7e9a:	d033      	beq.n	b7f04 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b7e9c:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b7ea0:	d1db      	bne.n	b7e5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b7ea2:	2b00      	cmp	r3, #0
   b7ea4:	d0d1      	beq.n	b7e4a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b7ea6:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b7eaa:	6845      	ldr	r5, [r0, #4]
   b7eac:	3d01      	subs	r5, #1
   b7eae:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b7eb2:	2d00      	cmp	r5, #0
   b7eb4:	db55      	blt.n	b7f62 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b7eb6:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b7eba:	3701      	adds	r7, #1
   b7ebc:	d04d      	beq.n	b7f5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b7ebe:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b7ec2:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b7ec6:	d148      	bne.n	b7f5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b7ec8:	f898 b000 	ldrb.w	fp, [r8]
   b7ecc:	45cb      	cmp	fp, r9
   b7ece:	d14b      	bne.n	b7f68 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b7ed0:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b7ed4:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b7ed8:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b7edc:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b7ee0:	f8de 7004 	ldr.w	r7, [lr, #4]
   b7ee4:	3701      	adds	r7, #1
   b7ee6:	d042      	beq.n	b7f6e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b7ee8:	f8de 7008 	ldr.w	r7, [lr, #8]
   b7eec:	3701      	adds	r7, #1
   b7eee:	d13e      	bne.n	b7f6e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b7ef0:	6085      	str	r5, [r0, #8]
				break;
   b7ef2:	e7aa      	b.n	b7e4a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b7ef4:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b7ef8:	d1af      	bne.n	b7e5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b7efa:	2b00      	cmp	r3, #0
   b7efc:	d0a5      	beq.n	b7e4a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b7efe:	f04f 0901 	mov.w	r9, #1
   b7f02:	e7d2      	b.n	b7eaa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b7f04:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b7f06:	2b00      	cmp	r3, #0
   b7f08:	d09f      	beq.n	b7e4a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b7f0a:	6845      	ldr	r5, [r0, #4]
   b7f0c:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b7f0e:	42af      	cmp	r7, r5
   b7f10:	d94a      	bls.n	b7fa8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b7f12:	f105 0e01 	add.w	lr, r5, #1
   b7f16:	f8c0 e004 	str.w	lr, [r0, #4]
   b7f1a:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b7f1e:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b7f22:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b7f26:	2500      	movs	r5, #0
   b7f28:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b7f2c:	6885      	ldr	r5, [r0, #8]
   b7f2e:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b7f30:	bf1f      	itttt	ne
   b7f32:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b7f36:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b7f3a:	3501      	addne	r5, #1
   b7f3c:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b7f40:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b7f44:	bf0c      	ite	eq
   b7f46:	2501      	moveq	r5, #1
   b7f48:	2502      	movne	r5, #2
   b7f4a:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b7f4e:	6805      	ldr	r5, [r0, #0]
   b7f50:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b7f54:	6845      	ldr	r5, [r0, #4]
   b7f56:	3d01      	subs	r5, #1
   b7f58:	e7ca      	b.n	b7ef0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b7f5a:	3d01      	subs	r5, #1
   b7f5c:	f1a8 0810 	sub.w	r8, r8, #16
   b7f60:	e7a7      	b.n	b7eb2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b7f62:	3501      	adds	r5, #1
   b7f64:	f47f af71 	bne.w	b7e4a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b7f68:	f06f 0401 	mvn.w	r4, #1
   b7f6c:	e01e      	b.n	b7fac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b7f6e:	3d01      	subs	r5, #1
   b7f70:	1c6f      	adds	r7, r5, #1
   b7f72:	f1ae 0e10 	sub.w	lr, lr, #16
   b7f76:	d1b3      	bne.n	b7ee0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b7f78:	e767      	b.n	b7e4a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b7f7a:	f10e 0901 	add.w	r9, lr, #1
   b7f7e:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b7f82:	f8d0 8000 	ldr.w	r8, [r0]
   b7f86:	4542      	cmp	r2, r8
   b7f88:	f240 8093 	bls.w	b80b2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b7f8c:	f811 5008 	ldrb.w	r5, [r1, r8]
   b7f90:	2d00      	cmp	r5, #0
   b7f92:	f000 808e 	beq.w	b80b2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b7f96:	2d22      	cmp	r5, #34	; 0x22
   b7f98:	d130      	bne.n	b7ffc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b7f9a:	b1f3      	cbz	r3, b7fda <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b7f9c:	6845      	ldr	r5, [r0, #4]
   b7f9e:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b7fa0:	42af      	cmp	r7, r5
   b7fa2:	d806      	bhi.n	b7fb2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b7fa4:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b7fa8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b7fac:	4620      	mov	r0, r4
   b7fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b7fb2:	f105 0e01 	add.w	lr, r5, #1
   b7fb6:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b7fba:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b7fbe:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b7fc2:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b7fc6:	2700      	movs	r7, #0
   b7fc8:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b7fca:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b7fce:	f04f 0a03 	mov.w	sl, #3
   b7fd2:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b7fd6:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b7fda:	6885      	ldr	r5, [r0, #8]
   b7fdc:	1c6f      	adds	r7, r5, #1
				count++;
   b7fde:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b7fe2:	f43f af32 	beq.w	b7e4a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b7fe6:	2b00      	cmp	r3, #0
   b7fe8:	f43f af2f 	beq.w	b7e4a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b7fec:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b7ff0:	f8de 500c 	ldr.w	r5, [lr, #12]
   b7ff4:	3501      	adds	r5, #1
   b7ff6:	f8ce 500c 	str.w	r5, [lr, #12]
   b7ffa:	e726      	b.n	b7e4a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b7ffc:	2d5c      	cmp	r5, #92	; 0x5c
   b7ffe:	d111      	bne.n	b8024 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b8000:	f108 0501 	add.w	r5, r8, #1
   b8004:	42aa      	cmp	r2, r5
   b8006:	d90d      	bls.n	b8024 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b8008:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b800a:	5d4d      	ldrb	r5, [r1, r5]
   b800c:	2d75      	cmp	r5, #117	; 0x75
   b800e:	d82b      	bhi.n	b8068 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b8010:	2d6d      	cmp	r5, #109	; 0x6d
   b8012:	d80b      	bhi.n	b802c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b8014:	2d66      	cmp	r5, #102	; 0x66
   b8016:	d827      	bhi.n	b8068 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b8018:	2d5b      	cmp	r5, #91	; 0x5b
   b801a:	d81d      	bhi.n	b8058 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b801c:	2d22      	cmp	r5, #34	; 0x22
   b801e:	d001      	beq.n	b8024 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b8020:	2d2f      	cmp	r5, #47	; 0x2f
   b8022:	d121      	bne.n	b8068 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b8024:	6805      	ldr	r5, [r0, #0]
   b8026:	3501      	adds	r5, #1
   b8028:	6005      	str	r5, [r0, #0]
   b802a:	e7aa      	b.n	b7f82 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b802c:	3d6e      	subs	r5, #110	; 0x6e
   b802e:	2d07      	cmp	r5, #7
   b8030:	d81a      	bhi.n	b8068 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b8032:	a701      	add	r7, pc, #4	; (adr r7, b8038 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b8034:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b8038:	000b8025 	.word	0x000b8025
   b803c:	000b8069 	.word	0x000b8069
   b8040:	000b8069 	.word	0x000b8069
   b8044:	000b8069 	.word	0x000b8069
   b8048:	000b8025 	.word	0x000b8025
   b804c:	000b8069 	.word	0x000b8069
   b8050:	000b8025 	.word	0x000b8025
   b8054:	000b806f 	.word	0x000b806f
   b8058:	3d5c      	subs	r5, #92	; 0x5c
   b805a:	b2ed      	uxtb	r5, r5
   b805c:	fa0c f505 	lsl.w	r5, ip, r5
   b8060:	f240 4741 	movw	r7, #1089	; 0x441
   b8064:	423d      	tst	r5, r7
   b8066:	d1dd      	bne.n	b8024 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b8068:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b806c:	e77c      	b.n	b7f68 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b806e:	f108 0502 	add.w	r5, r8, #2
   b8072:	6005      	str	r5, [r0, #0]
   b8074:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b8078:	f8d0 8000 	ldr.w	r8, [r0]
   b807c:	4542      	cmp	r2, r8
   b807e:	d803      	bhi.n	b8088 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b8080:	6805      	ldr	r5, [r0, #0]
   b8082:	3d01      	subs	r5, #1
   b8084:	6005      	str	r5, [r0, #0]
					break;
   b8086:	e7cd      	b.n	b8024 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b8088:	f811 5008 	ldrb.w	r5, [r1, r8]
   b808c:	2d00      	cmp	r5, #0
   b808e:	d0f7      	beq.n	b8080 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b8090:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b8094:	f1bb 0f09 	cmp.w	fp, #9
   b8098:	d904      	bls.n	b80a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b809a:	f025 0520 	bic.w	r5, r5, #32
   b809e:	3d41      	subs	r5, #65	; 0x41
   b80a0:	2d05      	cmp	r5, #5
   b80a2:	d8e1      	bhi.n	b8068 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b80a4:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b80a8:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b80ac:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b80ae:	d1e3      	bne.n	b8078 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b80b0:	e7e6      	b.n	b8080 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b80b2:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b80b6:	f06f 0402 	mvn.w	r4, #2
   b80ba:	e777      	b.n	b7fac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b80bc:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b80c0:	2b00      	cmp	r3, #0
   b80c2:	f43f aec2 	beq.w	b7e4a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b80c6:	6885      	ldr	r5, [r0, #8]
   b80c8:	1c6f      	adds	r7, r5, #1
   b80ca:	f43f aebe 	beq.w	b7e4a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b80ce:	012d      	lsls	r5, r5, #4
   b80d0:	5d5d      	ldrb	r5, [r3, r5]
   b80d2:	3d01      	subs	r5, #1
   b80d4:	2d01      	cmp	r5, #1
   b80d6:	f67f aeb8 	bls.w	b7e4a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b80da:	6845      	ldr	r5, [r0, #4]
   b80dc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b80e0:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b80e4:	f1b8 0f00 	cmp.w	r8, #0
   b80e8:	f6ff aeaf 	blt.w	b7e4a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b80ec:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b80f0:	3d01      	subs	r5, #1
   b80f2:	2d01      	cmp	r5, #1
   b80f4:	d80a      	bhi.n	b810c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b80f6:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b80fa:	3501      	adds	r5, #1
   b80fc:	d006      	beq.n	b810c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b80fe:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b8102:	3501      	adds	r5, #1
   b8104:	d102      	bne.n	b810c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b8106:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b810a:	e69e      	b.n	b7e4a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b810c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b8110:	f1ae 0e10 	sub.w	lr, lr, #16
   b8114:	e7e6      	b.n	b80e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b8116:	f1a5 0920 	sub.w	r9, r5, #32
   b811a:	4f24      	ldr	r7, [pc, #144]	; (b81ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b811c:	fa5f f989 	uxtb.w	r9, r9
   b8120:	fa0c f909 	lsl.w	r9, ip, r9
   b8124:	ea19 0f07 	tst.w	r9, r7
   b8128:	f47f aeaa 	bne.w	b7e80 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b812c:	3d20      	subs	r5, #32
   b812e:	2d5e      	cmp	r5, #94	; 0x5e
   b8130:	d89a      	bhi.n	b8068 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b8132:	f108 0501 	add.w	r5, r8, #1
   b8136:	6005      	str	r5, [r0, #0]
   b8138:	e68f      	b.n	b7e5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b813a:	2d0d      	cmp	r5, #13
   b813c:	d1f6      	bne.n	b812c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b813e:	e69f      	b.n	b7e80 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b8140:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b8144:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b8148:	e7f8      	b.n	b813c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b814a:	6845      	ldr	r5, [r0, #4]
   b814c:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b814e:	42af      	cmp	r7, r5
   b8150:	f67f af28 	bls.w	b7fa4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b8154:	f105 0801 	add.w	r8, r5, #1
   b8158:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b815c:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b8160:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b8164:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b8168:	2700      	movs	r7, #0
   b816a:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b816c:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b8170:	f04f 0a04 	mov.w	sl, #4
   b8174:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b8178:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b817c:	6805      	ldr	r5, [r0, #0]
   b817e:	3d01      	subs	r5, #1
   b8180:	e683      	b.n	b7e8a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b8182:	2b00      	cmp	r3, #0
   b8184:	f43f af12 	beq.w	b7fac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b8188:	6842      	ldr	r2, [r0, #4]
   b818a:	1e51      	subs	r1, r2, #1
   b818c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b8190:	2900      	cmp	r1, #0
   b8192:	f6ff af0b 	blt.w	b7fac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b8196:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b819a:	3201      	adds	r2, #1
   b819c:	d003      	beq.n	b81a6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b819e:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b81a2:	3201      	adds	r2, #1
   b81a4:	d087      	beq.n	b80b6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b81a6:	3901      	subs	r1, #1
   b81a8:	3b10      	subs	r3, #16
   b81aa:	e7f1      	b.n	b8190 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b81ac:	04001001 	.word	0x04001001

000b81b0 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b81b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b81b2:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b81b4:	4604      	mov	r4, r0
	if (offset == 0) {
   b81b6:	b912      	cbnz	r2, b81be <_ZN10JsonParser5parseEv+0xe>
		return false;
   b81b8:	2000      	movs	r0, #0
}
   b81ba:	b003      	add	sp, #12
   b81bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b81be:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b81c0:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b81c4:	b1ab      	cbz	r3, b81f2 <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b81c6:	2100      	movs	r1, #0
	parser->toknext = 0;
   b81c8:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b81cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b81d0:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b81d2:	69c1      	ldr	r1, [r0, #28]
   b81d4:	9100      	str	r1, [sp, #0]
   b81d6:	6841      	ldr	r1, [r0, #4]
   b81d8:	4630      	mov	r0, r6
   b81da:	f7ff fe0d 	bl	b7df8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b81de:	1c43      	adds	r3, r0, #1
   b81e0:	d128      	bne.n	b8234 <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b81e2:	7c25      	ldrb	r5, [r4, #16]
   b81e4:	2d00      	cmp	r5, #0
   b81e6:	d1e7      	bne.n	b81b8 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b81e8:	6960      	ldr	r0, [r4, #20]
   b81ea:	f000 fab5 	bl	b8758 <free>
			tokens = 0;
   b81ee:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b81f0:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b81f2:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b81f4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b81f8:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b81fc:	68e2      	ldr	r2, [r4, #12]
   b81fe:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b8200:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b8202:	9500      	str	r5, [sp, #0]
   b8204:	462b      	mov	r3, r5
   b8206:	4630      	mov	r0, r6
   b8208:	f7ff fdf6 	bl	b7df8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b820c:	2800      	cmp	r0, #0
   b820e:	dbd3      	blt.n	b81b8 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b8210:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b8212:	d017      	beq.n	b8244 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b8214:	0100      	lsls	r0, r0, #4
   b8216:	f000 fa97 	bl	b8748 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b821a:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b821c:	6160      	str	r0, [r4, #20]
   b821e:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b8220:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b8222:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b8226:	68e2      	ldr	r2, [r4, #12]
   b8228:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b822a:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b822c:	4630      	mov	r0, r6
   b822e:	f7ff fde3 	bl	b7df8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b8232:	e001      	b.n	b8238 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b8234:	2800      	cmp	r0, #0
   b8236:	dbbf      	blt.n	b81b8 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b8238:	6963      	ldr	r3, [r4, #20]
   b823a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b823e:	61a0      	str	r0, [r4, #24]
	return true;
   b8240:	2001      	movs	r0, #1
   b8242:	e7ba      	b.n	b81ba <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b8244:	6963      	ldr	r3, [r4, #20]
   b8246:	61a3      	str	r3, [r4, #24]
   b8248:	e7fa      	b.n	b8240 <_ZN10JsonParser5parseEv+0x90>
	...

000b824c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b824c:	b508      	push	{r3, lr}
   b824e:	4b02      	ldr	r3, [pc, #8]	; (b8258 <hal_ble_stack_init+0xc>)
   b8250:	681b      	ldr	r3, [r3, #0]
   b8252:	689b      	ldr	r3, [r3, #8]
   b8254:	9301      	str	r3, [sp, #4]
   b8256:	bd08      	pop	{r3, pc}
   b8258:	00030278 	.word	0x00030278

000b825c <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b825c:	b508      	push	{r3, lr}
   b825e:	4b02      	ldr	r3, [pc, #8]	; (b8268 <hal_ble_gap_set_advertising_data+0xc>)
   b8260:	681b      	ldr	r3, [r3, #0]
   b8262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8264:	9301      	str	r3, [sp, #4]
   b8266:	bd08      	pop	{r3, pc}
   b8268:	00030278 	.word	0x00030278

000b826c <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b826c:	b508      	push	{r3, lr}
   b826e:	4b02      	ldr	r3, [pc, #8]	; (b8278 <hal_ble_gap_set_scan_response_data+0xc>)
   b8270:	681b      	ldr	r3, [r3, #0]
   b8272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8274:	9301      	str	r3, [sp, #4]
   b8276:	bd08      	pop	{r3, pc}
   b8278:	00030278 	.word	0x00030278

000b827c <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b827c:	b508      	push	{r3, lr}
   b827e:	4b02      	ldr	r3, [pc, #8]	; (b8288 <hal_ble_gap_start_advertising+0xc>)
   b8280:	681b      	ldr	r3, [r3, #0]
   b8282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b8284:	9301      	str	r3, [sp, #4]
   b8286:	bd08      	pop	{r3, pc}
   b8288:	00030278 	.word	0x00030278

000b828c <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b828c:	b508      	push	{r3, lr}
   b828e:	4b03      	ldr	r3, [pc, #12]	; (b829c <hal_ble_gap_disconnect+0x10>)
   b8290:	681b      	ldr	r3, [r3, #0]
   b8292:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b8296:	9301      	str	r3, [sp, #4]
   b8298:	bd08      	pop	{r3, pc}
   b829a:	0000      	.short	0x0000
   b829c:	00030278 	.word	0x00030278

000b82a0 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b82a0:	b508      	push	{r3, lr}
   b82a2:	4b03      	ldr	r3, [pc, #12]	; (b82b0 <hal_ble_gatt_server_add_service+0x10>)
   b82a4:	681b      	ldr	r3, [r3, #0]
   b82a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b82aa:	9301      	str	r3, [sp, #4]
   b82ac:	bd08      	pop	{r3, pc}
   b82ae:	0000      	.short	0x0000
   b82b0:	00030278 	.word	0x00030278

000b82b4 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b82b4:	b508      	push	{r3, lr}
   b82b6:	4b03      	ldr	r3, [pc, #12]	; (b82c4 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b82b8:	681b      	ldr	r3, [r3, #0]
   b82ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b82be:	9301      	str	r3, [sp, #4]
   b82c0:	bd08      	pop	{r3, pc}
   b82c2:	0000      	.short	0x0000
   b82c4:	00030278 	.word	0x00030278

000b82c8 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b82c8:	b508      	push	{r3, lr}
   b82ca:	4b03      	ldr	r3, [pc, #12]	; (b82d8 <hal_ble_gatt_client_write_with_response+0x10>)
   b82cc:	681b      	ldr	r3, [r3, #0]
   b82ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b82d2:	9301      	str	r3, [sp, #4]
   b82d4:	bd08      	pop	{r3, pc}
   b82d6:	0000      	.short	0x0000
   b82d8:	00030278 	.word	0x00030278

000b82dc <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b82dc:	b508      	push	{r3, lr}
   b82de:	4b03      	ldr	r3, [pc, #12]	; (b82ec <hal_ble_gatt_client_write_without_response+0x10>)
   b82e0:	681b      	ldr	r3, [r3, #0]
   b82e2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b82e6:	9301      	str	r3, [sp, #4]
   b82e8:	bd08      	pop	{r3, pc}
   b82ea:	0000      	.short	0x0000
   b82ec:	00030278 	.word	0x00030278

000b82f0 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b82f0:	b508      	push	{r3, lr}
   b82f2:	4b03      	ldr	r3, [pc, #12]	; (b8300 <hal_ble_gatt_server_add_characteristic+0x10>)
   b82f4:	681b      	ldr	r3, [r3, #0]
   b82f6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b82fa:	9301      	str	r3, [sp, #4]
   b82fc:	bd08      	pop	{r3, pc}
   b82fe:	0000      	.short	0x0000
   b8300:	00030278 	.word	0x00030278

000b8304 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b8304:	b508      	push	{r3, lr}
   b8306:	4b03      	ldr	r3, [pc, #12]	; (b8314 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b8308:	681b      	ldr	r3, [r3, #0]
   b830a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b830e:	9301      	str	r3, [sp, #4]
   b8310:	bd08      	pop	{r3, pc}
   b8312:	0000      	.short	0x0000
   b8314:	00030278 	.word	0x00030278

000b8318 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b8318:	b508      	push	{r3, lr}
   b831a:	4b03      	ldr	r3, [pc, #12]	; (b8328 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b831c:	681b      	ldr	r3, [r3, #0]
   b831e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b8322:	9301      	str	r3, [sp, #4]
   b8324:	bd08      	pop	{r3, pc}
   b8326:	0000      	.short	0x0000
   b8328:	00030278 	.word	0x00030278

000b832c <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b832c:	b508      	push	{r3, lr}
   b832e:	4b03      	ldr	r3, [pc, #12]	; (b833c <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b8330:	681b      	ldr	r3, [r3, #0]
   b8332:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b8336:	9301      	str	r3, [sp, #4]
   b8338:	bd08      	pop	{r3, pc}
   b833a:	0000      	.short	0x0000
   b833c:	00030278 	.word	0x00030278

000b8340 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b8340:	b508      	push	{r3, lr}
   b8342:	4b02      	ldr	r3, [pc, #8]	; (b834c <os_mutex_recursive_create+0xc>)
   b8344:	681b      	ldr	r3, [r3, #0]
   b8346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8348:	9301      	str	r3, [sp, #4]
   b834a:	bd08      	pop	{r3, pc}
   b834c:	00030248 	.word	0x00030248

000b8350 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b8350:	b508      	push	{r3, lr}
   b8352:	4b02      	ldr	r3, [pc, #8]	; (b835c <os_mutex_recursive_lock+0xc>)
   b8354:	681b      	ldr	r3, [r3, #0]
   b8356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8358:	9301      	str	r3, [sp, #4]
   b835a:	bd08      	pop	{r3, pc}
   b835c:	00030248 	.word	0x00030248

000b8360 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b8360:	b508      	push	{r3, lr}
   b8362:	4b02      	ldr	r3, [pc, #8]	; (b836c <os_mutex_recursive_unlock+0xc>)
   b8364:	681b      	ldr	r3, [r3, #0]
   b8366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8368:	9301      	str	r3, [sp, #4]
   b836a:	bd08      	pop	{r3, pc}
   b836c:	00030248 	.word	0x00030248

000b8370 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b8370:	b508      	push	{r3, lr}
   b8372:	4b02      	ldr	r3, [pc, #8]	; (b837c <HAL_RNG_GetRandomNumber+0xc>)
   b8374:	681b      	ldr	r3, [r3, #0]
   b8376:	685b      	ldr	r3, [r3, #4]
   b8378:	9301      	str	r3, [sp, #4]
   b837a:	bd08      	pop	{r3, pc}
   b837c:	00030218 	.word	0x00030218

000b8380 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b8380:	b508      	push	{r3, lr}
   b8382:	4b02      	ldr	r3, [pc, #8]	; (b838c <HAL_Delay_Microseconds+0xc>)
   b8384:	681b      	ldr	r3, [r3, #0]
   b8386:	68db      	ldr	r3, [r3, #12]
   b8388:	9301      	str	r3, [sp, #4]
   b838a:	bd08      	pop	{r3, pc}
   b838c:	00030218 	.word	0x00030218

000b8390 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b8390:	b508      	push	{r3, lr}
   b8392:	4b02      	ldr	r3, [pc, #8]	; (b839c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b8394:	681b      	ldr	r3, [r3, #0]
   b8396:	695b      	ldr	r3, [r3, #20]
   b8398:	9301      	str	r3, [sp, #4]
   b839a:	bd08      	pop	{r3, pc}
   b839c:	00030218 	.word	0x00030218

000b83a0 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b83a0:	b508      	push	{r3, lr}
   b83a2:	4b02      	ldr	r3, [pc, #8]	; (b83ac <hal_i2c_begin+0xc>)
   b83a4:	681b      	ldr	r3, [r3, #0]
   b83a6:	68db      	ldr	r3, [r3, #12]
   b83a8:	9301      	str	r3, [sp, #4]
   b83aa:	bd08      	pop	{r3, pc}
   b83ac:	00030228 	.word	0x00030228

000b83b0 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b83b0:	b508      	push	{r3, lr}
   b83b2:	4b02      	ldr	r3, [pc, #8]	; (b83bc <hal_i2c_begin_transmission+0xc>)
   b83b4:	681b      	ldr	r3, [r3, #0]
   b83b6:	699b      	ldr	r3, [r3, #24]
   b83b8:	9301      	str	r3, [sp, #4]
   b83ba:	bd08      	pop	{r3, pc}
   b83bc:	00030228 	.word	0x00030228

000b83c0 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b83c0:	b508      	push	{r3, lr}
   b83c2:	4b02      	ldr	r3, [pc, #8]	; (b83cc <hal_i2c_end_transmission+0xc>)
   b83c4:	681b      	ldr	r3, [r3, #0]
   b83c6:	69db      	ldr	r3, [r3, #28]
   b83c8:	9301      	str	r3, [sp, #4]
   b83ca:	bd08      	pop	{r3, pc}
   b83cc:	00030228 	.word	0x00030228

000b83d0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b83d0:	b508      	push	{r3, lr}
   b83d2:	4b02      	ldr	r3, [pc, #8]	; (b83dc <hal_i2c_write+0xc>)
   b83d4:	681b      	ldr	r3, [r3, #0]
   b83d6:	6a1b      	ldr	r3, [r3, #32]
   b83d8:	9301      	str	r3, [sp, #4]
   b83da:	bd08      	pop	{r3, pc}
   b83dc:	00030228 	.word	0x00030228

000b83e0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b83e0:	b508      	push	{r3, lr}
   b83e2:	4b02      	ldr	r3, [pc, #8]	; (b83ec <hal_i2c_available+0xc>)
   b83e4:	681b      	ldr	r3, [r3, #0]
   b83e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b83e8:	9301      	str	r3, [sp, #4]
   b83ea:	bd08      	pop	{r3, pc}
   b83ec:	00030228 	.word	0x00030228

000b83f0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b83f0:	b508      	push	{r3, lr}
   b83f2:	4b02      	ldr	r3, [pc, #8]	; (b83fc <hal_i2c_read+0xc>)
   b83f4:	681b      	ldr	r3, [r3, #0]
   b83f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b83f8:	9301      	str	r3, [sp, #4]
   b83fa:	bd08      	pop	{r3, pc}
   b83fc:	00030228 	.word	0x00030228

000b8400 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b8400:	b508      	push	{r3, lr}
   b8402:	4b02      	ldr	r3, [pc, #8]	; (b840c <hal_i2c_peek+0xc>)
   b8404:	681b      	ldr	r3, [r3, #0]
   b8406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8408:	9301      	str	r3, [sp, #4]
   b840a:	bd08      	pop	{r3, pc}
   b840c:	00030228 	.word	0x00030228

000b8410 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b8410:	b508      	push	{r3, lr}
   b8412:	4b02      	ldr	r3, [pc, #8]	; (b841c <hal_i2c_flush+0xc>)
   b8414:	681b      	ldr	r3, [r3, #0]
   b8416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8418:	9301      	str	r3, [sp, #4]
   b841a:	bd08      	pop	{r3, pc}
   b841c:	00030228 	.word	0x00030228

000b8420 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b8420:	b508      	push	{r3, lr}
   b8422:	4b02      	ldr	r3, [pc, #8]	; (b842c <hal_i2c_init+0xc>)
   b8424:	681b      	ldr	r3, [r3, #0]
   b8426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8428:	9301      	str	r3, [sp, #4]
   b842a:	bd08      	pop	{r3, pc}
   b842c:	00030228 	.word	0x00030228

000b8430 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b8430:	b508      	push	{r3, lr}
   b8432:	4b02      	ldr	r3, [pc, #8]	; (b843c <hal_i2c_request_ex+0xc>)
   b8434:	681b      	ldr	r3, [r3, #0]
   b8436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8438:	9301      	str	r3, [sp, #4]
   b843a:	bd08      	pop	{r3, pc}
   b843c:	00030228 	.word	0x00030228

000b8440 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b8440:	b508      	push	{r3, lr}
   b8442:	4b02      	ldr	r3, [pc, #8]	; (b844c <if_index_to_name+0xc>)
   b8444:	681b      	ldr	r3, [r3, #0]
   b8446:	695b      	ldr	r3, [r3, #20]
   b8448:	9301      	str	r3, [sp, #4]
   b844a:	bd08      	pop	{r3, pc}
   b844c:	0003026c 	.word	0x0003026c

000b8450 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b8450:	b508      	push	{r3, lr}
   b8452:	4b02      	ldr	r3, [pc, #8]	; (b845c <inet_inet_ntop+0xc>)
   b8454:	681b      	ldr	r3, [r3, #0]
   b8456:	695b      	ldr	r3, [r3, #20]
   b8458:	9301      	str	r3, [sp, #4]
   b845a:	bd08      	pop	{r3, pc}
   b845c:	00030264 	.word	0x00030264

000b8460 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b8460:	b508      	push	{r3, lr}
   b8462:	4b02      	ldr	r3, [pc, #8]	; (b846c <inet_htonl+0xc>)
   b8464:	681b      	ldr	r3, [r3, #0]
   b8466:	6a1b      	ldr	r3, [r3, #32]
   b8468:	9301      	str	r3, [sp, #4]
   b846a:	bd08      	pop	{r3, pc}
   b846c:	00030264 	.word	0x00030264

000b8470 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b8470:	b508      	push	{r3, lr}
   b8472:	4b02      	ldr	r3, [pc, #8]	; (b847c <inet_htons+0xc>)
   b8474:	681b      	ldr	r3, [r3, #0]
   b8476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8478:	9301      	str	r3, [sp, #4]
   b847a:	bd08      	pop	{r3, pc}
   b847c:	00030264 	.word	0x00030264

000b8480 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b8480:	b508      	push	{r3, lr}
   b8482:	4b02      	ldr	r3, [pc, #8]	; (b848c <netdb_freeaddrinfo+0xc>)
   b8484:	681b      	ldr	r3, [r3, #0]
   b8486:	689b      	ldr	r3, [r3, #8]
   b8488:	9301      	str	r3, [sp, #4]
   b848a:	bd08      	pop	{r3, pc}
   b848c:	00030268 	.word	0x00030268

000b8490 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b8490:	b508      	push	{r3, lr}
   b8492:	4b02      	ldr	r3, [pc, #8]	; (b849c <netdb_getaddrinfo+0xc>)
   b8494:	681b      	ldr	r3, [r3, #0]
   b8496:	68db      	ldr	r3, [r3, #12]
   b8498:	9301      	str	r3, [sp, #4]
   b849a:	bd08      	pop	{r3, pc}
   b849c:	00030268 	.word	0x00030268

000b84a0 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b84a0:	b508      	push	{r3, lr}
   b84a2:	4b02      	ldr	r3, [pc, #8]	; (b84ac <sock_setsockopt+0xc>)
   b84a4:	681b      	ldr	r3, [r3, #0]
   b84a6:	699b      	ldr	r3, [r3, #24]
   b84a8:	9301      	str	r3, [sp, #4]
   b84aa:	bd08      	pop	{r3, pc}
   b84ac:	00030238 	.word	0x00030238

000b84b0 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b84b0:	b508      	push	{r3, lr}
   b84b2:	4b02      	ldr	r3, [pc, #8]	; (b84bc <sock_close+0xc>)
   b84b4:	681b      	ldr	r3, [r3, #0]
   b84b6:	69db      	ldr	r3, [r3, #28]
   b84b8:	9301      	str	r3, [sp, #4]
   b84ba:	bd08      	pop	{r3, pc}
   b84bc:	00030238 	.word	0x00030238

000b84c0 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b84c0:	b508      	push	{r3, lr}
   b84c2:	4b02      	ldr	r3, [pc, #8]	; (b84cc <sock_connect+0xc>)
   b84c4:	681b      	ldr	r3, [r3, #0]
   b84c6:	6a1b      	ldr	r3, [r3, #32]
   b84c8:	9301      	str	r3, [sp, #4]
   b84ca:	bd08      	pop	{r3, pc}
   b84cc:	00030238 	.word	0x00030238

000b84d0 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b84d0:	b508      	push	{r3, lr}
   b84d2:	4b02      	ldr	r3, [pc, #8]	; (b84dc <sock_recv+0xc>)
   b84d4:	681b      	ldr	r3, [r3, #0]
   b84d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b84d8:	9301      	str	r3, [sp, #4]
   b84da:	bd08      	pop	{r3, pc}
   b84dc:	00030238 	.word	0x00030238

000b84e0 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b84e0:	b508      	push	{r3, lr}
   b84e2:	4b02      	ldr	r3, [pc, #8]	; (b84ec <sock_send+0xc>)
   b84e4:	681b      	ldr	r3, [r3, #0]
   b84e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b84e8:	9301      	str	r3, [sp, #4]
   b84ea:	bd08      	pop	{r3, pc}
   b84ec:	00030238 	.word	0x00030238

000b84f0 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b84f0:	b508      	push	{r3, lr}
   b84f2:	4b02      	ldr	r3, [pc, #8]	; (b84fc <sock_socket+0xc>)
   b84f4:	681b      	ldr	r3, [r3, #0]
   b84f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b84f8:	9301      	str	r3, [sp, #4]
   b84fa:	bd08      	pop	{r3, pc}
   b84fc:	00030238 	.word	0x00030238

000b8500 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b8500:	b508      	push	{r3, lr}
   b8502:	4b02      	ldr	r3, [pc, #8]	; (b850c <hal_usart_write+0xc>)
   b8504:	681b      	ldr	r3, [r3, #0]
   b8506:	68db      	ldr	r3, [r3, #12]
   b8508:	9301      	str	r3, [sp, #4]
   b850a:	bd08      	pop	{r3, pc}
   b850c:	0003023c 	.word	0x0003023c

000b8510 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b8510:	b508      	push	{r3, lr}
   b8512:	4b02      	ldr	r3, [pc, #8]	; (b851c <hal_usart_available+0xc>)
   b8514:	681b      	ldr	r3, [r3, #0]
   b8516:	691b      	ldr	r3, [r3, #16]
   b8518:	9301      	str	r3, [sp, #4]
   b851a:	bd08      	pop	{r3, pc}
   b851c:	0003023c 	.word	0x0003023c

000b8520 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b8520:	b508      	push	{r3, lr}
   b8522:	4b02      	ldr	r3, [pc, #8]	; (b852c <hal_usart_read+0xc>)
   b8524:	681b      	ldr	r3, [r3, #0]
   b8526:	695b      	ldr	r3, [r3, #20]
   b8528:	9301      	str	r3, [sp, #4]
   b852a:	bd08      	pop	{r3, pc}
   b852c:	0003023c 	.word	0x0003023c

000b8530 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b8530:	b508      	push	{r3, lr}
   b8532:	4b02      	ldr	r3, [pc, #8]	; (b853c <hal_usart_peek+0xc>)
   b8534:	681b      	ldr	r3, [r3, #0]
   b8536:	699b      	ldr	r3, [r3, #24]
   b8538:	9301      	str	r3, [sp, #4]
   b853a:	bd08      	pop	{r3, pc}
   b853c:	0003023c 	.word	0x0003023c

000b8540 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b8540:	b508      	push	{r3, lr}
   b8542:	4b02      	ldr	r3, [pc, #8]	; (b854c <hal_usart_flush+0xc>)
   b8544:	681b      	ldr	r3, [r3, #0]
   b8546:	69db      	ldr	r3, [r3, #28]
   b8548:	9301      	str	r3, [sp, #4]
   b854a:	bd08      	pop	{r3, pc}
   b854c:	0003023c 	.word	0x0003023c

000b8550 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b8550:	b508      	push	{r3, lr}
   b8552:	4b02      	ldr	r3, [pc, #8]	; (b855c <hal_usart_available_data_for_write+0xc>)
   b8554:	681b      	ldr	r3, [r3, #0]
   b8556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8558:	9301      	str	r3, [sp, #4]
   b855a:	bd08      	pop	{r3, pc}
   b855c:	0003023c 	.word	0x0003023c

000b8560 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b8560:	b508      	push	{r3, lr}
   b8562:	4b02      	ldr	r3, [pc, #8]	; (b856c <hal_usart_init_ex+0xc>)
   b8564:	681b      	ldr	r3, [r3, #0]
   b8566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8568:	9301      	str	r3, [sp, #4]
   b856a:	bd08      	pop	{r3, pc}
   b856c:	0003023c 	.word	0x0003023c

000b8570 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b8570:	b508      	push	{r3, lr}
   b8572:	4b02      	ldr	r3, [pc, #8]	; (b857c <HAL_USB_USART_Init+0xc>)
   b8574:	681b      	ldr	r3, [r3, #0]
   b8576:	681b      	ldr	r3, [r3, #0]
   b8578:	9301      	str	r3, [sp, #4]
   b857a:	bd08      	pop	{r3, pc}
   b857c:	0003024c 	.word	0x0003024c

000b8580 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b8580:	b508      	push	{r3, lr}
   b8582:	4b02      	ldr	r3, [pc, #8]	; (b858c <HAL_USB_USART_Begin+0xc>)
   b8584:	681b      	ldr	r3, [r3, #0]
   b8586:	685b      	ldr	r3, [r3, #4]
   b8588:	9301      	str	r3, [sp, #4]
   b858a:	bd08      	pop	{r3, pc}
   b858c:	0003024c 	.word	0x0003024c

000b8590 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b8590:	b508      	push	{r3, lr}
   b8592:	4b02      	ldr	r3, [pc, #8]	; (b859c <HAL_USB_USART_Available_Data+0xc>)
   b8594:	681b      	ldr	r3, [r3, #0]
   b8596:	691b      	ldr	r3, [r3, #16]
   b8598:	9301      	str	r3, [sp, #4]
   b859a:	bd08      	pop	{r3, pc}
   b859c:	0003024c 	.word	0x0003024c

000b85a0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b85a0:	b508      	push	{r3, lr}
   b85a2:	4b02      	ldr	r3, [pc, #8]	; (b85ac <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b85a4:	681b      	ldr	r3, [r3, #0]
   b85a6:	695b      	ldr	r3, [r3, #20]
   b85a8:	9301      	str	r3, [sp, #4]
   b85aa:	bd08      	pop	{r3, pc}
   b85ac:	0003024c 	.word	0x0003024c

000b85b0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b85b0:	b508      	push	{r3, lr}
   b85b2:	4b02      	ldr	r3, [pc, #8]	; (b85bc <HAL_USB_USART_Receive_Data+0xc>)
   b85b4:	681b      	ldr	r3, [r3, #0]
   b85b6:	699b      	ldr	r3, [r3, #24]
   b85b8:	9301      	str	r3, [sp, #4]
   b85ba:	bd08      	pop	{r3, pc}
   b85bc:	0003024c 	.word	0x0003024c

000b85c0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b85c0:	b508      	push	{r3, lr}
   b85c2:	4b02      	ldr	r3, [pc, #8]	; (b85cc <HAL_USB_USART_Send_Data+0xc>)
   b85c4:	681b      	ldr	r3, [r3, #0]
   b85c6:	69db      	ldr	r3, [r3, #28]
   b85c8:	9301      	str	r3, [sp, #4]
   b85ca:	bd08      	pop	{r3, pc}
   b85cc:	0003024c 	.word	0x0003024c

000b85d0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b85d0:	b508      	push	{r3, lr}
   b85d2:	4b02      	ldr	r3, [pc, #8]	; (b85dc <HAL_USB_USART_Flush_Data+0xc>)
   b85d4:	681b      	ldr	r3, [r3, #0]
   b85d6:	6a1b      	ldr	r3, [r3, #32]
   b85d8:	9301      	str	r3, [sp, #4]
   b85da:	bd08      	pop	{r3, pc}
   b85dc:	0003024c 	.word	0x0003024c

000b85e0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b85e0:	b508      	push	{r3, lr}
   b85e2:	4b02      	ldr	r3, [pc, #8]	; (b85ec <panic_+0xc>)
   b85e4:	681b      	ldr	r3, [r3, #0]
   b85e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b85e8:	9301      	str	r3, [sp, #4]
   b85ea:	bd08      	pop	{r3, pc}
   b85ec:	00030260 	.word	0x00030260

000b85f0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b85f0:	b508      	push	{r3, lr}
   b85f2:	4b02      	ldr	r3, [pc, #8]	; (b85fc <log_message+0xc>)
   b85f4:	681b      	ldr	r3, [r3, #0]
   b85f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b85f8:	9301      	str	r3, [sp, #4]
   b85fa:	bd08      	pop	{r3, pc}
   b85fc:	00030260 	.word	0x00030260

000b8600 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b8600:	b508      	push	{r3, lr}
   b8602:	4b02      	ldr	r3, [pc, #8]	; (b860c <set_system_mode+0xc>)
   b8604:	681b      	ldr	r3, [r3, #0]
   b8606:	685b      	ldr	r3, [r3, #4]
   b8608:	9301      	str	r3, [sp, #4]
   b860a:	bd08      	pop	{r3, pc}
   b860c:	00030220 	.word	0x00030220

000b8610 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b8610:	b508      	push	{r3, lr}
   b8612:	4b02      	ldr	r3, [pc, #8]	; (b861c <system_delay_ms+0xc>)
   b8614:	681b      	ldr	r3, [r3, #0]
   b8616:	695b      	ldr	r3, [r3, #20]
   b8618:	9301      	str	r3, [sp, #4]
   b861a:	bd08      	pop	{r3, pc}
   b861c:	00030220 	.word	0x00030220

000b8620 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b8620:	b508      	push	{r3, lr}
   b8622:	4b03      	ldr	r3, [pc, #12]	; (b8630 <system_ctrl_set_app_request_handler+0x10>)
   b8624:	681b      	ldr	r3, [r3, #0]
   b8626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b862a:	9301      	str	r3, [sp, #4]
   b862c:	bd08      	pop	{r3, pc}
   b862e:	0000      	.short	0x0000
   b8630:	00030220 	.word	0x00030220

000b8634 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b8634:	b508      	push	{r3, lr}
   b8636:	4b03      	ldr	r3, [pc, #12]	; (b8644 <system_ctrl_set_result+0x10>)
   b8638:	681b      	ldr	r3, [r3, #0]
   b863a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b863e:	9301      	str	r3, [sp, #4]
   b8640:	bd08      	pop	{r3, pc}
   b8642:	0000      	.short	0x0000
   b8644:	00030220 	.word	0x00030220

000b8648 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b8648:	b508      	push	{r3, lr}
   b864a:	4b02      	ldr	r3, [pc, #8]	; (b8654 <spark_set_random_seed_from_cloud_handler+0xc>)
   b864c:	681b      	ldr	r3, [r3, #0]
   b864e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8650:	9301      	str	r3, [sp, #4]
   b8652:	bd08      	pop	{r3, pc}
   b8654:	00030244 	.word	0x00030244

000b8658 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b8658:	b508      	push	{r3, lr}
   b865a:	4b02      	ldr	r3, [pc, #8]	; (b8664 <network_connect+0xc>)
   b865c:	681b      	ldr	r3, [r3, #0]
   b865e:	685b      	ldr	r3, [r3, #4]
   b8660:	9301      	str	r3, [sp, #4]
   b8662:	bd08      	pop	{r3, pc}
   b8664:	00030240 	.word	0x00030240

000b8668 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b8668:	b508      	push	{r3, lr}
   b866a:	4b02      	ldr	r3, [pc, #8]	; (b8674 <network_connecting+0xc>)
   b866c:	681b      	ldr	r3, [r3, #0]
   b866e:	689b      	ldr	r3, [r3, #8]
   b8670:	9301      	str	r3, [sp, #4]
   b8672:	bd08      	pop	{r3, pc}
   b8674:	00030240 	.word	0x00030240

000b8678 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b8678:	b508      	push	{r3, lr}
   b867a:	4b02      	ldr	r3, [pc, #8]	; (b8684 <network_disconnect+0xc>)
   b867c:	681b      	ldr	r3, [r3, #0]
   b867e:	68db      	ldr	r3, [r3, #12]
   b8680:	9301      	str	r3, [sp, #4]
   b8682:	bd08      	pop	{r3, pc}
   b8684:	00030240 	.word	0x00030240

000b8688 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b8688:	b508      	push	{r3, lr}
   b868a:	4b02      	ldr	r3, [pc, #8]	; (b8694 <network_ready+0xc>)
   b868c:	681b      	ldr	r3, [r3, #0]
   b868e:	691b      	ldr	r3, [r3, #16]
   b8690:	9301      	str	r3, [sp, #4]
   b8692:	bd08      	pop	{r3, pc}
   b8694:	00030240 	.word	0x00030240

000b8698 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b8698:	b508      	push	{r3, lr}
   b869a:	4b02      	ldr	r3, [pc, #8]	; (b86a4 <network_on+0xc>)
   b869c:	681b      	ldr	r3, [r3, #0]
   b869e:	695b      	ldr	r3, [r3, #20]
   b86a0:	9301      	str	r3, [sp, #4]
   b86a2:	bd08      	pop	{r3, pc}
   b86a4:	00030240 	.word	0x00030240

000b86a8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b86a8:	b508      	push	{r3, lr}
   b86aa:	4b02      	ldr	r3, [pc, #8]	; (b86b4 <network_off+0xc>)
   b86ac:	681b      	ldr	r3, [r3, #0]
   b86ae:	699b      	ldr	r3, [r3, #24]
   b86b0:	9301      	str	r3, [sp, #4]
   b86b2:	bd08      	pop	{r3, pc}
   b86b4:	00030240 	.word	0x00030240

000b86b8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b86b8:	b508      	push	{r3, lr}
   b86ba:	4b02      	ldr	r3, [pc, #8]	; (b86c4 <network_listen+0xc>)
   b86bc:	681b      	ldr	r3, [r3, #0]
   b86be:	69db      	ldr	r3, [r3, #28]
   b86c0:	9301      	str	r3, [sp, #4]
   b86c2:	bd08      	pop	{r3, pc}
   b86c4:	00030240 	.word	0x00030240

000b86c8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b86c8:	b508      	push	{r3, lr}
   b86ca:	4b02      	ldr	r3, [pc, #8]	; (b86d4 <network_listening+0xc>)
   b86cc:	681b      	ldr	r3, [r3, #0]
   b86ce:	6a1b      	ldr	r3, [r3, #32]
   b86d0:	9301      	str	r3, [sp, #4]
   b86d2:	bd08      	pop	{r3, pc}
   b86d4:	00030240 	.word	0x00030240

000b86d8 <network_has_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
   b86d8:	b508      	push	{r3, lr}
   b86da:	4b02      	ldr	r3, [pc, #8]	; (b86e4 <network_has_credentials+0xc>)
   b86dc:	681b      	ldr	r3, [r3, #0]
   b86de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b86e0:	9301      	str	r3, [sp, #4]
   b86e2:	bd08      	pop	{r3, pc}
   b86e4:	00030240 	.word	0x00030240

000b86e8 <network_set_credentials>:
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b86e8:	b508      	push	{r3, lr}
   b86ea:	4b02      	ldr	r3, [pc, #8]	; (b86f4 <network_set_credentials+0xc>)
   b86ec:	681b      	ldr	r3, [r3, #0]
   b86ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b86f0:	9301      	str	r3, [sp, #4]
   b86f2:	bd08      	pop	{r3, pc}
   b86f4:	00030240 	.word	0x00030240

000b86f8 <network_clear_credentials>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b86f8:	b508      	push	{r3, lr}
   b86fa:	4b02      	ldr	r3, [pc, #8]	; (b8704 <network_clear_credentials+0xc>)
   b86fc:	681b      	ldr	r3, [r3, #0]
   b86fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8700:	9301      	str	r3, [sp, #4]
   b8702:	bd08      	pop	{r3, pc}
   b8704:	00030240 	.word	0x00030240

000b8708 <network_set_listen_timeout>:
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b8708:	b508      	push	{r3, lr}
   b870a:	4b02      	ldr	r3, [pc, #8]	; (b8714 <network_set_listen_timeout+0xc>)
   b870c:	681b      	ldr	r3, [r3, #0]
   b870e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8710:	9301      	str	r3, [sp, #4]
   b8712:	bd08      	pop	{r3, pc}
   b8714:	00030240 	.word	0x00030240

000b8718 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b8718:	b508      	push	{r3, lr}
   b871a:	4b02      	ldr	r3, [pc, #8]	; (b8724 <network_get_listen_timeout+0xc>)
   b871c:	681b      	ldr	r3, [r3, #0]
   b871e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8720:	9301      	str	r3, [sp, #4]
   b8722:	bd08      	pop	{r3, pc}
   b8724:	00030240 	.word	0x00030240

000b8728 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b8728:	b508      	push	{r3, lr}
   b872a:	4b02      	ldr	r3, [pc, #8]	; (b8734 <network_is_on+0xc>)
   b872c:	681b      	ldr	r3, [r3, #0]
   b872e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8730:	9301      	str	r3, [sp, #4]
   b8732:	bd08      	pop	{r3, pc}
   b8734:	00030240 	.word	0x00030240

000b8738 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b8738:	b508      	push	{r3, lr}
   b873a:	4b02      	ldr	r3, [pc, #8]	; (b8744 <network_is_off+0xc>)
   b873c:	681b      	ldr	r3, [r3, #0]
   b873e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8740:	9301      	str	r3, [sp, #4]
   b8742:	bd08      	pop	{r3, pc}
   b8744:	00030240 	.word	0x00030240

000b8748 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b8748:	b508      	push	{r3, lr}
   b874a:	4b02      	ldr	r3, [pc, #8]	; (b8754 <malloc+0xc>)
   b874c:	681b      	ldr	r3, [r3, #0]
   b874e:	681b      	ldr	r3, [r3, #0]
   b8750:	9301      	str	r3, [sp, #4]
   b8752:	bd08      	pop	{r3, pc}
   b8754:	0003021c 	.word	0x0003021c

000b8758 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b8758:	b508      	push	{r3, lr}
   b875a:	4b02      	ldr	r3, [pc, #8]	; (b8764 <free+0xc>)
   b875c:	681b      	ldr	r3, [r3, #0]
   b875e:	685b      	ldr	r3, [r3, #4]
   b8760:	9301      	str	r3, [sp, #4]
   b8762:	bd08      	pop	{r3, pc}
   b8764:	0003021c 	.word	0x0003021c

000b8768 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b8768:	b508      	push	{r3, lr}
   b876a:	4b02      	ldr	r3, [pc, #8]	; (b8774 <realloc+0xc>)
   b876c:	681b      	ldr	r3, [r3, #0]
   b876e:	689b      	ldr	r3, [r3, #8]
   b8770:	9301      	str	r3, [sp, #4]
   b8772:	bd08      	pop	{r3, pc}
   b8774:	0003021c 	.word	0x0003021c

000b8778 <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b8778:	b508      	push	{r3, lr}
   b877a:	4b02      	ldr	r3, [pc, #8]	; (b8784 <sscanf+0xc>)
   b877c:	681b      	ldr	r3, [r3, #0]
   b877e:	695b      	ldr	r3, [r3, #20]
   b8780:	9301      	str	r3, [sp, #4]
   b8782:	bd08      	pop	{r3, pc}
   b8784:	0003021c 	.word	0x0003021c

000b8788 <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b8788:	b508      	push	{r3, lr}
   b878a:	4b02      	ldr	r3, [pc, #8]	; (b8794 <vsnprintf+0xc>)
   b878c:	681b      	ldr	r3, [r3, #0]
   b878e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8790:	9301      	str	r3, [sp, #4]
   b8792:	bd08      	pop	{r3, pc}
   b8794:	0003021c 	.word	0x0003021c

000b8798 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b8798:	b508      	push	{r3, lr}
   b879a:	4b02      	ldr	r3, [pc, #8]	; (b87a4 <abort+0xc>)
   b879c:	681b      	ldr	r3, [r3, #0]
   b879e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b87a0:	9301      	str	r3, [sp, #4]
   b87a2:	bd08      	pop	{r3, pc}
   b87a4:	0003021c 	.word	0x0003021c

000b87a8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b87a8:	b508      	push	{r3, lr}
   b87aa:	4b02      	ldr	r3, [pc, #8]	; (b87b4 <_malloc_r+0xc>)
   b87ac:	681b      	ldr	r3, [r3, #0]
   b87ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b87b0:	9301      	str	r3, [sp, #4]
   b87b2:	bd08      	pop	{r3, pc}
   b87b4:	0003021c 	.word	0x0003021c

000b87b8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b87b8:	b508      	push	{r3, lr}
   b87ba:	4b02      	ldr	r3, [pc, #8]	; (b87c4 <__errno+0xc>)
   b87bc:	681b      	ldr	r3, [r3, #0]
   b87be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b87c0:	9301      	str	r3, [sp, #4]
   b87c2:	bd08      	pop	{r3, pc}
   b87c4:	0003021c 	.word	0x0003021c

000b87c8 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b87c8:	b508      	push	{r3, lr}
   b87ca:	4b02      	ldr	r3, [pc, #8]	; (b87d4 <__assert_func+0xc>)
   b87cc:	681b      	ldr	r3, [r3, #0]
   b87ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b87d0:	9301      	str	r3, [sp, #4]
   b87d2:	bd08      	pop	{r3, pc}
   b87d4:	0003021c 	.word	0x0003021c

000b87d8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b87d8:	b508      	push	{r3, lr}
   b87da:	4b02      	ldr	r3, [pc, #8]	; (b87e4 <newlib_impure_ptr_callback+0xc>)
   b87dc:	681b      	ldr	r3, [r3, #0]
   b87de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b87e0:	9301      	str	r3, [sp, #4]
   b87e2:	bd08      	pop	{r3, pc}
   b87e4:	0003021c 	.word	0x0003021c

000b87e8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b87e8:	2100      	movs	r1, #0
   b87ea:	f7ff bf11 	b.w	b8610 <system_delay_ms>

000b87ee <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b87ee:	4770      	bx	lr

000b87f0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b87f0:	4770      	bx	lr

000b87f2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b87f2:	4770      	bx	lr

000b87f4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b87f4:	4770      	bx	lr
	...

000b87f8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b87f8:	4b06      	ldr	r3, [pc, #24]	; (b8814 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b87fa:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b87fc:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b87fe:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8802:	d005      	beq.n	b8810 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8804:	4608      	mov	r0, r1
   b8806:	f002 fb29 	bl	bae5c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b880a:	2800      	cmp	r0, #0
   b880c:	bf08      	it	eq
   b880e:	2400      	moveq	r4, #0
      }
   b8810:	4620      	mov	r0, r4
   b8812:	bd10      	pop	{r4, pc}
   b8814:	000be5a0 	.word	0x000be5a0

000b8818 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8818:	4b06      	ldr	r3, [pc, #24]	; (b8834 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b881a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b881c:	b510      	push	{r4, lr}
   b881e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8822:	d005      	beq.n	b8830 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8824:	4608      	mov	r0, r1
   b8826:	f002 fb19 	bl	bae5c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b882a:	2800      	cmp	r0, #0
   b882c:	bf08      	it	eq
   b882e:	2400      	moveq	r4, #0
      }
   b8830:	4620      	mov	r0, r4
   b8832:	bd10      	pop	{r4, pc}
   b8834:	000be5a0 	.word	0x000be5a0

000b8838 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8838:	4b06      	ldr	r3, [pc, #24]	; (b8854 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b883a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b883c:	b510      	push	{r4, lr}
   b883e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8842:	d005      	beq.n	b8850 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8844:	4608      	mov	r0, r1
   b8846:	f002 fb09 	bl	bae5c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b884a:	2800      	cmp	r0, #0
   b884c:	bf08      	it	eq
   b884e:	2400      	moveq	r4, #0
      }
   b8850:	4620      	mov	r0, r4
   b8852:	bd10      	pop	{r4, pc}
   b8854:	000be5a0 	.word	0x000be5a0

000b8858 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8858:	b510      	push	{r4, lr}
   b885a:	2168      	movs	r1, #104	; 0x68
   b885c:	4604      	mov	r4, r0
   b885e:	f7fb fc20 	bl	b40a2 <_ZdlPvj>
   b8862:	4620      	mov	r0, r4
   b8864:	bd10      	pop	{r4, pc}

000b8866 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b8866:	b510      	push	{r4, lr}
   b8868:	2128      	movs	r1, #40	; 0x28
   b886a:	4604      	mov	r4, r0
   b886c:	f7fb fc19 	bl	b40a2 <_ZdlPvj>
   b8870:	4620      	mov	r0, r4
   b8872:	bd10      	pop	{r4, pc}

000b8874 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b8874:	b510      	push	{r4, lr}
   b8876:	2130      	movs	r1, #48	; 0x30
   b8878:	4604      	mov	r4, r0
   b887a:	f7fb fc12 	bl	b40a2 <_ZdlPvj>
   b887e:	4620      	mov	r0, r4
   b8880:	bd10      	pop	{r4, pc}

000b8882 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b8882:	2168      	movs	r1, #104	; 0x68
   b8884:	f7fb bc0d 	b.w	b40a2 <_ZdlPvj>

000b8888 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b8888:	2128      	movs	r1, #40	; 0x28
   b888a:	f7fb bc0a 	b.w	b40a2 <_ZdlPvj>

000b888e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b888e:	2130      	movs	r1, #48	; 0x30
   b8890:	f7fb bc07 	b.w	b40a2 <_ZdlPvj>

000b8894 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b8894:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b8896:	2500      	movs	r5, #0
   b8898:	1cec      	adds	r4, r5, #3
   b889a:	428c      	cmp	r4, r1
   b889c:	d80d      	bhi.n	b88ba <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b889e:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b88a0:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b88a2:	5d87      	ldrb	r7, [r0, r6]
   b88a4:	4297      	cmp	r7, r2
   b88a6:	d105      	bne.n	b88b4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b88a8:	4426      	add	r6, r4
   b88aa:	42b1      	cmp	r1, r6
   b88ac:	d305      	bcc.n	b88ba <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b88ae:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b88b0:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b88b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b88b4:	3401      	adds	r4, #1
   b88b6:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b88b8:	e7ee      	b.n	b8898 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b88ba:	2000      	movs	r0, #0
   b88bc:	e7f9      	b.n	b88b2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b88c0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b88c0:	4a02      	ldr	r2, [pc, #8]	; (b88cc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b88c2:	4903      	ldr	r1, [pc, #12]	; (b88d0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b88c4:	200a      	movs	r0, #10
   b88c6:	f7ff be8b 	b.w	b85e0 <panic_>
   b88ca:	bf00      	nop
   b88cc:	000b8381 	.word	0x000b8381
   b88d0:	000be400 	.word	0x000be400

000b88d4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b88d4:	b430      	push	{r4, r5}
   b88d6:	460d      	mov	r5, r1
   b88d8:	4611      	mov	r1, r2
   b88da:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b88dc:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b88de:	6809      	ldr	r1, [r1, #0]
   b88e0:	6828      	ldr	r0, [r5, #0]
   b88e2:	e9d3 4300 	ldrd	r4, r3, [r3]
   b88e6:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b88e8:	bc30      	pop	{r4, r5}
   b88ea:	4760      	bx	ip

000b88ec <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b88ec:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b88ee:	b538      	push	{r3, r4, r5, lr}
   b88f0:	4604      	mov	r4, r0
	switch (__op)
   b88f2:	d102      	bne.n	b88fa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b88f4:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b88f6:	6023      	str	r3, [r4, #0]
	}
   b88f8:	e003      	b.n	b8902 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b88fa:	2a02      	cmp	r2, #2
   b88fc:	d003      	beq.n	b8906 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b88fe:	2a03      	cmp	r2, #3
   b8900:	d00d      	beq.n	b891e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b8902:	2000      	movs	r0, #0
   b8904:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b8906:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b8908:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b890a:	f7fb fbc4 	bl	b4096 <_Znwj>
   b890e:	4603      	mov	r3, r0
   b8910:	2800      	cmp	r0, #0
   b8912:	d0f0      	beq.n	b88f6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b8914:	e895 0003 	ldmia.w	r5, {r0, r1}
   b8918:	e883 0003 	stmia.w	r3, {r0, r1}
   b891c:	e7eb      	b.n	b88f6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b891e:	6800      	ldr	r0, [r0, #0]
   b8920:	2800      	cmp	r0, #0
   b8922:	d0ee      	beq.n	b8902 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b8924:	2108      	movs	r1, #8
   b8926:	f7fb fbbc 	bl	b40a2 <_ZdlPvj>
   b892a:	e7ea      	b.n	b8902 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b892c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b892c:	b510      	push	{r4, lr}
      if (_M_manager)
   b892e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b8930:	4604      	mov	r4, r0
      if (_M_manager)
   b8932:	b113      	cbz	r3, b893a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b8934:	2203      	movs	r2, #3
   b8936:	4601      	mov	r1, r0
   b8938:	4798      	blx	r3
    }
   b893a:	4620      	mov	r0, r4
   b893c:	bd10      	pop	{r4, pc}

000b893e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b893e:	b510      	push	{r4, lr}
   b8940:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b8942:	3058      	adds	r0, #88	; 0x58
   b8944:	f7ff fff2 	bl	b892c <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b8948:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b894c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8950:	f001 bb98 	b.w	ba084 <_ZN6StringD1Ev>

000b8954 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b8954:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b8956:	6843      	ldr	r3, [r0, #4]
   b8958:	3b01      	subs	r3, #1
    {
   b895a:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b895c:	6043      	str	r3, [r0, #4]
   b895e:	b963      	cbnz	r3, b897a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b8960:	6803      	ldr	r3, [r0, #0]
   b8962:	689b      	ldr	r3, [r3, #8]
   b8964:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b8966:	68a3      	ldr	r3, [r4, #8]
   b8968:	3b01      	subs	r3, #1
   b896a:	60a3      	str	r3, [r4, #8]
   b896c:	b92b      	cbnz	r3, b897a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b896e:	6823      	ldr	r3, [r4, #0]
   b8970:	4620      	mov	r0, r4
   b8972:	68db      	ldr	r3, [r3, #12]
    }
   b8974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b8978:	4718      	bx	r3
    }
   b897a:	bd10      	pop	{r4, pc}

000b897c <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b897c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b8980:	b2da      	uxtb	r2, r3
   b8982:	2a09      	cmp	r2, #9
   b8984:	d801      	bhi.n	b898a <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b8986:	4618      	mov	r0, r3
   b8988:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b898a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b898e:	2b05      	cmp	r3, #5
   b8990:	d801      	bhi.n	b8996 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b8992:	3857      	subs	r0, #87	; 0x57
   b8994:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b8996:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b899a:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b899c:	bf94      	ite	ls
   b899e:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b89a0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b89a4:	4770      	bx	lr
	...

000b89a8 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b89a8:	b510      	push	{r4, lr}
            locked_(false) {
   b89aa:	2300      	movs	r3, #0
   b89ac:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b89ae:	4b04      	ldr	r3, [pc, #16]	; (b89c0 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b89b0:	4604      	mov	r4, r0
   b89b2:	6818      	ldr	r0, [r3, #0]
   b89b4:	f7ff fccc 	bl	b8350 <os_mutex_recursive_lock>
        locked_ = true;
   b89b8:	2301      	movs	r3, #1
   b89ba:	7023      	strb	r3, [r4, #0]
    }
   b89bc:	4620      	mov	r0, r4
   b89be:	bd10      	pop	{r4, pc}
   b89c0:	2003e6c0 	.word	0x2003e6c0

000b89c4 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b89c4:	b510      	push	{r4, lr}
        if (locked_) {
   b89c6:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b89c8:	4604      	mov	r4, r0
        if (locked_) {
   b89ca:	b11b      	cbz	r3, b89d4 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b89cc:	4b02      	ldr	r3, [pc, #8]	; (b89d8 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b89ce:	6818      	ldr	r0, [r3, #0]
   b89d0:	f7ff fcc6 	bl	b8360 <os_mutex_recursive_unlock>
    }
   b89d4:	4620      	mov	r0, r4
   b89d6:	bd10      	pop	{r4, pc}
   b89d8:	2003e6c0 	.word	0x2003e6c0

000b89dc <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b89dc:	b082      	sub	sp, #8
   b89de:	4603      	mov	r3, r0
    address_ = addr;
   b89e0:	6808      	ldr	r0, [r1, #0]
   b89e2:	6849      	ldr	r1, [r1, #4]
   b89e4:	466a      	mov	r2, sp
   b89e6:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b89e8:	466a      	mov	r2, sp
   b89ea:	ca03      	ldmia	r2!, {r0, r1}
   b89ec:	6018      	str	r0, [r3, #0]
}
   b89ee:	4618      	mov	r0, r3
    address_ = addr.address_;
   b89f0:	6059      	str	r1, [r3, #4]
}
   b89f2:	b002      	add	sp, #8
   b89f4:	4770      	bx	lr

000b89f6 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b89f6:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b89f8:	7982      	ldrb	r2, [r0, #6]
   b89fa:	798b      	ldrb	r3, [r1, #6]
   b89fc:	429a      	cmp	r2, r3
   b89fe:	d106      	bne.n	b8a0e <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b8a00:	2206      	movs	r2, #6
   b8a02:	f003 f9f7 	bl	bbdf4 <memcmp>
   b8a06:	fab0 f080 	clz	r0, r0
   b8a0a:	0940      	lsrs	r0, r0, #5
}
   b8a0c:	bd08      	pop	{r3, pc}
    return false;
   b8a0e:	2000      	movs	r0, #0
   b8a10:	e7fc      	b.n	b8a0c <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b8a12 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b8a12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8a16:	6003      	str	r3, [r0, #0]
   b8a18:	8083      	strh	r3, [r0, #4]
}
   b8a1a:	2000      	movs	r0, #0
   b8a1c:	4770      	bx	lr

000b8a1e <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b8a1e:	b508      	push	{r3, lr}
   b8a20:	4602      	mov	r2, r0
        : address_{} {
   b8a22:	2100      	movs	r1, #0
   b8a24:	6001      	str	r1, [r0, #0]
   b8a26:	6041      	str	r1, [r0, #4]
    clear();
   b8a28:	f7ff fff3 	bl	b8a12 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b8a2c:	7191      	strb	r1, [r2, #6]
}
   b8a2e:	4610      	mov	r0, r2
   b8a30:	bd08      	pop	{r3, pc}
	...

000b8a34 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b8a34:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b8a36:	2301      	movs	r3, #1
   b8a38:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8a3a:	4b05      	ldr	r3, [pc, #20]	; (b8a50 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b8a3c:	4602      	mov	r2, r0
   b8a3e:	f103 0110 	add.w	r1, r3, #16
   b8a42:	f853 4b04 	ldr.w	r4, [r3], #4
   b8a46:	f842 4b04 	str.w	r4, [r2], #4
   b8a4a:	428b      	cmp	r3, r1
   b8a4c:	d1f9      	bne.n	b8a42 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b8a4e:	bd10      	pop	{r4, pc}
   b8a50:	000be5ae 	.word	0x000be5ae

000b8a54 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b8a54:	b510      	push	{r4, lr}
    if (uuid128) {
   b8a56:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b8a58:	4604      	mov	r4, r0
    if (uuid128) {
   b8a5a:	b1b1      	cbz	r1, b8a8a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b8a5c:	2a01      	cmp	r2, #1
   b8a5e:	f101 0210 	add.w	r2, r1, #16
   b8a62:	d10a      	bne.n	b8a7a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b8a64:	4601      	mov	r1, r0
   b8a66:	f853 0b04 	ldr.w	r0, [r3], #4
   b8a6a:	f841 0b04 	str.w	r0, [r1], #4
   b8a6e:	4293      	cmp	r3, r2
   b8a70:	d1f9      	bne.n	b8a66 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b8a72:	2301      	movs	r3, #1
   b8a74:	6123      	str	r3, [r4, #16]
}
   b8a76:	4620      	mov	r0, r4
   b8a78:	bd10      	pop	{r4, pc}
   b8a7a:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b8a7c:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b8a80:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b8a84:	429a      	cmp	r2, r3
   b8a86:	d1f9      	bne.n	b8a7c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b8a88:	e7f3      	b.n	b8a72 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b8a8a:	2210      	movs	r2, #16
   b8a8c:	f003 f9ea 	bl	bbe64 <memset>
   b8a90:	e7f1      	b.n	b8a76 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b8a92 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b8a92:	b538      	push	{r3, r4, r5, lr}
   b8a94:	4604      	mov	r4, r0
   b8a96:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b8a98:	461a      	mov	r2, r3
   b8a9a:	f7ff ffdb 	bl	b8a54 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b8a9e:	81a5      	strh	r5, [r4, #12]
}
   b8aa0:	4620      	mov	r0, r4
   b8aa2:	bd38      	pop	{r3, r4, r5, pc}

000b8aa4 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b8aa4:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b8aa6:	6902      	ldr	r2, [r0, #16]
   b8aa8:	b922      	cbnz	r2, b8ab4 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b8aaa:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8aac:	3800      	subs	r0, #0
   b8aae:	bf18      	it	ne
   b8ab0:	2001      	movne	r0, #1
}
   b8ab2:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8ab4:	4902      	ldr	r1, [pc, #8]	; (b8ac0 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b8ab6:	2210      	movs	r2, #16
   b8ab8:	f003 f99c 	bl	bbdf4 <memcmp>
   b8abc:	e7f6      	b.n	b8aac <_ZNK8particle7BleUuid7isValidEv+0x8>
   b8abe:	bf00      	nop
   b8ac0:	000be5ce 	.word	0x000be5ce

000b8ac4 <_ZNK8particle7BleUuid4typeEv>:
}
   b8ac4:	6900      	ldr	r0, [r0, #16]
   b8ac6:	4770      	bx	lr

000b8ac8 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b8ac8:	b538      	push	{r3, r4, r5, lr}
   b8aca:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b8acc:	2214      	movs	r2, #20
   b8ace:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b8ad0:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b8ad2:	f003 f9c7 	bl	bbe64 <memset>
    if (type_ == BleUuidType::SHORT) {
   b8ad6:	6923      	ldr	r3, [r4, #16]
   b8ad8:	b91b      	cbnz	r3, b8ae2 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b8ada:	89a3      	ldrh	r3, [r4, #12]
   b8adc:	802b      	strh	r3, [r5, #0]
}
   b8ade:	4628      	mov	r0, r5
   b8ae0:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b8ae2:	2301      	movs	r3, #1
   b8ae4:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b8ae6:	4621      	mov	r1, r4
   b8ae8:	462b      	mov	r3, r5
   b8aea:	f104 0210 	add.w	r2, r4, #16
   b8aee:	f851 0b04 	ldr.w	r0, [r1], #4
   b8af2:	f843 0b04 	str.w	r0, [r3], #4
   b8af6:	4291      	cmp	r1, r2
   b8af8:	d1f9      	bne.n	b8aee <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b8afa:	e7f0      	b.n	b8ade <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b8afc <_ZNK8particle7BleUuid7shortedEv>:
}
   b8afc:	8980      	ldrh	r0, [r0, #12]
   b8afe:	4770      	bx	lr

000b8b00 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b8b00:	4770      	bx	lr

000b8b02 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b8b02:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b8b04:	6902      	ldr	r2, [r0, #16]
   b8b06:	690b      	ldr	r3, [r1, #16]
   b8b08:	429a      	cmp	r2, r3
   b8b0a:	d106      	bne.n	b8b1a <_ZNK8particle7BleUuideqERKS0_+0x18>
   b8b0c:	2210      	movs	r2, #16
   b8b0e:	f003 f971 	bl	bbdf4 <memcmp>
   b8b12:	fab0 f080 	clz	r0, r0
   b8b16:	0940      	lsrs	r0, r0, #5
}
   b8b18:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b8b1a:	2000      	movs	r0, #0
   b8b1c:	e7fc      	b.n	b8b18 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b8b20 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b8b20:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b8b22:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b8b26:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8b28:	4b34      	ldr	r3, [pc, #208]	; (b8bfc <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b8b2a:	460c      	mov	r4, r1
   b8b2c:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8b2e:	4602      	mov	r2, r0
   b8b30:	f103 0110 	add.w	r1, r3, #16
   b8b34:	f853 0b04 	ldr.w	r0, [r3], #4
   b8b38:	f842 0b04 	str.w	r0, [r2], #4
   b8b3c:	428b      	cmp	r3, r1
   b8b3e:	d1f9      	bne.n	b8b34 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b8b40:	b344      	cbz	r4, b8b94 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b8b42:	2124      	movs	r1, #36	; 0x24
   b8b44:	4620      	mov	r0, r4
   b8b46:	f003 f9f1 	bl	bbf2c <strnlen>
   b8b4a:	2804      	cmp	r0, #4
   b8b4c:	f04f 0500 	mov.w	r5, #0
   b8b50:	d123      	bne.n	b8b9a <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b8b52:	f8ad 5004 	strh.w	r5, [sp, #4]
   b8b56:	af01      	add	r7, sp, #4
   b8b58:	1ca5      	adds	r5, r4, #2
   b8b5a:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b8b5c:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b8b60:	f7ff ff0c 	bl	b897c <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b8b64:	f1b0 0800 	subs.w	r8, r0, #0
   b8b68:	db12      	blt.n	b8b90 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b8b6a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b8b6e:	f7ff ff05 	bl	b897c <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b8b72:	2800      	cmp	r0, #0
   b8b74:	db0c      	blt.n	b8b90 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b8b76:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b8b78:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b8b7c:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b8b7e:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b8b82:	d1eb      	bne.n	b8b5c <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b8b84:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b8b88:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b8b8a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b8b8e:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b8b90:	2300      	movs	r3, #0
   b8b92:	6133      	str	r3, [r6, #16]
}
   b8b94:	b002      	add	sp, #8
   b8b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b8b9a:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b8b9e:	2124      	movs	r1, #36	; 0x24
   b8ba0:	4620      	mov	r0, r4
   b8ba2:	f003 f9c3 	bl	bbf2c <strnlen>
   b8ba6:	42a8      	cmp	r0, r5
   b8ba8:	d807      	bhi.n	b8bba <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b8baa:	4642      	mov	r2, r8
   b8bac:	2100      	movs	r1, #0
   b8bae:	4630      	mov	r0, r6
}
   b8bb0:	b002      	add	sp, #8
   b8bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b8bb6:	f003 b955 	b.w	bbe64 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b8bba:	f1b8 0f00 	cmp.w	r8, #0
   b8bbe:	d0e9      	beq.n	b8b94 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b8bc0:	5d60      	ldrb	r0, [r4, r5]
   b8bc2:	f7ff fedb 	bl	b897c <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b8bc6:	0603      	lsls	r3, r0, #24
   b8bc8:	d415      	bmi.n	b8bf6 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b8bca:	0100      	lsls	r0, r0, #4
   b8bcc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b8bd0:	b2c7      	uxtb	r7, r0
   b8bd2:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b8bd6:	2124      	movs	r1, #36	; 0x24
   b8bd8:	4620      	mov	r0, r4
   b8bda:	f003 f9a7 	bl	bbf2c <strnlen>
   b8bde:	3501      	adds	r5, #1
   b8be0:	42a8      	cmp	r0, r5
   b8be2:	d908      	bls.n	b8bf6 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b8be4:	5d60      	ldrb	r0, [r4, r5]
   b8be6:	f7ff fec9 	bl	b897c <_ZN8particle11hexToNibbleEc>
   b8bea:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b8bec:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b8bee:	bfa4      	itt	ge
   b8bf0:	4338      	orrge	r0, r7
   b8bf2:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b8bf6:	3501      	adds	r5, #1
   b8bf8:	e7d1      	b.n	b8b9e <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b8bfa:	bf00      	nop
   b8bfc:	000be5ae 	.word	0x000be5ae

000b8c00 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b8c00:	b513      	push	{r0, r1, r4, lr}
   b8c02:	4604      	mov	r4, r0
   b8c04:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b8c06:	f7ff ff15 	bl	b8a34 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b8c0a:	4620      	mov	r0, r4
   b8c0c:	9901      	ldr	r1, [sp, #4]
   b8c0e:	f7ff ff87 	bl	b8b20 <_ZN8particle7BleUuid9constructEPKc>
}
   b8c12:	4620      	mov	r0, r4
   b8c14:	b002      	add	sp, #8
   b8c16:	bd10      	pop	{r4, pc}

000b8c18 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b8c18:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b8c1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b8c1e:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b8c20:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b8c22:	8043      	strh	r3, [r0, #2]
   b8c24:	220e      	movs	r2, #14
   b8c26:	4629      	mov	r1, r5
   b8c28:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b8c2a:	7105      	strb	r5, [r0, #4]
   b8c2c:	3006      	adds	r0, #6
   b8c2e:	f003 f919 	bl	bbe64 <memset>
   b8c32:	f104 0014 	add.w	r0, r4, #20
   b8c36:	f7ff fefd 	bl	b8a34 <_ZN8particle7BleUuidC1Ev>
   b8c3a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b8c3e:	f7ff fef9 	bl	b8a34 <_ZN8particle7BleUuidC1Ev>
   b8c42:	4904      	ldr	r1, [pc, #16]	; (b8c54 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b8c44:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b8c48:	f001 fa67 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b8c4c:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b8c4e:	4620      	mov	r0, r4
   b8c50:	bd38      	pop	{r3, r4, r5, pc}
   b8c52:	bf00      	nop
   b8c54:	000be3ca 	.word	0x000be3ca

000b8c58 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b8c58:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b8c5a:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b8c5e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b8c62:	4293      	cmp	r3, r2
   b8c64:	4618      	mov	r0, r3
   b8c66:	d006      	beq.n	b8c76 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b8c68:	6804      	ldr	r4, [r0, #0]
   b8c6a:	8824      	ldrh	r4, [r4, #0]
   b8c6c:	428c      	cmp	r4, r1
   b8c6e:	f103 0308 	add.w	r3, r3, #8
   b8c72:	d1f6      	bne.n	b8c62 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b8c74:	bd10      	pop	{r4, pc}
        return nullptr;
   b8c76:	2000      	movs	r0, #0
   b8c78:	e7fc      	b.n	b8c74 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b8c7c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b8c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8c7e:	4606      	mov	r6, r0
   b8c80:	b085      	sub	sp, #20
   b8c82:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b8c84:	460d      	mov	r5, r1
   b8c86:	2900      	cmp	r1, #0
   b8c88:	d050      	beq.n	b8d2c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b8c8a:	2a00      	cmp	r2, #0
   b8c8c:	d04e      	beq.n	b8d2c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b8c8e:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b8c90:	7823      	ldrb	r3, [r4, #0]
   b8c92:	2af4      	cmp	r2, #244	; 0xf4
   b8c94:	bf28      	it	cs
   b8c96:	22f4      	movcs	r2, #244	; 0xf4
   b8c98:	b343      	cbz	r3, b8cec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b8c9a:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b8c9c:	0798      	lsls	r0, r3, #30
   b8c9e:	d509      	bpl.n	b8cb4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b8ca0:	89a0      	ldrh	r0, [r4, #12]
   b8ca2:	9203      	str	r2, [sp, #12]
   b8ca4:	2300      	movs	r3, #0
   b8ca6:	f7ff fb05 	bl	b82b4 <hal_ble_gatt_server_set_characteristic_value>
   b8caa:	2800      	cmp	r0, #0
   b8cac:	9a03      	ldr	r2, [sp, #12]
   b8cae:	da03      	bge.n	b8cb8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b8cb0:	b005      	add	sp, #20
   b8cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b8cb4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b8cb8:	6834      	ldr	r4, [r6, #0]
   b8cba:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b8cbc:	06d9      	lsls	r1, r3, #27
   b8cbe:	d509      	bpl.n	b8cd4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b8cc0:	2f01      	cmp	r7, #1
   b8cc2:	d007      	beq.n	b8cd4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b8cc4:	89a0      	ldrh	r0, [r4, #12]
   b8cc6:	2300      	movs	r3, #0
   b8cc8:	4629      	mov	r1, r5
}
   b8cca:	b005      	add	sp, #20
   b8ccc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b8cd0:	f7ff bb22 	b.w	b8318 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b8cd4:	069b      	lsls	r3, r3, #26
   b8cd6:	d5eb      	bpl.n	b8cb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b8cd8:	2f02      	cmp	r7, #2
   b8cda:	d0e9      	beq.n	b8cb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b8cdc:	89a0      	ldrh	r0, [r4, #12]
   b8cde:	2300      	movs	r3, #0
   b8ce0:	4629      	mov	r1, r5
}
   b8ce2:	b005      	add	sp, #20
   b8ce4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b8ce8:	f7ff bb20 	b.w	b832c <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b8cec:	8860      	ldrh	r0, [r4, #2]
   b8cee:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8cf2:	4288      	cmp	r0, r1
   b8cf4:	d01c      	beq.n	b8d30 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b8cf6:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b8cf8:	074e      	lsls	r6, r1, #29
   b8cfa:	d501      	bpl.n	b8d00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b8cfc:	2f01      	cmp	r7, #1
   b8cfe:	d104      	bne.n	b8d0a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b8d00:	070b      	lsls	r3, r1, #28
   b8d02:	d409      	bmi.n	b8d18 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b8d04:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b8d08:	e7d2      	b.n	b8cb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b8d0a:	89a1      	ldrh	r1, [r4, #12]
   b8d0c:	9300      	str	r3, [sp, #0]
   b8d0e:	4613      	mov	r3, r2
   b8d10:	462a      	mov	r2, r5
   b8d12:	f7ff fae3 	bl	b82dc <hal_ble_gatt_client_write_without_response>
   b8d16:	e7cb      	b.n	b8cb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b8d18:	2f02      	cmp	r7, #2
   b8d1a:	d0f3      	beq.n	b8d04 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b8d1c:	2300      	movs	r3, #0
   b8d1e:	89a1      	ldrh	r1, [r4, #12]
   b8d20:	9300      	str	r3, [sp, #0]
   b8d22:	4613      	mov	r3, r2
   b8d24:	462a      	mov	r2, r5
   b8d26:	f7ff facf 	bl	b82c8 <hal_ble_gatt_client_write_with_response>
   b8d2a:	e7c1      	b.n	b8cb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b8d2c:	4802      	ldr	r0, [pc, #8]	; (b8d38 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b8d2e:	e7bf      	b.n	b8cb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b8d30:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b8d34:	e7bc      	b.n	b8cb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b8d36:	bf00      	nop
   b8d38:	fffffef2 	.word	0xfffffef2

000b8d3c <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b8d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8d3e:	460c      	mov	r4, r1
   b8d40:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b8d42:	21f4      	movs	r1, #244	; 0xf4
   b8d44:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b8d46:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b8d48:	f003 f8f0 	bl	bbf2c <strnlen>
   b8d4c:	9b01      	ldr	r3, [sp, #4]
   b8d4e:	4602      	mov	r2, r0
   b8d50:	4621      	mov	r1, r4
   b8d52:	4628      	mov	r0, r5
}
   b8d54:	b003      	add	sp, #12
   b8d56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b8d5a:	f7ff bf8f 	b.w	b8c7c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000b8d60 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b8d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8d64:	2600      	movs	r6, #0
   b8d66:	6006      	str	r6, [r0, #0]
   b8d68:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8d6a:	2028      	movs	r0, #40	; 0x28
   b8d6c:	460c      	mov	r4, r1
   b8d6e:	f7fb f992 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b8d72:	1e05      	subs	r5, r0, #0
   b8d74:	f105 080c 	add.w	r8, r5, #12
   b8d78:	d00f      	beq.n	b8d9a <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b8d7a:	2301      	movs	r3, #1
   b8d7c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b8d80:	4b08      	ldr	r3, [pc, #32]	; (b8da4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b8d82:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b8d84:	4640      	mov	r0, r8
   b8d86:	f7ff fe55 	bl	b8a34 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b8d8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b8d8c:	622e      	str	r6, [r5, #32]
   b8d8e:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b8d92:	4646      	mov	r6, r8
   b8d94:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b8d96:	6823      	ldr	r3, [r4, #0]
   b8d98:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b8d9a:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b8d9e:	4638      	mov	r0, r7
   b8da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8da4:	000be570 	.word	0x000be570

000b8da8 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b8da8:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8daa:	2500      	movs	r5, #0
   b8dac:	6005      	str	r5, [r0, #0]
   b8dae:	4606      	mov	r6, r0
   b8db0:	2030      	movs	r0, #48	; 0x30
   b8db2:	f7fb f970 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b8db6:	4604      	mov	r4, r0
   b8db8:	b188      	cbz	r0, b8dde <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b8dba:	2301      	movs	r3, #1
   b8dbc:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b8dc0:	4b09      	ldr	r3, [pc, #36]	; (b8de8 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b8dc2:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b8dc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b8dc8:	8183      	strh	r3, [r0, #12]
   b8dca:	300e      	adds	r0, #14
   b8dcc:	f7ff fe27 	bl	b8a1e <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b8dd0:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b8dd4:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b8dd8:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b8ddc:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b8dde:	6074      	str	r4, [r6, #4]
   b8de0:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b8de2:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b8de4:	4630      	mov	r0, r6
   b8de6:	bd70      	pop	{r4, r5, r6, pc}
   b8de8:	000be58c 	.word	0x000be58c

000b8dec <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b8dec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8dee:	460d      	mov	r5, r1
   b8df0:	4604      	mov	r4, r0
    WiringBleLock lk;
   b8df2:	a801      	add	r0, sp, #4
   b8df4:	f7ff fdd8 	bl	b89a8 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b8df8:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b8dfa:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b8dfe:	6023      	str	r3, [r4, #0]
   b8e00:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b8e04:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b8e06:	a801      	add	r0, sp, #4
   b8e08:	f7ff fddc 	bl	b89c4 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b8e0c:	4620      	mov	r0, r4
   b8e0e:	b003      	add	sp, #12
   b8e10:	bd30      	pop	{r4, r5, pc}

000b8e12 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b8e12:	b530      	push	{r4, r5, lr}
   b8e14:	4605      	mov	r5, r0
   b8e16:	b087      	sub	sp, #28
   b8e18:	460c      	mov	r4, r1
    WiringBleLock lk;
   b8e1a:	a801      	add	r0, sp, #4
   b8e1c:	f7ff fdc4 	bl	b89a8 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b8e20:	682a      	ldr	r2, [r5, #0]
   b8e22:	6823      	ldr	r3, [r4, #0]
   b8e24:	8812      	ldrh	r2, [r2, #0]
   b8e26:	881b      	ldrh	r3, [r3, #0]
   b8e28:	429a      	cmp	r2, r3
   b8e2a:	d10d      	bne.n	b8e48 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b8e2c:	4629      	mov	r1, r5
   b8e2e:	a802      	add	r0, sp, #8
   b8e30:	f7ff ffdc 	bl	b8dec <_ZNK8particle13BlePeerDevice7addressEv>
   b8e34:	4621      	mov	r1, r4
   b8e36:	a804      	add	r0, sp, #16
   b8e38:	f7ff ffd8 	bl	b8dec <_ZNK8particle13BlePeerDevice7addressEv>
   b8e3c:	a904      	add	r1, sp, #16
   b8e3e:	a802      	add	r0, sp, #8
   b8e40:	f7ff fdd9 	bl	b89f6 <_ZNK8particle10BleAddresseqERKS0_>
   b8e44:	4604      	mov	r4, r0
   b8e46:	b900      	cbnz	r0, b8e4a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b8e48:	2400      	movs	r4, #0
    WiringBleLock lk;
   b8e4a:	a801      	add	r0, sp, #4
   b8e4c:	f7ff fdba 	bl	b89c4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b8e50:	4620      	mov	r0, r4
   b8e52:	b007      	add	sp, #28
   b8e54:	bd30      	pop	{r4, r5, pc}
	...

000b8e58 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b8e58:	b510      	push	{r4, lr}
   b8e5a:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b8e5c:	2064      	movs	r0, #100	; 0x64
   b8e5e:	f7fb f91a 	bl	b4096 <_Znwj>
   b8e62:	b168      	cbz	r0, b8e80 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b8e64:	2300      	movs	r3, #0
   b8e66:	e9c0 3300 	strd	r3, r3, [r0]
   b8e6a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b8e6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b8e72:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b8e76:	6203      	str	r3, [r0, #32]
   b8e78:	62c3      	str	r3, [r0, #44]	; 0x2c
   b8e7a:	63c3      	str	r3, [r0, #60]	; 0x3c
   b8e7c:	64c3      	str	r3, [r0, #76]	; 0x4c
   b8e7e:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b8e80:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b8e82:	b920      	cbnz	r0, b8e8e <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b8e84:	4a0a      	ldr	r2, [pc, #40]	; (b8eb0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b8e86:	490b      	ldr	r1, [pc, #44]	; (b8eb4 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b8e88:	200a      	movs	r0, #10
   b8e8a:	f7ff fba9 	bl	b85e0 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b8e8e:	2000      	movs	r0, #0
   b8e90:	f7ff f9dc 	bl	b824c <hal_ble_stack_init>
   b8e94:	b120      	cbz	r0, b8ea0 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b8e96:	4a06      	ldr	r2, [pc, #24]	; (b8eb0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b8e98:	4907      	ldr	r1, [pc, #28]	; (b8eb8 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b8e9a:	200a      	movs	r0, #10
   b8e9c:	f7ff fba0 	bl	b85e0 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b8ea0:	6821      	ldr	r1, [r4, #0]
   b8ea2:	4806      	ldr	r0, [pc, #24]	; (b8ebc <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b8ea4:	2200      	movs	r2, #0
   b8ea6:	f7ff fa2d 	bl	b8304 <hal_ble_set_callback_on_periph_link_events>
}
   b8eaa:	4620      	mov	r0, r4
   b8eac:	bd10      	pop	{r4, pc}
   b8eae:	bf00      	nop
   b8eb0:	000b8381 	.word	0x000b8381
   b8eb4:	000be400 	.word	0x000be400
   b8eb8:	000be43e 	.word	0x000be43e
   b8ebc:	000b9441 	.word	0x000b9441

000b8ec0 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b8ec0:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b8ec2:	4c0a      	ldr	r4, [pc, #40]	; (b8eec <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b8ec4:	7823      	ldrb	r3, [r4, #0]
   b8ec6:	f3bf 8f5b 	dmb	ish
   b8eca:	07db      	lsls	r3, r3, #31
   b8ecc:	d40c      	bmi.n	b8ee8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b8ece:	4620      	mov	r0, r4
   b8ed0:	f7fb f8e9 	bl	b40a6 <__cxa_guard_acquire>
   b8ed4:	b140      	cbz	r0, b8ee8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b8ed6:	4806      	ldr	r0, [pc, #24]	; (b8ef0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b8ed8:	f7ff ffbe 	bl	b8e58 <_ZN8particle14BleLocalDeviceC1Ev>
   b8edc:	4620      	mov	r0, r4
   b8ede:	f7fb f8e7 	bl	b40b0 <__cxa_guard_release>
   b8ee2:	4804      	ldr	r0, [pc, #16]	; (b8ef4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b8ee4:	f002 ff7c 	bl	bbde0 <atexit>
    return instance;
}
   b8ee8:	4801      	ldr	r0, [pc, #4]	; (b8ef0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b8eea:	bd10      	pop	{r4, pc}
   b8eec:	2003e6b8 	.word	0x2003e6b8
   b8ef0:	2003e6c4 	.word	0x2003e6c4
   b8ef4:	000b910d 	.word	0x000b910d

000b8ef8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b8ef8:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b8efa:	6803      	ldr	r3, [r0, #0]
   b8efc:	3b09      	subs	r3, #9
   b8efe:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b8f00:	b08d      	sub	sp, #52	; 0x34
   b8f02:	4604      	mov	r4, r0
   b8f04:	460d      	mov	r5, r1
    switch (event->type) {
   b8f06:	d811      	bhi.n	b8f2c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b8f08:	f7ff ffda 	bl	b8ec0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b8f0c:	88a1      	ldrh	r1, [r4, #4]
   b8f0e:	6800      	ldr	r0, [r0, #0]
   b8f10:	f7ff fea2 	bl	b8c58 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b8f14:	4603      	mov	r3, r0
   b8f16:	b958      	cbnz	r0, b8f30 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b8f18:	2220      	movs	r2, #32
   b8f1a:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b8f1e:	4a0b      	ldr	r2, [pc, #44]	; (b8f4c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b8f20:	9200      	str	r2, [sp, #0]
   b8f22:	490b      	ldr	r1, [pc, #44]	; (b8f50 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b8f24:	aa04      	add	r2, sp, #16
   b8f26:	2032      	movs	r0, #50	; 0x32
   b8f28:	f7ff fb62 	bl	b85f0 <log_message>
}
   b8f2c:	b00d      	add	sp, #52	; 0x34
   b8f2e:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b8f30:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b8f32:	2a00      	cmp	r2, #0
   b8f34:	d0fa      	beq.n	b8f2c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b8f36:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8f3a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b8f3e:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b8f42:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b8f44:	aa04      	add	r2, sp, #16
   b8f46:	a903      	add	r1, sp, #12
   b8f48:	47a0      	blx	r4
}
   b8f4a:	e7ef      	b.n	b8f2c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b8f4c:	000be480 	.word	0x000be480
   b8f50:	000be417 	.word	0x000be417

000b8f54 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b8f54:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b8f56:	2000      	movs	r0, #0
   b8f58:	f7ff f978 	bl	b824c <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b8f5c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b8f60:	bd08      	pop	{r3, pc}

000b8f62 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b8f62:	b919      	cbnz	r1, b8f6c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b8f64:	460a      	mov	r2, r1
   b8f66:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b8f68:	f7ff b978 	b.w	b825c <hal_ble_gap_set_advertising_data>
   b8f6c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8f70:	2200      	movs	r2, #0
   b8f72:	e7f9      	b.n	b8f68 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b8f74 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b8f74:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b8f76:	1e14      	subs	r4, r2, #0
   b8f78:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b8f7a:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b8f7c:	db02      	blt.n	b8f84 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b8f7e:	1862      	adds	r2, r4, r1
   b8f80:	429a      	cmp	r2, r3
   b8f82:	dd00      	ble.n	b8f86 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b8f84:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b8f86:	682a      	ldr	r2, [r5, #0]
   b8f88:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b8f8a:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b8f8c:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8f8e:	1a52      	subs	r2, r2, r1
   b8f90:	f002 ff4e 	bl	bbe30 <memmove>
    size_ -= n;
   b8f94:	686a      	ldr	r2, [r5, #4]
   b8f96:	1b12      	subs	r2, r2, r4
   b8f98:	606a      	str	r2, [r5, #4]
}
   b8f9a:	bd38      	pop	{r3, r4, r5, pc}

000b8f9c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b8f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b8f9e:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b8fa0:	4604      	mov	r4, r0
   b8fa2:	460d      	mov	r5, r1
   b8fa4:	ab01      	add	r3, sp, #4
   b8fa6:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8faa:	f7ff fc73 	bl	b8894 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b8fae:	4602      	mov	r2, r0
   b8fb0:	b138      	cbz	r0, b8fc2 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b8fb2:	9901      	ldr	r1, [sp, #4]
   b8fb4:	4620      	mov	r0, r4
   b8fb6:	f7ff ffdd 	bl	b8f74 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b8fba:	4629      	mov	r1, r5
   b8fbc:	4620      	mov	r0, r4
   b8fbe:	f7ff ffed 	bl	b8f9c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b8fc2:	b003      	add	sp, #12
   b8fc4:	bd30      	pop	{r4, r5, pc}

000b8fc6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b8fc6:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b8fc8:	460c      	mov	r4, r1
   b8fca:	b929      	cbnz	r1, b8fd8 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b8fcc:	460a      	mov	r2, r1
   b8fce:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b8fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b8fd4:	f7ff b94a 	b.w	b826c <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b8fd8:	2101      	movs	r1, #1
   b8fda:	4620      	mov	r0, r4
   b8fdc:	f7ff ffde 	bl	b8f9c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b8fe0:	e9d4 0100 	ldrd	r0, r1, [r4]
   b8fe4:	2200      	movs	r2, #0
   b8fe6:	e7f3      	b.n	b8fd0 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b8fe8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b8fe8:	b538      	push	{r3, r4, r5, lr}
   b8fea:	4604      	mov	r4, r0
   b8fec:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b8fee:	f7ff ffb8 	bl	b8f62 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b8ff2:	2800      	cmp	r0, #0
   b8ff4:	db0a      	blt.n	b900c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b8ff6:	4629      	mov	r1, r5
   b8ff8:	4620      	mov	r0, r4
   b8ffa:	f7ff ffe4 	bl	b8fc6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b8ffe:	2800      	cmp	r0, #0
   b9000:	db04      	blt.n	b900c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b9002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b9006:	2000      	movs	r0, #0
   b9008:	f7ff b938 	b.w	b827c <hal_ble_gap_start_advertising>
}
   b900c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b9010 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b9010:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b9012:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b9014:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b9016:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9018:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b901a:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b901c:	f7fb f83b 	bl	b4096 <_Znwj>
   b9020:	b118      	cbz	r0, b902a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b9022:	682b      	ldr	r3, [r5, #0]
   b9024:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b9026:	686b      	ldr	r3, [r5, #4]
   b9028:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b902a:	4b03      	ldr	r3, [pc, #12]	; (b9038 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b902c:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b902e:	4b03      	ldr	r3, [pc, #12]	; (b903c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9030:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b9032:	60a3      	str	r3, [r4, #8]
      }
   b9034:	4620      	mov	r0, r4
   b9036:	bd38      	pop	{r3, r4, r5, pc}
   b9038:	000b88d5 	.word	0x000b88d5
   b903c:	000b88ed 	.word	0x000b88ed

000b9040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b9040:	680b      	ldr	r3, [r1, #0]
   b9042:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b9044:	b113      	cbz	r3, b904c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b9046:	685a      	ldr	r2, [r3, #4]
   b9048:	3201      	adds	r2, #1
   b904a:	605a      	str	r2, [r3, #4]
      }
   b904c:	4770      	bx	lr

000b904e <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b904e:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9050:	f851 3b04 	ldr.w	r3, [r1], #4
   b9054:	4604      	mov	r4, r0
   b9056:	f840 3b04 	str.w	r3, [r0], #4
   b905a:	f7ff fff1 	bl	b9040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b905e:	6823      	ldr	r3, [r4, #0]
   b9060:	b90b      	cbnz	r3, b9066 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b9062:	f7ff fc2d 	bl	b88c0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b9066:	4620      	mov	r0, r4
   b9068:	bd10      	pop	{r4, pc}

000b906a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b906a:	b510      	push	{r4, lr}
   b906c:	f851 3b04 	ldr.w	r3, [r1], #4
   b9070:	4604      	mov	r4, r0
   b9072:	f840 3b04 	str.w	r3, [r0], #4
   b9076:	f7ff ffe3 	bl	b9040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b907a:	4620      	mov	r0, r4
   b907c:	bd10      	pop	{r4, pc}

000b907e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b907e:	b510      	push	{r4, lr}
   b9080:	f851 3b04 	ldr.w	r3, [r1], #4
   b9084:	4604      	mov	r4, r0
   b9086:	f840 3b04 	str.w	r3, [r0], #4
   b908a:	f7ff ffd9 	bl	b9040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b908e:	4620      	mov	r0, r4
   b9090:	bd10      	pop	{r4, pc}

000b9092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b9092:	b510      	push	{r4, lr}
   b9094:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b9096:	6800      	ldr	r0, [r0, #0]
   b9098:	b108      	cbz	r0, b909e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b909a:	f7ff fc5b 	bl	b8954 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b909e:	4620      	mov	r0, r4
   b90a0:	bd10      	pop	{r4, pc}

000b90a2 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b90a2:	b510      	push	{r4, lr}
   b90a4:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b90a6:	3004      	adds	r0, #4
   b90a8:	f7ff fff3 	bl	b9092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b90ac:	4620      	mov	r0, r4
   b90ae:	bd10      	pop	{r4, pc}

000b90b0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b90b0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b90b2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b90b6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b90b8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b90bc:	42ae      	cmp	r6, r5
   b90be:	d004      	beq.n	b90ca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b90c0:	1d28      	adds	r0, r5, #4
   b90c2:	f7ff ffe6 	bl	b9092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b90c6:	3508      	adds	r5, #8
   b90c8:	e7f8      	b.n	b90bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b90ca:	6820      	ldr	r0, [r4, #0]
   b90cc:	f7ff fb44 	bl	b8758 <free>
}
   b90d0:	4620      	mov	r0, r4
   b90d2:	bd70      	pop	{r4, r5, r6, pc}

000b90d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b90d4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b90d6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b90da:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b90dc:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b90e0:	42ae      	cmp	r6, r5
   b90e2:	d004      	beq.n	b90ee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b90e4:	1d28      	adds	r0, r5, #4
   b90e6:	f7ff ffd4 	bl	b9092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b90ea:	3508      	adds	r5, #8
   b90ec:	e7f8      	b.n	b90e0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b90ee:	6820      	ldr	r0, [r4, #0]
   b90f0:	f7ff fb32 	bl	b8758 <free>
}
   b90f4:	4620      	mov	r0, r4
   b90f6:	bd70      	pop	{r4, r5, r6, pc}

000b90f8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b90f8:	b510      	push	{r4, lr}
   b90fa:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b90fc:	3024      	adds	r0, #36	; 0x24
   b90fe:	f7ff ffe9 	bl	b90d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b9102:	f104 0018 	add.w	r0, r4, #24
   b9106:	f7ff ffd3 	bl	b90b0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b910a:	bd10      	pop	{r4, pc}

000b910c <__tcf_0>:
    static BleLocalDevice instance;
   b910c:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b910e:	4b17      	ldr	r3, [pc, #92]	; (b916c <__tcf_0+0x60>)
   b9110:	681c      	ldr	r4, [r3, #0]
   b9112:	b354      	cbz	r4, b916a <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b9114:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b9118:	f7ff fc08 	bl	b892c <_ZNSt14_Function_baseD1Ev>
   b911c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b9120:	f7ff fc04 	bl	b892c <_ZNSt14_Function_baseD1Ev>
   b9124:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b9128:	f7ff fc00 	bl	b892c <_ZNSt14_Function_baseD1Ev>
   b912c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b9130:	f7ff fbfc 	bl	b892c <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b9134:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b9138:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b913c:	42ae      	cmp	r6, r5
   b913e:	d004      	beq.n	b914a <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b9140:	1d28      	adds	r0, r5, #4
   b9142:	f7ff ffa6 	bl	b9092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9146:	3508      	adds	r5, #8
   b9148:	e7f8      	b.n	b913c <__tcf_0+0x30>
    ::free(ptr);
   b914a:	69a0      	ldr	r0, [r4, #24]
   b914c:	f7ff fb04 	bl	b8758 <free>
    ~BleLocalDeviceImpl() = default;
   b9150:	f104 000c 	add.w	r0, r4, #12
   b9154:	f7ff ffbe 	bl	b90d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b9158:	4620      	mov	r0, r4
   b915a:	f7ff ffa9 	bl	b90b0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b915e:	4620      	mov	r0, r4
   b9160:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b9162:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9166:	f7fa bf9c 	b.w	b40a2 <_ZdlPvj>
   b916a:	bd70      	pop	{r4, r5, r6, pc}
   b916c:	2003e6c4 	.word	0x2003e6c4

000b9170 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b9170:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b9172:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b9174:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b9178:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b917c:	6803      	ldr	r3, [r0, #0]
   b917e:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b9180:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b9182:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b9184:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b9186:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b9188:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b918a:	f7ff ff82 	bl	b9092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b918e:	b002      	add	sp, #8
   b9190:	bd10      	pop	{r4, pc}

000b9192 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b9192:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b9194:	b510      	push	{r4, lr}
      if (_M_empty())
   b9196:	b90a      	cbnz	r2, b919c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b9198:	f001 fe5d 	bl	bae56 <_ZSt25__throw_bad_function_callv>
    }
   b919c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b91a0:	68c3      	ldr	r3, [r0, #12]
   b91a2:	4718      	bx	r3

000b91a4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b91a4:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b91a6:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b91a8:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b91aa:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b91ac:	dd03      	ble.n	b91b6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b91ae:	f7ff fadb 	bl	b8768 <realloc>
            if (!d) {
   b91b2:	b918      	cbnz	r0, b91bc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b91b4:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b91b6:	f7ff facf 	bl	b8758 <free>
        T* d = nullptr;
   b91ba:	2000      	movs	r0, #0
        data_ = d;
   b91bc:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b91be:	60a5      	str	r5, [r4, #8]
        return true;
   b91c0:	2001      	movs	r0, #1
   b91c2:	e7f7      	b.n	b91b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b91c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b91c4:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b91c6:	6883      	ldr	r3, [r0, #8]
   b91c8:	428b      	cmp	r3, r1
   b91ca:	da02      	bge.n	b91d2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b91cc:	f7ff ffea 	bl	b91a4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b91d0:	bd08      	pop	{r3, pc}
    return true;
   b91d2:	2001      	movs	r0, #1
   b91d4:	e7fc      	b.n	b91d0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b91d6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b91d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b91da:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b91dc:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b91de:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b91e0:	4419      	add	r1, r3
   b91e2:	6883      	ldr	r3, [r0, #8]
   b91e4:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b91e6:	4604      	mov	r4, r0
   b91e8:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b91ea:	dc12      	bgt.n	b9212 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b91ec:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b91ee:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b91f0:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b91f2:	1bd2      	subs	r2, r2, r7
   b91f4:	4631      	mov	r1, r6
   b91f6:	1970      	adds	r0, r6, r5
   b91f8:	f002 fe1a 	bl	bbe30 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b91fc:	462a      	mov	r2, r5
   b91fe:	4641      	mov	r1, r8
   b9200:	4630      	mov	r0, r6
   b9202:	f002 fe07 	bl	bbe14 <memcpy>
    size_ += n;
   b9206:	6863      	ldr	r3, [r4, #4]
   b9208:	442b      	add	r3, r5
   b920a:	6063      	str	r3, [r4, #4]
    return true;
   b920c:	2001      	movs	r0, #1
}
   b920e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b9212:	f7ff ffc7 	bl	b91a4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b9216:	2800      	cmp	r0, #0
   b9218:	d1e8      	bne.n	b91ec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b921a:	e7f8      	b.n	b920e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b921c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b921c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b921e:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9220:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b9224:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b9226:	4604      	mov	r4, r0
   b9228:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b922a:	da0b      	bge.n	b9244 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b922c:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b922e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9230:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9232:	1b52      	subs	r2, r2, r5
   b9234:	1c48      	adds	r0, r1, #1
   b9236:	f002 fdfb 	bl	bbe30 <memmove>
    new(p) T(std::move(value));
   b923a:	557e      	strb	r6, [r7, r5]
    ++size_;
   b923c:	6863      	ldr	r3, [r4, #4]
   b923e:	3301      	adds	r3, #1
   b9240:	6063      	str	r3, [r4, #4]
}
   b9242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9244:	3101      	adds	r1, #1
   b9246:	f7ff ffad 	bl	b91a4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b924a:	2800      	cmp	r0, #0
   b924c:	d1ee      	bne.n	b922c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b924e:	e7f8      	b.n	b9242 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b9250 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9250:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b9252:	6841      	ldr	r1, [r0, #4]
   b9254:	f7ff bfe2 	b.w	b921c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b9258 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b9258:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b925c:	4604      	mov	r4, r0
   b925e:	461d      	mov	r5, r3
   b9260:	460f      	mov	r7, r1
   b9262:	ab01      	add	r3, sp, #4
   b9264:	4690      	mov	r8, r2
   b9266:	460a      	mov	r2, r1
   b9268:	e9d0 0100 	ldrd	r0, r1, [r0]
   b926c:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b9270:	f7ff fb10 	bl	b8894 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b9274:	1cae      	adds	r6, r5, #2
   b9276:	6863      	ldr	r3, [r4, #4]
   b9278:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b927a:	f1b9 0f00 	cmp.w	r9, #0
   b927e:	d126      	bne.n	b92ce <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b9280:	b328      	cbz	r0, b92ce <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b9282:	4433      	add	r3, r6
   b9284:	1a1b      	subs	r3, r3, r0
   b9286:	2bff      	cmp	r3, #255	; 0xff
   b9288:	d809      	bhi.n	b929e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b928a:	9901      	ldr	r1, [sp, #4]
   b928c:	4620      	mov	r0, r4
   b928e:	f7ff fe71 	bl	b8f74 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b9292:	6861      	ldr	r1, [r4, #4]
   b9294:	4620      	mov	r0, r4
   b9296:	4431      	add	r1, r6
   b9298:	f7ff ff94 	bl	b91c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b929c:	b918      	cbnz	r0, b92a6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b929e:	6860      	ldr	r0, [r4, #4]
}
   b92a0:	b003      	add	sp, #12
   b92a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b92a6:	1c6a      	adds	r2, r5, #1
   b92a8:	9901      	ldr	r1, [sp, #4]
   b92aa:	b2d2      	uxtb	r2, r2
   b92ac:	4620      	mov	r0, r4
   b92ae:	f7ff ffb5 	bl	b921c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b92b2:	9901      	ldr	r1, [sp, #4]
   b92b4:	463a      	mov	r2, r7
   b92b6:	3101      	adds	r1, #1
   b92b8:	4620      	mov	r0, r4
   b92ba:	f7ff ffaf 	bl	b921c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b92be:	9901      	ldr	r1, [sp, #4]
   b92c0:	462b      	mov	r3, r5
   b92c2:	4642      	mov	r2, r8
   b92c4:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b92c6:	4620      	mov	r0, r4
   b92c8:	f7ff ff85 	bl	b91d6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b92cc:	e7e7      	b.n	b929e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b92ce:	18f1      	adds	r1, r6, r3
   b92d0:	29ff      	cmp	r1, #255	; 0xff
   b92d2:	d8e4      	bhi.n	b929e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b92d4:	4620      	mov	r0, r4
   b92d6:	f7ff ff75 	bl	b91c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b92da:	2800      	cmp	r0, #0
   b92dc:	d0df      	beq.n	b929e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b92de:	1c69      	adds	r1, r5, #1
   b92e0:	b2c9      	uxtb	r1, r1
   b92e2:	4620      	mov	r0, r4
   b92e4:	f7ff ffb4 	bl	b9250 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b92e8:	4639      	mov	r1, r7
   b92ea:	4620      	mov	r0, r4
   b92ec:	f7ff ffb0 	bl	b9250 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b92f0:	6861      	ldr	r1, [r4, #4]
   b92f2:	462b      	mov	r3, r5
   b92f4:	4642      	mov	r2, r8
   b92f6:	e7e6      	b.n	b92c6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b92f8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b92f8:	b430      	push	{r4, r5}
   b92fa:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b92fe:	b11a      	cbz	r2, b9308 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b9300:	9502      	str	r5, [sp, #8]
}
   b9302:	bc30      	pop	{r4, r5}
   b9304:	f7ff bfa8 	b.w	b9258 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b9308:	6840      	ldr	r0, [r0, #4]
}
   b930a:	bc30      	pop	{r4, r5}
   b930c:	4770      	bx	lr

000b930e <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b930e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b9310:	2300      	movs	r3, #0
   b9312:	e9c0 3300 	strd	r3, r3, [r0]
   b9316:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b9318:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b931a:	9300      	str	r3, [sp, #0]
   b931c:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b931e:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b9322:	4619      	mov	r1, r3
   b9324:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b9328:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b932a:	f7ff ffe5 	bl	b92f8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b932e:	4620      	mov	r0, r4
   b9330:	b004      	add	sp, #16
   b9332:	bd10      	pop	{r4, pc}

000b9334 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b9334:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9338:	4604      	mov	r4, r0
   b933a:	460d      	mov	r5, r1
   b933c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b933e:	d914      	bls.n	b936a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b9340:	4290      	cmp	r0, r2
   b9342:	d213      	bcs.n	b936c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b9344:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b9348:	1a75      	subs	r5, r6, r1
   b934a:	f1a1 0708 	sub.w	r7, r1, #8
   b934e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9350:	42b7      	cmp	r7, r6
   b9352:	d018      	beq.n	b9386 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b9354:	b11c      	cbz	r4, b935e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b9356:	4631      	mov	r1, r6
   b9358:	4620      	mov	r0, r4
   b935a:	f7ff fe90 	bl	b907e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b935e:	1d30      	adds	r0, r6, #4
   b9360:	f7ff fe97 	bl	b9092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b9364:	3e08      	subs	r6, #8
   b9366:	3c08      	subs	r4, #8
   b9368:	e7f2      	b.n	b9350 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b936a:	d00c      	beq.n	b9386 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b936c:	42b5      	cmp	r5, r6
   b936e:	d00a      	beq.n	b9386 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b9370:	b11c      	cbz	r4, b937a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b9372:	4629      	mov	r1, r5
   b9374:	4620      	mov	r0, r4
   b9376:	f7ff fe82 	bl	b907e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b937a:	1d28      	adds	r0, r5, #4
   b937c:	f7ff fe89 	bl	b9092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b9380:	3508      	adds	r5, #8
   b9382:	3408      	adds	r4, #8
   b9384:	e7f2      	b.n	b936c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b9386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9388 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b938a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b938c:	6846      	ldr	r6, [r0, #4]
   b938e:	4668      	mov	r0, sp
   b9390:	f7ff fe75 	bl	b907e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9394:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b9398:	429f      	cmp	r7, r3
   b939a:	db12      	blt.n	b93c2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b939c:	3701      	adds	r7, #1
        if (n > 0) {
   b939e:	2f00      	cmp	r7, #0
   b93a0:	dd29      	ble.n	b93f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b93a2:	00f8      	lsls	r0, r7, #3
   b93a4:	f7ff f9d0 	bl	b8748 <malloc>
            if (!d) {
   b93a8:	4605      	mov	r5, r0
   b93aa:	b1f0      	cbz	r0, b93ea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b93ac:	e9d4 1200 	ldrd	r1, r2, [r4]
   b93b0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b93b4:	f7ff ffbe 	bl	b9334 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b93b8:	6820      	ldr	r0, [r4, #0]
   b93ba:	f7ff f9cd 	bl	b8758 <free>
        data_ = d;
   b93be:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b93c0:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b93c2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b93c4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b93c6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b93ca:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b93ce:	4631      	mov	r1, r6
   b93d0:	f106 0008 	add.w	r0, r6, #8
   b93d4:	f7ff ffae 	bl	b9334 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b93d8:	b11e      	cbz	r6, b93e2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b93da:	4669      	mov	r1, sp
   b93dc:	4630      	mov	r0, r6
   b93de:	f7ff fe4e 	bl	b907e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b93e2:	6863      	ldr	r3, [r4, #4]
   b93e4:	3301      	adds	r3, #1
   b93e6:	6063      	str	r3, [r4, #4]
    return true;
   b93e8:	2501      	movs	r5, #1
   b93ea:	a801      	add	r0, sp, #4
   b93ec:	f7ff fe51 	bl	b9092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b93f0:	4628      	mov	r0, r5
   b93f2:	b003      	add	sp, #12
   b93f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b93f6:	2500      	movs	r5, #0
   b93f8:	e7de      	b.n	b93b8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b93fa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b93fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b93fc:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b9400:	4605      	mov	r5, r0
   b9402:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b9404:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b9408:	42a6      	cmp	r6, r4
   b940a:	d005      	beq.n	b9418 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b940c:	4639      	mov	r1, r7
   b940e:	4620      	mov	r0, r4
   b9410:	f7ff fcff 	bl	b8e12 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b9414:	b108      	cbz	r0, b941a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b9416:	b914      	cbnz	r4, b941e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b9418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b941a:	3408      	adds	r4, #8
   b941c:	e7f4      	b.n	b9408 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b941e:	1d20      	adds	r0, r4, #4
   b9420:	f7ff fe37 	bl	b9092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b9424:	e9d5 3200 	ldrd	r3, r2, [r5]
   b9428:	f104 0108 	add.w	r1, r4, #8
   b942c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b9430:	4620      	mov	r0, r4
   b9432:	f7ff ff7f 	bl	b9334 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b9436:	686b      	ldr	r3, [r5, #4]
   b9438:	3b01      	subs	r3, #1
   b943a:	606b      	str	r3, [r5, #4]
    return true;
   b943c:	e7ec      	b.n	b9418 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b9440 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b9440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9444:	4605      	mov	r5, r0
   b9446:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b9448:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b944a:	460c      	mov	r4, r1
        WiringBleLock lk;
   b944c:	f7ff faac 	bl	b89a8 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b9450:	682e      	ldr	r6, [r5, #0]
   b9452:	1ef3      	subs	r3, r6, #3
   b9454:	2b0d      	cmp	r3, #13
   b9456:	d83c      	bhi.n	b94d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b9458:	e8df f013 	tbh	[pc, r3, lsl #1]
   b945c:	0053000e 	.word	0x0053000e
   b9460:	00d1003b 	.word	0x00d1003b
   b9464:	003b003b 	.word	0x003b003b
   b9468:	003b003b 	.word	0x003b003b
   b946c:	009b003b 	.word	0x009b003b
   b9470:	009b009b 	.word	0x009b009b
   b9474:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b9478:	a804      	add	r0, sp, #16
   b947a:	f7ff fc95 	bl	b8da8 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b947e:	9b04      	ldr	r3, [sp, #16]
   b9480:	89aa      	ldrh	r2, [r5, #12]
   b9482:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b9484:	6869      	ldr	r1, [r5, #4]
   b9486:	9804      	ldr	r0, [sp, #16]
   b9488:	3108      	adds	r1, #8
   b948a:	3002      	adds	r0, #2
   b948c:	f7ff faa6 	bl	b89dc <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b9490:	a904      	add	r1, sp, #16
   b9492:	a806      	add	r0, sp, #24
   b9494:	f7ff fdf3 	bl	b907e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b9498:	a906      	add	r1, sp, #24
   b949a:	f104 0018 	add.w	r0, r4, #24
   b949e:	f7ff ff73 	bl	b9388 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b94a2:	4605      	mov	r5, r0
   b94a4:	a807      	add	r0, sp, #28
   b94a6:	f7ff fdf4 	bl	b9092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b94aa:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b94ac:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b94ae:	b9b5      	cbnz	r5, b94de <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b94b0:	4b5d      	ldr	r3, [pc, #372]	; (b9628 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b94b2:	495e      	ldr	r1, [pc, #376]	; (b962c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b94b4:	9300      	str	r3, [sp, #0]
   b94b6:	2032      	movs	r0, #50	; 0x32
   b94b8:	462b      	mov	r3, r5
   b94ba:	aa06      	add	r2, sp, #24
   b94bc:	9507      	str	r5, [sp, #28]
   b94be:	f7ff f897 	bl	b85f0 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b94c2:	9b04      	ldr	r3, [sp, #16]
   b94c4:	4629      	mov	r1, r5
   b94c6:	8818      	ldrh	r0, [r3, #0]
   b94c8:	f7fe fee0 	bl	b828c <hal_ble_gap_disconnect>
   b94cc:	a805      	add	r0, sp, #20
   b94ce:	f7ff fde0 	bl	b9092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b94d2:	a803      	add	r0, sp, #12
   b94d4:	f7ff fa76 	bl	b89c4 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b94d8:	b00e      	add	sp, #56	; 0x38
   b94da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b94de:	4a54      	ldr	r2, [pc, #336]	; (b9630 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b94e0:	9200      	str	r2, [sp, #0]
   b94e2:	2300      	movs	r3, #0
   b94e4:	4951      	ldr	r1, [pc, #324]	; (b962c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b94e6:	9307      	str	r3, [sp, #28]
   b94e8:	aa06      	add	r2, sp, #24
   b94ea:	2001      	movs	r0, #1
   b94ec:	f7ff f880 	bl	b85f0 <log_message>
                if (impl->connectedCallback_) {
   b94f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b94f2:	2b00      	cmp	r3, #0
   b94f4:	d0ea      	beq.n	b94cc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b94f6:	a904      	add	r1, sp, #16
   b94f8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b94fc:	f7ff fe49 	bl	b9192 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b9500:	e7e4      	b.n	b94cc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b9502:	89a9      	ldrh	r1, [r5, #12]
   b9504:	4620      	mov	r0, r4
   b9506:	f7ff fba7 	bl	b8c58 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b950a:	4606      	mov	r6, r0
   b950c:	2800      	cmp	r0, #0
   b950e:	d0e0      	beq.n	b94d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b9510:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b9512:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b9516:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b951a:	8029      	strh	r1, [r5, #0]
   b951c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b9520:	429a      	cmp	r2, r3
   b9522:	d003      	beq.n	b952c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b9524:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b9528:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b952a:	e7f9      	b.n	b9520 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b952c:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b9530:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b9534:	45b8      	cmp	r8, r7
   b9536:	d004      	beq.n	b9542 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b9538:	1d38      	adds	r0, r7, #4
   b953a:	f7ff fdaa 	bl	b9092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b953e:	3708      	adds	r7, #8
   b9540:	e7f8      	b.n	b9534 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b9542:	2300      	movs	r3, #0
   b9544:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b9546:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b954a:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b954e:	45b8      	cmp	r8, r7
   b9550:	d004      	beq.n	b955c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b9552:	1d38      	adds	r0, r7, #4
   b9554:	f7ff fd9d 	bl	b9092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9558:	3708      	adds	r7, #8
   b955a:	e7f8      	b.n	b954e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b955c:	2300      	movs	r3, #0
   b955e:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b9560:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b9562:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b9564:	b123      	cbz	r3, b9570 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b9566:	4631      	mov	r1, r6
   b9568:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b956c:	f7ff fe11 	bl	b9192 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b9570:	2300      	movs	r3, #0
   b9572:	2220      	movs	r2, #32
   b9574:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b9578:	4a2e      	ldr	r2, [pc, #184]	; (b9634 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b957a:	9200      	str	r2, [sp, #0]
   b957c:	492b      	ldr	r1, [pc, #172]	; (b962c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b957e:	aa06      	add	r2, sp, #24
   b9580:	2001      	movs	r0, #1
   b9582:	f7ff f835 	bl	b85f0 <log_message>
                    impl->peers_.removeOne(*peer);
   b9586:	4631      	mov	r1, r6
   b9588:	f104 0018 	add.w	r0, r4, #24
   b958c:	f7ff ff35 	bl	b93fa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b9590:	e79f      	b.n	b94d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b9592:	89a9      	ldrh	r1, [r5, #12]
   b9594:	4620      	mov	r0, r4
   b9596:	f7ff fb5f 	bl	b8c58 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b959a:	2800      	cmp	r0, #0
   b959c:	d099      	beq.n	b94d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b959e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b95a0:	2b00      	cmp	r3, #0
   b95a2:	d096      	beq.n	b94d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b95a4:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b95a6:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b95a8:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b95ac:	d001      	beq.n	b95b2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b95ae:	2e10      	cmp	r6, #16
   b95b0:	d117      	bne.n	b95e2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b95b2:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b95b4:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b95b6:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b95b8:	2506      	movs	r5, #6
                        };
   b95ba:	f88d 3015 	strb.w	r3, [sp, #21]
   b95be:	9104      	str	r1, [sp, #16]
   b95c0:	f88d 2014 	strb.w	r2, [sp, #20]
   b95c4:	9006      	str	r0, [sp, #24]
   b95c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b95ca:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b95cc:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b95d0:	9508      	str	r5, [sp, #32]
   b95d2:	e883 0003 	stmia.w	r3, {r0, r1}
   b95d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b95d8:	a906      	add	r1, sp, #24
   b95da:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b95de:	4798      	blx	r3
   b95e0:	e777      	b.n	b94d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b95e2:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b95e4:	bf01      	itttt	eq
   b95e6:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b95e8:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b95ea:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b95ee:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b95f0:	bf0f      	iteee	eq
   b95f2:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b95f6:	461a      	movne	r2, r3
   b95f8:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b95fa:	461d      	movne	r5, r3
   b95fc:	e7dd      	b.n	b95ba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b95fe:	89a9      	ldrh	r1, [r5, #12]
   b9600:	4620      	mov	r0, r4
   b9602:	f7ff fb29 	bl	b8c58 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b9606:	4601      	mov	r1, r0
   b9608:	2800      	cmp	r0, #0
   b960a:	f43f af62 	beq.w	b94d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b960e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b9610:	2b00      	cmp	r3, #0
   b9612:	f43f af5e 	beq.w	b94d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b9616:	686b      	ldr	r3, [r5, #4]
   b9618:	9306      	str	r3, [sp, #24]
   b961a:	aa06      	add	r2, sp, #24
   b961c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b961e:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b9622:	4798      	blx	r3
   b9624:	e755      	b.n	b94d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b9626:	bf00      	nop
   b9628:	000be498 	.word	0x000be498
   b962c:	000be417 	.word	0x000be417
   b9630:	000be4be 	.word	0x000be4be
   b9634:	000be4db 	.word	0x000be4db

000b9638 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b9638:	b513      	push	{r0, r1, r4, lr}
   b963a:	460b      	mov	r3, r1
   b963c:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b963e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b9642:	466c      	mov	r4, sp
   b9644:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b9648:	e893 0003 	ldmia.w	r3, {r0, r1}
   b964c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b9650:	e894 0003 	ldmia.w	r4, {r0, r1}
   b9654:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b9658:	b002      	add	sp, #8
   b965a:	bd10      	pop	{r4, pc}

000b965c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b965c:	b538      	push	{r3, r4, r5, lr}
   b965e:	4605      	mov	r5, r0
   b9660:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b9662:	f7ff ffe9 	bl	b9638 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9666:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b9668:	68a2      	ldr	r2, [r4, #8]
   b966a:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b966c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b966e:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b9670:	68e2      	ldr	r2, [r4, #12]
   b9672:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b9674:	60e3      	str	r3, [r4, #12]
      }
   b9676:	bd38      	pop	{r3, r4, r5, pc}

000b9678 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b9678:	b570      	push	{r4, r5, r6, lr}
   b967a:	4604      	mov	r4, r0
   b967c:	b08c      	sub	sp, #48	; 0x30
   b967e:	460e      	mov	r6, r1
   b9680:	9201      	str	r2, [sp, #4]
   b9682:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b9684:	f7ff fac8 	bl	b8c18 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b9688:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b968a:	9901      	ldr	r1, [sp, #4]
   b968c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b9690:	f000 fd8b 	bl	ba1aa <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b9694:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b9698:	b1cd      	cbz	r5, b96ce <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b969a:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b969c:	9502      	str	r5, [sp, #8]
   b969e:	a902      	add	r1, sp, #8
   b96a0:	a804      	add	r0, sp, #16
   b96a2:	9303      	str	r3, [sp, #12]
   b96a4:	f7ff fcb4 	bl	b9010 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b96a8:	2300      	movs	r3, #0
	__x.swap(*this);
   b96aa:	a908      	add	r1, sp, #32
   b96ac:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b96ae:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b96b0:	f7ff ffd4 	bl	b965c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b96b4:	4631      	mov	r1, r6
   b96b6:	a808      	add	r0, sp, #32
   b96b8:	f7ff ffd0 	bl	b965c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b96bc:	a808      	add	r0, sp, #32
   b96be:	f7ff f935 	bl	b892c <_ZNSt14_Function_baseD1Ev>
   b96c2:	a804      	add	r0, sp, #16
   b96c4:	f7ff f932 	bl	b892c <_ZNSt14_Function_baseD1Ev>
    }
   b96c8:	4620      	mov	r0, r4
   b96ca:	b00c      	add	sp, #48	; 0x30
   b96cc:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b96ce:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b96d0:	e7ea      	b.n	b96a8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b96d4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b96d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b96d8:	b087      	sub	sp, #28
   b96da:	461d      	mov	r5, r3
   b96dc:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b96e0:	4680      	mov	r8, r0
   b96e2:	468b      	mov	fp, r1
   b96e4:	4692      	mov	sl, r2
   b96e6:	9912      	ldr	r1, [sp, #72]	; 0x48
   b96e8:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b96ea:	2200      	movs	r2, #0
   b96ec:	2068      	movs	r0, #104	; 0x68
   b96ee:	9102      	str	r1, [sp, #8]
   b96f0:	9204      	str	r2, [sp, #16]
   b96f2:	f7fa fcd0 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b96f6:	1e06      	subs	r6, r0, #0
   b96f8:	f106 090c 	add.w	r9, r6, #12
   b96fc:	d018      	beq.n	b9730 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b96fe:	2201      	movs	r2, #1
	: _M_impl(__a)
   b9700:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b9702:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b9706:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b9708:	4a15      	ldr	r2, [pc, #84]	; (b9760 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b970a:	f847 2b20 	str.w	r2, [r7], #32
   b970e:	9b03      	ldr	r3, [sp, #12]
   b9710:	9100      	str	r1, [sp, #0]
   b9712:	465a      	mov	r2, fp
   b9714:	4651      	mov	r1, sl
   b9716:	4648      	mov	r0, r9
   b9718:	f7ff ffae 	bl	b9678 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b971c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b971e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b9720:	682b      	ldr	r3, [r5, #0]
   b9722:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b9724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9726:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b972a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b972c:	6823      	ldr	r3, [r4, #0]
   b972e:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b9730:	a904      	add	r1, sp, #16
   b9732:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b9734:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b9738:	f7ff fd1a 	bl	b9170 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b973c:	a805      	add	r0, sp, #20
   b973e:	f7ff fca8 	bl	b9092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b9742:	f8d8 3000 	ldr.w	r3, [r8]
   b9746:	b93b      	cbnz	r3, b9758 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b9748:	4a06      	ldr	r2, [pc, #24]	; (b9764 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b974a:	4907      	ldr	r1, [pc, #28]	; (b9768 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b974c:	200a      	movs	r0, #10
}
   b974e:	b007      	add	sp, #28
   b9750:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b9754:	f7fe bf44 	b.w	b85e0 <panic_>
}
   b9758:	b007      	add	sp, #28
   b975a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b975e:	bf00      	nop
   b9760:	000be554 	.word	0x000be554
   b9764:	000b8381 	.word	0x000b8381
   b9768:	000be400 	.word	0x000be400

000b976c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b976c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b976e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9770:	4604      	mov	r4, r0
   b9772:	460d      	mov	r5, r1
   b9774:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9776:	d914      	bls.n	b97a2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b9778:	4290      	cmp	r0, r2
   b977a:	d213      	bcs.n	b97a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b977c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b9780:	1a75      	subs	r5, r6, r1
   b9782:	f1a1 0708 	sub.w	r7, r1, #8
   b9786:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9788:	42b7      	cmp	r7, r6
   b978a:	d018      	beq.n	b97be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b978c:	b11c      	cbz	r4, b9796 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b978e:	4631      	mov	r1, r6
   b9790:	4620      	mov	r0, r4
   b9792:	f7ff fc6a 	bl	b906a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b9796:	1d30      	adds	r0, r6, #4
   b9798:	f7ff fc7b 	bl	b9092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b979c:	3e08      	subs	r6, #8
   b979e:	3c08      	subs	r4, #8
   b97a0:	e7f2      	b.n	b9788 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b97a2:	d00c      	beq.n	b97be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b97a4:	42b5      	cmp	r5, r6
   b97a6:	d00a      	beq.n	b97be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b97a8:	b11c      	cbz	r4, b97b2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b97aa:	4629      	mov	r1, r5
   b97ac:	4620      	mov	r0, r4
   b97ae:	f7ff fc5c 	bl	b906a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b97b2:	1d28      	adds	r0, r5, #4
   b97b4:	f7ff fc6d 	bl	b9092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b97b8:	3508      	adds	r5, #8
   b97ba:	3408      	adds	r4, #8
   b97bc:	e7f2      	b.n	b97a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b97be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b97c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b97c0:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b97c2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b97c4:	4605      	mov	r5, r0
        if (n > 0) {
   b97c6:	dd11      	ble.n	b97ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b97c8:	00f0      	lsls	r0, r6, #3
   b97ca:	f7fe ffbd 	bl	b8748 <malloc>
            if (!d) {
   b97ce:	4604      	mov	r4, r0
   b97d0:	b158      	cbz	r0, b97ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b97d2:	e9d5 1200 	ldrd	r1, r2, [r5]
   b97d6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b97da:	f7ff ffc7 	bl	b976c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b97de:	6828      	ldr	r0, [r5, #0]
   b97e0:	f7fe ffba 	bl	b8758 <free>
        data_ = d;
   b97e4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b97e6:	60ae      	str	r6, [r5, #8]
        return true;
   b97e8:	2001      	movs	r0, #1
    }
   b97ea:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b97ec:	2400      	movs	r4, #0
   b97ee:	e7f6      	b.n	b97de <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b97f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b97f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b97f2:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b97f4:	6845      	ldr	r5, [r0, #4]
   b97f6:	4668      	mov	r0, sp
   b97f8:	f7ff fc37 	bl	b906a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b97fc:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b9800:	4299      	cmp	r1, r3
   b9802:	da10      	bge.n	b9826 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b9804:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9806:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9808:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b980c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b9810:	4629      	mov	r1, r5
   b9812:	f105 0008 	add.w	r0, r5, #8
   b9816:	f7ff ffa9 	bl	b976c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b981a:	b98d      	cbnz	r5, b9840 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b981c:	6863      	ldr	r3, [r4, #4]
   b981e:	3301      	adds	r3, #1
   b9820:	6063      	str	r3, [r4, #4]
    return true;
   b9822:	2601      	movs	r6, #1
   b9824:	e006      	b.n	b9834 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9826:	3101      	adds	r1, #1
   b9828:	4620      	mov	r0, r4
   b982a:	f7ff ffc9 	bl	b97c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b982e:	4606      	mov	r6, r0
   b9830:	2800      	cmp	r0, #0
   b9832:	d1e7      	bne.n	b9804 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b9834:	a801      	add	r0, sp, #4
   b9836:	f7ff fc2c 	bl	b9092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b983a:	4630      	mov	r0, r6
   b983c:	b002      	add	sp, #8
   b983e:	bd70      	pop	{r4, r5, r6, pc}
   b9840:	4669      	mov	r1, sp
   b9842:	4628      	mov	r0, r5
   b9844:	f7ff fc11 	bl	b906a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b9848:	e7e8      	b.n	b981c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b984a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b984a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b984c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b984e:	4604      	mov	r4, r0
   b9850:	460d      	mov	r5, r1
   b9852:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9854:	d914      	bls.n	b9880 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b9856:	4290      	cmp	r0, r2
   b9858:	d213      	bcs.n	b9882 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b985a:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b985e:	1a75      	subs	r5, r6, r1
   b9860:	f1a1 0708 	sub.w	r7, r1, #8
   b9864:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9866:	42b7      	cmp	r7, r6
   b9868:	d018      	beq.n	b989c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b986a:	b11c      	cbz	r4, b9874 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b986c:	4631      	mov	r1, r6
   b986e:	4620      	mov	r0, r4
   b9870:	f7ff fbed 	bl	b904e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9874:	1d30      	adds	r0, r6, #4
   b9876:	f7ff fc0c 	bl	b9092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b987a:	3e08      	subs	r6, #8
   b987c:	3c08      	subs	r4, #8
   b987e:	e7f2      	b.n	b9866 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b9880:	d00c      	beq.n	b989c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b9882:	42b5      	cmp	r5, r6
   b9884:	d00a      	beq.n	b989c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b9886:	b11c      	cbz	r4, b9890 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b9888:	4629      	mov	r1, r5
   b988a:	4620      	mov	r0, r4
   b988c:	f7ff fbdf 	bl	b904e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9890:	1d28      	adds	r0, r5, #4
   b9892:	f7ff fbfe 	bl	b9092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b9896:	3508      	adds	r5, #8
   b9898:	3408      	adds	r4, #8
   b989a:	e7f2      	b.n	b9882 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b989c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b989e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b989e:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b98a0:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b98a2:	4605      	mov	r5, r0
        if (n > 0) {
   b98a4:	dd11      	ble.n	b98ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b98a6:	00f0      	lsls	r0, r6, #3
   b98a8:	f7fe ff4e 	bl	b8748 <malloc>
            if (!d) {
   b98ac:	4604      	mov	r4, r0
   b98ae:	b158      	cbz	r0, b98c8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b98b0:	e9d5 1200 	ldrd	r1, r2, [r5]
   b98b4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b98b8:	f7ff ffc7 	bl	b984a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b98bc:	6828      	ldr	r0, [r5, #0]
   b98be:	f7fe ff4b 	bl	b8758 <free>
        data_ = d;
   b98c2:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b98c4:	60ae      	str	r6, [r5, #8]
        return true;
   b98c6:	2001      	movs	r0, #1
    }
   b98c8:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b98ca:	2400      	movs	r4, #0
   b98cc:	e7f6      	b.n	b98bc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b98ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b98ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b98d0:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b98d2:	6845      	ldr	r5, [r0, #4]
   b98d4:	4668      	mov	r0, sp
   b98d6:	f7ff fbba 	bl	b904e <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b98da:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b98de:	4299      	cmp	r1, r3
   b98e0:	da10      	bge.n	b9904 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b98e2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b98e4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b98e6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b98ea:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b98ee:	4629      	mov	r1, r5
   b98f0:	f105 0008 	add.w	r0, r5, #8
   b98f4:	f7ff ffa9 	bl	b984a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b98f8:	b98d      	cbnz	r5, b991e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b98fa:	6863      	ldr	r3, [r4, #4]
   b98fc:	3301      	adds	r3, #1
   b98fe:	6063      	str	r3, [r4, #4]
    return true;
   b9900:	2601      	movs	r6, #1
   b9902:	e006      	b.n	b9912 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9904:	3101      	adds	r1, #1
   b9906:	4620      	mov	r0, r4
   b9908:	f7ff ffc9 	bl	b989e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b990c:	4606      	mov	r6, r0
   b990e:	2800      	cmp	r0, #0
   b9910:	d1e7      	bne.n	b98e2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b9912:	a801      	add	r0, sp, #4
   b9914:	f7ff fbbd 	bl	b9092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9918:	4630      	mov	r0, r6
   b991a:	b002      	add	sp, #8
   b991c:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b991e:	4669      	mov	r1, sp
   b9920:	4628      	mov	r0, r5
   b9922:	f7ff fb94 	bl	b904e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9926:	e7e8      	b.n	b98fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b9928 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b9928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b992c:	4617      	mov	r7, r2
   b992e:	b0a1      	sub	sp, #132	; 0x84
   b9930:	4680      	mov	r8, r0
    WiringBleLock lk;
   b9932:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b9934:	460e      	mov	r6, r1
    WiringBleLock lk;
   b9936:	f7ff f837 	bl	b89a8 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b993a:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b993c:	7923      	ldrb	r3, [r4, #4]
   b993e:	b953      	cbnz	r3, b9956 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b9940:	4639      	mov	r1, r7
   b9942:	4640      	mov	r0, r8
   b9944:	f7ff fb83 	bl	b904e <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b9948:	a80a      	add	r0, sp, #40	; 0x28
   b994a:	f7ff f83b 	bl	b89c4 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b994e:	4640      	mov	r0, r8
   b9950:	b021      	add	sp, #132	; 0x84
   b9952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b9956:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b9958:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b995c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b9960:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b9962:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b9966:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b996a:	9b03      	ldr	r3, [sp, #12]
   b996c:	429d      	cmp	r5, r3
   b996e:	d021      	beq.n	b99b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b9970:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b9974:	4658      	mov	r0, fp
   b9976:	f109 0114 	add.w	r1, r9, #20
   b997a:	f7ff f8c2 	bl	b8b02 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b997e:	b1b8      	cbz	r0, b99b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b9980:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b9984:	4650      	mov	r0, sl
   b9986:	f7ff f8bc 	bl	b8b02 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b998a:	b188      	cbz	r0, b99b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b998c:	6823      	ldr	r3, [r4, #0]
   b998e:	f8d9 2000 	ldr.w	r2, [r9]
   b9992:	4053      	eors	r3, r2
   b9994:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b9998:	d10a      	bne.n	b99b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b999a:	2220      	movs	r2, #32
   b999c:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b99a0:	4a5e      	ldr	r2, [pc, #376]	; (b9b1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b99a2:	9200      	str	r2, [sp, #0]
   b99a4:	aa15      	add	r2, sp, #84	; 0x54
   b99a6:	495e      	ldr	r1, [pc, #376]	; (b9b20 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b99a8:	2032      	movs	r0, #50	; 0x32
   b99aa:	f7fe fe21 	bl	b85f0 <log_message>
   b99ae:	e7c7      	b.n	b9940 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b99b0:	3508      	adds	r5, #8
   b99b2:	e7da      	b.n	b996a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b99b4:	4650      	mov	r0, sl
   b99b6:	f7ff f875 	bl	b8aa4 <_ZNK8particle7BleUuid7isValidEv>
   b99ba:	b960      	cbnz	r0, b99d6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b99bc:	4959      	ldr	r1, [pc, #356]	; (b9b24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b99be:	2201      	movs	r2, #1
   b99c0:	a815      	add	r0, sp, #84	; 0x54
   b99c2:	ad15      	add	r5, sp, #84	; 0x54
   b99c4:	f7ff f846 	bl	b8a54 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b99c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b99ca:	46d4      	mov	ip, sl
   b99cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b99d0:	682b      	ldr	r3, [r5, #0]
   b99d2:	f8cc 3000 	str.w	r3, [ip]
   b99d6:	6833      	ldr	r3, [r6, #0]
   b99d8:	e9d3 5300 	ldrd	r5, r3, [r3]
   b99dc:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b99e0:	455d      	cmp	r5, fp
   b99e2:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b99e4:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b99e6:	d06e      	beq.n	b9ac6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b99e8:	f855 0b08 	ldr.w	r0, [r5], #8
   b99ec:	f7ff f889 	bl	b8b02 <_ZNK8particle7BleUuideqERKS0_>
   b99f0:	2800      	cmp	r0, #0
   b99f2:	d0f5      	beq.n	b99e0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b99f4:	f104 0a14 	add.w	sl, r4, #20
   b99f8:	4650      	mov	r0, sl
   b99fa:	f7ff f853 	bl	b8aa4 <_ZNK8particle7BleUuid7isValidEv>
   b99fe:	b988      	cbnz	r0, b9a24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b9a00:	4b49      	ldr	r3, [pc, #292]	; (b9b28 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b9a02:	4948      	ldr	r1, [pc, #288]	; (b9b24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b9a04:	881a      	ldrh	r2, [r3, #0]
   b9a06:	3201      	adds	r2, #1
   b9a08:	b292      	uxth	r2, r2
   b9a0a:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b9a0c:	a815      	add	r0, sp, #84	; 0x54
   b9a0e:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b9a10:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b9a12:	f7ff f83e 	bl	b8a92 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b9a16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9a18:	46d4      	mov	ip, sl
   b9a1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b9a1e:	682b      	ldr	r3, [r5, #0]
   b9a20:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b9a24:	4b41      	ldr	r3, [pc, #260]	; (b9b2c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b9a26:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b9a28:	2228      	movs	r2, #40	; 0x28
   b9a2a:	2100      	movs	r1, #0
   b9a2c:	a816      	add	r0, sp, #88	; 0x58
   b9a2e:	f002 fa19 	bl	bbe64 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b9a32:	4651      	mov	r1, sl
   b9a34:	a804      	add	r0, sp, #16
   b9a36:	f7ff f847 	bl	b8ac8 <_ZN8particle7BleUuid7halUUIDEv>
   b9a3a:	ab04      	add	r3, sp, #16
   b9a3c:	aa18      	add	r2, sp, #96	; 0x60
   b9a3e:	f10d 0c20 	add.w	ip, sp, #32
   b9a42:	6818      	ldr	r0, [r3, #0]
   b9a44:	6859      	ldr	r1, [r3, #4]
   b9a46:	4615      	mov	r5, r2
   b9a48:	c503      	stmia	r5!, {r0, r1}
   b9a4a:	3308      	adds	r3, #8
   b9a4c:	4563      	cmp	r3, ip
   b9a4e:	462a      	mov	r2, r5
   b9a50:	d1f7      	bne.n	b9a42 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b9a52:	6818      	ldr	r0, [r3, #0]
   b9a54:	6028      	str	r0, [r5, #0]
    return value_;
   b9a56:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b9a58:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b9a5c:	f8d9 3000 	ldr.w	r3, [r9]
   b9a60:	8a9b      	ldrh	r3, [r3, #20]
   b9a62:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b9a66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b9a68:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b9a6a:	4b31      	ldr	r3, [pc, #196]	; (b9b30 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b9a6c:	2200      	movs	r2, #0
   b9a6e:	1da1      	adds	r1, r4, #6
   b9a70:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b9a72:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b9a76:	f7fe fc3b 	bl	b82f0 <hal_ble_gatt_server_add_characteristic>
   b9a7a:	2800      	cmp	r0, #0
   b9a7c:	f47f af60 	bne.w	b9940 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b9a80:	2301      	movs	r3, #1
   b9a82:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b9a84:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b9a86:	4639      	mov	r1, r7
        return characteristics_;
   b9a88:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b9a8a:	a80d      	add	r0, sp, #52	; 0x34
   b9a8c:	f7ff fadf 	bl	b904e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9a90:	4620      	mov	r0, r4
   b9a92:	a90d      	add	r1, sp, #52	; 0x34
   b9a94:	f7ff ff1b 	bl	b98ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b9a98:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b9a9a:	a80e      	add	r0, sp, #56	; 0x38
   b9a9c:	f7ff faf9 	bl	b9092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9aa0:	2c00      	cmp	r4, #0
   b9aa2:	f47f af4d 	bne.w	b9940 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b9aa6:	2320      	movs	r3, #32
   b9aa8:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b9aac:	4b21      	ldr	r3, [pc, #132]	; (b9b34 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b9aae:	9300      	str	r3, [sp, #0]
   b9ab0:	aa0d      	add	r2, sp, #52	; 0x34
   b9ab2:	4623      	mov	r3, r4
   b9ab4:	e777      	b.n	b99a6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b9ab6:	4639      	mov	r1, r7
   b9ab8:	4640      	mov	r0, r8
   b9aba:	f7ff fac8 	bl	b904e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9abe:	a80c      	add	r0, sp, #48	; 0x30
   b9ac0:	f7ff fae7 	bl	b9092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9ac4:	e740      	b.n	b9948 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b9ac6:	a80b      	add	r0, sp, #44	; 0x2c
   b9ac8:	f7ff f94a 	bl	b8d60 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b9acc:	4651      	mov	r1, sl
   b9ace:	a815      	add	r0, sp, #84	; 0x54
   b9ad0:	f7fe fffa 	bl	b8ac8 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b9ad4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b9ad6:	2300      	movs	r3, #0
   b9ad8:	3214      	adds	r2, #20
   b9ada:	a915      	add	r1, sp, #84	; 0x54
   b9adc:	2001      	movs	r0, #1
   b9ade:	f7fe fbdf 	bl	b82a0 <hal_ble_gatt_server_add_service>
   b9ae2:	2800      	cmp	r0, #0
   b9ae4:	d1e7      	bne.n	b9ab6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b9ae6:	6835      	ldr	r5, [r6, #0]
   b9ae8:	a90b      	add	r1, sp, #44	; 0x2c
   b9aea:	a80d      	add	r0, sp, #52	; 0x34
   b9aec:	f7ff fabd 	bl	b906a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b9af0:	4628      	mov	r0, r5
   b9af2:	a90d      	add	r1, sp, #52	; 0x34
   b9af4:	f7ff fe7c 	bl	b97f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b9af8:	4605      	mov	r5, r0
   b9afa:	a80e      	add	r0, sp, #56	; 0x38
   b9afc:	f7ff fac9 	bl	b9092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9b00:	2d00      	cmp	r5, #0
   b9b02:	d0d8      	beq.n	b9ab6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b9b04:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b9b06:	6853      	ldr	r3, [r2, #4]
   b9b08:	6812      	ldr	r2, [r2, #0]
   b9b0a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b9b0e:	3b01      	subs	r3, #1
   b9b10:	a80c      	add	r0, sp, #48	; 0x30
   b9b12:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b9b16:	f7ff fabc 	bl	b9092 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9b1a:	e76b      	b.n	b99f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b9b1c:	000be4fa 	.word	0x000be4fa
   b9b20:	000be417 	.word	0x000be417
   b9b24:	000be5be 	.word	0x000be5be
   b9b28:	2003e6bc 	.word	0x2003e6bc
   b9b2c:	002c0003 	.word	0x002c0003
   b9b30:	000b8ef9 	.word	0x000b8ef9
   b9b34:	000be525 	.word	0x000be525

000b9b38 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b9b38:	4802      	ldr	r0, [pc, #8]	; (b9b44 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b9b3a:	2300      	movs	r3, #0
   b9b3c:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b9b3e:	f7fe bbff 	b.w	b8340 <os_mutex_recursive_create>
   b9b42:	bf00      	nop
   b9b44:	2003e6c0 	.word	0x2003e6c0

000b9b48 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9b48:	2200      	movs	r2, #0
   b9b4a:	6840      	ldr	r0, [r0, #4]
   b9b4c:	4611      	mov	r1, r2
   b9b4e:	f7fe bdbb 	b.w	b86c8 <network_listening>

000b9b52 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9b52:	2200      	movs	r2, #0
   b9b54:	6840      	ldr	r0, [r0, #4]
   b9b56:	4611      	mov	r1, r2
   b9b58:	f7fe bdde 	b.w	b8718 <network_get_listen_timeout>

000b9b5c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9b5c:	6840      	ldr	r0, [r0, #4]
   b9b5e:	2200      	movs	r2, #0
   b9b60:	f7fe bdd2 	b.w	b8708 <network_set_listen_timeout>

000b9b64 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9b64:	6840      	ldr	r0, [r0, #4]
   b9b66:	2200      	movs	r2, #0
   b9b68:	f081 0101 	eor.w	r1, r1, #1
   b9b6c:	f7fe bda4 	b.w	b86b8 <network_listen>

000b9b70 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9b70:	2300      	movs	r3, #0
   b9b72:	6840      	ldr	r0, [r0, #4]
   b9b74:	461a      	mov	r2, r3
   b9b76:	4619      	mov	r1, r3
   b9b78:	f7fe bd96 	b.w	b86a8 <network_off>

000b9b7c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b9b7c:	2300      	movs	r3, #0
   b9b7e:	6840      	ldr	r0, [r0, #4]
   b9b80:	461a      	mov	r2, r3
   b9b82:	4619      	mov	r1, r3
   b9b84:	f7fe bd88 	b.w	b8698 <network_on>

000b9b88 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b9b88:	2200      	movs	r2, #0
   b9b8a:	6840      	ldr	r0, [r0, #4]
   b9b8c:	4611      	mov	r1, r2
   b9b8e:	f7fe bd7b 	b.w	b8688 <network_ready>

000b9b92 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9b92:	2200      	movs	r2, #0
   b9b94:	6840      	ldr	r0, [r0, #4]
   b9b96:	4611      	mov	r1, r2
   b9b98:	f7fe bd66 	b.w	b8668 <network_connecting>

000b9b9c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9b9c:	6840      	ldr	r0, [r0, #4]
   b9b9e:	2200      	movs	r2, #0
   b9ba0:	2102      	movs	r1, #2
   b9ba2:	f7fe bd69 	b.w	b8678 <network_disconnect>

000b9ba6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b9ba6:	2300      	movs	r3, #0
   b9ba8:	6840      	ldr	r0, [r0, #4]
   b9baa:	461a      	mov	r2, r3
   b9bac:	f7fe bd54 	b.w	b8658 <network_connect>

000b9bb0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b9bb0:	4b02      	ldr	r3, [pc, #8]	; (b9bbc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b9bb2:	2203      	movs	r2, #3
   b9bb4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b9bb6:	4a02      	ldr	r2, [pc, #8]	; (b9bc0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b9bb8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b9bba:	4770      	bx	lr
   b9bbc:	2003e6c8 	.word	0x2003e6c8
   b9bc0:	000be5e8 	.word	0x000be5e8

000b9bc4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b9bc4:	4770      	bx	lr

000b9bc6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b9bc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9bc8:	4606      	mov	r6, r0
   b9bca:	4615      	mov	r5, r2
   b9bcc:	460c      	mov	r4, r1
   b9bce:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b9bd0:	42bc      	cmp	r4, r7
   b9bd2:	d006      	beq.n	b9be2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b9bd4:	6833      	ldr	r3, [r6, #0]
   b9bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
   b9bda:	689b      	ldr	r3, [r3, #8]
   b9bdc:	4630      	mov	r0, r6
   b9bde:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b9be0:	e7f6      	b.n	b9bd0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b9be2:	4628      	mov	r0, r5
   b9be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9be6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b9be6:	7c00      	ldrb	r0, [r0, #16]
   b9be8:	2200      	movs	r2, #0
   b9bea:	f7fe bbf1 	b.w	b83d0 <hal_i2c_write>

000b9bee <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b9bee:	7c00      	ldrb	r0, [r0, #16]
   b9bf0:	2100      	movs	r1, #0
   b9bf2:	f7fe bbf5 	b.w	b83e0 <hal_i2c_available>

000b9bf6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b9bf6:	7c00      	ldrb	r0, [r0, #16]
   b9bf8:	2100      	movs	r1, #0
   b9bfa:	f7fe bbf9 	b.w	b83f0 <hal_i2c_read>

000b9bfe <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b9bfe:	7c00      	ldrb	r0, [r0, #16]
   b9c00:	2100      	movs	r1, #0
   b9c02:	f7fe bbfd 	b.w	b8400 <hal_i2c_peek>

000b9c06 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b9c06:	7c00      	ldrb	r0, [r0, #16]
   b9c08:	2100      	movs	r1, #0
   b9c0a:	f7fe bc01 	b.w	b8410 <hal_i2c_flush>

000b9c0e <_ZN7TwoWireD0Ev>:
   b9c0e:	b510      	push	{r4, lr}
   b9c10:	2114      	movs	r1, #20
   b9c12:	4604      	mov	r4, r0
   b9c14:	f7fa fa45 	bl	b40a2 <_ZdlPvj>
   b9c18:	4620      	mov	r0, r4
   b9c1a:	bd10      	pop	{r4, pc}

000b9c1c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b9c1c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b9c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9c22:	4604      	mov	r4, r0
   b9c24:	4608      	mov	r0, r1
   b9c26:	2100      	movs	r1, #0
   b9c28:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b9c2c:	4b03      	ldr	r3, [pc, #12]	; (b9c3c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b9c2e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b9c30:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b9c32:	4611      	mov	r1, r2
   b9c34:	f7fe fbf4 	bl	b8420 <hal_i2c_init>
}
   b9c38:	4620      	mov	r0, r4
   b9c3a:	bd10      	pop	{r4, pc}
   b9c3c:	000be624 	.word	0x000be624

000b9c40 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b9c40:	2300      	movs	r3, #0
   b9c42:	7c00      	ldrb	r0, [r0, #16]
   b9c44:	461a      	mov	r2, r3
   b9c46:	4619      	mov	r1, r3
   b9c48:	f7fe bbaa 	b.w	b83a0 <hal_i2c_begin>

000b9c4c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b9c4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b9c4e:	2200      	movs	r2, #0
   b9c50:	2314      	movs	r3, #20
   b9c52:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b9c56:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b9c5a:	780b      	ldrb	r3, [r1, #0]
   b9c5c:	f88d 3008 	strb.w	r3, [sp, #8]
   b9c60:	684b      	ldr	r3, [r1, #4]
   b9c62:	9303      	str	r3, [sp, #12]
   b9c64:	68cb      	ldr	r3, [r1, #12]
   b9c66:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b9c68:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b9c6a:	7a0b      	ldrb	r3, [r1, #8]
   b9c6c:	9305      	str	r3, [sp, #20]
   b9c6e:	a901      	add	r1, sp, #4
   b9c70:	f7fe fbde 	bl	b8430 <hal_i2c_request_ex>
}
   b9c74:	b007      	add	sp, #28
   b9c76:	f85d fb04 	ldr.w	pc, [sp], #4

000b9c7a <_ZN7TwoWire11requestFromEhjh>:
{
   b9c7a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b9c7c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b9c7e:	f88d 1000 	strb.w	r1, [sp]
   b9c82:	f04f 0164 	mov.w	r1, #100	; 0x64
   b9c86:	9103      	str	r1, [sp, #12]
   b9c88:	bf18      	it	ne
   b9c8a:	2301      	movne	r3, #1
   b9c8c:	4669      	mov	r1, sp
    size_ = size;
   b9c8e:	9201      	str	r2, [sp, #4]
   b9c90:	f88d 3008 	strb.w	r3, [sp, #8]
   b9c94:	f7ff ffda 	bl	b9c4c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b9c98:	b005      	add	sp, #20
   b9c9a:	f85d fb04 	ldr.w	pc, [sp], #4

000b9c9e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b9c9e:	2301      	movs	r3, #1
   b9ca0:	f7ff bfeb 	b.w	b9c7a <_ZN7TwoWire11requestFromEhjh>

000b9ca4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b9ca4:	7c00      	ldrb	r0, [r0, #16]
   b9ca6:	2200      	movs	r2, #0
   b9ca8:	f7fe bb82 	b.w	b83b0 <hal_i2c_begin_transmission>

000b9cac <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b9cac:	b2c9      	uxtb	r1, r1
   b9cae:	f7ff bff9 	b.w	b9ca4 <_ZN7TwoWire17beginTransmissionEh>

000b9cb2 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b9cb2:	7c00      	ldrb	r0, [r0, #16]
   b9cb4:	2200      	movs	r2, #0
   b9cb6:	f7fe bb83 	b.w	b83c0 <hal_i2c_end_transmission>

000b9cba <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b9cba:	2101      	movs	r1, #1
   b9cbc:	f7ff bff9 	b.w	b9cb2 <_ZN7TwoWire15endTransmissionEh>

000b9cc0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b9cc0:	4770      	bx	lr

000b9cc2 <_ZN9IPAddressD0Ev>:
   b9cc2:	b510      	push	{r4, lr}
   b9cc4:	2118      	movs	r1, #24
   b9cc6:	4604      	mov	r4, r0
   b9cc8:	f7fa f9eb 	bl	b40a2 <_ZdlPvj>
   b9ccc:	4620      	mov	r0, r4
   b9cce:	bd10      	pop	{r4, pc}

000b9cd0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b9cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b9cd2:	7d03      	ldrb	r3, [r0, #20]
   b9cd4:	2b06      	cmp	r3, #6
{
   b9cd6:	b08d      	sub	sp, #52	; 0x34
   b9cd8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9cda:	f100 0704 	add.w	r7, r0, #4
   b9cde:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b9ce2:	d012      	beq.n	b9d0a <_ZNK9IPAddress7printToER5Print+0x3a>
   b9ce4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b9ce8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b9cec:	220a      	movs	r2, #10
   b9cee:	4630      	mov	r0, r6
   b9cf0:	f000 f973 	bl	b9fda <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b9cf4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b9cf6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b9cf8:	d019      	beq.n	b9d2e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b9cfa:	2c00      	cmp	r4, #0
   b9cfc:	d0f4      	beq.n	b9ce8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b9cfe:	212e      	movs	r1, #46	; 0x2e
   b9d00:	4630      	mov	r0, r6
   b9d02:	f000 f951 	bl	b9fa8 <_ZN5Print5printEc>
   b9d06:	4404      	add	r4, r0
   b9d08:	e7ee      	b.n	b9ce8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9d0a:	232f      	movs	r3, #47	; 0x2f
   b9d0c:	466a      	mov	r2, sp
   b9d0e:	4639      	mov	r1, r7
   b9d10:	200a      	movs	r0, #10
		buf[0] = 0;
   b9d12:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9d16:	f7fe fb9b 	bl	b8450 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b9d1a:	4668      	mov	r0, sp
   b9d1c:	f002 f8ea 	bl	bbef4 <strlen>
   b9d20:	6833      	ldr	r3, [r6, #0]
   b9d22:	4602      	mov	r2, r0
   b9d24:	68db      	ldr	r3, [r3, #12]
   b9d26:	4669      	mov	r1, sp
   b9d28:	4630      	mov	r0, r6
   b9d2a:	4798      	blx	r3
   b9d2c:	4604      	mov	r4, r0
    }
    return n;
}
   b9d2e:	4620      	mov	r0, r4
   b9d30:	b00d      	add	sp, #52	; 0x34
   b9d32:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9d34 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b9d34:	b510      	push	{r4, lr}
   b9d36:	4b05      	ldr	r3, [pc, #20]	; (b9d4c <_ZN9IPAddressC1Ev+0x18>)
   b9d38:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b9d3a:	2211      	movs	r2, #17
   b9d3c:	f840 3b04 	str.w	r3, [r0], #4
   b9d40:	2100      	movs	r1, #0
   b9d42:	f002 f88f 	bl	bbe64 <memset>
}
   b9d46:	4620      	mov	r0, r4
   b9d48:	bd10      	pop	{r4, pc}
   b9d4a:	bf00      	nop
   b9d4c:	000be64c 	.word	0x000be64c

000b9d50 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b9d50:	4603      	mov	r3, r0
   b9d52:	4a07      	ldr	r2, [pc, #28]	; (b9d70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b9d54:	b510      	push	{r4, lr}
   b9d56:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b9d5a:	f101 0210 	add.w	r2, r1, #16
   b9d5e:	f851 4b04 	ldr.w	r4, [r1], #4
   b9d62:	f843 4b04 	str.w	r4, [r3], #4
   b9d66:	4291      	cmp	r1, r2
   b9d68:	d1f9      	bne.n	b9d5e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b9d6a:	780a      	ldrb	r2, [r1, #0]
   b9d6c:	701a      	strb	r2, [r3, #0]
}
   b9d6e:	bd10      	pop	{r4, pc}
   b9d70:	000be64c 	.word	0x000be64c

000b9d74 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b9d74:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b9d76:	2b04      	cmp	r3, #4
   b9d78:	d104      	bne.n	b9d84 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b9d7a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b9d7c:	3800      	subs	r0, #0
   b9d7e:	bf18      	it	ne
   b9d80:	2001      	movne	r0, #1
   b9d82:	4770      	bx	lr
    } else if (version() == 6) {
   b9d84:	2b06      	cmp	r3, #6
   b9d86:	d107      	bne.n	b9d98 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b9d88:	6843      	ldr	r3, [r0, #4]
   b9d8a:	b93b      	cbnz	r3, b9d9c <_ZNK9IPAddresscvbEv+0x28>
   b9d8c:	6883      	ldr	r3, [r0, #8]
   b9d8e:	b92b      	cbnz	r3, b9d9c <_ZNK9IPAddresscvbEv+0x28>
   b9d90:	68c3      	ldr	r3, [r0, #12]
   b9d92:	b91b      	cbnz	r3, b9d9c <_ZNK9IPAddresscvbEv+0x28>
   b9d94:	6900      	ldr	r0, [r0, #16]
   b9d96:	e7f1      	b.n	b9d7c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b9d98:	2000      	movs	r0, #0
   b9d9a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b9d9c:	2001      	movs	r0, #1
}
   b9d9e:	4770      	bx	lr

000b9da0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b9da0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b9da2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b9da6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b9daa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b9dae:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b9db2:	2304      	movs	r3, #4
   b9db4:	6041      	str	r1, [r0, #4]
   b9db6:	7503      	strb	r3, [r0, #20]
}
   b9db8:	bd10      	pop	{r4, pc}
	...

000b9dbc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b9dbc:	b507      	push	{r0, r1, r2, lr}
   b9dbe:	4b06      	ldr	r3, [pc, #24]	; (b9dd8 <_ZN9IPAddressC1EPKh+0x1c>)
   b9dc0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b9dc2:	78cb      	ldrb	r3, [r1, #3]
   b9dc4:	9300      	str	r3, [sp, #0]
   b9dc6:	788b      	ldrb	r3, [r1, #2]
   b9dc8:	784a      	ldrb	r2, [r1, #1]
   b9dca:	7809      	ldrb	r1, [r1, #0]
   b9dcc:	f7ff ffe8 	bl	b9da0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b9dd0:	b003      	add	sp, #12
   b9dd2:	f85d fb04 	ldr.w	pc, [sp], #4
   b9dd6:	bf00      	nop
   b9dd8:	000be64c 	.word	0x000be64c

000b9ddc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b9ddc:	4b01      	ldr	r3, [pc, #4]	; (b9de4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b9dde:	4a02      	ldr	r2, [pc, #8]	; (b9de8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b9de0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b9de2:	4770      	bx	lr
   b9de4:	2003e6d0 	.word	0x2003e6d0
   b9de8:	000be658 	.word	0x000be658

000b9dec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b9dec:	2300      	movs	r3, #0
   b9dee:	6840      	ldr	r0, [r0, #4]
   b9df0:	461a      	mov	r2, r3
   b9df2:	f7fe bc31 	b.w	b8658 <network_connect>

000b9df6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b9df6:	6840      	ldr	r0, [r0, #4]
   b9df8:	2200      	movs	r2, #0
   b9dfa:	2102      	movs	r1, #2
   b9dfc:	f7fe bc3c 	b.w	b8678 <network_disconnect>

000b9e00 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b9e00:	2200      	movs	r2, #0
   b9e02:	6840      	ldr	r0, [r0, #4]
   b9e04:	4611      	mov	r1, r2
   b9e06:	f7fe bc2f 	b.w	b8668 <network_connecting>

000b9e0a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b9e0a:	2200      	movs	r2, #0
   b9e0c:	6840      	ldr	r0, [r0, #4]
   b9e0e:	4611      	mov	r1, r2
   b9e10:	f7fe bc3a 	b.w	b8688 <network_ready>

000b9e14 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b9e14:	2300      	movs	r3, #0
   b9e16:	6840      	ldr	r0, [r0, #4]
   b9e18:	461a      	mov	r2, r3
   b9e1a:	4619      	mov	r1, r3
   b9e1c:	f7fe bc3c 	b.w	b8698 <network_on>

000b9e20 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b9e20:	2300      	movs	r3, #0
   b9e22:	6840      	ldr	r0, [r0, #4]
   b9e24:	461a      	mov	r2, r3
   b9e26:	4619      	mov	r1, r3
   b9e28:	f7fe bc3e 	b.w	b86a8 <network_off>

000b9e2c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b9e2c:	6840      	ldr	r0, [r0, #4]
   b9e2e:	2100      	movs	r1, #0
   b9e30:	f7fe bc7a 	b.w	b8728 <network_is_on>

000b9e34 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b9e34:	6840      	ldr	r0, [r0, #4]
   b9e36:	2100      	movs	r1, #0
   b9e38:	f7fe bc7e 	b.w	b8738 <network_is_off>

000b9e3c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b9e3c:	6840      	ldr	r0, [r0, #4]
   b9e3e:	2200      	movs	r2, #0
   b9e40:	f081 0101 	eor.w	r1, r1, #1
   b9e44:	f7fe bc38 	b.w	b86b8 <network_listen>

000b9e48 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b9e48:	6840      	ldr	r0, [r0, #4]
   b9e4a:	2200      	movs	r2, #0
   b9e4c:	f7fe bc5c 	b.w	b8708 <network_set_listen_timeout>

000b9e50 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b9e50:	2200      	movs	r2, #0
   b9e52:	6840      	ldr	r0, [r0, #4]
   b9e54:	4611      	mov	r1, r2
   b9e56:	f7fe bc5f 	b.w	b8718 <network_get_listen_timeout>

000b9e5a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b9e5a:	2200      	movs	r2, #0
   b9e5c:	6840      	ldr	r0, [r0, #4]
   b9e5e:	4611      	mov	r1, r2
   b9e60:	f7fe bc32 	b.w	b86c8 <network_listening>

000b9e64 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b9e64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9e68:	b095      	sub	sp, #84	; 0x54
   b9e6a:	4614      	mov	r4, r2
   b9e6c:	460d      	mov	r5, r1
   b9e6e:	4607      	mov	r7, r0
    IPAddress addr;
   b9e70:	f7ff ff60 	bl	b9d34 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b9e74:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b9e76:	221c      	movs	r2, #28
   b9e78:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b9e7a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b9e7c:	f001 fff2 	bl	bbe64 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b9e80:	2340      	movs	r3, #64	; 0x40
   b9e82:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b9e84:	4620      	mov	r0, r4
   b9e86:	466b      	mov	r3, sp
   b9e88:	aa0c      	add	r2, sp, #48	; 0x30
   b9e8a:	2100      	movs	r1, #0
   b9e8c:	f7fe fb00 	bl	b8490 <netdb_getaddrinfo>
    if (!r) {
   b9e90:	4604      	mov	r4, r0
   b9e92:	2800      	cmp	r0, #0
   b9e94:	d14b      	bne.n	b9f2e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9e96:	4602      	mov	r2, r0
   b9e98:	2101      	movs	r1, #1
   b9e9a:	6868      	ldr	r0, [r5, #4]
   b9e9c:	f7fe fbf4 	bl	b8688 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9ea0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9ea2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9ea4:	4622      	mov	r2, r4
   b9ea6:	6868      	ldr	r0, [r5, #4]
   b9ea8:	f7fe fbee 	bl	b8688 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9eac:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9eae:	4681      	mov	r9, r0
        bool ok = false;
   b9eb0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9eb2:	2e00      	cmp	r6, #0
   b9eb4:	d03b      	beq.n	b9f2e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b9eb6:	2900      	cmp	r1, #0
   b9eb8:	d139      	bne.n	b9f2e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b9eba:	6873      	ldr	r3, [r6, #4]
   b9ebc:	2b02      	cmp	r3, #2
   b9ebe:	d003      	beq.n	b9ec8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b9ec0:	2b0a      	cmp	r3, #10
   b9ec2:	d011      	beq.n	b9ee8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9ec4:	69f6      	ldr	r6, [r6, #28]
   b9ec6:	e7f4      	b.n	b9eb2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b9ec8:	f1b8 0f00 	cmp.w	r8, #0
   b9ecc:	d0fa      	beq.n	b9ec4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b9ece:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b9ed0:	a806      	add	r0, sp, #24
   b9ed2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b9ed4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b9ed6:	f7ff ff71 	bl	b9dbc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9eda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9edc:	1d3c      	adds	r4, r7, #4
   b9ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9ee0:	682b      	ldr	r3, [r5, #0]
   b9ee2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9ee4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b9ee6:	e7ed      	b.n	b9ec4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b9ee8:	f1b9 0f00 	cmp.w	r9, #0
   b9eec:	d0ea      	beq.n	b9ec4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b9eee:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b9ef0:	2210      	movs	r2, #16
   b9ef2:	a801      	add	r0, sp, #4
   b9ef4:	f001 ffb6 	bl	bbe64 <memset>
                    a.v = 6;
   b9ef8:	2306      	movs	r3, #6
   b9efa:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b9efe:	ad01      	add	r5, sp, #4
   b9f00:	f104 0308 	add.w	r3, r4, #8
   b9f04:	3418      	adds	r4, #24
   b9f06:	6818      	ldr	r0, [r3, #0]
   b9f08:	6859      	ldr	r1, [r3, #4]
   b9f0a:	462a      	mov	r2, r5
   b9f0c:	c203      	stmia	r2!, {r0, r1}
   b9f0e:	3308      	adds	r3, #8
   b9f10:	42a3      	cmp	r3, r4
   b9f12:	4615      	mov	r5, r2
   b9f14:	d1f7      	bne.n	b9f06 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b9f16:	a901      	add	r1, sp, #4
   b9f18:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b9f1a:	ad07      	add	r5, sp, #28
   b9f1c:	f7ff ff18 	bl	b9d50 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9f20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9f22:	1d3c      	adds	r4, r7, #4
   b9f24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9f26:	682b      	ldr	r3, [r5, #0]
   b9f28:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9f2a:	4649      	mov	r1, r9
   b9f2c:	e7ca      	b.n	b9ec4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b9f2e:	9800      	ldr	r0, [sp, #0]
   b9f30:	f7fe faa6 	bl	b8480 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b9f34:	4638      	mov	r0, r7
   b9f36:	b015      	add	sp, #84	; 0x54
   b9f38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b9f3c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b9f3c:	4b02      	ldr	r3, [pc, #8]	; (b9f48 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b9f3e:	4a03      	ldr	r2, [pc, #12]	; (b9f4c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b9f40:	601a      	str	r2, [r3, #0]
   b9f42:	2200      	movs	r2, #0
   b9f44:	605a      	str	r2, [r3, #4]

} // spark
   b9f46:	4770      	bx	lr
   b9f48:	2003e6d4 	.word	0x2003e6d4
   b9f4c:	000be664 	.word	0x000be664

000b9f50 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b9f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9f52:	4606      	mov	r6, r0
   b9f54:	460d      	mov	r5, r1
  size_t n = 0;
   b9f56:	188f      	adds	r7, r1, r2
   b9f58:	2400      	movs	r4, #0
  while (size--) {
   b9f5a:	42bd      	cmp	r5, r7
   b9f5c:	d00c      	beq.n	b9f78 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b9f5e:	6833      	ldr	r3, [r6, #0]
   b9f60:	f815 1b01 	ldrb.w	r1, [r5], #1
   b9f64:	689b      	ldr	r3, [r3, #8]
   b9f66:	4630      	mov	r0, r6
   b9f68:	4798      	blx	r3
     if (chunk>=0)
   b9f6a:	1e03      	subs	r3, r0, #0
   b9f6c:	db01      	blt.n	b9f72 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b9f6e:	441c      	add	r4, r3
  while (size--) {
   b9f70:	e7f3      	b.n	b9f5a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b9f72:	2c00      	cmp	r4, #0
   b9f74:	bf08      	it	eq
   b9f76:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b9f78:	4620      	mov	r0, r4
   b9f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9f7c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b9f7c:	b513      	push	{r0, r1, r4, lr}
   b9f7e:	4604      	mov	r4, r0
    }
   b9f80:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b9f82:	b159      	cbz	r1, b9f9c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b9f84:	9101      	str	r1, [sp, #4]
   b9f86:	f001 ffb5 	bl	bbef4 <strlen>
   b9f8a:	6823      	ldr	r3, [r4, #0]
   b9f8c:	9901      	ldr	r1, [sp, #4]
   b9f8e:	68db      	ldr	r3, [r3, #12]
   b9f90:	4602      	mov	r2, r0
   b9f92:	4620      	mov	r0, r4
    }
   b9f94:	b002      	add	sp, #8
   b9f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b9f9a:	4718      	bx	r3
    }
   b9f9c:	b002      	add	sp, #8
   b9f9e:	bd10      	pop	{r4, pc}

000b9fa0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b9fa0:	b508      	push	{r3, lr}
  return write(str);
   b9fa2:	f7ff ffeb 	bl	b9f7c <_ZN5Print5writeEPKc>
}
   b9fa6:	bd08      	pop	{r3, pc}

000b9fa8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b9fa8:	6803      	ldr	r3, [r0, #0]
   b9faa:	689b      	ldr	r3, [r3, #8]
   b9fac:	4718      	bx	r3

000b9fae <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b9fae:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b9fb0:	210d      	movs	r1, #13
{
   b9fb2:	4605      	mov	r5, r0
  size_t n = print('\r');
   b9fb4:	f7ff fff8 	bl	b9fa8 <_ZN5Print5printEc>
  n += print('\n');
   b9fb8:	210a      	movs	r1, #10
  size_t n = print('\r');
   b9fba:	4604      	mov	r4, r0
  n += print('\n');
   b9fbc:	4628      	mov	r0, r5
   b9fbe:	f7ff fff3 	bl	b9fa8 <_ZN5Print5printEc>
  return n;
}
   b9fc2:	4420      	add	r0, r4
   b9fc4:	bd38      	pop	{r3, r4, r5, pc}

000b9fc6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b9fc6:	b538      	push	{r3, r4, r5, lr}
   b9fc8:	4605      	mov	r5, r0
  return write(str);
   b9fca:	f7ff ffd7 	bl	b9f7c <_ZN5Print5writeEPKc>
   b9fce:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b9fd0:	4628      	mov	r0, r5
   b9fd2:	f7ff ffec 	bl	b9fae <_ZN5Print7printlnEv>
  return n;
}
   b9fd6:	4420      	add	r0, r4
   b9fd8:	bd38      	pop	{r3, r4, r5, pc}

000b9fda <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b9fda:	b530      	push	{r4, r5, lr}
   b9fdc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b9fde:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b9fe0:	2a01      	cmp	r2, #1
  *str = '\0';
   b9fe2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b9fe6:	bf98      	it	ls
   b9fe8:	220a      	movls	r2, #10
   b9fea:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b9fec:	460d      	mov	r5, r1
   b9fee:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b9ff2:	fb01 5312 	mls	r3, r1, r2, r5
   b9ff6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b9ffa:	2b09      	cmp	r3, #9
   b9ffc:	bf94      	ite	ls
   b9ffe:	3330      	addls	r3, #48	; 0x30
   ba000:	3337      	addhi	r3, #55	; 0x37
   ba002:	b2db      	uxtb	r3, r3
  } while(n);
   ba004:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba006:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   ba00a:	d9ef      	bls.n	b9fec <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   ba00c:	4621      	mov	r1, r4
   ba00e:	f7ff ffb5 	bl	b9f7c <_ZN5Print5writeEPKc>
}
   ba012:	b00b      	add	sp, #44	; 0x2c
   ba014:	bd30      	pop	{r4, r5, pc}

000ba016 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   ba016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba01a:	b086      	sub	sp, #24
   ba01c:	af00      	add	r7, sp, #0
   ba01e:	4605      	mov	r5, r0
   ba020:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   ba022:	1d38      	adds	r0, r7, #4
   ba024:	2114      	movs	r1, #20
{
   ba026:	4614      	mov	r4, r2
    va_copy(args2, args);
   ba028:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   ba02a:	f7fe fbad 	bl	b8788 <vsnprintf>

    if (n<bufsize)
   ba02e:	2813      	cmp	r0, #19
   ba030:	d80e      	bhi.n	ba050 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   ba032:	1d39      	adds	r1, r7, #4
   ba034:	4628      	mov	r0, r5
   ba036:	f7ff ffa1 	bl	b9f7c <_ZN5Print5writeEPKc>
   ba03a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   ba03c:	b11e      	cbz	r6, ba046 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   ba03e:	4628      	mov	r0, r5
   ba040:	f7ff ffb5 	bl	b9fae <_ZN5Print7printlnEv>
   ba044:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   ba046:	4620      	mov	r0, r4
   ba048:	3718      	adds	r7, #24
   ba04a:	46bd      	mov	sp, r7
   ba04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   ba050:	f100 0308 	add.w	r3, r0, #8
   ba054:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   ba058:	46e8      	mov	r8, sp
        char bigger[n+1];
   ba05a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   ba05e:	4622      	mov	r2, r4
   ba060:	1c41      	adds	r1, r0, #1
   ba062:	683b      	ldr	r3, [r7, #0]
   ba064:	4668      	mov	r0, sp
   ba066:	f7fe fb8f 	bl	b8788 <vsnprintf>
  return write(str);
   ba06a:	4669      	mov	r1, sp
   ba06c:	4628      	mov	r0, r5
   ba06e:	f7ff ff85 	bl	b9f7c <_ZN5Print5writeEPKc>
   ba072:	4604      	mov	r4, r0
   ba074:	46c5      	mov	sp, r8
   ba076:	e7e1      	b.n	ba03c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000ba078 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   ba078:	4b01      	ldr	r3, [pc, #4]	; (ba080 <_GLOBAL__sub_I_RGB+0x8>)
   ba07a:	2200      	movs	r2, #0
   ba07c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   ba07e:	4770      	bx	lr
   ba080:	2003e6dc 	.word	0x2003e6dc

000ba084 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   ba084:	b510      	push	{r4, lr}
   ba086:	4604      	mov	r4, r0
{
	free(buffer);
   ba088:	6800      	ldr	r0, [r0, #0]
   ba08a:	f7fe fb65 	bl	b8758 <free>
}
   ba08e:	4620      	mov	r0, r4
   ba090:	bd10      	pop	{r4, pc}

000ba092 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   ba092:	b510      	push	{r4, lr}
   ba094:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   ba096:	6800      	ldr	r0, [r0, #0]
   ba098:	b108      	cbz	r0, ba09e <_ZN6String10invalidateEv+0xc>
   ba09a:	f7fe fb5d 	bl	b8758 <free>
	buffer = NULL;
   ba09e:	2300      	movs	r3, #0
	capacity = len = 0;
   ba0a0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   ba0a4:	6023      	str	r3, [r4, #0]
}
   ba0a6:	bd10      	pop	{r4, pc}

000ba0a8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   ba0a8:	b538      	push	{r3, r4, r5, lr}
   ba0aa:	4604      	mov	r4, r0
   ba0ac:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   ba0ae:	6800      	ldr	r0, [r0, #0]
   ba0b0:	3101      	adds	r1, #1
   ba0b2:	f7fe fb59 	bl	b8768 <realloc>
	if (newbuffer) {
   ba0b6:	b110      	cbz	r0, ba0be <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   ba0b8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   ba0bc:	2001      	movs	r0, #1
	}
	return 0;
}
   ba0be:	bd38      	pop	{r3, r4, r5, pc}

000ba0c0 <_ZN6String7reserveEj>:
{
   ba0c0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   ba0c2:	6803      	ldr	r3, [r0, #0]
{
   ba0c4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   ba0c6:	b123      	cbz	r3, ba0d2 <_ZN6String7reserveEj+0x12>
   ba0c8:	6843      	ldr	r3, [r0, #4]
   ba0ca:	428b      	cmp	r3, r1
   ba0cc:	d301      	bcc.n	ba0d2 <_ZN6String7reserveEj+0x12>
   ba0ce:	2001      	movs	r0, #1
}
   ba0d0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   ba0d2:	4620      	mov	r0, r4
   ba0d4:	f7ff ffe8 	bl	ba0a8 <_ZN6String12changeBufferEj>
   ba0d8:	2800      	cmp	r0, #0
   ba0da:	d0f9      	beq.n	ba0d0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   ba0dc:	68a3      	ldr	r3, [r4, #8]
   ba0de:	2b00      	cmp	r3, #0
   ba0e0:	d1f5      	bne.n	ba0ce <_ZN6String7reserveEj+0xe>
   ba0e2:	6822      	ldr	r2, [r4, #0]
   ba0e4:	7013      	strb	r3, [r2, #0]
   ba0e6:	e7f2      	b.n	ba0ce <_ZN6String7reserveEj+0xe>

000ba0e8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   ba0e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba0ea:	460d      	mov	r5, r1
	if (!reserve(length)) {
   ba0ec:	4611      	mov	r1, r2
   ba0ee:	9201      	str	r2, [sp, #4]
{
   ba0f0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   ba0f2:	f7ff ffe5 	bl	ba0c0 <_ZN6String7reserveEj>
   ba0f6:	9a01      	ldr	r2, [sp, #4]
   ba0f8:	b928      	cbnz	r0, ba106 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   ba0fa:	4620      	mov	r0, r4
   ba0fc:	f7ff ffc9 	bl	ba092 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   ba100:	4620      	mov	r0, r4
   ba102:	b003      	add	sp, #12
   ba104:	bd30      	pop	{r4, r5, pc}
	len = length;
   ba106:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   ba108:	4629      	mov	r1, r5
   ba10a:	6820      	ldr	r0, [r4, #0]
   ba10c:	f001 fe82 	bl	bbe14 <memcpy>
	buffer[len] = 0;
   ba110:	6822      	ldr	r2, [r4, #0]
   ba112:	68a3      	ldr	r3, [r4, #8]
   ba114:	2100      	movs	r1, #0
   ba116:	54d1      	strb	r1, [r2, r3]
	return *this;
   ba118:	e7f2      	b.n	ba100 <_ZN6String4copyEPKcj+0x18>

000ba11a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   ba11a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   ba11c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   ba11e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   ba122:	4604      	mov	r4, r0
	len = 0;
   ba124:	6083      	str	r3, [r0, #8]
	flags = 0;
   ba126:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   ba128:	b141      	cbz	r1, ba13c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   ba12a:	4608      	mov	r0, r1
   ba12c:	9101      	str	r1, [sp, #4]
   ba12e:	f001 fee1 	bl	bbef4 <strlen>
   ba132:	9901      	ldr	r1, [sp, #4]
   ba134:	4602      	mov	r2, r0
   ba136:	4620      	mov	r0, r4
   ba138:	f7ff ffd6 	bl	ba0e8 <_ZN6String4copyEPKcj>
}
   ba13c:	4620      	mov	r0, r4
   ba13e:	b002      	add	sp, #8
   ba140:	bd10      	pop	{r4, pc}

000ba142 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   ba142:	b538      	push	{r3, r4, r5, lr}
   ba144:	4605      	mov	r5, r0
	if (buffer) {
   ba146:	6800      	ldr	r0, [r0, #0]
{
   ba148:	460c      	mov	r4, r1
	if (buffer) {
   ba14a:	b168      	cbz	r0, ba168 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   ba14c:	686a      	ldr	r2, [r5, #4]
   ba14e:	688b      	ldr	r3, [r1, #8]
   ba150:	429a      	cmp	r2, r3
   ba152:	d307      	bcc.n	ba164 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   ba154:	6809      	ldr	r1, [r1, #0]
   ba156:	f001 fec5 	bl	bbee4 <strcpy>
			len = rhs.len;
   ba15a:	68a3      	ldr	r3, [r4, #8]
   ba15c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   ba15e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   ba160:	60a3      	str	r3, [r4, #8]
}
   ba162:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   ba164:	f7fe faf8 	bl	b8758 <free>
	buffer = rhs.buffer;
   ba168:	6823      	ldr	r3, [r4, #0]
   ba16a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   ba16c:	6863      	ldr	r3, [r4, #4]
   ba16e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   ba170:	68a3      	ldr	r3, [r4, #8]
   ba172:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   ba174:	2300      	movs	r3, #0
	rhs.capacity = 0;
   ba176:	e9c4 3300 	strd	r3, r3, [r4]
   ba17a:	e7f1      	b.n	ba160 <_ZN6String4moveERS_+0x1e>

000ba17c <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   ba17c:	4288      	cmp	r0, r1
{
   ba17e:	b510      	push	{r4, lr}
   ba180:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   ba182:	d005      	beq.n	ba190 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   ba184:	680b      	ldr	r3, [r1, #0]
   ba186:	b12b      	cbz	r3, ba194 <_ZN6StringaSERKS_+0x18>
   ba188:	688a      	ldr	r2, [r1, #8]
   ba18a:	4619      	mov	r1, r3
   ba18c:	f7ff ffac 	bl	ba0e8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   ba190:	4620      	mov	r0, r4
   ba192:	bd10      	pop	{r4, pc}
	else invalidate();
   ba194:	f7ff ff7d 	bl	ba092 <_ZN6String10invalidateEv>
   ba198:	e7fa      	b.n	ba190 <_ZN6StringaSERKS_+0x14>

000ba19a <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   ba19a:	4288      	cmp	r0, r1
{
   ba19c:	b510      	push	{r4, lr}
   ba19e:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   ba1a0:	d001      	beq.n	ba1a6 <_ZN6StringaSEOS_+0xc>
   ba1a2:	f7ff ffce 	bl	ba142 <_ZN6String4moveERS_>
	return *this;
}
   ba1a6:	4620      	mov	r0, r4
   ba1a8:	bd10      	pop	{r4, pc}

000ba1aa <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   ba1aa:	b513      	push	{r0, r1, r4, lr}
   ba1ac:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   ba1ae:	b159      	cbz	r1, ba1c8 <_ZN6StringaSEPKc+0x1e>
   ba1b0:	4608      	mov	r0, r1
   ba1b2:	9101      	str	r1, [sp, #4]
   ba1b4:	f001 fe9e 	bl	bbef4 <strlen>
   ba1b8:	9901      	ldr	r1, [sp, #4]
   ba1ba:	4602      	mov	r2, r0
   ba1bc:	4620      	mov	r0, r4
   ba1be:	f7ff ff93 	bl	ba0e8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   ba1c2:	4620      	mov	r0, r4
   ba1c4:	b002      	add	sp, #8
   ba1c6:	bd10      	pop	{r4, pc}
	else invalidate();
   ba1c8:	f7ff ff63 	bl	ba092 <_ZN6String10invalidateEv>
   ba1cc:	e7f9      	b.n	ba1c2 <_ZN6StringaSEPKc+0x18>

000ba1ce <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   ba1ce:	b510      	push	{r4, lr}
   ba1d0:	4604      	mov	r4, r0
   ba1d2:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   ba1d4:	2300      	movs	r3, #0
	capacity = 0;
   ba1d6:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   ba1da:	60a3      	str	r3, [r4, #8]
	flags = 0;
   ba1dc:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   ba1de:	4608      	mov	r0, r1
	itoa(value, buf, base);
   ba1e0:	a901      	add	r1, sp, #4
   ba1e2:	f000 fd15 	bl	bac10 <itoa>
	*this = buf;
   ba1e6:	a901      	add	r1, sp, #4
   ba1e8:	4620      	mov	r0, r4
   ba1ea:	f7ff ffde 	bl	ba1aa <_ZN6StringaSEPKc>
}
   ba1ee:	4620      	mov	r0, r4
   ba1f0:	b00a      	add	sp, #40	; 0x28
   ba1f2:	bd10      	pop	{r4, pc}

000ba1f4 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   ba1f4:	b570      	push	{r4, r5, r6, lr}
   ba1f6:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   ba1f8:	460e      	mov	r6, r1
   ba1fa:	b909      	cbnz	r1, ba200 <_ZN6String6concatEPKcj+0xc>
   ba1fc:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   ba1fe:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   ba200:	b16a      	cbz	r2, ba21e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   ba202:	6884      	ldr	r4, [r0, #8]
   ba204:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   ba206:	4621      	mov	r1, r4
   ba208:	f7ff ff5a 	bl	ba0c0 <_ZN6String7reserveEj>
   ba20c:	2800      	cmp	r0, #0
   ba20e:	d0f5      	beq.n	ba1fc <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   ba210:	6828      	ldr	r0, [r5, #0]
   ba212:	68ab      	ldr	r3, [r5, #8]
   ba214:	4631      	mov	r1, r6
   ba216:	4418      	add	r0, r3
   ba218:	f001 fe64 	bl	bbee4 <strcpy>
	len = newlen;
   ba21c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   ba21e:	2001      	movs	r0, #1
   ba220:	e7ed      	b.n	ba1fe <_ZN6String6concatEPKcj+0xa>

000ba222 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   ba222:	688a      	ldr	r2, [r1, #8]
   ba224:	6809      	ldr	r1, [r1, #0]
   ba226:	f7ff bfe5 	b.w	ba1f4 <_ZN6String6concatEPKcj>

000ba22a <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   ba22a:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   ba22c:	2300      	movs	r3, #0
	buf[0] = c;
   ba22e:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   ba232:	2201      	movs	r2, #1
   ba234:	a901      	add	r1, sp, #4
	buf[1] = 0;
   ba236:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   ba23a:	f7ff ffdb 	bl	ba1f4 <_ZN6String6concatEPKcj>
}
   ba23e:	b003      	add	sp, #12
   ba240:	f85d fb04 	ldr.w	pc, [sp], #4

000ba244 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   ba244:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   ba246:	688a      	ldr	r2, [r1, #8]
   ba248:	6809      	ldr	r1, [r1, #0]
{
   ba24a:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   ba24c:	f7ff ffd2 	bl	ba1f4 <_ZN6String6concatEPKcj>
   ba250:	b910      	cbnz	r0, ba258 <_ZplRK15StringSumHelperRK6String+0x14>
   ba252:	4620      	mov	r0, r4
   ba254:	f7ff ff1d 	bl	ba092 <_ZN6String10invalidateEv>
	return a;
}
   ba258:	4620      	mov	r0, r4
   ba25a:	bd10      	pop	{r4, pc}

000ba25c <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   ba25c:	b513      	push	{r0, r1, r4, lr}
   ba25e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   ba260:	b929      	cbnz	r1, ba26e <_ZplRK15StringSumHelperPKc+0x12>
   ba262:	4620      	mov	r0, r4
   ba264:	f7ff ff15 	bl	ba092 <_ZN6String10invalidateEv>
	return a;
}
   ba268:	4620      	mov	r0, r4
   ba26a:	b002      	add	sp, #8
   ba26c:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   ba26e:	4608      	mov	r0, r1
   ba270:	9101      	str	r1, [sp, #4]
   ba272:	f001 fe3f 	bl	bbef4 <strlen>
   ba276:	9901      	ldr	r1, [sp, #4]
   ba278:	4602      	mov	r2, r0
   ba27a:	4620      	mov	r0, r4
   ba27c:	f7ff ffba 	bl	ba1f4 <_ZN6String6concatEPKcj>
   ba280:	2800      	cmp	r0, #0
   ba282:	d0ee      	beq.n	ba262 <_ZplRK15StringSumHelperPKc+0x6>
   ba284:	e7f0      	b.n	ba268 <_ZplRK15StringSumHelperPKc+0xc>

000ba286 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   ba286:	6802      	ldr	r2, [r0, #0]
{
   ba288:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   ba28a:	6809      	ldr	r1, [r1, #0]
   ba28c:	b162      	cbz	r2, ba2a8 <_ZNK6String9compareToERKS_+0x22>
   ba28e:	b941      	cbnz	r1, ba2a2 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   ba290:	6880      	ldr	r0, [r0, #8]
   ba292:	b160      	cbz	r0, ba2ae <_ZNK6String9compareToERKS_+0x28>
   ba294:	7810      	ldrb	r0, [r2, #0]
   ba296:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   ba298:	6898      	ldr	r0, [r3, #8]
   ba29a:	b140      	cbz	r0, ba2ae <_ZNK6String9compareToERKS_+0x28>
   ba29c:	7809      	ldrb	r1, [r1, #0]
   ba29e:	4248      	negs	r0, r1
   ba2a0:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   ba2a2:	4610      	mov	r0, r2
   ba2a4:	f001 be14 	b.w	bbed0 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   ba2a8:	2900      	cmp	r1, #0
   ba2aa:	d1f5      	bne.n	ba298 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   ba2ac:	4608      	mov	r0, r1
}
   ba2ae:	4770      	bx	lr

000ba2b0 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   ba2b0:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   ba2b2:	6882      	ldr	r2, [r0, #8]
   ba2b4:	688b      	ldr	r3, [r1, #8]
   ba2b6:	429a      	cmp	r2, r3
   ba2b8:	d105      	bne.n	ba2c6 <_ZNK6String6equalsERKS_+0x16>
   ba2ba:	f7ff ffe4 	bl	ba286 <_ZNK6String9compareToERKS_>
   ba2be:	fab0 f080 	clz	r0, r0
   ba2c2:	0940      	lsrs	r0, r0, #5
}
   ba2c4:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   ba2c6:	2000      	movs	r0, #0
   ba2c8:	e7fc      	b.n	ba2c4 <_ZNK6String6equalsERKS_+0x14>

000ba2ca <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
   ba2ca:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   ba2cc:	6882      	ldr	r2, [r0, #8]
   ba2ce:	b93a      	cbnz	r2, ba2e0 <_ZNK6String6equalsEPKc+0x16>
   ba2d0:	b121      	cbz	r1, ba2dc <_ZNK6String6equalsEPKc+0x12>
   ba2d2:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   ba2d4:	fab0 f080 	clz	r0, r0
   ba2d8:	0940      	lsrs	r0, r0, #5
   ba2da:	e000      	b.n	ba2de <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   ba2dc:	2001      	movs	r0, #1
}
   ba2de:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   ba2e0:	6800      	ldr	r0, [r0, #0]
   ba2e2:	b909      	cbnz	r1, ba2e8 <_ZNK6String6equalsEPKc+0x1e>
   ba2e4:	7800      	ldrb	r0, [r0, #0]
   ba2e6:	e7f5      	b.n	ba2d4 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   ba2e8:	f001 fdf2 	bl	bbed0 <strcmp>
   ba2ec:	e7f2      	b.n	ba2d4 <_ZNK6String6equalsEPKc+0xa>

000ba2ee <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   ba2ee:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   ba2f0:	6883      	ldr	r3, [r0, #8]
   ba2f2:	4293      	cmp	r3, r2
   ba2f4:	d907      	bls.n	ba306 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   ba2f6:	6804      	ldr	r4, [r0, #0]
   ba2f8:	6809      	ldr	r1, [r1, #0]
   ba2fa:	18a0      	adds	r0, r4, r2
   ba2fc:	f001 fe22 	bl	bbf44 <strstr>
	if (found == NULL) return -1;
   ba300:	b108      	cbz	r0, ba306 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   ba302:	1b00      	subs	r0, r0, r4
}
   ba304:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   ba306:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   ba30a:	e7fb      	b.n	ba304 <_ZNK6String7indexOfERKS_j+0x16>

000ba30c <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   ba30c:	2200      	movs	r2, #0
   ba30e:	f7ff bfee 	b.w	ba2ee <_ZNK6String7indexOfERKS_j>
	...

000ba314 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   ba314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   ba316:	429a      	cmp	r2, r3
{
   ba318:	460f      	mov	r7, r1
   ba31a:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   ba31c:	490c      	ldr	r1, [pc, #48]	; (ba350 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   ba31e:	bf88      	it	hi
   ba320:	4613      	movhi	r3, r2
{
   ba322:	4614      	mov	r4, r2
   ba324:	4606      	mov	r6, r0
	if (left > right) {
   ba326:	bf84      	itt	hi
   ba328:	462c      	movhi	r4, r5
   ba32a:	461d      	movhi	r5, r3
	String out;
   ba32c:	f7ff fef5 	bl	ba11a <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   ba330:	68bb      	ldr	r3, [r7, #8]
   ba332:	42a3      	cmp	r3, r4
   ba334:	d30a      	bcc.n	ba34c <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   ba336:	6839      	ldr	r1, [r7, #0]
   ba338:	42ab      	cmp	r3, r5
   ba33a:	bf94      	ite	ls
   ba33c:	ebc4 0203 	rsbls	r2, r4, r3
   ba340:	ebc4 0205 	rsbhi	r2, r4, r5
   ba344:	4421      	add	r1, r4
   ba346:	4630      	mov	r0, r6
   ba348:	f7ff fece 	bl	ba0e8 <_ZN6String4copyEPKcj>
	return out;
}
   ba34c:	4630      	mov	r0, r6
   ba34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba350:	000be3ca 	.word	0x000be3ca

000ba354 <_ZNK6String9substringEj>:
{
   ba354:	b510      	push	{r4, lr}
   ba356:	4604      	mov	r4, r0
	return substring(left, len);
   ba358:	688b      	ldr	r3, [r1, #8]
   ba35a:	f7ff ffdb 	bl	ba314 <_ZNK6String9substringEjj>
}
   ba35e:	4620      	mov	r0, r4
   ba360:	bd10      	pop	{r4, pc}
	...

000ba364 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   ba364:	4b05      	ldr	r3, [pc, #20]	; (ba37c <_GLOBAL__sub_I_System+0x18>)
   ba366:	2202      	movs	r2, #2
   ba368:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   ba36a:	4b05      	ldr	r3, [pc, #20]	; (ba380 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   ba36c:	4a05      	ldr	r2, [pc, #20]	; (ba384 <_GLOBAL__sub_I_System+0x20>)
   ba36e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   ba370:	2000      	movs	r0, #0
   ba372:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   ba376:	f7fe b943 	b.w	b8600 <set_system_mode>
   ba37a:	bf00      	nop
   ba37c:	2003e6f8 	.word	0x2003e6f8
   ba380:	2003e6ec 	.word	0x2003e6ec
   ba384:	ffff0000 	.word	0xffff0000

000ba388 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   ba388:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   ba38a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   ba38c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   ba390:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   ba392:	2201      	movs	r2, #1
   ba394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba398:	f10d 0107 	add.w	r1, sp, #7
   ba39c:	47a0      	blx	r4
}
   ba39e:	b002      	add	sp, #8
   ba3a0:	bd10      	pop	{r4, pc}

000ba3a2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   ba3a2:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   ba3a4:	6803      	ldr	r3, [r0, #0]
   ba3a6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   ba3a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba3ac:	46a4      	mov	ip, r4
}
   ba3ae:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   ba3b2:	4760      	bx	ip

000ba3b4 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   ba3b4:	b513      	push	{r0, r1, r4, lr}
   ba3b6:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   ba3b8:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   ba3ba:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   ba3be:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   ba3c0:	f10d 0107 	add.w	r1, sp, #7
   ba3c4:	2201      	movs	r2, #1
   ba3c6:	47a0      	blx	r4
}
   ba3c8:	b002      	add	sp, #8
   ba3ca:	bd10      	pop	{r4, pc}

000ba3cc <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   ba3cc:	b510      	push	{r4, lr}
      { return _M_ptr; }
   ba3ce:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   ba3d0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   ba3d4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   ba3d8:	429a      	cmp	r2, r3
int TCPClient::read() {
   ba3da:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   ba3dc:	d008      	beq.n	ba3f0 <_ZN9TCPClient4readEv+0x24>
   ba3de:	6963      	ldr	r3, [r4, #20]
   ba3e0:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   ba3e4:	1c51      	adds	r1, r2, #1
   ba3e6:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   ba3ea:	4413      	add	r3, r2
   ba3ec:	7918      	ldrb	r0, [r3, #4]
}
   ba3ee:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   ba3f0:	6803      	ldr	r3, [r0, #0]
   ba3f2:	691b      	ldr	r3, [r3, #16]
   ba3f4:	4798      	blx	r3
   ba3f6:	2800      	cmp	r0, #0
   ba3f8:	d1f1      	bne.n	ba3de <_ZN9TCPClient4readEv+0x12>
   ba3fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   ba3fe:	e7f6      	b.n	ba3ee <_ZN9TCPClient4readEv+0x22>

000ba400 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   ba400:	4770      	bx	lr

000ba402 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   ba402:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   ba404:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   ba406:	43c0      	mvns	r0, r0
   ba408:	0fc0      	lsrs	r0, r0, #31
   ba40a:	4770      	bx	lr

000ba40c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   ba40c:	4770      	bx	lr
	...

000ba410 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   ba410:	4b06      	ldr	r3, [pc, #24]	; (ba42c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   ba412:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   ba414:	b510      	push	{r4, lr}
   ba416:	f100 040c 	add.w	r4, r0, #12
	    ||
   ba41a:	d005      	beq.n	ba428 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   ba41c:	4608      	mov	r0, r1
   ba41e:	f000 fd1d 	bl	bae5c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   ba422:	2800      	cmp	r0, #0
   ba424:	bf08      	it	eq
   ba426:	2400      	moveq	r4, #0
      }
   ba428:	4620      	mov	r0, r4
   ba42a:	bd10      	pop	{r4, pc}
   ba42c:	000be5a0 	.word	0x000be5a0

000ba430 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   ba430:	b510      	push	{r4, lr}
   ba432:	21ac      	movs	r1, #172	; 0xac
   ba434:	4604      	mov	r4, r0
   ba436:	f7f9 fe34 	bl	b40a2 <_ZdlPvj>
   ba43a:	4620      	mov	r0, r4
   ba43c:	bd10      	pop	{r4, pc}

000ba43e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   ba43e:	21ac      	movs	r1, #172	; 0xac
   ba440:	f7f9 be2f 	b.w	b40a2 <_ZdlPvj>

000ba444 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   ba444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   ba448:	f04f 0800 	mov.w	r8, #0
   ba44c:	b086      	sub	sp, #24
   ba44e:	461c      	mov	r4, r3
   ba450:	f8c0 8004 	str.w	r8, [r0, #4]
   ba454:	4605      	mov	r5, r0
   ba456:	460e      	mov	r6, r1
   ba458:	4617      	mov	r7, r2
    struct timeval tv = {};
   ba45a:	4641      	mov	r1, r8
   ba45c:	2210      	movs	r2, #16
   ba45e:	a802      	add	r0, sp, #8
   ba460:	f001 fd00 	bl	bbe64 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   ba464:	1c63      	adds	r3, r4, #1
   ba466:	d009      	beq.n	ba47c <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   ba468:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba46c:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   ba470:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   ba474:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   ba478:	435c      	muls	r4, r3
   ba47a:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   ba47c:	6968      	ldr	r0, [r5, #20]
   ba47e:	2310      	movs	r3, #16
   ba480:	9300      	str	r3, [sp, #0]
   ba482:	6800      	ldr	r0, [r0, #0]
   ba484:	ab02      	add	r3, sp, #8
   ba486:	f241 0205 	movw	r2, #4101	; 0x1005
   ba48a:	f640 71ff 	movw	r1, #4095	; 0xfff
   ba48e:	f7fe f807 	bl	b84a0 <sock_setsockopt>
    if (ret < 0) {
   ba492:	2800      	cmp	r0, #0
   ba494:	da07      	bge.n	ba4a6 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   ba496:	f7fe f98f 	bl	b87b8 <__errno>
   ba49a:	6803      	ldr	r3, [r0, #0]
   ba49c:	606b      	str	r3, [r5, #4]
        return 0;
   ba49e:	2000      	movs	r0, #0
}
   ba4a0:	b006      	add	sp, #24
   ba4a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   ba4a6:	6968      	ldr	r0, [r5, #20]
   ba4a8:	2300      	movs	r3, #0
   ba4aa:	6800      	ldr	r0, [r0, #0]
   ba4ac:	463a      	mov	r2, r7
   ba4ae:	4631      	mov	r1, r6
   ba4b0:	f7fe f816 	bl	b84e0 <sock_send>
    if (ret < 0) {
   ba4b4:	1e03      	subs	r3, r0, #0
   ba4b6:	dbee      	blt.n	ba496 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   ba4b8:	4618      	mov	r0, r3
   ba4ba:	e7f1      	b.n	ba4a0 <_ZN9TCPClient5writeEPKhjm+0x5c>

000ba4bc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   ba4bc:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   ba4be:	6984      	ldr	r4, [r0, #24]
   ba4c0:	4b0a      	ldr	r3, [pc, #40]	; (ba4ec <_ZN9TCPClientD1Ev+0x30>)
   ba4c2:	6003      	str	r3, [r0, #0]
   ba4c4:	4605      	mov	r5, r0
   ba4c6:	b17c      	cbz	r4, ba4e8 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   ba4c8:	6863      	ldr	r3, [r4, #4]
   ba4ca:	3b01      	subs	r3, #1
   ba4cc:	6063      	str	r3, [r4, #4]
   ba4ce:	b95b      	cbnz	r3, ba4e8 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   ba4d0:	6823      	ldr	r3, [r4, #0]
   ba4d2:	4620      	mov	r0, r4
   ba4d4:	689b      	ldr	r3, [r3, #8]
   ba4d6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   ba4d8:	68a3      	ldr	r3, [r4, #8]
   ba4da:	3b01      	subs	r3, #1
   ba4dc:	60a3      	str	r3, [r4, #8]
   ba4de:	b91b      	cbnz	r3, ba4e8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   ba4e0:	6823      	ldr	r3, [r4, #0]
   ba4e2:	4620      	mov	r0, r4
   ba4e4:	68db      	ldr	r3, [r3, #12]
   ba4e6:	4798      	blx	r3
   ba4e8:	4628      	mov	r0, r5
   ba4ea:	bd38      	pop	{r3, r4, r5, pc}
   ba4ec:	000be6d4 	.word	0x000be6d4

000ba4f0 <_ZN9TCPClientD0Ev>:
   ba4f0:	b510      	push	{r4, lr}
   ba4f2:	4604      	mov	r4, r0
   ba4f4:	f7ff ffe2 	bl	ba4bc <_ZN9TCPClientD1Ev>
   ba4f8:	4620      	mov	r0, r4
   ba4fa:	211c      	movs	r1, #28
   ba4fc:	f7f9 fdd1 	bl	b40a2 <_ZdlPvj>
   ba500:	4620      	mov	r0, r4
   ba502:	bd10      	pop	{r4, pc}

000ba504 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   ba504:	b530      	push	{r4, r5, lr}
   ba506:	b087      	sub	sp, #28
   ba508:	4604      	mov	r4, r0
class IPAddress : public Printable {
   ba50a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   ba50c:	4668      	mov	r0, sp
   ba50e:	f7ff fc55 	bl	b9dbc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   ba512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba514:	3404      	adds	r4, #4
   ba516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba518:	682b      	ldr	r3, [r5, #0]
   ba51a:	7023      	strb	r3, [r4, #0]
    }
   ba51c:	b007      	add	sp, #28
   ba51e:	bd30      	pop	{r4, r5, pc}

000ba520 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   ba520:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   ba522:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   ba524:	4b05      	ldr	r3, [pc, #20]	; (ba53c <_ZN9TCPClient8remoteIPEv+0x1c>)
   ba526:	4604      	mov	r4, r0
   ba528:	358c      	adds	r5, #140	; 0x8c
   ba52a:	f844 3b04 	str.w	r3, [r4], #4
   ba52e:	4606      	mov	r6, r0
   ba530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba534:	682b      	ldr	r3, [r5, #0]
   ba536:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   ba538:	4630      	mov	r0, r6
   ba53a:	bd70      	pop	{r4, r5, r6, pc}
   ba53c:	000be64c 	.word	0x000be64c

000ba540 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   ba540:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba544:	4698      	mov	r8, r3
    stop();
   ba546:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   ba548:	b093      	sub	sp, #76	; 0x4c
   ba54a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   ba54c:	2400      	movs	r4, #0
    stop();
   ba54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   ba550:	4606      	mov	r6, r0
   ba552:	4617      	mov	r7, r2
    stop();
   ba554:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   ba556:	4628      	mov	r0, r5
   ba558:	466b      	mov	r3, sp
   ba55a:	4622      	mov	r2, r4
   ba55c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   ba55e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   ba560:	f7fd ff96 	bl	b8490 <netdb_getaddrinfo>
   ba564:	4605      	mov	r5, r0
   ba566:	2800      	cmp	r0, #0
   ba568:	d163      	bne.n	ba632 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   ba56a:	9b00      	ldr	r3, [sp, #0]
   ba56c:	2b00      	cmp	r3, #0
   ba56e:	d04b      	beq.n	ba608 <_ZN9TCPClient7connectEPKctm+0xc8>
   ba570:	695b      	ldr	r3, [r3, #20]
   ba572:	2b00      	cmp	r3, #0
   ba574:	d048      	beq.n	ba608 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   ba576:	a806      	add	r0, sp, #24
   ba578:	f7ff fbdc 	bl	b9d34 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   ba57c:	9b00      	ldr	r3, [sp, #0]
   ba57e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   ba580:	7863      	ldrb	r3, [r4, #1]
   ba582:	2b02      	cmp	r3, #2
   ba584:	d104      	bne.n	ba590 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   ba586:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   ba588:	a806      	add	r0, sp, #24
   ba58a:	f7ff ffbb 	bl	ba504 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   ba58e:	e026      	b.n	ba5de <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   ba590:	2b0a      	cmp	r3, #10
   ba592:	d124      	bne.n	ba5de <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   ba594:	2211      	movs	r2, #17
   ba596:	4629      	mov	r1, r5
   ba598:	a801      	add	r0, sp, #4
   ba59a:	f001 fc63 	bl	bbe64 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   ba59e:	68a3      	ldr	r3, [r4, #8]
   ba5a0:	2b00      	cmp	r3, #0
   ba5a2:	d038      	beq.n	ba616 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   ba5a4:	f104 0308 	add.w	r3, r4, #8
   ba5a8:	f10d 0c04 	add.w	ip, sp, #4
   ba5ac:	3418      	adds	r4, #24
   ba5ae:	6818      	ldr	r0, [r3, #0]
   ba5b0:	6859      	ldr	r1, [r3, #4]
   ba5b2:	4662      	mov	r2, ip
   ba5b4:	c203      	stmia	r2!, {r0, r1}
   ba5b6:	3308      	adds	r3, #8
   ba5b8:	42a3      	cmp	r3, r4
   ba5ba:	4694      	mov	ip, r2
   ba5bc:	d1f7      	bne.n	ba5ae <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   ba5be:	2306      	movs	r3, #6
            addr = IPAddress(a);
   ba5c0:	a901      	add	r1, sp, #4
   ba5c2:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   ba5c4:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   ba5c8:	f7ff fbc2 	bl	b9d50 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   ba5cc:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   ba5d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   ba5d4:	ac07      	add	r4, sp, #28
   ba5d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba5d8:	f8dc 3000 	ldr.w	r3, [ip]
   ba5dc:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   ba5de:	a806      	add	r0, sp, #24
   ba5e0:	f7ff fbc8 	bl	b9d74 <_ZNK9IPAddresscvbEv>
        if (addr) {
   ba5e4:	b180      	cbz	r0, ba608 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   ba5e6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   ba5e8:	ad07      	add	r5, sp, #28
   ba5ea:	f8d3 9020 	ldr.w	r9, [r3, #32]
   ba5ee:	4b12      	ldr	r3, [pc, #72]	; (ba638 <_ZN9TCPClient7connectEPKctm+0xf8>)
   ba5f0:	930c      	str	r3, [sp, #48]	; 0x30
   ba5f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba5f4:	ac0d      	add	r4, sp, #52	; 0x34
   ba5f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba5f8:	682b      	ldr	r3, [r5, #0]
   ba5fa:	7023      	strb	r3, [r4, #0]
   ba5fc:	463a      	mov	r2, r7
   ba5fe:	4643      	mov	r3, r8
   ba600:	a90c      	add	r1, sp, #48	; 0x30
   ba602:	4630      	mov	r0, r6
   ba604:	47c8      	blx	r9
   ba606:	4605      	mov	r5, r0
    SCOPE_GUARD({
   ba608:	9800      	ldr	r0, [sp, #0]
   ba60a:	f7fd ff39 	bl	b8480 <netdb_freeaddrinfo>
}
   ba60e:	4628      	mov	r0, r5
   ba610:	b013      	add	sp, #76	; 0x4c
   ba612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   ba616:	68e3      	ldr	r3, [r4, #12]
   ba618:	2b00      	cmp	r3, #0
   ba61a:	d1c3      	bne.n	ba5a4 <_ZN9TCPClient7connectEPKctm+0x64>
   ba61c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   ba620:	f8d4 9010 	ldr.w	r9, [r4, #16]
   ba624:	f7fd ff1c 	bl	b8460 <inet_htonl>
   ba628:	4581      	cmp	r9, r0
   ba62a:	d1bb      	bne.n	ba5a4 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   ba62c:	f104 0114 	add.w	r1, r4, #20
   ba630:	e7aa      	b.n	ba588 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   ba632:	4625      	mov	r5, r4
   ba634:	e7e8      	b.n	ba608 <_ZN9TCPClient7connectEPKctm+0xc8>
   ba636:	bf00      	nop
   ba638:	000be64c 	.word	0x000be64c

000ba63c <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   ba63c:	b538      	push	{r3, r4, r5, lr}
   ba63e:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   ba640:	681a      	ldr	r2, [r3, #0]
   ba642:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   ba644:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   ba646:	da10      	bge.n	ba66a <_ZN9TCPClient9connectedEv+0x2e>
   ba648:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   ba64c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   ba650:	429a      	cmp	r2, r3
   ba652:	d10a      	bne.n	ba66a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   ba654:	6803      	ldr	r3, [r0, #0]
   ba656:	691b      	ldr	r3, [r3, #16]
   ba658:	4798      	blx	r3
        if (!rv) {
   ba65a:	4604      	mov	r4, r0
   ba65c:	b928      	cbnz	r0, ba66a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   ba65e:	682b      	ldr	r3, [r5, #0]
   ba660:	4628      	mov	r0, r5
   ba662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   ba664:	4798      	blx	r3
        rv = available();
   ba666:	4620      	mov	r0, r4
}
   ba668:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   ba66a:	2001      	movs	r0, #1
   ba66c:	e7fc      	b.n	ba668 <_ZN9TCPClient9connectedEv+0x2c>

000ba66e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   ba66e:	b510      	push	{r4, lr}
   ba670:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   ba672:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   ba676:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   ba67a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   ba67c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   ba67e:	d005      	beq.n	ba68c <_ZN9TCPClient4peekEv+0x1e>
   ba680:	6963      	ldr	r3, [r4, #20]
   ba682:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   ba686:	4413      	add	r3, r2
   ba688:	7918      	ldrb	r0, [r3, #4]
}
   ba68a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   ba68c:	6803      	ldr	r3, [r0, #0]
   ba68e:	691b      	ldr	r3, [r3, #16]
   ba690:	4798      	blx	r3
   ba692:	2800      	cmp	r0, #0
   ba694:	d1f4      	bne.n	ba680 <_ZN9TCPClient4peekEv+0x12>
   ba696:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   ba69a:	e7f6      	b.n	ba68a <_ZN9TCPClient4peekEv+0x1c>

000ba69c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   ba69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba69e:	6943      	ldr	r3, [r0, #20]
   ba6a0:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   ba6a2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   ba6a6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   ba6aa:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   ba6ac:	4605      	mov	r5, r0
   ba6ae:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   ba6b0:	d016      	beq.n	ba6e0 <_ZN9TCPClient4readEPhj+0x44>
   ba6b2:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   ba6b4:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   ba6b8:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   ba6bc:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   ba6be:	42bc      	cmp	r4, r7
   ba6c0:	bf28      	it	cs
   ba6c2:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   ba6c4:	3304      	adds	r3, #4
   ba6c6:	4622      	mov	r2, r4
   ba6c8:	4419      	add	r1, r3
   ba6ca:	4630      	mov	r0, r6
   ba6cc:	f001 fba2 	bl	bbe14 <memcpy>
   ba6d0:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   ba6d2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   ba6d6:	4423      	add	r3, r4
   ba6d8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   ba6dc:	4620      	mov	r0, r4
   ba6de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   ba6e0:	6803      	ldr	r3, [r0, #0]
   ba6e2:	691b      	ldr	r3, [r3, #16]
   ba6e4:	4798      	blx	r3
   ba6e6:	2800      	cmp	r0, #0
   ba6e8:	d1e3      	bne.n	ba6b2 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   ba6ea:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   ba6ee:	e7f5      	b.n	ba6dc <_ZN9TCPClient4readEPhj+0x40>

000ba6f0 <_ZN9TCPClient12flush_bufferEv>:
   ba6f0:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   ba6f2:	2300      	movs	r3, #0
   ba6f4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   ba6f8:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   ba6fa:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   ba6fe:	4770      	bx	lr

000ba700 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   ba700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba704:	461f      	mov	r7, r3
    stop();
   ba706:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   ba708:	460c      	mov	r4, r1
    stop();
   ba70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   ba70c:	b08a      	sub	sp, #40	; 0x28
   ba70e:	4605      	mov	r5, r0
   ba710:	4616      	mov	r6, r2
    stop();
   ba712:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   ba714:	7d23      	ldrb	r3, [r4, #20]
   ba716:	f8d5 8014 	ldr.w	r8, [r5, #20]
   ba71a:	2b04      	cmp	r3, #4
   ba71c:	bf0c      	ite	eq
   ba71e:	2002      	moveq	r0, #2
   ba720:	200a      	movne	r0, #10
   ba722:	2206      	movs	r2, #6
   ba724:	2101      	movs	r1, #1
   ba726:	f7fd fee3 	bl	b84f0 <sock_socket>
   ba72a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   ba72e:	696b      	ldr	r3, [r5, #20]
   ba730:	681b      	ldr	r3, [r3, #0]
   ba732:	2b00      	cmp	r3, #0
   ba734:	da08      	bge.n	ba748 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   ba736:	682b      	ldr	r3, [r5, #0]
   ba738:	4628      	mov	r0, r5
   ba73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   ba73c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   ba73e:	4798      	blx	r3
}
   ba740:	4620      	mov	r0, r4
   ba742:	b00a      	add	sp, #40	; 0x28
   ba744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   ba748:	4628      	mov	r0, r5
   ba74a:	f7ff ffd1 	bl	ba6f0 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   ba74e:	b1b7      	cbz	r7, ba77e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   ba750:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   ba752:	a903      	add	r1, sp, #12
   ba754:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   ba756:	9303      	str	r3, [sp, #12]
   ba758:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   ba75c:	f7fd fe70 	bl	b8440 <if_index_to_name>
   ba760:	2800      	cmp	r0, #0
   ba762:	d1e8      	bne.n	ba736 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   ba764:	6968      	ldr	r0, [r5, #20]
   ba766:	2306      	movs	r3, #6
   ba768:	9300      	str	r3, [sp, #0]
   ba76a:	6800      	ldr	r0, [r0, #0]
   ba76c:	ab03      	add	r3, sp, #12
   ba76e:	f241 020b 	movw	r2, #4107	; 0x100b
   ba772:	f640 71ff 	movw	r1, #4095	; 0xfff
   ba776:	f7fd fe93 	bl	b84a0 <sock_setsockopt>
   ba77a:	2800      	cmp	r0, #0
   ba77c:	d1db      	bne.n	ba736 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   ba77e:	221c      	movs	r2, #28
   ba780:	2100      	movs	r1, #0
   ba782:	a803      	add	r0, sp, #12
   ba784:	f001 fb6e 	bl	bbe64 <memset>
    if (ip.version() == 4) {
   ba788:	7d23      	ldrb	r3, [r4, #20]
   ba78a:	2b04      	cmp	r3, #4
   ba78c:	d11d      	bne.n	ba7ca <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   ba78e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   ba792:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   ba794:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   ba798:	f7fd fe6a 	bl	b8470 <inet_htons>
   ba79c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   ba7a0:	6860      	ldr	r0, [r4, #4]
   ba7a2:	f7fd fe5d 	bl	b8460 <inet_htonl>
   ba7a6:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   ba7a8:	696b      	ldr	r3, [r5, #20]
   ba7aa:	221c      	movs	r2, #28
   ba7ac:	6818      	ldr	r0, [r3, #0]
   ba7ae:	a903      	add	r1, sp, #12
   ba7b0:	f7fd fe86 	bl	b84c0 <sock_connect>
   ba7b4:	2800      	cmp	r0, #0
   ba7b6:	d1be      	bne.n	ba736 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   ba7b8:	3404      	adds	r4, #4
   ba7ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   ba7bc:	696d      	ldr	r5, [r5, #20]
   ba7be:	358c      	adds	r5, #140	; 0x8c
   ba7c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   ba7c2:	6823      	ldr	r3, [r4, #0]
   ba7c4:	702b      	strb	r3, [r5, #0]
    return 1; // success
   ba7c6:	2401      	movs	r4, #1
   ba7c8:	e7ba      	b.n	ba740 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   ba7ca:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   ba7ce:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   ba7d0:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   ba7d4:	f7fd fe4c 	bl	b8470 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   ba7d8:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   ba7da:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   ba7de:	1d23      	adds	r3, r4, #4
   ba7e0:	f104 0714 	add.w	r7, r4, #20
   ba7e4:	6818      	ldr	r0, [r3, #0]
   ba7e6:	6859      	ldr	r1, [r3, #4]
   ba7e8:	4632      	mov	r2, r6
   ba7ea:	c203      	stmia	r2!, {r0, r1}
   ba7ec:	3308      	adds	r3, #8
   ba7ee:	42bb      	cmp	r3, r7
   ba7f0:	4616      	mov	r6, r2
   ba7f2:	d1f7      	bne.n	ba7e4 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   ba7f4:	e7d8      	b.n	ba7a8 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000ba7f8 <_ZN9TCPClient9availableEv>:
{
   ba7f8:	b530      	push	{r4, r5, lr}
   ba7fa:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   ba7fc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   ba800:	b08b      	sub	sp, #44	; 0x2c
   ba802:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   ba804:	b12b      	cbz	r3, ba812 <_ZN9TCPClient9availableEv+0x1a>
   ba806:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   ba80a:	429a      	cmp	r2, r3
   ba80c:	d101      	bne.n	ba812 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   ba80e:	f7ff ff6f 	bl	ba6f0 <_ZN9TCPClient12flush_bufferEv>
   ba812:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   ba814:	6808      	ldr	r0, [r1, #0]
   ba816:	2800      	cmp	r0, #0
   ba818:	db18      	blt.n	ba84c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   ba81a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   ba81e:	2d7f      	cmp	r5, #127	; 0x7f
   ba820:	d814      	bhi.n	ba84c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   ba822:	3104      	adds	r1, #4
   ba824:	2308      	movs	r3, #8
   ba826:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   ba82a:	4429      	add	r1, r5
   ba82c:	f7fd fe50 	bl	b84d0 <sock_recv>
            if (ret > 0) {
   ba830:	2800      	cmp	r0, #0
   ba832:	dd13      	ble.n	ba85c <_ZN9TCPClient9availableEv+0x64>
   ba834:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   ba836:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   ba83a:	b90a      	cbnz	r2, ba840 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   ba83c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   ba840:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   ba842:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   ba846:	4410      	add	r0, r2
   ba848:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   ba84c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   ba84e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   ba852:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   ba856:	1ac0      	subs	r0, r0, r3
   ba858:	b00b      	add	sp, #44	; 0x2c
   ba85a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   ba85c:	f7fd ffac 	bl	b87b8 <__errno>
   ba860:	6803      	ldr	r3, [r0, #0]
   ba862:	2b0b      	cmp	r3, #11
   ba864:	d0f2      	beq.n	ba84c <_ZN9TCPClient9availableEv+0x54>
   ba866:	f7fd ffa7 	bl	b87b8 <__errno>
   ba86a:	6803      	ldr	r3, [r0, #0]
   ba86c:	2b0b      	cmp	r3, #11
   ba86e:	d0ed      	beq.n	ba84c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   ba870:	2320      	movs	r3, #32
   ba872:	2500      	movs	r5, #0
   ba874:	e9cd 3502 	strd	r3, r5, [sp, #8]
   ba878:	f7fd ff9e 	bl	b87b8 <__errno>
   ba87c:	6803      	ldr	r3, [r0, #0]
   ba87e:	9301      	str	r3, [sp, #4]
   ba880:	4b08      	ldr	r3, [pc, #32]	; (ba8a4 <_ZN9TCPClient9availableEv+0xac>)
   ba882:	4909      	ldr	r1, [pc, #36]	; (ba8a8 <_ZN9TCPClient9availableEv+0xb0>)
   ba884:	9300      	str	r3, [sp, #0]
   ba886:	aa02      	add	r2, sp, #8
   ba888:	462b      	mov	r3, r5
   ba88a:	2032      	movs	r0, #50	; 0x32
   ba88c:	f7fd feb0 	bl	b85f0 <log_message>
                    sock_close(d_->sock);
   ba890:	6963      	ldr	r3, [r4, #20]
   ba892:	6818      	ldr	r0, [r3, #0]
   ba894:	f7fd fe0c 	bl	b84b0 <sock_close>
   ba898:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   ba89a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba89e:	601a      	str	r2, [r3, #0]
   ba8a0:	e7d4      	b.n	ba84c <_ZN9TCPClient9availableEv+0x54>
   ba8a2:	bf00      	nop
   ba8a4:	000be69f 	.word	0x000be69f
   ba8a8:	000be698 	.word	0x000be698

000ba8ac <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   ba8ac:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   ba8ae:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   ba8b0:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   ba8b2:	6818      	ldr	r0, [r3, #0]
   ba8b4:	2800      	cmp	r0, #0
   ba8b6:	db01      	blt.n	ba8bc <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   ba8b8:	f7fd fdfa 	bl	b84b0 <sock_close>
   ba8bc:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   ba8be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba8c2:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   ba8c4:	6960      	ldr	r0, [r4, #20]
   ba8c6:	2211      	movs	r2, #17
   ba8c8:	2100      	movs	r1, #0
   ba8ca:	308c      	adds	r0, #140	; 0x8c
   ba8cc:	f001 faca 	bl	bbe64 <memset>
    flush_buffer();
   ba8d0:	4620      	mov	r0, r4
}
   ba8d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   ba8d6:	f7ff bf0b 	b.w	ba6f0 <_ZN9TCPClient12flush_bufferEv>

000ba8da <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   ba8da:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   ba8dc:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   ba8de:	4604      	mov	r4, r0
          total(0) {
   ba8e0:	6001      	str	r1, [r0, #0]
   ba8e2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   ba8e6:	3088      	adds	r0, #136	; 0x88
   ba8e8:	f7ff fa24 	bl	b9d34 <_ZN9IPAddressC1Ev>
}
   ba8ec:	4620      	mov	r0, r4
   ba8ee:	bd10      	pop	{r4, pc}

000ba8f0 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   ba8f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba8f2:	2300      	movs	r3, #0
   ba8f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   ba8f8:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   ba8fc:	4a0e      	ldr	r2, [pc, #56]	; (ba938 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   ba8fe:	6103      	str	r3, [r0, #16]
   ba900:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   ba902:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   ba904:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba906:	20ac      	movs	r0, #172	; 0xac
   ba908:	9101      	str	r1, [sp, #4]
   ba90a:	f7f9 fbc4 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   ba90e:	1e05      	subs	r5, r0, #0
   ba910:	f105 060c 	add.w	r6, r5, #12
   ba914:	d008      	beq.n	ba928 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   ba916:	2301      	movs	r3, #1
   ba918:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   ba91c:	4b07      	ldr	r3, [pc, #28]	; (ba93c <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba91e:	9901      	ldr	r1, [sp, #4]
   ba920:	602b      	str	r3, [r5, #0]
   ba922:	4630      	mov	r0, r6
   ba924:	f7ff ffd9 	bl	ba8da <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   ba928:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   ba92a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   ba92e:	f7ff fedf 	bl	ba6f0 <_ZN9TCPClient12flush_bufferEv>
}
   ba932:	b002      	add	sp, #8
   ba934:	bd70      	pop	{r4, r5, r6, pc}
   ba936:	bf00      	nop
   ba938:	000be6d4 	.word	0x000be6d4
   ba93c:	000be6b8 	.word	0x000be6b8

000ba940 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   ba940:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   ba942:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   ba946:	4604      	mov	r4, r0
        : TCPClient(-1) {
   ba948:	f7ff ffd2 	bl	ba8f0 <_ZN9TCPClientC1Ei>
}
   ba94c:	4620      	mov	r0, r4
   ba94e:	bd10      	pop	{r4, pc}

000ba950 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   ba950:	b510      	push	{r4, lr}
   ba952:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   ba954:	6800      	ldr	r0, [r0, #0]
   ba956:	2800      	cmp	r0, #0
   ba958:	db01      	blt.n	ba95e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   ba95a:	f7fd fda9 	bl	b84b0 <sock_close>
    }
}
   ba95e:	4620      	mov	r0, r4
   ba960:	bd10      	pop	{r4, pc}

000ba962 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   ba962:	300c      	adds	r0, #12
   ba964:	f7ff bff4 	b.w	ba950 <_ZN9TCPClient4DataD1Ev>

000ba968 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   ba968:	4b02      	ldr	r3, [pc, #8]	; (ba974 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   ba96a:	681a      	ldr	r2, [r3, #0]
   ba96c:	4b02      	ldr	r3, [pc, #8]	; (ba978 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   ba96e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   ba970:	4770      	bx	lr
   ba972:	bf00      	nop
   ba974:	20035130 	.word	0x20035130
   ba978:	2003e6fc 	.word	0x2003e6fc

000ba97c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   ba97c:	4770      	bx	lr

000ba97e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ba97e:	7441      	strb	r1, [r0, #17]
}
   ba980:	4770      	bx	lr

000ba982 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   ba982:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   ba984:	7c00      	ldrb	r0, [r0, #16]
   ba986:	f7fd fde3 	bl	b8550 <hal_usart_available_data_for_write>
}
   ba98a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba98e:	bd08      	pop	{r3, pc}

000ba990 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   ba990:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   ba992:	7c00      	ldrb	r0, [r0, #16]
   ba994:	f7fd fdbc 	bl	b8510 <hal_usart_available>
}
   ba998:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba99c:	bd08      	pop	{r3, pc}

000ba99e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   ba99e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   ba9a0:	7c00      	ldrb	r0, [r0, #16]
   ba9a2:	f7fd fdc5 	bl	b8530 <hal_usart_peek>
}
   ba9a6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba9aa:	bd08      	pop	{r3, pc}

000ba9ac <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   ba9ac:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   ba9ae:	7c00      	ldrb	r0, [r0, #16]
   ba9b0:	f7fd fdb6 	bl	b8520 <hal_usart_read>
}
   ba9b4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba9b8:	bd08      	pop	{r3, pc}

000ba9ba <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   ba9ba:	7c00      	ldrb	r0, [r0, #16]
   ba9bc:	f7fd bdc0 	b.w	b8540 <hal_usart_flush>

000ba9c0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   ba9c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba9c2:	7c45      	ldrb	r5, [r0, #17]
{
   ba9c4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba9c6:	b12d      	cbz	r5, ba9d4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   ba9c8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   ba9ca:	b003      	add	sp, #12
   ba9cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   ba9d0:	f7fd bd96 	b.w	b8500 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba9d4:	7c00      	ldrb	r0, [r0, #16]
   ba9d6:	9101      	str	r1, [sp, #4]
   ba9d8:	f7fd fdba 	bl	b8550 <hal_usart_available_data_for_write>
   ba9dc:	2800      	cmp	r0, #0
   ba9de:	9901      	ldr	r1, [sp, #4]
   ba9e0:	dcf2      	bgt.n	ba9c8 <_ZN11USARTSerial5writeEh+0x8>
}
   ba9e2:	4628      	mov	r0, r5
   ba9e4:	b003      	add	sp, #12
   ba9e6:	bd30      	pop	{r4, r5, pc}

000ba9e8 <_ZN11USARTSerialD0Ev>:
   ba9e8:	b510      	push	{r4, lr}
   ba9ea:	2114      	movs	r1, #20
   ba9ec:	4604      	mov	r4, r0
   ba9ee:	f7f9 fb58 	bl	b40a2 <_ZdlPvj>
   ba9f2:	4620      	mov	r0, r4
   ba9f4:	bd10      	pop	{r4, pc}
	...

000ba9f8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   ba9f8:	b510      	push	{r4, lr}
   ba9fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba9fe:	4604      	mov	r4, r0
   baa00:	4608      	mov	r0, r1
   baa02:	4611      	mov	r1, r2
   baa04:	2200      	movs	r2, #0
   baa06:	e9c4 2301 	strd	r2, r3, [r4, #4]
   baa0a:	4b04      	ldr	r3, [pc, #16]	; (baa1c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   baa0c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   baa0e:	2301      	movs	r3, #1
  _serial = serial;
   baa10:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   baa12:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   baa14:	f7fd fda4 	bl	b8560 <hal_usart_init_ex>
}
   baa18:	4620      	mov	r0, r4
   baa1a:	bd10      	pop	{r4, pc}
   baa1c:	000be73c 	.word	0x000be73c

000baa20 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   baa20:	7441      	strb	r1, [r0, #17]
}
   baa22:	4770      	bx	lr

000baa24 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   baa24:	4770      	bx	lr

000baa26 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   baa26:	4770      	bx	lr

000baa28 <_ZN9USBSerial4readEv>:
{
   baa28:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   baa2a:	2100      	movs	r1, #0
   baa2c:	7c00      	ldrb	r0, [r0, #16]
   baa2e:	f7fd fdbf 	bl	b85b0 <HAL_USB_USART_Receive_Data>
}
   baa32:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   baa36:	bd08      	pop	{r3, pc}

000baa38 <_ZN9USBSerial4peekEv>:
{
   baa38:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   baa3a:	2101      	movs	r1, #1
   baa3c:	7c00      	ldrb	r0, [r0, #16]
   baa3e:	f7fd fdb7 	bl	b85b0 <HAL_USB_USART_Receive_Data>
}
   baa42:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   baa46:	bd08      	pop	{r3, pc}

000baa48 <_ZN9USBSerial17availableForWriteEv>:
{
   baa48:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   baa4a:	7c00      	ldrb	r0, [r0, #16]
   baa4c:	f7fd fda8 	bl	b85a0 <HAL_USB_USART_Available_Data_For_Write>
}
   baa50:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   baa54:	bd08      	pop	{r3, pc}

000baa56 <_ZN9USBSerial9availableEv>:
{
   baa56:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   baa58:	7c00      	ldrb	r0, [r0, #16]
   baa5a:	f7fd fd99 	bl	b8590 <HAL_USB_USART_Available_Data>
}
   baa5e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   baa62:	bd08      	pop	{r3, pc}

000baa64 <_ZN9USBSerial5writeEh>:
{
   baa64:	b513      	push	{r0, r1, r4, lr}
   baa66:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   baa68:	7c00      	ldrb	r0, [r0, #16]
{
   baa6a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   baa6c:	f7fd fd98 	bl	b85a0 <HAL_USB_USART_Available_Data_For_Write>
   baa70:	2800      	cmp	r0, #0
   baa72:	9901      	ldr	r1, [sp, #4]
   baa74:	dc01      	bgt.n	baa7a <_ZN9USBSerial5writeEh+0x16>
   baa76:	7c60      	ldrb	r0, [r4, #17]
   baa78:	b120      	cbz	r0, baa84 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   baa7a:	7c20      	ldrb	r0, [r4, #16]
   baa7c:	f7fd fda0 	bl	b85c0 <HAL_USB_USART_Send_Data>
   baa80:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   baa84:	b002      	add	sp, #8
   baa86:	bd10      	pop	{r4, pc}

000baa88 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   baa88:	7c00      	ldrb	r0, [r0, #16]
   baa8a:	f7fd bda1 	b.w	b85d0 <HAL_USB_USART_Flush_Data>

000baa8e <_ZN9USBSerialD0Ev>:
   baa8e:	b510      	push	{r4, lr}
   baa90:	2114      	movs	r1, #20
   baa92:	4604      	mov	r4, r0
   baa94:	f7f9 fb05 	bl	b40a2 <_ZdlPvj>
   baa98:	4620      	mov	r0, r4
   baa9a:	bd10      	pop	{r4, pc}

000baa9c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   baa9c:	b510      	push	{r4, lr}
   baa9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   baaa2:	4604      	mov	r4, r0
   baaa4:	4608      	mov	r0, r1
   baaa6:	2100      	movs	r1, #0
   baaa8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   baaac:	4b04      	ldr	r3, [pc, #16]	; (baac0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   baaae:	6023      	str	r3, [r4, #0]
  _blocking = true;
   baab0:	2301      	movs	r3, #1
  _serial = serial;
   baab2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   baab4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   baab6:	4611      	mov	r1, r2
   baab8:	f7fd fd5a 	bl	b8570 <HAL_USB_USART_Init>
}
   baabc:	4620      	mov	r0, r4
   baabe:	bd10      	pop	{r4, pc}
   baac0:	000be76c 	.word	0x000be76c

000baac4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   baac4:	7c00      	ldrb	r0, [r0, #16]
   baac6:	2200      	movs	r2, #0
   baac8:	f7fd bd5a 	b.w	b8580 <HAL_USB_USART_Begin>

000baacc <_Z19acquireSerialBufferv>:
{
   baacc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   baace:	2214      	movs	r2, #20
{
   baad0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   baad2:	2100      	movs	r1, #0
   baad4:	f001 f9c6 	bl	bbe64 <memset>
}
   baad8:	4620      	mov	r0, r4
   baada:	bd10      	pop	{r4, pc}

000baadc <_Z16_fetch_usbserialv>:
{
   baadc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   baade:	4c0f      	ldr	r4, [pc, #60]	; (bab1c <_Z16_fetch_usbserialv+0x40>)
{
   baae0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   baae2:	a803      	add	r0, sp, #12
   baae4:	f7ff fff2 	bl	baacc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   baae8:	7821      	ldrb	r1, [r4, #0]
   baaea:	f3bf 8f5b 	dmb	ish
   baaee:	f011 0101 	ands.w	r1, r1, #1
   baaf2:	d10f      	bne.n	bab14 <_Z16_fetch_usbserialv+0x38>
   baaf4:	4620      	mov	r0, r4
   baaf6:	9101      	str	r1, [sp, #4]
   baaf8:	f7f9 fad5 	bl	b40a6 <__cxa_guard_acquire>
   baafc:	9901      	ldr	r1, [sp, #4]
   baafe:	b148      	cbz	r0, bab14 <_Z16_fetch_usbserialv+0x38>
   bab00:	aa03      	add	r2, sp, #12
   bab02:	4807      	ldr	r0, [pc, #28]	; (bab20 <_Z16_fetch_usbserialv+0x44>)
   bab04:	f7ff ffca 	bl	baa9c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bab08:	4620      	mov	r0, r4
   bab0a:	f7f9 fad1 	bl	b40b0 <__cxa_guard_release>
   bab0e:	4805      	ldr	r0, [pc, #20]	; (bab24 <_Z16_fetch_usbserialv+0x48>)
   bab10:	f001 f966 	bl	bbde0 <atexit>
	return _usbserial;
}
   bab14:	4802      	ldr	r0, [pc, #8]	; (bab20 <_Z16_fetch_usbserialv+0x44>)
   bab16:	b008      	add	sp, #32
   bab18:	bd10      	pop	{r4, pc}
   bab1a:	bf00      	nop
   bab1c:	2003e700 	.word	0x2003e700
   bab20:	2003e704 	.word	0x2003e704
   bab24:	000baa25 	.word	0x000baa25

000bab28 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   bab28:	2200      	movs	r2, #0
   bab2a:	6840      	ldr	r0, [r0, #4]
   bab2c:	4611      	mov	r1, r2
   bab2e:	f7fd bdab 	b.w	b8688 <network_ready>

000bab32 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bab32:	2200      	movs	r2, #0
   bab34:	6840      	ldr	r0, [r0, #4]
   bab36:	4611      	mov	r1, r2
   bab38:	f7fd bdc6 	b.w	b86c8 <network_listening>

000bab3c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bab3c:	2200      	movs	r2, #0
   bab3e:	6840      	ldr	r0, [r0, #4]
   bab40:	4611      	mov	r1, r2
   bab42:	f7fd bde9 	b.w	b8718 <network_get_listen_timeout>

000bab46 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bab46:	6840      	ldr	r0, [r0, #4]
   bab48:	2200      	movs	r2, #0
   bab4a:	f7fd bddd 	b.w	b8708 <network_set_listen_timeout>

000bab4e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bab4e:	6840      	ldr	r0, [r0, #4]
   bab50:	2200      	movs	r2, #0
   bab52:	f081 0101 	eor.w	r1, r1, #1
   bab56:	f7fd bdaf 	b.w	b86b8 <network_listen>

000bab5a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bab5a:	2300      	movs	r3, #0
   bab5c:	6840      	ldr	r0, [r0, #4]
   bab5e:	461a      	mov	r2, r3
   bab60:	4619      	mov	r1, r3
   bab62:	f7fd bda1 	b.w	b86a8 <network_off>

000bab66 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bab66:	2300      	movs	r3, #0
   bab68:	6840      	ldr	r0, [r0, #4]
   bab6a:	461a      	mov	r2, r3
   bab6c:	4619      	mov	r1, r3
   bab6e:	f7fd bd93 	b.w	b8698 <network_on>

000bab72 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bab72:	2200      	movs	r2, #0
   bab74:	6840      	ldr	r0, [r0, #4]
   bab76:	4611      	mov	r1, r2
   bab78:	f7fd bd76 	b.w	b8668 <network_connecting>

000bab7c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bab7c:	6840      	ldr	r0, [r0, #4]
   bab7e:	2200      	movs	r2, #0
   bab80:	2102      	movs	r1, #2
   bab82:	f7fd bd79 	b.w	b8678 <network_disconnect>

000bab86 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bab86:	2300      	movs	r3, #0
   bab88:	6840      	ldr	r0, [r0, #4]
   bab8a:	461a      	mov	r2, r3
   bab8c:	f7fd bd64 	b.w	b8658 <network_connect>

000bab90 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   bab90:	4b02      	ldr	r3, [pc, #8]	; (bab9c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   bab92:	2204      	movs	r2, #4
   bab94:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   bab96:	4a02      	ldr	r2, [pc, #8]	; (baba0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   bab98:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   bab9a:	4770      	bx	lr
   bab9c:	2003e718 	.word	0x2003e718
   baba0:	000be79c 	.word	0x000be79c

000baba4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   baba4:	b510      	push	{r4, lr}
   baba6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   baba8:	f001 f9a4 	bl	bbef4 <strlen>
   babac:	3801      	subs	r0, #1
   babae:	1823      	adds	r3, r4, r0
   babb0:	4620      	mov	r0, r4
	while(i<j){
   babb2:	4283      	cmp	r3, r0
   babb4:	d906      	bls.n	babc4 <_Z11str_reversePc+0x20>
		c = *i;
   babb6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   babb8:	7819      	ldrb	r1, [r3, #0]
   babba:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   babbe:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   babc2:	e7f6      	b.n	babb2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   babc4:	bd10      	pop	{r4, pc}

000babc6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   babc6:	b570      	push	{r4, r5, r6, lr}
   babc8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   babca:	1e91      	subs	r1, r2, #2
   babcc:	2922      	cmp	r1, #34	; 0x22
   babce:	d81d      	bhi.n	bac0c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   babd0:	4625      	mov	r5, r4

	div_t result;
	while(a){
   babd2:	b930      	cbnz	r0, babe2 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   babd4:	4423      	add	r3, r4
            *ptr++ = '0';
   babd6:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   babd8:	429d      	cmp	r5, r3
   babda:	d210      	bcs.n	babfe <ultoa+0x38>
            *ptr++ = '0';
   babdc:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   babe0:	e7fa      	b.n	babd8 <ultoa+0x12>
            result.quot = a/radix;
   babe2:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   babe6:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   babea:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   babec:	2809      	cmp	r0, #9
                *ptr += '0';
   babee:	bf94      	ite	ls
   babf0:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   babf2:	3157      	addhi	r1, #87	; 0x57
   babf4:	b2c9      	uxtb	r1, r1
   babf6:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   babfa:	4630      	mov	r0, r6
	while(a){
   babfc:	e7e9      	b.n	babd2 <ultoa+0xc>

	*ptr = '\0';
   babfe:	2300      	movs	r3, #0
	str_reverse(buffer);
   bac00:	4620      	mov	r0, r4
	*ptr = '\0';
   bac02:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   bac04:	f7ff ffce 	bl	baba4 <_Z11str_reversePc>
	return buffer;
   bac08:	4620      	mov	r0, r4
}
   bac0a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   bac0c:	2000      	movs	r0, #0
   bac0e:	e7fc      	b.n	bac0a <ultoa+0x44>

000bac10 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   bac10:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   bac12:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   bac14:	460c      	mov	r4, r1
   bac16:	4615      	mov	r5, r2
	if(a<0){
   bac18:	da0e      	bge.n	bac38 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   bac1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   bac1e:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   bac22:	bf14      	ite	ne
   bac24:	4258      	negne	r0, r3
   bac26:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   bac28:	2301      	movs	r3, #1
		*buffer = '-';
   bac2a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   bac2c:	462a      	mov	r2, r5
   bac2e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   bac30:	f7ff ffc9 	bl	babc6 <ultoa>
	}
	return buffer;
}
   bac34:	4620      	mov	r0, r4
   bac36:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   bac38:	2301      	movs	r3, #1
   bac3a:	e7f9      	b.n	bac30 <itoa+0x20>

000bac3c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bac3c:	4b01      	ldr	r3, [pc, #4]	; (bac44 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bac3e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bac40:	4770      	bx	lr
   bac42:	bf00      	nop
   bac44:	20035138 	.word	0x20035138

000bac48 <serialEventRun>:
{
   bac48:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bac4a:	4b0b      	ldr	r3, [pc, #44]	; (bac78 <serialEventRun+0x30>)
   bac4c:	b143      	cbz	r3, bac60 <serialEventRun+0x18>
   bac4e:	f7ff ff45 	bl	baadc <_Z16_fetch_usbserialv>
   bac52:	6803      	ldr	r3, [r0, #0]
   bac54:	691b      	ldr	r3, [r3, #16]
   bac56:	4798      	blx	r3
   bac58:	2800      	cmp	r0, #0
   bac5a:	dd01      	ble.n	bac60 <serialEventRun+0x18>
        serialEvent();
   bac5c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bac60:	4b06      	ldr	r3, [pc, #24]	; (bac7c <serialEventRun+0x34>)
   bac62:	b143      	cbz	r3, bac76 <serialEventRun+0x2e>
   bac64:	f000 f8c8 	bl	badf8 <_Z22__fetch_global_Serial1v>
   bac68:	6803      	ldr	r3, [r0, #0]
   bac6a:	691b      	ldr	r3, [r3, #16]
   bac6c:	4798      	blx	r3
   bac6e:	2800      	cmp	r0, #0
   bac70:	dd01      	ble.n	bac76 <serialEventRun+0x2e>
        serialEvent1();
   bac72:	f3af 8000 	nop.w
}
   bac76:	bd08      	pop	{r3, pc}
	...

000bac80 <_post_loop>:
{
   bac80:	b508      	push	{r3, lr}
	serialEventRun();
   bac82:	f7ff ffe1 	bl	bac48 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bac86:	f7fd fb83 	bl	b8390 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bac8a:	4b01      	ldr	r3, [pc, #4]	; (bac90 <_post_loop+0x10>)
   bac8c:	6018      	str	r0, [r3, #0]
}
   bac8e:	bd08      	pop	{r3, pc}
   bac90:	2003e728 	.word	0x2003e728

000bac94 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bac94:	4805      	ldr	r0, [pc, #20]	; (bacac <_Z33system_initialize_user_backup_ramv+0x18>)
   bac96:	4a06      	ldr	r2, [pc, #24]	; (bacb0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bac98:	4906      	ldr	r1, [pc, #24]	; (bacb4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bac9a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bac9c:	1a12      	subs	r2, r2, r0
   bac9e:	f001 f8b9 	bl	bbe14 <memcpy>
    __backup_sram_signature = signature;
   baca2:	4b05      	ldr	r3, [pc, #20]	; (bacb8 <_Z33system_initialize_user_backup_ramv+0x24>)
   baca4:	4a05      	ldr	r2, [pc, #20]	; (bacbc <_Z33system_initialize_user_backup_ramv+0x28>)
   baca6:	601a      	str	r2, [r3, #0]
}
   baca8:	bd08      	pop	{r3, pc}
   bacaa:	bf00      	nop
   bacac:	2003f400 	.word	0x2003f400
   bacb0:	2003f404 	.word	0x2003f404
   bacb4:	000becd4 	.word	0x000becd4
   bacb8:	2003f400 	.word	0x2003f400
   bacbc:	9a271c1e 	.word	0x9a271c1e

000bacc0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bacc0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bacc2:	2300      	movs	r3, #0
   bacc4:	9300      	str	r3, [sp, #0]
   bacc6:	461a      	mov	r2, r3
   bacc8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   baccc:	f7fd fcb2 	bl	b8634 <system_ctrl_set_result>
}
   bacd0:	b003      	add	sp, #12
   bacd2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bacd8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bacd8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bacda:	8843      	ldrh	r3, [r0, #2]
   bacdc:	2b0a      	cmp	r3, #10
   bacde:	d008      	beq.n	bacf2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bace0:	2b50      	cmp	r3, #80	; 0x50
   bace2:	d10b      	bne.n	bacfc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bace4:	4b09      	ldr	r3, [pc, #36]	; (bad0c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bace6:	681b      	ldr	r3, [r3, #0]
   bace8:	b14b      	cbz	r3, bacfe <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bacea:	b003      	add	sp, #12
   bacec:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bacf0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bacf2:	f7ff ffe5 	bl	bacc0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bacf6:	b003      	add	sp, #12
   bacf8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bacfc:	2300      	movs	r3, #0
   bacfe:	9300      	str	r3, [sp, #0]
   bad00:	461a      	mov	r2, r3
   bad02:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bad06:	f7fd fc95 	bl	b8634 <system_ctrl_set_result>
}
   bad0a:	e7f4      	b.n	bacf6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bad0c:	2003e724 	.word	0x2003e724

000bad10 <module_user_init_hook>:
{
   bad10:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bad12:	4812      	ldr	r0, [pc, #72]	; (bad5c <module_user_init_hook+0x4c>)
   bad14:	2100      	movs	r1, #0
   bad16:	f7fd fd5f 	bl	b87d8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bad1a:	4b11      	ldr	r3, [pc, #68]	; (bad60 <module_user_init_hook+0x50>)
   bad1c:	681a      	ldr	r2, [r3, #0]
   bad1e:	4b11      	ldr	r3, [pc, #68]	; (bad64 <module_user_init_hook+0x54>)
   bad20:	429a      	cmp	r2, r3
   bad22:	4b11      	ldr	r3, [pc, #68]	; (bad68 <module_user_init_hook+0x58>)
   bad24:	bf0c      	ite	eq
   bad26:	2201      	moveq	r2, #1
   bad28:	2200      	movne	r2, #0
   bad2a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bad2c:	d001      	beq.n	bad32 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bad2e:	f7ff ffb1 	bl	bac94 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bad32:	f7fd fb1d 	bl	b8370 <HAL_RNG_GetRandomNumber>
   bad36:	4604      	mov	r4, r0
    srand(seed);
   bad38:	f001 f89c 	bl	bbe74 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bad3c:	4b0b      	ldr	r3, [pc, #44]	; (bad6c <module_user_init_hook+0x5c>)
   bad3e:	b113      	cbz	r3, bad46 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bad40:	4620      	mov	r0, r4
   bad42:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bad46:	2100      	movs	r1, #0
   bad48:	4808      	ldr	r0, [pc, #32]	; (bad6c <module_user_init_hook+0x5c>)
   bad4a:	f7fd fc7d 	bl	b8648 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bad4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bad52:	4807      	ldr	r0, [pc, #28]	; (bad70 <module_user_init_hook+0x60>)
   bad54:	2100      	movs	r1, #0
   bad56:	f7fd bc63 	b.w	b8620 <system_ctrl_set_app_request_handler>
   bad5a:	bf00      	nop
   bad5c:	000bac3d 	.word	0x000bac3d
   bad60:	2003f400 	.word	0x2003f400
   bad64:	9a271c1e 	.word	0x9a271c1e
   bad68:	2003e720 	.word	0x2003e720
   bad6c:	00000000 	.word	0x00000000
   bad70:	000bacd9 	.word	0x000bacd9

000bad74 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bad74:	4770      	bx	lr
	...

000bad78 <_Z19__fetch_global_Wirev>:
{
   bad78:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bad7a:	4d0e      	ldr	r5, [pc, #56]	; (badb4 <_Z19__fetch_global_Wirev+0x3c>)
   bad7c:	7829      	ldrb	r1, [r5, #0]
   bad7e:	f3bf 8f5b 	dmb	ish
   bad82:	f011 0401 	ands.w	r4, r1, #1
{
   bad86:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bad88:	d111      	bne.n	badae <_Z19__fetch_global_Wirev+0x36>
   bad8a:	4628      	mov	r0, r5
   bad8c:	f7f9 f98b 	bl	b40a6 <__cxa_guard_acquire>
   bad90:	b168      	cbz	r0, badae <_Z19__fetch_global_Wirev+0x36>
   bad92:	a801      	add	r0, sp, #4
   bad94:	f7f9 fcac 	bl	b46f0 <_Z17acquireWireBufferv>
   bad98:	aa01      	add	r2, sp, #4
   bad9a:	4621      	mov	r1, r4
   bad9c:	4806      	ldr	r0, [pc, #24]	; (badb8 <_Z19__fetch_global_Wirev+0x40>)
   bad9e:	f7fe ff3d 	bl	b9c1c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bada2:	4628      	mov	r0, r5
   bada4:	f7f9 f984 	bl	b40b0 <__cxa_guard_release>
   bada8:	4804      	ldr	r0, [pc, #16]	; (badbc <_Z19__fetch_global_Wirev+0x44>)
   badaa:	f001 f819 	bl	bbde0 <atexit>
	return wire;
}
   badae:	4802      	ldr	r0, [pc, #8]	; (badb8 <_Z19__fetch_global_Wirev+0x40>)
   badb0:	b007      	add	sp, #28
   badb2:	bd30      	pop	{r4, r5, pc}
   badb4:	2003e72c 	.word	0x2003e72c
   badb8:	2003e730 	.word	0x2003e730
   badbc:	000bad75 	.word	0x000bad75

000badc0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   badc0:	4770      	bx	lr
	...

000badc4 <_Z20acquireSerial1Bufferv>:
{
   badc4:	b538      	push	{r3, r4, r5, lr}
   badc6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   badc8:	2514      	movs	r5, #20
   badca:	462a      	mov	r2, r5
   badcc:	2100      	movs	r1, #0
   badce:	f001 f849 	bl	bbe64 <memset>
   badd2:	8025      	strh	r5, [r4, #0]
   badd4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   badd6:	4907      	ldr	r1, [pc, #28]	; (badf4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   badd8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   badda:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   baddc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   badde:	f000 f82f 	bl	bae40 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bade2:	4904      	ldr	r1, [pc, #16]	; (badf4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bade4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bade6:	4628      	mov	r0, r5
   bade8:	f000 f82a 	bl	bae40 <_ZnajRKSt9nothrow_t>
    };
   badec:	60e0      	str	r0, [r4, #12]
}
   badee:	4620      	mov	r0, r4
   badf0:	bd38      	pop	{r3, r4, r5, pc}
   badf2:	bf00      	nop
   badf4:	000be7d0 	.word	0x000be7d0

000badf8 <_Z22__fetch_global_Serial1v>:
{
   badf8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   badfa:	4d0e      	ldr	r5, [pc, #56]	; (bae34 <_Z22__fetch_global_Serial1v+0x3c>)
   badfc:	7829      	ldrb	r1, [r5, #0]
   badfe:	f3bf 8f5b 	dmb	ish
   bae02:	f011 0401 	ands.w	r4, r1, #1
{
   bae06:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bae08:	d111      	bne.n	bae2e <_Z22__fetch_global_Serial1v+0x36>
   bae0a:	4628      	mov	r0, r5
   bae0c:	f7f9 f94b 	bl	b40a6 <__cxa_guard_acquire>
   bae10:	b168      	cbz	r0, bae2e <_Z22__fetch_global_Serial1v+0x36>
   bae12:	a801      	add	r0, sp, #4
   bae14:	f7ff ffd6 	bl	badc4 <_Z20acquireSerial1Bufferv>
   bae18:	aa01      	add	r2, sp, #4
   bae1a:	4621      	mov	r1, r4
   bae1c:	4806      	ldr	r0, [pc, #24]	; (bae38 <_Z22__fetch_global_Serial1v+0x40>)
   bae1e:	f7ff fdeb 	bl	ba9f8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bae22:	4628      	mov	r0, r5
   bae24:	f7f9 f944 	bl	b40b0 <__cxa_guard_release>
   bae28:	4804      	ldr	r0, [pc, #16]	; (bae3c <_Z22__fetch_global_Serial1v+0x44>)
   bae2a:	f000 ffd9 	bl	bbde0 <atexit>
    return serial1;
}
   bae2e:	4802      	ldr	r0, [pc, #8]	; (bae38 <_Z22__fetch_global_Serial1v+0x40>)
   bae30:	b007      	add	sp, #28
   bae32:	bd30      	pop	{r4, r5, pc}
   bae34:	2003e744 	.word	0x2003e744
   bae38:	2003e748 	.word	0x2003e748
   bae3c:	000badc1 	.word	0x000badc1

000bae40 <_ZnajRKSt9nothrow_t>:
   bae40:	f7f9 b92b 	b.w	b409a <_Znaj>

000bae44 <_ZSt17__throw_bad_allocv>:
   bae44:	b508      	push	{r3, lr}
   bae46:	f7fd fca7 	bl	b8798 <abort>

000bae4a <_ZSt19__throw_logic_errorPKc>:
   bae4a:	b508      	push	{r3, lr}
   bae4c:	f7fd fca4 	bl	b8798 <abort>

000bae50 <_ZSt20__throw_length_errorPKc>:
   bae50:	b508      	push	{r3, lr}
   bae52:	f7fd fca1 	bl	b8798 <abort>

000bae56 <_ZSt25__throw_bad_function_callv>:
   bae56:	b508      	push	{r3, lr}
   bae58:	f7fd fc9e 	bl	b8798 <abort>

000bae5c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   bae5c:	4901      	ldr	r1, [pc, #4]	; (bae64 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   bae5e:	f000 b963 	b.w	bb128 <_ZNKSt9type_infoeqERKS_>
   bae62:	bf00      	nop
   bae64:	000be7ec 	.word	0x000be7ec

000bae68 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   bae68:	b10a      	cbz	r2, bae6e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   bae6a:	f000 bfd3 	b.w	bbe14 <memcpy>
   bae6e:	4770      	bx	lr

000bae70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   bae70:	b508      	push	{r3, lr}
   bae72:	680b      	ldr	r3, [r1, #0]
   bae74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   bae78:	d302      	bcc.n	bae80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   bae7a:	480d      	ldr	r0, [pc, #52]	; (baeb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   bae7c:	f7ff ffe8 	bl	bae50 <_ZSt20__throw_length_errorPKc>
   bae80:	4293      	cmp	r3, r2
   bae82:	d90b      	bls.n	bae9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   bae84:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   bae88:	ea4f 0042 	mov.w	r0, r2, lsl #1
   bae8c:	d206      	bcs.n	bae9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   bae8e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   bae92:	bf2a      	itet	cs
   bae94:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   bae98:	6008      	strcc	r0, [r1, #0]
   bae9a:	600b      	strcs	r3, [r1, #0]
   bae9c:	6808      	ldr	r0, [r1, #0]
   bae9e:	3001      	adds	r0, #1
   baea0:	d501      	bpl.n	baea6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   baea2:	f7ff ffcf 	bl	bae44 <_ZSt17__throw_bad_allocv>
   baea6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   baeaa:	f7f9 b8f4 	b.w	b4096 <_Znwj>
   baeae:	bf00      	nop
   baeb0:	000be7f4 	.word	0x000be7f4

000baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   baeb4:	f850 3b08 	ldr.w	r3, [r0], #8
   baeb8:	4283      	cmp	r3, r0
   baeba:	d002      	beq.n	baec2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   baebc:	4618      	mov	r0, r3
   baebe:	f7f9 b8ee 	b.w	b409e <_ZdlPv>
   baec2:	4770      	bx	lr

000baec4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   baec4:	2a01      	cmp	r2, #1
   baec6:	b410      	push	{r4}
   baec8:	d104      	bne.n	baed4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   baeca:	780a      	ldrb	r2, [r1, #0]
   baecc:	f85d 4b04 	ldr.w	r4, [sp], #4
   baed0:	7002      	strb	r2, [r0, #0]
   baed2:	4770      	bx	lr
   baed4:	f85d 4b04 	ldr.w	r4, [sp], #4
   baed8:	f7ff bfc6 	b.w	bae68 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000baedc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
   baedc:	b508      	push	{r3, lr}
   baede:	1a52      	subs	r2, r2, r1
   baee0:	f7ff fff0 	bl	baec4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   baee4:	bd08      	pop	{r3, pc}

000baee6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   baee6:	b508      	push	{r3, lr}
   baee8:	1a52      	subs	r2, r2, r1
   baeea:	f7ff ffeb 	bl	baec4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   baeee:	bd08      	pop	{r3, pc}

000baef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
   baef0:	4288      	cmp	r0, r1
   baef2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   baef4:	4604      	mov	r4, r0
   baef6:	460e      	mov	r6, r1
   baef8:	d01e      	beq.n	baf38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
   baefa:	4603      	mov	r3, r0
   baefc:	684d      	ldr	r5, [r1, #4]
   baefe:	f853 2b08 	ldr.w	r2, [r3], #8
   baf02:	429a      	cmp	r2, r3
   baf04:	bf14      	ite	ne
   baf06:	6882      	ldrne	r2, [r0, #8]
   baf08:	220f      	moveq	r2, #15
   baf0a:	42aa      	cmp	r2, r5
   baf0c:	d20a      	bcs.n	baf24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
   baf0e:	a901      	add	r1, sp, #4
   baf10:	9501      	str	r5, [sp, #4]
   baf12:	f7ff ffad 	bl	bae70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   baf16:	4607      	mov	r7, r0
   baf18:	4620      	mov	r0, r4
   baf1a:	f7ff ffcb 	bl	baeb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   baf1e:	9b01      	ldr	r3, [sp, #4]
   baf20:	6027      	str	r7, [r4, #0]
   baf22:	60a3      	str	r3, [r4, #8]
   baf24:	b125      	cbz	r5, baf30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
   baf26:	6831      	ldr	r1, [r6, #0]
   baf28:	6820      	ldr	r0, [r4, #0]
   baf2a:	462a      	mov	r2, r5
   baf2c:	f7ff ffca 	bl	baec4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   baf30:	6823      	ldr	r3, [r4, #0]
   baf32:	6065      	str	r5, [r4, #4]
   baf34:	2200      	movs	r2, #0
   baf36:	555a      	strb	r2, [r3, r5]
   baf38:	b003      	add	sp, #12
   baf3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000baf3c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   baf3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   baf3e:	2400      	movs	r4, #0
   baf40:	2310      	movs	r3, #16
   baf42:	e9cd 3402 	strd	r3, r4, [sp, #8]
   baf46:	6803      	ldr	r3, [r0, #0]
   baf48:	4615      	mov	r5, r2
   baf4a:	699e      	ldr	r6, [r3, #24]
   baf4c:	6812      	ldr	r2, [r2, #0]
   baf4e:	466b      	mov	r3, sp
   baf50:	e9cd 4400 	strd	r4, r4, [sp]
   baf54:	47b0      	blx	r6
   baf56:	f89d 3004 	ldrb.w	r3, [sp, #4]
   baf5a:	f003 0306 	and.w	r3, r3, #6
   baf5e:	2b06      	cmp	r3, #6
   baf60:	bf03      	ittte	eq
   baf62:	9b00      	ldreq	r3, [sp, #0]
   baf64:	602b      	streq	r3, [r5, #0]
   baf66:	2001      	moveq	r0, #1
   baf68:	4620      	movne	r0, r4
   baf6a:	b004      	add	sp, #16
   baf6c:	bd70      	pop	{r4, r5, r6, pc}

000baf6e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   baf6e:	9800      	ldr	r0, [sp, #0]
   baf70:	4290      	cmp	r0, r2
   baf72:	bf14      	ite	ne
   baf74:	2001      	movne	r0, #1
   baf76:	2006      	moveq	r0, #6
   baf78:	4770      	bx	lr
	...

000baf7c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   baf7c:	b510      	push	{r4, lr}
   baf7e:	4b03      	ldr	r3, [pc, #12]	; (baf8c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   baf80:	6003      	str	r3, [r0, #0]
   baf82:	4604      	mov	r4, r0
   baf84:	f000 f8cd 	bl	bb122 <_ZNSt9type_infoD1Ev>
   baf88:	4620      	mov	r0, r4
   baf8a:	bd10      	pop	{r4, pc}
   baf8c:	000be844 	.word	0x000be844

000baf90 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   baf90:	b510      	push	{r4, lr}
   baf92:	4604      	mov	r4, r0
   baf94:	f7ff fff2 	bl	baf7c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   baf98:	4620      	mov	r0, r4
   baf9a:	2108      	movs	r1, #8
   baf9c:	f7f9 f881 	bl	b40a2 <_ZdlPvj>
   bafa0:	4620      	mov	r0, r4
   bafa2:	bd10      	pop	{r4, pc}

000bafa4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   bafa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bafa8:	461f      	mov	r7, r3
   bafaa:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   bafae:	f8dd 8018 	ldr.w	r8, [sp, #24]
   bafb2:	4598      	cmp	r8, r3
   bafb4:	4606      	mov	r6, r0
   bafb6:	4615      	mov	r5, r2
   bafb8:	d107      	bne.n	bafca <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bafba:	9907      	ldr	r1, [sp, #28]
   bafbc:	f000 f8b4 	bl	bb128 <_ZNKSt9type_infoeqERKS_>
   bafc0:	b118      	cbz	r0, bafca <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bafc2:	7165      	strb	r5, [r4, #5]
   bafc4:	2000      	movs	r0, #0
   bafc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bafca:	4639      	mov	r1, r7
   bafcc:	4630      	mov	r0, r6
   bafce:	f000 f8ab 	bl	bb128 <_ZNKSt9type_infoeqERKS_>
   bafd2:	2800      	cmp	r0, #0
   bafd4:	d0f6      	beq.n	bafc4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   bafd6:	2301      	movs	r3, #1
   bafd8:	f8c4 8000 	str.w	r8, [r4]
   bafdc:	7125      	strb	r5, [r4, #4]
   bafde:	71a3      	strb	r3, [r4, #6]
   bafe0:	e7f0      	b.n	bafc4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000bafe2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   bafe2:	b538      	push	{r3, r4, r5, lr}
   bafe4:	4615      	mov	r5, r2
   bafe6:	461c      	mov	r4, r3
   bafe8:	f000 f89e 	bl	bb128 <_ZNKSt9type_infoeqERKS_>
   bafec:	b120      	cbz	r0, baff8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   bafee:	2308      	movs	r3, #8
   baff0:	60e3      	str	r3, [r4, #12]
   baff2:	2306      	movs	r3, #6
   baff4:	6025      	str	r5, [r4, #0]
   baff6:	7123      	strb	r3, [r4, #4]
   baff8:	bd38      	pop	{r3, r4, r5, pc}

000baffa <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   baffa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   baffc:	4605      	mov	r5, r0
   baffe:	460c      	mov	r4, r1
   bb000:	9201      	str	r2, [sp, #4]
   bb002:	461e      	mov	r6, r3
   bb004:	f000 f890 	bl	bb128 <_ZNKSt9type_infoeqERKS_>
   bb008:	b950      	cbnz	r0, bb020 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bb00a:	2e03      	cmp	r6, #3
   bb00c:	d808      	bhi.n	bb020 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bb00e:	6823      	ldr	r3, [r4, #0]
   bb010:	9a01      	ldr	r2, [sp, #4]
   bb012:	695b      	ldr	r3, [r3, #20]
   bb014:	4629      	mov	r1, r5
   bb016:	4620      	mov	r0, r4
   bb018:	b002      	add	sp, #8
   bb01a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb01e:	4718      	bx	r3
   bb020:	b002      	add	sp, #8
   bb022:	bd70      	pop	{r4, r5, r6, pc}

000bb024 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   bb024:	b510      	push	{r4, lr}
   bb026:	4b03      	ldr	r3, [pc, #12]	; (bb034 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   bb028:	6003      	str	r3, [r0, #0]
   bb02a:	4604      	mov	r4, r0
   bb02c:	f7ff ffa6 	bl	baf7c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bb030:	4620      	mov	r0, r4
   bb032:	bd10      	pop	{r4, pc}
   bb034:	000be8a4 	.word	0x000be8a4

000bb038 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   bb038:	b510      	push	{r4, lr}
   bb03a:	4604      	mov	r4, r0
   bb03c:	f7ff fff2 	bl	bb024 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   bb040:	4620      	mov	r0, r4
   bb042:	210c      	movs	r1, #12
   bb044:	f7f9 f82d 	bl	b40a2 <_ZdlPvj>
   bb048:	4620      	mov	r0, r4
   bb04a:	bd10      	pop	{r4, pc}

000bb04c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   bb04c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bb04e:	9f08      	ldr	r7, [sp, #32]
   bb050:	4297      	cmp	r7, r2
   bb052:	4605      	mov	r5, r0
   bb054:	460e      	mov	r6, r1
   bb056:	4614      	mov	r4, r2
   bb058:	d00a      	beq.n	bb070 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   bb05a:	68a8      	ldr	r0, [r5, #8]
   bb05c:	6802      	ldr	r2, [r0, #0]
   bb05e:	9708      	str	r7, [sp, #32]
   bb060:	6a15      	ldr	r5, [r2, #32]
   bb062:	4631      	mov	r1, r6
   bb064:	4622      	mov	r2, r4
   bb066:	46ac      	mov	ip, r5
   bb068:	b003      	add	sp, #12
   bb06a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bb06e:	4760      	bx	ip
   bb070:	4619      	mov	r1, r3
   bb072:	9301      	str	r3, [sp, #4]
   bb074:	f000 f858 	bl	bb128 <_ZNKSt9type_infoeqERKS_>
   bb078:	9b01      	ldr	r3, [sp, #4]
   bb07a:	2800      	cmp	r0, #0
   bb07c:	d0ed      	beq.n	bb05a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   bb07e:	2006      	movs	r0, #6
   bb080:	b003      	add	sp, #12
   bb082:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bb084 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   bb084:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb088:	460d      	mov	r5, r1
   bb08a:	4619      	mov	r1, r3
   bb08c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   bb090:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   bb094:	4681      	mov	r9, r0
   bb096:	4617      	mov	r7, r2
   bb098:	4698      	mov	r8, r3
   bb09a:	f000 f845 	bl	bb128 <_ZNKSt9type_infoeqERKS_>
   bb09e:	b190      	cbz	r0, bb0c6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   bb0a0:	2d00      	cmp	r5, #0
   bb0a2:	6034      	str	r4, [r6, #0]
   bb0a4:	7137      	strb	r7, [r6, #4]
   bb0a6:	db09      	blt.n	bb0bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   bb0a8:	1961      	adds	r1, r4, r5
   bb0aa:	458a      	cmp	sl, r1
   bb0ac:	bf0c      	ite	eq
   bb0ae:	2106      	moveq	r1, #6
   bb0b0:	2101      	movne	r1, #1
   bb0b2:	71b1      	strb	r1, [r6, #6]
   bb0b4:	2000      	movs	r0, #0
   bb0b6:	b001      	add	sp, #4
   bb0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb0bc:	3502      	adds	r5, #2
   bb0be:	d1f9      	bne.n	bb0b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb0c0:	2301      	movs	r3, #1
   bb0c2:	71b3      	strb	r3, [r6, #6]
   bb0c4:	e7f6      	b.n	bb0b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb0c6:	4554      	cmp	r4, sl
   bb0c8:	d106      	bne.n	bb0d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bb0ca:	4659      	mov	r1, fp
   bb0cc:	4648      	mov	r0, r9
   bb0ce:	f000 f82b 	bl	bb128 <_ZNKSt9type_infoeqERKS_>
   bb0d2:	b108      	cbz	r0, bb0d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bb0d4:	7177      	strb	r7, [r6, #5]
   bb0d6:	e7ed      	b.n	bb0b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb0d8:	f8d9 0008 	ldr.w	r0, [r9, #8]
   bb0dc:	6803      	ldr	r3, [r0, #0]
   bb0de:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   bb0e2:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   bb0e6:	69dc      	ldr	r4, [r3, #28]
   bb0e8:	463a      	mov	r2, r7
   bb0ea:	4643      	mov	r3, r8
   bb0ec:	4629      	mov	r1, r5
   bb0ee:	46a4      	mov	ip, r4
   bb0f0:	b001      	add	sp, #4
   bb0f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb0f6:	4760      	bx	ip

000bb0f8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   bb0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb0fc:	4607      	mov	r7, r0
   bb0fe:	460c      	mov	r4, r1
   bb100:	4615      	mov	r5, r2
   bb102:	461e      	mov	r6, r3
   bb104:	f7ff ff6d 	bl	bafe2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   bb108:	b948      	cbnz	r0, bb11e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   bb10a:	68b8      	ldr	r0, [r7, #8]
   bb10c:	6803      	ldr	r3, [r0, #0]
   bb10e:	699f      	ldr	r7, [r3, #24]
   bb110:	462a      	mov	r2, r5
   bb112:	4633      	mov	r3, r6
   bb114:	4621      	mov	r1, r4
   bb116:	46bc      	mov	ip, r7
   bb118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bb11c:	4760      	bx	ip
   bb11e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb122 <_ZNSt9type_infoD1Ev>:
   bb122:	4770      	bx	lr

000bb124 <_ZNKSt9type_info14__is_pointer_pEv>:
   bb124:	2000      	movs	r0, #0
   bb126:	4770      	bx	lr

000bb128 <_ZNKSt9type_infoeqERKS_>:
   bb128:	4281      	cmp	r1, r0
   bb12a:	b508      	push	{r3, lr}
   bb12c:	d00e      	beq.n	bb14c <_ZNKSt9type_infoeqERKS_+0x24>
   bb12e:	6840      	ldr	r0, [r0, #4]
   bb130:	7803      	ldrb	r3, [r0, #0]
   bb132:	2b2a      	cmp	r3, #42	; 0x2a
   bb134:	d00c      	beq.n	bb150 <_ZNKSt9type_infoeqERKS_+0x28>
   bb136:	6849      	ldr	r1, [r1, #4]
   bb138:	780b      	ldrb	r3, [r1, #0]
   bb13a:	2b2a      	cmp	r3, #42	; 0x2a
   bb13c:	bf08      	it	eq
   bb13e:	3101      	addeq	r1, #1
   bb140:	f000 fec6 	bl	bbed0 <strcmp>
   bb144:	fab0 f080 	clz	r0, r0
   bb148:	0940      	lsrs	r0, r0, #5
   bb14a:	bd08      	pop	{r3, pc}
   bb14c:	2001      	movs	r0, #1
   bb14e:	e7fc      	b.n	bb14a <_ZNKSt9type_infoeqERKS_+0x22>
   bb150:	2000      	movs	r0, #0
   bb152:	e7fa      	b.n	bb14a <_ZNKSt9type_infoeqERKS_+0x22>

000bb154 <floorf>:
   bb154:	ee10 2a10 	vmov	r2, s0
   bb158:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   bb15c:	3b7f      	subs	r3, #127	; 0x7f
   bb15e:	2b16      	cmp	r3, #22
   bb160:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   bb164:	dc28      	bgt.n	bb1b8 <floorf+0x64>
   bb166:	2b00      	cmp	r3, #0
   bb168:	db18      	blt.n	bb19c <floorf+0x48>
   bb16a:	491a      	ldr	r1, [pc, #104]	; (bb1d4 <floorf+0x80>)
   bb16c:	4119      	asrs	r1, r3
   bb16e:	420a      	tst	r2, r1
   bb170:	d021      	beq.n	bb1b6 <floorf+0x62>
   bb172:	eddf 7a19 	vldr	s15, [pc, #100]	; bb1d8 <floorf+0x84>
   bb176:	ee70 7a27 	vadd.f32	s15, s0, s15
   bb17a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   bb17e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb182:	dd18      	ble.n	bb1b6 <floorf+0x62>
   bb184:	2a00      	cmp	r2, #0
   bb186:	da04      	bge.n	bb192 <floorf+0x3e>
   bb188:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   bb18c:	fa40 f303 	asr.w	r3, r0, r3
   bb190:	441a      	add	r2, r3
   bb192:	ea22 0301 	bic.w	r3, r2, r1
   bb196:	ee00 3a10 	vmov	s0, r3
   bb19a:	4770      	bx	lr
   bb19c:	eddf 7a0e 	vldr	s15, [pc, #56]	; bb1d8 <floorf+0x84>
   bb1a0:	ee70 7a27 	vadd.f32	s15, s0, s15
   bb1a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   bb1a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb1ac:	dd03      	ble.n	bb1b6 <floorf+0x62>
   bb1ae:	2a00      	cmp	r2, #0
   bb1b0:	db08      	blt.n	bb1c4 <floorf+0x70>
   bb1b2:	ed9f 0a0a 	vldr	s0, [pc, #40]	; bb1dc <floorf+0x88>
   bb1b6:	4770      	bx	lr
   bb1b8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   bb1bc:	d3fb      	bcc.n	bb1b6 <floorf+0x62>
   bb1be:	ee30 0a00 	vadd.f32	s0, s0, s0
   bb1c2:	4770      	bx	lr
   bb1c4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   bb1c8:	2900      	cmp	r1, #0
   bb1ca:	bf18      	it	ne
   bb1cc:	eeb0 0a67 	vmovne.f32	s0, s15
   bb1d0:	4770      	bx	lr
   bb1d2:	bf00      	nop
   bb1d4:	007fffff 	.word	0x007fffff
   bb1d8:	7149f2ca 	.word	0x7149f2ca
   bb1dc:	00000000 	.word	0x00000000

000bb1e0 <sqrt>:
   bb1e0:	b538      	push	{r3, r4, r5, lr}
   bb1e2:	ed2d 8b02 	vpush	{d8}
   bb1e6:	ec55 4b10 	vmov	r4, r5, d0
   bb1ea:	f000 f833 	bl	bb254 <__ieee754_sqrt>
   bb1ee:	4b18      	ldr	r3, [pc, #96]	; (bb250 <sqrt+0x70>)
   bb1f0:	eeb0 8a40 	vmov.f32	s16, s0
   bb1f4:	eef0 8a60 	vmov.f32	s17, s1
   bb1f8:	f993 3000 	ldrsb.w	r3, [r3]
   bb1fc:	3301      	adds	r3, #1
   bb1fe:	d00d      	beq.n	bb21c <sqrt+0x3c>
   bb200:	4622      	mov	r2, r4
   bb202:	462b      	mov	r3, r5
   bb204:	4620      	mov	r0, r4
   bb206:	4629      	mov	r1, r5
   bb208:	f000 fd46 	bl	bbc98 <__aeabi_dcmpun>
   bb20c:	b930      	cbnz	r0, bb21c <sqrt+0x3c>
   bb20e:	2200      	movs	r2, #0
   bb210:	2300      	movs	r3, #0
   bb212:	4620      	mov	r0, r4
   bb214:	4629      	mov	r1, r5
   bb216:	f000 fd17 	bl	bbc48 <__aeabi_dcmplt>
   bb21a:	b930      	cbnz	r0, bb22a <sqrt+0x4a>
   bb21c:	eeb0 0a48 	vmov.f32	s0, s16
   bb220:	eef0 0a68 	vmov.f32	s1, s17
   bb224:	ecbd 8b02 	vpop	{d8}
   bb228:	bd38      	pop	{r3, r4, r5, pc}
   bb22a:	f7fd fac5 	bl	b87b8 <__errno>
   bb22e:	2200      	movs	r2, #0
   bb230:	2300      	movs	r3, #0
   bb232:	2121      	movs	r1, #33	; 0x21
   bb234:	6001      	str	r1, [r0, #0]
   bb236:	4610      	mov	r0, r2
   bb238:	4619      	mov	r1, r3
   bb23a:	f000 fbbd 	bl	bb9b8 <__aeabi_ddiv>
   bb23e:	ec41 0b18 	vmov	d8, r0, r1
   bb242:	eeb0 0a48 	vmov.f32	s0, s16
   bb246:	eef0 0a68 	vmov.f32	s1, s17
   bb24a:	ecbd 8b02 	vpop	{d8}
   bb24e:	bd38      	pop	{r3, r4, r5, pc}
   bb250:	20035134 	.word	0x20035134

000bb254 <__ieee754_sqrt>:
   bb254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb258:	4a63      	ldr	r2, [pc, #396]	; (bb3e8 <__ieee754_sqrt+0x194>)
   bb25a:	ec55 4b10 	vmov	r4, r5, d0
   bb25e:	43aa      	bics	r2, r5
   bb260:	f000 809f 	beq.w	bb3a2 <__ieee754_sqrt+0x14e>
   bb264:	2d00      	cmp	r5, #0
   bb266:	ee10 ca10 	vmov	ip, s0
   bb26a:	462b      	mov	r3, r5
   bb26c:	dd54      	ble.n	bb318 <__ieee754_sqrt+0xc4>
   bb26e:	1529      	asrs	r1, r5, #20
   bb270:	d063      	beq.n	bb33a <__ieee754_sqrt+0xe6>
   bb272:	f3c3 0313 	ubfx	r3, r3, #0, #20
   bb276:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   bb27a:	07c9      	lsls	r1, r1, #31
   bb27c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bb280:	d404      	bmi.n	bb28c <__ieee754_sqrt+0x38>
   bb282:	005b      	lsls	r3, r3, #1
   bb284:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   bb288:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bb28c:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   bb290:	2600      	movs	r6, #0
   bb292:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   bb296:	107f      	asrs	r7, r7, #1
   bb298:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bb29c:	f04f 0e16 	mov.w	lr, #22
   bb2a0:	4634      	mov	r4, r6
   bb2a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   bb2a6:	18a1      	adds	r1, r4, r2
   bb2a8:	4299      	cmp	r1, r3
   bb2aa:	dc02      	bgt.n	bb2b2 <__ieee754_sqrt+0x5e>
   bb2ac:	1a5b      	subs	r3, r3, r1
   bb2ae:	188c      	adds	r4, r1, r2
   bb2b0:	4416      	add	r6, r2
   bb2b2:	005b      	lsls	r3, r3, #1
   bb2b4:	f1be 0e01 	subs.w	lr, lr, #1
   bb2b8:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   bb2bc:	ea4f 0252 	mov.w	r2, r2, lsr #1
   bb2c0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bb2c4:	d1ef      	bne.n	bb2a6 <__ieee754_sqrt+0x52>
   bb2c6:	4675      	mov	r5, lr
   bb2c8:	2020      	movs	r0, #32
   bb2ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   bb2ce:	e00a      	b.n	bb2e6 <__ieee754_sqrt+0x92>
   bb2d0:	d044      	beq.n	bb35c <__ieee754_sqrt+0x108>
   bb2d2:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   bb2d6:	3801      	subs	r0, #1
   bb2d8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   bb2dc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bb2e0:	ea4f 0252 	mov.w	r2, r2, lsr #1
   bb2e4:	d043      	beq.n	bb36e <__ieee754_sqrt+0x11a>
   bb2e6:	42a3      	cmp	r3, r4
   bb2e8:	eb02 010e 	add.w	r1, r2, lr
   bb2ec:	ddf0      	ble.n	bb2d0 <__ieee754_sqrt+0x7c>
   bb2ee:	2900      	cmp	r1, #0
   bb2f0:	eb01 0e02 	add.w	lr, r1, r2
   bb2f4:	db0a      	blt.n	bb30c <__ieee754_sqrt+0xb8>
   bb2f6:	46a0      	mov	r8, r4
   bb2f8:	1b1b      	subs	r3, r3, r4
   bb2fa:	4561      	cmp	r1, ip
   bb2fc:	bf88      	it	hi
   bb2fe:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   bb302:	ebac 0c01 	sub.w	ip, ip, r1
   bb306:	4415      	add	r5, r2
   bb308:	4644      	mov	r4, r8
   bb30a:	e7e2      	b.n	bb2d2 <__ieee754_sqrt+0x7e>
   bb30c:	f1be 0f00 	cmp.w	lr, #0
   bb310:	dbf1      	blt.n	bb2f6 <__ieee754_sqrt+0xa2>
   bb312:	f104 0801 	add.w	r8, r4, #1
   bb316:	e7ef      	b.n	bb2f8 <__ieee754_sqrt+0xa4>
   bb318:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   bb31c:	4322      	orrs	r2, r4
   bb31e:	d038      	beq.n	bb392 <__ieee754_sqrt+0x13e>
   bb320:	2d00      	cmp	r5, #0
   bb322:	d14e      	bne.n	bb3c2 <__ieee754_sqrt+0x16e>
   bb324:	4629      	mov	r1, r5
   bb326:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   bb32a:	3915      	subs	r1, #21
   bb32c:	4613      	mov	r3, r2
   bb32e:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   bb332:	2a00      	cmp	r2, #0
   bb334:	d0f7      	beq.n	bb326 <__ieee754_sqrt+0xd2>
   bb336:	02d6      	lsls	r6, r2, #11
   bb338:	d450      	bmi.n	bb3dc <__ieee754_sqrt+0x188>
   bb33a:	2000      	movs	r0, #0
   bb33c:	005b      	lsls	r3, r3, #1
   bb33e:	02dd      	lsls	r5, r3, #11
   bb340:	4604      	mov	r4, r0
   bb342:	f100 0001 	add.w	r0, r0, #1
   bb346:	d5f9      	bpl.n	bb33c <__ieee754_sqrt+0xe8>
   bb348:	461a      	mov	r2, r3
   bb34a:	4663      	mov	r3, ip
   bb34c:	fa0c fc00 	lsl.w	ip, ip, r0
   bb350:	f1c0 0020 	rsb	r0, r0, #32
   bb354:	40c3      	lsrs	r3, r0
   bb356:	1b09      	subs	r1, r1, r4
   bb358:	4313      	orrs	r3, r2
   bb35a:	e78a      	b.n	bb272 <__ieee754_sqrt+0x1e>
   bb35c:	4561      	cmp	r1, ip
   bb35e:	d8b8      	bhi.n	bb2d2 <__ieee754_sqrt+0x7e>
   bb360:	2900      	cmp	r1, #0
   bb362:	eb01 0e02 	add.w	lr, r1, r2
   bb366:	dbd1      	blt.n	bb30c <__ieee754_sqrt+0xb8>
   bb368:	4698      	mov	r8, r3
   bb36a:	2300      	movs	r3, #0
   bb36c:	e7c9      	b.n	bb302 <__ieee754_sqrt+0xae>
   bb36e:	ea53 030c 	orrs.w	r3, r3, ip
   bb372:	d110      	bne.n	bb396 <__ieee754_sqrt+0x142>
   bb374:	0868      	lsrs	r0, r5, #1
   bb376:	1071      	asrs	r1, r6, #1
   bb378:	07f3      	lsls	r3, r6, #31
   bb37a:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   bb37e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   bb382:	bf48      	it	mi
   bb384:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   bb388:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   bb38c:	4602      	mov	r2, r0
   bb38e:	ec43 2b10 	vmov	d0, r2, r3
   bb392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb396:	1c6a      	adds	r2, r5, #1
   bb398:	bf16      	itet	ne
   bb39a:	1c68      	addne	r0, r5, #1
   bb39c:	3601      	addeq	r6, #1
   bb39e:	0840      	lsrne	r0, r0, #1
   bb3a0:	e7e9      	b.n	bb376 <__ieee754_sqrt+0x122>
   bb3a2:	ee10 2a10 	vmov	r2, s0
   bb3a6:	ee10 0a10 	vmov	r0, s0
   bb3aa:	462b      	mov	r3, r5
   bb3ac:	4629      	mov	r1, r5
   bb3ae:	f000 f9d9 	bl	bb764 <__aeabi_dmul>
   bb3b2:	4622      	mov	r2, r4
   bb3b4:	462b      	mov	r3, r5
   bb3b6:	f000 f81f 	bl	bb3f8 <__adddf3>
   bb3ba:	ec41 0b10 	vmov	d0, r0, r1
   bb3be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb3c2:	ee10 2a10 	vmov	r2, s0
   bb3c6:	4620      	mov	r0, r4
   bb3c8:	4629      	mov	r1, r5
   bb3ca:	f000 f813 	bl	bb3f4 <__aeabi_dsub>
   bb3ce:	4602      	mov	r2, r0
   bb3d0:	460b      	mov	r3, r1
   bb3d2:	f000 faf1 	bl	bb9b8 <__aeabi_ddiv>
   bb3d6:	ec41 0b10 	vmov	d0, r0, r1
   bb3da:	e7da      	b.n	bb392 <__ieee754_sqrt+0x13e>
   bb3dc:	4663      	mov	r3, ip
   bb3de:	2020      	movs	r0, #32
   bb3e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   bb3e4:	e7b6      	b.n	bb354 <__ieee754_sqrt+0x100>
   bb3e6:	bf00      	nop
   bb3e8:	7ff00000 	.word	0x7ff00000

000bb3ec <__aeabi_drsub>:
   bb3ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bb3f0:	e002      	b.n	bb3f8 <__adddf3>
   bb3f2:	bf00      	nop

000bb3f4 <__aeabi_dsub>:
   bb3f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bb3f8 <__adddf3>:
   bb3f8:	b530      	push	{r4, r5, lr}
   bb3fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bb3fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bb402:	ea94 0f05 	teq	r4, r5
   bb406:	bf08      	it	eq
   bb408:	ea90 0f02 	teqeq	r0, r2
   bb40c:	bf1f      	itttt	ne
   bb40e:	ea54 0c00 	orrsne.w	ip, r4, r0
   bb412:	ea55 0c02 	orrsne.w	ip, r5, r2
   bb416:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bb41a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bb41e:	f000 80e2 	beq.w	bb5e6 <__adddf3+0x1ee>
   bb422:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bb426:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bb42a:	bfb8      	it	lt
   bb42c:	426d      	neglt	r5, r5
   bb42e:	dd0c      	ble.n	bb44a <__adddf3+0x52>
   bb430:	442c      	add	r4, r5
   bb432:	ea80 0202 	eor.w	r2, r0, r2
   bb436:	ea81 0303 	eor.w	r3, r1, r3
   bb43a:	ea82 0000 	eor.w	r0, r2, r0
   bb43e:	ea83 0101 	eor.w	r1, r3, r1
   bb442:	ea80 0202 	eor.w	r2, r0, r2
   bb446:	ea81 0303 	eor.w	r3, r1, r3
   bb44a:	2d36      	cmp	r5, #54	; 0x36
   bb44c:	bf88      	it	hi
   bb44e:	bd30      	pophi	{r4, r5, pc}
   bb450:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bb454:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bb458:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bb45c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bb460:	d002      	beq.n	bb468 <__adddf3+0x70>
   bb462:	4240      	negs	r0, r0
   bb464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb468:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bb46c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bb470:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bb474:	d002      	beq.n	bb47c <__adddf3+0x84>
   bb476:	4252      	negs	r2, r2
   bb478:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bb47c:	ea94 0f05 	teq	r4, r5
   bb480:	f000 80a7 	beq.w	bb5d2 <__adddf3+0x1da>
   bb484:	f1a4 0401 	sub.w	r4, r4, #1
   bb488:	f1d5 0e20 	rsbs	lr, r5, #32
   bb48c:	db0d      	blt.n	bb4aa <__adddf3+0xb2>
   bb48e:	fa02 fc0e 	lsl.w	ip, r2, lr
   bb492:	fa22 f205 	lsr.w	r2, r2, r5
   bb496:	1880      	adds	r0, r0, r2
   bb498:	f141 0100 	adc.w	r1, r1, #0
   bb49c:	fa03 f20e 	lsl.w	r2, r3, lr
   bb4a0:	1880      	adds	r0, r0, r2
   bb4a2:	fa43 f305 	asr.w	r3, r3, r5
   bb4a6:	4159      	adcs	r1, r3
   bb4a8:	e00e      	b.n	bb4c8 <__adddf3+0xd0>
   bb4aa:	f1a5 0520 	sub.w	r5, r5, #32
   bb4ae:	f10e 0e20 	add.w	lr, lr, #32
   bb4b2:	2a01      	cmp	r2, #1
   bb4b4:	fa03 fc0e 	lsl.w	ip, r3, lr
   bb4b8:	bf28      	it	cs
   bb4ba:	f04c 0c02 	orrcs.w	ip, ip, #2
   bb4be:	fa43 f305 	asr.w	r3, r3, r5
   bb4c2:	18c0      	adds	r0, r0, r3
   bb4c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bb4c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb4cc:	d507      	bpl.n	bb4de <__adddf3+0xe6>
   bb4ce:	f04f 0e00 	mov.w	lr, #0
   bb4d2:	f1dc 0c00 	rsbs	ip, ip, #0
   bb4d6:	eb7e 0000 	sbcs.w	r0, lr, r0
   bb4da:	eb6e 0101 	sbc.w	r1, lr, r1
   bb4de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bb4e2:	d31b      	bcc.n	bb51c <__adddf3+0x124>
   bb4e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bb4e8:	d30c      	bcc.n	bb504 <__adddf3+0x10c>
   bb4ea:	0849      	lsrs	r1, r1, #1
   bb4ec:	ea5f 0030 	movs.w	r0, r0, rrx
   bb4f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bb4f4:	f104 0401 	add.w	r4, r4, #1
   bb4f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bb4fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bb500:	f080 809a 	bcs.w	bb638 <__adddf3+0x240>
   bb504:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bb508:	bf08      	it	eq
   bb50a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bb50e:	f150 0000 	adcs.w	r0, r0, #0
   bb512:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb516:	ea41 0105 	orr.w	r1, r1, r5
   bb51a:	bd30      	pop	{r4, r5, pc}
   bb51c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bb520:	4140      	adcs	r0, r0
   bb522:	eb41 0101 	adc.w	r1, r1, r1
   bb526:	3c01      	subs	r4, #1
   bb528:	bf28      	it	cs
   bb52a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bb52e:	d2e9      	bcs.n	bb504 <__adddf3+0x10c>
   bb530:	f091 0f00 	teq	r1, #0
   bb534:	bf04      	itt	eq
   bb536:	4601      	moveq	r1, r0
   bb538:	2000      	moveq	r0, #0
   bb53a:	fab1 f381 	clz	r3, r1
   bb53e:	bf08      	it	eq
   bb540:	3320      	addeq	r3, #32
   bb542:	f1a3 030b 	sub.w	r3, r3, #11
   bb546:	f1b3 0220 	subs.w	r2, r3, #32
   bb54a:	da0c      	bge.n	bb566 <__adddf3+0x16e>
   bb54c:	320c      	adds	r2, #12
   bb54e:	dd08      	ble.n	bb562 <__adddf3+0x16a>
   bb550:	f102 0c14 	add.w	ip, r2, #20
   bb554:	f1c2 020c 	rsb	r2, r2, #12
   bb558:	fa01 f00c 	lsl.w	r0, r1, ip
   bb55c:	fa21 f102 	lsr.w	r1, r1, r2
   bb560:	e00c      	b.n	bb57c <__adddf3+0x184>
   bb562:	f102 0214 	add.w	r2, r2, #20
   bb566:	bfd8      	it	le
   bb568:	f1c2 0c20 	rsble	ip, r2, #32
   bb56c:	fa01 f102 	lsl.w	r1, r1, r2
   bb570:	fa20 fc0c 	lsr.w	ip, r0, ip
   bb574:	bfdc      	itt	le
   bb576:	ea41 010c 	orrle.w	r1, r1, ip
   bb57a:	4090      	lslle	r0, r2
   bb57c:	1ae4      	subs	r4, r4, r3
   bb57e:	bfa2      	ittt	ge
   bb580:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bb584:	4329      	orrge	r1, r5
   bb586:	bd30      	popge	{r4, r5, pc}
   bb588:	ea6f 0404 	mvn.w	r4, r4
   bb58c:	3c1f      	subs	r4, #31
   bb58e:	da1c      	bge.n	bb5ca <__adddf3+0x1d2>
   bb590:	340c      	adds	r4, #12
   bb592:	dc0e      	bgt.n	bb5b2 <__adddf3+0x1ba>
   bb594:	f104 0414 	add.w	r4, r4, #20
   bb598:	f1c4 0220 	rsb	r2, r4, #32
   bb59c:	fa20 f004 	lsr.w	r0, r0, r4
   bb5a0:	fa01 f302 	lsl.w	r3, r1, r2
   bb5a4:	ea40 0003 	orr.w	r0, r0, r3
   bb5a8:	fa21 f304 	lsr.w	r3, r1, r4
   bb5ac:	ea45 0103 	orr.w	r1, r5, r3
   bb5b0:	bd30      	pop	{r4, r5, pc}
   bb5b2:	f1c4 040c 	rsb	r4, r4, #12
   bb5b6:	f1c4 0220 	rsb	r2, r4, #32
   bb5ba:	fa20 f002 	lsr.w	r0, r0, r2
   bb5be:	fa01 f304 	lsl.w	r3, r1, r4
   bb5c2:	ea40 0003 	orr.w	r0, r0, r3
   bb5c6:	4629      	mov	r1, r5
   bb5c8:	bd30      	pop	{r4, r5, pc}
   bb5ca:	fa21 f004 	lsr.w	r0, r1, r4
   bb5ce:	4629      	mov	r1, r5
   bb5d0:	bd30      	pop	{r4, r5, pc}
   bb5d2:	f094 0f00 	teq	r4, #0
   bb5d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bb5da:	bf06      	itte	eq
   bb5dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bb5e0:	3401      	addeq	r4, #1
   bb5e2:	3d01      	subne	r5, #1
   bb5e4:	e74e      	b.n	bb484 <__adddf3+0x8c>
   bb5e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb5ea:	bf18      	it	ne
   bb5ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bb5f0:	d029      	beq.n	bb646 <__adddf3+0x24e>
   bb5f2:	ea94 0f05 	teq	r4, r5
   bb5f6:	bf08      	it	eq
   bb5f8:	ea90 0f02 	teqeq	r0, r2
   bb5fc:	d005      	beq.n	bb60a <__adddf3+0x212>
   bb5fe:	ea54 0c00 	orrs.w	ip, r4, r0
   bb602:	bf04      	itt	eq
   bb604:	4619      	moveq	r1, r3
   bb606:	4610      	moveq	r0, r2
   bb608:	bd30      	pop	{r4, r5, pc}
   bb60a:	ea91 0f03 	teq	r1, r3
   bb60e:	bf1e      	ittt	ne
   bb610:	2100      	movne	r1, #0
   bb612:	2000      	movne	r0, #0
   bb614:	bd30      	popne	{r4, r5, pc}
   bb616:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bb61a:	d105      	bne.n	bb628 <__adddf3+0x230>
   bb61c:	0040      	lsls	r0, r0, #1
   bb61e:	4149      	adcs	r1, r1
   bb620:	bf28      	it	cs
   bb622:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bb626:	bd30      	pop	{r4, r5, pc}
   bb628:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bb62c:	bf3c      	itt	cc
   bb62e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bb632:	bd30      	popcc	{r4, r5, pc}
   bb634:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb638:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bb63c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bb640:	f04f 0000 	mov.w	r0, #0
   bb644:	bd30      	pop	{r4, r5, pc}
   bb646:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb64a:	bf1a      	itte	ne
   bb64c:	4619      	movne	r1, r3
   bb64e:	4610      	movne	r0, r2
   bb650:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bb654:	bf1c      	itt	ne
   bb656:	460b      	movne	r3, r1
   bb658:	4602      	movne	r2, r0
   bb65a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bb65e:	bf06      	itte	eq
   bb660:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bb664:	ea91 0f03 	teqeq	r1, r3
   bb668:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bb66c:	bd30      	pop	{r4, r5, pc}
   bb66e:	bf00      	nop

000bb670 <__aeabi_ui2d>:
   bb670:	f090 0f00 	teq	r0, #0
   bb674:	bf04      	itt	eq
   bb676:	2100      	moveq	r1, #0
   bb678:	4770      	bxeq	lr
   bb67a:	b530      	push	{r4, r5, lr}
   bb67c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb680:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb684:	f04f 0500 	mov.w	r5, #0
   bb688:	f04f 0100 	mov.w	r1, #0
   bb68c:	e750      	b.n	bb530 <__adddf3+0x138>
   bb68e:	bf00      	nop

000bb690 <__aeabi_i2d>:
   bb690:	f090 0f00 	teq	r0, #0
   bb694:	bf04      	itt	eq
   bb696:	2100      	moveq	r1, #0
   bb698:	4770      	bxeq	lr
   bb69a:	b530      	push	{r4, r5, lr}
   bb69c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb6a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb6a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bb6a8:	bf48      	it	mi
   bb6aa:	4240      	negmi	r0, r0
   bb6ac:	f04f 0100 	mov.w	r1, #0
   bb6b0:	e73e      	b.n	bb530 <__adddf3+0x138>
   bb6b2:	bf00      	nop

000bb6b4 <__aeabi_f2d>:
   bb6b4:	0042      	lsls	r2, r0, #1
   bb6b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bb6ba:	ea4f 0131 	mov.w	r1, r1, rrx
   bb6be:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bb6c2:	bf1f      	itttt	ne
   bb6c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bb6c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bb6cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bb6d0:	4770      	bxne	lr
   bb6d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bb6d6:	bf08      	it	eq
   bb6d8:	4770      	bxeq	lr
   bb6da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bb6de:	bf04      	itt	eq
   bb6e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bb6e4:	4770      	bxeq	lr
   bb6e6:	b530      	push	{r4, r5, lr}
   bb6e8:	f44f 7460 	mov.w	r4, #896	; 0x380
   bb6ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb6f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bb6f4:	e71c      	b.n	bb530 <__adddf3+0x138>
   bb6f6:	bf00      	nop

000bb6f8 <__aeabi_ul2d>:
   bb6f8:	ea50 0201 	orrs.w	r2, r0, r1
   bb6fc:	bf08      	it	eq
   bb6fe:	4770      	bxeq	lr
   bb700:	b530      	push	{r4, r5, lr}
   bb702:	f04f 0500 	mov.w	r5, #0
   bb706:	e00a      	b.n	bb71e <__aeabi_l2d+0x16>

000bb708 <__aeabi_l2d>:
   bb708:	ea50 0201 	orrs.w	r2, r0, r1
   bb70c:	bf08      	it	eq
   bb70e:	4770      	bxeq	lr
   bb710:	b530      	push	{r4, r5, lr}
   bb712:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bb716:	d502      	bpl.n	bb71e <__aeabi_l2d+0x16>
   bb718:	4240      	negs	r0, r0
   bb71a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb71e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb722:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb726:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bb72a:	f43f aed8 	beq.w	bb4de <__adddf3+0xe6>
   bb72e:	f04f 0203 	mov.w	r2, #3
   bb732:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bb736:	bf18      	it	ne
   bb738:	3203      	addne	r2, #3
   bb73a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bb73e:	bf18      	it	ne
   bb740:	3203      	addne	r2, #3
   bb742:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bb746:	f1c2 0320 	rsb	r3, r2, #32
   bb74a:	fa00 fc03 	lsl.w	ip, r0, r3
   bb74e:	fa20 f002 	lsr.w	r0, r0, r2
   bb752:	fa01 fe03 	lsl.w	lr, r1, r3
   bb756:	ea40 000e 	orr.w	r0, r0, lr
   bb75a:	fa21 f102 	lsr.w	r1, r1, r2
   bb75e:	4414      	add	r4, r2
   bb760:	e6bd      	b.n	bb4de <__adddf3+0xe6>
   bb762:	bf00      	nop

000bb764 <__aeabi_dmul>:
   bb764:	b570      	push	{r4, r5, r6, lr}
   bb766:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bb76a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bb76e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bb772:	bf1d      	ittte	ne
   bb774:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bb778:	ea94 0f0c 	teqne	r4, ip
   bb77c:	ea95 0f0c 	teqne	r5, ip
   bb780:	f000 f8de 	bleq	bb940 <__aeabi_dmul+0x1dc>
   bb784:	442c      	add	r4, r5
   bb786:	ea81 0603 	eor.w	r6, r1, r3
   bb78a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bb78e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bb792:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bb796:	bf18      	it	ne
   bb798:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bb79c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb7a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bb7a4:	d038      	beq.n	bb818 <__aeabi_dmul+0xb4>
   bb7a6:	fba0 ce02 	umull	ip, lr, r0, r2
   bb7aa:	f04f 0500 	mov.w	r5, #0
   bb7ae:	fbe1 e502 	umlal	lr, r5, r1, r2
   bb7b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bb7b6:	fbe0 e503 	umlal	lr, r5, r0, r3
   bb7ba:	f04f 0600 	mov.w	r6, #0
   bb7be:	fbe1 5603 	umlal	r5, r6, r1, r3
   bb7c2:	f09c 0f00 	teq	ip, #0
   bb7c6:	bf18      	it	ne
   bb7c8:	f04e 0e01 	orrne.w	lr, lr, #1
   bb7cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bb7d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bb7d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bb7d8:	d204      	bcs.n	bb7e4 <__aeabi_dmul+0x80>
   bb7da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bb7de:	416d      	adcs	r5, r5
   bb7e0:	eb46 0606 	adc.w	r6, r6, r6
   bb7e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bb7e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bb7ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bb7f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bb7f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bb7f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bb7fc:	bf88      	it	hi
   bb7fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bb802:	d81e      	bhi.n	bb842 <__aeabi_dmul+0xde>
   bb804:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bb808:	bf08      	it	eq
   bb80a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bb80e:	f150 0000 	adcs.w	r0, r0, #0
   bb812:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb816:	bd70      	pop	{r4, r5, r6, pc}
   bb818:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bb81c:	ea46 0101 	orr.w	r1, r6, r1
   bb820:	ea40 0002 	orr.w	r0, r0, r2
   bb824:	ea81 0103 	eor.w	r1, r1, r3
   bb828:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bb82c:	bfc2      	ittt	gt
   bb82e:	ebd4 050c 	rsbsgt	r5, r4, ip
   bb832:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bb836:	bd70      	popgt	{r4, r5, r6, pc}
   bb838:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb83c:	f04f 0e00 	mov.w	lr, #0
   bb840:	3c01      	subs	r4, #1
   bb842:	f300 80ab 	bgt.w	bb99c <__aeabi_dmul+0x238>
   bb846:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bb84a:	bfde      	ittt	le
   bb84c:	2000      	movle	r0, #0
   bb84e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bb852:	bd70      	pople	{r4, r5, r6, pc}
   bb854:	f1c4 0400 	rsb	r4, r4, #0
   bb858:	3c20      	subs	r4, #32
   bb85a:	da35      	bge.n	bb8c8 <__aeabi_dmul+0x164>
   bb85c:	340c      	adds	r4, #12
   bb85e:	dc1b      	bgt.n	bb898 <__aeabi_dmul+0x134>
   bb860:	f104 0414 	add.w	r4, r4, #20
   bb864:	f1c4 0520 	rsb	r5, r4, #32
   bb868:	fa00 f305 	lsl.w	r3, r0, r5
   bb86c:	fa20 f004 	lsr.w	r0, r0, r4
   bb870:	fa01 f205 	lsl.w	r2, r1, r5
   bb874:	ea40 0002 	orr.w	r0, r0, r2
   bb878:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bb87c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bb880:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bb884:	fa21 f604 	lsr.w	r6, r1, r4
   bb888:	eb42 0106 	adc.w	r1, r2, r6
   bb88c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb890:	bf08      	it	eq
   bb892:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb896:	bd70      	pop	{r4, r5, r6, pc}
   bb898:	f1c4 040c 	rsb	r4, r4, #12
   bb89c:	f1c4 0520 	rsb	r5, r4, #32
   bb8a0:	fa00 f304 	lsl.w	r3, r0, r4
   bb8a4:	fa20 f005 	lsr.w	r0, r0, r5
   bb8a8:	fa01 f204 	lsl.w	r2, r1, r4
   bb8ac:	ea40 0002 	orr.w	r0, r0, r2
   bb8b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb8b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bb8b8:	f141 0100 	adc.w	r1, r1, #0
   bb8bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb8c0:	bf08      	it	eq
   bb8c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb8c6:	bd70      	pop	{r4, r5, r6, pc}
   bb8c8:	f1c4 0520 	rsb	r5, r4, #32
   bb8cc:	fa00 f205 	lsl.w	r2, r0, r5
   bb8d0:	ea4e 0e02 	orr.w	lr, lr, r2
   bb8d4:	fa20 f304 	lsr.w	r3, r0, r4
   bb8d8:	fa01 f205 	lsl.w	r2, r1, r5
   bb8dc:	ea43 0302 	orr.w	r3, r3, r2
   bb8e0:	fa21 f004 	lsr.w	r0, r1, r4
   bb8e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb8e8:	fa21 f204 	lsr.w	r2, r1, r4
   bb8ec:	ea20 0002 	bic.w	r0, r0, r2
   bb8f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bb8f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb8f8:	bf08      	it	eq
   bb8fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb8fe:	bd70      	pop	{r4, r5, r6, pc}
   bb900:	f094 0f00 	teq	r4, #0
   bb904:	d10f      	bne.n	bb926 <__aeabi_dmul+0x1c2>
   bb906:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bb90a:	0040      	lsls	r0, r0, #1
   bb90c:	eb41 0101 	adc.w	r1, r1, r1
   bb910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb914:	bf08      	it	eq
   bb916:	3c01      	subeq	r4, #1
   bb918:	d0f7      	beq.n	bb90a <__aeabi_dmul+0x1a6>
   bb91a:	ea41 0106 	orr.w	r1, r1, r6
   bb91e:	f095 0f00 	teq	r5, #0
   bb922:	bf18      	it	ne
   bb924:	4770      	bxne	lr
   bb926:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bb92a:	0052      	lsls	r2, r2, #1
   bb92c:	eb43 0303 	adc.w	r3, r3, r3
   bb930:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bb934:	bf08      	it	eq
   bb936:	3d01      	subeq	r5, #1
   bb938:	d0f7      	beq.n	bb92a <__aeabi_dmul+0x1c6>
   bb93a:	ea43 0306 	orr.w	r3, r3, r6
   bb93e:	4770      	bx	lr
   bb940:	ea94 0f0c 	teq	r4, ip
   bb944:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bb948:	bf18      	it	ne
   bb94a:	ea95 0f0c 	teqne	r5, ip
   bb94e:	d00c      	beq.n	bb96a <__aeabi_dmul+0x206>
   bb950:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb954:	bf18      	it	ne
   bb956:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb95a:	d1d1      	bne.n	bb900 <__aeabi_dmul+0x19c>
   bb95c:	ea81 0103 	eor.w	r1, r1, r3
   bb960:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb964:	f04f 0000 	mov.w	r0, #0
   bb968:	bd70      	pop	{r4, r5, r6, pc}
   bb96a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb96e:	bf06      	itte	eq
   bb970:	4610      	moveq	r0, r2
   bb972:	4619      	moveq	r1, r3
   bb974:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb978:	d019      	beq.n	bb9ae <__aeabi_dmul+0x24a>
   bb97a:	ea94 0f0c 	teq	r4, ip
   bb97e:	d102      	bne.n	bb986 <__aeabi_dmul+0x222>
   bb980:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bb984:	d113      	bne.n	bb9ae <__aeabi_dmul+0x24a>
   bb986:	ea95 0f0c 	teq	r5, ip
   bb98a:	d105      	bne.n	bb998 <__aeabi_dmul+0x234>
   bb98c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bb990:	bf1c      	itt	ne
   bb992:	4610      	movne	r0, r2
   bb994:	4619      	movne	r1, r3
   bb996:	d10a      	bne.n	bb9ae <__aeabi_dmul+0x24a>
   bb998:	ea81 0103 	eor.w	r1, r1, r3
   bb99c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb9a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bb9a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bb9a8:	f04f 0000 	mov.w	r0, #0
   bb9ac:	bd70      	pop	{r4, r5, r6, pc}
   bb9ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bb9b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bb9b6:	bd70      	pop	{r4, r5, r6, pc}

000bb9b8 <__aeabi_ddiv>:
   bb9b8:	b570      	push	{r4, r5, r6, lr}
   bb9ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bb9be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bb9c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bb9c6:	bf1d      	ittte	ne
   bb9c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bb9cc:	ea94 0f0c 	teqne	r4, ip
   bb9d0:	ea95 0f0c 	teqne	r5, ip
   bb9d4:	f000 f8a7 	bleq	bbb26 <__aeabi_ddiv+0x16e>
   bb9d8:	eba4 0405 	sub.w	r4, r4, r5
   bb9dc:	ea81 0e03 	eor.w	lr, r1, r3
   bb9e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bb9e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bb9e8:	f000 8088 	beq.w	bbafc <__aeabi_ddiv+0x144>
   bb9ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bb9f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bb9f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bb9f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bb9fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bba00:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bba04:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bba08:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bba0c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bba10:	429d      	cmp	r5, r3
   bba12:	bf08      	it	eq
   bba14:	4296      	cmpeq	r6, r2
   bba16:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bba1a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bba1e:	d202      	bcs.n	bba26 <__aeabi_ddiv+0x6e>
   bba20:	085b      	lsrs	r3, r3, #1
   bba22:	ea4f 0232 	mov.w	r2, r2, rrx
   bba26:	1ab6      	subs	r6, r6, r2
   bba28:	eb65 0503 	sbc.w	r5, r5, r3
   bba2c:	085b      	lsrs	r3, r3, #1
   bba2e:	ea4f 0232 	mov.w	r2, r2, rrx
   bba32:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bba36:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bba3a:	ebb6 0e02 	subs.w	lr, r6, r2
   bba3e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bba42:	bf22      	ittt	cs
   bba44:	1ab6      	subcs	r6, r6, r2
   bba46:	4675      	movcs	r5, lr
   bba48:	ea40 000c 	orrcs.w	r0, r0, ip
   bba4c:	085b      	lsrs	r3, r3, #1
   bba4e:	ea4f 0232 	mov.w	r2, r2, rrx
   bba52:	ebb6 0e02 	subs.w	lr, r6, r2
   bba56:	eb75 0e03 	sbcs.w	lr, r5, r3
   bba5a:	bf22      	ittt	cs
   bba5c:	1ab6      	subcs	r6, r6, r2
   bba5e:	4675      	movcs	r5, lr
   bba60:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bba64:	085b      	lsrs	r3, r3, #1
   bba66:	ea4f 0232 	mov.w	r2, r2, rrx
   bba6a:	ebb6 0e02 	subs.w	lr, r6, r2
   bba6e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bba72:	bf22      	ittt	cs
   bba74:	1ab6      	subcs	r6, r6, r2
   bba76:	4675      	movcs	r5, lr
   bba78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bba7c:	085b      	lsrs	r3, r3, #1
   bba7e:	ea4f 0232 	mov.w	r2, r2, rrx
   bba82:	ebb6 0e02 	subs.w	lr, r6, r2
   bba86:	eb75 0e03 	sbcs.w	lr, r5, r3
   bba8a:	bf22      	ittt	cs
   bba8c:	1ab6      	subcs	r6, r6, r2
   bba8e:	4675      	movcs	r5, lr
   bba90:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bba94:	ea55 0e06 	orrs.w	lr, r5, r6
   bba98:	d018      	beq.n	bbacc <__aeabi_ddiv+0x114>
   bba9a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bba9e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bbaa2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bbaa6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bbaaa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bbaae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bbab2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bbab6:	d1c0      	bne.n	bba3a <__aeabi_ddiv+0x82>
   bbab8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bbabc:	d10b      	bne.n	bbad6 <__aeabi_ddiv+0x11e>
   bbabe:	ea41 0100 	orr.w	r1, r1, r0
   bbac2:	f04f 0000 	mov.w	r0, #0
   bbac6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bbaca:	e7b6      	b.n	bba3a <__aeabi_ddiv+0x82>
   bbacc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bbad0:	bf04      	itt	eq
   bbad2:	4301      	orreq	r1, r0
   bbad4:	2000      	moveq	r0, #0
   bbad6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bbada:	bf88      	it	hi
   bbadc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bbae0:	f63f aeaf 	bhi.w	bb842 <__aeabi_dmul+0xde>
   bbae4:	ebb5 0c03 	subs.w	ip, r5, r3
   bbae8:	bf04      	itt	eq
   bbaea:	ebb6 0c02 	subseq.w	ip, r6, r2
   bbaee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bbaf2:	f150 0000 	adcs.w	r0, r0, #0
   bbaf6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bbafa:	bd70      	pop	{r4, r5, r6, pc}
   bbafc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bbb00:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bbb04:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bbb08:	bfc2      	ittt	gt
   bbb0a:	ebd4 050c 	rsbsgt	r5, r4, ip
   bbb0e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bbb12:	bd70      	popgt	{r4, r5, r6, pc}
   bbb14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bbb18:	f04f 0e00 	mov.w	lr, #0
   bbb1c:	3c01      	subs	r4, #1
   bbb1e:	e690      	b.n	bb842 <__aeabi_dmul+0xde>
   bbb20:	ea45 0e06 	orr.w	lr, r5, r6
   bbb24:	e68d      	b.n	bb842 <__aeabi_dmul+0xde>
   bbb26:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bbb2a:	ea94 0f0c 	teq	r4, ip
   bbb2e:	bf08      	it	eq
   bbb30:	ea95 0f0c 	teqeq	r5, ip
   bbb34:	f43f af3b 	beq.w	bb9ae <__aeabi_dmul+0x24a>
   bbb38:	ea94 0f0c 	teq	r4, ip
   bbb3c:	d10a      	bne.n	bbb54 <__aeabi_ddiv+0x19c>
   bbb3e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bbb42:	f47f af34 	bne.w	bb9ae <__aeabi_dmul+0x24a>
   bbb46:	ea95 0f0c 	teq	r5, ip
   bbb4a:	f47f af25 	bne.w	bb998 <__aeabi_dmul+0x234>
   bbb4e:	4610      	mov	r0, r2
   bbb50:	4619      	mov	r1, r3
   bbb52:	e72c      	b.n	bb9ae <__aeabi_dmul+0x24a>
   bbb54:	ea95 0f0c 	teq	r5, ip
   bbb58:	d106      	bne.n	bbb68 <__aeabi_ddiv+0x1b0>
   bbb5a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bbb5e:	f43f aefd 	beq.w	bb95c <__aeabi_dmul+0x1f8>
   bbb62:	4610      	mov	r0, r2
   bbb64:	4619      	mov	r1, r3
   bbb66:	e722      	b.n	bb9ae <__aeabi_dmul+0x24a>
   bbb68:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bbb6c:	bf18      	it	ne
   bbb6e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bbb72:	f47f aec5 	bne.w	bb900 <__aeabi_dmul+0x19c>
   bbb76:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bbb7a:	f47f af0d 	bne.w	bb998 <__aeabi_dmul+0x234>
   bbb7e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bbb82:	f47f aeeb 	bne.w	bb95c <__aeabi_dmul+0x1f8>
   bbb86:	e712      	b.n	bb9ae <__aeabi_dmul+0x24a>

000bbb88 <__gedf2>:
   bbb88:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bbb8c:	e006      	b.n	bbb9c <__cmpdf2+0x4>
   bbb8e:	bf00      	nop

000bbb90 <__ledf2>:
   bbb90:	f04f 0c01 	mov.w	ip, #1
   bbb94:	e002      	b.n	bbb9c <__cmpdf2+0x4>
   bbb96:	bf00      	nop

000bbb98 <__cmpdf2>:
   bbb98:	f04f 0c01 	mov.w	ip, #1
   bbb9c:	f84d cd04 	str.w	ip, [sp, #-4]!
   bbba0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bbba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbba8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bbbac:	bf18      	it	ne
   bbbae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bbbb2:	d01b      	beq.n	bbbec <__cmpdf2+0x54>
   bbbb4:	b001      	add	sp, #4
   bbbb6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bbbba:	bf0c      	ite	eq
   bbbbc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bbbc0:	ea91 0f03 	teqne	r1, r3
   bbbc4:	bf02      	ittt	eq
   bbbc6:	ea90 0f02 	teqeq	r0, r2
   bbbca:	2000      	moveq	r0, #0
   bbbcc:	4770      	bxeq	lr
   bbbce:	f110 0f00 	cmn.w	r0, #0
   bbbd2:	ea91 0f03 	teq	r1, r3
   bbbd6:	bf58      	it	pl
   bbbd8:	4299      	cmppl	r1, r3
   bbbda:	bf08      	it	eq
   bbbdc:	4290      	cmpeq	r0, r2
   bbbde:	bf2c      	ite	cs
   bbbe0:	17d8      	asrcs	r0, r3, #31
   bbbe2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bbbe6:	f040 0001 	orr.w	r0, r0, #1
   bbbea:	4770      	bx	lr
   bbbec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bbbf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbbf4:	d102      	bne.n	bbbfc <__cmpdf2+0x64>
   bbbf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bbbfa:	d107      	bne.n	bbc0c <__cmpdf2+0x74>
   bbbfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bbc00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbc04:	d1d6      	bne.n	bbbb4 <__cmpdf2+0x1c>
   bbc06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bbc0a:	d0d3      	beq.n	bbbb4 <__cmpdf2+0x1c>
   bbc0c:	f85d 0b04 	ldr.w	r0, [sp], #4
   bbc10:	4770      	bx	lr
   bbc12:	bf00      	nop

000bbc14 <__aeabi_cdrcmple>:
   bbc14:	4684      	mov	ip, r0
   bbc16:	4610      	mov	r0, r2
   bbc18:	4662      	mov	r2, ip
   bbc1a:	468c      	mov	ip, r1
   bbc1c:	4619      	mov	r1, r3
   bbc1e:	4663      	mov	r3, ip
   bbc20:	e000      	b.n	bbc24 <__aeabi_cdcmpeq>
   bbc22:	bf00      	nop

000bbc24 <__aeabi_cdcmpeq>:
   bbc24:	b501      	push	{r0, lr}
   bbc26:	f7ff ffb7 	bl	bbb98 <__cmpdf2>
   bbc2a:	2800      	cmp	r0, #0
   bbc2c:	bf48      	it	mi
   bbc2e:	f110 0f00 	cmnmi.w	r0, #0
   bbc32:	bd01      	pop	{r0, pc}

000bbc34 <__aeabi_dcmpeq>:
   bbc34:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbc38:	f7ff fff4 	bl	bbc24 <__aeabi_cdcmpeq>
   bbc3c:	bf0c      	ite	eq
   bbc3e:	2001      	moveq	r0, #1
   bbc40:	2000      	movne	r0, #0
   bbc42:	f85d fb08 	ldr.w	pc, [sp], #8
   bbc46:	bf00      	nop

000bbc48 <__aeabi_dcmplt>:
   bbc48:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbc4c:	f7ff ffea 	bl	bbc24 <__aeabi_cdcmpeq>
   bbc50:	bf34      	ite	cc
   bbc52:	2001      	movcc	r0, #1
   bbc54:	2000      	movcs	r0, #0
   bbc56:	f85d fb08 	ldr.w	pc, [sp], #8
   bbc5a:	bf00      	nop

000bbc5c <__aeabi_dcmple>:
   bbc5c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbc60:	f7ff ffe0 	bl	bbc24 <__aeabi_cdcmpeq>
   bbc64:	bf94      	ite	ls
   bbc66:	2001      	movls	r0, #1
   bbc68:	2000      	movhi	r0, #0
   bbc6a:	f85d fb08 	ldr.w	pc, [sp], #8
   bbc6e:	bf00      	nop

000bbc70 <__aeabi_dcmpge>:
   bbc70:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbc74:	f7ff ffce 	bl	bbc14 <__aeabi_cdrcmple>
   bbc78:	bf94      	ite	ls
   bbc7a:	2001      	movls	r0, #1
   bbc7c:	2000      	movhi	r0, #0
   bbc7e:	f85d fb08 	ldr.w	pc, [sp], #8
   bbc82:	bf00      	nop

000bbc84 <__aeabi_dcmpgt>:
   bbc84:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbc88:	f7ff ffc4 	bl	bbc14 <__aeabi_cdrcmple>
   bbc8c:	bf34      	ite	cc
   bbc8e:	2001      	movcc	r0, #1
   bbc90:	2000      	movcs	r0, #0
   bbc92:	f85d fb08 	ldr.w	pc, [sp], #8
   bbc96:	bf00      	nop

000bbc98 <__aeabi_dcmpun>:
   bbc98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bbc9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbca0:	d102      	bne.n	bbca8 <__aeabi_dcmpun+0x10>
   bbca2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bbca6:	d10a      	bne.n	bbcbe <__aeabi_dcmpun+0x26>
   bbca8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bbcac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbcb0:	d102      	bne.n	bbcb8 <__aeabi_dcmpun+0x20>
   bbcb2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bbcb6:	d102      	bne.n	bbcbe <__aeabi_dcmpun+0x26>
   bbcb8:	f04f 0000 	mov.w	r0, #0
   bbcbc:	4770      	bx	lr
   bbcbe:	f04f 0001 	mov.w	r0, #1
   bbcc2:	4770      	bx	lr

000bbcc4 <__aeabi_d2uiz>:
   bbcc4:	004a      	lsls	r2, r1, #1
   bbcc6:	d211      	bcs.n	bbcec <__aeabi_d2uiz+0x28>
   bbcc8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bbccc:	d211      	bcs.n	bbcf2 <__aeabi_d2uiz+0x2e>
   bbcce:	d50d      	bpl.n	bbcec <__aeabi_d2uiz+0x28>
   bbcd0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bbcd4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bbcd8:	d40e      	bmi.n	bbcf8 <__aeabi_d2uiz+0x34>
   bbcda:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bbcde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bbce2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bbce6:	fa23 f002 	lsr.w	r0, r3, r2
   bbcea:	4770      	bx	lr
   bbcec:	f04f 0000 	mov.w	r0, #0
   bbcf0:	4770      	bx	lr
   bbcf2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bbcf6:	d102      	bne.n	bbcfe <__aeabi_d2uiz+0x3a>
   bbcf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bbcfc:	4770      	bx	lr
   bbcfe:	f04f 0000 	mov.w	r0, #0
   bbd02:	4770      	bx	lr

000bbd04 <__aeabi_d2f>:
   bbd04:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bbd08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bbd0c:	bf24      	itt	cs
   bbd0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bbd12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bbd16:	d90d      	bls.n	bbd34 <__aeabi_d2f+0x30>
   bbd18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bbd1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bbd20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bbd24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bbd28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bbd2c:	bf08      	it	eq
   bbd2e:	f020 0001 	biceq.w	r0, r0, #1
   bbd32:	4770      	bx	lr
   bbd34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bbd38:	d121      	bne.n	bbd7e <__aeabi_d2f+0x7a>
   bbd3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bbd3e:	bfbc      	itt	lt
   bbd40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bbd44:	4770      	bxlt	lr
   bbd46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bbd4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bbd4e:	f1c2 0218 	rsb	r2, r2, #24
   bbd52:	f1c2 0c20 	rsb	ip, r2, #32
   bbd56:	fa10 f30c 	lsls.w	r3, r0, ip
   bbd5a:	fa20 f002 	lsr.w	r0, r0, r2
   bbd5e:	bf18      	it	ne
   bbd60:	f040 0001 	orrne.w	r0, r0, #1
   bbd64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bbd68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bbd6c:	fa03 fc0c 	lsl.w	ip, r3, ip
   bbd70:	ea40 000c 	orr.w	r0, r0, ip
   bbd74:	fa23 f302 	lsr.w	r3, r3, r2
   bbd78:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bbd7c:	e7cc      	b.n	bbd18 <__aeabi_d2f+0x14>
   bbd7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bbd82:	d107      	bne.n	bbd94 <__aeabi_d2f+0x90>
   bbd84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bbd88:	bf1e      	ittt	ne
   bbd8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bbd8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bbd92:	4770      	bxne	lr
   bbd94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bbd98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bbd9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bbda0:	4770      	bx	lr
   bbda2:	bf00      	nop

000bbda4 <__aeabi_d2ulz>:
   bbda4:	b5d0      	push	{r4, r6, r7, lr}
   bbda6:	4b0c      	ldr	r3, [pc, #48]	; (bbdd8 <__aeabi_d2ulz+0x34>)
   bbda8:	2200      	movs	r2, #0
   bbdaa:	4606      	mov	r6, r0
   bbdac:	460f      	mov	r7, r1
   bbdae:	f7ff fcd9 	bl	bb764 <__aeabi_dmul>
   bbdb2:	f7ff ff87 	bl	bbcc4 <__aeabi_d2uiz>
   bbdb6:	4604      	mov	r4, r0
   bbdb8:	f7ff fc5a 	bl	bb670 <__aeabi_ui2d>
   bbdbc:	4b07      	ldr	r3, [pc, #28]	; (bbddc <__aeabi_d2ulz+0x38>)
   bbdbe:	2200      	movs	r2, #0
   bbdc0:	f7ff fcd0 	bl	bb764 <__aeabi_dmul>
   bbdc4:	4602      	mov	r2, r0
   bbdc6:	460b      	mov	r3, r1
   bbdc8:	4630      	mov	r0, r6
   bbdca:	4639      	mov	r1, r7
   bbdcc:	f7ff fb12 	bl	bb3f4 <__aeabi_dsub>
   bbdd0:	f7ff ff78 	bl	bbcc4 <__aeabi_d2uiz>
   bbdd4:	4621      	mov	r1, r4
   bbdd6:	bdd0      	pop	{r4, r6, r7, pc}
   bbdd8:	3df00000 	.word	0x3df00000
   bbddc:	41f00000 	.word	0x41f00000

000bbde0 <atexit>:
   bbde0:	2300      	movs	r3, #0
   bbde2:	4601      	mov	r1, r0
   bbde4:	461a      	mov	r2, r3
   bbde6:	4618      	mov	r0, r3
   bbde8:	f000 bfcc 	b.w	bcd84 <__register_exitproc>

000bbdec <atoi>:
   bbdec:	220a      	movs	r2, #10
   bbdee:	2100      	movs	r1, #0
   bbdf0:	f000 bfbe 	b.w	bcd70 <strtol>

000bbdf4 <memcmp>:
   bbdf4:	b510      	push	{r4, lr}
   bbdf6:	3901      	subs	r1, #1
   bbdf8:	4402      	add	r2, r0
   bbdfa:	4290      	cmp	r0, r2
   bbdfc:	d101      	bne.n	bbe02 <memcmp+0xe>
   bbdfe:	2000      	movs	r0, #0
   bbe00:	e005      	b.n	bbe0e <memcmp+0x1a>
   bbe02:	7803      	ldrb	r3, [r0, #0]
   bbe04:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bbe08:	42a3      	cmp	r3, r4
   bbe0a:	d001      	beq.n	bbe10 <memcmp+0x1c>
   bbe0c:	1b18      	subs	r0, r3, r4
   bbe0e:	bd10      	pop	{r4, pc}
   bbe10:	3001      	adds	r0, #1
   bbe12:	e7f2      	b.n	bbdfa <memcmp+0x6>

000bbe14 <memcpy>:
   bbe14:	440a      	add	r2, r1
   bbe16:	4291      	cmp	r1, r2
   bbe18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bbe1c:	d100      	bne.n	bbe20 <memcpy+0xc>
   bbe1e:	4770      	bx	lr
   bbe20:	b510      	push	{r4, lr}
   bbe22:	f811 4b01 	ldrb.w	r4, [r1], #1
   bbe26:	f803 4f01 	strb.w	r4, [r3, #1]!
   bbe2a:	4291      	cmp	r1, r2
   bbe2c:	d1f9      	bne.n	bbe22 <memcpy+0xe>
   bbe2e:	bd10      	pop	{r4, pc}

000bbe30 <memmove>:
   bbe30:	4288      	cmp	r0, r1
   bbe32:	b510      	push	{r4, lr}
   bbe34:	eb01 0402 	add.w	r4, r1, r2
   bbe38:	d902      	bls.n	bbe40 <memmove+0x10>
   bbe3a:	4284      	cmp	r4, r0
   bbe3c:	4623      	mov	r3, r4
   bbe3e:	d807      	bhi.n	bbe50 <memmove+0x20>
   bbe40:	1e43      	subs	r3, r0, #1
   bbe42:	42a1      	cmp	r1, r4
   bbe44:	d008      	beq.n	bbe58 <memmove+0x28>
   bbe46:	f811 2b01 	ldrb.w	r2, [r1], #1
   bbe4a:	f803 2f01 	strb.w	r2, [r3, #1]!
   bbe4e:	e7f8      	b.n	bbe42 <memmove+0x12>
   bbe50:	4402      	add	r2, r0
   bbe52:	4601      	mov	r1, r0
   bbe54:	428a      	cmp	r2, r1
   bbe56:	d100      	bne.n	bbe5a <memmove+0x2a>
   bbe58:	bd10      	pop	{r4, pc}
   bbe5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bbe5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bbe62:	e7f7      	b.n	bbe54 <memmove+0x24>

000bbe64 <memset>:
   bbe64:	4402      	add	r2, r0
   bbe66:	4603      	mov	r3, r0
   bbe68:	4293      	cmp	r3, r2
   bbe6a:	d100      	bne.n	bbe6e <memset+0xa>
   bbe6c:	4770      	bx	lr
   bbe6e:	f803 1b01 	strb.w	r1, [r3], #1
   bbe72:	e7f9      	b.n	bbe68 <memset+0x4>

000bbe74 <srand>:
   bbe74:	b538      	push	{r3, r4, r5, lr}
   bbe76:	4b10      	ldr	r3, [pc, #64]	; (bbeb8 <srand+0x44>)
   bbe78:	681d      	ldr	r5, [r3, #0]
   bbe7a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bbe7c:	4604      	mov	r4, r0
   bbe7e:	b9b3      	cbnz	r3, bbeae <srand+0x3a>
   bbe80:	2018      	movs	r0, #24
   bbe82:	f7fc fc61 	bl	b8748 <malloc>
   bbe86:	4602      	mov	r2, r0
   bbe88:	63a8      	str	r0, [r5, #56]	; 0x38
   bbe8a:	b920      	cbnz	r0, bbe96 <srand+0x22>
   bbe8c:	4b0b      	ldr	r3, [pc, #44]	; (bbebc <srand+0x48>)
   bbe8e:	480c      	ldr	r0, [pc, #48]	; (bbec0 <srand+0x4c>)
   bbe90:	2142      	movs	r1, #66	; 0x42
   bbe92:	f7fc fc99 	bl	b87c8 <__assert_func>
   bbe96:	490b      	ldr	r1, [pc, #44]	; (bbec4 <srand+0x50>)
   bbe98:	4b0b      	ldr	r3, [pc, #44]	; (bbec8 <srand+0x54>)
   bbe9a:	e9c0 1300 	strd	r1, r3, [r0]
   bbe9e:	4b0b      	ldr	r3, [pc, #44]	; (bbecc <srand+0x58>)
   bbea0:	6083      	str	r3, [r0, #8]
   bbea2:	230b      	movs	r3, #11
   bbea4:	8183      	strh	r3, [r0, #12]
   bbea6:	2100      	movs	r1, #0
   bbea8:	2001      	movs	r0, #1
   bbeaa:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bbeae:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bbeb0:	2200      	movs	r2, #0
   bbeb2:	611c      	str	r4, [r3, #16]
   bbeb4:	615a      	str	r2, [r3, #20]
   bbeb6:	bd38      	pop	{r3, r4, r5, pc}
   bbeb8:	20035138 	.word	0x20035138
   bbebc:	000be8dd 	.word	0x000be8dd
   bbec0:	000be8f4 	.word	0x000be8f4
   bbec4:	abcd330e 	.word	0xabcd330e
   bbec8:	e66d1234 	.word	0xe66d1234
   bbecc:	0005deec 	.word	0x0005deec

000bbed0 <strcmp>:
   bbed0:	f810 2b01 	ldrb.w	r2, [r0], #1
   bbed4:	f811 3b01 	ldrb.w	r3, [r1], #1
   bbed8:	2a01      	cmp	r2, #1
   bbeda:	bf28      	it	cs
   bbedc:	429a      	cmpcs	r2, r3
   bbede:	d0f7      	beq.n	bbed0 <strcmp>
   bbee0:	1ad0      	subs	r0, r2, r3
   bbee2:	4770      	bx	lr

000bbee4 <strcpy>:
   bbee4:	4603      	mov	r3, r0
   bbee6:	f811 2b01 	ldrb.w	r2, [r1], #1
   bbeea:	f803 2b01 	strb.w	r2, [r3], #1
   bbeee:	2a00      	cmp	r2, #0
   bbef0:	d1f9      	bne.n	bbee6 <strcpy+0x2>
   bbef2:	4770      	bx	lr

000bbef4 <strlen>:
   bbef4:	4603      	mov	r3, r0
   bbef6:	f813 2b01 	ldrb.w	r2, [r3], #1
   bbefa:	2a00      	cmp	r2, #0
   bbefc:	d1fb      	bne.n	bbef6 <strlen+0x2>
   bbefe:	1a18      	subs	r0, r3, r0
   bbf00:	3801      	subs	r0, #1
   bbf02:	4770      	bx	lr

000bbf04 <strncmp>:
   bbf04:	b510      	push	{r4, lr}
   bbf06:	b17a      	cbz	r2, bbf28 <strncmp+0x24>
   bbf08:	4603      	mov	r3, r0
   bbf0a:	3901      	subs	r1, #1
   bbf0c:	1884      	adds	r4, r0, r2
   bbf0e:	f813 0b01 	ldrb.w	r0, [r3], #1
   bbf12:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bbf16:	4290      	cmp	r0, r2
   bbf18:	d101      	bne.n	bbf1e <strncmp+0x1a>
   bbf1a:	42a3      	cmp	r3, r4
   bbf1c:	d101      	bne.n	bbf22 <strncmp+0x1e>
   bbf1e:	1a80      	subs	r0, r0, r2
   bbf20:	bd10      	pop	{r4, pc}
   bbf22:	2800      	cmp	r0, #0
   bbf24:	d1f3      	bne.n	bbf0e <strncmp+0xa>
   bbf26:	e7fa      	b.n	bbf1e <strncmp+0x1a>
   bbf28:	4610      	mov	r0, r2
   bbf2a:	e7f9      	b.n	bbf20 <strncmp+0x1c>

000bbf2c <strnlen>:
   bbf2c:	b510      	push	{r4, lr}
   bbf2e:	4602      	mov	r2, r0
   bbf30:	4401      	add	r1, r0
   bbf32:	428a      	cmp	r2, r1
   bbf34:	4613      	mov	r3, r2
   bbf36:	d003      	beq.n	bbf40 <strnlen+0x14>
   bbf38:	781c      	ldrb	r4, [r3, #0]
   bbf3a:	3201      	adds	r2, #1
   bbf3c:	2c00      	cmp	r4, #0
   bbf3e:	d1f8      	bne.n	bbf32 <strnlen+0x6>
   bbf40:	1a18      	subs	r0, r3, r0
   bbf42:	bd10      	pop	{r4, pc}

000bbf44 <strstr>:
   bbf44:	780a      	ldrb	r2, [r1, #0]
   bbf46:	b570      	push	{r4, r5, r6, lr}
   bbf48:	b96a      	cbnz	r2, bbf66 <strstr+0x22>
   bbf4a:	bd70      	pop	{r4, r5, r6, pc}
   bbf4c:	429a      	cmp	r2, r3
   bbf4e:	d109      	bne.n	bbf64 <strstr+0x20>
   bbf50:	460c      	mov	r4, r1
   bbf52:	4605      	mov	r5, r0
   bbf54:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   bbf58:	2b00      	cmp	r3, #0
   bbf5a:	d0f6      	beq.n	bbf4a <strstr+0x6>
   bbf5c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   bbf60:	429e      	cmp	r6, r3
   bbf62:	d0f7      	beq.n	bbf54 <strstr+0x10>
   bbf64:	3001      	adds	r0, #1
   bbf66:	7803      	ldrb	r3, [r0, #0]
   bbf68:	2b00      	cmp	r3, #0
   bbf6a:	d1ef      	bne.n	bbf4c <strstr+0x8>
   bbf6c:	4618      	mov	r0, r3
   bbf6e:	e7ec      	b.n	bbf4a <strstr+0x6>

000bbf70 <sulp>:
   bbf70:	b570      	push	{r4, r5, r6, lr}
   bbf72:	4604      	mov	r4, r0
   bbf74:	460d      	mov	r5, r1
   bbf76:	ec45 4b10 	vmov	d0, r4, r5
   bbf7a:	4616      	mov	r6, r2
   bbf7c:	f001 fe5c 	bl	bdc38 <__ulp>
   bbf80:	ec51 0b10 	vmov	r0, r1, d0
   bbf84:	b17e      	cbz	r6, bbfa6 <sulp+0x36>
   bbf86:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bbf8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bbf8e:	2b00      	cmp	r3, #0
   bbf90:	dd09      	ble.n	bbfa6 <sulp+0x36>
   bbf92:	051b      	lsls	r3, r3, #20
   bbf94:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bbf98:	2400      	movs	r4, #0
   bbf9a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bbf9e:	4622      	mov	r2, r4
   bbfa0:	462b      	mov	r3, r5
   bbfa2:	f7ff fbdf 	bl	bb764 <__aeabi_dmul>
   bbfa6:	bd70      	pop	{r4, r5, r6, pc}

000bbfa8 <_strtod_l>:
   bbfa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbfac:	ed2d 8b02 	vpush	{d8}
   bbfb0:	b09d      	sub	sp, #116	; 0x74
   bbfb2:	461f      	mov	r7, r3
   bbfb4:	2300      	movs	r3, #0
   bbfb6:	9318      	str	r3, [sp, #96]	; 0x60
   bbfb8:	4ba2      	ldr	r3, [pc, #648]	; (bc244 <_strtod_l+0x29c>)
   bbfba:	9213      	str	r2, [sp, #76]	; 0x4c
   bbfbc:	681b      	ldr	r3, [r3, #0]
   bbfbe:	9305      	str	r3, [sp, #20]
   bbfc0:	4604      	mov	r4, r0
   bbfc2:	4618      	mov	r0, r3
   bbfc4:	4688      	mov	r8, r1
   bbfc6:	f7ff ff95 	bl	bbef4 <strlen>
   bbfca:	f04f 0a00 	mov.w	sl, #0
   bbfce:	4605      	mov	r5, r0
   bbfd0:	f04f 0b00 	mov.w	fp, #0
   bbfd4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bbfd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbfda:	781a      	ldrb	r2, [r3, #0]
   bbfdc:	2a2b      	cmp	r2, #43	; 0x2b
   bbfde:	d04e      	beq.n	bc07e <_strtod_l+0xd6>
   bbfe0:	d83b      	bhi.n	bc05a <_strtod_l+0xb2>
   bbfe2:	2a0d      	cmp	r2, #13
   bbfe4:	d834      	bhi.n	bc050 <_strtod_l+0xa8>
   bbfe6:	2a08      	cmp	r2, #8
   bbfe8:	d834      	bhi.n	bc054 <_strtod_l+0xac>
   bbfea:	2a00      	cmp	r2, #0
   bbfec:	d03e      	beq.n	bc06c <_strtod_l+0xc4>
   bbfee:	2300      	movs	r3, #0
   bbff0:	930a      	str	r3, [sp, #40]	; 0x28
   bbff2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bbff4:	7833      	ldrb	r3, [r6, #0]
   bbff6:	2b30      	cmp	r3, #48	; 0x30
   bbff8:	f040 80b0 	bne.w	bc15c <_strtod_l+0x1b4>
   bbffc:	7873      	ldrb	r3, [r6, #1]
   bbffe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bc002:	2b58      	cmp	r3, #88	; 0x58
   bc004:	d168      	bne.n	bc0d8 <_strtod_l+0x130>
   bc006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bc008:	9301      	str	r3, [sp, #4]
   bc00a:	ab18      	add	r3, sp, #96	; 0x60
   bc00c:	9702      	str	r7, [sp, #8]
   bc00e:	9300      	str	r3, [sp, #0]
   bc010:	4a8d      	ldr	r2, [pc, #564]	; (bc248 <_strtod_l+0x2a0>)
   bc012:	ab19      	add	r3, sp, #100	; 0x64
   bc014:	a917      	add	r1, sp, #92	; 0x5c
   bc016:	4620      	mov	r0, r4
   bc018:	f000 ff7e 	bl	bcf18 <__gethex>
   bc01c:	f010 0707 	ands.w	r7, r0, #7
   bc020:	4605      	mov	r5, r0
   bc022:	d005      	beq.n	bc030 <_strtod_l+0x88>
   bc024:	2f06      	cmp	r7, #6
   bc026:	d12c      	bne.n	bc082 <_strtod_l+0xda>
   bc028:	3601      	adds	r6, #1
   bc02a:	2300      	movs	r3, #0
   bc02c:	9617      	str	r6, [sp, #92]	; 0x5c
   bc02e:	930a      	str	r3, [sp, #40]	; 0x28
   bc030:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bc032:	2b00      	cmp	r3, #0
   bc034:	f040 8590 	bne.w	bcb58 <_strtod_l+0xbb0>
   bc038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bc03a:	b1eb      	cbz	r3, bc078 <_strtod_l+0xd0>
   bc03c:	4652      	mov	r2, sl
   bc03e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bc042:	ec43 2b10 	vmov	d0, r2, r3
   bc046:	b01d      	add	sp, #116	; 0x74
   bc048:	ecbd 8b02 	vpop	{d8}
   bc04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc050:	2a20      	cmp	r2, #32
   bc052:	d1cc      	bne.n	bbfee <_strtod_l+0x46>
   bc054:	3301      	adds	r3, #1
   bc056:	9317      	str	r3, [sp, #92]	; 0x5c
   bc058:	e7be      	b.n	bbfd8 <_strtod_l+0x30>
   bc05a:	2a2d      	cmp	r2, #45	; 0x2d
   bc05c:	d1c7      	bne.n	bbfee <_strtod_l+0x46>
   bc05e:	2201      	movs	r2, #1
   bc060:	920a      	str	r2, [sp, #40]	; 0x28
   bc062:	1c5a      	adds	r2, r3, #1
   bc064:	9217      	str	r2, [sp, #92]	; 0x5c
   bc066:	785b      	ldrb	r3, [r3, #1]
   bc068:	2b00      	cmp	r3, #0
   bc06a:	d1c2      	bne.n	bbff2 <_strtod_l+0x4a>
   bc06c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bc06e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bc072:	2b00      	cmp	r3, #0
   bc074:	f040 856e 	bne.w	bcb54 <_strtod_l+0xbac>
   bc078:	4652      	mov	r2, sl
   bc07a:	465b      	mov	r3, fp
   bc07c:	e7e1      	b.n	bc042 <_strtod_l+0x9a>
   bc07e:	2200      	movs	r2, #0
   bc080:	e7ee      	b.n	bc060 <_strtod_l+0xb8>
   bc082:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bc084:	b13a      	cbz	r2, bc096 <_strtod_l+0xee>
   bc086:	2135      	movs	r1, #53	; 0x35
   bc088:	a81a      	add	r0, sp, #104	; 0x68
   bc08a:	f001 fee0 	bl	bde4e <__copybits>
   bc08e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc090:	4620      	mov	r0, r4
   bc092:	f001 fa9f 	bl	bd5d4 <_Bfree>
   bc096:	3f01      	subs	r7, #1
   bc098:	2f04      	cmp	r7, #4
   bc09a:	d806      	bhi.n	bc0aa <_strtod_l+0x102>
   bc09c:	e8df f007 	tbb	[pc, r7]
   bc0a0:	1714030a 	.word	0x1714030a
   bc0a4:	0a          	.byte	0x0a
   bc0a5:	00          	.byte	0x00
   bc0a6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bc0aa:	0728      	lsls	r0, r5, #28
   bc0ac:	d5c0      	bpl.n	bc030 <_strtod_l+0x88>
   bc0ae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bc0b2:	e7bd      	b.n	bc030 <_strtod_l+0x88>
   bc0b4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bc0b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bc0ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bc0be:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bc0c2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bc0c6:	e7f0      	b.n	bc0aa <_strtod_l+0x102>
   bc0c8:	f8df b180 	ldr.w	fp, [pc, #384]	; bc24c <_strtod_l+0x2a4>
   bc0cc:	e7ed      	b.n	bc0aa <_strtod_l+0x102>
   bc0ce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bc0d2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bc0d6:	e7e8      	b.n	bc0aa <_strtod_l+0x102>
   bc0d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc0da:	1c5a      	adds	r2, r3, #1
   bc0dc:	9217      	str	r2, [sp, #92]	; 0x5c
   bc0de:	785b      	ldrb	r3, [r3, #1]
   bc0e0:	2b30      	cmp	r3, #48	; 0x30
   bc0e2:	d0f9      	beq.n	bc0d8 <_strtod_l+0x130>
   bc0e4:	2b00      	cmp	r3, #0
   bc0e6:	d0a3      	beq.n	bc030 <_strtod_l+0x88>
   bc0e8:	2301      	movs	r3, #1
   bc0ea:	f04f 0900 	mov.w	r9, #0
   bc0ee:	9304      	str	r3, [sp, #16]
   bc0f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc0f2:	9308      	str	r3, [sp, #32]
   bc0f4:	f8cd 901c 	str.w	r9, [sp, #28]
   bc0f8:	464f      	mov	r7, r9
   bc0fa:	220a      	movs	r2, #10
   bc0fc:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bc0fe:	7806      	ldrb	r6, [r0, #0]
   bc100:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bc104:	b2d9      	uxtb	r1, r3
   bc106:	2909      	cmp	r1, #9
   bc108:	d92a      	bls.n	bc160 <_strtod_l+0x1b8>
   bc10a:	9905      	ldr	r1, [sp, #20]
   bc10c:	462a      	mov	r2, r5
   bc10e:	f7ff fef9 	bl	bbf04 <strncmp>
   bc112:	b398      	cbz	r0, bc17c <_strtod_l+0x1d4>
   bc114:	2000      	movs	r0, #0
   bc116:	4632      	mov	r2, r6
   bc118:	463d      	mov	r5, r7
   bc11a:	9005      	str	r0, [sp, #20]
   bc11c:	4603      	mov	r3, r0
   bc11e:	2a65      	cmp	r2, #101	; 0x65
   bc120:	d001      	beq.n	bc126 <_strtod_l+0x17e>
   bc122:	2a45      	cmp	r2, #69	; 0x45
   bc124:	d118      	bne.n	bc158 <_strtod_l+0x1b0>
   bc126:	b91d      	cbnz	r5, bc130 <_strtod_l+0x188>
   bc128:	9a04      	ldr	r2, [sp, #16]
   bc12a:	4302      	orrs	r2, r0
   bc12c:	d09e      	beq.n	bc06c <_strtod_l+0xc4>
   bc12e:	2500      	movs	r5, #0
   bc130:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bc134:	f108 0201 	add.w	r2, r8, #1
   bc138:	9217      	str	r2, [sp, #92]	; 0x5c
   bc13a:	f898 2001 	ldrb.w	r2, [r8, #1]
   bc13e:	2a2b      	cmp	r2, #43	; 0x2b
   bc140:	d075      	beq.n	bc22e <_strtod_l+0x286>
   bc142:	2a2d      	cmp	r2, #45	; 0x2d
   bc144:	d07b      	beq.n	bc23e <_strtod_l+0x296>
   bc146:	f04f 0c00 	mov.w	ip, #0
   bc14a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bc14e:	2909      	cmp	r1, #9
   bc150:	f240 8082 	bls.w	bc258 <_strtod_l+0x2b0>
   bc154:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bc158:	2600      	movs	r6, #0
   bc15a:	e09d      	b.n	bc298 <_strtod_l+0x2f0>
   bc15c:	2300      	movs	r3, #0
   bc15e:	e7c4      	b.n	bc0ea <_strtod_l+0x142>
   bc160:	2f08      	cmp	r7, #8
   bc162:	bfd8      	it	le
   bc164:	9907      	ldrle	r1, [sp, #28]
   bc166:	f100 0001 	add.w	r0, r0, #1
   bc16a:	bfda      	itte	le
   bc16c:	fb02 3301 	mlale	r3, r2, r1, r3
   bc170:	9307      	strle	r3, [sp, #28]
   bc172:	fb02 3909 	mlagt	r9, r2, r9, r3
   bc176:	3701      	adds	r7, #1
   bc178:	9017      	str	r0, [sp, #92]	; 0x5c
   bc17a:	e7bf      	b.n	bc0fc <_strtod_l+0x154>
   bc17c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc17e:	195a      	adds	r2, r3, r5
   bc180:	9217      	str	r2, [sp, #92]	; 0x5c
   bc182:	5d5a      	ldrb	r2, [r3, r5]
   bc184:	2f00      	cmp	r7, #0
   bc186:	d037      	beq.n	bc1f8 <_strtod_l+0x250>
   bc188:	9005      	str	r0, [sp, #20]
   bc18a:	463d      	mov	r5, r7
   bc18c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bc190:	2b09      	cmp	r3, #9
   bc192:	d912      	bls.n	bc1ba <_strtod_l+0x212>
   bc194:	2301      	movs	r3, #1
   bc196:	e7c2      	b.n	bc11e <_strtod_l+0x176>
   bc198:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc19a:	1c5a      	adds	r2, r3, #1
   bc19c:	9217      	str	r2, [sp, #92]	; 0x5c
   bc19e:	785a      	ldrb	r2, [r3, #1]
   bc1a0:	3001      	adds	r0, #1
   bc1a2:	2a30      	cmp	r2, #48	; 0x30
   bc1a4:	d0f8      	beq.n	bc198 <_strtod_l+0x1f0>
   bc1a6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bc1aa:	2b08      	cmp	r3, #8
   bc1ac:	f200 84d9 	bhi.w	bcb62 <_strtod_l+0xbba>
   bc1b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc1b2:	9005      	str	r0, [sp, #20]
   bc1b4:	2000      	movs	r0, #0
   bc1b6:	9308      	str	r3, [sp, #32]
   bc1b8:	4605      	mov	r5, r0
   bc1ba:	3a30      	subs	r2, #48	; 0x30
   bc1bc:	f100 0301 	add.w	r3, r0, #1
   bc1c0:	d014      	beq.n	bc1ec <_strtod_l+0x244>
   bc1c2:	9905      	ldr	r1, [sp, #20]
   bc1c4:	4419      	add	r1, r3
   bc1c6:	9105      	str	r1, [sp, #20]
   bc1c8:	462b      	mov	r3, r5
   bc1ca:	eb00 0e05 	add.w	lr, r0, r5
   bc1ce:	210a      	movs	r1, #10
   bc1d0:	4573      	cmp	r3, lr
   bc1d2:	d113      	bne.n	bc1fc <_strtod_l+0x254>
   bc1d4:	182b      	adds	r3, r5, r0
   bc1d6:	2b08      	cmp	r3, #8
   bc1d8:	f105 0501 	add.w	r5, r5, #1
   bc1dc:	4405      	add	r5, r0
   bc1de:	dc1c      	bgt.n	bc21a <_strtod_l+0x272>
   bc1e0:	9907      	ldr	r1, [sp, #28]
   bc1e2:	230a      	movs	r3, #10
   bc1e4:	fb03 2301 	mla	r3, r3, r1, r2
   bc1e8:	9307      	str	r3, [sp, #28]
   bc1ea:	2300      	movs	r3, #0
   bc1ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc1ee:	1c51      	adds	r1, r2, #1
   bc1f0:	9117      	str	r1, [sp, #92]	; 0x5c
   bc1f2:	7852      	ldrb	r2, [r2, #1]
   bc1f4:	4618      	mov	r0, r3
   bc1f6:	e7c9      	b.n	bc18c <_strtod_l+0x1e4>
   bc1f8:	4638      	mov	r0, r7
   bc1fa:	e7d2      	b.n	bc1a2 <_strtod_l+0x1fa>
   bc1fc:	2b08      	cmp	r3, #8
   bc1fe:	dc04      	bgt.n	bc20a <_strtod_l+0x262>
   bc200:	9e07      	ldr	r6, [sp, #28]
   bc202:	434e      	muls	r6, r1
   bc204:	9607      	str	r6, [sp, #28]
   bc206:	3301      	adds	r3, #1
   bc208:	e7e2      	b.n	bc1d0 <_strtod_l+0x228>
   bc20a:	f103 0c01 	add.w	ip, r3, #1
   bc20e:	f1bc 0f10 	cmp.w	ip, #16
   bc212:	bfd8      	it	le
   bc214:	fb01 f909 	mulle.w	r9, r1, r9
   bc218:	e7f5      	b.n	bc206 <_strtod_l+0x25e>
   bc21a:	2d10      	cmp	r5, #16
   bc21c:	bfdc      	itt	le
   bc21e:	230a      	movle	r3, #10
   bc220:	fb03 2909 	mlale	r9, r3, r9, r2
   bc224:	e7e1      	b.n	bc1ea <_strtod_l+0x242>
   bc226:	2300      	movs	r3, #0
   bc228:	9305      	str	r3, [sp, #20]
   bc22a:	2301      	movs	r3, #1
   bc22c:	e77c      	b.n	bc128 <_strtod_l+0x180>
   bc22e:	f04f 0c00 	mov.w	ip, #0
   bc232:	f108 0202 	add.w	r2, r8, #2
   bc236:	9217      	str	r2, [sp, #92]	; 0x5c
   bc238:	f898 2002 	ldrb.w	r2, [r8, #2]
   bc23c:	e785      	b.n	bc14a <_strtod_l+0x1a2>
   bc23e:	f04f 0c01 	mov.w	ip, #1
   bc242:	e7f6      	b.n	bc232 <_strtod_l+0x28a>
   bc244:	000beb24 	.word	0x000beb24
   bc248:	000be95c 	.word	0x000be95c
   bc24c:	7ff00000 	.word	0x7ff00000
   bc250:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc252:	1c51      	adds	r1, r2, #1
   bc254:	9117      	str	r1, [sp, #92]	; 0x5c
   bc256:	7852      	ldrb	r2, [r2, #1]
   bc258:	2a30      	cmp	r2, #48	; 0x30
   bc25a:	d0f9      	beq.n	bc250 <_strtod_l+0x2a8>
   bc25c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bc260:	2908      	cmp	r1, #8
   bc262:	f63f af79 	bhi.w	bc158 <_strtod_l+0x1b0>
   bc266:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bc26a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc26c:	9206      	str	r2, [sp, #24]
   bc26e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc270:	1c51      	adds	r1, r2, #1
   bc272:	9117      	str	r1, [sp, #92]	; 0x5c
   bc274:	7852      	ldrb	r2, [r2, #1]
   bc276:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bc27a:	2e09      	cmp	r6, #9
   bc27c:	d937      	bls.n	bc2ee <_strtod_l+0x346>
   bc27e:	9e06      	ldr	r6, [sp, #24]
   bc280:	1b89      	subs	r1, r1, r6
   bc282:	2908      	cmp	r1, #8
   bc284:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bc288:	dc02      	bgt.n	bc290 <_strtod_l+0x2e8>
   bc28a:	4576      	cmp	r6, lr
   bc28c:	bfa8      	it	ge
   bc28e:	4676      	movge	r6, lr
   bc290:	f1bc 0f00 	cmp.w	ip, #0
   bc294:	d000      	beq.n	bc298 <_strtod_l+0x2f0>
   bc296:	4276      	negs	r6, r6
   bc298:	2d00      	cmp	r5, #0
   bc29a:	d14d      	bne.n	bc338 <_strtod_l+0x390>
   bc29c:	9904      	ldr	r1, [sp, #16]
   bc29e:	4301      	orrs	r1, r0
   bc2a0:	f47f aec6 	bne.w	bc030 <_strtod_l+0x88>
   bc2a4:	2b00      	cmp	r3, #0
   bc2a6:	f47f aee1 	bne.w	bc06c <_strtod_l+0xc4>
   bc2aa:	2a69      	cmp	r2, #105	; 0x69
   bc2ac:	d027      	beq.n	bc2fe <_strtod_l+0x356>
   bc2ae:	dc24      	bgt.n	bc2fa <_strtod_l+0x352>
   bc2b0:	2a49      	cmp	r2, #73	; 0x49
   bc2b2:	d024      	beq.n	bc2fe <_strtod_l+0x356>
   bc2b4:	2a4e      	cmp	r2, #78	; 0x4e
   bc2b6:	f47f aed9 	bne.w	bc06c <_strtod_l+0xc4>
   bc2ba:	499f      	ldr	r1, [pc, #636]	; (bc538 <_strtod_l+0x590>)
   bc2bc:	a817      	add	r0, sp, #92	; 0x5c
   bc2be:	f001 f883 	bl	bd3c8 <__match>
   bc2c2:	2800      	cmp	r0, #0
   bc2c4:	f43f aed2 	beq.w	bc06c <_strtod_l+0xc4>
   bc2c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc2ca:	781b      	ldrb	r3, [r3, #0]
   bc2cc:	2b28      	cmp	r3, #40	; 0x28
   bc2ce:	d12d      	bne.n	bc32c <_strtod_l+0x384>
   bc2d0:	499a      	ldr	r1, [pc, #616]	; (bc53c <_strtod_l+0x594>)
   bc2d2:	aa1a      	add	r2, sp, #104	; 0x68
   bc2d4:	a817      	add	r0, sp, #92	; 0x5c
   bc2d6:	f001 f88b 	bl	bd3f0 <__hexnan>
   bc2da:	2805      	cmp	r0, #5
   bc2dc:	d126      	bne.n	bc32c <_strtod_l+0x384>
   bc2de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bc2e0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bc2e4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bc2e8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bc2ec:	e6a0      	b.n	bc030 <_strtod_l+0x88>
   bc2ee:	210a      	movs	r1, #10
   bc2f0:	fb01 2e0e 	mla	lr, r1, lr, r2
   bc2f4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bc2f8:	e7b9      	b.n	bc26e <_strtod_l+0x2c6>
   bc2fa:	2a6e      	cmp	r2, #110	; 0x6e
   bc2fc:	e7db      	b.n	bc2b6 <_strtod_l+0x30e>
   bc2fe:	4990      	ldr	r1, [pc, #576]	; (bc540 <_strtod_l+0x598>)
   bc300:	a817      	add	r0, sp, #92	; 0x5c
   bc302:	f001 f861 	bl	bd3c8 <__match>
   bc306:	2800      	cmp	r0, #0
   bc308:	f43f aeb0 	beq.w	bc06c <_strtod_l+0xc4>
   bc30c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc30e:	498d      	ldr	r1, [pc, #564]	; (bc544 <_strtod_l+0x59c>)
   bc310:	3b01      	subs	r3, #1
   bc312:	a817      	add	r0, sp, #92	; 0x5c
   bc314:	9317      	str	r3, [sp, #92]	; 0x5c
   bc316:	f001 f857 	bl	bd3c8 <__match>
   bc31a:	b910      	cbnz	r0, bc322 <_strtod_l+0x37a>
   bc31c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc31e:	3301      	adds	r3, #1
   bc320:	9317      	str	r3, [sp, #92]	; 0x5c
   bc322:	f8df b230 	ldr.w	fp, [pc, #560]	; bc554 <_strtod_l+0x5ac>
   bc326:	f04f 0a00 	mov.w	sl, #0
   bc32a:	e681      	b.n	bc030 <_strtod_l+0x88>
   bc32c:	4886      	ldr	r0, [pc, #536]	; (bc548 <_strtod_l+0x5a0>)
   bc32e:	f001 fde3 	bl	bdef8 <nan>
   bc332:	ec5b ab10 	vmov	sl, fp, d0
   bc336:	e67b      	b.n	bc030 <_strtod_l+0x88>
   bc338:	9b05      	ldr	r3, [sp, #20]
   bc33a:	9807      	ldr	r0, [sp, #28]
   bc33c:	1af3      	subs	r3, r6, r3
   bc33e:	2f00      	cmp	r7, #0
   bc340:	bf08      	it	eq
   bc342:	462f      	moveq	r7, r5
   bc344:	2d10      	cmp	r5, #16
   bc346:	9306      	str	r3, [sp, #24]
   bc348:	46a8      	mov	r8, r5
   bc34a:	bfa8      	it	ge
   bc34c:	f04f 0810 	movge.w	r8, #16
   bc350:	f7ff f98e 	bl	bb670 <__aeabi_ui2d>
   bc354:	2d09      	cmp	r5, #9
   bc356:	4682      	mov	sl, r0
   bc358:	468b      	mov	fp, r1
   bc35a:	dd13      	ble.n	bc384 <_strtod_l+0x3dc>
   bc35c:	4b7b      	ldr	r3, [pc, #492]	; (bc54c <_strtod_l+0x5a4>)
   bc35e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bc362:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bc366:	f7ff f9fd 	bl	bb764 <__aeabi_dmul>
   bc36a:	4682      	mov	sl, r0
   bc36c:	4648      	mov	r0, r9
   bc36e:	468b      	mov	fp, r1
   bc370:	f7ff f97e 	bl	bb670 <__aeabi_ui2d>
   bc374:	4602      	mov	r2, r0
   bc376:	460b      	mov	r3, r1
   bc378:	4650      	mov	r0, sl
   bc37a:	4659      	mov	r1, fp
   bc37c:	f7ff f83c 	bl	bb3f8 <__adddf3>
   bc380:	4682      	mov	sl, r0
   bc382:	468b      	mov	fp, r1
   bc384:	2d0f      	cmp	r5, #15
   bc386:	dc38      	bgt.n	bc3fa <_strtod_l+0x452>
   bc388:	9b06      	ldr	r3, [sp, #24]
   bc38a:	2b00      	cmp	r3, #0
   bc38c:	f43f ae50 	beq.w	bc030 <_strtod_l+0x88>
   bc390:	dd24      	ble.n	bc3dc <_strtod_l+0x434>
   bc392:	2b16      	cmp	r3, #22
   bc394:	dc0b      	bgt.n	bc3ae <_strtod_l+0x406>
   bc396:	496d      	ldr	r1, [pc, #436]	; (bc54c <_strtod_l+0x5a4>)
   bc398:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bc39c:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc3a0:	4652      	mov	r2, sl
   bc3a2:	465b      	mov	r3, fp
   bc3a4:	f7ff f9de 	bl	bb764 <__aeabi_dmul>
   bc3a8:	4682      	mov	sl, r0
   bc3aa:	468b      	mov	fp, r1
   bc3ac:	e640      	b.n	bc030 <_strtod_l+0x88>
   bc3ae:	9a06      	ldr	r2, [sp, #24]
   bc3b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bc3b4:	4293      	cmp	r3, r2
   bc3b6:	db20      	blt.n	bc3fa <_strtod_l+0x452>
   bc3b8:	4c64      	ldr	r4, [pc, #400]	; (bc54c <_strtod_l+0x5a4>)
   bc3ba:	f1c5 050f 	rsb	r5, r5, #15
   bc3be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bc3c2:	4652      	mov	r2, sl
   bc3c4:	465b      	mov	r3, fp
   bc3c6:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc3ca:	f7ff f9cb 	bl	bb764 <__aeabi_dmul>
   bc3ce:	9b06      	ldr	r3, [sp, #24]
   bc3d0:	1b5d      	subs	r5, r3, r5
   bc3d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bc3d6:	e9d4 2300 	ldrd	r2, r3, [r4]
   bc3da:	e7e3      	b.n	bc3a4 <_strtod_l+0x3fc>
   bc3dc:	9b06      	ldr	r3, [sp, #24]
   bc3de:	3316      	adds	r3, #22
   bc3e0:	db0b      	blt.n	bc3fa <_strtod_l+0x452>
   bc3e2:	9b05      	ldr	r3, [sp, #20]
   bc3e4:	1b9e      	subs	r6, r3, r6
   bc3e6:	4b59      	ldr	r3, [pc, #356]	; (bc54c <_strtod_l+0x5a4>)
   bc3e8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bc3ec:	e9d6 2300 	ldrd	r2, r3, [r6]
   bc3f0:	4650      	mov	r0, sl
   bc3f2:	4659      	mov	r1, fp
   bc3f4:	f7ff fae0 	bl	bb9b8 <__aeabi_ddiv>
   bc3f8:	e7d6      	b.n	bc3a8 <_strtod_l+0x400>
   bc3fa:	9b06      	ldr	r3, [sp, #24]
   bc3fc:	eba5 0808 	sub.w	r8, r5, r8
   bc400:	4498      	add	r8, r3
   bc402:	f1b8 0f00 	cmp.w	r8, #0
   bc406:	dd74      	ble.n	bc4f2 <_strtod_l+0x54a>
   bc408:	f018 030f 	ands.w	r3, r8, #15
   bc40c:	d00a      	beq.n	bc424 <_strtod_l+0x47c>
   bc40e:	494f      	ldr	r1, [pc, #316]	; (bc54c <_strtod_l+0x5a4>)
   bc410:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bc414:	4652      	mov	r2, sl
   bc416:	465b      	mov	r3, fp
   bc418:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc41c:	f7ff f9a2 	bl	bb764 <__aeabi_dmul>
   bc420:	4682      	mov	sl, r0
   bc422:	468b      	mov	fp, r1
   bc424:	f038 080f 	bics.w	r8, r8, #15
   bc428:	d04f      	beq.n	bc4ca <_strtod_l+0x522>
   bc42a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bc42e:	dd22      	ble.n	bc476 <_strtod_l+0x4ce>
   bc430:	2500      	movs	r5, #0
   bc432:	462e      	mov	r6, r5
   bc434:	9507      	str	r5, [sp, #28]
   bc436:	9505      	str	r5, [sp, #20]
   bc438:	2322      	movs	r3, #34	; 0x22
   bc43a:	f8df b118 	ldr.w	fp, [pc, #280]	; bc554 <_strtod_l+0x5ac>
   bc43e:	6023      	str	r3, [r4, #0]
   bc440:	f04f 0a00 	mov.w	sl, #0
   bc444:	9b07      	ldr	r3, [sp, #28]
   bc446:	2b00      	cmp	r3, #0
   bc448:	f43f adf2 	beq.w	bc030 <_strtod_l+0x88>
   bc44c:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc44e:	4620      	mov	r0, r4
   bc450:	f001 f8c0 	bl	bd5d4 <_Bfree>
   bc454:	9905      	ldr	r1, [sp, #20]
   bc456:	4620      	mov	r0, r4
   bc458:	f001 f8bc 	bl	bd5d4 <_Bfree>
   bc45c:	4631      	mov	r1, r6
   bc45e:	4620      	mov	r0, r4
   bc460:	f001 f8b8 	bl	bd5d4 <_Bfree>
   bc464:	9907      	ldr	r1, [sp, #28]
   bc466:	4620      	mov	r0, r4
   bc468:	f001 f8b4 	bl	bd5d4 <_Bfree>
   bc46c:	4629      	mov	r1, r5
   bc46e:	4620      	mov	r0, r4
   bc470:	f001 f8b0 	bl	bd5d4 <_Bfree>
   bc474:	e5dc      	b.n	bc030 <_strtod_l+0x88>
   bc476:	4b36      	ldr	r3, [pc, #216]	; (bc550 <_strtod_l+0x5a8>)
   bc478:	9304      	str	r3, [sp, #16]
   bc47a:	2300      	movs	r3, #0
   bc47c:	ea4f 1828 	mov.w	r8, r8, asr #4
   bc480:	4650      	mov	r0, sl
   bc482:	4659      	mov	r1, fp
   bc484:	4699      	mov	r9, r3
   bc486:	f1b8 0f01 	cmp.w	r8, #1
   bc48a:	dc21      	bgt.n	bc4d0 <_strtod_l+0x528>
   bc48c:	b10b      	cbz	r3, bc492 <_strtod_l+0x4ea>
   bc48e:	4682      	mov	sl, r0
   bc490:	468b      	mov	fp, r1
   bc492:	4b2f      	ldr	r3, [pc, #188]	; (bc550 <_strtod_l+0x5a8>)
   bc494:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bc498:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bc49c:	4652      	mov	r2, sl
   bc49e:	465b      	mov	r3, fp
   bc4a0:	e9d9 0100 	ldrd	r0, r1, [r9]
   bc4a4:	f7ff f95e 	bl	bb764 <__aeabi_dmul>
   bc4a8:	4b2a      	ldr	r3, [pc, #168]	; (bc554 <_strtod_l+0x5ac>)
   bc4aa:	460a      	mov	r2, r1
   bc4ac:	400b      	ands	r3, r1
   bc4ae:	492a      	ldr	r1, [pc, #168]	; (bc558 <_strtod_l+0x5b0>)
   bc4b0:	428b      	cmp	r3, r1
   bc4b2:	4682      	mov	sl, r0
   bc4b4:	d8bc      	bhi.n	bc430 <_strtod_l+0x488>
   bc4b6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bc4ba:	428b      	cmp	r3, r1
   bc4bc:	bf86      	itte	hi
   bc4be:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bc55c <_strtod_l+0x5b4>
   bc4c2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   bc4c6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bc4ca:	2300      	movs	r3, #0
   bc4cc:	9304      	str	r3, [sp, #16]
   bc4ce:	e084      	b.n	bc5da <_strtod_l+0x632>
   bc4d0:	f018 0f01 	tst.w	r8, #1
   bc4d4:	d005      	beq.n	bc4e2 <_strtod_l+0x53a>
   bc4d6:	9b04      	ldr	r3, [sp, #16]
   bc4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc4dc:	f7ff f942 	bl	bb764 <__aeabi_dmul>
   bc4e0:	2301      	movs	r3, #1
   bc4e2:	9a04      	ldr	r2, [sp, #16]
   bc4e4:	3208      	adds	r2, #8
   bc4e6:	f109 0901 	add.w	r9, r9, #1
   bc4ea:	ea4f 0868 	mov.w	r8, r8, asr #1
   bc4ee:	9204      	str	r2, [sp, #16]
   bc4f0:	e7c9      	b.n	bc486 <_strtod_l+0x4de>
   bc4f2:	d0ea      	beq.n	bc4ca <_strtod_l+0x522>
   bc4f4:	f1c8 0800 	rsb	r8, r8, #0
   bc4f8:	f018 020f 	ands.w	r2, r8, #15
   bc4fc:	d00a      	beq.n	bc514 <_strtod_l+0x56c>
   bc4fe:	4b13      	ldr	r3, [pc, #76]	; (bc54c <_strtod_l+0x5a4>)
   bc500:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bc504:	4650      	mov	r0, sl
   bc506:	4659      	mov	r1, fp
   bc508:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc50c:	f7ff fa54 	bl	bb9b8 <__aeabi_ddiv>
   bc510:	4682      	mov	sl, r0
   bc512:	468b      	mov	fp, r1
   bc514:	ea5f 1828 	movs.w	r8, r8, asr #4
   bc518:	d0d7      	beq.n	bc4ca <_strtod_l+0x522>
   bc51a:	f1b8 0f1f 	cmp.w	r8, #31
   bc51e:	dd1f      	ble.n	bc560 <_strtod_l+0x5b8>
   bc520:	2500      	movs	r5, #0
   bc522:	462e      	mov	r6, r5
   bc524:	9507      	str	r5, [sp, #28]
   bc526:	9505      	str	r5, [sp, #20]
   bc528:	2322      	movs	r3, #34	; 0x22
   bc52a:	f04f 0a00 	mov.w	sl, #0
   bc52e:	f04f 0b00 	mov.w	fp, #0
   bc532:	6023      	str	r3, [r4, #0]
   bc534:	e786      	b.n	bc444 <_strtod_l+0x49c>
   bc536:	bf00      	nop
   bc538:	000be956 	.word	0x000be956
   bc53c:	000be970 	.word	0x000be970
   bc540:	000be94d 	.word	0x000be94d
   bc544:	000be950 	.word	0x000be950
   bc548:	000be3ca 	.word	0x000be3ca
   bc54c:	000bebb8 	.word	0x000bebb8
   bc550:	000beb90 	.word	0x000beb90
   bc554:	7ff00000 	.word	0x7ff00000
   bc558:	7ca00000 	.word	0x7ca00000
   bc55c:	7fefffff 	.word	0x7fefffff
   bc560:	f018 0310 	ands.w	r3, r8, #16
   bc564:	bf18      	it	ne
   bc566:	236a      	movne	r3, #106	; 0x6a
   bc568:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bc918 <_strtod_l+0x970>
   bc56c:	9304      	str	r3, [sp, #16]
   bc56e:	4650      	mov	r0, sl
   bc570:	4659      	mov	r1, fp
   bc572:	2300      	movs	r3, #0
   bc574:	f018 0f01 	tst.w	r8, #1
   bc578:	d004      	beq.n	bc584 <_strtod_l+0x5dc>
   bc57a:	e9d9 2300 	ldrd	r2, r3, [r9]
   bc57e:	f7ff f8f1 	bl	bb764 <__aeabi_dmul>
   bc582:	2301      	movs	r3, #1
   bc584:	ea5f 0868 	movs.w	r8, r8, asr #1
   bc588:	f109 0908 	add.w	r9, r9, #8
   bc58c:	d1f2      	bne.n	bc574 <_strtod_l+0x5cc>
   bc58e:	b10b      	cbz	r3, bc594 <_strtod_l+0x5ec>
   bc590:	4682      	mov	sl, r0
   bc592:	468b      	mov	fp, r1
   bc594:	9b04      	ldr	r3, [sp, #16]
   bc596:	b1c3      	cbz	r3, bc5ca <_strtod_l+0x622>
   bc598:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bc59c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bc5a0:	2b00      	cmp	r3, #0
   bc5a2:	4659      	mov	r1, fp
   bc5a4:	dd11      	ble.n	bc5ca <_strtod_l+0x622>
   bc5a6:	2b1f      	cmp	r3, #31
   bc5a8:	f340 8124 	ble.w	bc7f4 <_strtod_l+0x84c>
   bc5ac:	2b34      	cmp	r3, #52	; 0x34
   bc5ae:	bfde      	ittt	le
   bc5b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bc5b4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   bc5b8:	fa03 f202 	lslle.w	r2, r3, r2
   bc5bc:	f04f 0a00 	mov.w	sl, #0
   bc5c0:	bfcc      	ite	gt
   bc5c2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bc5c6:	ea02 0b01 	andle.w	fp, r2, r1
   bc5ca:	2200      	movs	r2, #0
   bc5cc:	2300      	movs	r3, #0
   bc5ce:	4650      	mov	r0, sl
   bc5d0:	4659      	mov	r1, fp
   bc5d2:	f7ff fb2f 	bl	bbc34 <__aeabi_dcmpeq>
   bc5d6:	2800      	cmp	r0, #0
   bc5d8:	d1a2      	bne.n	bc520 <_strtod_l+0x578>
   bc5da:	9b07      	ldr	r3, [sp, #28]
   bc5dc:	9300      	str	r3, [sp, #0]
   bc5de:	9908      	ldr	r1, [sp, #32]
   bc5e0:	462b      	mov	r3, r5
   bc5e2:	463a      	mov	r2, r7
   bc5e4:	4620      	mov	r0, r4
   bc5e6:	f001 f85d 	bl	bd6a4 <__s2b>
   bc5ea:	9007      	str	r0, [sp, #28]
   bc5ec:	2800      	cmp	r0, #0
   bc5ee:	f43f af1f 	beq.w	bc430 <_strtod_l+0x488>
   bc5f2:	9b05      	ldr	r3, [sp, #20]
   bc5f4:	1b9e      	subs	r6, r3, r6
   bc5f6:	9b06      	ldr	r3, [sp, #24]
   bc5f8:	2b00      	cmp	r3, #0
   bc5fa:	bfb4      	ite	lt
   bc5fc:	4633      	movlt	r3, r6
   bc5fe:	2300      	movge	r3, #0
   bc600:	930c      	str	r3, [sp, #48]	; 0x30
   bc602:	9b06      	ldr	r3, [sp, #24]
   bc604:	2500      	movs	r5, #0
   bc606:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bc60a:	9312      	str	r3, [sp, #72]	; 0x48
   bc60c:	462e      	mov	r6, r5
   bc60e:	9b07      	ldr	r3, [sp, #28]
   bc610:	4620      	mov	r0, r4
   bc612:	6859      	ldr	r1, [r3, #4]
   bc614:	f000 ff9e 	bl	bd554 <_Balloc>
   bc618:	9005      	str	r0, [sp, #20]
   bc61a:	2800      	cmp	r0, #0
   bc61c:	f43f af0c 	beq.w	bc438 <_strtod_l+0x490>
   bc620:	9b07      	ldr	r3, [sp, #28]
   bc622:	691a      	ldr	r2, [r3, #16]
   bc624:	3202      	adds	r2, #2
   bc626:	f103 010c 	add.w	r1, r3, #12
   bc62a:	0092      	lsls	r2, r2, #2
   bc62c:	300c      	adds	r0, #12
   bc62e:	f7ff fbf1 	bl	bbe14 <memcpy>
   bc632:	ec4b ab10 	vmov	d0, sl, fp
   bc636:	aa1a      	add	r2, sp, #104	; 0x68
   bc638:	a919      	add	r1, sp, #100	; 0x64
   bc63a:	4620      	mov	r0, r4
   bc63c:	f001 fb78 	bl	bdd30 <__d2b>
   bc640:	ec4b ab18 	vmov	d8, sl, fp
   bc644:	9018      	str	r0, [sp, #96]	; 0x60
   bc646:	2800      	cmp	r0, #0
   bc648:	f43f aef6 	beq.w	bc438 <_strtod_l+0x490>
   bc64c:	2101      	movs	r1, #1
   bc64e:	4620      	mov	r0, r4
   bc650:	f001 f8c2 	bl	bd7d8 <__i2b>
   bc654:	4606      	mov	r6, r0
   bc656:	2800      	cmp	r0, #0
   bc658:	f43f aeee 	beq.w	bc438 <_strtod_l+0x490>
   bc65c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bc65e:	9904      	ldr	r1, [sp, #16]
   bc660:	2b00      	cmp	r3, #0
   bc662:	bfab      	itete	ge
   bc664:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bc666:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bc668:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bc66a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bc66e:	bfac      	ite	ge
   bc670:	eb03 0902 	addge.w	r9, r3, r2
   bc674:	1ad7      	sublt	r7, r2, r3
   bc676:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bc678:	eba3 0801 	sub.w	r8, r3, r1
   bc67c:	4490      	add	r8, r2
   bc67e:	4ba1      	ldr	r3, [pc, #644]	; (bc904 <_strtod_l+0x95c>)
   bc680:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bc684:	4598      	cmp	r8, r3
   bc686:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bc68a:	f280 80c7 	bge.w	bc81c <_strtod_l+0x874>
   bc68e:	eba3 0308 	sub.w	r3, r3, r8
   bc692:	2b1f      	cmp	r3, #31
   bc694:	eba2 0203 	sub.w	r2, r2, r3
   bc698:	f04f 0101 	mov.w	r1, #1
   bc69c:	f300 80b1 	bgt.w	bc802 <_strtod_l+0x85a>
   bc6a0:	fa01 f303 	lsl.w	r3, r1, r3
   bc6a4:	930d      	str	r3, [sp, #52]	; 0x34
   bc6a6:	2300      	movs	r3, #0
   bc6a8:	9308      	str	r3, [sp, #32]
   bc6aa:	eb09 0802 	add.w	r8, r9, r2
   bc6ae:	9b04      	ldr	r3, [sp, #16]
   bc6b0:	45c1      	cmp	r9, r8
   bc6b2:	4417      	add	r7, r2
   bc6b4:	441f      	add	r7, r3
   bc6b6:	464b      	mov	r3, r9
   bc6b8:	bfa8      	it	ge
   bc6ba:	4643      	movge	r3, r8
   bc6bc:	42bb      	cmp	r3, r7
   bc6be:	bfa8      	it	ge
   bc6c0:	463b      	movge	r3, r7
   bc6c2:	2b00      	cmp	r3, #0
   bc6c4:	bfc2      	ittt	gt
   bc6c6:	eba8 0803 	subgt.w	r8, r8, r3
   bc6ca:	1aff      	subgt	r7, r7, r3
   bc6cc:	eba9 0903 	subgt.w	r9, r9, r3
   bc6d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bc6d2:	2b00      	cmp	r3, #0
   bc6d4:	dd17      	ble.n	bc706 <_strtod_l+0x75e>
   bc6d6:	4631      	mov	r1, r6
   bc6d8:	461a      	mov	r2, r3
   bc6da:	4620      	mov	r0, r4
   bc6dc:	f001 f93c 	bl	bd958 <__pow5mult>
   bc6e0:	4606      	mov	r6, r0
   bc6e2:	2800      	cmp	r0, #0
   bc6e4:	f43f aea8 	beq.w	bc438 <_strtod_l+0x490>
   bc6e8:	4601      	mov	r1, r0
   bc6ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bc6ec:	4620      	mov	r0, r4
   bc6ee:	f001 f889 	bl	bd804 <__multiply>
   bc6f2:	900b      	str	r0, [sp, #44]	; 0x2c
   bc6f4:	2800      	cmp	r0, #0
   bc6f6:	f43f ae9f 	beq.w	bc438 <_strtod_l+0x490>
   bc6fa:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc6fc:	4620      	mov	r0, r4
   bc6fe:	f000 ff69 	bl	bd5d4 <_Bfree>
   bc702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc704:	9318      	str	r3, [sp, #96]	; 0x60
   bc706:	f1b8 0f00 	cmp.w	r8, #0
   bc70a:	f300 808c 	bgt.w	bc826 <_strtod_l+0x87e>
   bc70e:	9b06      	ldr	r3, [sp, #24]
   bc710:	2b00      	cmp	r3, #0
   bc712:	dd08      	ble.n	bc726 <_strtod_l+0x77e>
   bc714:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bc716:	9905      	ldr	r1, [sp, #20]
   bc718:	4620      	mov	r0, r4
   bc71a:	f001 f91d 	bl	bd958 <__pow5mult>
   bc71e:	9005      	str	r0, [sp, #20]
   bc720:	2800      	cmp	r0, #0
   bc722:	f43f ae89 	beq.w	bc438 <_strtod_l+0x490>
   bc726:	2f00      	cmp	r7, #0
   bc728:	dd08      	ble.n	bc73c <_strtod_l+0x794>
   bc72a:	9905      	ldr	r1, [sp, #20]
   bc72c:	463a      	mov	r2, r7
   bc72e:	4620      	mov	r0, r4
   bc730:	f001 f96c 	bl	bda0c <__lshift>
   bc734:	9005      	str	r0, [sp, #20]
   bc736:	2800      	cmp	r0, #0
   bc738:	f43f ae7e 	beq.w	bc438 <_strtod_l+0x490>
   bc73c:	f1b9 0f00 	cmp.w	r9, #0
   bc740:	dd08      	ble.n	bc754 <_strtod_l+0x7ac>
   bc742:	4631      	mov	r1, r6
   bc744:	464a      	mov	r2, r9
   bc746:	4620      	mov	r0, r4
   bc748:	f001 f960 	bl	bda0c <__lshift>
   bc74c:	4606      	mov	r6, r0
   bc74e:	2800      	cmp	r0, #0
   bc750:	f43f ae72 	beq.w	bc438 <_strtod_l+0x490>
   bc754:	9a05      	ldr	r2, [sp, #20]
   bc756:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc758:	4620      	mov	r0, r4
   bc75a:	f001 f9e3 	bl	bdb24 <__mdiff>
   bc75e:	4605      	mov	r5, r0
   bc760:	2800      	cmp	r0, #0
   bc762:	f43f ae69 	beq.w	bc438 <_strtod_l+0x490>
   bc766:	68c3      	ldr	r3, [r0, #12]
   bc768:	930b      	str	r3, [sp, #44]	; 0x2c
   bc76a:	2300      	movs	r3, #0
   bc76c:	60c3      	str	r3, [r0, #12]
   bc76e:	4631      	mov	r1, r6
   bc770:	f001 f9bc 	bl	bdaec <__mcmp>
   bc774:	2800      	cmp	r0, #0
   bc776:	da60      	bge.n	bc83a <_strtod_l+0x892>
   bc778:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc77a:	ea53 030a 	orrs.w	r3, r3, sl
   bc77e:	f040 8082 	bne.w	bc886 <_strtod_l+0x8de>
   bc782:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc786:	2b00      	cmp	r3, #0
   bc788:	d17d      	bne.n	bc886 <_strtod_l+0x8de>
   bc78a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bc78e:	0d1b      	lsrs	r3, r3, #20
   bc790:	051b      	lsls	r3, r3, #20
   bc792:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bc796:	d976      	bls.n	bc886 <_strtod_l+0x8de>
   bc798:	696b      	ldr	r3, [r5, #20]
   bc79a:	b913      	cbnz	r3, bc7a2 <_strtod_l+0x7fa>
   bc79c:	692b      	ldr	r3, [r5, #16]
   bc79e:	2b01      	cmp	r3, #1
   bc7a0:	dd71      	ble.n	bc886 <_strtod_l+0x8de>
   bc7a2:	4629      	mov	r1, r5
   bc7a4:	2201      	movs	r2, #1
   bc7a6:	4620      	mov	r0, r4
   bc7a8:	f001 f930 	bl	bda0c <__lshift>
   bc7ac:	4631      	mov	r1, r6
   bc7ae:	4605      	mov	r5, r0
   bc7b0:	f001 f99c 	bl	bdaec <__mcmp>
   bc7b4:	2800      	cmp	r0, #0
   bc7b6:	dd66      	ble.n	bc886 <_strtod_l+0x8de>
   bc7b8:	9904      	ldr	r1, [sp, #16]
   bc7ba:	4a53      	ldr	r2, [pc, #332]	; (bc908 <_strtod_l+0x960>)
   bc7bc:	465b      	mov	r3, fp
   bc7be:	2900      	cmp	r1, #0
   bc7c0:	f000 8081 	beq.w	bc8c6 <_strtod_l+0x91e>
   bc7c4:	ea02 010b 	and.w	r1, r2, fp
   bc7c8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bc7cc:	dc7b      	bgt.n	bc8c6 <_strtod_l+0x91e>
   bc7ce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bc7d2:	f77f aea9 	ble.w	bc528 <_strtod_l+0x580>
   bc7d6:	4b4d      	ldr	r3, [pc, #308]	; (bc90c <_strtod_l+0x964>)
   bc7d8:	4650      	mov	r0, sl
   bc7da:	4659      	mov	r1, fp
   bc7dc:	2200      	movs	r2, #0
   bc7de:	f7fe ffc1 	bl	bb764 <__aeabi_dmul>
   bc7e2:	460b      	mov	r3, r1
   bc7e4:	4303      	orrs	r3, r0
   bc7e6:	bf08      	it	eq
   bc7e8:	2322      	moveq	r3, #34	; 0x22
   bc7ea:	4682      	mov	sl, r0
   bc7ec:	468b      	mov	fp, r1
   bc7ee:	bf08      	it	eq
   bc7f0:	6023      	streq	r3, [r4, #0]
   bc7f2:	e62b      	b.n	bc44c <_strtod_l+0x4a4>
   bc7f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc7f8:	fa02 f303 	lsl.w	r3, r2, r3
   bc7fc:	ea03 0a0a 	and.w	sl, r3, sl
   bc800:	e6e3      	b.n	bc5ca <_strtod_l+0x622>
   bc802:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bc806:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bc80a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bc80e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bc812:	fa01 f308 	lsl.w	r3, r1, r8
   bc816:	9308      	str	r3, [sp, #32]
   bc818:	910d      	str	r1, [sp, #52]	; 0x34
   bc81a:	e746      	b.n	bc6aa <_strtod_l+0x702>
   bc81c:	2300      	movs	r3, #0
   bc81e:	9308      	str	r3, [sp, #32]
   bc820:	2301      	movs	r3, #1
   bc822:	930d      	str	r3, [sp, #52]	; 0x34
   bc824:	e741      	b.n	bc6aa <_strtod_l+0x702>
   bc826:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc828:	4642      	mov	r2, r8
   bc82a:	4620      	mov	r0, r4
   bc82c:	f001 f8ee 	bl	bda0c <__lshift>
   bc830:	9018      	str	r0, [sp, #96]	; 0x60
   bc832:	2800      	cmp	r0, #0
   bc834:	f47f af6b 	bne.w	bc70e <_strtod_l+0x766>
   bc838:	e5fe      	b.n	bc438 <_strtod_l+0x490>
   bc83a:	465f      	mov	r7, fp
   bc83c:	d16e      	bne.n	bc91c <_strtod_l+0x974>
   bc83e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bc840:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc844:	b342      	cbz	r2, bc898 <_strtod_l+0x8f0>
   bc846:	4a32      	ldr	r2, [pc, #200]	; (bc910 <_strtod_l+0x968>)
   bc848:	4293      	cmp	r3, r2
   bc84a:	d128      	bne.n	bc89e <_strtod_l+0x8f6>
   bc84c:	9b04      	ldr	r3, [sp, #16]
   bc84e:	4651      	mov	r1, sl
   bc850:	b1eb      	cbz	r3, bc88e <_strtod_l+0x8e6>
   bc852:	4b2d      	ldr	r3, [pc, #180]	; (bc908 <_strtod_l+0x960>)
   bc854:	403b      	ands	r3, r7
   bc856:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bc85a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc85e:	d819      	bhi.n	bc894 <_strtod_l+0x8ec>
   bc860:	0d1b      	lsrs	r3, r3, #20
   bc862:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bc866:	fa02 f303 	lsl.w	r3, r2, r3
   bc86a:	4299      	cmp	r1, r3
   bc86c:	d117      	bne.n	bc89e <_strtod_l+0x8f6>
   bc86e:	4b29      	ldr	r3, [pc, #164]	; (bc914 <_strtod_l+0x96c>)
   bc870:	429f      	cmp	r7, r3
   bc872:	d102      	bne.n	bc87a <_strtod_l+0x8d2>
   bc874:	3101      	adds	r1, #1
   bc876:	f43f addf 	beq.w	bc438 <_strtod_l+0x490>
   bc87a:	4b23      	ldr	r3, [pc, #140]	; (bc908 <_strtod_l+0x960>)
   bc87c:	403b      	ands	r3, r7
   bc87e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bc882:	f04f 0a00 	mov.w	sl, #0
   bc886:	9b04      	ldr	r3, [sp, #16]
   bc888:	2b00      	cmp	r3, #0
   bc88a:	d1a4      	bne.n	bc7d6 <_strtod_l+0x82e>
   bc88c:	e5de      	b.n	bc44c <_strtod_l+0x4a4>
   bc88e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bc892:	e7ea      	b.n	bc86a <_strtod_l+0x8c2>
   bc894:	4613      	mov	r3, r2
   bc896:	e7e8      	b.n	bc86a <_strtod_l+0x8c2>
   bc898:	ea53 030a 	orrs.w	r3, r3, sl
   bc89c:	d08c      	beq.n	bc7b8 <_strtod_l+0x810>
   bc89e:	9b08      	ldr	r3, [sp, #32]
   bc8a0:	b1db      	cbz	r3, bc8da <_strtod_l+0x932>
   bc8a2:	423b      	tst	r3, r7
   bc8a4:	d0ef      	beq.n	bc886 <_strtod_l+0x8de>
   bc8a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc8a8:	9a04      	ldr	r2, [sp, #16]
   bc8aa:	4650      	mov	r0, sl
   bc8ac:	4659      	mov	r1, fp
   bc8ae:	b1c3      	cbz	r3, bc8e2 <_strtod_l+0x93a>
   bc8b0:	f7ff fb5e 	bl	bbf70 <sulp>
   bc8b4:	4602      	mov	r2, r0
   bc8b6:	460b      	mov	r3, r1
   bc8b8:	ec51 0b18 	vmov	r0, r1, d8
   bc8bc:	f7fe fd9c 	bl	bb3f8 <__adddf3>
   bc8c0:	4682      	mov	sl, r0
   bc8c2:	468b      	mov	fp, r1
   bc8c4:	e7df      	b.n	bc886 <_strtod_l+0x8de>
   bc8c6:	4013      	ands	r3, r2
   bc8c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bc8cc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bc8d0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bc8d4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bc8d8:	e7d5      	b.n	bc886 <_strtod_l+0x8de>
   bc8da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bc8dc:	ea13 0f0a 	tst.w	r3, sl
   bc8e0:	e7e0      	b.n	bc8a4 <_strtod_l+0x8fc>
   bc8e2:	f7ff fb45 	bl	bbf70 <sulp>
   bc8e6:	4602      	mov	r2, r0
   bc8e8:	460b      	mov	r3, r1
   bc8ea:	ec51 0b18 	vmov	r0, r1, d8
   bc8ee:	f7fe fd81 	bl	bb3f4 <__aeabi_dsub>
   bc8f2:	2200      	movs	r2, #0
   bc8f4:	2300      	movs	r3, #0
   bc8f6:	4682      	mov	sl, r0
   bc8f8:	468b      	mov	fp, r1
   bc8fa:	f7ff f99b 	bl	bbc34 <__aeabi_dcmpeq>
   bc8fe:	2800      	cmp	r0, #0
   bc900:	d0c1      	beq.n	bc886 <_strtod_l+0x8de>
   bc902:	e611      	b.n	bc528 <_strtod_l+0x580>
   bc904:	fffffc02 	.word	0xfffffc02
   bc908:	7ff00000 	.word	0x7ff00000
   bc90c:	39500000 	.word	0x39500000
   bc910:	000fffff 	.word	0x000fffff
   bc914:	7fefffff 	.word	0x7fefffff
   bc918:	000be988 	.word	0x000be988
   bc91c:	4631      	mov	r1, r6
   bc91e:	4628      	mov	r0, r5
   bc920:	f001 fa62 	bl	bdde8 <__ratio>
   bc924:	ec59 8b10 	vmov	r8, r9, d0
   bc928:	ee10 0a10 	vmov	r0, s0
   bc92c:	2200      	movs	r2, #0
   bc92e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bc932:	4649      	mov	r1, r9
   bc934:	f7ff f992 	bl	bbc5c <__aeabi_dcmple>
   bc938:	2800      	cmp	r0, #0
   bc93a:	d07a      	beq.n	bca32 <_strtod_l+0xa8a>
   bc93c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc93e:	2b00      	cmp	r3, #0
   bc940:	d04a      	beq.n	bc9d8 <_strtod_l+0xa30>
   bc942:	4b95      	ldr	r3, [pc, #596]	; (bcb98 <_strtod_l+0xbf0>)
   bc944:	2200      	movs	r2, #0
   bc946:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc94a:	f8df 924c 	ldr.w	r9, [pc, #588]	; bcb98 <_strtod_l+0xbf0>
   bc94e:	f04f 0800 	mov.w	r8, #0
   bc952:	4b92      	ldr	r3, [pc, #584]	; (bcb9c <_strtod_l+0xbf4>)
   bc954:	403b      	ands	r3, r7
   bc956:	930d      	str	r3, [sp, #52]	; 0x34
   bc958:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc95a:	4b91      	ldr	r3, [pc, #580]	; (bcba0 <_strtod_l+0xbf8>)
   bc95c:	429a      	cmp	r2, r3
   bc95e:	f040 80b0 	bne.w	bcac2 <_strtod_l+0xb1a>
   bc962:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc966:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bc96a:	ec4b ab10 	vmov	d0, sl, fp
   bc96e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bc972:	f001 f961 	bl	bdc38 <__ulp>
   bc976:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc97a:	ec53 2b10 	vmov	r2, r3, d0
   bc97e:	f7fe fef1 	bl	bb764 <__aeabi_dmul>
   bc982:	4652      	mov	r2, sl
   bc984:	465b      	mov	r3, fp
   bc986:	f7fe fd37 	bl	bb3f8 <__adddf3>
   bc98a:	460b      	mov	r3, r1
   bc98c:	4983      	ldr	r1, [pc, #524]	; (bcb9c <_strtod_l+0xbf4>)
   bc98e:	4a85      	ldr	r2, [pc, #532]	; (bcba4 <_strtod_l+0xbfc>)
   bc990:	4019      	ands	r1, r3
   bc992:	4291      	cmp	r1, r2
   bc994:	4682      	mov	sl, r0
   bc996:	d960      	bls.n	bca5a <_strtod_l+0xab2>
   bc998:	ee18 3a90 	vmov	r3, s17
   bc99c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bc9a0:	4293      	cmp	r3, r2
   bc9a2:	d104      	bne.n	bc9ae <_strtod_l+0xa06>
   bc9a4:	ee18 3a10 	vmov	r3, s16
   bc9a8:	3301      	adds	r3, #1
   bc9aa:	f43f ad45 	beq.w	bc438 <_strtod_l+0x490>
   bc9ae:	f8df b200 	ldr.w	fp, [pc, #512]	; bcbb0 <_strtod_l+0xc08>
   bc9b2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bc9b6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc9b8:	4620      	mov	r0, r4
   bc9ba:	f000 fe0b 	bl	bd5d4 <_Bfree>
   bc9be:	9905      	ldr	r1, [sp, #20]
   bc9c0:	4620      	mov	r0, r4
   bc9c2:	f000 fe07 	bl	bd5d4 <_Bfree>
   bc9c6:	4631      	mov	r1, r6
   bc9c8:	4620      	mov	r0, r4
   bc9ca:	f000 fe03 	bl	bd5d4 <_Bfree>
   bc9ce:	4629      	mov	r1, r5
   bc9d0:	4620      	mov	r0, r4
   bc9d2:	f000 fdff 	bl	bd5d4 <_Bfree>
   bc9d6:	e61a      	b.n	bc60e <_strtod_l+0x666>
   bc9d8:	f1ba 0f00 	cmp.w	sl, #0
   bc9dc:	d11b      	bne.n	bca16 <_strtod_l+0xa6e>
   bc9de:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc9e2:	b9f3      	cbnz	r3, bca22 <_strtod_l+0xa7a>
   bc9e4:	4b6c      	ldr	r3, [pc, #432]	; (bcb98 <_strtod_l+0xbf0>)
   bc9e6:	2200      	movs	r2, #0
   bc9e8:	4640      	mov	r0, r8
   bc9ea:	4649      	mov	r1, r9
   bc9ec:	f7ff f92c 	bl	bbc48 <__aeabi_dcmplt>
   bc9f0:	b9d0      	cbnz	r0, bca28 <_strtod_l+0xa80>
   bc9f2:	4640      	mov	r0, r8
   bc9f4:	4649      	mov	r1, r9
   bc9f6:	4b6c      	ldr	r3, [pc, #432]	; (bcba8 <_strtod_l+0xc00>)
   bc9f8:	2200      	movs	r2, #0
   bc9fa:	f7fe feb3 	bl	bb764 <__aeabi_dmul>
   bc9fe:	4680      	mov	r8, r0
   bca00:	4689      	mov	r9, r1
   bca02:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bca06:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bca0a:	9315      	str	r3, [sp, #84]	; 0x54
   bca0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bca10:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bca14:	e79d      	b.n	bc952 <_strtod_l+0x9aa>
   bca16:	f1ba 0f01 	cmp.w	sl, #1
   bca1a:	d102      	bne.n	bca22 <_strtod_l+0xa7a>
   bca1c:	2f00      	cmp	r7, #0
   bca1e:	f43f ad83 	beq.w	bc528 <_strtod_l+0x580>
   bca22:	4b62      	ldr	r3, [pc, #392]	; (bcbac <_strtod_l+0xc04>)
   bca24:	2200      	movs	r2, #0
   bca26:	e78e      	b.n	bc946 <_strtod_l+0x99e>
   bca28:	f8df 917c 	ldr.w	r9, [pc, #380]	; bcba8 <_strtod_l+0xc00>
   bca2c:	f04f 0800 	mov.w	r8, #0
   bca30:	e7e7      	b.n	bca02 <_strtod_l+0xa5a>
   bca32:	4b5d      	ldr	r3, [pc, #372]	; (bcba8 <_strtod_l+0xc00>)
   bca34:	4640      	mov	r0, r8
   bca36:	4649      	mov	r1, r9
   bca38:	2200      	movs	r2, #0
   bca3a:	f7fe fe93 	bl	bb764 <__aeabi_dmul>
   bca3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bca40:	4680      	mov	r8, r0
   bca42:	4689      	mov	r9, r1
   bca44:	b933      	cbnz	r3, bca54 <_strtod_l+0xaac>
   bca46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bca4a:	900e      	str	r0, [sp, #56]	; 0x38
   bca4c:	930f      	str	r3, [sp, #60]	; 0x3c
   bca4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bca52:	e7dd      	b.n	bca10 <_strtod_l+0xa68>
   bca54:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bca58:	e7f9      	b.n	bca4e <_strtod_l+0xaa6>
   bca5a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bca5e:	9b04      	ldr	r3, [sp, #16]
   bca60:	2b00      	cmp	r3, #0
   bca62:	d1a8      	bne.n	bc9b6 <_strtod_l+0xa0e>
   bca64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bca68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bca6a:	0d1b      	lsrs	r3, r3, #20
   bca6c:	051b      	lsls	r3, r3, #20
   bca6e:	429a      	cmp	r2, r3
   bca70:	d1a1      	bne.n	bc9b6 <_strtod_l+0xa0e>
   bca72:	4640      	mov	r0, r8
   bca74:	4649      	mov	r1, r9
   bca76:	f001 fa5b 	bl	bdf30 <__aeabi_d2lz>
   bca7a:	f7fe fe45 	bl	bb708 <__aeabi_l2d>
   bca7e:	4602      	mov	r2, r0
   bca80:	460b      	mov	r3, r1
   bca82:	4640      	mov	r0, r8
   bca84:	4649      	mov	r1, r9
   bca86:	f7fe fcb5 	bl	bb3f4 <__aeabi_dsub>
   bca8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bca8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bca90:	ea43 030a 	orr.w	r3, r3, sl
   bca94:	4313      	orrs	r3, r2
   bca96:	4680      	mov	r8, r0
   bca98:	4689      	mov	r9, r1
   bca9a:	d055      	beq.n	bcb48 <_strtod_l+0xba0>
   bca9c:	a336      	add	r3, pc, #216	; (adr r3, bcb78 <_strtod_l+0xbd0>)
   bca9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcaa2:	f7ff f8d1 	bl	bbc48 <__aeabi_dcmplt>
   bcaa6:	2800      	cmp	r0, #0
   bcaa8:	f47f acd0 	bne.w	bc44c <_strtod_l+0x4a4>
   bcaac:	a334      	add	r3, pc, #208	; (adr r3, bcb80 <_strtod_l+0xbd8>)
   bcaae:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcab2:	4640      	mov	r0, r8
   bcab4:	4649      	mov	r1, r9
   bcab6:	f7ff f8e5 	bl	bbc84 <__aeabi_dcmpgt>
   bcaba:	2800      	cmp	r0, #0
   bcabc:	f43f af7b 	beq.w	bc9b6 <_strtod_l+0xa0e>
   bcac0:	e4c4      	b.n	bc44c <_strtod_l+0x4a4>
   bcac2:	9b04      	ldr	r3, [sp, #16]
   bcac4:	b333      	cbz	r3, bcb14 <_strtod_l+0xb6c>
   bcac6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bcac8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bcacc:	d822      	bhi.n	bcb14 <_strtod_l+0xb6c>
   bcace:	a32e      	add	r3, pc, #184	; (adr r3, bcb88 <_strtod_l+0xbe0>)
   bcad0:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcad4:	4640      	mov	r0, r8
   bcad6:	4649      	mov	r1, r9
   bcad8:	f7ff f8c0 	bl	bbc5c <__aeabi_dcmple>
   bcadc:	b1a0      	cbz	r0, bcb08 <_strtod_l+0xb60>
   bcade:	4649      	mov	r1, r9
   bcae0:	4640      	mov	r0, r8
   bcae2:	f7ff f8ef 	bl	bbcc4 <__aeabi_d2uiz>
   bcae6:	2801      	cmp	r0, #1
   bcae8:	bf38      	it	cc
   bcaea:	2001      	movcc	r0, #1
   bcaec:	f7fe fdc0 	bl	bb670 <__aeabi_ui2d>
   bcaf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bcaf2:	4680      	mov	r8, r0
   bcaf4:	4689      	mov	r9, r1
   bcaf6:	bb23      	cbnz	r3, bcb42 <_strtod_l+0xb9a>
   bcaf8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bcafc:	9010      	str	r0, [sp, #64]	; 0x40
   bcafe:	9311      	str	r3, [sp, #68]	; 0x44
   bcb00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bcb04:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bcb08:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bcb0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bcb0c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bcb10:	1a9b      	subs	r3, r3, r2
   bcb12:	9309      	str	r3, [sp, #36]	; 0x24
   bcb14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bcb18:	eeb0 0a48 	vmov.f32	s0, s16
   bcb1c:	eef0 0a68 	vmov.f32	s1, s17
   bcb20:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bcb24:	f001 f888 	bl	bdc38 <__ulp>
   bcb28:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bcb2c:	ec53 2b10 	vmov	r2, r3, d0
   bcb30:	f7fe fe18 	bl	bb764 <__aeabi_dmul>
   bcb34:	ec53 2b18 	vmov	r2, r3, d8
   bcb38:	f7fe fc5e 	bl	bb3f8 <__adddf3>
   bcb3c:	4682      	mov	sl, r0
   bcb3e:	468b      	mov	fp, r1
   bcb40:	e78d      	b.n	bca5e <_strtod_l+0xab6>
   bcb42:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bcb46:	e7db      	b.n	bcb00 <_strtod_l+0xb58>
   bcb48:	a311      	add	r3, pc, #68	; (adr r3, bcb90 <_strtod_l+0xbe8>)
   bcb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcb4e:	f7ff f87b 	bl	bbc48 <__aeabi_dcmplt>
   bcb52:	e7b2      	b.n	bcaba <_strtod_l+0xb12>
   bcb54:	2300      	movs	r3, #0
   bcb56:	930a      	str	r3, [sp, #40]	; 0x28
   bcb58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bcb5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bcb5c:	6013      	str	r3, [r2, #0]
   bcb5e:	f7ff ba6b 	b.w	bc038 <_strtod_l+0x90>
   bcb62:	2a65      	cmp	r2, #101	; 0x65
   bcb64:	f43f ab5f 	beq.w	bc226 <_strtod_l+0x27e>
   bcb68:	2a45      	cmp	r2, #69	; 0x45
   bcb6a:	f43f ab5c 	beq.w	bc226 <_strtod_l+0x27e>
   bcb6e:	2301      	movs	r3, #1
   bcb70:	f7ff bb94 	b.w	bc29c <_strtod_l+0x2f4>
   bcb74:	f3af 8000 	nop.w
   bcb78:	94a03595 	.word	0x94a03595
   bcb7c:	3fdfffff 	.word	0x3fdfffff
   bcb80:	35afe535 	.word	0x35afe535
   bcb84:	3fe00000 	.word	0x3fe00000
   bcb88:	ffc00000 	.word	0xffc00000
   bcb8c:	41dfffff 	.word	0x41dfffff
   bcb90:	94a03595 	.word	0x94a03595
   bcb94:	3fcfffff 	.word	0x3fcfffff
   bcb98:	3ff00000 	.word	0x3ff00000
   bcb9c:	7ff00000 	.word	0x7ff00000
   bcba0:	7fe00000 	.word	0x7fe00000
   bcba4:	7c9fffff 	.word	0x7c9fffff
   bcba8:	3fe00000 	.word	0x3fe00000
   bcbac:	bff00000 	.word	0xbff00000
   bcbb0:	7fefffff 	.word	0x7fefffff

000bcbb4 <strtof>:
   bcbb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bcbb8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; bcc68 <strtof+0xb4>
   bcbbc:	4b26      	ldr	r3, [pc, #152]	; (bcc58 <strtof+0xa4>)
   bcbbe:	460a      	mov	r2, r1
   bcbc0:	ed2d 8b02 	vpush	{d8}
   bcbc4:	4601      	mov	r1, r0
   bcbc6:	f8d8 0000 	ldr.w	r0, [r8]
   bcbca:	f7ff f9ed 	bl	bbfa8 <_strtod_l>
   bcbce:	ec55 4b10 	vmov	r4, r5, d0
   bcbd2:	ee10 2a10 	vmov	r2, s0
   bcbd6:	ee10 0a10 	vmov	r0, s0
   bcbda:	462b      	mov	r3, r5
   bcbdc:	4629      	mov	r1, r5
   bcbde:	f7ff f85b 	bl	bbc98 <__aeabi_dcmpun>
   bcbe2:	b190      	cbz	r0, bcc0a <strtof+0x56>
   bcbe4:	2d00      	cmp	r5, #0
   bcbe6:	481d      	ldr	r0, [pc, #116]	; (bcc5c <strtof+0xa8>)
   bcbe8:	da09      	bge.n	bcbfe <strtof+0x4a>
   bcbea:	f001 f98d 	bl	bdf08 <nanf>
   bcbee:	eeb1 8a40 	vneg.f32	s16, s0
   bcbf2:	eeb0 0a48 	vmov.f32	s0, s16
   bcbf6:	ecbd 8b02 	vpop	{d8}
   bcbfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bcbfe:	ecbd 8b02 	vpop	{d8}
   bcc02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bcc06:	f001 b97f 	b.w	bdf08 <nanf>
   bcc0a:	4620      	mov	r0, r4
   bcc0c:	4629      	mov	r1, r5
   bcc0e:	f7ff f879 	bl	bbd04 <__aeabi_d2f>
   bcc12:	ee08 0a10 	vmov	s16, r0
   bcc16:	eddf 7a12 	vldr	s15, [pc, #72]	; bcc60 <strtof+0xac>
   bcc1a:	eeb0 7ac8 	vabs.f32	s14, s16
   bcc1e:	eeb4 7a67 	vcmp.f32	s14, s15
   bcc22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bcc26:	dde4      	ble.n	bcbf2 <strtof+0x3e>
   bcc28:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   bcc2c:	4b0d      	ldr	r3, [pc, #52]	; (bcc64 <strtof+0xb0>)
   bcc2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bcc32:	4620      	mov	r0, r4
   bcc34:	4639      	mov	r1, r7
   bcc36:	f7ff f82f 	bl	bbc98 <__aeabi_dcmpun>
   bcc3a:	b940      	cbnz	r0, bcc4e <strtof+0x9a>
   bcc3c:	4b09      	ldr	r3, [pc, #36]	; (bcc64 <strtof+0xb0>)
   bcc3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bcc42:	4620      	mov	r0, r4
   bcc44:	4639      	mov	r1, r7
   bcc46:	f7ff f809 	bl	bbc5c <__aeabi_dcmple>
   bcc4a:	2800      	cmp	r0, #0
   bcc4c:	d0d1      	beq.n	bcbf2 <strtof+0x3e>
   bcc4e:	f8d8 3000 	ldr.w	r3, [r8]
   bcc52:	2222      	movs	r2, #34	; 0x22
   bcc54:	601a      	str	r2, [r3, #0]
   bcc56:	e7cc      	b.n	bcbf2 <strtof+0x3e>
   bcc58:	200351a4 	.word	0x200351a4
   bcc5c:	000be3ca 	.word	0x000be3ca
   bcc60:	7f7fffff 	.word	0x7f7fffff
   bcc64:	7fefffff 	.word	0x7fefffff
   bcc68:	20035138 	.word	0x20035138

000bcc6c <_strtol_l.constprop.0>:
   bcc6c:	2b01      	cmp	r3, #1
   bcc6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bcc72:	d001      	beq.n	bcc78 <_strtol_l.constprop.0+0xc>
   bcc74:	2b24      	cmp	r3, #36	; 0x24
   bcc76:	d906      	bls.n	bcc86 <_strtol_l.constprop.0+0x1a>
   bcc78:	f7fb fd9e 	bl	b87b8 <__errno>
   bcc7c:	2316      	movs	r3, #22
   bcc7e:	6003      	str	r3, [r0, #0]
   bcc80:	2000      	movs	r0, #0
   bcc82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bcc86:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bcd6c <_strtol_l.constprop.0+0x100>
   bcc8a:	460d      	mov	r5, r1
   bcc8c:	462e      	mov	r6, r5
   bcc8e:	f815 4b01 	ldrb.w	r4, [r5], #1
   bcc92:	f814 700c 	ldrb.w	r7, [r4, ip]
   bcc96:	f017 0708 	ands.w	r7, r7, #8
   bcc9a:	d1f7      	bne.n	bcc8c <_strtol_l.constprop.0+0x20>
   bcc9c:	2c2d      	cmp	r4, #45	; 0x2d
   bcc9e:	d132      	bne.n	bcd06 <_strtol_l.constprop.0+0x9a>
   bcca0:	782c      	ldrb	r4, [r5, #0]
   bcca2:	2701      	movs	r7, #1
   bcca4:	1cb5      	adds	r5, r6, #2
   bcca6:	2b00      	cmp	r3, #0
   bcca8:	d05b      	beq.n	bcd62 <_strtol_l.constprop.0+0xf6>
   bccaa:	2b10      	cmp	r3, #16
   bccac:	d109      	bne.n	bccc2 <_strtol_l.constprop.0+0x56>
   bccae:	2c30      	cmp	r4, #48	; 0x30
   bccb0:	d107      	bne.n	bccc2 <_strtol_l.constprop.0+0x56>
   bccb2:	782c      	ldrb	r4, [r5, #0]
   bccb4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bccb8:	2c58      	cmp	r4, #88	; 0x58
   bccba:	d14d      	bne.n	bcd58 <_strtol_l.constprop.0+0xec>
   bccbc:	786c      	ldrb	r4, [r5, #1]
   bccbe:	2310      	movs	r3, #16
   bccc0:	3502      	adds	r5, #2
   bccc2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bccc6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bccca:	f04f 0c00 	mov.w	ip, #0
   bccce:	fbb8 f9f3 	udiv	r9, r8, r3
   bccd2:	4666      	mov	r6, ip
   bccd4:	fb03 8a19 	mls	sl, r3, r9, r8
   bccd8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bccdc:	f1be 0f09 	cmp.w	lr, #9
   bcce0:	d816      	bhi.n	bcd10 <_strtol_l.constprop.0+0xa4>
   bcce2:	4674      	mov	r4, lr
   bcce4:	42a3      	cmp	r3, r4
   bcce6:	dd24      	ble.n	bcd32 <_strtol_l.constprop.0+0xc6>
   bcce8:	f1bc 0f00 	cmp.w	ip, #0
   bccec:	db1e      	blt.n	bcd2c <_strtol_l.constprop.0+0xc0>
   bccee:	45b1      	cmp	r9, r6
   bccf0:	d31c      	bcc.n	bcd2c <_strtol_l.constprop.0+0xc0>
   bccf2:	d101      	bne.n	bccf8 <_strtol_l.constprop.0+0x8c>
   bccf4:	45a2      	cmp	sl, r4
   bccf6:	db19      	blt.n	bcd2c <_strtol_l.constprop.0+0xc0>
   bccf8:	fb06 4603 	mla	r6, r6, r3, r4
   bccfc:	f04f 0c01 	mov.w	ip, #1
   bcd00:	f815 4b01 	ldrb.w	r4, [r5], #1
   bcd04:	e7e8      	b.n	bccd8 <_strtol_l.constprop.0+0x6c>
   bcd06:	2c2b      	cmp	r4, #43	; 0x2b
   bcd08:	bf04      	itt	eq
   bcd0a:	782c      	ldrbeq	r4, [r5, #0]
   bcd0c:	1cb5      	addeq	r5, r6, #2
   bcd0e:	e7ca      	b.n	bcca6 <_strtol_l.constprop.0+0x3a>
   bcd10:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bcd14:	f1be 0f19 	cmp.w	lr, #25
   bcd18:	d801      	bhi.n	bcd1e <_strtol_l.constprop.0+0xb2>
   bcd1a:	3c37      	subs	r4, #55	; 0x37
   bcd1c:	e7e2      	b.n	bcce4 <_strtol_l.constprop.0+0x78>
   bcd1e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bcd22:	f1be 0f19 	cmp.w	lr, #25
   bcd26:	d804      	bhi.n	bcd32 <_strtol_l.constprop.0+0xc6>
   bcd28:	3c57      	subs	r4, #87	; 0x57
   bcd2a:	e7db      	b.n	bcce4 <_strtol_l.constprop.0+0x78>
   bcd2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bcd30:	e7e6      	b.n	bcd00 <_strtol_l.constprop.0+0x94>
   bcd32:	f1bc 0f00 	cmp.w	ip, #0
   bcd36:	da05      	bge.n	bcd44 <_strtol_l.constprop.0+0xd8>
   bcd38:	2322      	movs	r3, #34	; 0x22
   bcd3a:	6003      	str	r3, [r0, #0]
   bcd3c:	4646      	mov	r6, r8
   bcd3e:	b942      	cbnz	r2, bcd52 <_strtol_l.constprop.0+0xe6>
   bcd40:	4630      	mov	r0, r6
   bcd42:	e79e      	b.n	bcc82 <_strtol_l.constprop.0+0x16>
   bcd44:	b107      	cbz	r7, bcd48 <_strtol_l.constprop.0+0xdc>
   bcd46:	4276      	negs	r6, r6
   bcd48:	2a00      	cmp	r2, #0
   bcd4a:	d0f9      	beq.n	bcd40 <_strtol_l.constprop.0+0xd4>
   bcd4c:	f1bc 0f00 	cmp.w	ip, #0
   bcd50:	d000      	beq.n	bcd54 <_strtol_l.constprop.0+0xe8>
   bcd52:	1e69      	subs	r1, r5, #1
   bcd54:	6011      	str	r1, [r2, #0]
   bcd56:	e7f3      	b.n	bcd40 <_strtol_l.constprop.0+0xd4>
   bcd58:	2430      	movs	r4, #48	; 0x30
   bcd5a:	2b00      	cmp	r3, #0
   bcd5c:	d1b1      	bne.n	bccc2 <_strtol_l.constprop.0+0x56>
   bcd5e:	2308      	movs	r3, #8
   bcd60:	e7af      	b.n	bccc2 <_strtol_l.constprop.0+0x56>
   bcd62:	2c30      	cmp	r4, #48	; 0x30
   bcd64:	d0a5      	beq.n	bccb2 <_strtol_l.constprop.0+0x46>
   bcd66:	230a      	movs	r3, #10
   bcd68:	e7ab      	b.n	bccc2 <_strtol_l.constprop.0+0x56>
   bcd6a:	bf00      	nop
   bcd6c:	000be9b1 	.word	0x000be9b1

000bcd70 <strtol>:
   bcd70:	4613      	mov	r3, r2
   bcd72:	460a      	mov	r2, r1
   bcd74:	4601      	mov	r1, r0
   bcd76:	4802      	ldr	r0, [pc, #8]	; (bcd80 <strtol+0x10>)
   bcd78:	6800      	ldr	r0, [r0, #0]
   bcd7a:	f7ff bf77 	b.w	bcc6c <_strtol_l.constprop.0>
   bcd7e:	bf00      	nop
   bcd80:	20035138 	.word	0x20035138

000bcd84 <__register_exitproc>:
   bcd84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bcd88:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bce44 <__register_exitproc+0xc0>
   bcd8c:	4606      	mov	r6, r0
   bcd8e:	f8d8 0000 	ldr.w	r0, [r8]
   bcd92:	461f      	mov	r7, r3
   bcd94:	460d      	mov	r5, r1
   bcd96:	4691      	mov	r9, r2
   bcd98:	f000 fbc6 	bl	bd528 <__retarget_lock_acquire_recursive>
   bcd9c:	4b25      	ldr	r3, [pc, #148]	; (bce34 <__register_exitproc+0xb0>)
   bcd9e:	681c      	ldr	r4, [r3, #0]
   bcda0:	b934      	cbnz	r4, bcdb0 <__register_exitproc+0x2c>
   bcda2:	4c25      	ldr	r4, [pc, #148]	; (bce38 <__register_exitproc+0xb4>)
   bcda4:	601c      	str	r4, [r3, #0]
   bcda6:	4b25      	ldr	r3, [pc, #148]	; (bce3c <__register_exitproc+0xb8>)
   bcda8:	b113      	cbz	r3, bcdb0 <__register_exitproc+0x2c>
   bcdaa:	681b      	ldr	r3, [r3, #0]
   bcdac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bcdb0:	6863      	ldr	r3, [r4, #4]
   bcdb2:	2b1f      	cmp	r3, #31
   bcdb4:	dd07      	ble.n	bcdc6 <__register_exitproc+0x42>
   bcdb6:	f8d8 0000 	ldr.w	r0, [r8]
   bcdba:	f000 fbb7 	bl	bd52c <__retarget_lock_release_recursive>
   bcdbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bcdc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bcdc6:	b34e      	cbz	r6, bce1c <__register_exitproc+0x98>
   bcdc8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bcdcc:	b988      	cbnz	r0, bcdf2 <__register_exitproc+0x6e>
   bcdce:	4b1c      	ldr	r3, [pc, #112]	; (bce40 <__register_exitproc+0xbc>)
   bcdd0:	b923      	cbnz	r3, bcddc <__register_exitproc+0x58>
   bcdd2:	f8d8 0000 	ldr.w	r0, [r8]
   bcdd6:	f000 fba8 	bl	bd52a <__retarget_lock_release>
   bcdda:	e7f0      	b.n	bcdbe <__register_exitproc+0x3a>
   bcddc:	f44f 7084 	mov.w	r0, #264	; 0x108
   bcde0:	f7fb fcb2 	bl	b8748 <malloc>
   bcde4:	2800      	cmp	r0, #0
   bcde6:	d0f4      	beq.n	bcdd2 <__register_exitproc+0x4e>
   bcde8:	2300      	movs	r3, #0
   bcdea:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bcdee:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bcdf2:	6863      	ldr	r3, [r4, #4]
   bcdf4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bcdf8:	2201      	movs	r2, #1
   bcdfa:	409a      	lsls	r2, r3
   bcdfc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bce00:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bce04:	4313      	orrs	r3, r2
   bce06:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bce0a:	2e02      	cmp	r6, #2
   bce0c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bce10:	bf02      	ittt	eq
   bce12:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bce16:	4313      	orreq	r3, r2
   bce18:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bce1c:	6863      	ldr	r3, [r4, #4]
   bce1e:	f8d8 0000 	ldr.w	r0, [r8]
   bce22:	1c5a      	adds	r2, r3, #1
   bce24:	3302      	adds	r3, #2
   bce26:	6062      	str	r2, [r4, #4]
   bce28:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bce2c:	f000 fb7e 	bl	bd52c <__retarget_lock_release_recursive>
   bce30:	2000      	movs	r0, #0
   bce32:	e7c6      	b.n	bcdc2 <__register_exitproc+0x3e>
   bce34:	2003e7e8 	.word	0x2003e7e8
   bce38:	2003e75c 	.word	0x2003e75c
   bce3c:	00000000 	.word	0x00000000
   bce40:	000b8749 	.word	0x000b8749
   bce44:	2003519c 	.word	0x2003519c

000bce48 <rshift>:
   bce48:	6903      	ldr	r3, [r0, #16]
   bce4a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bce4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bce52:	ea4f 1261 	mov.w	r2, r1, asr #5
   bce56:	f100 0414 	add.w	r4, r0, #20
   bce5a:	dd45      	ble.n	bcee8 <rshift+0xa0>
   bce5c:	f011 011f 	ands.w	r1, r1, #31
   bce60:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bce64:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bce68:	d10c      	bne.n	bce84 <rshift+0x3c>
   bce6a:	f100 0710 	add.w	r7, r0, #16
   bce6e:	4629      	mov	r1, r5
   bce70:	42b1      	cmp	r1, r6
   bce72:	d334      	bcc.n	bcede <rshift+0x96>
   bce74:	1a9b      	subs	r3, r3, r2
   bce76:	009b      	lsls	r3, r3, #2
   bce78:	1eea      	subs	r2, r5, #3
   bce7a:	4296      	cmp	r6, r2
   bce7c:	bf38      	it	cc
   bce7e:	2300      	movcc	r3, #0
   bce80:	4423      	add	r3, r4
   bce82:	e015      	b.n	bceb0 <rshift+0x68>
   bce84:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bce88:	f1c1 0820 	rsb	r8, r1, #32
   bce8c:	40cf      	lsrs	r7, r1
   bce8e:	f105 0e04 	add.w	lr, r5, #4
   bce92:	46a1      	mov	r9, r4
   bce94:	4576      	cmp	r6, lr
   bce96:	46f4      	mov	ip, lr
   bce98:	d815      	bhi.n	bcec6 <rshift+0x7e>
   bce9a:	1a9a      	subs	r2, r3, r2
   bce9c:	0092      	lsls	r2, r2, #2
   bce9e:	3a04      	subs	r2, #4
   bcea0:	3501      	adds	r5, #1
   bcea2:	42ae      	cmp	r6, r5
   bcea4:	bf38      	it	cc
   bcea6:	2200      	movcc	r2, #0
   bcea8:	18a3      	adds	r3, r4, r2
   bceaa:	50a7      	str	r7, [r4, r2]
   bceac:	b107      	cbz	r7, bceb0 <rshift+0x68>
   bceae:	3304      	adds	r3, #4
   bceb0:	1b1a      	subs	r2, r3, r4
   bceb2:	42a3      	cmp	r3, r4
   bceb4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bceb8:	bf08      	it	eq
   bceba:	2300      	moveq	r3, #0
   bcebc:	6102      	str	r2, [r0, #16]
   bcebe:	bf08      	it	eq
   bcec0:	6143      	streq	r3, [r0, #20]
   bcec2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bcec6:	f8dc c000 	ldr.w	ip, [ip]
   bceca:	fa0c fc08 	lsl.w	ip, ip, r8
   bcece:	ea4c 0707 	orr.w	r7, ip, r7
   bced2:	f849 7b04 	str.w	r7, [r9], #4
   bced6:	f85e 7b04 	ldr.w	r7, [lr], #4
   bceda:	40cf      	lsrs	r7, r1
   bcedc:	e7da      	b.n	bce94 <rshift+0x4c>
   bcede:	f851 cb04 	ldr.w	ip, [r1], #4
   bcee2:	f847 cf04 	str.w	ip, [r7, #4]!
   bcee6:	e7c3      	b.n	bce70 <rshift+0x28>
   bcee8:	4623      	mov	r3, r4
   bceea:	e7e1      	b.n	bceb0 <rshift+0x68>

000bceec <__hexdig_fun>:
   bceec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bcef0:	2b09      	cmp	r3, #9
   bcef2:	d802      	bhi.n	bcefa <__hexdig_fun+0xe>
   bcef4:	3820      	subs	r0, #32
   bcef6:	b2c0      	uxtb	r0, r0
   bcef8:	4770      	bx	lr
   bcefa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bcefe:	2b05      	cmp	r3, #5
   bcf00:	d801      	bhi.n	bcf06 <__hexdig_fun+0x1a>
   bcf02:	3847      	subs	r0, #71	; 0x47
   bcf04:	e7f7      	b.n	bcef6 <__hexdig_fun+0xa>
   bcf06:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bcf0a:	2b05      	cmp	r3, #5
   bcf0c:	d801      	bhi.n	bcf12 <__hexdig_fun+0x26>
   bcf0e:	3827      	subs	r0, #39	; 0x27
   bcf10:	e7f1      	b.n	bcef6 <__hexdig_fun+0xa>
   bcf12:	2000      	movs	r0, #0
   bcf14:	4770      	bx	lr
	...

000bcf18 <__gethex>:
   bcf18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcf1c:	ed2d 8b02 	vpush	{d8}
   bcf20:	b089      	sub	sp, #36	; 0x24
   bcf22:	ee08 0a10 	vmov	s16, r0
   bcf26:	9304      	str	r3, [sp, #16]
   bcf28:	4bb4      	ldr	r3, [pc, #720]	; (bd1fc <__gethex+0x2e4>)
   bcf2a:	681b      	ldr	r3, [r3, #0]
   bcf2c:	9301      	str	r3, [sp, #4]
   bcf2e:	4618      	mov	r0, r3
   bcf30:	468b      	mov	fp, r1
   bcf32:	4690      	mov	r8, r2
   bcf34:	f7fe ffde 	bl	bbef4 <strlen>
   bcf38:	9b01      	ldr	r3, [sp, #4]
   bcf3a:	f8db 2000 	ldr.w	r2, [fp]
   bcf3e:	4403      	add	r3, r0
   bcf40:	4682      	mov	sl, r0
   bcf42:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bcf46:	9305      	str	r3, [sp, #20]
   bcf48:	1c93      	adds	r3, r2, #2
   bcf4a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bcf4e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bcf52:	32fe      	adds	r2, #254	; 0xfe
   bcf54:	18d1      	adds	r1, r2, r3
   bcf56:	461f      	mov	r7, r3
   bcf58:	f813 0b01 	ldrb.w	r0, [r3], #1
   bcf5c:	9100      	str	r1, [sp, #0]
   bcf5e:	2830      	cmp	r0, #48	; 0x30
   bcf60:	d0f8      	beq.n	bcf54 <__gethex+0x3c>
   bcf62:	f7ff ffc3 	bl	bceec <__hexdig_fun>
   bcf66:	4604      	mov	r4, r0
   bcf68:	2800      	cmp	r0, #0
   bcf6a:	d13a      	bne.n	bcfe2 <__gethex+0xca>
   bcf6c:	9901      	ldr	r1, [sp, #4]
   bcf6e:	4652      	mov	r2, sl
   bcf70:	4638      	mov	r0, r7
   bcf72:	f7fe ffc7 	bl	bbf04 <strncmp>
   bcf76:	4605      	mov	r5, r0
   bcf78:	2800      	cmp	r0, #0
   bcf7a:	d168      	bne.n	bd04e <__gethex+0x136>
   bcf7c:	f817 000a 	ldrb.w	r0, [r7, sl]
   bcf80:	eb07 060a 	add.w	r6, r7, sl
   bcf84:	f7ff ffb2 	bl	bceec <__hexdig_fun>
   bcf88:	2800      	cmp	r0, #0
   bcf8a:	d062      	beq.n	bd052 <__gethex+0x13a>
   bcf8c:	4633      	mov	r3, r6
   bcf8e:	7818      	ldrb	r0, [r3, #0]
   bcf90:	2830      	cmp	r0, #48	; 0x30
   bcf92:	461f      	mov	r7, r3
   bcf94:	f103 0301 	add.w	r3, r3, #1
   bcf98:	d0f9      	beq.n	bcf8e <__gethex+0x76>
   bcf9a:	f7ff ffa7 	bl	bceec <__hexdig_fun>
   bcf9e:	2301      	movs	r3, #1
   bcfa0:	fab0 f480 	clz	r4, r0
   bcfa4:	0964      	lsrs	r4, r4, #5
   bcfa6:	4635      	mov	r5, r6
   bcfa8:	9300      	str	r3, [sp, #0]
   bcfaa:	463a      	mov	r2, r7
   bcfac:	4616      	mov	r6, r2
   bcfae:	3201      	adds	r2, #1
   bcfb0:	7830      	ldrb	r0, [r6, #0]
   bcfb2:	f7ff ff9b 	bl	bceec <__hexdig_fun>
   bcfb6:	2800      	cmp	r0, #0
   bcfb8:	d1f8      	bne.n	bcfac <__gethex+0x94>
   bcfba:	9901      	ldr	r1, [sp, #4]
   bcfbc:	4652      	mov	r2, sl
   bcfbe:	4630      	mov	r0, r6
   bcfc0:	f7fe ffa0 	bl	bbf04 <strncmp>
   bcfc4:	b980      	cbnz	r0, bcfe8 <__gethex+0xd0>
   bcfc6:	b94d      	cbnz	r5, bcfdc <__gethex+0xc4>
   bcfc8:	eb06 050a 	add.w	r5, r6, sl
   bcfcc:	462a      	mov	r2, r5
   bcfce:	4616      	mov	r6, r2
   bcfd0:	3201      	adds	r2, #1
   bcfd2:	7830      	ldrb	r0, [r6, #0]
   bcfd4:	f7ff ff8a 	bl	bceec <__hexdig_fun>
   bcfd8:	2800      	cmp	r0, #0
   bcfda:	d1f8      	bne.n	bcfce <__gethex+0xb6>
   bcfdc:	1bad      	subs	r5, r5, r6
   bcfde:	00ad      	lsls	r5, r5, #2
   bcfe0:	e004      	b.n	bcfec <__gethex+0xd4>
   bcfe2:	2400      	movs	r4, #0
   bcfe4:	4625      	mov	r5, r4
   bcfe6:	e7e0      	b.n	bcfaa <__gethex+0x92>
   bcfe8:	2d00      	cmp	r5, #0
   bcfea:	d1f7      	bne.n	bcfdc <__gethex+0xc4>
   bcfec:	7833      	ldrb	r3, [r6, #0]
   bcfee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bcff2:	2b50      	cmp	r3, #80	; 0x50
   bcff4:	d13b      	bne.n	bd06e <__gethex+0x156>
   bcff6:	7873      	ldrb	r3, [r6, #1]
   bcff8:	2b2b      	cmp	r3, #43	; 0x2b
   bcffa:	d02c      	beq.n	bd056 <__gethex+0x13e>
   bcffc:	2b2d      	cmp	r3, #45	; 0x2d
   bcffe:	d02e      	beq.n	bd05e <__gethex+0x146>
   bd000:	1c71      	adds	r1, r6, #1
   bd002:	f04f 0900 	mov.w	r9, #0
   bd006:	7808      	ldrb	r0, [r1, #0]
   bd008:	f7ff ff70 	bl	bceec <__hexdig_fun>
   bd00c:	1e43      	subs	r3, r0, #1
   bd00e:	b2db      	uxtb	r3, r3
   bd010:	2b18      	cmp	r3, #24
   bd012:	d82c      	bhi.n	bd06e <__gethex+0x156>
   bd014:	f1a0 0210 	sub.w	r2, r0, #16
   bd018:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bd01c:	f7ff ff66 	bl	bceec <__hexdig_fun>
   bd020:	1e43      	subs	r3, r0, #1
   bd022:	b2db      	uxtb	r3, r3
   bd024:	2b18      	cmp	r3, #24
   bd026:	d91d      	bls.n	bd064 <__gethex+0x14c>
   bd028:	f1b9 0f00 	cmp.w	r9, #0
   bd02c:	d000      	beq.n	bd030 <__gethex+0x118>
   bd02e:	4252      	negs	r2, r2
   bd030:	4415      	add	r5, r2
   bd032:	f8cb 1000 	str.w	r1, [fp]
   bd036:	b1e4      	cbz	r4, bd072 <__gethex+0x15a>
   bd038:	9b00      	ldr	r3, [sp, #0]
   bd03a:	2b00      	cmp	r3, #0
   bd03c:	bf14      	ite	ne
   bd03e:	2700      	movne	r7, #0
   bd040:	2706      	moveq	r7, #6
   bd042:	4638      	mov	r0, r7
   bd044:	b009      	add	sp, #36	; 0x24
   bd046:	ecbd 8b02 	vpop	{d8}
   bd04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd04e:	463e      	mov	r6, r7
   bd050:	4625      	mov	r5, r4
   bd052:	2401      	movs	r4, #1
   bd054:	e7ca      	b.n	bcfec <__gethex+0xd4>
   bd056:	f04f 0900 	mov.w	r9, #0
   bd05a:	1cb1      	adds	r1, r6, #2
   bd05c:	e7d3      	b.n	bd006 <__gethex+0xee>
   bd05e:	f04f 0901 	mov.w	r9, #1
   bd062:	e7fa      	b.n	bd05a <__gethex+0x142>
   bd064:	230a      	movs	r3, #10
   bd066:	fb03 0202 	mla	r2, r3, r2, r0
   bd06a:	3a10      	subs	r2, #16
   bd06c:	e7d4      	b.n	bd018 <__gethex+0x100>
   bd06e:	4631      	mov	r1, r6
   bd070:	e7df      	b.n	bd032 <__gethex+0x11a>
   bd072:	1bf3      	subs	r3, r6, r7
   bd074:	3b01      	subs	r3, #1
   bd076:	4621      	mov	r1, r4
   bd078:	2b07      	cmp	r3, #7
   bd07a:	dc0b      	bgt.n	bd094 <__gethex+0x17c>
   bd07c:	ee18 0a10 	vmov	r0, s16
   bd080:	f000 fa68 	bl	bd554 <_Balloc>
   bd084:	4604      	mov	r4, r0
   bd086:	b940      	cbnz	r0, bd09a <__gethex+0x182>
   bd088:	4b5d      	ldr	r3, [pc, #372]	; (bd200 <__gethex+0x2e8>)
   bd08a:	4602      	mov	r2, r0
   bd08c:	21de      	movs	r1, #222	; 0xde
   bd08e:	485d      	ldr	r0, [pc, #372]	; (bd204 <__gethex+0x2ec>)
   bd090:	f7fb fb9a 	bl	b87c8 <__assert_func>
   bd094:	3101      	adds	r1, #1
   bd096:	105b      	asrs	r3, r3, #1
   bd098:	e7ee      	b.n	bd078 <__gethex+0x160>
   bd09a:	f100 0914 	add.w	r9, r0, #20
   bd09e:	f04f 0b00 	mov.w	fp, #0
   bd0a2:	f1ca 0301 	rsb	r3, sl, #1
   bd0a6:	f8cd 9008 	str.w	r9, [sp, #8]
   bd0aa:	f8cd b000 	str.w	fp, [sp]
   bd0ae:	9306      	str	r3, [sp, #24]
   bd0b0:	42b7      	cmp	r7, r6
   bd0b2:	d340      	bcc.n	bd136 <__gethex+0x21e>
   bd0b4:	9802      	ldr	r0, [sp, #8]
   bd0b6:	9b00      	ldr	r3, [sp, #0]
   bd0b8:	f840 3b04 	str.w	r3, [r0], #4
   bd0bc:	eba0 0009 	sub.w	r0, r0, r9
   bd0c0:	1080      	asrs	r0, r0, #2
   bd0c2:	0146      	lsls	r6, r0, #5
   bd0c4:	6120      	str	r0, [r4, #16]
   bd0c6:	4618      	mov	r0, r3
   bd0c8:	f000 fb36 	bl	bd738 <__hi0bits>
   bd0cc:	1a30      	subs	r0, r6, r0
   bd0ce:	f8d8 6000 	ldr.w	r6, [r8]
   bd0d2:	42b0      	cmp	r0, r6
   bd0d4:	dd63      	ble.n	bd19e <__gethex+0x286>
   bd0d6:	1b87      	subs	r7, r0, r6
   bd0d8:	4639      	mov	r1, r7
   bd0da:	4620      	mov	r0, r4
   bd0dc:	f000 feda 	bl	bde94 <__any_on>
   bd0e0:	4682      	mov	sl, r0
   bd0e2:	b1a8      	cbz	r0, bd110 <__gethex+0x1f8>
   bd0e4:	1e7b      	subs	r3, r7, #1
   bd0e6:	1159      	asrs	r1, r3, #5
   bd0e8:	f003 021f 	and.w	r2, r3, #31
   bd0ec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bd0f0:	f04f 0a01 	mov.w	sl, #1
   bd0f4:	fa0a f202 	lsl.w	r2, sl, r2
   bd0f8:	420a      	tst	r2, r1
   bd0fa:	d009      	beq.n	bd110 <__gethex+0x1f8>
   bd0fc:	4553      	cmp	r3, sl
   bd0fe:	dd05      	ble.n	bd10c <__gethex+0x1f4>
   bd100:	1eb9      	subs	r1, r7, #2
   bd102:	4620      	mov	r0, r4
   bd104:	f000 fec6 	bl	bde94 <__any_on>
   bd108:	2800      	cmp	r0, #0
   bd10a:	d145      	bne.n	bd198 <__gethex+0x280>
   bd10c:	f04f 0a02 	mov.w	sl, #2
   bd110:	4639      	mov	r1, r7
   bd112:	4620      	mov	r0, r4
   bd114:	f7ff fe98 	bl	bce48 <rshift>
   bd118:	443d      	add	r5, r7
   bd11a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bd11e:	42ab      	cmp	r3, r5
   bd120:	da4c      	bge.n	bd1bc <__gethex+0x2a4>
   bd122:	ee18 0a10 	vmov	r0, s16
   bd126:	4621      	mov	r1, r4
   bd128:	f000 fa54 	bl	bd5d4 <_Bfree>
   bd12c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bd12e:	2300      	movs	r3, #0
   bd130:	6013      	str	r3, [r2, #0]
   bd132:	27a3      	movs	r7, #163	; 0xa3
   bd134:	e785      	b.n	bd042 <__gethex+0x12a>
   bd136:	1e73      	subs	r3, r6, #1
   bd138:	9a05      	ldr	r2, [sp, #20]
   bd13a:	9303      	str	r3, [sp, #12]
   bd13c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bd140:	4293      	cmp	r3, r2
   bd142:	d019      	beq.n	bd178 <__gethex+0x260>
   bd144:	f1bb 0f20 	cmp.w	fp, #32
   bd148:	d107      	bne.n	bd15a <__gethex+0x242>
   bd14a:	9b02      	ldr	r3, [sp, #8]
   bd14c:	9a00      	ldr	r2, [sp, #0]
   bd14e:	f843 2b04 	str.w	r2, [r3], #4
   bd152:	9302      	str	r3, [sp, #8]
   bd154:	2300      	movs	r3, #0
   bd156:	9300      	str	r3, [sp, #0]
   bd158:	469b      	mov	fp, r3
   bd15a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bd15e:	f7ff fec5 	bl	bceec <__hexdig_fun>
   bd162:	9b00      	ldr	r3, [sp, #0]
   bd164:	f000 000f 	and.w	r0, r0, #15
   bd168:	fa00 f00b 	lsl.w	r0, r0, fp
   bd16c:	4303      	orrs	r3, r0
   bd16e:	9300      	str	r3, [sp, #0]
   bd170:	f10b 0b04 	add.w	fp, fp, #4
   bd174:	9b03      	ldr	r3, [sp, #12]
   bd176:	e00d      	b.n	bd194 <__gethex+0x27c>
   bd178:	9b03      	ldr	r3, [sp, #12]
   bd17a:	9a06      	ldr	r2, [sp, #24]
   bd17c:	4413      	add	r3, r2
   bd17e:	42bb      	cmp	r3, r7
   bd180:	d3e0      	bcc.n	bd144 <__gethex+0x22c>
   bd182:	4618      	mov	r0, r3
   bd184:	9901      	ldr	r1, [sp, #4]
   bd186:	9307      	str	r3, [sp, #28]
   bd188:	4652      	mov	r2, sl
   bd18a:	f7fe febb 	bl	bbf04 <strncmp>
   bd18e:	9b07      	ldr	r3, [sp, #28]
   bd190:	2800      	cmp	r0, #0
   bd192:	d1d7      	bne.n	bd144 <__gethex+0x22c>
   bd194:	461e      	mov	r6, r3
   bd196:	e78b      	b.n	bd0b0 <__gethex+0x198>
   bd198:	f04f 0a03 	mov.w	sl, #3
   bd19c:	e7b8      	b.n	bd110 <__gethex+0x1f8>
   bd19e:	da0a      	bge.n	bd1b6 <__gethex+0x29e>
   bd1a0:	1a37      	subs	r7, r6, r0
   bd1a2:	4621      	mov	r1, r4
   bd1a4:	ee18 0a10 	vmov	r0, s16
   bd1a8:	463a      	mov	r2, r7
   bd1aa:	f000 fc2f 	bl	bda0c <__lshift>
   bd1ae:	1bed      	subs	r5, r5, r7
   bd1b0:	4604      	mov	r4, r0
   bd1b2:	f100 0914 	add.w	r9, r0, #20
   bd1b6:	f04f 0a00 	mov.w	sl, #0
   bd1ba:	e7ae      	b.n	bd11a <__gethex+0x202>
   bd1bc:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bd1c0:	42a8      	cmp	r0, r5
   bd1c2:	dd72      	ble.n	bd2aa <__gethex+0x392>
   bd1c4:	1b45      	subs	r5, r0, r5
   bd1c6:	42ae      	cmp	r6, r5
   bd1c8:	dc36      	bgt.n	bd238 <__gethex+0x320>
   bd1ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bd1ce:	2b02      	cmp	r3, #2
   bd1d0:	d02a      	beq.n	bd228 <__gethex+0x310>
   bd1d2:	2b03      	cmp	r3, #3
   bd1d4:	d02c      	beq.n	bd230 <__gethex+0x318>
   bd1d6:	2b01      	cmp	r3, #1
   bd1d8:	d11c      	bne.n	bd214 <__gethex+0x2fc>
   bd1da:	42ae      	cmp	r6, r5
   bd1dc:	d11a      	bne.n	bd214 <__gethex+0x2fc>
   bd1de:	2e01      	cmp	r6, #1
   bd1e0:	d112      	bne.n	bd208 <__gethex+0x2f0>
   bd1e2:	9a04      	ldr	r2, [sp, #16]
   bd1e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bd1e8:	6013      	str	r3, [r2, #0]
   bd1ea:	2301      	movs	r3, #1
   bd1ec:	6123      	str	r3, [r4, #16]
   bd1ee:	f8c9 3000 	str.w	r3, [r9]
   bd1f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bd1f4:	2762      	movs	r7, #98	; 0x62
   bd1f6:	601c      	str	r4, [r3, #0]
   bd1f8:	e723      	b.n	bd042 <__gethex+0x12a>
   bd1fa:	bf00      	nop
   bd1fc:	000beb24 	.word	0x000beb24
   bd200:	000beab1 	.word	0x000beab1
   bd204:	000beac2 	.word	0x000beac2
   bd208:	1e71      	subs	r1, r6, #1
   bd20a:	4620      	mov	r0, r4
   bd20c:	f000 fe42 	bl	bde94 <__any_on>
   bd210:	2800      	cmp	r0, #0
   bd212:	d1e6      	bne.n	bd1e2 <__gethex+0x2ca>
   bd214:	ee18 0a10 	vmov	r0, s16
   bd218:	4621      	mov	r1, r4
   bd21a:	f000 f9db 	bl	bd5d4 <_Bfree>
   bd21e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bd220:	2300      	movs	r3, #0
   bd222:	6013      	str	r3, [r2, #0]
   bd224:	2750      	movs	r7, #80	; 0x50
   bd226:	e70c      	b.n	bd042 <__gethex+0x12a>
   bd228:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd22a:	2b00      	cmp	r3, #0
   bd22c:	d1f2      	bne.n	bd214 <__gethex+0x2fc>
   bd22e:	e7d8      	b.n	bd1e2 <__gethex+0x2ca>
   bd230:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd232:	2b00      	cmp	r3, #0
   bd234:	d1d5      	bne.n	bd1e2 <__gethex+0x2ca>
   bd236:	e7ed      	b.n	bd214 <__gethex+0x2fc>
   bd238:	1e6f      	subs	r7, r5, #1
   bd23a:	f1ba 0f00 	cmp.w	sl, #0
   bd23e:	d131      	bne.n	bd2a4 <__gethex+0x38c>
   bd240:	b127      	cbz	r7, bd24c <__gethex+0x334>
   bd242:	4639      	mov	r1, r7
   bd244:	4620      	mov	r0, r4
   bd246:	f000 fe25 	bl	bde94 <__any_on>
   bd24a:	4682      	mov	sl, r0
   bd24c:	117b      	asrs	r3, r7, #5
   bd24e:	2101      	movs	r1, #1
   bd250:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bd254:	f007 071f 	and.w	r7, r7, #31
   bd258:	fa01 f707 	lsl.w	r7, r1, r7
   bd25c:	421f      	tst	r7, r3
   bd25e:	4629      	mov	r1, r5
   bd260:	4620      	mov	r0, r4
   bd262:	bf18      	it	ne
   bd264:	f04a 0a02 	orrne.w	sl, sl, #2
   bd268:	1b76      	subs	r6, r6, r5
   bd26a:	f7ff fded 	bl	bce48 <rshift>
   bd26e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bd272:	2702      	movs	r7, #2
   bd274:	f1ba 0f00 	cmp.w	sl, #0
   bd278:	d048      	beq.n	bd30c <__gethex+0x3f4>
   bd27a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bd27e:	2b02      	cmp	r3, #2
   bd280:	d015      	beq.n	bd2ae <__gethex+0x396>
   bd282:	2b03      	cmp	r3, #3
   bd284:	d017      	beq.n	bd2b6 <__gethex+0x39e>
   bd286:	2b01      	cmp	r3, #1
   bd288:	d109      	bne.n	bd29e <__gethex+0x386>
   bd28a:	f01a 0f02 	tst.w	sl, #2
   bd28e:	d006      	beq.n	bd29e <__gethex+0x386>
   bd290:	f8d9 0000 	ldr.w	r0, [r9]
   bd294:	ea4a 0a00 	orr.w	sl, sl, r0
   bd298:	f01a 0f01 	tst.w	sl, #1
   bd29c:	d10e      	bne.n	bd2bc <__gethex+0x3a4>
   bd29e:	f047 0710 	orr.w	r7, r7, #16
   bd2a2:	e033      	b.n	bd30c <__gethex+0x3f4>
   bd2a4:	f04f 0a01 	mov.w	sl, #1
   bd2a8:	e7d0      	b.n	bd24c <__gethex+0x334>
   bd2aa:	2701      	movs	r7, #1
   bd2ac:	e7e2      	b.n	bd274 <__gethex+0x35c>
   bd2ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd2b0:	f1c3 0301 	rsb	r3, r3, #1
   bd2b4:	9315      	str	r3, [sp, #84]	; 0x54
   bd2b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd2b8:	2b00      	cmp	r3, #0
   bd2ba:	d0f0      	beq.n	bd29e <__gethex+0x386>
   bd2bc:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bd2c0:	f104 0314 	add.w	r3, r4, #20
   bd2c4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bd2c8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bd2cc:	f04f 0c00 	mov.w	ip, #0
   bd2d0:	4618      	mov	r0, r3
   bd2d2:	f853 2b04 	ldr.w	r2, [r3], #4
   bd2d6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bd2da:	d01c      	beq.n	bd316 <__gethex+0x3fe>
   bd2dc:	3201      	adds	r2, #1
   bd2de:	6002      	str	r2, [r0, #0]
   bd2e0:	2f02      	cmp	r7, #2
   bd2e2:	f104 0314 	add.w	r3, r4, #20
   bd2e6:	d13f      	bne.n	bd368 <__gethex+0x450>
   bd2e8:	f8d8 2000 	ldr.w	r2, [r8]
   bd2ec:	3a01      	subs	r2, #1
   bd2ee:	42b2      	cmp	r2, r6
   bd2f0:	d10a      	bne.n	bd308 <__gethex+0x3f0>
   bd2f2:	1171      	asrs	r1, r6, #5
   bd2f4:	2201      	movs	r2, #1
   bd2f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bd2fa:	f006 061f 	and.w	r6, r6, #31
   bd2fe:	fa02 f606 	lsl.w	r6, r2, r6
   bd302:	421e      	tst	r6, r3
   bd304:	bf18      	it	ne
   bd306:	4617      	movne	r7, r2
   bd308:	f047 0720 	orr.w	r7, r7, #32
   bd30c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bd30e:	601c      	str	r4, [r3, #0]
   bd310:	9b04      	ldr	r3, [sp, #16]
   bd312:	601d      	str	r5, [r3, #0]
   bd314:	e695      	b.n	bd042 <__gethex+0x12a>
   bd316:	4299      	cmp	r1, r3
   bd318:	f843 cc04 	str.w	ip, [r3, #-4]
   bd31c:	d8d8      	bhi.n	bd2d0 <__gethex+0x3b8>
   bd31e:	68a3      	ldr	r3, [r4, #8]
   bd320:	459b      	cmp	fp, r3
   bd322:	db19      	blt.n	bd358 <__gethex+0x440>
   bd324:	6861      	ldr	r1, [r4, #4]
   bd326:	ee18 0a10 	vmov	r0, s16
   bd32a:	3101      	adds	r1, #1
   bd32c:	f000 f912 	bl	bd554 <_Balloc>
   bd330:	4681      	mov	r9, r0
   bd332:	b918      	cbnz	r0, bd33c <__gethex+0x424>
   bd334:	4b1a      	ldr	r3, [pc, #104]	; (bd3a0 <__gethex+0x488>)
   bd336:	4602      	mov	r2, r0
   bd338:	2184      	movs	r1, #132	; 0x84
   bd33a:	e6a8      	b.n	bd08e <__gethex+0x176>
   bd33c:	6922      	ldr	r2, [r4, #16]
   bd33e:	3202      	adds	r2, #2
   bd340:	f104 010c 	add.w	r1, r4, #12
   bd344:	0092      	lsls	r2, r2, #2
   bd346:	300c      	adds	r0, #12
   bd348:	f7fe fd64 	bl	bbe14 <memcpy>
   bd34c:	4621      	mov	r1, r4
   bd34e:	ee18 0a10 	vmov	r0, s16
   bd352:	f000 f93f 	bl	bd5d4 <_Bfree>
   bd356:	464c      	mov	r4, r9
   bd358:	6923      	ldr	r3, [r4, #16]
   bd35a:	1c5a      	adds	r2, r3, #1
   bd35c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bd360:	6122      	str	r2, [r4, #16]
   bd362:	2201      	movs	r2, #1
   bd364:	615a      	str	r2, [r3, #20]
   bd366:	e7bb      	b.n	bd2e0 <__gethex+0x3c8>
   bd368:	6922      	ldr	r2, [r4, #16]
   bd36a:	455a      	cmp	r2, fp
   bd36c:	dd0b      	ble.n	bd386 <__gethex+0x46e>
   bd36e:	2101      	movs	r1, #1
   bd370:	4620      	mov	r0, r4
   bd372:	f7ff fd69 	bl	bce48 <rshift>
   bd376:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bd37a:	3501      	adds	r5, #1
   bd37c:	42ab      	cmp	r3, r5
   bd37e:	f6ff aed0 	blt.w	bd122 <__gethex+0x20a>
   bd382:	2701      	movs	r7, #1
   bd384:	e7c0      	b.n	bd308 <__gethex+0x3f0>
   bd386:	f016 061f 	ands.w	r6, r6, #31
   bd38a:	d0fa      	beq.n	bd382 <__gethex+0x46a>
   bd38c:	4453      	add	r3, sl
   bd38e:	f1c6 0620 	rsb	r6, r6, #32
   bd392:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bd396:	f000 f9cf 	bl	bd738 <__hi0bits>
   bd39a:	42b0      	cmp	r0, r6
   bd39c:	dbe7      	blt.n	bd36e <__gethex+0x456>
   bd39e:	e7f0      	b.n	bd382 <__gethex+0x46a>
   bd3a0:	000beab1 	.word	0x000beab1

000bd3a4 <L_shift>:
   bd3a4:	f1c2 0208 	rsb	r2, r2, #8
   bd3a8:	0092      	lsls	r2, r2, #2
   bd3aa:	b570      	push	{r4, r5, r6, lr}
   bd3ac:	f1c2 0620 	rsb	r6, r2, #32
   bd3b0:	6843      	ldr	r3, [r0, #4]
   bd3b2:	6804      	ldr	r4, [r0, #0]
   bd3b4:	fa03 f506 	lsl.w	r5, r3, r6
   bd3b8:	432c      	orrs	r4, r5
   bd3ba:	40d3      	lsrs	r3, r2
   bd3bc:	6004      	str	r4, [r0, #0]
   bd3be:	f840 3f04 	str.w	r3, [r0, #4]!
   bd3c2:	4288      	cmp	r0, r1
   bd3c4:	d3f4      	bcc.n	bd3b0 <L_shift+0xc>
   bd3c6:	bd70      	pop	{r4, r5, r6, pc}

000bd3c8 <__match>:
   bd3c8:	b530      	push	{r4, r5, lr}
   bd3ca:	6803      	ldr	r3, [r0, #0]
   bd3cc:	3301      	adds	r3, #1
   bd3ce:	f811 4b01 	ldrb.w	r4, [r1], #1
   bd3d2:	b914      	cbnz	r4, bd3da <__match+0x12>
   bd3d4:	6003      	str	r3, [r0, #0]
   bd3d6:	2001      	movs	r0, #1
   bd3d8:	bd30      	pop	{r4, r5, pc}
   bd3da:	f813 2b01 	ldrb.w	r2, [r3], #1
   bd3de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bd3e2:	2d19      	cmp	r5, #25
   bd3e4:	bf98      	it	ls
   bd3e6:	3220      	addls	r2, #32
   bd3e8:	42a2      	cmp	r2, r4
   bd3ea:	d0f0      	beq.n	bd3ce <__match+0x6>
   bd3ec:	2000      	movs	r0, #0
   bd3ee:	e7f3      	b.n	bd3d8 <__match+0x10>

000bd3f0 <__hexnan>:
   bd3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd3f4:	680b      	ldr	r3, [r1, #0]
   bd3f6:	115e      	asrs	r6, r3, #5
   bd3f8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bd3fc:	f013 031f 	ands.w	r3, r3, #31
   bd400:	b087      	sub	sp, #28
   bd402:	bf18      	it	ne
   bd404:	3604      	addne	r6, #4
   bd406:	2500      	movs	r5, #0
   bd408:	1f37      	subs	r7, r6, #4
   bd40a:	4690      	mov	r8, r2
   bd40c:	6802      	ldr	r2, [r0, #0]
   bd40e:	9301      	str	r3, [sp, #4]
   bd410:	4682      	mov	sl, r0
   bd412:	f846 5c04 	str.w	r5, [r6, #-4]
   bd416:	46b9      	mov	r9, r7
   bd418:	463c      	mov	r4, r7
   bd41a:	9502      	str	r5, [sp, #8]
   bd41c:	46ab      	mov	fp, r5
   bd41e:	7851      	ldrb	r1, [r2, #1]
   bd420:	1c53      	adds	r3, r2, #1
   bd422:	9303      	str	r3, [sp, #12]
   bd424:	b341      	cbz	r1, bd478 <__hexnan+0x88>
   bd426:	4608      	mov	r0, r1
   bd428:	9205      	str	r2, [sp, #20]
   bd42a:	9104      	str	r1, [sp, #16]
   bd42c:	f7ff fd5e 	bl	bceec <__hexdig_fun>
   bd430:	2800      	cmp	r0, #0
   bd432:	d14f      	bne.n	bd4d4 <__hexnan+0xe4>
   bd434:	9904      	ldr	r1, [sp, #16]
   bd436:	9a05      	ldr	r2, [sp, #20]
   bd438:	2920      	cmp	r1, #32
   bd43a:	d818      	bhi.n	bd46e <__hexnan+0x7e>
   bd43c:	9b02      	ldr	r3, [sp, #8]
   bd43e:	459b      	cmp	fp, r3
   bd440:	dd13      	ble.n	bd46a <__hexnan+0x7a>
   bd442:	454c      	cmp	r4, r9
   bd444:	d206      	bcs.n	bd454 <__hexnan+0x64>
   bd446:	2d07      	cmp	r5, #7
   bd448:	dc04      	bgt.n	bd454 <__hexnan+0x64>
   bd44a:	462a      	mov	r2, r5
   bd44c:	4649      	mov	r1, r9
   bd44e:	4620      	mov	r0, r4
   bd450:	f7ff ffa8 	bl	bd3a4 <L_shift>
   bd454:	4544      	cmp	r4, r8
   bd456:	d950      	bls.n	bd4fa <__hexnan+0x10a>
   bd458:	2300      	movs	r3, #0
   bd45a:	f1a4 0904 	sub.w	r9, r4, #4
   bd45e:	f844 3c04 	str.w	r3, [r4, #-4]
   bd462:	f8cd b008 	str.w	fp, [sp, #8]
   bd466:	464c      	mov	r4, r9
   bd468:	461d      	mov	r5, r3
   bd46a:	9a03      	ldr	r2, [sp, #12]
   bd46c:	e7d7      	b.n	bd41e <__hexnan+0x2e>
   bd46e:	2929      	cmp	r1, #41	; 0x29
   bd470:	d156      	bne.n	bd520 <__hexnan+0x130>
   bd472:	3202      	adds	r2, #2
   bd474:	f8ca 2000 	str.w	r2, [sl]
   bd478:	f1bb 0f00 	cmp.w	fp, #0
   bd47c:	d050      	beq.n	bd520 <__hexnan+0x130>
   bd47e:	454c      	cmp	r4, r9
   bd480:	d206      	bcs.n	bd490 <__hexnan+0xa0>
   bd482:	2d07      	cmp	r5, #7
   bd484:	dc04      	bgt.n	bd490 <__hexnan+0xa0>
   bd486:	462a      	mov	r2, r5
   bd488:	4649      	mov	r1, r9
   bd48a:	4620      	mov	r0, r4
   bd48c:	f7ff ff8a 	bl	bd3a4 <L_shift>
   bd490:	4544      	cmp	r4, r8
   bd492:	d934      	bls.n	bd4fe <__hexnan+0x10e>
   bd494:	f1a8 0204 	sub.w	r2, r8, #4
   bd498:	4623      	mov	r3, r4
   bd49a:	f853 1b04 	ldr.w	r1, [r3], #4
   bd49e:	f842 1f04 	str.w	r1, [r2, #4]!
   bd4a2:	429f      	cmp	r7, r3
   bd4a4:	d2f9      	bcs.n	bd49a <__hexnan+0xaa>
   bd4a6:	1b3b      	subs	r3, r7, r4
   bd4a8:	f023 0303 	bic.w	r3, r3, #3
   bd4ac:	3304      	adds	r3, #4
   bd4ae:	3401      	adds	r4, #1
   bd4b0:	3e03      	subs	r6, #3
   bd4b2:	42b4      	cmp	r4, r6
   bd4b4:	bf88      	it	hi
   bd4b6:	2304      	movhi	r3, #4
   bd4b8:	4443      	add	r3, r8
   bd4ba:	2200      	movs	r2, #0
   bd4bc:	f843 2b04 	str.w	r2, [r3], #4
   bd4c0:	429f      	cmp	r7, r3
   bd4c2:	d2fb      	bcs.n	bd4bc <__hexnan+0xcc>
   bd4c4:	683b      	ldr	r3, [r7, #0]
   bd4c6:	b91b      	cbnz	r3, bd4d0 <__hexnan+0xe0>
   bd4c8:	4547      	cmp	r7, r8
   bd4ca:	d127      	bne.n	bd51c <__hexnan+0x12c>
   bd4cc:	2301      	movs	r3, #1
   bd4ce:	603b      	str	r3, [r7, #0]
   bd4d0:	2005      	movs	r0, #5
   bd4d2:	e026      	b.n	bd522 <__hexnan+0x132>
   bd4d4:	3501      	adds	r5, #1
   bd4d6:	2d08      	cmp	r5, #8
   bd4d8:	f10b 0b01 	add.w	fp, fp, #1
   bd4dc:	dd06      	ble.n	bd4ec <__hexnan+0xfc>
   bd4de:	4544      	cmp	r4, r8
   bd4e0:	d9c3      	bls.n	bd46a <__hexnan+0x7a>
   bd4e2:	2300      	movs	r3, #0
   bd4e4:	f844 3c04 	str.w	r3, [r4, #-4]
   bd4e8:	2501      	movs	r5, #1
   bd4ea:	3c04      	subs	r4, #4
   bd4ec:	6822      	ldr	r2, [r4, #0]
   bd4ee:	f000 000f 	and.w	r0, r0, #15
   bd4f2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bd4f6:	6022      	str	r2, [r4, #0]
   bd4f8:	e7b7      	b.n	bd46a <__hexnan+0x7a>
   bd4fa:	2508      	movs	r5, #8
   bd4fc:	e7b5      	b.n	bd46a <__hexnan+0x7a>
   bd4fe:	9b01      	ldr	r3, [sp, #4]
   bd500:	2b00      	cmp	r3, #0
   bd502:	d0df      	beq.n	bd4c4 <__hexnan+0xd4>
   bd504:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd508:	f1c3 0320 	rsb	r3, r3, #32
   bd50c:	fa22 f303 	lsr.w	r3, r2, r3
   bd510:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bd514:	401a      	ands	r2, r3
   bd516:	f846 2c04 	str.w	r2, [r6, #-4]
   bd51a:	e7d3      	b.n	bd4c4 <__hexnan+0xd4>
   bd51c:	3f04      	subs	r7, #4
   bd51e:	e7d1      	b.n	bd4c4 <__hexnan+0xd4>
   bd520:	2004      	movs	r0, #4
   bd522:	b007      	add	sp, #28
   bd524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bd528 <__retarget_lock_acquire_recursive>:
   bd528:	4770      	bx	lr

000bd52a <__retarget_lock_release>:
   bd52a:	4770      	bx	lr

000bd52c <__retarget_lock_release_recursive>:
   bd52c:	4770      	bx	lr

000bd52e <__ascii_mbtowc>:
   bd52e:	b082      	sub	sp, #8
   bd530:	b901      	cbnz	r1, bd534 <__ascii_mbtowc+0x6>
   bd532:	a901      	add	r1, sp, #4
   bd534:	b142      	cbz	r2, bd548 <__ascii_mbtowc+0x1a>
   bd536:	b14b      	cbz	r3, bd54c <__ascii_mbtowc+0x1e>
   bd538:	7813      	ldrb	r3, [r2, #0]
   bd53a:	600b      	str	r3, [r1, #0]
   bd53c:	7812      	ldrb	r2, [r2, #0]
   bd53e:	1e10      	subs	r0, r2, #0
   bd540:	bf18      	it	ne
   bd542:	2001      	movne	r0, #1
   bd544:	b002      	add	sp, #8
   bd546:	4770      	bx	lr
   bd548:	4610      	mov	r0, r2
   bd54a:	e7fb      	b.n	bd544 <__ascii_mbtowc+0x16>
   bd54c:	f06f 0001 	mvn.w	r0, #1
   bd550:	e7f8      	b.n	bd544 <__ascii_mbtowc+0x16>
	...

000bd554 <_Balloc>:
   bd554:	b570      	push	{r4, r5, r6, lr}
   bd556:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bd558:	4604      	mov	r4, r0
   bd55a:	460d      	mov	r5, r1
   bd55c:	b976      	cbnz	r6, bd57c <_Balloc+0x28>
   bd55e:	2010      	movs	r0, #16
   bd560:	f7fb f8f2 	bl	b8748 <malloc>
   bd564:	4602      	mov	r2, r0
   bd566:	6260      	str	r0, [r4, #36]	; 0x24
   bd568:	b920      	cbnz	r0, bd574 <_Balloc+0x20>
   bd56a:	4b18      	ldr	r3, [pc, #96]	; (bd5cc <_Balloc+0x78>)
   bd56c:	4818      	ldr	r0, [pc, #96]	; (bd5d0 <_Balloc+0x7c>)
   bd56e:	2166      	movs	r1, #102	; 0x66
   bd570:	f7fb f92a 	bl	b87c8 <__assert_func>
   bd574:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bd578:	6006      	str	r6, [r0, #0]
   bd57a:	60c6      	str	r6, [r0, #12]
   bd57c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bd57e:	68f3      	ldr	r3, [r6, #12]
   bd580:	b183      	cbz	r3, bd5a4 <_Balloc+0x50>
   bd582:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bd584:	68db      	ldr	r3, [r3, #12]
   bd586:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bd58a:	b9b8      	cbnz	r0, bd5bc <_Balloc+0x68>
   bd58c:	2101      	movs	r1, #1
   bd58e:	fa01 f605 	lsl.w	r6, r1, r5
   bd592:	1d72      	adds	r2, r6, #5
   bd594:	0092      	lsls	r2, r2, #2
   bd596:	4620      	mov	r0, r4
   bd598:	f000 fc9d 	bl	bded6 <_calloc_r>
   bd59c:	b160      	cbz	r0, bd5b8 <_Balloc+0x64>
   bd59e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bd5a2:	e00e      	b.n	bd5c2 <_Balloc+0x6e>
   bd5a4:	2221      	movs	r2, #33	; 0x21
   bd5a6:	2104      	movs	r1, #4
   bd5a8:	4620      	mov	r0, r4
   bd5aa:	f000 fc94 	bl	bded6 <_calloc_r>
   bd5ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bd5b0:	60f0      	str	r0, [r6, #12]
   bd5b2:	68db      	ldr	r3, [r3, #12]
   bd5b4:	2b00      	cmp	r3, #0
   bd5b6:	d1e4      	bne.n	bd582 <_Balloc+0x2e>
   bd5b8:	2000      	movs	r0, #0
   bd5ba:	bd70      	pop	{r4, r5, r6, pc}
   bd5bc:	6802      	ldr	r2, [r0, #0]
   bd5be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bd5c2:	2300      	movs	r3, #0
   bd5c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bd5c8:	e7f7      	b.n	bd5ba <_Balloc+0x66>
   bd5ca:	bf00      	nop
   bd5cc:	000be8dd 	.word	0x000be8dd
   bd5d0:	000beb36 	.word	0x000beb36

000bd5d4 <_Bfree>:
   bd5d4:	b570      	push	{r4, r5, r6, lr}
   bd5d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bd5d8:	4605      	mov	r5, r0
   bd5da:	460c      	mov	r4, r1
   bd5dc:	b976      	cbnz	r6, bd5fc <_Bfree+0x28>
   bd5de:	2010      	movs	r0, #16
   bd5e0:	f7fb f8b2 	bl	b8748 <malloc>
   bd5e4:	4602      	mov	r2, r0
   bd5e6:	6268      	str	r0, [r5, #36]	; 0x24
   bd5e8:	b920      	cbnz	r0, bd5f4 <_Bfree+0x20>
   bd5ea:	4b09      	ldr	r3, [pc, #36]	; (bd610 <_Bfree+0x3c>)
   bd5ec:	4809      	ldr	r0, [pc, #36]	; (bd614 <_Bfree+0x40>)
   bd5ee:	218a      	movs	r1, #138	; 0x8a
   bd5f0:	f7fb f8ea 	bl	b87c8 <__assert_func>
   bd5f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bd5f8:	6006      	str	r6, [r0, #0]
   bd5fa:	60c6      	str	r6, [r0, #12]
   bd5fc:	b13c      	cbz	r4, bd60e <_Bfree+0x3a>
   bd5fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bd600:	6862      	ldr	r2, [r4, #4]
   bd602:	68db      	ldr	r3, [r3, #12]
   bd604:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bd608:	6021      	str	r1, [r4, #0]
   bd60a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bd60e:	bd70      	pop	{r4, r5, r6, pc}
   bd610:	000be8dd 	.word	0x000be8dd
   bd614:	000beb36 	.word	0x000beb36

000bd618 <__multadd>:
   bd618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd61c:	690d      	ldr	r5, [r1, #16]
   bd61e:	4607      	mov	r7, r0
   bd620:	460c      	mov	r4, r1
   bd622:	461e      	mov	r6, r3
   bd624:	f101 0c14 	add.w	ip, r1, #20
   bd628:	2000      	movs	r0, #0
   bd62a:	f8dc 3000 	ldr.w	r3, [ip]
   bd62e:	b299      	uxth	r1, r3
   bd630:	fb02 6101 	mla	r1, r2, r1, r6
   bd634:	0c1e      	lsrs	r6, r3, #16
   bd636:	0c0b      	lsrs	r3, r1, #16
   bd638:	fb02 3306 	mla	r3, r2, r6, r3
   bd63c:	b289      	uxth	r1, r1
   bd63e:	3001      	adds	r0, #1
   bd640:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bd644:	4285      	cmp	r5, r0
   bd646:	f84c 1b04 	str.w	r1, [ip], #4
   bd64a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bd64e:	dcec      	bgt.n	bd62a <__multadd+0x12>
   bd650:	b30e      	cbz	r6, bd696 <__multadd+0x7e>
   bd652:	68a3      	ldr	r3, [r4, #8]
   bd654:	42ab      	cmp	r3, r5
   bd656:	dc19      	bgt.n	bd68c <__multadd+0x74>
   bd658:	6861      	ldr	r1, [r4, #4]
   bd65a:	4638      	mov	r0, r7
   bd65c:	3101      	adds	r1, #1
   bd65e:	f7ff ff79 	bl	bd554 <_Balloc>
   bd662:	4680      	mov	r8, r0
   bd664:	b928      	cbnz	r0, bd672 <__multadd+0x5a>
   bd666:	4602      	mov	r2, r0
   bd668:	4b0c      	ldr	r3, [pc, #48]	; (bd69c <__multadd+0x84>)
   bd66a:	480d      	ldr	r0, [pc, #52]	; (bd6a0 <__multadd+0x88>)
   bd66c:	21b5      	movs	r1, #181	; 0xb5
   bd66e:	f7fb f8ab 	bl	b87c8 <__assert_func>
   bd672:	6922      	ldr	r2, [r4, #16]
   bd674:	3202      	adds	r2, #2
   bd676:	f104 010c 	add.w	r1, r4, #12
   bd67a:	0092      	lsls	r2, r2, #2
   bd67c:	300c      	adds	r0, #12
   bd67e:	f7fe fbc9 	bl	bbe14 <memcpy>
   bd682:	4621      	mov	r1, r4
   bd684:	4638      	mov	r0, r7
   bd686:	f7ff ffa5 	bl	bd5d4 <_Bfree>
   bd68a:	4644      	mov	r4, r8
   bd68c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bd690:	3501      	adds	r5, #1
   bd692:	615e      	str	r6, [r3, #20]
   bd694:	6125      	str	r5, [r4, #16]
   bd696:	4620      	mov	r0, r4
   bd698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd69c:	000beab1 	.word	0x000beab1
   bd6a0:	000beb36 	.word	0x000beb36

000bd6a4 <__s2b>:
   bd6a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd6a8:	460c      	mov	r4, r1
   bd6aa:	4615      	mov	r5, r2
   bd6ac:	461f      	mov	r7, r3
   bd6ae:	2209      	movs	r2, #9
   bd6b0:	3308      	adds	r3, #8
   bd6b2:	4606      	mov	r6, r0
   bd6b4:	fb93 f3f2 	sdiv	r3, r3, r2
   bd6b8:	2100      	movs	r1, #0
   bd6ba:	2201      	movs	r2, #1
   bd6bc:	429a      	cmp	r2, r3
   bd6be:	db09      	blt.n	bd6d4 <__s2b+0x30>
   bd6c0:	4630      	mov	r0, r6
   bd6c2:	f7ff ff47 	bl	bd554 <_Balloc>
   bd6c6:	b940      	cbnz	r0, bd6da <__s2b+0x36>
   bd6c8:	4602      	mov	r2, r0
   bd6ca:	4b19      	ldr	r3, [pc, #100]	; (bd730 <__s2b+0x8c>)
   bd6cc:	4819      	ldr	r0, [pc, #100]	; (bd734 <__s2b+0x90>)
   bd6ce:	21ce      	movs	r1, #206	; 0xce
   bd6d0:	f7fb f87a 	bl	b87c8 <__assert_func>
   bd6d4:	0052      	lsls	r2, r2, #1
   bd6d6:	3101      	adds	r1, #1
   bd6d8:	e7f0      	b.n	bd6bc <__s2b+0x18>
   bd6da:	9b08      	ldr	r3, [sp, #32]
   bd6dc:	6143      	str	r3, [r0, #20]
   bd6de:	2d09      	cmp	r5, #9
   bd6e0:	f04f 0301 	mov.w	r3, #1
   bd6e4:	6103      	str	r3, [r0, #16]
   bd6e6:	dd16      	ble.n	bd716 <__s2b+0x72>
   bd6e8:	f104 0909 	add.w	r9, r4, #9
   bd6ec:	46c8      	mov	r8, r9
   bd6ee:	442c      	add	r4, r5
   bd6f0:	f818 3b01 	ldrb.w	r3, [r8], #1
   bd6f4:	4601      	mov	r1, r0
   bd6f6:	3b30      	subs	r3, #48	; 0x30
   bd6f8:	220a      	movs	r2, #10
   bd6fa:	4630      	mov	r0, r6
   bd6fc:	f7ff ff8c 	bl	bd618 <__multadd>
   bd700:	45a0      	cmp	r8, r4
   bd702:	d1f5      	bne.n	bd6f0 <__s2b+0x4c>
   bd704:	f1a5 0408 	sub.w	r4, r5, #8
   bd708:	444c      	add	r4, r9
   bd70a:	1b2d      	subs	r5, r5, r4
   bd70c:	1963      	adds	r3, r4, r5
   bd70e:	42bb      	cmp	r3, r7
   bd710:	db04      	blt.n	bd71c <__s2b+0x78>
   bd712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bd716:	340a      	adds	r4, #10
   bd718:	2509      	movs	r5, #9
   bd71a:	e7f6      	b.n	bd70a <__s2b+0x66>
   bd71c:	f814 3b01 	ldrb.w	r3, [r4], #1
   bd720:	4601      	mov	r1, r0
   bd722:	3b30      	subs	r3, #48	; 0x30
   bd724:	220a      	movs	r2, #10
   bd726:	4630      	mov	r0, r6
   bd728:	f7ff ff76 	bl	bd618 <__multadd>
   bd72c:	e7ee      	b.n	bd70c <__s2b+0x68>
   bd72e:	bf00      	nop
   bd730:	000beab1 	.word	0x000beab1
   bd734:	000beb36 	.word	0x000beb36

000bd738 <__hi0bits>:
   bd738:	0c03      	lsrs	r3, r0, #16
   bd73a:	041b      	lsls	r3, r3, #16
   bd73c:	b9d3      	cbnz	r3, bd774 <__hi0bits+0x3c>
   bd73e:	0400      	lsls	r0, r0, #16
   bd740:	2310      	movs	r3, #16
   bd742:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bd746:	bf04      	itt	eq
   bd748:	0200      	lsleq	r0, r0, #8
   bd74a:	3308      	addeq	r3, #8
   bd74c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bd750:	bf04      	itt	eq
   bd752:	0100      	lsleq	r0, r0, #4
   bd754:	3304      	addeq	r3, #4
   bd756:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bd75a:	bf04      	itt	eq
   bd75c:	0080      	lsleq	r0, r0, #2
   bd75e:	3302      	addeq	r3, #2
   bd760:	2800      	cmp	r0, #0
   bd762:	db05      	blt.n	bd770 <__hi0bits+0x38>
   bd764:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bd768:	f103 0301 	add.w	r3, r3, #1
   bd76c:	bf08      	it	eq
   bd76e:	2320      	moveq	r3, #32
   bd770:	4618      	mov	r0, r3
   bd772:	4770      	bx	lr
   bd774:	2300      	movs	r3, #0
   bd776:	e7e4      	b.n	bd742 <__hi0bits+0xa>

000bd778 <__lo0bits>:
   bd778:	6803      	ldr	r3, [r0, #0]
   bd77a:	f013 0207 	ands.w	r2, r3, #7
   bd77e:	4601      	mov	r1, r0
   bd780:	d00b      	beq.n	bd79a <__lo0bits+0x22>
   bd782:	07da      	lsls	r2, r3, #31
   bd784:	d423      	bmi.n	bd7ce <__lo0bits+0x56>
   bd786:	0798      	lsls	r0, r3, #30
   bd788:	bf49      	itett	mi
   bd78a:	085b      	lsrmi	r3, r3, #1
   bd78c:	089b      	lsrpl	r3, r3, #2
   bd78e:	2001      	movmi	r0, #1
   bd790:	600b      	strmi	r3, [r1, #0]
   bd792:	bf5c      	itt	pl
   bd794:	600b      	strpl	r3, [r1, #0]
   bd796:	2002      	movpl	r0, #2
   bd798:	4770      	bx	lr
   bd79a:	b298      	uxth	r0, r3
   bd79c:	b9a8      	cbnz	r0, bd7ca <__lo0bits+0x52>
   bd79e:	0c1b      	lsrs	r3, r3, #16
   bd7a0:	2010      	movs	r0, #16
   bd7a2:	b2da      	uxtb	r2, r3
   bd7a4:	b90a      	cbnz	r2, bd7aa <__lo0bits+0x32>
   bd7a6:	3008      	adds	r0, #8
   bd7a8:	0a1b      	lsrs	r3, r3, #8
   bd7aa:	071a      	lsls	r2, r3, #28
   bd7ac:	bf04      	itt	eq
   bd7ae:	091b      	lsreq	r3, r3, #4
   bd7b0:	3004      	addeq	r0, #4
   bd7b2:	079a      	lsls	r2, r3, #30
   bd7b4:	bf04      	itt	eq
   bd7b6:	089b      	lsreq	r3, r3, #2
   bd7b8:	3002      	addeq	r0, #2
   bd7ba:	07da      	lsls	r2, r3, #31
   bd7bc:	d403      	bmi.n	bd7c6 <__lo0bits+0x4e>
   bd7be:	085b      	lsrs	r3, r3, #1
   bd7c0:	f100 0001 	add.w	r0, r0, #1
   bd7c4:	d005      	beq.n	bd7d2 <__lo0bits+0x5a>
   bd7c6:	600b      	str	r3, [r1, #0]
   bd7c8:	4770      	bx	lr
   bd7ca:	4610      	mov	r0, r2
   bd7cc:	e7e9      	b.n	bd7a2 <__lo0bits+0x2a>
   bd7ce:	2000      	movs	r0, #0
   bd7d0:	4770      	bx	lr
   bd7d2:	2020      	movs	r0, #32
   bd7d4:	4770      	bx	lr
	...

000bd7d8 <__i2b>:
   bd7d8:	b510      	push	{r4, lr}
   bd7da:	460c      	mov	r4, r1
   bd7dc:	2101      	movs	r1, #1
   bd7de:	f7ff feb9 	bl	bd554 <_Balloc>
   bd7e2:	4602      	mov	r2, r0
   bd7e4:	b928      	cbnz	r0, bd7f2 <__i2b+0x1a>
   bd7e6:	4b05      	ldr	r3, [pc, #20]	; (bd7fc <__i2b+0x24>)
   bd7e8:	4805      	ldr	r0, [pc, #20]	; (bd800 <__i2b+0x28>)
   bd7ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bd7ee:	f7fa ffeb 	bl	b87c8 <__assert_func>
   bd7f2:	2301      	movs	r3, #1
   bd7f4:	6144      	str	r4, [r0, #20]
   bd7f6:	6103      	str	r3, [r0, #16]
   bd7f8:	bd10      	pop	{r4, pc}
   bd7fa:	bf00      	nop
   bd7fc:	000beab1 	.word	0x000beab1
   bd800:	000beb36 	.word	0x000beb36

000bd804 <__multiply>:
   bd804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd808:	4691      	mov	r9, r2
   bd80a:	690a      	ldr	r2, [r1, #16]
   bd80c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bd810:	429a      	cmp	r2, r3
   bd812:	bfb8      	it	lt
   bd814:	460b      	movlt	r3, r1
   bd816:	460c      	mov	r4, r1
   bd818:	bfbc      	itt	lt
   bd81a:	464c      	movlt	r4, r9
   bd81c:	4699      	movlt	r9, r3
   bd81e:	6927      	ldr	r7, [r4, #16]
   bd820:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bd824:	68a3      	ldr	r3, [r4, #8]
   bd826:	6861      	ldr	r1, [r4, #4]
   bd828:	eb07 060a 	add.w	r6, r7, sl
   bd82c:	42b3      	cmp	r3, r6
   bd82e:	b085      	sub	sp, #20
   bd830:	bfb8      	it	lt
   bd832:	3101      	addlt	r1, #1
   bd834:	f7ff fe8e 	bl	bd554 <_Balloc>
   bd838:	b930      	cbnz	r0, bd848 <__multiply+0x44>
   bd83a:	4602      	mov	r2, r0
   bd83c:	4b44      	ldr	r3, [pc, #272]	; (bd950 <__multiply+0x14c>)
   bd83e:	4845      	ldr	r0, [pc, #276]	; (bd954 <__multiply+0x150>)
   bd840:	f240 115d 	movw	r1, #349	; 0x15d
   bd844:	f7fa ffc0 	bl	b87c8 <__assert_func>
   bd848:	f100 0514 	add.w	r5, r0, #20
   bd84c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bd850:	462b      	mov	r3, r5
   bd852:	2200      	movs	r2, #0
   bd854:	4543      	cmp	r3, r8
   bd856:	d321      	bcc.n	bd89c <__multiply+0x98>
   bd858:	f104 0314 	add.w	r3, r4, #20
   bd85c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bd860:	f109 0314 	add.w	r3, r9, #20
   bd864:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bd868:	9202      	str	r2, [sp, #8]
   bd86a:	1b3a      	subs	r2, r7, r4
   bd86c:	3a15      	subs	r2, #21
   bd86e:	f022 0203 	bic.w	r2, r2, #3
   bd872:	3204      	adds	r2, #4
   bd874:	f104 0115 	add.w	r1, r4, #21
   bd878:	428f      	cmp	r7, r1
   bd87a:	bf38      	it	cc
   bd87c:	2204      	movcc	r2, #4
   bd87e:	9201      	str	r2, [sp, #4]
   bd880:	9a02      	ldr	r2, [sp, #8]
   bd882:	9303      	str	r3, [sp, #12]
   bd884:	429a      	cmp	r2, r3
   bd886:	d80c      	bhi.n	bd8a2 <__multiply+0x9e>
   bd888:	2e00      	cmp	r6, #0
   bd88a:	dd03      	ble.n	bd894 <__multiply+0x90>
   bd88c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bd890:	2b00      	cmp	r3, #0
   bd892:	d05a      	beq.n	bd94a <__multiply+0x146>
   bd894:	6106      	str	r6, [r0, #16]
   bd896:	b005      	add	sp, #20
   bd898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd89c:	f843 2b04 	str.w	r2, [r3], #4
   bd8a0:	e7d8      	b.n	bd854 <__multiply+0x50>
   bd8a2:	f8b3 a000 	ldrh.w	sl, [r3]
   bd8a6:	f1ba 0f00 	cmp.w	sl, #0
   bd8aa:	d024      	beq.n	bd8f6 <__multiply+0xf2>
   bd8ac:	f104 0e14 	add.w	lr, r4, #20
   bd8b0:	46a9      	mov	r9, r5
   bd8b2:	f04f 0c00 	mov.w	ip, #0
   bd8b6:	f85e 2b04 	ldr.w	r2, [lr], #4
   bd8ba:	f8d9 1000 	ldr.w	r1, [r9]
   bd8be:	fa1f fb82 	uxth.w	fp, r2
   bd8c2:	b289      	uxth	r1, r1
   bd8c4:	fb0a 110b 	mla	r1, sl, fp, r1
   bd8c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bd8cc:	f8d9 2000 	ldr.w	r2, [r9]
   bd8d0:	4461      	add	r1, ip
   bd8d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bd8d6:	fb0a c20b 	mla	r2, sl, fp, ip
   bd8da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bd8de:	b289      	uxth	r1, r1
   bd8e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bd8e4:	4577      	cmp	r7, lr
   bd8e6:	f849 1b04 	str.w	r1, [r9], #4
   bd8ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bd8ee:	d8e2      	bhi.n	bd8b6 <__multiply+0xb2>
   bd8f0:	9a01      	ldr	r2, [sp, #4]
   bd8f2:	f845 c002 	str.w	ip, [r5, r2]
   bd8f6:	9a03      	ldr	r2, [sp, #12]
   bd8f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bd8fc:	3304      	adds	r3, #4
   bd8fe:	f1b9 0f00 	cmp.w	r9, #0
   bd902:	d020      	beq.n	bd946 <__multiply+0x142>
   bd904:	6829      	ldr	r1, [r5, #0]
   bd906:	f104 0c14 	add.w	ip, r4, #20
   bd90a:	46ae      	mov	lr, r5
   bd90c:	f04f 0a00 	mov.w	sl, #0
   bd910:	f8bc b000 	ldrh.w	fp, [ip]
   bd914:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bd918:	fb09 220b 	mla	r2, r9, fp, r2
   bd91c:	4492      	add	sl, r2
   bd91e:	b289      	uxth	r1, r1
   bd920:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bd924:	f84e 1b04 	str.w	r1, [lr], #4
   bd928:	f85c 2b04 	ldr.w	r2, [ip], #4
   bd92c:	f8be 1000 	ldrh.w	r1, [lr]
   bd930:	0c12      	lsrs	r2, r2, #16
   bd932:	fb09 1102 	mla	r1, r9, r2, r1
   bd936:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bd93a:	4567      	cmp	r7, ip
   bd93c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bd940:	d8e6      	bhi.n	bd910 <__multiply+0x10c>
   bd942:	9a01      	ldr	r2, [sp, #4]
   bd944:	50a9      	str	r1, [r5, r2]
   bd946:	3504      	adds	r5, #4
   bd948:	e79a      	b.n	bd880 <__multiply+0x7c>
   bd94a:	3e01      	subs	r6, #1
   bd94c:	e79c      	b.n	bd888 <__multiply+0x84>
   bd94e:	bf00      	nop
   bd950:	000beab1 	.word	0x000beab1
   bd954:	000beb36 	.word	0x000beb36

000bd958 <__pow5mult>:
   bd958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd95c:	4615      	mov	r5, r2
   bd95e:	f012 0203 	ands.w	r2, r2, #3
   bd962:	4606      	mov	r6, r0
   bd964:	460f      	mov	r7, r1
   bd966:	d007      	beq.n	bd978 <__pow5mult+0x20>
   bd968:	4c25      	ldr	r4, [pc, #148]	; (bda00 <__pow5mult+0xa8>)
   bd96a:	3a01      	subs	r2, #1
   bd96c:	2300      	movs	r3, #0
   bd96e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bd972:	f7ff fe51 	bl	bd618 <__multadd>
   bd976:	4607      	mov	r7, r0
   bd978:	10ad      	asrs	r5, r5, #2
   bd97a:	d03d      	beq.n	bd9f8 <__pow5mult+0xa0>
   bd97c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bd97e:	b97c      	cbnz	r4, bd9a0 <__pow5mult+0x48>
   bd980:	2010      	movs	r0, #16
   bd982:	f7fa fee1 	bl	b8748 <malloc>
   bd986:	4602      	mov	r2, r0
   bd988:	6270      	str	r0, [r6, #36]	; 0x24
   bd98a:	b928      	cbnz	r0, bd998 <__pow5mult+0x40>
   bd98c:	4b1d      	ldr	r3, [pc, #116]	; (bda04 <__pow5mult+0xac>)
   bd98e:	481e      	ldr	r0, [pc, #120]	; (bda08 <__pow5mult+0xb0>)
   bd990:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bd994:	f7fa ff18 	bl	b87c8 <__assert_func>
   bd998:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bd99c:	6004      	str	r4, [r0, #0]
   bd99e:	60c4      	str	r4, [r0, #12]
   bd9a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bd9a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bd9a8:	b94c      	cbnz	r4, bd9be <__pow5mult+0x66>
   bd9aa:	f240 2171 	movw	r1, #625	; 0x271
   bd9ae:	4630      	mov	r0, r6
   bd9b0:	f7ff ff12 	bl	bd7d8 <__i2b>
   bd9b4:	2300      	movs	r3, #0
   bd9b6:	f8c8 0008 	str.w	r0, [r8, #8]
   bd9ba:	4604      	mov	r4, r0
   bd9bc:	6003      	str	r3, [r0, #0]
   bd9be:	f04f 0900 	mov.w	r9, #0
   bd9c2:	07eb      	lsls	r3, r5, #31
   bd9c4:	d50a      	bpl.n	bd9dc <__pow5mult+0x84>
   bd9c6:	4639      	mov	r1, r7
   bd9c8:	4622      	mov	r2, r4
   bd9ca:	4630      	mov	r0, r6
   bd9cc:	f7ff ff1a 	bl	bd804 <__multiply>
   bd9d0:	4639      	mov	r1, r7
   bd9d2:	4680      	mov	r8, r0
   bd9d4:	4630      	mov	r0, r6
   bd9d6:	f7ff fdfd 	bl	bd5d4 <_Bfree>
   bd9da:	4647      	mov	r7, r8
   bd9dc:	106d      	asrs	r5, r5, #1
   bd9de:	d00b      	beq.n	bd9f8 <__pow5mult+0xa0>
   bd9e0:	6820      	ldr	r0, [r4, #0]
   bd9e2:	b938      	cbnz	r0, bd9f4 <__pow5mult+0x9c>
   bd9e4:	4622      	mov	r2, r4
   bd9e6:	4621      	mov	r1, r4
   bd9e8:	4630      	mov	r0, r6
   bd9ea:	f7ff ff0b 	bl	bd804 <__multiply>
   bd9ee:	6020      	str	r0, [r4, #0]
   bd9f0:	f8c0 9000 	str.w	r9, [r0]
   bd9f4:	4604      	mov	r4, r0
   bd9f6:	e7e4      	b.n	bd9c2 <__pow5mult+0x6a>
   bd9f8:	4638      	mov	r0, r7
   bd9fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bd9fe:	bf00      	nop
   bda00:	000bec80 	.word	0x000bec80
   bda04:	000be8dd 	.word	0x000be8dd
   bda08:	000beb36 	.word	0x000beb36

000bda0c <__lshift>:
   bda0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bda10:	460c      	mov	r4, r1
   bda12:	6849      	ldr	r1, [r1, #4]
   bda14:	6923      	ldr	r3, [r4, #16]
   bda16:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bda1a:	68a3      	ldr	r3, [r4, #8]
   bda1c:	4607      	mov	r7, r0
   bda1e:	4691      	mov	r9, r2
   bda20:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bda24:	f108 0601 	add.w	r6, r8, #1
   bda28:	42b3      	cmp	r3, r6
   bda2a:	db0b      	blt.n	bda44 <__lshift+0x38>
   bda2c:	4638      	mov	r0, r7
   bda2e:	f7ff fd91 	bl	bd554 <_Balloc>
   bda32:	4605      	mov	r5, r0
   bda34:	b948      	cbnz	r0, bda4a <__lshift+0x3e>
   bda36:	4602      	mov	r2, r0
   bda38:	4b2a      	ldr	r3, [pc, #168]	; (bdae4 <__lshift+0xd8>)
   bda3a:	482b      	ldr	r0, [pc, #172]	; (bdae8 <__lshift+0xdc>)
   bda3c:	f240 11d9 	movw	r1, #473	; 0x1d9
   bda40:	f7fa fec2 	bl	b87c8 <__assert_func>
   bda44:	3101      	adds	r1, #1
   bda46:	005b      	lsls	r3, r3, #1
   bda48:	e7ee      	b.n	bda28 <__lshift+0x1c>
   bda4a:	2300      	movs	r3, #0
   bda4c:	f100 0114 	add.w	r1, r0, #20
   bda50:	f100 0210 	add.w	r2, r0, #16
   bda54:	4618      	mov	r0, r3
   bda56:	4553      	cmp	r3, sl
   bda58:	db37      	blt.n	bdaca <__lshift+0xbe>
   bda5a:	6920      	ldr	r0, [r4, #16]
   bda5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bda60:	f104 0314 	add.w	r3, r4, #20
   bda64:	f019 091f 	ands.w	r9, r9, #31
   bda68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bda6c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bda70:	d02f      	beq.n	bdad2 <__lshift+0xc6>
   bda72:	f1c9 0e20 	rsb	lr, r9, #32
   bda76:	468a      	mov	sl, r1
   bda78:	f04f 0c00 	mov.w	ip, #0
   bda7c:	681a      	ldr	r2, [r3, #0]
   bda7e:	fa02 f209 	lsl.w	r2, r2, r9
   bda82:	ea42 020c 	orr.w	r2, r2, ip
   bda86:	f84a 2b04 	str.w	r2, [sl], #4
   bda8a:	f853 2b04 	ldr.w	r2, [r3], #4
   bda8e:	4298      	cmp	r0, r3
   bda90:	fa22 fc0e 	lsr.w	ip, r2, lr
   bda94:	d8f2      	bhi.n	bda7c <__lshift+0x70>
   bda96:	1b03      	subs	r3, r0, r4
   bda98:	3b15      	subs	r3, #21
   bda9a:	f023 0303 	bic.w	r3, r3, #3
   bda9e:	3304      	adds	r3, #4
   bdaa0:	f104 0215 	add.w	r2, r4, #21
   bdaa4:	4290      	cmp	r0, r2
   bdaa6:	bf38      	it	cc
   bdaa8:	2304      	movcc	r3, #4
   bdaaa:	f841 c003 	str.w	ip, [r1, r3]
   bdaae:	f1bc 0f00 	cmp.w	ip, #0
   bdab2:	d001      	beq.n	bdab8 <__lshift+0xac>
   bdab4:	f108 0602 	add.w	r6, r8, #2
   bdab8:	3e01      	subs	r6, #1
   bdaba:	4638      	mov	r0, r7
   bdabc:	612e      	str	r6, [r5, #16]
   bdabe:	4621      	mov	r1, r4
   bdac0:	f7ff fd88 	bl	bd5d4 <_Bfree>
   bdac4:	4628      	mov	r0, r5
   bdac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bdaca:	f842 0f04 	str.w	r0, [r2, #4]!
   bdace:	3301      	adds	r3, #1
   bdad0:	e7c1      	b.n	bda56 <__lshift+0x4a>
   bdad2:	3904      	subs	r1, #4
   bdad4:	f853 2b04 	ldr.w	r2, [r3], #4
   bdad8:	f841 2f04 	str.w	r2, [r1, #4]!
   bdadc:	4298      	cmp	r0, r3
   bdade:	d8f9      	bhi.n	bdad4 <__lshift+0xc8>
   bdae0:	e7ea      	b.n	bdab8 <__lshift+0xac>
   bdae2:	bf00      	nop
   bdae4:	000beab1 	.word	0x000beab1
   bdae8:	000beb36 	.word	0x000beb36

000bdaec <__mcmp>:
   bdaec:	b530      	push	{r4, r5, lr}
   bdaee:	6902      	ldr	r2, [r0, #16]
   bdaf0:	690c      	ldr	r4, [r1, #16]
   bdaf2:	1b12      	subs	r2, r2, r4
   bdaf4:	d10e      	bne.n	bdb14 <__mcmp+0x28>
   bdaf6:	f100 0314 	add.w	r3, r0, #20
   bdafa:	3114      	adds	r1, #20
   bdafc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bdb00:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bdb04:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bdb08:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bdb0c:	42a5      	cmp	r5, r4
   bdb0e:	d003      	beq.n	bdb18 <__mcmp+0x2c>
   bdb10:	d305      	bcc.n	bdb1e <__mcmp+0x32>
   bdb12:	2201      	movs	r2, #1
   bdb14:	4610      	mov	r0, r2
   bdb16:	bd30      	pop	{r4, r5, pc}
   bdb18:	4283      	cmp	r3, r0
   bdb1a:	d3f3      	bcc.n	bdb04 <__mcmp+0x18>
   bdb1c:	e7fa      	b.n	bdb14 <__mcmp+0x28>
   bdb1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bdb22:	e7f7      	b.n	bdb14 <__mcmp+0x28>

000bdb24 <__mdiff>:
   bdb24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdb28:	460c      	mov	r4, r1
   bdb2a:	4606      	mov	r6, r0
   bdb2c:	4611      	mov	r1, r2
   bdb2e:	4620      	mov	r0, r4
   bdb30:	4690      	mov	r8, r2
   bdb32:	f7ff ffdb 	bl	bdaec <__mcmp>
   bdb36:	1e05      	subs	r5, r0, #0
   bdb38:	d110      	bne.n	bdb5c <__mdiff+0x38>
   bdb3a:	4629      	mov	r1, r5
   bdb3c:	4630      	mov	r0, r6
   bdb3e:	f7ff fd09 	bl	bd554 <_Balloc>
   bdb42:	b930      	cbnz	r0, bdb52 <__mdiff+0x2e>
   bdb44:	4b3a      	ldr	r3, [pc, #232]	; (bdc30 <__mdiff+0x10c>)
   bdb46:	4602      	mov	r2, r0
   bdb48:	f240 2132 	movw	r1, #562	; 0x232
   bdb4c:	4839      	ldr	r0, [pc, #228]	; (bdc34 <__mdiff+0x110>)
   bdb4e:	f7fa fe3b 	bl	b87c8 <__assert_func>
   bdb52:	2301      	movs	r3, #1
   bdb54:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bdb58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bdb5c:	bfa4      	itt	ge
   bdb5e:	4643      	movge	r3, r8
   bdb60:	46a0      	movge	r8, r4
   bdb62:	4630      	mov	r0, r6
   bdb64:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bdb68:	bfa6      	itte	ge
   bdb6a:	461c      	movge	r4, r3
   bdb6c:	2500      	movge	r5, #0
   bdb6e:	2501      	movlt	r5, #1
   bdb70:	f7ff fcf0 	bl	bd554 <_Balloc>
   bdb74:	b920      	cbnz	r0, bdb80 <__mdiff+0x5c>
   bdb76:	4b2e      	ldr	r3, [pc, #184]	; (bdc30 <__mdiff+0x10c>)
   bdb78:	4602      	mov	r2, r0
   bdb7a:	f44f 7110 	mov.w	r1, #576	; 0x240
   bdb7e:	e7e5      	b.n	bdb4c <__mdiff+0x28>
   bdb80:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bdb84:	6926      	ldr	r6, [r4, #16]
   bdb86:	60c5      	str	r5, [r0, #12]
   bdb88:	f104 0914 	add.w	r9, r4, #20
   bdb8c:	f108 0514 	add.w	r5, r8, #20
   bdb90:	f100 0e14 	add.w	lr, r0, #20
   bdb94:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bdb98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bdb9c:	f108 0210 	add.w	r2, r8, #16
   bdba0:	46f2      	mov	sl, lr
   bdba2:	2100      	movs	r1, #0
   bdba4:	f859 3b04 	ldr.w	r3, [r9], #4
   bdba8:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bdbac:	fa1f f883 	uxth.w	r8, r3
   bdbb0:	fa11 f18b 	uxtah	r1, r1, fp
   bdbb4:	0c1b      	lsrs	r3, r3, #16
   bdbb6:	eba1 0808 	sub.w	r8, r1, r8
   bdbba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bdbbe:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bdbc2:	fa1f f888 	uxth.w	r8, r8
   bdbc6:	1419      	asrs	r1, r3, #16
   bdbc8:	454e      	cmp	r6, r9
   bdbca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bdbce:	f84a 3b04 	str.w	r3, [sl], #4
   bdbd2:	d8e7      	bhi.n	bdba4 <__mdiff+0x80>
   bdbd4:	1b33      	subs	r3, r6, r4
   bdbd6:	3b15      	subs	r3, #21
   bdbd8:	f023 0303 	bic.w	r3, r3, #3
   bdbdc:	3304      	adds	r3, #4
   bdbde:	3415      	adds	r4, #21
   bdbe0:	42a6      	cmp	r6, r4
   bdbe2:	bf38      	it	cc
   bdbe4:	2304      	movcc	r3, #4
   bdbe6:	441d      	add	r5, r3
   bdbe8:	4473      	add	r3, lr
   bdbea:	469e      	mov	lr, r3
   bdbec:	462e      	mov	r6, r5
   bdbee:	4566      	cmp	r6, ip
   bdbf0:	d30e      	bcc.n	bdc10 <__mdiff+0xec>
   bdbf2:	f10c 0203 	add.w	r2, ip, #3
   bdbf6:	1b52      	subs	r2, r2, r5
   bdbf8:	f022 0203 	bic.w	r2, r2, #3
   bdbfc:	3d03      	subs	r5, #3
   bdbfe:	45ac      	cmp	ip, r5
   bdc00:	bf38      	it	cc
   bdc02:	2200      	movcc	r2, #0
   bdc04:	441a      	add	r2, r3
   bdc06:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bdc0a:	b17b      	cbz	r3, bdc2c <__mdiff+0x108>
   bdc0c:	6107      	str	r7, [r0, #16]
   bdc0e:	e7a3      	b.n	bdb58 <__mdiff+0x34>
   bdc10:	f856 8b04 	ldr.w	r8, [r6], #4
   bdc14:	fa11 f288 	uxtah	r2, r1, r8
   bdc18:	1414      	asrs	r4, r2, #16
   bdc1a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bdc1e:	b292      	uxth	r2, r2
   bdc20:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bdc24:	f84e 2b04 	str.w	r2, [lr], #4
   bdc28:	1421      	asrs	r1, r4, #16
   bdc2a:	e7e0      	b.n	bdbee <__mdiff+0xca>
   bdc2c:	3f01      	subs	r7, #1
   bdc2e:	e7ea      	b.n	bdc06 <__mdiff+0xe2>
   bdc30:	000beab1 	.word	0x000beab1
   bdc34:	000beb36 	.word	0x000beb36

000bdc38 <__ulp>:
   bdc38:	b082      	sub	sp, #8
   bdc3a:	ed8d 0b00 	vstr	d0, [sp]
   bdc3e:	9b01      	ldr	r3, [sp, #4]
   bdc40:	4912      	ldr	r1, [pc, #72]	; (bdc8c <__ulp+0x54>)
   bdc42:	4019      	ands	r1, r3
   bdc44:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bdc48:	2900      	cmp	r1, #0
   bdc4a:	dd05      	ble.n	bdc58 <__ulp+0x20>
   bdc4c:	2200      	movs	r2, #0
   bdc4e:	460b      	mov	r3, r1
   bdc50:	ec43 2b10 	vmov	d0, r2, r3
   bdc54:	b002      	add	sp, #8
   bdc56:	4770      	bx	lr
   bdc58:	4249      	negs	r1, r1
   bdc5a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bdc5e:	ea4f 5021 	mov.w	r0, r1, asr #20
   bdc62:	f04f 0200 	mov.w	r2, #0
   bdc66:	f04f 0300 	mov.w	r3, #0
   bdc6a:	da04      	bge.n	bdc76 <__ulp+0x3e>
   bdc6c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bdc70:	fa41 f300 	asr.w	r3, r1, r0
   bdc74:	e7ec      	b.n	bdc50 <__ulp+0x18>
   bdc76:	f1a0 0114 	sub.w	r1, r0, #20
   bdc7a:	291e      	cmp	r1, #30
   bdc7c:	bfda      	itte	le
   bdc7e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bdc82:	fa20 f101 	lsrle.w	r1, r0, r1
   bdc86:	2101      	movgt	r1, #1
   bdc88:	460a      	mov	r2, r1
   bdc8a:	e7e1      	b.n	bdc50 <__ulp+0x18>
   bdc8c:	7ff00000 	.word	0x7ff00000

000bdc90 <__b2d>:
   bdc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bdc92:	6905      	ldr	r5, [r0, #16]
   bdc94:	f100 0714 	add.w	r7, r0, #20
   bdc98:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bdc9c:	1f2e      	subs	r6, r5, #4
   bdc9e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bdca2:	4620      	mov	r0, r4
   bdca4:	f7ff fd48 	bl	bd738 <__hi0bits>
   bdca8:	f1c0 0320 	rsb	r3, r0, #32
   bdcac:	280a      	cmp	r0, #10
   bdcae:	f8df c07c 	ldr.w	ip, [pc, #124]	; bdd2c <__b2d+0x9c>
   bdcb2:	600b      	str	r3, [r1, #0]
   bdcb4:	dc14      	bgt.n	bdce0 <__b2d+0x50>
   bdcb6:	f1c0 0e0b 	rsb	lr, r0, #11
   bdcba:	fa24 f10e 	lsr.w	r1, r4, lr
   bdcbe:	42b7      	cmp	r7, r6
   bdcc0:	ea41 030c 	orr.w	r3, r1, ip
   bdcc4:	bf34      	ite	cc
   bdcc6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bdcca:	2100      	movcs	r1, #0
   bdccc:	3015      	adds	r0, #21
   bdcce:	fa04 f000 	lsl.w	r0, r4, r0
   bdcd2:	fa21 f10e 	lsr.w	r1, r1, lr
   bdcd6:	ea40 0201 	orr.w	r2, r0, r1
   bdcda:	ec43 2b10 	vmov	d0, r2, r3
   bdcde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bdce0:	42b7      	cmp	r7, r6
   bdce2:	bf3a      	itte	cc
   bdce4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bdce8:	f1a5 0608 	subcc.w	r6, r5, #8
   bdcec:	2100      	movcs	r1, #0
   bdcee:	380b      	subs	r0, #11
   bdcf0:	d017      	beq.n	bdd22 <__b2d+0x92>
   bdcf2:	f1c0 0c20 	rsb	ip, r0, #32
   bdcf6:	fa04 f500 	lsl.w	r5, r4, r0
   bdcfa:	42be      	cmp	r6, r7
   bdcfc:	fa21 f40c 	lsr.w	r4, r1, ip
   bdd00:	ea45 0504 	orr.w	r5, r5, r4
   bdd04:	bf8c      	ite	hi
   bdd06:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bdd0a:	2400      	movls	r4, #0
   bdd0c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bdd10:	fa01 f000 	lsl.w	r0, r1, r0
   bdd14:	fa24 f40c 	lsr.w	r4, r4, ip
   bdd18:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bdd1c:	ea40 0204 	orr.w	r2, r0, r4
   bdd20:	e7db      	b.n	bdcda <__b2d+0x4a>
   bdd22:	ea44 030c 	orr.w	r3, r4, ip
   bdd26:	460a      	mov	r2, r1
   bdd28:	e7d7      	b.n	bdcda <__b2d+0x4a>
   bdd2a:	bf00      	nop
   bdd2c:	3ff00000 	.word	0x3ff00000

000bdd30 <__d2b>:
   bdd30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bdd34:	4689      	mov	r9, r1
   bdd36:	2101      	movs	r1, #1
   bdd38:	ec57 6b10 	vmov	r6, r7, d0
   bdd3c:	4690      	mov	r8, r2
   bdd3e:	f7ff fc09 	bl	bd554 <_Balloc>
   bdd42:	4604      	mov	r4, r0
   bdd44:	b930      	cbnz	r0, bdd54 <__d2b+0x24>
   bdd46:	4602      	mov	r2, r0
   bdd48:	4b25      	ldr	r3, [pc, #148]	; (bdde0 <__d2b+0xb0>)
   bdd4a:	4826      	ldr	r0, [pc, #152]	; (bdde4 <__d2b+0xb4>)
   bdd4c:	f240 310a 	movw	r1, #778	; 0x30a
   bdd50:	f7fa fd3a 	bl	b87c8 <__assert_func>
   bdd54:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bdd58:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bdd5c:	bb35      	cbnz	r5, bddac <__d2b+0x7c>
   bdd5e:	2e00      	cmp	r6, #0
   bdd60:	9301      	str	r3, [sp, #4]
   bdd62:	d028      	beq.n	bddb6 <__d2b+0x86>
   bdd64:	4668      	mov	r0, sp
   bdd66:	9600      	str	r6, [sp, #0]
   bdd68:	f7ff fd06 	bl	bd778 <__lo0bits>
   bdd6c:	9900      	ldr	r1, [sp, #0]
   bdd6e:	b300      	cbz	r0, bddb2 <__d2b+0x82>
   bdd70:	9a01      	ldr	r2, [sp, #4]
   bdd72:	f1c0 0320 	rsb	r3, r0, #32
   bdd76:	fa02 f303 	lsl.w	r3, r2, r3
   bdd7a:	430b      	orrs	r3, r1
   bdd7c:	40c2      	lsrs	r2, r0
   bdd7e:	6163      	str	r3, [r4, #20]
   bdd80:	9201      	str	r2, [sp, #4]
   bdd82:	9b01      	ldr	r3, [sp, #4]
   bdd84:	61a3      	str	r3, [r4, #24]
   bdd86:	2b00      	cmp	r3, #0
   bdd88:	bf14      	ite	ne
   bdd8a:	2202      	movne	r2, #2
   bdd8c:	2201      	moveq	r2, #1
   bdd8e:	6122      	str	r2, [r4, #16]
   bdd90:	b1d5      	cbz	r5, bddc8 <__d2b+0x98>
   bdd92:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bdd96:	4405      	add	r5, r0
   bdd98:	f8c9 5000 	str.w	r5, [r9]
   bdd9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bdda0:	f8c8 0000 	str.w	r0, [r8]
   bdda4:	4620      	mov	r0, r4
   bdda6:	b003      	add	sp, #12
   bdda8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bddac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bddb0:	e7d5      	b.n	bdd5e <__d2b+0x2e>
   bddb2:	6161      	str	r1, [r4, #20]
   bddb4:	e7e5      	b.n	bdd82 <__d2b+0x52>
   bddb6:	a801      	add	r0, sp, #4
   bddb8:	f7ff fcde 	bl	bd778 <__lo0bits>
   bddbc:	9b01      	ldr	r3, [sp, #4]
   bddbe:	6163      	str	r3, [r4, #20]
   bddc0:	2201      	movs	r2, #1
   bddc2:	6122      	str	r2, [r4, #16]
   bddc4:	3020      	adds	r0, #32
   bddc6:	e7e3      	b.n	bdd90 <__d2b+0x60>
   bddc8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bddcc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bddd0:	f8c9 0000 	str.w	r0, [r9]
   bddd4:	6918      	ldr	r0, [r3, #16]
   bddd6:	f7ff fcaf 	bl	bd738 <__hi0bits>
   bddda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bddde:	e7df      	b.n	bdda0 <__d2b+0x70>
   bdde0:	000beab1 	.word	0x000beab1
   bdde4:	000beb36 	.word	0x000beb36

000bdde8 <__ratio>:
   bdde8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bddec:	4688      	mov	r8, r1
   bddee:	4669      	mov	r1, sp
   bddf0:	4681      	mov	r9, r0
   bddf2:	f7ff ff4d 	bl	bdc90 <__b2d>
   bddf6:	a901      	add	r1, sp, #4
   bddf8:	4640      	mov	r0, r8
   bddfa:	ec55 4b10 	vmov	r4, r5, d0
   bddfe:	f7ff ff47 	bl	bdc90 <__b2d>
   bde02:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bde06:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bde0a:	eba3 0c02 	sub.w	ip, r3, r2
   bde0e:	e9dd 3200 	ldrd	r3, r2, [sp]
   bde12:	1a9b      	subs	r3, r3, r2
   bde14:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bde18:	ec51 0b10 	vmov	r0, r1, d0
   bde1c:	2b00      	cmp	r3, #0
   bde1e:	bfd6      	itet	le
   bde20:	460a      	movle	r2, r1
   bde22:	462a      	movgt	r2, r5
   bde24:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bde28:	468b      	mov	fp, r1
   bde2a:	462f      	mov	r7, r5
   bde2c:	bfd4      	ite	le
   bde2e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bde32:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bde36:	4620      	mov	r0, r4
   bde38:	ee10 2a10 	vmov	r2, s0
   bde3c:	465b      	mov	r3, fp
   bde3e:	4639      	mov	r1, r7
   bde40:	f7fd fdba 	bl	bb9b8 <__aeabi_ddiv>
   bde44:	ec41 0b10 	vmov	d0, r0, r1
   bde48:	b003      	add	sp, #12
   bde4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bde4e <__copybits>:
   bde4e:	3901      	subs	r1, #1
   bde50:	b570      	push	{r4, r5, r6, lr}
   bde52:	1149      	asrs	r1, r1, #5
   bde54:	6914      	ldr	r4, [r2, #16]
   bde56:	3101      	adds	r1, #1
   bde58:	f102 0314 	add.w	r3, r2, #20
   bde5c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bde60:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bde64:	1f05      	subs	r5, r0, #4
   bde66:	42a3      	cmp	r3, r4
   bde68:	d30c      	bcc.n	bde84 <__copybits+0x36>
   bde6a:	1aa3      	subs	r3, r4, r2
   bde6c:	3b11      	subs	r3, #17
   bde6e:	f023 0303 	bic.w	r3, r3, #3
   bde72:	3211      	adds	r2, #17
   bde74:	42a2      	cmp	r2, r4
   bde76:	bf88      	it	hi
   bde78:	2300      	movhi	r3, #0
   bde7a:	4418      	add	r0, r3
   bde7c:	2300      	movs	r3, #0
   bde7e:	4288      	cmp	r0, r1
   bde80:	d305      	bcc.n	bde8e <__copybits+0x40>
   bde82:	bd70      	pop	{r4, r5, r6, pc}
   bde84:	f853 6b04 	ldr.w	r6, [r3], #4
   bde88:	f845 6f04 	str.w	r6, [r5, #4]!
   bde8c:	e7eb      	b.n	bde66 <__copybits+0x18>
   bde8e:	f840 3b04 	str.w	r3, [r0], #4
   bde92:	e7f4      	b.n	bde7e <__copybits+0x30>

000bde94 <__any_on>:
   bde94:	f100 0214 	add.w	r2, r0, #20
   bde98:	6900      	ldr	r0, [r0, #16]
   bde9a:	114b      	asrs	r3, r1, #5
   bde9c:	4298      	cmp	r0, r3
   bde9e:	b510      	push	{r4, lr}
   bdea0:	db11      	blt.n	bdec6 <__any_on+0x32>
   bdea2:	dd0a      	ble.n	bdeba <__any_on+0x26>
   bdea4:	f011 011f 	ands.w	r1, r1, #31
   bdea8:	d007      	beq.n	bdeba <__any_on+0x26>
   bdeaa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bdeae:	fa24 f001 	lsr.w	r0, r4, r1
   bdeb2:	fa00 f101 	lsl.w	r1, r0, r1
   bdeb6:	428c      	cmp	r4, r1
   bdeb8:	d10b      	bne.n	bded2 <__any_on+0x3e>
   bdeba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bdebe:	4293      	cmp	r3, r2
   bdec0:	d803      	bhi.n	bdeca <__any_on+0x36>
   bdec2:	2000      	movs	r0, #0
   bdec4:	bd10      	pop	{r4, pc}
   bdec6:	4603      	mov	r3, r0
   bdec8:	e7f7      	b.n	bdeba <__any_on+0x26>
   bdeca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bdece:	2900      	cmp	r1, #0
   bded0:	d0f5      	beq.n	bdebe <__any_on+0x2a>
   bded2:	2001      	movs	r0, #1
   bded4:	e7f6      	b.n	bdec4 <__any_on+0x30>

000bded6 <_calloc_r>:
   bded6:	b513      	push	{r0, r1, r4, lr}
   bded8:	434a      	muls	r2, r1
   bdeda:	4611      	mov	r1, r2
   bdedc:	9201      	str	r2, [sp, #4]
   bdede:	f7fa fc63 	bl	b87a8 <_malloc_r>
   bdee2:	4604      	mov	r4, r0
   bdee4:	b118      	cbz	r0, bdeee <_calloc_r+0x18>
   bdee6:	9a01      	ldr	r2, [sp, #4]
   bdee8:	2100      	movs	r1, #0
   bdeea:	f7fd ffbb 	bl	bbe64 <memset>
   bdeee:	4620      	mov	r0, r4
   bdef0:	b002      	add	sp, #8
   bdef2:	bd10      	pop	{r4, pc}
   bdef4:	0000      	movs	r0, r0
	...

000bdef8 <nan>:
   bdef8:	ed9f 0b01 	vldr	d0, [pc, #4]	; bdf00 <nan+0x8>
   bdefc:	4770      	bx	lr
   bdefe:	bf00      	nop
   bdf00:	00000000 	.word	0x00000000
   bdf04:	7ff80000 	.word	0x7ff80000

000bdf08 <nanf>:
   bdf08:	ed9f 0a01 	vldr	s0, [pc, #4]	; bdf10 <nanf+0x8>
   bdf0c:	4770      	bx	lr
   bdf0e:	bf00      	nop
   bdf10:	7fc00000 	.word	0x7fc00000

000bdf14 <__ascii_wctomb>:
   bdf14:	b149      	cbz	r1, bdf2a <__ascii_wctomb+0x16>
   bdf16:	2aff      	cmp	r2, #255	; 0xff
   bdf18:	bf85      	ittet	hi
   bdf1a:	238a      	movhi	r3, #138	; 0x8a
   bdf1c:	6003      	strhi	r3, [r0, #0]
   bdf1e:	700a      	strbls	r2, [r1, #0]
   bdf20:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   bdf24:	bf98      	it	ls
   bdf26:	2001      	movls	r0, #1
   bdf28:	4770      	bx	lr
   bdf2a:	4608      	mov	r0, r1
   bdf2c:	4770      	bx	lr
	...

000bdf30 <__aeabi_d2lz>:
   bdf30:	b538      	push	{r3, r4, r5, lr}
   bdf32:	2200      	movs	r2, #0
   bdf34:	2300      	movs	r3, #0
   bdf36:	4604      	mov	r4, r0
   bdf38:	460d      	mov	r5, r1
   bdf3a:	f7fd fe85 	bl	bbc48 <__aeabi_dcmplt>
   bdf3e:	b928      	cbnz	r0, bdf4c <__aeabi_d2lz+0x1c>
   bdf40:	4620      	mov	r0, r4
   bdf42:	4629      	mov	r1, r5
   bdf44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bdf48:	f7fd bf2c 	b.w	bbda4 <__aeabi_d2ulz>
   bdf4c:	4620      	mov	r0, r4
   bdf4e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bdf52:	f7fd ff27 	bl	bbda4 <__aeabi_d2ulz>
   bdf56:	4240      	negs	r0, r0
   bdf58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bdf5c:	bd38      	pop	{r3, r4, r5, pc}
   bdf5e:	bf00      	nop

000bdf60 <dynalib_user>:
   bdf60:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bdf70:	0000 0000 6162 6973 5f63 7473 6972 676e     ....basic_string
   bdf80:	3a3a 4d5f 635f 6e6f 7473 7572 7463 6e20     ::_M_construct n
   bdf90:	6c75 206c 6f6e 2074 6176 696c 0064 720a     ull not valid..r
   bdfa0:	7165 6575 7473 6320 646f 2065 2c31 6120     equest code 1, a
   bdfb0:	6464 6572 7373 203a 7400 6172 736e 696d     ddress: .transmi
   bdfc0:	7373 6f69 206e 6572 6963 7665 6465 6620     ssion recieved f
   bdfd0:	6f72 3a6d 0020 6564 6976 6563 6920 3a64     rom: .device id:
   bdfe0:	0020 7274 6e61 6d73 7369 6973 6e6f 7320      .transmission s
   bdff0:	6e65 2074 6f74 203a 7200 7165 6575 7473     ent to: .request
   be000:	6320 646f 2065 2c32 6120 6464 6572 7373      code 2, address
   be010:	203a 6300 6e6f 6c66 6369 2074 6576 6972     : .conflict veri
   be020:	6966 6163 6974 6e6f 203a 0a00 6f43 6e6e     fication: ..Conn
   be030:	6365 6574 2064 6f74 203a 6300 6e61 6f6e     ected to: .canno
   be040:	2074 7263 6165 6574 7320 6474 3a3a 6576     t create std::ve
   be050:	7463 726f 6c20 7261 6567 2072 6874 6e61     ctor larger than
   be060:	6d20 7861 735f 7a69 2865 0029 6b6f 7700      max_size().ok.w
   be070:	6669 3a69 2c00 5300 4953 3a44 2520 2c73     ifi:.,.SSID: %s,
   be080:	7020 7361 7773 726f 3a64 2520 0073 6963      password: %s.ci
   be090:	7974 003a 6e69 6f63 7272 6365 2074 6963     ty:.incorrect ci
   be0a0:	7974 6e20 6d61 0065 6963 7974 203a 7325     ty name.city: %s
   be0b0:	6300 6c6f 726f 003a 6963 7974 6e20 746f     .color:.city not
   be0c0:	7320 7465 6700 6572 6e65 0031 7267 6565      set.green1.gree
   be0d0:	206e 6966 0078 7267 6565 326e 6900 636e     n fix.green2.inc
   be0e0:	726f 6572 7463 7220 6961 776c 7961 6320     orrect railway c
   be0f0:	6c6f 726f 4200 454c 6620 6e69 7369 6568     olor.BLE finishe
   be100:	0064 6572 0064 4646 3030 3030 3000 3041     d.red.FF0000.0A0
   be110:	3030 0030 6c62 6575 3000 3030 4630 0046     000.blue.0000FF.
   be120:	3030 3030 4130 6200 6f72 6e77 4600 4646     00000A.brown.FFF
   be130:	3046 0030 4130 4130 3030 6700 6572 6e65     F00.0A0A00.green
   be140:	3000 4630 3046 0030 3030 4130 3030 6f00     .00FF00.000A00.o
   be150:	6172 676e 0065 4646 3038 3030 3000 3041     range.FF8000.0A0
   be160:	3035 0030 7570 7072 656c 3200 3030 4630     500.purple.2000F
   be170:	0046 3230 3030 4130 7000 6e69 006b 4646     F.02000A.pink.FF
   be180:	3038 3038 3000 3041 3035 0035 3231 4133     8080.0A0505.123A
   be190:	3100 3332 0042 3231 4333 7400 0078 7872     .123B.123C.tx.rx
   be1a0:	7400 6572 2e6b 6874 7765 6c63 632e 6d6f     .trek.thewcl.com
   be1b0:	6300 6174 6d00 7462 0061 6f6c 706f 7320     .cta.mbta.loop s
   be1c0:	6174 7472 2500 2c69 0020 6c2f 6f6f 2d70     tart.%i, ./loop-
   be1d0:	7274 6361 736b 002f 6c3f 6e69 7365 003d     tracks/.?lines=.
   be1e0:	4547 0054 6170 7372 6e69 0067 6170 7372     GET.parsing.pars
   be1f0:	6e69 2067 6166 6c69 6465 6c00 6e69 7365     ing failed.lines
   be200:	7400 6172 6e69 0073 656e 7478 735f 6f74     .trains.next_sto
   be210:	0070 6564 7473 6e69 7461 6f69 006e 6964     p.destination.di
   be220:	6572 7463 6f69 006e 616c 6974 7574 6564     rection.latitude
   be230:	6c00 6e6f 6967 7574 6564 6200 6572 6b61     .longitude.break
   be240:	2500 2073 6172 6c69 7020 7261 2074 6925     .%s rail part %i
   be250:	203a 0000                                   : ..

000be254 <_ZTV16JsonParserStaticILj10000ELj1000EE>:
	...
   be25c:	40b9 000b 40cd 000b 6341 6563 7470 2f00     .@...@..Accept./
   be26c:	2f2a 0000 0019 0000 0003 0000 0007 0000     */..............
   be27c:	0005 0000 000c 0000 0008 0000 0005 0000     ................
   be28c:	0005 0000 0005 0000 0019 0000 0005 0000     ................
   be29c:	000f 0000 000a 0000 000a 0000 000a 0000     ................
   be2ac:	000a 0000 0014 0000 0000 0000 0028 0000     ............(...
   be2bc:	0000 0000 0002 0000 0006 0000 0000 0000     ................
   be2cc:	0000 0000 000f 0000 000a 0000 000a 0000     ................
   be2dc:	000f 0000 000f 0000 000f 0000 0014 0000     ................
   be2ec:	0000 0000 0001 0000 0003 0000 0000 0000     ................
   be2fc:	0000 0000 000c 0000 0007 0000 0001 0000     ................
   be30c:	000a 0000 000a 0000 000a 0000 000a 0000     ................
   be31c:	000c 0000 0000 0000 0028 0000 0008 0000     ........(.......
   be32c:	0003 0000 0007 0000 0001 0000 0003 0000     ................
   be33c:	0007 0000 0007 0000 0006 0000 000a 0000     ................
   be34c:	000a 0000 000a 0000 000a 0000 000e 0000     ................
   be35c:	0000 0000 0028 0000 0006 0000 0003 0000     ....(...........
   be36c:	0007 0000 0002 0000 0003 0000 0005 0000     ................
   be37c:	000a 0000 0005 0000 000a 0000 000a 0000     ................
   be38c:	000a 0000 4820 5454 2f50 2e31 0d30 000a     .... HTTP/1.0...
   be39c:	6c63 736f 0065 6f43 6e6e 6365 6974 6e6f     close.Connection
   be3ac:	4800 534f 0054 6f43 746e 6e65 2d74 654c     .HOST.Content-Le
   be3bc:	676e 6874 5000 534f 0054 0a0d 0a0d 2500     ngth.POST......%
   be3cc:	3430 0078                                   04x.

000be3d0 <_ZTV10JsonBuffer>:
	...
   be3d8:	7905 000b 7921 000b                         .y..!y..

000be3e0 <_ZTV10JsonParser>:
	...
   be3e8:	7935 000b 7959 000b                         5y..Yy..

000be3f0 <_ZTV13JsonReference>:
	...
   be3f8:	78f5 000b 78f7 000b 7341 6573 7472 6f69     .x...x..Assertio
   be408:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   be418:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   be428:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   be438:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   be448:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   be458:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   be468:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   be478:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   be488:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   be498:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   be4a8:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   be4b8:	6976 6563 002e 6f43 6e6e 6365 6574 2064     vice..Connected 
   be4c8:	7962 4320 6e65 7274 6c61 6420 7665 6369     by Central devic
   be4d8:	2e65 4400 7369 6f63 6e6e 6365 6574 2064     e..Disconnected 
   be4e8:	7962 7220 6d65 746f 2065 6564 6976 6563     by remote device
   be4f8:	002e 7544 6c70 6369 7461 6465 6320 6168     ..Duplicated cha
   be508:	6172 7463 7265 7369 6974 2063 6163 6e6e     racteristic cann
   be518:	746f 6220 2065 6461 6564 2e64 4600 6961     ot be added..Fai
   be528:	656c 2064 6f74 6120 7070 6e65 2064 6f6c     led to append lo
   be538:	6163 206c 6863 7261 6361 6574 6972 7473     cal characterist
   be548:	6369 002e                                   ic..

000be54c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be554:	87f5 000b 8859 000b 893f 000b 8883 000b     ....Y...?.......
   be564:	87f9 000b                                   ....

000be568 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be570:	87f1 000b 8867 000b 87f3 000b 8889 000b     ....g...........
   be580:	8819 000b                                   ....

000be584 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be58c:	87ef 000b 8875 000b 90f9 000b 888f 000b     ....u...........
   be59c:	8839 000b                                   9...

000be5a0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   be5ac:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000be5be <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   be5be:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000be5ce <_ZN8particle7BleUuid9BASE_UUIDE>:
   be5ce:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000be5e0 <_ZTVN5spark13EthernetClassE>:
	...
   be5e8:	9ba7 000b 9b9d 000b 9b93 000b 9b89 000b     ................
   be5f8:	9b7d 000b 9b71 000b 9e2d 000b 9e35 000b     }...q...-...5...
   be608:	9b65 000b 9b5d 000b 9b53 000b 9b49 000b     e...]...S...I...
   be618:	9e65 000b                                   e...

000be61c <_ZTV7TwoWire>:
	...
   be624:	9bc5 000b 9c0f 000b 9be7 000b 9bc7 000b     ................
   be634:	9bef 000b 9bf7 000b 9bff 000b 9c07 000b     ................

000be644 <_ZTV9IPAddress>:
	...
   be64c:	9cd1 000b 9cc1 000b 9cc3 000b 7061 0070     ............app.

000be65c <_ZTVN5spark12NetworkClassE>:
	...
   be664:	9ded 000b 9df7 000b 9e01 000b 9e0b 000b     ................
   be674:	9e15 000b 9e21 000b 9e2d 000b 9e35 000b     ....!...-...5...
   be684:	9e3d 000b 9e49 000b 9e51 000b 9e5b 000b     =...I...Q...[...
   be694:	9e65 000b 6977 6972 676e 7200 6365 2076     e...wiring.recv 
   be6a4:	7265 6f72 2072 203d 6425 0000               error = %d..

000be6b0 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be6b8:	a40d 000b a431 000b a963 000b a43f 000b     ....1...c...?...
   be6c8:	a411 000b                                   ....

000be6cc <_ZTV9TCPClient>:
	...
   be6d4:	a4bd 000b a4f1 000b a389 000b a3a3 000b     ................
   be6e4:	a7f9 000b a3cd 000b a66f 000b a401 000b     ........o.......
   be6f4:	a701 000b a541 000b a69d 000b a8ad 000b     ....A...........
   be704:	a63d 000b a403 000b a3b5 000b a445 000b     =...........E...
   be714:	a521 000b 5925 252d 2d6d 6425 2554 3a48     !...%Y-%m-%dT%H:
   be724:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000be734 <_ZTV11USARTSerial>:
	...
   be73c:	a97d 000b a9e9 000b a9c1 000b 9f51 000b     }...........Q...
   be74c:	a991 000b a9ad 000b a99f 000b a9bb 000b     ................
   be75c:	a97f 000b a983 000b                         ........

000be764 <_ZTV9USBSerial>:
	...
   be76c:	aa27 000b aa8f 000b aa65 000b 9f51 000b     '.......e...Q...
   be77c:	aa57 000b aa29 000b aa39 000b aa89 000b     W...)...9.......
   be78c:	aa49 000b aa21 000b                         I...!...

000be794 <_ZTVN5spark9WiFiClassE>:
	...
   be79c:	ab87 000b ab7d 000b ab73 000b ab29 000b     ....}...s...)...
   be7ac:	ab67 000b ab5b 000b 9e2d 000b 9e35 000b     g...[...-...5...
   be7bc:	ab4f 000b ab47 000b ab3d 000b ab33 000b     O...G...=...3...
   be7cc:	9e65 000b                                   e...

000be7d0 <_ZSt7nothrow>:
	...

000be7d1 <_ZTSSt19_Sp_make_shared_tag>:
   be7d1:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   be7e1:	6572 5f64 6174 0067 0000                     red_tag....

000be7ec <_ZTISt19_Sp_make_shared_tag>:
   be7ec:	e844 000b e7d1 000b 6162 6973 5f63 7473     D.......basic_st
   be7fc:	6972 676e 3a3a 4d5f 635f 6572 7461 0065     ring::_M_create.

000be80c <_ZTIN10__cxxabiv117__class_type_infoE>:
   be80c:	e8a4 000b e818 000b e8c8 000b               ............

000be818 <_ZTSN10__cxxabiv117__class_type_infoE>:
   be818:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   be828:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   be838:	0045 0000                                   E...

000be83c <_ZTVN10__cxxabiv117__class_type_infoE>:
   be83c:	0000 0000 e80c 000b af7d 000b af91 000b     ........}.......
   be84c:	b125 000b b125 000b affb 000b af3d 000b     %...%.......=...
   be85c:	afe3 000b afa5 000b af6f 000b               ........o...

000be868 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   be868:	e8a4 000b e874 000b e80c 000b               ....t.......

000be874 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   be874:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   be884:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   be894:	666e 456f 0000 0000                         nfoE....

000be89c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   be89c:	0000 0000 e868 000b b025 000b b039 000b     ....h...%...9...
   be8ac:	b125 000b b125 000b affb 000b af3d 000b     %...%.......=...
   be8bc:	b0f9 000b b085 000b b04d 000b               ........M...

000be8c8 <_ZTISt9type_info>:
   be8c8:	e844 000b e8d0 000b                         D.......

000be8d0 <_ZTSSt9type_info>:
   be8d0:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   be8e0:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   be8f0:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   be900:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   be910:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   be920:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   be930:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   be940:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   be950:	6e69 7469 0079 6e61 0000 0000               inity.an....

000be95c <fpi.1>:
   be95c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   be96c:	0000 0000                                   ....

000be970 <fpinan.0>:
   be970:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000be988 <tinytens>:
   be988:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   be998:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   be9a8:	6f43 64ac 0628 1168                         Co.d(.h.

000be9b0 <_ctype_>:
   be9b0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   be9c0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   be9d0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   be9e0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   be9f0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bea00:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bea10:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bea20:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bea30:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   beab0:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   beac0:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   bead0:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   beae0:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   beaf0:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   beb00:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   beb10:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   beb20:	632e 0000                                   .c..

000beb24 <_C_numeric_locale>:
   beb24:	e54a 000b e3ca 000b 51a0 2003 4f50 4953     J........Q. POSI
   beb34:	0058 742f 706d 6a2f 6e65 696b 736e 472d     X./tmp/jenkins-G
   beb44:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   beb54:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   beb64:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   beb74:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   beb84:	696c 2f62 706d 6572 2e63 0063               lib/mprec.c.

000beb90 <__mprec_bigtens>:
   beb90:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   beba0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bebb0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bebb8 <__mprec_tens>:
   bebb8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bebc8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bebd8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bebe8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bebf8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bec08:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bec18:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bec28:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bec38:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bec48:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bec58:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bec68:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bec78:	9db4 79d9 7843 44ea                         ...yCx.D

000bec80 <p05.0>:
   bec80:	0005 0000 0019 0000 007d 0000               ........}...

000bec8c <link_const_variable_data_end>:
   bec8c:	000b6c31 	.word	0x000b6c31
   bec90:	000b9b39 	.word	0x000b9b39
   bec94:	000b9bb1 	.word	0x000b9bb1
   bec98:	000b9ddd 	.word	0x000b9ddd
   bec9c:	000b9f3d 	.word	0x000b9f3d
   beca0:	000ba079 	.word	0x000ba079
   beca4:	000ba365 	.word	0x000ba365
   beca8:	000ba969 	.word	0x000ba969
   becac:	000bab91 	.word	0x000bab91
