
/Users/sainihome/Documents/GitHub/loop-tracks/master/target/3.3.0/argon/master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008bc0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bcbe0  000bcbe0  0000cbe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bcc04  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f0  20035584  000bcc08  00015584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000907c  20035774  20035774  00025774  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000bcdf8  000bcdf8  0001cdf8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bce20  000bce20  0001ce20  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0012ea9b  00000000  00000000  0001ce24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00012b78  00000000  00000000  0014b8bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004294c  00000000  00000000  0015e437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003230  00000000  00000000  001a0d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000c260  00000000  00000000  001a3fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038122  00000000  00000000  001b0213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00042380  00000000  00000000  001e8335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00144423  00000000  00000000  0022a6b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00009914  00000000  00000000  0036ead8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f005 ff28 	bl	b9e86 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f005 ff4a 	bl	b9ed6 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	20035584 	.word	0x20035584
   b404c:	000bcc08 	.word	0x000bcc08
   b4050:	20035774 	.word	0x20035774
   b4054:	20035774 	.word	0x20035774
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f004 fe43 	bl	b8cec <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bcbb4 	.word	0x000bcbb4
   b4080:	000bcbdc 	.word	0x000bcbdc

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bbea 	b.w	b485c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 f8eb 	bl	b5264 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f004 bde3 	b.w	b8c5c <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 bba3 	b.w	b67e0 <malloc>

000b409a <_Znaj>:
   b409a:	f002 bba1 	b.w	b67e0 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f002 bba7 	b.w	b67f0 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr
	...

000b40b4 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40b4:	b510      	push	{r4, lr}
   b40b6:	4b03      	ldr	r3, [pc, #12]	; (b40c4 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev+0x10>)
   b40b8:	6003      	str	r3, [r0, #0]
   b40ba:	4604      	mov	r4, r0
   b40bc:	f001 fcde 	bl	b5a7c <_ZN10JsonParserD1Ev>
   b40c0:	4620      	mov	r0, r4
   b40c2:	bd10      	pop	{r4, pc}
   b40c4:	000bc234 	.word	0x000bc234

000b40c8 <_ZN16JsonParserStaticILj10000ELj1000EED0Ev>:
   b40c8:	b510      	push	{r4, lr}
   b40ca:	4604      	mov	r4, r0
   b40cc:	f7ff fff2 	bl	b40b4 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
   b40d0:	4620      	mov	r0, r4
   b40d2:	f246 51bc 	movw	r1, #26044	; 0x65bc
   b40d6:	f7ff ffe2 	bl	b409e <_ZdlPvj>
   b40da:	4620      	mov	r0, r4
   b40dc:	bd10      	pop	{r4, pc}

000b40de <_ZNSt12_Vector_baseI6StringSaIS0_EE11_M_allocateEj.isra.0>:

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
   b40de:	b508      	push	{r3, lr}
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b40e0:	b148      	cbz	r0, b40f6 <_ZNSt12_Vector_baseI6StringSaIS0_EE11_M_allocateEj.isra.0+0x18>
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      _GLIBCXX_NODISCARD _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {
	if (__n > this->_M_max_size())
   b40e2:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
   b40e6:	d301      	bcc.n	b40ec <_ZNSt12_Vector_baseI6StringSaIS0_EE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b40e8:	f004 fe9a 	bl	b8e20 <_ZSt17__throw_bad_allocv>
      }
   b40ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b40f0:	0100      	lsls	r0, r0, #4
   b40f2:	f7ff bfd0 	b.w	b4096 <_Znwj>
   b40f6:	bd08      	pop	{r3, pc}

000b40f8 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b40f8:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b40fa:	b148      	cbz	r0, b4110 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b40fc:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   b4100:	d301      	bcc.n	b4106 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b4102:	f004 fe8d 	bl	b8e20 <_ZSt17__throw_bad_allocv>
      }
   b4106:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b410a:	0080      	lsls	r0, r0, #2
   b410c:	f7ff bfc3 	b.w	b4096 <_Znwj>
   b4110:	bd08      	pop	{r3, pc}

000b4112 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b4112:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4114:	b148      	cbz	r0, b412a <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b4116:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
   b411a:	d301      	bcc.n	b4120 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b411c:	f004 fe80 	bl	b8e20 <_ZSt17__throw_bad_allocv>
      }
   b4120:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4124:	00c0      	lsls	r0, r0, #3
   b4126:	f7ff bfb6 	b.w	b4096 <_Znwj>
   b412a:	bd08      	pop	{r3, pc}

000b412c <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b412c:	6803      	ldr	r3, [r0, #0]
   b412e:	b2c9      	uxtb	r1, r1
   b4130:	689b      	ldr	r3, [r3, #8]
   b4132:	4718      	bx	r3

000b4134 <_ZN5Print5writeEPKc.isra.0>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4134:	b513      	push	{r0, r1, r4, lr}
   b4136:	4604      	mov	r4, r0
      if (str == NULL) return 0;
   b4138:	b161      	cbz	r1, b4154 <_ZN5Print5writeEPKc.isra.0+0x20>
      return write((const uint8_t *)str, strlen(str));
   b413a:	4608      	mov	r0, r1
   b413c:	9101      	str	r1, [sp, #4]
   b413e:	f005 ff13 	bl	b9f68 <strlen>
   b4142:	6823      	ldr	r3, [r4, #0]
   b4144:	9901      	ldr	r1, [sp, #4]
   b4146:	68db      	ldr	r3, [r3, #12]
   b4148:	4602      	mov	r2, r0
   b414a:	4620      	mov	r0, r4
    }
   b414c:	b002      	add	sp, #8
   b414e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4152:	4718      	bx	r3
    }
   b4154:	b002      	add	sp, #8
   b4156:	bd10      	pop	{r4, pc}

000b4158 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
      count++;
    }
  }
}

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  String inputBuffer = "";

  if(bleCount <= slaveCountExpected){
   b415c:	4c51      	ldr	r4, [pc, #324]	; (b42a4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14c>)
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b415e:	b085      	sub	sp, #20
   b4160:	4680      	mov	r8, r0
   b4162:	460e      	mov	r6, r1
  String inputBuffer = "";
   b4164:	4668      	mov	r0, sp
   b4166:	4950      	ldr	r1, [pc, #320]	; (b42a8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x150>)
   b4168:	f003 ffeb 	bl	b8142 <_ZN6StringC1EPK19__FlashStringHelper>
  if(bleCount <= slaveCountExpected){
   b416c:	6823      	ldr	r3, [r4, #0]
   b416e:	2b02      	cmp	r3, #2
   b4170:	f300 808a 	bgt.w	b4288 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>
    int input;

    for(int i = 0; i < len - 1; i++){
   b4174:	2700      	movs	r7, #0
   b4176:	3e01      	subs	r6, #1
   b4178:	42be      	cmp	r6, r7
   b417a:	d90a      	bls.n	b4192 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3a>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b417c:	f818 1007 	ldrb.w	r1, [r8, r7]
   b4180:	4668      	mov	r0, sp
   b4182:	f004 f84c 	bl	b821e <_ZN6String6concatEc>
      inputBuffer += (char)data[i];
      input = atoi(inputBuffer);
   b4186:	9800      	ldr	r0, [sp, #0]
   b4188:	f005 fe65 	bl	b9e56 <atoi>
    for(int i = 0; i < len - 1; i++){
   b418c:	3701      	adds	r7, #1
      input = atoi(inputBuffer);
   b418e:	4605      	mov	r5, r0
    for(int i = 0; i < len - 1; i++){
   b4190:	e7f2      	b.n	b4178 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x20>
    }

    if(bleCount < slaveCountExpected){
   b4192:	6823      	ldr	r3, [r4, #0]
   b4194:	2b01      	cmp	r3, #1
   b4196:	dc04      	bgt.n	b41a2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4a>
      txCharacteristic.setValue("\nEnter the position of the device with the blue LED as an integer (first device is at 1, second is at 2, etc): ");
   b4198:	4944      	ldr	r1, [pc, #272]	; (b42ac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x154>)
   b419a:	4845      	ldr	r0, [pc, #276]	; (b42b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x158>)
   b419c:	2200      	movs	r2, #0
   b419e:	f002 fe11 	bl	b6dc4 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    }

    Wire.beginTransmission(addressArr[bleCount]);
   b41a2:	f004 fdd7 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b41a6:	4e43      	ldr	r6, [pc, #268]	; (b42b4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x15c>)
   b41a8:	6823      	ldr	r3, [r4, #0]
   b41aa:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   b41ae:	f003 fdc1 	bl	b7d34 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('3');
   b41b2:	f004 fdcf 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b41b6:	2133      	movs	r1, #51	; 0x33
   b41b8:	f7ff ffb8 	bl	b412c <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b41bc:	f004 fdca 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b41c0:	f003 fdbf 	bl	b7d42 <_ZN7TwoWire15endTransmissionEv>

    if(bleCount > 0){
   b41c4:	6823      	ldr	r3, [r4, #0]
   b41c6:	2b00      	cmp	r3, #0
   b41c8:	dd17      	ble.n	b41fa <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa2>
      sequenceArr[input - 1] = addressArr[bleCount - 1];
   b41ca:	3b01      	subs	r3, #1
   b41cc:	3d01      	subs	r5, #1
   b41ce:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   b41d2:	4b39      	ldr	r3, [pc, #228]	; (b42b8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x160>)
   b41d4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
      
      Wire.beginTransmission(addressArr[bleCount - 1]);
   b41d8:	f004 fdbc 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b41dc:	6823      	ldr	r3, [r4, #0]
   b41de:	3b01      	subs	r3, #1
   b41e0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   b41e4:	f003 fda6 	bl	b7d34 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('4');
   b41e8:	f004 fdb4 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b41ec:	2134      	movs	r1, #52	; 0x34
   b41ee:	f7ff ff9d 	bl	b412c <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b41f2:	f004 fdaf 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b41f6:	f003 fda4 	bl	b7d42 <_ZN7TwoWire15endTransmissionEv>
    }
  }

  if(bleCount == slaveCountExpected){
   b41fa:	6826      	ldr	r6, [r4, #0]
   b41fc:	2e02      	cmp	r6, #2
   b41fe:	d143      	bne.n	b4288 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>
    delay(1000);
   b4200:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4204:	f002 fb34 	bl	b6870 <delay>
    Serial.println("\nSequence: ");
   b4208:	f004 fc56 	bl	b8ab8 <_Z16_fetch_usbserialv>
   b420c:	492b      	ldr	r1, [pc, #172]	; (b42bc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x164>)
   b420e:	4f2a      	ldr	r7, [pc, #168]	; (b42b8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x160>)
    for(int i = 0; i < slaveCountExpected; i++){
      Serial.print(sequenceArr[i]);
      Serial.print(", ");
   b4210:	f8df 90ac 	ldr.w	r9, [pc, #172]	; b42c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x168>
    Serial.println("\nSequence: ");
   b4214:	f003 ff1b 	bl	b804e <_ZN5Print7printlnEPKc>
      Serial.print(sequenceArr[i]);
   b4218:	f004 fc4e 	bl	b8ab8 <_Z16_fetch_usbserialv>
   b421c:	f857 5b04 	ldr.w	r5, [r7], #4
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b4220:	2d00      	cmp	r5, #0
   b4222:	4680      	mov	r8, r0
   b4224:	da3b      	bge.n	b429e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x146>
            t = print('-');
   b4226:	212d      	movs	r1, #45	; 0x2d
   b4228:	f003 ff02 	bl	b8030 <_ZN5Print5printEc>
            val = -n;
   b422c:	4269      	negs	r1, r5
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b422e:	220a      	movs	r2, #10
   b4230:	4640      	mov	r0, r8
   b4232:	f003 ff16 	bl	b8062 <_ZN5Print11printNumberEmh>
      Serial.print(", ");
   b4236:	f004 fc3f 	bl	b8ab8 <_Z16_fetch_usbserialv>
   b423a:	4649      	mov	r1, r9
   b423c:	f003 fef4 	bl	b8028 <_ZN5Print5printEPKc>

      Wire.beginTransmission(sequenceArr[i]);
   b4240:	f004 fd88 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b4244:	f857 1c04 	ldr.w	r1, [r7, #-4]
   b4248:	f003 fd74 	bl	b7d34 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('3');
   b424c:	f004 fd82 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b4250:	2133      	movs	r1, #51	; 0x33
   b4252:	f7ff ff6b 	bl	b412c <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4256:	f004 fd7d 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b425a:	f003 fd72 	bl	b7d42 <_ZN7TwoWire15endTransmissionEv>
      delay(2000);
   b425e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4262:	f002 fb05 	bl	b6870 <delay>
      Wire.beginTransmission(sequenceArr[i]);
   b4266:	f004 fd75 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b426a:	f857 1c04 	ldr.w	r1, [r7, #-4]
   b426e:	f003 fd61 	bl	b7d34 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('4');
   b4272:	f004 fd6f 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b4276:	2134      	movs	r1, #52	; 0x34
   b4278:	f7ff ff58 	bl	b412c <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b427c:	f004 fd6a 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b4280:	f003 fd5f 	bl	b7d42 <_ZN7TwoWire15endTransmissionEv>
    for(int i = 0; i < slaveCountExpected; i++){
   b4284:	2e01      	cmp	r6, #1
   b4286:	d108      	bne.n	b429a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x142>
    }
    //BLE.disconnect();
    //BLE.off();
  }

  bleCount++;
   b4288:	6823      	ldr	r3, [r4, #0]
  String inputBuffer = "";
   b428a:	4668      	mov	r0, sp
  bleCount++;
   b428c:	3301      	adds	r3, #1
   b428e:	6023      	str	r3, [r4, #0]
  String inputBuffer = "";
   b4290:	f003 ff0c 	bl	b80ac <_ZN6StringD1Ev>
}
   b4294:	b005      	add	sp, #20
   b4296:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b429a:	2601      	movs	r6, #1
   b429c:	e7bc      	b.n	b4218 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xc0>
            val = n;
   b429e:	4629      	mov	r1, r5
   b42a0:	e7c5      	b.n	b422e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xd6>
   b42a2:	bf00      	nop
   b42a4:	200357b8 	.word	0x200357b8
   b42a8:	000bc292 	.word	0x000bc292
   b42ac:	000bbf40 	.word	0x000bbf40
   b42b0:	2003e6ac 	.word	0x2003e6ac
   b42b4:	200357b0 	.word	0x200357b0
   b42b8:	2003e6a0 	.word	0x2003e6a0
   b42bc:	000bbfb0 	.word	0x000bbfb0
   b42c0:	000bbfbc 	.word	0x000bbfbc

000b42c4 <_Z17acquireWireBufferv>:

hal_i2c_config_t acquireWireBuffer() {
   b42c4:	b538      	push	{r3, r4, r5, lr}
    hal_i2c_config_t config = {
   b42c6:	f44f 7500 	mov.w	r5, #512	; 0x200
   b42ca:	2314      	movs	r3, #20
hal_i2c_config_t acquireWireBuffer() {
   b42cc:	4604      	mov	r4, r0
    hal_i2c_config_t config = {
   b42ce:	6003      	str	r3, [r0, #0]
   b42d0:	6085      	str	r5, [r0, #8]
   b42d2:	6105      	str	r5, [r0, #16]
        .size = sizeof(hal_i2c_config_t),
        .version = HAL_I2C_CONFIG_VERSION_1,
        .rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b42d4:	4905      	ldr	r1, [pc, #20]	; (b42ec <_Z17acquireWireBufferv+0x28>)
   b42d6:	4628      	mov	r0, r5
   b42d8:	f004 fda0 	bl	b8e1c <_ZnajRKSt9nothrow_t>
        .rx_buffer_size = I2C_BUFFER_SIZE,
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b42dc:	4903      	ldr	r1, [pc, #12]	; (b42ec <_Z17acquireWireBufferv+0x28>)
        .tx_buffer_size = I2C_BUFFER_SIZE
    };
   b42de:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b42e0:	4628      	mov	r0, r5
   b42e2:	f004 fd9b 	bl	b8e1c <_ZnajRKSt9nothrow_t>
    };
   b42e6:	60e0      	str	r0, [r4, #12]
    return config;
   b42e8:	4620      	mov	r0, r4
   b42ea:	bd38      	pop	{r3, r4, r5, pc}
   b42ec:	000bc698 	.word	0x000bc698

000b42f0 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b42f0:	b510      	push	{r4, lr}
   b42f2:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b42f4:	6800      	ldr	r0, [r0, #0]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   b42f6:	b118      	cbz	r0, b4300 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b42f8:	68a1      	ldr	r1, [r4, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b42fa:	1a09      	subs	r1, r1, r0
   b42fc:	f7ff fecf 	bl	b409e <_ZdlPvj>
      }
   b4300:	4620      	mov	r0, r4
   b4302:	bd10      	pop	{r4, pc}

000b4304 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4304:	b510      	push	{r4, lr}
   b4306:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4308:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b430a:	b118      	cbz	r0, b4314 <_ZNSt12_Vector_baseIfSaIfEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b430c:	68a1      	ldr	r1, [r4, #8]
   b430e:	1a09      	subs	r1, r1, r0
   b4310:	f7ff fec5 	bl	b409e <_ZdlPvj>
      }
   b4314:	4620      	mov	r0, r4
   b4316:	bd10      	pop	{r4, pc}

000b4318 <_ZNSt12_Vector_baseIiSaIiEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4318:	b510      	push	{r4, lr}
   b431a:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b431c:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b431e:	b118      	cbz	r0, b4328 <_ZNSt12_Vector_baseIiSaIiEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4320:	68a1      	ldr	r1, [r4, #8]
   b4322:	1a09      	subs	r1, r1, r0
   b4324:	f7ff febb 	bl	b409e <_ZdlPvj>
      }
   b4328:	4620      	mov	r0, r4
   b432a:	bd10      	pop	{r4, pc}

000b432c <_ZNSt6vectorI6StringSaIS0_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
   b432c:	b570      	push	{r4, r5, r6, lr}
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b432e:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   b4332:	4604      	mov	r4, r0
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   b4334:	42ae      	cmp	r6, r5
   b4336:	d004      	beq.n	b4342 <_ZNSt6vectorI6StringSaIS0_EED1Ev+0x16>
      __pointer->~_Tp();
   b4338:	4628      	mov	r0, r5
   b433a:	f003 feb7 	bl	b80ac <_ZN6StringD1Ev>
	  for (; __first != __last; ++__first)
   b433e:	3510      	adds	r5, #16
   b4340:	e7f8      	b.n	b4334 <_ZNSt6vectorI6StringSaIS0_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   b4342:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4344:	b118      	cbz	r0, b434e <_ZNSt6vectorI6StringSaIS0_EED1Ev+0x22>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4346:	68a1      	ldr	r1, [r4, #8]
   b4348:	1a09      	subs	r1, r1, r0
   b434a:	f7ff fea8 	bl	b409e <_ZdlPvj>
		      _M_get_Tp_allocator());
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
   b434e:	4620      	mov	r0, r4
   b4350:	bd70      	pop	{r4, r5, r6, pc}

000b4352 <_ZN7RailwayD1Ev>:
class Railway{
   b4352:	b510      	push	{r4, lr}
   b4354:	4604      	mov	r4, r0
   b4356:	3040      	adds	r0, #64	; 0x40
   b4358:	f7ff ffe8 	bl	b432c <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   b435c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b4360:	f003 fea4 	bl	b80ac <_ZN6StringD1Ev>
   b4364:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b4368:	f7ff ffd6 	bl	b4318 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b436c:	f104 0018 	add.w	r0, r4, #24
   b4370:	f7ff ffd2 	bl	b4318 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4374:	f104 000c 	add.w	r0, r4, #12
   b4378:	f7ff ffc4 	bl	b4304 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b437c:	4620      	mov	r0, r4
   b437e:	f7ff ffb7 	bl	b42f0 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
   b4382:	4620      	mov	r0, r4
   b4384:	bd10      	pop	{r4, pc}
	...

000b4388 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
   b4388:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b438c:	2400      	movs	r4, #0
      vector(initializer_list<value_type> __l,
   b438e:	ab02      	add	r3, sp, #8
   b4390:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4394:	e9c0 4400 	strd	r4, r4, [r0]
      constexpr const_iterator
      begin() const noexcept { return _M_array; }

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
   b4398:	4613      	mov	r3, r2
      vector(initializer_list<value_type> __l,
   b439a:	4605      	mov	r5, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b439c:	6084      	str	r4, [r0, #8]
   b439e:	00d7      	lsls	r7, r2, #3
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b43a0:	f342 001c 	sbfx	r0, r2, #0, #29

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b43a4:	4a10      	ldr	r2, [pc, #64]	; (b43e8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x60>)
   b43a6:	ebb2 0fc3 	cmp.w	r2, r3, lsl #3
   b43aa:	4688      	mov	r8, r1
   b43ac:	d202      	bcs.n	b43b4 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x2c>
	  __throw_length_error(
   b43ae:	480f      	ldr	r0, [pc, #60]	; (b43ec <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x64>)
   b43b0:	f004 fd3c 	bl	b8e2c <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b43b4:	f7ff fead 	bl	b4112 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b43b8:	19c6      	adds	r6, r0, r7
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b43ba:	4602      	mov	r2, r0
   b43bc:	6028      	str	r0, [r5, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b43be:	60ae      	str	r6, [r5, #8]
   b43c0:	4623      	mov	r3, r4
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
   b43c2:	429f      	cmp	r7, r3
   b43c4:	d00b      	beq.n	b43de <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x56>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b43c6:	18d4      	adds	r4, r2, r3
   b43c8:	bf1c      	itt	ne
   b43ca:	eb08 0103 	addne.w	r1, r8, r3
   b43ce:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b43d2:	f103 0308 	add.w	r3, r3, #8
   b43d6:	bf18      	it	ne
   b43d8:	e9c4 0100 	strdne	r0, r1, [r4]
   b43dc:	e7f1      	b.n	b43c2 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x3a>
      }
   b43de:	4628      	mov	r0, r5
	  this->_M_impl._M_finish =
   b43e0:	606e      	str	r6, [r5, #4]
      }
   b43e2:	b002      	add	sp, #8
   b43e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b43e8:	7ffffff8 	.word	0x7ffffff8
   b43ec:	000bbfbf 	.word	0x000bbfbf

000b43f0 <_ZNSt6vectorI6StringSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
   b43f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b43f4:	ab02      	add	r3, sp, #8
   b43f6:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b43fa:	2300      	movs	r3, #0
   b43fc:	e9c0 3300 	strd	r3, r3, [r0]
   b4400:	6083      	str	r3, [r0, #8]
      vector(initializer_list<value_type> __l,
   b4402:	4604      	mov	r4, r0
   b4404:	4613      	mov	r3, r2
   b4406:	0117      	lsls	r7, r2, #4
   b4408:	eb01 1802 	add.w	r8, r1, r2, lsl #4
   b440c:	f342 001b 	sbfx	r0, r2, #0, #28
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4410:	4a0e      	ldr	r2, [pc, #56]	; (b444c <_ZNSt6vectorI6StringSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x5c>)
   b4412:	ebb2 1f03 	cmp.w	r2, r3, lsl #4
   b4416:	460e      	mov	r6, r1
   b4418:	d202      	bcs.n	b4420 <_ZNSt6vectorI6StringSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x30>
	  __throw_length_error(
   b441a:	480d      	ldr	r0, [pc, #52]	; (b4450 <_ZNSt6vectorI6StringSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x60>)
   b441c:	f004 fd06 	bl	b8e2c <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4420:	f7ff fe5d 	bl	b40de <_ZNSt12_Vector_baseI6StringSaIS0_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4424:	4407      	add	r7, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4426:	4605      	mov	r5, r0
   b4428:	6020      	str	r0, [r4, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b442a:	60a7      	str	r7, [r4, #8]
   b442c:	45b0      	cmp	r8, r6
   b442e:	d007      	beq.n	b4440 <_ZNSt6vectorI6StringSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x50>
   b4430:	b11d      	cbz	r5, b443a <_ZNSt6vectorI6StringSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x4a>
   b4432:	4631      	mov	r1, r6
   b4434:	4628      	mov	r0, r5
   b4436:	f003 fea7 	bl	b8188 <_ZN6StringC1ERKS_>
   b443a:	3610      	adds	r6, #16
   b443c:	3510      	adds	r5, #16
   b443e:	e7f5      	b.n	b442c <_ZNSt6vectorI6StringSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x3c>
      }
   b4440:	4620      	mov	r0, r4
	  this->_M_impl._M_finish =
   b4442:	6065      	str	r5, [r4, #4]
      }
   b4444:	b002      	add	sp, #8
   b4446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b444a:	bf00      	nop
   b444c:	7ffffff0 	.word	0x7ffffff0
   b4450:	000bbfbf 	.word	0x000bbfbf

000b4454 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   b4454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4456:	e9d1 3700 	ldrd	r3, r7, [r1]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b445a:	2500      	movs	r5, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b445c:	1aff      	subs	r7, r7, r3
      vector(const vector& __x)
   b445e:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4460:	e9c0 5500 	strd	r5, r5, [r0]
   b4464:	6085      	str	r5, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4466:	10f8      	asrs	r0, r7, #3
      vector(const vector& __x)
   b4468:	460e      	mov	r6, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b446a:	f7ff fe52 	bl	b4112 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b446e:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4472:	4407      	add	r7, r0
   b4474:	60a7      	str	r7, [r4, #8]

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b4476:	e9d6 7600 	ldrd	r7, r6, [r6]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b447a:	4602      	mov	r2, r0
   b447c:	1bf6      	subs	r6, r6, r7
      : _M_current(__i) { }
   b447e:	462b      	mov	r3, r5
   b4480:	42b3      	cmp	r3, r6
   b4482:	eb02 0503 	add.w	r5, r2, r3
   b4486:	d006      	beq.n	b4496 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x42>
   b4488:	b11d      	cbz	r5, b4492 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x3e>
   b448a:	18f9      	adds	r1, r7, r3
   b448c:	c903      	ldmia	r1, {r0, r1}
   b448e:	e885 0003 	stmia.w	r5, {r0, r1}
   b4492:	3308      	adds	r3, #8
   b4494:	e7f4      	b.n	b4480 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x2c>
	this->_M_impl._M_finish =
   b4496:	6065      	str	r5, [r4, #4]
      }
   b4498:	4620      	mov	r0, r4
   b449a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b449c <_ZNSt6vectorI7RailwaySaIS0_EE2atEj>:
      at(size_type __n)
   b449c:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b449e:	e9d0 4200 	ldrd	r4, r2, [r0]
   b44a2:	4806      	ldr	r0, [pc, #24]	; (b44bc <_ZNSt6vectorI7RailwaySaIS0_EE2atEj+0x20>)
   b44a4:	1b12      	subs	r2, r2, r4
   b44a6:	1092      	asrs	r2, r2, #2
   b44a8:	4342      	muls	r2, r0
	if (__n >= this->size())
   b44aa:	4291      	cmp	r1, r2
   b44ac:	d302      	bcc.n	b44b4 <_ZNSt6vectorI7RailwaySaIS0_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b44ae:	4804      	ldr	r0, [pc, #16]	; (b44c0 <_ZNSt6vectorI7RailwaySaIS0_EE2atEj+0x24>)
   b44b0:	f004 fcbf 	bl	b8e32 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b44b4:	204c      	movs	r0, #76	; 0x4c
   b44b6:	fb00 4001 	mla	r0, r0, r1, r4
   b44ba:	bd10      	pop	{r4, pc}
   b44bc:	286bca1b 	.word	0x286bca1b
   b44c0:	000bbff0 	.word	0x000bbff0

000b44c4 <_ZNSt6vectorIfSaIfEE2atEj>:
      at(size_type __n)
   b44c4:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b44c6:	e9d0 5400 	ldrd	r5, r4, [r0]
   b44ca:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
   b44cc:	ebb1 0fa4 	cmp.w	r1, r4, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b44d0:	ea4f 02a4 	mov.w	r2, r4, asr #2
	if (__n >= this->size())
   b44d4:	d302      	bcc.n	b44dc <_ZNSt6vectorIfSaIfEE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b44d6:	4803      	ldr	r0, [pc, #12]	; (b44e4 <_ZNSt6vectorIfSaIfEE2atEj+0x20>)
   b44d8:	f004 fcab 	bl	b8e32 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b44dc:	eb05 0081 	add.w	r0, r5, r1, lsl #2
   b44e0:	bd38      	pop	{r3, r4, r5, pc}
   b44e2:	bf00      	nop
   b44e4:	000bbff0 	.word	0x000bbff0

000b44e8 <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj>:
      at(size_type __n)
   b44e8:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b44ea:	e9d0 5400 	ldrd	r5, r4, [r0]
   b44ee:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
   b44f0:	ebb1 0fe4 	cmp.w	r1, r4, asr #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b44f4:	ea4f 02e4 	mov.w	r2, r4, asr #3
	if (__n >= this->size())
   b44f8:	d302      	bcc.n	b4500 <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b44fa:	4803      	ldr	r0, [pc, #12]	; (b4508 <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj+0x20>)
   b44fc:	f004 fc99 	bl	b8e32 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b4500:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
   b4504:	bd38      	pop	{r3, r4, r5, pc}
   b4506:	bf00      	nop
   b4508:	000bbff0 	.word	0x000bbff0

000b450c <_ZNSt6vectorIiSaIiEE2atEj>:
      at(size_type __n)
   b450c:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b450e:	e9d0 5400 	ldrd	r5, r4, [r0]
   b4512:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
   b4514:	ebb1 0fa4 	cmp.w	r1, r4, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4518:	ea4f 02a4 	mov.w	r2, r4, asr #2
	if (__n >= this->size())
   b451c:	d302      	bcc.n	b4524 <_ZNSt6vectorIiSaIiEE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b451e:	4803      	ldr	r0, [pc, #12]	; (b452c <_ZNSt6vectorIiSaIiEE2atEj+0x20>)
   b4520:	f004 fc87 	bl	b8e32 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b4524:	eb05 0081 	add.w	r0, r5, r1, lsl #2
   b4528:	bd38      	pop	{r3, r4, r5, pc}
   b452a:	bf00      	nop
   b452c:	000bbff0 	.word	0x000bbff0

000b4530 <_ZNKSt6vectorI6StringSaIS0_EE14_M_range_checkEj>:
      _M_range_check(size_type __n) const
   b4530:	b508      	push	{r3, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4532:	e9d0 2300 	ldrd	r2, r3, [r0]
   b4536:	1a9b      	subs	r3, r3, r2
	if (__n >= this->size())
   b4538:	ebb1 1f23 	cmp.w	r1, r3, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b453c:	ea4f 1223 	mov.w	r2, r3, asr #4
	if (__n >= this->size())
   b4540:	d302      	bcc.n	b4548 <_ZNKSt6vectorI6StringSaIS0_EE14_M_range_checkEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b4542:	4802      	ldr	r0, [pc, #8]	; (b454c <_ZNKSt6vectorI6StringSaIS0_EE14_M_range_checkEj+0x1c>)
   b4544:	f004 fc75 	bl	b8e32 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b4548:	bd08      	pop	{r3, pc}
   b454a:	bf00      	nop
   b454c:	000bbff0 	.word	0x000bbff0

000b4550 <_Z16randomizeAddressv>:
void randomizeAddress(){
   b4550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while(slaveCount != slaveCountExpected){
   b4554:	4db5      	ldr	r5, [pc, #724]	; (b482c <_Z16randomizeAddressv+0x2dc>)

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b4556:	f8df 82f4 	ldr.w	r8, [pc, #756]	; b484c <_Z16randomizeAddressv+0x2fc>
void randomizeAddress(){
   b455a:	b08c      	sub	sp, #48	; 0x30
  while(slaveCount != slaveCountExpected){
   b455c:	682b      	ldr	r3, [r5, #0]
   b455e:	2b02      	cmp	r3, #2
   b4560:	f000 80fd 	beq.w	b475e <_Z16randomizeAddressv+0x20e>
    slaveCount = 0;
   b4564:	2300      	movs	r3, #0
   b4566:	f8df 92e8 	ldr.w	r9, [pc, #744]	; b4850 <_Z16randomizeAddressv+0x300>
        String inputBuffer = "";
   b456a:	4fb1      	ldr	r7, [pc, #708]	; (b4830 <_Z16randomizeAddressv+0x2e0>)
    slaveCount = 0;
   b456c:	602b      	str	r3, [r5, #0]
    for(int i = 8; i <= 119; i++){
   b456e:	2408      	movs	r4, #8
      Serial.println("\nrequest code 1, address: " + String(i));
   b4570:	f004 faa2 	bl	b8ab8 <_Z16_fetch_usbserialv>
   b4574:	4641      	mov	r1, r8
   b4576:	4606      	mov	r6, r0
   b4578:	a808      	add	r0, sp, #32
   b457a:	f003 fde2 	bl	b8142 <_ZN6StringC1EPK19__FlashStringHelper>
   b457e:	220a      	movs	r2, #10
   b4580:	4621      	mov	r1, r4
   b4582:	a804      	add	r0, sp, #16
   b4584:	f003 fe1d 	bl	b81c2 <_ZN6StringC1Eih>
   b4588:	a904      	add	r1, sp, #16
   b458a:	a808      	add	r0, sp, #32
   b458c:	f003 fe54 	bl	b8238 <_ZplRK15StringSumHelperRK6String>
   b4590:	6801      	ldr	r1, [r0, #0]
   b4592:	4630      	mov	r0, r6
   b4594:	f003 fd5b 	bl	b804e <_ZN5Print7printlnEPKc>
   b4598:	a804      	add	r0, sp, #16
   b459a:	f003 fd87 	bl	b80ac <_ZN6StringD1Ev>
class StringSumHelper : public String
   b459e:	a808      	add	r0, sp, #32
   b45a0:	f003 fd84 	bl	b80ac <_ZN6StringD1Ev>
      Wire.beginTransmission(i);
   b45a4:	f004 fbd6 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b45a8:	4621      	mov	r1, r4
   b45aa:	f003 fbc3 	bl	b7d34 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('1');
   b45ae:	f004 fbd1 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b45b2:	2131      	movs	r1, #49	; 0x31
   b45b4:	f7ff fdba 	bl	b412c <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b45b8:	fa5f fa84 	uxtb.w	sl, r4
   b45bc:	f004 fbca 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b45c0:	f003 fbbf 	bl	b7d42 <_ZN7TwoWire15endTransmissionEv>
      Wire.requestFrom(i, 24);
   b45c4:	f004 fbc6 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b45c8:	2218      	movs	r2, #24
   b45ca:	4651      	mov	r1, sl
   b45cc:	f003 fbab 	bl	b7d26 <_ZN7TwoWire11requestFromEhj>
      if(Wire.available() > 0){
   b45d0:	f004 fbc0 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b45d4:	6803      	ldr	r3, [r0, #0]
   b45d6:	691b      	ldr	r3, [r3, #16]
   b45d8:	4798      	blx	r3
   b45da:	2800      	cmp	r0, #0
   b45dc:	f340 80ba 	ble.w	b4754 <_Z16randomizeAddressv+0x204>
        Serial.println("transmission recieved from: " + String(i));
   b45e0:	f004 fa6a 	bl	b8ab8 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b45e4:	4649      	mov	r1, r9
   b45e6:	4606      	mov	r6, r0
   b45e8:	a808      	add	r0, sp, #32
   b45ea:	f003 fdaa 	bl	b8142 <_ZN6StringC1EPK19__FlashStringHelper>
   b45ee:	220a      	movs	r2, #10
   b45f0:	4621      	mov	r1, r4
   b45f2:	a804      	add	r0, sp, #16
   b45f4:	f003 fde5 	bl	b81c2 <_ZN6StringC1Eih>
   b45f8:	a904      	add	r1, sp, #16
   b45fa:	a808      	add	r0, sp, #32
   b45fc:	f003 fe1c 	bl	b8238 <_ZplRK15StringSumHelperRK6String>
   b4600:	6801      	ldr	r1, [r0, #0]
   b4602:	4630      	mov	r0, r6
   b4604:	f003 fd23 	bl	b804e <_ZN5Print7printlnEPKc>
   b4608:	a804      	add	r0, sp, #16
   b460a:	f003 fd4f 	bl	b80ac <_ZN6StringD1Ev>
class StringSumHelper : public String
   b460e:	a808      	add	r0, sp, #32
   b4610:	f003 fd4c 	bl	b80ac <_ZN6StringD1Ev>
        slaveCount++;
   b4614:	682b      	ldr	r3, [r5, #0]
        String inputBuffer = "";
   b4616:	4639      	mov	r1, r7
        slaveCount++;
   b4618:	3301      	adds	r3, #1
        String inputBuffer = "";
   b461a:	4668      	mov	r0, sp
        slaveCount++;
   b461c:	602b      	str	r3, [r5, #0]
        String inputBuffer = "";
   b461e:	f003 fd90 	bl	b8142 <_ZN6StringC1EPK19__FlashStringHelper>
   b4622:	2618      	movs	r6, #24
          c = Wire.read();
   b4624:	f004 fb96 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b4628:	6803      	ldr	r3, [r0, #0]
   b462a:	695b      	ldr	r3, [r3, #20]
   b462c:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b462e:	b2c1      	uxtb	r1, r0
   b4630:	4668      	mov	r0, sp
   b4632:	f003 fdf4 	bl	b821e <_ZN6String6concatEc>
        for(int j = 0; j < 24; j++){
   b4636:	3e01      	subs	r6, #1
   b4638:	d1f4      	bne.n	b4624 <_Z16randomizeAddressv+0xd4>
        Wire.beginTransmission(i);
   b463a:	f004 fb8b 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b463e:	4621      	mov	r1, r4
   b4640:	f003 fb78 	bl	b7d34 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(inputBuffer);
   b4644:	f004 fb86 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b4648:	9900      	ldr	r1, [sp, #0]
   b464a:	f7ff fd73 	bl	b4134 <_ZN5Print5writeEPKc.isra.0>
        Serial.println("device id: " + inputBuffer);
   b464e:	f004 fa33 	bl	b8ab8 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4652:	4978      	ldr	r1, [pc, #480]	; (b4834 <_Z16randomizeAddressv+0x2e4>)
   b4654:	4606      	mov	r6, r0
   b4656:	a808      	add	r0, sp, #32
   b4658:	f003 fd73 	bl	b8142 <_ZN6StringC1EPK19__FlashStringHelper>
   b465c:	4669      	mov	r1, sp
   b465e:	a808      	add	r0, sp, #32
   b4660:	f003 fdea 	bl	b8238 <_ZplRK15StringSumHelperRK6String>
   b4664:	6801      	ldr	r1, [r0, #0]
   b4666:	4630      	mov	r0, r6
   b4668:	f003 fcf1 	bl	b804e <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b466c:	a808      	add	r0, sp, #32
   b466e:	f003 fd1d 	bl	b80ac <_ZN6StringD1Ev>
        Wire.endTransmission();
   b4672:	f004 fb6f 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b4676:	f003 fb64 	bl	b7d42 <_ZN7TwoWire15endTransmissionEv>
        Serial.println("transmission sent to: " + String(i));
   b467a:	f004 fa1d 	bl	b8ab8 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b467e:	496e      	ldr	r1, [pc, #440]	; (b4838 <_Z16randomizeAddressv+0x2e8>)
   b4680:	4606      	mov	r6, r0
   b4682:	a808      	add	r0, sp, #32
   b4684:	f003 fd5d 	bl	b8142 <_ZN6StringC1EPK19__FlashStringHelper>
   b4688:	220a      	movs	r2, #10
   b468a:	4621      	mov	r1, r4
   b468c:	a804      	add	r0, sp, #16
   b468e:	f003 fd98 	bl	b81c2 <_ZN6StringC1Eih>
   b4692:	a904      	add	r1, sp, #16
   b4694:	a808      	add	r0, sp, #32
   b4696:	f003 fdcf 	bl	b8238 <_ZplRK15StringSumHelperRK6String>
   b469a:	6801      	ldr	r1, [r0, #0]
   b469c:	4630      	mov	r0, r6
   b469e:	f003 fcd6 	bl	b804e <_ZN5Print7printlnEPKc>
   b46a2:	a804      	add	r0, sp, #16
   b46a4:	f003 fd02 	bl	b80ac <_ZN6StringD1Ev>
class StringSumHelper : public String
   b46a8:	a808      	add	r0, sp, #32
   b46aa:	f003 fcff 	bl	b80ac <_ZN6StringD1Ev>
        Wire.beginTransmission(i);
   b46ae:	f004 fb51 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b46b2:	4621      	mov	r1, r4
   b46b4:	f003 fb3e 	bl	b7d34 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('2');
   b46b8:	f004 fb4c 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b46bc:	2132      	movs	r1, #50	; 0x32
   b46be:	f7ff fd35 	bl	b412c <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b46c2:	f004 fb47 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b46c6:	f003 fb3c 	bl	b7d42 <_ZN7TwoWire15endTransmissionEv>
        Serial.println("request code 2, address: " + String(i));
   b46ca:	f004 f9f5 	bl	b8ab8 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b46ce:	495b      	ldr	r1, [pc, #364]	; (b483c <_Z16randomizeAddressv+0x2ec>)
   b46d0:	4606      	mov	r6, r0
   b46d2:	a808      	add	r0, sp, #32
   b46d4:	f003 fd35 	bl	b8142 <_ZN6StringC1EPK19__FlashStringHelper>
   b46d8:	220a      	movs	r2, #10
   b46da:	4621      	mov	r1, r4
   b46dc:	a804      	add	r0, sp, #16
   b46de:	f003 fd70 	bl	b81c2 <_ZN6StringC1Eih>
   b46e2:	a904      	add	r1, sp, #16
   b46e4:	a808      	add	r0, sp, #32
   b46e6:	f003 fda7 	bl	b8238 <_ZplRK15StringSumHelperRK6String>
   b46ea:	6801      	ldr	r1, [r0, #0]
   b46ec:	4630      	mov	r0, r6
   b46ee:	f003 fcae 	bl	b804e <_ZN5Print7printlnEPKc>
   b46f2:	a804      	add	r0, sp, #16
   b46f4:	f003 fcda 	bl	b80ac <_ZN6StringD1Ev>
class StringSumHelper : public String
   b46f8:	a808      	add	r0, sp, #32
   b46fa:	f003 fcd7 	bl	b80ac <_ZN6StringD1Ev>
        Wire.requestFrom(i, 4);
   b46fe:	f004 fb29 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b4702:	2204      	movs	r2, #4
   b4704:	4651      	mov	r1, sl
   b4706:	f003 fb0e 	bl	b7d26 <_ZN7TwoWire11requestFromEhj>
        inputBuffer = "";
   b470a:	4639      	mov	r1, r7
   b470c:	4668      	mov	r0, sp
   b470e:	f003 fd46 	bl	b819e <_ZN6StringaSEPKc>
   b4712:	2604      	movs	r6, #4
          inputBuffer += (char)Wire.read();
   b4714:	f004 fb1e 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b4718:	6803      	ldr	r3, [r0, #0]
   b471a:	695b      	ldr	r3, [r3, #20]
   b471c:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b471e:	b2c1      	uxtb	r1, r0
   b4720:	4668      	mov	r0, sp
   b4722:	f003 fd7c 	bl	b821e <_ZN6String6concatEc>
        for(int j = 0; j < 4; j++){
   b4726:	3e01      	subs	r6, #1
   b4728:	d1f4      	bne.n	b4714 <_Z16randomizeAddressv+0x1c4>
        Serial.println("conflict verification: " + inputBuffer);
   b472a:	f004 f9c5 	bl	b8ab8 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b472e:	4944      	ldr	r1, [pc, #272]	; (b4840 <_Z16randomizeAddressv+0x2f0>)
   b4730:	4606      	mov	r6, r0
   b4732:	a808      	add	r0, sp, #32
   b4734:	f003 fd05 	bl	b8142 <_ZN6StringC1EPK19__FlashStringHelper>
   b4738:	4669      	mov	r1, sp
   b473a:	a808      	add	r0, sp, #32
   b473c:	f003 fd7c 	bl	b8238 <_ZplRK15StringSumHelperRK6String>
   b4740:	6801      	ldr	r1, [r0, #0]
   b4742:	4630      	mov	r0, r6
   b4744:	f003 fc83 	bl	b804e <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4748:	a808      	add	r0, sp, #32
   b474a:	f003 fcaf 	bl	b80ac <_ZN6StringD1Ev>
        String inputBuffer = "";
   b474e:	4668      	mov	r0, sp
   b4750:	f003 fcac 	bl	b80ac <_ZN6StringD1Ev>
    for(int i = 8; i <= 119; i++){
   b4754:	3401      	adds	r4, #1
   b4756:	2c78      	cmp	r4, #120	; 0x78
   b4758:	f47f af0a 	bne.w	b4570 <_Z16randomizeAddressv+0x20>
   b475c:	e6fe      	b.n	b455c <_Z16randomizeAddressv+0xc>
  Serial.println("\nConnected to: ");
   b475e:	f004 f9ab 	bl	b8ab8 <_Z16_fetch_usbserialv>
   b4762:	4938      	ldr	r1, [pc, #224]	; (b4844 <_Z16randomizeAddressv+0x2f4>)
      Serial.print(", ");
   b4764:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b4854 <_Z16randomizeAddressv+0x304>
      addressArr[count] = i;
   b4768:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b4858 <_Z16randomizeAddressv+0x308>
      Wire.write(railways.at(count).colors.at(0));
   b476c:	4f36      	ldr	r7, [pc, #216]	; (b4848 <_Z16randomizeAddressv+0x2f8>)
  Serial.println("\nConnected to: ");
   b476e:	f003 fc6e 	bl	b804e <_ZN5Print7printlnEPKc>
  for(int i = 8; i<= 119; i++){
   b4772:	2408      	movs	r4, #8
  int count = 0;
   b4774:	2500      	movs	r5, #0
    Wire.beginTransmission(i);
   b4776:	f004 faed 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b477a:	4621      	mov	r1, r4
   b477c:	f003 fada 	bl	b7d34 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('1');
   b4780:	f004 fae8 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b4784:	2131      	movs	r1, #49	; 0x31
   b4786:	f7ff fcd1 	bl	b412c <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b478a:	f004 fae3 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b478e:	f003 fad8 	bl	b7d42 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(i, 24);
   b4792:	f004 fadf 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b4796:	2218      	movs	r2, #24
   b4798:	b2e1      	uxtb	r1, r4
   b479a:	f003 fac4 	bl	b7d26 <_ZN7TwoWire11requestFromEhj>
    if(Wire.available() > 0){
   b479e:	f004 fad9 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b47a2:	6803      	ldr	r3, [r0, #0]
   b47a4:	691b      	ldr	r3, [r3, #16]
   b47a6:	4798      	blx	r3
   b47a8:	2800      	cmp	r0, #0
   b47aa:	dd38      	ble.n	b481e <_Z16randomizeAddressv+0x2ce>
      Serial.print(i);
   b47ac:	f004 f984 	bl	b8ab8 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b47b0:	220a      	movs	r2, #10
   b47b2:	4621      	mov	r1, r4
   b47b4:	f003 fc55 	bl	b8062 <_ZN5Print11printNumberEmh>
      Serial.print(", ");
   b47b8:	f004 f97e 	bl	b8ab8 <_Z16_fetch_usbserialv>
   b47bc:	4641      	mov	r1, r8
   b47be:	f003 fc33 	bl	b8028 <_ZN5Print5printEPKc>
      addressArr[count] = i;
   b47c2:	f849 4025 	str.w	r4, [r9, r5, lsl #2]
      Wire.beginTransmission(i);
   b47c6:	f004 fac5 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b47ca:	4621      	mov	r1, r4
   b47cc:	f003 fab2 	bl	b7d34 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(railways.at(count).colors.at(0));
   b47d0:	f004 fac0 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b47d4:	4629      	mov	r1, r5
   b47d6:	4682      	mov	sl, r0
   b47d8:	4638      	mov	r0, r7
   b47da:	f7ff fe5f 	bl	b449c <_ZNSt6vectorI7RailwaySaIS0_EE2atEj>
   b47de:	4606      	mov	r6, r0
	_M_range_check(__n);
   b47e0:	2100      	movs	r1, #0
   b47e2:	3040      	adds	r0, #64	; 0x40
   b47e4:	f7ff fea4 	bl	b4530 <_ZNKSt6vectorI6StringSaIS0_EE14_M_range_checkEj>
	const char * c_str() const { return buffer; }
   b47e8:	6c33      	ldr	r3, [r6, #64]	; 0x40
   b47ea:	4650      	mov	r0, sl
   b47ec:	6819      	ldr	r1, [r3, #0]
   b47ee:	f7ff fca1 	bl	b4134 <_ZN5Print5writeEPKc.isra.0>
      Wire.write(railways.at(count).colors.at(1));
   b47f2:	f004 faaf 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b47f6:	4629      	mov	r1, r5
   b47f8:	4682      	mov	sl, r0
   b47fa:	4638      	mov	r0, r7
   b47fc:	f7ff fe4e 	bl	b449c <_ZNSt6vectorI7RailwaySaIS0_EE2atEj>
   b4800:	4606      	mov	r6, r0
   b4802:	2101      	movs	r1, #1
   b4804:	3040      	adds	r0, #64	; 0x40
   b4806:	f7ff fe93 	bl	b4530 <_ZNKSt6vectorI6StringSaIS0_EE14_M_range_checkEj>
   b480a:	6c33      	ldr	r3, [r6, #64]	; 0x40
   b480c:	4650      	mov	r0, sl
   b480e:	6919      	ldr	r1, [r3, #16]
   b4810:	f7ff fc90 	bl	b4134 <_ZN5Print5writeEPKc.isra.0>
      Wire.endTransmission();
   b4814:	f004 fa9e 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b4818:	f003 fa93 	bl	b7d42 <_ZN7TwoWire15endTransmissionEv>
      count++;
   b481c:	3501      	adds	r5, #1
  for(int i = 8; i<= 119; i++){
   b481e:	3401      	adds	r4, #1
   b4820:	2c78      	cmp	r4, #120	; 0x78
   b4822:	d1a8      	bne.n	b4776 <_Z16randomizeAddressv+0x226>
}
   b4824:	b00c      	add	sp, #48	; 0x30
   b4826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b482a:	bf00      	nop
   b482c:	2003e6a8 	.word	0x2003e6a8
   b4830:	000bc292 	.word	0x000bc292
   b4834:	000bc072 	.word	0x000bc072
   b4838:	000bc07e 	.word	0x000bc07e
   b483c:	000bc095 	.word	0x000bc095
   b4840:	000bc0af 	.word	0x000bc0af
   b4844:	000bc0c7 	.word	0x000bc0c7
   b4848:	2003e5e0 	.word	0x2003e5e0
   b484c:	000bc03a 	.word	0x000bc03a
   b4850:	000bc055 	.word	0x000bc055
   b4854:	000bbfbc 	.word	0x000bbfbc
   b4858:	200357b0 	.word	0x200357b0

000b485c <setup>:
void setup() {
   b485c:	b570      	push	{r4, r5, r6, lr}
   b485e:	b090      	sub	sp, #64	; 0x40
  Serial.begin(9600);
   b4860:	f004 f92a 	bl	b8ab8 <_Z16_fetch_usbserialv>
   b4864:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4868:	f004 f91a 	bl	b8aa0 <_ZN9USBSerial5beginEl>
  delay(2000);
   b486c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4870:	f001 fffe 	bl	b6870 <delay>
  BLE.on();
   b4874:	f002 fb68 	bl	b6f48 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4878:	f002 fbb0 	bl	b6fdc <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   b487c:	f002 fb64 	bl	b6f48 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4880:	4a29      	ldr	r2, [pc, #164]	; (b4928 <setup+0xcc>)
   b4882:	4c2a      	ldr	r4, [pc, #168]	; (b492c <setup+0xd0>)
   b4884:	4601      	mov	r1, r0
   b4886:	a80b      	add	r0, sp, #44	; 0x2c
   b4888:	f003 f892 	bl	b79b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b488c:	a80b      	add	r0, sp, #44	; 0x2c
   b488e:	f002 fc4c 	bl	b712a <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   b4892:	f002 fb59 	bl	b6f48 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4896:	4a26      	ldr	r2, [pc, #152]	; (b4930 <setup+0xd4>)
   b4898:	4601      	mov	r1, r0
   b489a:	a80b      	add	r0, sp, #44	; 0x2c
   b489c:	f003 f888 	bl	b79b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b48a0:	a80b      	add	r0, sp, #44	; 0x2c
   b48a2:	f002 fc42 	bl	b712a <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData data;
   b48a6:	a803      	add	r0, sp, #12
   b48a8:	f002 fd75 	bl	b7396 <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   b48ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b48ae:	ad06      	add	r5, sp, #24
   b48b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b48b2:	ad06      	add	r5, sp, #24
   b48b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b48b6:	6826      	ldr	r6, [r4, #0]
   b48b8:	ac0b      	add	r4, sp, #44	; 0x2c
   b48ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b48bc:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b48be:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b48c0:	f002 f944 	bl	b6b4c <_ZNK8particle7BleUuid4typeEv>
   b48c4:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b48c6:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b48c8:	bb34      	cbnz	r4, b4918 <setup+0xbc>
            uint16_t uuid16 = tempUUID.shorted();
   b48ca:	f002 f95b 	bl	b6b84 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b48ce:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b48d0:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b48d4:	2302      	movs	r3, #2
   b48d6:	f10d 020a 	add.w	r2, sp, #10
   b48da:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b48dc:	a803      	add	r0, sp, #12
   b48de:	f002 fd4f 	bl	b7380 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   b48e2:	f002 fb31 	bl	b6f48 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b48e6:	2200      	movs	r2, #0
   b48e8:	a903      	add	r1, sp, #12
   b48ea:	f002 fbc1 	bl	b7070 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  request.hostname = "lapi.transitchicago.com";
   b48ee:	4c11      	ldr	r4, [pc, #68]	; (b4934 <setup+0xd8>)
  acquireWireBuffer();
   b48f0:	a80b      	add	r0, sp, #44	; 0x2c
   b48f2:	f7ff fce7 	bl	b42c4 <_Z17acquireWireBufferv>
  Wire.begin();
   b48f6:	f004 fa2d 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b48fa:	f003 f9e5 	bl	b7cc8 <_ZN7TwoWire5beginEv>
  randomizeAddress();
   b48fe:	f7ff fe27 	bl	b4550 <_Z16randomizeAddressv>
  request.hostname = "lapi.transitchicago.com";
   b4902:	490d      	ldr	r1, [pc, #52]	; (b4938 <setup+0xdc>)
   b4904:	4620      	mov	r0, r4
   b4906:	f003 fc4a 	bl	b819e <_ZN6StringaSEPKc>
  request.port = 80;
   b490a:	2350      	movs	r3, #80	; 0x50
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b490c:	9803      	ldr	r0, [sp, #12]
   b490e:	63a3      	str	r3, [r4, #56]	; 0x38
   b4910:	f001 ff6e 	bl	b67f0 <free>
}
   b4914:	b010      	add	sp, #64	; 0x40
   b4916:	bd70      	pop	{r4, r5, r6, pc}
   b4918:	f002 f936 	bl	b6b88 <_ZNK8particle7BleUuid8rawBytesEv>
   b491c:	2300      	movs	r3, #0
   b491e:	9300      	str	r3, [sp, #0]
   b4920:	4602      	mov	r2, r0
   b4922:	2310      	movs	r3, #16
   b4924:	2107      	movs	r1, #7
   b4926:	e7d9      	b.n	b48dc <setup+0x80>
   b4928:	2003e6ac 	.word	0x2003e6ac
   b492c:	20035774 	.word	0x20035774
   b4930:	2003e698 	.word	0x2003e698
   b4934:	2003e638 	.word	0x2003e638
   b4938:	000bc0d7 	.word	0x000bc0d7

000b493c <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b493c:	2900      	cmp	r1, #0
      _M_create_storage(size_t __n)
   b493e:	b538      	push	{r3, r4, r5, lr}
   b4940:	4604      	mov	r4, r0
      _M_allocate(size_t __n)
   b4942:	ea4f 0581 	mov.w	r5, r1, lsl #2
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4946:	d00c      	beq.n	b4962 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x26>
	if (__n > this->_M_max_size())
   b4948:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   b494c:	d301      	bcc.n	b4952 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x16>
	  std::__throw_bad_alloc();
   b494e:	f004 fa67 	bl	b8e20 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4952:	4628      	mov	r0, r5
   b4954:	f7ff fb9f 	bl	b4096 <_Znwj>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4958:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b495c:	4428      	add	r0, r5
   b495e:	60a0      	str	r0, [r4, #8]
      }
   b4960:	bd38      	pop	{r3, r4, r5, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4962:	4608      	mov	r0, r1
   b4964:	e7f8      	b.n	b4958 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x1c>

000b4966 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   b4966:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b4968:	b510      	push	{r4, lr}
   b496a:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b496c:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b4970:	d005      	beq.n	b497e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b4972:	4601      	mov	r1, r0
   b4974:	4622      	mov	r2, r4
   b4976:	4618      	mov	r0, r3
   b4978:	f005 fa93 	bl	b9ea2 <memmove>
   b497c:	4603      	mov	r3, r0
	  return __result + _Num;
	}
   b497e:	1918      	adds	r0, r3, r4
   b4980:	bd10      	pop	{r4, pc}

000b4982 <_ZNSt6vectorIiSaIiEEC1ERKS1_>:
      vector(const vector& __x)
   b4982:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4984:	e9d1 3600 	ldrd	r3, r6, [r1]
   b4988:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b498a:	2300      	movs	r3, #0
      vector(const vector& __x)
   b498c:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b498e:	e9c0 3300 	strd	r3, r3, [r0]
   b4992:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4994:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
   b4996:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4998:	f7ff fbae 	bl	b40f8 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b499c:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b49a0:	4406      	add	r6, r0
   b49a2:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b49a4:	4602      	mov	r2, r0
      if (std::is_constant_evaluated())
	return std::__copy_move<_IsMove, false, _Category>::
	  __copy_m(__first, __last, __result);
#endif
      return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
			      _Category>::__copy_m(__first, __last, __result);
   b49a6:	e9d5 0100 	ldrd	r0, r1, [r5]
   b49aa:	f7ff ffdc 	bl	b4966 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
   b49ae:	6060      	str	r0, [r4, #4]
      }
   b49b0:	4620      	mov	r0, r4
   b49b2:	bd70      	pop	{r4, r5, r6, pc}

000b49b4 <_ZN7RailwayC1ERKS_>:
class Railway{
   b49b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b49b6:	460d      	mov	r5, r1
   b49b8:	4604      	mov	r4, r0
   b49ba:	f7ff fd4b 	bl	b4454 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b49be:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
   b49c2:	1ac9      	subs	r1, r1, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b49c4:	2300      	movs	r3, #0
   b49c6:	e9c4 3303 	strd	r3, r3, [r4, #12]
   b49ca:	6163      	str	r3, [r4, #20]
      { _M_create_storage(__n); }
   b49cc:	1089      	asrs	r1, r1, #2
   b49ce:	f104 000c 	add.w	r0, r4, #12
   b49d2:	f7ff ffb3 	bl	b493c <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
   b49d6:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
	  if (_Num)
   b49da:	4291      	cmp	r1, r2
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
   b49dc:	68e3      	ldr	r3, [r4, #12]
	  const ptrdiff_t _Num = __last - __first;
   b49de:	eba2 0601 	sub.w	r6, r2, r1
	  if (_Num)
   b49e2:	d004      	beq.n	b49ee <_ZN7RailwayC1ERKS_+0x3a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b49e4:	4618      	mov	r0, r3
   b49e6:	4632      	mov	r2, r6
   b49e8:	f005 fa5b 	bl	b9ea2 <memmove>
   b49ec:	4603      	mov	r3, r0
	  return __result + _Num;
   b49ee:	4433      	add	r3, r6
	this->_M_impl._M_finish =
   b49f0:	6123      	str	r3, [r4, #16]
   b49f2:	f105 0118 	add.w	r1, r5, #24
   b49f6:	f104 0018 	add.w	r0, r4, #24
   b49fa:	f7ff ffc2 	bl	b4982 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b49fe:	f105 0124 	add.w	r1, r5, #36	; 0x24
   b4a02:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b4a06:	f7ff ffbc 	bl	b4982 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b4a0a:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b4a0e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b4a12:	f003 fbb9 	bl	b8188 <_ZN6StringC1ERKS_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4a16:	e9d5 3710 	ldrd	r3, r7, [r5, #64]	; 0x40
   b4a1a:	1aff      	subs	r7, r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4a1c:	2300      	movs	r3, #0
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4a1e:	1138      	asrs	r0, r7, #4
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4a20:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
   b4a24:	64a3      	str	r3, [r4, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4a26:	f7ff fb5a 	bl	b40de <_ZNSt12_Vector_baseI6StringSaIS0_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4a2a:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4a2e:	4407      	add	r7, r0
   b4a30:	64a7      	str	r7, [r4, #72]	; 0x48
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b4a32:	e9d5 5710 	ldrd	r5, r7, [r5, #64]	; 0x40
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4a36:	4606      	mov	r6, r0
   b4a38:	42af      	cmp	r7, r5
   b4a3a:	d007      	beq.n	b4a4c <_ZN7RailwayC1ERKS_+0x98>
   b4a3c:	b11e      	cbz	r6, b4a46 <_ZN7RailwayC1ERKS_+0x92>
   b4a3e:	4629      	mov	r1, r5
   b4a40:	4630      	mov	r0, r6
   b4a42:	f003 fba1 	bl	b8188 <_ZN6StringC1ERKS_>
   b4a46:	3610      	adds	r6, #16
   b4a48:	3510      	adds	r5, #16
   b4a4a:	e7f5      	b.n	b4a38 <_ZN7RailwayC1ERKS_+0x84>
	this->_M_impl._M_finish =
   b4a4c:	6466      	str	r6, [r4, #68]	; 0x44
   b4a4e:	4620      	mov	r0, r4
   b4a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b4a54 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>:
      vector(initializer_list<value_type> __l,
   b4a54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b4a56:	ab04      	add	r3, sp, #16
   b4a58:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4a5c:	2300      	movs	r3, #0
   b4a5e:	e9c0 3300 	strd	r3, r3, [r0]
   b4a62:	6083      	str	r3, [r0, #8]
      vector(initializer_list<value_type> __l,
   b4a64:	4604      	mov	r4, r0
   b4a66:	4613      	mov	r3, r2
   b4a68:	460e      	mov	r6, r1
   b4a6a:	0095      	lsls	r5, r2, #2
   b4a6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   b4a70:	f342 001d 	sbfx	r0, r2, #0, #30
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4a74:	4a0a      	ldr	r2, [pc, #40]	; (b4aa0 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_+0x4c>)
   b4a76:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   b4a7a:	d202      	bcs.n	b4a82 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_+0x2e>
	  __throw_length_error(
   b4a7c:	4809      	ldr	r0, [pc, #36]	; (b4aa4 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_+0x50>)
   b4a7e:	f004 f9d5 	bl	b8e2c <_ZSt20__throw_length_errorPKc>
   b4a82:	9101      	str	r1, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4a84:	f7ff fb38 	bl	b40f8 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4a88:	4405      	add	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4a8a:	4602      	mov	r2, r0
   b4a8c:	6020      	str	r0, [r4, #0]
			      _Category>::__copy_m(__first, __last, __result);
   b4a8e:	9901      	ldr	r1, [sp, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4a90:	60a5      	str	r5, [r4, #8]
   b4a92:	4630      	mov	r0, r6
   b4a94:	f7ff ff67 	bl	b4966 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
   b4a98:	6060      	str	r0, [r4, #4]
      }
   b4a9a:	4620      	mov	r0, r4
   b4a9c:	b004      	add	sp, #16
   b4a9e:	bd70      	pop	{r4, r5, r6, pc}
   b4aa0:	7ffffffc 	.word	0x7ffffffc
   b4aa4:	000bbfbf 	.word	0x000bbfbf

000b4aa8 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE>:
    Railway(std::vector<Checkpoint> checkpointInput, std::vector<int> scalerInput, int outputSize, String nameInput, std::vector<String> colorInput){
   b4aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4aac:	4616      	mov	r6, r2
   b4aae:	b089      	sub	sp, #36	; 0x24
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4ab0:	2200      	movs	r2, #0
   b4ab2:	f100 0a30 	add.w	sl, r0, #48	; 0x30
   b4ab6:	4604      	mov	r4, r0
   b4ab8:	e9c0 2200 	strd	r2, r2, [r0]
   b4abc:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b4ac0:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b4ac4:	e9c0 2206 	strd	r2, r2, [r0, #24]
   b4ac8:	e9c0 2208 	strd	r2, r2, [r0, #32]
   b4acc:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
   b4ad0:	4688      	mov	r8, r1
   b4ad2:	f100 0b18 	add.w	fp, r0, #24
   b4ad6:	49b9      	ldr	r1, [pc, #740]	; (b4dbc <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x314>)
   b4ad8:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
   b4adc:	4650      	mov	r0, sl
   b4ade:	461d      	mov	r5, r3
   b4ae0:	f003 fb2f 	bl	b8142 <_ZN6StringC1EPK19__FlashStringHelper>
   b4ae4:	2200      	movs	r2, #0
   b4ae6:	f104 0340 	add.w	r3, r4, #64	; 0x40
  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
   b4aea:	4544      	cmp	r4, r8
   b4aec:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
   b4af0:	9300      	str	r3, [sp, #0]
   b4af2:	64a2      	str	r2, [r4, #72]	; 0x48
   b4af4:	d02b      	beq.n	b4b4e <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0xa6>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4af6:	e9d8 3c00 	ldrd	r3, ip, [r8]
			 - this->_M_impl._M_start); }
   b4afa:	6820      	ldr	r0, [r4, #0]
   b4afc:	68a1      	ldr	r1, [r4, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4afe:	ebac 0703 	sub.w	r7, ip, r3
			 - this->_M_impl._M_start); }
   b4b02:	1a09      	subs	r1, r1, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
   b4b04:	428f      	cmp	r7, r1
   b4b06:	d92c      	bls.n	b4b62 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0xba>
	  pointer __result = this->_M_allocate(__n);
   b4b08:	10f8      	asrs	r0, r7, #3
   b4b0a:	9301      	str	r3, [sp, #4]
   b4b0c:	f7ff fb01 	bl	b4112 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
   b4b10:	9b01      	ldr	r3, [sp, #4]
   b4b12:	4680      	mov	r8, r0
   b4b14:	2200      	movs	r2, #0
   b4b16:	4297      	cmp	r7, r2
   b4b18:	d00b      	beq.n	b4b32 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x8a>
   b4b1a:	eb18 0c02 	adds.w	ip, r8, r2
   b4b1e:	bf1c      	itt	ne
   b4b20:	1899      	addne	r1, r3, r2
   b4b22:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b4b26:	f102 0208 	add.w	r2, r2, #8
   b4b2a:	bf18      	it	ne
   b4b2c:	e9cc 0100 	strdne	r0, r1, [ip]
   b4b30:	e7f1      	b.n	b4b16 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x6e>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4b32:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4b34:	b118      	cbz	r0, b4b3e <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x96>
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
   b4b36:	68a1      	ldr	r1, [r4, #8]
	::operator delete(__p
   b4b38:	1a09      	subs	r1, r1, r0
   b4b3a:	f7ff fab0 	bl	b409e <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4b3e:	eb08 0007 	add.w	r0, r8, r7
	      this->_M_impl._M_start = __tmp;
   b4b42:	f8c4 8000 	str.w	r8, [r4]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4b46:	60a0      	str	r0, [r4, #8]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4b48:	6823      	ldr	r3, [r4, #0]
   b4b4a:	443b      	add	r3, r7
   b4b4c:	6063      	str	r3, [r4, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4b4e:	e9d4 2300 	ldrd	r2, r3, [r4]
   b4b52:	1a9b      	subs	r3, r3, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4b54:	2b00      	cmp	r3, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4b56:	ea4f 01e3 	mov.w	r1, r3, asr #3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4b5a:	da2b      	bge.n	b4bb4 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x10c>
	  __throw_length_error(
   b4b5c:	4898      	ldr	r0, [pc, #608]	; (b4dc0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x318>)
   b4b5e:	f004 f965 	bl	b8e2c <_ZSt20__throw_length_errorPKc>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4b62:	6862      	ldr	r2, [r4, #4]
   b4b64:	1a12      	subs	r2, r2, r0
	  else if (size() >= __xlen)
   b4b66:	4297      	cmp	r7, r2
   b4b68:	d806      	bhi.n	b4b78 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0xd0>
	  if (_Num)
   b4b6a:	459c      	cmp	ip, r3
   b4b6c:	d0ec      	beq.n	b4b48 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0xa0>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b4b6e:	463a      	mov	r2, r7
   b4b70:	4619      	mov	r1, r3
   b4b72:	f005 f996 	bl	b9ea2 <memmove>
   b4b76:	e7e7      	b.n	b4b48 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0xa0>
	  if (_Num)
   b4b78:	b112      	cbz	r2, b4b80 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0xd8>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b4b7a:	4619      	mov	r1, r3
   b4b7c:	f005 f991 	bl	b9ea2 <memmove>
   b4b80:	e9d4 2c00 	ldrd	r2, ip, [r4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b4b84:	f8d8 3000 	ldr.w	r3, [r8]
   b4b88:	ebac 0202 	sub.w	r2, ip, r2
   b4b8c:	441a      	add	r2, r3
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   b4b8e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b4b92:	eba3 0e02 	sub.w	lr, r3, r2
					  __x._M_impl._M_finish,
   b4b96:	2300      	movs	r3, #0
	      for (; __first != __last; ++__first, (void)++__cur)
   b4b98:	459e      	cmp	lr, r3
   b4b9a:	d0d5      	beq.n	b4b48 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0xa0>
   b4b9c:	eb1c 0803 	adds.w	r8, ip, r3
   b4ba0:	bf1c      	itt	ne
   b4ba2:	18d1      	addne	r1, r2, r3
   b4ba4:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b4ba8:	f103 0308 	add.w	r3, r3, #8
   b4bac:	bf18      	it	ne
   b4bae:	e9c8 0100 	strdne	r0, r1, [r8]
   b4bb2:	e7f1      	b.n	b4b98 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0xf0>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4bb4:	2700      	movs	r7, #0
      { _M_create_storage(__n); }
   b4bb6:	a802      	add	r0, sp, #8
   b4bb8:	9101      	str	r1, [sp, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4bba:	e9cd 7702 	strd	r7, r7, [sp, #8]
   b4bbe:	9704      	str	r7, [sp, #16]
      { _M_create_storage(__n); }
   b4bc0:	f7ff febc 	bl	b493c <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
   b4bc4:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
   b4bc8:	b131      	cbz	r1, b4bd8 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x130>
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
   b4bca:	eb00 0881 	add.w	r8, r0, r1, lsl #2
	*__first = __tmp;
   b4bce:	008a      	lsls	r2, r1, #2
   b4bd0:	4639      	mov	r1, r7
   b4bd2:	f005 f980 	bl	b9ed6 <memset>
   b4bd6:	4640      	mov	r0, r8
	  _M_start = __x._M_start;
   b4bd8:	9902      	ldr	r1, [sp, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4bda:	6963      	ldr	r3, [r4, #20]
   b4bdc:	9307      	str	r3, [sp, #28]
	  _M_finish = __x._M_finish;
   b4bde:	e9d4 7203 	ldrd	r7, r2, [r4, #12]
   b4be2:	e9c4 1003 	strd	r1, r0, [r4, #12]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4be6:	9904      	ldr	r1, [sp, #16]
   b4be8:	6161      	str	r1, [r4, #20]
	  _M_start = __x._M_start;
   b4bea:	2300      	movs	r3, #0
      }
   b4bec:	a805      	add	r0, sp, #20
	  _M_finish = __x._M_finish;
   b4bee:	e9cd 7205 	strd	r7, r2, [sp, #20]
   b4bf2:	e9cd 3302 	strd	r3, r3, [sp, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4bf6:	9304      	str	r3, [sp, #16]
      }
   b4bf8:	f7ff fb84 	bl	b4304 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b4bfc:	a802      	add	r0, sp, #8
   b4bfe:	f7ff fb81 	bl	b4304 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
      if (&__x != this)
   b4c02:	45b3      	cmp	fp, r6
   b4c04:	d01e      	beq.n	b4c44 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x19c>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c06:	e9d6 8100 	ldrd	r8, r1, [r6]
			 - this->_M_impl._M_start); }
   b4c0a:	69a2      	ldr	r2, [r4, #24]
   b4c0c:	6a23      	ldr	r3, [r4, #32]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c0e:	eba1 0708 	sub.w	r7, r1, r8
			 - this->_M_impl._M_start); }
   b4c12:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b4c14:	429f      	cmp	r7, r3
   b4c16:	d963      	bls.n	b4ce0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x238>
	  pointer __result = this->_M_allocate(__n);
   b4c18:	10b8      	asrs	r0, r7, #2
   b4c1a:	9101      	str	r1, [sp, #4]
   b4c1c:	f7ff fa6c 	bl	b40f8 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
   b4c20:	9901      	ldr	r1, [sp, #4]
   b4c22:	4602      	mov	r2, r0
   b4c24:	4606      	mov	r6, r0
   b4c26:	4640      	mov	r0, r8
   b4c28:	f7ff fe9d 	bl	b4966 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4c2c:	69a0      	ldr	r0, [r4, #24]
	if (__p)
   b4c2e:	b118      	cbz	r0, b4c38 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x190>
			    - this->_M_impl._M_start);
   b4c30:	6a21      	ldr	r1, [r4, #32]
   b4c32:	1a09      	subs	r1, r1, r0
   b4c34:	f7ff fa33 	bl	b409e <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b4c38:	61a6      	str	r6, [r4, #24]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4c3a:	443e      	add	r6, r7
   b4c3c:	6226      	str	r6, [r4, #32]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4c3e:	69a3      	ldr	r3, [r4, #24]
   b4c40:	443b      	add	r3, r7
   b4c42:	61e3      	str	r3, [r4, #28]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4c44:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
   b4c48:	d288      	bcs.n	b4b5c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0xb4>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4c4a:	2700      	movs	r7, #0
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4c4c:	4628      	mov	r0, r5
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4c4e:	e9cd 7702 	strd	r7, r7, [sp, #8]
   b4c52:	9704      	str	r7, [sp, #16]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4c54:	f7ff fa50 	bl	b40f8 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4c58:	00aa      	lsls	r2, r5, #2
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4c5a:	4606      	mov	r6, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4c5c:	eb00 0885 	add.w	r8, r0, r5, lsl #2
      if (__n <= 0)
   b4c60:	2d00      	cmp	r5, #0
   b4c62:	d051      	beq.n	b4d08 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x260>
	*__first = __tmp;
   b4c64:	4639      	mov	r1, r7
   b4c66:	f005 f936 	bl	b9ed6 <memset>
   b4c6a:	4643      	mov	r3, r8
	  _M_finish = __x._M_finish;
   b4c6c:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
   b4c70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   b4c72:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
	  _M_finish = __x._M_finish;
   b4c76:	e9cd 0105 	strd	r0, r1, [sp, #20]
   b4c7a:	e9c4 6309 	strd	r6, r3, [r4, #36]	; 0x24
      }
   b4c7e:	a805      	add	r0, sp, #20
	  _M_start = __x._M_start;
   b4c80:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
   b4c82:	e9cd 3302 	strd	r3, r3, [sp, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4c86:	9304      	str	r3, [sp, #16]
   b4c88:	9207      	str	r2, [sp, #28]
      }
   b4c8a:	f7ff fb45 	bl	b4318 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4c8e:	a802      	add	r0, sp, #8
   b4c90:	f7ff fb42 	bl	b4318 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
      name = nameInput;
   b4c94:	9912      	ldr	r1, [sp, #72]	; 0x48
   b4c96:	4650      	mov	r0, sl
   b4c98:	f003 fa67 	bl	b816a <_ZN6StringaSERKS_>
      if (&__x != this)
   b4c9c:	9b00      	ldr	r3, [sp, #0]
   b4c9e:	454b      	cmp	r3, r9
   b4ca0:	d049      	beq.n	b4d36 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x28e>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4ca2:	e9d9 5a00 	ldrd	r5, sl, [r9]
			 - this->_M_impl._M_start); }
   b4ca6:	f8d4 8040 	ldr.w	r8, [r4, #64]	; 0x40
   b4caa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4cac:	ebaa 0705 	sub.w	r7, sl, r5
			 - this->_M_impl._M_start); }
   b4cb0:	eba3 0308 	sub.w	r3, r3, r8
	  if (__xlen > capacity())
   b4cb4:	42bb      	cmp	r3, r7
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4cb6:	ea4f 1627 	mov.w	r6, r7, asr #4
   b4cba:	d240      	bcs.n	b4d3e <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x296>
	  pointer __result = this->_M_allocate(__n);
   b4cbc:	4630      	mov	r0, r6
   b4cbe:	f7ff fa0e 	bl	b40de <_ZNSt12_Vector_baseI6StringSaIS0_EE11_M_allocateEj.isra.0>
   b4cc2:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   b4cc4:	4680      	mov	r8, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b4cc6:	45aa      	cmp	sl, r5
   b4cc8:	d020      	beq.n	b4d0c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x264>
   b4cca:	f1b8 0f00 	cmp.w	r8, #0
   b4cce:	d003      	beq.n	b4cd8 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x230>
   b4cd0:	4629      	mov	r1, r5
   b4cd2:	4640      	mov	r0, r8
   b4cd4:	f003 fa58 	bl	b8188 <_ZN6StringC1ERKS_>
   b4cd8:	f108 0810 	add.w	r8, r8, #16
   b4cdc:	3510      	adds	r5, #16
   b4cde:	e7f2      	b.n	b4cc6 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x21e>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4ce0:	69e3      	ldr	r3, [r4, #28]
   b4ce2:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b4ce4:	429f      	cmp	r7, r3
   b4ce6:	d803      	bhi.n	b4cf0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x248>
			      _Category>::__copy_m(__first, __last, __result);
   b4ce8:	4640      	mov	r0, r8
   b4cea:	f7ff fe3c 	bl	b4966 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
   b4cee:	e7a6      	b.n	b4c3e <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x196>
   b4cf0:	eb08 0103 	add.w	r1, r8, r3
   b4cf4:	4640      	mov	r0, r8
   b4cf6:	f7ff fe36 	bl	b4966 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
   b4cfa:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   b4cfe:	e9d6 3100 	ldrd	r3, r1, [r6]
   b4d02:	1a10      	subs	r0, r2, r0
   b4d04:	4418      	add	r0, r3
   b4d06:	e7f0      	b.n	b4cea <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x242>
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4d08:	4603      	mov	r3, r0
   b4d0a:	e7af      	b.n	b4c6c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x1c4>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4d0c:	e9d4 5810 	ldrd	r5, r8, [r4, #64]	; 0x40
	  for (; __first != __last; ++__first)
   b4d10:	45a8      	cmp	r8, r5
   b4d12:	d004      	beq.n	b4d1e <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x276>
      __pointer->~_Tp();
   b4d14:	4628      	mov	r0, r5
   b4d16:	f003 f9c9 	bl	b80ac <_ZN6StringD1Ev>
	  for (; __first != __last; ++__first)
   b4d1a:	3510      	adds	r5, #16
   b4d1c:	e7f8      	b.n	b4d10 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x268>
	      _M_deallocate(this->_M_impl._M_start,
   b4d1e:	6c20      	ldr	r0, [r4, #64]	; 0x40
	if (__p)
   b4d20:	b118      	cbz	r0, b4d2a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x282>
			    - this->_M_impl._M_start);
   b4d22:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4d24:	1a09      	subs	r1, r1, r0
   b4d26:	f7ff f9ba 	bl	b409e <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b4d2a:	6426      	str	r6, [r4, #64]	; 0x40
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4d2c:	443e      	add	r6, r7
   b4d2e:	64a6      	str	r6, [r4, #72]	; 0x48
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4d30:	6c23      	ldr	r3, [r4, #64]	; 0x40
   b4d32:	443b      	add	r3, r7
   b4d34:	6463      	str	r3, [r4, #68]	; 0x44
    }
   b4d36:	4620      	mov	r0, r4
   b4d38:	b009      	add	sp, #36	; 0x24
   b4d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4d3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   b4d40:	eba3 0308 	sub.w	r3, r3, r8
	  else if (size() >= __xlen)
   b4d44:	429f      	cmp	r7, r3
   b4d46:	d81b      	bhi.n	b4d80 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x2d8>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4d48:	46b1      	mov	r9, r6
   b4d4a:	46c2      	mov	sl, r8
   b4d4c:	f1b9 0f00 	cmp.w	r9, #0
   b4d50:	dd09      	ble.n	b4d66 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x2be>
	      *__result = *__first;
   b4d52:	4629      	mov	r1, r5
   b4d54:	4650      	mov	r0, sl
   b4d56:	f003 fa08 	bl	b816a <_ZN6StringaSERKS_>
	      ++__first;
   b4d5a:	3510      	adds	r5, #16
	      ++__result;
   b4d5c:	f10a 0a10 	add.w	sl, sl, #16
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4d60:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   b4d64:	e7f2      	b.n	b4d4c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x2a4>
   b4d66:	ea26 75e6 	bic.w	r5, r6, r6, asr #31
      : _M_current(__i) { }
   b4d6a:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b4d6e:	eb08 1505 	add.w	r5, r8, r5, lsl #4
	  for (; __first != __last; ++__first)
   b4d72:	45a9      	cmp	r9, r5
   b4d74:	d0dc      	beq.n	b4d30 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x288>
      __pointer->~_Tp();
   b4d76:	4628      	mov	r0, r5
   b4d78:	f003 f998 	bl	b80ac <_ZN6StringD1Ev>
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b4d7c:	3510      	adds	r5, #16
      {
	++_M_current;
	return *this;
   b4d7e:	e7f8      	b.n	b4d72 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x2ca>
   b4d80:	111e      	asrs	r6, r3, #4
   b4d82:	2e00      	cmp	r6, #0
   b4d84:	dd08      	ble.n	b4d98 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x2f0>
	      *__result = *__first;
   b4d86:	4629      	mov	r1, r5
   b4d88:	4640      	mov	r0, r8
   b4d8a:	f003 f9ee 	bl	b816a <_ZN6StringaSERKS_>
	      ++__first;
   b4d8e:	3510      	adds	r5, #16
	      ++__result;
   b4d90:	f108 0810 	add.w	r8, r8, #16
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4d94:	3e01      	subs	r6, #1
   b4d96:	e7f4      	b.n	b4d82 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x2da>
   b4d98:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
   b4d9c:	1b71      	subs	r1, r6, r5
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b4d9e:	f8d9 5000 	ldr.w	r5, [r9]
					  __x._M_impl._M_finish,
   b4da2:	f8d9 8004 	ldr.w	r8, [r9, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b4da6:	440d      	add	r5, r1
	      for (; __first != __last; ++__first, (void)++__cur)
   b4da8:	45a8      	cmp	r8, r5
   b4daa:	d0c1      	beq.n	b4d30 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x288>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4dac:	b11e      	cbz	r6, b4db6 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x30e>
   b4dae:	4629      	mov	r1, r5
   b4db0:	4630      	mov	r0, r6
   b4db2:	f003 f9e9 	bl	b8188 <_ZN6StringC1ERKS_>
   b4db6:	3510      	adds	r5, #16
   b4db8:	3610      	adds	r6, #16
   b4dba:	e7f5      	b.n	b4da8 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE+0x300>
   b4dbc:	000bc292 	.word	0x000bc292
   b4dc0:	000bbfbf 	.word	0x000bbfbf

000b4dc4 <_Z41__static_initialization_and_destruction_0ii.constprop.0>:
   b4dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4dc8:	ed2d 8b0a 	vpush	{d8-d12}
   b4dcc:	2801      	cmp	r0, #1
   b4dce:	b0d7      	sub	sp, #348	; 0x15c
   b4dd0:	f040 81f3 	bne.w	b51ba <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3f6>
);
   b4dd4:	ac30      	add	r4, sp, #192	; 0xc0
   b4dd6:	2305      	movs	r3, #5
   b4dd8:	4ec2      	ldr	r6, [pc, #776]	; (b50e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x320>)
   b4dda:	9314      	str	r3, [sp, #80]	; 0x50
      lat = la;
   b4ddc:	eddf cac2 	vldr	s25, [pc, #776]	; b50e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x324>
      lon = lo;
   b4de0:	ed9f cac2 	vldr	s24, [pc, #776]	; b50ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x328>
      lat = la;
   b4de4:	eddf bac2 	vldr	s23, [pc, #776]	; b50f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x32c>
      lon = lo;
   b4de8:	ed9f bac2 	vldr	s22, [pc, #776]	; b50f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x330>
      lat = la;
   b4dec:	eddf aac2 	vldr	s21, [pc, #776]	; b50f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x334>
      lon = lo;
   b4df0:	ed9f aac2 	vldr	s20, [pc, #776]	; b50fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x338>
      lat = la;
   b4df4:	eddf 9ac2 	vldr	s19, [pc, #776]	; b5100 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x33c>
      lon = lo;
   b4df8:	ed9f 9ac2 	vldr	s18, [pc, #776]	; b5104 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x340>
      lat = la;
   b4dfc:	eddf 8ac2 	vldr	s17, [pc, #776]	; b5108 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x344>
      lon = lo;
   b4e00:	ed9f 8ac2 	vldr	s16, [pc, #776]	; b510c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x348>
);
   b4e04:	9413      	str	r4, [sp, #76]	; 0x4c
   b4e06:	f10d 0934 	add.w	r9, sp, #52	; 0x34
   b4e0a:	aa13      	add	r2, sp, #76	; 0x4c
   b4e0c:	ca06      	ldmia	r2, {r1, r2}
   b4e0e:	464b      	mov	r3, r9
   b4e10:	a81b      	add	r0, sp, #108	; 0x6c
      lat = la;
   b4e12:	edcd ca30 	vstr	s25, [sp, #192]	; 0xc0
      lon = lo;
   b4e16:	ed8d ca31 	vstr	s24, [sp, #196]	; 0xc4
      lat = la;
   b4e1a:	edcd ba32 	vstr	s23, [sp, #200]	; 0xc8
      lon = lo;
   b4e1e:	ed8d ba33 	vstr	s22, [sp, #204]	; 0xcc
      lat = la;
   b4e22:	edcd aa34 	vstr	s21, [sp, #208]	; 0xd0
      lon = lo;
   b4e26:	ed8d aa35 	vstr	s20, [sp, #212]	; 0xd4
      lat = la;
   b4e2a:	edcd 9a36 	vstr	s19, [sp, #216]	; 0xd8
      lon = lo;
   b4e2e:	ed8d 9a37 	vstr	s18, [sp, #220]	; 0xdc
      lat = la;
   b4e32:	edcd 8a38 	vstr	s17, [sp, #224]	; 0xe0
      lon = lo;
   b4e36:	ed8d 8a39 	vstr	s16, [sp, #228]	; 0xe4
);
   b4e3a:	f7ff faa5 	bl	b4388 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b4e3e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   b4e42:	ad23      	add	r5, sp, #140	; 0x8c
   b4e44:	f04f 0b04 	mov.w	fp, #4
   b4e48:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   b4e4c:	9511      	str	r5, [sp, #68]	; 0x44
   b4e4e:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
   b4e52:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
   b4e56:	aa11      	add	r2, sp, #68	; 0x44
   b4e58:	ca06      	ldmia	r2, {r1, r2}
   b4e5a:	4643      	mov	r3, r8
   b4e5c:	a818      	add	r0, sp, #96	; 0x60
   b4e5e:	f7ff fdf9 	bl	b4a54 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
   b4e62:	49ab      	ldr	r1, [pc, #684]	; (b5110 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x34c>)
   b4e64:	a81e      	add	r0, sp, #120	; 0x78
   b4e66:	f003 f96c 	bl	b8142 <_ZN6StringC1EPK19__FlashStringHelper>
   b4e6a:	49aa      	ldr	r1, [pc, #680]	; (b5114 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x350>)
   b4e6c:	a828      	add	r0, sp, #160	; 0xa0
   b4e6e:	f003 f968 	bl	b8142 <_ZN6StringC1EPK19__FlashStringHelper>
   b4e72:	49a9      	ldr	r1, [pc, #676]	; (b5118 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x354>)
   b4e74:	a82c      	add	r0, sp, #176	; 0xb0
   b4e76:	f003 f964 	bl	b8142 <_ZN6StringC1EPK19__FlashStringHelper>
   b4e7a:	f04f 0a02 	mov.w	sl, #2
   b4e7e:	ab28      	add	r3, sp, #160	; 0xa0
   b4e80:	930f      	str	r3, [sp, #60]	; 0x3c
   b4e82:	af09      	add	r7, sp, #36	; 0x24
   b4e84:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
   b4e88:	aa0f      	add	r2, sp, #60	; 0x3c
   b4e8a:	ca06      	ldmia	r2, {r1, r2}
   b4e8c:	463b      	mov	r3, r7
   b4e8e:	a815      	add	r0, sp, #84	; 0x54
   b4e90:	f7ff faae 	bl	b43f0 <_ZNSt6vectorI6StringSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
Railway redLine = Railway(
   b4e94:	ab15      	add	r3, sp, #84	; 0x54
   b4e96:	9301      	str	r3, [sp, #4]
   b4e98:	ab1e      	add	r3, sp, #120	; 0x78
   b4e9a:	aa18      	add	r2, sp, #96	; 0x60
   b4e9c:	a91b      	add	r1, sp, #108	; 0x6c
   b4e9e:	9300      	str	r3, [sp, #0]
   b4ea0:	489e      	ldr	r0, [pc, #632]	; (b511c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x358>)
   b4ea2:	2328      	movs	r3, #40	; 0x28
   b4ea4:	f7ff fe00 	bl	b4aa8 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE>
);
   b4ea8:	a815      	add	r0, sp, #84	; 0x54
   b4eaa:	f7ff fa3f 	bl	b432c <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   b4eae:	a82c      	add	r0, sp, #176	; 0xb0
   b4eb0:	f003 f8fc 	bl	b80ac <_ZN6StringD1Ev>
   b4eb4:	a828      	add	r0, sp, #160	; 0xa0
   b4eb6:	f003 f8f9 	bl	b80ac <_ZN6StringD1Ev>
   b4eba:	a81e      	add	r0, sp, #120	; 0x78
   b4ebc:	f003 f8f6 	bl	b80ac <_ZN6StringD1Ev>
      }
   b4ec0:	a818      	add	r0, sp, #96	; 0x60
   b4ec2:	f7ff fa29 	bl	b4318 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4ec6:	a81b      	add	r0, sp, #108	; 0x6c
   b4ec8:	f7ff fa12 	bl	b42f0 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b4ecc:	2305      	movs	r3, #5
   b4ece:	930e      	str	r3, [sp, #56]	; 0x38
   b4ed0:	940d      	str	r4, [sp, #52]	; 0x34
   b4ed2:	e899 0006 	ldmia.w	r9, {r1, r2}
   b4ed6:	ab08      	add	r3, sp, #32
   b4ed8:	a81b      	add	r0, sp, #108	; 0x6c
      lat = la;
   b4eda:	edcd ca30 	vstr	s25, [sp, #192]	; 0xc0
      lon = lo;
   b4ede:	ed8d ca31 	vstr	s24, [sp, #196]	; 0xc4
      lat = la;
   b4ee2:	edcd ba32 	vstr	s23, [sp, #200]	; 0xc8
      lon = lo;
   b4ee6:	ed8d ba33 	vstr	s22, [sp, #204]	; 0xcc
      lat = la;
   b4eea:	edcd aa34 	vstr	s21, [sp, #208]	; 0xd0
      lon = lo;
   b4eee:	ed8d aa35 	vstr	s20, [sp, #212]	; 0xd4
      lat = la;
   b4ef2:	edcd 9a36 	vstr	s19, [sp, #216]	; 0xd8
      lon = lo;
   b4ef6:	ed8d 9a37 	vstr	s18, [sp, #220]	; 0xdc
      lat = la;
   b4efa:	edcd 8a38 	vstr	s17, [sp, #224]	; 0xe0
      lon = lo;
   b4efe:	ed8d 8a39 	vstr	s16, [sp, #228]	; 0xe4
);
   b4f02:	f7ff fa41 	bl	b4388 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b4f06:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   b4f0a:	e9cd 5b0b 	strd	r5, fp, [sp, #44]	; 0x2c
   b4f0e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   b4f12:	e898 0006 	ldmia.w	r8, {r1, r2}
   b4f16:	ab07      	add	r3, sp, #28
   b4f18:	a818      	add	r0, sp, #96	; 0x60
   b4f1a:	f7ff fd9b 	bl	b4a54 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
   b4f1e:	4980      	ldr	r1, [pc, #512]	; (b5120 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x35c>)
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4f20:	4d80      	ldr	r5, [pc, #512]	; (b5124 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x360>)
   b4f22:	a81e      	add	r0, sp, #120	; 0x78
   b4f24:	f003 f90d 	bl	b8142 <_ZN6StringC1EPK19__FlashStringHelper>
   b4f28:	497f      	ldr	r1, [pc, #508]	; (b5128 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x364>)
   b4f2a:	a828      	add	r0, sp, #160	; 0xa0
   b4f2c:	f003 f909 	bl	b8142 <_ZN6StringC1EPK19__FlashStringHelper>
   b4f30:	497e      	ldr	r1, [pc, #504]	; (b512c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x368>)
   b4f32:	a82c      	add	r0, sp, #176	; 0xb0
   b4f34:	f003 f905 	bl	b8142 <_ZN6StringC1EPK19__FlashStringHelper>
   b4f38:	ab28      	add	r3, sp, #160	; 0xa0
   b4f3a:	e9cd 3a09 	strd	r3, sl, [sp, #36]	; 0x24
   b4f3e:	a815      	add	r0, sp, #84	; 0x54
   b4f40:	e897 0006 	ldmia.w	r7, {r1, r2}
   b4f44:	ab06      	add	r3, sp, #24
   b4f46:	f7ff fa53 	bl	b43f0 <_ZNSt6vectorI6StringSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
Railway blueLine = Railway(
   b4f4a:	ab15      	add	r3, sp, #84	; 0x54
   b4f4c:	9301      	str	r3, [sp, #4]
   b4f4e:	ab1e      	add	r3, sp, #120	; 0x78
   b4f50:	aa18      	add	r2, sp, #96	; 0x60
   b4f52:	a91b      	add	r1, sp, #108	; 0x6c
   b4f54:	9300      	str	r3, [sp, #0]
   b4f56:	4876      	ldr	r0, [pc, #472]	; (b5130 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x36c>)
   b4f58:	2328      	movs	r3, #40	; 0x28
   b4f5a:	f7ff fda5 	bl	b4aa8 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEi6StringS0_IS6_SaIS6_EE>
);
   b4f5e:	a815      	add	r0, sp, #84	; 0x54
   b4f60:	f7ff f9e4 	bl	b432c <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   b4f64:	a82c      	add	r0, sp, #176	; 0xb0
   b4f66:	f003 f8a1 	bl	b80ac <_ZN6StringD1Ev>
   b4f6a:	a828      	add	r0, sp, #160	; 0xa0
   b4f6c:	f003 f89e 	bl	b80ac <_ZN6StringD1Ev>
   b4f70:	a81e      	add	r0, sp, #120	; 0x78
   b4f72:	f003 f89b 	bl	b80ac <_ZN6StringD1Ev>
      }
   b4f76:	a818      	add	r0, sp, #96	; 0x60
   b4f78:	f7ff f9ce 	bl	b4318 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4f7c:	a81b      	add	r0, sp, #108	; 0x6c
   b4f7e:	f7ff f9b7 	bl	b42f0 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
std::vector<Railway> railways = {redLine, blueLine};
   b4f82:	4966      	ldr	r1, [pc, #408]	; (b511c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x358>)
   b4f84:	4620      	mov	r0, r4
   b4f86:	f7ff fd15 	bl	b49b4 <_ZN7RailwayC1ERKS_>
   b4f8a:	4969      	ldr	r1, [pc, #420]	; (b5130 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x36c>)
   b4f8c:	a843      	add	r0, sp, #268	; 0x10c
   b4f8e:	f7ff fd11 	bl	b49b4 <_ZN7RailwayC1ERKS_>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4f92:	2300      	movs	r3, #0
   b4f94:	e9c5 3300 	strd	r3, r3, [r5]
   b4f98:	60ab      	str	r3, [r5, #8]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4f9a:	2098      	movs	r0, #152	; 0x98
   b4f9c:	f7ff f87b 	bl	b4096 <_Znwj>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4fa0:	f100 0798 	add.w	r7, r0, #152	; 0x98
   b4fa4:	4606      	mov	r6, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4fa6:	6028      	str	r0, [r5, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4fa8:	60af      	str	r7, [r5, #8]
   b4faa:	b110      	cbz	r0, b4fb2 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1ee>
   b4fac:	4621      	mov	r1, r4
   b4fae:	f7ff fd01 	bl	b49b4 <_ZN7RailwayC1ERKS_>
   b4fb2:	a943      	add	r1, sp, #268	; 0x10c
   b4fb4:	f106 004c 	add.w	r0, r6, #76	; 0x4c
   b4fb8:	f7ff fcfc 	bl	b49b4 <_ZN7RailwayC1ERKS_>
   b4fbc:	a843      	add	r0, sp, #268	; 0x10c
	  this->_M_impl._M_finish =
   b4fbe:	606f      	str	r7, [r5, #4]
   b4fc0:	f7ff f9c7 	bl	b4352 <_ZN7RailwayD1Ev>
   b4fc4:	4620      	mov	r0, r4
   b4fc6:	f7ff f9c4 	bl	b4352 <_ZN7RailwayD1Ev>
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b4fca:	495a      	ldr	r1, [pc, #360]	; (b5134 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x370>)
   b4fcc:	485a      	ldr	r0, [pc, #360]	; (b5138 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x374>)
   b4fce:	4d5b      	ldr	r5, [pc, #364]	; (b513c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x378>)
   b4fd0:	f8df 8164 	ldr.w	r8, [pc, #356]	; b5138 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x374>
   b4fd4:	f001 fe58 	bl	b6c88 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b4fd8:	4959      	ldr	r1, [pc, #356]	; (b5140 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x37c>)
   b4fda:	485a      	ldr	r0, [pc, #360]	; (b5144 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x380>)
   b4fdc:	f001 fe54 	bl	b6c88 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b4fe0:	4959      	ldr	r1, [pc, #356]	; (b5148 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x384>)
   b4fe2:	4856      	ldr	r0, [pc, #344]	; (b513c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x378>)
   b4fe4:	f001 fe50 	bl	b6c88 <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b4fe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4fea:	f10d 0a78 	add.w	sl, sp, #120	; 0x78
   b4fee:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
   b4ff2:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   b4ff6:	af23      	add	r7, sp, #140	; 0x8c
   b4ff8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b4ffa:	46c1      	mov	r9, r8
   b4ffc:	f8d5 c000 	ldr.w	ip, [r5]
   b5000:	f859 3910 	ldr.w	r3, [r9], #-16
   b5004:	f8ca c000 	str.w	ip, [sl]
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b5008:	ad1e      	add	r5, sp, #120	; 0x78
   b500a:	603b      	str	r3, [r7, #0]

#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
   b500c:	9305      	str	r3, [sp, #20]
   b500e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5010:	ae28      	add	r6, sp, #160	; 0xa0
   b5012:	c60f      	stmia	r6!, {r0, r1, r2, r3}
      : _M_ptr(0), _M_refcount()
   b5014:	f8df e160 	ldr.w	lr, [pc, #352]	; b5178 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3b4>
   b5018:	f8c6 c000 	str.w	ip, [r6]
   b501c:	f04f 0b00 	mov.w	fp, #0
        BleUuid sUuid(svcUuid);
   b5020:	f10d 0c8c 	add.w	ip, sp, #140	; 0x8c
      constexpr __shared_count() noexcept : _M_pi(0)
   b5024:	e9ce bb00 	strd	fp, fp, [lr]
   b5028:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b502c:	4625      	mov	r5, r4
   b502e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5030:	9b05      	ldr	r3, [sp, #20]
   b5032:	602b      	str	r3, [r5, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5034:	4670      	mov	r0, lr
   b5036:	4945      	ldr	r1, [pc, #276]	; (b514c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x388>)
   b5038:	9400      	str	r4, [sp, #0]
   b503a:	ab28      	add	r3, sp, #160	; 0xa0
   b503c:	f04f 0210 	mov.w	r2, #16
   b5040:	e9cd bb01 	strd	fp, fp, [sp, #4]
   b5044:	f002 fb8a 	bl	b775c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b5048:	f8df c0f8 	ldr.w	ip, [pc, #248]	; b5144 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x380>
   b504c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5050:	f10d 0e78 	add.w	lr, sp, #120	; 0x78
   b5054:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b5058:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   b505c:	f8dc c000 	ldr.w	ip, [ip]
   b5060:	f8ca c000 	str.w	ip, [sl]
   b5064:	f10d 0e8c 	add.w	lr, sp, #140	; 0x8c
        BleUuid cUuid(charUuid);
   b5068:	f10d 0978 	add.w	r9, sp, #120	; 0x78
   b506c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b5070:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   b5074:	f8d8 e000 	ldr.w	lr, [r8]
   b5078:	f8c7 e000 	str.w	lr, [r7]
   b507c:	af28      	add	r7, sp, #160	; 0xa0
   b507e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
      : _M_ptr(0), _M_refcount()
   b5080:	f8df 80f8 	ldr.w	r8, [pc, #248]	; b517c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3b8>
   b5084:	f8c6 c000 	str.w	ip, [r6]
        BleUuid sUuid(svcUuid);
   b5088:	af23      	add	r7, sp, #140	; 0x8c
      constexpr __shared_count() noexcept : _M_pi(0)
   b508a:	e9c8 bb00 	strd	fp, fp, [r8]
   b508e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b5090:	4626      	mov	r6, r4
   b5092:	c60f      	stmia	r6!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5094:	4b2e      	ldr	r3, [pc, #184]	; (b5150 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x38c>)
        BleUuid sUuid(svcUuid);
   b5096:	f8c5 e000 	str.w	lr, [r5]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b509a:	f04f 0204 	mov.w	r2, #4
   b509e:	e9cd 4300 	strd	r4, r3, [sp]
   b50a2:	492c      	ldr	r1, [pc, #176]	; (b5154 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x390>)
   b50a4:	f8cd b008 	str.w	fp, [sp, #8]
   b50a8:	ab28      	add	r3, sp, #160	; 0xa0
   b50aa:	4640      	mov	r0, r8
   b50ac:	f002 fb56 	bl	b775c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
   b50b0:	4929      	ldr	r1, [pc, #164]	; (b5158 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x394>)
   b50b2:	482a      	ldr	r0, [pc, #168]	; (b515c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x398>)
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b50b4:	4c2a      	ldr	r4, [pc, #168]	; (b5160 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x39c>)
   b50b6:	f003 f844 	bl	b8142 <_ZN6StringC1EPK19__FlashStringHelper>
   b50ba:	482a      	ldr	r0, [pc, #168]	; (b5164 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3a0>)
   b50bc:	f002 fe7e 	bl	b7dbc <_ZN9IPAddressC1Ev>
   b50c0:	4925      	ldr	r1, [pc, #148]	; (b5158 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x394>)
   b50c2:	4829      	ldr	r0, [pc, #164]	; (b5168 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3a4>)
   b50c4:	f003 f83d 	bl	b8142 <_ZN6StringC1EPK19__FlashStringHelper>
   b50c8:	4923      	ldr	r1, [pc, #140]	; (b5158 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x394>)
   b50ca:	4828      	ldr	r0, [pc, #160]	; (b516c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3a8>)
   b50cc:	f003 f839 	bl	b8142 <_ZN6StringC1EPK19__FlashStringHelper>
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   b50d0:	4921      	ldr	r1, [pc, #132]	; (b5158 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x394>)
   b50d2:	4827      	ldr	r0, [pc, #156]	; (b5170 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3ac>)
   b50d4:	f003 f835 	bl	b8142 <_ZN6StringC1EPK19__FlashStringHelper>
HttpClient http;
   b50d8:	4826      	ldr	r0, [pc, #152]	; (b5174 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3b0>)
   b50da:	f000 fb4f 	bl	b577c <_ZN10HttpClientC1Ev>
   b50de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b50e2:	e04d      	b.n	b5180 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3bc>
   b50e4:	000bc248 	.word	0x000bc248
   b50e8:	42276980 	.word	0x42276980
   b50ec:	c2af431e 	.word	0xc2af431e
   b50f0:	42279dcc 	.word	0x42279dcc
   b50f4:	c2af4202 	.word	0xc2af4202
   b50f8:	42279d95 	.word	0x42279d95
   b50fc:	c2af476d 	.word	0xc2af476d
   b5100:	4227a7a9 	.word	0x4227a7a9
   b5104:	c2af4e05 	.word	0xc2af4e05
   b5108:	4227b382 	.word	0x4227b382
   b510c:	c2af4e44 	.word	0xc2af4e44
   b5110:	000bc0ef 	.word	0x000bc0ef
   b5114:	000bc0f3 	.word	0x000bc0f3
   b5118:	000bc0fa 	.word	0x000bc0fa
   b511c:	2003e5ec 	.word	0x2003e5ec
   b5120:	000bc101 	.word	0x000bc101
   b5124:	2003e5e0 	.word	0x2003e5e0
   b5128:	000bc106 	.word	0x000bc106
   b512c:	000bc10d 	.word	0x000bc10d
   b5130:	200357bc 	.word	0x200357bc
   b5134:	000bc114 	.word	0x000bc114
   b5138:	20035774 	.word	0x20035774
   b513c:	2003579c 	.word	0x2003579c
   b5140:	000bc139 	.word	0x000bc139
   b5144:	20035788 	.word	0x20035788
   b5148:	000bc15e 	.word	0x000bc15e
   b514c:	000bc183 	.word	0x000bc183
   b5150:	000b4159 	.word	0x000b4159
   b5154:	000bc186 	.word	0x000bc186
   b5158:	000bc292 	.word	0x000bc292
   b515c:	2003e638 	.word	0x2003e638
   b5160:	20038024 	.word	0x20038024
   b5164:	2003e648 	.word	0x2003e648
   b5168:	2003e660 	.word	0x2003e660
   b516c:	2003e674 	.word	0x2003e674
   b5170:	2003e688 	.word	0x2003e688
   b5174:	20035808 	.word	0x20035808
   b5178:	2003e6ac 	.word	0x2003e6ac
   b517c:	2003e698 	.word	0x2003e698
   b5180:	9300      	str	r3, [sp, #0]
   b5182:	f242 7210 	movw	r2, #10000	; 0x2710
   b5186:	4b27      	ldr	r3, [pc, #156]	; (b5224 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x460>)
   b5188:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b518c:	4620      	mov	r0, r4
   b518e:	f000 fccd 	bl	b5b2c <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b5192:	4b25      	ldr	r3, [pc, #148]	; (b5228 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x464>)
   b5194:	6023      	str	r3, [r4, #0]
   b5196:	b057      	add	sp, #348	; 0x15c
   b5198:	ecbd 8b0a 	vpop	{d8-d12}
   b519c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_M_deallocate(_M_impl._M_start,
   b51a0:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b51a2:	b118      	cbz	r0, b51ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3e8>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b51a4:	68a1      	ldr	r1, [r4, #8]
	::operator delete(__p
   b51a6:	1a09      	subs	r1, r1, r0
   b51a8:	f7fe ff79 	bl	b409e <_ZdlPvj>
Railway blueLine = Railway(
   b51ac:	481f      	ldr	r0, [pc, #124]	; (b522c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x468>)
   b51ae:	f7ff f8d0 	bl	b4352 <_ZN7RailwayD1Ev>
Railway redLine = Railway(
   b51b2:	481f      	ldr	r0, [pc, #124]	; (b5230 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x46c>)
   b51b4:	f7ff f8cd 	bl	b4352 <_ZN7RailwayD1Ev>
   b51b8:	e7ed      	b.n	b5196 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3d2>
JsonParserStatic<10000, 1000> parser;
   b51ba:	481e      	ldr	r0, [pc, #120]	; (b5234 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x470>)
   b51bc:	f7fe ff7a 	bl	b40b4 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b51c0:	4b1d      	ldr	r3, [pc, #116]	; (b5238 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x474>)
   b51c2:	4a1e      	ldr	r2, [pc, #120]	; (b523c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x478>)
	if (_M_pi != nullptr)
   b51c4:	699c      	ldr	r4, [r3, #24]
   b51c6:	601a      	str	r2, [r3, #0]
   b51c8:	b17c      	cbz	r4, b51ea <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x426>
      if (--_M_use_count == 0)
   b51ca:	6863      	ldr	r3, [r4, #4]
   b51cc:	3b01      	subs	r3, #1
   b51ce:	6063      	str	r3, [r4, #4]
   b51d0:	b95b      	cbnz	r3, b51ea <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x426>
          _M_dispose();
   b51d2:	6823      	ldr	r3, [r4, #0]
   b51d4:	4620      	mov	r0, r4
   b51d6:	689b      	ldr	r3, [r3, #8]
   b51d8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b51da:	68a3      	ldr	r3, [r4, #8]
   b51dc:	3b01      	subs	r3, #1
   b51de:	60a3      	str	r3, [r4, #8]
   b51e0:	b91b      	cbnz	r3, b51ea <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x426>
            _M_destroy();
   b51e2:	6823      	ldr	r3, [r4, #0]
   b51e4:	4620      	mov	r0, r4
   b51e6:	68db      	ldr	r3, [r3, #12]
   b51e8:	4798      	blx	r3
   b51ea:	4815      	ldr	r0, [pc, #84]	; (b5240 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x47c>)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b51ec:	4c15      	ldr	r4, [pc, #84]	; (b5244 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x480>)
   b51ee:	f002 ff5d 	bl	b80ac <_ZN6StringD1Ev>
} http_request_t;
   b51f2:	4815      	ldr	r0, [pc, #84]	; (b5248 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x484>)
   b51f4:	f002 ff5a 	bl	b80ac <_ZN6StringD1Ev>
   b51f8:	4814      	ldr	r0, [pc, #80]	; (b524c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x488>)
   b51fa:	f002 ff57 	bl	b80ac <_ZN6StringD1Ev>
   b51fe:	4814      	ldr	r0, [pc, #80]	; (b5250 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x48c>)
   b5200:	f002 ff54 	bl	b80ac <_ZN6StringD1Ev>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   b5204:	4813      	ldr	r0, [pc, #76]	; (b5254 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x490>)
   b5206:	f001 ff90 	bl	b712a <_ZN8particle17BleCharacteristicD1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   b520a:	4813      	ldr	r0, [pc, #76]	; (b5258 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x494>)
   b520c:	f001 ff8d 	bl	b712a <_ZN8particle17BleCharacteristicD1Ev>
   b5210:	e9d4 5600 	ldrd	r5, r6, [r4]
	  for (; __first != __last; ++__first)
   b5214:	42ae      	cmp	r6, r5
   b5216:	d0c3      	beq.n	b51a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3dc>
      __pointer->~_Tp();
   b5218:	4628      	mov	r0, r5
   b521a:	f7ff f89a 	bl	b4352 <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b521e:	354c      	adds	r5, #76	; 0x4c
   b5220:	e7f8      	b.n	b5214 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x450>
   b5222:	bf00      	nop
   b5224:	2003a760 	.word	0x2003a760
   b5228:	000bc234 	.word	0x000bc234
   b522c:	200357bc 	.word	0x200357bc
   b5230:	2003e5ec 	.word	0x2003e5ec
   b5234:	20038024 	.word	0x20038024
   b5238:	20035808 	.word	0x20035808
   b523c:	000bc59c 	.word	0x000bc59c
   b5240:	2003e688 	.word	0x2003e688
   b5244:	2003e5e0 	.word	0x2003e5e0
   b5248:	2003e674 	.word	0x2003e674
   b524c:	2003e660 	.word	0x2003e660
   b5250:	2003e638 	.word	0x2003e638
   b5254:	2003e698 	.word	0x2003e698
   b5258:	2003e6ac 	.word	0x2003e6ac

000b525c <_GLOBAL__sub_I_redLine>:
   b525c:	2001      	movs	r0, #1
   b525e:	f7ff bdb1 	b.w	b4dc4 <_Z41__static_initialization_and_destruction_0ii.constprop.0>
	...

000b5264 <loop>:
void loop() {
   b5264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5268:	ed2d 8b06 	vpush	{d8-d10}
   b526c:	b0b1      	sub	sp, #196	; 0xc4
  Serial.println("loop start");
   b526e:	f003 fc23 	bl	b8ab8 <_Z16_fetch_usbserialv>
   b5272:	49a0      	ldr	r1, [pc, #640]	; (b54f4 <loop+0x290>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5274:	f8df a2d0 	ldr.w	sl, [pc, #720]	; b5548 <loop+0x2e4>
   b5278:	f002 fee9 	bl	b804e <_ZN5Print7printlnEPKc>
  for(int j = 0; j < railways.size(); j++){
   b527c:	4b9e      	ldr	r3, [pc, #632]	; (b54f8 <loop+0x294>)
   b527e:	9302      	str	r3, [sp, #8]
   b5280:	2400      	movs	r4, #0
   b5282:	e9da 2300 	ldrd	r2, r3, [sl]
   b5286:	1a9b      	subs	r3, r3, r2
   b5288:	4a9c      	ldr	r2, [pc, #624]	; (b54fc <loop+0x298>)
   b528a:	109b      	asrs	r3, r3, #2
   b528c:	4353      	muls	r3, r2
   b528e:	429c      	cmp	r4, r3
   b5290:	f080 8267 	bcs.w	b5762 <loop+0x4fe>
    delay(1000);
   b5294:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b5298:	f001 faea 	bl	b6870 <delay>
	StringSumHelper(const char *p) : String(p) {}
   b529c:	4998      	ldr	r1, [pc, #608]	; (b5500 <loop+0x29c>)
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   b529e:	4d99      	ldr	r5, [pc, #612]	; (b5504 <loop+0x2a0>)
   b52a0:	a81d      	add	r0, sp, #116	; 0x74
   b52a2:	f002 ff4e 	bl	b8142 <_ZN6StringC1EPK19__FlashStringHelper>
    request.path = "/api/1.0/ttpositions.aspx?key=00ff09063caa46748434d5fa321d048f&rt=" + railways.at(j).name + "&outputType=JSON";
   b52a6:	4621      	mov	r1, r4
   b52a8:	4650      	mov	r0, sl
   b52aa:	f7ff f8f7 	bl	b449c <_ZNSt6vectorI7RailwaySaIS0_EE2atEj>
   b52ae:	f100 0130 	add.w	r1, r0, #48	; 0x30
   b52b2:	a81d      	add	r0, sp, #116	; 0x74
   b52b4:	f002 ffc0 	bl	b8238 <_ZplRK15StringSumHelperRK6String>
   b52b8:	4993      	ldr	r1, [pc, #588]	; (b5508 <loop+0x2a4>)
   b52ba:	f002 ffc9 	bl	b8250 <_ZplRK15StringSumHelperPKc>
   b52be:	4601      	mov	r1, r0
   b52c0:	4892      	ldr	r0, [pc, #584]	; (b550c <loop+0x2a8>)
   b52c2:	f002 ff52 	bl	b816a <_ZN6StringaSERKS_>
class StringSumHelper : public String
   b52c6:	a81d      	add	r0, sp, #116	; 0x74
   b52c8:	f002 fef0 	bl	b80ac <_ZN6StringD1Ev>
   b52cc:	4b90      	ldr	r3, [pc, #576]	; (b5510 <loop+0x2ac>)
   b52ce:	4991      	ldr	r1, [pc, #580]	; (b5514 <loop+0x2b0>)
   b52d0:	4891      	ldr	r0, [pc, #580]	; (b5518 <loop+0x2b4>)
   b52d2:	9300      	str	r3, [sp, #0]
   b52d4:	462a      	mov	r2, r5
   b52d6:	4b91      	ldr	r3, [pc, #580]	; (b551c <loop+0x2b8>)
   b52d8:	f000 fa86 	bl	b57e8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
    Serial.println("parsing");
   b52dc:	f003 fbec 	bl	b8ab8 <_Z16_fetch_usbserialv>
   b52e0:	498f      	ldr	r1, [pc, #572]	; (b5520 <loop+0x2bc>)
   b52e2:	f002 feb4 	bl	b804e <_ZN5Print7printlnEPKc>
    parser.clear();
   b52e6:	488f      	ldr	r0, [pc, #572]	; (b5524 <loop+0x2c0>)
   b52e8:	f000 fc16 	bl	b5b18 <_ZN10JsonBuffer5clearEv>
	const char * c_str() const { return buffer; }
   b52ec:	6869      	ldr	r1, [r5, #4]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b52ee:	9103      	str	r1, [sp, #12]
   b52f0:	4608      	mov	r0, r1
   b52f2:	f004 fe39 	bl	b9f68 <strlen>
   b52f6:	9903      	ldr	r1, [sp, #12]
   b52f8:	4602      	mov	r2, r0
   b52fa:	488a      	ldr	r0, [pc, #552]	; (b5524 <loop+0x2c0>)
   b52fc:	f000 fbef 	bl	b5ade <_ZN10JsonBuffer7addDataEPKcj>
    if (!parser.parse()) {
   b5300:	4888      	ldr	r0, [pc, #544]	; (b5524 <loop+0x2c0>)
   b5302:	f000 ffa9 	bl	b6258 <_ZN10JsonParser5parseEv>
   b5306:	b948      	cbnz	r0, b531c <loop+0xb8>
      Serial.println("parsing failed");
   b5308:	f003 fbd6 	bl	b8ab8 <_Z16_fetch_usbserialv>
   b530c:	4986      	ldr	r1, [pc, #536]	; (b5528 <loop+0x2c4>)
}
   b530e:	b031      	add	sp, #196	; 0xc4
   b5310:	ecbd 8b06 	vpop	{d8-d10}
   b5314:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      Serial.println("parsing failed");
   b5318:	f002 be99 	b.w	b804e <_ZN5Print7printlnEPKc>
    Railway currentRailway = railways.at(j);
   b531c:	4621      	mov	r1, r4
   b531e:	4650      	mov	r0, sl
   b5320:	f7ff f8bc 	bl	b449c <_ZNSt6vectorI7RailwaySaIS0_EE2atEj>
   b5324:	4601      	mov	r1, r0
   b5326:	a81d      	add	r0, sp, #116	; 0x74
   b5328:	f7ff fb44 	bl	b49b4 <_ZN7RailwayC1ERKS_>
    std::vector<Checkpoint> currentCheckpoint = currentRailway.checkpoints;
   b532c:	a91d      	add	r1, sp, #116	; 0x74
   b532e:	a806      	add	r0, sp, #24
   b5330:	f7ff f890 	bl	b4454 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
    int count = 0;
   b5334:	f04f 0b00 	mov.w	fp, #0
      JsonReference train = parser.getReference().key("ctatt").key("route").index(0).key("train").index(count);
   b5338:	497a      	ldr	r1, [pc, #488]	; (b5524 <loop+0x2c0>)
   b533a:	a80c      	add	r0, sp, #48	; 0x30
   b533c:	f000 fc06 	bl	b5b4c <_ZNK10JsonParser12getReferenceEv>
   b5340:	4a7a      	ldr	r2, [pc, #488]	; (b552c <loop+0x2c8>)
   b5342:	a90c      	add	r1, sp, #48	; 0x30
   b5344:	a80f      	add	r0, sp, #60	; 0x3c
   b5346:	f000 fd81 	bl	b5e4c <_ZNK13JsonReference3keyEPKc>
   b534a:	4a79      	ldr	r2, [pc, #484]	; (b5530 <loop+0x2cc>)
   b534c:	a90f      	add	r1, sp, #60	; 0x3c
   b534e:	a812      	add	r0, sp, #72	; 0x48
   b5350:	f000 fd7c 	bl	b5e4c <_ZNK13JsonReference3keyEPKc>
   b5354:	2200      	movs	r2, #0
   b5356:	a912      	add	r1, sp, #72	; 0x48
   b5358:	a815      	add	r0, sp, #84	; 0x54
   b535a:	f000 fc65 	bl	b5c28 <_ZNK13JsonReference5indexEj>
   b535e:	4a75      	ldr	r2, [pc, #468]	; (b5534 <loop+0x2d0>)
   b5360:	a915      	add	r1, sp, #84	; 0x54
   b5362:	a819      	add	r0, sp, #100	; 0x64
   b5364:	f000 fd72 	bl	b5e4c <_ZNK13JsonReference3keyEPKc>
   b5368:	465a      	mov	r2, fp
   b536a:	a919      	add	r1, sp, #100	; 0x64
   b536c:	a809      	add	r0, sp, #36	; 0x24
   b536e:	f000 fc5b 	bl	b5c28 <_ZNK13JsonReference5indexEj>
   b5372:	a819      	add	r0, sp, #100	; 0x64
   b5374:	f000 fb62 	bl	b5a3c <_ZN13JsonReferenceD1Ev>
   b5378:	a815      	add	r0, sp, #84	; 0x54
   b537a:	f000 fb5f 	bl	b5a3c <_ZN13JsonReferenceD1Ev>
   b537e:	a812      	add	r0, sp, #72	; 0x48
   b5380:	f000 fb5c 	bl	b5a3c <_ZN13JsonReferenceD1Ev>
   b5384:	a80f      	add	r0, sp, #60	; 0x3c
   b5386:	f000 fb59 	bl	b5a3c <_ZN13JsonReferenceD1Ev>
   b538a:	a80c      	add	r0, sp, #48	; 0x30
   b538c:	f000 fb56 	bl	b5a3c <_ZN13JsonReferenceD1Ev>
      String nextStation = train.key("nextStaNm").valueString();
   b5390:	4a69      	ldr	r2, [pc, #420]	; (b5538 <loop+0x2d4>)
   b5392:	a909      	add	r1, sp, #36	; 0x24
   b5394:	a819      	add	r0, sp, #100	; 0x64
   b5396:	f000 fd59 	bl	b5e4c <_ZNK13JsonReference3keyEPKc>
   b539a:	a919      	add	r1, sp, #100	; 0x64
   b539c:	a815      	add	r0, sp, #84	; 0x54
   b539e:	f000 fd6f 	bl	b5e80 <_ZNK13JsonReference11valueStringEv>
   b53a2:	a819      	add	r0, sp, #100	; 0x64
   b53a4:	f000 fb4a 	bl	b5a3c <_ZN13JsonReferenceD1Ev>
      Serial.println(nextStation);
   b53a8:	f003 fb86 	bl	b8ab8 <_Z16_fetch_usbserialv>
   b53ac:	9915      	ldr	r1, [sp, #84]	; 0x54
   b53ae:	f002 fe4e 	bl	b804e <_ZN5Print7printlnEPKc>
      int trainDir = train.key("trDr").valueString().toInt();
   b53b2:	4a62      	ldr	r2, [pc, #392]	; (b553c <loop+0x2d8>)
   b53b4:	a909      	add	r1, sp, #36	; 0x24
   b53b6:	a812      	add	r0, sp, #72	; 0x48
   b53b8:	f000 fd48 	bl	b5e4c <_ZNK13JsonReference3keyEPKc>
   b53bc:	a912      	add	r1, sp, #72	; 0x48
   b53be:	a819      	add	r0, sp, #100	; 0x64
   b53c0:	f000 fd5e 	bl	b5e80 <_ZNK13JsonReference11valueStringEv>
   b53c4:	a819      	add	r0, sp, #100	; 0x64
   b53c6:	f002 ffa4 	bl	b8312 <_ZNK6String5toIntEv>
   b53ca:	9003      	str	r0, [sp, #12]
   b53cc:	a819      	add	r0, sp, #100	; 0x64
   b53ce:	f002 fe6d 	bl	b80ac <_ZN6StringD1Ev>
   b53d2:	a812      	add	r0, sp, #72	; 0x48
   b53d4:	f000 fb32 	bl	b5a3c <_ZN13JsonReferenceD1Ev>
      float lat = train.key("lat").valueString().toFloat();
   b53d8:	4a59      	ldr	r2, [pc, #356]	; (b5540 <loop+0x2dc>)
   b53da:	a909      	add	r1, sp, #36	; 0x24
   b53dc:	a812      	add	r0, sp, #72	; 0x48
   b53de:	f000 fd35 	bl	b5e4c <_ZNK13JsonReference3keyEPKc>
   b53e2:	a912      	add	r1, sp, #72	; 0x48
   b53e4:	a819      	add	r0, sp, #100	; 0x64
   b53e6:	f000 fd4b 	bl	b5e80 <_ZNK13JsonReference11valueStringEv>
   b53ea:	a819      	add	r0, sp, #100	; 0x64
   b53ec:	f002 ff96 	bl	b831c <_ZNK6String7toFloatEv>
   b53f0:	a819      	add	r0, sp, #100	; 0x64
   b53f2:	eef0 8a40 	vmov.f32	s17, s0
   b53f6:	f002 fe59 	bl	b80ac <_ZN6StringD1Ev>
   b53fa:	a812      	add	r0, sp, #72	; 0x48
   b53fc:	f000 fb1e 	bl	b5a3c <_ZN13JsonReferenceD1Ev>
      float lon = train.key("lon").valueString().toFloat();
   b5400:	4a50      	ldr	r2, [pc, #320]	; (b5544 <loop+0x2e0>)
   b5402:	a909      	add	r1, sp, #36	; 0x24
   b5404:	a812      	add	r0, sp, #72	; 0x48
   b5406:	f000 fd21 	bl	b5e4c <_ZNK13JsonReference3keyEPKc>
   b540a:	a912      	add	r1, sp, #72	; 0x48
   b540c:	a819      	add	r0, sp, #100	; 0x64
   b540e:	f000 fd37 	bl	b5e80 <_ZNK13JsonReference11valueStringEv>
   b5412:	a819      	add	r0, sp, #100	; 0x64
   b5414:	f002 ff82 	bl	b831c <_ZNK6String7toFloatEv>
   b5418:	a819      	add	r0, sp, #100	; 0x64
   b541a:	eeb0 8a40 	vmov.f32	s16, s0
   b541e:	f002 fe45 	bl	b80ac <_ZN6StringD1Ev>
   b5422:	a812      	add	r0, sp, #72	; 0x48
   b5424:	f000 fb0a 	bl	b5a3c <_ZN13JsonReferenceD1Ev>
      if(nextStation.length() <= 1){
   b5428:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b542a:	2b01      	cmp	r3, #1
   b542c:	f240 8169 	bls.w	b5702 <loop+0x49e>
   b5430:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   b5434:	1a9b      	subs	r3, r3, r2
   b5436:	ea4f 09e3 	mov.w	r9, r3, asr #3
      for(int i = 0; i < checkpointCount; i++){
   b543a:	2500      	movs	r5, #0
   b543c:	454d      	cmp	r5, r9
   b543e:	da42      	bge.n	b54c6 <loop+0x262>
        currentRailway.distances.at(i) = currentCheckpoint.at(i).getDistance(lat, lon);
   b5440:	4629      	mov	r1, r5
   b5442:	a806      	add	r0, sp, #24
   b5444:	f7ff f850 	bl	b44e8 <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj>
      return sqrt(pow((trainLat - lat), 2) + pow((trainLon - lon), 2));
   b5448:	edd0 7a00 	vldr	s15, [r0]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b544c:	ee78 7ae7 	vsub.f32	s15, s17, s15
        currentRailway.distances.at(i) = currentCheckpoint.at(i).getDistance(lat, lon);
   b5450:	4606      	mov	r6, r0
   b5452:	ee17 0a90 	vmov	r0, s15
   b5456:	f004 f95f 	bl	b9718 <__aeabi_f2d>
      return sqrt(pow((trainLat - lat), 2) + pow((trainLon - lon), 2));
   b545a:	edd6 7a01 	vldr	s15, [r6, #4]
   b545e:	ee78 7a67 	vsub.f32	s15, s16, s15
   b5462:	4602      	mov	r2, r0
   b5464:	460b      	mov	r3, r1
   b5466:	ee17 0a90 	vmov	r0, s15
   b546a:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b546e:	f004 f953 	bl	b9718 <__aeabi_f2d>
   b5472:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b5476:	ec41 0b19 	vmov	d9, r0, r1
   b547a:	4610      	mov	r0, r2
   b547c:	4619      	mov	r1, r3
   b547e:	f004 f9a3 	bl	b97c8 <__aeabi_dmul>
   b5482:	ec53 2b19 	vmov	r2, r3, d9
   b5486:	4606      	mov	r6, r0
   b5488:	460f      	mov	r7, r1
   b548a:	ee19 0a10 	vmov	r0, s18
   b548e:	4619      	mov	r1, r3
   b5490:	f004 f99a 	bl	b97c8 <__aeabi_dmul>
   b5494:	4602      	mov	r2, r0
   b5496:	460b      	mov	r3, r1
   b5498:	4630      	mov	r0, r6
   b549a:	4639      	mov	r1, r7
   b549c:	f003 ffde 	bl	b945c <__adddf3>
   b54a0:	ec41 0b10 	vmov	d0, r0, r1
   b54a4:	f003 fece 	bl	b9244 <sqrt>
        currentRailway.distances.at(i) = currentCheckpoint.at(i).getDistance(lat, lon);
   b54a8:	4629      	mov	r1, r5
   b54aa:	a820      	add	r0, sp, #128	; 0x80
      return sqrt(pow((trainLat - lat), 2) + pow((trainLon - lon), 2));
   b54ac:	ec57 6b10 	vmov	r6, r7, d0
        currentRailway.distances.at(i) = currentCheckpoint.at(i).getDistance(lat, lon);
   b54b0:	f7ff f808 	bl	b44c4 <_ZNSt6vectorIfSaIfEE2atEj>
      return sqrt(pow((trainLat - lat), 2) + pow((trainLon - lon), 2));
   b54b4:	4639      	mov	r1, r7
        currentRailway.distances.at(i) = currentCheckpoint.at(i).getDistance(lat, lon);
   b54b6:	4680      	mov	r8, r0
      return sqrt(pow((trainLat - lat), 2) + pow((trainLon - lon), 2));
   b54b8:	4630      	mov	r0, r6
   b54ba:	f004 fc55 	bl	b9d68 <__aeabi_d2f>
      for(int i = 0; i < checkpointCount; i++){
   b54be:	3501      	adds	r5, #1
      return sqrt(pow((trainLat - lat), 2) + pow((trainLon - lon), 2));
   b54c0:	f8c8 0000 	str.w	r0, [r8]
      for(int i = 0; i < checkpointCount; i++){
   b54c4:	e7ba      	b.n	b543c <loop+0x1d8>
      : _M_current(__i) { }
   b54c6:	e9dd 7120 	ldrd	r7, r1, [sp, #128]	; 0x80
    _GLIBCXX14_CONSTEXPR
    _ForwardIterator
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
		  _Compare __comp)
    {
      if (__first == __last)
   b54ca:	428f      	cmp	r7, r1
   b54cc:	d03e      	beq.n	b554c <loop+0x2e8>
   b54ce:	1d3b      	adds	r3, r7, #4
   b54d0:	463e      	mov	r6, r7
	return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
   b54d2:	4299      	cmp	r1, r3
	++_M_current;
   b54d4:	461a      	mov	r2, r3
   b54d6:	d03a      	beq.n	b554e <loop+0x2ea>
	if (__comp(__first, __result))
   b54d8:	edd6 7a00 	vldr	s15, [r6]
   b54dc:	ed92 7a00 	vldr	s14, [r2]
   b54e0:	eeb4 7a67 	vcmp.f32	s14, s15
   b54e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b54e8:	f103 0304 	add.w	r3, r3, #4
   b54ec:	bf48      	it	mi
   b54ee:	4616      	movmi	r6, r2
   b54f0:	e7ef      	b.n	b54d2 <loop+0x26e>
   b54f2:	bf00      	nop
   b54f4:	000bc189 	.word	0x000bc189
   b54f8:	200357b0 	.word	0x200357b0
   b54fc:	286bca1b 	.word	0x286bca1b
   b5500:	000bc194 	.word	0x000bc194
   b5504:	2003e684 	.word	0x2003e684
   b5508:	000bc1d7 	.word	0x000bc1d7
   b550c:	2003e660 	.word	0x2003e660
   b5510:	000bc1e8 	.word	0x000bc1e8
   b5514:	2003e638 	.word	0x2003e638
   b5518:	20035808 	.word	0x20035808
   b551c:	20035584 	.word	0x20035584
   b5520:	000bc1ec 	.word	0x000bc1ec
   b5524:	20038024 	.word	0x20038024
   b5528:	000bc1f4 	.word	0x000bc1f4
   b552c:	000bc203 	.word	0x000bc203
   b5530:	000bc209 	.word	0x000bc209
   b5534:	000bc20f 	.word	0x000bc20f
   b5538:	000bc215 	.word	0x000bc215
   b553c:	000bc21f 	.word	0x000bc21f
   b5540:	000bc224 	.word	0x000bc224
   b5544:	000bc228 	.word	0x000bc228
   b5548:	2003e5e0 	.word	0x2003e5e0
   b554c:	463e      	mov	r6, r7
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b554e:	1bf5      	subs	r5, r6, r7
   b5550:	10ad      	asrs	r5, r5, #2
      x1 = currentCheckpoint.at(closestIndex).lat;
   b5552:	4629      	mov	r1, r5
   b5554:	a806      	add	r0, sp, #24
   b5556:	f7fe ffc7 	bl	b44e8 <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj>
   b555a:	edd0 7a00 	vldr	s15, [r0]
      y1 = currentCheckpoint.at(closestIndex).lon;
   b555e:	ed90 9a01 	vldr	s18, [r0, #4]
      if(currentCheckpoint.at(closestIndex).lat > lat){
   b5562:	eef4 8ae7 	vcmpe.f32	s17, s15
   b5566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b556a:	ee37 aae8 	vsub.f32	s20, s15, s17
        slope = (y - y1) / (x - x1);
   b556e:	bf55      	itete	pl
   b5570:	ee38 7a49 	vsubpl.f32	s14, s16, s18
        slope = (y1 - y) / (x1 - x);
   b5574:	ee79 7a48 	vsubmi.f32	s15, s18, s16
        slope = (y - y1) / (x - x1);
   b5578:	ee78 7ae7 	vsubpl.f32	s15, s17, s15
        slope = (y1 - y) / (x1 - x);
   b557c:	eec7 6a8a 	vdivmi.f32	s13, s15, s20
        slope = (y - y1) / (x - x1);
   b5580:	bf58      	it	pl
   b5582:	eec7 6a27 	vdivpl.f32	s13, s14, s15
      if(closestIndex == 0){
   b5586:	42b7      	cmp	r7, r6
        pointSide = (-1 / slope * (currentCheckpoint.at(closestIndex + 1).lat - x) + y) > currentCheckpoint.at(closestIndex + 1).lon;
   b5588:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b558c:	eec7 9aa6 	vdiv.f32	s19, s15, s13
      if(closestIndex == 0){
   b5590:	d14c      	bne.n	b562c <loop+0x3c8>
        pointSide = (-1 / slope * (currentCheckpoint.at(closestIndex + 1).lat - x) + y) > currentCheckpoint.at(closestIndex + 1).lon;
   b5592:	1c69      	adds	r1, r5, #1
   b5594:	a806      	add	r0, sp, #24
   b5596:	f7fe ffa7 	bl	b44e8 <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj>
   b559a:	ed90 0a00 	vldr	s0, [r0]
   b559e:	edd0 7a01 	vldr	s15, [r0, #4]
   b55a2:	ee70 8a68 	vsub.f32	s17, s0, s17
   b55a6:	eeb0 7a48 	vmov.f32	s14, s16
   b55aa:	eea8 7aa9 	vfma.f32	s14, s17, s19
        nearestSide = (-1 / slope * (currentCheckpoint.at(closestIndex).lat - x) + y) > currentCheckpoint.at(closestIndex).lon;
   b55ae:	eeaa 8a29 	vfma.f32	s16, s20, s19
        pointSide = (-1 / slope * (currentCheckpoint.at(closestIndex + 1).lat - x) + y) > currentCheckpoint.at(closestIndex + 1).lon;
   b55b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b55b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        nearestSide = (-1 / slope * (currentCheckpoint.at(closestIndex).lat - x) + y) > currentCheckpoint.at(closestIndex).lon;
   b55ba:	eeb4 8ac9 	vcmpe.f32	s16, s18
        pointSide = (-1 / slope * (currentCheckpoint.at(closestIndex + 1).lat - x) + y) > currentCheckpoint.at(closestIndex + 1).lon;
   b55be:	bfcc      	ite	gt
   b55c0:	2301      	movgt	r3, #1
   b55c2:	2300      	movle	r3, #0
        nearestSide = (-1 / slope * (currentCheckpoint.at(closestIndex).lat - x) + y) > currentCheckpoint.at(closestIndex).lon;
   b55c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        if(pointSide == nearestSide){
   b55c8:	bfcc      	ite	gt
   b55ca:	2201      	movgt	r2, #1
   b55cc:	2200      	movle	r2, #0
   b55ce:	429a      	cmp	r2, r3
   b55d0:	f000 808e 	beq.w	b56f0 <loop+0x48c>
          secondClosestIndex = 1;
   b55d4:	2601      	movs	r6, #1
        if(closestIndex < secondClosestIndex){
   b55d6:	42ae      	cmp	r6, r5
   b55d8:	dd54      	ble.n	b5684 <loop+0x420>
          segmentPos = currentRailway.distances.at(closestIndex) / (currentRailway.distances.at(closestIndex) + currentRailway.distances.at(secondClosestIndex));
   b55da:	4629      	mov	r1, r5
   b55dc:	a820      	add	r0, sp, #128	; 0x80
   b55de:	f7fe ff71 	bl	b44c4 <_ZNSt6vectorIfSaIfEE2atEj>
   b55e2:	4631      	mov	r1, r6
   b55e4:	edd0 8a00 	vldr	s17, [r0]
   b55e8:	a820      	add	r0, sp, #128	; 0x80
   b55ea:	f7fe ff6b 	bl	b44c4 <_ZNSt6vectorIfSaIfEE2atEj>
   b55ee:	edd0 7a00 	vldr	s15, [r0]
   b55f2:	ee78 7aa7 	vadd.f32	s15, s17, s15
          segmentPos *= currentRailway.scalers.at(closestIndex);
   b55f6:	4629      	mov	r1, r5
          segmentPos = currentRailway.distances.at(closestIndex) / (currentRailway.distances.at(closestIndex) + currentRailway.distances.at(secondClosestIndex));
   b55f8:	ee88 9aa7 	vdiv.f32	s18, s17, s15
          segmentPos *= currentRailway.scalers.at(closestIndex);
   b55fc:	a823      	add	r0, sp, #140	; 0x8c
   b55fe:	f7fe ff85 	bl	b450c <_ZNSt6vectorIiSaIiEE2atEj>
          for(int i = 0; i < closestIndex; i++){
   b5602:	2600      	movs	r6, #0
          segmentPos *= currentRailway.scalers.at(closestIndex);
   b5604:	ed90 8a00 	vldr	s16, [r0]
   b5608:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   b560c:	ee28 8a09 	vmul.f32	s16, s16, s18
          for(int i = 0; i < closestIndex; i++){
   b5610:	42ae      	cmp	r6, r5
   b5612:	da60      	bge.n	b56d6 <loop+0x472>
            segmentPos += currentRailway.scalers.at(i);
   b5614:	4631      	mov	r1, r6
   b5616:	a823      	add	r0, sp, #140	; 0x8c
   b5618:	f7fe ff78 	bl	b450c <_ZNSt6vectorIiSaIiEE2atEj>
   b561c:	edd0 7a00 	vldr	s15, [r0]
   b5620:	eef8 7ae7 	vcvt.f32.s32	s15, s15
          for(int i = 0; i < closestIndex; i++){
   b5624:	3601      	adds	r6, #1
            segmentPos += currentRailway.scalers.at(i);
   b5626:	ee38 8a27 	vadd.f32	s16, s16, s15
          for(int i = 0; i < closestIndex; i++){
   b562a:	e7f1      	b.n	b5610 <loop+0x3ac>
        pointSide = (-1 / slope * (currentCheckpoint.at(closestIndex - 1).lat - x) + y) > currentCheckpoint.at(closestIndex - 1).lon;
   b562c:	1e6e      	subs	r6, r5, #1
   b562e:	4631      	mov	r1, r6
   b5630:	a806      	add	r0, sp, #24
   b5632:	f7fe ff59 	bl	b44e8 <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj>
   b5636:	ed90 0a00 	vldr	s0, [r0]
   b563a:	edd0 7a01 	vldr	s15, [r0, #4]
   b563e:	ee70 8a68 	vsub.f32	s17, s0, s17
   b5642:	eeb0 7a48 	vmov.f32	s14, s16
   b5646:	eea8 7aa9 	vfma.f32	s14, s17, s19
        if(closestIndex == checkpointCount - 1){
   b564a:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
        nearestSide = (-1 / slope * (currentCheckpoint.at(closestIndex).lat - x) + y) > currentCheckpoint.at(closestIndex).lon;
   b564e:	eeaa 8a29 	vfma.f32	s16, s20, s19
        pointSide = (-1 / slope * (currentCheckpoint.at(closestIndex - 1).lat - x) + y) > currentCheckpoint.at(closestIndex - 1).lon;
   b5652:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b5656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        nearestSide = (-1 / slope * (currentCheckpoint.at(closestIndex).lat - x) + y) > currentCheckpoint.at(closestIndex).lon;
   b565a:	eeb4 8ac9 	vcmpe.f32	s16, s18
        pointSide = (-1 / slope * (currentCheckpoint.at(closestIndex - 1).lat - x) + y) > currentCheckpoint.at(closestIndex - 1).lon;
   b565e:	bfcc      	ite	gt
   b5660:	2201      	movgt	r2, #1
   b5662:	2200      	movle	r2, #0
        nearestSide = (-1 / slope * (currentCheckpoint.at(closestIndex).lat - x) + y) > currentCheckpoint.at(closestIndex).lon;
   b5664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5668:	bfcc      	ite	gt
   b566a:	2301      	movgt	r3, #1
   b566c:	2300      	movle	r3, #0
        if(closestIndex == checkpointCount - 1){
   b566e:	42a9      	cmp	r1, r5
   b5670:	d104      	bne.n	b567c <loop+0x418>
          if(pointSide == nearestSide){
   b5672:	429a      	cmp	r2, r3
   b5674:	d03c      	beq.n	b56f0 <loop+0x48c>
            secondClosestIndex = checkpointCount - 2;
   b5676:	f1a9 0602 	sub.w	r6, r9, #2
      if(validTrain){
   b567a:	e7ac      	b.n	b55d6 <loop+0x372>
          if(pointSide == nearestSide){
   b567c:	429a      	cmp	r2, r3
            secondClosestIndex = closestIndex + 1;
   b567e:	bf08      	it	eq
   b5680:	1c6e      	addeq	r6, r5, #1
      if(validTrain){
   b5682:	e7a8      	b.n	b55d6 <loop+0x372>
          segmentPos = currentRailway.distances.at(secondClosestIndex) / (currentRailway.distances.at(closestIndex) + currentRailway.distances.at(secondClosestIndex));
   b5684:	4631      	mov	r1, r6
   b5686:	a820      	add	r0, sp, #128	; 0x80
   b5688:	f7fe ff1c 	bl	b44c4 <_ZNSt6vectorIfSaIfEE2atEj>
   b568c:	4629      	mov	r1, r5
   b568e:	edd0 8a00 	vldr	s17, [r0]
   b5692:	a820      	add	r0, sp, #128	; 0x80
   b5694:	f7fe ff16 	bl	b44c4 <_ZNSt6vectorIfSaIfEE2atEj>
   b5698:	edd0 7a00 	vldr	s15, [r0]
   b569c:	ee78 7aa7 	vadd.f32	s15, s17, s15
          segmentPos *= currentRailway.scalers.at(secondClosestIndex);
   b56a0:	4631      	mov	r1, r6
          segmentPos = currentRailway.distances.at(secondClosestIndex) / (currentRailway.distances.at(closestIndex) + currentRailway.distances.at(secondClosestIndex));
   b56a2:	ee88 9aa7 	vdiv.f32	s18, s17, s15
          segmentPos *= currentRailway.scalers.at(secondClosestIndex);
   b56a6:	a823      	add	r0, sp, #140	; 0x8c
   b56a8:	f7fe ff30 	bl	b450c <_ZNSt6vectorIiSaIiEE2atEj>
          for(int i = 0; i < secondClosestIndex; i++){
   b56ac:	2500      	movs	r5, #0
          segmentPos *= currentRailway.scalers.at(secondClosestIndex);
   b56ae:	ed90 8a00 	vldr	s16, [r0]
   b56b2:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   b56b6:	ee28 8a09 	vmul.f32	s16, s16, s18
          for(int i = 0; i < secondClosestIndex; i++){
   b56ba:	42b5      	cmp	r5, r6
   b56bc:	da0b      	bge.n	b56d6 <loop+0x472>
            segmentPos += currentRailway.scalers.at(i);
   b56be:	4629      	mov	r1, r5
   b56c0:	a823      	add	r0, sp, #140	; 0x8c
   b56c2:	f7fe ff23 	bl	b450c <_ZNSt6vectorIiSaIiEE2atEj>
   b56c6:	edd0 7a00 	vldr	s15, [r0]
   b56ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
          for(int i = 0; i < secondClosestIndex; i++){
   b56ce:	3501      	adds	r5, #1
            segmentPos += currentRailway.scalers.at(i);
   b56d0:	ee38 8a27 	vadd.f32	s16, s16, s15
          for(int i = 0; i < secondClosestIndex; i++){
   b56d4:	e7f1      	b.n	b56ba <loop+0x456>
  { return __builtin_floorf(__x); }
   b56d6:	eeb0 0a48 	vmov.f32	s0, s16
   b56da:	f003 fd6d 	bl	b91b8 <floorf>
        currentRailway.outputs.at((int)floor(segmentPos)) = trainDir;
   b56de:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b56e2:	a826      	add	r0, sp, #152	; 0x98
   b56e4:	ee17 1a90 	vmov	r1, s15
   b56e8:	f7fe ff10 	bl	b450c <_ZNSt6vectorIiSaIiEE2atEj>
   b56ec:	9b03      	ldr	r3, [sp, #12]
   b56ee:	6003      	str	r3, [r0, #0]
      String nextStation = train.key("nextStaNm").valueString();
   b56f0:	a815      	add	r0, sp, #84	; 0x54
   b56f2:	f002 fcdb 	bl	b80ac <_ZN6StringD1Ev>
      JsonReference train = parser.getReference().key("ctatt").key("route").index(0).key("train").index(count);
   b56f6:	a809      	add	r0, sp, #36	; 0x24
      count++;
   b56f8:	f10b 0b01 	add.w	fp, fp, #1
      JsonReference train = parser.getReference().key("ctatt").key("route").index(0).key("train").index(count);
   b56fc:	f000 f99e 	bl	b5a3c <_ZN13JsonReferenceD1Ev>
   b5700:	e61a      	b.n	b5338 <loop+0xd4>
   b5702:	a815      	add	r0, sp, #84	; 0x54
   b5704:	f002 fcd2 	bl	b80ac <_ZN6StringD1Ev>
   b5708:	a809      	add	r0, sp, #36	; 0x24
   b570a:	f000 f997 	bl	b5a3c <_ZN13JsonReferenceD1Ev>
    Wire.beginTransmission(addressArr[j]);
   b570e:	f003 fb21 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b5712:	9b02      	ldr	r3, [sp, #8]
   b5714:	f853 1b04 	ldr.w	r1, [r3], #4
   b5718:	9302      	str	r3, [sp, #8]
   b571a:	f002 fb0b 	bl	b7d34 <_ZN7TwoWire17beginTransmissionEi>
    for(int i = 0; i < RED_NUM_PIXELS; i++){
   b571e:	2500      	movs	r5, #0
      currentRailway.outputs.at(i) = 0;
   b5720:	462f      	mov	r7, r5
      Wire.write((char)currentRailway.outputs.at(i) + '0');
   b5722:	f003 fb17 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b5726:	4629      	mov	r1, r5
   b5728:	4606      	mov	r6, r0
   b572a:	a826      	add	r0, sp, #152	; 0x98
   b572c:	f7fe feee 	bl	b450c <_ZNSt6vectorIiSaIiEE2atEj>
   b5730:	7801      	ldrb	r1, [r0, #0]
   b5732:	4630      	mov	r0, r6
   b5734:	3130      	adds	r1, #48	; 0x30
   b5736:	f7fe fcf9 	bl	b412c <_ZN7TwoWire5writeEi.isra.0>
      currentRailway.outputs.at(i) = 0;
   b573a:	4629      	mov	r1, r5
   b573c:	a826      	add	r0, sp, #152	; 0x98
   b573e:	f7fe fee5 	bl	b450c <_ZNSt6vectorIiSaIiEE2atEj>
    for(int i = 0; i < RED_NUM_PIXELS; i++){
   b5742:	3501      	adds	r5, #1
   b5744:	2d28      	cmp	r5, #40	; 0x28
      currentRailway.outputs.at(i) = 0;
   b5746:	6007      	str	r7, [r0, #0]
    for(int i = 0; i < RED_NUM_PIXELS; i++){
   b5748:	d1eb      	bne.n	b5722 <loop+0x4be>
    Wire.endTransmission();
   b574a:	f003 fb03 	bl	b8d54 <_Z19__fetch_global_Wirev>
   b574e:	f002 faf8 	bl	b7d42 <_ZN7TwoWire15endTransmissionEv>
      }
   b5752:	a806      	add	r0, sp, #24
   b5754:	f7fe fdcc 	bl	b42f0 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
    Railway currentRailway = railways.at(j);
   b5758:	a81d      	add	r0, sp, #116	; 0x74
   b575a:	f7fe fdfa 	bl	b4352 <_ZN7RailwayD1Ev>
  for(int j = 0; j < railways.size(); j++){
   b575e:	3401      	adds	r4, #1
   b5760:	e58f      	b.n	b5282 <loop+0x1e>
  delay(5000);
   b5762:	f241 3088 	movw	r0, #5000	; 0x1388
   b5766:	f001 f883 	bl	b6870 <delay>
  Serial.println();
   b576a:	f003 f9a5 	bl	b8ab8 <_Z16_fetch_usbserialv>
}
   b576e:	b031      	add	sp, #196	; 0xc4
   b5770:	ecbd 8b06 	vpop	{d8-d10}
   b5774:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Serial.println();
   b5778:	f002 bc5d 	b.w	b8036 <_ZN5Print7printlnEv>

000b577c <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b577c:	b510      	push	{r4, lr}
   b577e:	4604      	mov	r4, r0
   b5780:	f003 f8cc 	bl	b891c <_ZN9TCPClientC1Ev>
{

}
   b5784:	4620      	mov	r0, r4
   b5786:	bd10      	pop	{r4, pc}

000b5788 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b5788:	b538      	push	{r3, r4, r5, lr}
   b578a:	4604      	mov	r4, r0
   b578c:	4615      	mov	r5, r2
    client.print(aHeaderName);
   b578e:	f002 fc4b 	bl	b8028 <_ZN5Print5printEPKc>
    client.print(": ");
   b5792:	4905      	ldr	r1, [pc, #20]	; (b57a8 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   b5794:	4620      	mov	r0, r4
   b5796:	f002 fc47 	bl	b8028 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b579a:	4629      	mov	r1, r5
   b579c:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b579e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
   b57a2:	f002 bc54 	b.w	b804e <_ZN5Print7printlnEPKc>
   b57a6:	bf00      	nop
   b57a8:	000bbfad 	.word	0x000bbfad

000b57ac <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b57ac:	b538      	push	{r3, r4, r5, lr}
   b57ae:	4605      	mov	r5, r0
   b57b0:	4614      	mov	r4, r2
    client.print(aHeaderName);
   b57b2:	f002 fc39 	bl	b8028 <_ZN5Print5printEPKc>
    client.print(": ");
   b57b6:	490b      	ldr	r1, [pc, #44]	; (b57e4 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   b57b8:	4628      	mov	r0, r5
   b57ba:	f002 fc35 	bl	b8028 <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
   b57be:	2c00      	cmp	r4, #0
   b57c0:	da0d      	bge.n	b57de <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
   b57c2:	212d      	movs	r1, #45	; 0x2d
   b57c4:	4628      	mov	r0, r5
   b57c6:	f002 fc33 	bl	b8030 <_ZN5Print5printEc>
            val = -n;
   b57ca:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b57cc:	4628      	mov	r0, r5
   b57ce:	220a      	movs	r2, #10
   b57d0:	f002 fc47 	bl	b8062 <_ZN5Print11printNumberEmh>
        n += println();
   b57d4:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b57d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b57da:	f002 bc2c 	b.w	b8036 <_ZN5Print7printlnEv>
            val = n;
   b57de:	4621      	mov	r1, r4
   b57e0:	e7f4      	b.n	b57cc <_ZN10HttpClient10sendHeaderEPKci+0x20>
   b57e2:	bf00      	nop
   b57e4:	000bbfad 	.word	0x000bbfad

000b57e8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b57e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b57ec:	460e      	mov	r6, r1
   b57ee:	b091      	sub	sp, #68	; 0x44
   b57f0:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b57f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b57f6:	6013      	str	r3, [r2, #0]
{
   b57f8:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b57fa:	2100      	movs	r1, #0
   b57fc:	4630      	mov	r0, r6
   b57fe:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b5802:	4617      	mov	r7, r2
   b5804:	f002 fd39 	bl	b827a <_ZNK6String6equalsEPKc>
   b5808:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b580c:	4603      	mov	r3, r0
   b580e:	b998      	cbnz	r0, b5838 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	const char * c_str() const { return buffer; }
   b5810:	f1be 0f00 	cmp.w	lr, #0
   b5814:	bf14      	ite	ne
   b5816:	4672      	movne	r2, lr
   b5818:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b581a:	6831      	ldr	r1, [r6, #0]
   b581c:	b292      	uxth	r2, r2
   b581e:	4620      	mov	r0, r4
   b5820:	f002 fe7c 	bl	b851c <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b5824:	1e05      	subs	r5, r0, #0
   b5826:	bf18      	it	ne
   b5828:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   b582a:	b9c5      	cbnz	r5, b585e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   b582c:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b582e:	b011      	add	sp, #68	; 0x44
   b5830:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b5834:	f003 b828 	b.w	b8888 <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b5838:	4b76      	ldr	r3, [pc, #472]	; (b5a14 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
   b583a:	930a      	str	r3, [sp, #40]	; 0x28
   b583c:	f106 0c14 	add.w	ip, r6, #20
   b5840:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5844:	ad0b      	add	r5, sp, #44	; 0x2c
   b5846:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5848:	f8dc 3000 	ldr.w	r3, [ip]
   b584c:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b584e:	fa1f f28e 	uxth.w	r2, lr
   b5852:	2300      	movs	r3, #0
   b5854:	a90a      	add	r1, sp, #40	; 0x28
   b5856:	4620      	mov	r0, r4
   b5858:	f002 ff40 	bl	b86dc <_ZN9TCPClient7connectE9IPAddresstm>
   b585c:	e7e2      	b.n	b5824 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
   b585e:	4649      	mov	r1, r9
   b5860:	4620      	mov	r0, r4
   b5862:	f002 fbe1 	bl	b8028 <_ZN5Print5printEPKc>
    client.print(" ");
   b5866:	496c      	ldr	r1, [pc, #432]	; (b5a18 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   b5868:	4620      	mov	r0, r4
   b586a:	f002 fbdd 	bl	b8028 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b586e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b5870:	4620      	mov	r0, r4
   b5872:	f002 fbd9 	bl	b8028 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b5876:	4969      	ldr	r1, [pc, #420]	; (b5a1c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   b5878:	4620      	mov	r0, r4
   b587a:	f002 fbd5 	bl	b8028 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b587e:	4968      	ldr	r1, [pc, #416]	; (b5a20 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
   b5880:	4a68      	ldr	r2, [pc, #416]	; (b5a24 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
   b5882:	4620      	mov	r0, r4
   b5884:	f7ff ff80 	bl	b5788 <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b5888:	2100      	movs	r1, #0
   b588a:	4630      	mov	r0, r6
   b588c:	f002 fcf5 	bl	b827a <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b5890:	b920      	cbnz	r0, b589c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   b5892:	6832      	ldr	r2, [r6, #0]
   b5894:	4964      	ldr	r1, [pc, #400]	; (b5a28 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
   b5896:	4620      	mov	r0, r4
   b5898:	f7ff ff76 	bl	b5788 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b589c:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b58a0:	2100      	movs	r1, #0
   b58a2:	4650      	mov	r0, sl
   b58a4:	f002 fce9 	bl	b827a <_ZNK6String6equalsEPKc>
   b58a8:	b928      	cbnz	r0, b58b6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
   b58aa:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b58ac:	495f      	ldr	r1, [pc, #380]	; (b5a2c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
   b58ae:	4620      	mov	r0, r4
   b58b0:	f7ff ff7c 	bl	b57ac <_ZN10HttpClient10sendHeaderEPKci>
   b58b4:	e006      	b.n	b58c4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b58b6:	495e      	ldr	r1, [pc, #376]	; (b5a30 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
   b58b8:	4648      	mov	r0, r9
   b58ba:	f004 fb43 	bl	b9f44 <strcmp>
   b58be:	4602      	mov	r2, r0
   b58c0:	2800      	cmp	r0, #0
   b58c2:	d0f3      	beq.n	b58ac <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
   b58c4:	f1b8 0f00 	cmp.w	r8, #0
   b58c8:	d00e      	beq.n	b58e8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
   b58ca:	f8d8 1000 	ldr.w	r1, [r8]
   b58ce:	b159      	cbz	r1, b58e8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
   b58d0:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
   b58d4:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b58d6:	b122      	cbz	r2, b58e2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
   b58d8:	f7ff ff56 	bl	b5788 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b58dc:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
   b58e0:	e7f3      	b.n	b58ca <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
   b58e2:	f002 fbb4 	bl	b804e <_ZN5Print7printlnEPKc>
}
   b58e6:	e7f9      	b.n	b58dc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
   b58e8:	4620      	mov	r0, r4
   b58ea:	f002 fba4 	bl	b8036 <_ZN5Print7printlnEv>
    client.flush();
   b58ee:	4620      	mov	r0, r4
   b58f0:	f002 fd74 	bl	b83dc <_ZN9TCPClient5flushEv>
   b58f4:	2100      	movs	r1, #0
   b58f6:	4650      	mov	r0, sl
   b58f8:	f002 fcbf 	bl	b827a <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b58fc:	b918      	cbnz	r0, b5906 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
   b58fe:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b5900:	4620      	mov	r0, r4
   b5902:	f002 fba4 	bl	b804e <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b5906:	f104 0a1c 	add.w	sl, r4, #28
   b590a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
   b590e:	2100      	movs	r1, #0
   b5910:	4650      	mov	r0, sl
   b5912:	f004 fae0 	bl	b9ed6 <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5916:	f000 fd97 	bl	b6448 <HAL_Timer_Get_Milli_Seconds>
   b591a:	9001      	str	r0, [sp, #4]
   b591c:	f000 fd94 	bl	b6448 <HAL_Timer_Get_Milli_Seconds>
    bool error = false;
   b5920:	f04f 0800 	mov.w	r8, #0
    unsigned int bufferPosition = 0;
   b5924:	4646      	mov	r6, r8
    } while (client.connected() && !timeout && !error);
   b5926:	f241 3b88 	movw	fp, #5000	; 0x1388
        while (client.available()) {
   b592a:	4620      	mov	r0, r4
   b592c:	f002 ff52 	bl	b87d4 <_ZN9TCPClient9availableEv>
   b5930:	b1e8      	cbz	r0, b596e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x186>
            char c = client.read();
   b5932:	4620      	mov	r0, r4
   b5934:	f002 fd38 	bl	b83a8 <_ZN9TCPClient4readEv>
   b5938:	4681      	mov	r9, r0
   b593a:	f000 fd85 	bl	b6448 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b593e:	f242 73fe 	movw	r3, #10238	; 0x27fe
   b5942:	429e      	cmp	r6, r3
   b5944:	9001      	str	r0, [sp, #4]
   b5946:	d804      	bhi.n	b5952 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = c;
   b5948:	19a3      	adds	r3, r4, r6
            char c = client.read();
   b594a:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
   b594e:	3601      	adds	r6, #1
        while (client.available()) {
   b5950:	e7eb      	b.n	b592a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b5952:	f242 73ff 	movw	r3, #10239	; 0x27ff
   b5956:	429e      	cmp	r6, r3
   b5958:	d1f9      	bne.n	b594e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b595a:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
   b595e:	2200      	movs	r2, #0
   b5960:	f883 281b 	strb.w	r2, [r3, #2075]	; 0x81b
                client.stop();
   b5964:	4620      	mov	r0, r4
   b5966:	f002 ff8f 	bl	b8888 <_ZN9TCPClient4stopEv>
                error = true;
   b596a:	46a8      	mov	r8, r5
   b596c:	e7ef      	b.n	b594e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b596e:	19a3      	adds	r3, r4, r6
   b5970:	7718      	strb	r0, [r3, #28]
   b5972:	f000 fd69 	bl	b6448 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b5976:	9b01      	ldr	r3, [sp, #4]
   b5978:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b597c:	f1b8 0f00 	cmp.w	r8, #0
   b5980:	d104      	bne.n	b598c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
   b5982:	45d9      	cmp	r9, fp
   b5984:	d802      	bhi.n	b598c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
            delay(200);
   b5986:	20c8      	movs	r0, #200	; 0xc8
   b5988:	f000 ff72 	bl	b6870 <delay>
    } while (client.connected() && !timeout && !error);
   b598c:	4620      	mov	r0, r4
   b598e:	f002 fe43 	bl	b8618 <_ZN9TCPClient9connectedEv>
   b5992:	b120      	cbz	r0, b599e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b5994:	45d9      	cmp	r9, fp
   b5996:	d802      	bhi.n	b599e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b5998:	f1b8 0f00 	cmp.w	r8, #0
   b599c:	d0c5      	beq.n	b592a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
    client.stop();
   b599e:	4620      	mov	r0, r4
   b59a0:	f002 ff72 	bl	b8888 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b59a4:	4651      	mov	r1, sl
   b59a6:	a802      	add	r0, sp, #8
   b59a8:	f002 fbcb 	bl	b8142 <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b59ac:	230c      	movs	r3, #12
   b59ae:	2209      	movs	r2, #9
   b59b0:	a902      	add	r1, sp, #8
   b59b2:	a806      	add	r0, sp, #24
   b59b4:	f002 fc86 	bl	b82c4 <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b59b8:	491e      	ldr	r1, [pc, #120]	; (b5a34 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x24c>)
   b59ba:	a80a      	add	r0, sp, #40	; 0x28
   b59bc:	f002 fbc1 	bl	b8142 <_ZN6StringC1EPK19__FlashStringHelper>
   b59c0:	a90a      	add	r1, sp, #40	; 0x28
   b59c2:	a802      	add	r0, sp, #8
   b59c4:	f002 fc7a 	bl	b82bc <_ZNK6String7indexOfERKS_>
   b59c8:	4604      	mov	r4, r0
   b59ca:	a80a      	add	r0, sp, #40	; 0x28
   b59cc:	f002 fb6e 	bl	b80ac <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b59d0:	1c63      	adds	r3, r4, #1
   b59d2:	d108      	bne.n	b59e6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fe>
    String statusCode = raw_response.substring(9,12);
   b59d4:	a806      	add	r0, sp, #24
   b59d6:	f002 fb69 	bl	b80ac <_ZN6StringD1Ev>
    String raw_response(buffer);
   b59da:	a802      	add	r0, sp, #8
   b59dc:	f002 fb66 	bl	b80ac <_ZN6StringD1Ev>
}
   b59e0:	b011      	add	sp, #68	; 0x44
   b59e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aResponse.body = "";
   b59e6:	1d3d      	adds	r5, r7, #4
   b59e8:	4913      	ldr	r1, [pc, #76]	; (b5a38 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x250>)
   b59ea:	4628      	mov	r0, r5
   b59ec:	f002 fbd7 	bl	b819e <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b59f0:	1d22      	adds	r2, r4, #4
   b59f2:	a902      	add	r1, sp, #8
   b59f4:	a80a      	add	r0, sp, #40	; 0x28
   b59f6:	f002 fc85 	bl	b8304 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b59fa:	a90a      	add	r1, sp, #40	; 0x28
   b59fc:	4628      	mov	r0, r5
   b59fe:	f002 fc0a 	bl	b8216 <_ZN6String6concatERKS_>
   b5a02:	a80a      	add	r0, sp, #40	; 0x28
   b5a04:	f002 fb52 	bl	b80ac <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b5a08:	9806      	ldr	r0, [sp, #24]
   b5a0a:	f004 fa24 	bl	b9e56 <atoi>
   b5a0e:	6038      	str	r0, [r7, #0]
   b5a10:	e7e0      	b.n	b59d4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ec>
   b5a12:	bf00      	nop
   b5a14:	000bc514 	.word	0x000bc514
   b5a18:	000bc723 	.word	0x000bc723
   b5a1c:	000bc258 	.word	0x000bc258
   b5a20:	000bc26a 	.word	0x000bc26a
   b5a24:	000bc264 	.word	0x000bc264
   b5a28:	000bc275 	.word	0x000bc275
   b5a2c:	000bc27a 	.word	0x000bc27a
   b5a30:	000bc289 	.word	0x000bc289
   b5a34:	000bc28e 	.word	0x000bc28e
   b5a38:	000bc292 	.word	0x000bc292

000b5a3c <_ZN13JsonReferenceD1Ev>:
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
}
   b5a3c:	4770      	bx	lr

000b5a3e <_ZN13JsonReferenceD0Ev>:
JsonReference::~JsonReference() {
   b5a3e:	b510      	push	{r4, lr}
}
   b5a40:	210c      	movs	r1, #12
JsonReference::~JsonReference() {
   b5a42:	4604      	mov	r4, r0
}
   b5a44:	f7fe fb2b 	bl	b409e <_ZdlPvj>
   b5a48:	4620      	mov	r0, r4
   b5a4a:	bd10      	pop	{r4, pc}

000b5a4c <_ZN10JsonBufferD1Ev>:
JsonBuffer::~JsonBuffer() {
   b5a4c:	b510      	push	{r4, lr}
   b5a4e:	4b05      	ldr	r3, [pc, #20]	; (b5a64 <_ZN10JsonBufferD1Ev+0x18>)
   b5a50:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b5a52:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b5a54:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b5a56:	b91b      	cbnz	r3, b5a60 <_ZN10JsonBufferD1Ev+0x14>
   b5a58:	6840      	ldr	r0, [r0, #4]
   b5a5a:	b108      	cbz	r0, b5a60 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b5a5c:	f000 fec8 	bl	b67f0 <free>
}
   b5a60:	4620      	mov	r0, r4
   b5a62:	bd10      	pop	{r4, pc}
   b5a64:	000bc2a0 	.word	0x000bc2a0

000b5a68 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b5a68:	b510      	push	{r4, lr}
   b5a6a:	4604      	mov	r4, r0
}
   b5a6c:	f7ff ffee 	bl	b5a4c <_ZN10JsonBufferD1Ev>
   b5a70:	4620      	mov	r0, r4
   b5a72:	2114      	movs	r1, #20
   b5a74:	f7fe fb13 	bl	b409e <_ZdlPvj>
   b5a78:	4620      	mov	r0, r4
   b5a7a:	bd10      	pop	{r4, pc}

000b5a7c <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b5a7c:	b510      	push	{r4, lr}
   b5a7e:	4b07      	ldr	r3, [pc, #28]	; (b5a9c <_ZN10JsonParserD1Ev+0x20>)
   b5a80:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b5a82:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b5a84:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b5a86:	b91b      	cbnz	r3, b5a90 <_ZN10JsonParserD1Ev+0x14>
   b5a88:	6940      	ldr	r0, [r0, #20]
   b5a8a:	b108      	cbz	r0, b5a90 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b5a8c:	f000 feb0 	bl	b67f0 <free>
JsonParser::~JsonParser() {
   b5a90:	4620      	mov	r0, r4
   b5a92:	f7ff ffdb 	bl	b5a4c <_ZN10JsonBufferD1Ev>
}
   b5a96:	4620      	mov	r0, r4
   b5a98:	bd10      	pop	{r4, pc}
   b5a9a:	bf00      	nop
   b5a9c:	000bc2b0 	.word	0x000bc2b0

000b5aa0 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b5aa0:	b510      	push	{r4, lr}
   b5aa2:	4604      	mov	r4, r0
}
   b5aa4:	f7ff ffea 	bl	b5a7c <_ZN10JsonParserD1Ev>
   b5aa8:	4620      	mov	r0, r4
   b5aaa:	212c      	movs	r1, #44	; 0x2c
   b5aac:	f7fe faf7 	bl	b409e <_ZdlPvj>
   b5ab0:	4620      	mov	r0, r4
   b5ab2:	bd10      	pop	{r4, pc}

000b5ab4 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b5ab4:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b5ab6:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b5ab8:	4604      	mov	r4, r0
   b5aba:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b5abc:	b10b      	cbz	r3, b5ac2 <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b5abe:	2000      	movs	r0, #0
}
   b5ac0:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b5ac2:	6840      	ldr	r0, [r0, #4]
   b5ac4:	b138      	cbz	r0, b5ad6 <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b5ac6:	f000 fe9b 	bl	b6800 <realloc>
		if (newBuffer) {
   b5aca:	2800      	cmp	r0, #0
   b5acc:	d0f7      	beq.n	b5abe <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b5ace:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b5ad2:	2001      	movs	r0, #1
   b5ad4:	e7f4      	b.n	b5ac0 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b5ad6:	4608      	mov	r0, r1
   b5ad8:	f000 fe82 	bl	b67e0 <malloc>
   b5adc:	e7f5      	b.n	b5aca <_ZN10JsonBuffer8allocateEj+0x16>

000b5ade <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b5ade:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b5ae0:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b5ae2:	460e      	mov	r6, r1
   b5ae4:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b5ae6:	18d1      	adds	r1, r2, r3
   b5ae8:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b5aea:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b5aec:	b172      	cbz	r2, b5b0c <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b5aee:	6882      	ldr	r2, [r0, #8]
   b5af0:	428a      	cmp	r2, r1
   b5af2:	d30b      	bcc.n	b5b0c <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b5af4:	6860      	ldr	r0, [r4, #4]
   b5af6:	68e3      	ldr	r3, [r4, #12]
   b5af8:	462a      	mov	r2, r5
   b5afa:	4631      	mov	r1, r6
   b5afc:	4418      	add	r0, r3
   b5afe:	f004 f9c2 	bl	b9e86 <memcpy>
	offset += dataLen;
   b5b02:	68e2      	ldr	r2, [r4, #12]
   b5b04:	442a      	add	r2, r5
   b5b06:	60e2      	str	r2, [r4, #12]
	return true;
   b5b08:	2001      	movs	r0, #1
}
   b5b0a:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b5b0c:	4620      	mov	r0, r4
   b5b0e:	f7ff ffd1 	bl	b5ab4 <_ZN10JsonBuffer8allocateEj>
   b5b12:	2800      	cmp	r0, #0
   b5b14:	d1ee      	bne.n	b5af4 <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b5b16:	e7f8      	b.n	b5b0a <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b5b18 <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b5b18:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b5b1a:	2100      	movs	r1, #0
   b5b1c:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b5b1e:	b123      	cbz	r3, b5b2a <_ZN10JsonBuffer5clearEv+0x12>
   b5b20:	6882      	ldr	r2, [r0, #8]
   b5b22:	b112      	cbz	r2, b5b2a <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b5b24:	4618      	mov	r0, r3
   b5b26:	f004 b9d6 	b.w	b9ed6 <memset>
}
   b5b2a:	4770      	bx	lr

000b5b2c <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b5b2c:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b5b2e:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b5b32:	2200      	movs	r2, #0
   b5b34:	60c2      	str	r2, [r0, #12]
   b5b36:	2201      	movs	r2, #1
   b5b38:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b5b3a:	6143      	str	r3, [r0, #20]
   b5b3c:	4a02      	ldr	r2, [pc, #8]	; (b5b48 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b5b3e:	9b02      	ldr	r3, [sp, #8]
   b5b40:	6002      	str	r2, [r0, #0]
   b5b42:	61c3      	str	r3, [r0, #28]
}
   b5b44:	bd10      	pop	{r4, pc}
   b5b46:	bf00      	nop
   b5b48:	000bc2b0 	.word	0x000bc2b0

000b5b4c <_ZNK10JsonParser12getReferenceEv>:
	if (tokens < tokensEnd) {
   b5b4c:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   b5b50:	429a      	cmp	r2, r3
   b5b52:	4b04      	ldr	r3, [pc, #16]	; (b5b64 <_ZNK10JsonParser12getReferenceEv+0x18>)

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b5b54:	bf38      	it	cc
   b5b56:	6082      	strcc	r2, [r0, #8]
   b5b58:	e9c0 3100 	strd	r3, r1, [r0]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b5b5c:	bf24      	itt	cs
   b5b5e:	2300      	movcs	r3, #0
   b5b60:	6083      	strcs	r3, [r0, #8]
}
   b5b62:	4770      	bx	lr
   b5b64:	000bc2c0 	.word	0x000bc2c0

000b5b68 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b5b68:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b5b6a:	6813      	ldr	r3, [r2, #0]
   b5b6c:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b5b6e:	6813      	ldr	r3, [r2, #0]
   b5b70:	f103 0410 	add.w	r4, r3, #16
   b5b74:	6014      	str	r4, [r2, #0]
   b5b76:	6986      	ldr	r6, [r0, #24]
   b5b78:	42b4      	cmp	r4, r6
   b5b7a:	d20a      	bcs.n	b5b92 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b5b7c:	699b      	ldr	r3, [r3, #24]
   b5b7e:	688c      	ldr	r4, [r1, #8]
   b5b80:	42a3      	cmp	r3, r4
   b5b82:	da01      	bge.n	b5b88 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b5b84:	42ab      	cmp	r3, r5
   b5b86:	ddf2      	ble.n	b5b6e <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b5b88:	42a3      	cmp	r3, r4
   b5b8a:	bfcc      	ite	gt
   b5b8c:	2000      	movgt	r0, #0
   b5b8e:	2001      	movle	r0, #1
   b5b90:	e000      	b.n	b5b94 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b5b92:	2000      	movs	r0, #0
}
   b5b94:	bd70      	pop	{r4, r5, r6, pc}

000b5b96 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b5b96:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5b9a:	9d08      	ldr	r5, [sp, #32]
   b5b9c:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b5b9e:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b5ba2:	4604      	mov	r4, r0
   b5ba4:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b5ba6:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b5ba8:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b5baa:	9801      	ldr	r0, [sp, #4]
   b5bac:	69a3      	ldr	r3, [r4, #24]
   b5bae:	4283      	cmp	r3, r0
   b5bb0:	d91a      	bls.n	b5be8 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b5bb2:	6882      	ldr	r2, [r0, #8]
   b5bb4:	688b      	ldr	r3, [r1, #8]
   b5bb6:	429a      	cmp	r2, r3
   b5bb8:	da16      	bge.n	b5be8 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b5bba:	42ae      	cmp	r6, r5
   b5bbc:	d10b      	bne.n	b5bd6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b5bbe:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b5bc0:	aa01      	add	r2, sp, #4
   b5bc2:	4620      	mov	r0, r4
   b5bc4:	f7ff ffd0 	bl	b5b68 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b5bc8:	b128      	cbz	r0, b5bd6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b5bca:	9b01      	ldr	r3, [sp, #4]
   b5bcc:	f8c8 3000 	str.w	r3, [r8]
}
   b5bd0:	b002      	add	sp, #8
   b5bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b5bd6:	aa01      	add	r2, sp, #4
   b5bd8:	4620      	mov	r0, r4
   b5bda:	f7ff ffc5 	bl	b5b68 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b5bde:	4620      	mov	r0, r4
		index++;
   b5be0:	3601      	adds	r6, #1
		skipObject(container, token);
   b5be2:	f7ff ffc1 	bl	b5b68 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b5be6:	e7e0      	b.n	b5baa <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b5be8:	2000      	movs	r0, #0
   b5bea:	e7f1      	b.n	b5bd0 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b5bec <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>:
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b5bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5bee:	461f      	mov	r7, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b5bf0:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b5bf4:	4604      	mov	r4, r0
   b5bf6:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b5bf8:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b5bfa:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b5bfc:	9b01      	ldr	r3, [sp, #4]
   b5bfe:	69a2      	ldr	r2, [r4, #24]
   b5c00:	429a      	cmp	r2, r3
   b5c02:	d90f      	bls.n	b5c24 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
   b5c04:	6898      	ldr	r0, [r3, #8]
   b5c06:	688a      	ldr	r2, [r1, #8]
   b5c08:	4290      	cmp	r0, r2
   b5c0a:	da0b      	bge.n	b5c24 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
		if (desiredIndex == index) {
   b5c0c:	42b5      	cmp	r5, r6
   b5c0e:	d103      	bne.n	b5c18 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x2c>
			value = token;
   b5c10:	603b      	str	r3, [r7, #0]
			return true;
   b5c12:	2001      	movs	r0, #1
}
   b5c14:	b003      	add	sp, #12
   b5c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		skipObject(container, token);
   b5c18:	aa01      	add	r2, sp, #4
   b5c1a:	4620      	mov	r0, r4
		index++;
   b5c1c:	3501      	adds	r5, #1
		skipObject(container, token);
   b5c1e:	f7ff ffa3 	bl	b5b68 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b5c22:	e7eb      	b.n	b5bfc <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x10>
	return false;
   b5c24:	2000      	movs	r0, #0
   b5c26:	e7f5      	b.n	b5c14 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x28>

000b5c28 <_ZNK13JsonReference5indexEj>:
	else {
		return JsonReference(parser);
	}
}

JsonReference JsonReference::index(size_t index) const {
   b5c28:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5c2a:	460d      	mov	r5, r1
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b5c2c:	6889      	ldr	r1, [r1, #8]
   b5c2e:	4e0a      	ldr	r6, [pc, #40]	; (b5c58 <_ZNK13JsonReference5indexEj+0x30>)
JsonReference JsonReference::index(size_t index) const {
   b5c30:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b5c32:	b161      	cbz	r1, b5c4e <_ZNK13JsonReference5indexEj+0x26>
   b5c34:	6868      	ldr	r0, [r5, #4]
   b5c36:	ab01      	add	r3, sp, #4
   b5c38:	f7ff ffd8 	bl	b5bec <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>
   b5c3c:	b138      	cbz	r0, b5c4e <_ZNK13JsonReference5indexEj+0x26>
		return JsonReference(parser, newToken);
   b5c3e:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b5c40:	e9c4 6300 	strd	r6, r3, [r4]
   b5c44:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b5c46:	60a3      	str	r3, [r4, #8]
	}
	else {
		return JsonReference(parser);
	}
}
   b5c48:	4620      	mov	r0, r4
   b5c4a:	b002      	add	sp, #8
   b5c4c:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b5c4e:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b5c50:	e9c4 6300 	strd	r6, r3, [r4]
   b5c54:	2300      	movs	r3, #0
   b5c56:	e7f6      	b.n	b5c46 <_ZNK13JsonReference5indexEj+0x1e>
   b5c58:	000bc2c0 	.word	0x000bc2c0

000b5c5c <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   b5c5c:	b510      	push	{r4, lr}
   b5c5e:	4604      	mov	r4, r0
	if (str) {
   b5c60:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b5c62:	460b      	mov	r3, r1
	if (str) {
   b5c64:	b128      	cbz	r0, b5c72 <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b5c66:	f002 fada 	bl	b821e <_ZN6String6concatEc>
	}
	else {
		if (buf && length < (bufLen - 1)) {
			buf[length] = ch;
		}
		length++;
   b5c6a:	68e3      	ldr	r3, [r4, #12]
   b5c6c:	3301      	adds	r3, #1
   b5c6e:	60e3      	str	r3, [r4, #12]
	}
}
   b5c70:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b5c72:	6860      	ldr	r0, [r4, #4]
   b5c74:	2800      	cmp	r0, #0
   b5c76:	d0f8      	beq.n	b5c6a <_ZN16JsonParserString6appendEc+0xe>
   b5c78:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b5c7c:	3a01      	subs	r2, #1
   b5c7e:	428a      	cmp	r2, r1
			buf[length] = ch;
   b5c80:	bf88      	it	hi
   b5c82:	5443      	strbhi	r3, [r0, r1]
   b5c84:	e7f1      	b.n	b5c6a <_ZN16JsonParserString6appendEc+0xe>

000b5c86 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b5c86:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b5c88:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b5c8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5c8c:	4608      	mov	r0, r1
		str.append((char)unicode);
   b5c8e:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b5c90:	d804      	bhi.n	b5c9c <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b5c92:	b003      	add	sp, #12
   b5c94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b5c98:	f7ff bfe0 	b.w	b5c5c <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b5c9c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b5ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b5ca4:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b5ca8:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b5cac:	d207      	bcs.n	b5cbe <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b5cae:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b5cb2:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b5cb4:	f7ff ffd2 	bl	b5c5c <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b5cb8:	9801      	ldr	r0, [sp, #4]
   b5cba:	4621      	mov	r1, r4
   b5cbc:	e7e9      	b.n	b5c92 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b5cbe:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b5cc0:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b5cc4:	9001      	str	r0, [sp, #4]
   b5cc6:	f7ff ffc9 	bl	b5c5c <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b5cca:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b5cce:	9801      	ldr	r0, [sp, #4]
   b5cd0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b5cd4:	e7ee      	b.n	b5cb4 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>
	...

000b5cd8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b5cd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b5cdc:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b5cde:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b5ce0:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b5db0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b5ce4:	4680      	mov	r8, r0
   b5ce6:	460f      	mov	r7, r1
   b5ce8:	4615      	mov	r5, r2
			escape = false;
   b5cea:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b5cec:	68b8      	ldr	r0, [r7, #8]
   b5cee:	42b0      	cmp	r0, r6
   b5cf0:	dd5a      	ble.n	b5da8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b5cf2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b5cf6:	5d99      	ldrb	r1, [r3, r6]
   b5cf8:	199a      	adds	r2, r3, r6
		if (escape) {
   b5cfa:	2c00      	cmp	r4, #0
   b5cfc:	d04b      	beq.n	b5d96 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b5cfe:	2975      	cmp	r1, #117	; 0x75
   b5d00:	d805      	bhi.n	b5d0e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b5d02:	296d      	cmp	r1, #109	; 0x6d
   b5d04:	d807      	bhi.n	b5d16 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b5d06:	2962      	cmp	r1, #98	; 0x62
   b5d08:	d01e      	beq.n	b5d48 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b5d0a:	2966      	cmp	r1, #102	; 0x66
   b5d0c:	d01e      	beq.n	b5d4c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b5d0e:	4628      	mov	r0, r5
   b5d10:	f7ff ffa4 	bl	b5c5c <_ZN16JsonParserString6appendEc>
				break;
   b5d14:	e03d      	b.n	b5d92 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b5d16:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b5d1a:	2c07      	cmp	r4, #7
   b5d1c:	d8f7      	bhi.n	b5d0e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b5d1e:	f20f 0c08 	addw	ip, pc, #8
   b5d22:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b5d26:	bf00      	nop
   b5d28:	000b5d51 	.word	0x000b5d51
   b5d2c:	000b5d0f 	.word	0x000b5d0f
   b5d30:	000b5d0f 	.word	0x000b5d0f
   b5d34:	000b5d0f 	.word	0x000b5d0f
   b5d38:	000b5d55 	.word	0x000b5d55
   b5d3c:	000b5d0f 	.word	0x000b5d0f
   b5d40:	000b5d59 	.word	0x000b5d59
   b5d44:	000b5d5d 	.word	0x000b5d5d
				str.append('\b');
   b5d48:	2108      	movs	r1, #8
   b5d4a:	e7e0      	b.n	b5d0e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b5d4c:	210c      	movs	r1, #12
   b5d4e:	e7de      	b.n	b5d0e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b5d50:	210a      	movs	r1, #10
   b5d52:	e7dc      	b.n	b5d0e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b5d54:	210d      	movs	r1, #13
   b5d56:	e7da      	b.n	b5d0e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b5d58:	2109      	movs	r1, #9
   b5d5a:	e7d8      	b.n	b5d0e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b5d5c:	1d31      	adds	r1, r6, #4
   b5d5e:	4288      	cmp	r0, r1
   b5d60:	dd17      	ble.n	b5d92 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b5d62:	a902      	add	r1, sp, #8
   b5d64:	3304      	adds	r3, #4
   b5d66:	4433      	add	r3, r6
   b5d68:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b5d6a:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b5d6e:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b5d72:	429a      	cmp	r2, r3
   b5d74:	d1f9      	bne.n	b5d6a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b5d76:	aa01      	add	r2, sp, #4
   b5d78:	4651      	mov	r1, sl
					tmp[4] = 0;
   b5d7a:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b5d7e:	f000 fd47 	bl	b6810 <sscanf>
   b5d82:	2801      	cmp	r0, #1
   b5d84:	d105      	bne.n	b5d92 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b5d86:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b5d8a:	4629      	mov	r1, r5
   b5d8c:	f7ff ff7b 	bl	b5c86 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b5d90:	3605      	adds	r6, #5
			escape = false;
   b5d92:	2400      	movs	r4, #0
   b5d94:	e004      	b.n	b5da0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b5d96:	295c      	cmp	r1, #92	; 0x5c
   b5d98:	d004      	beq.n	b5da4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b5d9a:	4628      	mov	r0, r5
   b5d9c:	f7ff ff5e 	bl	b5c5c <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b5da0:	3601      	adds	r6, #1
   b5da2:	e7a3      	b.n	b5cec <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b5da4:	2401      	movs	r4, #1
   b5da6:	e7fb      	b.n	b5da0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b5da8:	2001      	movs	r0, #1
   b5daa:	b004      	add	sp, #16
   b5dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5db0:	000bc293 	.word	0x000bc293

000b5db4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b5db4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b5db6:	460c      	mov	r4, r1
   b5db8:	4606      	mov	r6, r0
	result = "";
   b5dba:	490c      	ldr	r1, [pc, #48]	; (b5dec <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b5dbc:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b5dbe:	4615      	mov	r5, r2
	result = "";
   b5dc0:	f002 f9ed 	bl	b819e <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b5dc4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b5dc8:	1ac9      	subs	r1, r1, r3
   b5dca:	3101      	adds	r1, #1
   b5dcc:	4628      	mov	r0, r5
   b5dce:	f002 f98b 	bl	b80e8 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b5dd2:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b5dd4:	466a      	mov	r2, sp
   b5dd6:	4621      	mov	r1, r4
   b5dd8:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b5dda:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b5dde:	9500      	str	r5, [sp, #0]
   b5de0:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b5de2:	f7ff ff79 	bl	b5cd8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b5de6:	b004      	add	sp, #16
   b5de8:	bd70      	pop	{r4, r5, r6, pc}
   b5dea:	bf00      	nop
   b5dec:	000bc292 	.word	0x000bc292

000b5df0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b5df0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5df4:	b089      	sub	sp, #36	; 0x24
   b5df6:	4605      	mov	r5, r0
   b5df8:	4688      	mov	r8, r1
	String keyName;
   b5dfa:	a804      	add	r0, sp, #16
   b5dfc:	4912      	ldr	r1, [pc, #72]	; (b5e48 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b5dfe:	4616      	mov	r6, r2
   b5e00:	4699      	mov	r9, r3
	String keyName;
   b5e02:	f002 f99e 	bl	b8142 <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b5e06:	2700      	movs	r7, #0
   b5e08:	9700      	str	r7, [sp, #0]
   b5e0a:	464b      	mov	r3, r9
   b5e0c:	aa03      	add	r2, sp, #12
   b5e0e:	4641      	mov	r1, r8
   b5e10:	4628      	mov	r0, r5
   b5e12:	f7ff fec0 	bl	b5b96 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b5e16:	4604      	mov	r4, r0
   b5e18:	b170      	cbz	r0, b5e38 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b5e1a:	9903      	ldr	r1, [sp, #12]
   b5e1c:	aa04      	add	r2, sp, #16
   b5e1e:	4628      	mov	r0, r5
   b5e20:	f7ff ffc8 	bl	b5db4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b5e24:	4604      	mov	r4, r0
   b5e26:	b908      	cbnz	r0, b5e2c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b5e28:	3701      	adds	r7, #1
   b5e2a:	e7ed      	b.n	b5e08 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b5e2c:	4631      	mov	r1, r6
   b5e2e:	a804      	add	r0, sp, #16
   b5e30:	f002 fa23 	bl	b827a <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b5e34:	2800      	cmp	r0, #0
   b5e36:	d0f7      	beq.n	b5e28 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b5e38:	a804      	add	r0, sp, #16
   b5e3a:	f002 f937 	bl	b80ac <_ZN6StringD1Ev>
}
   b5e3e:	4620      	mov	r0, r4
   b5e40:	b009      	add	sp, #36	; 0x24
   b5e42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5e46:	bf00      	nop
   b5e48:	000bc292 	.word	0x000bc292

000b5e4c <_ZNK13JsonReference3keyEPKc>:
JsonReference JsonReference::key(const char *name) const {
   b5e4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5e4e:	460d      	mov	r5, r1
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b5e50:	6889      	ldr	r1, [r1, #8]
   b5e52:	4e0a      	ldr	r6, [pc, #40]	; (b5e7c <_ZNK13JsonReference3keyEPKc+0x30>)
JsonReference JsonReference::key(const char *name) const {
   b5e54:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b5e56:	b161      	cbz	r1, b5e72 <_ZNK13JsonReference3keyEPKc+0x26>
   b5e58:	6868      	ldr	r0, [r5, #4]
   b5e5a:	ab01      	add	r3, sp, #4
   b5e5c:	f7ff ffc8 	bl	b5df0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b5e60:	b138      	cbz	r0, b5e72 <_ZNK13JsonReference3keyEPKc+0x26>
		return JsonReference(parser, newToken);
   b5e62:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b5e64:	e9c4 6300 	strd	r6, r3, [r4]
   b5e68:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b5e6a:	60a3      	str	r3, [r4, #8]
}
   b5e6c:	4620      	mov	r0, r4
   b5e6e:	b002      	add	sp, #8
   b5e70:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b5e72:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b5e74:	e9c4 6300 	strd	r6, r3, [r4]
   b5e78:	2300      	movs	r3, #0
   b5e7a:	e7f6      	b.n	b5e6a <_ZNK13JsonReference3keyEPKc+0x1e>
   b5e7c:	000bc2c0 	.word	0x000bc2c0

000b5e80 <_ZNK13JsonReference11valueStringEv>:
String JsonReference::valueString() const {
   b5e80:	b538      	push	{r3, r4, r5, lr}
   b5e82:	460d      	mov	r5, r1
	String result;
   b5e84:	4905      	ldr	r1, [pc, #20]	; (b5e9c <_ZNK13JsonReference11valueStringEv+0x1c>)
String JsonReference::valueString() const {
   b5e86:	4604      	mov	r4, r0
	String result;
   b5e88:	f002 f95b 	bl	b8142 <_ZN6StringC1EPK19__FlashStringHelper>
	 * There are also type-specific versions like valueBool that return the value, instead of having to pass an object
	 * to hold the value, as in this call.
	 */
	template<class T>
	bool value(T &result) const {
		if (token && parser->getTokenValue(token, result)) {
   b5e8c:	68a9      	ldr	r1, [r5, #8]
   b5e8e:	b119      	cbz	r1, b5e98 <_ZNK13JsonReference11valueStringEv+0x18>
   b5e90:	6868      	ldr	r0, [r5, #4]
   b5e92:	4622      	mov	r2, r4
   b5e94:	f7ff ff8e 	bl	b5db4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
}
   b5e98:	4620      	mov	r0, r4
   b5e9a:	bd38      	pop	{r3, r4, r5, pc}
   b5e9c:	000bc292 	.word	0x000bc292

000b5ea0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b5ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b5ea4:	6844      	ldr	r4, [r0, #4]
   b5ea6:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b5eaa:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b5eae:	f8d0 e000 	ldr.w	lr, [r0]
   b5eb2:	4596      	cmp	lr, r2
   b5eb4:	f080 81b9 	bcs.w	b622a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b5eb8:	f811 800e 	ldrb.w	r8, [r1, lr]
   b5ebc:	f1b8 0f00 	cmp.w	r8, #0
   b5ec0:	f000 81b3 	beq.w	b622a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b5ec4:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b5ec8:	f000 8098 	beq.w	b5ffc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b5ecc:	d833      	bhi.n	b5f36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b5ece:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b5ed2:	f000 80a6 	beq.w	b6022 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b5ed6:	d810      	bhi.n	b5efa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b5ed8:	f1a8 0809 	sub.w	r8, r8, #9
   b5edc:	fa5f f888 	uxtb.w	r8, r8
   b5ee0:	f1b8 0f17 	cmp.w	r8, #23
   b5ee4:	d80d      	bhi.n	b5f02 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b5ee6:	4d9f      	ldr	r5, [pc, #636]	; (b6164 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b5ee8:	fa0c f808 	lsl.w	r8, ip, r8
   b5eec:	ea18 0f05 	tst.w	r8, r5
   b5ef0:	d007      	beq.n	b5f02 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b5ef2:	6805      	ldr	r5, [r0, #0]
   b5ef4:	3501      	adds	r5, #1
   b5ef6:	6005      	str	r5, [r0, #0]
   b5ef8:	e7d9      	b.n	b5eae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b5efa:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b5efe:	f000 8133 	beq.w	b6168 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b5f02:	f8d0 8000 	ldr.w	r8, [r0]
   b5f06:	4542      	cmp	r2, r8
   b5f08:	d90e      	bls.n	b5f28 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b5f0a:	f811 5008 	ldrb.w	r5, [r1, r8]
   b5f0e:	b15d      	cbz	r5, b5f28 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b5f10:	2d3a      	cmp	r5, #58	; 0x3a
   b5f12:	f200 8169 	bhi.w	b61e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b5f16:	2d1f      	cmp	r5, #31
   b5f18:	f200 8151 	bhi.w	b61be <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b5f1c:	2d0a      	cmp	r5, #10
   b5f1e:	f200 8160 	bhi.w	b61e2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b5f22:	2d08      	cmp	r5, #8
   b5f24:	f240 8156 	bls.w	b61d4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b5f28:	2b00      	cmp	r3, #0
   b5f2a:	f040 8162 	bne.w	b61f2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b5f2e:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b5f32:	6005      	str	r5, [r0, #0]
   b5f34:	e0a5      	b.n	b6082 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b5f36:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b5f3a:	d037      	beq.n	b5fac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b5f3c:	d82e      	bhi.n	b5f9c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b5f3e:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b5f42:	d033      	beq.n	b5fac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b5f44:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b5f48:	d1db      	bne.n	b5f02 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b5f4a:	2b00      	cmp	r3, #0
   b5f4c:	d0d1      	beq.n	b5ef2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b5f4e:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b5f52:	6845      	ldr	r5, [r0, #4]
   b5f54:	3d01      	subs	r5, #1
   b5f56:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b5f5a:	2d00      	cmp	r5, #0
   b5f5c:	db55      	blt.n	b600a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b5f5e:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b5f62:	3701      	adds	r7, #1
   b5f64:	d04d      	beq.n	b6002 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b5f66:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b5f6a:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b5f6e:	d148      	bne.n	b6002 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b5f70:	f898 b000 	ldrb.w	fp, [r8]
   b5f74:	45cb      	cmp	fp, r9
   b5f76:	d14b      	bne.n	b6010 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b5f78:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b5f7c:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b5f80:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b5f84:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b5f88:	f8de 7004 	ldr.w	r7, [lr, #4]
   b5f8c:	3701      	adds	r7, #1
   b5f8e:	d042      	beq.n	b6016 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b5f90:	f8de 7008 	ldr.w	r7, [lr, #8]
   b5f94:	3701      	adds	r7, #1
   b5f96:	d13e      	bne.n	b6016 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b5f98:	6085      	str	r5, [r0, #8]
				break;
   b5f9a:	e7aa      	b.n	b5ef2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b5f9c:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b5fa0:	d1af      	bne.n	b5f02 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b5fa2:	2b00      	cmp	r3, #0
   b5fa4:	d0a5      	beq.n	b5ef2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b5fa6:	f04f 0901 	mov.w	r9, #1
   b5faa:	e7d2      	b.n	b5f52 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b5fac:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b5fae:	2b00      	cmp	r3, #0
   b5fb0:	d09f      	beq.n	b5ef2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b5fb2:	6845      	ldr	r5, [r0, #4]
   b5fb4:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b5fb6:	42af      	cmp	r7, r5
   b5fb8:	d94a      	bls.n	b6050 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b5fba:	f105 0e01 	add.w	lr, r5, #1
   b5fbe:	f8c0 e004 	str.w	lr, [r0, #4]
   b5fc2:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b5fc6:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b5fca:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b5fce:	2500      	movs	r5, #0
   b5fd0:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b5fd4:	6885      	ldr	r5, [r0, #8]
   b5fd6:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b5fd8:	bf1f      	itttt	ne
   b5fda:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b5fde:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b5fe2:	3501      	addne	r5, #1
   b5fe4:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b5fe8:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b5fec:	bf0c      	ite	eq
   b5fee:	2501      	moveq	r5, #1
   b5ff0:	2502      	movne	r5, #2
   b5ff2:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b5ff6:	6805      	ldr	r5, [r0, #0]
   b5ff8:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b5ffc:	6845      	ldr	r5, [r0, #4]
   b5ffe:	3d01      	subs	r5, #1
   b6000:	e7ca      	b.n	b5f98 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b6002:	3d01      	subs	r5, #1
   b6004:	f1a8 0810 	sub.w	r8, r8, #16
   b6008:	e7a7      	b.n	b5f5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b600a:	3501      	adds	r5, #1
   b600c:	f47f af71 	bne.w	b5ef2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b6010:	f06f 0401 	mvn.w	r4, #1
   b6014:	e01e      	b.n	b6054 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b6016:	3d01      	subs	r5, #1
   b6018:	1c6f      	adds	r7, r5, #1
   b601a:	f1ae 0e10 	sub.w	lr, lr, #16
   b601e:	d1b3      	bne.n	b5f88 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b6020:	e767      	b.n	b5ef2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b6022:	f10e 0901 	add.w	r9, lr, #1
   b6026:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b602a:	f8d0 8000 	ldr.w	r8, [r0]
   b602e:	4542      	cmp	r2, r8
   b6030:	f240 8093 	bls.w	b615a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b6034:	f811 5008 	ldrb.w	r5, [r1, r8]
   b6038:	2d00      	cmp	r5, #0
   b603a:	f000 808e 	beq.w	b615a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b603e:	2d22      	cmp	r5, #34	; 0x22
   b6040:	d130      	bne.n	b60a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b6042:	b1f3      	cbz	r3, b6082 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b6044:	6845      	ldr	r5, [r0, #4]
   b6046:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b6048:	42af      	cmp	r7, r5
   b604a:	d806      	bhi.n	b605a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b604c:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b6050:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b6054:	4620      	mov	r0, r4
   b6056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b605a:	f105 0e01 	add.w	lr, r5, #1
   b605e:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b6062:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b6066:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b606a:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b606e:	2700      	movs	r7, #0
   b6070:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b6072:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b6076:	f04f 0a03 	mov.w	sl, #3
   b607a:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b607e:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b6082:	6885      	ldr	r5, [r0, #8]
   b6084:	1c6f      	adds	r7, r5, #1
				count++;
   b6086:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b608a:	f43f af32 	beq.w	b5ef2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b608e:	2b00      	cmp	r3, #0
   b6090:	f43f af2f 	beq.w	b5ef2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b6094:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b6098:	f8de 500c 	ldr.w	r5, [lr, #12]
   b609c:	3501      	adds	r5, #1
   b609e:	f8ce 500c 	str.w	r5, [lr, #12]
   b60a2:	e726      	b.n	b5ef2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b60a4:	2d5c      	cmp	r5, #92	; 0x5c
   b60a6:	d111      	bne.n	b60cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b60a8:	f108 0501 	add.w	r5, r8, #1
   b60ac:	42aa      	cmp	r2, r5
   b60ae:	d90d      	bls.n	b60cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b60b0:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b60b2:	5d4d      	ldrb	r5, [r1, r5]
   b60b4:	2d75      	cmp	r5, #117	; 0x75
   b60b6:	d82b      	bhi.n	b6110 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b60b8:	2d6d      	cmp	r5, #109	; 0x6d
   b60ba:	d80b      	bhi.n	b60d4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b60bc:	2d66      	cmp	r5, #102	; 0x66
   b60be:	d827      	bhi.n	b6110 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b60c0:	2d5b      	cmp	r5, #91	; 0x5b
   b60c2:	d81d      	bhi.n	b6100 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b60c4:	2d22      	cmp	r5, #34	; 0x22
   b60c6:	d001      	beq.n	b60cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b60c8:	2d2f      	cmp	r5, #47	; 0x2f
   b60ca:	d121      	bne.n	b6110 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b60cc:	6805      	ldr	r5, [r0, #0]
   b60ce:	3501      	adds	r5, #1
   b60d0:	6005      	str	r5, [r0, #0]
   b60d2:	e7aa      	b.n	b602a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b60d4:	3d6e      	subs	r5, #110	; 0x6e
   b60d6:	2d07      	cmp	r5, #7
   b60d8:	d81a      	bhi.n	b6110 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b60da:	a701      	add	r7, pc, #4	; (adr r7, b60e0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b60dc:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b60e0:	000b60cd 	.word	0x000b60cd
   b60e4:	000b6111 	.word	0x000b6111
   b60e8:	000b6111 	.word	0x000b6111
   b60ec:	000b6111 	.word	0x000b6111
   b60f0:	000b60cd 	.word	0x000b60cd
   b60f4:	000b6111 	.word	0x000b6111
   b60f8:	000b60cd 	.word	0x000b60cd
   b60fc:	000b6117 	.word	0x000b6117
   b6100:	3d5c      	subs	r5, #92	; 0x5c
   b6102:	b2ed      	uxtb	r5, r5
   b6104:	fa0c f505 	lsl.w	r5, ip, r5
   b6108:	f240 4741 	movw	r7, #1089	; 0x441
   b610c:	423d      	tst	r5, r7
   b610e:	d1dd      	bne.n	b60cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b6110:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b6114:	e77c      	b.n	b6010 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b6116:	f108 0502 	add.w	r5, r8, #2
   b611a:	6005      	str	r5, [r0, #0]
   b611c:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b6120:	f8d0 8000 	ldr.w	r8, [r0]
   b6124:	4542      	cmp	r2, r8
   b6126:	d803      	bhi.n	b6130 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b6128:	6805      	ldr	r5, [r0, #0]
   b612a:	3d01      	subs	r5, #1
   b612c:	6005      	str	r5, [r0, #0]
					break;
   b612e:	e7cd      	b.n	b60cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b6130:	f811 5008 	ldrb.w	r5, [r1, r8]
   b6134:	2d00      	cmp	r5, #0
   b6136:	d0f7      	beq.n	b6128 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b6138:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b613c:	f1bb 0f09 	cmp.w	fp, #9
   b6140:	d904      	bls.n	b614c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b6142:	f025 0520 	bic.w	r5, r5, #32
   b6146:	3d41      	subs	r5, #65	; 0x41
   b6148:	2d05      	cmp	r5, #5
   b614a:	d8e1      	bhi.n	b6110 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b614c:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b6150:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b6154:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b6156:	d1e3      	bne.n	b6120 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b6158:	e7e6      	b.n	b6128 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b615a:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b615e:	f06f 0402 	mvn.w	r4, #2
   b6162:	e777      	b.n	b6054 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b6164:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b6168:	2b00      	cmp	r3, #0
   b616a:	f43f aec2 	beq.w	b5ef2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b616e:	6885      	ldr	r5, [r0, #8]
   b6170:	1c6f      	adds	r7, r5, #1
   b6172:	f43f aebe 	beq.w	b5ef2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b6176:	012d      	lsls	r5, r5, #4
   b6178:	5d5d      	ldrb	r5, [r3, r5]
   b617a:	3d01      	subs	r5, #1
   b617c:	2d01      	cmp	r5, #1
   b617e:	f67f aeb8 	bls.w	b5ef2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b6182:	6845      	ldr	r5, [r0, #4]
   b6184:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b6188:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b618c:	f1b8 0f00 	cmp.w	r8, #0
   b6190:	f6ff aeaf 	blt.w	b5ef2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b6194:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b6198:	3d01      	subs	r5, #1
   b619a:	2d01      	cmp	r5, #1
   b619c:	d80a      	bhi.n	b61b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b619e:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b61a2:	3501      	adds	r5, #1
   b61a4:	d006      	beq.n	b61b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b61a6:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b61aa:	3501      	adds	r5, #1
   b61ac:	d102      	bne.n	b61b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b61ae:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b61b2:	e69e      	b.n	b5ef2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b61b4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b61b8:	f1ae 0e10 	sub.w	lr, lr, #16
   b61bc:	e7e6      	b.n	b618c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b61be:	f1a5 0920 	sub.w	r9, r5, #32
   b61c2:	4f24      	ldr	r7, [pc, #144]	; (b6254 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b61c4:	fa5f f989 	uxtb.w	r9, r9
   b61c8:	fa0c f909 	lsl.w	r9, ip, r9
   b61cc:	ea19 0f07 	tst.w	r9, r7
   b61d0:	f47f aeaa 	bne.w	b5f28 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b61d4:	3d20      	subs	r5, #32
   b61d6:	2d5e      	cmp	r5, #94	; 0x5e
   b61d8:	d89a      	bhi.n	b6110 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b61da:	f108 0501 	add.w	r5, r8, #1
   b61de:	6005      	str	r5, [r0, #0]
   b61e0:	e68f      	b.n	b5f02 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b61e2:	2d0d      	cmp	r5, #13
   b61e4:	d1f6      	bne.n	b61d4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b61e6:	e69f      	b.n	b5f28 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b61e8:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b61ec:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b61f0:	e7f8      	b.n	b61e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b61f2:	6845      	ldr	r5, [r0, #4]
   b61f4:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b61f6:	42af      	cmp	r7, r5
   b61f8:	f67f af28 	bls.w	b604c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b61fc:	f105 0801 	add.w	r8, r5, #1
   b6200:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b6204:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b6208:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b620c:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b6210:	2700      	movs	r7, #0
   b6212:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b6214:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b6218:	f04f 0a04 	mov.w	sl, #4
   b621c:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b6220:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b6224:	6805      	ldr	r5, [r0, #0]
   b6226:	3d01      	subs	r5, #1
   b6228:	e683      	b.n	b5f32 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b622a:	2b00      	cmp	r3, #0
   b622c:	f43f af12 	beq.w	b6054 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b6230:	6842      	ldr	r2, [r0, #4]
   b6232:	1e51      	subs	r1, r2, #1
   b6234:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b6238:	2900      	cmp	r1, #0
   b623a:	f6ff af0b 	blt.w	b6054 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b623e:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b6242:	3201      	adds	r2, #1
   b6244:	d003      	beq.n	b624e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b6246:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b624a:	3201      	adds	r2, #1
   b624c:	d087      	beq.n	b615e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b624e:	3901      	subs	r1, #1
   b6250:	3b10      	subs	r3, #16
   b6252:	e7f1      	b.n	b6238 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b6254:	04001001 	.word	0x04001001

000b6258 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b6258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b625a:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b625c:	4604      	mov	r4, r0
	if (offset == 0) {
   b625e:	b912      	cbnz	r2, b6266 <_ZN10JsonParser5parseEv+0xe>
		return false;
   b6260:	2000      	movs	r0, #0
}
   b6262:	b003      	add	sp, #12
   b6264:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b6266:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b6268:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b626c:	b1ab      	cbz	r3, b629a <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b626e:	2100      	movs	r1, #0
	parser->toknext = 0;
   b6270:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b6274:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b6278:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b627a:	69c1      	ldr	r1, [r0, #28]
   b627c:	9100      	str	r1, [sp, #0]
   b627e:	6841      	ldr	r1, [r0, #4]
   b6280:	4630      	mov	r0, r6
   b6282:	f7ff fe0d 	bl	b5ea0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b6286:	1c43      	adds	r3, r0, #1
   b6288:	d128      	bne.n	b62dc <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b628a:	7c25      	ldrb	r5, [r4, #16]
   b628c:	2d00      	cmp	r5, #0
   b628e:	d1e7      	bne.n	b6260 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b6290:	6960      	ldr	r0, [r4, #20]
   b6292:	f000 faad 	bl	b67f0 <free>
			tokens = 0;
   b6296:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b6298:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b629a:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b629c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b62a0:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b62a4:	68e2      	ldr	r2, [r4, #12]
   b62a6:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b62a8:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b62aa:	9500      	str	r5, [sp, #0]
   b62ac:	462b      	mov	r3, r5
   b62ae:	4630      	mov	r0, r6
   b62b0:	f7ff fdf6 	bl	b5ea0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b62b4:	2800      	cmp	r0, #0
   b62b6:	dbd3      	blt.n	b6260 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b62b8:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b62ba:	d017      	beq.n	b62ec <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b62bc:	0100      	lsls	r0, r0, #4
   b62be:	f000 fa8f 	bl	b67e0 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b62c2:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b62c4:	6160      	str	r0, [r4, #20]
   b62c6:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b62c8:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b62ca:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b62ce:	68e2      	ldr	r2, [r4, #12]
   b62d0:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b62d2:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b62d4:	4630      	mov	r0, r6
   b62d6:	f7ff fde3 	bl	b5ea0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b62da:	e001      	b.n	b62e0 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b62dc:	2800      	cmp	r0, #0
   b62de:	dbbf      	blt.n	b6260 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b62e0:	6963      	ldr	r3, [r4, #20]
   b62e2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b62e6:	61a0      	str	r0, [r4, #24]
	return true;
   b62e8:	2001      	movs	r0, #1
   b62ea:	e7ba      	b.n	b6262 <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b62ec:	6963      	ldr	r3, [r4, #20]
   b62ee:	61a3      	str	r3, [r4, #24]
   b62f0:	e7fa      	b.n	b62e8 <_ZN10JsonParser5parseEv+0x90>
	...

000b62f4 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   b62f4:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b62f6:	f000 f8af 	bl	b6458 <HAL_Pin_Map>
   b62fa:	4b01      	ldr	r3, [pc, #4]	; (b6300 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b62fc:	6018      	str	r0, [r3, #0]
}
   b62fe:	bd08      	pop	{r3, pc}
   b6300:	2003e6b4 	.word	0x2003e6b4

000b6304 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b6304:	b508      	push	{r3, lr}
   b6306:	4b02      	ldr	r3, [pc, #8]	; (b6310 <hal_ble_stack_init+0xc>)
   b6308:	681b      	ldr	r3, [r3, #0]
   b630a:	689b      	ldr	r3, [r3, #8]
   b630c:	9301      	str	r3, [sp, #4]
   b630e:	bd08      	pop	{r3, pc}
   b6310:	00030278 	.word	0x00030278

000b6314 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b6314:	b508      	push	{r3, lr}
   b6316:	4b02      	ldr	r3, [pc, #8]	; (b6320 <hal_ble_gap_set_advertising_data+0xc>)
   b6318:	681b      	ldr	r3, [r3, #0]
   b631a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b631c:	9301      	str	r3, [sp, #4]
   b631e:	bd08      	pop	{r3, pc}
   b6320:	00030278 	.word	0x00030278

000b6324 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b6324:	b508      	push	{r3, lr}
   b6326:	4b02      	ldr	r3, [pc, #8]	; (b6330 <hal_ble_gap_set_scan_response_data+0xc>)
   b6328:	681b      	ldr	r3, [r3, #0]
   b632a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b632c:	9301      	str	r3, [sp, #4]
   b632e:	bd08      	pop	{r3, pc}
   b6330:	00030278 	.word	0x00030278

000b6334 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b6334:	b508      	push	{r3, lr}
   b6336:	4b02      	ldr	r3, [pc, #8]	; (b6340 <hal_ble_gap_start_advertising+0xc>)
   b6338:	681b      	ldr	r3, [r3, #0]
   b633a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b633c:	9301      	str	r3, [sp, #4]
   b633e:	bd08      	pop	{r3, pc}
   b6340:	00030278 	.word	0x00030278

000b6344 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b6344:	b508      	push	{r3, lr}
   b6346:	4b03      	ldr	r3, [pc, #12]	; (b6354 <hal_ble_gap_disconnect+0x10>)
   b6348:	681b      	ldr	r3, [r3, #0]
   b634a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b634e:	9301      	str	r3, [sp, #4]
   b6350:	bd08      	pop	{r3, pc}
   b6352:	0000      	.short	0x0000
   b6354:	00030278 	.word	0x00030278

000b6358 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b6358:	b508      	push	{r3, lr}
   b635a:	4b03      	ldr	r3, [pc, #12]	; (b6368 <hal_ble_gatt_server_add_service+0x10>)
   b635c:	681b      	ldr	r3, [r3, #0]
   b635e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b6362:	9301      	str	r3, [sp, #4]
   b6364:	bd08      	pop	{r3, pc}
   b6366:	0000      	.short	0x0000
   b6368:	00030278 	.word	0x00030278

000b636c <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b636c:	b508      	push	{r3, lr}
   b636e:	4b03      	ldr	r3, [pc, #12]	; (b637c <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b6370:	681b      	ldr	r3, [r3, #0]
   b6372:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b6376:	9301      	str	r3, [sp, #4]
   b6378:	bd08      	pop	{r3, pc}
   b637a:	0000      	.short	0x0000
   b637c:	00030278 	.word	0x00030278

000b6380 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6380:	b508      	push	{r3, lr}
   b6382:	4b03      	ldr	r3, [pc, #12]	; (b6390 <hal_ble_gatt_client_write_with_response+0x10>)
   b6384:	681b      	ldr	r3, [r3, #0]
   b6386:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b638a:	9301      	str	r3, [sp, #4]
   b638c:	bd08      	pop	{r3, pc}
   b638e:	0000      	.short	0x0000
   b6390:	00030278 	.word	0x00030278

000b6394 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6394:	b508      	push	{r3, lr}
   b6396:	4b03      	ldr	r3, [pc, #12]	; (b63a4 <hal_ble_gatt_client_write_without_response+0x10>)
   b6398:	681b      	ldr	r3, [r3, #0]
   b639a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b639e:	9301      	str	r3, [sp, #4]
   b63a0:	bd08      	pop	{r3, pc}
   b63a2:	0000      	.short	0x0000
   b63a4:	00030278 	.word	0x00030278

000b63a8 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b63a8:	b508      	push	{r3, lr}
   b63aa:	4b03      	ldr	r3, [pc, #12]	; (b63b8 <hal_ble_gatt_server_add_characteristic+0x10>)
   b63ac:	681b      	ldr	r3, [r3, #0]
   b63ae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b63b2:	9301      	str	r3, [sp, #4]
   b63b4:	bd08      	pop	{r3, pc}
   b63b6:	0000      	.short	0x0000
   b63b8:	00030278 	.word	0x00030278

000b63bc <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b63bc:	b508      	push	{r3, lr}
   b63be:	4b03      	ldr	r3, [pc, #12]	; (b63cc <hal_ble_set_callback_on_periph_link_events+0x10>)
   b63c0:	681b      	ldr	r3, [r3, #0]
   b63c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b63c6:	9301      	str	r3, [sp, #4]
   b63c8:	bd08      	pop	{r3, pc}
   b63ca:	0000      	.short	0x0000
   b63cc:	00030278 	.word	0x00030278

000b63d0 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b63d0:	b508      	push	{r3, lr}
   b63d2:	4b03      	ldr	r3, [pc, #12]	; (b63e0 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b63d4:	681b      	ldr	r3, [r3, #0]
   b63d6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b63da:	9301      	str	r3, [sp, #4]
   b63dc:	bd08      	pop	{r3, pc}
   b63de:	0000      	.short	0x0000
   b63e0:	00030278 	.word	0x00030278

000b63e4 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b63e4:	b508      	push	{r3, lr}
   b63e6:	4b03      	ldr	r3, [pc, #12]	; (b63f4 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b63e8:	681b      	ldr	r3, [r3, #0]
   b63ea:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b63ee:	9301      	str	r3, [sp, #4]
   b63f0:	bd08      	pop	{r3, pc}
   b63f2:	0000      	.short	0x0000
   b63f4:	00030278 	.word	0x00030278

000b63f8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b63f8:	b508      	push	{r3, lr}
   b63fa:	4b02      	ldr	r3, [pc, #8]	; (b6404 <os_mutex_recursive_create+0xc>)
   b63fc:	681b      	ldr	r3, [r3, #0]
   b63fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6400:	9301      	str	r3, [sp, #4]
   b6402:	bd08      	pop	{r3, pc}
   b6404:	00030248 	.word	0x00030248

000b6408 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b6408:	b508      	push	{r3, lr}
   b640a:	4b02      	ldr	r3, [pc, #8]	; (b6414 <os_mutex_recursive_lock+0xc>)
   b640c:	681b      	ldr	r3, [r3, #0]
   b640e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6410:	9301      	str	r3, [sp, #4]
   b6412:	bd08      	pop	{r3, pc}
   b6414:	00030248 	.word	0x00030248

000b6418 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b6418:	b508      	push	{r3, lr}
   b641a:	4b02      	ldr	r3, [pc, #8]	; (b6424 <os_mutex_recursive_unlock+0xc>)
   b641c:	681b      	ldr	r3, [r3, #0]
   b641e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6420:	9301      	str	r3, [sp, #4]
   b6422:	bd08      	pop	{r3, pc}
   b6424:	00030248 	.word	0x00030248

000b6428 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6428:	b508      	push	{r3, lr}
   b642a:	4b02      	ldr	r3, [pc, #8]	; (b6434 <HAL_RNG_GetRandomNumber+0xc>)
   b642c:	681b      	ldr	r3, [r3, #0]
   b642e:	685b      	ldr	r3, [r3, #4]
   b6430:	9301      	str	r3, [sp, #4]
   b6432:	bd08      	pop	{r3, pc}
   b6434:	00030218 	.word	0x00030218

000b6438 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6438:	b508      	push	{r3, lr}
   b643a:	4b02      	ldr	r3, [pc, #8]	; (b6444 <HAL_Delay_Microseconds+0xc>)
   b643c:	681b      	ldr	r3, [r3, #0]
   b643e:	68db      	ldr	r3, [r3, #12]
   b6440:	9301      	str	r3, [sp, #4]
   b6442:	bd08      	pop	{r3, pc}
   b6444:	00030218 	.word	0x00030218

000b6448 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6448:	b508      	push	{r3, lr}
   b644a:	4b02      	ldr	r3, [pc, #8]	; (b6454 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b644c:	681b      	ldr	r3, [r3, #0]
   b644e:	695b      	ldr	r3, [r3, #20]
   b6450:	9301      	str	r3, [sp, #4]
   b6452:	bd08      	pop	{r3, pc}
   b6454:	00030218 	.word	0x00030218

000b6458 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b6458:	b508      	push	{r3, lr}
   b645a:	4b02      	ldr	r3, [pc, #8]	; (b6464 <HAL_Pin_Map+0xc>)
   b645c:	681b      	ldr	r3, [r3, #0]
   b645e:	681b      	ldr	r3, [r3, #0]
   b6460:	9301      	str	r3, [sp, #4]
   b6462:	bd08      	pop	{r3, pc}
   b6464:	0003022c 	.word	0x0003022c

000b6468 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6468:	b508      	push	{r3, lr}
   b646a:	4b02      	ldr	r3, [pc, #8]	; (b6474 <hal_i2c_begin+0xc>)
   b646c:	681b      	ldr	r3, [r3, #0]
   b646e:	68db      	ldr	r3, [r3, #12]
   b6470:	9301      	str	r3, [sp, #4]
   b6472:	bd08      	pop	{r3, pc}
   b6474:	00030228 	.word	0x00030228

000b6478 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6478:	b508      	push	{r3, lr}
   b647a:	4b02      	ldr	r3, [pc, #8]	; (b6484 <hal_i2c_begin_transmission+0xc>)
   b647c:	681b      	ldr	r3, [r3, #0]
   b647e:	699b      	ldr	r3, [r3, #24]
   b6480:	9301      	str	r3, [sp, #4]
   b6482:	bd08      	pop	{r3, pc}
   b6484:	00030228 	.word	0x00030228

000b6488 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6488:	b508      	push	{r3, lr}
   b648a:	4b02      	ldr	r3, [pc, #8]	; (b6494 <hal_i2c_end_transmission+0xc>)
   b648c:	681b      	ldr	r3, [r3, #0]
   b648e:	69db      	ldr	r3, [r3, #28]
   b6490:	9301      	str	r3, [sp, #4]
   b6492:	bd08      	pop	{r3, pc}
   b6494:	00030228 	.word	0x00030228

000b6498 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6498:	b508      	push	{r3, lr}
   b649a:	4b02      	ldr	r3, [pc, #8]	; (b64a4 <hal_i2c_write+0xc>)
   b649c:	681b      	ldr	r3, [r3, #0]
   b649e:	6a1b      	ldr	r3, [r3, #32]
   b64a0:	9301      	str	r3, [sp, #4]
   b64a2:	bd08      	pop	{r3, pc}
   b64a4:	00030228 	.word	0x00030228

000b64a8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b64a8:	b508      	push	{r3, lr}
   b64aa:	4b02      	ldr	r3, [pc, #8]	; (b64b4 <hal_i2c_available+0xc>)
   b64ac:	681b      	ldr	r3, [r3, #0]
   b64ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b64b0:	9301      	str	r3, [sp, #4]
   b64b2:	bd08      	pop	{r3, pc}
   b64b4:	00030228 	.word	0x00030228

000b64b8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b64b8:	b508      	push	{r3, lr}
   b64ba:	4b02      	ldr	r3, [pc, #8]	; (b64c4 <hal_i2c_read+0xc>)
   b64bc:	681b      	ldr	r3, [r3, #0]
   b64be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b64c0:	9301      	str	r3, [sp, #4]
   b64c2:	bd08      	pop	{r3, pc}
   b64c4:	00030228 	.word	0x00030228

000b64c8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b64c8:	b508      	push	{r3, lr}
   b64ca:	4b02      	ldr	r3, [pc, #8]	; (b64d4 <hal_i2c_peek+0xc>)
   b64cc:	681b      	ldr	r3, [r3, #0]
   b64ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b64d0:	9301      	str	r3, [sp, #4]
   b64d2:	bd08      	pop	{r3, pc}
   b64d4:	00030228 	.word	0x00030228

000b64d8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b64d8:	b508      	push	{r3, lr}
   b64da:	4b02      	ldr	r3, [pc, #8]	; (b64e4 <hal_i2c_flush+0xc>)
   b64dc:	681b      	ldr	r3, [r3, #0]
   b64de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b64e0:	9301      	str	r3, [sp, #4]
   b64e2:	bd08      	pop	{r3, pc}
   b64e4:	00030228 	.word	0x00030228

000b64e8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b64e8:	b508      	push	{r3, lr}
   b64ea:	4b02      	ldr	r3, [pc, #8]	; (b64f4 <hal_i2c_init+0xc>)
   b64ec:	681b      	ldr	r3, [r3, #0]
   b64ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b64f0:	9301      	str	r3, [sp, #4]
   b64f2:	bd08      	pop	{r3, pc}
   b64f4:	00030228 	.word	0x00030228

000b64f8 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b64f8:	b508      	push	{r3, lr}
   b64fa:	4b02      	ldr	r3, [pc, #8]	; (b6504 <hal_i2c_request_ex+0xc>)
   b64fc:	681b      	ldr	r3, [r3, #0]
   b64fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6500:	9301      	str	r3, [sp, #4]
   b6502:	bd08      	pop	{r3, pc}
   b6504:	00030228 	.word	0x00030228

000b6508 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b6508:	b508      	push	{r3, lr}
   b650a:	4b02      	ldr	r3, [pc, #8]	; (b6514 <if_index_to_name+0xc>)
   b650c:	681b      	ldr	r3, [r3, #0]
   b650e:	695b      	ldr	r3, [r3, #20]
   b6510:	9301      	str	r3, [sp, #4]
   b6512:	bd08      	pop	{r3, pc}
   b6514:	0003026c 	.word	0x0003026c

000b6518 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6518:	b508      	push	{r3, lr}
   b651a:	4b02      	ldr	r3, [pc, #8]	; (b6524 <inet_inet_ntop+0xc>)
   b651c:	681b      	ldr	r3, [r3, #0]
   b651e:	695b      	ldr	r3, [r3, #20]
   b6520:	9301      	str	r3, [sp, #4]
   b6522:	bd08      	pop	{r3, pc}
   b6524:	00030264 	.word	0x00030264

000b6528 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6528:	b508      	push	{r3, lr}
   b652a:	4b02      	ldr	r3, [pc, #8]	; (b6534 <inet_htonl+0xc>)
   b652c:	681b      	ldr	r3, [r3, #0]
   b652e:	6a1b      	ldr	r3, [r3, #32]
   b6530:	9301      	str	r3, [sp, #4]
   b6532:	bd08      	pop	{r3, pc}
   b6534:	00030264 	.word	0x00030264

000b6538 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b6538:	b508      	push	{r3, lr}
   b653a:	4b02      	ldr	r3, [pc, #8]	; (b6544 <inet_htons+0xc>)
   b653c:	681b      	ldr	r3, [r3, #0]
   b653e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6540:	9301      	str	r3, [sp, #4]
   b6542:	bd08      	pop	{r3, pc}
   b6544:	00030264 	.word	0x00030264

000b6548 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6548:	b508      	push	{r3, lr}
   b654a:	4b02      	ldr	r3, [pc, #8]	; (b6554 <netdb_freeaddrinfo+0xc>)
   b654c:	681b      	ldr	r3, [r3, #0]
   b654e:	689b      	ldr	r3, [r3, #8]
   b6550:	9301      	str	r3, [sp, #4]
   b6552:	bd08      	pop	{r3, pc}
   b6554:	00030268 	.word	0x00030268

000b6558 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6558:	b508      	push	{r3, lr}
   b655a:	4b02      	ldr	r3, [pc, #8]	; (b6564 <netdb_getaddrinfo+0xc>)
   b655c:	681b      	ldr	r3, [r3, #0]
   b655e:	68db      	ldr	r3, [r3, #12]
   b6560:	9301      	str	r3, [sp, #4]
   b6562:	bd08      	pop	{r3, pc}
   b6564:	00030268 	.word	0x00030268

000b6568 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6568:	b508      	push	{r3, lr}
   b656a:	4b02      	ldr	r3, [pc, #8]	; (b6574 <sock_setsockopt+0xc>)
   b656c:	681b      	ldr	r3, [r3, #0]
   b656e:	699b      	ldr	r3, [r3, #24]
   b6570:	9301      	str	r3, [sp, #4]
   b6572:	bd08      	pop	{r3, pc}
   b6574:	00030238 	.word	0x00030238

000b6578 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6578:	b508      	push	{r3, lr}
   b657a:	4b02      	ldr	r3, [pc, #8]	; (b6584 <sock_close+0xc>)
   b657c:	681b      	ldr	r3, [r3, #0]
   b657e:	69db      	ldr	r3, [r3, #28]
   b6580:	9301      	str	r3, [sp, #4]
   b6582:	bd08      	pop	{r3, pc}
   b6584:	00030238 	.word	0x00030238

000b6588 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6588:	b508      	push	{r3, lr}
   b658a:	4b02      	ldr	r3, [pc, #8]	; (b6594 <sock_connect+0xc>)
   b658c:	681b      	ldr	r3, [r3, #0]
   b658e:	6a1b      	ldr	r3, [r3, #32]
   b6590:	9301      	str	r3, [sp, #4]
   b6592:	bd08      	pop	{r3, pc}
   b6594:	00030238 	.word	0x00030238

000b6598 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6598:	b508      	push	{r3, lr}
   b659a:	4b02      	ldr	r3, [pc, #8]	; (b65a4 <sock_recv+0xc>)
   b659c:	681b      	ldr	r3, [r3, #0]
   b659e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b65a0:	9301      	str	r3, [sp, #4]
   b65a2:	bd08      	pop	{r3, pc}
   b65a4:	00030238 	.word	0x00030238

000b65a8 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b65a8:	b508      	push	{r3, lr}
   b65aa:	4b02      	ldr	r3, [pc, #8]	; (b65b4 <sock_send+0xc>)
   b65ac:	681b      	ldr	r3, [r3, #0]
   b65ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b65b0:	9301      	str	r3, [sp, #4]
   b65b2:	bd08      	pop	{r3, pc}
   b65b4:	00030238 	.word	0x00030238

000b65b8 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b65b8:	b508      	push	{r3, lr}
   b65ba:	4b02      	ldr	r3, [pc, #8]	; (b65c4 <sock_socket+0xc>)
   b65bc:	681b      	ldr	r3, [r3, #0]
   b65be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b65c0:	9301      	str	r3, [sp, #4]
   b65c2:	bd08      	pop	{r3, pc}
   b65c4:	00030238 	.word	0x00030238

000b65c8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b65c8:	b508      	push	{r3, lr}
   b65ca:	4b02      	ldr	r3, [pc, #8]	; (b65d4 <hal_usart_write+0xc>)
   b65cc:	681b      	ldr	r3, [r3, #0]
   b65ce:	68db      	ldr	r3, [r3, #12]
   b65d0:	9301      	str	r3, [sp, #4]
   b65d2:	bd08      	pop	{r3, pc}
   b65d4:	0003023c 	.word	0x0003023c

000b65d8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b65d8:	b508      	push	{r3, lr}
   b65da:	4b02      	ldr	r3, [pc, #8]	; (b65e4 <hal_usart_available+0xc>)
   b65dc:	681b      	ldr	r3, [r3, #0]
   b65de:	691b      	ldr	r3, [r3, #16]
   b65e0:	9301      	str	r3, [sp, #4]
   b65e2:	bd08      	pop	{r3, pc}
   b65e4:	0003023c 	.word	0x0003023c

000b65e8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b65e8:	b508      	push	{r3, lr}
   b65ea:	4b02      	ldr	r3, [pc, #8]	; (b65f4 <hal_usart_read+0xc>)
   b65ec:	681b      	ldr	r3, [r3, #0]
   b65ee:	695b      	ldr	r3, [r3, #20]
   b65f0:	9301      	str	r3, [sp, #4]
   b65f2:	bd08      	pop	{r3, pc}
   b65f4:	0003023c 	.word	0x0003023c

000b65f8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b65f8:	b508      	push	{r3, lr}
   b65fa:	4b02      	ldr	r3, [pc, #8]	; (b6604 <hal_usart_peek+0xc>)
   b65fc:	681b      	ldr	r3, [r3, #0]
   b65fe:	699b      	ldr	r3, [r3, #24]
   b6600:	9301      	str	r3, [sp, #4]
   b6602:	bd08      	pop	{r3, pc}
   b6604:	0003023c 	.word	0x0003023c

000b6608 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6608:	b508      	push	{r3, lr}
   b660a:	4b02      	ldr	r3, [pc, #8]	; (b6614 <hal_usart_flush+0xc>)
   b660c:	681b      	ldr	r3, [r3, #0]
   b660e:	69db      	ldr	r3, [r3, #28]
   b6610:	9301      	str	r3, [sp, #4]
   b6612:	bd08      	pop	{r3, pc}
   b6614:	0003023c 	.word	0x0003023c

000b6618 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6618:	b508      	push	{r3, lr}
   b661a:	4b02      	ldr	r3, [pc, #8]	; (b6624 <hal_usart_available_data_for_write+0xc>)
   b661c:	681b      	ldr	r3, [r3, #0]
   b661e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6620:	9301      	str	r3, [sp, #4]
   b6622:	bd08      	pop	{r3, pc}
   b6624:	0003023c 	.word	0x0003023c

000b6628 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6628:	b508      	push	{r3, lr}
   b662a:	4b02      	ldr	r3, [pc, #8]	; (b6634 <hal_usart_init_ex+0xc>)
   b662c:	681b      	ldr	r3, [r3, #0]
   b662e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6630:	9301      	str	r3, [sp, #4]
   b6632:	bd08      	pop	{r3, pc}
   b6634:	0003023c 	.word	0x0003023c

000b6638 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6638:	b508      	push	{r3, lr}
   b663a:	4b02      	ldr	r3, [pc, #8]	; (b6644 <HAL_USB_USART_Init+0xc>)
   b663c:	681b      	ldr	r3, [r3, #0]
   b663e:	681b      	ldr	r3, [r3, #0]
   b6640:	9301      	str	r3, [sp, #4]
   b6642:	bd08      	pop	{r3, pc}
   b6644:	0003024c 	.word	0x0003024c

000b6648 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6648:	b508      	push	{r3, lr}
   b664a:	4b02      	ldr	r3, [pc, #8]	; (b6654 <HAL_USB_USART_Begin+0xc>)
   b664c:	681b      	ldr	r3, [r3, #0]
   b664e:	685b      	ldr	r3, [r3, #4]
   b6650:	9301      	str	r3, [sp, #4]
   b6652:	bd08      	pop	{r3, pc}
   b6654:	0003024c 	.word	0x0003024c

000b6658 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6658:	b508      	push	{r3, lr}
   b665a:	4b02      	ldr	r3, [pc, #8]	; (b6664 <HAL_USB_USART_Available_Data+0xc>)
   b665c:	681b      	ldr	r3, [r3, #0]
   b665e:	691b      	ldr	r3, [r3, #16]
   b6660:	9301      	str	r3, [sp, #4]
   b6662:	bd08      	pop	{r3, pc}
   b6664:	0003024c 	.word	0x0003024c

000b6668 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6668:	b508      	push	{r3, lr}
   b666a:	4b02      	ldr	r3, [pc, #8]	; (b6674 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b666c:	681b      	ldr	r3, [r3, #0]
   b666e:	695b      	ldr	r3, [r3, #20]
   b6670:	9301      	str	r3, [sp, #4]
   b6672:	bd08      	pop	{r3, pc}
   b6674:	0003024c 	.word	0x0003024c

000b6678 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6678:	b508      	push	{r3, lr}
   b667a:	4b02      	ldr	r3, [pc, #8]	; (b6684 <HAL_USB_USART_Receive_Data+0xc>)
   b667c:	681b      	ldr	r3, [r3, #0]
   b667e:	699b      	ldr	r3, [r3, #24]
   b6680:	9301      	str	r3, [sp, #4]
   b6682:	bd08      	pop	{r3, pc}
   b6684:	0003024c 	.word	0x0003024c

000b6688 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6688:	b508      	push	{r3, lr}
   b668a:	4b02      	ldr	r3, [pc, #8]	; (b6694 <HAL_USB_USART_Send_Data+0xc>)
   b668c:	681b      	ldr	r3, [r3, #0]
   b668e:	69db      	ldr	r3, [r3, #28]
   b6690:	9301      	str	r3, [sp, #4]
   b6692:	bd08      	pop	{r3, pc}
   b6694:	0003024c 	.word	0x0003024c

000b6698 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6698:	b508      	push	{r3, lr}
   b669a:	4b02      	ldr	r3, [pc, #8]	; (b66a4 <HAL_USB_USART_Flush_Data+0xc>)
   b669c:	681b      	ldr	r3, [r3, #0]
   b669e:	6a1b      	ldr	r3, [r3, #32]
   b66a0:	9301      	str	r3, [sp, #4]
   b66a2:	bd08      	pop	{r3, pc}
   b66a4:	0003024c 	.word	0x0003024c

000b66a8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b66a8:	b508      	push	{r3, lr}
   b66aa:	4b02      	ldr	r3, [pc, #8]	; (b66b4 <panic_+0xc>)
   b66ac:	681b      	ldr	r3, [r3, #0]
   b66ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b66b0:	9301      	str	r3, [sp, #4]
   b66b2:	bd08      	pop	{r3, pc}
   b66b4:	00030260 	.word	0x00030260

000b66b8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b66b8:	b508      	push	{r3, lr}
   b66ba:	4b02      	ldr	r3, [pc, #8]	; (b66c4 <log_message+0xc>)
   b66bc:	681b      	ldr	r3, [r3, #0]
   b66be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b66c0:	9301      	str	r3, [sp, #4]
   b66c2:	bd08      	pop	{r3, pc}
   b66c4:	00030260 	.word	0x00030260

000b66c8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b66c8:	b508      	push	{r3, lr}
   b66ca:	4b02      	ldr	r3, [pc, #8]	; (b66d4 <set_system_mode+0xc>)
   b66cc:	681b      	ldr	r3, [r3, #0]
   b66ce:	685b      	ldr	r3, [r3, #4]
   b66d0:	9301      	str	r3, [sp, #4]
   b66d2:	bd08      	pop	{r3, pc}
   b66d4:	00030220 	.word	0x00030220

000b66d8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b66d8:	b508      	push	{r3, lr}
   b66da:	4b02      	ldr	r3, [pc, #8]	; (b66e4 <system_delay_ms+0xc>)
   b66dc:	681b      	ldr	r3, [r3, #0]
   b66de:	695b      	ldr	r3, [r3, #20]
   b66e0:	9301      	str	r3, [sp, #4]
   b66e2:	bd08      	pop	{r3, pc}
   b66e4:	00030220 	.word	0x00030220

000b66e8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b66e8:	b508      	push	{r3, lr}
   b66ea:	4b03      	ldr	r3, [pc, #12]	; (b66f8 <system_ctrl_set_app_request_handler+0x10>)
   b66ec:	681b      	ldr	r3, [r3, #0]
   b66ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b66f2:	9301      	str	r3, [sp, #4]
   b66f4:	bd08      	pop	{r3, pc}
   b66f6:	0000      	.short	0x0000
   b66f8:	00030220 	.word	0x00030220

000b66fc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b66fc:	b508      	push	{r3, lr}
   b66fe:	4b03      	ldr	r3, [pc, #12]	; (b670c <system_ctrl_set_result+0x10>)
   b6700:	681b      	ldr	r3, [r3, #0]
   b6702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6706:	9301      	str	r3, [sp, #4]
   b6708:	bd08      	pop	{r3, pc}
   b670a:	0000      	.short	0x0000
   b670c:	00030220 	.word	0x00030220

000b6710 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6710:	b508      	push	{r3, lr}
   b6712:	4b02      	ldr	r3, [pc, #8]	; (b671c <spark_set_random_seed_from_cloud_handler+0xc>)
   b6714:	681b      	ldr	r3, [r3, #0]
   b6716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6718:	9301      	str	r3, [sp, #4]
   b671a:	bd08      	pop	{r3, pc}
   b671c:	00030244 	.word	0x00030244

000b6720 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6720:	b508      	push	{r3, lr}
   b6722:	4b02      	ldr	r3, [pc, #8]	; (b672c <network_connect+0xc>)
   b6724:	681b      	ldr	r3, [r3, #0]
   b6726:	685b      	ldr	r3, [r3, #4]
   b6728:	9301      	str	r3, [sp, #4]
   b672a:	bd08      	pop	{r3, pc}
   b672c:	00030240 	.word	0x00030240

000b6730 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6730:	b508      	push	{r3, lr}
   b6732:	4b02      	ldr	r3, [pc, #8]	; (b673c <network_connecting+0xc>)
   b6734:	681b      	ldr	r3, [r3, #0]
   b6736:	689b      	ldr	r3, [r3, #8]
   b6738:	9301      	str	r3, [sp, #4]
   b673a:	bd08      	pop	{r3, pc}
   b673c:	00030240 	.word	0x00030240

000b6740 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6740:	b508      	push	{r3, lr}
   b6742:	4b02      	ldr	r3, [pc, #8]	; (b674c <network_disconnect+0xc>)
   b6744:	681b      	ldr	r3, [r3, #0]
   b6746:	68db      	ldr	r3, [r3, #12]
   b6748:	9301      	str	r3, [sp, #4]
   b674a:	bd08      	pop	{r3, pc}
   b674c:	00030240 	.word	0x00030240

000b6750 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6750:	b508      	push	{r3, lr}
   b6752:	4b02      	ldr	r3, [pc, #8]	; (b675c <network_ready+0xc>)
   b6754:	681b      	ldr	r3, [r3, #0]
   b6756:	691b      	ldr	r3, [r3, #16]
   b6758:	9301      	str	r3, [sp, #4]
   b675a:	bd08      	pop	{r3, pc}
   b675c:	00030240 	.word	0x00030240

000b6760 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6760:	b508      	push	{r3, lr}
   b6762:	4b02      	ldr	r3, [pc, #8]	; (b676c <network_on+0xc>)
   b6764:	681b      	ldr	r3, [r3, #0]
   b6766:	695b      	ldr	r3, [r3, #20]
   b6768:	9301      	str	r3, [sp, #4]
   b676a:	bd08      	pop	{r3, pc}
   b676c:	00030240 	.word	0x00030240

000b6770 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6770:	b508      	push	{r3, lr}
   b6772:	4b02      	ldr	r3, [pc, #8]	; (b677c <network_off+0xc>)
   b6774:	681b      	ldr	r3, [r3, #0]
   b6776:	699b      	ldr	r3, [r3, #24]
   b6778:	9301      	str	r3, [sp, #4]
   b677a:	bd08      	pop	{r3, pc}
   b677c:	00030240 	.word	0x00030240

000b6780 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6780:	b508      	push	{r3, lr}
   b6782:	4b02      	ldr	r3, [pc, #8]	; (b678c <network_listen+0xc>)
   b6784:	681b      	ldr	r3, [r3, #0]
   b6786:	69db      	ldr	r3, [r3, #28]
   b6788:	9301      	str	r3, [sp, #4]
   b678a:	bd08      	pop	{r3, pc}
   b678c:	00030240 	.word	0x00030240

000b6790 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6790:	b508      	push	{r3, lr}
   b6792:	4b02      	ldr	r3, [pc, #8]	; (b679c <network_listening+0xc>)
   b6794:	681b      	ldr	r3, [r3, #0]
   b6796:	6a1b      	ldr	r3, [r3, #32]
   b6798:	9301      	str	r3, [sp, #4]
   b679a:	bd08      	pop	{r3, pc}
   b679c:	00030240 	.word	0x00030240

000b67a0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b67a0:	b508      	push	{r3, lr}
   b67a2:	4b02      	ldr	r3, [pc, #8]	; (b67ac <network_set_listen_timeout+0xc>)
   b67a4:	681b      	ldr	r3, [r3, #0]
   b67a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b67a8:	9301      	str	r3, [sp, #4]
   b67aa:	bd08      	pop	{r3, pc}
   b67ac:	00030240 	.word	0x00030240

000b67b0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b67b0:	b508      	push	{r3, lr}
   b67b2:	4b02      	ldr	r3, [pc, #8]	; (b67bc <network_get_listen_timeout+0xc>)
   b67b4:	681b      	ldr	r3, [r3, #0]
   b67b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b67b8:	9301      	str	r3, [sp, #4]
   b67ba:	bd08      	pop	{r3, pc}
   b67bc:	00030240 	.word	0x00030240

000b67c0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b67c0:	b508      	push	{r3, lr}
   b67c2:	4b02      	ldr	r3, [pc, #8]	; (b67cc <network_is_on+0xc>)
   b67c4:	681b      	ldr	r3, [r3, #0]
   b67c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b67c8:	9301      	str	r3, [sp, #4]
   b67ca:	bd08      	pop	{r3, pc}
   b67cc:	00030240 	.word	0x00030240

000b67d0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b67d0:	b508      	push	{r3, lr}
   b67d2:	4b02      	ldr	r3, [pc, #8]	; (b67dc <network_is_off+0xc>)
   b67d4:	681b      	ldr	r3, [r3, #0]
   b67d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b67d8:	9301      	str	r3, [sp, #4]
   b67da:	bd08      	pop	{r3, pc}
   b67dc:	00030240 	.word	0x00030240

000b67e0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b67e0:	b508      	push	{r3, lr}
   b67e2:	4b02      	ldr	r3, [pc, #8]	; (b67ec <malloc+0xc>)
   b67e4:	681b      	ldr	r3, [r3, #0]
   b67e6:	681b      	ldr	r3, [r3, #0]
   b67e8:	9301      	str	r3, [sp, #4]
   b67ea:	bd08      	pop	{r3, pc}
   b67ec:	0003021c 	.word	0x0003021c

000b67f0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b67f0:	b508      	push	{r3, lr}
   b67f2:	4b02      	ldr	r3, [pc, #8]	; (b67fc <free+0xc>)
   b67f4:	681b      	ldr	r3, [r3, #0]
   b67f6:	685b      	ldr	r3, [r3, #4]
   b67f8:	9301      	str	r3, [sp, #4]
   b67fa:	bd08      	pop	{r3, pc}
   b67fc:	0003021c 	.word	0x0003021c

000b6800 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6800:	b508      	push	{r3, lr}
   b6802:	4b02      	ldr	r3, [pc, #8]	; (b680c <realloc+0xc>)
   b6804:	681b      	ldr	r3, [r3, #0]
   b6806:	689b      	ldr	r3, [r3, #8]
   b6808:	9301      	str	r3, [sp, #4]
   b680a:	bd08      	pop	{r3, pc}
   b680c:	0003021c 	.word	0x0003021c

000b6810 <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b6810:	b508      	push	{r3, lr}
   b6812:	4b02      	ldr	r3, [pc, #8]	; (b681c <sscanf+0xc>)
   b6814:	681b      	ldr	r3, [r3, #0]
   b6816:	695b      	ldr	r3, [r3, #20]
   b6818:	9301      	str	r3, [sp, #4]
   b681a:	bd08      	pop	{r3, pc}
   b681c:	0003021c 	.word	0x0003021c

000b6820 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6820:	b508      	push	{r3, lr}
   b6822:	4b02      	ldr	r3, [pc, #8]	; (b682c <abort+0xc>)
   b6824:	681b      	ldr	r3, [r3, #0]
   b6826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6828:	9301      	str	r3, [sp, #4]
   b682a:	bd08      	pop	{r3, pc}
   b682c:	0003021c 	.word	0x0003021c

000b6830 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b6830:	b508      	push	{r3, lr}
   b6832:	4b02      	ldr	r3, [pc, #8]	; (b683c <_malloc_r+0xc>)
   b6834:	681b      	ldr	r3, [r3, #0]
   b6836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6838:	9301      	str	r3, [sp, #4]
   b683a:	bd08      	pop	{r3, pc}
   b683c:	0003021c 	.word	0x0003021c

000b6840 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6840:	b508      	push	{r3, lr}
   b6842:	4b02      	ldr	r3, [pc, #8]	; (b684c <__errno+0xc>)
   b6844:	681b      	ldr	r3, [r3, #0]
   b6846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6848:	9301      	str	r3, [sp, #4]
   b684a:	bd08      	pop	{r3, pc}
   b684c:	0003021c 	.word	0x0003021c

000b6850 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6850:	b508      	push	{r3, lr}
   b6852:	4b02      	ldr	r3, [pc, #8]	; (b685c <__assert_func+0xc>)
   b6854:	681b      	ldr	r3, [r3, #0]
   b6856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6858:	9301      	str	r3, [sp, #4]
   b685a:	bd08      	pop	{r3, pc}
   b685c:	0003021c 	.word	0x0003021c

000b6860 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6860:	b508      	push	{r3, lr}
   b6862:	4b02      	ldr	r3, [pc, #8]	; (b686c <newlib_impure_ptr_callback+0xc>)
   b6864:	681b      	ldr	r3, [r3, #0]
   b6866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6868:	9301      	str	r3, [sp, #4]
   b686a:	bd08      	pop	{r3, pc}
   b686c:	0003021c 	.word	0x0003021c

000b6870 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6870:	2100      	movs	r1, #0
   b6872:	f7ff bf31 	b.w	b66d8 <system_delay_ms>

000b6876 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6876:	4770      	bx	lr

000b6878 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b6878:	4770      	bx	lr

000b687a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b687a:	4770      	bx	lr

000b687c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b687c:	4770      	bx	lr
	...

000b6880 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6880:	4b06      	ldr	r3, [pc, #24]	; (b689c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6882:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6884:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6886:	f100 040c 	add.w	r4, r0, #12
	    ||
   b688a:	d005      	beq.n	b6898 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b688c:	4608      	mov	r0, r1
   b688e:	f002 faef 	bl	b8e70 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6892:	2800      	cmp	r0, #0
   b6894:	bf08      	it	eq
   b6896:	2400      	moveq	r4, #0
      }
   b6898:	4620      	mov	r0, r4
   b689a:	bd10      	pop	{r4, pc}
   b689c:	000bc468 	.word	0x000bc468

000b68a0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b68a0:	4b06      	ldr	r3, [pc, #24]	; (b68bc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b68a2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b68a4:	b510      	push	{r4, lr}
   b68a6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b68aa:	d005      	beq.n	b68b8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b68ac:	4608      	mov	r0, r1
   b68ae:	f002 fadf 	bl	b8e70 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b68b2:	2800      	cmp	r0, #0
   b68b4:	bf08      	it	eq
   b68b6:	2400      	moveq	r4, #0
      }
   b68b8:	4620      	mov	r0, r4
   b68ba:	bd10      	pop	{r4, pc}
   b68bc:	000bc468 	.word	0x000bc468

000b68c0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b68c0:	4b06      	ldr	r3, [pc, #24]	; (b68dc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b68c2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b68c4:	b510      	push	{r4, lr}
   b68c6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b68ca:	d005      	beq.n	b68d8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b68cc:	4608      	mov	r0, r1
   b68ce:	f002 facf 	bl	b8e70 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b68d2:	2800      	cmp	r0, #0
   b68d4:	bf08      	it	eq
   b68d6:	2400      	moveq	r4, #0
      }
   b68d8:	4620      	mov	r0, r4
   b68da:	bd10      	pop	{r4, pc}
   b68dc:	000bc468 	.word	0x000bc468

000b68e0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b68e0:	b510      	push	{r4, lr}
   b68e2:	2168      	movs	r1, #104	; 0x68
   b68e4:	4604      	mov	r4, r0
   b68e6:	f7fd fbda 	bl	b409e <_ZdlPvj>
   b68ea:	4620      	mov	r0, r4
   b68ec:	bd10      	pop	{r4, pc}

000b68ee <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b68ee:	b510      	push	{r4, lr}
   b68f0:	2128      	movs	r1, #40	; 0x28
   b68f2:	4604      	mov	r4, r0
   b68f4:	f7fd fbd3 	bl	b409e <_ZdlPvj>
   b68f8:	4620      	mov	r0, r4
   b68fa:	bd10      	pop	{r4, pc}

000b68fc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b68fc:	b510      	push	{r4, lr}
   b68fe:	2130      	movs	r1, #48	; 0x30
   b6900:	4604      	mov	r4, r0
   b6902:	f7fd fbcc 	bl	b409e <_ZdlPvj>
   b6906:	4620      	mov	r0, r4
   b6908:	bd10      	pop	{r4, pc}

000b690a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b690a:	2168      	movs	r1, #104	; 0x68
   b690c:	f7fd bbc7 	b.w	b409e <_ZdlPvj>

000b6910 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6910:	2128      	movs	r1, #40	; 0x28
   b6912:	f7fd bbc4 	b.w	b409e <_ZdlPvj>

000b6916 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6916:	2130      	movs	r1, #48	; 0x30
   b6918:	f7fd bbc1 	b.w	b409e <_ZdlPvj>

000b691c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b691c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b691e:	2500      	movs	r5, #0
   b6920:	1cec      	adds	r4, r5, #3
   b6922:	428c      	cmp	r4, r1
   b6924:	d80d      	bhi.n	b6942 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b6926:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b6928:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b692a:	5d87      	ldrb	r7, [r0, r6]
   b692c:	4297      	cmp	r7, r2
   b692e:	d105      	bne.n	b693c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b6930:	4426      	add	r6, r4
   b6932:	42b1      	cmp	r1, r6
   b6934:	d305      	bcc.n	b6942 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b6936:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b6938:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b693a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b693c:	3401      	adds	r4, #1
   b693e:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6940:	e7ee      	b.n	b6920 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b6942:	2000      	movs	r0, #0
   b6944:	e7f9      	b.n	b693a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b6948 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b6948:	4a02      	ldr	r2, [pc, #8]	; (b6954 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b694a:	4903      	ldr	r1, [pc, #12]	; (b6958 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b694c:	200a      	movs	r0, #10
   b694e:	f7ff beab 	b.w	b66a8 <panic_>
   b6952:	bf00      	nop
   b6954:	000b6439 	.word	0x000b6439
   b6958:	000bc2c8 	.word	0x000bc2c8

000b695c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b695c:	b430      	push	{r4, r5}
   b695e:	460d      	mov	r5, r1
   b6960:	4611      	mov	r1, r2
   b6962:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b6964:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b6966:	6809      	ldr	r1, [r1, #0]
   b6968:	6828      	ldr	r0, [r5, #0]
   b696a:	e9d3 4300 	ldrd	r4, r3, [r3]
   b696e:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b6970:	bc30      	pop	{r4, r5}
   b6972:	4760      	bx	ip

000b6974 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b6974:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6976:	b538      	push	{r3, r4, r5, lr}
   b6978:	4604      	mov	r4, r0
	switch (__op)
   b697a:	d102      	bne.n	b6982 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b697c:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b697e:	6023      	str	r3, [r4, #0]
	}
   b6980:	e003      	b.n	b698a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b6982:	2a02      	cmp	r2, #2
   b6984:	d003      	beq.n	b698e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b6986:	2a03      	cmp	r2, #3
   b6988:	d00d      	beq.n	b69a6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b698a:	2000      	movs	r0, #0
   b698c:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b698e:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b6990:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6992:	f7fd fb80 	bl	b4096 <_Znwj>
   b6996:	4603      	mov	r3, r0
   b6998:	2800      	cmp	r0, #0
   b699a:	d0f0      	beq.n	b697e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b699c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b69a0:	e883 0003 	stmia.w	r3, {r0, r1}
   b69a4:	e7eb      	b.n	b697e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b69a6:	6800      	ldr	r0, [r0, #0]
   b69a8:	2800      	cmp	r0, #0
   b69aa:	d0ee      	beq.n	b698a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b69ac:	2108      	movs	r1, #8
   b69ae:	f7fd fb76 	bl	b409e <_ZdlPvj>
   b69b2:	e7ea      	b.n	b698a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b69b4 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b69b4:	b510      	push	{r4, lr}
      if (_M_manager)
   b69b6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b69b8:	4604      	mov	r4, r0
      if (_M_manager)
   b69ba:	b113      	cbz	r3, b69c2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b69bc:	2203      	movs	r2, #3
   b69be:	4601      	mov	r1, r0
   b69c0:	4798      	blx	r3
    }
   b69c2:	4620      	mov	r0, r4
   b69c4:	bd10      	pop	{r4, pc}

000b69c6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b69c6:	b510      	push	{r4, lr}
   b69c8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b69ca:	3058      	adds	r0, #88	; 0x58
   b69cc:	f7ff fff2 	bl	b69b4 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b69d0:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b69d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b69d8:	f001 bb68 	b.w	b80ac <_ZN6StringD1Ev>

000b69dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b69dc:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b69de:	6843      	ldr	r3, [r0, #4]
   b69e0:	3b01      	subs	r3, #1
    {
   b69e2:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b69e4:	6043      	str	r3, [r0, #4]
   b69e6:	b963      	cbnz	r3, b6a02 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b69e8:	6803      	ldr	r3, [r0, #0]
   b69ea:	689b      	ldr	r3, [r3, #8]
   b69ec:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b69ee:	68a3      	ldr	r3, [r4, #8]
   b69f0:	3b01      	subs	r3, #1
   b69f2:	60a3      	str	r3, [r4, #8]
   b69f4:	b92b      	cbnz	r3, b6a02 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b69f6:	6823      	ldr	r3, [r4, #0]
   b69f8:	4620      	mov	r0, r4
   b69fa:	68db      	ldr	r3, [r3, #12]
    }
   b69fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b6a00:	4718      	bx	r3
    }
   b6a02:	bd10      	pop	{r4, pc}

000b6a04 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b6a04:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6a08:	b2da      	uxtb	r2, r3
   b6a0a:	2a09      	cmp	r2, #9
   b6a0c:	d801      	bhi.n	b6a12 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b6a0e:	4618      	mov	r0, r3
   b6a10:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b6a12:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b6a16:	2b05      	cmp	r3, #5
   b6a18:	d801      	bhi.n	b6a1e <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b6a1a:	3857      	subs	r0, #87	; 0x57
   b6a1c:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b6a1e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b6a22:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b6a24:	bf94      	ite	ls
   b6a26:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b6a28:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b6a2c:	4770      	bx	lr
	...

000b6a30 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b6a30:	b510      	push	{r4, lr}
            locked_(false) {
   b6a32:	2300      	movs	r3, #0
   b6a34:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b6a36:	4b04      	ldr	r3, [pc, #16]	; (b6a48 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b6a38:	4604      	mov	r4, r0
   b6a3a:	6818      	ldr	r0, [r3, #0]
   b6a3c:	f7ff fce4 	bl	b6408 <os_mutex_recursive_lock>
        locked_ = true;
   b6a40:	2301      	movs	r3, #1
   b6a42:	7023      	strb	r3, [r4, #0]
    }
   b6a44:	4620      	mov	r0, r4
   b6a46:	bd10      	pop	{r4, pc}
   b6a48:	2003e6c0 	.word	0x2003e6c0

000b6a4c <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b6a4c:	b510      	push	{r4, lr}
        if (locked_) {
   b6a4e:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b6a50:	4604      	mov	r4, r0
        if (locked_) {
   b6a52:	b11b      	cbz	r3, b6a5c <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b6a54:	4b02      	ldr	r3, [pc, #8]	; (b6a60 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b6a56:	6818      	ldr	r0, [r3, #0]
   b6a58:	f7ff fcde 	bl	b6418 <os_mutex_recursive_unlock>
    }
   b6a5c:	4620      	mov	r0, r4
   b6a5e:	bd10      	pop	{r4, pc}
   b6a60:	2003e6c0 	.word	0x2003e6c0

000b6a64 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b6a64:	b082      	sub	sp, #8
   b6a66:	4603      	mov	r3, r0
    address_ = addr;
   b6a68:	6808      	ldr	r0, [r1, #0]
   b6a6a:	6849      	ldr	r1, [r1, #4]
   b6a6c:	466a      	mov	r2, sp
   b6a6e:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b6a70:	466a      	mov	r2, sp
   b6a72:	ca03      	ldmia	r2!, {r0, r1}
   b6a74:	6018      	str	r0, [r3, #0]
}
   b6a76:	4618      	mov	r0, r3
    address_ = addr.address_;
   b6a78:	6059      	str	r1, [r3, #4]
}
   b6a7a:	b002      	add	sp, #8
   b6a7c:	4770      	bx	lr

000b6a7e <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b6a7e:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b6a80:	7982      	ldrb	r2, [r0, #6]
   b6a82:	798b      	ldrb	r3, [r1, #6]
   b6a84:	429a      	cmp	r2, r3
   b6a86:	d106      	bne.n	b6a96 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b6a88:	2206      	movs	r2, #6
   b6a8a:	f003 f9ec 	bl	b9e66 <memcmp>
   b6a8e:	fab0 f080 	clz	r0, r0
   b6a92:	0940      	lsrs	r0, r0, #5
}
   b6a94:	bd08      	pop	{r3, pc}
    return false;
   b6a96:	2000      	movs	r0, #0
   b6a98:	e7fc      	b.n	b6a94 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b6a9a <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b6a9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6a9e:	6003      	str	r3, [r0, #0]
   b6aa0:	8083      	strh	r3, [r0, #4]
}
   b6aa2:	2000      	movs	r0, #0
   b6aa4:	4770      	bx	lr

000b6aa6 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b6aa6:	b508      	push	{r3, lr}
   b6aa8:	4602      	mov	r2, r0
        : address_{} {
   b6aaa:	2100      	movs	r1, #0
   b6aac:	6001      	str	r1, [r0, #0]
   b6aae:	6041      	str	r1, [r0, #4]
    clear();
   b6ab0:	f7ff fff3 	bl	b6a9a <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b6ab4:	7191      	strb	r1, [r2, #6]
}
   b6ab6:	4610      	mov	r0, r2
   b6ab8:	bd08      	pop	{r3, pc}
	...

000b6abc <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b6abc:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b6abe:	2301      	movs	r3, #1
   b6ac0:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6ac2:	4b05      	ldr	r3, [pc, #20]	; (b6ad8 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b6ac4:	4602      	mov	r2, r0
   b6ac6:	f103 0110 	add.w	r1, r3, #16
   b6aca:	f853 4b04 	ldr.w	r4, [r3], #4
   b6ace:	f842 4b04 	str.w	r4, [r2], #4
   b6ad2:	428b      	cmp	r3, r1
   b6ad4:	d1f9      	bne.n	b6aca <_ZN8particle7BleUuidC1Ev+0xe>
}
   b6ad6:	bd10      	pop	{r4, pc}
   b6ad8:	000bc476 	.word	0x000bc476

000b6adc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6adc:	b510      	push	{r4, lr}
    if (uuid128) {
   b6ade:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6ae0:	4604      	mov	r4, r0
    if (uuid128) {
   b6ae2:	b1b1      	cbz	r1, b6b12 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b6ae4:	2a01      	cmp	r2, #1
   b6ae6:	f101 0210 	add.w	r2, r1, #16
   b6aea:	d10a      	bne.n	b6b02 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b6aec:	4601      	mov	r1, r0
   b6aee:	f853 0b04 	ldr.w	r0, [r3], #4
   b6af2:	f841 0b04 	str.w	r0, [r1], #4
   b6af6:	4293      	cmp	r3, r2
   b6af8:	d1f9      	bne.n	b6aee <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b6afa:	2301      	movs	r3, #1
   b6afc:	6123      	str	r3, [r4, #16]
}
   b6afe:	4620      	mov	r0, r4
   b6b00:	bd10      	pop	{r4, pc}
   b6b02:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b6b04:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b6b08:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b6b0c:	429a      	cmp	r2, r3
   b6b0e:	d1f9      	bne.n	b6b04 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b6b10:	e7f3      	b.n	b6afa <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b6b12:	2210      	movs	r2, #16
   b6b14:	f003 f9df 	bl	b9ed6 <memset>
   b6b18:	e7f1      	b.n	b6afe <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b6b1a <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b6b1a:	b538      	push	{r3, r4, r5, lr}
   b6b1c:	4604      	mov	r4, r0
   b6b1e:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b6b20:	461a      	mov	r2, r3
   b6b22:	f7ff ffdb 	bl	b6adc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b6b26:	81a5      	strh	r5, [r4, #12]
}
   b6b28:	4620      	mov	r0, r4
   b6b2a:	bd38      	pop	{r3, r4, r5, pc}

000b6b2c <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b6b2c:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b6b2e:	6902      	ldr	r2, [r0, #16]
   b6b30:	b922      	cbnz	r2, b6b3c <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b6b32:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6b34:	3800      	subs	r0, #0
   b6b36:	bf18      	it	ne
   b6b38:	2001      	movne	r0, #1
}
   b6b3a:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6b3c:	4902      	ldr	r1, [pc, #8]	; (b6b48 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b6b3e:	2210      	movs	r2, #16
   b6b40:	f003 f991 	bl	b9e66 <memcmp>
   b6b44:	e7f6      	b.n	b6b34 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b6b46:	bf00      	nop
   b6b48:	000bc496 	.word	0x000bc496

000b6b4c <_ZNK8particle7BleUuid4typeEv>:
}
   b6b4c:	6900      	ldr	r0, [r0, #16]
   b6b4e:	4770      	bx	lr

000b6b50 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b6b50:	b538      	push	{r3, r4, r5, lr}
   b6b52:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b6b54:	2214      	movs	r2, #20
   b6b56:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b6b58:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b6b5a:	f003 f9bc 	bl	b9ed6 <memset>
    if (type_ == BleUuidType::SHORT) {
   b6b5e:	6923      	ldr	r3, [r4, #16]
   b6b60:	b91b      	cbnz	r3, b6b6a <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b6b62:	89a3      	ldrh	r3, [r4, #12]
   b6b64:	802b      	strh	r3, [r5, #0]
}
   b6b66:	4628      	mov	r0, r5
   b6b68:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b6b6a:	2301      	movs	r3, #1
   b6b6c:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b6b6e:	4621      	mov	r1, r4
   b6b70:	462b      	mov	r3, r5
   b6b72:	f104 0210 	add.w	r2, r4, #16
   b6b76:	f851 0b04 	ldr.w	r0, [r1], #4
   b6b7a:	f843 0b04 	str.w	r0, [r3], #4
   b6b7e:	4291      	cmp	r1, r2
   b6b80:	d1f9      	bne.n	b6b76 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b6b82:	e7f0      	b.n	b6b66 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b6b84 <_ZNK8particle7BleUuid7shortedEv>:
}
   b6b84:	8980      	ldrh	r0, [r0, #12]
   b6b86:	4770      	bx	lr

000b6b88 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b6b88:	4770      	bx	lr

000b6b8a <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b6b8a:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6b8c:	6902      	ldr	r2, [r0, #16]
   b6b8e:	690b      	ldr	r3, [r1, #16]
   b6b90:	429a      	cmp	r2, r3
   b6b92:	d106      	bne.n	b6ba2 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b6b94:	2210      	movs	r2, #16
   b6b96:	f003 f966 	bl	b9e66 <memcmp>
   b6b9a:	fab0 f080 	clz	r0, r0
   b6b9e:	0940      	lsrs	r0, r0, #5
}
   b6ba0:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6ba2:	2000      	movs	r0, #0
   b6ba4:	e7fc      	b.n	b6ba0 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b6ba8 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b6ba8:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b6baa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b6bae:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6bb0:	4b34      	ldr	r3, [pc, #208]	; (b6c84 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b6bb2:	460c      	mov	r4, r1
   b6bb4:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6bb6:	4602      	mov	r2, r0
   b6bb8:	f103 0110 	add.w	r1, r3, #16
   b6bbc:	f853 0b04 	ldr.w	r0, [r3], #4
   b6bc0:	f842 0b04 	str.w	r0, [r2], #4
   b6bc4:	428b      	cmp	r3, r1
   b6bc6:	d1f9      	bne.n	b6bbc <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b6bc8:	b344      	cbz	r4, b6c1c <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b6bca:	2124      	movs	r1, #36	; 0x24
   b6bcc:	4620      	mov	r0, r4
   b6bce:	f003 f9e7 	bl	b9fa0 <strnlen>
   b6bd2:	2804      	cmp	r0, #4
   b6bd4:	f04f 0500 	mov.w	r5, #0
   b6bd8:	d123      	bne.n	b6c22 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b6bda:	f8ad 5004 	strh.w	r5, [sp, #4]
   b6bde:	af01      	add	r7, sp, #4
   b6be0:	1ca5      	adds	r5, r4, #2
   b6be2:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b6be4:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b6be8:	f7ff ff0c 	bl	b6a04 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b6bec:	f1b0 0800 	subs.w	r8, r0, #0
   b6bf0:	db12      	blt.n	b6c18 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b6bf2:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b6bf6:	f7ff ff05 	bl	b6a04 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b6bfa:	2800      	cmp	r0, #0
   b6bfc:	db0c      	blt.n	b6c18 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b6bfe:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6c00:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b6c04:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6c06:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b6c0a:	d1eb      	bne.n	b6be4 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b6c0c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b6c10:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b6c12:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b6c16:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b6c18:	2300      	movs	r3, #0
   b6c1a:	6133      	str	r3, [r6, #16]
}
   b6c1c:	b002      	add	sp, #8
   b6c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b6c22:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6c26:	2124      	movs	r1, #36	; 0x24
   b6c28:	4620      	mov	r0, r4
   b6c2a:	f003 f9b9 	bl	b9fa0 <strnlen>
   b6c2e:	42a8      	cmp	r0, r5
   b6c30:	d807      	bhi.n	b6c42 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b6c32:	4642      	mov	r2, r8
   b6c34:	2100      	movs	r1, #0
   b6c36:	4630      	mov	r0, r6
}
   b6c38:	b002      	add	sp, #8
   b6c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b6c3e:	f003 b94a 	b.w	b9ed6 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6c42:	f1b8 0f00 	cmp.w	r8, #0
   b6c46:	d0e9      	beq.n	b6c1c <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b6c48:	5d60      	ldrb	r0, [r4, r5]
   b6c4a:	f7ff fedb 	bl	b6a04 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b6c4e:	0603      	lsls	r3, r0, #24
   b6c50:	d415      	bmi.n	b6c7e <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b6c52:	0100      	lsls	r0, r0, #4
   b6c54:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b6c58:	b2c7      	uxtb	r7, r0
   b6c5a:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b6c5e:	2124      	movs	r1, #36	; 0x24
   b6c60:	4620      	mov	r0, r4
   b6c62:	f003 f99d 	bl	b9fa0 <strnlen>
   b6c66:	3501      	adds	r5, #1
   b6c68:	42a8      	cmp	r0, r5
   b6c6a:	d908      	bls.n	b6c7e <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b6c6c:	5d60      	ldrb	r0, [r4, r5]
   b6c6e:	f7ff fec9 	bl	b6a04 <_ZN8particle11hexToNibbleEc>
   b6c72:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b6c74:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b6c76:	bfa4      	itt	ge
   b6c78:	4338      	orrge	r0, r7
   b6c7a:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6c7e:	3501      	adds	r5, #1
   b6c80:	e7d1      	b.n	b6c26 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b6c82:	bf00      	nop
   b6c84:	000bc476 	.word	0x000bc476

000b6c88 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b6c88:	b513      	push	{r0, r1, r4, lr}
   b6c8a:	4604      	mov	r4, r0
   b6c8c:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b6c8e:	f7ff ff15 	bl	b6abc <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b6c92:	4620      	mov	r0, r4
   b6c94:	9901      	ldr	r1, [sp, #4]
   b6c96:	f7ff ff87 	bl	b6ba8 <_ZN8particle7BleUuid9constructEPKc>
}
   b6c9a:	4620      	mov	r0, r4
   b6c9c:	b002      	add	sp, #8
   b6c9e:	bd10      	pop	{r4, pc}

000b6ca0 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b6ca0:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b6ca2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6ca6:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b6ca8:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b6caa:	8043      	strh	r3, [r0, #2]
   b6cac:	220e      	movs	r2, #14
   b6cae:	4629      	mov	r1, r5
   b6cb0:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b6cb2:	7105      	strb	r5, [r0, #4]
   b6cb4:	3006      	adds	r0, #6
   b6cb6:	f003 f90e 	bl	b9ed6 <memset>
   b6cba:	f104 0014 	add.w	r0, r4, #20
   b6cbe:	f7ff fefd 	bl	b6abc <_ZN8particle7BleUuidC1Ev>
   b6cc2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6cc6:	f7ff fef9 	bl	b6abc <_ZN8particle7BleUuidC1Ev>
   b6cca:	4904      	ldr	r1, [pc, #16]	; (b6cdc <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b6ccc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b6cd0:	f001 fa37 	bl	b8142 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b6cd4:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b6cd6:	4620      	mov	r0, r4
   b6cd8:	bd38      	pop	{r3, r4, r5, pc}
   b6cda:	bf00      	nop
   b6cdc:	000bc292 	.word	0x000bc292

000b6ce0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b6ce0:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b6ce2:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b6ce6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b6cea:	4293      	cmp	r3, r2
   b6cec:	4618      	mov	r0, r3
   b6cee:	d006      	beq.n	b6cfe <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b6cf0:	6804      	ldr	r4, [r0, #0]
   b6cf2:	8824      	ldrh	r4, [r4, #0]
   b6cf4:	428c      	cmp	r4, r1
   b6cf6:	f103 0308 	add.w	r3, r3, #8
   b6cfa:	d1f6      	bne.n	b6cea <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b6cfc:	bd10      	pop	{r4, pc}
        return nullptr;
   b6cfe:	2000      	movs	r0, #0
   b6d00:	e7fc      	b.n	b6cfc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b6d04 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b6d04:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6d06:	4606      	mov	r6, r0
   b6d08:	b085      	sub	sp, #20
   b6d0a:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b6d0c:	460d      	mov	r5, r1
   b6d0e:	2900      	cmp	r1, #0
   b6d10:	d050      	beq.n	b6db4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b6d12:	2a00      	cmp	r2, #0
   b6d14:	d04e      	beq.n	b6db4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6d16:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b6d18:	7823      	ldrb	r3, [r4, #0]
   b6d1a:	2af4      	cmp	r2, #244	; 0xf4
   b6d1c:	bf28      	it	cs
   b6d1e:	22f4      	movcs	r2, #244	; 0xf4
   b6d20:	b343      	cbz	r3, b6d74 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b6d22:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b6d24:	0798      	lsls	r0, r3, #30
   b6d26:	d509      	bpl.n	b6d3c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b6d28:	89a0      	ldrh	r0, [r4, #12]
   b6d2a:	9203      	str	r2, [sp, #12]
   b6d2c:	2300      	movs	r3, #0
   b6d2e:	f7ff fb1d 	bl	b636c <hal_ble_gatt_server_set_characteristic_value>
   b6d32:	2800      	cmp	r0, #0
   b6d34:	9a03      	ldr	r2, [sp, #12]
   b6d36:	da03      	bge.n	b6d40 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b6d38:	b005      	add	sp, #20
   b6d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b6d3c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b6d40:	6834      	ldr	r4, [r6, #0]
   b6d42:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b6d44:	06d9      	lsls	r1, r3, #27
   b6d46:	d509      	bpl.n	b6d5c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b6d48:	2f01      	cmp	r7, #1
   b6d4a:	d007      	beq.n	b6d5c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6d4c:	89a0      	ldrh	r0, [r4, #12]
   b6d4e:	2300      	movs	r3, #0
   b6d50:	4629      	mov	r1, r5
}
   b6d52:	b005      	add	sp, #20
   b6d54:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6d58:	f7ff bb3a 	b.w	b63d0 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b6d5c:	069b      	lsls	r3, r3, #26
   b6d5e:	d5eb      	bpl.n	b6d38 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b6d60:	2f02      	cmp	r7, #2
   b6d62:	d0e9      	beq.n	b6d38 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6d64:	89a0      	ldrh	r0, [r4, #12]
   b6d66:	2300      	movs	r3, #0
   b6d68:	4629      	mov	r1, r5
}
   b6d6a:	b005      	add	sp, #20
   b6d6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6d70:	f7ff bb38 	b.w	b63e4 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b6d74:	8860      	ldrh	r0, [r4, #2]
   b6d76:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6d7a:	4288      	cmp	r0, r1
   b6d7c:	d01c      	beq.n	b6db8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b6d7e:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b6d80:	074e      	lsls	r6, r1, #29
   b6d82:	d501      	bpl.n	b6d88 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b6d84:	2f01      	cmp	r7, #1
   b6d86:	d104      	bne.n	b6d92 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b6d88:	070b      	lsls	r3, r1, #28
   b6d8a:	d409      	bmi.n	b6da0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b6d8c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b6d90:	e7d2      	b.n	b6d38 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b6d92:	89a1      	ldrh	r1, [r4, #12]
   b6d94:	9300      	str	r3, [sp, #0]
   b6d96:	4613      	mov	r3, r2
   b6d98:	462a      	mov	r2, r5
   b6d9a:	f7ff fafb 	bl	b6394 <hal_ble_gatt_client_write_without_response>
   b6d9e:	e7cb      	b.n	b6d38 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b6da0:	2f02      	cmp	r7, #2
   b6da2:	d0f3      	beq.n	b6d8c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b6da4:	2300      	movs	r3, #0
   b6da6:	89a1      	ldrh	r1, [r4, #12]
   b6da8:	9300      	str	r3, [sp, #0]
   b6daa:	4613      	mov	r3, r2
   b6dac:	462a      	mov	r2, r5
   b6dae:	f7ff fae7 	bl	b6380 <hal_ble_gatt_client_write_with_response>
   b6db2:	e7c1      	b.n	b6d38 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b6db4:	4802      	ldr	r0, [pc, #8]	; (b6dc0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b6db6:	e7bf      	b.n	b6d38 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b6db8:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b6dbc:	e7bc      	b.n	b6d38 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b6dbe:	bf00      	nop
   b6dc0:	fffffef2 	.word	0xfffffef2

000b6dc4 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b6dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6dc6:	460c      	mov	r4, r1
   b6dc8:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b6dca:	21f4      	movs	r1, #244	; 0xf4
   b6dcc:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b6dce:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b6dd0:	f003 f8e6 	bl	b9fa0 <strnlen>
   b6dd4:	9b01      	ldr	r3, [sp, #4]
   b6dd6:	4602      	mov	r2, r0
   b6dd8:	4621      	mov	r1, r4
   b6dda:	4628      	mov	r0, r5
}
   b6ddc:	b003      	add	sp, #12
   b6dde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b6de2:	f7ff bf8f 	b.w	b6d04 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000b6de8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b6de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6dec:	2600      	movs	r6, #0
   b6dee:	6006      	str	r6, [r0, #0]
   b6df0:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6df2:	2028      	movs	r0, #40	; 0x28
   b6df4:	460c      	mov	r4, r1
   b6df6:	f7fd f94e 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b6dfa:	1e05      	subs	r5, r0, #0
   b6dfc:	f105 080c 	add.w	r8, r5, #12
   b6e00:	d00f      	beq.n	b6e22 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b6e02:	2301      	movs	r3, #1
   b6e04:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6e08:	4b08      	ldr	r3, [pc, #32]	; (b6e2c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b6e0a:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b6e0c:	4640      	mov	r0, r8
   b6e0e:	f7ff fe55 	bl	b6abc <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b6e12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b6e14:	622e      	str	r6, [r5, #32]
   b6e16:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b6e1a:	4646      	mov	r6, r8
   b6e1c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6e1e:	6823      	ldr	r3, [r4, #0]
   b6e20:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b6e22:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6e26:	4638      	mov	r0, r7
   b6e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6e2c:	000bc438 	.word	0x000bc438

000b6e30 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b6e30:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6e32:	2500      	movs	r5, #0
   b6e34:	6005      	str	r5, [r0, #0]
   b6e36:	4606      	mov	r6, r0
   b6e38:	2030      	movs	r0, #48	; 0x30
   b6e3a:	f7fd f92c 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b6e3e:	4604      	mov	r4, r0
   b6e40:	b188      	cbz	r0, b6e66 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b6e42:	2301      	movs	r3, #1
   b6e44:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b6e48:	4b09      	ldr	r3, [pc, #36]	; (b6e70 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b6e4a:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b6e4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6e50:	8183      	strh	r3, [r0, #12]
   b6e52:	300e      	adds	r0, #14
   b6e54:	f7ff fe27 	bl	b6aa6 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b6e58:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b6e5c:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b6e60:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b6e64:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b6e66:	6074      	str	r4, [r6, #4]
   b6e68:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b6e6a:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6e6c:	4630      	mov	r0, r6
   b6e6e:	bd70      	pop	{r4, r5, r6, pc}
   b6e70:	000bc454 	.word	0x000bc454

000b6e74 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b6e74:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6e76:	460d      	mov	r5, r1
   b6e78:	4604      	mov	r4, r0
    WiringBleLock lk;
   b6e7a:	a801      	add	r0, sp, #4
   b6e7c:	f7ff fdd8 	bl	b6a30 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b6e80:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b6e82:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b6e86:	6023      	str	r3, [r4, #0]
   b6e88:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b6e8c:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b6e8e:	a801      	add	r0, sp, #4
   b6e90:	f7ff fddc 	bl	b6a4c <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b6e94:	4620      	mov	r0, r4
   b6e96:	b003      	add	sp, #12
   b6e98:	bd30      	pop	{r4, r5, pc}

000b6e9a <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b6e9a:	b530      	push	{r4, r5, lr}
   b6e9c:	4605      	mov	r5, r0
   b6e9e:	b087      	sub	sp, #28
   b6ea0:	460c      	mov	r4, r1
    WiringBleLock lk;
   b6ea2:	a801      	add	r0, sp, #4
   b6ea4:	f7ff fdc4 	bl	b6a30 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b6ea8:	682a      	ldr	r2, [r5, #0]
   b6eaa:	6823      	ldr	r3, [r4, #0]
   b6eac:	8812      	ldrh	r2, [r2, #0]
   b6eae:	881b      	ldrh	r3, [r3, #0]
   b6eb0:	429a      	cmp	r2, r3
   b6eb2:	d10d      	bne.n	b6ed0 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b6eb4:	4629      	mov	r1, r5
   b6eb6:	a802      	add	r0, sp, #8
   b6eb8:	f7ff ffdc 	bl	b6e74 <_ZNK8particle13BlePeerDevice7addressEv>
   b6ebc:	4621      	mov	r1, r4
   b6ebe:	a804      	add	r0, sp, #16
   b6ec0:	f7ff ffd8 	bl	b6e74 <_ZNK8particle13BlePeerDevice7addressEv>
   b6ec4:	a904      	add	r1, sp, #16
   b6ec6:	a802      	add	r0, sp, #8
   b6ec8:	f7ff fdd9 	bl	b6a7e <_ZNK8particle10BleAddresseqERKS0_>
   b6ecc:	4604      	mov	r4, r0
   b6ece:	b900      	cbnz	r0, b6ed2 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b6ed0:	2400      	movs	r4, #0
    WiringBleLock lk;
   b6ed2:	a801      	add	r0, sp, #4
   b6ed4:	f7ff fdba 	bl	b6a4c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6ed8:	4620      	mov	r0, r4
   b6eda:	b007      	add	sp, #28
   b6edc:	bd30      	pop	{r4, r5, pc}
	...

000b6ee0 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b6ee0:	b510      	push	{r4, lr}
   b6ee2:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b6ee4:	2064      	movs	r0, #100	; 0x64
   b6ee6:	f7fd f8d6 	bl	b4096 <_Znwj>
   b6eea:	b168      	cbz	r0, b6f08 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b6eec:	2300      	movs	r3, #0
   b6eee:	e9c0 3300 	strd	r3, r3, [r0]
   b6ef2:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b6ef6:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b6efa:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b6efe:	6203      	str	r3, [r0, #32]
   b6f00:	62c3      	str	r3, [r0, #44]	; 0x2c
   b6f02:	63c3      	str	r3, [r0, #60]	; 0x3c
   b6f04:	64c3      	str	r3, [r0, #76]	; 0x4c
   b6f06:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b6f08:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b6f0a:	b920      	cbnz	r0, b6f16 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b6f0c:	4a0a      	ldr	r2, [pc, #40]	; (b6f38 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6f0e:	490b      	ldr	r1, [pc, #44]	; (b6f3c <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b6f10:	200a      	movs	r0, #10
   b6f12:	f7ff fbc9 	bl	b66a8 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b6f16:	2000      	movs	r0, #0
   b6f18:	f7ff f9f4 	bl	b6304 <hal_ble_stack_init>
   b6f1c:	b120      	cbz	r0, b6f28 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b6f1e:	4a06      	ldr	r2, [pc, #24]	; (b6f38 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6f20:	4907      	ldr	r1, [pc, #28]	; (b6f40 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b6f22:	200a      	movs	r0, #10
   b6f24:	f7ff fbc0 	bl	b66a8 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b6f28:	6821      	ldr	r1, [r4, #0]
   b6f2a:	4806      	ldr	r0, [pc, #24]	; (b6f44 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b6f2c:	2200      	movs	r2, #0
   b6f2e:	f7ff fa45 	bl	b63bc <hal_ble_set_callback_on_periph_link_events>
}
   b6f32:	4620      	mov	r0, r4
   b6f34:	bd10      	pop	{r4, pc}
   b6f36:	bf00      	nop
   b6f38:	000b6439 	.word	0x000b6439
   b6f3c:	000bc2c8 	.word	0x000bc2c8
   b6f40:	000bc306 	.word	0x000bc306
   b6f44:	000b74c9 	.word	0x000b74c9

000b6f48 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b6f48:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b6f4a:	4c0a      	ldr	r4, [pc, #40]	; (b6f74 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b6f4c:	7823      	ldrb	r3, [r4, #0]
   b6f4e:	f3bf 8f5b 	dmb	ish
   b6f52:	07db      	lsls	r3, r3, #31
   b6f54:	d40c      	bmi.n	b6f70 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b6f56:	4620      	mov	r0, r4
   b6f58:	f7fd f8a3 	bl	b40a2 <__cxa_guard_acquire>
   b6f5c:	b140      	cbz	r0, b6f70 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b6f5e:	4806      	ldr	r0, [pc, #24]	; (b6f78 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b6f60:	f7ff ffbe 	bl	b6ee0 <_ZN8particle14BleLocalDeviceC1Ev>
   b6f64:	4620      	mov	r0, r4
   b6f66:	f7fd f8a1 	bl	b40ac <__cxa_guard_release>
   b6f6a:	4804      	ldr	r0, [pc, #16]	; (b6f7c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b6f6c:	f002 ff6a 	bl	b9e44 <atexit>
    return instance;
}
   b6f70:	4801      	ldr	r0, [pc, #4]	; (b6f78 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b6f72:	bd10      	pop	{r4, pc}
   b6f74:	2003e6b8 	.word	0x2003e6b8
   b6f78:	2003e6c4 	.word	0x2003e6c4
   b6f7c:	000b7195 	.word	0x000b7195

000b6f80 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6f80:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b6f82:	6803      	ldr	r3, [r0, #0]
   b6f84:	3b09      	subs	r3, #9
   b6f86:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6f88:	b08d      	sub	sp, #52	; 0x34
   b6f8a:	4604      	mov	r4, r0
   b6f8c:	460d      	mov	r5, r1
    switch (event->type) {
   b6f8e:	d811      	bhi.n	b6fb4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b6f90:	f7ff ffda 	bl	b6f48 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6f94:	88a1      	ldrh	r1, [r4, #4]
   b6f96:	6800      	ldr	r0, [r0, #0]
   b6f98:	f7ff fea2 	bl	b6ce0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b6f9c:	4603      	mov	r3, r0
   b6f9e:	b958      	cbnz	r0, b6fb8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b6fa0:	2220      	movs	r2, #32
   b6fa2:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b6fa6:	4a0b      	ldr	r2, [pc, #44]	; (b6fd4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b6fa8:	9200      	str	r2, [sp, #0]
   b6faa:	490b      	ldr	r1, [pc, #44]	; (b6fd8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b6fac:	aa04      	add	r2, sp, #16
   b6fae:	2032      	movs	r0, #50	; 0x32
   b6fb0:	f7ff fb82 	bl	b66b8 <log_message>
}
   b6fb4:	b00d      	add	sp, #52	; 0x34
   b6fb6:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b6fb8:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b6fba:	2a00      	cmp	r2, #0
   b6fbc:	d0fa      	beq.n	b6fb4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b6fbe:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6fc2:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b6fc6:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b6fca:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b6fcc:	aa04      	add	r2, sp, #16
   b6fce:	a903      	add	r1, sp, #12
   b6fd0:	47a0      	blx	r4
}
   b6fd2:	e7ef      	b.n	b6fb4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b6fd4:	000bc348 	.word	0x000bc348
   b6fd8:	000bc2df 	.word	0x000bc2df

000b6fdc <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b6fdc:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b6fde:	2000      	movs	r0, #0
   b6fe0:	f7ff f990 	bl	b6304 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b6fe4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b6fe8:	bd08      	pop	{r3, pc}

000b6fea <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b6fea:	b919      	cbnz	r1, b6ff4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b6fec:	460a      	mov	r2, r1
   b6fee:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b6ff0:	f7ff b990 	b.w	b6314 <hal_ble_gap_set_advertising_data>
   b6ff4:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6ff8:	2200      	movs	r2, #0
   b6ffa:	e7f9      	b.n	b6ff0 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b6ffc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b6ffc:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b6ffe:	1e14      	subs	r4, r2, #0
   b7000:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b7002:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b7004:	db02      	blt.n	b700c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b7006:	1862      	adds	r2, r4, r1
   b7008:	429a      	cmp	r2, r3
   b700a:	dd00      	ble.n	b700e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b700c:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b700e:	682a      	ldr	r2, [r5, #0]
   b7010:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b7012:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b7014:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7016:	1a52      	subs	r2, r2, r1
   b7018:	f002 ff43 	bl	b9ea2 <memmove>
    size_ -= n;
   b701c:	686a      	ldr	r2, [r5, #4]
   b701e:	1b12      	subs	r2, r2, r4
   b7020:	606a      	str	r2, [r5, #4]
}
   b7022:	bd38      	pop	{r3, r4, r5, pc}

000b7024 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b7024:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b7026:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b7028:	4604      	mov	r4, r0
   b702a:	460d      	mov	r5, r1
   b702c:	ab01      	add	r3, sp, #4
   b702e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7032:	f7ff fc73 	bl	b691c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b7036:	4602      	mov	r2, r0
   b7038:	b138      	cbz	r0, b704a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b703a:	9901      	ldr	r1, [sp, #4]
   b703c:	4620      	mov	r0, r4
   b703e:	f7ff ffdd 	bl	b6ffc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b7042:	4629      	mov	r1, r5
   b7044:	4620      	mov	r0, r4
   b7046:	f7ff ffed 	bl	b7024 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b704a:	b003      	add	sp, #12
   b704c:	bd30      	pop	{r4, r5, pc}

000b704e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b704e:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b7050:	460c      	mov	r4, r1
   b7052:	b929      	cbnz	r1, b7060 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b7054:	460a      	mov	r2, r1
   b7056:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b7058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b705c:	f7ff b962 	b.w	b6324 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b7060:	2101      	movs	r1, #1
   b7062:	4620      	mov	r0, r4
   b7064:	f7ff ffde 	bl	b7024 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b7068:	e9d4 0100 	ldrd	r0, r1, [r4]
   b706c:	2200      	movs	r2, #0
   b706e:	e7f3      	b.n	b7058 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b7070 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b7070:	b538      	push	{r3, r4, r5, lr}
   b7072:	4604      	mov	r4, r0
   b7074:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b7076:	f7ff ffb8 	bl	b6fea <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b707a:	2800      	cmp	r0, #0
   b707c:	db0a      	blt.n	b7094 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b707e:	4629      	mov	r1, r5
   b7080:	4620      	mov	r0, r4
   b7082:	f7ff ffe4 	bl	b704e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b7086:	2800      	cmp	r0, #0
   b7088:	db04      	blt.n	b7094 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b708a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b708e:	2000      	movs	r0, #0
   b7090:	f7ff b950 	b.w	b6334 <hal_ble_gap_start_advertising>
}
   b7094:	bd38      	pop	{r3, r4, r5, pc}
	...

000b7098 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b7098:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b709a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b709c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b709e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b70a0:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b70a2:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b70a4:	f7fc fff7 	bl	b4096 <_Znwj>
   b70a8:	b118      	cbz	r0, b70b2 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b70aa:	682b      	ldr	r3, [r5, #0]
   b70ac:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b70ae:	686b      	ldr	r3, [r5, #4]
   b70b0:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b70b2:	4b03      	ldr	r3, [pc, #12]	; (b70c0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b70b4:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b70b6:	4b03      	ldr	r3, [pc, #12]	; (b70c4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b70b8:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b70ba:	60a3      	str	r3, [r4, #8]
      }
   b70bc:	4620      	mov	r0, r4
   b70be:	bd38      	pop	{r3, r4, r5, pc}
   b70c0:	000b695d 	.word	0x000b695d
   b70c4:	000b6975 	.word	0x000b6975

000b70c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b70c8:	680b      	ldr	r3, [r1, #0]
   b70ca:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b70cc:	b113      	cbz	r3, b70d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b70ce:	685a      	ldr	r2, [r3, #4]
   b70d0:	3201      	adds	r2, #1
   b70d2:	605a      	str	r2, [r3, #4]
      }
   b70d4:	4770      	bx	lr

000b70d6 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b70d6:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b70d8:	f851 3b04 	ldr.w	r3, [r1], #4
   b70dc:	4604      	mov	r4, r0
   b70de:	f840 3b04 	str.w	r3, [r0], #4
   b70e2:	f7ff fff1 	bl	b70c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b70e6:	6823      	ldr	r3, [r4, #0]
   b70e8:	b90b      	cbnz	r3, b70ee <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b70ea:	f7ff fc2d 	bl	b6948 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b70ee:	4620      	mov	r0, r4
   b70f0:	bd10      	pop	{r4, pc}

000b70f2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b70f2:	b510      	push	{r4, lr}
   b70f4:	f851 3b04 	ldr.w	r3, [r1], #4
   b70f8:	4604      	mov	r4, r0
   b70fa:	f840 3b04 	str.w	r3, [r0], #4
   b70fe:	f7ff ffe3 	bl	b70c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b7102:	4620      	mov	r0, r4
   b7104:	bd10      	pop	{r4, pc}

000b7106 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b7106:	b510      	push	{r4, lr}
   b7108:	f851 3b04 	ldr.w	r3, [r1], #4
   b710c:	4604      	mov	r4, r0
   b710e:	f840 3b04 	str.w	r3, [r0], #4
   b7112:	f7ff ffd9 	bl	b70c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b7116:	4620      	mov	r0, r4
   b7118:	bd10      	pop	{r4, pc}

000b711a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b711a:	b510      	push	{r4, lr}
   b711c:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b711e:	6800      	ldr	r0, [r0, #0]
   b7120:	b108      	cbz	r0, b7126 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b7122:	f7ff fc5b 	bl	b69dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b7126:	4620      	mov	r0, r4
   b7128:	bd10      	pop	{r4, pc}

000b712a <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b712a:	b510      	push	{r4, lr}
   b712c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b712e:	3004      	adds	r0, #4
   b7130:	f7ff fff3 	bl	b711a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7134:	4620      	mov	r0, r4
   b7136:	bd10      	pop	{r4, pc}

000b7138 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7138:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b713a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b713e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7140:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7144:	42ae      	cmp	r6, r5
   b7146:	d004      	beq.n	b7152 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b7148:	1d28      	adds	r0, r5, #4
   b714a:	f7ff ffe6 	bl	b711a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b714e:	3508      	adds	r5, #8
   b7150:	e7f8      	b.n	b7144 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b7152:	6820      	ldr	r0, [r4, #0]
   b7154:	f7ff fb4c 	bl	b67f0 <free>
}
   b7158:	4620      	mov	r0, r4
   b715a:	bd70      	pop	{r4, r5, r6, pc}

000b715c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b715c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b715e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7162:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7164:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7168:	42ae      	cmp	r6, r5
   b716a:	d004      	beq.n	b7176 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b716c:	1d28      	adds	r0, r5, #4
   b716e:	f7ff ffd4 	bl	b711a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7172:	3508      	adds	r5, #8
   b7174:	e7f8      	b.n	b7168 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b7176:	6820      	ldr	r0, [r4, #0]
   b7178:	f7ff fb3a 	bl	b67f0 <free>
}
   b717c:	4620      	mov	r0, r4
   b717e:	bd70      	pop	{r4, r5, r6, pc}

000b7180 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7180:	b510      	push	{r4, lr}
   b7182:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b7184:	3024      	adds	r0, #36	; 0x24
   b7186:	f7ff ffe9 	bl	b715c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b718a:	f104 0018 	add.w	r0, r4, #24
   b718e:	f7ff ffd3 	bl	b7138 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b7192:	bd10      	pop	{r4, pc}

000b7194 <__tcf_0>:
    static BleLocalDevice instance;
   b7194:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b7196:	4b17      	ldr	r3, [pc, #92]	; (b71f4 <__tcf_0+0x60>)
   b7198:	681c      	ldr	r4, [r3, #0]
   b719a:	b354      	cbz	r4, b71f2 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b719c:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b71a0:	f7ff fc08 	bl	b69b4 <_ZNSt14_Function_baseD1Ev>
   b71a4:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b71a8:	f7ff fc04 	bl	b69b4 <_ZNSt14_Function_baseD1Ev>
   b71ac:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b71b0:	f7ff fc00 	bl	b69b4 <_ZNSt14_Function_baseD1Ev>
   b71b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b71b8:	f7ff fbfc 	bl	b69b4 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b71bc:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b71c0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b71c4:	42ae      	cmp	r6, r5
   b71c6:	d004      	beq.n	b71d2 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b71c8:	1d28      	adds	r0, r5, #4
   b71ca:	f7ff ffa6 	bl	b711a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b71ce:	3508      	adds	r5, #8
   b71d0:	e7f8      	b.n	b71c4 <__tcf_0+0x30>
    ::free(ptr);
   b71d2:	69a0      	ldr	r0, [r4, #24]
   b71d4:	f7ff fb0c 	bl	b67f0 <free>
    ~BleLocalDeviceImpl() = default;
   b71d8:	f104 000c 	add.w	r0, r4, #12
   b71dc:	f7ff ffbe 	bl	b715c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b71e0:	4620      	mov	r0, r4
   b71e2:	f7ff ffa9 	bl	b7138 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b71e6:	4620      	mov	r0, r4
   b71e8:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b71ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b71ee:	f7fc bf56 	b.w	b409e <_ZdlPvj>
   b71f2:	bd70      	pop	{r4, r5, r6, pc}
   b71f4:	2003e6c4 	.word	0x2003e6c4

000b71f8 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b71f8:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b71fa:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b71fc:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b7200:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b7204:	6803      	ldr	r3, [r0, #0]
   b7206:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b7208:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b720a:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b720c:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b720e:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b7210:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b7212:	f7ff ff82 	bl	b711a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b7216:	b002      	add	sp, #8
   b7218:	bd10      	pop	{r4, pc}

000b721a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b721a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b721c:	b510      	push	{r4, lr}
      if (_M_empty())
   b721e:	b90a      	cbnz	r2, b7224 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b7220:	f001 fe23 	bl	b8e6a <_ZSt25__throw_bad_function_callv>
    }
   b7224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7228:	68c3      	ldr	r3, [r0, #12]
   b722a:	4718      	bx	r3

000b722c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b722c:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b722e:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b7230:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b7232:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b7234:	dd03      	ble.n	b723e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b7236:	f7ff fae3 	bl	b6800 <realloc>
            if (!d) {
   b723a:	b918      	cbnz	r0, b7244 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b723c:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b723e:	f7ff fad7 	bl	b67f0 <free>
        T* d = nullptr;
   b7242:	2000      	movs	r0, #0
        data_ = d;
   b7244:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b7246:	60a5      	str	r5, [r4, #8]
        return true;
   b7248:	2001      	movs	r0, #1
   b724a:	e7f7      	b.n	b723c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b724c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b724c:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b724e:	6883      	ldr	r3, [r0, #8]
   b7250:	428b      	cmp	r3, r1
   b7252:	da02      	bge.n	b725a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b7254:	f7ff ffea 	bl	b722c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b7258:	bd08      	pop	{r3, pc}
    return true;
   b725a:	2001      	movs	r0, #1
   b725c:	e7fc      	b.n	b7258 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b725e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b725e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7262:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7264:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7266:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7268:	4419      	add	r1, r3
   b726a:	6883      	ldr	r3, [r0, #8]
   b726c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b726e:	4604      	mov	r4, r0
   b7270:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7272:	dc12      	bgt.n	b729a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b7274:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7276:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7278:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b727a:	1bd2      	subs	r2, r2, r7
   b727c:	4631      	mov	r1, r6
   b727e:	1970      	adds	r0, r6, r5
   b7280:	f002 fe0f 	bl	b9ea2 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b7284:	462a      	mov	r2, r5
   b7286:	4641      	mov	r1, r8
   b7288:	4630      	mov	r0, r6
   b728a:	f002 fdfc 	bl	b9e86 <memcpy>
    size_ += n;
   b728e:	6863      	ldr	r3, [r4, #4]
   b7290:	442b      	add	r3, r5
   b7292:	6063      	str	r3, [r4, #4]
    return true;
   b7294:	2001      	movs	r0, #1
}
   b7296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b729a:	f7ff ffc7 	bl	b722c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b729e:	2800      	cmp	r0, #0
   b72a0:	d1e8      	bne.n	b7274 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b72a2:	e7f8      	b.n	b7296 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b72a4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b72a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b72a6:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b72a8:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b72ac:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b72ae:	4604      	mov	r4, r0
   b72b0:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b72b2:	da0b      	bge.n	b72cc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b72b4:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b72b6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b72b8:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b72ba:	1b52      	subs	r2, r2, r5
   b72bc:	1c48      	adds	r0, r1, #1
   b72be:	f002 fdf0 	bl	b9ea2 <memmove>
    new(p) T(std::move(value));
   b72c2:	557e      	strb	r6, [r7, r5]
    ++size_;
   b72c4:	6863      	ldr	r3, [r4, #4]
   b72c6:	3301      	adds	r3, #1
   b72c8:	6063      	str	r3, [r4, #4]
}
   b72ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b72cc:	3101      	adds	r1, #1
   b72ce:	f7ff ffad 	bl	b722c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b72d2:	2800      	cmp	r0, #0
   b72d4:	d1ee      	bne.n	b72b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b72d6:	e7f8      	b.n	b72ca <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b72d8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b72d8:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b72da:	6841      	ldr	r1, [r0, #4]
   b72dc:	f7ff bfe2 	b.w	b72a4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b72e0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b72e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b72e4:	4604      	mov	r4, r0
   b72e6:	461d      	mov	r5, r3
   b72e8:	460f      	mov	r7, r1
   b72ea:	ab01      	add	r3, sp, #4
   b72ec:	4690      	mov	r8, r2
   b72ee:	460a      	mov	r2, r1
   b72f0:	e9d0 0100 	ldrd	r0, r1, [r0]
   b72f4:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b72f8:	f7ff fb10 	bl	b691c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b72fc:	1cae      	adds	r6, r5, #2
   b72fe:	6863      	ldr	r3, [r4, #4]
   b7300:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b7302:	f1b9 0f00 	cmp.w	r9, #0
   b7306:	d126      	bne.n	b7356 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b7308:	b328      	cbz	r0, b7356 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b730a:	4433      	add	r3, r6
   b730c:	1a1b      	subs	r3, r3, r0
   b730e:	2bff      	cmp	r3, #255	; 0xff
   b7310:	d809      	bhi.n	b7326 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b7312:	9901      	ldr	r1, [sp, #4]
   b7314:	4620      	mov	r0, r4
   b7316:	f7ff fe71 	bl	b6ffc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b731a:	6861      	ldr	r1, [r4, #4]
   b731c:	4620      	mov	r0, r4
   b731e:	4431      	add	r1, r6
   b7320:	f7ff ff94 	bl	b724c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7324:	b918      	cbnz	r0, b732e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b7326:	6860      	ldr	r0, [r4, #4]
}
   b7328:	b003      	add	sp, #12
   b732a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b732e:	1c6a      	adds	r2, r5, #1
   b7330:	9901      	ldr	r1, [sp, #4]
   b7332:	b2d2      	uxtb	r2, r2
   b7334:	4620      	mov	r0, r4
   b7336:	f7ff ffb5 	bl	b72a4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b733a:	9901      	ldr	r1, [sp, #4]
   b733c:	463a      	mov	r2, r7
   b733e:	3101      	adds	r1, #1
   b7340:	4620      	mov	r0, r4
   b7342:	f7ff ffaf 	bl	b72a4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b7346:	9901      	ldr	r1, [sp, #4]
   b7348:	462b      	mov	r3, r5
   b734a:	4642      	mov	r2, r8
   b734c:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b734e:	4620      	mov	r0, r4
   b7350:	f7ff ff85 	bl	b725e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b7354:	e7e7      	b.n	b7326 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7356:	18f1      	adds	r1, r6, r3
   b7358:	29ff      	cmp	r1, #255	; 0xff
   b735a:	d8e4      	bhi.n	b7326 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b735c:	4620      	mov	r0, r4
   b735e:	f7ff ff75 	bl	b724c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7362:	2800      	cmp	r0, #0
   b7364:	d0df      	beq.n	b7326 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b7366:	1c69      	adds	r1, r5, #1
   b7368:	b2c9      	uxtb	r1, r1
   b736a:	4620      	mov	r0, r4
   b736c:	f7ff ffb4 	bl	b72d8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b7370:	4639      	mov	r1, r7
   b7372:	4620      	mov	r0, r4
   b7374:	f7ff ffb0 	bl	b72d8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b7378:	6861      	ldr	r1, [r4, #4]
   b737a:	462b      	mov	r3, r5
   b737c:	4642      	mov	r2, r8
   b737e:	e7e6      	b.n	b734e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b7380 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7380:	b430      	push	{r4, r5}
   b7382:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b7386:	b11a      	cbz	r2, b7390 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b7388:	9502      	str	r5, [sp, #8]
}
   b738a:	bc30      	pop	{r4, r5}
   b738c:	f7ff bfa8 	b.w	b72e0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b7390:	6840      	ldr	r0, [r0, #4]
}
   b7392:	bc30      	pop	{r4, r5}
   b7394:	4770      	bx	lr

000b7396 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b7396:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b7398:	2300      	movs	r3, #0
   b739a:	e9c0 3300 	strd	r3, r3, [r0]
   b739e:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b73a0:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b73a2:	9300      	str	r3, [sp, #0]
   b73a4:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b73a6:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b73aa:	4619      	mov	r1, r3
   b73ac:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b73b0:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b73b2:	f7ff ffe5 	bl	b7380 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b73b6:	4620      	mov	r0, r4
   b73b8:	b004      	add	sp, #16
   b73ba:	bd10      	pop	{r4, pc}

000b73bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b73bc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b73be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b73c0:	4604      	mov	r4, r0
   b73c2:	460d      	mov	r5, r1
   b73c4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b73c6:	d914      	bls.n	b73f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b73c8:	4290      	cmp	r0, r2
   b73ca:	d213      	bcs.n	b73f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b73cc:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b73d0:	1a75      	subs	r5, r6, r1
   b73d2:	f1a1 0708 	sub.w	r7, r1, #8
   b73d6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b73d8:	42b7      	cmp	r7, r6
   b73da:	d018      	beq.n	b740e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b73dc:	b11c      	cbz	r4, b73e6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b73de:	4631      	mov	r1, r6
   b73e0:	4620      	mov	r0, r4
   b73e2:	f7ff fe90 	bl	b7106 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b73e6:	1d30      	adds	r0, r6, #4
   b73e8:	f7ff fe97 	bl	b711a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b73ec:	3e08      	subs	r6, #8
   b73ee:	3c08      	subs	r4, #8
   b73f0:	e7f2      	b.n	b73d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b73f2:	d00c      	beq.n	b740e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b73f4:	42b5      	cmp	r5, r6
   b73f6:	d00a      	beq.n	b740e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b73f8:	b11c      	cbz	r4, b7402 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b73fa:	4629      	mov	r1, r5
   b73fc:	4620      	mov	r0, r4
   b73fe:	f7ff fe82 	bl	b7106 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7402:	1d28      	adds	r0, r5, #4
   b7404:	f7ff fe89 	bl	b711a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7408:	3508      	adds	r5, #8
   b740a:	3408      	adds	r4, #8
   b740c:	e7f2      	b.n	b73f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b740e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7410 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7412:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7414:	6846      	ldr	r6, [r0, #4]
   b7416:	4668      	mov	r0, sp
   b7418:	f7ff fe75 	bl	b7106 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b741c:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b7420:	429f      	cmp	r7, r3
   b7422:	db12      	blt.n	b744a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b7424:	3701      	adds	r7, #1
        if (n > 0) {
   b7426:	2f00      	cmp	r7, #0
   b7428:	dd29      	ble.n	b747e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b742a:	00f8      	lsls	r0, r7, #3
   b742c:	f7ff f9d8 	bl	b67e0 <malloc>
            if (!d) {
   b7430:	4605      	mov	r5, r0
   b7432:	b1f0      	cbz	r0, b7472 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b7434:	e9d4 1200 	ldrd	r1, r2, [r4]
   b7438:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b743c:	f7ff ffbe 	bl	b73bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7440:	6820      	ldr	r0, [r4, #0]
   b7442:	f7ff f9d5 	bl	b67f0 <free>
        data_ = d;
   b7446:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b7448:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b744a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b744c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b744e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b7452:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7456:	4631      	mov	r1, r6
   b7458:	f106 0008 	add.w	r0, r6, #8
   b745c:	f7ff ffae 	bl	b73bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7460:	b11e      	cbz	r6, b746a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b7462:	4669      	mov	r1, sp
   b7464:	4630      	mov	r0, r6
   b7466:	f7ff fe4e 	bl	b7106 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b746a:	6863      	ldr	r3, [r4, #4]
   b746c:	3301      	adds	r3, #1
   b746e:	6063      	str	r3, [r4, #4]
    return true;
   b7470:	2501      	movs	r5, #1
   b7472:	a801      	add	r0, sp, #4
   b7474:	f7ff fe51 	bl	b711a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7478:	4628      	mov	r0, r5
   b747a:	b003      	add	sp, #12
   b747c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b747e:	2500      	movs	r5, #0
   b7480:	e7de      	b.n	b7440 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b7482 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b7484:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7488:	4605      	mov	r5, r0
   b748a:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b748c:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b7490:	42a6      	cmp	r6, r4
   b7492:	d005      	beq.n	b74a0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b7494:	4639      	mov	r1, r7
   b7496:	4620      	mov	r0, r4
   b7498:	f7ff fcff 	bl	b6e9a <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b749c:	b108      	cbz	r0, b74a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b749e:	b914      	cbnz	r4, b74a6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b74a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b74a2:	3408      	adds	r4, #8
   b74a4:	e7f4      	b.n	b7490 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b74a6:	1d20      	adds	r0, r4, #4
   b74a8:	f7ff fe37 	bl	b711a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b74ac:	e9d5 3200 	ldrd	r3, r2, [r5]
   b74b0:	f104 0108 	add.w	r1, r4, #8
   b74b4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b74b8:	4620      	mov	r0, r4
   b74ba:	f7ff ff7f 	bl	b73bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b74be:	686b      	ldr	r3, [r5, #4]
   b74c0:	3b01      	subs	r3, #1
   b74c2:	606b      	str	r3, [r5, #4]
    return true;
   b74c4:	e7ec      	b.n	b74a0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b74c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b74c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b74cc:	4605      	mov	r5, r0
   b74ce:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b74d0:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b74d2:	460c      	mov	r4, r1
        WiringBleLock lk;
   b74d4:	f7ff faac 	bl	b6a30 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b74d8:	682e      	ldr	r6, [r5, #0]
   b74da:	1ef3      	subs	r3, r6, #3
   b74dc:	2b0d      	cmp	r3, #13
   b74de:	d83c      	bhi.n	b755a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b74e0:	e8df f013 	tbh	[pc, r3, lsl #1]
   b74e4:	0053000e 	.word	0x0053000e
   b74e8:	00d1003b 	.word	0x00d1003b
   b74ec:	003b003b 	.word	0x003b003b
   b74f0:	003b003b 	.word	0x003b003b
   b74f4:	009b003b 	.word	0x009b003b
   b74f8:	009b009b 	.word	0x009b009b
   b74fc:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b7500:	a804      	add	r0, sp, #16
   b7502:	f7ff fc95 	bl	b6e30 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b7506:	9b04      	ldr	r3, [sp, #16]
   b7508:	89aa      	ldrh	r2, [r5, #12]
   b750a:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b750c:	6869      	ldr	r1, [r5, #4]
   b750e:	9804      	ldr	r0, [sp, #16]
   b7510:	3108      	adds	r1, #8
   b7512:	3002      	adds	r0, #2
   b7514:	f7ff faa6 	bl	b6a64 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b7518:	a904      	add	r1, sp, #16
   b751a:	a806      	add	r0, sp, #24
   b751c:	f7ff fdf3 	bl	b7106 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b7520:	a906      	add	r1, sp, #24
   b7522:	f104 0018 	add.w	r0, r4, #24
   b7526:	f7ff ff73 	bl	b7410 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b752a:	4605      	mov	r5, r0
   b752c:	a807      	add	r0, sp, #28
   b752e:	f7ff fdf4 	bl	b711a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7532:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b7534:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b7536:	b9b5      	cbnz	r5, b7566 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b7538:	4b5d      	ldr	r3, [pc, #372]	; (b76b0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b753a:	495e      	ldr	r1, [pc, #376]	; (b76b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b753c:	9300      	str	r3, [sp, #0]
   b753e:	2032      	movs	r0, #50	; 0x32
   b7540:	462b      	mov	r3, r5
   b7542:	aa06      	add	r2, sp, #24
   b7544:	9507      	str	r5, [sp, #28]
   b7546:	f7ff f8b7 	bl	b66b8 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b754a:	9b04      	ldr	r3, [sp, #16]
   b754c:	4629      	mov	r1, r5
   b754e:	8818      	ldrh	r0, [r3, #0]
   b7550:	f7fe fef8 	bl	b6344 <hal_ble_gap_disconnect>
   b7554:	a805      	add	r0, sp, #20
   b7556:	f7ff fde0 	bl	b711a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b755a:	a803      	add	r0, sp, #12
   b755c:	f7ff fa76 	bl	b6a4c <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b7560:	b00e      	add	sp, #56	; 0x38
   b7562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b7566:	4a54      	ldr	r2, [pc, #336]	; (b76b8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b7568:	9200      	str	r2, [sp, #0]
   b756a:	2300      	movs	r3, #0
   b756c:	4951      	ldr	r1, [pc, #324]	; (b76b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b756e:	9307      	str	r3, [sp, #28]
   b7570:	aa06      	add	r2, sp, #24
   b7572:	2001      	movs	r0, #1
   b7574:	f7ff f8a0 	bl	b66b8 <log_message>
                if (impl->connectedCallback_) {
   b7578:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b757a:	2b00      	cmp	r3, #0
   b757c:	d0ea      	beq.n	b7554 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b757e:	a904      	add	r1, sp, #16
   b7580:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7584:	f7ff fe49 	bl	b721a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b7588:	e7e4      	b.n	b7554 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b758a:	89a9      	ldrh	r1, [r5, #12]
   b758c:	4620      	mov	r0, r4
   b758e:	f7ff fba7 	bl	b6ce0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7592:	4606      	mov	r6, r0
   b7594:	2800      	cmp	r0, #0
   b7596:	d0e0      	beq.n	b755a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b7598:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b759a:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b759e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b75a2:	8029      	strh	r1, [r5, #0]
   b75a4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b75a8:	429a      	cmp	r2, r3
   b75aa:	d003      	beq.n	b75b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b75ac:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b75b0:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b75b2:	e7f9      	b.n	b75a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b75b4:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b75b8:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b75bc:	45b8      	cmp	r8, r7
   b75be:	d004      	beq.n	b75ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b75c0:	1d38      	adds	r0, r7, #4
   b75c2:	f7ff fdaa 	bl	b711a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b75c6:	3708      	adds	r7, #8
   b75c8:	e7f8      	b.n	b75bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b75ca:	2300      	movs	r3, #0
   b75cc:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b75ce:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b75d2:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b75d6:	45b8      	cmp	r8, r7
   b75d8:	d004      	beq.n	b75e4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b75da:	1d38      	adds	r0, r7, #4
   b75dc:	f7ff fd9d 	bl	b711a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b75e0:	3708      	adds	r7, #8
   b75e2:	e7f8      	b.n	b75d6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b75e4:	2300      	movs	r3, #0
   b75e6:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b75e8:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b75ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b75ec:	b123      	cbz	r3, b75f8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b75ee:	4631      	mov	r1, r6
   b75f0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b75f4:	f7ff fe11 	bl	b721a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b75f8:	2300      	movs	r3, #0
   b75fa:	2220      	movs	r2, #32
   b75fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b7600:	4a2e      	ldr	r2, [pc, #184]	; (b76bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b7602:	9200      	str	r2, [sp, #0]
   b7604:	492b      	ldr	r1, [pc, #172]	; (b76b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7606:	aa06      	add	r2, sp, #24
   b7608:	2001      	movs	r0, #1
   b760a:	f7ff f855 	bl	b66b8 <log_message>
                    impl->peers_.removeOne(*peer);
   b760e:	4631      	mov	r1, r6
   b7610:	f104 0018 	add.w	r0, r4, #24
   b7614:	f7ff ff35 	bl	b7482 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b7618:	e79f      	b.n	b755a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b761a:	89a9      	ldrh	r1, [r5, #12]
   b761c:	4620      	mov	r0, r4
   b761e:	f7ff fb5f 	bl	b6ce0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7622:	2800      	cmp	r0, #0
   b7624:	d099      	beq.n	b755a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b7626:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b7628:	2b00      	cmp	r3, #0
   b762a:	d096      	beq.n	b755a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b762c:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b762e:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b7630:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7634:	d001      	beq.n	b763a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b7636:	2e10      	cmp	r6, #16
   b7638:	d117      	bne.n	b766a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b763a:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b763c:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b763e:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b7640:	2506      	movs	r5, #6
                        };
   b7642:	f88d 3015 	strb.w	r3, [sp, #21]
   b7646:	9104      	str	r1, [sp, #16]
   b7648:	f88d 2014 	strb.w	r2, [sp, #20]
   b764c:	9006      	str	r0, [sp, #24]
   b764e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b7652:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b7654:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b7658:	9508      	str	r5, [sp, #32]
   b765a:	e883 0003 	stmia.w	r3, {r0, r1}
   b765e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b7660:	a906      	add	r1, sp, #24
   b7662:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7666:	4798      	blx	r3
   b7668:	e777      	b.n	b755a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b766a:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b766c:	bf01      	itttt	eq
   b766e:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b7670:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7672:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b7676:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b7678:	bf0f      	iteee	eq
   b767a:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b767e:	461a      	movne	r2, r3
   b7680:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b7682:	461d      	movne	r5, r3
   b7684:	e7dd      	b.n	b7642 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7686:	89a9      	ldrh	r1, [r5, #12]
   b7688:	4620      	mov	r0, r4
   b768a:	f7ff fb29 	bl	b6ce0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b768e:	4601      	mov	r1, r0
   b7690:	2800      	cmp	r0, #0
   b7692:	f43f af62 	beq.w	b755a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7696:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b7698:	2b00      	cmp	r3, #0
   b769a:	f43f af5e 	beq.w	b755a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b769e:	686b      	ldr	r3, [r5, #4]
   b76a0:	9306      	str	r3, [sp, #24]
   b76a2:	aa06      	add	r2, sp, #24
   b76a4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b76a6:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b76aa:	4798      	blx	r3
   b76ac:	e755      	b.n	b755a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b76ae:	bf00      	nop
   b76b0:	000bc360 	.word	0x000bc360
   b76b4:	000bc2df 	.word	0x000bc2df
   b76b8:	000bc386 	.word	0x000bc386
   b76bc:	000bc3a3 	.word	0x000bc3a3

000b76c0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b76c0:	b513      	push	{r0, r1, r4, lr}
   b76c2:	460b      	mov	r3, r1
   b76c4:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b76c6:	e9d0 0100 	ldrd	r0, r1, [r0]
   b76ca:	466c      	mov	r4, sp
   b76cc:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b76d0:	e893 0003 	ldmia.w	r3, {r0, r1}
   b76d4:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b76d8:	e894 0003 	ldmia.w	r4, {r0, r1}
   b76dc:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b76e0:	b002      	add	sp, #8
   b76e2:	bd10      	pop	{r4, pc}

000b76e4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b76e4:	b538      	push	{r3, r4, r5, lr}
   b76e6:	4605      	mov	r5, r0
   b76e8:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b76ea:	f7ff ffe9 	bl	b76c0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b76ee:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b76f0:	68a2      	ldr	r2, [r4, #8]
   b76f2:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b76f4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b76f6:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b76f8:	68e2      	ldr	r2, [r4, #12]
   b76fa:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b76fc:	60e3      	str	r3, [r4, #12]
      }
   b76fe:	bd38      	pop	{r3, r4, r5, pc}

000b7700 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b7700:	b570      	push	{r4, r5, r6, lr}
   b7702:	4604      	mov	r4, r0
   b7704:	b08c      	sub	sp, #48	; 0x30
   b7706:	460e      	mov	r6, r1
   b7708:	9201      	str	r2, [sp, #4]
   b770a:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b770c:	f7ff fac8 	bl	b6ca0 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b7710:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b7712:	9901      	ldr	r1, [sp, #4]
   b7714:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7718:	f000 fd41 	bl	b819e <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b771c:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b7720:	b1cd      	cbz	r5, b7756 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b7722:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b7724:	9502      	str	r5, [sp, #8]
   b7726:	a902      	add	r1, sp, #8
   b7728:	a804      	add	r0, sp, #16
   b772a:	9303      	str	r3, [sp, #12]
   b772c:	f7ff fcb4 	bl	b7098 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7730:	2300      	movs	r3, #0
	__x.swap(*this);
   b7732:	a908      	add	r1, sp, #32
   b7734:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b7736:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b7738:	f7ff ffd4 	bl	b76e4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b773c:	4631      	mov	r1, r6
   b773e:	a808      	add	r0, sp, #32
   b7740:	f7ff ffd0 	bl	b76e4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b7744:	a808      	add	r0, sp, #32
   b7746:	f7ff f935 	bl	b69b4 <_ZNSt14_Function_baseD1Ev>
   b774a:	a804      	add	r0, sp, #16
   b774c:	f7ff f932 	bl	b69b4 <_ZNSt14_Function_baseD1Ev>
    }
   b7750:	4620      	mov	r0, r4
   b7752:	b00c      	add	sp, #48	; 0x30
   b7754:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7756:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b7758:	e7ea      	b.n	b7730 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b775c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b775c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7760:	b087      	sub	sp, #28
   b7762:	461d      	mov	r5, r3
   b7764:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b7768:	4680      	mov	r8, r0
   b776a:	468b      	mov	fp, r1
   b776c:	4692      	mov	sl, r2
   b776e:	9912      	ldr	r1, [sp, #72]	; 0x48
   b7770:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7772:	2200      	movs	r2, #0
   b7774:	2068      	movs	r0, #104	; 0x68
   b7776:	9102      	str	r1, [sp, #8]
   b7778:	9204      	str	r2, [sp, #16]
   b777a:	f7fc fc8c 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b777e:	1e06      	subs	r6, r0, #0
   b7780:	f106 090c 	add.w	r9, r6, #12
   b7784:	d018      	beq.n	b77b8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b7786:	2201      	movs	r2, #1
	: _M_impl(__a)
   b7788:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b778a:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b778e:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b7790:	4a15      	ldr	r2, [pc, #84]	; (b77e8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b7792:	f847 2b20 	str.w	r2, [r7], #32
   b7796:	9b03      	ldr	r3, [sp, #12]
   b7798:	9100      	str	r1, [sp, #0]
   b779a:	465a      	mov	r2, fp
   b779c:	4651      	mov	r1, sl
   b779e:	4648      	mov	r0, r9
   b77a0:	f7ff ffae 	bl	b7700 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b77a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b77a6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b77a8:	682b      	ldr	r3, [r5, #0]
   b77aa:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b77ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b77ae:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b77b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b77b4:	6823      	ldr	r3, [r4, #0]
   b77b6:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b77b8:	a904      	add	r1, sp, #16
   b77ba:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b77bc:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b77c0:	f7ff fd1a 	bl	b71f8 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b77c4:	a805      	add	r0, sp, #20
   b77c6:	f7ff fca8 	bl	b711a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b77ca:	f8d8 3000 	ldr.w	r3, [r8]
   b77ce:	b93b      	cbnz	r3, b77e0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b77d0:	4a06      	ldr	r2, [pc, #24]	; (b77ec <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b77d2:	4907      	ldr	r1, [pc, #28]	; (b77f0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b77d4:	200a      	movs	r0, #10
}
   b77d6:	b007      	add	sp, #28
   b77d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b77dc:	f7fe bf64 	b.w	b66a8 <panic_>
}
   b77e0:	b007      	add	sp, #28
   b77e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b77e6:	bf00      	nop
   b77e8:	000bc41c 	.word	0x000bc41c
   b77ec:	000b6439 	.word	0x000b6439
   b77f0:	000bc2c8 	.word	0x000bc2c8

000b77f4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b77f4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b77f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b77f8:	4604      	mov	r4, r0
   b77fa:	460d      	mov	r5, r1
   b77fc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b77fe:	d914      	bls.n	b782a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7800:	4290      	cmp	r0, r2
   b7802:	d213      	bcs.n	b782c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7804:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7808:	1a75      	subs	r5, r6, r1
   b780a:	f1a1 0708 	sub.w	r7, r1, #8
   b780e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7810:	42b7      	cmp	r7, r6
   b7812:	d018      	beq.n	b7846 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7814:	b11c      	cbz	r4, b781e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7816:	4631      	mov	r1, r6
   b7818:	4620      	mov	r0, r4
   b781a:	f7ff fc6a 	bl	b70f2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b781e:	1d30      	adds	r0, r6, #4
   b7820:	f7ff fc7b 	bl	b711a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7824:	3e08      	subs	r6, #8
   b7826:	3c08      	subs	r4, #8
   b7828:	e7f2      	b.n	b7810 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b782a:	d00c      	beq.n	b7846 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b782c:	42b5      	cmp	r5, r6
   b782e:	d00a      	beq.n	b7846 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7830:	b11c      	cbz	r4, b783a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7832:	4629      	mov	r1, r5
   b7834:	4620      	mov	r0, r4
   b7836:	f7ff fc5c 	bl	b70f2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b783a:	1d28      	adds	r0, r5, #4
   b783c:	f7ff fc6d 	bl	b711a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7840:	3508      	adds	r5, #8
   b7842:	3408      	adds	r4, #8
   b7844:	e7f2      	b.n	b782c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7848 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7848:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b784a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b784c:	4605      	mov	r5, r0
        if (n > 0) {
   b784e:	dd11      	ble.n	b7874 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7850:	00f0      	lsls	r0, r6, #3
   b7852:	f7fe ffc5 	bl	b67e0 <malloc>
            if (!d) {
   b7856:	4604      	mov	r4, r0
   b7858:	b158      	cbz	r0, b7872 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b785a:	e9d5 1200 	ldrd	r1, r2, [r5]
   b785e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7862:	f7ff ffc7 	bl	b77f4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7866:	6828      	ldr	r0, [r5, #0]
   b7868:	f7fe ffc2 	bl	b67f0 <free>
        data_ = d;
   b786c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b786e:	60ae      	str	r6, [r5, #8]
        return true;
   b7870:	2001      	movs	r0, #1
    }
   b7872:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7874:	2400      	movs	r4, #0
   b7876:	e7f6      	b.n	b7866 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7878 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7878:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b787a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b787c:	6845      	ldr	r5, [r0, #4]
   b787e:	4668      	mov	r0, sp
   b7880:	f7ff fc37 	bl	b70f2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7884:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7888:	4299      	cmp	r1, r3
   b788a:	da10      	bge.n	b78ae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b788c:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b788e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7890:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7894:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7898:	4629      	mov	r1, r5
   b789a:	f105 0008 	add.w	r0, r5, #8
   b789e:	f7ff ffa9 	bl	b77f4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b78a2:	b98d      	cbnz	r5, b78c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b78a4:	6863      	ldr	r3, [r4, #4]
   b78a6:	3301      	adds	r3, #1
   b78a8:	6063      	str	r3, [r4, #4]
    return true;
   b78aa:	2601      	movs	r6, #1
   b78ac:	e006      	b.n	b78bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b78ae:	3101      	adds	r1, #1
   b78b0:	4620      	mov	r0, r4
   b78b2:	f7ff ffc9 	bl	b7848 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b78b6:	4606      	mov	r6, r0
   b78b8:	2800      	cmp	r0, #0
   b78ba:	d1e7      	bne.n	b788c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b78bc:	a801      	add	r0, sp, #4
   b78be:	f7ff fc2c 	bl	b711a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b78c2:	4630      	mov	r0, r6
   b78c4:	b002      	add	sp, #8
   b78c6:	bd70      	pop	{r4, r5, r6, pc}
   b78c8:	4669      	mov	r1, sp
   b78ca:	4628      	mov	r0, r5
   b78cc:	f7ff fc11 	bl	b70f2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b78d0:	e7e8      	b.n	b78a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b78d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b78d2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b78d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b78d6:	4604      	mov	r4, r0
   b78d8:	460d      	mov	r5, r1
   b78da:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b78dc:	d914      	bls.n	b7908 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b78de:	4290      	cmp	r0, r2
   b78e0:	d213      	bcs.n	b790a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b78e2:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b78e6:	1a75      	subs	r5, r6, r1
   b78e8:	f1a1 0708 	sub.w	r7, r1, #8
   b78ec:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b78ee:	42b7      	cmp	r7, r6
   b78f0:	d018      	beq.n	b7924 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b78f2:	b11c      	cbz	r4, b78fc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b78f4:	4631      	mov	r1, r6
   b78f6:	4620      	mov	r0, r4
   b78f8:	f7ff fbed 	bl	b70d6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b78fc:	1d30      	adds	r0, r6, #4
   b78fe:	f7ff fc0c 	bl	b711a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7902:	3e08      	subs	r6, #8
   b7904:	3c08      	subs	r4, #8
   b7906:	e7f2      	b.n	b78ee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7908:	d00c      	beq.n	b7924 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b790a:	42b5      	cmp	r5, r6
   b790c:	d00a      	beq.n	b7924 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b790e:	b11c      	cbz	r4, b7918 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7910:	4629      	mov	r1, r5
   b7912:	4620      	mov	r0, r4
   b7914:	f7ff fbdf 	bl	b70d6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7918:	1d28      	adds	r0, r5, #4
   b791a:	f7ff fbfe 	bl	b711a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b791e:	3508      	adds	r5, #8
   b7920:	3408      	adds	r4, #8
   b7922:	e7f2      	b.n	b790a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7926 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7926:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7928:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b792a:	4605      	mov	r5, r0
        if (n > 0) {
   b792c:	dd11      	ble.n	b7952 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b792e:	00f0      	lsls	r0, r6, #3
   b7930:	f7fe ff56 	bl	b67e0 <malloc>
            if (!d) {
   b7934:	4604      	mov	r4, r0
   b7936:	b158      	cbz	r0, b7950 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7938:	e9d5 1200 	ldrd	r1, r2, [r5]
   b793c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7940:	f7ff ffc7 	bl	b78d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7944:	6828      	ldr	r0, [r5, #0]
   b7946:	f7fe ff53 	bl	b67f0 <free>
        data_ = d;
   b794a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b794c:	60ae      	str	r6, [r5, #8]
        return true;
   b794e:	2001      	movs	r0, #1
    }
   b7950:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7952:	2400      	movs	r4, #0
   b7954:	e7f6      	b.n	b7944 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7956 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7956:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7958:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b795a:	6845      	ldr	r5, [r0, #4]
   b795c:	4668      	mov	r0, sp
   b795e:	f7ff fbba 	bl	b70d6 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7962:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7966:	4299      	cmp	r1, r3
   b7968:	da10      	bge.n	b798c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b796a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b796c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b796e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7972:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7976:	4629      	mov	r1, r5
   b7978:	f105 0008 	add.w	r0, r5, #8
   b797c:	f7ff ffa9 	bl	b78d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7980:	b98d      	cbnz	r5, b79a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7982:	6863      	ldr	r3, [r4, #4]
   b7984:	3301      	adds	r3, #1
   b7986:	6063      	str	r3, [r4, #4]
    return true;
   b7988:	2601      	movs	r6, #1
   b798a:	e006      	b.n	b799a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b798c:	3101      	adds	r1, #1
   b798e:	4620      	mov	r0, r4
   b7990:	f7ff ffc9 	bl	b7926 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7994:	4606      	mov	r6, r0
   b7996:	2800      	cmp	r0, #0
   b7998:	d1e7      	bne.n	b796a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b799a:	a801      	add	r0, sp, #4
   b799c:	f7ff fbbd 	bl	b711a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b79a0:	4630      	mov	r0, r6
   b79a2:	b002      	add	sp, #8
   b79a4:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b79a6:	4669      	mov	r1, sp
   b79a8:	4628      	mov	r0, r5
   b79aa:	f7ff fb94 	bl	b70d6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b79ae:	e7e8      	b.n	b7982 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b79b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b79b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b79b4:	4617      	mov	r7, r2
   b79b6:	b0a1      	sub	sp, #132	; 0x84
   b79b8:	4680      	mov	r8, r0
    WiringBleLock lk;
   b79ba:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b79bc:	460e      	mov	r6, r1
    WiringBleLock lk;
   b79be:	f7ff f837 	bl	b6a30 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b79c2:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b79c4:	7923      	ldrb	r3, [r4, #4]
   b79c6:	b953      	cbnz	r3, b79de <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b79c8:	4639      	mov	r1, r7
   b79ca:	4640      	mov	r0, r8
   b79cc:	f7ff fb83 	bl	b70d6 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b79d0:	a80a      	add	r0, sp, #40	; 0x28
   b79d2:	f7ff f83b 	bl	b6a4c <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b79d6:	4640      	mov	r0, r8
   b79d8:	b021      	add	sp, #132	; 0x84
   b79da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b79de:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b79e0:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b79e4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b79e8:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b79ea:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b79ee:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b79f2:	9b03      	ldr	r3, [sp, #12]
   b79f4:	429d      	cmp	r5, r3
   b79f6:	d021      	beq.n	b7a3c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b79f8:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b79fc:	4658      	mov	r0, fp
   b79fe:	f109 0114 	add.w	r1, r9, #20
   b7a02:	f7ff f8c2 	bl	b6b8a <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b7a06:	b1b8      	cbz	r0, b7a38 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b7a08:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b7a0c:	4650      	mov	r0, sl
   b7a0e:	f7ff f8bc 	bl	b6b8a <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b7a12:	b188      	cbz	r0, b7a38 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b7a14:	6823      	ldr	r3, [r4, #0]
   b7a16:	f8d9 2000 	ldr.w	r2, [r9]
   b7a1a:	4053      	eors	r3, r2
   b7a1c:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b7a20:	d10a      	bne.n	b7a38 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b7a22:	2220      	movs	r2, #32
   b7a24:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b7a28:	4a5e      	ldr	r2, [pc, #376]	; (b7ba4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b7a2a:	9200      	str	r2, [sp, #0]
   b7a2c:	aa15      	add	r2, sp, #84	; 0x54
   b7a2e:	495e      	ldr	r1, [pc, #376]	; (b7ba8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b7a30:	2032      	movs	r0, #50	; 0x32
   b7a32:	f7fe fe41 	bl	b66b8 <log_message>
   b7a36:	e7c7      	b.n	b79c8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b7a38:	3508      	adds	r5, #8
   b7a3a:	e7da      	b.n	b79f2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b7a3c:	4650      	mov	r0, sl
   b7a3e:	f7ff f875 	bl	b6b2c <_ZNK8particle7BleUuid7isValidEv>
   b7a42:	b960      	cbnz	r0, b7a5e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b7a44:	4959      	ldr	r1, [pc, #356]	; (b7bac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b7a46:	2201      	movs	r2, #1
   b7a48:	a815      	add	r0, sp, #84	; 0x54
   b7a4a:	ad15      	add	r5, sp, #84	; 0x54
   b7a4c:	f7ff f846 	bl	b6adc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b7a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7a52:	46d4      	mov	ip, sl
   b7a54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7a58:	682b      	ldr	r3, [r5, #0]
   b7a5a:	f8cc 3000 	str.w	r3, [ip]
   b7a5e:	6833      	ldr	r3, [r6, #0]
   b7a60:	e9d3 5300 	ldrd	r5, r3, [r3]
   b7a64:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b7a68:	455d      	cmp	r5, fp
   b7a6a:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b7a6c:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b7a6e:	d06e      	beq.n	b7b4e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b7a70:	f855 0b08 	ldr.w	r0, [r5], #8
   b7a74:	f7ff f889 	bl	b6b8a <_ZNK8particle7BleUuideqERKS0_>
   b7a78:	2800      	cmp	r0, #0
   b7a7a:	d0f5      	beq.n	b7a68 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b7a7c:	f104 0a14 	add.w	sl, r4, #20
   b7a80:	4650      	mov	r0, sl
   b7a82:	f7ff f853 	bl	b6b2c <_ZNK8particle7BleUuid7isValidEv>
   b7a86:	b988      	cbnz	r0, b7aac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b7a88:	4b49      	ldr	r3, [pc, #292]	; (b7bb0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7a8a:	4948      	ldr	r1, [pc, #288]	; (b7bac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b7a8c:	881a      	ldrh	r2, [r3, #0]
   b7a8e:	3201      	adds	r2, #1
   b7a90:	b292      	uxth	r2, r2
   b7a92:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7a94:	a815      	add	r0, sp, #84	; 0x54
   b7a96:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b7a98:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7a9a:	f7ff f83e 	bl	b6b1a <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b7a9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7aa0:	46d4      	mov	ip, sl
   b7aa2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7aa6:	682b      	ldr	r3, [r5, #0]
   b7aa8:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b7aac:	4b41      	ldr	r3, [pc, #260]	; (b7bb4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b7aae:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b7ab0:	2228      	movs	r2, #40	; 0x28
   b7ab2:	2100      	movs	r1, #0
   b7ab4:	a816      	add	r0, sp, #88	; 0x58
   b7ab6:	f002 fa0e 	bl	b9ed6 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b7aba:	4651      	mov	r1, sl
   b7abc:	a804      	add	r0, sp, #16
   b7abe:	f7ff f847 	bl	b6b50 <_ZN8particle7BleUuid7halUUIDEv>
   b7ac2:	ab04      	add	r3, sp, #16
   b7ac4:	aa18      	add	r2, sp, #96	; 0x60
   b7ac6:	f10d 0c20 	add.w	ip, sp, #32
   b7aca:	6818      	ldr	r0, [r3, #0]
   b7acc:	6859      	ldr	r1, [r3, #4]
   b7ace:	4615      	mov	r5, r2
   b7ad0:	c503      	stmia	r5!, {r0, r1}
   b7ad2:	3308      	adds	r3, #8
   b7ad4:	4563      	cmp	r3, ip
   b7ad6:	462a      	mov	r2, r5
   b7ad8:	d1f7      	bne.n	b7aca <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b7ada:	6818      	ldr	r0, [r3, #0]
   b7adc:	6028      	str	r0, [r5, #0]
    return value_;
   b7ade:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b7ae0:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b7ae4:	f8d9 3000 	ldr.w	r3, [r9]
   b7ae8:	8a9b      	ldrh	r3, [r3, #20]
   b7aea:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b7aee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7af0:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b7af2:	4b31      	ldr	r3, [pc, #196]	; (b7bb8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b7af4:	2200      	movs	r2, #0
   b7af6:	1da1      	adds	r1, r4, #6
   b7af8:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b7afa:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b7afe:	f7fe fc53 	bl	b63a8 <hal_ble_gatt_server_add_characteristic>
   b7b02:	2800      	cmp	r0, #0
   b7b04:	f47f af60 	bne.w	b79c8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b7b08:	2301      	movs	r3, #1
   b7b0a:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b7b0c:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b7b0e:	4639      	mov	r1, r7
        return characteristics_;
   b7b10:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b7b12:	a80d      	add	r0, sp, #52	; 0x34
   b7b14:	f7ff fadf 	bl	b70d6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7b18:	4620      	mov	r0, r4
   b7b1a:	a90d      	add	r1, sp, #52	; 0x34
   b7b1c:	f7ff ff1b 	bl	b7956 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b7b20:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b7b22:	a80e      	add	r0, sp, #56	; 0x38
   b7b24:	f7ff faf9 	bl	b711a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7b28:	2c00      	cmp	r4, #0
   b7b2a:	f47f af4d 	bne.w	b79c8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b7b2e:	2320      	movs	r3, #32
   b7b30:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b7b34:	4b21      	ldr	r3, [pc, #132]	; (b7bbc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b7b36:	9300      	str	r3, [sp, #0]
   b7b38:	aa0d      	add	r2, sp, #52	; 0x34
   b7b3a:	4623      	mov	r3, r4
   b7b3c:	e777      	b.n	b7a2e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b7b3e:	4639      	mov	r1, r7
   b7b40:	4640      	mov	r0, r8
   b7b42:	f7ff fac8 	bl	b70d6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7b46:	a80c      	add	r0, sp, #48	; 0x30
   b7b48:	f7ff fae7 	bl	b711a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7b4c:	e740      	b.n	b79d0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b7b4e:	a80b      	add	r0, sp, #44	; 0x2c
   b7b50:	f7ff f94a 	bl	b6de8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b7b54:	4651      	mov	r1, sl
   b7b56:	a815      	add	r0, sp, #84	; 0x54
   b7b58:	f7fe fffa 	bl	b6b50 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b7b5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b7b5e:	2300      	movs	r3, #0
   b7b60:	3214      	adds	r2, #20
   b7b62:	a915      	add	r1, sp, #84	; 0x54
   b7b64:	2001      	movs	r0, #1
   b7b66:	f7fe fbf7 	bl	b6358 <hal_ble_gatt_server_add_service>
   b7b6a:	2800      	cmp	r0, #0
   b7b6c:	d1e7      	bne.n	b7b3e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b7b6e:	6835      	ldr	r5, [r6, #0]
   b7b70:	a90b      	add	r1, sp, #44	; 0x2c
   b7b72:	a80d      	add	r0, sp, #52	; 0x34
   b7b74:	f7ff fabd 	bl	b70f2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b7b78:	4628      	mov	r0, r5
   b7b7a:	a90d      	add	r1, sp, #52	; 0x34
   b7b7c:	f7ff fe7c 	bl	b7878 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b7b80:	4605      	mov	r5, r0
   b7b82:	a80e      	add	r0, sp, #56	; 0x38
   b7b84:	f7ff fac9 	bl	b711a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7b88:	2d00      	cmp	r5, #0
   b7b8a:	d0d8      	beq.n	b7b3e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b7b8c:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b7b8e:	6853      	ldr	r3, [r2, #4]
   b7b90:	6812      	ldr	r2, [r2, #0]
   b7b92:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b7b96:	3b01      	subs	r3, #1
   b7b98:	a80c      	add	r0, sp, #48	; 0x30
   b7b9a:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b7b9e:	f7ff fabc 	bl	b711a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7ba2:	e76b      	b.n	b7a7c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b7ba4:	000bc3c2 	.word	0x000bc3c2
   b7ba8:	000bc2df 	.word	0x000bc2df
   b7bac:	000bc486 	.word	0x000bc486
   b7bb0:	2003e6bc 	.word	0x2003e6bc
   b7bb4:	002c0003 	.word	0x002c0003
   b7bb8:	000b6f81 	.word	0x000b6f81
   b7bbc:	000bc3ed 	.word	0x000bc3ed

000b7bc0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b7bc0:	4802      	ldr	r0, [pc, #8]	; (b7bcc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b7bc2:	2300      	movs	r3, #0
   b7bc4:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b7bc6:	f7fe bc17 	b.w	b63f8 <os_mutex_recursive_create>
   b7bca:	bf00      	nop
   b7bcc:	2003e6c0 	.word	0x2003e6c0

000b7bd0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7bd0:	2200      	movs	r2, #0
   b7bd2:	6840      	ldr	r0, [r0, #4]
   b7bd4:	4611      	mov	r1, r2
   b7bd6:	f7fe bddb 	b.w	b6790 <network_listening>

000b7bda <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7bda:	2200      	movs	r2, #0
   b7bdc:	6840      	ldr	r0, [r0, #4]
   b7bde:	4611      	mov	r1, r2
   b7be0:	f7fe bde6 	b.w	b67b0 <network_get_listen_timeout>

000b7be4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7be4:	6840      	ldr	r0, [r0, #4]
   b7be6:	2200      	movs	r2, #0
   b7be8:	f7fe bdda 	b.w	b67a0 <network_set_listen_timeout>

000b7bec <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7bec:	6840      	ldr	r0, [r0, #4]
   b7bee:	2200      	movs	r2, #0
   b7bf0:	f081 0101 	eor.w	r1, r1, #1
   b7bf4:	f7fe bdc4 	b.w	b6780 <network_listen>

000b7bf8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7bf8:	2300      	movs	r3, #0
   b7bfa:	6840      	ldr	r0, [r0, #4]
   b7bfc:	461a      	mov	r2, r3
   b7bfe:	4619      	mov	r1, r3
   b7c00:	f7fe bdb6 	b.w	b6770 <network_off>

000b7c04 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7c04:	2300      	movs	r3, #0
   b7c06:	6840      	ldr	r0, [r0, #4]
   b7c08:	461a      	mov	r2, r3
   b7c0a:	4619      	mov	r1, r3
   b7c0c:	f7fe bda8 	b.w	b6760 <network_on>

000b7c10 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7c10:	2200      	movs	r2, #0
   b7c12:	6840      	ldr	r0, [r0, #4]
   b7c14:	4611      	mov	r1, r2
   b7c16:	f7fe bd9b 	b.w	b6750 <network_ready>

000b7c1a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7c1a:	2200      	movs	r2, #0
   b7c1c:	6840      	ldr	r0, [r0, #4]
   b7c1e:	4611      	mov	r1, r2
   b7c20:	f7fe bd86 	b.w	b6730 <network_connecting>

000b7c24 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7c24:	6840      	ldr	r0, [r0, #4]
   b7c26:	2200      	movs	r2, #0
   b7c28:	2102      	movs	r1, #2
   b7c2a:	f7fe bd89 	b.w	b6740 <network_disconnect>

000b7c2e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7c2e:	2300      	movs	r3, #0
   b7c30:	6840      	ldr	r0, [r0, #4]
   b7c32:	461a      	mov	r2, r3
   b7c34:	f7fe bd74 	b.w	b6720 <network_connect>

000b7c38 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7c38:	4b02      	ldr	r3, [pc, #8]	; (b7c44 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7c3a:	2203      	movs	r2, #3
   b7c3c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7c3e:	4a02      	ldr	r2, [pc, #8]	; (b7c48 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7c40:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7c42:	4770      	bx	lr
   b7c44:	2003e6c8 	.word	0x2003e6c8
   b7c48:	000bc4b0 	.word	0x000bc4b0

000b7c4c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7c4c:	4770      	bx	lr

000b7c4e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b7c4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7c50:	4606      	mov	r6, r0
   b7c52:	4615      	mov	r5, r2
   b7c54:	460c      	mov	r4, r1
   b7c56:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7c58:	42bc      	cmp	r4, r7
   b7c5a:	d006      	beq.n	b7c6a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b7c5c:	6833      	ldr	r3, [r6, #0]
   b7c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7c62:	689b      	ldr	r3, [r3, #8]
   b7c64:	4630      	mov	r0, r6
   b7c66:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7c68:	e7f6      	b.n	b7c58 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b7c6a:	4628      	mov	r0, r5
   b7c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7c6e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b7c6e:	7c00      	ldrb	r0, [r0, #16]
   b7c70:	2200      	movs	r2, #0
   b7c72:	f7fe bc11 	b.w	b6498 <hal_i2c_write>

000b7c76 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b7c76:	7c00      	ldrb	r0, [r0, #16]
   b7c78:	2100      	movs	r1, #0
   b7c7a:	f7fe bc15 	b.w	b64a8 <hal_i2c_available>

000b7c7e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b7c7e:	7c00      	ldrb	r0, [r0, #16]
   b7c80:	2100      	movs	r1, #0
   b7c82:	f7fe bc19 	b.w	b64b8 <hal_i2c_read>

000b7c86 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b7c86:	7c00      	ldrb	r0, [r0, #16]
   b7c88:	2100      	movs	r1, #0
   b7c8a:	f7fe bc1d 	b.w	b64c8 <hal_i2c_peek>

000b7c8e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b7c8e:	7c00      	ldrb	r0, [r0, #16]
   b7c90:	2100      	movs	r1, #0
   b7c92:	f7fe bc21 	b.w	b64d8 <hal_i2c_flush>

000b7c96 <_ZN7TwoWireD0Ev>:
   b7c96:	b510      	push	{r4, lr}
   b7c98:	2114      	movs	r1, #20
   b7c9a:	4604      	mov	r4, r0
   b7c9c:	f7fc f9ff 	bl	b409e <_ZdlPvj>
   b7ca0:	4620      	mov	r0, r4
   b7ca2:	bd10      	pop	{r4, pc}

000b7ca4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7ca4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7caa:	4604      	mov	r4, r0
   b7cac:	4608      	mov	r0, r1
   b7cae:	2100      	movs	r1, #0
   b7cb0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7cb4:	4b03      	ldr	r3, [pc, #12]	; (b7cc4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b7cb6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b7cb8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b7cba:	4611      	mov	r1, r2
   b7cbc:	f7fe fc14 	bl	b64e8 <hal_i2c_init>
}
   b7cc0:	4620      	mov	r0, r4
   b7cc2:	bd10      	pop	{r4, pc}
   b7cc4:	000bc4ec 	.word	0x000bc4ec

000b7cc8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b7cc8:	2300      	movs	r3, #0
   b7cca:	7c00      	ldrb	r0, [r0, #16]
   b7ccc:	461a      	mov	r2, r3
   b7cce:	4619      	mov	r1, r3
   b7cd0:	f7fe bbca 	b.w	b6468 <hal_i2c_begin>

000b7cd4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b7cd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b7cd6:	2200      	movs	r2, #0
   b7cd8:	2314      	movs	r3, #20
   b7cda:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b7cde:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b7ce2:	780b      	ldrb	r3, [r1, #0]
   b7ce4:	f88d 3008 	strb.w	r3, [sp, #8]
   b7ce8:	684b      	ldr	r3, [r1, #4]
   b7cea:	9303      	str	r3, [sp, #12]
   b7cec:	68cb      	ldr	r3, [r1, #12]
   b7cee:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b7cf0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b7cf2:	7a0b      	ldrb	r3, [r1, #8]
   b7cf4:	9305      	str	r3, [sp, #20]
   b7cf6:	a901      	add	r1, sp, #4
   b7cf8:	f7fe fbfe 	bl	b64f8 <hal_i2c_request_ex>
}
   b7cfc:	b007      	add	sp, #28
   b7cfe:	f85d fb04 	ldr.w	pc, [sp], #4

000b7d02 <_ZN7TwoWire11requestFromEhjh>:
{
   b7d02:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b7d04:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b7d06:	f88d 1000 	strb.w	r1, [sp]
   b7d0a:	f04f 0164 	mov.w	r1, #100	; 0x64
   b7d0e:	9103      	str	r1, [sp, #12]
   b7d10:	bf18      	it	ne
   b7d12:	2301      	movne	r3, #1
   b7d14:	4669      	mov	r1, sp
    size_ = size;
   b7d16:	9201      	str	r2, [sp, #4]
   b7d18:	f88d 3008 	strb.w	r3, [sp, #8]
   b7d1c:	f7ff ffda 	bl	b7cd4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b7d20:	b005      	add	sp, #20
   b7d22:	f85d fb04 	ldr.w	pc, [sp], #4

000b7d26 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b7d26:	2301      	movs	r3, #1
   b7d28:	f7ff bfeb 	b.w	b7d02 <_ZN7TwoWire11requestFromEhjh>

000b7d2c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b7d2c:	7c00      	ldrb	r0, [r0, #16]
   b7d2e:	2200      	movs	r2, #0
   b7d30:	f7fe bba2 	b.w	b6478 <hal_i2c_begin_transmission>

000b7d34 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b7d34:	b2c9      	uxtb	r1, r1
   b7d36:	f7ff bff9 	b.w	b7d2c <_ZN7TwoWire17beginTransmissionEh>

000b7d3a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b7d3a:	7c00      	ldrb	r0, [r0, #16]
   b7d3c:	2200      	movs	r2, #0
   b7d3e:	f7fe bba3 	b.w	b6488 <hal_i2c_end_transmission>

000b7d42 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b7d42:	2101      	movs	r1, #1
   b7d44:	f7ff bff9 	b.w	b7d3a <_ZN7TwoWire15endTransmissionEh>

000b7d48 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b7d48:	4770      	bx	lr

000b7d4a <_ZN9IPAddressD0Ev>:
   b7d4a:	b510      	push	{r4, lr}
   b7d4c:	2118      	movs	r1, #24
   b7d4e:	4604      	mov	r4, r0
   b7d50:	f7fc f9a5 	bl	b409e <_ZdlPvj>
   b7d54:	4620      	mov	r0, r4
   b7d56:	bd10      	pop	{r4, pc}

000b7d58 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7d58:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b7d5a:	7d03      	ldrb	r3, [r0, #20]
   b7d5c:	2b06      	cmp	r3, #6
{
   b7d5e:	b08d      	sub	sp, #52	; 0x34
   b7d60:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7d62:	f100 0704 	add.w	r7, r0, #4
   b7d66:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b7d6a:	d012      	beq.n	b7d92 <_ZNK9IPAddress7printToER5Print+0x3a>
   b7d6c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7d70:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7d74:	220a      	movs	r2, #10
   b7d76:	4630      	mov	r0, r6
   b7d78:	f000 f973 	bl	b8062 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7d7c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b7d7e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7d80:	d019      	beq.n	b7db6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b7d82:	2c00      	cmp	r4, #0
   b7d84:	d0f4      	beq.n	b7d70 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b7d86:	212e      	movs	r1, #46	; 0x2e
   b7d88:	4630      	mov	r0, r6
   b7d8a:	f000 f951 	bl	b8030 <_ZN5Print5printEc>
   b7d8e:	4404      	add	r4, r0
   b7d90:	e7ee      	b.n	b7d70 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7d92:	232f      	movs	r3, #47	; 0x2f
   b7d94:	466a      	mov	r2, sp
   b7d96:	4639      	mov	r1, r7
   b7d98:	200a      	movs	r0, #10
		buf[0] = 0;
   b7d9a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7d9e:	f7fe fbbb 	bl	b6518 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b7da2:	4668      	mov	r0, sp
   b7da4:	f002 f8e0 	bl	b9f68 <strlen>
   b7da8:	6833      	ldr	r3, [r6, #0]
   b7daa:	4602      	mov	r2, r0
   b7dac:	68db      	ldr	r3, [r3, #12]
   b7dae:	4669      	mov	r1, sp
   b7db0:	4630      	mov	r0, r6
   b7db2:	4798      	blx	r3
   b7db4:	4604      	mov	r4, r0
    }
    return n;
}
   b7db6:	4620      	mov	r0, r4
   b7db8:	b00d      	add	sp, #52	; 0x34
   b7dba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7dbc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b7dbc:	b510      	push	{r4, lr}
   b7dbe:	4b05      	ldr	r3, [pc, #20]	; (b7dd4 <_ZN9IPAddressC1Ev+0x18>)
   b7dc0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b7dc2:	2211      	movs	r2, #17
   b7dc4:	f840 3b04 	str.w	r3, [r0], #4
   b7dc8:	2100      	movs	r1, #0
   b7dca:	f002 f884 	bl	b9ed6 <memset>
}
   b7dce:	4620      	mov	r0, r4
   b7dd0:	bd10      	pop	{r4, pc}
   b7dd2:	bf00      	nop
   b7dd4:	000bc514 	.word	0x000bc514

000b7dd8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7dd8:	4603      	mov	r3, r0
   b7dda:	4a07      	ldr	r2, [pc, #28]	; (b7df8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b7ddc:	b510      	push	{r4, lr}
   b7dde:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b7de2:	f101 0210 	add.w	r2, r1, #16
   b7de6:	f851 4b04 	ldr.w	r4, [r1], #4
   b7dea:	f843 4b04 	str.w	r4, [r3], #4
   b7dee:	4291      	cmp	r1, r2
   b7df0:	d1f9      	bne.n	b7de6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b7df2:	780a      	ldrb	r2, [r1, #0]
   b7df4:	701a      	strb	r2, [r3, #0]
}
   b7df6:	bd10      	pop	{r4, pc}
   b7df8:	000bc514 	.word	0x000bc514

000b7dfc <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b7dfc:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b7dfe:	2b04      	cmp	r3, #4
   b7e00:	d104      	bne.n	b7e0c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b7e02:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7e04:	3800      	subs	r0, #0
   b7e06:	bf18      	it	ne
   b7e08:	2001      	movne	r0, #1
   b7e0a:	4770      	bx	lr
    } else if (version() == 6) {
   b7e0c:	2b06      	cmp	r3, #6
   b7e0e:	d107      	bne.n	b7e20 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7e10:	6843      	ldr	r3, [r0, #4]
   b7e12:	b93b      	cbnz	r3, b7e24 <_ZNK9IPAddresscvbEv+0x28>
   b7e14:	6883      	ldr	r3, [r0, #8]
   b7e16:	b92b      	cbnz	r3, b7e24 <_ZNK9IPAddresscvbEv+0x28>
   b7e18:	68c3      	ldr	r3, [r0, #12]
   b7e1a:	b91b      	cbnz	r3, b7e24 <_ZNK9IPAddresscvbEv+0x28>
   b7e1c:	6900      	ldr	r0, [r0, #16]
   b7e1e:	e7f1      	b.n	b7e04 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b7e20:	2000      	movs	r0, #0
   b7e22:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7e24:	2001      	movs	r0, #1
}
   b7e26:	4770      	bx	lr

000b7e28 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7e28:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7e2a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b7e2e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b7e32:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7e36:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7e3a:	2304      	movs	r3, #4
   b7e3c:	6041      	str	r1, [r0, #4]
   b7e3e:	7503      	strb	r3, [r0, #20]
}
   b7e40:	bd10      	pop	{r4, pc}
	...

000b7e44 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7e44:	b507      	push	{r0, r1, r2, lr}
   b7e46:	4b06      	ldr	r3, [pc, #24]	; (b7e60 <_ZN9IPAddressC1EPKh+0x1c>)
   b7e48:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7e4a:	78cb      	ldrb	r3, [r1, #3]
   b7e4c:	9300      	str	r3, [sp, #0]
   b7e4e:	788b      	ldrb	r3, [r1, #2]
   b7e50:	784a      	ldrb	r2, [r1, #1]
   b7e52:	7809      	ldrb	r1, [r1, #0]
   b7e54:	f7ff ffe8 	bl	b7e28 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7e58:	b003      	add	sp, #12
   b7e5a:	f85d fb04 	ldr.w	pc, [sp], #4
   b7e5e:	bf00      	nop
   b7e60:	000bc514 	.word	0x000bc514

000b7e64 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b7e64:	4b01      	ldr	r3, [pc, #4]	; (b7e6c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b7e66:	4a02      	ldr	r2, [pc, #8]	; (b7e70 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7e68:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b7e6a:	4770      	bx	lr
   b7e6c:	2003e6d0 	.word	0x2003e6d0
   b7e70:	000bc520 	.word	0x000bc520

000b7e74 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7e74:	2300      	movs	r3, #0
   b7e76:	6840      	ldr	r0, [r0, #4]
   b7e78:	461a      	mov	r2, r3
   b7e7a:	f7fe bc51 	b.w	b6720 <network_connect>

000b7e7e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b7e7e:	6840      	ldr	r0, [r0, #4]
   b7e80:	2200      	movs	r2, #0
   b7e82:	2102      	movs	r1, #2
   b7e84:	f7fe bc5c 	b.w	b6740 <network_disconnect>

000b7e88 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7e88:	2200      	movs	r2, #0
   b7e8a:	6840      	ldr	r0, [r0, #4]
   b7e8c:	4611      	mov	r1, r2
   b7e8e:	f7fe bc4f 	b.w	b6730 <network_connecting>

000b7e92 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b7e92:	2200      	movs	r2, #0
   b7e94:	6840      	ldr	r0, [r0, #4]
   b7e96:	4611      	mov	r1, r2
   b7e98:	f7fe bc5a 	b.w	b6750 <network_ready>

000b7e9c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7e9c:	2300      	movs	r3, #0
   b7e9e:	6840      	ldr	r0, [r0, #4]
   b7ea0:	461a      	mov	r2, r3
   b7ea2:	4619      	mov	r1, r3
   b7ea4:	f7fe bc5c 	b.w	b6760 <network_on>

000b7ea8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7ea8:	2300      	movs	r3, #0
   b7eaa:	6840      	ldr	r0, [r0, #4]
   b7eac:	461a      	mov	r2, r3
   b7eae:	4619      	mov	r1, r3
   b7eb0:	f7fe bc5e 	b.w	b6770 <network_off>

000b7eb4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7eb4:	6840      	ldr	r0, [r0, #4]
   b7eb6:	2100      	movs	r1, #0
   b7eb8:	f7fe bc82 	b.w	b67c0 <network_is_on>

000b7ebc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7ebc:	6840      	ldr	r0, [r0, #4]
   b7ebe:	2100      	movs	r1, #0
   b7ec0:	f7fe bc86 	b.w	b67d0 <network_is_off>

000b7ec4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7ec4:	6840      	ldr	r0, [r0, #4]
   b7ec6:	2200      	movs	r2, #0
   b7ec8:	f081 0101 	eor.w	r1, r1, #1
   b7ecc:	f7fe bc58 	b.w	b6780 <network_listen>

000b7ed0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7ed0:	6840      	ldr	r0, [r0, #4]
   b7ed2:	2200      	movs	r2, #0
   b7ed4:	f7fe bc64 	b.w	b67a0 <network_set_listen_timeout>

000b7ed8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7ed8:	2200      	movs	r2, #0
   b7eda:	6840      	ldr	r0, [r0, #4]
   b7edc:	4611      	mov	r1, r2
   b7ede:	f7fe bc67 	b.w	b67b0 <network_get_listen_timeout>

000b7ee2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b7ee2:	2200      	movs	r2, #0
   b7ee4:	6840      	ldr	r0, [r0, #4]
   b7ee6:	4611      	mov	r1, r2
   b7ee8:	f7fe bc52 	b.w	b6790 <network_listening>

000b7eec <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b7eec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7ef0:	b095      	sub	sp, #84	; 0x54
   b7ef2:	4614      	mov	r4, r2
   b7ef4:	460d      	mov	r5, r1
   b7ef6:	4607      	mov	r7, r0
    IPAddress addr;
   b7ef8:	f7ff ff60 	bl	b7dbc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b7efc:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b7efe:	221c      	movs	r2, #28
   b7f00:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b7f02:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7f04:	f001 ffe7 	bl	b9ed6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b7f08:	2340      	movs	r3, #64	; 0x40
   b7f0a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b7f0c:	4620      	mov	r0, r4
   b7f0e:	466b      	mov	r3, sp
   b7f10:	aa0c      	add	r2, sp, #48	; 0x30
   b7f12:	2100      	movs	r1, #0
   b7f14:	f7fe fb20 	bl	b6558 <netdb_getaddrinfo>
    if (!r) {
   b7f18:	4604      	mov	r4, r0
   b7f1a:	2800      	cmp	r0, #0
   b7f1c:	d14b      	bne.n	b7fb6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7f1e:	4602      	mov	r2, r0
   b7f20:	2101      	movs	r1, #1
   b7f22:	6868      	ldr	r0, [r5, #4]
   b7f24:	f7fe fc14 	bl	b6750 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7f28:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7f2a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7f2c:	4622      	mov	r2, r4
   b7f2e:	6868      	ldr	r0, [r5, #4]
   b7f30:	f7fe fc0e 	bl	b6750 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7f34:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7f36:	4681      	mov	r9, r0
        bool ok = false;
   b7f38:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7f3a:	2e00      	cmp	r6, #0
   b7f3c:	d03b      	beq.n	b7fb6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b7f3e:	2900      	cmp	r1, #0
   b7f40:	d139      	bne.n	b7fb6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b7f42:	6873      	ldr	r3, [r6, #4]
   b7f44:	2b02      	cmp	r3, #2
   b7f46:	d003      	beq.n	b7f50 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7f48:	2b0a      	cmp	r3, #10
   b7f4a:	d011      	beq.n	b7f70 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7f4c:	69f6      	ldr	r6, [r6, #28]
   b7f4e:	e7f4      	b.n	b7f3a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7f50:	f1b8 0f00 	cmp.w	r8, #0
   b7f54:	d0fa      	beq.n	b7f4c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b7f56:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7f58:	a806      	add	r0, sp, #24
   b7f5a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7f5c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b7f5e:	f7ff ff71 	bl	b7e44 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7f62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7f64:	1d3c      	adds	r4, r7, #4
   b7f66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7f68:	682b      	ldr	r3, [r5, #0]
   b7f6a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7f6c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b7f6e:	e7ed      	b.n	b7f4c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7f70:	f1b9 0f00 	cmp.w	r9, #0
   b7f74:	d0ea      	beq.n	b7f4c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b7f76:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7f78:	2210      	movs	r2, #16
   b7f7a:	a801      	add	r0, sp, #4
   b7f7c:	f001 ffab 	bl	b9ed6 <memset>
                    a.v = 6;
   b7f80:	2306      	movs	r3, #6
   b7f82:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7f86:	ad01      	add	r5, sp, #4
   b7f88:	f104 0308 	add.w	r3, r4, #8
   b7f8c:	3418      	adds	r4, #24
   b7f8e:	6818      	ldr	r0, [r3, #0]
   b7f90:	6859      	ldr	r1, [r3, #4]
   b7f92:	462a      	mov	r2, r5
   b7f94:	c203      	stmia	r2!, {r0, r1}
   b7f96:	3308      	adds	r3, #8
   b7f98:	42a3      	cmp	r3, r4
   b7f9a:	4615      	mov	r5, r2
   b7f9c:	d1f7      	bne.n	b7f8e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7f9e:	a901      	add	r1, sp, #4
   b7fa0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b7fa2:	ad07      	add	r5, sp, #28
   b7fa4:	f7ff ff18 	bl	b7dd8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7faa:	1d3c      	adds	r4, r7, #4
   b7fac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7fae:	682b      	ldr	r3, [r5, #0]
   b7fb0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7fb2:	4649      	mov	r1, r9
   b7fb4:	e7ca      	b.n	b7f4c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b7fb6:	9800      	ldr	r0, [sp, #0]
   b7fb8:	f7fe fac6 	bl	b6548 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7fbc:	4638      	mov	r0, r7
   b7fbe:	b015      	add	sp, #84	; 0x54
   b7fc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7fc4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b7fc4:	4b02      	ldr	r3, [pc, #8]	; (b7fd0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b7fc6:	4a03      	ldr	r2, [pc, #12]	; (b7fd4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7fc8:	601a      	str	r2, [r3, #0]
   b7fca:	2200      	movs	r2, #0
   b7fcc:	605a      	str	r2, [r3, #4]

} // spark
   b7fce:	4770      	bx	lr
   b7fd0:	2003e6d4 	.word	0x2003e6d4
   b7fd4:	000bc52c 	.word	0x000bc52c

000b7fd8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7fda:	4606      	mov	r6, r0
   b7fdc:	460d      	mov	r5, r1
  size_t n = 0;
   b7fde:	188f      	adds	r7, r1, r2
   b7fe0:	2400      	movs	r4, #0
  while (size--) {
   b7fe2:	42bd      	cmp	r5, r7
   b7fe4:	d00c      	beq.n	b8000 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b7fe6:	6833      	ldr	r3, [r6, #0]
   b7fe8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7fec:	689b      	ldr	r3, [r3, #8]
   b7fee:	4630      	mov	r0, r6
   b7ff0:	4798      	blx	r3
     if (chunk>=0)
   b7ff2:	1e03      	subs	r3, r0, #0
   b7ff4:	db01      	blt.n	b7ffa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b7ff6:	441c      	add	r4, r3
  while (size--) {
   b7ff8:	e7f3      	b.n	b7fe2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b7ffa:	2c00      	cmp	r4, #0
   b7ffc:	bf08      	it	eq
   b7ffe:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b8000:	4620      	mov	r0, r4
   b8002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8004 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b8004:	b513      	push	{r0, r1, r4, lr}
   b8006:	4604      	mov	r4, r0
    }
   b8008:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b800a:	b159      	cbz	r1, b8024 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b800c:	9101      	str	r1, [sp, #4]
   b800e:	f001 ffab 	bl	b9f68 <strlen>
   b8012:	6823      	ldr	r3, [r4, #0]
   b8014:	9901      	ldr	r1, [sp, #4]
   b8016:	68db      	ldr	r3, [r3, #12]
   b8018:	4602      	mov	r2, r0
   b801a:	4620      	mov	r0, r4
    }
   b801c:	b002      	add	sp, #8
   b801e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b8022:	4718      	bx	r3
    }
   b8024:	b002      	add	sp, #8
   b8026:	bd10      	pop	{r4, pc}

000b8028 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b8028:	b508      	push	{r3, lr}
  return write(str);
   b802a:	f7ff ffeb 	bl	b8004 <_ZN5Print5writeEPKc>
}
   b802e:	bd08      	pop	{r3, pc}

000b8030 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b8030:	6803      	ldr	r3, [r0, #0]
   b8032:	689b      	ldr	r3, [r3, #8]
   b8034:	4718      	bx	r3

000b8036 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b8036:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b8038:	210d      	movs	r1, #13
{
   b803a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b803c:	f7ff fff8 	bl	b8030 <_ZN5Print5printEc>
  n += print('\n');
   b8040:	210a      	movs	r1, #10
  size_t n = print('\r');
   b8042:	4604      	mov	r4, r0
  n += print('\n');
   b8044:	4628      	mov	r0, r5
   b8046:	f7ff fff3 	bl	b8030 <_ZN5Print5printEc>
  return n;
}
   b804a:	4420      	add	r0, r4
   b804c:	bd38      	pop	{r3, r4, r5, pc}

000b804e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b804e:	b538      	push	{r3, r4, r5, lr}
   b8050:	4605      	mov	r5, r0
  return write(str);
   b8052:	f7ff ffd7 	bl	b8004 <_ZN5Print5writeEPKc>
   b8056:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b8058:	4628      	mov	r0, r5
   b805a:	f7ff ffec 	bl	b8036 <_ZN5Print7printlnEv>
  return n;
}
   b805e:	4420      	add	r0, r4
   b8060:	bd38      	pop	{r3, r4, r5, pc}

000b8062 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b8062:	b530      	push	{r4, r5, lr}
   b8064:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b8066:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b8068:	2a01      	cmp	r2, #1
  *str = '\0';
   b806a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b806e:	bf98      	it	ls
   b8070:	220a      	movls	r2, #10
   b8072:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b8074:	460d      	mov	r5, r1
   b8076:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b807a:	fb01 5312 	mls	r3, r1, r2, r5
   b807e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8082:	2b09      	cmp	r3, #9
   b8084:	bf94      	ite	ls
   b8086:	3330      	addls	r3, #48	; 0x30
   b8088:	3337      	addhi	r3, #55	; 0x37
   b808a:	b2db      	uxtb	r3, r3
  } while(n);
   b808c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b808e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b8092:	d9ef      	bls.n	b8074 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b8094:	4621      	mov	r1, r4
   b8096:	f7ff ffb5 	bl	b8004 <_ZN5Print5writeEPKc>
}
   b809a:	b00b      	add	sp, #44	; 0x2c
   b809c:	bd30      	pop	{r4, r5, pc}
	...

000b80a0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b80a0:	4b01      	ldr	r3, [pc, #4]	; (b80a8 <_GLOBAL__sub_I_RGB+0x8>)
   b80a2:	2200      	movs	r2, #0
   b80a4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b80a6:	4770      	bx	lr
   b80a8:	2003e6dc 	.word	0x2003e6dc

000b80ac <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b80ac:	b510      	push	{r4, lr}
   b80ae:	4604      	mov	r4, r0
{
	free(buffer);
   b80b0:	6800      	ldr	r0, [r0, #0]
   b80b2:	f7fe fb9d 	bl	b67f0 <free>
}
   b80b6:	4620      	mov	r0, r4
   b80b8:	bd10      	pop	{r4, pc}

000b80ba <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b80ba:	b510      	push	{r4, lr}
   b80bc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b80be:	6800      	ldr	r0, [r0, #0]
   b80c0:	b108      	cbz	r0, b80c6 <_ZN6String10invalidateEv+0xc>
   b80c2:	f7fe fb95 	bl	b67f0 <free>
	buffer = NULL;
   b80c6:	2300      	movs	r3, #0
	capacity = len = 0;
   b80c8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b80cc:	6023      	str	r3, [r4, #0]
}
   b80ce:	bd10      	pop	{r4, pc}

000b80d0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b80d0:	b538      	push	{r3, r4, r5, lr}
   b80d2:	4604      	mov	r4, r0
   b80d4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b80d6:	6800      	ldr	r0, [r0, #0]
   b80d8:	3101      	adds	r1, #1
   b80da:	f7fe fb91 	bl	b6800 <realloc>
	if (newbuffer) {
   b80de:	b110      	cbz	r0, b80e6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b80e0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b80e4:	2001      	movs	r0, #1
	}
	return 0;
}
   b80e6:	bd38      	pop	{r3, r4, r5, pc}

000b80e8 <_ZN6String7reserveEj>:
{
   b80e8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b80ea:	6803      	ldr	r3, [r0, #0]
{
   b80ec:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b80ee:	b123      	cbz	r3, b80fa <_ZN6String7reserveEj+0x12>
   b80f0:	6843      	ldr	r3, [r0, #4]
   b80f2:	428b      	cmp	r3, r1
   b80f4:	d301      	bcc.n	b80fa <_ZN6String7reserveEj+0x12>
   b80f6:	2001      	movs	r0, #1
}
   b80f8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b80fa:	4620      	mov	r0, r4
   b80fc:	f7ff ffe8 	bl	b80d0 <_ZN6String12changeBufferEj>
   b8100:	2800      	cmp	r0, #0
   b8102:	d0f9      	beq.n	b80f8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b8104:	68a3      	ldr	r3, [r4, #8]
   b8106:	2b00      	cmp	r3, #0
   b8108:	d1f5      	bne.n	b80f6 <_ZN6String7reserveEj+0xe>
   b810a:	6822      	ldr	r2, [r4, #0]
   b810c:	7013      	strb	r3, [r2, #0]
   b810e:	e7f2      	b.n	b80f6 <_ZN6String7reserveEj+0xe>

000b8110 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8110:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8112:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b8114:	4611      	mov	r1, r2
   b8116:	9201      	str	r2, [sp, #4]
{
   b8118:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b811a:	f7ff ffe5 	bl	b80e8 <_ZN6String7reserveEj>
   b811e:	9a01      	ldr	r2, [sp, #4]
   b8120:	b928      	cbnz	r0, b812e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b8122:	4620      	mov	r0, r4
   b8124:	f7ff ffc9 	bl	b80ba <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b8128:	4620      	mov	r0, r4
   b812a:	b003      	add	sp, #12
   b812c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b812e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b8130:	4629      	mov	r1, r5
   b8132:	6820      	ldr	r0, [r4, #0]
   b8134:	f001 fea7 	bl	b9e86 <memcpy>
	buffer[len] = 0;
   b8138:	6822      	ldr	r2, [r4, #0]
   b813a:	68a3      	ldr	r3, [r4, #8]
   b813c:	2100      	movs	r1, #0
   b813e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b8140:	e7f2      	b.n	b8128 <_ZN6String4copyEPKcj+0x18>

000b8142 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b8142:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b8144:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b8146:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b814a:	4604      	mov	r4, r0
	len = 0;
   b814c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b814e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b8150:	b141      	cbz	r1, b8164 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b8152:	4608      	mov	r0, r1
   b8154:	9101      	str	r1, [sp, #4]
   b8156:	f001 ff07 	bl	b9f68 <strlen>
   b815a:	9901      	ldr	r1, [sp, #4]
   b815c:	4602      	mov	r2, r0
   b815e:	4620      	mov	r0, r4
   b8160:	f7ff ffd6 	bl	b8110 <_ZN6String4copyEPKcj>
}
   b8164:	4620      	mov	r0, r4
   b8166:	b002      	add	sp, #8
   b8168:	bd10      	pop	{r4, pc}

000b816a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b816a:	4288      	cmp	r0, r1
{
   b816c:	b510      	push	{r4, lr}
   b816e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b8170:	d005      	beq.n	b817e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b8172:	680b      	ldr	r3, [r1, #0]
   b8174:	b12b      	cbz	r3, b8182 <_ZN6StringaSERKS_+0x18>
   b8176:	688a      	ldr	r2, [r1, #8]
   b8178:	4619      	mov	r1, r3
   b817a:	f7ff ffc9 	bl	b8110 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b817e:	4620      	mov	r0, r4
   b8180:	bd10      	pop	{r4, pc}
	else invalidate();
   b8182:	f7ff ff9a 	bl	b80ba <_ZN6String10invalidateEv>
   b8186:	e7fa      	b.n	b817e <_ZN6StringaSERKS_+0x14>

000b8188 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b8188:	b510      	push	{r4, lr}
	buffer = NULL;
   b818a:	2300      	movs	r3, #0
String::String(const String &value)
   b818c:	4604      	mov	r4, r0
	capacity = 0;
   b818e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b8192:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8194:	7303      	strb	r3, [r0, #12]
	*this = value;
   b8196:	f7ff ffe8 	bl	b816a <_ZN6StringaSERKS_>
}
   b819a:	4620      	mov	r0, r4
   b819c:	bd10      	pop	{r4, pc}

000b819e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b819e:	b513      	push	{r0, r1, r4, lr}
   b81a0:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b81a2:	b159      	cbz	r1, b81bc <_ZN6StringaSEPKc+0x1e>
   b81a4:	4608      	mov	r0, r1
   b81a6:	9101      	str	r1, [sp, #4]
   b81a8:	f001 fede 	bl	b9f68 <strlen>
   b81ac:	9901      	ldr	r1, [sp, #4]
   b81ae:	4602      	mov	r2, r0
   b81b0:	4620      	mov	r0, r4
   b81b2:	f7ff ffad 	bl	b8110 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b81b6:	4620      	mov	r0, r4
   b81b8:	b002      	add	sp, #8
   b81ba:	bd10      	pop	{r4, pc}
	else invalidate();
   b81bc:	f7ff ff7d 	bl	b80ba <_ZN6String10invalidateEv>
   b81c0:	e7f9      	b.n	b81b6 <_ZN6StringaSEPKc+0x18>

000b81c2 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b81c2:	b510      	push	{r4, lr}
   b81c4:	4604      	mov	r4, r0
   b81c6:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b81c8:	2300      	movs	r3, #0
	capacity = 0;
   b81ca:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b81ce:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b81d0:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b81d2:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b81d4:	a901      	add	r1, sp, #4
   b81d6:	f000 fd09 	bl	b8bec <itoa>
	*this = buf;
   b81da:	a901      	add	r1, sp, #4
   b81dc:	4620      	mov	r0, r4
   b81de:	f7ff ffde 	bl	b819e <_ZN6StringaSEPKc>
}
   b81e2:	4620      	mov	r0, r4
   b81e4:	b00a      	add	sp, #40	; 0x28
   b81e6:	bd10      	pop	{r4, pc}

000b81e8 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b81e8:	b570      	push	{r4, r5, r6, lr}
   b81ea:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b81ec:	460e      	mov	r6, r1
   b81ee:	b909      	cbnz	r1, b81f4 <_ZN6String6concatEPKcj+0xc>
   b81f0:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b81f2:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b81f4:	b16a      	cbz	r2, b8212 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b81f6:	6884      	ldr	r4, [r0, #8]
   b81f8:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b81fa:	4621      	mov	r1, r4
   b81fc:	f7ff ff74 	bl	b80e8 <_ZN6String7reserveEj>
   b8200:	2800      	cmp	r0, #0
   b8202:	d0f5      	beq.n	b81f0 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b8204:	6828      	ldr	r0, [r5, #0]
   b8206:	68ab      	ldr	r3, [r5, #8]
   b8208:	4631      	mov	r1, r6
   b820a:	4418      	add	r0, r3
   b820c:	f001 fea4 	bl	b9f58 <strcpy>
	len = newlen;
   b8210:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b8212:	2001      	movs	r0, #1
   b8214:	e7ed      	b.n	b81f2 <_ZN6String6concatEPKcj+0xa>

000b8216 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b8216:	688a      	ldr	r2, [r1, #8]
   b8218:	6809      	ldr	r1, [r1, #0]
   b821a:	f7ff bfe5 	b.w	b81e8 <_ZN6String6concatEPKcj>

000b821e <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b821e:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b8220:	2300      	movs	r3, #0
	buf[0] = c;
   b8222:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b8226:	2201      	movs	r2, #1
   b8228:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b822a:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b822e:	f7ff ffdb 	bl	b81e8 <_ZN6String6concatEPKcj>
}
   b8232:	b003      	add	sp, #12
   b8234:	f85d fb04 	ldr.w	pc, [sp], #4

000b8238 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b8238:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b823a:	688a      	ldr	r2, [r1, #8]
   b823c:	6809      	ldr	r1, [r1, #0]
{
   b823e:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b8240:	f7ff ffd2 	bl	b81e8 <_ZN6String6concatEPKcj>
   b8244:	b910      	cbnz	r0, b824c <_ZplRK15StringSumHelperRK6String+0x14>
   b8246:	4620      	mov	r0, r4
   b8248:	f7ff ff37 	bl	b80ba <_ZN6String10invalidateEv>
	return a;
}
   b824c:	4620      	mov	r0, r4
   b824e:	bd10      	pop	{r4, pc}

000b8250 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b8250:	b513      	push	{r0, r1, r4, lr}
   b8252:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b8254:	b929      	cbnz	r1, b8262 <_ZplRK15StringSumHelperPKc+0x12>
   b8256:	4620      	mov	r0, r4
   b8258:	f7ff ff2f 	bl	b80ba <_ZN6String10invalidateEv>
	return a;
}
   b825c:	4620      	mov	r0, r4
   b825e:	b002      	add	sp, #8
   b8260:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b8262:	4608      	mov	r0, r1
   b8264:	9101      	str	r1, [sp, #4]
   b8266:	f001 fe7f 	bl	b9f68 <strlen>
   b826a:	9901      	ldr	r1, [sp, #4]
   b826c:	4602      	mov	r2, r0
   b826e:	4620      	mov	r0, r4
   b8270:	f7ff ffba 	bl	b81e8 <_ZN6String6concatEPKcj>
   b8274:	2800      	cmp	r0, #0
   b8276:	d0ee      	beq.n	b8256 <_ZplRK15StringSumHelperPKc+0x6>
   b8278:	e7f0      	b.n	b825c <_ZplRK15StringSumHelperPKc+0xc>

000b827a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b827a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b827c:	6882      	ldr	r2, [r0, #8]
   b827e:	b93a      	cbnz	r2, b8290 <_ZNK6String6equalsEPKc+0x16>
   b8280:	b121      	cbz	r1, b828c <_ZNK6String6equalsEPKc+0x12>
   b8282:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b8284:	fab0 f080 	clz	r0, r0
   b8288:	0940      	lsrs	r0, r0, #5
   b828a:	e000      	b.n	b828e <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b828c:	2001      	movs	r0, #1
}
   b828e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b8290:	6800      	ldr	r0, [r0, #0]
   b8292:	b909      	cbnz	r1, b8298 <_ZNK6String6equalsEPKc+0x1e>
   b8294:	7800      	ldrb	r0, [r0, #0]
   b8296:	e7f5      	b.n	b8284 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b8298:	f001 fe54 	bl	b9f44 <strcmp>
   b829c:	e7f2      	b.n	b8284 <_ZNK6String6equalsEPKc+0xa>

000b829e <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   b829e:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   b82a0:	6883      	ldr	r3, [r0, #8]
   b82a2:	4293      	cmp	r3, r2
   b82a4:	d907      	bls.n	b82b6 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   b82a6:	6804      	ldr	r4, [r0, #0]
   b82a8:	6809      	ldr	r1, [r1, #0]
   b82aa:	18a0      	adds	r0, r4, r2
   b82ac:	f001 fe84 	bl	b9fb8 <strstr>
	if (found == NULL) return -1;
   b82b0:	b108      	cbz	r0, b82b6 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   b82b2:	1b00      	subs	r0, r0, r4
}
   b82b4:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   b82b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b82ba:	e7fb      	b.n	b82b4 <_ZNK6String7indexOfERKS_j+0x16>

000b82bc <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   b82bc:	2200      	movs	r2, #0
   b82be:	f7ff bfee 	b.w	b829e <_ZNK6String7indexOfERKS_j>
	...

000b82c4 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b82c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b82c6:	429a      	cmp	r2, r3
{
   b82c8:	460f      	mov	r7, r1
   b82ca:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b82cc:	490c      	ldr	r1, [pc, #48]	; (b8300 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b82ce:	bf88      	it	hi
   b82d0:	4613      	movhi	r3, r2
{
   b82d2:	4614      	mov	r4, r2
   b82d4:	4606      	mov	r6, r0
	if (left > right) {
   b82d6:	bf84      	itt	hi
   b82d8:	462c      	movhi	r4, r5
   b82da:	461d      	movhi	r5, r3
	String out;
   b82dc:	f7ff ff31 	bl	b8142 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b82e0:	68bb      	ldr	r3, [r7, #8]
   b82e2:	42a3      	cmp	r3, r4
   b82e4:	d30a      	bcc.n	b82fc <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b82e6:	6839      	ldr	r1, [r7, #0]
   b82e8:	42ab      	cmp	r3, r5
   b82ea:	bf94      	ite	ls
   b82ec:	ebc4 0203 	rsbls	r2, r4, r3
   b82f0:	ebc4 0205 	rsbhi	r2, r4, r5
   b82f4:	4421      	add	r1, r4
   b82f6:	4630      	mov	r0, r6
   b82f8:	f7ff ff0a 	bl	b8110 <_ZN6String4copyEPKcj>
	return out;
}
   b82fc:	4630      	mov	r0, r6
   b82fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b8300:	000bc292 	.word	0x000bc292

000b8304 <_ZNK6String9substringEj>:
{
   b8304:	b510      	push	{r4, lr}
   b8306:	4604      	mov	r4, r0
	return substring(left, len);
   b8308:	688b      	ldr	r3, [r1, #8]
   b830a:	f7ff ffdb 	bl	b82c4 <_ZNK6String9substringEjj>
}
   b830e:	4620      	mov	r0, r4
   b8310:	bd10      	pop	{r4, pc}

000b8312 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   b8312:	6800      	ldr	r0, [r0, #0]
   b8314:	b108      	cbz	r0, b831a <_ZNK6String5toIntEv+0x8>
   b8316:	f001 bda2 	b.w	b9e5e <atol>
	return 0;
}
   b831a:	4770      	bx	lr

000b831c <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
   b831c:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   b831e:	6800      	ldr	r0, [r0, #0]
   b8320:	b140      	cbz	r0, b8334 <_ZNK6String7toFloatEv+0x18>
   b8322:	f001 fd95 	bl	b9e50 <atof>
   b8326:	ec51 0b10 	vmov	r0, r1, d0
   b832a:	f001 fd1d 	bl	b9d68 <__aeabi_d2f>
   b832e:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   b8332:	bd08      	pop	{r3, pc}
	return 0;
   b8334:	ed9f 0a01 	vldr	s0, [pc, #4]	; b833c <_ZNK6String7toFloatEv+0x20>
   b8338:	e7fb      	b.n	b8332 <_ZNK6String7toFloatEv+0x16>
   b833a:	bf00      	nop
   b833c:	00000000 	.word	0x00000000

000b8340 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8340:	4b05      	ldr	r3, [pc, #20]	; (b8358 <_GLOBAL__sub_I_System+0x18>)
   b8342:	2202      	movs	r2, #2
   b8344:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b8346:	4b05      	ldr	r3, [pc, #20]	; (b835c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b8348:	4a05      	ldr	r2, [pc, #20]	; (b8360 <_GLOBAL__sub_I_System+0x20>)
   b834a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b834c:	2000      	movs	r0, #0
   b834e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b8352:	f7fe b9b9 	b.w	b66c8 <set_system_mode>
   b8356:	bf00      	nop
   b8358:	2003e6f8 	.word	0x2003e6f8
   b835c:	2003e6ec 	.word	0x2003e6ec
   b8360:	ffff0000 	.word	0xffff0000

000b8364 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b8364:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8366:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b8368:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b836c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b836e:	2201      	movs	r2, #1
   b8370:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8374:	f10d 0107 	add.w	r1, sp, #7
   b8378:	47a0      	blx	r4
}
   b837a:	b002      	add	sp, #8
   b837c:	bd10      	pop	{r4, pc}

000b837e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b837e:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b8380:	6803      	ldr	r3, [r0, #0]
   b8382:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8388:	46a4      	mov	ip, r4
}
   b838a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b838e:	4760      	bx	ip

000b8390 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8390:	b513      	push	{r0, r1, r4, lr}
   b8392:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b8394:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8396:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b839a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b839c:	f10d 0107 	add.w	r1, sp, #7
   b83a0:	2201      	movs	r2, #1
   b83a2:	47a0      	blx	r4
}
   b83a4:	b002      	add	sp, #8
   b83a6:	bd10      	pop	{r4, pc}

000b83a8 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b83a8:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b83aa:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b83ac:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b83b0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b83b4:	429a      	cmp	r2, r3
int TCPClient::read() {
   b83b6:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b83b8:	d008      	beq.n	b83cc <_ZN9TCPClient4readEv+0x24>
   b83ba:	6963      	ldr	r3, [r4, #20]
   b83bc:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b83c0:	1c51      	adds	r1, r2, #1
   b83c2:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b83c6:	4413      	add	r3, r2
   b83c8:	7918      	ldrb	r0, [r3, #4]
}
   b83ca:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b83cc:	6803      	ldr	r3, [r0, #0]
   b83ce:	691b      	ldr	r3, [r3, #16]
   b83d0:	4798      	blx	r3
   b83d2:	2800      	cmp	r0, #0
   b83d4:	d1f1      	bne.n	b83ba <_ZN9TCPClient4readEv+0x12>
   b83d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b83da:	e7f6      	b.n	b83ca <_ZN9TCPClient4readEv+0x22>

000b83dc <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b83dc:	4770      	bx	lr

000b83de <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b83de:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b83e0:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b83e2:	43c0      	mvns	r0, r0
   b83e4:	0fc0      	lsrs	r0, r0, #31
   b83e6:	4770      	bx	lr

000b83e8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b83e8:	4770      	bx	lr
	...

000b83ec <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b83ec:	4b06      	ldr	r3, [pc, #24]	; (b8408 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b83ee:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b83f0:	b510      	push	{r4, lr}
   b83f2:	f100 040c 	add.w	r4, r0, #12
	    ||
   b83f6:	d005      	beq.n	b8404 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b83f8:	4608      	mov	r0, r1
   b83fa:	f000 fd39 	bl	b8e70 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b83fe:	2800      	cmp	r0, #0
   b8400:	bf08      	it	eq
   b8402:	2400      	moveq	r4, #0
      }
   b8404:	4620      	mov	r0, r4
   b8406:	bd10      	pop	{r4, pc}
   b8408:	000bc468 	.word	0x000bc468

000b840c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b840c:	b510      	push	{r4, lr}
   b840e:	21ac      	movs	r1, #172	; 0xac
   b8410:	4604      	mov	r4, r0
   b8412:	f7fb fe44 	bl	b409e <_ZdlPvj>
   b8416:	4620      	mov	r0, r4
   b8418:	bd10      	pop	{r4, pc}

000b841a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b841a:	21ac      	movs	r1, #172	; 0xac
   b841c:	f7fb be3f 	b.w	b409e <_ZdlPvj>

000b8420 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b8420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b8424:	f04f 0800 	mov.w	r8, #0
   b8428:	b086      	sub	sp, #24
   b842a:	461c      	mov	r4, r3
   b842c:	f8c0 8004 	str.w	r8, [r0, #4]
   b8430:	4605      	mov	r5, r0
   b8432:	460e      	mov	r6, r1
   b8434:	4617      	mov	r7, r2
    struct timeval tv = {};
   b8436:	4641      	mov	r1, r8
   b8438:	2210      	movs	r2, #16
   b843a:	a802      	add	r0, sp, #8
   b843c:	f001 fd4b 	bl	b9ed6 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b8440:	1c63      	adds	r3, r4, #1
   b8442:	d009      	beq.n	b8458 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b8444:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8448:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b844c:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b8450:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b8454:	435c      	muls	r4, r3
   b8456:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b8458:	6968      	ldr	r0, [r5, #20]
   b845a:	2310      	movs	r3, #16
   b845c:	9300      	str	r3, [sp, #0]
   b845e:	6800      	ldr	r0, [r0, #0]
   b8460:	ab02      	add	r3, sp, #8
   b8462:	f241 0205 	movw	r2, #4101	; 0x1005
   b8466:	f640 71ff 	movw	r1, #4095	; 0xfff
   b846a:	f7fe f87d 	bl	b6568 <sock_setsockopt>
    if (ret < 0) {
   b846e:	2800      	cmp	r0, #0
   b8470:	da07      	bge.n	b8482 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b8472:	f7fe f9e5 	bl	b6840 <__errno>
   b8476:	6803      	ldr	r3, [r0, #0]
   b8478:	606b      	str	r3, [r5, #4]
        return 0;
   b847a:	2000      	movs	r0, #0
}
   b847c:	b006      	add	sp, #24
   b847e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b8482:	6968      	ldr	r0, [r5, #20]
   b8484:	2300      	movs	r3, #0
   b8486:	6800      	ldr	r0, [r0, #0]
   b8488:	463a      	mov	r2, r7
   b848a:	4631      	mov	r1, r6
   b848c:	f7fe f88c 	bl	b65a8 <sock_send>
    if (ret < 0) {
   b8490:	1e03      	subs	r3, r0, #0
   b8492:	dbee      	blt.n	b8472 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b8494:	4618      	mov	r0, r3
   b8496:	e7f1      	b.n	b847c <_ZN9TCPClient5writeEPKhjm+0x5c>

000b8498 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b8498:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b849a:	6984      	ldr	r4, [r0, #24]
   b849c:	4b0a      	ldr	r3, [pc, #40]	; (b84c8 <_ZN9TCPClientD1Ev+0x30>)
   b849e:	6003      	str	r3, [r0, #0]
   b84a0:	4605      	mov	r5, r0
   b84a2:	b17c      	cbz	r4, b84c4 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b84a4:	6863      	ldr	r3, [r4, #4]
   b84a6:	3b01      	subs	r3, #1
   b84a8:	6063      	str	r3, [r4, #4]
   b84aa:	b95b      	cbnz	r3, b84c4 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b84ac:	6823      	ldr	r3, [r4, #0]
   b84ae:	4620      	mov	r0, r4
   b84b0:	689b      	ldr	r3, [r3, #8]
   b84b2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b84b4:	68a3      	ldr	r3, [r4, #8]
   b84b6:	3b01      	subs	r3, #1
   b84b8:	60a3      	str	r3, [r4, #8]
   b84ba:	b91b      	cbnz	r3, b84c4 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b84bc:	6823      	ldr	r3, [r4, #0]
   b84be:	4620      	mov	r0, r4
   b84c0:	68db      	ldr	r3, [r3, #12]
   b84c2:	4798      	blx	r3
   b84c4:	4628      	mov	r0, r5
   b84c6:	bd38      	pop	{r3, r4, r5, pc}
   b84c8:	000bc59c 	.word	0x000bc59c

000b84cc <_ZN9TCPClientD0Ev>:
   b84cc:	b510      	push	{r4, lr}
   b84ce:	4604      	mov	r4, r0
   b84d0:	f7ff ffe2 	bl	b8498 <_ZN9TCPClientD1Ev>
   b84d4:	4620      	mov	r0, r4
   b84d6:	211c      	movs	r1, #28
   b84d8:	f7fb fde1 	bl	b409e <_ZdlPvj>
   b84dc:	4620      	mov	r0, r4
   b84de:	bd10      	pop	{r4, pc}

000b84e0 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b84e0:	b530      	push	{r4, r5, lr}
   b84e2:	b087      	sub	sp, #28
   b84e4:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b84e6:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b84e8:	4668      	mov	r0, sp
   b84ea:	f7ff fcab 	bl	b7e44 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b84ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b84f0:	3404      	adds	r4, #4
   b84f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b84f4:	682b      	ldr	r3, [r5, #0]
   b84f6:	7023      	strb	r3, [r4, #0]
    }
   b84f8:	b007      	add	sp, #28
   b84fa:	bd30      	pop	{r4, r5, pc}

000b84fc <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b84fc:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b84fe:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b8500:	4b05      	ldr	r3, [pc, #20]	; (b8518 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b8502:	4604      	mov	r4, r0
   b8504:	358c      	adds	r5, #140	; 0x8c
   b8506:	f844 3b04 	str.w	r3, [r4], #4
   b850a:	4606      	mov	r6, r0
   b850c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b850e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8510:	682b      	ldr	r3, [r5, #0]
   b8512:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b8514:	4630      	mov	r0, r6
   b8516:	bd70      	pop	{r4, r5, r6, pc}
   b8518:	000bc514 	.word	0x000bc514

000b851c <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b851c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8520:	4698      	mov	r8, r3
    stop();
   b8522:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8524:	b093      	sub	sp, #76	; 0x4c
   b8526:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b8528:	2400      	movs	r4, #0
    stop();
   b852a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b852c:	4606      	mov	r6, r0
   b852e:	4617      	mov	r7, r2
    stop();
   b8530:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8532:	4628      	mov	r0, r5
   b8534:	466b      	mov	r3, sp
   b8536:	4622      	mov	r2, r4
   b8538:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b853a:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b853c:	f7fe f80c 	bl	b6558 <netdb_getaddrinfo>
   b8540:	4605      	mov	r5, r0
   b8542:	2800      	cmp	r0, #0
   b8544:	d163      	bne.n	b860e <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b8546:	9b00      	ldr	r3, [sp, #0]
   b8548:	2b00      	cmp	r3, #0
   b854a:	d04b      	beq.n	b85e4 <_ZN9TCPClient7connectEPKctm+0xc8>
   b854c:	695b      	ldr	r3, [r3, #20]
   b854e:	2b00      	cmp	r3, #0
   b8550:	d048      	beq.n	b85e4 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b8552:	a806      	add	r0, sp, #24
   b8554:	f7ff fc32 	bl	b7dbc <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b8558:	9b00      	ldr	r3, [sp, #0]
   b855a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b855c:	7863      	ldrb	r3, [r4, #1]
   b855e:	2b02      	cmp	r3, #2
   b8560:	d104      	bne.n	b856c <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b8562:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b8564:	a806      	add	r0, sp, #24
   b8566:	f7ff ffbb 	bl	b84e0 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b856a:	e026      	b.n	b85ba <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b856c:	2b0a      	cmp	r3, #10
   b856e:	d124      	bne.n	b85ba <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b8570:	2211      	movs	r2, #17
   b8572:	4629      	mov	r1, r5
   b8574:	a801      	add	r0, sp, #4
   b8576:	f001 fcae 	bl	b9ed6 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b857a:	68a3      	ldr	r3, [r4, #8]
   b857c:	2b00      	cmp	r3, #0
   b857e:	d038      	beq.n	b85f2 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8580:	f104 0308 	add.w	r3, r4, #8
   b8584:	f10d 0c04 	add.w	ip, sp, #4
   b8588:	3418      	adds	r4, #24
   b858a:	6818      	ldr	r0, [r3, #0]
   b858c:	6859      	ldr	r1, [r3, #4]
   b858e:	4662      	mov	r2, ip
   b8590:	c203      	stmia	r2!, {r0, r1}
   b8592:	3308      	adds	r3, #8
   b8594:	42a3      	cmp	r3, r4
   b8596:	4694      	mov	ip, r2
   b8598:	d1f7      	bne.n	b858a <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b859a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b859c:	a901      	add	r1, sp, #4
   b859e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b85a0:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b85a4:	f7ff fc18 	bl	b7dd8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b85a8:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b85ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b85b0:	ac07      	add	r4, sp, #28
   b85b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b85b4:	f8dc 3000 	ldr.w	r3, [ip]
   b85b8:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b85ba:	a806      	add	r0, sp, #24
   b85bc:	f7ff fc1e 	bl	b7dfc <_ZNK9IPAddresscvbEv>
        if (addr) {
   b85c0:	b180      	cbz	r0, b85e4 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b85c2:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b85c4:	ad07      	add	r5, sp, #28
   b85c6:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b85ca:	4b12      	ldr	r3, [pc, #72]	; (b8614 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b85cc:	930c      	str	r3, [sp, #48]	; 0x30
   b85ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b85d0:	ac0d      	add	r4, sp, #52	; 0x34
   b85d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b85d4:	682b      	ldr	r3, [r5, #0]
   b85d6:	7023      	strb	r3, [r4, #0]
   b85d8:	463a      	mov	r2, r7
   b85da:	4643      	mov	r3, r8
   b85dc:	a90c      	add	r1, sp, #48	; 0x30
   b85de:	4630      	mov	r0, r6
   b85e0:	47c8      	blx	r9
   b85e2:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b85e4:	9800      	ldr	r0, [sp, #0]
   b85e6:	f7fd ffaf 	bl	b6548 <netdb_freeaddrinfo>
}
   b85ea:	4628      	mov	r0, r5
   b85ec:	b013      	add	sp, #76	; 0x4c
   b85ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b85f2:	68e3      	ldr	r3, [r4, #12]
   b85f4:	2b00      	cmp	r3, #0
   b85f6:	d1c3      	bne.n	b8580 <_ZN9TCPClient7connectEPKctm+0x64>
   b85f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b85fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b8600:	f7fd ff92 	bl	b6528 <inet_htonl>
   b8604:	4581      	cmp	r9, r0
   b8606:	d1bb      	bne.n	b8580 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b8608:	f104 0114 	add.w	r1, r4, #20
   b860c:	e7aa      	b.n	b8564 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b860e:	4625      	mov	r5, r4
   b8610:	e7e8      	b.n	b85e4 <_ZN9TCPClient7connectEPKctm+0xc8>
   b8612:	bf00      	nop
   b8614:	000bc514 	.word	0x000bc514

000b8618 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b8618:	b538      	push	{r3, r4, r5, lr}
   b861a:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b861c:	681a      	ldr	r2, [r3, #0]
   b861e:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b8620:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b8622:	da10      	bge.n	b8646 <_ZN9TCPClient9connectedEv+0x2e>
   b8624:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8628:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b862c:	429a      	cmp	r2, r3
   b862e:	d10a      	bne.n	b8646 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b8630:	6803      	ldr	r3, [r0, #0]
   b8632:	691b      	ldr	r3, [r3, #16]
   b8634:	4798      	blx	r3
        if (!rv) {
   b8636:	4604      	mov	r4, r0
   b8638:	b928      	cbnz	r0, b8646 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b863a:	682b      	ldr	r3, [r5, #0]
   b863c:	4628      	mov	r0, r5
   b863e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8640:	4798      	blx	r3
        rv = available();
   b8642:	4620      	mov	r0, r4
}
   b8644:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b8646:	2001      	movs	r0, #1
   b8648:	e7fc      	b.n	b8644 <_ZN9TCPClient9connectedEv+0x2c>

000b864a <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b864a:	b510      	push	{r4, lr}
   b864c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b864e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8652:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8656:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b8658:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b865a:	d005      	beq.n	b8668 <_ZN9TCPClient4peekEv+0x1e>
   b865c:	6963      	ldr	r3, [r4, #20]
   b865e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b8662:	4413      	add	r3, r2
   b8664:	7918      	ldrb	r0, [r3, #4]
}
   b8666:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8668:	6803      	ldr	r3, [r0, #0]
   b866a:	691b      	ldr	r3, [r3, #16]
   b866c:	4798      	blx	r3
   b866e:	2800      	cmp	r0, #0
   b8670:	d1f4      	bne.n	b865c <_ZN9TCPClient4peekEv+0x12>
   b8672:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8676:	e7f6      	b.n	b8666 <_ZN9TCPClient4peekEv+0x1c>

000b8678 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b8678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b867a:	6943      	ldr	r3, [r0, #20]
   b867c:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b867e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8682:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8686:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b8688:	4605      	mov	r5, r0
   b868a:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b868c:	d016      	beq.n	b86bc <_ZN9TCPClient4readEPhj+0x44>
   b868e:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b8690:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b8694:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b8698:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b869a:	42bc      	cmp	r4, r7
   b869c:	bf28      	it	cs
   b869e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b86a0:	3304      	adds	r3, #4
   b86a2:	4622      	mov	r2, r4
   b86a4:	4419      	add	r1, r3
   b86a6:	4630      	mov	r0, r6
   b86a8:	f001 fbed 	bl	b9e86 <memcpy>
   b86ac:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b86ae:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b86b2:	4423      	add	r3, r4
   b86b4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b86b8:	4620      	mov	r0, r4
   b86ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b86bc:	6803      	ldr	r3, [r0, #0]
   b86be:	691b      	ldr	r3, [r3, #16]
   b86c0:	4798      	blx	r3
   b86c2:	2800      	cmp	r0, #0
   b86c4:	d1e3      	bne.n	b868e <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b86c6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b86ca:	e7f5      	b.n	b86b8 <_ZN9TCPClient4readEPhj+0x40>

000b86cc <_ZN9TCPClient12flush_bufferEv>:
   b86cc:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b86ce:	2300      	movs	r3, #0
   b86d0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b86d4:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b86d6:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b86da:	4770      	bx	lr

000b86dc <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b86dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b86e0:	461f      	mov	r7, r3
    stop();
   b86e2:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b86e4:	460c      	mov	r4, r1
    stop();
   b86e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b86e8:	b08a      	sub	sp, #40	; 0x28
   b86ea:	4605      	mov	r5, r0
   b86ec:	4616      	mov	r6, r2
    stop();
   b86ee:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b86f0:	7d23      	ldrb	r3, [r4, #20]
   b86f2:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b86f6:	2b04      	cmp	r3, #4
   b86f8:	bf0c      	ite	eq
   b86fa:	2002      	moveq	r0, #2
   b86fc:	200a      	movne	r0, #10
   b86fe:	2206      	movs	r2, #6
   b8700:	2101      	movs	r1, #1
   b8702:	f7fd ff59 	bl	b65b8 <sock_socket>
   b8706:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b870a:	696b      	ldr	r3, [r5, #20]
   b870c:	681b      	ldr	r3, [r3, #0]
   b870e:	2b00      	cmp	r3, #0
   b8710:	da08      	bge.n	b8724 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b8712:	682b      	ldr	r3, [r5, #0]
   b8714:	4628      	mov	r0, r5
   b8716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8718:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b871a:	4798      	blx	r3
}
   b871c:	4620      	mov	r0, r4
   b871e:	b00a      	add	sp, #40	; 0x28
   b8720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b8724:	4628      	mov	r0, r5
   b8726:	f7ff ffd1 	bl	b86cc <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b872a:	b1b7      	cbz	r7, b875a <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b872c:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b872e:	a903      	add	r1, sp, #12
   b8730:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b8732:	9303      	str	r3, [sp, #12]
   b8734:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8738:	f7fd fee6 	bl	b6508 <if_index_to_name>
   b873c:	2800      	cmp	r0, #0
   b873e:	d1e8      	bne.n	b8712 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b8740:	6968      	ldr	r0, [r5, #20]
   b8742:	2306      	movs	r3, #6
   b8744:	9300      	str	r3, [sp, #0]
   b8746:	6800      	ldr	r0, [r0, #0]
   b8748:	ab03      	add	r3, sp, #12
   b874a:	f241 020b 	movw	r2, #4107	; 0x100b
   b874e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8752:	f7fd ff09 	bl	b6568 <sock_setsockopt>
   b8756:	2800      	cmp	r0, #0
   b8758:	d1db      	bne.n	b8712 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b875a:	221c      	movs	r2, #28
   b875c:	2100      	movs	r1, #0
   b875e:	a803      	add	r0, sp, #12
   b8760:	f001 fbb9 	bl	b9ed6 <memset>
    if (ip.version() == 4) {
   b8764:	7d23      	ldrb	r3, [r4, #20]
   b8766:	2b04      	cmp	r3, #4
   b8768:	d11d      	bne.n	b87a6 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b876a:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b876e:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b8770:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b8774:	f7fd fee0 	bl	b6538 <inet_htons>
   b8778:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b877c:	6860      	ldr	r0, [r4, #4]
   b877e:	f7fd fed3 	bl	b6528 <inet_htonl>
   b8782:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b8784:	696b      	ldr	r3, [r5, #20]
   b8786:	221c      	movs	r2, #28
   b8788:	6818      	ldr	r0, [r3, #0]
   b878a:	a903      	add	r1, sp, #12
   b878c:	f7fd fefc 	bl	b6588 <sock_connect>
   b8790:	2800      	cmp	r0, #0
   b8792:	d1be      	bne.n	b8712 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b8794:	3404      	adds	r4, #4
   b8796:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8798:	696d      	ldr	r5, [r5, #20]
   b879a:	358c      	adds	r5, #140	; 0x8c
   b879c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b879e:	6823      	ldr	r3, [r4, #0]
   b87a0:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b87a2:	2401      	movs	r4, #1
   b87a4:	e7ba      	b.n	b871c <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b87a6:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b87aa:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b87ac:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b87b0:	f7fd fec2 	bl	b6538 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b87b4:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b87b6:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b87ba:	1d23      	adds	r3, r4, #4
   b87bc:	f104 0714 	add.w	r7, r4, #20
   b87c0:	6818      	ldr	r0, [r3, #0]
   b87c2:	6859      	ldr	r1, [r3, #4]
   b87c4:	4632      	mov	r2, r6
   b87c6:	c203      	stmia	r2!, {r0, r1}
   b87c8:	3308      	adds	r3, #8
   b87ca:	42bb      	cmp	r3, r7
   b87cc:	4616      	mov	r6, r2
   b87ce:	d1f7      	bne.n	b87c0 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b87d0:	e7d8      	b.n	b8784 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b87d4 <_ZN9TCPClient9availableEv>:
{
   b87d4:	b530      	push	{r4, r5, lr}
   b87d6:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b87d8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b87dc:	b08b      	sub	sp, #44	; 0x2c
   b87de:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b87e0:	b12b      	cbz	r3, b87ee <_ZN9TCPClient9availableEv+0x1a>
   b87e2:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b87e6:	429a      	cmp	r2, r3
   b87e8:	d101      	bne.n	b87ee <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b87ea:	f7ff ff6f 	bl	b86cc <_ZN9TCPClient12flush_bufferEv>
   b87ee:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b87f0:	6808      	ldr	r0, [r1, #0]
   b87f2:	2800      	cmp	r0, #0
   b87f4:	db18      	blt.n	b8828 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b87f6:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b87fa:	2d7f      	cmp	r5, #127	; 0x7f
   b87fc:	d814      	bhi.n	b8828 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b87fe:	3104      	adds	r1, #4
   b8800:	2308      	movs	r3, #8
   b8802:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b8806:	4429      	add	r1, r5
   b8808:	f7fd fec6 	bl	b6598 <sock_recv>
            if (ret > 0) {
   b880c:	2800      	cmp	r0, #0
   b880e:	dd13      	ble.n	b8838 <_ZN9TCPClient9availableEv+0x64>
   b8810:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b8812:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8816:	b90a      	cbnz	r2, b881c <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b8818:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b881c:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b881e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8822:	4410      	add	r0, r2
   b8824:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b8828:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b882a:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b882e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b8832:	1ac0      	subs	r0, r0, r3
   b8834:	b00b      	add	sp, #44	; 0x2c
   b8836:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b8838:	f7fe f802 	bl	b6840 <__errno>
   b883c:	6803      	ldr	r3, [r0, #0]
   b883e:	2b0b      	cmp	r3, #11
   b8840:	d0f2      	beq.n	b8828 <_ZN9TCPClient9availableEv+0x54>
   b8842:	f7fd fffd 	bl	b6840 <__errno>
   b8846:	6803      	ldr	r3, [r0, #0]
   b8848:	2b0b      	cmp	r3, #11
   b884a:	d0ed      	beq.n	b8828 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b884c:	2320      	movs	r3, #32
   b884e:	2500      	movs	r5, #0
   b8850:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b8854:	f7fd fff4 	bl	b6840 <__errno>
   b8858:	6803      	ldr	r3, [r0, #0]
   b885a:	9301      	str	r3, [sp, #4]
   b885c:	4b08      	ldr	r3, [pc, #32]	; (b8880 <_ZN9TCPClient9availableEv+0xac>)
   b885e:	4909      	ldr	r1, [pc, #36]	; (b8884 <_ZN9TCPClient9availableEv+0xb0>)
   b8860:	9300      	str	r3, [sp, #0]
   b8862:	aa02      	add	r2, sp, #8
   b8864:	462b      	mov	r3, r5
   b8866:	2032      	movs	r0, #50	; 0x32
   b8868:	f7fd ff26 	bl	b66b8 <log_message>
                    sock_close(d_->sock);
   b886c:	6963      	ldr	r3, [r4, #20]
   b886e:	6818      	ldr	r0, [r3, #0]
   b8870:	f7fd fe82 	bl	b6578 <sock_close>
   b8874:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b8876:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b887a:	601a      	str	r2, [r3, #0]
   b887c:	e7d4      	b.n	b8828 <_ZN9TCPClient9availableEv+0x54>
   b887e:	bf00      	nop
   b8880:	000bc567 	.word	0x000bc567
   b8884:	000bc560 	.word	0x000bc560

000b8888 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b8888:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b888a:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b888c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b888e:	6818      	ldr	r0, [r3, #0]
   b8890:	2800      	cmp	r0, #0
   b8892:	db01      	blt.n	b8898 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b8894:	f7fd fe70 	bl	b6578 <sock_close>
   b8898:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b889a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b889e:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b88a0:	6960      	ldr	r0, [r4, #20]
   b88a2:	2211      	movs	r2, #17
   b88a4:	2100      	movs	r1, #0
   b88a6:	308c      	adds	r0, #140	; 0x8c
   b88a8:	f001 fb15 	bl	b9ed6 <memset>
    flush_buffer();
   b88ac:	4620      	mov	r0, r4
}
   b88ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b88b2:	f7ff bf0b 	b.w	b86cc <_ZN9TCPClient12flush_bufferEv>

000b88b6 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b88b6:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b88b8:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b88ba:	4604      	mov	r4, r0
          total(0) {
   b88bc:	6001      	str	r1, [r0, #0]
   b88be:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b88c2:	3088      	adds	r0, #136	; 0x88
   b88c4:	f7ff fa7a 	bl	b7dbc <_ZN9IPAddressC1Ev>
}
   b88c8:	4620      	mov	r0, r4
   b88ca:	bd10      	pop	{r4, pc}

000b88cc <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b88cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b88ce:	2300      	movs	r3, #0
   b88d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b88d4:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b88d8:	4a0e      	ldr	r2, [pc, #56]	; (b8914 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b88da:	6103      	str	r3, [r0, #16]
   b88dc:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b88de:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b88e0:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b88e2:	20ac      	movs	r0, #172	; 0xac
   b88e4:	9101      	str	r1, [sp, #4]
   b88e6:	f7fb fbd6 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b88ea:	1e05      	subs	r5, r0, #0
   b88ec:	f105 060c 	add.w	r6, r5, #12
   b88f0:	d008      	beq.n	b8904 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b88f2:	2301      	movs	r3, #1
   b88f4:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b88f8:	4b07      	ldr	r3, [pc, #28]	; (b8918 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b88fa:	9901      	ldr	r1, [sp, #4]
   b88fc:	602b      	str	r3, [r5, #0]
   b88fe:	4630      	mov	r0, r6
   b8900:	f7ff ffd9 	bl	b88b6 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b8904:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b8906:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b890a:	f7ff fedf 	bl	b86cc <_ZN9TCPClient12flush_bufferEv>
}
   b890e:	b002      	add	sp, #8
   b8910:	bd70      	pop	{r4, r5, r6, pc}
   b8912:	bf00      	nop
   b8914:	000bc59c 	.word	0x000bc59c
   b8918:	000bc580 	.word	0x000bc580

000b891c <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b891c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b891e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b8922:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b8924:	f7ff ffd2 	bl	b88cc <_ZN9TCPClientC1Ei>
}
   b8928:	4620      	mov	r0, r4
   b892a:	bd10      	pop	{r4, pc}

000b892c <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b892c:	b510      	push	{r4, lr}
   b892e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b8930:	6800      	ldr	r0, [r0, #0]
   b8932:	2800      	cmp	r0, #0
   b8934:	db01      	blt.n	b893a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b8936:	f7fd fe1f 	bl	b6578 <sock_close>
    }
}
   b893a:	4620      	mov	r0, r4
   b893c:	bd10      	pop	{r4, pc}

000b893e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b893e:	300c      	adds	r0, #12
   b8940:	f7ff bff4 	b.w	b892c <_ZN9TCPClient4DataD1Ev>

000b8944 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b8944:	4b02      	ldr	r3, [pc, #8]	; (b8950 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b8946:	681a      	ldr	r2, [r3, #0]
   b8948:	4b02      	ldr	r3, [pc, #8]	; (b8954 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b894a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b894c:	4770      	bx	lr
   b894e:	bf00      	nop
   b8950:	20035594 	.word	0x20035594
   b8954:	2003e6fc 	.word	0x2003e6fc

000b8958 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b8958:	4770      	bx	lr

000b895a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b895a:	7441      	strb	r1, [r0, #17]
}
   b895c:	4770      	bx	lr

000b895e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b895e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8960:	7c00      	ldrb	r0, [r0, #16]
   b8962:	f7fd fe59 	bl	b6618 <hal_usart_available_data_for_write>
}
   b8966:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b896a:	bd08      	pop	{r3, pc}

000b896c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b896c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b896e:	7c00      	ldrb	r0, [r0, #16]
   b8970:	f7fd fe32 	bl	b65d8 <hal_usart_available>
}
   b8974:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8978:	bd08      	pop	{r3, pc}

000b897a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b897a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b897c:	7c00      	ldrb	r0, [r0, #16]
   b897e:	f7fd fe3b 	bl	b65f8 <hal_usart_peek>
}
   b8982:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8986:	bd08      	pop	{r3, pc}

000b8988 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8988:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b898a:	7c00      	ldrb	r0, [r0, #16]
   b898c:	f7fd fe2c 	bl	b65e8 <hal_usart_read>
}
   b8990:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8994:	bd08      	pop	{r3, pc}

000b8996 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b8996:	7c00      	ldrb	r0, [r0, #16]
   b8998:	f7fd be36 	b.w	b6608 <hal_usart_flush>

000b899c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b899c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b899e:	7c45      	ldrb	r5, [r0, #17]
{
   b89a0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b89a2:	b12d      	cbz	r5, b89b0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b89a4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b89a6:	b003      	add	sp, #12
   b89a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b89ac:	f7fd be0c 	b.w	b65c8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b89b0:	7c00      	ldrb	r0, [r0, #16]
   b89b2:	9101      	str	r1, [sp, #4]
   b89b4:	f7fd fe30 	bl	b6618 <hal_usart_available_data_for_write>
   b89b8:	2800      	cmp	r0, #0
   b89ba:	9901      	ldr	r1, [sp, #4]
   b89bc:	dcf2      	bgt.n	b89a4 <_ZN11USARTSerial5writeEh+0x8>
}
   b89be:	4628      	mov	r0, r5
   b89c0:	b003      	add	sp, #12
   b89c2:	bd30      	pop	{r4, r5, pc}

000b89c4 <_ZN11USARTSerialD0Ev>:
   b89c4:	b510      	push	{r4, lr}
   b89c6:	2114      	movs	r1, #20
   b89c8:	4604      	mov	r4, r0
   b89ca:	f7fb fb68 	bl	b409e <_ZdlPvj>
   b89ce:	4620      	mov	r0, r4
   b89d0:	bd10      	pop	{r4, pc}
	...

000b89d4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b89d4:	b510      	push	{r4, lr}
   b89d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b89da:	4604      	mov	r4, r0
   b89dc:	4608      	mov	r0, r1
   b89de:	4611      	mov	r1, r2
   b89e0:	2200      	movs	r2, #0
   b89e2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b89e6:	4b04      	ldr	r3, [pc, #16]	; (b89f8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b89e8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b89ea:	2301      	movs	r3, #1
  _serial = serial;
   b89ec:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b89ee:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b89f0:	f7fd fe1a 	bl	b6628 <hal_usart_init_ex>
}
   b89f4:	4620      	mov	r0, r4
   b89f6:	bd10      	pop	{r4, pc}
   b89f8:	000bc604 	.word	0x000bc604

000b89fc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b89fc:	7441      	strb	r1, [r0, #17]
}
   b89fe:	4770      	bx	lr

000b8a00 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8a00:	4770      	bx	lr

000b8a02 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b8a02:	4770      	bx	lr

000b8a04 <_ZN9USBSerial4readEv>:
{
   b8a04:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b8a06:	2100      	movs	r1, #0
   b8a08:	7c00      	ldrb	r0, [r0, #16]
   b8a0a:	f7fd fe35 	bl	b6678 <HAL_USB_USART_Receive_Data>
}
   b8a0e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8a12:	bd08      	pop	{r3, pc}

000b8a14 <_ZN9USBSerial4peekEv>:
{
   b8a14:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8a16:	2101      	movs	r1, #1
   b8a18:	7c00      	ldrb	r0, [r0, #16]
   b8a1a:	f7fd fe2d 	bl	b6678 <HAL_USB_USART_Receive_Data>
}
   b8a1e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8a22:	bd08      	pop	{r3, pc}

000b8a24 <_ZN9USBSerial17availableForWriteEv>:
{
   b8a24:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b8a26:	7c00      	ldrb	r0, [r0, #16]
   b8a28:	f7fd fe1e 	bl	b6668 <HAL_USB_USART_Available_Data_For_Write>
}
   b8a2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8a30:	bd08      	pop	{r3, pc}

000b8a32 <_ZN9USBSerial9availableEv>:
{
   b8a32:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8a34:	7c00      	ldrb	r0, [r0, #16]
   b8a36:	f7fd fe0f 	bl	b6658 <HAL_USB_USART_Available_Data>
}
   b8a3a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8a3e:	bd08      	pop	{r3, pc}

000b8a40 <_ZN9USBSerial5writeEh>:
{
   b8a40:	b513      	push	{r0, r1, r4, lr}
   b8a42:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8a44:	7c00      	ldrb	r0, [r0, #16]
{
   b8a46:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8a48:	f7fd fe0e 	bl	b6668 <HAL_USB_USART_Available_Data_For_Write>
   b8a4c:	2800      	cmp	r0, #0
   b8a4e:	9901      	ldr	r1, [sp, #4]
   b8a50:	dc01      	bgt.n	b8a56 <_ZN9USBSerial5writeEh+0x16>
   b8a52:	7c60      	ldrb	r0, [r4, #17]
   b8a54:	b120      	cbz	r0, b8a60 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b8a56:	7c20      	ldrb	r0, [r4, #16]
   b8a58:	f7fd fe16 	bl	b6688 <HAL_USB_USART_Send_Data>
   b8a5c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b8a60:	b002      	add	sp, #8
   b8a62:	bd10      	pop	{r4, pc}

000b8a64 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b8a64:	7c00      	ldrb	r0, [r0, #16]
   b8a66:	f7fd be17 	b.w	b6698 <HAL_USB_USART_Flush_Data>

000b8a6a <_ZN9USBSerialD0Ev>:
   b8a6a:	b510      	push	{r4, lr}
   b8a6c:	2114      	movs	r1, #20
   b8a6e:	4604      	mov	r4, r0
   b8a70:	f7fb fb15 	bl	b409e <_ZdlPvj>
   b8a74:	4620      	mov	r0, r4
   b8a76:	bd10      	pop	{r4, pc}

000b8a78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b8a78:	b510      	push	{r4, lr}
   b8a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8a7e:	4604      	mov	r4, r0
   b8a80:	4608      	mov	r0, r1
   b8a82:	2100      	movs	r1, #0
   b8a84:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8a88:	4b04      	ldr	r3, [pc, #16]	; (b8a9c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b8a8a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8a8c:	2301      	movs	r3, #1
  _serial = serial;
   b8a8e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8a90:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b8a92:	4611      	mov	r1, r2
   b8a94:	f7fd fdd0 	bl	b6638 <HAL_USB_USART_Init>
}
   b8a98:	4620      	mov	r0, r4
   b8a9a:	bd10      	pop	{r4, pc}
   b8a9c:	000bc634 	.word	0x000bc634

000b8aa0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b8aa0:	7c00      	ldrb	r0, [r0, #16]
   b8aa2:	2200      	movs	r2, #0
   b8aa4:	f7fd bdd0 	b.w	b6648 <HAL_USB_USART_Begin>

000b8aa8 <_Z19acquireSerialBufferv>:
{
   b8aa8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b8aaa:	2214      	movs	r2, #20
{
   b8aac:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b8aae:	2100      	movs	r1, #0
   b8ab0:	f001 fa11 	bl	b9ed6 <memset>
}
   b8ab4:	4620      	mov	r0, r4
   b8ab6:	bd10      	pop	{r4, pc}

000b8ab8 <_Z16_fetch_usbserialv>:
{
   b8ab8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8aba:	4c0f      	ldr	r4, [pc, #60]	; (b8af8 <_Z16_fetch_usbserialv+0x40>)
{
   b8abc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b8abe:	a803      	add	r0, sp, #12
   b8ac0:	f7ff fff2 	bl	b8aa8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8ac4:	7821      	ldrb	r1, [r4, #0]
   b8ac6:	f3bf 8f5b 	dmb	ish
   b8aca:	f011 0101 	ands.w	r1, r1, #1
   b8ace:	d10f      	bne.n	b8af0 <_Z16_fetch_usbserialv+0x38>
   b8ad0:	4620      	mov	r0, r4
   b8ad2:	9101      	str	r1, [sp, #4]
   b8ad4:	f7fb fae5 	bl	b40a2 <__cxa_guard_acquire>
   b8ad8:	9901      	ldr	r1, [sp, #4]
   b8ada:	b148      	cbz	r0, b8af0 <_Z16_fetch_usbserialv+0x38>
   b8adc:	aa03      	add	r2, sp, #12
   b8ade:	4807      	ldr	r0, [pc, #28]	; (b8afc <_Z16_fetch_usbserialv+0x44>)
   b8ae0:	f7ff ffca 	bl	b8a78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8ae4:	4620      	mov	r0, r4
   b8ae6:	f7fb fae1 	bl	b40ac <__cxa_guard_release>
   b8aea:	4805      	ldr	r0, [pc, #20]	; (b8b00 <_Z16_fetch_usbserialv+0x48>)
   b8aec:	f001 f9aa 	bl	b9e44 <atexit>
	return _usbserial;
}
   b8af0:	4802      	ldr	r0, [pc, #8]	; (b8afc <_Z16_fetch_usbserialv+0x44>)
   b8af2:	b008      	add	sp, #32
   b8af4:	bd10      	pop	{r4, pc}
   b8af6:	bf00      	nop
   b8af8:	2003e700 	.word	0x2003e700
   b8afc:	2003e704 	.word	0x2003e704
   b8b00:	000b8a01 	.word	0x000b8a01

000b8b04 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b8b04:	2200      	movs	r2, #0
   b8b06:	6840      	ldr	r0, [r0, #4]
   b8b08:	4611      	mov	r1, r2
   b8b0a:	f7fd be21 	b.w	b6750 <network_ready>

000b8b0e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8b0e:	2200      	movs	r2, #0
   b8b10:	6840      	ldr	r0, [r0, #4]
   b8b12:	4611      	mov	r1, r2
   b8b14:	f7fd be3c 	b.w	b6790 <network_listening>

000b8b18 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8b18:	2200      	movs	r2, #0
   b8b1a:	6840      	ldr	r0, [r0, #4]
   b8b1c:	4611      	mov	r1, r2
   b8b1e:	f7fd be47 	b.w	b67b0 <network_get_listen_timeout>

000b8b22 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8b22:	6840      	ldr	r0, [r0, #4]
   b8b24:	2200      	movs	r2, #0
   b8b26:	f7fd be3b 	b.w	b67a0 <network_set_listen_timeout>

000b8b2a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8b2a:	6840      	ldr	r0, [r0, #4]
   b8b2c:	2200      	movs	r2, #0
   b8b2e:	f081 0101 	eor.w	r1, r1, #1
   b8b32:	f7fd be25 	b.w	b6780 <network_listen>

000b8b36 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8b36:	2300      	movs	r3, #0
   b8b38:	6840      	ldr	r0, [r0, #4]
   b8b3a:	461a      	mov	r2, r3
   b8b3c:	4619      	mov	r1, r3
   b8b3e:	f7fd be17 	b.w	b6770 <network_off>

000b8b42 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8b42:	2300      	movs	r3, #0
   b8b44:	6840      	ldr	r0, [r0, #4]
   b8b46:	461a      	mov	r2, r3
   b8b48:	4619      	mov	r1, r3
   b8b4a:	f7fd be09 	b.w	b6760 <network_on>

000b8b4e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8b4e:	2200      	movs	r2, #0
   b8b50:	6840      	ldr	r0, [r0, #4]
   b8b52:	4611      	mov	r1, r2
   b8b54:	f7fd bdec 	b.w	b6730 <network_connecting>

000b8b58 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8b58:	6840      	ldr	r0, [r0, #4]
   b8b5a:	2200      	movs	r2, #0
   b8b5c:	2102      	movs	r1, #2
   b8b5e:	f7fd bdef 	b.w	b6740 <network_disconnect>

000b8b62 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8b62:	2300      	movs	r3, #0
   b8b64:	6840      	ldr	r0, [r0, #4]
   b8b66:	461a      	mov	r2, r3
   b8b68:	f7fd bdda 	b.w	b6720 <network_connect>

000b8b6c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b8b6c:	4b02      	ldr	r3, [pc, #8]	; (b8b78 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b8b6e:	2204      	movs	r2, #4
   b8b70:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b8b72:	4a02      	ldr	r2, [pc, #8]	; (b8b7c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b8b74:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b8b76:	4770      	bx	lr
   b8b78:	2003e718 	.word	0x2003e718
   b8b7c:	000bc664 	.word	0x000bc664

000b8b80 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b8b80:	b510      	push	{r4, lr}
   b8b82:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b8b84:	f001 f9f0 	bl	b9f68 <strlen>
   b8b88:	3801      	subs	r0, #1
   b8b8a:	1823      	adds	r3, r4, r0
   b8b8c:	4620      	mov	r0, r4
	while(i<j){
   b8b8e:	4283      	cmp	r3, r0
   b8b90:	d906      	bls.n	b8ba0 <_Z11str_reversePc+0x20>
		c = *i;
   b8b92:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b8b94:	7819      	ldrb	r1, [r3, #0]
   b8b96:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b8b9a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b8b9e:	e7f6      	b.n	b8b8e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b8ba0:	bd10      	pop	{r4, pc}

000b8ba2 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b8ba2:	b570      	push	{r4, r5, r6, lr}
   b8ba4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b8ba6:	1e91      	subs	r1, r2, #2
   b8ba8:	2922      	cmp	r1, #34	; 0x22
   b8baa:	d81d      	bhi.n	b8be8 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b8bac:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b8bae:	b930      	cbnz	r0, b8bbe <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b8bb0:	4423      	add	r3, r4
            *ptr++ = '0';
   b8bb2:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b8bb4:	429d      	cmp	r5, r3
   b8bb6:	d210      	bcs.n	b8bda <ultoa+0x38>
            *ptr++ = '0';
   b8bb8:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b8bbc:	e7fa      	b.n	b8bb4 <ultoa+0x12>
            result.quot = a/radix;
   b8bbe:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b8bc2:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b8bc6:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b8bc8:	2809      	cmp	r0, #9
                *ptr += '0';
   b8bca:	bf94      	ite	ls
   b8bcc:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b8bce:	3157      	addhi	r1, #87	; 0x57
   b8bd0:	b2c9      	uxtb	r1, r1
   b8bd2:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b8bd6:	4630      	mov	r0, r6
	while(a){
   b8bd8:	e7e9      	b.n	b8bae <ultoa+0xc>

	*ptr = '\0';
   b8bda:	2300      	movs	r3, #0
	str_reverse(buffer);
   b8bdc:	4620      	mov	r0, r4
	*ptr = '\0';
   b8bde:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b8be0:	f7ff ffce 	bl	b8b80 <_Z11str_reversePc>
	return buffer;
   b8be4:	4620      	mov	r0, r4
}
   b8be6:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b8be8:	2000      	movs	r0, #0
   b8bea:	e7fc      	b.n	b8be6 <ultoa+0x44>

000b8bec <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b8bec:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b8bee:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b8bf0:	460c      	mov	r4, r1
   b8bf2:	4615      	mov	r5, r2
	if(a<0){
   b8bf4:	da0e      	bge.n	b8c14 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b8bf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b8bfa:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b8bfe:	bf14      	ite	ne
   b8c00:	4258      	negne	r0, r3
   b8c02:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b8c04:	2301      	movs	r3, #1
		*buffer = '-';
   b8c06:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b8c08:	462a      	mov	r2, r5
   b8c0a:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b8c0c:	f7ff ffc9 	bl	b8ba2 <ultoa>
	}
	return buffer;
}
   b8c10:	4620      	mov	r0, r4
   b8c12:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b8c14:	2301      	movs	r3, #1
   b8c16:	e7f9      	b.n	b8c0c <itoa+0x20>

000b8c18 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b8c18:	4b01      	ldr	r3, [pc, #4]	; (b8c20 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b8c1a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b8c1c:	4770      	bx	lr
   b8c1e:	bf00      	nop
   b8c20:	2003559c 	.word	0x2003559c

000b8c24 <serialEventRun>:
{
   b8c24:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b8c26:	4b0b      	ldr	r3, [pc, #44]	; (b8c54 <serialEventRun+0x30>)
   b8c28:	b143      	cbz	r3, b8c3c <serialEventRun+0x18>
   b8c2a:	f7ff ff45 	bl	b8ab8 <_Z16_fetch_usbserialv>
   b8c2e:	6803      	ldr	r3, [r0, #0]
   b8c30:	691b      	ldr	r3, [r3, #16]
   b8c32:	4798      	blx	r3
   b8c34:	2800      	cmp	r0, #0
   b8c36:	dd01      	ble.n	b8c3c <serialEventRun+0x18>
        serialEvent();
   b8c38:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b8c3c:	4b06      	ldr	r3, [pc, #24]	; (b8c58 <serialEventRun+0x34>)
   b8c3e:	b143      	cbz	r3, b8c52 <serialEventRun+0x2e>
   b8c40:	f000 f8c8 	bl	b8dd4 <_Z22__fetch_global_Serial1v>
   b8c44:	6803      	ldr	r3, [r0, #0]
   b8c46:	691b      	ldr	r3, [r3, #16]
   b8c48:	4798      	blx	r3
   b8c4a:	2800      	cmp	r0, #0
   b8c4c:	dd01      	ble.n	b8c52 <serialEventRun+0x2e>
        serialEvent1();
   b8c4e:	f3af 8000 	nop.w
}
   b8c52:	bd08      	pop	{r3, pc}
	...

000b8c5c <_post_loop>:
{
   b8c5c:	b508      	push	{r3, lr}
	serialEventRun();
   b8c5e:	f7ff ffe1 	bl	b8c24 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b8c62:	f7fd fbf1 	bl	b6448 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b8c66:	4b01      	ldr	r3, [pc, #4]	; (b8c6c <_post_loop+0x10>)
   b8c68:	6018      	str	r0, [r3, #0]
}
   b8c6a:	bd08      	pop	{r3, pc}
   b8c6c:	2003e728 	.word	0x2003e728

000b8c70 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8c70:	4805      	ldr	r0, [pc, #20]	; (b8c88 <_Z33system_initialize_user_backup_ramv+0x18>)
   b8c72:	4a06      	ldr	r2, [pc, #24]	; (b8c8c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8c74:	4906      	ldr	r1, [pc, #24]	; (b8c90 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b8c76:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8c78:	1a12      	subs	r2, r2, r0
   b8c7a:	f001 f904 	bl	b9e86 <memcpy>
    __backup_sram_signature = signature;
   b8c7e:	4b05      	ldr	r3, [pc, #20]	; (b8c94 <_Z33system_initialize_user_backup_ramv+0x24>)
   b8c80:	4a05      	ldr	r2, [pc, #20]	; (b8c98 <_Z33system_initialize_user_backup_ramv+0x28>)
   b8c82:	601a      	str	r2, [r3, #0]
}
   b8c84:	bd08      	pop	{r3, pc}
   b8c86:	bf00      	nop
   b8c88:	2003f400 	.word	0x2003f400
   b8c8c:	2003f404 	.word	0x2003f404
   b8c90:	000bcc04 	.word	0x000bcc04
   b8c94:	2003f400 	.word	0x2003f400
   b8c98:	9a271c1e 	.word	0x9a271c1e

000b8c9c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b8c9c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8c9e:	2300      	movs	r3, #0
   b8ca0:	9300      	str	r3, [sp, #0]
   b8ca2:	461a      	mov	r2, r3
   b8ca4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8ca8:	f7fd fd28 	bl	b66fc <system_ctrl_set_result>
}
   b8cac:	b003      	add	sp, #12
   b8cae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8cb4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b8cb4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b8cb6:	8843      	ldrh	r3, [r0, #2]
   b8cb8:	2b0a      	cmp	r3, #10
   b8cba:	d008      	beq.n	b8cce <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b8cbc:	2b50      	cmp	r3, #80	; 0x50
   b8cbe:	d10b      	bne.n	b8cd8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b8cc0:	4b09      	ldr	r3, [pc, #36]	; (b8ce8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b8cc2:	681b      	ldr	r3, [r3, #0]
   b8cc4:	b14b      	cbz	r3, b8cda <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b8cc6:	b003      	add	sp, #12
   b8cc8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b8ccc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b8cce:	f7ff ffe5 	bl	b8c9c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b8cd2:	b003      	add	sp, #12
   b8cd4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8cd8:	2300      	movs	r3, #0
   b8cda:	9300      	str	r3, [sp, #0]
   b8cdc:	461a      	mov	r2, r3
   b8cde:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8ce2:	f7fd fd0b 	bl	b66fc <system_ctrl_set_result>
}
   b8ce6:	e7f4      	b.n	b8cd2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b8ce8:	2003e724 	.word	0x2003e724

000b8cec <module_user_init_hook>:
{
   b8cec:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b8cee:	4812      	ldr	r0, [pc, #72]	; (b8d38 <module_user_init_hook+0x4c>)
   b8cf0:	2100      	movs	r1, #0
   b8cf2:	f7fd fdb5 	bl	b6860 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b8cf6:	4b11      	ldr	r3, [pc, #68]	; (b8d3c <module_user_init_hook+0x50>)
   b8cf8:	681a      	ldr	r2, [r3, #0]
   b8cfa:	4b11      	ldr	r3, [pc, #68]	; (b8d40 <module_user_init_hook+0x54>)
   b8cfc:	429a      	cmp	r2, r3
   b8cfe:	4b11      	ldr	r3, [pc, #68]	; (b8d44 <module_user_init_hook+0x58>)
   b8d00:	bf0c      	ite	eq
   b8d02:	2201      	moveq	r2, #1
   b8d04:	2200      	movne	r2, #0
   b8d06:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b8d08:	d001      	beq.n	b8d0e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b8d0a:	f7ff ffb1 	bl	b8c70 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b8d0e:	f7fd fb8b 	bl	b6428 <HAL_RNG_GetRandomNumber>
   b8d12:	4604      	mov	r4, r0
    srand(seed);
   b8d14:	f001 f8e8 	bl	b9ee8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b8d18:	4b0b      	ldr	r3, [pc, #44]	; (b8d48 <module_user_init_hook+0x5c>)
   b8d1a:	b113      	cbz	r3, b8d22 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b8d1c:	4620      	mov	r0, r4
   b8d1e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b8d22:	2100      	movs	r1, #0
   b8d24:	4808      	ldr	r0, [pc, #32]	; (b8d48 <module_user_init_hook+0x5c>)
   b8d26:	f7fd fcf3 	bl	b6710 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b8d2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b8d2e:	4807      	ldr	r0, [pc, #28]	; (b8d4c <module_user_init_hook+0x60>)
   b8d30:	2100      	movs	r1, #0
   b8d32:	f7fd bcd9 	b.w	b66e8 <system_ctrl_set_app_request_handler>
   b8d36:	bf00      	nop
   b8d38:	000b8c19 	.word	0x000b8c19
   b8d3c:	2003f400 	.word	0x2003f400
   b8d40:	9a271c1e 	.word	0x9a271c1e
   b8d44:	2003e720 	.word	0x2003e720
   b8d48:	00000000 	.word	0x00000000
   b8d4c:	000b8cb5 	.word	0x000b8cb5

000b8d50 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8d50:	4770      	bx	lr
	...

000b8d54 <_Z19__fetch_global_Wirev>:
{
   b8d54:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8d56:	4d0e      	ldr	r5, [pc, #56]	; (b8d90 <_Z19__fetch_global_Wirev+0x3c>)
   b8d58:	7829      	ldrb	r1, [r5, #0]
   b8d5a:	f3bf 8f5b 	dmb	ish
   b8d5e:	f011 0401 	ands.w	r4, r1, #1
{
   b8d62:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8d64:	d111      	bne.n	b8d8a <_Z19__fetch_global_Wirev+0x36>
   b8d66:	4628      	mov	r0, r5
   b8d68:	f7fb f99b 	bl	b40a2 <__cxa_guard_acquire>
   b8d6c:	b168      	cbz	r0, b8d8a <_Z19__fetch_global_Wirev+0x36>
   b8d6e:	a801      	add	r0, sp, #4
   b8d70:	f7fb faa8 	bl	b42c4 <_Z17acquireWireBufferv>
   b8d74:	aa01      	add	r2, sp, #4
   b8d76:	4621      	mov	r1, r4
   b8d78:	4806      	ldr	r0, [pc, #24]	; (b8d94 <_Z19__fetch_global_Wirev+0x40>)
   b8d7a:	f7fe ff93 	bl	b7ca4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b8d7e:	4628      	mov	r0, r5
   b8d80:	f7fb f994 	bl	b40ac <__cxa_guard_release>
   b8d84:	4804      	ldr	r0, [pc, #16]	; (b8d98 <_Z19__fetch_global_Wirev+0x44>)
   b8d86:	f001 f85d 	bl	b9e44 <atexit>
	return wire;
}
   b8d8a:	4802      	ldr	r0, [pc, #8]	; (b8d94 <_Z19__fetch_global_Wirev+0x40>)
   b8d8c:	b007      	add	sp, #28
   b8d8e:	bd30      	pop	{r4, r5, pc}
   b8d90:	2003e72c 	.word	0x2003e72c
   b8d94:	2003e730 	.word	0x2003e730
   b8d98:	000b8d51 	.word	0x000b8d51

000b8d9c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8d9c:	4770      	bx	lr
	...

000b8da0 <_Z20acquireSerial1Bufferv>:
{
   b8da0:	b538      	push	{r3, r4, r5, lr}
   b8da2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8da4:	2514      	movs	r5, #20
   b8da6:	462a      	mov	r2, r5
   b8da8:	2100      	movs	r1, #0
   b8daa:	f001 f894 	bl	b9ed6 <memset>
   b8dae:	8025      	strh	r5, [r4, #0]
   b8db0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8db2:	4907      	ldr	r1, [pc, #28]	; (b8dd0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8db4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8db6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8db8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8dba:	f000 f82f 	bl	b8e1c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8dbe:	4904      	ldr	r1, [pc, #16]	; (b8dd0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8dc0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8dc2:	4628      	mov	r0, r5
   b8dc4:	f000 f82a 	bl	b8e1c <_ZnajRKSt9nothrow_t>
    };
   b8dc8:	60e0      	str	r0, [r4, #12]
}
   b8dca:	4620      	mov	r0, r4
   b8dcc:	bd38      	pop	{r3, r4, r5, pc}
   b8dce:	bf00      	nop
   b8dd0:	000bc698 	.word	0x000bc698

000b8dd4 <_Z22__fetch_global_Serial1v>:
{
   b8dd4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8dd6:	4d0e      	ldr	r5, [pc, #56]	; (b8e10 <_Z22__fetch_global_Serial1v+0x3c>)
   b8dd8:	7829      	ldrb	r1, [r5, #0]
   b8dda:	f3bf 8f5b 	dmb	ish
   b8dde:	f011 0401 	ands.w	r4, r1, #1
{
   b8de2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8de4:	d111      	bne.n	b8e0a <_Z22__fetch_global_Serial1v+0x36>
   b8de6:	4628      	mov	r0, r5
   b8de8:	f7fb f95b 	bl	b40a2 <__cxa_guard_acquire>
   b8dec:	b168      	cbz	r0, b8e0a <_Z22__fetch_global_Serial1v+0x36>
   b8dee:	a801      	add	r0, sp, #4
   b8df0:	f7ff ffd6 	bl	b8da0 <_Z20acquireSerial1Bufferv>
   b8df4:	aa01      	add	r2, sp, #4
   b8df6:	4621      	mov	r1, r4
   b8df8:	4806      	ldr	r0, [pc, #24]	; (b8e14 <_Z22__fetch_global_Serial1v+0x40>)
   b8dfa:	f7ff fdeb 	bl	b89d4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b8dfe:	4628      	mov	r0, r5
   b8e00:	f7fb f954 	bl	b40ac <__cxa_guard_release>
   b8e04:	4804      	ldr	r0, [pc, #16]	; (b8e18 <_Z22__fetch_global_Serial1v+0x44>)
   b8e06:	f001 f81d 	bl	b9e44 <atexit>
    return serial1;
}
   b8e0a:	4802      	ldr	r0, [pc, #8]	; (b8e14 <_Z22__fetch_global_Serial1v+0x40>)
   b8e0c:	b007      	add	sp, #28
   b8e0e:	bd30      	pop	{r4, r5, pc}
   b8e10:	2003e744 	.word	0x2003e744
   b8e14:	2003e748 	.word	0x2003e748
   b8e18:	000b8d9d 	.word	0x000b8d9d

000b8e1c <_ZnajRKSt9nothrow_t>:
   b8e1c:	f7fb b93d 	b.w	b409a <_Znaj>

000b8e20 <_ZSt17__throw_bad_allocv>:
   b8e20:	b508      	push	{r3, lr}
   b8e22:	f7fd fcfd 	bl	b6820 <abort>

000b8e26 <_ZSt19__throw_logic_errorPKc>:
   b8e26:	b508      	push	{r3, lr}
   b8e28:	f7fd fcfa 	bl	b6820 <abort>

000b8e2c <_ZSt20__throw_length_errorPKc>:
   b8e2c:	b508      	push	{r3, lr}
   b8e2e:	f7fd fcf7 	bl	b6820 <abort>

000b8e32 <_ZSt24__throw_out_of_range_fmtPKcz>:
   b8e32:	b40f      	push	{r0, r1, r2, r3}
   b8e34:	b580      	push	{r7, lr}
   b8e36:	b084      	sub	sp, #16
   b8e38:	af00      	add	r7, sp, #0
   b8e3a:	f107 0418 	add.w	r4, r7, #24
   b8e3e:	f854 2b04 	ldr.w	r2, [r4], #4
   b8e42:	607a      	str	r2, [r7, #4]
   b8e44:	4610      	mov	r0, r2
   b8e46:	f001 f88f 	bl	b9f68 <strlen>
   b8e4a:	f200 2307 	addw	r3, r0, #519	; 0x207
   b8e4e:	f023 0307 	bic.w	r3, r3, #7
   b8e52:	ebad 0d03 	sub.w	sp, sp, r3
   b8e56:	f500 7100 	add.w	r1, r0, #512	; 0x200
   b8e5a:	687a      	ldr	r2, [r7, #4]
   b8e5c:	60fc      	str	r4, [r7, #12]
   b8e5e:	4623      	mov	r3, r4
   b8e60:	4668      	mov	r0, sp
   b8e62:	f000 f85d 	bl	b8f20 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   b8e66:	f7fd fcdb 	bl	b6820 <abort>

000b8e6a <_ZSt25__throw_bad_function_callv>:
   b8e6a:	b508      	push	{r3, lr}
   b8e6c:	f7fd fcd8 	bl	b6820 <abort>

000b8e70 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b8e70:	4901      	ldr	r1, [pc, #4]	; (b8e78 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b8e72:	f000 b98b 	b.w	b918c <_ZNKSt9type_infoeqERKS_>
   b8e76:	bf00      	nop
   b8e78:	000bc6b4 	.word	0x000bc6b4

000b8e7c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   b8e7c:	b580      	push	{r7, lr}
   b8e7e:	b09c      	sub	sp, #112	; 0x70
   b8e80:	4606      	mov	r6, r0
   b8e82:	af00      	add	r7, sp, #0
   b8e84:	460c      	mov	r4, r1
   b8e86:	1ba4      	subs	r4, r4, r6
   b8e88:	490e      	ldr	r1, [pc, #56]	; (b8ec4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   b8e8a:	2269      	movs	r2, #105	; 0x69
   b8e8c:	1d38      	adds	r0, r7, #4
   b8e8e:	f000 fffa 	bl	b9e86 <memcpy>
   b8e92:	f104 0370 	add.w	r3, r4, #112	; 0x70
   b8e96:	f023 0307 	bic.w	r3, r3, #7
   b8e9a:	ebad 0d03 	sub.w	sp, sp, r3
   b8e9e:	466d      	mov	r5, sp
   b8ea0:	2268      	movs	r2, #104	; 0x68
   b8ea2:	1d39      	adds	r1, r7, #4
   b8ea4:	4628      	mov	r0, r5
   b8ea6:	f000 ffee 	bl	b9e86 <memcpy>
   b8eaa:	4622      	mov	r2, r4
   b8eac:	4631      	mov	r1, r6
   b8eae:	f105 0068 	add.w	r0, r5, #104	; 0x68
   b8eb2:	442c      	add	r4, r5
   b8eb4:	f000 ffe7 	bl	b9e86 <memcpy>
   b8eb8:	2300      	movs	r3, #0
   b8eba:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   b8ebe:	4628      	mov	r0, r5
   b8ec0:	f7ff ffb1 	bl	b8e26 <_ZSt19__throw_logic_errorPKc>
   b8ec4:	000bc6bc 	.word	0x000bc6bc

000b8ec8 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   b8ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8ecc:	af00      	add	r7, sp, #0
   b8ece:	b084      	sub	sp, #16
   b8ed0:	466d      	mov	r5, sp
   b8ed2:	f105 040c 	add.w	r4, r5, #12
   b8ed6:	f8df 8044 	ldr.w	r8, [pc, #68]	; b8f1c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
   b8eda:	4623      	mov	r3, r4
   b8edc:	f04f 0c0a 	mov.w	ip, #10
   b8ee0:	fbb2 f6fc 	udiv	r6, r2, ip
   b8ee4:	fb0c 2e16 	mls	lr, ip, r6, r2
   b8ee8:	f818 e00e 	ldrb.w	lr, [r8, lr]
   b8eec:	f803 ed01 	strb.w	lr, [r3, #-1]!
   b8ef0:	4696      	mov	lr, r2
   b8ef2:	f1be 0f09 	cmp.w	lr, #9
   b8ef6:	4632      	mov	r2, r6
   b8ef8:	d8f2      	bhi.n	b8ee0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
   b8efa:	1ae4      	subs	r4, r4, r3
   b8efc:	428c      	cmp	r4, r1
   b8efe:	d809      	bhi.n	b8f14 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
   b8f00:	f1c4 030c 	rsb	r3, r4, #12
   b8f04:	4622      	mov	r2, r4
   b8f06:	18e9      	adds	r1, r5, r3
   b8f08:	f000 ffbd 	bl	b9e86 <memcpy>
   b8f0c:	4620      	mov	r0, r4
   b8f0e:	46bd      	mov	sp, r7
   b8f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8f14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b8f18:	e7f8      	b.n	b8f0c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
   b8f1a:	bf00      	nop
   b8f1c:	000bc725 	.word	0x000bc725

000b8f20 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   b8f20:	3901      	subs	r1, #1
   b8f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8f26:	4607      	mov	r7, r0
   b8f28:	4615      	mov	r5, r2
   b8f2a:	eb00 0801 	add.w	r8, r0, r1
   b8f2e:	4604      	mov	r4, r0
   b8f30:	782a      	ldrb	r2, [r5, #0]
   b8f32:	b392      	cbz	r2, b8f9a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
   b8f34:	4544      	cmp	r4, r8
   b8f36:	d22a      	bcs.n	b8f8e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b8f38:	2a25      	cmp	r2, #37	; 0x25
   b8f3a:	d107      	bne.n	b8f4c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b8f3c:	786a      	ldrb	r2, [r5, #1]
   b8f3e:	2a73      	cmp	r2, #115	; 0x73
   b8f40:	d009      	beq.n	b8f56 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   b8f42:	2a7a      	cmp	r2, #122	; 0x7a
   b8f44:	d012      	beq.n	b8f6c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   b8f46:	2a25      	cmp	r2, #37	; 0x25
   b8f48:	d100      	bne.n	b8f4c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b8f4a:	3501      	adds	r5, #1
   b8f4c:	f815 2b01 	ldrb.w	r2, [r5], #1
   b8f50:	f804 2b01 	strb.w	r2, [r4], #1
   b8f54:	e7ec      	b.n	b8f30 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b8f56:	f853 2b04 	ldr.w	r2, [r3], #4
   b8f5a:	3a01      	subs	r2, #1
   b8f5c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   b8f60:	b1c9      	cbz	r1, b8f96 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   b8f62:	4544      	cmp	r4, r8
   b8f64:	d013      	beq.n	b8f8e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b8f66:	f804 1b01 	strb.w	r1, [r4], #1
   b8f6a:	e7f7      	b.n	b8f5c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   b8f6c:	78aa      	ldrb	r2, [r5, #2]
   b8f6e:	2a75      	cmp	r2, #117	; 0x75
   b8f70:	d1ec      	bne.n	b8f4c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b8f72:	461e      	mov	r6, r3
   b8f74:	eba8 0104 	sub.w	r1, r8, r4
   b8f78:	f856 2b04 	ldr.w	r2, [r6], #4
   b8f7c:	4620      	mov	r0, r4
   b8f7e:	f7ff ffa3 	bl	b8ec8 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   b8f82:	2800      	cmp	r0, #0
   b8f84:	dd03      	ble.n	b8f8e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b8f86:	4404      	add	r4, r0
   b8f88:	3503      	adds	r5, #3
   b8f8a:	4633      	mov	r3, r6
   b8f8c:	e7d0      	b.n	b8f30 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b8f8e:	4621      	mov	r1, r4
   b8f90:	4638      	mov	r0, r7
   b8f92:	f7ff ff73 	bl	b8e7c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   b8f96:	3502      	adds	r5, #2
   b8f98:	e7ca      	b.n	b8f30 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b8f9a:	7022      	strb	r2, [r4, #0]
   b8f9c:	1be0      	subs	r0, r4, r7
   b8f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8fa2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b8fa2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b8fa4:	2400      	movs	r4, #0
   b8fa6:	2310      	movs	r3, #16
   b8fa8:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b8fac:	6803      	ldr	r3, [r0, #0]
   b8fae:	4615      	mov	r5, r2
   b8fb0:	699e      	ldr	r6, [r3, #24]
   b8fb2:	6812      	ldr	r2, [r2, #0]
   b8fb4:	466b      	mov	r3, sp
   b8fb6:	e9cd 4400 	strd	r4, r4, [sp]
   b8fba:	47b0      	blx	r6
   b8fbc:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b8fc0:	f003 0306 	and.w	r3, r3, #6
   b8fc4:	2b06      	cmp	r3, #6
   b8fc6:	bf03      	ittte	eq
   b8fc8:	9b00      	ldreq	r3, [sp, #0]
   b8fca:	602b      	streq	r3, [r5, #0]
   b8fcc:	2001      	moveq	r0, #1
   b8fce:	4620      	movne	r0, r4
   b8fd0:	b004      	add	sp, #16
   b8fd2:	bd70      	pop	{r4, r5, r6, pc}

000b8fd4 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b8fd4:	9800      	ldr	r0, [sp, #0]
   b8fd6:	4290      	cmp	r0, r2
   b8fd8:	bf14      	ite	ne
   b8fda:	2001      	movne	r0, #1
   b8fdc:	2006      	moveq	r0, #6
   b8fde:	4770      	bx	lr

000b8fe0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b8fe0:	b510      	push	{r4, lr}
   b8fe2:	4b03      	ldr	r3, [pc, #12]	; (b8ff0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b8fe4:	6003      	str	r3, [r0, #0]
   b8fe6:	4604      	mov	r4, r0
   b8fe8:	f000 f8cd 	bl	b9186 <_ZNSt9type_infoD1Ev>
   b8fec:	4620      	mov	r0, r4
   b8fee:	bd10      	pop	{r4, pc}
   b8ff0:	000bc768 	.word	0x000bc768

000b8ff4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b8ff4:	b510      	push	{r4, lr}
   b8ff6:	4604      	mov	r4, r0
   b8ff8:	f7ff fff2 	bl	b8fe0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8ffc:	4620      	mov	r0, r4
   b8ffe:	2108      	movs	r1, #8
   b9000:	f7fb f84d 	bl	b409e <_ZdlPvj>
   b9004:	4620      	mov	r0, r4
   b9006:	bd10      	pop	{r4, pc}

000b9008 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b9008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b900c:	461f      	mov	r7, r3
   b900e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b9012:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b9016:	4598      	cmp	r8, r3
   b9018:	4606      	mov	r6, r0
   b901a:	4615      	mov	r5, r2
   b901c:	d107      	bne.n	b902e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b901e:	9907      	ldr	r1, [sp, #28]
   b9020:	f000 f8b4 	bl	b918c <_ZNKSt9type_infoeqERKS_>
   b9024:	b118      	cbz	r0, b902e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9026:	7165      	strb	r5, [r4, #5]
   b9028:	2000      	movs	r0, #0
   b902a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b902e:	4639      	mov	r1, r7
   b9030:	4630      	mov	r0, r6
   b9032:	f000 f8ab 	bl	b918c <_ZNKSt9type_infoeqERKS_>
   b9036:	2800      	cmp	r0, #0
   b9038:	d0f6      	beq.n	b9028 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b903a:	2301      	movs	r3, #1
   b903c:	f8c4 8000 	str.w	r8, [r4]
   b9040:	7125      	strb	r5, [r4, #4]
   b9042:	71a3      	strb	r3, [r4, #6]
   b9044:	e7f0      	b.n	b9028 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b9046 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b9046:	b538      	push	{r3, r4, r5, lr}
   b9048:	4615      	mov	r5, r2
   b904a:	461c      	mov	r4, r3
   b904c:	f000 f89e 	bl	b918c <_ZNKSt9type_infoeqERKS_>
   b9050:	b120      	cbz	r0, b905c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b9052:	2308      	movs	r3, #8
   b9054:	60e3      	str	r3, [r4, #12]
   b9056:	2306      	movs	r3, #6
   b9058:	6025      	str	r5, [r4, #0]
   b905a:	7123      	strb	r3, [r4, #4]
   b905c:	bd38      	pop	{r3, r4, r5, pc}

000b905e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b905e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9060:	4605      	mov	r5, r0
   b9062:	460c      	mov	r4, r1
   b9064:	9201      	str	r2, [sp, #4]
   b9066:	461e      	mov	r6, r3
   b9068:	f000 f890 	bl	b918c <_ZNKSt9type_infoeqERKS_>
   b906c:	b950      	cbnz	r0, b9084 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b906e:	2e03      	cmp	r6, #3
   b9070:	d808      	bhi.n	b9084 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9072:	6823      	ldr	r3, [r4, #0]
   b9074:	9a01      	ldr	r2, [sp, #4]
   b9076:	695b      	ldr	r3, [r3, #20]
   b9078:	4629      	mov	r1, r5
   b907a:	4620      	mov	r0, r4
   b907c:	b002      	add	sp, #8
   b907e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9082:	4718      	bx	r3
   b9084:	b002      	add	sp, #8
   b9086:	bd70      	pop	{r4, r5, r6, pc}

000b9088 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b9088:	b510      	push	{r4, lr}
   b908a:	4b03      	ldr	r3, [pc, #12]	; (b9098 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b908c:	6003      	str	r3, [r0, #0]
   b908e:	4604      	mov	r4, r0
   b9090:	f7ff ffa6 	bl	b8fe0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9094:	4620      	mov	r0, r4
   b9096:	bd10      	pop	{r4, pc}
   b9098:	000bc7c8 	.word	0x000bc7c8

000b909c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b909c:	b510      	push	{r4, lr}
   b909e:	4604      	mov	r4, r0
   b90a0:	f7ff fff2 	bl	b9088 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b90a4:	4620      	mov	r0, r4
   b90a6:	210c      	movs	r1, #12
   b90a8:	f7fa fff9 	bl	b409e <_ZdlPvj>
   b90ac:	4620      	mov	r0, r4
   b90ae:	bd10      	pop	{r4, pc}

000b90b0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b90b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b90b2:	9f08      	ldr	r7, [sp, #32]
   b90b4:	4297      	cmp	r7, r2
   b90b6:	4605      	mov	r5, r0
   b90b8:	460e      	mov	r6, r1
   b90ba:	4614      	mov	r4, r2
   b90bc:	d00a      	beq.n	b90d4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b90be:	68a8      	ldr	r0, [r5, #8]
   b90c0:	6802      	ldr	r2, [r0, #0]
   b90c2:	9708      	str	r7, [sp, #32]
   b90c4:	6a15      	ldr	r5, [r2, #32]
   b90c6:	4631      	mov	r1, r6
   b90c8:	4622      	mov	r2, r4
   b90ca:	46ac      	mov	ip, r5
   b90cc:	b003      	add	sp, #12
   b90ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b90d2:	4760      	bx	ip
   b90d4:	4619      	mov	r1, r3
   b90d6:	9301      	str	r3, [sp, #4]
   b90d8:	f000 f858 	bl	b918c <_ZNKSt9type_infoeqERKS_>
   b90dc:	9b01      	ldr	r3, [sp, #4]
   b90de:	2800      	cmp	r0, #0
   b90e0:	d0ed      	beq.n	b90be <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b90e2:	2006      	movs	r0, #6
   b90e4:	b003      	add	sp, #12
   b90e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b90e8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b90e8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b90ec:	460d      	mov	r5, r1
   b90ee:	4619      	mov	r1, r3
   b90f0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b90f4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b90f8:	4681      	mov	r9, r0
   b90fa:	4617      	mov	r7, r2
   b90fc:	4698      	mov	r8, r3
   b90fe:	f000 f845 	bl	b918c <_ZNKSt9type_infoeqERKS_>
   b9102:	b190      	cbz	r0, b912a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b9104:	2d00      	cmp	r5, #0
   b9106:	6034      	str	r4, [r6, #0]
   b9108:	7137      	strb	r7, [r6, #4]
   b910a:	db09      	blt.n	b9120 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b910c:	1961      	adds	r1, r4, r5
   b910e:	458a      	cmp	sl, r1
   b9110:	bf0c      	ite	eq
   b9112:	2106      	moveq	r1, #6
   b9114:	2101      	movne	r1, #1
   b9116:	71b1      	strb	r1, [r6, #6]
   b9118:	2000      	movs	r0, #0
   b911a:	b001      	add	sp, #4
   b911c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9120:	3502      	adds	r5, #2
   b9122:	d1f9      	bne.n	b9118 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9124:	2301      	movs	r3, #1
   b9126:	71b3      	strb	r3, [r6, #6]
   b9128:	e7f6      	b.n	b9118 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b912a:	4554      	cmp	r4, sl
   b912c:	d106      	bne.n	b913c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b912e:	4659      	mov	r1, fp
   b9130:	4648      	mov	r0, r9
   b9132:	f000 f82b 	bl	b918c <_ZNKSt9type_infoeqERKS_>
   b9136:	b108      	cbz	r0, b913c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9138:	7177      	strb	r7, [r6, #5]
   b913a:	e7ed      	b.n	b9118 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b913c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b9140:	6803      	ldr	r3, [r0, #0]
   b9142:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b9146:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b914a:	69dc      	ldr	r4, [r3, #28]
   b914c:	463a      	mov	r2, r7
   b914e:	4643      	mov	r3, r8
   b9150:	4629      	mov	r1, r5
   b9152:	46a4      	mov	ip, r4
   b9154:	b001      	add	sp, #4
   b9156:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b915a:	4760      	bx	ip

000b915c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b915c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9160:	4607      	mov	r7, r0
   b9162:	460c      	mov	r4, r1
   b9164:	4615      	mov	r5, r2
   b9166:	461e      	mov	r6, r3
   b9168:	f7ff ff6d 	bl	b9046 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b916c:	b948      	cbnz	r0, b9182 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b916e:	68b8      	ldr	r0, [r7, #8]
   b9170:	6803      	ldr	r3, [r0, #0]
   b9172:	699f      	ldr	r7, [r3, #24]
   b9174:	462a      	mov	r2, r5
   b9176:	4633      	mov	r3, r6
   b9178:	4621      	mov	r1, r4
   b917a:	46bc      	mov	ip, r7
   b917c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b9180:	4760      	bx	ip
   b9182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9186 <_ZNSt9type_infoD1Ev>:
   b9186:	4770      	bx	lr

000b9188 <_ZNKSt9type_info14__is_pointer_pEv>:
   b9188:	2000      	movs	r0, #0
   b918a:	4770      	bx	lr

000b918c <_ZNKSt9type_infoeqERKS_>:
   b918c:	4281      	cmp	r1, r0
   b918e:	b508      	push	{r3, lr}
   b9190:	d00e      	beq.n	b91b0 <_ZNKSt9type_infoeqERKS_+0x24>
   b9192:	6840      	ldr	r0, [r0, #4]
   b9194:	7803      	ldrb	r3, [r0, #0]
   b9196:	2b2a      	cmp	r3, #42	; 0x2a
   b9198:	d00c      	beq.n	b91b4 <_ZNKSt9type_infoeqERKS_+0x28>
   b919a:	6849      	ldr	r1, [r1, #4]
   b919c:	780b      	ldrb	r3, [r1, #0]
   b919e:	2b2a      	cmp	r3, #42	; 0x2a
   b91a0:	bf08      	it	eq
   b91a2:	3101      	addeq	r1, #1
   b91a4:	f000 fece 	bl	b9f44 <strcmp>
   b91a8:	fab0 f080 	clz	r0, r0
   b91ac:	0940      	lsrs	r0, r0, #5
   b91ae:	bd08      	pop	{r3, pc}
   b91b0:	2001      	movs	r0, #1
   b91b2:	e7fc      	b.n	b91ae <_ZNKSt9type_infoeqERKS_+0x22>
   b91b4:	2000      	movs	r0, #0
   b91b6:	e7fa      	b.n	b91ae <_ZNKSt9type_infoeqERKS_+0x22>

000b91b8 <floorf>:
   b91b8:	ee10 2a10 	vmov	r2, s0
   b91bc:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   b91c0:	3b7f      	subs	r3, #127	; 0x7f
   b91c2:	2b16      	cmp	r3, #22
   b91c4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   b91c8:	dc28      	bgt.n	b921c <floorf+0x64>
   b91ca:	2b00      	cmp	r3, #0
   b91cc:	db18      	blt.n	b9200 <floorf+0x48>
   b91ce:	491a      	ldr	r1, [pc, #104]	; (b9238 <floorf+0x80>)
   b91d0:	4119      	asrs	r1, r3
   b91d2:	420a      	tst	r2, r1
   b91d4:	d021      	beq.n	b921a <floorf+0x62>
   b91d6:	eddf 7a19 	vldr	s15, [pc, #100]	; b923c <floorf+0x84>
   b91da:	ee70 7a27 	vadd.f32	s15, s0, s15
   b91de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b91e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b91e6:	dd18      	ble.n	b921a <floorf+0x62>
   b91e8:	2a00      	cmp	r2, #0
   b91ea:	da04      	bge.n	b91f6 <floorf+0x3e>
   b91ec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   b91f0:	fa40 f303 	asr.w	r3, r0, r3
   b91f4:	441a      	add	r2, r3
   b91f6:	ea22 0301 	bic.w	r3, r2, r1
   b91fa:	ee00 3a10 	vmov	s0, r3
   b91fe:	4770      	bx	lr
   b9200:	eddf 7a0e 	vldr	s15, [pc, #56]	; b923c <floorf+0x84>
   b9204:	ee70 7a27 	vadd.f32	s15, s0, s15
   b9208:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b920c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b9210:	dd03      	ble.n	b921a <floorf+0x62>
   b9212:	2a00      	cmp	r2, #0
   b9214:	db08      	blt.n	b9228 <floorf+0x70>
   b9216:	ed9f 0a0a 	vldr	s0, [pc, #40]	; b9240 <floorf+0x88>
   b921a:	4770      	bx	lr
   b921c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   b9220:	d3fb      	bcc.n	b921a <floorf+0x62>
   b9222:	ee30 0a00 	vadd.f32	s0, s0, s0
   b9226:	4770      	bx	lr
   b9228:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b922c:	2900      	cmp	r1, #0
   b922e:	bf18      	it	ne
   b9230:	eeb0 0a67 	vmovne.f32	s0, s15
   b9234:	4770      	bx	lr
   b9236:	bf00      	nop
   b9238:	007fffff 	.word	0x007fffff
   b923c:	7149f2ca 	.word	0x7149f2ca
   b9240:	00000000 	.word	0x00000000

000b9244 <sqrt>:
   b9244:	b538      	push	{r3, r4, r5, lr}
   b9246:	ed2d 8b02 	vpush	{d8}
   b924a:	ec55 4b10 	vmov	r4, r5, d0
   b924e:	f000 f833 	bl	b92b8 <__ieee754_sqrt>
   b9252:	4b18      	ldr	r3, [pc, #96]	; (b92b4 <sqrt+0x70>)
   b9254:	eeb0 8a40 	vmov.f32	s16, s0
   b9258:	eef0 8a60 	vmov.f32	s17, s1
   b925c:	f993 3000 	ldrsb.w	r3, [r3]
   b9260:	3301      	adds	r3, #1
   b9262:	d00d      	beq.n	b9280 <sqrt+0x3c>
   b9264:	4622      	mov	r2, r4
   b9266:	462b      	mov	r3, r5
   b9268:	4620      	mov	r0, r4
   b926a:	4629      	mov	r1, r5
   b926c:	f000 fd46 	bl	b9cfc <__aeabi_dcmpun>
   b9270:	b930      	cbnz	r0, b9280 <sqrt+0x3c>
   b9272:	2200      	movs	r2, #0
   b9274:	2300      	movs	r3, #0
   b9276:	4620      	mov	r0, r4
   b9278:	4629      	mov	r1, r5
   b927a:	f000 fd17 	bl	b9cac <__aeabi_dcmplt>
   b927e:	b930      	cbnz	r0, b928e <sqrt+0x4a>
   b9280:	eeb0 0a48 	vmov.f32	s0, s16
   b9284:	eef0 0a68 	vmov.f32	s1, s17
   b9288:	ecbd 8b02 	vpop	{d8}
   b928c:	bd38      	pop	{r3, r4, r5, pc}
   b928e:	f7fd fad7 	bl	b6840 <__errno>
   b9292:	2200      	movs	r2, #0
   b9294:	2300      	movs	r3, #0
   b9296:	2121      	movs	r1, #33	; 0x21
   b9298:	6001      	str	r1, [r0, #0]
   b929a:	4610      	mov	r0, r2
   b929c:	4619      	mov	r1, r3
   b929e:	f000 fbbd 	bl	b9a1c <__aeabi_ddiv>
   b92a2:	ec41 0b18 	vmov	d8, r0, r1
   b92a6:	eeb0 0a48 	vmov.f32	s0, s16
   b92aa:	eef0 0a68 	vmov.f32	s1, s17
   b92ae:	ecbd 8b02 	vpop	{d8}
   b92b2:	bd38      	pop	{r3, r4, r5, pc}
   b92b4:	20035598 	.word	0x20035598

000b92b8 <__ieee754_sqrt>:
   b92b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b92bc:	4a63      	ldr	r2, [pc, #396]	; (b944c <__ieee754_sqrt+0x194>)
   b92be:	ec55 4b10 	vmov	r4, r5, d0
   b92c2:	43aa      	bics	r2, r5
   b92c4:	f000 809f 	beq.w	b9406 <__ieee754_sqrt+0x14e>
   b92c8:	2d00      	cmp	r5, #0
   b92ca:	ee10 ca10 	vmov	ip, s0
   b92ce:	462b      	mov	r3, r5
   b92d0:	dd54      	ble.n	b937c <__ieee754_sqrt+0xc4>
   b92d2:	1529      	asrs	r1, r5, #20
   b92d4:	d063      	beq.n	b939e <__ieee754_sqrt+0xe6>
   b92d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b92da:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   b92de:	07c9      	lsls	r1, r1, #31
   b92e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b92e4:	d404      	bmi.n	b92f0 <__ieee754_sqrt+0x38>
   b92e6:	005b      	lsls	r3, r3, #1
   b92e8:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b92ec:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b92f0:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   b92f4:	2600      	movs	r6, #0
   b92f6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   b92fa:	107f      	asrs	r7, r7, #1
   b92fc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b9300:	f04f 0e16 	mov.w	lr, #22
   b9304:	4634      	mov	r4, r6
   b9306:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   b930a:	18a1      	adds	r1, r4, r2
   b930c:	4299      	cmp	r1, r3
   b930e:	dc02      	bgt.n	b9316 <__ieee754_sqrt+0x5e>
   b9310:	1a5b      	subs	r3, r3, r1
   b9312:	188c      	adds	r4, r1, r2
   b9314:	4416      	add	r6, r2
   b9316:	005b      	lsls	r3, r3, #1
   b9318:	f1be 0e01 	subs.w	lr, lr, #1
   b931c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b9320:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b9324:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b9328:	d1ef      	bne.n	b930a <__ieee754_sqrt+0x52>
   b932a:	4675      	mov	r5, lr
   b932c:	2020      	movs	r0, #32
   b932e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b9332:	e00a      	b.n	b934a <__ieee754_sqrt+0x92>
   b9334:	d044      	beq.n	b93c0 <__ieee754_sqrt+0x108>
   b9336:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   b933a:	3801      	subs	r0, #1
   b933c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   b9340:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b9344:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b9348:	d043      	beq.n	b93d2 <__ieee754_sqrt+0x11a>
   b934a:	42a3      	cmp	r3, r4
   b934c:	eb02 010e 	add.w	r1, r2, lr
   b9350:	ddf0      	ble.n	b9334 <__ieee754_sqrt+0x7c>
   b9352:	2900      	cmp	r1, #0
   b9354:	eb01 0e02 	add.w	lr, r1, r2
   b9358:	db0a      	blt.n	b9370 <__ieee754_sqrt+0xb8>
   b935a:	46a0      	mov	r8, r4
   b935c:	1b1b      	subs	r3, r3, r4
   b935e:	4561      	cmp	r1, ip
   b9360:	bf88      	it	hi
   b9362:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   b9366:	ebac 0c01 	sub.w	ip, ip, r1
   b936a:	4415      	add	r5, r2
   b936c:	4644      	mov	r4, r8
   b936e:	e7e2      	b.n	b9336 <__ieee754_sqrt+0x7e>
   b9370:	f1be 0f00 	cmp.w	lr, #0
   b9374:	dbf1      	blt.n	b935a <__ieee754_sqrt+0xa2>
   b9376:	f104 0801 	add.w	r8, r4, #1
   b937a:	e7ef      	b.n	b935c <__ieee754_sqrt+0xa4>
   b937c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   b9380:	4322      	orrs	r2, r4
   b9382:	d038      	beq.n	b93f6 <__ieee754_sqrt+0x13e>
   b9384:	2d00      	cmp	r5, #0
   b9386:	d14e      	bne.n	b9426 <__ieee754_sqrt+0x16e>
   b9388:	4629      	mov	r1, r5
   b938a:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   b938e:	3915      	subs	r1, #21
   b9390:	4613      	mov	r3, r2
   b9392:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   b9396:	2a00      	cmp	r2, #0
   b9398:	d0f7      	beq.n	b938a <__ieee754_sqrt+0xd2>
   b939a:	02d6      	lsls	r6, r2, #11
   b939c:	d450      	bmi.n	b9440 <__ieee754_sqrt+0x188>
   b939e:	2000      	movs	r0, #0
   b93a0:	005b      	lsls	r3, r3, #1
   b93a2:	02dd      	lsls	r5, r3, #11
   b93a4:	4604      	mov	r4, r0
   b93a6:	f100 0001 	add.w	r0, r0, #1
   b93aa:	d5f9      	bpl.n	b93a0 <__ieee754_sqrt+0xe8>
   b93ac:	461a      	mov	r2, r3
   b93ae:	4663      	mov	r3, ip
   b93b0:	fa0c fc00 	lsl.w	ip, ip, r0
   b93b4:	f1c0 0020 	rsb	r0, r0, #32
   b93b8:	40c3      	lsrs	r3, r0
   b93ba:	1b09      	subs	r1, r1, r4
   b93bc:	4313      	orrs	r3, r2
   b93be:	e78a      	b.n	b92d6 <__ieee754_sqrt+0x1e>
   b93c0:	4561      	cmp	r1, ip
   b93c2:	d8b8      	bhi.n	b9336 <__ieee754_sqrt+0x7e>
   b93c4:	2900      	cmp	r1, #0
   b93c6:	eb01 0e02 	add.w	lr, r1, r2
   b93ca:	dbd1      	blt.n	b9370 <__ieee754_sqrt+0xb8>
   b93cc:	4698      	mov	r8, r3
   b93ce:	2300      	movs	r3, #0
   b93d0:	e7c9      	b.n	b9366 <__ieee754_sqrt+0xae>
   b93d2:	ea53 030c 	orrs.w	r3, r3, ip
   b93d6:	d110      	bne.n	b93fa <__ieee754_sqrt+0x142>
   b93d8:	0868      	lsrs	r0, r5, #1
   b93da:	1071      	asrs	r1, r6, #1
   b93dc:	07f3      	lsls	r3, r6, #31
   b93de:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   b93e2:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   b93e6:	bf48      	it	mi
   b93e8:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   b93ec:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   b93f0:	4602      	mov	r2, r0
   b93f2:	ec43 2b10 	vmov	d0, r2, r3
   b93f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b93fa:	1c6a      	adds	r2, r5, #1
   b93fc:	bf16      	itet	ne
   b93fe:	1c68      	addne	r0, r5, #1
   b9400:	3601      	addeq	r6, #1
   b9402:	0840      	lsrne	r0, r0, #1
   b9404:	e7e9      	b.n	b93da <__ieee754_sqrt+0x122>
   b9406:	ee10 2a10 	vmov	r2, s0
   b940a:	ee10 0a10 	vmov	r0, s0
   b940e:	462b      	mov	r3, r5
   b9410:	4629      	mov	r1, r5
   b9412:	f000 f9d9 	bl	b97c8 <__aeabi_dmul>
   b9416:	4622      	mov	r2, r4
   b9418:	462b      	mov	r3, r5
   b941a:	f000 f81f 	bl	b945c <__adddf3>
   b941e:	ec41 0b10 	vmov	d0, r0, r1
   b9422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9426:	ee10 2a10 	vmov	r2, s0
   b942a:	4620      	mov	r0, r4
   b942c:	4629      	mov	r1, r5
   b942e:	f000 f813 	bl	b9458 <__aeabi_dsub>
   b9432:	4602      	mov	r2, r0
   b9434:	460b      	mov	r3, r1
   b9436:	f000 faf1 	bl	b9a1c <__aeabi_ddiv>
   b943a:	ec41 0b10 	vmov	d0, r0, r1
   b943e:	e7da      	b.n	b93f6 <__ieee754_sqrt+0x13e>
   b9440:	4663      	mov	r3, ip
   b9442:	2020      	movs	r0, #32
   b9444:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b9448:	e7b6      	b.n	b93b8 <__ieee754_sqrt+0x100>
   b944a:	bf00      	nop
   b944c:	7ff00000 	.word	0x7ff00000

000b9450 <__aeabi_drsub>:
   b9450:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b9454:	e002      	b.n	b945c <__adddf3>
   b9456:	bf00      	nop

000b9458 <__aeabi_dsub>:
   b9458:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b945c <__adddf3>:
   b945c:	b530      	push	{r4, r5, lr}
   b945e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b9462:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b9466:	ea94 0f05 	teq	r4, r5
   b946a:	bf08      	it	eq
   b946c:	ea90 0f02 	teqeq	r0, r2
   b9470:	bf1f      	itttt	ne
   b9472:	ea54 0c00 	orrsne.w	ip, r4, r0
   b9476:	ea55 0c02 	orrsne.w	ip, r5, r2
   b947a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b947e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b9482:	f000 80e2 	beq.w	b964a <__adddf3+0x1ee>
   b9486:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b948a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b948e:	bfb8      	it	lt
   b9490:	426d      	neglt	r5, r5
   b9492:	dd0c      	ble.n	b94ae <__adddf3+0x52>
   b9494:	442c      	add	r4, r5
   b9496:	ea80 0202 	eor.w	r2, r0, r2
   b949a:	ea81 0303 	eor.w	r3, r1, r3
   b949e:	ea82 0000 	eor.w	r0, r2, r0
   b94a2:	ea83 0101 	eor.w	r1, r3, r1
   b94a6:	ea80 0202 	eor.w	r2, r0, r2
   b94aa:	ea81 0303 	eor.w	r3, r1, r3
   b94ae:	2d36      	cmp	r5, #54	; 0x36
   b94b0:	bf88      	it	hi
   b94b2:	bd30      	pophi	{r4, r5, pc}
   b94b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b94b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b94bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b94c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b94c4:	d002      	beq.n	b94cc <__adddf3+0x70>
   b94c6:	4240      	negs	r0, r0
   b94c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b94cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b94d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b94d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b94d8:	d002      	beq.n	b94e0 <__adddf3+0x84>
   b94da:	4252      	negs	r2, r2
   b94dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b94e0:	ea94 0f05 	teq	r4, r5
   b94e4:	f000 80a7 	beq.w	b9636 <__adddf3+0x1da>
   b94e8:	f1a4 0401 	sub.w	r4, r4, #1
   b94ec:	f1d5 0e20 	rsbs	lr, r5, #32
   b94f0:	db0d      	blt.n	b950e <__adddf3+0xb2>
   b94f2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b94f6:	fa22 f205 	lsr.w	r2, r2, r5
   b94fa:	1880      	adds	r0, r0, r2
   b94fc:	f141 0100 	adc.w	r1, r1, #0
   b9500:	fa03 f20e 	lsl.w	r2, r3, lr
   b9504:	1880      	adds	r0, r0, r2
   b9506:	fa43 f305 	asr.w	r3, r3, r5
   b950a:	4159      	adcs	r1, r3
   b950c:	e00e      	b.n	b952c <__adddf3+0xd0>
   b950e:	f1a5 0520 	sub.w	r5, r5, #32
   b9512:	f10e 0e20 	add.w	lr, lr, #32
   b9516:	2a01      	cmp	r2, #1
   b9518:	fa03 fc0e 	lsl.w	ip, r3, lr
   b951c:	bf28      	it	cs
   b951e:	f04c 0c02 	orrcs.w	ip, ip, #2
   b9522:	fa43 f305 	asr.w	r3, r3, r5
   b9526:	18c0      	adds	r0, r0, r3
   b9528:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b952c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9530:	d507      	bpl.n	b9542 <__adddf3+0xe6>
   b9532:	f04f 0e00 	mov.w	lr, #0
   b9536:	f1dc 0c00 	rsbs	ip, ip, #0
   b953a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b953e:	eb6e 0101 	sbc.w	r1, lr, r1
   b9542:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b9546:	d31b      	bcc.n	b9580 <__adddf3+0x124>
   b9548:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b954c:	d30c      	bcc.n	b9568 <__adddf3+0x10c>
   b954e:	0849      	lsrs	r1, r1, #1
   b9550:	ea5f 0030 	movs.w	r0, r0, rrx
   b9554:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b9558:	f104 0401 	add.w	r4, r4, #1
   b955c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b9560:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b9564:	f080 809a 	bcs.w	b969c <__adddf3+0x240>
   b9568:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b956c:	bf08      	it	eq
   b956e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b9572:	f150 0000 	adcs.w	r0, r0, #0
   b9576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b957a:	ea41 0105 	orr.w	r1, r1, r5
   b957e:	bd30      	pop	{r4, r5, pc}
   b9580:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b9584:	4140      	adcs	r0, r0
   b9586:	eb41 0101 	adc.w	r1, r1, r1
   b958a:	3c01      	subs	r4, #1
   b958c:	bf28      	it	cs
   b958e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b9592:	d2e9      	bcs.n	b9568 <__adddf3+0x10c>
   b9594:	f091 0f00 	teq	r1, #0
   b9598:	bf04      	itt	eq
   b959a:	4601      	moveq	r1, r0
   b959c:	2000      	moveq	r0, #0
   b959e:	fab1 f381 	clz	r3, r1
   b95a2:	bf08      	it	eq
   b95a4:	3320      	addeq	r3, #32
   b95a6:	f1a3 030b 	sub.w	r3, r3, #11
   b95aa:	f1b3 0220 	subs.w	r2, r3, #32
   b95ae:	da0c      	bge.n	b95ca <__adddf3+0x16e>
   b95b0:	320c      	adds	r2, #12
   b95b2:	dd08      	ble.n	b95c6 <__adddf3+0x16a>
   b95b4:	f102 0c14 	add.w	ip, r2, #20
   b95b8:	f1c2 020c 	rsb	r2, r2, #12
   b95bc:	fa01 f00c 	lsl.w	r0, r1, ip
   b95c0:	fa21 f102 	lsr.w	r1, r1, r2
   b95c4:	e00c      	b.n	b95e0 <__adddf3+0x184>
   b95c6:	f102 0214 	add.w	r2, r2, #20
   b95ca:	bfd8      	it	le
   b95cc:	f1c2 0c20 	rsble	ip, r2, #32
   b95d0:	fa01 f102 	lsl.w	r1, r1, r2
   b95d4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b95d8:	bfdc      	itt	le
   b95da:	ea41 010c 	orrle.w	r1, r1, ip
   b95de:	4090      	lslle	r0, r2
   b95e0:	1ae4      	subs	r4, r4, r3
   b95e2:	bfa2      	ittt	ge
   b95e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b95e8:	4329      	orrge	r1, r5
   b95ea:	bd30      	popge	{r4, r5, pc}
   b95ec:	ea6f 0404 	mvn.w	r4, r4
   b95f0:	3c1f      	subs	r4, #31
   b95f2:	da1c      	bge.n	b962e <__adddf3+0x1d2>
   b95f4:	340c      	adds	r4, #12
   b95f6:	dc0e      	bgt.n	b9616 <__adddf3+0x1ba>
   b95f8:	f104 0414 	add.w	r4, r4, #20
   b95fc:	f1c4 0220 	rsb	r2, r4, #32
   b9600:	fa20 f004 	lsr.w	r0, r0, r4
   b9604:	fa01 f302 	lsl.w	r3, r1, r2
   b9608:	ea40 0003 	orr.w	r0, r0, r3
   b960c:	fa21 f304 	lsr.w	r3, r1, r4
   b9610:	ea45 0103 	orr.w	r1, r5, r3
   b9614:	bd30      	pop	{r4, r5, pc}
   b9616:	f1c4 040c 	rsb	r4, r4, #12
   b961a:	f1c4 0220 	rsb	r2, r4, #32
   b961e:	fa20 f002 	lsr.w	r0, r0, r2
   b9622:	fa01 f304 	lsl.w	r3, r1, r4
   b9626:	ea40 0003 	orr.w	r0, r0, r3
   b962a:	4629      	mov	r1, r5
   b962c:	bd30      	pop	{r4, r5, pc}
   b962e:	fa21 f004 	lsr.w	r0, r1, r4
   b9632:	4629      	mov	r1, r5
   b9634:	bd30      	pop	{r4, r5, pc}
   b9636:	f094 0f00 	teq	r4, #0
   b963a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b963e:	bf06      	itte	eq
   b9640:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b9644:	3401      	addeq	r4, #1
   b9646:	3d01      	subne	r5, #1
   b9648:	e74e      	b.n	b94e8 <__adddf3+0x8c>
   b964a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b964e:	bf18      	it	ne
   b9650:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b9654:	d029      	beq.n	b96aa <__adddf3+0x24e>
   b9656:	ea94 0f05 	teq	r4, r5
   b965a:	bf08      	it	eq
   b965c:	ea90 0f02 	teqeq	r0, r2
   b9660:	d005      	beq.n	b966e <__adddf3+0x212>
   b9662:	ea54 0c00 	orrs.w	ip, r4, r0
   b9666:	bf04      	itt	eq
   b9668:	4619      	moveq	r1, r3
   b966a:	4610      	moveq	r0, r2
   b966c:	bd30      	pop	{r4, r5, pc}
   b966e:	ea91 0f03 	teq	r1, r3
   b9672:	bf1e      	ittt	ne
   b9674:	2100      	movne	r1, #0
   b9676:	2000      	movne	r0, #0
   b9678:	bd30      	popne	{r4, r5, pc}
   b967a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b967e:	d105      	bne.n	b968c <__adddf3+0x230>
   b9680:	0040      	lsls	r0, r0, #1
   b9682:	4149      	adcs	r1, r1
   b9684:	bf28      	it	cs
   b9686:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b968a:	bd30      	pop	{r4, r5, pc}
   b968c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b9690:	bf3c      	itt	cc
   b9692:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b9696:	bd30      	popcc	{r4, r5, pc}
   b9698:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b969c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b96a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b96a4:	f04f 0000 	mov.w	r0, #0
   b96a8:	bd30      	pop	{r4, r5, pc}
   b96aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b96ae:	bf1a      	itte	ne
   b96b0:	4619      	movne	r1, r3
   b96b2:	4610      	movne	r0, r2
   b96b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b96b8:	bf1c      	itt	ne
   b96ba:	460b      	movne	r3, r1
   b96bc:	4602      	movne	r2, r0
   b96be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b96c2:	bf06      	itte	eq
   b96c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b96c8:	ea91 0f03 	teqeq	r1, r3
   b96cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b96d0:	bd30      	pop	{r4, r5, pc}
   b96d2:	bf00      	nop

000b96d4 <__aeabi_ui2d>:
   b96d4:	f090 0f00 	teq	r0, #0
   b96d8:	bf04      	itt	eq
   b96da:	2100      	moveq	r1, #0
   b96dc:	4770      	bxeq	lr
   b96de:	b530      	push	{r4, r5, lr}
   b96e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b96e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b96e8:	f04f 0500 	mov.w	r5, #0
   b96ec:	f04f 0100 	mov.w	r1, #0
   b96f0:	e750      	b.n	b9594 <__adddf3+0x138>
   b96f2:	bf00      	nop

000b96f4 <__aeabi_i2d>:
   b96f4:	f090 0f00 	teq	r0, #0
   b96f8:	bf04      	itt	eq
   b96fa:	2100      	moveq	r1, #0
   b96fc:	4770      	bxeq	lr
   b96fe:	b530      	push	{r4, r5, lr}
   b9700:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9704:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9708:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b970c:	bf48      	it	mi
   b970e:	4240      	negmi	r0, r0
   b9710:	f04f 0100 	mov.w	r1, #0
   b9714:	e73e      	b.n	b9594 <__adddf3+0x138>
   b9716:	bf00      	nop

000b9718 <__aeabi_f2d>:
   b9718:	0042      	lsls	r2, r0, #1
   b971a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b971e:	ea4f 0131 	mov.w	r1, r1, rrx
   b9722:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b9726:	bf1f      	itttt	ne
   b9728:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b972c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b9730:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b9734:	4770      	bxne	lr
   b9736:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b973a:	bf08      	it	eq
   b973c:	4770      	bxeq	lr
   b973e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b9742:	bf04      	itt	eq
   b9744:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b9748:	4770      	bxeq	lr
   b974a:	b530      	push	{r4, r5, lr}
   b974c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b9750:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9754:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9758:	e71c      	b.n	b9594 <__adddf3+0x138>
   b975a:	bf00      	nop

000b975c <__aeabi_ul2d>:
   b975c:	ea50 0201 	orrs.w	r2, r0, r1
   b9760:	bf08      	it	eq
   b9762:	4770      	bxeq	lr
   b9764:	b530      	push	{r4, r5, lr}
   b9766:	f04f 0500 	mov.w	r5, #0
   b976a:	e00a      	b.n	b9782 <__aeabi_l2d+0x16>

000b976c <__aeabi_l2d>:
   b976c:	ea50 0201 	orrs.w	r2, r0, r1
   b9770:	bf08      	it	eq
   b9772:	4770      	bxeq	lr
   b9774:	b530      	push	{r4, r5, lr}
   b9776:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b977a:	d502      	bpl.n	b9782 <__aeabi_l2d+0x16>
   b977c:	4240      	negs	r0, r0
   b977e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9782:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9786:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b978a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b978e:	f43f aed8 	beq.w	b9542 <__adddf3+0xe6>
   b9792:	f04f 0203 	mov.w	r2, #3
   b9796:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b979a:	bf18      	it	ne
   b979c:	3203      	addne	r2, #3
   b979e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b97a2:	bf18      	it	ne
   b97a4:	3203      	addne	r2, #3
   b97a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b97aa:	f1c2 0320 	rsb	r3, r2, #32
   b97ae:	fa00 fc03 	lsl.w	ip, r0, r3
   b97b2:	fa20 f002 	lsr.w	r0, r0, r2
   b97b6:	fa01 fe03 	lsl.w	lr, r1, r3
   b97ba:	ea40 000e 	orr.w	r0, r0, lr
   b97be:	fa21 f102 	lsr.w	r1, r1, r2
   b97c2:	4414      	add	r4, r2
   b97c4:	e6bd      	b.n	b9542 <__adddf3+0xe6>
   b97c6:	bf00      	nop

000b97c8 <__aeabi_dmul>:
   b97c8:	b570      	push	{r4, r5, r6, lr}
   b97ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b97ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b97d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b97d6:	bf1d      	ittte	ne
   b97d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b97dc:	ea94 0f0c 	teqne	r4, ip
   b97e0:	ea95 0f0c 	teqne	r5, ip
   b97e4:	f000 f8de 	bleq	b99a4 <__aeabi_dmul+0x1dc>
   b97e8:	442c      	add	r4, r5
   b97ea:	ea81 0603 	eor.w	r6, r1, r3
   b97ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b97f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b97f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b97fa:	bf18      	it	ne
   b97fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b9800:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9804:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b9808:	d038      	beq.n	b987c <__aeabi_dmul+0xb4>
   b980a:	fba0 ce02 	umull	ip, lr, r0, r2
   b980e:	f04f 0500 	mov.w	r5, #0
   b9812:	fbe1 e502 	umlal	lr, r5, r1, r2
   b9816:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b981a:	fbe0 e503 	umlal	lr, r5, r0, r3
   b981e:	f04f 0600 	mov.w	r6, #0
   b9822:	fbe1 5603 	umlal	r5, r6, r1, r3
   b9826:	f09c 0f00 	teq	ip, #0
   b982a:	bf18      	it	ne
   b982c:	f04e 0e01 	orrne.w	lr, lr, #1
   b9830:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b9834:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b9838:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b983c:	d204      	bcs.n	b9848 <__aeabi_dmul+0x80>
   b983e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b9842:	416d      	adcs	r5, r5
   b9844:	eb46 0606 	adc.w	r6, r6, r6
   b9848:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b984c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b9850:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b9854:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b9858:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b985c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b9860:	bf88      	it	hi
   b9862:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b9866:	d81e      	bhi.n	b98a6 <__aeabi_dmul+0xde>
   b9868:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b986c:	bf08      	it	eq
   b986e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b9872:	f150 0000 	adcs.w	r0, r0, #0
   b9876:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b987a:	bd70      	pop	{r4, r5, r6, pc}
   b987c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b9880:	ea46 0101 	orr.w	r1, r6, r1
   b9884:	ea40 0002 	orr.w	r0, r0, r2
   b9888:	ea81 0103 	eor.w	r1, r1, r3
   b988c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b9890:	bfc2      	ittt	gt
   b9892:	ebd4 050c 	rsbsgt	r5, r4, ip
   b9896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b989a:	bd70      	popgt	{r4, r5, r6, pc}
   b989c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b98a0:	f04f 0e00 	mov.w	lr, #0
   b98a4:	3c01      	subs	r4, #1
   b98a6:	f300 80ab 	bgt.w	b9a00 <__aeabi_dmul+0x238>
   b98aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b98ae:	bfde      	ittt	le
   b98b0:	2000      	movle	r0, #0
   b98b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b98b6:	bd70      	pople	{r4, r5, r6, pc}
   b98b8:	f1c4 0400 	rsb	r4, r4, #0
   b98bc:	3c20      	subs	r4, #32
   b98be:	da35      	bge.n	b992c <__aeabi_dmul+0x164>
   b98c0:	340c      	adds	r4, #12
   b98c2:	dc1b      	bgt.n	b98fc <__aeabi_dmul+0x134>
   b98c4:	f104 0414 	add.w	r4, r4, #20
   b98c8:	f1c4 0520 	rsb	r5, r4, #32
   b98cc:	fa00 f305 	lsl.w	r3, r0, r5
   b98d0:	fa20 f004 	lsr.w	r0, r0, r4
   b98d4:	fa01 f205 	lsl.w	r2, r1, r5
   b98d8:	ea40 0002 	orr.w	r0, r0, r2
   b98dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b98e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b98e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b98e8:	fa21 f604 	lsr.w	r6, r1, r4
   b98ec:	eb42 0106 	adc.w	r1, r2, r6
   b98f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b98f4:	bf08      	it	eq
   b98f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b98fa:	bd70      	pop	{r4, r5, r6, pc}
   b98fc:	f1c4 040c 	rsb	r4, r4, #12
   b9900:	f1c4 0520 	rsb	r5, r4, #32
   b9904:	fa00 f304 	lsl.w	r3, r0, r4
   b9908:	fa20 f005 	lsr.w	r0, r0, r5
   b990c:	fa01 f204 	lsl.w	r2, r1, r4
   b9910:	ea40 0002 	orr.w	r0, r0, r2
   b9914:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9918:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b991c:	f141 0100 	adc.w	r1, r1, #0
   b9920:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9924:	bf08      	it	eq
   b9926:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b992a:	bd70      	pop	{r4, r5, r6, pc}
   b992c:	f1c4 0520 	rsb	r5, r4, #32
   b9930:	fa00 f205 	lsl.w	r2, r0, r5
   b9934:	ea4e 0e02 	orr.w	lr, lr, r2
   b9938:	fa20 f304 	lsr.w	r3, r0, r4
   b993c:	fa01 f205 	lsl.w	r2, r1, r5
   b9940:	ea43 0302 	orr.w	r3, r3, r2
   b9944:	fa21 f004 	lsr.w	r0, r1, r4
   b9948:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b994c:	fa21 f204 	lsr.w	r2, r1, r4
   b9950:	ea20 0002 	bic.w	r0, r0, r2
   b9954:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b9958:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b995c:	bf08      	it	eq
   b995e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9962:	bd70      	pop	{r4, r5, r6, pc}
   b9964:	f094 0f00 	teq	r4, #0
   b9968:	d10f      	bne.n	b998a <__aeabi_dmul+0x1c2>
   b996a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b996e:	0040      	lsls	r0, r0, #1
   b9970:	eb41 0101 	adc.w	r1, r1, r1
   b9974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9978:	bf08      	it	eq
   b997a:	3c01      	subeq	r4, #1
   b997c:	d0f7      	beq.n	b996e <__aeabi_dmul+0x1a6>
   b997e:	ea41 0106 	orr.w	r1, r1, r6
   b9982:	f095 0f00 	teq	r5, #0
   b9986:	bf18      	it	ne
   b9988:	4770      	bxne	lr
   b998a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b998e:	0052      	lsls	r2, r2, #1
   b9990:	eb43 0303 	adc.w	r3, r3, r3
   b9994:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b9998:	bf08      	it	eq
   b999a:	3d01      	subeq	r5, #1
   b999c:	d0f7      	beq.n	b998e <__aeabi_dmul+0x1c6>
   b999e:	ea43 0306 	orr.w	r3, r3, r6
   b99a2:	4770      	bx	lr
   b99a4:	ea94 0f0c 	teq	r4, ip
   b99a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b99ac:	bf18      	it	ne
   b99ae:	ea95 0f0c 	teqne	r5, ip
   b99b2:	d00c      	beq.n	b99ce <__aeabi_dmul+0x206>
   b99b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b99b8:	bf18      	it	ne
   b99ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b99be:	d1d1      	bne.n	b9964 <__aeabi_dmul+0x19c>
   b99c0:	ea81 0103 	eor.w	r1, r1, r3
   b99c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b99c8:	f04f 0000 	mov.w	r0, #0
   b99cc:	bd70      	pop	{r4, r5, r6, pc}
   b99ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b99d2:	bf06      	itte	eq
   b99d4:	4610      	moveq	r0, r2
   b99d6:	4619      	moveq	r1, r3
   b99d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b99dc:	d019      	beq.n	b9a12 <__aeabi_dmul+0x24a>
   b99de:	ea94 0f0c 	teq	r4, ip
   b99e2:	d102      	bne.n	b99ea <__aeabi_dmul+0x222>
   b99e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b99e8:	d113      	bne.n	b9a12 <__aeabi_dmul+0x24a>
   b99ea:	ea95 0f0c 	teq	r5, ip
   b99ee:	d105      	bne.n	b99fc <__aeabi_dmul+0x234>
   b99f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b99f4:	bf1c      	itt	ne
   b99f6:	4610      	movne	r0, r2
   b99f8:	4619      	movne	r1, r3
   b99fa:	d10a      	bne.n	b9a12 <__aeabi_dmul+0x24a>
   b99fc:	ea81 0103 	eor.w	r1, r1, r3
   b9a00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9a04:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b9a08:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9a0c:	f04f 0000 	mov.w	r0, #0
   b9a10:	bd70      	pop	{r4, r5, r6, pc}
   b9a12:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b9a16:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b9a1a:	bd70      	pop	{r4, r5, r6, pc}

000b9a1c <__aeabi_ddiv>:
   b9a1c:	b570      	push	{r4, r5, r6, lr}
   b9a1e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b9a22:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b9a26:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b9a2a:	bf1d      	ittte	ne
   b9a2c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b9a30:	ea94 0f0c 	teqne	r4, ip
   b9a34:	ea95 0f0c 	teqne	r5, ip
   b9a38:	f000 f8a7 	bleq	b9b8a <__aeabi_ddiv+0x16e>
   b9a3c:	eba4 0405 	sub.w	r4, r4, r5
   b9a40:	ea81 0e03 	eor.w	lr, r1, r3
   b9a44:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b9a48:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9a4c:	f000 8088 	beq.w	b9b60 <__aeabi_ddiv+0x144>
   b9a50:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b9a54:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b9a58:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b9a5c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b9a60:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b9a64:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b9a68:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b9a6c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b9a70:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b9a74:	429d      	cmp	r5, r3
   b9a76:	bf08      	it	eq
   b9a78:	4296      	cmpeq	r6, r2
   b9a7a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b9a7e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b9a82:	d202      	bcs.n	b9a8a <__aeabi_ddiv+0x6e>
   b9a84:	085b      	lsrs	r3, r3, #1
   b9a86:	ea4f 0232 	mov.w	r2, r2, rrx
   b9a8a:	1ab6      	subs	r6, r6, r2
   b9a8c:	eb65 0503 	sbc.w	r5, r5, r3
   b9a90:	085b      	lsrs	r3, r3, #1
   b9a92:	ea4f 0232 	mov.w	r2, r2, rrx
   b9a96:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b9a9a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b9a9e:	ebb6 0e02 	subs.w	lr, r6, r2
   b9aa2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9aa6:	bf22      	ittt	cs
   b9aa8:	1ab6      	subcs	r6, r6, r2
   b9aaa:	4675      	movcs	r5, lr
   b9aac:	ea40 000c 	orrcs.w	r0, r0, ip
   b9ab0:	085b      	lsrs	r3, r3, #1
   b9ab2:	ea4f 0232 	mov.w	r2, r2, rrx
   b9ab6:	ebb6 0e02 	subs.w	lr, r6, r2
   b9aba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9abe:	bf22      	ittt	cs
   b9ac0:	1ab6      	subcs	r6, r6, r2
   b9ac2:	4675      	movcs	r5, lr
   b9ac4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b9ac8:	085b      	lsrs	r3, r3, #1
   b9aca:	ea4f 0232 	mov.w	r2, r2, rrx
   b9ace:	ebb6 0e02 	subs.w	lr, r6, r2
   b9ad2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9ad6:	bf22      	ittt	cs
   b9ad8:	1ab6      	subcs	r6, r6, r2
   b9ada:	4675      	movcs	r5, lr
   b9adc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b9ae0:	085b      	lsrs	r3, r3, #1
   b9ae2:	ea4f 0232 	mov.w	r2, r2, rrx
   b9ae6:	ebb6 0e02 	subs.w	lr, r6, r2
   b9aea:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9aee:	bf22      	ittt	cs
   b9af0:	1ab6      	subcs	r6, r6, r2
   b9af2:	4675      	movcs	r5, lr
   b9af4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b9af8:	ea55 0e06 	orrs.w	lr, r5, r6
   b9afc:	d018      	beq.n	b9b30 <__aeabi_ddiv+0x114>
   b9afe:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b9b02:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b9b06:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b9b0a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b9b0e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b9b12:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b9b16:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b9b1a:	d1c0      	bne.n	b9a9e <__aeabi_ddiv+0x82>
   b9b1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9b20:	d10b      	bne.n	b9b3a <__aeabi_ddiv+0x11e>
   b9b22:	ea41 0100 	orr.w	r1, r1, r0
   b9b26:	f04f 0000 	mov.w	r0, #0
   b9b2a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b9b2e:	e7b6      	b.n	b9a9e <__aeabi_ddiv+0x82>
   b9b30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9b34:	bf04      	itt	eq
   b9b36:	4301      	orreq	r1, r0
   b9b38:	2000      	moveq	r0, #0
   b9b3a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b9b3e:	bf88      	it	hi
   b9b40:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b9b44:	f63f aeaf 	bhi.w	b98a6 <__aeabi_dmul+0xde>
   b9b48:	ebb5 0c03 	subs.w	ip, r5, r3
   b9b4c:	bf04      	itt	eq
   b9b4e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b9b52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b9b56:	f150 0000 	adcs.w	r0, r0, #0
   b9b5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9b5e:	bd70      	pop	{r4, r5, r6, pc}
   b9b60:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b9b64:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b9b68:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b9b6c:	bfc2      	ittt	gt
   b9b6e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b9b72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b9b76:	bd70      	popgt	{r4, r5, r6, pc}
   b9b78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9b7c:	f04f 0e00 	mov.w	lr, #0
   b9b80:	3c01      	subs	r4, #1
   b9b82:	e690      	b.n	b98a6 <__aeabi_dmul+0xde>
   b9b84:	ea45 0e06 	orr.w	lr, r5, r6
   b9b88:	e68d      	b.n	b98a6 <__aeabi_dmul+0xde>
   b9b8a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b9b8e:	ea94 0f0c 	teq	r4, ip
   b9b92:	bf08      	it	eq
   b9b94:	ea95 0f0c 	teqeq	r5, ip
   b9b98:	f43f af3b 	beq.w	b9a12 <__aeabi_dmul+0x24a>
   b9b9c:	ea94 0f0c 	teq	r4, ip
   b9ba0:	d10a      	bne.n	b9bb8 <__aeabi_ddiv+0x19c>
   b9ba2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b9ba6:	f47f af34 	bne.w	b9a12 <__aeabi_dmul+0x24a>
   b9baa:	ea95 0f0c 	teq	r5, ip
   b9bae:	f47f af25 	bne.w	b99fc <__aeabi_dmul+0x234>
   b9bb2:	4610      	mov	r0, r2
   b9bb4:	4619      	mov	r1, r3
   b9bb6:	e72c      	b.n	b9a12 <__aeabi_dmul+0x24a>
   b9bb8:	ea95 0f0c 	teq	r5, ip
   b9bbc:	d106      	bne.n	b9bcc <__aeabi_ddiv+0x1b0>
   b9bbe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b9bc2:	f43f aefd 	beq.w	b99c0 <__aeabi_dmul+0x1f8>
   b9bc6:	4610      	mov	r0, r2
   b9bc8:	4619      	mov	r1, r3
   b9bca:	e722      	b.n	b9a12 <__aeabi_dmul+0x24a>
   b9bcc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9bd0:	bf18      	it	ne
   b9bd2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b9bd6:	f47f aec5 	bne.w	b9964 <__aeabi_dmul+0x19c>
   b9bda:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b9bde:	f47f af0d 	bne.w	b99fc <__aeabi_dmul+0x234>
   b9be2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b9be6:	f47f aeeb 	bne.w	b99c0 <__aeabi_dmul+0x1f8>
   b9bea:	e712      	b.n	b9a12 <__aeabi_dmul+0x24a>

000b9bec <__gedf2>:
   b9bec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b9bf0:	e006      	b.n	b9c00 <__cmpdf2+0x4>
   b9bf2:	bf00      	nop

000b9bf4 <__ledf2>:
   b9bf4:	f04f 0c01 	mov.w	ip, #1
   b9bf8:	e002      	b.n	b9c00 <__cmpdf2+0x4>
   b9bfa:	bf00      	nop

000b9bfc <__cmpdf2>:
   b9bfc:	f04f 0c01 	mov.w	ip, #1
   b9c00:	f84d cd04 	str.w	ip, [sp, #-4]!
   b9c04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b9c08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9c0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b9c10:	bf18      	it	ne
   b9c12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b9c16:	d01b      	beq.n	b9c50 <__cmpdf2+0x54>
   b9c18:	b001      	add	sp, #4
   b9c1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b9c1e:	bf0c      	ite	eq
   b9c20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b9c24:	ea91 0f03 	teqne	r1, r3
   b9c28:	bf02      	ittt	eq
   b9c2a:	ea90 0f02 	teqeq	r0, r2
   b9c2e:	2000      	moveq	r0, #0
   b9c30:	4770      	bxeq	lr
   b9c32:	f110 0f00 	cmn.w	r0, #0
   b9c36:	ea91 0f03 	teq	r1, r3
   b9c3a:	bf58      	it	pl
   b9c3c:	4299      	cmppl	r1, r3
   b9c3e:	bf08      	it	eq
   b9c40:	4290      	cmpeq	r0, r2
   b9c42:	bf2c      	ite	cs
   b9c44:	17d8      	asrcs	r0, r3, #31
   b9c46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b9c4a:	f040 0001 	orr.w	r0, r0, #1
   b9c4e:	4770      	bx	lr
   b9c50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b9c54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9c58:	d102      	bne.n	b9c60 <__cmpdf2+0x64>
   b9c5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b9c5e:	d107      	bne.n	b9c70 <__cmpdf2+0x74>
   b9c60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b9c64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9c68:	d1d6      	bne.n	b9c18 <__cmpdf2+0x1c>
   b9c6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b9c6e:	d0d3      	beq.n	b9c18 <__cmpdf2+0x1c>
   b9c70:	f85d 0b04 	ldr.w	r0, [sp], #4
   b9c74:	4770      	bx	lr
   b9c76:	bf00      	nop

000b9c78 <__aeabi_cdrcmple>:
   b9c78:	4684      	mov	ip, r0
   b9c7a:	4610      	mov	r0, r2
   b9c7c:	4662      	mov	r2, ip
   b9c7e:	468c      	mov	ip, r1
   b9c80:	4619      	mov	r1, r3
   b9c82:	4663      	mov	r3, ip
   b9c84:	e000      	b.n	b9c88 <__aeabi_cdcmpeq>
   b9c86:	bf00      	nop

000b9c88 <__aeabi_cdcmpeq>:
   b9c88:	b501      	push	{r0, lr}
   b9c8a:	f7ff ffb7 	bl	b9bfc <__cmpdf2>
   b9c8e:	2800      	cmp	r0, #0
   b9c90:	bf48      	it	mi
   b9c92:	f110 0f00 	cmnmi.w	r0, #0
   b9c96:	bd01      	pop	{r0, pc}

000b9c98 <__aeabi_dcmpeq>:
   b9c98:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9c9c:	f7ff fff4 	bl	b9c88 <__aeabi_cdcmpeq>
   b9ca0:	bf0c      	ite	eq
   b9ca2:	2001      	moveq	r0, #1
   b9ca4:	2000      	movne	r0, #0
   b9ca6:	f85d fb08 	ldr.w	pc, [sp], #8
   b9caa:	bf00      	nop

000b9cac <__aeabi_dcmplt>:
   b9cac:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9cb0:	f7ff ffea 	bl	b9c88 <__aeabi_cdcmpeq>
   b9cb4:	bf34      	ite	cc
   b9cb6:	2001      	movcc	r0, #1
   b9cb8:	2000      	movcs	r0, #0
   b9cba:	f85d fb08 	ldr.w	pc, [sp], #8
   b9cbe:	bf00      	nop

000b9cc0 <__aeabi_dcmple>:
   b9cc0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9cc4:	f7ff ffe0 	bl	b9c88 <__aeabi_cdcmpeq>
   b9cc8:	bf94      	ite	ls
   b9cca:	2001      	movls	r0, #1
   b9ccc:	2000      	movhi	r0, #0
   b9cce:	f85d fb08 	ldr.w	pc, [sp], #8
   b9cd2:	bf00      	nop

000b9cd4 <__aeabi_dcmpge>:
   b9cd4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9cd8:	f7ff ffce 	bl	b9c78 <__aeabi_cdrcmple>
   b9cdc:	bf94      	ite	ls
   b9cde:	2001      	movls	r0, #1
   b9ce0:	2000      	movhi	r0, #0
   b9ce2:	f85d fb08 	ldr.w	pc, [sp], #8
   b9ce6:	bf00      	nop

000b9ce8 <__aeabi_dcmpgt>:
   b9ce8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9cec:	f7ff ffc4 	bl	b9c78 <__aeabi_cdrcmple>
   b9cf0:	bf34      	ite	cc
   b9cf2:	2001      	movcc	r0, #1
   b9cf4:	2000      	movcs	r0, #0
   b9cf6:	f85d fb08 	ldr.w	pc, [sp], #8
   b9cfa:	bf00      	nop

000b9cfc <__aeabi_dcmpun>:
   b9cfc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b9d00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9d04:	d102      	bne.n	b9d0c <__aeabi_dcmpun+0x10>
   b9d06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b9d0a:	d10a      	bne.n	b9d22 <__aeabi_dcmpun+0x26>
   b9d0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b9d10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9d14:	d102      	bne.n	b9d1c <__aeabi_dcmpun+0x20>
   b9d16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b9d1a:	d102      	bne.n	b9d22 <__aeabi_dcmpun+0x26>
   b9d1c:	f04f 0000 	mov.w	r0, #0
   b9d20:	4770      	bx	lr
   b9d22:	f04f 0001 	mov.w	r0, #1
   b9d26:	4770      	bx	lr

000b9d28 <__aeabi_d2uiz>:
   b9d28:	004a      	lsls	r2, r1, #1
   b9d2a:	d211      	bcs.n	b9d50 <__aeabi_d2uiz+0x28>
   b9d2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b9d30:	d211      	bcs.n	b9d56 <__aeabi_d2uiz+0x2e>
   b9d32:	d50d      	bpl.n	b9d50 <__aeabi_d2uiz+0x28>
   b9d34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b9d38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b9d3c:	d40e      	bmi.n	b9d5c <__aeabi_d2uiz+0x34>
   b9d3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b9d42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b9d46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b9d4a:	fa23 f002 	lsr.w	r0, r3, r2
   b9d4e:	4770      	bx	lr
   b9d50:	f04f 0000 	mov.w	r0, #0
   b9d54:	4770      	bx	lr
   b9d56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b9d5a:	d102      	bne.n	b9d62 <__aeabi_d2uiz+0x3a>
   b9d5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9d60:	4770      	bx	lr
   b9d62:	f04f 0000 	mov.w	r0, #0
   b9d66:	4770      	bx	lr

000b9d68 <__aeabi_d2f>:
   b9d68:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b9d6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b9d70:	bf24      	itt	cs
   b9d72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b9d76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b9d7a:	d90d      	bls.n	b9d98 <__aeabi_d2f+0x30>
   b9d7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b9d80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b9d84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b9d88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b9d8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b9d90:	bf08      	it	eq
   b9d92:	f020 0001 	biceq.w	r0, r0, #1
   b9d96:	4770      	bx	lr
   b9d98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b9d9c:	d121      	bne.n	b9de2 <__aeabi_d2f+0x7a>
   b9d9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b9da2:	bfbc      	itt	lt
   b9da4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b9da8:	4770      	bxlt	lr
   b9daa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9dae:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b9db2:	f1c2 0218 	rsb	r2, r2, #24
   b9db6:	f1c2 0c20 	rsb	ip, r2, #32
   b9dba:	fa10 f30c 	lsls.w	r3, r0, ip
   b9dbe:	fa20 f002 	lsr.w	r0, r0, r2
   b9dc2:	bf18      	it	ne
   b9dc4:	f040 0001 	orrne.w	r0, r0, #1
   b9dc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b9dcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b9dd0:	fa03 fc0c 	lsl.w	ip, r3, ip
   b9dd4:	ea40 000c 	orr.w	r0, r0, ip
   b9dd8:	fa23 f302 	lsr.w	r3, r3, r2
   b9ddc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b9de0:	e7cc      	b.n	b9d7c <__aeabi_d2f+0x14>
   b9de2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b9de6:	d107      	bne.n	b9df8 <__aeabi_d2f+0x90>
   b9de8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b9dec:	bf1e      	ittt	ne
   b9dee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b9df2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b9df6:	4770      	bxne	lr
   b9df8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b9dfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b9e00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b9e04:	4770      	bx	lr
   b9e06:	bf00      	nop

000b9e08 <__aeabi_d2ulz>:
   b9e08:	b5d0      	push	{r4, r6, r7, lr}
   b9e0a:	4b0c      	ldr	r3, [pc, #48]	; (b9e3c <__aeabi_d2ulz+0x34>)
   b9e0c:	2200      	movs	r2, #0
   b9e0e:	4606      	mov	r6, r0
   b9e10:	460f      	mov	r7, r1
   b9e12:	f7ff fcd9 	bl	b97c8 <__aeabi_dmul>
   b9e16:	f7ff ff87 	bl	b9d28 <__aeabi_d2uiz>
   b9e1a:	4604      	mov	r4, r0
   b9e1c:	f7ff fc5a 	bl	b96d4 <__aeabi_ui2d>
   b9e20:	4b07      	ldr	r3, [pc, #28]	; (b9e40 <__aeabi_d2ulz+0x38>)
   b9e22:	2200      	movs	r2, #0
   b9e24:	f7ff fcd0 	bl	b97c8 <__aeabi_dmul>
   b9e28:	4602      	mov	r2, r0
   b9e2a:	460b      	mov	r3, r1
   b9e2c:	4630      	mov	r0, r6
   b9e2e:	4639      	mov	r1, r7
   b9e30:	f7ff fb12 	bl	b9458 <__aeabi_dsub>
   b9e34:	f7ff ff78 	bl	b9d28 <__aeabi_d2uiz>
   b9e38:	4621      	mov	r1, r4
   b9e3a:	bdd0      	pop	{r4, r6, r7, pc}
   b9e3c:	3df00000 	.word	0x3df00000
   b9e40:	41f00000 	.word	0x41f00000

000b9e44 <atexit>:
   b9e44:	2300      	movs	r3, #0
   b9e46:	4601      	mov	r1, r0
   b9e48:	461a      	mov	r2, r3
   b9e4a:	4618      	mov	r0, r3
   b9e4c:	f000 bf86 	b.w	bad5c <__register_exitproc>

000b9e50 <atof>:
   b9e50:	2100      	movs	r1, #0
   b9e52:	f000 beeb 	b.w	bac2c <strtod>

000b9e56 <atoi>:
   b9e56:	220a      	movs	r2, #10
   b9e58:	2100      	movs	r1, #0
   b9e5a:	f000 bf75 	b.w	bad48 <strtol>

000b9e5e <atol>:
   b9e5e:	220a      	movs	r2, #10
   b9e60:	2100      	movs	r1, #0
   b9e62:	f000 bf71 	b.w	bad48 <strtol>

000b9e66 <memcmp>:
   b9e66:	b510      	push	{r4, lr}
   b9e68:	3901      	subs	r1, #1
   b9e6a:	4402      	add	r2, r0
   b9e6c:	4290      	cmp	r0, r2
   b9e6e:	d101      	bne.n	b9e74 <memcmp+0xe>
   b9e70:	2000      	movs	r0, #0
   b9e72:	e005      	b.n	b9e80 <memcmp+0x1a>
   b9e74:	7803      	ldrb	r3, [r0, #0]
   b9e76:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b9e7a:	42a3      	cmp	r3, r4
   b9e7c:	d001      	beq.n	b9e82 <memcmp+0x1c>
   b9e7e:	1b18      	subs	r0, r3, r4
   b9e80:	bd10      	pop	{r4, pc}
   b9e82:	3001      	adds	r0, #1
   b9e84:	e7f2      	b.n	b9e6c <memcmp+0x6>

000b9e86 <memcpy>:
   b9e86:	440a      	add	r2, r1
   b9e88:	4291      	cmp	r1, r2
   b9e8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b9e8e:	d100      	bne.n	b9e92 <memcpy+0xc>
   b9e90:	4770      	bx	lr
   b9e92:	b510      	push	{r4, lr}
   b9e94:	f811 4b01 	ldrb.w	r4, [r1], #1
   b9e98:	f803 4f01 	strb.w	r4, [r3, #1]!
   b9e9c:	4291      	cmp	r1, r2
   b9e9e:	d1f9      	bne.n	b9e94 <memcpy+0xe>
   b9ea0:	bd10      	pop	{r4, pc}

000b9ea2 <memmove>:
   b9ea2:	4288      	cmp	r0, r1
   b9ea4:	b510      	push	{r4, lr}
   b9ea6:	eb01 0402 	add.w	r4, r1, r2
   b9eaa:	d902      	bls.n	b9eb2 <memmove+0x10>
   b9eac:	4284      	cmp	r4, r0
   b9eae:	4623      	mov	r3, r4
   b9eb0:	d807      	bhi.n	b9ec2 <memmove+0x20>
   b9eb2:	1e43      	subs	r3, r0, #1
   b9eb4:	42a1      	cmp	r1, r4
   b9eb6:	d008      	beq.n	b9eca <memmove+0x28>
   b9eb8:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9ebc:	f803 2f01 	strb.w	r2, [r3, #1]!
   b9ec0:	e7f8      	b.n	b9eb4 <memmove+0x12>
   b9ec2:	4402      	add	r2, r0
   b9ec4:	4601      	mov	r1, r0
   b9ec6:	428a      	cmp	r2, r1
   b9ec8:	d100      	bne.n	b9ecc <memmove+0x2a>
   b9eca:	bd10      	pop	{r4, pc}
   b9ecc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b9ed0:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b9ed4:	e7f7      	b.n	b9ec6 <memmove+0x24>

000b9ed6 <memset>:
   b9ed6:	4402      	add	r2, r0
   b9ed8:	4603      	mov	r3, r0
   b9eda:	4293      	cmp	r3, r2
   b9edc:	d100      	bne.n	b9ee0 <memset+0xa>
   b9ede:	4770      	bx	lr
   b9ee0:	f803 1b01 	strb.w	r1, [r3], #1
   b9ee4:	e7f9      	b.n	b9eda <memset+0x4>
	...

000b9ee8 <srand>:
   b9ee8:	b538      	push	{r3, r4, r5, lr}
   b9eea:	4b10      	ldr	r3, [pc, #64]	; (b9f2c <srand+0x44>)
   b9eec:	681d      	ldr	r5, [r3, #0]
   b9eee:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9ef0:	4604      	mov	r4, r0
   b9ef2:	b9b3      	cbnz	r3, b9f22 <srand+0x3a>
   b9ef4:	2018      	movs	r0, #24
   b9ef6:	f7fc fc73 	bl	b67e0 <malloc>
   b9efa:	4602      	mov	r2, r0
   b9efc:	63a8      	str	r0, [r5, #56]	; 0x38
   b9efe:	b920      	cbnz	r0, b9f0a <srand+0x22>
   b9f00:	4b0b      	ldr	r3, [pc, #44]	; (b9f30 <srand+0x48>)
   b9f02:	480c      	ldr	r0, [pc, #48]	; (b9f34 <srand+0x4c>)
   b9f04:	2142      	movs	r1, #66	; 0x42
   b9f06:	f7fc fca3 	bl	b6850 <__assert_func>
   b9f0a:	490b      	ldr	r1, [pc, #44]	; (b9f38 <srand+0x50>)
   b9f0c:	4b0b      	ldr	r3, [pc, #44]	; (b9f3c <srand+0x54>)
   b9f0e:	e9c0 1300 	strd	r1, r3, [r0]
   b9f12:	4b0b      	ldr	r3, [pc, #44]	; (b9f40 <srand+0x58>)
   b9f14:	6083      	str	r3, [r0, #8]
   b9f16:	230b      	movs	r3, #11
   b9f18:	8183      	strh	r3, [r0, #12]
   b9f1a:	2100      	movs	r1, #0
   b9f1c:	2001      	movs	r0, #1
   b9f1e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b9f22:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9f24:	2200      	movs	r2, #0
   b9f26:	611c      	str	r4, [r3, #16]
   b9f28:	615a      	str	r2, [r3, #20]
   b9f2a:	bd38      	pop	{r3, r4, r5, pc}
   b9f2c:	2003559c 	.word	0x2003559c
   b9f30:	000bc801 	.word	0x000bc801
   b9f34:	000bc818 	.word	0x000bc818
   b9f38:	abcd330e 	.word	0xabcd330e
   b9f3c:	e66d1234 	.word	0xe66d1234
   b9f40:	0005deec 	.word	0x0005deec

000b9f44 <strcmp>:
   b9f44:	f810 2b01 	ldrb.w	r2, [r0], #1
   b9f48:	f811 3b01 	ldrb.w	r3, [r1], #1
   b9f4c:	2a01      	cmp	r2, #1
   b9f4e:	bf28      	it	cs
   b9f50:	429a      	cmpcs	r2, r3
   b9f52:	d0f7      	beq.n	b9f44 <strcmp>
   b9f54:	1ad0      	subs	r0, r2, r3
   b9f56:	4770      	bx	lr

000b9f58 <strcpy>:
   b9f58:	4603      	mov	r3, r0
   b9f5a:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9f5e:	f803 2b01 	strb.w	r2, [r3], #1
   b9f62:	2a00      	cmp	r2, #0
   b9f64:	d1f9      	bne.n	b9f5a <strcpy+0x2>
   b9f66:	4770      	bx	lr

000b9f68 <strlen>:
   b9f68:	4603      	mov	r3, r0
   b9f6a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b9f6e:	2a00      	cmp	r2, #0
   b9f70:	d1fb      	bne.n	b9f6a <strlen+0x2>
   b9f72:	1a18      	subs	r0, r3, r0
   b9f74:	3801      	subs	r0, #1
   b9f76:	4770      	bx	lr

000b9f78 <strncmp>:
   b9f78:	b510      	push	{r4, lr}
   b9f7a:	b17a      	cbz	r2, b9f9c <strncmp+0x24>
   b9f7c:	4603      	mov	r3, r0
   b9f7e:	3901      	subs	r1, #1
   b9f80:	1884      	adds	r4, r0, r2
   b9f82:	f813 0b01 	ldrb.w	r0, [r3], #1
   b9f86:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b9f8a:	4290      	cmp	r0, r2
   b9f8c:	d101      	bne.n	b9f92 <strncmp+0x1a>
   b9f8e:	42a3      	cmp	r3, r4
   b9f90:	d101      	bne.n	b9f96 <strncmp+0x1e>
   b9f92:	1a80      	subs	r0, r0, r2
   b9f94:	bd10      	pop	{r4, pc}
   b9f96:	2800      	cmp	r0, #0
   b9f98:	d1f3      	bne.n	b9f82 <strncmp+0xa>
   b9f9a:	e7fa      	b.n	b9f92 <strncmp+0x1a>
   b9f9c:	4610      	mov	r0, r2
   b9f9e:	e7f9      	b.n	b9f94 <strncmp+0x1c>

000b9fa0 <strnlen>:
   b9fa0:	b510      	push	{r4, lr}
   b9fa2:	4602      	mov	r2, r0
   b9fa4:	4401      	add	r1, r0
   b9fa6:	428a      	cmp	r2, r1
   b9fa8:	4613      	mov	r3, r2
   b9faa:	d003      	beq.n	b9fb4 <strnlen+0x14>
   b9fac:	781c      	ldrb	r4, [r3, #0]
   b9fae:	3201      	adds	r2, #1
   b9fb0:	2c00      	cmp	r4, #0
   b9fb2:	d1f8      	bne.n	b9fa6 <strnlen+0x6>
   b9fb4:	1a18      	subs	r0, r3, r0
   b9fb6:	bd10      	pop	{r4, pc}

000b9fb8 <strstr>:
   b9fb8:	780a      	ldrb	r2, [r1, #0]
   b9fba:	b570      	push	{r4, r5, r6, lr}
   b9fbc:	b96a      	cbnz	r2, b9fda <strstr+0x22>
   b9fbe:	bd70      	pop	{r4, r5, r6, pc}
   b9fc0:	429a      	cmp	r2, r3
   b9fc2:	d109      	bne.n	b9fd8 <strstr+0x20>
   b9fc4:	460c      	mov	r4, r1
   b9fc6:	4605      	mov	r5, r0
   b9fc8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   b9fcc:	2b00      	cmp	r3, #0
   b9fce:	d0f6      	beq.n	b9fbe <strstr+0x6>
   b9fd0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   b9fd4:	429e      	cmp	r6, r3
   b9fd6:	d0f7      	beq.n	b9fc8 <strstr+0x10>
   b9fd8:	3001      	adds	r0, #1
   b9fda:	7803      	ldrb	r3, [r0, #0]
   b9fdc:	2b00      	cmp	r3, #0
   b9fde:	d1ef      	bne.n	b9fc0 <strstr+0x8>
   b9fe0:	4618      	mov	r0, r3
   b9fe2:	e7ec      	b.n	b9fbe <strstr+0x6>

000b9fe4 <sulp>:
   b9fe4:	b570      	push	{r4, r5, r6, lr}
   b9fe6:	4604      	mov	r4, r0
   b9fe8:	460d      	mov	r5, r1
   b9fea:	ec45 4b10 	vmov	d0, r4, r5
   b9fee:	4616      	mov	r6, r2
   b9ff0:	f001 fe0e 	bl	bbc10 <__ulp>
   b9ff4:	ec51 0b10 	vmov	r0, r1, d0
   b9ff8:	b17e      	cbz	r6, ba01a <sulp+0x36>
   b9ffa:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b9ffe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   ba002:	2b00      	cmp	r3, #0
   ba004:	dd09      	ble.n	ba01a <sulp+0x36>
   ba006:	051b      	lsls	r3, r3, #20
   ba008:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   ba00c:	2400      	movs	r4, #0
   ba00e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   ba012:	4622      	mov	r2, r4
   ba014:	462b      	mov	r3, r5
   ba016:	f7ff fbd7 	bl	b97c8 <__aeabi_dmul>
   ba01a:	bd70      	pop	{r4, r5, r6, pc}
   ba01c:	0000      	movs	r0, r0
	...

000ba020 <_strtod_l>:
   ba020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba024:	ed2d 8b02 	vpush	{d8}
   ba028:	b09d      	sub	sp, #116	; 0x74
   ba02a:	461f      	mov	r7, r3
   ba02c:	2300      	movs	r3, #0
   ba02e:	9318      	str	r3, [sp, #96]	; 0x60
   ba030:	4ba2      	ldr	r3, [pc, #648]	; (ba2bc <_strtod_l+0x29c>)
   ba032:	9213      	str	r2, [sp, #76]	; 0x4c
   ba034:	681b      	ldr	r3, [r3, #0]
   ba036:	9305      	str	r3, [sp, #20]
   ba038:	4604      	mov	r4, r0
   ba03a:	4618      	mov	r0, r3
   ba03c:	4688      	mov	r8, r1
   ba03e:	f7ff ff93 	bl	b9f68 <strlen>
   ba042:	f04f 0a00 	mov.w	sl, #0
   ba046:	4605      	mov	r5, r0
   ba048:	f04f 0b00 	mov.w	fp, #0
   ba04c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba050:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba052:	781a      	ldrb	r2, [r3, #0]
   ba054:	2a2b      	cmp	r2, #43	; 0x2b
   ba056:	d04e      	beq.n	ba0f6 <_strtod_l+0xd6>
   ba058:	d83b      	bhi.n	ba0d2 <_strtod_l+0xb2>
   ba05a:	2a0d      	cmp	r2, #13
   ba05c:	d834      	bhi.n	ba0c8 <_strtod_l+0xa8>
   ba05e:	2a08      	cmp	r2, #8
   ba060:	d834      	bhi.n	ba0cc <_strtod_l+0xac>
   ba062:	2a00      	cmp	r2, #0
   ba064:	d03e      	beq.n	ba0e4 <_strtod_l+0xc4>
   ba066:	2300      	movs	r3, #0
   ba068:	930a      	str	r3, [sp, #40]	; 0x28
   ba06a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   ba06c:	7833      	ldrb	r3, [r6, #0]
   ba06e:	2b30      	cmp	r3, #48	; 0x30
   ba070:	f040 80b0 	bne.w	ba1d4 <_strtod_l+0x1b4>
   ba074:	7873      	ldrb	r3, [r6, #1]
   ba076:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   ba07a:	2b58      	cmp	r3, #88	; 0x58
   ba07c:	d168      	bne.n	ba150 <_strtod_l+0x130>
   ba07e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba080:	9301      	str	r3, [sp, #4]
   ba082:	ab18      	add	r3, sp, #96	; 0x60
   ba084:	9702      	str	r7, [sp, #8]
   ba086:	9300      	str	r3, [sp, #0]
   ba088:	4a8d      	ldr	r2, [pc, #564]	; (ba2c0 <_strtod_l+0x2a0>)
   ba08a:	ab19      	add	r3, sp, #100	; 0x64
   ba08c:	a917      	add	r1, sp, #92	; 0x5c
   ba08e:	4620      	mov	r0, r4
   ba090:	f000 ff2e 	bl	baef0 <__gethex>
   ba094:	f010 0707 	ands.w	r7, r0, #7
   ba098:	4605      	mov	r5, r0
   ba09a:	d005      	beq.n	ba0a8 <_strtod_l+0x88>
   ba09c:	2f06      	cmp	r7, #6
   ba09e:	d12c      	bne.n	ba0fa <_strtod_l+0xda>
   ba0a0:	3601      	adds	r6, #1
   ba0a2:	2300      	movs	r3, #0
   ba0a4:	9617      	str	r6, [sp, #92]	; 0x5c
   ba0a6:	930a      	str	r3, [sp, #40]	; 0x28
   ba0a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ba0aa:	2b00      	cmp	r3, #0
   ba0ac:	f040 8590 	bne.w	babd0 <_strtod_l+0xbb0>
   ba0b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba0b2:	b1eb      	cbz	r3, ba0f0 <_strtod_l+0xd0>
   ba0b4:	4652      	mov	r2, sl
   ba0b6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   ba0ba:	ec43 2b10 	vmov	d0, r2, r3
   ba0be:	b01d      	add	sp, #116	; 0x74
   ba0c0:	ecbd 8b02 	vpop	{d8}
   ba0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba0c8:	2a20      	cmp	r2, #32
   ba0ca:	d1cc      	bne.n	ba066 <_strtod_l+0x46>
   ba0cc:	3301      	adds	r3, #1
   ba0ce:	9317      	str	r3, [sp, #92]	; 0x5c
   ba0d0:	e7be      	b.n	ba050 <_strtod_l+0x30>
   ba0d2:	2a2d      	cmp	r2, #45	; 0x2d
   ba0d4:	d1c7      	bne.n	ba066 <_strtod_l+0x46>
   ba0d6:	2201      	movs	r2, #1
   ba0d8:	920a      	str	r2, [sp, #40]	; 0x28
   ba0da:	1c5a      	adds	r2, r3, #1
   ba0dc:	9217      	str	r2, [sp, #92]	; 0x5c
   ba0de:	785b      	ldrb	r3, [r3, #1]
   ba0e0:	2b00      	cmp	r3, #0
   ba0e2:	d1c2      	bne.n	ba06a <_strtod_l+0x4a>
   ba0e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ba0e6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba0ea:	2b00      	cmp	r3, #0
   ba0ec:	f040 856e 	bne.w	babcc <_strtod_l+0xbac>
   ba0f0:	4652      	mov	r2, sl
   ba0f2:	465b      	mov	r3, fp
   ba0f4:	e7e1      	b.n	ba0ba <_strtod_l+0x9a>
   ba0f6:	2200      	movs	r2, #0
   ba0f8:	e7ee      	b.n	ba0d8 <_strtod_l+0xb8>
   ba0fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
   ba0fc:	b13a      	cbz	r2, ba10e <_strtod_l+0xee>
   ba0fe:	2135      	movs	r1, #53	; 0x35
   ba100:	a81a      	add	r0, sp, #104	; 0x68
   ba102:	f001 fe90 	bl	bbe26 <__copybits>
   ba106:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba108:	4620      	mov	r0, r4
   ba10a:	f001 fa4f 	bl	bb5ac <_Bfree>
   ba10e:	3f01      	subs	r7, #1
   ba110:	2f04      	cmp	r7, #4
   ba112:	d806      	bhi.n	ba122 <_strtod_l+0x102>
   ba114:	e8df f007 	tbb	[pc, r7]
   ba118:	1714030a 	.word	0x1714030a
   ba11c:	0a          	.byte	0x0a
   ba11d:	00          	.byte	0x00
   ba11e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   ba122:	0728      	lsls	r0, r5, #28
   ba124:	d5c0      	bpl.n	ba0a8 <_strtod_l+0x88>
   ba126:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   ba12a:	e7bd      	b.n	ba0a8 <_strtod_l+0x88>
   ba12c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   ba130:	9a19      	ldr	r2, [sp, #100]	; 0x64
   ba132:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   ba136:	f202 4233 	addw	r2, r2, #1075	; 0x433
   ba13a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   ba13e:	e7f0      	b.n	ba122 <_strtod_l+0x102>
   ba140:	f8df b180 	ldr.w	fp, [pc, #384]	; ba2c4 <_strtod_l+0x2a4>
   ba144:	e7ed      	b.n	ba122 <_strtod_l+0x102>
   ba146:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   ba14a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   ba14e:	e7e8      	b.n	ba122 <_strtod_l+0x102>
   ba150:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba152:	1c5a      	adds	r2, r3, #1
   ba154:	9217      	str	r2, [sp, #92]	; 0x5c
   ba156:	785b      	ldrb	r3, [r3, #1]
   ba158:	2b30      	cmp	r3, #48	; 0x30
   ba15a:	d0f9      	beq.n	ba150 <_strtod_l+0x130>
   ba15c:	2b00      	cmp	r3, #0
   ba15e:	d0a3      	beq.n	ba0a8 <_strtod_l+0x88>
   ba160:	2301      	movs	r3, #1
   ba162:	f04f 0900 	mov.w	r9, #0
   ba166:	9304      	str	r3, [sp, #16]
   ba168:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba16a:	9308      	str	r3, [sp, #32]
   ba16c:	f8cd 901c 	str.w	r9, [sp, #28]
   ba170:	464f      	mov	r7, r9
   ba172:	220a      	movs	r2, #10
   ba174:	9817      	ldr	r0, [sp, #92]	; 0x5c
   ba176:	7806      	ldrb	r6, [r0, #0]
   ba178:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   ba17c:	b2d9      	uxtb	r1, r3
   ba17e:	2909      	cmp	r1, #9
   ba180:	d92a      	bls.n	ba1d8 <_strtod_l+0x1b8>
   ba182:	9905      	ldr	r1, [sp, #20]
   ba184:	462a      	mov	r2, r5
   ba186:	f7ff fef7 	bl	b9f78 <strncmp>
   ba18a:	b398      	cbz	r0, ba1f4 <_strtod_l+0x1d4>
   ba18c:	2000      	movs	r0, #0
   ba18e:	4632      	mov	r2, r6
   ba190:	463d      	mov	r5, r7
   ba192:	9005      	str	r0, [sp, #20]
   ba194:	4603      	mov	r3, r0
   ba196:	2a65      	cmp	r2, #101	; 0x65
   ba198:	d001      	beq.n	ba19e <_strtod_l+0x17e>
   ba19a:	2a45      	cmp	r2, #69	; 0x45
   ba19c:	d118      	bne.n	ba1d0 <_strtod_l+0x1b0>
   ba19e:	b91d      	cbnz	r5, ba1a8 <_strtod_l+0x188>
   ba1a0:	9a04      	ldr	r2, [sp, #16]
   ba1a2:	4302      	orrs	r2, r0
   ba1a4:	d09e      	beq.n	ba0e4 <_strtod_l+0xc4>
   ba1a6:	2500      	movs	r5, #0
   ba1a8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   ba1ac:	f108 0201 	add.w	r2, r8, #1
   ba1b0:	9217      	str	r2, [sp, #92]	; 0x5c
   ba1b2:	f898 2001 	ldrb.w	r2, [r8, #1]
   ba1b6:	2a2b      	cmp	r2, #43	; 0x2b
   ba1b8:	d075      	beq.n	ba2a6 <_strtod_l+0x286>
   ba1ba:	2a2d      	cmp	r2, #45	; 0x2d
   ba1bc:	d07b      	beq.n	ba2b6 <_strtod_l+0x296>
   ba1be:	f04f 0c00 	mov.w	ip, #0
   ba1c2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   ba1c6:	2909      	cmp	r1, #9
   ba1c8:	f240 8082 	bls.w	ba2d0 <_strtod_l+0x2b0>
   ba1cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba1d0:	2600      	movs	r6, #0
   ba1d2:	e09d      	b.n	ba310 <_strtod_l+0x2f0>
   ba1d4:	2300      	movs	r3, #0
   ba1d6:	e7c4      	b.n	ba162 <_strtod_l+0x142>
   ba1d8:	2f08      	cmp	r7, #8
   ba1da:	bfd8      	it	le
   ba1dc:	9907      	ldrle	r1, [sp, #28]
   ba1de:	f100 0001 	add.w	r0, r0, #1
   ba1e2:	bfda      	itte	le
   ba1e4:	fb02 3301 	mlale	r3, r2, r1, r3
   ba1e8:	9307      	strle	r3, [sp, #28]
   ba1ea:	fb02 3909 	mlagt	r9, r2, r9, r3
   ba1ee:	3701      	adds	r7, #1
   ba1f0:	9017      	str	r0, [sp, #92]	; 0x5c
   ba1f2:	e7bf      	b.n	ba174 <_strtod_l+0x154>
   ba1f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba1f6:	195a      	adds	r2, r3, r5
   ba1f8:	9217      	str	r2, [sp, #92]	; 0x5c
   ba1fa:	5d5a      	ldrb	r2, [r3, r5]
   ba1fc:	2f00      	cmp	r7, #0
   ba1fe:	d037      	beq.n	ba270 <_strtod_l+0x250>
   ba200:	9005      	str	r0, [sp, #20]
   ba202:	463d      	mov	r5, r7
   ba204:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   ba208:	2b09      	cmp	r3, #9
   ba20a:	d912      	bls.n	ba232 <_strtod_l+0x212>
   ba20c:	2301      	movs	r3, #1
   ba20e:	e7c2      	b.n	ba196 <_strtod_l+0x176>
   ba210:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba212:	1c5a      	adds	r2, r3, #1
   ba214:	9217      	str	r2, [sp, #92]	; 0x5c
   ba216:	785a      	ldrb	r2, [r3, #1]
   ba218:	3001      	adds	r0, #1
   ba21a:	2a30      	cmp	r2, #48	; 0x30
   ba21c:	d0f8      	beq.n	ba210 <_strtod_l+0x1f0>
   ba21e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   ba222:	2b08      	cmp	r3, #8
   ba224:	f200 84d9 	bhi.w	babda <_strtod_l+0xbba>
   ba228:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba22a:	9005      	str	r0, [sp, #20]
   ba22c:	2000      	movs	r0, #0
   ba22e:	9308      	str	r3, [sp, #32]
   ba230:	4605      	mov	r5, r0
   ba232:	3a30      	subs	r2, #48	; 0x30
   ba234:	f100 0301 	add.w	r3, r0, #1
   ba238:	d014      	beq.n	ba264 <_strtod_l+0x244>
   ba23a:	9905      	ldr	r1, [sp, #20]
   ba23c:	4419      	add	r1, r3
   ba23e:	9105      	str	r1, [sp, #20]
   ba240:	462b      	mov	r3, r5
   ba242:	eb00 0e05 	add.w	lr, r0, r5
   ba246:	210a      	movs	r1, #10
   ba248:	4573      	cmp	r3, lr
   ba24a:	d113      	bne.n	ba274 <_strtod_l+0x254>
   ba24c:	182b      	adds	r3, r5, r0
   ba24e:	2b08      	cmp	r3, #8
   ba250:	f105 0501 	add.w	r5, r5, #1
   ba254:	4405      	add	r5, r0
   ba256:	dc1c      	bgt.n	ba292 <_strtod_l+0x272>
   ba258:	9907      	ldr	r1, [sp, #28]
   ba25a:	230a      	movs	r3, #10
   ba25c:	fb03 2301 	mla	r3, r3, r1, r2
   ba260:	9307      	str	r3, [sp, #28]
   ba262:	2300      	movs	r3, #0
   ba264:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba266:	1c51      	adds	r1, r2, #1
   ba268:	9117      	str	r1, [sp, #92]	; 0x5c
   ba26a:	7852      	ldrb	r2, [r2, #1]
   ba26c:	4618      	mov	r0, r3
   ba26e:	e7c9      	b.n	ba204 <_strtod_l+0x1e4>
   ba270:	4638      	mov	r0, r7
   ba272:	e7d2      	b.n	ba21a <_strtod_l+0x1fa>
   ba274:	2b08      	cmp	r3, #8
   ba276:	dc04      	bgt.n	ba282 <_strtod_l+0x262>
   ba278:	9e07      	ldr	r6, [sp, #28]
   ba27a:	434e      	muls	r6, r1
   ba27c:	9607      	str	r6, [sp, #28]
   ba27e:	3301      	adds	r3, #1
   ba280:	e7e2      	b.n	ba248 <_strtod_l+0x228>
   ba282:	f103 0c01 	add.w	ip, r3, #1
   ba286:	f1bc 0f10 	cmp.w	ip, #16
   ba28a:	bfd8      	it	le
   ba28c:	fb01 f909 	mulle.w	r9, r1, r9
   ba290:	e7f5      	b.n	ba27e <_strtod_l+0x25e>
   ba292:	2d10      	cmp	r5, #16
   ba294:	bfdc      	itt	le
   ba296:	230a      	movle	r3, #10
   ba298:	fb03 2909 	mlale	r9, r3, r9, r2
   ba29c:	e7e1      	b.n	ba262 <_strtod_l+0x242>
   ba29e:	2300      	movs	r3, #0
   ba2a0:	9305      	str	r3, [sp, #20]
   ba2a2:	2301      	movs	r3, #1
   ba2a4:	e77c      	b.n	ba1a0 <_strtod_l+0x180>
   ba2a6:	f04f 0c00 	mov.w	ip, #0
   ba2aa:	f108 0202 	add.w	r2, r8, #2
   ba2ae:	9217      	str	r2, [sp, #92]	; 0x5c
   ba2b0:	f898 2002 	ldrb.w	r2, [r8, #2]
   ba2b4:	e785      	b.n	ba1c2 <_strtod_l+0x1a2>
   ba2b6:	f04f 0c01 	mov.w	ip, #1
   ba2ba:	e7f6      	b.n	ba2aa <_strtod_l+0x28a>
   ba2bc:	000bca44 	.word	0x000bca44
   ba2c0:	000bc880 	.word	0x000bc880
   ba2c4:	7ff00000 	.word	0x7ff00000
   ba2c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba2ca:	1c51      	adds	r1, r2, #1
   ba2cc:	9117      	str	r1, [sp, #92]	; 0x5c
   ba2ce:	7852      	ldrb	r2, [r2, #1]
   ba2d0:	2a30      	cmp	r2, #48	; 0x30
   ba2d2:	d0f9      	beq.n	ba2c8 <_strtod_l+0x2a8>
   ba2d4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   ba2d8:	2908      	cmp	r1, #8
   ba2da:	f63f af79 	bhi.w	ba1d0 <_strtod_l+0x1b0>
   ba2de:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   ba2e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba2e4:	9206      	str	r2, [sp, #24]
   ba2e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba2e8:	1c51      	adds	r1, r2, #1
   ba2ea:	9117      	str	r1, [sp, #92]	; 0x5c
   ba2ec:	7852      	ldrb	r2, [r2, #1]
   ba2ee:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   ba2f2:	2e09      	cmp	r6, #9
   ba2f4:	d937      	bls.n	ba366 <_strtod_l+0x346>
   ba2f6:	9e06      	ldr	r6, [sp, #24]
   ba2f8:	1b89      	subs	r1, r1, r6
   ba2fa:	2908      	cmp	r1, #8
   ba2fc:	f644 661f 	movw	r6, #19999	; 0x4e1f
   ba300:	dc02      	bgt.n	ba308 <_strtod_l+0x2e8>
   ba302:	4576      	cmp	r6, lr
   ba304:	bfa8      	it	ge
   ba306:	4676      	movge	r6, lr
   ba308:	f1bc 0f00 	cmp.w	ip, #0
   ba30c:	d000      	beq.n	ba310 <_strtod_l+0x2f0>
   ba30e:	4276      	negs	r6, r6
   ba310:	2d00      	cmp	r5, #0
   ba312:	d14d      	bne.n	ba3b0 <_strtod_l+0x390>
   ba314:	9904      	ldr	r1, [sp, #16]
   ba316:	4301      	orrs	r1, r0
   ba318:	f47f aec6 	bne.w	ba0a8 <_strtod_l+0x88>
   ba31c:	2b00      	cmp	r3, #0
   ba31e:	f47f aee1 	bne.w	ba0e4 <_strtod_l+0xc4>
   ba322:	2a69      	cmp	r2, #105	; 0x69
   ba324:	d027      	beq.n	ba376 <_strtod_l+0x356>
   ba326:	dc24      	bgt.n	ba372 <_strtod_l+0x352>
   ba328:	2a49      	cmp	r2, #73	; 0x49
   ba32a:	d024      	beq.n	ba376 <_strtod_l+0x356>
   ba32c:	2a4e      	cmp	r2, #78	; 0x4e
   ba32e:	f47f aed9 	bne.w	ba0e4 <_strtod_l+0xc4>
   ba332:	499f      	ldr	r1, [pc, #636]	; (ba5b0 <_strtod_l+0x590>)
   ba334:	a817      	add	r0, sp, #92	; 0x5c
   ba336:	f001 f833 	bl	bb3a0 <__match>
   ba33a:	2800      	cmp	r0, #0
   ba33c:	f43f aed2 	beq.w	ba0e4 <_strtod_l+0xc4>
   ba340:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba342:	781b      	ldrb	r3, [r3, #0]
   ba344:	2b28      	cmp	r3, #40	; 0x28
   ba346:	d12d      	bne.n	ba3a4 <_strtod_l+0x384>
   ba348:	499a      	ldr	r1, [pc, #616]	; (ba5b4 <_strtod_l+0x594>)
   ba34a:	aa1a      	add	r2, sp, #104	; 0x68
   ba34c:	a817      	add	r0, sp, #92	; 0x5c
   ba34e:	f001 f83b 	bl	bb3c8 <__hexnan>
   ba352:	2805      	cmp	r0, #5
   ba354:	d126      	bne.n	ba3a4 <_strtod_l+0x384>
   ba356:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   ba358:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   ba35c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   ba360:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   ba364:	e6a0      	b.n	ba0a8 <_strtod_l+0x88>
   ba366:	210a      	movs	r1, #10
   ba368:	fb01 2e0e 	mla	lr, r1, lr, r2
   ba36c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   ba370:	e7b9      	b.n	ba2e6 <_strtod_l+0x2c6>
   ba372:	2a6e      	cmp	r2, #110	; 0x6e
   ba374:	e7db      	b.n	ba32e <_strtod_l+0x30e>
   ba376:	4990      	ldr	r1, [pc, #576]	; (ba5b8 <_strtod_l+0x598>)
   ba378:	a817      	add	r0, sp, #92	; 0x5c
   ba37a:	f001 f811 	bl	bb3a0 <__match>
   ba37e:	2800      	cmp	r0, #0
   ba380:	f43f aeb0 	beq.w	ba0e4 <_strtod_l+0xc4>
   ba384:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba386:	498d      	ldr	r1, [pc, #564]	; (ba5bc <_strtod_l+0x59c>)
   ba388:	3b01      	subs	r3, #1
   ba38a:	a817      	add	r0, sp, #92	; 0x5c
   ba38c:	9317      	str	r3, [sp, #92]	; 0x5c
   ba38e:	f001 f807 	bl	bb3a0 <__match>
   ba392:	b910      	cbnz	r0, ba39a <_strtod_l+0x37a>
   ba394:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba396:	3301      	adds	r3, #1
   ba398:	9317      	str	r3, [sp, #92]	; 0x5c
   ba39a:	f8df b230 	ldr.w	fp, [pc, #560]	; ba5cc <_strtod_l+0x5ac>
   ba39e:	f04f 0a00 	mov.w	sl, #0
   ba3a2:	e681      	b.n	ba0a8 <_strtod_l+0x88>
   ba3a4:	4886      	ldr	r0, [pc, #536]	; (ba5c0 <_strtod_l+0x5a0>)
   ba3a6:	f001 fd93 	bl	bbed0 <nan>
   ba3aa:	ec5b ab10 	vmov	sl, fp, d0
   ba3ae:	e67b      	b.n	ba0a8 <_strtod_l+0x88>
   ba3b0:	9b05      	ldr	r3, [sp, #20]
   ba3b2:	9807      	ldr	r0, [sp, #28]
   ba3b4:	1af3      	subs	r3, r6, r3
   ba3b6:	2f00      	cmp	r7, #0
   ba3b8:	bf08      	it	eq
   ba3ba:	462f      	moveq	r7, r5
   ba3bc:	2d10      	cmp	r5, #16
   ba3be:	9306      	str	r3, [sp, #24]
   ba3c0:	46a8      	mov	r8, r5
   ba3c2:	bfa8      	it	ge
   ba3c4:	f04f 0810 	movge.w	r8, #16
   ba3c8:	f7ff f984 	bl	b96d4 <__aeabi_ui2d>
   ba3cc:	2d09      	cmp	r5, #9
   ba3ce:	4682      	mov	sl, r0
   ba3d0:	468b      	mov	fp, r1
   ba3d2:	dd13      	ble.n	ba3fc <_strtod_l+0x3dc>
   ba3d4:	4b7b      	ldr	r3, [pc, #492]	; (ba5c4 <_strtod_l+0x5a4>)
   ba3d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   ba3da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   ba3de:	f7ff f9f3 	bl	b97c8 <__aeabi_dmul>
   ba3e2:	4682      	mov	sl, r0
   ba3e4:	4648      	mov	r0, r9
   ba3e6:	468b      	mov	fp, r1
   ba3e8:	f7ff f974 	bl	b96d4 <__aeabi_ui2d>
   ba3ec:	4602      	mov	r2, r0
   ba3ee:	460b      	mov	r3, r1
   ba3f0:	4650      	mov	r0, sl
   ba3f2:	4659      	mov	r1, fp
   ba3f4:	f7ff f832 	bl	b945c <__adddf3>
   ba3f8:	4682      	mov	sl, r0
   ba3fa:	468b      	mov	fp, r1
   ba3fc:	2d0f      	cmp	r5, #15
   ba3fe:	dc38      	bgt.n	ba472 <_strtod_l+0x452>
   ba400:	9b06      	ldr	r3, [sp, #24]
   ba402:	2b00      	cmp	r3, #0
   ba404:	f43f ae50 	beq.w	ba0a8 <_strtod_l+0x88>
   ba408:	dd24      	ble.n	ba454 <_strtod_l+0x434>
   ba40a:	2b16      	cmp	r3, #22
   ba40c:	dc0b      	bgt.n	ba426 <_strtod_l+0x406>
   ba40e:	496d      	ldr	r1, [pc, #436]	; (ba5c4 <_strtod_l+0x5a4>)
   ba410:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   ba414:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba418:	4652      	mov	r2, sl
   ba41a:	465b      	mov	r3, fp
   ba41c:	f7ff f9d4 	bl	b97c8 <__aeabi_dmul>
   ba420:	4682      	mov	sl, r0
   ba422:	468b      	mov	fp, r1
   ba424:	e640      	b.n	ba0a8 <_strtod_l+0x88>
   ba426:	9a06      	ldr	r2, [sp, #24]
   ba428:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   ba42c:	4293      	cmp	r3, r2
   ba42e:	db20      	blt.n	ba472 <_strtod_l+0x452>
   ba430:	4c64      	ldr	r4, [pc, #400]	; (ba5c4 <_strtod_l+0x5a4>)
   ba432:	f1c5 050f 	rsb	r5, r5, #15
   ba436:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   ba43a:	4652      	mov	r2, sl
   ba43c:	465b      	mov	r3, fp
   ba43e:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba442:	f7ff f9c1 	bl	b97c8 <__aeabi_dmul>
   ba446:	9b06      	ldr	r3, [sp, #24]
   ba448:	1b5d      	subs	r5, r3, r5
   ba44a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   ba44e:	e9d4 2300 	ldrd	r2, r3, [r4]
   ba452:	e7e3      	b.n	ba41c <_strtod_l+0x3fc>
   ba454:	9b06      	ldr	r3, [sp, #24]
   ba456:	3316      	adds	r3, #22
   ba458:	db0b      	blt.n	ba472 <_strtod_l+0x452>
   ba45a:	9b05      	ldr	r3, [sp, #20]
   ba45c:	1b9e      	subs	r6, r3, r6
   ba45e:	4b59      	ldr	r3, [pc, #356]	; (ba5c4 <_strtod_l+0x5a4>)
   ba460:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   ba464:	e9d6 2300 	ldrd	r2, r3, [r6]
   ba468:	4650      	mov	r0, sl
   ba46a:	4659      	mov	r1, fp
   ba46c:	f7ff fad6 	bl	b9a1c <__aeabi_ddiv>
   ba470:	e7d6      	b.n	ba420 <_strtod_l+0x400>
   ba472:	9b06      	ldr	r3, [sp, #24]
   ba474:	eba5 0808 	sub.w	r8, r5, r8
   ba478:	4498      	add	r8, r3
   ba47a:	f1b8 0f00 	cmp.w	r8, #0
   ba47e:	dd74      	ble.n	ba56a <_strtod_l+0x54a>
   ba480:	f018 030f 	ands.w	r3, r8, #15
   ba484:	d00a      	beq.n	ba49c <_strtod_l+0x47c>
   ba486:	494f      	ldr	r1, [pc, #316]	; (ba5c4 <_strtod_l+0x5a4>)
   ba488:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   ba48c:	4652      	mov	r2, sl
   ba48e:	465b      	mov	r3, fp
   ba490:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba494:	f7ff f998 	bl	b97c8 <__aeabi_dmul>
   ba498:	4682      	mov	sl, r0
   ba49a:	468b      	mov	fp, r1
   ba49c:	f038 080f 	bics.w	r8, r8, #15
   ba4a0:	d04f      	beq.n	ba542 <_strtod_l+0x522>
   ba4a2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   ba4a6:	dd22      	ble.n	ba4ee <_strtod_l+0x4ce>
   ba4a8:	2500      	movs	r5, #0
   ba4aa:	462e      	mov	r6, r5
   ba4ac:	9507      	str	r5, [sp, #28]
   ba4ae:	9505      	str	r5, [sp, #20]
   ba4b0:	2322      	movs	r3, #34	; 0x22
   ba4b2:	f8df b118 	ldr.w	fp, [pc, #280]	; ba5cc <_strtod_l+0x5ac>
   ba4b6:	6023      	str	r3, [r4, #0]
   ba4b8:	f04f 0a00 	mov.w	sl, #0
   ba4bc:	9b07      	ldr	r3, [sp, #28]
   ba4be:	2b00      	cmp	r3, #0
   ba4c0:	f43f adf2 	beq.w	ba0a8 <_strtod_l+0x88>
   ba4c4:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba4c6:	4620      	mov	r0, r4
   ba4c8:	f001 f870 	bl	bb5ac <_Bfree>
   ba4cc:	9905      	ldr	r1, [sp, #20]
   ba4ce:	4620      	mov	r0, r4
   ba4d0:	f001 f86c 	bl	bb5ac <_Bfree>
   ba4d4:	4631      	mov	r1, r6
   ba4d6:	4620      	mov	r0, r4
   ba4d8:	f001 f868 	bl	bb5ac <_Bfree>
   ba4dc:	9907      	ldr	r1, [sp, #28]
   ba4de:	4620      	mov	r0, r4
   ba4e0:	f001 f864 	bl	bb5ac <_Bfree>
   ba4e4:	4629      	mov	r1, r5
   ba4e6:	4620      	mov	r0, r4
   ba4e8:	f001 f860 	bl	bb5ac <_Bfree>
   ba4ec:	e5dc      	b.n	ba0a8 <_strtod_l+0x88>
   ba4ee:	4b36      	ldr	r3, [pc, #216]	; (ba5c8 <_strtod_l+0x5a8>)
   ba4f0:	9304      	str	r3, [sp, #16]
   ba4f2:	2300      	movs	r3, #0
   ba4f4:	ea4f 1828 	mov.w	r8, r8, asr #4
   ba4f8:	4650      	mov	r0, sl
   ba4fa:	4659      	mov	r1, fp
   ba4fc:	4699      	mov	r9, r3
   ba4fe:	f1b8 0f01 	cmp.w	r8, #1
   ba502:	dc21      	bgt.n	ba548 <_strtod_l+0x528>
   ba504:	b10b      	cbz	r3, ba50a <_strtod_l+0x4ea>
   ba506:	4682      	mov	sl, r0
   ba508:	468b      	mov	fp, r1
   ba50a:	4b2f      	ldr	r3, [pc, #188]	; (ba5c8 <_strtod_l+0x5a8>)
   ba50c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   ba510:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   ba514:	4652      	mov	r2, sl
   ba516:	465b      	mov	r3, fp
   ba518:	e9d9 0100 	ldrd	r0, r1, [r9]
   ba51c:	f7ff f954 	bl	b97c8 <__aeabi_dmul>
   ba520:	4b2a      	ldr	r3, [pc, #168]	; (ba5cc <_strtod_l+0x5ac>)
   ba522:	460a      	mov	r2, r1
   ba524:	400b      	ands	r3, r1
   ba526:	492a      	ldr	r1, [pc, #168]	; (ba5d0 <_strtod_l+0x5b0>)
   ba528:	428b      	cmp	r3, r1
   ba52a:	4682      	mov	sl, r0
   ba52c:	d8bc      	bhi.n	ba4a8 <_strtod_l+0x488>
   ba52e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   ba532:	428b      	cmp	r3, r1
   ba534:	bf86      	itte	hi
   ba536:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; ba5d4 <_strtod_l+0x5b4>
   ba53a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   ba53e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   ba542:	2300      	movs	r3, #0
   ba544:	9304      	str	r3, [sp, #16]
   ba546:	e084      	b.n	ba652 <_strtod_l+0x632>
   ba548:	f018 0f01 	tst.w	r8, #1
   ba54c:	d005      	beq.n	ba55a <_strtod_l+0x53a>
   ba54e:	9b04      	ldr	r3, [sp, #16]
   ba550:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba554:	f7ff f938 	bl	b97c8 <__aeabi_dmul>
   ba558:	2301      	movs	r3, #1
   ba55a:	9a04      	ldr	r2, [sp, #16]
   ba55c:	3208      	adds	r2, #8
   ba55e:	f109 0901 	add.w	r9, r9, #1
   ba562:	ea4f 0868 	mov.w	r8, r8, asr #1
   ba566:	9204      	str	r2, [sp, #16]
   ba568:	e7c9      	b.n	ba4fe <_strtod_l+0x4de>
   ba56a:	d0ea      	beq.n	ba542 <_strtod_l+0x522>
   ba56c:	f1c8 0800 	rsb	r8, r8, #0
   ba570:	f018 020f 	ands.w	r2, r8, #15
   ba574:	d00a      	beq.n	ba58c <_strtod_l+0x56c>
   ba576:	4b13      	ldr	r3, [pc, #76]	; (ba5c4 <_strtod_l+0x5a4>)
   ba578:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   ba57c:	4650      	mov	r0, sl
   ba57e:	4659      	mov	r1, fp
   ba580:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba584:	f7ff fa4a 	bl	b9a1c <__aeabi_ddiv>
   ba588:	4682      	mov	sl, r0
   ba58a:	468b      	mov	fp, r1
   ba58c:	ea5f 1828 	movs.w	r8, r8, asr #4
   ba590:	d0d7      	beq.n	ba542 <_strtod_l+0x522>
   ba592:	f1b8 0f1f 	cmp.w	r8, #31
   ba596:	dd1f      	ble.n	ba5d8 <_strtod_l+0x5b8>
   ba598:	2500      	movs	r5, #0
   ba59a:	462e      	mov	r6, r5
   ba59c:	9507      	str	r5, [sp, #28]
   ba59e:	9505      	str	r5, [sp, #20]
   ba5a0:	2322      	movs	r3, #34	; 0x22
   ba5a2:	f04f 0a00 	mov.w	sl, #0
   ba5a6:	f04f 0b00 	mov.w	fp, #0
   ba5aa:	6023      	str	r3, [r4, #0]
   ba5ac:	e786      	b.n	ba4bc <_strtod_l+0x49c>
   ba5ae:	bf00      	nop
   ba5b0:	000bc87a 	.word	0x000bc87a
   ba5b4:	000bc894 	.word	0x000bc894
   ba5b8:	000bc871 	.word	0x000bc871
   ba5bc:	000bc874 	.word	0x000bc874
   ba5c0:	000bc292 	.word	0x000bc292
   ba5c4:	000bcae0 	.word	0x000bcae0
   ba5c8:	000bcab8 	.word	0x000bcab8
   ba5cc:	7ff00000 	.word	0x7ff00000
   ba5d0:	7ca00000 	.word	0x7ca00000
   ba5d4:	7fefffff 	.word	0x7fefffff
   ba5d8:	f018 0310 	ands.w	r3, r8, #16
   ba5dc:	bf18      	it	ne
   ba5de:	236a      	movne	r3, #106	; 0x6a
   ba5e0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; ba990 <_strtod_l+0x970>
   ba5e4:	9304      	str	r3, [sp, #16]
   ba5e6:	4650      	mov	r0, sl
   ba5e8:	4659      	mov	r1, fp
   ba5ea:	2300      	movs	r3, #0
   ba5ec:	f018 0f01 	tst.w	r8, #1
   ba5f0:	d004      	beq.n	ba5fc <_strtod_l+0x5dc>
   ba5f2:	e9d9 2300 	ldrd	r2, r3, [r9]
   ba5f6:	f7ff f8e7 	bl	b97c8 <__aeabi_dmul>
   ba5fa:	2301      	movs	r3, #1
   ba5fc:	ea5f 0868 	movs.w	r8, r8, asr #1
   ba600:	f109 0908 	add.w	r9, r9, #8
   ba604:	d1f2      	bne.n	ba5ec <_strtod_l+0x5cc>
   ba606:	b10b      	cbz	r3, ba60c <_strtod_l+0x5ec>
   ba608:	4682      	mov	sl, r0
   ba60a:	468b      	mov	fp, r1
   ba60c:	9b04      	ldr	r3, [sp, #16]
   ba60e:	b1c3      	cbz	r3, ba642 <_strtod_l+0x622>
   ba610:	f3cb 520a 	ubfx	r2, fp, #20, #11
   ba614:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   ba618:	2b00      	cmp	r3, #0
   ba61a:	4659      	mov	r1, fp
   ba61c:	dd11      	ble.n	ba642 <_strtod_l+0x622>
   ba61e:	2b1f      	cmp	r3, #31
   ba620:	f340 8124 	ble.w	ba86c <_strtod_l+0x84c>
   ba624:	2b34      	cmp	r3, #52	; 0x34
   ba626:	bfde      	ittt	le
   ba628:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   ba62c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   ba630:	fa03 f202 	lslle.w	r2, r3, r2
   ba634:	f04f 0a00 	mov.w	sl, #0
   ba638:	bfcc      	ite	gt
   ba63a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   ba63e:	ea02 0b01 	andle.w	fp, r2, r1
   ba642:	2200      	movs	r2, #0
   ba644:	2300      	movs	r3, #0
   ba646:	4650      	mov	r0, sl
   ba648:	4659      	mov	r1, fp
   ba64a:	f7ff fb25 	bl	b9c98 <__aeabi_dcmpeq>
   ba64e:	2800      	cmp	r0, #0
   ba650:	d1a2      	bne.n	ba598 <_strtod_l+0x578>
   ba652:	9b07      	ldr	r3, [sp, #28]
   ba654:	9300      	str	r3, [sp, #0]
   ba656:	9908      	ldr	r1, [sp, #32]
   ba658:	462b      	mov	r3, r5
   ba65a:	463a      	mov	r2, r7
   ba65c:	4620      	mov	r0, r4
   ba65e:	f001 f80d 	bl	bb67c <__s2b>
   ba662:	9007      	str	r0, [sp, #28]
   ba664:	2800      	cmp	r0, #0
   ba666:	f43f af1f 	beq.w	ba4a8 <_strtod_l+0x488>
   ba66a:	9b05      	ldr	r3, [sp, #20]
   ba66c:	1b9e      	subs	r6, r3, r6
   ba66e:	9b06      	ldr	r3, [sp, #24]
   ba670:	2b00      	cmp	r3, #0
   ba672:	bfb4      	ite	lt
   ba674:	4633      	movlt	r3, r6
   ba676:	2300      	movge	r3, #0
   ba678:	930c      	str	r3, [sp, #48]	; 0x30
   ba67a:	9b06      	ldr	r3, [sp, #24]
   ba67c:	2500      	movs	r5, #0
   ba67e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   ba682:	9312      	str	r3, [sp, #72]	; 0x48
   ba684:	462e      	mov	r6, r5
   ba686:	9b07      	ldr	r3, [sp, #28]
   ba688:	4620      	mov	r0, r4
   ba68a:	6859      	ldr	r1, [r3, #4]
   ba68c:	f000 ff4e 	bl	bb52c <_Balloc>
   ba690:	9005      	str	r0, [sp, #20]
   ba692:	2800      	cmp	r0, #0
   ba694:	f43f af0c 	beq.w	ba4b0 <_strtod_l+0x490>
   ba698:	9b07      	ldr	r3, [sp, #28]
   ba69a:	691a      	ldr	r2, [r3, #16]
   ba69c:	3202      	adds	r2, #2
   ba69e:	f103 010c 	add.w	r1, r3, #12
   ba6a2:	0092      	lsls	r2, r2, #2
   ba6a4:	300c      	adds	r0, #12
   ba6a6:	f7ff fbee 	bl	b9e86 <memcpy>
   ba6aa:	ec4b ab10 	vmov	d0, sl, fp
   ba6ae:	aa1a      	add	r2, sp, #104	; 0x68
   ba6b0:	a919      	add	r1, sp, #100	; 0x64
   ba6b2:	4620      	mov	r0, r4
   ba6b4:	f001 fb28 	bl	bbd08 <__d2b>
   ba6b8:	ec4b ab18 	vmov	d8, sl, fp
   ba6bc:	9018      	str	r0, [sp, #96]	; 0x60
   ba6be:	2800      	cmp	r0, #0
   ba6c0:	f43f aef6 	beq.w	ba4b0 <_strtod_l+0x490>
   ba6c4:	2101      	movs	r1, #1
   ba6c6:	4620      	mov	r0, r4
   ba6c8:	f001 f872 	bl	bb7b0 <__i2b>
   ba6cc:	4606      	mov	r6, r0
   ba6ce:	2800      	cmp	r0, #0
   ba6d0:	f43f aeee 	beq.w	ba4b0 <_strtod_l+0x490>
   ba6d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   ba6d6:	9904      	ldr	r1, [sp, #16]
   ba6d8:	2b00      	cmp	r3, #0
   ba6da:	bfab      	itete	ge
   ba6dc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   ba6de:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   ba6e0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   ba6e2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   ba6e6:	bfac      	ite	ge
   ba6e8:	eb03 0902 	addge.w	r9, r3, r2
   ba6ec:	1ad7      	sublt	r7, r2, r3
   ba6ee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   ba6f0:	eba3 0801 	sub.w	r8, r3, r1
   ba6f4:	4490      	add	r8, r2
   ba6f6:	4ba1      	ldr	r3, [pc, #644]	; (ba97c <_strtod_l+0x95c>)
   ba6f8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   ba6fc:	4598      	cmp	r8, r3
   ba6fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   ba702:	f280 80c7 	bge.w	ba894 <_strtod_l+0x874>
   ba706:	eba3 0308 	sub.w	r3, r3, r8
   ba70a:	2b1f      	cmp	r3, #31
   ba70c:	eba2 0203 	sub.w	r2, r2, r3
   ba710:	f04f 0101 	mov.w	r1, #1
   ba714:	f300 80b1 	bgt.w	ba87a <_strtod_l+0x85a>
   ba718:	fa01 f303 	lsl.w	r3, r1, r3
   ba71c:	930d      	str	r3, [sp, #52]	; 0x34
   ba71e:	2300      	movs	r3, #0
   ba720:	9308      	str	r3, [sp, #32]
   ba722:	eb09 0802 	add.w	r8, r9, r2
   ba726:	9b04      	ldr	r3, [sp, #16]
   ba728:	45c1      	cmp	r9, r8
   ba72a:	4417      	add	r7, r2
   ba72c:	441f      	add	r7, r3
   ba72e:	464b      	mov	r3, r9
   ba730:	bfa8      	it	ge
   ba732:	4643      	movge	r3, r8
   ba734:	42bb      	cmp	r3, r7
   ba736:	bfa8      	it	ge
   ba738:	463b      	movge	r3, r7
   ba73a:	2b00      	cmp	r3, #0
   ba73c:	bfc2      	ittt	gt
   ba73e:	eba8 0803 	subgt.w	r8, r8, r3
   ba742:	1aff      	subgt	r7, r7, r3
   ba744:	eba9 0903 	subgt.w	r9, r9, r3
   ba748:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   ba74a:	2b00      	cmp	r3, #0
   ba74c:	dd17      	ble.n	ba77e <_strtod_l+0x75e>
   ba74e:	4631      	mov	r1, r6
   ba750:	461a      	mov	r2, r3
   ba752:	4620      	mov	r0, r4
   ba754:	f001 f8ec 	bl	bb930 <__pow5mult>
   ba758:	4606      	mov	r6, r0
   ba75a:	2800      	cmp	r0, #0
   ba75c:	f43f aea8 	beq.w	ba4b0 <_strtod_l+0x490>
   ba760:	4601      	mov	r1, r0
   ba762:	9a18      	ldr	r2, [sp, #96]	; 0x60
   ba764:	4620      	mov	r0, r4
   ba766:	f001 f839 	bl	bb7dc <__multiply>
   ba76a:	900b      	str	r0, [sp, #44]	; 0x2c
   ba76c:	2800      	cmp	r0, #0
   ba76e:	f43f ae9f 	beq.w	ba4b0 <_strtod_l+0x490>
   ba772:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba774:	4620      	mov	r0, r4
   ba776:	f000 ff19 	bl	bb5ac <_Bfree>
   ba77a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba77c:	9318      	str	r3, [sp, #96]	; 0x60
   ba77e:	f1b8 0f00 	cmp.w	r8, #0
   ba782:	f300 808c 	bgt.w	ba89e <_strtod_l+0x87e>
   ba786:	9b06      	ldr	r3, [sp, #24]
   ba788:	2b00      	cmp	r3, #0
   ba78a:	dd08      	ble.n	ba79e <_strtod_l+0x77e>
   ba78c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   ba78e:	9905      	ldr	r1, [sp, #20]
   ba790:	4620      	mov	r0, r4
   ba792:	f001 f8cd 	bl	bb930 <__pow5mult>
   ba796:	9005      	str	r0, [sp, #20]
   ba798:	2800      	cmp	r0, #0
   ba79a:	f43f ae89 	beq.w	ba4b0 <_strtod_l+0x490>
   ba79e:	2f00      	cmp	r7, #0
   ba7a0:	dd08      	ble.n	ba7b4 <_strtod_l+0x794>
   ba7a2:	9905      	ldr	r1, [sp, #20]
   ba7a4:	463a      	mov	r2, r7
   ba7a6:	4620      	mov	r0, r4
   ba7a8:	f001 f91c 	bl	bb9e4 <__lshift>
   ba7ac:	9005      	str	r0, [sp, #20]
   ba7ae:	2800      	cmp	r0, #0
   ba7b0:	f43f ae7e 	beq.w	ba4b0 <_strtod_l+0x490>
   ba7b4:	f1b9 0f00 	cmp.w	r9, #0
   ba7b8:	dd08      	ble.n	ba7cc <_strtod_l+0x7ac>
   ba7ba:	4631      	mov	r1, r6
   ba7bc:	464a      	mov	r2, r9
   ba7be:	4620      	mov	r0, r4
   ba7c0:	f001 f910 	bl	bb9e4 <__lshift>
   ba7c4:	4606      	mov	r6, r0
   ba7c6:	2800      	cmp	r0, #0
   ba7c8:	f43f ae72 	beq.w	ba4b0 <_strtod_l+0x490>
   ba7cc:	9a05      	ldr	r2, [sp, #20]
   ba7ce:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba7d0:	4620      	mov	r0, r4
   ba7d2:	f001 f993 	bl	bbafc <__mdiff>
   ba7d6:	4605      	mov	r5, r0
   ba7d8:	2800      	cmp	r0, #0
   ba7da:	f43f ae69 	beq.w	ba4b0 <_strtod_l+0x490>
   ba7de:	68c3      	ldr	r3, [r0, #12]
   ba7e0:	930b      	str	r3, [sp, #44]	; 0x2c
   ba7e2:	2300      	movs	r3, #0
   ba7e4:	60c3      	str	r3, [r0, #12]
   ba7e6:	4631      	mov	r1, r6
   ba7e8:	f001 f96c 	bl	bbac4 <__mcmp>
   ba7ec:	2800      	cmp	r0, #0
   ba7ee:	da60      	bge.n	ba8b2 <_strtod_l+0x892>
   ba7f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba7f2:	ea53 030a 	orrs.w	r3, r3, sl
   ba7f6:	f040 8082 	bne.w	ba8fe <_strtod_l+0x8de>
   ba7fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ba7fe:	2b00      	cmp	r3, #0
   ba800:	d17d      	bne.n	ba8fe <_strtod_l+0x8de>
   ba802:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   ba806:	0d1b      	lsrs	r3, r3, #20
   ba808:	051b      	lsls	r3, r3, #20
   ba80a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   ba80e:	d976      	bls.n	ba8fe <_strtod_l+0x8de>
   ba810:	696b      	ldr	r3, [r5, #20]
   ba812:	b913      	cbnz	r3, ba81a <_strtod_l+0x7fa>
   ba814:	692b      	ldr	r3, [r5, #16]
   ba816:	2b01      	cmp	r3, #1
   ba818:	dd71      	ble.n	ba8fe <_strtod_l+0x8de>
   ba81a:	4629      	mov	r1, r5
   ba81c:	2201      	movs	r2, #1
   ba81e:	4620      	mov	r0, r4
   ba820:	f001 f8e0 	bl	bb9e4 <__lshift>
   ba824:	4631      	mov	r1, r6
   ba826:	4605      	mov	r5, r0
   ba828:	f001 f94c 	bl	bbac4 <__mcmp>
   ba82c:	2800      	cmp	r0, #0
   ba82e:	dd66      	ble.n	ba8fe <_strtod_l+0x8de>
   ba830:	9904      	ldr	r1, [sp, #16]
   ba832:	4a53      	ldr	r2, [pc, #332]	; (ba980 <_strtod_l+0x960>)
   ba834:	465b      	mov	r3, fp
   ba836:	2900      	cmp	r1, #0
   ba838:	f000 8081 	beq.w	ba93e <_strtod_l+0x91e>
   ba83c:	ea02 010b 	and.w	r1, r2, fp
   ba840:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   ba844:	dc7b      	bgt.n	ba93e <_strtod_l+0x91e>
   ba846:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   ba84a:	f77f aea9 	ble.w	ba5a0 <_strtod_l+0x580>
   ba84e:	4b4d      	ldr	r3, [pc, #308]	; (ba984 <_strtod_l+0x964>)
   ba850:	4650      	mov	r0, sl
   ba852:	4659      	mov	r1, fp
   ba854:	2200      	movs	r2, #0
   ba856:	f7fe ffb7 	bl	b97c8 <__aeabi_dmul>
   ba85a:	460b      	mov	r3, r1
   ba85c:	4303      	orrs	r3, r0
   ba85e:	bf08      	it	eq
   ba860:	2322      	moveq	r3, #34	; 0x22
   ba862:	4682      	mov	sl, r0
   ba864:	468b      	mov	fp, r1
   ba866:	bf08      	it	eq
   ba868:	6023      	streq	r3, [r4, #0]
   ba86a:	e62b      	b.n	ba4c4 <_strtod_l+0x4a4>
   ba86c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba870:	fa02 f303 	lsl.w	r3, r2, r3
   ba874:	ea03 0a0a 	and.w	sl, r3, sl
   ba878:	e6e3      	b.n	ba642 <_strtod_l+0x622>
   ba87a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   ba87e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   ba882:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   ba886:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   ba88a:	fa01 f308 	lsl.w	r3, r1, r8
   ba88e:	9308      	str	r3, [sp, #32]
   ba890:	910d      	str	r1, [sp, #52]	; 0x34
   ba892:	e746      	b.n	ba722 <_strtod_l+0x702>
   ba894:	2300      	movs	r3, #0
   ba896:	9308      	str	r3, [sp, #32]
   ba898:	2301      	movs	r3, #1
   ba89a:	930d      	str	r3, [sp, #52]	; 0x34
   ba89c:	e741      	b.n	ba722 <_strtod_l+0x702>
   ba89e:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba8a0:	4642      	mov	r2, r8
   ba8a2:	4620      	mov	r0, r4
   ba8a4:	f001 f89e 	bl	bb9e4 <__lshift>
   ba8a8:	9018      	str	r0, [sp, #96]	; 0x60
   ba8aa:	2800      	cmp	r0, #0
   ba8ac:	f47f af6b 	bne.w	ba786 <_strtod_l+0x766>
   ba8b0:	e5fe      	b.n	ba4b0 <_strtod_l+0x490>
   ba8b2:	465f      	mov	r7, fp
   ba8b4:	d16e      	bne.n	ba994 <_strtod_l+0x974>
   ba8b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   ba8b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ba8bc:	b342      	cbz	r2, ba910 <_strtod_l+0x8f0>
   ba8be:	4a32      	ldr	r2, [pc, #200]	; (ba988 <_strtod_l+0x968>)
   ba8c0:	4293      	cmp	r3, r2
   ba8c2:	d128      	bne.n	ba916 <_strtod_l+0x8f6>
   ba8c4:	9b04      	ldr	r3, [sp, #16]
   ba8c6:	4651      	mov	r1, sl
   ba8c8:	b1eb      	cbz	r3, ba906 <_strtod_l+0x8e6>
   ba8ca:	4b2d      	ldr	r3, [pc, #180]	; (ba980 <_strtod_l+0x960>)
   ba8cc:	403b      	ands	r3, r7
   ba8ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   ba8d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba8d6:	d819      	bhi.n	ba90c <_strtod_l+0x8ec>
   ba8d8:	0d1b      	lsrs	r3, r3, #20
   ba8da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   ba8de:	fa02 f303 	lsl.w	r3, r2, r3
   ba8e2:	4299      	cmp	r1, r3
   ba8e4:	d117      	bne.n	ba916 <_strtod_l+0x8f6>
   ba8e6:	4b29      	ldr	r3, [pc, #164]	; (ba98c <_strtod_l+0x96c>)
   ba8e8:	429f      	cmp	r7, r3
   ba8ea:	d102      	bne.n	ba8f2 <_strtod_l+0x8d2>
   ba8ec:	3101      	adds	r1, #1
   ba8ee:	f43f addf 	beq.w	ba4b0 <_strtod_l+0x490>
   ba8f2:	4b23      	ldr	r3, [pc, #140]	; (ba980 <_strtod_l+0x960>)
   ba8f4:	403b      	ands	r3, r7
   ba8f6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   ba8fa:	f04f 0a00 	mov.w	sl, #0
   ba8fe:	9b04      	ldr	r3, [sp, #16]
   ba900:	2b00      	cmp	r3, #0
   ba902:	d1a4      	bne.n	ba84e <_strtod_l+0x82e>
   ba904:	e5de      	b.n	ba4c4 <_strtod_l+0x4a4>
   ba906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba90a:	e7ea      	b.n	ba8e2 <_strtod_l+0x8c2>
   ba90c:	4613      	mov	r3, r2
   ba90e:	e7e8      	b.n	ba8e2 <_strtod_l+0x8c2>
   ba910:	ea53 030a 	orrs.w	r3, r3, sl
   ba914:	d08c      	beq.n	ba830 <_strtod_l+0x810>
   ba916:	9b08      	ldr	r3, [sp, #32]
   ba918:	b1db      	cbz	r3, ba952 <_strtod_l+0x932>
   ba91a:	423b      	tst	r3, r7
   ba91c:	d0ef      	beq.n	ba8fe <_strtod_l+0x8de>
   ba91e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba920:	9a04      	ldr	r2, [sp, #16]
   ba922:	4650      	mov	r0, sl
   ba924:	4659      	mov	r1, fp
   ba926:	b1c3      	cbz	r3, ba95a <_strtod_l+0x93a>
   ba928:	f7ff fb5c 	bl	b9fe4 <sulp>
   ba92c:	4602      	mov	r2, r0
   ba92e:	460b      	mov	r3, r1
   ba930:	ec51 0b18 	vmov	r0, r1, d8
   ba934:	f7fe fd92 	bl	b945c <__adddf3>
   ba938:	4682      	mov	sl, r0
   ba93a:	468b      	mov	fp, r1
   ba93c:	e7df      	b.n	ba8fe <_strtod_l+0x8de>
   ba93e:	4013      	ands	r3, r2
   ba940:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   ba944:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   ba948:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   ba94c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   ba950:	e7d5      	b.n	ba8fe <_strtod_l+0x8de>
   ba952:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   ba954:	ea13 0f0a 	tst.w	r3, sl
   ba958:	e7e0      	b.n	ba91c <_strtod_l+0x8fc>
   ba95a:	f7ff fb43 	bl	b9fe4 <sulp>
   ba95e:	4602      	mov	r2, r0
   ba960:	460b      	mov	r3, r1
   ba962:	ec51 0b18 	vmov	r0, r1, d8
   ba966:	f7fe fd77 	bl	b9458 <__aeabi_dsub>
   ba96a:	2200      	movs	r2, #0
   ba96c:	2300      	movs	r3, #0
   ba96e:	4682      	mov	sl, r0
   ba970:	468b      	mov	fp, r1
   ba972:	f7ff f991 	bl	b9c98 <__aeabi_dcmpeq>
   ba976:	2800      	cmp	r0, #0
   ba978:	d0c1      	beq.n	ba8fe <_strtod_l+0x8de>
   ba97a:	e611      	b.n	ba5a0 <_strtod_l+0x580>
   ba97c:	fffffc02 	.word	0xfffffc02
   ba980:	7ff00000 	.word	0x7ff00000
   ba984:	39500000 	.word	0x39500000
   ba988:	000fffff 	.word	0x000fffff
   ba98c:	7fefffff 	.word	0x7fefffff
   ba990:	000bc8a8 	.word	0x000bc8a8
   ba994:	4631      	mov	r1, r6
   ba996:	4628      	mov	r0, r5
   ba998:	f001 fa12 	bl	bbdc0 <__ratio>
   ba99c:	ec59 8b10 	vmov	r8, r9, d0
   ba9a0:	ee10 0a10 	vmov	r0, s0
   ba9a4:	2200      	movs	r2, #0
   ba9a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   ba9aa:	4649      	mov	r1, r9
   ba9ac:	f7ff f988 	bl	b9cc0 <__aeabi_dcmple>
   ba9b0:	2800      	cmp	r0, #0
   ba9b2:	d07a      	beq.n	baaaa <_strtod_l+0xa8a>
   ba9b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba9b6:	2b00      	cmp	r3, #0
   ba9b8:	d04a      	beq.n	baa50 <_strtod_l+0xa30>
   ba9ba:	4b95      	ldr	r3, [pc, #596]	; (bac10 <_strtod_l+0xbf0>)
   ba9bc:	2200      	movs	r2, #0
   ba9be:	e9cd 2308 	strd	r2, r3, [sp, #32]
   ba9c2:	f8df 924c 	ldr.w	r9, [pc, #588]	; bac10 <_strtod_l+0xbf0>
   ba9c6:	f04f 0800 	mov.w	r8, #0
   ba9ca:	4b92      	ldr	r3, [pc, #584]	; (bac14 <_strtod_l+0xbf4>)
   ba9cc:	403b      	ands	r3, r7
   ba9ce:	930d      	str	r3, [sp, #52]	; 0x34
   ba9d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   ba9d2:	4b91      	ldr	r3, [pc, #580]	; (bac18 <_strtod_l+0xbf8>)
   ba9d4:	429a      	cmp	r2, r3
   ba9d6:	f040 80b0 	bne.w	bab3a <_strtod_l+0xb1a>
   ba9da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ba9de:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   ba9e2:	ec4b ab10 	vmov	d0, sl, fp
   ba9e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
   ba9ea:	f001 f911 	bl	bbc10 <__ulp>
   ba9ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ba9f2:	ec53 2b10 	vmov	r2, r3, d0
   ba9f6:	f7fe fee7 	bl	b97c8 <__aeabi_dmul>
   ba9fa:	4652      	mov	r2, sl
   ba9fc:	465b      	mov	r3, fp
   ba9fe:	f7fe fd2d 	bl	b945c <__adddf3>
   baa02:	460b      	mov	r3, r1
   baa04:	4983      	ldr	r1, [pc, #524]	; (bac14 <_strtod_l+0xbf4>)
   baa06:	4a85      	ldr	r2, [pc, #532]	; (bac1c <_strtod_l+0xbfc>)
   baa08:	4019      	ands	r1, r3
   baa0a:	4291      	cmp	r1, r2
   baa0c:	4682      	mov	sl, r0
   baa0e:	d960      	bls.n	baad2 <_strtod_l+0xab2>
   baa10:	ee18 3a90 	vmov	r3, s17
   baa14:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   baa18:	4293      	cmp	r3, r2
   baa1a:	d104      	bne.n	baa26 <_strtod_l+0xa06>
   baa1c:	ee18 3a10 	vmov	r3, s16
   baa20:	3301      	adds	r3, #1
   baa22:	f43f ad45 	beq.w	ba4b0 <_strtod_l+0x490>
   baa26:	f8df b200 	ldr.w	fp, [pc, #512]	; bac28 <_strtod_l+0xc08>
   baa2a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   baa2e:	9918      	ldr	r1, [sp, #96]	; 0x60
   baa30:	4620      	mov	r0, r4
   baa32:	f000 fdbb 	bl	bb5ac <_Bfree>
   baa36:	9905      	ldr	r1, [sp, #20]
   baa38:	4620      	mov	r0, r4
   baa3a:	f000 fdb7 	bl	bb5ac <_Bfree>
   baa3e:	4631      	mov	r1, r6
   baa40:	4620      	mov	r0, r4
   baa42:	f000 fdb3 	bl	bb5ac <_Bfree>
   baa46:	4629      	mov	r1, r5
   baa48:	4620      	mov	r0, r4
   baa4a:	f000 fdaf 	bl	bb5ac <_Bfree>
   baa4e:	e61a      	b.n	ba686 <_strtod_l+0x666>
   baa50:	f1ba 0f00 	cmp.w	sl, #0
   baa54:	d11b      	bne.n	baa8e <_strtod_l+0xa6e>
   baa56:	f3cb 0313 	ubfx	r3, fp, #0, #20
   baa5a:	b9f3      	cbnz	r3, baa9a <_strtod_l+0xa7a>
   baa5c:	4b6c      	ldr	r3, [pc, #432]	; (bac10 <_strtod_l+0xbf0>)
   baa5e:	2200      	movs	r2, #0
   baa60:	4640      	mov	r0, r8
   baa62:	4649      	mov	r1, r9
   baa64:	f7ff f922 	bl	b9cac <__aeabi_dcmplt>
   baa68:	b9d0      	cbnz	r0, baaa0 <_strtod_l+0xa80>
   baa6a:	4640      	mov	r0, r8
   baa6c:	4649      	mov	r1, r9
   baa6e:	4b6c      	ldr	r3, [pc, #432]	; (bac20 <_strtod_l+0xc00>)
   baa70:	2200      	movs	r2, #0
   baa72:	f7fe fea9 	bl	b97c8 <__aeabi_dmul>
   baa76:	4680      	mov	r8, r0
   baa78:	4689      	mov	r9, r1
   baa7a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   baa7e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   baa82:	9315      	str	r3, [sp, #84]	; 0x54
   baa84:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   baa88:	e9cd 2308 	strd	r2, r3, [sp, #32]
   baa8c:	e79d      	b.n	ba9ca <_strtod_l+0x9aa>
   baa8e:	f1ba 0f01 	cmp.w	sl, #1
   baa92:	d102      	bne.n	baa9a <_strtod_l+0xa7a>
   baa94:	2f00      	cmp	r7, #0
   baa96:	f43f ad83 	beq.w	ba5a0 <_strtod_l+0x580>
   baa9a:	4b62      	ldr	r3, [pc, #392]	; (bac24 <_strtod_l+0xc04>)
   baa9c:	2200      	movs	r2, #0
   baa9e:	e78e      	b.n	ba9be <_strtod_l+0x99e>
   baaa0:	f8df 917c 	ldr.w	r9, [pc, #380]	; bac20 <_strtod_l+0xc00>
   baaa4:	f04f 0800 	mov.w	r8, #0
   baaa8:	e7e7      	b.n	baa7a <_strtod_l+0xa5a>
   baaaa:	4b5d      	ldr	r3, [pc, #372]	; (bac20 <_strtod_l+0xc00>)
   baaac:	4640      	mov	r0, r8
   baaae:	4649      	mov	r1, r9
   baab0:	2200      	movs	r2, #0
   baab2:	f7fe fe89 	bl	b97c8 <__aeabi_dmul>
   baab6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   baab8:	4680      	mov	r8, r0
   baaba:	4689      	mov	r9, r1
   baabc:	b933      	cbnz	r3, baacc <_strtod_l+0xaac>
   baabe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   baac2:	900e      	str	r0, [sp, #56]	; 0x38
   baac4:	930f      	str	r3, [sp, #60]	; 0x3c
   baac6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   baaca:	e7dd      	b.n	baa88 <_strtod_l+0xa68>
   baacc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   baad0:	e7f9      	b.n	baac6 <_strtod_l+0xaa6>
   baad2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   baad6:	9b04      	ldr	r3, [sp, #16]
   baad8:	2b00      	cmp	r3, #0
   baada:	d1a8      	bne.n	baa2e <_strtod_l+0xa0e>
   baadc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   baae0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   baae2:	0d1b      	lsrs	r3, r3, #20
   baae4:	051b      	lsls	r3, r3, #20
   baae6:	429a      	cmp	r2, r3
   baae8:	d1a1      	bne.n	baa2e <_strtod_l+0xa0e>
   baaea:	4640      	mov	r0, r8
   baaec:	4649      	mov	r1, r9
   baaee:	f001 fa05 	bl	bbefc <__aeabi_d2lz>
   baaf2:	f7fe fe3b 	bl	b976c <__aeabi_l2d>
   baaf6:	4602      	mov	r2, r0
   baaf8:	460b      	mov	r3, r1
   baafa:	4640      	mov	r0, r8
   baafc:	4649      	mov	r1, r9
   baafe:	f7fe fcab 	bl	b9458 <__aeabi_dsub>
   bab02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bab04:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bab08:	ea43 030a 	orr.w	r3, r3, sl
   bab0c:	4313      	orrs	r3, r2
   bab0e:	4680      	mov	r8, r0
   bab10:	4689      	mov	r9, r1
   bab12:	d055      	beq.n	babc0 <_strtod_l+0xba0>
   bab14:	a336      	add	r3, pc, #216	; (adr r3, babf0 <_strtod_l+0xbd0>)
   bab16:	e9d3 2300 	ldrd	r2, r3, [r3]
   bab1a:	f7ff f8c7 	bl	b9cac <__aeabi_dcmplt>
   bab1e:	2800      	cmp	r0, #0
   bab20:	f47f acd0 	bne.w	ba4c4 <_strtod_l+0x4a4>
   bab24:	a334      	add	r3, pc, #208	; (adr r3, babf8 <_strtod_l+0xbd8>)
   bab26:	e9d3 2300 	ldrd	r2, r3, [r3]
   bab2a:	4640      	mov	r0, r8
   bab2c:	4649      	mov	r1, r9
   bab2e:	f7ff f8db 	bl	b9ce8 <__aeabi_dcmpgt>
   bab32:	2800      	cmp	r0, #0
   bab34:	f43f af7b 	beq.w	baa2e <_strtod_l+0xa0e>
   bab38:	e4c4      	b.n	ba4c4 <_strtod_l+0x4a4>
   bab3a:	9b04      	ldr	r3, [sp, #16]
   bab3c:	b333      	cbz	r3, bab8c <_strtod_l+0xb6c>
   bab3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bab40:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bab44:	d822      	bhi.n	bab8c <_strtod_l+0xb6c>
   bab46:	a32e      	add	r3, pc, #184	; (adr r3, bac00 <_strtod_l+0xbe0>)
   bab48:	e9d3 2300 	ldrd	r2, r3, [r3]
   bab4c:	4640      	mov	r0, r8
   bab4e:	4649      	mov	r1, r9
   bab50:	f7ff f8b6 	bl	b9cc0 <__aeabi_dcmple>
   bab54:	b1a0      	cbz	r0, bab80 <_strtod_l+0xb60>
   bab56:	4649      	mov	r1, r9
   bab58:	4640      	mov	r0, r8
   bab5a:	f7ff f8e5 	bl	b9d28 <__aeabi_d2uiz>
   bab5e:	2801      	cmp	r0, #1
   bab60:	bf38      	it	cc
   bab62:	2001      	movcc	r0, #1
   bab64:	f7fe fdb6 	bl	b96d4 <__aeabi_ui2d>
   bab68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bab6a:	4680      	mov	r8, r0
   bab6c:	4689      	mov	r9, r1
   bab6e:	bb23      	cbnz	r3, babba <_strtod_l+0xb9a>
   bab70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bab74:	9010      	str	r0, [sp, #64]	; 0x40
   bab76:	9311      	str	r3, [sp, #68]	; 0x44
   bab78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bab7c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bab80:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bab82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bab84:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bab88:	1a9b      	subs	r3, r3, r2
   bab8a:	9309      	str	r3, [sp, #36]	; 0x24
   bab8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bab90:	eeb0 0a48 	vmov.f32	s0, s16
   bab94:	eef0 0a68 	vmov.f32	s1, s17
   bab98:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bab9c:	f001 f838 	bl	bbc10 <__ulp>
   baba0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   baba4:	ec53 2b10 	vmov	r2, r3, d0
   baba8:	f7fe fe0e 	bl	b97c8 <__aeabi_dmul>
   babac:	ec53 2b18 	vmov	r2, r3, d8
   babb0:	f7fe fc54 	bl	b945c <__adddf3>
   babb4:	4682      	mov	sl, r0
   babb6:	468b      	mov	fp, r1
   babb8:	e78d      	b.n	baad6 <_strtod_l+0xab6>
   babba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   babbe:	e7db      	b.n	bab78 <_strtod_l+0xb58>
   babc0:	a311      	add	r3, pc, #68	; (adr r3, bac08 <_strtod_l+0xbe8>)
   babc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   babc6:	f7ff f871 	bl	b9cac <__aeabi_dcmplt>
   babca:	e7b2      	b.n	bab32 <_strtod_l+0xb12>
   babcc:	2300      	movs	r3, #0
   babce:	930a      	str	r3, [sp, #40]	; 0x28
   babd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   babd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   babd4:	6013      	str	r3, [r2, #0]
   babd6:	f7ff ba6b 	b.w	ba0b0 <_strtod_l+0x90>
   babda:	2a65      	cmp	r2, #101	; 0x65
   babdc:	f43f ab5f 	beq.w	ba29e <_strtod_l+0x27e>
   babe0:	2a45      	cmp	r2, #69	; 0x45
   babe2:	f43f ab5c 	beq.w	ba29e <_strtod_l+0x27e>
   babe6:	2301      	movs	r3, #1
   babe8:	f7ff bb94 	b.w	ba314 <_strtod_l+0x2f4>
   babec:	f3af 8000 	nop.w
   babf0:	94a03595 	.word	0x94a03595
   babf4:	3fdfffff 	.word	0x3fdfffff
   babf8:	35afe535 	.word	0x35afe535
   babfc:	3fe00000 	.word	0x3fe00000
   bac00:	ffc00000 	.word	0xffc00000
   bac04:	41dfffff 	.word	0x41dfffff
   bac08:	94a03595 	.word	0x94a03595
   bac0c:	3fcfffff 	.word	0x3fcfffff
   bac10:	3ff00000 	.word	0x3ff00000
   bac14:	7ff00000 	.word	0x7ff00000
   bac18:	7fe00000 	.word	0x7fe00000
   bac1c:	7c9fffff 	.word	0x7c9fffff
   bac20:	3fe00000 	.word	0x3fe00000
   bac24:	bff00000 	.word	0xbff00000
   bac28:	7fefffff 	.word	0x7fefffff

000bac2c <strtod>:
   bac2c:	460a      	mov	r2, r1
   bac2e:	4601      	mov	r1, r0
   bac30:	4802      	ldr	r0, [pc, #8]	; (bac3c <strtod+0x10>)
   bac32:	4b03      	ldr	r3, [pc, #12]	; (bac40 <strtod+0x14>)
   bac34:	6800      	ldr	r0, [r0, #0]
   bac36:	f7ff b9f3 	b.w	ba020 <_strtod_l>
   bac3a:	bf00      	nop
   bac3c:	2003559c 	.word	0x2003559c
   bac40:	20035608 	.word	0x20035608

000bac44 <_strtol_l.constprop.0>:
   bac44:	2b01      	cmp	r3, #1
   bac46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bac4a:	d001      	beq.n	bac50 <_strtol_l.constprop.0+0xc>
   bac4c:	2b24      	cmp	r3, #36	; 0x24
   bac4e:	d906      	bls.n	bac5e <_strtol_l.constprop.0+0x1a>
   bac50:	f7fb fdf6 	bl	b6840 <__errno>
   bac54:	2316      	movs	r3, #22
   bac56:	6003      	str	r3, [r0, #0]
   bac58:	2000      	movs	r0, #0
   bac5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bac5e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bad44 <_strtol_l.constprop.0+0x100>
   bac62:	460d      	mov	r5, r1
   bac64:	462e      	mov	r6, r5
   bac66:	f815 4b01 	ldrb.w	r4, [r5], #1
   bac6a:	f814 700c 	ldrb.w	r7, [r4, ip]
   bac6e:	f017 0708 	ands.w	r7, r7, #8
   bac72:	d1f7      	bne.n	bac64 <_strtol_l.constprop.0+0x20>
   bac74:	2c2d      	cmp	r4, #45	; 0x2d
   bac76:	d132      	bne.n	bacde <_strtol_l.constprop.0+0x9a>
   bac78:	782c      	ldrb	r4, [r5, #0]
   bac7a:	2701      	movs	r7, #1
   bac7c:	1cb5      	adds	r5, r6, #2
   bac7e:	2b00      	cmp	r3, #0
   bac80:	d05b      	beq.n	bad3a <_strtol_l.constprop.0+0xf6>
   bac82:	2b10      	cmp	r3, #16
   bac84:	d109      	bne.n	bac9a <_strtol_l.constprop.0+0x56>
   bac86:	2c30      	cmp	r4, #48	; 0x30
   bac88:	d107      	bne.n	bac9a <_strtol_l.constprop.0+0x56>
   bac8a:	782c      	ldrb	r4, [r5, #0]
   bac8c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bac90:	2c58      	cmp	r4, #88	; 0x58
   bac92:	d14d      	bne.n	bad30 <_strtol_l.constprop.0+0xec>
   bac94:	786c      	ldrb	r4, [r5, #1]
   bac96:	2310      	movs	r3, #16
   bac98:	3502      	adds	r5, #2
   bac9a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bac9e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   baca2:	f04f 0c00 	mov.w	ip, #0
   baca6:	fbb8 f9f3 	udiv	r9, r8, r3
   bacaa:	4666      	mov	r6, ip
   bacac:	fb03 8a19 	mls	sl, r3, r9, r8
   bacb0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bacb4:	f1be 0f09 	cmp.w	lr, #9
   bacb8:	d816      	bhi.n	bace8 <_strtol_l.constprop.0+0xa4>
   bacba:	4674      	mov	r4, lr
   bacbc:	42a3      	cmp	r3, r4
   bacbe:	dd24      	ble.n	bad0a <_strtol_l.constprop.0+0xc6>
   bacc0:	f1bc 0f00 	cmp.w	ip, #0
   bacc4:	db1e      	blt.n	bad04 <_strtol_l.constprop.0+0xc0>
   bacc6:	45b1      	cmp	r9, r6
   bacc8:	d31c      	bcc.n	bad04 <_strtol_l.constprop.0+0xc0>
   bacca:	d101      	bne.n	bacd0 <_strtol_l.constprop.0+0x8c>
   baccc:	45a2      	cmp	sl, r4
   bacce:	db19      	blt.n	bad04 <_strtol_l.constprop.0+0xc0>
   bacd0:	fb06 4603 	mla	r6, r6, r3, r4
   bacd4:	f04f 0c01 	mov.w	ip, #1
   bacd8:	f815 4b01 	ldrb.w	r4, [r5], #1
   bacdc:	e7e8      	b.n	bacb0 <_strtol_l.constprop.0+0x6c>
   bacde:	2c2b      	cmp	r4, #43	; 0x2b
   bace0:	bf04      	itt	eq
   bace2:	782c      	ldrbeq	r4, [r5, #0]
   bace4:	1cb5      	addeq	r5, r6, #2
   bace6:	e7ca      	b.n	bac7e <_strtol_l.constprop.0+0x3a>
   bace8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bacec:	f1be 0f19 	cmp.w	lr, #25
   bacf0:	d801      	bhi.n	bacf6 <_strtol_l.constprop.0+0xb2>
   bacf2:	3c37      	subs	r4, #55	; 0x37
   bacf4:	e7e2      	b.n	bacbc <_strtol_l.constprop.0+0x78>
   bacf6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bacfa:	f1be 0f19 	cmp.w	lr, #25
   bacfe:	d804      	bhi.n	bad0a <_strtol_l.constprop.0+0xc6>
   bad00:	3c57      	subs	r4, #87	; 0x57
   bad02:	e7db      	b.n	bacbc <_strtol_l.constprop.0+0x78>
   bad04:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bad08:	e7e6      	b.n	bacd8 <_strtol_l.constprop.0+0x94>
   bad0a:	f1bc 0f00 	cmp.w	ip, #0
   bad0e:	da05      	bge.n	bad1c <_strtol_l.constprop.0+0xd8>
   bad10:	2322      	movs	r3, #34	; 0x22
   bad12:	6003      	str	r3, [r0, #0]
   bad14:	4646      	mov	r6, r8
   bad16:	b942      	cbnz	r2, bad2a <_strtol_l.constprop.0+0xe6>
   bad18:	4630      	mov	r0, r6
   bad1a:	e79e      	b.n	bac5a <_strtol_l.constprop.0+0x16>
   bad1c:	b107      	cbz	r7, bad20 <_strtol_l.constprop.0+0xdc>
   bad1e:	4276      	negs	r6, r6
   bad20:	2a00      	cmp	r2, #0
   bad22:	d0f9      	beq.n	bad18 <_strtol_l.constprop.0+0xd4>
   bad24:	f1bc 0f00 	cmp.w	ip, #0
   bad28:	d000      	beq.n	bad2c <_strtol_l.constprop.0+0xe8>
   bad2a:	1e69      	subs	r1, r5, #1
   bad2c:	6011      	str	r1, [r2, #0]
   bad2e:	e7f3      	b.n	bad18 <_strtol_l.constprop.0+0xd4>
   bad30:	2430      	movs	r4, #48	; 0x30
   bad32:	2b00      	cmp	r3, #0
   bad34:	d1b1      	bne.n	bac9a <_strtol_l.constprop.0+0x56>
   bad36:	2308      	movs	r3, #8
   bad38:	e7af      	b.n	bac9a <_strtol_l.constprop.0+0x56>
   bad3a:	2c30      	cmp	r4, #48	; 0x30
   bad3c:	d0a5      	beq.n	bac8a <_strtol_l.constprop.0+0x46>
   bad3e:	230a      	movs	r3, #10
   bad40:	e7ab      	b.n	bac9a <_strtol_l.constprop.0+0x56>
   bad42:	bf00      	nop
   bad44:	000bc8d1 	.word	0x000bc8d1

000bad48 <strtol>:
   bad48:	4613      	mov	r3, r2
   bad4a:	460a      	mov	r2, r1
   bad4c:	4601      	mov	r1, r0
   bad4e:	4802      	ldr	r0, [pc, #8]	; (bad58 <strtol+0x10>)
   bad50:	6800      	ldr	r0, [r0, #0]
   bad52:	f7ff bf77 	b.w	bac44 <_strtol_l.constprop.0>
   bad56:	bf00      	nop
   bad58:	2003559c 	.word	0x2003559c

000bad5c <__register_exitproc>:
   bad5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bad60:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bae1c <__register_exitproc+0xc0>
   bad64:	4606      	mov	r6, r0
   bad66:	f8d8 0000 	ldr.w	r0, [r8]
   bad6a:	461f      	mov	r7, r3
   bad6c:	460d      	mov	r5, r1
   bad6e:	4691      	mov	r9, r2
   bad70:	f000 fbc6 	bl	bb500 <__retarget_lock_acquire_recursive>
   bad74:	4b25      	ldr	r3, [pc, #148]	; (bae0c <__register_exitproc+0xb0>)
   bad76:	681c      	ldr	r4, [r3, #0]
   bad78:	b934      	cbnz	r4, bad88 <__register_exitproc+0x2c>
   bad7a:	4c25      	ldr	r4, [pc, #148]	; (bae10 <__register_exitproc+0xb4>)
   bad7c:	601c      	str	r4, [r3, #0]
   bad7e:	4b25      	ldr	r3, [pc, #148]	; (bae14 <__register_exitproc+0xb8>)
   bad80:	b113      	cbz	r3, bad88 <__register_exitproc+0x2c>
   bad82:	681b      	ldr	r3, [r3, #0]
   bad84:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bad88:	6863      	ldr	r3, [r4, #4]
   bad8a:	2b1f      	cmp	r3, #31
   bad8c:	dd07      	ble.n	bad9e <__register_exitproc+0x42>
   bad8e:	f8d8 0000 	ldr.w	r0, [r8]
   bad92:	f000 fbb7 	bl	bb504 <__retarget_lock_release_recursive>
   bad96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bad9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bad9e:	b34e      	cbz	r6, badf4 <__register_exitproc+0x98>
   bada0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bada4:	b988      	cbnz	r0, badca <__register_exitproc+0x6e>
   bada6:	4b1c      	ldr	r3, [pc, #112]	; (bae18 <__register_exitproc+0xbc>)
   bada8:	b923      	cbnz	r3, badb4 <__register_exitproc+0x58>
   badaa:	f8d8 0000 	ldr.w	r0, [r8]
   badae:	f000 fba8 	bl	bb502 <__retarget_lock_release>
   badb2:	e7f0      	b.n	bad96 <__register_exitproc+0x3a>
   badb4:	f44f 7084 	mov.w	r0, #264	; 0x108
   badb8:	f7fb fd12 	bl	b67e0 <malloc>
   badbc:	2800      	cmp	r0, #0
   badbe:	d0f4      	beq.n	badaa <__register_exitproc+0x4e>
   badc0:	2300      	movs	r3, #0
   badc2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   badc6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   badca:	6863      	ldr	r3, [r4, #4]
   badcc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   badd0:	2201      	movs	r2, #1
   badd2:	409a      	lsls	r2, r3
   badd4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   badd8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   baddc:	4313      	orrs	r3, r2
   badde:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bade2:	2e02      	cmp	r6, #2
   bade4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bade8:	bf02      	ittt	eq
   badea:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   badee:	4313      	orreq	r3, r2
   badf0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   badf4:	6863      	ldr	r3, [r4, #4]
   badf6:	f8d8 0000 	ldr.w	r0, [r8]
   badfa:	1c5a      	adds	r2, r3, #1
   badfc:	3302      	adds	r3, #2
   badfe:	6062      	str	r2, [r4, #4]
   bae00:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bae04:	f000 fb7e 	bl	bb504 <__retarget_lock_release_recursive>
   bae08:	2000      	movs	r0, #0
   bae0a:	e7c6      	b.n	bad9a <__register_exitproc+0x3e>
   bae0c:	2003e7e8 	.word	0x2003e7e8
   bae10:	2003e75c 	.word	0x2003e75c
   bae14:	00000000 	.word	0x00000000
   bae18:	000b67e1 	.word	0x000b67e1
   bae1c:	20035600 	.word	0x20035600

000bae20 <rshift>:
   bae20:	6903      	ldr	r3, [r0, #16]
   bae22:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bae26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bae2a:	ea4f 1261 	mov.w	r2, r1, asr #5
   bae2e:	f100 0414 	add.w	r4, r0, #20
   bae32:	dd45      	ble.n	baec0 <rshift+0xa0>
   bae34:	f011 011f 	ands.w	r1, r1, #31
   bae38:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bae3c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bae40:	d10c      	bne.n	bae5c <rshift+0x3c>
   bae42:	f100 0710 	add.w	r7, r0, #16
   bae46:	4629      	mov	r1, r5
   bae48:	42b1      	cmp	r1, r6
   bae4a:	d334      	bcc.n	baeb6 <rshift+0x96>
   bae4c:	1a9b      	subs	r3, r3, r2
   bae4e:	009b      	lsls	r3, r3, #2
   bae50:	1eea      	subs	r2, r5, #3
   bae52:	4296      	cmp	r6, r2
   bae54:	bf38      	it	cc
   bae56:	2300      	movcc	r3, #0
   bae58:	4423      	add	r3, r4
   bae5a:	e015      	b.n	bae88 <rshift+0x68>
   bae5c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bae60:	f1c1 0820 	rsb	r8, r1, #32
   bae64:	40cf      	lsrs	r7, r1
   bae66:	f105 0e04 	add.w	lr, r5, #4
   bae6a:	46a1      	mov	r9, r4
   bae6c:	4576      	cmp	r6, lr
   bae6e:	46f4      	mov	ip, lr
   bae70:	d815      	bhi.n	bae9e <rshift+0x7e>
   bae72:	1a9a      	subs	r2, r3, r2
   bae74:	0092      	lsls	r2, r2, #2
   bae76:	3a04      	subs	r2, #4
   bae78:	3501      	adds	r5, #1
   bae7a:	42ae      	cmp	r6, r5
   bae7c:	bf38      	it	cc
   bae7e:	2200      	movcc	r2, #0
   bae80:	18a3      	adds	r3, r4, r2
   bae82:	50a7      	str	r7, [r4, r2]
   bae84:	b107      	cbz	r7, bae88 <rshift+0x68>
   bae86:	3304      	adds	r3, #4
   bae88:	1b1a      	subs	r2, r3, r4
   bae8a:	42a3      	cmp	r3, r4
   bae8c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bae90:	bf08      	it	eq
   bae92:	2300      	moveq	r3, #0
   bae94:	6102      	str	r2, [r0, #16]
   bae96:	bf08      	it	eq
   bae98:	6143      	streq	r3, [r0, #20]
   bae9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bae9e:	f8dc c000 	ldr.w	ip, [ip]
   baea2:	fa0c fc08 	lsl.w	ip, ip, r8
   baea6:	ea4c 0707 	orr.w	r7, ip, r7
   baeaa:	f849 7b04 	str.w	r7, [r9], #4
   baeae:	f85e 7b04 	ldr.w	r7, [lr], #4
   baeb2:	40cf      	lsrs	r7, r1
   baeb4:	e7da      	b.n	bae6c <rshift+0x4c>
   baeb6:	f851 cb04 	ldr.w	ip, [r1], #4
   baeba:	f847 cf04 	str.w	ip, [r7, #4]!
   baebe:	e7c3      	b.n	bae48 <rshift+0x28>
   baec0:	4623      	mov	r3, r4
   baec2:	e7e1      	b.n	bae88 <rshift+0x68>

000baec4 <__hexdig_fun>:
   baec4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   baec8:	2b09      	cmp	r3, #9
   baeca:	d802      	bhi.n	baed2 <__hexdig_fun+0xe>
   baecc:	3820      	subs	r0, #32
   baece:	b2c0      	uxtb	r0, r0
   baed0:	4770      	bx	lr
   baed2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   baed6:	2b05      	cmp	r3, #5
   baed8:	d801      	bhi.n	baede <__hexdig_fun+0x1a>
   baeda:	3847      	subs	r0, #71	; 0x47
   baedc:	e7f7      	b.n	baece <__hexdig_fun+0xa>
   baede:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   baee2:	2b05      	cmp	r3, #5
   baee4:	d801      	bhi.n	baeea <__hexdig_fun+0x26>
   baee6:	3827      	subs	r0, #39	; 0x27
   baee8:	e7f1      	b.n	baece <__hexdig_fun+0xa>
   baeea:	2000      	movs	r0, #0
   baeec:	4770      	bx	lr
	...

000baef0 <__gethex>:
   baef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   baef4:	ed2d 8b02 	vpush	{d8}
   baef8:	b089      	sub	sp, #36	; 0x24
   baefa:	ee08 0a10 	vmov	s16, r0
   baefe:	9304      	str	r3, [sp, #16]
   baf00:	4bb4      	ldr	r3, [pc, #720]	; (bb1d4 <__gethex+0x2e4>)
   baf02:	681b      	ldr	r3, [r3, #0]
   baf04:	9301      	str	r3, [sp, #4]
   baf06:	4618      	mov	r0, r3
   baf08:	468b      	mov	fp, r1
   baf0a:	4690      	mov	r8, r2
   baf0c:	f7ff f82c 	bl	b9f68 <strlen>
   baf10:	9b01      	ldr	r3, [sp, #4]
   baf12:	f8db 2000 	ldr.w	r2, [fp]
   baf16:	4403      	add	r3, r0
   baf18:	4682      	mov	sl, r0
   baf1a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   baf1e:	9305      	str	r3, [sp, #20]
   baf20:	1c93      	adds	r3, r2, #2
   baf22:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   baf26:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   baf2a:	32fe      	adds	r2, #254	; 0xfe
   baf2c:	18d1      	adds	r1, r2, r3
   baf2e:	461f      	mov	r7, r3
   baf30:	f813 0b01 	ldrb.w	r0, [r3], #1
   baf34:	9100      	str	r1, [sp, #0]
   baf36:	2830      	cmp	r0, #48	; 0x30
   baf38:	d0f8      	beq.n	baf2c <__gethex+0x3c>
   baf3a:	f7ff ffc3 	bl	baec4 <__hexdig_fun>
   baf3e:	4604      	mov	r4, r0
   baf40:	2800      	cmp	r0, #0
   baf42:	d13a      	bne.n	bafba <__gethex+0xca>
   baf44:	9901      	ldr	r1, [sp, #4]
   baf46:	4652      	mov	r2, sl
   baf48:	4638      	mov	r0, r7
   baf4a:	f7ff f815 	bl	b9f78 <strncmp>
   baf4e:	4605      	mov	r5, r0
   baf50:	2800      	cmp	r0, #0
   baf52:	d168      	bne.n	bb026 <__gethex+0x136>
   baf54:	f817 000a 	ldrb.w	r0, [r7, sl]
   baf58:	eb07 060a 	add.w	r6, r7, sl
   baf5c:	f7ff ffb2 	bl	baec4 <__hexdig_fun>
   baf60:	2800      	cmp	r0, #0
   baf62:	d062      	beq.n	bb02a <__gethex+0x13a>
   baf64:	4633      	mov	r3, r6
   baf66:	7818      	ldrb	r0, [r3, #0]
   baf68:	2830      	cmp	r0, #48	; 0x30
   baf6a:	461f      	mov	r7, r3
   baf6c:	f103 0301 	add.w	r3, r3, #1
   baf70:	d0f9      	beq.n	baf66 <__gethex+0x76>
   baf72:	f7ff ffa7 	bl	baec4 <__hexdig_fun>
   baf76:	2301      	movs	r3, #1
   baf78:	fab0 f480 	clz	r4, r0
   baf7c:	0964      	lsrs	r4, r4, #5
   baf7e:	4635      	mov	r5, r6
   baf80:	9300      	str	r3, [sp, #0]
   baf82:	463a      	mov	r2, r7
   baf84:	4616      	mov	r6, r2
   baf86:	3201      	adds	r2, #1
   baf88:	7830      	ldrb	r0, [r6, #0]
   baf8a:	f7ff ff9b 	bl	baec4 <__hexdig_fun>
   baf8e:	2800      	cmp	r0, #0
   baf90:	d1f8      	bne.n	baf84 <__gethex+0x94>
   baf92:	9901      	ldr	r1, [sp, #4]
   baf94:	4652      	mov	r2, sl
   baf96:	4630      	mov	r0, r6
   baf98:	f7fe ffee 	bl	b9f78 <strncmp>
   baf9c:	b980      	cbnz	r0, bafc0 <__gethex+0xd0>
   baf9e:	b94d      	cbnz	r5, bafb4 <__gethex+0xc4>
   bafa0:	eb06 050a 	add.w	r5, r6, sl
   bafa4:	462a      	mov	r2, r5
   bafa6:	4616      	mov	r6, r2
   bafa8:	3201      	adds	r2, #1
   bafaa:	7830      	ldrb	r0, [r6, #0]
   bafac:	f7ff ff8a 	bl	baec4 <__hexdig_fun>
   bafb0:	2800      	cmp	r0, #0
   bafb2:	d1f8      	bne.n	bafa6 <__gethex+0xb6>
   bafb4:	1bad      	subs	r5, r5, r6
   bafb6:	00ad      	lsls	r5, r5, #2
   bafb8:	e004      	b.n	bafc4 <__gethex+0xd4>
   bafba:	2400      	movs	r4, #0
   bafbc:	4625      	mov	r5, r4
   bafbe:	e7e0      	b.n	baf82 <__gethex+0x92>
   bafc0:	2d00      	cmp	r5, #0
   bafc2:	d1f7      	bne.n	bafb4 <__gethex+0xc4>
   bafc4:	7833      	ldrb	r3, [r6, #0]
   bafc6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bafca:	2b50      	cmp	r3, #80	; 0x50
   bafcc:	d13b      	bne.n	bb046 <__gethex+0x156>
   bafce:	7873      	ldrb	r3, [r6, #1]
   bafd0:	2b2b      	cmp	r3, #43	; 0x2b
   bafd2:	d02c      	beq.n	bb02e <__gethex+0x13e>
   bafd4:	2b2d      	cmp	r3, #45	; 0x2d
   bafd6:	d02e      	beq.n	bb036 <__gethex+0x146>
   bafd8:	1c71      	adds	r1, r6, #1
   bafda:	f04f 0900 	mov.w	r9, #0
   bafde:	7808      	ldrb	r0, [r1, #0]
   bafe0:	f7ff ff70 	bl	baec4 <__hexdig_fun>
   bafe4:	1e43      	subs	r3, r0, #1
   bafe6:	b2db      	uxtb	r3, r3
   bafe8:	2b18      	cmp	r3, #24
   bafea:	d82c      	bhi.n	bb046 <__gethex+0x156>
   bafec:	f1a0 0210 	sub.w	r2, r0, #16
   baff0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   baff4:	f7ff ff66 	bl	baec4 <__hexdig_fun>
   baff8:	1e43      	subs	r3, r0, #1
   baffa:	b2db      	uxtb	r3, r3
   baffc:	2b18      	cmp	r3, #24
   baffe:	d91d      	bls.n	bb03c <__gethex+0x14c>
   bb000:	f1b9 0f00 	cmp.w	r9, #0
   bb004:	d000      	beq.n	bb008 <__gethex+0x118>
   bb006:	4252      	negs	r2, r2
   bb008:	4415      	add	r5, r2
   bb00a:	f8cb 1000 	str.w	r1, [fp]
   bb00e:	b1e4      	cbz	r4, bb04a <__gethex+0x15a>
   bb010:	9b00      	ldr	r3, [sp, #0]
   bb012:	2b00      	cmp	r3, #0
   bb014:	bf14      	ite	ne
   bb016:	2700      	movne	r7, #0
   bb018:	2706      	moveq	r7, #6
   bb01a:	4638      	mov	r0, r7
   bb01c:	b009      	add	sp, #36	; 0x24
   bb01e:	ecbd 8b02 	vpop	{d8}
   bb022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb026:	463e      	mov	r6, r7
   bb028:	4625      	mov	r5, r4
   bb02a:	2401      	movs	r4, #1
   bb02c:	e7ca      	b.n	bafc4 <__gethex+0xd4>
   bb02e:	f04f 0900 	mov.w	r9, #0
   bb032:	1cb1      	adds	r1, r6, #2
   bb034:	e7d3      	b.n	bafde <__gethex+0xee>
   bb036:	f04f 0901 	mov.w	r9, #1
   bb03a:	e7fa      	b.n	bb032 <__gethex+0x142>
   bb03c:	230a      	movs	r3, #10
   bb03e:	fb03 0202 	mla	r2, r3, r2, r0
   bb042:	3a10      	subs	r2, #16
   bb044:	e7d4      	b.n	baff0 <__gethex+0x100>
   bb046:	4631      	mov	r1, r6
   bb048:	e7df      	b.n	bb00a <__gethex+0x11a>
   bb04a:	1bf3      	subs	r3, r6, r7
   bb04c:	3b01      	subs	r3, #1
   bb04e:	4621      	mov	r1, r4
   bb050:	2b07      	cmp	r3, #7
   bb052:	dc0b      	bgt.n	bb06c <__gethex+0x17c>
   bb054:	ee18 0a10 	vmov	r0, s16
   bb058:	f000 fa68 	bl	bb52c <_Balloc>
   bb05c:	4604      	mov	r4, r0
   bb05e:	b940      	cbnz	r0, bb072 <__gethex+0x182>
   bb060:	4b5d      	ldr	r3, [pc, #372]	; (bb1d8 <__gethex+0x2e8>)
   bb062:	4602      	mov	r2, r0
   bb064:	21de      	movs	r1, #222	; 0xde
   bb066:	485d      	ldr	r0, [pc, #372]	; (bb1dc <__gethex+0x2ec>)
   bb068:	f7fb fbf2 	bl	b6850 <__assert_func>
   bb06c:	3101      	adds	r1, #1
   bb06e:	105b      	asrs	r3, r3, #1
   bb070:	e7ee      	b.n	bb050 <__gethex+0x160>
   bb072:	f100 0914 	add.w	r9, r0, #20
   bb076:	f04f 0b00 	mov.w	fp, #0
   bb07a:	f1ca 0301 	rsb	r3, sl, #1
   bb07e:	f8cd 9008 	str.w	r9, [sp, #8]
   bb082:	f8cd b000 	str.w	fp, [sp]
   bb086:	9306      	str	r3, [sp, #24]
   bb088:	42b7      	cmp	r7, r6
   bb08a:	d340      	bcc.n	bb10e <__gethex+0x21e>
   bb08c:	9802      	ldr	r0, [sp, #8]
   bb08e:	9b00      	ldr	r3, [sp, #0]
   bb090:	f840 3b04 	str.w	r3, [r0], #4
   bb094:	eba0 0009 	sub.w	r0, r0, r9
   bb098:	1080      	asrs	r0, r0, #2
   bb09a:	0146      	lsls	r6, r0, #5
   bb09c:	6120      	str	r0, [r4, #16]
   bb09e:	4618      	mov	r0, r3
   bb0a0:	f000 fb36 	bl	bb710 <__hi0bits>
   bb0a4:	1a30      	subs	r0, r6, r0
   bb0a6:	f8d8 6000 	ldr.w	r6, [r8]
   bb0aa:	42b0      	cmp	r0, r6
   bb0ac:	dd63      	ble.n	bb176 <__gethex+0x286>
   bb0ae:	1b87      	subs	r7, r0, r6
   bb0b0:	4639      	mov	r1, r7
   bb0b2:	4620      	mov	r0, r4
   bb0b4:	f000 feda 	bl	bbe6c <__any_on>
   bb0b8:	4682      	mov	sl, r0
   bb0ba:	b1a8      	cbz	r0, bb0e8 <__gethex+0x1f8>
   bb0bc:	1e7b      	subs	r3, r7, #1
   bb0be:	1159      	asrs	r1, r3, #5
   bb0c0:	f003 021f 	and.w	r2, r3, #31
   bb0c4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bb0c8:	f04f 0a01 	mov.w	sl, #1
   bb0cc:	fa0a f202 	lsl.w	r2, sl, r2
   bb0d0:	420a      	tst	r2, r1
   bb0d2:	d009      	beq.n	bb0e8 <__gethex+0x1f8>
   bb0d4:	4553      	cmp	r3, sl
   bb0d6:	dd05      	ble.n	bb0e4 <__gethex+0x1f4>
   bb0d8:	1eb9      	subs	r1, r7, #2
   bb0da:	4620      	mov	r0, r4
   bb0dc:	f000 fec6 	bl	bbe6c <__any_on>
   bb0e0:	2800      	cmp	r0, #0
   bb0e2:	d145      	bne.n	bb170 <__gethex+0x280>
   bb0e4:	f04f 0a02 	mov.w	sl, #2
   bb0e8:	4639      	mov	r1, r7
   bb0ea:	4620      	mov	r0, r4
   bb0ec:	f7ff fe98 	bl	bae20 <rshift>
   bb0f0:	443d      	add	r5, r7
   bb0f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bb0f6:	42ab      	cmp	r3, r5
   bb0f8:	da4c      	bge.n	bb194 <__gethex+0x2a4>
   bb0fa:	ee18 0a10 	vmov	r0, s16
   bb0fe:	4621      	mov	r1, r4
   bb100:	f000 fa54 	bl	bb5ac <_Bfree>
   bb104:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bb106:	2300      	movs	r3, #0
   bb108:	6013      	str	r3, [r2, #0]
   bb10a:	27a3      	movs	r7, #163	; 0xa3
   bb10c:	e785      	b.n	bb01a <__gethex+0x12a>
   bb10e:	1e73      	subs	r3, r6, #1
   bb110:	9a05      	ldr	r2, [sp, #20]
   bb112:	9303      	str	r3, [sp, #12]
   bb114:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bb118:	4293      	cmp	r3, r2
   bb11a:	d019      	beq.n	bb150 <__gethex+0x260>
   bb11c:	f1bb 0f20 	cmp.w	fp, #32
   bb120:	d107      	bne.n	bb132 <__gethex+0x242>
   bb122:	9b02      	ldr	r3, [sp, #8]
   bb124:	9a00      	ldr	r2, [sp, #0]
   bb126:	f843 2b04 	str.w	r2, [r3], #4
   bb12a:	9302      	str	r3, [sp, #8]
   bb12c:	2300      	movs	r3, #0
   bb12e:	9300      	str	r3, [sp, #0]
   bb130:	469b      	mov	fp, r3
   bb132:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bb136:	f7ff fec5 	bl	baec4 <__hexdig_fun>
   bb13a:	9b00      	ldr	r3, [sp, #0]
   bb13c:	f000 000f 	and.w	r0, r0, #15
   bb140:	fa00 f00b 	lsl.w	r0, r0, fp
   bb144:	4303      	orrs	r3, r0
   bb146:	9300      	str	r3, [sp, #0]
   bb148:	f10b 0b04 	add.w	fp, fp, #4
   bb14c:	9b03      	ldr	r3, [sp, #12]
   bb14e:	e00d      	b.n	bb16c <__gethex+0x27c>
   bb150:	9b03      	ldr	r3, [sp, #12]
   bb152:	9a06      	ldr	r2, [sp, #24]
   bb154:	4413      	add	r3, r2
   bb156:	42bb      	cmp	r3, r7
   bb158:	d3e0      	bcc.n	bb11c <__gethex+0x22c>
   bb15a:	4618      	mov	r0, r3
   bb15c:	9901      	ldr	r1, [sp, #4]
   bb15e:	9307      	str	r3, [sp, #28]
   bb160:	4652      	mov	r2, sl
   bb162:	f7fe ff09 	bl	b9f78 <strncmp>
   bb166:	9b07      	ldr	r3, [sp, #28]
   bb168:	2800      	cmp	r0, #0
   bb16a:	d1d7      	bne.n	bb11c <__gethex+0x22c>
   bb16c:	461e      	mov	r6, r3
   bb16e:	e78b      	b.n	bb088 <__gethex+0x198>
   bb170:	f04f 0a03 	mov.w	sl, #3
   bb174:	e7b8      	b.n	bb0e8 <__gethex+0x1f8>
   bb176:	da0a      	bge.n	bb18e <__gethex+0x29e>
   bb178:	1a37      	subs	r7, r6, r0
   bb17a:	4621      	mov	r1, r4
   bb17c:	ee18 0a10 	vmov	r0, s16
   bb180:	463a      	mov	r2, r7
   bb182:	f000 fc2f 	bl	bb9e4 <__lshift>
   bb186:	1bed      	subs	r5, r5, r7
   bb188:	4604      	mov	r4, r0
   bb18a:	f100 0914 	add.w	r9, r0, #20
   bb18e:	f04f 0a00 	mov.w	sl, #0
   bb192:	e7ae      	b.n	bb0f2 <__gethex+0x202>
   bb194:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bb198:	42a8      	cmp	r0, r5
   bb19a:	dd72      	ble.n	bb282 <__gethex+0x392>
   bb19c:	1b45      	subs	r5, r0, r5
   bb19e:	42ae      	cmp	r6, r5
   bb1a0:	dc36      	bgt.n	bb210 <__gethex+0x320>
   bb1a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bb1a6:	2b02      	cmp	r3, #2
   bb1a8:	d02a      	beq.n	bb200 <__gethex+0x310>
   bb1aa:	2b03      	cmp	r3, #3
   bb1ac:	d02c      	beq.n	bb208 <__gethex+0x318>
   bb1ae:	2b01      	cmp	r3, #1
   bb1b0:	d11c      	bne.n	bb1ec <__gethex+0x2fc>
   bb1b2:	42ae      	cmp	r6, r5
   bb1b4:	d11a      	bne.n	bb1ec <__gethex+0x2fc>
   bb1b6:	2e01      	cmp	r6, #1
   bb1b8:	d112      	bne.n	bb1e0 <__gethex+0x2f0>
   bb1ba:	9a04      	ldr	r2, [sp, #16]
   bb1bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bb1c0:	6013      	str	r3, [r2, #0]
   bb1c2:	2301      	movs	r3, #1
   bb1c4:	6123      	str	r3, [r4, #16]
   bb1c6:	f8c9 3000 	str.w	r3, [r9]
   bb1ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bb1cc:	2762      	movs	r7, #98	; 0x62
   bb1ce:	601c      	str	r4, [r3, #0]
   bb1d0:	e723      	b.n	bb01a <__gethex+0x12a>
   bb1d2:	bf00      	nop
   bb1d4:	000bca44 	.word	0x000bca44
   bb1d8:	000bc9d1 	.word	0x000bc9d1
   bb1dc:	000bc9e2 	.word	0x000bc9e2
   bb1e0:	1e71      	subs	r1, r6, #1
   bb1e2:	4620      	mov	r0, r4
   bb1e4:	f000 fe42 	bl	bbe6c <__any_on>
   bb1e8:	2800      	cmp	r0, #0
   bb1ea:	d1e6      	bne.n	bb1ba <__gethex+0x2ca>
   bb1ec:	ee18 0a10 	vmov	r0, s16
   bb1f0:	4621      	mov	r1, r4
   bb1f2:	f000 f9db 	bl	bb5ac <_Bfree>
   bb1f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bb1f8:	2300      	movs	r3, #0
   bb1fa:	6013      	str	r3, [r2, #0]
   bb1fc:	2750      	movs	r7, #80	; 0x50
   bb1fe:	e70c      	b.n	bb01a <__gethex+0x12a>
   bb200:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb202:	2b00      	cmp	r3, #0
   bb204:	d1f2      	bne.n	bb1ec <__gethex+0x2fc>
   bb206:	e7d8      	b.n	bb1ba <__gethex+0x2ca>
   bb208:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb20a:	2b00      	cmp	r3, #0
   bb20c:	d1d5      	bne.n	bb1ba <__gethex+0x2ca>
   bb20e:	e7ed      	b.n	bb1ec <__gethex+0x2fc>
   bb210:	1e6f      	subs	r7, r5, #1
   bb212:	f1ba 0f00 	cmp.w	sl, #0
   bb216:	d131      	bne.n	bb27c <__gethex+0x38c>
   bb218:	b127      	cbz	r7, bb224 <__gethex+0x334>
   bb21a:	4639      	mov	r1, r7
   bb21c:	4620      	mov	r0, r4
   bb21e:	f000 fe25 	bl	bbe6c <__any_on>
   bb222:	4682      	mov	sl, r0
   bb224:	117b      	asrs	r3, r7, #5
   bb226:	2101      	movs	r1, #1
   bb228:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bb22c:	f007 071f 	and.w	r7, r7, #31
   bb230:	fa01 f707 	lsl.w	r7, r1, r7
   bb234:	421f      	tst	r7, r3
   bb236:	4629      	mov	r1, r5
   bb238:	4620      	mov	r0, r4
   bb23a:	bf18      	it	ne
   bb23c:	f04a 0a02 	orrne.w	sl, sl, #2
   bb240:	1b76      	subs	r6, r6, r5
   bb242:	f7ff fded 	bl	bae20 <rshift>
   bb246:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bb24a:	2702      	movs	r7, #2
   bb24c:	f1ba 0f00 	cmp.w	sl, #0
   bb250:	d048      	beq.n	bb2e4 <__gethex+0x3f4>
   bb252:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bb256:	2b02      	cmp	r3, #2
   bb258:	d015      	beq.n	bb286 <__gethex+0x396>
   bb25a:	2b03      	cmp	r3, #3
   bb25c:	d017      	beq.n	bb28e <__gethex+0x39e>
   bb25e:	2b01      	cmp	r3, #1
   bb260:	d109      	bne.n	bb276 <__gethex+0x386>
   bb262:	f01a 0f02 	tst.w	sl, #2
   bb266:	d006      	beq.n	bb276 <__gethex+0x386>
   bb268:	f8d9 0000 	ldr.w	r0, [r9]
   bb26c:	ea4a 0a00 	orr.w	sl, sl, r0
   bb270:	f01a 0f01 	tst.w	sl, #1
   bb274:	d10e      	bne.n	bb294 <__gethex+0x3a4>
   bb276:	f047 0710 	orr.w	r7, r7, #16
   bb27a:	e033      	b.n	bb2e4 <__gethex+0x3f4>
   bb27c:	f04f 0a01 	mov.w	sl, #1
   bb280:	e7d0      	b.n	bb224 <__gethex+0x334>
   bb282:	2701      	movs	r7, #1
   bb284:	e7e2      	b.n	bb24c <__gethex+0x35c>
   bb286:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb288:	f1c3 0301 	rsb	r3, r3, #1
   bb28c:	9315      	str	r3, [sp, #84]	; 0x54
   bb28e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb290:	2b00      	cmp	r3, #0
   bb292:	d0f0      	beq.n	bb276 <__gethex+0x386>
   bb294:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bb298:	f104 0314 	add.w	r3, r4, #20
   bb29c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bb2a0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bb2a4:	f04f 0c00 	mov.w	ip, #0
   bb2a8:	4618      	mov	r0, r3
   bb2aa:	f853 2b04 	ldr.w	r2, [r3], #4
   bb2ae:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bb2b2:	d01c      	beq.n	bb2ee <__gethex+0x3fe>
   bb2b4:	3201      	adds	r2, #1
   bb2b6:	6002      	str	r2, [r0, #0]
   bb2b8:	2f02      	cmp	r7, #2
   bb2ba:	f104 0314 	add.w	r3, r4, #20
   bb2be:	d13f      	bne.n	bb340 <__gethex+0x450>
   bb2c0:	f8d8 2000 	ldr.w	r2, [r8]
   bb2c4:	3a01      	subs	r2, #1
   bb2c6:	42b2      	cmp	r2, r6
   bb2c8:	d10a      	bne.n	bb2e0 <__gethex+0x3f0>
   bb2ca:	1171      	asrs	r1, r6, #5
   bb2cc:	2201      	movs	r2, #1
   bb2ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bb2d2:	f006 061f 	and.w	r6, r6, #31
   bb2d6:	fa02 f606 	lsl.w	r6, r2, r6
   bb2da:	421e      	tst	r6, r3
   bb2dc:	bf18      	it	ne
   bb2de:	4617      	movne	r7, r2
   bb2e0:	f047 0720 	orr.w	r7, r7, #32
   bb2e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bb2e6:	601c      	str	r4, [r3, #0]
   bb2e8:	9b04      	ldr	r3, [sp, #16]
   bb2ea:	601d      	str	r5, [r3, #0]
   bb2ec:	e695      	b.n	bb01a <__gethex+0x12a>
   bb2ee:	4299      	cmp	r1, r3
   bb2f0:	f843 cc04 	str.w	ip, [r3, #-4]
   bb2f4:	d8d8      	bhi.n	bb2a8 <__gethex+0x3b8>
   bb2f6:	68a3      	ldr	r3, [r4, #8]
   bb2f8:	459b      	cmp	fp, r3
   bb2fa:	db19      	blt.n	bb330 <__gethex+0x440>
   bb2fc:	6861      	ldr	r1, [r4, #4]
   bb2fe:	ee18 0a10 	vmov	r0, s16
   bb302:	3101      	adds	r1, #1
   bb304:	f000 f912 	bl	bb52c <_Balloc>
   bb308:	4681      	mov	r9, r0
   bb30a:	b918      	cbnz	r0, bb314 <__gethex+0x424>
   bb30c:	4b1a      	ldr	r3, [pc, #104]	; (bb378 <__gethex+0x488>)
   bb30e:	4602      	mov	r2, r0
   bb310:	2184      	movs	r1, #132	; 0x84
   bb312:	e6a8      	b.n	bb066 <__gethex+0x176>
   bb314:	6922      	ldr	r2, [r4, #16]
   bb316:	3202      	adds	r2, #2
   bb318:	f104 010c 	add.w	r1, r4, #12
   bb31c:	0092      	lsls	r2, r2, #2
   bb31e:	300c      	adds	r0, #12
   bb320:	f7fe fdb1 	bl	b9e86 <memcpy>
   bb324:	4621      	mov	r1, r4
   bb326:	ee18 0a10 	vmov	r0, s16
   bb32a:	f000 f93f 	bl	bb5ac <_Bfree>
   bb32e:	464c      	mov	r4, r9
   bb330:	6923      	ldr	r3, [r4, #16]
   bb332:	1c5a      	adds	r2, r3, #1
   bb334:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bb338:	6122      	str	r2, [r4, #16]
   bb33a:	2201      	movs	r2, #1
   bb33c:	615a      	str	r2, [r3, #20]
   bb33e:	e7bb      	b.n	bb2b8 <__gethex+0x3c8>
   bb340:	6922      	ldr	r2, [r4, #16]
   bb342:	455a      	cmp	r2, fp
   bb344:	dd0b      	ble.n	bb35e <__gethex+0x46e>
   bb346:	2101      	movs	r1, #1
   bb348:	4620      	mov	r0, r4
   bb34a:	f7ff fd69 	bl	bae20 <rshift>
   bb34e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bb352:	3501      	adds	r5, #1
   bb354:	42ab      	cmp	r3, r5
   bb356:	f6ff aed0 	blt.w	bb0fa <__gethex+0x20a>
   bb35a:	2701      	movs	r7, #1
   bb35c:	e7c0      	b.n	bb2e0 <__gethex+0x3f0>
   bb35e:	f016 061f 	ands.w	r6, r6, #31
   bb362:	d0fa      	beq.n	bb35a <__gethex+0x46a>
   bb364:	4453      	add	r3, sl
   bb366:	f1c6 0620 	rsb	r6, r6, #32
   bb36a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bb36e:	f000 f9cf 	bl	bb710 <__hi0bits>
   bb372:	42b0      	cmp	r0, r6
   bb374:	dbe7      	blt.n	bb346 <__gethex+0x456>
   bb376:	e7f0      	b.n	bb35a <__gethex+0x46a>
   bb378:	000bc9d1 	.word	0x000bc9d1

000bb37c <L_shift>:
   bb37c:	f1c2 0208 	rsb	r2, r2, #8
   bb380:	0092      	lsls	r2, r2, #2
   bb382:	b570      	push	{r4, r5, r6, lr}
   bb384:	f1c2 0620 	rsb	r6, r2, #32
   bb388:	6843      	ldr	r3, [r0, #4]
   bb38a:	6804      	ldr	r4, [r0, #0]
   bb38c:	fa03 f506 	lsl.w	r5, r3, r6
   bb390:	432c      	orrs	r4, r5
   bb392:	40d3      	lsrs	r3, r2
   bb394:	6004      	str	r4, [r0, #0]
   bb396:	f840 3f04 	str.w	r3, [r0, #4]!
   bb39a:	4288      	cmp	r0, r1
   bb39c:	d3f4      	bcc.n	bb388 <L_shift+0xc>
   bb39e:	bd70      	pop	{r4, r5, r6, pc}

000bb3a0 <__match>:
   bb3a0:	b530      	push	{r4, r5, lr}
   bb3a2:	6803      	ldr	r3, [r0, #0]
   bb3a4:	3301      	adds	r3, #1
   bb3a6:	f811 4b01 	ldrb.w	r4, [r1], #1
   bb3aa:	b914      	cbnz	r4, bb3b2 <__match+0x12>
   bb3ac:	6003      	str	r3, [r0, #0]
   bb3ae:	2001      	movs	r0, #1
   bb3b0:	bd30      	pop	{r4, r5, pc}
   bb3b2:	f813 2b01 	ldrb.w	r2, [r3], #1
   bb3b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bb3ba:	2d19      	cmp	r5, #25
   bb3bc:	bf98      	it	ls
   bb3be:	3220      	addls	r2, #32
   bb3c0:	42a2      	cmp	r2, r4
   bb3c2:	d0f0      	beq.n	bb3a6 <__match+0x6>
   bb3c4:	2000      	movs	r0, #0
   bb3c6:	e7f3      	b.n	bb3b0 <__match+0x10>

000bb3c8 <__hexnan>:
   bb3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb3cc:	680b      	ldr	r3, [r1, #0]
   bb3ce:	115e      	asrs	r6, r3, #5
   bb3d0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bb3d4:	f013 031f 	ands.w	r3, r3, #31
   bb3d8:	b087      	sub	sp, #28
   bb3da:	bf18      	it	ne
   bb3dc:	3604      	addne	r6, #4
   bb3de:	2500      	movs	r5, #0
   bb3e0:	1f37      	subs	r7, r6, #4
   bb3e2:	4690      	mov	r8, r2
   bb3e4:	6802      	ldr	r2, [r0, #0]
   bb3e6:	9301      	str	r3, [sp, #4]
   bb3e8:	4682      	mov	sl, r0
   bb3ea:	f846 5c04 	str.w	r5, [r6, #-4]
   bb3ee:	46b9      	mov	r9, r7
   bb3f0:	463c      	mov	r4, r7
   bb3f2:	9502      	str	r5, [sp, #8]
   bb3f4:	46ab      	mov	fp, r5
   bb3f6:	7851      	ldrb	r1, [r2, #1]
   bb3f8:	1c53      	adds	r3, r2, #1
   bb3fa:	9303      	str	r3, [sp, #12]
   bb3fc:	b341      	cbz	r1, bb450 <__hexnan+0x88>
   bb3fe:	4608      	mov	r0, r1
   bb400:	9205      	str	r2, [sp, #20]
   bb402:	9104      	str	r1, [sp, #16]
   bb404:	f7ff fd5e 	bl	baec4 <__hexdig_fun>
   bb408:	2800      	cmp	r0, #0
   bb40a:	d14f      	bne.n	bb4ac <__hexnan+0xe4>
   bb40c:	9904      	ldr	r1, [sp, #16]
   bb40e:	9a05      	ldr	r2, [sp, #20]
   bb410:	2920      	cmp	r1, #32
   bb412:	d818      	bhi.n	bb446 <__hexnan+0x7e>
   bb414:	9b02      	ldr	r3, [sp, #8]
   bb416:	459b      	cmp	fp, r3
   bb418:	dd13      	ble.n	bb442 <__hexnan+0x7a>
   bb41a:	454c      	cmp	r4, r9
   bb41c:	d206      	bcs.n	bb42c <__hexnan+0x64>
   bb41e:	2d07      	cmp	r5, #7
   bb420:	dc04      	bgt.n	bb42c <__hexnan+0x64>
   bb422:	462a      	mov	r2, r5
   bb424:	4649      	mov	r1, r9
   bb426:	4620      	mov	r0, r4
   bb428:	f7ff ffa8 	bl	bb37c <L_shift>
   bb42c:	4544      	cmp	r4, r8
   bb42e:	d950      	bls.n	bb4d2 <__hexnan+0x10a>
   bb430:	2300      	movs	r3, #0
   bb432:	f1a4 0904 	sub.w	r9, r4, #4
   bb436:	f844 3c04 	str.w	r3, [r4, #-4]
   bb43a:	f8cd b008 	str.w	fp, [sp, #8]
   bb43e:	464c      	mov	r4, r9
   bb440:	461d      	mov	r5, r3
   bb442:	9a03      	ldr	r2, [sp, #12]
   bb444:	e7d7      	b.n	bb3f6 <__hexnan+0x2e>
   bb446:	2929      	cmp	r1, #41	; 0x29
   bb448:	d156      	bne.n	bb4f8 <__hexnan+0x130>
   bb44a:	3202      	adds	r2, #2
   bb44c:	f8ca 2000 	str.w	r2, [sl]
   bb450:	f1bb 0f00 	cmp.w	fp, #0
   bb454:	d050      	beq.n	bb4f8 <__hexnan+0x130>
   bb456:	454c      	cmp	r4, r9
   bb458:	d206      	bcs.n	bb468 <__hexnan+0xa0>
   bb45a:	2d07      	cmp	r5, #7
   bb45c:	dc04      	bgt.n	bb468 <__hexnan+0xa0>
   bb45e:	462a      	mov	r2, r5
   bb460:	4649      	mov	r1, r9
   bb462:	4620      	mov	r0, r4
   bb464:	f7ff ff8a 	bl	bb37c <L_shift>
   bb468:	4544      	cmp	r4, r8
   bb46a:	d934      	bls.n	bb4d6 <__hexnan+0x10e>
   bb46c:	f1a8 0204 	sub.w	r2, r8, #4
   bb470:	4623      	mov	r3, r4
   bb472:	f853 1b04 	ldr.w	r1, [r3], #4
   bb476:	f842 1f04 	str.w	r1, [r2, #4]!
   bb47a:	429f      	cmp	r7, r3
   bb47c:	d2f9      	bcs.n	bb472 <__hexnan+0xaa>
   bb47e:	1b3b      	subs	r3, r7, r4
   bb480:	f023 0303 	bic.w	r3, r3, #3
   bb484:	3304      	adds	r3, #4
   bb486:	3401      	adds	r4, #1
   bb488:	3e03      	subs	r6, #3
   bb48a:	42b4      	cmp	r4, r6
   bb48c:	bf88      	it	hi
   bb48e:	2304      	movhi	r3, #4
   bb490:	4443      	add	r3, r8
   bb492:	2200      	movs	r2, #0
   bb494:	f843 2b04 	str.w	r2, [r3], #4
   bb498:	429f      	cmp	r7, r3
   bb49a:	d2fb      	bcs.n	bb494 <__hexnan+0xcc>
   bb49c:	683b      	ldr	r3, [r7, #0]
   bb49e:	b91b      	cbnz	r3, bb4a8 <__hexnan+0xe0>
   bb4a0:	4547      	cmp	r7, r8
   bb4a2:	d127      	bne.n	bb4f4 <__hexnan+0x12c>
   bb4a4:	2301      	movs	r3, #1
   bb4a6:	603b      	str	r3, [r7, #0]
   bb4a8:	2005      	movs	r0, #5
   bb4aa:	e026      	b.n	bb4fa <__hexnan+0x132>
   bb4ac:	3501      	adds	r5, #1
   bb4ae:	2d08      	cmp	r5, #8
   bb4b0:	f10b 0b01 	add.w	fp, fp, #1
   bb4b4:	dd06      	ble.n	bb4c4 <__hexnan+0xfc>
   bb4b6:	4544      	cmp	r4, r8
   bb4b8:	d9c3      	bls.n	bb442 <__hexnan+0x7a>
   bb4ba:	2300      	movs	r3, #0
   bb4bc:	f844 3c04 	str.w	r3, [r4, #-4]
   bb4c0:	2501      	movs	r5, #1
   bb4c2:	3c04      	subs	r4, #4
   bb4c4:	6822      	ldr	r2, [r4, #0]
   bb4c6:	f000 000f 	and.w	r0, r0, #15
   bb4ca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bb4ce:	6022      	str	r2, [r4, #0]
   bb4d0:	e7b7      	b.n	bb442 <__hexnan+0x7a>
   bb4d2:	2508      	movs	r5, #8
   bb4d4:	e7b5      	b.n	bb442 <__hexnan+0x7a>
   bb4d6:	9b01      	ldr	r3, [sp, #4]
   bb4d8:	2b00      	cmp	r3, #0
   bb4da:	d0df      	beq.n	bb49c <__hexnan+0xd4>
   bb4dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb4e0:	f1c3 0320 	rsb	r3, r3, #32
   bb4e4:	fa22 f303 	lsr.w	r3, r2, r3
   bb4e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bb4ec:	401a      	ands	r2, r3
   bb4ee:	f846 2c04 	str.w	r2, [r6, #-4]
   bb4f2:	e7d3      	b.n	bb49c <__hexnan+0xd4>
   bb4f4:	3f04      	subs	r7, #4
   bb4f6:	e7d1      	b.n	bb49c <__hexnan+0xd4>
   bb4f8:	2004      	movs	r0, #4
   bb4fa:	b007      	add	sp, #28
   bb4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb500 <__retarget_lock_acquire_recursive>:
   bb500:	4770      	bx	lr

000bb502 <__retarget_lock_release>:
   bb502:	4770      	bx	lr

000bb504 <__retarget_lock_release_recursive>:
   bb504:	4770      	bx	lr

000bb506 <__ascii_mbtowc>:
   bb506:	b082      	sub	sp, #8
   bb508:	b901      	cbnz	r1, bb50c <__ascii_mbtowc+0x6>
   bb50a:	a901      	add	r1, sp, #4
   bb50c:	b142      	cbz	r2, bb520 <__ascii_mbtowc+0x1a>
   bb50e:	b14b      	cbz	r3, bb524 <__ascii_mbtowc+0x1e>
   bb510:	7813      	ldrb	r3, [r2, #0]
   bb512:	600b      	str	r3, [r1, #0]
   bb514:	7812      	ldrb	r2, [r2, #0]
   bb516:	1e10      	subs	r0, r2, #0
   bb518:	bf18      	it	ne
   bb51a:	2001      	movne	r0, #1
   bb51c:	b002      	add	sp, #8
   bb51e:	4770      	bx	lr
   bb520:	4610      	mov	r0, r2
   bb522:	e7fb      	b.n	bb51c <__ascii_mbtowc+0x16>
   bb524:	f06f 0001 	mvn.w	r0, #1
   bb528:	e7f8      	b.n	bb51c <__ascii_mbtowc+0x16>
	...

000bb52c <_Balloc>:
   bb52c:	b570      	push	{r4, r5, r6, lr}
   bb52e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bb530:	4604      	mov	r4, r0
   bb532:	460d      	mov	r5, r1
   bb534:	b976      	cbnz	r6, bb554 <_Balloc+0x28>
   bb536:	2010      	movs	r0, #16
   bb538:	f7fb f952 	bl	b67e0 <malloc>
   bb53c:	4602      	mov	r2, r0
   bb53e:	6260      	str	r0, [r4, #36]	; 0x24
   bb540:	b920      	cbnz	r0, bb54c <_Balloc+0x20>
   bb542:	4b18      	ldr	r3, [pc, #96]	; (bb5a4 <_Balloc+0x78>)
   bb544:	4818      	ldr	r0, [pc, #96]	; (bb5a8 <_Balloc+0x7c>)
   bb546:	2166      	movs	r1, #102	; 0x66
   bb548:	f7fb f982 	bl	b6850 <__assert_func>
   bb54c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bb550:	6006      	str	r6, [r0, #0]
   bb552:	60c6      	str	r6, [r0, #12]
   bb554:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bb556:	68f3      	ldr	r3, [r6, #12]
   bb558:	b183      	cbz	r3, bb57c <_Balloc+0x50>
   bb55a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bb55c:	68db      	ldr	r3, [r3, #12]
   bb55e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bb562:	b9b8      	cbnz	r0, bb594 <_Balloc+0x68>
   bb564:	2101      	movs	r1, #1
   bb566:	fa01 f605 	lsl.w	r6, r1, r5
   bb56a:	1d72      	adds	r2, r6, #5
   bb56c:	0092      	lsls	r2, r2, #2
   bb56e:	4620      	mov	r0, r4
   bb570:	f000 fc9d 	bl	bbeae <_calloc_r>
   bb574:	b160      	cbz	r0, bb590 <_Balloc+0x64>
   bb576:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bb57a:	e00e      	b.n	bb59a <_Balloc+0x6e>
   bb57c:	2221      	movs	r2, #33	; 0x21
   bb57e:	2104      	movs	r1, #4
   bb580:	4620      	mov	r0, r4
   bb582:	f000 fc94 	bl	bbeae <_calloc_r>
   bb586:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bb588:	60f0      	str	r0, [r6, #12]
   bb58a:	68db      	ldr	r3, [r3, #12]
   bb58c:	2b00      	cmp	r3, #0
   bb58e:	d1e4      	bne.n	bb55a <_Balloc+0x2e>
   bb590:	2000      	movs	r0, #0
   bb592:	bd70      	pop	{r4, r5, r6, pc}
   bb594:	6802      	ldr	r2, [r0, #0]
   bb596:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bb59a:	2300      	movs	r3, #0
   bb59c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bb5a0:	e7f7      	b.n	bb592 <_Balloc+0x66>
   bb5a2:	bf00      	nop
   bb5a4:	000bc801 	.word	0x000bc801
   bb5a8:	000bca58 	.word	0x000bca58

000bb5ac <_Bfree>:
   bb5ac:	b570      	push	{r4, r5, r6, lr}
   bb5ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bb5b0:	4605      	mov	r5, r0
   bb5b2:	460c      	mov	r4, r1
   bb5b4:	b976      	cbnz	r6, bb5d4 <_Bfree+0x28>
   bb5b6:	2010      	movs	r0, #16
   bb5b8:	f7fb f912 	bl	b67e0 <malloc>
   bb5bc:	4602      	mov	r2, r0
   bb5be:	6268      	str	r0, [r5, #36]	; 0x24
   bb5c0:	b920      	cbnz	r0, bb5cc <_Bfree+0x20>
   bb5c2:	4b09      	ldr	r3, [pc, #36]	; (bb5e8 <_Bfree+0x3c>)
   bb5c4:	4809      	ldr	r0, [pc, #36]	; (bb5ec <_Bfree+0x40>)
   bb5c6:	218a      	movs	r1, #138	; 0x8a
   bb5c8:	f7fb f942 	bl	b6850 <__assert_func>
   bb5cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bb5d0:	6006      	str	r6, [r0, #0]
   bb5d2:	60c6      	str	r6, [r0, #12]
   bb5d4:	b13c      	cbz	r4, bb5e6 <_Bfree+0x3a>
   bb5d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bb5d8:	6862      	ldr	r2, [r4, #4]
   bb5da:	68db      	ldr	r3, [r3, #12]
   bb5dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bb5e0:	6021      	str	r1, [r4, #0]
   bb5e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bb5e6:	bd70      	pop	{r4, r5, r6, pc}
   bb5e8:	000bc801 	.word	0x000bc801
   bb5ec:	000bca58 	.word	0x000bca58

000bb5f0 <__multadd>:
   bb5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb5f4:	690d      	ldr	r5, [r1, #16]
   bb5f6:	4607      	mov	r7, r0
   bb5f8:	460c      	mov	r4, r1
   bb5fa:	461e      	mov	r6, r3
   bb5fc:	f101 0c14 	add.w	ip, r1, #20
   bb600:	2000      	movs	r0, #0
   bb602:	f8dc 3000 	ldr.w	r3, [ip]
   bb606:	b299      	uxth	r1, r3
   bb608:	fb02 6101 	mla	r1, r2, r1, r6
   bb60c:	0c1e      	lsrs	r6, r3, #16
   bb60e:	0c0b      	lsrs	r3, r1, #16
   bb610:	fb02 3306 	mla	r3, r2, r6, r3
   bb614:	b289      	uxth	r1, r1
   bb616:	3001      	adds	r0, #1
   bb618:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bb61c:	4285      	cmp	r5, r0
   bb61e:	f84c 1b04 	str.w	r1, [ip], #4
   bb622:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bb626:	dcec      	bgt.n	bb602 <__multadd+0x12>
   bb628:	b30e      	cbz	r6, bb66e <__multadd+0x7e>
   bb62a:	68a3      	ldr	r3, [r4, #8]
   bb62c:	42ab      	cmp	r3, r5
   bb62e:	dc19      	bgt.n	bb664 <__multadd+0x74>
   bb630:	6861      	ldr	r1, [r4, #4]
   bb632:	4638      	mov	r0, r7
   bb634:	3101      	adds	r1, #1
   bb636:	f7ff ff79 	bl	bb52c <_Balloc>
   bb63a:	4680      	mov	r8, r0
   bb63c:	b928      	cbnz	r0, bb64a <__multadd+0x5a>
   bb63e:	4602      	mov	r2, r0
   bb640:	4b0c      	ldr	r3, [pc, #48]	; (bb674 <__multadd+0x84>)
   bb642:	480d      	ldr	r0, [pc, #52]	; (bb678 <__multadd+0x88>)
   bb644:	21b5      	movs	r1, #181	; 0xb5
   bb646:	f7fb f903 	bl	b6850 <__assert_func>
   bb64a:	6922      	ldr	r2, [r4, #16]
   bb64c:	3202      	adds	r2, #2
   bb64e:	f104 010c 	add.w	r1, r4, #12
   bb652:	0092      	lsls	r2, r2, #2
   bb654:	300c      	adds	r0, #12
   bb656:	f7fe fc16 	bl	b9e86 <memcpy>
   bb65a:	4621      	mov	r1, r4
   bb65c:	4638      	mov	r0, r7
   bb65e:	f7ff ffa5 	bl	bb5ac <_Bfree>
   bb662:	4644      	mov	r4, r8
   bb664:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bb668:	3501      	adds	r5, #1
   bb66a:	615e      	str	r6, [r3, #20]
   bb66c:	6125      	str	r5, [r4, #16]
   bb66e:	4620      	mov	r0, r4
   bb670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb674:	000bc9d1 	.word	0x000bc9d1
   bb678:	000bca58 	.word	0x000bca58

000bb67c <__s2b>:
   bb67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bb680:	460c      	mov	r4, r1
   bb682:	4615      	mov	r5, r2
   bb684:	461f      	mov	r7, r3
   bb686:	2209      	movs	r2, #9
   bb688:	3308      	adds	r3, #8
   bb68a:	4606      	mov	r6, r0
   bb68c:	fb93 f3f2 	sdiv	r3, r3, r2
   bb690:	2100      	movs	r1, #0
   bb692:	2201      	movs	r2, #1
   bb694:	429a      	cmp	r2, r3
   bb696:	db09      	blt.n	bb6ac <__s2b+0x30>
   bb698:	4630      	mov	r0, r6
   bb69a:	f7ff ff47 	bl	bb52c <_Balloc>
   bb69e:	b940      	cbnz	r0, bb6b2 <__s2b+0x36>
   bb6a0:	4602      	mov	r2, r0
   bb6a2:	4b19      	ldr	r3, [pc, #100]	; (bb708 <__s2b+0x8c>)
   bb6a4:	4819      	ldr	r0, [pc, #100]	; (bb70c <__s2b+0x90>)
   bb6a6:	21ce      	movs	r1, #206	; 0xce
   bb6a8:	f7fb f8d2 	bl	b6850 <__assert_func>
   bb6ac:	0052      	lsls	r2, r2, #1
   bb6ae:	3101      	adds	r1, #1
   bb6b0:	e7f0      	b.n	bb694 <__s2b+0x18>
   bb6b2:	9b08      	ldr	r3, [sp, #32]
   bb6b4:	6143      	str	r3, [r0, #20]
   bb6b6:	2d09      	cmp	r5, #9
   bb6b8:	f04f 0301 	mov.w	r3, #1
   bb6bc:	6103      	str	r3, [r0, #16]
   bb6be:	dd16      	ble.n	bb6ee <__s2b+0x72>
   bb6c0:	f104 0909 	add.w	r9, r4, #9
   bb6c4:	46c8      	mov	r8, r9
   bb6c6:	442c      	add	r4, r5
   bb6c8:	f818 3b01 	ldrb.w	r3, [r8], #1
   bb6cc:	4601      	mov	r1, r0
   bb6ce:	3b30      	subs	r3, #48	; 0x30
   bb6d0:	220a      	movs	r2, #10
   bb6d2:	4630      	mov	r0, r6
   bb6d4:	f7ff ff8c 	bl	bb5f0 <__multadd>
   bb6d8:	45a0      	cmp	r8, r4
   bb6da:	d1f5      	bne.n	bb6c8 <__s2b+0x4c>
   bb6dc:	f1a5 0408 	sub.w	r4, r5, #8
   bb6e0:	444c      	add	r4, r9
   bb6e2:	1b2d      	subs	r5, r5, r4
   bb6e4:	1963      	adds	r3, r4, r5
   bb6e6:	42bb      	cmp	r3, r7
   bb6e8:	db04      	blt.n	bb6f4 <__s2b+0x78>
   bb6ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bb6ee:	340a      	adds	r4, #10
   bb6f0:	2509      	movs	r5, #9
   bb6f2:	e7f6      	b.n	bb6e2 <__s2b+0x66>
   bb6f4:	f814 3b01 	ldrb.w	r3, [r4], #1
   bb6f8:	4601      	mov	r1, r0
   bb6fa:	3b30      	subs	r3, #48	; 0x30
   bb6fc:	220a      	movs	r2, #10
   bb6fe:	4630      	mov	r0, r6
   bb700:	f7ff ff76 	bl	bb5f0 <__multadd>
   bb704:	e7ee      	b.n	bb6e4 <__s2b+0x68>
   bb706:	bf00      	nop
   bb708:	000bc9d1 	.word	0x000bc9d1
   bb70c:	000bca58 	.word	0x000bca58

000bb710 <__hi0bits>:
   bb710:	0c03      	lsrs	r3, r0, #16
   bb712:	041b      	lsls	r3, r3, #16
   bb714:	b9d3      	cbnz	r3, bb74c <__hi0bits+0x3c>
   bb716:	0400      	lsls	r0, r0, #16
   bb718:	2310      	movs	r3, #16
   bb71a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bb71e:	bf04      	itt	eq
   bb720:	0200      	lsleq	r0, r0, #8
   bb722:	3308      	addeq	r3, #8
   bb724:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bb728:	bf04      	itt	eq
   bb72a:	0100      	lsleq	r0, r0, #4
   bb72c:	3304      	addeq	r3, #4
   bb72e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bb732:	bf04      	itt	eq
   bb734:	0080      	lsleq	r0, r0, #2
   bb736:	3302      	addeq	r3, #2
   bb738:	2800      	cmp	r0, #0
   bb73a:	db05      	blt.n	bb748 <__hi0bits+0x38>
   bb73c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bb740:	f103 0301 	add.w	r3, r3, #1
   bb744:	bf08      	it	eq
   bb746:	2320      	moveq	r3, #32
   bb748:	4618      	mov	r0, r3
   bb74a:	4770      	bx	lr
   bb74c:	2300      	movs	r3, #0
   bb74e:	e7e4      	b.n	bb71a <__hi0bits+0xa>

000bb750 <__lo0bits>:
   bb750:	6803      	ldr	r3, [r0, #0]
   bb752:	f013 0207 	ands.w	r2, r3, #7
   bb756:	4601      	mov	r1, r0
   bb758:	d00b      	beq.n	bb772 <__lo0bits+0x22>
   bb75a:	07da      	lsls	r2, r3, #31
   bb75c:	d423      	bmi.n	bb7a6 <__lo0bits+0x56>
   bb75e:	0798      	lsls	r0, r3, #30
   bb760:	bf49      	itett	mi
   bb762:	085b      	lsrmi	r3, r3, #1
   bb764:	089b      	lsrpl	r3, r3, #2
   bb766:	2001      	movmi	r0, #1
   bb768:	600b      	strmi	r3, [r1, #0]
   bb76a:	bf5c      	itt	pl
   bb76c:	600b      	strpl	r3, [r1, #0]
   bb76e:	2002      	movpl	r0, #2
   bb770:	4770      	bx	lr
   bb772:	b298      	uxth	r0, r3
   bb774:	b9a8      	cbnz	r0, bb7a2 <__lo0bits+0x52>
   bb776:	0c1b      	lsrs	r3, r3, #16
   bb778:	2010      	movs	r0, #16
   bb77a:	b2da      	uxtb	r2, r3
   bb77c:	b90a      	cbnz	r2, bb782 <__lo0bits+0x32>
   bb77e:	3008      	adds	r0, #8
   bb780:	0a1b      	lsrs	r3, r3, #8
   bb782:	071a      	lsls	r2, r3, #28
   bb784:	bf04      	itt	eq
   bb786:	091b      	lsreq	r3, r3, #4
   bb788:	3004      	addeq	r0, #4
   bb78a:	079a      	lsls	r2, r3, #30
   bb78c:	bf04      	itt	eq
   bb78e:	089b      	lsreq	r3, r3, #2
   bb790:	3002      	addeq	r0, #2
   bb792:	07da      	lsls	r2, r3, #31
   bb794:	d403      	bmi.n	bb79e <__lo0bits+0x4e>
   bb796:	085b      	lsrs	r3, r3, #1
   bb798:	f100 0001 	add.w	r0, r0, #1
   bb79c:	d005      	beq.n	bb7aa <__lo0bits+0x5a>
   bb79e:	600b      	str	r3, [r1, #0]
   bb7a0:	4770      	bx	lr
   bb7a2:	4610      	mov	r0, r2
   bb7a4:	e7e9      	b.n	bb77a <__lo0bits+0x2a>
   bb7a6:	2000      	movs	r0, #0
   bb7a8:	4770      	bx	lr
   bb7aa:	2020      	movs	r0, #32
   bb7ac:	4770      	bx	lr
	...

000bb7b0 <__i2b>:
   bb7b0:	b510      	push	{r4, lr}
   bb7b2:	460c      	mov	r4, r1
   bb7b4:	2101      	movs	r1, #1
   bb7b6:	f7ff feb9 	bl	bb52c <_Balloc>
   bb7ba:	4602      	mov	r2, r0
   bb7bc:	b928      	cbnz	r0, bb7ca <__i2b+0x1a>
   bb7be:	4b05      	ldr	r3, [pc, #20]	; (bb7d4 <__i2b+0x24>)
   bb7c0:	4805      	ldr	r0, [pc, #20]	; (bb7d8 <__i2b+0x28>)
   bb7c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bb7c6:	f7fb f843 	bl	b6850 <__assert_func>
   bb7ca:	2301      	movs	r3, #1
   bb7cc:	6144      	str	r4, [r0, #20]
   bb7ce:	6103      	str	r3, [r0, #16]
   bb7d0:	bd10      	pop	{r4, pc}
   bb7d2:	bf00      	nop
   bb7d4:	000bc9d1 	.word	0x000bc9d1
   bb7d8:	000bca58 	.word	0x000bca58

000bb7dc <__multiply>:
   bb7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb7e0:	4691      	mov	r9, r2
   bb7e2:	690a      	ldr	r2, [r1, #16]
   bb7e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bb7e8:	429a      	cmp	r2, r3
   bb7ea:	bfb8      	it	lt
   bb7ec:	460b      	movlt	r3, r1
   bb7ee:	460c      	mov	r4, r1
   bb7f0:	bfbc      	itt	lt
   bb7f2:	464c      	movlt	r4, r9
   bb7f4:	4699      	movlt	r9, r3
   bb7f6:	6927      	ldr	r7, [r4, #16]
   bb7f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bb7fc:	68a3      	ldr	r3, [r4, #8]
   bb7fe:	6861      	ldr	r1, [r4, #4]
   bb800:	eb07 060a 	add.w	r6, r7, sl
   bb804:	42b3      	cmp	r3, r6
   bb806:	b085      	sub	sp, #20
   bb808:	bfb8      	it	lt
   bb80a:	3101      	addlt	r1, #1
   bb80c:	f7ff fe8e 	bl	bb52c <_Balloc>
   bb810:	b930      	cbnz	r0, bb820 <__multiply+0x44>
   bb812:	4602      	mov	r2, r0
   bb814:	4b44      	ldr	r3, [pc, #272]	; (bb928 <__multiply+0x14c>)
   bb816:	4845      	ldr	r0, [pc, #276]	; (bb92c <__multiply+0x150>)
   bb818:	f240 115d 	movw	r1, #349	; 0x15d
   bb81c:	f7fb f818 	bl	b6850 <__assert_func>
   bb820:	f100 0514 	add.w	r5, r0, #20
   bb824:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bb828:	462b      	mov	r3, r5
   bb82a:	2200      	movs	r2, #0
   bb82c:	4543      	cmp	r3, r8
   bb82e:	d321      	bcc.n	bb874 <__multiply+0x98>
   bb830:	f104 0314 	add.w	r3, r4, #20
   bb834:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bb838:	f109 0314 	add.w	r3, r9, #20
   bb83c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bb840:	9202      	str	r2, [sp, #8]
   bb842:	1b3a      	subs	r2, r7, r4
   bb844:	3a15      	subs	r2, #21
   bb846:	f022 0203 	bic.w	r2, r2, #3
   bb84a:	3204      	adds	r2, #4
   bb84c:	f104 0115 	add.w	r1, r4, #21
   bb850:	428f      	cmp	r7, r1
   bb852:	bf38      	it	cc
   bb854:	2204      	movcc	r2, #4
   bb856:	9201      	str	r2, [sp, #4]
   bb858:	9a02      	ldr	r2, [sp, #8]
   bb85a:	9303      	str	r3, [sp, #12]
   bb85c:	429a      	cmp	r2, r3
   bb85e:	d80c      	bhi.n	bb87a <__multiply+0x9e>
   bb860:	2e00      	cmp	r6, #0
   bb862:	dd03      	ble.n	bb86c <__multiply+0x90>
   bb864:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bb868:	2b00      	cmp	r3, #0
   bb86a:	d05a      	beq.n	bb922 <__multiply+0x146>
   bb86c:	6106      	str	r6, [r0, #16]
   bb86e:	b005      	add	sp, #20
   bb870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb874:	f843 2b04 	str.w	r2, [r3], #4
   bb878:	e7d8      	b.n	bb82c <__multiply+0x50>
   bb87a:	f8b3 a000 	ldrh.w	sl, [r3]
   bb87e:	f1ba 0f00 	cmp.w	sl, #0
   bb882:	d024      	beq.n	bb8ce <__multiply+0xf2>
   bb884:	f104 0e14 	add.w	lr, r4, #20
   bb888:	46a9      	mov	r9, r5
   bb88a:	f04f 0c00 	mov.w	ip, #0
   bb88e:	f85e 2b04 	ldr.w	r2, [lr], #4
   bb892:	f8d9 1000 	ldr.w	r1, [r9]
   bb896:	fa1f fb82 	uxth.w	fp, r2
   bb89a:	b289      	uxth	r1, r1
   bb89c:	fb0a 110b 	mla	r1, sl, fp, r1
   bb8a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bb8a4:	f8d9 2000 	ldr.w	r2, [r9]
   bb8a8:	4461      	add	r1, ip
   bb8aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bb8ae:	fb0a c20b 	mla	r2, sl, fp, ip
   bb8b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bb8b6:	b289      	uxth	r1, r1
   bb8b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bb8bc:	4577      	cmp	r7, lr
   bb8be:	f849 1b04 	str.w	r1, [r9], #4
   bb8c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bb8c6:	d8e2      	bhi.n	bb88e <__multiply+0xb2>
   bb8c8:	9a01      	ldr	r2, [sp, #4]
   bb8ca:	f845 c002 	str.w	ip, [r5, r2]
   bb8ce:	9a03      	ldr	r2, [sp, #12]
   bb8d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bb8d4:	3304      	adds	r3, #4
   bb8d6:	f1b9 0f00 	cmp.w	r9, #0
   bb8da:	d020      	beq.n	bb91e <__multiply+0x142>
   bb8dc:	6829      	ldr	r1, [r5, #0]
   bb8de:	f104 0c14 	add.w	ip, r4, #20
   bb8e2:	46ae      	mov	lr, r5
   bb8e4:	f04f 0a00 	mov.w	sl, #0
   bb8e8:	f8bc b000 	ldrh.w	fp, [ip]
   bb8ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bb8f0:	fb09 220b 	mla	r2, r9, fp, r2
   bb8f4:	4492      	add	sl, r2
   bb8f6:	b289      	uxth	r1, r1
   bb8f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bb8fc:	f84e 1b04 	str.w	r1, [lr], #4
   bb900:	f85c 2b04 	ldr.w	r2, [ip], #4
   bb904:	f8be 1000 	ldrh.w	r1, [lr]
   bb908:	0c12      	lsrs	r2, r2, #16
   bb90a:	fb09 1102 	mla	r1, r9, r2, r1
   bb90e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bb912:	4567      	cmp	r7, ip
   bb914:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bb918:	d8e6      	bhi.n	bb8e8 <__multiply+0x10c>
   bb91a:	9a01      	ldr	r2, [sp, #4]
   bb91c:	50a9      	str	r1, [r5, r2]
   bb91e:	3504      	adds	r5, #4
   bb920:	e79a      	b.n	bb858 <__multiply+0x7c>
   bb922:	3e01      	subs	r6, #1
   bb924:	e79c      	b.n	bb860 <__multiply+0x84>
   bb926:	bf00      	nop
   bb928:	000bc9d1 	.word	0x000bc9d1
   bb92c:	000bca58 	.word	0x000bca58

000bb930 <__pow5mult>:
   bb930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bb934:	4615      	mov	r5, r2
   bb936:	f012 0203 	ands.w	r2, r2, #3
   bb93a:	4606      	mov	r6, r0
   bb93c:	460f      	mov	r7, r1
   bb93e:	d007      	beq.n	bb950 <__pow5mult+0x20>
   bb940:	4c25      	ldr	r4, [pc, #148]	; (bb9d8 <__pow5mult+0xa8>)
   bb942:	3a01      	subs	r2, #1
   bb944:	2300      	movs	r3, #0
   bb946:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bb94a:	f7ff fe51 	bl	bb5f0 <__multadd>
   bb94e:	4607      	mov	r7, r0
   bb950:	10ad      	asrs	r5, r5, #2
   bb952:	d03d      	beq.n	bb9d0 <__pow5mult+0xa0>
   bb954:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bb956:	b97c      	cbnz	r4, bb978 <__pow5mult+0x48>
   bb958:	2010      	movs	r0, #16
   bb95a:	f7fa ff41 	bl	b67e0 <malloc>
   bb95e:	4602      	mov	r2, r0
   bb960:	6270      	str	r0, [r6, #36]	; 0x24
   bb962:	b928      	cbnz	r0, bb970 <__pow5mult+0x40>
   bb964:	4b1d      	ldr	r3, [pc, #116]	; (bb9dc <__pow5mult+0xac>)
   bb966:	481e      	ldr	r0, [pc, #120]	; (bb9e0 <__pow5mult+0xb0>)
   bb968:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bb96c:	f7fa ff70 	bl	b6850 <__assert_func>
   bb970:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bb974:	6004      	str	r4, [r0, #0]
   bb976:	60c4      	str	r4, [r0, #12]
   bb978:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bb97c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bb980:	b94c      	cbnz	r4, bb996 <__pow5mult+0x66>
   bb982:	f240 2171 	movw	r1, #625	; 0x271
   bb986:	4630      	mov	r0, r6
   bb988:	f7ff ff12 	bl	bb7b0 <__i2b>
   bb98c:	2300      	movs	r3, #0
   bb98e:	f8c8 0008 	str.w	r0, [r8, #8]
   bb992:	4604      	mov	r4, r0
   bb994:	6003      	str	r3, [r0, #0]
   bb996:	f04f 0900 	mov.w	r9, #0
   bb99a:	07eb      	lsls	r3, r5, #31
   bb99c:	d50a      	bpl.n	bb9b4 <__pow5mult+0x84>
   bb99e:	4639      	mov	r1, r7
   bb9a0:	4622      	mov	r2, r4
   bb9a2:	4630      	mov	r0, r6
   bb9a4:	f7ff ff1a 	bl	bb7dc <__multiply>
   bb9a8:	4639      	mov	r1, r7
   bb9aa:	4680      	mov	r8, r0
   bb9ac:	4630      	mov	r0, r6
   bb9ae:	f7ff fdfd 	bl	bb5ac <_Bfree>
   bb9b2:	4647      	mov	r7, r8
   bb9b4:	106d      	asrs	r5, r5, #1
   bb9b6:	d00b      	beq.n	bb9d0 <__pow5mult+0xa0>
   bb9b8:	6820      	ldr	r0, [r4, #0]
   bb9ba:	b938      	cbnz	r0, bb9cc <__pow5mult+0x9c>
   bb9bc:	4622      	mov	r2, r4
   bb9be:	4621      	mov	r1, r4
   bb9c0:	4630      	mov	r0, r6
   bb9c2:	f7ff ff0b 	bl	bb7dc <__multiply>
   bb9c6:	6020      	str	r0, [r4, #0]
   bb9c8:	f8c0 9000 	str.w	r9, [r0]
   bb9cc:	4604      	mov	r4, r0
   bb9ce:	e7e4      	b.n	bb99a <__pow5mult+0x6a>
   bb9d0:	4638      	mov	r0, r7
   bb9d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bb9d6:	bf00      	nop
   bb9d8:	000bcba8 	.word	0x000bcba8
   bb9dc:	000bc801 	.word	0x000bc801
   bb9e0:	000bca58 	.word	0x000bca58

000bb9e4 <__lshift>:
   bb9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb9e8:	460c      	mov	r4, r1
   bb9ea:	6849      	ldr	r1, [r1, #4]
   bb9ec:	6923      	ldr	r3, [r4, #16]
   bb9ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bb9f2:	68a3      	ldr	r3, [r4, #8]
   bb9f4:	4607      	mov	r7, r0
   bb9f6:	4691      	mov	r9, r2
   bb9f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bb9fc:	f108 0601 	add.w	r6, r8, #1
   bba00:	42b3      	cmp	r3, r6
   bba02:	db0b      	blt.n	bba1c <__lshift+0x38>
   bba04:	4638      	mov	r0, r7
   bba06:	f7ff fd91 	bl	bb52c <_Balloc>
   bba0a:	4605      	mov	r5, r0
   bba0c:	b948      	cbnz	r0, bba22 <__lshift+0x3e>
   bba0e:	4602      	mov	r2, r0
   bba10:	4b2a      	ldr	r3, [pc, #168]	; (bbabc <__lshift+0xd8>)
   bba12:	482b      	ldr	r0, [pc, #172]	; (bbac0 <__lshift+0xdc>)
   bba14:	f240 11d9 	movw	r1, #473	; 0x1d9
   bba18:	f7fa ff1a 	bl	b6850 <__assert_func>
   bba1c:	3101      	adds	r1, #1
   bba1e:	005b      	lsls	r3, r3, #1
   bba20:	e7ee      	b.n	bba00 <__lshift+0x1c>
   bba22:	2300      	movs	r3, #0
   bba24:	f100 0114 	add.w	r1, r0, #20
   bba28:	f100 0210 	add.w	r2, r0, #16
   bba2c:	4618      	mov	r0, r3
   bba2e:	4553      	cmp	r3, sl
   bba30:	db37      	blt.n	bbaa2 <__lshift+0xbe>
   bba32:	6920      	ldr	r0, [r4, #16]
   bba34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bba38:	f104 0314 	add.w	r3, r4, #20
   bba3c:	f019 091f 	ands.w	r9, r9, #31
   bba40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bba44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bba48:	d02f      	beq.n	bbaaa <__lshift+0xc6>
   bba4a:	f1c9 0e20 	rsb	lr, r9, #32
   bba4e:	468a      	mov	sl, r1
   bba50:	f04f 0c00 	mov.w	ip, #0
   bba54:	681a      	ldr	r2, [r3, #0]
   bba56:	fa02 f209 	lsl.w	r2, r2, r9
   bba5a:	ea42 020c 	orr.w	r2, r2, ip
   bba5e:	f84a 2b04 	str.w	r2, [sl], #4
   bba62:	f853 2b04 	ldr.w	r2, [r3], #4
   bba66:	4298      	cmp	r0, r3
   bba68:	fa22 fc0e 	lsr.w	ip, r2, lr
   bba6c:	d8f2      	bhi.n	bba54 <__lshift+0x70>
   bba6e:	1b03      	subs	r3, r0, r4
   bba70:	3b15      	subs	r3, #21
   bba72:	f023 0303 	bic.w	r3, r3, #3
   bba76:	3304      	adds	r3, #4
   bba78:	f104 0215 	add.w	r2, r4, #21
   bba7c:	4290      	cmp	r0, r2
   bba7e:	bf38      	it	cc
   bba80:	2304      	movcc	r3, #4
   bba82:	f841 c003 	str.w	ip, [r1, r3]
   bba86:	f1bc 0f00 	cmp.w	ip, #0
   bba8a:	d001      	beq.n	bba90 <__lshift+0xac>
   bba8c:	f108 0602 	add.w	r6, r8, #2
   bba90:	3e01      	subs	r6, #1
   bba92:	4638      	mov	r0, r7
   bba94:	612e      	str	r6, [r5, #16]
   bba96:	4621      	mov	r1, r4
   bba98:	f7ff fd88 	bl	bb5ac <_Bfree>
   bba9c:	4628      	mov	r0, r5
   bba9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bbaa2:	f842 0f04 	str.w	r0, [r2, #4]!
   bbaa6:	3301      	adds	r3, #1
   bbaa8:	e7c1      	b.n	bba2e <__lshift+0x4a>
   bbaaa:	3904      	subs	r1, #4
   bbaac:	f853 2b04 	ldr.w	r2, [r3], #4
   bbab0:	f841 2f04 	str.w	r2, [r1, #4]!
   bbab4:	4298      	cmp	r0, r3
   bbab6:	d8f9      	bhi.n	bbaac <__lshift+0xc8>
   bbab8:	e7ea      	b.n	bba90 <__lshift+0xac>
   bbaba:	bf00      	nop
   bbabc:	000bc9d1 	.word	0x000bc9d1
   bbac0:	000bca58 	.word	0x000bca58

000bbac4 <__mcmp>:
   bbac4:	b530      	push	{r4, r5, lr}
   bbac6:	6902      	ldr	r2, [r0, #16]
   bbac8:	690c      	ldr	r4, [r1, #16]
   bbaca:	1b12      	subs	r2, r2, r4
   bbacc:	d10e      	bne.n	bbaec <__mcmp+0x28>
   bbace:	f100 0314 	add.w	r3, r0, #20
   bbad2:	3114      	adds	r1, #20
   bbad4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bbad8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bbadc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bbae0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bbae4:	42a5      	cmp	r5, r4
   bbae6:	d003      	beq.n	bbaf0 <__mcmp+0x2c>
   bbae8:	d305      	bcc.n	bbaf6 <__mcmp+0x32>
   bbaea:	2201      	movs	r2, #1
   bbaec:	4610      	mov	r0, r2
   bbaee:	bd30      	pop	{r4, r5, pc}
   bbaf0:	4283      	cmp	r3, r0
   bbaf2:	d3f3      	bcc.n	bbadc <__mcmp+0x18>
   bbaf4:	e7fa      	b.n	bbaec <__mcmp+0x28>
   bbaf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbafa:	e7f7      	b.n	bbaec <__mcmp+0x28>

000bbafc <__mdiff>:
   bbafc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbb00:	460c      	mov	r4, r1
   bbb02:	4606      	mov	r6, r0
   bbb04:	4611      	mov	r1, r2
   bbb06:	4620      	mov	r0, r4
   bbb08:	4690      	mov	r8, r2
   bbb0a:	f7ff ffdb 	bl	bbac4 <__mcmp>
   bbb0e:	1e05      	subs	r5, r0, #0
   bbb10:	d110      	bne.n	bbb34 <__mdiff+0x38>
   bbb12:	4629      	mov	r1, r5
   bbb14:	4630      	mov	r0, r6
   bbb16:	f7ff fd09 	bl	bb52c <_Balloc>
   bbb1a:	b930      	cbnz	r0, bbb2a <__mdiff+0x2e>
   bbb1c:	4b3a      	ldr	r3, [pc, #232]	; (bbc08 <__mdiff+0x10c>)
   bbb1e:	4602      	mov	r2, r0
   bbb20:	f240 2132 	movw	r1, #562	; 0x232
   bbb24:	4839      	ldr	r0, [pc, #228]	; (bbc0c <__mdiff+0x110>)
   bbb26:	f7fa fe93 	bl	b6850 <__assert_func>
   bbb2a:	2301      	movs	r3, #1
   bbb2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bbb30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbb34:	bfa4      	itt	ge
   bbb36:	4643      	movge	r3, r8
   bbb38:	46a0      	movge	r8, r4
   bbb3a:	4630      	mov	r0, r6
   bbb3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bbb40:	bfa6      	itte	ge
   bbb42:	461c      	movge	r4, r3
   bbb44:	2500      	movge	r5, #0
   bbb46:	2501      	movlt	r5, #1
   bbb48:	f7ff fcf0 	bl	bb52c <_Balloc>
   bbb4c:	b920      	cbnz	r0, bbb58 <__mdiff+0x5c>
   bbb4e:	4b2e      	ldr	r3, [pc, #184]	; (bbc08 <__mdiff+0x10c>)
   bbb50:	4602      	mov	r2, r0
   bbb52:	f44f 7110 	mov.w	r1, #576	; 0x240
   bbb56:	e7e5      	b.n	bbb24 <__mdiff+0x28>
   bbb58:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bbb5c:	6926      	ldr	r6, [r4, #16]
   bbb5e:	60c5      	str	r5, [r0, #12]
   bbb60:	f104 0914 	add.w	r9, r4, #20
   bbb64:	f108 0514 	add.w	r5, r8, #20
   bbb68:	f100 0e14 	add.w	lr, r0, #20
   bbb6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bbb70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bbb74:	f108 0210 	add.w	r2, r8, #16
   bbb78:	46f2      	mov	sl, lr
   bbb7a:	2100      	movs	r1, #0
   bbb7c:	f859 3b04 	ldr.w	r3, [r9], #4
   bbb80:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bbb84:	fa1f f883 	uxth.w	r8, r3
   bbb88:	fa11 f18b 	uxtah	r1, r1, fp
   bbb8c:	0c1b      	lsrs	r3, r3, #16
   bbb8e:	eba1 0808 	sub.w	r8, r1, r8
   bbb92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bbb96:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bbb9a:	fa1f f888 	uxth.w	r8, r8
   bbb9e:	1419      	asrs	r1, r3, #16
   bbba0:	454e      	cmp	r6, r9
   bbba2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bbba6:	f84a 3b04 	str.w	r3, [sl], #4
   bbbaa:	d8e7      	bhi.n	bbb7c <__mdiff+0x80>
   bbbac:	1b33      	subs	r3, r6, r4
   bbbae:	3b15      	subs	r3, #21
   bbbb0:	f023 0303 	bic.w	r3, r3, #3
   bbbb4:	3304      	adds	r3, #4
   bbbb6:	3415      	adds	r4, #21
   bbbb8:	42a6      	cmp	r6, r4
   bbbba:	bf38      	it	cc
   bbbbc:	2304      	movcc	r3, #4
   bbbbe:	441d      	add	r5, r3
   bbbc0:	4473      	add	r3, lr
   bbbc2:	469e      	mov	lr, r3
   bbbc4:	462e      	mov	r6, r5
   bbbc6:	4566      	cmp	r6, ip
   bbbc8:	d30e      	bcc.n	bbbe8 <__mdiff+0xec>
   bbbca:	f10c 0203 	add.w	r2, ip, #3
   bbbce:	1b52      	subs	r2, r2, r5
   bbbd0:	f022 0203 	bic.w	r2, r2, #3
   bbbd4:	3d03      	subs	r5, #3
   bbbd6:	45ac      	cmp	ip, r5
   bbbd8:	bf38      	it	cc
   bbbda:	2200      	movcc	r2, #0
   bbbdc:	441a      	add	r2, r3
   bbbde:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bbbe2:	b17b      	cbz	r3, bbc04 <__mdiff+0x108>
   bbbe4:	6107      	str	r7, [r0, #16]
   bbbe6:	e7a3      	b.n	bbb30 <__mdiff+0x34>
   bbbe8:	f856 8b04 	ldr.w	r8, [r6], #4
   bbbec:	fa11 f288 	uxtah	r2, r1, r8
   bbbf0:	1414      	asrs	r4, r2, #16
   bbbf2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bbbf6:	b292      	uxth	r2, r2
   bbbf8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bbbfc:	f84e 2b04 	str.w	r2, [lr], #4
   bbc00:	1421      	asrs	r1, r4, #16
   bbc02:	e7e0      	b.n	bbbc6 <__mdiff+0xca>
   bbc04:	3f01      	subs	r7, #1
   bbc06:	e7ea      	b.n	bbbde <__mdiff+0xe2>
   bbc08:	000bc9d1 	.word	0x000bc9d1
   bbc0c:	000bca58 	.word	0x000bca58

000bbc10 <__ulp>:
   bbc10:	b082      	sub	sp, #8
   bbc12:	ed8d 0b00 	vstr	d0, [sp]
   bbc16:	9b01      	ldr	r3, [sp, #4]
   bbc18:	4912      	ldr	r1, [pc, #72]	; (bbc64 <__ulp+0x54>)
   bbc1a:	4019      	ands	r1, r3
   bbc1c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bbc20:	2900      	cmp	r1, #0
   bbc22:	dd05      	ble.n	bbc30 <__ulp+0x20>
   bbc24:	2200      	movs	r2, #0
   bbc26:	460b      	mov	r3, r1
   bbc28:	ec43 2b10 	vmov	d0, r2, r3
   bbc2c:	b002      	add	sp, #8
   bbc2e:	4770      	bx	lr
   bbc30:	4249      	negs	r1, r1
   bbc32:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bbc36:	ea4f 5021 	mov.w	r0, r1, asr #20
   bbc3a:	f04f 0200 	mov.w	r2, #0
   bbc3e:	f04f 0300 	mov.w	r3, #0
   bbc42:	da04      	bge.n	bbc4e <__ulp+0x3e>
   bbc44:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bbc48:	fa41 f300 	asr.w	r3, r1, r0
   bbc4c:	e7ec      	b.n	bbc28 <__ulp+0x18>
   bbc4e:	f1a0 0114 	sub.w	r1, r0, #20
   bbc52:	291e      	cmp	r1, #30
   bbc54:	bfda      	itte	le
   bbc56:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bbc5a:	fa20 f101 	lsrle.w	r1, r0, r1
   bbc5e:	2101      	movgt	r1, #1
   bbc60:	460a      	mov	r2, r1
   bbc62:	e7e1      	b.n	bbc28 <__ulp+0x18>
   bbc64:	7ff00000 	.word	0x7ff00000

000bbc68 <__b2d>:
   bbc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbc6a:	6905      	ldr	r5, [r0, #16]
   bbc6c:	f100 0714 	add.w	r7, r0, #20
   bbc70:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bbc74:	1f2e      	subs	r6, r5, #4
   bbc76:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bbc7a:	4620      	mov	r0, r4
   bbc7c:	f7ff fd48 	bl	bb710 <__hi0bits>
   bbc80:	f1c0 0320 	rsb	r3, r0, #32
   bbc84:	280a      	cmp	r0, #10
   bbc86:	f8df c07c 	ldr.w	ip, [pc, #124]	; bbd04 <__b2d+0x9c>
   bbc8a:	600b      	str	r3, [r1, #0]
   bbc8c:	dc14      	bgt.n	bbcb8 <__b2d+0x50>
   bbc8e:	f1c0 0e0b 	rsb	lr, r0, #11
   bbc92:	fa24 f10e 	lsr.w	r1, r4, lr
   bbc96:	42b7      	cmp	r7, r6
   bbc98:	ea41 030c 	orr.w	r3, r1, ip
   bbc9c:	bf34      	ite	cc
   bbc9e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bbca2:	2100      	movcs	r1, #0
   bbca4:	3015      	adds	r0, #21
   bbca6:	fa04 f000 	lsl.w	r0, r4, r0
   bbcaa:	fa21 f10e 	lsr.w	r1, r1, lr
   bbcae:	ea40 0201 	orr.w	r2, r0, r1
   bbcb2:	ec43 2b10 	vmov	d0, r2, r3
   bbcb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bbcb8:	42b7      	cmp	r7, r6
   bbcba:	bf3a      	itte	cc
   bbcbc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bbcc0:	f1a5 0608 	subcc.w	r6, r5, #8
   bbcc4:	2100      	movcs	r1, #0
   bbcc6:	380b      	subs	r0, #11
   bbcc8:	d017      	beq.n	bbcfa <__b2d+0x92>
   bbcca:	f1c0 0c20 	rsb	ip, r0, #32
   bbcce:	fa04 f500 	lsl.w	r5, r4, r0
   bbcd2:	42be      	cmp	r6, r7
   bbcd4:	fa21 f40c 	lsr.w	r4, r1, ip
   bbcd8:	ea45 0504 	orr.w	r5, r5, r4
   bbcdc:	bf8c      	ite	hi
   bbcde:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bbce2:	2400      	movls	r4, #0
   bbce4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bbce8:	fa01 f000 	lsl.w	r0, r1, r0
   bbcec:	fa24 f40c 	lsr.w	r4, r4, ip
   bbcf0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bbcf4:	ea40 0204 	orr.w	r2, r0, r4
   bbcf8:	e7db      	b.n	bbcb2 <__b2d+0x4a>
   bbcfa:	ea44 030c 	orr.w	r3, r4, ip
   bbcfe:	460a      	mov	r2, r1
   bbd00:	e7d7      	b.n	bbcb2 <__b2d+0x4a>
   bbd02:	bf00      	nop
   bbd04:	3ff00000 	.word	0x3ff00000

000bbd08 <__d2b>:
   bbd08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bbd0c:	4689      	mov	r9, r1
   bbd0e:	2101      	movs	r1, #1
   bbd10:	ec57 6b10 	vmov	r6, r7, d0
   bbd14:	4690      	mov	r8, r2
   bbd16:	f7ff fc09 	bl	bb52c <_Balloc>
   bbd1a:	4604      	mov	r4, r0
   bbd1c:	b930      	cbnz	r0, bbd2c <__d2b+0x24>
   bbd1e:	4602      	mov	r2, r0
   bbd20:	4b25      	ldr	r3, [pc, #148]	; (bbdb8 <__d2b+0xb0>)
   bbd22:	4826      	ldr	r0, [pc, #152]	; (bbdbc <__d2b+0xb4>)
   bbd24:	f240 310a 	movw	r1, #778	; 0x30a
   bbd28:	f7fa fd92 	bl	b6850 <__assert_func>
   bbd2c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bbd30:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bbd34:	bb35      	cbnz	r5, bbd84 <__d2b+0x7c>
   bbd36:	2e00      	cmp	r6, #0
   bbd38:	9301      	str	r3, [sp, #4]
   bbd3a:	d028      	beq.n	bbd8e <__d2b+0x86>
   bbd3c:	4668      	mov	r0, sp
   bbd3e:	9600      	str	r6, [sp, #0]
   bbd40:	f7ff fd06 	bl	bb750 <__lo0bits>
   bbd44:	9900      	ldr	r1, [sp, #0]
   bbd46:	b300      	cbz	r0, bbd8a <__d2b+0x82>
   bbd48:	9a01      	ldr	r2, [sp, #4]
   bbd4a:	f1c0 0320 	rsb	r3, r0, #32
   bbd4e:	fa02 f303 	lsl.w	r3, r2, r3
   bbd52:	430b      	orrs	r3, r1
   bbd54:	40c2      	lsrs	r2, r0
   bbd56:	6163      	str	r3, [r4, #20]
   bbd58:	9201      	str	r2, [sp, #4]
   bbd5a:	9b01      	ldr	r3, [sp, #4]
   bbd5c:	61a3      	str	r3, [r4, #24]
   bbd5e:	2b00      	cmp	r3, #0
   bbd60:	bf14      	ite	ne
   bbd62:	2202      	movne	r2, #2
   bbd64:	2201      	moveq	r2, #1
   bbd66:	6122      	str	r2, [r4, #16]
   bbd68:	b1d5      	cbz	r5, bbda0 <__d2b+0x98>
   bbd6a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bbd6e:	4405      	add	r5, r0
   bbd70:	f8c9 5000 	str.w	r5, [r9]
   bbd74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bbd78:	f8c8 0000 	str.w	r0, [r8]
   bbd7c:	4620      	mov	r0, r4
   bbd7e:	b003      	add	sp, #12
   bbd80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bbd84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bbd88:	e7d5      	b.n	bbd36 <__d2b+0x2e>
   bbd8a:	6161      	str	r1, [r4, #20]
   bbd8c:	e7e5      	b.n	bbd5a <__d2b+0x52>
   bbd8e:	a801      	add	r0, sp, #4
   bbd90:	f7ff fcde 	bl	bb750 <__lo0bits>
   bbd94:	9b01      	ldr	r3, [sp, #4]
   bbd96:	6163      	str	r3, [r4, #20]
   bbd98:	2201      	movs	r2, #1
   bbd9a:	6122      	str	r2, [r4, #16]
   bbd9c:	3020      	adds	r0, #32
   bbd9e:	e7e3      	b.n	bbd68 <__d2b+0x60>
   bbda0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bbda4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bbda8:	f8c9 0000 	str.w	r0, [r9]
   bbdac:	6918      	ldr	r0, [r3, #16]
   bbdae:	f7ff fcaf 	bl	bb710 <__hi0bits>
   bbdb2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bbdb6:	e7df      	b.n	bbd78 <__d2b+0x70>
   bbdb8:	000bc9d1 	.word	0x000bc9d1
   bbdbc:	000bca58 	.word	0x000bca58

000bbdc0 <__ratio>:
   bbdc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbdc4:	4688      	mov	r8, r1
   bbdc6:	4669      	mov	r1, sp
   bbdc8:	4681      	mov	r9, r0
   bbdca:	f7ff ff4d 	bl	bbc68 <__b2d>
   bbdce:	a901      	add	r1, sp, #4
   bbdd0:	4640      	mov	r0, r8
   bbdd2:	ec55 4b10 	vmov	r4, r5, d0
   bbdd6:	f7ff ff47 	bl	bbc68 <__b2d>
   bbdda:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bbdde:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bbde2:	eba3 0c02 	sub.w	ip, r3, r2
   bbde6:	e9dd 3200 	ldrd	r3, r2, [sp]
   bbdea:	1a9b      	subs	r3, r3, r2
   bbdec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bbdf0:	ec51 0b10 	vmov	r0, r1, d0
   bbdf4:	2b00      	cmp	r3, #0
   bbdf6:	bfd6      	itet	le
   bbdf8:	460a      	movle	r2, r1
   bbdfa:	462a      	movgt	r2, r5
   bbdfc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bbe00:	468b      	mov	fp, r1
   bbe02:	462f      	mov	r7, r5
   bbe04:	bfd4      	ite	le
   bbe06:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bbe0a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bbe0e:	4620      	mov	r0, r4
   bbe10:	ee10 2a10 	vmov	r2, s0
   bbe14:	465b      	mov	r3, fp
   bbe16:	4639      	mov	r1, r7
   bbe18:	f7fd fe00 	bl	b9a1c <__aeabi_ddiv>
   bbe1c:	ec41 0b10 	vmov	d0, r0, r1
   bbe20:	b003      	add	sp, #12
   bbe22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bbe26 <__copybits>:
   bbe26:	3901      	subs	r1, #1
   bbe28:	b570      	push	{r4, r5, r6, lr}
   bbe2a:	1149      	asrs	r1, r1, #5
   bbe2c:	6914      	ldr	r4, [r2, #16]
   bbe2e:	3101      	adds	r1, #1
   bbe30:	f102 0314 	add.w	r3, r2, #20
   bbe34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bbe38:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bbe3c:	1f05      	subs	r5, r0, #4
   bbe3e:	42a3      	cmp	r3, r4
   bbe40:	d30c      	bcc.n	bbe5c <__copybits+0x36>
   bbe42:	1aa3      	subs	r3, r4, r2
   bbe44:	3b11      	subs	r3, #17
   bbe46:	f023 0303 	bic.w	r3, r3, #3
   bbe4a:	3211      	adds	r2, #17
   bbe4c:	42a2      	cmp	r2, r4
   bbe4e:	bf88      	it	hi
   bbe50:	2300      	movhi	r3, #0
   bbe52:	4418      	add	r0, r3
   bbe54:	2300      	movs	r3, #0
   bbe56:	4288      	cmp	r0, r1
   bbe58:	d305      	bcc.n	bbe66 <__copybits+0x40>
   bbe5a:	bd70      	pop	{r4, r5, r6, pc}
   bbe5c:	f853 6b04 	ldr.w	r6, [r3], #4
   bbe60:	f845 6f04 	str.w	r6, [r5, #4]!
   bbe64:	e7eb      	b.n	bbe3e <__copybits+0x18>
   bbe66:	f840 3b04 	str.w	r3, [r0], #4
   bbe6a:	e7f4      	b.n	bbe56 <__copybits+0x30>

000bbe6c <__any_on>:
   bbe6c:	f100 0214 	add.w	r2, r0, #20
   bbe70:	6900      	ldr	r0, [r0, #16]
   bbe72:	114b      	asrs	r3, r1, #5
   bbe74:	4298      	cmp	r0, r3
   bbe76:	b510      	push	{r4, lr}
   bbe78:	db11      	blt.n	bbe9e <__any_on+0x32>
   bbe7a:	dd0a      	ble.n	bbe92 <__any_on+0x26>
   bbe7c:	f011 011f 	ands.w	r1, r1, #31
   bbe80:	d007      	beq.n	bbe92 <__any_on+0x26>
   bbe82:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bbe86:	fa24 f001 	lsr.w	r0, r4, r1
   bbe8a:	fa00 f101 	lsl.w	r1, r0, r1
   bbe8e:	428c      	cmp	r4, r1
   bbe90:	d10b      	bne.n	bbeaa <__any_on+0x3e>
   bbe92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bbe96:	4293      	cmp	r3, r2
   bbe98:	d803      	bhi.n	bbea2 <__any_on+0x36>
   bbe9a:	2000      	movs	r0, #0
   bbe9c:	bd10      	pop	{r4, pc}
   bbe9e:	4603      	mov	r3, r0
   bbea0:	e7f7      	b.n	bbe92 <__any_on+0x26>
   bbea2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bbea6:	2900      	cmp	r1, #0
   bbea8:	d0f5      	beq.n	bbe96 <__any_on+0x2a>
   bbeaa:	2001      	movs	r0, #1
   bbeac:	e7f6      	b.n	bbe9c <__any_on+0x30>

000bbeae <_calloc_r>:
   bbeae:	b513      	push	{r0, r1, r4, lr}
   bbeb0:	434a      	muls	r2, r1
   bbeb2:	4611      	mov	r1, r2
   bbeb4:	9201      	str	r2, [sp, #4]
   bbeb6:	f7fa fcbb 	bl	b6830 <_malloc_r>
   bbeba:	4604      	mov	r4, r0
   bbebc:	b118      	cbz	r0, bbec6 <_calloc_r+0x18>
   bbebe:	9a01      	ldr	r2, [sp, #4]
   bbec0:	2100      	movs	r1, #0
   bbec2:	f7fe f808 	bl	b9ed6 <memset>
   bbec6:	4620      	mov	r0, r4
   bbec8:	b002      	add	sp, #8
   bbeca:	bd10      	pop	{r4, pc}
   bbecc:	0000      	movs	r0, r0
	...

000bbed0 <nan>:
   bbed0:	ed9f 0b01 	vldr	d0, [pc, #4]	; bbed8 <nan+0x8>
   bbed4:	4770      	bx	lr
   bbed6:	bf00      	nop
   bbed8:	00000000 	.word	0x00000000
   bbedc:	7ff80000 	.word	0x7ff80000

000bbee0 <__ascii_wctomb>:
   bbee0:	b149      	cbz	r1, bbef6 <__ascii_wctomb+0x16>
   bbee2:	2aff      	cmp	r2, #255	; 0xff
   bbee4:	bf85      	ittet	hi
   bbee6:	238a      	movhi	r3, #138	; 0x8a
   bbee8:	6003      	strhi	r3, [r0, #0]
   bbeea:	700a      	strbls	r2, [r1, #0]
   bbeec:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   bbef0:	bf98      	it	ls
   bbef2:	2001      	movls	r0, #1
   bbef4:	4770      	bx	lr
   bbef6:	4608      	mov	r0, r1
   bbef8:	4770      	bx	lr
	...

000bbefc <__aeabi_d2lz>:
   bbefc:	b538      	push	{r3, r4, r5, lr}
   bbefe:	2200      	movs	r2, #0
   bbf00:	2300      	movs	r3, #0
   bbf02:	4604      	mov	r4, r0
   bbf04:	460d      	mov	r5, r1
   bbf06:	f7fd fed1 	bl	b9cac <__aeabi_dcmplt>
   bbf0a:	b928      	cbnz	r0, bbf18 <__aeabi_d2lz+0x1c>
   bbf0c:	4620      	mov	r0, r4
   bbf0e:	4629      	mov	r1, r5
   bbf10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bbf14:	f7fd bf78 	b.w	b9e08 <__aeabi_d2ulz>
   bbf18:	4620      	mov	r0, r4
   bbf1a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bbf1e:	f7fd ff73 	bl	b9e08 <__aeabi_d2ulz>
   bbf22:	4240      	negs	r0, r0
   bbf24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bbf28:	bd38      	pop	{r3, r4, r5, pc}
   bbf2a:	bf00      	nop

000bbf2c <dynalib_user>:
   bbf2c:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bbf3c:	0000 0000 450a 746e 7265 7420 6568 7020     .....Enter the p
   bbf4c:	736f 7469 6f69 206e 666f 7420 6568 6420     osition of the d
   bbf5c:	7665 6369 2065 6977 6874 7420 6568 6220     evice with the b
   bbf6c:	756c 2065 454c 2044 7361 6120 206e 6e69     lue LED as an in
   bbf7c:	6574 6567 2072 6628 7269 7473 6420 7665     teger (first dev
   bbf8c:	6369 2065 7369 6120 2074 2c31 7320 6365     ice is at 1, sec
   bbf9c:	6e6f 2064 7369 6120 2074 2c32 6520 6374     ond is at 2, etc
   bbfac:	3a29 0020 530a 7165 6575 636e 3a65 0020     ): ..Sequence: .
   bbfbc:	202c 6300 6e61 6f6e 2074 7263 6165 6574     , .cannot create
   bbfcc:	7320 6474 3a3a 6576 7463 726f 6c20 7261      std::vector lar
   bbfdc:	6567 2072 6874 6e61 6d20 7861 735f 7a69     ger than max_siz
   bbfec:	2865 0029 6576 7463 726f 3a3a 4d5f 725f     e().vector::_M_r
   bbffc:	6e61 6567 635f 6568 6b63 203a 5f5f 206e     ange_check: __n 
   bc00c:	7728 6968 6863 6920 2073 7a25 2975 3e20     (which is %zu) >
   bc01c:	203d 6874 7369 3e2d 6973 657a 2928 2820     = this->size() (
   bc02c:	6877 6369 2068 7369 2520 757a 0029 720a     which is %zu)..r
   bc03c:	7165 6575 7473 6320 646f 2065 2c31 6120     equest code 1, a
   bc04c:	6464 6572 7373 203a 7400 6172 736e 696d     ddress: .transmi
   bc05c:	7373 6f69 206e 6572 6963 7665 6465 6620     ssion recieved f
   bc06c:	6f72 3a6d 0020 6564 6976 6563 6920 3a64     rom: .device id:
   bc07c:	0020 7274 6e61 6d73 7369 6973 6e6f 7320      .transmission s
   bc08c:	6e65 2074 6f74 203a 7200 7165 6575 7473     ent to: .request
   bc09c:	6320 646f 2065 2c32 6120 6464 6572 7373      code 2, address
   bc0ac:	203a 6300 6e6f 6c66 6369 2074 6576 6972     : .conflict veri
   bc0bc:	6966 6163 6974 6e6f 203a 0a00 6f43 6e6e     fication: ..Conn
   bc0cc:	6365 6574 2064 6f74 203a 6c00 7061 2e69     ected to: .lapi.
   bc0dc:	7274 6e61 6973 6374 6968 6163 6f67 632e     transitchicago.c
   bc0ec:	6d6f 7200 6465 4600 3046 3030 0030 4130     om.red.FF0000.0A
   bc0fc:	3030 3030 6200 756c 0065 3030 3030 4646     0000.blue.0000FF
   bc10c:	3000 3030 3030 0041 4536 3034 3030 3130     .00000A.6E400001
   bc11c:	422d 4135 2d33 3346 3339 452d 4130 2d39     -B5A3-F393-E0A9-
   bc12c:	3545 4530 3432 4344 4143 4539 3600 3445     E50E24DCCA9E.6E4
   bc13c:	3030 3030 2d32 3542 3341 462d 3933 2d33     00002-B5A3-F393-
   bc14c:	3045 3941 452d 3035 3245 4434 4343 3941     E0A9-E50E24DCCA9
   bc15c:	0045 4536 3034 3030 3330 422d 4135 2d33     E.6E400003-B5A3-
   bc16c:	3346 3339 452d 4130 2d39 3545 4530 3432     F393-E0A9-E50E24
   bc17c:	4344 4143 4539 7400 0078 7872 6c00 6f6f     DCCA9E.tx.rx.loo
   bc18c:	2070 7473 7261 0074 612f 6970 312f 302e     p start./api/1.0
   bc19c:	742f 7074 736f 7469 6f69 736e 612e 7073     /ttpositions.asp
   bc1ac:	3f78 656b 3d79 3030 6666 3930 3630 6333     x?key=00ff09063c
   bc1bc:	6161 3634 3437 3438 3433 3564 6166 3233     aa46748434d5fa32
   bc1cc:	6431 3430 6638 7226 3d74 2600 756f 7074     1d048f&rt=.&outp
   bc1dc:	7475 7954 6570 4a3d 4f53 004e 4547 0054     utType=JSON.GET.
   bc1ec:	6170 7372 6e69 0067 6170 7372 6e69 2067     parsing.parsing 
   bc1fc:	6166 6c69 6465 6300 6174 7474 7200 756f     failed.ctatt.rou
   bc20c:	6574 7400 6172 6e69 6e00 7865 5374 6174     te.train.nextSta
   bc21c:	6d4e 7400 4472 0072 616c 0074 6f6c 006e     Nm.trDr.lat.lon.

000bc22c <_ZTV16JsonParserStaticILj10000ELj1000EE>:
	...
   bc234:	40b5 000b 40c9 000b 6341 6563 7470 2f00     .@...@..Accept./
   bc244:	2f2a 0000 0019 0000 0003 0000 0007 0000     */..............
   bc254:	0005 0000 4820 5454 2f50 2e31 0d30 000a     .... HTTP/1.0...
   bc264:	6c63 736f 0065 6f43 6e6e 6365 6974 6e6f     close.Connection
   bc274:	4800 534f 0054 6f43 746e 6e65 2d74 654c     .HOST.Content-Le
   bc284:	676e 6874 5000 534f 0054 0a0d 0a0d 2500     ngth.POST......%
   bc294:	3430 0078                                   04x.

000bc298 <_ZTV10JsonBuffer>:
	...
   bc2a0:	5a4d 000b 5a69 000b                         MZ..iZ..

000bc2a8 <_ZTV10JsonParser>:
	...
   bc2b0:	5a7d 000b 5aa1 000b                         }Z...Z..

000bc2b8 <_ZTV13JsonReference>:
	...
   bc2c0:	5a3d 000b 5a3f 000b 7341 6573 7472 6f69     =Z..?Z..Assertio
   bc2d0:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   bc2e0:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   bc2f0:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   bc300:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   bc310:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   bc320:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   bc330:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   bc340:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   bc350:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   bc360:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   bc370:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   bc380:	6976 6563 002e 6f43 6e6e 6365 6574 2064     vice..Connected 
   bc390:	7962 4320 6e65 7274 6c61 6420 7665 6369     by Central devic
   bc3a0:	2e65 4400 7369 6f63 6e6e 6365 6574 2064     e..Disconnected 
   bc3b0:	7962 7220 6d65 746f 2065 6564 6976 6563     by remote device
   bc3c0:	002e 7544 6c70 6369 7461 6465 6320 6168     ..Duplicated cha
   bc3d0:	6172 7463 7265 7369 6974 2063 6163 6e6e     racteristic cann
   bc3e0:	746f 6220 2065 6461 6564 2e64 4600 6961     ot be added..Fai
   bc3f0:	656c 2064 6f74 6120 7070 6e65 2064 6f6c     led to append lo
   bc400:	6163 206c 6863 7261 6361 6574 6972 7473     cal characterist
   bc410:	6369 002e                                   ic..

000bc414 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bc41c:	687d 000b 68e1 000b 69c7 000b 690b 000b     }h...h...i...i..
   bc42c:	6881 000b                                   .h..

000bc430 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bc438:	6879 000b 68ef 000b 687b 000b 6911 000b     yh...h..{h...i..
   bc448:	68a1 000b                                   .h..

000bc44c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bc454:	6877 000b 68fd 000b 7181 000b 6917 000b     wh...h...q...i..
   bc464:	68c1 000b                                   .h..

000bc468 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bc474:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000bc486 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bc486:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000bc496 <_ZN8particle7BleUuid9BASE_UUIDE>:
   bc496:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000bc4a8 <_ZTVN5spark13EthernetClassE>:
	...
   bc4b0:	7c2f 000b 7c25 000b 7c1b 000b 7c11 000b     /|..%|...|...|..
   bc4c0:	7c05 000b 7bf9 000b 7eb5 000b 7ebd 000b     .|...{...~...~..
   bc4d0:	7bed 000b 7be5 000b 7bdb 000b 7bd1 000b     .{...{...{...{..
   bc4e0:	7eed 000b                                   .~..

000bc4e4 <_ZTV7TwoWire>:
	...
   bc4ec:	7c4d 000b 7c97 000b 7c6f 000b 7c4f 000b     M|...|..o|..O|..
   bc4fc:	7c77 000b 7c7f 000b 7c87 000b 7c8f 000b     w|...|...|...|..

000bc50c <_ZTV9IPAddress>:
	...
   bc514:	7d59 000b 7d49 000b 7d4b 000b 7061 0070     Y}..I}..K}..app.

000bc524 <_ZTVN5spark12NetworkClassE>:
	...
   bc52c:	7e75 000b 7e7f 000b 7e89 000b 7e93 000b     u~...~...~...~..
   bc53c:	7e9d 000b 7ea9 000b 7eb5 000b 7ebd 000b     .~...~...~...~..
   bc54c:	7ec5 000b 7ed1 000b 7ed9 000b 7ee3 000b     .~...~...~...~..
   bc55c:	7eed 000b 6977 6972 676e 7200 6365 2076     .~..wiring.recv 
   bc56c:	7265 6f72 2072 203d 6425 0000               error = %d..

000bc578 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bc580:	83e9 000b 840d 000b 893f 000b 841b 000b     ........?.......
   bc590:	83ed 000b                                   ....

000bc594 <_ZTV9TCPClient>:
	...
   bc59c:	8499 000b 84cd 000b 8365 000b 837f 000b     ........e.......
   bc5ac:	87d5 000b 83a9 000b 864b 000b 83dd 000b     ........K.......
   bc5bc:	86dd 000b 851d 000b 8679 000b 8889 000b     ........y.......
   bc5cc:	8619 000b 83df 000b 8391 000b 8421 000b     ............!...
   bc5dc:	84fd 000b 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
   bc5ec:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000bc5fc <_ZTV11USARTSerial>:
	...
   bc604:	8959 000b 89c5 000b 899d 000b 7fd9 000b     Y...............
   bc614:	896d 000b 8989 000b 897b 000b 8997 000b     m.......{.......
   bc624:	895b 000b 895f 000b                         [..._...

000bc62c <_ZTV9USBSerial>:
	...
   bc634:	8a03 000b 8a6b 000b 8a41 000b 7fd9 000b     ....k...A.......
   bc644:	8a33 000b 8a05 000b 8a15 000b 8a65 000b     3...........e...
   bc654:	8a25 000b 89fd 000b                         %.......

000bc65c <_ZTVN5spark9WiFiClassE>:
	...
   bc664:	8b63 000b 8b59 000b 8b4f 000b 8b05 000b     c...Y...O.......
   bc674:	8b43 000b 8b37 000b 7eb5 000b 7ebd 000b     C...7....~...~..
   bc684:	8b2b 000b 8b23 000b 8b19 000b 8b0f 000b     +...#...........
   bc694:	7eed 000b                                   .~..

000bc698 <_ZSt7nothrow>:
	...

000bc699 <_ZTSSt19_Sp_make_shared_tag>:
   bc699:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bc6a9:	6572 5f64 6174 0067 0000                     red_tag....

000bc6b4 <_ZTISt19_Sp_make_shared_tag>:
   bc6b4:	c768 000b c699 000b 6f6e 2074 6e65 756f     h.......not enou
   bc6c4:	6867 7320 6170 6563 6620 726f 6620 726f     gh space for for
   bc6d4:	616d 2074 7865 6170 736e 6f69 206e 5028     mat expansion (P
   bc6e4:	656c 7361 2065 7573 6d62 7469 6620 6c75     lease submit ful
   bc6f4:	206c 7562 2067 6572 6f70 7472 6120 2074     l bug report at 
   bc704:	7468 7074 3a73 2f2f 6367 2e63 6e67 2e75     https://gcc.gnu.
   bc714:	726f 2f67 7562 7367 292f 0a3a 2020 2020     org/bugs/):.    
   bc724:	3000 3231 3433 3635 3837 0039               .0123456789.

000bc730 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bc730:	c7c8 000b c73c 000b c7ec 000b               ....<.......

000bc73c <_ZTSN10__cxxabiv117__class_type_infoE>:
   bc73c:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bc74c:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bc75c:	0045 0000                                   E...

000bc760 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bc760:	0000 0000 c730 000b 8fe1 000b 8ff5 000b     ....0...........
   bc770:	9189 000b 9189 000b 905f 000b 8fa3 000b     ........_.......
   bc780:	9047 000b 9009 000b 8fd5 000b               G...........

000bc78c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bc78c:	c7c8 000b c798 000b c730 000b               ........0...

000bc798 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bc798:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bc7a8:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bc7b8:	666e 456f 0000 0000                         nfoE....

000bc7c0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bc7c0:	0000 0000 c78c 000b 9089 000b 909d 000b     ................
   bc7d0:	9189 000b 9189 000b 905f 000b 8fa3 000b     ........_.......
   bc7e0:	915d 000b 90e9 000b 90b1 000b               ]...........

000bc7ec <_ZTISt9type_info>:
   bc7ec:	c768 000b c7f4 000b                         h.......

000bc7f4 <_ZTSSt9type_info>:
   bc7f4:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bc804:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bc814:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   bc824:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bc834:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bc844:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bc854:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bc864:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   bc874:	6e69 7469 0079 6e61 0000 0000               inity.an....

000bc880 <fpi.1>:
   bc880:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bc890:	0000 0000                                   ....

000bc894 <fpinan.0>:
   bc894:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   bc8a4:	0000 0000                                   ....

000bc8a8 <tinytens>:
   bc8a8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bc8b8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bc8c8:	6f43 64ac 0628 1168                         Co.d(.h.

000bc8d0 <_ctype_>:
   bc8d0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bc8e0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bc8f0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bc900:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bc910:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bc920:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bc930:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bc940:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bc950:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bc9d0:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bc9e0:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   bc9f0:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   bca00:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   bca10:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   bca20:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   bca30:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   bca40:	632e 0000                                   .c..

000bca44 <_C_numeric_locale>:
   bca44:	c412 000b c292 000b 5604 2003 0043 4f50     .........V. C.PO
   bca54:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   bca64:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bca74:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bca84:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bca94:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bcaa4:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   bcab4:	0000 0000                                   ....

000bcab8 <__mprec_bigtens>:
   bcab8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bcac8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bcad8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bcae0 <__mprec_tens>:
   bcae0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bcaf0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bcb00:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bcb10:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bcb20:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bcb30:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bcb40:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bcb50:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bcb60:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bcb70:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bcb80:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bcb90:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bcba0:	9db4 79d9 7843 44ea                         ...yCx.D

000bcba8 <p05.0>:
   bcba8:	0005 0000 0019 0000 007d 0000               ........}...

000bcbb4 <link_const_variable_data_end>:
   bcbb4:	000b525d 	.word	0x000b525d
   bcbb8:	000b62f5 	.word	0x000b62f5
   bcbbc:	000b7bc1 	.word	0x000b7bc1
   bcbc0:	000b7c39 	.word	0x000b7c39
   bcbc4:	000b7e65 	.word	0x000b7e65
   bcbc8:	000b7fc5 	.word	0x000b7fc5
   bcbcc:	000b80a1 	.word	0x000b80a1
   bcbd0:	000b8341 	.word	0x000b8341
   bcbd4:	000b8945 	.word	0x000b8945
   bcbd8:	000b8b6d 	.word	0x000b8b6d

000bcbdc <link_constructors_end>:
   bcbdc:	00000000 	.word	0x00000000
