
/Users/sainihome/Documents/GitHub/loop-tracks/master/target/3.3.0/argon/master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009700  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bd720  000bd720  0000d720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bd744  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f0  2003535c  000bd748  0001535c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000092a4  2003554c  2003554c  0002554c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000bd938  000bd938  0001d938  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bd960  000bd960  0001d960  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001391f9  00000000  00000000  0001d964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00012c19  00000000  00000000  00156b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000469ff  00000000  00000000  00169776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003270  00000000  00000000  001b0175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000cc40  00000000  00000000  001b33e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000366ff  00000000  00000000  001c0025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00043867  00000000  00000000  001f6724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014ec34  00000000  00000000  00239f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000aba8  00000000  00000000  00388bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f006 fc72 	bl	ba91a <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f006 fc94 	bl	ba96a <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003535c 	.word	0x2003535c
   b404c:	000bd748 	.word	0x000bd748
   b4050:	2003554c 	.word	0x2003554c
   b4054:	2003554c 	.word	0x2003554c
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f005 fb21 	bl	b96a8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bd6ec 	.word	0x000bd6ec
   b4080:	000bd714 	.word	0x000bd714

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 bc16 	b.w	b58b4 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 fcf5 	bl	b5a78 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f005 bac1 	b.w	b9618 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f003 b849 	b.w	b712c <malloc>

000b409a <_Znaj>:
   b409a:	f003 b847 	b.w	b712c <malloc>

000b409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409e:	f003 b84d 	b.w	b713c <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f003 b84b 	b.w	b713c <free>

000b40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a6:	7800      	ldrb	r0, [r0, #0]
   b40a8:	fab0 f080 	clz	r0, r0
   b40ac:	0940      	lsrs	r0, r0, #5
   b40ae:	4770      	bx	lr

000b40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b0:	2301      	movs	r3, #1
   b40b2:	7003      	strb	r3, [r0, #0]
   b40b4:	4770      	bx	lr
	...

000b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40b8:	b510      	push	{r4, lr}
   b40ba:	4b03      	ldr	r3, [pc, #12]	; (b40c8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev+0x10>)
   b40bc:	6003      	str	r3, [r0, #0]
   b40be:	4604      	mov	r4, r0
   b40c0:	f002 f982 	bl	b63c8 <_ZN10JsonParserD1Ev>
   b40c4:	4620      	mov	r0, r4
   b40c6:	bd10      	pop	{r4, pc}
   b40c8:	000bcd24 	.word	0x000bcd24

000b40cc <_ZN16JsonParserStaticILj10000ELj1000EED0Ev>:
   b40cc:	b510      	push	{r4, lr}
   b40ce:	4604      	mov	r4, r0
   b40d0:	f7ff fff2 	bl	b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
   b40d4:	4620      	mov	r0, r4
   b40d6:	f246 51bc 	movw	r1, #26044	; 0x65bc
   b40da:	f7ff ffe2 	bl	b40a2 <_ZdlPvj>
   b40de:	4620      	mov	r0, r4
   b40e0:	bd10      	pop	{r4, pc}
	...

000b40e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>:

      pointer
      _M_local_data()
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b40e4:	f100 0308 	add.w	r3, r0, #8
#if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
   b40e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b40ea:	4604      	mov	r4, r0
	: allocator_type(__a), _M_p(__dat) { }
   b40ec:	6003      	str	r3, [r0, #0]
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b40ee:	460d      	mov	r5, r1
   b40f0:	b1d9      	cbz	r1, b412a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x46>
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   b40f2:	4608      	mov	r0, r1
   b40f4:	f006 fc82 	bl	ba9fc <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
   b40f8:	280f      	cmp	r0, #15
   b40fa:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b40fe:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b4100:	d907      	bls.n	b4112 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x2e>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   b4102:	2200      	movs	r2, #0
   b4104:	a901      	add	r1, sp, #4
   b4106:	4620      	mov	r0, r4
   b4108:	f005 fc2e 	bl	b9968 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b410c:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b410e:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4110:	60a3      	str	r3, [r4, #8]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b4112:	4632      	mov	r2, r6
   b4114:	4629      	mov	r1, r5
   b4116:	6820      	ldr	r0, [r4, #0]
   b4118:	f005 fc61 	bl	b99de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   b411c:	9b01      	ldr	r3, [sp, #4]
      { __c1 = __c2; }
   b411e:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4120:	6063      	str	r3, [r4, #4]
   b4122:	2100      	movs	r1, #0
   b4124:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b4126:	b002      	add	sp, #8
   b4128:	bd70      	pop	{r4, r5, r6, pc}
	  std::__throw_logic_error(__N("basic_string::"
   b412a:	4801      	ldr	r0, [pc, #4]	; (b4130 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x4c>)
   b412c:	f005 fb59 	bl	b97e2 <_ZSt19__throw_logic_errorPKc>
   b4130:	000bc9d0 	.word	0x000bc9d0

000b4134 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>:

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
   b4134:	b508      	push	{r3, lr}
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4136:	4603      	mov	r3, r0
   b4138:	b150      	cbz	r0, b4150 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x1c>
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      _GLIBCXX_NODISCARD _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {
	if (__n > this->_M_max_size())
   b413a:	4a06      	ldr	r2, [pc, #24]	; (b4154 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x20>)
   b413c:	4290      	cmp	r0, r2
   b413e:	d901      	bls.n	b4144 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b4140:	f005 fb4c 	bl	b97dc <_ZSt17__throw_bad_allocv>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4144:	2018      	movs	r0, #24
   b4146:	4358      	muls	r0, r3
      }
   b4148:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b414c:	f7ff bfa3 	b.w	b4096 <_Znwj>
   b4150:	bd08      	pop	{r3, pc}
   b4152:	bf00      	nop
   b4154:	05555555 	.word	0x05555555

000b4158 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b4158:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b415a:	b148      	cbz	r0, b4170 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b415c:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   b4160:	d301      	bcc.n	b4166 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b4162:	f005 fb3b 	bl	b97dc <_ZSt17__throw_bad_allocv>
      }
   b4166:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b416a:	0080      	lsls	r0, r0, #2
   b416c:	f7ff bf93 	b.w	b4096 <_Znwj>
   b4170:	bd08      	pop	{r3, pc}
	...

000b4174 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b4174:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4176:	4603      	mov	r3, r0
   b4178:	b150      	cbz	r0, b4190 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0x1c>
	if (__n > this->_M_max_size())
   b417a:	4a06      	ldr	r2, [pc, #24]	; (b4194 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0x20>)
   b417c:	4290      	cmp	r0, r2
   b417e:	d901      	bls.n	b4184 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b4180:	f005 fb2c 	bl	b97dc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4184:	2014      	movs	r0, #20
   b4186:	4358      	muls	r0, r3
      }
   b4188:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b418c:	f7ff bf83 	b.w	b4096 <_Znwj>
   b4190:	bd08      	pop	{r3, pc}
   b4192:	bf00      	nop
   b4194:	06666666 	.word	0x06666666

000b4198 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>:
      basic_string(const basic_string& __str)
   b4198:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b419a:	f100 0308 	add.w	r3, r0, #8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b419e:	6003      	str	r3, [r0, #0]

      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      size_type
      length() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
   b41a0:	e9d1 5300 	ldrd	r5, r3, [r1]
      basic_string(const basic_string& __str)
   b41a4:	4604      	mov	r4, r0
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b41a6:	18ee      	adds	r6, r5, r3
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   b41a8:	b91d      	cbnz	r5, b41b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
   b41aa:	b116      	cbz	r6, b41b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
	  std::__throw_logic_error(__N("basic_string::"
   b41ac:	480c      	ldr	r0, [pc, #48]	; (b41e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x48>)
   b41ae:	f005 fb18 	bl	b97e2 <_ZSt19__throw_logic_errorPKc>
	if (__dnew > size_type(_S_local_capacity))
   b41b2:	2b0f      	cmp	r3, #15
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b41b4:	9301      	str	r3, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b41b6:	d907      	bls.n	b41c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x30>
	    _M_data(_M_create(__dnew, size_type(0)));
   b41b8:	2200      	movs	r2, #0
   b41ba:	a901      	add	r1, sp, #4
   b41bc:	4620      	mov	r0, r4
   b41be:	f005 fbd3 	bl	b9968 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b41c2:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b41c4:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b41c6:	60a3      	str	r3, [r4, #8]
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b41c8:	4632      	mov	r2, r6
   b41ca:	4629      	mov	r1, r5
   b41cc:	6820      	ldr	r0, [r4, #0]
   b41ce:	f005 fc01 	bl	b99d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	_M_set_length(__dnew);
   b41d2:	9b01      	ldr	r3, [sp, #4]
   b41d4:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b41d6:	6063      	str	r3, [r4, #4]
   b41d8:	2100      	movs	r1, #0
   b41da:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b41dc:	b002      	add	sp, #8
   b41de:	bd70      	pop	{r4, r5, r6, pc}
   b41e0:	000bc9d0 	.word	0x000bc9d0

000b41e4 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b41e4:	6803      	ldr	r3, [r0, #0]
   b41e6:	b2c9      	uxtb	r1, r1
   b41e8:	689b      	ldr	r3, [r3, #8]
   b41ea:	4718      	bx	r3

000b41ec <_ZN5Print5writeEPKc.isra.0>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b41ec:	b513      	push	{r0, r1, r4, lr}
   b41ee:	4604      	mov	r4, r0
      if (str == NULL) return 0;
   b41f0:	b161      	cbz	r1, b420c <_ZN5Print5writeEPKc.isra.0+0x20>
      return write((const uint8_t *)str, strlen(str));
   b41f2:	4608      	mov	r0, r1
   b41f4:	9101      	str	r1, [sp, #4]
   b41f6:	f006 fc01 	bl	ba9fc <strlen>
   b41fa:	6823      	ldr	r3, [r4, #0]
   b41fc:	9901      	ldr	r1, [sp, #4]
   b41fe:	68db      	ldr	r3, [r3, #12]
   b4200:	4602      	mov	r2, r0
   b4202:	4620      	mov	r0, r4
    }
   b4204:	b002      	add	sp, #8
   b4206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b420a:	4718      	bx	r3
    }
   b420c:	b002      	add	sp, #8
   b420e:	bd10      	pop	{r4, pc}

000b4210 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>:
  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
   b4210:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b4212:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4216:	4604      	mov	r4, r0
   b4218:	460d      	mov	r5, r1
      if (&__x != this)
   b421a:	d02c      	beq.n	b4276 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x66>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b421c:	e9d1 9a00 	ldrd	r9, sl, [r1]
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_end_of_storage
			 - this->_M_impl._M_start); }
   b4220:	6800      	ldr	r0, [r0, #0]
   b4222:	68a3      	ldr	r3, [r4, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4224:	ebaa 0709 	sub.w	r7, sl, r9
			 - this->_M_impl._M_start); }
   b4228:	1a1b      	subs	r3, r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
   b422a:	429f      	cmp	r7, r3
   b422c:	d925      	bls.n	b427a <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x6a>
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
   b422e:	4827      	ldr	r0, [pc, #156]	; (b42cc <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0xbc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4230:	10bb      	asrs	r3, r7, #2
	  pointer __result = this->_M_allocate(__n);
   b4232:	4358      	muls	r0, r3
   b4234:	f7ff ff9e 	bl	b4174 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
   b4238:	f04f 0c00 	mov.w	ip, #0
   b423c:	4680      	mov	r8, r0
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
   b423e:	eb09 050c 	add.w	r5, r9, ip
   b4242:	45aa      	cmp	sl, r5
   b4244:	d009      	beq.n	b425a <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x4a>
   */
#if __cplusplus >= 201103L
  template<typename _Tp, typename... _Args>
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4246:	eb18 060c 	adds.w	r6, r8, ip
   b424a:	bf1f      	itttt	ne
   b424c:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   b424e:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   b4250:	682b      	ldrne	r3, [r5, #0]
   b4252:	6033      	strne	r3, [r6, #0]
   b4254:	f10c 0c14 	add.w	ip, ip, #20
   b4258:	e7f1      	b.n	b423e <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x2e>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b425a:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b425c:	b118      	cbz	r0, b4266 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x56>
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
   b425e:	68a1      	ldr	r1, [r4, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b4260:	1a09      	subs	r1, r1, r0
   b4262:	f7ff ff1e 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4266:	eb08 0007 	add.w	r0, r8, r7
	      this->_M_impl._M_start = __tmp;
   b426a:	f8c4 8000 	str.w	r8, [r4]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b426e:	60a0      	str	r0, [r4, #8]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4270:	6823      	ldr	r3, [r4, #0]
   b4272:	443b      	add	r3, r7
   b4274:	6063      	str	r3, [r4, #4]
	}
      return *this;
    }
   b4276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b427a:	6862      	ldr	r2, [r4, #4]
   b427c:	1a12      	subs	r2, r2, r0
	  else if (size() >= __xlen)
   b427e:	4297      	cmp	r7, r2
   b4280:	d806      	bhi.n	b4290 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x80>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   b4282:	45ca      	cmp	sl, r9
   b4284:	d0f4      	beq.n	b4270 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x60>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b4286:	463a      	mov	r2, r7
   b4288:	4649      	mov	r1, r9
   b428a:	f006 fb54 	bl	ba936 <memmove>

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b428e:	e7ef      	b.n	b4270 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x60>
	  if (_Num)
   b4290:	b112      	cbz	r2, b4298 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x88>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b4292:	4649      	mov	r1, r9
   b4294:	f006 fb4f 	bl	ba936 <memmove>
   b4298:	e9d4 3e00 	ldrd	r3, lr, [r4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b429c:	682a      	ldr	r2, [r5, #0]
					  __x._M_impl._M_finish,
   b429e:	f8d5 9004 	ldr.w	r9, [r5, #4]
   b42a2:	ebae 0303 	sub.w	r3, lr, r3
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b42a6:	eb02 0803 	add.w	r8, r2, r3
					  __x._M_impl._M_finish,
   b42aa:	f04f 0c00 	mov.w	ip, #0
   b42ae:	eb08 050c 	add.w	r5, r8, ip
   b42b2:	45a9      	cmp	r9, r5
   b42b4:	d0dc      	beq.n	b4270 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x60>
   b42b6:	eb1e 060c 	adds.w	r6, lr, ip
   b42ba:	bf1f      	itttt	ne
   b42bc:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   b42be:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   b42c0:	682b      	ldrne	r3, [r5, #0]
   b42c2:	6033      	strne	r3, [r6, #0]
   b42c4:	f10c 0c14 	add.w	ip, ip, #20
   b42c8:	e7f1      	b.n	b42ae <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x9e>
   b42ca:	bf00      	nop
   b42cc:	cccccccd 	.word	0xcccccccd

000b42d0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>:
      if (&__x != this)
   b42d0:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b42d2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b42d6:	4604      	mov	r4, r0
   b42d8:	468a      	mov	sl, r1
      if (&__x != this)
   b42da:	d036      	beq.n	b434a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7a>
   b42dc:	e9d1 5b00 	ldrd	r5, fp, [r1]
			 - this->_M_impl._M_start); }
   b42e0:	f8d0 9000 	ldr.w	r9, [r0]
   b42e4:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b42e6:	4a39      	ldr	r2, [pc, #228]	; (b43cc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xfc>)
   b42e8:	ebab 0705 	sub.w	r7, fp, r5
			 - this->_M_impl._M_start); }
   b42ec:	eba3 0309 	sub.w	r3, r3, r9
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b42f0:	ea4f 08e7 	mov.w	r8, r7, asr #3
	  if (__xlen > capacity())
   b42f4:	42bb      	cmp	r3, r7
   b42f6:	fb02 f808 	mul.w	r8, r2, r8
   b42fa:	d228      	bcs.n	b434e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7e>
	  pointer __result = this->_M_allocate(__n);
   b42fc:	4640      	mov	r0, r8
   b42fe:	f7ff ff19 	bl	b4134 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
   b4302:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   b4304:	4680      	mov	r8, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b4306:	45ab      	cmp	fp, r5
   b4308:	d00a      	beq.n	b4320 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x50>
   b430a:	f1b8 0f00 	cmp.w	r8, #0
   b430e:	d003      	beq.n	b4318 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x48>
   b4310:	4629      	mov	r1, r5
   b4312:	4640      	mov	r0, r8
   b4314:	f7ff ff40 	bl	b4198 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b4318:	f108 0818 	add.w	r8, r8, #24
   b431c:	3518      	adds	r5, #24
   b431e:	e7f2      	b.n	b4306 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x36>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4320:	e9d4 5800 	ldrd	r5, r8, [r4]
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   b4324:	45a8      	cmp	r8, r5
   b4326:	d004      	beq.n	b4332 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x62>
      { _M_dispose(); }
   b4328:	4628      	mov	r0, r5
   b432a:	f005 fb3f 	bl	b99ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b432e:	3518      	adds	r5, #24
   b4330:	e7f8      	b.n	b4324 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x54>
	      _M_deallocate(this->_M_impl._M_start,
   b4332:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4334:	b118      	cbz	r0, b433e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x6e>
			    - this->_M_impl._M_start);
   b4336:	68a1      	ldr	r1, [r4, #8]
   b4338:	1a09      	subs	r1, r1, r0
   b433a:	f7ff feb2 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b433e:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4340:	443e      	add	r6, r7
   b4342:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4344:	6823      	ldr	r3, [r4, #0]
   b4346:	443b      	add	r3, r7
   b4348:	6063      	str	r3, [r4, #4]
    }
   b434a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b434e:	6846      	ldr	r6, [r0, #4]
   b4350:	eba6 0609 	sub.w	r6, r6, r9
	  else if (size() >= __xlen)
   b4354:	42b7      	cmp	r7, r6
   b4356:	d819      	bhi.n	b438c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xbc>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4358:	4646      	mov	r6, r8
   b435a:	46ca      	mov	sl, r9
   b435c:	2e00      	cmp	r6, #0
   b435e:	dd08      	ble.n	b4372 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xa2>
		  }
	      }
	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
	  }
#endif
	this->_M_assign(__str);
   b4360:	4629      	mov	r1, r5
   b4362:	4650      	mov	r0, sl
   b4364:	f005 fb40 	bl	b99e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b4368:	3518      	adds	r5, #24
	      ++__result;
   b436a:	f10a 0a18 	add.w	sl, sl, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b436e:	3e01      	subs	r6, #1
   b4370:	e7f4      	b.n	b435c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x8c>
   b4372:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
   b4376:	2518      	movs	r5, #24
      : _M_current(__i) { }
   b4378:	6866      	ldr	r6, [r4, #4]
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b437a:	fb05 9508 	mla	r5, r5, r8, r9
	  for (; __first != __last; ++__first)
   b437e:	42ae      	cmp	r6, r5
   b4380:	d0e0      	beq.n	b4344 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
      { _M_dispose(); }
   b4382:	4628      	mov	r0, r5
   b4384:	f005 fb12 	bl	b99ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b4388:	3518      	adds	r5, #24
      {
	++_M_current;
	return *this;
   b438a:	e7f8      	b.n	b437e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xae>
   b438c:	10f6      	asrs	r6, r6, #3
   b438e:	4356      	muls	r6, r2
   b4390:	2e00      	cmp	r6, #0
   b4392:	dd08      	ble.n	b43a6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xd6>
	this->_M_assign(__str);
   b4394:	4629      	mov	r1, r5
   b4396:	4648      	mov	r0, r9
   b4398:	f005 fb26 	bl	b99e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b439c:	3518      	adds	r5, #24
	      ++__result;
   b439e:	f109 0918 	add.w	r9, r9, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b43a2:	3e01      	subs	r6, #1
   b43a4:	e7f4      	b.n	b4390 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xc0>
   b43a6:	e9d4 5600 	ldrd	r5, r6, [r4]
   b43aa:	1b71      	subs	r1, r6, r5
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b43ac:	f8da 5000 	ldr.w	r5, [sl]
					  __x._M_impl._M_finish,
   b43b0:	f8da 8004 	ldr.w	r8, [sl, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b43b4:	440d      	add	r5, r1
   b43b6:	45a8      	cmp	r8, r5
   b43b8:	d0c4      	beq.n	b4344 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b43ba:	b11e      	cbz	r6, b43c4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xf4>
   b43bc:	4629      	mov	r1, r5
   b43be:	4630      	mov	r0, r6
   b43c0:	f7ff feea 	bl	b4198 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b43c4:	3518      	adds	r5, #24
   b43c6:	3618      	adds	r6, #24
   b43c8:	e7f5      	b.n	b43b6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xe6>
   b43ca:	bf00      	nop
   b43cc:	aaaaaaab 	.word	0xaaaaaaab

000b43d0 <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43d0:	b40e      	push	{r1, r2, r3}
   b43d2:	b503      	push	{r0, r1, lr}
   b43d4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b43d6:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43d8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b43dc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b43de:	f004 fb0c 	bl	b89fa <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b43e2:	b002      	add	sp, #8
   b43e4:	f85d eb04 	ldr.w	lr, [sp], #4
   b43e8:	b003      	add	sp, #12
   b43ea:	4770      	bx	lr

000b43ec <_Z16randomizeAddressv>:
  Serial.println();
  delay(1000);
}

//clears up conflicts with multiple i2c slaves having the same address
void randomizeAddress(){
   b43ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while(slaveCount != slaveCountExpected){
   b43f0:	4d9e      	ldr	r5, [pc, #632]	; (b466c <_Z16randomizeAddressv+0x280>)

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b43f2:	f8df 829c 	ldr.w	r8, [pc, #668]	; b4690 <_Z16randomizeAddressv+0x2a4>
void randomizeAddress(){
   b43f6:	b08c      	sub	sp, #48	; 0x30
  while(slaveCount != slaveCountExpected){
   b43f8:	682b      	ldr	r3, [r5, #0]
   b43fa:	2b02      	cmp	r3, #2
   b43fc:	f000 80fd 	beq.w	b45fa <_Z16randomizeAddressv+0x20e>
    slaveCount = 0;
   b4400:	2300      	movs	r3, #0
   b4402:	f8df 9290 	ldr.w	r9, [pc, #656]	; b4694 <_Z16randomizeAddressv+0x2a8>
      if(Wire.available() > 0){
        Serial.println("transmission recieved from: " + String(i));

        slaveCount++;

        String inputBuffer = "";
   b4406:	4f9a      	ldr	r7, [pc, #616]	; (b4670 <_Z16randomizeAddressv+0x284>)
    slaveCount = 0;
   b4408:	602b      	str	r3, [r5, #0]
    for(int i = 8; i <= 119; i++){
   b440a:	2408      	movs	r4, #8
      Serial.println("\nrequest code 1, address: " + String(i));
   b440c:	f005 f832 	bl	b9474 <_Z16_fetch_usbserialv>
   b4410:	4641      	mov	r1, r8
   b4412:	4606      	mov	r6, r0
   b4414:	a808      	add	r0, sp, #32
   b4416:	f004 fb72 	bl	b8afe <_ZN6StringC1EPK19__FlashStringHelper>
   b441a:	220a      	movs	r2, #10
   b441c:	4621      	mov	r1, r4
   b441e:	a804      	add	r0, sp, #16
   b4420:	f004 fbad 	bl	b8b7e <_ZN6StringC1Eih>
   b4424:	a904      	add	r1, sp, #16
   b4426:	a808      	add	r0, sp, #32
   b4428:	f004 fbe4 	bl	b8bf4 <_ZplRK15StringSumHelperRK6String>
   b442c:	6801      	ldr	r1, [r0, #0]
   b442e:	4630      	mov	r0, r6
   b4430:	f004 fabb 	bl	b89aa <_ZN5Print7printlnEPKc>
   b4434:	a804      	add	r0, sp, #16
   b4436:	f004 fb17 	bl	b8a68 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b443a:	a808      	add	r0, sp, #32
   b443c:	f004 fb14 	bl	b8a68 <_ZN6StringD1Ev>
      Wire.beginTransmission(i);
   b4440:	f005 f966 	bl	b9710 <_Z19__fetch_global_Wirev>
   b4444:	4621      	mov	r1, r4
   b4446:	f004 f923 	bl	b8690 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('1');
   b444a:	f005 f961 	bl	b9710 <_Z19__fetch_global_Wirev>
   b444e:	2131      	movs	r1, #49	; 0x31
   b4450:	f7ff fec8 	bl	b41e4 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4454:	fa5f fa84 	uxtb.w	sl, r4
   b4458:	f005 f95a 	bl	b9710 <_Z19__fetch_global_Wirev>
   b445c:	f004 f91f 	bl	b869e <_ZN7TwoWire15endTransmissionEv>
      Wire.requestFrom(i, 24);
   b4460:	f005 f956 	bl	b9710 <_Z19__fetch_global_Wirev>
   b4464:	2218      	movs	r2, #24
   b4466:	4651      	mov	r1, sl
   b4468:	f004 f90b 	bl	b8682 <_ZN7TwoWire11requestFromEhj>
      if(Wire.available() > 0){
   b446c:	f005 f950 	bl	b9710 <_Z19__fetch_global_Wirev>
   b4470:	6803      	ldr	r3, [r0, #0]
   b4472:	691b      	ldr	r3, [r3, #16]
   b4474:	4798      	blx	r3
   b4476:	2800      	cmp	r0, #0
   b4478:	f340 80ba 	ble.w	b45f0 <_Z16randomizeAddressv+0x204>
        Serial.println("transmission recieved from: " + String(i));
   b447c:	f004 fffa 	bl	b9474 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4480:	4649      	mov	r1, r9
   b4482:	4606      	mov	r6, r0
   b4484:	a808      	add	r0, sp, #32
   b4486:	f004 fb3a 	bl	b8afe <_ZN6StringC1EPK19__FlashStringHelper>
   b448a:	220a      	movs	r2, #10
   b448c:	4621      	mov	r1, r4
   b448e:	a804      	add	r0, sp, #16
   b4490:	f004 fb75 	bl	b8b7e <_ZN6StringC1Eih>
   b4494:	a904      	add	r1, sp, #16
   b4496:	a808      	add	r0, sp, #32
   b4498:	f004 fbac 	bl	b8bf4 <_ZplRK15StringSumHelperRK6String>
   b449c:	6801      	ldr	r1, [r0, #0]
   b449e:	4630      	mov	r0, r6
   b44a0:	f004 fa83 	bl	b89aa <_ZN5Print7printlnEPKc>
   b44a4:	a804      	add	r0, sp, #16
   b44a6:	f004 fadf 	bl	b8a68 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b44aa:	a808      	add	r0, sp, #32
   b44ac:	f004 fadc 	bl	b8a68 <_ZN6StringD1Ev>
        slaveCount++;
   b44b0:	682b      	ldr	r3, [r5, #0]
        String inputBuffer = "";
   b44b2:	4639      	mov	r1, r7
        slaveCount++;
   b44b4:	3301      	adds	r3, #1
        String inputBuffer = "";
   b44b6:	4668      	mov	r0, sp
        slaveCount++;
   b44b8:	602b      	str	r3, [r5, #0]
        String inputBuffer = "";
   b44ba:	f004 fb20 	bl	b8afe <_ZN6StringC1EPK19__FlashStringHelper>
   b44be:	2618      	movs	r6, #24
        char c;
        for(int j = 0; j < 24; j++){
          c = Wire.read();
   b44c0:	f005 f926 	bl	b9710 <_Z19__fetch_global_Wirev>
   b44c4:	6803      	ldr	r3, [r0, #0]
   b44c6:	695b      	ldr	r3, [r3, #20]
   b44c8:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b44ca:	b2c1      	uxtb	r1, r0
   b44cc:	4668      	mov	r0, sp
   b44ce:	f004 fb84 	bl	b8bda <_ZN6String6concatEc>
        for(int j = 0; j < 24; j++){
   b44d2:	3e01      	subs	r6, #1
   b44d4:	d1f4      	bne.n	b44c0 <_Z16randomizeAddressv+0xd4>
          inputBuffer += c;
        }
        Wire.beginTransmission(i);
   b44d6:	f005 f91b 	bl	b9710 <_Z19__fetch_global_Wirev>
   b44da:	4621      	mov	r1, r4
   b44dc:	f004 f8d8 	bl	b8690 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(inputBuffer);
   b44e0:	f005 f916 	bl	b9710 <_Z19__fetch_global_Wirev>
   b44e4:	9900      	ldr	r1, [sp, #0]
   b44e6:	f7ff fe81 	bl	b41ec <_ZN5Print5writeEPKc.isra.0>
        Serial.println("device id: " + inputBuffer);
   b44ea:	f004 ffc3 	bl	b9474 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b44ee:	4961      	ldr	r1, [pc, #388]	; (b4674 <_Z16randomizeAddressv+0x288>)
   b44f0:	4606      	mov	r6, r0
   b44f2:	a808      	add	r0, sp, #32
   b44f4:	f004 fb03 	bl	b8afe <_ZN6StringC1EPK19__FlashStringHelper>
   b44f8:	4669      	mov	r1, sp
   b44fa:	a808      	add	r0, sp, #32
   b44fc:	f004 fb7a 	bl	b8bf4 <_ZplRK15StringSumHelperRK6String>
   b4500:	6801      	ldr	r1, [r0, #0]
   b4502:	4630      	mov	r0, r6
   b4504:	f004 fa51 	bl	b89aa <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4508:	a808      	add	r0, sp, #32
   b450a:	f004 faad 	bl	b8a68 <_ZN6StringD1Ev>
        Wire.endTransmission();
   b450e:	f005 f8ff 	bl	b9710 <_Z19__fetch_global_Wirev>
   b4512:	f004 f8c4 	bl	b869e <_ZN7TwoWire15endTransmissionEv>
        Serial.println("transmission sent to: " + String(i));
   b4516:	f004 ffad 	bl	b9474 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b451a:	4957      	ldr	r1, [pc, #348]	; (b4678 <_Z16randomizeAddressv+0x28c>)
   b451c:	4606      	mov	r6, r0
   b451e:	a808      	add	r0, sp, #32
   b4520:	f004 faed 	bl	b8afe <_ZN6StringC1EPK19__FlashStringHelper>
   b4524:	220a      	movs	r2, #10
   b4526:	4621      	mov	r1, r4
   b4528:	a804      	add	r0, sp, #16
   b452a:	f004 fb28 	bl	b8b7e <_ZN6StringC1Eih>
   b452e:	a904      	add	r1, sp, #16
   b4530:	a808      	add	r0, sp, #32
   b4532:	f004 fb5f 	bl	b8bf4 <_ZplRK15StringSumHelperRK6String>
   b4536:	6801      	ldr	r1, [r0, #0]
   b4538:	4630      	mov	r0, r6
   b453a:	f004 fa36 	bl	b89aa <_ZN5Print7printlnEPKc>
   b453e:	a804      	add	r0, sp, #16
   b4540:	f004 fa92 	bl	b8a68 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4544:	a808      	add	r0, sp, #32
   b4546:	f004 fa8f 	bl	b8a68 <_ZN6StringD1Ev>

        Wire.beginTransmission(i);
   b454a:	f005 f8e1 	bl	b9710 <_Z19__fetch_global_Wirev>
   b454e:	4621      	mov	r1, r4
   b4550:	f004 f89e 	bl	b8690 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('2');
   b4554:	f005 f8dc 	bl	b9710 <_Z19__fetch_global_Wirev>
   b4558:	2132      	movs	r1, #50	; 0x32
   b455a:	f7ff fe43 	bl	b41e4 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b455e:	f005 f8d7 	bl	b9710 <_Z19__fetch_global_Wirev>
   b4562:	f004 f89c 	bl	b869e <_ZN7TwoWire15endTransmissionEv>

        Serial.println("request code 2, address: " + String(i));
   b4566:	f004 ff85 	bl	b9474 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b456a:	4944      	ldr	r1, [pc, #272]	; (b467c <_Z16randomizeAddressv+0x290>)
   b456c:	4606      	mov	r6, r0
   b456e:	a808      	add	r0, sp, #32
   b4570:	f004 fac5 	bl	b8afe <_ZN6StringC1EPK19__FlashStringHelper>
   b4574:	220a      	movs	r2, #10
   b4576:	4621      	mov	r1, r4
   b4578:	a804      	add	r0, sp, #16
   b457a:	f004 fb00 	bl	b8b7e <_ZN6StringC1Eih>
   b457e:	a904      	add	r1, sp, #16
   b4580:	a808      	add	r0, sp, #32
   b4582:	f004 fb37 	bl	b8bf4 <_ZplRK15StringSumHelperRK6String>
   b4586:	6801      	ldr	r1, [r0, #0]
   b4588:	4630      	mov	r0, r6
   b458a:	f004 fa0e 	bl	b89aa <_ZN5Print7printlnEPKc>
   b458e:	a804      	add	r0, sp, #16
   b4590:	f004 fa6a 	bl	b8a68 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4594:	a808      	add	r0, sp, #32
   b4596:	f004 fa67 	bl	b8a68 <_ZN6StringD1Ev>
        Wire.requestFrom(i, 4);
   b459a:	f005 f8b9 	bl	b9710 <_Z19__fetch_global_Wirev>
   b459e:	2204      	movs	r2, #4
   b45a0:	4651      	mov	r1, sl
   b45a2:	f004 f86e 	bl	b8682 <_ZN7TwoWire11requestFromEhj>
        inputBuffer = "";
   b45a6:	4639      	mov	r1, r7
   b45a8:	4668      	mov	r0, sp
   b45aa:	f004 fad6 	bl	b8b5a <_ZN6StringaSEPKc>
   b45ae:	2604      	movs	r6, #4
        for(int j = 0; j < 4; j++){
          inputBuffer += (char)Wire.read();
   b45b0:	f005 f8ae 	bl	b9710 <_Z19__fetch_global_Wirev>
   b45b4:	6803      	ldr	r3, [r0, #0]
   b45b6:	695b      	ldr	r3, [r3, #20]
   b45b8:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b45ba:	b2c1      	uxtb	r1, r0
   b45bc:	4668      	mov	r0, sp
   b45be:	f004 fb0c 	bl	b8bda <_ZN6String6concatEc>
        for(int j = 0; j < 4; j++){
   b45c2:	3e01      	subs	r6, #1
   b45c4:	d1f4      	bne.n	b45b0 <_Z16randomizeAddressv+0x1c4>
        }
        
        Serial.println("conflict verification: " + inputBuffer);
   b45c6:	f004 ff55 	bl	b9474 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b45ca:	492d      	ldr	r1, [pc, #180]	; (b4680 <_Z16randomizeAddressv+0x294>)
   b45cc:	4606      	mov	r6, r0
   b45ce:	a808      	add	r0, sp, #32
   b45d0:	f004 fa95 	bl	b8afe <_ZN6StringC1EPK19__FlashStringHelper>
   b45d4:	4669      	mov	r1, sp
   b45d6:	a808      	add	r0, sp, #32
   b45d8:	f004 fb0c 	bl	b8bf4 <_ZplRK15StringSumHelperRK6String>
   b45dc:	6801      	ldr	r1, [r0, #0]
   b45de:	4630      	mov	r0, r6
   b45e0:	f004 f9e3 	bl	b89aa <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b45e4:	a808      	add	r0, sp, #32
   b45e6:	f004 fa3f 	bl	b8a68 <_ZN6StringD1Ev>
        String inputBuffer = "";
   b45ea:	4668      	mov	r0, sp
   b45ec:	f004 fa3c 	bl	b8a68 <_ZN6StringD1Ev>
    for(int i = 8; i <= 119; i++){
   b45f0:	3401      	adds	r4, #1
   b45f2:	2c78      	cmp	r4, #120	; 0x78
   b45f4:	f47f af0a 	bne.w	b440c <_Z16randomizeAddressv+0x20>
   b45f8:	e6fe      	b.n	b43f8 <_Z16randomizeAddressv+0xc>
      }
    }
  }

  Serial.println("\nConnected to: ");
   b45fa:	f004 ff3b 	bl	b9474 <_Z16_fetch_usbserialv>
   b45fe:	4921      	ldr	r1, [pc, #132]	; (b4684 <_Z16randomizeAddressv+0x298>)
    Wire.endTransmission();

    Wire.requestFrom(i, 24);
    if(Wire.available() > 0){
      Serial.print(i);
      Serial.print(", ");
   b4600:	4e21      	ldr	r6, [pc, #132]	; (b4688 <_Z16randomizeAddressv+0x29c>)

      addressArr[count] = i;
   b4602:	4f22      	ldr	r7, [pc, #136]	; (b468c <_Z16randomizeAddressv+0x2a0>)
  Serial.println("\nConnected to: ");
   b4604:	f004 f9d1 	bl	b89aa <_ZN5Print7printlnEPKc>
  for(int i = 8; i<= 119; i++){
   b4608:	2408      	movs	r4, #8
  int count = 0;
   b460a:	2500      	movs	r5, #0
    Wire.beginTransmission(i);
   b460c:	f005 f880 	bl	b9710 <_Z19__fetch_global_Wirev>
   b4610:	4621      	mov	r1, r4
   b4612:	f004 f83d 	bl	b8690 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('1');
   b4616:	f005 f87b 	bl	b9710 <_Z19__fetch_global_Wirev>
   b461a:	2131      	movs	r1, #49	; 0x31
   b461c:	f7ff fde2 	bl	b41e4 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b4620:	f005 f876 	bl	b9710 <_Z19__fetch_global_Wirev>
   b4624:	f004 f83b 	bl	b869e <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(i, 24);
   b4628:	f005 f872 	bl	b9710 <_Z19__fetch_global_Wirev>
   b462c:	2218      	movs	r2, #24
   b462e:	b2e1      	uxtb	r1, r4
   b4630:	f004 f827 	bl	b8682 <_ZN7TwoWire11requestFromEhj>
    if(Wire.available() > 0){
   b4634:	f005 f86c 	bl	b9710 <_Z19__fetch_global_Wirev>
   b4638:	6803      	ldr	r3, [r0, #0]
   b463a:	691b      	ldr	r3, [r3, #16]
   b463c:	4798      	blx	r3
   b463e:	2800      	cmp	r0, #0
   b4640:	dd0d      	ble.n	b465e <_Z16randomizeAddressv+0x272>
      Serial.print(i);
   b4642:	f004 ff17 	bl	b9474 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4646:	220a      	movs	r2, #10
   b4648:	4621      	mov	r1, r4
   b464a:	f004 f9b8 	bl	b89be <_ZN5Print11printNumberEmh>
      Serial.print(", ");
   b464e:	f004 ff11 	bl	b9474 <_Z16_fetch_usbserialv>
   b4652:	4631      	mov	r1, r6
   b4654:	f004 f996 	bl	b8984 <_ZN5Print5printEPKc>
      addressArr[count] = i;
   b4658:	f847 4025 	str.w	r4, [r7, r5, lsl #2]

      count++;
   b465c:	3501      	adds	r5, #1
  for(int i = 8; i<= 119; i++){
   b465e:	3401      	adds	r4, #1
   b4660:	2c78      	cmp	r4, #120	; 0x78
   b4662:	d1d3      	bne.n	b460c <_Z16randomizeAddressv+0x220>
    }
  }
}
   b4664:	b00c      	add	sp, #48	; 0x30
   b4666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b466a:	bf00      	nop
   b466c:	2003e6a4 	.word	0x2003e6a4
   b4670:	000bcdae 	.word	0x000bcdae
   b4674:	000bca32 	.word	0x000bca32
   b4678:	000bca3e 	.word	0x000bca3e
   b467c:	000bca55 	.word	0x000bca55
   b4680:	000bca6f 	.word	0x000bca6f
   b4684:	000bca87 	.word	0x000bca87
   b4688:	000bca97 	.word	0x000bca97
   b468c:	20035588 	.word	0x20035588
   b4690:	000bc9fa 	.word	0x000bc9fa
   b4694:	000bca15 	.word	0x000bca15

000b4698 <_Z17acquireWireBufferv>:
  }

  bleCount++;
}

hal_i2c_config_t acquireWireBuffer() {
   b4698:	b538      	push	{r3, r4, r5, lr}
    hal_i2c_config_t config = {
   b469a:	f44f 7500 	mov.w	r5, #512	; 0x200
   b469e:	2314      	movs	r3, #20
hal_i2c_config_t acquireWireBuffer() {
   b46a0:	4604      	mov	r4, r0
    hal_i2c_config_t config = {
   b46a2:	6003      	str	r3, [r0, #0]
   b46a4:	6085      	str	r5, [r0, #8]
   b46a6:	6105      	str	r5, [r0, #16]
        .size = sizeof(hal_i2c_config_t),
        .version = HAL_I2C_CONFIG_VERSION_1,
        .rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b46a8:	4905      	ldr	r1, [pc, #20]	; (b46c0 <_Z17acquireWireBufferv+0x28>)
   b46aa:	4628      	mov	r0, r5
   b46ac:	f005 f894 	bl	b97d8 <_ZnajRKSt9nothrow_t>
        .rx_buffer_size = I2C_BUFFER_SIZE,
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b46b0:	4903      	ldr	r1, [pc, #12]	; (b46c0 <_Z17acquireWireBufferv+0x28>)
        .tx_buffer_size = I2C_BUFFER_SIZE
    };
   b46b2:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b46b4:	4628      	mov	r0, r5
   b46b6:	f005 f88f 	bl	b97d8 <_ZnajRKSt9nothrow_t>
    };
   b46ba:	60e0      	str	r0, [r4, #12]
    return config;
   b46bc:	4620      	mov	r0, r4
   b46be:	bd38      	pop	{r3, r4, r5, pc}
   b46c0:	000bd1b4 	.word	0x000bd1b4

000b46c4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b46c4:	b510      	push	{r4, lr}
   b46c6:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b46c8:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b46ca:	b118      	cbz	r0, b46d4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b46cc:	68a1      	ldr	r1, [r4, #8]
   b46ce:	1a09      	subs	r1, r1, r0
   b46d0:	f7ff fce7 	bl	b40a2 <_ZdlPvj>
      }
   b46d4:	4620      	mov	r0, r4
   b46d6:	bd10      	pop	{r4, pc}

000b46d8 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b46d8:	b510      	push	{r4, lr}
   b46da:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b46dc:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b46de:	b118      	cbz	r0, b46e8 <_ZNSt12_Vector_baseIfSaIfEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b46e0:	68a1      	ldr	r1, [r4, #8]
   b46e2:	1a09      	subs	r1, r1, r0
   b46e4:	f7ff fcdd 	bl	b40a2 <_ZdlPvj>
      }
   b46e8:	4620      	mov	r0, r4
   b46ea:	bd10      	pop	{r4, pc}

000b46ec <_ZNSt12_Vector_baseIiSaIiEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b46ec:	b510      	push	{r4, lr}
   b46ee:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b46f0:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b46f2:	b118      	cbz	r0, b46fc <_ZNSt12_Vector_baseIiSaIiEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b46f4:	68a1      	ldr	r1, [r4, #8]
   b46f6:	1a09      	subs	r1, r1, r0
   b46f8:	f7ff fcd3 	bl	b40a2 <_ZdlPvj>
      }
   b46fc:	4620      	mov	r0, r4
   b46fe:	bd10      	pop	{r4, pc}

000b4700 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b4700:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4702:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   b4706:	4604      	mov	r4, r0
	  for (; __first != __last; ++__first)
   b4708:	42ae      	cmp	r6, r5
   b470a:	d004      	beq.n	b4716 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x16>
      { _M_dispose(); }
   b470c:	4628      	mov	r0, r5
   b470e:	f005 f94d 	bl	b99ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4712:	3518      	adds	r5, #24
   b4714:	e7f8      	b.n	b4708 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   b4716:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4718:	b118      	cbz	r0, b4722 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x22>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b471a:	68a1      	ldr	r1, [r4, #8]
   b471c:	1a09      	subs	r1, r1, r0
   b471e:	f7ff fcc0 	bl	b40a2 <_ZdlPvj>
      }
   b4722:	4620      	mov	r0, r4
   b4724:	bd70      	pop	{r4, r5, r6, pc}

000b4726 <_ZN7RailwayD1Ev>:
#include "Checkpoint.cpp"
#include <string>

//container for all data for each rail line
class Railway{
   b4726:	b510      	push	{r4, lr}
   b4728:	4604      	mov	r4, r0
   b472a:	3048      	adds	r0, #72	; 0x48
   b472c:	f7ff ffe8 	bl	b4700 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b4730:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b4734:	f005 f93a 	bl	b99ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4738:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b473c:	f7ff ffd6 	bl	b46ec <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4740:	f104 0018 	add.w	r0, r4, #24
   b4744:	f7ff ffd2 	bl	b46ec <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4748:	f104 000c 	add.w	r0, r4, #12
   b474c:	f7ff ffc4 	bl	b46d8 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b4750:	4620      	mov	r0, r4
   b4752:	f7ff ffb7 	bl	b46c4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
   b4756:	4620      	mov	r0, r4
   b4758:	bd10      	pop	{r4, pc}
	...

000b475c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
   b475c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b4760:	ab02      	add	r3, sp, #8
   b4762:	e903 0006 	stmdb	r3, {r1, r2}
      constexpr const_iterator
      begin() const noexcept { return _M_array; }

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
   b4766:	4614      	mov	r4, r2
   b4768:	2314      	movs	r3, #20
   b476a:	435c      	muls	r4, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b476c:	2500      	movs	r5, #0
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b476e:	4b19      	ldr	r3, [pc, #100]	; (b47d4 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x78>)
   b4770:	6085      	str	r5, [r0, #8]
   b4772:	e9c0 5500 	strd	r5, r5, [r0]
      vector(initializer_list<value_type> __l,
   b4776:	4607      	mov	r7, r0
   b4778:	10a0      	asrs	r0, r4, #2
   b477a:	4358      	muls	r0, r3

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b477c:	4b16      	ldr	r3, [pc, #88]	; (b47d8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x7c>)
   b477e:	429c      	cmp	r4, r3
   b4780:	4688      	mov	r8, r1
   b4782:	eb01 0904 	add.w	r9, r1, r4
   b4786:	d902      	bls.n	b478e <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x32>
	  __throw_length_error(
   b4788:	4814      	ldr	r0, [pc, #80]	; (b47dc <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x80>)
   b478a:	f005 f82d 	bl	b97e8 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b478e:	f7ff fcf1 	bl	b4174 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4792:	1903      	adds	r3, r0, r4
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4794:	4684      	mov	ip, r0
   b4796:	6038      	str	r0, [r7, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4798:	60bb      	str	r3, [r7, #8]
   b479a:	eb08 0605 	add.w	r6, r8, r5
   b479e:	45b1      	cmp	r9, r6
   b47a0:	d00a      	beq.n	b47b8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x5c>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b47a2:	eb1c 0e05 	adds.w	lr, ip, r5
   b47a6:	bf1f      	itttt	ne
   b47a8:	ce0f      	ldmiane	r6!, {r0, r1, r2, r3}
   b47aa:	e8ae 000f 	stmiane.w	lr!, {r0, r1, r2, r3}
   b47ae:	6833      	ldrne	r3, [r6, #0]
   b47b0:	f8ce 3000 	strne.w	r3, [lr]
   b47b4:	3514      	adds	r5, #20
   b47b6:	e7f0      	b.n	b479a <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x3e>
	  this->_M_impl._M_finish =
   b47b8:	4b09      	ldr	r3, [pc, #36]	; (b47e0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x84>)
   b47ba:	08a4      	lsrs	r4, r4, #2
   b47bc:	435c      	muls	r4, r3
   b47be:	2014      	movs	r0, #20
   b47c0:	f024 4440 	bic.w	r4, r4, #3221225472	; 0xc0000000
   b47c4:	fb00 c404 	mla	r4, r0, r4, ip
      }
   b47c8:	4638      	mov	r0, r7
	  this->_M_impl._M_finish =
   b47ca:	607c      	str	r4, [r7, #4]
      }
   b47cc:	b003      	add	sp, #12
   b47ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b47d2:	bf00      	nop
   b47d4:	cccccccd 	.word	0xcccccccd
   b47d8:	7ffffff8 	.word	0x7ffffff8
   b47dc:	000bca9a 	.word	0x000bca9a
   b47e0:	0ccccccd 	.word	0x0ccccccd

000b47e4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>:
      vector(initializer_list<value_type> __l,
   b47e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b47e8:	ab02      	add	r3, sp, #8
   b47ea:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b47ee:	2300      	movs	r3, #0
   b47f0:	e9c0 3300 	strd	r3, r3, [r0]
   b47f4:	6083      	str	r3, [r0, #8]
   b47f6:	4616      	mov	r6, r2
   b47f8:	2318      	movs	r3, #24
   b47fa:	435e      	muls	r6, r3
   b47fc:	4b10      	ldr	r3, [pc, #64]	; (b4840 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x5c>)
      vector(initializer_list<value_type> __l,
   b47fe:	4604      	mov	r4, r0
   b4800:	10f0      	asrs	r0, r6, #3
   b4802:	4358      	muls	r0, r3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4804:	4b0f      	ldr	r3, [pc, #60]	; (b4844 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x60>)
   b4806:	429e      	cmp	r6, r3
   b4808:	460f      	mov	r7, r1
   b480a:	eb01 0806 	add.w	r8, r1, r6
   b480e:	d902      	bls.n	b4816 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x32>
	  __throw_length_error(
   b4810:	480d      	ldr	r0, [pc, #52]	; (b4848 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x64>)
   b4812:	f004 ffe9 	bl	b97e8 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4816:	f7ff fc8d 	bl	b4134 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b481a:	4406      	add	r6, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b481c:	4605      	mov	r5, r0
   b481e:	6020      	str	r0, [r4, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4820:	60a6      	str	r6, [r4, #8]
   b4822:	45b8      	cmp	r8, r7
   b4824:	d007      	beq.n	b4836 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x52>
   b4826:	b11d      	cbz	r5, b4830 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x4c>
   b4828:	4639      	mov	r1, r7
   b482a:	4628      	mov	r0, r5
   b482c:	f7ff fcb4 	bl	b4198 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b4830:	3718      	adds	r7, #24
   b4832:	3518      	adds	r5, #24
   b4834:	e7f5      	b.n	b4822 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x3e>
      }
   b4836:	4620      	mov	r0, r4
	  this->_M_impl._M_finish =
   b4838:	6065      	str	r5, [r4, #4]
      }
   b483a:	b002      	add	sp, #8
   b483c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4840:	aaaaaaab 	.word	0xaaaaaaab
   b4844:	7ffffff8 	.word	0x7ffffff8
   b4848:	000bca9a 	.word	0x000bca9a

000b484c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   b484c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4850:	e9d1 2300 	ldrd	r2, r3, [r1]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4854:	2700      	movs	r7, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4856:	eba3 0802 	sub.w	r8, r3, r2
      vector(const vector& __x)
   b485a:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b485c:	e9c0 7700 	strd	r7, r7, [r0]
   b4860:	6087      	str	r7, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4862:	4817      	ldr	r0, [pc, #92]	; (b48c0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x74>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4864:	ea4f 03a8 	mov.w	r3, r8, asr #2
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4868:	4358      	muls	r0, r3
      vector(const vector& __x)
   b486a:	460e      	mov	r6, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b486c:	f7ff fc82 	bl	b4174 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4870:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4874:	eb00 0308 	add.w	r3, r0, r8
   b4878:	60a3      	str	r3, [r4, #8]
      : _M_current(__i) { }
   b487a:	e9d6 8600 	ldrd	r8, r6, [r6]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b487e:	4605      	mov	r5, r0
   b4880:	eb08 0c07 	add.w	ip, r8, r7
   b4884:	4566      	cmp	r6, ip
   b4886:	d00c      	beq.n	b48a2 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x56>
   b4888:	eb15 0e07 	adds.w	lr, r5, r7
   b488c:	bf1f      	itttt	ne
   b488e:	e8bc 000f 	ldmiane.w	ip!, {r0, r1, r2, r3}
   b4892:	e8ae 000f 	stmiane.w	lr!, {r0, r1, r2, r3}
   b4896:	f8dc 3000 	ldrne.w	r3, [ip]
   b489a:	f8ce 3000 	strne.w	r3, [lr]
   b489e:	3714      	adds	r7, #20
   b48a0:	e7ee      	b.n	b4880 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x34>
	this->_M_impl._M_finish =
   b48a2:	eba6 0008 	sub.w	r0, r6, r8
   b48a6:	4e07      	ldr	r6, [pc, #28]	; (b48c4 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x78>)
   b48a8:	0880      	lsrs	r0, r0, #2
   b48aa:	4370      	muls	r0, r6
   b48ac:	2314      	movs	r3, #20
   b48ae:	f020 4040 	bic.w	r0, r0, #3221225472	; 0xc0000000
   b48b2:	fb03 5000 	mla	r0, r3, r0, r5
   b48b6:	6060      	str	r0, [r4, #4]
      }
   b48b8:	4620      	mov	r0, r4
   b48ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b48be:	bf00      	nop
   b48c0:	cccccccd 	.word	0xcccccccd
   b48c4:	0ccccccd 	.word	0x0ccccccd

000b48c8 <_ZNSt6vectorI7RailwaySaIS0_EE2atEj>:
      at(size_type __n)
   b48c8:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b48ca:	e9d0 4200 	ldrd	r4, r2, [r0]
   b48ce:	4806      	ldr	r0, [pc, #24]	; (b48e8 <_ZNSt6vectorI7RailwaySaIS0_EE2atEj+0x20>)
   b48d0:	1b12      	subs	r2, r2, r4
   b48d2:	1092      	asrs	r2, r2, #2
   b48d4:	4342      	muls	r2, r0
	if (__n >= this->size())
   b48d6:	4291      	cmp	r1, r2
   b48d8:	d302      	bcc.n	b48e0 <_ZNSt6vectorI7RailwaySaIS0_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b48da:	4804      	ldr	r0, [pc, #16]	; (b48ec <_ZNSt6vectorI7RailwaySaIS0_EE2atEj+0x24>)
   b48dc:	f004 ff87 	bl	b97ee <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b48e0:	2064      	movs	r0, #100	; 0x64
   b48e2:	fb00 4001 	mla	r0, r0, r1, r4
   b48e6:	bd10      	pop	{r4, pc}
   b48e8:	c28f5c29 	.word	0xc28f5c29
   b48ec:	000bcacb 	.word	0x000bcacb

000b48f0 <_ZNSt6vectorIfSaIfEE2atEj>:
      at(size_type __n)
   b48f0:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b48f2:	e9d0 5400 	ldrd	r5, r4, [r0]
   b48f6:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
   b48f8:	ebb1 0fa4 	cmp.w	r1, r4, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b48fc:	ea4f 02a4 	mov.w	r2, r4, asr #2
	if (__n >= this->size())
   b4900:	d302      	bcc.n	b4908 <_ZNSt6vectorIfSaIfEE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b4902:	4803      	ldr	r0, [pc, #12]	; (b4910 <_ZNSt6vectorIfSaIfEE2atEj+0x20>)
   b4904:	f004 ff73 	bl	b97ee <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b4908:	eb05 0081 	add.w	r0, r5, r1, lsl #2
   b490c:	bd38      	pop	{r3, r4, r5, pc}
   b490e:	bf00      	nop
   b4910:	000bcacb 	.word	0x000bcacb

000b4914 <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj>:
      at(size_type __n)
   b4914:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4916:	e9d0 4200 	ldrd	r4, r2, [r0]
   b491a:	4806      	ldr	r0, [pc, #24]	; (b4934 <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj+0x20>)
   b491c:	1b12      	subs	r2, r2, r4
   b491e:	1092      	asrs	r2, r2, #2
   b4920:	4342      	muls	r2, r0
	if (__n >= this->size())
   b4922:	4291      	cmp	r1, r2
   b4924:	d302      	bcc.n	b492c <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b4926:	4804      	ldr	r0, [pc, #16]	; (b4938 <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj+0x24>)
   b4928:	f004 ff61 	bl	b97ee <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b492c:	2014      	movs	r0, #20
   b492e:	fb00 4001 	mla	r0, r0, r1, r4
   b4932:	bd10      	pop	{r4, pc}
   b4934:	cccccccd 	.word	0xcccccccd
   b4938:	000bcacb 	.word	0x000bcacb

000b493c <_ZNSt6vectorIiSaIiEE2atEj>:
      at(size_type __n)
   b493c:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b493e:	e9d0 5400 	ldrd	r5, r4, [r0]
   b4942:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
   b4944:	ebb1 0fa4 	cmp.w	r1, r4, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4948:	ea4f 02a4 	mov.w	r2, r4, asr #2
	if (__n >= this->size())
   b494c:	d302      	bcc.n	b4954 <_ZNSt6vectorIiSaIiEE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b494e:	4803      	ldr	r0, [pc, #12]	; (b495c <_ZNSt6vectorIiSaIiEE2atEj+0x20>)
   b4950:	f004 ff4d 	bl	b97ee <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b4954:	eb05 0081 	add.w	r0, r5, r1, lsl #2
   b4958:	bd38      	pop	{r3, r4, r5, pc}
   b495a:	bf00      	nop
   b495c:	000bcacb 	.word	0x000bcacb

000b4960 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>:
      at(size_type __n)
   b4960:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4962:	e9d0 4200 	ldrd	r4, r2, [r0]
   b4966:	4806      	ldr	r0, [pc, #24]	; (b4980 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj+0x20>)
   b4968:	1b12      	subs	r2, r2, r4
   b496a:	10d2      	asrs	r2, r2, #3
   b496c:	4342      	muls	r2, r0
	if (__n >= this->size())
   b496e:	4291      	cmp	r1, r2
   b4970:	d302      	bcc.n	b4978 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b4972:	4804      	ldr	r0, [pc, #16]	; (b4984 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj+0x24>)
   b4974:	f004 ff3b 	bl	b97ee <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b4978:	2018      	movs	r0, #24
   b497a:	fb00 4001 	mla	r0, r0, r1, r4
   b497e:	bd10      	pop	{r4, pc}
   b4980:	aaaaaaab 	.word	0xaaaaaaab
   b4984:	000bcacb 	.word	0x000bcacb

000b4988 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(bleCount <= slaveCountExpected){
   b498c:	4c6b      	ldr	r4, [pc, #428]	; (b4b3c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1b4>)
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b498e:	b089      	sub	sp, #36	; 0x24
   b4990:	4680      	mov	r8, r0
   b4992:	460d      	mov	r5, r1
  String inputBuffer = "";
   b4994:	4668      	mov	r0, sp
   b4996:	496a      	ldr	r1, [pc, #424]	; (b4b40 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1b8>)
   b4998:	f004 f8b1 	bl	b8afe <_ZN6StringC1EPK19__FlashStringHelper>
  if(bleCount <= slaveCountExpected){
   b499c:	6823      	ldr	r3, [r4, #0]
   b499e:	2b02      	cmp	r3, #2
   b49a0:	f300 80c2 	bgt.w	b4b28 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1a0>
    for(int i = 0; i < len - 1; i++){
   b49a4:	2600      	movs	r6, #0
   b49a6:	3d01      	subs	r5, #1
   b49a8:	42b5      	cmp	r5, r6
   b49aa:	d906      	bls.n	b49ba <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x32>
	String & operator += (char c)			{concat(c); return (*this);}
   b49ac:	f818 1006 	ldrb.w	r1, [r8, r6]
   b49b0:	4668      	mov	r0, sp
   b49b2:	f004 f912 	bl	b8bda <_ZN6String6concatEc>
   b49b6:	3601      	adds	r6, #1
   b49b8:	e7f6      	b.n	b49a8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x20>
    if(bleCount < slaveCountExpected){
   b49ba:	6823      	ldr	r3, [r4, #0]
   b49bc:	2b01      	cmp	r3, #1
   b49be:	dc04      	bgt.n	b49ca <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x42>
      txCharacteristic.setValue("\nEnter the line color of the device with the blinking LED: ");
   b49c0:	4960      	ldr	r1, [pc, #384]	; (b4b44 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1bc>)
   b49c2:	4861      	ldr	r0, [pc, #388]	; (b4b48 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c0>)
   b49c4:	2200      	movs	r2, #0
   b49c6:	f002 feab 	bl	b7720 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    Wire.beginTransmission(addressArr[bleCount]);
   b49ca:	f004 fea1 	bl	b9710 <_Z19__fetch_global_Wirev>
   b49ce:	4d5f      	ldr	r5, [pc, #380]	; (b4b4c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c4>)
   b49d0:	6823      	ldr	r3, [r4, #0]
   b49d2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   b49d6:	f003 fe5b 	bl	b8690 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('3');
   b49da:	f004 fe99 	bl	b9710 <_Z19__fetch_global_Wirev>
   b49de:	2133      	movs	r1, #51	; 0x33
   b49e0:	f7ff fc00 	bl	b41e4 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b49e4:	f004 fe94 	bl	b9710 <_Z19__fetch_global_Wirev>
   b49e8:	f003 fe59 	bl	b869e <_ZN7TwoWire15endTransmissionEv>
    if(bleCount > 0){
   b49ec:	6823      	ldr	r3, [r4, #0]
   b49ee:	2b00      	cmp	r3, #0
   b49f0:	f340 809a 	ble.w	b4b28 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1a0>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b49f4:	4956      	ldr	r1, [pc, #344]	; (b4b50 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c8>)
   b49f6:	4668      	mov	r0, sp
   b49f8:	f004 f91d 	bl	b8c36 <_ZNK6String6equalsEPKc>
      if(inputBuffer == "red"){
   b49fc:	2800      	cmp	r0, #0
   b49fe:	f000 8083 	beq.w	b4b08 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x180>
        Serial.println("receive red");
   b4a02:	f004 fd37 	bl	b9474 <_Z16_fetch_usbserialv>
   b4a06:	4953      	ldr	r1, [pc, #332]	; (b4b54 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1cc>)
   b4a08:	f003 ffcf 	bl	b89aa <_ZN5Print7printlnEPKc>
        colorAdr = 0;
   b4a0c:	2700      	movs	r7, #0
      Wire.beginTransmission(addressArr[bleCount - 1]);
   b4a0e:	f004 fe7f 	bl	b9710 <_Z19__fetch_global_Wirev>
   b4a12:	6823      	ldr	r3, [r4, #0]
   b4a14:	3b01      	subs	r3, #1
   b4a16:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   b4a1a:	f003 fe39 	bl	b8690 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(String(railways.at(colorAdr).colors.at(0).c_str()));
   b4a1e:	f004 fe77 	bl	b9710 <_Z19__fetch_global_Wirev>
   b4a22:	4639      	mov	r1, r7
   b4a24:	4606      	mov	r6, r0
   b4a26:	484c      	ldr	r0, [pc, #304]	; (b4b58 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1d0>)
   b4a28:	f7ff ff4e 	bl	b48c8 <_ZNSt6vectorI7RailwaySaIS0_EE2atEj>
   b4a2c:	2100      	movs	r1, #0
   b4a2e:	3048      	adds	r0, #72	; 0x48
   b4a30:	f7ff ff96 	bl	b4960 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
   b4a34:	6801      	ldr	r1, [r0, #0]
   b4a36:	a804      	add	r0, sp, #16
   b4a38:	f004 f861 	bl	b8afe <_ZN6StringC1EPK19__FlashStringHelper>
   b4a3c:	9904      	ldr	r1, [sp, #16]
   b4a3e:	4630      	mov	r0, r6
   b4a40:	f7ff fbd4 	bl	b41ec <_ZN5Print5writeEPKc.isra.0>
   b4a44:	a804      	add	r0, sp, #16
   b4a46:	f004 f80f 	bl	b8a68 <_ZN6StringD1Ev>
      Wire.write(String(railways.at(colorAdr).colors.at(1).c_str()));
   b4a4a:	f004 fe61 	bl	b9710 <_Z19__fetch_global_Wirev>
   b4a4e:	4639      	mov	r1, r7
   b4a50:	4606      	mov	r6, r0
   b4a52:	4841      	ldr	r0, [pc, #260]	; (b4b58 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1d0>)
   b4a54:	f7ff ff38 	bl	b48c8 <_ZNSt6vectorI7RailwaySaIS0_EE2atEj>
   b4a58:	2101      	movs	r1, #1
   b4a5a:	3048      	adds	r0, #72	; 0x48
   b4a5c:	f7ff ff80 	bl	b4960 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
   b4a60:	6801      	ldr	r1, [r0, #0]
   b4a62:	a804      	add	r0, sp, #16
   b4a64:	f004 f84b 	bl	b8afe <_ZN6StringC1EPK19__FlashStringHelper>
   b4a68:	9904      	ldr	r1, [sp, #16]
   b4a6a:	4630      	mov	r0, r6
   b4a6c:	f7ff fbbe 	bl	b41ec <_ZN5Print5writeEPKc.isra.0>
   b4a70:	a804      	add	r0, sp, #16
   b4a72:	f003 fff9 	bl	b8a68 <_ZN6StringD1Ev>
      Wire.endTransmission();
   b4a76:	f004 fe4b 	bl	b9710 <_Z19__fetch_global_Wirev>
   b4a7a:	f003 fe10 	bl	b869e <_ZN7TwoWire15endTransmissionEv>
      sequenceArr[bleCount - 1] = addressArr[colorAdr];
   b4a7e:	6823      	ldr	r3, [r4, #0]
   b4a80:	4e36      	ldr	r6, [pc, #216]	; (b4b5c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1d4>)
   b4a82:	f855 2027 	ldr.w	r2, [r5, r7, lsl #2]
   b4a86:	3b01      	subs	r3, #1
   b4a88:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
      Wire.beginTransmission(addressArr[bleCount - 1]);
   b4a8c:	f004 fe40 	bl	b9710 <_Z19__fetch_global_Wirev>
   b4a90:	6823      	ldr	r3, [r4, #0]
   b4a92:	3b01      	subs	r3, #1
   b4a94:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   b4a98:	f003 fdfa 	bl	b8690 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('4');
   b4a9c:	f004 fe38 	bl	b9710 <_Z19__fetch_global_Wirev>
   b4aa0:	2134      	movs	r1, #52	; 0x34
   b4aa2:	f7ff fb9f 	bl	b41e4 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4aa6:	f004 fe33 	bl	b9710 <_Z19__fetch_global_Wirev>
   b4aaa:	f003 fdf8 	bl	b869e <_ZN7TwoWire15endTransmissionEv>
      if(bleCount == slaveCountExpected){
   b4aae:	6823      	ldr	r3, [r4, #0]
   b4ab0:	2b02      	cmp	r3, #2
   b4ab2:	d139      	bne.n	b4b28 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1a0>
        userInput = true;
   b4ab4:	4b2a      	ldr	r3, [pc, #168]	; (b4b60 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1d8>)
      Serial.print(", ");
   b4ab6:	f8df 90b8 	ldr.w	r9, [pc, #184]	; b4b70 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1e8>
        userInput = true;
   b4aba:	2201      	movs	r2, #1
    delay(1000);
   b4abc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
        userInput = true;
   b4ac0:	701a      	strb	r2, [r3, #0]
    delay(1000);
   b4ac2:	f002 fb83 	bl	b71cc <delay>
    Serial.println("\nSequence: ");
   b4ac6:	f004 fcd5 	bl	b9474 <_Z16_fetch_usbserialv>
   b4aca:	4926      	ldr	r1, [pc, #152]	; (b4b64 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1dc>)
   b4acc:	f003 ff6d 	bl	b89aa <_ZN5Print7printlnEPKc>
    for(int i = 0; i < slaveCountExpected; i++){
   b4ad0:	f04f 0800 	mov.w	r8, #0
      Serial.print(sequenceArr[i]);
   b4ad4:	f004 fcce 	bl	b9474 <_Z16_fetch_usbserialv>
   b4ad8:	f856 5b04 	ldr.w	r5, [r6], #4
        if (n < 0 && base == 10) {
   b4adc:	2d00      	cmp	r5, #0
   b4ade:	4607      	mov	r7, r0
   b4ae0:	da20      	bge.n	b4b24 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x19c>
            t = print('-');
   b4ae2:	212d      	movs	r1, #45	; 0x2d
   b4ae4:	f003 ff52 	bl	b898c <_ZN5Print5printEc>
            val = -n;
   b4ae8:	4269      	negs	r1, r5
        return printNumber(val, base) + t;
   b4aea:	220a      	movs	r2, #10
   b4aec:	4638      	mov	r0, r7
   b4aee:	f003 ff66 	bl	b89be <_ZN5Print11printNumberEmh>
      Serial.print(", ");
   b4af2:	f004 fcbf 	bl	b9474 <_Z16_fetch_usbserialv>
   b4af6:	4649      	mov	r1, r9
   b4af8:	f003 ff44 	bl	b8984 <_ZN5Print5printEPKc>
    for(int i = 0; i < slaveCountExpected; i++){
   b4afc:	f1b8 0f00 	cmp.w	r8, #0
   b4b00:	d112      	bne.n	b4b28 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1a0>
   b4b02:	f04f 0801 	mov.w	r8, #1
   b4b06:	e7e5      	b.n	b4ad4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14c>
   b4b08:	4917      	ldr	r1, [pc, #92]	; (b4b68 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1e0>)
   b4b0a:	4668      	mov	r0, sp
   b4b0c:	f004 f893 	bl	b8c36 <_ZNK6String6equalsEPKc>
      }else if(inputBuffer == "blue"){
   b4b10:	2800      	cmp	r0, #0
   b4b12:	f43f af7c 	beq.w	b4a0e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x86>
        Serial.println("receive blue");
   b4b16:	f004 fcad 	bl	b9474 <_Z16_fetch_usbserialv>
   b4b1a:	4914      	ldr	r1, [pc, #80]	; (b4b6c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1e4>)
   b4b1c:	f003 ff45 	bl	b89aa <_ZN5Print7printlnEPKc>
        colorAdr = 1;
   b4b20:	2701      	movs	r7, #1
   b4b22:	e774      	b.n	b4a0e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x86>
            val = n;
   b4b24:	4629      	mov	r1, r5
   b4b26:	e7e0      	b.n	b4aea <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x162>
  bleCount++;
   b4b28:	6823      	ldr	r3, [r4, #0]
  String inputBuffer = "";
   b4b2a:	4668      	mov	r0, sp
  bleCount++;
   b4b2c:	3301      	adds	r3, #1
   b4b2e:	6023      	str	r3, [r4, #0]
  String inputBuffer = "";
   b4b30:	f003 ff9a 	bl	b8a68 <_ZN6StringD1Ev>
}
   b4b34:	b009      	add	sp, #36	; 0x24
   b4b36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4b3a:	bf00      	nop
   b4b3c:	20035590 	.word	0x20035590
   b4b40:	000bcdae 	.word	0x000bcdae
   b4b44:	000bcb15 	.word	0x000bcb15
   b4b48:	2003e6a8 	.word	0x2003e6a8
   b4b4c:	20035588 	.word	0x20035588
   b4b50:	000bcb59 	.word	0x000bcb59
   b4b54:	000bcb51 	.word	0x000bcb51
   b4b58:	2003e5c4 	.word	0x2003e5c4
   b4b5c:	2003e69c 	.word	0x2003e69c
   b4b60:	2003e6b0 	.word	0x2003e6b0
   b4b64:	000bcb6a 	.word	0x000bcb6a
   b4b68:	000bcb65 	.word	0x000bcb65
   b4b6c:	000bcb5d 	.word	0x000bcb5d
   b4b70:	000bca97 	.word	0x000bca97

000b4b74 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4b74:	2900      	cmp	r1, #0
      _M_create_storage(size_t __n)
   b4b76:	b538      	push	{r3, r4, r5, lr}
   b4b78:	4604      	mov	r4, r0
      _M_allocate(size_t __n)
   b4b7a:	ea4f 0581 	mov.w	r5, r1, lsl #2
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4b7e:	d00c      	beq.n	b4b9a <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x26>
	if (__n > this->_M_max_size())
   b4b80:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   b4b84:	d301      	bcc.n	b4b8a <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x16>
	  std::__throw_bad_alloc();
   b4b86:	f004 fe29 	bl	b97dc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4b8a:	4628      	mov	r0, r5
   b4b8c:	f7ff fa83 	bl	b4096 <_Znwj>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4b90:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4b94:	4428      	add	r0, r5
   b4b96:	60a0      	str	r0, [r4, #8]
      }
   b4b98:	bd38      	pop	{r3, r4, r5, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4b9a:	4608      	mov	r0, r1
   b4b9c:	e7f8      	b.n	b4b90 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x1c>

000b4b9e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b4b9e:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b4ba0:	b510      	push	{r4, lr}
   b4ba2:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b4ba4:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b4ba8:	d005      	beq.n	b4bb6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b4baa:	4601      	mov	r1, r0
   b4bac:	4622      	mov	r2, r4
   b4bae:	4618      	mov	r0, r3
   b4bb0:	f005 fec1 	bl	ba936 <memmove>
   b4bb4:	4603      	mov	r3, r0
	  return __result + _Num;
	}
   b4bb6:	1918      	adds	r0, r3, r4
   b4bb8:	bd10      	pop	{r4, pc}

000b4bba <_ZNSt6vectorIiSaIiEEC1ERKS1_>:
      vector(const vector& __x)
   b4bba:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4bbc:	e9d1 3600 	ldrd	r3, r6, [r1]
   b4bc0:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4bc2:	2300      	movs	r3, #0
      vector(const vector& __x)
   b4bc4:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4bc6:	e9c0 3300 	strd	r3, r3, [r0]
   b4bca:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4bcc:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
   b4bce:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4bd0:	f7ff fac2 	bl	b4158 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4bd4:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4bd8:	4406      	add	r6, r0
   b4bda:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4bdc:	4602      	mov	r2, r0
      if (std::is_constant_evaluated())
	return std::__copy_move<_IsMove, false, _Category>::
	  __copy_m(__first, __last, __result);
#endif
      return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
			      _Category>::__copy_m(__first, __last, __result);
   b4bde:	e9d5 0100 	ldrd	r0, r1, [r5]
   b4be2:	f7ff ffdc 	bl	b4b9e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
   b4be6:	6060      	str	r0, [r4, #4]
      }
   b4be8:	4620      	mov	r0, r4
   b4bea:	bd70      	pop	{r4, r5, r6, pc}

000b4bec <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>:
      vector(initializer_list<value_type> __l,
   b4bec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b4bee:	ab04      	add	r3, sp, #16
   b4bf0:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4bf4:	2300      	movs	r3, #0
   b4bf6:	e9c0 3300 	strd	r3, r3, [r0]
   b4bfa:	6083      	str	r3, [r0, #8]
      vector(initializer_list<value_type> __l,
   b4bfc:	4604      	mov	r4, r0
   b4bfe:	4613      	mov	r3, r2
   b4c00:	460e      	mov	r6, r1
   b4c02:	0095      	lsls	r5, r2, #2
   b4c04:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   b4c08:	f342 001d 	sbfx	r0, r2, #0, #30
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4c0c:	4a0a      	ldr	r2, [pc, #40]	; (b4c38 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_+0x4c>)
   b4c0e:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   b4c12:	d202      	bcs.n	b4c1a <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_+0x2e>
	  __throw_length_error(
   b4c14:	4809      	ldr	r0, [pc, #36]	; (b4c3c <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_+0x50>)
   b4c16:	f004 fde7 	bl	b97e8 <_ZSt20__throw_length_errorPKc>
   b4c1a:	9101      	str	r1, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4c1c:	f7ff fa9c 	bl	b4158 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4c20:	4405      	add	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4c22:	4602      	mov	r2, r0
   b4c24:	6020      	str	r0, [r4, #0]
   b4c26:	9901      	ldr	r1, [sp, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4c28:	60a5      	str	r5, [r4, #8]
   b4c2a:	4630      	mov	r0, r6
   b4c2c:	f7ff ffb7 	bl	b4b9e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
   b4c30:	6060      	str	r0, [r4, #4]
      }
   b4c32:	4620      	mov	r0, r4
   b4c34:	b004      	add	sp, #16
   b4c36:	bd70      	pop	{r4, r5, r6, pc}
   b4c38:	7ffffffc 	.word	0x7ffffffc
   b4c3c:	000bca9a 	.word	0x000bca9a

000b4c40 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>:
      if (&__x != this)
   b4c40:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b4c42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b4c44:	4604      	mov	r4, r0
   b4c46:	460d      	mov	r5, r1
      if (&__x != this)
   b4c48:	d01d      	beq.n	b4c86 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x46>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c4a:	e9d1 7100 	ldrd	r7, r1, [r1]
			 - this->_M_impl._M_start); }
   b4c4e:	6802      	ldr	r2, [r0, #0]
   b4c50:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c52:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b4c54:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b4c56:	429e      	cmp	r6, r3
   b4c58:	d917      	bls.n	b4c8a <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x4a>
	  pointer __result = this->_M_allocate(__n);
   b4c5a:	10b0      	asrs	r0, r6, #2
   b4c5c:	9101      	str	r1, [sp, #4]
   b4c5e:	f7ff fa7b 	bl	b4158 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
   b4c62:	9901      	ldr	r1, [sp, #4]
   b4c64:	4602      	mov	r2, r0
   b4c66:	4605      	mov	r5, r0
   b4c68:	4638      	mov	r0, r7
   b4c6a:	f7ff ff98 	bl	b4b9e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4c6e:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4c70:	b118      	cbz	r0, b4c7a <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x3a>
			    - this->_M_impl._M_start);
   b4c72:	68a1      	ldr	r1, [r4, #8]
	::operator delete(__p
   b4c74:	1a09      	subs	r1, r1, r0
   b4c76:	f7ff fa14 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b4c7a:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4c7c:	4435      	add	r5, r6
   b4c7e:	60a5      	str	r5, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4c80:	6823      	ldr	r3, [r4, #0]
   b4c82:	4433      	add	r3, r6
   b4c84:	6063      	str	r3, [r4, #4]
    }
   b4c86:	b003      	add	sp, #12
   b4c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c8a:	6843      	ldr	r3, [r0, #4]
   b4c8c:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b4c8e:	429e      	cmp	r6, r3
   b4c90:	d803      	bhi.n	b4c9a <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x5a>
   b4c92:	4638      	mov	r0, r7
   b4c94:	f7ff ff83 	bl	b4b9e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
   b4c98:	e7f2      	b.n	b4c80 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x40>
   b4c9a:	18f9      	adds	r1, r7, r3
   b4c9c:	4638      	mov	r0, r7
   b4c9e:	f7ff ff7e 	bl	b4b9e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
   b4ca2:	e9d4 0200 	ldrd	r0, r2, [r4]
   b4ca6:	e9d5 3100 	ldrd	r3, r1, [r5]
   b4caa:	1a10      	subs	r0, r2, r0
   b4cac:	4418      	add	r0, r3
   b4cae:	e7f1      	b.n	b4c94 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x54>

000b4cb0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>:
    std::vector<std::string> colors;
    int tripleIndex = -1;
    int loopIndex = -1;
    int lowerLoopBound, upperLoopBound;

    Railway(std::vector<Checkpoint> checkpointInput, std::vector<int> scalerInput, int outputSize, std::string nameInput, std::vector<std::string> colorInput, std::vector<int> loopBoundInput = {0, 0}){
   b4cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4cb4:	2500      	movs	r5, #0
   b4cb6:	461e      	mov	r6, r3
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b4cb8:	f100 0338 	add.w	r3, r0, #56	; 0x38
      { _M_string_length = __length; }
   b4cbc:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   b4cc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4cc4:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
   b4cc8:	4604      	mov	r4, r0
   b4cca:	e9c0 5500 	strd	r5, r5, [r0]
   b4cce:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b4cd2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b4cd6:	e9c0 5506 	strd	r5, r5, [r0, #24]
   b4cda:	e9c0 5508 	strd	r5, r5, [r0, #32]
   b4cde:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
   b4ce2:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
   b4ce6:	b089      	sub	sp, #36	; 0x24
   b4ce8:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
   b4cec:	6505      	str	r5, [r0, #80]	; 0x50
   b4cee:	4617      	mov	r7, r2
   b4cf0:	f100 0a18 	add.w	sl, r0, #24
   b4cf4:	f100 0930 	add.w	r9, r0, #48	; 0x30
   b4cf8:	f100 0848 	add.w	r8, r0, #72	; 0x48
      checkpoints = checkpointInput;
   b4cfc:	f7ff fa88 	bl	b4210 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4d00:	e9d4 2300 	ldrd	r2, r3, [r4]
   b4d04:	1a9b      	subs	r3, r3, r2
   b4d06:	4a39      	ldr	r2, [pc, #228]	; (b4dec <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x13c>)
   b4d08:	ea4f 0ba3 	mov.w	fp, r3, asr #2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4d0c:	42ab      	cmp	r3, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4d0e:	fb02 fb0b 	mul.w	fp, r2, fp
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4d12:	da02      	bge.n	b4d1a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x6a>
	  __throw_length_error(
   b4d14:	4836      	ldr	r0, [pc, #216]	; (b4df0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x140>)
   b4d16:	f004 fd67 	bl	b97e8 <_ZSt20__throw_length_errorPKc>
      { _M_create_storage(__n); }
   b4d1a:	a802      	add	r0, sp, #8
   b4d1c:	4659      	mov	r1, fp
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4d1e:	e9cd 5502 	strd	r5, r5, [sp, #8]
   b4d22:	9504      	str	r5, [sp, #16]
      { _M_create_storage(__n); }
   b4d24:	f7ff ff26 	bl	b4b74 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
   b4d28:	9802      	ldr	r0, [sp, #8]
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
   b4d2a:	f1bb 0f00 	cmp.w	fp, #0
   b4d2e:	d009      	beq.n	b4d44 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x94>
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
   b4d30:	eb00 038b 	add.w	r3, r0, fp, lsl #2
	*__first = __tmp;
   b4d34:	ea4f 028b 	mov.w	r2, fp, lsl #2
   b4d38:	4629      	mov	r1, r5
      std::__fill_a(__first, __first + __n, __value);
   b4d3a:	9301      	str	r3, [sp, #4]
	*__first = __tmp;
   b4d3c:	f005 fe15 	bl	ba96a <memset>
   b4d40:	9b01      	ldr	r3, [sp, #4]
   b4d42:	4618      	mov	r0, r3
	  _M_finish = __x._M_finish;
   b4d44:	e9d4 5203 	ldrd	r5, r2, [r4, #12]
	  _M_start = __x._M_start;
   b4d48:	9902      	ldr	r1, [sp, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4d4a:	6963      	ldr	r3, [r4, #20]
   b4d4c:	9307      	str	r3, [sp, #28]
	  _M_finish = __x._M_finish;
   b4d4e:	e9c4 1003 	strd	r1, r0, [r4, #12]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4d52:	9904      	ldr	r1, [sp, #16]
   b4d54:	6161      	str	r1, [r4, #20]
	  _M_finish = __x._M_finish;
   b4d56:	e9cd 5205 	strd	r5, r2, [sp, #20]
      }
   b4d5a:	a805      	add	r0, sp, #20
	  _M_start = __x._M_start;
   b4d5c:	2500      	movs	r5, #0
	  _M_finish = __x._M_finish;
   b4d5e:	e9cd 5502 	strd	r5, r5, [sp, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4d62:	9504      	str	r5, [sp, #16]
      }
   b4d64:	f7ff fcb8 	bl	b46d8 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b4d68:	a802      	add	r0, sp, #8
   b4d6a:	f7ff fcb5 	bl	b46d8 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
      distances = std::vector<float>(checkpoints.size(), 0);
      scalers = scalerInput;
   b4d6e:	4639      	mov	r1, r7
   b4d70:	4650      	mov	r0, sl
   b4d72:	f7ff ff65 	bl	b4c40 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4d76:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
   b4d7a:	d2cb      	bcs.n	b4d14 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x64>
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4d7c:	4630      	mov	r0, r6
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4d7e:	e9cd 5502 	strd	r5, r5, [sp, #8]
   b4d82:	9504      	str	r5, [sp, #16]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4d84:	f7ff f9e8 	bl	b4158 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4d88:	00b2      	lsls	r2, r6, #2
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4d8a:	4607      	mov	r7, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4d8c:	eb00 0a86 	add.w	sl, r0, r6, lsl #2
      if (__n <= 0)
   b4d90:	b34e      	cbz	r6, b4de6 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x136>
	*__first = __tmp;
   b4d92:	4629      	mov	r1, r5
   b4d94:	f005 fde9 	bl	ba96a <memset>
   b4d98:	4653      	mov	r3, sl
	  _M_finish = __x._M_finish;
   b4d9a:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
   b4d9e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   b4da0:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
	  _M_finish = __x._M_finish;
   b4da4:	e9cd 0105 	strd	r0, r1, [sp, #20]
   b4da8:	e9c4 7309 	strd	r7, r3, [r4, #36]	; 0x24
      }
   b4dac:	a805      	add	r0, sp, #20
	  _M_start = __x._M_start;
   b4dae:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
   b4db0:	e9cd 3302 	strd	r3, r3, [sp, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4db4:	9207      	str	r2, [sp, #28]
   b4db6:	9304      	str	r3, [sp, #16]
      }
   b4db8:	f7ff fc98 	bl	b46ec <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4dbc:	a802      	add	r0, sp, #8
   b4dbe:	f7ff fc95 	bl	b46ec <_ZNSt12_Vector_baseIiSaIiEED1Ev>
	this->_M_assign(__str);
   b4dc2:	9912      	ldr	r1, [sp, #72]	; 0x48
   b4dc4:	4648      	mov	r0, r9
   b4dc6:	f004 fe0f 	bl	b99e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
      outputs = std::vector<int>(outputSize, 0);
      name = nameInput;
      colors = colorInput;
   b4dca:	4640      	mov	r0, r8
   b4dcc:	9913      	ldr	r1, [sp, #76]	; 0x4c
   b4dce:	f7ff fa7f 	bl	b42d0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
	return *(this->_M_impl._M_start + __n);
   b4dd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b4dd4:	681b      	ldr	r3, [r3, #0]
      lowerLoopBound = loopBoundInput[0];
   b4dd6:	681a      	ldr	r2, [r3, #0]
      upperLoopBound = loopBoundInput[1];
   b4dd8:	685b      	ldr	r3, [r3, #4]
      lowerLoopBound = loopBoundInput[0];
   b4dda:	65e2      	str	r2, [r4, #92]	; 0x5c
    }
   b4ddc:	4620      	mov	r0, r4
      upperLoopBound = loopBoundInput[1];
   b4dde:	6623      	str	r3, [r4, #96]	; 0x60
    }
   b4de0:	b009      	add	sp, #36	; 0x24
   b4de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4de6:	4603      	mov	r3, r0
   b4de8:	e7d7      	b.n	b4d9a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0xea>
   b4dea:	bf00      	nop
   b4dec:	cccccccd 	.word	0xcccccccd
   b4df0:	000bca9a 	.word	0x000bca9a

000b4df4 <_Z41__static_initialization_and_destruction_0ii.constprop.0>:
   b4df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4df8:	2801      	cmp	r0, #1
   b4dfa:	b0f7      	sub	sp, #476	; 0x1dc
   b4dfc:	f040 8411 	bne.w	b5622 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x82e>
    Checkpoint *next = nullptr;
    Checkpoint *prev = nullptr;
    Checkpoint *extra = nullptr;

    Checkpoint(float la, float lo){
      lat = la;
   b4e00:	4ba7      	ldr	r3, [pc, #668]	; (b50a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2ac>)
   b4e02:	9353      	str	r3, [sp, #332]	; 0x14c
      lon = lo;
   b4e04:	4ba7      	ldr	r3, [pc, #668]	; (b50a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2b0>)
   b4e06:	9354      	str	r3, [sp, #336]	; 0x150
      lat = la;
   b4e08:	4ba7      	ldr	r3, [pc, #668]	; (b50a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2b4>)
   b4e0a:	9358      	str	r3, [sp, #352]	; 0x160
      lon = lo;
   b4e0c:	4ba7      	ldr	r3, [pc, #668]	; (b50ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2b8>)
   b4e0e:	9359      	str	r3, [sp, #356]	; 0x164
      lat = la;
   b4e10:	4ba7      	ldr	r3, [pc, #668]	; (b50b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2bc>)
   b4e12:	935d      	str	r3, [sp, #372]	; 0x174
      lon = lo;
   b4e14:	4ba7      	ldr	r3, [pc, #668]	; (b50b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2c0>)
   b4e16:	935e      	str	r3, [sp, #376]	; 0x178
      lat = la;
   b4e18:	4ba7      	ldr	r3, [pc, #668]	; (b50b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2c4>)
   b4e1a:	9362      	str	r3, [sp, #392]	; 0x188
      lon = lo;
   b4e1c:	4ba7      	ldr	r3, [pc, #668]	; (b50bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2c8>)
   b4e1e:	9363      	str	r3, [sp, #396]	; 0x18c
      lat = la;
   b4e20:	4ba7      	ldr	r3, [pc, #668]	; (b50c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2cc>)
   b4e22:	9367      	str	r3, [sp, #412]	; 0x19c
      lon = lo;
   b4e24:	4ba7      	ldr	r3, [pc, #668]	; (b50c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2d0>)
   b4e26:	9368      	str	r3, [sp, #416]	; 0x1a0
);
   b4e28:	ae53      	add	r6, sp, #332	; 0x14c
   b4e2a:	2305      	movs	r3, #5
   b4e2c:	932e      	str	r3, [sp, #184]	; 0xb8
   b4e2e:	f10d 098c 	add.w	r9, sp, #140	; 0x8c
   b4e32:	962d      	str	r6, [sp, #180]	; 0xb4
   b4e34:	aa2d      	add	r2, sp, #180	; 0xb4
    Checkpoint(float la, float lo){
   b4e36:	2400      	movs	r4, #0
   b4e38:	464b      	mov	r3, r9
   b4e3a:	ca06      	ldmia	r2, {r1, r2}
   b4e3c:	a838      	add	r0, sp, #224	; 0xe0
   b4e3e:	e9cd 4455 	strd	r4, r4, [sp, #340]	; 0x154
   b4e42:	e9cd 445a 	strd	r4, r4, [sp, #360]	; 0x168
   b4e46:	e9cd 445f 	strd	r4, r4, [sp, #380]	; 0x17c
   b4e4a:	e9cd 4464 	strd	r4, r4, [sp, #400]	; 0x190
   b4e4e:	e9cd 4469 	strd	r4, r4, [sp, #420]	; 0x1a4
   b4e52:	9457      	str	r4, [sp, #348]	; 0x15c
   b4e54:	945c      	str	r4, [sp, #368]	; 0x170
   b4e56:	9461      	str	r4, [sp, #388]	; 0x184
   b4e58:	9466      	str	r4, [sp, #408]	; 0x198
   b4e5a:	946b      	str	r4, [sp, #428]	; 0x1ac
   b4e5c:	f7ff fc7e 	bl	b475c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b4e60:	4b99      	ldr	r3, [pc, #612]	; (b50c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2d4>)
   b4e62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4e64:	ad3b      	add	r5, sp, #236	; 0xec
   b4e66:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   b4e6a:	2104      	movs	r1, #4
   b4e6c:	952b      	str	r5, [sp, #172]	; 0xac
   b4e6e:	912c      	str	r1, [sp, #176]	; 0xb0
   b4e70:	aa2b      	add	r2, sp, #172	; 0xac
   b4e72:	a921      	add	r1, sp, #132	; 0x84
   b4e74:	460b      	mov	r3, r1
   b4e76:	a835      	add	r0, sp, #212	; 0xd4
   b4e78:	ca06      	ldmia	r2, {r1, r2}
   b4e7a:	f7ff feb7 	bl	b4bec <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
   b4e7e:	4993      	ldr	r1, [pc, #588]	; (b50cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2d8>)
   b4e80:	a841      	add	r0, sp, #260	; 0x104
   b4e82:	f7ff f92f 	bl	b40e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b4e86:	4992      	ldr	r1, [pc, #584]	; (b50d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2dc>)
   b4e88:	a847      	add	r0, sp, #284	; 0x11c
   b4e8a:	f7ff f92b 	bl	b40e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b4e8e:	4991      	ldr	r1, [pc, #580]	; (b50d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e0>)
   b4e90:	a84d      	add	r0, sp, #308	; 0x134
   b4e92:	f7ff f927 	bl	b40e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b4e96:	a947      	add	r1, sp, #284	; 0x11c
   b4e98:	9129      	str	r1, [sp, #164]	; 0xa4
   b4e9a:	2102      	movs	r1, #2
   b4e9c:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
   b4ea0:	912a      	str	r1, [sp, #168]	; 0xa8
   b4ea2:	aa29      	add	r2, sp, #164	; 0xa4
   b4ea4:	a91f      	add	r1, sp, #124	; 0x7c
   b4ea6:	460b      	mov	r3, r1
   b4ea8:	4658      	mov	r0, fp
   b4eaa:	ca06      	ldmia	r2, {r1, r2}
   b4eac:	f7ff fc9a 	bl	b47e4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b4eb0:	af25      	add	r7, sp, #148	; 0x94
   b4eb2:	2102      	movs	r1, #2
   b4eb4:	f10d 0abc 	add.w	sl, sp, #188	; 0xbc
   b4eb8:	f10d 0874 	add.w	r8, sp, #116	; 0x74
   b4ebc:	9727      	str	r7, [sp, #156]	; 0x9c
   b4ebe:	9128      	str	r1, [sp, #160]	; 0xa0
   b4ec0:	aa27      	add	r2, sp, #156	; 0x9c
   b4ec2:	ca06      	ldmia	r2, {r1, r2}
   b4ec4:	4643      	mov	r3, r8
   b4ec6:	4650      	mov	r0, sl
   b4ec8:	e9cd 4425 	strd	r4, r4, [sp, #148]	; 0x94
   b4ecc:	f7ff fe8e 	bl	b4bec <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
Railway redLine = Railway(
   b4ed0:	aa41      	add	r2, sp, #260	; 0x104
   b4ed2:	2328      	movs	r3, #40	; 0x28
   b4ed4:	a938      	add	r1, sp, #224	; 0xe0
   b4ed6:	e9cd ba01 	strd	fp, sl, [sp, #4]
   b4eda:	9200      	str	r2, [sp, #0]
   b4edc:	487e      	ldr	r0, [pc, #504]	; (b50d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e4>)
   b4ede:	aa35      	add	r2, sp, #212	; 0xd4
   b4ee0:	f7ff fee6 	bl	b4cb0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
      }
   b4ee4:	4650      	mov	r0, sl
   b4ee6:	f7ff fc01 	bl	b46ec <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b4eea:	4658      	mov	r0, fp
   b4eec:	f7ff fc08 	bl	b4700 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b4ef0:	a84d      	add	r0, sp, #308	; 0x134
   b4ef2:	f004 fd5b 	bl	b99ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4ef6:	a847      	add	r0, sp, #284	; 0x11c
   b4ef8:	f004 fd58 	bl	b99ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4efc:	a841      	add	r0, sp, #260	; 0x104
   b4efe:	f004 fd55 	bl	b99ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4f02:	a835      	add	r0, sp, #212	; 0xd4
   b4f04:	f7ff fbf2 	bl	b46ec <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4f08:	a838      	add	r0, sp, #224	; 0xe0
   b4f0a:	f7ff fbdb 	bl	b46c4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b4f0e:	4b73      	ldr	r3, [pc, #460]	; (b50dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e8>)
   b4f10:	9353      	str	r3, [sp, #332]	; 0x14c
      lon = lo;
   b4f12:	4b73      	ldr	r3, [pc, #460]	; (b50e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2ec>)
   b4f14:	9354      	str	r3, [sp, #336]	; 0x150
      lat = la;
   b4f16:	4b73      	ldr	r3, [pc, #460]	; (b50e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f0>)
   b4f18:	9358      	str	r3, [sp, #352]	; 0x160
      lon = lo;
   b4f1a:	4b73      	ldr	r3, [pc, #460]	; (b50e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f4>)
   b4f1c:	9359      	str	r3, [sp, #356]	; 0x164
      lat = la;
   b4f1e:	4b73      	ldr	r3, [pc, #460]	; (b50ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f8>)
   b4f20:	935d      	str	r3, [sp, #372]	; 0x174
      lon = lo;
   b4f22:	4b73      	ldr	r3, [pc, #460]	; (b50f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2fc>)
   b4f24:	935e      	str	r3, [sp, #376]	; 0x178
      lat = la;
   b4f26:	4b73      	ldr	r3, [pc, #460]	; (b50f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x300>)
   b4f28:	9362      	str	r3, [sp, #392]	; 0x188
      lon = lo;
   b4f2a:	4b73      	ldr	r3, [pc, #460]	; (b50f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x304>)
   b4f2c:	9363      	str	r3, [sp, #396]	; 0x18c
      lat = la;
   b4f2e:	4b73      	ldr	r3, [pc, #460]	; (b50fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x308>)
   b4f30:	9367      	str	r3, [sp, #412]	; 0x19c
      lon = lo;
   b4f32:	4b73      	ldr	r3, [pc, #460]	; (b5100 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x30c>)
   b4f34:	9368      	str	r3, [sp, #416]	; 0x1a0
);
   b4f36:	2206      	movs	r2, #6
      lat = la;
   b4f38:	4b72      	ldr	r3, [pc, #456]	; (b5104 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x310>)
   b4f3a:	936c      	str	r3, [sp, #432]	; 0x1b0
   b4f3c:	9226      	str	r2, [sp, #152]	; 0x98
      lon = lo;
   b4f3e:	4b72      	ldr	r3, [pc, #456]	; (b5108 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x314>)
   b4f40:	9625      	str	r6, [sp, #148]	; 0x94
   b4f42:	aa1b      	add	r2, sp, #108	; 0x6c
    Checkpoint(float la, float lo){
   b4f44:	e9cd 4455 	strd	r4, r4, [sp, #340]	; 0x154
   b4f48:	e9cd 445a 	strd	r4, r4, [sp, #360]	; 0x168
   b4f4c:	e9cd 445f 	strd	r4, r4, [sp, #380]	; 0x17c
   b4f50:	e9cd 4464 	strd	r4, r4, [sp, #400]	; 0x190
   b4f54:	e9cd 4469 	strd	r4, r4, [sp, #420]	; 0x1a4
   b4f58:	e9cd 446e 	strd	r4, r4, [sp, #440]	; 0x1b8
   b4f5c:	9457      	str	r4, [sp, #348]	; 0x15c
   b4f5e:	945c      	str	r4, [sp, #368]	; 0x170
   b4f60:	9461      	str	r4, [sp, #388]	; 0x184
   b4f62:	9466      	str	r4, [sp, #408]	; 0x198
   b4f64:	946b      	str	r4, [sp, #428]	; 0x1ac
   b4f66:	9470      	str	r4, [sp, #448]	; 0x1c0
      lon = lo;
   b4f68:	936d      	str	r3, [sp, #436]	; 0x1b4
   b4f6a:	a838      	add	r0, sp, #224	; 0xe0
   b4f6c:	4613      	mov	r3, r2
   b4f6e:	e897 0006 	ldmia.w	r7, {r1, r2}
   b4f72:	f7ff fbf3 	bl	b475c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b4f76:	4b54      	ldr	r3, [pc, #336]	; (b50c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2d4>)
   b4f78:	9523      	str	r5, [sp, #140]	; 0x8c
   b4f7a:	f103 0c10 	add.w	ip, r3, #16
   b4f7e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b4f82:	462f      	mov	r7, r5
   b4f84:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b4f86:	2205      	movs	r2, #5
   b4f88:	f8dc 3000 	ldr.w	r3, [ip]
   b4f8c:	9224      	str	r2, [sp, #144]	; 0x90
   b4f8e:	e899 0006 	ldmia.w	r9, {r1, r2}
   b4f92:	603b      	str	r3, [r7, #0]
   b4f94:	a835      	add	r0, sp, #212	; 0xd4
   b4f96:	ab19      	add	r3, sp, #100	; 0x64
   b4f98:	9705      	str	r7, [sp, #20]
   b4f9a:	f7ff fe27 	bl	b4bec <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
   b4f9e:	495b      	ldr	r1, [pc, #364]	; (b510c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x318>)
   b4fa0:	a841      	add	r0, sp, #260	; 0x104
   b4fa2:	f7ff f89f 	bl	b40e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b4fa6:	495a      	ldr	r1, [pc, #360]	; (b5110 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x31c>)
   b4fa8:	a847      	add	r0, sp, #284	; 0x11c
   b4faa:	f7ff f89b 	bl	b40e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b4fae:	4959      	ldr	r1, [pc, #356]	; (b5114 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x320>)
   b4fb0:	a84d      	add	r0, sp, #308	; 0x134
   b4fb2:	f7ff f897 	bl	b40e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b4fb6:	aa47      	add	r2, sp, #284	; 0x11c
   b4fb8:	9221      	str	r2, [sp, #132]	; 0x84
   b4fba:	2202      	movs	r2, #2
   b4fbc:	9222      	str	r2, [sp, #136]	; 0x88
   b4fbe:	aa17      	add	r2, sp, #92	; 0x5c
   b4fc0:	4613      	mov	r3, r2
   b4fc2:	aa21      	add	r2, sp, #132	; 0x84
   b4fc4:	ca06      	ldmia	r2, {r1, r2}
   b4fc6:	4658      	mov	r0, fp
   b4fc8:	f7ff fc0c 	bl	b47e4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b4fcc:	2202      	movs	r2, #2
   b4fce:	f10d 0954 	add.w	r9, sp, #84	; 0x54
   b4fd2:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
   b4fd6:	9220      	str	r2, [sp, #128]	; 0x80
   b4fd8:	aa1f      	add	r2, sp, #124	; 0x7c
   b4fda:	ca06      	ldmia	r2, {r1, r2}
   b4fdc:	464b      	mov	r3, r9
   b4fde:	4650      	mov	r0, sl
   b4fe0:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
   b4fe4:	f7ff fe02 	bl	b4bec <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
Railway blueLine = Railway(
   b4fe8:	aa41      	add	r2, sp, #260	; 0x104
   b4fea:	233c      	movs	r3, #60	; 0x3c
   b4fec:	a938      	add	r1, sp, #224	; 0xe0
   b4fee:	e9cd ba01 	strd	fp, sl, [sp, #4]
   b4ff2:	9200      	str	r2, [sp, #0]
   b4ff4:	4848      	ldr	r0, [pc, #288]	; (b5118 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x324>)
   b4ff6:	aa35      	add	r2, sp, #212	; 0xd4
   b4ff8:	f7ff fe5a 	bl	b4cb0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b4ffc:	4650      	mov	r0, sl
   b4ffe:	f7ff fb75 	bl	b46ec <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5002:	4658      	mov	r0, fp
   b5004:	f7ff fb7c 	bl	b4700 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5008:	a84d      	add	r0, sp, #308	; 0x134
   b500a:	f004 fccf 	bl	b99ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b500e:	a847      	add	r0, sp, #284	; 0x11c
   b5010:	f004 fccc 	bl	b99ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5014:	a841      	add	r0, sp, #260	; 0x104
   b5016:	f004 fcc9 	bl	b99ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b501a:	a835      	add	r0, sp, #212	; 0xd4
   b501c:	f7ff fb66 	bl	b46ec <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5020:	a838      	add	r0, sp, #224	; 0xe0
   b5022:	f7ff fb4f 	bl	b46c4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5026:	493d      	ldr	r1, [pc, #244]	; (b511c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x328>)
   b5028:	9158      	str	r1, [sp, #352]	; 0x160
      lon = lo;
   b502a:	493d      	ldr	r1, [pc, #244]	; (b5120 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x32c>)
   b502c:	4b3d      	ldr	r3, [pc, #244]	; (b5124 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x330>)
   b502e:	9159      	str	r1, [sp, #356]	; 0x164
      lat = la;
   b5030:	493d      	ldr	r1, [pc, #244]	; (b5128 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x334>)
      lon = lo;
   b5032:	9354      	str	r3, [sp, #336]	; 0x150
      lat = la;
   b5034:	915d      	str	r1, [sp, #372]	; 0x174
      lon = lo;
   b5036:	9368      	str	r3, [sp, #416]	; 0x1a0
   b5038:	493c      	ldr	r1, [pc, #240]	; (b512c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x338>)
      lat = la;
   b503a:	4b3d      	ldr	r3, [pc, #244]	; (b5130 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x33c>)
      lon = lo;
   b503c:	915e      	str	r1, [sp, #376]	; 0x178
      lat = la;
   b503e:	936c      	str	r3, [sp, #432]	; 0x1b0
   b5040:	493c      	ldr	r1, [pc, #240]	; (b5134 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x340>)
      lon = lo;
   b5042:	4b3d      	ldr	r3, [pc, #244]	; (b5138 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x344>)
      lat = la;
   b5044:	4a3d      	ldr	r2, [pc, #244]	; (b513c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x348>)
   b5046:	9162      	str	r1, [sp, #392]	; 0x188
      lon = lo;
   b5048:	936d      	str	r3, [sp, #436]	; 0x1b4
   b504a:	493d      	ldr	r1, [pc, #244]	; (b5140 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x34c>)
      lat = la;
   b504c:	4b3d      	ldr	r3, [pc, #244]	; (b5144 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x350>)
    Checkpoint(float la, float lo){
   b504e:	9457      	str	r4, [sp, #348]	; 0x15c
   b5050:	e9cd 4455 	strd	r4, r4, [sp, #340]	; 0x154
   b5054:	e9cd 445a 	strd	r4, r4, [sp, #360]	; 0x168
   b5058:	e9cd 445f 	strd	r4, r4, [sp, #380]	; 0x17c
   b505c:	e9cd 4464 	strd	r4, r4, [sp, #400]	; 0x190
   b5060:	e9cd 4469 	strd	r4, r4, [sp, #420]	; 0x1a4
   b5064:	e9cd 446e 	strd	r4, r4, [sp, #440]	; 0x1b8
   b5068:	e9cd 4473 	strd	r4, r4, [sp, #460]	; 0x1cc
      lat = la;
   b506c:	9253      	str	r2, [sp, #332]	; 0x14c
    Checkpoint(float la, float lo){
   b506e:	945c      	str	r4, [sp, #368]	; 0x170
   b5070:	9461      	str	r4, [sp, #388]	; 0x184
   b5072:	9466      	str	r4, [sp, #408]	; 0x198
      lon = lo;
   b5074:	9163      	str	r1, [sp, #396]	; 0x18c
    Checkpoint(float la, float lo){
   b5076:	946b      	str	r4, [sp, #428]	; 0x1ac
      lat = la;
   b5078:	9267      	str	r2, [sp, #412]	; 0x19c
    Checkpoint(float la, float lo){
   b507a:	9470      	str	r4, [sp, #448]	; 0x1c0
   b507c:	9475      	str	r4, [sp, #468]	; 0x1d4
      lat = la;
   b507e:	9371      	str	r3, [sp, #452]	; 0x1c4
      lon = lo;
   b5080:	4b31      	ldr	r3, [pc, #196]	; (b5148 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x354>)
   b5082:	9372      	str	r3, [sp, #456]	; 0x1c8
);
   b5084:	2307      	movs	r3, #7
   b5086:	931e      	str	r3, [sp, #120]	; 0x78
   b5088:	961d      	str	r6, [sp, #116]	; 0x74
   b508a:	aa13      	add	r2, sp, #76	; 0x4c
   b508c:	4613      	mov	r3, r2
   b508e:	a838      	add	r0, sp, #224	; 0xe0
   b5090:	e898 0006 	ldmia.w	r8, {r1, r2}
   b5094:	f7ff fb62 	bl	b475c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5098:	4b0b      	ldr	r3, [pc, #44]	; (b50c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2d4>)
   b509a:	aa41      	add	r2, sp, #260	; 0x104
   b509c:	e056      	b.n	b514c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x358>
   b509e:	bf00      	nop
   b50a0:	42276980 	.word	0x42276980
   b50a4:	c2af431e 	.word	0xc2af431e
   b50a8:	42279dcc 	.word	0x42279dcc
   b50ac:	c2af4202 	.word	0xc2af4202
   b50b0:	42279d95 	.word	0x42279d95
   b50b4:	c2af476d 	.word	0xc2af476d
   b50b8:	4227a7a9 	.word	0x4227a7a9
   b50bc:	c2af4e05 	.word	0xc2af4e05
   b50c0:	4227b382 	.word	0x4227b382
   b50c4:	c2af4e44 	.word	0xc2af4e44
   b50c8:	000bcd38 	.word	0x000bcd38
   b50cc:	000bcb59 	.word	0x000bcb59
   b50d0:	000bcb76 	.word	0x000bcb76
   b50d4:	000bcb7d 	.word	0x000bcb7d
   b50d8:	2003e5d0 	.word	0x2003e5d0
   b50dc:	42277ec5 	.word	0x42277ec5
   b50e0:	c2af738a 	.word	0xc2af738a
   b50e4:	4227808d 	.word	0x4227808d
   b50e8:	c2af482f 	.word	0xc2af482f
   b50ec:	42278158 	.word	0x42278158
   b50f0:	c2af41a5 	.word	0xc2af41a5
   b50f4:	42278b4c 	.word	0x42278b4c
   b50f8:	c2af4277 	.word	0xc2af4277
   b50fc:	42278af9 	.word	0x42278af9
   b5100:	c2af479e 	.word	0xc2af479e
   b5104:	4227aa25 	.word	0x4227aa25
   b5108:	c2af5fee 	.word	0xc2af5fee
   b510c:	000bcb65 	.word	0x000bcb65
   b5110:	000bcb84 	.word	0x000bcb84
   b5114:	000bcb8b 	.word	0x000bcb8b
   b5118:	20035594 	.word	0x20035594
   b511c:	42278b2f 	.word	0x42278b2f
   b5120:	c2af4095 	.word	0xc2af4095
   b5124:	c2af449a 	.word	0xc2af449a
   b5128:	422781d8 	.word	0x422781d8
   b512c:	c2af4044 	.word	0xc2af4044
   b5130:	4227a437 	.word	0x4227a437
   b5134:	42278216 	.word	0x42278216
   b5138:	c2af4659 	.word	0xc2af4659
   b513c:	42278b1a 	.word	0x42278b1a
   b5140:	c2af44c1 	.word	0xc2af44c1
   b5144:	4227a49e 	.word	0x4227a49e
   b5148:	c2af4bd0 	.word	0xc2af4bd0
   b514c:	f103 0c24 	add.w	ip, r3, #36	; 0x24
   b5150:	9204      	str	r2, [sp, #16]
   b5152:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5156:	9f04      	ldr	r7, [sp, #16]
   b5158:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b515a:	e89c 0003 	ldmia.w	ip, {r0, r1}
   b515e:	ab41      	add	r3, sp, #260	; 0x104
   b5160:	931b      	str	r3, [sp, #108]	; 0x6c
   b5162:	2306      	movs	r3, #6
   b5164:	f10d 0844 	add.w	r8, sp, #68	; 0x44
   b5168:	931c      	str	r3, [sp, #112]	; 0x70
   b516a:	aa1b      	add	r2, sp, #108	; 0x6c
   b516c:	4643      	mov	r3, r8
   b516e:	e9c7 0100 	strd	r0, r1, [r7]
   b5172:	ca06      	ldmia	r2, {r1, r2}
   b5174:	a835      	add	r0, sp, #212	; 0xd4
   b5176:	9704      	str	r7, [sp, #16]
   b5178:	f7ff fd38 	bl	b4bec <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
   b517c:	4628      	mov	r0, r5
   b517e:	49b8      	ldr	r1, [pc, #736]	; (b5460 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x66c>)
   b5180:	f7fe ffb0 	bl	b40e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5184:	49b7      	ldr	r1, [pc, #732]	; (b5464 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x670>)
   b5186:	a847      	add	r0, sp, #284	; 0x11c
   b5188:	f7fe ffac 	bl	b40e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b518c:	49b6      	ldr	r1, [pc, #728]	; (b5468 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x674>)
   b518e:	a84d      	add	r0, sp, #308	; 0x134
   b5190:	f7fe ffa8 	bl	b40e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5194:	ab47      	add	r3, sp, #284	; 0x11c
   b5196:	9319      	str	r3, [sp, #100]	; 0x64
   b5198:	2302      	movs	r3, #2
   b519a:	931a      	str	r3, [sp, #104]	; 0x68
   b519c:	aa19      	add	r2, sp, #100	; 0x64
   b519e:	ca06      	ldmia	r2, {r1, r2}
   b51a0:	ab0f      	add	r3, sp, #60	; 0x3c
   b51a2:	4658      	mov	r0, fp
   b51a4:	f7ff fb1e 	bl	b47e4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b51a8:	2304      	movs	r3, #4
   b51aa:	e9cd 3916 	strd	r3, r9, [sp, #88]	; 0x58
   b51ae:	2302      	movs	r3, #2
   b51b0:	af0d      	add	r7, sp, #52	; 0x34
   b51b2:	9318      	str	r3, [sp, #96]	; 0x60
   b51b4:	aa17      	add	r2, sp, #92	; 0x5c
   b51b6:	ca06      	ldmia	r2, {r1, r2}
   b51b8:	463b      	mov	r3, r7
   b51ba:	4650      	mov	r0, sl
   b51bc:	9415      	str	r4, [sp, #84]	; 0x54
   b51be:	f7ff fd15 	bl	b4bec <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
Railway brownLine = Railway(
   b51c2:	2328      	movs	r3, #40	; 0x28
   b51c4:	aa35      	add	r2, sp, #212	; 0xd4
   b51c6:	a938      	add	r1, sp, #224	; 0xe0
   b51c8:	e9cd ba01 	strd	fp, sl, [sp, #4]
   b51cc:	9500      	str	r5, [sp, #0]
   b51ce:	48a7      	ldr	r0, [pc, #668]	; (b546c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x678>)
   b51d0:	f7ff fd6e 	bl	b4cb0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b51d4:	4650      	mov	r0, sl
   b51d6:	f7ff fa89 	bl	b46ec <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b51da:	4658      	mov	r0, fp
   b51dc:	f7ff fa90 	bl	b4700 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b51e0:	a84d      	add	r0, sp, #308	; 0x134
   b51e2:	f004 fbe3 	bl	b99ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b51e6:	a847      	add	r0, sp, #284	; 0x11c
   b51e8:	f004 fbe0 	bl	b99ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b51ec:	4628      	mov	r0, r5
   b51ee:	f004 fbdd 	bl	b99ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b51f2:	a835      	add	r0, sp, #212	; 0xd4
   b51f4:	f7ff fa7a 	bl	b46ec <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b51f8:	a838      	add	r0, sp, #224	; 0xe0
   b51fa:	f7ff fa63 	bl	b46c4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b51fe:	499c      	ldr	r1, [pc, #624]	; (b5470 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x67c>)
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5200:	9443      	str	r4, [sp, #268]	; 0x10c
   b5202:	a847      	add	r0, sp, #284	; 0x11c
   b5204:	e9cd 4441 	strd	r4, r4, [sp, #260]	; 0x104
   b5208:	e9cd 443b 	strd	r4, r4, [sp, #236]	; 0xec
   b520c:	943d      	str	r4, [sp, #244]	; 0xf4
   b520e:	f7fe ff69 	bl	b40e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5212:	4998      	ldr	r1, [pc, #608]	; (b5474 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x680>)
   b5214:	4630      	mov	r0, r6
   b5216:	f7fe ff65 	bl	b40e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b521a:	4997      	ldr	r1, [pc, #604]	; (b5478 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x684>)
   b521c:	a859      	add	r0, sp, #356	; 0x164
   b521e:	f7fe ff61 	bl	b40e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5222:	2302      	movs	r3, #2
   b5224:	9333      	str	r3, [sp, #204]	; 0xcc
   b5226:	9632      	str	r6, [sp, #200]	; 0xc8
   b5228:	e89b 0006 	ldmia.w	fp, {r1, r2}
   b522c:	ab13      	add	r3, sp, #76	; 0x4c
   b522e:	a838      	add	r0, sp, #224	; 0xe0
   b5230:	f7ff fad8 	bl	b47e4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5234:	2302      	movs	r3, #2
   b5236:	f8cd 90bc 	str.w	r9, [sp, #188]	; 0xbc
   b523a:	9330      	str	r3, [sp, #192]	; 0xc0
   b523c:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b5240:	4643      	mov	r3, r8
   b5242:	a835      	add	r0, sp, #212	; 0xd4
   b5244:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
   b5248:	f7ff fcd0 	bl	b4bec <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
Railway greenLine= Railway(
   b524c:	ab35      	add	r3, sp, #212	; 0xd4
   b524e:	9302      	str	r3, [sp, #8]
   b5250:	ab38      	add	r3, sp, #224	; 0xe0
   b5252:	9301      	str	r3, [sp, #4]
   b5254:	ab47      	add	r3, sp, #284	; 0x11c
   b5256:	462a      	mov	r2, r5
   b5258:	a941      	add	r1, sp, #260	; 0x104
   b525a:	9300      	str	r3, [sp, #0]
   b525c:	4887      	ldr	r0, [pc, #540]	; (b547c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x688>)
   b525e:	2328      	movs	r3, #40	; 0x28
   b5260:	f7ff fd26 	bl	b4cb0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
      }
   b5264:	a835      	add	r0, sp, #212	; 0xd4
   b5266:	f7ff fa41 	bl	b46ec <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b526a:	a838      	add	r0, sp, #224	; 0xe0
   b526c:	f7ff fa48 	bl	b4700 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5270:	a859      	add	r0, sp, #356	; 0x164
   b5272:	f004 fb9b 	bl	b99ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5276:	4630      	mov	r0, r6
   b5278:	f004 fb98 	bl	b99ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b527c:	a847      	add	r0, sp, #284	; 0x11c
   b527e:	f004 fb95 	bl	b99ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5282:	4628      	mov	r0, r5
   b5284:	f7ff fa32 	bl	b46ec <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5288:	a841      	add	r0, sp, #260	; 0x104
   b528a:	f7ff fa1b 	bl	b46c4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b528e:	497c      	ldr	r1, [pc, #496]	; (b5480 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5290:	9443      	str	r4, [sp, #268]	; 0x10c
   b5292:	a847      	add	r0, sp, #284	; 0x11c
   b5294:	e9cd 4441 	strd	r4, r4, [sp, #260]	; 0x104
   b5298:	e9cd 443b 	strd	r4, r4, [sp, #236]	; 0xec
   b529c:	943d      	str	r4, [sp, #244]	; 0xf4
   b529e:	f7fe ff21 	bl	b40e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b52a2:	4978      	ldr	r1, [pc, #480]	; (b5484 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x690>)
   b52a4:	4630      	mov	r0, r6
   b52a6:	f7fe ff1d 	bl	b40e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b52aa:	4977      	ldr	r1, [pc, #476]	; (b5488 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x694>)
   b52ac:	a859      	add	r0, sp, #356	; 0x164
   b52ae:	f7fe ff19 	bl	b40e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b52b2:	2302      	movs	r3, #2
   b52b4:	9316      	str	r3, [sp, #88]	; 0x58
   b52b6:	9615      	str	r6, [sp, #84]	; 0x54
   b52b8:	e899 0006 	ldmia.w	r9, {r1, r2}
   b52bc:	ab0f      	add	r3, sp, #60	; 0x3c
   b52be:	a838      	add	r0, sp, #224	; 0xe0
   b52c0:	f7ff fa90 	bl	b47e4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b52c4:	2302      	movs	r3, #2
   b52c6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   b52ca:	9314      	str	r3, [sp, #80]	; 0x50
   b52cc:	aa13      	add	r2, sp, #76	; 0x4c
   b52ce:	ca06      	ldmia	r2, {r1, r2}
   b52d0:	463b      	mov	r3, r7
   b52d2:	a835      	add	r0, sp, #212	; 0xd4
   b52d4:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
   b52d8:	f7ff fc88 	bl	b4bec <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
Railway orangeLine= Railway(
   b52dc:	ab35      	add	r3, sp, #212	; 0xd4
   b52de:	9302      	str	r3, [sp, #8]
   b52e0:	ab38      	add	r3, sp, #224	; 0xe0
   b52e2:	9301      	str	r3, [sp, #4]
   b52e4:	ab47      	add	r3, sp, #284	; 0x11c
   b52e6:	462a      	mov	r2, r5
   b52e8:	a941      	add	r1, sp, #260	; 0x104
   b52ea:	9300      	str	r3, [sp, #0]
   b52ec:	4867      	ldr	r0, [pc, #412]	; (b548c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x698>)
   b52ee:	f8df 91cc 	ldr.w	r9, [pc, #460]	; b54bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c8>
   b52f2:	2328      	movs	r3, #40	; 0x28
   b52f4:	f7ff fcdc 	bl	b4cb0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
      }
   b52f8:	a835      	add	r0, sp, #212	; 0xd4
   b52fa:	f7ff f9f7 	bl	b46ec <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b52fe:	a838      	add	r0, sp, #224	; 0xe0
   b5300:	f7ff f9fe 	bl	b4700 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5304:	a859      	add	r0, sp, #356	; 0x164
   b5306:	f004 fb51 	bl	b99ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b530a:	4630      	mov	r0, r6
   b530c:	f004 fb4e 	bl	b99ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5310:	a847      	add	r0, sp, #284	; 0x11c
   b5312:	f004 fb4b 	bl	b99ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5316:	4628      	mov	r0, r5
   b5318:	f7ff f9e8 	bl	b46ec <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b531c:	a841      	add	r0, sp, #260	; 0x104
   b531e:	f7ff f9d1 	bl	b46c4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b5322:	495b      	ldr	r1, [pc, #364]	; (b5490 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x69c>)
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5324:	9443      	str	r4, [sp, #268]	; 0x10c
   b5326:	a847      	add	r0, sp, #284	; 0x11c
   b5328:	e9cd 4441 	strd	r4, r4, [sp, #260]	; 0x104
   b532c:	e9cd 443b 	strd	r4, r4, [sp, #236]	; 0xec
   b5330:	943d      	str	r4, [sp, #244]	; 0xf4
   b5332:	f7fe fed7 	bl	b40e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5336:	4957      	ldr	r1, [pc, #348]	; (b5494 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a0>)
   b5338:	4630      	mov	r0, r6
   b533a:	f7fe fed3 	bl	b40e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b533e:	4956      	ldr	r1, [pc, #344]	; (b5498 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a4>)
   b5340:	a859      	add	r0, sp, #356	; 0x164
   b5342:	f7fe fecf 	bl	b40e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5346:	2302      	movs	r3, #2
   b5348:	9312      	str	r3, [sp, #72]	; 0x48
   b534a:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
   b534e:	9611      	str	r6, [sp, #68]	; 0x44
   b5350:	e898 0006 	ldmia.w	r8, {r1, r2}
   b5354:	4653      	mov	r3, sl
   b5356:	a838      	add	r0, sp, #224	; 0xe0
   b5358:	f7ff fa44 	bl	b47e4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b535c:	2302      	movs	r3, #2
   b535e:	970f      	str	r7, [sp, #60]	; 0x3c
   b5360:	9310      	str	r3, [sp, #64]	; 0x40
   b5362:	f10d 0824 	add.w	r8, sp, #36	; 0x24
   b5366:	aa0f      	add	r2, sp, #60	; 0x3c
   b5368:	ca06      	ldmia	r2, {r1, r2}
   b536a:	4643      	mov	r3, r8
   b536c:	a835      	add	r0, sp, #212	; 0xd4
   b536e:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
   b5372:	f7ff fc3b 	bl	b4bec <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
Railway purpleLine= Railway(
   b5376:	ab35      	add	r3, sp, #212	; 0xd4
   b5378:	9302      	str	r3, [sp, #8]
   b537a:	ab38      	add	r3, sp, #224	; 0xe0
   b537c:	9301      	str	r3, [sp, #4]
   b537e:	ab47      	add	r3, sp, #284	; 0x11c
   b5380:	462a      	mov	r2, r5
   b5382:	a941      	add	r1, sp, #260	; 0x104
   b5384:	9300      	str	r3, [sp, #0]
   b5386:	4845      	ldr	r0, [pc, #276]	; (b549c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a8>)
   b5388:	2328      	movs	r3, #40	; 0x28
   b538a:	f7ff fc91 	bl	b4cb0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
      }
   b538e:	a835      	add	r0, sp, #212	; 0xd4
   b5390:	f7ff f9ac 	bl	b46ec <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5394:	a838      	add	r0, sp, #224	; 0xe0
   b5396:	f7ff f9b3 	bl	b4700 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b539a:	a859      	add	r0, sp, #356	; 0x164
   b539c:	f004 fb06 	bl	b99ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b53a0:	4630      	mov	r0, r6
   b53a2:	f004 fb03 	bl	b99ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b53a6:	a847      	add	r0, sp, #284	; 0x11c
   b53a8:	f004 fb00 	bl	b99ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b53ac:	4628      	mov	r0, r5
   b53ae:	f7ff f99d 	bl	b46ec <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b53b2:	a841      	add	r0, sp, #260	; 0x104
   b53b4:	f7ff f986 	bl	b46c4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b53b8:	4939      	ldr	r1, [pc, #228]	; (b54a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6ac>)
	: _M_start(), _M_finish(), _M_end_of_storage()
   b53ba:	9443      	str	r4, [sp, #268]	; 0x10c
   b53bc:	a847      	add	r0, sp, #284	; 0x11c
   b53be:	e9cd 4441 	strd	r4, r4, [sp, #260]	; 0x104
   b53c2:	e9cd 443b 	strd	r4, r4, [sp, #236]	; 0xec
   b53c6:	943d      	str	r4, [sp, #244]	; 0xf4
   b53c8:	f7fe fe8c 	bl	b40e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b53cc:	4935      	ldr	r1, [pc, #212]	; (b54a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b0>)
   b53ce:	4630      	mov	r0, r6
   b53d0:	f7fe fe88 	bl	b40e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b53d4:	4934      	ldr	r1, [pc, #208]	; (b54a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b4>)
   b53d6:	a859      	add	r0, sp, #356	; 0x164
   b53d8:	f7fe fe84 	bl	b40e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b53dc:	2302      	movs	r3, #2
   b53de:	930e      	str	r3, [sp, #56]	; 0x38
   b53e0:	960d      	str	r6, [sp, #52]	; 0x34
   b53e2:	e897 0006 	ldmia.w	r7, {r1, r2}
   b53e6:	ab08      	add	r3, sp, #32
   b53e8:	a838      	add	r0, sp, #224	; 0xe0
   b53ea:	f7ff f9fb 	bl	b47e4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b53ee:	2302      	movs	r3, #2
   b53f0:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   b53f4:	930c      	str	r3, [sp, #48]	; 0x30
   b53f6:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b53fa:	ab07      	add	r3, sp, #28
   b53fc:	a835      	add	r0, sp, #212	; 0xd4
   b53fe:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b5402:	f7ff fbf3 	bl	b4bec <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
Railway pinkLine= Railway(
   b5406:	ab35      	add	r3, sp, #212	; 0xd4
   b5408:	9302      	str	r3, [sp, #8]
   b540a:	ab38      	add	r3, sp, #224	; 0xe0
   b540c:	9301      	str	r3, [sp, #4]
   b540e:	ab47      	add	r3, sp, #284	; 0x11c
   b5410:	462a      	mov	r2, r5
   b5412:	a941      	add	r1, sp, #260	; 0x104
   b5414:	9300      	str	r3, [sp, #0]
   b5416:	4825      	ldr	r0, [pc, #148]	; (b54ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b8>)
   b5418:	4f25      	ldr	r7, [pc, #148]	; (b54b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6bc>)
   b541a:	2328      	movs	r3, #40	; 0x28
   b541c:	f7ff fc48 	bl	b4cb0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
      }
   b5420:	a835      	add	r0, sp, #212	; 0xd4
   b5422:	f7ff f963 	bl	b46ec <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5426:	a838      	add	r0, sp, #224	; 0xe0
   b5428:	f7ff f96a 	bl	b4700 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b542c:	a859      	add	r0, sp, #356	; 0x164
   b542e:	f004 fabd 	bl	b99ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5432:	4630      	mov	r0, r6
   b5434:	f004 faba 	bl	b99ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5438:	a847      	add	r0, sp, #284	; 0x11c
   b543a:	f004 fab7 	bl	b99ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b543e:	4628      	mov	r0, r5
   b5440:	f7ff f954 	bl	b46ec <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5444:	a841      	add	r0, sp, #260	; 0x104
   b5446:	f7ff f93d 	bl	b46c4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b544a:	4b1a      	ldr	r3, [pc, #104]	; (b54b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c0>)
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b544c:	491a      	ldr	r1, [pc, #104]	; (b54b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c4>)
   b544e:	609c      	str	r4, [r3, #8]
   b5450:	e9c3 4400 	strd	r4, r4, [r3]
   b5454:	4819      	ldr	r0, [pc, #100]	; (b54bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c8>)
   b5456:	f002 f8c5 	bl	b75e4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b545a:	4919      	ldr	r1, [pc, #100]	; (b54c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6cc>)
   b545c:	e032      	b.n	b54c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d0>
   b545e:	bf00      	nop
   b5460:	000bcb92 	.word	0x000bcb92
   b5464:	000bcb96 	.word	0x000bcb96
   b5468:	000bcb9d 	.word	0x000bcb9d
   b546c:	200355f8 	.word	0x200355f8
   b5470:	000bd081 	.word	0x000bd081
   b5474:	000bcba4 	.word	0x000bcba4
   b5478:	000bcbab 	.word	0x000bcbab
   b547c:	2003565c 	.word	0x2003565c
   b5480:	000bcbb2 	.word	0x000bcbb2
   b5484:	000bcbb6 	.word	0x000bcbb6
   b5488:	000bcbbd 	.word	0x000bcbbd
   b548c:	20037edc 	.word	0x20037edc
   b5490:	000bd03e 	.word	0x000bd03e
   b5494:	000bcbc4 	.word	0x000bcbc4
   b5498:	000bcbcb 	.word	0x000bcbcb
   b549c:	2003e560 	.word	0x2003e560
   b54a0:	000bcbd2 	.word	0x000bcbd2
   b54a4:	000bcbd7 	.word	0x000bcbd7
   b54a8:	000bcbde 	.word	0x000bcbde
   b54ac:	2003e4fc 	.word	0x2003e4fc
   b54b0:	20035574 	.word	0x20035574
   b54b4:	2003e5c4 	.word	0x2003e5c4
   b54b8:	000bcbe5 	.word	0x000bcbe5
   b54bc:	2003554c 	.word	0x2003554c
   b54c0:	000bcc0a 	.word	0x000bcc0a
   b54c4:	4871      	ldr	r0, [pc, #452]	; (b568c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x898>)
   b54c6:	f002 f88d 	bl	b75e4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b54ca:	4971      	ldr	r1, [pc, #452]	; (b5690 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x89c>)
   b54cc:	4871      	ldr	r0, [pc, #452]	; (b5694 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8a0>)
   b54ce:	f002 f889 	bl	b75e4 <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b54d2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b54d4:	46ac      	mov	ip, r5
   b54d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b54da:	9b05      	ldr	r3, [sp, #20]
   b54dc:	f8d7 c000 	ldr.w	ip, [r7]
   b54e0:	f8c3 c000 	str.w	ip, [r3]
   b54e4:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   b54e8:	af41      	add	r7, sp, #260	; 0x104
   b54ea:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b54ec:	46ca      	mov	sl, r9
   b54ee:	9b04      	ldr	r3, [sp, #16]
   b54f0:	f85a b910 	ldr.w	fp, [sl], #-16
   b54f4:	f8c3 b000 	str.w	fp, [r3]
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b54f8:	462f      	mov	r7, r5
   b54fa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b54fc:	f50d 788e 	add.w	r8, sp, #284	; 0x11c
   b5500:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b5504:	f8df e1ec 	ldr.w	lr, [pc, #492]	; b56f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x900>
      constexpr __shared_count() noexcept : _M_pi(0)
   b5508:	e9ce 4400 	strd	r4, r4, [lr]
   b550c:	f8c8 c000 	str.w	ip, [r8]
        BleUuid sUuid(svcUuid);
   b5510:	f50d 7c82 	add.w	ip, sp, #260	; 0x104
   b5514:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5518:	4637      	mov	r7, r6
   b551a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b551c:	4670      	mov	r0, lr
        BleUuid sUuid(svcUuid);
   b551e:	f8c7 b000 	str.w	fp, [r7]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5522:	495d      	ldr	r1, [pc, #372]	; (b5698 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8a4>)
   b5524:	9600      	str	r6, [sp, #0]
   b5526:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b552a:	ab47      	add	r3, sp, #284	; 0x11c
   b552c:	f04f 0210 	mov.w	r2, #16
   b5530:	f002 fdc2 	bl	b80b8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b5534:	f8df c154 	ldr.w	ip, [pc, #340]	; b568c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x898>
   b5538:	f8d9 9000 	ldr.w	r9, [r9]
   b553c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5540:	46ae      	mov	lr, r5
   b5542:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b5546:	9b05      	ldr	r3, [sp, #20]
   b5548:	f8dc e000 	ldr.w	lr, [ip]
   b554c:	f8c3 e000 	str.w	lr, [r3]
   b5550:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
   b5554:	f50d 7c82 	add.w	ip, sp, #260	; 0x104
   b5558:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b555c:	9b04      	ldr	r3, [sp, #16]
      : _M_ptr(0), _M_refcount()
   b555e:	f8df a190 	ldr.w	sl, [pc, #400]	; b56f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8fc>
   b5562:	f8c3 9000 	str.w	r9, [r3]
        BleUuid cUuid(charUuid);
   b5566:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5568:	f50d 7c8e 	add.w	ip, sp, #284	; 0x11c
        BleUuid sUuid(svcUuid);
   b556c:	ad41      	add	r5, sp, #260	; 0x104
        BleUuid cUuid(charUuid);
   b556e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
      constexpr __shared_count() noexcept : _M_pi(0)
   b5572:	e9ca 4400 	strd	r4, r4, [sl]
   b5576:	f8c8 e000 	str.w	lr, [r8]
        BleUuid sUuid(svcUuid);
   b557a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b557c:	46b4      	mov	ip, r6
   b557e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5582:	4b46      	ldr	r3, [pc, #280]	; (b569c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8a8>)
        BleUuid sUuid(svcUuid);
   b5584:	f8c7 9000 	str.w	r9, [r7]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5588:	f04f 0204 	mov.w	r2, #4
   b558c:	e9cd 6300 	strd	r6, r3, [sp]
   b5590:	4943      	ldr	r1, [pc, #268]	; (b56a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8ac>)
   b5592:	9402      	str	r4, [sp, #8]
   b5594:	ab47      	add	r3, sp, #284	; 0x11c
   b5596:	4650      	mov	r0, sl
   b5598:	f002 fd8e 	bl	b80b8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
   b559c:	4941      	ldr	r1, [pc, #260]	; (b56a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8b0>)
   b559e:	4842      	ldr	r0, [pc, #264]	; (b56a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8b4>)
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b55a0:	4c42      	ldr	r4, [pc, #264]	; (b56ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8b8>)
   b55a2:	f003 faac 	bl	b8afe <_ZN6StringC1EPK19__FlashStringHelper>
   b55a6:	4842      	ldr	r0, [pc, #264]	; (b56b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8bc>)
   b55a8:	f003 f8b6 	bl	b8718 <_ZN9IPAddressC1Ev>
   b55ac:	493d      	ldr	r1, [pc, #244]	; (b56a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8b0>)
   b55ae:	4841      	ldr	r0, [pc, #260]	; (b56b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8c0>)
   b55b0:	f003 faa5 	bl	b8afe <_ZN6StringC1EPK19__FlashStringHelper>
   b55b4:	493b      	ldr	r1, [pc, #236]	; (b56a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8b0>)
   b55b6:	4840      	ldr	r0, [pc, #256]	; (b56b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8c4>)
   b55b8:	f003 faa1 	bl	b8afe <_ZN6StringC1EPK19__FlashStringHelper>
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   b55bc:	4939      	ldr	r1, [pc, #228]	; (b56a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8b0>)
   b55be:	483f      	ldr	r0, [pc, #252]	; (b56bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8c8>)
   b55c0:	f003 fa9d 	bl	b8afe <_ZN6StringC1EPK19__FlashStringHelper>
HttpClient http;
   b55c4:	483e      	ldr	r0, [pc, #248]	; (b56c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8cc>)
   b55c6:	f000 fd7f 	bl	b60c8 <_ZN10HttpClientC1Ev>
   b55ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b55ce:	9300      	str	r3, [sp, #0]
   b55d0:	f242 7210 	movw	r2, #10000	; 0x2710
   b55d4:	4b3b      	ldr	r3, [pc, #236]	; (b56c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8d0>)
   b55d6:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b55da:	4620      	mov	r0, r4
   b55dc:	f000 ff4c 	bl	b6478 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b55e0:	4b39      	ldr	r3, [pc, #228]	; (b56c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8d4>)
   b55e2:	6023      	str	r3, [r4, #0]
   b55e4:	b077      	add	sp, #476	; 0x1dc
   b55e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_M_deallocate(_M_impl._M_start,
   b55ea:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b55ec:	b118      	cbz	r0, b55f6 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x802>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b55ee:	68a1      	ldr	r1, [r4, #8]
   b55f0:	1a09      	subs	r1, r1, r0
   b55f2:	f7fe fd56 	bl	b40a2 <_ZdlPvj>
Railway pinkLine= Railway(
   b55f6:	4835      	ldr	r0, [pc, #212]	; (b56cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8d8>)
   b55f8:	f7ff f895 	bl	b4726 <_ZN7RailwayD1Ev>
Railway purpleLine= Railway(
   b55fc:	4834      	ldr	r0, [pc, #208]	; (b56d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8dc>)
   b55fe:	f7ff f892 	bl	b4726 <_ZN7RailwayD1Ev>
Railway orangeLine= Railway(
   b5602:	4834      	ldr	r0, [pc, #208]	; (b56d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8e0>)
   b5604:	f7ff f88f 	bl	b4726 <_ZN7RailwayD1Ev>
Railway greenLine= Railway(
   b5608:	4833      	ldr	r0, [pc, #204]	; (b56d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8e4>)
   b560a:	f7ff f88c 	bl	b4726 <_ZN7RailwayD1Ev>
Railway brownLine = Railway(
   b560e:	4833      	ldr	r0, [pc, #204]	; (b56dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8e8>)
   b5610:	f7ff f889 	bl	b4726 <_ZN7RailwayD1Ev>
Railway blueLine = Railway(
   b5614:	4832      	ldr	r0, [pc, #200]	; (b56e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8ec>)
   b5616:	f7ff f886 	bl	b4726 <_ZN7RailwayD1Ev>
Railway redLine = Railway(
   b561a:	4832      	ldr	r0, [pc, #200]	; (b56e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8f0>)
   b561c:	f7ff f883 	bl	b4726 <_ZN7RailwayD1Ev>
   b5620:	e7e0      	b.n	b55e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x7f0>
JsonParserStatic<10000, 1000> parser;
   b5622:	4822      	ldr	r0, [pc, #136]	; (b56ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8b8>)
   b5624:	f7fe fd48 	bl	b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b5628:	4b25      	ldr	r3, [pc, #148]	; (b56c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8cc>)
   b562a:	4a2f      	ldr	r2, [pc, #188]	; (b56e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8f4>)
	if (_M_pi != nullptr)
   b562c:	699c      	ldr	r4, [r3, #24]
   b562e:	601a      	str	r2, [r3, #0]
   b5630:	b17c      	cbz	r4, b5652 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x85e>
      if (--_M_use_count == 0)
   b5632:	6863      	ldr	r3, [r4, #4]
   b5634:	3b01      	subs	r3, #1
   b5636:	6063      	str	r3, [r4, #4]
   b5638:	b95b      	cbnz	r3, b5652 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x85e>
          _M_dispose();
   b563a:	6823      	ldr	r3, [r4, #0]
   b563c:	4620      	mov	r0, r4
   b563e:	689b      	ldr	r3, [r3, #8]
   b5640:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5642:	68a3      	ldr	r3, [r4, #8]
   b5644:	3b01      	subs	r3, #1
   b5646:	60a3      	str	r3, [r4, #8]
   b5648:	b91b      	cbnz	r3, b5652 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x85e>
            _M_destroy();
   b564a:	6823      	ldr	r3, [r4, #0]
   b564c:	4620      	mov	r0, r4
   b564e:	68db      	ldr	r3, [r3, #12]
   b5650:	4798      	blx	r3
   b5652:	481a      	ldr	r0, [pc, #104]	; (b56bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8c8>)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b5654:	4c25      	ldr	r4, [pc, #148]	; (b56ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8f8>)
   b5656:	f003 fa07 	bl	b8a68 <_ZN6StringD1Ev>
} http_request_t;
   b565a:	4817      	ldr	r0, [pc, #92]	; (b56b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8c4>)
   b565c:	f003 fa04 	bl	b8a68 <_ZN6StringD1Ev>
   b5660:	4814      	ldr	r0, [pc, #80]	; (b56b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8c0>)
   b5662:	f003 fa01 	bl	b8a68 <_ZN6StringD1Ev>
   b5666:	4810      	ldr	r0, [pc, #64]	; (b56a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8b4>)
   b5668:	f003 f9fe 	bl	b8a68 <_ZN6StringD1Ev>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   b566c:	4820      	ldr	r0, [pc, #128]	; (b56f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x8fc>)
   b566e:	f002 fa0a 	bl	b7a86 <_ZN8particle17BleCharacteristicD1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   b5672:	4820      	ldr	r0, [pc, #128]	; (b56f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x900>)
   b5674:	f002 fa07 	bl	b7a86 <_ZN8particle17BleCharacteristicD1Ev>
   b5678:	e9d4 5600 	ldrd	r5, r6, [r4]
	  for (; __first != __last; ++__first)
   b567c:	42ae      	cmp	r6, r5
   b567e:	d0b4      	beq.n	b55ea <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x7f6>
      __pointer->~_Tp();
   b5680:	4628      	mov	r0, r5
   b5682:	f7ff f850 	bl	b4726 <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b5686:	3564      	adds	r5, #100	; 0x64
   b5688:	e7f8      	b.n	b567c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x888>
   b568a:	bf00      	nop
   b568c:	20035560 	.word	0x20035560
   b5690:	000bcc2f 	.word	0x000bcc2f
   b5694:	20035574 	.word	0x20035574
   b5698:	000bcc54 	.word	0x000bcc54
   b569c:	000b4989 	.word	0x000b4989
   b56a0:	000bcc57 	.word	0x000bcc57
   b56a4:	000bcdae 	.word	0x000bcdae
   b56a8:	2003e634 	.word	0x2003e634
   b56ac:	20037f40 	.word	0x20037f40
   b56b0:	2003e644 	.word	0x2003e644
   b56b4:	2003e65c 	.word	0x2003e65c
   b56b8:	2003e670 	.word	0x2003e670
   b56bc:	2003e684 	.word	0x2003e684
   b56c0:	200356c0 	.word	0x200356c0
   b56c4:	2003a67c 	.word	0x2003a67c
   b56c8:	000bcd24 	.word	0x000bcd24
   b56cc:	2003e4fc 	.word	0x2003e4fc
   b56d0:	2003e560 	.word	0x2003e560
   b56d4:	20037edc 	.word	0x20037edc
   b56d8:	2003565c 	.word	0x2003565c
   b56dc:	200355f8 	.word	0x200355f8
   b56e0:	20035594 	.word	0x20035594
   b56e4:	2003e5d0 	.word	0x2003e5d0
   b56e8:	000bd0b8 	.word	0x000bd0b8
   b56ec:	2003e5c4 	.word	0x2003e5c4
   b56f0:	2003e694 	.word	0x2003e694
   b56f4:	2003e6a8 	.word	0x2003e6a8

000b56f8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b56f8:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b56fa:	b510      	push	{r4, lr}
   b56fc:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b56fe:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b5702:	d005      	beq.n	b5710 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b5704:	4601      	mov	r1, r0
   b5706:	4622      	mov	r2, r4
   b5708:	4618      	mov	r0, r3
   b570a:	f005 f914 	bl	ba936 <memmove>
   b570e:	4603      	mov	r3, r0
	}
   b5710:	1918      	adds	r0, r3, r4
   b5712:	bd10      	pop	{r4, pc}

000b5714 <_ZN7RailwayC1ERKS_>:
class Railway{
   b5714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5718:	460d      	mov	r5, r1
   b571a:	4604      	mov	r4, r0
   b571c:	f7ff f896 	bl	b484c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5720:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5724:	2600      	movs	r6, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5726:	1ac9      	subs	r1, r1, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5728:	e9c4 6603 	strd	r6, r6, [r4, #12]
   b572c:	6166      	str	r6, [r4, #20]
      { _M_create_storage(__n); }
   b572e:	1089      	asrs	r1, r1, #2
   b5730:	f104 000c 	add.w	r0, r4, #12
   b5734:	f7ff fa1e 	bl	b4b74 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
			      _Category>::__copy_m(__first, __last, __result);
   b5738:	68e2      	ldr	r2, [r4, #12]
   b573a:	e9d5 0103 	ldrd	r0, r1, [r5, #12]
   b573e:	f7ff ffdb 	bl	b56f8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b5742:	f105 0118 	add.w	r1, r5, #24
	this->_M_impl._M_finish =
   b5746:	6120      	str	r0, [r4, #16]
   b5748:	f104 0018 	add.w	r0, r4, #24
   b574c:	f7ff fa35 	bl	b4bba <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b5750:	f105 0124 	add.w	r1, r5, #36	; 0x24
   b5754:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b5758:	f7ff fa2f 	bl	b4bba <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b575c:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b5760:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b5764:	f7fe fd18 	bl	b4198 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5768:	e9d5 3712 	ldrd	r3, r7, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b576c:	4812      	ldr	r0, [pc, #72]	; (b57b8 <_ZN7RailwayC1ERKS_+0xa4>)
	: _M_start(), _M_finish(), _M_end_of_storage()
   b576e:	6526      	str	r6, [r4, #80]	; 0x50
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5770:	1aff      	subs	r7, r7, r3
   b5772:	10fb      	asrs	r3, r7, #3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5774:	e9c4 6612 	strd	r6, r6, [r4, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5778:	4358      	muls	r0, r3
   b577a:	f7fe fcdb 	bl	b4134 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b577e:	e9c4 0012 	strd	r0, r0, [r4, #72]	; 0x48
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5782:	4407      	add	r7, r0
   b5784:	6527      	str	r7, [r4, #80]	; 0x50
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b5786:	e9d5 7812 	ldrd	r7, r8, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b578a:	4606      	mov	r6, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b578c:	45b8      	cmp	r8, r7
   b578e:	d007      	beq.n	b57a0 <_ZN7RailwayC1ERKS_+0x8c>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b5790:	b11e      	cbz	r6, b579a <_ZN7RailwayC1ERKS_+0x86>
   b5792:	4639      	mov	r1, r7
   b5794:	4630      	mov	r0, r6
   b5796:	f7fe fcff 	bl	b4198 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b579a:	3618      	adds	r6, #24
   b579c:	3718      	adds	r7, #24
   b579e:	e7f5      	b.n	b578c <_ZN7RailwayC1ERKS_+0x78>
	this->_M_impl._M_finish =
   b57a0:	64e6      	str	r6, [r4, #76]	; 0x4c
   b57a2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b57a4:	6563      	str	r3, [r4, #84]	; 0x54
   b57a6:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b57a8:	65a3      	str	r3, [r4, #88]	; 0x58
   b57aa:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b57ac:	65e3      	str	r3, [r4, #92]	; 0x5c
   b57ae:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b57b0:	6623      	str	r3, [r4, #96]	; 0x60
   b57b2:	4620      	mov	r0, r4
   b57b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b57b8:	aaaaaaab 	.word	0xaaaaaaab

000b57bc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b57bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b57c0:	1a0e      	subs	r6, r1, r0
   b57c2:	493a      	ldr	r1, [pc, #232]	; (b58ac <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xf0>)
	if (__n > this->_M_max_size())
   b57c4:	f8df 90e8 	ldr.w	r9, [pc, #232]	; b58b0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xf4>
   b57c8:	10b6      	asrs	r6, r6, #2
	__copy_m(_II __first, _II __last, _OI __result)
   b57ca:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b57cc:	434e      	muls	r6, r1
   b57ce:	4614      	mov	r4, r2
   b57d0:	2e00      	cmp	r6, #0
   b57d2:	dd66      	ble.n	b58a2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xe6>
   b57d4:	4629      	mov	r1, r5
   b57d6:	4620      	mov	r0, r4
   b57d8:	f7fe fd1a 	bl	b4210 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
      if (&__x != this)
   b57dc:	42a5      	cmp	r5, r4
   b57de:	d026      	beq.n	b582e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x72>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b57e0:	e9d5 a103 	ldrd	sl, r1, [r5, #12]
			 - this->_M_impl._M_start); }
   b57e4:	68e2      	ldr	r2, [r4, #12]
   b57e6:	6963      	ldr	r3, [r4, #20]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b57e8:	eba1 070a 	sub.w	r7, r1, sl
			 - this->_M_impl._M_start); }
   b57ec:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b57ee:	429f      	cmp	r7, r3
   b57f0:	d943      	bls.n	b587a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xbe>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b57f2:	2f00      	cmp	r7, #0
   b57f4:	d03f      	beq.n	b5876 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xba>
   b57f6:	454f      	cmp	r7, r9
   b57f8:	d901      	bls.n	b57fe <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x42>
	  std::__throw_bad_alloc();
   b57fa:	f003 ffef 	bl	b97dc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b57fe:	4638      	mov	r0, r7
   b5800:	9101      	str	r1, [sp, #4]
   b5802:	f7fe fc48 	bl	b4096 <_Znwj>
   b5806:	9901      	ldr	r1, [sp, #4]
   b5808:	4680      	mov	r8, r0
			      _Category>::__copy_m(__first, __last, __result);
   b580a:	4642      	mov	r2, r8
   b580c:	4650      	mov	r0, sl
   b580e:	f7ff ff73 	bl	b56f8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b5812:	68e0      	ldr	r0, [r4, #12]
	if (__p)
   b5814:	b118      	cbz	r0, b581e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x62>
			    - this->_M_impl._M_start);
   b5816:	6961      	ldr	r1, [r4, #20]
	::operator delete(__p
   b5818:	1a09      	subs	r1, r1, r0
   b581a:	f7fe fc42 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b581e:	eb08 0007 	add.w	r0, r8, r7
	      this->_M_impl._M_start = __tmp;
   b5822:	f8c4 800c 	str.w	r8, [r4, #12]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b5826:	6160      	str	r0, [r4, #20]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b5828:	68e3      	ldr	r3, [r4, #12]
   b582a:	443b      	add	r3, r7
   b582c:	6123      	str	r3, [r4, #16]
   b582e:	f105 0118 	add.w	r1, r5, #24
   b5832:	f104 0018 	add.w	r0, r4, #24
   b5836:	f7ff fa03 	bl	b4c40 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
   b583a:	f105 0124 	add.w	r1, r5, #36	; 0x24
   b583e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b5842:	f7ff f9fd 	bl	b4c40 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	this->_M_assign(__str);
   b5846:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b584a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b584e:	f004 f8cb 	bl	b99e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
   b5852:	f105 0148 	add.w	r1, r5, #72	; 0x48
   b5856:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b585a:	f7fe fd39 	bl	b42d0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
   b585e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b5860:	6563      	str	r3, [r4, #84]	; 0x54
   b5862:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b5864:	65a3      	str	r3, [r4, #88]	; 0x58
   b5866:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b5868:	65e3      	str	r3, [r4, #92]	; 0x5c
   b586a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b586c:	6623      	str	r3, [r4, #96]	; 0x60
	      ++__first;
   b586e:	3564      	adds	r5, #100	; 0x64
	      ++__result;
   b5870:	3464      	adds	r4, #100	; 0x64
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5872:	3e01      	subs	r6, #1
   b5874:	e7ac      	b.n	b57d0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x14>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5876:	46b8      	mov	r8, r7
   b5878:	e7c7      	b.n	b580a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x4e>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b587a:	6923      	ldr	r3, [r4, #16]
   b587c:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b587e:	429f      	cmp	r7, r3
   b5880:	d803      	bhi.n	b588a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xce>
			      _Category>::__copy_m(__first, __last, __result);
   b5882:	4650      	mov	r0, sl
   b5884:	f7ff ff38 	bl	b56f8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
    { return std::uninitialized_copy(__first, __last, __result); }
   b5888:	e7ce      	b.n	b5828 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x6c>
   b588a:	eb0a 0103 	add.w	r1, sl, r3
   b588e:	4650      	mov	r0, sl
   b5890:	f7ff ff32 	bl	b56f8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b5894:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
   b5898:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
   b589c:	1a10      	subs	r0, r2, r0
   b589e:	4418      	add	r0, r3
   b58a0:	e7f0      	b.n	b5884 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xc8>
	}
   b58a2:	4620      	mov	r0, r4
   b58a4:	b002      	add	sp, #8
   b58a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b58aa:	bf00      	nop
   b58ac:	c28f5c29 	.word	0xc28f5c29
   b58b0:	7ffffffc 	.word	0x7ffffffc

000b58b4 <setup>:
void setup() {
   b58b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b58b6:	b0bf      	sub	sp, #252	; 0xfc
  Serial.begin(9600);
   b58b8:	f003 fddc 	bl	b9474 <_Z16_fetch_usbserialv>
   b58bc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b58c0:	f003 fdcc 	bl	b945c <_ZN9USBSerial5beginEl>
  delay(2000);
   b58c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b58c8:	f001 fc80 	bl	b71cc <delay>
  BLE.on();
   b58cc:	f001 ffea 	bl	b78a4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b58d0:	f002 f832 	bl	b7938 <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   b58d4:	f001 ffe6 	bl	b78a4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b58d8:	4a5c      	ldr	r2, [pc, #368]	; (b5a4c <setup+0x198>)
   b58da:	4c5d      	ldr	r4, [pc, #372]	; (b5a50 <setup+0x19c>)
   b58dc:	4601      	mov	r1, r0
   b58de:	a80c      	add	r0, sp, #48	; 0x30
   b58e0:	f002 fd14 	bl	b830c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b58e4:	a80c      	add	r0, sp, #48	; 0x30
   b58e6:	f002 f8ce 	bl	b7a86 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   b58ea:	f001 ffdb 	bl	b78a4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b58ee:	4a59      	ldr	r2, [pc, #356]	; (b5a54 <setup+0x1a0>)
   b58f0:	4601      	mov	r1, r0
   b58f2:	a80c      	add	r0, sp, #48	; 0x30
   b58f4:	f002 fd0a 	bl	b830c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b58f8:	a80c      	add	r0, sp, #48	; 0x30
   b58fa:	f002 f8c4 	bl	b7a86 <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData data;
   b58fe:	a804      	add	r0, sp, #16
   b5900:	f002 f9f7 	bl	b7cf2 <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   b5904:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5906:	ad07      	add	r5, sp, #28
   b5908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
        BleUuid tempUUID(uuid);
   b590a:	ad07      	add	r5, sp, #28
   b590c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b590e:	6826      	ldr	r6, [r4, #0]
   b5910:	ac0c      	add	r4, sp, #48	; 0x30
   b5912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5914:	a80c      	add	r0, sp, #48	; 0x30
        BleUuid tempUUID(uuid);
   b5916:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5918:	f001 fdc6 	bl	b74a8 <_ZNK8particle7BleUuid4typeEv>
   b591c:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b591e:	a80c      	add	r0, sp, #48	; 0x30
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5920:	2c00      	cmp	r4, #0
   b5922:	d14a      	bne.n	b59ba <setup+0x106>
            uint16_t uuid16 = tempUUID.shorted();
   b5924:	f001 fddc 	bl	b74e0 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b5928:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b592a:	f8ad 000e 	strh.w	r0, [sp, #14]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b592e:	2302      	movs	r3, #2
   b5930:	f10d 020e 	add.w	r2, sp, #14
   b5934:	2103      	movs	r1, #3
   b5936:	a804      	add	r0, sp, #16
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b5938:	f002 f9d0 	bl	b7cdc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   b593c:	f001 ffb2 	bl	b78a4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5940:	2200      	movs	r2, #0
   b5942:	a904      	add	r1, sp, #16
   b5944:	f002 f842 	bl	b79cc <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  request.hostname = "lapi.transitchicago.com";
   b5948:	4c43      	ldr	r4, [pc, #268]	; (b5a58 <setup+0x1a4>)
  acquireWireBuffer();
   b594a:	a80c      	add	r0, sp, #48	; 0x30
   b594c:	f7fe fea4 	bl	b4698 <_Z17acquireWireBufferv>
  Wire.begin();
   b5950:	f003 fede 	bl	b9710 <_Z19__fetch_global_Wirev>
   b5954:	f002 fe66 	bl	b8624 <_ZN7TwoWire5beginEv>
  randomizeAddress();
   b5958:	f7fe fd48 	bl	b43ec <_Z16randomizeAddressv>
  request.hostname = "lapi.transitchicago.com";
   b595c:	493f      	ldr	r1, [pc, #252]	; (b5a5c <setup+0x1a8>)
   b595e:	4620      	mov	r0, r4
   b5960:	f003 f8fb 	bl	b8b5a <_ZN6StringaSEPKc>
  request.port = 80;
   b5964:	2350      	movs	r3, #80	; 0x50
   b5966:	63a3      	str	r3, [r4, #56]	; 0x38

    //loopIndex must point to either the first or last checkpoint, tripleIndex cannot be 0
    void setLoopIndex(int triple, int loop){
        tripleIndex = triple;
   b5968:	4b3d      	ldr	r3, [pc, #244]	; (b5a60 <setup+0x1ac>)
			 - this->_M_impl._M_start); }
   b596a:	4c3e      	ldr	r4, [pc, #248]	; (b5a64 <setup+0x1b0>)
        loopIndex = loop;
   b596c:	2200      	movs	r2, #0
   b596e:	2104      	movs	r1, #4
   b5970:	e9c3 1215 	strd	r1, r2, [r3, #84]	; 0x54
  railways = {redLine, blueLine};
   b5974:	a80c      	add	r0, sp, #48	; 0x30
   b5976:	493c      	ldr	r1, [pc, #240]	; (b5a68 <setup+0x1b4>)
   b5978:	f7ff fecc 	bl	b5714 <_ZN7RailwayC1ERKS_>
   b597c:	493b      	ldr	r1, [pc, #236]	; (b5a6c <setup+0x1b8>)
   b597e:	a825      	add	r0, sp, #148	; 0x94
   b5980:	f7ff fec8 	bl	b5714 <_ZN7RailwayC1ERKS_>
   b5984:	6822      	ldr	r2, [r4, #0]
   b5986:	68a3      	ldr	r3, [r4, #8]
   b5988:	1a9b      	subs	r3, r3, r2
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
		    std::forward_iterator_tag)
      {
	const size_type __len = std::distance(__first, __last);

	if (__len > capacity())
   b598a:	2bc7      	cmp	r3, #199	; 0xc7
   b598c:	d834      	bhi.n	b59f8 <setup+0x144>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b598e:	20c8      	movs	r0, #200	; 0xc8
   b5990:	f7fe fb81 	bl	b4096 <_Znwj>
   b5994:	4605      	mov	r5, r0
   b5996:	b110      	cbz	r0, b599e <setup+0xea>
   b5998:	a90c      	add	r1, sp, #48	; 0x30
   b599a:	f7ff febb 	bl	b5714 <_ZN7RailwayC1ERKS_>
   b599e:	a925      	add	r1, sp, #148	; 0x94
   b59a0:	f105 0064 	add.w	r0, r5, #100	; 0x64
   b59a4:	f7ff feb6 	bl	b5714 <_ZN7RailwayC1ERKS_>
	  {
	    _S_check_init_len(__len, _M_get_Tp_allocator());
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b59a8:	e9d4 6700 	ldrd	r6, r7, [r4]
	  for (; __first != __last; ++__first)
   b59ac:	42b7      	cmp	r7, r6
   b59ae:	d00e      	beq.n	b59ce <setup+0x11a>
      __pointer->~_Tp();
   b59b0:	4630      	mov	r0, r6
   b59b2:	f7fe feb8 	bl	b4726 <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b59b6:	3664      	adds	r6, #100	; 0x64
   b59b8:	e7f8      	b.n	b59ac <setup+0xf8>
   b59ba:	f001 fd93 	bl	b74e4 <_ZNK8particle7BleUuid8rawBytesEv>
   b59be:	2300      	movs	r3, #0
   b59c0:	9300      	str	r3, [sp, #0]
   b59c2:	2310      	movs	r3, #16
   b59c4:	4602      	mov	r2, r0
   b59c6:	2107      	movs	r1, #7
   b59c8:	eb0d 0003 	add.w	r0, sp, r3
   b59cc:	e7b4      	b.n	b5938 <setup+0x84>
			  _M_get_Tp_allocator());
	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
	    _M_deallocate(this->_M_impl._M_start,
   b59ce:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b59d0:	b118      	cbz	r0, b59da <setup+0x126>
			  this->_M_impl._M_end_of_storage
			  - this->_M_impl._M_start);
   b59d2:	68a1      	ldr	r1, [r4, #8]
	::operator delete(__p
   b59d4:	1a09      	subs	r1, r1, r0
   b59d6:	f7fe fb64 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
   b59da:	6025      	str	r5, [r4, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b59dc:	35c8      	adds	r5, #200	; 0xc8
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b59de:	e9c4 5501 	strd	r5, r5, [r4, #4]
   b59e2:	a825      	add	r0, sp, #148	; 0x94
   b59e4:	f7fe fe9f 	bl	b4726 <_ZN7RailwayD1Ev>
   b59e8:	a80c      	add	r0, sp, #48	; 0x30
   b59ea:	f7fe fe9c 	bl	b4726 <_ZN7RailwayD1Ev>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b59ee:	9804      	ldr	r0, [sp, #16]
   b59f0:	f001 fba4 	bl	b713c <free>
}
   b59f4:	b03f      	add	sp, #252	; 0xfc
   b59f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b59f8:	6865      	ldr	r5, [r4, #4]
   b59fa:	1aad      	subs	r5, r5, r2
	  }
	else if (size() >= __len)
   b59fc:	2dc7      	cmp	r5, #199	; 0xc7
   b59fe:	d910      	bls.n	b5a22 <setup+0x16e>
			      _Category>::__copy_m(__first, __last, __result);
   b5a00:	a93e      	add	r1, sp, #248	; 0xf8
   b5a02:	a80c      	add	r0, sp, #48	; 0x30
   b5a04:	f7ff feda 	bl	b57bc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b5a08:	6867      	ldr	r7, [r4, #4]
   b5a0a:	42b8      	cmp	r0, r7
   b5a0c:	4605      	mov	r5, r0
   b5a0e:	d0e8      	beq.n	b59e2 <setup+0x12e>
   b5a10:	4606      	mov	r6, r0
      __pointer->~_Tp();
   b5a12:	4630      	mov	r0, r6
	  for (; __first != __last; ++__first)
   b5a14:	3664      	adds	r6, #100	; 0x64
      __pointer->~_Tp();
   b5a16:	f7fe fe86 	bl	b4726 <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b5a1a:	42b7      	cmp	r7, r6
   b5a1c:	d1f9      	bne.n	b5a12 <setup+0x15e>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   b5a1e:	6065      	str	r5, [r4, #4]
   b5a20:	e7df      	b.n	b59e2 <setup+0x12e>
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b5a22:	ab0c      	add	r3, sp, #48	; 0x30
   b5a24:	441d      	add	r5, r3
   b5a26:	4629      	mov	r1, r5
   b5a28:	4618      	mov	r0, r3
   b5a2a:	f7ff fec7 	bl	b57bc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5a2e:	6866      	ldr	r6, [r4, #4]
	      for (; __first != __last; ++__first, (void)++__cur)
   b5a30:	ab3e      	add	r3, sp, #248	; 0xf8
   b5a32:	429d      	cmp	r5, r3
   b5a34:	d007      	beq.n	b5a46 <setup+0x192>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b5a36:	b11e      	cbz	r6, b5a40 <setup+0x18c>
   b5a38:	4629      	mov	r1, r5
   b5a3a:	4630      	mov	r0, r6
   b5a3c:	f7ff fe6a 	bl	b5714 <_ZN7RailwayC1ERKS_>
   b5a40:	3564      	adds	r5, #100	; 0x64
   b5a42:	3664      	adds	r6, #100	; 0x64
   b5a44:	e7f4      	b.n	b5a30 <setup+0x17c>
	    _ForwardIterator __mid = __first;
	    std::advance(__mid, size());
	    std::copy(__first, __mid, this->_M_impl._M_start);
	    const size_type __attribute__((__unused__)) __n = __len - size();
	    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	    this->_M_impl._M_finish =
   b5a46:	6066      	str	r6, [r4, #4]
   b5a48:	e7cb      	b.n	b59e2 <setup+0x12e>
   b5a4a:	bf00      	nop
   b5a4c:	2003e6a8 	.word	0x2003e6a8
   b5a50:	2003554c 	.word	0x2003554c
   b5a54:	2003e694 	.word	0x2003e694
   b5a58:	2003e634 	.word	0x2003e634
   b5a5c:	000bcc5a 	.word	0x000bcc5a
   b5a60:	200355f8 	.word	0x200355f8
   b5a64:	2003e5c4 	.word	0x2003e5c4
   b5a68:	2003e5d0 	.word	0x2003e5d0
   b5a6c:	20035594 	.word	0x20035594

000b5a70 <_GLOBAL__sub_I_redLine>:
   b5a70:	2001      	movs	r0, #1
   b5a72:	f7ff b9bf 	b.w	b4df4 <_Z41__static_initialization_and_destruction_0ii.constprop.0>
	...

000b5a78 <loop>:
void loop() {
   b5a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5a7c:	ed2d 8b06 	vpush	{d8-d10}
   b5a80:	b0b9      	sub	sp, #228	; 0xe4
  Serial.println("loop start");
   b5a82:	f003 fcf7 	bl	b9474 <_Z16_fetch_usbserialv>
   b5a86:	49ad      	ldr	r1, [pc, #692]	; (b5d3c <loop+0x2c4>)
   b5a88:	f8df b310 	ldr.w	fp, [pc, #784]	; b5d9c <loop+0x324>
   b5a8c:	f002 ff8d 	bl	b89aa <_ZN5Print7printlnEPKc>
  while(userInput){
   b5a90:	4bab      	ldr	r3, [pc, #684]	; (b5d40 <loop+0x2c8>)
   b5a92:	781b      	ldrb	r3, [r3, #0]
   b5a94:	2b00      	cmp	r3, #0
   b5a96:	f000 8307 	beq.w	b60a8 <loop+0x630>
   b5a9a:	4baa      	ldr	r3, [pc, #680]	; (b5d44 <loop+0x2cc>)
   b5a9c:	9304      	str	r3, [sp, #16]
    for(int j = 0; j < railways.size(); j++){
   b5a9e:	2500      	movs	r5, #0
   b5aa0:	e9db 2300 	ldrd	r2, r3, [fp]
   b5aa4:	1a9b      	subs	r3, r3, r2
   b5aa6:	4aa8      	ldr	r2, [pc, #672]	; (b5d48 <loop+0x2d0>)
   b5aa8:	109b      	asrs	r3, r3, #2
   b5aaa:	4353      	muls	r3, r2
   b5aac:	42ab      	cmp	r3, r5
   b5aae:	f240 82f6 	bls.w	b609e <loop+0x626>
      delay(2500);
   b5ab2:	f640 10c4 	movw	r0, #2500	; 0x9c4
   b5ab6:	f001 fb89 	bl	b71cc <delay>
	StringSumHelper(const char *p) : String(p) {}
   b5aba:	49a4      	ldr	r1, [pc, #656]	; (b5d4c <loop+0x2d4>)
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   b5abc:	4ca4      	ldr	r4, [pc, #656]	; (b5d50 <loop+0x2d8>)
   b5abe:	a81f      	add	r0, sp, #124	; 0x7c
   b5ac0:	f003 f81d 	bl	b8afe <_ZN6StringC1EPK19__FlashStringHelper>
      request.path = "/api/1.0/ttpositions.aspx?key=00ff09063caa46748434d5fa321d048f&rt=" + String(railways.at(j).name.c_str()) + "&outputType=JSON";
   b5ac4:	4629      	mov	r1, r5
   b5ac6:	4658      	mov	r0, fp
   b5ac8:	f7fe fefe 	bl	b48c8 <_ZNSt6vectorI7RailwaySaIS0_EE2atEj>
   b5acc:	6b01      	ldr	r1, [r0, #48]	; 0x30
   b5ace:	a81b      	add	r0, sp, #108	; 0x6c
   b5ad0:	f003 f815 	bl	b8afe <_ZN6StringC1EPK19__FlashStringHelper>
   b5ad4:	a91b      	add	r1, sp, #108	; 0x6c
   b5ad6:	a81f      	add	r0, sp, #124	; 0x7c
   b5ad8:	f003 f88c 	bl	b8bf4 <_ZplRK15StringSumHelperRK6String>
   b5adc:	499d      	ldr	r1, [pc, #628]	; (b5d54 <loop+0x2dc>)
   b5ade:	f003 f895 	bl	b8c0c <_ZplRK15StringSumHelperPKc>
   b5ae2:	4601      	mov	r1, r0
   b5ae4:	489c      	ldr	r0, [pc, #624]	; (b5d58 <loop+0x2e0>)
   b5ae6:	f003 f81e 	bl	b8b26 <_ZN6StringaSERKS_>
   b5aea:	a81b      	add	r0, sp, #108	; 0x6c
   b5aec:	f002 ffbc 	bl	b8a68 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b5af0:	a81f      	add	r0, sp, #124	; 0x7c
   b5af2:	f002 ffb9 	bl	b8a68 <_ZN6StringD1Ev>
   b5af6:	4b99      	ldr	r3, [pc, #612]	; (b5d5c <loop+0x2e4>)
   b5af8:	4999      	ldr	r1, [pc, #612]	; (b5d60 <loop+0x2e8>)
   b5afa:	489a      	ldr	r0, [pc, #616]	; (b5d64 <loop+0x2ec>)
   b5afc:	9300      	str	r3, [sp, #0]
   b5afe:	4622      	mov	r2, r4
   b5b00:	4b99      	ldr	r3, [pc, #612]	; (b5d68 <loop+0x2f0>)
   b5b02:	f000 fb17 	bl	b6134 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
      Serial.println("parsing");
   b5b06:	f003 fcb5 	bl	b9474 <_Z16_fetch_usbserialv>
   b5b0a:	4998      	ldr	r1, [pc, #608]	; (b5d6c <loop+0x2f4>)
   b5b0c:	f002 ff4d 	bl	b89aa <_ZN5Print7printlnEPKc>
      parser.clear();
   b5b10:	4897      	ldr	r0, [pc, #604]	; (b5d70 <loop+0x2f8>)
   b5b12:	f000 fca7 	bl	b6464 <_ZN10JsonBuffer5clearEv>
	const char * c_str() const { return buffer; }
   b5b16:	6861      	ldr	r1, [r4, #4]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b5b18:	9102      	str	r1, [sp, #8]
   b5b1a:	4608      	mov	r0, r1
   b5b1c:	f004 ff6e 	bl	ba9fc <strlen>
   b5b20:	9902      	ldr	r1, [sp, #8]
   b5b22:	4602      	mov	r2, r0
   b5b24:	4892      	ldr	r0, [pc, #584]	; (b5d70 <loop+0x2f8>)
   b5b26:	f000 fc80 	bl	b642a <_ZN10JsonBuffer7addDataEPKcj>
      if (!parser.parse()) {
   b5b2a:	4891      	ldr	r0, [pc, #580]	; (b5d70 <loop+0x2f8>)
   b5b2c:	f001 f83a 	bl	b6ba4 <_ZN10JsonParser5parseEv>
   b5b30:	b948      	cbnz	r0, b5b46 <loop+0xce>
        Serial.println("parsing failed");
   b5b32:	f003 fc9f 	bl	b9474 <_Z16_fetch_usbserialv>
   b5b36:	498f      	ldr	r1, [pc, #572]	; (b5d74 <loop+0x2fc>)
}
   b5b38:	b039      	add	sp, #228	; 0xe4
   b5b3a:	ecbd 8b06 	vpop	{d8-d10}
   b5b3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("parsing failed");
   b5b42:	f002 bf32 	b.w	b89aa <_ZN5Print7printlnEPKc>
      Railway currentRailway = railways.at(j);
   b5b46:	4629      	mov	r1, r5
   b5b48:	4658      	mov	r0, fp
   b5b4a:	f7fe febd 	bl	b48c8 <_ZNSt6vectorI7RailwaySaIS0_EE2atEj>
   b5b4e:	4601      	mov	r1, r0
   b5b50:	a81f      	add	r0, sp, #124	; 0x7c
   b5b52:	f7ff fddf 	bl	b5714 <_ZN7RailwayC1ERKS_>
      std::vector<Checkpoint> currentCheckpoints = currentRailway.checkpoints;
   b5b56:	a91f      	add	r1, sp, #124	; 0x7c
   b5b58:	a807      	add	r0, sp, #28
   b5b5a:	f7fe fe77 	bl	b484c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      int count = 0;
   b5b5e:	2300      	movs	r3, #0
   b5b60:	9302      	str	r3, [sp, #8]
        JsonReference train = parser.getReference().key("ctatt").key("route").index(0).key("train").index(count);
   b5b62:	4983      	ldr	r1, [pc, #524]	; (b5d70 <loop+0x2f8>)
   b5b64:	a80d      	add	r0, sp, #52	; 0x34
   b5b66:	f000 fc97 	bl	b6498 <_ZNK10JsonParser12getReferenceEv>
   b5b6a:	4a83      	ldr	r2, [pc, #524]	; (b5d78 <loop+0x300>)
   b5b6c:	a90d      	add	r1, sp, #52	; 0x34
   b5b6e:	a810      	add	r0, sp, #64	; 0x40
   b5b70:	f000 fe12 	bl	b6798 <_ZNK13JsonReference3keyEPKc>
   b5b74:	4a81      	ldr	r2, [pc, #516]	; (b5d7c <loop+0x304>)
   b5b76:	a910      	add	r1, sp, #64	; 0x40
   b5b78:	a813      	add	r0, sp, #76	; 0x4c
   b5b7a:	f000 fe0d 	bl	b6798 <_ZNK13JsonReference3keyEPKc>
   b5b7e:	2200      	movs	r2, #0
   b5b80:	a913      	add	r1, sp, #76	; 0x4c
   b5b82:	a817      	add	r0, sp, #92	; 0x5c
   b5b84:	f000 fcf6 	bl	b6574 <_ZNK13JsonReference5indexEj>
   b5b88:	4a7d      	ldr	r2, [pc, #500]	; (b5d80 <loop+0x308>)
   b5b8a:	a917      	add	r1, sp, #92	; 0x5c
   b5b8c:	a81b      	add	r0, sp, #108	; 0x6c
   b5b8e:	f000 fe03 	bl	b6798 <_ZNK13JsonReference3keyEPKc>
   b5b92:	9a02      	ldr	r2, [sp, #8]
   b5b94:	a91b      	add	r1, sp, #108	; 0x6c
   b5b96:	a80a      	add	r0, sp, #40	; 0x28
   b5b98:	f000 fcec 	bl	b6574 <_ZNK13JsonReference5indexEj>
   b5b9c:	a81b      	add	r0, sp, #108	; 0x6c
   b5b9e:	f000 fbf3 	bl	b6388 <_ZN13JsonReferenceD1Ev>
   b5ba2:	a817      	add	r0, sp, #92	; 0x5c
   b5ba4:	f000 fbf0 	bl	b6388 <_ZN13JsonReferenceD1Ev>
   b5ba8:	a813      	add	r0, sp, #76	; 0x4c
   b5baa:	f000 fbed 	bl	b6388 <_ZN13JsonReferenceD1Ev>
   b5bae:	a810      	add	r0, sp, #64	; 0x40
   b5bb0:	f000 fbea 	bl	b6388 <_ZN13JsonReferenceD1Ev>
   b5bb4:	a80d      	add	r0, sp, #52	; 0x34
   b5bb6:	f000 fbe7 	bl	b6388 <_ZN13JsonReferenceD1Ev>
        String nextStation = train.key("nextStaNm").valueString();
   b5bba:	4a72      	ldr	r2, [pc, #456]	; (b5d84 <loop+0x30c>)
   b5bbc:	a90a      	add	r1, sp, #40	; 0x28
   b5bbe:	a81b      	add	r0, sp, #108	; 0x6c
   b5bc0:	f000 fdea 	bl	b6798 <_ZNK13JsonReference3keyEPKc>
   b5bc4:	a91b      	add	r1, sp, #108	; 0x6c
   b5bc6:	a813      	add	r0, sp, #76	; 0x4c
   b5bc8:	f000 fe00 	bl	b67cc <_ZNK13JsonReference11valueStringEv>
   b5bcc:	a81b      	add	r0, sp, #108	; 0x6c
   b5bce:	f000 fbdb 	bl	b6388 <_ZN13JsonReferenceD1Ev>
        int trainDir = train.key("trDr").valueString().toInt();
   b5bd2:	4a6d      	ldr	r2, [pc, #436]	; (b5d88 <loop+0x310>)
   b5bd4:	a90a      	add	r1, sp, #40	; 0x28
   b5bd6:	a817      	add	r0, sp, #92	; 0x5c
   b5bd8:	f000 fdde 	bl	b6798 <_ZNK13JsonReference3keyEPKc>
   b5bdc:	a917      	add	r1, sp, #92	; 0x5c
   b5bde:	a81b      	add	r0, sp, #108	; 0x6c
   b5be0:	f000 fdf4 	bl	b67cc <_ZNK13JsonReference11valueStringEv>
   b5be4:	a81b      	add	r0, sp, #108	; 0x6c
   b5be6:	f003 f872 	bl	b8cce <_ZNK6String5toIntEv>
   b5bea:	9003      	str	r0, [sp, #12]
   b5bec:	a81b      	add	r0, sp, #108	; 0x6c
   b5bee:	f002 ff3b 	bl	b8a68 <_ZN6StringD1Ev>
   b5bf2:	a817      	add	r0, sp, #92	; 0x5c
   b5bf4:	f000 fbc8 	bl	b6388 <_ZN13JsonReferenceD1Ev>
        float lat = train.key("lat").valueString().toFloat();
   b5bf8:	4a64      	ldr	r2, [pc, #400]	; (b5d8c <loop+0x314>)
   b5bfa:	a90a      	add	r1, sp, #40	; 0x28
   b5bfc:	a817      	add	r0, sp, #92	; 0x5c
   b5bfe:	f000 fdcb 	bl	b6798 <_ZNK13JsonReference3keyEPKc>
   b5c02:	a917      	add	r1, sp, #92	; 0x5c
   b5c04:	a81b      	add	r0, sp, #108	; 0x6c
   b5c06:	f000 fde1 	bl	b67cc <_ZNK13JsonReference11valueStringEv>
   b5c0a:	a81b      	add	r0, sp, #108	; 0x6c
   b5c0c:	f003 f864 	bl	b8cd8 <_ZNK6String7toFloatEv>
   b5c10:	a81b      	add	r0, sp, #108	; 0x6c
   b5c12:	eef0 8a40 	vmov.f32	s17, s0
   b5c16:	f002 ff27 	bl	b8a68 <_ZN6StringD1Ev>
   b5c1a:	a817      	add	r0, sp, #92	; 0x5c
   b5c1c:	f000 fbb4 	bl	b6388 <_ZN13JsonReferenceD1Ev>
        float lon = train.key("lon").valueString().toFloat();
   b5c20:	4a5b      	ldr	r2, [pc, #364]	; (b5d90 <loop+0x318>)
   b5c22:	a90a      	add	r1, sp, #40	; 0x28
   b5c24:	a817      	add	r0, sp, #92	; 0x5c
   b5c26:	f000 fdb7 	bl	b6798 <_ZNK13JsonReference3keyEPKc>
   b5c2a:	a917      	add	r1, sp, #92	; 0x5c
   b5c2c:	a81b      	add	r0, sp, #108	; 0x6c
   b5c2e:	f000 fdcd 	bl	b67cc <_ZNK13JsonReference11valueStringEv>
   b5c32:	a81b      	add	r0, sp, #108	; 0x6c
   b5c34:	f003 f850 	bl	b8cd8 <_ZNK6String7toFloatEv>
   b5c38:	a81b      	add	r0, sp, #108	; 0x6c
   b5c3a:	eeb0 8a40 	vmov.f32	s16, s0
   b5c3e:	f002 ff13 	bl	b8a68 <_ZN6StringD1Ev>
   b5c42:	a817      	add	r0, sp, #92	; 0x5c
   b5c44:	f000 fba0 	bl	b6388 <_ZN13JsonReferenceD1Ev>
        if(nextStation.length() <= 1){
   b5c48:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b5c4a:	2b01      	cmp	r3, #1
   b5c4c:	f240 81ee 	bls.w	b602c <loop+0x5b4>
        Serial.print(String(currentRailway.name.c_str()) + " ");
   b5c50:	f003 fc10 	bl	b9474 <_Z16_fetch_usbserialv>
   b5c54:	992b      	ldr	r1, [sp, #172]	; 0xac
   b5c56:	4604      	mov	r4, r0
   b5c58:	a817      	add	r0, sp, #92	; 0x5c
   b5c5a:	f002 ff50 	bl	b8afe <_ZN6StringC1EPK19__FlashStringHelper>
	StringSumHelper(const String &s) : String(s) {}
   b5c5e:	a917      	add	r1, sp, #92	; 0x5c
   b5c60:	a81b      	add	r0, sp, #108	; 0x6c
   b5c62:	f002 ff6f 	bl	b8b44 <_ZN6StringC1ERKS_>
   b5c66:	494b      	ldr	r1, [pc, #300]	; (b5d94 <loop+0x31c>)
   b5c68:	a81b      	add	r0, sp, #108	; 0x6c
   b5c6a:	f002 ffcf 	bl	b8c0c <_ZplRK15StringSumHelperPKc>
   b5c6e:	6801      	ldr	r1, [r0, #0]
   b5c70:	4620      	mov	r0, r4
   b5c72:	f002 fe87 	bl	b8984 <_ZN5Print5printEPKc>
class StringSumHelper : public String
   b5c76:	a81b      	add	r0, sp, #108	; 0x6c
   b5c78:	f002 fef6 	bl	b8a68 <_ZN6StringD1Ev>
   b5c7c:	a817      	add	r0, sp, #92	; 0x5c
   b5c7e:	f002 fef3 	bl	b8a68 <_ZN6StringD1Ev>
   b5c82:	e9dd 3407 	ldrd	r3, r4, [sp, #28]
   b5c86:	1ae4      	subs	r4, r4, r3
   b5c88:	4b43      	ldr	r3, [pc, #268]	; (b5d98 <loop+0x320>)
   b5c8a:	10a4      	asrs	r4, r4, #2
   b5c8c:	435c      	muls	r4, r3
        for(int i = 0; i < checkpointCount; i++){
   b5c8e:	f04f 0a00 	mov.w	sl, #0
   b5c92:	45a2      	cmp	sl, r4
   b5c94:	da3c      	bge.n	b5d10 <loop+0x298>
          currentRailway.distances.at(i) = currentCheckpoints.at(i).getDistance(lat, lon);
   b5c96:	4651      	mov	r1, sl
   b5c98:	a807      	add	r0, sp, #28
   b5c9a:	f7fe fe3b 	bl	b4914 <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj>
    }

    float getDistance(float trainLat, float trainLon){
      return sqrt(pow((trainLat - lat), 2) + pow((trainLon - lon), 2));
   b5c9e:	edd0 7a00 	vldr	s15, [r0]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b5ca2:	ee78 7ae7 	vsub.f32	s15, s17, s15
   b5ca6:	4606      	mov	r6, r0
   b5ca8:	ee17 0a90 	vmov	r0, s15
   b5cac:	f004 fa7e 	bl	ba1ac <__aeabi_f2d>
   b5cb0:	edd6 7a01 	vldr	s15, [r6, #4]
   b5cb4:	ee78 7a67 	vsub.f32	s15, s16, s15
   b5cb8:	4680      	mov	r8, r0
   b5cba:	ee17 0a90 	vmov	r0, s15
   b5cbe:	4689      	mov	r9, r1
   b5cc0:	f004 fa74 	bl	ba1ac <__aeabi_f2d>
   b5cc4:	4602      	mov	r2, r0
   b5cc6:	460b      	mov	r3, r1
   b5cc8:	f004 fac8 	bl	ba25c <__aeabi_dmul>
   b5ccc:	4642      	mov	r2, r8
   b5cce:	4606      	mov	r6, r0
   b5cd0:	460f      	mov	r7, r1
   b5cd2:	464b      	mov	r3, r9
   b5cd4:	4640      	mov	r0, r8
   b5cd6:	4649      	mov	r1, r9
   b5cd8:	f004 fac0 	bl	ba25c <__aeabi_dmul>
   b5cdc:	4602      	mov	r2, r0
   b5cde:	460b      	mov	r3, r1
   b5ce0:	4630      	mov	r0, r6
   b5ce2:	4639      	mov	r1, r7
   b5ce4:	f004 f904 	bl	b9ef0 <__adddf3>
   b5ce8:	ec41 0b10 	vmov	d0, r0, r1
   b5cec:	f003 fff4 	bl	b9cd8 <sqrt>
   b5cf0:	4651      	mov	r1, sl
   b5cf2:	a822      	add	r0, sp, #136	; 0x88
   b5cf4:	ec57 6b10 	vmov	r6, r7, d0
   b5cf8:	f7fe fdfa 	bl	b48f0 <_ZNSt6vectorIfSaIfEE2atEj>
   b5cfc:	4639      	mov	r1, r7
   b5cfe:	4680      	mov	r8, r0
   b5d00:	4630      	mov	r0, r6
   b5d02:	f004 fd7b 	bl	ba7fc <__aeabi_d2f>
        for(int i = 0; i < checkpointCount; i++){
   b5d06:	f10a 0a01 	add.w	sl, sl, #1
   b5d0a:	f8c8 0000 	str.w	r0, [r8]
   b5d0e:	e7c0      	b.n	b5c92 <loop+0x21a>
      : _M_current(__i) { }
   b5d10:	e9dd 2622 	ldrd	r2, r6, [sp, #136]	; 0x88
    _GLIBCXX14_CONSTEXPR
    _ForwardIterator
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
		  _Compare __comp)
    {
      if (__first == __last)
   b5d14:	42b2      	cmp	r2, r6
   b5d16:	d043      	beq.n	b5da0 <loop+0x328>
   b5d18:	1d11      	adds	r1, r2, #4
   b5d1a:	4613      	mov	r3, r2
	return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
   b5d1c:	428e      	cmp	r6, r1
	++_M_current;
   b5d1e:	4608      	mov	r0, r1
   b5d20:	d03f      	beq.n	b5da2 <loop+0x32a>
	if (__comp(__first, __result))
   b5d22:	edd3 7a00 	vldr	s15, [r3]
   b5d26:	ed90 7a00 	vldr	s14, [r0]
   b5d2a:	eeb4 7a67 	vcmp.f32	s14, s15
   b5d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5d32:	f101 0104 	add.w	r1, r1, #4
   b5d36:	bf48      	it	mi
   b5d38:	4603      	movmi	r3, r0
   b5d3a:	e7ef      	b.n	b5d1c <loop+0x2a4>
   b5d3c:	000bcc72 	.word	0x000bcc72
   b5d40:	2003e6b0 	.word	0x2003e6b0
   b5d44:	2003e69c 	.word	0x2003e69c
   b5d48:	c28f5c29 	.word	0xc28f5c29
   b5d4c:	000bcc7d 	.word	0x000bcc7d
   b5d50:	2003e680 	.word	0x2003e680
   b5d54:	000bccc0 	.word	0x000bccc0
   b5d58:	2003e65c 	.word	0x2003e65c
   b5d5c:	000bccd1 	.word	0x000bccd1
   b5d60:	2003e634 	.word	0x2003e634
   b5d64:	200356c0 	.word	0x200356c0
   b5d68:	2003535c 	.word	0x2003535c
   b5d6c:	000bccd5 	.word	0x000bccd5
   b5d70:	20037f40 	.word	0x20037f40
   b5d74:	000bccdd 	.word	0x000bccdd
   b5d78:	000bccec 	.word	0x000bccec
   b5d7c:	000bccf2 	.word	0x000bccf2
   b5d80:	000bccf8 	.word	0x000bccf8
   b5d84:	000bccfe 	.word	0x000bccfe
   b5d88:	000bcd08 	.word	0x000bcd08
   b5d8c:	000bcd0d 	.word	0x000bcd0d
   b5d90:	000bcd11 	.word	0x000bcd11
   b5d94:	000bd23f 	.word	0x000bd23f
   b5d98:	cccccccd 	.word	0xcccccccd
   b5d9c:	2003e5c4 	.word	0x2003e5c4
   b5da0:	4613      	mov	r3, r2
          closestIndex = currentRailway.loopIndex;
   b5da2:	e9dd 7934 	ldrd	r7, r9, [sp, #208]	; 0xd0
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b5da6:	1a9b      	subs	r3, r3, r2
   b5da8:	ebb7 0fa3 	cmp.w	r7, r3, asr #2
   b5dac:	ea4f 08a3 	mov.w	r8, r3, asr #2
   b5db0:	bf08      	it	eq
   b5db2:	46c8      	moveq	r8, r9
        x1 = currentCheckpoints.at(closestIndex).lat;
   b5db4:	4641      	mov	r1, r8
   b5db6:	a807      	add	r0, sp, #28
   b5db8:	f7fe fdac 	bl	b4914 <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj>
   b5dbc:	edd0 7a00 	vldr	s15, [r0]
        y1 = currentCheckpoints.at(closestIndex).lon;
   b5dc0:	edd0 9a01 	vldr	s19, [r0, #4]
        if(currentCheckpoints.at(closestIndex).lat > lat){
   b5dc4:	eef4 8ae7 	vcmpe.f32	s17, s15
   b5dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5dcc:	ee37 aae8 	vsub.f32	s20, s15, s17
          slope = (y - y1) / (x - x1);
   b5dd0:	bf55      	itete	pl
   b5dd2:	ee38 7a69 	vsubpl.f32	s14, s16, s19
          slope = (y1 - y) / (x1 - x);
   b5dd6:	ee79 7ac8 	vsubmi.f32	s15, s19, s16
          slope = (y - y1) / (x - x1);
   b5dda:	ee78 7ae7 	vsubpl.f32	s15, s17, s15
          slope = (y1 - y) / (x1 - x);
   b5dde:	eec7 6a8a 	vdivmi.f32	s13, s15, s20
          slope = (y - y1) / (x - x1);
   b5de2:	bf58      	it	pl
   b5de4:	eec7 6a27 	vdivpl.f32	s13, s14, s15
          pointSide = (-1 / slope * (currentCheckpoints.at(closestIndex + 1).lat - x) + y) > currentCheckpoints.at(closestIndex + 1).lon;
   b5de8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b5dec:	ee87 9aa6 	vdiv.f32	s18, s15, s13
        if(closestIndex == 0){
   b5df0:	f1b8 0f00 	cmp.w	r8, #0
   b5df4:	d16e      	bne.n	b5ed4 <loop+0x45c>
          pointSide = (-1 / slope * (currentCheckpoints.at(closestIndex + 1).lat - x) + y) > currentCheckpoints.at(closestIndex + 1).lon;
   b5df6:	2101      	movs	r1, #1
   b5df8:	a807      	add	r0, sp, #28
   b5dfa:	f7fe fd8b 	bl	b4914 <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj>
   b5dfe:	edd0 7a00 	vldr	s15, [r0]
   b5e02:	ee77 7ae8 	vsub.f32	s15, s15, s17
   b5e06:	eeb0 7a48 	vmov.f32	s14, s16
   b5e0a:	eea7 7a89 	vfma.f32	s14, s15, s18
   b5e0e:	edd0 7a01 	vldr	s15, [r0, #4]
   b5e12:	eeb4 7ae7 	vcmpe.f32	s14, s15
          nearestSide = (-1 / slope * (currentCheckpoints.at(closestIndex).lat - x) + y) > currentCheckpoints.at(closestIndex).lon;
   b5e16:	eef0 7a48 	vmov.f32	s15, s16
   b5e1a:	eeea 7a09 	vfma.f32	s15, s20, s18
          pointSide = (-1 / slope * (currentCheckpoints.at(closestIndex + 1).lat - x) + y) > currentCheckpoints.at(closestIndex + 1).lon;
   b5e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          nearestSide = (-1 / slope * (currentCheckpoints.at(closestIndex).lat - x) + y) > currentCheckpoints.at(closestIndex).lon;
   b5e22:	eef4 7ae9 	vcmpe.f32	s15, s19
          pointSide = (-1 / slope * (currentCheckpoints.at(closestIndex + 1).lat - x) + y) > currentCheckpoints.at(closestIndex + 1).lon;
   b5e26:	bfcc      	ite	gt
   b5e28:	2401      	movgt	r4, #1
   b5e2a:	2400      	movle	r4, #0
          nearestSide = (-1 / slope * (currentCheckpoints.at(closestIndex).lat - x) + y) > currentCheckpoints.at(closestIndex).lon;
   b5e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5e30:	bfcc      	ite	gt
   b5e32:	f04f 0a01 	movgt.w	sl, #1
   b5e36:	f04f 0a00 	movle.w	sl, #0
          if(currentRailway.loopIndex == closestIndex){
   b5e3a:	f1b9 0f00 	cmp.w	r9, #0
   b5e3e:	d11a      	bne.n	b5e76 <loop+0x3fe>
            loopPointSide = (-1 / slope * (currentCheckpoints.at(currentRailway.tripleIndex - 1).lat - x) + y) > currentCheckpoints.at(currentRailway.tripleIndex - 1).lon;
   b5e40:	1e7e      	subs	r6, r7, #1
   b5e42:	4631      	mov	r1, r6
   b5e44:	a807      	add	r0, sp, #28
   b5e46:	f7fe fd65 	bl	b4914 <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj>
            if(nearestSide != pointSide){
   b5e4a:	4554      	cmp	r4, sl
            loopPointSide = (-1 / slope * (currentCheckpoints.at(currentRailway.tripleIndex - 1).lat - x) + y) > currentCheckpoints.at(currentRailway.tripleIndex - 1).lon;
   b5e4c:	ed90 0a00 	vldr	s0, [r0]
   b5e50:	edd0 7a01 	vldr	s15, [r0, #4]
            if(nearestSide != pointSide){
   b5e54:	f040 80b8 	bne.w	b5fc8 <loop+0x550>
            loopPointSide = (-1 / slope * (currentCheckpoints.at(currentRailway.tripleIndex - 1).lat - x) + y) > currentCheckpoints.at(currentRailway.tripleIndex - 1).lon;
   b5e58:	ee70 8a68 	vsub.f32	s17, s0, s17
   b5e5c:	eea8 8a89 	vfma.f32	s16, s17, s18
   b5e60:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b5e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            }else if(nearestSide != loopPointSide){
   b5e68:	bfcc      	ite	gt
   b5e6a:	2301      	movgt	r3, #1
   b5e6c:	2300      	movle	r3, #0
   b5e6e:	42a3      	cmp	r3, r4
              }else if(nearestSide != loopPointSide){
   b5e70:	d168      	bne.n	b5f44 <loop+0x4cc>
                secondClosestIndex = currentRailway.tripleIndex + 1;
   b5e72:	1c7e      	adds	r6, r7, #1
   b5e74:	e066      	b.n	b5f44 <loop+0x4cc>
            if(pointSide == nearestSide){
   b5e76:	4554      	cmp	r4, sl
   b5e78:	f000 80ce 	beq.w	b6018 <loop+0x5a0>
   b5e7c:	4647      	mov	r7, r8
   b5e7e:	2601      	movs	r6, #1
            segmentPos = currentRailway.distances.at(closestIndex) / (currentRailway.distances.at(closestIndex) + currentRailway.distances.at(secondClosestIndex));
   b5e80:	4639      	mov	r1, r7
   b5e82:	a822      	add	r0, sp, #136	; 0x88
   b5e84:	f7fe fd34 	bl	b48f0 <_ZNSt6vectorIfSaIfEE2atEj>
   b5e88:	4631      	mov	r1, r6
   b5e8a:	edd0 8a00 	vldr	s17, [r0]
   b5e8e:	a822      	add	r0, sp, #136	; 0x88
   b5e90:	f7fe fd2e 	bl	b48f0 <_ZNSt6vectorIfSaIfEE2atEj>
   b5e94:	edd0 7a00 	vldr	s15, [r0]
   b5e98:	ee78 7aa7 	vadd.f32	s15, s17, s15
            segmentPos *= currentRailway.scalers.at(closestIndex);
   b5e9c:	4639      	mov	r1, r7
            segmentPos = currentRailway.distances.at(closestIndex) / (currentRailway.distances.at(closestIndex) + currentRailway.distances.at(secondClosestIndex));
   b5e9e:	ee88 9aa7 	vdiv.f32	s18, s17, s15
            segmentPos *= currentRailway.scalers.at(closestIndex);
   b5ea2:	a825      	add	r0, sp, #148	; 0x94
   b5ea4:	f7fe fd4a 	bl	b493c <_ZNSt6vectorIiSaIiEE2atEj>
            for(int i = 0; i < closestIndex; i++){
   b5ea8:	2400      	movs	r4, #0
            segmentPos *= currentRailway.scalers.at(closestIndex);
   b5eaa:	ed90 8a00 	vldr	s16, [r0]
   b5eae:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   b5eb2:	ee28 8a09 	vmul.f32	s16, s16, s18
            for(int i = 0; i < closestIndex; i++){
   b5eb6:	42bc      	cmp	r4, r7
   b5eb8:	f280 8088 	bge.w	b5fcc <loop+0x554>
              segmentPos += currentRailway.scalers.at(i);
   b5ebc:	4621      	mov	r1, r4
   b5ebe:	a825      	add	r0, sp, #148	; 0x94
   b5ec0:	f7fe fd3c 	bl	b493c <_ZNSt6vectorIiSaIiEE2atEj>
   b5ec4:	edd0 7a00 	vldr	s15, [r0]
   b5ec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            for(int i = 0; i < closestIndex; i++){
   b5ecc:	3401      	adds	r4, #1
              segmentPos += currentRailway.scalers.at(i);
   b5ece:	ee38 8a27 	vadd.f32	s16, s16, s15
            for(int i = 0; i < closestIndex; i++){
   b5ed2:	e7f0      	b.n	b5eb6 <loop+0x43e>
          pointSide = (-1 / slope * (currentCheckpoints.at(closestIndex - 1).lat - x) + y) > currentCheckpoints.at(closestIndex - 1).lon;
   b5ed4:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
   b5ed8:	4631      	mov	r1, r6
   b5eda:	a807      	add	r0, sp, #28
   b5edc:	f7fe fd1a 	bl	b4914 <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj>
   b5ee0:	edd0 7a00 	vldr	s15, [r0]
   b5ee4:	ee77 7ae8 	vsub.f32	s15, s15, s17
   b5ee8:	eeb0 7a48 	vmov.f32	s14, s16
   b5eec:	eea7 7a89 	vfma.f32	s14, s15, s18
          if(closestIndex == checkpointCount - 1){
   b5ef0:	1e62      	subs	r2, r4, #1
          pointSide = (-1 / slope * (currentCheckpoints.at(closestIndex - 1).lat - x) + y) > currentCheckpoints.at(closestIndex - 1).lon;
   b5ef2:	edd0 7a01 	vldr	s15, [r0, #4]
   b5ef6:	eeb4 7ae7 	vcmpe.f32	s14, s15
          nearestSide = (-1 / slope * (currentCheckpoints.at(closestIndex).lat - x) + y) > currentCheckpoints.at(closestIndex).lon;
   b5efa:	eef0 7a48 	vmov.f32	s15, s16
   b5efe:	eeea 7a09 	vfma.f32	s15, s20, s18
          pointSide = (-1 / slope * (currentCheckpoints.at(closestIndex - 1).lat - x) + y) > currentCheckpoints.at(closestIndex - 1).lon;
   b5f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          nearestSide = (-1 / slope * (currentCheckpoints.at(closestIndex).lat - x) + y) > currentCheckpoints.at(closestIndex).lon;
   b5f06:	eef4 7ae9 	vcmpe.f32	s15, s19
          pointSide = (-1 / slope * (currentCheckpoints.at(closestIndex - 1).lat - x) + y) > currentCheckpoints.at(closestIndex - 1).lon;
   b5f0a:	bfcc      	ite	gt
   b5f0c:	f04f 0a01 	movgt.w	sl, #1
   b5f10:	f04f 0a00 	movle.w	sl, #0
          nearestSide = (-1 / slope * (currentCheckpoints.at(closestIndex).lat - x) + y) > currentCheckpoints.at(closestIndex).lon;
   b5f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5f18:	bfcc      	ite	gt
   b5f1a:	2301      	movgt	r3, #1
   b5f1c:	2300      	movle	r3, #0
          if(closestIndex == checkpointCount - 1){
   b5f1e:	4542      	cmp	r2, r8
   b5f20:	d14d      	bne.n	b5fbe <loop+0x546>
            if(closestIndex == currentRailway.loopIndex){
   b5f22:	45c8      	cmp	r8, r9
   b5f24:	d146      	bne.n	b5fb4 <loop+0x53c>
              loopPointSide = (-1 / slope * (currentCheckpoints.at(currentRailway.tripleIndex - 1).lat - x) + y) > currentCheckpoints.at(currentRailway.tripleIndex - 1).lon;
   b5f26:	1e7e      	subs	r6, r7, #1
   b5f28:	4631      	mov	r1, r6
   b5f2a:	a807      	add	r0, sp, #28
   b5f2c:	9305      	str	r3, [sp, #20]
   b5f2e:	f7fe fcf1 	bl	b4914 <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj>
              if(nearestSide != pointSide){
   b5f32:	9b05      	ldr	r3, [sp, #20]
              loopPointSide = (-1 / slope * (currentCheckpoints.at(currentRailway.tripleIndex - 1).lat - x) + y) > currentCheckpoints.at(currentRailway.tripleIndex - 1).lon;
   b5f34:	ed90 0a00 	vldr	s0, [r0]
   b5f38:	edd0 7a01 	vldr	s15, [r0, #4]
              if(nearestSide != pointSide){
   b5f3c:	459a      	cmp	sl, r3
   b5f3e:	d02c      	beq.n	b5f9a <loop+0x522>
                secondClosestIndex = checkpointCount - 2;
   b5f40:	1ea6      	subs	r6, r4, #2
   b5f42:	464f      	mov	r7, r9
          if(closestIndex < secondClosestIndex){
   b5f44:	42b7      	cmp	r7, r6
   b5f46:	db9b      	blt.n	b5e80 <loop+0x408>
            segmentPos = currentRailway.distances.at(secondClosestIndex) / (currentRailway.distances.at(closestIndex) + currentRailway.distances.at(secondClosestIndex));
   b5f48:	4631      	mov	r1, r6
   b5f4a:	a822      	add	r0, sp, #136	; 0x88
   b5f4c:	f7fe fcd0 	bl	b48f0 <_ZNSt6vectorIfSaIfEE2atEj>
   b5f50:	4639      	mov	r1, r7
   b5f52:	edd0 8a00 	vldr	s17, [r0]
   b5f56:	a822      	add	r0, sp, #136	; 0x88
   b5f58:	f7fe fcca 	bl	b48f0 <_ZNSt6vectorIfSaIfEE2atEj>
   b5f5c:	edd0 7a00 	vldr	s15, [r0]
   b5f60:	ee78 7aa7 	vadd.f32	s15, s17, s15
            segmentPos *= currentRailway.scalers.at(secondClosestIndex);
   b5f64:	4631      	mov	r1, r6
            segmentPos = currentRailway.distances.at(secondClosestIndex) / (currentRailway.distances.at(closestIndex) + currentRailway.distances.at(secondClosestIndex));
   b5f66:	ee88 9aa7 	vdiv.f32	s18, s17, s15
            segmentPos *= currentRailway.scalers.at(secondClosestIndex);
   b5f6a:	a825      	add	r0, sp, #148	; 0x94
   b5f6c:	f7fe fce6 	bl	b493c <_ZNSt6vectorIiSaIiEE2atEj>
            for(int i = 0; i < secondClosestIndex; i++){
   b5f70:	2400      	movs	r4, #0
            segmentPos *= currentRailway.scalers.at(secondClosestIndex);
   b5f72:	ed90 8a00 	vldr	s16, [r0]
   b5f76:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   b5f7a:	ee28 8a09 	vmul.f32	s16, s16, s18
            for(int i = 0; i < secondClosestIndex; i++){
   b5f7e:	42b4      	cmp	r4, r6
   b5f80:	da24      	bge.n	b5fcc <loop+0x554>
              segmentPos += currentRailway.scalers.at(i);
   b5f82:	4621      	mov	r1, r4
   b5f84:	a825      	add	r0, sp, #148	; 0x94
   b5f86:	f7fe fcd9 	bl	b493c <_ZNSt6vectorIiSaIiEE2atEj>
   b5f8a:	edd0 7a00 	vldr	s15, [r0]
   b5f8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            for(int i = 0; i < secondClosestIndex; i++){
   b5f92:	3401      	adds	r4, #1
              segmentPos += currentRailway.scalers.at(i);
   b5f94:	ee38 8a27 	vadd.f32	s16, s16, s15
            for(int i = 0; i < secondClosestIndex; i++){
   b5f98:	e7f1      	b.n	b5f7e <loop+0x506>
              loopPointSide = (-1 / slope * (currentCheckpoints.at(currentRailway.tripleIndex - 1).lat - x) + y) > currentCheckpoints.at(currentRailway.tripleIndex - 1).lon;
   b5f9a:	ee70 8a68 	vsub.f32	s17, s0, s17
   b5f9e:	eea8 8a89 	vfma.f32	s16, s17, s18
   b5fa2:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b5fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
              }else if(nearestSide != loopPointSide){
   b5faa:	bfcc      	ite	gt
   b5fac:	2301      	movgt	r3, #1
   b5fae:	2300      	movle	r3, #0
   b5fb0:	4553      	cmp	r3, sl
   b5fb2:	e75d      	b.n	b5e70 <loop+0x3f8>
              if(pointSide == nearestSide){
   b5fb4:	459a      	cmp	sl, r3
   b5fb6:	d02f      	beq.n	b6018 <loop+0x5a0>
                secondClosestIndex = checkpointCount - 2;
   b5fb8:	1ea6      	subs	r6, r4, #2
   b5fba:	4647      	mov	r7, r8
   b5fbc:	e7c2      	b.n	b5f44 <loop+0x4cc>
            if(pointSide == nearestSide){
   b5fbe:	459a      	cmp	sl, r3
   b5fc0:	d1fb      	bne.n	b5fba <loop+0x542>
              secondClosestIndex = closestIndex + 1;
   b5fc2:	f108 0601 	add.w	r6, r8, #1
   b5fc6:	e7f8      	b.n	b5fba <loop+0x542>
   b5fc8:	464f      	mov	r7, r9
   b5fca:	e758      	b.n	b5e7e <loop+0x406>
          if(currentRailway.loopIndex != -1 && closestIndex >= currentRailway.lowerLoopBound && closestIndex <= currentRailway.upperLoopBound && secondClosestIndex >= currentRailway.lowerLoopBound && secondClosestIndex <= currentRailway.upperLoopBound){
   b5fcc:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   b5fd0:	d00d      	beq.n	b5fee <loop+0x576>
   b5fd2:	9a36      	ldr	r2, [sp, #216]	; 0xd8
   b5fd4:	42ba      	cmp	r2, r7
   b5fd6:	dc0a      	bgt.n	b5fee <loop+0x576>
   b5fd8:	9b37      	ldr	r3, [sp, #220]	; 0xdc
   b5fda:	42bb      	cmp	r3, r7
   b5fdc:	db07      	blt.n	b5fee <loop+0x576>
   b5fde:	42b2      	cmp	r2, r6
   b5fe0:	dc05      	bgt.n	b5fee <loop+0x576>
   b5fe2:	42b3      	cmp	r3, r6
            trainDir = 6 - trainDir;
   b5fe4:	bfa2      	ittt	ge
   b5fe6:	9b03      	ldrge	r3, [sp, #12]
   b5fe8:	f1c3 0306 	rsbge	r3, r3, #6
   b5fec:	9303      	strge	r3, [sp, #12]
  { return __builtin_floorf(__x); }
   b5fee:	eeb0 0a48 	vmov.f32	s0, s16
   b5ff2:	f003 fe2b 	bl	b9c4c <floorf>
          currentRailway.outputs.at((int)floor(segmentPos) + 1) = trainDir;
   b5ff6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b5ffa:	a828      	add	r0, sp, #160	; 0xa0
   b5ffc:	ee17 1a90 	vmov	r1, s15
   b6000:	3101      	adds	r1, #1
   b6002:	f7fe fc9b 	bl	b493c <_ZNSt6vectorIiSaIiEE2atEj>
   b6006:	9b03      	ldr	r3, [sp, #12]
   b6008:	6003      	str	r3, [r0, #0]
          Serial.printlnf("%i, %i", closestIndex, secondClosestIndex);
   b600a:	f003 fa33 	bl	b9474 <_Z16_fetch_usbserialv>
   b600e:	492d      	ldr	r1, [pc, #180]	; (b60c4 <loop+0x64c>)
   b6010:	4633      	mov	r3, r6
   b6012:	463a      	mov	r2, r7
   b6014:	f7fe f9dc 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
        count++;
   b6018:	9b02      	ldr	r3, [sp, #8]
        String nextStation = train.key("nextStaNm").valueString();
   b601a:	a813      	add	r0, sp, #76	; 0x4c
        count++;
   b601c:	3301      	adds	r3, #1
   b601e:	9302      	str	r3, [sp, #8]
        String nextStation = train.key("nextStaNm").valueString();
   b6020:	f002 fd22 	bl	b8a68 <_ZN6StringD1Ev>
        JsonReference train = parser.getReference().key("ctatt").key("route").index(0).key("train").index(count);
   b6024:	a80a      	add	r0, sp, #40	; 0x28
   b6026:	f000 f9af 	bl	b6388 <_ZN13JsonReferenceD1Ev>
   b602a:	e59a      	b.n	b5b62 <loop+0xea>
   b602c:	a813      	add	r0, sp, #76	; 0x4c
   b602e:	f002 fd1b 	bl	b8a68 <_ZN6StringD1Ev>
   b6032:	a80a      	add	r0, sp, #40	; 0x28
   b6034:	f000 f9a8 	bl	b6388 <_ZN13JsonReferenceD1Ev>
      Wire.beginTransmission(sequenceArr[j]);
   b6038:	f003 fb6a 	bl	b9710 <_Z19__fetch_global_Wirev>
   b603c:	9b04      	ldr	r3, [sp, #16]
   b603e:	f853 1b04 	ldr.w	r1, [r3], #4
   b6042:	9304      	str	r3, [sp, #16]
   b6044:	f002 fb24 	bl	b8690 <_ZN7TwoWire17beginTransmissionEi>
      for(int i = 0; i < currentRailway.outputs.size(); i++){
   b6048:	2400      	movs	r4, #0
        currentRailway.outputs.at(i) = 0;
   b604a:	4626      	mov	r6, r4
   b604c:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   b6050:	1a9b      	subs	r3, r3, r2
      for(int i = 0; i < currentRailway.outputs.size(); i++){
   b6052:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b6056:	d212      	bcs.n	b607e <loop+0x606>
        Wire.write((char)currentRailway.outputs.at(i) + '0');
   b6058:	f003 fb5a 	bl	b9710 <_Z19__fetch_global_Wirev>
   b605c:	4621      	mov	r1, r4
   b605e:	4607      	mov	r7, r0
   b6060:	a828      	add	r0, sp, #160	; 0xa0
   b6062:	f7fe fc6b 	bl	b493c <_ZNSt6vectorIiSaIiEE2atEj>
   b6066:	7801      	ldrb	r1, [r0, #0]
   b6068:	4638      	mov	r0, r7
   b606a:	3130      	adds	r1, #48	; 0x30
   b606c:	f7fe f8ba 	bl	b41e4 <_ZN7TwoWire5writeEi.isra.0>
        currentRailway.outputs.at(i) = 0;
   b6070:	4621      	mov	r1, r4
   b6072:	a828      	add	r0, sp, #160	; 0xa0
   b6074:	f7fe fc62 	bl	b493c <_ZNSt6vectorIiSaIiEE2atEj>
      for(int i = 0; i < currentRailway.outputs.size(); i++){
   b6078:	3401      	adds	r4, #1
        currentRailway.outputs.at(i) = 0;
   b607a:	6006      	str	r6, [r0, #0]
      for(int i = 0; i < currentRailway.outputs.size(); i++){
   b607c:	e7e6      	b.n	b604c <loop+0x5d4>
      Wire.endTransmission();
   b607e:	f003 fb47 	bl	b9710 <_Z19__fetch_global_Wirev>
   b6082:	f002 fb0c 	bl	b869e <_ZN7TwoWire15endTransmissionEv>
      Serial.println();
   b6086:	f003 f9f5 	bl	b9474 <_Z16_fetch_usbserialv>
   b608a:	f002 fc82 	bl	b8992 <_ZN5Print7printlnEv>
      }
   b608e:	a807      	add	r0, sp, #28
   b6090:	f7fe fb18 	bl	b46c4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      Railway currentRailway = railways.at(j);
   b6094:	a81f      	add	r0, sp, #124	; 0x7c
   b6096:	f7fe fb46 	bl	b4726 <_ZN7RailwayD1Ev>
    for(int j = 0; j < railways.size(); j++){
   b609a:	3501      	adds	r5, #1
   b609c:	e500      	b.n	b5aa0 <loop+0x28>
    Serial.println();
   b609e:	f003 f9e9 	bl	b9474 <_Z16_fetch_usbserialv>
   b60a2:	f002 fc76 	bl	b8992 <_ZN5Print7printlnEv>
  while(userInput){
   b60a6:	e4f3      	b.n	b5a90 <loop+0x18>
  Serial.println();
   b60a8:	f003 f9e4 	bl	b9474 <_Z16_fetch_usbserialv>
   b60ac:	f002 fc71 	bl	b8992 <_ZN5Print7printlnEv>
  delay(1000);
   b60b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   b60b4:	b039      	add	sp, #228	; 0xe4
   b60b6:	ecbd 8b06 	vpop	{d8-d10}
   b60ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  delay(1000);
   b60be:	f001 b885 	b.w	b71cc <delay>
   b60c2:	bf00      	nop
   b60c4:	000bcd15 	.word	0x000bcd15

000b60c8 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b60c8:	b510      	push	{r4, lr}
   b60ca:	4604      	mov	r4, r0
   b60cc:	f003 f904 	bl	b92d8 <_ZN9TCPClientC1Ev>
{

}
   b60d0:	4620      	mov	r0, r4
   b60d2:	bd10      	pop	{r4, pc}

000b60d4 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b60d4:	b538      	push	{r3, r4, r5, lr}
   b60d6:	4604      	mov	r4, r0
   b60d8:	4615      	mov	r5, r2
    client.print(aHeaderName);
   b60da:	f002 fc53 	bl	b8984 <_ZN5Print5printEPKc>
    client.print(": ");
   b60de:	4905      	ldr	r1, [pc, #20]	; (b60f4 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   b60e0:	4620      	mov	r0, r4
   b60e2:	f002 fc4f 	bl	b8984 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b60e6:	4629      	mov	r1, r5
   b60e8:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b60ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
   b60ee:	f002 bc5c 	b.w	b89aa <_ZN5Print7printlnEPKc>
   b60f2:	bf00      	nop
   b60f4:	000bcb4e 	.word	0x000bcb4e

000b60f8 <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b60f8:	b538      	push	{r3, r4, r5, lr}
   b60fa:	4605      	mov	r5, r0
   b60fc:	4614      	mov	r4, r2
    client.print(aHeaderName);
   b60fe:	f002 fc41 	bl	b8984 <_ZN5Print5printEPKc>
    client.print(": ");
   b6102:	490b      	ldr	r1, [pc, #44]	; (b6130 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   b6104:	4628      	mov	r0, r5
   b6106:	f002 fc3d 	bl	b8984 <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
   b610a:	2c00      	cmp	r4, #0
   b610c:	da0d      	bge.n	b612a <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
   b610e:	212d      	movs	r1, #45	; 0x2d
   b6110:	4628      	mov	r0, r5
   b6112:	f002 fc3b 	bl	b898c <_ZN5Print5printEc>
            val = -n;
   b6116:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b6118:	4628      	mov	r0, r5
   b611a:	220a      	movs	r2, #10
   b611c:	f002 fc4f 	bl	b89be <_ZN5Print11printNumberEmh>
        n += println();
   b6120:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b6122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6126:	f002 bc34 	b.w	b8992 <_ZN5Print7printlnEv>
            val = n;
   b612a:	4621      	mov	r1, r4
   b612c:	e7f4      	b.n	b6118 <_ZN10HttpClient10sendHeaderEPKci+0x20>
   b612e:	bf00      	nop
   b6130:	000bcb4e 	.word	0x000bcb4e

000b6134 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b6134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6138:	460e      	mov	r6, r1
   b613a:	b091      	sub	sp, #68	; 0x44
   b613c:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b613e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6142:	6013      	str	r3, [r2, #0]
{
   b6144:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b6146:	2100      	movs	r1, #0
   b6148:	4630      	mov	r0, r6
   b614a:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b614e:	4617      	mov	r7, r2
   b6150:	f002 fd71 	bl	b8c36 <_ZNK6String6equalsEPKc>
   b6154:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b6158:	4603      	mov	r3, r0
   b615a:	b998      	cbnz	r0, b6184 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	const char * c_str() const { return buffer; }
   b615c:	f1be 0f00 	cmp.w	lr, #0
   b6160:	bf14      	ite	ne
   b6162:	4672      	movne	r2, lr
   b6164:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b6166:	6831      	ldr	r1, [r6, #0]
   b6168:	b292      	uxth	r2, r2
   b616a:	4620      	mov	r0, r4
   b616c:	f002 feb4 	bl	b8ed8 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b6170:	1e05      	subs	r5, r0, #0
   b6172:	bf18      	it	ne
   b6174:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   b6176:	b9c5      	cbnz	r5, b61aa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   b6178:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b617a:	b011      	add	sp, #68	; 0x44
   b617c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b6180:	f003 b860 	b.w	b9244 <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b6184:	4b76      	ldr	r3, [pc, #472]	; (b6360 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
   b6186:	930a      	str	r3, [sp, #40]	; 0x28
   b6188:	f106 0c14 	add.w	ip, r6, #20
   b618c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6190:	ad0b      	add	r5, sp, #44	; 0x2c
   b6192:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6194:	f8dc 3000 	ldr.w	r3, [ip]
   b6198:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b619a:	fa1f f28e 	uxth.w	r2, lr
   b619e:	2300      	movs	r3, #0
   b61a0:	a90a      	add	r1, sp, #40	; 0x28
   b61a2:	4620      	mov	r0, r4
   b61a4:	f002 ff78 	bl	b9098 <_ZN9TCPClient7connectE9IPAddresstm>
   b61a8:	e7e2      	b.n	b6170 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
   b61aa:	4649      	mov	r1, r9
   b61ac:	4620      	mov	r0, r4
   b61ae:	f002 fbe9 	bl	b8984 <_ZN5Print5printEPKc>
    client.print(" ");
   b61b2:	496c      	ldr	r1, [pc, #432]	; (b6364 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   b61b4:	4620      	mov	r0, r4
   b61b6:	f002 fbe5 	bl	b8984 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b61ba:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b61bc:	4620      	mov	r0, r4
   b61be:	f002 fbe1 	bl	b8984 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b61c2:	4969      	ldr	r1, [pc, #420]	; (b6368 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   b61c4:	4620      	mov	r0, r4
   b61c6:	f002 fbdd 	bl	b8984 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b61ca:	4968      	ldr	r1, [pc, #416]	; (b636c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
   b61cc:	4a68      	ldr	r2, [pc, #416]	; (b6370 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
   b61ce:	4620      	mov	r0, r4
   b61d0:	f7ff ff80 	bl	b60d4 <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b61d4:	2100      	movs	r1, #0
   b61d6:	4630      	mov	r0, r6
   b61d8:	f002 fd2d 	bl	b8c36 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b61dc:	b920      	cbnz	r0, b61e8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   b61de:	6832      	ldr	r2, [r6, #0]
   b61e0:	4964      	ldr	r1, [pc, #400]	; (b6374 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
   b61e2:	4620      	mov	r0, r4
   b61e4:	f7ff ff76 	bl	b60d4 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b61e8:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b61ec:	2100      	movs	r1, #0
   b61ee:	4650      	mov	r0, sl
   b61f0:	f002 fd21 	bl	b8c36 <_ZNK6String6equalsEPKc>
   b61f4:	b928      	cbnz	r0, b6202 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
   b61f6:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b61f8:	495f      	ldr	r1, [pc, #380]	; (b6378 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
   b61fa:	4620      	mov	r0, r4
   b61fc:	f7ff ff7c 	bl	b60f8 <_ZN10HttpClient10sendHeaderEPKci>
   b6200:	e006      	b.n	b6210 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b6202:	495e      	ldr	r1, [pc, #376]	; (b637c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
   b6204:	4648      	mov	r0, r9
   b6206:	f004 fbe7 	bl	ba9d8 <strcmp>
   b620a:	4602      	mov	r2, r0
   b620c:	2800      	cmp	r0, #0
   b620e:	d0f3      	beq.n	b61f8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
   b6210:	f1b8 0f00 	cmp.w	r8, #0
   b6214:	d00e      	beq.n	b6234 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
   b6216:	f8d8 1000 	ldr.w	r1, [r8]
   b621a:	b159      	cbz	r1, b6234 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
   b621c:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
   b6220:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b6222:	b122      	cbz	r2, b622e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
   b6224:	f7ff ff56 	bl	b60d4 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b6228:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
   b622c:	e7f3      	b.n	b6216 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
   b622e:	f002 fbbc 	bl	b89aa <_ZN5Print7printlnEPKc>
}
   b6232:	e7f9      	b.n	b6228 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
   b6234:	4620      	mov	r0, r4
   b6236:	f002 fbac 	bl	b8992 <_ZN5Print7printlnEv>
    client.flush();
   b623a:	4620      	mov	r0, r4
   b623c:	f002 fdac 	bl	b8d98 <_ZN9TCPClient5flushEv>
   b6240:	2100      	movs	r1, #0
   b6242:	4650      	mov	r0, sl
   b6244:	f002 fcf7 	bl	b8c36 <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b6248:	b918      	cbnz	r0, b6252 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
   b624a:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b624c:	4620      	mov	r0, r4
   b624e:	f002 fbac 	bl	b89aa <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b6252:	f104 0a1c 	add.w	sl, r4, #28
   b6256:	f44f 5220 	mov.w	r2, #10240	; 0x2800
   b625a:	2100      	movs	r1, #0
   b625c:	4650      	mov	r0, sl
   b625e:	f004 fb84 	bl	ba96a <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6262:	f000 fd97 	bl	b6d94 <HAL_Timer_Get_Milli_Seconds>
   b6266:	9001      	str	r0, [sp, #4]
   b6268:	f000 fd94 	bl	b6d94 <HAL_Timer_Get_Milli_Seconds>
    bool error = false;
   b626c:	f04f 0800 	mov.w	r8, #0
    unsigned int bufferPosition = 0;
   b6270:	4646      	mov	r6, r8
    } while (client.connected() && !timeout && !error);
   b6272:	f241 3b88 	movw	fp, #5000	; 0x1388
        while (client.available()) {
   b6276:	4620      	mov	r0, r4
   b6278:	f002 ff8a 	bl	b9190 <_ZN9TCPClient9availableEv>
   b627c:	b1e8      	cbz	r0, b62ba <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x186>
            char c = client.read();
   b627e:	4620      	mov	r0, r4
   b6280:	f002 fd70 	bl	b8d64 <_ZN9TCPClient4readEv>
   b6284:	4681      	mov	r9, r0
   b6286:	f000 fd85 	bl	b6d94 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b628a:	f242 73fe 	movw	r3, #10238	; 0x27fe
   b628e:	429e      	cmp	r6, r3
   b6290:	9001      	str	r0, [sp, #4]
   b6292:	d804      	bhi.n	b629e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = c;
   b6294:	19a3      	adds	r3, r4, r6
            char c = client.read();
   b6296:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
   b629a:	3601      	adds	r6, #1
        while (client.available()) {
   b629c:	e7eb      	b.n	b6276 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b629e:	f242 73ff 	movw	r3, #10239	; 0x27ff
   b62a2:	429e      	cmp	r6, r3
   b62a4:	d1f9      	bne.n	b629a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b62a6:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
   b62aa:	2200      	movs	r2, #0
   b62ac:	f883 281b 	strb.w	r2, [r3, #2075]	; 0x81b
                client.stop();
   b62b0:	4620      	mov	r0, r4
   b62b2:	f002 ffc7 	bl	b9244 <_ZN9TCPClient4stopEv>
                error = true;
   b62b6:	46a8      	mov	r8, r5
   b62b8:	e7ef      	b.n	b629a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b62ba:	19a3      	adds	r3, r4, r6
   b62bc:	7718      	strb	r0, [r3, #28]
   b62be:	f000 fd69 	bl	b6d94 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b62c2:	9b01      	ldr	r3, [sp, #4]
   b62c4:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b62c8:	f1b8 0f00 	cmp.w	r8, #0
   b62cc:	d104      	bne.n	b62d8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
   b62ce:	45d9      	cmp	r9, fp
   b62d0:	d802      	bhi.n	b62d8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
            delay(200);
   b62d2:	20c8      	movs	r0, #200	; 0xc8
   b62d4:	f000 ff7a 	bl	b71cc <delay>
    } while (client.connected() && !timeout && !error);
   b62d8:	4620      	mov	r0, r4
   b62da:	f002 fe7b 	bl	b8fd4 <_ZN9TCPClient9connectedEv>
   b62de:	b120      	cbz	r0, b62ea <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b62e0:	45d9      	cmp	r9, fp
   b62e2:	d802      	bhi.n	b62ea <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b62e4:	f1b8 0f00 	cmp.w	r8, #0
   b62e8:	d0c5      	beq.n	b6276 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
    client.stop();
   b62ea:	4620      	mov	r0, r4
   b62ec:	f002 ffaa 	bl	b9244 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b62f0:	4651      	mov	r1, sl
   b62f2:	a802      	add	r0, sp, #8
   b62f4:	f002 fc03 	bl	b8afe <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b62f8:	230c      	movs	r3, #12
   b62fa:	2209      	movs	r2, #9
   b62fc:	a902      	add	r1, sp, #8
   b62fe:	a806      	add	r0, sp, #24
   b6300:	f002 fcbe 	bl	b8c80 <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b6304:	491e      	ldr	r1, [pc, #120]	; (b6380 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x24c>)
   b6306:	a80a      	add	r0, sp, #40	; 0x28
   b6308:	f002 fbf9 	bl	b8afe <_ZN6StringC1EPK19__FlashStringHelper>
   b630c:	a90a      	add	r1, sp, #40	; 0x28
   b630e:	a802      	add	r0, sp, #8
   b6310:	f002 fcb2 	bl	b8c78 <_ZNK6String7indexOfERKS_>
   b6314:	4604      	mov	r4, r0
   b6316:	a80a      	add	r0, sp, #40	; 0x28
   b6318:	f002 fba6 	bl	b8a68 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b631c:	1c63      	adds	r3, r4, #1
   b631e:	d108      	bne.n	b6332 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fe>
    String statusCode = raw_response.substring(9,12);
   b6320:	a806      	add	r0, sp, #24
   b6322:	f002 fba1 	bl	b8a68 <_ZN6StringD1Ev>
    String raw_response(buffer);
   b6326:	a802      	add	r0, sp, #8
   b6328:	f002 fb9e 	bl	b8a68 <_ZN6StringD1Ev>
}
   b632c:	b011      	add	sp, #68	; 0x44
   b632e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aResponse.body = "";
   b6332:	1d3d      	adds	r5, r7, #4
   b6334:	4913      	ldr	r1, [pc, #76]	; (b6384 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x250>)
   b6336:	4628      	mov	r0, r5
   b6338:	f002 fc0f 	bl	b8b5a <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b633c:	1d22      	adds	r2, r4, #4
   b633e:	a902      	add	r1, sp, #8
   b6340:	a80a      	add	r0, sp, #40	; 0x28
   b6342:	f002 fcbd 	bl	b8cc0 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b6346:	a90a      	add	r1, sp, #40	; 0x28
   b6348:	4628      	mov	r0, r5
   b634a:	f002 fc42 	bl	b8bd2 <_ZN6String6concatERKS_>
   b634e:	a80a      	add	r0, sp, #40	; 0x28
   b6350:	f002 fb8a 	bl	b8a68 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b6354:	9806      	ldr	r0, [sp, #24]
   b6356:	f004 fac8 	bl	ba8ea <atoi>
   b635a:	6038      	str	r0, [r7, #0]
   b635c:	e7e0      	b.n	b6320 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ec>
   b635e:	bf00      	nop
   b6360:	000bd030 	.word	0x000bd030
   b6364:	000bd23f 	.word	0x000bd23f
   b6368:	000bcd74 	.word	0x000bcd74
   b636c:	000bcd86 	.word	0x000bcd86
   b6370:	000bcd80 	.word	0x000bcd80
   b6374:	000bcd91 	.word	0x000bcd91
   b6378:	000bcd96 	.word	0x000bcd96
   b637c:	000bcda5 	.word	0x000bcda5
   b6380:	000bcdaa 	.word	0x000bcdaa
   b6384:	000bcdae 	.word	0x000bcdae

000b6388 <_ZN13JsonReferenceD1Ev>:
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
}
   b6388:	4770      	bx	lr

000b638a <_ZN13JsonReferenceD0Ev>:
JsonReference::~JsonReference() {
   b638a:	b510      	push	{r4, lr}
}
   b638c:	210c      	movs	r1, #12
JsonReference::~JsonReference() {
   b638e:	4604      	mov	r4, r0
}
   b6390:	f7fd fe87 	bl	b40a2 <_ZdlPvj>
   b6394:	4620      	mov	r0, r4
   b6396:	bd10      	pop	{r4, pc}

000b6398 <_ZN10JsonBufferD1Ev>:
JsonBuffer::~JsonBuffer() {
   b6398:	b510      	push	{r4, lr}
   b639a:	4b05      	ldr	r3, [pc, #20]	; (b63b0 <_ZN10JsonBufferD1Ev+0x18>)
   b639c:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b639e:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b63a0:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b63a2:	b91b      	cbnz	r3, b63ac <_ZN10JsonBufferD1Ev+0x14>
   b63a4:	6840      	ldr	r0, [r0, #4]
   b63a6:	b108      	cbz	r0, b63ac <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b63a8:	f000 fec8 	bl	b713c <free>
}
   b63ac:	4620      	mov	r0, r4
   b63ae:	bd10      	pop	{r4, pc}
   b63b0:	000bcdbc 	.word	0x000bcdbc

000b63b4 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b63b4:	b510      	push	{r4, lr}
   b63b6:	4604      	mov	r4, r0
}
   b63b8:	f7ff ffee 	bl	b6398 <_ZN10JsonBufferD1Ev>
   b63bc:	4620      	mov	r0, r4
   b63be:	2114      	movs	r1, #20
   b63c0:	f7fd fe6f 	bl	b40a2 <_ZdlPvj>
   b63c4:	4620      	mov	r0, r4
   b63c6:	bd10      	pop	{r4, pc}

000b63c8 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b63c8:	b510      	push	{r4, lr}
   b63ca:	4b07      	ldr	r3, [pc, #28]	; (b63e8 <_ZN10JsonParserD1Ev+0x20>)
   b63cc:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b63ce:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b63d0:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b63d2:	b91b      	cbnz	r3, b63dc <_ZN10JsonParserD1Ev+0x14>
   b63d4:	6940      	ldr	r0, [r0, #20]
   b63d6:	b108      	cbz	r0, b63dc <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b63d8:	f000 feb0 	bl	b713c <free>
JsonParser::~JsonParser() {
   b63dc:	4620      	mov	r0, r4
   b63de:	f7ff ffdb 	bl	b6398 <_ZN10JsonBufferD1Ev>
}
   b63e2:	4620      	mov	r0, r4
   b63e4:	bd10      	pop	{r4, pc}
   b63e6:	bf00      	nop
   b63e8:	000bcdcc 	.word	0x000bcdcc

000b63ec <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b63ec:	b510      	push	{r4, lr}
   b63ee:	4604      	mov	r4, r0
}
   b63f0:	f7ff ffea 	bl	b63c8 <_ZN10JsonParserD1Ev>
   b63f4:	4620      	mov	r0, r4
   b63f6:	212c      	movs	r1, #44	; 0x2c
   b63f8:	f7fd fe53 	bl	b40a2 <_ZdlPvj>
   b63fc:	4620      	mov	r0, r4
   b63fe:	bd10      	pop	{r4, pc}

000b6400 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b6400:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b6402:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b6404:	4604      	mov	r4, r0
   b6406:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b6408:	b10b      	cbz	r3, b640e <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b640a:	2000      	movs	r0, #0
}
   b640c:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b640e:	6840      	ldr	r0, [r0, #4]
   b6410:	b138      	cbz	r0, b6422 <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b6412:	f000 fe9b 	bl	b714c <realloc>
		if (newBuffer) {
   b6416:	2800      	cmp	r0, #0
   b6418:	d0f7      	beq.n	b640a <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b641a:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b641e:	2001      	movs	r0, #1
   b6420:	e7f4      	b.n	b640c <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b6422:	4608      	mov	r0, r1
   b6424:	f000 fe82 	bl	b712c <malloc>
   b6428:	e7f5      	b.n	b6416 <_ZN10JsonBuffer8allocateEj+0x16>

000b642a <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b642a:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b642c:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b642e:	460e      	mov	r6, r1
   b6430:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b6432:	18d1      	adds	r1, r2, r3
   b6434:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b6436:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b6438:	b172      	cbz	r2, b6458 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b643a:	6882      	ldr	r2, [r0, #8]
   b643c:	428a      	cmp	r2, r1
   b643e:	d30b      	bcc.n	b6458 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b6440:	6860      	ldr	r0, [r4, #4]
   b6442:	68e3      	ldr	r3, [r4, #12]
   b6444:	462a      	mov	r2, r5
   b6446:	4631      	mov	r1, r6
   b6448:	4418      	add	r0, r3
   b644a:	f004 fa66 	bl	ba91a <memcpy>
	offset += dataLen;
   b644e:	68e2      	ldr	r2, [r4, #12]
   b6450:	442a      	add	r2, r5
   b6452:	60e2      	str	r2, [r4, #12]
	return true;
   b6454:	2001      	movs	r0, #1
}
   b6456:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b6458:	4620      	mov	r0, r4
   b645a:	f7ff ffd1 	bl	b6400 <_ZN10JsonBuffer8allocateEj>
   b645e:	2800      	cmp	r0, #0
   b6460:	d1ee      	bne.n	b6440 <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b6462:	e7f8      	b.n	b6456 <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b6464 <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b6464:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b6466:	2100      	movs	r1, #0
   b6468:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b646a:	b123      	cbz	r3, b6476 <_ZN10JsonBuffer5clearEv+0x12>
   b646c:	6882      	ldr	r2, [r0, #8]
   b646e:	b112      	cbz	r2, b6476 <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b6470:	4618      	mov	r0, r3
   b6472:	f004 ba7a 	b.w	ba96a <memset>
}
   b6476:	4770      	bx	lr

000b6478 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b6478:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b647a:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b647e:	2200      	movs	r2, #0
   b6480:	60c2      	str	r2, [r0, #12]
   b6482:	2201      	movs	r2, #1
   b6484:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b6486:	6143      	str	r3, [r0, #20]
   b6488:	4a02      	ldr	r2, [pc, #8]	; (b6494 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b648a:	9b02      	ldr	r3, [sp, #8]
   b648c:	6002      	str	r2, [r0, #0]
   b648e:	61c3      	str	r3, [r0, #28]
}
   b6490:	bd10      	pop	{r4, pc}
   b6492:	bf00      	nop
   b6494:	000bcdcc 	.word	0x000bcdcc

000b6498 <_ZNK10JsonParser12getReferenceEv>:
	if (tokens < tokensEnd) {
   b6498:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   b649c:	429a      	cmp	r2, r3
   b649e:	4b04      	ldr	r3, [pc, #16]	; (b64b0 <_ZNK10JsonParser12getReferenceEv+0x18>)

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b64a0:	bf38      	it	cc
   b64a2:	6082      	strcc	r2, [r0, #8]
   b64a4:	e9c0 3100 	strd	r3, r1, [r0]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b64a8:	bf24      	itt	cs
   b64aa:	2300      	movcs	r3, #0
   b64ac:	6083      	strcs	r3, [r0, #8]
}
   b64ae:	4770      	bx	lr
   b64b0:	000bcddc 	.word	0x000bcddc

000b64b4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b64b4:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b64b6:	6813      	ldr	r3, [r2, #0]
   b64b8:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b64ba:	6813      	ldr	r3, [r2, #0]
   b64bc:	f103 0410 	add.w	r4, r3, #16
   b64c0:	6014      	str	r4, [r2, #0]
   b64c2:	6986      	ldr	r6, [r0, #24]
   b64c4:	42b4      	cmp	r4, r6
   b64c6:	d20a      	bcs.n	b64de <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b64c8:	699b      	ldr	r3, [r3, #24]
   b64ca:	688c      	ldr	r4, [r1, #8]
   b64cc:	42a3      	cmp	r3, r4
   b64ce:	da01      	bge.n	b64d4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b64d0:	42ab      	cmp	r3, r5
   b64d2:	ddf2      	ble.n	b64ba <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b64d4:	42a3      	cmp	r3, r4
   b64d6:	bfcc      	ite	gt
   b64d8:	2000      	movgt	r0, #0
   b64da:	2001      	movle	r0, #1
   b64dc:	e000      	b.n	b64e0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b64de:	2000      	movs	r0, #0
}
   b64e0:	bd70      	pop	{r4, r5, r6, pc}

000b64e2 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b64e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b64e6:	9d08      	ldr	r5, [sp, #32]
   b64e8:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b64ea:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b64ee:	4604      	mov	r4, r0
   b64f0:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b64f2:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b64f4:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b64f6:	9801      	ldr	r0, [sp, #4]
   b64f8:	69a3      	ldr	r3, [r4, #24]
   b64fa:	4283      	cmp	r3, r0
   b64fc:	d91a      	bls.n	b6534 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b64fe:	6882      	ldr	r2, [r0, #8]
   b6500:	688b      	ldr	r3, [r1, #8]
   b6502:	429a      	cmp	r2, r3
   b6504:	da16      	bge.n	b6534 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b6506:	42ae      	cmp	r6, r5
   b6508:	d10b      	bne.n	b6522 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b650a:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b650c:	aa01      	add	r2, sp, #4
   b650e:	4620      	mov	r0, r4
   b6510:	f7ff ffd0 	bl	b64b4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b6514:	b128      	cbz	r0, b6522 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b6516:	9b01      	ldr	r3, [sp, #4]
   b6518:	f8c8 3000 	str.w	r3, [r8]
}
   b651c:	b002      	add	sp, #8
   b651e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b6522:	aa01      	add	r2, sp, #4
   b6524:	4620      	mov	r0, r4
   b6526:	f7ff ffc5 	bl	b64b4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b652a:	4620      	mov	r0, r4
		index++;
   b652c:	3601      	adds	r6, #1
		skipObject(container, token);
   b652e:	f7ff ffc1 	bl	b64b4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b6532:	e7e0      	b.n	b64f6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b6534:	2000      	movs	r0, #0
   b6536:	e7f1      	b.n	b651c <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b6538 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>:
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b6538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b653a:	461f      	mov	r7, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b653c:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b6540:	4604      	mov	r4, r0
   b6542:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b6544:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b6546:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b6548:	9b01      	ldr	r3, [sp, #4]
   b654a:	69a2      	ldr	r2, [r4, #24]
   b654c:	429a      	cmp	r2, r3
   b654e:	d90f      	bls.n	b6570 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
   b6550:	6898      	ldr	r0, [r3, #8]
   b6552:	688a      	ldr	r2, [r1, #8]
   b6554:	4290      	cmp	r0, r2
   b6556:	da0b      	bge.n	b6570 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
		if (desiredIndex == index) {
   b6558:	42b5      	cmp	r5, r6
   b655a:	d103      	bne.n	b6564 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x2c>
			value = token;
   b655c:	603b      	str	r3, [r7, #0]
			return true;
   b655e:	2001      	movs	r0, #1
}
   b6560:	b003      	add	sp, #12
   b6562:	bdf0      	pop	{r4, r5, r6, r7, pc}
		skipObject(container, token);
   b6564:	aa01      	add	r2, sp, #4
   b6566:	4620      	mov	r0, r4
		index++;
   b6568:	3501      	adds	r5, #1
		skipObject(container, token);
   b656a:	f7ff ffa3 	bl	b64b4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b656e:	e7eb      	b.n	b6548 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x10>
	return false;
   b6570:	2000      	movs	r0, #0
   b6572:	e7f5      	b.n	b6560 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x28>

000b6574 <_ZNK13JsonReference5indexEj>:
	else {
		return JsonReference(parser);
	}
}

JsonReference JsonReference::index(size_t index) const {
   b6574:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6576:	460d      	mov	r5, r1
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b6578:	6889      	ldr	r1, [r1, #8]
   b657a:	4e0a      	ldr	r6, [pc, #40]	; (b65a4 <_ZNK13JsonReference5indexEj+0x30>)
JsonReference JsonReference::index(size_t index) const {
   b657c:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b657e:	b161      	cbz	r1, b659a <_ZNK13JsonReference5indexEj+0x26>
   b6580:	6868      	ldr	r0, [r5, #4]
   b6582:	ab01      	add	r3, sp, #4
   b6584:	f7ff ffd8 	bl	b6538 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>
   b6588:	b138      	cbz	r0, b659a <_ZNK13JsonReference5indexEj+0x26>
		return JsonReference(parser, newToken);
   b658a:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b658c:	e9c4 6300 	strd	r6, r3, [r4]
   b6590:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b6592:	60a3      	str	r3, [r4, #8]
	}
	else {
		return JsonReference(parser);
	}
}
   b6594:	4620      	mov	r0, r4
   b6596:	b002      	add	sp, #8
   b6598:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b659a:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b659c:	e9c4 6300 	strd	r6, r3, [r4]
   b65a0:	2300      	movs	r3, #0
   b65a2:	e7f6      	b.n	b6592 <_ZNK13JsonReference5indexEj+0x1e>
   b65a4:	000bcddc 	.word	0x000bcddc

000b65a8 <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   b65a8:	b510      	push	{r4, lr}
   b65aa:	4604      	mov	r4, r0
	if (str) {
   b65ac:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b65ae:	460b      	mov	r3, r1
	if (str) {
   b65b0:	b128      	cbz	r0, b65be <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b65b2:	f002 fb12 	bl	b8bda <_ZN6String6concatEc>
	}
	else {
		if (buf && length < (bufLen - 1)) {
			buf[length] = ch;
		}
		length++;
   b65b6:	68e3      	ldr	r3, [r4, #12]
   b65b8:	3301      	adds	r3, #1
   b65ba:	60e3      	str	r3, [r4, #12]
	}
}
   b65bc:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b65be:	6860      	ldr	r0, [r4, #4]
   b65c0:	2800      	cmp	r0, #0
   b65c2:	d0f8      	beq.n	b65b6 <_ZN16JsonParserString6appendEc+0xe>
   b65c4:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b65c8:	3a01      	subs	r2, #1
   b65ca:	428a      	cmp	r2, r1
			buf[length] = ch;
   b65cc:	bf88      	it	hi
   b65ce:	5443      	strbhi	r3, [r0, r1]
   b65d0:	e7f1      	b.n	b65b6 <_ZN16JsonParserString6appendEc+0xe>

000b65d2 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b65d2:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b65d4:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b65d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b65d8:	4608      	mov	r0, r1
		str.append((char)unicode);
   b65da:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b65dc:	d804      	bhi.n	b65e8 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b65de:	b003      	add	sp, #12
   b65e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b65e4:	f7ff bfe0 	b.w	b65a8 <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b65e8:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b65ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b65f0:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b65f4:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b65f8:	d207      	bcs.n	b660a <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b65fa:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b65fe:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b6600:	f7ff ffd2 	bl	b65a8 <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b6604:	9801      	ldr	r0, [sp, #4]
   b6606:	4621      	mov	r1, r4
   b6608:	e7e9      	b.n	b65de <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b660a:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b660c:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b6610:	9001      	str	r0, [sp, #4]
   b6612:	f7ff ffc9 	bl	b65a8 <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b6616:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b661a:	9801      	ldr	r0, [sp, #4]
   b661c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b6620:	e7ee      	b.n	b6600 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>
	...

000b6624 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b6624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b6628:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b662a:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b662c:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b66fc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b6630:	4680      	mov	r8, r0
   b6632:	460f      	mov	r7, r1
   b6634:	4615      	mov	r5, r2
			escape = false;
   b6636:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b6638:	68b8      	ldr	r0, [r7, #8]
   b663a:	42b0      	cmp	r0, r6
   b663c:	dd5a      	ble.n	b66f4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b663e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b6642:	5d99      	ldrb	r1, [r3, r6]
   b6644:	199a      	adds	r2, r3, r6
		if (escape) {
   b6646:	2c00      	cmp	r4, #0
   b6648:	d04b      	beq.n	b66e2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b664a:	2975      	cmp	r1, #117	; 0x75
   b664c:	d805      	bhi.n	b665a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b664e:	296d      	cmp	r1, #109	; 0x6d
   b6650:	d807      	bhi.n	b6662 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b6652:	2962      	cmp	r1, #98	; 0x62
   b6654:	d01e      	beq.n	b6694 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b6656:	2966      	cmp	r1, #102	; 0x66
   b6658:	d01e      	beq.n	b6698 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b665a:	4628      	mov	r0, r5
   b665c:	f7ff ffa4 	bl	b65a8 <_ZN16JsonParserString6appendEc>
				break;
   b6660:	e03d      	b.n	b66de <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b6662:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b6666:	2c07      	cmp	r4, #7
   b6668:	d8f7      	bhi.n	b665a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b666a:	f20f 0c08 	addw	ip, pc, #8
   b666e:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b6672:	bf00      	nop
   b6674:	000b669d 	.word	0x000b669d
   b6678:	000b665b 	.word	0x000b665b
   b667c:	000b665b 	.word	0x000b665b
   b6680:	000b665b 	.word	0x000b665b
   b6684:	000b66a1 	.word	0x000b66a1
   b6688:	000b665b 	.word	0x000b665b
   b668c:	000b66a5 	.word	0x000b66a5
   b6690:	000b66a9 	.word	0x000b66a9
				str.append('\b');
   b6694:	2108      	movs	r1, #8
   b6696:	e7e0      	b.n	b665a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b6698:	210c      	movs	r1, #12
   b669a:	e7de      	b.n	b665a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b669c:	210a      	movs	r1, #10
   b669e:	e7dc      	b.n	b665a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b66a0:	210d      	movs	r1, #13
   b66a2:	e7da      	b.n	b665a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b66a4:	2109      	movs	r1, #9
   b66a6:	e7d8      	b.n	b665a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b66a8:	1d31      	adds	r1, r6, #4
   b66aa:	4288      	cmp	r0, r1
   b66ac:	dd17      	ble.n	b66de <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b66ae:	a902      	add	r1, sp, #8
   b66b0:	3304      	adds	r3, #4
   b66b2:	4433      	add	r3, r6
   b66b4:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b66b6:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b66ba:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b66be:	429a      	cmp	r2, r3
   b66c0:	d1f9      	bne.n	b66b6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b66c2:	aa01      	add	r2, sp, #4
   b66c4:	4651      	mov	r1, sl
					tmp[4] = 0;
   b66c6:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b66ca:	f000 fd47 	bl	b715c <sscanf>
   b66ce:	2801      	cmp	r0, #1
   b66d0:	d105      	bne.n	b66de <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b66d2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b66d6:	4629      	mov	r1, r5
   b66d8:	f7ff ff7b 	bl	b65d2 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b66dc:	3605      	adds	r6, #5
			escape = false;
   b66de:	2400      	movs	r4, #0
   b66e0:	e004      	b.n	b66ec <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b66e2:	295c      	cmp	r1, #92	; 0x5c
   b66e4:	d004      	beq.n	b66f0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b66e6:	4628      	mov	r0, r5
   b66e8:	f7ff ff5e 	bl	b65a8 <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b66ec:	3601      	adds	r6, #1
   b66ee:	e7a3      	b.n	b6638 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b66f0:	2401      	movs	r4, #1
   b66f2:	e7fb      	b.n	b66ec <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b66f4:	2001      	movs	r0, #1
   b66f6:	b004      	add	sp, #16
   b66f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b66fc:	000bcdaf 	.word	0x000bcdaf

000b6700 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b6700:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6702:	460c      	mov	r4, r1
   b6704:	4606      	mov	r6, r0
	result = "";
   b6706:	490c      	ldr	r1, [pc, #48]	; (b6738 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b6708:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b670a:	4615      	mov	r5, r2
	result = "";
   b670c:	f002 fa25 	bl	b8b5a <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b6710:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b6714:	1ac9      	subs	r1, r1, r3
   b6716:	3101      	adds	r1, #1
   b6718:	4628      	mov	r0, r5
   b671a:	f002 f9c3 	bl	b8aa4 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b671e:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b6720:	466a      	mov	r2, sp
   b6722:	4621      	mov	r1, r4
   b6724:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b6726:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b672a:	9500      	str	r5, [sp, #0]
   b672c:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b672e:	f7ff ff79 	bl	b6624 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b6732:	b004      	add	sp, #16
   b6734:	bd70      	pop	{r4, r5, r6, pc}
   b6736:	bf00      	nop
   b6738:	000bcdae 	.word	0x000bcdae

000b673c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b673c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6740:	b089      	sub	sp, #36	; 0x24
   b6742:	4605      	mov	r5, r0
   b6744:	4688      	mov	r8, r1
	String keyName;
   b6746:	a804      	add	r0, sp, #16
   b6748:	4912      	ldr	r1, [pc, #72]	; (b6794 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b674a:	4616      	mov	r6, r2
   b674c:	4699      	mov	r9, r3
	String keyName;
   b674e:	f002 f9d6 	bl	b8afe <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b6752:	2700      	movs	r7, #0
   b6754:	9700      	str	r7, [sp, #0]
   b6756:	464b      	mov	r3, r9
   b6758:	aa03      	add	r2, sp, #12
   b675a:	4641      	mov	r1, r8
   b675c:	4628      	mov	r0, r5
   b675e:	f7ff fec0 	bl	b64e2 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b6762:	4604      	mov	r4, r0
   b6764:	b170      	cbz	r0, b6784 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b6766:	9903      	ldr	r1, [sp, #12]
   b6768:	aa04      	add	r2, sp, #16
   b676a:	4628      	mov	r0, r5
   b676c:	f7ff ffc8 	bl	b6700 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b6770:	4604      	mov	r4, r0
   b6772:	b908      	cbnz	r0, b6778 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b6774:	3701      	adds	r7, #1
   b6776:	e7ed      	b.n	b6754 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b6778:	4631      	mov	r1, r6
   b677a:	a804      	add	r0, sp, #16
   b677c:	f002 fa5b 	bl	b8c36 <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b6780:	2800      	cmp	r0, #0
   b6782:	d0f7      	beq.n	b6774 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b6784:	a804      	add	r0, sp, #16
   b6786:	f002 f96f 	bl	b8a68 <_ZN6StringD1Ev>
}
   b678a:	4620      	mov	r0, r4
   b678c:	b009      	add	sp, #36	; 0x24
   b678e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b6792:	bf00      	nop
   b6794:	000bcdae 	.word	0x000bcdae

000b6798 <_ZNK13JsonReference3keyEPKc>:
JsonReference JsonReference::key(const char *name) const {
   b6798:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b679a:	460d      	mov	r5, r1
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b679c:	6889      	ldr	r1, [r1, #8]
   b679e:	4e0a      	ldr	r6, [pc, #40]	; (b67c8 <_ZNK13JsonReference3keyEPKc+0x30>)
JsonReference JsonReference::key(const char *name) const {
   b67a0:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b67a2:	b161      	cbz	r1, b67be <_ZNK13JsonReference3keyEPKc+0x26>
   b67a4:	6868      	ldr	r0, [r5, #4]
   b67a6:	ab01      	add	r3, sp, #4
   b67a8:	f7ff ffc8 	bl	b673c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b67ac:	b138      	cbz	r0, b67be <_ZNK13JsonReference3keyEPKc+0x26>
		return JsonReference(parser, newToken);
   b67ae:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b67b0:	e9c4 6300 	strd	r6, r3, [r4]
   b67b4:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b67b6:	60a3      	str	r3, [r4, #8]
}
   b67b8:	4620      	mov	r0, r4
   b67ba:	b002      	add	sp, #8
   b67bc:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b67be:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b67c0:	e9c4 6300 	strd	r6, r3, [r4]
   b67c4:	2300      	movs	r3, #0
   b67c6:	e7f6      	b.n	b67b6 <_ZNK13JsonReference3keyEPKc+0x1e>
   b67c8:	000bcddc 	.word	0x000bcddc

000b67cc <_ZNK13JsonReference11valueStringEv>:
String JsonReference::valueString() const {
   b67cc:	b538      	push	{r3, r4, r5, lr}
   b67ce:	460d      	mov	r5, r1
	String result;
   b67d0:	4905      	ldr	r1, [pc, #20]	; (b67e8 <_ZNK13JsonReference11valueStringEv+0x1c>)
String JsonReference::valueString() const {
   b67d2:	4604      	mov	r4, r0
	String result;
   b67d4:	f002 f993 	bl	b8afe <_ZN6StringC1EPK19__FlashStringHelper>
	 * There are also type-specific versions like valueBool that return the value, instead of having to pass an object
	 * to hold the value, as in this call.
	 */
	template<class T>
	bool value(T &result) const {
		if (token && parser->getTokenValue(token, result)) {
   b67d8:	68a9      	ldr	r1, [r5, #8]
   b67da:	b119      	cbz	r1, b67e4 <_ZNK13JsonReference11valueStringEv+0x18>
   b67dc:	6868      	ldr	r0, [r5, #4]
   b67de:	4622      	mov	r2, r4
   b67e0:	f7ff ff8e 	bl	b6700 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
}
   b67e4:	4620      	mov	r0, r4
   b67e6:	bd38      	pop	{r3, r4, r5, pc}
   b67e8:	000bcdae 	.word	0x000bcdae

000b67ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b67ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b67f0:	6844      	ldr	r4, [r0, #4]
   b67f2:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b67f6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b67fa:	f8d0 e000 	ldr.w	lr, [r0]
   b67fe:	4596      	cmp	lr, r2
   b6800:	f080 81b9 	bcs.w	b6b76 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b6804:	f811 800e 	ldrb.w	r8, [r1, lr]
   b6808:	f1b8 0f00 	cmp.w	r8, #0
   b680c:	f000 81b3 	beq.w	b6b76 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b6810:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b6814:	f000 8098 	beq.w	b6948 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b6818:	d833      	bhi.n	b6882 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b681a:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b681e:	f000 80a6 	beq.w	b696e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b6822:	d810      	bhi.n	b6846 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b6824:	f1a8 0809 	sub.w	r8, r8, #9
   b6828:	fa5f f888 	uxtb.w	r8, r8
   b682c:	f1b8 0f17 	cmp.w	r8, #23
   b6830:	d80d      	bhi.n	b684e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b6832:	4d9f      	ldr	r5, [pc, #636]	; (b6ab0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b6834:	fa0c f808 	lsl.w	r8, ip, r8
   b6838:	ea18 0f05 	tst.w	r8, r5
   b683c:	d007      	beq.n	b684e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b683e:	6805      	ldr	r5, [r0, #0]
   b6840:	3501      	adds	r5, #1
   b6842:	6005      	str	r5, [r0, #0]
   b6844:	e7d9      	b.n	b67fa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b6846:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b684a:	f000 8133 	beq.w	b6ab4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b684e:	f8d0 8000 	ldr.w	r8, [r0]
   b6852:	4542      	cmp	r2, r8
   b6854:	d90e      	bls.n	b6874 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b6856:	f811 5008 	ldrb.w	r5, [r1, r8]
   b685a:	b15d      	cbz	r5, b6874 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b685c:	2d3a      	cmp	r5, #58	; 0x3a
   b685e:	f200 8169 	bhi.w	b6b34 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b6862:	2d1f      	cmp	r5, #31
   b6864:	f200 8151 	bhi.w	b6b0a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b6868:	2d0a      	cmp	r5, #10
   b686a:	f200 8160 	bhi.w	b6b2e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b686e:	2d08      	cmp	r5, #8
   b6870:	f240 8156 	bls.w	b6b20 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b6874:	2b00      	cmp	r3, #0
   b6876:	f040 8162 	bne.w	b6b3e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b687a:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b687e:	6005      	str	r5, [r0, #0]
   b6880:	e0a5      	b.n	b69ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b6882:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b6886:	d037      	beq.n	b68f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b6888:	d82e      	bhi.n	b68e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b688a:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b688e:	d033      	beq.n	b68f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b6890:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b6894:	d1db      	bne.n	b684e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b6896:	2b00      	cmp	r3, #0
   b6898:	d0d1      	beq.n	b683e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b689a:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b689e:	6845      	ldr	r5, [r0, #4]
   b68a0:	3d01      	subs	r5, #1
   b68a2:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b68a6:	2d00      	cmp	r5, #0
   b68a8:	db55      	blt.n	b6956 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b68aa:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b68ae:	3701      	adds	r7, #1
   b68b0:	d04d      	beq.n	b694e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b68b2:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b68b6:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b68ba:	d148      	bne.n	b694e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b68bc:	f898 b000 	ldrb.w	fp, [r8]
   b68c0:	45cb      	cmp	fp, r9
   b68c2:	d14b      	bne.n	b695c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b68c4:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b68c8:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b68cc:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b68d0:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b68d4:	f8de 7004 	ldr.w	r7, [lr, #4]
   b68d8:	3701      	adds	r7, #1
   b68da:	d042      	beq.n	b6962 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b68dc:	f8de 7008 	ldr.w	r7, [lr, #8]
   b68e0:	3701      	adds	r7, #1
   b68e2:	d13e      	bne.n	b6962 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b68e4:	6085      	str	r5, [r0, #8]
				break;
   b68e6:	e7aa      	b.n	b683e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b68e8:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b68ec:	d1af      	bne.n	b684e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b68ee:	2b00      	cmp	r3, #0
   b68f0:	d0a5      	beq.n	b683e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b68f2:	f04f 0901 	mov.w	r9, #1
   b68f6:	e7d2      	b.n	b689e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b68f8:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b68fa:	2b00      	cmp	r3, #0
   b68fc:	d09f      	beq.n	b683e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b68fe:	6845      	ldr	r5, [r0, #4]
   b6900:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b6902:	42af      	cmp	r7, r5
   b6904:	d94a      	bls.n	b699c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b6906:	f105 0e01 	add.w	lr, r5, #1
   b690a:	f8c0 e004 	str.w	lr, [r0, #4]
   b690e:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b6912:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b6916:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b691a:	2500      	movs	r5, #0
   b691c:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b6920:	6885      	ldr	r5, [r0, #8]
   b6922:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b6924:	bf1f      	itttt	ne
   b6926:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b692a:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b692e:	3501      	addne	r5, #1
   b6930:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b6934:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b6938:	bf0c      	ite	eq
   b693a:	2501      	moveq	r5, #1
   b693c:	2502      	movne	r5, #2
   b693e:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b6942:	6805      	ldr	r5, [r0, #0]
   b6944:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b6948:	6845      	ldr	r5, [r0, #4]
   b694a:	3d01      	subs	r5, #1
   b694c:	e7ca      	b.n	b68e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b694e:	3d01      	subs	r5, #1
   b6950:	f1a8 0810 	sub.w	r8, r8, #16
   b6954:	e7a7      	b.n	b68a6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b6956:	3501      	adds	r5, #1
   b6958:	f47f af71 	bne.w	b683e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b695c:	f06f 0401 	mvn.w	r4, #1
   b6960:	e01e      	b.n	b69a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b6962:	3d01      	subs	r5, #1
   b6964:	1c6f      	adds	r7, r5, #1
   b6966:	f1ae 0e10 	sub.w	lr, lr, #16
   b696a:	d1b3      	bne.n	b68d4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b696c:	e767      	b.n	b683e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b696e:	f10e 0901 	add.w	r9, lr, #1
   b6972:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b6976:	f8d0 8000 	ldr.w	r8, [r0]
   b697a:	4542      	cmp	r2, r8
   b697c:	f240 8093 	bls.w	b6aa6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b6980:	f811 5008 	ldrb.w	r5, [r1, r8]
   b6984:	2d00      	cmp	r5, #0
   b6986:	f000 808e 	beq.w	b6aa6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b698a:	2d22      	cmp	r5, #34	; 0x22
   b698c:	d130      	bne.n	b69f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b698e:	b1f3      	cbz	r3, b69ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b6990:	6845      	ldr	r5, [r0, #4]
   b6992:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b6994:	42af      	cmp	r7, r5
   b6996:	d806      	bhi.n	b69a6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b6998:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b699c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b69a0:	4620      	mov	r0, r4
   b69a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b69a6:	f105 0e01 	add.w	lr, r5, #1
   b69aa:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b69ae:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b69b2:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b69b6:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b69ba:	2700      	movs	r7, #0
   b69bc:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b69be:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b69c2:	f04f 0a03 	mov.w	sl, #3
   b69c6:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b69ca:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b69ce:	6885      	ldr	r5, [r0, #8]
   b69d0:	1c6f      	adds	r7, r5, #1
				count++;
   b69d2:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b69d6:	f43f af32 	beq.w	b683e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b69da:	2b00      	cmp	r3, #0
   b69dc:	f43f af2f 	beq.w	b683e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b69e0:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b69e4:	f8de 500c 	ldr.w	r5, [lr, #12]
   b69e8:	3501      	adds	r5, #1
   b69ea:	f8ce 500c 	str.w	r5, [lr, #12]
   b69ee:	e726      	b.n	b683e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b69f0:	2d5c      	cmp	r5, #92	; 0x5c
   b69f2:	d111      	bne.n	b6a18 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b69f4:	f108 0501 	add.w	r5, r8, #1
   b69f8:	42aa      	cmp	r2, r5
   b69fa:	d90d      	bls.n	b6a18 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b69fc:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b69fe:	5d4d      	ldrb	r5, [r1, r5]
   b6a00:	2d75      	cmp	r5, #117	; 0x75
   b6a02:	d82b      	bhi.n	b6a5c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b6a04:	2d6d      	cmp	r5, #109	; 0x6d
   b6a06:	d80b      	bhi.n	b6a20 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b6a08:	2d66      	cmp	r5, #102	; 0x66
   b6a0a:	d827      	bhi.n	b6a5c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b6a0c:	2d5b      	cmp	r5, #91	; 0x5b
   b6a0e:	d81d      	bhi.n	b6a4c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b6a10:	2d22      	cmp	r5, #34	; 0x22
   b6a12:	d001      	beq.n	b6a18 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b6a14:	2d2f      	cmp	r5, #47	; 0x2f
   b6a16:	d121      	bne.n	b6a5c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b6a18:	6805      	ldr	r5, [r0, #0]
   b6a1a:	3501      	adds	r5, #1
   b6a1c:	6005      	str	r5, [r0, #0]
   b6a1e:	e7aa      	b.n	b6976 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b6a20:	3d6e      	subs	r5, #110	; 0x6e
   b6a22:	2d07      	cmp	r5, #7
   b6a24:	d81a      	bhi.n	b6a5c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b6a26:	a701      	add	r7, pc, #4	; (adr r7, b6a2c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b6a28:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b6a2c:	000b6a19 	.word	0x000b6a19
   b6a30:	000b6a5d 	.word	0x000b6a5d
   b6a34:	000b6a5d 	.word	0x000b6a5d
   b6a38:	000b6a5d 	.word	0x000b6a5d
   b6a3c:	000b6a19 	.word	0x000b6a19
   b6a40:	000b6a5d 	.word	0x000b6a5d
   b6a44:	000b6a19 	.word	0x000b6a19
   b6a48:	000b6a63 	.word	0x000b6a63
   b6a4c:	3d5c      	subs	r5, #92	; 0x5c
   b6a4e:	b2ed      	uxtb	r5, r5
   b6a50:	fa0c f505 	lsl.w	r5, ip, r5
   b6a54:	f240 4741 	movw	r7, #1089	; 0x441
   b6a58:	423d      	tst	r5, r7
   b6a5a:	d1dd      	bne.n	b6a18 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b6a5c:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b6a60:	e77c      	b.n	b695c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b6a62:	f108 0502 	add.w	r5, r8, #2
   b6a66:	6005      	str	r5, [r0, #0]
   b6a68:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b6a6c:	f8d0 8000 	ldr.w	r8, [r0]
   b6a70:	4542      	cmp	r2, r8
   b6a72:	d803      	bhi.n	b6a7c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b6a74:	6805      	ldr	r5, [r0, #0]
   b6a76:	3d01      	subs	r5, #1
   b6a78:	6005      	str	r5, [r0, #0]
					break;
   b6a7a:	e7cd      	b.n	b6a18 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b6a7c:	f811 5008 	ldrb.w	r5, [r1, r8]
   b6a80:	2d00      	cmp	r5, #0
   b6a82:	d0f7      	beq.n	b6a74 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b6a84:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b6a88:	f1bb 0f09 	cmp.w	fp, #9
   b6a8c:	d904      	bls.n	b6a98 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b6a8e:	f025 0520 	bic.w	r5, r5, #32
   b6a92:	3d41      	subs	r5, #65	; 0x41
   b6a94:	2d05      	cmp	r5, #5
   b6a96:	d8e1      	bhi.n	b6a5c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b6a98:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b6a9c:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b6aa0:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b6aa2:	d1e3      	bne.n	b6a6c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b6aa4:	e7e6      	b.n	b6a74 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b6aa6:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b6aaa:	f06f 0402 	mvn.w	r4, #2
   b6aae:	e777      	b.n	b69a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b6ab0:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b6ab4:	2b00      	cmp	r3, #0
   b6ab6:	f43f aec2 	beq.w	b683e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b6aba:	6885      	ldr	r5, [r0, #8]
   b6abc:	1c6f      	adds	r7, r5, #1
   b6abe:	f43f aebe 	beq.w	b683e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b6ac2:	012d      	lsls	r5, r5, #4
   b6ac4:	5d5d      	ldrb	r5, [r3, r5]
   b6ac6:	3d01      	subs	r5, #1
   b6ac8:	2d01      	cmp	r5, #1
   b6aca:	f67f aeb8 	bls.w	b683e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b6ace:	6845      	ldr	r5, [r0, #4]
   b6ad0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b6ad4:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b6ad8:	f1b8 0f00 	cmp.w	r8, #0
   b6adc:	f6ff aeaf 	blt.w	b683e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b6ae0:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b6ae4:	3d01      	subs	r5, #1
   b6ae6:	2d01      	cmp	r5, #1
   b6ae8:	d80a      	bhi.n	b6b00 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b6aea:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b6aee:	3501      	adds	r5, #1
   b6af0:	d006      	beq.n	b6b00 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b6af2:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b6af6:	3501      	adds	r5, #1
   b6af8:	d102      	bne.n	b6b00 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b6afa:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b6afe:	e69e      	b.n	b683e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b6b00:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b6b04:	f1ae 0e10 	sub.w	lr, lr, #16
   b6b08:	e7e6      	b.n	b6ad8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b6b0a:	f1a5 0920 	sub.w	r9, r5, #32
   b6b0e:	4f24      	ldr	r7, [pc, #144]	; (b6ba0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b6b10:	fa5f f989 	uxtb.w	r9, r9
   b6b14:	fa0c f909 	lsl.w	r9, ip, r9
   b6b18:	ea19 0f07 	tst.w	r9, r7
   b6b1c:	f47f aeaa 	bne.w	b6874 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b6b20:	3d20      	subs	r5, #32
   b6b22:	2d5e      	cmp	r5, #94	; 0x5e
   b6b24:	d89a      	bhi.n	b6a5c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b6b26:	f108 0501 	add.w	r5, r8, #1
   b6b2a:	6005      	str	r5, [r0, #0]
   b6b2c:	e68f      	b.n	b684e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b6b2e:	2d0d      	cmp	r5, #13
   b6b30:	d1f6      	bne.n	b6b20 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b6b32:	e69f      	b.n	b6874 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b6b34:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b6b38:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b6b3c:	e7f8      	b.n	b6b30 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b6b3e:	6845      	ldr	r5, [r0, #4]
   b6b40:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b6b42:	42af      	cmp	r7, r5
   b6b44:	f67f af28 	bls.w	b6998 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b6b48:	f105 0801 	add.w	r8, r5, #1
   b6b4c:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b6b50:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b6b54:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b6b58:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b6b5c:	2700      	movs	r7, #0
   b6b5e:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b6b60:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b6b64:	f04f 0a04 	mov.w	sl, #4
   b6b68:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b6b6c:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b6b70:	6805      	ldr	r5, [r0, #0]
   b6b72:	3d01      	subs	r5, #1
   b6b74:	e683      	b.n	b687e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b6b76:	2b00      	cmp	r3, #0
   b6b78:	f43f af12 	beq.w	b69a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b6b7c:	6842      	ldr	r2, [r0, #4]
   b6b7e:	1e51      	subs	r1, r2, #1
   b6b80:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b6b84:	2900      	cmp	r1, #0
   b6b86:	f6ff af0b 	blt.w	b69a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b6b8a:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b6b8e:	3201      	adds	r2, #1
   b6b90:	d003      	beq.n	b6b9a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b6b92:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b6b96:	3201      	adds	r2, #1
   b6b98:	d087      	beq.n	b6aaa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b6b9a:	3901      	subs	r1, #1
   b6b9c:	3b10      	subs	r3, #16
   b6b9e:	e7f1      	b.n	b6b84 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b6ba0:	04001001 	.word	0x04001001

000b6ba4 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b6ba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b6ba6:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b6ba8:	4604      	mov	r4, r0
	if (offset == 0) {
   b6baa:	b912      	cbnz	r2, b6bb2 <_ZN10JsonParser5parseEv+0xe>
		return false;
   b6bac:	2000      	movs	r0, #0
}
   b6bae:	b003      	add	sp, #12
   b6bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b6bb2:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b6bb4:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b6bb8:	b1ab      	cbz	r3, b6be6 <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b6bba:	2100      	movs	r1, #0
	parser->toknext = 0;
   b6bbc:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b6bc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b6bc4:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b6bc6:	69c1      	ldr	r1, [r0, #28]
   b6bc8:	9100      	str	r1, [sp, #0]
   b6bca:	6841      	ldr	r1, [r0, #4]
   b6bcc:	4630      	mov	r0, r6
   b6bce:	f7ff fe0d 	bl	b67ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b6bd2:	1c43      	adds	r3, r0, #1
   b6bd4:	d128      	bne.n	b6c28 <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b6bd6:	7c25      	ldrb	r5, [r4, #16]
   b6bd8:	2d00      	cmp	r5, #0
   b6bda:	d1e7      	bne.n	b6bac <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b6bdc:	6960      	ldr	r0, [r4, #20]
   b6bde:	f000 faad 	bl	b713c <free>
			tokens = 0;
   b6be2:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b6be4:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b6be6:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b6be8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b6bec:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b6bf0:	68e2      	ldr	r2, [r4, #12]
   b6bf2:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b6bf4:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b6bf6:	9500      	str	r5, [sp, #0]
   b6bf8:	462b      	mov	r3, r5
   b6bfa:	4630      	mov	r0, r6
   b6bfc:	f7ff fdf6 	bl	b67ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b6c00:	2800      	cmp	r0, #0
   b6c02:	dbd3      	blt.n	b6bac <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b6c04:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b6c06:	d017      	beq.n	b6c38 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b6c08:	0100      	lsls	r0, r0, #4
   b6c0a:	f000 fa8f 	bl	b712c <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b6c0e:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b6c10:	6160      	str	r0, [r4, #20]
   b6c12:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b6c14:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b6c16:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b6c1a:	68e2      	ldr	r2, [r4, #12]
   b6c1c:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b6c1e:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b6c20:	4630      	mov	r0, r6
   b6c22:	f7ff fde3 	bl	b67ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b6c26:	e001      	b.n	b6c2c <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b6c28:	2800      	cmp	r0, #0
   b6c2a:	dbbf      	blt.n	b6bac <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b6c2c:	6963      	ldr	r3, [r4, #20]
   b6c2e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b6c32:	61a0      	str	r0, [r4, #24]
	return true;
   b6c34:	2001      	movs	r0, #1
   b6c36:	e7ba      	b.n	b6bae <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b6c38:	6963      	ldr	r3, [r4, #20]
   b6c3a:	61a3      	str	r3, [r4, #24]
   b6c3c:	e7fa      	b.n	b6c34 <_ZN10JsonParser5parseEv+0x90>
	...

000b6c40 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   b6c40:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b6c42:	f000 f8af 	bl	b6da4 <HAL_Pin_Map>
   b6c46:	4b01      	ldr	r3, [pc, #4]	; (b6c4c <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b6c48:	6018      	str	r0, [r3, #0]
}
   b6c4a:	bd08      	pop	{r3, pc}
   b6c4c:	2003e6b4 	.word	0x2003e6b4

000b6c50 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b6c50:	b508      	push	{r3, lr}
   b6c52:	4b02      	ldr	r3, [pc, #8]	; (b6c5c <hal_ble_stack_init+0xc>)
   b6c54:	681b      	ldr	r3, [r3, #0]
   b6c56:	689b      	ldr	r3, [r3, #8]
   b6c58:	9301      	str	r3, [sp, #4]
   b6c5a:	bd08      	pop	{r3, pc}
   b6c5c:	00030278 	.word	0x00030278

000b6c60 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b6c60:	b508      	push	{r3, lr}
   b6c62:	4b02      	ldr	r3, [pc, #8]	; (b6c6c <hal_ble_gap_set_advertising_data+0xc>)
   b6c64:	681b      	ldr	r3, [r3, #0]
   b6c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6c68:	9301      	str	r3, [sp, #4]
   b6c6a:	bd08      	pop	{r3, pc}
   b6c6c:	00030278 	.word	0x00030278

000b6c70 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b6c70:	b508      	push	{r3, lr}
   b6c72:	4b02      	ldr	r3, [pc, #8]	; (b6c7c <hal_ble_gap_set_scan_response_data+0xc>)
   b6c74:	681b      	ldr	r3, [r3, #0]
   b6c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6c78:	9301      	str	r3, [sp, #4]
   b6c7a:	bd08      	pop	{r3, pc}
   b6c7c:	00030278 	.word	0x00030278

000b6c80 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b6c80:	b508      	push	{r3, lr}
   b6c82:	4b02      	ldr	r3, [pc, #8]	; (b6c8c <hal_ble_gap_start_advertising+0xc>)
   b6c84:	681b      	ldr	r3, [r3, #0]
   b6c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b6c88:	9301      	str	r3, [sp, #4]
   b6c8a:	bd08      	pop	{r3, pc}
   b6c8c:	00030278 	.word	0x00030278

000b6c90 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b6c90:	b508      	push	{r3, lr}
   b6c92:	4b03      	ldr	r3, [pc, #12]	; (b6ca0 <hal_ble_gap_disconnect+0x10>)
   b6c94:	681b      	ldr	r3, [r3, #0]
   b6c96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b6c9a:	9301      	str	r3, [sp, #4]
   b6c9c:	bd08      	pop	{r3, pc}
   b6c9e:	0000      	.short	0x0000
   b6ca0:	00030278 	.word	0x00030278

000b6ca4 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b6ca4:	b508      	push	{r3, lr}
   b6ca6:	4b03      	ldr	r3, [pc, #12]	; (b6cb4 <hal_ble_gatt_server_add_service+0x10>)
   b6ca8:	681b      	ldr	r3, [r3, #0]
   b6caa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b6cae:	9301      	str	r3, [sp, #4]
   b6cb0:	bd08      	pop	{r3, pc}
   b6cb2:	0000      	.short	0x0000
   b6cb4:	00030278 	.word	0x00030278

000b6cb8 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6cb8:	b508      	push	{r3, lr}
   b6cba:	4b03      	ldr	r3, [pc, #12]	; (b6cc8 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b6cbc:	681b      	ldr	r3, [r3, #0]
   b6cbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b6cc2:	9301      	str	r3, [sp, #4]
   b6cc4:	bd08      	pop	{r3, pc}
   b6cc6:	0000      	.short	0x0000
   b6cc8:	00030278 	.word	0x00030278

000b6ccc <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6ccc:	b508      	push	{r3, lr}
   b6cce:	4b03      	ldr	r3, [pc, #12]	; (b6cdc <hal_ble_gatt_client_write_with_response+0x10>)
   b6cd0:	681b      	ldr	r3, [r3, #0]
   b6cd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b6cd6:	9301      	str	r3, [sp, #4]
   b6cd8:	bd08      	pop	{r3, pc}
   b6cda:	0000      	.short	0x0000
   b6cdc:	00030278 	.word	0x00030278

000b6ce0 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6ce0:	b508      	push	{r3, lr}
   b6ce2:	4b03      	ldr	r3, [pc, #12]	; (b6cf0 <hal_ble_gatt_client_write_without_response+0x10>)
   b6ce4:	681b      	ldr	r3, [r3, #0]
   b6ce6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b6cea:	9301      	str	r3, [sp, #4]
   b6cec:	bd08      	pop	{r3, pc}
   b6cee:	0000      	.short	0x0000
   b6cf0:	00030278 	.word	0x00030278

000b6cf4 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b6cf4:	b508      	push	{r3, lr}
   b6cf6:	4b03      	ldr	r3, [pc, #12]	; (b6d04 <hal_ble_gatt_server_add_characteristic+0x10>)
   b6cf8:	681b      	ldr	r3, [r3, #0]
   b6cfa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b6cfe:	9301      	str	r3, [sp, #4]
   b6d00:	bd08      	pop	{r3, pc}
   b6d02:	0000      	.short	0x0000
   b6d04:	00030278 	.word	0x00030278

000b6d08 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b6d08:	b508      	push	{r3, lr}
   b6d0a:	4b03      	ldr	r3, [pc, #12]	; (b6d18 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b6d0c:	681b      	ldr	r3, [r3, #0]
   b6d0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b6d12:	9301      	str	r3, [sp, #4]
   b6d14:	bd08      	pop	{r3, pc}
   b6d16:	0000      	.short	0x0000
   b6d18:	00030278 	.word	0x00030278

000b6d1c <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6d1c:	b508      	push	{r3, lr}
   b6d1e:	4b03      	ldr	r3, [pc, #12]	; (b6d2c <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b6d20:	681b      	ldr	r3, [r3, #0]
   b6d22:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b6d26:	9301      	str	r3, [sp, #4]
   b6d28:	bd08      	pop	{r3, pc}
   b6d2a:	0000      	.short	0x0000
   b6d2c:	00030278 	.word	0x00030278

000b6d30 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6d30:	b508      	push	{r3, lr}
   b6d32:	4b03      	ldr	r3, [pc, #12]	; (b6d40 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b6d34:	681b      	ldr	r3, [r3, #0]
   b6d36:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b6d3a:	9301      	str	r3, [sp, #4]
   b6d3c:	bd08      	pop	{r3, pc}
   b6d3e:	0000      	.short	0x0000
   b6d40:	00030278 	.word	0x00030278

000b6d44 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6d44:	b508      	push	{r3, lr}
   b6d46:	4b02      	ldr	r3, [pc, #8]	; (b6d50 <os_mutex_recursive_create+0xc>)
   b6d48:	681b      	ldr	r3, [r3, #0]
   b6d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6d4c:	9301      	str	r3, [sp, #4]
   b6d4e:	bd08      	pop	{r3, pc}
   b6d50:	00030248 	.word	0x00030248

000b6d54 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b6d54:	b508      	push	{r3, lr}
   b6d56:	4b02      	ldr	r3, [pc, #8]	; (b6d60 <os_mutex_recursive_lock+0xc>)
   b6d58:	681b      	ldr	r3, [r3, #0]
   b6d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6d5c:	9301      	str	r3, [sp, #4]
   b6d5e:	bd08      	pop	{r3, pc}
   b6d60:	00030248 	.word	0x00030248

000b6d64 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b6d64:	b508      	push	{r3, lr}
   b6d66:	4b02      	ldr	r3, [pc, #8]	; (b6d70 <os_mutex_recursive_unlock+0xc>)
   b6d68:	681b      	ldr	r3, [r3, #0]
   b6d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6d6c:	9301      	str	r3, [sp, #4]
   b6d6e:	bd08      	pop	{r3, pc}
   b6d70:	00030248 	.word	0x00030248

000b6d74 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6d74:	b508      	push	{r3, lr}
   b6d76:	4b02      	ldr	r3, [pc, #8]	; (b6d80 <HAL_RNG_GetRandomNumber+0xc>)
   b6d78:	681b      	ldr	r3, [r3, #0]
   b6d7a:	685b      	ldr	r3, [r3, #4]
   b6d7c:	9301      	str	r3, [sp, #4]
   b6d7e:	bd08      	pop	{r3, pc}
   b6d80:	00030218 	.word	0x00030218

000b6d84 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6d84:	b508      	push	{r3, lr}
   b6d86:	4b02      	ldr	r3, [pc, #8]	; (b6d90 <HAL_Delay_Microseconds+0xc>)
   b6d88:	681b      	ldr	r3, [r3, #0]
   b6d8a:	68db      	ldr	r3, [r3, #12]
   b6d8c:	9301      	str	r3, [sp, #4]
   b6d8e:	bd08      	pop	{r3, pc}
   b6d90:	00030218 	.word	0x00030218

000b6d94 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6d94:	b508      	push	{r3, lr}
   b6d96:	4b02      	ldr	r3, [pc, #8]	; (b6da0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6d98:	681b      	ldr	r3, [r3, #0]
   b6d9a:	695b      	ldr	r3, [r3, #20]
   b6d9c:	9301      	str	r3, [sp, #4]
   b6d9e:	bd08      	pop	{r3, pc}
   b6da0:	00030218 	.word	0x00030218

000b6da4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b6da4:	b508      	push	{r3, lr}
   b6da6:	4b02      	ldr	r3, [pc, #8]	; (b6db0 <HAL_Pin_Map+0xc>)
   b6da8:	681b      	ldr	r3, [r3, #0]
   b6daa:	681b      	ldr	r3, [r3, #0]
   b6dac:	9301      	str	r3, [sp, #4]
   b6dae:	bd08      	pop	{r3, pc}
   b6db0:	0003022c 	.word	0x0003022c

000b6db4 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6db4:	b508      	push	{r3, lr}
   b6db6:	4b02      	ldr	r3, [pc, #8]	; (b6dc0 <hal_i2c_begin+0xc>)
   b6db8:	681b      	ldr	r3, [r3, #0]
   b6dba:	68db      	ldr	r3, [r3, #12]
   b6dbc:	9301      	str	r3, [sp, #4]
   b6dbe:	bd08      	pop	{r3, pc}
   b6dc0:	00030228 	.word	0x00030228

000b6dc4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6dc4:	b508      	push	{r3, lr}
   b6dc6:	4b02      	ldr	r3, [pc, #8]	; (b6dd0 <hal_i2c_begin_transmission+0xc>)
   b6dc8:	681b      	ldr	r3, [r3, #0]
   b6dca:	699b      	ldr	r3, [r3, #24]
   b6dcc:	9301      	str	r3, [sp, #4]
   b6dce:	bd08      	pop	{r3, pc}
   b6dd0:	00030228 	.word	0x00030228

000b6dd4 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6dd4:	b508      	push	{r3, lr}
   b6dd6:	4b02      	ldr	r3, [pc, #8]	; (b6de0 <hal_i2c_end_transmission+0xc>)
   b6dd8:	681b      	ldr	r3, [r3, #0]
   b6dda:	69db      	ldr	r3, [r3, #28]
   b6ddc:	9301      	str	r3, [sp, #4]
   b6dde:	bd08      	pop	{r3, pc}
   b6de0:	00030228 	.word	0x00030228

000b6de4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6de4:	b508      	push	{r3, lr}
   b6de6:	4b02      	ldr	r3, [pc, #8]	; (b6df0 <hal_i2c_write+0xc>)
   b6de8:	681b      	ldr	r3, [r3, #0]
   b6dea:	6a1b      	ldr	r3, [r3, #32]
   b6dec:	9301      	str	r3, [sp, #4]
   b6dee:	bd08      	pop	{r3, pc}
   b6df0:	00030228 	.word	0x00030228

000b6df4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6df4:	b508      	push	{r3, lr}
   b6df6:	4b02      	ldr	r3, [pc, #8]	; (b6e00 <hal_i2c_available+0xc>)
   b6df8:	681b      	ldr	r3, [r3, #0]
   b6dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6dfc:	9301      	str	r3, [sp, #4]
   b6dfe:	bd08      	pop	{r3, pc}
   b6e00:	00030228 	.word	0x00030228

000b6e04 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6e04:	b508      	push	{r3, lr}
   b6e06:	4b02      	ldr	r3, [pc, #8]	; (b6e10 <hal_i2c_read+0xc>)
   b6e08:	681b      	ldr	r3, [r3, #0]
   b6e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6e0c:	9301      	str	r3, [sp, #4]
   b6e0e:	bd08      	pop	{r3, pc}
   b6e10:	00030228 	.word	0x00030228

000b6e14 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6e14:	b508      	push	{r3, lr}
   b6e16:	4b02      	ldr	r3, [pc, #8]	; (b6e20 <hal_i2c_peek+0xc>)
   b6e18:	681b      	ldr	r3, [r3, #0]
   b6e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6e1c:	9301      	str	r3, [sp, #4]
   b6e1e:	bd08      	pop	{r3, pc}
   b6e20:	00030228 	.word	0x00030228

000b6e24 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6e24:	b508      	push	{r3, lr}
   b6e26:	4b02      	ldr	r3, [pc, #8]	; (b6e30 <hal_i2c_flush+0xc>)
   b6e28:	681b      	ldr	r3, [r3, #0]
   b6e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6e2c:	9301      	str	r3, [sp, #4]
   b6e2e:	bd08      	pop	{r3, pc}
   b6e30:	00030228 	.word	0x00030228

000b6e34 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6e34:	b508      	push	{r3, lr}
   b6e36:	4b02      	ldr	r3, [pc, #8]	; (b6e40 <hal_i2c_init+0xc>)
   b6e38:	681b      	ldr	r3, [r3, #0]
   b6e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6e3c:	9301      	str	r3, [sp, #4]
   b6e3e:	bd08      	pop	{r3, pc}
   b6e40:	00030228 	.word	0x00030228

000b6e44 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b6e44:	b508      	push	{r3, lr}
   b6e46:	4b02      	ldr	r3, [pc, #8]	; (b6e50 <hal_i2c_request_ex+0xc>)
   b6e48:	681b      	ldr	r3, [r3, #0]
   b6e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6e4c:	9301      	str	r3, [sp, #4]
   b6e4e:	bd08      	pop	{r3, pc}
   b6e50:	00030228 	.word	0x00030228

000b6e54 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b6e54:	b508      	push	{r3, lr}
   b6e56:	4b02      	ldr	r3, [pc, #8]	; (b6e60 <if_index_to_name+0xc>)
   b6e58:	681b      	ldr	r3, [r3, #0]
   b6e5a:	695b      	ldr	r3, [r3, #20]
   b6e5c:	9301      	str	r3, [sp, #4]
   b6e5e:	bd08      	pop	{r3, pc}
   b6e60:	0003026c 	.word	0x0003026c

000b6e64 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6e64:	b508      	push	{r3, lr}
   b6e66:	4b02      	ldr	r3, [pc, #8]	; (b6e70 <inet_inet_ntop+0xc>)
   b6e68:	681b      	ldr	r3, [r3, #0]
   b6e6a:	695b      	ldr	r3, [r3, #20]
   b6e6c:	9301      	str	r3, [sp, #4]
   b6e6e:	bd08      	pop	{r3, pc}
   b6e70:	00030264 	.word	0x00030264

000b6e74 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6e74:	b508      	push	{r3, lr}
   b6e76:	4b02      	ldr	r3, [pc, #8]	; (b6e80 <inet_htonl+0xc>)
   b6e78:	681b      	ldr	r3, [r3, #0]
   b6e7a:	6a1b      	ldr	r3, [r3, #32]
   b6e7c:	9301      	str	r3, [sp, #4]
   b6e7e:	bd08      	pop	{r3, pc}
   b6e80:	00030264 	.word	0x00030264

000b6e84 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b6e84:	b508      	push	{r3, lr}
   b6e86:	4b02      	ldr	r3, [pc, #8]	; (b6e90 <inet_htons+0xc>)
   b6e88:	681b      	ldr	r3, [r3, #0]
   b6e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6e8c:	9301      	str	r3, [sp, #4]
   b6e8e:	bd08      	pop	{r3, pc}
   b6e90:	00030264 	.word	0x00030264

000b6e94 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6e94:	b508      	push	{r3, lr}
   b6e96:	4b02      	ldr	r3, [pc, #8]	; (b6ea0 <netdb_freeaddrinfo+0xc>)
   b6e98:	681b      	ldr	r3, [r3, #0]
   b6e9a:	689b      	ldr	r3, [r3, #8]
   b6e9c:	9301      	str	r3, [sp, #4]
   b6e9e:	bd08      	pop	{r3, pc}
   b6ea0:	00030268 	.word	0x00030268

000b6ea4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6ea4:	b508      	push	{r3, lr}
   b6ea6:	4b02      	ldr	r3, [pc, #8]	; (b6eb0 <netdb_getaddrinfo+0xc>)
   b6ea8:	681b      	ldr	r3, [r3, #0]
   b6eaa:	68db      	ldr	r3, [r3, #12]
   b6eac:	9301      	str	r3, [sp, #4]
   b6eae:	bd08      	pop	{r3, pc}
   b6eb0:	00030268 	.word	0x00030268

000b6eb4 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6eb4:	b508      	push	{r3, lr}
   b6eb6:	4b02      	ldr	r3, [pc, #8]	; (b6ec0 <sock_setsockopt+0xc>)
   b6eb8:	681b      	ldr	r3, [r3, #0]
   b6eba:	699b      	ldr	r3, [r3, #24]
   b6ebc:	9301      	str	r3, [sp, #4]
   b6ebe:	bd08      	pop	{r3, pc}
   b6ec0:	00030238 	.word	0x00030238

000b6ec4 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6ec4:	b508      	push	{r3, lr}
   b6ec6:	4b02      	ldr	r3, [pc, #8]	; (b6ed0 <sock_close+0xc>)
   b6ec8:	681b      	ldr	r3, [r3, #0]
   b6eca:	69db      	ldr	r3, [r3, #28]
   b6ecc:	9301      	str	r3, [sp, #4]
   b6ece:	bd08      	pop	{r3, pc}
   b6ed0:	00030238 	.word	0x00030238

000b6ed4 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6ed4:	b508      	push	{r3, lr}
   b6ed6:	4b02      	ldr	r3, [pc, #8]	; (b6ee0 <sock_connect+0xc>)
   b6ed8:	681b      	ldr	r3, [r3, #0]
   b6eda:	6a1b      	ldr	r3, [r3, #32]
   b6edc:	9301      	str	r3, [sp, #4]
   b6ede:	bd08      	pop	{r3, pc}
   b6ee0:	00030238 	.word	0x00030238

000b6ee4 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6ee4:	b508      	push	{r3, lr}
   b6ee6:	4b02      	ldr	r3, [pc, #8]	; (b6ef0 <sock_recv+0xc>)
   b6ee8:	681b      	ldr	r3, [r3, #0]
   b6eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6eec:	9301      	str	r3, [sp, #4]
   b6eee:	bd08      	pop	{r3, pc}
   b6ef0:	00030238 	.word	0x00030238

000b6ef4 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6ef4:	b508      	push	{r3, lr}
   b6ef6:	4b02      	ldr	r3, [pc, #8]	; (b6f00 <sock_send+0xc>)
   b6ef8:	681b      	ldr	r3, [r3, #0]
   b6efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6efc:	9301      	str	r3, [sp, #4]
   b6efe:	bd08      	pop	{r3, pc}
   b6f00:	00030238 	.word	0x00030238

000b6f04 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6f04:	b508      	push	{r3, lr}
   b6f06:	4b02      	ldr	r3, [pc, #8]	; (b6f10 <sock_socket+0xc>)
   b6f08:	681b      	ldr	r3, [r3, #0]
   b6f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6f0c:	9301      	str	r3, [sp, #4]
   b6f0e:	bd08      	pop	{r3, pc}
   b6f10:	00030238 	.word	0x00030238

000b6f14 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6f14:	b508      	push	{r3, lr}
   b6f16:	4b02      	ldr	r3, [pc, #8]	; (b6f20 <hal_usart_write+0xc>)
   b6f18:	681b      	ldr	r3, [r3, #0]
   b6f1a:	68db      	ldr	r3, [r3, #12]
   b6f1c:	9301      	str	r3, [sp, #4]
   b6f1e:	bd08      	pop	{r3, pc}
   b6f20:	0003023c 	.word	0x0003023c

000b6f24 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6f24:	b508      	push	{r3, lr}
   b6f26:	4b02      	ldr	r3, [pc, #8]	; (b6f30 <hal_usart_available+0xc>)
   b6f28:	681b      	ldr	r3, [r3, #0]
   b6f2a:	691b      	ldr	r3, [r3, #16]
   b6f2c:	9301      	str	r3, [sp, #4]
   b6f2e:	bd08      	pop	{r3, pc}
   b6f30:	0003023c 	.word	0x0003023c

000b6f34 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6f34:	b508      	push	{r3, lr}
   b6f36:	4b02      	ldr	r3, [pc, #8]	; (b6f40 <hal_usart_read+0xc>)
   b6f38:	681b      	ldr	r3, [r3, #0]
   b6f3a:	695b      	ldr	r3, [r3, #20]
   b6f3c:	9301      	str	r3, [sp, #4]
   b6f3e:	bd08      	pop	{r3, pc}
   b6f40:	0003023c 	.word	0x0003023c

000b6f44 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6f44:	b508      	push	{r3, lr}
   b6f46:	4b02      	ldr	r3, [pc, #8]	; (b6f50 <hal_usart_peek+0xc>)
   b6f48:	681b      	ldr	r3, [r3, #0]
   b6f4a:	699b      	ldr	r3, [r3, #24]
   b6f4c:	9301      	str	r3, [sp, #4]
   b6f4e:	bd08      	pop	{r3, pc}
   b6f50:	0003023c 	.word	0x0003023c

000b6f54 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6f54:	b508      	push	{r3, lr}
   b6f56:	4b02      	ldr	r3, [pc, #8]	; (b6f60 <hal_usart_flush+0xc>)
   b6f58:	681b      	ldr	r3, [r3, #0]
   b6f5a:	69db      	ldr	r3, [r3, #28]
   b6f5c:	9301      	str	r3, [sp, #4]
   b6f5e:	bd08      	pop	{r3, pc}
   b6f60:	0003023c 	.word	0x0003023c

000b6f64 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6f64:	b508      	push	{r3, lr}
   b6f66:	4b02      	ldr	r3, [pc, #8]	; (b6f70 <hal_usart_available_data_for_write+0xc>)
   b6f68:	681b      	ldr	r3, [r3, #0]
   b6f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6f6c:	9301      	str	r3, [sp, #4]
   b6f6e:	bd08      	pop	{r3, pc}
   b6f70:	0003023c 	.word	0x0003023c

000b6f74 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6f74:	b508      	push	{r3, lr}
   b6f76:	4b02      	ldr	r3, [pc, #8]	; (b6f80 <hal_usart_init_ex+0xc>)
   b6f78:	681b      	ldr	r3, [r3, #0]
   b6f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6f7c:	9301      	str	r3, [sp, #4]
   b6f7e:	bd08      	pop	{r3, pc}
   b6f80:	0003023c 	.word	0x0003023c

000b6f84 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6f84:	b508      	push	{r3, lr}
   b6f86:	4b02      	ldr	r3, [pc, #8]	; (b6f90 <HAL_USB_USART_Init+0xc>)
   b6f88:	681b      	ldr	r3, [r3, #0]
   b6f8a:	681b      	ldr	r3, [r3, #0]
   b6f8c:	9301      	str	r3, [sp, #4]
   b6f8e:	bd08      	pop	{r3, pc}
   b6f90:	0003024c 	.word	0x0003024c

000b6f94 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6f94:	b508      	push	{r3, lr}
   b6f96:	4b02      	ldr	r3, [pc, #8]	; (b6fa0 <HAL_USB_USART_Begin+0xc>)
   b6f98:	681b      	ldr	r3, [r3, #0]
   b6f9a:	685b      	ldr	r3, [r3, #4]
   b6f9c:	9301      	str	r3, [sp, #4]
   b6f9e:	bd08      	pop	{r3, pc}
   b6fa0:	0003024c 	.word	0x0003024c

000b6fa4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6fa4:	b508      	push	{r3, lr}
   b6fa6:	4b02      	ldr	r3, [pc, #8]	; (b6fb0 <HAL_USB_USART_Available_Data+0xc>)
   b6fa8:	681b      	ldr	r3, [r3, #0]
   b6faa:	691b      	ldr	r3, [r3, #16]
   b6fac:	9301      	str	r3, [sp, #4]
   b6fae:	bd08      	pop	{r3, pc}
   b6fb0:	0003024c 	.word	0x0003024c

000b6fb4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6fb4:	b508      	push	{r3, lr}
   b6fb6:	4b02      	ldr	r3, [pc, #8]	; (b6fc0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6fb8:	681b      	ldr	r3, [r3, #0]
   b6fba:	695b      	ldr	r3, [r3, #20]
   b6fbc:	9301      	str	r3, [sp, #4]
   b6fbe:	bd08      	pop	{r3, pc}
   b6fc0:	0003024c 	.word	0x0003024c

000b6fc4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6fc4:	b508      	push	{r3, lr}
   b6fc6:	4b02      	ldr	r3, [pc, #8]	; (b6fd0 <HAL_USB_USART_Receive_Data+0xc>)
   b6fc8:	681b      	ldr	r3, [r3, #0]
   b6fca:	699b      	ldr	r3, [r3, #24]
   b6fcc:	9301      	str	r3, [sp, #4]
   b6fce:	bd08      	pop	{r3, pc}
   b6fd0:	0003024c 	.word	0x0003024c

000b6fd4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6fd4:	b508      	push	{r3, lr}
   b6fd6:	4b02      	ldr	r3, [pc, #8]	; (b6fe0 <HAL_USB_USART_Send_Data+0xc>)
   b6fd8:	681b      	ldr	r3, [r3, #0]
   b6fda:	69db      	ldr	r3, [r3, #28]
   b6fdc:	9301      	str	r3, [sp, #4]
   b6fde:	bd08      	pop	{r3, pc}
   b6fe0:	0003024c 	.word	0x0003024c

000b6fe4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6fe4:	b508      	push	{r3, lr}
   b6fe6:	4b02      	ldr	r3, [pc, #8]	; (b6ff0 <HAL_USB_USART_Flush_Data+0xc>)
   b6fe8:	681b      	ldr	r3, [r3, #0]
   b6fea:	6a1b      	ldr	r3, [r3, #32]
   b6fec:	9301      	str	r3, [sp, #4]
   b6fee:	bd08      	pop	{r3, pc}
   b6ff0:	0003024c 	.word	0x0003024c

000b6ff4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6ff4:	b508      	push	{r3, lr}
   b6ff6:	4b02      	ldr	r3, [pc, #8]	; (b7000 <panic_+0xc>)
   b6ff8:	681b      	ldr	r3, [r3, #0]
   b6ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6ffc:	9301      	str	r3, [sp, #4]
   b6ffe:	bd08      	pop	{r3, pc}
   b7000:	00030260 	.word	0x00030260

000b7004 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b7004:	b508      	push	{r3, lr}
   b7006:	4b02      	ldr	r3, [pc, #8]	; (b7010 <log_message+0xc>)
   b7008:	681b      	ldr	r3, [r3, #0]
   b700a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b700c:	9301      	str	r3, [sp, #4]
   b700e:	bd08      	pop	{r3, pc}
   b7010:	00030260 	.word	0x00030260

000b7014 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7014:	b508      	push	{r3, lr}
   b7016:	4b02      	ldr	r3, [pc, #8]	; (b7020 <set_system_mode+0xc>)
   b7018:	681b      	ldr	r3, [r3, #0]
   b701a:	685b      	ldr	r3, [r3, #4]
   b701c:	9301      	str	r3, [sp, #4]
   b701e:	bd08      	pop	{r3, pc}
   b7020:	00030220 	.word	0x00030220

000b7024 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7024:	b508      	push	{r3, lr}
   b7026:	4b02      	ldr	r3, [pc, #8]	; (b7030 <system_delay_ms+0xc>)
   b7028:	681b      	ldr	r3, [r3, #0]
   b702a:	695b      	ldr	r3, [r3, #20]
   b702c:	9301      	str	r3, [sp, #4]
   b702e:	bd08      	pop	{r3, pc}
   b7030:	00030220 	.word	0x00030220

000b7034 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7034:	b508      	push	{r3, lr}
   b7036:	4b03      	ldr	r3, [pc, #12]	; (b7044 <system_ctrl_set_app_request_handler+0x10>)
   b7038:	681b      	ldr	r3, [r3, #0]
   b703a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b703e:	9301      	str	r3, [sp, #4]
   b7040:	bd08      	pop	{r3, pc}
   b7042:	0000      	.short	0x0000
   b7044:	00030220 	.word	0x00030220

000b7048 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7048:	b508      	push	{r3, lr}
   b704a:	4b03      	ldr	r3, [pc, #12]	; (b7058 <system_ctrl_set_result+0x10>)
   b704c:	681b      	ldr	r3, [r3, #0]
   b704e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b7052:	9301      	str	r3, [sp, #4]
   b7054:	bd08      	pop	{r3, pc}
   b7056:	0000      	.short	0x0000
   b7058:	00030220 	.word	0x00030220

000b705c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b705c:	b508      	push	{r3, lr}
   b705e:	4b02      	ldr	r3, [pc, #8]	; (b7068 <spark_set_random_seed_from_cloud_handler+0xc>)
   b7060:	681b      	ldr	r3, [r3, #0]
   b7062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7064:	9301      	str	r3, [sp, #4]
   b7066:	bd08      	pop	{r3, pc}
   b7068:	00030244 	.word	0x00030244

000b706c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b706c:	b508      	push	{r3, lr}
   b706e:	4b02      	ldr	r3, [pc, #8]	; (b7078 <network_connect+0xc>)
   b7070:	681b      	ldr	r3, [r3, #0]
   b7072:	685b      	ldr	r3, [r3, #4]
   b7074:	9301      	str	r3, [sp, #4]
   b7076:	bd08      	pop	{r3, pc}
   b7078:	00030240 	.word	0x00030240

000b707c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b707c:	b508      	push	{r3, lr}
   b707e:	4b02      	ldr	r3, [pc, #8]	; (b7088 <network_connecting+0xc>)
   b7080:	681b      	ldr	r3, [r3, #0]
   b7082:	689b      	ldr	r3, [r3, #8]
   b7084:	9301      	str	r3, [sp, #4]
   b7086:	bd08      	pop	{r3, pc}
   b7088:	00030240 	.word	0x00030240

000b708c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b708c:	b508      	push	{r3, lr}
   b708e:	4b02      	ldr	r3, [pc, #8]	; (b7098 <network_disconnect+0xc>)
   b7090:	681b      	ldr	r3, [r3, #0]
   b7092:	68db      	ldr	r3, [r3, #12]
   b7094:	9301      	str	r3, [sp, #4]
   b7096:	bd08      	pop	{r3, pc}
   b7098:	00030240 	.word	0x00030240

000b709c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b709c:	b508      	push	{r3, lr}
   b709e:	4b02      	ldr	r3, [pc, #8]	; (b70a8 <network_ready+0xc>)
   b70a0:	681b      	ldr	r3, [r3, #0]
   b70a2:	691b      	ldr	r3, [r3, #16]
   b70a4:	9301      	str	r3, [sp, #4]
   b70a6:	bd08      	pop	{r3, pc}
   b70a8:	00030240 	.word	0x00030240

000b70ac <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b70ac:	b508      	push	{r3, lr}
   b70ae:	4b02      	ldr	r3, [pc, #8]	; (b70b8 <network_on+0xc>)
   b70b0:	681b      	ldr	r3, [r3, #0]
   b70b2:	695b      	ldr	r3, [r3, #20]
   b70b4:	9301      	str	r3, [sp, #4]
   b70b6:	bd08      	pop	{r3, pc}
   b70b8:	00030240 	.word	0x00030240

000b70bc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b70bc:	b508      	push	{r3, lr}
   b70be:	4b02      	ldr	r3, [pc, #8]	; (b70c8 <network_off+0xc>)
   b70c0:	681b      	ldr	r3, [r3, #0]
   b70c2:	699b      	ldr	r3, [r3, #24]
   b70c4:	9301      	str	r3, [sp, #4]
   b70c6:	bd08      	pop	{r3, pc}
   b70c8:	00030240 	.word	0x00030240

000b70cc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b70cc:	b508      	push	{r3, lr}
   b70ce:	4b02      	ldr	r3, [pc, #8]	; (b70d8 <network_listen+0xc>)
   b70d0:	681b      	ldr	r3, [r3, #0]
   b70d2:	69db      	ldr	r3, [r3, #28]
   b70d4:	9301      	str	r3, [sp, #4]
   b70d6:	bd08      	pop	{r3, pc}
   b70d8:	00030240 	.word	0x00030240

000b70dc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b70dc:	b508      	push	{r3, lr}
   b70de:	4b02      	ldr	r3, [pc, #8]	; (b70e8 <network_listening+0xc>)
   b70e0:	681b      	ldr	r3, [r3, #0]
   b70e2:	6a1b      	ldr	r3, [r3, #32]
   b70e4:	9301      	str	r3, [sp, #4]
   b70e6:	bd08      	pop	{r3, pc}
   b70e8:	00030240 	.word	0x00030240

000b70ec <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b70ec:	b508      	push	{r3, lr}
   b70ee:	4b02      	ldr	r3, [pc, #8]	; (b70f8 <network_set_listen_timeout+0xc>)
   b70f0:	681b      	ldr	r3, [r3, #0]
   b70f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b70f4:	9301      	str	r3, [sp, #4]
   b70f6:	bd08      	pop	{r3, pc}
   b70f8:	00030240 	.word	0x00030240

000b70fc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b70fc:	b508      	push	{r3, lr}
   b70fe:	4b02      	ldr	r3, [pc, #8]	; (b7108 <network_get_listen_timeout+0xc>)
   b7100:	681b      	ldr	r3, [r3, #0]
   b7102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7104:	9301      	str	r3, [sp, #4]
   b7106:	bd08      	pop	{r3, pc}
   b7108:	00030240 	.word	0x00030240

000b710c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b710c:	b508      	push	{r3, lr}
   b710e:	4b02      	ldr	r3, [pc, #8]	; (b7118 <network_is_on+0xc>)
   b7110:	681b      	ldr	r3, [r3, #0]
   b7112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7114:	9301      	str	r3, [sp, #4]
   b7116:	bd08      	pop	{r3, pc}
   b7118:	00030240 	.word	0x00030240

000b711c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b711c:	b508      	push	{r3, lr}
   b711e:	4b02      	ldr	r3, [pc, #8]	; (b7128 <network_is_off+0xc>)
   b7120:	681b      	ldr	r3, [r3, #0]
   b7122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7124:	9301      	str	r3, [sp, #4]
   b7126:	bd08      	pop	{r3, pc}
   b7128:	00030240 	.word	0x00030240

000b712c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b712c:	b508      	push	{r3, lr}
   b712e:	4b02      	ldr	r3, [pc, #8]	; (b7138 <malloc+0xc>)
   b7130:	681b      	ldr	r3, [r3, #0]
   b7132:	681b      	ldr	r3, [r3, #0]
   b7134:	9301      	str	r3, [sp, #4]
   b7136:	bd08      	pop	{r3, pc}
   b7138:	0003021c 	.word	0x0003021c

000b713c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b713c:	b508      	push	{r3, lr}
   b713e:	4b02      	ldr	r3, [pc, #8]	; (b7148 <free+0xc>)
   b7140:	681b      	ldr	r3, [r3, #0]
   b7142:	685b      	ldr	r3, [r3, #4]
   b7144:	9301      	str	r3, [sp, #4]
   b7146:	bd08      	pop	{r3, pc}
   b7148:	0003021c 	.word	0x0003021c

000b714c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b714c:	b508      	push	{r3, lr}
   b714e:	4b02      	ldr	r3, [pc, #8]	; (b7158 <realloc+0xc>)
   b7150:	681b      	ldr	r3, [r3, #0]
   b7152:	689b      	ldr	r3, [r3, #8]
   b7154:	9301      	str	r3, [sp, #4]
   b7156:	bd08      	pop	{r3, pc}
   b7158:	0003021c 	.word	0x0003021c

000b715c <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b715c:	b508      	push	{r3, lr}
   b715e:	4b02      	ldr	r3, [pc, #8]	; (b7168 <sscanf+0xc>)
   b7160:	681b      	ldr	r3, [r3, #0]
   b7162:	695b      	ldr	r3, [r3, #20]
   b7164:	9301      	str	r3, [sp, #4]
   b7166:	bd08      	pop	{r3, pc}
   b7168:	0003021c 	.word	0x0003021c

000b716c <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b716c:	b508      	push	{r3, lr}
   b716e:	4b02      	ldr	r3, [pc, #8]	; (b7178 <vsnprintf+0xc>)
   b7170:	681b      	ldr	r3, [r3, #0]
   b7172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7174:	9301      	str	r3, [sp, #4]
   b7176:	bd08      	pop	{r3, pc}
   b7178:	0003021c 	.word	0x0003021c

000b717c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b717c:	b508      	push	{r3, lr}
   b717e:	4b02      	ldr	r3, [pc, #8]	; (b7188 <abort+0xc>)
   b7180:	681b      	ldr	r3, [r3, #0]
   b7182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7184:	9301      	str	r3, [sp, #4]
   b7186:	bd08      	pop	{r3, pc}
   b7188:	0003021c 	.word	0x0003021c

000b718c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b718c:	b508      	push	{r3, lr}
   b718e:	4b02      	ldr	r3, [pc, #8]	; (b7198 <_malloc_r+0xc>)
   b7190:	681b      	ldr	r3, [r3, #0]
   b7192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7194:	9301      	str	r3, [sp, #4]
   b7196:	bd08      	pop	{r3, pc}
   b7198:	0003021c 	.word	0x0003021c

000b719c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b719c:	b508      	push	{r3, lr}
   b719e:	4b02      	ldr	r3, [pc, #8]	; (b71a8 <__errno+0xc>)
   b71a0:	681b      	ldr	r3, [r3, #0]
   b71a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b71a4:	9301      	str	r3, [sp, #4]
   b71a6:	bd08      	pop	{r3, pc}
   b71a8:	0003021c 	.word	0x0003021c

000b71ac <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b71ac:	b508      	push	{r3, lr}
   b71ae:	4b02      	ldr	r3, [pc, #8]	; (b71b8 <__assert_func+0xc>)
   b71b0:	681b      	ldr	r3, [r3, #0]
   b71b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b71b4:	9301      	str	r3, [sp, #4]
   b71b6:	bd08      	pop	{r3, pc}
   b71b8:	0003021c 	.word	0x0003021c

000b71bc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b71bc:	b508      	push	{r3, lr}
   b71be:	4b02      	ldr	r3, [pc, #8]	; (b71c8 <newlib_impure_ptr_callback+0xc>)
   b71c0:	681b      	ldr	r3, [r3, #0]
   b71c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b71c4:	9301      	str	r3, [sp, #4]
   b71c6:	bd08      	pop	{r3, pc}
   b71c8:	0003021c 	.word	0x0003021c

000b71cc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b71cc:	2100      	movs	r1, #0
   b71ce:	f7ff bf29 	b.w	b7024 <system_delay_ms>

000b71d2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b71d2:	4770      	bx	lr

000b71d4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b71d4:	4770      	bx	lr

000b71d6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b71d6:	4770      	bx	lr

000b71d8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b71d8:	4770      	bx	lr
	...

000b71dc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b71dc:	4b06      	ldr	r3, [pc, #24]	; (b71f8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b71de:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b71e0:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b71e2:	f100 040c 	add.w	r4, r0, #12
	    ||
   b71e6:	d005      	beq.n	b71f4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b71e8:	4608      	mov	r0, r1
   b71ea:	f002 fb1f 	bl	b982c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b71ee:	2800      	cmp	r0, #0
   b71f0:	bf08      	it	eq
   b71f2:	2400      	moveq	r4, #0
      }
   b71f4:	4620      	mov	r0, r4
   b71f6:	bd10      	pop	{r4, pc}
   b71f8:	000bcf84 	.word	0x000bcf84

000b71fc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b71fc:	4b06      	ldr	r3, [pc, #24]	; (b7218 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b71fe:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7200:	b510      	push	{r4, lr}
   b7202:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7206:	d005      	beq.n	b7214 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7208:	4608      	mov	r0, r1
   b720a:	f002 fb0f 	bl	b982c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b720e:	2800      	cmp	r0, #0
   b7210:	bf08      	it	eq
   b7212:	2400      	moveq	r4, #0
      }
   b7214:	4620      	mov	r0, r4
   b7216:	bd10      	pop	{r4, pc}
   b7218:	000bcf84 	.word	0x000bcf84

000b721c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b721c:	4b06      	ldr	r3, [pc, #24]	; (b7238 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b721e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7220:	b510      	push	{r4, lr}
   b7222:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7226:	d005      	beq.n	b7234 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7228:	4608      	mov	r0, r1
   b722a:	f002 faff 	bl	b982c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b722e:	2800      	cmp	r0, #0
   b7230:	bf08      	it	eq
   b7232:	2400      	moveq	r4, #0
      }
   b7234:	4620      	mov	r0, r4
   b7236:	bd10      	pop	{r4, pc}
   b7238:	000bcf84 	.word	0x000bcf84

000b723c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b723c:	b510      	push	{r4, lr}
   b723e:	2168      	movs	r1, #104	; 0x68
   b7240:	4604      	mov	r4, r0
   b7242:	f7fc ff2e 	bl	b40a2 <_ZdlPvj>
   b7246:	4620      	mov	r0, r4
   b7248:	bd10      	pop	{r4, pc}

000b724a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b724a:	b510      	push	{r4, lr}
   b724c:	2128      	movs	r1, #40	; 0x28
   b724e:	4604      	mov	r4, r0
   b7250:	f7fc ff27 	bl	b40a2 <_ZdlPvj>
   b7254:	4620      	mov	r0, r4
   b7256:	bd10      	pop	{r4, pc}

000b7258 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b7258:	b510      	push	{r4, lr}
   b725a:	2130      	movs	r1, #48	; 0x30
   b725c:	4604      	mov	r4, r0
   b725e:	f7fc ff20 	bl	b40a2 <_ZdlPvj>
   b7262:	4620      	mov	r0, r4
   b7264:	bd10      	pop	{r4, pc}

000b7266 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7266:	2168      	movs	r1, #104	; 0x68
   b7268:	f7fc bf1b 	b.w	b40a2 <_ZdlPvj>

000b726c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b726c:	2128      	movs	r1, #40	; 0x28
   b726e:	f7fc bf18 	b.w	b40a2 <_ZdlPvj>

000b7272 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7272:	2130      	movs	r1, #48	; 0x30
   b7274:	f7fc bf15 	b.w	b40a2 <_ZdlPvj>

000b7278 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b7278:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b727a:	2500      	movs	r5, #0
   b727c:	1cec      	adds	r4, r5, #3
   b727e:	428c      	cmp	r4, r1
   b7280:	d80d      	bhi.n	b729e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b7282:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b7284:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b7286:	5d87      	ldrb	r7, [r0, r6]
   b7288:	4297      	cmp	r7, r2
   b728a:	d105      	bne.n	b7298 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b728c:	4426      	add	r6, r4
   b728e:	42b1      	cmp	r1, r6
   b7290:	d305      	bcc.n	b729e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b7292:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b7294:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b7296:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b7298:	3401      	adds	r4, #1
   b729a:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b729c:	e7ee      	b.n	b727c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b729e:	2000      	movs	r0, #0
   b72a0:	e7f9      	b.n	b7296 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b72a4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b72a4:	4a02      	ldr	r2, [pc, #8]	; (b72b0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b72a6:	4903      	ldr	r1, [pc, #12]	; (b72b4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b72a8:	200a      	movs	r0, #10
   b72aa:	f7ff bea3 	b.w	b6ff4 <panic_>
   b72ae:	bf00      	nop
   b72b0:	000b6d85 	.word	0x000b6d85
   b72b4:	000bcde4 	.word	0x000bcde4

000b72b8 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b72b8:	b430      	push	{r4, r5}
   b72ba:	460d      	mov	r5, r1
   b72bc:	4611      	mov	r1, r2
   b72be:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b72c0:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b72c2:	6809      	ldr	r1, [r1, #0]
   b72c4:	6828      	ldr	r0, [r5, #0]
   b72c6:	e9d3 4300 	ldrd	r4, r3, [r3]
   b72ca:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b72cc:	bc30      	pop	{r4, r5}
   b72ce:	4760      	bx	ip

000b72d0 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b72d0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b72d2:	b538      	push	{r3, r4, r5, lr}
   b72d4:	4604      	mov	r4, r0
	switch (__op)
   b72d6:	d102      	bne.n	b72de <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b72d8:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b72da:	6023      	str	r3, [r4, #0]
	}
   b72dc:	e003      	b.n	b72e6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b72de:	2a02      	cmp	r2, #2
   b72e0:	d003      	beq.n	b72ea <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b72e2:	2a03      	cmp	r2, #3
   b72e4:	d00d      	beq.n	b7302 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b72e6:	2000      	movs	r0, #0
   b72e8:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b72ea:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b72ec:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b72ee:	f7fc fed2 	bl	b4096 <_Znwj>
   b72f2:	4603      	mov	r3, r0
   b72f4:	2800      	cmp	r0, #0
   b72f6:	d0f0      	beq.n	b72da <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b72f8:	e895 0003 	ldmia.w	r5, {r0, r1}
   b72fc:	e883 0003 	stmia.w	r3, {r0, r1}
   b7300:	e7eb      	b.n	b72da <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b7302:	6800      	ldr	r0, [r0, #0]
   b7304:	2800      	cmp	r0, #0
   b7306:	d0ee      	beq.n	b72e6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b7308:	2108      	movs	r1, #8
   b730a:	f7fc feca 	bl	b40a2 <_ZdlPvj>
   b730e:	e7ea      	b.n	b72e6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b7310 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b7310:	b510      	push	{r4, lr}
      if (_M_manager)
   b7312:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b7314:	4604      	mov	r4, r0
      if (_M_manager)
   b7316:	b113      	cbz	r3, b731e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b7318:	2203      	movs	r2, #3
   b731a:	4601      	mov	r1, r0
   b731c:	4798      	blx	r3
    }
   b731e:	4620      	mov	r0, r4
   b7320:	bd10      	pop	{r4, pc}

000b7322 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7322:	b510      	push	{r4, lr}
   b7324:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b7326:	3058      	adds	r0, #88	; 0x58
   b7328:	f7ff fff2 	bl	b7310 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b732c:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b7330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7334:	f001 bb98 	b.w	b8a68 <_ZN6StringD1Ev>

000b7338 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b7338:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b733a:	6843      	ldr	r3, [r0, #4]
   b733c:	3b01      	subs	r3, #1
    {
   b733e:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b7340:	6043      	str	r3, [r0, #4]
   b7342:	b963      	cbnz	r3, b735e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b7344:	6803      	ldr	r3, [r0, #0]
   b7346:	689b      	ldr	r3, [r3, #8]
   b7348:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b734a:	68a3      	ldr	r3, [r4, #8]
   b734c:	3b01      	subs	r3, #1
   b734e:	60a3      	str	r3, [r4, #8]
   b7350:	b92b      	cbnz	r3, b735e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b7352:	6823      	ldr	r3, [r4, #0]
   b7354:	4620      	mov	r0, r4
   b7356:	68db      	ldr	r3, [r3, #12]
    }
   b7358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b735c:	4718      	bx	r3
    }
   b735e:	bd10      	pop	{r4, pc}

000b7360 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b7360:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b7364:	b2da      	uxtb	r2, r3
   b7366:	2a09      	cmp	r2, #9
   b7368:	d801      	bhi.n	b736e <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b736a:	4618      	mov	r0, r3
   b736c:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b736e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b7372:	2b05      	cmp	r3, #5
   b7374:	d801      	bhi.n	b737a <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b7376:	3857      	subs	r0, #87	; 0x57
   b7378:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b737a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b737e:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b7380:	bf94      	ite	ls
   b7382:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b7384:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b7388:	4770      	bx	lr
	...

000b738c <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b738c:	b510      	push	{r4, lr}
            locked_(false) {
   b738e:	2300      	movs	r3, #0
   b7390:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b7392:	4b04      	ldr	r3, [pc, #16]	; (b73a4 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b7394:	4604      	mov	r4, r0
   b7396:	6818      	ldr	r0, [r3, #0]
   b7398:	f7ff fcdc 	bl	b6d54 <os_mutex_recursive_lock>
        locked_ = true;
   b739c:	2301      	movs	r3, #1
   b739e:	7023      	strb	r3, [r4, #0]
    }
   b73a0:	4620      	mov	r0, r4
   b73a2:	bd10      	pop	{r4, pc}
   b73a4:	2003e6c0 	.word	0x2003e6c0

000b73a8 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b73a8:	b510      	push	{r4, lr}
        if (locked_) {
   b73aa:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b73ac:	4604      	mov	r4, r0
        if (locked_) {
   b73ae:	b11b      	cbz	r3, b73b8 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b73b0:	4b02      	ldr	r3, [pc, #8]	; (b73bc <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b73b2:	6818      	ldr	r0, [r3, #0]
   b73b4:	f7ff fcd6 	bl	b6d64 <os_mutex_recursive_unlock>
    }
   b73b8:	4620      	mov	r0, r4
   b73ba:	bd10      	pop	{r4, pc}
   b73bc:	2003e6c0 	.word	0x2003e6c0

000b73c0 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b73c0:	b082      	sub	sp, #8
   b73c2:	4603      	mov	r3, r0
    address_ = addr;
   b73c4:	6808      	ldr	r0, [r1, #0]
   b73c6:	6849      	ldr	r1, [r1, #4]
   b73c8:	466a      	mov	r2, sp
   b73ca:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b73cc:	466a      	mov	r2, sp
   b73ce:	ca03      	ldmia	r2!, {r0, r1}
   b73d0:	6018      	str	r0, [r3, #0]
}
   b73d2:	4618      	mov	r0, r3
    address_ = addr.address_;
   b73d4:	6059      	str	r1, [r3, #4]
}
   b73d6:	b002      	add	sp, #8
   b73d8:	4770      	bx	lr

000b73da <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b73da:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b73dc:	7982      	ldrb	r2, [r0, #6]
   b73de:	798b      	ldrb	r3, [r1, #6]
   b73e0:	429a      	cmp	r2, r3
   b73e2:	d106      	bne.n	b73f2 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b73e4:	2206      	movs	r2, #6
   b73e6:	f003 fa88 	bl	ba8fa <memcmp>
   b73ea:	fab0 f080 	clz	r0, r0
   b73ee:	0940      	lsrs	r0, r0, #5
}
   b73f0:	bd08      	pop	{r3, pc}
    return false;
   b73f2:	2000      	movs	r0, #0
   b73f4:	e7fc      	b.n	b73f0 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b73f6 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b73f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b73fa:	6003      	str	r3, [r0, #0]
   b73fc:	8083      	strh	r3, [r0, #4]
}
   b73fe:	2000      	movs	r0, #0
   b7400:	4770      	bx	lr

000b7402 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b7402:	b508      	push	{r3, lr}
   b7404:	4602      	mov	r2, r0
        : address_{} {
   b7406:	2100      	movs	r1, #0
   b7408:	6001      	str	r1, [r0, #0]
   b740a:	6041      	str	r1, [r0, #4]
    clear();
   b740c:	f7ff fff3 	bl	b73f6 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b7410:	7191      	strb	r1, [r2, #6]
}
   b7412:	4610      	mov	r0, r2
   b7414:	bd08      	pop	{r3, pc}
	...

000b7418 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b7418:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b741a:	2301      	movs	r3, #1
   b741c:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b741e:	4b05      	ldr	r3, [pc, #20]	; (b7434 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b7420:	4602      	mov	r2, r0
   b7422:	f103 0110 	add.w	r1, r3, #16
   b7426:	f853 4b04 	ldr.w	r4, [r3], #4
   b742a:	f842 4b04 	str.w	r4, [r2], #4
   b742e:	428b      	cmp	r3, r1
   b7430:	d1f9      	bne.n	b7426 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b7432:	bd10      	pop	{r4, pc}
   b7434:	000bcf92 	.word	0x000bcf92

000b7438 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7438:	b510      	push	{r4, lr}
    if (uuid128) {
   b743a:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b743c:	4604      	mov	r4, r0
    if (uuid128) {
   b743e:	b1b1      	cbz	r1, b746e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b7440:	2a01      	cmp	r2, #1
   b7442:	f101 0210 	add.w	r2, r1, #16
   b7446:	d10a      	bne.n	b745e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b7448:	4601      	mov	r1, r0
   b744a:	f853 0b04 	ldr.w	r0, [r3], #4
   b744e:	f841 0b04 	str.w	r0, [r1], #4
   b7452:	4293      	cmp	r3, r2
   b7454:	d1f9      	bne.n	b744a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b7456:	2301      	movs	r3, #1
   b7458:	6123      	str	r3, [r4, #16]
}
   b745a:	4620      	mov	r0, r4
   b745c:	bd10      	pop	{r4, pc}
   b745e:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b7460:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b7464:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b7468:	429a      	cmp	r2, r3
   b746a:	d1f9      	bne.n	b7460 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b746c:	e7f3      	b.n	b7456 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b746e:	2210      	movs	r2, #16
   b7470:	f003 fa7b 	bl	ba96a <memset>
   b7474:	e7f1      	b.n	b745a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b7476 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b7476:	b538      	push	{r3, r4, r5, lr}
   b7478:	4604      	mov	r4, r0
   b747a:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b747c:	461a      	mov	r2, r3
   b747e:	f7ff ffdb 	bl	b7438 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b7482:	81a5      	strh	r5, [r4, #12]
}
   b7484:	4620      	mov	r0, r4
   b7486:	bd38      	pop	{r3, r4, r5, pc}

000b7488 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b7488:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b748a:	6902      	ldr	r2, [r0, #16]
   b748c:	b922      	cbnz	r2, b7498 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b748e:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7490:	3800      	subs	r0, #0
   b7492:	bf18      	it	ne
   b7494:	2001      	movne	r0, #1
}
   b7496:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7498:	4902      	ldr	r1, [pc, #8]	; (b74a4 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b749a:	2210      	movs	r2, #16
   b749c:	f003 fa2d 	bl	ba8fa <memcmp>
   b74a0:	e7f6      	b.n	b7490 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b74a2:	bf00      	nop
   b74a4:	000bcfb2 	.word	0x000bcfb2

000b74a8 <_ZNK8particle7BleUuid4typeEv>:
}
   b74a8:	6900      	ldr	r0, [r0, #16]
   b74aa:	4770      	bx	lr

000b74ac <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b74ac:	b538      	push	{r3, r4, r5, lr}
   b74ae:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b74b0:	2214      	movs	r2, #20
   b74b2:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b74b4:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b74b6:	f003 fa58 	bl	ba96a <memset>
    if (type_ == BleUuidType::SHORT) {
   b74ba:	6923      	ldr	r3, [r4, #16]
   b74bc:	b91b      	cbnz	r3, b74c6 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b74be:	89a3      	ldrh	r3, [r4, #12]
   b74c0:	802b      	strh	r3, [r5, #0]
}
   b74c2:	4628      	mov	r0, r5
   b74c4:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b74c6:	2301      	movs	r3, #1
   b74c8:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b74ca:	4621      	mov	r1, r4
   b74cc:	462b      	mov	r3, r5
   b74ce:	f104 0210 	add.w	r2, r4, #16
   b74d2:	f851 0b04 	ldr.w	r0, [r1], #4
   b74d6:	f843 0b04 	str.w	r0, [r3], #4
   b74da:	4291      	cmp	r1, r2
   b74dc:	d1f9      	bne.n	b74d2 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b74de:	e7f0      	b.n	b74c2 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b74e0 <_ZNK8particle7BleUuid7shortedEv>:
}
   b74e0:	8980      	ldrh	r0, [r0, #12]
   b74e2:	4770      	bx	lr

000b74e4 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b74e4:	4770      	bx	lr

000b74e6 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b74e6:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b74e8:	6902      	ldr	r2, [r0, #16]
   b74ea:	690b      	ldr	r3, [r1, #16]
   b74ec:	429a      	cmp	r2, r3
   b74ee:	d106      	bne.n	b74fe <_ZNK8particle7BleUuideqERKS0_+0x18>
   b74f0:	2210      	movs	r2, #16
   b74f2:	f003 fa02 	bl	ba8fa <memcmp>
   b74f6:	fab0 f080 	clz	r0, r0
   b74fa:	0940      	lsrs	r0, r0, #5
}
   b74fc:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b74fe:	2000      	movs	r0, #0
   b7500:	e7fc      	b.n	b74fc <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b7504 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b7504:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b7506:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b750a:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b750c:	4b34      	ldr	r3, [pc, #208]	; (b75e0 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b750e:	460c      	mov	r4, r1
   b7510:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7512:	4602      	mov	r2, r0
   b7514:	f103 0110 	add.w	r1, r3, #16
   b7518:	f853 0b04 	ldr.w	r0, [r3], #4
   b751c:	f842 0b04 	str.w	r0, [r2], #4
   b7520:	428b      	cmp	r3, r1
   b7522:	d1f9      	bne.n	b7518 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b7524:	b344      	cbz	r4, b7578 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b7526:	2124      	movs	r1, #36	; 0x24
   b7528:	4620      	mov	r0, r4
   b752a:	f003 fa83 	bl	baa34 <strnlen>
   b752e:	2804      	cmp	r0, #4
   b7530:	f04f 0500 	mov.w	r5, #0
   b7534:	d123      	bne.n	b757e <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b7536:	f8ad 5004 	strh.w	r5, [sp, #4]
   b753a:	af01      	add	r7, sp, #4
   b753c:	1ca5      	adds	r5, r4, #2
   b753e:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b7540:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b7544:	f7ff ff0c 	bl	b7360 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b7548:	f1b0 0800 	subs.w	r8, r0, #0
   b754c:	db12      	blt.n	b7574 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b754e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b7552:	f7ff ff05 	bl	b7360 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b7556:	2800      	cmp	r0, #0
   b7558:	db0c      	blt.n	b7574 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b755a:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b755c:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b7560:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b7562:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b7566:	d1eb      	bne.n	b7540 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b7568:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b756c:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b756e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7572:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b7574:	2300      	movs	r3, #0
   b7576:	6133      	str	r3, [r6, #16]
}
   b7578:	b002      	add	sp, #8
   b757a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b757e:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7582:	2124      	movs	r1, #36	; 0x24
   b7584:	4620      	mov	r0, r4
   b7586:	f003 fa55 	bl	baa34 <strnlen>
   b758a:	42a8      	cmp	r0, r5
   b758c:	d807      	bhi.n	b759e <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b758e:	4642      	mov	r2, r8
   b7590:	2100      	movs	r1, #0
   b7592:	4630      	mov	r0, r6
}
   b7594:	b002      	add	sp, #8
   b7596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b759a:	f003 b9e6 	b.w	ba96a <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b759e:	f1b8 0f00 	cmp.w	r8, #0
   b75a2:	d0e9      	beq.n	b7578 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b75a4:	5d60      	ldrb	r0, [r4, r5]
   b75a6:	f7ff fedb 	bl	b7360 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b75aa:	0603      	lsls	r3, r0, #24
   b75ac:	d415      	bmi.n	b75da <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b75ae:	0100      	lsls	r0, r0, #4
   b75b0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b75b4:	b2c7      	uxtb	r7, r0
   b75b6:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b75ba:	2124      	movs	r1, #36	; 0x24
   b75bc:	4620      	mov	r0, r4
   b75be:	f003 fa39 	bl	baa34 <strnlen>
   b75c2:	3501      	adds	r5, #1
   b75c4:	42a8      	cmp	r0, r5
   b75c6:	d908      	bls.n	b75da <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b75c8:	5d60      	ldrb	r0, [r4, r5]
   b75ca:	f7ff fec9 	bl	b7360 <_ZN8particle11hexToNibbleEc>
   b75ce:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b75d0:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b75d2:	bfa4      	itt	ge
   b75d4:	4338      	orrge	r0, r7
   b75d6:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b75da:	3501      	adds	r5, #1
   b75dc:	e7d1      	b.n	b7582 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b75de:	bf00      	nop
   b75e0:	000bcf92 	.word	0x000bcf92

000b75e4 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b75e4:	b513      	push	{r0, r1, r4, lr}
   b75e6:	4604      	mov	r4, r0
   b75e8:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b75ea:	f7ff ff15 	bl	b7418 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b75ee:	4620      	mov	r0, r4
   b75f0:	9901      	ldr	r1, [sp, #4]
   b75f2:	f7ff ff87 	bl	b7504 <_ZN8particle7BleUuid9constructEPKc>
}
   b75f6:	4620      	mov	r0, r4
   b75f8:	b002      	add	sp, #8
   b75fa:	bd10      	pop	{r4, pc}

000b75fc <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b75fc:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b75fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7602:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b7604:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b7606:	8043      	strh	r3, [r0, #2]
   b7608:	220e      	movs	r2, #14
   b760a:	4629      	mov	r1, r5
   b760c:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b760e:	7105      	strb	r5, [r0, #4]
   b7610:	3006      	adds	r0, #6
   b7612:	f003 f9aa 	bl	ba96a <memset>
   b7616:	f104 0014 	add.w	r0, r4, #20
   b761a:	f7ff fefd 	bl	b7418 <_ZN8particle7BleUuidC1Ev>
   b761e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b7622:	f7ff fef9 	bl	b7418 <_ZN8particle7BleUuidC1Ev>
   b7626:	4904      	ldr	r1, [pc, #16]	; (b7638 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b7628:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b762c:	f001 fa67 	bl	b8afe <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b7630:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b7632:	4620      	mov	r0, r4
   b7634:	bd38      	pop	{r3, r4, r5, pc}
   b7636:	bf00      	nop
   b7638:	000bcdae 	.word	0x000bcdae

000b763c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b763c:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b763e:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b7642:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b7646:	4293      	cmp	r3, r2
   b7648:	4618      	mov	r0, r3
   b764a:	d006      	beq.n	b765a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b764c:	6804      	ldr	r4, [r0, #0]
   b764e:	8824      	ldrh	r4, [r4, #0]
   b7650:	428c      	cmp	r4, r1
   b7652:	f103 0308 	add.w	r3, r3, #8
   b7656:	d1f6      	bne.n	b7646 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b7658:	bd10      	pop	{r4, pc}
        return nullptr;
   b765a:	2000      	movs	r0, #0
   b765c:	e7fc      	b.n	b7658 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b7660 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b7660:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7662:	4606      	mov	r6, r0
   b7664:	b085      	sub	sp, #20
   b7666:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b7668:	460d      	mov	r5, r1
   b766a:	2900      	cmp	r1, #0
   b766c:	d050      	beq.n	b7710 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b766e:	2a00      	cmp	r2, #0
   b7670:	d04e      	beq.n	b7710 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b7672:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b7674:	7823      	ldrb	r3, [r4, #0]
   b7676:	2af4      	cmp	r2, #244	; 0xf4
   b7678:	bf28      	it	cs
   b767a:	22f4      	movcs	r2, #244	; 0xf4
   b767c:	b343      	cbz	r3, b76d0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b767e:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b7680:	0798      	lsls	r0, r3, #30
   b7682:	d509      	bpl.n	b7698 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b7684:	89a0      	ldrh	r0, [r4, #12]
   b7686:	9203      	str	r2, [sp, #12]
   b7688:	2300      	movs	r3, #0
   b768a:	f7ff fb15 	bl	b6cb8 <hal_ble_gatt_server_set_characteristic_value>
   b768e:	2800      	cmp	r0, #0
   b7690:	9a03      	ldr	r2, [sp, #12]
   b7692:	da03      	bge.n	b769c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b7694:	b005      	add	sp, #20
   b7696:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b7698:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b769c:	6834      	ldr	r4, [r6, #0]
   b769e:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b76a0:	06d9      	lsls	r1, r3, #27
   b76a2:	d509      	bpl.n	b76b8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b76a4:	2f01      	cmp	r7, #1
   b76a6:	d007      	beq.n	b76b8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b76a8:	89a0      	ldrh	r0, [r4, #12]
   b76aa:	2300      	movs	r3, #0
   b76ac:	4629      	mov	r1, r5
}
   b76ae:	b005      	add	sp, #20
   b76b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b76b4:	f7ff bb32 	b.w	b6d1c <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b76b8:	069b      	lsls	r3, r3, #26
   b76ba:	d5eb      	bpl.n	b7694 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b76bc:	2f02      	cmp	r7, #2
   b76be:	d0e9      	beq.n	b7694 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b76c0:	89a0      	ldrh	r0, [r4, #12]
   b76c2:	2300      	movs	r3, #0
   b76c4:	4629      	mov	r1, r5
}
   b76c6:	b005      	add	sp, #20
   b76c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b76cc:	f7ff bb30 	b.w	b6d30 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b76d0:	8860      	ldrh	r0, [r4, #2]
   b76d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b76d6:	4288      	cmp	r0, r1
   b76d8:	d01c      	beq.n	b7714 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b76da:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b76dc:	074e      	lsls	r6, r1, #29
   b76de:	d501      	bpl.n	b76e4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b76e0:	2f01      	cmp	r7, #1
   b76e2:	d104      	bne.n	b76ee <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b76e4:	070b      	lsls	r3, r1, #28
   b76e6:	d409      	bmi.n	b76fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b76e8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b76ec:	e7d2      	b.n	b7694 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b76ee:	89a1      	ldrh	r1, [r4, #12]
   b76f0:	9300      	str	r3, [sp, #0]
   b76f2:	4613      	mov	r3, r2
   b76f4:	462a      	mov	r2, r5
   b76f6:	f7ff faf3 	bl	b6ce0 <hal_ble_gatt_client_write_without_response>
   b76fa:	e7cb      	b.n	b7694 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b76fc:	2f02      	cmp	r7, #2
   b76fe:	d0f3      	beq.n	b76e8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b7700:	2300      	movs	r3, #0
   b7702:	89a1      	ldrh	r1, [r4, #12]
   b7704:	9300      	str	r3, [sp, #0]
   b7706:	4613      	mov	r3, r2
   b7708:	462a      	mov	r2, r5
   b770a:	f7ff fadf 	bl	b6ccc <hal_ble_gatt_client_write_with_response>
   b770e:	e7c1      	b.n	b7694 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b7710:	4802      	ldr	r0, [pc, #8]	; (b771c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b7712:	e7bf      	b.n	b7694 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b7714:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b7718:	e7bc      	b.n	b7694 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b771a:	bf00      	nop
   b771c:	fffffef2 	.word	0xfffffef2

000b7720 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b7720:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7722:	460c      	mov	r4, r1
   b7724:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b7726:	21f4      	movs	r1, #244	; 0xf4
   b7728:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b772a:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b772c:	f003 f982 	bl	baa34 <strnlen>
   b7730:	9b01      	ldr	r3, [sp, #4]
   b7732:	4602      	mov	r2, r0
   b7734:	4621      	mov	r1, r4
   b7736:	4628      	mov	r0, r5
}
   b7738:	b003      	add	sp, #12
   b773a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b773e:	f7ff bf8f 	b.w	b7660 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000b7744 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b7744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7748:	2600      	movs	r6, #0
   b774a:	6006      	str	r6, [r0, #0]
   b774c:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b774e:	2028      	movs	r0, #40	; 0x28
   b7750:	460c      	mov	r4, r1
   b7752:	f7fc fca0 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b7756:	1e05      	subs	r5, r0, #0
   b7758:	f105 080c 	add.w	r8, r5, #12
   b775c:	d00f      	beq.n	b777e <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b775e:	2301      	movs	r3, #1
   b7760:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7764:	4b08      	ldr	r3, [pc, #32]	; (b7788 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b7766:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b7768:	4640      	mov	r0, r8
   b776a:	f7ff fe55 	bl	b7418 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b776e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b7770:	622e      	str	r6, [r5, #32]
   b7772:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b7776:	4646      	mov	r6, r8
   b7778:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b777a:	6823      	ldr	r3, [r4, #0]
   b777c:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b777e:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b7782:	4638      	mov	r0, r7
   b7784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7788:	000bcf54 	.word	0x000bcf54

000b778c <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b778c:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b778e:	2500      	movs	r5, #0
   b7790:	6005      	str	r5, [r0, #0]
   b7792:	4606      	mov	r6, r0
   b7794:	2030      	movs	r0, #48	; 0x30
   b7796:	f7fc fc7e 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b779a:	4604      	mov	r4, r0
   b779c:	b188      	cbz	r0, b77c2 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b779e:	2301      	movs	r3, #1
   b77a0:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b77a4:	4b09      	ldr	r3, [pc, #36]	; (b77cc <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b77a6:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b77a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b77ac:	8183      	strh	r3, [r0, #12]
   b77ae:	300e      	adds	r0, #14
   b77b0:	f7ff fe27 	bl	b7402 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b77b4:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b77b8:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b77bc:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b77c0:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b77c2:	6074      	str	r4, [r6, #4]
   b77c4:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b77c6:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b77c8:	4630      	mov	r0, r6
   b77ca:	bd70      	pop	{r4, r5, r6, pc}
   b77cc:	000bcf70 	.word	0x000bcf70

000b77d0 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b77d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b77d2:	460d      	mov	r5, r1
   b77d4:	4604      	mov	r4, r0
    WiringBleLock lk;
   b77d6:	a801      	add	r0, sp, #4
   b77d8:	f7ff fdd8 	bl	b738c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b77dc:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b77de:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b77e2:	6023      	str	r3, [r4, #0]
   b77e4:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b77e8:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b77ea:	a801      	add	r0, sp, #4
   b77ec:	f7ff fddc 	bl	b73a8 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b77f0:	4620      	mov	r0, r4
   b77f2:	b003      	add	sp, #12
   b77f4:	bd30      	pop	{r4, r5, pc}

000b77f6 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b77f6:	b530      	push	{r4, r5, lr}
   b77f8:	4605      	mov	r5, r0
   b77fa:	b087      	sub	sp, #28
   b77fc:	460c      	mov	r4, r1
    WiringBleLock lk;
   b77fe:	a801      	add	r0, sp, #4
   b7800:	f7ff fdc4 	bl	b738c <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b7804:	682a      	ldr	r2, [r5, #0]
   b7806:	6823      	ldr	r3, [r4, #0]
   b7808:	8812      	ldrh	r2, [r2, #0]
   b780a:	881b      	ldrh	r3, [r3, #0]
   b780c:	429a      	cmp	r2, r3
   b780e:	d10d      	bne.n	b782c <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b7810:	4629      	mov	r1, r5
   b7812:	a802      	add	r0, sp, #8
   b7814:	f7ff ffdc 	bl	b77d0 <_ZNK8particle13BlePeerDevice7addressEv>
   b7818:	4621      	mov	r1, r4
   b781a:	a804      	add	r0, sp, #16
   b781c:	f7ff ffd8 	bl	b77d0 <_ZNK8particle13BlePeerDevice7addressEv>
   b7820:	a904      	add	r1, sp, #16
   b7822:	a802      	add	r0, sp, #8
   b7824:	f7ff fdd9 	bl	b73da <_ZNK8particle10BleAddresseqERKS0_>
   b7828:	4604      	mov	r4, r0
   b782a:	b900      	cbnz	r0, b782e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b782c:	2400      	movs	r4, #0
    WiringBleLock lk;
   b782e:	a801      	add	r0, sp, #4
   b7830:	f7ff fdba 	bl	b73a8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b7834:	4620      	mov	r0, r4
   b7836:	b007      	add	sp, #28
   b7838:	bd30      	pop	{r4, r5, pc}
	...

000b783c <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b783c:	b510      	push	{r4, lr}
   b783e:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b7840:	2064      	movs	r0, #100	; 0x64
   b7842:	f7fc fc28 	bl	b4096 <_Znwj>
   b7846:	b168      	cbz	r0, b7864 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b7848:	2300      	movs	r3, #0
   b784a:	e9c0 3300 	strd	r3, r3, [r0]
   b784e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b7852:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b7856:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b785a:	6203      	str	r3, [r0, #32]
   b785c:	62c3      	str	r3, [r0, #44]	; 0x2c
   b785e:	63c3      	str	r3, [r0, #60]	; 0x3c
   b7860:	64c3      	str	r3, [r0, #76]	; 0x4c
   b7862:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b7864:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b7866:	b920      	cbnz	r0, b7872 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b7868:	4a0a      	ldr	r2, [pc, #40]	; (b7894 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b786a:	490b      	ldr	r1, [pc, #44]	; (b7898 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b786c:	200a      	movs	r0, #10
   b786e:	f7ff fbc1 	bl	b6ff4 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b7872:	2000      	movs	r0, #0
   b7874:	f7ff f9ec 	bl	b6c50 <hal_ble_stack_init>
   b7878:	b120      	cbz	r0, b7884 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b787a:	4a06      	ldr	r2, [pc, #24]	; (b7894 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b787c:	4907      	ldr	r1, [pc, #28]	; (b789c <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b787e:	200a      	movs	r0, #10
   b7880:	f7ff fbb8 	bl	b6ff4 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b7884:	6821      	ldr	r1, [r4, #0]
   b7886:	4806      	ldr	r0, [pc, #24]	; (b78a0 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b7888:	2200      	movs	r2, #0
   b788a:	f7ff fa3d 	bl	b6d08 <hal_ble_set_callback_on_periph_link_events>
}
   b788e:	4620      	mov	r0, r4
   b7890:	bd10      	pop	{r4, pc}
   b7892:	bf00      	nop
   b7894:	000b6d85 	.word	0x000b6d85
   b7898:	000bcde4 	.word	0x000bcde4
   b789c:	000bce22 	.word	0x000bce22
   b78a0:	000b7e25 	.word	0x000b7e25

000b78a4 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b78a4:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b78a6:	4c0a      	ldr	r4, [pc, #40]	; (b78d0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b78a8:	7823      	ldrb	r3, [r4, #0]
   b78aa:	f3bf 8f5b 	dmb	ish
   b78ae:	07db      	lsls	r3, r3, #31
   b78b0:	d40c      	bmi.n	b78cc <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b78b2:	4620      	mov	r0, r4
   b78b4:	f7fc fbf7 	bl	b40a6 <__cxa_guard_acquire>
   b78b8:	b140      	cbz	r0, b78cc <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b78ba:	4806      	ldr	r0, [pc, #24]	; (b78d4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b78bc:	f7ff ffbe 	bl	b783c <_ZN8particle14BleLocalDeviceC1Ev>
   b78c0:	4620      	mov	r0, r4
   b78c2:	f7fc fbf5 	bl	b40b0 <__cxa_guard_release>
   b78c6:	4804      	ldr	r0, [pc, #16]	; (b78d8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b78c8:	f003 f806 	bl	ba8d8 <atexit>
    return instance;
}
   b78cc:	4801      	ldr	r0, [pc, #4]	; (b78d4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b78ce:	bd10      	pop	{r4, pc}
   b78d0:	2003e6b8 	.word	0x2003e6b8
   b78d4:	2003e6c4 	.word	0x2003e6c4
   b78d8:	000b7af1 	.word	0x000b7af1

000b78dc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b78dc:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b78de:	6803      	ldr	r3, [r0, #0]
   b78e0:	3b09      	subs	r3, #9
   b78e2:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b78e4:	b08d      	sub	sp, #52	; 0x34
   b78e6:	4604      	mov	r4, r0
   b78e8:	460d      	mov	r5, r1
    switch (event->type) {
   b78ea:	d811      	bhi.n	b7910 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b78ec:	f7ff ffda 	bl	b78a4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b78f0:	88a1      	ldrh	r1, [r4, #4]
   b78f2:	6800      	ldr	r0, [r0, #0]
   b78f4:	f7ff fea2 	bl	b763c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b78f8:	4603      	mov	r3, r0
   b78fa:	b958      	cbnz	r0, b7914 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b78fc:	2220      	movs	r2, #32
   b78fe:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b7902:	4a0b      	ldr	r2, [pc, #44]	; (b7930 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b7904:	9200      	str	r2, [sp, #0]
   b7906:	490b      	ldr	r1, [pc, #44]	; (b7934 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b7908:	aa04      	add	r2, sp, #16
   b790a:	2032      	movs	r0, #50	; 0x32
   b790c:	f7ff fb7a 	bl	b7004 <log_message>
}
   b7910:	b00d      	add	sp, #52	; 0x34
   b7912:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b7914:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b7916:	2a00      	cmp	r2, #0
   b7918:	d0fa      	beq.n	b7910 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b791a:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b791e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b7922:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b7926:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b7928:	aa04      	add	r2, sp, #16
   b792a:	a903      	add	r1, sp, #12
   b792c:	47a0      	blx	r4
}
   b792e:	e7ef      	b.n	b7910 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b7930:	000bce64 	.word	0x000bce64
   b7934:	000bcdfb 	.word	0x000bcdfb

000b7938 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b7938:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b793a:	2000      	movs	r0, #0
   b793c:	f7ff f988 	bl	b6c50 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b7940:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b7944:	bd08      	pop	{r3, pc}

000b7946 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b7946:	b919      	cbnz	r1, b7950 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b7948:	460a      	mov	r2, r1
   b794a:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b794c:	f7ff b988 	b.w	b6c60 <hal_ble_gap_set_advertising_data>
   b7950:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7954:	2200      	movs	r2, #0
   b7956:	e7f9      	b.n	b794c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b7958 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b7958:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b795a:	1e14      	subs	r4, r2, #0
   b795c:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b795e:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b7960:	db02      	blt.n	b7968 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b7962:	1862      	adds	r2, r4, r1
   b7964:	429a      	cmp	r2, r3
   b7966:	dd00      	ble.n	b796a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b7968:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b796a:	682a      	ldr	r2, [r5, #0]
   b796c:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b796e:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b7970:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7972:	1a52      	subs	r2, r2, r1
   b7974:	f002 ffdf 	bl	ba936 <memmove>
    size_ -= n;
   b7978:	686a      	ldr	r2, [r5, #4]
   b797a:	1b12      	subs	r2, r2, r4
   b797c:	606a      	str	r2, [r5, #4]
}
   b797e:	bd38      	pop	{r3, r4, r5, pc}

000b7980 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b7980:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b7982:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b7984:	4604      	mov	r4, r0
   b7986:	460d      	mov	r5, r1
   b7988:	ab01      	add	r3, sp, #4
   b798a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b798e:	f7ff fc73 	bl	b7278 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b7992:	4602      	mov	r2, r0
   b7994:	b138      	cbz	r0, b79a6 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b7996:	9901      	ldr	r1, [sp, #4]
   b7998:	4620      	mov	r0, r4
   b799a:	f7ff ffdd 	bl	b7958 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b799e:	4629      	mov	r1, r5
   b79a0:	4620      	mov	r0, r4
   b79a2:	f7ff ffed 	bl	b7980 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b79a6:	b003      	add	sp, #12
   b79a8:	bd30      	pop	{r4, r5, pc}

000b79aa <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b79aa:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b79ac:	460c      	mov	r4, r1
   b79ae:	b929      	cbnz	r1, b79bc <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b79b0:	460a      	mov	r2, r1
   b79b2:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b79b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b79b8:	f7ff b95a 	b.w	b6c70 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b79bc:	2101      	movs	r1, #1
   b79be:	4620      	mov	r0, r4
   b79c0:	f7ff ffde 	bl	b7980 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b79c4:	e9d4 0100 	ldrd	r0, r1, [r4]
   b79c8:	2200      	movs	r2, #0
   b79ca:	e7f3      	b.n	b79b4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b79cc <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b79cc:	b538      	push	{r3, r4, r5, lr}
   b79ce:	4604      	mov	r4, r0
   b79d0:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b79d2:	f7ff ffb8 	bl	b7946 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b79d6:	2800      	cmp	r0, #0
   b79d8:	db0a      	blt.n	b79f0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b79da:	4629      	mov	r1, r5
   b79dc:	4620      	mov	r0, r4
   b79de:	f7ff ffe4 	bl	b79aa <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b79e2:	2800      	cmp	r0, #0
   b79e4:	db04      	blt.n	b79f0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b79e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b79ea:	2000      	movs	r0, #0
   b79ec:	f7ff b948 	b.w	b6c80 <hal_ble_gap_start_advertising>
}
   b79f0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b79f4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b79f4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b79f6:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b79f8:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b79fa:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b79fc:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b79fe:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7a00:	f7fc fb49 	bl	b4096 <_Znwj>
   b7a04:	b118      	cbz	r0, b7a0e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b7a06:	682b      	ldr	r3, [r5, #0]
   b7a08:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b7a0a:	686b      	ldr	r3, [r5, #4]
   b7a0c:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b7a0e:	4b03      	ldr	r3, [pc, #12]	; (b7a1c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b7a10:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7a12:	4b03      	ldr	r3, [pc, #12]	; (b7a20 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7a14:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7a16:	60a3      	str	r3, [r4, #8]
      }
   b7a18:	4620      	mov	r0, r4
   b7a1a:	bd38      	pop	{r3, r4, r5, pc}
   b7a1c:	000b72b9 	.word	0x000b72b9
   b7a20:	000b72d1 	.word	0x000b72d1

000b7a24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b7a24:	680b      	ldr	r3, [r1, #0]
   b7a26:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b7a28:	b113      	cbz	r3, b7a30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b7a2a:	685a      	ldr	r2, [r3, #4]
   b7a2c:	3201      	adds	r2, #1
   b7a2e:	605a      	str	r2, [r3, #4]
      }
   b7a30:	4770      	bx	lr

000b7a32 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b7a32:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7a34:	f851 3b04 	ldr.w	r3, [r1], #4
   b7a38:	4604      	mov	r4, r0
   b7a3a:	f840 3b04 	str.w	r3, [r0], #4
   b7a3e:	f7ff fff1 	bl	b7a24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b7a42:	6823      	ldr	r3, [r4, #0]
   b7a44:	b90b      	cbnz	r3, b7a4a <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b7a46:	f7ff fc2d 	bl	b72a4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b7a4a:	4620      	mov	r0, r4
   b7a4c:	bd10      	pop	{r4, pc}

000b7a4e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b7a4e:	b510      	push	{r4, lr}
   b7a50:	f851 3b04 	ldr.w	r3, [r1], #4
   b7a54:	4604      	mov	r4, r0
   b7a56:	f840 3b04 	str.w	r3, [r0], #4
   b7a5a:	f7ff ffe3 	bl	b7a24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b7a5e:	4620      	mov	r0, r4
   b7a60:	bd10      	pop	{r4, pc}

000b7a62 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b7a62:	b510      	push	{r4, lr}
   b7a64:	f851 3b04 	ldr.w	r3, [r1], #4
   b7a68:	4604      	mov	r4, r0
   b7a6a:	f840 3b04 	str.w	r3, [r0], #4
   b7a6e:	f7ff ffd9 	bl	b7a24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b7a72:	4620      	mov	r0, r4
   b7a74:	bd10      	pop	{r4, pc}

000b7a76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b7a76:	b510      	push	{r4, lr}
   b7a78:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b7a7a:	6800      	ldr	r0, [r0, #0]
   b7a7c:	b108      	cbz	r0, b7a82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b7a7e:	f7ff fc5b 	bl	b7338 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b7a82:	4620      	mov	r0, r4
   b7a84:	bd10      	pop	{r4, pc}

000b7a86 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b7a86:	b510      	push	{r4, lr}
   b7a88:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b7a8a:	3004      	adds	r0, #4
   b7a8c:	f7ff fff3 	bl	b7a76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7a90:	4620      	mov	r0, r4
   b7a92:	bd10      	pop	{r4, pc}

000b7a94 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7a94:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7a96:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7a9a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7a9c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7aa0:	42ae      	cmp	r6, r5
   b7aa2:	d004      	beq.n	b7aae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b7aa4:	1d28      	adds	r0, r5, #4
   b7aa6:	f7ff ffe6 	bl	b7a76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7aaa:	3508      	adds	r5, #8
   b7aac:	e7f8      	b.n	b7aa0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b7aae:	6820      	ldr	r0, [r4, #0]
   b7ab0:	f7ff fb44 	bl	b713c <free>
}
   b7ab4:	4620      	mov	r0, r4
   b7ab6:	bd70      	pop	{r4, r5, r6, pc}

000b7ab8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7ab8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7aba:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7abe:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7ac0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7ac4:	42ae      	cmp	r6, r5
   b7ac6:	d004      	beq.n	b7ad2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b7ac8:	1d28      	adds	r0, r5, #4
   b7aca:	f7ff ffd4 	bl	b7a76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7ace:	3508      	adds	r5, #8
   b7ad0:	e7f8      	b.n	b7ac4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b7ad2:	6820      	ldr	r0, [r4, #0]
   b7ad4:	f7ff fb32 	bl	b713c <free>
}
   b7ad8:	4620      	mov	r0, r4
   b7ada:	bd70      	pop	{r4, r5, r6, pc}

000b7adc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7adc:	b510      	push	{r4, lr}
   b7ade:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b7ae0:	3024      	adds	r0, #36	; 0x24
   b7ae2:	f7ff ffe9 	bl	b7ab8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b7ae6:	f104 0018 	add.w	r0, r4, #24
   b7aea:	f7ff ffd3 	bl	b7a94 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b7aee:	bd10      	pop	{r4, pc}

000b7af0 <__tcf_0>:
    static BleLocalDevice instance;
   b7af0:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b7af2:	4b17      	ldr	r3, [pc, #92]	; (b7b50 <__tcf_0+0x60>)
   b7af4:	681c      	ldr	r4, [r3, #0]
   b7af6:	b354      	cbz	r4, b7b4e <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b7af8:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b7afc:	f7ff fc08 	bl	b7310 <_ZNSt14_Function_baseD1Ev>
   b7b00:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7b04:	f7ff fc04 	bl	b7310 <_ZNSt14_Function_baseD1Ev>
   b7b08:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7b0c:	f7ff fc00 	bl	b7310 <_ZNSt14_Function_baseD1Ev>
   b7b10:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7b14:	f7ff fbfc 	bl	b7310 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b7b18:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b7b1c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7b20:	42ae      	cmp	r6, r5
   b7b22:	d004      	beq.n	b7b2e <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b7b24:	1d28      	adds	r0, r5, #4
   b7b26:	f7ff ffa6 	bl	b7a76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7b2a:	3508      	adds	r5, #8
   b7b2c:	e7f8      	b.n	b7b20 <__tcf_0+0x30>
    ::free(ptr);
   b7b2e:	69a0      	ldr	r0, [r4, #24]
   b7b30:	f7ff fb04 	bl	b713c <free>
    ~BleLocalDeviceImpl() = default;
   b7b34:	f104 000c 	add.w	r0, r4, #12
   b7b38:	f7ff ffbe 	bl	b7ab8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b7b3c:	4620      	mov	r0, r4
   b7b3e:	f7ff ffa9 	bl	b7a94 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b7b42:	4620      	mov	r0, r4
   b7b44:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b7b46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7b4a:	f7fc baaa 	b.w	b40a2 <_ZdlPvj>
   b7b4e:	bd70      	pop	{r4, r5, r6, pc}
   b7b50:	2003e6c4 	.word	0x2003e6c4

000b7b54 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b7b54:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b7b56:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7b58:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b7b5c:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b7b60:	6803      	ldr	r3, [r0, #0]
   b7b62:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b7b64:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7b66:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b7b68:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b7b6a:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b7b6c:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b7b6e:	f7ff ff82 	bl	b7a76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b7b72:	b002      	add	sp, #8
   b7b74:	bd10      	pop	{r4, pc}

000b7b76 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b7b76:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7b78:	b510      	push	{r4, lr}
      if (_M_empty())
   b7b7a:	b90a      	cbnz	r2, b7b80 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b7b7c:	f001 fe53 	bl	b9826 <_ZSt25__throw_bad_function_callv>
    }
   b7b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7b84:	68c3      	ldr	r3, [r0, #12]
   b7b86:	4718      	bx	r3

000b7b88 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b7b88:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b7b8a:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b7b8c:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b7b8e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b7b90:	dd03      	ble.n	b7b9a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b7b92:	f7ff fadb 	bl	b714c <realloc>
            if (!d) {
   b7b96:	b918      	cbnz	r0, b7ba0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b7b98:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b7b9a:	f7ff facf 	bl	b713c <free>
        T* d = nullptr;
   b7b9e:	2000      	movs	r0, #0
        data_ = d;
   b7ba0:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b7ba2:	60a5      	str	r5, [r4, #8]
        return true;
   b7ba4:	2001      	movs	r0, #1
   b7ba6:	e7f7      	b.n	b7b98 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b7ba8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b7ba8:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b7baa:	6883      	ldr	r3, [r0, #8]
   b7bac:	428b      	cmp	r3, r1
   b7bae:	da02      	bge.n	b7bb6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b7bb0:	f7ff ffea 	bl	b7b88 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b7bb4:	bd08      	pop	{r3, pc}
    return true;
   b7bb6:	2001      	movs	r0, #1
   b7bb8:	e7fc      	b.n	b7bb4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b7bba <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7bbe:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7bc0:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7bc2:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7bc4:	4419      	add	r1, r3
   b7bc6:	6883      	ldr	r3, [r0, #8]
   b7bc8:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7bca:	4604      	mov	r4, r0
   b7bcc:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7bce:	dc12      	bgt.n	b7bf6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b7bd0:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7bd2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7bd4:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7bd6:	1bd2      	subs	r2, r2, r7
   b7bd8:	4631      	mov	r1, r6
   b7bda:	1970      	adds	r0, r6, r5
   b7bdc:	f002 feab 	bl	ba936 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b7be0:	462a      	mov	r2, r5
   b7be2:	4641      	mov	r1, r8
   b7be4:	4630      	mov	r0, r6
   b7be6:	f002 fe98 	bl	ba91a <memcpy>
    size_ += n;
   b7bea:	6863      	ldr	r3, [r4, #4]
   b7bec:	442b      	add	r3, r5
   b7bee:	6063      	str	r3, [r4, #4]
    return true;
   b7bf0:	2001      	movs	r0, #1
}
   b7bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7bf6:	f7ff ffc7 	bl	b7b88 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b7bfa:	2800      	cmp	r0, #0
   b7bfc:	d1e8      	bne.n	b7bd0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b7bfe:	e7f8      	b.n	b7bf2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b7c00 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7c02:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7c04:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b7c08:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7c0a:	4604      	mov	r4, r0
   b7c0c:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7c0e:	da0b      	bge.n	b7c28 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b7c10:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7c12:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7c14:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7c16:	1b52      	subs	r2, r2, r5
   b7c18:	1c48      	adds	r0, r1, #1
   b7c1a:	f002 fe8c 	bl	ba936 <memmove>
    new(p) T(std::move(value));
   b7c1e:	557e      	strb	r6, [r7, r5]
    ++size_;
   b7c20:	6863      	ldr	r3, [r4, #4]
   b7c22:	3301      	adds	r3, #1
   b7c24:	6063      	str	r3, [r4, #4]
}
   b7c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7c28:	3101      	adds	r1, #1
   b7c2a:	f7ff ffad 	bl	b7b88 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b7c2e:	2800      	cmp	r0, #0
   b7c30:	d1ee      	bne.n	b7c10 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b7c32:	e7f8      	b.n	b7c26 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b7c34 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7c34:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b7c36:	6841      	ldr	r1, [r0, #4]
   b7c38:	f7ff bfe2 	b.w	b7c00 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b7c3c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7c3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7c40:	4604      	mov	r4, r0
   b7c42:	461d      	mov	r5, r3
   b7c44:	460f      	mov	r7, r1
   b7c46:	ab01      	add	r3, sp, #4
   b7c48:	4690      	mov	r8, r2
   b7c4a:	460a      	mov	r2, r1
   b7c4c:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7c50:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b7c54:	f7ff fb10 	bl	b7278 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b7c58:	1cae      	adds	r6, r5, #2
   b7c5a:	6863      	ldr	r3, [r4, #4]
   b7c5c:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b7c5e:	f1b9 0f00 	cmp.w	r9, #0
   b7c62:	d126      	bne.n	b7cb2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b7c64:	b328      	cbz	r0, b7cb2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7c66:	4433      	add	r3, r6
   b7c68:	1a1b      	subs	r3, r3, r0
   b7c6a:	2bff      	cmp	r3, #255	; 0xff
   b7c6c:	d809      	bhi.n	b7c82 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b7c6e:	9901      	ldr	r1, [sp, #4]
   b7c70:	4620      	mov	r0, r4
   b7c72:	f7ff fe71 	bl	b7958 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7c76:	6861      	ldr	r1, [r4, #4]
   b7c78:	4620      	mov	r0, r4
   b7c7a:	4431      	add	r1, r6
   b7c7c:	f7ff ff94 	bl	b7ba8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7c80:	b918      	cbnz	r0, b7c8a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b7c82:	6860      	ldr	r0, [r4, #4]
}
   b7c84:	b003      	add	sp, #12
   b7c86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b7c8a:	1c6a      	adds	r2, r5, #1
   b7c8c:	9901      	ldr	r1, [sp, #4]
   b7c8e:	b2d2      	uxtb	r2, r2
   b7c90:	4620      	mov	r0, r4
   b7c92:	f7ff ffb5 	bl	b7c00 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b7c96:	9901      	ldr	r1, [sp, #4]
   b7c98:	463a      	mov	r2, r7
   b7c9a:	3101      	adds	r1, #1
   b7c9c:	4620      	mov	r0, r4
   b7c9e:	f7ff ffaf 	bl	b7c00 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b7ca2:	9901      	ldr	r1, [sp, #4]
   b7ca4:	462b      	mov	r3, r5
   b7ca6:	4642      	mov	r2, r8
   b7ca8:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b7caa:	4620      	mov	r0, r4
   b7cac:	f7ff ff85 	bl	b7bba <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b7cb0:	e7e7      	b.n	b7c82 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7cb2:	18f1      	adds	r1, r6, r3
   b7cb4:	29ff      	cmp	r1, #255	; 0xff
   b7cb6:	d8e4      	bhi.n	b7c82 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7cb8:	4620      	mov	r0, r4
   b7cba:	f7ff ff75 	bl	b7ba8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7cbe:	2800      	cmp	r0, #0
   b7cc0:	d0df      	beq.n	b7c82 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b7cc2:	1c69      	adds	r1, r5, #1
   b7cc4:	b2c9      	uxtb	r1, r1
   b7cc6:	4620      	mov	r0, r4
   b7cc8:	f7ff ffb4 	bl	b7c34 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b7ccc:	4639      	mov	r1, r7
   b7cce:	4620      	mov	r0, r4
   b7cd0:	f7ff ffb0 	bl	b7c34 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b7cd4:	6861      	ldr	r1, [r4, #4]
   b7cd6:	462b      	mov	r3, r5
   b7cd8:	4642      	mov	r2, r8
   b7cda:	e7e6      	b.n	b7caa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b7cdc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7cdc:	b430      	push	{r4, r5}
   b7cde:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b7ce2:	b11a      	cbz	r2, b7cec <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b7ce4:	9502      	str	r5, [sp, #8]
}
   b7ce6:	bc30      	pop	{r4, r5}
   b7ce8:	f7ff bfa8 	b.w	b7c3c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b7cec:	6840      	ldr	r0, [r0, #4]
}
   b7cee:	bc30      	pop	{r4, r5}
   b7cf0:	4770      	bx	lr

000b7cf2 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b7cf2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b7cf4:	2300      	movs	r3, #0
   b7cf6:	e9c0 3300 	strd	r3, r3, [r0]
   b7cfa:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b7cfc:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7cfe:	9300      	str	r3, [sp, #0]
   b7d00:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b7d02:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7d06:	4619      	mov	r1, r3
   b7d08:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b7d0c:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7d0e:	f7ff ffe5 	bl	b7cdc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b7d12:	4620      	mov	r0, r4
   b7d14:	b004      	add	sp, #16
   b7d16:	bd10      	pop	{r4, pc}

000b7d18 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7d18:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7d1c:	4604      	mov	r4, r0
   b7d1e:	460d      	mov	r5, r1
   b7d20:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7d22:	d914      	bls.n	b7d4e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7d24:	4290      	cmp	r0, r2
   b7d26:	d213      	bcs.n	b7d50 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7d28:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7d2c:	1a75      	subs	r5, r6, r1
   b7d2e:	f1a1 0708 	sub.w	r7, r1, #8
   b7d32:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7d34:	42b7      	cmp	r7, r6
   b7d36:	d018      	beq.n	b7d6a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7d38:	b11c      	cbz	r4, b7d42 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7d3a:	4631      	mov	r1, r6
   b7d3c:	4620      	mov	r0, r4
   b7d3e:	f7ff fe90 	bl	b7a62 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b7d42:	1d30      	adds	r0, r6, #4
   b7d44:	f7ff fe97 	bl	b7a76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7d48:	3e08      	subs	r6, #8
   b7d4a:	3c08      	subs	r4, #8
   b7d4c:	e7f2      	b.n	b7d34 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7d4e:	d00c      	beq.n	b7d6a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7d50:	42b5      	cmp	r5, r6
   b7d52:	d00a      	beq.n	b7d6a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7d54:	b11c      	cbz	r4, b7d5e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7d56:	4629      	mov	r1, r5
   b7d58:	4620      	mov	r0, r4
   b7d5a:	f7ff fe82 	bl	b7a62 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7d5e:	1d28      	adds	r0, r5, #4
   b7d60:	f7ff fe89 	bl	b7a76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7d64:	3508      	adds	r5, #8
   b7d66:	3408      	adds	r4, #8
   b7d68:	e7f2      	b.n	b7d50 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7d6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7d6e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7d70:	6846      	ldr	r6, [r0, #4]
   b7d72:	4668      	mov	r0, sp
   b7d74:	f7ff fe75 	bl	b7a62 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7d78:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b7d7c:	429f      	cmp	r7, r3
   b7d7e:	db12      	blt.n	b7da6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b7d80:	3701      	adds	r7, #1
        if (n > 0) {
   b7d82:	2f00      	cmp	r7, #0
   b7d84:	dd29      	ble.n	b7dda <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b7d86:	00f8      	lsls	r0, r7, #3
   b7d88:	f7ff f9d0 	bl	b712c <malloc>
            if (!d) {
   b7d8c:	4605      	mov	r5, r0
   b7d8e:	b1f0      	cbz	r0, b7dce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b7d90:	e9d4 1200 	ldrd	r1, r2, [r4]
   b7d94:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7d98:	f7ff ffbe 	bl	b7d18 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7d9c:	6820      	ldr	r0, [r4, #0]
   b7d9e:	f7ff f9cd 	bl	b713c <free>
        data_ = d;
   b7da2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b7da4:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b7da6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7da8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7daa:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b7dae:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7db2:	4631      	mov	r1, r6
   b7db4:	f106 0008 	add.w	r0, r6, #8
   b7db8:	f7ff ffae 	bl	b7d18 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7dbc:	b11e      	cbz	r6, b7dc6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b7dbe:	4669      	mov	r1, sp
   b7dc0:	4630      	mov	r0, r6
   b7dc2:	f7ff fe4e 	bl	b7a62 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b7dc6:	6863      	ldr	r3, [r4, #4]
   b7dc8:	3301      	adds	r3, #1
   b7dca:	6063      	str	r3, [r4, #4]
    return true;
   b7dcc:	2501      	movs	r5, #1
   b7dce:	a801      	add	r0, sp, #4
   b7dd0:	f7ff fe51 	bl	b7a76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7dd4:	4628      	mov	r0, r5
   b7dd6:	b003      	add	sp, #12
   b7dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b7dda:	2500      	movs	r5, #0
   b7ddc:	e7de      	b.n	b7d9c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b7dde <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b7de0:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7de4:	4605      	mov	r5, r0
   b7de6:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b7de8:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b7dec:	42a6      	cmp	r6, r4
   b7dee:	d005      	beq.n	b7dfc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b7df0:	4639      	mov	r1, r7
   b7df2:	4620      	mov	r0, r4
   b7df4:	f7ff fcff 	bl	b77f6 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b7df8:	b108      	cbz	r0, b7dfe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b7dfa:	b914      	cbnz	r4, b7e02 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b7dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b7dfe:	3408      	adds	r4, #8
   b7e00:	e7f4      	b.n	b7dec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b7e02:	1d20      	adds	r0, r4, #4
   b7e04:	f7ff fe37 	bl	b7a76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b7e08:	e9d5 3200 	ldrd	r3, r2, [r5]
   b7e0c:	f104 0108 	add.w	r1, r4, #8
   b7e10:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7e14:	4620      	mov	r0, r4
   b7e16:	f7ff ff7f 	bl	b7d18 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b7e1a:	686b      	ldr	r3, [r5, #4]
   b7e1c:	3b01      	subs	r3, #1
   b7e1e:	606b      	str	r3, [r5, #4]
    return true;
   b7e20:	e7ec      	b.n	b7dfc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b7e24 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7e28:	4605      	mov	r5, r0
   b7e2a:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b7e2c:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7e2e:	460c      	mov	r4, r1
        WiringBleLock lk;
   b7e30:	f7ff faac 	bl	b738c <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b7e34:	682e      	ldr	r6, [r5, #0]
   b7e36:	1ef3      	subs	r3, r6, #3
   b7e38:	2b0d      	cmp	r3, #13
   b7e3a:	d83c      	bhi.n	b7eb6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7e3c:	e8df f013 	tbh	[pc, r3, lsl #1]
   b7e40:	0053000e 	.word	0x0053000e
   b7e44:	00d1003b 	.word	0x00d1003b
   b7e48:	003b003b 	.word	0x003b003b
   b7e4c:	003b003b 	.word	0x003b003b
   b7e50:	009b003b 	.word	0x009b003b
   b7e54:	009b009b 	.word	0x009b009b
   b7e58:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b7e5c:	a804      	add	r0, sp, #16
   b7e5e:	f7ff fc95 	bl	b778c <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b7e62:	9b04      	ldr	r3, [sp, #16]
   b7e64:	89aa      	ldrh	r2, [r5, #12]
   b7e66:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b7e68:	6869      	ldr	r1, [r5, #4]
   b7e6a:	9804      	ldr	r0, [sp, #16]
   b7e6c:	3108      	adds	r1, #8
   b7e6e:	3002      	adds	r0, #2
   b7e70:	f7ff faa6 	bl	b73c0 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b7e74:	a904      	add	r1, sp, #16
   b7e76:	a806      	add	r0, sp, #24
   b7e78:	f7ff fdf3 	bl	b7a62 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b7e7c:	a906      	add	r1, sp, #24
   b7e7e:	f104 0018 	add.w	r0, r4, #24
   b7e82:	f7ff ff73 	bl	b7d6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b7e86:	4605      	mov	r5, r0
   b7e88:	a807      	add	r0, sp, #28
   b7e8a:	f7ff fdf4 	bl	b7a76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7e8e:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b7e90:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b7e92:	b9b5      	cbnz	r5, b7ec2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b7e94:	4b5d      	ldr	r3, [pc, #372]	; (b800c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b7e96:	495e      	ldr	r1, [pc, #376]	; (b8010 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7e98:	9300      	str	r3, [sp, #0]
   b7e9a:	2032      	movs	r0, #50	; 0x32
   b7e9c:	462b      	mov	r3, r5
   b7e9e:	aa06      	add	r2, sp, #24
   b7ea0:	9507      	str	r5, [sp, #28]
   b7ea2:	f7ff f8af 	bl	b7004 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b7ea6:	9b04      	ldr	r3, [sp, #16]
   b7ea8:	4629      	mov	r1, r5
   b7eaa:	8818      	ldrh	r0, [r3, #0]
   b7eac:	f7fe fef0 	bl	b6c90 <hal_ble_gap_disconnect>
   b7eb0:	a805      	add	r0, sp, #20
   b7eb2:	f7ff fde0 	bl	b7a76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b7eb6:	a803      	add	r0, sp, #12
   b7eb8:	f7ff fa76 	bl	b73a8 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b7ebc:	b00e      	add	sp, #56	; 0x38
   b7ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b7ec2:	4a54      	ldr	r2, [pc, #336]	; (b8014 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b7ec4:	9200      	str	r2, [sp, #0]
   b7ec6:	2300      	movs	r3, #0
   b7ec8:	4951      	ldr	r1, [pc, #324]	; (b8010 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7eca:	9307      	str	r3, [sp, #28]
   b7ecc:	aa06      	add	r2, sp, #24
   b7ece:	2001      	movs	r0, #1
   b7ed0:	f7ff f898 	bl	b7004 <log_message>
                if (impl->connectedCallback_) {
   b7ed4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b7ed6:	2b00      	cmp	r3, #0
   b7ed8:	d0ea      	beq.n	b7eb0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b7eda:	a904      	add	r1, sp, #16
   b7edc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7ee0:	f7ff fe49 	bl	b7b76 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b7ee4:	e7e4      	b.n	b7eb0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7ee6:	89a9      	ldrh	r1, [r5, #12]
   b7ee8:	4620      	mov	r0, r4
   b7eea:	f7ff fba7 	bl	b763c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7eee:	4606      	mov	r6, r0
   b7ef0:	2800      	cmp	r0, #0
   b7ef2:	d0e0      	beq.n	b7eb6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b7ef4:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b7ef6:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b7efa:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7efe:	8029      	strh	r1, [r5, #0]
   b7f00:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b7f04:	429a      	cmp	r2, r3
   b7f06:	d003      	beq.n	b7f10 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b7f08:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7f0c:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b7f0e:	e7f9      	b.n	b7f04 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b7f10:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b7f14:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7f18:	45b8      	cmp	r8, r7
   b7f1a:	d004      	beq.n	b7f26 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b7f1c:	1d38      	adds	r0, r7, #4
   b7f1e:	f7ff fdaa 	bl	b7a76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7f22:	3708      	adds	r7, #8
   b7f24:	e7f8      	b.n	b7f18 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b7f26:	2300      	movs	r3, #0
   b7f28:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b7f2a:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b7f2e:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7f32:	45b8      	cmp	r8, r7
   b7f34:	d004      	beq.n	b7f40 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b7f36:	1d38      	adds	r0, r7, #4
   b7f38:	f7ff fd9d 	bl	b7a76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7f3c:	3708      	adds	r7, #8
   b7f3e:	e7f8      	b.n	b7f32 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b7f40:	2300      	movs	r3, #0
   b7f42:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b7f44:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b7f46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7f48:	b123      	cbz	r3, b7f54 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b7f4a:	4631      	mov	r1, r6
   b7f4c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7f50:	f7ff fe11 	bl	b7b76 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b7f54:	2300      	movs	r3, #0
   b7f56:	2220      	movs	r2, #32
   b7f58:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b7f5c:	4a2e      	ldr	r2, [pc, #184]	; (b8018 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b7f5e:	9200      	str	r2, [sp, #0]
   b7f60:	492b      	ldr	r1, [pc, #172]	; (b8010 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7f62:	aa06      	add	r2, sp, #24
   b7f64:	2001      	movs	r0, #1
   b7f66:	f7ff f84d 	bl	b7004 <log_message>
                    impl->peers_.removeOne(*peer);
   b7f6a:	4631      	mov	r1, r6
   b7f6c:	f104 0018 	add.w	r0, r4, #24
   b7f70:	f7ff ff35 	bl	b7dde <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b7f74:	e79f      	b.n	b7eb6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7f76:	89a9      	ldrh	r1, [r5, #12]
   b7f78:	4620      	mov	r0, r4
   b7f7a:	f7ff fb5f 	bl	b763c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7f7e:	2800      	cmp	r0, #0
   b7f80:	d099      	beq.n	b7eb6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b7f82:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b7f84:	2b00      	cmp	r3, #0
   b7f86:	d096      	beq.n	b7eb6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b7f88:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7f8a:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b7f8c:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7f90:	d001      	beq.n	b7f96 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b7f92:	2e10      	cmp	r6, #16
   b7f94:	d117      	bne.n	b7fc6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b7f96:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b7f98:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b7f9a:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b7f9c:	2506      	movs	r5, #6
                        };
   b7f9e:	f88d 3015 	strb.w	r3, [sp, #21]
   b7fa2:	9104      	str	r1, [sp, #16]
   b7fa4:	f88d 2014 	strb.w	r2, [sp, #20]
   b7fa8:	9006      	str	r0, [sp, #24]
   b7faa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b7fae:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b7fb0:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b7fb4:	9508      	str	r5, [sp, #32]
   b7fb6:	e883 0003 	stmia.w	r3, {r0, r1}
   b7fba:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b7fbc:	a906      	add	r1, sp, #24
   b7fbe:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7fc2:	4798      	blx	r3
   b7fc4:	e777      	b.n	b7eb6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b7fc6:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7fc8:	bf01      	itttt	eq
   b7fca:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b7fcc:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7fce:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b7fd2:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b7fd4:	bf0f      	iteee	eq
   b7fd6:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b7fda:	461a      	movne	r2, r3
   b7fdc:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b7fde:	461d      	movne	r5, r3
   b7fe0:	e7dd      	b.n	b7f9e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7fe2:	89a9      	ldrh	r1, [r5, #12]
   b7fe4:	4620      	mov	r0, r4
   b7fe6:	f7ff fb29 	bl	b763c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b7fea:	4601      	mov	r1, r0
   b7fec:	2800      	cmp	r0, #0
   b7fee:	f43f af62 	beq.w	b7eb6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7ff2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b7ff4:	2b00      	cmp	r3, #0
   b7ff6:	f43f af5e 	beq.w	b7eb6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b7ffa:	686b      	ldr	r3, [r5, #4]
   b7ffc:	9306      	str	r3, [sp, #24]
   b7ffe:	aa06      	add	r2, sp, #24
   b8000:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b8002:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b8006:	4798      	blx	r3
   b8008:	e755      	b.n	b7eb6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b800a:	bf00      	nop
   b800c:	000bce7c 	.word	0x000bce7c
   b8010:	000bcdfb 	.word	0x000bcdfb
   b8014:	000bcea2 	.word	0x000bcea2
   b8018:	000bcebf 	.word	0x000bcebf

000b801c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b801c:	b513      	push	{r0, r1, r4, lr}
   b801e:	460b      	mov	r3, r1
   b8020:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8022:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8026:	466c      	mov	r4, sp
   b8028:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b802c:	e893 0003 	ldmia.w	r3, {r0, r1}
   b8030:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b8034:	e894 0003 	ldmia.w	r4, {r0, r1}
   b8038:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b803c:	b002      	add	sp, #8
   b803e:	bd10      	pop	{r4, pc}

000b8040 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b8040:	b538      	push	{r3, r4, r5, lr}
   b8042:	4605      	mov	r5, r0
   b8044:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b8046:	f7ff ffe9 	bl	b801c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b804a:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b804c:	68a2      	ldr	r2, [r4, #8]
   b804e:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8050:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8052:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8054:	68e2      	ldr	r2, [r4, #12]
   b8056:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8058:	60e3      	str	r3, [r4, #12]
      }
   b805a:	bd38      	pop	{r3, r4, r5, pc}

000b805c <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b805c:	b570      	push	{r4, r5, r6, lr}
   b805e:	4604      	mov	r4, r0
   b8060:	b08c      	sub	sp, #48	; 0x30
   b8062:	460e      	mov	r6, r1
   b8064:	9201      	str	r2, [sp, #4]
   b8066:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b8068:	f7ff fac8 	bl	b75fc <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b806c:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b806e:	9901      	ldr	r1, [sp, #4]
   b8070:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b8074:	f000 fd71 	bl	b8b5a <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b8078:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b807c:	b1cd      	cbz	r5, b80b2 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b807e:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b8080:	9502      	str	r5, [sp, #8]
   b8082:	a902      	add	r1, sp, #8
   b8084:	a804      	add	r0, sp, #16
   b8086:	9303      	str	r3, [sp, #12]
   b8088:	f7ff fcb4 	bl	b79f4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b808c:	2300      	movs	r3, #0
	__x.swap(*this);
   b808e:	a908      	add	r1, sp, #32
   b8090:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b8092:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b8094:	f7ff ffd4 	bl	b8040 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b8098:	4631      	mov	r1, r6
   b809a:	a808      	add	r0, sp, #32
   b809c:	f7ff ffd0 	bl	b8040 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b80a0:	a808      	add	r0, sp, #32
   b80a2:	f7ff f935 	bl	b7310 <_ZNSt14_Function_baseD1Ev>
   b80a6:	a804      	add	r0, sp, #16
   b80a8:	f7ff f932 	bl	b7310 <_ZNSt14_Function_baseD1Ev>
    }
   b80ac:	4620      	mov	r0, r4
   b80ae:	b00c      	add	sp, #48	; 0x30
   b80b0:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b80b2:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b80b4:	e7ea      	b.n	b808c <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b80b8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b80b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b80bc:	b087      	sub	sp, #28
   b80be:	461d      	mov	r5, r3
   b80c0:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b80c4:	4680      	mov	r8, r0
   b80c6:	468b      	mov	fp, r1
   b80c8:	4692      	mov	sl, r2
   b80ca:	9912      	ldr	r1, [sp, #72]	; 0x48
   b80cc:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b80ce:	2200      	movs	r2, #0
   b80d0:	2068      	movs	r0, #104	; 0x68
   b80d2:	9102      	str	r1, [sp, #8]
   b80d4:	9204      	str	r2, [sp, #16]
   b80d6:	f7fb ffde 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b80da:	1e06      	subs	r6, r0, #0
   b80dc:	f106 090c 	add.w	r9, r6, #12
   b80e0:	d018      	beq.n	b8114 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b80e2:	2201      	movs	r2, #1
	: _M_impl(__a)
   b80e4:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b80e6:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b80ea:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b80ec:	4a15      	ldr	r2, [pc, #84]	; (b8144 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b80ee:	f847 2b20 	str.w	r2, [r7], #32
   b80f2:	9b03      	ldr	r3, [sp, #12]
   b80f4:	9100      	str	r1, [sp, #0]
   b80f6:	465a      	mov	r2, fp
   b80f8:	4651      	mov	r1, sl
   b80fa:	4648      	mov	r0, r9
   b80fc:	f7ff ffae 	bl	b805c <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b8100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8102:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b8104:	682b      	ldr	r3, [r5, #0]
   b8106:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b8108:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b810a:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b810e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8110:	6823      	ldr	r3, [r4, #0]
   b8112:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b8114:	a904      	add	r1, sp, #16
   b8116:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b8118:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b811c:	f7ff fd1a 	bl	b7b54 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b8120:	a805      	add	r0, sp, #20
   b8122:	f7ff fca8 	bl	b7a76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b8126:	f8d8 3000 	ldr.w	r3, [r8]
   b812a:	b93b      	cbnz	r3, b813c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b812c:	4a06      	ldr	r2, [pc, #24]	; (b8148 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b812e:	4907      	ldr	r1, [pc, #28]	; (b814c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b8130:	200a      	movs	r0, #10
}
   b8132:	b007      	add	sp, #28
   b8134:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b8138:	f7fe bf5c 	b.w	b6ff4 <panic_>
}
   b813c:	b007      	add	sp, #28
   b813e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8142:	bf00      	nop
   b8144:	000bcf38 	.word	0x000bcf38
   b8148:	000b6d85 	.word	0x000b6d85
   b814c:	000bcde4 	.word	0x000bcde4

000b8150 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8150:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8154:	4604      	mov	r4, r0
   b8156:	460d      	mov	r5, r1
   b8158:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b815a:	d914      	bls.n	b8186 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b815c:	4290      	cmp	r0, r2
   b815e:	d213      	bcs.n	b8188 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8160:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8164:	1a75      	subs	r5, r6, r1
   b8166:	f1a1 0708 	sub.w	r7, r1, #8
   b816a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b816c:	42b7      	cmp	r7, r6
   b816e:	d018      	beq.n	b81a2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8170:	b11c      	cbz	r4, b817a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8172:	4631      	mov	r1, r6
   b8174:	4620      	mov	r0, r4
   b8176:	f7ff fc6a 	bl	b7a4e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b817a:	1d30      	adds	r0, r6, #4
   b817c:	f7ff fc7b 	bl	b7a76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8180:	3e08      	subs	r6, #8
   b8182:	3c08      	subs	r4, #8
   b8184:	e7f2      	b.n	b816c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8186:	d00c      	beq.n	b81a2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8188:	42b5      	cmp	r5, r6
   b818a:	d00a      	beq.n	b81a2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b818c:	b11c      	cbz	r4, b8196 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b818e:	4629      	mov	r1, r5
   b8190:	4620      	mov	r0, r4
   b8192:	f7ff fc5c 	bl	b7a4e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8196:	1d28      	adds	r0, r5, #4
   b8198:	f7ff fc6d 	bl	b7a76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b819c:	3508      	adds	r5, #8
   b819e:	3408      	adds	r4, #8
   b81a0:	e7f2      	b.n	b8188 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b81a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b81a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b81a4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b81a6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b81a8:	4605      	mov	r5, r0
        if (n > 0) {
   b81aa:	dd11      	ble.n	b81d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b81ac:	00f0      	lsls	r0, r6, #3
   b81ae:	f7fe ffbd 	bl	b712c <malloc>
            if (!d) {
   b81b2:	4604      	mov	r4, r0
   b81b4:	b158      	cbz	r0, b81ce <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b81b6:	e9d5 1200 	ldrd	r1, r2, [r5]
   b81ba:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b81be:	f7ff ffc7 	bl	b8150 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b81c2:	6828      	ldr	r0, [r5, #0]
   b81c4:	f7fe ffba 	bl	b713c <free>
        data_ = d;
   b81c8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b81ca:	60ae      	str	r6, [r5, #8]
        return true;
   b81cc:	2001      	movs	r0, #1
    }
   b81ce:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b81d0:	2400      	movs	r4, #0
   b81d2:	e7f6      	b.n	b81c2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b81d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b81d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b81d6:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b81d8:	6845      	ldr	r5, [r0, #4]
   b81da:	4668      	mov	r0, sp
   b81dc:	f7ff fc37 	bl	b7a4e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b81e0:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b81e4:	4299      	cmp	r1, r3
   b81e6:	da10      	bge.n	b820a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b81e8:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b81ea:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b81ec:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b81f0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b81f4:	4629      	mov	r1, r5
   b81f6:	f105 0008 	add.w	r0, r5, #8
   b81fa:	f7ff ffa9 	bl	b8150 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b81fe:	b98d      	cbnz	r5, b8224 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b8200:	6863      	ldr	r3, [r4, #4]
   b8202:	3301      	adds	r3, #1
   b8204:	6063      	str	r3, [r4, #4]
    return true;
   b8206:	2601      	movs	r6, #1
   b8208:	e006      	b.n	b8218 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b820a:	3101      	adds	r1, #1
   b820c:	4620      	mov	r0, r4
   b820e:	f7ff ffc9 	bl	b81a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8212:	4606      	mov	r6, r0
   b8214:	2800      	cmp	r0, #0
   b8216:	d1e7      	bne.n	b81e8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b8218:	a801      	add	r0, sp, #4
   b821a:	f7ff fc2c 	bl	b7a76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b821e:	4630      	mov	r0, r6
   b8220:	b002      	add	sp, #8
   b8222:	bd70      	pop	{r4, r5, r6, pc}
   b8224:	4669      	mov	r1, sp
   b8226:	4628      	mov	r0, r5
   b8228:	f7ff fc11 	bl	b7a4e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b822c:	e7e8      	b.n	b8200 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b822e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b822e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8232:	4604      	mov	r4, r0
   b8234:	460d      	mov	r5, r1
   b8236:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8238:	d914      	bls.n	b8264 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b823a:	4290      	cmp	r0, r2
   b823c:	d213      	bcs.n	b8266 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b823e:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8242:	1a75      	subs	r5, r6, r1
   b8244:	f1a1 0708 	sub.w	r7, r1, #8
   b8248:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b824a:	42b7      	cmp	r7, r6
   b824c:	d018      	beq.n	b8280 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b824e:	b11c      	cbz	r4, b8258 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b8250:	4631      	mov	r1, r6
   b8252:	4620      	mov	r0, r4
   b8254:	f7ff fbed 	bl	b7a32 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8258:	1d30      	adds	r0, r6, #4
   b825a:	f7ff fc0c 	bl	b7a76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b825e:	3e08      	subs	r6, #8
   b8260:	3c08      	subs	r4, #8
   b8262:	e7f2      	b.n	b824a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8264:	d00c      	beq.n	b8280 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8266:	42b5      	cmp	r5, r6
   b8268:	d00a      	beq.n	b8280 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b826a:	b11c      	cbz	r4, b8274 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b826c:	4629      	mov	r1, r5
   b826e:	4620      	mov	r0, r4
   b8270:	f7ff fbdf 	bl	b7a32 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8274:	1d28      	adds	r0, r5, #4
   b8276:	f7ff fbfe 	bl	b7a76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b827a:	3508      	adds	r5, #8
   b827c:	3408      	adds	r4, #8
   b827e:	e7f2      	b.n	b8266 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8282 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b8282:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8284:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8286:	4605      	mov	r5, r0
        if (n > 0) {
   b8288:	dd11      	ble.n	b82ae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b828a:	00f0      	lsls	r0, r6, #3
   b828c:	f7fe ff4e 	bl	b712c <malloc>
            if (!d) {
   b8290:	4604      	mov	r4, r0
   b8292:	b158      	cbz	r0, b82ac <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b8294:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8298:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b829c:	f7ff ffc7 	bl	b822e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b82a0:	6828      	ldr	r0, [r5, #0]
   b82a2:	f7fe ff4b 	bl	b713c <free>
        data_ = d;
   b82a6:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b82a8:	60ae      	str	r6, [r5, #8]
        return true;
   b82aa:	2001      	movs	r0, #1
    }
   b82ac:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b82ae:	2400      	movs	r4, #0
   b82b0:	e7f6      	b.n	b82a0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b82b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b82b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b82b4:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b82b6:	6845      	ldr	r5, [r0, #4]
   b82b8:	4668      	mov	r0, sp
   b82ba:	f7ff fbba 	bl	b7a32 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b82be:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b82c2:	4299      	cmp	r1, r3
   b82c4:	da10      	bge.n	b82e8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b82c6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b82c8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b82ca:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b82ce:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b82d2:	4629      	mov	r1, r5
   b82d4:	f105 0008 	add.w	r0, r5, #8
   b82d8:	f7ff ffa9 	bl	b822e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b82dc:	b98d      	cbnz	r5, b8302 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b82de:	6863      	ldr	r3, [r4, #4]
   b82e0:	3301      	adds	r3, #1
   b82e2:	6063      	str	r3, [r4, #4]
    return true;
   b82e4:	2601      	movs	r6, #1
   b82e6:	e006      	b.n	b82f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b82e8:	3101      	adds	r1, #1
   b82ea:	4620      	mov	r0, r4
   b82ec:	f7ff ffc9 	bl	b8282 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b82f0:	4606      	mov	r6, r0
   b82f2:	2800      	cmp	r0, #0
   b82f4:	d1e7      	bne.n	b82c6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b82f6:	a801      	add	r0, sp, #4
   b82f8:	f7ff fbbd 	bl	b7a76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b82fc:	4630      	mov	r0, r6
   b82fe:	b002      	add	sp, #8
   b8300:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b8302:	4669      	mov	r1, sp
   b8304:	4628      	mov	r0, r5
   b8306:	f7ff fb94 	bl	b7a32 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b830a:	e7e8      	b.n	b82de <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b830c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b830c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8310:	4617      	mov	r7, r2
   b8312:	b0a1      	sub	sp, #132	; 0x84
   b8314:	4680      	mov	r8, r0
    WiringBleLock lk;
   b8316:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b8318:	460e      	mov	r6, r1
    WiringBleLock lk;
   b831a:	f7ff f837 	bl	b738c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b831e:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b8320:	7923      	ldrb	r3, [r4, #4]
   b8322:	b953      	cbnz	r3, b833a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b8324:	4639      	mov	r1, r7
   b8326:	4640      	mov	r0, r8
   b8328:	f7ff fb83 	bl	b7a32 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b832c:	a80a      	add	r0, sp, #40	; 0x28
   b832e:	f7ff f83b 	bl	b73a8 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b8332:	4640      	mov	r0, r8
   b8334:	b021      	add	sp, #132	; 0x84
   b8336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b833a:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b833c:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b8340:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b8344:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b8346:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b834a:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b834e:	9b03      	ldr	r3, [sp, #12]
   b8350:	429d      	cmp	r5, r3
   b8352:	d021      	beq.n	b8398 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b8354:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b8358:	4658      	mov	r0, fp
   b835a:	f109 0114 	add.w	r1, r9, #20
   b835e:	f7ff f8c2 	bl	b74e6 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b8362:	b1b8      	cbz	r0, b8394 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b8364:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b8368:	4650      	mov	r0, sl
   b836a:	f7ff f8bc 	bl	b74e6 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b836e:	b188      	cbz	r0, b8394 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b8370:	6823      	ldr	r3, [r4, #0]
   b8372:	f8d9 2000 	ldr.w	r2, [r9]
   b8376:	4053      	eors	r3, r2
   b8378:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b837c:	d10a      	bne.n	b8394 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b837e:	2220      	movs	r2, #32
   b8380:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b8384:	4a5e      	ldr	r2, [pc, #376]	; (b8500 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b8386:	9200      	str	r2, [sp, #0]
   b8388:	aa15      	add	r2, sp, #84	; 0x54
   b838a:	495e      	ldr	r1, [pc, #376]	; (b8504 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b838c:	2032      	movs	r0, #50	; 0x32
   b838e:	f7fe fe39 	bl	b7004 <log_message>
   b8392:	e7c7      	b.n	b8324 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b8394:	3508      	adds	r5, #8
   b8396:	e7da      	b.n	b834e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b8398:	4650      	mov	r0, sl
   b839a:	f7ff f875 	bl	b7488 <_ZNK8particle7BleUuid7isValidEv>
   b839e:	b960      	cbnz	r0, b83ba <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b83a0:	4959      	ldr	r1, [pc, #356]	; (b8508 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b83a2:	2201      	movs	r2, #1
   b83a4:	a815      	add	r0, sp, #84	; 0x54
   b83a6:	ad15      	add	r5, sp, #84	; 0x54
   b83a8:	f7ff f846 	bl	b7438 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b83ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b83ae:	46d4      	mov	ip, sl
   b83b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b83b4:	682b      	ldr	r3, [r5, #0]
   b83b6:	f8cc 3000 	str.w	r3, [ip]
   b83ba:	6833      	ldr	r3, [r6, #0]
   b83bc:	e9d3 5300 	ldrd	r5, r3, [r3]
   b83c0:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b83c4:	455d      	cmp	r5, fp
   b83c6:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b83c8:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b83ca:	d06e      	beq.n	b84aa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b83cc:	f855 0b08 	ldr.w	r0, [r5], #8
   b83d0:	f7ff f889 	bl	b74e6 <_ZNK8particle7BleUuideqERKS0_>
   b83d4:	2800      	cmp	r0, #0
   b83d6:	d0f5      	beq.n	b83c4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b83d8:	f104 0a14 	add.w	sl, r4, #20
   b83dc:	4650      	mov	r0, sl
   b83de:	f7ff f853 	bl	b7488 <_ZNK8particle7BleUuid7isValidEv>
   b83e2:	b988      	cbnz	r0, b8408 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b83e4:	4b49      	ldr	r3, [pc, #292]	; (b850c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b83e6:	4948      	ldr	r1, [pc, #288]	; (b8508 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b83e8:	881a      	ldrh	r2, [r3, #0]
   b83ea:	3201      	adds	r2, #1
   b83ec:	b292      	uxth	r2, r2
   b83ee:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b83f0:	a815      	add	r0, sp, #84	; 0x54
   b83f2:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b83f4:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b83f6:	f7ff f83e 	bl	b7476 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b83fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b83fc:	46d4      	mov	ip, sl
   b83fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b8402:	682b      	ldr	r3, [r5, #0]
   b8404:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b8408:	4b41      	ldr	r3, [pc, #260]	; (b8510 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b840a:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b840c:	2228      	movs	r2, #40	; 0x28
   b840e:	2100      	movs	r1, #0
   b8410:	a816      	add	r0, sp, #88	; 0x58
   b8412:	f002 faaa 	bl	ba96a <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b8416:	4651      	mov	r1, sl
   b8418:	a804      	add	r0, sp, #16
   b841a:	f7ff f847 	bl	b74ac <_ZN8particle7BleUuid7halUUIDEv>
   b841e:	ab04      	add	r3, sp, #16
   b8420:	aa18      	add	r2, sp, #96	; 0x60
   b8422:	f10d 0c20 	add.w	ip, sp, #32
   b8426:	6818      	ldr	r0, [r3, #0]
   b8428:	6859      	ldr	r1, [r3, #4]
   b842a:	4615      	mov	r5, r2
   b842c:	c503      	stmia	r5!, {r0, r1}
   b842e:	3308      	adds	r3, #8
   b8430:	4563      	cmp	r3, ip
   b8432:	462a      	mov	r2, r5
   b8434:	d1f7      	bne.n	b8426 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b8436:	6818      	ldr	r0, [r3, #0]
   b8438:	6028      	str	r0, [r5, #0]
    return value_;
   b843a:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b843c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b8440:	f8d9 3000 	ldr.w	r3, [r9]
   b8444:	8a9b      	ldrh	r3, [r3, #20]
   b8446:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b844a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b844c:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b844e:	4b31      	ldr	r3, [pc, #196]	; (b8514 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b8450:	2200      	movs	r2, #0
   b8452:	1da1      	adds	r1, r4, #6
   b8454:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b8456:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b845a:	f7fe fc4b 	bl	b6cf4 <hal_ble_gatt_server_add_characteristic>
   b845e:	2800      	cmp	r0, #0
   b8460:	f47f af60 	bne.w	b8324 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b8464:	2301      	movs	r3, #1
   b8466:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b8468:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b846a:	4639      	mov	r1, r7
        return characteristics_;
   b846c:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b846e:	a80d      	add	r0, sp, #52	; 0x34
   b8470:	f7ff fadf 	bl	b7a32 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8474:	4620      	mov	r0, r4
   b8476:	a90d      	add	r1, sp, #52	; 0x34
   b8478:	f7ff ff1b 	bl	b82b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b847c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b847e:	a80e      	add	r0, sp, #56	; 0x38
   b8480:	f7ff faf9 	bl	b7a76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8484:	2c00      	cmp	r4, #0
   b8486:	f47f af4d 	bne.w	b8324 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b848a:	2320      	movs	r3, #32
   b848c:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b8490:	4b21      	ldr	r3, [pc, #132]	; (b8518 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b8492:	9300      	str	r3, [sp, #0]
   b8494:	aa0d      	add	r2, sp, #52	; 0x34
   b8496:	4623      	mov	r3, r4
   b8498:	e777      	b.n	b838a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b849a:	4639      	mov	r1, r7
   b849c:	4640      	mov	r0, r8
   b849e:	f7ff fac8 	bl	b7a32 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b84a2:	a80c      	add	r0, sp, #48	; 0x30
   b84a4:	f7ff fae7 	bl	b7a76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b84a8:	e740      	b.n	b832c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b84aa:	a80b      	add	r0, sp, #44	; 0x2c
   b84ac:	f7ff f94a 	bl	b7744 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b84b0:	4651      	mov	r1, sl
   b84b2:	a815      	add	r0, sp, #84	; 0x54
   b84b4:	f7fe fffa 	bl	b74ac <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b84b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b84ba:	2300      	movs	r3, #0
   b84bc:	3214      	adds	r2, #20
   b84be:	a915      	add	r1, sp, #84	; 0x54
   b84c0:	2001      	movs	r0, #1
   b84c2:	f7fe fbef 	bl	b6ca4 <hal_ble_gatt_server_add_service>
   b84c6:	2800      	cmp	r0, #0
   b84c8:	d1e7      	bne.n	b849a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b84ca:	6835      	ldr	r5, [r6, #0]
   b84cc:	a90b      	add	r1, sp, #44	; 0x2c
   b84ce:	a80d      	add	r0, sp, #52	; 0x34
   b84d0:	f7ff fabd 	bl	b7a4e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b84d4:	4628      	mov	r0, r5
   b84d6:	a90d      	add	r1, sp, #52	; 0x34
   b84d8:	f7ff fe7c 	bl	b81d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b84dc:	4605      	mov	r5, r0
   b84de:	a80e      	add	r0, sp, #56	; 0x38
   b84e0:	f7ff fac9 	bl	b7a76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b84e4:	2d00      	cmp	r5, #0
   b84e6:	d0d8      	beq.n	b849a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b84e8:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b84ea:	6853      	ldr	r3, [r2, #4]
   b84ec:	6812      	ldr	r2, [r2, #0]
   b84ee:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b84f2:	3b01      	subs	r3, #1
   b84f4:	a80c      	add	r0, sp, #48	; 0x30
   b84f6:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b84fa:	f7ff fabc 	bl	b7a76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b84fe:	e76b      	b.n	b83d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b8500:	000bcede 	.word	0x000bcede
   b8504:	000bcdfb 	.word	0x000bcdfb
   b8508:	000bcfa2 	.word	0x000bcfa2
   b850c:	2003e6bc 	.word	0x2003e6bc
   b8510:	002c0003 	.word	0x002c0003
   b8514:	000b78dd 	.word	0x000b78dd
   b8518:	000bcf09 	.word	0x000bcf09

000b851c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b851c:	4802      	ldr	r0, [pc, #8]	; (b8528 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b851e:	2300      	movs	r3, #0
   b8520:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b8522:	f7fe bc0f 	b.w	b6d44 <os_mutex_recursive_create>
   b8526:	bf00      	nop
   b8528:	2003e6c0 	.word	0x2003e6c0

000b852c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b852c:	2200      	movs	r2, #0
   b852e:	6840      	ldr	r0, [r0, #4]
   b8530:	4611      	mov	r1, r2
   b8532:	f7fe bdd3 	b.w	b70dc <network_listening>

000b8536 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8536:	2200      	movs	r2, #0
   b8538:	6840      	ldr	r0, [r0, #4]
   b853a:	4611      	mov	r1, r2
   b853c:	f7fe bdde 	b.w	b70fc <network_get_listen_timeout>

000b8540 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8540:	6840      	ldr	r0, [r0, #4]
   b8542:	2200      	movs	r2, #0
   b8544:	f7fe bdd2 	b.w	b70ec <network_set_listen_timeout>

000b8548 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8548:	6840      	ldr	r0, [r0, #4]
   b854a:	2200      	movs	r2, #0
   b854c:	f081 0101 	eor.w	r1, r1, #1
   b8550:	f7fe bdbc 	b.w	b70cc <network_listen>

000b8554 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8554:	2300      	movs	r3, #0
   b8556:	6840      	ldr	r0, [r0, #4]
   b8558:	461a      	mov	r2, r3
   b855a:	4619      	mov	r1, r3
   b855c:	f7fe bdae 	b.w	b70bc <network_off>

000b8560 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8560:	2300      	movs	r3, #0
   b8562:	6840      	ldr	r0, [r0, #4]
   b8564:	461a      	mov	r2, r3
   b8566:	4619      	mov	r1, r3
   b8568:	f7fe bda0 	b.w	b70ac <network_on>

000b856c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b856c:	2200      	movs	r2, #0
   b856e:	6840      	ldr	r0, [r0, #4]
   b8570:	4611      	mov	r1, r2
   b8572:	f7fe bd93 	b.w	b709c <network_ready>

000b8576 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8576:	2200      	movs	r2, #0
   b8578:	6840      	ldr	r0, [r0, #4]
   b857a:	4611      	mov	r1, r2
   b857c:	f7fe bd7e 	b.w	b707c <network_connecting>

000b8580 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8580:	6840      	ldr	r0, [r0, #4]
   b8582:	2200      	movs	r2, #0
   b8584:	2102      	movs	r1, #2
   b8586:	f7fe bd81 	b.w	b708c <network_disconnect>

000b858a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b858a:	2300      	movs	r3, #0
   b858c:	6840      	ldr	r0, [r0, #4]
   b858e:	461a      	mov	r2, r3
   b8590:	f7fe bd6c 	b.w	b706c <network_connect>

000b8594 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b8594:	4b02      	ldr	r3, [pc, #8]	; (b85a0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b8596:	2203      	movs	r2, #3
   b8598:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b859a:	4a02      	ldr	r2, [pc, #8]	; (b85a4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b859c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b859e:	4770      	bx	lr
   b85a0:	2003e6c8 	.word	0x2003e6c8
   b85a4:	000bcfcc 	.word	0x000bcfcc

000b85a8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b85a8:	4770      	bx	lr

000b85aa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b85aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b85ac:	4606      	mov	r6, r0
   b85ae:	4615      	mov	r5, r2
   b85b0:	460c      	mov	r4, r1
   b85b2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b85b4:	42bc      	cmp	r4, r7
   b85b6:	d006      	beq.n	b85c6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b85b8:	6833      	ldr	r3, [r6, #0]
   b85ba:	f814 1b01 	ldrb.w	r1, [r4], #1
   b85be:	689b      	ldr	r3, [r3, #8]
   b85c0:	4630      	mov	r0, r6
   b85c2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b85c4:	e7f6      	b.n	b85b4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b85c6:	4628      	mov	r0, r5
   b85c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b85ca <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b85ca:	7c00      	ldrb	r0, [r0, #16]
   b85cc:	2200      	movs	r2, #0
   b85ce:	f7fe bc09 	b.w	b6de4 <hal_i2c_write>

000b85d2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b85d2:	7c00      	ldrb	r0, [r0, #16]
   b85d4:	2100      	movs	r1, #0
   b85d6:	f7fe bc0d 	b.w	b6df4 <hal_i2c_available>

000b85da <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b85da:	7c00      	ldrb	r0, [r0, #16]
   b85dc:	2100      	movs	r1, #0
   b85de:	f7fe bc11 	b.w	b6e04 <hal_i2c_read>

000b85e2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b85e2:	7c00      	ldrb	r0, [r0, #16]
   b85e4:	2100      	movs	r1, #0
   b85e6:	f7fe bc15 	b.w	b6e14 <hal_i2c_peek>

000b85ea <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b85ea:	7c00      	ldrb	r0, [r0, #16]
   b85ec:	2100      	movs	r1, #0
   b85ee:	f7fe bc19 	b.w	b6e24 <hal_i2c_flush>

000b85f2 <_ZN7TwoWireD0Ev>:
   b85f2:	b510      	push	{r4, lr}
   b85f4:	2114      	movs	r1, #20
   b85f6:	4604      	mov	r4, r0
   b85f8:	f7fb fd53 	bl	b40a2 <_ZdlPvj>
   b85fc:	4620      	mov	r0, r4
   b85fe:	bd10      	pop	{r4, pc}

000b8600 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8600:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b8602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8606:	4604      	mov	r4, r0
   b8608:	4608      	mov	r0, r1
   b860a:	2100      	movs	r1, #0
   b860c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8610:	4b03      	ldr	r3, [pc, #12]	; (b8620 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b8612:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b8614:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b8616:	4611      	mov	r1, r2
   b8618:	f7fe fc0c 	bl	b6e34 <hal_i2c_init>
}
   b861c:	4620      	mov	r0, r4
   b861e:	bd10      	pop	{r4, pc}
   b8620:	000bd008 	.word	0x000bd008

000b8624 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b8624:	2300      	movs	r3, #0
   b8626:	7c00      	ldrb	r0, [r0, #16]
   b8628:	461a      	mov	r2, r3
   b862a:	4619      	mov	r1, r3
   b862c:	f7fe bbc2 	b.w	b6db4 <hal_i2c_begin>

000b8630 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b8630:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b8632:	2200      	movs	r2, #0
   b8634:	2314      	movs	r3, #20
   b8636:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b863a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b863e:	780b      	ldrb	r3, [r1, #0]
   b8640:	f88d 3008 	strb.w	r3, [sp, #8]
   b8644:	684b      	ldr	r3, [r1, #4]
   b8646:	9303      	str	r3, [sp, #12]
   b8648:	68cb      	ldr	r3, [r1, #12]
   b864a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b864c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b864e:	7a0b      	ldrb	r3, [r1, #8]
   b8650:	9305      	str	r3, [sp, #20]
   b8652:	a901      	add	r1, sp, #4
   b8654:	f7fe fbf6 	bl	b6e44 <hal_i2c_request_ex>
}
   b8658:	b007      	add	sp, #28
   b865a:	f85d fb04 	ldr.w	pc, [sp], #4

000b865e <_ZN7TwoWire11requestFromEhjh>:
{
   b865e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b8660:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b8662:	f88d 1000 	strb.w	r1, [sp]
   b8666:	f04f 0164 	mov.w	r1, #100	; 0x64
   b866a:	9103      	str	r1, [sp, #12]
   b866c:	bf18      	it	ne
   b866e:	2301      	movne	r3, #1
   b8670:	4669      	mov	r1, sp
    size_ = size;
   b8672:	9201      	str	r2, [sp, #4]
   b8674:	f88d 3008 	strb.w	r3, [sp, #8]
   b8678:	f7ff ffda 	bl	b8630 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b867c:	b005      	add	sp, #20
   b867e:	f85d fb04 	ldr.w	pc, [sp], #4

000b8682 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b8682:	2301      	movs	r3, #1
   b8684:	f7ff bfeb 	b.w	b865e <_ZN7TwoWire11requestFromEhjh>

000b8688 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b8688:	7c00      	ldrb	r0, [r0, #16]
   b868a:	2200      	movs	r2, #0
   b868c:	f7fe bb9a 	b.w	b6dc4 <hal_i2c_begin_transmission>

000b8690 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b8690:	b2c9      	uxtb	r1, r1
   b8692:	f7ff bff9 	b.w	b8688 <_ZN7TwoWire17beginTransmissionEh>

000b8696 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b8696:	7c00      	ldrb	r0, [r0, #16]
   b8698:	2200      	movs	r2, #0
   b869a:	f7fe bb9b 	b.w	b6dd4 <hal_i2c_end_transmission>

000b869e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b869e:	2101      	movs	r1, #1
   b86a0:	f7ff bff9 	b.w	b8696 <_ZN7TwoWire15endTransmissionEh>

000b86a4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b86a4:	4770      	bx	lr

000b86a6 <_ZN9IPAddressD0Ev>:
   b86a6:	b510      	push	{r4, lr}
   b86a8:	2118      	movs	r1, #24
   b86aa:	4604      	mov	r4, r0
   b86ac:	f7fb fcf9 	bl	b40a2 <_ZdlPvj>
   b86b0:	4620      	mov	r0, r4
   b86b2:	bd10      	pop	{r4, pc}

000b86b4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b86b4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b86b6:	7d03      	ldrb	r3, [r0, #20]
   b86b8:	2b06      	cmp	r3, #6
{
   b86ba:	b08d      	sub	sp, #52	; 0x34
   b86bc:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b86be:	f100 0704 	add.w	r7, r0, #4
   b86c2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b86c6:	d012      	beq.n	b86ee <_ZNK9IPAddress7printToER5Print+0x3a>
   b86c8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b86cc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b86d0:	220a      	movs	r2, #10
   b86d2:	4630      	mov	r0, r6
   b86d4:	f000 f973 	bl	b89be <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b86d8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b86da:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b86dc:	d019      	beq.n	b8712 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b86de:	2c00      	cmp	r4, #0
   b86e0:	d0f4      	beq.n	b86cc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b86e2:	212e      	movs	r1, #46	; 0x2e
   b86e4:	4630      	mov	r0, r6
   b86e6:	f000 f951 	bl	b898c <_ZN5Print5printEc>
   b86ea:	4404      	add	r4, r0
   b86ec:	e7ee      	b.n	b86cc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b86ee:	232f      	movs	r3, #47	; 0x2f
   b86f0:	466a      	mov	r2, sp
   b86f2:	4639      	mov	r1, r7
   b86f4:	200a      	movs	r0, #10
		buf[0] = 0;
   b86f6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b86fa:	f7fe fbb3 	bl	b6e64 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b86fe:	4668      	mov	r0, sp
   b8700:	f002 f97c 	bl	ba9fc <strlen>
   b8704:	6833      	ldr	r3, [r6, #0]
   b8706:	4602      	mov	r2, r0
   b8708:	68db      	ldr	r3, [r3, #12]
   b870a:	4669      	mov	r1, sp
   b870c:	4630      	mov	r0, r6
   b870e:	4798      	blx	r3
   b8710:	4604      	mov	r4, r0
    }
    return n;
}
   b8712:	4620      	mov	r0, r4
   b8714:	b00d      	add	sp, #52	; 0x34
   b8716:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8718 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b8718:	b510      	push	{r4, lr}
   b871a:	4b05      	ldr	r3, [pc, #20]	; (b8730 <_ZN9IPAddressC1Ev+0x18>)
   b871c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b871e:	2211      	movs	r2, #17
   b8720:	f840 3b04 	str.w	r3, [r0], #4
   b8724:	2100      	movs	r1, #0
   b8726:	f002 f920 	bl	ba96a <memset>
}
   b872a:	4620      	mov	r0, r4
   b872c:	bd10      	pop	{r4, pc}
   b872e:	bf00      	nop
   b8730:	000bd030 	.word	0x000bd030

000b8734 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b8734:	4603      	mov	r3, r0
   b8736:	4a07      	ldr	r2, [pc, #28]	; (b8754 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b8738:	b510      	push	{r4, lr}
   b873a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b873e:	f101 0210 	add.w	r2, r1, #16
   b8742:	f851 4b04 	ldr.w	r4, [r1], #4
   b8746:	f843 4b04 	str.w	r4, [r3], #4
   b874a:	4291      	cmp	r1, r2
   b874c:	d1f9      	bne.n	b8742 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b874e:	780a      	ldrb	r2, [r1, #0]
   b8750:	701a      	strb	r2, [r3, #0]
}
   b8752:	bd10      	pop	{r4, pc}
   b8754:	000bd030 	.word	0x000bd030

000b8758 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b8758:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b875a:	2b04      	cmp	r3, #4
   b875c:	d104      	bne.n	b8768 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b875e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8760:	3800      	subs	r0, #0
   b8762:	bf18      	it	ne
   b8764:	2001      	movne	r0, #1
   b8766:	4770      	bx	lr
    } else if (version() == 6) {
   b8768:	2b06      	cmp	r3, #6
   b876a:	d107      	bne.n	b877c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b876c:	6843      	ldr	r3, [r0, #4]
   b876e:	b93b      	cbnz	r3, b8780 <_ZNK9IPAddresscvbEv+0x28>
   b8770:	6883      	ldr	r3, [r0, #8]
   b8772:	b92b      	cbnz	r3, b8780 <_ZNK9IPAddresscvbEv+0x28>
   b8774:	68c3      	ldr	r3, [r0, #12]
   b8776:	b91b      	cbnz	r3, b8780 <_ZNK9IPAddresscvbEv+0x28>
   b8778:	6900      	ldr	r0, [r0, #16]
   b877a:	e7f1      	b.n	b8760 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b877c:	2000      	movs	r0, #0
   b877e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8780:	2001      	movs	r0, #1
}
   b8782:	4770      	bx	lr

000b8784 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b8784:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b8786:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b878a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b878e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b8792:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b8796:	2304      	movs	r3, #4
   b8798:	6041      	str	r1, [r0, #4]
   b879a:	7503      	strb	r3, [r0, #20]
}
   b879c:	bd10      	pop	{r4, pc}
	...

000b87a0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b87a0:	b507      	push	{r0, r1, r2, lr}
   b87a2:	4b06      	ldr	r3, [pc, #24]	; (b87bc <_ZN9IPAddressC1EPKh+0x1c>)
   b87a4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b87a6:	78cb      	ldrb	r3, [r1, #3]
   b87a8:	9300      	str	r3, [sp, #0]
   b87aa:	788b      	ldrb	r3, [r1, #2]
   b87ac:	784a      	ldrb	r2, [r1, #1]
   b87ae:	7809      	ldrb	r1, [r1, #0]
   b87b0:	f7ff ffe8 	bl	b8784 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b87b4:	b003      	add	sp, #12
   b87b6:	f85d fb04 	ldr.w	pc, [sp], #4
   b87ba:	bf00      	nop
   b87bc:	000bd030 	.word	0x000bd030

000b87c0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b87c0:	4b01      	ldr	r3, [pc, #4]	; (b87c8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b87c2:	4a02      	ldr	r2, [pc, #8]	; (b87cc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b87c4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b87c6:	4770      	bx	lr
   b87c8:	2003e6d0 	.word	0x2003e6d0
   b87cc:	000bd03c 	.word	0x000bd03c

000b87d0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b87d0:	2300      	movs	r3, #0
   b87d2:	6840      	ldr	r0, [r0, #4]
   b87d4:	461a      	mov	r2, r3
   b87d6:	f7fe bc49 	b.w	b706c <network_connect>

000b87da <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b87da:	6840      	ldr	r0, [r0, #4]
   b87dc:	2200      	movs	r2, #0
   b87de:	2102      	movs	r1, #2
   b87e0:	f7fe bc54 	b.w	b708c <network_disconnect>

000b87e4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b87e4:	2200      	movs	r2, #0
   b87e6:	6840      	ldr	r0, [r0, #4]
   b87e8:	4611      	mov	r1, r2
   b87ea:	f7fe bc47 	b.w	b707c <network_connecting>

000b87ee <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b87ee:	2200      	movs	r2, #0
   b87f0:	6840      	ldr	r0, [r0, #4]
   b87f2:	4611      	mov	r1, r2
   b87f4:	f7fe bc52 	b.w	b709c <network_ready>

000b87f8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b87f8:	2300      	movs	r3, #0
   b87fa:	6840      	ldr	r0, [r0, #4]
   b87fc:	461a      	mov	r2, r3
   b87fe:	4619      	mov	r1, r3
   b8800:	f7fe bc54 	b.w	b70ac <network_on>

000b8804 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b8804:	2300      	movs	r3, #0
   b8806:	6840      	ldr	r0, [r0, #4]
   b8808:	461a      	mov	r2, r3
   b880a:	4619      	mov	r1, r3
   b880c:	f7fe bc56 	b.w	b70bc <network_off>

000b8810 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b8810:	6840      	ldr	r0, [r0, #4]
   b8812:	2100      	movs	r1, #0
   b8814:	f7fe bc7a 	b.w	b710c <network_is_on>

000b8818 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b8818:	6840      	ldr	r0, [r0, #4]
   b881a:	2100      	movs	r1, #0
   b881c:	f7fe bc7e 	b.w	b711c <network_is_off>

000b8820 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b8820:	6840      	ldr	r0, [r0, #4]
   b8822:	2200      	movs	r2, #0
   b8824:	f081 0101 	eor.w	r1, r1, #1
   b8828:	f7fe bc50 	b.w	b70cc <network_listen>

000b882c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b882c:	6840      	ldr	r0, [r0, #4]
   b882e:	2200      	movs	r2, #0
   b8830:	f7fe bc5c 	b.w	b70ec <network_set_listen_timeout>

000b8834 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b8834:	2200      	movs	r2, #0
   b8836:	6840      	ldr	r0, [r0, #4]
   b8838:	4611      	mov	r1, r2
   b883a:	f7fe bc5f 	b.w	b70fc <network_get_listen_timeout>

000b883e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b883e:	2200      	movs	r2, #0
   b8840:	6840      	ldr	r0, [r0, #4]
   b8842:	4611      	mov	r1, r2
   b8844:	f7fe bc4a 	b.w	b70dc <network_listening>

000b8848 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b8848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b884c:	b095      	sub	sp, #84	; 0x54
   b884e:	4614      	mov	r4, r2
   b8850:	460d      	mov	r5, r1
   b8852:	4607      	mov	r7, r0
    IPAddress addr;
   b8854:	f7ff ff60 	bl	b8718 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b8858:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b885a:	221c      	movs	r2, #28
   b885c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b885e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b8860:	f002 f883 	bl	ba96a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b8864:	2340      	movs	r3, #64	; 0x40
   b8866:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b8868:	4620      	mov	r0, r4
   b886a:	466b      	mov	r3, sp
   b886c:	aa0c      	add	r2, sp, #48	; 0x30
   b886e:	2100      	movs	r1, #0
   b8870:	f7fe fb18 	bl	b6ea4 <netdb_getaddrinfo>
    if (!r) {
   b8874:	4604      	mov	r4, r0
   b8876:	2800      	cmp	r0, #0
   b8878:	d14b      	bne.n	b8912 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b887a:	4602      	mov	r2, r0
   b887c:	2101      	movs	r1, #1
   b887e:	6868      	ldr	r0, [r5, #4]
   b8880:	f7fe fc0c 	bl	b709c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8884:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8886:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8888:	4622      	mov	r2, r4
   b888a:	6868      	ldr	r0, [r5, #4]
   b888c:	f7fe fc06 	bl	b709c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8890:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8892:	4681      	mov	r9, r0
        bool ok = false;
   b8894:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8896:	2e00      	cmp	r6, #0
   b8898:	d03b      	beq.n	b8912 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b889a:	2900      	cmp	r1, #0
   b889c:	d139      	bne.n	b8912 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b889e:	6873      	ldr	r3, [r6, #4]
   b88a0:	2b02      	cmp	r3, #2
   b88a2:	d003      	beq.n	b88ac <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b88a4:	2b0a      	cmp	r3, #10
   b88a6:	d011      	beq.n	b88cc <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b88a8:	69f6      	ldr	r6, [r6, #28]
   b88aa:	e7f4      	b.n	b8896 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b88ac:	f1b8 0f00 	cmp.w	r8, #0
   b88b0:	d0fa      	beq.n	b88a8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b88b2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b88b4:	a806      	add	r0, sp, #24
   b88b6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b88b8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b88ba:	f7ff ff71 	bl	b87a0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b88be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b88c0:	1d3c      	adds	r4, r7, #4
   b88c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b88c4:	682b      	ldr	r3, [r5, #0]
   b88c6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b88c8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b88ca:	e7ed      	b.n	b88a8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b88cc:	f1b9 0f00 	cmp.w	r9, #0
   b88d0:	d0ea      	beq.n	b88a8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b88d2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b88d4:	2210      	movs	r2, #16
   b88d6:	a801      	add	r0, sp, #4
   b88d8:	f002 f847 	bl	ba96a <memset>
                    a.v = 6;
   b88dc:	2306      	movs	r3, #6
   b88de:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b88e2:	ad01      	add	r5, sp, #4
   b88e4:	f104 0308 	add.w	r3, r4, #8
   b88e8:	3418      	adds	r4, #24
   b88ea:	6818      	ldr	r0, [r3, #0]
   b88ec:	6859      	ldr	r1, [r3, #4]
   b88ee:	462a      	mov	r2, r5
   b88f0:	c203      	stmia	r2!, {r0, r1}
   b88f2:	3308      	adds	r3, #8
   b88f4:	42a3      	cmp	r3, r4
   b88f6:	4615      	mov	r5, r2
   b88f8:	d1f7      	bne.n	b88ea <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b88fa:	a901      	add	r1, sp, #4
   b88fc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b88fe:	ad07      	add	r5, sp, #28
   b8900:	f7ff ff18 	bl	b8734 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8906:	1d3c      	adds	r4, r7, #4
   b8908:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b890a:	682b      	ldr	r3, [r5, #0]
   b890c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b890e:	4649      	mov	r1, r9
   b8910:	e7ca      	b.n	b88a8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b8912:	9800      	ldr	r0, [sp, #0]
   b8914:	f7fe fabe 	bl	b6e94 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b8918:	4638      	mov	r0, r7
   b891a:	b015      	add	sp, #84	; 0x54
   b891c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b8920 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b8920:	4b02      	ldr	r3, [pc, #8]	; (b892c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b8922:	4a03      	ldr	r2, [pc, #12]	; (b8930 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b8924:	601a      	str	r2, [r3, #0]
   b8926:	2200      	movs	r2, #0
   b8928:	605a      	str	r2, [r3, #4]

} // spark
   b892a:	4770      	bx	lr
   b892c:	2003e6d4 	.word	0x2003e6d4
   b8930:	000bd048 	.word	0x000bd048

000b8934 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b8934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8936:	4606      	mov	r6, r0
   b8938:	460d      	mov	r5, r1
  size_t n = 0;
   b893a:	188f      	adds	r7, r1, r2
   b893c:	2400      	movs	r4, #0
  while (size--) {
   b893e:	42bd      	cmp	r5, r7
   b8940:	d00c      	beq.n	b895c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b8942:	6833      	ldr	r3, [r6, #0]
   b8944:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8948:	689b      	ldr	r3, [r3, #8]
   b894a:	4630      	mov	r0, r6
   b894c:	4798      	blx	r3
     if (chunk>=0)
   b894e:	1e03      	subs	r3, r0, #0
   b8950:	db01      	blt.n	b8956 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b8952:	441c      	add	r4, r3
  while (size--) {
   b8954:	e7f3      	b.n	b893e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b8956:	2c00      	cmp	r4, #0
   b8958:	bf08      	it	eq
   b895a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b895c:	4620      	mov	r0, r4
   b895e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8960 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b8960:	b513      	push	{r0, r1, r4, lr}
   b8962:	4604      	mov	r4, r0
    }
   b8964:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b8966:	b159      	cbz	r1, b8980 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b8968:	9101      	str	r1, [sp, #4]
   b896a:	f002 f847 	bl	ba9fc <strlen>
   b896e:	6823      	ldr	r3, [r4, #0]
   b8970:	9901      	ldr	r1, [sp, #4]
   b8972:	68db      	ldr	r3, [r3, #12]
   b8974:	4602      	mov	r2, r0
   b8976:	4620      	mov	r0, r4
    }
   b8978:	b002      	add	sp, #8
   b897a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b897e:	4718      	bx	r3
    }
   b8980:	b002      	add	sp, #8
   b8982:	bd10      	pop	{r4, pc}

000b8984 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b8984:	b508      	push	{r3, lr}
  return write(str);
   b8986:	f7ff ffeb 	bl	b8960 <_ZN5Print5writeEPKc>
}
   b898a:	bd08      	pop	{r3, pc}

000b898c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b898c:	6803      	ldr	r3, [r0, #0]
   b898e:	689b      	ldr	r3, [r3, #8]
   b8990:	4718      	bx	r3

000b8992 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b8992:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b8994:	210d      	movs	r1, #13
{
   b8996:	4605      	mov	r5, r0
  size_t n = print('\r');
   b8998:	f7ff fff8 	bl	b898c <_ZN5Print5printEc>
  n += print('\n');
   b899c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b899e:	4604      	mov	r4, r0
  n += print('\n');
   b89a0:	4628      	mov	r0, r5
   b89a2:	f7ff fff3 	bl	b898c <_ZN5Print5printEc>
  return n;
}
   b89a6:	4420      	add	r0, r4
   b89a8:	bd38      	pop	{r3, r4, r5, pc}

000b89aa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b89aa:	b538      	push	{r3, r4, r5, lr}
   b89ac:	4605      	mov	r5, r0
  return write(str);
   b89ae:	f7ff ffd7 	bl	b8960 <_ZN5Print5writeEPKc>
   b89b2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b89b4:	4628      	mov	r0, r5
   b89b6:	f7ff ffec 	bl	b8992 <_ZN5Print7printlnEv>
  return n;
}
   b89ba:	4420      	add	r0, r4
   b89bc:	bd38      	pop	{r3, r4, r5, pc}

000b89be <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b89be:	b530      	push	{r4, r5, lr}
   b89c0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b89c2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b89c4:	2a01      	cmp	r2, #1
  *str = '\0';
   b89c6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b89ca:	bf98      	it	ls
   b89cc:	220a      	movls	r2, #10
   b89ce:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b89d0:	460d      	mov	r5, r1
   b89d2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b89d6:	fb01 5312 	mls	r3, r1, r2, r5
   b89da:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b89de:	2b09      	cmp	r3, #9
   b89e0:	bf94      	ite	ls
   b89e2:	3330      	addls	r3, #48	; 0x30
   b89e4:	3337      	addhi	r3, #55	; 0x37
   b89e6:	b2db      	uxtb	r3, r3
  } while(n);
   b89e8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b89ea:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b89ee:	d9ef      	bls.n	b89d0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b89f0:	4621      	mov	r1, r4
   b89f2:	f7ff ffb5 	bl	b8960 <_ZN5Print5writeEPKc>
}
   b89f6:	b00b      	add	sp, #44	; 0x2c
   b89f8:	bd30      	pop	{r4, r5, pc}

000b89fa <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b89fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b89fe:	b086      	sub	sp, #24
   b8a00:	af00      	add	r7, sp, #0
   b8a02:	4605      	mov	r5, r0
   b8a04:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b8a06:	1d38      	adds	r0, r7, #4
   b8a08:	2114      	movs	r1, #20
{
   b8a0a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b8a0c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b8a0e:	f7fe fbad 	bl	b716c <vsnprintf>

    if (n<bufsize)
   b8a12:	2813      	cmp	r0, #19
   b8a14:	d80e      	bhi.n	b8a34 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b8a16:	1d39      	adds	r1, r7, #4
   b8a18:	4628      	mov	r0, r5
   b8a1a:	f7ff ffa1 	bl	b8960 <_ZN5Print5writeEPKc>
   b8a1e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b8a20:	b11e      	cbz	r6, b8a2a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b8a22:	4628      	mov	r0, r5
   b8a24:	f7ff ffb5 	bl	b8992 <_ZN5Print7printlnEv>
   b8a28:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b8a2a:	4620      	mov	r0, r4
   b8a2c:	3718      	adds	r7, #24
   b8a2e:	46bd      	mov	sp, r7
   b8a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b8a34:	f100 0308 	add.w	r3, r0, #8
   b8a38:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b8a3c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b8a3e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b8a42:	4622      	mov	r2, r4
   b8a44:	1c41      	adds	r1, r0, #1
   b8a46:	683b      	ldr	r3, [r7, #0]
   b8a48:	4668      	mov	r0, sp
   b8a4a:	f7fe fb8f 	bl	b716c <vsnprintf>
  return write(str);
   b8a4e:	4669      	mov	r1, sp
   b8a50:	4628      	mov	r0, r5
   b8a52:	f7ff ff85 	bl	b8960 <_ZN5Print5writeEPKc>
   b8a56:	4604      	mov	r4, r0
   b8a58:	46c5      	mov	sp, r8
   b8a5a:	e7e1      	b.n	b8a20 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b8a5c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b8a5c:	4b01      	ldr	r3, [pc, #4]	; (b8a64 <_GLOBAL__sub_I_RGB+0x8>)
   b8a5e:	2200      	movs	r2, #0
   b8a60:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b8a62:	4770      	bx	lr
   b8a64:	2003e6dc 	.word	0x2003e6dc

000b8a68 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b8a68:	b510      	push	{r4, lr}
   b8a6a:	4604      	mov	r4, r0
{
	free(buffer);
   b8a6c:	6800      	ldr	r0, [r0, #0]
   b8a6e:	f7fe fb65 	bl	b713c <free>
}
   b8a72:	4620      	mov	r0, r4
   b8a74:	bd10      	pop	{r4, pc}

000b8a76 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b8a76:	b510      	push	{r4, lr}
   b8a78:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b8a7a:	6800      	ldr	r0, [r0, #0]
   b8a7c:	b108      	cbz	r0, b8a82 <_ZN6String10invalidateEv+0xc>
   b8a7e:	f7fe fb5d 	bl	b713c <free>
	buffer = NULL;
   b8a82:	2300      	movs	r3, #0
	capacity = len = 0;
   b8a84:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b8a88:	6023      	str	r3, [r4, #0]
}
   b8a8a:	bd10      	pop	{r4, pc}

000b8a8c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b8a8c:	b538      	push	{r3, r4, r5, lr}
   b8a8e:	4604      	mov	r4, r0
   b8a90:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b8a92:	6800      	ldr	r0, [r0, #0]
   b8a94:	3101      	adds	r1, #1
   b8a96:	f7fe fb59 	bl	b714c <realloc>
	if (newbuffer) {
   b8a9a:	b110      	cbz	r0, b8aa2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b8a9c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b8aa0:	2001      	movs	r0, #1
	}
	return 0;
}
   b8aa2:	bd38      	pop	{r3, r4, r5, pc}

000b8aa4 <_ZN6String7reserveEj>:
{
   b8aa4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b8aa6:	6803      	ldr	r3, [r0, #0]
{
   b8aa8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b8aaa:	b123      	cbz	r3, b8ab6 <_ZN6String7reserveEj+0x12>
   b8aac:	6843      	ldr	r3, [r0, #4]
   b8aae:	428b      	cmp	r3, r1
   b8ab0:	d301      	bcc.n	b8ab6 <_ZN6String7reserveEj+0x12>
   b8ab2:	2001      	movs	r0, #1
}
   b8ab4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b8ab6:	4620      	mov	r0, r4
   b8ab8:	f7ff ffe8 	bl	b8a8c <_ZN6String12changeBufferEj>
   b8abc:	2800      	cmp	r0, #0
   b8abe:	d0f9      	beq.n	b8ab4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b8ac0:	68a3      	ldr	r3, [r4, #8]
   b8ac2:	2b00      	cmp	r3, #0
   b8ac4:	d1f5      	bne.n	b8ab2 <_ZN6String7reserveEj+0xe>
   b8ac6:	6822      	ldr	r2, [r4, #0]
   b8ac8:	7013      	strb	r3, [r2, #0]
   b8aca:	e7f2      	b.n	b8ab2 <_ZN6String7reserveEj+0xe>

000b8acc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8ace:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b8ad0:	4611      	mov	r1, r2
   b8ad2:	9201      	str	r2, [sp, #4]
{
   b8ad4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b8ad6:	f7ff ffe5 	bl	b8aa4 <_ZN6String7reserveEj>
   b8ada:	9a01      	ldr	r2, [sp, #4]
   b8adc:	b928      	cbnz	r0, b8aea <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b8ade:	4620      	mov	r0, r4
   b8ae0:	f7ff ffc9 	bl	b8a76 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b8ae4:	4620      	mov	r0, r4
   b8ae6:	b003      	add	sp, #12
   b8ae8:	bd30      	pop	{r4, r5, pc}
	len = length;
   b8aea:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b8aec:	4629      	mov	r1, r5
   b8aee:	6820      	ldr	r0, [r4, #0]
   b8af0:	f001 ff13 	bl	ba91a <memcpy>
	buffer[len] = 0;
   b8af4:	6822      	ldr	r2, [r4, #0]
   b8af6:	68a3      	ldr	r3, [r4, #8]
   b8af8:	2100      	movs	r1, #0
   b8afa:	54d1      	strb	r1, [r2, r3]
	return *this;
   b8afc:	e7f2      	b.n	b8ae4 <_ZN6String4copyEPKcj+0x18>

000b8afe <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b8afe:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b8b00:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b8b02:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b8b06:	4604      	mov	r4, r0
	len = 0;
   b8b08:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8b0a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b8b0c:	b141      	cbz	r1, b8b20 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b8b0e:	4608      	mov	r0, r1
   b8b10:	9101      	str	r1, [sp, #4]
   b8b12:	f001 ff73 	bl	ba9fc <strlen>
   b8b16:	9901      	ldr	r1, [sp, #4]
   b8b18:	4602      	mov	r2, r0
   b8b1a:	4620      	mov	r0, r4
   b8b1c:	f7ff ffd6 	bl	b8acc <_ZN6String4copyEPKcj>
}
   b8b20:	4620      	mov	r0, r4
   b8b22:	b002      	add	sp, #8
   b8b24:	bd10      	pop	{r4, pc}

000b8b26 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b8b26:	4288      	cmp	r0, r1
{
   b8b28:	b510      	push	{r4, lr}
   b8b2a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b8b2c:	d005      	beq.n	b8b3a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b8b2e:	680b      	ldr	r3, [r1, #0]
   b8b30:	b12b      	cbz	r3, b8b3e <_ZN6StringaSERKS_+0x18>
   b8b32:	688a      	ldr	r2, [r1, #8]
   b8b34:	4619      	mov	r1, r3
   b8b36:	f7ff ffc9 	bl	b8acc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8b3a:	4620      	mov	r0, r4
   b8b3c:	bd10      	pop	{r4, pc}
	else invalidate();
   b8b3e:	f7ff ff9a 	bl	b8a76 <_ZN6String10invalidateEv>
   b8b42:	e7fa      	b.n	b8b3a <_ZN6StringaSERKS_+0x14>

000b8b44 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b8b44:	b510      	push	{r4, lr}
	buffer = NULL;
   b8b46:	2300      	movs	r3, #0
String::String(const String &value)
   b8b48:	4604      	mov	r4, r0
	capacity = 0;
   b8b4a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b8b4e:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8b50:	7303      	strb	r3, [r0, #12]
	*this = value;
   b8b52:	f7ff ffe8 	bl	b8b26 <_ZN6StringaSERKS_>
}
   b8b56:	4620      	mov	r0, r4
   b8b58:	bd10      	pop	{r4, pc}

000b8b5a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b8b5a:	b513      	push	{r0, r1, r4, lr}
   b8b5c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b8b5e:	b159      	cbz	r1, b8b78 <_ZN6StringaSEPKc+0x1e>
   b8b60:	4608      	mov	r0, r1
   b8b62:	9101      	str	r1, [sp, #4]
   b8b64:	f001 ff4a 	bl	ba9fc <strlen>
   b8b68:	9901      	ldr	r1, [sp, #4]
   b8b6a:	4602      	mov	r2, r0
   b8b6c:	4620      	mov	r0, r4
   b8b6e:	f7ff ffad 	bl	b8acc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8b72:	4620      	mov	r0, r4
   b8b74:	b002      	add	sp, #8
   b8b76:	bd10      	pop	{r4, pc}
	else invalidate();
   b8b78:	f7ff ff7d 	bl	b8a76 <_ZN6String10invalidateEv>
   b8b7c:	e7f9      	b.n	b8b72 <_ZN6StringaSEPKc+0x18>

000b8b7e <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b8b7e:	b510      	push	{r4, lr}
   b8b80:	4604      	mov	r4, r0
   b8b82:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b8b84:	2300      	movs	r3, #0
	capacity = 0;
   b8b86:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b8b8a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b8b8c:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b8b8e:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b8b90:	a901      	add	r1, sp, #4
   b8b92:	f000 fd09 	bl	b95a8 <itoa>
	*this = buf;
   b8b96:	a901      	add	r1, sp, #4
   b8b98:	4620      	mov	r0, r4
   b8b9a:	f7ff ffde 	bl	b8b5a <_ZN6StringaSEPKc>
}
   b8b9e:	4620      	mov	r0, r4
   b8ba0:	b00a      	add	sp, #40	; 0x28
   b8ba2:	bd10      	pop	{r4, pc}

000b8ba4 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b8ba4:	b570      	push	{r4, r5, r6, lr}
   b8ba6:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b8ba8:	460e      	mov	r6, r1
   b8baa:	b909      	cbnz	r1, b8bb0 <_ZN6String6concatEPKcj+0xc>
   b8bac:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b8bae:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b8bb0:	b16a      	cbz	r2, b8bce <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b8bb2:	6884      	ldr	r4, [r0, #8]
   b8bb4:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b8bb6:	4621      	mov	r1, r4
   b8bb8:	f7ff ff74 	bl	b8aa4 <_ZN6String7reserveEj>
   b8bbc:	2800      	cmp	r0, #0
   b8bbe:	d0f5      	beq.n	b8bac <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b8bc0:	6828      	ldr	r0, [r5, #0]
   b8bc2:	68ab      	ldr	r3, [r5, #8]
   b8bc4:	4631      	mov	r1, r6
   b8bc6:	4418      	add	r0, r3
   b8bc8:	f001 ff10 	bl	ba9ec <strcpy>
	len = newlen;
   b8bcc:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b8bce:	2001      	movs	r0, #1
   b8bd0:	e7ed      	b.n	b8bae <_ZN6String6concatEPKcj+0xa>

000b8bd2 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b8bd2:	688a      	ldr	r2, [r1, #8]
   b8bd4:	6809      	ldr	r1, [r1, #0]
   b8bd6:	f7ff bfe5 	b.w	b8ba4 <_ZN6String6concatEPKcj>

000b8bda <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b8bda:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b8bdc:	2300      	movs	r3, #0
	buf[0] = c;
   b8bde:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b8be2:	2201      	movs	r2, #1
   b8be4:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b8be6:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b8bea:	f7ff ffdb 	bl	b8ba4 <_ZN6String6concatEPKcj>
}
   b8bee:	b003      	add	sp, #12
   b8bf0:	f85d fb04 	ldr.w	pc, [sp], #4

000b8bf4 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b8bf4:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b8bf6:	688a      	ldr	r2, [r1, #8]
   b8bf8:	6809      	ldr	r1, [r1, #0]
{
   b8bfa:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b8bfc:	f7ff ffd2 	bl	b8ba4 <_ZN6String6concatEPKcj>
   b8c00:	b910      	cbnz	r0, b8c08 <_ZplRK15StringSumHelperRK6String+0x14>
   b8c02:	4620      	mov	r0, r4
   b8c04:	f7ff ff37 	bl	b8a76 <_ZN6String10invalidateEv>
	return a;
}
   b8c08:	4620      	mov	r0, r4
   b8c0a:	bd10      	pop	{r4, pc}

000b8c0c <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b8c0c:	b513      	push	{r0, r1, r4, lr}
   b8c0e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b8c10:	b929      	cbnz	r1, b8c1e <_ZplRK15StringSumHelperPKc+0x12>
   b8c12:	4620      	mov	r0, r4
   b8c14:	f7ff ff2f 	bl	b8a76 <_ZN6String10invalidateEv>
	return a;
}
   b8c18:	4620      	mov	r0, r4
   b8c1a:	b002      	add	sp, #8
   b8c1c:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b8c1e:	4608      	mov	r0, r1
   b8c20:	9101      	str	r1, [sp, #4]
   b8c22:	f001 feeb 	bl	ba9fc <strlen>
   b8c26:	9901      	ldr	r1, [sp, #4]
   b8c28:	4602      	mov	r2, r0
   b8c2a:	4620      	mov	r0, r4
   b8c2c:	f7ff ffba 	bl	b8ba4 <_ZN6String6concatEPKcj>
   b8c30:	2800      	cmp	r0, #0
   b8c32:	d0ee      	beq.n	b8c12 <_ZplRK15StringSumHelperPKc+0x6>
   b8c34:	e7f0      	b.n	b8c18 <_ZplRK15StringSumHelperPKc+0xc>

000b8c36 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b8c36:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b8c38:	6882      	ldr	r2, [r0, #8]
   b8c3a:	b93a      	cbnz	r2, b8c4c <_ZNK6String6equalsEPKc+0x16>
   b8c3c:	b121      	cbz	r1, b8c48 <_ZNK6String6equalsEPKc+0x12>
   b8c3e:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b8c40:	fab0 f080 	clz	r0, r0
   b8c44:	0940      	lsrs	r0, r0, #5
   b8c46:	e000      	b.n	b8c4a <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b8c48:	2001      	movs	r0, #1
}
   b8c4a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b8c4c:	6800      	ldr	r0, [r0, #0]
   b8c4e:	b909      	cbnz	r1, b8c54 <_ZNK6String6equalsEPKc+0x1e>
   b8c50:	7800      	ldrb	r0, [r0, #0]
   b8c52:	e7f5      	b.n	b8c40 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b8c54:	f001 fec0 	bl	ba9d8 <strcmp>
   b8c58:	e7f2      	b.n	b8c40 <_ZNK6String6equalsEPKc+0xa>

000b8c5a <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   b8c5a:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   b8c5c:	6883      	ldr	r3, [r0, #8]
   b8c5e:	4293      	cmp	r3, r2
   b8c60:	d907      	bls.n	b8c72 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   b8c62:	6804      	ldr	r4, [r0, #0]
   b8c64:	6809      	ldr	r1, [r1, #0]
   b8c66:	18a0      	adds	r0, r4, r2
   b8c68:	f001 fef0 	bl	baa4c <strstr>
	if (found == NULL) return -1;
   b8c6c:	b108      	cbz	r0, b8c72 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   b8c6e:	1b00      	subs	r0, r0, r4
}
   b8c70:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   b8c72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8c76:	e7fb      	b.n	b8c70 <_ZNK6String7indexOfERKS_j+0x16>

000b8c78 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   b8c78:	2200      	movs	r2, #0
   b8c7a:	f7ff bfee 	b.w	b8c5a <_ZNK6String7indexOfERKS_j>
	...

000b8c80 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b8c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b8c82:	429a      	cmp	r2, r3
{
   b8c84:	460f      	mov	r7, r1
   b8c86:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b8c88:	490c      	ldr	r1, [pc, #48]	; (b8cbc <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b8c8a:	bf88      	it	hi
   b8c8c:	4613      	movhi	r3, r2
{
   b8c8e:	4614      	mov	r4, r2
   b8c90:	4606      	mov	r6, r0
	if (left > right) {
   b8c92:	bf84      	itt	hi
   b8c94:	462c      	movhi	r4, r5
   b8c96:	461d      	movhi	r5, r3
	String out;
   b8c98:	f7ff ff31 	bl	b8afe <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b8c9c:	68bb      	ldr	r3, [r7, #8]
   b8c9e:	42a3      	cmp	r3, r4
   b8ca0:	d30a      	bcc.n	b8cb8 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b8ca2:	6839      	ldr	r1, [r7, #0]
   b8ca4:	42ab      	cmp	r3, r5
   b8ca6:	bf94      	ite	ls
   b8ca8:	ebc4 0203 	rsbls	r2, r4, r3
   b8cac:	ebc4 0205 	rsbhi	r2, r4, r5
   b8cb0:	4421      	add	r1, r4
   b8cb2:	4630      	mov	r0, r6
   b8cb4:	f7ff ff0a 	bl	b8acc <_ZN6String4copyEPKcj>
	return out;
}
   b8cb8:	4630      	mov	r0, r6
   b8cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b8cbc:	000bcdae 	.word	0x000bcdae

000b8cc0 <_ZNK6String9substringEj>:
{
   b8cc0:	b510      	push	{r4, lr}
   b8cc2:	4604      	mov	r4, r0
	return substring(left, len);
   b8cc4:	688b      	ldr	r3, [r1, #8]
   b8cc6:	f7ff ffdb 	bl	b8c80 <_ZNK6String9substringEjj>
}
   b8cca:	4620      	mov	r0, r4
   b8ccc:	bd10      	pop	{r4, pc}

000b8cce <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   b8cce:	6800      	ldr	r0, [r0, #0]
   b8cd0:	b108      	cbz	r0, b8cd6 <_ZNK6String5toIntEv+0x8>
   b8cd2:	f001 be0e 	b.w	ba8f2 <atol>
	return 0;
}
   b8cd6:	4770      	bx	lr

000b8cd8 <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
   b8cd8:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   b8cda:	6800      	ldr	r0, [r0, #0]
   b8cdc:	b140      	cbz	r0, b8cf0 <_ZNK6String7toFloatEv+0x18>
   b8cde:	f001 fe01 	bl	ba8e4 <atof>
   b8ce2:	ec51 0b10 	vmov	r0, r1, d0
   b8ce6:	f001 fd89 	bl	ba7fc <__aeabi_d2f>
   b8cea:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   b8cee:	bd08      	pop	{r3, pc}
	return 0;
   b8cf0:	ed9f 0a01 	vldr	s0, [pc, #4]	; b8cf8 <_ZNK6String7toFloatEv+0x20>
   b8cf4:	e7fb      	b.n	b8cee <_ZNK6String7toFloatEv+0x16>
   b8cf6:	bf00      	nop
   b8cf8:	00000000 	.word	0x00000000

000b8cfc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8cfc:	4b05      	ldr	r3, [pc, #20]	; (b8d14 <_GLOBAL__sub_I_System+0x18>)
   b8cfe:	2202      	movs	r2, #2
   b8d00:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b8d02:	4b05      	ldr	r3, [pc, #20]	; (b8d18 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b8d04:	4a05      	ldr	r2, [pc, #20]	; (b8d1c <_GLOBAL__sub_I_System+0x20>)
   b8d06:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b8d08:	2000      	movs	r0, #0
   b8d0a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b8d0e:	f7fe b981 	b.w	b7014 <set_system_mode>
   b8d12:	bf00      	nop
   b8d14:	2003e6f8 	.word	0x2003e6f8
   b8d18:	2003e6ec 	.word	0x2003e6ec
   b8d1c:	ffff0000 	.word	0xffff0000

000b8d20 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b8d20:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8d22:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b8d24:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8d28:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8d2a:	2201      	movs	r2, #1
   b8d2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8d30:	f10d 0107 	add.w	r1, sp, #7
   b8d34:	47a0      	blx	r4
}
   b8d36:	b002      	add	sp, #8
   b8d38:	bd10      	pop	{r4, pc}

000b8d3a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b8d3a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b8d3c:	6803      	ldr	r3, [r0, #0]
   b8d3e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8d44:	46a4      	mov	ip, r4
}
   b8d46:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b8d4a:	4760      	bx	ip

000b8d4c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8d4c:	b513      	push	{r0, r1, r4, lr}
   b8d4e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b8d50:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8d52:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b8d56:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b8d58:	f10d 0107 	add.w	r1, sp, #7
   b8d5c:	2201      	movs	r2, #1
   b8d5e:	47a0      	blx	r4
}
   b8d60:	b002      	add	sp, #8
   b8d62:	bd10      	pop	{r4, pc}

000b8d64 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b8d64:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b8d66:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8d68:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8d6c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8d70:	429a      	cmp	r2, r3
int TCPClient::read() {
   b8d72:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8d74:	d008      	beq.n	b8d88 <_ZN9TCPClient4readEv+0x24>
   b8d76:	6963      	ldr	r3, [r4, #20]
   b8d78:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b8d7c:	1c51      	adds	r1, r2, #1
   b8d7e:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b8d82:	4413      	add	r3, r2
   b8d84:	7918      	ldrb	r0, [r3, #4]
}
   b8d86:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8d88:	6803      	ldr	r3, [r0, #0]
   b8d8a:	691b      	ldr	r3, [r3, #16]
   b8d8c:	4798      	blx	r3
   b8d8e:	2800      	cmp	r0, #0
   b8d90:	d1f1      	bne.n	b8d76 <_ZN9TCPClient4readEv+0x12>
   b8d92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8d96:	e7f6      	b.n	b8d86 <_ZN9TCPClient4readEv+0x22>

000b8d98 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b8d98:	4770      	bx	lr

000b8d9a <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b8d9a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b8d9c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b8d9e:	43c0      	mvns	r0, r0
   b8da0:	0fc0      	lsrs	r0, r0, #31
   b8da2:	4770      	bx	lr

000b8da4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8da4:	4770      	bx	lr
	...

000b8da8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8da8:	4b06      	ldr	r3, [pc, #24]	; (b8dc4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8daa:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8dac:	b510      	push	{r4, lr}
   b8dae:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8db2:	d005      	beq.n	b8dc0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8db4:	4608      	mov	r0, r1
   b8db6:	f000 fd39 	bl	b982c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8dba:	2800      	cmp	r0, #0
   b8dbc:	bf08      	it	eq
   b8dbe:	2400      	moveq	r4, #0
      }
   b8dc0:	4620      	mov	r0, r4
   b8dc2:	bd10      	pop	{r4, pc}
   b8dc4:	000bcf84 	.word	0x000bcf84

000b8dc8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8dc8:	b510      	push	{r4, lr}
   b8dca:	21ac      	movs	r1, #172	; 0xac
   b8dcc:	4604      	mov	r4, r0
   b8dce:	f7fb f968 	bl	b40a2 <_ZdlPvj>
   b8dd2:	4620      	mov	r0, r4
   b8dd4:	bd10      	pop	{r4, pc}

000b8dd6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b8dd6:	21ac      	movs	r1, #172	; 0xac
   b8dd8:	f7fb b963 	b.w	b40a2 <_ZdlPvj>

000b8ddc <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b8ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b8de0:	f04f 0800 	mov.w	r8, #0
   b8de4:	b086      	sub	sp, #24
   b8de6:	461c      	mov	r4, r3
   b8de8:	f8c0 8004 	str.w	r8, [r0, #4]
   b8dec:	4605      	mov	r5, r0
   b8dee:	460e      	mov	r6, r1
   b8df0:	4617      	mov	r7, r2
    struct timeval tv = {};
   b8df2:	4641      	mov	r1, r8
   b8df4:	2210      	movs	r2, #16
   b8df6:	a802      	add	r0, sp, #8
   b8df8:	f001 fdb7 	bl	ba96a <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b8dfc:	1c63      	adds	r3, r4, #1
   b8dfe:	d009      	beq.n	b8e14 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b8e00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8e04:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b8e08:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b8e0c:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b8e10:	435c      	muls	r4, r3
   b8e12:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b8e14:	6968      	ldr	r0, [r5, #20]
   b8e16:	2310      	movs	r3, #16
   b8e18:	9300      	str	r3, [sp, #0]
   b8e1a:	6800      	ldr	r0, [r0, #0]
   b8e1c:	ab02      	add	r3, sp, #8
   b8e1e:	f241 0205 	movw	r2, #4101	; 0x1005
   b8e22:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8e26:	f7fe f845 	bl	b6eb4 <sock_setsockopt>
    if (ret < 0) {
   b8e2a:	2800      	cmp	r0, #0
   b8e2c:	da07      	bge.n	b8e3e <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b8e2e:	f7fe f9b5 	bl	b719c <__errno>
   b8e32:	6803      	ldr	r3, [r0, #0]
   b8e34:	606b      	str	r3, [r5, #4]
        return 0;
   b8e36:	2000      	movs	r0, #0
}
   b8e38:	b006      	add	sp, #24
   b8e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b8e3e:	6968      	ldr	r0, [r5, #20]
   b8e40:	2300      	movs	r3, #0
   b8e42:	6800      	ldr	r0, [r0, #0]
   b8e44:	463a      	mov	r2, r7
   b8e46:	4631      	mov	r1, r6
   b8e48:	f7fe f854 	bl	b6ef4 <sock_send>
    if (ret < 0) {
   b8e4c:	1e03      	subs	r3, r0, #0
   b8e4e:	dbee      	blt.n	b8e2e <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b8e50:	4618      	mov	r0, r3
   b8e52:	e7f1      	b.n	b8e38 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b8e54 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b8e54:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b8e56:	6984      	ldr	r4, [r0, #24]
   b8e58:	4b0a      	ldr	r3, [pc, #40]	; (b8e84 <_ZN9TCPClientD1Ev+0x30>)
   b8e5a:	6003      	str	r3, [r0, #0]
   b8e5c:	4605      	mov	r5, r0
   b8e5e:	b17c      	cbz	r4, b8e80 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b8e60:	6863      	ldr	r3, [r4, #4]
   b8e62:	3b01      	subs	r3, #1
   b8e64:	6063      	str	r3, [r4, #4]
   b8e66:	b95b      	cbnz	r3, b8e80 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b8e68:	6823      	ldr	r3, [r4, #0]
   b8e6a:	4620      	mov	r0, r4
   b8e6c:	689b      	ldr	r3, [r3, #8]
   b8e6e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b8e70:	68a3      	ldr	r3, [r4, #8]
   b8e72:	3b01      	subs	r3, #1
   b8e74:	60a3      	str	r3, [r4, #8]
   b8e76:	b91b      	cbnz	r3, b8e80 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b8e78:	6823      	ldr	r3, [r4, #0]
   b8e7a:	4620      	mov	r0, r4
   b8e7c:	68db      	ldr	r3, [r3, #12]
   b8e7e:	4798      	blx	r3
   b8e80:	4628      	mov	r0, r5
   b8e82:	bd38      	pop	{r3, r4, r5, pc}
   b8e84:	000bd0b8 	.word	0x000bd0b8

000b8e88 <_ZN9TCPClientD0Ev>:
   b8e88:	b510      	push	{r4, lr}
   b8e8a:	4604      	mov	r4, r0
   b8e8c:	f7ff ffe2 	bl	b8e54 <_ZN9TCPClientD1Ev>
   b8e90:	4620      	mov	r0, r4
   b8e92:	211c      	movs	r1, #28
   b8e94:	f7fb f905 	bl	b40a2 <_ZdlPvj>
   b8e98:	4620      	mov	r0, r4
   b8e9a:	bd10      	pop	{r4, pc}

000b8e9c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b8e9c:	b530      	push	{r4, r5, lr}
   b8e9e:	b087      	sub	sp, #28
   b8ea0:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b8ea2:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b8ea4:	4668      	mov	r0, sp
   b8ea6:	f7ff fc7b 	bl	b87a0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8eaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8eac:	3404      	adds	r4, #4
   b8eae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8eb0:	682b      	ldr	r3, [r5, #0]
   b8eb2:	7023      	strb	r3, [r4, #0]
    }
   b8eb4:	b007      	add	sp, #28
   b8eb6:	bd30      	pop	{r4, r5, pc}

000b8eb8 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b8eb8:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b8eba:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b8ebc:	4b05      	ldr	r3, [pc, #20]	; (b8ed4 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b8ebe:	4604      	mov	r4, r0
   b8ec0:	358c      	adds	r5, #140	; 0x8c
   b8ec2:	f844 3b04 	str.w	r3, [r4], #4
   b8ec6:	4606      	mov	r6, r0
   b8ec8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8ecc:	682b      	ldr	r3, [r5, #0]
   b8ece:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b8ed0:	4630      	mov	r0, r6
   b8ed2:	bd70      	pop	{r4, r5, r6, pc}
   b8ed4:	000bd030 	.word	0x000bd030

000b8ed8 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8ed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8edc:	4698      	mov	r8, r3
    stop();
   b8ede:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8ee0:	b093      	sub	sp, #76	; 0x4c
   b8ee2:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b8ee4:	2400      	movs	r4, #0
    stop();
   b8ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8ee8:	4606      	mov	r6, r0
   b8eea:	4617      	mov	r7, r2
    stop();
   b8eec:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8eee:	4628      	mov	r0, r5
   b8ef0:	466b      	mov	r3, sp
   b8ef2:	4622      	mov	r2, r4
   b8ef4:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b8ef6:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8ef8:	f7fd ffd4 	bl	b6ea4 <netdb_getaddrinfo>
   b8efc:	4605      	mov	r5, r0
   b8efe:	2800      	cmp	r0, #0
   b8f00:	d163      	bne.n	b8fca <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b8f02:	9b00      	ldr	r3, [sp, #0]
   b8f04:	2b00      	cmp	r3, #0
   b8f06:	d04b      	beq.n	b8fa0 <_ZN9TCPClient7connectEPKctm+0xc8>
   b8f08:	695b      	ldr	r3, [r3, #20]
   b8f0a:	2b00      	cmp	r3, #0
   b8f0c:	d048      	beq.n	b8fa0 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b8f0e:	a806      	add	r0, sp, #24
   b8f10:	f7ff fc02 	bl	b8718 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b8f14:	9b00      	ldr	r3, [sp, #0]
   b8f16:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b8f18:	7863      	ldrb	r3, [r4, #1]
   b8f1a:	2b02      	cmp	r3, #2
   b8f1c:	d104      	bne.n	b8f28 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b8f1e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b8f20:	a806      	add	r0, sp, #24
   b8f22:	f7ff ffbb 	bl	b8e9c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b8f26:	e026      	b.n	b8f76 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b8f28:	2b0a      	cmp	r3, #10
   b8f2a:	d124      	bne.n	b8f76 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b8f2c:	2211      	movs	r2, #17
   b8f2e:	4629      	mov	r1, r5
   b8f30:	a801      	add	r0, sp, #4
   b8f32:	f001 fd1a 	bl	ba96a <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8f36:	68a3      	ldr	r3, [r4, #8]
   b8f38:	2b00      	cmp	r3, #0
   b8f3a:	d038      	beq.n	b8fae <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8f3c:	f104 0308 	add.w	r3, r4, #8
   b8f40:	f10d 0c04 	add.w	ip, sp, #4
   b8f44:	3418      	adds	r4, #24
   b8f46:	6818      	ldr	r0, [r3, #0]
   b8f48:	6859      	ldr	r1, [r3, #4]
   b8f4a:	4662      	mov	r2, ip
   b8f4c:	c203      	stmia	r2!, {r0, r1}
   b8f4e:	3308      	adds	r3, #8
   b8f50:	42a3      	cmp	r3, r4
   b8f52:	4694      	mov	ip, r2
   b8f54:	d1f7      	bne.n	b8f46 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b8f56:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b8f58:	a901      	add	r1, sp, #4
   b8f5a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b8f5c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b8f60:	f7ff fbe8 	bl	b8734 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8f64:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b8f68:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b8f6c:	ac07      	add	r4, sp, #28
   b8f6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8f70:	f8dc 3000 	ldr.w	r3, [ip]
   b8f74:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b8f76:	a806      	add	r0, sp, #24
   b8f78:	f7ff fbee 	bl	b8758 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b8f7c:	b180      	cbz	r0, b8fa0 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b8f7e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b8f80:	ad07      	add	r5, sp, #28
   b8f82:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b8f86:	4b12      	ldr	r3, [pc, #72]	; (b8fd0 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b8f88:	930c      	str	r3, [sp, #48]	; 0x30
   b8f8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8f8c:	ac0d      	add	r4, sp, #52	; 0x34
   b8f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8f90:	682b      	ldr	r3, [r5, #0]
   b8f92:	7023      	strb	r3, [r4, #0]
   b8f94:	463a      	mov	r2, r7
   b8f96:	4643      	mov	r3, r8
   b8f98:	a90c      	add	r1, sp, #48	; 0x30
   b8f9a:	4630      	mov	r0, r6
   b8f9c:	47c8      	blx	r9
   b8f9e:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b8fa0:	9800      	ldr	r0, [sp, #0]
   b8fa2:	f7fd ff77 	bl	b6e94 <netdb_freeaddrinfo>
}
   b8fa6:	4628      	mov	r0, r5
   b8fa8:	b013      	add	sp, #76	; 0x4c
   b8faa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8fae:	68e3      	ldr	r3, [r4, #12]
   b8fb0:	2b00      	cmp	r3, #0
   b8fb2:	d1c3      	bne.n	b8f3c <_ZN9TCPClient7connectEPKctm+0x64>
   b8fb4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b8fb8:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b8fbc:	f7fd ff5a 	bl	b6e74 <inet_htonl>
   b8fc0:	4581      	cmp	r9, r0
   b8fc2:	d1bb      	bne.n	b8f3c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b8fc4:	f104 0114 	add.w	r1, r4, #20
   b8fc8:	e7aa      	b.n	b8f20 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8fca:	4625      	mov	r5, r4
   b8fcc:	e7e8      	b.n	b8fa0 <_ZN9TCPClient7connectEPKctm+0xc8>
   b8fce:	bf00      	nop
   b8fd0:	000bd030 	.word	0x000bd030

000b8fd4 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b8fd4:	b538      	push	{r3, r4, r5, lr}
   b8fd6:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b8fd8:	681a      	ldr	r2, [r3, #0]
   b8fda:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b8fdc:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b8fde:	da10      	bge.n	b9002 <_ZN9TCPClient9connectedEv+0x2e>
   b8fe0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8fe4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8fe8:	429a      	cmp	r2, r3
   b8fea:	d10a      	bne.n	b9002 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b8fec:	6803      	ldr	r3, [r0, #0]
   b8fee:	691b      	ldr	r3, [r3, #16]
   b8ff0:	4798      	blx	r3
        if (!rv) {
   b8ff2:	4604      	mov	r4, r0
   b8ff4:	b928      	cbnz	r0, b9002 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b8ff6:	682b      	ldr	r3, [r5, #0]
   b8ff8:	4628      	mov	r0, r5
   b8ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8ffc:	4798      	blx	r3
        rv = available();
   b8ffe:	4620      	mov	r0, r4
}
   b9000:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b9002:	2001      	movs	r0, #1
   b9004:	e7fc      	b.n	b9000 <_ZN9TCPClient9connectedEv+0x2c>

000b9006 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b9006:	b510      	push	{r4, lr}
   b9008:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b900a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b900e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9012:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b9014:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9016:	d005      	beq.n	b9024 <_ZN9TCPClient4peekEv+0x1e>
   b9018:	6963      	ldr	r3, [r4, #20]
   b901a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b901e:	4413      	add	r3, r2
   b9020:	7918      	ldrb	r0, [r3, #4]
}
   b9022:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9024:	6803      	ldr	r3, [r0, #0]
   b9026:	691b      	ldr	r3, [r3, #16]
   b9028:	4798      	blx	r3
   b902a:	2800      	cmp	r0, #0
   b902c:	d1f4      	bne.n	b9018 <_ZN9TCPClient4peekEv+0x12>
   b902e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9032:	e7f6      	b.n	b9022 <_ZN9TCPClient4peekEv+0x1c>

000b9034 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b9034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9036:	6943      	ldr	r3, [r0, #20]
   b9038:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b903a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b903e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9042:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b9044:	4605      	mov	r5, r0
   b9046:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b9048:	d016      	beq.n	b9078 <_ZN9TCPClient4readEPhj+0x44>
   b904a:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b904c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b9050:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b9054:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b9056:	42bc      	cmp	r4, r7
   b9058:	bf28      	it	cs
   b905a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b905c:	3304      	adds	r3, #4
   b905e:	4622      	mov	r2, r4
   b9060:	4419      	add	r1, r3
   b9062:	4630      	mov	r0, r6
   b9064:	f001 fc59 	bl	ba91a <memcpy>
   b9068:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b906a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b906e:	4423      	add	r3, r4
   b9070:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b9074:	4620      	mov	r0, r4
   b9076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b9078:	6803      	ldr	r3, [r0, #0]
   b907a:	691b      	ldr	r3, [r3, #16]
   b907c:	4798      	blx	r3
   b907e:	2800      	cmp	r0, #0
   b9080:	d1e3      	bne.n	b904a <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b9082:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b9086:	e7f5      	b.n	b9074 <_ZN9TCPClient4readEPhj+0x40>

000b9088 <_ZN9TCPClient12flush_bufferEv>:
   b9088:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b908a:	2300      	movs	r3, #0
   b908c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b9090:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b9092:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b9096:	4770      	bx	lr

000b9098 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b909c:	461f      	mov	r7, r3
    stop();
   b909e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b90a0:	460c      	mov	r4, r1
    stop();
   b90a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b90a4:	b08a      	sub	sp, #40	; 0x28
   b90a6:	4605      	mov	r5, r0
   b90a8:	4616      	mov	r6, r2
    stop();
   b90aa:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b90ac:	7d23      	ldrb	r3, [r4, #20]
   b90ae:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b90b2:	2b04      	cmp	r3, #4
   b90b4:	bf0c      	ite	eq
   b90b6:	2002      	moveq	r0, #2
   b90b8:	200a      	movne	r0, #10
   b90ba:	2206      	movs	r2, #6
   b90bc:	2101      	movs	r1, #1
   b90be:	f7fd ff21 	bl	b6f04 <sock_socket>
   b90c2:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b90c6:	696b      	ldr	r3, [r5, #20]
   b90c8:	681b      	ldr	r3, [r3, #0]
   b90ca:	2b00      	cmp	r3, #0
   b90cc:	da08      	bge.n	b90e0 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b90ce:	682b      	ldr	r3, [r5, #0]
   b90d0:	4628      	mov	r0, r5
   b90d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b90d4:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b90d6:	4798      	blx	r3
}
   b90d8:	4620      	mov	r0, r4
   b90da:	b00a      	add	sp, #40	; 0x28
   b90dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b90e0:	4628      	mov	r0, r5
   b90e2:	f7ff ffd1 	bl	b9088 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b90e6:	b1b7      	cbz	r7, b9116 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b90e8:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b90ea:	a903      	add	r1, sp, #12
   b90ec:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b90ee:	9303      	str	r3, [sp, #12]
   b90f0:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b90f4:	f7fd feae 	bl	b6e54 <if_index_to_name>
   b90f8:	2800      	cmp	r0, #0
   b90fa:	d1e8      	bne.n	b90ce <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b90fc:	6968      	ldr	r0, [r5, #20]
   b90fe:	2306      	movs	r3, #6
   b9100:	9300      	str	r3, [sp, #0]
   b9102:	6800      	ldr	r0, [r0, #0]
   b9104:	ab03      	add	r3, sp, #12
   b9106:	f241 020b 	movw	r2, #4107	; 0x100b
   b910a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b910e:	f7fd fed1 	bl	b6eb4 <sock_setsockopt>
   b9112:	2800      	cmp	r0, #0
   b9114:	d1db      	bne.n	b90ce <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b9116:	221c      	movs	r2, #28
   b9118:	2100      	movs	r1, #0
   b911a:	a803      	add	r0, sp, #12
   b911c:	f001 fc25 	bl	ba96a <memset>
    if (ip.version() == 4) {
   b9120:	7d23      	ldrb	r3, [r4, #20]
   b9122:	2b04      	cmp	r3, #4
   b9124:	d11d      	bne.n	b9162 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b9126:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b912a:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b912c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b9130:	f7fd fea8 	bl	b6e84 <inet_htons>
   b9134:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b9138:	6860      	ldr	r0, [r4, #4]
   b913a:	f7fd fe9b 	bl	b6e74 <inet_htonl>
   b913e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b9140:	696b      	ldr	r3, [r5, #20]
   b9142:	221c      	movs	r2, #28
   b9144:	6818      	ldr	r0, [r3, #0]
   b9146:	a903      	add	r1, sp, #12
   b9148:	f7fd fec4 	bl	b6ed4 <sock_connect>
   b914c:	2800      	cmp	r0, #0
   b914e:	d1be      	bne.n	b90ce <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b9150:	3404      	adds	r4, #4
   b9152:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9154:	696d      	ldr	r5, [r5, #20]
   b9156:	358c      	adds	r5, #140	; 0x8c
   b9158:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b915a:	6823      	ldr	r3, [r4, #0]
   b915c:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b915e:	2401      	movs	r4, #1
   b9160:	e7ba      	b.n	b90d8 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b9162:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b9166:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b9168:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b916c:	f7fd fe8a 	bl	b6e84 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9170:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b9172:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9176:	1d23      	adds	r3, r4, #4
   b9178:	f104 0714 	add.w	r7, r4, #20
   b917c:	6818      	ldr	r0, [r3, #0]
   b917e:	6859      	ldr	r1, [r3, #4]
   b9180:	4632      	mov	r2, r6
   b9182:	c203      	stmia	r2!, {r0, r1}
   b9184:	3308      	adds	r3, #8
   b9186:	42bb      	cmp	r3, r7
   b9188:	4616      	mov	r6, r2
   b918a:	d1f7      	bne.n	b917c <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b918c:	e7d8      	b.n	b9140 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b9190 <_ZN9TCPClient9availableEv>:
{
   b9190:	b530      	push	{r4, r5, lr}
   b9192:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b9194:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b9198:	b08b      	sub	sp, #44	; 0x2c
   b919a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b919c:	b12b      	cbz	r3, b91aa <_ZN9TCPClient9availableEv+0x1a>
   b919e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b91a2:	429a      	cmp	r2, r3
   b91a4:	d101      	bne.n	b91aa <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b91a6:	f7ff ff6f 	bl	b9088 <_ZN9TCPClient12flush_bufferEv>
   b91aa:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b91ac:	6808      	ldr	r0, [r1, #0]
   b91ae:	2800      	cmp	r0, #0
   b91b0:	db18      	blt.n	b91e4 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b91b2:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b91b6:	2d7f      	cmp	r5, #127	; 0x7f
   b91b8:	d814      	bhi.n	b91e4 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b91ba:	3104      	adds	r1, #4
   b91bc:	2308      	movs	r3, #8
   b91be:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b91c2:	4429      	add	r1, r5
   b91c4:	f7fd fe8e 	bl	b6ee4 <sock_recv>
            if (ret > 0) {
   b91c8:	2800      	cmp	r0, #0
   b91ca:	dd13      	ble.n	b91f4 <_ZN9TCPClient9availableEv+0x64>
   b91cc:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b91ce:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b91d2:	b90a      	cbnz	r2, b91d8 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b91d4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b91d8:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b91da:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b91de:	4410      	add	r0, r2
   b91e0:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b91e4:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b91e6:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b91ea:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b91ee:	1ac0      	subs	r0, r0, r3
   b91f0:	b00b      	add	sp, #44	; 0x2c
   b91f2:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b91f4:	f7fd ffd2 	bl	b719c <__errno>
   b91f8:	6803      	ldr	r3, [r0, #0]
   b91fa:	2b0b      	cmp	r3, #11
   b91fc:	d0f2      	beq.n	b91e4 <_ZN9TCPClient9availableEv+0x54>
   b91fe:	f7fd ffcd 	bl	b719c <__errno>
   b9202:	6803      	ldr	r3, [r0, #0]
   b9204:	2b0b      	cmp	r3, #11
   b9206:	d0ed      	beq.n	b91e4 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b9208:	2320      	movs	r3, #32
   b920a:	2500      	movs	r5, #0
   b920c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b9210:	f7fd ffc4 	bl	b719c <__errno>
   b9214:	6803      	ldr	r3, [r0, #0]
   b9216:	9301      	str	r3, [sp, #4]
   b9218:	4b08      	ldr	r3, [pc, #32]	; (b923c <_ZN9TCPClient9availableEv+0xac>)
   b921a:	4909      	ldr	r1, [pc, #36]	; (b9240 <_ZN9TCPClient9availableEv+0xb0>)
   b921c:	9300      	str	r3, [sp, #0]
   b921e:	aa02      	add	r2, sp, #8
   b9220:	462b      	mov	r3, r5
   b9222:	2032      	movs	r0, #50	; 0x32
   b9224:	f7fd feee 	bl	b7004 <log_message>
                    sock_close(d_->sock);
   b9228:	6963      	ldr	r3, [r4, #20]
   b922a:	6818      	ldr	r0, [r3, #0]
   b922c:	f7fd fe4a 	bl	b6ec4 <sock_close>
   b9230:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b9232:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9236:	601a      	str	r2, [r3, #0]
   b9238:	e7d4      	b.n	b91e4 <_ZN9TCPClient9availableEv+0x54>
   b923a:	bf00      	nop
   b923c:	000bd083 	.word	0x000bd083
   b9240:	000bd07c 	.word	0x000bd07c

000b9244 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b9244:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b9246:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b9248:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b924a:	6818      	ldr	r0, [r3, #0]
   b924c:	2800      	cmp	r0, #0
   b924e:	db01      	blt.n	b9254 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b9250:	f7fd fe38 	bl	b6ec4 <sock_close>
   b9254:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b9256:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b925a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b925c:	6960      	ldr	r0, [r4, #20]
   b925e:	2211      	movs	r2, #17
   b9260:	2100      	movs	r1, #0
   b9262:	308c      	adds	r0, #140	; 0x8c
   b9264:	f001 fb81 	bl	ba96a <memset>
    flush_buffer();
   b9268:	4620      	mov	r0, r4
}
   b926a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b926e:	f7ff bf0b 	b.w	b9088 <_ZN9TCPClient12flush_bufferEv>

000b9272 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b9272:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b9274:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b9276:	4604      	mov	r4, r0
          total(0) {
   b9278:	6001      	str	r1, [r0, #0]
   b927a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b927e:	3088      	adds	r0, #136	; 0x88
   b9280:	f7ff fa4a 	bl	b8718 <_ZN9IPAddressC1Ev>
}
   b9284:	4620      	mov	r0, r4
   b9286:	bd10      	pop	{r4, pc}

000b9288 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b9288:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b928a:	2300      	movs	r3, #0
   b928c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b9290:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b9294:	4a0e      	ldr	r2, [pc, #56]	; (b92d0 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b9296:	6103      	str	r3, [r0, #16]
   b9298:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b929a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b929c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b929e:	20ac      	movs	r0, #172	; 0xac
   b92a0:	9101      	str	r1, [sp, #4]
   b92a2:	f7fa fef8 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b92a6:	1e05      	subs	r5, r0, #0
   b92a8:	f105 060c 	add.w	r6, r5, #12
   b92ac:	d008      	beq.n	b92c0 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b92ae:	2301      	movs	r3, #1
   b92b0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b92b4:	4b07      	ldr	r3, [pc, #28]	; (b92d4 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b92b6:	9901      	ldr	r1, [sp, #4]
   b92b8:	602b      	str	r3, [r5, #0]
   b92ba:	4630      	mov	r0, r6
   b92bc:	f7ff ffd9 	bl	b9272 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b92c0:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b92c2:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b92c6:	f7ff fedf 	bl	b9088 <_ZN9TCPClient12flush_bufferEv>
}
   b92ca:	b002      	add	sp, #8
   b92cc:	bd70      	pop	{r4, r5, r6, pc}
   b92ce:	bf00      	nop
   b92d0:	000bd0b8 	.word	0x000bd0b8
   b92d4:	000bd09c 	.word	0x000bd09c

000b92d8 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b92d8:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b92da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b92de:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b92e0:	f7ff ffd2 	bl	b9288 <_ZN9TCPClientC1Ei>
}
   b92e4:	4620      	mov	r0, r4
   b92e6:	bd10      	pop	{r4, pc}

000b92e8 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b92e8:	b510      	push	{r4, lr}
   b92ea:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b92ec:	6800      	ldr	r0, [r0, #0]
   b92ee:	2800      	cmp	r0, #0
   b92f0:	db01      	blt.n	b92f6 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b92f2:	f7fd fde7 	bl	b6ec4 <sock_close>
    }
}
   b92f6:	4620      	mov	r0, r4
   b92f8:	bd10      	pop	{r4, pc}

000b92fa <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b92fa:	300c      	adds	r0, #12
   b92fc:	f7ff bff4 	b.w	b92e8 <_ZN9TCPClient4DataD1Ev>

000b9300 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b9300:	4b02      	ldr	r3, [pc, #8]	; (b930c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b9302:	681a      	ldr	r2, [r3, #0]
   b9304:	4b02      	ldr	r3, [pc, #8]	; (b9310 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b9306:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b9308:	4770      	bx	lr
   b930a:	bf00      	nop
   b930c:	2003536c 	.word	0x2003536c
   b9310:	2003e6fc 	.word	0x2003e6fc

000b9314 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b9314:	4770      	bx	lr

000b9316 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9316:	7441      	strb	r1, [r0, #17]
}
   b9318:	4770      	bx	lr

000b931a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b931a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b931c:	7c00      	ldrb	r0, [r0, #16]
   b931e:	f7fd fe21 	bl	b6f64 <hal_usart_available_data_for_write>
}
   b9322:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9326:	bd08      	pop	{r3, pc}

000b9328 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b9328:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b932a:	7c00      	ldrb	r0, [r0, #16]
   b932c:	f7fd fdfa 	bl	b6f24 <hal_usart_available>
}
   b9330:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9334:	bd08      	pop	{r3, pc}

000b9336 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b9336:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b9338:	7c00      	ldrb	r0, [r0, #16]
   b933a:	f7fd fe03 	bl	b6f44 <hal_usart_peek>
}
   b933e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9342:	bd08      	pop	{r3, pc}

000b9344 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b9344:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b9346:	7c00      	ldrb	r0, [r0, #16]
   b9348:	f7fd fdf4 	bl	b6f34 <hal_usart_read>
}
   b934c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9350:	bd08      	pop	{r3, pc}

000b9352 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b9352:	7c00      	ldrb	r0, [r0, #16]
   b9354:	f7fd bdfe 	b.w	b6f54 <hal_usart_flush>

000b9358 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b9358:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b935a:	7c45      	ldrb	r5, [r0, #17]
{
   b935c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b935e:	b12d      	cbz	r5, b936c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b9360:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b9362:	b003      	add	sp, #12
   b9364:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b9368:	f7fd bdd4 	b.w	b6f14 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b936c:	7c00      	ldrb	r0, [r0, #16]
   b936e:	9101      	str	r1, [sp, #4]
   b9370:	f7fd fdf8 	bl	b6f64 <hal_usart_available_data_for_write>
   b9374:	2800      	cmp	r0, #0
   b9376:	9901      	ldr	r1, [sp, #4]
   b9378:	dcf2      	bgt.n	b9360 <_ZN11USARTSerial5writeEh+0x8>
}
   b937a:	4628      	mov	r0, r5
   b937c:	b003      	add	sp, #12
   b937e:	bd30      	pop	{r4, r5, pc}

000b9380 <_ZN11USARTSerialD0Ev>:
   b9380:	b510      	push	{r4, lr}
   b9382:	2114      	movs	r1, #20
   b9384:	4604      	mov	r4, r0
   b9386:	f7fa fe8c 	bl	b40a2 <_ZdlPvj>
   b938a:	4620      	mov	r0, r4
   b938c:	bd10      	pop	{r4, pc}
	...

000b9390 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b9390:	b510      	push	{r4, lr}
   b9392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9396:	4604      	mov	r4, r0
   b9398:	4608      	mov	r0, r1
   b939a:	4611      	mov	r1, r2
   b939c:	2200      	movs	r2, #0
   b939e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b93a2:	4b04      	ldr	r3, [pc, #16]	; (b93b4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b93a4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b93a6:	2301      	movs	r3, #1
  _serial = serial;
   b93a8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b93aa:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b93ac:	f7fd fde2 	bl	b6f74 <hal_usart_init_ex>
}
   b93b0:	4620      	mov	r0, r4
   b93b2:	bd10      	pop	{r4, pc}
   b93b4:	000bd120 	.word	0x000bd120

000b93b8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b93b8:	7441      	strb	r1, [r0, #17]
}
   b93ba:	4770      	bx	lr

000b93bc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b93bc:	4770      	bx	lr

000b93be <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b93be:	4770      	bx	lr

000b93c0 <_ZN9USBSerial4readEv>:
{
   b93c0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b93c2:	2100      	movs	r1, #0
   b93c4:	7c00      	ldrb	r0, [r0, #16]
   b93c6:	f7fd fdfd 	bl	b6fc4 <HAL_USB_USART_Receive_Data>
}
   b93ca:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b93ce:	bd08      	pop	{r3, pc}

000b93d0 <_ZN9USBSerial4peekEv>:
{
   b93d0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b93d2:	2101      	movs	r1, #1
   b93d4:	7c00      	ldrb	r0, [r0, #16]
   b93d6:	f7fd fdf5 	bl	b6fc4 <HAL_USB_USART_Receive_Data>
}
   b93da:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b93de:	bd08      	pop	{r3, pc}

000b93e0 <_ZN9USBSerial17availableForWriteEv>:
{
   b93e0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b93e2:	7c00      	ldrb	r0, [r0, #16]
   b93e4:	f7fd fde6 	bl	b6fb4 <HAL_USB_USART_Available_Data_For_Write>
}
   b93e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b93ec:	bd08      	pop	{r3, pc}

000b93ee <_ZN9USBSerial9availableEv>:
{
   b93ee:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b93f0:	7c00      	ldrb	r0, [r0, #16]
   b93f2:	f7fd fdd7 	bl	b6fa4 <HAL_USB_USART_Available_Data>
}
   b93f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b93fa:	bd08      	pop	{r3, pc}

000b93fc <_ZN9USBSerial5writeEh>:
{
   b93fc:	b513      	push	{r0, r1, r4, lr}
   b93fe:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9400:	7c00      	ldrb	r0, [r0, #16]
{
   b9402:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9404:	f7fd fdd6 	bl	b6fb4 <HAL_USB_USART_Available_Data_For_Write>
   b9408:	2800      	cmp	r0, #0
   b940a:	9901      	ldr	r1, [sp, #4]
   b940c:	dc01      	bgt.n	b9412 <_ZN9USBSerial5writeEh+0x16>
   b940e:	7c60      	ldrb	r0, [r4, #17]
   b9410:	b120      	cbz	r0, b941c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b9412:	7c20      	ldrb	r0, [r4, #16]
   b9414:	f7fd fdde 	bl	b6fd4 <HAL_USB_USART_Send_Data>
   b9418:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b941c:	b002      	add	sp, #8
   b941e:	bd10      	pop	{r4, pc}

000b9420 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b9420:	7c00      	ldrb	r0, [r0, #16]
   b9422:	f7fd bddf 	b.w	b6fe4 <HAL_USB_USART_Flush_Data>

000b9426 <_ZN9USBSerialD0Ev>:
   b9426:	b510      	push	{r4, lr}
   b9428:	2114      	movs	r1, #20
   b942a:	4604      	mov	r4, r0
   b942c:	f7fa fe39 	bl	b40a2 <_ZdlPvj>
   b9430:	4620      	mov	r0, r4
   b9432:	bd10      	pop	{r4, pc}

000b9434 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b9434:	b510      	push	{r4, lr}
   b9436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b943a:	4604      	mov	r4, r0
   b943c:	4608      	mov	r0, r1
   b943e:	2100      	movs	r1, #0
   b9440:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b9444:	4b04      	ldr	r3, [pc, #16]	; (b9458 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b9446:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9448:	2301      	movs	r3, #1
  _serial = serial;
   b944a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b944c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b944e:	4611      	mov	r1, r2
   b9450:	f7fd fd98 	bl	b6f84 <HAL_USB_USART_Init>
}
   b9454:	4620      	mov	r0, r4
   b9456:	bd10      	pop	{r4, pc}
   b9458:	000bd150 	.word	0x000bd150

000b945c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b945c:	7c00      	ldrb	r0, [r0, #16]
   b945e:	2200      	movs	r2, #0
   b9460:	f7fd bd98 	b.w	b6f94 <HAL_USB_USART_Begin>

000b9464 <_Z19acquireSerialBufferv>:
{
   b9464:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b9466:	2214      	movs	r2, #20
{
   b9468:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b946a:	2100      	movs	r1, #0
   b946c:	f001 fa7d 	bl	ba96a <memset>
}
   b9470:	4620      	mov	r0, r4
   b9472:	bd10      	pop	{r4, pc}

000b9474 <_Z16_fetch_usbserialv>:
{
   b9474:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9476:	4c0f      	ldr	r4, [pc, #60]	; (b94b4 <_Z16_fetch_usbserialv+0x40>)
{
   b9478:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b947a:	a803      	add	r0, sp, #12
   b947c:	f7ff fff2 	bl	b9464 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9480:	7821      	ldrb	r1, [r4, #0]
   b9482:	f3bf 8f5b 	dmb	ish
   b9486:	f011 0101 	ands.w	r1, r1, #1
   b948a:	d10f      	bne.n	b94ac <_Z16_fetch_usbserialv+0x38>
   b948c:	4620      	mov	r0, r4
   b948e:	9101      	str	r1, [sp, #4]
   b9490:	f7fa fe09 	bl	b40a6 <__cxa_guard_acquire>
   b9494:	9901      	ldr	r1, [sp, #4]
   b9496:	b148      	cbz	r0, b94ac <_Z16_fetch_usbserialv+0x38>
   b9498:	aa03      	add	r2, sp, #12
   b949a:	4807      	ldr	r0, [pc, #28]	; (b94b8 <_Z16_fetch_usbserialv+0x44>)
   b949c:	f7ff ffca 	bl	b9434 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b94a0:	4620      	mov	r0, r4
   b94a2:	f7fa fe05 	bl	b40b0 <__cxa_guard_release>
   b94a6:	4805      	ldr	r0, [pc, #20]	; (b94bc <_Z16_fetch_usbserialv+0x48>)
   b94a8:	f001 fa16 	bl	ba8d8 <atexit>
	return _usbserial;
}
   b94ac:	4802      	ldr	r0, [pc, #8]	; (b94b8 <_Z16_fetch_usbserialv+0x44>)
   b94ae:	b008      	add	sp, #32
   b94b0:	bd10      	pop	{r4, pc}
   b94b2:	bf00      	nop
   b94b4:	2003e700 	.word	0x2003e700
   b94b8:	2003e704 	.word	0x2003e704
   b94bc:	000b93bd 	.word	0x000b93bd

000b94c0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b94c0:	2200      	movs	r2, #0
   b94c2:	6840      	ldr	r0, [r0, #4]
   b94c4:	4611      	mov	r1, r2
   b94c6:	f7fd bde9 	b.w	b709c <network_ready>

000b94ca <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b94ca:	2200      	movs	r2, #0
   b94cc:	6840      	ldr	r0, [r0, #4]
   b94ce:	4611      	mov	r1, r2
   b94d0:	f7fd be04 	b.w	b70dc <network_listening>

000b94d4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b94d4:	2200      	movs	r2, #0
   b94d6:	6840      	ldr	r0, [r0, #4]
   b94d8:	4611      	mov	r1, r2
   b94da:	f7fd be0f 	b.w	b70fc <network_get_listen_timeout>

000b94de <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b94de:	6840      	ldr	r0, [r0, #4]
   b94e0:	2200      	movs	r2, #0
   b94e2:	f7fd be03 	b.w	b70ec <network_set_listen_timeout>

000b94e6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b94e6:	6840      	ldr	r0, [r0, #4]
   b94e8:	2200      	movs	r2, #0
   b94ea:	f081 0101 	eor.w	r1, r1, #1
   b94ee:	f7fd bded 	b.w	b70cc <network_listen>

000b94f2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b94f2:	2300      	movs	r3, #0
   b94f4:	6840      	ldr	r0, [r0, #4]
   b94f6:	461a      	mov	r2, r3
   b94f8:	4619      	mov	r1, r3
   b94fa:	f7fd bddf 	b.w	b70bc <network_off>

000b94fe <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b94fe:	2300      	movs	r3, #0
   b9500:	6840      	ldr	r0, [r0, #4]
   b9502:	461a      	mov	r2, r3
   b9504:	4619      	mov	r1, r3
   b9506:	f7fd bdd1 	b.w	b70ac <network_on>

000b950a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b950a:	2200      	movs	r2, #0
   b950c:	6840      	ldr	r0, [r0, #4]
   b950e:	4611      	mov	r1, r2
   b9510:	f7fd bdb4 	b.w	b707c <network_connecting>

000b9514 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9514:	6840      	ldr	r0, [r0, #4]
   b9516:	2200      	movs	r2, #0
   b9518:	2102      	movs	r1, #2
   b951a:	f7fd bdb7 	b.w	b708c <network_disconnect>

000b951e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b951e:	2300      	movs	r3, #0
   b9520:	6840      	ldr	r0, [r0, #4]
   b9522:	461a      	mov	r2, r3
   b9524:	f7fd bda2 	b.w	b706c <network_connect>

000b9528 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b9528:	4b02      	ldr	r3, [pc, #8]	; (b9534 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b952a:	2204      	movs	r2, #4
   b952c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b952e:	4a02      	ldr	r2, [pc, #8]	; (b9538 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b9530:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b9532:	4770      	bx	lr
   b9534:	2003e718 	.word	0x2003e718
   b9538:	000bd180 	.word	0x000bd180

000b953c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b953c:	b510      	push	{r4, lr}
   b953e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b9540:	f001 fa5c 	bl	ba9fc <strlen>
   b9544:	3801      	subs	r0, #1
   b9546:	1823      	adds	r3, r4, r0
   b9548:	4620      	mov	r0, r4
	while(i<j){
   b954a:	4283      	cmp	r3, r0
   b954c:	d906      	bls.n	b955c <_Z11str_reversePc+0x20>
		c = *i;
   b954e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b9550:	7819      	ldrb	r1, [r3, #0]
   b9552:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b9556:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b955a:	e7f6      	b.n	b954a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b955c:	bd10      	pop	{r4, pc}

000b955e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b955e:	b570      	push	{r4, r5, r6, lr}
   b9560:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b9562:	1e91      	subs	r1, r2, #2
   b9564:	2922      	cmp	r1, #34	; 0x22
   b9566:	d81d      	bhi.n	b95a4 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b9568:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b956a:	b930      	cbnz	r0, b957a <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b956c:	4423      	add	r3, r4
            *ptr++ = '0';
   b956e:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b9570:	429d      	cmp	r5, r3
   b9572:	d210      	bcs.n	b9596 <ultoa+0x38>
            *ptr++ = '0';
   b9574:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b9578:	e7fa      	b.n	b9570 <ultoa+0x12>
            result.quot = a/radix;
   b957a:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b957e:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b9582:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b9584:	2809      	cmp	r0, #9
                *ptr += '0';
   b9586:	bf94      	ite	ls
   b9588:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b958a:	3157      	addhi	r1, #87	; 0x57
   b958c:	b2c9      	uxtb	r1, r1
   b958e:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b9592:	4630      	mov	r0, r6
	while(a){
   b9594:	e7e9      	b.n	b956a <ultoa+0xc>

	*ptr = '\0';
   b9596:	2300      	movs	r3, #0
	str_reverse(buffer);
   b9598:	4620      	mov	r0, r4
	*ptr = '\0';
   b959a:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b959c:	f7ff ffce 	bl	b953c <_Z11str_reversePc>
	return buffer;
   b95a0:	4620      	mov	r0, r4
}
   b95a2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b95a4:	2000      	movs	r0, #0
   b95a6:	e7fc      	b.n	b95a2 <ultoa+0x44>

000b95a8 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b95a8:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b95aa:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b95ac:	460c      	mov	r4, r1
   b95ae:	4615      	mov	r5, r2
	if(a<0){
   b95b0:	da0e      	bge.n	b95d0 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b95b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b95b6:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b95ba:	bf14      	ite	ne
   b95bc:	4258      	negne	r0, r3
   b95be:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b95c0:	2301      	movs	r3, #1
		*buffer = '-';
   b95c2:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b95c4:	462a      	mov	r2, r5
   b95c6:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b95c8:	f7ff ffc9 	bl	b955e <ultoa>
	}
	return buffer;
}
   b95cc:	4620      	mov	r0, r4
   b95ce:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b95d0:	2301      	movs	r3, #1
   b95d2:	e7f9      	b.n	b95c8 <itoa+0x20>

000b95d4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b95d4:	4b01      	ldr	r3, [pc, #4]	; (b95dc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b95d6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b95d8:	4770      	bx	lr
   b95da:	bf00      	nop
   b95dc:	20035374 	.word	0x20035374

000b95e0 <serialEventRun>:
{
   b95e0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b95e2:	4b0b      	ldr	r3, [pc, #44]	; (b9610 <serialEventRun+0x30>)
   b95e4:	b143      	cbz	r3, b95f8 <serialEventRun+0x18>
   b95e6:	f7ff ff45 	bl	b9474 <_Z16_fetch_usbserialv>
   b95ea:	6803      	ldr	r3, [r0, #0]
   b95ec:	691b      	ldr	r3, [r3, #16]
   b95ee:	4798      	blx	r3
   b95f0:	2800      	cmp	r0, #0
   b95f2:	dd01      	ble.n	b95f8 <serialEventRun+0x18>
        serialEvent();
   b95f4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b95f8:	4b06      	ldr	r3, [pc, #24]	; (b9614 <serialEventRun+0x34>)
   b95fa:	b143      	cbz	r3, b960e <serialEventRun+0x2e>
   b95fc:	f000 f8c8 	bl	b9790 <_Z22__fetch_global_Serial1v>
   b9600:	6803      	ldr	r3, [r0, #0]
   b9602:	691b      	ldr	r3, [r3, #16]
   b9604:	4798      	blx	r3
   b9606:	2800      	cmp	r0, #0
   b9608:	dd01      	ble.n	b960e <serialEventRun+0x2e>
        serialEvent1();
   b960a:	f3af 8000 	nop.w
}
   b960e:	bd08      	pop	{r3, pc}
	...

000b9618 <_post_loop>:
{
   b9618:	b508      	push	{r3, lr}
	serialEventRun();
   b961a:	f7ff ffe1 	bl	b95e0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b961e:	f7fd fbb9 	bl	b6d94 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b9622:	4b01      	ldr	r3, [pc, #4]	; (b9628 <_post_loop+0x10>)
   b9624:	6018      	str	r0, [r3, #0]
}
   b9626:	bd08      	pop	{r3, pc}
   b9628:	2003e728 	.word	0x2003e728

000b962c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b962c:	4805      	ldr	r0, [pc, #20]	; (b9644 <_Z33system_initialize_user_backup_ramv+0x18>)
   b962e:	4a06      	ldr	r2, [pc, #24]	; (b9648 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b9630:	4906      	ldr	r1, [pc, #24]	; (b964c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b9632:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9634:	1a12      	subs	r2, r2, r0
   b9636:	f001 f970 	bl	ba91a <memcpy>
    __backup_sram_signature = signature;
   b963a:	4b05      	ldr	r3, [pc, #20]	; (b9650 <_Z33system_initialize_user_backup_ramv+0x24>)
   b963c:	4a05      	ldr	r2, [pc, #20]	; (b9654 <_Z33system_initialize_user_backup_ramv+0x28>)
   b963e:	601a      	str	r2, [r3, #0]
}
   b9640:	bd08      	pop	{r3, pc}
   b9642:	bf00      	nop
   b9644:	2003f400 	.word	0x2003f400
   b9648:	2003f404 	.word	0x2003f404
   b964c:	000bd744 	.word	0x000bd744
   b9650:	2003f400 	.word	0x2003f400
   b9654:	9a271c1e 	.word	0x9a271c1e

000b9658 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b9658:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b965a:	2300      	movs	r3, #0
   b965c:	9300      	str	r3, [sp, #0]
   b965e:	461a      	mov	r2, r3
   b9660:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9664:	f7fd fcf0 	bl	b7048 <system_ctrl_set_result>
}
   b9668:	b003      	add	sp, #12
   b966a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b9670 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b9670:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b9672:	8843      	ldrh	r3, [r0, #2]
   b9674:	2b0a      	cmp	r3, #10
   b9676:	d008      	beq.n	b968a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b9678:	2b50      	cmp	r3, #80	; 0x50
   b967a:	d10b      	bne.n	b9694 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b967c:	4b09      	ldr	r3, [pc, #36]	; (b96a4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b967e:	681b      	ldr	r3, [r3, #0]
   b9680:	b14b      	cbz	r3, b9696 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b9682:	b003      	add	sp, #12
   b9684:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b9688:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b968a:	f7ff ffe5 	bl	b9658 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b968e:	b003      	add	sp, #12
   b9690:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b9694:	2300      	movs	r3, #0
   b9696:	9300      	str	r3, [sp, #0]
   b9698:	461a      	mov	r2, r3
   b969a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b969e:	f7fd fcd3 	bl	b7048 <system_ctrl_set_result>
}
   b96a2:	e7f4      	b.n	b968e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b96a4:	2003e724 	.word	0x2003e724

000b96a8 <module_user_init_hook>:
{
   b96a8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b96aa:	4812      	ldr	r0, [pc, #72]	; (b96f4 <module_user_init_hook+0x4c>)
   b96ac:	2100      	movs	r1, #0
   b96ae:	f7fd fd85 	bl	b71bc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b96b2:	4b11      	ldr	r3, [pc, #68]	; (b96f8 <module_user_init_hook+0x50>)
   b96b4:	681a      	ldr	r2, [r3, #0]
   b96b6:	4b11      	ldr	r3, [pc, #68]	; (b96fc <module_user_init_hook+0x54>)
   b96b8:	429a      	cmp	r2, r3
   b96ba:	4b11      	ldr	r3, [pc, #68]	; (b9700 <module_user_init_hook+0x58>)
   b96bc:	bf0c      	ite	eq
   b96be:	2201      	moveq	r2, #1
   b96c0:	2200      	movne	r2, #0
   b96c2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b96c4:	d001      	beq.n	b96ca <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b96c6:	f7ff ffb1 	bl	b962c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b96ca:	f7fd fb53 	bl	b6d74 <HAL_RNG_GetRandomNumber>
   b96ce:	4604      	mov	r4, r0
    srand(seed);
   b96d0:	f001 f954 	bl	ba97c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b96d4:	4b0b      	ldr	r3, [pc, #44]	; (b9704 <module_user_init_hook+0x5c>)
   b96d6:	b113      	cbz	r3, b96de <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b96d8:	4620      	mov	r0, r4
   b96da:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b96de:	2100      	movs	r1, #0
   b96e0:	4808      	ldr	r0, [pc, #32]	; (b9704 <module_user_init_hook+0x5c>)
   b96e2:	f7fd fcbb 	bl	b705c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b96e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b96ea:	4807      	ldr	r0, [pc, #28]	; (b9708 <module_user_init_hook+0x60>)
   b96ec:	2100      	movs	r1, #0
   b96ee:	f7fd bca1 	b.w	b7034 <system_ctrl_set_app_request_handler>
   b96f2:	bf00      	nop
   b96f4:	000b95d5 	.word	0x000b95d5
   b96f8:	2003f400 	.word	0x2003f400
   b96fc:	9a271c1e 	.word	0x9a271c1e
   b9700:	2003e720 	.word	0x2003e720
   b9704:	00000000 	.word	0x00000000
   b9708:	000b9671 	.word	0x000b9671

000b970c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b970c:	4770      	bx	lr
	...

000b9710 <_Z19__fetch_global_Wirev>:
{
   b9710:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9712:	4d0e      	ldr	r5, [pc, #56]	; (b974c <_Z19__fetch_global_Wirev+0x3c>)
   b9714:	7829      	ldrb	r1, [r5, #0]
   b9716:	f3bf 8f5b 	dmb	ish
   b971a:	f011 0401 	ands.w	r4, r1, #1
{
   b971e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9720:	d111      	bne.n	b9746 <_Z19__fetch_global_Wirev+0x36>
   b9722:	4628      	mov	r0, r5
   b9724:	f7fa fcbf 	bl	b40a6 <__cxa_guard_acquire>
   b9728:	b168      	cbz	r0, b9746 <_Z19__fetch_global_Wirev+0x36>
   b972a:	a801      	add	r0, sp, #4
   b972c:	f7fa ffb4 	bl	b4698 <_Z17acquireWireBufferv>
   b9730:	aa01      	add	r2, sp, #4
   b9732:	4621      	mov	r1, r4
   b9734:	4806      	ldr	r0, [pc, #24]	; (b9750 <_Z19__fetch_global_Wirev+0x40>)
   b9736:	f7fe ff63 	bl	b8600 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b973a:	4628      	mov	r0, r5
   b973c:	f7fa fcb8 	bl	b40b0 <__cxa_guard_release>
   b9740:	4804      	ldr	r0, [pc, #16]	; (b9754 <_Z19__fetch_global_Wirev+0x44>)
   b9742:	f001 f8c9 	bl	ba8d8 <atexit>
	return wire;
}
   b9746:	4802      	ldr	r0, [pc, #8]	; (b9750 <_Z19__fetch_global_Wirev+0x40>)
   b9748:	b007      	add	sp, #28
   b974a:	bd30      	pop	{r4, r5, pc}
   b974c:	2003e72c 	.word	0x2003e72c
   b9750:	2003e730 	.word	0x2003e730
   b9754:	000b970d 	.word	0x000b970d

000b9758 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9758:	4770      	bx	lr
	...

000b975c <_Z20acquireSerial1Bufferv>:
{
   b975c:	b538      	push	{r3, r4, r5, lr}
   b975e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b9760:	2514      	movs	r5, #20
   b9762:	462a      	mov	r2, r5
   b9764:	2100      	movs	r1, #0
   b9766:	f001 f900 	bl	ba96a <memset>
   b976a:	8025      	strh	r5, [r4, #0]
   b976c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b976e:	4907      	ldr	r1, [pc, #28]	; (b978c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b9770:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9772:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b9774:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9776:	f000 f82f 	bl	b97d8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b977a:	4904      	ldr	r1, [pc, #16]	; (b978c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b977c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b977e:	4628      	mov	r0, r5
   b9780:	f000 f82a 	bl	b97d8 <_ZnajRKSt9nothrow_t>
    };
   b9784:	60e0      	str	r0, [r4, #12]
}
   b9786:	4620      	mov	r0, r4
   b9788:	bd38      	pop	{r3, r4, r5, pc}
   b978a:	bf00      	nop
   b978c:	000bd1b4 	.word	0x000bd1b4

000b9790 <_Z22__fetch_global_Serial1v>:
{
   b9790:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9792:	4d0e      	ldr	r5, [pc, #56]	; (b97cc <_Z22__fetch_global_Serial1v+0x3c>)
   b9794:	7829      	ldrb	r1, [r5, #0]
   b9796:	f3bf 8f5b 	dmb	ish
   b979a:	f011 0401 	ands.w	r4, r1, #1
{
   b979e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b97a0:	d111      	bne.n	b97c6 <_Z22__fetch_global_Serial1v+0x36>
   b97a2:	4628      	mov	r0, r5
   b97a4:	f7fa fc7f 	bl	b40a6 <__cxa_guard_acquire>
   b97a8:	b168      	cbz	r0, b97c6 <_Z22__fetch_global_Serial1v+0x36>
   b97aa:	a801      	add	r0, sp, #4
   b97ac:	f7ff ffd6 	bl	b975c <_Z20acquireSerial1Bufferv>
   b97b0:	aa01      	add	r2, sp, #4
   b97b2:	4621      	mov	r1, r4
   b97b4:	4806      	ldr	r0, [pc, #24]	; (b97d0 <_Z22__fetch_global_Serial1v+0x40>)
   b97b6:	f7ff fdeb 	bl	b9390 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b97ba:	4628      	mov	r0, r5
   b97bc:	f7fa fc78 	bl	b40b0 <__cxa_guard_release>
   b97c0:	4804      	ldr	r0, [pc, #16]	; (b97d4 <_Z22__fetch_global_Serial1v+0x44>)
   b97c2:	f001 f889 	bl	ba8d8 <atexit>
    return serial1;
}
   b97c6:	4802      	ldr	r0, [pc, #8]	; (b97d0 <_Z22__fetch_global_Serial1v+0x40>)
   b97c8:	b007      	add	sp, #28
   b97ca:	bd30      	pop	{r4, r5, pc}
   b97cc:	2003e744 	.word	0x2003e744
   b97d0:	2003e748 	.word	0x2003e748
   b97d4:	000b9759 	.word	0x000b9759

000b97d8 <_ZnajRKSt9nothrow_t>:
   b97d8:	f7fa bc5f 	b.w	b409a <_Znaj>

000b97dc <_ZSt17__throw_bad_allocv>:
   b97dc:	b508      	push	{r3, lr}
   b97de:	f7fd fccd 	bl	b717c <abort>

000b97e2 <_ZSt19__throw_logic_errorPKc>:
   b97e2:	b508      	push	{r3, lr}
   b97e4:	f7fd fcca 	bl	b717c <abort>

000b97e8 <_ZSt20__throw_length_errorPKc>:
   b97e8:	b508      	push	{r3, lr}
   b97ea:	f7fd fcc7 	bl	b717c <abort>

000b97ee <_ZSt24__throw_out_of_range_fmtPKcz>:
   b97ee:	b40f      	push	{r0, r1, r2, r3}
   b97f0:	b580      	push	{r7, lr}
   b97f2:	b084      	sub	sp, #16
   b97f4:	af00      	add	r7, sp, #0
   b97f6:	f107 0418 	add.w	r4, r7, #24
   b97fa:	f854 2b04 	ldr.w	r2, [r4], #4
   b97fe:	607a      	str	r2, [r7, #4]
   b9800:	4610      	mov	r0, r2
   b9802:	f001 f8fb 	bl	ba9fc <strlen>
   b9806:	f200 2307 	addw	r3, r0, #519	; 0x207
   b980a:	f023 0307 	bic.w	r3, r3, #7
   b980e:	ebad 0d03 	sub.w	sp, sp, r3
   b9812:	f500 7100 	add.w	r1, r0, #512	; 0x200
   b9816:	687a      	ldr	r2, [r7, #4]
   b9818:	60fc      	str	r4, [r7, #12]
   b981a:	4623      	mov	r3, r4
   b981c:	4668      	mov	r0, sp
   b981e:	f000 f85d 	bl	b98dc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   b9822:	f7fd fcab 	bl	b717c <abort>

000b9826 <_ZSt25__throw_bad_function_callv>:
   b9826:	b508      	push	{r3, lr}
   b9828:	f7fd fca8 	bl	b717c <abort>

000b982c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b982c:	4901      	ldr	r1, [pc, #4]	; (b9834 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b982e:	f000 b9f7 	b.w	b9c20 <_ZNKSt9type_infoeqERKS_>
   b9832:	bf00      	nop
   b9834:	000bd1d0 	.word	0x000bd1d0

000b9838 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   b9838:	b580      	push	{r7, lr}
   b983a:	b09c      	sub	sp, #112	; 0x70
   b983c:	4606      	mov	r6, r0
   b983e:	af00      	add	r7, sp, #0
   b9840:	460c      	mov	r4, r1
   b9842:	1ba4      	subs	r4, r4, r6
   b9844:	490e      	ldr	r1, [pc, #56]	; (b9880 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   b9846:	2269      	movs	r2, #105	; 0x69
   b9848:	1d38      	adds	r0, r7, #4
   b984a:	f001 f866 	bl	ba91a <memcpy>
   b984e:	f104 0370 	add.w	r3, r4, #112	; 0x70
   b9852:	f023 0307 	bic.w	r3, r3, #7
   b9856:	ebad 0d03 	sub.w	sp, sp, r3
   b985a:	466d      	mov	r5, sp
   b985c:	2268      	movs	r2, #104	; 0x68
   b985e:	1d39      	adds	r1, r7, #4
   b9860:	4628      	mov	r0, r5
   b9862:	f001 f85a 	bl	ba91a <memcpy>
   b9866:	4622      	mov	r2, r4
   b9868:	4631      	mov	r1, r6
   b986a:	f105 0068 	add.w	r0, r5, #104	; 0x68
   b986e:	442c      	add	r4, r5
   b9870:	f001 f853 	bl	ba91a <memcpy>
   b9874:	2300      	movs	r3, #0
   b9876:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   b987a:	4628      	mov	r0, r5
   b987c:	f7ff ffb1 	bl	b97e2 <_ZSt19__throw_logic_errorPKc>
   b9880:	000bd1d8 	.word	0x000bd1d8

000b9884 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   b9884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9888:	af00      	add	r7, sp, #0
   b988a:	b084      	sub	sp, #16
   b988c:	466d      	mov	r5, sp
   b988e:	f105 040c 	add.w	r4, r5, #12
   b9892:	f8df 8044 	ldr.w	r8, [pc, #68]	; b98d8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
   b9896:	4623      	mov	r3, r4
   b9898:	f04f 0c0a 	mov.w	ip, #10
   b989c:	fbb2 f6fc 	udiv	r6, r2, ip
   b98a0:	fb0c 2e16 	mls	lr, ip, r6, r2
   b98a4:	f818 e00e 	ldrb.w	lr, [r8, lr]
   b98a8:	f803 ed01 	strb.w	lr, [r3, #-1]!
   b98ac:	4696      	mov	lr, r2
   b98ae:	f1be 0f09 	cmp.w	lr, #9
   b98b2:	4632      	mov	r2, r6
   b98b4:	d8f2      	bhi.n	b989c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
   b98b6:	1ae4      	subs	r4, r4, r3
   b98b8:	428c      	cmp	r4, r1
   b98ba:	d809      	bhi.n	b98d0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
   b98bc:	f1c4 030c 	rsb	r3, r4, #12
   b98c0:	4622      	mov	r2, r4
   b98c2:	18e9      	adds	r1, r5, r3
   b98c4:	f001 f829 	bl	ba91a <memcpy>
   b98c8:	4620      	mov	r0, r4
   b98ca:	46bd      	mov	sp, r7
   b98cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b98d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b98d4:	e7f8      	b.n	b98c8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
   b98d6:	bf00      	nop
   b98d8:	000bd241 	.word	0x000bd241

000b98dc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   b98dc:	3901      	subs	r1, #1
   b98de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b98e2:	4607      	mov	r7, r0
   b98e4:	4615      	mov	r5, r2
   b98e6:	eb00 0801 	add.w	r8, r0, r1
   b98ea:	4604      	mov	r4, r0
   b98ec:	782a      	ldrb	r2, [r5, #0]
   b98ee:	b392      	cbz	r2, b9956 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
   b98f0:	4544      	cmp	r4, r8
   b98f2:	d22a      	bcs.n	b994a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b98f4:	2a25      	cmp	r2, #37	; 0x25
   b98f6:	d107      	bne.n	b9908 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b98f8:	786a      	ldrb	r2, [r5, #1]
   b98fa:	2a73      	cmp	r2, #115	; 0x73
   b98fc:	d009      	beq.n	b9912 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   b98fe:	2a7a      	cmp	r2, #122	; 0x7a
   b9900:	d012      	beq.n	b9928 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   b9902:	2a25      	cmp	r2, #37	; 0x25
   b9904:	d100      	bne.n	b9908 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b9906:	3501      	adds	r5, #1
   b9908:	f815 2b01 	ldrb.w	r2, [r5], #1
   b990c:	f804 2b01 	strb.w	r2, [r4], #1
   b9910:	e7ec      	b.n	b98ec <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b9912:	f853 2b04 	ldr.w	r2, [r3], #4
   b9916:	3a01      	subs	r2, #1
   b9918:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   b991c:	b1c9      	cbz	r1, b9952 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   b991e:	4544      	cmp	r4, r8
   b9920:	d013      	beq.n	b994a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b9922:	f804 1b01 	strb.w	r1, [r4], #1
   b9926:	e7f7      	b.n	b9918 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   b9928:	78aa      	ldrb	r2, [r5, #2]
   b992a:	2a75      	cmp	r2, #117	; 0x75
   b992c:	d1ec      	bne.n	b9908 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b992e:	461e      	mov	r6, r3
   b9930:	eba8 0104 	sub.w	r1, r8, r4
   b9934:	f856 2b04 	ldr.w	r2, [r6], #4
   b9938:	4620      	mov	r0, r4
   b993a:	f7ff ffa3 	bl	b9884 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   b993e:	2800      	cmp	r0, #0
   b9940:	dd03      	ble.n	b994a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b9942:	4404      	add	r4, r0
   b9944:	3503      	adds	r5, #3
   b9946:	4633      	mov	r3, r6
   b9948:	e7d0      	b.n	b98ec <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b994a:	4621      	mov	r1, r4
   b994c:	4638      	mov	r0, r7
   b994e:	f7ff ff73 	bl	b9838 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   b9952:	3502      	adds	r5, #2
   b9954:	e7ca      	b.n	b98ec <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b9956:	7022      	strb	r2, [r4, #0]
   b9958:	1be0      	subs	r0, r4, r7
   b995a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b995e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   b995e:	b10a      	cbz	r2, b9964 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   b9960:	f000 bfdb 	b.w	ba91a <memcpy>
   b9964:	4770      	bx	lr
	...

000b9968 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   b9968:	b508      	push	{r3, lr}
   b996a:	680b      	ldr	r3, [r1, #0]
   b996c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   b9970:	d302      	bcc.n	b9978 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   b9972:	480d      	ldr	r0, [pc, #52]	; (b99a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   b9974:	f7ff ff38 	bl	b97e8 <_ZSt20__throw_length_errorPKc>
   b9978:	4293      	cmp	r3, r2
   b997a:	d90b      	bls.n	b9994 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b997c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   b9980:	ea4f 0042 	mov.w	r0, r2, lsl #1
   b9984:	d206      	bcs.n	b9994 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b9986:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   b998a:	bf2a      	itet	cs
   b998c:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   b9990:	6008      	strcc	r0, [r1, #0]
   b9992:	600b      	strcs	r3, [r1, #0]
   b9994:	6808      	ldr	r0, [r1, #0]
   b9996:	3001      	adds	r0, #1
   b9998:	d501      	bpl.n	b999e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   b999a:	f7ff ff1f 	bl	b97dc <_ZSt17__throw_bad_allocv>
   b999e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b99a2:	f7fa bb78 	b.w	b4096 <_Znwj>
   b99a6:	bf00      	nop
   b99a8:	000bd24c 	.word	0x000bd24c

000b99ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   b99ac:	f850 3b08 	ldr.w	r3, [r0], #8
   b99b0:	4283      	cmp	r3, r0
   b99b2:	d002      	beq.n	b99ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   b99b4:	4618      	mov	r0, r3
   b99b6:	f7fa bb72 	b.w	b409e <_ZdlPv>
   b99ba:	4770      	bx	lr

000b99bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   b99bc:	2a01      	cmp	r2, #1
   b99be:	b410      	push	{r4}
   b99c0:	d104      	bne.n	b99cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   b99c2:	780a      	ldrb	r2, [r1, #0]
   b99c4:	f85d 4b04 	ldr.w	r4, [sp], #4
   b99c8:	7002      	strb	r2, [r0, #0]
   b99ca:	4770      	bx	lr
   b99cc:	f85d 4b04 	ldr.w	r4, [sp], #4
   b99d0:	f7ff bfc5 	b.w	b995e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000b99d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
   b99d4:	b508      	push	{r3, lr}
   b99d6:	1a52      	subs	r2, r2, r1
   b99d8:	f7ff fff0 	bl	b99bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b99dc:	bd08      	pop	{r3, pc}

000b99de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   b99de:	b508      	push	{r3, lr}
   b99e0:	1a52      	subs	r2, r2, r1
   b99e2:	f7ff ffeb 	bl	b99bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b99e6:	bd08      	pop	{r3, pc}

000b99e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
   b99e8:	4288      	cmp	r0, r1
   b99ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b99ec:	4604      	mov	r4, r0
   b99ee:	460e      	mov	r6, r1
   b99f0:	d01e      	beq.n	b9a30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
   b99f2:	4603      	mov	r3, r0
   b99f4:	684d      	ldr	r5, [r1, #4]
   b99f6:	f853 2b08 	ldr.w	r2, [r3], #8
   b99fa:	429a      	cmp	r2, r3
   b99fc:	bf14      	ite	ne
   b99fe:	6882      	ldrne	r2, [r0, #8]
   b9a00:	220f      	moveq	r2, #15
   b9a02:	42aa      	cmp	r2, r5
   b9a04:	d20a      	bcs.n	b9a1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
   b9a06:	a901      	add	r1, sp, #4
   b9a08:	9501      	str	r5, [sp, #4]
   b9a0a:	f7ff ffad 	bl	b9968 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   b9a0e:	4607      	mov	r7, r0
   b9a10:	4620      	mov	r0, r4
   b9a12:	f7ff ffcb 	bl	b99ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b9a16:	9b01      	ldr	r3, [sp, #4]
   b9a18:	6027      	str	r7, [r4, #0]
   b9a1a:	60a3      	str	r3, [r4, #8]
   b9a1c:	b125      	cbz	r5, b9a28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
   b9a1e:	6831      	ldr	r1, [r6, #0]
   b9a20:	6820      	ldr	r0, [r4, #0]
   b9a22:	462a      	mov	r2, r5
   b9a24:	f7ff ffca 	bl	b99bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b9a28:	6823      	ldr	r3, [r4, #0]
   b9a2a:	6065      	str	r5, [r4, #4]
   b9a2c:	2200      	movs	r2, #0
   b9a2e:	555a      	strb	r2, [r3, r5]
   b9a30:	b003      	add	sp, #12
   b9a32:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9a34 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b9a34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b9a36:	2400      	movs	r4, #0
   b9a38:	2310      	movs	r3, #16
   b9a3a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b9a3e:	6803      	ldr	r3, [r0, #0]
   b9a40:	4615      	mov	r5, r2
   b9a42:	699e      	ldr	r6, [r3, #24]
   b9a44:	6812      	ldr	r2, [r2, #0]
   b9a46:	466b      	mov	r3, sp
   b9a48:	e9cd 4400 	strd	r4, r4, [sp]
   b9a4c:	47b0      	blx	r6
   b9a4e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b9a52:	f003 0306 	and.w	r3, r3, #6
   b9a56:	2b06      	cmp	r3, #6
   b9a58:	bf03      	ittte	eq
   b9a5a:	9b00      	ldreq	r3, [sp, #0]
   b9a5c:	602b      	streq	r3, [r5, #0]
   b9a5e:	2001      	moveq	r0, #1
   b9a60:	4620      	movne	r0, r4
   b9a62:	b004      	add	sp, #16
   b9a64:	bd70      	pop	{r4, r5, r6, pc}

000b9a66 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b9a66:	9800      	ldr	r0, [sp, #0]
   b9a68:	4290      	cmp	r0, r2
   b9a6a:	bf14      	ite	ne
   b9a6c:	2001      	movne	r0, #1
   b9a6e:	2006      	moveq	r0, #6
   b9a70:	4770      	bx	lr
	...

000b9a74 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b9a74:	b510      	push	{r4, lr}
   b9a76:	4b03      	ldr	r3, [pc, #12]	; (b9a84 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b9a78:	6003      	str	r3, [r0, #0]
   b9a7a:	4604      	mov	r4, r0
   b9a7c:	f000 f8cd 	bl	b9c1a <_ZNSt9type_infoD1Ev>
   b9a80:	4620      	mov	r0, r4
   b9a82:	bd10      	pop	{r4, pc}
   b9a84:	000bd29c 	.word	0x000bd29c

000b9a88 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b9a88:	b510      	push	{r4, lr}
   b9a8a:	4604      	mov	r4, r0
   b9a8c:	f7ff fff2 	bl	b9a74 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9a90:	4620      	mov	r0, r4
   b9a92:	2108      	movs	r1, #8
   b9a94:	f7fa fb05 	bl	b40a2 <_ZdlPvj>
   b9a98:	4620      	mov	r0, r4
   b9a9a:	bd10      	pop	{r4, pc}

000b9a9c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b9a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9aa0:	461f      	mov	r7, r3
   b9aa2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b9aa6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b9aaa:	4598      	cmp	r8, r3
   b9aac:	4606      	mov	r6, r0
   b9aae:	4615      	mov	r5, r2
   b9ab0:	d107      	bne.n	b9ac2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9ab2:	9907      	ldr	r1, [sp, #28]
   b9ab4:	f000 f8b4 	bl	b9c20 <_ZNKSt9type_infoeqERKS_>
   b9ab8:	b118      	cbz	r0, b9ac2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9aba:	7165      	strb	r5, [r4, #5]
   b9abc:	2000      	movs	r0, #0
   b9abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9ac2:	4639      	mov	r1, r7
   b9ac4:	4630      	mov	r0, r6
   b9ac6:	f000 f8ab 	bl	b9c20 <_ZNKSt9type_infoeqERKS_>
   b9aca:	2800      	cmp	r0, #0
   b9acc:	d0f6      	beq.n	b9abc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b9ace:	2301      	movs	r3, #1
   b9ad0:	f8c4 8000 	str.w	r8, [r4]
   b9ad4:	7125      	strb	r5, [r4, #4]
   b9ad6:	71a3      	strb	r3, [r4, #6]
   b9ad8:	e7f0      	b.n	b9abc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b9ada <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b9ada:	b538      	push	{r3, r4, r5, lr}
   b9adc:	4615      	mov	r5, r2
   b9ade:	461c      	mov	r4, r3
   b9ae0:	f000 f89e 	bl	b9c20 <_ZNKSt9type_infoeqERKS_>
   b9ae4:	b120      	cbz	r0, b9af0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b9ae6:	2308      	movs	r3, #8
   b9ae8:	60e3      	str	r3, [r4, #12]
   b9aea:	2306      	movs	r3, #6
   b9aec:	6025      	str	r5, [r4, #0]
   b9aee:	7123      	strb	r3, [r4, #4]
   b9af0:	bd38      	pop	{r3, r4, r5, pc}

000b9af2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b9af2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9af4:	4605      	mov	r5, r0
   b9af6:	460c      	mov	r4, r1
   b9af8:	9201      	str	r2, [sp, #4]
   b9afa:	461e      	mov	r6, r3
   b9afc:	f000 f890 	bl	b9c20 <_ZNKSt9type_infoeqERKS_>
   b9b00:	b950      	cbnz	r0, b9b18 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9b02:	2e03      	cmp	r6, #3
   b9b04:	d808      	bhi.n	b9b18 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9b06:	6823      	ldr	r3, [r4, #0]
   b9b08:	9a01      	ldr	r2, [sp, #4]
   b9b0a:	695b      	ldr	r3, [r3, #20]
   b9b0c:	4629      	mov	r1, r5
   b9b0e:	4620      	mov	r0, r4
   b9b10:	b002      	add	sp, #8
   b9b12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9b16:	4718      	bx	r3
   b9b18:	b002      	add	sp, #8
   b9b1a:	bd70      	pop	{r4, r5, r6, pc}

000b9b1c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b9b1c:	b510      	push	{r4, lr}
   b9b1e:	4b03      	ldr	r3, [pc, #12]	; (b9b2c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b9b20:	6003      	str	r3, [r0, #0]
   b9b22:	4604      	mov	r4, r0
   b9b24:	f7ff ffa6 	bl	b9a74 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9b28:	4620      	mov	r0, r4
   b9b2a:	bd10      	pop	{r4, pc}
   b9b2c:	000bd2fc 	.word	0x000bd2fc

000b9b30 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b9b30:	b510      	push	{r4, lr}
   b9b32:	4604      	mov	r4, r0
   b9b34:	f7ff fff2 	bl	b9b1c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b9b38:	4620      	mov	r0, r4
   b9b3a:	210c      	movs	r1, #12
   b9b3c:	f7fa fab1 	bl	b40a2 <_ZdlPvj>
   b9b40:	4620      	mov	r0, r4
   b9b42:	bd10      	pop	{r4, pc}

000b9b44 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b9b44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b9b46:	9f08      	ldr	r7, [sp, #32]
   b9b48:	4297      	cmp	r7, r2
   b9b4a:	4605      	mov	r5, r0
   b9b4c:	460e      	mov	r6, r1
   b9b4e:	4614      	mov	r4, r2
   b9b50:	d00a      	beq.n	b9b68 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b9b52:	68a8      	ldr	r0, [r5, #8]
   b9b54:	6802      	ldr	r2, [r0, #0]
   b9b56:	9708      	str	r7, [sp, #32]
   b9b58:	6a15      	ldr	r5, [r2, #32]
   b9b5a:	4631      	mov	r1, r6
   b9b5c:	4622      	mov	r2, r4
   b9b5e:	46ac      	mov	ip, r5
   b9b60:	b003      	add	sp, #12
   b9b62:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b9b66:	4760      	bx	ip
   b9b68:	4619      	mov	r1, r3
   b9b6a:	9301      	str	r3, [sp, #4]
   b9b6c:	f000 f858 	bl	b9c20 <_ZNKSt9type_infoeqERKS_>
   b9b70:	9b01      	ldr	r3, [sp, #4]
   b9b72:	2800      	cmp	r0, #0
   b9b74:	d0ed      	beq.n	b9b52 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b9b76:	2006      	movs	r0, #6
   b9b78:	b003      	add	sp, #12
   b9b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9b7c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b9b7c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9b80:	460d      	mov	r5, r1
   b9b82:	4619      	mov	r1, r3
   b9b84:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b9b88:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b9b8c:	4681      	mov	r9, r0
   b9b8e:	4617      	mov	r7, r2
   b9b90:	4698      	mov	r8, r3
   b9b92:	f000 f845 	bl	b9c20 <_ZNKSt9type_infoeqERKS_>
   b9b96:	b190      	cbz	r0, b9bbe <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b9b98:	2d00      	cmp	r5, #0
   b9b9a:	6034      	str	r4, [r6, #0]
   b9b9c:	7137      	strb	r7, [r6, #4]
   b9b9e:	db09      	blt.n	b9bb4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b9ba0:	1961      	adds	r1, r4, r5
   b9ba2:	458a      	cmp	sl, r1
   b9ba4:	bf0c      	ite	eq
   b9ba6:	2106      	moveq	r1, #6
   b9ba8:	2101      	movne	r1, #1
   b9baa:	71b1      	strb	r1, [r6, #6]
   b9bac:	2000      	movs	r0, #0
   b9bae:	b001      	add	sp, #4
   b9bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9bb4:	3502      	adds	r5, #2
   b9bb6:	d1f9      	bne.n	b9bac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9bb8:	2301      	movs	r3, #1
   b9bba:	71b3      	strb	r3, [r6, #6]
   b9bbc:	e7f6      	b.n	b9bac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9bbe:	4554      	cmp	r4, sl
   b9bc0:	d106      	bne.n	b9bd0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9bc2:	4659      	mov	r1, fp
   b9bc4:	4648      	mov	r0, r9
   b9bc6:	f000 f82b 	bl	b9c20 <_ZNKSt9type_infoeqERKS_>
   b9bca:	b108      	cbz	r0, b9bd0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9bcc:	7177      	strb	r7, [r6, #5]
   b9bce:	e7ed      	b.n	b9bac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9bd0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b9bd4:	6803      	ldr	r3, [r0, #0]
   b9bd6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b9bda:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b9bde:	69dc      	ldr	r4, [r3, #28]
   b9be0:	463a      	mov	r2, r7
   b9be2:	4643      	mov	r3, r8
   b9be4:	4629      	mov	r1, r5
   b9be6:	46a4      	mov	ip, r4
   b9be8:	b001      	add	sp, #4
   b9bea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9bee:	4760      	bx	ip

000b9bf0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b9bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9bf4:	4607      	mov	r7, r0
   b9bf6:	460c      	mov	r4, r1
   b9bf8:	4615      	mov	r5, r2
   b9bfa:	461e      	mov	r6, r3
   b9bfc:	f7ff ff6d 	bl	b9ada <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b9c00:	b948      	cbnz	r0, b9c16 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b9c02:	68b8      	ldr	r0, [r7, #8]
   b9c04:	6803      	ldr	r3, [r0, #0]
   b9c06:	699f      	ldr	r7, [r3, #24]
   b9c08:	462a      	mov	r2, r5
   b9c0a:	4633      	mov	r3, r6
   b9c0c:	4621      	mov	r1, r4
   b9c0e:	46bc      	mov	ip, r7
   b9c10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b9c14:	4760      	bx	ip
   b9c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9c1a <_ZNSt9type_infoD1Ev>:
   b9c1a:	4770      	bx	lr

000b9c1c <_ZNKSt9type_info14__is_pointer_pEv>:
   b9c1c:	2000      	movs	r0, #0
   b9c1e:	4770      	bx	lr

000b9c20 <_ZNKSt9type_infoeqERKS_>:
   b9c20:	4281      	cmp	r1, r0
   b9c22:	b508      	push	{r3, lr}
   b9c24:	d00e      	beq.n	b9c44 <_ZNKSt9type_infoeqERKS_+0x24>
   b9c26:	6840      	ldr	r0, [r0, #4]
   b9c28:	7803      	ldrb	r3, [r0, #0]
   b9c2a:	2b2a      	cmp	r3, #42	; 0x2a
   b9c2c:	d00c      	beq.n	b9c48 <_ZNKSt9type_infoeqERKS_+0x28>
   b9c2e:	6849      	ldr	r1, [r1, #4]
   b9c30:	780b      	ldrb	r3, [r1, #0]
   b9c32:	2b2a      	cmp	r3, #42	; 0x2a
   b9c34:	bf08      	it	eq
   b9c36:	3101      	addeq	r1, #1
   b9c38:	f000 fece 	bl	ba9d8 <strcmp>
   b9c3c:	fab0 f080 	clz	r0, r0
   b9c40:	0940      	lsrs	r0, r0, #5
   b9c42:	bd08      	pop	{r3, pc}
   b9c44:	2001      	movs	r0, #1
   b9c46:	e7fc      	b.n	b9c42 <_ZNKSt9type_infoeqERKS_+0x22>
   b9c48:	2000      	movs	r0, #0
   b9c4a:	e7fa      	b.n	b9c42 <_ZNKSt9type_infoeqERKS_+0x22>

000b9c4c <floorf>:
   b9c4c:	ee10 2a10 	vmov	r2, s0
   b9c50:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   b9c54:	3b7f      	subs	r3, #127	; 0x7f
   b9c56:	2b16      	cmp	r3, #22
   b9c58:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   b9c5c:	dc28      	bgt.n	b9cb0 <floorf+0x64>
   b9c5e:	2b00      	cmp	r3, #0
   b9c60:	db18      	blt.n	b9c94 <floorf+0x48>
   b9c62:	491a      	ldr	r1, [pc, #104]	; (b9ccc <floorf+0x80>)
   b9c64:	4119      	asrs	r1, r3
   b9c66:	420a      	tst	r2, r1
   b9c68:	d021      	beq.n	b9cae <floorf+0x62>
   b9c6a:	eddf 7a19 	vldr	s15, [pc, #100]	; b9cd0 <floorf+0x84>
   b9c6e:	ee70 7a27 	vadd.f32	s15, s0, s15
   b9c72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b9c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b9c7a:	dd18      	ble.n	b9cae <floorf+0x62>
   b9c7c:	2a00      	cmp	r2, #0
   b9c7e:	da04      	bge.n	b9c8a <floorf+0x3e>
   b9c80:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   b9c84:	fa40 f303 	asr.w	r3, r0, r3
   b9c88:	441a      	add	r2, r3
   b9c8a:	ea22 0301 	bic.w	r3, r2, r1
   b9c8e:	ee00 3a10 	vmov	s0, r3
   b9c92:	4770      	bx	lr
   b9c94:	eddf 7a0e 	vldr	s15, [pc, #56]	; b9cd0 <floorf+0x84>
   b9c98:	ee70 7a27 	vadd.f32	s15, s0, s15
   b9c9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b9ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b9ca4:	dd03      	ble.n	b9cae <floorf+0x62>
   b9ca6:	2a00      	cmp	r2, #0
   b9ca8:	db08      	blt.n	b9cbc <floorf+0x70>
   b9caa:	ed9f 0a0a 	vldr	s0, [pc, #40]	; b9cd4 <floorf+0x88>
   b9cae:	4770      	bx	lr
   b9cb0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   b9cb4:	d3fb      	bcc.n	b9cae <floorf+0x62>
   b9cb6:	ee30 0a00 	vadd.f32	s0, s0, s0
   b9cba:	4770      	bx	lr
   b9cbc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b9cc0:	2900      	cmp	r1, #0
   b9cc2:	bf18      	it	ne
   b9cc4:	eeb0 0a67 	vmovne.f32	s0, s15
   b9cc8:	4770      	bx	lr
   b9cca:	bf00      	nop
   b9ccc:	007fffff 	.word	0x007fffff
   b9cd0:	7149f2ca 	.word	0x7149f2ca
   b9cd4:	00000000 	.word	0x00000000

000b9cd8 <sqrt>:
   b9cd8:	b538      	push	{r3, r4, r5, lr}
   b9cda:	ed2d 8b02 	vpush	{d8}
   b9cde:	ec55 4b10 	vmov	r4, r5, d0
   b9ce2:	f000 f833 	bl	b9d4c <__ieee754_sqrt>
   b9ce6:	4b18      	ldr	r3, [pc, #96]	; (b9d48 <sqrt+0x70>)
   b9ce8:	eeb0 8a40 	vmov.f32	s16, s0
   b9cec:	eef0 8a60 	vmov.f32	s17, s1
   b9cf0:	f993 3000 	ldrsb.w	r3, [r3]
   b9cf4:	3301      	adds	r3, #1
   b9cf6:	d00d      	beq.n	b9d14 <sqrt+0x3c>
   b9cf8:	4622      	mov	r2, r4
   b9cfa:	462b      	mov	r3, r5
   b9cfc:	4620      	mov	r0, r4
   b9cfe:	4629      	mov	r1, r5
   b9d00:	f000 fd46 	bl	ba790 <__aeabi_dcmpun>
   b9d04:	b930      	cbnz	r0, b9d14 <sqrt+0x3c>
   b9d06:	2200      	movs	r2, #0
   b9d08:	2300      	movs	r3, #0
   b9d0a:	4620      	mov	r0, r4
   b9d0c:	4629      	mov	r1, r5
   b9d0e:	f000 fd17 	bl	ba740 <__aeabi_dcmplt>
   b9d12:	b930      	cbnz	r0, b9d22 <sqrt+0x4a>
   b9d14:	eeb0 0a48 	vmov.f32	s0, s16
   b9d18:	eef0 0a68 	vmov.f32	s1, s17
   b9d1c:	ecbd 8b02 	vpop	{d8}
   b9d20:	bd38      	pop	{r3, r4, r5, pc}
   b9d22:	f7fd fa3b 	bl	b719c <__errno>
   b9d26:	2200      	movs	r2, #0
   b9d28:	2300      	movs	r3, #0
   b9d2a:	2121      	movs	r1, #33	; 0x21
   b9d2c:	6001      	str	r1, [r0, #0]
   b9d2e:	4610      	mov	r0, r2
   b9d30:	4619      	mov	r1, r3
   b9d32:	f000 fbbd 	bl	ba4b0 <__aeabi_ddiv>
   b9d36:	ec41 0b18 	vmov	d8, r0, r1
   b9d3a:	eeb0 0a48 	vmov.f32	s0, s16
   b9d3e:	eef0 0a68 	vmov.f32	s1, s17
   b9d42:	ecbd 8b02 	vpop	{d8}
   b9d46:	bd38      	pop	{r3, r4, r5, pc}
   b9d48:	20035370 	.word	0x20035370

000b9d4c <__ieee754_sqrt>:
   b9d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9d50:	4a63      	ldr	r2, [pc, #396]	; (b9ee0 <__ieee754_sqrt+0x194>)
   b9d52:	ec55 4b10 	vmov	r4, r5, d0
   b9d56:	43aa      	bics	r2, r5
   b9d58:	f000 809f 	beq.w	b9e9a <__ieee754_sqrt+0x14e>
   b9d5c:	2d00      	cmp	r5, #0
   b9d5e:	ee10 ca10 	vmov	ip, s0
   b9d62:	462b      	mov	r3, r5
   b9d64:	dd54      	ble.n	b9e10 <__ieee754_sqrt+0xc4>
   b9d66:	1529      	asrs	r1, r5, #20
   b9d68:	d063      	beq.n	b9e32 <__ieee754_sqrt+0xe6>
   b9d6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b9d6e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   b9d72:	07c9      	lsls	r1, r1, #31
   b9d74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b9d78:	d404      	bmi.n	b9d84 <__ieee754_sqrt+0x38>
   b9d7a:	005b      	lsls	r3, r3, #1
   b9d7c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b9d80:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b9d84:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   b9d88:	2600      	movs	r6, #0
   b9d8a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   b9d8e:	107f      	asrs	r7, r7, #1
   b9d90:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b9d94:	f04f 0e16 	mov.w	lr, #22
   b9d98:	4634      	mov	r4, r6
   b9d9a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   b9d9e:	18a1      	adds	r1, r4, r2
   b9da0:	4299      	cmp	r1, r3
   b9da2:	dc02      	bgt.n	b9daa <__ieee754_sqrt+0x5e>
   b9da4:	1a5b      	subs	r3, r3, r1
   b9da6:	188c      	adds	r4, r1, r2
   b9da8:	4416      	add	r6, r2
   b9daa:	005b      	lsls	r3, r3, #1
   b9dac:	f1be 0e01 	subs.w	lr, lr, #1
   b9db0:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b9db4:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b9db8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b9dbc:	d1ef      	bne.n	b9d9e <__ieee754_sqrt+0x52>
   b9dbe:	4675      	mov	r5, lr
   b9dc0:	2020      	movs	r0, #32
   b9dc2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b9dc6:	e00a      	b.n	b9dde <__ieee754_sqrt+0x92>
   b9dc8:	d044      	beq.n	b9e54 <__ieee754_sqrt+0x108>
   b9dca:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   b9dce:	3801      	subs	r0, #1
   b9dd0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   b9dd4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b9dd8:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b9ddc:	d043      	beq.n	b9e66 <__ieee754_sqrt+0x11a>
   b9dde:	42a3      	cmp	r3, r4
   b9de0:	eb02 010e 	add.w	r1, r2, lr
   b9de4:	ddf0      	ble.n	b9dc8 <__ieee754_sqrt+0x7c>
   b9de6:	2900      	cmp	r1, #0
   b9de8:	eb01 0e02 	add.w	lr, r1, r2
   b9dec:	db0a      	blt.n	b9e04 <__ieee754_sqrt+0xb8>
   b9dee:	46a0      	mov	r8, r4
   b9df0:	1b1b      	subs	r3, r3, r4
   b9df2:	4561      	cmp	r1, ip
   b9df4:	bf88      	it	hi
   b9df6:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   b9dfa:	ebac 0c01 	sub.w	ip, ip, r1
   b9dfe:	4415      	add	r5, r2
   b9e00:	4644      	mov	r4, r8
   b9e02:	e7e2      	b.n	b9dca <__ieee754_sqrt+0x7e>
   b9e04:	f1be 0f00 	cmp.w	lr, #0
   b9e08:	dbf1      	blt.n	b9dee <__ieee754_sqrt+0xa2>
   b9e0a:	f104 0801 	add.w	r8, r4, #1
   b9e0e:	e7ef      	b.n	b9df0 <__ieee754_sqrt+0xa4>
   b9e10:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   b9e14:	4322      	orrs	r2, r4
   b9e16:	d038      	beq.n	b9e8a <__ieee754_sqrt+0x13e>
   b9e18:	2d00      	cmp	r5, #0
   b9e1a:	d14e      	bne.n	b9eba <__ieee754_sqrt+0x16e>
   b9e1c:	4629      	mov	r1, r5
   b9e1e:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   b9e22:	3915      	subs	r1, #21
   b9e24:	4613      	mov	r3, r2
   b9e26:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   b9e2a:	2a00      	cmp	r2, #0
   b9e2c:	d0f7      	beq.n	b9e1e <__ieee754_sqrt+0xd2>
   b9e2e:	02d6      	lsls	r6, r2, #11
   b9e30:	d450      	bmi.n	b9ed4 <__ieee754_sqrt+0x188>
   b9e32:	2000      	movs	r0, #0
   b9e34:	005b      	lsls	r3, r3, #1
   b9e36:	02dd      	lsls	r5, r3, #11
   b9e38:	4604      	mov	r4, r0
   b9e3a:	f100 0001 	add.w	r0, r0, #1
   b9e3e:	d5f9      	bpl.n	b9e34 <__ieee754_sqrt+0xe8>
   b9e40:	461a      	mov	r2, r3
   b9e42:	4663      	mov	r3, ip
   b9e44:	fa0c fc00 	lsl.w	ip, ip, r0
   b9e48:	f1c0 0020 	rsb	r0, r0, #32
   b9e4c:	40c3      	lsrs	r3, r0
   b9e4e:	1b09      	subs	r1, r1, r4
   b9e50:	4313      	orrs	r3, r2
   b9e52:	e78a      	b.n	b9d6a <__ieee754_sqrt+0x1e>
   b9e54:	4561      	cmp	r1, ip
   b9e56:	d8b8      	bhi.n	b9dca <__ieee754_sqrt+0x7e>
   b9e58:	2900      	cmp	r1, #0
   b9e5a:	eb01 0e02 	add.w	lr, r1, r2
   b9e5e:	dbd1      	blt.n	b9e04 <__ieee754_sqrt+0xb8>
   b9e60:	4698      	mov	r8, r3
   b9e62:	2300      	movs	r3, #0
   b9e64:	e7c9      	b.n	b9dfa <__ieee754_sqrt+0xae>
   b9e66:	ea53 030c 	orrs.w	r3, r3, ip
   b9e6a:	d110      	bne.n	b9e8e <__ieee754_sqrt+0x142>
   b9e6c:	0868      	lsrs	r0, r5, #1
   b9e6e:	1071      	asrs	r1, r6, #1
   b9e70:	07f3      	lsls	r3, r6, #31
   b9e72:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   b9e76:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   b9e7a:	bf48      	it	mi
   b9e7c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   b9e80:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   b9e84:	4602      	mov	r2, r0
   b9e86:	ec43 2b10 	vmov	d0, r2, r3
   b9e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9e8e:	1c6a      	adds	r2, r5, #1
   b9e90:	bf16      	itet	ne
   b9e92:	1c68      	addne	r0, r5, #1
   b9e94:	3601      	addeq	r6, #1
   b9e96:	0840      	lsrne	r0, r0, #1
   b9e98:	e7e9      	b.n	b9e6e <__ieee754_sqrt+0x122>
   b9e9a:	ee10 2a10 	vmov	r2, s0
   b9e9e:	ee10 0a10 	vmov	r0, s0
   b9ea2:	462b      	mov	r3, r5
   b9ea4:	4629      	mov	r1, r5
   b9ea6:	f000 f9d9 	bl	ba25c <__aeabi_dmul>
   b9eaa:	4622      	mov	r2, r4
   b9eac:	462b      	mov	r3, r5
   b9eae:	f000 f81f 	bl	b9ef0 <__adddf3>
   b9eb2:	ec41 0b10 	vmov	d0, r0, r1
   b9eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9eba:	ee10 2a10 	vmov	r2, s0
   b9ebe:	4620      	mov	r0, r4
   b9ec0:	4629      	mov	r1, r5
   b9ec2:	f000 f813 	bl	b9eec <__aeabi_dsub>
   b9ec6:	4602      	mov	r2, r0
   b9ec8:	460b      	mov	r3, r1
   b9eca:	f000 faf1 	bl	ba4b0 <__aeabi_ddiv>
   b9ece:	ec41 0b10 	vmov	d0, r0, r1
   b9ed2:	e7da      	b.n	b9e8a <__ieee754_sqrt+0x13e>
   b9ed4:	4663      	mov	r3, ip
   b9ed6:	2020      	movs	r0, #32
   b9ed8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b9edc:	e7b6      	b.n	b9e4c <__ieee754_sqrt+0x100>
   b9ede:	bf00      	nop
   b9ee0:	7ff00000 	.word	0x7ff00000

000b9ee4 <__aeabi_drsub>:
   b9ee4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b9ee8:	e002      	b.n	b9ef0 <__adddf3>
   b9eea:	bf00      	nop

000b9eec <__aeabi_dsub>:
   b9eec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b9ef0 <__adddf3>:
   b9ef0:	b530      	push	{r4, r5, lr}
   b9ef2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b9ef6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b9efa:	ea94 0f05 	teq	r4, r5
   b9efe:	bf08      	it	eq
   b9f00:	ea90 0f02 	teqeq	r0, r2
   b9f04:	bf1f      	itttt	ne
   b9f06:	ea54 0c00 	orrsne.w	ip, r4, r0
   b9f0a:	ea55 0c02 	orrsne.w	ip, r5, r2
   b9f0e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b9f12:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b9f16:	f000 80e2 	beq.w	ba0de <__adddf3+0x1ee>
   b9f1a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b9f1e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b9f22:	bfb8      	it	lt
   b9f24:	426d      	neglt	r5, r5
   b9f26:	dd0c      	ble.n	b9f42 <__adddf3+0x52>
   b9f28:	442c      	add	r4, r5
   b9f2a:	ea80 0202 	eor.w	r2, r0, r2
   b9f2e:	ea81 0303 	eor.w	r3, r1, r3
   b9f32:	ea82 0000 	eor.w	r0, r2, r0
   b9f36:	ea83 0101 	eor.w	r1, r3, r1
   b9f3a:	ea80 0202 	eor.w	r2, r0, r2
   b9f3e:	ea81 0303 	eor.w	r3, r1, r3
   b9f42:	2d36      	cmp	r5, #54	; 0x36
   b9f44:	bf88      	it	hi
   b9f46:	bd30      	pophi	{r4, r5, pc}
   b9f48:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b9f4c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9f50:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b9f54:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b9f58:	d002      	beq.n	b9f60 <__adddf3+0x70>
   b9f5a:	4240      	negs	r0, r0
   b9f5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9f60:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b9f64:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b9f68:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b9f6c:	d002      	beq.n	b9f74 <__adddf3+0x84>
   b9f6e:	4252      	negs	r2, r2
   b9f70:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b9f74:	ea94 0f05 	teq	r4, r5
   b9f78:	f000 80a7 	beq.w	ba0ca <__adddf3+0x1da>
   b9f7c:	f1a4 0401 	sub.w	r4, r4, #1
   b9f80:	f1d5 0e20 	rsbs	lr, r5, #32
   b9f84:	db0d      	blt.n	b9fa2 <__adddf3+0xb2>
   b9f86:	fa02 fc0e 	lsl.w	ip, r2, lr
   b9f8a:	fa22 f205 	lsr.w	r2, r2, r5
   b9f8e:	1880      	adds	r0, r0, r2
   b9f90:	f141 0100 	adc.w	r1, r1, #0
   b9f94:	fa03 f20e 	lsl.w	r2, r3, lr
   b9f98:	1880      	adds	r0, r0, r2
   b9f9a:	fa43 f305 	asr.w	r3, r3, r5
   b9f9e:	4159      	adcs	r1, r3
   b9fa0:	e00e      	b.n	b9fc0 <__adddf3+0xd0>
   b9fa2:	f1a5 0520 	sub.w	r5, r5, #32
   b9fa6:	f10e 0e20 	add.w	lr, lr, #32
   b9faa:	2a01      	cmp	r2, #1
   b9fac:	fa03 fc0e 	lsl.w	ip, r3, lr
   b9fb0:	bf28      	it	cs
   b9fb2:	f04c 0c02 	orrcs.w	ip, ip, #2
   b9fb6:	fa43 f305 	asr.w	r3, r3, r5
   b9fba:	18c0      	adds	r0, r0, r3
   b9fbc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b9fc0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9fc4:	d507      	bpl.n	b9fd6 <__adddf3+0xe6>
   b9fc6:	f04f 0e00 	mov.w	lr, #0
   b9fca:	f1dc 0c00 	rsbs	ip, ip, #0
   b9fce:	eb7e 0000 	sbcs.w	r0, lr, r0
   b9fd2:	eb6e 0101 	sbc.w	r1, lr, r1
   b9fd6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b9fda:	d31b      	bcc.n	ba014 <__adddf3+0x124>
   b9fdc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b9fe0:	d30c      	bcc.n	b9ffc <__adddf3+0x10c>
   b9fe2:	0849      	lsrs	r1, r1, #1
   b9fe4:	ea5f 0030 	movs.w	r0, r0, rrx
   b9fe8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b9fec:	f104 0401 	add.w	r4, r4, #1
   b9ff0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b9ff4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b9ff8:	f080 809a 	bcs.w	ba130 <__adddf3+0x240>
   b9ffc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   ba000:	bf08      	it	eq
   ba002:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   ba006:	f150 0000 	adcs.w	r0, r0, #0
   ba00a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ba00e:	ea41 0105 	orr.w	r1, r1, r5
   ba012:	bd30      	pop	{r4, r5, pc}
   ba014:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   ba018:	4140      	adcs	r0, r0
   ba01a:	eb41 0101 	adc.w	r1, r1, r1
   ba01e:	3c01      	subs	r4, #1
   ba020:	bf28      	it	cs
   ba022:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   ba026:	d2e9      	bcs.n	b9ffc <__adddf3+0x10c>
   ba028:	f091 0f00 	teq	r1, #0
   ba02c:	bf04      	itt	eq
   ba02e:	4601      	moveq	r1, r0
   ba030:	2000      	moveq	r0, #0
   ba032:	fab1 f381 	clz	r3, r1
   ba036:	bf08      	it	eq
   ba038:	3320      	addeq	r3, #32
   ba03a:	f1a3 030b 	sub.w	r3, r3, #11
   ba03e:	f1b3 0220 	subs.w	r2, r3, #32
   ba042:	da0c      	bge.n	ba05e <__adddf3+0x16e>
   ba044:	320c      	adds	r2, #12
   ba046:	dd08      	ble.n	ba05a <__adddf3+0x16a>
   ba048:	f102 0c14 	add.w	ip, r2, #20
   ba04c:	f1c2 020c 	rsb	r2, r2, #12
   ba050:	fa01 f00c 	lsl.w	r0, r1, ip
   ba054:	fa21 f102 	lsr.w	r1, r1, r2
   ba058:	e00c      	b.n	ba074 <__adddf3+0x184>
   ba05a:	f102 0214 	add.w	r2, r2, #20
   ba05e:	bfd8      	it	le
   ba060:	f1c2 0c20 	rsble	ip, r2, #32
   ba064:	fa01 f102 	lsl.w	r1, r1, r2
   ba068:	fa20 fc0c 	lsr.w	ip, r0, ip
   ba06c:	bfdc      	itt	le
   ba06e:	ea41 010c 	orrle.w	r1, r1, ip
   ba072:	4090      	lslle	r0, r2
   ba074:	1ae4      	subs	r4, r4, r3
   ba076:	bfa2      	ittt	ge
   ba078:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   ba07c:	4329      	orrge	r1, r5
   ba07e:	bd30      	popge	{r4, r5, pc}
   ba080:	ea6f 0404 	mvn.w	r4, r4
   ba084:	3c1f      	subs	r4, #31
   ba086:	da1c      	bge.n	ba0c2 <__adddf3+0x1d2>
   ba088:	340c      	adds	r4, #12
   ba08a:	dc0e      	bgt.n	ba0aa <__adddf3+0x1ba>
   ba08c:	f104 0414 	add.w	r4, r4, #20
   ba090:	f1c4 0220 	rsb	r2, r4, #32
   ba094:	fa20 f004 	lsr.w	r0, r0, r4
   ba098:	fa01 f302 	lsl.w	r3, r1, r2
   ba09c:	ea40 0003 	orr.w	r0, r0, r3
   ba0a0:	fa21 f304 	lsr.w	r3, r1, r4
   ba0a4:	ea45 0103 	orr.w	r1, r5, r3
   ba0a8:	bd30      	pop	{r4, r5, pc}
   ba0aa:	f1c4 040c 	rsb	r4, r4, #12
   ba0ae:	f1c4 0220 	rsb	r2, r4, #32
   ba0b2:	fa20 f002 	lsr.w	r0, r0, r2
   ba0b6:	fa01 f304 	lsl.w	r3, r1, r4
   ba0ba:	ea40 0003 	orr.w	r0, r0, r3
   ba0be:	4629      	mov	r1, r5
   ba0c0:	bd30      	pop	{r4, r5, pc}
   ba0c2:	fa21 f004 	lsr.w	r0, r1, r4
   ba0c6:	4629      	mov	r1, r5
   ba0c8:	bd30      	pop	{r4, r5, pc}
   ba0ca:	f094 0f00 	teq	r4, #0
   ba0ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   ba0d2:	bf06      	itte	eq
   ba0d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   ba0d8:	3401      	addeq	r4, #1
   ba0da:	3d01      	subne	r5, #1
   ba0dc:	e74e      	b.n	b9f7c <__adddf3+0x8c>
   ba0de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   ba0e2:	bf18      	it	ne
   ba0e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   ba0e8:	d029      	beq.n	ba13e <__adddf3+0x24e>
   ba0ea:	ea94 0f05 	teq	r4, r5
   ba0ee:	bf08      	it	eq
   ba0f0:	ea90 0f02 	teqeq	r0, r2
   ba0f4:	d005      	beq.n	ba102 <__adddf3+0x212>
   ba0f6:	ea54 0c00 	orrs.w	ip, r4, r0
   ba0fa:	bf04      	itt	eq
   ba0fc:	4619      	moveq	r1, r3
   ba0fe:	4610      	moveq	r0, r2
   ba100:	bd30      	pop	{r4, r5, pc}
   ba102:	ea91 0f03 	teq	r1, r3
   ba106:	bf1e      	ittt	ne
   ba108:	2100      	movne	r1, #0
   ba10a:	2000      	movne	r0, #0
   ba10c:	bd30      	popne	{r4, r5, pc}
   ba10e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   ba112:	d105      	bne.n	ba120 <__adddf3+0x230>
   ba114:	0040      	lsls	r0, r0, #1
   ba116:	4149      	adcs	r1, r1
   ba118:	bf28      	it	cs
   ba11a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   ba11e:	bd30      	pop	{r4, r5, pc}
   ba120:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   ba124:	bf3c      	itt	cc
   ba126:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   ba12a:	bd30      	popcc	{r4, r5, pc}
   ba12c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba130:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   ba134:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   ba138:	f04f 0000 	mov.w	r0, #0
   ba13c:	bd30      	pop	{r4, r5, pc}
   ba13e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   ba142:	bf1a      	itte	ne
   ba144:	4619      	movne	r1, r3
   ba146:	4610      	movne	r0, r2
   ba148:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   ba14c:	bf1c      	itt	ne
   ba14e:	460b      	movne	r3, r1
   ba150:	4602      	movne	r2, r0
   ba152:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   ba156:	bf06      	itte	eq
   ba158:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   ba15c:	ea91 0f03 	teqeq	r1, r3
   ba160:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   ba164:	bd30      	pop	{r4, r5, pc}
   ba166:	bf00      	nop

000ba168 <__aeabi_ui2d>:
   ba168:	f090 0f00 	teq	r0, #0
   ba16c:	bf04      	itt	eq
   ba16e:	2100      	moveq	r1, #0
   ba170:	4770      	bxeq	lr
   ba172:	b530      	push	{r4, r5, lr}
   ba174:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ba178:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ba17c:	f04f 0500 	mov.w	r5, #0
   ba180:	f04f 0100 	mov.w	r1, #0
   ba184:	e750      	b.n	ba028 <__adddf3+0x138>
   ba186:	bf00      	nop

000ba188 <__aeabi_i2d>:
   ba188:	f090 0f00 	teq	r0, #0
   ba18c:	bf04      	itt	eq
   ba18e:	2100      	moveq	r1, #0
   ba190:	4770      	bxeq	lr
   ba192:	b530      	push	{r4, r5, lr}
   ba194:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ba198:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ba19c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   ba1a0:	bf48      	it	mi
   ba1a2:	4240      	negmi	r0, r0
   ba1a4:	f04f 0100 	mov.w	r1, #0
   ba1a8:	e73e      	b.n	ba028 <__adddf3+0x138>
   ba1aa:	bf00      	nop

000ba1ac <__aeabi_f2d>:
   ba1ac:	0042      	lsls	r2, r0, #1
   ba1ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
   ba1b2:	ea4f 0131 	mov.w	r1, r1, rrx
   ba1b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   ba1ba:	bf1f      	itttt	ne
   ba1bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   ba1c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   ba1c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   ba1c8:	4770      	bxne	lr
   ba1ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   ba1ce:	bf08      	it	eq
   ba1d0:	4770      	bxeq	lr
   ba1d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   ba1d6:	bf04      	itt	eq
   ba1d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   ba1dc:	4770      	bxeq	lr
   ba1de:	b530      	push	{r4, r5, lr}
   ba1e0:	f44f 7460 	mov.w	r4, #896	; 0x380
   ba1e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba1e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   ba1ec:	e71c      	b.n	ba028 <__adddf3+0x138>
   ba1ee:	bf00      	nop

000ba1f0 <__aeabi_ul2d>:
   ba1f0:	ea50 0201 	orrs.w	r2, r0, r1
   ba1f4:	bf08      	it	eq
   ba1f6:	4770      	bxeq	lr
   ba1f8:	b530      	push	{r4, r5, lr}
   ba1fa:	f04f 0500 	mov.w	r5, #0
   ba1fe:	e00a      	b.n	ba216 <__aeabi_l2d+0x16>

000ba200 <__aeabi_l2d>:
   ba200:	ea50 0201 	orrs.w	r2, r0, r1
   ba204:	bf08      	it	eq
   ba206:	4770      	bxeq	lr
   ba208:	b530      	push	{r4, r5, lr}
   ba20a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   ba20e:	d502      	bpl.n	ba216 <__aeabi_l2d+0x16>
   ba210:	4240      	negs	r0, r0
   ba212:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ba216:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ba21a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ba21e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   ba222:	f43f aed8 	beq.w	b9fd6 <__adddf3+0xe6>
   ba226:	f04f 0203 	mov.w	r2, #3
   ba22a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   ba22e:	bf18      	it	ne
   ba230:	3203      	addne	r2, #3
   ba232:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   ba236:	bf18      	it	ne
   ba238:	3203      	addne	r2, #3
   ba23a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   ba23e:	f1c2 0320 	rsb	r3, r2, #32
   ba242:	fa00 fc03 	lsl.w	ip, r0, r3
   ba246:	fa20 f002 	lsr.w	r0, r0, r2
   ba24a:	fa01 fe03 	lsl.w	lr, r1, r3
   ba24e:	ea40 000e 	orr.w	r0, r0, lr
   ba252:	fa21 f102 	lsr.w	r1, r1, r2
   ba256:	4414      	add	r4, r2
   ba258:	e6bd      	b.n	b9fd6 <__adddf3+0xe6>
   ba25a:	bf00      	nop

000ba25c <__aeabi_dmul>:
   ba25c:	b570      	push	{r4, r5, r6, lr}
   ba25e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   ba262:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   ba266:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   ba26a:	bf1d      	ittte	ne
   ba26c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   ba270:	ea94 0f0c 	teqne	r4, ip
   ba274:	ea95 0f0c 	teqne	r5, ip
   ba278:	f000 f8de 	bleq	ba438 <__aeabi_dmul+0x1dc>
   ba27c:	442c      	add	r4, r5
   ba27e:	ea81 0603 	eor.w	r6, r1, r3
   ba282:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   ba286:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   ba28a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   ba28e:	bf18      	it	ne
   ba290:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   ba294:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba298:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ba29c:	d038      	beq.n	ba310 <__aeabi_dmul+0xb4>
   ba29e:	fba0 ce02 	umull	ip, lr, r0, r2
   ba2a2:	f04f 0500 	mov.w	r5, #0
   ba2a6:	fbe1 e502 	umlal	lr, r5, r1, r2
   ba2aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   ba2ae:	fbe0 e503 	umlal	lr, r5, r0, r3
   ba2b2:	f04f 0600 	mov.w	r6, #0
   ba2b6:	fbe1 5603 	umlal	r5, r6, r1, r3
   ba2ba:	f09c 0f00 	teq	ip, #0
   ba2be:	bf18      	it	ne
   ba2c0:	f04e 0e01 	orrne.w	lr, lr, #1
   ba2c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   ba2c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   ba2cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   ba2d0:	d204      	bcs.n	ba2dc <__aeabi_dmul+0x80>
   ba2d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   ba2d6:	416d      	adcs	r5, r5
   ba2d8:	eb46 0606 	adc.w	r6, r6, r6
   ba2dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   ba2e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   ba2e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   ba2e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   ba2ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   ba2f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   ba2f4:	bf88      	it	hi
   ba2f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   ba2fa:	d81e      	bhi.n	ba33a <__aeabi_dmul+0xde>
   ba2fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   ba300:	bf08      	it	eq
   ba302:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   ba306:	f150 0000 	adcs.w	r0, r0, #0
   ba30a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ba30e:	bd70      	pop	{r4, r5, r6, pc}
   ba310:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   ba314:	ea46 0101 	orr.w	r1, r6, r1
   ba318:	ea40 0002 	orr.w	r0, r0, r2
   ba31c:	ea81 0103 	eor.w	r1, r1, r3
   ba320:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   ba324:	bfc2      	ittt	gt
   ba326:	ebd4 050c 	rsbsgt	r5, r4, ip
   ba32a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   ba32e:	bd70      	popgt	{r4, r5, r6, pc}
   ba330:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba334:	f04f 0e00 	mov.w	lr, #0
   ba338:	3c01      	subs	r4, #1
   ba33a:	f300 80ab 	bgt.w	ba494 <__aeabi_dmul+0x238>
   ba33e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   ba342:	bfde      	ittt	le
   ba344:	2000      	movle	r0, #0
   ba346:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   ba34a:	bd70      	pople	{r4, r5, r6, pc}
   ba34c:	f1c4 0400 	rsb	r4, r4, #0
   ba350:	3c20      	subs	r4, #32
   ba352:	da35      	bge.n	ba3c0 <__aeabi_dmul+0x164>
   ba354:	340c      	adds	r4, #12
   ba356:	dc1b      	bgt.n	ba390 <__aeabi_dmul+0x134>
   ba358:	f104 0414 	add.w	r4, r4, #20
   ba35c:	f1c4 0520 	rsb	r5, r4, #32
   ba360:	fa00 f305 	lsl.w	r3, r0, r5
   ba364:	fa20 f004 	lsr.w	r0, r0, r4
   ba368:	fa01 f205 	lsl.w	r2, r1, r5
   ba36c:	ea40 0002 	orr.w	r0, r0, r2
   ba370:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   ba374:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   ba378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   ba37c:	fa21 f604 	lsr.w	r6, r1, r4
   ba380:	eb42 0106 	adc.w	r1, r2, r6
   ba384:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ba388:	bf08      	it	eq
   ba38a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ba38e:	bd70      	pop	{r4, r5, r6, pc}
   ba390:	f1c4 040c 	rsb	r4, r4, #12
   ba394:	f1c4 0520 	rsb	r5, r4, #32
   ba398:	fa00 f304 	lsl.w	r3, r0, r4
   ba39c:	fa20 f005 	lsr.w	r0, r0, r5
   ba3a0:	fa01 f204 	lsl.w	r2, r1, r4
   ba3a4:	ea40 0002 	orr.w	r0, r0, r2
   ba3a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba3ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   ba3b0:	f141 0100 	adc.w	r1, r1, #0
   ba3b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ba3b8:	bf08      	it	eq
   ba3ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ba3be:	bd70      	pop	{r4, r5, r6, pc}
   ba3c0:	f1c4 0520 	rsb	r5, r4, #32
   ba3c4:	fa00 f205 	lsl.w	r2, r0, r5
   ba3c8:	ea4e 0e02 	orr.w	lr, lr, r2
   ba3cc:	fa20 f304 	lsr.w	r3, r0, r4
   ba3d0:	fa01 f205 	lsl.w	r2, r1, r5
   ba3d4:	ea43 0302 	orr.w	r3, r3, r2
   ba3d8:	fa21 f004 	lsr.w	r0, r1, r4
   ba3dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba3e0:	fa21 f204 	lsr.w	r2, r1, r4
   ba3e4:	ea20 0002 	bic.w	r0, r0, r2
   ba3e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   ba3ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ba3f0:	bf08      	it	eq
   ba3f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ba3f6:	bd70      	pop	{r4, r5, r6, pc}
   ba3f8:	f094 0f00 	teq	r4, #0
   ba3fc:	d10f      	bne.n	ba41e <__aeabi_dmul+0x1c2>
   ba3fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   ba402:	0040      	lsls	r0, r0, #1
   ba404:	eb41 0101 	adc.w	r1, r1, r1
   ba408:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   ba40c:	bf08      	it	eq
   ba40e:	3c01      	subeq	r4, #1
   ba410:	d0f7      	beq.n	ba402 <__aeabi_dmul+0x1a6>
   ba412:	ea41 0106 	orr.w	r1, r1, r6
   ba416:	f095 0f00 	teq	r5, #0
   ba41a:	bf18      	it	ne
   ba41c:	4770      	bxne	lr
   ba41e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   ba422:	0052      	lsls	r2, r2, #1
   ba424:	eb43 0303 	adc.w	r3, r3, r3
   ba428:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   ba42c:	bf08      	it	eq
   ba42e:	3d01      	subeq	r5, #1
   ba430:	d0f7      	beq.n	ba422 <__aeabi_dmul+0x1c6>
   ba432:	ea43 0306 	orr.w	r3, r3, r6
   ba436:	4770      	bx	lr
   ba438:	ea94 0f0c 	teq	r4, ip
   ba43c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   ba440:	bf18      	it	ne
   ba442:	ea95 0f0c 	teqne	r5, ip
   ba446:	d00c      	beq.n	ba462 <__aeabi_dmul+0x206>
   ba448:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ba44c:	bf18      	it	ne
   ba44e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ba452:	d1d1      	bne.n	ba3f8 <__aeabi_dmul+0x19c>
   ba454:	ea81 0103 	eor.w	r1, r1, r3
   ba458:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba45c:	f04f 0000 	mov.w	r0, #0
   ba460:	bd70      	pop	{r4, r5, r6, pc}
   ba462:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ba466:	bf06      	itte	eq
   ba468:	4610      	moveq	r0, r2
   ba46a:	4619      	moveq	r1, r3
   ba46c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ba470:	d019      	beq.n	ba4a6 <__aeabi_dmul+0x24a>
   ba472:	ea94 0f0c 	teq	r4, ip
   ba476:	d102      	bne.n	ba47e <__aeabi_dmul+0x222>
   ba478:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   ba47c:	d113      	bne.n	ba4a6 <__aeabi_dmul+0x24a>
   ba47e:	ea95 0f0c 	teq	r5, ip
   ba482:	d105      	bne.n	ba490 <__aeabi_dmul+0x234>
   ba484:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   ba488:	bf1c      	itt	ne
   ba48a:	4610      	movne	r0, r2
   ba48c:	4619      	movne	r1, r3
   ba48e:	d10a      	bne.n	ba4a6 <__aeabi_dmul+0x24a>
   ba490:	ea81 0103 	eor.w	r1, r1, r3
   ba494:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba498:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   ba49c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   ba4a0:	f04f 0000 	mov.w	r0, #0
   ba4a4:	bd70      	pop	{r4, r5, r6, pc}
   ba4a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   ba4aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   ba4ae:	bd70      	pop	{r4, r5, r6, pc}

000ba4b0 <__aeabi_ddiv>:
   ba4b0:	b570      	push	{r4, r5, r6, lr}
   ba4b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   ba4b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   ba4ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   ba4be:	bf1d      	ittte	ne
   ba4c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   ba4c4:	ea94 0f0c 	teqne	r4, ip
   ba4c8:	ea95 0f0c 	teqne	r5, ip
   ba4cc:	f000 f8a7 	bleq	ba61e <__aeabi_ddiv+0x16e>
   ba4d0:	eba4 0405 	sub.w	r4, r4, r5
   ba4d4:	ea81 0e03 	eor.w	lr, r1, r3
   ba4d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   ba4dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   ba4e0:	f000 8088 	beq.w	ba5f4 <__aeabi_ddiv+0x144>
   ba4e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   ba4e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   ba4ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   ba4f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   ba4f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   ba4f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   ba4fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   ba500:	ea4f 2600 	mov.w	r6, r0, lsl #8
   ba504:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   ba508:	429d      	cmp	r5, r3
   ba50a:	bf08      	it	eq
   ba50c:	4296      	cmpeq	r6, r2
   ba50e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   ba512:	f504 7440 	add.w	r4, r4, #768	; 0x300
   ba516:	d202      	bcs.n	ba51e <__aeabi_ddiv+0x6e>
   ba518:	085b      	lsrs	r3, r3, #1
   ba51a:	ea4f 0232 	mov.w	r2, r2, rrx
   ba51e:	1ab6      	subs	r6, r6, r2
   ba520:	eb65 0503 	sbc.w	r5, r5, r3
   ba524:	085b      	lsrs	r3, r3, #1
   ba526:	ea4f 0232 	mov.w	r2, r2, rrx
   ba52a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   ba52e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   ba532:	ebb6 0e02 	subs.w	lr, r6, r2
   ba536:	eb75 0e03 	sbcs.w	lr, r5, r3
   ba53a:	bf22      	ittt	cs
   ba53c:	1ab6      	subcs	r6, r6, r2
   ba53e:	4675      	movcs	r5, lr
   ba540:	ea40 000c 	orrcs.w	r0, r0, ip
   ba544:	085b      	lsrs	r3, r3, #1
   ba546:	ea4f 0232 	mov.w	r2, r2, rrx
   ba54a:	ebb6 0e02 	subs.w	lr, r6, r2
   ba54e:	eb75 0e03 	sbcs.w	lr, r5, r3
   ba552:	bf22      	ittt	cs
   ba554:	1ab6      	subcs	r6, r6, r2
   ba556:	4675      	movcs	r5, lr
   ba558:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   ba55c:	085b      	lsrs	r3, r3, #1
   ba55e:	ea4f 0232 	mov.w	r2, r2, rrx
   ba562:	ebb6 0e02 	subs.w	lr, r6, r2
   ba566:	eb75 0e03 	sbcs.w	lr, r5, r3
   ba56a:	bf22      	ittt	cs
   ba56c:	1ab6      	subcs	r6, r6, r2
   ba56e:	4675      	movcs	r5, lr
   ba570:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   ba574:	085b      	lsrs	r3, r3, #1
   ba576:	ea4f 0232 	mov.w	r2, r2, rrx
   ba57a:	ebb6 0e02 	subs.w	lr, r6, r2
   ba57e:	eb75 0e03 	sbcs.w	lr, r5, r3
   ba582:	bf22      	ittt	cs
   ba584:	1ab6      	subcs	r6, r6, r2
   ba586:	4675      	movcs	r5, lr
   ba588:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   ba58c:	ea55 0e06 	orrs.w	lr, r5, r6
   ba590:	d018      	beq.n	ba5c4 <__aeabi_ddiv+0x114>
   ba592:	ea4f 1505 	mov.w	r5, r5, lsl #4
   ba596:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   ba59a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   ba59e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   ba5a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   ba5a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   ba5aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   ba5ae:	d1c0      	bne.n	ba532 <__aeabi_ddiv+0x82>
   ba5b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   ba5b4:	d10b      	bne.n	ba5ce <__aeabi_ddiv+0x11e>
   ba5b6:	ea41 0100 	orr.w	r1, r1, r0
   ba5ba:	f04f 0000 	mov.w	r0, #0
   ba5be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   ba5c2:	e7b6      	b.n	ba532 <__aeabi_ddiv+0x82>
   ba5c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   ba5c8:	bf04      	itt	eq
   ba5ca:	4301      	orreq	r1, r0
   ba5cc:	2000      	moveq	r0, #0
   ba5ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   ba5d2:	bf88      	it	hi
   ba5d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   ba5d8:	f63f aeaf 	bhi.w	ba33a <__aeabi_dmul+0xde>
   ba5dc:	ebb5 0c03 	subs.w	ip, r5, r3
   ba5e0:	bf04      	itt	eq
   ba5e2:	ebb6 0c02 	subseq.w	ip, r6, r2
   ba5e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   ba5ea:	f150 0000 	adcs.w	r0, r0, #0
   ba5ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ba5f2:	bd70      	pop	{r4, r5, r6, pc}
   ba5f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   ba5f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   ba5fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   ba600:	bfc2      	ittt	gt
   ba602:	ebd4 050c 	rsbsgt	r5, r4, ip
   ba606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   ba60a:	bd70      	popgt	{r4, r5, r6, pc}
   ba60c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba610:	f04f 0e00 	mov.w	lr, #0
   ba614:	3c01      	subs	r4, #1
   ba616:	e690      	b.n	ba33a <__aeabi_dmul+0xde>
   ba618:	ea45 0e06 	orr.w	lr, r5, r6
   ba61c:	e68d      	b.n	ba33a <__aeabi_dmul+0xde>
   ba61e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   ba622:	ea94 0f0c 	teq	r4, ip
   ba626:	bf08      	it	eq
   ba628:	ea95 0f0c 	teqeq	r5, ip
   ba62c:	f43f af3b 	beq.w	ba4a6 <__aeabi_dmul+0x24a>
   ba630:	ea94 0f0c 	teq	r4, ip
   ba634:	d10a      	bne.n	ba64c <__aeabi_ddiv+0x19c>
   ba636:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   ba63a:	f47f af34 	bne.w	ba4a6 <__aeabi_dmul+0x24a>
   ba63e:	ea95 0f0c 	teq	r5, ip
   ba642:	f47f af25 	bne.w	ba490 <__aeabi_dmul+0x234>
   ba646:	4610      	mov	r0, r2
   ba648:	4619      	mov	r1, r3
   ba64a:	e72c      	b.n	ba4a6 <__aeabi_dmul+0x24a>
   ba64c:	ea95 0f0c 	teq	r5, ip
   ba650:	d106      	bne.n	ba660 <__aeabi_ddiv+0x1b0>
   ba652:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   ba656:	f43f aefd 	beq.w	ba454 <__aeabi_dmul+0x1f8>
   ba65a:	4610      	mov	r0, r2
   ba65c:	4619      	mov	r1, r3
   ba65e:	e722      	b.n	ba4a6 <__aeabi_dmul+0x24a>
   ba660:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ba664:	bf18      	it	ne
   ba666:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ba66a:	f47f aec5 	bne.w	ba3f8 <__aeabi_dmul+0x19c>
   ba66e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   ba672:	f47f af0d 	bne.w	ba490 <__aeabi_dmul+0x234>
   ba676:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   ba67a:	f47f aeeb 	bne.w	ba454 <__aeabi_dmul+0x1f8>
   ba67e:	e712      	b.n	ba4a6 <__aeabi_dmul+0x24a>

000ba680 <__gedf2>:
   ba680:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   ba684:	e006      	b.n	ba694 <__cmpdf2+0x4>
   ba686:	bf00      	nop

000ba688 <__ledf2>:
   ba688:	f04f 0c01 	mov.w	ip, #1
   ba68c:	e002      	b.n	ba694 <__cmpdf2+0x4>
   ba68e:	bf00      	nop

000ba690 <__cmpdf2>:
   ba690:	f04f 0c01 	mov.w	ip, #1
   ba694:	f84d cd04 	str.w	ip, [sp, #-4]!
   ba698:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   ba69c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba6a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   ba6a4:	bf18      	it	ne
   ba6a6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   ba6aa:	d01b      	beq.n	ba6e4 <__cmpdf2+0x54>
   ba6ac:	b001      	add	sp, #4
   ba6ae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   ba6b2:	bf0c      	ite	eq
   ba6b4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   ba6b8:	ea91 0f03 	teqne	r1, r3
   ba6bc:	bf02      	ittt	eq
   ba6be:	ea90 0f02 	teqeq	r0, r2
   ba6c2:	2000      	moveq	r0, #0
   ba6c4:	4770      	bxeq	lr
   ba6c6:	f110 0f00 	cmn.w	r0, #0
   ba6ca:	ea91 0f03 	teq	r1, r3
   ba6ce:	bf58      	it	pl
   ba6d0:	4299      	cmppl	r1, r3
   ba6d2:	bf08      	it	eq
   ba6d4:	4290      	cmpeq	r0, r2
   ba6d6:	bf2c      	ite	cs
   ba6d8:	17d8      	asrcs	r0, r3, #31
   ba6da:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   ba6de:	f040 0001 	orr.w	r0, r0, #1
   ba6e2:	4770      	bx	lr
   ba6e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   ba6e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba6ec:	d102      	bne.n	ba6f4 <__cmpdf2+0x64>
   ba6ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   ba6f2:	d107      	bne.n	ba704 <__cmpdf2+0x74>
   ba6f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   ba6f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba6fc:	d1d6      	bne.n	ba6ac <__cmpdf2+0x1c>
   ba6fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   ba702:	d0d3      	beq.n	ba6ac <__cmpdf2+0x1c>
   ba704:	f85d 0b04 	ldr.w	r0, [sp], #4
   ba708:	4770      	bx	lr
   ba70a:	bf00      	nop

000ba70c <__aeabi_cdrcmple>:
   ba70c:	4684      	mov	ip, r0
   ba70e:	4610      	mov	r0, r2
   ba710:	4662      	mov	r2, ip
   ba712:	468c      	mov	ip, r1
   ba714:	4619      	mov	r1, r3
   ba716:	4663      	mov	r3, ip
   ba718:	e000      	b.n	ba71c <__aeabi_cdcmpeq>
   ba71a:	bf00      	nop

000ba71c <__aeabi_cdcmpeq>:
   ba71c:	b501      	push	{r0, lr}
   ba71e:	f7ff ffb7 	bl	ba690 <__cmpdf2>
   ba722:	2800      	cmp	r0, #0
   ba724:	bf48      	it	mi
   ba726:	f110 0f00 	cmnmi.w	r0, #0
   ba72a:	bd01      	pop	{r0, pc}

000ba72c <__aeabi_dcmpeq>:
   ba72c:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba730:	f7ff fff4 	bl	ba71c <__aeabi_cdcmpeq>
   ba734:	bf0c      	ite	eq
   ba736:	2001      	moveq	r0, #1
   ba738:	2000      	movne	r0, #0
   ba73a:	f85d fb08 	ldr.w	pc, [sp], #8
   ba73e:	bf00      	nop

000ba740 <__aeabi_dcmplt>:
   ba740:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba744:	f7ff ffea 	bl	ba71c <__aeabi_cdcmpeq>
   ba748:	bf34      	ite	cc
   ba74a:	2001      	movcc	r0, #1
   ba74c:	2000      	movcs	r0, #0
   ba74e:	f85d fb08 	ldr.w	pc, [sp], #8
   ba752:	bf00      	nop

000ba754 <__aeabi_dcmple>:
   ba754:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba758:	f7ff ffe0 	bl	ba71c <__aeabi_cdcmpeq>
   ba75c:	bf94      	ite	ls
   ba75e:	2001      	movls	r0, #1
   ba760:	2000      	movhi	r0, #0
   ba762:	f85d fb08 	ldr.w	pc, [sp], #8
   ba766:	bf00      	nop

000ba768 <__aeabi_dcmpge>:
   ba768:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba76c:	f7ff ffce 	bl	ba70c <__aeabi_cdrcmple>
   ba770:	bf94      	ite	ls
   ba772:	2001      	movls	r0, #1
   ba774:	2000      	movhi	r0, #0
   ba776:	f85d fb08 	ldr.w	pc, [sp], #8
   ba77a:	bf00      	nop

000ba77c <__aeabi_dcmpgt>:
   ba77c:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba780:	f7ff ffc4 	bl	ba70c <__aeabi_cdrcmple>
   ba784:	bf34      	ite	cc
   ba786:	2001      	movcc	r0, #1
   ba788:	2000      	movcs	r0, #0
   ba78a:	f85d fb08 	ldr.w	pc, [sp], #8
   ba78e:	bf00      	nop

000ba790 <__aeabi_dcmpun>:
   ba790:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   ba794:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba798:	d102      	bne.n	ba7a0 <__aeabi_dcmpun+0x10>
   ba79a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   ba79e:	d10a      	bne.n	ba7b6 <__aeabi_dcmpun+0x26>
   ba7a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   ba7a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba7a8:	d102      	bne.n	ba7b0 <__aeabi_dcmpun+0x20>
   ba7aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   ba7ae:	d102      	bne.n	ba7b6 <__aeabi_dcmpun+0x26>
   ba7b0:	f04f 0000 	mov.w	r0, #0
   ba7b4:	4770      	bx	lr
   ba7b6:	f04f 0001 	mov.w	r0, #1
   ba7ba:	4770      	bx	lr

000ba7bc <__aeabi_d2uiz>:
   ba7bc:	004a      	lsls	r2, r1, #1
   ba7be:	d211      	bcs.n	ba7e4 <__aeabi_d2uiz+0x28>
   ba7c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   ba7c4:	d211      	bcs.n	ba7ea <__aeabi_d2uiz+0x2e>
   ba7c6:	d50d      	bpl.n	ba7e4 <__aeabi_d2uiz+0x28>
   ba7c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   ba7cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   ba7d0:	d40e      	bmi.n	ba7f0 <__aeabi_d2uiz+0x34>
   ba7d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   ba7d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   ba7da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   ba7de:	fa23 f002 	lsr.w	r0, r3, r2
   ba7e2:	4770      	bx	lr
   ba7e4:	f04f 0000 	mov.w	r0, #0
   ba7e8:	4770      	bx	lr
   ba7ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   ba7ee:	d102      	bne.n	ba7f6 <__aeabi_d2uiz+0x3a>
   ba7f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   ba7f4:	4770      	bx	lr
   ba7f6:	f04f 0000 	mov.w	r0, #0
   ba7fa:	4770      	bx	lr

000ba7fc <__aeabi_d2f>:
   ba7fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   ba800:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   ba804:	bf24      	itt	cs
   ba806:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   ba80a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   ba80e:	d90d      	bls.n	ba82c <__aeabi_d2f+0x30>
   ba810:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   ba814:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   ba818:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   ba81c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   ba820:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   ba824:	bf08      	it	eq
   ba826:	f020 0001 	biceq.w	r0, r0, #1
   ba82a:	4770      	bx	lr
   ba82c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   ba830:	d121      	bne.n	ba876 <__aeabi_d2f+0x7a>
   ba832:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   ba836:	bfbc      	itt	lt
   ba838:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   ba83c:	4770      	bxlt	lr
   ba83e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba842:	ea4f 5252 	mov.w	r2, r2, lsr #21
   ba846:	f1c2 0218 	rsb	r2, r2, #24
   ba84a:	f1c2 0c20 	rsb	ip, r2, #32
   ba84e:	fa10 f30c 	lsls.w	r3, r0, ip
   ba852:	fa20 f002 	lsr.w	r0, r0, r2
   ba856:	bf18      	it	ne
   ba858:	f040 0001 	orrne.w	r0, r0, #1
   ba85c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   ba860:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   ba864:	fa03 fc0c 	lsl.w	ip, r3, ip
   ba868:	ea40 000c 	orr.w	r0, r0, ip
   ba86c:	fa23 f302 	lsr.w	r3, r3, r2
   ba870:	ea4f 0343 	mov.w	r3, r3, lsl #1
   ba874:	e7cc      	b.n	ba810 <__aeabi_d2f+0x14>
   ba876:	ea7f 5362 	mvns.w	r3, r2, asr #21
   ba87a:	d107      	bne.n	ba88c <__aeabi_d2f+0x90>
   ba87c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   ba880:	bf1e      	ittt	ne
   ba882:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   ba886:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   ba88a:	4770      	bxne	lr
   ba88c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   ba890:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   ba894:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   ba898:	4770      	bx	lr
   ba89a:	bf00      	nop

000ba89c <__aeabi_d2ulz>:
   ba89c:	b5d0      	push	{r4, r6, r7, lr}
   ba89e:	4b0c      	ldr	r3, [pc, #48]	; (ba8d0 <__aeabi_d2ulz+0x34>)
   ba8a0:	2200      	movs	r2, #0
   ba8a2:	4606      	mov	r6, r0
   ba8a4:	460f      	mov	r7, r1
   ba8a6:	f7ff fcd9 	bl	ba25c <__aeabi_dmul>
   ba8aa:	f7ff ff87 	bl	ba7bc <__aeabi_d2uiz>
   ba8ae:	4604      	mov	r4, r0
   ba8b0:	f7ff fc5a 	bl	ba168 <__aeabi_ui2d>
   ba8b4:	4b07      	ldr	r3, [pc, #28]	; (ba8d4 <__aeabi_d2ulz+0x38>)
   ba8b6:	2200      	movs	r2, #0
   ba8b8:	f7ff fcd0 	bl	ba25c <__aeabi_dmul>
   ba8bc:	4602      	mov	r2, r0
   ba8be:	460b      	mov	r3, r1
   ba8c0:	4630      	mov	r0, r6
   ba8c2:	4639      	mov	r1, r7
   ba8c4:	f7ff fb12 	bl	b9eec <__aeabi_dsub>
   ba8c8:	f7ff ff78 	bl	ba7bc <__aeabi_d2uiz>
   ba8cc:	4621      	mov	r1, r4
   ba8ce:	bdd0      	pop	{r4, r6, r7, pc}
   ba8d0:	3df00000 	.word	0x3df00000
   ba8d4:	41f00000 	.word	0x41f00000

000ba8d8 <atexit>:
   ba8d8:	2300      	movs	r3, #0
   ba8da:	4601      	mov	r1, r0
   ba8dc:	461a      	mov	r2, r3
   ba8de:	4618      	mov	r0, r3
   ba8e0:	f000 bf84 	b.w	bb7ec <__register_exitproc>

000ba8e4 <atof>:
   ba8e4:	2100      	movs	r1, #0
   ba8e6:	f000 bee9 	b.w	bb6bc <strtod>

000ba8ea <atoi>:
   ba8ea:	220a      	movs	r2, #10
   ba8ec:	2100      	movs	r1, #0
   ba8ee:	f000 bf73 	b.w	bb7d8 <strtol>

000ba8f2 <atol>:
   ba8f2:	220a      	movs	r2, #10
   ba8f4:	2100      	movs	r1, #0
   ba8f6:	f000 bf6f 	b.w	bb7d8 <strtol>

000ba8fa <memcmp>:
   ba8fa:	b510      	push	{r4, lr}
   ba8fc:	3901      	subs	r1, #1
   ba8fe:	4402      	add	r2, r0
   ba900:	4290      	cmp	r0, r2
   ba902:	d101      	bne.n	ba908 <memcmp+0xe>
   ba904:	2000      	movs	r0, #0
   ba906:	e005      	b.n	ba914 <memcmp+0x1a>
   ba908:	7803      	ldrb	r3, [r0, #0]
   ba90a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   ba90e:	42a3      	cmp	r3, r4
   ba910:	d001      	beq.n	ba916 <memcmp+0x1c>
   ba912:	1b18      	subs	r0, r3, r4
   ba914:	bd10      	pop	{r4, pc}
   ba916:	3001      	adds	r0, #1
   ba918:	e7f2      	b.n	ba900 <memcmp+0x6>

000ba91a <memcpy>:
   ba91a:	440a      	add	r2, r1
   ba91c:	4291      	cmp	r1, r2
   ba91e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   ba922:	d100      	bne.n	ba926 <memcpy+0xc>
   ba924:	4770      	bx	lr
   ba926:	b510      	push	{r4, lr}
   ba928:	f811 4b01 	ldrb.w	r4, [r1], #1
   ba92c:	f803 4f01 	strb.w	r4, [r3, #1]!
   ba930:	4291      	cmp	r1, r2
   ba932:	d1f9      	bne.n	ba928 <memcpy+0xe>
   ba934:	bd10      	pop	{r4, pc}

000ba936 <memmove>:
   ba936:	4288      	cmp	r0, r1
   ba938:	b510      	push	{r4, lr}
   ba93a:	eb01 0402 	add.w	r4, r1, r2
   ba93e:	d902      	bls.n	ba946 <memmove+0x10>
   ba940:	4284      	cmp	r4, r0
   ba942:	4623      	mov	r3, r4
   ba944:	d807      	bhi.n	ba956 <memmove+0x20>
   ba946:	1e43      	subs	r3, r0, #1
   ba948:	42a1      	cmp	r1, r4
   ba94a:	d008      	beq.n	ba95e <memmove+0x28>
   ba94c:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba950:	f803 2f01 	strb.w	r2, [r3, #1]!
   ba954:	e7f8      	b.n	ba948 <memmove+0x12>
   ba956:	4402      	add	r2, r0
   ba958:	4601      	mov	r1, r0
   ba95a:	428a      	cmp	r2, r1
   ba95c:	d100      	bne.n	ba960 <memmove+0x2a>
   ba95e:	bd10      	pop	{r4, pc}
   ba960:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   ba964:	f802 4d01 	strb.w	r4, [r2, #-1]!
   ba968:	e7f7      	b.n	ba95a <memmove+0x24>

000ba96a <memset>:
   ba96a:	4402      	add	r2, r0
   ba96c:	4603      	mov	r3, r0
   ba96e:	4293      	cmp	r3, r2
   ba970:	d100      	bne.n	ba974 <memset+0xa>
   ba972:	4770      	bx	lr
   ba974:	f803 1b01 	strb.w	r1, [r3], #1
   ba978:	e7f9      	b.n	ba96e <memset+0x4>
	...

000ba97c <srand>:
   ba97c:	b538      	push	{r3, r4, r5, lr}
   ba97e:	4b10      	ldr	r3, [pc, #64]	; (ba9c0 <srand+0x44>)
   ba980:	681d      	ldr	r5, [r3, #0]
   ba982:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba984:	4604      	mov	r4, r0
   ba986:	b9b3      	cbnz	r3, ba9b6 <srand+0x3a>
   ba988:	2018      	movs	r0, #24
   ba98a:	f7fc fbcf 	bl	b712c <malloc>
   ba98e:	4602      	mov	r2, r0
   ba990:	63a8      	str	r0, [r5, #56]	; 0x38
   ba992:	b920      	cbnz	r0, ba99e <srand+0x22>
   ba994:	4b0b      	ldr	r3, [pc, #44]	; (ba9c4 <srand+0x48>)
   ba996:	480c      	ldr	r0, [pc, #48]	; (ba9c8 <srand+0x4c>)
   ba998:	2142      	movs	r1, #66	; 0x42
   ba99a:	f7fc fc07 	bl	b71ac <__assert_func>
   ba99e:	490b      	ldr	r1, [pc, #44]	; (ba9cc <srand+0x50>)
   ba9a0:	4b0b      	ldr	r3, [pc, #44]	; (ba9d0 <srand+0x54>)
   ba9a2:	e9c0 1300 	strd	r1, r3, [r0]
   ba9a6:	4b0b      	ldr	r3, [pc, #44]	; (ba9d4 <srand+0x58>)
   ba9a8:	6083      	str	r3, [r0, #8]
   ba9aa:	230b      	movs	r3, #11
   ba9ac:	8183      	strh	r3, [r0, #12]
   ba9ae:	2100      	movs	r1, #0
   ba9b0:	2001      	movs	r0, #1
   ba9b2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   ba9b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba9b8:	2200      	movs	r2, #0
   ba9ba:	611c      	str	r4, [r3, #16]
   ba9bc:	615a      	str	r2, [r3, #20]
   ba9be:	bd38      	pop	{r3, r4, r5, pc}
   ba9c0:	20035374 	.word	0x20035374
   ba9c4:	000bd335 	.word	0x000bd335
   ba9c8:	000bd34c 	.word	0x000bd34c
   ba9cc:	abcd330e 	.word	0xabcd330e
   ba9d0:	e66d1234 	.word	0xe66d1234
   ba9d4:	0005deec 	.word	0x0005deec

000ba9d8 <strcmp>:
   ba9d8:	f810 2b01 	ldrb.w	r2, [r0], #1
   ba9dc:	f811 3b01 	ldrb.w	r3, [r1], #1
   ba9e0:	2a01      	cmp	r2, #1
   ba9e2:	bf28      	it	cs
   ba9e4:	429a      	cmpcs	r2, r3
   ba9e6:	d0f7      	beq.n	ba9d8 <strcmp>
   ba9e8:	1ad0      	subs	r0, r2, r3
   ba9ea:	4770      	bx	lr

000ba9ec <strcpy>:
   ba9ec:	4603      	mov	r3, r0
   ba9ee:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba9f2:	f803 2b01 	strb.w	r2, [r3], #1
   ba9f6:	2a00      	cmp	r2, #0
   ba9f8:	d1f9      	bne.n	ba9ee <strcpy+0x2>
   ba9fa:	4770      	bx	lr

000ba9fc <strlen>:
   ba9fc:	4603      	mov	r3, r0
   ba9fe:	f813 2b01 	ldrb.w	r2, [r3], #1
   baa02:	2a00      	cmp	r2, #0
   baa04:	d1fb      	bne.n	ba9fe <strlen+0x2>
   baa06:	1a18      	subs	r0, r3, r0
   baa08:	3801      	subs	r0, #1
   baa0a:	4770      	bx	lr

000baa0c <strncmp>:
   baa0c:	b510      	push	{r4, lr}
   baa0e:	b17a      	cbz	r2, baa30 <strncmp+0x24>
   baa10:	4603      	mov	r3, r0
   baa12:	3901      	subs	r1, #1
   baa14:	1884      	adds	r4, r0, r2
   baa16:	f813 0b01 	ldrb.w	r0, [r3], #1
   baa1a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   baa1e:	4290      	cmp	r0, r2
   baa20:	d101      	bne.n	baa26 <strncmp+0x1a>
   baa22:	42a3      	cmp	r3, r4
   baa24:	d101      	bne.n	baa2a <strncmp+0x1e>
   baa26:	1a80      	subs	r0, r0, r2
   baa28:	bd10      	pop	{r4, pc}
   baa2a:	2800      	cmp	r0, #0
   baa2c:	d1f3      	bne.n	baa16 <strncmp+0xa>
   baa2e:	e7fa      	b.n	baa26 <strncmp+0x1a>
   baa30:	4610      	mov	r0, r2
   baa32:	e7f9      	b.n	baa28 <strncmp+0x1c>

000baa34 <strnlen>:
   baa34:	b510      	push	{r4, lr}
   baa36:	4602      	mov	r2, r0
   baa38:	4401      	add	r1, r0
   baa3a:	428a      	cmp	r2, r1
   baa3c:	4613      	mov	r3, r2
   baa3e:	d003      	beq.n	baa48 <strnlen+0x14>
   baa40:	781c      	ldrb	r4, [r3, #0]
   baa42:	3201      	adds	r2, #1
   baa44:	2c00      	cmp	r4, #0
   baa46:	d1f8      	bne.n	baa3a <strnlen+0x6>
   baa48:	1a18      	subs	r0, r3, r0
   baa4a:	bd10      	pop	{r4, pc}

000baa4c <strstr>:
   baa4c:	780a      	ldrb	r2, [r1, #0]
   baa4e:	b570      	push	{r4, r5, r6, lr}
   baa50:	b96a      	cbnz	r2, baa6e <strstr+0x22>
   baa52:	bd70      	pop	{r4, r5, r6, pc}
   baa54:	429a      	cmp	r2, r3
   baa56:	d109      	bne.n	baa6c <strstr+0x20>
   baa58:	460c      	mov	r4, r1
   baa5a:	4605      	mov	r5, r0
   baa5c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   baa60:	2b00      	cmp	r3, #0
   baa62:	d0f6      	beq.n	baa52 <strstr+0x6>
   baa64:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   baa68:	429e      	cmp	r6, r3
   baa6a:	d0f7      	beq.n	baa5c <strstr+0x10>
   baa6c:	3001      	adds	r0, #1
   baa6e:	7803      	ldrb	r3, [r0, #0]
   baa70:	2b00      	cmp	r3, #0
   baa72:	d1ef      	bne.n	baa54 <strstr+0x8>
   baa74:	4618      	mov	r0, r3
   baa76:	e7ec      	b.n	baa52 <strstr+0x6>

000baa78 <sulp>:
   baa78:	b570      	push	{r4, r5, r6, lr}
   baa7a:	4604      	mov	r4, r0
   baa7c:	460d      	mov	r5, r1
   baa7e:	ec45 4b10 	vmov	d0, r4, r5
   baa82:	4616      	mov	r6, r2
   baa84:	f001 fe0c 	bl	bc6a0 <__ulp>
   baa88:	ec51 0b10 	vmov	r0, r1, d0
   baa8c:	b17e      	cbz	r6, baaae <sulp+0x36>
   baa8e:	f3c5 530a 	ubfx	r3, r5, #20, #11
   baa92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   baa96:	2b00      	cmp	r3, #0
   baa98:	dd09      	ble.n	baaae <sulp+0x36>
   baa9a:	051b      	lsls	r3, r3, #20
   baa9c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   baaa0:	2400      	movs	r4, #0
   baaa2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   baaa6:	4622      	mov	r2, r4
   baaa8:	462b      	mov	r3, r5
   baaaa:	f7ff fbd7 	bl	ba25c <__aeabi_dmul>
   baaae:	bd70      	pop	{r4, r5, r6, pc}

000baab0 <_strtod_l>:
   baab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   baab4:	ed2d 8b02 	vpush	{d8}
   baab8:	b09d      	sub	sp, #116	; 0x74
   baaba:	461f      	mov	r7, r3
   baabc:	2300      	movs	r3, #0
   baabe:	9318      	str	r3, [sp, #96]	; 0x60
   baac0:	4ba2      	ldr	r3, [pc, #648]	; (bad4c <_strtod_l+0x29c>)
   baac2:	9213      	str	r2, [sp, #76]	; 0x4c
   baac4:	681b      	ldr	r3, [r3, #0]
   baac6:	9305      	str	r3, [sp, #20]
   baac8:	4604      	mov	r4, r0
   baaca:	4618      	mov	r0, r3
   baacc:	4688      	mov	r8, r1
   baace:	f7ff ff95 	bl	ba9fc <strlen>
   baad2:	f04f 0a00 	mov.w	sl, #0
   baad6:	4605      	mov	r5, r0
   baad8:	f04f 0b00 	mov.w	fp, #0
   baadc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   baae0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   baae2:	781a      	ldrb	r2, [r3, #0]
   baae4:	2a2b      	cmp	r2, #43	; 0x2b
   baae6:	d04e      	beq.n	bab86 <_strtod_l+0xd6>
   baae8:	d83b      	bhi.n	bab62 <_strtod_l+0xb2>
   baaea:	2a0d      	cmp	r2, #13
   baaec:	d834      	bhi.n	bab58 <_strtod_l+0xa8>
   baaee:	2a08      	cmp	r2, #8
   baaf0:	d834      	bhi.n	bab5c <_strtod_l+0xac>
   baaf2:	2a00      	cmp	r2, #0
   baaf4:	d03e      	beq.n	bab74 <_strtod_l+0xc4>
   baaf6:	2300      	movs	r3, #0
   baaf8:	930a      	str	r3, [sp, #40]	; 0x28
   baafa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   baafc:	7833      	ldrb	r3, [r6, #0]
   baafe:	2b30      	cmp	r3, #48	; 0x30
   bab00:	f040 80b0 	bne.w	bac64 <_strtod_l+0x1b4>
   bab04:	7873      	ldrb	r3, [r6, #1]
   bab06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bab0a:	2b58      	cmp	r3, #88	; 0x58
   bab0c:	d168      	bne.n	babe0 <_strtod_l+0x130>
   bab0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bab10:	9301      	str	r3, [sp, #4]
   bab12:	ab18      	add	r3, sp, #96	; 0x60
   bab14:	9702      	str	r7, [sp, #8]
   bab16:	9300      	str	r3, [sp, #0]
   bab18:	4a8d      	ldr	r2, [pc, #564]	; (bad50 <_strtod_l+0x2a0>)
   bab1a:	ab19      	add	r3, sp, #100	; 0x64
   bab1c:	a917      	add	r1, sp, #92	; 0x5c
   bab1e:	4620      	mov	r0, r4
   bab20:	f000 ff2e 	bl	bb980 <__gethex>
   bab24:	f010 0707 	ands.w	r7, r0, #7
   bab28:	4605      	mov	r5, r0
   bab2a:	d005      	beq.n	bab38 <_strtod_l+0x88>
   bab2c:	2f06      	cmp	r7, #6
   bab2e:	d12c      	bne.n	bab8a <_strtod_l+0xda>
   bab30:	3601      	adds	r6, #1
   bab32:	2300      	movs	r3, #0
   bab34:	9617      	str	r6, [sp, #92]	; 0x5c
   bab36:	930a      	str	r3, [sp, #40]	; 0x28
   bab38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bab3a:	2b00      	cmp	r3, #0
   bab3c:	f040 8590 	bne.w	bb660 <_strtod_l+0xbb0>
   bab40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bab42:	b1eb      	cbz	r3, bab80 <_strtod_l+0xd0>
   bab44:	4652      	mov	r2, sl
   bab46:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bab4a:	ec43 2b10 	vmov	d0, r2, r3
   bab4e:	b01d      	add	sp, #116	; 0x74
   bab50:	ecbd 8b02 	vpop	{d8}
   bab54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bab58:	2a20      	cmp	r2, #32
   bab5a:	d1cc      	bne.n	baaf6 <_strtod_l+0x46>
   bab5c:	3301      	adds	r3, #1
   bab5e:	9317      	str	r3, [sp, #92]	; 0x5c
   bab60:	e7be      	b.n	baae0 <_strtod_l+0x30>
   bab62:	2a2d      	cmp	r2, #45	; 0x2d
   bab64:	d1c7      	bne.n	baaf6 <_strtod_l+0x46>
   bab66:	2201      	movs	r2, #1
   bab68:	920a      	str	r2, [sp, #40]	; 0x28
   bab6a:	1c5a      	adds	r2, r3, #1
   bab6c:	9217      	str	r2, [sp, #92]	; 0x5c
   bab6e:	785b      	ldrb	r3, [r3, #1]
   bab70:	2b00      	cmp	r3, #0
   bab72:	d1c2      	bne.n	baafa <_strtod_l+0x4a>
   bab74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bab76:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bab7a:	2b00      	cmp	r3, #0
   bab7c:	f040 856e 	bne.w	bb65c <_strtod_l+0xbac>
   bab80:	4652      	mov	r2, sl
   bab82:	465b      	mov	r3, fp
   bab84:	e7e1      	b.n	bab4a <_strtod_l+0x9a>
   bab86:	2200      	movs	r2, #0
   bab88:	e7ee      	b.n	bab68 <_strtod_l+0xb8>
   bab8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bab8c:	b13a      	cbz	r2, bab9e <_strtod_l+0xee>
   bab8e:	2135      	movs	r1, #53	; 0x35
   bab90:	a81a      	add	r0, sp, #104	; 0x68
   bab92:	f001 fe90 	bl	bc8b6 <__copybits>
   bab96:	9918      	ldr	r1, [sp, #96]	; 0x60
   bab98:	4620      	mov	r0, r4
   bab9a:	f001 fa4f 	bl	bc03c <_Bfree>
   bab9e:	3f01      	subs	r7, #1
   baba0:	2f04      	cmp	r7, #4
   baba2:	d806      	bhi.n	babb2 <_strtod_l+0x102>
   baba4:	e8df f007 	tbb	[pc, r7]
   baba8:	1714030a 	.word	0x1714030a
   babac:	0a          	.byte	0x0a
   babad:	00          	.byte	0x00
   babae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   babb2:	0728      	lsls	r0, r5, #28
   babb4:	d5c0      	bpl.n	bab38 <_strtod_l+0x88>
   babb6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   babba:	e7bd      	b.n	bab38 <_strtod_l+0x88>
   babbc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   babc0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   babc2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   babc6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   babca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   babce:	e7f0      	b.n	babb2 <_strtod_l+0x102>
   babd0:	f8df b180 	ldr.w	fp, [pc, #384]	; bad54 <_strtod_l+0x2a4>
   babd4:	e7ed      	b.n	babb2 <_strtod_l+0x102>
   babd6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   babda:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   babde:	e7e8      	b.n	babb2 <_strtod_l+0x102>
   babe0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   babe2:	1c5a      	adds	r2, r3, #1
   babe4:	9217      	str	r2, [sp, #92]	; 0x5c
   babe6:	785b      	ldrb	r3, [r3, #1]
   babe8:	2b30      	cmp	r3, #48	; 0x30
   babea:	d0f9      	beq.n	babe0 <_strtod_l+0x130>
   babec:	2b00      	cmp	r3, #0
   babee:	d0a3      	beq.n	bab38 <_strtod_l+0x88>
   babf0:	2301      	movs	r3, #1
   babf2:	f04f 0900 	mov.w	r9, #0
   babf6:	9304      	str	r3, [sp, #16]
   babf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   babfa:	9308      	str	r3, [sp, #32]
   babfc:	f8cd 901c 	str.w	r9, [sp, #28]
   bac00:	464f      	mov	r7, r9
   bac02:	220a      	movs	r2, #10
   bac04:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bac06:	7806      	ldrb	r6, [r0, #0]
   bac08:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bac0c:	b2d9      	uxtb	r1, r3
   bac0e:	2909      	cmp	r1, #9
   bac10:	d92a      	bls.n	bac68 <_strtod_l+0x1b8>
   bac12:	9905      	ldr	r1, [sp, #20]
   bac14:	462a      	mov	r2, r5
   bac16:	f7ff fef9 	bl	baa0c <strncmp>
   bac1a:	b398      	cbz	r0, bac84 <_strtod_l+0x1d4>
   bac1c:	2000      	movs	r0, #0
   bac1e:	4632      	mov	r2, r6
   bac20:	463d      	mov	r5, r7
   bac22:	9005      	str	r0, [sp, #20]
   bac24:	4603      	mov	r3, r0
   bac26:	2a65      	cmp	r2, #101	; 0x65
   bac28:	d001      	beq.n	bac2e <_strtod_l+0x17e>
   bac2a:	2a45      	cmp	r2, #69	; 0x45
   bac2c:	d118      	bne.n	bac60 <_strtod_l+0x1b0>
   bac2e:	b91d      	cbnz	r5, bac38 <_strtod_l+0x188>
   bac30:	9a04      	ldr	r2, [sp, #16]
   bac32:	4302      	orrs	r2, r0
   bac34:	d09e      	beq.n	bab74 <_strtod_l+0xc4>
   bac36:	2500      	movs	r5, #0
   bac38:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bac3c:	f108 0201 	add.w	r2, r8, #1
   bac40:	9217      	str	r2, [sp, #92]	; 0x5c
   bac42:	f898 2001 	ldrb.w	r2, [r8, #1]
   bac46:	2a2b      	cmp	r2, #43	; 0x2b
   bac48:	d075      	beq.n	bad36 <_strtod_l+0x286>
   bac4a:	2a2d      	cmp	r2, #45	; 0x2d
   bac4c:	d07b      	beq.n	bad46 <_strtod_l+0x296>
   bac4e:	f04f 0c00 	mov.w	ip, #0
   bac52:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bac56:	2909      	cmp	r1, #9
   bac58:	f240 8082 	bls.w	bad60 <_strtod_l+0x2b0>
   bac5c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bac60:	2600      	movs	r6, #0
   bac62:	e09d      	b.n	bada0 <_strtod_l+0x2f0>
   bac64:	2300      	movs	r3, #0
   bac66:	e7c4      	b.n	babf2 <_strtod_l+0x142>
   bac68:	2f08      	cmp	r7, #8
   bac6a:	bfd8      	it	le
   bac6c:	9907      	ldrle	r1, [sp, #28]
   bac6e:	f100 0001 	add.w	r0, r0, #1
   bac72:	bfda      	itte	le
   bac74:	fb02 3301 	mlale	r3, r2, r1, r3
   bac78:	9307      	strle	r3, [sp, #28]
   bac7a:	fb02 3909 	mlagt	r9, r2, r9, r3
   bac7e:	3701      	adds	r7, #1
   bac80:	9017      	str	r0, [sp, #92]	; 0x5c
   bac82:	e7bf      	b.n	bac04 <_strtod_l+0x154>
   bac84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bac86:	195a      	adds	r2, r3, r5
   bac88:	9217      	str	r2, [sp, #92]	; 0x5c
   bac8a:	5d5a      	ldrb	r2, [r3, r5]
   bac8c:	2f00      	cmp	r7, #0
   bac8e:	d037      	beq.n	bad00 <_strtod_l+0x250>
   bac90:	9005      	str	r0, [sp, #20]
   bac92:	463d      	mov	r5, r7
   bac94:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bac98:	2b09      	cmp	r3, #9
   bac9a:	d912      	bls.n	bacc2 <_strtod_l+0x212>
   bac9c:	2301      	movs	r3, #1
   bac9e:	e7c2      	b.n	bac26 <_strtod_l+0x176>
   baca0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   baca2:	1c5a      	adds	r2, r3, #1
   baca4:	9217      	str	r2, [sp, #92]	; 0x5c
   baca6:	785a      	ldrb	r2, [r3, #1]
   baca8:	3001      	adds	r0, #1
   bacaa:	2a30      	cmp	r2, #48	; 0x30
   bacac:	d0f8      	beq.n	baca0 <_strtod_l+0x1f0>
   bacae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bacb2:	2b08      	cmp	r3, #8
   bacb4:	f200 84d9 	bhi.w	bb66a <_strtod_l+0xbba>
   bacb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bacba:	9005      	str	r0, [sp, #20]
   bacbc:	2000      	movs	r0, #0
   bacbe:	9308      	str	r3, [sp, #32]
   bacc0:	4605      	mov	r5, r0
   bacc2:	3a30      	subs	r2, #48	; 0x30
   bacc4:	f100 0301 	add.w	r3, r0, #1
   bacc8:	d014      	beq.n	bacf4 <_strtod_l+0x244>
   bacca:	9905      	ldr	r1, [sp, #20]
   baccc:	4419      	add	r1, r3
   bacce:	9105      	str	r1, [sp, #20]
   bacd0:	462b      	mov	r3, r5
   bacd2:	eb00 0e05 	add.w	lr, r0, r5
   bacd6:	210a      	movs	r1, #10
   bacd8:	4573      	cmp	r3, lr
   bacda:	d113      	bne.n	bad04 <_strtod_l+0x254>
   bacdc:	182b      	adds	r3, r5, r0
   bacde:	2b08      	cmp	r3, #8
   bace0:	f105 0501 	add.w	r5, r5, #1
   bace4:	4405      	add	r5, r0
   bace6:	dc1c      	bgt.n	bad22 <_strtod_l+0x272>
   bace8:	9907      	ldr	r1, [sp, #28]
   bacea:	230a      	movs	r3, #10
   bacec:	fb03 2301 	mla	r3, r3, r1, r2
   bacf0:	9307      	str	r3, [sp, #28]
   bacf2:	2300      	movs	r3, #0
   bacf4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bacf6:	1c51      	adds	r1, r2, #1
   bacf8:	9117      	str	r1, [sp, #92]	; 0x5c
   bacfa:	7852      	ldrb	r2, [r2, #1]
   bacfc:	4618      	mov	r0, r3
   bacfe:	e7c9      	b.n	bac94 <_strtod_l+0x1e4>
   bad00:	4638      	mov	r0, r7
   bad02:	e7d2      	b.n	bacaa <_strtod_l+0x1fa>
   bad04:	2b08      	cmp	r3, #8
   bad06:	dc04      	bgt.n	bad12 <_strtod_l+0x262>
   bad08:	9e07      	ldr	r6, [sp, #28]
   bad0a:	434e      	muls	r6, r1
   bad0c:	9607      	str	r6, [sp, #28]
   bad0e:	3301      	adds	r3, #1
   bad10:	e7e2      	b.n	bacd8 <_strtod_l+0x228>
   bad12:	f103 0c01 	add.w	ip, r3, #1
   bad16:	f1bc 0f10 	cmp.w	ip, #16
   bad1a:	bfd8      	it	le
   bad1c:	fb01 f909 	mulle.w	r9, r1, r9
   bad20:	e7f5      	b.n	bad0e <_strtod_l+0x25e>
   bad22:	2d10      	cmp	r5, #16
   bad24:	bfdc      	itt	le
   bad26:	230a      	movle	r3, #10
   bad28:	fb03 2909 	mlale	r9, r3, r9, r2
   bad2c:	e7e1      	b.n	bacf2 <_strtod_l+0x242>
   bad2e:	2300      	movs	r3, #0
   bad30:	9305      	str	r3, [sp, #20]
   bad32:	2301      	movs	r3, #1
   bad34:	e77c      	b.n	bac30 <_strtod_l+0x180>
   bad36:	f04f 0c00 	mov.w	ip, #0
   bad3a:	f108 0202 	add.w	r2, r8, #2
   bad3e:	9217      	str	r2, [sp, #92]	; 0x5c
   bad40:	f898 2002 	ldrb.w	r2, [r8, #2]
   bad44:	e785      	b.n	bac52 <_strtod_l+0x1a2>
   bad46:	f04f 0c01 	mov.w	ip, #1
   bad4a:	e7f6      	b.n	bad3a <_strtod_l+0x28a>
   bad4c:	000bd57c 	.word	0x000bd57c
   bad50:	000bd3b4 	.word	0x000bd3b4
   bad54:	7ff00000 	.word	0x7ff00000
   bad58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bad5a:	1c51      	adds	r1, r2, #1
   bad5c:	9117      	str	r1, [sp, #92]	; 0x5c
   bad5e:	7852      	ldrb	r2, [r2, #1]
   bad60:	2a30      	cmp	r2, #48	; 0x30
   bad62:	d0f9      	beq.n	bad58 <_strtod_l+0x2a8>
   bad64:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bad68:	2908      	cmp	r1, #8
   bad6a:	f63f af79 	bhi.w	bac60 <_strtod_l+0x1b0>
   bad6e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bad72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bad74:	9206      	str	r2, [sp, #24]
   bad76:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bad78:	1c51      	adds	r1, r2, #1
   bad7a:	9117      	str	r1, [sp, #92]	; 0x5c
   bad7c:	7852      	ldrb	r2, [r2, #1]
   bad7e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bad82:	2e09      	cmp	r6, #9
   bad84:	d937      	bls.n	badf6 <_strtod_l+0x346>
   bad86:	9e06      	ldr	r6, [sp, #24]
   bad88:	1b89      	subs	r1, r1, r6
   bad8a:	2908      	cmp	r1, #8
   bad8c:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bad90:	dc02      	bgt.n	bad98 <_strtod_l+0x2e8>
   bad92:	4576      	cmp	r6, lr
   bad94:	bfa8      	it	ge
   bad96:	4676      	movge	r6, lr
   bad98:	f1bc 0f00 	cmp.w	ip, #0
   bad9c:	d000      	beq.n	bada0 <_strtod_l+0x2f0>
   bad9e:	4276      	negs	r6, r6
   bada0:	2d00      	cmp	r5, #0
   bada2:	d14d      	bne.n	bae40 <_strtod_l+0x390>
   bada4:	9904      	ldr	r1, [sp, #16]
   bada6:	4301      	orrs	r1, r0
   bada8:	f47f aec6 	bne.w	bab38 <_strtod_l+0x88>
   badac:	2b00      	cmp	r3, #0
   badae:	f47f aee1 	bne.w	bab74 <_strtod_l+0xc4>
   badb2:	2a69      	cmp	r2, #105	; 0x69
   badb4:	d027      	beq.n	bae06 <_strtod_l+0x356>
   badb6:	dc24      	bgt.n	bae02 <_strtod_l+0x352>
   badb8:	2a49      	cmp	r2, #73	; 0x49
   badba:	d024      	beq.n	bae06 <_strtod_l+0x356>
   badbc:	2a4e      	cmp	r2, #78	; 0x4e
   badbe:	f47f aed9 	bne.w	bab74 <_strtod_l+0xc4>
   badc2:	499f      	ldr	r1, [pc, #636]	; (bb040 <_strtod_l+0x590>)
   badc4:	a817      	add	r0, sp, #92	; 0x5c
   badc6:	f001 f833 	bl	bbe30 <__match>
   badca:	2800      	cmp	r0, #0
   badcc:	f43f aed2 	beq.w	bab74 <_strtod_l+0xc4>
   badd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   badd2:	781b      	ldrb	r3, [r3, #0]
   badd4:	2b28      	cmp	r3, #40	; 0x28
   badd6:	d12d      	bne.n	bae34 <_strtod_l+0x384>
   badd8:	499a      	ldr	r1, [pc, #616]	; (bb044 <_strtod_l+0x594>)
   badda:	aa1a      	add	r2, sp, #104	; 0x68
   baddc:	a817      	add	r0, sp, #92	; 0x5c
   badde:	f001 f83b 	bl	bbe58 <__hexnan>
   bade2:	2805      	cmp	r0, #5
   bade4:	d126      	bne.n	bae34 <_strtod_l+0x384>
   bade6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bade8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   badec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   badf0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   badf4:	e6a0      	b.n	bab38 <_strtod_l+0x88>
   badf6:	210a      	movs	r1, #10
   badf8:	fb01 2e0e 	mla	lr, r1, lr, r2
   badfc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bae00:	e7b9      	b.n	bad76 <_strtod_l+0x2c6>
   bae02:	2a6e      	cmp	r2, #110	; 0x6e
   bae04:	e7db      	b.n	badbe <_strtod_l+0x30e>
   bae06:	4990      	ldr	r1, [pc, #576]	; (bb048 <_strtod_l+0x598>)
   bae08:	a817      	add	r0, sp, #92	; 0x5c
   bae0a:	f001 f811 	bl	bbe30 <__match>
   bae0e:	2800      	cmp	r0, #0
   bae10:	f43f aeb0 	beq.w	bab74 <_strtod_l+0xc4>
   bae14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bae16:	498d      	ldr	r1, [pc, #564]	; (bb04c <_strtod_l+0x59c>)
   bae18:	3b01      	subs	r3, #1
   bae1a:	a817      	add	r0, sp, #92	; 0x5c
   bae1c:	9317      	str	r3, [sp, #92]	; 0x5c
   bae1e:	f001 f807 	bl	bbe30 <__match>
   bae22:	b910      	cbnz	r0, bae2a <_strtod_l+0x37a>
   bae24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bae26:	3301      	adds	r3, #1
   bae28:	9317      	str	r3, [sp, #92]	; 0x5c
   bae2a:	f8df b230 	ldr.w	fp, [pc, #560]	; bb05c <_strtod_l+0x5ac>
   bae2e:	f04f 0a00 	mov.w	sl, #0
   bae32:	e681      	b.n	bab38 <_strtod_l+0x88>
   bae34:	4886      	ldr	r0, [pc, #536]	; (bb050 <_strtod_l+0x5a0>)
   bae36:	f001 fd93 	bl	bc960 <nan>
   bae3a:	ec5b ab10 	vmov	sl, fp, d0
   bae3e:	e67b      	b.n	bab38 <_strtod_l+0x88>
   bae40:	9b05      	ldr	r3, [sp, #20]
   bae42:	9807      	ldr	r0, [sp, #28]
   bae44:	1af3      	subs	r3, r6, r3
   bae46:	2f00      	cmp	r7, #0
   bae48:	bf08      	it	eq
   bae4a:	462f      	moveq	r7, r5
   bae4c:	2d10      	cmp	r5, #16
   bae4e:	9306      	str	r3, [sp, #24]
   bae50:	46a8      	mov	r8, r5
   bae52:	bfa8      	it	ge
   bae54:	f04f 0810 	movge.w	r8, #16
   bae58:	f7ff f986 	bl	ba168 <__aeabi_ui2d>
   bae5c:	2d09      	cmp	r5, #9
   bae5e:	4682      	mov	sl, r0
   bae60:	468b      	mov	fp, r1
   bae62:	dd13      	ble.n	bae8c <_strtod_l+0x3dc>
   bae64:	4b7b      	ldr	r3, [pc, #492]	; (bb054 <_strtod_l+0x5a4>)
   bae66:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bae6a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bae6e:	f7ff f9f5 	bl	ba25c <__aeabi_dmul>
   bae72:	4682      	mov	sl, r0
   bae74:	4648      	mov	r0, r9
   bae76:	468b      	mov	fp, r1
   bae78:	f7ff f976 	bl	ba168 <__aeabi_ui2d>
   bae7c:	4602      	mov	r2, r0
   bae7e:	460b      	mov	r3, r1
   bae80:	4650      	mov	r0, sl
   bae82:	4659      	mov	r1, fp
   bae84:	f7ff f834 	bl	b9ef0 <__adddf3>
   bae88:	4682      	mov	sl, r0
   bae8a:	468b      	mov	fp, r1
   bae8c:	2d0f      	cmp	r5, #15
   bae8e:	dc38      	bgt.n	baf02 <_strtod_l+0x452>
   bae90:	9b06      	ldr	r3, [sp, #24]
   bae92:	2b00      	cmp	r3, #0
   bae94:	f43f ae50 	beq.w	bab38 <_strtod_l+0x88>
   bae98:	dd24      	ble.n	baee4 <_strtod_l+0x434>
   bae9a:	2b16      	cmp	r3, #22
   bae9c:	dc0b      	bgt.n	baeb6 <_strtod_l+0x406>
   bae9e:	496d      	ldr	r1, [pc, #436]	; (bb054 <_strtod_l+0x5a4>)
   baea0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   baea4:	e9d1 0100 	ldrd	r0, r1, [r1]
   baea8:	4652      	mov	r2, sl
   baeaa:	465b      	mov	r3, fp
   baeac:	f7ff f9d6 	bl	ba25c <__aeabi_dmul>
   baeb0:	4682      	mov	sl, r0
   baeb2:	468b      	mov	fp, r1
   baeb4:	e640      	b.n	bab38 <_strtod_l+0x88>
   baeb6:	9a06      	ldr	r2, [sp, #24]
   baeb8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   baebc:	4293      	cmp	r3, r2
   baebe:	db20      	blt.n	baf02 <_strtod_l+0x452>
   baec0:	4c64      	ldr	r4, [pc, #400]	; (bb054 <_strtod_l+0x5a4>)
   baec2:	f1c5 050f 	rsb	r5, r5, #15
   baec6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   baeca:	4652      	mov	r2, sl
   baecc:	465b      	mov	r3, fp
   baece:	e9d1 0100 	ldrd	r0, r1, [r1]
   baed2:	f7ff f9c3 	bl	ba25c <__aeabi_dmul>
   baed6:	9b06      	ldr	r3, [sp, #24]
   baed8:	1b5d      	subs	r5, r3, r5
   baeda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   baede:	e9d4 2300 	ldrd	r2, r3, [r4]
   baee2:	e7e3      	b.n	baeac <_strtod_l+0x3fc>
   baee4:	9b06      	ldr	r3, [sp, #24]
   baee6:	3316      	adds	r3, #22
   baee8:	db0b      	blt.n	baf02 <_strtod_l+0x452>
   baeea:	9b05      	ldr	r3, [sp, #20]
   baeec:	1b9e      	subs	r6, r3, r6
   baeee:	4b59      	ldr	r3, [pc, #356]	; (bb054 <_strtod_l+0x5a4>)
   baef0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   baef4:	e9d6 2300 	ldrd	r2, r3, [r6]
   baef8:	4650      	mov	r0, sl
   baefa:	4659      	mov	r1, fp
   baefc:	f7ff fad8 	bl	ba4b0 <__aeabi_ddiv>
   baf00:	e7d6      	b.n	baeb0 <_strtod_l+0x400>
   baf02:	9b06      	ldr	r3, [sp, #24]
   baf04:	eba5 0808 	sub.w	r8, r5, r8
   baf08:	4498      	add	r8, r3
   baf0a:	f1b8 0f00 	cmp.w	r8, #0
   baf0e:	dd74      	ble.n	baffa <_strtod_l+0x54a>
   baf10:	f018 030f 	ands.w	r3, r8, #15
   baf14:	d00a      	beq.n	baf2c <_strtod_l+0x47c>
   baf16:	494f      	ldr	r1, [pc, #316]	; (bb054 <_strtod_l+0x5a4>)
   baf18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   baf1c:	4652      	mov	r2, sl
   baf1e:	465b      	mov	r3, fp
   baf20:	e9d1 0100 	ldrd	r0, r1, [r1]
   baf24:	f7ff f99a 	bl	ba25c <__aeabi_dmul>
   baf28:	4682      	mov	sl, r0
   baf2a:	468b      	mov	fp, r1
   baf2c:	f038 080f 	bics.w	r8, r8, #15
   baf30:	d04f      	beq.n	bafd2 <_strtod_l+0x522>
   baf32:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   baf36:	dd22      	ble.n	baf7e <_strtod_l+0x4ce>
   baf38:	2500      	movs	r5, #0
   baf3a:	462e      	mov	r6, r5
   baf3c:	9507      	str	r5, [sp, #28]
   baf3e:	9505      	str	r5, [sp, #20]
   baf40:	2322      	movs	r3, #34	; 0x22
   baf42:	f8df b118 	ldr.w	fp, [pc, #280]	; bb05c <_strtod_l+0x5ac>
   baf46:	6023      	str	r3, [r4, #0]
   baf48:	f04f 0a00 	mov.w	sl, #0
   baf4c:	9b07      	ldr	r3, [sp, #28]
   baf4e:	2b00      	cmp	r3, #0
   baf50:	f43f adf2 	beq.w	bab38 <_strtod_l+0x88>
   baf54:	9918      	ldr	r1, [sp, #96]	; 0x60
   baf56:	4620      	mov	r0, r4
   baf58:	f001 f870 	bl	bc03c <_Bfree>
   baf5c:	9905      	ldr	r1, [sp, #20]
   baf5e:	4620      	mov	r0, r4
   baf60:	f001 f86c 	bl	bc03c <_Bfree>
   baf64:	4631      	mov	r1, r6
   baf66:	4620      	mov	r0, r4
   baf68:	f001 f868 	bl	bc03c <_Bfree>
   baf6c:	9907      	ldr	r1, [sp, #28]
   baf6e:	4620      	mov	r0, r4
   baf70:	f001 f864 	bl	bc03c <_Bfree>
   baf74:	4629      	mov	r1, r5
   baf76:	4620      	mov	r0, r4
   baf78:	f001 f860 	bl	bc03c <_Bfree>
   baf7c:	e5dc      	b.n	bab38 <_strtod_l+0x88>
   baf7e:	4b36      	ldr	r3, [pc, #216]	; (bb058 <_strtod_l+0x5a8>)
   baf80:	9304      	str	r3, [sp, #16]
   baf82:	2300      	movs	r3, #0
   baf84:	ea4f 1828 	mov.w	r8, r8, asr #4
   baf88:	4650      	mov	r0, sl
   baf8a:	4659      	mov	r1, fp
   baf8c:	4699      	mov	r9, r3
   baf8e:	f1b8 0f01 	cmp.w	r8, #1
   baf92:	dc21      	bgt.n	bafd8 <_strtod_l+0x528>
   baf94:	b10b      	cbz	r3, baf9a <_strtod_l+0x4ea>
   baf96:	4682      	mov	sl, r0
   baf98:	468b      	mov	fp, r1
   baf9a:	4b2f      	ldr	r3, [pc, #188]	; (bb058 <_strtod_l+0x5a8>)
   baf9c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bafa0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bafa4:	4652      	mov	r2, sl
   bafa6:	465b      	mov	r3, fp
   bafa8:	e9d9 0100 	ldrd	r0, r1, [r9]
   bafac:	f7ff f956 	bl	ba25c <__aeabi_dmul>
   bafb0:	4b2a      	ldr	r3, [pc, #168]	; (bb05c <_strtod_l+0x5ac>)
   bafb2:	460a      	mov	r2, r1
   bafb4:	400b      	ands	r3, r1
   bafb6:	492a      	ldr	r1, [pc, #168]	; (bb060 <_strtod_l+0x5b0>)
   bafb8:	428b      	cmp	r3, r1
   bafba:	4682      	mov	sl, r0
   bafbc:	d8bc      	bhi.n	baf38 <_strtod_l+0x488>
   bafbe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bafc2:	428b      	cmp	r3, r1
   bafc4:	bf86      	itte	hi
   bafc6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bb064 <_strtod_l+0x5b4>
   bafca:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   bafce:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bafd2:	2300      	movs	r3, #0
   bafd4:	9304      	str	r3, [sp, #16]
   bafd6:	e084      	b.n	bb0e2 <_strtod_l+0x632>
   bafd8:	f018 0f01 	tst.w	r8, #1
   bafdc:	d005      	beq.n	bafea <_strtod_l+0x53a>
   bafde:	9b04      	ldr	r3, [sp, #16]
   bafe0:	e9d3 2300 	ldrd	r2, r3, [r3]
   bafe4:	f7ff f93a 	bl	ba25c <__aeabi_dmul>
   bafe8:	2301      	movs	r3, #1
   bafea:	9a04      	ldr	r2, [sp, #16]
   bafec:	3208      	adds	r2, #8
   bafee:	f109 0901 	add.w	r9, r9, #1
   baff2:	ea4f 0868 	mov.w	r8, r8, asr #1
   baff6:	9204      	str	r2, [sp, #16]
   baff8:	e7c9      	b.n	baf8e <_strtod_l+0x4de>
   baffa:	d0ea      	beq.n	bafd2 <_strtod_l+0x522>
   baffc:	f1c8 0800 	rsb	r8, r8, #0
   bb000:	f018 020f 	ands.w	r2, r8, #15
   bb004:	d00a      	beq.n	bb01c <_strtod_l+0x56c>
   bb006:	4b13      	ldr	r3, [pc, #76]	; (bb054 <_strtod_l+0x5a4>)
   bb008:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bb00c:	4650      	mov	r0, sl
   bb00e:	4659      	mov	r1, fp
   bb010:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb014:	f7ff fa4c 	bl	ba4b0 <__aeabi_ddiv>
   bb018:	4682      	mov	sl, r0
   bb01a:	468b      	mov	fp, r1
   bb01c:	ea5f 1828 	movs.w	r8, r8, asr #4
   bb020:	d0d7      	beq.n	bafd2 <_strtod_l+0x522>
   bb022:	f1b8 0f1f 	cmp.w	r8, #31
   bb026:	dd1f      	ble.n	bb068 <_strtod_l+0x5b8>
   bb028:	2500      	movs	r5, #0
   bb02a:	462e      	mov	r6, r5
   bb02c:	9507      	str	r5, [sp, #28]
   bb02e:	9505      	str	r5, [sp, #20]
   bb030:	2322      	movs	r3, #34	; 0x22
   bb032:	f04f 0a00 	mov.w	sl, #0
   bb036:	f04f 0b00 	mov.w	fp, #0
   bb03a:	6023      	str	r3, [r4, #0]
   bb03c:	e786      	b.n	baf4c <_strtod_l+0x49c>
   bb03e:	bf00      	nop
   bb040:	000bd3ae 	.word	0x000bd3ae
   bb044:	000bd3c8 	.word	0x000bd3c8
   bb048:	000bd3a5 	.word	0x000bd3a5
   bb04c:	000bd3a8 	.word	0x000bd3a8
   bb050:	000bcdae 	.word	0x000bcdae
   bb054:	000bd618 	.word	0x000bd618
   bb058:	000bd5f0 	.word	0x000bd5f0
   bb05c:	7ff00000 	.word	0x7ff00000
   bb060:	7ca00000 	.word	0x7ca00000
   bb064:	7fefffff 	.word	0x7fefffff
   bb068:	f018 0310 	ands.w	r3, r8, #16
   bb06c:	bf18      	it	ne
   bb06e:	236a      	movne	r3, #106	; 0x6a
   bb070:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bb420 <_strtod_l+0x970>
   bb074:	9304      	str	r3, [sp, #16]
   bb076:	4650      	mov	r0, sl
   bb078:	4659      	mov	r1, fp
   bb07a:	2300      	movs	r3, #0
   bb07c:	f018 0f01 	tst.w	r8, #1
   bb080:	d004      	beq.n	bb08c <_strtod_l+0x5dc>
   bb082:	e9d9 2300 	ldrd	r2, r3, [r9]
   bb086:	f7ff f8e9 	bl	ba25c <__aeabi_dmul>
   bb08a:	2301      	movs	r3, #1
   bb08c:	ea5f 0868 	movs.w	r8, r8, asr #1
   bb090:	f109 0908 	add.w	r9, r9, #8
   bb094:	d1f2      	bne.n	bb07c <_strtod_l+0x5cc>
   bb096:	b10b      	cbz	r3, bb09c <_strtod_l+0x5ec>
   bb098:	4682      	mov	sl, r0
   bb09a:	468b      	mov	fp, r1
   bb09c:	9b04      	ldr	r3, [sp, #16]
   bb09e:	b1c3      	cbz	r3, bb0d2 <_strtod_l+0x622>
   bb0a0:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bb0a4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bb0a8:	2b00      	cmp	r3, #0
   bb0aa:	4659      	mov	r1, fp
   bb0ac:	dd11      	ble.n	bb0d2 <_strtod_l+0x622>
   bb0ae:	2b1f      	cmp	r3, #31
   bb0b0:	f340 8124 	ble.w	bb2fc <_strtod_l+0x84c>
   bb0b4:	2b34      	cmp	r3, #52	; 0x34
   bb0b6:	bfde      	ittt	le
   bb0b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bb0bc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   bb0c0:	fa03 f202 	lslle.w	r2, r3, r2
   bb0c4:	f04f 0a00 	mov.w	sl, #0
   bb0c8:	bfcc      	ite	gt
   bb0ca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bb0ce:	ea02 0b01 	andle.w	fp, r2, r1
   bb0d2:	2200      	movs	r2, #0
   bb0d4:	2300      	movs	r3, #0
   bb0d6:	4650      	mov	r0, sl
   bb0d8:	4659      	mov	r1, fp
   bb0da:	f7ff fb27 	bl	ba72c <__aeabi_dcmpeq>
   bb0de:	2800      	cmp	r0, #0
   bb0e0:	d1a2      	bne.n	bb028 <_strtod_l+0x578>
   bb0e2:	9b07      	ldr	r3, [sp, #28]
   bb0e4:	9300      	str	r3, [sp, #0]
   bb0e6:	9908      	ldr	r1, [sp, #32]
   bb0e8:	462b      	mov	r3, r5
   bb0ea:	463a      	mov	r2, r7
   bb0ec:	4620      	mov	r0, r4
   bb0ee:	f001 f80d 	bl	bc10c <__s2b>
   bb0f2:	9007      	str	r0, [sp, #28]
   bb0f4:	2800      	cmp	r0, #0
   bb0f6:	f43f af1f 	beq.w	baf38 <_strtod_l+0x488>
   bb0fa:	9b05      	ldr	r3, [sp, #20]
   bb0fc:	1b9e      	subs	r6, r3, r6
   bb0fe:	9b06      	ldr	r3, [sp, #24]
   bb100:	2b00      	cmp	r3, #0
   bb102:	bfb4      	ite	lt
   bb104:	4633      	movlt	r3, r6
   bb106:	2300      	movge	r3, #0
   bb108:	930c      	str	r3, [sp, #48]	; 0x30
   bb10a:	9b06      	ldr	r3, [sp, #24]
   bb10c:	2500      	movs	r5, #0
   bb10e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bb112:	9312      	str	r3, [sp, #72]	; 0x48
   bb114:	462e      	mov	r6, r5
   bb116:	9b07      	ldr	r3, [sp, #28]
   bb118:	4620      	mov	r0, r4
   bb11a:	6859      	ldr	r1, [r3, #4]
   bb11c:	f000 ff4e 	bl	bbfbc <_Balloc>
   bb120:	9005      	str	r0, [sp, #20]
   bb122:	2800      	cmp	r0, #0
   bb124:	f43f af0c 	beq.w	baf40 <_strtod_l+0x490>
   bb128:	9b07      	ldr	r3, [sp, #28]
   bb12a:	691a      	ldr	r2, [r3, #16]
   bb12c:	3202      	adds	r2, #2
   bb12e:	f103 010c 	add.w	r1, r3, #12
   bb132:	0092      	lsls	r2, r2, #2
   bb134:	300c      	adds	r0, #12
   bb136:	f7ff fbf0 	bl	ba91a <memcpy>
   bb13a:	ec4b ab10 	vmov	d0, sl, fp
   bb13e:	aa1a      	add	r2, sp, #104	; 0x68
   bb140:	a919      	add	r1, sp, #100	; 0x64
   bb142:	4620      	mov	r0, r4
   bb144:	f001 fb28 	bl	bc798 <__d2b>
   bb148:	ec4b ab18 	vmov	d8, sl, fp
   bb14c:	9018      	str	r0, [sp, #96]	; 0x60
   bb14e:	2800      	cmp	r0, #0
   bb150:	f43f aef6 	beq.w	baf40 <_strtod_l+0x490>
   bb154:	2101      	movs	r1, #1
   bb156:	4620      	mov	r0, r4
   bb158:	f001 f872 	bl	bc240 <__i2b>
   bb15c:	4606      	mov	r6, r0
   bb15e:	2800      	cmp	r0, #0
   bb160:	f43f aeee 	beq.w	baf40 <_strtod_l+0x490>
   bb164:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bb166:	9904      	ldr	r1, [sp, #16]
   bb168:	2b00      	cmp	r3, #0
   bb16a:	bfab      	itete	ge
   bb16c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bb16e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bb170:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bb172:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bb176:	bfac      	ite	ge
   bb178:	eb03 0902 	addge.w	r9, r3, r2
   bb17c:	1ad7      	sublt	r7, r2, r3
   bb17e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bb180:	eba3 0801 	sub.w	r8, r3, r1
   bb184:	4490      	add	r8, r2
   bb186:	4ba1      	ldr	r3, [pc, #644]	; (bb40c <_strtod_l+0x95c>)
   bb188:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bb18c:	4598      	cmp	r8, r3
   bb18e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bb192:	f280 80c7 	bge.w	bb324 <_strtod_l+0x874>
   bb196:	eba3 0308 	sub.w	r3, r3, r8
   bb19a:	2b1f      	cmp	r3, #31
   bb19c:	eba2 0203 	sub.w	r2, r2, r3
   bb1a0:	f04f 0101 	mov.w	r1, #1
   bb1a4:	f300 80b1 	bgt.w	bb30a <_strtod_l+0x85a>
   bb1a8:	fa01 f303 	lsl.w	r3, r1, r3
   bb1ac:	930d      	str	r3, [sp, #52]	; 0x34
   bb1ae:	2300      	movs	r3, #0
   bb1b0:	9308      	str	r3, [sp, #32]
   bb1b2:	eb09 0802 	add.w	r8, r9, r2
   bb1b6:	9b04      	ldr	r3, [sp, #16]
   bb1b8:	45c1      	cmp	r9, r8
   bb1ba:	4417      	add	r7, r2
   bb1bc:	441f      	add	r7, r3
   bb1be:	464b      	mov	r3, r9
   bb1c0:	bfa8      	it	ge
   bb1c2:	4643      	movge	r3, r8
   bb1c4:	42bb      	cmp	r3, r7
   bb1c6:	bfa8      	it	ge
   bb1c8:	463b      	movge	r3, r7
   bb1ca:	2b00      	cmp	r3, #0
   bb1cc:	bfc2      	ittt	gt
   bb1ce:	eba8 0803 	subgt.w	r8, r8, r3
   bb1d2:	1aff      	subgt	r7, r7, r3
   bb1d4:	eba9 0903 	subgt.w	r9, r9, r3
   bb1d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bb1da:	2b00      	cmp	r3, #0
   bb1dc:	dd17      	ble.n	bb20e <_strtod_l+0x75e>
   bb1de:	4631      	mov	r1, r6
   bb1e0:	461a      	mov	r2, r3
   bb1e2:	4620      	mov	r0, r4
   bb1e4:	f001 f8ec 	bl	bc3c0 <__pow5mult>
   bb1e8:	4606      	mov	r6, r0
   bb1ea:	2800      	cmp	r0, #0
   bb1ec:	f43f aea8 	beq.w	baf40 <_strtod_l+0x490>
   bb1f0:	4601      	mov	r1, r0
   bb1f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bb1f4:	4620      	mov	r0, r4
   bb1f6:	f001 f839 	bl	bc26c <__multiply>
   bb1fa:	900b      	str	r0, [sp, #44]	; 0x2c
   bb1fc:	2800      	cmp	r0, #0
   bb1fe:	f43f ae9f 	beq.w	baf40 <_strtod_l+0x490>
   bb202:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb204:	4620      	mov	r0, r4
   bb206:	f000 ff19 	bl	bc03c <_Bfree>
   bb20a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb20c:	9318      	str	r3, [sp, #96]	; 0x60
   bb20e:	f1b8 0f00 	cmp.w	r8, #0
   bb212:	f300 808c 	bgt.w	bb32e <_strtod_l+0x87e>
   bb216:	9b06      	ldr	r3, [sp, #24]
   bb218:	2b00      	cmp	r3, #0
   bb21a:	dd08      	ble.n	bb22e <_strtod_l+0x77e>
   bb21c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bb21e:	9905      	ldr	r1, [sp, #20]
   bb220:	4620      	mov	r0, r4
   bb222:	f001 f8cd 	bl	bc3c0 <__pow5mult>
   bb226:	9005      	str	r0, [sp, #20]
   bb228:	2800      	cmp	r0, #0
   bb22a:	f43f ae89 	beq.w	baf40 <_strtod_l+0x490>
   bb22e:	2f00      	cmp	r7, #0
   bb230:	dd08      	ble.n	bb244 <_strtod_l+0x794>
   bb232:	9905      	ldr	r1, [sp, #20]
   bb234:	463a      	mov	r2, r7
   bb236:	4620      	mov	r0, r4
   bb238:	f001 f91c 	bl	bc474 <__lshift>
   bb23c:	9005      	str	r0, [sp, #20]
   bb23e:	2800      	cmp	r0, #0
   bb240:	f43f ae7e 	beq.w	baf40 <_strtod_l+0x490>
   bb244:	f1b9 0f00 	cmp.w	r9, #0
   bb248:	dd08      	ble.n	bb25c <_strtod_l+0x7ac>
   bb24a:	4631      	mov	r1, r6
   bb24c:	464a      	mov	r2, r9
   bb24e:	4620      	mov	r0, r4
   bb250:	f001 f910 	bl	bc474 <__lshift>
   bb254:	4606      	mov	r6, r0
   bb256:	2800      	cmp	r0, #0
   bb258:	f43f ae72 	beq.w	baf40 <_strtod_l+0x490>
   bb25c:	9a05      	ldr	r2, [sp, #20]
   bb25e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb260:	4620      	mov	r0, r4
   bb262:	f001 f993 	bl	bc58c <__mdiff>
   bb266:	4605      	mov	r5, r0
   bb268:	2800      	cmp	r0, #0
   bb26a:	f43f ae69 	beq.w	baf40 <_strtod_l+0x490>
   bb26e:	68c3      	ldr	r3, [r0, #12]
   bb270:	930b      	str	r3, [sp, #44]	; 0x2c
   bb272:	2300      	movs	r3, #0
   bb274:	60c3      	str	r3, [r0, #12]
   bb276:	4631      	mov	r1, r6
   bb278:	f001 f96c 	bl	bc554 <__mcmp>
   bb27c:	2800      	cmp	r0, #0
   bb27e:	da60      	bge.n	bb342 <_strtod_l+0x892>
   bb280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb282:	ea53 030a 	orrs.w	r3, r3, sl
   bb286:	f040 8082 	bne.w	bb38e <_strtod_l+0x8de>
   bb28a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb28e:	2b00      	cmp	r3, #0
   bb290:	d17d      	bne.n	bb38e <_strtod_l+0x8de>
   bb292:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bb296:	0d1b      	lsrs	r3, r3, #20
   bb298:	051b      	lsls	r3, r3, #20
   bb29a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bb29e:	d976      	bls.n	bb38e <_strtod_l+0x8de>
   bb2a0:	696b      	ldr	r3, [r5, #20]
   bb2a2:	b913      	cbnz	r3, bb2aa <_strtod_l+0x7fa>
   bb2a4:	692b      	ldr	r3, [r5, #16]
   bb2a6:	2b01      	cmp	r3, #1
   bb2a8:	dd71      	ble.n	bb38e <_strtod_l+0x8de>
   bb2aa:	4629      	mov	r1, r5
   bb2ac:	2201      	movs	r2, #1
   bb2ae:	4620      	mov	r0, r4
   bb2b0:	f001 f8e0 	bl	bc474 <__lshift>
   bb2b4:	4631      	mov	r1, r6
   bb2b6:	4605      	mov	r5, r0
   bb2b8:	f001 f94c 	bl	bc554 <__mcmp>
   bb2bc:	2800      	cmp	r0, #0
   bb2be:	dd66      	ble.n	bb38e <_strtod_l+0x8de>
   bb2c0:	9904      	ldr	r1, [sp, #16]
   bb2c2:	4a53      	ldr	r2, [pc, #332]	; (bb410 <_strtod_l+0x960>)
   bb2c4:	465b      	mov	r3, fp
   bb2c6:	2900      	cmp	r1, #0
   bb2c8:	f000 8081 	beq.w	bb3ce <_strtod_l+0x91e>
   bb2cc:	ea02 010b 	and.w	r1, r2, fp
   bb2d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bb2d4:	dc7b      	bgt.n	bb3ce <_strtod_l+0x91e>
   bb2d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bb2da:	f77f aea9 	ble.w	bb030 <_strtod_l+0x580>
   bb2de:	4b4d      	ldr	r3, [pc, #308]	; (bb414 <_strtod_l+0x964>)
   bb2e0:	4650      	mov	r0, sl
   bb2e2:	4659      	mov	r1, fp
   bb2e4:	2200      	movs	r2, #0
   bb2e6:	f7fe ffb9 	bl	ba25c <__aeabi_dmul>
   bb2ea:	460b      	mov	r3, r1
   bb2ec:	4303      	orrs	r3, r0
   bb2ee:	bf08      	it	eq
   bb2f0:	2322      	moveq	r3, #34	; 0x22
   bb2f2:	4682      	mov	sl, r0
   bb2f4:	468b      	mov	fp, r1
   bb2f6:	bf08      	it	eq
   bb2f8:	6023      	streq	r3, [r4, #0]
   bb2fa:	e62b      	b.n	baf54 <_strtod_l+0x4a4>
   bb2fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb300:	fa02 f303 	lsl.w	r3, r2, r3
   bb304:	ea03 0a0a 	and.w	sl, r3, sl
   bb308:	e6e3      	b.n	bb0d2 <_strtod_l+0x622>
   bb30a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bb30e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bb312:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bb316:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bb31a:	fa01 f308 	lsl.w	r3, r1, r8
   bb31e:	9308      	str	r3, [sp, #32]
   bb320:	910d      	str	r1, [sp, #52]	; 0x34
   bb322:	e746      	b.n	bb1b2 <_strtod_l+0x702>
   bb324:	2300      	movs	r3, #0
   bb326:	9308      	str	r3, [sp, #32]
   bb328:	2301      	movs	r3, #1
   bb32a:	930d      	str	r3, [sp, #52]	; 0x34
   bb32c:	e741      	b.n	bb1b2 <_strtod_l+0x702>
   bb32e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb330:	4642      	mov	r2, r8
   bb332:	4620      	mov	r0, r4
   bb334:	f001 f89e 	bl	bc474 <__lshift>
   bb338:	9018      	str	r0, [sp, #96]	; 0x60
   bb33a:	2800      	cmp	r0, #0
   bb33c:	f47f af6b 	bne.w	bb216 <_strtod_l+0x766>
   bb340:	e5fe      	b.n	baf40 <_strtod_l+0x490>
   bb342:	465f      	mov	r7, fp
   bb344:	d16e      	bne.n	bb424 <_strtod_l+0x974>
   bb346:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bb348:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb34c:	b342      	cbz	r2, bb3a0 <_strtod_l+0x8f0>
   bb34e:	4a32      	ldr	r2, [pc, #200]	; (bb418 <_strtod_l+0x968>)
   bb350:	4293      	cmp	r3, r2
   bb352:	d128      	bne.n	bb3a6 <_strtod_l+0x8f6>
   bb354:	9b04      	ldr	r3, [sp, #16]
   bb356:	4651      	mov	r1, sl
   bb358:	b1eb      	cbz	r3, bb396 <_strtod_l+0x8e6>
   bb35a:	4b2d      	ldr	r3, [pc, #180]	; (bb410 <_strtod_l+0x960>)
   bb35c:	403b      	ands	r3, r7
   bb35e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bb362:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb366:	d819      	bhi.n	bb39c <_strtod_l+0x8ec>
   bb368:	0d1b      	lsrs	r3, r3, #20
   bb36a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bb36e:	fa02 f303 	lsl.w	r3, r2, r3
   bb372:	4299      	cmp	r1, r3
   bb374:	d117      	bne.n	bb3a6 <_strtod_l+0x8f6>
   bb376:	4b29      	ldr	r3, [pc, #164]	; (bb41c <_strtod_l+0x96c>)
   bb378:	429f      	cmp	r7, r3
   bb37a:	d102      	bne.n	bb382 <_strtod_l+0x8d2>
   bb37c:	3101      	adds	r1, #1
   bb37e:	f43f addf 	beq.w	baf40 <_strtod_l+0x490>
   bb382:	4b23      	ldr	r3, [pc, #140]	; (bb410 <_strtod_l+0x960>)
   bb384:	403b      	ands	r3, r7
   bb386:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bb38a:	f04f 0a00 	mov.w	sl, #0
   bb38e:	9b04      	ldr	r3, [sp, #16]
   bb390:	2b00      	cmp	r3, #0
   bb392:	d1a4      	bne.n	bb2de <_strtod_l+0x82e>
   bb394:	e5de      	b.n	baf54 <_strtod_l+0x4a4>
   bb396:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bb39a:	e7ea      	b.n	bb372 <_strtod_l+0x8c2>
   bb39c:	4613      	mov	r3, r2
   bb39e:	e7e8      	b.n	bb372 <_strtod_l+0x8c2>
   bb3a0:	ea53 030a 	orrs.w	r3, r3, sl
   bb3a4:	d08c      	beq.n	bb2c0 <_strtod_l+0x810>
   bb3a6:	9b08      	ldr	r3, [sp, #32]
   bb3a8:	b1db      	cbz	r3, bb3e2 <_strtod_l+0x932>
   bb3aa:	423b      	tst	r3, r7
   bb3ac:	d0ef      	beq.n	bb38e <_strtod_l+0x8de>
   bb3ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb3b0:	9a04      	ldr	r2, [sp, #16]
   bb3b2:	4650      	mov	r0, sl
   bb3b4:	4659      	mov	r1, fp
   bb3b6:	b1c3      	cbz	r3, bb3ea <_strtod_l+0x93a>
   bb3b8:	f7ff fb5e 	bl	baa78 <sulp>
   bb3bc:	4602      	mov	r2, r0
   bb3be:	460b      	mov	r3, r1
   bb3c0:	ec51 0b18 	vmov	r0, r1, d8
   bb3c4:	f7fe fd94 	bl	b9ef0 <__adddf3>
   bb3c8:	4682      	mov	sl, r0
   bb3ca:	468b      	mov	fp, r1
   bb3cc:	e7df      	b.n	bb38e <_strtod_l+0x8de>
   bb3ce:	4013      	ands	r3, r2
   bb3d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bb3d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bb3d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bb3dc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bb3e0:	e7d5      	b.n	bb38e <_strtod_l+0x8de>
   bb3e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bb3e4:	ea13 0f0a 	tst.w	r3, sl
   bb3e8:	e7e0      	b.n	bb3ac <_strtod_l+0x8fc>
   bb3ea:	f7ff fb45 	bl	baa78 <sulp>
   bb3ee:	4602      	mov	r2, r0
   bb3f0:	460b      	mov	r3, r1
   bb3f2:	ec51 0b18 	vmov	r0, r1, d8
   bb3f6:	f7fe fd79 	bl	b9eec <__aeabi_dsub>
   bb3fa:	2200      	movs	r2, #0
   bb3fc:	2300      	movs	r3, #0
   bb3fe:	4682      	mov	sl, r0
   bb400:	468b      	mov	fp, r1
   bb402:	f7ff f993 	bl	ba72c <__aeabi_dcmpeq>
   bb406:	2800      	cmp	r0, #0
   bb408:	d0c1      	beq.n	bb38e <_strtod_l+0x8de>
   bb40a:	e611      	b.n	bb030 <_strtod_l+0x580>
   bb40c:	fffffc02 	.word	0xfffffc02
   bb410:	7ff00000 	.word	0x7ff00000
   bb414:	39500000 	.word	0x39500000
   bb418:	000fffff 	.word	0x000fffff
   bb41c:	7fefffff 	.word	0x7fefffff
   bb420:	000bd3e0 	.word	0x000bd3e0
   bb424:	4631      	mov	r1, r6
   bb426:	4628      	mov	r0, r5
   bb428:	f001 fa12 	bl	bc850 <__ratio>
   bb42c:	ec59 8b10 	vmov	r8, r9, d0
   bb430:	ee10 0a10 	vmov	r0, s0
   bb434:	2200      	movs	r2, #0
   bb436:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bb43a:	4649      	mov	r1, r9
   bb43c:	f7ff f98a 	bl	ba754 <__aeabi_dcmple>
   bb440:	2800      	cmp	r0, #0
   bb442:	d07a      	beq.n	bb53a <_strtod_l+0xa8a>
   bb444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb446:	2b00      	cmp	r3, #0
   bb448:	d04a      	beq.n	bb4e0 <_strtod_l+0xa30>
   bb44a:	4b95      	ldr	r3, [pc, #596]	; (bb6a0 <_strtod_l+0xbf0>)
   bb44c:	2200      	movs	r2, #0
   bb44e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bb452:	f8df 924c 	ldr.w	r9, [pc, #588]	; bb6a0 <_strtod_l+0xbf0>
   bb456:	f04f 0800 	mov.w	r8, #0
   bb45a:	4b92      	ldr	r3, [pc, #584]	; (bb6a4 <_strtod_l+0xbf4>)
   bb45c:	403b      	ands	r3, r7
   bb45e:	930d      	str	r3, [sp, #52]	; 0x34
   bb460:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bb462:	4b91      	ldr	r3, [pc, #580]	; (bb6a8 <_strtod_l+0xbf8>)
   bb464:	429a      	cmp	r2, r3
   bb466:	f040 80b0 	bne.w	bb5ca <_strtod_l+0xb1a>
   bb46a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb46e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bb472:	ec4b ab10 	vmov	d0, sl, fp
   bb476:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bb47a:	f001 f911 	bl	bc6a0 <__ulp>
   bb47e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb482:	ec53 2b10 	vmov	r2, r3, d0
   bb486:	f7fe fee9 	bl	ba25c <__aeabi_dmul>
   bb48a:	4652      	mov	r2, sl
   bb48c:	465b      	mov	r3, fp
   bb48e:	f7fe fd2f 	bl	b9ef0 <__adddf3>
   bb492:	460b      	mov	r3, r1
   bb494:	4983      	ldr	r1, [pc, #524]	; (bb6a4 <_strtod_l+0xbf4>)
   bb496:	4a85      	ldr	r2, [pc, #532]	; (bb6ac <_strtod_l+0xbfc>)
   bb498:	4019      	ands	r1, r3
   bb49a:	4291      	cmp	r1, r2
   bb49c:	4682      	mov	sl, r0
   bb49e:	d960      	bls.n	bb562 <_strtod_l+0xab2>
   bb4a0:	ee18 3a90 	vmov	r3, s17
   bb4a4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bb4a8:	4293      	cmp	r3, r2
   bb4aa:	d104      	bne.n	bb4b6 <_strtod_l+0xa06>
   bb4ac:	ee18 3a10 	vmov	r3, s16
   bb4b0:	3301      	adds	r3, #1
   bb4b2:	f43f ad45 	beq.w	baf40 <_strtod_l+0x490>
   bb4b6:	f8df b200 	ldr.w	fp, [pc, #512]	; bb6b8 <_strtod_l+0xc08>
   bb4ba:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bb4be:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb4c0:	4620      	mov	r0, r4
   bb4c2:	f000 fdbb 	bl	bc03c <_Bfree>
   bb4c6:	9905      	ldr	r1, [sp, #20]
   bb4c8:	4620      	mov	r0, r4
   bb4ca:	f000 fdb7 	bl	bc03c <_Bfree>
   bb4ce:	4631      	mov	r1, r6
   bb4d0:	4620      	mov	r0, r4
   bb4d2:	f000 fdb3 	bl	bc03c <_Bfree>
   bb4d6:	4629      	mov	r1, r5
   bb4d8:	4620      	mov	r0, r4
   bb4da:	f000 fdaf 	bl	bc03c <_Bfree>
   bb4de:	e61a      	b.n	bb116 <_strtod_l+0x666>
   bb4e0:	f1ba 0f00 	cmp.w	sl, #0
   bb4e4:	d11b      	bne.n	bb51e <_strtod_l+0xa6e>
   bb4e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb4ea:	b9f3      	cbnz	r3, bb52a <_strtod_l+0xa7a>
   bb4ec:	4b6c      	ldr	r3, [pc, #432]	; (bb6a0 <_strtod_l+0xbf0>)
   bb4ee:	2200      	movs	r2, #0
   bb4f0:	4640      	mov	r0, r8
   bb4f2:	4649      	mov	r1, r9
   bb4f4:	f7ff f924 	bl	ba740 <__aeabi_dcmplt>
   bb4f8:	b9d0      	cbnz	r0, bb530 <_strtod_l+0xa80>
   bb4fa:	4640      	mov	r0, r8
   bb4fc:	4649      	mov	r1, r9
   bb4fe:	4b6c      	ldr	r3, [pc, #432]	; (bb6b0 <_strtod_l+0xc00>)
   bb500:	2200      	movs	r2, #0
   bb502:	f7fe feab 	bl	ba25c <__aeabi_dmul>
   bb506:	4680      	mov	r8, r0
   bb508:	4689      	mov	r9, r1
   bb50a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bb50e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bb512:	9315      	str	r3, [sp, #84]	; 0x54
   bb514:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bb518:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bb51c:	e79d      	b.n	bb45a <_strtod_l+0x9aa>
   bb51e:	f1ba 0f01 	cmp.w	sl, #1
   bb522:	d102      	bne.n	bb52a <_strtod_l+0xa7a>
   bb524:	2f00      	cmp	r7, #0
   bb526:	f43f ad83 	beq.w	bb030 <_strtod_l+0x580>
   bb52a:	4b62      	ldr	r3, [pc, #392]	; (bb6b4 <_strtod_l+0xc04>)
   bb52c:	2200      	movs	r2, #0
   bb52e:	e78e      	b.n	bb44e <_strtod_l+0x99e>
   bb530:	f8df 917c 	ldr.w	r9, [pc, #380]	; bb6b0 <_strtod_l+0xc00>
   bb534:	f04f 0800 	mov.w	r8, #0
   bb538:	e7e7      	b.n	bb50a <_strtod_l+0xa5a>
   bb53a:	4b5d      	ldr	r3, [pc, #372]	; (bb6b0 <_strtod_l+0xc00>)
   bb53c:	4640      	mov	r0, r8
   bb53e:	4649      	mov	r1, r9
   bb540:	2200      	movs	r2, #0
   bb542:	f7fe fe8b 	bl	ba25c <__aeabi_dmul>
   bb546:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb548:	4680      	mov	r8, r0
   bb54a:	4689      	mov	r9, r1
   bb54c:	b933      	cbnz	r3, bb55c <_strtod_l+0xaac>
   bb54e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bb552:	900e      	str	r0, [sp, #56]	; 0x38
   bb554:	930f      	str	r3, [sp, #60]	; 0x3c
   bb556:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bb55a:	e7dd      	b.n	bb518 <_strtod_l+0xa68>
   bb55c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bb560:	e7f9      	b.n	bb556 <_strtod_l+0xaa6>
   bb562:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bb566:	9b04      	ldr	r3, [sp, #16]
   bb568:	2b00      	cmp	r3, #0
   bb56a:	d1a8      	bne.n	bb4be <_strtod_l+0xa0e>
   bb56c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bb570:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bb572:	0d1b      	lsrs	r3, r3, #20
   bb574:	051b      	lsls	r3, r3, #20
   bb576:	429a      	cmp	r2, r3
   bb578:	d1a1      	bne.n	bb4be <_strtod_l+0xa0e>
   bb57a:	4640      	mov	r0, r8
   bb57c:	4649      	mov	r1, r9
   bb57e:	f001 fa05 	bl	bc98c <__aeabi_d2lz>
   bb582:	f7fe fe3d 	bl	ba200 <__aeabi_l2d>
   bb586:	4602      	mov	r2, r0
   bb588:	460b      	mov	r3, r1
   bb58a:	4640      	mov	r0, r8
   bb58c:	4649      	mov	r1, r9
   bb58e:	f7fe fcad 	bl	b9eec <__aeabi_dsub>
   bb592:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bb594:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb598:	ea43 030a 	orr.w	r3, r3, sl
   bb59c:	4313      	orrs	r3, r2
   bb59e:	4680      	mov	r8, r0
   bb5a0:	4689      	mov	r9, r1
   bb5a2:	d055      	beq.n	bb650 <_strtod_l+0xba0>
   bb5a4:	a336      	add	r3, pc, #216	; (adr r3, bb680 <_strtod_l+0xbd0>)
   bb5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb5aa:	f7ff f8c9 	bl	ba740 <__aeabi_dcmplt>
   bb5ae:	2800      	cmp	r0, #0
   bb5b0:	f47f acd0 	bne.w	baf54 <_strtod_l+0x4a4>
   bb5b4:	a334      	add	r3, pc, #208	; (adr r3, bb688 <_strtod_l+0xbd8>)
   bb5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb5ba:	4640      	mov	r0, r8
   bb5bc:	4649      	mov	r1, r9
   bb5be:	f7ff f8dd 	bl	ba77c <__aeabi_dcmpgt>
   bb5c2:	2800      	cmp	r0, #0
   bb5c4:	f43f af7b 	beq.w	bb4be <_strtod_l+0xa0e>
   bb5c8:	e4c4      	b.n	baf54 <_strtod_l+0x4a4>
   bb5ca:	9b04      	ldr	r3, [sp, #16]
   bb5cc:	b333      	cbz	r3, bb61c <_strtod_l+0xb6c>
   bb5ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bb5d0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bb5d4:	d822      	bhi.n	bb61c <_strtod_l+0xb6c>
   bb5d6:	a32e      	add	r3, pc, #184	; (adr r3, bb690 <_strtod_l+0xbe0>)
   bb5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb5dc:	4640      	mov	r0, r8
   bb5de:	4649      	mov	r1, r9
   bb5e0:	f7ff f8b8 	bl	ba754 <__aeabi_dcmple>
   bb5e4:	b1a0      	cbz	r0, bb610 <_strtod_l+0xb60>
   bb5e6:	4649      	mov	r1, r9
   bb5e8:	4640      	mov	r0, r8
   bb5ea:	f7ff f8e7 	bl	ba7bc <__aeabi_d2uiz>
   bb5ee:	2801      	cmp	r0, #1
   bb5f0:	bf38      	it	cc
   bb5f2:	2001      	movcc	r0, #1
   bb5f4:	f7fe fdb8 	bl	ba168 <__aeabi_ui2d>
   bb5f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb5fa:	4680      	mov	r8, r0
   bb5fc:	4689      	mov	r9, r1
   bb5fe:	bb23      	cbnz	r3, bb64a <_strtod_l+0xb9a>
   bb600:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bb604:	9010      	str	r0, [sp, #64]	; 0x40
   bb606:	9311      	str	r3, [sp, #68]	; 0x44
   bb608:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bb60c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bb610:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bb612:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bb614:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bb618:	1a9b      	subs	r3, r3, r2
   bb61a:	9309      	str	r3, [sp, #36]	; 0x24
   bb61c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb620:	eeb0 0a48 	vmov.f32	s0, s16
   bb624:	eef0 0a68 	vmov.f32	s1, s17
   bb628:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bb62c:	f001 f838 	bl	bc6a0 <__ulp>
   bb630:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb634:	ec53 2b10 	vmov	r2, r3, d0
   bb638:	f7fe fe10 	bl	ba25c <__aeabi_dmul>
   bb63c:	ec53 2b18 	vmov	r2, r3, d8
   bb640:	f7fe fc56 	bl	b9ef0 <__adddf3>
   bb644:	4682      	mov	sl, r0
   bb646:	468b      	mov	fp, r1
   bb648:	e78d      	b.n	bb566 <_strtod_l+0xab6>
   bb64a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bb64e:	e7db      	b.n	bb608 <_strtod_l+0xb58>
   bb650:	a311      	add	r3, pc, #68	; (adr r3, bb698 <_strtod_l+0xbe8>)
   bb652:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb656:	f7ff f873 	bl	ba740 <__aeabi_dcmplt>
   bb65a:	e7b2      	b.n	bb5c2 <_strtod_l+0xb12>
   bb65c:	2300      	movs	r3, #0
   bb65e:	930a      	str	r3, [sp, #40]	; 0x28
   bb660:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bb662:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb664:	6013      	str	r3, [r2, #0]
   bb666:	f7ff ba6b 	b.w	bab40 <_strtod_l+0x90>
   bb66a:	2a65      	cmp	r2, #101	; 0x65
   bb66c:	f43f ab5f 	beq.w	bad2e <_strtod_l+0x27e>
   bb670:	2a45      	cmp	r2, #69	; 0x45
   bb672:	f43f ab5c 	beq.w	bad2e <_strtod_l+0x27e>
   bb676:	2301      	movs	r3, #1
   bb678:	f7ff bb94 	b.w	bada4 <_strtod_l+0x2f4>
   bb67c:	f3af 8000 	nop.w
   bb680:	94a03595 	.word	0x94a03595
   bb684:	3fdfffff 	.word	0x3fdfffff
   bb688:	35afe535 	.word	0x35afe535
   bb68c:	3fe00000 	.word	0x3fe00000
   bb690:	ffc00000 	.word	0xffc00000
   bb694:	41dfffff 	.word	0x41dfffff
   bb698:	94a03595 	.word	0x94a03595
   bb69c:	3fcfffff 	.word	0x3fcfffff
   bb6a0:	3ff00000 	.word	0x3ff00000
   bb6a4:	7ff00000 	.word	0x7ff00000
   bb6a8:	7fe00000 	.word	0x7fe00000
   bb6ac:	7c9fffff 	.word	0x7c9fffff
   bb6b0:	3fe00000 	.word	0x3fe00000
   bb6b4:	bff00000 	.word	0xbff00000
   bb6b8:	7fefffff 	.word	0x7fefffff

000bb6bc <strtod>:
   bb6bc:	460a      	mov	r2, r1
   bb6be:	4601      	mov	r1, r0
   bb6c0:	4802      	ldr	r0, [pc, #8]	; (bb6cc <strtod+0x10>)
   bb6c2:	4b03      	ldr	r3, [pc, #12]	; (bb6d0 <strtod+0x14>)
   bb6c4:	6800      	ldr	r0, [r0, #0]
   bb6c6:	f7ff b9f3 	b.w	baab0 <_strtod_l>
   bb6ca:	bf00      	nop
   bb6cc:	20035374 	.word	0x20035374
   bb6d0:	200353e0 	.word	0x200353e0

000bb6d4 <_strtol_l.constprop.0>:
   bb6d4:	2b01      	cmp	r3, #1
   bb6d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb6da:	d001      	beq.n	bb6e0 <_strtol_l.constprop.0+0xc>
   bb6dc:	2b24      	cmp	r3, #36	; 0x24
   bb6de:	d906      	bls.n	bb6ee <_strtol_l.constprop.0+0x1a>
   bb6e0:	f7fb fd5c 	bl	b719c <__errno>
   bb6e4:	2316      	movs	r3, #22
   bb6e6:	6003      	str	r3, [r0, #0]
   bb6e8:	2000      	movs	r0, #0
   bb6ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb6ee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bb7d4 <_strtol_l.constprop.0+0x100>
   bb6f2:	460d      	mov	r5, r1
   bb6f4:	462e      	mov	r6, r5
   bb6f6:	f815 4b01 	ldrb.w	r4, [r5], #1
   bb6fa:	f814 700c 	ldrb.w	r7, [r4, ip]
   bb6fe:	f017 0708 	ands.w	r7, r7, #8
   bb702:	d1f7      	bne.n	bb6f4 <_strtol_l.constprop.0+0x20>
   bb704:	2c2d      	cmp	r4, #45	; 0x2d
   bb706:	d132      	bne.n	bb76e <_strtol_l.constprop.0+0x9a>
   bb708:	782c      	ldrb	r4, [r5, #0]
   bb70a:	2701      	movs	r7, #1
   bb70c:	1cb5      	adds	r5, r6, #2
   bb70e:	2b00      	cmp	r3, #0
   bb710:	d05b      	beq.n	bb7ca <_strtol_l.constprop.0+0xf6>
   bb712:	2b10      	cmp	r3, #16
   bb714:	d109      	bne.n	bb72a <_strtol_l.constprop.0+0x56>
   bb716:	2c30      	cmp	r4, #48	; 0x30
   bb718:	d107      	bne.n	bb72a <_strtol_l.constprop.0+0x56>
   bb71a:	782c      	ldrb	r4, [r5, #0]
   bb71c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bb720:	2c58      	cmp	r4, #88	; 0x58
   bb722:	d14d      	bne.n	bb7c0 <_strtol_l.constprop.0+0xec>
   bb724:	786c      	ldrb	r4, [r5, #1]
   bb726:	2310      	movs	r3, #16
   bb728:	3502      	adds	r5, #2
   bb72a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bb72e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bb732:	f04f 0c00 	mov.w	ip, #0
   bb736:	fbb8 f9f3 	udiv	r9, r8, r3
   bb73a:	4666      	mov	r6, ip
   bb73c:	fb03 8a19 	mls	sl, r3, r9, r8
   bb740:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bb744:	f1be 0f09 	cmp.w	lr, #9
   bb748:	d816      	bhi.n	bb778 <_strtol_l.constprop.0+0xa4>
   bb74a:	4674      	mov	r4, lr
   bb74c:	42a3      	cmp	r3, r4
   bb74e:	dd24      	ble.n	bb79a <_strtol_l.constprop.0+0xc6>
   bb750:	f1bc 0f00 	cmp.w	ip, #0
   bb754:	db1e      	blt.n	bb794 <_strtol_l.constprop.0+0xc0>
   bb756:	45b1      	cmp	r9, r6
   bb758:	d31c      	bcc.n	bb794 <_strtol_l.constprop.0+0xc0>
   bb75a:	d101      	bne.n	bb760 <_strtol_l.constprop.0+0x8c>
   bb75c:	45a2      	cmp	sl, r4
   bb75e:	db19      	blt.n	bb794 <_strtol_l.constprop.0+0xc0>
   bb760:	fb06 4603 	mla	r6, r6, r3, r4
   bb764:	f04f 0c01 	mov.w	ip, #1
   bb768:	f815 4b01 	ldrb.w	r4, [r5], #1
   bb76c:	e7e8      	b.n	bb740 <_strtol_l.constprop.0+0x6c>
   bb76e:	2c2b      	cmp	r4, #43	; 0x2b
   bb770:	bf04      	itt	eq
   bb772:	782c      	ldrbeq	r4, [r5, #0]
   bb774:	1cb5      	addeq	r5, r6, #2
   bb776:	e7ca      	b.n	bb70e <_strtol_l.constprop.0+0x3a>
   bb778:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bb77c:	f1be 0f19 	cmp.w	lr, #25
   bb780:	d801      	bhi.n	bb786 <_strtol_l.constprop.0+0xb2>
   bb782:	3c37      	subs	r4, #55	; 0x37
   bb784:	e7e2      	b.n	bb74c <_strtol_l.constprop.0+0x78>
   bb786:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bb78a:	f1be 0f19 	cmp.w	lr, #25
   bb78e:	d804      	bhi.n	bb79a <_strtol_l.constprop.0+0xc6>
   bb790:	3c57      	subs	r4, #87	; 0x57
   bb792:	e7db      	b.n	bb74c <_strtol_l.constprop.0+0x78>
   bb794:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bb798:	e7e6      	b.n	bb768 <_strtol_l.constprop.0+0x94>
   bb79a:	f1bc 0f00 	cmp.w	ip, #0
   bb79e:	da05      	bge.n	bb7ac <_strtol_l.constprop.0+0xd8>
   bb7a0:	2322      	movs	r3, #34	; 0x22
   bb7a2:	6003      	str	r3, [r0, #0]
   bb7a4:	4646      	mov	r6, r8
   bb7a6:	b942      	cbnz	r2, bb7ba <_strtol_l.constprop.0+0xe6>
   bb7a8:	4630      	mov	r0, r6
   bb7aa:	e79e      	b.n	bb6ea <_strtol_l.constprop.0+0x16>
   bb7ac:	b107      	cbz	r7, bb7b0 <_strtol_l.constprop.0+0xdc>
   bb7ae:	4276      	negs	r6, r6
   bb7b0:	2a00      	cmp	r2, #0
   bb7b2:	d0f9      	beq.n	bb7a8 <_strtol_l.constprop.0+0xd4>
   bb7b4:	f1bc 0f00 	cmp.w	ip, #0
   bb7b8:	d000      	beq.n	bb7bc <_strtol_l.constprop.0+0xe8>
   bb7ba:	1e69      	subs	r1, r5, #1
   bb7bc:	6011      	str	r1, [r2, #0]
   bb7be:	e7f3      	b.n	bb7a8 <_strtol_l.constprop.0+0xd4>
   bb7c0:	2430      	movs	r4, #48	; 0x30
   bb7c2:	2b00      	cmp	r3, #0
   bb7c4:	d1b1      	bne.n	bb72a <_strtol_l.constprop.0+0x56>
   bb7c6:	2308      	movs	r3, #8
   bb7c8:	e7af      	b.n	bb72a <_strtol_l.constprop.0+0x56>
   bb7ca:	2c30      	cmp	r4, #48	; 0x30
   bb7cc:	d0a5      	beq.n	bb71a <_strtol_l.constprop.0+0x46>
   bb7ce:	230a      	movs	r3, #10
   bb7d0:	e7ab      	b.n	bb72a <_strtol_l.constprop.0+0x56>
   bb7d2:	bf00      	nop
   bb7d4:	000bd409 	.word	0x000bd409

000bb7d8 <strtol>:
   bb7d8:	4613      	mov	r3, r2
   bb7da:	460a      	mov	r2, r1
   bb7dc:	4601      	mov	r1, r0
   bb7de:	4802      	ldr	r0, [pc, #8]	; (bb7e8 <strtol+0x10>)
   bb7e0:	6800      	ldr	r0, [r0, #0]
   bb7e2:	f7ff bf77 	b.w	bb6d4 <_strtol_l.constprop.0>
   bb7e6:	bf00      	nop
   bb7e8:	20035374 	.word	0x20035374

000bb7ec <__register_exitproc>:
   bb7ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bb7f0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bb8ac <__register_exitproc+0xc0>
   bb7f4:	4606      	mov	r6, r0
   bb7f6:	f8d8 0000 	ldr.w	r0, [r8]
   bb7fa:	461f      	mov	r7, r3
   bb7fc:	460d      	mov	r5, r1
   bb7fe:	4691      	mov	r9, r2
   bb800:	f000 fbc6 	bl	bbf90 <__retarget_lock_acquire_recursive>
   bb804:	4b25      	ldr	r3, [pc, #148]	; (bb89c <__register_exitproc+0xb0>)
   bb806:	681c      	ldr	r4, [r3, #0]
   bb808:	b934      	cbnz	r4, bb818 <__register_exitproc+0x2c>
   bb80a:	4c25      	ldr	r4, [pc, #148]	; (bb8a0 <__register_exitproc+0xb4>)
   bb80c:	601c      	str	r4, [r3, #0]
   bb80e:	4b25      	ldr	r3, [pc, #148]	; (bb8a4 <__register_exitproc+0xb8>)
   bb810:	b113      	cbz	r3, bb818 <__register_exitproc+0x2c>
   bb812:	681b      	ldr	r3, [r3, #0]
   bb814:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bb818:	6863      	ldr	r3, [r4, #4]
   bb81a:	2b1f      	cmp	r3, #31
   bb81c:	dd07      	ble.n	bb82e <__register_exitproc+0x42>
   bb81e:	f8d8 0000 	ldr.w	r0, [r8]
   bb822:	f000 fbb7 	bl	bbf94 <__retarget_lock_release_recursive>
   bb826:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bb82a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bb82e:	b34e      	cbz	r6, bb884 <__register_exitproc+0x98>
   bb830:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bb834:	b988      	cbnz	r0, bb85a <__register_exitproc+0x6e>
   bb836:	4b1c      	ldr	r3, [pc, #112]	; (bb8a8 <__register_exitproc+0xbc>)
   bb838:	b923      	cbnz	r3, bb844 <__register_exitproc+0x58>
   bb83a:	f8d8 0000 	ldr.w	r0, [r8]
   bb83e:	f000 fba8 	bl	bbf92 <__retarget_lock_release>
   bb842:	e7f0      	b.n	bb826 <__register_exitproc+0x3a>
   bb844:	f44f 7084 	mov.w	r0, #264	; 0x108
   bb848:	f7fb fc70 	bl	b712c <malloc>
   bb84c:	2800      	cmp	r0, #0
   bb84e:	d0f4      	beq.n	bb83a <__register_exitproc+0x4e>
   bb850:	2300      	movs	r3, #0
   bb852:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bb856:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bb85a:	6863      	ldr	r3, [r4, #4]
   bb85c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bb860:	2201      	movs	r2, #1
   bb862:	409a      	lsls	r2, r3
   bb864:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bb868:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bb86c:	4313      	orrs	r3, r2
   bb86e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bb872:	2e02      	cmp	r6, #2
   bb874:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bb878:	bf02      	ittt	eq
   bb87a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bb87e:	4313      	orreq	r3, r2
   bb880:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bb884:	6863      	ldr	r3, [r4, #4]
   bb886:	f8d8 0000 	ldr.w	r0, [r8]
   bb88a:	1c5a      	adds	r2, r3, #1
   bb88c:	3302      	adds	r3, #2
   bb88e:	6062      	str	r2, [r4, #4]
   bb890:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bb894:	f000 fb7e 	bl	bbf94 <__retarget_lock_release_recursive>
   bb898:	2000      	movs	r0, #0
   bb89a:	e7c6      	b.n	bb82a <__register_exitproc+0x3e>
   bb89c:	2003e7e8 	.word	0x2003e7e8
   bb8a0:	2003e75c 	.word	0x2003e75c
   bb8a4:	00000000 	.word	0x00000000
   bb8a8:	000b712d 	.word	0x000b712d
   bb8ac:	200353d8 	.word	0x200353d8

000bb8b0 <rshift>:
   bb8b0:	6903      	ldr	r3, [r0, #16]
   bb8b2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bb8b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb8ba:	ea4f 1261 	mov.w	r2, r1, asr #5
   bb8be:	f100 0414 	add.w	r4, r0, #20
   bb8c2:	dd45      	ble.n	bb950 <rshift+0xa0>
   bb8c4:	f011 011f 	ands.w	r1, r1, #31
   bb8c8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bb8cc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bb8d0:	d10c      	bne.n	bb8ec <rshift+0x3c>
   bb8d2:	f100 0710 	add.w	r7, r0, #16
   bb8d6:	4629      	mov	r1, r5
   bb8d8:	42b1      	cmp	r1, r6
   bb8da:	d334      	bcc.n	bb946 <rshift+0x96>
   bb8dc:	1a9b      	subs	r3, r3, r2
   bb8de:	009b      	lsls	r3, r3, #2
   bb8e0:	1eea      	subs	r2, r5, #3
   bb8e2:	4296      	cmp	r6, r2
   bb8e4:	bf38      	it	cc
   bb8e6:	2300      	movcc	r3, #0
   bb8e8:	4423      	add	r3, r4
   bb8ea:	e015      	b.n	bb918 <rshift+0x68>
   bb8ec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bb8f0:	f1c1 0820 	rsb	r8, r1, #32
   bb8f4:	40cf      	lsrs	r7, r1
   bb8f6:	f105 0e04 	add.w	lr, r5, #4
   bb8fa:	46a1      	mov	r9, r4
   bb8fc:	4576      	cmp	r6, lr
   bb8fe:	46f4      	mov	ip, lr
   bb900:	d815      	bhi.n	bb92e <rshift+0x7e>
   bb902:	1a9a      	subs	r2, r3, r2
   bb904:	0092      	lsls	r2, r2, #2
   bb906:	3a04      	subs	r2, #4
   bb908:	3501      	adds	r5, #1
   bb90a:	42ae      	cmp	r6, r5
   bb90c:	bf38      	it	cc
   bb90e:	2200      	movcc	r2, #0
   bb910:	18a3      	adds	r3, r4, r2
   bb912:	50a7      	str	r7, [r4, r2]
   bb914:	b107      	cbz	r7, bb918 <rshift+0x68>
   bb916:	3304      	adds	r3, #4
   bb918:	1b1a      	subs	r2, r3, r4
   bb91a:	42a3      	cmp	r3, r4
   bb91c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bb920:	bf08      	it	eq
   bb922:	2300      	moveq	r3, #0
   bb924:	6102      	str	r2, [r0, #16]
   bb926:	bf08      	it	eq
   bb928:	6143      	streq	r3, [r0, #20]
   bb92a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bb92e:	f8dc c000 	ldr.w	ip, [ip]
   bb932:	fa0c fc08 	lsl.w	ip, ip, r8
   bb936:	ea4c 0707 	orr.w	r7, ip, r7
   bb93a:	f849 7b04 	str.w	r7, [r9], #4
   bb93e:	f85e 7b04 	ldr.w	r7, [lr], #4
   bb942:	40cf      	lsrs	r7, r1
   bb944:	e7da      	b.n	bb8fc <rshift+0x4c>
   bb946:	f851 cb04 	ldr.w	ip, [r1], #4
   bb94a:	f847 cf04 	str.w	ip, [r7, #4]!
   bb94e:	e7c3      	b.n	bb8d8 <rshift+0x28>
   bb950:	4623      	mov	r3, r4
   bb952:	e7e1      	b.n	bb918 <rshift+0x68>

000bb954 <__hexdig_fun>:
   bb954:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bb958:	2b09      	cmp	r3, #9
   bb95a:	d802      	bhi.n	bb962 <__hexdig_fun+0xe>
   bb95c:	3820      	subs	r0, #32
   bb95e:	b2c0      	uxtb	r0, r0
   bb960:	4770      	bx	lr
   bb962:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bb966:	2b05      	cmp	r3, #5
   bb968:	d801      	bhi.n	bb96e <__hexdig_fun+0x1a>
   bb96a:	3847      	subs	r0, #71	; 0x47
   bb96c:	e7f7      	b.n	bb95e <__hexdig_fun+0xa>
   bb96e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bb972:	2b05      	cmp	r3, #5
   bb974:	d801      	bhi.n	bb97a <__hexdig_fun+0x26>
   bb976:	3827      	subs	r0, #39	; 0x27
   bb978:	e7f1      	b.n	bb95e <__hexdig_fun+0xa>
   bb97a:	2000      	movs	r0, #0
   bb97c:	4770      	bx	lr
	...

000bb980 <__gethex>:
   bb980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb984:	ed2d 8b02 	vpush	{d8}
   bb988:	b089      	sub	sp, #36	; 0x24
   bb98a:	ee08 0a10 	vmov	s16, r0
   bb98e:	9304      	str	r3, [sp, #16]
   bb990:	4bb4      	ldr	r3, [pc, #720]	; (bbc64 <__gethex+0x2e4>)
   bb992:	681b      	ldr	r3, [r3, #0]
   bb994:	9301      	str	r3, [sp, #4]
   bb996:	4618      	mov	r0, r3
   bb998:	468b      	mov	fp, r1
   bb99a:	4690      	mov	r8, r2
   bb99c:	f7ff f82e 	bl	ba9fc <strlen>
   bb9a0:	9b01      	ldr	r3, [sp, #4]
   bb9a2:	f8db 2000 	ldr.w	r2, [fp]
   bb9a6:	4403      	add	r3, r0
   bb9a8:	4682      	mov	sl, r0
   bb9aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bb9ae:	9305      	str	r3, [sp, #20]
   bb9b0:	1c93      	adds	r3, r2, #2
   bb9b2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bb9b6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bb9ba:	32fe      	adds	r2, #254	; 0xfe
   bb9bc:	18d1      	adds	r1, r2, r3
   bb9be:	461f      	mov	r7, r3
   bb9c0:	f813 0b01 	ldrb.w	r0, [r3], #1
   bb9c4:	9100      	str	r1, [sp, #0]
   bb9c6:	2830      	cmp	r0, #48	; 0x30
   bb9c8:	d0f8      	beq.n	bb9bc <__gethex+0x3c>
   bb9ca:	f7ff ffc3 	bl	bb954 <__hexdig_fun>
   bb9ce:	4604      	mov	r4, r0
   bb9d0:	2800      	cmp	r0, #0
   bb9d2:	d13a      	bne.n	bba4a <__gethex+0xca>
   bb9d4:	9901      	ldr	r1, [sp, #4]
   bb9d6:	4652      	mov	r2, sl
   bb9d8:	4638      	mov	r0, r7
   bb9da:	f7ff f817 	bl	baa0c <strncmp>
   bb9de:	4605      	mov	r5, r0
   bb9e0:	2800      	cmp	r0, #0
   bb9e2:	d168      	bne.n	bbab6 <__gethex+0x136>
   bb9e4:	f817 000a 	ldrb.w	r0, [r7, sl]
   bb9e8:	eb07 060a 	add.w	r6, r7, sl
   bb9ec:	f7ff ffb2 	bl	bb954 <__hexdig_fun>
   bb9f0:	2800      	cmp	r0, #0
   bb9f2:	d062      	beq.n	bbaba <__gethex+0x13a>
   bb9f4:	4633      	mov	r3, r6
   bb9f6:	7818      	ldrb	r0, [r3, #0]
   bb9f8:	2830      	cmp	r0, #48	; 0x30
   bb9fa:	461f      	mov	r7, r3
   bb9fc:	f103 0301 	add.w	r3, r3, #1
   bba00:	d0f9      	beq.n	bb9f6 <__gethex+0x76>
   bba02:	f7ff ffa7 	bl	bb954 <__hexdig_fun>
   bba06:	2301      	movs	r3, #1
   bba08:	fab0 f480 	clz	r4, r0
   bba0c:	0964      	lsrs	r4, r4, #5
   bba0e:	4635      	mov	r5, r6
   bba10:	9300      	str	r3, [sp, #0]
   bba12:	463a      	mov	r2, r7
   bba14:	4616      	mov	r6, r2
   bba16:	3201      	adds	r2, #1
   bba18:	7830      	ldrb	r0, [r6, #0]
   bba1a:	f7ff ff9b 	bl	bb954 <__hexdig_fun>
   bba1e:	2800      	cmp	r0, #0
   bba20:	d1f8      	bne.n	bba14 <__gethex+0x94>
   bba22:	9901      	ldr	r1, [sp, #4]
   bba24:	4652      	mov	r2, sl
   bba26:	4630      	mov	r0, r6
   bba28:	f7fe fff0 	bl	baa0c <strncmp>
   bba2c:	b980      	cbnz	r0, bba50 <__gethex+0xd0>
   bba2e:	b94d      	cbnz	r5, bba44 <__gethex+0xc4>
   bba30:	eb06 050a 	add.w	r5, r6, sl
   bba34:	462a      	mov	r2, r5
   bba36:	4616      	mov	r6, r2
   bba38:	3201      	adds	r2, #1
   bba3a:	7830      	ldrb	r0, [r6, #0]
   bba3c:	f7ff ff8a 	bl	bb954 <__hexdig_fun>
   bba40:	2800      	cmp	r0, #0
   bba42:	d1f8      	bne.n	bba36 <__gethex+0xb6>
   bba44:	1bad      	subs	r5, r5, r6
   bba46:	00ad      	lsls	r5, r5, #2
   bba48:	e004      	b.n	bba54 <__gethex+0xd4>
   bba4a:	2400      	movs	r4, #0
   bba4c:	4625      	mov	r5, r4
   bba4e:	e7e0      	b.n	bba12 <__gethex+0x92>
   bba50:	2d00      	cmp	r5, #0
   bba52:	d1f7      	bne.n	bba44 <__gethex+0xc4>
   bba54:	7833      	ldrb	r3, [r6, #0]
   bba56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bba5a:	2b50      	cmp	r3, #80	; 0x50
   bba5c:	d13b      	bne.n	bbad6 <__gethex+0x156>
   bba5e:	7873      	ldrb	r3, [r6, #1]
   bba60:	2b2b      	cmp	r3, #43	; 0x2b
   bba62:	d02c      	beq.n	bbabe <__gethex+0x13e>
   bba64:	2b2d      	cmp	r3, #45	; 0x2d
   bba66:	d02e      	beq.n	bbac6 <__gethex+0x146>
   bba68:	1c71      	adds	r1, r6, #1
   bba6a:	f04f 0900 	mov.w	r9, #0
   bba6e:	7808      	ldrb	r0, [r1, #0]
   bba70:	f7ff ff70 	bl	bb954 <__hexdig_fun>
   bba74:	1e43      	subs	r3, r0, #1
   bba76:	b2db      	uxtb	r3, r3
   bba78:	2b18      	cmp	r3, #24
   bba7a:	d82c      	bhi.n	bbad6 <__gethex+0x156>
   bba7c:	f1a0 0210 	sub.w	r2, r0, #16
   bba80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bba84:	f7ff ff66 	bl	bb954 <__hexdig_fun>
   bba88:	1e43      	subs	r3, r0, #1
   bba8a:	b2db      	uxtb	r3, r3
   bba8c:	2b18      	cmp	r3, #24
   bba8e:	d91d      	bls.n	bbacc <__gethex+0x14c>
   bba90:	f1b9 0f00 	cmp.w	r9, #0
   bba94:	d000      	beq.n	bba98 <__gethex+0x118>
   bba96:	4252      	negs	r2, r2
   bba98:	4415      	add	r5, r2
   bba9a:	f8cb 1000 	str.w	r1, [fp]
   bba9e:	b1e4      	cbz	r4, bbada <__gethex+0x15a>
   bbaa0:	9b00      	ldr	r3, [sp, #0]
   bbaa2:	2b00      	cmp	r3, #0
   bbaa4:	bf14      	ite	ne
   bbaa6:	2700      	movne	r7, #0
   bbaa8:	2706      	moveq	r7, #6
   bbaaa:	4638      	mov	r0, r7
   bbaac:	b009      	add	sp, #36	; 0x24
   bbaae:	ecbd 8b02 	vpop	{d8}
   bbab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbab6:	463e      	mov	r6, r7
   bbab8:	4625      	mov	r5, r4
   bbaba:	2401      	movs	r4, #1
   bbabc:	e7ca      	b.n	bba54 <__gethex+0xd4>
   bbabe:	f04f 0900 	mov.w	r9, #0
   bbac2:	1cb1      	adds	r1, r6, #2
   bbac4:	e7d3      	b.n	bba6e <__gethex+0xee>
   bbac6:	f04f 0901 	mov.w	r9, #1
   bbaca:	e7fa      	b.n	bbac2 <__gethex+0x142>
   bbacc:	230a      	movs	r3, #10
   bbace:	fb03 0202 	mla	r2, r3, r2, r0
   bbad2:	3a10      	subs	r2, #16
   bbad4:	e7d4      	b.n	bba80 <__gethex+0x100>
   bbad6:	4631      	mov	r1, r6
   bbad8:	e7df      	b.n	bba9a <__gethex+0x11a>
   bbada:	1bf3      	subs	r3, r6, r7
   bbadc:	3b01      	subs	r3, #1
   bbade:	4621      	mov	r1, r4
   bbae0:	2b07      	cmp	r3, #7
   bbae2:	dc0b      	bgt.n	bbafc <__gethex+0x17c>
   bbae4:	ee18 0a10 	vmov	r0, s16
   bbae8:	f000 fa68 	bl	bbfbc <_Balloc>
   bbaec:	4604      	mov	r4, r0
   bbaee:	b940      	cbnz	r0, bbb02 <__gethex+0x182>
   bbaf0:	4b5d      	ldr	r3, [pc, #372]	; (bbc68 <__gethex+0x2e8>)
   bbaf2:	4602      	mov	r2, r0
   bbaf4:	21de      	movs	r1, #222	; 0xde
   bbaf6:	485d      	ldr	r0, [pc, #372]	; (bbc6c <__gethex+0x2ec>)
   bbaf8:	f7fb fb58 	bl	b71ac <__assert_func>
   bbafc:	3101      	adds	r1, #1
   bbafe:	105b      	asrs	r3, r3, #1
   bbb00:	e7ee      	b.n	bbae0 <__gethex+0x160>
   bbb02:	f100 0914 	add.w	r9, r0, #20
   bbb06:	f04f 0b00 	mov.w	fp, #0
   bbb0a:	f1ca 0301 	rsb	r3, sl, #1
   bbb0e:	f8cd 9008 	str.w	r9, [sp, #8]
   bbb12:	f8cd b000 	str.w	fp, [sp]
   bbb16:	9306      	str	r3, [sp, #24]
   bbb18:	42b7      	cmp	r7, r6
   bbb1a:	d340      	bcc.n	bbb9e <__gethex+0x21e>
   bbb1c:	9802      	ldr	r0, [sp, #8]
   bbb1e:	9b00      	ldr	r3, [sp, #0]
   bbb20:	f840 3b04 	str.w	r3, [r0], #4
   bbb24:	eba0 0009 	sub.w	r0, r0, r9
   bbb28:	1080      	asrs	r0, r0, #2
   bbb2a:	0146      	lsls	r6, r0, #5
   bbb2c:	6120      	str	r0, [r4, #16]
   bbb2e:	4618      	mov	r0, r3
   bbb30:	f000 fb36 	bl	bc1a0 <__hi0bits>
   bbb34:	1a30      	subs	r0, r6, r0
   bbb36:	f8d8 6000 	ldr.w	r6, [r8]
   bbb3a:	42b0      	cmp	r0, r6
   bbb3c:	dd63      	ble.n	bbc06 <__gethex+0x286>
   bbb3e:	1b87      	subs	r7, r0, r6
   bbb40:	4639      	mov	r1, r7
   bbb42:	4620      	mov	r0, r4
   bbb44:	f000 feda 	bl	bc8fc <__any_on>
   bbb48:	4682      	mov	sl, r0
   bbb4a:	b1a8      	cbz	r0, bbb78 <__gethex+0x1f8>
   bbb4c:	1e7b      	subs	r3, r7, #1
   bbb4e:	1159      	asrs	r1, r3, #5
   bbb50:	f003 021f 	and.w	r2, r3, #31
   bbb54:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bbb58:	f04f 0a01 	mov.w	sl, #1
   bbb5c:	fa0a f202 	lsl.w	r2, sl, r2
   bbb60:	420a      	tst	r2, r1
   bbb62:	d009      	beq.n	bbb78 <__gethex+0x1f8>
   bbb64:	4553      	cmp	r3, sl
   bbb66:	dd05      	ble.n	bbb74 <__gethex+0x1f4>
   bbb68:	1eb9      	subs	r1, r7, #2
   bbb6a:	4620      	mov	r0, r4
   bbb6c:	f000 fec6 	bl	bc8fc <__any_on>
   bbb70:	2800      	cmp	r0, #0
   bbb72:	d145      	bne.n	bbc00 <__gethex+0x280>
   bbb74:	f04f 0a02 	mov.w	sl, #2
   bbb78:	4639      	mov	r1, r7
   bbb7a:	4620      	mov	r0, r4
   bbb7c:	f7ff fe98 	bl	bb8b0 <rshift>
   bbb80:	443d      	add	r5, r7
   bbb82:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bbb86:	42ab      	cmp	r3, r5
   bbb88:	da4c      	bge.n	bbc24 <__gethex+0x2a4>
   bbb8a:	ee18 0a10 	vmov	r0, s16
   bbb8e:	4621      	mov	r1, r4
   bbb90:	f000 fa54 	bl	bc03c <_Bfree>
   bbb94:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bbb96:	2300      	movs	r3, #0
   bbb98:	6013      	str	r3, [r2, #0]
   bbb9a:	27a3      	movs	r7, #163	; 0xa3
   bbb9c:	e785      	b.n	bbaaa <__gethex+0x12a>
   bbb9e:	1e73      	subs	r3, r6, #1
   bbba0:	9a05      	ldr	r2, [sp, #20]
   bbba2:	9303      	str	r3, [sp, #12]
   bbba4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bbba8:	4293      	cmp	r3, r2
   bbbaa:	d019      	beq.n	bbbe0 <__gethex+0x260>
   bbbac:	f1bb 0f20 	cmp.w	fp, #32
   bbbb0:	d107      	bne.n	bbbc2 <__gethex+0x242>
   bbbb2:	9b02      	ldr	r3, [sp, #8]
   bbbb4:	9a00      	ldr	r2, [sp, #0]
   bbbb6:	f843 2b04 	str.w	r2, [r3], #4
   bbbba:	9302      	str	r3, [sp, #8]
   bbbbc:	2300      	movs	r3, #0
   bbbbe:	9300      	str	r3, [sp, #0]
   bbbc0:	469b      	mov	fp, r3
   bbbc2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bbbc6:	f7ff fec5 	bl	bb954 <__hexdig_fun>
   bbbca:	9b00      	ldr	r3, [sp, #0]
   bbbcc:	f000 000f 	and.w	r0, r0, #15
   bbbd0:	fa00 f00b 	lsl.w	r0, r0, fp
   bbbd4:	4303      	orrs	r3, r0
   bbbd6:	9300      	str	r3, [sp, #0]
   bbbd8:	f10b 0b04 	add.w	fp, fp, #4
   bbbdc:	9b03      	ldr	r3, [sp, #12]
   bbbde:	e00d      	b.n	bbbfc <__gethex+0x27c>
   bbbe0:	9b03      	ldr	r3, [sp, #12]
   bbbe2:	9a06      	ldr	r2, [sp, #24]
   bbbe4:	4413      	add	r3, r2
   bbbe6:	42bb      	cmp	r3, r7
   bbbe8:	d3e0      	bcc.n	bbbac <__gethex+0x22c>
   bbbea:	4618      	mov	r0, r3
   bbbec:	9901      	ldr	r1, [sp, #4]
   bbbee:	9307      	str	r3, [sp, #28]
   bbbf0:	4652      	mov	r2, sl
   bbbf2:	f7fe ff0b 	bl	baa0c <strncmp>
   bbbf6:	9b07      	ldr	r3, [sp, #28]
   bbbf8:	2800      	cmp	r0, #0
   bbbfa:	d1d7      	bne.n	bbbac <__gethex+0x22c>
   bbbfc:	461e      	mov	r6, r3
   bbbfe:	e78b      	b.n	bbb18 <__gethex+0x198>
   bbc00:	f04f 0a03 	mov.w	sl, #3
   bbc04:	e7b8      	b.n	bbb78 <__gethex+0x1f8>
   bbc06:	da0a      	bge.n	bbc1e <__gethex+0x29e>
   bbc08:	1a37      	subs	r7, r6, r0
   bbc0a:	4621      	mov	r1, r4
   bbc0c:	ee18 0a10 	vmov	r0, s16
   bbc10:	463a      	mov	r2, r7
   bbc12:	f000 fc2f 	bl	bc474 <__lshift>
   bbc16:	1bed      	subs	r5, r5, r7
   bbc18:	4604      	mov	r4, r0
   bbc1a:	f100 0914 	add.w	r9, r0, #20
   bbc1e:	f04f 0a00 	mov.w	sl, #0
   bbc22:	e7ae      	b.n	bbb82 <__gethex+0x202>
   bbc24:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bbc28:	42a8      	cmp	r0, r5
   bbc2a:	dd72      	ble.n	bbd12 <__gethex+0x392>
   bbc2c:	1b45      	subs	r5, r0, r5
   bbc2e:	42ae      	cmp	r6, r5
   bbc30:	dc36      	bgt.n	bbca0 <__gethex+0x320>
   bbc32:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bbc36:	2b02      	cmp	r3, #2
   bbc38:	d02a      	beq.n	bbc90 <__gethex+0x310>
   bbc3a:	2b03      	cmp	r3, #3
   bbc3c:	d02c      	beq.n	bbc98 <__gethex+0x318>
   bbc3e:	2b01      	cmp	r3, #1
   bbc40:	d11c      	bne.n	bbc7c <__gethex+0x2fc>
   bbc42:	42ae      	cmp	r6, r5
   bbc44:	d11a      	bne.n	bbc7c <__gethex+0x2fc>
   bbc46:	2e01      	cmp	r6, #1
   bbc48:	d112      	bne.n	bbc70 <__gethex+0x2f0>
   bbc4a:	9a04      	ldr	r2, [sp, #16]
   bbc4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bbc50:	6013      	str	r3, [r2, #0]
   bbc52:	2301      	movs	r3, #1
   bbc54:	6123      	str	r3, [r4, #16]
   bbc56:	f8c9 3000 	str.w	r3, [r9]
   bbc5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bbc5c:	2762      	movs	r7, #98	; 0x62
   bbc5e:	601c      	str	r4, [r3, #0]
   bbc60:	e723      	b.n	bbaaa <__gethex+0x12a>
   bbc62:	bf00      	nop
   bbc64:	000bd57c 	.word	0x000bd57c
   bbc68:	000bd509 	.word	0x000bd509
   bbc6c:	000bd51a 	.word	0x000bd51a
   bbc70:	1e71      	subs	r1, r6, #1
   bbc72:	4620      	mov	r0, r4
   bbc74:	f000 fe42 	bl	bc8fc <__any_on>
   bbc78:	2800      	cmp	r0, #0
   bbc7a:	d1e6      	bne.n	bbc4a <__gethex+0x2ca>
   bbc7c:	ee18 0a10 	vmov	r0, s16
   bbc80:	4621      	mov	r1, r4
   bbc82:	f000 f9db 	bl	bc03c <_Bfree>
   bbc86:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bbc88:	2300      	movs	r3, #0
   bbc8a:	6013      	str	r3, [r2, #0]
   bbc8c:	2750      	movs	r7, #80	; 0x50
   bbc8e:	e70c      	b.n	bbaaa <__gethex+0x12a>
   bbc90:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bbc92:	2b00      	cmp	r3, #0
   bbc94:	d1f2      	bne.n	bbc7c <__gethex+0x2fc>
   bbc96:	e7d8      	b.n	bbc4a <__gethex+0x2ca>
   bbc98:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bbc9a:	2b00      	cmp	r3, #0
   bbc9c:	d1d5      	bne.n	bbc4a <__gethex+0x2ca>
   bbc9e:	e7ed      	b.n	bbc7c <__gethex+0x2fc>
   bbca0:	1e6f      	subs	r7, r5, #1
   bbca2:	f1ba 0f00 	cmp.w	sl, #0
   bbca6:	d131      	bne.n	bbd0c <__gethex+0x38c>
   bbca8:	b127      	cbz	r7, bbcb4 <__gethex+0x334>
   bbcaa:	4639      	mov	r1, r7
   bbcac:	4620      	mov	r0, r4
   bbcae:	f000 fe25 	bl	bc8fc <__any_on>
   bbcb2:	4682      	mov	sl, r0
   bbcb4:	117b      	asrs	r3, r7, #5
   bbcb6:	2101      	movs	r1, #1
   bbcb8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bbcbc:	f007 071f 	and.w	r7, r7, #31
   bbcc0:	fa01 f707 	lsl.w	r7, r1, r7
   bbcc4:	421f      	tst	r7, r3
   bbcc6:	4629      	mov	r1, r5
   bbcc8:	4620      	mov	r0, r4
   bbcca:	bf18      	it	ne
   bbccc:	f04a 0a02 	orrne.w	sl, sl, #2
   bbcd0:	1b76      	subs	r6, r6, r5
   bbcd2:	f7ff fded 	bl	bb8b0 <rshift>
   bbcd6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bbcda:	2702      	movs	r7, #2
   bbcdc:	f1ba 0f00 	cmp.w	sl, #0
   bbce0:	d048      	beq.n	bbd74 <__gethex+0x3f4>
   bbce2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bbce6:	2b02      	cmp	r3, #2
   bbce8:	d015      	beq.n	bbd16 <__gethex+0x396>
   bbcea:	2b03      	cmp	r3, #3
   bbcec:	d017      	beq.n	bbd1e <__gethex+0x39e>
   bbcee:	2b01      	cmp	r3, #1
   bbcf0:	d109      	bne.n	bbd06 <__gethex+0x386>
   bbcf2:	f01a 0f02 	tst.w	sl, #2
   bbcf6:	d006      	beq.n	bbd06 <__gethex+0x386>
   bbcf8:	f8d9 0000 	ldr.w	r0, [r9]
   bbcfc:	ea4a 0a00 	orr.w	sl, sl, r0
   bbd00:	f01a 0f01 	tst.w	sl, #1
   bbd04:	d10e      	bne.n	bbd24 <__gethex+0x3a4>
   bbd06:	f047 0710 	orr.w	r7, r7, #16
   bbd0a:	e033      	b.n	bbd74 <__gethex+0x3f4>
   bbd0c:	f04f 0a01 	mov.w	sl, #1
   bbd10:	e7d0      	b.n	bbcb4 <__gethex+0x334>
   bbd12:	2701      	movs	r7, #1
   bbd14:	e7e2      	b.n	bbcdc <__gethex+0x35c>
   bbd16:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bbd18:	f1c3 0301 	rsb	r3, r3, #1
   bbd1c:	9315      	str	r3, [sp, #84]	; 0x54
   bbd1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bbd20:	2b00      	cmp	r3, #0
   bbd22:	d0f0      	beq.n	bbd06 <__gethex+0x386>
   bbd24:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bbd28:	f104 0314 	add.w	r3, r4, #20
   bbd2c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bbd30:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bbd34:	f04f 0c00 	mov.w	ip, #0
   bbd38:	4618      	mov	r0, r3
   bbd3a:	f853 2b04 	ldr.w	r2, [r3], #4
   bbd3e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bbd42:	d01c      	beq.n	bbd7e <__gethex+0x3fe>
   bbd44:	3201      	adds	r2, #1
   bbd46:	6002      	str	r2, [r0, #0]
   bbd48:	2f02      	cmp	r7, #2
   bbd4a:	f104 0314 	add.w	r3, r4, #20
   bbd4e:	d13f      	bne.n	bbdd0 <__gethex+0x450>
   bbd50:	f8d8 2000 	ldr.w	r2, [r8]
   bbd54:	3a01      	subs	r2, #1
   bbd56:	42b2      	cmp	r2, r6
   bbd58:	d10a      	bne.n	bbd70 <__gethex+0x3f0>
   bbd5a:	1171      	asrs	r1, r6, #5
   bbd5c:	2201      	movs	r2, #1
   bbd5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bbd62:	f006 061f 	and.w	r6, r6, #31
   bbd66:	fa02 f606 	lsl.w	r6, r2, r6
   bbd6a:	421e      	tst	r6, r3
   bbd6c:	bf18      	it	ne
   bbd6e:	4617      	movne	r7, r2
   bbd70:	f047 0720 	orr.w	r7, r7, #32
   bbd74:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bbd76:	601c      	str	r4, [r3, #0]
   bbd78:	9b04      	ldr	r3, [sp, #16]
   bbd7a:	601d      	str	r5, [r3, #0]
   bbd7c:	e695      	b.n	bbaaa <__gethex+0x12a>
   bbd7e:	4299      	cmp	r1, r3
   bbd80:	f843 cc04 	str.w	ip, [r3, #-4]
   bbd84:	d8d8      	bhi.n	bbd38 <__gethex+0x3b8>
   bbd86:	68a3      	ldr	r3, [r4, #8]
   bbd88:	459b      	cmp	fp, r3
   bbd8a:	db19      	blt.n	bbdc0 <__gethex+0x440>
   bbd8c:	6861      	ldr	r1, [r4, #4]
   bbd8e:	ee18 0a10 	vmov	r0, s16
   bbd92:	3101      	adds	r1, #1
   bbd94:	f000 f912 	bl	bbfbc <_Balloc>
   bbd98:	4681      	mov	r9, r0
   bbd9a:	b918      	cbnz	r0, bbda4 <__gethex+0x424>
   bbd9c:	4b1a      	ldr	r3, [pc, #104]	; (bbe08 <__gethex+0x488>)
   bbd9e:	4602      	mov	r2, r0
   bbda0:	2184      	movs	r1, #132	; 0x84
   bbda2:	e6a8      	b.n	bbaf6 <__gethex+0x176>
   bbda4:	6922      	ldr	r2, [r4, #16]
   bbda6:	3202      	adds	r2, #2
   bbda8:	f104 010c 	add.w	r1, r4, #12
   bbdac:	0092      	lsls	r2, r2, #2
   bbdae:	300c      	adds	r0, #12
   bbdb0:	f7fe fdb3 	bl	ba91a <memcpy>
   bbdb4:	4621      	mov	r1, r4
   bbdb6:	ee18 0a10 	vmov	r0, s16
   bbdba:	f000 f93f 	bl	bc03c <_Bfree>
   bbdbe:	464c      	mov	r4, r9
   bbdc0:	6923      	ldr	r3, [r4, #16]
   bbdc2:	1c5a      	adds	r2, r3, #1
   bbdc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bbdc8:	6122      	str	r2, [r4, #16]
   bbdca:	2201      	movs	r2, #1
   bbdcc:	615a      	str	r2, [r3, #20]
   bbdce:	e7bb      	b.n	bbd48 <__gethex+0x3c8>
   bbdd0:	6922      	ldr	r2, [r4, #16]
   bbdd2:	455a      	cmp	r2, fp
   bbdd4:	dd0b      	ble.n	bbdee <__gethex+0x46e>
   bbdd6:	2101      	movs	r1, #1
   bbdd8:	4620      	mov	r0, r4
   bbdda:	f7ff fd69 	bl	bb8b0 <rshift>
   bbdde:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bbde2:	3501      	adds	r5, #1
   bbde4:	42ab      	cmp	r3, r5
   bbde6:	f6ff aed0 	blt.w	bbb8a <__gethex+0x20a>
   bbdea:	2701      	movs	r7, #1
   bbdec:	e7c0      	b.n	bbd70 <__gethex+0x3f0>
   bbdee:	f016 061f 	ands.w	r6, r6, #31
   bbdf2:	d0fa      	beq.n	bbdea <__gethex+0x46a>
   bbdf4:	4453      	add	r3, sl
   bbdf6:	f1c6 0620 	rsb	r6, r6, #32
   bbdfa:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bbdfe:	f000 f9cf 	bl	bc1a0 <__hi0bits>
   bbe02:	42b0      	cmp	r0, r6
   bbe04:	dbe7      	blt.n	bbdd6 <__gethex+0x456>
   bbe06:	e7f0      	b.n	bbdea <__gethex+0x46a>
   bbe08:	000bd509 	.word	0x000bd509

000bbe0c <L_shift>:
   bbe0c:	f1c2 0208 	rsb	r2, r2, #8
   bbe10:	0092      	lsls	r2, r2, #2
   bbe12:	b570      	push	{r4, r5, r6, lr}
   bbe14:	f1c2 0620 	rsb	r6, r2, #32
   bbe18:	6843      	ldr	r3, [r0, #4]
   bbe1a:	6804      	ldr	r4, [r0, #0]
   bbe1c:	fa03 f506 	lsl.w	r5, r3, r6
   bbe20:	432c      	orrs	r4, r5
   bbe22:	40d3      	lsrs	r3, r2
   bbe24:	6004      	str	r4, [r0, #0]
   bbe26:	f840 3f04 	str.w	r3, [r0, #4]!
   bbe2a:	4288      	cmp	r0, r1
   bbe2c:	d3f4      	bcc.n	bbe18 <L_shift+0xc>
   bbe2e:	bd70      	pop	{r4, r5, r6, pc}

000bbe30 <__match>:
   bbe30:	b530      	push	{r4, r5, lr}
   bbe32:	6803      	ldr	r3, [r0, #0]
   bbe34:	3301      	adds	r3, #1
   bbe36:	f811 4b01 	ldrb.w	r4, [r1], #1
   bbe3a:	b914      	cbnz	r4, bbe42 <__match+0x12>
   bbe3c:	6003      	str	r3, [r0, #0]
   bbe3e:	2001      	movs	r0, #1
   bbe40:	bd30      	pop	{r4, r5, pc}
   bbe42:	f813 2b01 	ldrb.w	r2, [r3], #1
   bbe46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bbe4a:	2d19      	cmp	r5, #25
   bbe4c:	bf98      	it	ls
   bbe4e:	3220      	addls	r2, #32
   bbe50:	42a2      	cmp	r2, r4
   bbe52:	d0f0      	beq.n	bbe36 <__match+0x6>
   bbe54:	2000      	movs	r0, #0
   bbe56:	e7f3      	b.n	bbe40 <__match+0x10>

000bbe58 <__hexnan>:
   bbe58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbe5c:	680b      	ldr	r3, [r1, #0]
   bbe5e:	115e      	asrs	r6, r3, #5
   bbe60:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bbe64:	f013 031f 	ands.w	r3, r3, #31
   bbe68:	b087      	sub	sp, #28
   bbe6a:	bf18      	it	ne
   bbe6c:	3604      	addne	r6, #4
   bbe6e:	2500      	movs	r5, #0
   bbe70:	1f37      	subs	r7, r6, #4
   bbe72:	4690      	mov	r8, r2
   bbe74:	6802      	ldr	r2, [r0, #0]
   bbe76:	9301      	str	r3, [sp, #4]
   bbe78:	4682      	mov	sl, r0
   bbe7a:	f846 5c04 	str.w	r5, [r6, #-4]
   bbe7e:	46b9      	mov	r9, r7
   bbe80:	463c      	mov	r4, r7
   bbe82:	9502      	str	r5, [sp, #8]
   bbe84:	46ab      	mov	fp, r5
   bbe86:	7851      	ldrb	r1, [r2, #1]
   bbe88:	1c53      	adds	r3, r2, #1
   bbe8a:	9303      	str	r3, [sp, #12]
   bbe8c:	b341      	cbz	r1, bbee0 <__hexnan+0x88>
   bbe8e:	4608      	mov	r0, r1
   bbe90:	9205      	str	r2, [sp, #20]
   bbe92:	9104      	str	r1, [sp, #16]
   bbe94:	f7ff fd5e 	bl	bb954 <__hexdig_fun>
   bbe98:	2800      	cmp	r0, #0
   bbe9a:	d14f      	bne.n	bbf3c <__hexnan+0xe4>
   bbe9c:	9904      	ldr	r1, [sp, #16]
   bbe9e:	9a05      	ldr	r2, [sp, #20]
   bbea0:	2920      	cmp	r1, #32
   bbea2:	d818      	bhi.n	bbed6 <__hexnan+0x7e>
   bbea4:	9b02      	ldr	r3, [sp, #8]
   bbea6:	459b      	cmp	fp, r3
   bbea8:	dd13      	ble.n	bbed2 <__hexnan+0x7a>
   bbeaa:	454c      	cmp	r4, r9
   bbeac:	d206      	bcs.n	bbebc <__hexnan+0x64>
   bbeae:	2d07      	cmp	r5, #7
   bbeb0:	dc04      	bgt.n	bbebc <__hexnan+0x64>
   bbeb2:	462a      	mov	r2, r5
   bbeb4:	4649      	mov	r1, r9
   bbeb6:	4620      	mov	r0, r4
   bbeb8:	f7ff ffa8 	bl	bbe0c <L_shift>
   bbebc:	4544      	cmp	r4, r8
   bbebe:	d950      	bls.n	bbf62 <__hexnan+0x10a>
   bbec0:	2300      	movs	r3, #0
   bbec2:	f1a4 0904 	sub.w	r9, r4, #4
   bbec6:	f844 3c04 	str.w	r3, [r4, #-4]
   bbeca:	f8cd b008 	str.w	fp, [sp, #8]
   bbece:	464c      	mov	r4, r9
   bbed0:	461d      	mov	r5, r3
   bbed2:	9a03      	ldr	r2, [sp, #12]
   bbed4:	e7d7      	b.n	bbe86 <__hexnan+0x2e>
   bbed6:	2929      	cmp	r1, #41	; 0x29
   bbed8:	d156      	bne.n	bbf88 <__hexnan+0x130>
   bbeda:	3202      	adds	r2, #2
   bbedc:	f8ca 2000 	str.w	r2, [sl]
   bbee0:	f1bb 0f00 	cmp.w	fp, #0
   bbee4:	d050      	beq.n	bbf88 <__hexnan+0x130>
   bbee6:	454c      	cmp	r4, r9
   bbee8:	d206      	bcs.n	bbef8 <__hexnan+0xa0>
   bbeea:	2d07      	cmp	r5, #7
   bbeec:	dc04      	bgt.n	bbef8 <__hexnan+0xa0>
   bbeee:	462a      	mov	r2, r5
   bbef0:	4649      	mov	r1, r9
   bbef2:	4620      	mov	r0, r4
   bbef4:	f7ff ff8a 	bl	bbe0c <L_shift>
   bbef8:	4544      	cmp	r4, r8
   bbefa:	d934      	bls.n	bbf66 <__hexnan+0x10e>
   bbefc:	f1a8 0204 	sub.w	r2, r8, #4
   bbf00:	4623      	mov	r3, r4
   bbf02:	f853 1b04 	ldr.w	r1, [r3], #4
   bbf06:	f842 1f04 	str.w	r1, [r2, #4]!
   bbf0a:	429f      	cmp	r7, r3
   bbf0c:	d2f9      	bcs.n	bbf02 <__hexnan+0xaa>
   bbf0e:	1b3b      	subs	r3, r7, r4
   bbf10:	f023 0303 	bic.w	r3, r3, #3
   bbf14:	3304      	adds	r3, #4
   bbf16:	3401      	adds	r4, #1
   bbf18:	3e03      	subs	r6, #3
   bbf1a:	42b4      	cmp	r4, r6
   bbf1c:	bf88      	it	hi
   bbf1e:	2304      	movhi	r3, #4
   bbf20:	4443      	add	r3, r8
   bbf22:	2200      	movs	r2, #0
   bbf24:	f843 2b04 	str.w	r2, [r3], #4
   bbf28:	429f      	cmp	r7, r3
   bbf2a:	d2fb      	bcs.n	bbf24 <__hexnan+0xcc>
   bbf2c:	683b      	ldr	r3, [r7, #0]
   bbf2e:	b91b      	cbnz	r3, bbf38 <__hexnan+0xe0>
   bbf30:	4547      	cmp	r7, r8
   bbf32:	d127      	bne.n	bbf84 <__hexnan+0x12c>
   bbf34:	2301      	movs	r3, #1
   bbf36:	603b      	str	r3, [r7, #0]
   bbf38:	2005      	movs	r0, #5
   bbf3a:	e026      	b.n	bbf8a <__hexnan+0x132>
   bbf3c:	3501      	adds	r5, #1
   bbf3e:	2d08      	cmp	r5, #8
   bbf40:	f10b 0b01 	add.w	fp, fp, #1
   bbf44:	dd06      	ble.n	bbf54 <__hexnan+0xfc>
   bbf46:	4544      	cmp	r4, r8
   bbf48:	d9c3      	bls.n	bbed2 <__hexnan+0x7a>
   bbf4a:	2300      	movs	r3, #0
   bbf4c:	f844 3c04 	str.w	r3, [r4, #-4]
   bbf50:	2501      	movs	r5, #1
   bbf52:	3c04      	subs	r4, #4
   bbf54:	6822      	ldr	r2, [r4, #0]
   bbf56:	f000 000f 	and.w	r0, r0, #15
   bbf5a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bbf5e:	6022      	str	r2, [r4, #0]
   bbf60:	e7b7      	b.n	bbed2 <__hexnan+0x7a>
   bbf62:	2508      	movs	r5, #8
   bbf64:	e7b5      	b.n	bbed2 <__hexnan+0x7a>
   bbf66:	9b01      	ldr	r3, [sp, #4]
   bbf68:	2b00      	cmp	r3, #0
   bbf6a:	d0df      	beq.n	bbf2c <__hexnan+0xd4>
   bbf6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbf70:	f1c3 0320 	rsb	r3, r3, #32
   bbf74:	fa22 f303 	lsr.w	r3, r2, r3
   bbf78:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bbf7c:	401a      	ands	r2, r3
   bbf7e:	f846 2c04 	str.w	r2, [r6, #-4]
   bbf82:	e7d3      	b.n	bbf2c <__hexnan+0xd4>
   bbf84:	3f04      	subs	r7, #4
   bbf86:	e7d1      	b.n	bbf2c <__hexnan+0xd4>
   bbf88:	2004      	movs	r0, #4
   bbf8a:	b007      	add	sp, #28
   bbf8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bbf90 <__retarget_lock_acquire_recursive>:
   bbf90:	4770      	bx	lr

000bbf92 <__retarget_lock_release>:
   bbf92:	4770      	bx	lr

000bbf94 <__retarget_lock_release_recursive>:
   bbf94:	4770      	bx	lr

000bbf96 <__ascii_mbtowc>:
   bbf96:	b082      	sub	sp, #8
   bbf98:	b901      	cbnz	r1, bbf9c <__ascii_mbtowc+0x6>
   bbf9a:	a901      	add	r1, sp, #4
   bbf9c:	b142      	cbz	r2, bbfb0 <__ascii_mbtowc+0x1a>
   bbf9e:	b14b      	cbz	r3, bbfb4 <__ascii_mbtowc+0x1e>
   bbfa0:	7813      	ldrb	r3, [r2, #0]
   bbfa2:	600b      	str	r3, [r1, #0]
   bbfa4:	7812      	ldrb	r2, [r2, #0]
   bbfa6:	1e10      	subs	r0, r2, #0
   bbfa8:	bf18      	it	ne
   bbfaa:	2001      	movne	r0, #1
   bbfac:	b002      	add	sp, #8
   bbfae:	4770      	bx	lr
   bbfb0:	4610      	mov	r0, r2
   bbfb2:	e7fb      	b.n	bbfac <__ascii_mbtowc+0x16>
   bbfb4:	f06f 0001 	mvn.w	r0, #1
   bbfb8:	e7f8      	b.n	bbfac <__ascii_mbtowc+0x16>
	...

000bbfbc <_Balloc>:
   bbfbc:	b570      	push	{r4, r5, r6, lr}
   bbfbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bbfc0:	4604      	mov	r4, r0
   bbfc2:	460d      	mov	r5, r1
   bbfc4:	b976      	cbnz	r6, bbfe4 <_Balloc+0x28>
   bbfc6:	2010      	movs	r0, #16
   bbfc8:	f7fb f8b0 	bl	b712c <malloc>
   bbfcc:	4602      	mov	r2, r0
   bbfce:	6260      	str	r0, [r4, #36]	; 0x24
   bbfd0:	b920      	cbnz	r0, bbfdc <_Balloc+0x20>
   bbfd2:	4b18      	ldr	r3, [pc, #96]	; (bc034 <_Balloc+0x78>)
   bbfd4:	4818      	ldr	r0, [pc, #96]	; (bc038 <_Balloc+0x7c>)
   bbfd6:	2166      	movs	r1, #102	; 0x66
   bbfd8:	f7fb f8e8 	bl	b71ac <__assert_func>
   bbfdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bbfe0:	6006      	str	r6, [r0, #0]
   bbfe2:	60c6      	str	r6, [r0, #12]
   bbfe4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bbfe6:	68f3      	ldr	r3, [r6, #12]
   bbfe8:	b183      	cbz	r3, bc00c <_Balloc+0x50>
   bbfea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bbfec:	68db      	ldr	r3, [r3, #12]
   bbfee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bbff2:	b9b8      	cbnz	r0, bc024 <_Balloc+0x68>
   bbff4:	2101      	movs	r1, #1
   bbff6:	fa01 f605 	lsl.w	r6, r1, r5
   bbffa:	1d72      	adds	r2, r6, #5
   bbffc:	0092      	lsls	r2, r2, #2
   bbffe:	4620      	mov	r0, r4
   bc000:	f000 fc9d 	bl	bc93e <_calloc_r>
   bc004:	b160      	cbz	r0, bc020 <_Balloc+0x64>
   bc006:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bc00a:	e00e      	b.n	bc02a <_Balloc+0x6e>
   bc00c:	2221      	movs	r2, #33	; 0x21
   bc00e:	2104      	movs	r1, #4
   bc010:	4620      	mov	r0, r4
   bc012:	f000 fc94 	bl	bc93e <_calloc_r>
   bc016:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bc018:	60f0      	str	r0, [r6, #12]
   bc01a:	68db      	ldr	r3, [r3, #12]
   bc01c:	2b00      	cmp	r3, #0
   bc01e:	d1e4      	bne.n	bbfea <_Balloc+0x2e>
   bc020:	2000      	movs	r0, #0
   bc022:	bd70      	pop	{r4, r5, r6, pc}
   bc024:	6802      	ldr	r2, [r0, #0]
   bc026:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bc02a:	2300      	movs	r3, #0
   bc02c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bc030:	e7f7      	b.n	bc022 <_Balloc+0x66>
   bc032:	bf00      	nop
   bc034:	000bd335 	.word	0x000bd335
   bc038:	000bd590 	.word	0x000bd590

000bc03c <_Bfree>:
   bc03c:	b570      	push	{r4, r5, r6, lr}
   bc03e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bc040:	4605      	mov	r5, r0
   bc042:	460c      	mov	r4, r1
   bc044:	b976      	cbnz	r6, bc064 <_Bfree+0x28>
   bc046:	2010      	movs	r0, #16
   bc048:	f7fb f870 	bl	b712c <malloc>
   bc04c:	4602      	mov	r2, r0
   bc04e:	6268      	str	r0, [r5, #36]	; 0x24
   bc050:	b920      	cbnz	r0, bc05c <_Bfree+0x20>
   bc052:	4b09      	ldr	r3, [pc, #36]	; (bc078 <_Bfree+0x3c>)
   bc054:	4809      	ldr	r0, [pc, #36]	; (bc07c <_Bfree+0x40>)
   bc056:	218a      	movs	r1, #138	; 0x8a
   bc058:	f7fb f8a8 	bl	b71ac <__assert_func>
   bc05c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bc060:	6006      	str	r6, [r0, #0]
   bc062:	60c6      	str	r6, [r0, #12]
   bc064:	b13c      	cbz	r4, bc076 <_Bfree+0x3a>
   bc066:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bc068:	6862      	ldr	r2, [r4, #4]
   bc06a:	68db      	ldr	r3, [r3, #12]
   bc06c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bc070:	6021      	str	r1, [r4, #0]
   bc072:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bc076:	bd70      	pop	{r4, r5, r6, pc}
   bc078:	000bd335 	.word	0x000bd335
   bc07c:	000bd590 	.word	0x000bd590

000bc080 <__multadd>:
   bc080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc084:	690d      	ldr	r5, [r1, #16]
   bc086:	4607      	mov	r7, r0
   bc088:	460c      	mov	r4, r1
   bc08a:	461e      	mov	r6, r3
   bc08c:	f101 0c14 	add.w	ip, r1, #20
   bc090:	2000      	movs	r0, #0
   bc092:	f8dc 3000 	ldr.w	r3, [ip]
   bc096:	b299      	uxth	r1, r3
   bc098:	fb02 6101 	mla	r1, r2, r1, r6
   bc09c:	0c1e      	lsrs	r6, r3, #16
   bc09e:	0c0b      	lsrs	r3, r1, #16
   bc0a0:	fb02 3306 	mla	r3, r2, r6, r3
   bc0a4:	b289      	uxth	r1, r1
   bc0a6:	3001      	adds	r0, #1
   bc0a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bc0ac:	4285      	cmp	r5, r0
   bc0ae:	f84c 1b04 	str.w	r1, [ip], #4
   bc0b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bc0b6:	dcec      	bgt.n	bc092 <__multadd+0x12>
   bc0b8:	b30e      	cbz	r6, bc0fe <__multadd+0x7e>
   bc0ba:	68a3      	ldr	r3, [r4, #8]
   bc0bc:	42ab      	cmp	r3, r5
   bc0be:	dc19      	bgt.n	bc0f4 <__multadd+0x74>
   bc0c0:	6861      	ldr	r1, [r4, #4]
   bc0c2:	4638      	mov	r0, r7
   bc0c4:	3101      	adds	r1, #1
   bc0c6:	f7ff ff79 	bl	bbfbc <_Balloc>
   bc0ca:	4680      	mov	r8, r0
   bc0cc:	b928      	cbnz	r0, bc0da <__multadd+0x5a>
   bc0ce:	4602      	mov	r2, r0
   bc0d0:	4b0c      	ldr	r3, [pc, #48]	; (bc104 <__multadd+0x84>)
   bc0d2:	480d      	ldr	r0, [pc, #52]	; (bc108 <__multadd+0x88>)
   bc0d4:	21b5      	movs	r1, #181	; 0xb5
   bc0d6:	f7fb f869 	bl	b71ac <__assert_func>
   bc0da:	6922      	ldr	r2, [r4, #16]
   bc0dc:	3202      	adds	r2, #2
   bc0de:	f104 010c 	add.w	r1, r4, #12
   bc0e2:	0092      	lsls	r2, r2, #2
   bc0e4:	300c      	adds	r0, #12
   bc0e6:	f7fe fc18 	bl	ba91a <memcpy>
   bc0ea:	4621      	mov	r1, r4
   bc0ec:	4638      	mov	r0, r7
   bc0ee:	f7ff ffa5 	bl	bc03c <_Bfree>
   bc0f2:	4644      	mov	r4, r8
   bc0f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bc0f8:	3501      	adds	r5, #1
   bc0fa:	615e      	str	r6, [r3, #20]
   bc0fc:	6125      	str	r5, [r4, #16]
   bc0fe:	4620      	mov	r0, r4
   bc100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc104:	000bd509 	.word	0x000bd509
   bc108:	000bd590 	.word	0x000bd590

000bc10c <__s2b>:
   bc10c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc110:	460c      	mov	r4, r1
   bc112:	4615      	mov	r5, r2
   bc114:	461f      	mov	r7, r3
   bc116:	2209      	movs	r2, #9
   bc118:	3308      	adds	r3, #8
   bc11a:	4606      	mov	r6, r0
   bc11c:	fb93 f3f2 	sdiv	r3, r3, r2
   bc120:	2100      	movs	r1, #0
   bc122:	2201      	movs	r2, #1
   bc124:	429a      	cmp	r2, r3
   bc126:	db09      	blt.n	bc13c <__s2b+0x30>
   bc128:	4630      	mov	r0, r6
   bc12a:	f7ff ff47 	bl	bbfbc <_Balloc>
   bc12e:	b940      	cbnz	r0, bc142 <__s2b+0x36>
   bc130:	4602      	mov	r2, r0
   bc132:	4b19      	ldr	r3, [pc, #100]	; (bc198 <__s2b+0x8c>)
   bc134:	4819      	ldr	r0, [pc, #100]	; (bc19c <__s2b+0x90>)
   bc136:	21ce      	movs	r1, #206	; 0xce
   bc138:	f7fb f838 	bl	b71ac <__assert_func>
   bc13c:	0052      	lsls	r2, r2, #1
   bc13e:	3101      	adds	r1, #1
   bc140:	e7f0      	b.n	bc124 <__s2b+0x18>
   bc142:	9b08      	ldr	r3, [sp, #32]
   bc144:	6143      	str	r3, [r0, #20]
   bc146:	2d09      	cmp	r5, #9
   bc148:	f04f 0301 	mov.w	r3, #1
   bc14c:	6103      	str	r3, [r0, #16]
   bc14e:	dd16      	ble.n	bc17e <__s2b+0x72>
   bc150:	f104 0909 	add.w	r9, r4, #9
   bc154:	46c8      	mov	r8, r9
   bc156:	442c      	add	r4, r5
   bc158:	f818 3b01 	ldrb.w	r3, [r8], #1
   bc15c:	4601      	mov	r1, r0
   bc15e:	3b30      	subs	r3, #48	; 0x30
   bc160:	220a      	movs	r2, #10
   bc162:	4630      	mov	r0, r6
   bc164:	f7ff ff8c 	bl	bc080 <__multadd>
   bc168:	45a0      	cmp	r8, r4
   bc16a:	d1f5      	bne.n	bc158 <__s2b+0x4c>
   bc16c:	f1a5 0408 	sub.w	r4, r5, #8
   bc170:	444c      	add	r4, r9
   bc172:	1b2d      	subs	r5, r5, r4
   bc174:	1963      	adds	r3, r4, r5
   bc176:	42bb      	cmp	r3, r7
   bc178:	db04      	blt.n	bc184 <__s2b+0x78>
   bc17a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc17e:	340a      	adds	r4, #10
   bc180:	2509      	movs	r5, #9
   bc182:	e7f6      	b.n	bc172 <__s2b+0x66>
   bc184:	f814 3b01 	ldrb.w	r3, [r4], #1
   bc188:	4601      	mov	r1, r0
   bc18a:	3b30      	subs	r3, #48	; 0x30
   bc18c:	220a      	movs	r2, #10
   bc18e:	4630      	mov	r0, r6
   bc190:	f7ff ff76 	bl	bc080 <__multadd>
   bc194:	e7ee      	b.n	bc174 <__s2b+0x68>
   bc196:	bf00      	nop
   bc198:	000bd509 	.word	0x000bd509
   bc19c:	000bd590 	.word	0x000bd590

000bc1a0 <__hi0bits>:
   bc1a0:	0c03      	lsrs	r3, r0, #16
   bc1a2:	041b      	lsls	r3, r3, #16
   bc1a4:	b9d3      	cbnz	r3, bc1dc <__hi0bits+0x3c>
   bc1a6:	0400      	lsls	r0, r0, #16
   bc1a8:	2310      	movs	r3, #16
   bc1aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bc1ae:	bf04      	itt	eq
   bc1b0:	0200      	lsleq	r0, r0, #8
   bc1b2:	3308      	addeq	r3, #8
   bc1b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bc1b8:	bf04      	itt	eq
   bc1ba:	0100      	lsleq	r0, r0, #4
   bc1bc:	3304      	addeq	r3, #4
   bc1be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bc1c2:	bf04      	itt	eq
   bc1c4:	0080      	lsleq	r0, r0, #2
   bc1c6:	3302      	addeq	r3, #2
   bc1c8:	2800      	cmp	r0, #0
   bc1ca:	db05      	blt.n	bc1d8 <__hi0bits+0x38>
   bc1cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bc1d0:	f103 0301 	add.w	r3, r3, #1
   bc1d4:	bf08      	it	eq
   bc1d6:	2320      	moveq	r3, #32
   bc1d8:	4618      	mov	r0, r3
   bc1da:	4770      	bx	lr
   bc1dc:	2300      	movs	r3, #0
   bc1de:	e7e4      	b.n	bc1aa <__hi0bits+0xa>

000bc1e0 <__lo0bits>:
   bc1e0:	6803      	ldr	r3, [r0, #0]
   bc1e2:	f013 0207 	ands.w	r2, r3, #7
   bc1e6:	4601      	mov	r1, r0
   bc1e8:	d00b      	beq.n	bc202 <__lo0bits+0x22>
   bc1ea:	07da      	lsls	r2, r3, #31
   bc1ec:	d423      	bmi.n	bc236 <__lo0bits+0x56>
   bc1ee:	0798      	lsls	r0, r3, #30
   bc1f0:	bf49      	itett	mi
   bc1f2:	085b      	lsrmi	r3, r3, #1
   bc1f4:	089b      	lsrpl	r3, r3, #2
   bc1f6:	2001      	movmi	r0, #1
   bc1f8:	600b      	strmi	r3, [r1, #0]
   bc1fa:	bf5c      	itt	pl
   bc1fc:	600b      	strpl	r3, [r1, #0]
   bc1fe:	2002      	movpl	r0, #2
   bc200:	4770      	bx	lr
   bc202:	b298      	uxth	r0, r3
   bc204:	b9a8      	cbnz	r0, bc232 <__lo0bits+0x52>
   bc206:	0c1b      	lsrs	r3, r3, #16
   bc208:	2010      	movs	r0, #16
   bc20a:	b2da      	uxtb	r2, r3
   bc20c:	b90a      	cbnz	r2, bc212 <__lo0bits+0x32>
   bc20e:	3008      	adds	r0, #8
   bc210:	0a1b      	lsrs	r3, r3, #8
   bc212:	071a      	lsls	r2, r3, #28
   bc214:	bf04      	itt	eq
   bc216:	091b      	lsreq	r3, r3, #4
   bc218:	3004      	addeq	r0, #4
   bc21a:	079a      	lsls	r2, r3, #30
   bc21c:	bf04      	itt	eq
   bc21e:	089b      	lsreq	r3, r3, #2
   bc220:	3002      	addeq	r0, #2
   bc222:	07da      	lsls	r2, r3, #31
   bc224:	d403      	bmi.n	bc22e <__lo0bits+0x4e>
   bc226:	085b      	lsrs	r3, r3, #1
   bc228:	f100 0001 	add.w	r0, r0, #1
   bc22c:	d005      	beq.n	bc23a <__lo0bits+0x5a>
   bc22e:	600b      	str	r3, [r1, #0]
   bc230:	4770      	bx	lr
   bc232:	4610      	mov	r0, r2
   bc234:	e7e9      	b.n	bc20a <__lo0bits+0x2a>
   bc236:	2000      	movs	r0, #0
   bc238:	4770      	bx	lr
   bc23a:	2020      	movs	r0, #32
   bc23c:	4770      	bx	lr
	...

000bc240 <__i2b>:
   bc240:	b510      	push	{r4, lr}
   bc242:	460c      	mov	r4, r1
   bc244:	2101      	movs	r1, #1
   bc246:	f7ff feb9 	bl	bbfbc <_Balloc>
   bc24a:	4602      	mov	r2, r0
   bc24c:	b928      	cbnz	r0, bc25a <__i2b+0x1a>
   bc24e:	4b05      	ldr	r3, [pc, #20]	; (bc264 <__i2b+0x24>)
   bc250:	4805      	ldr	r0, [pc, #20]	; (bc268 <__i2b+0x28>)
   bc252:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bc256:	f7fa ffa9 	bl	b71ac <__assert_func>
   bc25a:	2301      	movs	r3, #1
   bc25c:	6144      	str	r4, [r0, #20]
   bc25e:	6103      	str	r3, [r0, #16]
   bc260:	bd10      	pop	{r4, pc}
   bc262:	bf00      	nop
   bc264:	000bd509 	.word	0x000bd509
   bc268:	000bd590 	.word	0x000bd590

000bc26c <__multiply>:
   bc26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc270:	4691      	mov	r9, r2
   bc272:	690a      	ldr	r2, [r1, #16]
   bc274:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bc278:	429a      	cmp	r2, r3
   bc27a:	bfb8      	it	lt
   bc27c:	460b      	movlt	r3, r1
   bc27e:	460c      	mov	r4, r1
   bc280:	bfbc      	itt	lt
   bc282:	464c      	movlt	r4, r9
   bc284:	4699      	movlt	r9, r3
   bc286:	6927      	ldr	r7, [r4, #16]
   bc288:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bc28c:	68a3      	ldr	r3, [r4, #8]
   bc28e:	6861      	ldr	r1, [r4, #4]
   bc290:	eb07 060a 	add.w	r6, r7, sl
   bc294:	42b3      	cmp	r3, r6
   bc296:	b085      	sub	sp, #20
   bc298:	bfb8      	it	lt
   bc29a:	3101      	addlt	r1, #1
   bc29c:	f7ff fe8e 	bl	bbfbc <_Balloc>
   bc2a0:	b930      	cbnz	r0, bc2b0 <__multiply+0x44>
   bc2a2:	4602      	mov	r2, r0
   bc2a4:	4b44      	ldr	r3, [pc, #272]	; (bc3b8 <__multiply+0x14c>)
   bc2a6:	4845      	ldr	r0, [pc, #276]	; (bc3bc <__multiply+0x150>)
   bc2a8:	f240 115d 	movw	r1, #349	; 0x15d
   bc2ac:	f7fa ff7e 	bl	b71ac <__assert_func>
   bc2b0:	f100 0514 	add.w	r5, r0, #20
   bc2b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bc2b8:	462b      	mov	r3, r5
   bc2ba:	2200      	movs	r2, #0
   bc2bc:	4543      	cmp	r3, r8
   bc2be:	d321      	bcc.n	bc304 <__multiply+0x98>
   bc2c0:	f104 0314 	add.w	r3, r4, #20
   bc2c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bc2c8:	f109 0314 	add.w	r3, r9, #20
   bc2cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bc2d0:	9202      	str	r2, [sp, #8]
   bc2d2:	1b3a      	subs	r2, r7, r4
   bc2d4:	3a15      	subs	r2, #21
   bc2d6:	f022 0203 	bic.w	r2, r2, #3
   bc2da:	3204      	adds	r2, #4
   bc2dc:	f104 0115 	add.w	r1, r4, #21
   bc2e0:	428f      	cmp	r7, r1
   bc2e2:	bf38      	it	cc
   bc2e4:	2204      	movcc	r2, #4
   bc2e6:	9201      	str	r2, [sp, #4]
   bc2e8:	9a02      	ldr	r2, [sp, #8]
   bc2ea:	9303      	str	r3, [sp, #12]
   bc2ec:	429a      	cmp	r2, r3
   bc2ee:	d80c      	bhi.n	bc30a <__multiply+0x9e>
   bc2f0:	2e00      	cmp	r6, #0
   bc2f2:	dd03      	ble.n	bc2fc <__multiply+0x90>
   bc2f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bc2f8:	2b00      	cmp	r3, #0
   bc2fa:	d05a      	beq.n	bc3b2 <__multiply+0x146>
   bc2fc:	6106      	str	r6, [r0, #16]
   bc2fe:	b005      	add	sp, #20
   bc300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc304:	f843 2b04 	str.w	r2, [r3], #4
   bc308:	e7d8      	b.n	bc2bc <__multiply+0x50>
   bc30a:	f8b3 a000 	ldrh.w	sl, [r3]
   bc30e:	f1ba 0f00 	cmp.w	sl, #0
   bc312:	d024      	beq.n	bc35e <__multiply+0xf2>
   bc314:	f104 0e14 	add.w	lr, r4, #20
   bc318:	46a9      	mov	r9, r5
   bc31a:	f04f 0c00 	mov.w	ip, #0
   bc31e:	f85e 2b04 	ldr.w	r2, [lr], #4
   bc322:	f8d9 1000 	ldr.w	r1, [r9]
   bc326:	fa1f fb82 	uxth.w	fp, r2
   bc32a:	b289      	uxth	r1, r1
   bc32c:	fb0a 110b 	mla	r1, sl, fp, r1
   bc330:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bc334:	f8d9 2000 	ldr.w	r2, [r9]
   bc338:	4461      	add	r1, ip
   bc33a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bc33e:	fb0a c20b 	mla	r2, sl, fp, ip
   bc342:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bc346:	b289      	uxth	r1, r1
   bc348:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bc34c:	4577      	cmp	r7, lr
   bc34e:	f849 1b04 	str.w	r1, [r9], #4
   bc352:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bc356:	d8e2      	bhi.n	bc31e <__multiply+0xb2>
   bc358:	9a01      	ldr	r2, [sp, #4]
   bc35a:	f845 c002 	str.w	ip, [r5, r2]
   bc35e:	9a03      	ldr	r2, [sp, #12]
   bc360:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bc364:	3304      	adds	r3, #4
   bc366:	f1b9 0f00 	cmp.w	r9, #0
   bc36a:	d020      	beq.n	bc3ae <__multiply+0x142>
   bc36c:	6829      	ldr	r1, [r5, #0]
   bc36e:	f104 0c14 	add.w	ip, r4, #20
   bc372:	46ae      	mov	lr, r5
   bc374:	f04f 0a00 	mov.w	sl, #0
   bc378:	f8bc b000 	ldrh.w	fp, [ip]
   bc37c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bc380:	fb09 220b 	mla	r2, r9, fp, r2
   bc384:	4492      	add	sl, r2
   bc386:	b289      	uxth	r1, r1
   bc388:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bc38c:	f84e 1b04 	str.w	r1, [lr], #4
   bc390:	f85c 2b04 	ldr.w	r2, [ip], #4
   bc394:	f8be 1000 	ldrh.w	r1, [lr]
   bc398:	0c12      	lsrs	r2, r2, #16
   bc39a:	fb09 1102 	mla	r1, r9, r2, r1
   bc39e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bc3a2:	4567      	cmp	r7, ip
   bc3a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bc3a8:	d8e6      	bhi.n	bc378 <__multiply+0x10c>
   bc3aa:	9a01      	ldr	r2, [sp, #4]
   bc3ac:	50a9      	str	r1, [r5, r2]
   bc3ae:	3504      	adds	r5, #4
   bc3b0:	e79a      	b.n	bc2e8 <__multiply+0x7c>
   bc3b2:	3e01      	subs	r6, #1
   bc3b4:	e79c      	b.n	bc2f0 <__multiply+0x84>
   bc3b6:	bf00      	nop
   bc3b8:	000bd509 	.word	0x000bd509
   bc3bc:	000bd590 	.word	0x000bd590

000bc3c0 <__pow5mult>:
   bc3c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc3c4:	4615      	mov	r5, r2
   bc3c6:	f012 0203 	ands.w	r2, r2, #3
   bc3ca:	4606      	mov	r6, r0
   bc3cc:	460f      	mov	r7, r1
   bc3ce:	d007      	beq.n	bc3e0 <__pow5mult+0x20>
   bc3d0:	4c25      	ldr	r4, [pc, #148]	; (bc468 <__pow5mult+0xa8>)
   bc3d2:	3a01      	subs	r2, #1
   bc3d4:	2300      	movs	r3, #0
   bc3d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bc3da:	f7ff fe51 	bl	bc080 <__multadd>
   bc3de:	4607      	mov	r7, r0
   bc3e0:	10ad      	asrs	r5, r5, #2
   bc3e2:	d03d      	beq.n	bc460 <__pow5mult+0xa0>
   bc3e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bc3e6:	b97c      	cbnz	r4, bc408 <__pow5mult+0x48>
   bc3e8:	2010      	movs	r0, #16
   bc3ea:	f7fa fe9f 	bl	b712c <malloc>
   bc3ee:	4602      	mov	r2, r0
   bc3f0:	6270      	str	r0, [r6, #36]	; 0x24
   bc3f2:	b928      	cbnz	r0, bc400 <__pow5mult+0x40>
   bc3f4:	4b1d      	ldr	r3, [pc, #116]	; (bc46c <__pow5mult+0xac>)
   bc3f6:	481e      	ldr	r0, [pc, #120]	; (bc470 <__pow5mult+0xb0>)
   bc3f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bc3fc:	f7fa fed6 	bl	b71ac <__assert_func>
   bc400:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bc404:	6004      	str	r4, [r0, #0]
   bc406:	60c4      	str	r4, [r0, #12]
   bc408:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bc40c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bc410:	b94c      	cbnz	r4, bc426 <__pow5mult+0x66>
   bc412:	f240 2171 	movw	r1, #625	; 0x271
   bc416:	4630      	mov	r0, r6
   bc418:	f7ff ff12 	bl	bc240 <__i2b>
   bc41c:	2300      	movs	r3, #0
   bc41e:	f8c8 0008 	str.w	r0, [r8, #8]
   bc422:	4604      	mov	r4, r0
   bc424:	6003      	str	r3, [r0, #0]
   bc426:	f04f 0900 	mov.w	r9, #0
   bc42a:	07eb      	lsls	r3, r5, #31
   bc42c:	d50a      	bpl.n	bc444 <__pow5mult+0x84>
   bc42e:	4639      	mov	r1, r7
   bc430:	4622      	mov	r2, r4
   bc432:	4630      	mov	r0, r6
   bc434:	f7ff ff1a 	bl	bc26c <__multiply>
   bc438:	4639      	mov	r1, r7
   bc43a:	4680      	mov	r8, r0
   bc43c:	4630      	mov	r0, r6
   bc43e:	f7ff fdfd 	bl	bc03c <_Bfree>
   bc442:	4647      	mov	r7, r8
   bc444:	106d      	asrs	r5, r5, #1
   bc446:	d00b      	beq.n	bc460 <__pow5mult+0xa0>
   bc448:	6820      	ldr	r0, [r4, #0]
   bc44a:	b938      	cbnz	r0, bc45c <__pow5mult+0x9c>
   bc44c:	4622      	mov	r2, r4
   bc44e:	4621      	mov	r1, r4
   bc450:	4630      	mov	r0, r6
   bc452:	f7ff ff0b 	bl	bc26c <__multiply>
   bc456:	6020      	str	r0, [r4, #0]
   bc458:	f8c0 9000 	str.w	r9, [r0]
   bc45c:	4604      	mov	r4, r0
   bc45e:	e7e4      	b.n	bc42a <__pow5mult+0x6a>
   bc460:	4638      	mov	r0, r7
   bc462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc466:	bf00      	nop
   bc468:	000bd6e0 	.word	0x000bd6e0
   bc46c:	000bd335 	.word	0x000bd335
   bc470:	000bd590 	.word	0x000bd590

000bc474 <__lshift>:
   bc474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bc478:	460c      	mov	r4, r1
   bc47a:	6849      	ldr	r1, [r1, #4]
   bc47c:	6923      	ldr	r3, [r4, #16]
   bc47e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bc482:	68a3      	ldr	r3, [r4, #8]
   bc484:	4607      	mov	r7, r0
   bc486:	4691      	mov	r9, r2
   bc488:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bc48c:	f108 0601 	add.w	r6, r8, #1
   bc490:	42b3      	cmp	r3, r6
   bc492:	db0b      	blt.n	bc4ac <__lshift+0x38>
   bc494:	4638      	mov	r0, r7
   bc496:	f7ff fd91 	bl	bbfbc <_Balloc>
   bc49a:	4605      	mov	r5, r0
   bc49c:	b948      	cbnz	r0, bc4b2 <__lshift+0x3e>
   bc49e:	4602      	mov	r2, r0
   bc4a0:	4b2a      	ldr	r3, [pc, #168]	; (bc54c <__lshift+0xd8>)
   bc4a2:	482b      	ldr	r0, [pc, #172]	; (bc550 <__lshift+0xdc>)
   bc4a4:	f240 11d9 	movw	r1, #473	; 0x1d9
   bc4a8:	f7fa fe80 	bl	b71ac <__assert_func>
   bc4ac:	3101      	adds	r1, #1
   bc4ae:	005b      	lsls	r3, r3, #1
   bc4b0:	e7ee      	b.n	bc490 <__lshift+0x1c>
   bc4b2:	2300      	movs	r3, #0
   bc4b4:	f100 0114 	add.w	r1, r0, #20
   bc4b8:	f100 0210 	add.w	r2, r0, #16
   bc4bc:	4618      	mov	r0, r3
   bc4be:	4553      	cmp	r3, sl
   bc4c0:	db37      	blt.n	bc532 <__lshift+0xbe>
   bc4c2:	6920      	ldr	r0, [r4, #16]
   bc4c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bc4c8:	f104 0314 	add.w	r3, r4, #20
   bc4cc:	f019 091f 	ands.w	r9, r9, #31
   bc4d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bc4d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bc4d8:	d02f      	beq.n	bc53a <__lshift+0xc6>
   bc4da:	f1c9 0e20 	rsb	lr, r9, #32
   bc4de:	468a      	mov	sl, r1
   bc4e0:	f04f 0c00 	mov.w	ip, #0
   bc4e4:	681a      	ldr	r2, [r3, #0]
   bc4e6:	fa02 f209 	lsl.w	r2, r2, r9
   bc4ea:	ea42 020c 	orr.w	r2, r2, ip
   bc4ee:	f84a 2b04 	str.w	r2, [sl], #4
   bc4f2:	f853 2b04 	ldr.w	r2, [r3], #4
   bc4f6:	4298      	cmp	r0, r3
   bc4f8:	fa22 fc0e 	lsr.w	ip, r2, lr
   bc4fc:	d8f2      	bhi.n	bc4e4 <__lshift+0x70>
   bc4fe:	1b03      	subs	r3, r0, r4
   bc500:	3b15      	subs	r3, #21
   bc502:	f023 0303 	bic.w	r3, r3, #3
   bc506:	3304      	adds	r3, #4
   bc508:	f104 0215 	add.w	r2, r4, #21
   bc50c:	4290      	cmp	r0, r2
   bc50e:	bf38      	it	cc
   bc510:	2304      	movcc	r3, #4
   bc512:	f841 c003 	str.w	ip, [r1, r3]
   bc516:	f1bc 0f00 	cmp.w	ip, #0
   bc51a:	d001      	beq.n	bc520 <__lshift+0xac>
   bc51c:	f108 0602 	add.w	r6, r8, #2
   bc520:	3e01      	subs	r6, #1
   bc522:	4638      	mov	r0, r7
   bc524:	612e      	str	r6, [r5, #16]
   bc526:	4621      	mov	r1, r4
   bc528:	f7ff fd88 	bl	bc03c <_Bfree>
   bc52c:	4628      	mov	r0, r5
   bc52e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc532:	f842 0f04 	str.w	r0, [r2, #4]!
   bc536:	3301      	adds	r3, #1
   bc538:	e7c1      	b.n	bc4be <__lshift+0x4a>
   bc53a:	3904      	subs	r1, #4
   bc53c:	f853 2b04 	ldr.w	r2, [r3], #4
   bc540:	f841 2f04 	str.w	r2, [r1, #4]!
   bc544:	4298      	cmp	r0, r3
   bc546:	d8f9      	bhi.n	bc53c <__lshift+0xc8>
   bc548:	e7ea      	b.n	bc520 <__lshift+0xac>
   bc54a:	bf00      	nop
   bc54c:	000bd509 	.word	0x000bd509
   bc550:	000bd590 	.word	0x000bd590

000bc554 <__mcmp>:
   bc554:	b530      	push	{r4, r5, lr}
   bc556:	6902      	ldr	r2, [r0, #16]
   bc558:	690c      	ldr	r4, [r1, #16]
   bc55a:	1b12      	subs	r2, r2, r4
   bc55c:	d10e      	bne.n	bc57c <__mcmp+0x28>
   bc55e:	f100 0314 	add.w	r3, r0, #20
   bc562:	3114      	adds	r1, #20
   bc564:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bc568:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bc56c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bc570:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bc574:	42a5      	cmp	r5, r4
   bc576:	d003      	beq.n	bc580 <__mcmp+0x2c>
   bc578:	d305      	bcc.n	bc586 <__mcmp+0x32>
   bc57a:	2201      	movs	r2, #1
   bc57c:	4610      	mov	r0, r2
   bc57e:	bd30      	pop	{r4, r5, pc}
   bc580:	4283      	cmp	r3, r0
   bc582:	d3f3      	bcc.n	bc56c <__mcmp+0x18>
   bc584:	e7fa      	b.n	bc57c <__mcmp+0x28>
   bc586:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc58a:	e7f7      	b.n	bc57c <__mcmp+0x28>

000bc58c <__mdiff>:
   bc58c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc590:	460c      	mov	r4, r1
   bc592:	4606      	mov	r6, r0
   bc594:	4611      	mov	r1, r2
   bc596:	4620      	mov	r0, r4
   bc598:	4690      	mov	r8, r2
   bc59a:	f7ff ffdb 	bl	bc554 <__mcmp>
   bc59e:	1e05      	subs	r5, r0, #0
   bc5a0:	d110      	bne.n	bc5c4 <__mdiff+0x38>
   bc5a2:	4629      	mov	r1, r5
   bc5a4:	4630      	mov	r0, r6
   bc5a6:	f7ff fd09 	bl	bbfbc <_Balloc>
   bc5aa:	b930      	cbnz	r0, bc5ba <__mdiff+0x2e>
   bc5ac:	4b3a      	ldr	r3, [pc, #232]	; (bc698 <__mdiff+0x10c>)
   bc5ae:	4602      	mov	r2, r0
   bc5b0:	f240 2132 	movw	r1, #562	; 0x232
   bc5b4:	4839      	ldr	r0, [pc, #228]	; (bc69c <__mdiff+0x110>)
   bc5b6:	f7fa fdf9 	bl	b71ac <__assert_func>
   bc5ba:	2301      	movs	r3, #1
   bc5bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bc5c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc5c4:	bfa4      	itt	ge
   bc5c6:	4643      	movge	r3, r8
   bc5c8:	46a0      	movge	r8, r4
   bc5ca:	4630      	mov	r0, r6
   bc5cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bc5d0:	bfa6      	itte	ge
   bc5d2:	461c      	movge	r4, r3
   bc5d4:	2500      	movge	r5, #0
   bc5d6:	2501      	movlt	r5, #1
   bc5d8:	f7ff fcf0 	bl	bbfbc <_Balloc>
   bc5dc:	b920      	cbnz	r0, bc5e8 <__mdiff+0x5c>
   bc5de:	4b2e      	ldr	r3, [pc, #184]	; (bc698 <__mdiff+0x10c>)
   bc5e0:	4602      	mov	r2, r0
   bc5e2:	f44f 7110 	mov.w	r1, #576	; 0x240
   bc5e6:	e7e5      	b.n	bc5b4 <__mdiff+0x28>
   bc5e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bc5ec:	6926      	ldr	r6, [r4, #16]
   bc5ee:	60c5      	str	r5, [r0, #12]
   bc5f0:	f104 0914 	add.w	r9, r4, #20
   bc5f4:	f108 0514 	add.w	r5, r8, #20
   bc5f8:	f100 0e14 	add.w	lr, r0, #20
   bc5fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bc600:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bc604:	f108 0210 	add.w	r2, r8, #16
   bc608:	46f2      	mov	sl, lr
   bc60a:	2100      	movs	r1, #0
   bc60c:	f859 3b04 	ldr.w	r3, [r9], #4
   bc610:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bc614:	fa1f f883 	uxth.w	r8, r3
   bc618:	fa11 f18b 	uxtah	r1, r1, fp
   bc61c:	0c1b      	lsrs	r3, r3, #16
   bc61e:	eba1 0808 	sub.w	r8, r1, r8
   bc622:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bc626:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bc62a:	fa1f f888 	uxth.w	r8, r8
   bc62e:	1419      	asrs	r1, r3, #16
   bc630:	454e      	cmp	r6, r9
   bc632:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bc636:	f84a 3b04 	str.w	r3, [sl], #4
   bc63a:	d8e7      	bhi.n	bc60c <__mdiff+0x80>
   bc63c:	1b33      	subs	r3, r6, r4
   bc63e:	3b15      	subs	r3, #21
   bc640:	f023 0303 	bic.w	r3, r3, #3
   bc644:	3304      	adds	r3, #4
   bc646:	3415      	adds	r4, #21
   bc648:	42a6      	cmp	r6, r4
   bc64a:	bf38      	it	cc
   bc64c:	2304      	movcc	r3, #4
   bc64e:	441d      	add	r5, r3
   bc650:	4473      	add	r3, lr
   bc652:	469e      	mov	lr, r3
   bc654:	462e      	mov	r6, r5
   bc656:	4566      	cmp	r6, ip
   bc658:	d30e      	bcc.n	bc678 <__mdiff+0xec>
   bc65a:	f10c 0203 	add.w	r2, ip, #3
   bc65e:	1b52      	subs	r2, r2, r5
   bc660:	f022 0203 	bic.w	r2, r2, #3
   bc664:	3d03      	subs	r5, #3
   bc666:	45ac      	cmp	ip, r5
   bc668:	bf38      	it	cc
   bc66a:	2200      	movcc	r2, #0
   bc66c:	441a      	add	r2, r3
   bc66e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bc672:	b17b      	cbz	r3, bc694 <__mdiff+0x108>
   bc674:	6107      	str	r7, [r0, #16]
   bc676:	e7a3      	b.n	bc5c0 <__mdiff+0x34>
   bc678:	f856 8b04 	ldr.w	r8, [r6], #4
   bc67c:	fa11 f288 	uxtah	r2, r1, r8
   bc680:	1414      	asrs	r4, r2, #16
   bc682:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bc686:	b292      	uxth	r2, r2
   bc688:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bc68c:	f84e 2b04 	str.w	r2, [lr], #4
   bc690:	1421      	asrs	r1, r4, #16
   bc692:	e7e0      	b.n	bc656 <__mdiff+0xca>
   bc694:	3f01      	subs	r7, #1
   bc696:	e7ea      	b.n	bc66e <__mdiff+0xe2>
   bc698:	000bd509 	.word	0x000bd509
   bc69c:	000bd590 	.word	0x000bd590

000bc6a0 <__ulp>:
   bc6a0:	b082      	sub	sp, #8
   bc6a2:	ed8d 0b00 	vstr	d0, [sp]
   bc6a6:	9b01      	ldr	r3, [sp, #4]
   bc6a8:	4912      	ldr	r1, [pc, #72]	; (bc6f4 <__ulp+0x54>)
   bc6aa:	4019      	ands	r1, r3
   bc6ac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bc6b0:	2900      	cmp	r1, #0
   bc6b2:	dd05      	ble.n	bc6c0 <__ulp+0x20>
   bc6b4:	2200      	movs	r2, #0
   bc6b6:	460b      	mov	r3, r1
   bc6b8:	ec43 2b10 	vmov	d0, r2, r3
   bc6bc:	b002      	add	sp, #8
   bc6be:	4770      	bx	lr
   bc6c0:	4249      	negs	r1, r1
   bc6c2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bc6c6:	ea4f 5021 	mov.w	r0, r1, asr #20
   bc6ca:	f04f 0200 	mov.w	r2, #0
   bc6ce:	f04f 0300 	mov.w	r3, #0
   bc6d2:	da04      	bge.n	bc6de <__ulp+0x3e>
   bc6d4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bc6d8:	fa41 f300 	asr.w	r3, r1, r0
   bc6dc:	e7ec      	b.n	bc6b8 <__ulp+0x18>
   bc6de:	f1a0 0114 	sub.w	r1, r0, #20
   bc6e2:	291e      	cmp	r1, #30
   bc6e4:	bfda      	itte	le
   bc6e6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bc6ea:	fa20 f101 	lsrle.w	r1, r0, r1
   bc6ee:	2101      	movgt	r1, #1
   bc6f0:	460a      	mov	r2, r1
   bc6f2:	e7e1      	b.n	bc6b8 <__ulp+0x18>
   bc6f4:	7ff00000 	.word	0x7ff00000

000bc6f8 <__b2d>:
   bc6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc6fa:	6905      	ldr	r5, [r0, #16]
   bc6fc:	f100 0714 	add.w	r7, r0, #20
   bc700:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bc704:	1f2e      	subs	r6, r5, #4
   bc706:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bc70a:	4620      	mov	r0, r4
   bc70c:	f7ff fd48 	bl	bc1a0 <__hi0bits>
   bc710:	f1c0 0320 	rsb	r3, r0, #32
   bc714:	280a      	cmp	r0, #10
   bc716:	f8df c07c 	ldr.w	ip, [pc, #124]	; bc794 <__b2d+0x9c>
   bc71a:	600b      	str	r3, [r1, #0]
   bc71c:	dc14      	bgt.n	bc748 <__b2d+0x50>
   bc71e:	f1c0 0e0b 	rsb	lr, r0, #11
   bc722:	fa24 f10e 	lsr.w	r1, r4, lr
   bc726:	42b7      	cmp	r7, r6
   bc728:	ea41 030c 	orr.w	r3, r1, ip
   bc72c:	bf34      	ite	cc
   bc72e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bc732:	2100      	movcs	r1, #0
   bc734:	3015      	adds	r0, #21
   bc736:	fa04 f000 	lsl.w	r0, r4, r0
   bc73a:	fa21 f10e 	lsr.w	r1, r1, lr
   bc73e:	ea40 0201 	orr.w	r2, r0, r1
   bc742:	ec43 2b10 	vmov	d0, r2, r3
   bc746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bc748:	42b7      	cmp	r7, r6
   bc74a:	bf3a      	itte	cc
   bc74c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bc750:	f1a5 0608 	subcc.w	r6, r5, #8
   bc754:	2100      	movcs	r1, #0
   bc756:	380b      	subs	r0, #11
   bc758:	d017      	beq.n	bc78a <__b2d+0x92>
   bc75a:	f1c0 0c20 	rsb	ip, r0, #32
   bc75e:	fa04 f500 	lsl.w	r5, r4, r0
   bc762:	42be      	cmp	r6, r7
   bc764:	fa21 f40c 	lsr.w	r4, r1, ip
   bc768:	ea45 0504 	orr.w	r5, r5, r4
   bc76c:	bf8c      	ite	hi
   bc76e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bc772:	2400      	movls	r4, #0
   bc774:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bc778:	fa01 f000 	lsl.w	r0, r1, r0
   bc77c:	fa24 f40c 	lsr.w	r4, r4, ip
   bc780:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bc784:	ea40 0204 	orr.w	r2, r0, r4
   bc788:	e7db      	b.n	bc742 <__b2d+0x4a>
   bc78a:	ea44 030c 	orr.w	r3, r4, ip
   bc78e:	460a      	mov	r2, r1
   bc790:	e7d7      	b.n	bc742 <__b2d+0x4a>
   bc792:	bf00      	nop
   bc794:	3ff00000 	.word	0x3ff00000

000bc798 <__d2b>:
   bc798:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bc79c:	4689      	mov	r9, r1
   bc79e:	2101      	movs	r1, #1
   bc7a0:	ec57 6b10 	vmov	r6, r7, d0
   bc7a4:	4690      	mov	r8, r2
   bc7a6:	f7ff fc09 	bl	bbfbc <_Balloc>
   bc7aa:	4604      	mov	r4, r0
   bc7ac:	b930      	cbnz	r0, bc7bc <__d2b+0x24>
   bc7ae:	4602      	mov	r2, r0
   bc7b0:	4b25      	ldr	r3, [pc, #148]	; (bc848 <__d2b+0xb0>)
   bc7b2:	4826      	ldr	r0, [pc, #152]	; (bc84c <__d2b+0xb4>)
   bc7b4:	f240 310a 	movw	r1, #778	; 0x30a
   bc7b8:	f7fa fcf8 	bl	b71ac <__assert_func>
   bc7bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bc7c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bc7c4:	bb35      	cbnz	r5, bc814 <__d2b+0x7c>
   bc7c6:	2e00      	cmp	r6, #0
   bc7c8:	9301      	str	r3, [sp, #4]
   bc7ca:	d028      	beq.n	bc81e <__d2b+0x86>
   bc7cc:	4668      	mov	r0, sp
   bc7ce:	9600      	str	r6, [sp, #0]
   bc7d0:	f7ff fd06 	bl	bc1e0 <__lo0bits>
   bc7d4:	9900      	ldr	r1, [sp, #0]
   bc7d6:	b300      	cbz	r0, bc81a <__d2b+0x82>
   bc7d8:	9a01      	ldr	r2, [sp, #4]
   bc7da:	f1c0 0320 	rsb	r3, r0, #32
   bc7de:	fa02 f303 	lsl.w	r3, r2, r3
   bc7e2:	430b      	orrs	r3, r1
   bc7e4:	40c2      	lsrs	r2, r0
   bc7e6:	6163      	str	r3, [r4, #20]
   bc7e8:	9201      	str	r2, [sp, #4]
   bc7ea:	9b01      	ldr	r3, [sp, #4]
   bc7ec:	61a3      	str	r3, [r4, #24]
   bc7ee:	2b00      	cmp	r3, #0
   bc7f0:	bf14      	ite	ne
   bc7f2:	2202      	movne	r2, #2
   bc7f4:	2201      	moveq	r2, #1
   bc7f6:	6122      	str	r2, [r4, #16]
   bc7f8:	b1d5      	cbz	r5, bc830 <__d2b+0x98>
   bc7fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bc7fe:	4405      	add	r5, r0
   bc800:	f8c9 5000 	str.w	r5, [r9]
   bc804:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bc808:	f8c8 0000 	str.w	r0, [r8]
   bc80c:	4620      	mov	r0, r4
   bc80e:	b003      	add	sp, #12
   bc810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bc814:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bc818:	e7d5      	b.n	bc7c6 <__d2b+0x2e>
   bc81a:	6161      	str	r1, [r4, #20]
   bc81c:	e7e5      	b.n	bc7ea <__d2b+0x52>
   bc81e:	a801      	add	r0, sp, #4
   bc820:	f7ff fcde 	bl	bc1e0 <__lo0bits>
   bc824:	9b01      	ldr	r3, [sp, #4]
   bc826:	6163      	str	r3, [r4, #20]
   bc828:	2201      	movs	r2, #1
   bc82a:	6122      	str	r2, [r4, #16]
   bc82c:	3020      	adds	r0, #32
   bc82e:	e7e3      	b.n	bc7f8 <__d2b+0x60>
   bc830:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bc834:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bc838:	f8c9 0000 	str.w	r0, [r9]
   bc83c:	6918      	ldr	r0, [r3, #16]
   bc83e:	f7ff fcaf 	bl	bc1a0 <__hi0bits>
   bc842:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bc846:	e7df      	b.n	bc808 <__d2b+0x70>
   bc848:	000bd509 	.word	0x000bd509
   bc84c:	000bd590 	.word	0x000bd590

000bc850 <__ratio>:
   bc850:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc854:	4688      	mov	r8, r1
   bc856:	4669      	mov	r1, sp
   bc858:	4681      	mov	r9, r0
   bc85a:	f7ff ff4d 	bl	bc6f8 <__b2d>
   bc85e:	a901      	add	r1, sp, #4
   bc860:	4640      	mov	r0, r8
   bc862:	ec55 4b10 	vmov	r4, r5, d0
   bc866:	f7ff ff47 	bl	bc6f8 <__b2d>
   bc86a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bc86e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bc872:	eba3 0c02 	sub.w	ip, r3, r2
   bc876:	e9dd 3200 	ldrd	r3, r2, [sp]
   bc87a:	1a9b      	subs	r3, r3, r2
   bc87c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bc880:	ec51 0b10 	vmov	r0, r1, d0
   bc884:	2b00      	cmp	r3, #0
   bc886:	bfd6      	itet	le
   bc888:	460a      	movle	r2, r1
   bc88a:	462a      	movgt	r2, r5
   bc88c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bc890:	468b      	mov	fp, r1
   bc892:	462f      	mov	r7, r5
   bc894:	bfd4      	ite	le
   bc896:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bc89a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bc89e:	4620      	mov	r0, r4
   bc8a0:	ee10 2a10 	vmov	r2, s0
   bc8a4:	465b      	mov	r3, fp
   bc8a6:	4639      	mov	r1, r7
   bc8a8:	f7fd fe02 	bl	ba4b0 <__aeabi_ddiv>
   bc8ac:	ec41 0b10 	vmov	d0, r0, r1
   bc8b0:	b003      	add	sp, #12
   bc8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bc8b6 <__copybits>:
   bc8b6:	3901      	subs	r1, #1
   bc8b8:	b570      	push	{r4, r5, r6, lr}
   bc8ba:	1149      	asrs	r1, r1, #5
   bc8bc:	6914      	ldr	r4, [r2, #16]
   bc8be:	3101      	adds	r1, #1
   bc8c0:	f102 0314 	add.w	r3, r2, #20
   bc8c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bc8c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bc8cc:	1f05      	subs	r5, r0, #4
   bc8ce:	42a3      	cmp	r3, r4
   bc8d0:	d30c      	bcc.n	bc8ec <__copybits+0x36>
   bc8d2:	1aa3      	subs	r3, r4, r2
   bc8d4:	3b11      	subs	r3, #17
   bc8d6:	f023 0303 	bic.w	r3, r3, #3
   bc8da:	3211      	adds	r2, #17
   bc8dc:	42a2      	cmp	r2, r4
   bc8de:	bf88      	it	hi
   bc8e0:	2300      	movhi	r3, #0
   bc8e2:	4418      	add	r0, r3
   bc8e4:	2300      	movs	r3, #0
   bc8e6:	4288      	cmp	r0, r1
   bc8e8:	d305      	bcc.n	bc8f6 <__copybits+0x40>
   bc8ea:	bd70      	pop	{r4, r5, r6, pc}
   bc8ec:	f853 6b04 	ldr.w	r6, [r3], #4
   bc8f0:	f845 6f04 	str.w	r6, [r5, #4]!
   bc8f4:	e7eb      	b.n	bc8ce <__copybits+0x18>
   bc8f6:	f840 3b04 	str.w	r3, [r0], #4
   bc8fa:	e7f4      	b.n	bc8e6 <__copybits+0x30>

000bc8fc <__any_on>:
   bc8fc:	f100 0214 	add.w	r2, r0, #20
   bc900:	6900      	ldr	r0, [r0, #16]
   bc902:	114b      	asrs	r3, r1, #5
   bc904:	4298      	cmp	r0, r3
   bc906:	b510      	push	{r4, lr}
   bc908:	db11      	blt.n	bc92e <__any_on+0x32>
   bc90a:	dd0a      	ble.n	bc922 <__any_on+0x26>
   bc90c:	f011 011f 	ands.w	r1, r1, #31
   bc910:	d007      	beq.n	bc922 <__any_on+0x26>
   bc912:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bc916:	fa24 f001 	lsr.w	r0, r4, r1
   bc91a:	fa00 f101 	lsl.w	r1, r0, r1
   bc91e:	428c      	cmp	r4, r1
   bc920:	d10b      	bne.n	bc93a <__any_on+0x3e>
   bc922:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bc926:	4293      	cmp	r3, r2
   bc928:	d803      	bhi.n	bc932 <__any_on+0x36>
   bc92a:	2000      	movs	r0, #0
   bc92c:	bd10      	pop	{r4, pc}
   bc92e:	4603      	mov	r3, r0
   bc930:	e7f7      	b.n	bc922 <__any_on+0x26>
   bc932:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bc936:	2900      	cmp	r1, #0
   bc938:	d0f5      	beq.n	bc926 <__any_on+0x2a>
   bc93a:	2001      	movs	r0, #1
   bc93c:	e7f6      	b.n	bc92c <__any_on+0x30>

000bc93e <_calloc_r>:
   bc93e:	b513      	push	{r0, r1, r4, lr}
   bc940:	434a      	muls	r2, r1
   bc942:	4611      	mov	r1, r2
   bc944:	9201      	str	r2, [sp, #4]
   bc946:	f7fa fc21 	bl	b718c <_malloc_r>
   bc94a:	4604      	mov	r4, r0
   bc94c:	b118      	cbz	r0, bc956 <_calloc_r+0x18>
   bc94e:	9a01      	ldr	r2, [sp, #4]
   bc950:	2100      	movs	r1, #0
   bc952:	f7fe f80a 	bl	ba96a <memset>
   bc956:	4620      	mov	r0, r4
   bc958:	b002      	add	sp, #8
   bc95a:	bd10      	pop	{r4, pc}
   bc95c:	0000      	movs	r0, r0
	...

000bc960 <nan>:
   bc960:	ed9f 0b01 	vldr	d0, [pc, #4]	; bc968 <nan+0x8>
   bc964:	4770      	bx	lr
   bc966:	bf00      	nop
   bc968:	00000000 	.word	0x00000000
   bc96c:	7ff80000 	.word	0x7ff80000

000bc970 <__ascii_wctomb>:
   bc970:	b149      	cbz	r1, bc986 <__ascii_wctomb+0x16>
   bc972:	2aff      	cmp	r2, #255	; 0xff
   bc974:	bf85      	ittet	hi
   bc976:	238a      	movhi	r3, #138	; 0x8a
   bc978:	6003      	strhi	r3, [r0, #0]
   bc97a:	700a      	strbls	r2, [r1, #0]
   bc97c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   bc980:	bf98      	it	ls
   bc982:	2001      	movls	r0, #1
   bc984:	4770      	bx	lr
   bc986:	4608      	mov	r0, r1
   bc988:	4770      	bx	lr
	...

000bc98c <__aeabi_d2lz>:
   bc98c:	b538      	push	{r3, r4, r5, lr}
   bc98e:	2200      	movs	r2, #0
   bc990:	2300      	movs	r3, #0
   bc992:	4604      	mov	r4, r0
   bc994:	460d      	mov	r5, r1
   bc996:	f7fd fed3 	bl	ba740 <__aeabi_dcmplt>
   bc99a:	b928      	cbnz	r0, bc9a8 <__aeabi_d2lz+0x1c>
   bc99c:	4620      	mov	r0, r4
   bc99e:	4629      	mov	r1, r5
   bc9a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bc9a4:	f7fd bf7a 	b.w	ba89c <__aeabi_d2ulz>
   bc9a8:	4620      	mov	r0, r4
   bc9aa:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bc9ae:	f7fd ff75 	bl	ba89c <__aeabi_d2ulz>
   bc9b2:	4240      	negs	r0, r0
   bc9b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bc9b8:	bd38      	pop	{r3, r4, r5, pc}
   bc9ba:	bf00      	nop

000bc9bc <dynalib_user>:
   bc9bc:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bc9cc:	0000 0000 6162 6973 5f63 7473 6972 676e     ....basic_string
   bc9dc:	3a3a 4d5f 635f 6e6f 7473 7572 7463 6e20     ::_M_construct n
   bc9ec:	6c75 206c 6f6e 2074 6176 696c 0064 720a     ull not valid..r
   bc9fc:	7165 6575 7473 6320 646f 2065 2c31 6120     equest code 1, a
   bca0c:	6464 6572 7373 203a 7400 6172 736e 696d     ddress: .transmi
   bca1c:	7373 6f69 206e 6572 6963 7665 6465 6620     ssion recieved f
   bca2c:	6f72 3a6d 0020 6564 6976 6563 6920 3a64     rom: .device id:
   bca3c:	0020 7274 6e61 6d73 7369 6973 6e6f 7320      .transmission s
   bca4c:	6e65 2074 6f74 203a 7200 7165 6575 7473     ent to: .request
   bca5c:	6320 646f 2065 2c32 6120 6464 6572 7373      code 2, address
   bca6c:	203a 6300 6e6f 6c66 6369 2074 6576 6972     : .conflict veri
   bca7c:	6966 6163 6974 6e6f 203a 0a00 6f43 6e6e     fication: ..Conn
   bca8c:	6365 6574 2064 6f74 203a 2c00 0020 6163     ected to: ., .ca
   bca9c:	6e6e 746f 6320 6572 7461 2065 7473 3a64     nnot create std:
   bcaac:	763a 6365 6f74 2072 616c 6772 7265 7420     :vector larger t
   bcabc:	6168 206e 616d 5f78 6973 657a 2928 7600     han max_size().v
   bcacc:	6365 6f74 3a72 5f3a 5f4d 6172 676e 5f65     ector::_M_range_
   bcadc:	6863 6365 3a6b 5f20 6e5f 2820 6877 6369     check: __n (whic
   bcaec:	2068 7369 2520 757a 2029 3d3e 7420 6968     h is %zu) >= thi
   bcafc:	2d73 733e 7a69 2865 2029 7728 6968 6863     s->size() (which
   bcb0c:	6920 2073 7a25 2975 0a00 6e45 6574 2072      is %zu)..Enter 
   bcb1c:	6874 2065 696c 656e 6320 6c6f 726f 6f20     the line color o
   bcb2c:	2066 6874 2065 6564 6976 6563 7720 7469     f the device wit
   bcb3c:	2068 6874 2065 6c62 6e69 696b 676e 4c20     h the blinking L
   bcb4c:	4445 203a 7200 6365 6965 6576 7220 6465     ED: .receive red
   bcb5c:	7200 6365 6965 6576 6220 756c 0065 530a     .receive blue..S
   bcb6c:	7165 6575 636e 3a65 0020 4646 3030 3030     equence: .FF0000
   bcb7c:	3000 3041 3030 0030 3030 3030 4646 3000     .0A0000.0000FF.0
   bcb8c:	3030 3030 0041 7262 006e 4646 4646 3030     0000A.brn.FFFF00
   bcb9c:	3000 3041 3041 0030 3030 4646 3030 3000     .0A0A00.00FF00.0
   bcbac:	3030 3041 0030 726f 0067 4646 3038 3030     00A00.org.FF8000
   bcbbc:	3000 3041 3035 0030 3038 3030 3038 3000     .0A0500.800080.0
   bcbcc:	3035 3030 0035 6970 6b6e 4600 3846 4630     50005.pink.FF80F
   bcbdc:	0046 4130 3530 4130 3600 3445 3030 3030     F.0A050A.6E40000
   bcbec:	2d31 3542 3341 462d 3933 2d33 3045 3941     1-B5A3-F393-E0A9
   bcbfc:	452d 3035 3245 4434 4343 3941 0045 4536     -E50E24DCCA9E.6E
   bcc0c:	3034 3030 3230 422d 4135 2d33 3346 3339     400002-B5A3-F393
   bcc1c:	452d 4130 2d39 3545 4530 3432 4344 4143     -E0A9-E50E24DCCA
   bcc2c:	4539 3600 3445 3030 3030 2d33 3542 3341     9E.6E400003-B5A3
   bcc3c:	462d 3933 2d33 3045 3941 452d 3035 3245     -F393-E0A9-E50E2
   bcc4c:	4434 4343 3941 0045 7874 7200 0078 616c     4DCCA9E.tx.rx.la
   bcc5c:	6970 742e 6172 736e 7469 6863 6369 6761     pi.transitchicag
   bcc6c:	2e6f 6f63 006d 6f6c 706f 7320 6174 7472     o.com.loop start
   bcc7c:	2f00 7061 2f69 2e31 2f30 7474 6f70 6973     ./api/1.0/ttposi
   bcc8c:	6974 6e6f 2e73 7361 7870 6b3f 7965 303d     tions.aspx?key=0
   bcc9c:	6630 3066 3039 3336 6163 3461 3736 3834     0ff09063caa46748
   bccac:	3334 6434 6635 3361 3132 3064 3834 2666     434d5fa321d048f&
   bccbc:	7472 003d 6f26 7475 7570 5474 7079 3d65     rt=.&outputType=
   bcccc:	534a 4e4f 4700 5445 7000 7261 6973 676e     JSON.GET.parsing
   bccdc:	7000 7261 6973 676e 6620 6961 656c 0064     .parsing failed.
   bccec:	7463 7461 0074 6f72 7475 0065 7274 6961     ctatt.route.trai
   bccfc:	006e 656e 7478 7453 4e61 006d 7274 7244     n.nextStaNm.trDr
   bcd0c:	6c00 7461 6c00 6e6f 2500 2c69 2520 0069     .lat.lon.%i, %i.

000bcd1c <_ZTV16JsonParserStaticILj10000ELj1000EE>:
	...
   bcd24:	40b9 000b 40cd 000b 6341 6563 7470 2f00     .@...@..Accept./
   bcd34:	2f2a 0000 0019 0000 0003 0000 0007 0000     */..............
   bcd44:	0005 0000 0014 0000 0005 0000 0005 0000     ................
   bcd54:	0005 0000 0019 0000 0005 0000 0005 0000     ................
   bcd64:	0005 0000 0005 0000 000f 0000 0005 0000     ................
   bcd74:	4820 5454 2f50 2e31 0d30 000a 6c63 736f      HTTP/1.0...clos
   bcd84:	0065 6f43 6e6e 6365 6974 6e6f 4800 534f     e.Connection.HOS
   bcd94:	0054 6f43 746e 6e65 2d74 654c 676e 6874     T.Content-Length
   bcda4:	5000 534f 0054 0a0d 0a0d 2500 3430 0078     .POST......%04x.

000bcdb4 <_ZTV10JsonBuffer>:
	...
   bcdbc:	6399 000b 63b5 000b                         .c...c..

000bcdc4 <_ZTV10JsonParser>:
	...
   bcdcc:	63c9 000b 63ed 000b                         .c...c..

000bcdd4 <_ZTV13JsonReference>:
	...
   bcddc:	6389 000b 638b 000b 7341 6573 7472 6f69     .c...c..Assertio
   bcdec:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   bcdfc:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   bce0c:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   bce1c:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   bce2c:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   bce3c:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   bce4c:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   bce5c:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   bce6c:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   bce7c:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   bce8c:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   bce9c:	6976 6563 002e 6f43 6e6e 6365 6574 2064     vice..Connected 
   bceac:	7962 4320 6e65 7274 6c61 6420 7665 6369     by Central devic
   bcebc:	2e65 4400 7369 6f63 6e6e 6365 6574 2064     e..Disconnected 
   bcecc:	7962 7220 6d65 746f 2065 6564 6976 6563     by remote device
   bcedc:	002e 7544 6c70 6369 7461 6465 6320 6168     ..Duplicated cha
   bceec:	6172 7463 7265 7369 6974 2063 6163 6e6e     racteristic cann
   bcefc:	746f 6220 2065 6461 6564 2e64 4600 6961     ot be added..Fai
   bcf0c:	656c 2064 6f74 6120 7070 6e65 2064 6f6c     led to append lo
   bcf1c:	6163 206c 6863 7261 6361 6574 6972 7473     cal characterist
   bcf2c:	6369 002e                                   ic..

000bcf30 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bcf38:	71d9 000b 723d 000b 7323 000b 7267 000b     .q..=r..#s..gr..
   bcf48:	71dd 000b                                   .q..

000bcf4c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bcf54:	71d5 000b 724b 000b 71d7 000b 726d 000b     .q..Kr...q..mr..
   bcf64:	71fd 000b                                   .q..

000bcf68 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bcf70:	71d3 000b 7259 000b 7add 000b 7273 000b     .q..Yr...z..sr..
   bcf80:	721d 000b                                   .r..

000bcf84 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bcf90:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000bcfa2 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bcfa2:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000bcfb2 <_ZN8particle7BleUuid9BASE_UUIDE>:
   bcfb2:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000bcfc4 <_ZTVN5spark13EthernetClassE>:
	...
   bcfcc:	858b 000b 8581 000b 8577 000b 856d 000b     ........w...m...
   bcfdc:	8561 000b 8555 000b 8811 000b 8819 000b     a...U...........
   bcfec:	8549 000b 8541 000b 8537 000b 852d 000b     I...A...7...-...
   bcffc:	8849 000b                                   I...

000bd000 <_ZTV7TwoWire>:
	...
   bd008:	85a9 000b 85f3 000b 85cb 000b 85ab 000b     ................
   bd018:	85d3 000b 85db 000b 85e3 000b 85eb 000b     ................

000bd028 <_ZTV9IPAddress>:
	...
   bd030:	86b5 000b 86a5 000b 86a7 000b 7061 0070     ............app.

000bd040 <_ZTVN5spark12NetworkClassE>:
	...
   bd048:	87d1 000b 87db 000b 87e5 000b 87ef 000b     ................
   bd058:	87f9 000b 8805 000b 8811 000b 8819 000b     ................
   bd068:	8821 000b 882d 000b 8835 000b 883f 000b     !...-...5...?...
   bd078:	8849 000b 6977 6972 676e 7200 6365 2076     I...wiring.recv 
   bd088:	7265 6f72 2072 203d 6425 0000               error = %d..

000bd094 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd09c:	8da5 000b 8dc9 000b 92fb 000b 8dd7 000b     ................
   bd0ac:	8da9 000b                                   ....

000bd0b0 <_ZTV9TCPClient>:
	...
   bd0b8:	8e55 000b 8e89 000b 8d21 000b 8d3b 000b     U.......!...;...
   bd0c8:	9191 000b 8d65 000b 9007 000b 8d99 000b     ....e...........
   bd0d8:	9099 000b 8ed9 000b 9035 000b 9245 000b     ........5...E...
   bd0e8:	8fd5 000b 8d9b 000b 8d4d 000b 8ddd 000b     ........M.......
   bd0f8:	8eb9 000b 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
   bd108:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000bd118 <_ZTV11USARTSerial>:
	...
   bd120:	9315 000b 9381 000b 9359 000b 8935 000b     ........Y...5...
   bd130:	9329 000b 9345 000b 9337 000b 9353 000b     )...E...7...S...
   bd140:	9317 000b 931b 000b                         ........

000bd148 <_ZTV9USBSerial>:
	...
   bd150:	93bf 000b 9427 000b 93fd 000b 8935 000b     ....'.......5...
   bd160:	93ef 000b 93c1 000b 93d1 000b 9421 000b     ............!...
   bd170:	93e1 000b 93b9 000b                         ........

000bd178 <_ZTVN5spark9WiFiClassE>:
	...
   bd180:	951f 000b 9515 000b 950b 000b 94c1 000b     ................
   bd190:	94ff 000b 94f3 000b 8811 000b 8819 000b     ................
   bd1a0:	94e7 000b 94df 000b 94d5 000b 94cb 000b     ................
   bd1b0:	8849 000b                                   I...

000bd1b4 <_ZSt7nothrow>:
	...

000bd1b5 <_ZTSSt19_Sp_make_shared_tag>:
   bd1b5:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bd1c5:	6572 5f64 6174 0067 0000                     red_tag....

000bd1d0 <_ZTISt19_Sp_make_shared_tag>:
   bd1d0:	d29c 000b d1b5 000b 6f6e 2074 6e65 756f     ........not enou
   bd1e0:	6867 7320 6170 6563 6620 726f 6620 726f     gh space for for
   bd1f0:	616d 2074 7865 6170 736e 6f69 206e 5028     mat expansion (P
   bd200:	656c 7361 2065 7573 6d62 7469 6620 6c75     lease submit ful
   bd210:	206c 7562 2067 6572 6f70 7472 6120 2074     l bug report at 
   bd220:	7468 7074 3a73 2f2f 6367 2e63 6e67 2e75     https://gcc.gnu.
   bd230:	726f 2f67 7562 7367 292f 0a3a 2020 2020     org/bugs/):.    
   bd240:	3000 3231 3433 3635 3837 0039 6162 6973     .0123456789.basi
   bd250:	5f63 7473 6972 676e 3a3a 4d5f 635f 6572     c_string::_M_cre
   bd260:	7461 0065                                   ate.

000bd264 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bd264:	d2fc 000b d270 000b d320 000b               ....p... ...

000bd270 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bd270:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bd280:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bd290:	0045 0000                                   E...

000bd294 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bd294:	0000 0000 d264 000b 9a75 000b 9a89 000b     ....d...u.......
   bd2a4:	9c1d 000b 9c1d 000b 9af3 000b 9a35 000b     ............5...
   bd2b4:	9adb 000b 9a9d 000b 9a67 000b               ........g...

000bd2c0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bd2c0:	d2fc 000b d2cc 000b d264 000b               ........d...

000bd2cc <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bd2cc:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bd2dc:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bd2ec:	666e 456f 0000 0000                         nfoE....

000bd2f4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bd2f4:	0000 0000 d2c0 000b 9b1d 000b 9b31 000b     ............1...
   bd304:	9c1d 000b 9c1d 000b 9af3 000b 9a35 000b     ............5...
   bd314:	9bf1 000b 9b7d 000b 9b45 000b               ....}...E...

000bd320 <_ZTISt9type_info>:
   bd320:	d29c 000b d328 000b                         ....(...

000bd328 <_ZTSSt9type_info>:
   bd328:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bd338:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bd348:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   bd358:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bd368:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bd378:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bd388:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bd398:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   bd3a8:	6e69 7469 0079 6e61 0000 0000               inity.an....

000bd3b4 <fpi.1>:
   bd3b4:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bd3c4:	0000 0000                                   ....

000bd3c8 <fpinan.0>:
   bd3c8:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000bd3e0 <tinytens>:
   bd3e0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bd3f0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bd400:	6f43 64ac 0628 1168                         Co.d(.h.

000bd408 <_ctype_>:
   bd408:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bd418:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bd428:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bd438:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bd448:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bd458:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bd468:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bd478:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bd488:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bd508:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bd518:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   bd528:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   bd538:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   bd548:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   bd558:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   bd568:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   bd578:	632e 0000                                   .c..

000bd57c <_C_numeric_locale>:
   bd57c:	cf2e 000b cdae 000b 53dc 2003 0043 4f50     .........S. C.PO
   bd58c:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   bd59c:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bd5ac:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bd5bc:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bd5cc:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bd5dc:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   bd5ec:	0000 0000                                   ....

000bd5f0 <__mprec_bigtens>:
   bd5f0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bd600:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bd610:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bd618 <__mprec_tens>:
   bd618:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bd628:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bd638:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bd648:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bd658:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bd668:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bd678:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bd688:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bd698:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bd6a8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bd6b8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bd6c8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bd6d8:	9db4 79d9 7843 44ea                         ...yCx.D

000bd6e0 <p05.0>:
   bd6e0:	0005 0000 0019 0000 007d 0000               ........}...

000bd6ec <link_const_variable_data_end>:
   bd6ec:	000b5a71 	.word	0x000b5a71
   bd6f0:	000b6c41 	.word	0x000b6c41
   bd6f4:	000b851d 	.word	0x000b851d
   bd6f8:	000b8595 	.word	0x000b8595
   bd6fc:	000b87c1 	.word	0x000b87c1
   bd700:	000b8921 	.word	0x000b8921
   bd704:	000b8a5d 	.word	0x000b8a5d
   bd708:	000b8cfd 	.word	0x000b8cfd
   bd70c:	000b9301 	.word	0x000b9301
   bd710:	000b9529 	.word	0x000b9529

000bd714 <link_constructors_end>:
	...
