
/Users/sainihome/Documents/GitHub/loop-tracks/master/target/3.3.0/argon/master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000afd0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000beff0  000beff0  0000eff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bf014  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f8  200350ac  000bf018  000150ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000954c  200352a4  200352a4  000252a4  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000bf210  000bf210  0001f210  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bf238  000bf238  0001f238  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001494fd  00000000  00000000  0001f23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00011ebb  00000000  00000000  00168739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004c339  00000000  00000000  0017a5f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003098  00000000  00000000  001c692d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000d880  00000000  00000000  001c99c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034efe  00000000  00000000  001d7245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00043753  00000000  00000000  0020c143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001568c6  00000000  00000000  0024f896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a7f0  00000000  00000000  003a615c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f008 f86f 	bl	bc114 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f008 f891 	bl	bc164 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	200350ac 	.word	0x200350ac
   b404c:	000bf018 	.word	0x000bf018
   b4050:	200352a4 	.word	0x200352a4
   b4054:	200352a4 	.word	0x200352a4
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f006 ffd5 	bl	bb010 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000befcc 	.word	0x000befcc
   b4080:	000beff0 	.word	0x000beff0

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f002 bde0 	b.w	b6c48 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f002 ff55 	bl	b6f38 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f006 bf75 	b.w	baf80 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f004 bcd7 	b.w	b8a48 <malloc>

000b409a <_Znaj>:
   b409a:	f004 bcd5 	b.w	b8a48 <malloc>

000b409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409e:	f004 bcdb 	b.w	b8a58 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f004 bcd9 	b.w	b8a58 <free>

000b40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a6:	7800      	ldrb	r0, [r0, #0]
   b40a8:	fab0 f080 	clz	r0, r0
   b40ac:	0940      	lsrs	r0, r0, #5
   b40ae:	4770      	bx	lr

000b40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b0:	2301      	movs	r3, #1
   b40b2:	7003      	strb	r3, [r0, #0]
   b40b4:	4770      	bx	lr
	...

000b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40b8:	b510      	push	{r4, lr}
   b40ba:	4b03      	ldr	r3, [pc, #12]	; (b40c8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev+0x10>)
   b40bc:	6003      	str	r3, [r0, #0]
   b40be:	4604      	mov	r4, r0
   b40c0:	f003 fdb8 	bl	b7c34 <_ZN10JsonParserD1Ev>
   b40c4:	4620      	mov	r0, r4
   b40c6:	bd10      	pop	{r4, pc}
   b40c8:	000be564 	.word	0x000be564

000b40cc <_ZN16JsonParserStaticILj10000ELj1000EED0Ev>:
   b40cc:	b510      	push	{r4, lr}
   b40ce:	4604      	mov	r4, r0
   b40d0:	f7ff fff2 	bl	b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
   b40d4:	4620      	mov	r0, r4
   b40d6:	f246 51bc 	movw	r1, #26044	; 0x65bc
   b40da:	f7ff ffe2 	bl	b40a2 <_ZdlPvj>
   b40de:	4620      	mov	r0, r4
   b40e0:	bd10      	pop	{r4, pc}
	...

000b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>:

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
   b40e4:	b508      	push	{r3, lr}
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b40e6:	4603      	mov	r3, r0
   b40e8:	b150      	cbz	r0, b4100 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x1c>
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      _GLIBCXX_NODISCARD _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {
	if (__n > this->_M_max_size())
   b40ea:	4a06      	ldr	r2, [pc, #24]	; (b4104 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x20>)
   b40ec:	4290      	cmp	r0, r2
   b40ee:	d901      	bls.n	b40f4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b40f0:	f007 f828 	bl	bb144 <_ZSt17__throw_bad_allocv>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b40f4:	200c      	movs	r0, #12
   b40f6:	4358      	muls	r0, r3
      }
   b40f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b40fc:	f7ff bfcb 	b.w	b4096 <_Znwj>
   b4100:	bd08      	pop	{r3, pc}
   b4102:	bf00      	nop
   b4104:	0aaaaaaa 	.word	0x0aaaaaaa

000b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>:

      pointer
      _M_local_data()
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b4108:	f100 0308 	add.w	r3, r0, #8
#if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
   b410c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b410e:	4604      	mov	r4, r0
	: allocator_type(__a), _M_p(__dat) { }
   b4110:	6003      	str	r3, [r0, #0]
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b4112:	460d      	mov	r5, r1
   b4114:	b1d9      	cbz	r1, b414e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x46>
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   b4116:	4608      	mov	r0, r1
   b4118:	f008 f86c 	bl	bc1f4 <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
   b411c:	280f      	cmp	r0, #15
   b411e:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b4122:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b4124:	d907      	bls.n	b4136 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x2e>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   b4126:	2200      	movs	r2, #0
   b4128:	a901      	add	r1, sp, #4
   b412a:	4620      	mov	r0, r4
   b412c:	f007 f820 	bl	bb170 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b4130:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4132:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4134:	60a3      	str	r3, [r4, #8]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b4136:	4632      	mov	r2, r6
   b4138:	4629      	mov	r1, r5
   b413a:	6820      	ldr	r0, [r4, #0]
   b413c:	f007 f853 	bl	bb1e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   b4140:	9b01      	ldr	r3, [sp, #4]
      { __c1 = __c2; }
   b4142:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4144:	6063      	str	r3, [r4, #4]
   b4146:	2100      	movs	r1, #0
   b4148:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b414a:	b002      	add	sp, #8
   b414c:	bd70      	pop	{r4, r5, r6, pc}
	  std::__throw_logic_error(__N("basic_string::"
   b414e:	4801      	ldr	r0, [pc, #4]	; (b4154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x4c>)
   b4150:	f006 fffb 	bl	bb14a <_ZSt19__throw_logic_errorPKc>
   b4154:	000be274 	.word	0x000be274

000b4158 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b4158:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b415a:	4603      	mov	r3, r0
   b415c:	b150      	cbz	r0, b4174 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0+0x1c>
	if (__n > this->_M_max_size())
   b415e:	4a06      	ldr	r2, [pc, #24]	; (b4178 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0+0x20>)
   b4160:	4290      	cmp	r0, r2
   b4162:	d901      	bls.n	b4168 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b4164:	f006 ffee 	bl	bb144 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4168:	206c      	movs	r0, #108	; 0x6c
   b416a:	4358      	muls	r0, r3
      }
   b416c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4170:	f7ff bf91 	b.w	b4096 <_Znwj>
   b4174:	bd08      	pop	{r3, pc}
   b4176:	bf00      	nop
   b4178:	012f684b 	.word	0x012f684b

000b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b417c:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b417e:	4603      	mov	r3, r0
   b4180:	b150      	cbz	r0, b4198 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x1c>
	if (__n > this->_M_max_size())
   b4182:	4a06      	ldr	r2, [pc, #24]	; (b419c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x20>)
   b4184:	4290      	cmp	r0, r2
   b4186:	d901      	bls.n	b418c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b4188:	f006 ffdc 	bl	bb144 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b418c:	2018      	movs	r0, #24
   b418e:	4358      	muls	r0, r3
      }
   b4190:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4194:	f7ff bf7f 	b.w	b4096 <_Znwj>
   b4198:	bd08      	pop	{r3, pc}
   b419a:	bf00      	nop
   b419c:	05555555 	.word	0x05555555

000b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b41a0:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b41a2:	b148      	cbz	r0, b41b8 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b41a4:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   b41a8:	d301      	bcc.n	b41ae <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b41aa:	f006 ffcb 	bl	bb144 <_ZSt17__throw_bad_allocv>
      }
   b41ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b41b2:	0080      	lsls	r0, r0, #2
   b41b4:	f7ff bf6f 	b.w	b4096 <_Znwj>
   b41b8:	bd08      	pop	{r3, pc}

000b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b41ba:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b41bc:	b148      	cbz	r0, b41d2 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b41be:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
   b41c2:	d301      	bcc.n	b41c8 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b41c4:	f006 ffbe 	bl	bb144 <_ZSt17__throw_bad_allocv>
      }
   b41c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b41cc:	00c0      	lsls	r0, r0, #3
   b41ce:	f7ff bf62 	b.w	b4096 <_Znwj>
   b41d2:	bd08      	pop	{r3, pc}

000b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>:
      basic_string(const basic_string& __str)
   b41d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b41d6:	f100 0308 	add.w	r3, r0, #8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b41da:	6003      	str	r3, [r0, #0]

      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      size_type
      length() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
   b41dc:	e9d1 5300 	ldrd	r5, r3, [r1]
      basic_string(const basic_string& __str)
   b41e0:	4604      	mov	r4, r0
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b41e2:	18ee      	adds	r6, r5, r3
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   b41e4:	b91d      	cbnz	r5, b41ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
   b41e6:	b116      	cbz	r6, b41ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
	  std::__throw_logic_error(__N("basic_string::"
   b41e8:	480c      	ldr	r0, [pc, #48]	; (b421c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x48>)
   b41ea:	f006 ffae 	bl	bb14a <_ZSt19__throw_logic_errorPKc>
	if (__dnew > size_type(_S_local_capacity))
   b41ee:	2b0f      	cmp	r3, #15
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b41f0:	9301      	str	r3, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b41f2:	d907      	bls.n	b4204 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x30>
	    _M_data(_M_create(__dnew, size_type(0)));
   b41f4:	2200      	movs	r2, #0
   b41f6:	a901      	add	r1, sp, #4
   b41f8:	4620      	mov	r0, r4
   b41fa:	f006 ffb9 	bl	bb170 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b41fe:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4200:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4202:	60a3      	str	r3, [r4, #8]
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b4204:	4632      	mov	r2, r6
   b4206:	4629      	mov	r1, r5
   b4208:	6820      	ldr	r0, [r4, #0]
   b420a:	f006 ffe7 	bl	bb1dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	_M_set_length(__dnew);
   b420e:	9b01      	ldr	r3, [sp, #4]
   b4210:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4212:	6063      	str	r3, [r4, #4]
   b4214:	2100      	movs	r1, #0
   b4216:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b4218:	b002      	add	sp, #8
   b421a:	bd70      	pop	{r4, r5, r6, pc}
   b421c:	000be274 	.word	0x000be274

000b4220 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4220:	6803      	ldr	r3, [r0, #0]
   b4222:	b2c9      	uxtb	r1, r1
   b4224:	689b      	ldr	r3, [r3, #8]
   b4226:	4718      	bx	r3

000b4228 <_ZN5Print5writeEPKc.isra.0>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4228:	b513      	push	{r0, r1, r4, lr}
   b422a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
   b422c:	b161      	cbz	r1, b4248 <_ZN5Print5writeEPKc.isra.0+0x20>
      return write((const uint8_t *)str, strlen(str));
   b422e:	4608      	mov	r0, r1
   b4230:	9101      	str	r1, [sp, #4]
   b4232:	f007 ffdf 	bl	bc1f4 <strlen>
   b4236:	6823      	ldr	r3, [r4, #0]
   b4238:	9901      	ldr	r1, [sp, #4]
   b423a:	68db      	ldr	r3, [r3, #12]
   b423c:	4602      	mov	r2, r0
   b423e:	4620      	mov	r0, r4
    }
   b4240:	b002      	add	sp, #8
   b4242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4246:	4718      	bx	r3
    }
   b4248:	b002      	add	sp, #8
   b424a:	bd10      	pop	{r4, pc}

000b424c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>:
  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
   b424c:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b424e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4250:	4604      	mov	r4, r0
   b4252:	460d      	mov	r5, r1
      if (&__x != this)
   b4254:	d025      	beq.n	b42a2 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x56>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4256:	e9d1 7100 	ldrd	r7, r1, [r1]
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_end_of_storage
			 - this->_M_impl._M_start); }
   b425a:	6800      	ldr	r0, [r0, #0]
   b425c:	68a3      	ldr	r3, [r4, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b425e:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b4260:	1a1b      	subs	r3, r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
   b4262:	429e      	cmp	r6, r3
   b4264:	d91e      	bls.n	b42a4 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x58>
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
   b4266:	10f0      	asrs	r0, r6, #3
   b4268:	f7ff ffa7 	bl	b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
   b426c:	2300      	movs	r3, #0
   b426e:	4605      	mov	r5, r0
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
   b4270:	429e      	cmp	r6, r3
   b4272:	d00a      	beq.n	b428a <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x3e>
   */
#if __cplusplus >= 201103L
  template<typename _Tp, typename... _Args>
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4274:	18ea      	adds	r2, r5, r3
   b4276:	bf1c      	itt	ne
   b4278:	18f9      	addne	r1, r7, r3
   b427a:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b427e:	f103 0308 	add.w	r3, r3, #8
   b4282:	bf18      	it	ne
   b4284:	e9c2 0100 	strdne	r0, r1, [r2]
   b4288:	e7f2      	b.n	b4270 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x24>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b428a:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b428c:	b118      	cbz	r0, b4296 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x4a>
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
   b428e:	68a1      	ldr	r1, [r4, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b4290:	1a09      	subs	r1, r1, r0
   b4292:	f7ff ff06 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b4296:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4298:	4435      	add	r5, r6
   b429a:	60a5      	str	r5, [r4, #8]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b429c:	6823      	ldr	r3, [r4, #0]
   b429e:	4433      	add	r3, r6
   b42a0:	6063      	str	r3, [r4, #4]
	}
      return *this;
    }
   b42a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b42a4:	6862      	ldr	r2, [r4, #4]
   b42a6:	1a12      	subs	r2, r2, r0
	  else if (size() >= __xlen)
   b42a8:	4296      	cmp	r6, r2
   b42aa:	d806      	bhi.n	b42ba <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x6e>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   b42ac:	42b9      	cmp	r1, r7
   b42ae:	d0f5      	beq.n	b429c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b42b0:	4632      	mov	r2, r6
   b42b2:	4639      	mov	r1, r7
   b42b4:	f007 ff3c 	bl	bc130 <memmove>

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b42b8:	e7f0      	b.n	b429c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	  if (_Num)
   b42ba:	b112      	cbz	r2, b42c2 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x76>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b42bc:	4639      	mov	r1, r7
   b42be:	f007 ff37 	bl	bc130 <memmove>
   b42c2:	e9d4 2700 	ldrd	r2, r7, [r4]
   b42c6:	1abb      	subs	r3, r7, r2
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b42c8:	682a      	ldr	r2, [r5, #0]
   b42ca:	686d      	ldr	r5, [r5, #4]
   b42cc:	441a      	add	r2, r3
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   b42ce:	1aad      	subs	r5, r5, r2
					  __x._M_impl._M_finish,
   b42d0:	2300      	movs	r3, #0
	      for (; __first != __last; ++__first, (void)++__cur)
   b42d2:	429d      	cmp	r5, r3
   b42d4:	d0e2      	beq.n	b429c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
   b42d6:	eb17 0c03 	adds.w	ip, r7, r3
   b42da:	bf1c      	itt	ne
   b42dc:	18d1      	addne	r1, r2, r3
   b42de:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b42e2:	f103 0308 	add.w	r3, r3, #8
   b42e6:	bf18      	it	ne
   b42e8:	e9cc 0100 	strdne	r0, r1, [ip]
   b42ec:	e7f1      	b.n	b42d2 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x86>
	...

000b42f0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>:
      if (&__x != this)
   b42f0:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b42f2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b42f6:	4604      	mov	r4, r0
   b42f8:	468a      	mov	sl, r1
      if (&__x != this)
   b42fa:	d036      	beq.n	b436a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7a>
   b42fc:	e9d1 5b00 	ldrd	r5, fp, [r1]
			 - this->_M_impl._M_start); }
   b4300:	f8d0 9000 	ldr.w	r9, [r0]
   b4304:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4306:	4a39      	ldr	r2, [pc, #228]	; (b43ec <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xfc>)
   b4308:	ebab 0705 	sub.w	r7, fp, r5
			 - this->_M_impl._M_start); }
   b430c:	eba3 0309 	sub.w	r3, r3, r9
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4310:	ea4f 08e7 	mov.w	r8, r7, asr #3
	  if (__xlen > capacity())
   b4314:	42bb      	cmp	r3, r7
   b4316:	fb02 f808 	mul.w	r8, r2, r8
   b431a:	d228      	bcs.n	b436e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7e>
	  pointer __result = this->_M_allocate(__n);
   b431c:	4640      	mov	r0, r8
   b431e:	f7ff ff2d 	bl	b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
   b4322:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   b4324:	4680      	mov	r8, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b4326:	45ab      	cmp	fp, r5
   b4328:	d00a      	beq.n	b4340 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x50>
   b432a:	f1b8 0f00 	cmp.w	r8, #0
   b432e:	d003      	beq.n	b4338 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x48>
   b4330:	4629      	mov	r1, r5
   b4332:	4640      	mov	r0, r8
   b4334:	f7ff ff4e 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b4338:	f108 0818 	add.w	r8, r8, #24
   b433c:	3518      	adds	r5, #24
   b433e:	e7f2      	b.n	b4326 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x36>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4340:	e9d4 5800 	ldrd	r5, r8, [r4]
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   b4344:	45a8      	cmp	r8, r5
   b4346:	d004      	beq.n	b4352 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x62>
      { _M_dispose(); }
   b4348:	4628      	mov	r0, r5
   b434a:	f006 ff33 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b434e:	3518      	adds	r5, #24
   b4350:	e7f8      	b.n	b4344 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x54>
	      _M_deallocate(this->_M_impl._M_start,
   b4352:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4354:	b118      	cbz	r0, b435e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x6e>
			    - this->_M_impl._M_start);
   b4356:	68a1      	ldr	r1, [r4, #8]
   b4358:	1a09      	subs	r1, r1, r0
   b435a:	f7ff fea2 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b435e:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4360:	443e      	add	r6, r7
   b4362:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4364:	6823      	ldr	r3, [r4, #0]
   b4366:	443b      	add	r3, r7
   b4368:	6063      	str	r3, [r4, #4]
    }
   b436a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b436e:	6846      	ldr	r6, [r0, #4]
   b4370:	eba6 0609 	sub.w	r6, r6, r9
	  else if (size() >= __xlen)
   b4374:	42b7      	cmp	r7, r6
   b4376:	d819      	bhi.n	b43ac <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xbc>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4378:	4646      	mov	r6, r8
   b437a:	46ca      	mov	sl, r9
   b437c:	2e00      	cmp	r6, #0
   b437e:	dd08      	ble.n	b4392 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xa2>
		  }
	      }
	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
	  }
#endif
	this->_M_assign(__str);
   b4380:	4629      	mov	r1, r5
   b4382:	4650      	mov	r0, sl
   b4384:	f006 ff34 	bl	bb1f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b4388:	3518      	adds	r5, #24
	      ++__result;
   b438a:	f10a 0a18 	add.w	sl, sl, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b438e:	3e01      	subs	r6, #1
   b4390:	e7f4      	b.n	b437c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x8c>
   b4392:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
   b4396:	2518      	movs	r5, #24
      : _M_current(__i) { }
   b4398:	6866      	ldr	r6, [r4, #4]
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b439a:	fb05 9508 	mla	r5, r5, r8, r9
	  for (; __first != __last; ++__first)
   b439e:	42ae      	cmp	r6, r5
   b43a0:	d0e0      	beq.n	b4364 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
      { _M_dispose(); }
   b43a2:	4628      	mov	r0, r5
   b43a4:	f006 ff06 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b43a8:	3518      	adds	r5, #24
      {
	++_M_current;
	return *this;
   b43aa:	e7f8      	b.n	b439e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xae>
   b43ac:	10f6      	asrs	r6, r6, #3
   b43ae:	4356      	muls	r6, r2
   b43b0:	2e00      	cmp	r6, #0
   b43b2:	dd08      	ble.n	b43c6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xd6>
	this->_M_assign(__str);
   b43b4:	4629      	mov	r1, r5
   b43b6:	4648      	mov	r0, r9
   b43b8:	f006 ff1a 	bl	bb1f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b43bc:	3518      	adds	r5, #24
	      ++__result;
   b43be:	f109 0918 	add.w	r9, r9, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b43c2:	3e01      	subs	r6, #1
   b43c4:	e7f4      	b.n	b43b0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xc0>
   b43c6:	e9d4 5600 	ldrd	r5, r6, [r4]
   b43ca:	1b71      	subs	r1, r6, r5
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b43cc:	f8da 5000 	ldr.w	r5, [sl]
					  __x._M_impl._M_finish,
   b43d0:	f8da 8004 	ldr.w	r8, [sl, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b43d4:	440d      	add	r5, r1
   b43d6:	45a8      	cmp	r8, r5
   b43d8:	d0c4      	beq.n	b4364 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b43da:	b11e      	cbz	r6, b43e4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xf4>
   b43dc:	4629      	mov	r1, r5
   b43de:	4630      	mov	r0, r6
   b43e0:	f7ff fef8 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b43e4:	3518      	adds	r5, #24
   b43e6:	3618      	adds	r6, #24
   b43e8:	e7f5      	b.n	b43d6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xe6>
   b43ea:	bf00      	nop
   b43ec:	aaaaaaab 	.word	0xaaaaaaab

000b43f0 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43f0:	b40e      	push	{r1, r2, r3}
   b43f2:	b503      	push	{r0, r1, lr}
   b43f4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b43f6:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43f8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b43fc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b43fe:	f005 ff8a 	bl	ba316 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4402:	b002      	add	sp, #8
   b4404:	f85d eb04 	ldr.w	lr, [sp], #4
   b4408:	b003      	add	sp, #12
   b440a:	4770      	bx	lr

000b440c <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b440c:	b40e      	push	{r1, r2, r3}
   b440e:	b503      	push	{r0, r1, lr}
   b4410:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b4412:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4414:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4418:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b441a:	f005 ff7c 	bl	ba316 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b441e:	b002      	add	sp, #8
   b4420:	f85d eb04 	ldr.w	lr, [sp], #4
   b4424:	b003      	add	sp, #12
   b4426:	4770      	bx	lr

000b4428 <_Z16randomizeAddressv>:
    Serial.println();
  }
}

//clears up conflicts with multiple i2c slaves having the same address
void randomizeAddress(){
   b4428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return *(this->_M_impl._M_start + __n);
   b442c:	f8df 82b4 	ldr.w	r8, [pc, #692]	; b46e4 <_Z16randomizeAddressv+0x2bc>
  while(slaveCount != cities[cityIndex].slaveCountExpected){
   b4430:	4da2      	ldr	r5, [pc, #648]	; (b46bc <_Z16randomizeAddressv+0x294>)
void randomizeAddress(){
   b4432:	b08d      	sub	sp, #52	; 0x34
  while(slaveCount != cities[cityIndex].slaveCountExpected){
   b4434:	4ba2      	ldr	r3, [pc, #648]	; (b46c0 <_Z16randomizeAddressv+0x298>)
   b4436:	681a      	ldr	r2, [r3, #0]
   b4438:	f8d8 3000 	ldr.w	r3, [r8]
   b443c:	2128      	movs	r1, #40	; 0x28
   b443e:	fb01 3302 	mla	r3, r1, r2, r3
   b4442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b4444:	682b      	ldr	r3, [r5, #0]
   b4446:	429a      	cmp	r2, r3
   b4448:	f000 80ff 	beq.w	b464a <_Z16randomizeAddressv+0x222>
    slaveCount = 0;
   b444c:	2300      	movs	r3, #0

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b444e:	f8df 9298 	ldr.w	r9, [pc, #664]	; b46e8 <_Z16randomizeAddressv+0x2c0>
   b4452:	f8df a298 	ldr.w	sl, [pc, #664]	; b46ec <_Z16randomizeAddressv+0x2c4>
      if(Wire.available() > 0){
        Serial.println("transmission recieved from: " + String(i));

        slaveCount++;

        String inputBuffer = "";
   b4456:	4f9b      	ldr	r7, [pc, #620]	; (b46c4 <_Z16randomizeAddressv+0x29c>)
    slaveCount = 0;
   b4458:	602b      	str	r3, [r5, #0]
    for(int i = 8; i <= 119; i++){
   b445a:	2408      	movs	r4, #8
      Serial.println("\nrequest code 1, address: " + String(i));
   b445c:	f006 fcbe 	bl	baddc <_Z16_fetch_usbserialv>
   b4460:	4649      	mov	r1, r9
   b4462:	4606      	mov	r6, r0
   b4464:	a808      	add	r0, sp, #32
   b4466:	f005 ffd8 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
   b446a:	220a      	movs	r2, #10
   b446c:	4621      	mov	r1, r4
   b446e:	a804      	add	r0, sp, #16
   b4470:	f006 f82d 	bl	ba4ce <_ZN6StringC1Eih>
   b4474:	a904      	add	r1, sp, #16
   b4476:	a808      	add	r0, sp, #32
   b4478:	f006 f864 	bl	ba544 <_ZplRK15StringSumHelperRK6String>
   b447c:	6801      	ldr	r1, [r0, #0]
   b447e:	4630      	mov	r0, r6
   b4480:	f005 ff21 	bl	ba2c6 <_ZN5Print7printlnEPKc>
   b4484:	a804      	add	r0, sp, #16
   b4486:	f005 ff7d 	bl	ba384 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b448a:	a808      	add	r0, sp, #32
   b448c:	f005 ff7a 	bl	ba384 <_ZN6StringD1Ev>
      Wire.beginTransmission(i);
   b4490:	f006 fdf2 	bl	bb078 <_Z19__fetch_global_Wirev>
   b4494:	4621      	mov	r1, r4
   b4496:	f005 fd89 	bl	b9fac <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('1');
   b449a:	f006 fded 	bl	bb078 <_Z19__fetch_global_Wirev>
   b449e:	2131      	movs	r1, #49	; 0x31
   b44a0:	f7ff febe 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b44a4:	fa5f fb84 	uxtb.w	fp, r4
   b44a8:	f006 fde6 	bl	bb078 <_Z19__fetch_global_Wirev>
   b44ac:	f005 fd85 	bl	b9fba <_ZN7TwoWire15endTransmissionEv>
      Wire.requestFrom(i, 24);
   b44b0:	f006 fde2 	bl	bb078 <_Z19__fetch_global_Wirev>
   b44b4:	2218      	movs	r2, #24
   b44b6:	4659      	mov	r1, fp
   b44b8:	f005 fd71 	bl	b9f9e <_ZN7TwoWire11requestFromEhj>
      if(Wire.available() > 0){
   b44bc:	f006 fddc 	bl	bb078 <_Z19__fetch_global_Wirev>
   b44c0:	6803      	ldr	r3, [r0, #0]
   b44c2:	691b      	ldr	r3, [r3, #16]
   b44c4:	4798      	blx	r3
   b44c6:	2800      	cmp	r0, #0
   b44c8:	f340 80ba 	ble.w	b4640 <_Z16randomizeAddressv+0x218>
        Serial.println("transmission recieved from: " + String(i));
   b44cc:	f006 fc86 	bl	baddc <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b44d0:	4651      	mov	r1, sl
   b44d2:	4606      	mov	r6, r0
   b44d4:	a808      	add	r0, sp, #32
   b44d6:	f005 ffa0 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
   b44da:	220a      	movs	r2, #10
   b44dc:	4621      	mov	r1, r4
   b44de:	a804      	add	r0, sp, #16
   b44e0:	f005 fff5 	bl	ba4ce <_ZN6StringC1Eih>
   b44e4:	a904      	add	r1, sp, #16
   b44e6:	a808      	add	r0, sp, #32
   b44e8:	f006 f82c 	bl	ba544 <_ZplRK15StringSumHelperRK6String>
   b44ec:	6801      	ldr	r1, [r0, #0]
   b44ee:	4630      	mov	r0, r6
   b44f0:	f005 fee9 	bl	ba2c6 <_ZN5Print7printlnEPKc>
   b44f4:	a804      	add	r0, sp, #16
   b44f6:	f005 ff45 	bl	ba384 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b44fa:	a808      	add	r0, sp, #32
   b44fc:	f005 ff42 	bl	ba384 <_ZN6StringD1Ev>
        slaveCount++;
   b4500:	682b      	ldr	r3, [r5, #0]
        String inputBuffer = "";
   b4502:	4639      	mov	r1, r7
        slaveCount++;
   b4504:	3301      	adds	r3, #1
        String inputBuffer = "";
   b4506:	4668      	mov	r0, sp
        slaveCount++;
   b4508:	602b      	str	r3, [r5, #0]
        String inputBuffer = "";
   b450a:	f005 ff86 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
   b450e:	2618      	movs	r6, #24
        char c;
        for(int j = 0; j < 24; j++){
          c = Wire.read();
   b4510:	f006 fdb2 	bl	bb078 <_Z19__fetch_global_Wirev>
   b4514:	6803      	ldr	r3, [r0, #0]
   b4516:	695b      	ldr	r3, [r3, #20]
   b4518:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b451a:	b2c1      	uxtb	r1, r0
   b451c:	4668      	mov	r0, sp
   b451e:	f006 f804 	bl	ba52a <_ZN6String6concatEc>
        for(int j = 0; j < 24; j++){
   b4522:	3e01      	subs	r6, #1
   b4524:	d1f4      	bne.n	b4510 <_Z16randomizeAddressv+0xe8>
          inputBuffer += c;
        }
        Wire.beginTransmission(i);
   b4526:	f006 fda7 	bl	bb078 <_Z19__fetch_global_Wirev>
   b452a:	4621      	mov	r1, r4
   b452c:	f005 fd3e 	bl	b9fac <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(inputBuffer);
   b4530:	f006 fda2 	bl	bb078 <_Z19__fetch_global_Wirev>
   b4534:	9900      	ldr	r1, [sp, #0]
   b4536:	f7ff fe77 	bl	b4228 <_ZN5Print5writeEPKc.isra.0>
        Serial.println("device id: " + inputBuffer);
   b453a:	f006 fc4f 	bl	baddc <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b453e:	4962      	ldr	r1, [pc, #392]	; (b46c8 <_Z16randomizeAddressv+0x2a0>)
   b4540:	4606      	mov	r6, r0
   b4542:	a808      	add	r0, sp, #32
   b4544:	f005 ff69 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
   b4548:	4669      	mov	r1, sp
   b454a:	a808      	add	r0, sp, #32
   b454c:	f005 fffa 	bl	ba544 <_ZplRK15StringSumHelperRK6String>
   b4550:	6801      	ldr	r1, [r0, #0]
   b4552:	4630      	mov	r0, r6
   b4554:	f005 feb7 	bl	ba2c6 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4558:	a808      	add	r0, sp, #32
   b455a:	f005 ff13 	bl	ba384 <_ZN6StringD1Ev>
        Wire.endTransmission();
   b455e:	f006 fd8b 	bl	bb078 <_Z19__fetch_global_Wirev>
   b4562:	f005 fd2a 	bl	b9fba <_ZN7TwoWire15endTransmissionEv>
        Serial.println("transmission sent to: " + String(i));
   b4566:	f006 fc39 	bl	baddc <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b456a:	4958      	ldr	r1, [pc, #352]	; (b46cc <_Z16randomizeAddressv+0x2a4>)
   b456c:	4606      	mov	r6, r0
   b456e:	a808      	add	r0, sp, #32
   b4570:	f005 ff53 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
   b4574:	220a      	movs	r2, #10
   b4576:	4621      	mov	r1, r4
   b4578:	a804      	add	r0, sp, #16
   b457a:	f005 ffa8 	bl	ba4ce <_ZN6StringC1Eih>
   b457e:	a904      	add	r1, sp, #16
   b4580:	a808      	add	r0, sp, #32
   b4582:	f005 ffdf 	bl	ba544 <_ZplRK15StringSumHelperRK6String>
   b4586:	6801      	ldr	r1, [r0, #0]
   b4588:	4630      	mov	r0, r6
   b458a:	f005 fe9c 	bl	ba2c6 <_ZN5Print7printlnEPKc>
   b458e:	a804      	add	r0, sp, #16
   b4590:	f005 fef8 	bl	ba384 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4594:	a808      	add	r0, sp, #32
   b4596:	f005 fef5 	bl	ba384 <_ZN6StringD1Ev>

        Wire.beginTransmission(i);
   b459a:	f006 fd6d 	bl	bb078 <_Z19__fetch_global_Wirev>
   b459e:	4621      	mov	r1, r4
   b45a0:	f005 fd04 	bl	b9fac <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('2');
   b45a4:	f006 fd68 	bl	bb078 <_Z19__fetch_global_Wirev>
   b45a8:	2132      	movs	r1, #50	; 0x32
   b45aa:	f7ff fe39 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b45ae:	f006 fd63 	bl	bb078 <_Z19__fetch_global_Wirev>
   b45b2:	f005 fd02 	bl	b9fba <_ZN7TwoWire15endTransmissionEv>

        Serial.println("request code 2, address: " + String(i));
   b45b6:	f006 fc11 	bl	baddc <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b45ba:	4945      	ldr	r1, [pc, #276]	; (b46d0 <_Z16randomizeAddressv+0x2a8>)
   b45bc:	4606      	mov	r6, r0
   b45be:	a808      	add	r0, sp, #32
   b45c0:	f005 ff2b 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
   b45c4:	220a      	movs	r2, #10
   b45c6:	4621      	mov	r1, r4
   b45c8:	a804      	add	r0, sp, #16
   b45ca:	f005 ff80 	bl	ba4ce <_ZN6StringC1Eih>
   b45ce:	a904      	add	r1, sp, #16
   b45d0:	a808      	add	r0, sp, #32
   b45d2:	f005 ffb7 	bl	ba544 <_ZplRK15StringSumHelperRK6String>
   b45d6:	6801      	ldr	r1, [r0, #0]
   b45d8:	4630      	mov	r0, r6
   b45da:	f005 fe74 	bl	ba2c6 <_ZN5Print7printlnEPKc>
   b45de:	a804      	add	r0, sp, #16
   b45e0:	f005 fed0 	bl	ba384 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b45e4:	a808      	add	r0, sp, #32
   b45e6:	f005 fecd 	bl	ba384 <_ZN6StringD1Ev>
        Wire.requestFrom(i, 4);
   b45ea:	f006 fd45 	bl	bb078 <_Z19__fetch_global_Wirev>
   b45ee:	2204      	movs	r2, #4
   b45f0:	4659      	mov	r1, fp
   b45f2:	f005 fcd4 	bl	b9f9e <_ZN7TwoWire11requestFromEhj>
        inputBuffer = "";
   b45f6:	4639      	mov	r1, r7
   b45f8:	4668      	mov	r0, sp
   b45fa:	f005 ff56 	bl	ba4aa <_ZN6StringaSEPKc>
   b45fe:	2604      	movs	r6, #4
        for(int j = 0; j < 4; j++){
          inputBuffer += (char)Wire.read();
   b4600:	f006 fd3a 	bl	bb078 <_Z19__fetch_global_Wirev>
   b4604:	6803      	ldr	r3, [r0, #0]
   b4606:	695b      	ldr	r3, [r3, #20]
   b4608:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b460a:	b2c1      	uxtb	r1, r0
   b460c:	4668      	mov	r0, sp
   b460e:	f005 ff8c 	bl	ba52a <_ZN6String6concatEc>
        for(int j = 0; j < 4; j++){
   b4612:	3e01      	subs	r6, #1
   b4614:	d1f4      	bne.n	b4600 <_Z16randomizeAddressv+0x1d8>
        }
        
        Serial.println("conflict verification: " + inputBuffer);
   b4616:	f006 fbe1 	bl	baddc <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b461a:	492e      	ldr	r1, [pc, #184]	; (b46d4 <_Z16randomizeAddressv+0x2ac>)
   b461c:	4606      	mov	r6, r0
   b461e:	a808      	add	r0, sp, #32
   b4620:	f005 fefb 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
   b4624:	4669      	mov	r1, sp
   b4626:	a808      	add	r0, sp, #32
   b4628:	f005 ff8c 	bl	ba544 <_ZplRK15StringSumHelperRK6String>
   b462c:	6801      	ldr	r1, [r0, #0]
   b462e:	4630      	mov	r0, r6
   b4630:	f005 fe49 	bl	ba2c6 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4634:	a808      	add	r0, sp, #32
   b4636:	f005 fea5 	bl	ba384 <_ZN6StringD1Ev>
        String inputBuffer = "";
   b463a:	4668      	mov	r0, sp
   b463c:	f005 fea2 	bl	ba384 <_ZN6StringD1Ev>
    for(int i = 8; i <= 119; i++){
   b4640:	3401      	adds	r4, #1
   b4642:	2c78      	cmp	r4, #120	; 0x78
   b4644:	f47f af0a 	bne.w	b445c <_Z16randomizeAddressv+0x34>
   b4648:	e6f4      	b.n	b4434 <_Z16randomizeAddressv+0xc>
      }
    }
  }

  Serial.println("\nConnected to: ");
   b464a:	f006 fbc7 	bl	baddc <_Z16_fetch_usbserialv>
   b464e:	4922      	ldr	r1, [pc, #136]	; (b46d8 <_Z16randomizeAddressv+0x2b0>)
    Wire.endTransmission();

    Wire.requestFrom(i, 24);
    if(Wire.available() > 0){
      Serial.print(i);
      Serial.print(", ");
   b4650:	4e22      	ldr	r6, [pc, #136]	; (b46dc <_Z16randomizeAddressv+0x2b4>)
   b4652:	4f23      	ldr	r7, [pc, #140]	; (b46e0 <_Z16randomizeAddressv+0x2b8>)
  Serial.println("\nConnected to: ");
   b4654:	f005 fe37 	bl	ba2c6 <_ZN5Print7printlnEPKc>
  for(int i = 8; i<= 119; i++){
   b4658:	2408      	movs	r4, #8
  int count = 0;
   b465a:	2500      	movs	r5, #0
    Wire.beginTransmission(i);
   b465c:	f006 fd0c 	bl	bb078 <_Z19__fetch_global_Wirev>
   b4660:	4621      	mov	r1, r4
   b4662:	f005 fca3 	bl	b9fac <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('1');
   b4666:	f006 fd07 	bl	bb078 <_Z19__fetch_global_Wirev>
   b466a:	2131      	movs	r1, #49	; 0x31
   b466c:	f7ff fdd8 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b4670:	f006 fd02 	bl	bb078 <_Z19__fetch_global_Wirev>
   b4674:	f005 fca1 	bl	b9fba <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(i, 24);
   b4678:	f006 fcfe 	bl	bb078 <_Z19__fetch_global_Wirev>
   b467c:	2218      	movs	r2, #24
   b467e:	b2e1      	uxtb	r1, r4
   b4680:	f005 fc8d 	bl	b9f9e <_ZN7TwoWire11requestFromEhj>
    if(Wire.available() > 0){
   b4684:	f006 fcf8 	bl	bb078 <_Z19__fetch_global_Wirev>
   b4688:	6803      	ldr	r3, [r0, #0]
   b468a:	691b      	ldr	r3, [r3, #16]
   b468c:	4798      	blx	r3
   b468e:	2800      	cmp	r0, #0
   b4690:	dd0e      	ble.n	b46b0 <_Z16randomizeAddressv+0x288>
      Serial.print(i);
   b4692:	f006 fba3 	bl	baddc <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4696:	220a      	movs	r2, #10
   b4698:	4621      	mov	r1, r4
   b469a:	f005 fe1e 	bl	ba2da <_ZN5Print11printNumberEmh>
      Serial.print(", ");
   b469e:	f006 fb9d 	bl	baddc <_Z16_fetch_usbserialv>
   b46a2:	4631      	mov	r1, r6
   b46a4:	f005 fdfc 	bl	ba2a0 <_ZN5Print5printEPKc>

      addressArr[count++] = i;
   b46a8:	683b      	ldr	r3, [r7, #0]
   b46aa:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
   b46ae:	3501      	adds	r5, #1
  for(int i = 8; i<= 119; i++){
   b46b0:	3401      	adds	r4, #1
   b46b2:	2c78      	cmp	r4, #120	; 0x78
   b46b4:	d1d2      	bne.n	b465c <_Z16randomizeAddressv+0x234>
    }
  }
}
   b46b6:	b00d      	add	sp, #52	; 0x34
   b46b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b46bc:	2003e6a8 	.word	0x2003e6a8
   b46c0:	200350ac 	.word	0x200350ac
   b46c4:	000be70e 	.word	0x000be70e
   b46c8:	000be2d6 	.word	0x000be2d6
   b46cc:	000be2e2 	.word	0x000be2e2
   b46d0:	000be2f9 	.word	0x000be2f9
   b46d4:	000be313 	.word	0x000be313
   b46d8:	000be32b 	.word	0x000be32b
   b46dc:	000be4cd 	.word	0x000be4cd
   b46e0:	200352fc 	.word	0x200352fc
   b46e4:	20035454 	.word	0x20035454
   b46e8:	000be29e 	.word	0x000be29e
   b46ec:	000be2b9 	.word	0x000be2b9

000b46f0 <_Z17acquireWireBufferv>:
    cityIndex = -1;
    railwayIndex = -1;
  }
}

hal_i2c_config_t acquireWireBuffer() {
   b46f0:	b538      	push	{r3, r4, r5, lr}
    hal_i2c_config_t config = {
   b46f2:	f44f 7500 	mov.w	r5, #512	; 0x200
   b46f6:	2314      	movs	r3, #20
hal_i2c_config_t acquireWireBuffer() {
   b46f8:	4604      	mov	r4, r0
    hal_i2c_config_t config = {
   b46fa:	6003      	str	r3, [r0, #0]
   b46fc:	6085      	str	r5, [r0, #8]
   b46fe:	6105      	str	r5, [r0, #16]
        .size = sizeof(hal_i2c_config_t),
        .version = HAL_I2C_CONFIG_VERSION_1,
        .rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4700:	4905      	ldr	r1, [pc, #20]	; (b4718 <_Z17acquireWireBufferv+0x28>)
   b4702:	4628      	mov	r0, r5
   b4704:	f006 fd1c 	bl	bb140 <_ZnajRKSt9nothrow_t>
        .rx_buffer_size = I2C_BUFFER_SIZE,
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4708:	4903      	ldr	r1, [pc, #12]	; (b4718 <_Z17acquireWireBufferv+0x28>)
        .tx_buffer_size = I2C_BUFFER_SIZE
    };
   b470a:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b470c:	4628      	mov	r0, r5
   b470e:	f006 fd17 	bl	bb140 <_ZnajRKSt9nothrow_t>
    };
   b4712:	60e0      	str	r0, [r4, #12]
    return config;
   b4714:	4620      	mov	r0, r4
   b4716:	bd38      	pop	{r3, r4, r5, pc}
   b4718:	000beb14 	.word	0x000beb14

000b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b471c:	b510      	push	{r4, lr}
   b471e:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4720:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b4722:	b118      	cbz	r0, b472c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4724:	68a1      	ldr	r1, [r4, #8]
   b4726:	1a09      	subs	r1, r1, r0
   b4728:	f7ff fcbb 	bl	b40a2 <_ZdlPvj>
      }
   b472c:	4620      	mov	r0, r4
   b472e:	bd10      	pop	{r4, pc}

000b4730 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4730:	b510      	push	{r4, lr}
   b4732:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4734:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b4736:	b118      	cbz	r0, b4740 <_ZNSt12_Vector_baseIfSaIfEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4738:	68a1      	ldr	r1, [r4, #8]
   b473a:	1a09      	subs	r1, r1, r0
   b473c:	f7ff fcb1 	bl	b40a2 <_ZdlPvj>
      }
   b4740:	4620      	mov	r0, r4
   b4742:	bd10      	pop	{r4, pc}

000b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4744:	b510      	push	{r4, lr}
   b4746:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4748:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b474a:	b118      	cbz	r0, b4754 <_ZNSt12_Vector_baseIiSaIiEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b474c:	68a1      	ldr	r1, [r4, #8]
   b474e:	1a09      	subs	r1, r1, r0
   b4750:	f7ff fca7 	bl	b40a2 <_ZdlPvj>
      }
   b4754:	4620      	mov	r0, r4
   b4756:	bd10      	pop	{r4, pc}

000b4758 <_ZNSt6vectorIiSaIiEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
   b4758:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
   b475a:	680d      	ldr	r5, [r1, #0]
	  _M_end_of_storage = __x._M_end_of_storage;
   b475c:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
   b475e:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
   b4762:	6005      	str	r5, [r0, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
   b4764:	b085      	sub	sp, #20
	  _M_finish = __x._M_finish;
   b4766:	684d      	ldr	r5, [r1, #4]
   b4768:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
   b476a:	688d      	ldr	r5, [r1, #8]
   b476c:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
   b476e:	2300      	movs	r3, #0
	  _M_end_of_storage = __x._M_end_of_storage;
   b4770:	6085      	str	r5, [r0, #8]
	  _M_finish = __x._M_finish;
   b4772:	e9c1 3300 	strd	r3, r3, [r1]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4776:	608b      	str	r3, [r1, #8]
      }
   b4778:	a801      	add	r0, sp, #4
	  _M_finish = __x._M_finish;
   b477a:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
   b477e:	f7ff ffe1 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
      }
   b4782:	b005      	add	sp, #20
   b4784:	bd30      	pop	{r4, r5, pc}

000b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b4786:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4788:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   b478c:	4604      	mov	r4, r0
	  for (; __first != __last; ++__first)
   b478e:	42ae      	cmp	r6, r5
   b4790:	d004      	beq.n	b479c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x16>
      { _M_dispose(); }
   b4792:	4628      	mov	r0, r5
   b4794:	f006 fd0e 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4798:	3518      	adds	r5, #24
   b479a:	e7f8      	b.n	b478e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   b479c:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b479e:	b118      	cbz	r0, b47a8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x22>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b47a0:	68a1      	ldr	r1, [r4, #8]
   b47a2:	1a09      	subs	r1, r1, r0
   b47a4:	f7ff fc7d 	bl	b40a2 <_ZdlPvj>
      }
   b47a8:	4620      	mov	r0, r4
   b47aa:	bd70      	pop	{r4, r5, r6, pc}

000b47ac <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>:

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b47ac:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
      vector(size_type __n, const value_type& __value,
   b47b0:	b570      	push	{r4, r5, r6, lr}
   b47b2:	4604      	mov	r4, r0
   b47b4:	460d      	mov	r5, r1
   b47b6:	4616      	mov	r6, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b47b8:	d302      	bcc.n	b47c0 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x14>
	  __throw_length_error(
   b47ba:	480c      	ldr	r0, [pc, #48]	; (b47ec <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x40>)
   b47bc:	f006 fcc8 	bl	bb150 <_ZSt20__throw_length_errorPKc>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b47c0:	2300      	movs	r3, #0
   b47c2:	e9c0 3300 	strd	r3, r3, [r0]
   b47c6:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b47c8:	4608      	mov	r0, r1
   b47ca:	f7ff fce9 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b47ce:	eb00 0385 	add.w	r3, r0, r5, lsl #2
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b47d2:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b47d6:	60a3      	str	r3, [r4, #8]
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
   b47d8:	b12d      	cbz	r5, b47e6 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x3a>
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
   b47da:	6832      	ldr	r2, [r6, #0]
      for (; __first != __last; ++__first)
   b47dc:	4283      	cmp	r3, r0
   b47de:	d002      	beq.n	b47e6 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x3a>
	*__first = __tmp;
   b47e0:	f840 2b04 	str.w	r2, [r0], #4
      for (; __first != __last; ++__first)
   b47e4:	e7fa      	b.n	b47dc <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x30>
	this->_M_impl._M_finish =
   b47e6:	6060      	str	r0, [r4, #4]
      { _M_fill_initialize(__n, __value); }
   b47e8:	4620      	mov	r0, r4
   b47ea:	bd70      	pop	{r4, r5, r6, pc}
   b47ec:	000be33b 	.word	0x000be33b

000b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
   b47f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b47f4:	2400      	movs	r4, #0
      vector(initializer_list<value_type> __l,
   b47f6:	ab02      	add	r3, sp, #8
   b47f8:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b47fc:	e9c0 4400 	strd	r4, r4, [r0]
      constexpr const_iterator
      begin() const noexcept { return _M_array; }

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
   b4800:	4613      	mov	r3, r2
      vector(initializer_list<value_type> __l,
   b4802:	4605      	mov	r5, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4804:	6084      	str	r4, [r0, #8]
   b4806:	00d7      	lsls	r7, r2, #3
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b4808:	f342 001c 	sbfx	r0, r2, #0, #29
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b480c:	4a10      	ldr	r2, [pc, #64]	; (b4850 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x60>)
   b480e:	ebb2 0fc3 	cmp.w	r2, r3, lsl #3
   b4812:	4688      	mov	r8, r1
   b4814:	d202      	bcs.n	b481c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x2c>
	  __throw_length_error(
   b4816:	480f      	ldr	r0, [pc, #60]	; (b4854 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x64>)
   b4818:	f006 fc9a 	bl	bb150 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b481c:	f7ff fccd 	bl	b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4820:	19c6      	adds	r6, r0, r7
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4822:	4602      	mov	r2, r0
   b4824:	6028      	str	r0, [r5, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4826:	60ae      	str	r6, [r5, #8]
   b4828:	4623      	mov	r3, r4
   b482a:	429f      	cmp	r7, r3
   b482c:	d00b      	beq.n	b4846 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x56>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b482e:	18d4      	adds	r4, r2, r3
   b4830:	bf1c      	itt	ne
   b4832:	eb08 0103 	addne.w	r1, r8, r3
   b4836:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b483a:	f103 0308 	add.w	r3, r3, #8
   b483e:	bf18      	it	ne
   b4840:	e9c4 0100 	strdne	r0, r1, [r4]
   b4844:	e7f1      	b.n	b482a <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x3a>
      }
   b4846:	4628      	mov	r0, r5
	  this->_M_impl._M_finish =
   b4848:	606e      	str	r6, [r5, #4]
      }
   b484a:	b002      	add	sp, #8
   b484c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4850:	7ffffff8 	.word	0x7ffffff8
   b4854:	000be33b 	.word	0x000be33b

000b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>:
      vector(initializer_list<value_type> __l,
   b4858:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b485c:	ab02      	add	r3, sp, #8
   b485e:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4862:	2300      	movs	r3, #0
   b4864:	e9c0 3300 	strd	r3, r3, [r0]
   b4868:	6083      	str	r3, [r0, #8]
   b486a:	4616      	mov	r6, r2
   b486c:	2318      	movs	r3, #24
   b486e:	435e      	muls	r6, r3
   b4870:	4b10      	ldr	r3, [pc, #64]	; (b48b4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x5c>)
      vector(initializer_list<value_type> __l,
   b4872:	4604      	mov	r4, r0
   b4874:	10f0      	asrs	r0, r6, #3
   b4876:	4358      	muls	r0, r3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4878:	4b0f      	ldr	r3, [pc, #60]	; (b48b8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x60>)
   b487a:	429e      	cmp	r6, r3
   b487c:	460f      	mov	r7, r1
   b487e:	eb01 0806 	add.w	r8, r1, r6
   b4882:	d902      	bls.n	b488a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x32>
	  __throw_length_error(
   b4884:	480d      	ldr	r0, [pc, #52]	; (b48bc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x64>)
   b4886:	f006 fc63 	bl	bb150 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b488a:	f7ff fc77 	bl	b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b488e:	4406      	add	r6, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4890:	4605      	mov	r5, r0
   b4892:	6020      	str	r0, [r4, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4894:	60a6      	str	r6, [r4, #8]
   b4896:	45b8      	cmp	r8, r7
   b4898:	d007      	beq.n	b48aa <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x52>
   b489a:	b11d      	cbz	r5, b48a4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x4c>
   b489c:	4639      	mov	r1, r7
   b489e:	4628      	mov	r0, r5
   b48a0:	f7ff fc98 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b48a4:	3718      	adds	r7, #24
   b48a6:	3518      	adds	r5, #24
   b48a8:	e7f5      	b.n	b4896 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x3e>
      }
   b48aa:	4620      	mov	r0, r4
	  this->_M_impl._M_finish =
   b48ac:	6065      	str	r5, [r4, #4]
      }
   b48ae:	b002      	add	sp, #8
   b48b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b48b4:	aaaaaaab 	.word	0xaaaaaaab
   b48b8:	7ffffff8 	.word	0x7ffffff8
   b48bc:	000be33b 	.word	0x000be33b

000b48c0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   b48c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b48c2:	e9d1 3700 	ldrd	r3, r7, [r1]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b48c6:	2500      	movs	r5, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b48c8:	1aff      	subs	r7, r7, r3
      vector(const vector& __x)
   b48ca:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b48cc:	e9c0 5500 	strd	r5, r5, [r0]
   b48d0:	6085      	str	r5, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b48d2:	10f8      	asrs	r0, r7, #3
      vector(const vector& __x)
   b48d4:	460e      	mov	r6, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b48d6:	f7ff fc70 	bl	b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b48da:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b48de:	4407      	add	r7, r0
   b48e0:	60a7      	str	r7, [r4, #8]
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b48e2:	e9d6 7600 	ldrd	r7, r6, [r6]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b48e6:	4602      	mov	r2, r0
   b48e8:	1bf6      	subs	r6, r6, r7
      : _M_current(__i) { }
   b48ea:	462b      	mov	r3, r5
   b48ec:	42b3      	cmp	r3, r6
   b48ee:	eb02 0503 	add.w	r5, r2, r3
   b48f2:	d006      	beq.n	b4902 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x42>
   b48f4:	b11d      	cbz	r5, b48fe <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x3e>
   b48f6:	18f9      	adds	r1, r7, r3
   b48f8:	c903      	ldmia	r1, {r0, r1}
   b48fa:	e885 0003 	stmia.w	r5, {r0, r1}
   b48fe:	3308      	adds	r3, #8
   b4900:	e7f4      	b.n	b48ec <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x2c>
	this->_M_impl._M_finish =
   b4902:	6065      	str	r5, [r4, #4]
      }
   b4904:	4620      	mov	r0, r4
   b4906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>:
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
   b4908:	b508      	push	{r3, lr}
      { return _M_string_length; }
   b490a:	6842      	ldr	r2, [r0, #4]
	       const basic_string<_CharT>& __rhs) _GLIBCXX_NOEXCEPT
    { return (__lhs.size() == __rhs.size()
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
   b490c:	684b      	ldr	r3, [r1, #4]
   b490e:	429a      	cmp	r2, r3
   b4910:	d108      	bne.n	b4924 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1c>
	if (__n == 0)
   b4912:	b14a      	cbz	r2, b4928 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x20>
	return __builtin_memcmp(__s1, __s2, __n);
   b4914:	6809      	ldr	r1, [r1, #0]
   b4916:	6800      	ldr	r0, [r0, #0]
   b4918:	f007 fbec 	bl	bc0f4 <memcmp>
   b491c:	fab0 f080 	clz	r0, r0
   b4920:	0940      	lsrs	r0, r0, #5
						    __lhs.size())); }
   b4922:	bd08      	pop	{r3, pc}
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
   b4924:	2000      	movs	r0, #0
   b4926:	e7fc      	b.n	b4922 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1a>
   b4928:	2001      	movs	r0, #1
   b492a:	e7fa      	b.n	b4922 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1a>

000b492c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b492c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  txCharacteristic.setValue("ok");
   b4930:	2200      	movs	r2, #0
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4932:	b0a3      	sub	sp, #140	; 0x8c
   b4934:	4604      	mov	r4, r0
   b4936:	460d      	mov	r5, r1
  txCharacteristic.setValue("ok");
   b4938:	4893      	ldr	r0, [pc, #588]	; (b4b88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x25c>)
   b493a:	4994      	ldr	r1, [pc, #592]	; (b4b8c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x260>)
   b493c:	f004 fb7e 	bl	b903c <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
  String inputBuffer = "";
   b4940:	4993      	ldr	r1, [pc, #588]	; (b4b90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x264>)
   b4942:	a803      	add	r0, sp, #12
   b4944:	f005 fd69 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
  String nameBuffer;
   b4948:	4991      	ldr	r1, [pc, #580]	; (b4b90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x264>)
   b494a:	a807      	add	r0, sp, #28
   b494c:	f005 fd65 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
  for(int i = 0; i < len; i++){
   b4950:	4425      	add	r5, r4
   b4952:	42a5      	cmp	r5, r4
   b4954:	d005      	beq.n	b4962 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x36>
	String & operator += (char c)			{concat(c); return (*this);}
   b4956:	f814 1b01 	ldrb.w	r1, [r4], #1
   b495a:	a803      	add	r0, sp, #12
   b495c:	f005 fde5 	bl	ba52a <_ZN6String6concatEc>
   b4960:	e7f7      	b.n	b4952 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x26>
  Serial.println(inputBuffer);
   b4962:	f006 fa3b 	bl	baddc <_Z16_fetch_usbserialv>
   b4966:	9903      	ldr	r1, [sp, #12]
   b4968:	f005 fcad 	bl	ba2c6 <_ZN5Print7printlnEPKc>
  if(inputBuffer.indexOf("wifi:") == 0){
   b496c:	4989      	ldr	r1, [pc, #548]	; (b4b94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x268>)
   b496e:	a80f      	add	r0, sp, #60	; 0x3c
   b4970:	f005 fd53 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
   b4974:	a90f      	add	r1, sp, #60	; 0x3c
   b4976:	a803      	add	r0, sp, #12
   b4978:	f005 fe48 	bl	ba60c <_ZNK6String7indexOfERKS_>
   b497c:	4604      	mov	r4, r0
   b497e:	a80f      	add	r0, sp, #60	; 0x3c
   b4980:	f005 fd00 	bl	ba384 <_ZN6StringD1Ev>
   b4984:	2c00      	cmp	r4, #0
   b4986:	d15b      	bne.n	b4a40 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x114>
    int commaIndex = inputBuffer.indexOf(",");
   b4988:	4983      	ldr	r1, [pc, #524]	; (b4b98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x26c>)
    SSID = inputBuffer.substring(5, commaIndex);
   b498a:	4d84      	ldr	r5, [pc, #528]	; (b4b9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x270>)
    int commaIndex = inputBuffer.indexOf(",");
   b498c:	a80f      	add	r0, sp, #60	; 0x3c
   b498e:	f005 fd44 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
   b4992:	a90f      	add	r1, sp, #60	; 0x3c
   b4994:	a803      	add	r0, sp, #12
   b4996:	f005 fe39 	bl	ba60c <_ZNK6String7indexOfERKS_>
   b499a:	4604      	mov	r4, r0
   b499c:	a80f      	add	r0, sp, #60	; 0x3c
   b499e:	f005 fcf1 	bl	ba384 <_ZN6StringD1Ev>
    SSID = inputBuffer.substring(5, commaIndex);
   b49a2:	4623      	mov	r3, r4
   b49a4:	2205      	movs	r2, #5
   b49a6:	a903      	add	r1, sp, #12
   b49a8:	a80f      	add	r0, sp, #60	; 0x3c
   b49aa:	f005 fe33 	bl	ba614 <_ZNK6String9substringEjj>
   b49ae:	a90f      	add	r1, sp, #60	; 0x3c
   b49b0:	4628      	mov	r0, r5
   b49b2:	f005 fd72 	bl	ba49a <_ZN6StringaSEOS_>
   b49b6:	a80f      	add	r0, sp, #60	; 0x3c
   b49b8:	f005 fce4 	bl	ba384 <_ZN6StringD1Ev>
    password = inputBuffer.substring(commaIndex + 1);
   b49bc:	1c62      	adds	r2, r4, #1
   b49be:	4c78      	ldr	r4, [pc, #480]	; (b4ba0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x274>)
   b49c0:	a903      	add	r1, sp, #12
   b49c2:	a80f      	add	r0, sp, #60	; 0x3c
   b49c4:	f005 fe46 	bl	ba654 <_ZNK6String9substringEj>
   b49c8:	a90f      	add	r1, sp, #60	; 0x3c
   b49ca:	4620      	mov	r0, r4
   b49cc:	f005 fd65 	bl	ba49a <_ZN6StringaSEOS_>
   b49d0:	a80f      	add	r0, sp, #60	; 0x3c
   b49d2:	f005 fcd7 	bl	ba384 <_ZN6StringD1Ev>
    Serial.printlnf("SSID: %s, password: %s", SSID.c_str(), password.c_str());
   b49d6:	f006 fa01 	bl	baddc <_Z16_fetch_usbserialv>
   b49da:	682a      	ldr	r2, [r5, #0]
   b49dc:	6823      	ldr	r3, [r4, #0]
   b49de:	4971      	ldr	r1, [pc, #452]	; (b4ba4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x278>)
   b49e0:	f7ff fd14 	bl	b440c <_ZN5Print8printlnfEPKcz>
	const char * c_str() const { return buffer; }
   b49e4:	682f      	ldr	r7, [r5, #0]
   b49e6:	6825      	ldr	r5, [r4, #0]
    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b49e8:	b337      	cbz	r7, b4a38 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10c>
   b49ea:	4638      	mov	r0, r7
   b49ec:	f007 fc02 	bl	bc1f4 <strlen>
   b49f0:	4606      	mov	r6, r0
   b49f2:	b31d      	cbz	r5, b4a3c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x110>
   b49f4:	4628      	mov	r0, r5
   b49f6:	f007 fbfd 	bl	bc1f4 <strlen>
   b49fa:	4604      	mov	r4, r0

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   b49fc:	2238      	movs	r2, #56	; 0x38
   b49fe:	2100      	movs	r1, #0
   b4a00:	a814      	add	r0, sp, #80	; 0x50
   b4a02:	f007 fbaf 	bl	bc164 <memset>
        creds.size = sizeof(creds);
   b4a06:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
   b4a08:	e9cd 370f 	strd	r3, r7, [sp, #60]	; 0x3c
        creds.ssid_len = ssidLen;
        creds.password = password;
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4a0c:	4866      	ldr	r0, [pc, #408]	; (b4ba8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x27c>)
        creds.password_len = passwordLen;
   b4a0e:	9413      	str	r4, [sp, #76]	; 0x4c
        creds.security = WLanSecurityType(security);
   b4a10:	2303      	movs	r3, #3
   b4a12:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4a16:	2300      	movs	r3, #0
   b4a18:	6840      	ldr	r0, [r0, #4]
   b4a1a:	aa0f      	add	r2, sp, #60	; 0x3c
   b4a1c:	4619      	mov	r1, r3
        creds.password = password;
   b4a1e:	e9cd 6511 	strd	r6, r5, [sp, #68]	; 0x44
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4a22:	f003 ffe1 	bl	b89e8 <network_set_credentials>
  String nameBuffer;
   b4a26:	a807      	add	r0, sp, #28
   b4a28:	f005 fcac 	bl	ba384 <_ZN6StringD1Ev>
  String inputBuffer = "";
   b4a2c:	a803      	add	r0, sp, #12
   b4a2e:	f005 fca9 	bl	ba384 <_ZN6StringD1Ev>
}
   b4a32:	b023      	add	sp, #140	; 0x8c
   b4a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b4a38:	463e      	mov	r6, r7
   b4a3a:	e7da      	b.n	b49f2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xc6>
   b4a3c:	462c      	mov	r4, r5
   b4a3e:	e7dd      	b.n	b49fc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xd0>
  else if(inputBuffer.indexOf("city:") == 0){
   b4a40:	495a      	ldr	r1, [pc, #360]	; (b4bac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x280>)
   b4a42:	a80f      	add	r0, sp, #60	; 0x3c
   b4a44:	f005 fce9 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
   b4a48:	a90f      	add	r1, sp, #60	; 0x3c
   b4a4a:	a803      	add	r0, sp, #12
   b4a4c:	f005 fdde 	bl	ba60c <_ZNK6String7indexOfERKS_>
   b4a50:	4604      	mov	r4, r0
   b4a52:	a80f      	add	r0, sp, #60	; 0x3c
   b4a54:	f005 fc96 	bl	ba384 <_ZN6StringD1Ev>
   b4a58:	2c00      	cmp	r4, #0
   b4a5a:	d17f      	bne.n	b4b5c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x230>
    inputBuffer = inputBuffer.substring(5);
   b4a5c:	2205      	movs	r2, #5
   b4a5e:	a903      	add	r1, sp, #12
   b4a60:	a80f      	add	r0, sp, #60	; 0x3c
   b4a62:	f005 fdf7 	bl	ba654 <_ZNK6String9substringEj>
   b4a66:	a90f      	add	r1, sp, #60	; 0x3c
   b4a68:	a803      	add	r0, sp, #12
   b4a6a:	f005 fd16 	bl	ba49a <_ZN6StringaSEOS_>
   b4a6e:	a80f      	add	r0, sp, #60	; 0x3c
   b4a70:	f005 fc88 	bl	ba384 <_ZN6StringD1Ev>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4a74:	4d4e      	ldr	r5, [pc, #312]	; (b4bb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x284>)
   b4a76:	f8df 815c 	ldr.w	r8, [pc, #348]	; b4bd4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a8>
   b4a7a:	494e      	ldr	r1, [pc, #312]	; (b4bb4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x288>)
   b4a7c:	4e4e      	ldr	r6, [pc, #312]	; (b4bb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x28c>)
   b4a7e:	e9d5 2300 	ldrd	r2, r3, [r5]
   b4a82:	1a9b      	subs	r3, r3, r2
   b4a84:	10db      	asrs	r3, r3, #3
   b4a86:	434b      	muls	r3, r1
    for(int i = 0; i < cities.size(); i++){
   b4a88:	42a3      	cmp	r3, r4
   b4a8a:	d95b      	bls.n	b4b44 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x218>
      { return _M_dataplus._M_p; }
   b4a8c:	2328      	movs	r3, #40	; 0x28
   b4a8e:	fb03 2204 	mla	r2, r3, r4, r2
      if(inputBuffer == String(cities[i].name.c_str())){
   b4a92:	a80f      	add	r0, sp, #60	; 0x3c
   b4a94:	68d1      	ldr	r1, [r2, #12]
   b4a96:	f005 fcc0 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b4a9a:	a90f      	add	r1, sp, #60	; 0x3c
   b4a9c:	a803      	add	r0, sp, #12
   b4a9e:	f005 fd87 	bl	ba5b0 <_ZNK6String6equalsERKS_>
   b4aa2:	4607      	mov	r7, r0
   b4aa4:	a80f      	add	r0, sp, #60	; 0x3c
   b4aa6:	f005 fc6d 	bl	ba384 <_ZN6StringD1Ev>
   b4aaa:	b107      	cbz	r7, b4aae <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x182>
        cityIndex = i;
   b4aac:	6034      	str	r4, [r6, #0]
      if(cityIndex == -1){
   b4aae:	6833      	ldr	r3, [r6, #0]
   b4ab0:	1c5a      	adds	r2, r3, #1
   b4ab2:	d105      	bne.n	b4ac0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x194>
        txCharacteristic.setValue("incorrect city name");
   b4ab4:	4941      	ldr	r1, [pc, #260]	; (b4bbc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x290>)
   b4ab6:	2200      	movs	r2, #0
        txCharacteristic.setValue("incorrect railway color");
   b4ab8:	4833      	ldr	r0, [pc, #204]	; (b4b88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x25c>)
   b4aba:	f004 fabf 	bl	b903c <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        return;
   b4abe:	e7b2      	b.n	b4a26 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfa>
	return *(this->_M_impl._M_start + __n);
   b4ac0:	682a      	ldr	r2, [r5, #0]
   b4ac2:	2728      	movs	r7, #40	; 0x28
   b4ac4:	437b      	muls	r3, r7
   b4ac6:	18d1      	adds	r1, r2, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4ac8:	58d3      	ldr	r3, [r2, r3]
   b4aca:	6849      	ldr	r1, [r1, #4]
   b4acc:	1ac9      	subs	r1, r1, r3
   b4ace:	1089      	asrs	r1, r1, #2
   b4ad0:	fb08 f101 	mul.w	r1, r8, r1
      sequenceArr = std::vector<int>(cities[cityIndex].railways.size() * 2, 0);
   b4ad4:	ab02      	add	r3, sp, #8
   b4ad6:	aa0b      	add	r2, sp, #44	; 0x2c
   b4ad8:	f04f 0900 	mov.w	r9, #0
   b4adc:	0049      	lsls	r1, r1, #1
   b4ade:	a80f      	add	r0, sp, #60	; 0x3c
   b4ae0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   b4ae4:	f7ff fe62 	bl	b47ac <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b4ae8:	a90f      	add	r1, sp, #60	; 0x3c
   b4aea:	4835      	ldr	r0, [pc, #212]	; (b4bc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x294>)
   b4aec:	f7ff fe34 	bl	b4758 <_ZNSt6vectorIiSaIiEEaSEOS1_.isra.0>
      }
   b4af0:	a80f      	add	r0, sp, #60	; 0x3c
   b4af2:	f7ff fe27 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
	return *(this->_M_impl._M_start + __n);
   b4af6:	6832      	ldr	r2, [r6, #0]
      addressArr = std::vector<int>(cities[cityIndex].slaveCountExpected, 0);
   b4af8:	682b      	ldr	r3, [r5, #0]
   b4afa:	4e32      	ldr	r6, [pc, #200]	; (b4bc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x298>)
   b4afc:	fb07 3302 	mla	r3, r7, r2, r3
   b4b00:	a80f      	add	r0, sp, #60	; 0x3c
   b4b02:	aa0b      	add	r2, sp, #44	; 0x2c
   b4b04:	6a59      	ldr	r1, [r3, #36]	; 0x24
   b4b06:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   b4b0a:	ab02      	add	r3, sp, #8
   b4b0c:	f7ff fe4e 	bl	b47ac <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b4b10:	a90f      	add	r1, sp, #60	; 0x3c
   b4b12:	4630      	mov	r0, r6
   b4b14:	f7ff fe20 	bl	b4758 <_ZNSt6vectorIiSaIiEEaSEOS1_.isra.0>
      }
   b4b18:	a80f      	add	r0, sp, #60	; 0x3c
   b4b1a:	f7ff fe13 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
      randomizeAddress();
   b4b1e:	f7ff fc83 	bl	b4428 <_Z16randomizeAddressv>
      Wire.beginTransmission(addressArr[0]);
   b4b22:	f006 faa9 	bl	bb078 <_Z19__fetch_global_Wirev>
   b4b26:	6833      	ldr	r3, [r6, #0]
   b4b28:	6819      	ldr	r1, [r3, #0]
   b4b2a:	f005 fa3f 	bl	b9fac <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('3');
   b4b2e:	f006 faa3 	bl	bb078 <_Z19__fetch_global_Wirev>
   b4b32:	2133      	movs	r1, #51	; 0x33
   b4b34:	f7ff fb74 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4b38:	f006 fa9e 	bl	bb078 <_Z19__fetch_global_Wirev>
   b4b3c:	f005 fa3d 	bl	b9fba <_ZN7TwoWire15endTransmissionEv>
    for(int i = 0; i < cities.size(); i++){
   b4b40:	3401      	adds	r4, #1
   b4b42:	e79a      	b.n	b4a7a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14e>
    Serial.printlnf("city: %s", cities[cityIndex].name.c_str());
   b4b44:	f006 f94a 	bl	baddc <_Z16_fetch_usbserialv>
	return *(this->_M_impl._M_start + __n);
   b4b48:	6832      	ldr	r2, [r6, #0]
   b4b4a:	682b      	ldr	r3, [r5, #0]
   b4b4c:	2128      	movs	r1, #40	; 0x28
   b4b4e:	fb01 3302 	mla	r3, r1, r2, r3
   b4b52:	491d      	ldr	r1, [pc, #116]	; (b4bc8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x29c>)
   b4b54:	68da      	ldr	r2, [r3, #12]
   b4b56:	f7ff fc59 	bl	b440c <_ZN5Print8printlnfEPKcz>
   b4b5a:	e764      	b.n	b4a26 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfa>
  else if(inputBuffer.indexOf("color:") == 0){
   b4b5c:	491b      	ldr	r1, [pc, #108]	; (b4bcc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a0>)
   b4b5e:	a80f      	add	r0, sp, #60	; 0x3c
   b4b60:	f005 fc5b 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
   b4b64:	a90f      	add	r1, sp, #60	; 0x3c
   b4b66:	a803      	add	r0, sp, #12
   b4b68:	f005 fd50 	bl	ba60c <_ZNK6String7indexOfERKS_>
   b4b6c:	4604      	mov	r4, r0
   b4b6e:	a80f      	add	r0, sp, #60	; 0x3c
   b4b70:	f005 fc08 	bl	ba384 <_ZN6StringD1Ev>
   b4b74:	2c00      	cmp	r4, #0
   b4b76:	f040 81b1 	bne.w	b4edc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b0>
    if(cityIndex == -1){
   b4b7a:	4d0f      	ldr	r5, [pc, #60]	; (b4bb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x28c>)
   b4b7c:	682b      	ldr	r3, [r5, #0]
   b4b7e:	3301      	adds	r3, #1
   b4b80:	d12a      	bne.n	b4bd8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2ac>
      txCharacteristic.setValue("city not set");
   b4b82:	4913      	ldr	r1, [pc, #76]	; (b4bd0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a4>)
   b4b84:	4622      	mov	r2, r4
   b4b86:	e797      	b.n	b4ab8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18c>
   b4b88:	2003e6ac 	.word	0x2003e6ac
   b4b8c:	000be36c 	.word	0x000be36c
   b4b90:	000be70e 	.word	0x000be70e
   b4b94:	000be36f 	.word	0x000be36f
   b4b98:	000be375 	.word	0x000be375
   b4b9c:	200352a4 	.word	0x200352a4
   b4ba0:	2003e474 	.word	0x2003e474
   b4ba4:	000be377 	.word	0x000be377
   b4ba8:	2003e718 	.word	0x2003e718
   b4bac:	000be38e 	.word	0x000be38e
   b4bb0:	20035454 	.word	0x20035454
   b4bb4:	cccccccd 	.word	0xcccccccd
   b4bb8:	200350ac 	.word	0x200350ac
   b4bbc:	000be394 	.word	0x000be394
   b4bc0:	2003e69c 	.word	0x2003e69c
   b4bc4:	200352fc 	.word	0x200352fc
   b4bc8:	000be3a8 	.word	0x000be3a8
   b4bcc:	000be3b1 	.word	0x000be3b1
   b4bd0:	000be3b8 	.word	0x000be3b8
   b4bd4:	684bda13 	.word	0x684bda13
    inputBuffer = inputBuffer.substring(6);
   b4bd8:	2206      	movs	r2, #6
   b4bda:	a903      	add	r1, sp, #12
   b4bdc:	a80f      	add	r0, sp, #60	; 0x3c
   b4bde:	f005 fd39 	bl	ba654 <_ZNK6String9substringEj>
   b4be2:	a90f      	add	r1, sp, #60	; 0x3c
   b4be4:	a803      	add	r0, sp, #12
   b4be6:	f005 fc58 	bl	ba49a <_ZN6StringaSEOS_>
   b4bea:	a80f      	add	r0, sp, #60	; 0x3c
   b4bec:	f005 fbca 	bl	ba384 <_ZN6StringD1Ev>
    nameBuffer = inputBuffer;
   b4bf0:	a903      	add	r1, sp, #12
   b4bf2:	a807      	add	r0, sp, #28
   b4bf4:	f005 fc42 	bl	ba47c <_ZN6StringaSERKS_>
   b4bf8:	f8df 82d4 	ldr.w	r8, [pc, #724]	; b4ed0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a4>
    if(bleCount < cities[cityIndex].railways.size()){
   b4bfc:	4fa4      	ldr	r7, [pc, #656]	; (b4e90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x564>)
    Serial.println(inputBuffer);
   b4bfe:	f006 f8ed 	bl	baddc <_Z16_fetch_usbserialv>
   b4c02:	9903      	ldr	r1, [sp, #12]
   b4c04:	f005 fb5f 	bl	ba2c6 <_ZN5Print7printlnEPKc>
    if(bleCount < cities[cityIndex].railways.size()){
   b4c08:	6829      	ldr	r1, [r5, #0]
   b4c0a:	f8d8 0000 	ldr.w	r0, [r8]
   b4c0e:	2228      	movs	r2, #40	; 0x28
   b4c10:	434a      	muls	r2, r1
   b4c12:	1883      	adds	r3, r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c14:	5882      	ldr	r2, [r0, r2]
   b4c16:	685b      	ldr	r3, [r3, #4]
   b4c18:	1a9b      	subs	r3, r3, r2
   b4c1a:	4a9e      	ldr	r2, [pc, #632]	; (b4e94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x568>)
   b4c1c:	109b      	asrs	r3, r3, #2
   b4c1e:	4353      	muls	r3, r2
   b4c20:	683a      	ldr	r2, [r7, #0]
   b4c22:	429a      	cmp	r2, r3
   b4c24:	f080 80c1 	bcs.w	b4daa <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x47e>
      if((cityIndex == 0 || cityIndex == 1) && (inputBuffer == "green1" || inputBuffer == "green2")){
   b4c28:	2901      	cmp	r1, #1
   b4c2a:	d80d      	bhi.n	b4c48 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x31c>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4c2c:	499a      	ldr	r1, [pc, #616]	; (b4e98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x56c>)
   b4c2e:	a803      	add	r0, sp, #12
   b4c30:	f005 fccb 	bl	ba5ca <_ZNK6String6equalsEPKc>
   b4c34:	b360      	cbz	r0, b4c90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x364>
        nameBuffer = "green";
   b4c36:	4999      	ldr	r1, [pc, #612]	; (b4e9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x570>)
   b4c38:	a807      	add	r0, sp, #28
   b4c3a:	f005 fc36 	bl	ba4aa <_ZN6StringaSEPKc>
        Serial.println("green fix");
   b4c3e:	f006 f8cd 	bl	baddc <_Z16_fetch_usbserialv>
   b4c42:	4997      	ldr	r1, [pc, #604]	; (b4ea0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x574>)
   b4c44:	f005 fb3f 	bl	ba2c6 <_ZN5Print7printlnEPKc>
          railwayIndex = i;
   b4c48:	f8df a288 	ldr.w	sl, [pc, #648]	; b4ed4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a8>
   b4c4c:	f8df b258 	ldr.w	fp, [pc, #600]	; b4ea8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x57c>
   b4c50:	f04f 0900 	mov.w	r9, #0
      for(int i = 0; i < cities[cityIndex].railways.size(); i++){
   b4c54:	682e      	ldr	r6, [r5, #0]
	return *(this->_M_impl._M_start + __n);
   b4c56:	f8d8 1000 	ldr.w	r1, [r8]
   b4c5a:	2228      	movs	r2, #40	; 0x28
   b4c5c:	4372      	muls	r2, r6
   b4c5e:	188b      	adds	r3, r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c60:	588a      	ldr	r2, [r1, r2]
   b4c62:	685b      	ldr	r3, [r3, #4]
   b4c64:	1a9b      	subs	r3, r3, r2
   b4c66:	4a8b      	ldr	r2, [pc, #556]	; (b4e94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x568>)
   b4c68:	109b      	asrs	r3, r3, #2
   b4c6a:	4353      	muls	r3, r2
   b4c6c:	454b      	cmp	r3, r9
   b4c6e:	d947      	bls.n	b4d00 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3d4>
        if((cityIndex != 0 || nameBuffer != String(purpleLineCTA.name.c_str())) && String(cities[cityIndex].railways[i].name.c_str()) == nameBuffer){
   b4c70:	b9ae      	cbnz	r6, b4c9e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x372>
   b4c72:	4b8c      	ldr	r3, [pc, #560]	; (b4ea4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x578>)
   b4c74:	a80b      	add	r0, sp, #44	; 0x2c
   b4c76:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b4c78:	f005 fbcf 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
   b4c7c:	a90b      	add	r1, sp, #44	; 0x2c
   b4c7e:	a807      	add	r0, sp, #28
   b4c80:	f005 fc96 	bl	ba5b0 <_ZNK6String6equalsERKS_>
   b4c84:	2800      	cmp	r0, #0
   b4c86:	d039      	beq.n	b4cfc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3d0>
   b4c88:	a80b      	add	r0, sp, #44	; 0x2c
   b4c8a:	f005 fb7b 	bl	ba384 <_ZN6StringD1Ev>
   b4c8e:	e022      	b.n	b4cd6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3aa>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4c90:	4985      	ldr	r1, [pc, #532]	; (b4ea8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x57c>)
   b4c92:	a803      	add	r0, sp, #12
   b4c94:	f005 fc99 	bl	ba5ca <_ZNK6String6equalsEPKc>
      if((cityIndex == 0 || cityIndex == 1) && (inputBuffer == "green1" || inputBuffer == "green2")){
   b4c98:	2800      	cmp	r0, #0
   b4c9a:	d1cc      	bne.n	b4c36 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x30a>
   b4c9c:	e7d4      	b.n	b4c48 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x31c>
        if((cityIndex != 0 || nameBuffer != String(purpleLineCTA.name.c_str())) && String(cities[cityIndex].railways[i].name.c_str()) == nameBuffer){
   b4c9e:	2200      	movs	r2, #0
	return *(this->_M_impl._M_start + __n);
   b4ca0:	682b      	ldr	r3, [r5, #0]
   b4ca2:	f8d8 1000 	ldr.w	r1, [r8]
   b4ca6:	9201      	str	r2, [sp, #4]
   b4ca8:	2028      	movs	r0, #40	; 0x28
   b4caa:	4343      	muls	r3, r0
   b4cac:	a80f      	add	r0, sp, #60	; 0x3c
   b4cae:	58cb      	ldr	r3, [r1, r3]
   b4cb0:	216c      	movs	r1, #108	; 0x6c
   b4cb2:	fb01 3309 	mla	r3, r1, r9, r3
   b4cb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b4cb8:	f005 fbaf 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b4cbc:	a907      	add	r1, sp, #28
   b4cbe:	a80f      	add	r0, sp, #60	; 0x3c
   b4cc0:	f005 fc76 	bl	ba5b0 <_ZNK6String6equalsERKS_>
   b4cc4:	1e06      	subs	r6, r0, #0
   b4cc6:	a80f      	add	r0, sp, #60	; 0x3c
   b4cc8:	bf18      	it	ne
   b4cca:	2601      	movne	r6, #1
   b4ccc:	f005 fb5a 	bl	ba384 <_ZN6StringD1Ev>
   b4cd0:	9a01      	ldr	r2, [sp, #4]
   b4cd2:	2a00      	cmp	r2, #0
   b4cd4:	d1d8      	bne.n	b4c88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x35c>
   b4cd6:	b10e      	cbz	r6, b4cdc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3b0>
          railwayIndex = i;
   b4cd8:	f8ca 9000 	str.w	r9, [sl]
        if(cityIndex == 1 && inputBuffer == "green2"){
   b4cdc:	682b      	ldr	r3, [r5, #0]
   b4cde:	2b01      	cmp	r3, #1
   b4ce0:	d109      	bne.n	b4cf6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3ca>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4ce2:	4659      	mov	r1, fp
   b4ce4:	a803      	add	r0, sp, #12
   b4ce6:	f005 fc70 	bl	ba5ca <_ZNK6String6equalsEPKc>
   b4cea:	b120      	cbz	r0, b4cf6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3ca>
          railwayIndex++;
   b4cec:	f8da 3000 	ldr.w	r3, [sl]
   b4cf0:	3301      	adds	r3, #1
   b4cf2:	f8ca 3000 	str.w	r3, [sl]
      for(int i = 0; i < cities[cityIndex].railways.size(); i++){
   b4cf6:	f109 0901 	add.w	r9, r9, #1
   b4cfa:	e7ab      	b.n	b4c54 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x328>
        if((cityIndex != 0 || nameBuffer != String(purpleLineCTA.name.c_str())) && String(cities[cityIndex].railways[i].name.c_str()) == nameBuffer){
   b4cfc:	2201      	movs	r2, #1
   b4cfe:	e7cf      	b.n	b4ca0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x374>
      if(railwayIndex == -1){
   b4d00:	f8df b1d0 	ldr.w	fp, [pc, #464]	; b4ed4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a8>
   b4d04:	f8db 3000 	ldr.w	r3, [fp]
   b4d08:	3301      	adds	r3, #1
   b4d0a:	d077      	beq.n	b4dfc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4d0>
   b4d0c:	f8df a1c8 	ldr.w	sl, [pc, #456]	; b4ed8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ac>
   b4d10:	f8df 919c 	ldr.w	r9, [pc, #412]	; b4eb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x584>
        if(cities[cityIndex].railways[railwayIndex].outputs[i].size() == 0 || (cityIndex == 0 && cities[cityIndex].railways[railwayIndex].name == purpleLineCTA.name)){
   b4d14:	6829      	ldr	r1, [r5, #0]
   b4d16:	f8d8 2000 	ldr.w	r2, [r8]
   b4d1a:	f8db 3000 	ldr.w	r3, [fp]
   b4d1e:	2028      	movs	r0, #40	; 0x28
   b4d20:	4348      	muls	r0, r1
   b4d22:	5810      	ldr	r0, [r2, r0]
   b4d24:	226c      	movs	r2, #108	; 0x6c
   b4d26:	fb02 0003 	mla	r0, r2, r3, r0
   b4d2a:	220c      	movs	r2, #12
   b4d2c:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b4d2e:	4362      	muls	r2, r4
   b4d30:	eb06 0c02 	add.w	ip, r6, r2
   b4d34:	58b2      	ldr	r2, [r6, r2]
   b4d36:	f8dc c004 	ldr.w	ip, [ip, #4]
   b4d3a:	4594      	cmp	ip, r2
   b4d3c:	ea4f 0643 	mov.w	r6, r3, lsl #1
   b4d40:	d007      	beq.n	b4d52 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x426>
   b4d42:	2900      	cmp	r1, #0
   b4d44:	d15f      	bne.n	b4e06 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4da>
   b4d46:	4959      	ldr	r1, [pc, #356]	; (b4eac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x580>)
   b4d48:	3030      	adds	r0, #48	; 0x30
   b4d4a:	f7ff fddd 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b4d4e:	2800      	cmp	r0, #0
   b4d50:	d059      	beq.n	b4e06 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4da>
          sequenceArr[2 * railwayIndex + i] = 0;
   b4d52:	f8da 2000 	ldr.w	r2, [sl]
   b4d56:	4426      	add	r6, r4
   b4d58:	2100      	movs	r1, #0
   b4d5a:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
      for(int i = 0; i < 2; i++){
   b4d5e:	2c01      	cmp	r4, #1
   b4d60:	d14f      	bne.n	b4e02 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4d6>
   b4d62:	4c53      	ldr	r4, [pc, #332]	; (b4eb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x584>)
      Wire.beginTransmission(addressArr[bleCount]);
   b4d64:	f006 f988 	bl	bb078 <_Z19__fetch_global_Wirev>
   b4d68:	683a      	ldr	r2, [r7, #0]
   b4d6a:	6823      	ldr	r3, [r4, #0]
   b4d6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b4d70:	f005 f91c 	bl	b9fac <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('4');
   b4d74:	f006 f980 	bl	bb078 <_Z19__fetch_global_Wirev>
   b4d78:	2134      	movs	r1, #52	; 0x34
   b4d7a:	f7ff fa51 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4d7e:	f006 f97b 	bl	bb078 <_Z19__fetch_global_Wirev>
   b4d82:	f005 f91a 	bl	b9fba <_ZN7TwoWire15endTransmissionEv>
      Wire.beginTransmission(addressArr[bleCount + 1]);
   b4d86:	f006 f977 	bl	bb078 <_Z19__fetch_global_Wirev>
   b4d8a:	683b      	ldr	r3, [r7, #0]
   b4d8c:	6822      	ldr	r2, [r4, #0]
   b4d8e:	3301      	adds	r3, #1
   b4d90:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   b4d94:	f005 f90a 	bl	b9fac <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('3');
   b4d98:	f006 f96e 	bl	bb078 <_Z19__fetch_global_Wirev>
   b4d9c:	2133      	movs	r1, #51	; 0x33
   b4d9e:	f7ff fa3f 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4da2:	f006 f969 	bl	bb078 <_Z19__fetch_global_Wirev>
   b4da6:	f005 f908 	bl	b9fba <_ZN7TwoWire15endTransmissionEv>
   b4daa:	682a      	ldr	r2, [r5, #0]
   b4dac:	f8d8 1000 	ldr.w	r1, [r8]
   b4db0:	2328      	movs	r3, #40	; 0x28
   b4db2:	435a      	muls	r2, r3
   b4db4:	188b      	adds	r3, r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4db6:	588a      	ldr	r2, [r1, r2]
   b4db8:	685b      	ldr	r3, [r3, #4]
   b4dba:	1a9b      	subs	r3, r3, r2
   b4dbc:	4a35      	ldr	r2, [pc, #212]	; (b4e94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x568>)
   b4dbe:	109b      	asrs	r3, r3, #2
   b4dc0:	4353      	muls	r3, r2
    if(bleCount == cities[cityIndex].railways.size() - 1){
   b4dc2:	683a      	ldr	r2, [r7, #0]
   b4dc4:	3b01      	subs	r3, #1
   b4dc6:	4293      	cmp	r3, r2
   b4dc8:	d114      	bne.n	b4df4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4c8>
      Serial.println("BLE finished");
   b4dca:	f006 f807 	bl	baddc <_Z16_fetch_usbserialv>
   b4dce:	4939      	ldr	r1, [pc, #228]	; (b4eb4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x588>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4dd0:	4c39      	ldr	r4, [pc, #228]	; (b4eb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x58c>)
   b4dd2:	f005 fa78 	bl	ba2c6 <_ZN5Print7printlnEPKc>
      userInput = true;
   b4dd6:	4b39      	ldr	r3, [pc, #228]	; (b4ebc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x590>)
        network_on(*this, 0, 0, NULL);
   b4dd8:	6860      	ldr	r0, [r4, #4]
   b4dda:	2201      	movs	r2, #1
   b4ddc:	701a      	strb	r2, [r3, #0]
   b4dde:	2300      	movs	r3, #0
   b4de0:	461a      	mov	r2, r3
   b4de2:	4619      	mov	r1, r3
   b4de4:	f003 fdd8 	bl	b8998 <network_on>
        network_connect(*this, flags, 0, NULL);
   b4de8:	2300      	movs	r3, #0
   b4dea:	6860      	ldr	r0, [r4, #4]
   b4dec:	461a      	mov	r2, r3
   b4dee:	4619      	mov	r1, r3
   b4df0:	f003 fdb2 	bl	b8958 <network_connect>
    bleCount++;
   b4df4:	683b      	ldr	r3, [r7, #0]
   b4df6:	3301      	adds	r3, #1
   b4df8:	603b      	str	r3, [r7, #0]
   b4dfa:	e614      	b.n	b4a26 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfa>
        txCharacteristic.setValue("incorrect railway color");
   b4dfc:	4930      	ldr	r1, [pc, #192]	; (b4ec0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x594>)
   b4dfe:	2200      	movs	r2, #0
   b4e00:	e65a      	b.n	b4ab8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18c>
   b4e02:	2401      	movs	r4, #1
   b4e04:	e786      	b.n	b4d14 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3e8>
          sequenceArr[2 * railwayIndex + i] = addressArr[bleCount];
   b4e06:	f8d9 2000 	ldr.w	r2, [r9]
	return *(this->_M_impl._M_start + __n);
   b4e0a:	6839      	ldr	r1, [r7, #0]
   b4e0c:	4426      	add	r6, r4
   b4e0e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   b4e12:	f8da 2000 	ldr.w	r2, [sl]
   b4e16:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
          if(cityIndex == 0){
   b4e1a:	682a      	ldr	r2, [r5, #0]
   b4e1c:	2a00      	cmp	r2, #0
   b4e1e:	d19e      	bne.n	b4d5e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x432>
            if(inputBuffer == String(brownLineCTA.name.c_str())){
   b4e20:	4b28      	ldr	r3, [pc, #160]	; (b4ec4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x598>)
   b4e22:	a80f      	add	r0, sp, #60	; 0x3c
   b4e24:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b4e26:	f005 faf8 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b4e2a:	a90f      	add	r1, sp, #60	; 0x3c
   b4e2c:	a803      	add	r0, sp, #12
   b4e2e:	f005 fbbf 	bl	ba5b0 <_ZNK6String6equalsERKS_>
   b4e32:	4606      	mov	r6, r0
   b4e34:	a80f      	add	r0, sp, #60	; 0x3c
   b4e36:	f005 faa5 	bl	ba384 <_ZN6StringD1Ev>
   b4e3a:	b156      	cbz	r6, b4e52 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x526>
            brownLineCTAAdr = sequenceArr[2 * railwayIndex + i];
   b4e3c:	f8db 2000 	ldr.w	r2, [fp]
   b4e40:	f8da 1000 	ldr.w	r1, [sl]
   b4e44:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b4e48:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   b4e4c:	4a1e      	ldr	r2, [pc, #120]	; (b4ec8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x59c>)
              greenLineCTAAdr[0] = sequenceArr[2 * railwayIndex];
   b4e4e:	6011      	str	r1, [r2, #0]
   b4e50:	e785      	b.n	b4d5e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x432>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4e52:	4911      	ldr	r1, [pc, #68]	; (b4e98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x56c>)
   b4e54:	a803      	add	r0, sp, #12
   b4e56:	f005 fbb8 	bl	ba5ca <_ZNK6String6equalsEPKc>
            }else if(inputBuffer == "green1"){
   b4e5a:	b138      	cbz	r0, b4e6c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x540>
              greenLineCTAAdr[0] = sequenceArr[2 * railwayIndex];
   b4e5c:	f8da 2000 	ldr.w	r2, [sl]
   b4e60:	f8db 1000 	ldr.w	r1, [fp]
   b4e64:	f852 1031 	ldr.w	r1, [r2, r1, lsl #3]
   b4e68:	4a18      	ldr	r2, [pc, #96]	; (b4ecc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a0>)
   b4e6a:	e7f0      	b.n	b4e4e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x522>
   b4e6c:	490e      	ldr	r1, [pc, #56]	; (b4ea8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x57c>)
   b4e6e:	a803      	add	r0, sp, #12
   b4e70:	f005 fbab 	bl	ba5ca <_ZNK6String6equalsEPKc>
            }else if(inputBuffer == "green2"){
   b4e74:	2800      	cmp	r0, #0
   b4e76:	f43f af72 	beq.w	b4d5e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x432>
              greenLineCTAAdr[1] = sequenceArr[2 * railwayIndex + 1];
   b4e7a:	f8db 2000 	ldr.w	r2, [fp]
   b4e7e:	f8da 1000 	ldr.w	r1, [sl]
   b4e82:	0052      	lsls	r2, r2, #1
   b4e84:	3201      	adds	r2, #1
   b4e86:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   b4e8a:	4a10      	ldr	r2, [pc, #64]	; (b4ecc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a0>)
   b4e8c:	6051      	str	r1, [r2, #4]
   b4e8e:	e766      	b.n	b4d5e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x432>
   b4e90:	20035308 	.word	0x20035308
   b4e94:	684bda13 	.word	0x684bda13
   b4e98:	000be3c5 	.word	0x000be3c5
   b4e9c:	000be3cc 	.word	0x000be3cc
   b4ea0:	000be3d2 	.word	0x000be3d2
   b4ea4:	2003e4f0 	.word	0x2003e4f0
   b4ea8:	000be3dc 	.word	0x000be3dc
   b4eac:	2003e520 	.word	0x2003e520
   b4eb0:	200352fc 	.word	0x200352fc
   b4eb4:	000be3fb 	.word	0x000be3fb
   b4eb8:	2003e718 	.word	0x2003e718
   b4ebc:	2003e6b4 	.word	0x2003e6b4
   b4ec0:	000be3e3 	.word	0x000be3e3
   b4ec4:	200353e4 	.word	0x200353e4
   b4ec8:	20035450 	.word	0x20035450
   b4ecc:	200355b0 	.word	0x200355b0
   b4ed0:	20035454 	.word	0x20035454
   b4ed4:	200350c0 	.word	0x200350c0
   b4ed8:	2003e69c 	.word	0x2003e69c
  }else if(inputBuffer.indexOf("reset") == 0){
   b4edc:	4917      	ldr	r1, [pc, #92]	; (b4f3c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x610>)
   b4ede:	a80f      	add	r0, sp, #60	; 0x3c
   b4ee0:	f005 fa9b 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
   b4ee4:	a90f      	add	r1, sp, #60	; 0x3c
   b4ee6:	a803      	add	r0, sp, #12
   b4ee8:	f005 fb90 	bl	ba60c <_ZNK6String7indexOfERKS_>
   b4eec:	4604      	mov	r4, r0
   b4eee:	a80f      	add	r0, sp, #60	; 0x3c
   b4ef0:	f005 fa48 	bl	ba384 <_ZN6StringD1Ev>
   b4ef4:	2c00      	cmp	r4, #0
   b4ef6:	f47f ad96 	bne.w	b4a26 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfa>
    Serial.println("reset");
   b4efa:	f005 ff6f 	bl	baddc <_Z16_fetch_usbserialv>
   b4efe:	490f      	ldr	r1, [pc, #60]	; (b4f3c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x610>)
    Wire.beginTransmission(addressArr[bleCount]);
   b4f00:	4d0f      	ldr	r5, [pc, #60]	; (b4f40 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x614>)
    Serial.println("reset");
   b4f02:	f005 f9e0 	bl	ba2c6 <_ZN5Print7printlnEPKc>
    Wire.beginTransmission(addressArr[bleCount]);
   b4f06:	f006 f8b7 	bl	bb078 <_Z19__fetch_global_Wirev>
   b4f0a:	4b0e      	ldr	r3, [pc, #56]	; (b4f44 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x618>)
   b4f0c:	682a      	ldr	r2, [r5, #0]
   b4f0e:	681b      	ldr	r3, [r3, #0]
   b4f10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b4f14:	f005 f84a 	bl	b9fac <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('4');
   b4f18:	f006 f8ae 	bl	bb078 <_Z19__fetch_global_Wirev>
   b4f1c:	2134      	movs	r1, #52	; 0x34
   b4f1e:	f7ff f97f 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b4f22:	f006 f8a9 	bl	bb078 <_Z19__fetch_global_Wirev>
   b4f26:	f005 f848 	bl	b9fba <_ZN7TwoWire15endTransmissionEv>
    cityIndex = -1;
   b4f2a:	4a07      	ldr	r2, [pc, #28]	; (b4f48 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x61c>)
    bleCount = 0;
   b4f2c:	602c      	str	r4, [r5, #0]
    cityIndex = -1;
   b4f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4f32:	6013      	str	r3, [r2, #0]
    railwayIndex = -1;
   b4f34:	4a05      	ldr	r2, [pc, #20]	; (b4f4c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x620>)
   b4f36:	6013      	str	r3, [r2, #0]
   b4f38:	e575      	b.n	b4a26 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfa>
   b4f3a:	bf00      	nop
   b4f3c:	000be408 	.word	0x000be408
   b4f40:	20035308 	.word	0x20035308
   b4f44:	200352fc 	.word	0x200352fc
   b4f48:	200350ac 	.word	0x200350ac
   b4f4c:	200350c0 	.word	0x200350c0

000b4f50 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4f50:	2900      	cmp	r1, #0
      _M_create_storage(size_t __n)
   b4f52:	b538      	push	{r3, r4, r5, lr}
   b4f54:	4604      	mov	r4, r0
      _M_allocate(size_t __n)
   b4f56:	ea4f 0581 	mov.w	r5, r1, lsl #2
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4f5a:	d00c      	beq.n	b4f76 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x26>
	if (__n > this->_M_max_size())
   b4f5c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   b4f60:	d301      	bcc.n	b4f66 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x16>
	  std::__throw_bad_alloc();
   b4f62:	f006 f8ef 	bl	bb144 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4f66:	4628      	mov	r0, r5
   b4f68:	f7ff f895 	bl	b4096 <_Znwj>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4f6c:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4f70:	4428      	add	r0, r5
   b4f72:	60a0      	str	r0, [r4, #8]
      }
   b4f74:	bd38      	pop	{r3, r4, r5, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4f76:	4608      	mov	r0, r1
   b4f78:	e7f8      	b.n	b4f6c <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x1c>

000b4f7a <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b4f7a:	b538      	push	{r3, r4, r5, lr}
   b4f7c:	4604      	mov	r4, r0
   b4f7e:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b4f80:	42ac      	cmp	r4, r5
   b4f82:	d004      	beq.n	b4f8e <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x14>
      }
   b4f84:	4620      	mov	r0, r4
   b4f86:	f7ff fbdd 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4f8a:	340c      	adds	r4, #12
   b4f8c:	e7f8      	b.n	b4f80 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x6>
	    std::_Destroy(std::__addressof(*__first));
	}
   b4f8e:	bd38      	pop	{r3, r4, r5, pc}

000b4f90 <_ZN7RailwayD1Ev>:
#include "Checkpoint.cpp"
#include <string>

//container for all data for each rail line
class Railway{
   b4f90:	b510      	push	{r4, lr}
   b4f92:	4604      	mov	r4, r0
   b4f94:	3048      	adds	r0, #72	; 0x48
   b4f96:	f7ff fbf6 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b4f9a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b4f9e:	f006 f909 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
   b4fa2:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b4fa6:	f7ff ffe8 	bl	b4f7a <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	_M_deallocate(_M_impl._M_start,
   b4faa:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b4fac:	b118      	cbz	r0, b4fb6 <_ZN7RailwayD1Ev+0x26>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4fae:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	::operator delete(__p
   b4fb0:	1a09      	subs	r1, r1, r0
   b4fb2:	f7ff f876 	bl	b40a2 <_ZdlPvj>
      }
   b4fb6:	f104 0018 	add.w	r0, r4, #24
   b4fba:	f7ff fbc3 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4fbe:	f104 000c 	add.w	r0, r4, #12
   b4fc2:	f7ff fbb5 	bl	b4730 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b4fc6:	4620      	mov	r0, r4
   b4fc8:	f7ff fba8 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
   b4fcc:	4620      	mov	r0, r4
   b4fce:	bd10      	pop	{r4, pc}

000b4fd0 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b4fd0:	b538      	push	{r3, r4, r5, lr}
   b4fd2:	4604      	mov	r4, r0
   b4fd4:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b4fd6:	42ac      	cmp	r4, r5
   b4fd8:	d004      	beq.n	b4fe4 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_+0x14>
      __pointer->~_Tp();
   b4fda:	4620      	mov	r0, r4
   b4fdc:	f7ff ffd8 	bl	b4f90 <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b4fe0:	346c      	adds	r4, #108	; 0x6c
   b4fe2:	e7f8      	b.n	b4fd6 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_+0x6>
	}
   b4fe4:	bd38      	pop	{r3, r4, r5, pc}

000b4fe6 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b4fe6:	b510      	push	{r4, lr}
   b4fe8:	4604      	mov	r4, r0
	__destroy(__first, __last);
   b4fea:	e9d0 0100 	ldrd	r0, r1, [r0]
   b4fee:	f7ff ffef 	bl	b4fd0 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
   b4ff2:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4ff4:	b118      	cbz	r0, b4ffe <_ZNSt6vectorI7RailwaySaIS0_EED1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4ff6:	68a1      	ldr	r1, [r4, #8]
   b4ff8:	1a09      	subs	r1, r1, r0
   b4ffa:	f7ff f852 	bl	b40a2 <_ZdlPvj>
      }
   b4ffe:	4620      	mov	r0, r4
   b5000:	bd10      	pop	{r4, pc}

000b5002 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b5002:	b538      	push	{r3, r4, r5, lr}
   b5004:	4604      	mov	r4, r0
   b5006:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b5008:	42ac      	cmp	r4, r5
   b500a:	d008      	beq.n	b501e <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_+0x1c>
   b500c:	f104 000c 	add.w	r0, r4, #12
   b5010:	f006 f8d0 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
#include "Railway.cpp"

class City{
   b5014:	4620      	mov	r0, r4
   b5016:	f7ff ffe6 	bl	b4fe6 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b501a:	3428      	adds	r4, #40	; 0x28
   b501c:	e7f4      	b.n	b5008 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_+0x6>
	}
   b501e:	bd38      	pop	{r3, r4, r5, pc}

000b5020 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b5020:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b5022:	b510      	push	{r4, lr}
   b5024:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b5026:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b502a:	d005      	beq.n	b5038 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b502c:	4601      	mov	r1, r0
   b502e:	4622      	mov	r2, r4
   b5030:	4618      	mov	r0, r3
   b5032:	f007 f87d 	bl	bc130 <memmove>
   b5036:	4603      	mov	r3, r0
	}
   b5038:	1918      	adds	r0, r3, r4
   b503a:	bd10      	pop	{r4, pc}

000b503c <_ZNSt6vectorIiSaIiEEC1ERKS1_>:
      vector(const vector& __x)
   b503c:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b503e:	e9d1 3600 	ldrd	r3, r6, [r1]
   b5042:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5044:	2300      	movs	r3, #0
      vector(const vector& __x)
   b5046:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5048:	e9c0 3300 	strd	r3, r3, [r0]
   b504c:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b504e:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
   b5050:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5052:	f7ff f8a5 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b5056:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b505a:	4406      	add	r6, r0
   b505c:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b505e:	4602      	mov	r2, r0
			      _Category>::__copy_m(__first, __last, __result);
   b5060:	e9d5 0100 	ldrd	r0, r1, [r5]
   b5064:	f7ff ffdc 	bl	b5020 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
   b5068:	6060      	str	r0, [r4, #4]
      }
   b506a:	4620      	mov	r0, r4
   b506c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>:
      vector(initializer_list<value_type> __l,
   b5070:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b5072:	ab04      	add	r3, sp, #16
   b5074:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5078:	2300      	movs	r3, #0
   b507a:	e9c0 3300 	strd	r3, r3, [r0]
   b507e:	6083      	str	r3, [r0, #8]
      vector(initializer_list<value_type> __l,
   b5080:	4604      	mov	r4, r0
   b5082:	4613      	mov	r3, r2
   b5084:	460e      	mov	r6, r1
   b5086:	0095      	lsls	r5, r2, #2
   b5088:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   b508c:	f342 001d 	sbfx	r0, r2, #0, #30
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b5090:	4a0a      	ldr	r2, [pc, #40]	; (b50bc <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x4c>)
   b5092:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   b5096:	d202      	bcs.n	b509e <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x2e>
	  __throw_length_error(
   b5098:	4809      	ldr	r0, [pc, #36]	; (b50c0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x50>)
   b509a:	f006 f859 	bl	bb150 <_ZSt20__throw_length_errorPKc>
   b509e:	9101      	str	r1, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b50a0:	f7ff f87e 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b50a4:	4405      	add	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b50a6:	4602      	mov	r2, r0
   b50a8:	6020      	str	r0, [r4, #0]
   b50aa:	9901      	ldr	r1, [sp, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b50ac:	60a5      	str	r5, [r4, #8]
   b50ae:	4630      	mov	r0, r6
   b50b0:	f7ff ffb6 	bl	b5020 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
   b50b4:	6060      	str	r0, [r4, #4]
      }
   b50b6:	b004      	add	sp, #16
   b50b8:	bd70      	pop	{r4, r5, r6, pc}
   b50ba:	bf00      	nop
   b50bc:	7ffffffc 	.word	0x7ffffffc
   b50c0:	000be33b 	.word	0x000be33b

000b50c4 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>:
      if (&__x != this)
   b50c4:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b50c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b50c8:	4604      	mov	r4, r0
   b50ca:	460d      	mov	r5, r1
      if (&__x != this)
   b50cc:	d01d      	beq.n	b510a <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x46>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b50ce:	e9d1 7100 	ldrd	r7, r1, [r1]
			 - this->_M_impl._M_start); }
   b50d2:	6802      	ldr	r2, [r0, #0]
   b50d4:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b50d6:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b50d8:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b50da:	429e      	cmp	r6, r3
   b50dc:	d917      	bls.n	b510e <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x4a>
	  pointer __result = this->_M_allocate(__n);
   b50de:	10b0      	asrs	r0, r6, #2
   b50e0:	9101      	str	r1, [sp, #4]
   b50e2:	f7ff f85d 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
   b50e6:	9901      	ldr	r1, [sp, #4]
   b50e8:	4602      	mov	r2, r0
   b50ea:	4605      	mov	r5, r0
   b50ec:	4638      	mov	r0, r7
   b50ee:	f7ff ff97 	bl	b5020 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b50f2:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b50f4:	b118      	cbz	r0, b50fe <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x3a>
			    - this->_M_impl._M_start);
   b50f6:	68a1      	ldr	r1, [r4, #8]
   b50f8:	1a09      	subs	r1, r1, r0
   b50fa:	f7fe ffd2 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b50fe:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b5100:	4435      	add	r5, r6
   b5102:	60a5      	str	r5, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b5104:	6823      	ldr	r3, [r4, #0]
   b5106:	4433      	add	r3, r6
   b5108:	6063      	str	r3, [r4, #4]
    }
   b510a:	b003      	add	sp, #12
   b510c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b510e:	6843      	ldr	r3, [r0, #4]
   b5110:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b5112:	429e      	cmp	r6, r3
   b5114:	d803      	bhi.n	b511e <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x5a>
   b5116:	4638      	mov	r0, r7
   b5118:	f7ff ff82 	bl	b5020 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
   b511c:	e7f2      	b.n	b5104 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x40>
   b511e:	18f9      	adds	r1, r7, r3
   b5120:	4638      	mov	r0, r7
   b5122:	f7ff ff7d 	bl	b5020 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
   b5126:	e9d4 0200 	ldrd	r0, r2, [r4]
   b512a:	e9d5 3100 	ldrd	r3, r1, [r5]
   b512e:	1a10      	subs	r0, r2, r0
   b5130:	4418      	add	r0, r3
   b5132:	e7f1      	b.n	b5118 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x54>

000b5134 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b5134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5138:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b513a:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b513c:	480b      	ldr	r0, [pc, #44]	; (b516c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x38>)
   b513e:	10a4      	asrs	r4, r4, #2
   b5140:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b5142:	4616      	mov	r6, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5144:	4627      	mov	r7, r4
   b5146:	4690      	mov	r8, r2
   b5148:	2f00      	cmp	r7, #0
   b514a:	dd08      	ble.n	b515e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x2a>
	      *__result = *__first;
   b514c:	4629      	mov	r1, r5
   b514e:	4640      	mov	r0, r8
   b5150:	f7ff ffb8 	bl	b50c4 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	      ++__first;
   b5154:	350c      	adds	r5, #12
	      ++__result;
   b5156:	f108 080c 	add.w	r8, r8, #12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b515a:	3f01      	subs	r7, #1
   b515c:	e7f4      	b.n	b5148 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x14>
	  return __result;
   b515e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b5162:	200c      	movs	r0, #12
   b5164:	fb00 6004 	mla	r0, r0, r4, r6
   b5168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b516c:	aaaaaaab 	.word	0xaaaaaaab

000b5170 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>:
    std::vector<std::string> colors;
    int tripleIndex = -1;
    int loopIndex = -1;
    int lowerLoopBound, upperLoopBound, lowerGreenBound, upperGreenBound;

    Railway(std::vector<Checkpoint> checkpointInput, std::vector<int> scalerInput, std::vector<int> outputSize, std::string nameInput, std::vector<std::string> colorInput, std::vector<int> boundInput = {0, 0, 0, 0}){
   b5170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5174:	2500      	movs	r5, #0
   b5176:	4699      	mov	r9, r3
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b5178:	f100 0338 	add.w	r3, r0, #56	; 0x38
      { _M_string_length = __length; }
   b517c:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   b5180:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5184:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
   b5188:	4604      	mov	r4, r0
   b518a:	e9c0 5500 	strd	r5, r5, [r0]
   b518e:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b5192:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b5196:	e9c0 5506 	strd	r5, r5, [r0, #24]
   b519a:	e9c0 5508 	strd	r5, r5, [r0, #32]
   b519e:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
   b51a2:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
   b51a6:	b099      	sub	sp, #100	; 0x64
      { __c1 = __c2; }
   b51a8:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
   b51ac:	6505      	str	r5, [r0, #80]	; 0x50
   b51ae:	4692      	mov	sl, r2
   b51b0:	f100 0b18 	add.w	fp, r0, #24
   b51b4:	f100 0830 	add.w	r8, r0, #48	; 0x30
   b51b8:	f100 0748 	add.w	r7, r0, #72	; 0x48
      checkpoints = checkpointInput;
   b51bc:	f7ff f846 	bl	b424c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b51c0:	e9d4 2300 	ldrd	r2, r3, [r4]
   b51c4:	1a9b      	subs	r3, r3, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b51c6:	42ab      	cmp	r3, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b51c8:	ea4f 01e3 	mov.w	r1, r3, asr #3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b51cc:	da02      	bge.n	b51d4 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x64>
	  __throw_length_error(
   b51ce:	485f      	ldr	r0, [pc, #380]	; (b534c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1dc>)
   b51d0:	f005 ffbe 	bl	bb150 <_ZSt20__throw_length_errorPKc>
      { _M_create_storage(__n); }
   b51d4:	a809      	add	r0, sp, #36	; 0x24
   b51d6:	9101      	str	r1, [sp, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b51d8:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b51dc:	950b      	str	r5, [sp, #44]	; 0x2c
      { _M_create_storage(__n); }
   b51de:	f7ff feb7 	bl	b4f50 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
      if (__n <= 0)
   b51e2:	9901      	ldr	r1, [sp, #4]
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
   b51e4:	9809      	ldr	r0, [sp, #36]	; 0x24
   b51e6:	b131      	cbz	r1, b51f6 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x86>
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
   b51e8:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	*__first = __tmp;
   b51ec:	008a      	lsls	r2, r1, #2
   b51ee:	4629      	mov	r1, r5
   b51f0:	f006 ffb8 	bl	bc164 <memset>
   b51f4:	4630      	mov	r0, r6
	  _M_finish = __x._M_finish;
   b51f6:	e9d4 5203 	ldrd	r5, r2, [r4, #12]
	  _M_start = __x._M_start;
   b51fa:	9909      	ldr	r1, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
   b51fc:	6963      	ldr	r3, [r4, #20]
   b51fe:	930e      	str	r3, [sp, #56]	; 0x38
	  _M_finish = __x._M_finish;
   b5200:	e9c4 1003 	strd	r1, r0, [r4, #12]
      }
   b5204:	ae0c      	add	r6, sp, #48	; 0x30
	  _M_end_of_storage = __x._M_end_of_storage;
   b5206:	990b      	ldr	r1, [sp, #44]	; 0x2c
   b5208:	6161      	str	r1, [r4, #20]
	  _M_finish = __x._M_finish;
   b520a:	e9cd 520c 	strd	r5, r2, [sp, #48]	; 0x30
      }
   b520e:	4630      	mov	r0, r6
	  _M_start = __x._M_start;
   b5210:	2500      	movs	r5, #0
	  _M_finish = __x._M_finish;
   b5212:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
   b5216:	950b      	str	r5, [sp, #44]	; 0x2c
      }
   b5218:	f7ff fa8a 	bl	b4730 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b521c:	a809      	add	r0, sp, #36	; 0x24
   b521e:	f7ff fa87 	bl	b4730 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
      distances = std::vector<float>(checkpoints.size(), 0);
      scalers = scalerInput;
   b5222:	4651      	mov	r1, sl
   b5224:	4658      	mov	r0, fp
   b5226:	f7ff ff4d 	bl	b50c4 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
      outputs = {std::vector<int>(outputSize[0], 0), std::vector<int>(outputSize[1], 0), std::vector<int>(outputSize[2], 0), std::vector<int>(outputSize[3], 0)};
   b522a:	f8d9 1000 	ldr.w	r1, [r9]
   b522e:	9506      	str	r5, [sp, #24]
   b5230:	6809      	ldr	r1, [r1, #0]
   b5232:	ab02      	add	r3, sp, #8
   b5234:	aa06      	add	r2, sp, #24
   b5236:	4630      	mov	r0, r6
   b5238:	f7ff fab8 	bl	b47ac <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b523c:	f8d9 1000 	ldr.w	r1, [r9]
   b5240:	9507      	str	r5, [sp, #28]
   b5242:	6849      	ldr	r1, [r1, #4]
   b5244:	ab03      	add	r3, sp, #12
   b5246:	aa07      	add	r2, sp, #28
   b5248:	a80f      	add	r0, sp, #60	; 0x3c
   b524a:	f7ff faaf 	bl	b47ac <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b524e:	f8d9 1000 	ldr.w	r1, [r9]
   b5252:	9508      	str	r5, [sp, #32]
   b5254:	6889      	ldr	r1, [r1, #8]
   b5256:	ab04      	add	r3, sp, #16
   b5258:	aa08      	add	r2, sp, #32
   b525a:	a812      	add	r0, sp, #72	; 0x48
   b525c:	f7ff faa6 	bl	b47ac <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b5260:	f8d9 1000 	ldr.w	r1, [r9]
   b5264:	9509      	str	r5, [sp, #36]	; 0x24
   b5266:	ab05      	add	r3, sp, #20
   b5268:	aa09      	add	r2, sp, #36	; 0x24
   b526a:	68c9      	ldr	r1, [r1, #12]
   b526c:	a815      	add	r0, sp, #84	; 0x54
   b526e:	f7ff fa9d 	bl	b47ac <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
			 - this->_M_impl._M_start); }
   b5272:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b5274:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b5276:	1a9b      	subs	r3, r3, r2
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
		    std::forward_iterator_tag)
      {
	const size_type __len = std::distance(__first, __last);

	if (__len > capacity())
   b5278:	2b2f      	cmp	r3, #47	; 0x2f
   b527a:	d83f      	bhi.n	b52fc <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x18c>
	  pointer __result = this->_M_allocate(__n);
   b527c:	2004      	movs	r0, #4
   b527e:	f7fe ff31 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
   b5282:	46b3      	mov	fp, r6
   b5284:	4605      	mov	r5, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b5286:	f100 0a30 	add.w	sl, r0, #48	; 0x30
	  _ForwardIterator __cur = __result;
   b528a:	4681      	mov	r9, r0
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b528c:	f1b9 0f00 	cmp.w	r9, #0
   b5290:	d003      	beq.n	b529a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x12a>
   b5292:	4659      	mov	r1, fp
   b5294:	4648      	mov	r0, r9
   b5296:	f7ff fed1 	bl	b503c <_ZNSt6vectorIiSaIiEEC1ERKS1_>
	      for (; __first != __last; ++__first, (void)++__cur)
   b529a:	f109 090c 	add.w	r9, r9, #12
   b529e:	45d1      	cmp	r9, sl
   b52a0:	f10b 0b0c 	add.w	fp, fp, #12
   b52a4:	d1f2      	bne.n	b528c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x11c>
	__destroy(__first, __last);
   b52a6:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b52aa:	f7ff fe66 	bl	b4f7a <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	    _S_check_init_len(__len, _M_get_Tp_allocator());
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
	    _M_deallocate(this->_M_impl._M_start,
   b52ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b52b0:	b118      	cbz	r0, b52ba <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x14a>
			  this->_M_impl._M_end_of_storage
			  - this->_M_impl._M_start);
   b52b2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b52b4:	1a09      	subs	r1, r1, r0
   b52b6:	f7fe fef4 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b52ba:	e9c4 5a09 	strd	r5, sl, [r4, #36]	; 0x24
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b52be:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
   b52c2:	ad18      	add	r5, sp, #96	; 0x60
   b52c4:	3d0c      	subs	r5, #12
      }
   b52c6:	4628      	mov	r0, r5
   b52c8:	f7ff fa3c 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b52cc:	42b5      	cmp	r5, r6
   b52ce:	d1f9      	bne.n	b52c4 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x154>
	this->_M_assign(__str);
   b52d0:	9922      	ldr	r1, [sp, #136]	; 0x88
   b52d2:	4640      	mov	r0, r8
   b52d4:	f005 ff8c 	bl	bb1f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
      name = nameInput;
      colors = colorInput;
   b52d8:	4638      	mov	r0, r7
   b52da:	9923      	ldr	r1, [sp, #140]	; 0x8c
   b52dc:	f7ff f808 	bl	b42f0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
	return *(this->_M_impl._M_start + __n);
   b52e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b52e2:	681b      	ldr	r3, [r3, #0]
      lowerLoopBound = boundInput[0];
   b52e4:	681a      	ldr	r2, [r3, #0]
   b52e6:	65e2      	str	r2, [r4, #92]	; 0x5c
      upperLoopBound = boundInput[1];
   b52e8:	685a      	ldr	r2, [r3, #4]
   b52ea:	6622      	str	r2, [r4, #96]	; 0x60
      lowerGreenBound = boundInput[2];
   b52ec:	689a      	ldr	r2, [r3, #8]
      upperGreenBound = boundInput[3];
   b52ee:	68db      	ldr	r3, [r3, #12]
      lowerGreenBound = boundInput[2];
   b52f0:	6662      	str	r2, [r4, #100]	; 0x64
    }
   b52f2:	4620      	mov	r0, r4
      upperGreenBound = boundInput[3];
   b52f4:	66a3      	str	r3, [r4, #104]	; 0x68
    }
   b52f6:	b019      	add	sp, #100	; 0x64
   b52f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b52fc:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   b52fe:	1aad      	subs	r5, r5, r2
	  }
	else if (size() >= __len)
   b5300:	2d2f      	cmp	r5, #47	; 0x2f
   b5302:	d90b      	bls.n	b531c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ac>
			      _Category>::__copy_m(__first, __last, __result);
   b5304:	a918      	add	r1, sp, #96	; 0x60
   b5306:	4630      	mov	r0, r6
   b5308:	f7ff ff14 	bl	b5134 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b530c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b530e:	4288      	cmp	r0, r1
   b5310:	4605      	mov	r5, r0
   b5312:	d0d6      	beq.n	b52c2 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
   b5314:	f7ff fe31 	bl	b4f7a <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   b5318:	62a5      	str	r5, [r4, #40]	; 0x28
   b531a:	e7d2      	b.n	b52c2 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b531c:	4435      	add	r5, r6
   b531e:	4629      	mov	r1, r5
   b5320:	4630      	mov	r0, r6
   b5322:	f7ff ff07 	bl	b5134 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5326:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
   b532a:	ab18      	add	r3, sp, #96	; 0x60
   b532c:	429d      	cmp	r5, r3
   b532e:	d00a      	beq.n	b5346 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1d6>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b5330:	f1b9 0f00 	cmp.w	r9, #0
   b5334:	d003      	beq.n	b533e <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ce>
   b5336:	4629      	mov	r1, r5
   b5338:	4648      	mov	r0, r9
   b533a:	f7ff fe7f 	bl	b503c <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b533e:	350c      	adds	r5, #12
   b5340:	f109 090c 	add.w	r9, r9, #12
   b5344:	e7f1      	b.n	b532a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ba>
	    _ForwardIterator __mid = __first;
	    std::advance(__mid, size());
	    std::copy(__first, __mid, this->_M_impl._M_start);
	    const size_type __attribute__((__unused__)) __n = __len - size();
	    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	    this->_M_impl._M_finish =
   b5346:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
   b534a:	e7ba      	b.n	b52c2 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
   b534c:	000be33b 	.word	0x000be33b

000b5350 <_Z41__static_initialization_and_destruction_0ii.constprop.0>:
   b5350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5354:	ed2d 8b0e 	vpush	{d8-d14}
   b5358:	2801      	cmp	r0, #1
   b535a:	4db4      	ldr	r5, [pc, #720]	; (b562c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2dc>)
   b535c:	f5ad 7d41 	sub.w	sp, sp, #772	; 0x304
   b5360:	f041 810f 	bne.w	b6582 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1232>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5364:	2400      	movs	r4, #0
    SleepResult() {}
   b5366:	4bb2      	ldr	r3, [pc, #712]	; (b5630 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e0>)
   b5368:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   b536a:	e9c5 4400 	strd	r4, r4, [r5]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b536e:	2003      	movs	r0, #3
   b5370:	f003 fac6 	bl	b8900 <set_system_mode>
  public:
    float lat;
    float lon;

    Checkpoint(float la, float lo){
      lat = la;
   b5374:	4baf      	ldr	r3, [pc, #700]	; (b5634 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e4>)
   b5376:	93a4      	str	r3, [sp, #656]	; 0x290
      lon = lo;
   b5378:	4baf      	ldr	r3, [pc, #700]	; (b5638 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e8>)
   b537a:	93a5      	str	r3, [sp, #660]	; 0x294
      lat = la;
   b537c:	4baf      	ldr	r3, [pc, #700]	; (b563c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2ec>)
   b537e:	93a6      	str	r3, [sp, #664]	; 0x298
      lon = lo;
   b5380:	4baf      	ldr	r3, [pc, #700]	; (b5640 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f0>)
   b5382:	93a7      	str	r3, [sp, #668]	; 0x29c
      lat = la;
   b5384:	4baf      	ldr	r3, [pc, #700]	; (b5644 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f4>)
   b5386:	93a8      	str	r3, [sp, #672]	; 0x2a0
      lon = lo;
   b5388:	4baf      	ldr	r3, [pc, #700]	; (b5648 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f8>)
   b538a:	93a9      	str	r3, [sp, #676]	; 0x2a4
      lat = la;
   b538c:	4baf      	ldr	r3, [pc, #700]	; (b564c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2fc>)
   b538e:	93aa      	str	r3, [sp, #680]	; 0x2a8
      lon = lo;
   b5390:	4baf      	ldr	r3, [pc, #700]	; (b5650 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x300>)
   b5392:	93ab      	str	r3, [sp, #684]	; 0x2ac
      lat = la;
   b5394:	4baf      	ldr	r3, [pc, #700]	; (b5654 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x304>)
   b5396:	93ac      	str	r3, [sp, #688]	; 0x2b0
      lon = lo;
   b5398:	4baf      	ldr	r3, [pc, #700]	; (b5658 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x308>)
   b539a:	93ad      	str	r3, [sp, #692]	; 0x2b4
);
   b539c:	aba4      	add	r3, sp, #656	; 0x290
   b539e:	937e      	str	r3, [sp, #504]	; 0x1f8
   b53a0:	2305      	movs	r3, #5
   b53a2:	937f      	str	r3, [sp, #508]	; 0x1fc
   b53a4:	f50d 7ae8 	add.w	sl, sp, #464	; 0x1d0
   b53a8:	aa7e      	add	r2, sp, #504	; 0x1f8
   b53aa:	4653      	mov	r3, sl
   b53ac:	ca06      	ldmia	r2, {r1, r2}
   b53ae:	a88c      	add	r0, sp, #560	; 0x230
   b53b0:	f7ff fa1e 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b53b4:	4ba9      	ldr	r3, [pc, #676]	; (b565c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x30c>)
      lat = la;
   b53b6:	eddf 8aaa 	vldr	s17, [pc, #680]	; b5660 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x310>
      lon = lo;
   b53ba:	ed9f 8aaa 	vldr	s16, [pc, #680]	; b5664 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x314>
      lat = la;
   b53be:	eddf 9aaa 	vldr	s19, [pc, #680]	; b5668 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x318>
      lon = lo;
   b53c2:	ed9f 9aaa 	vldr	s18, [pc, #680]	; b566c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x31c>
      lat = la;
   b53c6:	eddf aaaa 	vldr	s21, [pc, #680]	; b5670 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x320>
      lon = lo;
   b53ca:	ed9f aaaa 	vldr	s20, [pc, #680]	; b5674 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x324>
      lat = la;
   b53ce:	eddf baaa 	vldr	s23, [pc, #680]	; b5678 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x328>
      lon = lo;
   b53d2:	ed9f baaa 	vldr	s22, [pc, #680]	; b567c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x32c>
      lat = la;
   b53d6:	eddf daaa 	vldr	s27, [pc, #680]	; b5680 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x330>
      lon = lo;
   b53da:	ed9f daaa 	vldr	s26, [pc, #680]	; b5684 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x334>
      lat = la;
   b53de:	eddf caaa 	vldr	s25, [pc, #680]	; b5688 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x338>
      lon = lo;
   b53e2:	ed9f caaa 	vldr	s24, [pc, #680]	; b568c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x33c>
   b53e6:	ed9f eaaa 	vldr	s28, [pc, #680]	; b5690 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x340>
   b53ea:	461f      	mov	r7, r3
   b53ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b53ee:	f50d 7b17 	add.w	fp, sp, #604	; 0x25c
   b53f2:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
   b53f6:	2204      	movs	r2, #4
   b53f8:	ad89      	add	r5, sp, #548	; 0x224
   b53fa:	ab7c      	add	r3, sp, #496	; 0x1f0
   b53fc:	f8cd b1f0 	str.w	fp, [sp, #496]	; 0x1f0
   b5400:	927d      	str	r2, [sp, #500]	; 0x1f4
   b5402:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5406:	4628      	mov	r0, r5
   b5408:	f7ff fe32 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b540c:	2228      	movs	r2, #40	; 0x28
   b540e:	e9cd 2494 	strd	r2, r4, [sp, #592]	; 0x250
   b5412:	aa93      	add	r2, sp, #588	; 0x24c
   b5414:	927a      	str	r2, [sp, #488]	; 0x1e8
   b5416:	2204      	movs	r2, #4
   b5418:	f50d 7806 	add.w	r8, sp, #536	; 0x218
   b541c:	ab7a      	add	r3, sp, #488	; 0x1e8
   b541e:	927b      	str	r2, [sp, #492]	; 0x1ec
   b5420:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5424:	4640      	mov	r0, r8
   b5426:	9493      	str	r4, [sp, #588]	; 0x24c
   b5428:	9496      	str	r4, [sp, #600]	; 0x258
   b542a:	f7ff fe21 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b542e:	a89d      	add	r0, sp, #628	; 0x274
   b5430:	4998      	ldr	r1, [pc, #608]	; (b5694 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x344>)
   b5432:	f7fe fe69 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5436:	a8b0      	add	r0, sp, #704	; 0x2c0
   b5438:	4997      	ldr	r1, [pc, #604]	; (b5698 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x348>)
   b543a:	f7fe fe65 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b543e:	a8b6      	add	r0, sp, #728	; 0x2d8
   b5440:	4996      	ldr	r1, [pc, #600]	; (b569c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x34c>)
   b5442:	f7fe fe61 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5446:	a9b0      	add	r1, sp, #704	; 0x2c0
   b5448:	9178      	str	r1, [sp, #480]	; 0x1e0
   b544a:	2102      	movs	r1, #2
   b544c:	f50d 79e4 	add.w	r9, sp, #456	; 0x1c8
   b5450:	9179      	str	r1, [sp, #484]	; 0x1e4
   b5452:	aa78      	add	r2, sp, #480	; 0x1e0
   b5454:	464b      	mov	r3, r9
   b5456:	ca06      	ldmia	r2, {r1, r2}
   b5458:	a883      	add	r0, sp, #524	; 0x20c
   b545a:	f7ff f9fd 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b545e:	4621      	mov	r1, r4
   b5460:	2210      	movs	r2, #16
   b5462:	a88f      	add	r0, sp, #572	; 0x23c
   b5464:	f006 fe7e 	bl	bc164 <memset>
   b5468:	aa8f      	add	r2, sp, #572	; 0x23c
   b546a:	9276      	str	r2, [sp, #472]	; 0x1d8
   b546c:	2204      	movs	r2, #4
   b546e:	ae80      	add	r6, sp, #512	; 0x200
   b5470:	ab76      	add	r3, sp, #472	; 0x1d8
   b5472:	9277      	str	r2, [sp, #476]	; 0x1dc
   b5474:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5478:	4630      	mov	r0, r6
   b547a:	f7ff fdf9 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway redLineCTA = Railway(
   b547e:	aa83      	add	r2, sp, #524	; 0x20c
   b5480:	9201      	str	r2, [sp, #4]
   b5482:	aa9d      	add	r2, sp, #628	; 0x274
   b5484:	4643      	mov	r3, r8
   b5486:	a98c      	add	r1, sp, #560	; 0x230
   b5488:	9602      	str	r6, [sp, #8]
   b548a:	9200      	str	r2, [sp, #0]
   b548c:	4884      	ldr	r0, [pc, #528]	; (b56a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x350>)
   b548e:	462a      	mov	r2, r5
   b5490:	f7ff fe6e 	bl	b5170 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
      }
   b5494:	4630      	mov	r0, r6
   b5496:	f7ff f955 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b549a:	a883      	add	r0, sp, #524	; 0x20c
   b549c:	f7ff f973 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b54a0:	a8b6      	add	r0, sp, #728	; 0x2d8
   b54a2:	f005 fe87 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b54a6:	a8b0      	add	r0, sp, #704	; 0x2c0
   b54a8:	f005 fe84 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b54ac:	a89d      	add	r0, sp, #628	; 0x274
   b54ae:	f005 fe81 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b54b2:	4640      	mov	r0, r8
   b54b4:	f7ff f946 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b54b8:	4628      	mov	r0, r5
   b54ba:	f7ff f943 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b54be:	a88c      	add	r0, sp, #560	; 0x230
   b54c0:	f7ff f92c 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b54c4:	4b77      	ldr	r3, [pc, #476]	; (b56a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x354>)
   b54c6:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b54c8:	4b77      	ldr	r3, [pc, #476]	; (b56a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x358>)
   b54ca:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b54cc:	4b77      	ldr	r3, [pc, #476]	; (b56ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x35c>)
   b54ce:	93b2      	str	r3, [sp, #712]	; 0x2c8
      lon = lo;
   b54d0:	4b77      	ldr	r3, [pc, #476]	; (b56b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x360>)
   b54d2:	93b3      	str	r3, [sp, #716]	; 0x2cc
      lat = la;
   b54d4:	4b77      	ldr	r3, [pc, #476]	; (b56b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x364>)
   b54d6:	93b4      	str	r3, [sp, #720]	; 0x2d0
      lon = lo;
   b54d8:	4b77      	ldr	r3, [pc, #476]	; (b56b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x368>)
   b54da:	93b5      	str	r3, [sp, #724]	; 0x2d4
      lat = la;
   b54dc:	4b77      	ldr	r3, [pc, #476]	; (b56bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x36c>)
   b54de:	93b6      	str	r3, [sp, #728]	; 0x2d8
      lon = lo;
   b54e0:	4b77      	ldr	r3, [pc, #476]	; (b56c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x370>)
   b54e2:	93b7      	str	r3, [sp, #732]	; 0x2dc
      lat = la;
   b54e4:	4b77      	ldr	r3, [pc, #476]	; (b56c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x374>)
   b54e6:	93b8      	str	r3, [sp, #736]	; 0x2e0
      lon = lo;
   b54e8:	4b77      	ldr	r3, [pc, #476]	; (b56c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x378>)
   b54ea:	93b9      	str	r3, [sp, #740]	; 0x2e4
      lat = la;
   b54ec:	4b77      	ldr	r3, [pc, #476]	; (b56cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x37c>)
   b54ee:	93ba      	str	r3, [sp, #744]	; 0x2e8
);
   b54f0:	aab0      	add	r2, sp, #704	; 0x2c0
      lon = lo;
   b54f2:	4b77      	ldr	r3, [pc, #476]	; (b56d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x380>)
   b54f4:	9274      	str	r2, [sp, #464]	; 0x1d0
   b54f6:	93bb      	str	r3, [sp, #748]	; 0x2ec
   b54f8:	2207      	movs	r2, #7
      lat = la;
   b54fa:	4b76      	ldr	r3, [pc, #472]	; (b56d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x384>)
   b54fc:	9275      	str	r2, [sp, #468]	; 0x1d4
   b54fe:	93bc      	str	r3, [sp, #752]	; 0x2f0
   b5500:	aa6a      	add	r2, sp, #424	; 0x1a8
      lon = lo;
   b5502:	4b75      	ldr	r3, [pc, #468]	; (b56d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x388>)
   b5504:	93bd      	str	r3, [sp, #756]	; 0x2f4
   b5506:	a88c      	add	r0, sp, #560	; 0x230
   b5508:	4613      	mov	r3, r2
   b550a:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b550e:	f7ff f96f 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5512:	aa9d      	add	r2, sp, #628	; 0x274
   b5514:	f107 0c10 	add.w	ip, r7, #16
   b5518:	9204      	str	r2, [sp, #16]
   b551a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b551e:	9f04      	ldr	r7, [sp, #16]
   b5520:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b5522:	e89c 0003 	ldmia.w	ip, {r0, r1}
   b5526:	aa9d      	add	r2, sp, #628	; 0x274
   b5528:	9272      	str	r2, [sp, #456]	; 0x1c8
   b552a:	2206      	movs	r2, #6
   b552c:	9273      	str	r2, [sp, #460]	; 0x1cc
   b552e:	e9c7 0100 	strd	r0, r1, [r7]
   b5532:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5536:	4628      	mov	r0, r5
   b5538:	9704      	str	r7, [sp, #16]
   b553a:	f7ff fd99 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b553e:	aa93      	add	r2, sp, #588	; 0x24c
   b5540:	9270      	str	r2, [sp, #448]	; 0x1c0
   b5542:	233c      	movs	r3, #60	; 0x3c
   b5544:	2204      	movs	r2, #4
   b5546:	e9cd 3494 	strd	r3, r4, [sp, #592]	; 0x250
   b554a:	9271      	str	r2, [sp, #452]	; 0x1c4
   b554c:	ab70      	add	r3, sp, #448	; 0x1c0
   b554e:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5552:	4640      	mov	r0, r8
   b5554:	9493      	str	r4, [sp, #588]	; 0x24c
   b5556:	9496      	str	r4, [sp, #600]	; 0x258
   b5558:	f7ff fd8a 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b555c:	4658      	mov	r0, fp
   b555e:	495f      	ldr	r1, [pc, #380]	; (b56dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x38c>)
   b5560:	f7fe fdd2 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5564:	a8a4      	add	r0, sp, #656	; 0x290
   b5566:	495e      	ldr	r1, [pc, #376]	; (b56e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x390>)
   b5568:	f7fe fdce 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b556c:	a8aa      	add	r0, sp, #680	; 0x2a8
   b556e:	495d      	ldr	r1, [pc, #372]	; (b56e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x394>)
   b5570:	f7fe fdca 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5574:	aba4      	add	r3, sp, #656	; 0x290
   b5576:	2102      	movs	r1, #2
   b5578:	936e      	str	r3, [sp, #440]	; 0x1b8
   b557a:	f50d 79d0 	add.w	r9, sp, #416	; 0x1a0
   b557e:	916f      	str	r1, [sp, #444]	; 0x1bc
   b5580:	aa6e      	add	r2, sp, #440	; 0x1b8
   b5582:	464b      	mov	r3, r9
   b5584:	ca06      	ldmia	r2, {r1, r2}
   b5586:	a883      	add	r0, sp, #524	; 0x20c
   b5588:	f7ff f966 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b558c:	4621      	mov	r1, r4
   b558e:	2210      	movs	r2, #16
   b5590:	a88f      	add	r0, sp, #572	; 0x23c
   b5592:	f006 fde7 	bl	bc164 <memset>
   b5596:	aa8f      	add	r2, sp, #572	; 0x23c
   b5598:	926c      	str	r2, [sp, #432]	; 0x1b0
   b559a:	2204      	movs	r2, #4
   b559c:	ab6c      	add	r3, sp, #432	; 0x1b0
   b559e:	926d      	str	r2, [sp, #436]	; 0x1b4
   b55a0:	e893 0006 	ldmia.w	r3, {r1, r2}
   b55a4:	4630      	mov	r0, r6
   b55a6:	f7ff fd63 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway blueLineCTA = Railway(
   b55aa:	aa83      	add	r2, sp, #524	; 0x20c
   b55ac:	4643      	mov	r3, r8
   b55ae:	a98c      	add	r1, sp, #560	; 0x230
   b55b0:	e9cd b200 	strd	fp, r2, [sp]
   b55b4:	9602      	str	r6, [sp, #8]
   b55b6:	462a      	mov	r2, r5
   b55b8:	484b      	ldr	r0, [pc, #300]	; (b56e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x398>)
   b55ba:	f7ff fdd9 	bl	b5170 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b55be:	4630      	mov	r0, r6
   b55c0:	f7ff f8c0 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b55c4:	a883      	add	r0, sp, #524	; 0x20c
   b55c6:	f7ff f8de 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b55ca:	a8aa      	add	r0, sp, #680	; 0x2a8
   b55cc:	f005 fdf2 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b55d0:	a8a4      	add	r0, sp, #656	; 0x290
   b55d2:	f005 fdef 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b55d6:	4658      	mov	r0, fp
   b55d8:	f005 fdec 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b55dc:	4640      	mov	r0, r8
   b55de:	f7ff f8b1 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b55e2:	4628      	mov	r0, r5
   b55e4:	f7ff f8ae 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b55e8:	a88c      	add	r0, sp, #560	; 0x230
   b55ea:	f7ff f897 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b55ee:	aab0      	add	r2, sp, #704	; 0x2c0
   b55f0:	926a      	str	r2, [sp, #424]	; 0x1a8
   b55f2:	2207      	movs	r2, #7
   b55f4:	926b      	str	r2, [sp, #428]	; 0x1ac
   b55f6:	f50d 7ac0 	add.w	sl, sp, #384	; 0x180
   b55fa:	aa6a      	add	r2, sp, #424	; 0x1a8
   b55fc:	ca06      	ldmia	r2, {r1, r2}
   b55fe:	4653      	mov	r3, sl
   b5600:	a88c      	add	r0, sp, #560	; 0x230
      lat = la;
   b5602:	edcd 8ab4 	vstr	s17, [sp, #720]	; 0x2d0
      lon = lo;
   b5606:	ed8d 8ab5 	vstr	s16, [sp, #724]	; 0x2d4
      lat = la;
   b560a:	edcd 8abc 	vstr	s17, [sp, #752]	; 0x2f0
      lon = lo;
   b560e:	ed8d 8abd 	vstr	s16, [sp, #756]	; 0x2f4
      lat = la;
   b5612:	edcd dab0 	vstr	s27, [sp, #704]	; 0x2c0
      lon = lo;
   b5616:	ed8d dab1 	vstr	s26, [sp, #708]	; 0x2c4
      lat = la;
   b561a:	edcd cab2 	vstr	s25, [sp, #712]	; 0x2c8
      lon = lo;
   b561e:	ed8d cab3 	vstr	s24, [sp, #716]	; 0x2cc
      lat = la;
   b5622:	edcd bab6 	vstr	s23, [sp, #728]	; 0x2d8
      lon = lo;
   b5626:	ed8d bab7 	vstr	s22, [sp, #732]	; 0x2dc
   b562a:	e05f      	b.n	b56ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x39c>
   b562c:	200352b4 	.word	0x200352b4
   b5630:	ffff0000 	.word	0xffff0000
   b5634:	42276980 	.word	0x42276980
   b5638:	c2af431e 	.word	0xc2af431e
   b563c:	42279dcc 	.word	0x42279dcc
   b5640:	c2af4202 	.word	0xc2af4202
   b5644:	42279d95 	.word	0x42279d95
   b5648:	c2af476d 	.word	0xc2af476d
   b564c:	4227a7a9 	.word	0x4227a7a9
   b5650:	c2af4e05 	.word	0xc2af4e05
   b5654:	4227b382 	.word	0x4227b382
   b5658:	c2af4e44 	.word	0xc2af4e44
   b565c:	000be578 	.word	0x000be578
   b5660:	42278b1a 	.word	0x42278b1a
   b5664:	c2af449a 	.word	0xc2af449a
   b5668:	42278b2f 	.word	0x42278b2f
   b566c:	c2af4095 	.word	0xc2af4095
   b5670:	422781d8 	.word	0x422781d8
   b5674:	c2af4044 	.word	0xc2af4044
   b5678:	42278216 	.word	0x42278216
   b567c:	c2af44c1 	.word	0xc2af44c1
   b5680:	4227a49e 	.word	0x4227a49e
   b5684:	c2af4bd0 	.word	0xc2af4bd0
   b5688:	4227a437 	.word	0x4227a437
   b568c:	c2af4659 	.word	0xc2af4659
   b5690:	c2af4089 	.word	0xc2af4089
   b5694:	000be40e 	.word	0x000be40e
   b5698:	000be412 	.word	0x000be412
   b569c:	000be419 	.word	0x000be419
   b56a0:	2003e55c 	.word	0x2003e55c
   b56a4:	42277e9d 	.word	0x42277e9d
   b56a8:	c2af74b3 	.word	0xc2af74b3
   b56ac:	422780af 	.word	0x422780af
   b56b0:	c2af588e 	.word	0xc2af588e
   b56b4:	4227804d 	.word	0x4227804d
   b56b8:	c2af482e 	.word	0xc2af482e
   b56bc:	422780ad 	.word	0x422780ad
   b56c0:	c2af4157 	.word	0xc2af4157
   b56c4:	42278aff 	.word	0x42278aff
   b56c8:	c2af4253 	.word	0xc2af4253
   b56cc:	42278af4 	.word	0x42278af4
   b56d0:	c2af4798 	.word	0xc2af4798
   b56d4:	4227a978 	.word	0x4227a978
   b56d8:	c2af5f5d 	.word	0xc2af5f5d
   b56dc:	000be420 	.word	0x000be420
   b56e0:	000be425 	.word	0x000be425
   b56e4:	000be42c 	.word	0x000be42c
   b56e8:	2003530c 	.word	0x2003530c
      lat = la;
   b56ec:	edcd aab8 	vstr	s21, [sp, #736]	; 0x2e0
      lon = lo;
   b56f0:	ed8d aab9 	vstr	s20, [sp, #740]	; 0x2e4
      lat = la;
   b56f4:	edcd 9aba 	vstr	s19, [sp, #744]	; 0x2e8
      lon = lo;
   b56f8:	ed8d 9abb 	vstr	s18, [sp, #748]	; 0x2ec
   b56fc:	f7ff f878 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5700:	4bb6      	ldr	r3, [pc, #728]	; (b59dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b5702:	f103 0228 	add.w	r2, r3, #40	; 0x28
   b5706:	4617      	mov	r7, r2
   b5708:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b570a:	f50d 7c1d 	add.w	ip, sp, #628	; 0x274
   b570e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5712:	e9d7 0100 	ldrd	r0, r1, [r7]
   b5716:	9a04      	ldr	r2, [sp, #16]
   b5718:	9705      	str	r7, [sp, #20]
   b571a:	e882 0003 	stmia.w	r2, {r0, r1}
   b571e:	aa9d      	add	r2, sp, #628	; 0x274
   b5720:	9268      	str	r2, [sp, #416]	; 0x1a0
   b5722:	2206      	movs	r2, #6
   b5724:	9269      	str	r2, [sp, #420]	; 0x1a4
   b5726:	e899 0006 	ldmia.w	r9, {r1, r2}
   b572a:	4628      	mov	r0, r5
   b572c:	f7ff fca0 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5730:	f107 0208 	add.w	r2, r7, #8
   b5734:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   b5736:	af93      	add	r7, sp, #588	; 0x24c
   b5738:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b573c:	2104      	movs	r1, #4
   b573e:	ab66      	add	r3, sp, #408	; 0x198
   b5740:	9766      	str	r7, [sp, #408]	; 0x198
   b5742:	9167      	str	r1, [sp, #412]	; 0x19c
   b5744:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5748:	4640      	mov	r0, r8
   b574a:	f7ff fc91 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b574e:	4658      	mov	r0, fp
   b5750:	49a3      	ldr	r1, [pc, #652]	; (b59e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x690>)
   b5752:	f7fe fcd9 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5756:	a8a4      	add	r0, sp, #656	; 0x290
   b5758:	49a2      	ldr	r1, [pc, #648]	; (b59e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x694>)
   b575a:	f7fe fcd5 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b575e:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5760:	49a1      	ldr	r1, [pc, #644]	; (b59e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x698>)
   b5762:	f7fe fcd1 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5766:	aba4      	add	r3, sp, #656	; 0x290
   b5768:	2102      	movs	r1, #2
   b576a:	9364      	str	r3, [sp, #400]	; 0x190
   b576c:	f50d 79bc 	add.w	r9, sp, #376	; 0x178
   b5770:	9165      	str	r1, [sp, #404]	; 0x194
   b5772:	aa64      	add	r2, sp, #400	; 0x190
   b5774:	ca06      	ldmia	r2, {r1, r2}
   b5776:	464b      	mov	r3, r9
   b5778:	a883      	add	r0, sp, #524	; 0x20c
   b577a:	f7ff f86d 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b577e:	499b      	ldr	r1, [pc, #620]	; (b59ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x69c>)
   b5780:	c90f      	ldmia	r1, {r0, r1, r2, r3}
   b5782:	af8f      	add	r7, sp, #572	; 0x23c
   b5784:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5788:	2004      	movs	r0, #4
   b578a:	ab62      	add	r3, sp, #392	; 0x188
   b578c:	9762      	str	r7, [sp, #392]	; 0x188
   b578e:	9063      	str	r0, [sp, #396]	; 0x18c
   b5790:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5794:	4630      	mov	r0, r6
   b5796:	f7ff fc6b 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway brownLineCTA = Railway(
   b579a:	a883      	add	r0, sp, #524	; 0x20c
   b579c:	e9cd b000 	strd	fp, r0, [sp]
   b57a0:	a88c      	add	r0, sp, #560	; 0x230
   b57a2:	4643      	mov	r3, r8
   b57a4:	462a      	mov	r2, r5
   b57a6:	4601      	mov	r1, r0
   b57a8:	9602      	str	r6, [sp, #8]
   b57aa:	4891      	ldr	r0, [pc, #580]	; (b59f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a0>)
   b57ac:	f7ff fce0 	bl	b5170 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b57b0:	4630      	mov	r0, r6
   b57b2:	f7fe ffc7 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b57b6:	a883      	add	r0, sp, #524	; 0x20c
   b57b8:	f7fe ffe5 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b57bc:	a8aa      	add	r0, sp, #680	; 0x2a8
   b57be:	f005 fcf9 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b57c2:	a8a4      	add	r0, sp, #656	; 0x290
   b57c4:	f005 fcf6 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b57c8:	4658      	mov	r0, fp
   b57ca:	f005 fcf3 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b57ce:	4640      	mov	r0, r8
   b57d0:	f7fe ffb8 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b57d4:	4628      	mov	r0, r5
   b57d6:	f7fe ffb5 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b57da:	a88c      	add	r0, sp, #560	; 0x230
   b57dc:	f7fe ff9e 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b57e0:	4b84      	ldr	r3, [pc, #528]	; (b59f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a4>)
   b57e2:	93a4      	str	r3, [sp, #656]	; 0x290
      lon = lo;
   b57e4:	4b84      	ldr	r3, [pc, #528]	; (b59f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a8>)
   b57e6:	93a5      	str	r3, [sp, #660]	; 0x294
      lat = la;
   b57e8:	4b84      	ldr	r3, [pc, #528]	; (b59fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6ac>)
   b57ea:	93a6      	str	r3, [sp, #664]	; 0x298
   b57ec:	4b84      	ldr	r3, [pc, #528]	; (b5a00 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b0>)
   b57ee:	93aa      	str	r3, [sp, #680]	; 0x2a8
      lon = lo;
   b57f0:	4b84      	ldr	r3, [pc, #528]	; (b5a04 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b4>)
   b57f2:	93ab      	str	r3, [sp, #684]	; 0x2ac
      lat = la;
   b57f4:	4b84      	ldr	r3, [pc, #528]	; (b5a08 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b8>)
   b57f6:	93ac      	str	r3, [sp, #688]	; 0x2b0
      lon = lo;
   b57f8:	4b84      	ldr	r3, [pc, #528]	; (b5a0c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6bc>)
   b57fa:	93ad      	str	r3, [sp, #692]	; 0x2b4
);
   b57fc:	2005      	movs	r0, #5
   b57fe:	aba4      	add	r3, sp, #656	; 0x290
   b5800:	9360      	str	r3, [sp, #384]	; 0x180
   b5802:	9061      	str	r0, [sp, #388]	; 0x184
   b5804:	a856      	add	r0, sp, #344	; 0x158
   b5806:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b580a:	4603      	mov	r3, r0
   b580c:	a88c      	add	r0, sp, #560	; 0x230
   b580e:	ed8d eaa7 	vstr	s28, [sp, #668]	; 0x29c
      lat = la;
   b5812:	edcd 9aa8 	vstr	s19, [sp, #672]	; 0x2a0
      lon = lo;
   b5816:	ed8d 9aa9 	vstr	s18, [sp, #676]	; 0x2a4
   b581a:	f7fe ffe9 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b581e:	4b6f      	ldr	r3, [pc, #444]	; (b59dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b5820:	f8cd b178 	str.w	fp, [sp, #376]	; 0x178
   b5824:	461f      	mov	r7, r3
   b5826:	3360      	adds	r3, #96	; 0x60
   b5828:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b582a:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
   b582e:	2004      	movs	r0, #4
   b5830:	905f      	str	r0, [sp, #380]	; 0x17c
   b5832:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5836:	4628      	mov	r0, r5
   b5838:	f7ff fc1a 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b583c:	463b      	mov	r3, r7
   b583e:	3370      	adds	r3, #112	; 0x70
   b5840:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5842:	af93      	add	r7, sp, #588	; 0x24c
   b5844:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5848:	2004      	movs	r0, #4
   b584a:	ab5c      	add	r3, sp, #368	; 0x170
   b584c:	975c      	str	r7, [sp, #368]	; 0x170
   b584e:	905d      	str	r0, [sp, #372]	; 0x174
   b5850:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5854:	4640      	mov	r0, r8
   b5856:	f7ff fc0b 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b585a:	a89d      	add	r0, sp, #628	; 0x274
   b585c:	496c      	ldr	r1, [pc, #432]	; (b5a10 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c0>)
   b585e:	f7fe fc53 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5862:	a8b0      	add	r0, sp, #704	; 0x2c0
   b5864:	496b      	ldr	r1, [pc, #428]	; (b5a14 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c4>)
   b5866:	f7fe fc4f 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b586a:	a8b6      	add	r0, sp, #728	; 0x2d8
   b586c:	496a      	ldr	r1, [pc, #424]	; (b5a18 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c8>)
   b586e:	f7fe fc4b 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5872:	a8b0      	add	r0, sp, #704	; 0x2c0
   b5874:	905a      	str	r0, [sp, #360]	; 0x168
   b5876:	2002      	movs	r0, #2
   b5878:	905b      	str	r0, [sp, #364]	; 0x16c
   b587a:	f50d 79a8 	add.w	r9, sp, #336	; 0x150
   b587e:	aa5a      	add	r2, sp, #360	; 0x168
   b5880:	464b      	mov	r3, r9
   b5882:	ca06      	ldmia	r2, {r1, r2}
   b5884:	a883      	add	r0, sp, #524	; 0x20c
   b5886:	f7fe ffe7 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b588a:	4b54      	ldr	r3, [pc, #336]	; (b59dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b588c:	3380      	adds	r3, #128	; 0x80
   b588e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5890:	af8f      	add	r7, sp, #572	; 0x23c
   b5892:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5896:	2004      	movs	r0, #4
   b5898:	ab58      	add	r3, sp, #352	; 0x160
   b589a:	9758      	str	r7, [sp, #352]	; 0x160
   b589c:	9059      	str	r0, [sp, #356]	; 0x164
   b589e:	e893 0006 	ldmia.w	r3, {r1, r2}
   b58a2:	4630      	mov	r0, r6
   b58a4:	f7ff fbe4 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway greenLineCTA = Railway(
   b58a8:	a883      	add	r0, sp, #524	; 0x20c
   b58aa:	9001      	str	r0, [sp, #4]
   b58ac:	a89d      	add	r0, sp, #628	; 0x274
   b58ae:	9000      	str	r0, [sp, #0]
   b58b0:	a88c      	add	r0, sp, #560	; 0x230
   b58b2:	4643      	mov	r3, r8
   b58b4:	462a      	mov	r2, r5
   b58b6:	4601      	mov	r1, r0
   b58b8:	9602      	str	r6, [sp, #8]
   b58ba:	4858      	ldr	r0, [pc, #352]	; (b5a1c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6cc>)
   b58bc:	f7ff fc58 	bl	b5170 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b58c0:	4630      	mov	r0, r6
   b58c2:	f7fe ff3f 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b58c6:	a883      	add	r0, sp, #524	; 0x20c
   b58c8:	f7fe ff5d 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b58cc:	a8b6      	add	r0, sp, #728	; 0x2d8
   b58ce:	f005 fc71 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b58d2:	a8b0      	add	r0, sp, #704	; 0x2c0
   b58d4:	f005 fc6e 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b58d8:	a89d      	add	r0, sp, #628	; 0x274
   b58da:	f005 fc6b 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b58de:	4640      	mov	r0, r8
   b58e0:	f7fe ff30 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b58e4:	4628      	mov	r0, r5
   b58e6:	f7fe ff2d 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b58ea:	a88c      	add	r0, sp, #560	; 0x230
   b58ec:	f7fe ff16 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b58f0:	4b4b      	ldr	r3, [pc, #300]	; (b5a20 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d0>)
   b58f2:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b58f4:	4b4b      	ldr	r3, [pc, #300]	; (b5a24 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d4>)
   b58f6:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b58f8:	4b4b      	ldr	r3, [pc, #300]	; (b5a28 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d8>)
   b58fa:	93b2      	str	r3, [sp, #712]	; 0x2c8
      lon = lo;
   b58fc:	4b4b      	ldr	r3, [pc, #300]	; (b5a2c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6dc>)
   b58fe:	93b3      	str	r3, [sp, #716]	; 0x2cc
      lat = la;
   b5900:	4b4b      	ldr	r3, [pc, #300]	; (b5a30 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e0>)
   b5902:	93b4      	str	r3, [sp, #720]	; 0x2d0
      lon = lo;
   b5904:	4b4b      	ldr	r3, [pc, #300]	; (b5a34 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e4>)
   b5906:	93b5      	str	r3, [sp, #724]	; 0x2d4
);
   b5908:	a8b0      	add	r0, sp, #704	; 0x2c0
      lat = la;
   b590a:	4b4b      	ldr	r3, [pc, #300]	; (b5a38 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e8>)
   b590c:	9056      	str	r0, [sp, #344]	; 0x158
   b590e:	93b6      	str	r3, [sp, #728]	; 0x2d8
   b5910:	2008      	movs	r0, #8
   b5912:	4b4a      	ldr	r3, [pc, #296]	; (b5a3c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6ec>)
   b5914:	9057      	str	r0, [sp, #348]	; 0x15c
   b5916:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
   b591a:	93bc      	str	r3, [sp, #752]	; 0x2f0
   b591c:	a856      	add	r0, sp, #344	; 0x158
      lon = lo;
   b591e:	4b48      	ldr	r3, [pc, #288]	; (b5a40 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f0>)
   b5920:	93bd      	str	r3, [sp, #756]	; 0x2f4
   b5922:	e890 0006 	ldmia.w	r0, {r1, r2}
   b5926:	4653      	mov	r3, sl
   b5928:	a88c      	add	r0, sp, #560	; 0x230
      lat = la;
   b592a:	edcd 8aba 	vstr	s17, [sp, #744]	; 0x2e8
      lon = lo;
   b592e:	ed8d 8abb 	vstr	s16, [sp, #748]	; 0x2ec
   b5932:	ed8d eab7 	vstr	s28, [sp, #732]	; 0x2dc
      lat = la;
   b5936:	edcd 9ab8 	vstr	s19, [sp, #736]	; 0x2e0
      lon = lo;
   b593a:	ed8d 9ab9 	vstr	s18, [sp, #740]	; 0x2e4
      lat = la;
   b593e:	edcd aabe 	vstr	s21, [sp, #760]	; 0x2f8
      lon = lo;
   b5942:	ed8d aabf 	vstr	s20, [sp, #764]	; 0x2fc
   b5946:	f7fe ff53 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b594a:	4b24      	ldr	r3, [pc, #144]	; (b59dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b594c:	9f04      	ldr	r7, [sp, #16]
   b594e:	f103 0c90 	add.w	ip, r3, #144	; 0x90
   b5952:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5956:	f50d 7e1d 	add.w	lr, sp, #628	; 0x274
   b595a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b595e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
   b5962:	e887 0007 	stmia.w	r7, {r0, r1, r2}
   b5966:	a89d      	add	r0, sp, #628	; 0x274
   b5968:	9054      	str	r0, [sp, #336]	; 0x150
   b596a:	2007      	movs	r0, #7
   b596c:	9055      	str	r0, [sp, #340]	; 0x154
   b596e:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5972:	4628      	mov	r0, r5
   b5974:	f7ff fb7c 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5978:	4b18      	ldr	r3, [pc, #96]	; (b59dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b597a:	33ac      	adds	r3, #172	; 0xac
   b597c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b597e:	af93      	add	r7, sp, #588	; 0x24c
   b5980:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5984:	2004      	movs	r0, #4
   b5986:	ab52      	add	r3, sp, #328	; 0x148
   b5988:	9752      	str	r7, [sp, #328]	; 0x148
   b598a:	9053      	str	r0, [sp, #332]	; 0x14c
   b598c:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5990:	4640      	mov	r0, r8
   b5992:	f7ff fb6d 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5996:	4658      	mov	r0, fp
   b5998:	492a      	ldr	r1, [pc, #168]	; (b5a44 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f4>)
   b599a:	f7fe fbb5 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b599e:	a8a4      	add	r0, sp, #656	; 0x290
   b59a0:	4929      	ldr	r1, [pc, #164]	; (b5a48 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f8>)
   b59a2:	f7fe fbb1 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b59a6:	a8aa      	add	r0, sp, #680	; 0x2a8
   b59a8:	4928      	ldr	r1, [pc, #160]	; (b5a4c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6fc>)
   b59aa:	f7fe fbad 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b59ae:	aba4      	add	r3, sp, #656	; 0x290
   b59b0:	2002      	movs	r0, #2
   b59b2:	9350      	str	r3, [sp, #320]	; 0x140
   b59b4:	9051      	str	r0, [sp, #324]	; 0x144
   b59b6:	f50d 7994 	add.w	r9, sp, #296	; 0x128
   b59ba:	aa50      	add	r2, sp, #320	; 0x140
   b59bc:	464b      	mov	r3, r9
   b59be:	ca06      	ldmia	r2, {r1, r2}
   b59c0:	a883      	add	r0, sp, #524	; 0x20c
   b59c2:	f7fe ff49 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b59c6:	4b05      	ldr	r3, [pc, #20]	; (b59dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b59c8:	33bc      	adds	r3, #188	; 0xbc
   b59ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b59cc:	af8f      	add	r7, sp, #572	; 0x23c
   b59ce:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b59d2:	2004      	movs	r0, #4
   b59d4:	ab4e      	add	r3, sp, #312	; 0x138
   b59d6:	974e      	str	r7, [sp, #312]	; 0x138
   b59d8:	e03a      	b.n	b5a50 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x700>
   b59da:	bf00      	nop
   b59dc:	000be578 	.word	0x000be578
   b59e0:	000be433 	.word	0x000be433
   b59e4:	000be439 	.word	0x000be439
   b59e8:	000be440 	.word	0x000be440
   b59ec:	000be5c8 	.word	0x000be5c8
   b59f0:	200353e4 	.word	0x200353e4
   b59f4:	42276997 	.word	0x42276997
   b59f8:	c2af40b8 	.word	0xc2af40b8
   b59fc:	422781fe 	.word	0x422781fe
   b5a00:	42278afb 	.word	0x42278afb
   b5a04:	c2af4494 	.word	0xc2af4494
   b5a08:	42278971 	.word	0x42278971
   b5a0c:	c2af6479 	.word	0xc2af6479
   b5a10:	000be3cc 	.word	0x000be3cc
   b5a14:	000be447 	.word	0x000be447
   b5a18:	000be44e 	.word	0x000be44e
   b5a1c:	20035544 	.word	0x20035544
   b5a20:	4227631a 	.word	0x4227631a
   b5a24:	c2af4bd2 	.word	0xc2af4bd2
   b5a28:	42276ec4 	.word	0x42276ec4
   b5a2c:	c2af4115 	.word	0xc2af4115
   b5a30:	422780b5 	.word	0x422780b5
   b5a34:	c2af4086 	.word	0xc2af4086
   b5a38:	42278200 	.word	0x42278200
   b5a3c:	422781e1 	.word	0x422781e1
   b5a40:	c2af4476 	.word	0xc2af4476
   b5a44:	000be455 	.word	0x000be455
   b5a48:	000be45c 	.word	0x000be45c
   b5a4c:	000be463 	.word	0x000be463
   b5a50:	904f      	str	r0, [sp, #316]	; 0x13c
   b5a52:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5a56:	4630      	mov	r0, r6
   b5a58:	f7ff fb0a 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway orangeLineCTA = Railway(
   b5a5c:	a883      	add	r0, sp, #524	; 0x20c
   b5a5e:	e9cd b000 	strd	fp, r0, [sp]
   b5a62:	a88c      	add	r0, sp, #560	; 0x230
   b5a64:	4643      	mov	r3, r8
   b5a66:	462a      	mov	r2, r5
   b5a68:	4601      	mov	r1, r0
   b5a6a:	9602      	str	r6, [sp, #8]
   b5a6c:	48ba      	ldr	r0, [pc, #744]	; (b5d58 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa08>)
   b5a6e:	f7ff fb7f 	bl	b5170 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5a72:	4630      	mov	r0, r6
   b5a74:	f7fe fe66 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5a78:	a883      	add	r0, sp, #524	; 0x20c
   b5a7a:	f7fe fe84 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5a7e:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5a80:	f005 fb98 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5a84:	a8a4      	add	r0, sp, #656	; 0x290
   b5a86:	f005 fb95 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5a8a:	4658      	mov	r0, fp
   b5a8c:	f005 fb92 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5a90:	4640      	mov	r0, r8
   b5a92:	f7fe fe57 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5a96:	4628      	mov	r0, r5
   b5a98:	f7fe fe54 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5a9c:	a88c      	add	r0, sp, #560	; 0x230
   b5a9e:	f7fe fe3d 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b5aa2:	a8b0      	add	r0, sp, #704	; 0x2c0
   b5aa4:	904c      	str	r0, [sp, #304]	; 0x130
   b5aa6:	2007      	movs	r0, #7
   b5aa8:	904d      	str	r0, [sp, #308]	; 0x134
   b5aaa:	a842      	add	r0, sp, #264	; 0x108
   b5aac:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b5ab0:	4603      	mov	r3, r0
   b5ab2:	a88c      	add	r0, sp, #560	; 0x230
      lat = la;
   b5ab4:	edcd 8ab4 	vstr	s17, [sp, #720]	; 0x2d0
      lon = lo;
   b5ab8:	ed8d 8ab5 	vstr	s16, [sp, #724]	; 0x2d4
      lat = la;
   b5abc:	edcd 8abc 	vstr	s17, [sp, #752]	; 0x2f0
      lon = lo;
   b5ac0:	ed8d 8abd 	vstr	s16, [sp, #756]	; 0x2f4
      lat = la;
   b5ac4:	edcd dab0 	vstr	s27, [sp, #704]	; 0x2c0
      lon = lo;
   b5ac8:	ed8d dab1 	vstr	s26, [sp, #708]	; 0x2c4
      lat = la;
   b5acc:	edcd cab2 	vstr	s25, [sp, #712]	; 0x2c8
      lon = lo;
   b5ad0:	ed8d cab3 	vstr	s24, [sp, #716]	; 0x2cc
      lat = la;
   b5ad4:	edcd bab6 	vstr	s23, [sp, #728]	; 0x2d8
      lon = lo;
   b5ad8:	ed8d bab7 	vstr	s22, [sp, #732]	; 0x2dc
      lat = la;
   b5adc:	edcd aab8 	vstr	s21, [sp, #736]	; 0x2e0
      lon = lo;
   b5ae0:	ed8d aab9 	vstr	s20, [sp, #740]	; 0x2e4
      lat = la;
   b5ae4:	edcd 9aba 	vstr	s19, [sp, #744]	; 0x2e8
      lon = lo;
   b5ae8:	ed8d 9abb 	vstr	s18, [sp, #748]	; 0x2ec
   b5aec:	f7fe fe80 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5af0:	4a9a      	ldr	r2, [pc, #616]	; (b5d5c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa0c>)
   b5af2:	9f04      	ldr	r7, [sp, #16]
   b5af4:	f1a2 0e18 	sub.w	lr, r2, #24
   b5af8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5afc:	f50d 7c1d 	add.w	ip, sp, #628	; 0x274
   b5b00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5b04:	9805      	ldr	r0, [sp, #20]
   b5b06:	c803      	ldmia	r0, {r0, r1}
   b5b08:	e887 0003 	stmia.w	r7, {r0, r1}
   b5b0c:	a89d      	add	r0, sp, #628	; 0x274
   b5b0e:	904a      	str	r0, [sp, #296]	; 0x128
   b5b10:	2006      	movs	r0, #6
   b5b12:	904b      	str	r0, [sp, #300]	; 0x12c
   b5b14:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5b18:	4628      	mov	r0, r5
   b5b1a:	f7ff faa9 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5b1e:	4a8f      	ldr	r2, [pc, #572]	; (b5d5c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa0c>)
   b5b20:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   b5b22:	af93      	add	r7, sp, #588	; 0x24c
   b5b24:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5b28:	2204      	movs	r2, #4
   b5b2a:	ab48      	add	r3, sp, #288	; 0x120
   b5b2c:	9748      	str	r7, [sp, #288]	; 0x120
   b5b2e:	9249      	str	r2, [sp, #292]	; 0x124
   b5b30:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5b34:	4640      	mov	r0, r8
   b5b36:	f7ff fa9b 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5b3a:	4658      	mov	r0, fp
   b5b3c:	4988      	ldr	r1, [pc, #544]	; (b5d60 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa10>)
   b5b3e:	f7fe fae3 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5b42:	a8a4      	add	r0, sp, #656	; 0x290
   b5b44:	4987      	ldr	r1, [pc, #540]	; (b5d64 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa14>)
   b5b46:	f7fe fadf 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5b4a:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5b4c:	4986      	ldr	r1, [pc, #536]	; (b5d68 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa18>)
   b5b4e:	f7fe fadb 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5b52:	aba4      	add	r3, sp, #656	; 0x290
   b5b54:	2002      	movs	r0, #2
   b5b56:	9346      	str	r3, [sp, #280]	; 0x118
   b5b58:	9047      	str	r0, [sp, #284]	; 0x11c
   b5b5a:	f50d 7980 	add.w	r9, sp, #256	; 0x100
   b5b5e:	aa46      	add	r2, sp, #280	; 0x118
   b5b60:	ca06      	ldmia	r2, {r1, r2}
   b5b62:	464b      	mov	r3, r9
   b5b64:	a883      	add	r0, sp, #524	; 0x20c
   b5b66:	f7fe fe77 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5b6a:	4980      	ldr	r1, [pc, #512]	; (b5d6c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa1c>)
   b5b6c:	c90f      	ldmia	r1, {r0, r1, r2, r3}
   b5b6e:	af8f      	add	r7, sp, #572	; 0x23c
   b5b70:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5b74:	2204      	movs	r2, #4
   b5b76:	ab44      	add	r3, sp, #272	; 0x110
   b5b78:	9744      	str	r7, [sp, #272]	; 0x110
   b5b7a:	9245      	str	r2, [sp, #276]	; 0x114
   b5b7c:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5b80:	4630      	mov	r0, r6
   b5b82:	f7ff fa75 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway purpleLineCTA = Railway(
   b5b86:	aa83      	add	r2, sp, #524	; 0x20c
   b5b88:	4643      	mov	r3, r8
   b5b8a:	a98c      	add	r1, sp, #560	; 0x230
   b5b8c:	e9cd b200 	strd	fp, r2, [sp]
   b5b90:	9602      	str	r6, [sp, #8]
   b5b92:	462a      	mov	r2, r5
   b5b94:	4876      	ldr	r0, [pc, #472]	; (b5d70 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa20>)
   b5b96:	f7ff faeb 	bl	b5170 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5b9a:	4630      	mov	r0, r6
   b5b9c:	f7fe fdd2 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5ba0:	a883      	add	r0, sp, #524	; 0x20c
   b5ba2:	f7fe fdf0 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5ba6:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5ba8:	f005 fb04 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5bac:	a8a4      	add	r0, sp, #656	; 0x290
   b5bae:	f005 fb01 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5bb2:	4658      	mov	r0, fp
   b5bb4:	f005 fafe 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5bb8:	4640      	mov	r0, r8
   b5bba:	f7fe fdc3 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5bbe:	4628      	mov	r0, r5
   b5bc0:	f7fe fdc0 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5bc4:	a88c      	add	r0, sp, #560	; 0x230
   b5bc6:	f7fe fda9 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5bca:	4b6a      	ldr	r3, [pc, #424]	; (b5d74 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa24>)
   b5bcc:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b5bce:	4b6a      	ldr	r3, [pc, #424]	; (b5d78 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa28>)
   b5bd0:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b5bd2:	4b6a      	ldr	r3, [pc, #424]	; (b5d7c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa2c>)
   b5bd4:	93b2      	str	r3, [sp, #712]	; 0x2c8
);
   b5bd6:	aab0      	add	r2, sp, #704	; 0x2c0
      lon = lo;
   b5bd8:	4b69      	ldr	r3, [pc, #420]	; (b5d80 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa30>)
   b5bda:	9242      	str	r2, [sp, #264]	; 0x108
   b5bdc:	93b3      	str	r3, [sp, #716]	; 0x2cc
   b5bde:	2208      	movs	r2, #8
      lat = la;
   b5be0:	4b68      	ldr	r3, [pc, #416]	; (b5d84 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa34>)
   b5be2:	9243      	str	r2, [sp, #268]	; 0x10c
   b5be4:	f10d 0ae0 	add.w	sl, sp, #224	; 0xe0
   b5be8:	93b4      	str	r3, [sp, #720]	; 0x2d0
   b5bea:	aa42      	add	r2, sp, #264	; 0x108
      lon = lo;
   b5bec:	4b66      	ldr	r3, [pc, #408]	; (b5d88 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa38>)
   b5bee:	93b5      	str	r3, [sp, #724]	; 0x2d4
   b5bf0:	ca06      	ldmia	r2, {r1, r2}
   b5bf2:	4653      	mov	r3, sl
   b5bf4:	a88c      	add	r0, sp, #560	; 0x230
      lat = la;
   b5bf6:	edcd 8ab6 	vstr	s17, [sp, #728]	; 0x2d8
      lon = lo;
   b5bfa:	ed8d 8ab7 	vstr	s16, [sp, #732]	; 0x2dc
      lat = la;
   b5bfe:	edcd 8abe 	vstr	s17, [sp, #760]	; 0x2f8
      lon = lo;
   b5c02:	ed8d 8abf 	vstr	s16, [sp, #764]	; 0x2fc
      lat = la;
   b5c06:	edcd 9ab8 	vstr	s19, [sp, #736]	; 0x2e0
      lon = lo;
   b5c0a:	ed8d 9ab9 	vstr	s18, [sp, #740]	; 0x2e4
      lat = la;
   b5c0e:	edcd aaba 	vstr	s21, [sp, #744]	; 0x2e8
      lon = lo;
   b5c12:	ed8d aabb 	vstr	s20, [sp, #748]	; 0x2ec
      lat = la;
   b5c16:	edcd babc 	vstr	s23, [sp, #752]	; 0x2f0
      lon = lo;
   b5c1a:	ed8d babd 	vstr	s22, [sp, #756]	; 0x2f4
   b5c1e:	f7fe fde7 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5c22:	4b5a      	ldr	r3, [pc, #360]	; (b5d8c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa3c>)
   b5c24:	9f04      	ldr	r7, [sp, #16]
      lat = la;
   b5c26:	eddf 8a5a 	vldr	s17, [pc, #360]	; b5d90 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa40>
      lon = lo;
   b5c2a:	ed9f 8a5a 	vldr	s16, [pc, #360]	; b5d94 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa44>
   b5c2e:	f103 0ccc 	add.w	ip, r3, #204	; 0xcc
   b5c32:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5c36:	f50d 7e1d 	add.w	lr, sp, #628	; 0x274
   b5c3a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b5c3e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
   b5c42:	e887 0007 	stmia.w	r7, {r0, r1, r2}
   b5c46:	aa9d      	add	r2, sp, #628	; 0x274
   b5c48:	9240      	str	r2, [sp, #256]	; 0x100
   b5c4a:	2207      	movs	r2, #7
   b5c4c:	9241      	str	r2, [sp, #260]	; 0x104
   b5c4e:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5c52:	4628      	mov	r0, r5
   b5c54:	f7ff fa0c 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5c58:	4b4c      	ldr	r3, [pc, #304]	; (b5d8c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa3c>)
   b5c5a:	33e8      	adds	r3, #232	; 0xe8
   b5c5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5c5e:	af93      	add	r7, sp, #588	; 0x24c
   b5c60:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5c64:	2204      	movs	r2, #4
   b5c66:	ab3e      	add	r3, sp, #248	; 0xf8
   b5c68:	973e      	str	r7, [sp, #248]	; 0xf8
   b5c6a:	923f      	str	r2, [sp, #252]	; 0xfc
   b5c6c:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5c70:	4640      	mov	r0, r8
   b5c72:	f7ff f9fd 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5c76:	4658      	mov	r0, fp
   b5c78:	4947      	ldr	r1, [pc, #284]	; (b5d98 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa48>)
   b5c7a:	f7fe fa45 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5c7e:	a8a4      	add	r0, sp, #656	; 0x290
   b5c80:	4946      	ldr	r1, [pc, #280]	; (b5d9c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa4c>)
   b5c82:	f7fe fa41 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5c86:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5c88:	4945      	ldr	r1, [pc, #276]	; (b5da0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa50>)
   b5c8a:	f7fe fa3d 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5c8e:	aba4      	add	r3, sp, #656	; 0x290
   b5c90:	2102      	movs	r1, #2
   b5c92:	933c      	str	r3, [sp, #240]	; 0xf0
   b5c94:	f10d 09d8 	add.w	r9, sp, #216	; 0xd8
   b5c98:	913d      	str	r1, [sp, #244]	; 0xf4
   b5c9a:	aa3c      	add	r2, sp, #240	; 0xf0
   b5c9c:	464b      	mov	r3, r9
   b5c9e:	ca06      	ldmia	r2, {r1, r2}
   b5ca0:	a883      	add	r0, sp, #524	; 0x20c
   b5ca2:	f7fe fdd9 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5ca6:	4b39      	ldr	r3, [pc, #228]	; (b5d8c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa3c>)
   b5ca8:	33f8      	adds	r3, #248	; 0xf8
   b5caa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5cac:	af8f      	add	r7, sp, #572	; 0x23c
   b5cae:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5cb2:	2204      	movs	r2, #4
   b5cb4:	ab3a      	add	r3, sp, #232	; 0xe8
   b5cb6:	973a      	str	r7, [sp, #232]	; 0xe8
   b5cb8:	923b      	str	r2, [sp, #236]	; 0xec
   b5cba:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5cbe:	4630      	mov	r0, r6
   b5cc0:	f7ff f9d6 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway pinkLineCTA = Railway(
   b5cc4:	aa83      	add	r2, sp, #524	; 0x20c
   b5cc6:	4643      	mov	r3, r8
   b5cc8:	a98c      	add	r1, sp, #560	; 0x230
   b5cca:	e9cd b200 	strd	fp, r2, [sp]
   b5cce:	9602      	str	r6, [sp, #8]
   b5cd0:	462a      	mov	r2, r5
   b5cd2:	4834      	ldr	r0, [pc, #208]	; (b5da4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa54>)
   b5cd4:	f7ff fa4c 	bl	b5170 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5cd8:	4630      	mov	r0, r6
   b5cda:	f7fe fd33 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5cde:	a883      	add	r0, sp, #524	; 0x20c
   b5ce0:	f7fe fd51 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5ce4:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5ce6:	f005 fa65 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5cea:	a8a4      	add	r0, sp, #656	; 0x290
   b5cec:	f005 fa62 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5cf0:	4658      	mov	r0, fp
   b5cf2:	f005 fa5f 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5cf6:	4640      	mov	r0, r8
   b5cf8:	f7fe fd24 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5cfc:	4628      	mov	r0, r5
   b5cfe:	f7fe fd21 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5d02:	a88c      	add	r0, sp, #560	; 0x230
   b5d04:	f7fe fd0a 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5d08:	4b27      	ldr	r3, [pc, #156]	; (b5da8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa58>)
   b5d0a:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b5d0c:	4b27      	ldr	r3, [pc, #156]	; (b5dac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa5c>)
   b5d0e:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b5d10:	4b27      	ldr	r3, [pc, #156]	; (b5db0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa60>)
   b5d12:	93b2      	str	r3, [sp, #712]	; 0x2c8
      lon = lo;
   b5d14:	4b27      	ldr	r3, [pc, #156]	; (b5db4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa64>)
   b5d16:	93b3      	str	r3, [sp, #716]	; 0x2cc
      lat = la;
   b5d18:	4b27      	ldr	r3, [pc, #156]	; (b5db8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa68>)
   b5d1a:	93b4      	str	r3, [sp, #720]	; 0x2d0
      lon = lo;
   b5d1c:	4b27      	ldr	r3, [pc, #156]	; (b5dbc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa6c>)
   b5d1e:	93b5      	str	r3, [sp, #724]	; 0x2d4
      lat = la;
   b5d20:	4b27      	ldr	r3, [pc, #156]	; (b5dc0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa70>)
   b5d22:	93b6      	str	r3, [sp, #728]	; 0x2d8
      lon = lo;
   b5d24:	4b27      	ldr	r3, [pc, #156]	; (b5dc4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa74>)
   b5d26:	93b7      	str	r3, [sp, #732]	; 0x2dc
      lat = la;
   b5d28:	4b27      	ldr	r3, [pc, #156]	; (b5dc8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa78>)
   b5d2a:	93b8      	str	r3, [sp, #736]	; 0x2e0
      lon = lo;
   b5d2c:	4b27      	ldr	r3, [pc, #156]	; (b5dcc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa7c>)
   b5d2e:	93b9      	str	r3, [sp, #740]	; 0x2e4
      lat = la;
   b5d30:	4b27      	ldr	r3, [pc, #156]	; (b5dd0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa80>)
   b5d32:	93ba      	str	r3, [sp, #744]	; 0x2e8
};
   b5d34:	aab0      	add	r2, sp, #704	; 0x2c0
      lon = lo;
   b5d36:	4b27      	ldr	r3, [pc, #156]	; (b5dd4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa84>)
   b5d38:	9238      	str	r2, [sp, #224]	; 0xe0
   b5d3a:	93bb      	str	r3, [sp, #748]	; 0x2ec
   b5d3c:	2207      	movs	r2, #7
      lat = la;
   b5d3e:	4b26      	ldr	r3, [pc, #152]	; (b5dd8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa88>)
   b5d40:	9239      	str	r2, [sp, #228]	; 0xe4
   b5d42:	93bc      	str	r3, [sp, #752]	; 0x2f0
   b5d44:	aa2e      	add	r2, sp, #184	; 0xb8
      lon = lo;
   b5d46:	4b25      	ldr	r3, [pc, #148]	; (b5ddc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa8c>)
   b5d48:	93bd      	str	r3, [sp, #756]	; 0x2f4
   b5d4a:	a88c      	add	r0, sp, #560	; 0x230
   b5d4c:	4613      	mov	r3, r2
   b5d4e:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b5d52:	f7fe fd4d 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5d56:	e043      	b.n	b5de0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa90>
   b5d58:	20037de0 	.word	0x20037de0
   b5d5c:	000be5b8 	.word	0x000be5b8
   b5d60:	000be46a 	.word	0x000be46a
   b5d64:	000be471 	.word	0x000be471
   b5d68:	000be478 	.word	0x000be478
   b5d6c:	000be5c8 	.word	0x000be5c8
   b5d70:	2003e4f0 	.word	0x2003e4f0
   b5d74:	42276a76 	.word	0x42276a76
   b5d78:	c2af692b 	.word	0xc2af692b
   b5d7c:	42276b5f 	.word	0x42276b5f
   b5d80:	c2af56cd 	.word	0xc2af56cd
   b5d84:	42278a2d 	.word	0x42278a2d
   b5d88:	c2af56d8 	.word	0xc2af56d8
   b5d8c:	000be578 	.word	0x000be578
   b5d90:	42296602 	.word	0x42296602
   b5d94:	c28e2881 	.word	0xc28e2881
   b5d98:	000be47f 	.word	0x000be47f
   b5d9c:	000be484 	.word	0x000be484
   b5da0:	000be48b 	.word	0x000be48b
   b5da4:	2003e484 	.word	0x2003e484
   b5da8:	4229481b 	.word	0x4229481b
   b5dac:	c28e1ab2 	.word	0xc28e1ab2
   b5db0:	42294f83 	.word	0x42294f83
   b5db4:	c28e1d93 	.word	0xc28e1d93
   b5db8:	422960e6 	.word	0x422960e6
   b5dbc:	c28e1d2d 	.word	0xc28e1d2d
   b5dc0:	422966f9 	.word	0x422966f9
   b5dc4:	c28e1af0 	.word	0xc28e1af0
   b5dc8:	422971a5 	.word	0x422971a5
   b5dcc:	c28e23e6 	.word	0xc28e23e6
   b5dd0:	42297437 	.word	0x42297437
   b5dd4:	c28e3373 	.word	0xc28e3373
   b5dd8:	42297d7a 	.word	0x42297d7a
   b5ddc:	c28e3b5d 	.word	0xc28e3b5d
   b5de0:	4bb1      	ldr	r3, [pc, #708]	; (b60a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd58>)
   b5de2:	f503 7c84 	add.w	ip, r3, #264	; 0x108
   b5de6:	461f      	mov	r7, r3
   b5de8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5dec:	f50d 7e1d 	add.w	lr, sp, #628	; 0x274
   b5df0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b5df4:	e89c 0003 	ldmia.w	ip, {r0, r1}
   b5df8:	9a04      	ldr	r2, [sp, #16]
   b5dfa:	e882 0003 	stmia.w	r2, {r0, r1}
   b5dfe:	aa9d      	add	r2, sp, #628	; 0x274
   b5e00:	9236      	str	r2, [sp, #216]	; 0xd8
   b5e02:	2206      	movs	r2, #6
   b5e04:	9237      	str	r2, [sp, #220]	; 0xdc
   b5e06:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5e0a:	4628      	mov	r0, r5
   b5e0c:	f7ff f930 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5e10:	aa93      	add	r2, sp, #588	; 0x24c
   b5e12:	9234      	str	r2, [sp, #208]	; 0xd0
   b5e14:	2332      	movs	r3, #50	; 0x32
   b5e16:	2204      	movs	r2, #4
   b5e18:	e9cd 3494 	strd	r3, r4, [sp, #592]	; 0x250
   b5e1c:	9235      	str	r2, [sp, #212]	; 0xd4
   b5e1e:	ab34      	add	r3, sp, #208	; 0xd0
   b5e20:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5e24:	4640      	mov	r0, r8
   b5e26:	9493      	str	r4, [sp, #588]	; 0x24c
   b5e28:	9496      	str	r4, [sp, #600]	; 0x258
   b5e2a:	f7ff f921 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5e2e:	4658      	mov	r0, fp
   b5e30:	499e      	ldr	r1, [pc, #632]	; (b60ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd5c>)
   b5e32:	f7fe f969 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5e36:	a8a4      	add	r0, sp, #656	; 0x290
   b5e38:	499d      	ldr	r1, [pc, #628]	; (b60b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd60>)
   b5e3a:	f7fe f965 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5e3e:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5e40:	499c      	ldr	r1, [pc, #624]	; (b60b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd64>)
   b5e42:	f7fe f961 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5e46:	aba4      	add	r3, sp, #656	; 0x290
   b5e48:	2102      	movs	r1, #2
   b5e4a:	9332      	str	r3, [sp, #200]	; 0xc8
   b5e4c:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
   b5e50:	9133      	str	r1, [sp, #204]	; 0xcc
   b5e52:	aa32      	add	r2, sp, #200	; 0xc8
   b5e54:	464b      	mov	r3, r9
   b5e56:	ca06      	ldmia	r2, {r1, r2}
   b5e58:	a883      	add	r0, sp, #524	; 0x20c
   b5e5a:	f7fe fcfd 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5e5e:	4621      	mov	r1, r4
   b5e60:	2210      	movs	r2, #16
   b5e62:	a88f      	add	r0, sp, #572	; 0x23c
   b5e64:	f006 f97e 	bl	bc164 <memset>
   b5e68:	aa8f      	add	r2, sp, #572	; 0x23c
   b5e6a:	9230      	str	r2, [sp, #192]	; 0xc0
   b5e6c:	2204      	movs	r2, #4
   b5e6e:	ab30      	add	r3, sp, #192	; 0xc0
   b5e70:	9231      	str	r2, [sp, #196]	; 0xc4
   b5e72:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5e76:	4630      	mov	r0, r6
   b5e78:	f7ff f8fa 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway redLineMBTA = Railway{
   b5e7c:	aa83      	add	r2, sp, #524	; 0x20c
   b5e7e:	4643      	mov	r3, r8
   b5e80:	a98c      	add	r1, sp, #560	; 0x230
   b5e82:	e9cd b200 	strd	fp, r2, [sp]
   b5e86:	9602      	str	r6, [sp, #8]
   b5e88:	462a      	mov	r2, r5
   b5e8a:	488b      	ldr	r0, [pc, #556]	; (b60b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd68>)
   b5e8c:	f7ff f970 	bl	b5170 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5e90:	4630      	mov	r0, r6
   b5e92:	f7fe fc57 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b5e96:	a883      	add	r0, sp, #524	; 0x20c
   b5e98:	f7fe fc75 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5e9c:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5e9e:	f005 f989 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5ea2:	a8a4      	add	r0, sp, #656	; 0x290
   b5ea4:	f005 f986 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5ea8:	4658      	mov	r0, fp
   b5eaa:	f005 f983 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5eae:	4640      	mov	r0, r8
   b5eb0:	f7fe fc48 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5eb4:	4628      	mov	r0, r5
   b5eb6:	f7fe fc45 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5eba:	a88c      	add	r0, sp, #560	; 0x230
   b5ebc:	f7fe fc2e 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5ec0:	4b7e      	ldr	r3, [pc, #504]	; (b60bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd6c>)
   b5ec2:	93a4      	str	r3, [sp, #656]	; 0x290
      lon = lo;
   b5ec4:	4b7e      	ldr	r3, [pc, #504]	; (b60c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd70>)
   b5ec6:	93a5      	str	r3, [sp, #660]	; 0x294
      lat = la;
   b5ec8:	4b7e      	ldr	r3, [pc, #504]	; (b60c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd74>)
   b5eca:	93a6      	str	r3, [sp, #664]	; 0x298
      lon = lo;
   b5ecc:	4b7e      	ldr	r3, [pc, #504]	; (b60c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd78>)
   b5ece:	93a7      	str	r3, [sp, #668]	; 0x29c
      lat = la;
   b5ed0:	4b7e      	ldr	r3, [pc, #504]	; (b60cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd7c>)
   b5ed2:	93a8      	str	r3, [sp, #672]	; 0x2a0
      lon = lo;
   b5ed4:	4b7e      	ldr	r3, [pc, #504]	; (b60d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd80>)
   b5ed6:	93a9      	str	r3, [sp, #676]	; 0x2a4
      lat = la;
   b5ed8:	4b7e      	ldr	r3, [pc, #504]	; (b60d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd84>)
   b5eda:	93aa      	str	r3, [sp, #680]	; 0x2a8
      lon = lo;
   b5edc:	4b7e      	ldr	r3, [pc, #504]	; (b60d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd88>)
   b5ede:	93ab      	str	r3, [sp, #684]	; 0x2ac
};
   b5ee0:	2204      	movs	r2, #4
   b5ee2:	aba4      	add	r3, sp, #656	; 0x290
   b5ee4:	932e      	str	r3, [sp, #184]	; 0xb8
   b5ee6:	922f      	str	r2, [sp, #188]	; 0xbc
   b5ee8:	f10d 0a90 	add.w	sl, sp, #144	; 0x90
   b5eec:	aa2e      	add	r2, sp, #184	; 0xb8
   b5eee:	4653      	mov	r3, sl
   b5ef0:	ca06      	ldmia	r2, {r1, r2}
   b5ef2:	a88f      	add	r0, sp, #572	; 0x23c
   b5ef4:	f7fe fc7c 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5ef8:	f507 7390 	add.w	r3, r7, #288	; 0x120
   b5efc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   b5f00:	2303      	movs	r3, #3
   b5f02:	952c      	str	r5, [sp, #176]	; 0xb0
   b5f04:	932d      	str	r3, [sp, #180]	; 0xb4
   b5f06:	e885 0007 	stmia.w	r5, {r0, r1, r2}
   b5f0a:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5f0e:	a88c      	add	r0, sp, #560	; 0x230
   b5f10:	f7ff f8ae 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5f14:	2228      	movs	r2, #40	; 0x28
   b5f16:	e9cd 2498 	strd	r2, r4, [sp, #608]	; 0x260
   b5f1a:	2204      	movs	r2, #4
   b5f1c:	ab2a      	add	r3, sp, #168	; 0xa8
   b5f1e:	f8cd b0a8 	str.w	fp, [sp, #168]	; 0xa8
   b5f22:	922b      	str	r2, [sp, #172]	; 0xac
   b5f24:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5f28:	4640      	mov	r0, r8
   b5f2a:	9497      	str	r4, [sp, #604]	; 0x25c
   b5f2c:	949a      	str	r4, [sp, #616]	; 0x268
   b5f2e:	f7ff f89f 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5f32:	a89d      	add	r0, sp, #628	; 0x274
   b5f34:	4969      	ldr	r1, [pc, #420]	; (b60dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd8c>)
   b5f36:	f7fe f8e7 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5f3a:	a8b0      	add	r0, sp, #704	; 0x2c0
   b5f3c:	4968      	ldr	r1, [pc, #416]	; (b60e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd90>)
   b5f3e:	f7fe f8e3 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5f42:	a8b6      	add	r0, sp, #728	; 0x2d8
   b5f44:	4967      	ldr	r1, [pc, #412]	; (b60e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd94>)
   b5f46:	f7fe f8df 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5f4a:	a9b0      	add	r1, sp, #704	; 0x2c0
   b5f4c:	9128      	str	r1, [sp, #160]	; 0xa0
   b5f4e:	2102      	movs	r1, #2
   b5f50:	f10d 0988 	add.w	r9, sp, #136	; 0x88
   b5f54:	9129      	str	r1, [sp, #164]	; 0xa4
   b5f56:	aa28      	add	r2, sp, #160	; 0xa0
   b5f58:	464b      	mov	r3, r9
   b5f5a:	ca06      	ldmia	r2, {r1, r2}
   b5f5c:	a883      	add	r0, sp, #524	; 0x20c
   b5f5e:	f7fe fc7b 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5f62:	4621      	mov	r1, r4
   b5f64:	2210      	movs	r2, #16
   b5f66:	a893      	add	r0, sp, #588	; 0x24c
   b5f68:	f006 f8fc 	bl	bc164 <memset>
   b5f6c:	aa93      	add	r2, sp, #588	; 0x24c
   b5f6e:	9226      	str	r2, [sp, #152]	; 0x98
   b5f70:	2204      	movs	r2, #4
   b5f72:	ab26      	add	r3, sp, #152	; 0x98
   b5f74:	9227      	str	r2, [sp, #156]	; 0x9c
   b5f76:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5f7a:	4630      	mov	r0, r6
   b5f7c:	f7ff f878 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway blueLineMBTA = Railway{
   b5f80:	aa83      	add	r2, sp, #524	; 0x20c
   b5f82:	9201      	str	r2, [sp, #4]
   b5f84:	aa9d      	add	r2, sp, #628	; 0x274
   b5f86:	4643      	mov	r3, r8
   b5f88:	a98f      	add	r1, sp, #572	; 0x23c
   b5f8a:	9602      	str	r6, [sp, #8]
   b5f8c:	9200      	str	r2, [sp, #0]
   b5f8e:	4856      	ldr	r0, [pc, #344]	; (b60e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd98>)
   b5f90:	aa8c      	add	r2, sp, #560	; 0x230
   b5f92:	f7ff f8ed 	bl	b5170 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5f96:	4630      	mov	r0, r6
   b5f98:	f7fe fbd4 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b5f9c:	a883      	add	r0, sp, #524	; 0x20c
   b5f9e:	f7fe fbf2 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5fa2:	a8b6      	add	r0, sp, #728	; 0x2d8
   b5fa4:	f005 f906 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5fa8:	a8b0      	add	r0, sp, #704	; 0x2c0
   b5faa:	f005 f903 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5fae:	a89d      	add	r0, sp, #628	; 0x274
   b5fb0:	f005 f900 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5fb4:	4640      	mov	r0, r8
   b5fb6:	f7fe fbc5 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5fba:	a88c      	add	r0, sp, #560	; 0x230
   b5fbc:	f7fe fbc2 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5fc0:	a88f      	add	r0, sp, #572	; 0x23c
   b5fc2:	f7fe fbab 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5fc6:	4b49      	ldr	r3, [pc, #292]	; (b60ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd9c>)
   b5fc8:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b5fca:	4b49      	ldr	r3, [pc, #292]	; (b60f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xda0>)
   b5fcc:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b5fce:	4b49      	ldr	r3, [pc, #292]	; (b60f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xda4>)
   b5fd0:	93b2      	str	r3, [sp, #712]	; 0x2c8
      lon = lo;
   b5fd2:	4b49      	ldr	r3, [pc, #292]	; (b60f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xda8>)
   b5fd4:	93b3      	str	r3, [sp, #716]	; 0x2cc
      lat = la;
   b5fd6:	4b49      	ldr	r3, [pc, #292]	; (b60fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdac>)
   b5fd8:	93b4      	str	r3, [sp, #720]	; 0x2d0
      lon = lo;
   b5fda:	4b49      	ldr	r3, [pc, #292]	; (b6100 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdb0>)
   b5fdc:	93b5      	str	r3, [sp, #724]	; 0x2d4
      lat = la;
   b5fde:	4b49      	ldr	r3, [pc, #292]	; (b6104 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdb4>)
   b5fe0:	93b6      	str	r3, [sp, #728]	; 0x2d8
      lon = lo;
   b5fe2:	4b49      	ldr	r3, [pc, #292]	; (b6108 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdb8>)
   b5fe4:	93b7      	str	r3, [sp, #732]	; 0x2dc
      lat = la;
   b5fe6:	4b49      	ldr	r3, [pc, #292]	; (b610c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdbc>)
   b5fe8:	93b8      	str	r3, [sp, #736]	; 0x2e0
};
   b5fea:	aab0      	add	r2, sp, #704	; 0x2c0
      lon = lo;
   b5fec:	4b48      	ldr	r3, [pc, #288]	; (b6110 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdc0>)
   b5fee:	9224      	str	r2, [sp, #144]	; 0x90
   b5ff0:	93b9      	str	r3, [sp, #740]	; 0x2e4
   b5ff2:	2206      	movs	r2, #6
      lat = la;
   b5ff4:	4b47      	ldr	r3, [pc, #284]	; (b6114 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdc4>)
   b5ff6:	9225      	str	r2, [sp, #148]	; 0x94
   b5ff8:	93ba      	str	r3, [sp, #744]	; 0x2e8
   b5ffa:	aa1a      	add	r2, sp, #104	; 0x68
      lon = lo;
   b5ffc:	4b46      	ldr	r3, [pc, #280]	; (b6118 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdc8>)
   b5ffe:	93bb      	str	r3, [sp, #748]	; 0x2ec
   b6000:	a88c      	add	r0, sp, #560	; 0x230
   b6002:	4613      	mov	r3, r2
   b6004:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b6008:	f7fe fbf2 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b600c:	4b26      	ldr	r3, [pc, #152]	; (b60a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd58>)
   b600e:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
   b6012:	f503 7c96 	add.w	ip, r3, #300	; 0x12c
   b6016:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b601a:	465f      	mov	r7, fp
   b601c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b601e:	f8dc 3000 	ldr.w	r3, [ip]
   b6022:	603b      	str	r3, [r7, #0]
   b6024:	2305      	movs	r3, #5
   b6026:	9323      	str	r3, [sp, #140]	; 0x8c
   b6028:	e899 0006 	ldmia.w	r9, {r1, r2}
   b602c:	4628      	mov	r0, r5
   b602e:	f7ff f81f 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b6032:	aa93      	add	r2, sp, #588	; 0x24c
   b6034:	9220      	str	r2, [sp, #128]	; 0x80
   b6036:	232d      	movs	r3, #45	; 0x2d
   b6038:	2204      	movs	r2, #4
   b603a:	e9cd 3494 	strd	r3, r4, [sp, #592]	; 0x250
   b603e:	9221      	str	r2, [sp, #132]	; 0x84
   b6040:	ab20      	add	r3, sp, #128	; 0x80
   b6042:	e893 0006 	ldmia.w	r3, {r1, r2}
   b6046:	4640      	mov	r0, r8
   b6048:	9493      	str	r4, [sp, #588]	; 0x24c
   b604a:	9496      	str	r4, [sp, #600]	; 0x258
   b604c:	f7ff f810 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b6050:	a89d      	add	r0, sp, #628	; 0x274
   b6052:	4932      	ldr	r1, [pc, #200]	; (b611c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdcc>)
   b6054:	f7fe f858 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6058:	a8a4      	add	r0, sp, #656	; 0x290
   b605a:	4931      	ldr	r1, [pc, #196]	; (b6120 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdd0>)
   b605c:	f7fe f854 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6060:	a8aa      	add	r0, sp, #680	; 0x2a8
   b6062:	4930      	ldr	r1, [pc, #192]	; (b6124 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdd4>)
   b6064:	f7fe f850 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6068:	aba4      	add	r3, sp, #656	; 0x290
   b606a:	931e      	str	r3, [sp, #120]	; 0x78
   b606c:	2302      	movs	r3, #2
   b606e:	931f      	str	r3, [sp, #124]	; 0x7c
   b6070:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   b6074:	aa1e      	add	r2, sp, #120	; 0x78
   b6076:	4653      	mov	r3, sl
   b6078:	ca06      	ldmia	r2, {r1, r2}
   b607a:	a883      	add	r0, sp, #524	; 0x20c
   b607c:	f7fe fbec 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b6080:	4621      	mov	r1, r4
   b6082:	2210      	movs	r2, #16
   b6084:	a88f      	add	r0, sp, #572	; 0x23c
   b6086:	f006 f86d 	bl	bc164 <memset>
   b608a:	aa8f      	add	r2, sp, #572	; 0x23c
   b608c:	921c      	str	r2, [sp, #112]	; 0x70
   b608e:	2204      	movs	r2, #4
   b6090:	ab1c      	add	r3, sp, #112	; 0x70
   b6092:	921d      	str	r2, [sp, #116]	; 0x74
   b6094:	e893 0006 	ldmia.w	r3, {r1, r2}
   b6098:	4630      	mov	r0, r6
   b609a:	f7fe ffe9 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway orangeLineMBTA = Railway{
   b609e:	ab83      	add	r3, sp, #524	; 0x20c
   b60a0:	9301      	str	r3, [sp, #4]
   b60a2:	ab9d      	add	r3, sp, #628	; 0x274
   b60a4:	e040      	b.n	b6128 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdd8>
   b60a6:	bf00      	nop
   b60a8:	000be578 	.word	0x000be578
   b60ac:	000be40e 	.word	0x000be40e
   b60b0:	000be412 	.word	0x000be412
   b60b4:	000be419 	.word	0x000be419
   b60b8:	2003e5c8 	.word	0x2003e5c8
   b60bc:	422984a9 	.word	0x422984a9
   b60c0:	c28e0be6 	.word	0xc28e0be6
   b60c4:	422970a6 	.word	0x422970a6
   b60c8:	c28e1862 	.word	0xc28e1862
   b60cc:	42296fe1 	.word	0x42296fe1
   b60d0:	c28e1e86 	.word	0xc28e1e86
   b60d4:	422971d1 	.word	0x422971d1
   b60d8:	c28e1fcf 	.word	0xc28e1fcf
   b60dc:	000be420 	.word	0x000be420
   b60e0:	000be425 	.word	0x000be425
   b60e4:	000be42c 	.word	0x000be42c
   b60e8:	20035378 	.word	0x20035378
   b60ec:	4229537a 	.word	0x4229537a
   b60f0:	c28e30c9 	.word	0xc28e30c9
   b60f4:	422963d0 	.word	0x422963d0
   b60f8:	c28e26f1 	.word	0xc28e26f1
   b60fc:	4229634b 	.word	0x4229634b
   b6100:	c28e210d 	.word	0xc28e210d
   b6104:	42296e30 	.word	0x42296e30
   b6108:	c28e1d5a 	.word	0xc28e1d5a
   b610c:	42298278 	.word	0x42298278
   b6110:	c28e26e2 	.word	0xc28e26e2
   b6114:	42299ccd 	.word	0x42299ccd
   b6118:	c28e2770 	.word	0xc28e2770
   b611c:	000be455 	.word	0x000be455
   b6120:	000be45c 	.word	0x000be45c
   b6124:	000be463 	.word	0x000be463
   b6128:	462a      	mov	r2, r5
   b612a:	a98c      	add	r1, sp, #560	; 0x230
   b612c:	9602      	str	r6, [sp, #8]
   b612e:	9300      	str	r3, [sp, #0]
   b6130:	48b5      	ldr	r0, [pc, #724]	; (b6408 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10b8>)
   b6132:	4643      	mov	r3, r8
   b6134:	f7ff f81c 	bl	b5170 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b6138:	4630      	mov	r0, r6
   b613a:	f7fe fb03 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b613e:	a883      	add	r0, sp, #524	; 0x20c
   b6140:	f7fe fb21 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b6144:	a8aa      	add	r0, sp, #680	; 0x2a8
   b6146:	f005 f835 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b614a:	a8a4      	add	r0, sp, #656	; 0x290
   b614c:	f005 f832 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6150:	a89d      	add	r0, sp, #628	; 0x274
   b6152:	f005 f82f 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6156:	4640      	mov	r0, r8
   b6158:	f7fe faf4 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b615c:	4628      	mov	r0, r5
   b615e:	f7fe faf1 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b6162:	a88c      	add	r0, sp, #560	; 0x230
   b6164:	f7fe fada 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b6168:	4ba8      	ldr	r3, [pc, #672]	; (b640c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10bc>)
   b616a:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b616c:	4ba8      	ldr	r3, [pc, #672]	; (b6410 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10c0>)
   b616e:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b6170:	4ba8      	ldr	r3, [pc, #672]	; (b6414 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10c4>)
   b6172:	93b4      	str	r3, [sp, #720]	; 0x2d0
      lon = lo;
   b6174:	4ba8      	ldr	r3, [pc, #672]	; (b6418 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10c8>)
   b6176:	93b5      	str	r3, [sp, #724]	; 0x2d4
      lat = la;
   b6178:	4ba8      	ldr	r3, [pc, #672]	; (b641c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10cc>)
   b617a:	93b6      	str	r3, [sp, #728]	; 0x2d8
      lon = lo;
   b617c:	4ba8      	ldr	r3, [pc, #672]	; (b6420 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10d0>)
   b617e:	93b7      	str	r3, [sp, #732]	; 0x2dc
      lat = la;
   b6180:	4ba8      	ldr	r3, [pc, #672]	; (b6424 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10d4>)
   b6182:	93b8      	str	r3, [sp, #736]	; 0x2e0
      lon = lo;
   b6184:	4ba8      	ldr	r3, [pc, #672]	; (b6428 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10d8>)
   b6186:	93b9      	str	r3, [sp, #740]	; 0x2e4
      lat = la;
   b6188:	4ba8      	ldr	r3, [pc, #672]	; (b642c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10dc>)
   b618a:	93ba      	str	r3, [sp, #744]	; 0x2e8
      lon = lo;
   b618c:	4ba8      	ldr	r3, [pc, #672]	; (b6430 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10e0>)
   b618e:	93bb      	str	r3, [sp, #748]	; 0x2ec
      lat = la;
   b6190:	4ba8      	ldr	r3, [pc, #672]	; (b6434 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10e4>)
   b6192:	93bc      	str	r3, [sp, #752]	; 0x2f0
      lon = lo;
   b6194:	4ba8      	ldr	r3, [pc, #672]	; (b6438 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10e8>)
   b6196:	93bd      	str	r3, [sp, #756]	; 0x2f4
      lat = la;
   b6198:	4ba8      	ldr	r3, [pc, #672]	; (b643c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10ec>)
   b619a:	93be      	str	r3, [sp, #760]	; 0x2f8
      lon = lo;
   b619c:	4ba8      	ldr	r3, [pc, #672]	; (b6440 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f0>)
   b619e:	93bf      	str	r3, [sp, #764]	; 0x2fc
};
   b61a0:	abb0      	add	r3, sp, #704	; 0x2c0
   b61a2:	931a      	str	r3, [sp, #104]	; 0x68
   b61a4:	2308      	movs	r3, #8
   b61a6:	931b      	str	r3, [sp, #108]	; 0x6c
   b61a8:	f10d 0940 	add.w	r9, sp, #64	; 0x40
   b61ac:	aa1a      	add	r2, sp, #104	; 0x68
   b61ae:	464b      	mov	r3, r9
   b61b0:	ca06      	ldmia	r2, {r1, r2}
   b61b2:	a88c      	add	r0, sp, #560	; 0x230
      lat = la;
   b61b4:	edcd 8ab2 	vstr	s17, [sp, #712]	; 0x2c8
      lon = lo;
   b61b8:	ed8d 8ab3 	vstr	s16, [sp, #716]	; 0x2cc
   b61bc:	f7fe fb18 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b61c0:	f8df c2c8 	ldr.w	ip, [pc, #712]	; b648c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x113c>
   b61c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b61c8:	f50d 7e1d 	add.w	lr, sp, #628	; 0x274
   b61cc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b61d0:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
   b61d4:	9b04      	ldr	r3, [sp, #16]
   b61d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b61da:	ab9d      	add	r3, sp, #628	; 0x274
   b61dc:	9318      	str	r3, [sp, #96]	; 0x60
   b61de:	2307      	movs	r3, #7
   b61e0:	9319      	str	r3, [sp, #100]	; 0x64
   b61e2:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b61e6:	4628      	mov	r0, r5
   b61e8:	f7fe ff42 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b61ec:	aa93      	add	r2, sp, #588	; 0x24c
   b61ee:	9216      	str	r2, [sp, #88]	; 0x58
   b61f0:	2323      	movs	r3, #35	; 0x23
   b61f2:	2204      	movs	r2, #4
   b61f4:	e9cd 3494 	strd	r3, r4, [sp, #592]	; 0x250
   b61f8:	9217      	str	r2, [sp, #92]	; 0x5c
   b61fa:	ab16      	add	r3, sp, #88	; 0x58
   b61fc:	e893 0006 	ldmia.w	r3, {r1, r2}
   b6200:	4640      	mov	r0, r8
   b6202:	9493      	str	r4, [sp, #588]	; 0x24c
   b6204:	9496      	str	r4, [sp, #600]	; 0x258
   b6206:	f7fe ff33 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b620a:	4658      	mov	r0, fp
   b620c:	498d      	ldr	r1, [pc, #564]	; (b6444 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f4>)
   b620e:	f7fd ff7b 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6212:	a8a4      	add	r0, sp, #656	; 0x290
   b6214:	498c      	ldr	r1, [pc, #560]	; (b6448 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f8>)
   b6216:	f7fd ff77 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b621a:	a8aa      	add	r0, sp, #680	; 0x2a8
   b621c:	498b      	ldr	r1, [pc, #556]	; (b644c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10fc>)
   b621e:	f7fd ff73 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6222:	aba4      	add	r3, sp, #656	; 0x290
   b6224:	9314      	str	r3, [sp, #80]	; 0x50
   b6226:	2302      	movs	r3, #2
   b6228:	9315      	str	r3, [sp, #84]	; 0x54
   b622a:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   b622e:	aa14      	add	r2, sp, #80	; 0x50
   b6230:	4653      	mov	r3, sl
   b6232:	ca06      	ldmia	r2, {r1, r2}
   b6234:	a883      	add	r0, sp, #524	; 0x20c
   b6236:	f7fe fb0f 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b623a:	4621      	mov	r1, r4
   b623c:	2210      	movs	r2, #16
   b623e:	a88f      	add	r0, sp, #572	; 0x23c
   b6240:	f005 ff90 	bl	bc164 <memset>
   b6244:	aa8f      	add	r2, sp, #572	; 0x23c
   b6246:	9212      	str	r2, [sp, #72]	; 0x48
   b6248:	2204      	movs	r2, #4
   b624a:	ab12      	add	r3, sp, #72	; 0x48
   b624c:	9213      	str	r2, [sp, #76]	; 0x4c
   b624e:	e893 0006 	ldmia.w	r3, {r1, r2}
   b6252:	4630      	mov	r0, r6
   b6254:	f7fe ff0c 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway greenLine1MBTA = Railway{
   b6258:	ab83      	add	r3, sp, #524	; 0x20c
   b625a:	462a      	mov	r2, r5
   b625c:	a98c      	add	r1, sp, #560	; 0x230
   b625e:	e9cd b300 	strd	fp, r3, [sp]
   b6262:	9602      	str	r6, [sp, #8]
   b6264:	4643      	mov	r3, r8
   b6266:	487a      	ldr	r0, [pc, #488]	; (b6450 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1100>)
   b6268:	f7fe ff82 	bl	b5170 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b626c:	4630      	mov	r0, r6
   b626e:	f7fe fa69 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b6272:	a883      	add	r0, sp, #524	; 0x20c
   b6274:	f7fe fa87 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b6278:	a8aa      	add	r0, sp, #680	; 0x2a8
   b627a:	f004 ff9b 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b627e:	a8a4      	add	r0, sp, #656	; 0x290
   b6280:	f004 ff98 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6284:	4658      	mov	r0, fp
   b6286:	f004 ff95 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b628a:	4640      	mov	r0, r8
   b628c:	f7fe fa5a 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b6290:	4628      	mov	r0, r5
   b6292:	f7fe fa57 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b6296:	a88c      	add	r0, sp, #560	; 0x230
   b6298:	f7fe fa40 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b629c:	4b6d      	ldr	r3, [pc, #436]	; (b6454 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1104>)
   b629e:	939d      	str	r3, [sp, #628]	; 0x274
      lon = lo;
   b62a0:	4b6d      	ldr	r3, [pc, #436]	; (b6458 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1108>)
   b62a2:	939e      	str	r3, [sp, #632]	; 0x278
};
   b62a4:	ab9d      	add	r3, sp, #628	; 0x274
   b62a6:	6033      	str	r3, [r6, #0]
   b62a8:	2302      	movs	r3, #2
   b62aa:	6073      	str	r3, [r6, #4]
   b62ac:	e896 0006 	ldmia.w	r6, {r1, r2}
   b62b0:	ab08      	add	r3, sp, #32
   b62b2:	a88f      	add	r0, sp, #572	; 0x23c
      lat = la;
   b62b4:	edcd 8a9f 	vstr	s17, [sp, #636]	; 0x27c
      lon = lo;
   b62b8:	ed8d 8aa0 	vstr	s16, [sp, #640]	; 0x280
   b62bc:	f7fe fa98 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b62c0:	ab09      	add	r3, sp, #36	; 0x24
   b62c2:	9310      	str	r3, [sp, #64]	; 0x40
   b62c4:	2301      	movs	r3, #1
   b62c6:	9311      	str	r3, [sp, #68]	; 0x44
   b62c8:	e899 0006 	ldmia.w	r9, {r1, r2}
   b62cc:	260f      	movs	r6, #15
   b62ce:	a88c      	add	r0, sp, #560	; 0x230
   b62d0:	9609      	str	r6, [sp, #36]	; 0x24
   b62d2:	f7fe fecd 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b62d6:	2304      	movs	r3, #4
   b62d8:	930f      	str	r3, [sp, #60]	; 0x3c
   b62da:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
   b62de:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b62e2:	4628      	mov	r0, r5
   b62e4:	e9cd 4697 	strd	r4, r6, [sp, #604]	; 0x25c
   b62e8:	e9cd 4499 	strd	r4, r4, [sp, #612]	; 0x264
   b62ec:	f7fe fec0 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b62f0:	a8a4      	add	r0, sp, #656	; 0x290
   b62f2:	4954      	ldr	r1, [pc, #336]	; (b6444 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f4>)
   b62f4:	f7fd ff08 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b62f8:	a8b0      	add	r0, sp, #704	; 0x2c0
   b62fa:	4953      	ldr	r1, [pc, #332]	; (b6448 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f8>)
   b62fc:	f7fd ff04 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6300:	a8b6      	add	r0, sp, #728	; 0x2d8
   b6302:	4952      	ldr	r1, [pc, #328]	; (b644c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10fc>)
   b6304:	f7fd ff00 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6308:	abb0      	add	r3, sp, #704	; 0x2c0
   b630a:	930c      	str	r3, [sp, #48]	; 0x30
   b630c:	2302      	movs	r3, #2
   b630e:	930d      	str	r3, [sp, #52]	; 0x34
   b6310:	aa0c      	add	r2, sp, #48	; 0x30
   b6312:	ab07      	add	r3, sp, #28
   b6314:	ca06      	ldmia	r2, {r1, r2}
   b6316:	4640      	mov	r0, r8
   b6318:	f7fe fa9e 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b631c:	4621      	mov	r1, r4
   b631e:	2210      	movs	r2, #16
   b6320:	a893      	add	r0, sp, #588	; 0x24c
   b6322:	f005 ff1f 	bl	bc164 <memset>
   b6326:	aa93      	add	r2, sp, #588	; 0x24c
   b6328:	920a      	str	r2, [sp, #40]	; 0x28
   b632a:	2204      	movs	r2, #4
   b632c:	ab0a      	add	r3, sp, #40	; 0x28
   b632e:	920b      	str	r2, [sp, #44]	; 0x2c
   b6330:	e893 0006 	ldmia.w	r3, {r1, r2}
   b6334:	a883      	add	r0, sp, #524	; 0x20c
   b6336:	f7fe fe9b 	bl	b5070 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway greenLine2MBTA = Railway{
   b633a:	ab83      	add	r3, sp, #524	; 0x20c
   b633c:	e9cd 8301 	strd	r8, r3, [sp, #4]
   b6340:	aba4      	add	r3, sp, #656	; 0x290
   b6342:	aa8c      	add	r2, sp, #560	; 0x230
   b6344:	a98f      	add	r1, sp, #572	; 0x23c
   b6346:	9300      	str	r3, [sp, #0]
   b6348:	4844      	ldr	r0, [pc, #272]	; (b645c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x110c>)
   b634a:	462b      	mov	r3, r5
   b634c:	f7fe ff10 	bl	b5170 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b6350:	a883      	add	r0, sp, #524	; 0x20c
   b6352:	f7fe f9f7 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b6356:	4640      	mov	r0, r8
   b6358:	f7fe fa15 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b635c:	a8b6      	add	r0, sp, #728	; 0x2d8
   b635e:	f004 ff29 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6362:	a8b0      	add	r0, sp, #704	; 0x2c0
   b6364:	f004 ff26 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6368:	a8a4      	add	r0, sp, #656	; 0x290
   b636a:	f004 ff23 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b636e:	4628      	mov	r0, r5
   b6370:	f7fe f9e8 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b6374:	a88c      	add	r0, sp, #560	; 0x230
   b6376:	f7fe f9e5 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b637a:	a88f      	add	r0, sp, #572	; 0x23c
   b637c:	f7fe f9ce 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6380:	4b37      	ldr	r3, [pc, #220]	; (b6460 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1110>)
const BleUuid serviceUuid("123A");
   b6382:	4938      	ldr	r1, [pc, #224]	; (b6464 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1114>)
   b6384:	609c      	str	r4, [r3, #8]
   b6386:	e9c3 4400 	strd	r4, r4, [r3]
   b638a:	4b37      	ldr	r3, [pc, #220]	; (b6468 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1118>)
   b638c:	4837      	ldr	r0, [pc, #220]	; (b646c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x111c>)
   b638e:	609c      	str	r4, [r3, #8]
   b6390:	e9c3 4400 	strd	r4, r4, [r3]
   b6394:	4b36      	ldr	r3, [pc, #216]	; (b6470 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1120>)
   b6396:	4d37      	ldr	r5, [pc, #220]	; (b6474 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1124>)
   b6398:	609c      	str	r4, [r3, #8]
   b639a:	e9c3 4400 	strd	r4, r4, [r3]
   b639e:	4b36      	ldr	r3, [pc, #216]	; (b6478 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1128>)
   b63a0:	f8df 80c8 	ldr.w	r8, [pc, #200]	; b646c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x111c>
   b63a4:	609c      	str	r4, [r3, #8]
   b63a6:	e9c3 4400 	strd	r4, r4, [r3]
   b63aa:	4b34      	ldr	r3, [pc, #208]	; (b647c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x112c>)
   b63ac:	e9c3 4400 	strd	r4, r4, [r3]
   b63b0:	609c      	str	r4, [r3, #8]
   b63b2:	f002 fda5 	bl	b8f00 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("123B");
   b63b6:	4932      	ldr	r1, [pc, #200]	; (b6480 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1130>)
   b63b8:	4832      	ldr	r0, [pc, #200]	; (b6484 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1134>)
   b63ba:	f002 fda1 	bl	b8f00 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("123C");
   b63be:	4932      	ldr	r1, [pc, #200]	; (b6488 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1138>)
   b63c0:	482c      	ldr	r0, [pc, #176]	; (b6474 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1124>)
   b63c2:	f002 fd9d 	bl	b8f00 <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b63c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b63c8:	465e      	mov	r6, fp
   b63ca:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b63cc:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   b63d0:	f8d5 c000 	ldr.w	ip, [r5]
   b63d4:	f8c7 c000 	str.w	ip, [r7]
   b63d8:	ad9d      	add	r5, sp, #628	; 0x274
   b63da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b63dc:	46c1      	mov	r9, r8
   b63de:	9b04      	ldr	r3, [sp, #16]
   b63e0:	f859 a910 	ldr.w	sl, [r9], #-16
   b63e4:	f8c3 a000 	str.w	sl, [r3]
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b63e8:	465d      	mov	r5, fp
   b63ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b63ec:	aea4      	add	r6, sp, #656	; 0x290
   b63ee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b63f0:	f8df e09c 	ldr.w	lr, [pc, #156]	; b6490 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1140>
   b63f4:	f8c6 c000 	str.w	ip, [r6]
        BleUuid sUuid(svcUuid);
   b63f8:	f50d 7c1d 	add.w	ip, sp, #628	; 0x274
      constexpr __shared_count() noexcept : _M_pi(0)
   b63fc:	e9ce 4400 	strd	r4, r4, [lr]
   b6400:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6404:	adb0      	add	r5, sp, #704	; 0x2c0
   b6406:	e045      	b.n	b6494 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1144>
   b6408:	20037e4c 	.word	0x20037e4c
   b640c:	42296555 	.word	0x42296555
   b6410:	c28e30ae 	.word	0xc28e30ae
   b6414:	42296847 	.word	0x42296847
   b6418:	c28e2445 	.word	0xc28e2445
   b641c:	422968cc 	.word	0x422968cc
   b6420:	c28e2106 	.word	0xc28e2106
   b6424:	422972cd 	.word	0x422972cd
   b6428:	c28e1db0 	.word	0xc28e1db0
   b642c:	42297777 	.word	0x42297777
   b6430:	c28e1f5e 	.word	0xc28e1f5e
   b6434:	42297668 	.word	0x42297668
   b6438:	c28e20d5 	.word	0xc28e20d5
   b643c:	42298291 	.word	0x42298291
   b6440:	c28e30ba 	.word	0xc28e30ba
   b6444:	000be3cc 	.word	0x000be3cc
   b6448:	000be447 	.word	0x000be447
   b644c:	000be44e 	.word	0x000be44e
   b6450:	2003546c 	.word	0x2003546c
   b6454:	422957f0 	.word	0x422957f0
   b6458:	c28e3351 	.word	0xc28e3351
   b645c:	200354d8 	.word	0x200354d8
   b6460:	20035454 	.word	0x20035454
   b6464:	000be492 	.word	0x000be492
   b6468:	20035460 	.word	0x20035460
   b646c:	200352c0 	.word	0x200352c0
   b6470:	20037dd4 	.word	0x20037dd4
   b6474:	200352e8 	.word	0x200352e8
   b6478:	200352fc 	.word	0x200352fc
   b647c:	2003e69c 	.word	0x2003e69c
   b6480:	000be497 	.word	0x000be497
   b6484:	200352d4 	.word	0x200352d4
   b6488:	000be49c 	.word	0x000be49c
   b648c:	000be6b8 	.word	0x000be6b8
   b6490:	2003e6ac 	.word	0x2003e6ac
   b6494:	c50f      	stmia	r5!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b6496:	abb0      	add	r3, sp, #704	; 0x2c0
        BleUuid sUuid(svcUuid);
   b6498:	f8c5 a000 	str.w	sl, [r5]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b649c:	4670      	mov	r0, lr
   b649e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b64a2:	9300      	str	r3, [sp, #0]
   b64a4:	4974      	ldr	r1, [pc, #464]	; (b6678 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1328>)
   b64a6:	aba4      	add	r3, sp, #656	; 0x290
   b64a8:	f04f 0210 	mov.w	r2, #16
   b64ac:	f003 fa92 	bl	b99d4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b64b0:	f8df c250 	ldr.w	ip, [pc, #592]	; b6704 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13b4>
   b64b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b64b8:	46de      	mov	lr, fp
   b64ba:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b64be:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   b64c2:	f8dc e000 	ldr.w	lr, [ip]
   b64c6:	f8c7 e000 	str.w	lr, [r7]
   b64ca:	f50d 7c1d 	add.w	ip, sp, #628	; 0x274
   b64ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b64d2:	9b04      	ldr	r3, [sp, #16]
   b64d4:	f8d8 9000 	ldr.w	r9, [r8]
   b64d8:	f8c3 9000 	str.w	r9, [r3]
        BleUuid cUuid(charUuid);
   b64dc:	46da      	mov	sl, fp
   b64de:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
      : _M_ptr(0), _M_refcount()
   b64e2:	f8df 81d8 	ldr.w	r8, [pc, #472]	; b66bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x136c>
   b64e6:	f50d 7c24 	add.w	ip, sp, #656	; 0x290
   b64ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b64ee:	f8c6 e000 	str.w	lr, [r6]
        BleUuid sUuid(svcUuid);
   b64f2:	ae9d      	add	r6, sp, #628	; 0x274
      constexpr __shared_count() noexcept : _M_pi(0)
   b64f4:	e9c8 4400 	strd	r4, r4, [r8]
   b64f8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b64fa:	f50d 7c30 	add.w	ip, sp, #704	; 0x2c0
   b64fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b6502:	4b5e      	ldr	r3, [pc, #376]	; (b667c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x132c>)
        BleUuid sUuid(svcUuid);
   b6504:	f8c5 9000 	str.w	r9, [r5]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b6508:	9301      	str	r3, [sp, #4]
   b650a:	abb0      	add	r3, sp, #704	; 0x2c0
   b650c:	f04f 0204 	mov.w	r2, #4
   b6510:	9402      	str	r4, [sp, #8]
   b6512:	9300      	str	r3, [sp, #0]
   b6514:	4640      	mov	r0, r8
   b6516:	aba4      	add	r3, sp, #656	; 0x290
   b6518:	4959      	ldr	r1, [pc, #356]	; (b6680 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1330>)
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b651a:	4c5a      	ldr	r4, [pc, #360]	; (b6684 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1334>)
   b651c:	f003 fa5a 	bl	b99d4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
   b6520:	4959      	ldr	r1, [pc, #356]	; (b6688 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1338>)
   b6522:	485a      	ldr	r0, [pc, #360]	; (b668c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x133c>)
   b6524:	f003 ff79 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
   b6528:	4859      	ldr	r0, [pc, #356]	; (b6690 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1340>)
   b652a:	f003 fd83 	bl	ba034 <_ZN9IPAddressC1Ev>
   b652e:	4956      	ldr	r1, [pc, #344]	; (b6688 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1338>)
   b6530:	4858      	ldr	r0, [pc, #352]	; (b6694 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1344>)
   b6532:	f003 ff72 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
   b6536:	4954      	ldr	r1, [pc, #336]	; (b6688 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1338>)
   b6538:	4857      	ldr	r0, [pc, #348]	; (b6698 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1348>)
   b653a:	f003 ff6e 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   b653e:	4952      	ldr	r1, [pc, #328]	; (b6688 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1338>)
   b6540:	4856      	ldr	r0, [pc, #344]	; (b669c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x134c>)
   b6542:	f003 ff6a 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
HttpClient http;
   b6546:	4856      	ldr	r0, [pc, #344]	; (b66a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1350>)
   b6548:	f001 f9f4 	bl	b7934 <_ZN10HttpClientC1Ev>
   b654c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6550:	9300      	str	r3, [sp, #0]
   b6552:	f242 7210 	movw	r2, #10000	; 0x2710
   b6556:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b655a:	4b52      	ldr	r3, [pc, #328]	; (b66a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1354>)
   b655c:	4620      	mov	r0, r4
   b655e:	f001 fbc1 	bl	b7ce4 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b6562:	4b51      	ldr	r3, [pc, #324]	; (b66a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1358>)
String SSID = "";
   b6564:	4948      	ldr	r1, [pc, #288]	; (b6688 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1338>)
   b6566:	6023      	str	r3, [r4, #0]
   b6568:	4850      	ldr	r0, [pc, #320]	; (b66ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x135c>)
   b656a:	f003 ff56 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
String password = "";
   b656e:	4946      	ldr	r1, [pc, #280]	; (b6688 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1338>)
   b6570:	484f      	ldr	r0, [pc, #316]	; (b66b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1360>)
   b6572:	f50d 7d41 	add.w	sp, sp, #772	; 0x304
   b6576:	ecbd 8b0e 	vpop	{d8-d14}
   b657a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
String password = "";
   b657e:	f003 bf4c 	b.w	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
   b6582:	484b      	ldr	r0, [pc, #300]	; (b66b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1360>)
   b6584:	f003 fefe 	bl	ba384 <_ZN6StringD1Ev>
String SSID = "";
   b6588:	4848      	ldr	r0, [pc, #288]	; (b66ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x135c>)
   b658a:	f003 fefb 	bl	ba384 <_ZN6StringD1Ev>
JsonParserStatic<10000, 1000> parser;
   b658e:	483d      	ldr	r0, [pc, #244]	; (b6684 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1334>)
   b6590:	f7fd fd92 	bl	b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b6594:	4b42      	ldr	r3, [pc, #264]	; (b66a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1350>)
   b6596:	4a47      	ldr	r2, [pc, #284]	; (b66b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1364>)
	if (_M_pi != nullptr)
   b6598:	699c      	ldr	r4, [r3, #24]
   b659a:	601a      	str	r2, [r3, #0]
   b659c:	b17c      	cbz	r4, b65be <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x126e>
      if (--_M_use_count == 0)
   b659e:	6863      	ldr	r3, [r4, #4]
   b65a0:	3b01      	subs	r3, #1
   b65a2:	6063      	str	r3, [r4, #4]
   b65a4:	b95b      	cbnz	r3, b65be <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x126e>
          _M_dispose();
   b65a6:	6823      	ldr	r3, [r4, #0]
   b65a8:	4620      	mov	r0, r4
   b65aa:	689b      	ldr	r3, [r3, #8]
   b65ac:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b65ae:	68a3      	ldr	r3, [r4, #8]
   b65b0:	3b01      	subs	r3, #1
   b65b2:	60a3      	str	r3, [r4, #8]
   b65b4:	b91b      	cbnz	r3, b65be <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x126e>
            _M_destroy();
   b65b6:	6823      	ldr	r3, [r4, #0]
   b65b8:	4620      	mov	r0, r4
   b65ba:	68db      	ldr	r3, [r3, #12]
   b65bc:	4798      	blx	r3
   b65be:	4837      	ldr	r0, [pc, #220]	; (b669c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x134c>)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b65c0:	4c3d      	ldr	r4, [pc, #244]	; (b66b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1368>)
   b65c2:	f003 fedf 	bl	ba384 <_ZN6StringD1Ev>
} http_request_t;
   b65c6:	4834      	ldr	r0, [pc, #208]	; (b6698 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1348>)
   b65c8:	f003 fedc 	bl	ba384 <_ZN6StringD1Ev>
   b65cc:	4831      	ldr	r0, [pc, #196]	; (b6694 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1344>)
   b65ce:	f003 fed9 	bl	ba384 <_ZN6StringD1Ev>
   b65d2:	482e      	ldr	r0, [pc, #184]	; (b668c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x133c>)
   b65d4:	f003 fed6 	bl	ba384 <_ZN6StringD1Ev>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   b65d8:	4838      	ldr	r0, [pc, #224]	; (b66bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x136c>)
   b65da:	f002 fee2 	bl	b93a2 <_ZN8particle17BleCharacteristicD1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   b65de:	4838      	ldr	r0, [pc, #224]	; (b66c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1370>)
   b65e0:	f002 fedf 	bl	b93a2 <_ZN8particle17BleCharacteristicD1Ev>
      }
   b65e4:	4837      	ldr	r0, [pc, #220]	; (b66c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1374>)
   b65e6:	f7fe f8ad 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b65ea:	4837      	ldr	r0, [pc, #220]	; (b66c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1378>)
   b65ec:	f7fe f8aa 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
std::vector<Railway> ctaRailways, mbtaRailways;
   b65f0:	4836      	ldr	r0, [pc, #216]	; (b66cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x137c>)
   b65f2:	f7fe fcf8 	bl	b4fe6 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b65f6:	4836      	ldr	r0, [pc, #216]	; (b66d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1380>)
   b65f8:	f7fe fcf5 	bl	b4fe6 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
	__destroy(__first, __last);
   b65fc:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6600:	f7fe fcff 	bl	b5002 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
   b6604:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b6606:	b118      	cbz	r0, b6610 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x12c0>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b6608:	68a1      	ldr	r1, [r4, #8]
   b660a:	1a09      	subs	r1, r1, r0
   b660c:	f7fd fd49 	bl	b40a2 <_ZdlPvj>
Railway greenLine2MBTA = Railway{
   b6610:	4830      	ldr	r0, [pc, #192]	; (b66d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1384>)
   b6612:	f7fe fcbd 	bl	b4f90 <_ZN7RailwayD1Ev>
Railway greenLine1MBTA = Railway{
   b6616:	4830      	ldr	r0, [pc, #192]	; (b66d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1388>)
   b6618:	f7fe fcba 	bl	b4f90 <_ZN7RailwayD1Ev>
Railway orangeLineMBTA = Railway{
   b661c:	482f      	ldr	r0, [pc, #188]	; (b66dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x138c>)
   b661e:	f7fe fcb7 	bl	b4f90 <_ZN7RailwayD1Ev>
Railway blueLineMBTA = Railway{
   b6622:	482f      	ldr	r0, [pc, #188]	; (b66e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1390>)
   b6624:	f7fe fcb4 	bl	b4f90 <_ZN7RailwayD1Ev>
Railway redLineMBTA = Railway{
   b6628:	482e      	ldr	r0, [pc, #184]	; (b66e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1394>)
   b662a:	f7fe fcb1 	bl	b4f90 <_ZN7RailwayD1Ev>
Railway pinkLineCTA = Railway(
   b662e:	482e      	ldr	r0, [pc, #184]	; (b66e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1398>)
   b6630:	f7fe fcae 	bl	b4f90 <_ZN7RailwayD1Ev>
Railway purpleLineCTA = Railway(
   b6634:	482d      	ldr	r0, [pc, #180]	; (b66ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x139c>)
   b6636:	f7fe fcab 	bl	b4f90 <_ZN7RailwayD1Ev>
Railway orangeLineCTA = Railway(
   b663a:	482d      	ldr	r0, [pc, #180]	; (b66f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13a0>)
   b663c:	f7fe fca8 	bl	b4f90 <_ZN7RailwayD1Ev>
Railway greenLineCTA = Railway(
   b6640:	482c      	ldr	r0, [pc, #176]	; (b66f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13a4>)
   b6642:	f7fe fca5 	bl	b4f90 <_ZN7RailwayD1Ev>
Railway brownLineCTA = Railway(
   b6646:	482c      	ldr	r0, [pc, #176]	; (b66f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13a8>)
   b6648:	f7fe fca2 	bl	b4f90 <_ZN7RailwayD1Ev>
Railway blueLineCTA = Railway(
   b664c:	482b      	ldr	r0, [pc, #172]	; (b66fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13ac>)
   b664e:	f7fe fc9f 	bl	b4f90 <_ZN7RailwayD1Ev>
Railway redLineCTA = Railway(
   b6652:	482b      	ldr	r0, [pc, #172]	; (b6700 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13b0>)
   b6654:	f7fe fc9c 	bl	b4f90 <_ZN7RailwayD1Ev>
        if (wakeupSource_) {
   b6658:	6828      	ldr	r0, [r5, #0]
   b665a:	b138      	cbz	r0, b666c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x131c>
   b665c:	f50d 7d41 	add.w	sp, sp, #772	; 0x304
   b6660:	ecbd 8b0e 	vpop	{d8-d14}
   b6664:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            free(wakeupSource_);
   b6668:	f002 b9f6 	b.w	b8a58 <free>
   b666c:	f50d 7d41 	add.w	sp, sp, #772	; 0x304
   b6670:	ecbd 8b0e 	vpop	{d8-d14}
   b6674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6678:	000be4a1 	.word	0x000be4a1
   b667c:	000b492d 	.word	0x000b492d
   b6680:	000be4a4 	.word	0x000be4a4
   b6684:	20037eb8 	.word	0x20037eb8
   b6688:	000be70e 	.word	0x000be70e
   b668c:	2003e634 	.word	0x2003e634
   b6690:	2003e644 	.word	0x2003e644
   b6694:	2003e65c 	.word	0x2003e65c
   b6698:	2003e670 	.word	0x2003e670
   b669c:	2003e684 	.word	0x2003e684
   b66a0:	200355b8 	.word	0x200355b8
   b66a4:	2003a5f4 	.word	0x2003a5f4
   b66a8:	000be564 	.word	0x000be564
   b66ac:	200352a4 	.word	0x200352a4
   b66b0:	2003e474 	.word	0x2003e474
   b66b4:	000bea18 	.word	0x000bea18
   b66b8:	20035454 	.word	0x20035454
   b66bc:	2003e694 	.word	0x2003e694
   b66c0:	2003e6ac 	.word	0x2003e6ac
   b66c4:	2003e69c 	.word	0x2003e69c
   b66c8:	200352fc 	.word	0x200352fc
   b66cc:	20037dd4 	.word	0x20037dd4
   b66d0:	20035460 	.word	0x20035460
   b66d4:	200354d8 	.word	0x200354d8
   b66d8:	2003546c 	.word	0x2003546c
   b66dc:	20037e4c 	.word	0x20037e4c
   b66e0:	20035378 	.word	0x20035378
   b66e4:	2003e5c8 	.word	0x2003e5c8
   b66e8:	2003e484 	.word	0x2003e484
   b66ec:	2003e4f0 	.word	0x2003e4f0
   b66f0:	20037de0 	.word	0x20037de0
   b66f4:	20035544 	.word	0x20035544
   b66f8:	200353e4 	.word	0x200353e4
   b66fc:	2003530c 	.word	0x2003530c
   b6700:	2003e55c 	.word	0x2003e55c
   b6704:	200352d4 	.word	0x200352d4

000b6708 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b6708:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b670a:	b510      	push	{r4, lr}
   b670c:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b670e:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b6712:	d005      	beq.n	b6720 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b6714:	4601      	mov	r1, r0
   b6716:	4622      	mov	r2, r4
   b6718:	4618      	mov	r0, r3
   b671a:	f005 fd09 	bl	bc130 <memmove>
   b671e:	4603      	mov	r3, r0
	}
   b6720:	1918      	adds	r0, r3, r4
   b6722:	bd10      	pop	{r4, pc}

000b6724 <_ZN7RailwayC1ERKS_>:
class Railway{
   b6724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6728:	460d      	mov	r5, r1
   b672a:	4604      	mov	r4, r0
   b672c:	f7fe f8c8 	bl	b48c0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6730:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6734:	2600      	movs	r6, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6736:	1ac9      	subs	r1, r1, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6738:	e9c4 6603 	strd	r6, r6, [r4, #12]
   b673c:	6166      	str	r6, [r4, #20]
      { _M_create_storage(__n); }
   b673e:	1089      	asrs	r1, r1, #2
   b6740:	f104 000c 	add.w	r0, r4, #12
   b6744:	f7fe fc04 	bl	b4f50 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
			      _Category>::__copy_m(__first, __last, __result);
   b6748:	68e2      	ldr	r2, [r4, #12]
   b674a:	e9d5 0103 	ldrd	r0, r1, [r5, #12]
   b674e:	f7ff ffdb 	bl	b6708 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b6752:	f105 0118 	add.w	r1, r5, #24
	this->_M_impl._M_finish =
   b6756:	6120      	str	r0, [r4, #16]
   b6758:	f104 0018 	add.w	r0, r4, #24
   b675c:	f7fe fc6e 	bl	b503c <_ZNSt6vectorIiSaIiEEC1ERKS1_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6760:	e9d5 3709 	ldrd	r3, r7, [r5, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b6764:	4826      	ldr	r0, [pc, #152]	; (b6800 <_ZN7RailwayC1ERKS_+0xdc>)
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6766:	62e6      	str	r6, [r4, #44]	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6768:	1aff      	subs	r7, r7, r3
   b676a:	10bb      	asrs	r3, r7, #2
	: _M_start(), _M_finish(), _M_end_of_storage()
   b676c:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b6770:	4358      	muls	r0, r3
   b6772:	f7fd fcb7 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b6776:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b677a:	4407      	add	r7, r0
   b677c:	62e7      	str	r7, [r4, #44]	; 0x2c
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b677e:	e9d5 7809 	ldrd	r7, r8, [r5, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b6782:	4606      	mov	r6, r0
   b6784:	45b8      	cmp	r8, r7
   b6786:	d007      	beq.n	b6798 <_ZN7RailwayC1ERKS_+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6788:	b11e      	cbz	r6, b6792 <_ZN7RailwayC1ERKS_+0x6e>
   b678a:	4639      	mov	r1, r7
   b678c:	4630      	mov	r0, r6
   b678e:	f7fe fc55 	bl	b503c <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b6792:	360c      	adds	r6, #12
   b6794:	370c      	adds	r7, #12
   b6796:	e7f5      	b.n	b6784 <_ZN7RailwayC1ERKS_+0x60>
	this->_M_impl._M_finish =
   b6798:	62a6      	str	r6, [r4, #40]	; 0x28
   b679a:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b679e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b67a2:	f7fd fd17 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b67a6:	e9d5 3712 	ldrd	r3, r7, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b67aa:	4815      	ldr	r0, [pc, #84]	; (b6800 <_ZN7RailwayC1ERKS_+0xdc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b67ac:	1aff      	subs	r7, r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b67ae:	2300      	movs	r3, #0
   b67b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   b67b4:	6523      	str	r3, [r4, #80]	; 0x50
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b67b6:	10fb      	asrs	r3, r7, #3
	this->_M_impl._M_start = this->_M_allocate(__n);
   b67b8:	4358      	muls	r0, r3
   b67ba:	f7fd fcdf 	bl	b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b67be:	e9c4 0012 	strd	r0, r0, [r4, #72]	; 0x48
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b67c2:	4407      	add	r7, r0
   b67c4:	6527      	str	r7, [r4, #80]	; 0x50
   b67c6:	e9d5 7812 	ldrd	r7, r8, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b67ca:	4606      	mov	r6, r0
   b67cc:	45b8      	cmp	r8, r7
   b67ce:	d007      	beq.n	b67e0 <_ZN7RailwayC1ERKS_+0xbc>
   b67d0:	b11e      	cbz	r6, b67da <_ZN7RailwayC1ERKS_+0xb6>
   b67d2:	4639      	mov	r1, r7
   b67d4:	4630      	mov	r0, r6
   b67d6:	f7fd fcfd 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b67da:	3618      	adds	r6, #24
   b67dc:	3718      	adds	r7, #24
   b67de:	e7f5      	b.n	b67cc <_ZN7RailwayC1ERKS_+0xa8>
	this->_M_impl._M_finish =
   b67e0:	64e6      	str	r6, [r4, #76]	; 0x4c
   b67e2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b67e4:	6563      	str	r3, [r4, #84]	; 0x54
   b67e6:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b67e8:	65a3      	str	r3, [r4, #88]	; 0x58
   b67ea:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b67ec:	65e3      	str	r3, [r4, #92]	; 0x5c
   b67ee:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b67f0:	6623      	str	r3, [r4, #96]	; 0x60
   b67f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   b67f4:	6663      	str	r3, [r4, #100]	; 0x64
   b67f6:	6eab      	ldr	r3, [r5, #104]	; 0x68
   b67f8:	66a3      	str	r3, [r4, #104]	; 0x68
   b67fa:	4620      	mov	r0, r4
   b67fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6800:	aaaaaaab 	.word	0xaaaaaaab

000b6804 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   b6804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6806:	e9d1 3700 	ldrd	r3, r7, [r1]
   b680a:	1aff      	subs	r7, r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b680c:	2300      	movs	r3, #0
   b680e:	e9c0 3300 	strd	r3, r3, [r0]
      vector(const vector& __x)
   b6812:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6814:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b6816:	480d      	ldr	r0, [pc, #52]	; (b684c <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x48>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6818:	10bb      	asrs	r3, r7, #2
	this->_M_impl._M_start = this->_M_allocate(__n);
   b681a:	4358      	muls	r0, r3
      vector(const vector& __x)
   b681c:	460e      	mov	r6, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b681e:	f7fd fc9b 	bl	b4158 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b6822:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b6826:	4407      	add	r7, r0
   b6828:	60a7      	str	r7, [r4, #8]
   b682a:	e9d6 6700 	ldrd	r6, r7, [r6]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b682e:	4605      	mov	r5, r0
   b6830:	42b7      	cmp	r7, r6
   b6832:	d007      	beq.n	b6844 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x40>
   b6834:	b11d      	cbz	r5, b683e <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x3a>
   b6836:	4631      	mov	r1, r6
   b6838:	4628      	mov	r0, r5
   b683a:	f7ff ff73 	bl	b6724 <_ZN7RailwayC1ERKS_>
   b683e:	356c      	adds	r5, #108	; 0x6c
   b6840:	366c      	adds	r6, #108	; 0x6c
   b6842:	e7f5      	b.n	b6830 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x2c>
	this->_M_impl._M_finish =
   b6844:	6065      	str	r5, [r4, #4]
      }
   b6846:	4620      	mov	r0, r4
   b6848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b684a:	bf00      	nop
   b684c:	684bda13 	.word	0x684bda13

000b6850 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   b6850:	b570      	push	{r4, r5, r6, lr}
   b6852:	4605      	mov	r5, r0
   b6854:	460e      	mov	r6, r1
   b6856:	4614      	mov	r4, r2
	      for (; __first != __last; ++__first, (void)++__cur)
   b6858:	42b5      	cmp	r5, r6
   b685a:	d00f      	beq.n	b687c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_+0x2c>
   b685c:	b15c      	cbz	r4, b6876 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_+0x26>
   b685e:	4629      	mov	r1, r5
   b6860:	4620      	mov	r0, r4
   b6862:	f7ff ffcf 	bl	b6804 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>
   b6866:	f105 010c 	add.w	r1, r5, #12
   b686a:	f104 000c 	add.w	r0, r4, #12
   b686e:	f7fd fcb1 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b6872:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b6874:	6263      	str	r3, [r4, #36]	; 0x24
   b6876:	3528      	adds	r5, #40	; 0x28
   b6878:	3428      	adds	r4, #40	; 0x28
   b687a:	e7ed      	b.n	b6858 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_+0x8>
	}
   b687c:	4620      	mov	r0, r4
   b687e:	bd70      	pop	{r4, r5, r6, pc}

000b6880 <_ZN7RailwayaSERKS_.isra.0>:
   b6880:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6884:	4604      	mov	r4, r0
   b6886:	460d      	mov	r5, r1
   b6888:	f7fd fce0 	bl	b424c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
   b688c:	f105 020c 	add.w	r2, r5, #12
   b6890:	f104 030c 	add.w	r3, r4, #12
      if (&__x != this)
   b6894:	429a      	cmp	r2, r3
   b6896:	d025      	beq.n	b68e4 <_ZN7RailwayaSERKS_.isra.0+0x64>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6898:	e9d5 8103 	ldrd	r8, r1, [r5, #12]
			 - this->_M_impl._M_start); }
   b689c:	68e2      	ldr	r2, [r4, #12]
   b689e:	6963      	ldr	r3, [r4, #20]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b68a0:	eba1 0608 	sub.w	r6, r1, r8
			 - this->_M_impl._M_start); }
   b68a4:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b68a6:	429e      	cmp	r6, r3
   b68a8:	d94a      	bls.n	b6940 <_ZN7RailwayaSERKS_.isra.0+0xc0>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b68aa:	2e00      	cmp	r6, #0
   b68ac:	d046      	beq.n	b693c <_ZN7RailwayaSERKS_.isra.0+0xbc>
	if (__n > this->_M_max_size())
   b68ae:	4b5d      	ldr	r3, [pc, #372]	; (b6a24 <_ZN7RailwayaSERKS_.isra.0+0x1a4>)
   b68b0:	429e      	cmp	r6, r3
   b68b2:	d901      	bls.n	b68b8 <_ZN7RailwayaSERKS_.isra.0+0x38>
	  std::__throw_bad_alloc();
   b68b4:	f004 fc46 	bl	bb144 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b68b8:	4630      	mov	r0, r6
   b68ba:	9101      	str	r1, [sp, #4]
   b68bc:	f7fd fbeb 	bl	b4096 <_Znwj>
   b68c0:	9901      	ldr	r1, [sp, #4]
   b68c2:	4607      	mov	r7, r0
   b68c4:	463a      	mov	r2, r7
   b68c6:	4640      	mov	r0, r8
   b68c8:	f7ff ff1e 	bl	b6708 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b68cc:	68e0      	ldr	r0, [r4, #12]
	if (__p)
   b68ce:	b118      	cbz	r0, b68d8 <_ZN7RailwayaSERKS_.isra.0+0x58>
			    - this->_M_impl._M_start);
   b68d0:	6961      	ldr	r1, [r4, #20]
	::operator delete(__p
   b68d2:	1a09      	subs	r1, r1, r0
   b68d4:	f7fd fbe5 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b68d8:	60e7      	str	r7, [r4, #12]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b68da:	4437      	add	r7, r6
   b68dc:	6167      	str	r7, [r4, #20]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b68de:	68e3      	ldr	r3, [r4, #12]
   b68e0:	4433      	add	r3, r6
   b68e2:	6123      	str	r3, [r4, #16]
   b68e4:	f105 0118 	add.w	r1, r5, #24
   b68e8:	f104 0018 	add.w	r0, r4, #24
   b68ec:	f7fe fbea 	bl	b50c4 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
   b68f0:	f105 0324 	add.w	r3, r5, #36	; 0x24
   b68f4:	f104 0224 	add.w	r2, r4, #36	; 0x24
      if (&__x != this)
   b68f8:	4293      	cmp	r3, r2
   b68fa:	d045      	beq.n	b6988 <_ZN7RailwayaSERKS_.isra.0+0x108>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b68fc:	e9d5 6a09 	ldrd	r6, sl, [r5, #36]	; 0x24
			 - this->_M_impl._M_start); }
   b6900:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
   b6904:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6906:	ebaa 0806 	sub.w	r8, sl, r6
			 - this->_M_impl._M_start); }
   b690a:	eba3 0309 	sub.w	r3, r3, r9
	  if (__xlen > capacity())
   b690e:	4543      	cmp	r3, r8
   b6910:	d255      	bcs.n	b69be <_ZN7RailwayaSERKS_.isra.0+0x13e>
	  pointer __result = this->_M_allocate(__n);
   b6912:	4845      	ldr	r0, [pc, #276]	; (b6a28 <_ZN7RailwayaSERKS_.isra.0+0x1a8>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6914:	ea4f 03a8 	mov.w	r3, r8, asr #2
	  pointer __result = this->_M_allocate(__n);
   b6918:	4358      	muls	r0, r3
   b691a:	f7fd fbe3 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
   b691e:	4607      	mov	r7, r0
	  _ForwardIterator __cur = __result;
   b6920:	4681      	mov	r9, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b6922:	45b2      	cmp	sl, r6
   b6924:	d020      	beq.n	b6968 <_ZN7RailwayaSERKS_.isra.0+0xe8>
   b6926:	f1b9 0f00 	cmp.w	r9, #0
   b692a:	d003      	beq.n	b6934 <_ZN7RailwayaSERKS_.isra.0+0xb4>
   b692c:	4631      	mov	r1, r6
   b692e:	4648      	mov	r0, r9
   b6930:	f7fe fb84 	bl	b503c <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b6934:	f109 090c 	add.w	r9, r9, #12
   b6938:	360c      	adds	r6, #12
   b693a:	e7f2      	b.n	b6922 <_ZN7RailwayaSERKS_.isra.0+0xa2>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b693c:	4637      	mov	r7, r6
   b693e:	e7c1      	b.n	b68c4 <_ZN7RailwayaSERKS_.isra.0+0x44>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6940:	6923      	ldr	r3, [r4, #16]
   b6942:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b6944:	429e      	cmp	r6, r3
   b6946:	d803      	bhi.n	b6950 <_ZN7RailwayaSERKS_.isra.0+0xd0>
   b6948:	4640      	mov	r0, r8
   b694a:	f7ff fedd 	bl	b6708 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
    { return std::uninitialized_copy(__first, __last, __result); }
   b694e:	e7c6      	b.n	b68de <_ZN7RailwayaSERKS_.isra.0+0x5e>
   b6950:	eb08 0103 	add.w	r1, r8, r3
   b6954:	4640      	mov	r0, r8
   b6956:	f7ff fed7 	bl	b6708 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b695a:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
   b695e:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
   b6962:	1a10      	subs	r0, r2, r0
   b6964:	4418      	add	r0, r3
   b6966:	e7f0      	b.n	b694a <_ZN7RailwayaSERKS_.isra.0+0xca>
	__destroy(__first, __last);
   b6968:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b696c:	f7fe fb05 	bl	b4f7a <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	      _M_deallocate(this->_M_impl._M_start,
   b6970:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b6972:	b118      	cbz	r0, b697c <_ZN7RailwayaSERKS_.isra.0+0xfc>
			    - this->_M_impl._M_start);
   b6974:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b6976:	1a09      	subs	r1, r1, r0
   b6978:	f7fd fb93 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b697c:	6267      	str	r7, [r4, #36]	; 0x24
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b697e:	4447      	add	r7, r8
   b6980:	62e7      	str	r7, [r4, #44]	; 0x2c
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b6982:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b6984:	4443      	add	r3, r8
   b6986:	62a3      	str	r3, [r4, #40]	; 0x28
	this->_M_assign(__str);
   b6988:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b698c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b6990:	f004 fc2e 	bl	bb1f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
   b6994:	f105 0148 	add.w	r1, r5, #72	; 0x48
   b6998:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b699c:	f7fd fca8 	bl	b42f0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
   b69a0:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b69a2:	6563      	str	r3, [r4, #84]	; 0x54
   b69a4:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b69a6:	65a3      	str	r3, [r4, #88]	; 0x58
   b69a8:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b69aa:	65e3      	str	r3, [r4, #92]	; 0x5c
   b69ac:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b69ae:	6623      	str	r3, [r4, #96]	; 0x60
   b69b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   b69b2:	6663      	str	r3, [r4, #100]	; 0x64
   b69b4:	6eab      	ldr	r3, [r5, #104]	; 0x68
   b69b6:	66a3      	str	r3, [r4, #104]	; 0x68
   b69b8:	b002      	add	sp, #8
   b69ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b69be:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   b69c0:	eba7 0709 	sub.w	r7, r7, r9
	  else if (size() >= __xlen)
   b69c4:	45b8      	cmp	r8, r7
   b69c6:	d80d      	bhi.n	b69e4 <_ZN7RailwayaSERKS_.isra.0+0x164>
   b69c8:	4630      	mov	r0, r6
   b69ca:	464a      	mov	r2, r9
   b69cc:	4651      	mov	r1, sl
   b69ce:	f7fe fbb1 	bl	b5134 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      : _M_current(__i) { }
   b69d2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b69d4:	4606      	mov	r6, r0
	  for (; __first != __last; ++__first)
   b69d6:	42b7      	cmp	r7, r6
   b69d8:	d0d3      	beq.n	b6982 <_ZN7RailwayaSERKS_.isra.0+0x102>
      }
   b69da:	4630      	mov	r0, r6
   b69dc:	f7fd feb2 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   b69e0:	360c      	adds	r6, #12
	return *this;
   b69e2:	e7f8      	b.n	b69d6 <_ZN7RailwayaSERKS_.isra.0+0x156>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b69e4:	4b10      	ldr	r3, [pc, #64]	; (b6a28 <_ZN7RailwayaSERKS_.isra.0+0x1a8>)
   b69e6:	10bf      	asrs	r7, r7, #2
   b69e8:	435f      	muls	r7, r3
   b69ea:	2f00      	cmp	r7, #0
   b69ec:	dd08      	ble.n	b6a00 <_ZN7RailwayaSERKS_.isra.0+0x180>
	      *__result = *__first;
   b69ee:	4631      	mov	r1, r6
   b69f0:	4648      	mov	r0, r9
   b69f2:	f7fe fb67 	bl	b50c4 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	      ++__first;
   b69f6:	360c      	adds	r6, #12
	      ++__result;
   b69f8:	f109 090c 	add.w	r9, r9, #12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b69fc:	3f01      	subs	r7, #1
   b69fe:	e7f4      	b.n	b69ea <_ZN7RailwayaSERKS_.isra.0+0x16a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6a00:	e9d4 6709 	ldrd	r6, r7, [r4, #36]	; 0x24
   b6a04:	1bb9      	subs	r1, r7, r6
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b6a06:	6a6e      	ldr	r6, [r5, #36]	; 0x24
					  __x._M_impl._M_finish,
   b6a08:	f8d5 9028 	ldr.w	r9, [r5, #40]	; 0x28
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b6a0c:	440e      	add	r6, r1
	      for (; __first != __last; ++__first, (void)++__cur)
   b6a0e:	45b1      	cmp	r9, r6
   b6a10:	d0b7      	beq.n	b6982 <_ZN7RailwayaSERKS_.isra.0+0x102>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6a12:	b11f      	cbz	r7, b6a1c <_ZN7RailwayaSERKS_.isra.0+0x19c>
   b6a14:	4631      	mov	r1, r6
   b6a16:	4638      	mov	r0, r7
   b6a18:	f7fe fb10 	bl	b503c <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b6a1c:	360c      	adds	r6, #12
   b6a1e:	370c      	adds	r7, #12
   b6a20:	e7f5      	b.n	b6a0e <_ZN7RailwayaSERKS_.isra.0+0x18e>
   b6a22:	bf00      	nop
   b6a24:	7ffffffc 	.word	0x7ffffffc
   b6a28:	aaaaaaab 	.word	0xaaaaaaab

000b6a2c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b6a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6a30:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b6a32:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6a34:	480b      	ldr	r0, [pc, #44]	; (b6a64 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x38>)
   b6a36:	10a4      	asrs	r4, r4, #2
   b6a38:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b6a3a:	4616      	mov	r6, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6a3c:	4627      	mov	r7, r4
   b6a3e:	4690      	mov	r8, r2
   b6a40:	2f00      	cmp	r7, #0
   b6a42:	dd08      	ble.n	b6a56 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x2a>
	      *__result = *__first;
   b6a44:	4629      	mov	r1, r5
   b6a46:	4640      	mov	r0, r8
   b6a48:	f7ff ff1a 	bl	b6880 <_ZN7RailwayaSERKS_.isra.0>
	      ++__first;
   b6a4c:	356c      	adds	r5, #108	; 0x6c
	      ++__result;
   b6a4e:	f108 086c 	add.w	r8, r8, #108	; 0x6c
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6a52:	3f01      	subs	r7, #1
   b6a54:	e7f4      	b.n	b6a40 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x14>
	  return __result;
   b6a56:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b6a5a:	206c      	movs	r0, #108	; 0x6c
   b6a5c:	fb00 6004 	mla	r0, r0, r4, r6
   b6a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6a64:	684bda13 	.word	0x684bda13

000b6a68 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>:
      if (&__x != this)
   b6a68:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b6a6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6a6e:	4604      	mov	r4, r0
   b6a70:	460f      	mov	r7, r1
      if (&__x != this)
   b6a72:	d02c      	beq.n	b6ace <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x66>
   b6a74:	e9d1 5a00 	ldrd	r5, sl, [r1]
			 - this->_M_impl._M_start); }
   b6a78:	f8d0 9000 	ldr.w	r9, [r0]
   b6a7c:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6a7e:	ebaa 0805 	sub.w	r8, sl, r5
			 - this->_M_impl._M_start); }
   b6a82:	eba3 0309 	sub.w	r3, r3, r9
	  if (__xlen > capacity())
   b6a86:	4543      	cmp	r3, r8
   b6a88:	d223      	bcs.n	b6ad2 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x6a>
	  pointer __result = this->_M_allocate(__n);
   b6a8a:	482a      	ldr	r0, [pc, #168]	; (b6b34 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xcc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6a8c:	ea4f 03a8 	mov.w	r3, r8, asr #2
	  pointer __result = this->_M_allocate(__n);
   b6a90:	4358      	muls	r0, r3
   b6a92:	f7fd fb61 	bl	b4158 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>
   b6a96:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   b6a98:	4607      	mov	r7, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b6a9a:	45aa      	cmp	sl, r5
   b6a9c:	d007      	beq.n	b6aae <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x46>
   b6a9e:	b11f      	cbz	r7, b6aa8 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x40>
   b6aa0:	4629      	mov	r1, r5
   b6aa2:	4638      	mov	r0, r7
   b6aa4:	f7ff fe3e 	bl	b6724 <_ZN7RailwayC1ERKS_>
   b6aa8:	376c      	adds	r7, #108	; 0x6c
   b6aaa:	356c      	adds	r5, #108	; 0x6c
   b6aac:	e7f5      	b.n	b6a9a <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x32>
	__destroy(__first, __last);
   b6aae:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6ab2:	f7fe fa8d 	bl	b4fd0 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	      _M_deallocate(this->_M_impl._M_start,
   b6ab6:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b6ab8:	b118      	cbz	r0, b6ac2 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x5a>
			    - this->_M_impl._M_start);
   b6aba:	68a1      	ldr	r1, [r4, #8]
   b6abc:	1a09      	subs	r1, r1, r0
   b6abe:	f7fd faf0 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b6ac2:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b6ac4:	4446      	add	r6, r8
   b6ac6:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b6ac8:	6823      	ldr	r3, [r4, #0]
   b6aca:	4443      	add	r3, r8
   b6acc:	6063      	str	r3, [r4, #4]
    }
   b6ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6ad2:	6846      	ldr	r6, [r0, #4]
   b6ad4:	eba6 0609 	sub.w	r6, r6, r9
	  else if (size() >= __xlen)
   b6ad8:	45b0      	cmp	r8, r6
   b6ada:	d80d      	bhi.n	b6af8 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x90>
			      _Category>::__copy_m(__first, __last, __result);
   b6adc:	4628      	mov	r0, r5
   b6ade:	464a      	mov	r2, r9
   b6ae0:	4651      	mov	r1, sl
   b6ae2:	f7ff ffa3 	bl	b6a2c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
      : _M_current(__i) { }
   b6ae6:	6866      	ldr	r6, [r4, #4]
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b6ae8:	4605      	mov	r5, r0
	  for (; __first != __last; ++__first)
   b6aea:	42ae      	cmp	r6, r5
   b6aec:	d0ec      	beq.n	b6ac8 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x60>
      __pointer->~_Tp();
   b6aee:	4628      	mov	r0, r5
   b6af0:	f7fe fa4e 	bl	b4f90 <_ZN7RailwayD1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   b6af4:	356c      	adds	r5, #108	; 0x6c
	return *this;
   b6af6:	e7f8      	b.n	b6aea <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x82>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6af8:	4b0e      	ldr	r3, [pc, #56]	; (b6b34 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xcc>)
   b6afa:	10b6      	asrs	r6, r6, #2
   b6afc:	435e      	muls	r6, r3
   b6afe:	2e00      	cmp	r6, #0
   b6b00:	dd08      	ble.n	b6b14 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xac>
	      *__result = *__first;
   b6b02:	4629      	mov	r1, r5
   b6b04:	4648      	mov	r0, r9
   b6b06:	f7ff febb 	bl	b6880 <_ZN7RailwayaSERKS_.isra.0>
	      ++__first;
   b6b0a:	356c      	adds	r5, #108	; 0x6c
	      ++__result;
   b6b0c:	f109 096c 	add.w	r9, r9, #108	; 0x6c
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6b10:	3e01      	subs	r6, #1
   b6b12:	e7f4      	b.n	b6afe <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x96>
   b6b14:	e9d4 5600 	ldrd	r5, r6, [r4]
   b6b18:	1b71      	subs	r1, r6, r5
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b6b1a:	683d      	ldr	r5, [r7, #0]
					  __x._M_impl._M_finish,
   b6b1c:	687f      	ldr	r7, [r7, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b6b1e:	440d      	add	r5, r1
   b6b20:	42af      	cmp	r7, r5
   b6b22:	d0d1      	beq.n	b6ac8 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x60>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6b24:	b11e      	cbz	r6, b6b2e <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xc6>
   b6b26:	4629      	mov	r1, r5
   b6b28:	4630      	mov	r0, r6
   b6b2a:	f7ff fdfb 	bl	b6724 <_ZN7RailwayC1ERKS_>
   b6b2e:	356c      	adds	r5, #108	; 0x6c
   b6b30:	366c      	adds	r6, #108	; 0x6c
   b6b32:	e7f5      	b.n	b6b20 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xb8>
   b6b34:	684bda13 	.word	0x684bda13

000b6b38 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b6b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6b3c:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b6b3e:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6b40:	4810      	ldr	r0, [pc, #64]	; (b6b84 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_+0x4c>)
   b6b42:	10e4      	asrs	r4, r4, #3
   b6b44:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b6b46:	4617      	mov	r7, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6b48:	46a0      	mov	r8, r4
   b6b4a:	4616      	mov	r6, r2
   b6b4c:	f1b8 0f00 	cmp.w	r8, #0
   b6b50:	dd10      	ble.n	b6b74 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_+0x3c>
   b6b52:	4629      	mov	r1, r5
   b6b54:	4630      	mov	r0, r6
   b6b56:	f7ff ff87 	bl	b6a68 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>
   b6b5a:	f105 010c 	add.w	r1, r5, #12
   b6b5e:	f106 000c 	add.w	r0, r6, #12
   b6b62:	f004 fb45 	bl	bb1f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
   b6b66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b6b68:	6273      	str	r3, [r6, #36]	; 0x24
	      ++__first;
   b6b6a:	3528      	adds	r5, #40	; 0x28
	      ++__result;
   b6b6c:	3628      	adds	r6, #40	; 0x28
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6b6e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b6b72:	e7eb      	b.n	b6b4c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_+0x14>
	  return __result;
   b6b74:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b6b78:	2028      	movs	r0, #40	; 0x28
   b6b7a:	fb00 7004 	mla	r0, r0, r4, r7
   b6b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6b82:	bf00      	nop
   b6b84:	cccccccd 	.word	0xcccccccd

000b6b88 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0>:
      vector<_Tp, _Alloc>::
   b6b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      return __last - __first;
   b6b8c:	eba2 0801 	sub.w	r8, r2, r1
			 - this->_M_impl._M_start); }
   b6b90:	6883      	ldr	r3, [r0, #8]
   b6b92:	4617      	mov	r7, r2
   b6b94:	6802      	ldr	r2, [r0, #0]
   b6b96:	1a9b      	subs	r3, r3, r2
	if (__len > capacity())
   b6b98:	4598      	cmp	r8, r3
      vector<_Tp, _Alloc>::
   b6b9a:	4604      	mov	r4, r0
   b6b9c:	460e      	mov	r6, r1
	if (__len > capacity())
   b6b9e:	d92a      	bls.n	b6bf6 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x6e>
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b6ba0:	4b26      	ldr	r3, [pc, #152]	; (b6c3c <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xb4>)
   b6ba2:	4598      	cmp	r8, r3
   b6ba4:	d902      	bls.n	b6bac <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x24>
	  __throw_length_error(
   b6ba6:	4826      	ldr	r0, [pc, #152]	; (b6c40 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xb8>)
   b6ba8:	f004 fad2 	bl	bb150 <_ZSt20__throw_length_errorPKc>
	  pointer __result = this->_M_allocate(__n);
   b6bac:	4825      	ldr	r0, [pc, #148]	; (b6c44 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xbc>)
   b6bae:	ea4f 03a8 	mov.w	r3, r8, asr #2
   b6bb2:	4358      	muls	r0, r3
   b6bb4:	f7fd fad0 	bl	b4158 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>
   b6bb8:	4605      	mov	r5, r0
	  _ForwardIterator __cur = __result;
   b6bba:	4681      	mov	r9, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b6bbc:	42b7      	cmp	r7, r6
   b6bbe:	d00a      	beq.n	b6bd6 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x4e>
   b6bc0:	f1b9 0f00 	cmp.w	r9, #0
   b6bc4:	d003      	beq.n	b6bce <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x46>
   b6bc6:	4631      	mov	r1, r6
   b6bc8:	4648      	mov	r0, r9
   b6bca:	f7ff fdab 	bl	b6724 <_ZN7RailwayC1ERKS_>
   b6bce:	366c      	adds	r6, #108	; 0x6c
   b6bd0:	f109 096c 	add.w	r9, r9, #108	; 0x6c
   b6bd4:	e7f2      	b.n	b6bbc <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x34>
	__destroy(__first, __last);
   b6bd6:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6bda:	f7fe f9f9 	bl	b4fd0 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	    _M_deallocate(this->_M_impl._M_start,
   b6bde:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b6be0:	b118      	cbz	r0, b6bea <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x62>
			  - this->_M_impl._M_start);
   b6be2:	68a1      	ldr	r1, [r4, #8]
   b6be4:	1a09      	subs	r1, r1, r0
   b6be6:	f7fd fa5c 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
   b6bea:	6025      	str	r5, [r4, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b6bec:	4445      	add	r5, r8
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b6bee:	e9c4 5501 	strd	r5, r5, [r4, #4]
	      std::__uninitialized_copy_a(__mid, __last,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
	  }
      }
   b6bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6bf6:	6845      	ldr	r5, [r0, #4]
   b6bf8:	1aad      	subs	r5, r5, r2
	else if (size() >= __len)
   b6bfa:	45a8      	cmp	r8, r5
   b6bfc:	d80b      	bhi.n	b6c16 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x8e>
			      _Category>::__copy_m(__first, __last, __result);
   b6bfe:	4639      	mov	r1, r7
   b6c00:	4630      	mov	r0, r6
   b6c02:	f7ff ff13 	bl	b6a2c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b6c06:	6861      	ldr	r1, [r4, #4]
   b6c08:	4288      	cmp	r0, r1
   b6c0a:	4605      	mov	r5, r0
   b6c0c:	d0f1      	beq.n	b6bf2 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x6a>
   b6c0e:	f7fe f9df 	bl	b4fd0 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	    this->_M_impl._M_finish = __pos;
   b6c12:	6065      	str	r5, [r4, #4]
   b6c14:	e7ed      	b.n	b6bf2 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x6a>
	__i += __n;
   b6c16:	440d      	add	r5, r1
   b6c18:	4630      	mov	r0, r6
   b6c1a:	4629      	mov	r1, r5
   b6c1c:	f7ff ff06 	bl	b6a2c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6c20:	6866      	ldr	r6, [r4, #4]
   b6c22:	42af      	cmp	r7, r5
   b6c24:	d007      	beq.n	b6c36 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xae>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6c26:	b11e      	cbz	r6, b6c30 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xa8>
   b6c28:	4629      	mov	r1, r5
   b6c2a:	4630      	mov	r0, r6
   b6c2c:	f7ff fd7a 	bl	b6724 <_ZN7RailwayC1ERKS_>
   b6c30:	356c      	adds	r5, #108	; 0x6c
   b6c32:	366c      	adds	r6, #108	; 0x6c
   b6c34:	e7f5      	b.n	b6c22 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x9a>
	    this->_M_impl._M_finish =
   b6c36:	6066      	str	r6, [r4, #4]
      }
   b6c38:	e7db      	b.n	b6bf2 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x6a>
   b6c3a:	bf00      	nop
   b6c3c:	7fffffa4 	.word	0x7fffffa4
   b6c40:	000be33b 	.word	0x000be33b
   b6c44:	684bda13 	.word	0x684bda13

000b6c48 <setup>:
void setup(){
   b6c48:	b570      	push	{r4, r5, r6, lr}
   b6c4a:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
  Serial.begin(9600);
   b6c4e:	f004 f8c5 	bl	baddc <_Z16_fetch_usbserialv>
   b6c52:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6c56:	f004 f8b5 	bl	badc4 <_ZN9USBSerial5beginEl>
  delay(500);
   b6c5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b6c5e:	f001 ff43 	bl	b8ae8 <delay>
  BLE.on();
   b6c62:	f002 faad 	bl	b91c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6c66:	f002 faf5 	bl	b9254 <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   b6c6a:	f002 faa9 	bl	b91c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6c6e:	4a9b      	ldr	r2, [pc, #620]	; (b6edc <setup+0x294>)
   b6c70:	4d9b      	ldr	r5, [pc, #620]	; (b6ee0 <setup+0x298>)
   b6c72:	4601      	mov	r1, r0
   b6c74:	a817      	add	r0, sp, #92	; 0x5c
   b6c76:	f002 ffd7 	bl	b9c28 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b6c7a:	a817      	add	r0, sp, #92	; 0x5c
   b6c7c:	f002 fb91 	bl	b93a2 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   b6c80:	f002 fa9e 	bl	b91c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6c84:	4a97      	ldr	r2, [pc, #604]	; (b6ee4 <setup+0x29c>)
   b6c86:	4601      	mov	r1, r0
   b6c88:	a817      	add	r0, sp, #92	; 0x5c
   b6c8a:	f002 ffcd 	bl	b9c28 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b6c8e:	a817      	add	r0, sp, #92	; 0x5c
   b6c90:	f002 fb87 	bl	b93a2 <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData data;
   b6c94:	a802      	add	r0, sp, #8
   b6c96:	f002 fcba 	bl	b960e <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   b6c9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6c9c:	ac11      	add	r4, sp, #68	; 0x44
   b6c9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6ca0:	682e      	ldr	r6, [r5, #0]
   b6ca2:	6026      	str	r6, [r4, #0]
        BleUuid tempUUID(uuid);
   b6ca4:	ad11      	add	r5, sp, #68	; 0x44
   b6ca6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6ca8:	ac17      	add	r4, sp, #92	; 0x5c
   b6caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b6cac:	a817      	add	r0, sp, #92	; 0x5c
        BleUuid tempUUID(uuid);
   b6cae:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b6cb0:	f002 f888 	bl	b8dc4 <_ZNK8particle7BleUuid4typeEv>
   b6cb4:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b6cb6:	a817      	add	r0, sp, #92	; 0x5c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b6cb8:	2c00      	cmp	r4, #0
   b6cba:	f040 80e9 	bne.w	b6e90 <setup+0x248>
            uint16_t uuid16 = tempUUID.shorted();
   b6cbe:	f002 f89d 	bl	b8dfc <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b6cc2:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b6cc4:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b6cc8:	2302      	movs	r3, #2
   b6cca:	aa0b      	add	r2, sp, #44	; 0x2c
   b6ccc:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b6cce:	a802      	add	r0, sp, #8
   b6cd0:	f002 fc92 	bl	b95f8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   b6cd4:	f002 fa74 	bl	b91c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6cd8:	2200      	movs	r2, #0
   b6cda:	a902      	add	r1, sp, #8
   b6cdc:	f002 fb04 	bl	b92e8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  request.hostname = "trek.thewcl.com";
   b6ce0:	4c81      	ldr	r4, [pc, #516]	; (b6ee8 <setup+0x2a0>)

    //loopIndex must point to either the first or last checkpoint, tripleIndex cannot be 0
    void setLoopIndex(int triple, int loop){
        tripleIndex = triple;
   b6ce2:	4e82      	ldr	r6, [pc, #520]	; (b6eec <setup+0x2a4>)
  acquireWireBuffer();
   b6ce4:	a817      	add	r0, sp, #92	; 0x5c
   b6ce6:	f7fd fd03 	bl	b46f0 <_Z17acquireWireBufferv>
  Wire.begin();
   b6cea:	f004 f9c5 	bl	bb078 <_Z19__fetch_global_Wirev>
   b6cee:	f003 f927 	bl	b9f40 <_ZN7TwoWire5beginEv>
  request.hostname = "trek.thewcl.com";
   b6cf2:	497f      	ldr	r1, [pc, #508]	; (b6ef0 <setup+0x2a8>)
   b6cf4:	4620      	mov	r0, r4
   b6cf6:	f003 fbd8 	bl	ba4aa <_ZN6StringaSEPKc>
  request.port = 80;
   b6cfa:	2350      	movs	r3, #80	; 0x50
   b6cfc:	497d      	ldr	r1, [pc, #500]	; (b6ef4 <setup+0x2ac>)
   b6cfe:	63a3      	str	r3, [r4, #56]	; 0x38
   b6d00:	4c7d      	ldr	r4, [pc, #500]	; (b6ef8 <setup+0x2b0>)
        loopIndex = loop;
   b6d02:	2502      	movs	r5, #2
   b6d04:	2006      	movs	r0, #6
   b6d06:	e9c1 5015 	strd	r5, r0, [r1, #84]	; 0x54
   b6d0a:	e9c4 5015 	strd	r5, r0, [r4, #84]	; 0x54
        tripleIndex = triple;
   b6d0e:	4d7b      	ldr	r5, [pc, #492]	; (b6efc <setup+0x2b4>)
        loopIndex = loop;
   b6d10:	2203      	movs	r2, #3
   b6d12:	2307      	movs	r3, #7
  ctaRailways = {brownLineCTA, orangeLineCTA, pinkLineCTA, purpleLineCTA, greenLineCTA};
   b6d14:	a817      	add	r0, sp, #92	; 0x5c
   b6d16:	e9c5 2315 	strd	r2, r3, [r5, #84]	; 0x54
   b6d1a:	e9c6 2315 	strd	r2, r3, [r6, #84]	; 0x54
   b6d1e:	f7ff fd01 	bl	b6724 <_ZN7RailwayC1ERKS_>
   b6d22:	4631      	mov	r1, r6
   b6d24:	a832      	add	r0, sp, #200	; 0xc8
   b6d26:	f7ff fcfd 	bl	b6724 <_ZN7RailwayC1ERKS_>
   b6d2a:	4629      	mov	r1, r5
   b6d2c:	a84d      	add	r0, sp, #308	; 0x134
   b6d2e:	f7ff fcf9 	bl	b6724 <_ZN7RailwayC1ERKS_>
   b6d32:	4621      	mov	r1, r4
   b6d34:	a868      	add	r0, sp, #416	; 0x1a0
   b6d36:	f7ff fcf5 	bl	b6724 <_ZN7RailwayC1ERKS_>
   b6d3a:	4971      	ldr	r1, [pc, #452]	; (b6f00 <setup+0x2b8>)
   b6d3c:	a883      	add	r0, sp, #524	; 0x20c
   b6d3e:	f7ff fcf1 	bl	b6724 <_ZN7RailwayC1ERKS_>
	this->_M_assign_aux(__l.begin(), __l.end(),
   b6d42:	4870      	ldr	r0, [pc, #448]	; (b6f04 <setup+0x2bc>)
   b6d44:	aa9e      	add	r2, sp, #632	; 0x278
   b6d46:	a917      	add	r1, sp, #92	; 0x5c
   b6d48:	f7ff ff1e 	bl	b6b88 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0>
   b6d4c:	2404      	movs	r4, #4
   b6d4e:	256c      	movs	r5, #108	; 0x6c
   b6d50:	ab17      	add	r3, sp, #92	; 0x5c
   b6d52:	fb05 3004 	mla	r0, r5, r4, r3
   b6d56:	f7fe f91b 	bl	b4f90 <_ZN7RailwayD1Ev>
   b6d5a:	3c01      	subs	r4, #1
   b6d5c:	d2f8      	bcs.n	b6d50 <setup+0x108>
  mbtaRailways = {redLineMBTA, greenLine1MBTA, greenLine2MBTA, blueLineMBTA, orangeLineMBTA};
   b6d5e:	496a      	ldr	r1, [pc, #424]	; (b6f08 <setup+0x2c0>)
   b6d60:	a817      	add	r0, sp, #92	; 0x5c
   b6d62:	f7ff fcdf 	bl	b6724 <_ZN7RailwayC1ERKS_>
   b6d66:	4969      	ldr	r1, [pc, #420]	; (b6f0c <setup+0x2c4>)
   b6d68:	a832      	add	r0, sp, #200	; 0xc8
   b6d6a:	f7ff fcdb 	bl	b6724 <_ZN7RailwayC1ERKS_>
   b6d6e:	4968      	ldr	r1, [pc, #416]	; (b6f10 <setup+0x2c8>)
   b6d70:	a84d      	add	r0, sp, #308	; 0x134
   b6d72:	f7ff fcd7 	bl	b6724 <_ZN7RailwayC1ERKS_>
   b6d76:	4967      	ldr	r1, [pc, #412]	; (b6f14 <setup+0x2cc>)
   b6d78:	a868      	add	r0, sp, #416	; 0x1a0
   b6d7a:	f7ff fcd3 	bl	b6724 <_ZN7RailwayC1ERKS_>
   b6d7e:	4966      	ldr	r1, [pc, #408]	; (b6f18 <setup+0x2d0>)
   b6d80:	a883      	add	r0, sp, #524	; 0x20c
   b6d82:	f7ff fccf 	bl	b6724 <_ZN7RailwayC1ERKS_>
   b6d86:	4865      	ldr	r0, [pc, #404]	; (b6f1c <setup+0x2d4>)
   b6d88:	aa9e      	add	r2, sp, #632	; 0x278
   b6d8a:	a917      	add	r1, sp, #92	; 0x5c
   b6d8c:	f7ff fefc 	bl	b6b88 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0>
   b6d90:	2404      	movs	r4, #4
   b6d92:	256c      	movs	r5, #108	; 0x6c
   b6d94:	ab17      	add	r3, sp, #92	; 0x5c
   b6d96:	fb05 3004 	mla	r0, r5, r4, r3
   b6d9a:	f7fe f8f9 	bl	b4f90 <_ZN7RailwayD1Ev>
   b6d9e:	3c01      	subs	r4, #1
   b6da0:	d2f8      	bcs.n	b6d94 <setup+0x14c>
  cities = {City(ctaRailways, "cta", 5), City(mbtaRailways, "mbta", 5)};
   b6da2:	4958      	ldr	r1, [pc, #352]	; (b6f04 <setup+0x2bc>)
   b6da4:	a805      	add	r0, sp, #20
   b6da6:	f7ff fd2d 	bl	b6804 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>
   b6daa:	495d      	ldr	r1, [pc, #372]	; (b6f20 <setup+0x2d8>)
   b6dac:	a80b      	add	r0, sp, #44	; 0x2c
   b6dae:	f7fd f9ab 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6db2:	2400      	movs	r4, #0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b6db4:	ab1c      	add	r3, sp, #112	; 0x70
        std::vector<Railway> railways;
        std::string name;
        int slaveCountExpected;

        City(std::vector<Railway> railwaysInput, std::string nameInput, int slaveCountExpectedInput){
            railways = railwaysInput;
   b6db6:	a905      	add	r1, sp, #20
   b6db8:	a817      	add	r0, sp, #92	; 0x5c
      { _M_string_length = __length; }
   b6dba:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
   b6dbe:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
   b6dc2:	9419      	str	r4, [sp, #100]	; 0x64
   b6dc4:	f88d 4070 	strb.w	r4, [sp, #112]	; 0x70
   b6dc8:	f7ff fe4e 	bl	b6a68 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>
	this->_M_assign(__str);
   b6dcc:	a90b      	add	r1, sp, #44	; 0x2c
   b6dce:	a81a      	add	r0, sp, #104	; 0x68
   b6dd0:	f004 fa0e 	bl	bb1f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
            name = nameInput;
            slaveCountExpected = slaveCountExpectedInput;
   b6dd4:	2505      	movs	r5, #5
   b6dd6:	4951      	ldr	r1, [pc, #324]	; (b6f1c <setup+0x2d4>)
   b6dd8:	9520      	str	r5, [sp, #128]	; 0x80
   b6dda:	a808      	add	r0, sp, #32
   b6ddc:	f7ff fd12 	bl	b6804 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>
   b6de0:	4950      	ldr	r1, [pc, #320]	; (b6f24 <setup+0x2dc>)
   b6de2:	a811      	add	r0, sp, #68	; 0x44
   b6de4:	f7fd f990 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b6de8:	ab26      	add	r3, sp, #152	; 0x98
      { _M_string_length = __length; }
   b6dea:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
   b6dee:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
   b6df2:	9423      	str	r4, [sp, #140]	; 0x8c
   b6df4:	f88d 4098 	strb.w	r4, [sp, #152]	; 0x98
            railways = railwaysInput;
   b6df8:	a908      	add	r1, sp, #32
			 - this->_M_impl._M_start); }
   b6dfa:	4c4b      	ldr	r4, [pc, #300]	; (b6f28 <setup+0x2e0>)
   b6dfc:	a821      	add	r0, sp, #132	; 0x84
   b6dfe:	f7ff fe33 	bl	b6a68 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>
	this->_M_assign(__str);
   b6e02:	a911      	add	r1, sp, #68	; 0x44
   b6e04:	a824      	add	r0, sp, #144	; 0x90
   b6e06:	f004 f9f3 	bl	bb1f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
   b6e0a:	6822      	ldr	r2, [r4, #0]
   b6e0c:	68a3      	ldr	r3, [r4, #8]
            slaveCountExpected = slaveCountExpectedInput;
   b6e0e:	952a      	str	r5, [sp, #168]	; 0xa8
   b6e10:	1a9b      	subs	r3, r3, r2
	if (__len > capacity())
   b6e12:	2b4f      	cmp	r3, #79	; 0x4f
   b6e14:	d844      	bhi.n	b6ea0 <setup+0x258>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6e16:	2050      	movs	r0, #80	; 0x50
   b6e18:	f7fd f93d 	bl	b4096 <_Znwj>
	__uninit_copy(__first, __last, __result);
   b6e1c:	a92b      	add	r1, sp, #172	; 0xac
   b6e1e:	4602      	mov	r2, r0
   b6e20:	4605      	mov	r5, r0
   b6e22:	a817      	add	r0, sp, #92	; 0x5c
   b6e24:	f7ff fd14 	bl	b6850 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_>
	__destroy(__first, __last);
   b6e28:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6e2c:	f7fe f8e9 	bl	b5002 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>
	    _M_deallocate(this->_M_impl._M_start,
   b6e30:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b6e32:	b118      	cbz	r0, b6e3c <setup+0x1f4>
			  - this->_M_impl._M_start);
   b6e34:	68a1      	ldr	r1, [r4, #8]
	::operator delete(__p
   b6e36:	1a09      	subs	r1, r1, r0
   b6e38:	f7fd f933 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
   b6e3c:	4b3a      	ldr	r3, [pc, #232]	; (b6f28 <setup+0x2e0>)
   b6e3e:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b6e40:	3550      	adds	r5, #80	; 0x50
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b6e42:	e9c3 5501 	strd	r5, r5, [r3, #4]
      { _M_dispose(); }
   b6e46:	a824      	add	r0, sp, #144	; 0x90
   b6e48:	f004 f9b4 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
class City{
   b6e4c:	a821      	add	r0, sp, #132	; 0x84
   b6e4e:	f7fe f8ca 	bl	b4fe6 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b6e52:	a81a      	add	r0, sp, #104	; 0x68
   b6e54:	f004 f9ae 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6e58:	a817      	add	r0, sp, #92	; 0x5c
   b6e5a:	f7fe f8c4 	bl	b4fe6 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b6e5e:	a811      	add	r0, sp, #68	; 0x44
   b6e60:	f004 f9a8 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6e64:	a808      	add	r0, sp, #32
   b6e66:	f7fe f8be 	bl	b4fe6 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b6e6a:	a80b      	add	r0, sp, #44	; 0x2c
   b6e6c:	f004 f9a2 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6e70:	a805      	add	r0, sp, #20
   b6e72:	f7fe f8b8 	bl	b4fe6 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
    }

    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
   b6e76:	482d      	ldr	r0, [pc, #180]	; (b6f2c <setup+0x2e4>)
   b6e78:	2300      	movs	r3, #0
   b6e7a:	461a      	mov	r2, r3
   b6e7c:	4619      	mov	r1, r3
   b6e7e:	6840      	ldr	r0, [r0, #4]
   b6e80:	f001 fdba 	bl	b89f8 <network_clear_credentials>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b6e84:	9802      	ldr	r0, [sp, #8]
   b6e86:	f001 fde7 	bl	b8a58 <free>
}
   b6e8a:	f50d 7d1e 	add.w	sp, sp, #632	; 0x278
   b6e8e:	bd70      	pop	{r4, r5, r6, pc}
   b6e90:	f001 ffb6 	bl	b8e00 <_ZNK8particle7BleUuid8rawBytesEv>
   b6e94:	2300      	movs	r3, #0
   b6e96:	9300      	str	r3, [sp, #0]
   b6e98:	4602      	mov	r2, r0
   b6e9a:	2310      	movs	r3, #16
   b6e9c:	2107      	movs	r1, #7
   b6e9e:	e716      	b.n	b6cce <setup+0x86>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6ea0:	6865      	ldr	r5, [r4, #4]
   b6ea2:	1aad      	subs	r5, r5, r2
	else if (size() >= __len)
   b6ea4:	2d4f      	cmp	r5, #79	; 0x4f
   b6ea6:	d90b      	bls.n	b6ec0 <setup+0x278>
   b6ea8:	a92b      	add	r1, sp, #172	; 0xac
   b6eaa:	a817      	add	r0, sp, #92	; 0x5c
   b6eac:	f7ff fe44 	bl	b6b38 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b6eb0:	6861      	ldr	r1, [r4, #4]
   b6eb2:	4288      	cmp	r0, r1
   b6eb4:	4605      	mov	r5, r0
   b6eb6:	d0c6      	beq.n	b6e46 <setup+0x1fe>
   b6eb8:	f7fe f8a3 	bl	b5002 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>
	    this->_M_impl._M_finish = __pos;
   b6ebc:	6065      	str	r5, [r4, #4]
   b6ebe:	e7c2      	b.n	b6e46 <setup+0x1fe>
   b6ec0:	ab17      	add	r3, sp, #92	; 0x5c
   b6ec2:	441d      	add	r5, r3
   b6ec4:	4629      	mov	r1, r5
   b6ec6:	4618      	mov	r0, r3
   b6ec8:	f7ff fe36 	bl	b6b38 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_>
   b6ecc:	6862      	ldr	r2, [r4, #4]
   b6ece:	a92b      	add	r1, sp, #172	; 0xac
   b6ed0:	4628      	mov	r0, r5
   b6ed2:	f7ff fcbd 	bl	b6850 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_>
	    this->_M_impl._M_finish =
   b6ed6:	6060      	str	r0, [r4, #4]
   b6ed8:	e7b5      	b.n	b6e46 <setup+0x1fe>
   b6eda:	bf00      	nop
   b6edc:	2003e6ac 	.word	0x2003e6ac
   b6ee0:	200352c0 	.word	0x200352c0
   b6ee4:	2003e694 	.word	0x2003e694
   b6ee8:	2003e634 	.word	0x2003e634
   b6eec:	20037de0 	.word	0x20037de0
   b6ef0:	000be4a7 	.word	0x000be4a7
   b6ef4:	200353e4 	.word	0x200353e4
   b6ef8:	2003e4f0 	.word	0x2003e4f0
   b6efc:	2003e484 	.word	0x2003e484
   b6f00:	20035544 	.word	0x20035544
   b6f04:	20035460 	.word	0x20035460
   b6f08:	2003e5c8 	.word	0x2003e5c8
   b6f0c:	2003546c 	.word	0x2003546c
   b6f10:	200354d8 	.word	0x200354d8
   b6f14:	20035378 	.word	0x20035378
   b6f18:	20037e4c 	.word	0x20037e4c
   b6f1c:	20037dd4 	.word	0x20037dd4
   b6f20:	000be4b7 	.word	0x000be4b7
   b6f24:	000be4bb 	.word	0x000be4bb
   b6f28:	20035454 	.word	0x20035454
   b6f2c:	2003e718 	.word	0x2003e718

000b6f30 <_GLOBAL__sub_I_SystemMode>:
   b6f30:	2001      	movs	r0, #1
   b6f32:	f7fe ba0d 	b.w	b5350 <_Z41__static_initialization_and_destruction_0ii.constprop.0>
	...

000b6f38 <loop>:
void loop(){
   b6f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6f3c:	ed2d 8b06 	vpush	{d8-d10}
        return network_has_credentials(*this, 0, NULL);
   b6f40:	4b4e      	ldr	r3, [pc, #312]	; (b707c <loop+0x144>)
   b6f42:	2200      	movs	r2, #0
   b6f44:	b0b7      	sub	sp, #220	; 0xdc
   b6f46:	6858      	ldr	r0, [r3, #4]
   b6f48:	4611      	mov	r1, r2
   b6f4a:	f001 fd45 	bl	b89d8 <network_has_credentials>
  if(WiFi.hasCredentials() && userInput){
   b6f4e:	2800      	cmp	r0, #0
   b6f50:	f000 84e5 	beq.w	b791e <loop+0x9e6>
   b6f54:	4b4a      	ldr	r3, [pc, #296]	; (b7080 <loop+0x148>)
   b6f56:	781b      	ldrb	r3, [r3, #0]
   b6f58:	2b00      	cmp	r3, #0
   b6f5a:	f000 84e0 	beq.w	b791e <loop+0x9e6>
      : _M_current(__i) { }
   b6f5e:	f8df b160 	ldr.w	fp, [pc, #352]	; b70c0 <loop+0x188>
      Serial.printf("%i, ", i);
   b6f62:	4d48      	ldr	r5, [pc, #288]	; (b7084 <loop+0x14c>)
    Serial.println("loop start");
   b6f64:	f003 ff3a 	bl	baddc <_Z16_fetch_usbserialv>
   b6f68:	4947      	ldr	r1, [pc, #284]	; (b7088 <loop+0x150>)
   b6f6a:	f003 f9ac 	bl	ba2c6 <_ZN5Print7printlnEPKc>
   b6f6e:	e9db 4600 	ldrd	r4, r6, [fp]
    for(int i : sequenceArr){
   b6f72:	42b4      	cmp	r4, r6
   b6f74:	d009      	beq.n	b6f8a <loop+0x52>
   b6f76:	f854 2b04 	ldr.w	r2, [r4], #4
   b6f7a:	9203      	str	r2, [sp, #12]
      Serial.printf("%i, ", i);
   b6f7c:	f003 ff2e 	bl	baddc <_Z16_fetch_usbserialv>
   b6f80:	9a03      	ldr	r2, [sp, #12]
   b6f82:	4629      	mov	r1, r5
   b6f84:	f7fd fa34 	bl	b43f0 <_ZN5Print6printfEPKcz>
	return *this;
   b6f88:	e7f3      	b.n	b6f72 <loop+0x3a>
    Serial.println();
   b6f8a:	f003 ff27 	bl	baddc <_Z16_fetch_usbserialv>
   b6f8e:	f003 f98e 	bl	ba2ae <_ZN5Print7printlnEv>
    for(int j = 0; j < cities[cityIndex].railways.size(); j++){
   b6f92:	2300      	movs	r3, #0
   b6f94:	4f3d      	ldr	r7, [pc, #244]	; (b708c <loop+0x154>)
	return *(this->_M_impl._M_start + __n);
   b6f96:	4e3e      	ldr	r6, [pc, #248]	; (b7090 <loop+0x158>)
   b6f98:	683a      	ldr	r2, [r7, #0]
   b6f9a:	6831      	ldr	r1, [r6, #0]
   b6f9c:	9303      	str	r3, [sp, #12]
   b6f9e:	2528      	movs	r5, #40	; 0x28
   b6fa0:	436a      	muls	r2, r5
   b6fa2:	188b      	adds	r3, r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6fa4:	588a      	ldr	r2, [r1, r2]
   b6fa6:	685b      	ldr	r3, [r3, #4]
   b6fa8:	1a9b      	subs	r3, r3, r2
   b6faa:	4a3a      	ldr	r2, [pc, #232]	; (b7094 <loop+0x15c>)
   b6fac:	109b      	asrs	r3, r3, #2
   b6fae:	4353      	muls	r3, r2
   b6fb0:	9a03      	ldr	r2, [sp, #12]
   b6fb2:	4293      	cmp	r3, r2
   b6fb4:	f240 8441 	bls.w	b783a <loop+0x902>
      delay(1000);
   b6fb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b6fbc:	f001 fd94 	bl	b8ae8 <delay>
	StringSumHelper(const char *p) : String(p) {}
   b6fc0:	4935      	ldr	r1, [pc, #212]	; (b7098 <loop+0x160>)
   b6fc2:	a817      	add	r0, sp, #92	; 0x5c
   b6fc4:	f003 fa29 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
	return *(this->_M_impl._M_start + __n);
   b6fc8:	683a      	ldr	r2, [r7, #0]
      { return _M_dataplus._M_p; }
   b6fca:	6833      	ldr	r3, [r6, #0]
   b6fcc:	fb05 3302 	mla	r3, r5, r2, r3
      request.path = "/loop-tracks/" + String(cities[cityIndex].name.c_str()) + "?lines=" + String(cities[cityIndex].railways[j].name.c_str());
   b6fd0:	a813      	add	r0, sp, #76	; 0x4c
   b6fd2:	68d9      	ldr	r1, [r3, #12]
   b6fd4:	f003 fa21 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
   b6fd8:	a913      	add	r1, sp, #76	; 0x4c
   b6fda:	a817      	add	r0, sp, #92	; 0x5c
   b6fdc:	f003 fab2 	bl	ba544 <_ZplRK15StringSumHelperRK6String>
   b6fe0:	492e      	ldr	r1, [pc, #184]	; (b709c <loop+0x164>)
   b6fe2:	f003 fabb 	bl	ba55c <_ZplRK15StringSumHelperPKc>
   b6fe6:	9b03      	ldr	r3, [sp, #12]
   b6fe8:	6832      	ldr	r2, [r6, #0]
   b6fea:	246c      	movs	r4, #108	; 0x6c
   b6fec:	435c      	muls	r4, r3
   b6fee:	683b      	ldr	r3, [r7, #0]
   b6ff0:	436b      	muls	r3, r5
   b6ff2:	4680      	mov	r8, r0
   b6ff4:	58d3      	ldr	r3, [r2, r3]
   b6ff6:	4423      	add	r3, r4
   b6ff8:	a81b      	add	r0, sp, #108	; 0x6c
   b6ffa:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b6ffc:	f003 fa0d 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
   b7000:	a91b      	add	r1, sp, #108	; 0x6c
   b7002:	4640      	mov	r0, r8
   b7004:	f003 fa9e 	bl	ba544 <_ZplRK15StringSumHelperRK6String>
   b7008:	4601      	mov	r1, r0
   b700a:	4825      	ldr	r0, [pc, #148]	; (b70a0 <loop+0x168>)
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   b700c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; b70c4 <loop+0x18c>
   b7010:	f003 fa34 	bl	ba47c <_ZN6StringaSERKS_>
   b7014:	a81b      	add	r0, sp, #108	; 0x6c
   b7016:	f003 f9b5 	bl	ba384 <_ZN6StringD1Ev>
   b701a:	a813      	add	r0, sp, #76	; 0x4c
   b701c:	f003 f9b2 	bl	ba384 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b7020:	a817      	add	r0, sp, #92	; 0x5c
   b7022:	f003 f9af 	bl	ba384 <_ZN6StringD1Ev>
   b7026:	4b1f      	ldr	r3, [pc, #124]	; (b70a4 <loop+0x16c>)
   b7028:	491f      	ldr	r1, [pc, #124]	; (b70a8 <loop+0x170>)
   b702a:	4820      	ldr	r0, [pc, #128]	; (b70ac <loop+0x174>)
   b702c:	9300      	str	r3, [sp, #0]
   b702e:	4642      	mov	r2, r8
   b7030:	4b1f      	ldr	r3, [pc, #124]	; (b70b0 <loop+0x178>)
   b7032:	f000 fcb5 	bl	b79a0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
      Serial.println("parsing");
   b7036:	f003 fed1 	bl	baddc <_Z16_fetch_usbserialv>
   b703a:	491e      	ldr	r1, [pc, #120]	; (b70b4 <loop+0x17c>)
   b703c:	f003 f943 	bl	ba2c6 <_ZN5Print7printlnEPKc>
      parser.clear();
   b7040:	481d      	ldr	r0, [pc, #116]	; (b70b8 <loop+0x180>)
   b7042:	f000 fe45 	bl	b7cd0 <_ZN10JsonBuffer5clearEv>
	const char * c_str() const { return buffer; }
   b7046:	f8d8 1004 	ldr.w	r1, [r8, #4]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b704a:	9104      	str	r1, [sp, #16]
   b704c:	4608      	mov	r0, r1
   b704e:	f005 f8d1 	bl	bc1f4 <strlen>
   b7052:	9904      	ldr	r1, [sp, #16]
   b7054:	4602      	mov	r2, r0
   b7056:	4818      	ldr	r0, [pc, #96]	; (b70b8 <loop+0x180>)
   b7058:	f000 fe1d 	bl	b7c96 <_ZN10JsonBuffer7addDataEPKcj>
      if(!parser.parse()){
   b705c:	4816      	ldr	r0, [pc, #88]	; (b70b8 <loop+0x180>)
   b705e:	f001 fa27 	bl	b84b0 <_ZN10JsonParser5parseEv>
   b7062:	4681      	mov	r9, r0
   b7064:	bb90      	cbnz	r0, b70cc <loop+0x194>
        Serial.println("parsing failed");
   b7066:	f003 feb9 	bl	baddc <_Z16_fetch_usbserialv>
   b706a:	4914      	ldr	r1, [pc, #80]	; (b70bc <loop+0x184>)
}
   b706c:	b037      	add	sp, #220	; 0xdc
   b706e:	ecbd 8b06 	vpop	{d8-d10}
   b7072:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("parsing failed");
   b7076:	f003 b926 	b.w	ba2c6 <_ZN5Print7printlnEPKc>
   b707a:	bf00      	nop
   b707c:	2003e718 	.word	0x2003e718
   b7080:	2003e6b4 	.word	0x2003e6b4
   b7084:	000be4cb 	.word	0x000be4cb
   b7088:	000be4c0 	.word	0x000be4c0
   b708c:	200350ac 	.word	0x200350ac
   b7090:	20035454 	.word	0x20035454
   b7094:	684bda13 	.word	0x684bda13
   b7098:	000be4d0 	.word	0x000be4d0
   b709c:	000be4de 	.word	0x000be4de
   b70a0:	2003e65c 	.word	0x2003e65c
   b70a4:	000be4e6 	.word	0x000be4e6
   b70a8:	2003e634 	.word	0x2003e634
   b70ac:	200355b8 	.word	0x200355b8
   b70b0:	200350b0 	.word	0x200350b0
   b70b4:	000be4ea 	.word	0x000be4ea
   b70b8:	20037eb8 	.word	0x20037eb8
   b70bc:	000be4f2 	.word	0x000be4f2
   b70c0:	2003e69c 	.word	0x2003e69c
   b70c4:	2003e680 	.word	0x2003e680
   b70c8:	00000000 	.word	0x00000000
   b70cc:	683b      	ldr	r3, [r7, #0]
   b70ce:	6832      	ldr	r2, [r6, #0]
        float lat = train.key("latitude").valueFloat();
   b70d0:	ed1f 9a03 	vldr	s18, [pc, #-12]	; b70c8 <loop+0x190>
   b70d4:	435d      	muls	r5, r3
      Railway currentRailway = cities[cityIndex].railways[j];
   b70d6:	a81b      	add	r0, sp, #108	; 0x6c
   b70d8:	5951      	ldr	r1, [r2, r5]
   b70da:	4421      	add	r1, r4
   b70dc:	f7ff fb22 	bl	b6724 <_ZN7RailwayC1ERKS_>
      std::vector<Checkpoint> currentCheckpoints = currentRailway.checkpoints;
   b70e0:	a91b      	add	r1, sp, #108	; 0x6c
   b70e2:	a807      	add	r0, sp, #28
   b70e4:	f7fd fbec 	bl	b48c0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      int count = 0;
   b70e8:	f04f 0800 	mov.w	r8, #0
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b70ec:	49a3      	ldr	r1, [pc, #652]	; (b737c <loop+0x444>)
   b70ee:	a80d      	add	r0, sp, #52	; 0x34
   b70f0:	f000 fe08 	bl	b7d04 <_ZNK10JsonParser12getReferenceEv>
   b70f4:	4aa2      	ldr	r2, [pc, #648]	; (b7380 <loop+0x448>)
   b70f6:	a90d      	add	r1, sp, #52	; 0x34
   b70f8:	a810      	add	r0, sp, #64	; 0x40
   b70fa:	f000 ffd3 	bl	b80a4 <_ZNK13JsonReference3keyEPKc>
   b70fe:	2200      	movs	r2, #0
   b7100:	a910      	add	r1, sp, #64	; 0x40
   b7102:	a813      	add	r0, sp, #76	; 0x4c
   b7104:	f000 fea2 	bl	b7e4c <_ZNK13JsonReference5indexEj>
   b7108:	4a9e      	ldr	r2, [pc, #632]	; (b7384 <loop+0x44c>)
   b710a:	a913      	add	r1, sp, #76	; 0x4c
   b710c:	a817      	add	r0, sp, #92	; 0x5c
   b710e:	f000 ffc9 	bl	b80a4 <_ZNK13JsonReference3keyEPKc>
   b7112:	4642      	mov	r2, r8
   b7114:	a917      	add	r1, sp, #92	; 0x5c
   b7116:	a80a      	add	r0, sp, #40	; 0x28
   b7118:	f000 fe98 	bl	b7e4c <_ZNK13JsonReference5indexEj>
   b711c:	a817      	add	r0, sp, #92	; 0x5c
   b711e:	f000 fd69 	bl	b7bf4 <_ZN13JsonReferenceD1Ev>
   b7122:	a813      	add	r0, sp, #76	; 0x4c
   b7124:	f000 fd66 	bl	b7bf4 <_ZN13JsonReferenceD1Ev>
   b7128:	a810      	add	r0, sp, #64	; 0x40
   b712a:	f000 fd63 	bl	b7bf4 <_ZN13JsonReferenceD1Ev>
   b712e:	a80d      	add	r0, sp, #52	; 0x34
   b7130:	f000 fd60 	bl	b7bf4 <_ZN13JsonReferenceD1Ev>
        String nextStation = train.key("next_stop").valueString();
   b7134:	4a94      	ldr	r2, [pc, #592]	; (b7388 <loop+0x450>)
   b7136:	a90a      	add	r1, sp, #40	; 0x28
   b7138:	a817      	add	r0, sp, #92	; 0x5c
   b713a:	f000 ffb3 	bl	b80a4 <_ZNK13JsonReference3keyEPKc>
   b713e:	a917      	add	r1, sp, #92	; 0x5c
   b7140:	a813      	add	r0, sp, #76	; 0x4c
   b7142:	f000 ffc9 	bl	b80d8 <_ZNK13JsonReference11valueStringEv>
   b7146:	a817      	add	r0, sp, #92	; 0x5c
   b7148:	f000 fd54 	bl	b7bf4 <_ZN13JsonReferenceD1Ev>
        String destNm = train.key("destination").valueString();
   b714c:	4a8f      	ldr	r2, [pc, #572]	; (b738c <loop+0x454>)
   b714e:	a90a      	add	r1, sp, #40	; 0x28
   b7150:	a810      	add	r0, sp, #64	; 0x40
   b7152:	f000 ffa7 	bl	b80a4 <_ZNK13JsonReference3keyEPKc>
   b7156:	a910      	add	r1, sp, #64	; 0x40
   b7158:	a817      	add	r0, sp, #92	; 0x5c
   b715a:	f000 ffbd 	bl	b80d8 <_ZNK13JsonReference11valueStringEv>
   b715e:	a810      	add	r0, sp, #64	; 0x40
   b7160:	f000 fd48 	bl	b7bf4 <_ZN13JsonReferenceD1Ev>
        int trainDir = train.key("direction").valueInt();
   b7164:	4a8a      	ldr	r2, [pc, #552]	; (b7390 <loop+0x458>)
   b7166:	a90a      	add	r1, sp, #40	; 0x28
   b7168:	a810      	add	r0, sp, #64	; 0x40
   b716a:	f000 ff9b 	bl	b80a4 <_ZNK13JsonReference3keyEPKc>
   b716e:	2100      	movs	r1, #0
   b7170:	a810      	add	r0, sp, #64	; 0x40
   b7172:	f000 fe85 	bl	b7e80 <_ZNK13JsonReference8valueIntEi>
   b7176:	4604      	mov	r4, r0
   b7178:	a810      	add	r0, sp, #64	; 0x40
   b717a:	f000 fd3b 	bl	b7bf4 <_ZN13JsonReferenceD1Ev>
        float lat = train.key("latitude").valueFloat();
   b717e:	4a85      	ldr	r2, [pc, #532]	; (b7394 <loop+0x45c>)
   b7180:	a90a      	add	r1, sp, #40	; 0x28
   b7182:	a810      	add	r0, sp, #64	; 0x40
   b7184:	f000 ff8e 	bl	b80a4 <_ZNK13JsonReference3keyEPKc>
   b7188:	a810      	add	r0, sp, #64	; 0x40
   b718a:	eeb0 0a49 	vmov.f32	s0, s18
   b718e:	f000 fe83 	bl	b7e98 <_ZNK13JsonReference10valueFloatEf>
   b7192:	a810      	add	r0, sp, #64	; 0x40
   b7194:	eef0 8a40 	vmov.f32	s17, s0
   b7198:	f000 fd2c 	bl	b7bf4 <_ZN13JsonReferenceD1Ev>
        float lon = train.key("longitude").valueFloat();
   b719c:	4a7e      	ldr	r2, [pc, #504]	; (b7398 <loop+0x460>)
   b719e:	a90a      	add	r1, sp, #40	; 0x28
   b71a0:	a810      	add	r0, sp, #64	; 0x40
   b71a2:	f000 ff7f 	bl	b80a4 <_ZNK13JsonReference3keyEPKc>
   b71a6:	a810      	add	r0, sp, #64	; 0x40
   b71a8:	eeb0 0a49 	vmov.f32	s0, s18
   b71ac:	f000 fe74 	bl	b7e98 <_ZNK13JsonReference10valueFloatEf>
   b71b0:	a810      	add	r0, sp, #64	; 0x40
   b71b2:	eeb0 8a40 	vmov.f32	s16, s0
   b71b6:	f000 fd1d 	bl	b7bf4 <_ZN13JsonReferenceD1Ev>
        if(nextStation.length() <= 1){
   b71ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b71bc:	2b01      	cmp	r3, #1
   b71be:	f200 8082 	bhi.w	b72c6 <loop+0x38e>
          Serial.println("break");
   b71c2:	f003 fe0b 	bl	baddc <_Z16_fetch_usbserialv>
   b71c6:	4975      	ldr	r1, [pc, #468]	; (b739c <loop+0x464>)
        if(cityIndex == 0 && (i == 2 || currentRailway.name == purpleLineCTA.name)){
   b71c8:	4f75      	ldr	r7, [pc, #468]	; (b73a0 <loop+0x468>)
          Wire.beginTransmission(brownLineCTAAdr);
   b71ca:	f8df 81e0 	ldr.w	r8, [pc, #480]	; b73ac <loop+0x474>
          Serial.println("break");
   b71ce:	f003 f87a 	bl	ba2c6 <_ZN5Print7printlnEPKc>
          break;
   b71d2:	a817      	add	r0, sp, #92	; 0x5c
   b71d4:	f003 f8d6 	bl	ba384 <_ZN6StringD1Ev>
   b71d8:	a813      	add	r0, sp, #76	; 0x4c
   b71da:	f003 f8d3 	bl	ba384 <_ZN6StringD1Ev>
   b71de:	a80a      	add	r0, sp, #40	; 0x28
   b71e0:	f000 fd08 	bl	b7bf4 <_ZN13JsonReferenceD1Ev>
      for(int i = 0; i < 4; i++){
   b71e4:	9b03      	ldr	r3, [sp, #12]
   b71e6:	2500      	movs	r5, #0
   b71e8:	00de      	lsls	r6, r3, #3
        if(cityIndex == 0 && (i == 2 || currentRailway.name == purpleLineCTA.name)){
   b71ea:	683b      	ldr	r3, [r7, #0]
   b71ec:	2b00      	cmp	r3, #0
   b71ee:	f040 826e 	bne.w	b76ce <loop+0x796>
   b71f2:	2d02      	cmp	r5, #2
   b71f4:	d006      	beq.n	b7204 <loop+0x2cc>
   b71f6:	496b      	ldr	r1, [pc, #428]	; (b73a4 <loop+0x46c>)
   b71f8:	a827      	add	r0, sp, #156	; 0x9c
   b71fa:	f7fd fb85 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b71fe:	2800      	cmp	r0, #0
   b7200:	f000 8255 	beq.w	b76ae <loop+0x776>
          Wire.beginTransmission(brownLineCTAAdr);
   b7204:	f003 ff38 	bl	bb078 <_Z19__fetch_global_Wirev>
   b7208:	f8d8 1000 	ldr.w	r1, [r8]
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b720c:	f002 fece 	bl	b9fac <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(String(currentRailway.colors[0].c_str()));
   b7210:	f003 ff32 	bl	bb078 <_Z19__fetch_global_Wirev>
   b7214:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   b7216:	4604      	mov	r4, r0
   b7218:	6819      	ldr	r1, [r3, #0]
   b721a:	a817      	add	r0, sp, #92	; 0x5c
   b721c:	f003 f8fd 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
   b7220:	9917      	ldr	r1, [sp, #92]	; 0x5c
   b7222:	4620      	mov	r0, r4
   b7224:	f7fd f800 	bl	b4228 <_ZN5Print5writeEPKc.isra.0>
   b7228:	a817      	add	r0, sp, #92	; 0x5c
   b722a:	f003 f8ab 	bl	ba384 <_ZN6StringD1Ev>
        Wire.write(String(currentRailway.colors[1].c_str()));
   b722e:	f003 ff23 	bl	bb078 <_Z19__fetch_global_Wirev>
   b7232:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   b7234:	4604      	mov	r4, r0
   b7236:	6999      	ldr	r1, [r3, #24]
   b7238:	a817      	add	r0, sp, #92	; 0x5c
   b723a:	f003 f8ee 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
   b723e:	9917      	ldr	r1, [sp, #92]	; 0x5c
   b7240:	4620      	mov	r0, r4
   b7242:	f7fc fff1 	bl	b4228 <_ZN5Print5writeEPKc.isra.0>
   b7246:	a817      	add	r0, sp, #92	; 0x5c
   b7248:	f003 f89c 	bl	ba384 <_ZN6StringD1Ev>
        Wire.endTransmission();
   b724c:	f003 ff14 	bl	bb078 <_Z19__fetch_global_Wirev>
   b7250:	f002 feb3 	bl	b9fba <_ZN7TwoWire15endTransmissionEv>
        if(cityIndex == 0 && (i == 2 || currentRailway.name == purpleLineCTA.name)){
   b7254:	683b      	ldr	r3, [r7, #0]
   b7256:	2b00      	cmp	r3, #0
   b7258:	f040 824f 	bne.w	b76fa <loop+0x7c2>
   b725c:	2d02      	cmp	r5, #2
   b725e:	d006      	beq.n	b726e <loop+0x336>
   b7260:	4950      	ldr	r1, [pc, #320]	; (b73a4 <loop+0x46c>)
   b7262:	a827      	add	r0, sp, #156	; 0x9c
   b7264:	f7fd fb50 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7268:	2800      	cmp	r0, #0
   b726a:	f000 8236 	beq.w	b76da <loop+0x7a2>
          Wire.beginTransmission(brownLineCTAAdr);
   b726e:	f003 ff03 	bl	bb078 <_Z19__fetch_global_Wirev>
   b7272:	f8d8 1000 	ldr.w	r1, [r8]
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b7276:	f002 fe99 	bl	b9fac <_ZN7TwoWire17beginTransmissionEi>
        if(cityIndex == 0){
   b727a:	683c      	ldr	r4, [r7, #0]
   b727c:	2c00      	cmp	r4, #0
   b727e:	f040 82e5 	bne.w	b784c <loop+0x914>
          if(i == 2){
   b7282:	2d02      	cmp	r5, #2
   b7284:	f040 826d 	bne.w	b7762 <loop+0x82a>
            if(currentRailway.name == greenLineCTA.name){
   b7288:	4947      	ldr	r1, [pc, #284]	; (b73a8 <loop+0x470>)
   b728a:	f8df 9124 	ldr.w	r9, [pc, #292]	; b73b0 <loop+0x478>
   b728e:	a827      	add	r0, sp, #156	; 0x9c
   b7290:	f7fd fb3a 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7294:	2800      	cmp	r0, #0
   b7296:	f000 8236 	beq.w	b7706 <loop+0x7ce>
   b729a:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b729e:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   b72a2:	1a9b      	subs	r3, r3, r2
   b72a4:	109a      	asrs	r2, r3, #2
   b72a6:	e9d1 1300 	ldrd	r1, r3, [r1]
   b72aa:	1a5b      	subs	r3, r3, r1
   b72ac:	109b      	asrs	r3, r3, #2
              for(int j = 0; j < brownLineCTA.outputs[0].size() + (brownLineCTA.outputs[2].size() / 2); j++){
   b72ae:	eb03 0352 	add.w	r3, r3, r2, lsr #1
   b72b2:	42a3      	cmp	r3, r4
   b72b4:	f240 82ca 	bls.w	b784c <loop+0x914>
                Wire.write('0');
   b72b8:	f003 fede 	bl	bb078 <_Z19__fetch_global_Wirev>
   b72bc:	2130      	movs	r1, #48	; 0x30
   b72be:	f7fc ffaf 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
              for(int j = 0; j < brownLineCTA.outputs[0].size() + (brownLineCTA.outputs[2].size() / 2); j++){
   b72c2:	3401      	adds	r4, #1
   b72c4:	e7e9      	b.n	b729a <loop+0x362>
   b72c6:	e9dd 3507 	ldrd	r3, r5, [sp, #28]
   b72ca:	1aed      	subs	r5, r5, r3
   b72cc:	10ed      	asrs	r5, r5, #3
        for(int i = 0; i < checkpointCount; i++){
   b72ce:	f04f 0a00 	mov.w	sl, #0
   b72d2:	45aa      	cmp	sl, r5
	return *(this->_M_impl._M_start + __n);
   b72d4:	9907      	ldr	r1, [sp, #28]
   b72d6:	da3b      	bge.n	b7350 <loop+0x418>
   b72d8:	eb01 06ca 	add.w	r6, r1, sl, lsl #3
    }

    float getDistance(float trainLat, float trainLon){
      return sqrt(pow((trainLat - lat), 2) + pow((trainLon - lon), 2));
   b72dc:	edd6 7a00 	vldr	s15, [r6]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b72e0:	ee78 7ae7 	vsub.f32	s15, s17, s15
   b72e4:	ee17 0a90 	vmov	r0, s15
   b72e8:	f004 fb64 	bl	bb9b4 <__aeabi_f2d>
   b72ec:	edd6 7a01 	vldr	s15, [r6, #4]
   b72f0:	ee78 7a67 	vsub.f32	s15, s16, s15
   b72f4:	4602      	mov	r2, r0
   b72f6:	460b      	mov	r3, r1
   b72f8:	ee17 0a90 	vmov	r0, s15
   b72fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b7300:	f004 fb58 	bl	bb9b4 <__aeabi_f2d>
   b7304:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b7308:	ec41 0b1a 	vmov	d10, r0, r1
   b730c:	4610      	mov	r0, r2
   b730e:	4619      	mov	r1, r3
   b7310:	f004 fba8 	bl	bba64 <__aeabi_dmul>
   b7314:	ec53 2b1a 	vmov	r2, r3, d10
   b7318:	4606      	mov	r6, r0
   b731a:	460f      	mov	r7, r1
   b731c:	ee1a 0a10 	vmov	r0, s20
   b7320:	4619      	mov	r1, r3
   b7322:	f004 fb9f 	bl	bba64 <__aeabi_dmul>
   b7326:	4602      	mov	r2, r0
   b7328:	460b      	mov	r3, r1
   b732a:	4630      	mov	r0, r6
   b732c:	4639      	mov	r1, r7
   b732e:	f004 f9e3 	bl	bb6f8 <__adddf3>
   b7332:	ec41 0b10 	vmov	d0, r0, r1
   b7336:	f004 f8d3 	bl	bb4e0 <sqrt>
          currentRailway.distances[i] = currentCheckpoints[i].getDistance(lat, lon);
   b733a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
   b733c:	ec51 0b10 	vmov	r0, r1, d0
   b7340:	f004 fe60 	bl	bc004 <__aeabi_d2f>
   b7344:	eb06 068a 	add.w	r6, r6, sl, lsl #2
        for(int i = 0; i < checkpointCount; i++){
   b7348:	f10a 0a01 	add.w	sl, sl, #1
   b734c:	6030      	str	r0, [r6, #0]
   b734e:	e7c0      	b.n	b72d2 <loop+0x39a>
      : _M_current(__i) { }
   b7350:	e9dd 671e 	ldrd	r6, r7, [sp, #120]	; 0x78
    _GLIBCXX14_CONSTEXPR
    _ForwardIterator
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
		  _Compare __comp)
    {
      if (__first == __last)
   b7354:	42be      	cmp	r6, r7
   b7356:	d02f      	beq.n	b73b8 <loop+0x480>
   b7358:	1d32      	adds	r2, r6, #4
   b735a:	4633      	mov	r3, r6
	return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
   b735c:	4297      	cmp	r7, r2
	++_M_current;
   b735e:	4610      	mov	r0, r2
   b7360:	d02b      	beq.n	b73ba <loop+0x482>
	if (__comp(__first, __result))
   b7362:	edd3 7a00 	vldr	s15, [r3]
   b7366:	ed90 7a00 	vldr	s14, [r0]
   b736a:	eeb4 7a67 	vcmp.f32	s14, s15
   b736e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7372:	f102 0204 	add.w	r2, r2, #4
   b7376:	bf48      	it	mi
   b7378:	4603      	movmi	r3, r0
   b737a:	e7ef      	b.n	b735c <loop+0x424>
   b737c:	20037eb8 	.word	0x20037eb8
   b7380:	000be501 	.word	0x000be501
   b7384:	000be507 	.word	0x000be507
   b7388:	000be50e 	.word	0x000be50e
   b738c:	000be518 	.word	0x000be518
   b7390:	000be524 	.word	0x000be524
   b7394:	000be52e 	.word	0x000be52e
   b7398:	000be537 	.word	0x000be537
   b739c:	000be541 	.word	0x000be541
   b73a0:	200350ac 	.word	0x200350ac
   b73a4:	2003e520 	.word	0x2003e520
   b73a8:	20035574 	.word	0x20035574
   b73ac:	20035450 	.word	0x20035450
   b73b0:	200353e4 	.word	0x200353e4
   b73b4:	7dcccccc 	.word	0x7dcccccc
   b73b8:	4633      	mov	r3, r6
        if(closestIndex == currentRailway.tripleIndex){
   b73ba:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b73bc:	1b9b      	subs	r3, r3, r6
   b73be:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
   b73c2:	ea4f 00a3 	mov.w	r0, r3, asr #2
          closestIndex = currentRailway.loopIndex;
   b73c6:	bf08      	it	eq
   b73c8:	9831      	ldreq	r0, [sp, #196]	; 0xc4
   b73ca:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
        x1 = currentCheckpoints[closestIndex].lat;
   b73ce:	edd3 7a00 	vldr	s15, [r3]
        y1 = currentCheckpoints[closestIndex].lon;
   b73d2:	edd3 6a01 	vldr	s13, [r3, #4]
        if(currentCheckpoints[closestIndex].lat > lat){
   b73d6:	eef4 8ae7 	vcmpe.f32	s17, s15
   b73da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          slope = (y1 - y) / (x1 - x);
   b73de:	ee77 5ae8 	vsub.f32	s11, s15, s17
          slope = (y - y1) / (x - x1);
   b73e2:	bf55      	itete	pl
   b73e4:	ee38 6a66 	vsubpl.f32	s12, s16, s13
          slope = (y1 - y) / (x1 - x);
   b73e8:	ee76 7ac8 	vsubmi.f32	s15, s13, s16
          slope = (y - y1) / (x - x1);
   b73ec:	ee78 7ae7 	vsubpl.f32	s15, s17, s15
          slope = (y1 - y) / (x1 - x);
   b73f0:	ee87 7aa5 	vdivmi.f32	s14, s15, s11
   b73f4:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
          slope = (y - y1) / (x - x1);
   b73f8:	bf58      	it	pl
   b73fa:	ee86 7a27 	vdivpl.f32	s14, s12, s15
        if(slope == 0){
   b73fe:	ed5f 7a13 	vldr	s15, [pc, #-76]	; b73b4 <loop+0x47c>
   b7402:	eeb5 7a40 	vcmp.f32	s14, #0.0
   b7406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b740a:	d00a      	beq.n	b7422 <loop+0x4ea>
        }else if(slope >= __FLT_MAX__ / 10){
   b740c:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b7410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          perpendicularSlope = -1 / slope;
   b7414:	bfba      	itte	lt
   b7416:	eebf 6a00 	vmovlt.f32	s12, #240	; 0xbf800000 -1.0
   b741a:	eec6 7a07 	vdivlt.f32	s15, s12, s14
          perpendicularSlope = 0;
   b741e:	eef0 7a49 	vmovge.f32	s15, s18
          nearestSide = (perpendicularSlope * (currentCheckpoints[closestIndex].lat - x) + y) > currentCheckpoints[closestIndex].lon;
   b7422:	eeb0 7a48 	vmov.f32	s14, s16
   b7426:	eea7 7aa5 	vfma.f32	s14, s15, s11
   b742a:	eef4 6ac7 	vcmpe.f32	s13, s14
   b742e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7432:	bf4c      	ite	mi
   b7434:	2701      	movmi	r7, #1
   b7436:	2700      	movpl	r7, #0
        if(closestIndex == 0){
   b7438:	2800      	cmp	r0, #0
   b743a:	d171      	bne.n	b7520 <loop+0x5e8>
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b743c:	ed91 7a02 	vldr	s14, [r1, #8]
          if(currentRailway.loopIndex == closestIndex){
   b7440:	f8dd c0c4 	ldr.w	ip, [sp, #196]	; 0xc4
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b7444:	ee37 7a68 	vsub.f32	s14, s14, s17
   b7448:	eef0 6a48 	vmov.f32	s13, s16
   b744c:	eee7 6a27 	vfma.f32	s13, s14, s15
   b7450:	ed91 7a03 	vldr	s14, [r1, #12]
   b7454:	eef4 6ac7 	vcmpe.f32	s13, s14
   b7458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b745c:	bfcc      	ite	gt
   b745e:	2501      	movgt	r5, #1
   b7460:	2500      	movle	r5, #0
          if(currentRailway.loopIndex == closestIndex){
   b7462:	f1bc 0f00 	cmp.w	ip, #0
   b7466:	d11d      	bne.n	b74a4 <loop+0x56c>
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b7468:	1e53      	subs	r3, r2, #1
   b746a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
            if(nearestSide != pointSide){
   b746e:	42bd      	cmp	r5, r7
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b7470:	ed91 0a00 	vldr	s0, [r1]
   b7474:	ed91 7a01 	vldr	s14, [r1, #4]
            if(nearestSide != pointSide){
   b7478:	f040 809b 	bne.w	b75b2 <loop+0x67a>
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b747c:	ee70 8a68 	vsub.f32	s17, s0, s17
   b7480:	eea8 8aa7 	vfma.f32	s16, s17, s15
   b7484:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b7488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            }else if(nearestSide != loopPointSide){
   b748c:	bfcc      	ite	gt
   b748e:	2101      	movgt	r1, #1
   b7490:	2100      	movle	r1, #0
   b7492:	42a9      	cmp	r1, r5
              }else if(nearestSide != loopPointSide){
   b7494:	d100      	bne.n	b7498 <loop+0x560>
                secondClosestIndex = currentRailway.tripleIndex + 1;
   b7496:	1c53      	adds	r3, r2, #1
          if(closestIndex < secondClosestIndex){
   b7498:	429a      	cmp	r2, r3
   b749a:	f2c0 808c 	blt.w	b75b6 <loop+0x67e>
   b749e:	4611      	mov	r1, r2
   b74a0:	469c      	mov	ip, r3
   b74a2:	e005      	b.n	b74b0 <loop+0x578>
            if(pointSide == nearestSide){
   b74a4:	42bd      	cmp	r5, r7
   b74a6:	d074      	beq.n	b7592 <loop+0x65a>
   b74a8:	4602      	mov	r2, r0
   b74aa:	4684      	mov	ip, r0
   b74ac:	2301      	movs	r3, #1
   b74ae:	4619      	mov	r1, r3
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b74b0:	eb06 008c 	add.w	r0, r6, ip, lsl #2
   b74b4:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   b74b8:	ed90 7a00 	vldr	s14, [r0]
   b74bc:	edd1 7a00 	vldr	s15, [r1]
   b74c0:	9821      	ldr	r0, [sp, #132]	; 0x84
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b74c2:	9d35      	ldr	r5, [sp, #212]	; 0xd4
          segmentPos *= currentRailway.scalers[lowerIndex];
   b74c4:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b74c8:	ee77 7a27 	vadd.f32	s15, s14, s15
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b74cc:	4295      	cmp	r5, r2
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b74ce:	eec7 6a27 	vdiv.f32	s13, s14, s15
          segmentPos *= currentRailway.scalers[lowerIndex];
   b74d2:	ee07 1a90 	vmov	s15, r1
   b74d6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   b74da:	ee28 8a26 	vmul.f32	s16, s16, s13
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b74de:	db06      	blt.n	b74ee <loop+0x5b6>
   b74e0:	9934      	ldr	r1, [sp, #208]	; 0xd0
   b74e2:	4291      	cmp	r1, r2
   b74e4:	dc03      	bgt.n	b74ee <loop+0x5b6>
   b74e6:	429d      	cmp	r5, r3
   b74e8:	db01      	blt.n	b74ee <loop+0x5b6>
   b74ea:	4299      	cmp	r1, r3
   b74ec:	dd66      	ble.n	b75bc <loop+0x684>
          else if(closestIndex < currentRailway.lowerLoopBound || secondClosestIndex < currentRailway.lowerLoopBound){
   b74ee:	9d32      	ldr	r5, [sp, #200]	; 0xc8
   b74f0:	4295      	cmp	r5, r2
   b74f2:	dc66      	bgt.n	b75c2 <loop+0x68a>
   b74f4:	429d      	cmp	r5, r3
   b74f6:	dc64      	bgt.n	b75c2 <loop+0x68a>
          else if(closestIndex > currentRailway.upperLoopBound || secondClosestIndex > currentRailway.upperLoopBound){
   b74f8:	9933      	ldr	r1, [sp, #204]	; 0xcc
   b74fa:	4291      	cmp	r1, r2
   b74fc:	db65      	blt.n	b75ca <loop+0x692>
   b74fe:	4299      	cmp	r1, r3
   b7500:	db63      	blt.n	b75ca <loop+0x692>
   b7502:	4629      	mov	r1, r5
            inLoop = true;
   b7504:	464b      	mov	r3, r9
            pcbSegment = 2;
   b7506:	2502      	movs	r5, #2
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b7508:	458c      	cmp	ip, r1
   b750a:	dd61      	ble.n	b75d0 <loop+0x698>
            segmentPos += currentRailway.scalers[i];
   b750c:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   b7510:	ee07 2a90 	vmov	s15, r2
   b7514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b7518:	3101      	adds	r1, #1
            segmentPos += currentRailway.scalers[i];
   b751a:	ee38 8a27 	vadd.f32	s16, s16, s15
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b751e:	e7f3      	b.n	b7508 <loop+0x5d0>
   b7520:	f1ac 0c08 	sub.w	ip, ip, #8
   b7524:	448c      	add	ip, r1
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b7526:	ed9c 7a00 	vldr	s14, [ip]
   b752a:	ee37 7a68 	vsub.f32	s14, s14, s17
   b752e:	eef0 6a48 	vmov.f32	s13, s16
   b7532:	eee7 6a27 	vfma.f32	s13, s14, s15
          if(closestIndex == checkpointCount - 1){
   b7536:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b753a:	1e43      	subs	r3, r0, #1
   b753c:	ed9c 7a01 	vldr	s14, [ip, #4]
   b7540:	eef4 6ac7 	vcmpe.f32	s13, s14
   b7544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7548:	bfcc      	ite	gt
   b754a:	f04f 0c01 	movgt.w	ip, #1
   b754e:	f04f 0c00 	movle.w	ip, #0
          if(closestIndex == checkpointCount - 1){
   b7552:	4586      	cmp	lr, r0
   b7554:	d129      	bne.n	b75aa <loop+0x672>
            if(closestIndex == currentRailway.loopIndex){
   b7556:	9b31      	ldr	r3, [sp, #196]	; 0xc4
   b7558:	4283      	cmp	r3, r0
   b755a:	d118      	bne.n	b758e <loop+0x656>
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b755c:	1e53      	subs	r3, r2, #1
   b755e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
              if(nearestSide != pointSide){
   b7562:	45bc      	cmp	ip, r7
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b7564:	ed91 0a00 	vldr	s0, [r1]
   b7568:	ed91 7a01 	vldr	s14, [r1, #4]
              if(nearestSide != pointSide){
   b756c:	d002      	beq.n	b7574 <loop+0x63c>
                secondClosestIndex = checkpointCount - 2;
   b756e:	1eab      	subs	r3, r5, #2
   b7570:	4602      	mov	r2, r0
   b7572:	e791      	b.n	b7498 <loop+0x560>
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b7574:	ee70 8a68 	vsub.f32	s17, s0, s17
   b7578:	eea8 8aa7 	vfma.f32	s16, s17, s15
   b757c:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b7580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
              }else if(nearestSide != loopPointSide){
   b7584:	bfcc      	ite	gt
   b7586:	2101      	movgt	r1, #1
   b7588:	2100      	movle	r1, #0
   b758a:	4561      	cmp	r1, ip
   b758c:	e782      	b.n	b7494 <loop+0x55c>
              if(pointSide == nearestSide){
   b758e:	45bc      	cmp	ip, r7
   b7590:	d1ed      	bne.n	b756e <loop+0x636>
        String destNm = train.key("destination").valueString();
   b7592:	a817      	add	r0, sp, #92	; 0x5c
   b7594:	f002 fef6 	bl	ba384 <_ZN6StringD1Ev>
        String nextStation = train.key("next_stop").valueString();
   b7598:	a813      	add	r0, sp, #76	; 0x4c
   b759a:	f002 fef3 	bl	ba384 <_ZN6StringD1Ev>
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b759e:	a80a      	add	r0, sp, #40	; 0x28
        count++;
   b75a0:	f108 0801 	add.w	r8, r8, #1
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b75a4:	f000 fb26 	bl	b7bf4 <_ZN13JsonReferenceD1Ev>
   b75a8:	e5a0      	b.n	b70ec <loop+0x1b4>
            if(pointSide == nearestSide){
   b75aa:	45bc      	cmp	ip, r7
   b75ac:	d1e0      	bne.n	b7570 <loop+0x638>
              secondClosestIndex = closestIndex + 1;
   b75ae:	1c43      	adds	r3, r0, #1
   b75b0:	e7de      	b.n	b7570 <loop+0x638>
   b75b2:	4602      	mov	r2, r0
   b75b4:	e77a      	b.n	b74ac <loop+0x574>
   b75b6:	4619      	mov	r1, r3
   b75b8:	4694      	mov	ip, r2
   b75ba:	e779      	b.n	b74b0 <loop+0x578>
        bool inLoop = false;
   b75bc:	2300      	movs	r3, #0
            pcbSegment = 3;
   b75be:	2503      	movs	r5, #3
   b75c0:	e7a2      	b.n	b7508 <loop+0x5d0>
            lowerScaleBound = 0;
   b75c2:	2100      	movs	r1, #0
        bool inLoop = false;
   b75c4:	460b      	mov	r3, r1
            pcbSegment = 0;
   b75c6:	460d      	mov	r5, r1
   b75c8:	e79e      	b.n	b7508 <loop+0x5d0>
        bool inLoop = false;
   b75ca:	2300      	movs	r3, #0
            pcbSegment = 1;
   b75cc:	2501      	movs	r5, #1
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b75ce:	e79b      	b.n	b7508 <loop+0x5d0>
          if(cityIndex == 0){
   b75d0:	4ab7      	ldr	r2, [pc, #732]	; (b78b0 <loop+0x978>)
   b75d2:	9e24      	ldr	r6, [sp, #144]	; 0x90
   b75d4:	6812      	ldr	r2, [r2, #0]
   b75d6:	2a00      	cmp	r2, #0
   b75d8:	d15b      	bne.n	b7692 <loop+0x75a>
            if(inLoop){
   b75da:	2b00      	cmp	r3, #0
   b75dc:	d043      	beq.n	b7666 <loop+0x72e>
              if(currentRailway.name == pinkLineCTA.name){
   b75de:	49b5      	ldr	r1, [pc, #724]	; (b78b4 <loop+0x97c>)
   b75e0:	a827      	add	r0, sp, #156	; 0x9c
   b75e2:	f7fd f991 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b75e6:	b1f0      	cbz	r0, b7626 <loop+0x6ee>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b75e8:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
   b75ec:	1a9b      	subs	r3, r3, r2
   b75ee:	109b      	asrs	r3, r3, #2
                segmentPos = (float)currentRailway.outputs[2].size() - segmentPos;
   b75f0:	ee07 3a90 	vmov	s15, r3
   b75f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b75f8:	ee37 8ac8 	vsub.f32	s16, s15, s16
            if(pcbSegment == 1 && currentRailway.name == greenLineCTA.name){
   b75fc:	2d01      	cmp	r5, #1
   b75fe:	d140      	bne.n	b7682 <loop+0x74a>
   b7600:	49ad      	ldr	r1, [pc, #692]	; (b78b8 <loop+0x980>)
   b7602:	a827      	add	r0, sp, #156	; 0x9c
   b7604:	f7fd f980 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7608:	2800      	cmp	r0, #0
   b760a:	d042      	beq.n	b7692 <loop+0x75a>
   b760c:	e9d6 2303 	ldrd	r2, r3, [r6, #12]
   b7610:	1a9b      	subs	r3, r3, r2
   b7612:	109b      	asrs	r3, r3, #2
              segmentPos = (float)currentRailway.outputs[1].size() - segmentPos;
   b7614:	ee07 3a90 	vmov	s15, r3
   b7618:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b761c:	ee37 8ac8 	vsub.f32	s16, s15, s16
              trainDir = 6 - trainDir;
   b7620:	f1c4 0406 	rsb	r4, r4, #6
   b7624:	e035      	b.n	b7692 <loop+0x75a>
              }else if(currentRailway.name == orangeLineCTA.name){
   b7626:	49a5      	ldr	r1, [pc, #660]	; (b78bc <loop+0x984>)
   b7628:	a827      	add	r0, sp, #156	; 0x9c
   b762a:	f7fd f96d 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b762e:	2800      	cmp	r0, #0
   b7630:	d0e4      	beq.n	b75fc <loop+0x6c4>
	return *(this->_M_impl._M_start + __n);
   b7632:	4ba3      	ldr	r3, [pc, #652]	; (b78c0 <loop+0x988>)
   b7634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7636:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
   b763a:	1ad2      	subs	r2, r2, r3
   b763c:	1092      	asrs	r2, r2, #2
                segmentPos = (int)(segmentPos + orangeLineCTA.outputs[2].size() / 2) % orangeLineCTA.outputs[2].size();
   b763e:	0853      	lsrs	r3, r2, #1
   b7640:	ee07 3a90 	vmov	s15, r3
   b7644:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b7648:	ee37 8a88 	vadd.f32	s16, s15, s16
   b764c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   b7650:	ee17 3a90 	vmov	r3, s15
   b7654:	fbb3 f1f2 	udiv	r1, r3, r2
   b7658:	fb02 3311 	mls	r3, r2, r1, r3
   b765c:	ee08 3a10 	vmov	s16, r3
   b7660:	eeb8 8a48 	vcvt.f32.u32	s16, s16
   b7664:	e7ca      	b.n	b75fc <loop+0x6c4>
              if(currentRailway.name == brownLineCTA.name || currentRailway.name == purpleLineCTA.name){
   b7666:	4997      	ldr	r1, [pc, #604]	; (b78c4 <loop+0x98c>)
   b7668:	a827      	add	r0, sp, #156	; 0x9c
   b766a:	f7fd f94d 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b766e:	b928      	cbnz	r0, b767c <loop+0x744>
   b7670:	4995      	ldr	r1, [pc, #596]	; (b78c8 <loop+0x990>)
   b7672:	a827      	add	r0, sp, #156	; 0x9c
   b7674:	f7fd f948 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7678:	2800      	cmp	r0, #0
   b767a:	d0bf      	beq.n	b75fc <loop+0x6c4>
                trainDir = 6 - trainDir;
   b767c:	f1c4 0406 	rsb	r4, r4, #6
   b7680:	e7bc      	b.n	b75fc <loop+0x6c4>
            if(pcbSegment == 3 && currentRailway.name == pinkLineCTA.name){
   b7682:	2d03      	cmp	r5, #3
   b7684:	d105      	bne.n	b7692 <loop+0x75a>
   b7686:	498b      	ldr	r1, [pc, #556]	; (b78b4 <loop+0x97c>)
   b7688:	a827      	add	r0, sp, #156	; 0x9c
   b768a:	f7fd f93d 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b768e:	2800      	cmp	r0, #0
   b7690:	d1c6      	bne.n	b7620 <loop+0x6e8>
  { return __builtin_floorf(__x); }
   b7692:	eeb0 0a48 	vmov.f32	s0, s16
   b7696:	f003 fedd 	bl	bb454 <floorf>
	return *(this->_M_impl._M_start + __n);
   b769a:	230c      	movs	r3, #12
          currentRailway.outputs[pcbSegment][(int)floor(segmentPos)] = trainDir;
   b769c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b76a0:	435d      	muls	r5, r3
   b76a2:	ee10 2a10 	vmov	r2, s0
   b76a6:	5973      	ldr	r3, [r6, r5]
   b76a8:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b76ac:	e771      	b.n	b7592 <loop+0x65a>
        }else if(cityIndex == 0 && i == 3){
   b76ae:	2d03      	cmp	r5, #3
   b76b0:	d10d      	bne.n	b76ce <loop+0x796>
          if(currentRailway.name == orangeLineCTA.name){
   b76b2:	4982      	ldr	r1, [pc, #520]	; (b78bc <loop+0x984>)
   b76b4:	4c85      	ldr	r4, [pc, #532]	; (b78cc <loop+0x994>)
   b76b6:	a827      	add	r0, sp, #156	; 0x9c
   b76b8:	f7fd f926 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b76bc:	b118      	cbz	r0, b76c6 <loop+0x78e>
            Wire.beginTransmission(greenLineCTAAdr[0]);
   b76be:	f003 fcdb 	bl	bb078 <_Z19__fetch_global_Wirev>
   b76c2:	6821      	ldr	r1, [r4, #0]
   b76c4:	e5a2      	b.n	b720c <loop+0x2d4>
            Wire.beginTransmission(greenLineCTAAdr[1]);
   b76c6:	f003 fcd7 	bl	bb078 <_Z19__fetch_global_Wirev>
   b76ca:	6861      	ldr	r1, [r4, #4]
   b76cc:	e59e      	b.n	b720c <loop+0x2d4>
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b76ce:	f003 fcd3 	bl	bb078 <_Z19__fetch_global_Wirev>
   b76d2:	f8db 3000 	ldr.w	r3, [fp]
   b76d6:	5999      	ldr	r1, [r3, r6]
   b76d8:	e598      	b.n	b720c <loop+0x2d4>
        }else if(cityIndex == 0 && i == 3){
   b76da:	2d03      	cmp	r5, #3
   b76dc:	d10d      	bne.n	b76fa <loop+0x7c2>
          if(currentRailway.name == orangeLineCTA.name){
   b76de:	4977      	ldr	r1, [pc, #476]	; (b78bc <loop+0x984>)
   b76e0:	4c7a      	ldr	r4, [pc, #488]	; (b78cc <loop+0x994>)
   b76e2:	a827      	add	r0, sp, #156	; 0x9c
   b76e4:	f7fd f910 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b76e8:	b118      	cbz	r0, b76f2 <loop+0x7ba>
            Wire.beginTransmission(greenLineCTAAdr[0]);
   b76ea:	f003 fcc5 	bl	bb078 <_Z19__fetch_global_Wirev>
   b76ee:	6821      	ldr	r1, [r4, #0]
   b76f0:	e5c1      	b.n	b7276 <loop+0x33e>
            Wire.beginTransmission(greenLineCTAAdr[1]);
   b76f2:	f003 fcc1 	bl	bb078 <_Z19__fetch_global_Wirev>
   b76f6:	6861      	ldr	r1, [r4, #4]
   b76f8:	e5bd      	b.n	b7276 <loop+0x33e>
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b76fa:	f003 fcbd 	bl	bb078 <_Z19__fetch_global_Wirev>
   b76fe:	f8db 3000 	ldr.w	r3, [fp]
   b7702:	5999      	ldr	r1, [r3, r6]
   b7704:	e5b7      	b.n	b7276 <loop+0x33e>
            else if(currentRailway.name == brownLineCTA.name || currentRailway.name == purpleLineCTA.name){
   b7706:	f109 0130 	add.w	r1, r9, #48	; 0x30
   b770a:	a827      	add	r0, sp, #156	; 0x9c
   b770c:	f7fd f8fc 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7710:	b920      	cbnz	r0, b771c <loop+0x7e4>
   b7712:	496d      	ldr	r1, [pc, #436]	; (b78c8 <loop+0x990>)
   b7714:	a827      	add	r0, sp, #156	; 0x9c
   b7716:	f7fd f8f7 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b771a:	b198      	cbz	r0, b7744 <loop+0x80c>
   b771c:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7720:	e9d2 2300 	ldrd	r2, r3, [r2]
   b7724:	1a9b      	subs	r3, r3, r2
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b7726:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b772a:	f080 808f 	bcs.w	b784c <loop+0x914>
                Wire.write((char)currentRailway.outputs[0][j] + '0');
   b772e:	f003 fca3 	bl	bb078 <_Z19__fetch_global_Wirev>
	return *(this->_M_impl._M_start + __n);
   b7732:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b7734:	681b      	ldr	r3, [r3, #0]
   b7736:	f813 1024 	ldrb.w	r1, [r3, r4, lsl #2]
   b773a:	3130      	adds	r1, #48	; 0x30
   b773c:	f7fc fd70 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b7740:	3401      	adds	r4, #1
   b7742:	e7eb      	b.n	b771c <loop+0x7e4>
   b7744:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7748:	e9d2 2300 	ldrd	r2, r3, [r2]
   b774c:	1a9b      	subs	r3, r3, r2
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b774e:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b7752:	d27b      	bcs.n	b784c <loop+0x914>
                Wire.write('0');
   b7754:	f003 fc90 	bl	bb078 <_Z19__fetch_global_Wirev>
   b7758:	2130      	movs	r1, #48	; 0x30
   b775a:	f7fc fd61 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b775e:	3401      	adds	r4, #1
   b7760:	e7f0      	b.n	b7744 <loop+0x80c>
          if(i == 1 && (currentRailway.name == brownLineCTA.name || currentRailway.name == purpleLineCTA.name)){
   b7762:	2d01      	cmp	r5, #1
   b7764:	f040 80ba 	bne.w	b78dc <loop+0x9a4>
   b7768:	4956      	ldr	r1, [pc, #344]	; (b78c4 <loop+0x98c>)
   b776a:	a827      	add	r0, sp, #156	; 0x9c
   b776c:	f7fd f8cc 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7770:	b928      	cbnz	r0, b777e <loop+0x846>
   b7772:	4955      	ldr	r1, [pc, #340]	; (b78c8 <loop+0x990>)
   b7774:	a827      	add	r0, sp, #156	; 0x9c
   b7776:	f7fd f8c7 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b777a:	2800      	cmp	r0, #0
   b777c:	d066      	beq.n	b784c <loop+0x914>
	return *(this->_M_impl._M_start + __n);
   b777e:	9a24      	ldr	r2, [sp, #144]	; 0x90
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7780:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
   b7784:	1a9b      	subs	r3, r3, r2
            for(int j = 0; j < currentRailway.outputs[2].size(); j++){
   b7786:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b778a:	d25f      	bcs.n	b784c <loop+0x914>
              Wire.write('0');
   b778c:	f003 fc74 	bl	bb078 <_Z19__fetch_global_Wirev>
   b7790:	2130      	movs	r1, #48	; 0x30
   b7792:	f7fc fd45 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < currentRailway.outputs[2].size(); j++){
   b7796:	3401      	adds	r4, #1
   b7798:	e7f1      	b.n	b777e <loop+0x846>
          }else if(i == 3 && currentRailway.name == pinkLineCTA.name){
   b779a:	4946      	ldr	r1, [pc, #280]	; (b78b4 <loop+0x97c>)
   b779c:	a827      	add	r0, sp, #156	; 0x9c
   b779e:	f7fd f8b3 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b77a2:	2800      	cmp	r0, #0
   b77a4:	d052      	beq.n	b784c <loop+0x914>
	return *(this->_M_impl._M_start + __n);
   b77a6:	f8df 912c 	ldr.w	r9, [pc, #300]	; b78d4 <loop+0x99c>
   b77aa:	f8df a12c 	ldr.w	sl, [pc, #300]	; b78d8 <loop+0x9a0>
   b77ae:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
   b77b2:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b77b6:	e9d0 3200 	ldrd	r3, r2, [r0]
   b77ba:	1ad2      	subs	r2, r2, r3
   b77bc:	e9d1 1309 	ldrd	r1, r3, [r1, #36]	; 0x24
   b77c0:	1a5b      	subs	r3, r3, r1
   b77c2:	109b      	asrs	r3, r3, #2
            for(int j = 0; j < greenLineCTA.outputs[0].size() - pinkLineCTA.outputs[3].size(); j++){
   b77c4:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   b77c8:	42a3      	cmp	r3, r4
   b77ca:	d93f      	bls.n	b784c <loop+0x914>
              Wire.write('0');
   b77cc:	f003 fc54 	bl	bb078 <_Z19__fetch_global_Wirev>
   b77d0:	2130      	movs	r1, #48	; 0x30
   b77d2:	f7fc fd25 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < greenLineCTA.outputs[0].size() - pinkLineCTA.outputs[3].size(); j++){
   b77d6:	3401      	adds	r4, #1
   b77d8:	e7e9      	b.n	b77ae <loop+0x876>
            val = n;
   b77da:	4619      	mov	r1, r3
   b77dc:	e061      	b.n	b78a2 <loop+0x96a>
        Serial.println();
   b77de:	f003 fafd 	bl	baddc <_Z16_fetch_usbserialv>
   b77e2:	f002 fd64 	bl	ba2ae <_ZN5Print7printlnEv>
      for(int i = 0; i < 4; i++){
   b77e6:	3501      	adds	r5, #1
        Wire.endTransmission();
   b77e8:	f003 fc46 	bl	bb078 <_Z19__fetch_global_Wirev>
   b77ec:	f002 fbe5 	bl	b9fba <_ZN7TwoWire15endTransmissionEv>
      for(int i = 0; i < 4; i++){
   b77f0:	2d04      	cmp	r5, #4
   b77f2:	f106 0604 	add.w	r6, r6, #4
   b77f6:	f47f acf8 	bne.w	b71ea <loop+0x2b2>
   b77fa:	2300      	movs	r3, #0
          currentRailway.outputs[i][j] = 0;
   b77fc:	461c      	mov	r4, r3
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b77fe:	2200      	movs	r2, #0
	return *(this->_M_impl._M_start + __n);
   b7800:	9924      	ldr	r1, [sp, #144]	; 0x90
   b7802:	18cd      	adds	r5, r1, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7804:	58c8      	ldr	r0, [r1, r3]
   b7806:	6869      	ldr	r1, [r5, #4]
   b7808:	1a09      	subs	r1, r1, r0
   b780a:	ebb2 0fa1 	cmp.w	r2, r1, asr #2
   b780e:	d203      	bcs.n	b7818 <loop+0x8e0>
          currentRailway.outputs[i][j] = 0;
   b7810:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b7814:	3201      	adds	r2, #1
   b7816:	e7f3      	b.n	b7800 <loop+0x8c8>
      for(int i = 0; i < 4; i++){
   b7818:	330c      	adds	r3, #12
   b781a:	2b30      	cmp	r3, #48	; 0x30
   b781c:	d1ef      	bne.n	b77fe <loop+0x8c6>
      Serial.println();
   b781e:	f003 fadd 	bl	baddc <_Z16_fetch_usbserialv>
   b7822:	f002 fd44 	bl	ba2ae <_ZN5Print7printlnEv>
      }
   b7826:	a807      	add	r0, sp, #28
   b7828:	f7fc ff78 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      Railway currentRailway = cities[cityIndex].railways[j];
   b782c:	a81b      	add	r0, sp, #108	; 0x6c
   b782e:	f7fd fbaf 	bl	b4f90 <_ZN7RailwayD1Ev>
    for(int j = 0; j < cities[cityIndex].railways.size(); j++){
   b7832:	9b03      	ldr	r3, [sp, #12]
   b7834:	3301      	adds	r3, #1
   b7836:	f7ff bbad 	b.w	b6f94 <loop+0x5c>
    Serial.println();
   b783a:	f003 facf 	bl	baddc <_Z16_fetch_usbserialv>
}
   b783e:	b037      	add	sp, #220	; 0xdc
   b7840:	ecbd 8b06 	vpop	{d8-d10}
   b7844:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Serial.println();
   b7848:	f002 bd31 	b.w	ba2ae <_ZN5Print7printlnEv>
        Serial.printf("%s rail part %i: ", currentRailway.name.c_str(), i);
   b784c:	f003 fac6 	bl	baddc <_Z16_fetch_usbserialv>
   b7850:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   b7852:	491f      	ldr	r1, [pc, #124]	; (b78d0 <loop+0x998>)
   b7854:	462b      	mov	r3, r5
   b7856:	f7fc fdcb 	bl	b43f0 <_ZN5Print6printfEPKcz>
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b785a:	240c      	movs	r4, #12
   b785c:	436c      	muls	r4, r5
   b785e:	f04f 0900 	mov.w	r9, #0
	return *(this->_M_impl._M_start + __n);
   b7862:	9a24      	ldr	r2, [sp, #144]	; 0x90
   b7864:	1913      	adds	r3, r2, r4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7866:	5912      	ldr	r2, [r2, r4]
   b7868:	685b      	ldr	r3, [r3, #4]
   b786a:	1a9b      	subs	r3, r3, r2
   b786c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
   b7870:	d2b5      	bcs.n	b77de <loop+0x8a6>
          Wire.write((char)currentRailway.outputs[i][j] + '0');
   b7872:	f003 fc01 	bl	bb078 <_Z19__fetch_global_Wirev>
	return *(this->_M_impl._M_start + __n);
   b7876:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b7878:	591b      	ldr	r3, [r3, r4]
   b787a:	f813 1029 	ldrb.w	r1, [r3, r9, lsl #2]
   b787e:	3130      	adds	r1, #48	; 0x30
   b7880:	f7fc fcce 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
          Serial.print(currentRailway.outputs[i][j]);
   b7884:	f003 faaa 	bl	baddc <_Z16_fetch_usbserialv>
   b7888:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b788a:	591b      	ldr	r3, [r3, r4]
   b788c:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
        if (n < 0 && base == 10) {
   b7890:	2b00      	cmp	r3, #0
   b7892:	4682      	mov	sl, r0
   b7894:	daa1      	bge.n	b77da <loop+0x8a2>
            t = print('-');
   b7896:	212d      	movs	r1, #45	; 0x2d
   b7898:	9304      	str	r3, [sp, #16]
   b789a:	f002 fd05 	bl	ba2a8 <_ZN5Print5printEc>
            val = -n;
   b789e:	9b04      	ldr	r3, [sp, #16]
   b78a0:	4259      	negs	r1, r3
        return printNumber(val, base) + t;
   b78a2:	220a      	movs	r2, #10
   b78a4:	4650      	mov	r0, sl
   b78a6:	f002 fd18 	bl	ba2da <_ZN5Print11printNumberEmh>
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b78aa:	f109 0901 	add.w	r9, r9, #1
   b78ae:	e7d8      	b.n	b7862 <loop+0x92a>
   b78b0:	200350ac 	.word	0x200350ac
   b78b4:	2003e4b4 	.word	0x2003e4b4
   b78b8:	20035574 	.word	0x20035574
   b78bc:	20037e10 	.word	0x20037e10
   b78c0:	20037de0 	.word	0x20037de0
   b78c4:	20035414 	.word	0x20035414
   b78c8:	2003e520 	.word	0x2003e520
   b78cc:	200355b0 	.word	0x200355b0
   b78d0:	000be547 	.word	0x000be547
   b78d4:	20035544 	.word	0x20035544
   b78d8:	2003e484 	.word	0x2003e484
          if(i == 3 && currentRailway.name == orangeLineCTA.name){
   b78dc:	2d03      	cmp	r5, #3
   b78de:	d1b5      	bne.n	b784c <loop+0x914>
   b78e0:	4911      	ldr	r1, [pc, #68]	; (b7928 <loop+0x9f0>)
   b78e2:	a827      	add	r0, sp, #156	; 0x9c
   b78e4:	f7fd f810 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b78e8:	2800      	cmp	r0, #0
   b78ea:	f43f af56 	beq.w	b779a <loop+0x862>
   b78ee:	f8df 9040 	ldr.w	r9, [pc, #64]	; b7930 <loop+0x9f8>
   b78f2:	4b0e      	ldr	r3, [pc, #56]	; (b792c <loop+0x9f4>)
   b78f4:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
   b78f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b78fa:	e9d0 3200 	ldrd	r3, r2, [r0]
   b78fe:	1ad2      	subs	r2, r2, r3
   b7900:	e9d1 1309 	ldrd	r1, r3, [r1, #36]	; 0x24
   b7904:	1a5b      	subs	r3, r3, r1
   b7906:	109b      	asrs	r3, r3, #2
            for(int j = 0; j < greenLineCTA.outputs[0].size() - orangeLineCTA.outputs[3].size(); j++){
   b7908:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   b790c:	42a3      	cmp	r3, r4
   b790e:	d99d      	bls.n	b784c <loop+0x914>
              Wire.write('0');
   b7910:	f003 fbb2 	bl	bb078 <_Z19__fetch_global_Wirev>
   b7914:	2130      	movs	r1, #48	; 0x30
   b7916:	f7fc fc83 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < greenLineCTA.outputs[0].size() - orangeLineCTA.outputs[3].size(); j++){
   b791a:	3401      	adds	r4, #1
   b791c:	e7e9      	b.n	b78f2 <loop+0x9ba>
}
   b791e:	b037      	add	sp, #220	; 0xdc
   b7920:	ecbd 8b06 	vpop	{d8-d10}
   b7924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7928:	20037e10 	.word	0x20037e10
   b792c:	20037de0 	.word	0x20037de0
   b7930:	20035544 	.word	0x20035544

000b7934 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b7934:	b510      	push	{r4, lr}
   b7936:	4604      	mov	r4, r0
   b7938:	f003 f982 	bl	bac40 <_ZN9TCPClientC1Ev>
{

}
   b793c:	4620      	mov	r0, r4
   b793e:	bd10      	pop	{r4, pc}

000b7940 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b7940:	b538      	push	{r3, r4, r5, lr}
   b7942:	4604      	mov	r4, r0
   b7944:	4615      	mov	r5, r2
    client.print(aHeaderName);
   b7946:	f002 fcab 	bl	ba2a0 <_ZN5Print5printEPKc>
    client.print(": ");
   b794a:	4905      	ldr	r1, [pc, #20]	; (b7960 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   b794c:	4620      	mov	r0, r4
   b794e:	f002 fca7 	bl	ba2a0 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b7952:	4629      	mov	r1, r5
   b7954:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b7956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
   b795a:	f002 bcb4 	b.w	ba2c6 <_ZN5Print7printlnEPKc>
   b795e:	bf00      	nop
   b7960:	000be2df 	.word	0x000be2df

000b7964 <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b7964:	b538      	push	{r3, r4, r5, lr}
   b7966:	4605      	mov	r5, r0
   b7968:	4614      	mov	r4, r2
    client.print(aHeaderName);
   b796a:	f002 fc99 	bl	ba2a0 <_ZN5Print5printEPKc>
    client.print(": ");
   b796e:	490b      	ldr	r1, [pc, #44]	; (b799c <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   b7970:	4628      	mov	r0, r5
   b7972:	f002 fc95 	bl	ba2a0 <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
   b7976:	2c00      	cmp	r4, #0
   b7978:	da0d      	bge.n	b7996 <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
   b797a:	212d      	movs	r1, #45	; 0x2d
   b797c:	4628      	mov	r0, r5
   b797e:	f002 fc93 	bl	ba2a8 <_ZN5Print5printEc>
            val = -n;
   b7982:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b7984:	4628      	mov	r0, r5
   b7986:	220a      	movs	r2, #10
   b7988:	f002 fca7 	bl	ba2da <_ZN5Print11printNumberEmh>
        n += println();
   b798c:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b798e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7992:	f002 bc8c 	b.w	ba2ae <_ZN5Print7printlnEv>
            val = n;
   b7996:	4621      	mov	r1, r4
   b7998:	e7f4      	b.n	b7984 <_ZN10HttpClient10sendHeaderEPKci+0x20>
   b799a:	bf00      	nop
   b799c:	000be2df 	.word	0x000be2df

000b79a0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b79a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b79a4:	460e      	mov	r6, r1
   b79a6:	b091      	sub	sp, #68	; 0x44
   b79a8:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b79aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b79ae:	6013      	str	r3, [r2, #0]
{
   b79b0:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b79b2:	2100      	movs	r1, #0
   b79b4:	4630      	mov	r0, r6
   b79b6:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b79ba:	4617      	mov	r7, r2
   b79bc:	f002 fe05 	bl	ba5ca <_ZNK6String6equalsEPKc>
   b79c0:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b79c4:	4603      	mov	r3, r0
   b79c6:	b998      	cbnz	r0, b79f0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	const char * c_str() const { return buffer; }
   b79c8:	f1be 0f00 	cmp.w	lr, #0
   b79cc:	bf14      	ite	ne
   b79ce:	4672      	movne	r2, lr
   b79d0:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b79d2:	6831      	ldr	r1, [r6, #0]
   b79d4:	b292      	uxth	r2, r2
   b79d6:	4620      	mov	r0, r4
   b79d8:	f002 ff32 	bl	ba840 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b79dc:	1e05      	subs	r5, r0, #0
   b79de:	bf18      	it	ne
   b79e0:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   b79e2:	b9c5      	cbnz	r5, b7a16 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   b79e4:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b79e6:	b011      	add	sp, #68	; 0x44
   b79e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b79ec:	f003 b8de 	b.w	babac <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b79f0:	4b76      	ldr	r3, [pc, #472]	; (b7bcc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
   b79f2:	930a      	str	r3, [sp, #40]	; 0x28
   b79f4:	f106 0c14 	add.w	ip, r6, #20
   b79f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b79fc:	ad0b      	add	r5, sp, #44	; 0x2c
   b79fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7a00:	f8dc 3000 	ldr.w	r3, [ip]
   b7a04:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b7a06:	fa1f f28e 	uxth.w	r2, lr
   b7a0a:	2300      	movs	r3, #0
   b7a0c:	a90a      	add	r1, sp, #40	; 0x28
   b7a0e:	4620      	mov	r0, r4
   b7a10:	f002 fff6 	bl	baa00 <_ZN9TCPClient7connectE9IPAddresstm>
   b7a14:	e7e2      	b.n	b79dc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
   b7a16:	4649      	mov	r1, r9
   b7a18:	4620      	mov	r0, r4
   b7a1a:	f002 fc41 	bl	ba2a0 <_ZN5Print5printEPKc>
    client.print(" ");
   b7a1e:	496c      	ldr	r1, [pc, #432]	; (b7bd0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   b7a20:	4620      	mov	r0, r4
   b7a22:	f002 fc3d 	bl	ba2a0 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b7a26:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b7a28:	4620      	mov	r0, r4
   b7a2a:	f002 fc39 	bl	ba2a0 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b7a2e:	4969      	ldr	r1, [pc, #420]	; (b7bd4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   b7a30:	4620      	mov	r0, r4
   b7a32:	f002 fc35 	bl	ba2a0 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b7a36:	4968      	ldr	r1, [pc, #416]	; (b7bd8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
   b7a38:	4a68      	ldr	r2, [pc, #416]	; (b7bdc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
   b7a3a:	4620      	mov	r0, r4
   b7a3c:	f7ff ff80 	bl	b7940 <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b7a40:	2100      	movs	r1, #0
   b7a42:	4630      	mov	r0, r6
   b7a44:	f002 fdc1 	bl	ba5ca <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b7a48:	b920      	cbnz	r0, b7a54 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   b7a4a:	6832      	ldr	r2, [r6, #0]
   b7a4c:	4964      	ldr	r1, [pc, #400]	; (b7be0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
   b7a4e:	4620      	mov	r0, r4
   b7a50:	f7ff ff76 	bl	b7940 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b7a54:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b7a58:	2100      	movs	r1, #0
   b7a5a:	4650      	mov	r0, sl
   b7a5c:	f002 fdb5 	bl	ba5ca <_ZNK6String6equalsEPKc>
   b7a60:	b928      	cbnz	r0, b7a6e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
   b7a62:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b7a64:	495f      	ldr	r1, [pc, #380]	; (b7be4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
   b7a66:	4620      	mov	r0, r4
   b7a68:	f7ff ff7c 	bl	b7964 <_ZN10HttpClient10sendHeaderEPKci>
   b7a6c:	e006      	b.n	b7a7c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b7a6e:	495e      	ldr	r1, [pc, #376]	; (b7be8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
   b7a70:	4648      	mov	r0, r9
   b7a72:	f004 fbad 	bl	bc1d0 <strcmp>
   b7a76:	4602      	mov	r2, r0
   b7a78:	2800      	cmp	r0, #0
   b7a7a:	d0f3      	beq.n	b7a64 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
   b7a7c:	f1b8 0f00 	cmp.w	r8, #0
   b7a80:	d00e      	beq.n	b7aa0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
   b7a82:	f8d8 1000 	ldr.w	r1, [r8]
   b7a86:	b159      	cbz	r1, b7aa0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
   b7a88:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
   b7a8c:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b7a8e:	b122      	cbz	r2, b7a9a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
   b7a90:	f7ff ff56 	bl	b7940 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b7a94:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
   b7a98:	e7f3      	b.n	b7a82 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
   b7a9a:	f002 fc14 	bl	ba2c6 <_ZN5Print7printlnEPKc>
}
   b7a9e:	e7f9      	b.n	b7a94 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
   b7aa0:	4620      	mov	r0, r4
   b7aa2:	f002 fc04 	bl	ba2ae <_ZN5Print7printlnEv>
    client.flush();
   b7aa6:	4620      	mov	r0, r4
   b7aa8:	f002 fe2a 	bl	ba700 <_ZN9TCPClient5flushEv>
   b7aac:	2100      	movs	r1, #0
   b7aae:	4650      	mov	r0, sl
   b7ab0:	f002 fd8b 	bl	ba5ca <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b7ab4:	b918      	cbnz	r0, b7abe <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
   b7ab6:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b7ab8:	4620      	mov	r0, r4
   b7aba:	f002 fc04 	bl	ba2c6 <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b7abe:	f104 0a1c 	add.w	sl, r4, #28
   b7ac2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
   b7ac6:	2100      	movs	r1, #0
   b7ac8:	4650      	mov	r0, sl
   b7aca:	f004 fb4b 	bl	bc164 <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7ace:	f000 fddf 	bl	b8690 <HAL_Timer_Get_Milli_Seconds>
   b7ad2:	9001      	str	r0, [sp, #4]
   b7ad4:	f000 fddc 	bl	b8690 <HAL_Timer_Get_Milli_Seconds>
    bool error = false;
   b7ad8:	f04f 0800 	mov.w	r8, #0
    unsigned int bufferPosition = 0;
   b7adc:	4646      	mov	r6, r8
    } while (client.connected() && !timeout && !error);
   b7ade:	f241 3b88 	movw	fp, #5000	; 0x1388
        while (client.available()) {
   b7ae2:	4620      	mov	r0, r4
   b7ae4:	f003 f808 	bl	baaf8 <_ZN9TCPClient9availableEv>
   b7ae8:	b1e8      	cbz	r0, b7b26 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x186>
            char c = client.read();
   b7aea:	4620      	mov	r0, r4
   b7aec:	f002 fdee 	bl	ba6cc <_ZN9TCPClient4readEv>
   b7af0:	4681      	mov	r9, r0
   b7af2:	f000 fdcd 	bl	b8690 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b7af6:	f242 73fe 	movw	r3, #10238	; 0x27fe
   b7afa:	429e      	cmp	r6, r3
   b7afc:	9001      	str	r0, [sp, #4]
   b7afe:	d804      	bhi.n	b7b0a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = c;
   b7b00:	19a3      	adds	r3, r4, r6
            char c = client.read();
   b7b02:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
   b7b06:	3601      	adds	r6, #1
        while (client.available()) {
   b7b08:	e7eb      	b.n	b7ae2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b7b0a:	f242 73ff 	movw	r3, #10239	; 0x27ff
   b7b0e:	429e      	cmp	r6, r3
   b7b10:	d1f9      	bne.n	b7b06 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b7b12:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
   b7b16:	2200      	movs	r2, #0
   b7b18:	f883 281b 	strb.w	r2, [r3, #2075]	; 0x81b
                client.stop();
   b7b1c:	4620      	mov	r0, r4
   b7b1e:	f003 f845 	bl	babac <_ZN9TCPClient4stopEv>
                error = true;
   b7b22:	46a8      	mov	r8, r5
   b7b24:	e7ef      	b.n	b7b06 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b7b26:	19a3      	adds	r3, r4, r6
   b7b28:	7718      	strb	r0, [r3, #28]
   b7b2a:	f000 fdb1 	bl	b8690 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b7b2e:	9b01      	ldr	r3, [sp, #4]
   b7b30:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b7b34:	f1b8 0f00 	cmp.w	r8, #0
   b7b38:	d104      	bne.n	b7b44 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
   b7b3a:	45d9      	cmp	r9, fp
   b7b3c:	d802      	bhi.n	b7b44 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
            delay(200);
   b7b3e:	20c8      	movs	r0, #200	; 0xc8
   b7b40:	f000 ffd2 	bl	b8ae8 <delay>
    } while (client.connected() && !timeout && !error);
   b7b44:	4620      	mov	r0, r4
   b7b46:	f002 fef9 	bl	ba93c <_ZN9TCPClient9connectedEv>
   b7b4a:	b120      	cbz	r0, b7b56 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b7b4c:	45d9      	cmp	r9, fp
   b7b4e:	d802      	bhi.n	b7b56 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b7b50:	f1b8 0f00 	cmp.w	r8, #0
   b7b54:	d0c5      	beq.n	b7ae2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
    client.stop();
   b7b56:	4620      	mov	r0, r4
   b7b58:	f003 f828 	bl	babac <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b7b5c:	4651      	mov	r1, sl
   b7b5e:	a802      	add	r0, sp, #8
   b7b60:	f002 fc5b 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b7b64:	230c      	movs	r3, #12
   b7b66:	2209      	movs	r2, #9
   b7b68:	a902      	add	r1, sp, #8
   b7b6a:	a806      	add	r0, sp, #24
   b7b6c:	f002 fd52 	bl	ba614 <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b7b70:	491e      	ldr	r1, [pc, #120]	; (b7bec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x24c>)
   b7b72:	a80a      	add	r0, sp, #40	; 0x28
   b7b74:	f002 fc51 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
   b7b78:	a90a      	add	r1, sp, #40	; 0x28
   b7b7a:	a802      	add	r0, sp, #8
   b7b7c:	f002 fd46 	bl	ba60c <_ZNK6String7indexOfERKS_>
   b7b80:	4604      	mov	r4, r0
   b7b82:	a80a      	add	r0, sp, #40	; 0x28
   b7b84:	f002 fbfe 	bl	ba384 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b7b88:	1c63      	adds	r3, r4, #1
   b7b8a:	d108      	bne.n	b7b9e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fe>
    String statusCode = raw_response.substring(9,12);
   b7b8c:	a806      	add	r0, sp, #24
   b7b8e:	f002 fbf9 	bl	ba384 <_ZN6StringD1Ev>
    String raw_response(buffer);
   b7b92:	a802      	add	r0, sp, #8
   b7b94:	f002 fbf6 	bl	ba384 <_ZN6StringD1Ev>
}
   b7b98:	b011      	add	sp, #68	; 0x44
   b7b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aResponse.body = "";
   b7b9e:	1d3d      	adds	r5, r7, #4
   b7ba0:	4913      	ldr	r1, [pc, #76]	; (b7bf0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x250>)
   b7ba2:	4628      	mov	r0, r5
   b7ba4:	f002 fc81 	bl	ba4aa <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b7ba8:	1d22      	adds	r2, r4, #4
   b7baa:	a902      	add	r1, sp, #8
   b7bac:	a80a      	add	r0, sp, #40	; 0x28
   b7bae:	f002 fd51 	bl	ba654 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b7bb2:	a90a      	add	r1, sp, #40	; 0x28
   b7bb4:	4628      	mov	r0, r5
   b7bb6:	f002 fcb4 	bl	ba522 <_ZN6String6concatERKS_>
   b7bba:	a80a      	add	r0, sp, #40	; 0x28
   b7bbc:	f002 fbe2 	bl	ba384 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b7bc0:	9806      	ldr	r0, [sp, #24]
   b7bc2:	f004 fa93 	bl	bc0ec <atoi>
   b7bc6:	6038      	str	r0, [r7, #0]
   b7bc8:	e7e0      	b.n	b7b8c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ec>
   b7bca:	bf00      	nop
   b7bcc:	000be990 	.word	0x000be990
   b7bd0:	000be4ce 	.word	0x000be4ce
   b7bd4:	000be6d4 	.word	0x000be6d4
   b7bd8:	000be6e6 	.word	0x000be6e6
   b7bdc:	000be6e0 	.word	0x000be6e0
   b7be0:	000be6f1 	.word	0x000be6f1
   b7be4:	000be6f6 	.word	0x000be6f6
   b7be8:	000be705 	.word	0x000be705
   b7bec:	000be70a 	.word	0x000be70a
   b7bf0:	000be70e 	.word	0x000be70e

000b7bf4 <_ZN13JsonReferenceD1Ev>:
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
}
   b7bf4:	4770      	bx	lr

000b7bf6 <_ZN13JsonReferenceD0Ev>:
JsonReference::~JsonReference() {
   b7bf6:	b510      	push	{r4, lr}
}
   b7bf8:	210c      	movs	r1, #12
JsonReference::~JsonReference() {
   b7bfa:	4604      	mov	r4, r0
}
   b7bfc:	f7fc fa51 	bl	b40a2 <_ZdlPvj>
   b7c00:	4620      	mov	r0, r4
   b7c02:	bd10      	pop	{r4, pc}

000b7c04 <_ZN10JsonBufferD1Ev>:
JsonBuffer::~JsonBuffer() {
   b7c04:	b510      	push	{r4, lr}
   b7c06:	4b05      	ldr	r3, [pc, #20]	; (b7c1c <_ZN10JsonBufferD1Ev+0x18>)
   b7c08:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b7c0a:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b7c0c:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b7c0e:	b91b      	cbnz	r3, b7c18 <_ZN10JsonBufferD1Ev+0x14>
   b7c10:	6840      	ldr	r0, [r0, #4]
   b7c12:	b108      	cbz	r0, b7c18 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b7c14:	f000 ff20 	bl	b8a58 <free>
}
   b7c18:	4620      	mov	r0, r4
   b7c1a:	bd10      	pop	{r4, pc}
   b7c1c:	000be71c 	.word	0x000be71c

000b7c20 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b7c20:	b510      	push	{r4, lr}
   b7c22:	4604      	mov	r4, r0
}
   b7c24:	f7ff ffee 	bl	b7c04 <_ZN10JsonBufferD1Ev>
   b7c28:	4620      	mov	r0, r4
   b7c2a:	2114      	movs	r1, #20
   b7c2c:	f7fc fa39 	bl	b40a2 <_ZdlPvj>
   b7c30:	4620      	mov	r0, r4
   b7c32:	bd10      	pop	{r4, pc}

000b7c34 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b7c34:	b510      	push	{r4, lr}
   b7c36:	4b07      	ldr	r3, [pc, #28]	; (b7c54 <_ZN10JsonParserD1Ev+0x20>)
   b7c38:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b7c3a:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b7c3c:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b7c3e:	b91b      	cbnz	r3, b7c48 <_ZN10JsonParserD1Ev+0x14>
   b7c40:	6940      	ldr	r0, [r0, #20]
   b7c42:	b108      	cbz	r0, b7c48 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b7c44:	f000 ff08 	bl	b8a58 <free>
JsonParser::~JsonParser() {
   b7c48:	4620      	mov	r0, r4
   b7c4a:	f7ff ffdb 	bl	b7c04 <_ZN10JsonBufferD1Ev>
}
   b7c4e:	4620      	mov	r0, r4
   b7c50:	bd10      	pop	{r4, pc}
   b7c52:	bf00      	nop
   b7c54:	000be72c 	.word	0x000be72c

000b7c58 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b7c58:	b510      	push	{r4, lr}
   b7c5a:	4604      	mov	r4, r0
}
   b7c5c:	f7ff ffea 	bl	b7c34 <_ZN10JsonParserD1Ev>
   b7c60:	4620      	mov	r0, r4
   b7c62:	212c      	movs	r1, #44	; 0x2c
   b7c64:	f7fc fa1d 	bl	b40a2 <_ZdlPvj>
   b7c68:	4620      	mov	r0, r4
   b7c6a:	bd10      	pop	{r4, pc}

000b7c6c <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b7c6c:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b7c6e:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b7c70:	4604      	mov	r4, r0
   b7c72:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b7c74:	b10b      	cbz	r3, b7c7a <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b7c76:	2000      	movs	r0, #0
}
   b7c78:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b7c7a:	6840      	ldr	r0, [r0, #4]
   b7c7c:	b138      	cbz	r0, b7c8e <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b7c7e:	f000 fef3 	bl	b8a68 <realloc>
		if (newBuffer) {
   b7c82:	2800      	cmp	r0, #0
   b7c84:	d0f7      	beq.n	b7c76 <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b7c86:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b7c8a:	2001      	movs	r0, #1
   b7c8c:	e7f4      	b.n	b7c78 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b7c8e:	4608      	mov	r0, r1
   b7c90:	f000 feda 	bl	b8a48 <malloc>
   b7c94:	e7f5      	b.n	b7c82 <_ZN10JsonBuffer8allocateEj+0x16>

000b7c96 <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7c96:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7c98:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7c9a:	460e      	mov	r6, r1
   b7c9c:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7c9e:	18d1      	adds	r1, r2, r3
   b7ca0:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7ca2:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7ca4:	b172      	cbz	r2, b7cc4 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b7ca6:	6882      	ldr	r2, [r0, #8]
   b7ca8:	428a      	cmp	r2, r1
   b7caa:	d30b      	bcc.n	b7cc4 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b7cac:	6860      	ldr	r0, [r4, #4]
   b7cae:	68e3      	ldr	r3, [r4, #12]
   b7cb0:	462a      	mov	r2, r5
   b7cb2:	4631      	mov	r1, r6
   b7cb4:	4418      	add	r0, r3
   b7cb6:	f004 fa2d 	bl	bc114 <memcpy>
	offset += dataLen;
   b7cba:	68e2      	ldr	r2, [r4, #12]
   b7cbc:	442a      	add	r2, r5
   b7cbe:	60e2      	str	r2, [r4, #12]
	return true;
   b7cc0:	2001      	movs	r0, #1
}
   b7cc2:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b7cc4:	4620      	mov	r0, r4
   b7cc6:	f7ff ffd1 	bl	b7c6c <_ZN10JsonBuffer8allocateEj>
   b7cca:	2800      	cmp	r0, #0
   b7ccc:	d1ee      	bne.n	b7cac <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b7cce:	e7f8      	b.n	b7cc2 <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b7cd0 <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b7cd0:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b7cd2:	2100      	movs	r1, #0
   b7cd4:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b7cd6:	b123      	cbz	r3, b7ce2 <_ZN10JsonBuffer5clearEv+0x12>
   b7cd8:	6882      	ldr	r2, [r0, #8]
   b7cda:	b112      	cbz	r2, b7ce2 <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b7cdc:	4618      	mov	r0, r3
   b7cde:	f004 ba41 	b.w	bc164 <memset>
}
   b7ce2:	4770      	bx	lr

000b7ce4 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b7ce4:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b7ce6:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b7cea:	2200      	movs	r2, #0
   b7cec:	60c2      	str	r2, [r0, #12]
   b7cee:	2201      	movs	r2, #1
   b7cf0:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b7cf2:	6143      	str	r3, [r0, #20]
   b7cf4:	4a02      	ldr	r2, [pc, #8]	; (b7d00 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b7cf6:	9b02      	ldr	r3, [sp, #8]
   b7cf8:	6002      	str	r2, [r0, #0]
   b7cfa:	61c3      	str	r3, [r0, #28]
}
   b7cfc:	bd10      	pop	{r4, pc}
   b7cfe:	bf00      	nop
   b7d00:	000be72c 	.word	0x000be72c

000b7d04 <_ZNK10JsonParser12getReferenceEv>:
	if (tokens < tokensEnd) {
   b7d04:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   b7d08:	429a      	cmp	r2, r3
   b7d0a:	4b04      	ldr	r3, [pc, #16]	; (b7d1c <_ZNK10JsonParser12getReferenceEv+0x18>)

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b7d0c:	bf38      	it	cc
   b7d0e:	6082      	strcc	r2, [r0, #8]
   b7d10:	e9c0 3100 	strd	r3, r1, [r0]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b7d14:	bf24      	itt	cs
   b7d16:	2300      	movcs	r3, #0
   b7d18:	6083      	strcs	r3, [r0, #8]
}
   b7d1a:	4770      	bx	lr
   b7d1c:	000be73c 	.word	0x000be73c

000b7d20 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b7d20:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b7d22:	6813      	ldr	r3, [r2, #0]
   b7d24:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b7d26:	6813      	ldr	r3, [r2, #0]
   b7d28:	f103 0410 	add.w	r4, r3, #16
   b7d2c:	6014      	str	r4, [r2, #0]
   b7d2e:	6986      	ldr	r6, [r0, #24]
   b7d30:	42b4      	cmp	r4, r6
   b7d32:	d20a      	bcs.n	b7d4a <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b7d34:	699b      	ldr	r3, [r3, #24]
   b7d36:	688c      	ldr	r4, [r1, #8]
   b7d38:	42a3      	cmp	r3, r4
   b7d3a:	da01      	bge.n	b7d40 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b7d3c:	42ab      	cmp	r3, r5
   b7d3e:	ddf2      	ble.n	b7d26 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b7d40:	42a3      	cmp	r3, r4
   b7d42:	bfcc      	ite	gt
   b7d44:	2000      	movgt	r0, #0
   b7d46:	2001      	movle	r0, #1
   b7d48:	e000      	b.n	b7d4c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b7d4a:	2000      	movs	r0, #0
}
   b7d4c:	bd70      	pop	{r4, r5, r6, pc}

000b7d4e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b7d4e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7d52:	9d08      	ldr	r5, [sp, #32]
   b7d54:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7d56:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b7d5a:	4604      	mov	r4, r0
   b7d5c:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7d5e:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b7d60:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b7d62:	9801      	ldr	r0, [sp, #4]
   b7d64:	69a3      	ldr	r3, [r4, #24]
   b7d66:	4283      	cmp	r3, r0
   b7d68:	d91a      	bls.n	b7da0 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b7d6a:	6882      	ldr	r2, [r0, #8]
   b7d6c:	688b      	ldr	r3, [r1, #8]
   b7d6e:	429a      	cmp	r2, r3
   b7d70:	da16      	bge.n	b7da0 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b7d72:	42ae      	cmp	r6, r5
   b7d74:	d10b      	bne.n	b7d8e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b7d76:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b7d78:	aa01      	add	r2, sp, #4
   b7d7a:	4620      	mov	r0, r4
   b7d7c:	f7ff ffd0 	bl	b7d20 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b7d80:	b128      	cbz	r0, b7d8e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b7d82:	9b01      	ldr	r3, [sp, #4]
   b7d84:	f8c8 3000 	str.w	r3, [r8]
}
   b7d88:	b002      	add	sp, #8
   b7d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b7d8e:	aa01      	add	r2, sp, #4
   b7d90:	4620      	mov	r0, r4
   b7d92:	f7ff ffc5 	bl	b7d20 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b7d96:	4620      	mov	r0, r4
		index++;
   b7d98:	3601      	adds	r6, #1
		skipObject(container, token);
   b7d9a:	f7ff ffc1 	bl	b7d20 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b7d9e:	e7e0      	b.n	b7d62 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b7da0:	2000      	movs	r0, #0
   b7da2:	e7f1      	b.n	b7d88 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b7da4 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>:
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b7da4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7da6:	461f      	mov	r7, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7da8:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b7dac:	4604      	mov	r4, r0
   b7dae:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7db0:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b7db2:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b7db4:	9b01      	ldr	r3, [sp, #4]
   b7db6:	69a2      	ldr	r2, [r4, #24]
   b7db8:	429a      	cmp	r2, r3
   b7dba:	d90f      	bls.n	b7ddc <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
   b7dbc:	6898      	ldr	r0, [r3, #8]
   b7dbe:	688a      	ldr	r2, [r1, #8]
   b7dc0:	4290      	cmp	r0, r2
   b7dc2:	da0b      	bge.n	b7ddc <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
		if (desiredIndex == index) {
   b7dc4:	42b5      	cmp	r5, r6
   b7dc6:	d103      	bne.n	b7dd0 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x2c>
			value = token;
   b7dc8:	603b      	str	r3, [r7, #0]
			return true;
   b7dca:	2001      	movs	r0, #1
}
   b7dcc:	b003      	add	sp, #12
   b7dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		skipObject(container, token);
   b7dd0:	aa01      	add	r2, sp, #4
   b7dd2:	4620      	mov	r0, r4
		index++;
   b7dd4:	3501      	adds	r5, #1
		skipObject(container, token);
   b7dd6:	f7ff ffa3 	bl	b7d20 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b7dda:	e7eb      	b.n	b7db4 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x10>
	return false;
   b7ddc:	2000      	movs	r0, #0
   b7dde:	e7f5      	b.n	b7dcc <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x28>

000b7de0 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
   b7de0:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b7de2:	3b01      	subs	r3, #1
   b7de4:	2400      	movs	r4, #0
   b7de6:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
   b7dea:	1bf6      	subs	r6, r6, r7
   b7dec:	42a6      	cmp	r6, r4
   b7dee:	dd08      	ble.n	b7e02 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
   b7df0:	42a3      	cmp	r3, r4
   b7df2:	dd06      	ble.n	b7e02 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
   b7df4:	6845      	ldr	r5, [r0, #4]
   b7df6:	443d      	add	r5, r7
   b7df8:	5d2d      	ldrb	r5, [r5, r4]
   b7dfa:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b7dfe:	3401      	adds	r4, #1
   b7e00:	e7f1      	b.n	b7de6 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
   b7e02:	2300      	movs	r3, #0
   b7e04:	7013      	strb	r3, [r2, #0]
}
   b7e06:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7e08 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
   b7e08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7e0a:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b7e0c:	2310      	movs	r3, #16
   b7e0e:	466a      	mov	r2, sp
   b7e10:	f7ff ffe6 	bl	b7de0 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
   b7e14:	4904      	ldr	r1, [pc, #16]	; (b7e28 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
   b7e16:	4622      	mov	r2, r4
   b7e18:	4668      	mov	r0, sp
   b7e1a:	f000 fe2d 	bl	b8a78 <sscanf>
}
   b7e1e:	1e43      	subs	r3, r0, #1
   b7e20:	4258      	negs	r0, r3
   b7e22:	4158      	adcs	r0, r3
   b7e24:	b004      	add	sp, #16
   b7e26:	bd10      	pop	{r4, pc}
   b7e28:	000be9f0 	.word	0x000be9f0

000b7e2c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, float &result) const {
   b7e2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7e2e:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b7e30:	2310      	movs	r3, #16
   b7e32:	466a      	mov	r2, sp
   b7e34:	f7ff ffd4 	bl	b7de0 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	result = strtof(tmp, 0);
   b7e38:	4668      	mov	r0, sp
   b7e3a:	2100      	movs	r1, #0
   b7e3c:	f005 f83a 	bl	bceb4 <strtof>
}
   b7e40:	2001      	movs	r0, #1
	result = strtof(tmp, 0);
   b7e42:	ed84 0a00 	vstr	s0, [r4]
}
   b7e46:	b004      	add	sp, #16
   b7e48:	bd10      	pop	{r4, pc}
	...

000b7e4c <_ZNK13JsonReference5indexEj>:
	else {
		return JsonReference(parser);
	}
}

JsonReference JsonReference::index(size_t index) const {
   b7e4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7e4e:	460d      	mov	r5, r1
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b7e50:	6889      	ldr	r1, [r1, #8]
   b7e52:	4e0a      	ldr	r6, [pc, #40]	; (b7e7c <_ZNK13JsonReference5indexEj+0x30>)
JsonReference JsonReference::index(size_t index) const {
   b7e54:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b7e56:	b161      	cbz	r1, b7e72 <_ZNK13JsonReference5indexEj+0x26>
   b7e58:	6868      	ldr	r0, [r5, #4]
   b7e5a:	ab01      	add	r3, sp, #4
   b7e5c:	f7ff ffa2 	bl	b7da4 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>
   b7e60:	b138      	cbz	r0, b7e72 <_ZNK13JsonReference5indexEj+0x26>
		return JsonReference(parser, newToken);
   b7e62:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b7e64:	e9c4 6300 	strd	r6, r3, [r4]
   b7e68:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b7e6a:	60a3      	str	r3, [r4, #8]
	}
	else {
		return JsonReference(parser);
	}
}
   b7e6c:	4620      	mov	r0, r4
   b7e6e:	b002      	add	sp, #8
   b7e70:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b7e72:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b7e74:	e9c4 6300 	strd	r6, r3, [r4]
   b7e78:	2300      	movs	r3, #0
   b7e7a:	e7f6      	b.n	b7e6a <_ZNK13JsonReference5indexEj+0x1e>
   b7e7c:	000be73c 	.word	0x000be73c

000b7e80 <_ZNK13JsonReference8valueIntEi>:
bool JsonReference::valueBool(bool result) const {
	(void) value(result);
	return result;
}

int JsonReference::valueInt(int result) const {
   b7e80:	b507      	push	{r0, r1, r2, lr}
   b7e82:	9101      	str	r1, [sp, #4]
	 * There are also type-specific versions like valueBool that return the value, instead of having to pass an object
	 * to hold the value, as in this call.
	 */
	template<class T>
	bool value(T &result) const {
		if (token && parser->getTokenValue(token, result)) {
   b7e84:	6881      	ldr	r1, [r0, #8]
   b7e86:	b119      	cbz	r1, b7e90 <_ZNK13JsonReference8valueIntEi+0x10>
   b7e88:	6840      	ldr	r0, [r0, #4]
   b7e8a:	aa01      	add	r2, sp, #4
   b7e8c:	f7ff ffbc 	bl	b7e08 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
	(void) value(result);
	return result;
}
   b7e90:	9801      	ldr	r0, [sp, #4]
   b7e92:	b003      	add	sp, #12
   b7e94:	f85d fb04 	ldr.w	pc, [sp], #4

000b7e98 <_ZNK13JsonReference10valueFloatEf>:
unsigned long JsonReference::valueUnsignedLong(unsigned long result) const {
	(void) value(result);
	return result;
}

float JsonReference::valueFloat(float result) const {
   b7e98:	b507      	push	{r0, r1, r2, lr}
   b7e9a:	6881      	ldr	r1, [r0, #8]
   b7e9c:	ed8d 0a01 	vstr	s0, [sp, #4]
   b7ea0:	b119      	cbz	r1, b7eaa <_ZNK13JsonReference10valueFloatEf+0x12>
   b7ea2:	6840      	ldr	r0, [r0, #4]
   b7ea4:	aa01      	add	r2, sp, #4
   b7ea6:	f7ff ffc1 	bl	b7e2c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>
	(void) value(result);
	return result;
}
   b7eaa:	ed9d 0a01 	vldr	s0, [sp, #4]
   b7eae:	b003      	add	sp, #12
   b7eb0:	f85d fb04 	ldr.w	pc, [sp], #4

000b7eb4 <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   b7eb4:	b510      	push	{r4, lr}
   b7eb6:	4604      	mov	r4, r0
	if (str) {
   b7eb8:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b7eba:	460b      	mov	r3, r1
	if (str) {
   b7ebc:	b128      	cbz	r0, b7eca <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b7ebe:	f002 fb34 	bl	ba52a <_ZN6String6concatEc>
	}
	else {
		if (buf && length < (bufLen - 1)) {
			buf[length] = ch;
		}
		length++;
   b7ec2:	68e3      	ldr	r3, [r4, #12]
   b7ec4:	3301      	adds	r3, #1
   b7ec6:	60e3      	str	r3, [r4, #12]
	}
}
   b7ec8:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b7eca:	6860      	ldr	r0, [r4, #4]
   b7ecc:	2800      	cmp	r0, #0
   b7ece:	d0f8      	beq.n	b7ec2 <_ZN16JsonParserString6appendEc+0xe>
   b7ed0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b7ed4:	3a01      	subs	r2, #1
   b7ed6:	428a      	cmp	r2, r1
			buf[length] = ch;
   b7ed8:	bf88      	it	hi
   b7eda:	5443      	strbhi	r3, [r0, r1]
   b7edc:	e7f1      	b.n	b7ec2 <_ZN16JsonParserString6appendEc+0xe>

000b7ede <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b7ede:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b7ee0:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b7ee2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7ee4:	4608      	mov	r0, r1
		str.append((char)unicode);
   b7ee6:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b7ee8:	d804      	bhi.n	b7ef4 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b7eea:	b003      	add	sp, #12
   b7eec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b7ef0:	f7ff bfe0 	b.w	b7eb4 <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b7ef4:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b7ef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b7efc:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b7f00:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b7f04:	d207      	bcs.n	b7f16 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b7f06:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b7f0a:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b7f0c:	f7ff ffd2 	bl	b7eb4 <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b7f10:	9801      	ldr	r0, [sp, #4]
   b7f12:	4621      	mov	r1, r4
   b7f14:	e7e9      	b.n	b7eea <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b7f16:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b7f18:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b7f1c:	9001      	str	r0, [sp, #4]
   b7f1e:	f7ff ffc9 	bl	b7eb4 <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b7f22:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b7f26:	9801      	ldr	r0, [sp, #4]
   b7f28:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b7f2c:	e7ee      	b.n	b7f0c <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>
	...

000b7f30 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b7f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b7f34:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b7f36:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b7f38:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b8008 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b7f3c:	4680      	mov	r8, r0
   b7f3e:	460f      	mov	r7, r1
   b7f40:	4615      	mov	r5, r2
			escape = false;
   b7f42:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b7f44:	68b8      	ldr	r0, [r7, #8]
   b7f46:	42b0      	cmp	r0, r6
   b7f48:	dd5a      	ble.n	b8000 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b7f4a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b7f4e:	5d99      	ldrb	r1, [r3, r6]
   b7f50:	199a      	adds	r2, r3, r6
		if (escape) {
   b7f52:	2c00      	cmp	r4, #0
   b7f54:	d04b      	beq.n	b7fee <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b7f56:	2975      	cmp	r1, #117	; 0x75
   b7f58:	d805      	bhi.n	b7f66 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b7f5a:	296d      	cmp	r1, #109	; 0x6d
   b7f5c:	d807      	bhi.n	b7f6e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b7f5e:	2962      	cmp	r1, #98	; 0x62
   b7f60:	d01e      	beq.n	b7fa0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b7f62:	2966      	cmp	r1, #102	; 0x66
   b7f64:	d01e      	beq.n	b7fa4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b7f66:	4628      	mov	r0, r5
   b7f68:	f7ff ffa4 	bl	b7eb4 <_ZN16JsonParserString6appendEc>
				break;
   b7f6c:	e03d      	b.n	b7fea <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b7f6e:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b7f72:	2c07      	cmp	r4, #7
   b7f74:	d8f7      	bhi.n	b7f66 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b7f76:	f20f 0c08 	addw	ip, pc, #8
   b7f7a:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b7f7e:	bf00      	nop
   b7f80:	000b7fa9 	.word	0x000b7fa9
   b7f84:	000b7f67 	.word	0x000b7f67
   b7f88:	000b7f67 	.word	0x000b7f67
   b7f8c:	000b7f67 	.word	0x000b7f67
   b7f90:	000b7fad 	.word	0x000b7fad
   b7f94:	000b7f67 	.word	0x000b7f67
   b7f98:	000b7fb1 	.word	0x000b7fb1
   b7f9c:	000b7fb5 	.word	0x000b7fb5
				str.append('\b');
   b7fa0:	2108      	movs	r1, #8
   b7fa2:	e7e0      	b.n	b7f66 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b7fa4:	210c      	movs	r1, #12
   b7fa6:	e7de      	b.n	b7f66 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b7fa8:	210a      	movs	r1, #10
   b7faa:	e7dc      	b.n	b7f66 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b7fac:	210d      	movs	r1, #13
   b7fae:	e7da      	b.n	b7f66 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b7fb0:	2109      	movs	r1, #9
   b7fb2:	e7d8      	b.n	b7f66 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b7fb4:	1d31      	adds	r1, r6, #4
   b7fb6:	4288      	cmp	r0, r1
   b7fb8:	dd17      	ble.n	b7fea <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b7fba:	a902      	add	r1, sp, #8
   b7fbc:	3304      	adds	r3, #4
   b7fbe:	4433      	add	r3, r6
   b7fc0:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b7fc2:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b7fc6:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b7fca:	429a      	cmp	r2, r3
   b7fcc:	d1f9      	bne.n	b7fc2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b7fce:	aa01      	add	r2, sp, #4
   b7fd0:	4651      	mov	r1, sl
					tmp[4] = 0;
   b7fd2:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b7fd6:	f000 fd4f 	bl	b8a78 <sscanf>
   b7fda:	2801      	cmp	r0, #1
   b7fdc:	d105      	bne.n	b7fea <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b7fde:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b7fe2:	4629      	mov	r1, r5
   b7fe4:	f7ff ff7b 	bl	b7ede <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b7fe8:	3605      	adds	r6, #5
			escape = false;
   b7fea:	2400      	movs	r4, #0
   b7fec:	e004      	b.n	b7ff8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b7fee:	295c      	cmp	r1, #92	; 0x5c
   b7ff0:	d004      	beq.n	b7ffc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b7ff2:	4628      	mov	r0, r5
   b7ff4:	f7ff ff5e 	bl	b7eb4 <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b7ff8:	3601      	adds	r6, #1
   b7ffa:	e7a3      	b.n	b7f44 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b7ffc:	2401      	movs	r4, #1
   b7ffe:	e7fb      	b.n	b7ff8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b8000:	2001      	movs	r0, #1
   b8002:	b004      	add	sp, #16
   b8004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8008:	000be70f 	.word	0x000be70f

000b800c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b800c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b800e:	460c      	mov	r4, r1
   b8010:	4606      	mov	r6, r0
	result = "";
   b8012:	490c      	ldr	r1, [pc, #48]	; (b8044 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b8014:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b8016:	4615      	mov	r5, r2
	result = "";
   b8018:	f002 fa47 	bl	ba4aa <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b801c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b8020:	1ac9      	subs	r1, r1, r3
   b8022:	3101      	adds	r1, #1
   b8024:	4628      	mov	r0, r5
   b8026:	f002 f9cb 	bl	ba3c0 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b802a:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b802c:	466a      	mov	r2, sp
   b802e:	4621      	mov	r1, r4
   b8030:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b8032:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b8036:	9500      	str	r5, [sp, #0]
   b8038:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b803a:	f7ff ff79 	bl	b7f30 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b803e:	b004      	add	sp, #16
   b8040:	bd70      	pop	{r4, r5, r6, pc}
   b8042:	bf00      	nop
   b8044:	000be70e 	.word	0x000be70e

000b8048 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b8048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b804c:	b089      	sub	sp, #36	; 0x24
   b804e:	4605      	mov	r5, r0
   b8050:	4688      	mov	r8, r1
	String keyName;
   b8052:	a804      	add	r0, sp, #16
   b8054:	4912      	ldr	r1, [pc, #72]	; (b80a0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b8056:	4616      	mov	r6, r2
   b8058:	4699      	mov	r9, r3
	String keyName;
   b805a:	f002 f9de 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b805e:	2700      	movs	r7, #0
   b8060:	9700      	str	r7, [sp, #0]
   b8062:	464b      	mov	r3, r9
   b8064:	aa03      	add	r2, sp, #12
   b8066:	4641      	mov	r1, r8
   b8068:	4628      	mov	r0, r5
   b806a:	f7ff fe70 	bl	b7d4e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b806e:	4604      	mov	r4, r0
   b8070:	b170      	cbz	r0, b8090 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b8072:	9903      	ldr	r1, [sp, #12]
   b8074:	aa04      	add	r2, sp, #16
   b8076:	4628      	mov	r0, r5
   b8078:	f7ff ffc8 	bl	b800c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b807c:	4604      	mov	r4, r0
   b807e:	b908      	cbnz	r0, b8084 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b8080:	3701      	adds	r7, #1
   b8082:	e7ed      	b.n	b8060 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b8084:	4631      	mov	r1, r6
   b8086:	a804      	add	r0, sp, #16
   b8088:	f002 fa9f 	bl	ba5ca <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b808c:	2800      	cmp	r0, #0
   b808e:	d0f7      	beq.n	b8080 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b8090:	a804      	add	r0, sp, #16
   b8092:	f002 f977 	bl	ba384 <_ZN6StringD1Ev>
}
   b8096:	4620      	mov	r0, r4
   b8098:	b009      	add	sp, #36	; 0x24
   b809a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b809e:	bf00      	nop
   b80a0:	000be70e 	.word	0x000be70e

000b80a4 <_ZNK13JsonReference3keyEPKc>:
JsonReference JsonReference::key(const char *name) const {
   b80a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b80a6:	460d      	mov	r5, r1
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b80a8:	6889      	ldr	r1, [r1, #8]
   b80aa:	4e0a      	ldr	r6, [pc, #40]	; (b80d4 <_ZNK13JsonReference3keyEPKc+0x30>)
JsonReference JsonReference::key(const char *name) const {
   b80ac:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b80ae:	b161      	cbz	r1, b80ca <_ZNK13JsonReference3keyEPKc+0x26>
   b80b0:	6868      	ldr	r0, [r5, #4]
   b80b2:	ab01      	add	r3, sp, #4
   b80b4:	f7ff ffc8 	bl	b8048 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b80b8:	b138      	cbz	r0, b80ca <_ZNK13JsonReference3keyEPKc+0x26>
		return JsonReference(parser, newToken);
   b80ba:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b80bc:	e9c4 6300 	strd	r6, r3, [r4]
   b80c0:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b80c2:	60a3      	str	r3, [r4, #8]
}
   b80c4:	4620      	mov	r0, r4
   b80c6:	b002      	add	sp, #8
   b80c8:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b80ca:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b80cc:	e9c4 6300 	strd	r6, r3, [r4]
   b80d0:	2300      	movs	r3, #0
   b80d2:	e7f6      	b.n	b80c2 <_ZNK13JsonReference3keyEPKc+0x1e>
   b80d4:	000be73c 	.word	0x000be73c

000b80d8 <_ZNK13JsonReference11valueStringEv>:
String JsonReference::valueString() const {
   b80d8:	b538      	push	{r3, r4, r5, lr}
   b80da:	460d      	mov	r5, r1
	String result;
   b80dc:	4905      	ldr	r1, [pc, #20]	; (b80f4 <_ZNK13JsonReference11valueStringEv+0x1c>)
String JsonReference::valueString() const {
   b80de:	4604      	mov	r4, r0
	String result;
   b80e0:	f002 f99b 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
   b80e4:	68a9      	ldr	r1, [r5, #8]
   b80e6:	b119      	cbz	r1, b80f0 <_ZNK13JsonReference11valueStringEv+0x18>
   b80e8:	6868      	ldr	r0, [r5, #4]
   b80ea:	4622      	mov	r2, r4
   b80ec:	f7ff ff8e 	bl	b800c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
}
   b80f0:	4620      	mov	r0, r4
   b80f2:	bd38      	pop	{r3, r4, r5, pc}
   b80f4:	000be70e 	.word	0x000be70e

000b80f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b80f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b80fc:	6844      	ldr	r4, [r0, #4]
   b80fe:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b8102:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b8106:	f8d0 e000 	ldr.w	lr, [r0]
   b810a:	4596      	cmp	lr, r2
   b810c:	f080 81b9 	bcs.w	b8482 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b8110:	f811 800e 	ldrb.w	r8, [r1, lr]
   b8114:	f1b8 0f00 	cmp.w	r8, #0
   b8118:	f000 81b3 	beq.w	b8482 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b811c:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b8120:	f000 8098 	beq.w	b8254 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b8124:	d833      	bhi.n	b818e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b8126:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b812a:	f000 80a6 	beq.w	b827a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b812e:	d810      	bhi.n	b8152 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b8130:	f1a8 0809 	sub.w	r8, r8, #9
   b8134:	fa5f f888 	uxtb.w	r8, r8
   b8138:	f1b8 0f17 	cmp.w	r8, #23
   b813c:	d80d      	bhi.n	b815a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b813e:	4d9f      	ldr	r5, [pc, #636]	; (b83bc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b8140:	fa0c f808 	lsl.w	r8, ip, r8
   b8144:	ea18 0f05 	tst.w	r8, r5
   b8148:	d007      	beq.n	b815a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b814a:	6805      	ldr	r5, [r0, #0]
   b814c:	3501      	adds	r5, #1
   b814e:	6005      	str	r5, [r0, #0]
   b8150:	e7d9      	b.n	b8106 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b8152:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b8156:	f000 8133 	beq.w	b83c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b815a:	f8d0 8000 	ldr.w	r8, [r0]
   b815e:	4542      	cmp	r2, r8
   b8160:	d90e      	bls.n	b8180 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b8162:	f811 5008 	ldrb.w	r5, [r1, r8]
   b8166:	b15d      	cbz	r5, b8180 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b8168:	2d3a      	cmp	r5, #58	; 0x3a
   b816a:	f200 8169 	bhi.w	b8440 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b816e:	2d1f      	cmp	r5, #31
   b8170:	f200 8151 	bhi.w	b8416 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b8174:	2d0a      	cmp	r5, #10
   b8176:	f200 8160 	bhi.w	b843a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b817a:	2d08      	cmp	r5, #8
   b817c:	f240 8156 	bls.w	b842c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b8180:	2b00      	cmp	r3, #0
   b8182:	f040 8162 	bne.w	b844a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b8186:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b818a:	6005      	str	r5, [r0, #0]
   b818c:	e0a5      	b.n	b82da <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b818e:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b8192:	d037      	beq.n	b8204 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b8194:	d82e      	bhi.n	b81f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b8196:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b819a:	d033      	beq.n	b8204 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b819c:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b81a0:	d1db      	bne.n	b815a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b81a2:	2b00      	cmp	r3, #0
   b81a4:	d0d1      	beq.n	b814a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b81a6:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b81aa:	6845      	ldr	r5, [r0, #4]
   b81ac:	3d01      	subs	r5, #1
   b81ae:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b81b2:	2d00      	cmp	r5, #0
   b81b4:	db55      	blt.n	b8262 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b81b6:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b81ba:	3701      	adds	r7, #1
   b81bc:	d04d      	beq.n	b825a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b81be:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b81c2:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b81c6:	d148      	bne.n	b825a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b81c8:	f898 b000 	ldrb.w	fp, [r8]
   b81cc:	45cb      	cmp	fp, r9
   b81ce:	d14b      	bne.n	b8268 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b81d0:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b81d4:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b81d8:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b81dc:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b81e0:	f8de 7004 	ldr.w	r7, [lr, #4]
   b81e4:	3701      	adds	r7, #1
   b81e6:	d042      	beq.n	b826e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b81e8:	f8de 7008 	ldr.w	r7, [lr, #8]
   b81ec:	3701      	adds	r7, #1
   b81ee:	d13e      	bne.n	b826e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b81f0:	6085      	str	r5, [r0, #8]
				break;
   b81f2:	e7aa      	b.n	b814a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b81f4:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b81f8:	d1af      	bne.n	b815a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b81fa:	2b00      	cmp	r3, #0
   b81fc:	d0a5      	beq.n	b814a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b81fe:	f04f 0901 	mov.w	r9, #1
   b8202:	e7d2      	b.n	b81aa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b8204:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b8206:	2b00      	cmp	r3, #0
   b8208:	d09f      	beq.n	b814a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b820a:	6845      	ldr	r5, [r0, #4]
   b820c:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b820e:	42af      	cmp	r7, r5
   b8210:	d94a      	bls.n	b82a8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b8212:	f105 0e01 	add.w	lr, r5, #1
   b8216:	f8c0 e004 	str.w	lr, [r0, #4]
   b821a:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b821e:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b8222:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b8226:	2500      	movs	r5, #0
   b8228:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b822c:	6885      	ldr	r5, [r0, #8]
   b822e:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b8230:	bf1f      	itttt	ne
   b8232:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b8236:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b823a:	3501      	addne	r5, #1
   b823c:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b8240:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b8244:	bf0c      	ite	eq
   b8246:	2501      	moveq	r5, #1
   b8248:	2502      	movne	r5, #2
   b824a:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b824e:	6805      	ldr	r5, [r0, #0]
   b8250:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b8254:	6845      	ldr	r5, [r0, #4]
   b8256:	3d01      	subs	r5, #1
   b8258:	e7ca      	b.n	b81f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b825a:	3d01      	subs	r5, #1
   b825c:	f1a8 0810 	sub.w	r8, r8, #16
   b8260:	e7a7      	b.n	b81b2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b8262:	3501      	adds	r5, #1
   b8264:	f47f af71 	bne.w	b814a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b8268:	f06f 0401 	mvn.w	r4, #1
   b826c:	e01e      	b.n	b82ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b826e:	3d01      	subs	r5, #1
   b8270:	1c6f      	adds	r7, r5, #1
   b8272:	f1ae 0e10 	sub.w	lr, lr, #16
   b8276:	d1b3      	bne.n	b81e0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b8278:	e767      	b.n	b814a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b827a:	f10e 0901 	add.w	r9, lr, #1
   b827e:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b8282:	f8d0 8000 	ldr.w	r8, [r0]
   b8286:	4542      	cmp	r2, r8
   b8288:	f240 8093 	bls.w	b83b2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b828c:	f811 5008 	ldrb.w	r5, [r1, r8]
   b8290:	2d00      	cmp	r5, #0
   b8292:	f000 808e 	beq.w	b83b2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b8296:	2d22      	cmp	r5, #34	; 0x22
   b8298:	d130      	bne.n	b82fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b829a:	b1f3      	cbz	r3, b82da <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b829c:	6845      	ldr	r5, [r0, #4]
   b829e:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b82a0:	42af      	cmp	r7, r5
   b82a2:	d806      	bhi.n	b82b2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b82a4:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b82a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b82ac:	4620      	mov	r0, r4
   b82ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b82b2:	f105 0e01 	add.w	lr, r5, #1
   b82b6:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b82ba:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b82be:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b82c2:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b82c6:	2700      	movs	r7, #0
   b82c8:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b82ca:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b82ce:	f04f 0a03 	mov.w	sl, #3
   b82d2:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b82d6:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b82da:	6885      	ldr	r5, [r0, #8]
   b82dc:	1c6f      	adds	r7, r5, #1
				count++;
   b82de:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b82e2:	f43f af32 	beq.w	b814a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b82e6:	2b00      	cmp	r3, #0
   b82e8:	f43f af2f 	beq.w	b814a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b82ec:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b82f0:	f8de 500c 	ldr.w	r5, [lr, #12]
   b82f4:	3501      	adds	r5, #1
   b82f6:	f8ce 500c 	str.w	r5, [lr, #12]
   b82fa:	e726      	b.n	b814a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b82fc:	2d5c      	cmp	r5, #92	; 0x5c
   b82fe:	d111      	bne.n	b8324 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b8300:	f108 0501 	add.w	r5, r8, #1
   b8304:	42aa      	cmp	r2, r5
   b8306:	d90d      	bls.n	b8324 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b8308:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b830a:	5d4d      	ldrb	r5, [r1, r5]
   b830c:	2d75      	cmp	r5, #117	; 0x75
   b830e:	d82b      	bhi.n	b8368 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b8310:	2d6d      	cmp	r5, #109	; 0x6d
   b8312:	d80b      	bhi.n	b832c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b8314:	2d66      	cmp	r5, #102	; 0x66
   b8316:	d827      	bhi.n	b8368 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b8318:	2d5b      	cmp	r5, #91	; 0x5b
   b831a:	d81d      	bhi.n	b8358 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b831c:	2d22      	cmp	r5, #34	; 0x22
   b831e:	d001      	beq.n	b8324 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b8320:	2d2f      	cmp	r5, #47	; 0x2f
   b8322:	d121      	bne.n	b8368 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b8324:	6805      	ldr	r5, [r0, #0]
   b8326:	3501      	adds	r5, #1
   b8328:	6005      	str	r5, [r0, #0]
   b832a:	e7aa      	b.n	b8282 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b832c:	3d6e      	subs	r5, #110	; 0x6e
   b832e:	2d07      	cmp	r5, #7
   b8330:	d81a      	bhi.n	b8368 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b8332:	a701      	add	r7, pc, #4	; (adr r7, b8338 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b8334:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b8338:	000b8325 	.word	0x000b8325
   b833c:	000b8369 	.word	0x000b8369
   b8340:	000b8369 	.word	0x000b8369
   b8344:	000b8369 	.word	0x000b8369
   b8348:	000b8325 	.word	0x000b8325
   b834c:	000b8369 	.word	0x000b8369
   b8350:	000b8325 	.word	0x000b8325
   b8354:	000b836f 	.word	0x000b836f
   b8358:	3d5c      	subs	r5, #92	; 0x5c
   b835a:	b2ed      	uxtb	r5, r5
   b835c:	fa0c f505 	lsl.w	r5, ip, r5
   b8360:	f240 4741 	movw	r7, #1089	; 0x441
   b8364:	423d      	tst	r5, r7
   b8366:	d1dd      	bne.n	b8324 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b8368:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b836c:	e77c      	b.n	b8268 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b836e:	f108 0502 	add.w	r5, r8, #2
   b8372:	6005      	str	r5, [r0, #0]
   b8374:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b8378:	f8d0 8000 	ldr.w	r8, [r0]
   b837c:	4542      	cmp	r2, r8
   b837e:	d803      	bhi.n	b8388 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b8380:	6805      	ldr	r5, [r0, #0]
   b8382:	3d01      	subs	r5, #1
   b8384:	6005      	str	r5, [r0, #0]
					break;
   b8386:	e7cd      	b.n	b8324 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b8388:	f811 5008 	ldrb.w	r5, [r1, r8]
   b838c:	2d00      	cmp	r5, #0
   b838e:	d0f7      	beq.n	b8380 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b8390:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b8394:	f1bb 0f09 	cmp.w	fp, #9
   b8398:	d904      	bls.n	b83a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b839a:	f025 0520 	bic.w	r5, r5, #32
   b839e:	3d41      	subs	r5, #65	; 0x41
   b83a0:	2d05      	cmp	r5, #5
   b83a2:	d8e1      	bhi.n	b8368 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b83a4:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b83a8:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b83ac:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b83ae:	d1e3      	bne.n	b8378 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b83b0:	e7e6      	b.n	b8380 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b83b2:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b83b6:	f06f 0402 	mvn.w	r4, #2
   b83ba:	e777      	b.n	b82ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b83bc:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b83c0:	2b00      	cmp	r3, #0
   b83c2:	f43f aec2 	beq.w	b814a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b83c6:	6885      	ldr	r5, [r0, #8]
   b83c8:	1c6f      	adds	r7, r5, #1
   b83ca:	f43f aebe 	beq.w	b814a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b83ce:	012d      	lsls	r5, r5, #4
   b83d0:	5d5d      	ldrb	r5, [r3, r5]
   b83d2:	3d01      	subs	r5, #1
   b83d4:	2d01      	cmp	r5, #1
   b83d6:	f67f aeb8 	bls.w	b814a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b83da:	6845      	ldr	r5, [r0, #4]
   b83dc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b83e0:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b83e4:	f1b8 0f00 	cmp.w	r8, #0
   b83e8:	f6ff aeaf 	blt.w	b814a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b83ec:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b83f0:	3d01      	subs	r5, #1
   b83f2:	2d01      	cmp	r5, #1
   b83f4:	d80a      	bhi.n	b840c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b83f6:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b83fa:	3501      	adds	r5, #1
   b83fc:	d006      	beq.n	b840c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b83fe:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b8402:	3501      	adds	r5, #1
   b8404:	d102      	bne.n	b840c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b8406:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b840a:	e69e      	b.n	b814a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b840c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b8410:	f1ae 0e10 	sub.w	lr, lr, #16
   b8414:	e7e6      	b.n	b83e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b8416:	f1a5 0920 	sub.w	r9, r5, #32
   b841a:	4f24      	ldr	r7, [pc, #144]	; (b84ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b841c:	fa5f f989 	uxtb.w	r9, r9
   b8420:	fa0c f909 	lsl.w	r9, ip, r9
   b8424:	ea19 0f07 	tst.w	r9, r7
   b8428:	f47f aeaa 	bne.w	b8180 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b842c:	3d20      	subs	r5, #32
   b842e:	2d5e      	cmp	r5, #94	; 0x5e
   b8430:	d89a      	bhi.n	b8368 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b8432:	f108 0501 	add.w	r5, r8, #1
   b8436:	6005      	str	r5, [r0, #0]
   b8438:	e68f      	b.n	b815a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b843a:	2d0d      	cmp	r5, #13
   b843c:	d1f6      	bne.n	b842c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b843e:	e69f      	b.n	b8180 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b8440:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b8444:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b8448:	e7f8      	b.n	b843c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b844a:	6845      	ldr	r5, [r0, #4]
   b844c:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b844e:	42af      	cmp	r7, r5
   b8450:	f67f af28 	bls.w	b82a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b8454:	f105 0801 	add.w	r8, r5, #1
   b8458:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b845c:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b8460:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b8464:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b8468:	2700      	movs	r7, #0
   b846a:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b846c:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b8470:	f04f 0a04 	mov.w	sl, #4
   b8474:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b8478:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b847c:	6805      	ldr	r5, [r0, #0]
   b847e:	3d01      	subs	r5, #1
   b8480:	e683      	b.n	b818a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b8482:	2b00      	cmp	r3, #0
   b8484:	f43f af12 	beq.w	b82ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b8488:	6842      	ldr	r2, [r0, #4]
   b848a:	1e51      	subs	r1, r2, #1
   b848c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b8490:	2900      	cmp	r1, #0
   b8492:	f6ff af0b 	blt.w	b82ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b8496:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b849a:	3201      	adds	r2, #1
   b849c:	d003      	beq.n	b84a6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b849e:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b84a2:	3201      	adds	r2, #1
   b84a4:	d087      	beq.n	b83b6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b84a6:	3901      	subs	r1, #1
   b84a8:	3b10      	subs	r3, #16
   b84aa:	e7f1      	b.n	b8490 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b84ac:	04001001 	.word	0x04001001

000b84b0 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b84b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b84b2:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b84b4:	4604      	mov	r4, r0
	if (offset == 0) {
   b84b6:	b912      	cbnz	r2, b84be <_ZN10JsonParser5parseEv+0xe>
		return false;
   b84b8:	2000      	movs	r0, #0
}
   b84ba:	b003      	add	sp, #12
   b84bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b84be:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b84c0:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b84c4:	b1ab      	cbz	r3, b84f2 <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b84c6:	2100      	movs	r1, #0
	parser->toknext = 0;
   b84c8:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b84cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b84d0:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b84d2:	69c1      	ldr	r1, [r0, #28]
   b84d4:	9100      	str	r1, [sp, #0]
   b84d6:	6841      	ldr	r1, [r0, #4]
   b84d8:	4630      	mov	r0, r6
   b84da:	f7ff fe0d 	bl	b80f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b84de:	1c43      	adds	r3, r0, #1
   b84e0:	d128      	bne.n	b8534 <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b84e2:	7c25      	ldrb	r5, [r4, #16]
   b84e4:	2d00      	cmp	r5, #0
   b84e6:	d1e7      	bne.n	b84b8 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b84e8:	6960      	ldr	r0, [r4, #20]
   b84ea:	f000 fab5 	bl	b8a58 <free>
			tokens = 0;
   b84ee:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b84f0:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b84f2:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b84f4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b84f8:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b84fc:	68e2      	ldr	r2, [r4, #12]
   b84fe:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b8500:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b8502:	9500      	str	r5, [sp, #0]
   b8504:	462b      	mov	r3, r5
   b8506:	4630      	mov	r0, r6
   b8508:	f7ff fdf6 	bl	b80f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b850c:	2800      	cmp	r0, #0
   b850e:	dbd3      	blt.n	b84b8 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b8510:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b8512:	d017      	beq.n	b8544 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b8514:	0100      	lsls	r0, r0, #4
   b8516:	f000 fa97 	bl	b8a48 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b851a:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b851c:	6160      	str	r0, [r4, #20]
   b851e:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b8520:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b8522:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b8526:	68e2      	ldr	r2, [r4, #12]
   b8528:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b852a:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b852c:	4630      	mov	r0, r6
   b852e:	f7ff fde3 	bl	b80f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b8532:	e001      	b.n	b8538 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b8534:	2800      	cmp	r0, #0
   b8536:	dbbf      	blt.n	b84b8 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b8538:	6963      	ldr	r3, [r4, #20]
   b853a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b853e:	61a0      	str	r0, [r4, #24]
	return true;
   b8540:	2001      	movs	r0, #1
   b8542:	e7ba      	b.n	b84ba <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b8544:	6963      	ldr	r3, [r4, #20]
   b8546:	61a3      	str	r3, [r4, #24]
   b8548:	e7fa      	b.n	b8540 <_ZN10JsonParser5parseEv+0x90>
	...

000b854c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b854c:	b508      	push	{r3, lr}
   b854e:	4b02      	ldr	r3, [pc, #8]	; (b8558 <hal_ble_stack_init+0xc>)
   b8550:	681b      	ldr	r3, [r3, #0]
   b8552:	689b      	ldr	r3, [r3, #8]
   b8554:	9301      	str	r3, [sp, #4]
   b8556:	bd08      	pop	{r3, pc}
   b8558:	00030278 	.word	0x00030278

000b855c <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b855c:	b508      	push	{r3, lr}
   b855e:	4b02      	ldr	r3, [pc, #8]	; (b8568 <hal_ble_gap_set_advertising_data+0xc>)
   b8560:	681b      	ldr	r3, [r3, #0]
   b8562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8564:	9301      	str	r3, [sp, #4]
   b8566:	bd08      	pop	{r3, pc}
   b8568:	00030278 	.word	0x00030278

000b856c <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b856c:	b508      	push	{r3, lr}
   b856e:	4b02      	ldr	r3, [pc, #8]	; (b8578 <hal_ble_gap_set_scan_response_data+0xc>)
   b8570:	681b      	ldr	r3, [r3, #0]
   b8572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8574:	9301      	str	r3, [sp, #4]
   b8576:	bd08      	pop	{r3, pc}
   b8578:	00030278 	.word	0x00030278

000b857c <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b857c:	b508      	push	{r3, lr}
   b857e:	4b02      	ldr	r3, [pc, #8]	; (b8588 <hal_ble_gap_start_advertising+0xc>)
   b8580:	681b      	ldr	r3, [r3, #0]
   b8582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b8584:	9301      	str	r3, [sp, #4]
   b8586:	bd08      	pop	{r3, pc}
   b8588:	00030278 	.word	0x00030278

000b858c <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b858c:	b508      	push	{r3, lr}
   b858e:	4b03      	ldr	r3, [pc, #12]	; (b859c <hal_ble_gap_disconnect+0x10>)
   b8590:	681b      	ldr	r3, [r3, #0]
   b8592:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b8596:	9301      	str	r3, [sp, #4]
   b8598:	bd08      	pop	{r3, pc}
   b859a:	0000      	.short	0x0000
   b859c:	00030278 	.word	0x00030278

000b85a0 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b85a0:	b508      	push	{r3, lr}
   b85a2:	4b03      	ldr	r3, [pc, #12]	; (b85b0 <hal_ble_gatt_server_add_service+0x10>)
   b85a4:	681b      	ldr	r3, [r3, #0]
   b85a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b85aa:	9301      	str	r3, [sp, #4]
   b85ac:	bd08      	pop	{r3, pc}
   b85ae:	0000      	.short	0x0000
   b85b0:	00030278 	.word	0x00030278

000b85b4 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b85b4:	b508      	push	{r3, lr}
   b85b6:	4b03      	ldr	r3, [pc, #12]	; (b85c4 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b85b8:	681b      	ldr	r3, [r3, #0]
   b85ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b85be:	9301      	str	r3, [sp, #4]
   b85c0:	bd08      	pop	{r3, pc}
   b85c2:	0000      	.short	0x0000
   b85c4:	00030278 	.word	0x00030278

000b85c8 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b85c8:	b508      	push	{r3, lr}
   b85ca:	4b03      	ldr	r3, [pc, #12]	; (b85d8 <hal_ble_gatt_client_write_with_response+0x10>)
   b85cc:	681b      	ldr	r3, [r3, #0]
   b85ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b85d2:	9301      	str	r3, [sp, #4]
   b85d4:	bd08      	pop	{r3, pc}
   b85d6:	0000      	.short	0x0000
   b85d8:	00030278 	.word	0x00030278

000b85dc <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b85dc:	b508      	push	{r3, lr}
   b85de:	4b03      	ldr	r3, [pc, #12]	; (b85ec <hal_ble_gatt_client_write_without_response+0x10>)
   b85e0:	681b      	ldr	r3, [r3, #0]
   b85e2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b85e6:	9301      	str	r3, [sp, #4]
   b85e8:	bd08      	pop	{r3, pc}
   b85ea:	0000      	.short	0x0000
   b85ec:	00030278 	.word	0x00030278

000b85f0 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b85f0:	b508      	push	{r3, lr}
   b85f2:	4b03      	ldr	r3, [pc, #12]	; (b8600 <hal_ble_gatt_server_add_characteristic+0x10>)
   b85f4:	681b      	ldr	r3, [r3, #0]
   b85f6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b85fa:	9301      	str	r3, [sp, #4]
   b85fc:	bd08      	pop	{r3, pc}
   b85fe:	0000      	.short	0x0000
   b8600:	00030278 	.word	0x00030278

000b8604 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b8604:	b508      	push	{r3, lr}
   b8606:	4b03      	ldr	r3, [pc, #12]	; (b8614 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b8608:	681b      	ldr	r3, [r3, #0]
   b860a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b860e:	9301      	str	r3, [sp, #4]
   b8610:	bd08      	pop	{r3, pc}
   b8612:	0000      	.short	0x0000
   b8614:	00030278 	.word	0x00030278

000b8618 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b8618:	b508      	push	{r3, lr}
   b861a:	4b03      	ldr	r3, [pc, #12]	; (b8628 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b861c:	681b      	ldr	r3, [r3, #0]
   b861e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b8622:	9301      	str	r3, [sp, #4]
   b8624:	bd08      	pop	{r3, pc}
   b8626:	0000      	.short	0x0000
   b8628:	00030278 	.word	0x00030278

000b862c <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b862c:	b508      	push	{r3, lr}
   b862e:	4b03      	ldr	r3, [pc, #12]	; (b863c <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b8630:	681b      	ldr	r3, [r3, #0]
   b8632:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b8636:	9301      	str	r3, [sp, #4]
   b8638:	bd08      	pop	{r3, pc}
   b863a:	0000      	.short	0x0000
   b863c:	00030278 	.word	0x00030278

000b8640 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b8640:	b508      	push	{r3, lr}
   b8642:	4b02      	ldr	r3, [pc, #8]	; (b864c <os_mutex_recursive_create+0xc>)
   b8644:	681b      	ldr	r3, [r3, #0]
   b8646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8648:	9301      	str	r3, [sp, #4]
   b864a:	bd08      	pop	{r3, pc}
   b864c:	00030248 	.word	0x00030248

000b8650 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b8650:	b508      	push	{r3, lr}
   b8652:	4b02      	ldr	r3, [pc, #8]	; (b865c <os_mutex_recursive_lock+0xc>)
   b8654:	681b      	ldr	r3, [r3, #0]
   b8656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8658:	9301      	str	r3, [sp, #4]
   b865a:	bd08      	pop	{r3, pc}
   b865c:	00030248 	.word	0x00030248

000b8660 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b8660:	b508      	push	{r3, lr}
   b8662:	4b02      	ldr	r3, [pc, #8]	; (b866c <os_mutex_recursive_unlock+0xc>)
   b8664:	681b      	ldr	r3, [r3, #0]
   b8666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8668:	9301      	str	r3, [sp, #4]
   b866a:	bd08      	pop	{r3, pc}
   b866c:	00030248 	.word	0x00030248

000b8670 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b8670:	b508      	push	{r3, lr}
   b8672:	4b02      	ldr	r3, [pc, #8]	; (b867c <HAL_RNG_GetRandomNumber+0xc>)
   b8674:	681b      	ldr	r3, [r3, #0]
   b8676:	685b      	ldr	r3, [r3, #4]
   b8678:	9301      	str	r3, [sp, #4]
   b867a:	bd08      	pop	{r3, pc}
   b867c:	00030218 	.word	0x00030218

000b8680 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b8680:	b508      	push	{r3, lr}
   b8682:	4b02      	ldr	r3, [pc, #8]	; (b868c <HAL_Delay_Microseconds+0xc>)
   b8684:	681b      	ldr	r3, [r3, #0]
   b8686:	68db      	ldr	r3, [r3, #12]
   b8688:	9301      	str	r3, [sp, #4]
   b868a:	bd08      	pop	{r3, pc}
   b868c:	00030218 	.word	0x00030218

000b8690 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b8690:	b508      	push	{r3, lr}
   b8692:	4b02      	ldr	r3, [pc, #8]	; (b869c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b8694:	681b      	ldr	r3, [r3, #0]
   b8696:	695b      	ldr	r3, [r3, #20]
   b8698:	9301      	str	r3, [sp, #4]
   b869a:	bd08      	pop	{r3, pc}
   b869c:	00030218 	.word	0x00030218

000b86a0 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b86a0:	b508      	push	{r3, lr}
   b86a2:	4b02      	ldr	r3, [pc, #8]	; (b86ac <hal_i2c_begin+0xc>)
   b86a4:	681b      	ldr	r3, [r3, #0]
   b86a6:	68db      	ldr	r3, [r3, #12]
   b86a8:	9301      	str	r3, [sp, #4]
   b86aa:	bd08      	pop	{r3, pc}
   b86ac:	00030228 	.word	0x00030228

000b86b0 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b86b0:	b508      	push	{r3, lr}
   b86b2:	4b02      	ldr	r3, [pc, #8]	; (b86bc <hal_i2c_begin_transmission+0xc>)
   b86b4:	681b      	ldr	r3, [r3, #0]
   b86b6:	699b      	ldr	r3, [r3, #24]
   b86b8:	9301      	str	r3, [sp, #4]
   b86ba:	bd08      	pop	{r3, pc}
   b86bc:	00030228 	.word	0x00030228

000b86c0 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b86c0:	b508      	push	{r3, lr}
   b86c2:	4b02      	ldr	r3, [pc, #8]	; (b86cc <hal_i2c_end_transmission+0xc>)
   b86c4:	681b      	ldr	r3, [r3, #0]
   b86c6:	69db      	ldr	r3, [r3, #28]
   b86c8:	9301      	str	r3, [sp, #4]
   b86ca:	bd08      	pop	{r3, pc}
   b86cc:	00030228 	.word	0x00030228

000b86d0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b86d0:	b508      	push	{r3, lr}
   b86d2:	4b02      	ldr	r3, [pc, #8]	; (b86dc <hal_i2c_write+0xc>)
   b86d4:	681b      	ldr	r3, [r3, #0]
   b86d6:	6a1b      	ldr	r3, [r3, #32]
   b86d8:	9301      	str	r3, [sp, #4]
   b86da:	bd08      	pop	{r3, pc}
   b86dc:	00030228 	.word	0x00030228

000b86e0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b86e0:	b508      	push	{r3, lr}
   b86e2:	4b02      	ldr	r3, [pc, #8]	; (b86ec <hal_i2c_available+0xc>)
   b86e4:	681b      	ldr	r3, [r3, #0]
   b86e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b86e8:	9301      	str	r3, [sp, #4]
   b86ea:	bd08      	pop	{r3, pc}
   b86ec:	00030228 	.word	0x00030228

000b86f0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b86f0:	b508      	push	{r3, lr}
   b86f2:	4b02      	ldr	r3, [pc, #8]	; (b86fc <hal_i2c_read+0xc>)
   b86f4:	681b      	ldr	r3, [r3, #0]
   b86f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b86f8:	9301      	str	r3, [sp, #4]
   b86fa:	bd08      	pop	{r3, pc}
   b86fc:	00030228 	.word	0x00030228

000b8700 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b8700:	b508      	push	{r3, lr}
   b8702:	4b02      	ldr	r3, [pc, #8]	; (b870c <hal_i2c_peek+0xc>)
   b8704:	681b      	ldr	r3, [r3, #0]
   b8706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8708:	9301      	str	r3, [sp, #4]
   b870a:	bd08      	pop	{r3, pc}
   b870c:	00030228 	.word	0x00030228

000b8710 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b8710:	b508      	push	{r3, lr}
   b8712:	4b02      	ldr	r3, [pc, #8]	; (b871c <hal_i2c_flush+0xc>)
   b8714:	681b      	ldr	r3, [r3, #0]
   b8716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8718:	9301      	str	r3, [sp, #4]
   b871a:	bd08      	pop	{r3, pc}
   b871c:	00030228 	.word	0x00030228

000b8720 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b8720:	b508      	push	{r3, lr}
   b8722:	4b02      	ldr	r3, [pc, #8]	; (b872c <hal_i2c_init+0xc>)
   b8724:	681b      	ldr	r3, [r3, #0]
   b8726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8728:	9301      	str	r3, [sp, #4]
   b872a:	bd08      	pop	{r3, pc}
   b872c:	00030228 	.word	0x00030228

000b8730 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b8730:	b508      	push	{r3, lr}
   b8732:	4b02      	ldr	r3, [pc, #8]	; (b873c <hal_i2c_request_ex+0xc>)
   b8734:	681b      	ldr	r3, [r3, #0]
   b8736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8738:	9301      	str	r3, [sp, #4]
   b873a:	bd08      	pop	{r3, pc}
   b873c:	00030228 	.word	0x00030228

000b8740 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b8740:	b508      	push	{r3, lr}
   b8742:	4b02      	ldr	r3, [pc, #8]	; (b874c <if_index_to_name+0xc>)
   b8744:	681b      	ldr	r3, [r3, #0]
   b8746:	695b      	ldr	r3, [r3, #20]
   b8748:	9301      	str	r3, [sp, #4]
   b874a:	bd08      	pop	{r3, pc}
   b874c:	0003026c 	.word	0x0003026c

000b8750 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b8750:	b508      	push	{r3, lr}
   b8752:	4b02      	ldr	r3, [pc, #8]	; (b875c <inet_inet_ntop+0xc>)
   b8754:	681b      	ldr	r3, [r3, #0]
   b8756:	695b      	ldr	r3, [r3, #20]
   b8758:	9301      	str	r3, [sp, #4]
   b875a:	bd08      	pop	{r3, pc}
   b875c:	00030264 	.word	0x00030264

000b8760 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b8760:	b508      	push	{r3, lr}
   b8762:	4b02      	ldr	r3, [pc, #8]	; (b876c <inet_htonl+0xc>)
   b8764:	681b      	ldr	r3, [r3, #0]
   b8766:	6a1b      	ldr	r3, [r3, #32]
   b8768:	9301      	str	r3, [sp, #4]
   b876a:	bd08      	pop	{r3, pc}
   b876c:	00030264 	.word	0x00030264

000b8770 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b8770:	b508      	push	{r3, lr}
   b8772:	4b02      	ldr	r3, [pc, #8]	; (b877c <inet_htons+0xc>)
   b8774:	681b      	ldr	r3, [r3, #0]
   b8776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8778:	9301      	str	r3, [sp, #4]
   b877a:	bd08      	pop	{r3, pc}
   b877c:	00030264 	.word	0x00030264

000b8780 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b8780:	b508      	push	{r3, lr}
   b8782:	4b02      	ldr	r3, [pc, #8]	; (b878c <netdb_freeaddrinfo+0xc>)
   b8784:	681b      	ldr	r3, [r3, #0]
   b8786:	689b      	ldr	r3, [r3, #8]
   b8788:	9301      	str	r3, [sp, #4]
   b878a:	bd08      	pop	{r3, pc}
   b878c:	00030268 	.word	0x00030268

000b8790 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b8790:	b508      	push	{r3, lr}
   b8792:	4b02      	ldr	r3, [pc, #8]	; (b879c <netdb_getaddrinfo+0xc>)
   b8794:	681b      	ldr	r3, [r3, #0]
   b8796:	68db      	ldr	r3, [r3, #12]
   b8798:	9301      	str	r3, [sp, #4]
   b879a:	bd08      	pop	{r3, pc}
   b879c:	00030268 	.word	0x00030268

000b87a0 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b87a0:	b508      	push	{r3, lr}
   b87a2:	4b02      	ldr	r3, [pc, #8]	; (b87ac <sock_setsockopt+0xc>)
   b87a4:	681b      	ldr	r3, [r3, #0]
   b87a6:	699b      	ldr	r3, [r3, #24]
   b87a8:	9301      	str	r3, [sp, #4]
   b87aa:	bd08      	pop	{r3, pc}
   b87ac:	00030238 	.word	0x00030238

000b87b0 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b87b0:	b508      	push	{r3, lr}
   b87b2:	4b02      	ldr	r3, [pc, #8]	; (b87bc <sock_close+0xc>)
   b87b4:	681b      	ldr	r3, [r3, #0]
   b87b6:	69db      	ldr	r3, [r3, #28]
   b87b8:	9301      	str	r3, [sp, #4]
   b87ba:	bd08      	pop	{r3, pc}
   b87bc:	00030238 	.word	0x00030238

000b87c0 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b87c0:	b508      	push	{r3, lr}
   b87c2:	4b02      	ldr	r3, [pc, #8]	; (b87cc <sock_connect+0xc>)
   b87c4:	681b      	ldr	r3, [r3, #0]
   b87c6:	6a1b      	ldr	r3, [r3, #32]
   b87c8:	9301      	str	r3, [sp, #4]
   b87ca:	bd08      	pop	{r3, pc}
   b87cc:	00030238 	.word	0x00030238

000b87d0 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b87d0:	b508      	push	{r3, lr}
   b87d2:	4b02      	ldr	r3, [pc, #8]	; (b87dc <sock_recv+0xc>)
   b87d4:	681b      	ldr	r3, [r3, #0]
   b87d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b87d8:	9301      	str	r3, [sp, #4]
   b87da:	bd08      	pop	{r3, pc}
   b87dc:	00030238 	.word	0x00030238

000b87e0 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b87e0:	b508      	push	{r3, lr}
   b87e2:	4b02      	ldr	r3, [pc, #8]	; (b87ec <sock_send+0xc>)
   b87e4:	681b      	ldr	r3, [r3, #0]
   b87e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b87e8:	9301      	str	r3, [sp, #4]
   b87ea:	bd08      	pop	{r3, pc}
   b87ec:	00030238 	.word	0x00030238

000b87f0 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b87f0:	b508      	push	{r3, lr}
   b87f2:	4b02      	ldr	r3, [pc, #8]	; (b87fc <sock_socket+0xc>)
   b87f4:	681b      	ldr	r3, [r3, #0]
   b87f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b87f8:	9301      	str	r3, [sp, #4]
   b87fa:	bd08      	pop	{r3, pc}
   b87fc:	00030238 	.word	0x00030238

000b8800 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b8800:	b508      	push	{r3, lr}
   b8802:	4b02      	ldr	r3, [pc, #8]	; (b880c <hal_usart_write+0xc>)
   b8804:	681b      	ldr	r3, [r3, #0]
   b8806:	68db      	ldr	r3, [r3, #12]
   b8808:	9301      	str	r3, [sp, #4]
   b880a:	bd08      	pop	{r3, pc}
   b880c:	0003023c 	.word	0x0003023c

000b8810 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b8810:	b508      	push	{r3, lr}
   b8812:	4b02      	ldr	r3, [pc, #8]	; (b881c <hal_usart_available+0xc>)
   b8814:	681b      	ldr	r3, [r3, #0]
   b8816:	691b      	ldr	r3, [r3, #16]
   b8818:	9301      	str	r3, [sp, #4]
   b881a:	bd08      	pop	{r3, pc}
   b881c:	0003023c 	.word	0x0003023c

000b8820 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b8820:	b508      	push	{r3, lr}
   b8822:	4b02      	ldr	r3, [pc, #8]	; (b882c <hal_usart_read+0xc>)
   b8824:	681b      	ldr	r3, [r3, #0]
   b8826:	695b      	ldr	r3, [r3, #20]
   b8828:	9301      	str	r3, [sp, #4]
   b882a:	bd08      	pop	{r3, pc}
   b882c:	0003023c 	.word	0x0003023c

000b8830 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b8830:	b508      	push	{r3, lr}
   b8832:	4b02      	ldr	r3, [pc, #8]	; (b883c <hal_usart_peek+0xc>)
   b8834:	681b      	ldr	r3, [r3, #0]
   b8836:	699b      	ldr	r3, [r3, #24]
   b8838:	9301      	str	r3, [sp, #4]
   b883a:	bd08      	pop	{r3, pc}
   b883c:	0003023c 	.word	0x0003023c

000b8840 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b8840:	b508      	push	{r3, lr}
   b8842:	4b02      	ldr	r3, [pc, #8]	; (b884c <hal_usart_flush+0xc>)
   b8844:	681b      	ldr	r3, [r3, #0]
   b8846:	69db      	ldr	r3, [r3, #28]
   b8848:	9301      	str	r3, [sp, #4]
   b884a:	bd08      	pop	{r3, pc}
   b884c:	0003023c 	.word	0x0003023c

000b8850 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b8850:	b508      	push	{r3, lr}
   b8852:	4b02      	ldr	r3, [pc, #8]	; (b885c <hal_usart_available_data_for_write+0xc>)
   b8854:	681b      	ldr	r3, [r3, #0]
   b8856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8858:	9301      	str	r3, [sp, #4]
   b885a:	bd08      	pop	{r3, pc}
   b885c:	0003023c 	.word	0x0003023c

000b8860 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b8860:	b508      	push	{r3, lr}
   b8862:	4b02      	ldr	r3, [pc, #8]	; (b886c <hal_usart_init_ex+0xc>)
   b8864:	681b      	ldr	r3, [r3, #0]
   b8866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8868:	9301      	str	r3, [sp, #4]
   b886a:	bd08      	pop	{r3, pc}
   b886c:	0003023c 	.word	0x0003023c

000b8870 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b8870:	b508      	push	{r3, lr}
   b8872:	4b02      	ldr	r3, [pc, #8]	; (b887c <HAL_USB_USART_Init+0xc>)
   b8874:	681b      	ldr	r3, [r3, #0]
   b8876:	681b      	ldr	r3, [r3, #0]
   b8878:	9301      	str	r3, [sp, #4]
   b887a:	bd08      	pop	{r3, pc}
   b887c:	0003024c 	.word	0x0003024c

000b8880 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b8880:	b508      	push	{r3, lr}
   b8882:	4b02      	ldr	r3, [pc, #8]	; (b888c <HAL_USB_USART_Begin+0xc>)
   b8884:	681b      	ldr	r3, [r3, #0]
   b8886:	685b      	ldr	r3, [r3, #4]
   b8888:	9301      	str	r3, [sp, #4]
   b888a:	bd08      	pop	{r3, pc}
   b888c:	0003024c 	.word	0x0003024c

000b8890 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b8890:	b508      	push	{r3, lr}
   b8892:	4b02      	ldr	r3, [pc, #8]	; (b889c <HAL_USB_USART_Available_Data+0xc>)
   b8894:	681b      	ldr	r3, [r3, #0]
   b8896:	691b      	ldr	r3, [r3, #16]
   b8898:	9301      	str	r3, [sp, #4]
   b889a:	bd08      	pop	{r3, pc}
   b889c:	0003024c 	.word	0x0003024c

000b88a0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b88a0:	b508      	push	{r3, lr}
   b88a2:	4b02      	ldr	r3, [pc, #8]	; (b88ac <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b88a4:	681b      	ldr	r3, [r3, #0]
   b88a6:	695b      	ldr	r3, [r3, #20]
   b88a8:	9301      	str	r3, [sp, #4]
   b88aa:	bd08      	pop	{r3, pc}
   b88ac:	0003024c 	.word	0x0003024c

000b88b0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b88b0:	b508      	push	{r3, lr}
   b88b2:	4b02      	ldr	r3, [pc, #8]	; (b88bc <HAL_USB_USART_Receive_Data+0xc>)
   b88b4:	681b      	ldr	r3, [r3, #0]
   b88b6:	699b      	ldr	r3, [r3, #24]
   b88b8:	9301      	str	r3, [sp, #4]
   b88ba:	bd08      	pop	{r3, pc}
   b88bc:	0003024c 	.word	0x0003024c

000b88c0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b88c0:	b508      	push	{r3, lr}
   b88c2:	4b02      	ldr	r3, [pc, #8]	; (b88cc <HAL_USB_USART_Send_Data+0xc>)
   b88c4:	681b      	ldr	r3, [r3, #0]
   b88c6:	69db      	ldr	r3, [r3, #28]
   b88c8:	9301      	str	r3, [sp, #4]
   b88ca:	bd08      	pop	{r3, pc}
   b88cc:	0003024c 	.word	0x0003024c

000b88d0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b88d0:	b508      	push	{r3, lr}
   b88d2:	4b02      	ldr	r3, [pc, #8]	; (b88dc <HAL_USB_USART_Flush_Data+0xc>)
   b88d4:	681b      	ldr	r3, [r3, #0]
   b88d6:	6a1b      	ldr	r3, [r3, #32]
   b88d8:	9301      	str	r3, [sp, #4]
   b88da:	bd08      	pop	{r3, pc}
   b88dc:	0003024c 	.word	0x0003024c

000b88e0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b88e0:	b508      	push	{r3, lr}
   b88e2:	4b02      	ldr	r3, [pc, #8]	; (b88ec <panic_+0xc>)
   b88e4:	681b      	ldr	r3, [r3, #0]
   b88e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b88e8:	9301      	str	r3, [sp, #4]
   b88ea:	bd08      	pop	{r3, pc}
   b88ec:	00030260 	.word	0x00030260

000b88f0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b88f0:	b508      	push	{r3, lr}
   b88f2:	4b02      	ldr	r3, [pc, #8]	; (b88fc <log_message+0xc>)
   b88f4:	681b      	ldr	r3, [r3, #0]
   b88f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b88f8:	9301      	str	r3, [sp, #4]
   b88fa:	bd08      	pop	{r3, pc}
   b88fc:	00030260 	.word	0x00030260

000b8900 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b8900:	b508      	push	{r3, lr}
   b8902:	4b02      	ldr	r3, [pc, #8]	; (b890c <set_system_mode+0xc>)
   b8904:	681b      	ldr	r3, [r3, #0]
   b8906:	685b      	ldr	r3, [r3, #4]
   b8908:	9301      	str	r3, [sp, #4]
   b890a:	bd08      	pop	{r3, pc}
   b890c:	00030220 	.word	0x00030220

000b8910 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b8910:	b508      	push	{r3, lr}
   b8912:	4b02      	ldr	r3, [pc, #8]	; (b891c <system_delay_ms+0xc>)
   b8914:	681b      	ldr	r3, [r3, #0]
   b8916:	695b      	ldr	r3, [r3, #20]
   b8918:	9301      	str	r3, [sp, #4]
   b891a:	bd08      	pop	{r3, pc}
   b891c:	00030220 	.word	0x00030220

000b8920 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b8920:	b508      	push	{r3, lr}
   b8922:	4b03      	ldr	r3, [pc, #12]	; (b8930 <system_ctrl_set_app_request_handler+0x10>)
   b8924:	681b      	ldr	r3, [r3, #0]
   b8926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b892a:	9301      	str	r3, [sp, #4]
   b892c:	bd08      	pop	{r3, pc}
   b892e:	0000      	.short	0x0000
   b8930:	00030220 	.word	0x00030220

000b8934 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b8934:	b508      	push	{r3, lr}
   b8936:	4b03      	ldr	r3, [pc, #12]	; (b8944 <system_ctrl_set_result+0x10>)
   b8938:	681b      	ldr	r3, [r3, #0]
   b893a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b893e:	9301      	str	r3, [sp, #4]
   b8940:	bd08      	pop	{r3, pc}
   b8942:	0000      	.short	0x0000
   b8944:	00030220 	.word	0x00030220

000b8948 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b8948:	b508      	push	{r3, lr}
   b894a:	4b02      	ldr	r3, [pc, #8]	; (b8954 <spark_set_random_seed_from_cloud_handler+0xc>)
   b894c:	681b      	ldr	r3, [r3, #0]
   b894e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8950:	9301      	str	r3, [sp, #4]
   b8952:	bd08      	pop	{r3, pc}
   b8954:	00030244 	.word	0x00030244

000b8958 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b8958:	b508      	push	{r3, lr}
   b895a:	4b02      	ldr	r3, [pc, #8]	; (b8964 <network_connect+0xc>)
   b895c:	681b      	ldr	r3, [r3, #0]
   b895e:	685b      	ldr	r3, [r3, #4]
   b8960:	9301      	str	r3, [sp, #4]
   b8962:	bd08      	pop	{r3, pc}
   b8964:	00030240 	.word	0x00030240

000b8968 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b8968:	b508      	push	{r3, lr}
   b896a:	4b02      	ldr	r3, [pc, #8]	; (b8974 <network_connecting+0xc>)
   b896c:	681b      	ldr	r3, [r3, #0]
   b896e:	689b      	ldr	r3, [r3, #8]
   b8970:	9301      	str	r3, [sp, #4]
   b8972:	bd08      	pop	{r3, pc}
   b8974:	00030240 	.word	0x00030240

000b8978 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b8978:	b508      	push	{r3, lr}
   b897a:	4b02      	ldr	r3, [pc, #8]	; (b8984 <network_disconnect+0xc>)
   b897c:	681b      	ldr	r3, [r3, #0]
   b897e:	68db      	ldr	r3, [r3, #12]
   b8980:	9301      	str	r3, [sp, #4]
   b8982:	bd08      	pop	{r3, pc}
   b8984:	00030240 	.word	0x00030240

000b8988 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b8988:	b508      	push	{r3, lr}
   b898a:	4b02      	ldr	r3, [pc, #8]	; (b8994 <network_ready+0xc>)
   b898c:	681b      	ldr	r3, [r3, #0]
   b898e:	691b      	ldr	r3, [r3, #16]
   b8990:	9301      	str	r3, [sp, #4]
   b8992:	bd08      	pop	{r3, pc}
   b8994:	00030240 	.word	0x00030240

000b8998 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b8998:	b508      	push	{r3, lr}
   b899a:	4b02      	ldr	r3, [pc, #8]	; (b89a4 <network_on+0xc>)
   b899c:	681b      	ldr	r3, [r3, #0]
   b899e:	695b      	ldr	r3, [r3, #20]
   b89a0:	9301      	str	r3, [sp, #4]
   b89a2:	bd08      	pop	{r3, pc}
   b89a4:	00030240 	.word	0x00030240

000b89a8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b89a8:	b508      	push	{r3, lr}
   b89aa:	4b02      	ldr	r3, [pc, #8]	; (b89b4 <network_off+0xc>)
   b89ac:	681b      	ldr	r3, [r3, #0]
   b89ae:	699b      	ldr	r3, [r3, #24]
   b89b0:	9301      	str	r3, [sp, #4]
   b89b2:	bd08      	pop	{r3, pc}
   b89b4:	00030240 	.word	0x00030240

000b89b8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b89b8:	b508      	push	{r3, lr}
   b89ba:	4b02      	ldr	r3, [pc, #8]	; (b89c4 <network_listen+0xc>)
   b89bc:	681b      	ldr	r3, [r3, #0]
   b89be:	69db      	ldr	r3, [r3, #28]
   b89c0:	9301      	str	r3, [sp, #4]
   b89c2:	bd08      	pop	{r3, pc}
   b89c4:	00030240 	.word	0x00030240

000b89c8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b89c8:	b508      	push	{r3, lr}
   b89ca:	4b02      	ldr	r3, [pc, #8]	; (b89d4 <network_listening+0xc>)
   b89cc:	681b      	ldr	r3, [r3, #0]
   b89ce:	6a1b      	ldr	r3, [r3, #32]
   b89d0:	9301      	str	r3, [sp, #4]
   b89d2:	bd08      	pop	{r3, pc}
   b89d4:	00030240 	.word	0x00030240

000b89d8 <network_has_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
   b89d8:	b508      	push	{r3, lr}
   b89da:	4b02      	ldr	r3, [pc, #8]	; (b89e4 <network_has_credentials+0xc>)
   b89dc:	681b      	ldr	r3, [r3, #0]
   b89de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b89e0:	9301      	str	r3, [sp, #4]
   b89e2:	bd08      	pop	{r3, pc}
   b89e4:	00030240 	.word	0x00030240

000b89e8 <network_set_credentials>:
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b89e8:	b508      	push	{r3, lr}
   b89ea:	4b02      	ldr	r3, [pc, #8]	; (b89f4 <network_set_credentials+0xc>)
   b89ec:	681b      	ldr	r3, [r3, #0]
   b89ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b89f0:	9301      	str	r3, [sp, #4]
   b89f2:	bd08      	pop	{r3, pc}
   b89f4:	00030240 	.word	0x00030240

000b89f8 <network_clear_credentials>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b89f8:	b508      	push	{r3, lr}
   b89fa:	4b02      	ldr	r3, [pc, #8]	; (b8a04 <network_clear_credentials+0xc>)
   b89fc:	681b      	ldr	r3, [r3, #0]
   b89fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8a00:	9301      	str	r3, [sp, #4]
   b8a02:	bd08      	pop	{r3, pc}
   b8a04:	00030240 	.word	0x00030240

000b8a08 <network_set_listen_timeout>:
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b8a08:	b508      	push	{r3, lr}
   b8a0a:	4b02      	ldr	r3, [pc, #8]	; (b8a14 <network_set_listen_timeout+0xc>)
   b8a0c:	681b      	ldr	r3, [r3, #0]
   b8a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8a10:	9301      	str	r3, [sp, #4]
   b8a12:	bd08      	pop	{r3, pc}
   b8a14:	00030240 	.word	0x00030240

000b8a18 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b8a18:	b508      	push	{r3, lr}
   b8a1a:	4b02      	ldr	r3, [pc, #8]	; (b8a24 <network_get_listen_timeout+0xc>)
   b8a1c:	681b      	ldr	r3, [r3, #0]
   b8a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8a20:	9301      	str	r3, [sp, #4]
   b8a22:	bd08      	pop	{r3, pc}
   b8a24:	00030240 	.word	0x00030240

000b8a28 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b8a28:	b508      	push	{r3, lr}
   b8a2a:	4b02      	ldr	r3, [pc, #8]	; (b8a34 <network_is_on+0xc>)
   b8a2c:	681b      	ldr	r3, [r3, #0]
   b8a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8a30:	9301      	str	r3, [sp, #4]
   b8a32:	bd08      	pop	{r3, pc}
   b8a34:	00030240 	.word	0x00030240

000b8a38 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b8a38:	b508      	push	{r3, lr}
   b8a3a:	4b02      	ldr	r3, [pc, #8]	; (b8a44 <network_is_off+0xc>)
   b8a3c:	681b      	ldr	r3, [r3, #0]
   b8a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8a40:	9301      	str	r3, [sp, #4]
   b8a42:	bd08      	pop	{r3, pc}
   b8a44:	00030240 	.word	0x00030240

000b8a48 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b8a48:	b508      	push	{r3, lr}
   b8a4a:	4b02      	ldr	r3, [pc, #8]	; (b8a54 <malloc+0xc>)
   b8a4c:	681b      	ldr	r3, [r3, #0]
   b8a4e:	681b      	ldr	r3, [r3, #0]
   b8a50:	9301      	str	r3, [sp, #4]
   b8a52:	bd08      	pop	{r3, pc}
   b8a54:	0003021c 	.word	0x0003021c

000b8a58 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b8a58:	b508      	push	{r3, lr}
   b8a5a:	4b02      	ldr	r3, [pc, #8]	; (b8a64 <free+0xc>)
   b8a5c:	681b      	ldr	r3, [r3, #0]
   b8a5e:	685b      	ldr	r3, [r3, #4]
   b8a60:	9301      	str	r3, [sp, #4]
   b8a62:	bd08      	pop	{r3, pc}
   b8a64:	0003021c 	.word	0x0003021c

000b8a68 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b8a68:	b508      	push	{r3, lr}
   b8a6a:	4b02      	ldr	r3, [pc, #8]	; (b8a74 <realloc+0xc>)
   b8a6c:	681b      	ldr	r3, [r3, #0]
   b8a6e:	689b      	ldr	r3, [r3, #8]
   b8a70:	9301      	str	r3, [sp, #4]
   b8a72:	bd08      	pop	{r3, pc}
   b8a74:	0003021c 	.word	0x0003021c

000b8a78 <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b8a78:	b508      	push	{r3, lr}
   b8a7a:	4b02      	ldr	r3, [pc, #8]	; (b8a84 <sscanf+0xc>)
   b8a7c:	681b      	ldr	r3, [r3, #0]
   b8a7e:	695b      	ldr	r3, [r3, #20]
   b8a80:	9301      	str	r3, [sp, #4]
   b8a82:	bd08      	pop	{r3, pc}
   b8a84:	0003021c 	.word	0x0003021c

000b8a88 <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b8a88:	b508      	push	{r3, lr}
   b8a8a:	4b02      	ldr	r3, [pc, #8]	; (b8a94 <vsnprintf+0xc>)
   b8a8c:	681b      	ldr	r3, [r3, #0]
   b8a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8a90:	9301      	str	r3, [sp, #4]
   b8a92:	bd08      	pop	{r3, pc}
   b8a94:	0003021c 	.word	0x0003021c

000b8a98 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b8a98:	b508      	push	{r3, lr}
   b8a9a:	4b02      	ldr	r3, [pc, #8]	; (b8aa4 <abort+0xc>)
   b8a9c:	681b      	ldr	r3, [r3, #0]
   b8a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8aa0:	9301      	str	r3, [sp, #4]
   b8aa2:	bd08      	pop	{r3, pc}
   b8aa4:	0003021c 	.word	0x0003021c

000b8aa8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b8aa8:	b508      	push	{r3, lr}
   b8aaa:	4b02      	ldr	r3, [pc, #8]	; (b8ab4 <_malloc_r+0xc>)
   b8aac:	681b      	ldr	r3, [r3, #0]
   b8aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8ab0:	9301      	str	r3, [sp, #4]
   b8ab2:	bd08      	pop	{r3, pc}
   b8ab4:	0003021c 	.word	0x0003021c

000b8ab8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b8ab8:	b508      	push	{r3, lr}
   b8aba:	4b02      	ldr	r3, [pc, #8]	; (b8ac4 <__errno+0xc>)
   b8abc:	681b      	ldr	r3, [r3, #0]
   b8abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8ac0:	9301      	str	r3, [sp, #4]
   b8ac2:	bd08      	pop	{r3, pc}
   b8ac4:	0003021c 	.word	0x0003021c

000b8ac8 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b8ac8:	b508      	push	{r3, lr}
   b8aca:	4b02      	ldr	r3, [pc, #8]	; (b8ad4 <__assert_func+0xc>)
   b8acc:	681b      	ldr	r3, [r3, #0]
   b8ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8ad0:	9301      	str	r3, [sp, #4]
   b8ad2:	bd08      	pop	{r3, pc}
   b8ad4:	0003021c 	.word	0x0003021c

000b8ad8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b8ad8:	b508      	push	{r3, lr}
   b8ada:	4b02      	ldr	r3, [pc, #8]	; (b8ae4 <newlib_impure_ptr_callback+0xc>)
   b8adc:	681b      	ldr	r3, [r3, #0]
   b8ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8ae0:	9301      	str	r3, [sp, #4]
   b8ae2:	bd08      	pop	{r3, pc}
   b8ae4:	0003021c 	.word	0x0003021c

000b8ae8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b8ae8:	2100      	movs	r1, #0
   b8aea:	f7ff bf11 	b.w	b8910 <system_delay_ms>

000b8aee <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8aee:	4770      	bx	lr

000b8af0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b8af0:	4770      	bx	lr

000b8af2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b8af2:	4770      	bx	lr

000b8af4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8af4:	4770      	bx	lr
	...

000b8af8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8af8:	4b06      	ldr	r3, [pc, #24]	; (b8b14 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8afa:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8afc:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b8afe:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8b02:	d005      	beq.n	b8b10 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8b04:	4608      	mov	r0, r1
   b8b06:	f002 fb29 	bl	bb15c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8b0a:	2800      	cmp	r0, #0
   b8b0c:	bf08      	it	eq
   b8b0e:	2400      	moveq	r4, #0
      }
   b8b10:	4620      	mov	r0, r4
   b8b12:	bd10      	pop	{r4, pc}
   b8b14:	000be8e4 	.word	0x000be8e4

000b8b18 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8b18:	4b06      	ldr	r3, [pc, #24]	; (b8b34 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8b1a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8b1c:	b510      	push	{r4, lr}
   b8b1e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8b22:	d005      	beq.n	b8b30 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8b24:	4608      	mov	r0, r1
   b8b26:	f002 fb19 	bl	bb15c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8b2a:	2800      	cmp	r0, #0
   b8b2c:	bf08      	it	eq
   b8b2e:	2400      	moveq	r4, #0
      }
   b8b30:	4620      	mov	r0, r4
   b8b32:	bd10      	pop	{r4, pc}
   b8b34:	000be8e4 	.word	0x000be8e4

000b8b38 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8b38:	4b06      	ldr	r3, [pc, #24]	; (b8b54 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8b3a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8b3c:	b510      	push	{r4, lr}
   b8b3e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8b42:	d005      	beq.n	b8b50 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8b44:	4608      	mov	r0, r1
   b8b46:	f002 fb09 	bl	bb15c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8b4a:	2800      	cmp	r0, #0
   b8b4c:	bf08      	it	eq
   b8b4e:	2400      	moveq	r4, #0
      }
   b8b50:	4620      	mov	r0, r4
   b8b52:	bd10      	pop	{r4, pc}
   b8b54:	000be8e4 	.word	0x000be8e4

000b8b58 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8b58:	b510      	push	{r4, lr}
   b8b5a:	2168      	movs	r1, #104	; 0x68
   b8b5c:	4604      	mov	r4, r0
   b8b5e:	f7fb faa0 	bl	b40a2 <_ZdlPvj>
   b8b62:	4620      	mov	r0, r4
   b8b64:	bd10      	pop	{r4, pc}

000b8b66 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b8b66:	b510      	push	{r4, lr}
   b8b68:	2128      	movs	r1, #40	; 0x28
   b8b6a:	4604      	mov	r4, r0
   b8b6c:	f7fb fa99 	bl	b40a2 <_ZdlPvj>
   b8b70:	4620      	mov	r0, r4
   b8b72:	bd10      	pop	{r4, pc}

000b8b74 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b8b74:	b510      	push	{r4, lr}
   b8b76:	2130      	movs	r1, #48	; 0x30
   b8b78:	4604      	mov	r4, r0
   b8b7a:	f7fb fa92 	bl	b40a2 <_ZdlPvj>
   b8b7e:	4620      	mov	r0, r4
   b8b80:	bd10      	pop	{r4, pc}

000b8b82 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b8b82:	2168      	movs	r1, #104	; 0x68
   b8b84:	f7fb ba8d 	b.w	b40a2 <_ZdlPvj>

000b8b88 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b8b88:	2128      	movs	r1, #40	; 0x28
   b8b8a:	f7fb ba8a 	b.w	b40a2 <_ZdlPvj>

000b8b8e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b8b8e:	2130      	movs	r1, #48	; 0x30
   b8b90:	f7fb ba87 	b.w	b40a2 <_ZdlPvj>

000b8b94 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b8b94:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b8b96:	2500      	movs	r5, #0
   b8b98:	1cec      	adds	r4, r5, #3
   b8b9a:	428c      	cmp	r4, r1
   b8b9c:	d80d      	bhi.n	b8bba <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b8b9e:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b8ba0:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b8ba2:	5d87      	ldrb	r7, [r0, r6]
   b8ba4:	4297      	cmp	r7, r2
   b8ba6:	d105      	bne.n	b8bb4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b8ba8:	4426      	add	r6, r4
   b8baa:	42b1      	cmp	r1, r6
   b8bac:	d305      	bcc.n	b8bba <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b8bae:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b8bb0:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b8bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b8bb4:	3401      	adds	r4, #1
   b8bb6:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b8bb8:	e7ee      	b.n	b8b98 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b8bba:	2000      	movs	r0, #0
   b8bbc:	e7f9      	b.n	b8bb2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b8bc0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b8bc0:	4a02      	ldr	r2, [pc, #8]	; (b8bcc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b8bc2:	4903      	ldr	r1, [pc, #12]	; (b8bd0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b8bc4:	200a      	movs	r0, #10
   b8bc6:	f7ff be8b 	b.w	b88e0 <panic_>
   b8bca:	bf00      	nop
   b8bcc:	000b8681 	.word	0x000b8681
   b8bd0:	000be744 	.word	0x000be744

000b8bd4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b8bd4:	b430      	push	{r4, r5}
   b8bd6:	460d      	mov	r5, r1
   b8bd8:	4611      	mov	r1, r2
   b8bda:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b8bdc:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b8bde:	6809      	ldr	r1, [r1, #0]
   b8be0:	6828      	ldr	r0, [r5, #0]
   b8be2:	e9d3 4300 	ldrd	r4, r3, [r3]
   b8be6:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b8be8:	bc30      	pop	{r4, r5}
   b8bea:	4760      	bx	ip

000b8bec <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b8bec:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b8bee:	b538      	push	{r3, r4, r5, lr}
   b8bf0:	4604      	mov	r4, r0
	switch (__op)
   b8bf2:	d102      	bne.n	b8bfa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b8bf4:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b8bf6:	6023      	str	r3, [r4, #0]
	}
   b8bf8:	e003      	b.n	b8c02 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b8bfa:	2a02      	cmp	r2, #2
   b8bfc:	d003      	beq.n	b8c06 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b8bfe:	2a03      	cmp	r2, #3
   b8c00:	d00d      	beq.n	b8c1e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b8c02:	2000      	movs	r0, #0
   b8c04:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b8c06:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b8c08:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b8c0a:	f7fb fa44 	bl	b4096 <_Znwj>
   b8c0e:	4603      	mov	r3, r0
   b8c10:	2800      	cmp	r0, #0
   b8c12:	d0f0      	beq.n	b8bf6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b8c14:	e895 0003 	ldmia.w	r5, {r0, r1}
   b8c18:	e883 0003 	stmia.w	r3, {r0, r1}
   b8c1c:	e7eb      	b.n	b8bf6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b8c1e:	6800      	ldr	r0, [r0, #0]
   b8c20:	2800      	cmp	r0, #0
   b8c22:	d0ee      	beq.n	b8c02 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b8c24:	2108      	movs	r1, #8
   b8c26:	f7fb fa3c 	bl	b40a2 <_ZdlPvj>
   b8c2a:	e7ea      	b.n	b8c02 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b8c2c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b8c2c:	b510      	push	{r4, lr}
      if (_M_manager)
   b8c2e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b8c30:	4604      	mov	r4, r0
      if (_M_manager)
   b8c32:	b113      	cbz	r3, b8c3a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b8c34:	2203      	movs	r2, #3
   b8c36:	4601      	mov	r1, r0
   b8c38:	4798      	blx	r3
    }
   b8c3a:	4620      	mov	r0, r4
   b8c3c:	bd10      	pop	{r4, pc}

000b8c3e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b8c3e:	b510      	push	{r4, lr}
   b8c40:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b8c42:	3058      	adds	r0, #88	; 0x58
   b8c44:	f7ff fff2 	bl	b8c2c <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b8c48:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b8c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8c50:	f001 bb98 	b.w	ba384 <_ZN6StringD1Ev>

000b8c54 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b8c54:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b8c56:	6843      	ldr	r3, [r0, #4]
   b8c58:	3b01      	subs	r3, #1
    {
   b8c5a:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b8c5c:	6043      	str	r3, [r0, #4]
   b8c5e:	b963      	cbnz	r3, b8c7a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b8c60:	6803      	ldr	r3, [r0, #0]
   b8c62:	689b      	ldr	r3, [r3, #8]
   b8c64:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b8c66:	68a3      	ldr	r3, [r4, #8]
   b8c68:	3b01      	subs	r3, #1
   b8c6a:	60a3      	str	r3, [r4, #8]
   b8c6c:	b92b      	cbnz	r3, b8c7a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b8c6e:	6823      	ldr	r3, [r4, #0]
   b8c70:	4620      	mov	r0, r4
   b8c72:	68db      	ldr	r3, [r3, #12]
    }
   b8c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b8c78:	4718      	bx	r3
    }
   b8c7a:	bd10      	pop	{r4, pc}

000b8c7c <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b8c7c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b8c80:	b2da      	uxtb	r2, r3
   b8c82:	2a09      	cmp	r2, #9
   b8c84:	d801      	bhi.n	b8c8a <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b8c86:	4618      	mov	r0, r3
   b8c88:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b8c8a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b8c8e:	2b05      	cmp	r3, #5
   b8c90:	d801      	bhi.n	b8c96 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b8c92:	3857      	subs	r0, #87	; 0x57
   b8c94:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b8c96:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b8c9a:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b8c9c:	bf94      	ite	ls
   b8c9e:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b8ca0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b8ca4:	4770      	bx	lr
	...

000b8ca8 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b8ca8:	b510      	push	{r4, lr}
            locked_(false) {
   b8caa:	2300      	movs	r3, #0
   b8cac:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b8cae:	4b04      	ldr	r3, [pc, #16]	; (b8cc0 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b8cb0:	4604      	mov	r4, r0
   b8cb2:	6818      	ldr	r0, [r3, #0]
   b8cb4:	f7ff fccc 	bl	b8650 <os_mutex_recursive_lock>
        locked_ = true;
   b8cb8:	2301      	movs	r3, #1
   b8cba:	7023      	strb	r3, [r4, #0]
    }
   b8cbc:	4620      	mov	r0, r4
   b8cbe:	bd10      	pop	{r4, pc}
   b8cc0:	2003e6c0 	.word	0x2003e6c0

000b8cc4 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b8cc4:	b510      	push	{r4, lr}
        if (locked_) {
   b8cc6:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b8cc8:	4604      	mov	r4, r0
        if (locked_) {
   b8cca:	b11b      	cbz	r3, b8cd4 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b8ccc:	4b02      	ldr	r3, [pc, #8]	; (b8cd8 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b8cce:	6818      	ldr	r0, [r3, #0]
   b8cd0:	f7ff fcc6 	bl	b8660 <os_mutex_recursive_unlock>
    }
   b8cd4:	4620      	mov	r0, r4
   b8cd6:	bd10      	pop	{r4, pc}
   b8cd8:	2003e6c0 	.word	0x2003e6c0

000b8cdc <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b8cdc:	b082      	sub	sp, #8
   b8cde:	4603      	mov	r3, r0
    address_ = addr;
   b8ce0:	6808      	ldr	r0, [r1, #0]
   b8ce2:	6849      	ldr	r1, [r1, #4]
   b8ce4:	466a      	mov	r2, sp
   b8ce6:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b8ce8:	466a      	mov	r2, sp
   b8cea:	ca03      	ldmia	r2!, {r0, r1}
   b8cec:	6018      	str	r0, [r3, #0]
}
   b8cee:	4618      	mov	r0, r3
    address_ = addr.address_;
   b8cf0:	6059      	str	r1, [r3, #4]
}
   b8cf2:	b002      	add	sp, #8
   b8cf4:	4770      	bx	lr

000b8cf6 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b8cf6:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b8cf8:	7982      	ldrb	r2, [r0, #6]
   b8cfa:	798b      	ldrb	r3, [r1, #6]
   b8cfc:	429a      	cmp	r2, r3
   b8cfe:	d106      	bne.n	b8d0e <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b8d00:	2206      	movs	r2, #6
   b8d02:	f003 f9f7 	bl	bc0f4 <memcmp>
   b8d06:	fab0 f080 	clz	r0, r0
   b8d0a:	0940      	lsrs	r0, r0, #5
}
   b8d0c:	bd08      	pop	{r3, pc}
    return false;
   b8d0e:	2000      	movs	r0, #0
   b8d10:	e7fc      	b.n	b8d0c <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b8d12 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b8d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8d16:	6003      	str	r3, [r0, #0]
   b8d18:	8083      	strh	r3, [r0, #4]
}
   b8d1a:	2000      	movs	r0, #0
   b8d1c:	4770      	bx	lr

000b8d1e <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b8d1e:	b508      	push	{r3, lr}
   b8d20:	4602      	mov	r2, r0
        : address_{} {
   b8d22:	2100      	movs	r1, #0
   b8d24:	6001      	str	r1, [r0, #0]
   b8d26:	6041      	str	r1, [r0, #4]
    clear();
   b8d28:	f7ff fff3 	bl	b8d12 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b8d2c:	7191      	strb	r1, [r2, #6]
}
   b8d2e:	4610      	mov	r0, r2
   b8d30:	bd08      	pop	{r3, pc}
	...

000b8d34 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b8d34:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b8d36:	2301      	movs	r3, #1
   b8d38:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8d3a:	4b05      	ldr	r3, [pc, #20]	; (b8d50 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b8d3c:	4602      	mov	r2, r0
   b8d3e:	f103 0110 	add.w	r1, r3, #16
   b8d42:	f853 4b04 	ldr.w	r4, [r3], #4
   b8d46:	f842 4b04 	str.w	r4, [r2], #4
   b8d4a:	428b      	cmp	r3, r1
   b8d4c:	d1f9      	bne.n	b8d42 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b8d4e:	bd10      	pop	{r4, pc}
   b8d50:	000be8f2 	.word	0x000be8f2

000b8d54 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b8d54:	b510      	push	{r4, lr}
    if (uuid128) {
   b8d56:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b8d58:	4604      	mov	r4, r0
    if (uuid128) {
   b8d5a:	b1b1      	cbz	r1, b8d8a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b8d5c:	2a01      	cmp	r2, #1
   b8d5e:	f101 0210 	add.w	r2, r1, #16
   b8d62:	d10a      	bne.n	b8d7a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b8d64:	4601      	mov	r1, r0
   b8d66:	f853 0b04 	ldr.w	r0, [r3], #4
   b8d6a:	f841 0b04 	str.w	r0, [r1], #4
   b8d6e:	4293      	cmp	r3, r2
   b8d70:	d1f9      	bne.n	b8d66 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b8d72:	2301      	movs	r3, #1
   b8d74:	6123      	str	r3, [r4, #16]
}
   b8d76:	4620      	mov	r0, r4
   b8d78:	bd10      	pop	{r4, pc}
   b8d7a:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b8d7c:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b8d80:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b8d84:	429a      	cmp	r2, r3
   b8d86:	d1f9      	bne.n	b8d7c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b8d88:	e7f3      	b.n	b8d72 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b8d8a:	2210      	movs	r2, #16
   b8d8c:	f003 f9ea 	bl	bc164 <memset>
   b8d90:	e7f1      	b.n	b8d76 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b8d92 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b8d92:	b538      	push	{r3, r4, r5, lr}
   b8d94:	4604      	mov	r4, r0
   b8d96:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b8d98:	461a      	mov	r2, r3
   b8d9a:	f7ff ffdb 	bl	b8d54 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b8d9e:	81a5      	strh	r5, [r4, #12]
}
   b8da0:	4620      	mov	r0, r4
   b8da2:	bd38      	pop	{r3, r4, r5, pc}

000b8da4 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b8da4:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b8da6:	6902      	ldr	r2, [r0, #16]
   b8da8:	b922      	cbnz	r2, b8db4 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b8daa:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8dac:	3800      	subs	r0, #0
   b8dae:	bf18      	it	ne
   b8db0:	2001      	movne	r0, #1
}
   b8db2:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8db4:	4902      	ldr	r1, [pc, #8]	; (b8dc0 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b8db6:	2210      	movs	r2, #16
   b8db8:	f003 f99c 	bl	bc0f4 <memcmp>
   b8dbc:	e7f6      	b.n	b8dac <_ZNK8particle7BleUuid7isValidEv+0x8>
   b8dbe:	bf00      	nop
   b8dc0:	000be912 	.word	0x000be912

000b8dc4 <_ZNK8particle7BleUuid4typeEv>:
}
   b8dc4:	6900      	ldr	r0, [r0, #16]
   b8dc6:	4770      	bx	lr

000b8dc8 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b8dc8:	b538      	push	{r3, r4, r5, lr}
   b8dca:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b8dcc:	2214      	movs	r2, #20
   b8dce:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b8dd0:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b8dd2:	f003 f9c7 	bl	bc164 <memset>
    if (type_ == BleUuidType::SHORT) {
   b8dd6:	6923      	ldr	r3, [r4, #16]
   b8dd8:	b91b      	cbnz	r3, b8de2 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b8dda:	89a3      	ldrh	r3, [r4, #12]
   b8ddc:	802b      	strh	r3, [r5, #0]
}
   b8dde:	4628      	mov	r0, r5
   b8de0:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b8de2:	2301      	movs	r3, #1
   b8de4:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b8de6:	4621      	mov	r1, r4
   b8de8:	462b      	mov	r3, r5
   b8dea:	f104 0210 	add.w	r2, r4, #16
   b8dee:	f851 0b04 	ldr.w	r0, [r1], #4
   b8df2:	f843 0b04 	str.w	r0, [r3], #4
   b8df6:	4291      	cmp	r1, r2
   b8df8:	d1f9      	bne.n	b8dee <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b8dfa:	e7f0      	b.n	b8dde <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b8dfc <_ZNK8particle7BleUuid7shortedEv>:
}
   b8dfc:	8980      	ldrh	r0, [r0, #12]
   b8dfe:	4770      	bx	lr

000b8e00 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b8e00:	4770      	bx	lr

000b8e02 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b8e02:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b8e04:	6902      	ldr	r2, [r0, #16]
   b8e06:	690b      	ldr	r3, [r1, #16]
   b8e08:	429a      	cmp	r2, r3
   b8e0a:	d106      	bne.n	b8e1a <_ZNK8particle7BleUuideqERKS0_+0x18>
   b8e0c:	2210      	movs	r2, #16
   b8e0e:	f003 f971 	bl	bc0f4 <memcmp>
   b8e12:	fab0 f080 	clz	r0, r0
   b8e16:	0940      	lsrs	r0, r0, #5
}
   b8e18:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b8e1a:	2000      	movs	r0, #0
   b8e1c:	e7fc      	b.n	b8e18 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b8e20 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b8e20:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b8e22:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b8e26:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8e28:	4b34      	ldr	r3, [pc, #208]	; (b8efc <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b8e2a:	460c      	mov	r4, r1
   b8e2c:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8e2e:	4602      	mov	r2, r0
   b8e30:	f103 0110 	add.w	r1, r3, #16
   b8e34:	f853 0b04 	ldr.w	r0, [r3], #4
   b8e38:	f842 0b04 	str.w	r0, [r2], #4
   b8e3c:	428b      	cmp	r3, r1
   b8e3e:	d1f9      	bne.n	b8e34 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b8e40:	b344      	cbz	r4, b8e94 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b8e42:	2124      	movs	r1, #36	; 0x24
   b8e44:	4620      	mov	r0, r4
   b8e46:	f003 f9f1 	bl	bc22c <strnlen>
   b8e4a:	2804      	cmp	r0, #4
   b8e4c:	f04f 0500 	mov.w	r5, #0
   b8e50:	d123      	bne.n	b8e9a <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b8e52:	f8ad 5004 	strh.w	r5, [sp, #4]
   b8e56:	af01      	add	r7, sp, #4
   b8e58:	1ca5      	adds	r5, r4, #2
   b8e5a:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b8e5c:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b8e60:	f7ff ff0c 	bl	b8c7c <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b8e64:	f1b0 0800 	subs.w	r8, r0, #0
   b8e68:	db12      	blt.n	b8e90 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b8e6a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b8e6e:	f7ff ff05 	bl	b8c7c <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b8e72:	2800      	cmp	r0, #0
   b8e74:	db0c      	blt.n	b8e90 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b8e76:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b8e78:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b8e7c:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b8e7e:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b8e82:	d1eb      	bne.n	b8e5c <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b8e84:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b8e88:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b8e8a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b8e8e:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b8e90:	2300      	movs	r3, #0
   b8e92:	6133      	str	r3, [r6, #16]
}
   b8e94:	b002      	add	sp, #8
   b8e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b8e9a:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b8e9e:	2124      	movs	r1, #36	; 0x24
   b8ea0:	4620      	mov	r0, r4
   b8ea2:	f003 f9c3 	bl	bc22c <strnlen>
   b8ea6:	42a8      	cmp	r0, r5
   b8ea8:	d807      	bhi.n	b8eba <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b8eaa:	4642      	mov	r2, r8
   b8eac:	2100      	movs	r1, #0
   b8eae:	4630      	mov	r0, r6
}
   b8eb0:	b002      	add	sp, #8
   b8eb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b8eb6:	f003 b955 	b.w	bc164 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b8eba:	f1b8 0f00 	cmp.w	r8, #0
   b8ebe:	d0e9      	beq.n	b8e94 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b8ec0:	5d60      	ldrb	r0, [r4, r5]
   b8ec2:	f7ff fedb 	bl	b8c7c <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b8ec6:	0603      	lsls	r3, r0, #24
   b8ec8:	d415      	bmi.n	b8ef6 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b8eca:	0100      	lsls	r0, r0, #4
   b8ecc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b8ed0:	b2c7      	uxtb	r7, r0
   b8ed2:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b8ed6:	2124      	movs	r1, #36	; 0x24
   b8ed8:	4620      	mov	r0, r4
   b8eda:	f003 f9a7 	bl	bc22c <strnlen>
   b8ede:	3501      	adds	r5, #1
   b8ee0:	42a8      	cmp	r0, r5
   b8ee2:	d908      	bls.n	b8ef6 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b8ee4:	5d60      	ldrb	r0, [r4, r5]
   b8ee6:	f7ff fec9 	bl	b8c7c <_ZN8particle11hexToNibbleEc>
   b8eea:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b8eec:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b8eee:	bfa4      	itt	ge
   b8ef0:	4338      	orrge	r0, r7
   b8ef2:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b8ef6:	3501      	adds	r5, #1
   b8ef8:	e7d1      	b.n	b8e9e <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b8efa:	bf00      	nop
   b8efc:	000be8f2 	.word	0x000be8f2

000b8f00 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b8f00:	b513      	push	{r0, r1, r4, lr}
   b8f02:	4604      	mov	r4, r0
   b8f04:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b8f06:	f7ff ff15 	bl	b8d34 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b8f0a:	4620      	mov	r0, r4
   b8f0c:	9901      	ldr	r1, [sp, #4]
   b8f0e:	f7ff ff87 	bl	b8e20 <_ZN8particle7BleUuid9constructEPKc>
}
   b8f12:	4620      	mov	r0, r4
   b8f14:	b002      	add	sp, #8
   b8f16:	bd10      	pop	{r4, pc}

000b8f18 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b8f18:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b8f1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b8f1e:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b8f20:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b8f22:	8043      	strh	r3, [r0, #2]
   b8f24:	220e      	movs	r2, #14
   b8f26:	4629      	mov	r1, r5
   b8f28:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b8f2a:	7105      	strb	r5, [r0, #4]
   b8f2c:	3006      	adds	r0, #6
   b8f2e:	f003 f919 	bl	bc164 <memset>
   b8f32:	f104 0014 	add.w	r0, r4, #20
   b8f36:	f7ff fefd 	bl	b8d34 <_ZN8particle7BleUuidC1Ev>
   b8f3a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b8f3e:	f7ff fef9 	bl	b8d34 <_ZN8particle7BleUuidC1Ev>
   b8f42:	4904      	ldr	r1, [pc, #16]	; (b8f54 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b8f44:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b8f48:	f001 fa67 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b8f4c:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b8f4e:	4620      	mov	r0, r4
   b8f50:	bd38      	pop	{r3, r4, r5, pc}
   b8f52:	bf00      	nop
   b8f54:	000be70e 	.word	0x000be70e

000b8f58 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b8f58:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b8f5a:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b8f5e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b8f62:	4293      	cmp	r3, r2
   b8f64:	4618      	mov	r0, r3
   b8f66:	d006      	beq.n	b8f76 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b8f68:	6804      	ldr	r4, [r0, #0]
   b8f6a:	8824      	ldrh	r4, [r4, #0]
   b8f6c:	428c      	cmp	r4, r1
   b8f6e:	f103 0308 	add.w	r3, r3, #8
   b8f72:	d1f6      	bne.n	b8f62 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b8f74:	bd10      	pop	{r4, pc}
        return nullptr;
   b8f76:	2000      	movs	r0, #0
   b8f78:	e7fc      	b.n	b8f74 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b8f7c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b8f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8f7e:	4606      	mov	r6, r0
   b8f80:	b085      	sub	sp, #20
   b8f82:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b8f84:	460d      	mov	r5, r1
   b8f86:	2900      	cmp	r1, #0
   b8f88:	d050      	beq.n	b902c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b8f8a:	2a00      	cmp	r2, #0
   b8f8c:	d04e      	beq.n	b902c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b8f8e:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b8f90:	7823      	ldrb	r3, [r4, #0]
   b8f92:	2af4      	cmp	r2, #244	; 0xf4
   b8f94:	bf28      	it	cs
   b8f96:	22f4      	movcs	r2, #244	; 0xf4
   b8f98:	b343      	cbz	r3, b8fec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b8f9a:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b8f9c:	0798      	lsls	r0, r3, #30
   b8f9e:	d509      	bpl.n	b8fb4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b8fa0:	89a0      	ldrh	r0, [r4, #12]
   b8fa2:	9203      	str	r2, [sp, #12]
   b8fa4:	2300      	movs	r3, #0
   b8fa6:	f7ff fb05 	bl	b85b4 <hal_ble_gatt_server_set_characteristic_value>
   b8faa:	2800      	cmp	r0, #0
   b8fac:	9a03      	ldr	r2, [sp, #12]
   b8fae:	da03      	bge.n	b8fb8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b8fb0:	b005      	add	sp, #20
   b8fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b8fb4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b8fb8:	6834      	ldr	r4, [r6, #0]
   b8fba:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b8fbc:	06d9      	lsls	r1, r3, #27
   b8fbe:	d509      	bpl.n	b8fd4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b8fc0:	2f01      	cmp	r7, #1
   b8fc2:	d007      	beq.n	b8fd4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b8fc4:	89a0      	ldrh	r0, [r4, #12]
   b8fc6:	2300      	movs	r3, #0
   b8fc8:	4629      	mov	r1, r5
}
   b8fca:	b005      	add	sp, #20
   b8fcc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b8fd0:	f7ff bb22 	b.w	b8618 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b8fd4:	069b      	lsls	r3, r3, #26
   b8fd6:	d5eb      	bpl.n	b8fb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b8fd8:	2f02      	cmp	r7, #2
   b8fda:	d0e9      	beq.n	b8fb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b8fdc:	89a0      	ldrh	r0, [r4, #12]
   b8fde:	2300      	movs	r3, #0
   b8fe0:	4629      	mov	r1, r5
}
   b8fe2:	b005      	add	sp, #20
   b8fe4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b8fe8:	f7ff bb20 	b.w	b862c <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b8fec:	8860      	ldrh	r0, [r4, #2]
   b8fee:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8ff2:	4288      	cmp	r0, r1
   b8ff4:	d01c      	beq.n	b9030 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b8ff6:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b8ff8:	074e      	lsls	r6, r1, #29
   b8ffa:	d501      	bpl.n	b9000 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b8ffc:	2f01      	cmp	r7, #1
   b8ffe:	d104      	bne.n	b900a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b9000:	070b      	lsls	r3, r1, #28
   b9002:	d409      	bmi.n	b9018 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b9004:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b9008:	e7d2      	b.n	b8fb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b900a:	89a1      	ldrh	r1, [r4, #12]
   b900c:	9300      	str	r3, [sp, #0]
   b900e:	4613      	mov	r3, r2
   b9010:	462a      	mov	r2, r5
   b9012:	f7ff fae3 	bl	b85dc <hal_ble_gatt_client_write_without_response>
   b9016:	e7cb      	b.n	b8fb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b9018:	2f02      	cmp	r7, #2
   b901a:	d0f3      	beq.n	b9004 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b901c:	2300      	movs	r3, #0
   b901e:	89a1      	ldrh	r1, [r4, #12]
   b9020:	9300      	str	r3, [sp, #0]
   b9022:	4613      	mov	r3, r2
   b9024:	462a      	mov	r2, r5
   b9026:	f7ff facf 	bl	b85c8 <hal_ble_gatt_client_write_with_response>
   b902a:	e7c1      	b.n	b8fb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b902c:	4802      	ldr	r0, [pc, #8]	; (b9038 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b902e:	e7bf      	b.n	b8fb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b9030:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b9034:	e7bc      	b.n	b8fb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b9036:	bf00      	nop
   b9038:	fffffef2 	.word	0xfffffef2

000b903c <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b903c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b903e:	460c      	mov	r4, r1
   b9040:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b9042:	21f4      	movs	r1, #244	; 0xf4
   b9044:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b9046:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b9048:	f003 f8f0 	bl	bc22c <strnlen>
   b904c:	9b01      	ldr	r3, [sp, #4]
   b904e:	4602      	mov	r2, r0
   b9050:	4621      	mov	r1, r4
   b9052:	4628      	mov	r0, r5
}
   b9054:	b003      	add	sp, #12
   b9056:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b905a:	f7ff bf8f 	b.w	b8f7c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000b9060 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b9060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9064:	2600      	movs	r6, #0
   b9066:	6006      	str	r6, [r0, #0]
   b9068:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b906a:	2028      	movs	r0, #40	; 0x28
   b906c:	460c      	mov	r4, r1
   b906e:	f7fb f812 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b9072:	1e05      	subs	r5, r0, #0
   b9074:	f105 080c 	add.w	r8, r5, #12
   b9078:	d00f      	beq.n	b909a <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b907a:	2301      	movs	r3, #1
   b907c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b9080:	4b08      	ldr	r3, [pc, #32]	; (b90a4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b9082:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b9084:	4640      	mov	r0, r8
   b9086:	f7ff fe55 	bl	b8d34 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b908a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b908c:	622e      	str	r6, [r5, #32]
   b908e:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b9092:	4646      	mov	r6, r8
   b9094:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b9096:	6823      	ldr	r3, [r4, #0]
   b9098:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b909a:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b909e:	4638      	mov	r0, r7
   b90a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b90a4:	000be8b4 	.word	0x000be8b4

000b90a8 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b90a8:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b90aa:	2500      	movs	r5, #0
   b90ac:	6005      	str	r5, [r0, #0]
   b90ae:	4606      	mov	r6, r0
   b90b0:	2030      	movs	r0, #48	; 0x30
   b90b2:	f7fa fff0 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b90b6:	4604      	mov	r4, r0
   b90b8:	b188      	cbz	r0, b90de <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b90ba:	2301      	movs	r3, #1
   b90bc:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b90c0:	4b09      	ldr	r3, [pc, #36]	; (b90e8 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b90c2:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b90c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b90c8:	8183      	strh	r3, [r0, #12]
   b90ca:	300e      	adds	r0, #14
   b90cc:	f7ff fe27 	bl	b8d1e <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b90d0:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b90d4:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b90d8:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b90dc:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b90de:	6074      	str	r4, [r6, #4]
   b90e0:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b90e2:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b90e4:	4630      	mov	r0, r6
   b90e6:	bd70      	pop	{r4, r5, r6, pc}
   b90e8:	000be8d0 	.word	0x000be8d0

000b90ec <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b90ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b90ee:	460d      	mov	r5, r1
   b90f0:	4604      	mov	r4, r0
    WiringBleLock lk;
   b90f2:	a801      	add	r0, sp, #4
   b90f4:	f7ff fdd8 	bl	b8ca8 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b90f8:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b90fa:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b90fe:	6023      	str	r3, [r4, #0]
   b9100:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b9104:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b9106:	a801      	add	r0, sp, #4
   b9108:	f7ff fddc 	bl	b8cc4 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b910c:	4620      	mov	r0, r4
   b910e:	b003      	add	sp, #12
   b9110:	bd30      	pop	{r4, r5, pc}

000b9112 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b9112:	b530      	push	{r4, r5, lr}
   b9114:	4605      	mov	r5, r0
   b9116:	b087      	sub	sp, #28
   b9118:	460c      	mov	r4, r1
    WiringBleLock lk;
   b911a:	a801      	add	r0, sp, #4
   b911c:	f7ff fdc4 	bl	b8ca8 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b9120:	682a      	ldr	r2, [r5, #0]
   b9122:	6823      	ldr	r3, [r4, #0]
   b9124:	8812      	ldrh	r2, [r2, #0]
   b9126:	881b      	ldrh	r3, [r3, #0]
   b9128:	429a      	cmp	r2, r3
   b912a:	d10d      	bne.n	b9148 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b912c:	4629      	mov	r1, r5
   b912e:	a802      	add	r0, sp, #8
   b9130:	f7ff ffdc 	bl	b90ec <_ZNK8particle13BlePeerDevice7addressEv>
   b9134:	4621      	mov	r1, r4
   b9136:	a804      	add	r0, sp, #16
   b9138:	f7ff ffd8 	bl	b90ec <_ZNK8particle13BlePeerDevice7addressEv>
   b913c:	a904      	add	r1, sp, #16
   b913e:	a802      	add	r0, sp, #8
   b9140:	f7ff fdd9 	bl	b8cf6 <_ZNK8particle10BleAddresseqERKS0_>
   b9144:	4604      	mov	r4, r0
   b9146:	b900      	cbnz	r0, b914a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b9148:	2400      	movs	r4, #0
    WiringBleLock lk;
   b914a:	a801      	add	r0, sp, #4
   b914c:	f7ff fdba 	bl	b8cc4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b9150:	4620      	mov	r0, r4
   b9152:	b007      	add	sp, #28
   b9154:	bd30      	pop	{r4, r5, pc}
	...

000b9158 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b9158:	b510      	push	{r4, lr}
   b915a:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b915c:	2064      	movs	r0, #100	; 0x64
   b915e:	f7fa ff9a 	bl	b4096 <_Znwj>
   b9162:	b168      	cbz	r0, b9180 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b9164:	2300      	movs	r3, #0
   b9166:	e9c0 3300 	strd	r3, r3, [r0]
   b916a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b916e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b9172:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b9176:	6203      	str	r3, [r0, #32]
   b9178:	62c3      	str	r3, [r0, #44]	; 0x2c
   b917a:	63c3      	str	r3, [r0, #60]	; 0x3c
   b917c:	64c3      	str	r3, [r0, #76]	; 0x4c
   b917e:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b9180:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b9182:	b920      	cbnz	r0, b918e <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b9184:	4a0a      	ldr	r2, [pc, #40]	; (b91b0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b9186:	490b      	ldr	r1, [pc, #44]	; (b91b4 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b9188:	200a      	movs	r0, #10
   b918a:	f7ff fba9 	bl	b88e0 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b918e:	2000      	movs	r0, #0
   b9190:	f7ff f9dc 	bl	b854c <hal_ble_stack_init>
   b9194:	b120      	cbz	r0, b91a0 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b9196:	4a06      	ldr	r2, [pc, #24]	; (b91b0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b9198:	4907      	ldr	r1, [pc, #28]	; (b91b8 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b919a:	200a      	movs	r0, #10
   b919c:	f7ff fba0 	bl	b88e0 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b91a0:	6821      	ldr	r1, [r4, #0]
   b91a2:	4806      	ldr	r0, [pc, #24]	; (b91bc <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b91a4:	2200      	movs	r2, #0
   b91a6:	f7ff fa2d 	bl	b8604 <hal_ble_set_callback_on_periph_link_events>
}
   b91aa:	4620      	mov	r0, r4
   b91ac:	bd10      	pop	{r4, pc}
   b91ae:	bf00      	nop
   b91b0:	000b8681 	.word	0x000b8681
   b91b4:	000be744 	.word	0x000be744
   b91b8:	000be782 	.word	0x000be782
   b91bc:	000b9741 	.word	0x000b9741

000b91c0 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b91c0:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b91c2:	4c0a      	ldr	r4, [pc, #40]	; (b91ec <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b91c4:	7823      	ldrb	r3, [r4, #0]
   b91c6:	f3bf 8f5b 	dmb	ish
   b91ca:	07db      	lsls	r3, r3, #31
   b91cc:	d40c      	bmi.n	b91e8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b91ce:	4620      	mov	r0, r4
   b91d0:	f7fa ff69 	bl	b40a6 <__cxa_guard_acquire>
   b91d4:	b140      	cbz	r0, b91e8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b91d6:	4806      	ldr	r0, [pc, #24]	; (b91f0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b91d8:	f7ff ffbe 	bl	b9158 <_ZN8particle14BleLocalDeviceC1Ev>
   b91dc:	4620      	mov	r0, r4
   b91de:	f7fa ff67 	bl	b40b0 <__cxa_guard_release>
   b91e2:	4804      	ldr	r0, [pc, #16]	; (b91f4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b91e4:	f002 ff7c 	bl	bc0e0 <atexit>
    return instance;
}
   b91e8:	4801      	ldr	r0, [pc, #4]	; (b91f0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b91ea:	bd10      	pop	{r4, pc}
   b91ec:	2003e6b8 	.word	0x2003e6b8
   b91f0:	2003e6c4 	.word	0x2003e6c4
   b91f4:	000b940d 	.word	0x000b940d

000b91f8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b91f8:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b91fa:	6803      	ldr	r3, [r0, #0]
   b91fc:	3b09      	subs	r3, #9
   b91fe:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b9200:	b08d      	sub	sp, #52	; 0x34
   b9202:	4604      	mov	r4, r0
   b9204:	460d      	mov	r5, r1
    switch (event->type) {
   b9206:	d811      	bhi.n	b922c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b9208:	f7ff ffda 	bl	b91c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b920c:	88a1      	ldrh	r1, [r4, #4]
   b920e:	6800      	ldr	r0, [r0, #0]
   b9210:	f7ff fea2 	bl	b8f58 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b9214:	4603      	mov	r3, r0
   b9216:	b958      	cbnz	r0, b9230 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b9218:	2220      	movs	r2, #32
   b921a:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b921e:	4a0b      	ldr	r2, [pc, #44]	; (b924c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b9220:	9200      	str	r2, [sp, #0]
   b9222:	490b      	ldr	r1, [pc, #44]	; (b9250 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b9224:	aa04      	add	r2, sp, #16
   b9226:	2032      	movs	r0, #50	; 0x32
   b9228:	f7ff fb62 	bl	b88f0 <log_message>
}
   b922c:	b00d      	add	sp, #52	; 0x34
   b922e:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b9230:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b9232:	2a00      	cmp	r2, #0
   b9234:	d0fa      	beq.n	b922c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b9236:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b923a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b923e:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b9242:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b9244:	aa04      	add	r2, sp, #16
   b9246:	a903      	add	r1, sp, #12
   b9248:	47a0      	blx	r4
}
   b924a:	e7ef      	b.n	b922c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b924c:	000be7c4 	.word	0x000be7c4
   b9250:	000be75b 	.word	0x000be75b

000b9254 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b9254:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b9256:	2000      	movs	r0, #0
   b9258:	f7ff f978 	bl	b854c <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b925c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b9260:	bd08      	pop	{r3, pc}

000b9262 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b9262:	b919      	cbnz	r1, b926c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b9264:	460a      	mov	r2, r1
   b9266:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b9268:	f7ff b978 	b.w	b855c <hal_ble_gap_set_advertising_data>
   b926c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9270:	2200      	movs	r2, #0
   b9272:	e7f9      	b.n	b9268 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b9274 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b9274:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b9276:	1e14      	subs	r4, r2, #0
   b9278:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b927a:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b927c:	db02      	blt.n	b9284 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b927e:	1862      	adds	r2, r4, r1
   b9280:	429a      	cmp	r2, r3
   b9282:	dd00      	ble.n	b9286 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b9284:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b9286:	682a      	ldr	r2, [r5, #0]
   b9288:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b928a:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b928c:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b928e:	1a52      	subs	r2, r2, r1
   b9290:	f002 ff4e 	bl	bc130 <memmove>
    size_ -= n;
   b9294:	686a      	ldr	r2, [r5, #4]
   b9296:	1b12      	subs	r2, r2, r4
   b9298:	606a      	str	r2, [r5, #4]
}
   b929a:	bd38      	pop	{r3, r4, r5, pc}

000b929c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b929c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b929e:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b92a0:	4604      	mov	r4, r0
   b92a2:	460d      	mov	r5, r1
   b92a4:	ab01      	add	r3, sp, #4
   b92a6:	e9d0 0100 	ldrd	r0, r1, [r0]
   b92aa:	f7ff fc73 	bl	b8b94 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b92ae:	4602      	mov	r2, r0
   b92b0:	b138      	cbz	r0, b92c2 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b92b2:	9901      	ldr	r1, [sp, #4]
   b92b4:	4620      	mov	r0, r4
   b92b6:	f7ff ffdd 	bl	b9274 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b92ba:	4629      	mov	r1, r5
   b92bc:	4620      	mov	r0, r4
   b92be:	f7ff ffed 	bl	b929c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b92c2:	b003      	add	sp, #12
   b92c4:	bd30      	pop	{r4, r5, pc}

000b92c6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b92c6:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b92c8:	460c      	mov	r4, r1
   b92ca:	b929      	cbnz	r1, b92d8 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b92cc:	460a      	mov	r2, r1
   b92ce:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b92d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b92d4:	f7ff b94a 	b.w	b856c <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b92d8:	2101      	movs	r1, #1
   b92da:	4620      	mov	r0, r4
   b92dc:	f7ff ffde 	bl	b929c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b92e0:	e9d4 0100 	ldrd	r0, r1, [r4]
   b92e4:	2200      	movs	r2, #0
   b92e6:	e7f3      	b.n	b92d0 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b92e8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b92e8:	b538      	push	{r3, r4, r5, lr}
   b92ea:	4604      	mov	r4, r0
   b92ec:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b92ee:	f7ff ffb8 	bl	b9262 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b92f2:	2800      	cmp	r0, #0
   b92f4:	db0a      	blt.n	b930c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b92f6:	4629      	mov	r1, r5
   b92f8:	4620      	mov	r0, r4
   b92fa:	f7ff ffe4 	bl	b92c6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b92fe:	2800      	cmp	r0, #0
   b9300:	db04      	blt.n	b930c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b9302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b9306:	2000      	movs	r0, #0
   b9308:	f7ff b938 	b.w	b857c <hal_ble_gap_start_advertising>
}
   b930c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b9310 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b9310:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b9312:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b9314:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b9316:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9318:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b931a:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b931c:	f7fa febb 	bl	b4096 <_Znwj>
   b9320:	b118      	cbz	r0, b932a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b9322:	682b      	ldr	r3, [r5, #0]
   b9324:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b9326:	686b      	ldr	r3, [r5, #4]
   b9328:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b932a:	4b03      	ldr	r3, [pc, #12]	; (b9338 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b932c:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b932e:	4b03      	ldr	r3, [pc, #12]	; (b933c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9330:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b9332:	60a3      	str	r3, [r4, #8]
      }
   b9334:	4620      	mov	r0, r4
   b9336:	bd38      	pop	{r3, r4, r5, pc}
   b9338:	000b8bd5 	.word	0x000b8bd5
   b933c:	000b8bed 	.word	0x000b8bed

000b9340 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b9340:	680b      	ldr	r3, [r1, #0]
   b9342:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b9344:	b113      	cbz	r3, b934c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b9346:	685a      	ldr	r2, [r3, #4]
   b9348:	3201      	adds	r2, #1
   b934a:	605a      	str	r2, [r3, #4]
      }
   b934c:	4770      	bx	lr

000b934e <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b934e:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9350:	f851 3b04 	ldr.w	r3, [r1], #4
   b9354:	4604      	mov	r4, r0
   b9356:	f840 3b04 	str.w	r3, [r0], #4
   b935a:	f7ff fff1 	bl	b9340 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b935e:	6823      	ldr	r3, [r4, #0]
   b9360:	b90b      	cbnz	r3, b9366 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b9362:	f7ff fc2d 	bl	b8bc0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b9366:	4620      	mov	r0, r4
   b9368:	bd10      	pop	{r4, pc}

000b936a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b936a:	b510      	push	{r4, lr}
   b936c:	f851 3b04 	ldr.w	r3, [r1], #4
   b9370:	4604      	mov	r4, r0
   b9372:	f840 3b04 	str.w	r3, [r0], #4
   b9376:	f7ff ffe3 	bl	b9340 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b937a:	4620      	mov	r0, r4
   b937c:	bd10      	pop	{r4, pc}

000b937e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b937e:	b510      	push	{r4, lr}
   b9380:	f851 3b04 	ldr.w	r3, [r1], #4
   b9384:	4604      	mov	r4, r0
   b9386:	f840 3b04 	str.w	r3, [r0], #4
   b938a:	f7ff ffd9 	bl	b9340 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b938e:	4620      	mov	r0, r4
   b9390:	bd10      	pop	{r4, pc}

000b9392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b9392:	b510      	push	{r4, lr}
   b9394:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b9396:	6800      	ldr	r0, [r0, #0]
   b9398:	b108      	cbz	r0, b939e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b939a:	f7ff fc5b 	bl	b8c54 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b939e:	4620      	mov	r0, r4
   b93a0:	bd10      	pop	{r4, pc}

000b93a2 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b93a2:	b510      	push	{r4, lr}
   b93a4:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b93a6:	3004      	adds	r0, #4
   b93a8:	f7ff fff3 	bl	b9392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b93ac:	4620      	mov	r0, r4
   b93ae:	bd10      	pop	{r4, pc}

000b93b0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b93b0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b93b2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b93b6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b93b8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b93bc:	42ae      	cmp	r6, r5
   b93be:	d004      	beq.n	b93ca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b93c0:	1d28      	adds	r0, r5, #4
   b93c2:	f7ff ffe6 	bl	b9392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b93c6:	3508      	adds	r5, #8
   b93c8:	e7f8      	b.n	b93bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b93ca:	6820      	ldr	r0, [r4, #0]
   b93cc:	f7ff fb44 	bl	b8a58 <free>
}
   b93d0:	4620      	mov	r0, r4
   b93d2:	bd70      	pop	{r4, r5, r6, pc}

000b93d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b93d4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b93d6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b93da:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b93dc:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b93e0:	42ae      	cmp	r6, r5
   b93e2:	d004      	beq.n	b93ee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b93e4:	1d28      	adds	r0, r5, #4
   b93e6:	f7ff ffd4 	bl	b9392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b93ea:	3508      	adds	r5, #8
   b93ec:	e7f8      	b.n	b93e0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b93ee:	6820      	ldr	r0, [r4, #0]
   b93f0:	f7ff fb32 	bl	b8a58 <free>
}
   b93f4:	4620      	mov	r0, r4
   b93f6:	bd70      	pop	{r4, r5, r6, pc}

000b93f8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b93f8:	b510      	push	{r4, lr}
   b93fa:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b93fc:	3024      	adds	r0, #36	; 0x24
   b93fe:	f7ff ffe9 	bl	b93d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b9402:	f104 0018 	add.w	r0, r4, #24
   b9406:	f7ff ffd3 	bl	b93b0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b940a:	bd10      	pop	{r4, pc}

000b940c <__tcf_0>:
    static BleLocalDevice instance;
   b940c:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b940e:	4b17      	ldr	r3, [pc, #92]	; (b946c <__tcf_0+0x60>)
   b9410:	681c      	ldr	r4, [r3, #0]
   b9412:	b354      	cbz	r4, b946a <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b9414:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b9418:	f7ff fc08 	bl	b8c2c <_ZNSt14_Function_baseD1Ev>
   b941c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b9420:	f7ff fc04 	bl	b8c2c <_ZNSt14_Function_baseD1Ev>
   b9424:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b9428:	f7ff fc00 	bl	b8c2c <_ZNSt14_Function_baseD1Ev>
   b942c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b9430:	f7ff fbfc 	bl	b8c2c <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b9434:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b9438:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b943c:	42ae      	cmp	r6, r5
   b943e:	d004      	beq.n	b944a <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b9440:	1d28      	adds	r0, r5, #4
   b9442:	f7ff ffa6 	bl	b9392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9446:	3508      	adds	r5, #8
   b9448:	e7f8      	b.n	b943c <__tcf_0+0x30>
    ::free(ptr);
   b944a:	69a0      	ldr	r0, [r4, #24]
   b944c:	f7ff fb04 	bl	b8a58 <free>
    ~BleLocalDeviceImpl() = default;
   b9450:	f104 000c 	add.w	r0, r4, #12
   b9454:	f7ff ffbe 	bl	b93d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b9458:	4620      	mov	r0, r4
   b945a:	f7ff ffa9 	bl	b93b0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b945e:	4620      	mov	r0, r4
   b9460:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b9462:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9466:	f7fa be1c 	b.w	b40a2 <_ZdlPvj>
   b946a:	bd70      	pop	{r4, r5, r6, pc}
   b946c:	2003e6c4 	.word	0x2003e6c4

000b9470 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b9470:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b9472:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b9474:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b9478:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b947c:	6803      	ldr	r3, [r0, #0]
   b947e:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b9480:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b9482:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b9484:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b9486:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b9488:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b948a:	f7ff ff82 	bl	b9392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b948e:	b002      	add	sp, #8
   b9490:	bd10      	pop	{r4, pc}

000b9492 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b9492:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b9494:	b510      	push	{r4, lr}
      if (_M_empty())
   b9496:	b90a      	cbnz	r2, b949c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b9498:	f001 fe5d 	bl	bb156 <_ZSt25__throw_bad_function_callv>
    }
   b949c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b94a0:	68c3      	ldr	r3, [r0, #12]
   b94a2:	4718      	bx	r3

000b94a4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b94a4:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b94a6:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b94a8:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b94aa:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b94ac:	dd03      	ble.n	b94b6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b94ae:	f7ff fadb 	bl	b8a68 <realloc>
            if (!d) {
   b94b2:	b918      	cbnz	r0, b94bc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b94b4:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b94b6:	f7ff facf 	bl	b8a58 <free>
        T* d = nullptr;
   b94ba:	2000      	movs	r0, #0
        data_ = d;
   b94bc:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b94be:	60a5      	str	r5, [r4, #8]
        return true;
   b94c0:	2001      	movs	r0, #1
   b94c2:	e7f7      	b.n	b94b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b94c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b94c4:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b94c6:	6883      	ldr	r3, [r0, #8]
   b94c8:	428b      	cmp	r3, r1
   b94ca:	da02      	bge.n	b94d2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b94cc:	f7ff ffea 	bl	b94a4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b94d0:	bd08      	pop	{r3, pc}
    return true;
   b94d2:	2001      	movs	r0, #1
   b94d4:	e7fc      	b.n	b94d0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b94d6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b94d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b94da:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b94dc:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b94de:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b94e0:	4419      	add	r1, r3
   b94e2:	6883      	ldr	r3, [r0, #8]
   b94e4:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b94e6:	4604      	mov	r4, r0
   b94e8:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b94ea:	dc12      	bgt.n	b9512 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b94ec:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b94ee:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b94f0:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b94f2:	1bd2      	subs	r2, r2, r7
   b94f4:	4631      	mov	r1, r6
   b94f6:	1970      	adds	r0, r6, r5
   b94f8:	f002 fe1a 	bl	bc130 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b94fc:	462a      	mov	r2, r5
   b94fe:	4641      	mov	r1, r8
   b9500:	4630      	mov	r0, r6
   b9502:	f002 fe07 	bl	bc114 <memcpy>
    size_ += n;
   b9506:	6863      	ldr	r3, [r4, #4]
   b9508:	442b      	add	r3, r5
   b950a:	6063      	str	r3, [r4, #4]
    return true;
   b950c:	2001      	movs	r0, #1
}
   b950e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b9512:	f7ff ffc7 	bl	b94a4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b9516:	2800      	cmp	r0, #0
   b9518:	d1e8      	bne.n	b94ec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b951a:	e7f8      	b.n	b950e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b951c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b951c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b951e:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9520:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b9524:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b9526:	4604      	mov	r4, r0
   b9528:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b952a:	da0b      	bge.n	b9544 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b952c:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b952e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9530:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9532:	1b52      	subs	r2, r2, r5
   b9534:	1c48      	adds	r0, r1, #1
   b9536:	f002 fdfb 	bl	bc130 <memmove>
    new(p) T(std::move(value));
   b953a:	557e      	strb	r6, [r7, r5]
    ++size_;
   b953c:	6863      	ldr	r3, [r4, #4]
   b953e:	3301      	adds	r3, #1
   b9540:	6063      	str	r3, [r4, #4]
}
   b9542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9544:	3101      	adds	r1, #1
   b9546:	f7ff ffad 	bl	b94a4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b954a:	2800      	cmp	r0, #0
   b954c:	d1ee      	bne.n	b952c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b954e:	e7f8      	b.n	b9542 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b9550 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9550:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b9552:	6841      	ldr	r1, [r0, #4]
   b9554:	f7ff bfe2 	b.w	b951c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b9558 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b9558:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b955c:	4604      	mov	r4, r0
   b955e:	461d      	mov	r5, r3
   b9560:	460f      	mov	r7, r1
   b9562:	ab01      	add	r3, sp, #4
   b9564:	4690      	mov	r8, r2
   b9566:	460a      	mov	r2, r1
   b9568:	e9d0 0100 	ldrd	r0, r1, [r0]
   b956c:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b9570:	f7ff fb10 	bl	b8b94 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b9574:	1cae      	adds	r6, r5, #2
   b9576:	6863      	ldr	r3, [r4, #4]
   b9578:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b957a:	f1b9 0f00 	cmp.w	r9, #0
   b957e:	d126      	bne.n	b95ce <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b9580:	b328      	cbz	r0, b95ce <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b9582:	4433      	add	r3, r6
   b9584:	1a1b      	subs	r3, r3, r0
   b9586:	2bff      	cmp	r3, #255	; 0xff
   b9588:	d809      	bhi.n	b959e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b958a:	9901      	ldr	r1, [sp, #4]
   b958c:	4620      	mov	r0, r4
   b958e:	f7ff fe71 	bl	b9274 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b9592:	6861      	ldr	r1, [r4, #4]
   b9594:	4620      	mov	r0, r4
   b9596:	4431      	add	r1, r6
   b9598:	f7ff ff94 	bl	b94c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b959c:	b918      	cbnz	r0, b95a6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b959e:	6860      	ldr	r0, [r4, #4]
}
   b95a0:	b003      	add	sp, #12
   b95a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b95a6:	1c6a      	adds	r2, r5, #1
   b95a8:	9901      	ldr	r1, [sp, #4]
   b95aa:	b2d2      	uxtb	r2, r2
   b95ac:	4620      	mov	r0, r4
   b95ae:	f7ff ffb5 	bl	b951c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b95b2:	9901      	ldr	r1, [sp, #4]
   b95b4:	463a      	mov	r2, r7
   b95b6:	3101      	adds	r1, #1
   b95b8:	4620      	mov	r0, r4
   b95ba:	f7ff ffaf 	bl	b951c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b95be:	9901      	ldr	r1, [sp, #4]
   b95c0:	462b      	mov	r3, r5
   b95c2:	4642      	mov	r2, r8
   b95c4:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b95c6:	4620      	mov	r0, r4
   b95c8:	f7ff ff85 	bl	b94d6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b95cc:	e7e7      	b.n	b959e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b95ce:	18f1      	adds	r1, r6, r3
   b95d0:	29ff      	cmp	r1, #255	; 0xff
   b95d2:	d8e4      	bhi.n	b959e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b95d4:	4620      	mov	r0, r4
   b95d6:	f7ff ff75 	bl	b94c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b95da:	2800      	cmp	r0, #0
   b95dc:	d0df      	beq.n	b959e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b95de:	1c69      	adds	r1, r5, #1
   b95e0:	b2c9      	uxtb	r1, r1
   b95e2:	4620      	mov	r0, r4
   b95e4:	f7ff ffb4 	bl	b9550 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b95e8:	4639      	mov	r1, r7
   b95ea:	4620      	mov	r0, r4
   b95ec:	f7ff ffb0 	bl	b9550 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b95f0:	6861      	ldr	r1, [r4, #4]
   b95f2:	462b      	mov	r3, r5
   b95f4:	4642      	mov	r2, r8
   b95f6:	e7e6      	b.n	b95c6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b95f8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b95f8:	b430      	push	{r4, r5}
   b95fa:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b95fe:	b11a      	cbz	r2, b9608 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b9600:	9502      	str	r5, [sp, #8]
}
   b9602:	bc30      	pop	{r4, r5}
   b9604:	f7ff bfa8 	b.w	b9558 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b9608:	6840      	ldr	r0, [r0, #4]
}
   b960a:	bc30      	pop	{r4, r5}
   b960c:	4770      	bx	lr

000b960e <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b960e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b9610:	2300      	movs	r3, #0
   b9612:	e9c0 3300 	strd	r3, r3, [r0]
   b9616:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b9618:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b961a:	9300      	str	r3, [sp, #0]
   b961c:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b961e:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b9622:	4619      	mov	r1, r3
   b9624:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b9628:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b962a:	f7ff ffe5 	bl	b95f8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b962e:	4620      	mov	r0, r4
   b9630:	b004      	add	sp, #16
   b9632:	bd10      	pop	{r4, pc}

000b9634 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b9634:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9638:	4604      	mov	r4, r0
   b963a:	460d      	mov	r5, r1
   b963c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b963e:	d914      	bls.n	b966a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b9640:	4290      	cmp	r0, r2
   b9642:	d213      	bcs.n	b966c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b9644:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b9648:	1a75      	subs	r5, r6, r1
   b964a:	f1a1 0708 	sub.w	r7, r1, #8
   b964e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9650:	42b7      	cmp	r7, r6
   b9652:	d018      	beq.n	b9686 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b9654:	b11c      	cbz	r4, b965e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b9656:	4631      	mov	r1, r6
   b9658:	4620      	mov	r0, r4
   b965a:	f7ff fe90 	bl	b937e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b965e:	1d30      	adds	r0, r6, #4
   b9660:	f7ff fe97 	bl	b9392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b9664:	3e08      	subs	r6, #8
   b9666:	3c08      	subs	r4, #8
   b9668:	e7f2      	b.n	b9650 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b966a:	d00c      	beq.n	b9686 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b966c:	42b5      	cmp	r5, r6
   b966e:	d00a      	beq.n	b9686 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b9670:	b11c      	cbz	r4, b967a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b9672:	4629      	mov	r1, r5
   b9674:	4620      	mov	r0, r4
   b9676:	f7ff fe82 	bl	b937e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b967a:	1d28      	adds	r0, r5, #4
   b967c:	f7ff fe89 	bl	b9392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b9680:	3508      	adds	r5, #8
   b9682:	3408      	adds	r4, #8
   b9684:	e7f2      	b.n	b966c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b9686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9688 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b968a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b968c:	6846      	ldr	r6, [r0, #4]
   b968e:	4668      	mov	r0, sp
   b9690:	f7ff fe75 	bl	b937e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9694:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b9698:	429f      	cmp	r7, r3
   b969a:	db12      	blt.n	b96c2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b969c:	3701      	adds	r7, #1
        if (n > 0) {
   b969e:	2f00      	cmp	r7, #0
   b96a0:	dd29      	ble.n	b96f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b96a2:	00f8      	lsls	r0, r7, #3
   b96a4:	f7ff f9d0 	bl	b8a48 <malloc>
            if (!d) {
   b96a8:	4605      	mov	r5, r0
   b96aa:	b1f0      	cbz	r0, b96ea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b96ac:	e9d4 1200 	ldrd	r1, r2, [r4]
   b96b0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b96b4:	f7ff ffbe 	bl	b9634 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b96b8:	6820      	ldr	r0, [r4, #0]
   b96ba:	f7ff f9cd 	bl	b8a58 <free>
        data_ = d;
   b96be:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b96c0:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b96c2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b96c4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b96c6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b96ca:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b96ce:	4631      	mov	r1, r6
   b96d0:	f106 0008 	add.w	r0, r6, #8
   b96d4:	f7ff ffae 	bl	b9634 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b96d8:	b11e      	cbz	r6, b96e2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b96da:	4669      	mov	r1, sp
   b96dc:	4630      	mov	r0, r6
   b96de:	f7ff fe4e 	bl	b937e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b96e2:	6863      	ldr	r3, [r4, #4]
   b96e4:	3301      	adds	r3, #1
   b96e6:	6063      	str	r3, [r4, #4]
    return true;
   b96e8:	2501      	movs	r5, #1
   b96ea:	a801      	add	r0, sp, #4
   b96ec:	f7ff fe51 	bl	b9392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b96f0:	4628      	mov	r0, r5
   b96f2:	b003      	add	sp, #12
   b96f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b96f6:	2500      	movs	r5, #0
   b96f8:	e7de      	b.n	b96b8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b96fa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b96fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b96fc:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b9700:	4605      	mov	r5, r0
   b9702:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b9704:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b9708:	42a6      	cmp	r6, r4
   b970a:	d005      	beq.n	b9718 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b970c:	4639      	mov	r1, r7
   b970e:	4620      	mov	r0, r4
   b9710:	f7ff fcff 	bl	b9112 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b9714:	b108      	cbz	r0, b971a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b9716:	b914      	cbnz	r4, b971e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b9718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b971a:	3408      	adds	r4, #8
   b971c:	e7f4      	b.n	b9708 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b971e:	1d20      	adds	r0, r4, #4
   b9720:	f7ff fe37 	bl	b9392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b9724:	e9d5 3200 	ldrd	r3, r2, [r5]
   b9728:	f104 0108 	add.w	r1, r4, #8
   b972c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b9730:	4620      	mov	r0, r4
   b9732:	f7ff ff7f 	bl	b9634 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b9736:	686b      	ldr	r3, [r5, #4]
   b9738:	3b01      	subs	r3, #1
   b973a:	606b      	str	r3, [r5, #4]
    return true;
   b973c:	e7ec      	b.n	b9718 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b9740 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b9740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9744:	4605      	mov	r5, r0
   b9746:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b9748:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b974a:	460c      	mov	r4, r1
        WiringBleLock lk;
   b974c:	f7ff faac 	bl	b8ca8 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b9750:	682e      	ldr	r6, [r5, #0]
   b9752:	1ef3      	subs	r3, r6, #3
   b9754:	2b0d      	cmp	r3, #13
   b9756:	d83c      	bhi.n	b97d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b9758:	e8df f013 	tbh	[pc, r3, lsl #1]
   b975c:	0053000e 	.word	0x0053000e
   b9760:	00d1003b 	.word	0x00d1003b
   b9764:	003b003b 	.word	0x003b003b
   b9768:	003b003b 	.word	0x003b003b
   b976c:	009b003b 	.word	0x009b003b
   b9770:	009b009b 	.word	0x009b009b
   b9774:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b9778:	a804      	add	r0, sp, #16
   b977a:	f7ff fc95 	bl	b90a8 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b977e:	9b04      	ldr	r3, [sp, #16]
   b9780:	89aa      	ldrh	r2, [r5, #12]
   b9782:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b9784:	6869      	ldr	r1, [r5, #4]
   b9786:	9804      	ldr	r0, [sp, #16]
   b9788:	3108      	adds	r1, #8
   b978a:	3002      	adds	r0, #2
   b978c:	f7ff faa6 	bl	b8cdc <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b9790:	a904      	add	r1, sp, #16
   b9792:	a806      	add	r0, sp, #24
   b9794:	f7ff fdf3 	bl	b937e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b9798:	a906      	add	r1, sp, #24
   b979a:	f104 0018 	add.w	r0, r4, #24
   b979e:	f7ff ff73 	bl	b9688 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b97a2:	4605      	mov	r5, r0
   b97a4:	a807      	add	r0, sp, #28
   b97a6:	f7ff fdf4 	bl	b9392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b97aa:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b97ac:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b97ae:	b9b5      	cbnz	r5, b97de <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b97b0:	4b5d      	ldr	r3, [pc, #372]	; (b9928 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b97b2:	495e      	ldr	r1, [pc, #376]	; (b992c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b97b4:	9300      	str	r3, [sp, #0]
   b97b6:	2032      	movs	r0, #50	; 0x32
   b97b8:	462b      	mov	r3, r5
   b97ba:	aa06      	add	r2, sp, #24
   b97bc:	9507      	str	r5, [sp, #28]
   b97be:	f7ff f897 	bl	b88f0 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b97c2:	9b04      	ldr	r3, [sp, #16]
   b97c4:	4629      	mov	r1, r5
   b97c6:	8818      	ldrh	r0, [r3, #0]
   b97c8:	f7fe fee0 	bl	b858c <hal_ble_gap_disconnect>
   b97cc:	a805      	add	r0, sp, #20
   b97ce:	f7ff fde0 	bl	b9392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b97d2:	a803      	add	r0, sp, #12
   b97d4:	f7ff fa76 	bl	b8cc4 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b97d8:	b00e      	add	sp, #56	; 0x38
   b97da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b97de:	4a54      	ldr	r2, [pc, #336]	; (b9930 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b97e0:	9200      	str	r2, [sp, #0]
   b97e2:	2300      	movs	r3, #0
   b97e4:	4951      	ldr	r1, [pc, #324]	; (b992c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b97e6:	9307      	str	r3, [sp, #28]
   b97e8:	aa06      	add	r2, sp, #24
   b97ea:	2001      	movs	r0, #1
   b97ec:	f7ff f880 	bl	b88f0 <log_message>
                if (impl->connectedCallback_) {
   b97f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b97f2:	2b00      	cmp	r3, #0
   b97f4:	d0ea      	beq.n	b97cc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b97f6:	a904      	add	r1, sp, #16
   b97f8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b97fc:	f7ff fe49 	bl	b9492 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b9800:	e7e4      	b.n	b97cc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b9802:	89a9      	ldrh	r1, [r5, #12]
   b9804:	4620      	mov	r0, r4
   b9806:	f7ff fba7 	bl	b8f58 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b980a:	4606      	mov	r6, r0
   b980c:	2800      	cmp	r0, #0
   b980e:	d0e0      	beq.n	b97d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b9810:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b9812:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b9816:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b981a:	8029      	strh	r1, [r5, #0]
   b981c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b9820:	429a      	cmp	r2, r3
   b9822:	d003      	beq.n	b982c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b9824:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b9828:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b982a:	e7f9      	b.n	b9820 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b982c:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b9830:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b9834:	45b8      	cmp	r8, r7
   b9836:	d004      	beq.n	b9842 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b9838:	1d38      	adds	r0, r7, #4
   b983a:	f7ff fdaa 	bl	b9392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b983e:	3708      	adds	r7, #8
   b9840:	e7f8      	b.n	b9834 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b9842:	2300      	movs	r3, #0
   b9844:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b9846:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b984a:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b984e:	45b8      	cmp	r8, r7
   b9850:	d004      	beq.n	b985c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b9852:	1d38      	adds	r0, r7, #4
   b9854:	f7ff fd9d 	bl	b9392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9858:	3708      	adds	r7, #8
   b985a:	e7f8      	b.n	b984e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b985c:	2300      	movs	r3, #0
   b985e:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b9860:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b9862:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b9864:	b123      	cbz	r3, b9870 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b9866:	4631      	mov	r1, r6
   b9868:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b986c:	f7ff fe11 	bl	b9492 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b9870:	2300      	movs	r3, #0
   b9872:	2220      	movs	r2, #32
   b9874:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b9878:	4a2e      	ldr	r2, [pc, #184]	; (b9934 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b987a:	9200      	str	r2, [sp, #0]
   b987c:	492b      	ldr	r1, [pc, #172]	; (b992c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b987e:	aa06      	add	r2, sp, #24
   b9880:	2001      	movs	r0, #1
   b9882:	f7ff f835 	bl	b88f0 <log_message>
                    impl->peers_.removeOne(*peer);
   b9886:	4631      	mov	r1, r6
   b9888:	f104 0018 	add.w	r0, r4, #24
   b988c:	f7ff ff35 	bl	b96fa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b9890:	e79f      	b.n	b97d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b9892:	89a9      	ldrh	r1, [r5, #12]
   b9894:	4620      	mov	r0, r4
   b9896:	f7ff fb5f 	bl	b8f58 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b989a:	2800      	cmp	r0, #0
   b989c:	d099      	beq.n	b97d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b989e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b98a0:	2b00      	cmp	r3, #0
   b98a2:	d096      	beq.n	b97d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b98a4:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b98a6:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b98a8:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b98ac:	d001      	beq.n	b98b2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b98ae:	2e10      	cmp	r6, #16
   b98b0:	d117      	bne.n	b98e2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b98b2:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b98b4:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b98b6:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b98b8:	2506      	movs	r5, #6
                        };
   b98ba:	f88d 3015 	strb.w	r3, [sp, #21]
   b98be:	9104      	str	r1, [sp, #16]
   b98c0:	f88d 2014 	strb.w	r2, [sp, #20]
   b98c4:	9006      	str	r0, [sp, #24]
   b98c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b98ca:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b98cc:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b98d0:	9508      	str	r5, [sp, #32]
   b98d2:	e883 0003 	stmia.w	r3, {r0, r1}
   b98d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b98d8:	a906      	add	r1, sp, #24
   b98da:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b98de:	4798      	blx	r3
   b98e0:	e777      	b.n	b97d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b98e2:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b98e4:	bf01      	itttt	eq
   b98e6:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b98e8:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b98ea:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b98ee:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b98f0:	bf0f      	iteee	eq
   b98f2:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b98f6:	461a      	movne	r2, r3
   b98f8:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b98fa:	461d      	movne	r5, r3
   b98fc:	e7dd      	b.n	b98ba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b98fe:	89a9      	ldrh	r1, [r5, #12]
   b9900:	4620      	mov	r0, r4
   b9902:	f7ff fb29 	bl	b8f58 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b9906:	4601      	mov	r1, r0
   b9908:	2800      	cmp	r0, #0
   b990a:	f43f af62 	beq.w	b97d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b990e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b9910:	2b00      	cmp	r3, #0
   b9912:	f43f af5e 	beq.w	b97d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b9916:	686b      	ldr	r3, [r5, #4]
   b9918:	9306      	str	r3, [sp, #24]
   b991a:	aa06      	add	r2, sp, #24
   b991c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b991e:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b9922:	4798      	blx	r3
   b9924:	e755      	b.n	b97d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b9926:	bf00      	nop
   b9928:	000be7dc 	.word	0x000be7dc
   b992c:	000be75b 	.word	0x000be75b
   b9930:	000be802 	.word	0x000be802
   b9934:	000be81f 	.word	0x000be81f

000b9938 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b9938:	b513      	push	{r0, r1, r4, lr}
   b993a:	460b      	mov	r3, r1
   b993c:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b993e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b9942:	466c      	mov	r4, sp
   b9944:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b9948:	e893 0003 	ldmia.w	r3, {r0, r1}
   b994c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b9950:	e894 0003 	ldmia.w	r4, {r0, r1}
   b9954:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b9958:	b002      	add	sp, #8
   b995a:	bd10      	pop	{r4, pc}

000b995c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b995c:	b538      	push	{r3, r4, r5, lr}
   b995e:	4605      	mov	r5, r0
   b9960:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b9962:	f7ff ffe9 	bl	b9938 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9966:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b9968:	68a2      	ldr	r2, [r4, #8]
   b996a:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b996c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b996e:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b9970:	68e2      	ldr	r2, [r4, #12]
   b9972:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b9974:	60e3      	str	r3, [r4, #12]
      }
   b9976:	bd38      	pop	{r3, r4, r5, pc}

000b9978 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b9978:	b570      	push	{r4, r5, r6, lr}
   b997a:	4604      	mov	r4, r0
   b997c:	b08c      	sub	sp, #48	; 0x30
   b997e:	460e      	mov	r6, r1
   b9980:	9201      	str	r2, [sp, #4]
   b9982:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b9984:	f7ff fac8 	bl	b8f18 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b9988:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b998a:	9901      	ldr	r1, [sp, #4]
   b998c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b9990:	f000 fd8b 	bl	ba4aa <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b9994:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b9998:	b1cd      	cbz	r5, b99ce <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b999a:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b999c:	9502      	str	r5, [sp, #8]
   b999e:	a902      	add	r1, sp, #8
   b99a0:	a804      	add	r0, sp, #16
   b99a2:	9303      	str	r3, [sp, #12]
   b99a4:	f7ff fcb4 	bl	b9310 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b99a8:	2300      	movs	r3, #0
	__x.swap(*this);
   b99aa:	a908      	add	r1, sp, #32
   b99ac:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b99ae:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b99b0:	f7ff ffd4 	bl	b995c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b99b4:	4631      	mov	r1, r6
   b99b6:	a808      	add	r0, sp, #32
   b99b8:	f7ff ffd0 	bl	b995c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b99bc:	a808      	add	r0, sp, #32
   b99be:	f7ff f935 	bl	b8c2c <_ZNSt14_Function_baseD1Ev>
   b99c2:	a804      	add	r0, sp, #16
   b99c4:	f7ff f932 	bl	b8c2c <_ZNSt14_Function_baseD1Ev>
    }
   b99c8:	4620      	mov	r0, r4
   b99ca:	b00c      	add	sp, #48	; 0x30
   b99cc:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b99ce:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b99d0:	e7ea      	b.n	b99a8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b99d4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b99d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b99d8:	b087      	sub	sp, #28
   b99da:	461d      	mov	r5, r3
   b99dc:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b99e0:	4680      	mov	r8, r0
   b99e2:	468b      	mov	fp, r1
   b99e4:	4692      	mov	sl, r2
   b99e6:	9912      	ldr	r1, [sp, #72]	; 0x48
   b99e8:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b99ea:	2200      	movs	r2, #0
   b99ec:	2068      	movs	r0, #104	; 0x68
   b99ee:	9102      	str	r1, [sp, #8]
   b99f0:	9204      	str	r2, [sp, #16]
   b99f2:	f7fa fb50 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b99f6:	1e06      	subs	r6, r0, #0
   b99f8:	f106 090c 	add.w	r9, r6, #12
   b99fc:	d018      	beq.n	b9a30 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b99fe:	2201      	movs	r2, #1
	: _M_impl(__a)
   b9a00:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b9a02:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b9a06:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b9a08:	4a15      	ldr	r2, [pc, #84]	; (b9a60 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b9a0a:	f847 2b20 	str.w	r2, [r7], #32
   b9a0e:	9b03      	ldr	r3, [sp, #12]
   b9a10:	9100      	str	r1, [sp, #0]
   b9a12:	465a      	mov	r2, fp
   b9a14:	4651      	mov	r1, sl
   b9a16:	4648      	mov	r0, r9
   b9a18:	f7ff ffae 	bl	b9978 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b9a1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9a1e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b9a20:	682b      	ldr	r3, [r5, #0]
   b9a22:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b9a24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9a26:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b9a2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9a2c:	6823      	ldr	r3, [r4, #0]
   b9a2e:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b9a30:	a904      	add	r1, sp, #16
   b9a32:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b9a34:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b9a38:	f7ff fd1a 	bl	b9470 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b9a3c:	a805      	add	r0, sp, #20
   b9a3e:	f7ff fca8 	bl	b9392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b9a42:	f8d8 3000 	ldr.w	r3, [r8]
   b9a46:	b93b      	cbnz	r3, b9a58 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b9a48:	4a06      	ldr	r2, [pc, #24]	; (b9a64 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b9a4a:	4907      	ldr	r1, [pc, #28]	; (b9a68 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b9a4c:	200a      	movs	r0, #10
}
   b9a4e:	b007      	add	sp, #28
   b9a50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b9a54:	f7fe bf44 	b.w	b88e0 <panic_>
}
   b9a58:	b007      	add	sp, #28
   b9a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9a5e:	bf00      	nop
   b9a60:	000be898 	.word	0x000be898
   b9a64:	000b8681 	.word	0x000b8681
   b9a68:	000be744 	.word	0x000be744

000b9a6c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b9a6c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9a70:	4604      	mov	r4, r0
   b9a72:	460d      	mov	r5, r1
   b9a74:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9a76:	d914      	bls.n	b9aa2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b9a78:	4290      	cmp	r0, r2
   b9a7a:	d213      	bcs.n	b9aa4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b9a7c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b9a80:	1a75      	subs	r5, r6, r1
   b9a82:	f1a1 0708 	sub.w	r7, r1, #8
   b9a86:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9a88:	42b7      	cmp	r7, r6
   b9a8a:	d018      	beq.n	b9abe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b9a8c:	b11c      	cbz	r4, b9a96 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b9a8e:	4631      	mov	r1, r6
   b9a90:	4620      	mov	r0, r4
   b9a92:	f7ff fc6a 	bl	b936a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b9a96:	1d30      	adds	r0, r6, #4
   b9a98:	f7ff fc7b 	bl	b9392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b9a9c:	3e08      	subs	r6, #8
   b9a9e:	3c08      	subs	r4, #8
   b9aa0:	e7f2      	b.n	b9a88 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b9aa2:	d00c      	beq.n	b9abe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b9aa4:	42b5      	cmp	r5, r6
   b9aa6:	d00a      	beq.n	b9abe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b9aa8:	b11c      	cbz	r4, b9ab2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b9aaa:	4629      	mov	r1, r5
   b9aac:	4620      	mov	r0, r4
   b9aae:	f7ff fc5c 	bl	b936a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b9ab2:	1d28      	adds	r0, r5, #4
   b9ab4:	f7ff fc6d 	bl	b9392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b9ab8:	3508      	adds	r5, #8
   b9aba:	3408      	adds	r4, #8
   b9abc:	e7f2      	b.n	b9aa4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b9abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9ac0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b9ac0:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b9ac2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b9ac4:	4605      	mov	r5, r0
        if (n > 0) {
   b9ac6:	dd11      	ble.n	b9aec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b9ac8:	00f0      	lsls	r0, r6, #3
   b9aca:	f7fe ffbd 	bl	b8a48 <malloc>
            if (!d) {
   b9ace:	4604      	mov	r4, r0
   b9ad0:	b158      	cbz	r0, b9aea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b9ad2:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9ad6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b9ada:	f7ff ffc7 	bl	b9a6c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b9ade:	6828      	ldr	r0, [r5, #0]
   b9ae0:	f7fe ffba 	bl	b8a58 <free>
        data_ = d;
   b9ae4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9ae6:	60ae      	str	r6, [r5, #8]
        return true;
   b9ae8:	2001      	movs	r0, #1
    }
   b9aea:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b9aec:	2400      	movs	r4, #0
   b9aee:	e7f6      	b.n	b9ade <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b9af0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9af0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9af2:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b9af4:	6845      	ldr	r5, [r0, #4]
   b9af6:	4668      	mov	r0, sp
   b9af8:	f7ff fc37 	bl	b936a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9afc:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b9b00:	4299      	cmp	r1, r3
   b9b02:	da10      	bge.n	b9b26 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b9b04:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9b06:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9b08:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b9b0c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b9b10:	4629      	mov	r1, r5
   b9b12:	f105 0008 	add.w	r0, r5, #8
   b9b16:	f7ff ffa9 	bl	b9a6c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b9b1a:	b98d      	cbnz	r5, b9b40 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b9b1c:	6863      	ldr	r3, [r4, #4]
   b9b1e:	3301      	adds	r3, #1
   b9b20:	6063      	str	r3, [r4, #4]
    return true;
   b9b22:	2601      	movs	r6, #1
   b9b24:	e006      	b.n	b9b34 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9b26:	3101      	adds	r1, #1
   b9b28:	4620      	mov	r0, r4
   b9b2a:	f7ff ffc9 	bl	b9ac0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b9b2e:	4606      	mov	r6, r0
   b9b30:	2800      	cmp	r0, #0
   b9b32:	d1e7      	bne.n	b9b04 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b9b34:	a801      	add	r0, sp, #4
   b9b36:	f7ff fc2c 	bl	b9392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9b3a:	4630      	mov	r0, r6
   b9b3c:	b002      	add	sp, #8
   b9b3e:	bd70      	pop	{r4, r5, r6, pc}
   b9b40:	4669      	mov	r1, sp
   b9b42:	4628      	mov	r0, r5
   b9b44:	f7ff fc11 	bl	b936a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b9b48:	e7e8      	b.n	b9b1c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b9b4a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b9b4a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9b4e:	4604      	mov	r4, r0
   b9b50:	460d      	mov	r5, r1
   b9b52:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9b54:	d914      	bls.n	b9b80 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b9b56:	4290      	cmp	r0, r2
   b9b58:	d213      	bcs.n	b9b82 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b9b5a:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b9b5e:	1a75      	subs	r5, r6, r1
   b9b60:	f1a1 0708 	sub.w	r7, r1, #8
   b9b64:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9b66:	42b7      	cmp	r7, r6
   b9b68:	d018      	beq.n	b9b9c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b9b6a:	b11c      	cbz	r4, b9b74 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b9b6c:	4631      	mov	r1, r6
   b9b6e:	4620      	mov	r0, r4
   b9b70:	f7ff fbed 	bl	b934e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9b74:	1d30      	adds	r0, r6, #4
   b9b76:	f7ff fc0c 	bl	b9392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b9b7a:	3e08      	subs	r6, #8
   b9b7c:	3c08      	subs	r4, #8
   b9b7e:	e7f2      	b.n	b9b66 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b9b80:	d00c      	beq.n	b9b9c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b9b82:	42b5      	cmp	r5, r6
   b9b84:	d00a      	beq.n	b9b9c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b9b86:	b11c      	cbz	r4, b9b90 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b9b88:	4629      	mov	r1, r5
   b9b8a:	4620      	mov	r0, r4
   b9b8c:	f7ff fbdf 	bl	b934e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9b90:	1d28      	adds	r0, r5, #4
   b9b92:	f7ff fbfe 	bl	b9392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b9b96:	3508      	adds	r5, #8
   b9b98:	3408      	adds	r4, #8
   b9b9a:	e7f2      	b.n	b9b82 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b9b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9b9e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b9b9e:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b9ba0:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b9ba2:	4605      	mov	r5, r0
        if (n > 0) {
   b9ba4:	dd11      	ble.n	b9bca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b9ba6:	00f0      	lsls	r0, r6, #3
   b9ba8:	f7fe ff4e 	bl	b8a48 <malloc>
            if (!d) {
   b9bac:	4604      	mov	r4, r0
   b9bae:	b158      	cbz	r0, b9bc8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b9bb0:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9bb4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b9bb8:	f7ff ffc7 	bl	b9b4a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b9bbc:	6828      	ldr	r0, [r5, #0]
   b9bbe:	f7fe ff4b 	bl	b8a58 <free>
        data_ = d;
   b9bc2:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9bc4:	60ae      	str	r6, [r5, #8]
        return true;
   b9bc6:	2001      	movs	r0, #1
    }
   b9bc8:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b9bca:	2400      	movs	r4, #0
   b9bcc:	e7f6      	b.n	b9bbc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b9bce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9bce:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9bd0:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b9bd2:	6845      	ldr	r5, [r0, #4]
   b9bd4:	4668      	mov	r0, sp
   b9bd6:	f7ff fbba 	bl	b934e <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9bda:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b9bde:	4299      	cmp	r1, r3
   b9be0:	da10      	bge.n	b9c04 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b9be2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9be4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9be6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b9bea:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b9bee:	4629      	mov	r1, r5
   b9bf0:	f105 0008 	add.w	r0, r5, #8
   b9bf4:	f7ff ffa9 	bl	b9b4a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b9bf8:	b98d      	cbnz	r5, b9c1e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b9bfa:	6863      	ldr	r3, [r4, #4]
   b9bfc:	3301      	adds	r3, #1
   b9bfe:	6063      	str	r3, [r4, #4]
    return true;
   b9c00:	2601      	movs	r6, #1
   b9c02:	e006      	b.n	b9c12 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9c04:	3101      	adds	r1, #1
   b9c06:	4620      	mov	r0, r4
   b9c08:	f7ff ffc9 	bl	b9b9e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b9c0c:	4606      	mov	r6, r0
   b9c0e:	2800      	cmp	r0, #0
   b9c10:	d1e7      	bne.n	b9be2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b9c12:	a801      	add	r0, sp, #4
   b9c14:	f7ff fbbd 	bl	b9392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9c18:	4630      	mov	r0, r6
   b9c1a:	b002      	add	sp, #8
   b9c1c:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b9c1e:	4669      	mov	r1, sp
   b9c20:	4628      	mov	r0, r5
   b9c22:	f7ff fb94 	bl	b934e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9c26:	e7e8      	b.n	b9bfa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b9c28 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b9c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9c2c:	4617      	mov	r7, r2
   b9c2e:	b0a1      	sub	sp, #132	; 0x84
   b9c30:	4680      	mov	r8, r0
    WiringBleLock lk;
   b9c32:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b9c34:	460e      	mov	r6, r1
    WiringBleLock lk;
   b9c36:	f7ff f837 	bl	b8ca8 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b9c3a:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b9c3c:	7923      	ldrb	r3, [r4, #4]
   b9c3e:	b953      	cbnz	r3, b9c56 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b9c40:	4639      	mov	r1, r7
   b9c42:	4640      	mov	r0, r8
   b9c44:	f7ff fb83 	bl	b934e <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b9c48:	a80a      	add	r0, sp, #40	; 0x28
   b9c4a:	f7ff f83b 	bl	b8cc4 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b9c4e:	4640      	mov	r0, r8
   b9c50:	b021      	add	sp, #132	; 0x84
   b9c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b9c56:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b9c58:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b9c5c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b9c60:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b9c62:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b9c66:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b9c6a:	9b03      	ldr	r3, [sp, #12]
   b9c6c:	429d      	cmp	r5, r3
   b9c6e:	d021      	beq.n	b9cb4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b9c70:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b9c74:	4658      	mov	r0, fp
   b9c76:	f109 0114 	add.w	r1, r9, #20
   b9c7a:	f7ff f8c2 	bl	b8e02 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b9c7e:	b1b8      	cbz	r0, b9cb0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b9c80:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b9c84:	4650      	mov	r0, sl
   b9c86:	f7ff f8bc 	bl	b8e02 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b9c8a:	b188      	cbz	r0, b9cb0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b9c8c:	6823      	ldr	r3, [r4, #0]
   b9c8e:	f8d9 2000 	ldr.w	r2, [r9]
   b9c92:	4053      	eors	r3, r2
   b9c94:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b9c98:	d10a      	bne.n	b9cb0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b9c9a:	2220      	movs	r2, #32
   b9c9c:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b9ca0:	4a5e      	ldr	r2, [pc, #376]	; (b9e1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b9ca2:	9200      	str	r2, [sp, #0]
   b9ca4:	aa15      	add	r2, sp, #84	; 0x54
   b9ca6:	495e      	ldr	r1, [pc, #376]	; (b9e20 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b9ca8:	2032      	movs	r0, #50	; 0x32
   b9caa:	f7fe fe21 	bl	b88f0 <log_message>
   b9cae:	e7c7      	b.n	b9c40 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b9cb0:	3508      	adds	r5, #8
   b9cb2:	e7da      	b.n	b9c6a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b9cb4:	4650      	mov	r0, sl
   b9cb6:	f7ff f875 	bl	b8da4 <_ZNK8particle7BleUuid7isValidEv>
   b9cba:	b960      	cbnz	r0, b9cd6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b9cbc:	4959      	ldr	r1, [pc, #356]	; (b9e24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b9cbe:	2201      	movs	r2, #1
   b9cc0:	a815      	add	r0, sp, #84	; 0x54
   b9cc2:	ad15      	add	r5, sp, #84	; 0x54
   b9cc4:	f7ff f846 	bl	b8d54 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b9cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9cca:	46d4      	mov	ip, sl
   b9ccc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b9cd0:	682b      	ldr	r3, [r5, #0]
   b9cd2:	f8cc 3000 	str.w	r3, [ip]
   b9cd6:	6833      	ldr	r3, [r6, #0]
   b9cd8:	e9d3 5300 	ldrd	r5, r3, [r3]
   b9cdc:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b9ce0:	455d      	cmp	r5, fp
   b9ce2:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b9ce4:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b9ce6:	d06e      	beq.n	b9dc6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b9ce8:	f855 0b08 	ldr.w	r0, [r5], #8
   b9cec:	f7ff f889 	bl	b8e02 <_ZNK8particle7BleUuideqERKS0_>
   b9cf0:	2800      	cmp	r0, #0
   b9cf2:	d0f5      	beq.n	b9ce0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b9cf4:	f104 0a14 	add.w	sl, r4, #20
   b9cf8:	4650      	mov	r0, sl
   b9cfa:	f7ff f853 	bl	b8da4 <_ZNK8particle7BleUuid7isValidEv>
   b9cfe:	b988      	cbnz	r0, b9d24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b9d00:	4b49      	ldr	r3, [pc, #292]	; (b9e28 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b9d02:	4948      	ldr	r1, [pc, #288]	; (b9e24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b9d04:	881a      	ldrh	r2, [r3, #0]
   b9d06:	3201      	adds	r2, #1
   b9d08:	b292      	uxth	r2, r2
   b9d0a:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b9d0c:	a815      	add	r0, sp, #84	; 0x54
   b9d0e:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b9d10:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b9d12:	f7ff f83e 	bl	b8d92 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b9d16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9d18:	46d4      	mov	ip, sl
   b9d1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b9d1e:	682b      	ldr	r3, [r5, #0]
   b9d20:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b9d24:	4b41      	ldr	r3, [pc, #260]	; (b9e2c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b9d26:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b9d28:	2228      	movs	r2, #40	; 0x28
   b9d2a:	2100      	movs	r1, #0
   b9d2c:	a816      	add	r0, sp, #88	; 0x58
   b9d2e:	f002 fa19 	bl	bc164 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b9d32:	4651      	mov	r1, sl
   b9d34:	a804      	add	r0, sp, #16
   b9d36:	f7ff f847 	bl	b8dc8 <_ZN8particle7BleUuid7halUUIDEv>
   b9d3a:	ab04      	add	r3, sp, #16
   b9d3c:	aa18      	add	r2, sp, #96	; 0x60
   b9d3e:	f10d 0c20 	add.w	ip, sp, #32
   b9d42:	6818      	ldr	r0, [r3, #0]
   b9d44:	6859      	ldr	r1, [r3, #4]
   b9d46:	4615      	mov	r5, r2
   b9d48:	c503      	stmia	r5!, {r0, r1}
   b9d4a:	3308      	adds	r3, #8
   b9d4c:	4563      	cmp	r3, ip
   b9d4e:	462a      	mov	r2, r5
   b9d50:	d1f7      	bne.n	b9d42 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b9d52:	6818      	ldr	r0, [r3, #0]
   b9d54:	6028      	str	r0, [r5, #0]
    return value_;
   b9d56:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b9d58:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b9d5c:	f8d9 3000 	ldr.w	r3, [r9]
   b9d60:	8a9b      	ldrh	r3, [r3, #20]
   b9d62:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b9d66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b9d68:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b9d6a:	4b31      	ldr	r3, [pc, #196]	; (b9e30 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b9d6c:	2200      	movs	r2, #0
   b9d6e:	1da1      	adds	r1, r4, #6
   b9d70:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b9d72:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b9d76:	f7fe fc3b 	bl	b85f0 <hal_ble_gatt_server_add_characteristic>
   b9d7a:	2800      	cmp	r0, #0
   b9d7c:	f47f af60 	bne.w	b9c40 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b9d80:	2301      	movs	r3, #1
   b9d82:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b9d84:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b9d86:	4639      	mov	r1, r7
        return characteristics_;
   b9d88:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b9d8a:	a80d      	add	r0, sp, #52	; 0x34
   b9d8c:	f7ff fadf 	bl	b934e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9d90:	4620      	mov	r0, r4
   b9d92:	a90d      	add	r1, sp, #52	; 0x34
   b9d94:	f7ff ff1b 	bl	b9bce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b9d98:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b9d9a:	a80e      	add	r0, sp, #56	; 0x38
   b9d9c:	f7ff faf9 	bl	b9392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9da0:	2c00      	cmp	r4, #0
   b9da2:	f47f af4d 	bne.w	b9c40 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b9da6:	2320      	movs	r3, #32
   b9da8:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b9dac:	4b21      	ldr	r3, [pc, #132]	; (b9e34 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b9dae:	9300      	str	r3, [sp, #0]
   b9db0:	aa0d      	add	r2, sp, #52	; 0x34
   b9db2:	4623      	mov	r3, r4
   b9db4:	e777      	b.n	b9ca6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b9db6:	4639      	mov	r1, r7
   b9db8:	4640      	mov	r0, r8
   b9dba:	f7ff fac8 	bl	b934e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9dbe:	a80c      	add	r0, sp, #48	; 0x30
   b9dc0:	f7ff fae7 	bl	b9392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9dc4:	e740      	b.n	b9c48 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b9dc6:	a80b      	add	r0, sp, #44	; 0x2c
   b9dc8:	f7ff f94a 	bl	b9060 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b9dcc:	4651      	mov	r1, sl
   b9dce:	a815      	add	r0, sp, #84	; 0x54
   b9dd0:	f7fe fffa 	bl	b8dc8 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b9dd4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b9dd6:	2300      	movs	r3, #0
   b9dd8:	3214      	adds	r2, #20
   b9dda:	a915      	add	r1, sp, #84	; 0x54
   b9ddc:	2001      	movs	r0, #1
   b9dde:	f7fe fbdf 	bl	b85a0 <hal_ble_gatt_server_add_service>
   b9de2:	2800      	cmp	r0, #0
   b9de4:	d1e7      	bne.n	b9db6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b9de6:	6835      	ldr	r5, [r6, #0]
   b9de8:	a90b      	add	r1, sp, #44	; 0x2c
   b9dea:	a80d      	add	r0, sp, #52	; 0x34
   b9dec:	f7ff fabd 	bl	b936a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b9df0:	4628      	mov	r0, r5
   b9df2:	a90d      	add	r1, sp, #52	; 0x34
   b9df4:	f7ff fe7c 	bl	b9af0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b9df8:	4605      	mov	r5, r0
   b9dfa:	a80e      	add	r0, sp, #56	; 0x38
   b9dfc:	f7ff fac9 	bl	b9392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9e00:	2d00      	cmp	r5, #0
   b9e02:	d0d8      	beq.n	b9db6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b9e04:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b9e06:	6853      	ldr	r3, [r2, #4]
   b9e08:	6812      	ldr	r2, [r2, #0]
   b9e0a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b9e0e:	3b01      	subs	r3, #1
   b9e10:	a80c      	add	r0, sp, #48	; 0x30
   b9e12:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b9e16:	f7ff fabc 	bl	b9392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9e1a:	e76b      	b.n	b9cf4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b9e1c:	000be83e 	.word	0x000be83e
   b9e20:	000be75b 	.word	0x000be75b
   b9e24:	000be902 	.word	0x000be902
   b9e28:	2003e6bc 	.word	0x2003e6bc
   b9e2c:	002c0003 	.word	0x002c0003
   b9e30:	000b91f9 	.word	0x000b91f9
   b9e34:	000be869 	.word	0x000be869

000b9e38 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b9e38:	4802      	ldr	r0, [pc, #8]	; (b9e44 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b9e3a:	2300      	movs	r3, #0
   b9e3c:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b9e3e:	f7fe bbff 	b.w	b8640 <os_mutex_recursive_create>
   b9e42:	bf00      	nop
   b9e44:	2003e6c0 	.word	0x2003e6c0

000b9e48 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9e48:	2200      	movs	r2, #0
   b9e4a:	6840      	ldr	r0, [r0, #4]
   b9e4c:	4611      	mov	r1, r2
   b9e4e:	f7fe bdbb 	b.w	b89c8 <network_listening>

000b9e52 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9e52:	2200      	movs	r2, #0
   b9e54:	6840      	ldr	r0, [r0, #4]
   b9e56:	4611      	mov	r1, r2
   b9e58:	f7fe bdde 	b.w	b8a18 <network_get_listen_timeout>

000b9e5c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9e5c:	6840      	ldr	r0, [r0, #4]
   b9e5e:	2200      	movs	r2, #0
   b9e60:	f7fe bdd2 	b.w	b8a08 <network_set_listen_timeout>

000b9e64 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9e64:	6840      	ldr	r0, [r0, #4]
   b9e66:	2200      	movs	r2, #0
   b9e68:	f081 0101 	eor.w	r1, r1, #1
   b9e6c:	f7fe bda4 	b.w	b89b8 <network_listen>

000b9e70 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9e70:	2300      	movs	r3, #0
   b9e72:	6840      	ldr	r0, [r0, #4]
   b9e74:	461a      	mov	r2, r3
   b9e76:	4619      	mov	r1, r3
   b9e78:	f7fe bd96 	b.w	b89a8 <network_off>

000b9e7c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b9e7c:	2300      	movs	r3, #0
   b9e7e:	6840      	ldr	r0, [r0, #4]
   b9e80:	461a      	mov	r2, r3
   b9e82:	4619      	mov	r1, r3
   b9e84:	f7fe bd88 	b.w	b8998 <network_on>

000b9e88 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b9e88:	2200      	movs	r2, #0
   b9e8a:	6840      	ldr	r0, [r0, #4]
   b9e8c:	4611      	mov	r1, r2
   b9e8e:	f7fe bd7b 	b.w	b8988 <network_ready>

000b9e92 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9e92:	2200      	movs	r2, #0
   b9e94:	6840      	ldr	r0, [r0, #4]
   b9e96:	4611      	mov	r1, r2
   b9e98:	f7fe bd66 	b.w	b8968 <network_connecting>

000b9e9c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9e9c:	6840      	ldr	r0, [r0, #4]
   b9e9e:	2200      	movs	r2, #0
   b9ea0:	2102      	movs	r1, #2
   b9ea2:	f7fe bd69 	b.w	b8978 <network_disconnect>

000b9ea6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b9ea6:	2300      	movs	r3, #0
   b9ea8:	6840      	ldr	r0, [r0, #4]
   b9eaa:	461a      	mov	r2, r3
   b9eac:	f7fe bd54 	b.w	b8958 <network_connect>

000b9eb0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b9eb0:	4b02      	ldr	r3, [pc, #8]	; (b9ebc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b9eb2:	2203      	movs	r2, #3
   b9eb4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b9eb6:	4a02      	ldr	r2, [pc, #8]	; (b9ec0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b9eb8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b9eba:	4770      	bx	lr
   b9ebc:	2003e6c8 	.word	0x2003e6c8
   b9ec0:	000be92c 	.word	0x000be92c

000b9ec4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b9ec4:	4770      	bx	lr

000b9ec6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b9ec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9ec8:	4606      	mov	r6, r0
   b9eca:	4615      	mov	r5, r2
   b9ecc:	460c      	mov	r4, r1
   b9ece:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b9ed0:	42bc      	cmp	r4, r7
   b9ed2:	d006      	beq.n	b9ee2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b9ed4:	6833      	ldr	r3, [r6, #0]
   b9ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
   b9eda:	689b      	ldr	r3, [r3, #8]
   b9edc:	4630      	mov	r0, r6
   b9ede:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b9ee0:	e7f6      	b.n	b9ed0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b9ee2:	4628      	mov	r0, r5
   b9ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9ee6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b9ee6:	7c00      	ldrb	r0, [r0, #16]
   b9ee8:	2200      	movs	r2, #0
   b9eea:	f7fe bbf1 	b.w	b86d0 <hal_i2c_write>

000b9eee <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b9eee:	7c00      	ldrb	r0, [r0, #16]
   b9ef0:	2100      	movs	r1, #0
   b9ef2:	f7fe bbf5 	b.w	b86e0 <hal_i2c_available>

000b9ef6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b9ef6:	7c00      	ldrb	r0, [r0, #16]
   b9ef8:	2100      	movs	r1, #0
   b9efa:	f7fe bbf9 	b.w	b86f0 <hal_i2c_read>

000b9efe <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b9efe:	7c00      	ldrb	r0, [r0, #16]
   b9f00:	2100      	movs	r1, #0
   b9f02:	f7fe bbfd 	b.w	b8700 <hal_i2c_peek>

000b9f06 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b9f06:	7c00      	ldrb	r0, [r0, #16]
   b9f08:	2100      	movs	r1, #0
   b9f0a:	f7fe bc01 	b.w	b8710 <hal_i2c_flush>

000b9f0e <_ZN7TwoWireD0Ev>:
   b9f0e:	b510      	push	{r4, lr}
   b9f10:	2114      	movs	r1, #20
   b9f12:	4604      	mov	r4, r0
   b9f14:	f7fa f8c5 	bl	b40a2 <_ZdlPvj>
   b9f18:	4620      	mov	r0, r4
   b9f1a:	bd10      	pop	{r4, pc}

000b9f1c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b9f1c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b9f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9f22:	4604      	mov	r4, r0
   b9f24:	4608      	mov	r0, r1
   b9f26:	2100      	movs	r1, #0
   b9f28:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b9f2c:	4b03      	ldr	r3, [pc, #12]	; (b9f3c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b9f2e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b9f30:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b9f32:	4611      	mov	r1, r2
   b9f34:	f7fe fbf4 	bl	b8720 <hal_i2c_init>
}
   b9f38:	4620      	mov	r0, r4
   b9f3a:	bd10      	pop	{r4, pc}
   b9f3c:	000be968 	.word	0x000be968

000b9f40 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b9f40:	2300      	movs	r3, #0
   b9f42:	7c00      	ldrb	r0, [r0, #16]
   b9f44:	461a      	mov	r2, r3
   b9f46:	4619      	mov	r1, r3
   b9f48:	f7fe bbaa 	b.w	b86a0 <hal_i2c_begin>

000b9f4c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b9f4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b9f4e:	2200      	movs	r2, #0
   b9f50:	2314      	movs	r3, #20
   b9f52:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b9f56:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b9f5a:	780b      	ldrb	r3, [r1, #0]
   b9f5c:	f88d 3008 	strb.w	r3, [sp, #8]
   b9f60:	684b      	ldr	r3, [r1, #4]
   b9f62:	9303      	str	r3, [sp, #12]
   b9f64:	68cb      	ldr	r3, [r1, #12]
   b9f66:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b9f68:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b9f6a:	7a0b      	ldrb	r3, [r1, #8]
   b9f6c:	9305      	str	r3, [sp, #20]
   b9f6e:	a901      	add	r1, sp, #4
   b9f70:	f7fe fbde 	bl	b8730 <hal_i2c_request_ex>
}
   b9f74:	b007      	add	sp, #28
   b9f76:	f85d fb04 	ldr.w	pc, [sp], #4

000b9f7a <_ZN7TwoWire11requestFromEhjh>:
{
   b9f7a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b9f7c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b9f7e:	f88d 1000 	strb.w	r1, [sp]
   b9f82:	f04f 0164 	mov.w	r1, #100	; 0x64
   b9f86:	9103      	str	r1, [sp, #12]
   b9f88:	bf18      	it	ne
   b9f8a:	2301      	movne	r3, #1
   b9f8c:	4669      	mov	r1, sp
    size_ = size;
   b9f8e:	9201      	str	r2, [sp, #4]
   b9f90:	f88d 3008 	strb.w	r3, [sp, #8]
   b9f94:	f7ff ffda 	bl	b9f4c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b9f98:	b005      	add	sp, #20
   b9f9a:	f85d fb04 	ldr.w	pc, [sp], #4

000b9f9e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b9f9e:	2301      	movs	r3, #1
   b9fa0:	f7ff bfeb 	b.w	b9f7a <_ZN7TwoWire11requestFromEhjh>

000b9fa4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b9fa4:	7c00      	ldrb	r0, [r0, #16]
   b9fa6:	2200      	movs	r2, #0
   b9fa8:	f7fe bb82 	b.w	b86b0 <hal_i2c_begin_transmission>

000b9fac <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b9fac:	b2c9      	uxtb	r1, r1
   b9fae:	f7ff bff9 	b.w	b9fa4 <_ZN7TwoWire17beginTransmissionEh>

000b9fb2 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b9fb2:	7c00      	ldrb	r0, [r0, #16]
   b9fb4:	2200      	movs	r2, #0
   b9fb6:	f7fe bb83 	b.w	b86c0 <hal_i2c_end_transmission>

000b9fba <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b9fba:	2101      	movs	r1, #1
   b9fbc:	f7ff bff9 	b.w	b9fb2 <_ZN7TwoWire15endTransmissionEh>

000b9fc0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b9fc0:	4770      	bx	lr

000b9fc2 <_ZN9IPAddressD0Ev>:
   b9fc2:	b510      	push	{r4, lr}
   b9fc4:	2118      	movs	r1, #24
   b9fc6:	4604      	mov	r4, r0
   b9fc8:	f7fa f86b 	bl	b40a2 <_ZdlPvj>
   b9fcc:	4620      	mov	r0, r4
   b9fce:	bd10      	pop	{r4, pc}

000b9fd0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b9fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b9fd2:	7d03      	ldrb	r3, [r0, #20]
   b9fd4:	2b06      	cmp	r3, #6
{
   b9fd6:	b08d      	sub	sp, #52	; 0x34
   b9fd8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9fda:	f100 0704 	add.w	r7, r0, #4
   b9fde:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b9fe2:	d012      	beq.n	ba00a <_ZNK9IPAddress7printToER5Print+0x3a>
   b9fe4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b9fe8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b9fec:	220a      	movs	r2, #10
   b9fee:	4630      	mov	r0, r6
   b9ff0:	f000 f973 	bl	ba2da <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b9ff4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b9ff6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b9ff8:	d019      	beq.n	ba02e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b9ffa:	2c00      	cmp	r4, #0
   b9ffc:	d0f4      	beq.n	b9fe8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b9ffe:	212e      	movs	r1, #46	; 0x2e
   ba000:	4630      	mov	r0, r6
   ba002:	f000 f951 	bl	ba2a8 <_ZN5Print5printEc>
   ba006:	4404      	add	r4, r0
   ba008:	e7ee      	b.n	b9fe8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba00a:	232f      	movs	r3, #47	; 0x2f
   ba00c:	466a      	mov	r2, sp
   ba00e:	4639      	mov	r1, r7
   ba010:	200a      	movs	r0, #10
		buf[0] = 0;
   ba012:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba016:	f7fe fb9b 	bl	b8750 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   ba01a:	4668      	mov	r0, sp
   ba01c:	f002 f8ea 	bl	bc1f4 <strlen>
   ba020:	6833      	ldr	r3, [r6, #0]
   ba022:	4602      	mov	r2, r0
   ba024:	68db      	ldr	r3, [r3, #12]
   ba026:	4669      	mov	r1, sp
   ba028:	4630      	mov	r0, r6
   ba02a:	4798      	blx	r3
   ba02c:	4604      	mov	r4, r0
    }
    return n;
}
   ba02e:	4620      	mov	r0, r4
   ba030:	b00d      	add	sp, #52	; 0x34
   ba032:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba034 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   ba034:	b510      	push	{r4, lr}
   ba036:	4b05      	ldr	r3, [pc, #20]	; (ba04c <_ZN9IPAddressC1Ev+0x18>)
   ba038:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   ba03a:	2211      	movs	r2, #17
   ba03c:	f840 3b04 	str.w	r3, [r0], #4
   ba040:	2100      	movs	r1, #0
   ba042:	f002 f88f 	bl	bc164 <memset>
}
   ba046:	4620      	mov	r0, r4
   ba048:	bd10      	pop	{r4, pc}
   ba04a:	bf00      	nop
   ba04c:	000be990 	.word	0x000be990

000ba050 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   ba050:	4603      	mov	r3, r0
   ba052:	4a07      	ldr	r2, [pc, #28]	; (ba070 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   ba054:	b510      	push	{r4, lr}
   ba056:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   ba05a:	f101 0210 	add.w	r2, r1, #16
   ba05e:	f851 4b04 	ldr.w	r4, [r1], #4
   ba062:	f843 4b04 	str.w	r4, [r3], #4
   ba066:	4291      	cmp	r1, r2
   ba068:	d1f9      	bne.n	ba05e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   ba06a:	780a      	ldrb	r2, [r1, #0]
   ba06c:	701a      	strb	r2, [r3, #0]
}
   ba06e:	bd10      	pop	{r4, pc}
   ba070:	000be990 	.word	0x000be990

000ba074 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   ba074:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   ba076:	2b04      	cmp	r3, #4
   ba078:	d104      	bne.n	ba084 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   ba07a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   ba07c:	3800      	subs	r0, #0
   ba07e:	bf18      	it	ne
   ba080:	2001      	movne	r0, #1
   ba082:	4770      	bx	lr
    } else if (version() == 6) {
   ba084:	2b06      	cmp	r3, #6
   ba086:	d107      	bne.n	ba098 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   ba088:	6843      	ldr	r3, [r0, #4]
   ba08a:	b93b      	cbnz	r3, ba09c <_ZNK9IPAddresscvbEv+0x28>
   ba08c:	6883      	ldr	r3, [r0, #8]
   ba08e:	b92b      	cbnz	r3, ba09c <_ZNK9IPAddresscvbEv+0x28>
   ba090:	68c3      	ldr	r3, [r0, #12]
   ba092:	b91b      	cbnz	r3, ba09c <_ZNK9IPAddresscvbEv+0x28>
   ba094:	6900      	ldr	r0, [r0, #16]
   ba096:	e7f1      	b.n	ba07c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   ba098:	2000      	movs	r0, #0
   ba09a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   ba09c:	2001      	movs	r0, #1
}
   ba09e:	4770      	bx	lr

000ba0a0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   ba0a0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   ba0a2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   ba0a6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   ba0aa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   ba0ae:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   ba0b2:	2304      	movs	r3, #4
   ba0b4:	6041      	str	r1, [r0, #4]
   ba0b6:	7503      	strb	r3, [r0, #20]
}
   ba0b8:	bd10      	pop	{r4, pc}
	...

000ba0bc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   ba0bc:	b507      	push	{r0, r1, r2, lr}
   ba0be:	4b06      	ldr	r3, [pc, #24]	; (ba0d8 <_ZN9IPAddressC1EPKh+0x1c>)
   ba0c0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   ba0c2:	78cb      	ldrb	r3, [r1, #3]
   ba0c4:	9300      	str	r3, [sp, #0]
   ba0c6:	788b      	ldrb	r3, [r1, #2]
   ba0c8:	784a      	ldrb	r2, [r1, #1]
   ba0ca:	7809      	ldrb	r1, [r1, #0]
   ba0cc:	f7ff ffe8 	bl	ba0a0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   ba0d0:	b003      	add	sp, #12
   ba0d2:	f85d fb04 	ldr.w	pc, [sp], #4
   ba0d6:	bf00      	nop
   ba0d8:	000be990 	.word	0x000be990

000ba0dc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   ba0dc:	4b01      	ldr	r3, [pc, #4]	; (ba0e4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   ba0de:	4a02      	ldr	r2, [pc, #8]	; (ba0e8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   ba0e0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   ba0e2:	4770      	bx	lr
   ba0e4:	2003e6d0 	.word	0x2003e6d0
   ba0e8:	000be99c 	.word	0x000be99c

000ba0ec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   ba0ec:	2300      	movs	r3, #0
   ba0ee:	6840      	ldr	r0, [r0, #4]
   ba0f0:	461a      	mov	r2, r3
   ba0f2:	f7fe bc31 	b.w	b8958 <network_connect>

000ba0f6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   ba0f6:	6840      	ldr	r0, [r0, #4]
   ba0f8:	2200      	movs	r2, #0
   ba0fa:	2102      	movs	r1, #2
   ba0fc:	f7fe bc3c 	b.w	b8978 <network_disconnect>

000ba100 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   ba100:	2200      	movs	r2, #0
   ba102:	6840      	ldr	r0, [r0, #4]
   ba104:	4611      	mov	r1, r2
   ba106:	f7fe bc2f 	b.w	b8968 <network_connecting>

000ba10a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   ba10a:	2200      	movs	r2, #0
   ba10c:	6840      	ldr	r0, [r0, #4]
   ba10e:	4611      	mov	r1, r2
   ba110:	f7fe bc3a 	b.w	b8988 <network_ready>

000ba114 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   ba114:	2300      	movs	r3, #0
   ba116:	6840      	ldr	r0, [r0, #4]
   ba118:	461a      	mov	r2, r3
   ba11a:	4619      	mov	r1, r3
   ba11c:	f7fe bc3c 	b.w	b8998 <network_on>

000ba120 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   ba120:	2300      	movs	r3, #0
   ba122:	6840      	ldr	r0, [r0, #4]
   ba124:	461a      	mov	r2, r3
   ba126:	4619      	mov	r1, r3
   ba128:	f7fe bc3e 	b.w	b89a8 <network_off>

000ba12c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   ba12c:	6840      	ldr	r0, [r0, #4]
   ba12e:	2100      	movs	r1, #0
   ba130:	f7fe bc7a 	b.w	b8a28 <network_is_on>

000ba134 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   ba134:	6840      	ldr	r0, [r0, #4]
   ba136:	2100      	movs	r1, #0
   ba138:	f7fe bc7e 	b.w	b8a38 <network_is_off>

000ba13c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   ba13c:	6840      	ldr	r0, [r0, #4]
   ba13e:	2200      	movs	r2, #0
   ba140:	f081 0101 	eor.w	r1, r1, #1
   ba144:	f7fe bc38 	b.w	b89b8 <network_listen>

000ba148 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   ba148:	6840      	ldr	r0, [r0, #4]
   ba14a:	2200      	movs	r2, #0
   ba14c:	f7fe bc5c 	b.w	b8a08 <network_set_listen_timeout>

000ba150 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   ba150:	2200      	movs	r2, #0
   ba152:	6840      	ldr	r0, [r0, #4]
   ba154:	4611      	mov	r1, r2
   ba156:	f7fe bc5f 	b.w	b8a18 <network_get_listen_timeout>

000ba15a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   ba15a:	2200      	movs	r2, #0
   ba15c:	6840      	ldr	r0, [r0, #4]
   ba15e:	4611      	mov	r1, r2
   ba160:	f7fe bc32 	b.w	b89c8 <network_listening>

000ba164 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   ba164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba168:	b095      	sub	sp, #84	; 0x54
   ba16a:	4614      	mov	r4, r2
   ba16c:	460d      	mov	r5, r1
   ba16e:	4607      	mov	r7, r0
    IPAddress addr;
   ba170:	f7ff ff60 	bl	ba034 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   ba174:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   ba176:	221c      	movs	r2, #28
   ba178:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   ba17a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   ba17c:	f001 fff2 	bl	bc164 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   ba180:	2340      	movs	r3, #64	; 0x40
   ba182:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   ba184:	4620      	mov	r0, r4
   ba186:	466b      	mov	r3, sp
   ba188:	aa0c      	add	r2, sp, #48	; 0x30
   ba18a:	2100      	movs	r1, #0
   ba18c:	f7fe fb00 	bl	b8790 <netdb_getaddrinfo>
    if (!r) {
   ba190:	4604      	mov	r4, r0
   ba192:	2800      	cmp	r0, #0
   ba194:	d14b      	bne.n	ba22e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba196:	4602      	mov	r2, r0
   ba198:	2101      	movs	r1, #1
   ba19a:	6868      	ldr	r0, [r5, #4]
   ba19c:	f7fe fbf4 	bl	b8988 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba1a0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba1a2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba1a4:	4622      	mov	r2, r4
   ba1a6:	6868      	ldr	r0, [r5, #4]
   ba1a8:	f7fe fbee 	bl	b8988 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba1ac:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba1ae:	4681      	mov	r9, r0
        bool ok = false;
   ba1b0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba1b2:	2e00      	cmp	r6, #0
   ba1b4:	d03b      	beq.n	ba22e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   ba1b6:	2900      	cmp	r1, #0
   ba1b8:	d139      	bne.n	ba22e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   ba1ba:	6873      	ldr	r3, [r6, #4]
   ba1bc:	2b02      	cmp	r3, #2
   ba1be:	d003      	beq.n	ba1c8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   ba1c0:	2b0a      	cmp	r3, #10
   ba1c2:	d011      	beq.n	ba1e8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba1c4:	69f6      	ldr	r6, [r6, #28]
   ba1c6:	e7f4      	b.n	ba1b2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   ba1c8:	f1b8 0f00 	cmp.w	r8, #0
   ba1cc:	d0fa      	beq.n	ba1c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   ba1ce:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   ba1d0:	a806      	add	r0, sp, #24
   ba1d2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   ba1d4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   ba1d6:	f7ff ff71 	bl	ba0bc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   ba1da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba1dc:	1d3c      	adds	r4, r7, #4
   ba1de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba1e0:	682b      	ldr	r3, [r5, #0]
   ba1e2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba1e4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   ba1e6:	e7ed      	b.n	ba1c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   ba1e8:	f1b9 0f00 	cmp.w	r9, #0
   ba1ec:	d0ea      	beq.n	ba1c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   ba1ee:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   ba1f0:	2210      	movs	r2, #16
   ba1f2:	a801      	add	r0, sp, #4
   ba1f4:	f001 ffb6 	bl	bc164 <memset>
                    a.v = 6;
   ba1f8:	2306      	movs	r3, #6
   ba1fa:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   ba1fe:	ad01      	add	r5, sp, #4
   ba200:	f104 0308 	add.w	r3, r4, #8
   ba204:	3418      	adds	r4, #24
   ba206:	6818      	ldr	r0, [r3, #0]
   ba208:	6859      	ldr	r1, [r3, #4]
   ba20a:	462a      	mov	r2, r5
   ba20c:	c203      	stmia	r2!, {r0, r1}
   ba20e:	3308      	adds	r3, #8
   ba210:	42a3      	cmp	r3, r4
   ba212:	4615      	mov	r5, r2
   ba214:	d1f7      	bne.n	ba206 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   ba216:	a901      	add	r1, sp, #4
   ba218:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   ba21a:	ad07      	add	r5, sp, #28
   ba21c:	f7ff ff18 	bl	ba050 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   ba220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba222:	1d3c      	adds	r4, r7, #4
   ba224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba226:	682b      	ldr	r3, [r5, #0]
   ba228:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba22a:	4649      	mov	r1, r9
   ba22c:	e7ca      	b.n	ba1c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   ba22e:	9800      	ldr	r0, [sp, #0]
   ba230:	f7fe faa6 	bl	b8780 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   ba234:	4638      	mov	r0, r7
   ba236:	b015      	add	sp, #84	; 0x54
   ba238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000ba23c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   ba23c:	4b02      	ldr	r3, [pc, #8]	; (ba248 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   ba23e:	4a03      	ldr	r2, [pc, #12]	; (ba24c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   ba240:	601a      	str	r2, [r3, #0]
   ba242:	2200      	movs	r2, #0
   ba244:	605a      	str	r2, [r3, #4]

} // spark
   ba246:	4770      	bx	lr
   ba248:	2003e6d4 	.word	0x2003e6d4
   ba24c:	000be9a8 	.word	0x000be9a8

000ba250 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   ba250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba252:	4606      	mov	r6, r0
   ba254:	460d      	mov	r5, r1
  size_t n = 0;
   ba256:	188f      	adds	r7, r1, r2
   ba258:	2400      	movs	r4, #0
  while (size--) {
   ba25a:	42bd      	cmp	r5, r7
   ba25c:	d00c      	beq.n	ba278 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   ba25e:	6833      	ldr	r3, [r6, #0]
   ba260:	f815 1b01 	ldrb.w	r1, [r5], #1
   ba264:	689b      	ldr	r3, [r3, #8]
   ba266:	4630      	mov	r0, r6
   ba268:	4798      	blx	r3
     if (chunk>=0)
   ba26a:	1e03      	subs	r3, r0, #0
   ba26c:	db01      	blt.n	ba272 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   ba26e:	441c      	add	r4, r3
  while (size--) {
   ba270:	e7f3      	b.n	ba25a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   ba272:	2c00      	cmp	r4, #0
   ba274:	bf08      	it	eq
   ba276:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   ba278:	4620      	mov	r0, r4
   ba27a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba27c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   ba27c:	b513      	push	{r0, r1, r4, lr}
   ba27e:	4604      	mov	r4, r0
    }
   ba280:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   ba282:	b159      	cbz	r1, ba29c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   ba284:	9101      	str	r1, [sp, #4]
   ba286:	f001 ffb5 	bl	bc1f4 <strlen>
   ba28a:	6823      	ldr	r3, [r4, #0]
   ba28c:	9901      	ldr	r1, [sp, #4]
   ba28e:	68db      	ldr	r3, [r3, #12]
   ba290:	4602      	mov	r2, r0
   ba292:	4620      	mov	r0, r4
    }
   ba294:	b002      	add	sp, #8
   ba296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   ba29a:	4718      	bx	r3
    }
   ba29c:	b002      	add	sp, #8
   ba29e:	bd10      	pop	{r4, pc}

000ba2a0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   ba2a0:	b508      	push	{r3, lr}
  return write(str);
   ba2a2:	f7ff ffeb 	bl	ba27c <_ZN5Print5writeEPKc>
}
   ba2a6:	bd08      	pop	{r3, pc}

000ba2a8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   ba2a8:	6803      	ldr	r3, [r0, #0]
   ba2aa:	689b      	ldr	r3, [r3, #8]
   ba2ac:	4718      	bx	r3

000ba2ae <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   ba2ae:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   ba2b0:	210d      	movs	r1, #13
{
   ba2b2:	4605      	mov	r5, r0
  size_t n = print('\r');
   ba2b4:	f7ff fff8 	bl	ba2a8 <_ZN5Print5printEc>
  n += print('\n');
   ba2b8:	210a      	movs	r1, #10
  size_t n = print('\r');
   ba2ba:	4604      	mov	r4, r0
  n += print('\n');
   ba2bc:	4628      	mov	r0, r5
   ba2be:	f7ff fff3 	bl	ba2a8 <_ZN5Print5printEc>
  return n;
}
   ba2c2:	4420      	add	r0, r4
   ba2c4:	bd38      	pop	{r3, r4, r5, pc}

000ba2c6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   ba2c6:	b538      	push	{r3, r4, r5, lr}
   ba2c8:	4605      	mov	r5, r0
  return write(str);
   ba2ca:	f7ff ffd7 	bl	ba27c <_ZN5Print5writeEPKc>
   ba2ce:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   ba2d0:	4628      	mov	r0, r5
   ba2d2:	f7ff ffec 	bl	ba2ae <_ZN5Print7printlnEv>
  return n;
}
   ba2d6:	4420      	add	r0, r4
   ba2d8:	bd38      	pop	{r3, r4, r5, pc}

000ba2da <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   ba2da:	b530      	push	{r4, r5, lr}
   ba2dc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   ba2de:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   ba2e0:	2a01      	cmp	r2, #1
  *str = '\0';
   ba2e2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   ba2e6:	bf98      	it	ls
   ba2e8:	220a      	movls	r2, #10
   ba2ea:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   ba2ec:	460d      	mov	r5, r1
   ba2ee:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   ba2f2:	fb01 5312 	mls	r3, r1, r2, r5
   ba2f6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba2fa:	2b09      	cmp	r3, #9
   ba2fc:	bf94      	ite	ls
   ba2fe:	3330      	addls	r3, #48	; 0x30
   ba300:	3337      	addhi	r3, #55	; 0x37
   ba302:	b2db      	uxtb	r3, r3
  } while(n);
   ba304:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba306:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   ba30a:	d9ef      	bls.n	ba2ec <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   ba30c:	4621      	mov	r1, r4
   ba30e:	f7ff ffb5 	bl	ba27c <_ZN5Print5writeEPKc>
}
   ba312:	b00b      	add	sp, #44	; 0x2c
   ba314:	bd30      	pop	{r4, r5, pc}

000ba316 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   ba316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba31a:	b086      	sub	sp, #24
   ba31c:	af00      	add	r7, sp, #0
   ba31e:	4605      	mov	r5, r0
   ba320:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   ba322:	1d38      	adds	r0, r7, #4
   ba324:	2114      	movs	r1, #20
{
   ba326:	4614      	mov	r4, r2
    va_copy(args2, args);
   ba328:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   ba32a:	f7fe fbad 	bl	b8a88 <vsnprintf>

    if (n<bufsize)
   ba32e:	2813      	cmp	r0, #19
   ba330:	d80e      	bhi.n	ba350 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   ba332:	1d39      	adds	r1, r7, #4
   ba334:	4628      	mov	r0, r5
   ba336:	f7ff ffa1 	bl	ba27c <_ZN5Print5writeEPKc>
   ba33a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   ba33c:	b11e      	cbz	r6, ba346 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   ba33e:	4628      	mov	r0, r5
   ba340:	f7ff ffb5 	bl	ba2ae <_ZN5Print7printlnEv>
   ba344:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   ba346:	4620      	mov	r0, r4
   ba348:	3718      	adds	r7, #24
   ba34a:	46bd      	mov	sp, r7
   ba34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   ba350:	f100 0308 	add.w	r3, r0, #8
   ba354:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   ba358:	46e8      	mov	r8, sp
        char bigger[n+1];
   ba35a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   ba35e:	4622      	mov	r2, r4
   ba360:	1c41      	adds	r1, r0, #1
   ba362:	683b      	ldr	r3, [r7, #0]
   ba364:	4668      	mov	r0, sp
   ba366:	f7fe fb8f 	bl	b8a88 <vsnprintf>
  return write(str);
   ba36a:	4669      	mov	r1, sp
   ba36c:	4628      	mov	r0, r5
   ba36e:	f7ff ff85 	bl	ba27c <_ZN5Print5writeEPKc>
   ba372:	4604      	mov	r4, r0
   ba374:	46c5      	mov	sp, r8
   ba376:	e7e1      	b.n	ba33c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000ba378 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   ba378:	4b01      	ldr	r3, [pc, #4]	; (ba380 <_GLOBAL__sub_I_RGB+0x8>)
   ba37a:	2200      	movs	r2, #0
   ba37c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   ba37e:	4770      	bx	lr
   ba380:	2003e6dc 	.word	0x2003e6dc

000ba384 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   ba384:	b510      	push	{r4, lr}
   ba386:	4604      	mov	r4, r0
{
	free(buffer);
   ba388:	6800      	ldr	r0, [r0, #0]
   ba38a:	f7fe fb65 	bl	b8a58 <free>
}
   ba38e:	4620      	mov	r0, r4
   ba390:	bd10      	pop	{r4, pc}

000ba392 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   ba392:	b510      	push	{r4, lr}
   ba394:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   ba396:	6800      	ldr	r0, [r0, #0]
   ba398:	b108      	cbz	r0, ba39e <_ZN6String10invalidateEv+0xc>
   ba39a:	f7fe fb5d 	bl	b8a58 <free>
	buffer = NULL;
   ba39e:	2300      	movs	r3, #0
	capacity = len = 0;
   ba3a0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   ba3a4:	6023      	str	r3, [r4, #0]
}
   ba3a6:	bd10      	pop	{r4, pc}

000ba3a8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   ba3a8:	b538      	push	{r3, r4, r5, lr}
   ba3aa:	4604      	mov	r4, r0
   ba3ac:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   ba3ae:	6800      	ldr	r0, [r0, #0]
   ba3b0:	3101      	adds	r1, #1
   ba3b2:	f7fe fb59 	bl	b8a68 <realloc>
	if (newbuffer) {
   ba3b6:	b110      	cbz	r0, ba3be <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   ba3b8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   ba3bc:	2001      	movs	r0, #1
	}
	return 0;
}
   ba3be:	bd38      	pop	{r3, r4, r5, pc}

000ba3c0 <_ZN6String7reserveEj>:
{
   ba3c0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   ba3c2:	6803      	ldr	r3, [r0, #0]
{
   ba3c4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   ba3c6:	b123      	cbz	r3, ba3d2 <_ZN6String7reserveEj+0x12>
   ba3c8:	6843      	ldr	r3, [r0, #4]
   ba3ca:	428b      	cmp	r3, r1
   ba3cc:	d301      	bcc.n	ba3d2 <_ZN6String7reserveEj+0x12>
   ba3ce:	2001      	movs	r0, #1
}
   ba3d0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   ba3d2:	4620      	mov	r0, r4
   ba3d4:	f7ff ffe8 	bl	ba3a8 <_ZN6String12changeBufferEj>
   ba3d8:	2800      	cmp	r0, #0
   ba3da:	d0f9      	beq.n	ba3d0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   ba3dc:	68a3      	ldr	r3, [r4, #8]
   ba3de:	2b00      	cmp	r3, #0
   ba3e0:	d1f5      	bne.n	ba3ce <_ZN6String7reserveEj+0xe>
   ba3e2:	6822      	ldr	r2, [r4, #0]
   ba3e4:	7013      	strb	r3, [r2, #0]
   ba3e6:	e7f2      	b.n	ba3ce <_ZN6String7reserveEj+0xe>

000ba3e8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   ba3e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba3ea:	460d      	mov	r5, r1
	if (!reserve(length)) {
   ba3ec:	4611      	mov	r1, r2
   ba3ee:	9201      	str	r2, [sp, #4]
{
   ba3f0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   ba3f2:	f7ff ffe5 	bl	ba3c0 <_ZN6String7reserveEj>
   ba3f6:	9a01      	ldr	r2, [sp, #4]
   ba3f8:	b928      	cbnz	r0, ba406 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   ba3fa:	4620      	mov	r0, r4
   ba3fc:	f7ff ffc9 	bl	ba392 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   ba400:	4620      	mov	r0, r4
   ba402:	b003      	add	sp, #12
   ba404:	bd30      	pop	{r4, r5, pc}
	len = length;
   ba406:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   ba408:	4629      	mov	r1, r5
   ba40a:	6820      	ldr	r0, [r4, #0]
   ba40c:	f001 fe82 	bl	bc114 <memcpy>
	buffer[len] = 0;
   ba410:	6822      	ldr	r2, [r4, #0]
   ba412:	68a3      	ldr	r3, [r4, #8]
   ba414:	2100      	movs	r1, #0
   ba416:	54d1      	strb	r1, [r2, r3]
	return *this;
   ba418:	e7f2      	b.n	ba400 <_ZN6String4copyEPKcj+0x18>

000ba41a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   ba41a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   ba41c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   ba41e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   ba422:	4604      	mov	r4, r0
	len = 0;
   ba424:	6083      	str	r3, [r0, #8]
	flags = 0;
   ba426:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   ba428:	b141      	cbz	r1, ba43c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   ba42a:	4608      	mov	r0, r1
   ba42c:	9101      	str	r1, [sp, #4]
   ba42e:	f001 fee1 	bl	bc1f4 <strlen>
   ba432:	9901      	ldr	r1, [sp, #4]
   ba434:	4602      	mov	r2, r0
   ba436:	4620      	mov	r0, r4
   ba438:	f7ff ffd6 	bl	ba3e8 <_ZN6String4copyEPKcj>
}
   ba43c:	4620      	mov	r0, r4
   ba43e:	b002      	add	sp, #8
   ba440:	bd10      	pop	{r4, pc}

000ba442 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   ba442:	b538      	push	{r3, r4, r5, lr}
   ba444:	4605      	mov	r5, r0
	if (buffer) {
   ba446:	6800      	ldr	r0, [r0, #0]
{
   ba448:	460c      	mov	r4, r1
	if (buffer) {
   ba44a:	b168      	cbz	r0, ba468 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   ba44c:	686a      	ldr	r2, [r5, #4]
   ba44e:	688b      	ldr	r3, [r1, #8]
   ba450:	429a      	cmp	r2, r3
   ba452:	d307      	bcc.n	ba464 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   ba454:	6809      	ldr	r1, [r1, #0]
   ba456:	f001 fec5 	bl	bc1e4 <strcpy>
			len = rhs.len;
   ba45a:	68a3      	ldr	r3, [r4, #8]
   ba45c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   ba45e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   ba460:	60a3      	str	r3, [r4, #8]
}
   ba462:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   ba464:	f7fe faf8 	bl	b8a58 <free>
	buffer = rhs.buffer;
   ba468:	6823      	ldr	r3, [r4, #0]
   ba46a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   ba46c:	6863      	ldr	r3, [r4, #4]
   ba46e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   ba470:	68a3      	ldr	r3, [r4, #8]
   ba472:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   ba474:	2300      	movs	r3, #0
	rhs.capacity = 0;
   ba476:	e9c4 3300 	strd	r3, r3, [r4]
   ba47a:	e7f1      	b.n	ba460 <_ZN6String4moveERS_+0x1e>

000ba47c <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   ba47c:	4288      	cmp	r0, r1
{
   ba47e:	b510      	push	{r4, lr}
   ba480:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   ba482:	d005      	beq.n	ba490 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   ba484:	680b      	ldr	r3, [r1, #0]
   ba486:	b12b      	cbz	r3, ba494 <_ZN6StringaSERKS_+0x18>
   ba488:	688a      	ldr	r2, [r1, #8]
   ba48a:	4619      	mov	r1, r3
   ba48c:	f7ff ffac 	bl	ba3e8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   ba490:	4620      	mov	r0, r4
   ba492:	bd10      	pop	{r4, pc}
	else invalidate();
   ba494:	f7ff ff7d 	bl	ba392 <_ZN6String10invalidateEv>
   ba498:	e7fa      	b.n	ba490 <_ZN6StringaSERKS_+0x14>

000ba49a <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   ba49a:	4288      	cmp	r0, r1
{
   ba49c:	b510      	push	{r4, lr}
   ba49e:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   ba4a0:	d001      	beq.n	ba4a6 <_ZN6StringaSEOS_+0xc>
   ba4a2:	f7ff ffce 	bl	ba442 <_ZN6String4moveERS_>
	return *this;
}
   ba4a6:	4620      	mov	r0, r4
   ba4a8:	bd10      	pop	{r4, pc}

000ba4aa <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   ba4aa:	b513      	push	{r0, r1, r4, lr}
   ba4ac:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   ba4ae:	b159      	cbz	r1, ba4c8 <_ZN6StringaSEPKc+0x1e>
   ba4b0:	4608      	mov	r0, r1
   ba4b2:	9101      	str	r1, [sp, #4]
   ba4b4:	f001 fe9e 	bl	bc1f4 <strlen>
   ba4b8:	9901      	ldr	r1, [sp, #4]
   ba4ba:	4602      	mov	r2, r0
   ba4bc:	4620      	mov	r0, r4
   ba4be:	f7ff ff93 	bl	ba3e8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   ba4c2:	4620      	mov	r0, r4
   ba4c4:	b002      	add	sp, #8
   ba4c6:	bd10      	pop	{r4, pc}
	else invalidate();
   ba4c8:	f7ff ff63 	bl	ba392 <_ZN6String10invalidateEv>
   ba4cc:	e7f9      	b.n	ba4c2 <_ZN6StringaSEPKc+0x18>

000ba4ce <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   ba4ce:	b510      	push	{r4, lr}
   ba4d0:	4604      	mov	r4, r0
   ba4d2:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   ba4d4:	2300      	movs	r3, #0
	capacity = 0;
   ba4d6:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   ba4da:	60a3      	str	r3, [r4, #8]
	flags = 0;
   ba4dc:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   ba4de:	4608      	mov	r0, r1
	itoa(value, buf, base);
   ba4e0:	a901      	add	r1, sp, #4
   ba4e2:	f000 fd15 	bl	baf10 <itoa>
	*this = buf;
   ba4e6:	a901      	add	r1, sp, #4
   ba4e8:	4620      	mov	r0, r4
   ba4ea:	f7ff ffde 	bl	ba4aa <_ZN6StringaSEPKc>
}
   ba4ee:	4620      	mov	r0, r4
   ba4f0:	b00a      	add	sp, #40	; 0x28
   ba4f2:	bd10      	pop	{r4, pc}

000ba4f4 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   ba4f4:	b570      	push	{r4, r5, r6, lr}
   ba4f6:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   ba4f8:	460e      	mov	r6, r1
   ba4fa:	b909      	cbnz	r1, ba500 <_ZN6String6concatEPKcj+0xc>
   ba4fc:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   ba4fe:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   ba500:	b16a      	cbz	r2, ba51e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   ba502:	6884      	ldr	r4, [r0, #8]
   ba504:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   ba506:	4621      	mov	r1, r4
   ba508:	f7ff ff5a 	bl	ba3c0 <_ZN6String7reserveEj>
   ba50c:	2800      	cmp	r0, #0
   ba50e:	d0f5      	beq.n	ba4fc <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   ba510:	6828      	ldr	r0, [r5, #0]
   ba512:	68ab      	ldr	r3, [r5, #8]
   ba514:	4631      	mov	r1, r6
   ba516:	4418      	add	r0, r3
   ba518:	f001 fe64 	bl	bc1e4 <strcpy>
	len = newlen;
   ba51c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   ba51e:	2001      	movs	r0, #1
   ba520:	e7ed      	b.n	ba4fe <_ZN6String6concatEPKcj+0xa>

000ba522 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   ba522:	688a      	ldr	r2, [r1, #8]
   ba524:	6809      	ldr	r1, [r1, #0]
   ba526:	f7ff bfe5 	b.w	ba4f4 <_ZN6String6concatEPKcj>

000ba52a <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   ba52a:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   ba52c:	2300      	movs	r3, #0
	buf[0] = c;
   ba52e:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   ba532:	2201      	movs	r2, #1
   ba534:	a901      	add	r1, sp, #4
	buf[1] = 0;
   ba536:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   ba53a:	f7ff ffdb 	bl	ba4f4 <_ZN6String6concatEPKcj>
}
   ba53e:	b003      	add	sp, #12
   ba540:	f85d fb04 	ldr.w	pc, [sp], #4

000ba544 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   ba544:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   ba546:	688a      	ldr	r2, [r1, #8]
   ba548:	6809      	ldr	r1, [r1, #0]
{
   ba54a:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   ba54c:	f7ff ffd2 	bl	ba4f4 <_ZN6String6concatEPKcj>
   ba550:	b910      	cbnz	r0, ba558 <_ZplRK15StringSumHelperRK6String+0x14>
   ba552:	4620      	mov	r0, r4
   ba554:	f7ff ff1d 	bl	ba392 <_ZN6String10invalidateEv>
	return a;
}
   ba558:	4620      	mov	r0, r4
   ba55a:	bd10      	pop	{r4, pc}

000ba55c <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   ba55c:	b513      	push	{r0, r1, r4, lr}
   ba55e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   ba560:	b929      	cbnz	r1, ba56e <_ZplRK15StringSumHelperPKc+0x12>
   ba562:	4620      	mov	r0, r4
   ba564:	f7ff ff15 	bl	ba392 <_ZN6String10invalidateEv>
	return a;
}
   ba568:	4620      	mov	r0, r4
   ba56a:	b002      	add	sp, #8
   ba56c:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   ba56e:	4608      	mov	r0, r1
   ba570:	9101      	str	r1, [sp, #4]
   ba572:	f001 fe3f 	bl	bc1f4 <strlen>
   ba576:	9901      	ldr	r1, [sp, #4]
   ba578:	4602      	mov	r2, r0
   ba57a:	4620      	mov	r0, r4
   ba57c:	f7ff ffba 	bl	ba4f4 <_ZN6String6concatEPKcj>
   ba580:	2800      	cmp	r0, #0
   ba582:	d0ee      	beq.n	ba562 <_ZplRK15StringSumHelperPKc+0x6>
   ba584:	e7f0      	b.n	ba568 <_ZplRK15StringSumHelperPKc+0xc>

000ba586 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   ba586:	6802      	ldr	r2, [r0, #0]
{
   ba588:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   ba58a:	6809      	ldr	r1, [r1, #0]
   ba58c:	b162      	cbz	r2, ba5a8 <_ZNK6String9compareToERKS_+0x22>
   ba58e:	b941      	cbnz	r1, ba5a2 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   ba590:	6880      	ldr	r0, [r0, #8]
   ba592:	b160      	cbz	r0, ba5ae <_ZNK6String9compareToERKS_+0x28>
   ba594:	7810      	ldrb	r0, [r2, #0]
   ba596:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   ba598:	6898      	ldr	r0, [r3, #8]
   ba59a:	b140      	cbz	r0, ba5ae <_ZNK6String9compareToERKS_+0x28>
   ba59c:	7809      	ldrb	r1, [r1, #0]
   ba59e:	4248      	negs	r0, r1
   ba5a0:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   ba5a2:	4610      	mov	r0, r2
   ba5a4:	f001 be14 	b.w	bc1d0 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   ba5a8:	2900      	cmp	r1, #0
   ba5aa:	d1f5      	bne.n	ba598 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   ba5ac:	4608      	mov	r0, r1
}
   ba5ae:	4770      	bx	lr

000ba5b0 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   ba5b0:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   ba5b2:	6882      	ldr	r2, [r0, #8]
   ba5b4:	688b      	ldr	r3, [r1, #8]
   ba5b6:	429a      	cmp	r2, r3
   ba5b8:	d105      	bne.n	ba5c6 <_ZNK6String6equalsERKS_+0x16>
   ba5ba:	f7ff ffe4 	bl	ba586 <_ZNK6String9compareToERKS_>
   ba5be:	fab0 f080 	clz	r0, r0
   ba5c2:	0940      	lsrs	r0, r0, #5
}
   ba5c4:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   ba5c6:	2000      	movs	r0, #0
   ba5c8:	e7fc      	b.n	ba5c4 <_ZNK6String6equalsERKS_+0x14>

000ba5ca <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
   ba5ca:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   ba5cc:	6882      	ldr	r2, [r0, #8]
   ba5ce:	b93a      	cbnz	r2, ba5e0 <_ZNK6String6equalsEPKc+0x16>
   ba5d0:	b121      	cbz	r1, ba5dc <_ZNK6String6equalsEPKc+0x12>
   ba5d2:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   ba5d4:	fab0 f080 	clz	r0, r0
   ba5d8:	0940      	lsrs	r0, r0, #5
   ba5da:	e000      	b.n	ba5de <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   ba5dc:	2001      	movs	r0, #1
}
   ba5de:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   ba5e0:	6800      	ldr	r0, [r0, #0]
   ba5e2:	b909      	cbnz	r1, ba5e8 <_ZNK6String6equalsEPKc+0x1e>
   ba5e4:	7800      	ldrb	r0, [r0, #0]
   ba5e6:	e7f5      	b.n	ba5d4 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   ba5e8:	f001 fdf2 	bl	bc1d0 <strcmp>
   ba5ec:	e7f2      	b.n	ba5d4 <_ZNK6String6equalsEPKc+0xa>

000ba5ee <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   ba5ee:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   ba5f0:	6883      	ldr	r3, [r0, #8]
   ba5f2:	4293      	cmp	r3, r2
   ba5f4:	d907      	bls.n	ba606 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   ba5f6:	6804      	ldr	r4, [r0, #0]
   ba5f8:	6809      	ldr	r1, [r1, #0]
   ba5fa:	18a0      	adds	r0, r4, r2
   ba5fc:	f001 fe22 	bl	bc244 <strstr>
	if (found == NULL) return -1;
   ba600:	b108      	cbz	r0, ba606 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   ba602:	1b00      	subs	r0, r0, r4
}
   ba604:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   ba606:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   ba60a:	e7fb      	b.n	ba604 <_ZNK6String7indexOfERKS_j+0x16>

000ba60c <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   ba60c:	2200      	movs	r2, #0
   ba60e:	f7ff bfee 	b.w	ba5ee <_ZNK6String7indexOfERKS_j>
	...

000ba614 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   ba614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   ba616:	429a      	cmp	r2, r3
{
   ba618:	460f      	mov	r7, r1
   ba61a:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   ba61c:	490c      	ldr	r1, [pc, #48]	; (ba650 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   ba61e:	bf88      	it	hi
   ba620:	4613      	movhi	r3, r2
{
   ba622:	4614      	mov	r4, r2
   ba624:	4606      	mov	r6, r0
	if (left > right) {
   ba626:	bf84      	itt	hi
   ba628:	462c      	movhi	r4, r5
   ba62a:	461d      	movhi	r5, r3
	String out;
   ba62c:	f7ff fef5 	bl	ba41a <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   ba630:	68bb      	ldr	r3, [r7, #8]
   ba632:	42a3      	cmp	r3, r4
   ba634:	d30a      	bcc.n	ba64c <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   ba636:	6839      	ldr	r1, [r7, #0]
   ba638:	42ab      	cmp	r3, r5
   ba63a:	bf94      	ite	ls
   ba63c:	ebc4 0203 	rsbls	r2, r4, r3
   ba640:	ebc4 0205 	rsbhi	r2, r4, r5
   ba644:	4421      	add	r1, r4
   ba646:	4630      	mov	r0, r6
   ba648:	f7ff fece 	bl	ba3e8 <_ZN6String4copyEPKcj>
	return out;
}
   ba64c:	4630      	mov	r0, r6
   ba64e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba650:	000be70e 	.word	0x000be70e

000ba654 <_ZNK6String9substringEj>:
{
   ba654:	b510      	push	{r4, lr}
   ba656:	4604      	mov	r4, r0
	return substring(left, len);
   ba658:	688b      	ldr	r3, [r1, #8]
   ba65a:	f7ff ffdb 	bl	ba614 <_ZNK6String9substringEjj>
}
   ba65e:	4620      	mov	r0, r4
   ba660:	bd10      	pop	{r4, pc}
	...

000ba664 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   ba664:	4b05      	ldr	r3, [pc, #20]	; (ba67c <_GLOBAL__sub_I_System+0x18>)
   ba666:	2202      	movs	r2, #2
   ba668:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   ba66a:	4b05      	ldr	r3, [pc, #20]	; (ba680 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   ba66c:	4a05      	ldr	r2, [pc, #20]	; (ba684 <_GLOBAL__sub_I_System+0x20>)
   ba66e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   ba670:	2000      	movs	r0, #0
   ba672:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   ba676:	f7fe b943 	b.w	b8900 <set_system_mode>
   ba67a:	bf00      	nop
   ba67c:	2003e6f8 	.word	0x2003e6f8
   ba680:	2003e6ec 	.word	0x2003e6ec
   ba684:	ffff0000 	.word	0xffff0000

000ba688 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   ba688:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   ba68a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   ba68c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   ba690:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   ba692:	2201      	movs	r2, #1
   ba694:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba698:	f10d 0107 	add.w	r1, sp, #7
   ba69c:	47a0      	blx	r4
}
   ba69e:	b002      	add	sp, #8
   ba6a0:	bd10      	pop	{r4, pc}

000ba6a2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   ba6a2:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   ba6a4:	6803      	ldr	r3, [r0, #0]
   ba6a6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   ba6a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba6ac:	46a4      	mov	ip, r4
}
   ba6ae:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   ba6b2:	4760      	bx	ip

000ba6b4 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   ba6b4:	b513      	push	{r0, r1, r4, lr}
   ba6b6:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   ba6b8:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   ba6ba:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   ba6be:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   ba6c0:	f10d 0107 	add.w	r1, sp, #7
   ba6c4:	2201      	movs	r2, #1
   ba6c6:	47a0      	blx	r4
}
   ba6c8:	b002      	add	sp, #8
   ba6ca:	bd10      	pop	{r4, pc}

000ba6cc <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   ba6cc:	b510      	push	{r4, lr}
      { return _M_ptr; }
   ba6ce:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   ba6d0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   ba6d4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   ba6d8:	429a      	cmp	r2, r3
int TCPClient::read() {
   ba6da:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   ba6dc:	d008      	beq.n	ba6f0 <_ZN9TCPClient4readEv+0x24>
   ba6de:	6963      	ldr	r3, [r4, #20]
   ba6e0:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   ba6e4:	1c51      	adds	r1, r2, #1
   ba6e6:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   ba6ea:	4413      	add	r3, r2
   ba6ec:	7918      	ldrb	r0, [r3, #4]
}
   ba6ee:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   ba6f0:	6803      	ldr	r3, [r0, #0]
   ba6f2:	691b      	ldr	r3, [r3, #16]
   ba6f4:	4798      	blx	r3
   ba6f6:	2800      	cmp	r0, #0
   ba6f8:	d1f1      	bne.n	ba6de <_ZN9TCPClient4readEv+0x12>
   ba6fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   ba6fe:	e7f6      	b.n	ba6ee <_ZN9TCPClient4readEv+0x22>

000ba700 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   ba700:	4770      	bx	lr

000ba702 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   ba702:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   ba704:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   ba706:	43c0      	mvns	r0, r0
   ba708:	0fc0      	lsrs	r0, r0, #31
   ba70a:	4770      	bx	lr

000ba70c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   ba70c:	4770      	bx	lr
	...

000ba710 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   ba710:	4b06      	ldr	r3, [pc, #24]	; (ba72c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   ba712:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   ba714:	b510      	push	{r4, lr}
   ba716:	f100 040c 	add.w	r4, r0, #12
	    ||
   ba71a:	d005      	beq.n	ba728 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   ba71c:	4608      	mov	r0, r1
   ba71e:	f000 fd1d 	bl	bb15c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   ba722:	2800      	cmp	r0, #0
   ba724:	bf08      	it	eq
   ba726:	2400      	moveq	r4, #0
      }
   ba728:	4620      	mov	r0, r4
   ba72a:	bd10      	pop	{r4, pc}
   ba72c:	000be8e4 	.word	0x000be8e4

000ba730 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   ba730:	b510      	push	{r4, lr}
   ba732:	21ac      	movs	r1, #172	; 0xac
   ba734:	4604      	mov	r4, r0
   ba736:	f7f9 fcb4 	bl	b40a2 <_ZdlPvj>
   ba73a:	4620      	mov	r0, r4
   ba73c:	bd10      	pop	{r4, pc}

000ba73e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   ba73e:	21ac      	movs	r1, #172	; 0xac
   ba740:	f7f9 bcaf 	b.w	b40a2 <_ZdlPvj>

000ba744 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   ba744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   ba748:	f04f 0800 	mov.w	r8, #0
   ba74c:	b086      	sub	sp, #24
   ba74e:	461c      	mov	r4, r3
   ba750:	f8c0 8004 	str.w	r8, [r0, #4]
   ba754:	4605      	mov	r5, r0
   ba756:	460e      	mov	r6, r1
   ba758:	4617      	mov	r7, r2
    struct timeval tv = {};
   ba75a:	4641      	mov	r1, r8
   ba75c:	2210      	movs	r2, #16
   ba75e:	a802      	add	r0, sp, #8
   ba760:	f001 fd00 	bl	bc164 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   ba764:	1c63      	adds	r3, r4, #1
   ba766:	d009      	beq.n	ba77c <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   ba768:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba76c:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   ba770:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   ba774:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   ba778:	435c      	muls	r4, r3
   ba77a:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   ba77c:	6968      	ldr	r0, [r5, #20]
   ba77e:	2310      	movs	r3, #16
   ba780:	9300      	str	r3, [sp, #0]
   ba782:	6800      	ldr	r0, [r0, #0]
   ba784:	ab02      	add	r3, sp, #8
   ba786:	f241 0205 	movw	r2, #4101	; 0x1005
   ba78a:	f640 71ff 	movw	r1, #4095	; 0xfff
   ba78e:	f7fe f807 	bl	b87a0 <sock_setsockopt>
    if (ret < 0) {
   ba792:	2800      	cmp	r0, #0
   ba794:	da07      	bge.n	ba7a6 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   ba796:	f7fe f98f 	bl	b8ab8 <__errno>
   ba79a:	6803      	ldr	r3, [r0, #0]
   ba79c:	606b      	str	r3, [r5, #4]
        return 0;
   ba79e:	2000      	movs	r0, #0
}
   ba7a0:	b006      	add	sp, #24
   ba7a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   ba7a6:	6968      	ldr	r0, [r5, #20]
   ba7a8:	2300      	movs	r3, #0
   ba7aa:	6800      	ldr	r0, [r0, #0]
   ba7ac:	463a      	mov	r2, r7
   ba7ae:	4631      	mov	r1, r6
   ba7b0:	f7fe f816 	bl	b87e0 <sock_send>
    if (ret < 0) {
   ba7b4:	1e03      	subs	r3, r0, #0
   ba7b6:	dbee      	blt.n	ba796 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   ba7b8:	4618      	mov	r0, r3
   ba7ba:	e7f1      	b.n	ba7a0 <_ZN9TCPClient5writeEPKhjm+0x5c>

000ba7bc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   ba7bc:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   ba7be:	6984      	ldr	r4, [r0, #24]
   ba7c0:	4b0a      	ldr	r3, [pc, #40]	; (ba7ec <_ZN9TCPClientD1Ev+0x30>)
   ba7c2:	6003      	str	r3, [r0, #0]
   ba7c4:	4605      	mov	r5, r0
   ba7c6:	b17c      	cbz	r4, ba7e8 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   ba7c8:	6863      	ldr	r3, [r4, #4]
   ba7ca:	3b01      	subs	r3, #1
   ba7cc:	6063      	str	r3, [r4, #4]
   ba7ce:	b95b      	cbnz	r3, ba7e8 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   ba7d0:	6823      	ldr	r3, [r4, #0]
   ba7d2:	4620      	mov	r0, r4
   ba7d4:	689b      	ldr	r3, [r3, #8]
   ba7d6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   ba7d8:	68a3      	ldr	r3, [r4, #8]
   ba7da:	3b01      	subs	r3, #1
   ba7dc:	60a3      	str	r3, [r4, #8]
   ba7de:	b91b      	cbnz	r3, ba7e8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   ba7e0:	6823      	ldr	r3, [r4, #0]
   ba7e2:	4620      	mov	r0, r4
   ba7e4:	68db      	ldr	r3, [r3, #12]
   ba7e6:	4798      	blx	r3
   ba7e8:	4628      	mov	r0, r5
   ba7ea:	bd38      	pop	{r3, r4, r5, pc}
   ba7ec:	000bea18 	.word	0x000bea18

000ba7f0 <_ZN9TCPClientD0Ev>:
   ba7f0:	b510      	push	{r4, lr}
   ba7f2:	4604      	mov	r4, r0
   ba7f4:	f7ff ffe2 	bl	ba7bc <_ZN9TCPClientD1Ev>
   ba7f8:	4620      	mov	r0, r4
   ba7fa:	211c      	movs	r1, #28
   ba7fc:	f7f9 fc51 	bl	b40a2 <_ZdlPvj>
   ba800:	4620      	mov	r0, r4
   ba802:	bd10      	pop	{r4, pc}

000ba804 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   ba804:	b530      	push	{r4, r5, lr}
   ba806:	b087      	sub	sp, #28
   ba808:	4604      	mov	r4, r0
class IPAddress : public Printable {
   ba80a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   ba80c:	4668      	mov	r0, sp
   ba80e:	f7ff fc55 	bl	ba0bc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   ba812:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba814:	3404      	adds	r4, #4
   ba816:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba818:	682b      	ldr	r3, [r5, #0]
   ba81a:	7023      	strb	r3, [r4, #0]
    }
   ba81c:	b007      	add	sp, #28
   ba81e:	bd30      	pop	{r4, r5, pc}

000ba820 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   ba820:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   ba822:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   ba824:	4b05      	ldr	r3, [pc, #20]	; (ba83c <_ZN9TCPClient8remoteIPEv+0x1c>)
   ba826:	4604      	mov	r4, r0
   ba828:	358c      	adds	r5, #140	; 0x8c
   ba82a:	f844 3b04 	str.w	r3, [r4], #4
   ba82e:	4606      	mov	r6, r0
   ba830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba834:	682b      	ldr	r3, [r5, #0]
   ba836:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   ba838:	4630      	mov	r0, r6
   ba83a:	bd70      	pop	{r4, r5, r6, pc}
   ba83c:	000be990 	.word	0x000be990

000ba840 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   ba840:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba844:	4698      	mov	r8, r3
    stop();
   ba846:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   ba848:	b093      	sub	sp, #76	; 0x4c
   ba84a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   ba84c:	2400      	movs	r4, #0
    stop();
   ba84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   ba850:	4606      	mov	r6, r0
   ba852:	4617      	mov	r7, r2
    stop();
   ba854:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   ba856:	4628      	mov	r0, r5
   ba858:	466b      	mov	r3, sp
   ba85a:	4622      	mov	r2, r4
   ba85c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   ba85e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   ba860:	f7fd ff96 	bl	b8790 <netdb_getaddrinfo>
   ba864:	4605      	mov	r5, r0
   ba866:	2800      	cmp	r0, #0
   ba868:	d163      	bne.n	ba932 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   ba86a:	9b00      	ldr	r3, [sp, #0]
   ba86c:	2b00      	cmp	r3, #0
   ba86e:	d04b      	beq.n	ba908 <_ZN9TCPClient7connectEPKctm+0xc8>
   ba870:	695b      	ldr	r3, [r3, #20]
   ba872:	2b00      	cmp	r3, #0
   ba874:	d048      	beq.n	ba908 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   ba876:	a806      	add	r0, sp, #24
   ba878:	f7ff fbdc 	bl	ba034 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   ba87c:	9b00      	ldr	r3, [sp, #0]
   ba87e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   ba880:	7863      	ldrb	r3, [r4, #1]
   ba882:	2b02      	cmp	r3, #2
   ba884:	d104      	bne.n	ba890 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   ba886:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   ba888:	a806      	add	r0, sp, #24
   ba88a:	f7ff ffbb 	bl	ba804 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   ba88e:	e026      	b.n	ba8de <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   ba890:	2b0a      	cmp	r3, #10
   ba892:	d124      	bne.n	ba8de <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   ba894:	2211      	movs	r2, #17
   ba896:	4629      	mov	r1, r5
   ba898:	a801      	add	r0, sp, #4
   ba89a:	f001 fc63 	bl	bc164 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   ba89e:	68a3      	ldr	r3, [r4, #8]
   ba8a0:	2b00      	cmp	r3, #0
   ba8a2:	d038      	beq.n	ba916 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   ba8a4:	f104 0308 	add.w	r3, r4, #8
   ba8a8:	f10d 0c04 	add.w	ip, sp, #4
   ba8ac:	3418      	adds	r4, #24
   ba8ae:	6818      	ldr	r0, [r3, #0]
   ba8b0:	6859      	ldr	r1, [r3, #4]
   ba8b2:	4662      	mov	r2, ip
   ba8b4:	c203      	stmia	r2!, {r0, r1}
   ba8b6:	3308      	adds	r3, #8
   ba8b8:	42a3      	cmp	r3, r4
   ba8ba:	4694      	mov	ip, r2
   ba8bc:	d1f7      	bne.n	ba8ae <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   ba8be:	2306      	movs	r3, #6
            addr = IPAddress(a);
   ba8c0:	a901      	add	r1, sp, #4
   ba8c2:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   ba8c4:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   ba8c8:	f7ff fbc2 	bl	ba050 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   ba8cc:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   ba8d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   ba8d4:	ac07      	add	r4, sp, #28
   ba8d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba8d8:	f8dc 3000 	ldr.w	r3, [ip]
   ba8dc:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   ba8de:	a806      	add	r0, sp, #24
   ba8e0:	f7ff fbc8 	bl	ba074 <_ZNK9IPAddresscvbEv>
        if (addr) {
   ba8e4:	b180      	cbz	r0, ba908 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   ba8e6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   ba8e8:	ad07      	add	r5, sp, #28
   ba8ea:	f8d3 9020 	ldr.w	r9, [r3, #32]
   ba8ee:	4b12      	ldr	r3, [pc, #72]	; (ba938 <_ZN9TCPClient7connectEPKctm+0xf8>)
   ba8f0:	930c      	str	r3, [sp, #48]	; 0x30
   ba8f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba8f4:	ac0d      	add	r4, sp, #52	; 0x34
   ba8f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba8f8:	682b      	ldr	r3, [r5, #0]
   ba8fa:	7023      	strb	r3, [r4, #0]
   ba8fc:	463a      	mov	r2, r7
   ba8fe:	4643      	mov	r3, r8
   ba900:	a90c      	add	r1, sp, #48	; 0x30
   ba902:	4630      	mov	r0, r6
   ba904:	47c8      	blx	r9
   ba906:	4605      	mov	r5, r0
    SCOPE_GUARD({
   ba908:	9800      	ldr	r0, [sp, #0]
   ba90a:	f7fd ff39 	bl	b8780 <netdb_freeaddrinfo>
}
   ba90e:	4628      	mov	r0, r5
   ba910:	b013      	add	sp, #76	; 0x4c
   ba912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   ba916:	68e3      	ldr	r3, [r4, #12]
   ba918:	2b00      	cmp	r3, #0
   ba91a:	d1c3      	bne.n	ba8a4 <_ZN9TCPClient7connectEPKctm+0x64>
   ba91c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   ba920:	f8d4 9010 	ldr.w	r9, [r4, #16]
   ba924:	f7fd ff1c 	bl	b8760 <inet_htonl>
   ba928:	4581      	cmp	r9, r0
   ba92a:	d1bb      	bne.n	ba8a4 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   ba92c:	f104 0114 	add.w	r1, r4, #20
   ba930:	e7aa      	b.n	ba888 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   ba932:	4625      	mov	r5, r4
   ba934:	e7e8      	b.n	ba908 <_ZN9TCPClient7connectEPKctm+0xc8>
   ba936:	bf00      	nop
   ba938:	000be990 	.word	0x000be990

000ba93c <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   ba93c:	b538      	push	{r3, r4, r5, lr}
   ba93e:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   ba940:	681a      	ldr	r2, [r3, #0]
   ba942:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   ba944:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   ba946:	da10      	bge.n	ba96a <_ZN9TCPClient9connectedEv+0x2e>
   ba948:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   ba94c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   ba950:	429a      	cmp	r2, r3
   ba952:	d10a      	bne.n	ba96a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   ba954:	6803      	ldr	r3, [r0, #0]
   ba956:	691b      	ldr	r3, [r3, #16]
   ba958:	4798      	blx	r3
        if (!rv) {
   ba95a:	4604      	mov	r4, r0
   ba95c:	b928      	cbnz	r0, ba96a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   ba95e:	682b      	ldr	r3, [r5, #0]
   ba960:	4628      	mov	r0, r5
   ba962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   ba964:	4798      	blx	r3
        rv = available();
   ba966:	4620      	mov	r0, r4
}
   ba968:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   ba96a:	2001      	movs	r0, #1
   ba96c:	e7fc      	b.n	ba968 <_ZN9TCPClient9connectedEv+0x2c>

000ba96e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   ba96e:	b510      	push	{r4, lr}
   ba970:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   ba972:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   ba976:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   ba97a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   ba97c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   ba97e:	d005      	beq.n	ba98c <_ZN9TCPClient4peekEv+0x1e>
   ba980:	6963      	ldr	r3, [r4, #20]
   ba982:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   ba986:	4413      	add	r3, r2
   ba988:	7918      	ldrb	r0, [r3, #4]
}
   ba98a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   ba98c:	6803      	ldr	r3, [r0, #0]
   ba98e:	691b      	ldr	r3, [r3, #16]
   ba990:	4798      	blx	r3
   ba992:	2800      	cmp	r0, #0
   ba994:	d1f4      	bne.n	ba980 <_ZN9TCPClient4peekEv+0x12>
   ba996:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   ba99a:	e7f6      	b.n	ba98a <_ZN9TCPClient4peekEv+0x1c>

000ba99c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   ba99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba99e:	6943      	ldr	r3, [r0, #20]
   ba9a0:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   ba9a2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   ba9a6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   ba9aa:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   ba9ac:	4605      	mov	r5, r0
   ba9ae:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   ba9b0:	d016      	beq.n	ba9e0 <_ZN9TCPClient4readEPhj+0x44>
   ba9b2:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   ba9b4:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   ba9b8:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   ba9bc:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   ba9be:	42bc      	cmp	r4, r7
   ba9c0:	bf28      	it	cs
   ba9c2:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   ba9c4:	3304      	adds	r3, #4
   ba9c6:	4622      	mov	r2, r4
   ba9c8:	4419      	add	r1, r3
   ba9ca:	4630      	mov	r0, r6
   ba9cc:	f001 fba2 	bl	bc114 <memcpy>
   ba9d0:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   ba9d2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   ba9d6:	4423      	add	r3, r4
   ba9d8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   ba9dc:	4620      	mov	r0, r4
   ba9de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   ba9e0:	6803      	ldr	r3, [r0, #0]
   ba9e2:	691b      	ldr	r3, [r3, #16]
   ba9e4:	4798      	blx	r3
   ba9e6:	2800      	cmp	r0, #0
   ba9e8:	d1e3      	bne.n	ba9b2 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   ba9ea:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   ba9ee:	e7f5      	b.n	ba9dc <_ZN9TCPClient4readEPhj+0x40>

000ba9f0 <_ZN9TCPClient12flush_bufferEv>:
   ba9f0:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   ba9f2:	2300      	movs	r3, #0
   ba9f4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   ba9f8:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   ba9fa:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   ba9fe:	4770      	bx	lr

000baa00 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   baa00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   baa04:	461f      	mov	r7, r3
    stop();
   baa06:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   baa08:	460c      	mov	r4, r1
    stop();
   baa0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   baa0c:	b08a      	sub	sp, #40	; 0x28
   baa0e:	4605      	mov	r5, r0
   baa10:	4616      	mov	r6, r2
    stop();
   baa12:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   baa14:	7d23      	ldrb	r3, [r4, #20]
   baa16:	f8d5 8014 	ldr.w	r8, [r5, #20]
   baa1a:	2b04      	cmp	r3, #4
   baa1c:	bf0c      	ite	eq
   baa1e:	2002      	moveq	r0, #2
   baa20:	200a      	movne	r0, #10
   baa22:	2206      	movs	r2, #6
   baa24:	2101      	movs	r1, #1
   baa26:	f7fd fee3 	bl	b87f0 <sock_socket>
   baa2a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   baa2e:	696b      	ldr	r3, [r5, #20]
   baa30:	681b      	ldr	r3, [r3, #0]
   baa32:	2b00      	cmp	r3, #0
   baa34:	da08      	bge.n	baa48 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   baa36:	682b      	ldr	r3, [r5, #0]
   baa38:	4628      	mov	r0, r5
   baa3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   baa3c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   baa3e:	4798      	blx	r3
}
   baa40:	4620      	mov	r0, r4
   baa42:	b00a      	add	sp, #40	; 0x28
   baa44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   baa48:	4628      	mov	r0, r5
   baa4a:	f7ff ffd1 	bl	ba9f0 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   baa4e:	b1b7      	cbz	r7, baa7e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   baa50:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   baa52:	a903      	add	r1, sp, #12
   baa54:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   baa56:	9303      	str	r3, [sp, #12]
   baa58:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   baa5c:	f7fd fe70 	bl	b8740 <if_index_to_name>
   baa60:	2800      	cmp	r0, #0
   baa62:	d1e8      	bne.n	baa36 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   baa64:	6968      	ldr	r0, [r5, #20]
   baa66:	2306      	movs	r3, #6
   baa68:	9300      	str	r3, [sp, #0]
   baa6a:	6800      	ldr	r0, [r0, #0]
   baa6c:	ab03      	add	r3, sp, #12
   baa6e:	f241 020b 	movw	r2, #4107	; 0x100b
   baa72:	f640 71ff 	movw	r1, #4095	; 0xfff
   baa76:	f7fd fe93 	bl	b87a0 <sock_setsockopt>
   baa7a:	2800      	cmp	r0, #0
   baa7c:	d1db      	bne.n	baa36 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   baa7e:	221c      	movs	r2, #28
   baa80:	2100      	movs	r1, #0
   baa82:	a803      	add	r0, sp, #12
   baa84:	f001 fb6e 	bl	bc164 <memset>
    if (ip.version() == 4) {
   baa88:	7d23      	ldrb	r3, [r4, #20]
   baa8a:	2b04      	cmp	r3, #4
   baa8c:	d11d      	bne.n	baaca <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   baa8e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   baa92:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   baa94:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   baa98:	f7fd fe6a 	bl	b8770 <inet_htons>
   baa9c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   baaa0:	6860      	ldr	r0, [r4, #4]
   baaa2:	f7fd fe5d 	bl	b8760 <inet_htonl>
   baaa6:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   baaa8:	696b      	ldr	r3, [r5, #20]
   baaaa:	221c      	movs	r2, #28
   baaac:	6818      	ldr	r0, [r3, #0]
   baaae:	a903      	add	r1, sp, #12
   baab0:	f7fd fe86 	bl	b87c0 <sock_connect>
   baab4:	2800      	cmp	r0, #0
   baab6:	d1be      	bne.n	baa36 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   baab8:	3404      	adds	r4, #4
   baaba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   baabc:	696d      	ldr	r5, [r5, #20]
   baabe:	358c      	adds	r5, #140	; 0x8c
   baac0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   baac2:	6823      	ldr	r3, [r4, #0]
   baac4:	702b      	strb	r3, [r5, #0]
    return 1; // success
   baac6:	2401      	movs	r4, #1
   baac8:	e7ba      	b.n	baa40 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   baaca:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   baace:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   baad0:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   baad4:	f7fd fe4c 	bl	b8770 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   baad8:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   baada:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   baade:	1d23      	adds	r3, r4, #4
   baae0:	f104 0714 	add.w	r7, r4, #20
   baae4:	6818      	ldr	r0, [r3, #0]
   baae6:	6859      	ldr	r1, [r3, #4]
   baae8:	4632      	mov	r2, r6
   baaea:	c203      	stmia	r2!, {r0, r1}
   baaec:	3308      	adds	r3, #8
   baaee:	42bb      	cmp	r3, r7
   baaf0:	4616      	mov	r6, r2
   baaf2:	d1f7      	bne.n	baae4 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   baaf4:	e7d8      	b.n	baaa8 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000baaf8 <_ZN9TCPClient9availableEv>:
{
   baaf8:	b530      	push	{r4, r5, lr}
   baafa:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   baafc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   bab00:	b08b      	sub	sp, #44	; 0x2c
   bab02:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   bab04:	b12b      	cbz	r3, bab12 <_ZN9TCPClient9availableEv+0x1a>
   bab06:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   bab0a:	429a      	cmp	r2, r3
   bab0c:	d101      	bne.n	bab12 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   bab0e:	f7ff ff6f 	bl	ba9f0 <_ZN9TCPClient12flush_bufferEv>
   bab12:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   bab14:	6808      	ldr	r0, [r1, #0]
   bab16:	2800      	cmp	r0, #0
   bab18:	db18      	blt.n	bab4c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   bab1a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   bab1e:	2d7f      	cmp	r5, #127	; 0x7f
   bab20:	d814      	bhi.n	bab4c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   bab22:	3104      	adds	r1, #4
   bab24:	2308      	movs	r3, #8
   bab26:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   bab2a:	4429      	add	r1, r5
   bab2c:	f7fd fe50 	bl	b87d0 <sock_recv>
            if (ret > 0) {
   bab30:	2800      	cmp	r0, #0
   bab32:	dd13      	ble.n	bab5c <_ZN9TCPClient9availableEv+0x64>
   bab34:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   bab36:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bab3a:	b90a      	cbnz	r2, bab40 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   bab3c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   bab40:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   bab42:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bab46:	4410      	add	r0, r2
   bab48:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   bab4c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   bab4e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   bab52:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   bab56:	1ac0      	subs	r0, r0, r3
   bab58:	b00b      	add	sp, #44	; 0x2c
   bab5a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   bab5c:	f7fd ffac 	bl	b8ab8 <__errno>
   bab60:	6803      	ldr	r3, [r0, #0]
   bab62:	2b0b      	cmp	r3, #11
   bab64:	d0f2      	beq.n	bab4c <_ZN9TCPClient9availableEv+0x54>
   bab66:	f7fd ffa7 	bl	b8ab8 <__errno>
   bab6a:	6803      	ldr	r3, [r0, #0]
   bab6c:	2b0b      	cmp	r3, #11
   bab6e:	d0ed      	beq.n	bab4c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   bab70:	2320      	movs	r3, #32
   bab72:	2500      	movs	r5, #0
   bab74:	e9cd 3502 	strd	r3, r5, [sp, #8]
   bab78:	f7fd ff9e 	bl	b8ab8 <__errno>
   bab7c:	6803      	ldr	r3, [r0, #0]
   bab7e:	9301      	str	r3, [sp, #4]
   bab80:	4b08      	ldr	r3, [pc, #32]	; (baba4 <_ZN9TCPClient9availableEv+0xac>)
   bab82:	4909      	ldr	r1, [pc, #36]	; (baba8 <_ZN9TCPClient9availableEv+0xb0>)
   bab84:	9300      	str	r3, [sp, #0]
   bab86:	aa02      	add	r2, sp, #8
   bab88:	462b      	mov	r3, r5
   bab8a:	2032      	movs	r0, #50	; 0x32
   bab8c:	f7fd feb0 	bl	b88f0 <log_message>
                    sock_close(d_->sock);
   bab90:	6963      	ldr	r3, [r4, #20]
   bab92:	6818      	ldr	r0, [r3, #0]
   bab94:	f7fd fe0c 	bl	b87b0 <sock_close>
   bab98:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   bab9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bab9e:	601a      	str	r2, [r3, #0]
   baba0:	e7d4      	b.n	bab4c <_ZN9TCPClient9availableEv+0x54>
   baba2:	bf00      	nop
   baba4:	000be9e3 	.word	0x000be9e3
   baba8:	000be9dc 	.word	0x000be9dc

000babac <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   babac:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   babae:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   babb0:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   babb2:	6818      	ldr	r0, [r3, #0]
   babb4:	2800      	cmp	r0, #0
   babb6:	db01      	blt.n	babbc <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   babb8:	f7fd fdfa 	bl	b87b0 <sock_close>
   babbc:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   babbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   babc2:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   babc4:	6960      	ldr	r0, [r4, #20]
   babc6:	2211      	movs	r2, #17
   babc8:	2100      	movs	r1, #0
   babca:	308c      	adds	r0, #140	; 0x8c
   babcc:	f001 faca 	bl	bc164 <memset>
    flush_buffer();
   babd0:	4620      	mov	r0, r4
}
   babd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   babd6:	f7ff bf0b 	b.w	ba9f0 <_ZN9TCPClient12flush_bufferEv>

000babda <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   babda:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   babdc:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   babde:	4604      	mov	r4, r0
          total(0) {
   babe0:	6001      	str	r1, [r0, #0]
   babe2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   babe6:	3088      	adds	r0, #136	; 0x88
   babe8:	f7ff fa24 	bl	ba034 <_ZN9IPAddressC1Ev>
}
   babec:	4620      	mov	r0, r4
   babee:	bd10      	pop	{r4, pc}

000babf0 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   babf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   babf2:	2300      	movs	r3, #0
   babf4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   babf8:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   babfc:	4a0e      	ldr	r2, [pc, #56]	; (bac38 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   babfe:	6103      	str	r3, [r0, #16]
   bac00:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bac02:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   bac04:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bac06:	20ac      	movs	r0, #172	; 0xac
   bac08:	9101      	str	r1, [sp, #4]
   bac0a:	f7f9 fa44 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bac0e:	1e05      	subs	r5, r0, #0
   bac10:	f105 060c 	add.w	r6, r5, #12
   bac14:	d008      	beq.n	bac28 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   bac16:	2301      	movs	r3, #1
   bac18:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   bac1c:	4b07      	ldr	r3, [pc, #28]	; (bac3c <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bac1e:	9901      	ldr	r1, [sp, #4]
   bac20:	602b      	str	r3, [r5, #0]
   bac22:	4630      	mov	r0, r6
   bac24:	f7ff ffd9 	bl	babda <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   bac28:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   bac2a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   bac2e:	f7ff fedf 	bl	ba9f0 <_ZN9TCPClient12flush_bufferEv>
}
   bac32:	b002      	add	sp, #8
   bac34:	bd70      	pop	{r4, r5, r6, pc}
   bac36:	bf00      	nop
   bac38:	000bea18 	.word	0x000bea18
   bac3c:	000be9fc 	.word	0x000be9fc

000bac40 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   bac40:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   bac42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   bac46:	4604      	mov	r4, r0
        : TCPClient(-1) {
   bac48:	f7ff ffd2 	bl	babf0 <_ZN9TCPClientC1Ei>
}
   bac4c:	4620      	mov	r0, r4
   bac4e:	bd10      	pop	{r4, pc}

000bac50 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   bac50:	b510      	push	{r4, lr}
   bac52:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   bac54:	6800      	ldr	r0, [r0, #0]
   bac56:	2800      	cmp	r0, #0
   bac58:	db01      	blt.n	bac5e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   bac5a:	f7fd fda9 	bl	b87b0 <sock_close>
    }
}
   bac5e:	4620      	mov	r0, r4
   bac60:	bd10      	pop	{r4, pc}

000bac62 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   bac62:	300c      	adds	r0, #12
   bac64:	f7ff bff4 	b.w	bac50 <_ZN9TCPClient4DataD1Ev>

000bac68 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bac68:	4b02      	ldr	r3, [pc, #8]	; (bac74 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bac6a:	681a      	ldr	r2, [r3, #0]
   bac6c:	4b02      	ldr	r3, [pc, #8]	; (bac78 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bac6e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bac70:	4770      	bx	lr
   bac72:	bf00      	nop
   bac74:	200350c4 	.word	0x200350c4
   bac78:	2003e6fc 	.word	0x2003e6fc

000bac7c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bac7c:	4770      	bx	lr

000bac7e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bac7e:	7441      	strb	r1, [r0, #17]
}
   bac80:	4770      	bx	lr

000bac82 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bac82:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bac84:	7c00      	ldrb	r0, [r0, #16]
   bac86:	f7fd fde3 	bl	b8850 <hal_usart_available_data_for_write>
}
   bac8a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bac8e:	bd08      	pop	{r3, pc}

000bac90 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bac90:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bac92:	7c00      	ldrb	r0, [r0, #16]
   bac94:	f7fd fdbc 	bl	b8810 <hal_usart_available>
}
   bac98:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bac9c:	bd08      	pop	{r3, pc}

000bac9e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bac9e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   baca0:	7c00      	ldrb	r0, [r0, #16]
   baca2:	f7fd fdc5 	bl	b8830 <hal_usart_peek>
}
   baca6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bacaa:	bd08      	pop	{r3, pc}

000bacac <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bacac:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bacae:	7c00      	ldrb	r0, [r0, #16]
   bacb0:	f7fd fdb6 	bl	b8820 <hal_usart_read>
}
   bacb4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bacb8:	bd08      	pop	{r3, pc}

000bacba <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bacba:	7c00      	ldrb	r0, [r0, #16]
   bacbc:	f7fd bdc0 	b.w	b8840 <hal_usart_flush>

000bacc0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bacc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bacc2:	7c45      	ldrb	r5, [r0, #17]
{
   bacc4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bacc6:	b12d      	cbz	r5, bacd4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bacc8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bacca:	b003      	add	sp, #12
   baccc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bacd0:	f7fd bd96 	b.w	b8800 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bacd4:	7c00      	ldrb	r0, [r0, #16]
   bacd6:	9101      	str	r1, [sp, #4]
   bacd8:	f7fd fdba 	bl	b8850 <hal_usart_available_data_for_write>
   bacdc:	2800      	cmp	r0, #0
   bacde:	9901      	ldr	r1, [sp, #4]
   bace0:	dcf2      	bgt.n	bacc8 <_ZN11USARTSerial5writeEh+0x8>
}
   bace2:	4628      	mov	r0, r5
   bace4:	b003      	add	sp, #12
   bace6:	bd30      	pop	{r4, r5, pc}

000bace8 <_ZN11USARTSerialD0Ev>:
   bace8:	b510      	push	{r4, lr}
   bacea:	2114      	movs	r1, #20
   bacec:	4604      	mov	r4, r0
   bacee:	f7f9 f9d8 	bl	b40a2 <_ZdlPvj>
   bacf2:	4620      	mov	r0, r4
   bacf4:	bd10      	pop	{r4, pc}
	...

000bacf8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bacf8:	b510      	push	{r4, lr}
   bacfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bacfe:	4604      	mov	r4, r0
   bad00:	4608      	mov	r0, r1
   bad02:	4611      	mov	r1, r2
   bad04:	2200      	movs	r2, #0
   bad06:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bad0a:	4b04      	ldr	r3, [pc, #16]	; (bad1c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bad0c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bad0e:	2301      	movs	r3, #1
  _serial = serial;
   bad10:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bad12:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bad14:	f7fd fda4 	bl	b8860 <hal_usart_init_ex>
}
   bad18:	4620      	mov	r0, r4
   bad1a:	bd10      	pop	{r4, pc}
   bad1c:	000bea80 	.word	0x000bea80

000bad20 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bad20:	7441      	strb	r1, [r0, #17]
}
   bad22:	4770      	bx	lr

000bad24 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bad24:	4770      	bx	lr

000bad26 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bad26:	4770      	bx	lr

000bad28 <_ZN9USBSerial4readEv>:
{
   bad28:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bad2a:	2100      	movs	r1, #0
   bad2c:	7c00      	ldrb	r0, [r0, #16]
   bad2e:	f7fd fdbf 	bl	b88b0 <HAL_USB_USART_Receive_Data>
}
   bad32:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bad36:	bd08      	pop	{r3, pc}

000bad38 <_ZN9USBSerial4peekEv>:
{
   bad38:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bad3a:	2101      	movs	r1, #1
   bad3c:	7c00      	ldrb	r0, [r0, #16]
   bad3e:	f7fd fdb7 	bl	b88b0 <HAL_USB_USART_Receive_Data>
}
   bad42:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bad46:	bd08      	pop	{r3, pc}

000bad48 <_ZN9USBSerial17availableForWriteEv>:
{
   bad48:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bad4a:	7c00      	ldrb	r0, [r0, #16]
   bad4c:	f7fd fda8 	bl	b88a0 <HAL_USB_USART_Available_Data_For_Write>
}
   bad50:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bad54:	bd08      	pop	{r3, pc}

000bad56 <_ZN9USBSerial9availableEv>:
{
   bad56:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bad58:	7c00      	ldrb	r0, [r0, #16]
   bad5a:	f7fd fd99 	bl	b8890 <HAL_USB_USART_Available_Data>
}
   bad5e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bad62:	bd08      	pop	{r3, pc}

000bad64 <_ZN9USBSerial5writeEh>:
{
   bad64:	b513      	push	{r0, r1, r4, lr}
   bad66:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bad68:	7c00      	ldrb	r0, [r0, #16]
{
   bad6a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bad6c:	f7fd fd98 	bl	b88a0 <HAL_USB_USART_Available_Data_For_Write>
   bad70:	2800      	cmp	r0, #0
   bad72:	9901      	ldr	r1, [sp, #4]
   bad74:	dc01      	bgt.n	bad7a <_ZN9USBSerial5writeEh+0x16>
   bad76:	7c60      	ldrb	r0, [r4, #17]
   bad78:	b120      	cbz	r0, bad84 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bad7a:	7c20      	ldrb	r0, [r4, #16]
   bad7c:	f7fd fda0 	bl	b88c0 <HAL_USB_USART_Send_Data>
   bad80:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bad84:	b002      	add	sp, #8
   bad86:	bd10      	pop	{r4, pc}

000bad88 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bad88:	7c00      	ldrb	r0, [r0, #16]
   bad8a:	f7fd bda1 	b.w	b88d0 <HAL_USB_USART_Flush_Data>

000bad8e <_ZN9USBSerialD0Ev>:
   bad8e:	b510      	push	{r4, lr}
   bad90:	2114      	movs	r1, #20
   bad92:	4604      	mov	r4, r0
   bad94:	f7f9 f985 	bl	b40a2 <_ZdlPvj>
   bad98:	4620      	mov	r0, r4
   bad9a:	bd10      	pop	{r4, pc}

000bad9c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bad9c:	b510      	push	{r4, lr}
   bad9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bada2:	4604      	mov	r4, r0
   bada4:	4608      	mov	r0, r1
   bada6:	2100      	movs	r1, #0
   bada8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   badac:	4b04      	ldr	r3, [pc, #16]	; (badc0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   badae:	6023      	str	r3, [r4, #0]
  _blocking = true;
   badb0:	2301      	movs	r3, #1
  _serial = serial;
   badb2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   badb4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   badb6:	4611      	mov	r1, r2
   badb8:	f7fd fd5a 	bl	b8870 <HAL_USB_USART_Init>
}
   badbc:	4620      	mov	r0, r4
   badbe:	bd10      	pop	{r4, pc}
   badc0:	000beab0 	.word	0x000beab0

000badc4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   badc4:	7c00      	ldrb	r0, [r0, #16]
   badc6:	2200      	movs	r2, #0
   badc8:	f7fd bd5a 	b.w	b8880 <HAL_USB_USART_Begin>

000badcc <_Z19acquireSerialBufferv>:
{
   badcc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   badce:	2214      	movs	r2, #20
{
   badd0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   badd2:	2100      	movs	r1, #0
   badd4:	f001 f9c6 	bl	bc164 <memset>
}
   badd8:	4620      	mov	r0, r4
   badda:	bd10      	pop	{r4, pc}

000baddc <_Z16_fetch_usbserialv>:
{
   baddc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   badde:	4c0f      	ldr	r4, [pc, #60]	; (bae1c <_Z16_fetch_usbserialv+0x40>)
{
   bade0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bade2:	a803      	add	r0, sp, #12
   bade4:	f7ff fff2 	bl	badcc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bade8:	7821      	ldrb	r1, [r4, #0]
   badea:	f3bf 8f5b 	dmb	ish
   badee:	f011 0101 	ands.w	r1, r1, #1
   badf2:	d10f      	bne.n	bae14 <_Z16_fetch_usbserialv+0x38>
   badf4:	4620      	mov	r0, r4
   badf6:	9101      	str	r1, [sp, #4]
   badf8:	f7f9 f955 	bl	b40a6 <__cxa_guard_acquire>
   badfc:	9901      	ldr	r1, [sp, #4]
   badfe:	b148      	cbz	r0, bae14 <_Z16_fetch_usbserialv+0x38>
   bae00:	aa03      	add	r2, sp, #12
   bae02:	4807      	ldr	r0, [pc, #28]	; (bae20 <_Z16_fetch_usbserialv+0x44>)
   bae04:	f7ff ffca 	bl	bad9c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bae08:	4620      	mov	r0, r4
   bae0a:	f7f9 f951 	bl	b40b0 <__cxa_guard_release>
   bae0e:	4805      	ldr	r0, [pc, #20]	; (bae24 <_Z16_fetch_usbserialv+0x48>)
   bae10:	f001 f966 	bl	bc0e0 <atexit>
	return _usbserial;
}
   bae14:	4802      	ldr	r0, [pc, #8]	; (bae20 <_Z16_fetch_usbserialv+0x44>)
   bae16:	b008      	add	sp, #32
   bae18:	bd10      	pop	{r4, pc}
   bae1a:	bf00      	nop
   bae1c:	2003e700 	.word	0x2003e700
   bae20:	2003e704 	.word	0x2003e704
   bae24:	000bad25 	.word	0x000bad25

000bae28 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   bae28:	2200      	movs	r2, #0
   bae2a:	6840      	ldr	r0, [r0, #4]
   bae2c:	4611      	mov	r1, r2
   bae2e:	f7fd bdab 	b.w	b8988 <network_ready>

000bae32 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bae32:	2200      	movs	r2, #0
   bae34:	6840      	ldr	r0, [r0, #4]
   bae36:	4611      	mov	r1, r2
   bae38:	f7fd bdc6 	b.w	b89c8 <network_listening>

000bae3c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bae3c:	2200      	movs	r2, #0
   bae3e:	6840      	ldr	r0, [r0, #4]
   bae40:	4611      	mov	r1, r2
   bae42:	f7fd bde9 	b.w	b8a18 <network_get_listen_timeout>

000bae46 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bae46:	6840      	ldr	r0, [r0, #4]
   bae48:	2200      	movs	r2, #0
   bae4a:	f7fd bddd 	b.w	b8a08 <network_set_listen_timeout>

000bae4e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bae4e:	6840      	ldr	r0, [r0, #4]
   bae50:	2200      	movs	r2, #0
   bae52:	f081 0101 	eor.w	r1, r1, #1
   bae56:	f7fd bdaf 	b.w	b89b8 <network_listen>

000bae5a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bae5a:	2300      	movs	r3, #0
   bae5c:	6840      	ldr	r0, [r0, #4]
   bae5e:	461a      	mov	r2, r3
   bae60:	4619      	mov	r1, r3
   bae62:	f7fd bda1 	b.w	b89a8 <network_off>

000bae66 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bae66:	2300      	movs	r3, #0
   bae68:	6840      	ldr	r0, [r0, #4]
   bae6a:	461a      	mov	r2, r3
   bae6c:	4619      	mov	r1, r3
   bae6e:	f7fd bd93 	b.w	b8998 <network_on>

000bae72 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bae72:	2200      	movs	r2, #0
   bae74:	6840      	ldr	r0, [r0, #4]
   bae76:	4611      	mov	r1, r2
   bae78:	f7fd bd76 	b.w	b8968 <network_connecting>

000bae7c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bae7c:	6840      	ldr	r0, [r0, #4]
   bae7e:	2200      	movs	r2, #0
   bae80:	2102      	movs	r1, #2
   bae82:	f7fd bd79 	b.w	b8978 <network_disconnect>

000bae86 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bae86:	2300      	movs	r3, #0
   bae88:	6840      	ldr	r0, [r0, #4]
   bae8a:	461a      	mov	r2, r3
   bae8c:	f7fd bd64 	b.w	b8958 <network_connect>

000bae90 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   bae90:	4b02      	ldr	r3, [pc, #8]	; (bae9c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   bae92:	2204      	movs	r2, #4
   bae94:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   bae96:	4a02      	ldr	r2, [pc, #8]	; (baea0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   bae98:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   bae9a:	4770      	bx	lr
   bae9c:	2003e718 	.word	0x2003e718
   baea0:	000beae0 	.word	0x000beae0

000baea4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   baea4:	b510      	push	{r4, lr}
   baea6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   baea8:	f001 f9a4 	bl	bc1f4 <strlen>
   baeac:	3801      	subs	r0, #1
   baeae:	1823      	adds	r3, r4, r0
   baeb0:	4620      	mov	r0, r4
	while(i<j){
   baeb2:	4283      	cmp	r3, r0
   baeb4:	d906      	bls.n	baec4 <_Z11str_reversePc+0x20>
		c = *i;
   baeb6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   baeb8:	7819      	ldrb	r1, [r3, #0]
   baeba:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   baebe:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   baec2:	e7f6      	b.n	baeb2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   baec4:	bd10      	pop	{r4, pc}

000baec6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   baec6:	b570      	push	{r4, r5, r6, lr}
   baec8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   baeca:	1e91      	subs	r1, r2, #2
   baecc:	2922      	cmp	r1, #34	; 0x22
   baece:	d81d      	bhi.n	baf0c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   baed0:	4625      	mov	r5, r4

	div_t result;
	while(a){
   baed2:	b930      	cbnz	r0, baee2 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   baed4:	4423      	add	r3, r4
            *ptr++ = '0';
   baed6:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   baed8:	429d      	cmp	r5, r3
   baeda:	d210      	bcs.n	baefe <ultoa+0x38>
            *ptr++ = '0';
   baedc:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   baee0:	e7fa      	b.n	baed8 <ultoa+0x12>
            result.quot = a/radix;
   baee2:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   baee6:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   baeea:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   baeec:	2809      	cmp	r0, #9
                *ptr += '0';
   baeee:	bf94      	ite	ls
   baef0:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   baef2:	3157      	addhi	r1, #87	; 0x57
   baef4:	b2c9      	uxtb	r1, r1
   baef6:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   baefa:	4630      	mov	r0, r6
	while(a){
   baefc:	e7e9      	b.n	baed2 <ultoa+0xc>

	*ptr = '\0';
   baefe:	2300      	movs	r3, #0
	str_reverse(buffer);
   baf00:	4620      	mov	r0, r4
	*ptr = '\0';
   baf02:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   baf04:	f7ff ffce 	bl	baea4 <_Z11str_reversePc>
	return buffer;
   baf08:	4620      	mov	r0, r4
}
   baf0a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   baf0c:	2000      	movs	r0, #0
   baf0e:	e7fc      	b.n	baf0a <ultoa+0x44>

000baf10 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   baf10:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   baf12:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   baf14:	460c      	mov	r4, r1
   baf16:	4615      	mov	r5, r2
	if(a<0){
   baf18:	da0e      	bge.n	baf38 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   baf1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   baf1e:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   baf22:	bf14      	ite	ne
   baf24:	4258      	negne	r0, r3
   baf26:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   baf28:	2301      	movs	r3, #1
		*buffer = '-';
   baf2a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   baf2c:	462a      	mov	r2, r5
   baf2e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   baf30:	f7ff ffc9 	bl	baec6 <ultoa>
	}
	return buffer;
}
   baf34:	4620      	mov	r0, r4
   baf36:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   baf38:	2301      	movs	r3, #1
   baf3a:	e7f9      	b.n	baf30 <itoa+0x20>

000baf3c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   baf3c:	4b01      	ldr	r3, [pc, #4]	; (baf44 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   baf3e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   baf40:	4770      	bx	lr
   baf42:	bf00      	nop
   baf44:	200350cc 	.word	0x200350cc

000baf48 <serialEventRun>:
{
   baf48:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   baf4a:	4b0b      	ldr	r3, [pc, #44]	; (baf78 <serialEventRun+0x30>)
   baf4c:	b143      	cbz	r3, baf60 <serialEventRun+0x18>
   baf4e:	f7ff ff45 	bl	baddc <_Z16_fetch_usbserialv>
   baf52:	6803      	ldr	r3, [r0, #0]
   baf54:	691b      	ldr	r3, [r3, #16]
   baf56:	4798      	blx	r3
   baf58:	2800      	cmp	r0, #0
   baf5a:	dd01      	ble.n	baf60 <serialEventRun+0x18>
        serialEvent();
   baf5c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   baf60:	4b06      	ldr	r3, [pc, #24]	; (baf7c <serialEventRun+0x34>)
   baf62:	b143      	cbz	r3, baf76 <serialEventRun+0x2e>
   baf64:	f000 f8c8 	bl	bb0f8 <_Z22__fetch_global_Serial1v>
   baf68:	6803      	ldr	r3, [r0, #0]
   baf6a:	691b      	ldr	r3, [r3, #16]
   baf6c:	4798      	blx	r3
   baf6e:	2800      	cmp	r0, #0
   baf70:	dd01      	ble.n	baf76 <serialEventRun+0x2e>
        serialEvent1();
   baf72:	f3af 8000 	nop.w
}
   baf76:	bd08      	pop	{r3, pc}
	...

000baf80 <_post_loop>:
{
   baf80:	b508      	push	{r3, lr}
	serialEventRun();
   baf82:	f7ff ffe1 	bl	baf48 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   baf86:	f7fd fb83 	bl	b8690 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   baf8a:	4b01      	ldr	r3, [pc, #4]	; (baf90 <_post_loop+0x10>)
   baf8c:	6018      	str	r0, [r3, #0]
}
   baf8e:	bd08      	pop	{r3, pc}
   baf90:	2003e728 	.word	0x2003e728

000baf94 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   baf94:	4805      	ldr	r0, [pc, #20]	; (bafac <_Z33system_initialize_user_backup_ramv+0x18>)
   baf96:	4a06      	ldr	r2, [pc, #24]	; (bafb0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   baf98:	4906      	ldr	r1, [pc, #24]	; (bafb4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   baf9a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   baf9c:	1a12      	subs	r2, r2, r0
   baf9e:	f001 f8b9 	bl	bc114 <memcpy>
    __backup_sram_signature = signature;
   bafa2:	4b05      	ldr	r3, [pc, #20]	; (bafb8 <_Z33system_initialize_user_backup_ramv+0x24>)
   bafa4:	4a05      	ldr	r2, [pc, #20]	; (bafbc <_Z33system_initialize_user_backup_ramv+0x28>)
   bafa6:	601a      	str	r2, [r3, #0]
}
   bafa8:	bd08      	pop	{r3, pc}
   bafaa:	bf00      	nop
   bafac:	2003f400 	.word	0x2003f400
   bafb0:	2003f404 	.word	0x2003f404
   bafb4:	000bf014 	.word	0x000bf014
   bafb8:	2003f400 	.word	0x2003f400
   bafbc:	9a271c1e 	.word	0x9a271c1e

000bafc0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bafc0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bafc2:	2300      	movs	r3, #0
   bafc4:	9300      	str	r3, [sp, #0]
   bafc6:	461a      	mov	r2, r3
   bafc8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bafcc:	f7fd fcb2 	bl	b8934 <system_ctrl_set_result>
}
   bafd0:	b003      	add	sp, #12
   bafd2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bafd8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bafd8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bafda:	8843      	ldrh	r3, [r0, #2]
   bafdc:	2b0a      	cmp	r3, #10
   bafde:	d008      	beq.n	baff2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bafe0:	2b50      	cmp	r3, #80	; 0x50
   bafe2:	d10b      	bne.n	baffc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bafe4:	4b09      	ldr	r3, [pc, #36]	; (bb00c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bafe6:	681b      	ldr	r3, [r3, #0]
   bafe8:	b14b      	cbz	r3, baffe <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bafea:	b003      	add	sp, #12
   bafec:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   baff0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   baff2:	f7ff ffe5 	bl	bafc0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   baff6:	b003      	add	sp, #12
   baff8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   baffc:	2300      	movs	r3, #0
   baffe:	9300      	str	r3, [sp, #0]
   bb000:	461a      	mov	r2, r3
   bb002:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bb006:	f7fd fc95 	bl	b8934 <system_ctrl_set_result>
}
   bb00a:	e7f4      	b.n	baff6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bb00c:	2003e724 	.word	0x2003e724

000bb010 <module_user_init_hook>:
{
   bb010:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bb012:	4812      	ldr	r0, [pc, #72]	; (bb05c <module_user_init_hook+0x4c>)
   bb014:	2100      	movs	r1, #0
   bb016:	f7fd fd5f 	bl	b8ad8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bb01a:	4b11      	ldr	r3, [pc, #68]	; (bb060 <module_user_init_hook+0x50>)
   bb01c:	681a      	ldr	r2, [r3, #0]
   bb01e:	4b11      	ldr	r3, [pc, #68]	; (bb064 <module_user_init_hook+0x54>)
   bb020:	429a      	cmp	r2, r3
   bb022:	4b11      	ldr	r3, [pc, #68]	; (bb068 <module_user_init_hook+0x58>)
   bb024:	bf0c      	ite	eq
   bb026:	2201      	moveq	r2, #1
   bb028:	2200      	movne	r2, #0
   bb02a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bb02c:	d001      	beq.n	bb032 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bb02e:	f7ff ffb1 	bl	baf94 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bb032:	f7fd fb1d 	bl	b8670 <HAL_RNG_GetRandomNumber>
   bb036:	4604      	mov	r4, r0
    srand(seed);
   bb038:	f001 f89c 	bl	bc174 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bb03c:	4b0b      	ldr	r3, [pc, #44]	; (bb06c <module_user_init_hook+0x5c>)
   bb03e:	b113      	cbz	r3, bb046 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bb040:	4620      	mov	r0, r4
   bb042:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bb046:	2100      	movs	r1, #0
   bb048:	4808      	ldr	r0, [pc, #32]	; (bb06c <module_user_init_hook+0x5c>)
   bb04a:	f7fd fc7d 	bl	b8948 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bb04e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bb052:	4807      	ldr	r0, [pc, #28]	; (bb070 <module_user_init_hook+0x60>)
   bb054:	2100      	movs	r1, #0
   bb056:	f7fd bc63 	b.w	b8920 <system_ctrl_set_app_request_handler>
   bb05a:	bf00      	nop
   bb05c:	000baf3d 	.word	0x000baf3d
   bb060:	2003f400 	.word	0x2003f400
   bb064:	9a271c1e 	.word	0x9a271c1e
   bb068:	2003e720 	.word	0x2003e720
   bb06c:	00000000 	.word	0x00000000
   bb070:	000bafd9 	.word	0x000bafd9

000bb074 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb074:	4770      	bx	lr
	...

000bb078 <_Z19__fetch_global_Wirev>:
{
   bb078:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb07a:	4d0e      	ldr	r5, [pc, #56]	; (bb0b4 <_Z19__fetch_global_Wirev+0x3c>)
   bb07c:	7829      	ldrb	r1, [r5, #0]
   bb07e:	f3bf 8f5b 	dmb	ish
   bb082:	f011 0401 	ands.w	r4, r1, #1
{
   bb086:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb088:	d111      	bne.n	bb0ae <_Z19__fetch_global_Wirev+0x36>
   bb08a:	4628      	mov	r0, r5
   bb08c:	f7f9 f80b 	bl	b40a6 <__cxa_guard_acquire>
   bb090:	b168      	cbz	r0, bb0ae <_Z19__fetch_global_Wirev+0x36>
   bb092:	a801      	add	r0, sp, #4
   bb094:	f7f9 fb2c 	bl	b46f0 <_Z17acquireWireBufferv>
   bb098:	aa01      	add	r2, sp, #4
   bb09a:	4621      	mov	r1, r4
   bb09c:	4806      	ldr	r0, [pc, #24]	; (bb0b8 <_Z19__fetch_global_Wirev+0x40>)
   bb09e:	f7fe ff3d 	bl	b9f1c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bb0a2:	4628      	mov	r0, r5
   bb0a4:	f7f9 f804 	bl	b40b0 <__cxa_guard_release>
   bb0a8:	4804      	ldr	r0, [pc, #16]	; (bb0bc <_Z19__fetch_global_Wirev+0x44>)
   bb0aa:	f001 f819 	bl	bc0e0 <atexit>
	return wire;
}
   bb0ae:	4802      	ldr	r0, [pc, #8]	; (bb0b8 <_Z19__fetch_global_Wirev+0x40>)
   bb0b0:	b007      	add	sp, #28
   bb0b2:	bd30      	pop	{r4, r5, pc}
   bb0b4:	2003e72c 	.word	0x2003e72c
   bb0b8:	2003e730 	.word	0x2003e730
   bb0bc:	000bb075 	.word	0x000bb075

000bb0c0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb0c0:	4770      	bx	lr
	...

000bb0c4 <_Z20acquireSerial1Bufferv>:
{
   bb0c4:	b538      	push	{r3, r4, r5, lr}
   bb0c6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bb0c8:	2514      	movs	r5, #20
   bb0ca:	462a      	mov	r2, r5
   bb0cc:	2100      	movs	r1, #0
   bb0ce:	f001 f849 	bl	bc164 <memset>
   bb0d2:	8025      	strh	r5, [r4, #0]
   bb0d4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb0d6:	4907      	ldr	r1, [pc, #28]	; (bb0f4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bb0d8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb0da:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bb0dc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb0de:	f000 f82f 	bl	bb140 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb0e2:	4904      	ldr	r1, [pc, #16]	; (bb0f4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bb0e4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb0e6:	4628      	mov	r0, r5
   bb0e8:	f000 f82a 	bl	bb140 <_ZnajRKSt9nothrow_t>
    };
   bb0ec:	60e0      	str	r0, [r4, #12]
}
   bb0ee:	4620      	mov	r0, r4
   bb0f0:	bd38      	pop	{r3, r4, r5, pc}
   bb0f2:	bf00      	nop
   bb0f4:	000beb14 	.word	0x000beb14

000bb0f8 <_Z22__fetch_global_Serial1v>:
{
   bb0f8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb0fa:	4d0e      	ldr	r5, [pc, #56]	; (bb134 <_Z22__fetch_global_Serial1v+0x3c>)
   bb0fc:	7829      	ldrb	r1, [r5, #0]
   bb0fe:	f3bf 8f5b 	dmb	ish
   bb102:	f011 0401 	ands.w	r4, r1, #1
{
   bb106:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb108:	d111      	bne.n	bb12e <_Z22__fetch_global_Serial1v+0x36>
   bb10a:	4628      	mov	r0, r5
   bb10c:	f7f8 ffcb 	bl	b40a6 <__cxa_guard_acquire>
   bb110:	b168      	cbz	r0, bb12e <_Z22__fetch_global_Serial1v+0x36>
   bb112:	a801      	add	r0, sp, #4
   bb114:	f7ff ffd6 	bl	bb0c4 <_Z20acquireSerial1Bufferv>
   bb118:	aa01      	add	r2, sp, #4
   bb11a:	4621      	mov	r1, r4
   bb11c:	4806      	ldr	r0, [pc, #24]	; (bb138 <_Z22__fetch_global_Serial1v+0x40>)
   bb11e:	f7ff fdeb 	bl	bacf8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bb122:	4628      	mov	r0, r5
   bb124:	f7f8 ffc4 	bl	b40b0 <__cxa_guard_release>
   bb128:	4804      	ldr	r0, [pc, #16]	; (bb13c <_Z22__fetch_global_Serial1v+0x44>)
   bb12a:	f000 ffd9 	bl	bc0e0 <atexit>
    return serial1;
}
   bb12e:	4802      	ldr	r0, [pc, #8]	; (bb138 <_Z22__fetch_global_Serial1v+0x40>)
   bb130:	b007      	add	sp, #28
   bb132:	bd30      	pop	{r4, r5, pc}
   bb134:	2003e744 	.word	0x2003e744
   bb138:	2003e748 	.word	0x2003e748
   bb13c:	000bb0c1 	.word	0x000bb0c1

000bb140 <_ZnajRKSt9nothrow_t>:
   bb140:	f7f8 bfab 	b.w	b409a <_Znaj>

000bb144 <_ZSt17__throw_bad_allocv>:
   bb144:	b508      	push	{r3, lr}
   bb146:	f7fd fca7 	bl	b8a98 <abort>

000bb14a <_ZSt19__throw_logic_errorPKc>:
   bb14a:	b508      	push	{r3, lr}
   bb14c:	f7fd fca4 	bl	b8a98 <abort>

000bb150 <_ZSt20__throw_length_errorPKc>:
   bb150:	b508      	push	{r3, lr}
   bb152:	f7fd fca1 	bl	b8a98 <abort>

000bb156 <_ZSt25__throw_bad_function_callv>:
   bb156:	b508      	push	{r3, lr}
   bb158:	f7fd fc9e 	bl	b8a98 <abort>

000bb15c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   bb15c:	4901      	ldr	r1, [pc, #4]	; (bb164 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   bb15e:	f000 b963 	b.w	bb428 <_ZNKSt9type_infoeqERKS_>
   bb162:	bf00      	nop
   bb164:	000beb30 	.word	0x000beb30

000bb168 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   bb168:	b10a      	cbz	r2, bb16e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   bb16a:	f000 bfd3 	b.w	bc114 <memcpy>
   bb16e:	4770      	bx	lr

000bb170 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   bb170:	b508      	push	{r3, lr}
   bb172:	680b      	ldr	r3, [r1, #0]
   bb174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   bb178:	d302      	bcc.n	bb180 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   bb17a:	480d      	ldr	r0, [pc, #52]	; (bb1b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   bb17c:	f7ff ffe8 	bl	bb150 <_ZSt20__throw_length_errorPKc>
   bb180:	4293      	cmp	r3, r2
   bb182:	d90b      	bls.n	bb19c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   bb184:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   bb188:	ea4f 0042 	mov.w	r0, r2, lsl #1
   bb18c:	d206      	bcs.n	bb19c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   bb18e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   bb192:	bf2a      	itet	cs
   bb194:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   bb198:	6008      	strcc	r0, [r1, #0]
   bb19a:	600b      	strcs	r3, [r1, #0]
   bb19c:	6808      	ldr	r0, [r1, #0]
   bb19e:	3001      	adds	r0, #1
   bb1a0:	d501      	bpl.n	bb1a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   bb1a2:	f7ff ffcf 	bl	bb144 <_ZSt17__throw_bad_allocv>
   bb1a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   bb1aa:	f7f8 bf74 	b.w	b4096 <_Znwj>
   bb1ae:	bf00      	nop
   bb1b0:	000beb38 	.word	0x000beb38

000bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   bb1b4:	f850 3b08 	ldr.w	r3, [r0], #8
   bb1b8:	4283      	cmp	r3, r0
   bb1ba:	d002      	beq.n	bb1c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   bb1bc:	4618      	mov	r0, r3
   bb1be:	f7f8 bf6e 	b.w	b409e <_ZdlPv>
   bb1c2:	4770      	bx	lr

000bb1c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   bb1c4:	2a01      	cmp	r2, #1
   bb1c6:	b410      	push	{r4}
   bb1c8:	d104      	bne.n	bb1d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   bb1ca:	780a      	ldrb	r2, [r1, #0]
   bb1cc:	f85d 4b04 	ldr.w	r4, [sp], #4
   bb1d0:	7002      	strb	r2, [r0, #0]
   bb1d2:	4770      	bx	lr
   bb1d4:	f85d 4b04 	ldr.w	r4, [sp], #4
   bb1d8:	f7ff bfc6 	b.w	bb168 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000bb1dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
   bb1dc:	b508      	push	{r3, lr}
   bb1de:	1a52      	subs	r2, r2, r1
   bb1e0:	f7ff fff0 	bl	bb1c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   bb1e4:	bd08      	pop	{r3, pc}

000bb1e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   bb1e6:	b508      	push	{r3, lr}
   bb1e8:	1a52      	subs	r2, r2, r1
   bb1ea:	f7ff ffeb 	bl	bb1c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   bb1ee:	bd08      	pop	{r3, pc}

000bb1f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
   bb1f0:	4288      	cmp	r0, r1
   bb1f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bb1f4:	4604      	mov	r4, r0
   bb1f6:	460e      	mov	r6, r1
   bb1f8:	d01e      	beq.n	bb238 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
   bb1fa:	4603      	mov	r3, r0
   bb1fc:	684d      	ldr	r5, [r1, #4]
   bb1fe:	f853 2b08 	ldr.w	r2, [r3], #8
   bb202:	429a      	cmp	r2, r3
   bb204:	bf14      	ite	ne
   bb206:	6882      	ldrne	r2, [r0, #8]
   bb208:	220f      	moveq	r2, #15
   bb20a:	42aa      	cmp	r2, r5
   bb20c:	d20a      	bcs.n	bb224 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
   bb20e:	a901      	add	r1, sp, #4
   bb210:	9501      	str	r5, [sp, #4]
   bb212:	f7ff ffad 	bl	bb170 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   bb216:	4607      	mov	r7, r0
   bb218:	4620      	mov	r0, r4
   bb21a:	f7ff ffcb 	bl	bb1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   bb21e:	9b01      	ldr	r3, [sp, #4]
   bb220:	6027      	str	r7, [r4, #0]
   bb222:	60a3      	str	r3, [r4, #8]
   bb224:	b125      	cbz	r5, bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
   bb226:	6831      	ldr	r1, [r6, #0]
   bb228:	6820      	ldr	r0, [r4, #0]
   bb22a:	462a      	mov	r2, r5
   bb22c:	f7ff ffca 	bl	bb1c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   bb230:	6823      	ldr	r3, [r4, #0]
   bb232:	6065      	str	r5, [r4, #4]
   bb234:	2200      	movs	r2, #0
   bb236:	555a      	strb	r2, [r3, r5]
   bb238:	b003      	add	sp, #12
   bb23a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bb23c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   bb23c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bb23e:	2400      	movs	r4, #0
   bb240:	2310      	movs	r3, #16
   bb242:	e9cd 3402 	strd	r3, r4, [sp, #8]
   bb246:	6803      	ldr	r3, [r0, #0]
   bb248:	4615      	mov	r5, r2
   bb24a:	699e      	ldr	r6, [r3, #24]
   bb24c:	6812      	ldr	r2, [r2, #0]
   bb24e:	466b      	mov	r3, sp
   bb250:	e9cd 4400 	strd	r4, r4, [sp]
   bb254:	47b0      	blx	r6
   bb256:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bb25a:	f003 0306 	and.w	r3, r3, #6
   bb25e:	2b06      	cmp	r3, #6
   bb260:	bf03      	ittte	eq
   bb262:	9b00      	ldreq	r3, [sp, #0]
   bb264:	602b      	streq	r3, [r5, #0]
   bb266:	2001      	moveq	r0, #1
   bb268:	4620      	movne	r0, r4
   bb26a:	b004      	add	sp, #16
   bb26c:	bd70      	pop	{r4, r5, r6, pc}

000bb26e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   bb26e:	9800      	ldr	r0, [sp, #0]
   bb270:	4290      	cmp	r0, r2
   bb272:	bf14      	ite	ne
   bb274:	2001      	movne	r0, #1
   bb276:	2006      	moveq	r0, #6
   bb278:	4770      	bx	lr
	...

000bb27c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   bb27c:	b510      	push	{r4, lr}
   bb27e:	4b03      	ldr	r3, [pc, #12]	; (bb28c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   bb280:	6003      	str	r3, [r0, #0]
   bb282:	4604      	mov	r4, r0
   bb284:	f000 f8cd 	bl	bb422 <_ZNSt9type_infoD1Ev>
   bb288:	4620      	mov	r0, r4
   bb28a:	bd10      	pop	{r4, pc}
   bb28c:	000beb88 	.word	0x000beb88

000bb290 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   bb290:	b510      	push	{r4, lr}
   bb292:	4604      	mov	r4, r0
   bb294:	f7ff fff2 	bl	bb27c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bb298:	4620      	mov	r0, r4
   bb29a:	2108      	movs	r1, #8
   bb29c:	f7f8 ff01 	bl	b40a2 <_ZdlPvj>
   bb2a0:	4620      	mov	r0, r4
   bb2a2:	bd10      	pop	{r4, pc}

000bb2a4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   bb2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb2a8:	461f      	mov	r7, r3
   bb2aa:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   bb2ae:	f8dd 8018 	ldr.w	r8, [sp, #24]
   bb2b2:	4598      	cmp	r8, r3
   bb2b4:	4606      	mov	r6, r0
   bb2b6:	4615      	mov	r5, r2
   bb2b8:	d107      	bne.n	bb2ca <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bb2ba:	9907      	ldr	r1, [sp, #28]
   bb2bc:	f000 f8b4 	bl	bb428 <_ZNKSt9type_infoeqERKS_>
   bb2c0:	b118      	cbz	r0, bb2ca <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bb2c2:	7165      	strb	r5, [r4, #5]
   bb2c4:	2000      	movs	r0, #0
   bb2c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb2ca:	4639      	mov	r1, r7
   bb2cc:	4630      	mov	r0, r6
   bb2ce:	f000 f8ab 	bl	bb428 <_ZNKSt9type_infoeqERKS_>
   bb2d2:	2800      	cmp	r0, #0
   bb2d4:	d0f6      	beq.n	bb2c4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   bb2d6:	2301      	movs	r3, #1
   bb2d8:	f8c4 8000 	str.w	r8, [r4]
   bb2dc:	7125      	strb	r5, [r4, #4]
   bb2de:	71a3      	strb	r3, [r4, #6]
   bb2e0:	e7f0      	b.n	bb2c4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000bb2e2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   bb2e2:	b538      	push	{r3, r4, r5, lr}
   bb2e4:	4615      	mov	r5, r2
   bb2e6:	461c      	mov	r4, r3
   bb2e8:	f000 f89e 	bl	bb428 <_ZNKSt9type_infoeqERKS_>
   bb2ec:	b120      	cbz	r0, bb2f8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   bb2ee:	2308      	movs	r3, #8
   bb2f0:	60e3      	str	r3, [r4, #12]
   bb2f2:	2306      	movs	r3, #6
   bb2f4:	6025      	str	r5, [r4, #0]
   bb2f6:	7123      	strb	r3, [r4, #4]
   bb2f8:	bd38      	pop	{r3, r4, r5, pc}

000bb2fa <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   bb2fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb2fc:	4605      	mov	r5, r0
   bb2fe:	460c      	mov	r4, r1
   bb300:	9201      	str	r2, [sp, #4]
   bb302:	461e      	mov	r6, r3
   bb304:	f000 f890 	bl	bb428 <_ZNKSt9type_infoeqERKS_>
   bb308:	b950      	cbnz	r0, bb320 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bb30a:	2e03      	cmp	r6, #3
   bb30c:	d808      	bhi.n	bb320 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bb30e:	6823      	ldr	r3, [r4, #0]
   bb310:	9a01      	ldr	r2, [sp, #4]
   bb312:	695b      	ldr	r3, [r3, #20]
   bb314:	4629      	mov	r1, r5
   bb316:	4620      	mov	r0, r4
   bb318:	b002      	add	sp, #8
   bb31a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb31e:	4718      	bx	r3
   bb320:	b002      	add	sp, #8
   bb322:	bd70      	pop	{r4, r5, r6, pc}

000bb324 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   bb324:	b510      	push	{r4, lr}
   bb326:	4b03      	ldr	r3, [pc, #12]	; (bb334 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   bb328:	6003      	str	r3, [r0, #0]
   bb32a:	4604      	mov	r4, r0
   bb32c:	f7ff ffa6 	bl	bb27c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bb330:	4620      	mov	r0, r4
   bb332:	bd10      	pop	{r4, pc}
   bb334:	000bebe8 	.word	0x000bebe8

000bb338 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   bb338:	b510      	push	{r4, lr}
   bb33a:	4604      	mov	r4, r0
   bb33c:	f7ff fff2 	bl	bb324 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   bb340:	4620      	mov	r0, r4
   bb342:	210c      	movs	r1, #12
   bb344:	f7f8 fead 	bl	b40a2 <_ZdlPvj>
   bb348:	4620      	mov	r0, r4
   bb34a:	bd10      	pop	{r4, pc}

000bb34c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   bb34c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bb34e:	9f08      	ldr	r7, [sp, #32]
   bb350:	4297      	cmp	r7, r2
   bb352:	4605      	mov	r5, r0
   bb354:	460e      	mov	r6, r1
   bb356:	4614      	mov	r4, r2
   bb358:	d00a      	beq.n	bb370 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   bb35a:	68a8      	ldr	r0, [r5, #8]
   bb35c:	6802      	ldr	r2, [r0, #0]
   bb35e:	9708      	str	r7, [sp, #32]
   bb360:	6a15      	ldr	r5, [r2, #32]
   bb362:	4631      	mov	r1, r6
   bb364:	4622      	mov	r2, r4
   bb366:	46ac      	mov	ip, r5
   bb368:	b003      	add	sp, #12
   bb36a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bb36e:	4760      	bx	ip
   bb370:	4619      	mov	r1, r3
   bb372:	9301      	str	r3, [sp, #4]
   bb374:	f000 f858 	bl	bb428 <_ZNKSt9type_infoeqERKS_>
   bb378:	9b01      	ldr	r3, [sp, #4]
   bb37a:	2800      	cmp	r0, #0
   bb37c:	d0ed      	beq.n	bb35a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   bb37e:	2006      	movs	r0, #6
   bb380:	b003      	add	sp, #12
   bb382:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bb384 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   bb384:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb388:	460d      	mov	r5, r1
   bb38a:	4619      	mov	r1, r3
   bb38c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   bb390:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   bb394:	4681      	mov	r9, r0
   bb396:	4617      	mov	r7, r2
   bb398:	4698      	mov	r8, r3
   bb39a:	f000 f845 	bl	bb428 <_ZNKSt9type_infoeqERKS_>
   bb39e:	b190      	cbz	r0, bb3c6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   bb3a0:	2d00      	cmp	r5, #0
   bb3a2:	6034      	str	r4, [r6, #0]
   bb3a4:	7137      	strb	r7, [r6, #4]
   bb3a6:	db09      	blt.n	bb3bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   bb3a8:	1961      	adds	r1, r4, r5
   bb3aa:	458a      	cmp	sl, r1
   bb3ac:	bf0c      	ite	eq
   bb3ae:	2106      	moveq	r1, #6
   bb3b0:	2101      	movne	r1, #1
   bb3b2:	71b1      	strb	r1, [r6, #6]
   bb3b4:	2000      	movs	r0, #0
   bb3b6:	b001      	add	sp, #4
   bb3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb3bc:	3502      	adds	r5, #2
   bb3be:	d1f9      	bne.n	bb3b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb3c0:	2301      	movs	r3, #1
   bb3c2:	71b3      	strb	r3, [r6, #6]
   bb3c4:	e7f6      	b.n	bb3b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb3c6:	4554      	cmp	r4, sl
   bb3c8:	d106      	bne.n	bb3d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bb3ca:	4659      	mov	r1, fp
   bb3cc:	4648      	mov	r0, r9
   bb3ce:	f000 f82b 	bl	bb428 <_ZNKSt9type_infoeqERKS_>
   bb3d2:	b108      	cbz	r0, bb3d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bb3d4:	7177      	strb	r7, [r6, #5]
   bb3d6:	e7ed      	b.n	bb3b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb3d8:	f8d9 0008 	ldr.w	r0, [r9, #8]
   bb3dc:	6803      	ldr	r3, [r0, #0]
   bb3de:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   bb3e2:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   bb3e6:	69dc      	ldr	r4, [r3, #28]
   bb3e8:	463a      	mov	r2, r7
   bb3ea:	4643      	mov	r3, r8
   bb3ec:	4629      	mov	r1, r5
   bb3ee:	46a4      	mov	ip, r4
   bb3f0:	b001      	add	sp, #4
   bb3f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb3f6:	4760      	bx	ip

000bb3f8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   bb3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb3fc:	4607      	mov	r7, r0
   bb3fe:	460c      	mov	r4, r1
   bb400:	4615      	mov	r5, r2
   bb402:	461e      	mov	r6, r3
   bb404:	f7ff ff6d 	bl	bb2e2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   bb408:	b948      	cbnz	r0, bb41e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   bb40a:	68b8      	ldr	r0, [r7, #8]
   bb40c:	6803      	ldr	r3, [r0, #0]
   bb40e:	699f      	ldr	r7, [r3, #24]
   bb410:	462a      	mov	r2, r5
   bb412:	4633      	mov	r3, r6
   bb414:	4621      	mov	r1, r4
   bb416:	46bc      	mov	ip, r7
   bb418:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bb41c:	4760      	bx	ip
   bb41e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb422 <_ZNSt9type_infoD1Ev>:
   bb422:	4770      	bx	lr

000bb424 <_ZNKSt9type_info14__is_pointer_pEv>:
   bb424:	2000      	movs	r0, #0
   bb426:	4770      	bx	lr

000bb428 <_ZNKSt9type_infoeqERKS_>:
   bb428:	4281      	cmp	r1, r0
   bb42a:	b508      	push	{r3, lr}
   bb42c:	d00e      	beq.n	bb44c <_ZNKSt9type_infoeqERKS_+0x24>
   bb42e:	6840      	ldr	r0, [r0, #4]
   bb430:	7803      	ldrb	r3, [r0, #0]
   bb432:	2b2a      	cmp	r3, #42	; 0x2a
   bb434:	d00c      	beq.n	bb450 <_ZNKSt9type_infoeqERKS_+0x28>
   bb436:	6849      	ldr	r1, [r1, #4]
   bb438:	780b      	ldrb	r3, [r1, #0]
   bb43a:	2b2a      	cmp	r3, #42	; 0x2a
   bb43c:	bf08      	it	eq
   bb43e:	3101      	addeq	r1, #1
   bb440:	f000 fec6 	bl	bc1d0 <strcmp>
   bb444:	fab0 f080 	clz	r0, r0
   bb448:	0940      	lsrs	r0, r0, #5
   bb44a:	bd08      	pop	{r3, pc}
   bb44c:	2001      	movs	r0, #1
   bb44e:	e7fc      	b.n	bb44a <_ZNKSt9type_infoeqERKS_+0x22>
   bb450:	2000      	movs	r0, #0
   bb452:	e7fa      	b.n	bb44a <_ZNKSt9type_infoeqERKS_+0x22>

000bb454 <floorf>:
   bb454:	ee10 2a10 	vmov	r2, s0
   bb458:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   bb45c:	3b7f      	subs	r3, #127	; 0x7f
   bb45e:	2b16      	cmp	r3, #22
   bb460:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   bb464:	dc28      	bgt.n	bb4b8 <floorf+0x64>
   bb466:	2b00      	cmp	r3, #0
   bb468:	db18      	blt.n	bb49c <floorf+0x48>
   bb46a:	491a      	ldr	r1, [pc, #104]	; (bb4d4 <floorf+0x80>)
   bb46c:	4119      	asrs	r1, r3
   bb46e:	420a      	tst	r2, r1
   bb470:	d021      	beq.n	bb4b6 <floorf+0x62>
   bb472:	eddf 7a19 	vldr	s15, [pc, #100]	; bb4d8 <floorf+0x84>
   bb476:	ee70 7a27 	vadd.f32	s15, s0, s15
   bb47a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   bb47e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb482:	dd18      	ble.n	bb4b6 <floorf+0x62>
   bb484:	2a00      	cmp	r2, #0
   bb486:	da04      	bge.n	bb492 <floorf+0x3e>
   bb488:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   bb48c:	fa40 f303 	asr.w	r3, r0, r3
   bb490:	441a      	add	r2, r3
   bb492:	ea22 0301 	bic.w	r3, r2, r1
   bb496:	ee00 3a10 	vmov	s0, r3
   bb49a:	4770      	bx	lr
   bb49c:	eddf 7a0e 	vldr	s15, [pc, #56]	; bb4d8 <floorf+0x84>
   bb4a0:	ee70 7a27 	vadd.f32	s15, s0, s15
   bb4a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   bb4a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb4ac:	dd03      	ble.n	bb4b6 <floorf+0x62>
   bb4ae:	2a00      	cmp	r2, #0
   bb4b0:	db08      	blt.n	bb4c4 <floorf+0x70>
   bb4b2:	ed9f 0a0a 	vldr	s0, [pc, #40]	; bb4dc <floorf+0x88>
   bb4b6:	4770      	bx	lr
   bb4b8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   bb4bc:	d3fb      	bcc.n	bb4b6 <floorf+0x62>
   bb4be:	ee30 0a00 	vadd.f32	s0, s0, s0
   bb4c2:	4770      	bx	lr
   bb4c4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   bb4c8:	2900      	cmp	r1, #0
   bb4ca:	bf18      	it	ne
   bb4cc:	eeb0 0a67 	vmovne.f32	s0, s15
   bb4d0:	4770      	bx	lr
   bb4d2:	bf00      	nop
   bb4d4:	007fffff 	.word	0x007fffff
   bb4d8:	7149f2ca 	.word	0x7149f2ca
   bb4dc:	00000000 	.word	0x00000000

000bb4e0 <sqrt>:
   bb4e0:	b538      	push	{r3, r4, r5, lr}
   bb4e2:	ed2d 8b02 	vpush	{d8}
   bb4e6:	ec55 4b10 	vmov	r4, r5, d0
   bb4ea:	f000 f833 	bl	bb554 <__ieee754_sqrt>
   bb4ee:	4b18      	ldr	r3, [pc, #96]	; (bb550 <sqrt+0x70>)
   bb4f0:	eeb0 8a40 	vmov.f32	s16, s0
   bb4f4:	eef0 8a60 	vmov.f32	s17, s1
   bb4f8:	f993 3000 	ldrsb.w	r3, [r3]
   bb4fc:	3301      	adds	r3, #1
   bb4fe:	d00d      	beq.n	bb51c <sqrt+0x3c>
   bb500:	4622      	mov	r2, r4
   bb502:	462b      	mov	r3, r5
   bb504:	4620      	mov	r0, r4
   bb506:	4629      	mov	r1, r5
   bb508:	f000 fd46 	bl	bbf98 <__aeabi_dcmpun>
   bb50c:	b930      	cbnz	r0, bb51c <sqrt+0x3c>
   bb50e:	2200      	movs	r2, #0
   bb510:	2300      	movs	r3, #0
   bb512:	4620      	mov	r0, r4
   bb514:	4629      	mov	r1, r5
   bb516:	f000 fd17 	bl	bbf48 <__aeabi_dcmplt>
   bb51a:	b930      	cbnz	r0, bb52a <sqrt+0x4a>
   bb51c:	eeb0 0a48 	vmov.f32	s0, s16
   bb520:	eef0 0a68 	vmov.f32	s1, s17
   bb524:	ecbd 8b02 	vpop	{d8}
   bb528:	bd38      	pop	{r3, r4, r5, pc}
   bb52a:	f7fd fac5 	bl	b8ab8 <__errno>
   bb52e:	2200      	movs	r2, #0
   bb530:	2300      	movs	r3, #0
   bb532:	2121      	movs	r1, #33	; 0x21
   bb534:	6001      	str	r1, [r0, #0]
   bb536:	4610      	mov	r0, r2
   bb538:	4619      	mov	r1, r3
   bb53a:	f000 fbbd 	bl	bbcb8 <__aeabi_ddiv>
   bb53e:	ec41 0b18 	vmov	d8, r0, r1
   bb542:	eeb0 0a48 	vmov.f32	s0, s16
   bb546:	eef0 0a68 	vmov.f32	s1, s17
   bb54a:	ecbd 8b02 	vpop	{d8}
   bb54e:	bd38      	pop	{r3, r4, r5, pc}
   bb550:	200350c8 	.word	0x200350c8

000bb554 <__ieee754_sqrt>:
   bb554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb558:	4a63      	ldr	r2, [pc, #396]	; (bb6e8 <__ieee754_sqrt+0x194>)
   bb55a:	ec55 4b10 	vmov	r4, r5, d0
   bb55e:	43aa      	bics	r2, r5
   bb560:	f000 809f 	beq.w	bb6a2 <__ieee754_sqrt+0x14e>
   bb564:	2d00      	cmp	r5, #0
   bb566:	ee10 ca10 	vmov	ip, s0
   bb56a:	462b      	mov	r3, r5
   bb56c:	dd54      	ble.n	bb618 <__ieee754_sqrt+0xc4>
   bb56e:	1529      	asrs	r1, r5, #20
   bb570:	d063      	beq.n	bb63a <__ieee754_sqrt+0xe6>
   bb572:	f3c3 0313 	ubfx	r3, r3, #0, #20
   bb576:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   bb57a:	07c9      	lsls	r1, r1, #31
   bb57c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bb580:	d404      	bmi.n	bb58c <__ieee754_sqrt+0x38>
   bb582:	005b      	lsls	r3, r3, #1
   bb584:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   bb588:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bb58c:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   bb590:	2600      	movs	r6, #0
   bb592:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   bb596:	107f      	asrs	r7, r7, #1
   bb598:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bb59c:	f04f 0e16 	mov.w	lr, #22
   bb5a0:	4634      	mov	r4, r6
   bb5a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   bb5a6:	18a1      	adds	r1, r4, r2
   bb5a8:	4299      	cmp	r1, r3
   bb5aa:	dc02      	bgt.n	bb5b2 <__ieee754_sqrt+0x5e>
   bb5ac:	1a5b      	subs	r3, r3, r1
   bb5ae:	188c      	adds	r4, r1, r2
   bb5b0:	4416      	add	r6, r2
   bb5b2:	005b      	lsls	r3, r3, #1
   bb5b4:	f1be 0e01 	subs.w	lr, lr, #1
   bb5b8:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   bb5bc:	ea4f 0252 	mov.w	r2, r2, lsr #1
   bb5c0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bb5c4:	d1ef      	bne.n	bb5a6 <__ieee754_sqrt+0x52>
   bb5c6:	4675      	mov	r5, lr
   bb5c8:	2020      	movs	r0, #32
   bb5ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   bb5ce:	e00a      	b.n	bb5e6 <__ieee754_sqrt+0x92>
   bb5d0:	d044      	beq.n	bb65c <__ieee754_sqrt+0x108>
   bb5d2:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   bb5d6:	3801      	subs	r0, #1
   bb5d8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   bb5dc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bb5e0:	ea4f 0252 	mov.w	r2, r2, lsr #1
   bb5e4:	d043      	beq.n	bb66e <__ieee754_sqrt+0x11a>
   bb5e6:	42a3      	cmp	r3, r4
   bb5e8:	eb02 010e 	add.w	r1, r2, lr
   bb5ec:	ddf0      	ble.n	bb5d0 <__ieee754_sqrt+0x7c>
   bb5ee:	2900      	cmp	r1, #0
   bb5f0:	eb01 0e02 	add.w	lr, r1, r2
   bb5f4:	db0a      	blt.n	bb60c <__ieee754_sqrt+0xb8>
   bb5f6:	46a0      	mov	r8, r4
   bb5f8:	1b1b      	subs	r3, r3, r4
   bb5fa:	4561      	cmp	r1, ip
   bb5fc:	bf88      	it	hi
   bb5fe:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   bb602:	ebac 0c01 	sub.w	ip, ip, r1
   bb606:	4415      	add	r5, r2
   bb608:	4644      	mov	r4, r8
   bb60a:	e7e2      	b.n	bb5d2 <__ieee754_sqrt+0x7e>
   bb60c:	f1be 0f00 	cmp.w	lr, #0
   bb610:	dbf1      	blt.n	bb5f6 <__ieee754_sqrt+0xa2>
   bb612:	f104 0801 	add.w	r8, r4, #1
   bb616:	e7ef      	b.n	bb5f8 <__ieee754_sqrt+0xa4>
   bb618:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   bb61c:	4322      	orrs	r2, r4
   bb61e:	d038      	beq.n	bb692 <__ieee754_sqrt+0x13e>
   bb620:	2d00      	cmp	r5, #0
   bb622:	d14e      	bne.n	bb6c2 <__ieee754_sqrt+0x16e>
   bb624:	4629      	mov	r1, r5
   bb626:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   bb62a:	3915      	subs	r1, #21
   bb62c:	4613      	mov	r3, r2
   bb62e:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   bb632:	2a00      	cmp	r2, #0
   bb634:	d0f7      	beq.n	bb626 <__ieee754_sqrt+0xd2>
   bb636:	02d6      	lsls	r6, r2, #11
   bb638:	d450      	bmi.n	bb6dc <__ieee754_sqrt+0x188>
   bb63a:	2000      	movs	r0, #0
   bb63c:	005b      	lsls	r3, r3, #1
   bb63e:	02dd      	lsls	r5, r3, #11
   bb640:	4604      	mov	r4, r0
   bb642:	f100 0001 	add.w	r0, r0, #1
   bb646:	d5f9      	bpl.n	bb63c <__ieee754_sqrt+0xe8>
   bb648:	461a      	mov	r2, r3
   bb64a:	4663      	mov	r3, ip
   bb64c:	fa0c fc00 	lsl.w	ip, ip, r0
   bb650:	f1c0 0020 	rsb	r0, r0, #32
   bb654:	40c3      	lsrs	r3, r0
   bb656:	1b09      	subs	r1, r1, r4
   bb658:	4313      	orrs	r3, r2
   bb65a:	e78a      	b.n	bb572 <__ieee754_sqrt+0x1e>
   bb65c:	4561      	cmp	r1, ip
   bb65e:	d8b8      	bhi.n	bb5d2 <__ieee754_sqrt+0x7e>
   bb660:	2900      	cmp	r1, #0
   bb662:	eb01 0e02 	add.w	lr, r1, r2
   bb666:	dbd1      	blt.n	bb60c <__ieee754_sqrt+0xb8>
   bb668:	4698      	mov	r8, r3
   bb66a:	2300      	movs	r3, #0
   bb66c:	e7c9      	b.n	bb602 <__ieee754_sqrt+0xae>
   bb66e:	ea53 030c 	orrs.w	r3, r3, ip
   bb672:	d110      	bne.n	bb696 <__ieee754_sqrt+0x142>
   bb674:	0868      	lsrs	r0, r5, #1
   bb676:	1071      	asrs	r1, r6, #1
   bb678:	07f3      	lsls	r3, r6, #31
   bb67a:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   bb67e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   bb682:	bf48      	it	mi
   bb684:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   bb688:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   bb68c:	4602      	mov	r2, r0
   bb68e:	ec43 2b10 	vmov	d0, r2, r3
   bb692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb696:	1c6a      	adds	r2, r5, #1
   bb698:	bf16      	itet	ne
   bb69a:	1c68      	addne	r0, r5, #1
   bb69c:	3601      	addeq	r6, #1
   bb69e:	0840      	lsrne	r0, r0, #1
   bb6a0:	e7e9      	b.n	bb676 <__ieee754_sqrt+0x122>
   bb6a2:	ee10 2a10 	vmov	r2, s0
   bb6a6:	ee10 0a10 	vmov	r0, s0
   bb6aa:	462b      	mov	r3, r5
   bb6ac:	4629      	mov	r1, r5
   bb6ae:	f000 f9d9 	bl	bba64 <__aeabi_dmul>
   bb6b2:	4622      	mov	r2, r4
   bb6b4:	462b      	mov	r3, r5
   bb6b6:	f000 f81f 	bl	bb6f8 <__adddf3>
   bb6ba:	ec41 0b10 	vmov	d0, r0, r1
   bb6be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb6c2:	ee10 2a10 	vmov	r2, s0
   bb6c6:	4620      	mov	r0, r4
   bb6c8:	4629      	mov	r1, r5
   bb6ca:	f000 f813 	bl	bb6f4 <__aeabi_dsub>
   bb6ce:	4602      	mov	r2, r0
   bb6d0:	460b      	mov	r3, r1
   bb6d2:	f000 faf1 	bl	bbcb8 <__aeabi_ddiv>
   bb6d6:	ec41 0b10 	vmov	d0, r0, r1
   bb6da:	e7da      	b.n	bb692 <__ieee754_sqrt+0x13e>
   bb6dc:	4663      	mov	r3, ip
   bb6de:	2020      	movs	r0, #32
   bb6e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   bb6e4:	e7b6      	b.n	bb654 <__ieee754_sqrt+0x100>
   bb6e6:	bf00      	nop
   bb6e8:	7ff00000 	.word	0x7ff00000

000bb6ec <__aeabi_drsub>:
   bb6ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bb6f0:	e002      	b.n	bb6f8 <__adddf3>
   bb6f2:	bf00      	nop

000bb6f4 <__aeabi_dsub>:
   bb6f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bb6f8 <__adddf3>:
   bb6f8:	b530      	push	{r4, r5, lr}
   bb6fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bb6fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bb702:	ea94 0f05 	teq	r4, r5
   bb706:	bf08      	it	eq
   bb708:	ea90 0f02 	teqeq	r0, r2
   bb70c:	bf1f      	itttt	ne
   bb70e:	ea54 0c00 	orrsne.w	ip, r4, r0
   bb712:	ea55 0c02 	orrsne.w	ip, r5, r2
   bb716:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bb71a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bb71e:	f000 80e2 	beq.w	bb8e6 <__adddf3+0x1ee>
   bb722:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bb726:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bb72a:	bfb8      	it	lt
   bb72c:	426d      	neglt	r5, r5
   bb72e:	dd0c      	ble.n	bb74a <__adddf3+0x52>
   bb730:	442c      	add	r4, r5
   bb732:	ea80 0202 	eor.w	r2, r0, r2
   bb736:	ea81 0303 	eor.w	r3, r1, r3
   bb73a:	ea82 0000 	eor.w	r0, r2, r0
   bb73e:	ea83 0101 	eor.w	r1, r3, r1
   bb742:	ea80 0202 	eor.w	r2, r0, r2
   bb746:	ea81 0303 	eor.w	r3, r1, r3
   bb74a:	2d36      	cmp	r5, #54	; 0x36
   bb74c:	bf88      	it	hi
   bb74e:	bd30      	pophi	{r4, r5, pc}
   bb750:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bb754:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bb758:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bb75c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bb760:	d002      	beq.n	bb768 <__adddf3+0x70>
   bb762:	4240      	negs	r0, r0
   bb764:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb768:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bb76c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bb770:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bb774:	d002      	beq.n	bb77c <__adddf3+0x84>
   bb776:	4252      	negs	r2, r2
   bb778:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bb77c:	ea94 0f05 	teq	r4, r5
   bb780:	f000 80a7 	beq.w	bb8d2 <__adddf3+0x1da>
   bb784:	f1a4 0401 	sub.w	r4, r4, #1
   bb788:	f1d5 0e20 	rsbs	lr, r5, #32
   bb78c:	db0d      	blt.n	bb7aa <__adddf3+0xb2>
   bb78e:	fa02 fc0e 	lsl.w	ip, r2, lr
   bb792:	fa22 f205 	lsr.w	r2, r2, r5
   bb796:	1880      	adds	r0, r0, r2
   bb798:	f141 0100 	adc.w	r1, r1, #0
   bb79c:	fa03 f20e 	lsl.w	r2, r3, lr
   bb7a0:	1880      	adds	r0, r0, r2
   bb7a2:	fa43 f305 	asr.w	r3, r3, r5
   bb7a6:	4159      	adcs	r1, r3
   bb7a8:	e00e      	b.n	bb7c8 <__adddf3+0xd0>
   bb7aa:	f1a5 0520 	sub.w	r5, r5, #32
   bb7ae:	f10e 0e20 	add.w	lr, lr, #32
   bb7b2:	2a01      	cmp	r2, #1
   bb7b4:	fa03 fc0e 	lsl.w	ip, r3, lr
   bb7b8:	bf28      	it	cs
   bb7ba:	f04c 0c02 	orrcs.w	ip, ip, #2
   bb7be:	fa43 f305 	asr.w	r3, r3, r5
   bb7c2:	18c0      	adds	r0, r0, r3
   bb7c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bb7c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb7cc:	d507      	bpl.n	bb7de <__adddf3+0xe6>
   bb7ce:	f04f 0e00 	mov.w	lr, #0
   bb7d2:	f1dc 0c00 	rsbs	ip, ip, #0
   bb7d6:	eb7e 0000 	sbcs.w	r0, lr, r0
   bb7da:	eb6e 0101 	sbc.w	r1, lr, r1
   bb7de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bb7e2:	d31b      	bcc.n	bb81c <__adddf3+0x124>
   bb7e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bb7e8:	d30c      	bcc.n	bb804 <__adddf3+0x10c>
   bb7ea:	0849      	lsrs	r1, r1, #1
   bb7ec:	ea5f 0030 	movs.w	r0, r0, rrx
   bb7f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bb7f4:	f104 0401 	add.w	r4, r4, #1
   bb7f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bb7fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bb800:	f080 809a 	bcs.w	bb938 <__adddf3+0x240>
   bb804:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bb808:	bf08      	it	eq
   bb80a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bb80e:	f150 0000 	adcs.w	r0, r0, #0
   bb812:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb816:	ea41 0105 	orr.w	r1, r1, r5
   bb81a:	bd30      	pop	{r4, r5, pc}
   bb81c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bb820:	4140      	adcs	r0, r0
   bb822:	eb41 0101 	adc.w	r1, r1, r1
   bb826:	3c01      	subs	r4, #1
   bb828:	bf28      	it	cs
   bb82a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bb82e:	d2e9      	bcs.n	bb804 <__adddf3+0x10c>
   bb830:	f091 0f00 	teq	r1, #0
   bb834:	bf04      	itt	eq
   bb836:	4601      	moveq	r1, r0
   bb838:	2000      	moveq	r0, #0
   bb83a:	fab1 f381 	clz	r3, r1
   bb83e:	bf08      	it	eq
   bb840:	3320      	addeq	r3, #32
   bb842:	f1a3 030b 	sub.w	r3, r3, #11
   bb846:	f1b3 0220 	subs.w	r2, r3, #32
   bb84a:	da0c      	bge.n	bb866 <__adddf3+0x16e>
   bb84c:	320c      	adds	r2, #12
   bb84e:	dd08      	ble.n	bb862 <__adddf3+0x16a>
   bb850:	f102 0c14 	add.w	ip, r2, #20
   bb854:	f1c2 020c 	rsb	r2, r2, #12
   bb858:	fa01 f00c 	lsl.w	r0, r1, ip
   bb85c:	fa21 f102 	lsr.w	r1, r1, r2
   bb860:	e00c      	b.n	bb87c <__adddf3+0x184>
   bb862:	f102 0214 	add.w	r2, r2, #20
   bb866:	bfd8      	it	le
   bb868:	f1c2 0c20 	rsble	ip, r2, #32
   bb86c:	fa01 f102 	lsl.w	r1, r1, r2
   bb870:	fa20 fc0c 	lsr.w	ip, r0, ip
   bb874:	bfdc      	itt	le
   bb876:	ea41 010c 	orrle.w	r1, r1, ip
   bb87a:	4090      	lslle	r0, r2
   bb87c:	1ae4      	subs	r4, r4, r3
   bb87e:	bfa2      	ittt	ge
   bb880:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bb884:	4329      	orrge	r1, r5
   bb886:	bd30      	popge	{r4, r5, pc}
   bb888:	ea6f 0404 	mvn.w	r4, r4
   bb88c:	3c1f      	subs	r4, #31
   bb88e:	da1c      	bge.n	bb8ca <__adddf3+0x1d2>
   bb890:	340c      	adds	r4, #12
   bb892:	dc0e      	bgt.n	bb8b2 <__adddf3+0x1ba>
   bb894:	f104 0414 	add.w	r4, r4, #20
   bb898:	f1c4 0220 	rsb	r2, r4, #32
   bb89c:	fa20 f004 	lsr.w	r0, r0, r4
   bb8a0:	fa01 f302 	lsl.w	r3, r1, r2
   bb8a4:	ea40 0003 	orr.w	r0, r0, r3
   bb8a8:	fa21 f304 	lsr.w	r3, r1, r4
   bb8ac:	ea45 0103 	orr.w	r1, r5, r3
   bb8b0:	bd30      	pop	{r4, r5, pc}
   bb8b2:	f1c4 040c 	rsb	r4, r4, #12
   bb8b6:	f1c4 0220 	rsb	r2, r4, #32
   bb8ba:	fa20 f002 	lsr.w	r0, r0, r2
   bb8be:	fa01 f304 	lsl.w	r3, r1, r4
   bb8c2:	ea40 0003 	orr.w	r0, r0, r3
   bb8c6:	4629      	mov	r1, r5
   bb8c8:	bd30      	pop	{r4, r5, pc}
   bb8ca:	fa21 f004 	lsr.w	r0, r1, r4
   bb8ce:	4629      	mov	r1, r5
   bb8d0:	bd30      	pop	{r4, r5, pc}
   bb8d2:	f094 0f00 	teq	r4, #0
   bb8d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bb8da:	bf06      	itte	eq
   bb8dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bb8e0:	3401      	addeq	r4, #1
   bb8e2:	3d01      	subne	r5, #1
   bb8e4:	e74e      	b.n	bb784 <__adddf3+0x8c>
   bb8e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb8ea:	bf18      	it	ne
   bb8ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bb8f0:	d029      	beq.n	bb946 <__adddf3+0x24e>
   bb8f2:	ea94 0f05 	teq	r4, r5
   bb8f6:	bf08      	it	eq
   bb8f8:	ea90 0f02 	teqeq	r0, r2
   bb8fc:	d005      	beq.n	bb90a <__adddf3+0x212>
   bb8fe:	ea54 0c00 	orrs.w	ip, r4, r0
   bb902:	bf04      	itt	eq
   bb904:	4619      	moveq	r1, r3
   bb906:	4610      	moveq	r0, r2
   bb908:	bd30      	pop	{r4, r5, pc}
   bb90a:	ea91 0f03 	teq	r1, r3
   bb90e:	bf1e      	ittt	ne
   bb910:	2100      	movne	r1, #0
   bb912:	2000      	movne	r0, #0
   bb914:	bd30      	popne	{r4, r5, pc}
   bb916:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bb91a:	d105      	bne.n	bb928 <__adddf3+0x230>
   bb91c:	0040      	lsls	r0, r0, #1
   bb91e:	4149      	adcs	r1, r1
   bb920:	bf28      	it	cs
   bb922:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bb926:	bd30      	pop	{r4, r5, pc}
   bb928:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bb92c:	bf3c      	itt	cc
   bb92e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bb932:	bd30      	popcc	{r4, r5, pc}
   bb934:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb938:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bb93c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bb940:	f04f 0000 	mov.w	r0, #0
   bb944:	bd30      	pop	{r4, r5, pc}
   bb946:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb94a:	bf1a      	itte	ne
   bb94c:	4619      	movne	r1, r3
   bb94e:	4610      	movne	r0, r2
   bb950:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bb954:	bf1c      	itt	ne
   bb956:	460b      	movne	r3, r1
   bb958:	4602      	movne	r2, r0
   bb95a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bb95e:	bf06      	itte	eq
   bb960:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bb964:	ea91 0f03 	teqeq	r1, r3
   bb968:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bb96c:	bd30      	pop	{r4, r5, pc}
   bb96e:	bf00      	nop

000bb970 <__aeabi_ui2d>:
   bb970:	f090 0f00 	teq	r0, #0
   bb974:	bf04      	itt	eq
   bb976:	2100      	moveq	r1, #0
   bb978:	4770      	bxeq	lr
   bb97a:	b530      	push	{r4, r5, lr}
   bb97c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb980:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb984:	f04f 0500 	mov.w	r5, #0
   bb988:	f04f 0100 	mov.w	r1, #0
   bb98c:	e750      	b.n	bb830 <__adddf3+0x138>
   bb98e:	bf00      	nop

000bb990 <__aeabi_i2d>:
   bb990:	f090 0f00 	teq	r0, #0
   bb994:	bf04      	itt	eq
   bb996:	2100      	moveq	r1, #0
   bb998:	4770      	bxeq	lr
   bb99a:	b530      	push	{r4, r5, lr}
   bb99c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb9a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb9a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bb9a8:	bf48      	it	mi
   bb9aa:	4240      	negmi	r0, r0
   bb9ac:	f04f 0100 	mov.w	r1, #0
   bb9b0:	e73e      	b.n	bb830 <__adddf3+0x138>
   bb9b2:	bf00      	nop

000bb9b4 <__aeabi_f2d>:
   bb9b4:	0042      	lsls	r2, r0, #1
   bb9b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bb9ba:	ea4f 0131 	mov.w	r1, r1, rrx
   bb9be:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bb9c2:	bf1f      	itttt	ne
   bb9c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bb9c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bb9cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bb9d0:	4770      	bxne	lr
   bb9d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bb9d6:	bf08      	it	eq
   bb9d8:	4770      	bxeq	lr
   bb9da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bb9de:	bf04      	itt	eq
   bb9e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bb9e4:	4770      	bxeq	lr
   bb9e6:	b530      	push	{r4, r5, lr}
   bb9e8:	f44f 7460 	mov.w	r4, #896	; 0x380
   bb9ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb9f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bb9f4:	e71c      	b.n	bb830 <__adddf3+0x138>
   bb9f6:	bf00      	nop

000bb9f8 <__aeabi_ul2d>:
   bb9f8:	ea50 0201 	orrs.w	r2, r0, r1
   bb9fc:	bf08      	it	eq
   bb9fe:	4770      	bxeq	lr
   bba00:	b530      	push	{r4, r5, lr}
   bba02:	f04f 0500 	mov.w	r5, #0
   bba06:	e00a      	b.n	bba1e <__aeabi_l2d+0x16>

000bba08 <__aeabi_l2d>:
   bba08:	ea50 0201 	orrs.w	r2, r0, r1
   bba0c:	bf08      	it	eq
   bba0e:	4770      	bxeq	lr
   bba10:	b530      	push	{r4, r5, lr}
   bba12:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bba16:	d502      	bpl.n	bba1e <__aeabi_l2d+0x16>
   bba18:	4240      	negs	r0, r0
   bba1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bba1e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bba22:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bba26:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bba2a:	f43f aed8 	beq.w	bb7de <__adddf3+0xe6>
   bba2e:	f04f 0203 	mov.w	r2, #3
   bba32:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bba36:	bf18      	it	ne
   bba38:	3203      	addne	r2, #3
   bba3a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bba3e:	bf18      	it	ne
   bba40:	3203      	addne	r2, #3
   bba42:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bba46:	f1c2 0320 	rsb	r3, r2, #32
   bba4a:	fa00 fc03 	lsl.w	ip, r0, r3
   bba4e:	fa20 f002 	lsr.w	r0, r0, r2
   bba52:	fa01 fe03 	lsl.w	lr, r1, r3
   bba56:	ea40 000e 	orr.w	r0, r0, lr
   bba5a:	fa21 f102 	lsr.w	r1, r1, r2
   bba5e:	4414      	add	r4, r2
   bba60:	e6bd      	b.n	bb7de <__adddf3+0xe6>
   bba62:	bf00      	nop

000bba64 <__aeabi_dmul>:
   bba64:	b570      	push	{r4, r5, r6, lr}
   bba66:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bba6a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bba6e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bba72:	bf1d      	ittte	ne
   bba74:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bba78:	ea94 0f0c 	teqne	r4, ip
   bba7c:	ea95 0f0c 	teqne	r5, ip
   bba80:	f000 f8de 	bleq	bbc40 <__aeabi_dmul+0x1dc>
   bba84:	442c      	add	r4, r5
   bba86:	ea81 0603 	eor.w	r6, r1, r3
   bba8a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bba8e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bba92:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bba96:	bf18      	it	ne
   bba98:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bba9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bbaa0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bbaa4:	d038      	beq.n	bbb18 <__aeabi_dmul+0xb4>
   bbaa6:	fba0 ce02 	umull	ip, lr, r0, r2
   bbaaa:	f04f 0500 	mov.w	r5, #0
   bbaae:	fbe1 e502 	umlal	lr, r5, r1, r2
   bbab2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bbab6:	fbe0 e503 	umlal	lr, r5, r0, r3
   bbaba:	f04f 0600 	mov.w	r6, #0
   bbabe:	fbe1 5603 	umlal	r5, r6, r1, r3
   bbac2:	f09c 0f00 	teq	ip, #0
   bbac6:	bf18      	it	ne
   bbac8:	f04e 0e01 	orrne.w	lr, lr, #1
   bbacc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bbad0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bbad4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bbad8:	d204      	bcs.n	bbae4 <__aeabi_dmul+0x80>
   bbada:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bbade:	416d      	adcs	r5, r5
   bbae0:	eb46 0606 	adc.w	r6, r6, r6
   bbae4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bbae8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bbaec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bbaf0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bbaf4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bbaf8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bbafc:	bf88      	it	hi
   bbafe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bbb02:	d81e      	bhi.n	bbb42 <__aeabi_dmul+0xde>
   bbb04:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bbb08:	bf08      	it	eq
   bbb0a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bbb0e:	f150 0000 	adcs.w	r0, r0, #0
   bbb12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bbb16:	bd70      	pop	{r4, r5, r6, pc}
   bbb18:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bbb1c:	ea46 0101 	orr.w	r1, r6, r1
   bbb20:	ea40 0002 	orr.w	r0, r0, r2
   bbb24:	ea81 0103 	eor.w	r1, r1, r3
   bbb28:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bbb2c:	bfc2      	ittt	gt
   bbb2e:	ebd4 050c 	rsbsgt	r5, r4, ip
   bbb32:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bbb36:	bd70      	popgt	{r4, r5, r6, pc}
   bbb38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bbb3c:	f04f 0e00 	mov.w	lr, #0
   bbb40:	3c01      	subs	r4, #1
   bbb42:	f300 80ab 	bgt.w	bbc9c <__aeabi_dmul+0x238>
   bbb46:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bbb4a:	bfde      	ittt	le
   bbb4c:	2000      	movle	r0, #0
   bbb4e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bbb52:	bd70      	pople	{r4, r5, r6, pc}
   bbb54:	f1c4 0400 	rsb	r4, r4, #0
   bbb58:	3c20      	subs	r4, #32
   bbb5a:	da35      	bge.n	bbbc8 <__aeabi_dmul+0x164>
   bbb5c:	340c      	adds	r4, #12
   bbb5e:	dc1b      	bgt.n	bbb98 <__aeabi_dmul+0x134>
   bbb60:	f104 0414 	add.w	r4, r4, #20
   bbb64:	f1c4 0520 	rsb	r5, r4, #32
   bbb68:	fa00 f305 	lsl.w	r3, r0, r5
   bbb6c:	fa20 f004 	lsr.w	r0, r0, r4
   bbb70:	fa01 f205 	lsl.w	r2, r1, r5
   bbb74:	ea40 0002 	orr.w	r0, r0, r2
   bbb78:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bbb7c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bbb80:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bbb84:	fa21 f604 	lsr.w	r6, r1, r4
   bbb88:	eb42 0106 	adc.w	r1, r2, r6
   bbb8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bbb90:	bf08      	it	eq
   bbb92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bbb96:	bd70      	pop	{r4, r5, r6, pc}
   bbb98:	f1c4 040c 	rsb	r4, r4, #12
   bbb9c:	f1c4 0520 	rsb	r5, r4, #32
   bbba0:	fa00 f304 	lsl.w	r3, r0, r4
   bbba4:	fa20 f005 	lsr.w	r0, r0, r5
   bbba8:	fa01 f204 	lsl.w	r2, r1, r4
   bbbac:	ea40 0002 	orr.w	r0, r0, r2
   bbbb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bbbb4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bbbb8:	f141 0100 	adc.w	r1, r1, #0
   bbbbc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bbbc0:	bf08      	it	eq
   bbbc2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bbbc6:	bd70      	pop	{r4, r5, r6, pc}
   bbbc8:	f1c4 0520 	rsb	r5, r4, #32
   bbbcc:	fa00 f205 	lsl.w	r2, r0, r5
   bbbd0:	ea4e 0e02 	orr.w	lr, lr, r2
   bbbd4:	fa20 f304 	lsr.w	r3, r0, r4
   bbbd8:	fa01 f205 	lsl.w	r2, r1, r5
   bbbdc:	ea43 0302 	orr.w	r3, r3, r2
   bbbe0:	fa21 f004 	lsr.w	r0, r1, r4
   bbbe4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bbbe8:	fa21 f204 	lsr.w	r2, r1, r4
   bbbec:	ea20 0002 	bic.w	r0, r0, r2
   bbbf0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bbbf4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bbbf8:	bf08      	it	eq
   bbbfa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bbbfe:	bd70      	pop	{r4, r5, r6, pc}
   bbc00:	f094 0f00 	teq	r4, #0
   bbc04:	d10f      	bne.n	bbc26 <__aeabi_dmul+0x1c2>
   bbc06:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bbc0a:	0040      	lsls	r0, r0, #1
   bbc0c:	eb41 0101 	adc.w	r1, r1, r1
   bbc10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bbc14:	bf08      	it	eq
   bbc16:	3c01      	subeq	r4, #1
   bbc18:	d0f7      	beq.n	bbc0a <__aeabi_dmul+0x1a6>
   bbc1a:	ea41 0106 	orr.w	r1, r1, r6
   bbc1e:	f095 0f00 	teq	r5, #0
   bbc22:	bf18      	it	ne
   bbc24:	4770      	bxne	lr
   bbc26:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bbc2a:	0052      	lsls	r2, r2, #1
   bbc2c:	eb43 0303 	adc.w	r3, r3, r3
   bbc30:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bbc34:	bf08      	it	eq
   bbc36:	3d01      	subeq	r5, #1
   bbc38:	d0f7      	beq.n	bbc2a <__aeabi_dmul+0x1c6>
   bbc3a:	ea43 0306 	orr.w	r3, r3, r6
   bbc3e:	4770      	bx	lr
   bbc40:	ea94 0f0c 	teq	r4, ip
   bbc44:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bbc48:	bf18      	it	ne
   bbc4a:	ea95 0f0c 	teqne	r5, ip
   bbc4e:	d00c      	beq.n	bbc6a <__aeabi_dmul+0x206>
   bbc50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bbc54:	bf18      	it	ne
   bbc56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bbc5a:	d1d1      	bne.n	bbc00 <__aeabi_dmul+0x19c>
   bbc5c:	ea81 0103 	eor.w	r1, r1, r3
   bbc60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bbc64:	f04f 0000 	mov.w	r0, #0
   bbc68:	bd70      	pop	{r4, r5, r6, pc}
   bbc6a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bbc6e:	bf06      	itte	eq
   bbc70:	4610      	moveq	r0, r2
   bbc72:	4619      	moveq	r1, r3
   bbc74:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bbc78:	d019      	beq.n	bbcae <__aeabi_dmul+0x24a>
   bbc7a:	ea94 0f0c 	teq	r4, ip
   bbc7e:	d102      	bne.n	bbc86 <__aeabi_dmul+0x222>
   bbc80:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bbc84:	d113      	bne.n	bbcae <__aeabi_dmul+0x24a>
   bbc86:	ea95 0f0c 	teq	r5, ip
   bbc8a:	d105      	bne.n	bbc98 <__aeabi_dmul+0x234>
   bbc8c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bbc90:	bf1c      	itt	ne
   bbc92:	4610      	movne	r0, r2
   bbc94:	4619      	movne	r1, r3
   bbc96:	d10a      	bne.n	bbcae <__aeabi_dmul+0x24a>
   bbc98:	ea81 0103 	eor.w	r1, r1, r3
   bbc9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bbca0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bbca4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bbca8:	f04f 0000 	mov.w	r0, #0
   bbcac:	bd70      	pop	{r4, r5, r6, pc}
   bbcae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bbcb2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bbcb6:	bd70      	pop	{r4, r5, r6, pc}

000bbcb8 <__aeabi_ddiv>:
   bbcb8:	b570      	push	{r4, r5, r6, lr}
   bbcba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bbcbe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bbcc2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bbcc6:	bf1d      	ittte	ne
   bbcc8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bbccc:	ea94 0f0c 	teqne	r4, ip
   bbcd0:	ea95 0f0c 	teqne	r5, ip
   bbcd4:	f000 f8a7 	bleq	bbe26 <__aeabi_ddiv+0x16e>
   bbcd8:	eba4 0405 	sub.w	r4, r4, r5
   bbcdc:	ea81 0e03 	eor.w	lr, r1, r3
   bbce0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bbce4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bbce8:	f000 8088 	beq.w	bbdfc <__aeabi_ddiv+0x144>
   bbcec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bbcf0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bbcf4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bbcf8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bbcfc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bbd00:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bbd04:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bbd08:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bbd0c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bbd10:	429d      	cmp	r5, r3
   bbd12:	bf08      	it	eq
   bbd14:	4296      	cmpeq	r6, r2
   bbd16:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bbd1a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bbd1e:	d202      	bcs.n	bbd26 <__aeabi_ddiv+0x6e>
   bbd20:	085b      	lsrs	r3, r3, #1
   bbd22:	ea4f 0232 	mov.w	r2, r2, rrx
   bbd26:	1ab6      	subs	r6, r6, r2
   bbd28:	eb65 0503 	sbc.w	r5, r5, r3
   bbd2c:	085b      	lsrs	r3, r3, #1
   bbd2e:	ea4f 0232 	mov.w	r2, r2, rrx
   bbd32:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bbd36:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bbd3a:	ebb6 0e02 	subs.w	lr, r6, r2
   bbd3e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bbd42:	bf22      	ittt	cs
   bbd44:	1ab6      	subcs	r6, r6, r2
   bbd46:	4675      	movcs	r5, lr
   bbd48:	ea40 000c 	orrcs.w	r0, r0, ip
   bbd4c:	085b      	lsrs	r3, r3, #1
   bbd4e:	ea4f 0232 	mov.w	r2, r2, rrx
   bbd52:	ebb6 0e02 	subs.w	lr, r6, r2
   bbd56:	eb75 0e03 	sbcs.w	lr, r5, r3
   bbd5a:	bf22      	ittt	cs
   bbd5c:	1ab6      	subcs	r6, r6, r2
   bbd5e:	4675      	movcs	r5, lr
   bbd60:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bbd64:	085b      	lsrs	r3, r3, #1
   bbd66:	ea4f 0232 	mov.w	r2, r2, rrx
   bbd6a:	ebb6 0e02 	subs.w	lr, r6, r2
   bbd6e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bbd72:	bf22      	ittt	cs
   bbd74:	1ab6      	subcs	r6, r6, r2
   bbd76:	4675      	movcs	r5, lr
   bbd78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bbd7c:	085b      	lsrs	r3, r3, #1
   bbd7e:	ea4f 0232 	mov.w	r2, r2, rrx
   bbd82:	ebb6 0e02 	subs.w	lr, r6, r2
   bbd86:	eb75 0e03 	sbcs.w	lr, r5, r3
   bbd8a:	bf22      	ittt	cs
   bbd8c:	1ab6      	subcs	r6, r6, r2
   bbd8e:	4675      	movcs	r5, lr
   bbd90:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bbd94:	ea55 0e06 	orrs.w	lr, r5, r6
   bbd98:	d018      	beq.n	bbdcc <__aeabi_ddiv+0x114>
   bbd9a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bbd9e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bbda2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bbda6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bbdaa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bbdae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bbdb2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bbdb6:	d1c0      	bne.n	bbd3a <__aeabi_ddiv+0x82>
   bbdb8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bbdbc:	d10b      	bne.n	bbdd6 <__aeabi_ddiv+0x11e>
   bbdbe:	ea41 0100 	orr.w	r1, r1, r0
   bbdc2:	f04f 0000 	mov.w	r0, #0
   bbdc6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bbdca:	e7b6      	b.n	bbd3a <__aeabi_ddiv+0x82>
   bbdcc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bbdd0:	bf04      	itt	eq
   bbdd2:	4301      	orreq	r1, r0
   bbdd4:	2000      	moveq	r0, #0
   bbdd6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bbdda:	bf88      	it	hi
   bbddc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bbde0:	f63f aeaf 	bhi.w	bbb42 <__aeabi_dmul+0xde>
   bbde4:	ebb5 0c03 	subs.w	ip, r5, r3
   bbde8:	bf04      	itt	eq
   bbdea:	ebb6 0c02 	subseq.w	ip, r6, r2
   bbdee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bbdf2:	f150 0000 	adcs.w	r0, r0, #0
   bbdf6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bbdfa:	bd70      	pop	{r4, r5, r6, pc}
   bbdfc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bbe00:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bbe04:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bbe08:	bfc2      	ittt	gt
   bbe0a:	ebd4 050c 	rsbsgt	r5, r4, ip
   bbe0e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bbe12:	bd70      	popgt	{r4, r5, r6, pc}
   bbe14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bbe18:	f04f 0e00 	mov.w	lr, #0
   bbe1c:	3c01      	subs	r4, #1
   bbe1e:	e690      	b.n	bbb42 <__aeabi_dmul+0xde>
   bbe20:	ea45 0e06 	orr.w	lr, r5, r6
   bbe24:	e68d      	b.n	bbb42 <__aeabi_dmul+0xde>
   bbe26:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bbe2a:	ea94 0f0c 	teq	r4, ip
   bbe2e:	bf08      	it	eq
   bbe30:	ea95 0f0c 	teqeq	r5, ip
   bbe34:	f43f af3b 	beq.w	bbcae <__aeabi_dmul+0x24a>
   bbe38:	ea94 0f0c 	teq	r4, ip
   bbe3c:	d10a      	bne.n	bbe54 <__aeabi_ddiv+0x19c>
   bbe3e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bbe42:	f47f af34 	bne.w	bbcae <__aeabi_dmul+0x24a>
   bbe46:	ea95 0f0c 	teq	r5, ip
   bbe4a:	f47f af25 	bne.w	bbc98 <__aeabi_dmul+0x234>
   bbe4e:	4610      	mov	r0, r2
   bbe50:	4619      	mov	r1, r3
   bbe52:	e72c      	b.n	bbcae <__aeabi_dmul+0x24a>
   bbe54:	ea95 0f0c 	teq	r5, ip
   bbe58:	d106      	bne.n	bbe68 <__aeabi_ddiv+0x1b0>
   bbe5a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bbe5e:	f43f aefd 	beq.w	bbc5c <__aeabi_dmul+0x1f8>
   bbe62:	4610      	mov	r0, r2
   bbe64:	4619      	mov	r1, r3
   bbe66:	e722      	b.n	bbcae <__aeabi_dmul+0x24a>
   bbe68:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bbe6c:	bf18      	it	ne
   bbe6e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bbe72:	f47f aec5 	bne.w	bbc00 <__aeabi_dmul+0x19c>
   bbe76:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bbe7a:	f47f af0d 	bne.w	bbc98 <__aeabi_dmul+0x234>
   bbe7e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bbe82:	f47f aeeb 	bne.w	bbc5c <__aeabi_dmul+0x1f8>
   bbe86:	e712      	b.n	bbcae <__aeabi_dmul+0x24a>

000bbe88 <__gedf2>:
   bbe88:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bbe8c:	e006      	b.n	bbe9c <__cmpdf2+0x4>
   bbe8e:	bf00      	nop

000bbe90 <__ledf2>:
   bbe90:	f04f 0c01 	mov.w	ip, #1
   bbe94:	e002      	b.n	bbe9c <__cmpdf2+0x4>
   bbe96:	bf00      	nop

000bbe98 <__cmpdf2>:
   bbe98:	f04f 0c01 	mov.w	ip, #1
   bbe9c:	f84d cd04 	str.w	ip, [sp, #-4]!
   bbea0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bbea4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbea8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bbeac:	bf18      	it	ne
   bbeae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bbeb2:	d01b      	beq.n	bbeec <__cmpdf2+0x54>
   bbeb4:	b001      	add	sp, #4
   bbeb6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bbeba:	bf0c      	ite	eq
   bbebc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bbec0:	ea91 0f03 	teqne	r1, r3
   bbec4:	bf02      	ittt	eq
   bbec6:	ea90 0f02 	teqeq	r0, r2
   bbeca:	2000      	moveq	r0, #0
   bbecc:	4770      	bxeq	lr
   bbece:	f110 0f00 	cmn.w	r0, #0
   bbed2:	ea91 0f03 	teq	r1, r3
   bbed6:	bf58      	it	pl
   bbed8:	4299      	cmppl	r1, r3
   bbeda:	bf08      	it	eq
   bbedc:	4290      	cmpeq	r0, r2
   bbede:	bf2c      	ite	cs
   bbee0:	17d8      	asrcs	r0, r3, #31
   bbee2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bbee6:	f040 0001 	orr.w	r0, r0, #1
   bbeea:	4770      	bx	lr
   bbeec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bbef0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbef4:	d102      	bne.n	bbefc <__cmpdf2+0x64>
   bbef6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bbefa:	d107      	bne.n	bbf0c <__cmpdf2+0x74>
   bbefc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bbf00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbf04:	d1d6      	bne.n	bbeb4 <__cmpdf2+0x1c>
   bbf06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bbf0a:	d0d3      	beq.n	bbeb4 <__cmpdf2+0x1c>
   bbf0c:	f85d 0b04 	ldr.w	r0, [sp], #4
   bbf10:	4770      	bx	lr
   bbf12:	bf00      	nop

000bbf14 <__aeabi_cdrcmple>:
   bbf14:	4684      	mov	ip, r0
   bbf16:	4610      	mov	r0, r2
   bbf18:	4662      	mov	r2, ip
   bbf1a:	468c      	mov	ip, r1
   bbf1c:	4619      	mov	r1, r3
   bbf1e:	4663      	mov	r3, ip
   bbf20:	e000      	b.n	bbf24 <__aeabi_cdcmpeq>
   bbf22:	bf00      	nop

000bbf24 <__aeabi_cdcmpeq>:
   bbf24:	b501      	push	{r0, lr}
   bbf26:	f7ff ffb7 	bl	bbe98 <__cmpdf2>
   bbf2a:	2800      	cmp	r0, #0
   bbf2c:	bf48      	it	mi
   bbf2e:	f110 0f00 	cmnmi.w	r0, #0
   bbf32:	bd01      	pop	{r0, pc}

000bbf34 <__aeabi_dcmpeq>:
   bbf34:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbf38:	f7ff fff4 	bl	bbf24 <__aeabi_cdcmpeq>
   bbf3c:	bf0c      	ite	eq
   bbf3e:	2001      	moveq	r0, #1
   bbf40:	2000      	movne	r0, #0
   bbf42:	f85d fb08 	ldr.w	pc, [sp], #8
   bbf46:	bf00      	nop

000bbf48 <__aeabi_dcmplt>:
   bbf48:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbf4c:	f7ff ffea 	bl	bbf24 <__aeabi_cdcmpeq>
   bbf50:	bf34      	ite	cc
   bbf52:	2001      	movcc	r0, #1
   bbf54:	2000      	movcs	r0, #0
   bbf56:	f85d fb08 	ldr.w	pc, [sp], #8
   bbf5a:	bf00      	nop

000bbf5c <__aeabi_dcmple>:
   bbf5c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbf60:	f7ff ffe0 	bl	bbf24 <__aeabi_cdcmpeq>
   bbf64:	bf94      	ite	ls
   bbf66:	2001      	movls	r0, #1
   bbf68:	2000      	movhi	r0, #0
   bbf6a:	f85d fb08 	ldr.w	pc, [sp], #8
   bbf6e:	bf00      	nop

000bbf70 <__aeabi_dcmpge>:
   bbf70:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbf74:	f7ff ffce 	bl	bbf14 <__aeabi_cdrcmple>
   bbf78:	bf94      	ite	ls
   bbf7a:	2001      	movls	r0, #1
   bbf7c:	2000      	movhi	r0, #0
   bbf7e:	f85d fb08 	ldr.w	pc, [sp], #8
   bbf82:	bf00      	nop

000bbf84 <__aeabi_dcmpgt>:
   bbf84:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbf88:	f7ff ffc4 	bl	bbf14 <__aeabi_cdrcmple>
   bbf8c:	bf34      	ite	cc
   bbf8e:	2001      	movcc	r0, #1
   bbf90:	2000      	movcs	r0, #0
   bbf92:	f85d fb08 	ldr.w	pc, [sp], #8
   bbf96:	bf00      	nop

000bbf98 <__aeabi_dcmpun>:
   bbf98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bbf9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbfa0:	d102      	bne.n	bbfa8 <__aeabi_dcmpun+0x10>
   bbfa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bbfa6:	d10a      	bne.n	bbfbe <__aeabi_dcmpun+0x26>
   bbfa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bbfac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbfb0:	d102      	bne.n	bbfb8 <__aeabi_dcmpun+0x20>
   bbfb2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bbfb6:	d102      	bne.n	bbfbe <__aeabi_dcmpun+0x26>
   bbfb8:	f04f 0000 	mov.w	r0, #0
   bbfbc:	4770      	bx	lr
   bbfbe:	f04f 0001 	mov.w	r0, #1
   bbfc2:	4770      	bx	lr

000bbfc4 <__aeabi_d2uiz>:
   bbfc4:	004a      	lsls	r2, r1, #1
   bbfc6:	d211      	bcs.n	bbfec <__aeabi_d2uiz+0x28>
   bbfc8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bbfcc:	d211      	bcs.n	bbff2 <__aeabi_d2uiz+0x2e>
   bbfce:	d50d      	bpl.n	bbfec <__aeabi_d2uiz+0x28>
   bbfd0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bbfd4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bbfd8:	d40e      	bmi.n	bbff8 <__aeabi_d2uiz+0x34>
   bbfda:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bbfde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bbfe2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bbfe6:	fa23 f002 	lsr.w	r0, r3, r2
   bbfea:	4770      	bx	lr
   bbfec:	f04f 0000 	mov.w	r0, #0
   bbff0:	4770      	bx	lr
   bbff2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bbff6:	d102      	bne.n	bbffe <__aeabi_d2uiz+0x3a>
   bbff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bbffc:	4770      	bx	lr
   bbffe:	f04f 0000 	mov.w	r0, #0
   bc002:	4770      	bx	lr

000bc004 <__aeabi_d2f>:
   bc004:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bc008:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bc00c:	bf24      	itt	cs
   bc00e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bc012:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bc016:	d90d      	bls.n	bc034 <__aeabi_d2f+0x30>
   bc018:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bc01c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bc020:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bc024:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bc028:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bc02c:	bf08      	it	eq
   bc02e:	f020 0001 	biceq.w	r0, r0, #1
   bc032:	4770      	bx	lr
   bc034:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bc038:	d121      	bne.n	bc07e <__aeabi_d2f+0x7a>
   bc03a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bc03e:	bfbc      	itt	lt
   bc040:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bc044:	4770      	bxlt	lr
   bc046:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bc04a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bc04e:	f1c2 0218 	rsb	r2, r2, #24
   bc052:	f1c2 0c20 	rsb	ip, r2, #32
   bc056:	fa10 f30c 	lsls.w	r3, r0, ip
   bc05a:	fa20 f002 	lsr.w	r0, r0, r2
   bc05e:	bf18      	it	ne
   bc060:	f040 0001 	orrne.w	r0, r0, #1
   bc064:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bc068:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bc06c:	fa03 fc0c 	lsl.w	ip, r3, ip
   bc070:	ea40 000c 	orr.w	r0, r0, ip
   bc074:	fa23 f302 	lsr.w	r3, r3, r2
   bc078:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bc07c:	e7cc      	b.n	bc018 <__aeabi_d2f+0x14>
   bc07e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bc082:	d107      	bne.n	bc094 <__aeabi_d2f+0x90>
   bc084:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bc088:	bf1e      	ittt	ne
   bc08a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bc08e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bc092:	4770      	bxne	lr
   bc094:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bc098:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bc09c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bc0a0:	4770      	bx	lr
   bc0a2:	bf00      	nop

000bc0a4 <__aeabi_d2ulz>:
   bc0a4:	b5d0      	push	{r4, r6, r7, lr}
   bc0a6:	4b0c      	ldr	r3, [pc, #48]	; (bc0d8 <__aeabi_d2ulz+0x34>)
   bc0a8:	2200      	movs	r2, #0
   bc0aa:	4606      	mov	r6, r0
   bc0ac:	460f      	mov	r7, r1
   bc0ae:	f7ff fcd9 	bl	bba64 <__aeabi_dmul>
   bc0b2:	f7ff ff87 	bl	bbfc4 <__aeabi_d2uiz>
   bc0b6:	4604      	mov	r4, r0
   bc0b8:	f7ff fc5a 	bl	bb970 <__aeabi_ui2d>
   bc0bc:	4b07      	ldr	r3, [pc, #28]	; (bc0dc <__aeabi_d2ulz+0x38>)
   bc0be:	2200      	movs	r2, #0
   bc0c0:	f7ff fcd0 	bl	bba64 <__aeabi_dmul>
   bc0c4:	4602      	mov	r2, r0
   bc0c6:	460b      	mov	r3, r1
   bc0c8:	4630      	mov	r0, r6
   bc0ca:	4639      	mov	r1, r7
   bc0cc:	f7ff fb12 	bl	bb6f4 <__aeabi_dsub>
   bc0d0:	f7ff ff78 	bl	bbfc4 <__aeabi_d2uiz>
   bc0d4:	4621      	mov	r1, r4
   bc0d6:	bdd0      	pop	{r4, r6, r7, pc}
   bc0d8:	3df00000 	.word	0x3df00000
   bc0dc:	41f00000 	.word	0x41f00000

000bc0e0 <atexit>:
   bc0e0:	2300      	movs	r3, #0
   bc0e2:	4601      	mov	r1, r0
   bc0e4:	461a      	mov	r2, r3
   bc0e6:	4618      	mov	r0, r3
   bc0e8:	f000 bfcc 	b.w	bd084 <__register_exitproc>

000bc0ec <atoi>:
   bc0ec:	220a      	movs	r2, #10
   bc0ee:	2100      	movs	r1, #0
   bc0f0:	f000 bfbe 	b.w	bd070 <strtol>

000bc0f4 <memcmp>:
   bc0f4:	b510      	push	{r4, lr}
   bc0f6:	3901      	subs	r1, #1
   bc0f8:	4402      	add	r2, r0
   bc0fa:	4290      	cmp	r0, r2
   bc0fc:	d101      	bne.n	bc102 <memcmp+0xe>
   bc0fe:	2000      	movs	r0, #0
   bc100:	e005      	b.n	bc10e <memcmp+0x1a>
   bc102:	7803      	ldrb	r3, [r0, #0]
   bc104:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bc108:	42a3      	cmp	r3, r4
   bc10a:	d001      	beq.n	bc110 <memcmp+0x1c>
   bc10c:	1b18      	subs	r0, r3, r4
   bc10e:	bd10      	pop	{r4, pc}
   bc110:	3001      	adds	r0, #1
   bc112:	e7f2      	b.n	bc0fa <memcmp+0x6>

000bc114 <memcpy>:
   bc114:	440a      	add	r2, r1
   bc116:	4291      	cmp	r1, r2
   bc118:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bc11c:	d100      	bne.n	bc120 <memcpy+0xc>
   bc11e:	4770      	bx	lr
   bc120:	b510      	push	{r4, lr}
   bc122:	f811 4b01 	ldrb.w	r4, [r1], #1
   bc126:	f803 4f01 	strb.w	r4, [r3, #1]!
   bc12a:	4291      	cmp	r1, r2
   bc12c:	d1f9      	bne.n	bc122 <memcpy+0xe>
   bc12e:	bd10      	pop	{r4, pc}

000bc130 <memmove>:
   bc130:	4288      	cmp	r0, r1
   bc132:	b510      	push	{r4, lr}
   bc134:	eb01 0402 	add.w	r4, r1, r2
   bc138:	d902      	bls.n	bc140 <memmove+0x10>
   bc13a:	4284      	cmp	r4, r0
   bc13c:	4623      	mov	r3, r4
   bc13e:	d807      	bhi.n	bc150 <memmove+0x20>
   bc140:	1e43      	subs	r3, r0, #1
   bc142:	42a1      	cmp	r1, r4
   bc144:	d008      	beq.n	bc158 <memmove+0x28>
   bc146:	f811 2b01 	ldrb.w	r2, [r1], #1
   bc14a:	f803 2f01 	strb.w	r2, [r3, #1]!
   bc14e:	e7f8      	b.n	bc142 <memmove+0x12>
   bc150:	4402      	add	r2, r0
   bc152:	4601      	mov	r1, r0
   bc154:	428a      	cmp	r2, r1
   bc156:	d100      	bne.n	bc15a <memmove+0x2a>
   bc158:	bd10      	pop	{r4, pc}
   bc15a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bc15e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bc162:	e7f7      	b.n	bc154 <memmove+0x24>

000bc164 <memset>:
   bc164:	4402      	add	r2, r0
   bc166:	4603      	mov	r3, r0
   bc168:	4293      	cmp	r3, r2
   bc16a:	d100      	bne.n	bc16e <memset+0xa>
   bc16c:	4770      	bx	lr
   bc16e:	f803 1b01 	strb.w	r1, [r3], #1
   bc172:	e7f9      	b.n	bc168 <memset+0x4>

000bc174 <srand>:
   bc174:	b538      	push	{r3, r4, r5, lr}
   bc176:	4b10      	ldr	r3, [pc, #64]	; (bc1b8 <srand+0x44>)
   bc178:	681d      	ldr	r5, [r3, #0]
   bc17a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bc17c:	4604      	mov	r4, r0
   bc17e:	b9b3      	cbnz	r3, bc1ae <srand+0x3a>
   bc180:	2018      	movs	r0, #24
   bc182:	f7fc fc61 	bl	b8a48 <malloc>
   bc186:	4602      	mov	r2, r0
   bc188:	63a8      	str	r0, [r5, #56]	; 0x38
   bc18a:	b920      	cbnz	r0, bc196 <srand+0x22>
   bc18c:	4b0b      	ldr	r3, [pc, #44]	; (bc1bc <srand+0x48>)
   bc18e:	480c      	ldr	r0, [pc, #48]	; (bc1c0 <srand+0x4c>)
   bc190:	2142      	movs	r1, #66	; 0x42
   bc192:	f7fc fc99 	bl	b8ac8 <__assert_func>
   bc196:	490b      	ldr	r1, [pc, #44]	; (bc1c4 <srand+0x50>)
   bc198:	4b0b      	ldr	r3, [pc, #44]	; (bc1c8 <srand+0x54>)
   bc19a:	e9c0 1300 	strd	r1, r3, [r0]
   bc19e:	4b0b      	ldr	r3, [pc, #44]	; (bc1cc <srand+0x58>)
   bc1a0:	6083      	str	r3, [r0, #8]
   bc1a2:	230b      	movs	r3, #11
   bc1a4:	8183      	strh	r3, [r0, #12]
   bc1a6:	2100      	movs	r1, #0
   bc1a8:	2001      	movs	r0, #1
   bc1aa:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bc1ae:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bc1b0:	2200      	movs	r2, #0
   bc1b2:	611c      	str	r4, [r3, #16]
   bc1b4:	615a      	str	r2, [r3, #20]
   bc1b6:	bd38      	pop	{r3, r4, r5, pc}
   bc1b8:	200350cc 	.word	0x200350cc
   bc1bc:	000bec21 	.word	0x000bec21
   bc1c0:	000bec38 	.word	0x000bec38
   bc1c4:	abcd330e 	.word	0xabcd330e
   bc1c8:	e66d1234 	.word	0xe66d1234
   bc1cc:	0005deec 	.word	0x0005deec

000bc1d0 <strcmp>:
   bc1d0:	f810 2b01 	ldrb.w	r2, [r0], #1
   bc1d4:	f811 3b01 	ldrb.w	r3, [r1], #1
   bc1d8:	2a01      	cmp	r2, #1
   bc1da:	bf28      	it	cs
   bc1dc:	429a      	cmpcs	r2, r3
   bc1de:	d0f7      	beq.n	bc1d0 <strcmp>
   bc1e0:	1ad0      	subs	r0, r2, r3
   bc1e2:	4770      	bx	lr

000bc1e4 <strcpy>:
   bc1e4:	4603      	mov	r3, r0
   bc1e6:	f811 2b01 	ldrb.w	r2, [r1], #1
   bc1ea:	f803 2b01 	strb.w	r2, [r3], #1
   bc1ee:	2a00      	cmp	r2, #0
   bc1f0:	d1f9      	bne.n	bc1e6 <strcpy+0x2>
   bc1f2:	4770      	bx	lr

000bc1f4 <strlen>:
   bc1f4:	4603      	mov	r3, r0
   bc1f6:	f813 2b01 	ldrb.w	r2, [r3], #1
   bc1fa:	2a00      	cmp	r2, #0
   bc1fc:	d1fb      	bne.n	bc1f6 <strlen+0x2>
   bc1fe:	1a18      	subs	r0, r3, r0
   bc200:	3801      	subs	r0, #1
   bc202:	4770      	bx	lr

000bc204 <strncmp>:
   bc204:	b510      	push	{r4, lr}
   bc206:	b17a      	cbz	r2, bc228 <strncmp+0x24>
   bc208:	4603      	mov	r3, r0
   bc20a:	3901      	subs	r1, #1
   bc20c:	1884      	adds	r4, r0, r2
   bc20e:	f813 0b01 	ldrb.w	r0, [r3], #1
   bc212:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bc216:	4290      	cmp	r0, r2
   bc218:	d101      	bne.n	bc21e <strncmp+0x1a>
   bc21a:	42a3      	cmp	r3, r4
   bc21c:	d101      	bne.n	bc222 <strncmp+0x1e>
   bc21e:	1a80      	subs	r0, r0, r2
   bc220:	bd10      	pop	{r4, pc}
   bc222:	2800      	cmp	r0, #0
   bc224:	d1f3      	bne.n	bc20e <strncmp+0xa>
   bc226:	e7fa      	b.n	bc21e <strncmp+0x1a>
   bc228:	4610      	mov	r0, r2
   bc22a:	e7f9      	b.n	bc220 <strncmp+0x1c>

000bc22c <strnlen>:
   bc22c:	b510      	push	{r4, lr}
   bc22e:	4602      	mov	r2, r0
   bc230:	4401      	add	r1, r0
   bc232:	428a      	cmp	r2, r1
   bc234:	4613      	mov	r3, r2
   bc236:	d003      	beq.n	bc240 <strnlen+0x14>
   bc238:	781c      	ldrb	r4, [r3, #0]
   bc23a:	3201      	adds	r2, #1
   bc23c:	2c00      	cmp	r4, #0
   bc23e:	d1f8      	bne.n	bc232 <strnlen+0x6>
   bc240:	1a18      	subs	r0, r3, r0
   bc242:	bd10      	pop	{r4, pc}

000bc244 <strstr>:
   bc244:	780a      	ldrb	r2, [r1, #0]
   bc246:	b570      	push	{r4, r5, r6, lr}
   bc248:	b96a      	cbnz	r2, bc266 <strstr+0x22>
   bc24a:	bd70      	pop	{r4, r5, r6, pc}
   bc24c:	429a      	cmp	r2, r3
   bc24e:	d109      	bne.n	bc264 <strstr+0x20>
   bc250:	460c      	mov	r4, r1
   bc252:	4605      	mov	r5, r0
   bc254:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   bc258:	2b00      	cmp	r3, #0
   bc25a:	d0f6      	beq.n	bc24a <strstr+0x6>
   bc25c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   bc260:	429e      	cmp	r6, r3
   bc262:	d0f7      	beq.n	bc254 <strstr+0x10>
   bc264:	3001      	adds	r0, #1
   bc266:	7803      	ldrb	r3, [r0, #0]
   bc268:	2b00      	cmp	r3, #0
   bc26a:	d1ef      	bne.n	bc24c <strstr+0x8>
   bc26c:	4618      	mov	r0, r3
   bc26e:	e7ec      	b.n	bc24a <strstr+0x6>

000bc270 <sulp>:
   bc270:	b570      	push	{r4, r5, r6, lr}
   bc272:	4604      	mov	r4, r0
   bc274:	460d      	mov	r5, r1
   bc276:	ec45 4b10 	vmov	d0, r4, r5
   bc27a:	4616      	mov	r6, r2
   bc27c:	f001 fe5c 	bl	bdf38 <__ulp>
   bc280:	ec51 0b10 	vmov	r0, r1, d0
   bc284:	b17e      	cbz	r6, bc2a6 <sulp+0x36>
   bc286:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bc28a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bc28e:	2b00      	cmp	r3, #0
   bc290:	dd09      	ble.n	bc2a6 <sulp+0x36>
   bc292:	051b      	lsls	r3, r3, #20
   bc294:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bc298:	2400      	movs	r4, #0
   bc29a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bc29e:	4622      	mov	r2, r4
   bc2a0:	462b      	mov	r3, r5
   bc2a2:	f7ff fbdf 	bl	bba64 <__aeabi_dmul>
   bc2a6:	bd70      	pop	{r4, r5, r6, pc}

000bc2a8 <_strtod_l>:
   bc2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc2ac:	ed2d 8b02 	vpush	{d8}
   bc2b0:	b09d      	sub	sp, #116	; 0x74
   bc2b2:	461f      	mov	r7, r3
   bc2b4:	2300      	movs	r3, #0
   bc2b6:	9318      	str	r3, [sp, #96]	; 0x60
   bc2b8:	4ba2      	ldr	r3, [pc, #648]	; (bc544 <_strtod_l+0x29c>)
   bc2ba:	9213      	str	r2, [sp, #76]	; 0x4c
   bc2bc:	681b      	ldr	r3, [r3, #0]
   bc2be:	9305      	str	r3, [sp, #20]
   bc2c0:	4604      	mov	r4, r0
   bc2c2:	4618      	mov	r0, r3
   bc2c4:	4688      	mov	r8, r1
   bc2c6:	f7ff ff95 	bl	bc1f4 <strlen>
   bc2ca:	f04f 0a00 	mov.w	sl, #0
   bc2ce:	4605      	mov	r5, r0
   bc2d0:	f04f 0b00 	mov.w	fp, #0
   bc2d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bc2d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc2da:	781a      	ldrb	r2, [r3, #0]
   bc2dc:	2a2b      	cmp	r2, #43	; 0x2b
   bc2de:	d04e      	beq.n	bc37e <_strtod_l+0xd6>
   bc2e0:	d83b      	bhi.n	bc35a <_strtod_l+0xb2>
   bc2e2:	2a0d      	cmp	r2, #13
   bc2e4:	d834      	bhi.n	bc350 <_strtod_l+0xa8>
   bc2e6:	2a08      	cmp	r2, #8
   bc2e8:	d834      	bhi.n	bc354 <_strtod_l+0xac>
   bc2ea:	2a00      	cmp	r2, #0
   bc2ec:	d03e      	beq.n	bc36c <_strtod_l+0xc4>
   bc2ee:	2300      	movs	r3, #0
   bc2f0:	930a      	str	r3, [sp, #40]	; 0x28
   bc2f2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bc2f4:	7833      	ldrb	r3, [r6, #0]
   bc2f6:	2b30      	cmp	r3, #48	; 0x30
   bc2f8:	f040 80b0 	bne.w	bc45c <_strtod_l+0x1b4>
   bc2fc:	7873      	ldrb	r3, [r6, #1]
   bc2fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bc302:	2b58      	cmp	r3, #88	; 0x58
   bc304:	d168      	bne.n	bc3d8 <_strtod_l+0x130>
   bc306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bc308:	9301      	str	r3, [sp, #4]
   bc30a:	ab18      	add	r3, sp, #96	; 0x60
   bc30c:	9702      	str	r7, [sp, #8]
   bc30e:	9300      	str	r3, [sp, #0]
   bc310:	4a8d      	ldr	r2, [pc, #564]	; (bc548 <_strtod_l+0x2a0>)
   bc312:	ab19      	add	r3, sp, #100	; 0x64
   bc314:	a917      	add	r1, sp, #92	; 0x5c
   bc316:	4620      	mov	r0, r4
   bc318:	f000 ff7e 	bl	bd218 <__gethex>
   bc31c:	f010 0707 	ands.w	r7, r0, #7
   bc320:	4605      	mov	r5, r0
   bc322:	d005      	beq.n	bc330 <_strtod_l+0x88>
   bc324:	2f06      	cmp	r7, #6
   bc326:	d12c      	bne.n	bc382 <_strtod_l+0xda>
   bc328:	3601      	adds	r6, #1
   bc32a:	2300      	movs	r3, #0
   bc32c:	9617      	str	r6, [sp, #92]	; 0x5c
   bc32e:	930a      	str	r3, [sp, #40]	; 0x28
   bc330:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bc332:	2b00      	cmp	r3, #0
   bc334:	f040 8590 	bne.w	bce58 <_strtod_l+0xbb0>
   bc338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bc33a:	b1eb      	cbz	r3, bc378 <_strtod_l+0xd0>
   bc33c:	4652      	mov	r2, sl
   bc33e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bc342:	ec43 2b10 	vmov	d0, r2, r3
   bc346:	b01d      	add	sp, #116	; 0x74
   bc348:	ecbd 8b02 	vpop	{d8}
   bc34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc350:	2a20      	cmp	r2, #32
   bc352:	d1cc      	bne.n	bc2ee <_strtod_l+0x46>
   bc354:	3301      	adds	r3, #1
   bc356:	9317      	str	r3, [sp, #92]	; 0x5c
   bc358:	e7be      	b.n	bc2d8 <_strtod_l+0x30>
   bc35a:	2a2d      	cmp	r2, #45	; 0x2d
   bc35c:	d1c7      	bne.n	bc2ee <_strtod_l+0x46>
   bc35e:	2201      	movs	r2, #1
   bc360:	920a      	str	r2, [sp, #40]	; 0x28
   bc362:	1c5a      	adds	r2, r3, #1
   bc364:	9217      	str	r2, [sp, #92]	; 0x5c
   bc366:	785b      	ldrb	r3, [r3, #1]
   bc368:	2b00      	cmp	r3, #0
   bc36a:	d1c2      	bne.n	bc2f2 <_strtod_l+0x4a>
   bc36c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bc36e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bc372:	2b00      	cmp	r3, #0
   bc374:	f040 856e 	bne.w	bce54 <_strtod_l+0xbac>
   bc378:	4652      	mov	r2, sl
   bc37a:	465b      	mov	r3, fp
   bc37c:	e7e1      	b.n	bc342 <_strtod_l+0x9a>
   bc37e:	2200      	movs	r2, #0
   bc380:	e7ee      	b.n	bc360 <_strtod_l+0xb8>
   bc382:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bc384:	b13a      	cbz	r2, bc396 <_strtod_l+0xee>
   bc386:	2135      	movs	r1, #53	; 0x35
   bc388:	a81a      	add	r0, sp, #104	; 0x68
   bc38a:	f001 fee0 	bl	be14e <__copybits>
   bc38e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc390:	4620      	mov	r0, r4
   bc392:	f001 fa9f 	bl	bd8d4 <_Bfree>
   bc396:	3f01      	subs	r7, #1
   bc398:	2f04      	cmp	r7, #4
   bc39a:	d806      	bhi.n	bc3aa <_strtod_l+0x102>
   bc39c:	e8df f007 	tbb	[pc, r7]
   bc3a0:	1714030a 	.word	0x1714030a
   bc3a4:	0a          	.byte	0x0a
   bc3a5:	00          	.byte	0x00
   bc3a6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bc3aa:	0728      	lsls	r0, r5, #28
   bc3ac:	d5c0      	bpl.n	bc330 <_strtod_l+0x88>
   bc3ae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bc3b2:	e7bd      	b.n	bc330 <_strtod_l+0x88>
   bc3b4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bc3b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bc3ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bc3be:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bc3c2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bc3c6:	e7f0      	b.n	bc3aa <_strtod_l+0x102>
   bc3c8:	f8df b180 	ldr.w	fp, [pc, #384]	; bc54c <_strtod_l+0x2a4>
   bc3cc:	e7ed      	b.n	bc3aa <_strtod_l+0x102>
   bc3ce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bc3d2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bc3d6:	e7e8      	b.n	bc3aa <_strtod_l+0x102>
   bc3d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc3da:	1c5a      	adds	r2, r3, #1
   bc3dc:	9217      	str	r2, [sp, #92]	; 0x5c
   bc3de:	785b      	ldrb	r3, [r3, #1]
   bc3e0:	2b30      	cmp	r3, #48	; 0x30
   bc3e2:	d0f9      	beq.n	bc3d8 <_strtod_l+0x130>
   bc3e4:	2b00      	cmp	r3, #0
   bc3e6:	d0a3      	beq.n	bc330 <_strtod_l+0x88>
   bc3e8:	2301      	movs	r3, #1
   bc3ea:	f04f 0900 	mov.w	r9, #0
   bc3ee:	9304      	str	r3, [sp, #16]
   bc3f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc3f2:	9308      	str	r3, [sp, #32]
   bc3f4:	f8cd 901c 	str.w	r9, [sp, #28]
   bc3f8:	464f      	mov	r7, r9
   bc3fa:	220a      	movs	r2, #10
   bc3fc:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bc3fe:	7806      	ldrb	r6, [r0, #0]
   bc400:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bc404:	b2d9      	uxtb	r1, r3
   bc406:	2909      	cmp	r1, #9
   bc408:	d92a      	bls.n	bc460 <_strtod_l+0x1b8>
   bc40a:	9905      	ldr	r1, [sp, #20]
   bc40c:	462a      	mov	r2, r5
   bc40e:	f7ff fef9 	bl	bc204 <strncmp>
   bc412:	b398      	cbz	r0, bc47c <_strtod_l+0x1d4>
   bc414:	2000      	movs	r0, #0
   bc416:	4632      	mov	r2, r6
   bc418:	463d      	mov	r5, r7
   bc41a:	9005      	str	r0, [sp, #20]
   bc41c:	4603      	mov	r3, r0
   bc41e:	2a65      	cmp	r2, #101	; 0x65
   bc420:	d001      	beq.n	bc426 <_strtod_l+0x17e>
   bc422:	2a45      	cmp	r2, #69	; 0x45
   bc424:	d118      	bne.n	bc458 <_strtod_l+0x1b0>
   bc426:	b91d      	cbnz	r5, bc430 <_strtod_l+0x188>
   bc428:	9a04      	ldr	r2, [sp, #16]
   bc42a:	4302      	orrs	r2, r0
   bc42c:	d09e      	beq.n	bc36c <_strtod_l+0xc4>
   bc42e:	2500      	movs	r5, #0
   bc430:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bc434:	f108 0201 	add.w	r2, r8, #1
   bc438:	9217      	str	r2, [sp, #92]	; 0x5c
   bc43a:	f898 2001 	ldrb.w	r2, [r8, #1]
   bc43e:	2a2b      	cmp	r2, #43	; 0x2b
   bc440:	d075      	beq.n	bc52e <_strtod_l+0x286>
   bc442:	2a2d      	cmp	r2, #45	; 0x2d
   bc444:	d07b      	beq.n	bc53e <_strtod_l+0x296>
   bc446:	f04f 0c00 	mov.w	ip, #0
   bc44a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bc44e:	2909      	cmp	r1, #9
   bc450:	f240 8082 	bls.w	bc558 <_strtod_l+0x2b0>
   bc454:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bc458:	2600      	movs	r6, #0
   bc45a:	e09d      	b.n	bc598 <_strtod_l+0x2f0>
   bc45c:	2300      	movs	r3, #0
   bc45e:	e7c4      	b.n	bc3ea <_strtod_l+0x142>
   bc460:	2f08      	cmp	r7, #8
   bc462:	bfd8      	it	le
   bc464:	9907      	ldrle	r1, [sp, #28]
   bc466:	f100 0001 	add.w	r0, r0, #1
   bc46a:	bfda      	itte	le
   bc46c:	fb02 3301 	mlale	r3, r2, r1, r3
   bc470:	9307      	strle	r3, [sp, #28]
   bc472:	fb02 3909 	mlagt	r9, r2, r9, r3
   bc476:	3701      	adds	r7, #1
   bc478:	9017      	str	r0, [sp, #92]	; 0x5c
   bc47a:	e7bf      	b.n	bc3fc <_strtod_l+0x154>
   bc47c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc47e:	195a      	adds	r2, r3, r5
   bc480:	9217      	str	r2, [sp, #92]	; 0x5c
   bc482:	5d5a      	ldrb	r2, [r3, r5]
   bc484:	2f00      	cmp	r7, #0
   bc486:	d037      	beq.n	bc4f8 <_strtod_l+0x250>
   bc488:	9005      	str	r0, [sp, #20]
   bc48a:	463d      	mov	r5, r7
   bc48c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bc490:	2b09      	cmp	r3, #9
   bc492:	d912      	bls.n	bc4ba <_strtod_l+0x212>
   bc494:	2301      	movs	r3, #1
   bc496:	e7c2      	b.n	bc41e <_strtod_l+0x176>
   bc498:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc49a:	1c5a      	adds	r2, r3, #1
   bc49c:	9217      	str	r2, [sp, #92]	; 0x5c
   bc49e:	785a      	ldrb	r2, [r3, #1]
   bc4a0:	3001      	adds	r0, #1
   bc4a2:	2a30      	cmp	r2, #48	; 0x30
   bc4a4:	d0f8      	beq.n	bc498 <_strtod_l+0x1f0>
   bc4a6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bc4aa:	2b08      	cmp	r3, #8
   bc4ac:	f200 84d9 	bhi.w	bce62 <_strtod_l+0xbba>
   bc4b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc4b2:	9005      	str	r0, [sp, #20]
   bc4b4:	2000      	movs	r0, #0
   bc4b6:	9308      	str	r3, [sp, #32]
   bc4b8:	4605      	mov	r5, r0
   bc4ba:	3a30      	subs	r2, #48	; 0x30
   bc4bc:	f100 0301 	add.w	r3, r0, #1
   bc4c0:	d014      	beq.n	bc4ec <_strtod_l+0x244>
   bc4c2:	9905      	ldr	r1, [sp, #20]
   bc4c4:	4419      	add	r1, r3
   bc4c6:	9105      	str	r1, [sp, #20]
   bc4c8:	462b      	mov	r3, r5
   bc4ca:	eb00 0e05 	add.w	lr, r0, r5
   bc4ce:	210a      	movs	r1, #10
   bc4d0:	4573      	cmp	r3, lr
   bc4d2:	d113      	bne.n	bc4fc <_strtod_l+0x254>
   bc4d4:	182b      	adds	r3, r5, r0
   bc4d6:	2b08      	cmp	r3, #8
   bc4d8:	f105 0501 	add.w	r5, r5, #1
   bc4dc:	4405      	add	r5, r0
   bc4de:	dc1c      	bgt.n	bc51a <_strtod_l+0x272>
   bc4e0:	9907      	ldr	r1, [sp, #28]
   bc4e2:	230a      	movs	r3, #10
   bc4e4:	fb03 2301 	mla	r3, r3, r1, r2
   bc4e8:	9307      	str	r3, [sp, #28]
   bc4ea:	2300      	movs	r3, #0
   bc4ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc4ee:	1c51      	adds	r1, r2, #1
   bc4f0:	9117      	str	r1, [sp, #92]	; 0x5c
   bc4f2:	7852      	ldrb	r2, [r2, #1]
   bc4f4:	4618      	mov	r0, r3
   bc4f6:	e7c9      	b.n	bc48c <_strtod_l+0x1e4>
   bc4f8:	4638      	mov	r0, r7
   bc4fa:	e7d2      	b.n	bc4a2 <_strtod_l+0x1fa>
   bc4fc:	2b08      	cmp	r3, #8
   bc4fe:	dc04      	bgt.n	bc50a <_strtod_l+0x262>
   bc500:	9e07      	ldr	r6, [sp, #28]
   bc502:	434e      	muls	r6, r1
   bc504:	9607      	str	r6, [sp, #28]
   bc506:	3301      	adds	r3, #1
   bc508:	e7e2      	b.n	bc4d0 <_strtod_l+0x228>
   bc50a:	f103 0c01 	add.w	ip, r3, #1
   bc50e:	f1bc 0f10 	cmp.w	ip, #16
   bc512:	bfd8      	it	le
   bc514:	fb01 f909 	mulle.w	r9, r1, r9
   bc518:	e7f5      	b.n	bc506 <_strtod_l+0x25e>
   bc51a:	2d10      	cmp	r5, #16
   bc51c:	bfdc      	itt	le
   bc51e:	230a      	movle	r3, #10
   bc520:	fb03 2909 	mlale	r9, r3, r9, r2
   bc524:	e7e1      	b.n	bc4ea <_strtod_l+0x242>
   bc526:	2300      	movs	r3, #0
   bc528:	9305      	str	r3, [sp, #20]
   bc52a:	2301      	movs	r3, #1
   bc52c:	e77c      	b.n	bc428 <_strtod_l+0x180>
   bc52e:	f04f 0c00 	mov.w	ip, #0
   bc532:	f108 0202 	add.w	r2, r8, #2
   bc536:	9217      	str	r2, [sp, #92]	; 0x5c
   bc538:	f898 2002 	ldrb.w	r2, [r8, #2]
   bc53c:	e785      	b.n	bc44a <_strtod_l+0x1a2>
   bc53e:	f04f 0c01 	mov.w	ip, #1
   bc542:	e7f6      	b.n	bc532 <_strtod_l+0x28a>
   bc544:	000bee64 	.word	0x000bee64
   bc548:	000beca0 	.word	0x000beca0
   bc54c:	7ff00000 	.word	0x7ff00000
   bc550:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc552:	1c51      	adds	r1, r2, #1
   bc554:	9117      	str	r1, [sp, #92]	; 0x5c
   bc556:	7852      	ldrb	r2, [r2, #1]
   bc558:	2a30      	cmp	r2, #48	; 0x30
   bc55a:	d0f9      	beq.n	bc550 <_strtod_l+0x2a8>
   bc55c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bc560:	2908      	cmp	r1, #8
   bc562:	f63f af79 	bhi.w	bc458 <_strtod_l+0x1b0>
   bc566:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bc56a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc56c:	9206      	str	r2, [sp, #24]
   bc56e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc570:	1c51      	adds	r1, r2, #1
   bc572:	9117      	str	r1, [sp, #92]	; 0x5c
   bc574:	7852      	ldrb	r2, [r2, #1]
   bc576:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bc57a:	2e09      	cmp	r6, #9
   bc57c:	d937      	bls.n	bc5ee <_strtod_l+0x346>
   bc57e:	9e06      	ldr	r6, [sp, #24]
   bc580:	1b89      	subs	r1, r1, r6
   bc582:	2908      	cmp	r1, #8
   bc584:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bc588:	dc02      	bgt.n	bc590 <_strtod_l+0x2e8>
   bc58a:	4576      	cmp	r6, lr
   bc58c:	bfa8      	it	ge
   bc58e:	4676      	movge	r6, lr
   bc590:	f1bc 0f00 	cmp.w	ip, #0
   bc594:	d000      	beq.n	bc598 <_strtod_l+0x2f0>
   bc596:	4276      	negs	r6, r6
   bc598:	2d00      	cmp	r5, #0
   bc59a:	d14d      	bne.n	bc638 <_strtod_l+0x390>
   bc59c:	9904      	ldr	r1, [sp, #16]
   bc59e:	4301      	orrs	r1, r0
   bc5a0:	f47f aec6 	bne.w	bc330 <_strtod_l+0x88>
   bc5a4:	2b00      	cmp	r3, #0
   bc5a6:	f47f aee1 	bne.w	bc36c <_strtod_l+0xc4>
   bc5aa:	2a69      	cmp	r2, #105	; 0x69
   bc5ac:	d027      	beq.n	bc5fe <_strtod_l+0x356>
   bc5ae:	dc24      	bgt.n	bc5fa <_strtod_l+0x352>
   bc5b0:	2a49      	cmp	r2, #73	; 0x49
   bc5b2:	d024      	beq.n	bc5fe <_strtod_l+0x356>
   bc5b4:	2a4e      	cmp	r2, #78	; 0x4e
   bc5b6:	f47f aed9 	bne.w	bc36c <_strtod_l+0xc4>
   bc5ba:	499f      	ldr	r1, [pc, #636]	; (bc838 <_strtod_l+0x590>)
   bc5bc:	a817      	add	r0, sp, #92	; 0x5c
   bc5be:	f001 f883 	bl	bd6c8 <__match>
   bc5c2:	2800      	cmp	r0, #0
   bc5c4:	f43f aed2 	beq.w	bc36c <_strtod_l+0xc4>
   bc5c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc5ca:	781b      	ldrb	r3, [r3, #0]
   bc5cc:	2b28      	cmp	r3, #40	; 0x28
   bc5ce:	d12d      	bne.n	bc62c <_strtod_l+0x384>
   bc5d0:	499a      	ldr	r1, [pc, #616]	; (bc83c <_strtod_l+0x594>)
   bc5d2:	aa1a      	add	r2, sp, #104	; 0x68
   bc5d4:	a817      	add	r0, sp, #92	; 0x5c
   bc5d6:	f001 f88b 	bl	bd6f0 <__hexnan>
   bc5da:	2805      	cmp	r0, #5
   bc5dc:	d126      	bne.n	bc62c <_strtod_l+0x384>
   bc5de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bc5e0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bc5e4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bc5e8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bc5ec:	e6a0      	b.n	bc330 <_strtod_l+0x88>
   bc5ee:	210a      	movs	r1, #10
   bc5f0:	fb01 2e0e 	mla	lr, r1, lr, r2
   bc5f4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bc5f8:	e7b9      	b.n	bc56e <_strtod_l+0x2c6>
   bc5fa:	2a6e      	cmp	r2, #110	; 0x6e
   bc5fc:	e7db      	b.n	bc5b6 <_strtod_l+0x30e>
   bc5fe:	4990      	ldr	r1, [pc, #576]	; (bc840 <_strtod_l+0x598>)
   bc600:	a817      	add	r0, sp, #92	; 0x5c
   bc602:	f001 f861 	bl	bd6c8 <__match>
   bc606:	2800      	cmp	r0, #0
   bc608:	f43f aeb0 	beq.w	bc36c <_strtod_l+0xc4>
   bc60c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc60e:	498d      	ldr	r1, [pc, #564]	; (bc844 <_strtod_l+0x59c>)
   bc610:	3b01      	subs	r3, #1
   bc612:	a817      	add	r0, sp, #92	; 0x5c
   bc614:	9317      	str	r3, [sp, #92]	; 0x5c
   bc616:	f001 f857 	bl	bd6c8 <__match>
   bc61a:	b910      	cbnz	r0, bc622 <_strtod_l+0x37a>
   bc61c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc61e:	3301      	adds	r3, #1
   bc620:	9317      	str	r3, [sp, #92]	; 0x5c
   bc622:	f8df b230 	ldr.w	fp, [pc, #560]	; bc854 <_strtod_l+0x5ac>
   bc626:	f04f 0a00 	mov.w	sl, #0
   bc62a:	e681      	b.n	bc330 <_strtod_l+0x88>
   bc62c:	4886      	ldr	r0, [pc, #536]	; (bc848 <_strtod_l+0x5a0>)
   bc62e:	f001 fde3 	bl	be1f8 <nan>
   bc632:	ec5b ab10 	vmov	sl, fp, d0
   bc636:	e67b      	b.n	bc330 <_strtod_l+0x88>
   bc638:	9b05      	ldr	r3, [sp, #20]
   bc63a:	9807      	ldr	r0, [sp, #28]
   bc63c:	1af3      	subs	r3, r6, r3
   bc63e:	2f00      	cmp	r7, #0
   bc640:	bf08      	it	eq
   bc642:	462f      	moveq	r7, r5
   bc644:	2d10      	cmp	r5, #16
   bc646:	9306      	str	r3, [sp, #24]
   bc648:	46a8      	mov	r8, r5
   bc64a:	bfa8      	it	ge
   bc64c:	f04f 0810 	movge.w	r8, #16
   bc650:	f7ff f98e 	bl	bb970 <__aeabi_ui2d>
   bc654:	2d09      	cmp	r5, #9
   bc656:	4682      	mov	sl, r0
   bc658:	468b      	mov	fp, r1
   bc65a:	dd13      	ble.n	bc684 <_strtod_l+0x3dc>
   bc65c:	4b7b      	ldr	r3, [pc, #492]	; (bc84c <_strtod_l+0x5a4>)
   bc65e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bc662:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bc666:	f7ff f9fd 	bl	bba64 <__aeabi_dmul>
   bc66a:	4682      	mov	sl, r0
   bc66c:	4648      	mov	r0, r9
   bc66e:	468b      	mov	fp, r1
   bc670:	f7ff f97e 	bl	bb970 <__aeabi_ui2d>
   bc674:	4602      	mov	r2, r0
   bc676:	460b      	mov	r3, r1
   bc678:	4650      	mov	r0, sl
   bc67a:	4659      	mov	r1, fp
   bc67c:	f7ff f83c 	bl	bb6f8 <__adddf3>
   bc680:	4682      	mov	sl, r0
   bc682:	468b      	mov	fp, r1
   bc684:	2d0f      	cmp	r5, #15
   bc686:	dc38      	bgt.n	bc6fa <_strtod_l+0x452>
   bc688:	9b06      	ldr	r3, [sp, #24]
   bc68a:	2b00      	cmp	r3, #0
   bc68c:	f43f ae50 	beq.w	bc330 <_strtod_l+0x88>
   bc690:	dd24      	ble.n	bc6dc <_strtod_l+0x434>
   bc692:	2b16      	cmp	r3, #22
   bc694:	dc0b      	bgt.n	bc6ae <_strtod_l+0x406>
   bc696:	496d      	ldr	r1, [pc, #436]	; (bc84c <_strtod_l+0x5a4>)
   bc698:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bc69c:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc6a0:	4652      	mov	r2, sl
   bc6a2:	465b      	mov	r3, fp
   bc6a4:	f7ff f9de 	bl	bba64 <__aeabi_dmul>
   bc6a8:	4682      	mov	sl, r0
   bc6aa:	468b      	mov	fp, r1
   bc6ac:	e640      	b.n	bc330 <_strtod_l+0x88>
   bc6ae:	9a06      	ldr	r2, [sp, #24]
   bc6b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bc6b4:	4293      	cmp	r3, r2
   bc6b6:	db20      	blt.n	bc6fa <_strtod_l+0x452>
   bc6b8:	4c64      	ldr	r4, [pc, #400]	; (bc84c <_strtod_l+0x5a4>)
   bc6ba:	f1c5 050f 	rsb	r5, r5, #15
   bc6be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bc6c2:	4652      	mov	r2, sl
   bc6c4:	465b      	mov	r3, fp
   bc6c6:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc6ca:	f7ff f9cb 	bl	bba64 <__aeabi_dmul>
   bc6ce:	9b06      	ldr	r3, [sp, #24]
   bc6d0:	1b5d      	subs	r5, r3, r5
   bc6d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bc6d6:	e9d4 2300 	ldrd	r2, r3, [r4]
   bc6da:	e7e3      	b.n	bc6a4 <_strtod_l+0x3fc>
   bc6dc:	9b06      	ldr	r3, [sp, #24]
   bc6de:	3316      	adds	r3, #22
   bc6e0:	db0b      	blt.n	bc6fa <_strtod_l+0x452>
   bc6e2:	9b05      	ldr	r3, [sp, #20]
   bc6e4:	1b9e      	subs	r6, r3, r6
   bc6e6:	4b59      	ldr	r3, [pc, #356]	; (bc84c <_strtod_l+0x5a4>)
   bc6e8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bc6ec:	e9d6 2300 	ldrd	r2, r3, [r6]
   bc6f0:	4650      	mov	r0, sl
   bc6f2:	4659      	mov	r1, fp
   bc6f4:	f7ff fae0 	bl	bbcb8 <__aeabi_ddiv>
   bc6f8:	e7d6      	b.n	bc6a8 <_strtod_l+0x400>
   bc6fa:	9b06      	ldr	r3, [sp, #24]
   bc6fc:	eba5 0808 	sub.w	r8, r5, r8
   bc700:	4498      	add	r8, r3
   bc702:	f1b8 0f00 	cmp.w	r8, #0
   bc706:	dd74      	ble.n	bc7f2 <_strtod_l+0x54a>
   bc708:	f018 030f 	ands.w	r3, r8, #15
   bc70c:	d00a      	beq.n	bc724 <_strtod_l+0x47c>
   bc70e:	494f      	ldr	r1, [pc, #316]	; (bc84c <_strtod_l+0x5a4>)
   bc710:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bc714:	4652      	mov	r2, sl
   bc716:	465b      	mov	r3, fp
   bc718:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc71c:	f7ff f9a2 	bl	bba64 <__aeabi_dmul>
   bc720:	4682      	mov	sl, r0
   bc722:	468b      	mov	fp, r1
   bc724:	f038 080f 	bics.w	r8, r8, #15
   bc728:	d04f      	beq.n	bc7ca <_strtod_l+0x522>
   bc72a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bc72e:	dd22      	ble.n	bc776 <_strtod_l+0x4ce>
   bc730:	2500      	movs	r5, #0
   bc732:	462e      	mov	r6, r5
   bc734:	9507      	str	r5, [sp, #28]
   bc736:	9505      	str	r5, [sp, #20]
   bc738:	2322      	movs	r3, #34	; 0x22
   bc73a:	f8df b118 	ldr.w	fp, [pc, #280]	; bc854 <_strtod_l+0x5ac>
   bc73e:	6023      	str	r3, [r4, #0]
   bc740:	f04f 0a00 	mov.w	sl, #0
   bc744:	9b07      	ldr	r3, [sp, #28]
   bc746:	2b00      	cmp	r3, #0
   bc748:	f43f adf2 	beq.w	bc330 <_strtod_l+0x88>
   bc74c:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc74e:	4620      	mov	r0, r4
   bc750:	f001 f8c0 	bl	bd8d4 <_Bfree>
   bc754:	9905      	ldr	r1, [sp, #20]
   bc756:	4620      	mov	r0, r4
   bc758:	f001 f8bc 	bl	bd8d4 <_Bfree>
   bc75c:	4631      	mov	r1, r6
   bc75e:	4620      	mov	r0, r4
   bc760:	f001 f8b8 	bl	bd8d4 <_Bfree>
   bc764:	9907      	ldr	r1, [sp, #28]
   bc766:	4620      	mov	r0, r4
   bc768:	f001 f8b4 	bl	bd8d4 <_Bfree>
   bc76c:	4629      	mov	r1, r5
   bc76e:	4620      	mov	r0, r4
   bc770:	f001 f8b0 	bl	bd8d4 <_Bfree>
   bc774:	e5dc      	b.n	bc330 <_strtod_l+0x88>
   bc776:	4b36      	ldr	r3, [pc, #216]	; (bc850 <_strtod_l+0x5a8>)
   bc778:	9304      	str	r3, [sp, #16]
   bc77a:	2300      	movs	r3, #0
   bc77c:	ea4f 1828 	mov.w	r8, r8, asr #4
   bc780:	4650      	mov	r0, sl
   bc782:	4659      	mov	r1, fp
   bc784:	4699      	mov	r9, r3
   bc786:	f1b8 0f01 	cmp.w	r8, #1
   bc78a:	dc21      	bgt.n	bc7d0 <_strtod_l+0x528>
   bc78c:	b10b      	cbz	r3, bc792 <_strtod_l+0x4ea>
   bc78e:	4682      	mov	sl, r0
   bc790:	468b      	mov	fp, r1
   bc792:	4b2f      	ldr	r3, [pc, #188]	; (bc850 <_strtod_l+0x5a8>)
   bc794:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bc798:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bc79c:	4652      	mov	r2, sl
   bc79e:	465b      	mov	r3, fp
   bc7a0:	e9d9 0100 	ldrd	r0, r1, [r9]
   bc7a4:	f7ff f95e 	bl	bba64 <__aeabi_dmul>
   bc7a8:	4b2a      	ldr	r3, [pc, #168]	; (bc854 <_strtod_l+0x5ac>)
   bc7aa:	460a      	mov	r2, r1
   bc7ac:	400b      	ands	r3, r1
   bc7ae:	492a      	ldr	r1, [pc, #168]	; (bc858 <_strtod_l+0x5b0>)
   bc7b0:	428b      	cmp	r3, r1
   bc7b2:	4682      	mov	sl, r0
   bc7b4:	d8bc      	bhi.n	bc730 <_strtod_l+0x488>
   bc7b6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bc7ba:	428b      	cmp	r3, r1
   bc7bc:	bf86      	itte	hi
   bc7be:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bc85c <_strtod_l+0x5b4>
   bc7c2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   bc7c6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bc7ca:	2300      	movs	r3, #0
   bc7cc:	9304      	str	r3, [sp, #16]
   bc7ce:	e084      	b.n	bc8da <_strtod_l+0x632>
   bc7d0:	f018 0f01 	tst.w	r8, #1
   bc7d4:	d005      	beq.n	bc7e2 <_strtod_l+0x53a>
   bc7d6:	9b04      	ldr	r3, [sp, #16]
   bc7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc7dc:	f7ff f942 	bl	bba64 <__aeabi_dmul>
   bc7e0:	2301      	movs	r3, #1
   bc7e2:	9a04      	ldr	r2, [sp, #16]
   bc7e4:	3208      	adds	r2, #8
   bc7e6:	f109 0901 	add.w	r9, r9, #1
   bc7ea:	ea4f 0868 	mov.w	r8, r8, asr #1
   bc7ee:	9204      	str	r2, [sp, #16]
   bc7f0:	e7c9      	b.n	bc786 <_strtod_l+0x4de>
   bc7f2:	d0ea      	beq.n	bc7ca <_strtod_l+0x522>
   bc7f4:	f1c8 0800 	rsb	r8, r8, #0
   bc7f8:	f018 020f 	ands.w	r2, r8, #15
   bc7fc:	d00a      	beq.n	bc814 <_strtod_l+0x56c>
   bc7fe:	4b13      	ldr	r3, [pc, #76]	; (bc84c <_strtod_l+0x5a4>)
   bc800:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bc804:	4650      	mov	r0, sl
   bc806:	4659      	mov	r1, fp
   bc808:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc80c:	f7ff fa54 	bl	bbcb8 <__aeabi_ddiv>
   bc810:	4682      	mov	sl, r0
   bc812:	468b      	mov	fp, r1
   bc814:	ea5f 1828 	movs.w	r8, r8, asr #4
   bc818:	d0d7      	beq.n	bc7ca <_strtod_l+0x522>
   bc81a:	f1b8 0f1f 	cmp.w	r8, #31
   bc81e:	dd1f      	ble.n	bc860 <_strtod_l+0x5b8>
   bc820:	2500      	movs	r5, #0
   bc822:	462e      	mov	r6, r5
   bc824:	9507      	str	r5, [sp, #28]
   bc826:	9505      	str	r5, [sp, #20]
   bc828:	2322      	movs	r3, #34	; 0x22
   bc82a:	f04f 0a00 	mov.w	sl, #0
   bc82e:	f04f 0b00 	mov.w	fp, #0
   bc832:	6023      	str	r3, [r4, #0]
   bc834:	e786      	b.n	bc744 <_strtod_l+0x49c>
   bc836:	bf00      	nop
   bc838:	000bec9a 	.word	0x000bec9a
   bc83c:	000becb4 	.word	0x000becb4
   bc840:	000bec91 	.word	0x000bec91
   bc844:	000bec94 	.word	0x000bec94
   bc848:	000be70e 	.word	0x000be70e
   bc84c:	000beef8 	.word	0x000beef8
   bc850:	000beed0 	.word	0x000beed0
   bc854:	7ff00000 	.word	0x7ff00000
   bc858:	7ca00000 	.word	0x7ca00000
   bc85c:	7fefffff 	.word	0x7fefffff
   bc860:	f018 0310 	ands.w	r3, r8, #16
   bc864:	bf18      	it	ne
   bc866:	236a      	movne	r3, #106	; 0x6a
   bc868:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bcc18 <_strtod_l+0x970>
   bc86c:	9304      	str	r3, [sp, #16]
   bc86e:	4650      	mov	r0, sl
   bc870:	4659      	mov	r1, fp
   bc872:	2300      	movs	r3, #0
   bc874:	f018 0f01 	tst.w	r8, #1
   bc878:	d004      	beq.n	bc884 <_strtod_l+0x5dc>
   bc87a:	e9d9 2300 	ldrd	r2, r3, [r9]
   bc87e:	f7ff f8f1 	bl	bba64 <__aeabi_dmul>
   bc882:	2301      	movs	r3, #1
   bc884:	ea5f 0868 	movs.w	r8, r8, asr #1
   bc888:	f109 0908 	add.w	r9, r9, #8
   bc88c:	d1f2      	bne.n	bc874 <_strtod_l+0x5cc>
   bc88e:	b10b      	cbz	r3, bc894 <_strtod_l+0x5ec>
   bc890:	4682      	mov	sl, r0
   bc892:	468b      	mov	fp, r1
   bc894:	9b04      	ldr	r3, [sp, #16]
   bc896:	b1c3      	cbz	r3, bc8ca <_strtod_l+0x622>
   bc898:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bc89c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bc8a0:	2b00      	cmp	r3, #0
   bc8a2:	4659      	mov	r1, fp
   bc8a4:	dd11      	ble.n	bc8ca <_strtod_l+0x622>
   bc8a6:	2b1f      	cmp	r3, #31
   bc8a8:	f340 8124 	ble.w	bcaf4 <_strtod_l+0x84c>
   bc8ac:	2b34      	cmp	r3, #52	; 0x34
   bc8ae:	bfde      	ittt	le
   bc8b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bc8b4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   bc8b8:	fa03 f202 	lslle.w	r2, r3, r2
   bc8bc:	f04f 0a00 	mov.w	sl, #0
   bc8c0:	bfcc      	ite	gt
   bc8c2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bc8c6:	ea02 0b01 	andle.w	fp, r2, r1
   bc8ca:	2200      	movs	r2, #0
   bc8cc:	2300      	movs	r3, #0
   bc8ce:	4650      	mov	r0, sl
   bc8d0:	4659      	mov	r1, fp
   bc8d2:	f7ff fb2f 	bl	bbf34 <__aeabi_dcmpeq>
   bc8d6:	2800      	cmp	r0, #0
   bc8d8:	d1a2      	bne.n	bc820 <_strtod_l+0x578>
   bc8da:	9b07      	ldr	r3, [sp, #28]
   bc8dc:	9300      	str	r3, [sp, #0]
   bc8de:	9908      	ldr	r1, [sp, #32]
   bc8e0:	462b      	mov	r3, r5
   bc8e2:	463a      	mov	r2, r7
   bc8e4:	4620      	mov	r0, r4
   bc8e6:	f001 f85d 	bl	bd9a4 <__s2b>
   bc8ea:	9007      	str	r0, [sp, #28]
   bc8ec:	2800      	cmp	r0, #0
   bc8ee:	f43f af1f 	beq.w	bc730 <_strtod_l+0x488>
   bc8f2:	9b05      	ldr	r3, [sp, #20]
   bc8f4:	1b9e      	subs	r6, r3, r6
   bc8f6:	9b06      	ldr	r3, [sp, #24]
   bc8f8:	2b00      	cmp	r3, #0
   bc8fa:	bfb4      	ite	lt
   bc8fc:	4633      	movlt	r3, r6
   bc8fe:	2300      	movge	r3, #0
   bc900:	930c      	str	r3, [sp, #48]	; 0x30
   bc902:	9b06      	ldr	r3, [sp, #24]
   bc904:	2500      	movs	r5, #0
   bc906:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bc90a:	9312      	str	r3, [sp, #72]	; 0x48
   bc90c:	462e      	mov	r6, r5
   bc90e:	9b07      	ldr	r3, [sp, #28]
   bc910:	4620      	mov	r0, r4
   bc912:	6859      	ldr	r1, [r3, #4]
   bc914:	f000 ff9e 	bl	bd854 <_Balloc>
   bc918:	9005      	str	r0, [sp, #20]
   bc91a:	2800      	cmp	r0, #0
   bc91c:	f43f af0c 	beq.w	bc738 <_strtod_l+0x490>
   bc920:	9b07      	ldr	r3, [sp, #28]
   bc922:	691a      	ldr	r2, [r3, #16]
   bc924:	3202      	adds	r2, #2
   bc926:	f103 010c 	add.w	r1, r3, #12
   bc92a:	0092      	lsls	r2, r2, #2
   bc92c:	300c      	adds	r0, #12
   bc92e:	f7ff fbf1 	bl	bc114 <memcpy>
   bc932:	ec4b ab10 	vmov	d0, sl, fp
   bc936:	aa1a      	add	r2, sp, #104	; 0x68
   bc938:	a919      	add	r1, sp, #100	; 0x64
   bc93a:	4620      	mov	r0, r4
   bc93c:	f001 fb78 	bl	be030 <__d2b>
   bc940:	ec4b ab18 	vmov	d8, sl, fp
   bc944:	9018      	str	r0, [sp, #96]	; 0x60
   bc946:	2800      	cmp	r0, #0
   bc948:	f43f aef6 	beq.w	bc738 <_strtod_l+0x490>
   bc94c:	2101      	movs	r1, #1
   bc94e:	4620      	mov	r0, r4
   bc950:	f001 f8c2 	bl	bdad8 <__i2b>
   bc954:	4606      	mov	r6, r0
   bc956:	2800      	cmp	r0, #0
   bc958:	f43f aeee 	beq.w	bc738 <_strtod_l+0x490>
   bc95c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bc95e:	9904      	ldr	r1, [sp, #16]
   bc960:	2b00      	cmp	r3, #0
   bc962:	bfab      	itete	ge
   bc964:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bc966:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bc968:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bc96a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bc96e:	bfac      	ite	ge
   bc970:	eb03 0902 	addge.w	r9, r3, r2
   bc974:	1ad7      	sublt	r7, r2, r3
   bc976:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bc978:	eba3 0801 	sub.w	r8, r3, r1
   bc97c:	4490      	add	r8, r2
   bc97e:	4ba1      	ldr	r3, [pc, #644]	; (bcc04 <_strtod_l+0x95c>)
   bc980:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bc984:	4598      	cmp	r8, r3
   bc986:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bc98a:	f280 80c7 	bge.w	bcb1c <_strtod_l+0x874>
   bc98e:	eba3 0308 	sub.w	r3, r3, r8
   bc992:	2b1f      	cmp	r3, #31
   bc994:	eba2 0203 	sub.w	r2, r2, r3
   bc998:	f04f 0101 	mov.w	r1, #1
   bc99c:	f300 80b1 	bgt.w	bcb02 <_strtod_l+0x85a>
   bc9a0:	fa01 f303 	lsl.w	r3, r1, r3
   bc9a4:	930d      	str	r3, [sp, #52]	; 0x34
   bc9a6:	2300      	movs	r3, #0
   bc9a8:	9308      	str	r3, [sp, #32]
   bc9aa:	eb09 0802 	add.w	r8, r9, r2
   bc9ae:	9b04      	ldr	r3, [sp, #16]
   bc9b0:	45c1      	cmp	r9, r8
   bc9b2:	4417      	add	r7, r2
   bc9b4:	441f      	add	r7, r3
   bc9b6:	464b      	mov	r3, r9
   bc9b8:	bfa8      	it	ge
   bc9ba:	4643      	movge	r3, r8
   bc9bc:	42bb      	cmp	r3, r7
   bc9be:	bfa8      	it	ge
   bc9c0:	463b      	movge	r3, r7
   bc9c2:	2b00      	cmp	r3, #0
   bc9c4:	bfc2      	ittt	gt
   bc9c6:	eba8 0803 	subgt.w	r8, r8, r3
   bc9ca:	1aff      	subgt	r7, r7, r3
   bc9cc:	eba9 0903 	subgt.w	r9, r9, r3
   bc9d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bc9d2:	2b00      	cmp	r3, #0
   bc9d4:	dd17      	ble.n	bca06 <_strtod_l+0x75e>
   bc9d6:	4631      	mov	r1, r6
   bc9d8:	461a      	mov	r2, r3
   bc9da:	4620      	mov	r0, r4
   bc9dc:	f001 f93c 	bl	bdc58 <__pow5mult>
   bc9e0:	4606      	mov	r6, r0
   bc9e2:	2800      	cmp	r0, #0
   bc9e4:	f43f aea8 	beq.w	bc738 <_strtod_l+0x490>
   bc9e8:	4601      	mov	r1, r0
   bc9ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bc9ec:	4620      	mov	r0, r4
   bc9ee:	f001 f889 	bl	bdb04 <__multiply>
   bc9f2:	900b      	str	r0, [sp, #44]	; 0x2c
   bc9f4:	2800      	cmp	r0, #0
   bc9f6:	f43f ae9f 	beq.w	bc738 <_strtod_l+0x490>
   bc9fa:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc9fc:	4620      	mov	r0, r4
   bc9fe:	f000 ff69 	bl	bd8d4 <_Bfree>
   bca02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bca04:	9318      	str	r3, [sp, #96]	; 0x60
   bca06:	f1b8 0f00 	cmp.w	r8, #0
   bca0a:	f300 808c 	bgt.w	bcb26 <_strtod_l+0x87e>
   bca0e:	9b06      	ldr	r3, [sp, #24]
   bca10:	2b00      	cmp	r3, #0
   bca12:	dd08      	ble.n	bca26 <_strtod_l+0x77e>
   bca14:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bca16:	9905      	ldr	r1, [sp, #20]
   bca18:	4620      	mov	r0, r4
   bca1a:	f001 f91d 	bl	bdc58 <__pow5mult>
   bca1e:	9005      	str	r0, [sp, #20]
   bca20:	2800      	cmp	r0, #0
   bca22:	f43f ae89 	beq.w	bc738 <_strtod_l+0x490>
   bca26:	2f00      	cmp	r7, #0
   bca28:	dd08      	ble.n	bca3c <_strtod_l+0x794>
   bca2a:	9905      	ldr	r1, [sp, #20]
   bca2c:	463a      	mov	r2, r7
   bca2e:	4620      	mov	r0, r4
   bca30:	f001 f96c 	bl	bdd0c <__lshift>
   bca34:	9005      	str	r0, [sp, #20]
   bca36:	2800      	cmp	r0, #0
   bca38:	f43f ae7e 	beq.w	bc738 <_strtod_l+0x490>
   bca3c:	f1b9 0f00 	cmp.w	r9, #0
   bca40:	dd08      	ble.n	bca54 <_strtod_l+0x7ac>
   bca42:	4631      	mov	r1, r6
   bca44:	464a      	mov	r2, r9
   bca46:	4620      	mov	r0, r4
   bca48:	f001 f960 	bl	bdd0c <__lshift>
   bca4c:	4606      	mov	r6, r0
   bca4e:	2800      	cmp	r0, #0
   bca50:	f43f ae72 	beq.w	bc738 <_strtod_l+0x490>
   bca54:	9a05      	ldr	r2, [sp, #20]
   bca56:	9918      	ldr	r1, [sp, #96]	; 0x60
   bca58:	4620      	mov	r0, r4
   bca5a:	f001 f9e3 	bl	bde24 <__mdiff>
   bca5e:	4605      	mov	r5, r0
   bca60:	2800      	cmp	r0, #0
   bca62:	f43f ae69 	beq.w	bc738 <_strtod_l+0x490>
   bca66:	68c3      	ldr	r3, [r0, #12]
   bca68:	930b      	str	r3, [sp, #44]	; 0x2c
   bca6a:	2300      	movs	r3, #0
   bca6c:	60c3      	str	r3, [r0, #12]
   bca6e:	4631      	mov	r1, r6
   bca70:	f001 f9bc 	bl	bddec <__mcmp>
   bca74:	2800      	cmp	r0, #0
   bca76:	da60      	bge.n	bcb3a <_strtod_l+0x892>
   bca78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bca7a:	ea53 030a 	orrs.w	r3, r3, sl
   bca7e:	f040 8082 	bne.w	bcb86 <_strtod_l+0x8de>
   bca82:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bca86:	2b00      	cmp	r3, #0
   bca88:	d17d      	bne.n	bcb86 <_strtod_l+0x8de>
   bca8a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bca8e:	0d1b      	lsrs	r3, r3, #20
   bca90:	051b      	lsls	r3, r3, #20
   bca92:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bca96:	d976      	bls.n	bcb86 <_strtod_l+0x8de>
   bca98:	696b      	ldr	r3, [r5, #20]
   bca9a:	b913      	cbnz	r3, bcaa2 <_strtod_l+0x7fa>
   bca9c:	692b      	ldr	r3, [r5, #16]
   bca9e:	2b01      	cmp	r3, #1
   bcaa0:	dd71      	ble.n	bcb86 <_strtod_l+0x8de>
   bcaa2:	4629      	mov	r1, r5
   bcaa4:	2201      	movs	r2, #1
   bcaa6:	4620      	mov	r0, r4
   bcaa8:	f001 f930 	bl	bdd0c <__lshift>
   bcaac:	4631      	mov	r1, r6
   bcaae:	4605      	mov	r5, r0
   bcab0:	f001 f99c 	bl	bddec <__mcmp>
   bcab4:	2800      	cmp	r0, #0
   bcab6:	dd66      	ble.n	bcb86 <_strtod_l+0x8de>
   bcab8:	9904      	ldr	r1, [sp, #16]
   bcaba:	4a53      	ldr	r2, [pc, #332]	; (bcc08 <_strtod_l+0x960>)
   bcabc:	465b      	mov	r3, fp
   bcabe:	2900      	cmp	r1, #0
   bcac0:	f000 8081 	beq.w	bcbc6 <_strtod_l+0x91e>
   bcac4:	ea02 010b 	and.w	r1, r2, fp
   bcac8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bcacc:	dc7b      	bgt.n	bcbc6 <_strtod_l+0x91e>
   bcace:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bcad2:	f77f aea9 	ble.w	bc828 <_strtod_l+0x580>
   bcad6:	4b4d      	ldr	r3, [pc, #308]	; (bcc0c <_strtod_l+0x964>)
   bcad8:	4650      	mov	r0, sl
   bcada:	4659      	mov	r1, fp
   bcadc:	2200      	movs	r2, #0
   bcade:	f7fe ffc1 	bl	bba64 <__aeabi_dmul>
   bcae2:	460b      	mov	r3, r1
   bcae4:	4303      	orrs	r3, r0
   bcae6:	bf08      	it	eq
   bcae8:	2322      	moveq	r3, #34	; 0x22
   bcaea:	4682      	mov	sl, r0
   bcaec:	468b      	mov	fp, r1
   bcaee:	bf08      	it	eq
   bcaf0:	6023      	streq	r3, [r4, #0]
   bcaf2:	e62b      	b.n	bc74c <_strtod_l+0x4a4>
   bcaf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bcaf8:	fa02 f303 	lsl.w	r3, r2, r3
   bcafc:	ea03 0a0a 	and.w	sl, r3, sl
   bcb00:	e6e3      	b.n	bc8ca <_strtod_l+0x622>
   bcb02:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bcb06:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bcb0a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bcb0e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bcb12:	fa01 f308 	lsl.w	r3, r1, r8
   bcb16:	9308      	str	r3, [sp, #32]
   bcb18:	910d      	str	r1, [sp, #52]	; 0x34
   bcb1a:	e746      	b.n	bc9aa <_strtod_l+0x702>
   bcb1c:	2300      	movs	r3, #0
   bcb1e:	9308      	str	r3, [sp, #32]
   bcb20:	2301      	movs	r3, #1
   bcb22:	930d      	str	r3, [sp, #52]	; 0x34
   bcb24:	e741      	b.n	bc9aa <_strtod_l+0x702>
   bcb26:	9918      	ldr	r1, [sp, #96]	; 0x60
   bcb28:	4642      	mov	r2, r8
   bcb2a:	4620      	mov	r0, r4
   bcb2c:	f001 f8ee 	bl	bdd0c <__lshift>
   bcb30:	9018      	str	r0, [sp, #96]	; 0x60
   bcb32:	2800      	cmp	r0, #0
   bcb34:	f47f af6b 	bne.w	bca0e <_strtod_l+0x766>
   bcb38:	e5fe      	b.n	bc738 <_strtod_l+0x490>
   bcb3a:	465f      	mov	r7, fp
   bcb3c:	d16e      	bne.n	bcc1c <_strtod_l+0x974>
   bcb3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bcb40:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bcb44:	b342      	cbz	r2, bcb98 <_strtod_l+0x8f0>
   bcb46:	4a32      	ldr	r2, [pc, #200]	; (bcc10 <_strtod_l+0x968>)
   bcb48:	4293      	cmp	r3, r2
   bcb4a:	d128      	bne.n	bcb9e <_strtod_l+0x8f6>
   bcb4c:	9b04      	ldr	r3, [sp, #16]
   bcb4e:	4651      	mov	r1, sl
   bcb50:	b1eb      	cbz	r3, bcb8e <_strtod_l+0x8e6>
   bcb52:	4b2d      	ldr	r3, [pc, #180]	; (bcc08 <_strtod_l+0x960>)
   bcb54:	403b      	ands	r3, r7
   bcb56:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bcb5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bcb5e:	d819      	bhi.n	bcb94 <_strtod_l+0x8ec>
   bcb60:	0d1b      	lsrs	r3, r3, #20
   bcb62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bcb66:	fa02 f303 	lsl.w	r3, r2, r3
   bcb6a:	4299      	cmp	r1, r3
   bcb6c:	d117      	bne.n	bcb9e <_strtod_l+0x8f6>
   bcb6e:	4b29      	ldr	r3, [pc, #164]	; (bcc14 <_strtod_l+0x96c>)
   bcb70:	429f      	cmp	r7, r3
   bcb72:	d102      	bne.n	bcb7a <_strtod_l+0x8d2>
   bcb74:	3101      	adds	r1, #1
   bcb76:	f43f addf 	beq.w	bc738 <_strtod_l+0x490>
   bcb7a:	4b23      	ldr	r3, [pc, #140]	; (bcc08 <_strtod_l+0x960>)
   bcb7c:	403b      	ands	r3, r7
   bcb7e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bcb82:	f04f 0a00 	mov.w	sl, #0
   bcb86:	9b04      	ldr	r3, [sp, #16]
   bcb88:	2b00      	cmp	r3, #0
   bcb8a:	d1a4      	bne.n	bcad6 <_strtod_l+0x82e>
   bcb8c:	e5de      	b.n	bc74c <_strtod_l+0x4a4>
   bcb8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bcb92:	e7ea      	b.n	bcb6a <_strtod_l+0x8c2>
   bcb94:	4613      	mov	r3, r2
   bcb96:	e7e8      	b.n	bcb6a <_strtod_l+0x8c2>
   bcb98:	ea53 030a 	orrs.w	r3, r3, sl
   bcb9c:	d08c      	beq.n	bcab8 <_strtod_l+0x810>
   bcb9e:	9b08      	ldr	r3, [sp, #32]
   bcba0:	b1db      	cbz	r3, bcbda <_strtod_l+0x932>
   bcba2:	423b      	tst	r3, r7
   bcba4:	d0ef      	beq.n	bcb86 <_strtod_l+0x8de>
   bcba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bcba8:	9a04      	ldr	r2, [sp, #16]
   bcbaa:	4650      	mov	r0, sl
   bcbac:	4659      	mov	r1, fp
   bcbae:	b1c3      	cbz	r3, bcbe2 <_strtod_l+0x93a>
   bcbb0:	f7ff fb5e 	bl	bc270 <sulp>
   bcbb4:	4602      	mov	r2, r0
   bcbb6:	460b      	mov	r3, r1
   bcbb8:	ec51 0b18 	vmov	r0, r1, d8
   bcbbc:	f7fe fd9c 	bl	bb6f8 <__adddf3>
   bcbc0:	4682      	mov	sl, r0
   bcbc2:	468b      	mov	fp, r1
   bcbc4:	e7df      	b.n	bcb86 <_strtod_l+0x8de>
   bcbc6:	4013      	ands	r3, r2
   bcbc8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bcbcc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bcbd0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bcbd4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bcbd8:	e7d5      	b.n	bcb86 <_strtod_l+0x8de>
   bcbda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bcbdc:	ea13 0f0a 	tst.w	r3, sl
   bcbe0:	e7e0      	b.n	bcba4 <_strtod_l+0x8fc>
   bcbe2:	f7ff fb45 	bl	bc270 <sulp>
   bcbe6:	4602      	mov	r2, r0
   bcbe8:	460b      	mov	r3, r1
   bcbea:	ec51 0b18 	vmov	r0, r1, d8
   bcbee:	f7fe fd81 	bl	bb6f4 <__aeabi_dsub>
   bcbf2:	2200      	movs	r2, #0
   bcbf4:	2300      	movs	r3, #0
   bcbf6:	4682      	mov	sl, r0
   bcbf8:	468b      	mov	fp, r1
   bcbfa:	f7ff f99b 	bl	bbf34 <__aeabi_dcmpeq>
   bcbfe:	2800      	cmp	r0, #0
   bcc00:	d0c1      	beq.n	bcb86 <_strtod_l+0x8de>
   bcc02:	e611      	b.n	bc828 <_strtod_l+0x580>
   bcc04:	fffffc02 	.word	0xfffffc02
   bcc08:	7ff00000 	.word	0x7ff00000
   bcc0c:	39500000 	.word	0x39500000
   bcc10:	000fffff 	.word	0x000fffff
   bcc14:	7fefffff 	.word	0x7fefffff
   bcc18:	000becc8 	.word	0x000becc8
   bcc1c:	4631      	mov	r1, r6
   bcc1e:	4628      	mov	r0, r5
   bcc20:	f001 fa62 	bl	be0e8 <__ratio>
   bcc24:	ec59 8b10 	vmov	r8, r9, d0
   bcc28:	ee10 0a10 	vmov	r0, s0
   bcc2c:	2200      	movs	r2, #0
   bcc2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bcc32:	4649      	mov	r1, r9
   bcc34:	f7ff f992 	bl	bbf5c <__aeabi_dcmple>
   bcc38:	2800      	cmp	r0, #0
   bcc3a:	d07a      	beq.n	bcd32 <_strtod_l+0xa8a>
   bcc3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bcc3e:	2b00      	cmp	r3, #0
   bcc40:	d04a      	beq.n	bccd8 <_strtod_l+0xa30>
   bcc42:	4b95      	ldr	r3, [pc, #596]	; (bce98 <_strtod_l+0xbf0>)
   bcc44:	2200      	movs	r2, #0
   bcc46:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bcc4a:	f8df 924c 	ldr.w	r9, [pc, #588]	; bce98 <_strtod_l+0xbf0>
   bcc4e:	f04f 0800 	mov.w	r8, #0
   bcc52:	4b92      	ldr	r3, [pc, #584]	; (bce9c <_strtod_l+0xbf4>)
   bcc54:	403b      	ands	r3, r7
   bcc56:	930d      	str	r3, [sp, #52]	; 0x34
   bcc58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bcc5a:	4b91      	ldr	r3, [pc, #580]	; (bcea0 <_strtod_l+0xbf8>)
   bcc5c:	429a      	cmp	r2, r3
   bcc5e:	f040 80b0 	bne.w	bcdc2 <_strtod_l+0xb1a>
   bcc62:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bcc66:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bcc6a:	ec4b ab10 	vmov	d0, sl, fp
   bcc6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bcc72:	f001 f961 	bl	bdf38 <__ulp>
   bcc76:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bcc7a:	ec53 2b10 	vmov	r2, r3, d0
   bcc7e:	f7fe fef1 	bl	bba64 <__aeabi_dmul>
   bcc82:	4652      	mov	r2, sl
   bcc84:	465b      	mov	r3, fp
   bcc86:	f7fe fd37 	bl	bb6f8 <__adddf3>
   bcc8a:	460b      	mov	r3, r1
   bcc8c:	4983      	ldr	r1, [pc, #524]	; (bce9c <_strtod_l+0xbf4>)
   bcc8e:	4a85      	ldr	r2, [pc, #532]	; (bcea4 <_strtod_l+0xbfc>)
   bcc90:	4019      	ands	r1, r3
   bcc92:	4291      	cmp	r1, r2
   bcc94:	4682      	mov	sl, r0
   bcc96:	d960      	bls.n	bcd5a <_strtod_l+0xab2>
   bcc98:	ee18 3a90 	vmov	r3, s17
   bcc9c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bcca0:	4293      	cmp	r3, r2
   bcca2:	d104      	bne.n	bccae <_strtod_l+0xa06>
   bcca4:	ee18 3a10 	vmov	r3, s16
   bcca8:	3301      	adds	r3, #1
   bccaa:	f43f ad45 	beq.w	bc738 <_strtod_l+0x490>
   bccae:	f8df b200 	ldr.w	fp, [pc, #512]	; bceb0 <_strtod_l+0xc08>
   bccb2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bccb6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bccb8:	4620      	mov	r0, r4
   bccba:	f000 fe0b 	bl	bd8d4 <_Bfree>
   bccbe:	9905      	ldr	r1, [sp, #20]
   bccc0:	4620      	mov	r0, r4
   bccc2:	f000 fe07 	bl	bd8d4 <_Bfree>
   bccc6:	4631      	mov	r1, r6
   bccc8:	4620      	mov	r0, r4
   bccca:	f000 fe03 	bl	bd8d4 <_Bfree>
   bccce:	4629      	mov	r1, r5
   bccd0:	4620      	mov	r0, r4
   bccd2:	f000 fdff 	bl	bd8d4 <_Bfree>
   bccd6:	e61a      	b.n	bc90e <_strtod_l+0x666>
   bccd8:	f1ba 0f00 	cmp.w	sl, #0
   bccdc:	d11b      	bne.n	bcd16 <_strtod_l+0xa6e>
   bccde:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bcce2:	b9f3      	cbnz	r3, bcd22 <_strtod_l+0xa7a>
   bcce4:	4b6c      	ldr	r3, [pc, #432]	; (bce98 <_strtod_l+0xbf0>)
   bcce6:	2200      	movs	r2, #0
   bcce8:	4640      	mov	r0, r8
   bccea:	4649      	mov	r1, r9
   bccec:	f7ff f92c 	bl	bbf48 <__aeabi_dcmplt>
   bccf0:	b9d0      	cbnz	r0, bcd28 <_strtod_l+0xa80>
   bccf2:	4640      	mov	r0, r8
   bccf4:	4649      	mov	r1, r9
   bccf6:	4b6c      	ldr	r3, [pc, #432]	; (bcea8 <_strtod_l+0xc00>)
   bccf8:	2200      	movs	r2, #0
   bccfa:	f7fe feb3 	bl	bba64 <__aeabi_dmul>
   bccfe:	4680      	mov	r8, r0
   bcd00:	4689      	mov	r9, r1
   bcd02:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bcd06:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bcd0a:	9315      	str	r3, [sp, #84]	; 0x54
   bcd0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bcd10:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bcd14:	e79d      	b.n	bcc52 <_strtod_l+0x9aa>
   bcd16:	f1ba 0f01 	cmp.w	sl, #1
   bcd1a:	d102      	bne.n	bcd22 <_strtod_l+0xa7a>
   bcd1c:	2f00      	cmp	r7, #0
   bcd1e:	f43f ad83 	beq.w	bc828 <_strtod_l+0x580>
   bcd22:	4b62      	ldr	r3, [pc, #392]	; (bceac <_strtod_l+0xc04>)
   bcd24:	2200      	movs	r2, #0
   bcd26:	e78e      	b.n	bcc46 <_strtod_l+0x99e>
   bcd28:	f8df 917c 	ldr.w	r9, [pc, #380]	; bcea8 <_strtod_l+0xc00>
   bcd2c:	f04f 0800 	mov.w	r8, #0
   bcd30:	e7e7      	b.n	bcd02 <_strtod_l+0xa5a>
   bcd32:	4b5d      	ldr	r3, [pc, #372]	; (bcea8 <_strtod_l+0xc00>)
   bcd34:	4640      	mov	r0, r8
   bcd36:	4649      	mov	r1, r9
   bcd38:	2200      	movs	r2, #0
   bcd3a:	f7fe fe93 	bl	bba64 <__aeabi_dmul>
   bcd3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bcd40:	4680      	mov	r8, r0
   bcd42:	4689      	mov	r9, r1
   bcd44:	b933      	cbnz	r3, bcd54 <_strtod_l+0xaac>
   bcd46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bcd4a:	900e      	str	r0, [sp, #56]	; 0x38
   bcd4c:	930f      	str	r3, [sp, #60]	; 0x3c
   bcd4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bcd52:	e7dd      	b.n	bcd10 <_strtod_l+0xa68>
   bcd54:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bcd58:	e7f9      	b.n	bcd4e <_strtod_l+0xaa6>
   bcd5a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bcd5e:	9b04      	ldr	r3, [sp, #16]
   bcd60:	2b00      	cmp	r3, #0
   bcd62:	d1a8      	bne.n	bccb6 <_strtod_l+0xa0e>
   bcd64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bcd68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bcd6a:	0d1b      	lsrs	r3, r3, #20
   bcd6c:	051b      	lsls	r3, r3, #20
   bcd6e:	429a      	cmp	r2, r3
   bcd70:	d1a1      	bne.n	bccb6 <_strtod_l+0xa0e>
   bcd72:	4640      	mov	r0, r8
   bcd74:	4649      	mov	r1, r9
   bcd76:	f001 fa5b 	bl	be230 <__aeabi_d2lz>
   bcd7a:	f7fe fe45 	bl	bba08 <__aeabi_l2d>
   bcd7e:	4602      	mov	r2, r0
   bcd80:	460b      	mov	r3, r1
   bcd82:	4640      	mov	r0, r8
   bcd84:	4649      	mov	r1, r9
   bcd86:	f7fe fcb5 	bl	bb6f4 <__aeabi_dsub>
   bcd8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bcd8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bcd90:	ea43 030a 	orr.w	r3, r3, sl
   bcd94:	4313      	orrs	r3, r2
   bcd96:	4680      	mov	r8, r0
   bcd98:	4689      	mov	r9, r1
   bcd9a:	d055      	beq.n	bce48 <_strtod_l+0xba0>
   bcd9c:	a336      	add	r3, pc, #216	; (adr r3, bce78 <_strtod_l+0xbd0>)
   bcd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcda2:	f7ff f8d1 	bl	bbf48 <__aeabi_dcmplt>
   bcda6:	2800      	cmp	r0, #0
   bcda8:	f47f acd0 	bne.w	bc74c <_strtod_l+0x4a4>
   bcdac:	a334      	add	r3, pc, #208	; (adr r3, bce80 <_strtod_l+0xbd8>)
   bcdae:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcdb2:	4640      	mov	r0, r8
   bcdb4:	4649      	mov	r1, r9
   bcdb6:	f7ff f8e5 	bl	bbf84 <__aeabi_dcmpgt>
   bcdba:	2800      	cmp	r0, #0
   bcdbc:	f43f af7b 	beq.w	bccb6 <_strtod_l+0xa0e>
   bcdc0:	e4c4      	b.n	bc74c <_strtod_l+0x4a4>
   bcdc2:	9b04      	ldr	r3, [sp, #16]
   bcdc4:	b333      	cbz	r3, bce14 <_strtod_l+0xb6c>
   bcdc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bcdc8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bcdcc:	d822      	bhi.n	bce14 <_strtod_l+0xb6c>
   bcdce:	a32e      	add	r3, pc, #184	; (adr r3, bce88 <_strtod_l+0xbe0>)
   bcdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcdd4:	4640      	mov	r0, r8
   bcdd6:	4649      	mov	r1, r9
   bcdd8:	f7ff f8c0 	bl	bbf5c <__aeabi_dcmple>
   bcddc:	b1a0      	cbz	r0, bce08 <_strtod_l+0xb60>
   bcdde:	4649      	mov	r1, r9
   bcde0:	4640      	mov	r0, r8
   bcde2:	f7ff f8ef 	bl	bbfc4 <__aeabi_d2uiz>
   bcde6:	2801      	cmp	r0, #1
   bcde8:	bf38      	it	cc
   bcdea:	2001      	movcc	r0, #1
   bcdec:	f7fe fdc0 	bl	bb970 <__aeabi_ui2d>
   bcdf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bcdf2:	4680      	mov	r8, r0
   bcdf4:	4689      	mov	r9, r1
   bcdf6:	bb23      	cbnz	r3, bce42 <_strtod_l+0xb9a>
   bcdf8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bcdfc:	9010      	str	r0, [sp, #64]	; 0x40
   bcdfe:	9311      	str	r3, [sp, #68]	; 0x44
   bce00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bce04:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bce08:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bce0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bce0c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bce10:	1a9b      	subs	r3, r3, r2
   bce12:	9309      	str	r3, [sp, #36]	; 0x24
   bce14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bce18:	eeb0 0a48 	vmov.f32	s0, s16
   bce1c:	eef0 0a68 	vmov.f32	s1, s17
   bce20:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bce24:	f001 f888 	bl	bdf38 <__ulp>
   bce28:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bce2c:	ec53 2b10 	vmov	r2, r3, d0
   bce30:	f7fe fe18 	bl	bba64 <__aeabi_dmul>
   bce34:	ec53 2b18 	vmov	r2, r3, d8
   bce38:	f7fe fc5e 	bl	bb6f8 <__adddf3>
   bce3c:	4682      	mov	sl, r0
   bce3e:	468b      	mov	fp, r1
   bce40:	e78d      	b.n	bcd5e <_strtod_l+0xab6>
   bce42:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bce46:	e7db      	b.n	bce00 <_strtod_l+0xb58>
   bce48:	a311      	add	r3, pc, #68	; (adr r3, bce90 <_strtod_l+0xbe8>)
   bce4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bce4e:	f7ff f87b 	bl	bbf48 <__aeabi_dcmplt>
   bce52:	e7b2      	b.n	bcdba <_strtod_l+0xb12>
   bce54:	2300      	movs	r3, #0
   bce56:	930a      	str	r3, [sp, #40]	; 0x28
   bce58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bce5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bce5c:	6013      	str	r3, [r2, #0]
   bce5e:	f7ff ba6b 	b.w	bc338 <_strtod_l+0x90>
   bce62:	2a65      	cmp	r2, #101	; 0x65
   bce64:	f43f ab5f 	beq.w	bc526 <_strtod_l+0x27e>
   bce68:	2a45      	cmp	r2, #69	; 0x45
   bce6a:	f43f ab5c 	beq.w	bc526 <_strtod_l+0x27e>
   bce6e:	2301      	movs	r3, #1
   bce70:	f7ff bb94 	b.w	bc59c <_strtod_l+0x2f4>
   bce74:	f3af 8000 	nop.w
   bce78:	94a03595 	.word	0x94a03595
   bce7c:	3fdfffff 	.word	0x3fdfffff
   bce80:	35afe535 	.word	0x35afe535
   bce84:	3fe00000 	.word	0x3fe00000
   bce88:	ffc00000 	.word	0xffc00000
   bce8c:	41dfffff 	.word	0x41dfffff
   bce90:	94a03595 	.word	0x94a03595
   bce94:	3fcfffff 	.word	0x3fcfffff
   bce98:	3ff00000 	.word	0x3ff00000
   bce9c:	7ff00000 	.word	0x7ff00000
   bcea0:	7fe00000 	.word	0x7fe00000
   bcea4:	7c9fffff 	.word	0x7c9fffff
   bcea8:	3fe00000 	.word	0x3fe00000
   bceac:	bff00000 	.word	0xbff00000
   bceb0:	7fefffff 	.word	0x7fefffff

000bceb4 <strtof>:
   bceb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bceb8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; bcf68 <strtof+0xb4>
   bcebc:	4b26      	ldr	r3, [pc, #152]	; (bcf58 <strtof+0xa4>)
   bcebe:	460a      	mov	r2, r1
   bcec0:	ed2d 8b02 	vpush	{d8}
   bcec4:	4601      	mov	r1, r0
   bcec6:	f8d8 0000 	ldr.w	r0, [r8]
   bceca:	f7ff f9ed 	bl	bc2a8 <_strtod_l>
   bcece:	ec55 4b10 	vmov	r4, r5, d0
   bced2:	ee10 2a10 	vmov	r2, s0
   bced6:	ee10 0a10 	vmov	r0, s0
   bceda:	462b      	mov	r3, r5
   bcedc:	4629      	mov	r1, r5
   bcede:	f7ff f85b 	bl	bbf98 <__aeabi_dcmpun>
   bcee2:	b190      	cbz	r0, bcf0a <strtof+0x56>
   bcee4:	2d00      	cmp	r5, #0
   bcee6:	481d      	ldr	r0, [pc, #116]	; (bcf5c <strtof+0xa8>)
   bcee8:	da09      	bge.n	bcefe <strtof+0x4a>
   bceea:	f001 f98d 	bl	be208 <nanf>
   bceee:	eeb1 8a40 	vneg.f32	s16, s0
   bcef2:	eeb0 0a48 	vmov.f32	s0, s16
   bcef6:	ecbd 8b02 	vpop	{d8}
   bcefa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bcefe:	ecbd 8b02 	vpop	{d8}
   bcf02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bcf06:	f001 b97f 	b.w	be208 <nanf>
   bcf0a:	4620      	mov	r0, r4
   bcf0c:	4629      	mov	r1, r5
   bcf0e:	f7ff f879 	bl	bc004 <__aeabi_d2f>
   bcf12:	ee08 0a10 	vmov	s16, r0
   bcf16:	eddf 7a12 	vldr	s15, [pc, #72]	; bcf60 <strtof+0xac>
   bcf1a:	eeb0 7ac8 	vabs.f32	s14, s16
   bcf1e:	eeb4 7a67 	vcmp.f32	s14, s15
   bcf22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bcf26:	dde4      	ble.n	bcef2 <strtof+0x3e>
   bcf28:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   bcf2c:	4b0d      	ldr	r3, [pc, #52]	; (bcf64 <strtof+0xb0>)
   bcf2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bcf32:	4620      	mov	r0, r4
   bcf34:	4639      	mov	r1, r7
   bcf36:	f7ff f82f 	bl	bbf98 <__aeabi_dcmpun>
   bcf3a:	b940      	cbnz	r0, bcf4e <strtof+0x9a>
   bcf3c:	4b09      	ldr	r3, [pc, #36]	; (bcf64 <strtof+0xb0>)
   bcf3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bcf42:	4620      	mov	r0, r4
   bcf44:	4639      	mov	r1, r7
   bcf46:	f7ff f809 	bl	bbf5c <__aeabi_dcmple>
   bcf4a:	2800      	cmp	r0, #0
   bcf4c:	d0d1      	beq.n	bcef2 <strtof+0x3e>
   bcf4e:	f8d8 3000 	ldr.w	r3, [r8]
   bcf52:	2222      	movs	r2, #34	; 0x22
   bcf54:	601a      	str	r2, [r3, #0]
   bcf56:	e7cc      	b.n	bcef2 <strtof+0x3e>
   bcf58:	20035138 	.word	0x20035138
   bcf5c:	000be70e 	.word	0x000be70e
   bcf60:	7f7fffff 	.word	0x7f7fffff
   bcf64:	7fefffff 	.word	0x7fefffff
   bcf68:	200350cc 	.word	0x200350cc

000bcf6c <_strtol_l.constprop.0>:
   bcf6c:	2b01      	cmp	r3, #1
   bcf6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bcf72:	d001      	beq.n	bcf78 <_strtol_l.constprop.0+0xc>
   bcf74:	2b24      	cmp	r3, #36	; 0x24
   bcf76:	d906      	bls.n	bcf86 <_strtol_l.constprop.0+0x1a>
   bcf78:	f7fb fd9e 	bl	b8ab8 <__errno>
   bcf7c:	2316      	movs	r3, #22
   bcf7e:	6003      	str	r3, [r0, #0]
   bcf80:	2000      	movs	r0, #0
   bcf82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bcf86:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bd06c <_strtol_l.constprop.0+0x100>
   bcf8a:	460d      	mov	r5, r1
   bcf8c:	462e      	mov	r6, r5
   bcf8e:	f815 4b01 	ldrb.w	r4, [r5], #1
   bcf92:	f814 700c 	ldrb.w	r7, [r4, ip]
   bcf96:	f017 0708 	ands.w	r7, r7, #8
   bcf9a:	d1f7      	bne.n	bcf8c <_strtol_l.constprop.0+0x20>
   bcf9c:	2c2d      	cmp	r4, #45	; 0x2d
   bcf9e:	d132      	bne.n	bd006 <_strtol_l.constprop.0+0x9a>
   bcfa0:	782c      	ldrb	r4, [r5, #0]
   bcfa2:	2701      	movs	r7, #1
   bcfa4:	1cb5      	adds	r5, r6, #2
   bcfa6:	2b00      	cmp	r3, #0
   bcfa8:	d05b      	beq.n	bd062 <_strtol_l.constprop.0+0xf6>
   bcfaa:	2b10      	cmp	r3, #16
   bcfac:	d109      	bne.n	bcfc2 <_strtol_l.constprop.0+0x56>
   bcfae:	2c30      	cmp	r4, #48	; 0x30
   bcfb0:	d107      	bne.n	bcfc2 <_strtol_l.constprop.0+0x56>
   bcfb2:	782c      	ldrb	r4, [r5, #0]
   bcfb4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bcfb8:	2c58      	cmp	r4, #88	; 0x58
   bcfba:	d14d      	bne.n	bd058 <_strtol_l.constprop.0+0xec>
   bcfbc:	786c      	ldrb	r4, [r5, #1]
   bcfbe:	2310      	movs	r3, #16
   bcfc0:	3502      	adds	r5, #2
   bcfc2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bcfc6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bcfca:	f04f 0c00 	mov.w	ip, #0
   bcfce:	fbb8 f9f3 	udiv	r9, r8, r3
   bcfd2:	4666      	mov	r6, ip
   bcfd4:	fb03 8a19 	mls	sl, r3, r9, r8
   bcfd8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bcfdc:	f1be 0f09 	cmp.w	lr, #9
   bcfe0:	d816      	bhi.n	bd010 <_strtol_l.constprop.0+0xa4>
   bcfe2:	4674      	mov	r4, lr
   bcfe4:	42a3      	cmp	r3, r4
   bcfe6:	dd24      	ble.n	bd032 <_strtol_l.constprop.0+0xc6>
   bcfe8:	f1bc 0f00 	cmp.w	ip, #0
   bcfec:	db1e      	blt.n	bd02c <_strtol_l.constprop.0+0xc0>
   bcfee:	45b1      	cmp	r9, r6
   bcff0:	d31c      	bcc.n	bd02c <_strtol_l.constprop.0+0xc0>
   bcff2:	d101      	bne.n	bcff8 <_strtol_l.constprop.0+0x8c>
   bcff4:	45a2      	cmp	sl, r4
   bcff6:	db19      	blt.n	bd02c <_strtol_l.constprop.0+0xc0>
   bcff8:	fb06 4603 	mla	r6, r6, r3, r4
   bcffc:	f04f 0c01 	mov.w	ip, #1
   bd000:	f815 4b01 	ldrb.w	r4, [r5], #1
   bd004:	e7e8      	b.n	bcfd8 <_strtol_l.constprop.0+0x6c>
   bd006:	2c2b      	cmp	r4, #43	; 0x2b
   bd008:	bf04      	itt	eq
   bd00a:	782c      	ldrbeq	r4, [r5, #0]
   bd00c:	1cb5      	addeq	r5, r6, #2
   bd00e:	e7ca      	b.n	bcfa6 <_strtol_l.constprop.0+0x3a>
   bd010:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bd014:	f1be 0f19 	cmp.w	lr, #25
   bd018:	d801      	bhi.n	bd01e <_strtol_l.constprop.0+0xb2>
   bd01a:	3c37      	subs	r4, #55	; 0x37
   bd01c:	e7e2      	b.n	bcfe4 <_strtol_l.constprop.0+0x78>
   bd01e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bd022:	f1be 0f19 	cmp.w	lr, #25
   bd026:	d804      	bhi.n	bd032 <_strtol_l.constprop.0+0xc6>
   bd028:	3c57      	subs	r4, #87	; 0x57
   bd02a:	e7db      	b.n	bcfe4 <_strtol_l.constprop.0+0x78>
   bd02c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bd030:	e7e6      	b.n	bd000 <_strtol_l.constprop.0+0x94>
   bd032:	f1bc 0f00 	cmp.w	ip, #0
   bd036:	da05      	bge.n	bd044 <_strtol_l.constprop.0+0xd8>
   bd038:	2322      	movs	r3, #34	; 0x22
   bd03a:	6003      	str	r3, [r0, #0]
   bd03c:	4646      	mov	r6, r8
   bd03e:	b942      	cbnz	r2, bd052 <_strtol_l.constprop.0+0xe6>
   bd040:	4630      	mov	r0, r6
   bd042:	e79e      	b.n	bcf82 <_strtol_l.constprop.0+0x16>
   bd044:	b107      	cbz	r7, bd048 <_strtol_l.constprop.0+0xdc>
   bd046:	4276      	negs	r6, r6
   bd048:	2a00      	cmp	r2, #0
   bd04a:	d0f9      	beq.n	bd040 <_strtol_l.constprop.0+0xd4>
   bd04c:	f1bc 0f00 	cmp.w	ip, #0
   bd050:	d000      	beq.n	bd054 <_strtol_l.constprop.0+0xe8>
   bd052:	1e69      	subs	r1, r5, #1
   bd054:	6011      	str	r1, [r2, #0]
   bd056:	e7f3      	b.n	bd040 <_strtol_l.constprop.0+0xd4>
   bd058:	2430      	movs	r4, #48	; 0x30
   bd05a:	2b00      	cmp	r3, #0
   bd05c:	d1b1      	bne.n	bcfc2 <_strtol_l.constprop.0+0x56>
   bd05e:	2308      	movs	r3, #8
   bd060:	e7af      	b.n	bcfc2 <_strtol_l.constprop.0+0x56>
   bd062:	2c30      	cmp	r4, #48	; 0x30
   bd064:	d0a5      	beq.n	bcfb2 <_strtol_l.constprop.0+0x46>
   bd066:	230a      	movs	r3, #10
   bd068:	e7ab      	b.n	bcfc2 <_strtol_l.constprop.0+0x56>
   bd06a:	bf00      	nop
   bd06c:	000becf1 	.word	0x000becf1

000bd070 <strtol>:
   bd070:	4613      	mov	r3, r2
   bd072:	460a      	mov	r2, r1
   bd074:	4601      	mov	r1, r0
   bd076:	4802      	ldr	r0, [pc, #8]	; (bd080 <strtol+0x10>)
   bd078:	6800      	ldr	r0, [r0, #0]
   bd07a:	f7ff bf77 	b.w	bcf6c <_strtol_l.constprop.0>
   bd07e:	bf00      	nop
   bd080:	200350cc 	.word	0x200350cc

000bd084 <__register_exitproc>:
   bd084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd088:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bd144 <__register_exitproc+0xc0>
   bd08c:	4606      	mov	r6, r0
   bd08e:	f8d8 0000 	ldr.w	r0, [r8]
   bd092:	461f      	mov	r7, r3
   bd094:	460d      	mov	r5, r1
   bd096:	4691      	mov	r9, r2
   bd098:	f000 fbc6 	bl	bd828 <__retarget_lock_acquire_recursive>
   bd09c:	4b25      	ldr	r3, [pc, #148]	; (bd134 <__register_exitproc+0xb0>)
   bd09e:	681c      	ldr	r4, [r3, #0]
   bd0a0:	b934      	cbnz	r4, bd0b0 <__register_exitproc+0x2c>
   bd0a2:	4c25      	ldr	r4, [pc, #148]	; (bd138 <__register_exitproc+0xb4>)
   bd0a4:	601c      	str	r4, [r3, #0]
   bd0a6:	4b25      	ldr	r3, [pc, #148]	; (bd13c <__register_exitproc+0xb8>)
   bd0a8:	b113      	cbz	r3, bd0b0 <__register_exitproc+0x2c>
   bd0aa:	681b      	ldr	r3, [r3, #0]
   bd0ac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bd0b0:	6863      	ldr	r3, [r4, #4]
   bd0b2:	2b1f      	cmp	r3, #31
   bd0b4:	dd07      	ble.n	bd0c6 <__register_exitproc+0x42>
   bd0b6:	f8d8 0000 	ldr.w	r0, [r8]
   bd0ba:	f000 fbb7 	bl	bd82c <__retarget_lock_release_recursive>
   bd0be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bd0c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bd0c6:	b34e      	cbz	r6, bd11c <__register_exitproc+0x98>
   bd0c8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bd0cc:	b988      	cbnz	r0, bd0f2 <__register_exitproc+0x6e>
   bd0ce:	4b1c      	ldr	r3, [pc, #112]	; (bd140 <__register_exitproc+0xbc>)
   bd0d0:	b923      	cbnz	r3, bd0dc <__register_exitproc+0x58>
   bd0d2:	f8d8 0000 	ldr.w	r0, [r8]
   bd0d6:	f000 fba8 	bl	bd82a <__retarget_lock_release>
   bd0da:	e7f0      	b.n	bd0be <__register_exitproc+0x3a>
   bd0dc:	f44f 7084 	mov.w	r0, #264	; 0x108
   bd0e0:	f7fb fcb2 	bl	b8a48 <malloc>
   bd0e4:	2800      	cmp	r0, #0
   bd0e6:	d0f4      	beq.n	bd0d2 <__register_exitproc+0x4e>
   bd0e8:	2300      	movs	r3, #0
   bd0ea:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bd0ee:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bd0f2:	6863      	ldr	r3, [r4, #4]
   bd0f4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bd0f8:	2201      	movs	r2, #1
   bd0fa:	409a      	lsls	r2, r3
   bd0fc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bd100:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bd104:	4313      	orrs	r3, r2
   bd106:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bd10a:	2e02      	cmp	r6, #2
   bd10c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bd110:	bf02      	ittt	eq
   bd112:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bd116:	4313      	orreq	r3, r2
   bd118:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bd11c:	6863      	ldr	r3, [r4, #4]
   bd11e:	f8d8 0000 	ldr.w	r0, [r8]
   bd122:	1c5a      	adds	r2, r3, #1
   bd124:	3302      	adds	r3, #2
   bd126:	6062      	str	r2, [r4, #4]
   bd128:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bd12c:	f000 fb7e 	bl	bd82c <__retarget_lock_release_recursive>
   bd130:	2000      	movs	r0, #0
   bd132:	e7c6      	b.n	bd0c2 <__register_exitproc+0x3e>
   bd134:	2003e7e8 	.word	0x2003e7e8
   bd138:	2003e75c 	.word	0x2003e75c
   bd13c:	00000000 	.word	0x00000000
   bd140:	000b8a49 	.word	0x000b8a49
   bd144:	20035130 	.word	0x20035130

000bd148 <rshift>:
   bd148:	6903      	ldr	r3, [r0, #16]
   bd14a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bd14e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bd152:	ea4f 1261 	mov.w	r2, r1, asr #5
   bd156:	f100 0414 	add.w	r4, r0, #20
   bd15a:	dd45      	ble.n	bd1e8 <rshift+0xa0>
   bd15c:	f011 011f 	ands.w	r1, r1, #31
   bd160:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bd164:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bd168:	d10c      	bne.n	bd184 <rshift+0x3c>
   bd16a:	f100 0710 	add.w	r7, r0, #16
   bd16e:	4629      	mov	r1, r5
   bd170:	42b1      	cmp	r1, r6
   bd172:	d334      	bcc.n	bd1de <rshift+0x96>
   bd174:	1a9b      	subs	r3, r3, r2
   bd176:	009b      	lsls	r3, r3, #2
   bd178:	1eea      	subs	r2, r5, #3
   bd17a:	4296      	cmp	r6, r2
   bd17c:	bf38      	it	cc
   bd17e:	2300      	movcc	r3, #0
   bd180:	4423      	add	r3, r4
   bd182:	e015      	b.n	bd1b0 <rshift+0x68>
   bd184:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bd188:	f1c1 0820 	rsb	r8, r1, #32
   bd18c:	40cf      	lsrs	r7, r1
   bd18e:	f105 0e04 	add.w	lr, r5, #4
   bd192:	46a1      	mov	r9, r4
   bd194:	4576      	cmp	r6, lr
   bd196:	46f4      	mov	ip, lr
   bd198:	d815      	bhi.n	bd1c6 <rshift+0x7e>
   bd19a:	1a9a      	subs	r2, r3, r2
   bd19c:	0092      	lsls	r2, r2, #2
   bd19e:	3a04      	subs	r2, #4
   bd1a0:	3501      	adds	r5, #1
   bd1a2:	42ae      	cmp	r6, r5
   bd1a4:	bf38      	it	cc
   bd1a6:	2200      	movcc	r2, #0
   bd1a8:	18a3      	adds	r3, r4, r2
   bd1aa:	50a7      	str	r7, [r4, r2]
   bd1ac:	b107      	cbz	r7, bd1b0 <rshift+0x68>
   bd1ae:	3304      	adds	r3, #4
   bd1b0:	1b1a      	subs	r2, r3, r4
   bd1b2:	42a3      	cmp	r3, r4
   bd1b4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bd1b8:	bf08      	it	eq
   bd1ba:	2300      	moveq	r3, #0
   bd1bc:	6102      	str	r2, [r0, #16]
   bd1be:	bf08      	it	eq
   bd1c0:	6143      	streq	r3, [r0, #20]
   bd1c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bd1c6:	f8dc c000 	ldr.w	ip, [ip]
   bd1ca:	fa0c fc08 	lsl.w	ip, ip, r8
   bd1ce:	ea4c 0707 	orr.w	r7, ip, r7
   bd1d2:	f849 7b04 	str.w	r7, [r9], #4
   bd1d6:	f85e 7b04 	ldr.w	r7, [lr], #4
   bd1da:	40cf      	lsrs	r7, r1
   bd1dc:	e7da      	b.n	bd194 <rshift+0x4c>
   bd1de:	f851 cb04 	ldr.w	ip, [r1], #4
   bd1e2:	f847 cf04 	str.w	ip, [r7, #4]!
   bd1e6:	e7c3      	b.n	bd170 <rshift+0x28>
   bd1e8:	4623      	mov	r3, r4
   bd1ea:	e7e1      	b.n	bd1b0 <rshift+0x68>

000bd1ec <__hexdig_fun>:
   bd1ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bd1f0:	2b09      	cmp	r3, #9
   bd1f2:	d802      	bhi.n	bd1fa <__hexdig_fun+0xe>
   bd1f4:	3820      	subs	r0, #32
   bd1f6:	b2c0      	uxtb	r0, r0
   bd1f8:	4770      	bx	lr
   bd1fa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bd1fe:	2b05      	cmp	r3, #5
   bd200:	d801      	bhi.n	bd206 <__hexdig_fun+0x1a>
   bd202:	3847      	subs	r0, #71	; 0x47
   bd204:	e7f7      	b.n	bd1f6 <__hexdig_fun+0xa>
   bd206:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bd20a:	2b05      	cmp	r3, #5
   bd20c:	d801      	bhi.n	bd212 <__hexdig_fun+0x26>
   bd20e:	3827      	subs	r0, #39	; 0x27
   bd210:	e7f1      	b.n	bd1f6 <__hexdig_fun+0xa>
   bd212:	2000      	movs	r0, #0
   bd214:	4770      	bx	lr
	...

000bd218 <__gethex>:
   bd218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd21c:	ed2d 8b02 	vpush	{d8}
   bd220:	b089      	sub	sp, #36	; 0x24
   bd222:	ee08 0a10 	vmov	s16, r0
   bd226:	9304      	str	r3, [sp, #16]
   bd228:	4bb4      	ldr	r3, [pc, #720]	; (bd4fc <__gethex+0x2e4>)
   bd22a:	681b      	ldr	r3, [r3, #0]
   bd22c:	9301      	str	r3, [sp, #4]
   bd22e:	4618      	mov	r0, r3
   bd230:	468b      	mov	fp, r1
   bd232:	4690      	mov	r8, r2
   bd234:	f7fe ffde 	bl	bc1f4 <strlen>
   bd238:	9b01      	ldr	r3, [sp, #4]
   bd23a:	f8db 2000 	ldr.w	r2, [fp]
   bd23e:	4403      	add	r3, r0
   bd240:	4682      	mov	sl, r0
   bd242:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bd246:	9305      	str	r3, [sp, #20]
   bd248:	1c93      	adds	r3, r2, #2
   bd24a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bd24e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bd252:	32fe      	adds	r2, #254	; 0xfe
   bd254:	18d1      	adds	r1, r2, r3
   bd256:	461f      	mov	r7, r3
   bd258:	f813 0b01 	ldrb.w	r0, [r3], #1
   bd25c:	9100      	str	r1, [sp, #0]
   bd25e:	2830      	cmp	r0, #48	; 0x30
   bd260:	d0f8      	beq.n	bd254 <__gethex+0x3c>
   bd262:	f7ff ffc3 	bl	bd1ec <__hexdig_fun>
   bd266:	4604      	mov	r4, r0
   bd268:	2800      	cmp	r0, #0
   bd26a:	d13a      	bne.n	bd2e2 <__gethex+0xca>
   bd26c:	9901      	ldr	r1, [sp, #4]
   bd26e:	4652      	mov	r2, sl
   bd270:	4638      	mov	r0, r7
   bd272:	f7fe ffc7 	bl	bc204 <strncmp>
   bd276:	4605      	mov	r5, r0
   bd278:	2800      	cmp	r0, #0
   bd27a:	d168      	bne.n	bd34e <__gethex+0x136>
   bd27c:	f817 000a 	ldrb.w	r0, [r7, sl]
   bd280:	eb07 060a 	add.w	r6, r7, sl
   bd284:	f7ff ffb2 	bl	bd1ec <__hexdig_fun>
   bd288:	2800      	cmp	r0, #0
   bd28a:	d062      	beq.n	bd352 <__gethex+0x13a>
   bd28c:	4633      	mov	r3, r6
   bd28e:	7818      	ldrb	r0, [r3, #0]
   bd290:	2830      	cmp	r0, #48	; 0x30
   bd292:	461f      	mov	r7, r3
   bd294:	f103 0301 	add.w	r3, r3, #1
   bd298:	d0f9      	beq.n	bd28e <__gethex+0x76>
   bd29a:	f7ff ffa7 	bl	bd1ec <__hexdig_fun>
   bd29e:	2301      	movs	r3, #1
   bd2a0:	fab0 f480 	clz	r4, r0
   bd2a4:	0964      	lsrs	r4, r4, #5
   bd2a6:	4635      	mov	r5, r6
   bd2a8:	9300      	str	r3, [sp, #0]
   bd2aa:	463a      	mov	r2, r7
   bd2ac:	4616      	mov	r6, r2
   bd2ae:	3201      	adds	r2, #1
   bd2b0:	7830      	ldrb	r0, [r6, #0]
   bd2b2:	f7ff ff9b 	bl	bd1ec <__hexdig_fun>
   bd2b6:	2800      	cmp	r0, #0
   bd2b8:	d1f8      	bne.n	bd2ac <__gethex+0x94>
   bd2ba:	9901      	ldr	r1, [sp, #4]
   bd2bc:	4652      	mov	r2, sl
   bd2be:	4630      	mov	r0, r6
   bd2c0:	f7fe ffa0 	bl	bc204 <strncmp>
   bd2c4:	b980      	cbnz	r0, bd2e8 <__gethex+0xd0>
   bd2c6:	b94d      	cbnz	r5, bd2dc <__gethex+0xc4>
   bd2c8:	eb06 050a 	add.w	r5, r6, sl
   bd2cc:	462a      	mov	r2, r5
   bd2ce:	4616      	mov	r6, r2
   bd2d0:	3201      	adds	r2, #1
   bd2d2:	7830      	ldrb	r0, [r6, #0]
   bd2d4:	f7ff ff8a 	bl	bd1ec <__hexdig_fun>
   bd2d8:	2800      	cmp	r0, #0
   bd2da:	d1f8      	bne.n	bd2ce <__gethex+0xb6>
   bd2dc:	1bad      	subs	r5, r5, r6
   bd2de:	00ad      	lsls	r5, r5, #2
   bd2e0:	e004      	b.n	bd2ec <__gethex+0xd4>
   bd2e2:	2400      	movs	r4, #0
   bd2e4:	4625      	mov	r5, r4
   bd2e6:	e7e0      	b.n	bd2aa <__gethex+0x92>
   bd2e8:	2d00      	cmp	r5, #0
   bd2ea:	d1f7      	bne.n	bd2dc <__gethex+0xc4>
   bd2ec:	7833      	ldrb	r3, [r6, #0]
   bd2ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bd2f2:	2b50      	cmp	r3, #80	; 0x50
   bd2f4:	d13b      	bne.n	bd36e <__gethex+0x156>
   bd2f6:	7873      	ldrb	r3, [r6, #1]
   bd2f8:	2b2b      	cmp	r3, #43	; 0x2b
   bd2fa:	d02c      	beq.n	bd356 <__gethex+0x13e>
   bd2fc:	2b2d      	cmp	r3, #45	; 0x2d
   bd2fe:	d02e      	beq.n	bd35e <__gethex+0x146>
   bd300:	1c71      	adds	r1, r6, #1
   bd302:	f04f 0900 	mov.w	r9, #0
   bd306:	7808      	ldrb	r0, [r1, #0]
   bd308:	f7ff ff70 	bl	bd1ec <__hexdig_fun>
   bd30c:	1e43      	subs	r3, r0, #1
   bd30e:	b2db      	uxtb	r3, r3
   bd310:	2b18      	cmp	r3, #24
   bd312:	d82c      	bhi.n	bd36e <__gethex+0x156>
   bd314:	f1a0 0210 	sub.w	r2, r0, #16
   bd318:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bd31c:	f7ff ff66 	bl	bd1ec <__hexdig_fun>
   bd320:	1e43      	subs	r3, r0, #1
   bd322:	b2db      	uxtb	r3, r3
   bd324:	2b18      	cmp	r3, #24
   bd326:	d91d      	bls.n	bd364 <__gethex+0x14c>
   bd328:	f1b9 0f00 	cmp.w	r9, #0
   bd32c:	d000      	beq.n	bd330 <__gethex+0x118>
   bd32e:	4252      	negs	r2, r2
   bd330:	4415      	add	r5, r2
   bd332:	f8cb 1000 	str.w	r1, [fp]
   bd336:	b1e4      	cbz	r4, bd372 <__gethex+0x15a>
   bd338:	9b00      	ldr	r3, [sp, #0]
   bd33a:	2b00      	cmp	r3, #0
   bd33c:	bf14      	ite	ne
   bd33e:	2700      	movne	r7, #0
   bd340:	2706      	moveq	r7, #6
   bd342:	4638      	mov	r0, r7
   bd344:	b009      	add	sp, #36	; 0x24
   bd346:	ecbd 8b02 	vpop	{d8}
   bd34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd34e:	463e      	mov	r6, r7
   bd350:	4625      	mov	r5, r4
   bd352:	2401      	movs	r4, #1
   bd354:	e7ca      	b.n	bd2ec <__gethex+0xd4>
   bd356:	f04f 0900 	mov.w	r9, #0
   bd35a:	1cb1      	adds	r1, r6, #2
   bd35c:	e7d3      	b.n	bd306 <__gethex+0xee>
   bd35e:	f04f 0901 	mov.w	r9, #1
   bd362:	e7fa      	b.n	bd35a <__gethex+0x142>
   bd364:	230a      	movs	r3, #10
   bd366:	fb03 0202 	mla	r2, r3, r2, r0
   bd36a:	3a10      	subs	r2, #16
   bd36c:	e7d4      	b.n	bd318 <__gethex+0x100>
   bd36e:	4631      	mov	r1, r6
   bd370:	e7df      	b.n	bd332 <__gethex+0x11a>
   bd372:	1bf3      	subs	r3, r6, r7
   bd374:	3b01      	subs	r3, #1
   bd376:	4621      	mov	r1, r4
   bd378:	2b07      	cmp	r3, #7
   bd37a:	dc0b      	bgt.n	bd394 <__gethex+0x17c>
   bd37c:	ee18 0a10 	vmov	r0, s16
   bd380:	f000 fa68 	bl	bd854 <_Balloc>
   bd384:	4604      	mov	r4, r0
   bd386:	b940      	cbnz	r0, bd39a <__gethex+0x182>
   bd388:	4b5d      	ldr	r3, [pc, #372]	; (bd500 <__gethex+0x2e8>)
   bd38a:	4602      	mov	r2, r0
   bd38c:	21de      	movs	r1, #222	; 0xde
   bd38e:	485d      	ldr	r0, [pc, #372]	; (bd504 <__gethex+0x2ec>)
   bd390:	f7fb fb9a 	bl	b8ac8 <__assert_func>
   bd394:	3101      	adds	r1, #1
   bd396:	105b      	asrs	r3, r3, #1
   bd398:	e7ee      	b.n	bd378 <__gethex+0x160>
   bd39a:	f100 0914 	add.w	r9, r0, #20
   bd39e:	f04f 0b00 	mov.w	fp, #0
   bd3a2:	f1ca 0301 	rsb	r3, sl, #1
   bd3a6:	f8cd 9008 	str.w	r9, [sp, #8]
   bd3aa:	f8cd b000 	str.w	fp, [sp]
   bd3ae:	9306      	str	r3, [sp, #24]
   bd3b0:	42b7      	cmp	r7, r6
   bd3b2:	d340      	bcc.n	bd436 <__gethex+0x21e>
   bd3b4:	9802      	ldr	r0, [sp, #8]
   bd3b6:	9b00      	ldr	r3, [sp, #0]
   bd3b8:	f840 3b04 	str.w	r3, [r0], #4
   bd3bc:	eba0 0009 	sub.w	r0, r0, r9
   bd3c0:	1080      	asrs	r0, r0, #2
   bd3c2:	0146      	lsls	r6, r0, #5
   bd3c4:	6120      	str	r0, [r4, #16]
   bd3c6:	4618      	mov	r0, r3
   bd3c8:	f000 fb36 	bl	bda38 <__hi0bits>
   bd3cc:	1a30      	subs	r0, r6, r0
   bd3ce:	f8d8 6000 	ldr.w	r6, [r8]
   bd3d2:	42b0      	cmp	r0, r6
   bd3d4:	dd63      	ble.n	bd49e <__gethex+0x286>
   bd3d6:	1b87      	subs	r7, r0, r6
   bd3d8:	4639      	mov	r1, r7
   bd3da:	4620      	mov	r0, r4
   bd3dc:	f000 feda 	bl	be194 <__any_on>
   bd3e0:	4682      	mov	sl, r0
   bd3e2:	b1a8      	cbz	r0, bd410 <__gethex+0x1f8>
   bd3e4:	1e7b      	subs	r3, r7, #1
   bd3e6:	1159      	asrs	r1, r3, #5
   bd3e8:	f003 021f 	and.w	r2, r3, #31
   bd3ec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bd3f0:	f04f 0a01 	mov.w	sl, #1
   bd3f4:	fa0a f202 	lsl.w	r2, sl, r2
   bd3f8:	420a      	tst	r2, r1
   bd3fa:	d009      	beq.n	bd410 <__gethex+0x1f8>
   bd3fc:	4553      	cmp	r3, sl
   bd3fe:	dd05      	ble.n	bd40c <__gethex+0x1f4>
   bd400:	1eb9      	subs	r1, r7, #2
   bd402:	4620      	mov	r0, r4
   bd404:	f000 fec6 	bl	be194 <__any_on>
   bd408:	2800      	cmp	r0, #0
   bd40a:	d145      	bne.n	bd498 <__gethex+0x280>
   bd40c:	f04f 0a02 	mov.w	sl, #2
   bd410:	4639      	mov	r1, r7
   bd412:	4620      	mov	r0, r4
   bd414:	f7ff fe98 	bl	bd148 <rshift>
   bd418:	443d      	add	r5, r7
   bd41a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bd41e:	42ab      	cmp	r3, r5
   bd420:	da4c      	bge.n	bd4bc <__gethex+0x2a4>
   bd422:	ee18 0a10 	vmov	r0, s16
   bd426:	4621      	mov	r1, r4
   bd428:	f000 fa54 	bl	bd8d4 <_Bfree>
   bd42c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bd42e:	2300      	movs	r3, #0
   bd430:	6013      	str	r3, [r2, #0]
   bd432:	27a3      	movs	r7, #163	; 0xa3
   bd434:	e785      	b.n	bd342 <__gethex+0x12a>
   bd436:	1e73      	subs	r3, r6, #1
   bd438:	9a05      	ldr	r2, [sp, #20]
   bd43a:	9303      	str	r3, [sp, #12]
   bd43c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bd440:	4293      	cmp	r3, r2
   bd442:	d019      	beq.n	bd478 <__gethex+0x260>
   bd444:	f1bb 0f20 	cmp.w	fp, #32
   bd448:	d107      	bne.n	bd45a <__gethex+0x242>
   bd44a:	9b02      	ldr	r3, [sp, #8]
   bd44c:	9a00      	ldr	r2, [sp, #0]
   bd44e:	f843 2b04 	str.w	r2, [r3], #4
   bd452:	9302      	str	r3, [sp, #8]
   bd454:	2300      	movs	r3, #0
   bd456:	9300      	str	r3, [sp, #0]
   bd458:	469b      	mov	fp, r3
   bd45a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bd45e:	f7ff fec5 	bl	bd1ec <__hexdig_fun>
   bd462:	9b00      	ldr	r3, [sp, #0]
   bd464:	f000 000f 	and.w	r0, r0, #15
   bd468:	fa00 f00b 	lsl.w	r0, r0, fp
   bd46c:	4303      	orrs	r3, r0
   bd46e:	9300      	str	r3, [sp, #0]
   bd470:	f10b 0b04 	add.w	fp, fp, #4
   bd474:	9b03      	ldr	r3, [sp, #12]
   bd476:	e00d      	b.n	bd494 <__gethex+0x27c>
   bd478:	9b03      	ldr	r3, [sp, #12]
   bd47a:	9a06      	ldr	r2, [sp, #24]
   bd47c:	4413      	add	r3, r2
   bd47e:	42bb      	cmp	r3, r7
   bd480:	d3e0      	bcc.n	bd444 <__gethex+0x22c>
   bd482:	4618      	mov	r0, r3
   bd484:	9901      	ldr	r1, [sp, #4]
   bd486:	9307      	str	r3, [sp, #28]
   bd488:	4652      	mov	r2, sl
   bd48a:	f7fe febb 	bl	bc204 <strncmp>
   bd48e:	9b07      	ldr	r3, [sp, #28]
   bd490:	2800      	cmp	r0, #0
   bd492:	d1d7      	bne.n	bd444 <__gethex+0x22c>
   bd494:	461e      	mov	r6, r3
   bd496:	e78b      	b.n	bd3b0 <__gethex+0x198>
   bd498:	f04f 0a03 	mov.w	sl, #3
   bd49c:	e7b8      	b.n	bd410 <__gethex+0x1f8>
   bd49e:	da0a      	bge.n	bd4b6 <__gethex+0x29e>
   bd4a0:	1a37      	subs	r7, r6, r0
   bd4a2:	4621      	mov	r1, r4
   bd4a4:	ee18 0a10 	vmov	r0, s16
   bd4a8:	463a      	mov	r2, r7
   bd4aa:	f000 fc2f 	bl	bdd0c <__lshift>
   bd4ae:	1bed      	subs	r5, r5, r7
   bd4b0:	4604      	mov	r4, r0
   bd4b2:	f100 0914 	add.w	r9, r0, #20
   bd4b6:	f04f 0a00 	mov.w	sl, #0
   bd4ba:	e7ae      	b.n	bd41a <__gethex+0x202>
   bd4bc:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bd4c0:	42a8      	cmp	r0, r5
   bd4c2:	dd72      	ble.n	bd5aa <__gethex+0x392>
   bd4c4:	1b45      	subs	r5, r0, r5
   bd4c6:	42ae      	cmp	r6, r5
   bd4c8:	dc36      	bgt.n	bd538 <__gethex+0x320>
   bd4ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bd4ce:	2b02      	cmp	r3, #2
   bd4d0:	d02a      	beq.n	bd528 <__gethex+0x310>
   bd4d2:	2b03      	cmp	r3, #3
   bd4d4:	d02c      	beq.n	bd530 <__gethex+0x318>
   bd4d6:	2b01      	cmp	r3, #1
   bd4d8:	d11c      	bne.n	bd514 <__gethex+0x2fc>
   bd4da:	42ae      	cmp	r6, r5
   bd4dc:	d11a      	bne.n	bd514 <__gethex+0x2fc>
   bd4de:	2e01      	cmp	r6, #1
   bd4e0:	d112      	bne.n	bd508 <__gethex+0x2f0>
   bd4e2:	9a04      	ldr	r2, [sp, #16]
   bd4e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bd4e8:	6013      	str	r3, [r2, #0]
   bd4ea:	2301      	movs	r3, #1
   bd4ec:	6123      	str	r3, [r4, #16]
   bd4ee:	f8c9 3000 	str.w	r3, [r9]
   bd4f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bd4f4:	2762      	movs	r7, #98	; 0x62
   bd4f6:	601c      	str	r4, [r3, #0]
   bd4f8:	e723      	b.n	bd342 <__gethex+0x12a>
   bd4fa:	bf00      	nop
   bd4fc:	000bee64 	.word	0x000bee64
   bd500:	000bedf1 	.word	0x000bedf1
   bd504:	000bee02 	.word	0x000bee02
   bd508:	1e71      	subs	r1, r6, #1
   bd50a:	4620      	mov	r0, r4
   bd50c:	f000 fe42 	bl	be194 <__any_on>
   bd510:	2800      	cmp	r0, #0
   bd512:	d1e6      	bne.n	bd4e2 <__gethex+0x2ca>
   bd514:	ee18 0a10 	vmov	r0, s16
   bd518:	4621      	mov	r1, r4
   bd51a:	f000 f9db 	bl	bd8d4 <_Bfree>
   bd51e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bd520:	2300      	movs	r3, #0
   bd522:	6013      	str	r3, [r2, #0]
   bd524:	2750      	movs	r7, #80	; 0x50
   bd526:	e70c      	b.n	bd342 <__gethex+0x12a>
   bd528:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd52a:	2b00      	cmp	r3, #0
   bd52c:	d1f2      	bne.n	bd514 <__gethex+0x2fc>
   bd52e:	e7d8      	b.n	bd4e2 <__gethex+0x2ca>
   bd530:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd532:	2b00      	cmp	r3, #0
   bd534:	d1d5      	bne.n	bd4e2 <__gethex+0x2ca>
   bd536:	e7ed      	b.n	bd514 <__gethex+0x2fc>
   bd538:	1e6f      	subs	r7, r5, #1
   bd53a:	f1ba 0f00 	cmp.w	sl, #0
   bd53e:	d131      	bne.n	bd5a4 <__gethex+0x38c>
   bd540:	b127      	cbz	r7, bd54c <__gethex+0x334>
   bd542:	4639      	mov	r1, r7
   bd544:	4620      	mov	r0, r4
   bd546:	f000 fe25 	bl	be194 <__any_on>
   bd54a:	4682      	mov	sl, r0
   bd54c:	117b      	asrs	r3, r7, #5
   bd54e:	2101      	movs	r1, #1
   bd550:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bd554:	f007 071f 	and.w	r7, r7, #31
   bd558:	fa01 f707 	lsl.w	r7, r1, r7
   bd55c:	421f      	tst	r7, r3
   bd55e:	4629      	mov	r1, r5
   bd560:	4620      	mov	r0, r4
   bd562:	bf18      	it	ne
   bd564:	f04a 0a02 	orrne.w	sl, sl, #2
   bd568:	1b76      	subs	r6, r6, r5
   bd56a:	f7ff fded 	bl	bd148 <rshift>
   bd56e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bd572:	2702      	movs	r7, #2
   bd574:	f1ba 0f00 	cmp.w	sl, #0
   bd578:	d048      	beq.n	bd60c <__gethex+0x3f4>
   bd57a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bd57e:	2b02      	cmp	r3, #2
   bd580:	d015      	beq.n	bd5ae <__gethex+0x396>
   bd582:	2b03      	cmp	r3, #3
   bd584:	d017      	beq.n	bd5b6 <__gethex+0x39e>
   bd586:	2b01      	cmp	r3, #1
   bd588:	d109      	bne.n	bd59e <__gethex+0x386>
   bd58a:	f01a 0f02 	tst.w	sl, #2
   bd58e:	d006      	beq.n	bd59e <__gethex+0x386>
   bd590:	f8d9 0000 	ldr.w	r0, [r9]
   bd594:	ea4a 0a00 	orr.w	sl, sl, r0
   bd598:	f01a 0f01 	tst.w	sl, #1
   bd59c:	d10e      	bne.n	bd5bc <__gethex+0x3a4>
   bd59e:	f047 0710 	orr.w	r7, r7, #16
   bd5a2:	e033      	b.n	bd60c <__gethex+0x3f4>
   bd5a4:	f04f 0a01 	mov.w	sl, #1
   bd5a8:	e7d0      	b.n	bd54c <__gethex+0x334>
   bd5aa:	2701      	movs	r7, #1
   bd5ac:	e7e2      	b.n	bd574 <__gethex+0x35c>
   bd5ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd5b0:	f1c3 0301 	rsb	r3, r3, #1
   bd5b4:	9315      	str	r3, [sp, #84]	; 0x54
   bd5b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd5b8:	2b00      	cmp	r3, #0
   bd5ba:	d0f0      	beq.n	bd59e <__gethex+0x386>
   bd5bc:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bd5c0:	f104 0314 	add.w	r3, r4, #20
   bd5c4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bd5c8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bd5cc:	f04f 0c00 	mov.w	ip, #0
   bd5d0:	4618      	mov	r0, r3
   bd5d2:	f853 2b04 	ldr.w	r2, [r3], #4
   bd5d6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bd5da:	d01c      	beq.n	bd616 <__gethex+0x3fe>
   bd5dc:	3201      	adds	r2, #1
   bd5de:	6002      	str	r2, [r0, #0]
   bd5e0:	2f02      	cmp	r7, #2
   bd5e2:	f104 0314 	add.w	r3, r4, #20
   bd5e6:	d13f      	bne.n	bd668 <__gethex+0x450>
   bd5e8:	f8d8 2000 	ldr.w	r2, [r8]
   bd5ec:	3a01      	subs	r2, #1
   bd5ee:	42b2      	cmp	r2, r6
   bd5f0:	d10a      	bne.n	bd608 <__gethex+0x3f0>
   bd5f2:	1171      	asrs	r1, r6, #5
   bd5f4:	2201      	movs	r2, #1
   bd5f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bd5fa:	f006 061f 	and.w	r6, r6, #31
   bd5fe:	fa02 f606 	lsl.w	r6, r2, r6
   bd602:	421e      	tst	r6, r3
   bd604:	bf18      	it	ne
   bd606:	4617      	movne	r7, r2
   bd608:	f047 0720 	orr.w	r7, r7, #32
   bd60c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bd60e:	601c      	str	r4, [r3, #0]
   bd610:	9b04      	ldr	r3, [sp, #16]
   bd612:	601d      	str	r5, [r3, #0]
   bd614:	e695      	b.n	bd342 <__gethex+0x12a>
   bd616:	4299      	cmp	r1, r3
   bd618:	f843 cc04 	str.w	ip, [r3, #-4]
   bd61c:	d8d8      	bhi.n	bd5d0 <__gethex+0x3b8>
   bd61e:	68a3      	ldr	r3, [r4, #8]
   bd620:	459b      	cmp	fp, r3
   bd622:	db19      	blt.n	bd658 <__gethex+0x440>
   bd624:	6861      	ldr	r1, [r4, #4]
   bd626:	ee18 0a10 	vmov	r0, s16
   bd62a:	3101      	adds	r1, #1
   bd62c:	f000 f912 	bl	bd854 <_Balloc>
   bd630:	4681      	mov	r9, r0
   bd632:	b918      	cbnz	r0, bd63c <__gethex+0x424>
   bd634:	4b1a      	ldr	r3, [pc, #104]	; (bd6a0 <__gethex+0x488>)
   bd636:	4602      	mov	r2, r0
   bd638:	2184      	movs	r1, #132	; 0x84
   bd63a:	e6a8      	b.n	bd38e <__gethex+0x176>
   bd63c:	6922      	ldr	r2, [r4, #16]
   bd63e:	3202      	adds	r2, #2
   bd640:	f104 010c 	add.w	r1, r4, #12
   bd644:	0092      	lsls	r2, r2, #2
   bd646:	300c      	adds	r0, #12
   bd648:	f7fe fd64 	bl	bc114 <memcpy>
   bd64c:	4621      	mov	r1, r4
   bd64e:	ee18 0a10 	vmov	r0, s16
   bd652:	f000 f93f 	bl	bd8d4 <_Bfree>
   bd656:	464c      	mov	r4, r9
   bd658:	6923      	ldr	r3, [r4, #16]
   bd65a:	1c5a      	adds	r2, r3, #1
   bd65c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bd660:	6122      	str	r2, [r4, #16]
   bd662:	2201      	movs	r2, #1
   bd664:	615a      	str	r2, [r3, #20]
   bd666:	e7bb      	b.n	bd5e0 <__gethex+0x3c8>
   bd668:	6922      	ldr	r2, [r4, #16]
   bd66a:	455a      	cmp	r2, fp
   bd66c:	dd0b      	ble.n	bd686 <__gethex+0x46e>
   bd66e:	2101      	movs	r1, #1
   bd670:	4620      	mov	r0, r4
   bd672:	f7ff fd69 	bl	bd148 <rshift>
   bd676:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bd67a:	3501      	adds	r5, #1
   bd67c:	42ab      	cmp	r3, r5
   bd67e:	f6ff aed0 	blt.w	bd422 <__gethex+0x20a>
   bd682:	2701      	movs	r7, #1
   bd684:	e7c0      	b.n	bd608 <__gethex+0x3f0>
   bd686:	f016 061f 	ands.w	r6, r6, #31
   bd68a:	d0fa      	beq.n	bd682 <__gethex+0x46a>
   bd68c:	4453      	add	r3, sl
   bd68e:	f1c6 0620 	rsb	r6, r6, #32
   bd692:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bd696:	f000 f9cf 	bl	bda38 <__hi0bits>
   bd69a:	42b0      	cmp	r0, r6
   bd69c:	dbe7      	blt.n	bd66e <__gethex+0x456>
   bd69e:	e7f0      	b.n	bd682 <__gethex+0x46a>
   bd6a0:	000bedf1 	.word	0x000bedf1

000bd6a4 <L_shift>:
   bd6a4:	f1c2 0208 	rsb	r2, r2, #8
   bd6a8:	0092      	lsls	r2, r2, #2
   bd6aa:	b570      	push	{r4, r5, r6, lr}
   bd6ac:	f1c2 0620 	rsb	r6, r2, #32
   bd6b0:	6843      	ldr	r3, [r0, #4]
   bd6b2:	6804      	ldr	r4, [r0, #0]
   bd6b4:	fa03 f506 	lsl.w	r5, r3, r6
   bd6b8:	432c      	orrs	r4, r5
   bd6ba:	40d3      	lsrs	r3, r2
   bd6bc:	6004      	str	r4, [r0, #0]
   bd6be:	f840 3f04 	str.w	r3, [r0, #4]!
   bd6c2:	4288      	cmp	r0, r1
   bd6c4:	d3f4      	bcc.n	bd6b0 <L_shift+0xc>
   bd6c6:	bd70      	pop	{r4, r5, r6, pc}

000bd6c8 <__match>:
   bd6c8:	b530      	push	{r4, r5, lr}
   bd6ca:	6803      	ldr	r3, [r0, #0]
   bd6cc:	3301      	adds	r3, #1
   bd6ce:	f811 4b01 	ldrb.w	r4, [r1], #1
   bd6d2:	b914      	cbnz	r4, bd6da <__match+0x12>
   bd6d4:	6003      	str	r3, [r0, #0]
   bd6d6:	2001      	movs	r0, #1
   bd6d8:	bd30      	pop	{r4, r5, pc}
   bd6da:	f813 2b01 	ldrb.w	r2, [r3], #1
   bd6de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bd6e2:	2d19      	cmp	r5, #25
   bd6e4:	bf98      	it	ls
   bd6e6:	3220      	addls	r2, #32
   bd6e8:	42a2      	cmp	r2, r4
   bd6ea:	d0f0      	beq.n	bd6ce <__match+0x6>
   bd6ec:	2000      	movs	r0, #0
   bd6ee:	e7f3      	b.n	bd6d8 <__match+0x10>

000bd6f0 <__hexnan>:
   bd6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd6f4:	680b      	ldr	r3, [r1, #0]
   bd6f6:	115e      	asrs	r6, r3, #5
   bd6f8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bd6fc:	f013 031f 	ands.w	r3, r3, #31
   bd700:	b087      	sub	sp, #28
   bd702:	bf18      	it	ne
   bd704:	3604      	addne	r6, #4
   bd706:	2500      	movs	r5, #0
   bd708:	1f37      	subs	r7, r6, #4
   bd70a:	4690      	mov	r8, r2
   bd70c:	6802      	ldr	r2, [r0, #0]
   bd70e:	9301      	str	r3, [sp, #4]
   bd710:	4682      	mov	sl, r0
   bd712:	f846 5c04 	str.w	r5, [r6, #-4]
   bd716:	46b9      	mov	r9, r7
   bd718:	463c      	mov	r4, r7
   bd71a:	9502      	str	r5, [sp, #8]
   bd71c:	46ab      	mov	fp, r5
   bd71e:	7851      	ldrb	r1, [r2, #1]
   bd720:	1c53      	adds	r3, r2, #1
   bd722:	9303      	str	r3, [sp, #12]
   bd724:	b341      	cbz	r1, bd778 <__hexnan+0x88>
   bd726:	4608      	mov	r0, r1
   bd728:	9205      	str	r2, [sp, #20]
   bd72a:	9104      	str	r1, [sp, #16]
   bd72c:	f7ff fd5e 	bl	bd1ec <__hexdig_fun>
   bd730:	2800      	cmp	r0, #0
   bd732:	d14f      	bne.n	bd7d4 <__hexnan+0xe4>
   bd734:	9904      	ldr	r1, [sp, #16]
   bd736:	9a05      	ldr	r2, [sp, #20]
   bd738:	2920      	cmp	r1, #32
   bd73a:	d818      	bhi.n	bd76e <__hexnan+0x7e>
   bd73c:	9b02      	ldr	r3, [sp, #8]
   bd73e:	459b      	cmp	fp, r3
   bd740:	dd13      	ble.n	bd76a <__hexnan+0x7a>
   bd742:	454c      	cmp	r4, r9
   bd744:	d206      	bcs.n	bd754 <__hexnan+0x64>
   bd746:	2d07      	cmp	r5, #7
   bd748:	dc04      	bgt.n	bd754 <__hexnan+0x64>
   bd74a:	462a      	mov	r2, r5
   bd74c:	4649      	mov	r1, r9
   bd74e:	4620      	mov	r0, r4
   bd750:	f7ff ffa8 	bl	bd6a4 <L_shift>
   bd754:	4544      	cmp	r4, r8
   bd756:	d950      	bls.n	bd7fa <__hexnan+0x10a>
   bd758:	2300      	movs	r3, #0
   bd75a:	f1a4 0904 	sub.w	r9, r4, #4
   bd75e:	f844 3c04 	str.w	r3, [r4, #-4]
   bd762:	f8cd b008 	str.w	fp, [sp, #8]
   bd766:	464c      	mov	r4, r9
   bd768:	461d      	mov	r5, r3
   bd76a:	9a03      	ldr	r2, [sp, #12]
   bd76c:	e7d7      	b.n	bd71e <__hexnan+0x2e>
   bd76e:	2929      	cmp	r1, #41	; 0x29
   bd770:	d156      	bne.n	bd820 <__hexnan+0x130>
   bd772:	3202      	adds	r2, #2
   bd774:	f8ca 2000 	str.w	r2, [sl]
   bd778:	f1bb 0f00 	cmp.w	fp, #0
   bd77c:	d050      	beq.n	bd820 <__hexnan+0x130>
   bd77e:	454c      	cmp	r4, r9
   bd780:	d206      	bcs.n	bd790 <__hexnan+0xa0>
   bd782:	2d07      	cmp	r5, #7
   bd784:	dc04      	bgt.n	bd790 <__hexnan+0xa0>
   bd786:	462a      	mov	r2, r5
   bd788:	4649      	mov	r1, r9
   bd78a:	4620      	mov	r0, r4
   bd78c:	f7ff ff8a 	bl	bd6a4 <L_shift>
   bd790:	4544      	cmp	r4, r8
   bd792:	d934      	bls.n	bd7fe <__hexnan+0x10e>
   bd794:	f1a8 0204 	sub.w	r2, r8, #4
   bd798:	4623      	mov	r3, r4
   bd79a:	f853 1b04 	ldr.w	r1, [r3], #4
   bd79e:	f842 1f04 	str.w	r1, [r2, #4]!
   bd7a2:	429f      	cmp	r7, r3
   bd7a4:	d2f9      	bcs.n	bd79a <__hexnan+0xaa>
   bd7a6:	1b3b      	subs	r3, r7, r4
   bd7a8:	f023 0303 	bic.w	r3, r3, #3
   bd7ac:	3304      	adds	r3, #4
   bd7ae:	3401      	adds	r4, #1
   bd7b0:	3e03      	subs	r6, #3
   bd7b2:	42b4      	cmp	r4, r6
   bd7b4:	bf88      	it	hi
   bd7b6:	2304      	movhi	r3, #4
   bd7b8:	4443      	add	r3, r8
   bd7ba:	2200      	movs	r2, #0
   bd7bc:	f843 2b04 	str.w	r2, [r3], #4
   bd7c0:	429f      	cmp	r7, r3
   bd7c2:	d2fb      	bcs.n	bd7bc <__hexnan+0xcc>
   bd7c4:	683b      	ldr	r3, [r7, #0]
   bd7c6:	b91b      	cbnz	r3, bd7d0 <__hexnan+0xe0>
   bd7c8:	4547      	cmp	r7, r8
   bd7ca:	d127      	bne.n	bd81c <__hexnan+0x12c>
   bd7cc:	2301      	movs	r3, #1
   bd7ce:	603b      	str	r3, [r7, #0]
   bd7d0:	2005      	movs	r0, #5
   bd7d2:	e026      	b.n	bd822 <__hexnan+0x132>
   bd7d4:	3501      	adds	r5, #1
   bd7d6:	2d08      	cmp	r5, #8
   bd7d8:	f10b 0b01 	add.w	fp, fp, #1
   bd7dc:	dd06      	ble.n	bd7ec <__hexnan+0xfc>
   bd7de:	4544      	cmp	r4, r8
   bd7e0:	d9c3      	bls.n	bd76a <__hexnan+0x7a>
   bd7e2:	2300      	movs	r3, #0
   bd7e4:	f844 3c04 	str.w	r3, [r4, #-4]
   bd7e8:	2501      	movs	r5, #1
   bd7ea:	3c04      	subs	r4, #4
   bd7ec:	6822      	ldr	r2, [r4, #0]
   bd7ee:	f000 000f 	and.w	r0, r0, #15
   bd7f2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bd7f6:	6022      	str	r2, [r4, #0]
   bd7f8:	e7b7      	b.n	bd76a <__hexnan+0x7a>
   bd7fa:	2508      	movs	r5, #8
   bd7fc:	e7b5      	b.n	bd76a <__hexnan+0x7a>
   bd7fe:	9b01      	ldr	r3, [sp, #4]
   bd800:	2b00      	cmp	r3, #0
   bd802:	d0df      	beq.n	bd7c4 <__hexnan+0xd4>
   bd804:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd808:	f1c3 0320 	rsb	r3, r3, #32
   bd80c:	fa22 f303 	lsr.w	r3, r2, r3
   bd810:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bd814:	401a      	ands	r2, r3
   bd816:	f846 2c04 	str.w	r2, [r6, #-4]
   bd81a:	e7d3      	b.n	bd7c4 <__hexnan+0xd4>
   bd81c:	3f04      	subs	r7, #4
   bd81e:	e7d1      	b.n	bd7c4 <__hexnan+0xd4>
   bd820:	2004      	movs	r0, #4
   bd822:	b007      	add	sp, #28
   bd824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bd828 <__retarget_lock_acquire_recursive>:
   bd828:	4770      	bx	lr

000bd82a <__retarget_lock_release>:
   bd82a:	4770      	bx	lr

000bd82c <__retarget_lock_release_recursive>:
   bd82c:	4770      	bx	lr

000bd82e <__ascii_mbtowc>:
   bd82e:	b082      	sub	sp, #8
   bd830:	b901      	cbnz	r1, bd834 <__ascii_mbtowc+0x6>
   bd832:	a901      	add	r1, sp, #4
   bd834:	b142      	cbz	r2, bd848 <__ascii_mbtowc+0x1a>
   bd836:	b14b      	cbz	r3, bd84c <__ascii_mbtowc+0x1e>
   bd838:	7813      	ldrb	r3, [r2, #0]
   bd83a:	600b      	str	r3, [r1, #0]
   bd83c:	7812      	ldrb	r2, [r2, #0]
   bd83e:	1e10      	subs	r0, r2, #0
   bd840:	bf18      	it	ne
   bd842:	2001      	movne	r0, #1
   bd844:	b002      	add	sp, #8
   bd846:	4770      	bx	lr
   bd848:	4610      	mov	r0, r2
   bd84a:	e7fb      	b.n	bd844 <__ascii_mbtowc+0x16>
   bd84c:	f06f 0001 	mvn.w	r0, #1
   bd850:	e7f8      	b.n	bd844 <__ascii_mbtowc+0x16>
	...

000bd854 <_Balloc>:
   bd854:	b570      	push	{r4, r5, r6, lr}
   bd856:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bd858:	4604      	mov	r4, r0
   bd85a:	460d      	mov	r5, r1
   bd85c:	b976      	cbnz	r6, bd87c <_Balloc+0x28>
   bd85e:	2010      	movs	r0, #16
   bd860:	f7fb f8f2 	bl	b8a48 <malloc>
   bd864:	4602      	mov	r2, r0
   bd866:	6260      	str	r0, [r4, #36]	; 0x24
   bd868:	b920      	cbnz	r0, bd874 <_Balloc+0x20>
   bd86a:	4b18      	ldr	r3, [pc, #96]	; (bd8cc <_Balloc+0x78>)
   bd86c:	4818      	ldr	r0, [pc, #96]	; (bd8d0 <_Balloc+0x7c>)
   bd86e:	2166      	movs	r1, #102	; 0x66
   bd870:	f7fb f92a 	bl	b8ac8 <__assert_func>
   bd874:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bd878:	6006      	str	r6, [r0, #0]
   bd87a:	60c6      	str	r6, [r0, #12]
   bd87c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bd87e:	68f3      	ldr	r3, [r6, #12]
   bd880:	b183      	cbz	r3, bd8a4 <_Balloc+0x50>
   bd882:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bd884:	68db      	ldr	r3, [r3, #12]
   bd886:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bd88a:	b9b8      	cbnz	r0, bd8bc <_Balloc+0x68>
   bd88c:	2101      	movs	r1, #1
   bd88e:	fa01 f605 	lsl.w	r6, r1, r5
   bd892:	1d72      	adds	r2, r6, #5
   bd894:	0092      	lsls	r2, r2, #2
   bd896:	4620      	mov	r0, r4
   bd898:	f000 fc9d 	bl	be1d6 <_calloc_r>
   bd89c:	b160      	cbz	r0, bd8b8 <_Balloc+0x64>
   bd89e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bd8a2:	e00e      	b.n	bd8c2 <_Balloc+0x6e>
   bd8a4:	2221      	movs	r2, #33	; 0x21
   bd8a6:	2104      	movs	r1, #4
   bd8a8:	4620      	mov	r0, r4
   bd8aa:	f000 fc94 	bl	be1d6 <_calloc_r>
   bd8ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bd8b0:	60f0      	str	r0, [r6, #12]
   bd8b2:	68db      	ldr	r3, [r3, #12]
   bd8b4:	2b00      	cmp	r3, #0
   bd8b6:	d1e4      	bne.n	bd882 <_Balloc+0x2e>
   bd8b8:	2000      	movs	r0, #0
   bd8ba:	bd70      	pop	{r4, r5, r6, pc}
   bd8bc:	6802      	ldr	r2, [r0, #0]
   bd8be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bd8c2:	2300      	movs	r3, #0
   bd8c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bd8c8:	e7f7      	b.n	bd8ba <_Balloc+0x66>
   bd8ca:	bf00      	nop
   bd8cc:	000bec21 	.word	0x000bec21
   bd8d0:	000bee76 	.word	0x000bee76

000bd8d4 <_Bfree>:
   bd8d4:	b570      	push	{r4, r5, r6, lr}
   bd8d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bd8d8:	4605      	mov	r5, r0
   bd8da:	460c      	mov	r4, r1
   bd8dc:	b976      	cbnz	r6, bd8fc <_Bfree+0x28>
   bd8de:	2010      	movs	r0, #16
   bd8e0:	f7fb f8b2 	bl	b8a48 <malloc>
   bd8e4:	4602      	mov	r2, r0
   bd8e6:	6268      	str	r0, [r5, #36]	; 0x24
   bd8e8:	b920      	cbnz	r0, bd8f4 <_Bfree+0x20>
   bd8ea:	4b09      	ldr	r3, [pc, #36]	; (bd910 <_Bfree+0x3c>)
   bd8ec:	4809      	ldr	r0, [pc, #36]	; (bd914 <_Bfree+0x40>)
   bd8ee:	218a      	movs	r1, #138	; 0x8a
   bd8f0:	f7fb f8ea 	bl	b8ac8 <__assert_func>
   bd8f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bd8f8:	6006      	str	r6, [r0, #0]
   bd8fa:	60c6      	str	r6, [r0, #12]
   bd8fc:	b13c      	cbz	r4, bd90e <_Bfree+0x3a>
   bd8fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bd900:	6862      	ldr	r2, [r4, #4]
   bd902:	68db      	ldr	r3, [r3, #12]
   bd904:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bd908:	6021      	str	r1, [r4, #0]
   bd90a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bd90e:	bd70      	pop	{r4, r5, r6, pc}
   bd910:	000bec21 	.word	0x000bec21
   bd914:	000bee76 	.word	0x000bee76

000bd918 <__multadd>:
   bd918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd91c:	690d      	ldr	r5, [r1, #16]
   bd91e:	4607      	mov	r7, r0
   bd920:	460c      	mov	r4, r1
   bd922:	461e      	mov	r6, r3
   bd924:	f101 0c14 	add.w	ip, r1, #20
   bd928:	2000      	movs	r0, #0
   bd92a:	f8dc 3000 	ldr.w	r3, [ip]
   bd92e:	b299      	uxth	r1, r3
   bd930:	fb02 6101 	mla	r1, r2, r1, r6
   bd934:	0c1e      	lsrs	r6, r3, #16
   bd936:	0c0b      	lsrs	r3, r1, #16
   bd938:	fb02 3306 	mla	r3, r2, r6, r3
   bd93c:	b289      	uxth	r1, r1
   bd93e:	3001      	adds	r0, #1
   bd940:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bd944:	4285      	cmp	r5, r0
   bd946:	f84c 1b04 	str.w	r1, [ip], #4
   bd94a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bd94e:	dcec      	bgt.n	bd92a <__multadd+0x12>
   bd950:	b30e      	cbz	r6, bd996 <__multadd+0x7e>
   bd952:	68a3      	ldr	r3, [r4, #8]
   bd954:	42ab      	cmp	r3, r5
   bd956:	dc19      	bgt.n	bd98c <__multadd+0x74>
   bd958:	6861      	ldr	r1, [r4, #4]
   bd95a:	4638      	mov	r0, r7
   bd95c:	3101      	adds	r1, #1
   bd95e:	f7ff ff79 	bl	bd854 <_Balloc>
   bd962:	4680      	mov	r8, r0
   bd964:	b928      	cbnz	r0, bd972 <__multadd+0x5a>
   bd966:	4602      	mov	r2, r0
   bd968:	4b0c      	ldr	r3, [pc, #48]	; (bd99c <__multadd+0x84>)
   bd96a:	480d      	ldr	r0, [pc, #52]	; (bd9a0 <__multadd+0x88>)
   bd96c:	21b5      	movs	r1, #181	; 0xb5
   bd96e:	f7fb f8ab 	bl	b8ac8 <__assert_func>
   bd972:	6922      	ldr	r2, [r4, #16]
   bd974:	3202      	adds	r2, #2
   bd976:	f104 010c 	add.w	r1, r4, #12
   bd97a:	0092      	lsls	r2, r2, #2
   bd97c:	300c      	adds	r0, #12
   bd97e:	f7fe fbc9 	bl	bc114 <memcpy>
   bd982:	4621      	mov	r1, r4
   bd984:	4638      	mov	r0, r7
   bd986:	f7ff ffa5 	bl	bd8d4 <_Bfree>
   bd98a:	4644      	mov	r4, r8
   bd98c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bd990:	3501      	adds	r5, #1
   bd992:	615e      	str	r6, [r3, #20]
   bd994:	6125      	str	r5, [r4, #16]
   bd996:	4620      	mov	r0, r4
   bd998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd99c:	000bedf1 	.word	0x000bedf1
   bd9a0:	000bee76 	.word	0x000bee76

000bd9a4 <__s2b>:
   bd9a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd9a8:	460c      	mov	r4, r1
   bd9aa:	4615      	mov	r5, r2
   bd9ac:	461f      	mov	r7, r3
   bd9ae:	2209      	movs	r2, #9
   bd9b0:	3308      	adds	r3, #8
   bd9b2:	4606      	mov	r6, r0
   bd9b4:	fb93 f3f2 	sdiv	r3, r3, r2
   bd9b8:	2100      	movs	r1, #0
   bd9ba:	2201      	movs	r2, #1
   bd9bc:	429a      	cmp	r2, r3
   bd9be:	db09      	blt.n	bd9d4 <__s2b+0x30>
   bd9c0:	4630      	mov	r0, r6
   bd9c2:	f7ff ff47 	bl	bd854 <_Balloc>
   bd9c6:	b940      	cbnz	r0, bd9da <__s2b+0x36>
   bd9c8:	4602      	mov	r2, r0
   bd9ca:	4b19      	ldr	r3, [pc, #100]	; (bda30 <__s2b+0x8c>)
   bd9cc:	4819      	ldr	r0, [pc, #100]	; (bda34 <__s2b+0x90>)
   bd9ce:	21ce      	movs	r1, #206	; 0xce
   bd9d0:	f7fb f87a 	bl	b8ac8 <__assert_func>
   bd9d4:	0052      	lsls	r2, r2, #1
   bd9d6:	3101      	adds	r1, #1
   bd9d8:	e7f0      	b.n	bd9bc <__s2b+0x18>
   bd9da:	9b08      	ldr	r3, [sp, #32]
   bd9dc:	6143      	str	r3, [r0, #20]
   bd9de:	2d09      	cmp	r5, #9
   bd9e0:	f04f 0301 	mov.w	r3, #1
   bd9e4:	6103      	str	r3, [r0, #16]
   bd9e6:	dd16      	ble.n	bda16 <__s2b+0x72>
   bd9e8:	f104 0909 	add.w	r9, r4, #9
   bd9ec:	46c8      	mov	r8, r9
   bd9ee:	442c      	add	r4, r5
   bd9f0:	f818 3b01 	ldrb.w	r3, [r8], #1
   bd9f4:	4601      	mov	r1, r0
   bd9f6:	3b30      	subs	r3, #48	; 0x30
   bd9f8:	220a      	movs	r2, #10
   bd9fa:	4630      	mov	r0, r6
   bd9fc:	f7ff ff8c 	bl	bd918 <__multadd>
   bda00:	45a0      	cmp	r8, r4
   bda02:	d1f5      	bne.n	bd9f0 <__s2b+0x4c>
   bda04:	f1a5 0408 	sub.w	r4, r5, #8
   bda08:	444c      	add	r4, r9
   bda0a:	1b2d      	subs	r5, r5, r4
   bda0c:	1963      	adds	r3, r4, r5
   bda0e:	42bb      	cmp	r3, r7
   bda10:	db04      	blt.n	bda1c <__s2b+0x78>
   bda12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bda16:	340a      	adds	r4, #10
   bda18:	2509      	movs	r5, #9
   bda1a:	e7f6      	b.n	bda0a <__s2b+0x66>
   bda1c:	f814 3b01 	ldrb.w	r3, [r4], #1
   bda20:	4601      	mov	r1, r0
   bda22:	3b30      	subs	r3, #48	; 0x30
   bda24:	220a      	movs	r2, #10
   bda26:	4630      	mov	r0, r6
   bda28:	f7ff ff76 	bl	bd918 <__multadd>
   bda2c:	e7ee      	b.n	bda0c <__s2b+0x68>
   bda2e:	bf00      	nop
   bda30:	000bedf1 	.word	0x000bedf1
   bda34:	000bee76 	.word	0x000bee76

000bda38 <__hi0bits>:
   bda38:	0c03      	lsrs	r3, r0, #16
   bda3a:	041b      	lsls	r3, r3, #16
   bda3c:	b9d3      	cbnz	r3, bda74 <__hi0bits+0x3c>
   bda3e:	0400      	lsls	r0, r0, #16
   bda40:	2310      	movs	r3, #16
   bda42:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bda46:	bf04      	itt	eq
   bda48:	0200      	lsleq	r0, r0, #8
   bda4a:	3308      	addeq	r3, #8
   bda4c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bda50:	bf04      	itt	eq
   bda52:	0100      	lsleq	r0, r0, #4
   bda54:	3304      	addeq	r3, #4
   bda56:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bda5a:	bf04      	itt	eq
   bda5c:	0080      	lsleq	r0, r0, #2
   bda5e:	3302      	addeq	r3, #2
   bda60:	2800      	cmp	r0, #0
   bda62:	db05      	blt.n	bda70 <__hi0bits+0x38>
   bda64:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bda68:	f103 0301 	add.w	r3, r3, #1
   bda6c:	bf08      	it	eq
   bda6e:	2320      	moveq	r3, #32
   bda70:	4618      	mov	r0, r3
   bda72:	4770      	bx	lr
   bda74:	2300      	movs	r3, #0
   bda76:	e7e4      	b.n	bda42 <__hi0bits+0xa>

000bda78 <__lo0bits>:
   bda78:	6803      	ldr	r3, [r0, #0]
   bda7a:	f013 0207 	ands.w	r2, r3, #7
   bda7e:	4601      	mov	r1, r0
   bda80:	d00b      	beq.n	bda9a <__lo0bits+0x22>
   bda82:	07da      	lsls	r2, r3, #31
   bda84:	d423      	bmi.n	bdace <__lo0bits+0x56>
   bda86:	0798      	lsls	r0, r3, #30
   bda88:	bf49      	itett	mi
   bda8a:	085b      	lsrmi	r3, r3, #1
   bda8c:	089b      	lsrpl	r3, r3, #2
   bda8e:	2001      	movmi	r0, #1
   bda90:	600b      	strmi	r3, [r1, #0]
   bda92:	bf5c      	itt	pl
   bda94:	600b      	strpl	r3, [r1, #0]
   bda96:	2002      	movpl	r0, #2
   bda98:	4770      	bx	lr
   bda9a:	b298      	uxth	r0, r3
   bda9c:	b9a8      	cbnz	r0, bdaca <__lo0bits+0x52>
   bda9e:	0c1b      	lsrs	r3, r3, #16
   bdaa0:	2010      	movs	r0, #16
   bdaa2:	b2da      	uxtb	r2, r3
   bdaa4:	b90a      	cbnz	r2, bdaaa <__lo0bits+0x32>
   bdaa6:	3008      	adds	r0, #8
   bdaa8:	0a1b      	lsrs	r3, r3, #8
   bdaaa:	071a      	lsls	r2, r3, #28
   bdaac:	bf04      	itt	eq
   bdaae:	091b      	lsreq	r3, r3, #4
   bdab0:	3004      	addeq	r0, #4
   bdab2:	079a      	lsls	r2, r3, #30
   bdab4:	bf04      	itt	eq
   bdab6:	089b      	lsreq	r3, r3, #2
   bdab8:	3002      	addeq	r0, #2
   bdaba:	07da      	lsls	r2, r3, #31
   bdabc:	d403      	bmi.n	bdac6 <__lo0bits+0x4e>
   bdabe:	085b      	lsrs	r3, r3, #1
   bdac0:	f100 0001 	add.w	r0, r0, #1
   bdac4:	d005      	beq.n	bdad2 <__lo0bits+0x5a>
   bdac6:	600b      	str	r3, [r1, #0]
   bdac8:	4770      	bx	lr
   bdaca:	4610      	mov	r0, r2
   bdacc:	e7e9      	b.n	bdaa2 <__lo0bits+0x2a>
   bdace:	2000      	movs	r0, #0
   bdad0:	4770      	bx	lr
   bdad2:	2020      	movs	r0, #32
   bdad4:	4770      	bx	lr
	...

000bdad8 <__i2b>:
   bdad8:	b510      	push	{r4, lr}
   bdada:	460c      	mov	r4, r1
   bdadc:	2101      	movs	r1, #1
   bdade:	f7ff feb9 	bl	bd854 <_Balloc>
   bdae2:	4602      	mov	r2, r0
   bdae4:	b928      	cbnz	r0, bdaf2 <__i2b+0x1a>
   bdae6:	4b05      	ldr	r3, [pc, #20]	; (bdafc <__i2b+0x24>)
   bdae8:	4805      	ldr	r0, [pc, #20]	; (bdb00 <__i2b+0x28>)
   bdaea:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bdaee:	f7fa ffeb 	bl	b8ac8 <__assert_func>
   bdaf2:	2301      	movs	r3, #1
   bdaf4:	6144      	str	r4, [r0, #20]
   bdaf6:	6103      	str	r3, [r0, #16]
   bdaf8:	bd10      	pop	{r4, pc}
   bdafa:	bf00      	nop
   bdafc:	000bedf1 	.word	0x000bedf1
   bdb00:	000bee76 	.word	0x000bee76

000bdb04 <__multiply>:
   bdb04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdb08:	4691      	mov	r9, r2
   bdb0a:	690a      	ldr	r2, [r1, #16]
   bdb0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bdb10:	429a      	cmp	r2, r3
   bdb12:	bfb8      	it	lt
   bdb14:	460b      	movlt	r3, r1
   bdb16:	460c      	mov	r4, r1
   bdb18:	bfbc      	itt	lt
   bdb1a:	464c      	movlt	r4, r9
   bdb1c:	4699      	movlt	r9, r3
   bdb1e:	6927      	ldr	r7, [r4, #16]
   bdb20:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bdb24:	68a3      	ldr	r3, [r4, #8]
   bdb26:	6861      	ldr	r1, [r4, #4]
   bdb28:	eb07 060a 	add.w	r6, r7, sl
   bdb2c:	42b3      	cmp	r3, r6
   bdb2e:	b085      	sub	sp, #20
   bdb30:	bfb8      	it	lt
   bdb32:	3101      	addlt	r1, #1
   bdb34:	f7ff fe8e 	bl	bd854 <_Balloc>
   bdb38:	b930      	cbnz	r0, bdb48 <__multiply+0x44>
   bdb3a:	4602      	mov	r2, r0
   bdb3c:	4b44      	ldr	r3, [pc, #272]	; (bdc50 <__multiply+0x14c>)
   bdb3e:	4845      	ldr	r0, [pc, #276]	; (bdc54 <__multiply+0x150>)
   bdb40:	f240 115d 	movw	r1, #349	; 0x15d
   bdb44:	f7fa ffc0 	bl	b8ac8 <__assert_func>
   bdb48:	f100 0514 	add.w	r5, r0, #20
   bdb4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bdb50:	462b      	mov	r3, r5
   bdb52:	2200      	movs	r2, #0
   bdb54:	4543      	cmp	r3, r8
   bdb56:	d321      	bcc.n	bdb9c <__multiply+0x98>
   bdb58:	f104 0314 	add.w	r3, r4, #20
   bdb5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bdb60:	f109 0314 	add.w	r3, r9, #20
   bdb64:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bdb68:	9202      	str	r2, [sp, #8]
   bdb6a:	1b3a      	subs	r2, r7, r4
   bdb6c:	3a15      	subs	r2, #21
   bdb6e:	f022 0203 	bic.w	r2, r2, #3
   bdb72:	3204      	adds	r2, #4
   bdb74:	f104 0115 	add.w	r1, r4, #21
   bdb78:	428f      	cmp	r7, r1
   bdb7a:	bf38      	it	cc
   bdb7c:	2204      	movcc	r2, #4
   bdb7e:	9201      	str	r2, [sp, #4]
   bdb80:	9a02      	ldr	r2, [sp, #8]
   bdb82:	9303      	str	r3, [sp, #12]
   bdb84:	429a      	cmp	r2, r3
   bdb86:	d80c      	bhi.n	bdba2 <__multiply+0x9e>
   bdb88:	2e00      	cmp	r6, #0
   bdb8a:	dd03      	ble.n	bdb94 <__multiply+0x90>
   bdb8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bdb90:	2b00      	cmp	r3, #0
   bdb92:	d05a      	beq.n	bdc4a <__multiply+0x146>
   bdb94:	6106      	str	r6, [r0, #16]
   bdb96:	b005      	add	sp, #20
   bdb98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bdb9c:	f843 2b04 	str.w	r2, [r3], #4
   bdba0:	e7d8      	b.n	bdb54 <__multiply+0x50>
   bdba2:	f8b3 a000 	ldrh.w	sl, [r3]
   bdba6:	f1ba 0f00 	cmp.w	sl, #0
   bdbaa:	d024      	beq.n	bdbf6 <__multiply+0xf2>
   bdbac:	f104 0e14 	add.w	lr, r4, #20
   bdbb0:	46a9      	mov	r9, r5
   bdbb2:	f04f 0c00 	mov.w	ip, #0
   bdbb6:	f85e 2b04 	ldr.w	r2, [lr], #4
   bdbba:	f8d9 1000 	ldr.w	r1, [r9]
   bdbbe:	fa1f fb82 	uxth.w	fp, r2
   bdbc2:	b289      	uxth	r1, r1
   bdbc4:	fb0a 110b 	mla	r1, sl, fp, r1
   bdbc8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bdbcc:	f8d9 2000 	ldr.w	r2, [r9]
   bdbd0:	4461      	add	r1, ip
   bdbd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bdbd6:	fb0a c20b 	mla	r2, sl, fp, ip
   bdbda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bdbde:	b289      	uxth	r1, r1
   bdbe0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bdbe4:	4577      	cmp	r7, lr
   bdbe6:	f849 1b04 	str.w	r1, [r9], #4
   bdbea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bdbee:	d8e2      	bhi.n	bdbb6 <__multiply+0xb2>
   bdbf0:	9a01      	ldr	r2, [sp, #4]
   bdbf2:	f845 c002 	str.w	ip, [r5, r2]
   bdbf6:	9a03      	ldr	r2, [sp, #12]
   bdbf8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bdbfc:	3304      	adds	r3, #4
   bdbfe:	f1b9 0f00 	cmp.w	r9, #0
   bdc02:	d020      	beq.n	bdc46 <__multiply+0x142>
   bdc04:	6829      	ldr	r1, [r5, #0]
   bdc06:	f104 0c14 	add.w	ip, r4, #20
   bdc0a:	46ae      	mov	lr, r5
   bdc0c:	f04f 0a00 	mov.w	sl, #0
   bdc10:	f8bc b000 	ldrh.w	fp, [ip]
   bdc14:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bdc18:	fb09 220b 	mla	r2, r9, fp, r2
   bdc1c:	4492      	add	sl, r2
   bdc1e:	b289      	uxth	r1, r1
   bdc20:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bdc24:	f84e 1b04 	str.w	r1, [lr], #4
   bdc28:	f85c 2b04 	ldr.w	r2, [ip], #4
   bdc2c:	f8be 1000 	ldrh.w	r1, [lr]
   bdc30:	0c12      	lsrs	r2, r2, #16
   bdc32:	fb09 1102 	mla	r1, r9, r2, r1
   bdc36:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bdc3a:	4567      	cmp	r7, ip
   bdc3c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bdc40:	d8e6      	bhi.n	bdc10 <__multiply+0x10c>
   bdc42:	9a01      	ldr	r2, [sp, #4]
   bdc44:	50a9      	str	r1, [r5, r2]
   bdc46:	3504      	adds	r5, #4
   bdc48:	e79a      	b.n	bdb80 <__multiply+0x7c>
   bdc4a:	3e01      	subs	r6, #1
   bdc4c:	e79c      	b.n	bdb88 <__multiply+0x84>
   bdc4e:	bf00      	nop
   bdc50:	000bedf1 	.word	0x000bedf1
   bdc54:	000bee76 	.word	0x000bee76

000bdc58 <__pow5mult>:
   bdc58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bdc5c:	4615      	mov	r5, r2
   bdc5e:	f012 0203 	ands.w	r2, r2, #3
   bdc62:	4606      	mov	r6, r0
   bdc64:	460f      	mov	r7, r1
   bdc66:	d007      	beq.n	bdc78 <__pow5mult+0x20>
   bdc68:	4c25      	ldr	r4, [pc, #148]	; (bdd00 <__pow5mult+0xa8>)
   bdc6a:	3a01      	subs	r2, #1
   bdc6c:	2300      	movs	r3, #0
   bdc6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bdc72:	f7ff fe51 	bl	bd918 <__multadd>
   bdc76:	4607      	mov	r7, r0
   bdc78:	10ad      	asrs	r5, r5, #2
   bdc7a:	d03d      	beq.n	bdcf8 <__pow5mult+0xa0>
   bdc7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bdc7e:	b97c      	cbnz	r4, bdca0 <__pow5mult+0x48>
   bdc80:	2010      	movs	r0, #16
   bdc82:	f7fa fee1 	bl	b8a48 <malloc>
   bdc86:	4602      	mov	r2, r0
   bdc88:	6270      	str	r0, [r6, #36]	; 0x24
   bdc8a:	b928      	cbnz	r0, bdc98 <__pow5mult+0x40>
   bdc8c:	4b1d      	ldr	r3, [pc, #116]	; (bdd04 <__pow5mult+0xac>)
   bdc8e:	481e      	ldr	r0, [pc, #120]	; (bdd08 <__pow5mult+0xb0>)
   bdc90:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bdc94:	f7fa ff18 	bl	b8ac8 <__assert_func>
   bdc98:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bdc9c:	6004      	str	r4, [r0, #0]
   bdc9e:	60c4      	str	r4, [r0, #12]
   bdca0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bdca4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bdca8:	b94c      	cbnz	r4, bdcbe <__pow5mult+0x66>
   bdcaa:	f240 2171 	movw	r1, #625	; 0x271
   bdcae:	4630      	mov	r0, r6
   bdcb0:	f7ff ff12 	bl	bdad8 <__i2b>
   bdcb4:	2300      	movs	r3, #0
   bdcb6:	f8c8 0008 	str.w	r0, [r8, #8]
   bdcba:	4604      	mov	r4, r0
   bdcbc:	6003      	str	r3, [r0, #0]
   bdcbe:	f04f 0900 	mov.w	r9, #0
   bdcc2:	07eb      	lsls	r3, r5, #31
   bdcc4:	d50a      	bpl.n	bdcdc <__pow5mult+0x84>
   bdcc6:	4639      	mov	r1, r7
   bdcc8:	4622      	mov	r2, r4
   bdcca:	4630      	mov	r0, r6
   bdccc:	f7ff ff1a 	bl	bdb04 <__multiply>
   bdcd0:	4639      	mov	r1, r7
   bdcd2:	4680      	mov	r8, r0
   bdcd4:	4630      	mov	r0, r6
   bdcd6:	f7ff fdfd 	bl	bd8d4 <_Bfree>
   bdcda:	4647      	mov	r7, r8
   bdcdc:	106d      	asrs	r5, r5, #1
   bdcde:	d00b      	beq.n	bdcf8 <__pow5mult+0xa0>
   bdce0:	6820      	ldr	r0, [r4, #0]
   bdce2:	b938      	cbnz	r0, bdcf4 <__pow5mult+0x9c>
   bdce4:	4622      	mov	r2, r4
   bdce6:	4621      	mov	r1, r4
   bdce8:	4630      	mov	r0, r6
   bdcea:	f7ff ff0b 	bl	bdb04 <__multiply>
   bdcee:	6020      	str	r0, [r4, #0]
   bdcf0:	f8c0 9000 	str.w	r9, [r0]
   bdcf4:	4604      	mov	r4, r0
   bdcf6:	e7e4      	b.n	bdcc2 <__pow5mult+0x6a>
   bdcf8:	4638      	mov	r0, r7
   bdcfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bdcfe:	bf00      	nop
   bdd00:	000befc0 	.word	0x000befc0
   bdd04:	000bec21 	.word	0x000bec21
   bdd08:	000bee76 	.word	0x000bee76

000bdd0c <__lshift>:
   bdd0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bdd10:	460c      	mov	r4, r1
   bdd12:	6849      	ldr	r1, [r1, #4]
   bdd14:	6923      	ldr	r3, [r4, #16]
   bdd16:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bdd1a:	68a3      	ldr	r3, [r4, #8]
   bdd1c:	4607      	mov	r7, r0
   bdd1e:	4691      	mov	r9, r2
   bdd20:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bdd24:	f108 0601 	add.w	r6, r8, #1
   bdd28:	42b3      	cmp	r3, r6
   bdd2a:	db0b      	blt.n	bdd44 <__lshift+0x38>
   bdd2c:	4638      	mov	r0, r7
   bdd2e:	f7ff fd91 	bl	bd854 <_Balloc>
   bdd32:	4605      	mov	r5, r0
   bdd34:	b948      	cbnz	r0, bdd4a <__lshift+0x3e>
   bdd36:	4602      	mov	r2, r0
   bdd38:	4b2a      	ldr	r3, [pc, #168]	; (bdde4 <__lshift+0xd8>)
   bdd3a:	482b      	ldr	r0, [pc, #172]	; (bdde8 <__lshift+0xdc>)
   bdd3c:	f240 11d9 	movw	r1, #473	; 0x1d9
   bdd40:	f7fa fec2 	bl	b8ac8 <__assert_func>
   bdd44:	3101      	adds	r1, #1
   bdd46:	005b      	lsls	r3, r3, #1
   bdd48:	e7ee      	b.n	bdd28 <__lshift+0x1c>
   bdd4a:	2300      	movs	r3, #0
   bdd4c:	f100 0114 	add.w	r1, r0, #20
   bdd50:	f100 0210 	add.w	r2, r0, #16
   bdd54:	4618      	mov	r0, r3
   bdd56:	4553      	cmp	r3, sl
   bdd58:	db37      	blt.n	bddca <__lshift+0xbe>
   bdd5a:	6920      	ldr	r0, [r4, #16]
   bdd5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bdd60:	f104 0314 	add.w	r3, r4, #20
   bdd64:	f019 091f 	ands.w	r9, r9, #31
   bdd68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bdd6c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bdd70:	d02f      	beq.n	bddd2 <__lshift+0xc6>
   bdd72:	f1c9 0e20 	rsb	lr, r9, #32
   bdd76:	468a      	mov	sl, r1
   bdd78:	f04f 0c00 	mov.w	ip, #0
   bdd7c:	681a      	ldr	r2, [r3, #0]
   bdd7e:	fa02 f209 	lsl.w	r2, r2, r9
   bdd82:	ea42 020c 	orr.w	r2, r2, ip
   bdd86:	f84a 2b04 	str.w	r2, [sl], #4
   bdd8a:	f853 2b04 	ldr.w	r2, [r3], #4
   bdd8e:	4298      	cmp	r0, r3
   bdd90:	fa22 fc0e 	lsr.w	ip, r2, lr
   bdd94:	d8f2      	bhi.n	bdd7c <__lshift+0x70>
   bdd96:	1b03      	subs	r3, r0, r4
   bdd98:	3b15      	subs	r3, #21
   bdd9a:	f023 0303 	bic.w	r3, r3, #3
   bdd9e:	3304      	adds	r3, #4
   bdda0:	f104 0215 	add.w	r2, r4, #21
   bdda4:	4290      	cmp	r0, r2
   bdda6:	bf38      	it	cc
   bdda8:	2304      	movcc	r3, #4
   bddaa:	f841 c003 	str.w	ip, [r1, r3]
   bddae:	f1bc 0f00 	cmp.w	ip, #0
   bddb2:	d001      	beq.n	bddb8 <__lshift+0xac>
   bddb4:	f108 0602 	add.w	r6, r8, #2
   bddb8:	3e01      	subs	r6, #1
   bddba:	4638      	mov	r0, r7
   bddbc:	612e      	str	r6, [r5, #16]
   bddbe:	4621      	mov	r1, r4
   bddc0:	f7ff fd88 	bl	bd8d4 <_Bfree>
   bddc4:	4628      	mov	r0, r5
   bddc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bddca:	f842 0f04 	str.w	r0, [r2, #4]!
   bddce:	3301      	adds	r3, #1
   bddd0:	e7c1      	b.n	bdd56 <__lshift+0x4a>
   bddd2:	3904      	subs	r1, #4
   bddd4:	f853 2b04 	ldr.w	r2, [r3], #4
   bddd8:	f841 2f04 	str.w	r2, [r1, #4]!
   bdddc:	4298      	cmp	r0, r3
   bddde:	d8f9      	bhi.n	bddd4 <__lshift+0xc8>
   bdde0:	e7ea      	b.n	bddb8 <__lshift+0xac>
   bdde2:	bf00      	nop
   bdde4:	000bedf1 	.word	0x000bedf1
   bdde8:	000bee76 	.word	0x000bee76

000bddec <__mcmp>:
   bddec:	b530      	push	{r4, r5, lr}
   bddee:	6902      	ldr	r2, [r0, #16]
   bddf0:	690c      	ldr	r4, [r1, #16]
   bddf2:	1b12      	subs	r2, r2, r4
   bddf4:	d10e      	bne.n	bde14 <__mcmp+0x28>
   bddf6:	f100 0314 	add.w	r3, r0, #20
   bddfa:	3114      	adds	r1, #20
   bddfc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bde00:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bde04:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bde08:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bde0c:	42a5      	cmp	r5, r4
   bde0e:	d003      	beq.n	bde18 <__mcmp+0x2c>
   bde10:	d305      	bcc.n	bde1e <__mcmp+0x32>
   bde12:	2201      	movs	r2, #1
   bde14:	4610      	mov	r0, r2
   bde16:	bd30      	pop	{r4, r5, pc}
   bde18:	4283      	cmp	r3, r0
   bde1a:	d3f3      	bcc.n	bde04 <__mcmp+0x18>
   bde1c:	e7fa      	b.n	bde14 <__mcmp+0x28>
   bde1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bde22:	e7f7      	b.n	bde14 <__mcmp+0x28>

000bde24 <__mdiff>:
   bde24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bde28:	460c      	mov	r4, r1
   bde2a:	4606      	mov	r6, r0
   bde2c:	4611      	mov	r1, r2
   bde2e:	4620      	mov	r0, r4
   bde30:	4690      	mov	r8, r2
   bde32:	f7ff ffdb 	bl	bddec <__mcmp>
   bde36:	1e05      	subs	r5, r0, #0
   bde38:	d110      	bne.n	bde5c <__mdiff+0x38>
   bde3a:	4629      	mov	r1, r5
   bde3c:	4630      	mov	r0, r6
   bde3e:	f7ff fd09 	bl	bd854 <_Balloc>
   bde42:	b930      	cbnz	r0, bde52 <__mdiff+0x2e>
   bde44:	4b3a      	ldr	r3, [pc, #232]	; (bdf30 <__mdiff+0x10c>)
   bde46:	4602      	mov	r2, r0
   bde48:	f240 2132 	movw	r1, #562	; 0x232
   bde4c:	4839      	ldr	r0, [pc, #228]	; (bdf34 <__mdiff+0x110>)
   bde4e:	f7fa fe3b 	bl	b8ac8 <__assert_func>
   bde52:	2301      	movs	r3, #1
   bde54:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bde58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bde5c:	bfa4      	itt	ge
   bde5e:	4643      	movge	r3, r8
   bde60:	46a0      	movge	r8, r4
   bde62:	4630      	mov	r0, r6
   bde64:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bde68:	bfa6      	itte	ge
   bde6a:	461c      	movge	r4, r3
   bde6c:	2500      	movge	r5, #0
   bde6e:	2501      	movlt	r5, #1
   bde70:	f7ff fcf0 	bl	bd854 <_Balloc>
   bde74:	b920      	cbnz	r0, bde80 <__mdiff+0x5c>
   bde76:	4b2e      	ldr	r3, [pc, #184]	; (bdf30 <__mdiff+0x10c>)
   bde78:	4602      	mov	r2, r0
   bde7a:	f44f 7110 	mov.w	r1, #576	; 0x240
   bde7e:	e7e5      	b.n	bde4c <__mdiff+0x28>
   bde80:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bde84:	6926      	ldr	r6, [r4, #16]
   bde86:	60c5      	str	r5, [r0, #12]
   bde88:	f104 0914 	add.w	r9, r4, #20
   bde8c:	f108 0514 	add.w	r5, r8, #20
   bde90:	f100 0e14 	add.w	lr, r0, #20
   bde94:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bde98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bde9c:	f108 0210 	add.w	r2, r8, #16
   bdea0:	46f2      	mov	sl, lr
   bdea2:	2100      	movs	r1, #0
   bdea4:	f859 3b04 	ldr.w	r3, [r9], #4
   bdea8:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bdeac:	fa1f f883 	uxth.w	r8, r3
   bdeb0:	fa11 f18b 	uxtah	r1, r1, fp
   bdeb4:	0c1b      	lsrs	r3, r3, #16
   bdeb6:	eba1 0808 	sub.w	r8, r1, r8
   bdeba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bdebe:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bdec2:	fa1f f888 	uxth.w	r8, r8
   bdec6:	1419      	asrs	r1, r3, #16
   bdec8:	454e      	cmp	r6, r9
   bdeca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bdece:	f84a 3b04 	str.w	r3, [sl], #4
   bded2:	d8e7      	bhi.n	bdea4 <__mdiff+0x80>
   bded4:	1b33      	subs	r3, r6, r4
   bded6:	3b15      	subs	r3, #21
   bded8:	f023 0303 	bic.w	r3, r3, #3
   bdedc:	3304      	adds	r3, #4
   bdede:	3415      	adds	r4, #21
   bdee0:	42a6      	cmp	r6, r4
   bdee2:	bf38      	it	cc
   bdee4:	2304      	movcc	r3, #4
   bdee6:	441d      	add	r5, r3
   bdee8:	4473      	add	r3, lr
   bdeea:	469e      	mov	lr, r3
   bdeec:	462e      	mov	r6, r5
   bdeee:	4566      	cmp	r6, ip
   bdef0:	d30e      	bcc.n	bdf10 <__mdiff+0xec>
   bdef2:	f10c 0203 	add.w	r2, ip, #3
   bdef6:	1b52      	subs	r2, r2, r5
   bdef8:	f022 0203 	bic.w	r2, r2, #3
   bdefc:	3d03      	subs	r5, #3
   bdefe:	45ac      	cmp	ip, r5
   bdf00:	bf38      	it	cc
   bdf02:	2200      	movcc	r2, #0
   bdf04:	441a      	add	r2, r3
   bdf06:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bdf0a:	b17b      	cbz	r3, bdf2c <__mdiff+0x108>
   bdf0c:	6107      	str	r7, [r0, #16]
   bdf0e:	e7a3      	b.n	bde58 <__mdiff+0x34>
   bdf10:	f856 8b04 	ldr.w	r8, [r6], #4
   bdf14:	fa11 f288 	uxtah	r2, r1, r8
   bdf18:	1414      	asrs	r4, r2, #16
   bdf1a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bdf1e:	b292      	uxth	r2, r2
   bdf20:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bdf24:	f84e 2b04 	str.w	r2, [lr], #4
   bdf28:	1421      	asrs	r1, r4, #16
   bdf2a:	e7e0      	b.n	bdeee <__mdiff+0xca>
   bdf2c:	3f01      	subs	r7, #1
   bdf2e:	e7ea      	b.n	bdf06 <__mdiff+0xe2>
   bdf30:	000bedf1 	.word	0x000bedf1
   bdf34:	000bee76 	.word	0x000bee76

000bdf38 <__ulp>:
   bdf38:	b082      	sub	sp, #8
   bdf3a:	ed8d 0b00 	vstr	d0, [sp]
   bdf3e:	9b01      	ldr	r3, [sp, #4]
   bdf40:	4912      	ldr	r1, [pc, #72]	; (bdf8c <__ulp+0x54>)
   bdf42:	4019      	ands	r1, r3
   bdf44:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bdf48:	2900      	cmp	r1, #0
   bdf4a:	dd05      	ble.n	bdf58 <__ulp+0x20>
   bdf4c:	2200      	movs	r2, #0
   bdf4e:	460b      	mov	r3, r1
   bdf50:	ec43 2b10 	vmov	d0, r2, r3
   bdf54:	b002      	add	sp, #8
   bdf56:	4770      	bx	lr
   bdf58:	4249      	negs	r1, r1
   bdf5a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bdf5e:	ea4f 5021 	mov.w	r0, r1, asr #20
   bdf62:	f04f 0200 	mov.w	r2, #0
   bdf66:	f04f 0300 	mov.w	r3, #0
   bdf6a:	da04      	bge.n	bdf76 <__ulp+0x3e>
   bdf6c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bdf70:	fa41 f300 	asr.w	r3, r1, r0
   bdf74:	e7ec      	b.n	bdf50 <__ulp+0x18>
   bdf76:	f1a0 0114 	sub.w	r1, r0, #20
   bdf7a:	291e      	cmp	r1, #30
   bdf7c:	bfda      	itte	le
   bdf7e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bdf82:	fa20 f101 	lsrle.w	r1, r0, r1
   bdf86:	2101      	movgt	r1, #1
   bdf88:	460a      	mov	r2, r1
   bdf8a:	e7e1      	b.n	bdf50 <__ulp+0x18>
   bdf8c:	7ff00000 	.word	0x7ff00000

000bdf90 <__b2d>:
   bdf90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bdf92:	6905      	ldr	r5, [r0, #16]
   bdf94:	f100 0714 	add.w	r7, r0, #20
   bdf98:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bdf9c:	1f2e      	subs	r6, r5, #4
   bdf9e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bdfa2:	4620      	mov	r0, r4
   bdfa4:	f7ff fd48 	bl	bda38 <__hi0bits>
   bdfa8:	f1c0 0320 	rsb	r3, r0, #32
   bdfac:	280a      	cmp	r0, #10
   bdfae:	f8df c07c 	ldr.w	ip, [pc, #124]	; be02c <__b2d+0x9c>
   bdfb2:	600b      	str	r3, [r1, #0]
   bdfb4:	dc14      	bgt.n	bdfe0 <__b2d+0x50>
   bdfb6:	f1c0 0e0b 	rsb	lr, r0, #11
   bdfba:	fa24 f10e 	lsr.w	r1, r4, lr
   bdfbe:	42b7      	cmp	r7, r6
   bdfc0:	ea41 030c 	orr.w	r3, r1, ip
   bdfc4:	bf34      	ite	cc
   bdfc6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bdfca:	2100      	movcs	r1, #0
   bdfcc:	3015      	adds	r0, #21
   bdfce:	fa04 f000 	lsl.w	r0, r4, r0
   bdfd2:	fa21 f10e 	lsr.w	r1, r1, lr
   bdfd6:	ea40 0201 	orr.w	r2, r0, r1
   bdfda:	ec43 2b10 	vmov	d0, r2, r3
   bdfde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bdfe0:	42b7      	cmp	r7, r6
   bdfe2:	bf3a      	itte	cc
   bdfe4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bdfe8:	f1a5 0608 	subcc.w	r6, r5, #8
   bdfec:	2100      	movcs	r1, #0
   bdfee:	380b      	subs	r0, #11
   bdff0:	d017      	beq.n	be022 <__b2d+0x92>
   bdff2:	f1c0 0c20 	rsb	ip, r0, #32
   bdff6:	fa04 f500 	lsl.w	r5, r4, r0
   bdffa:	42be      	cmp	r6, r7
   bdffc:	fa21 f40c 	lsr.w	r4, r1, ip
   be000:	ea45 0504 	orr.w	r5, r5, r4
   be004:	bf8c      	ite	hi
   be006:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   be00a:	2400      	movls	r4, #0
   be00c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   be010:	fa01 f000 	lsl.w	r0, r1, r0
   be014:	fa24 f40c 	lsr.w	r4, r4, ip
   be018:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   be01c:	ea40 0204 	orr.w	r2, r0, r4
   be020:	e7db      	b.n	bdfda <__b2d+0x4a>
   be022:	ea44 030c 	orr.w	r3, r4, ip
   be026:	460a      	mov	r2, r1
   be028:	e7d7      	b.n	bdfda <__b2d+0x4a>
   be02a:	bf00      	nop
   be02c:	3ff00000 	.word	0x3ff00000

000be030 <__d2b>:
   be030:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   be034:	4689      	mov	r9, r1
   be036:	2101      	movs	r1, #1
   be038:	ec57 6b10 	vmov	r6, r7, d0
   be03c:	4690      	mov	r8, r2
   be03e:	f7ff fc09 	bl	bd854 <_Balloc>
   be042:	4604      	mov	r4, r0
   be044:	b930      	cbnz	r0, be054 <__d2b+0x24>
   be046:	4602      	mov	r2, r0
   be048:	4b25      	ldr	r3, [pc, #148]	; (be0e0 <__d2b+0xb0>)
   be04a:	4826      	ldr	r0, [pc, #152]	; (be0e4 <__d2b+0xb4>)
   be04c:	f240 310a 	movw	r1, #778	; 0x30a
   be050:	f7fa fd3a 	bl	b8ac8 <__assert_func>
   be054:	f3c7 550a 	ubfx	r5, r7, #20, #11
   be058:	f3c7 0313 	ubfx	r3, r7, #0, #20
   be05c:	bb35      	cbnz	r5, be0ac <__d2b+0x7c>
   be05e:	2e00      	cmp	r6, #0
   be060:	9301      	str	r3, [sp, #4]
   be062:	d028      	beq.n	be0b6 <__d2b+0x86>
   be064:	4668      	mov	r0, sp
   be066:	9600      	str	r6, [sp, #0]
   be068:	f7ff fd06 	bl	bda78 <__lo0bits>
   be06c:	9900      	ldr	r1, [sp, #0]
   be06e:	b300      	cbz	r0, be0b2 <__d2b+0x82>
   be070:	9a01      	ldr	r2, [sp, #4]
   be072:	f1c0 0320 	rsb	r3, r0, #32
   be076:	fa02 f303 	lsl.w	r3, r2, r3
   be07a:	430b      	orrs	r3, r1
   be07c:	40c2      	lsrs	r2, r0
   be07e:	6163      	str	r3, [r4, #20]
   be080:	9201      	str	r2, [sp, #4]
   be082:	9b01      	ldr	r3, [sp, #4]
   be084:	61a3      	str	r3, [r4, #24]
   be086:	2b00      	cmp	r3, #0
   be088:	bf14      	ite	ne
   be08a:	2202      	movne	r2, #2
   be08c:	2201      	moveq	r2, #1
   be08e:	6122      	str	r2, [r4, #16]
   be090:	b1d5      	cbz	r5, be0c8 <__d2b+0x98>
   be092:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   be096:	4405      	add	r5, r0
   be098:	f8c9 5000 	str.w	r5, [r9]
   be09c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   be0a0:	f8c8 0000 	str.w	r0, [r8]
   be0a4:	4620      	mov	r0, r4
   be0a6:	b003      	add	sp, #12
   be0a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   be0ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   be0b0:	e7d5      	b.n	be05e <__d2b+0x2e>
   be0b2:	6161      	str	r1, [r4, #20]
   be0b4:	e7e5      	b.n	be082 <__d2b+0x52>
   be0b6:	a801      	add	r0, sp, #4
   be0b8:	f7ff fcde 	bl	bda78 <__lo0bits>
   be0bc:	9b01      	ldr	r3, [sp, #4]
   be0be:	6163      	str	r3, [r4, #20]
   be0c0:	2201      	movs	r2, #1
   be0c2:	6122      	str	r2, [r4, #16]
   be0c4:	3020      	adds	r0, #32
   be0c6:	e7e3      	b.n	be090 <__d2b+0x60>
   be0c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   be0cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   be0d0:	f8c9 0000 	str.w	r0, [r9]
   be0d4:	6918      	ldr	r0, [r3, #16]
   be0d6:	f7ff fcaf 	bl	bda38 <__hi0bits>
   be0da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   be0de:	e7df      	b.n	be0a0 <__d2b+0x70>
   be0e0:	000bedf1 	.word	0x000bedf1
   be0e4:	000bee76 	.word	0x000bee76

000be0e8 <__ratio>:
   be0e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be0ec:	4688      	mov	r8, r1
   be0ee:	4669      	mov	r1, sp
   be0f0:	4681      	mov	r9, r0
   be0f2:	f7ff ff4d 	bl	bdf90 <__b2d>
   be0f6:	a901      	add	r1, sp, #4
   be0f8:	4640      	mov	r0, r8
   be0fa:	ec55 4b10 	vmov	r4, r5, d0
   be0fe:	f7ff ff47 	bl	bdf90 <__b2d>
   be102:	f8d9 3010 	ldr.w	r3, [r9, #16]
   be106:	f8d8 2010 	ldr.w	r2, [r8, #16]
   be10a:	eba3 0c02 	sub.w	ip, r3, r2
   be10e:	e9dd 3200 	ldrd	r3, r2, [sp]
   be112:	1a9b      	subs	r3, r3, r2
   be114:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   be118:	ec51 0b10 	vmov	r0, r1, d0
   be11c:	2b00      	cmp	r3, #0
   be11e:	bfd6      	itet	le
   be120:	460a      	movle	r2, r1
   be122:	462a      	movgt	r2, r5
   be124:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   be128:	468b      	mov	fp, r1
   be12a:	462f      	mov	r7, r5
   be12c:	bfd4      	ite	le
   be12e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   be132:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   be136:	4620      	mov	r0, r4
   be138:	ee10 2a10 	vmov	r2, s0
   be13c:	465b      	mov	r3, fp
   be13e:	4639      	mov	r1, r7
   be140:	f7fd fdba 	bl	bbcb8 <__aeabi_ddiv>
   be144:	ec41 0b10 	vmov	d0, r0, r1
   be148:	b003      	add	sp, #12
   be14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000be14e <__copybits>:
   be14e:	3901      	subs	r1, #1
   be150:	b570      	push	{r4, r5, r6, lr}
   be152:	1149      	asrs	r1, r1, #5
   be154:	6914      	ldr	r4, [r2, #16]
   be156:	3101      	adds	r1, #1
   be158:	f102 0314 	add.w	r3, r2, #20
   be15c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   be160:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   be164:	1f05      	subs	r5, r0, #4
   be166:	42a3      	cmp	r3, r4
   be168:	d30c      	bcc.n	be184 <__copybits+0x36>
   be16a:	1aa3      	subs	r3, r4, r2
   be16c:	3b11      	subs	r3, #17
   be16e:	f023 0303 	bic.w	r3, r3, #3
   be172:	3211      	adds	r2, #17
   be174:	42a2      	cmp	r2, r4
   be176:	bf88      	it	hi
   be178:	2300      	movhi	r3, #0
   be17a:	4418      	add	r0, r3
   be17c:	2300      	movs	r3, #0
   be17e:	4288      	cmp	r0, r1
   be180:	d305      	bcc.n	be18e <__copybits+0x40>
   be182:	bd70      	pop	{r4, r5, r6, pc}
   be184:	f853 6b04 	ldr.w	r6, [r3], #4
   be188:	f845 6f04 	str.w	r6, [r5, #4]!
   be18c:	e7eb      	b.n	be166 <__copybits+0x18>
   be18e:	f840 3b04 	str.w	r3, [r0], #4
   be192:	e7f4      	b.n	be17e <__copybits+0x30>

000be194 <__any_on>:
   be194:	f100 0214 	add.w	r2, r0, #20
   be198:	6900      	ldr	r0, [r0, #16]
   be19a:	114b      	asrs	r3, r1, #5
   be19c:	4298      	cmp	r0, r3
   be19e:	b510      	push	{r4, lr}
   be1a0:	db11      	blt.n	be1c6 <__any_on+0x32>
   be1a2:	dd0a      	ble.n	be1ba <__any_on+0x26>
   be1a4:	f011 011f 	ands.w	r1, r1, #31
   be1a8:	d007      	beq.n	be1ba <__any_on+0x26>
   be1aa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   be1ae:	fa24 f001 	lsr.w	r0, r4, r1
   be1b2:	fa00 f101 	lsl.w	r1, r0, r1
   be1b6:	428c      	cmp	r4, r1
   be1b8:	d10b      	bne.n	be1d2 <__any_on+0x3e>
   be1ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   be1be:	4293      	cmp	r3, r2
   be1c0:	d803      	bhi.n	be1ca <__any_on+0x36>
   be1c2:	2000      	movs	r0, #0
   be1c4:	bd10      	pop	{r4, pc}
   be1c6:	4603      	mov	r3, r0
   be1c8:	e7f7      	b.n	be1ba <__any_on+0x26>
   be1ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   be1ce:	2900      	cmp	r1, #0
   be1d0:	d0f5      	beq.n	be1be <__any_on+0x2a>
   be1d2:	2001      	movs	r0, #1
   be1d4:	e7f6      	b.n	be1c4 <__any_on+0x30>

000be1d6 <_calloc_r>:
   be1d6:	b513      	push	{r0, r1, r4, lr}
   be1d8:	434a      	muls	r2, r1
   be1da:	4611      	mov	r1, r2
   be1dc:	9201      	str	r2, [sp, #4]
   be1de:	f7fa fc63 	bl	b8aa8 <_malloc_r>
   be1e2:	4604      	mov	r4, r0
   be1e4:	b118      	cbz	r0, be1ee <_calloc_r+0x18>
   be1e6:	9a01      	ldr	r2, [sp, #4]
   be1e8:	2100      	movs	r1, #0
   be1ea:	f7fd ffbb 	bl	bc164 <memset>
   be1ee:	4620      	mov	r0, r4
   be1f0:	b002      	add	sp, #8
   be1f2:	bd10      	pop	{r4, pc}
   be1f4:	0000      	movs	r0, r0
	...

000be1f8 <nan>:
   be1f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; be200 <nan+0x8>
   be1fc:	4770      	bx	lr
   be1fe:	bf00      	nop
   be200:	00000000 	.word	0x00000000
   be204:	7ff80000 	.word	0x7ff80000

000be208 <nanf>:
   be208:	ed9f 0a01 	vldr	s0, [pc, #4]	; be210 <nanf+0x8>
   be20c:	4770      	bx	lr
   be20e:	bf00      	nop
   be210:	7fc00000 	.word	0x7fc00000

000be214 <__ascii_wctomb>:
   be214:	b149      	cbz	r1, be22a <__ascii_wctomb+0x16>
   be216:	2aff      	cmp	r2, #255	; 0xff
   be218:	bf85      	ittet	hi
   be21a:	238a      	movhi	r3, #138	; 0x8a
   be21c:	6003      	strhi	r3, [r0, #0]
   be21e:	700a      	strbls	r2, [r1, #0]
   be220:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   be224:	bf98      	it	ls
   be226:	2001      	movls	r0, #1
   be228:	4770      	bx	lr
   be22a:	4608      	mov	r0, r1
   be22c:	4770      	bx	lr
	...

000be230 <__aeabi_d2lz>:
   be230:	b538      	push	{r3, r4, r5, lr}
   be232:	2200      	movs	r2, #0
   be234:	2300      	movs	r3, #0
   be236:	4604      	mov	r4, r0
   be238:	460d      	mov	r5, r1
   be23a:	f7fd fe85 	bl	bbf48 <__aeabi_dcmplt>
   be23e:	b928      	cbnz	r0, be24c <__aeabi_d2lz+0x1c>
   be240:	4620      	mov	r0, r4
   be242:	4629      	mov	r1, r5
   be244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   be248:	f7fd bf2c 	b.w	bc0a4 <__aeabi_d2ulz>
   be24c:	4620      	mov	r0, r4
   be24e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   be252:	f7fd ff27 	bl	bc0a4 <__aeabi_d2ulz>
   be256:	4240      	negs	r0, r0
   be258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   be25c:	bd38      	pop	{r3, r4, r5, pc}
   be25e:	bf00      	nop

000be260 <dynalib_user>:
   be260:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   be270:	0000 0000 6162 6973 5f63 7473 6972 676e     ....basic_string
   be280:	3a3a 4d5f 635f 6e6f 7473 7572 7463 6e20     ::_M_construct n
   be290:	6c75 206c 6f6e 2074 6176 696c 0064 720a     ull not valid..r
   be2a0:	7165 6575 7473 6320 646f 2065 2c31 6120     equest code 1, a
   be2b0:	6464 6572 7373 203a 7400 6172 736e 696d     ddress: .transmi
   be2c0:	7373 6f69 206e 6572 6963 7665 6465 6620     ssion recieved f
   be2d0:	6f72 3a6d 0020 6564 6976 6563 6920 3a64     rom: .device id:
   be2e0:	0020 7274 6e61 6d73 7369 6973 6e6f 7320      .transmission s
   be2f0:	6e65 2074 6f74 203a 7200 7165 6575 7473     ent to: .request
   be300:	6320 646f 2065 2c32 6120 6464 6572 7373      code 2, address
   be310:	203a 6300 6e6f 6c66 6369 2074 6576 6972     : .conflict veri
   be320:	6966 6163 6974 6e6f 203a 0a00 6f43 6e6e     fication: ..Conn
   be330:	6365 6574 2064 6f74 203a 6300 6e61 6f6e     ected to: .canno
   be340:	2074 7263 6165 6574 7320 6474 3a3a 6576     t create std::ve
   be350:	7463 726f 6c20 7261 6567 2072 6874 6e61     ctor larger than
   be360:	6d20 7861 735f 7a69 2865 0029 6b6f 7700      max_size().ok.w
   be370:	6669 3a69 2c00 5300 4953 3a44 2520 2c73     ifi:.,.SSID: %s,
   be380:	7020 7361 7773 726f 3a64 2520 0073 6963      password: %s.ci
   be390:	7974 003a 6e69 6f63 7272 6365 2074 6963     ty:.incorrect ci
   be3a0:	7974 6e20 6d61 0065 6963 7974 203a 7325     ty name.city: %s
   be3b0:	6300 6c6f 726f 003a 6963 7974 6e20 746f     .color:.city not
   be3c0:	7320 7465 6700 6572 6e65 0031 7267 6565      set.green1.gree
   be3d0:	006e 7267 6565 206e 6966 0078 7267 6565     n.green fix.gree
   be3e0:	326e 6900 636e 726f 6572 7463 7220 6961     n2.incorrect rai
   be3f0:	776c 7961 6320 6c6f 726f 4200 454c 6620     lway color.BLE f
   be400:	6e69 7369 6568 0064 6572 6573 0074 6572     inished.reset.re
   be410:	0064 4646 3030 3030 3000 3041 3030 0030     d.FF0000.0A0000.
   be420:	6c62 6575 3000 3030 4630 0046 3030 3030     blue.0000FF.0000
   be430:	4130 6200 6f72 6e77 4600 4646 3046 0030     0A.brown.FFFF00.
   be440:	4130 4130 3030 3000 4630 3046 0030 3030     0A0A00.00FF00.00
   be450:	4130 3030 6f00 6172 676e 0065 4646 3038     0A00.orange.FF80
   be460:	3030 3000 3041 3035 0030 7570 7072 656c     00.0A0500.purple
   be470:	3200 3030 4630 0046 3230 3030 4130 7000     .2000FF.02000A.p
   be480:	6e69 006b 4646 3038 3038 3000 3041 3035     ink.FF8080.0A050
   be490:	0035 3231 4133 3100 3332 0042 3231 4333     5.123A.123B.123C
   be4a0:	7400 0078 7872 7400 6572 2e6b 6874 7765     .tx.rx.trek.thew
   be4b0:	6c63 632e 6d6f 6300 6174 6d00 7462 0061     cl.com.cta.mbta.
   be4c0:	6f6c 706f 7320 6174 7472 2500 2c69 0020     loop start.%i, .
   be4d0:	6c2f 6f6f 2d70 7274 6361 736b 002f 6c3f     /loop-tracks/.?l
   be4e0:	6e69 7365 003d 4547 0054 6170 7372 6e69     ines=.GET.parsin
   be4f0:	0067 6170 7372 6e69 2067 6166 6c69 6465     g.parsing failed
   be500:	6c00 6e69 7365 7400 6172 6e69 0073 656e     .lines.trains.ne
   be510:	7478 735f 6f74 0070 6564 7473 6e69 7461     xt_stop.destinat
   be520:	6f69 006e 6964 6572 7463 6f69 006e 616c     ion.direction.la
   be530:	6974 7574 6564 6c00 6e6f 6967 7574 6564     titude.longitude
   be540:	6200 6572 6b61 2500 2073 6172 6c69 7020     .break.%s rail p
   be550:	7261 2074 6925 203a 0000 0000               art %i: ....

000be55c <_ZTV16JsonParserStaticILj10000ELj1000EE>:
	...
   be564:	40b9 000b 40cd 000b 6341 6563 7470 2f00     .@...@..Accept./
   be574:	2f2a 0000 0019 0000 0003 0000 0007 0000     */..............
   be584:	0005 0000 000c 0000 0008 0000 0005 0000     ................
   be594:	0005 0000 0005 0000 0019 0000 0005 0000     ................
   be5a4:	000f 0000 000a 0000 000a 0000 000a 0000     ................
   be5b4:	000a 0000 0014 0000 0000 0000 0028 0000     ............(...
   be5c4:	0000 0000 0002 0000 0006 0000 0000 0000     ................
   be5d4:	0000 0000 000f 0000 000a 0000 000a 0000     ................
   be5e4:	000f 0000 000f 0000 000f 0000 0014 0000     ................
   be5f4:	0000 0000 0001 0000 0003 0000 0000 0000     ................
   be604:	0000 0000 000c 0000 0007 0000 0001 0000     ................
   be614:	000a 0000 000a 0000 000a 0000 000a 0000     ................
   be624:	000c 0000 0000 0000 0028 0000 0008 0000     ........(.......
   be634:	0003 0000 0007 0000 0001 0000 0003 0000     ................
   be644:	0007 0000 0007 0000 0006 0000 000a 0000     ................
   be654:	000a 0000 000a 0000 000a 0000 000e 0000     ................
   be664:	0000 0000 0028 0000 0006 0000 0003 0000     ....(...........
   be674:	0007 0000 0002 0000 0003 0000 0005 0000     ................
   be684:	000a 0000 0005 0000 000a 0000 000a 0000     ................
   be694:	000a 0000 0014 0000 000a 0000 000a 0000     ................
   be6a4:	000a 0000 0005 0000 000a 0000 000a 0000     ................
   be6b4:	000a 0000 0005 0000 0005 0000 0005 0000     ................
   be6c4:	0005 0000 0005 0000 0005 0000 0005 0000     ................
   be6d4:	4820 5454 2f50 2e31 0d30 000a 6c63 736f      HTTP/1.0...clos
   be6e4:	0065 6f43 6e6e 6365 6974 6e6f 4800 534f     e.Connection.HOS
   be6f4:	0054 6f43 746e 6e65 2d74 654c 676e 6874     T.Content-Length
   be704:	5000 534f 0054 0a0d 0a0d 2500 3430 0078     .POST......%04x.

000be714 <_ZTV10JsonBuffer>:
	...
   be71c:	7c05 000b 7c21 000b                         .|..!|..

000be724 <_ZTV10JsonParser>:
	...
   be72c:	7c35 000b 7c59 000b                         5|..Y|..

000be734 <_ZTV13JsonReference>:
	...
   be73c:	7bf5 000b 7bf7 000b 7341 6573 7472 6f69     .{...{..Assertio
   be74c:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   be75c:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   be76c:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   be77c:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   be78c:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   be79c:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   be7ac:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   be7bc:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   be7cc:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   be7dc:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   be7ec:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   be7fc:	6976 6563 002e 6f43 6e6e 6365 6574 2064     vice..Connected 
   be80c:	7962 4320 6e65 7274 6c61 6420 7665 6369     by Central devic
   be81c:	2e65 4400 7369 6f63 6e6e 6365 6574 2064     e..Disconnected 
   be82c:	7962 7220 6d65 746f 2065 6564 6976 6563     by remote device
   be83c:	002e 7544 6c70 6369 7461 6465 6320 6168     ..Duplicated cha
   be84c:	6172 7463 7265 7369 6974 2063 6163 6e6e     racteristic cann
   be85c:	746f 6220 2065 6461 6564 2e64 4600 6961     ot be added..Fai
   be86c:	656c 2064 6f74 6120 7070 6e65 2064 6f6c     led to append lo
   be87c:	6163 206c 6863 7261 6361 6574 6972 7473     cal characterist
   be88c:	6369 002e                                   ic..

000be890 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be898:	8af5 000b 8b59 000b 8c3f 000b 8b83 000b     ....Y...?.......
   be8a8:	8af9 000b                                   ....

000be8ac <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be8b4:	8af1 000b 8b67 000b 8af3 000b 8b89 000b     ....g...........
   be8c4:	8b19 000b                                   ....

000be8c8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be8d0:	8aef 000b 8b75 000b 93f9 000b 8b8f 000b     ....u...........
   be8e0:	8b39 000b                                   9...

000be8e4 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   be8f0:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000be902 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   be902:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000be912 <_ZN8particle7BleUuid9BASE_UUIDE>:
   be912:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000be924 <_ZTVN5spark13EthernetClassE>:
	...
   be92c:	9ea7 000b 9e9d 000b 9e93 000b 9e89 000b     ................
   be93c:	9e7d 000b 9e71 000b a12d 000b a135 000b     }...q...-...5...
   be94c:	9e65 000b 9e5d 000b 9e53 000b 9e49 000b     e...]...S...I...
   be95c:	a165 000b                                   e...

000be960 <_ZTV7TwoWire>:
	...
   be968:	9ec5 000b 9f0f 000b 9ee7 000b 9ec7 000b     ................
   be978:	9eef 000b 9ef7 000b 9eff 000b 9f07 000b     ................

000be988 <_ZTV9IPAddress>:
	...
   be990:	9fd1 000b 9fc1 000b 9fc3 000b 7061 0070     ............app.

000be9a0 <_ZTVN5spark12NetworkClassE>:
	...
   be9a8:	a0ed 000b a0f7 000b a101 000b a10b 000b     ................
   be9b8:	a115 000b a121 000b a12d 000b a135 000b     ....!...-...5...
   be9c8:	a13d 000b a149 000b a151 000b a15b 000b     =...I...Q...[...
   be9d8:	a165 000b 6977 6972 676e 7200 6365 2076     e...wiring.recv 
   be9e8:	7265 6f72 2072 203d 6425 0000               error = %d..

000be9f4 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be9fc:	a70d 000b a731 000b ac63 000b a73f 000b     ....1...c...?...
   bea0c:	a711 000b                                   ....

000bea10 <_ZTV9TCPClient>:
	...
   bea18:	a7bd 000b a7f1 000b a689 000b a6a3 000b     ................
   bea28:	aaf9 000b a6cd 000b a96f 000b a701 000b     ........o.......
   bea38:	aa01 000b a841 000b a99d 000b abad 000b     ....A...........
   bea48:	a93d 000b a703 000b a6b5 000b a745 000b     =...........E...
   bea58:	a821 000b 5925 252d 2d6d 6425 2554 3a48     !...%Y-%m-%dT%H:
   bea68:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000bea78 <_ZTV11USARTSerial>:
	...
   bea80:	ac7d 000b ace9 000b acc1 000b a251 000b     }...........Q...
   bea90:	ac91 000b acad 000b ac9f 000b acbb 000b     ................
   beaa0:	ac7f 000b ac83 000b                         ........

000beaa8 <_ZTV9USBSerial>:
	...
   beab0:	ad27 000b ad8f 000b ad65 000b a251 000b     '.......e...Q...
   beac0:	ad57 000b ad29 000b ad39 000b ad89 000b     W...)...9.......
   bead0:	ad49 000b ad21 000b                         I...!...

000bead8 <_ZTVN5spark9WiFiClassE>:
	...
   beae0:	ae87 000b ae7d 000b ae73 000b ae29 000b     ....}...s...)...
   beaf0:	ae67 000b ae5b 000b a12d 000b a135 000b     g...[...-...5...
   beb00:	ae4f 000b ae47 000b ae3d 000b ae33 000b     O...G...=...3...
   beb10:	a165 000b                                   e...

000beb14 <_ZSt7nothrow>:
	...

000beb15 <_ZTSSt19_Sp_make_shared_tag>:
   beb15:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   beb25:	6572 5f64 6174 0067 0000                     red_tag....

000beb30 <_ZTISt19_Sp_make_shared_tag>:
   beb30:	eb88 000b eb15 000b 6162 6973 5f63 7473     ........basic_st
   beb40:	6972 676e 3a3a 4d5f 635f 6572 7461 0065     ring::_M_create.

000beb50 <_ZTIN10__cxxabiv117__class_type_infoE>:
   beb50:	ebe8 000b eb5c 000b ec0c 000b               ....\.......

000beb5c <_ZTSN10__cxxabiv117__class_type_infoE>:
   beb5c:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   beb6c:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   beb7c:	0045 0000                                   E...

000beb80 <_ZTVN10__cxxabiv117__class_type_infoE>:
   beb80:	0000 0000 eb50 000b b27d 000b b291 000b     ....P...}.......
   beb90:	b425 000b b425 000b b2fb 000b b23d 000b     %...%.......=...
   beba0:	b2e3 000b b2a5 000b b26f 000b               ........o...

000bebac <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bebac:	ebe8 000b ebb8 000b eb50 000b               ........P...

000bebb8 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bebb8:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bebc8:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bebd8:	666e 456f 0000 0000                         nfoE....

000bebe0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bebe0:	0000 0000 ebac 000b b325 000b b339 000b     ........%...9...
   bebf0:	b425 000b b425 000b b2fb 000b b23d 000b     %...%.......=...
   bec00:	b3f9 000b b385 000b b34d 000b               ........M...

000bec0c <_ZTISt9type_info>:
   bec0c:	eb88 000b ec14 000b                         ........

000bec14 <_ZTSSt9type_info>:
   bec14:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bec24:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bec34:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   bec44:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bec54:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bec64:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bec74:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bec84:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   bec94:	6e69 7469 0079 6e61 0000 0000               inity.an....

000beca0 <fpi.1>:
   beca0:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   becb0:	0000 0000                                   ....

000becb4 <fpinan.0>:
   becb4:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   becc4:	0000 0000                                   ....

000becc8 <tinytens>:
   becc8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   becd8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bece8:	6f43 64ac 0628 1168                         Co.d(.h.

000becf0 <_ctype_>:
   becf0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bed00:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bed10:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bed20:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bed30:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bed40:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bed50:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bed60:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bed70:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bedf0:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bee00:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   bee10:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   bee20:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   bee30:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   bee40:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   bee50:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   bee60:	632e 0000                                   .c..

000bee64 <_C_numeric_locale>:
   bee64:	e88e 000b e70e 000b 5134 2003 4f50 4953     ........4Q. POSI
   bee74:	0058 742f 706d 6a2f 6e65 696b 736e 472d     X./tmp/jenkins-G
   bee84:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   bee94:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   beea4:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   beeb4:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   beec4:	696c 2f62 706d 6572 2e63 0063               lib/mprec.c.

000beed0 <__mprec_bigtens>:
   beed0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   beee0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   beef0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000beef8 <__mprec_tens>:
   beef8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bef08:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bef18:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bef28:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bef38:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bef48:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bef58:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bef68:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bef78:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bef88:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bef98:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   befa8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   befb8:	9db4 79d9 7843 44ea                         ...yCx.D

000befc0 <p05.0>:
   befc0:	0005 0000 0019 0000 007d 0000               ........}...

000befcc <link_const_variable_data_end>:
   befcc:	000b6f31 	.word	0x000b6f31
   befd0:	000b9e39 	.word	0x000b9e39
   befd4:	000b9eb1 	.word	0x000b9eb1
   befd8:	000ba0dd 	.word	0x000ba0dd
   befdc:	000ba23d 	.word	0x000ba23d
   befe0:	000ba379 	.word	0x000ba379
   befe4:	000ba665 	.word	0x000ba665
   befe8:	000bac69 	.word	0x000bac69
   befec:	000bae91 	.word	0x000bae91
