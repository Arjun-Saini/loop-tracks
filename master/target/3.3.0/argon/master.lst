
/Users/sainihome/Documents/GitHub/loop-tracks/master/target/3.3.0/argon/master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000bb80  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bfba0  000bfba0  0000fba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bfbc4  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f8  20035040  000bfbc8  00025040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000095b8  20035238  20035238  00035238  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000bfdc0  000bfdc0  0002fdc0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bfde8  000bfde8  0002fde8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0015e8be  00000000  00000000  0002fdec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00013b18  00000000  00000000  0018e6aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004fb51  00000000  00000000  001a21c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003278  00000000  00000000  001f1d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000dc20  00000000  00000000  001f4f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039292  00000000  00000000  00202bab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004a2b4  00000000  00000000  0023be3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015a7bd  00000000  00000000  002860f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000ae84  00000000  00000000  003e08b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f008 fdb3 	bl	bcb9c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f008 fdd5 	bl	bcbec <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	20035040 	.word	0x20035040
   b404c:	000bfbc8 	.word	0x000bfbc8
   b4050:	20035238 	.word	0x20035238
   b4054:	20035238 	.word	0x20035238
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f007 fd19 	bl	bba98 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bfb74 	.word	0x000bfb74
   b4080:	000bfb98 	.word	0x000bfb98

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f002 bf0e 	b.w	b6ea4 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f003 f87f 	bl	b718c <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f007 bcb9 	b.w	bba08 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f005 ba17 	b.w	b94c8 <malloc>

000b409a <_Znaj>:
   b409a:	f005 ba15 	b.w	b94c8 <malloc>

000b409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409e:	f005 ba1b 	b.w	b94d8 <free>

000b40a2 <_ZdaPv>:
   b40a2:	f005 ba19 	b.w	b94d8 <free>

000b40a6 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a6:	f005 ba17 	b.w	b94d8 <free>

000b40aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40aa:	7800      	ldrb	r0, [r0, #0]
   b40ac:	fab0 f080 	clz	r0, r0
   b40b0:	0940      	lsrs	r0, r0, #5
   b40b2:	4770      	bx	lr

000b40b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b4:	2301      	movs	r3, #1
   b40b6:	7003      	strb	r3, [r0, #0]
   b40b8:	4770      	bx	lr
	...

000b40bc <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40bc:	b510      	push	{r4, lr}
   b40be:	4b03      	ldr	r3, [pc, #12]	; (b40cc <_ZN16JsonParserStaticILj10000ELj1000EED1Ev+0x10>)
   b40c0:	6003      	str	r3, [r0, #0]
   b40c2:	4604      	mov	r4, r0
   b40c4:	f003 ff22 	bl	b7f0c <_ZN10JsonParserD1Ev>
   b40c8:	4620      	mov	r0, r4
   b40ca:	bd10      	pop	{r4, pc}
   b40cc:	000bf0f0 	.word	0x000bf0f0

000b40d0 <_ZN16JsonParserStaticILj10000ELj1000EED0Ev>:
   b40d0:	b510      	push	{r4, lr}
   b40d2:	4604      	mov	r4, r0
   b40d4:	f7ff fff2 	bl	b40bc <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
   b40d8:	4620      	mov	r0, r4
   b40da:	f246 51bc 	movw	r1, #26044	; 0x65bc
   b40de:	f7ff ffe2 	bl	b40a6 <_ZdlPvj>
   b40e2:	4620      	mov	r0, r4
   b40e4:	bd10      	pop	{r4, pc}
	...

000b40e8 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>:

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
   b40e8:	b508      	push	{r3, lr}
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b40ea:	4603      	mov	r3, r0
   b40ec:	b150      	cbz	r0, b4104 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x1c>
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      _GLIBCXX_NODISCARD _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {
	if (__n > this->_M_max_size())
   b40ee:	4a06      	ldr	r2, [pc, #24]	; (b4108 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x20>)
   b40f0:	4290      	cmp	r0, r2
   b40f2:	d901      	bls.n	b40f8 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b40f4:	f007 fd6a 	bl	bbbcc <_ZSt17__throw_bad_allocv>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b40f8:	200c      	movs	r0, #12
   b40fa:	4358      	muls	r0, r3
      }
   b40fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4100:	f7ff bfc9 	b.w	b4096 <_Znwj>
   b4104:	bd08      	pop	{r3, pc}
   b4106:	bf00      	nop
   b4108:	0aaaaaaa 	.word	0x0aaaaaaa

000b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>:

      pointer
      _M_local_data()
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b410c:	f100 0308 	add.w	r3, r0, #8
#if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
   b4110:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4112:	4604      	mov	r4, r0
	: allocator_type(__a), _M_p(__dat) { }
   b4114:	6003      	str	r3, [r0, #0]
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b4116:	460d      	mov	r5, r1
   b4118:	b1d9      	cbz	r1, b4152 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x46>
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   b411a:	4608      	mov	r0, r1
   b411c:	f008 fdae 	bl	bcc7c <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
   b4120:	280f      	cmp	r0, #15
   b4122:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b4126:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b4128:	d907      	bls.n	b413a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x2e>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   b412a:	2200      	movs	r2, #0
   b412c:	a901      	add	r1, sp, #4
   b412e:	4620      	mov	r0, r4
   b4130:	f007 fd62 	bl	bbbf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b4134:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4136:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4138:	60a3      	str	r3, [r4, #8]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b413a:	4632      	mov	r2, r6
   b413c:	4629      	mov	r1, r5
   b413e:	6820      	ldr	r0, [r4, #0]
   b4140:	f007 fd95 	bl	bbc6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   b4144:	9b01      	ldr	r3, [sp, #4]
      { __c1 = __c2; }
   b4146:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4148:	6063      	str	r3, [r4, #4]
   b414a:	2100      	movs	r1, #0
   b414c:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b414e:	b002      	add	sp, #8
   b4150:	bd70      	pop	{r4, r5, r6, pc}
	  std::__throw_logic_error(__N("basic_string::"
   b4152:	4801      	ldr	r0, [pc, #4]	; (b4158 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x4c>)
   b4154:	f007 fd3d 	bl	bbbd2 <_ZSt19__throw_logic_errorPKc>
   b4158:	000becfc 	.word	0x000becfc

000b415c <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b415c:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b415e:	4603      	mov	r3, r0
   b4160:	b150      	cbz	r0, b4178 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0+0x1c>
	if (__n > this->_M_max_size())
   b4162:	4a06      	ldr	r2, [pc, #24]	; (b417c <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0+0x20>)
   b4164:	4290      	cmp	r0, r2
   b4166:	d901      	bls.n	b416c <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b4168:	f007 fd30 	bl	bbbcc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b416c:	206c      	movs	r0, #108	; 0x6c
   b416e:	4358      	muls	r0, r3
      }
   b4170:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4174:	f7ff bf8f 	b.w	b4096 <_Znwj>
   b4178:	bd08      	pop	{r3, pc}
   b417a:	bf00      	nop
   b417c:	012f684b 	.word	0x012f684b

000b4180 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b4180:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4182:	4603      	mov	r3, r0
   b4184:	b150      	cbz	r0, b419c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x1c>
	if (__n > this->_M_max_size())
   b4186:	4a06      	ldr	r2, [pc, #24]	; (b41a0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x20>)
   b4188:	4290      	cmp	r0, r2
   b418a:	d901      	bls.n	b4190 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b418c:	f007 fd1e 	bl	bbbcc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4190:	2018      	movs	r0, #24
   b4192:	4358      	muls	r0, r3
      }
   b4194:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4198:	f7ff bf7d 	b.w	b4096 <_Znwj>
   b419c:	bd08      	pop	{r3, pc}
   b419e:	bf00      	nop
   b41a0:	05555555 	.word	0x05555555

000b41a4 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b41a4:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b41a6:	b148      	cbz	r0, b41bc <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b41a8:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   b41ac:	d301      	bcc.n	b41b2 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b41ae:	f007 fd0d 	bl	bbbcc <_ZSt17__throw_bad_allocv>
      }
   b41b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b41b6:	0080      	lsls	r0, r0, #2
   b41b8:	f7ff bf6d 	b.w	b4096 <_Znwj>
   b41bc:	bd08      	pop	{r3, pc}

000b41be <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b41be:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b41c0:	b148      	cbz	r0, b41d6 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b41c2:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
   b41c6:	d301      	bcc.n	b41cc <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b41c8:	f007 fd00 	bl	bbbcc <_ZSt17__throw_bad_allocv>
      }
   b41cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b41d0:	00c0      	lsls	r0, r0, #3
   b41d2:	f7ff bf60 	b.w	b4096 <_Znwj>
   b41d6:	bd08      	pop	{r3, pc}

000b41d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>:
      basic_string(const basic_string& __str)
   b41d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b41da:	f100 0308 	add.w	r3, r0, #8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b41de:	6003      	str	r3, [r0, #0]

      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      size_type
      length() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
   b41e0:	e9d1 5300 	ldrd	r5, r3, [r1]
      basic_string(const basic_string& __str)
   b41e4:	4604      	mov	r4, r0
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b41e6:	18ee      	adds	r6, r5, r3
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   b41e8:	b91d      	cbnz	r5, b41f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
   b41ea:	b116      	cbz	r6, b41f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
	  std::__throw_logic_error(__N("basic_string::"
   b41ec:	480c      	ldr	r0, [pc, #48]	; (b4220 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x48>)
   b41ee:	f007 fcf0 	bl	bbbd2 <_ZSt19__throw_logic_errorPKc>
	if (__dnew > size_type(_S_local_capacity))
   b41f2:	2b0f      	cmp	r3, #15
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b41f4:	9301      	str	r3, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b41f6:	d907      	bls.n	b4208 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x30>
	    _M_data(_M_create(__dnew, size_type(0)));
   b41f8:	2200      	movs	r2, #0
   b41fa:	a901      	add	r1, sp, #4
   b41fc:	4620      	mov	r0, r4
   b41fe:	f007 fcfb 	bl	bbbf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b4202:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4204:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4206:	60a3      	str	r3, [r4, #8]
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b4208:	4632      	mov	r2, r6
   b420a:	4629      	mov	r1, r5
   b420c:	6820      	ldr	r0, [r4, #0]
   b420e:	f007 fd29 	bl	bbc64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	_M_set_length(__dnew);
   b4212:	9b01      	ldr	r3, [sp, #4]
   b4214:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4216:	6063      	str	r3, [r4, #4]
   b4218:	2100      	movs	r1, #0
   b421a:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b421c:	b002      	add	sp, #8
   b421e:	bd70      	pop	{r4, r5, r6, pc}
   b4220:	000becfc 	.word	0x000becfc

000b4224 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4224:	6803      	ldr	r3, [r0, #0]
   b4226:	b2c9      	uxtb	r1, r1
   b4228:	689b      	ldr	r3, [r3, #8]
   b422a:	4718      	bx	r3

000b422c <_ZN5Print5writeEPKc.isra.0>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b422c:	b513      	push	{r0, r1, r4, lr}
   b422e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
   b4230:	b161      	cbz	r1, b424c <_ZN5Print5writeEPKc.isra.0+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4232:	4608      	mov	r0, r1
   b4234:	9101      	str	r1, [sp, #4]
   b4236:	f008 fd21 	bl	bcc7c <strlen>
   b423a:	6823      	ldr	r3, [r4, #0]
   b423c:	9901      	ldr	r1, [sp, #4]
   b423e:	68db      	ldr	r3, [r3, #12]
   b4240:	4602      	mov	r2, r0
   b4242:	4620      	mov	r0, r4
    }
   b4244:	b002      	add	sp, #8
   b4246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b424a:	4718      	bx	r3
    }
   b424c:	b002      	add	sp, #8
   b424e:	bd10      	pop	{r4, pc}

000b4250 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>:
  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
   b4250:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b4252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4254:	4604      	mov	r4, r0
   b4256:	460d      	mov	r5, r1
      if (&__x != this)
   b4258:	d025      	beq.n	b42a6 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x56>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b425a:	e9d1 7100 	ldrd	r7, r1, [r1]
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_end_of_storage
			 - this->_M_impl._M_start); }
   b425e:	6800      	ldr	r0, [r0, #0]
   b4260:	68a3      	ldr	r3, [r4, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4262:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b4264:	1a1b      	subs	r3, r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
   b4266:	429e      	cmp	r6, r3
   b4268:	d91e      	bls.n	b42a8 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x58>
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
   b426a:	10f0      	asrs	r0, r6, #3
   b426c:	f7ff ffa7 	bl	b41be <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
   b4270:	2300      	movs	r3, #0
   b4272:	4605      	mov	r5, r0
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
   b4274:	429e      	cmp	r6, r3
   b4276:	d00a      	beq.n	b428e <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x3e>
   */
#if __cplusplus >= 201103L
  template<typename _Tp, typename... _Args>
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4278:	18ea      	adds	r2, r5, r3
   b427a:	bf1c      	itt	ne
   b427c:	18f9      	addne	r1, r7, r3
   b427e:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b4282:	f103 0308 	add.w	r3, r3, #8
   b4286:	bf18      	it	ne
   b4288:	e9c2 0100 	strdne	r0, r1, [r2]
   b428c:	e7f2      	b.n	b4274 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x24>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b428e:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4290:	b118      	cbz	r0, b429a <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x4a>
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
   b4292:	68a1      	ldr	r1, [r4, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b4294:	1a09      	subs	r1, r1, r0
   b4296:	f7ff ff06 	bl	b40a6 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b429a:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b429c:	4435      	add	r5, r6
   b429e:	60a5      	str	r5, [r4, #8]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b42a0:	6823      	ldr	r3, [r4, #0]
   b42a2:	4433      	add	r3, r6
   b42a4:	6063      	str	r3, [r4, #4]
	}
      return *this;
    }
   b42a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b42a8:	6862      	ldr	r2, [r4, #4]
   b42aa:	1a12      	subs	r2, r2, r0
	  else if (size() >= __xlen)
   b42ac:	4296      	cmp	r6, r2
   b42ae:	d806      	bhi.n	b42be <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x6e>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   b42b0:	42b9      	cmp	r1, r7
   b42b2:	d0f5      	beq.n	b42a0 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b42b4:	4632      	mov	r2, r6
   b42b6:	4639      	mov	r1, r7
   b42b8:	f008 fc7e 	bl	bcbb8 <memmove>

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b42bc:	e7f0      	b.n	b42a0 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	  if (_Num)
   b42be:	b112      	cbz	r2, b42c6 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x76>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b42c0:	4639      	mov	r1, r7
   b42c2:	f008 fc79 	bl	bcbb8 <memmove>
   b42c6:	e9d4 2700 	ldrd	r2, r7, [r4]
   b42ca:	1abb      	subs	r3, r7, r2
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b42cc:	682a      	ldr	r2, [r5, #0]
   b42ce:	686d      	ldr	r5, [r5, #4]
   b42d0:	441a      	add	r2, r3
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   b42d2:	1aad      	subs	r5, r5, r2
					  __x._M_impl._M_finish,
   b42d4:	2300      	movs	r3, #0
	      for (; __first != __last; ++__first, (void)++__cur)
   b42d6:	429d      	cmp	r5, r3
   b42d8:	d0e2      	beq.n	b42a0 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
   b42da:	eb17 0c03 	adds.w	ip, r7, r3
   b42de:	bf1c      	itt	ne
   b42e0:	18d1      	addne	r1, r2, r3
   b42e2:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b42e6:	f103 0308 	add.w	r3, r3, #8
   b42ea:	bf18      	it	ne
   b42ec:	e9cc 0100 	strdne	r0, r1, [ip]
   b42f0:	e7f1      	b.n	b42d6 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x86>
	...

000b42f4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>:
      if (&__x != this)
   b42f4:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b42f6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b42fa:	4604      	mov	r4, r0
   b42fc:	468a      	mov	sl, r1
      if (&__x != this)
   b42fe:	d036      	beq.n	b436e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7a>
   b4300:	e9d1 5b00 	ldrd	r5, fp, [r1]
			 - this->_M_impl._M_start); }
   b4304:	f8d0 9000 	ldr.w	r9, [r0]
   b4308:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b430a:	4a39      	ldr	r2, [pc, #228]	; (b43f0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xfc>)
   b430c:	ebab 0705 	sub.w	r7, fp, r5
			 - this->_M_impl._M_start); }
   b4310:	eba3 0309 	sub.w	r3, r3, r9
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4314:	ea4f 08e7 	mov.w	r8, r7, asr #3
	  if (__xlen > capacity())
   b4318:	42bb      	cmp	r3, r7
   b431a:	fb02 f808 	mul.w	r8, r2, r8
   b431e:	d228      	bcs.n	b4372 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7e>
	  pointer __result = this->_M_allocate(__n);
   b4320:	4640      	mov	r0, r8
   b4322:	f7ff ff2d 	bl	b4180 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
   b4326:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   b4328:	4680      	mov	r8, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b432a:	45ab      	cmp	fp, r5
   b432c:	d00a      	beq.n	b4344 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x50>
   b432e:	f1b8 0f00 	cmp.w	r8, #0
   b4332:	d003      	beq.n	b433c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x48>
   b4334:	4629      	mov	r1, r5
   b4336:	4640      	mov	r0, r8
   b4338:	f7ff ff4e 	bl	b41d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b433c:	f108 0818 	add.w	r8, r8, #24
   b4340:	3518      	adds	r5, #24
   b4342:	e7f2      	b.n	b432a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x36>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4344:	e9d4 5800 	ldrd	r5, r8, [r4]
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   b4348:	45a8      	cmp	r8, r5
   b434a:	d004      	beq.n	b4356 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x62>
      { _M_dispose(); }
   b434c:	4628      	mov	r0, r5
   b434e:	f007 fc75 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4352:	3518      	adds	r5, #24
   b4354:	e7f8      	b.n	b4348 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x54>
	      _M_deallocate(this->_M_impl._M_start,
   b4356:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4358:	b118      	cbz	r0, b4362 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x6e>
			    - this->_M_impl._M_start);
   b435a:	68a1      	ldr	r1, [r4, #8]
   b435c:	1a09      	subs	r1, r1, r0
   b435e:	f7ff fea2 	bl	b40a6 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b4362:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4364:	443e      	add	r6, r7
   b4366:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4368:	6823      	ldr	r3, [r4, #0]
   b436a:	443b      	add	r3, r7
   b436c:	6063      	str	r3, [r4, #4]
    }
   b436e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4372:	6846      	ldr	r6, [r0, #4]
   b4374:	eba6 0609 	sub.w	r6, r6, r9
	  else if (size() >= __xlen)
   b4378:	42b7      	cmp	r7, r6
   b437a:	d819      	bhi.n	b43b0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xbc>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b437c:	4646      	mov	r6, r8
   b437e:	46ca      	mov	sl, r9
   b4380:	2e00      	cmp	r6, #0
   b4382:	dd08      	ble.n	b4396 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xa2>
		  }
	      }
	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
	  }
#endif
	this->_M_assign(__str);
   b4384:	4629      	mov	r1, r5
   b4386:	4650      	mov	r0, sl
   b4388:	f007 fc76 	bl	bbc78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b438c:	3518      	adds	r5, #24
	      ++__result;
   b438e:	f10a 0a18 	add.w	sl, sl, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4392:	3e01      	subs	r6, #1
   b4394:	e7f4      	b.n	b4380 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x8c>
   b4396:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
   b439a:	2518      	movs	r5, #24
      : _M_current(__i) { }
   b439c:	6866      	ldr	r6, [r4, #4]
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b439e:	fb05 9508 	mla	r5, r5, r8, r9
	  for (; __first != __last; ++__first)
   b43a2:	42ae      	cmp	r6, r5
   b43a4:	d0e0      	beq.n	b4368 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
      { _M_dispose(); }
   b43a6:	4628      	mov	r0, r5
   b43a8:	f007 fc48 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b43ac:	3518      	adds	r5, #24
      {
	++_M_current;
	return *this;
   b43ae:	e7f8      	b.n	b43a2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xae>
   b43b0:	10f6      	asrs	r6, r6, #3
   b43b2:	4356      	muls	r6, r2
   b43b4:	2e00      	cmp	r6, #0
   b43b6:	dd08      	ble.n	b43ca <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xd6>
	this->_M_assign(__str);
   b43b8:	4629      	mov	r1, r5
   b43ba:	4648      	mov	r0, r9
   b43bc:	f007 fc5c 	bl	bbc78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b43c0:	3518      	adds	r5, #24
	      ++__result;
   b43c2:	f109 0918 	add.w	r9, r9, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b43c6:	3e01      	subs	r6, #1
   b43c8:	e7f4      	b.n	b43b4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xc0>
   b43ca:	e9d4 5600 	ldrd	r5, r6, [r4]
   b43ce:	1b71      	subs	r1, r6, r5
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b43d0:	f8da 5000 	ldr.w	r5, [sl]
					  __x._M_impl._M_finish,
   b43d4:	f8da 8004 	ldr.w	r8, [sl, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b43d8:	440d      	add	r5, r1
   b43da:	45a8      	cmp	r8, r5
   b43dc:	d0c4      	beq.n	b4368 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b43de:	b11e      	cbz	r6, b43e8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xf4>
   b43e0:	4629      	mov	r1, r5
   b43e2:	4630      	mov	r0, r6
   b43e4:	f7ff fef8 	bl	b41d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b43e8:	3518      	adds	r5, #24
   b43ea:	3618      	adds	r6, #24
   b43ec:	e7f5      	b.n	b43da <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xe6>
   b43ee:	bf00      	nop
   b43f0:	aaaaaaab 	.word	0xaaaaaaab

000b43f4 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43f4:	b40e      	push	{r1, r2, r3}
   b43f6:	b503      	push	{r0, r1, lr}
   b43f8:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b43fa:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43fc:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4400:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4402:	f006 fccc 	bl	bad9e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4406:	b002      	add	sp, #8
   b4408:	f85d eb04 	ldr.w	lr, [sp], #4
   b440c:	b003      	add	sp, #12
   b440e:	4770      	bx	lr

000b4410 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4410:	b40e      	push	{r1, r2, r3}
   b4412:	b503      	push	{r0, r1, lr}
   b4414:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b4416:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4418:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b441c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b441e:	f006 fcbe 	bl	bad9e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4422:	b002      	add	sp, #8
   b4424:	f85d eb04 	ldr.w	lr, [sp], #4
   b4428:	b003      	add	sp, #12
   b442a:	4770      	bx	lr

000b442c <_Z16randomizeAddressv>:
    Serial.println();
  }
}

//clears up conflicts with multiple i2c slaves having the same address
void randomizeAddress(){
   b442c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return *(this->_M_impl._M_start + __n);
   b4430:	4fb1      	ldr	r7, [pc, #708]	; (b46f8 <_Z16randomizeAddressv+0x2cc>)
  //Wire.lock();
  while(slaveCount < cities[cityIndex].slaveCountExpected){
   b4432:	4db2      	ldr	r5, [pc, #712]	; (b46fc <_Z16randomizeAddressv+0x2d0>)
void randomizeAddress(){
   b4434:	b08d      	sub	sp, #52	; 0x34
  while(slaveCount < cities[cityIndex].slaveCountExpected){
   b4436:	4bb2      	ldr	r3, [pc, #712]	; (b4700 <_Z16randomizeAddressv+0x2d4>)
   b4438:	681a      	ldr	r2, [r3, #0]
   b443a:	683b      	ldr	r3, [r7, #0]
   b443c:	2128      	movs	r1, #40	; 0x28
   b443e:	fb01 3302 	mla	r3, r1, r2, r3
   b4442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b4444:	682b      	ldr	r3, [r5, #0]
   b4446:	429a      	cmp	r2, r3
   b4448:	f340 811a 	ble.w	b4680 <_Z16randomizeAddressv+0x254>
    //delay(3000);
    Serial.printlnf("slaveCount: %i", slaveCount);
   b444c:	f007 fa0a 	bl	bb864 <_Z16_fetch_usbserialv>
   b4450:	682a      	ldr	r2, [r5, #0]
   b4452:	49ac      	ldr	r1, [pc, #688]	; (b4704 <_Z16randomizeAddressv+0x2d8>)

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b4454:	f8df 82d4 	ldr.w	r8, [pc, #724]	; b472c <_Z16randomizeAddressv+0x300>
   b4458:	f8df 92d4 	ldr.w	r9, [pc, #724]	; b4730 <_Z16randomizeAddressv+0x304>
      //gets UUID from address and sends it back to slave, slave changes address if conflict
      Wire.requestFrom(i, 24);
      if(Wire.available() > 0){
        Serial.println("transmission recieved from: " + String(i));

        String inputBuffer = "";
   b445c:	4eaa      	ldr	r6, [pc, #680]	; (b4708 <_Z16randomizeAddressv+0x2dc>)
    Serial.printlnf("slaveCount: %i", slaveCount);
   b445e:	f7ff ffd7 	bl	b4410 <_ZN5Print8printlnfEPKcz>
    slaveCount = 0;
   b4462:	2300      	movs	r3, #0
   b4464:	602b      	str	r3, [r5, #0]
    for(int i = 8; i <= 119; i++){
   b4466:	2408      	movs	r4, #8
      if(i == 41){
   b4468:	2c29      	cmp	r4, #41	; 0x29
   b446a:	f000 8100 	beq.w	b466e <_Z16randomizeAddressv+0x242>
      Serial.println("\nrequest code 1, address: " + String(i));
   b446e:	f007 f9f9 	bl	bb864 <_Z16_fetch_usbserialv>
   b4472:	4641      	mov	r1, r8
   b4474:	4682      	mov	sl, r0
   b4476:	a808      	add	r0, sp, #32
   b4478:	f006 fd13 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
   b447c:	220a      	movs	r2, #10
   b447e:	4621      	mov	r1, r4
   b4480:	a804      	add	r0, sp, #16
   b4482:	f006 fd68 	bl	baf56 <_ZN6StringC1Eih>
   b4486:	a904      	add	r1, sp, #16
   b4488:	a808      	add	r0, sp, #32
   b448a:	f006 fd9f 	bl	bafcc <_ZplRK15StringSumHelperRK6String>
   b448e:	6801      	ldr	r1, [r0, #0]
   b4490:	4650      	mov	r0, sl
   b4492:	f006 fc5c 	bl	bad4e <_ZN5Print7printlnEPKc>
   b4496:	a804      	add	r0, sp, #16
   b4498:	f006 fcb8 	bl	bae0c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b449c:	a808      	add	r0, sp, #32
   b449e:	f006 fcb5 	bl	bae0c <_ZN6StringD1Ev>
      Wire.beginTransmission(i);
   b44a2:	f007 fb2d 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b44a6:	4621      	mov	r1, r4
   b44a8:	f006 fac4 	bl	baa34 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('1');
   b44ac:	f007 fb28 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b44b0:	2131      	movs	r1, #49	; 0x31
   b44b2:	f7ff feb7 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b44b6:	fa5f fb84 	uxtb.w	fp, r4
   b44ba:	f007 fb21 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b44be:	f006 fac0 	bl	baa42 <_ZN7TwoWire15endTransmissionEv>
      Wire.requestFrom(i, 24);
   b44c2:	f007 fb1d 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b44c6:	2218      	movs	r2, #24
   b44c8:	4659      	mov	r1, fp
   b44ca:	f006 faac 	bl	baa26 <_ZN7TwoWire11requestFromEhj>
      if(Wire.available() > 0){
   b44ce:	f007 fb17 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b44d2:	6803      	ldr	r3, [r0, #0]
   b44d4:	691b      	ldr	r3, [r3, #16]
   b44d6:	4798      	blx	r3
   b44d8:	2800      	cmp	r0, #0
   b44da:	f340 80c8 	ble.w	b466e <_Z16randomizeAddressv+0x242>
        Serial.println("transmission recieved from: " + String(i));
   b44de:	f007 f9c1 	bl	bb864 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b44e2:	4649      	mov	r1, r9
   b44e4:	4682      	mov	sl, r0
   b44e6:	a808      	add	r0, sp, #32
   b44e8:	f006 fcdb 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
   b44ec:	220a      	movs	r2, #10
   b44ee:	4621      	mov	r1, r4
   b44f0:	a804      	add	r0, sp, #16
   b44f2:	f006 fd30 	bl	baf56 <_ZN6StringC1Eih>
   b44f6:	a904      	add	r1, sp, #16
   b44f8:	a808      	add	r0, sp, #32
   b44fa:	f006 fd67 	bl	bafcc <_ZplRK15StringSumHelperRK6String>
   b44fe:	6801      	ldr	r1, [r0, #0]
   b4500:	4650      	mov	r0, sl
   b4502:	f006 fc24 	bl	bad4e <_ZN5Print7printlnEPKc>
   b4506:	a804      	add	r0, sp, #16
   b4508:	f006 fc80 	bl	bae0c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b450c:	a808      	add	r0, sp, #32
   b450e:	f006 fc7d 	bl	bae0c <_ZN6StringD1Ev>
        String inputBuffer = "";
   b4512:	4631      	mov	r1, r6
   b4514:	4668      	mov	r0, sp
   b4516:	f006 fcc4 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
   b451a:	f04f 0a18 	mov.w	sl, #24
        char c;
        for(int j = 0; j < 24; j++){
          c = Wire.read();
   b451e:	f007 faef 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b4522:	6803      	ldr	r3, [r0, #0]
   b4524:	695b      	ldr	r3, [r3, #20]
   b4526:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b4528:	b2c1      	uxtb	r1, r0
   b452a:	4668      	mov	r0, sp
   b452c:	f006 fd41 	bl	bafb2 <_ZN6String6concatEc>
        for(int j = 0; j < 24; j++){
   b4530:	f1ba 0a01 	subs.w	sl, sl, #1
   b4534:	d1f3      	bne.n	b451e <_Z16randomizeAddressv+0xf2>
          inputBuffer += c;
        }
        Wire.flush();
   b4536:	f007 fae3 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b453a:	6803      	ldr	r3, [r0, #0]
   b453c:	69db      	ldr	r3, [r3, #28]
   b453e:	4798      	blx	r3
        Wire.beginTransmission(i);
   b4540:	f007 fade 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b4544:	4621      	mov	r1, r4
   b4546:	f006 fa75 	bl	baa34 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(inputBuffer);
   b454a:	f007 fad9 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b454e:	9900      	ldr	r1, [sp, #0]
   b4550:	f7ff fe6c 	bl	b422c <_ZN5Print5writeEPKc.isra.0>
        Serial.println("device id: " + inputBuffer);
   b4554:	f007 f986 	bl	bb864 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4558:	496c      	ldr	r1, [pc, #432]	; (b470c <_Z16randomizeAddressv+0x2e0>)
   b455a:	4682      	mov	sl, r0
   b455c:	a808      	add	r0, sp, #32
   b455e:	f006 fca0 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
   b4562:	4669      	mov	r1, sp
   b4564:	a808      	add	r0, sp, #32
   b4566:	f006 fd31 	bl	bafcc <_ZplRK15StringSumHelperRK6String>
   b456a:	6801      	ldr	r1, [r0, #0]
   b456c:	4650      	mov	r0, sl
   b456e:	f006 fbee 	bl	bad4e <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4572:	a808      	add	r0, sp, #32
   b4574:	f006 fc4a 	bl	bae0c <_ZN6StringD1Ev>
        Wire.endTransmission();
   b4578:	f007 fac2 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b457c:	f006 fa61 	bl	baa42 <_ZN7TwoWire15endTransmissionEv>
        Serial.println("transmission sent to: " + String(i));
   b4580:	f007 f970 	bl	bb864 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4584:	4962      	ldr	r1, [pc, #392]	; (b4710 <_Z16randomizeAddressv+0x2e4>)
   b4586:	4682      	mov	sl, r0
   b4588:	a808      	add	r0, sp, #32
   b458a:	f006 fc8a 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
   b458e:	220a      	movs	r2, #10
   b4590:	4621      	mov	r1, r4
   b4592:	a804      	add	r0, sp, #16
   b4594:	f006 fcdf 	bl	baf56 <_ZN6StringC1Eih>
   b4598:	a904      	add	r1, sp, #16
   b459a:	a808      	add	r0, sp, #32
   b459c:	f006 fd16 	bl	bafcc <_ZplRK15StringSumHelperRK6String>
   b45a0:	6801      	ldr	r1, [r0, #0]
   b45a2:	4650      	mov	r0, sl
   b45a4:	f006 fbd3 	bl	bad4e <_ZN5Print7printlnEPKc>
   b45a8:	a804      	add	r0, sp, #16
   b45aa:	f006 fc2f 	bl	bae0c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b45ae:	a808      	add	r0, sp, #32
   b45b0:	f006 fc2c 	bl	bae0c <_ZN6StringD1Ev>

        Wire.beginTransmission(i);
   b45b4:	f007 faa4 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b45b8:	4621      	mov	r1, r4
   b45ba:	f006 fa3b 	bl	baa34 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('2');
   b45be:	f007 fa9f 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b45c2:	2132      	movs	r1, #50	; 0x32
   b45c4:	f7ff fe2e 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b45c8:	f007 fa9a 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b45cc:	f006 fa39 	bl	baa42 <_ZN7TwoWire15endTransmissionEv>
        
        Serial.println("request code 2, address: " + String(i));
   b45d0:	f007 f948 	bl	bb864 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b45d4:	494f      	ldr	r1, [pc, #316]	; (b4714 <_Z16randomizeAddressv+0x2e8>)
   b45d6:	4682      	mov	sl, r0
   b45d8:	a808      	add	r0, sp, #32
   b45da:	f006 fc62 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
   b45de:	220a      	movs	r2, #10
   b45e0:	4621      	mov	r1, r4
   b45e2:	a804      	add	r0, sp, #16
   b45e4:	f006 fcb7 	bl	baf56 <_ZN6StringC1Eih>
   b45e8:	a904      	add	r1, sp, #16
   b45ea:	a808      	add	r0, sp, #32
   b45ec:	f006 fcee 	bl	bafcc <_ZplRK15StringSumHelperRK6String>
   b45f0:	6801      	ldr	r1, [r0, #0]
   b45f2:	4650      	mov	r0, sl
   b45f4:	f006 fbab 	bl	bad4e <_ZN5Print7printlnEPKc>
   b45f8:	a804      	add	r0, sp, #16
   b45fa:	f006 fc07 	bl	bae0c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b45fe:	a808      	add	r0, sp, #32
   b4600:	f006 fc04 	bl	bae0c <_ZN6StringD1Ev>
        Wire.requestFrom(i, 4);
   b4604:	f007 fa7c 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b4608:	2204      	movs	r2, #4
   b460a:	4659      	mov	r1, fp
   b460c:	f006 fa0b 	bl	baa26 <_ZN7TwoWire11requestFromEhj>
        inputBuffer = "";
   b4610:	4631      	mov	r1, r6
   b4612:	4668      	mov	r0, sp
   b4614:	f006 fc8d 	bl	baf32 <_ZN6StringaSEPKc>
   b4618:	f04f 0a04 	mov.w	sl, #4
        for(int j = 0; j < 4; j++){
          inputBuffer += (char)Wire.read();
   b461c:	f007 fa70 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b4620:	6803      	ldr	r3, [r0, #0]
   b4622:	695b      	ldr	r3, [r3, #20]
   b4624:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b4626:	b2c1      	uxtb	r1, r0
   b4628:	4668      	mov	r0, sp
   b462a:	f006 fcc2 	bl	bafb2 <_ZN6String6concatEc>
        for(int j = 0; j < 4; j++){
   b462e:	f1ba 0a01 	subs.w	sl, sl, #1
   b4632:	d1f3      	bne.n	b461c <_Z16randomizeAddressv+0x1f0>
        }
        
        Serial.println("conflict verification: " + inputBuffer);
   b4634:	f007 f916 	bl	bb864 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4638:	4937      	ldr	r1, [pc, #220]	; (b4718 <_Z16randomizeAddressv+0x2ec>)
   b463a:	4682      	mov	sl, r0
   b463c:	a808      	add	r0, sp, #32
   b463e:	f006 fc30 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
   b4642:	4669      	mov	r1, sp
   b4644:	a808      	add	r0, sp, #32
   b4646:	f006 fcc1 	bl	bafcc <_ZplRK15StringSumHelperRK6String>
   b464a:	6801      	ldr	r1, [r0, #0]
   b464c:	4650      	mov	r0, sl
   b464e:	f006 fb7e 	bl	bad4e <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4652:	a808      	add	r0, sp, #32
   b4654:	f006 fbda 	bl	bae0c <_ZN6StringD1Ev>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b4658:	4930      	ldr	r1, [pc, #192]	; (b471c <_Z16randomizeAddressv+0x2f0>)
   b465a:	4668      	mov	r0, sp
   b465c:	f006 fcf9 	bl	bb052 <_ZNK6String6equalsEPKc>
        if(inputBuffer != "pass"){
   b4660:	b150      	cbz	r0, b4678 <_Z16randomizeAddressv+0x24c>
          break;
        }
        slaveCount++;
   b4662:	682b      	ldr	r3, [r5, #0]
        String inputBuffer = "";
   b4664:	4668      	mov	r0, sp
        slaveCount++;
   b4666:	3301      	adds	r3, #1
   b4668:	602b      	str	r3, [r5, #0]
        String inputBuffer = "";
   b466a:	f006 fbcf 	bl	bae0c <_ZN6StringD1Ev>
    for(int i = 8; i <= 119; i++){
   b466e:	3401      	adds	r4, #1
   b4670:	2c78      	cmp	r4, #120	; 0x78
   b4672:	f47f aef9 	bne.w	b4468 <_Z16randomizeAddressv+0x3c>
   b4676:	e6de      	b.n	b4436 <_Z16randomizeAddressv+0xa>
   b4678:	4668      	mov	r0, sp
   b467a:	f006 fbc7 	bl	bae0c <_ZN6StringD1Ev>
   b467e:	e6da      	b.n	b4436 <_Z16randomizeAddressv+0xa>
      }
    }
  }

  Serial.println("\nConnected to: ");
   b4680:	f007 f8f0 	bl	bb864 <_Z16_fetch_usbserialv>
   b4684:	4926      	ldr	r1, [pc, #152]	; (b4720 <_Z16randomizeAddressv+0x2f4>)
    Wire.endTransmission();

    Wire.requestFrom(i, 24);
    if(Wire.available() > 0){
      Serial.print(i);
      Serial.print(", ");
   b4686:	4e27      	ldr	r6, [pc, #156]	; (b4724 <_Z16randomizeAddressv+0x2f8>)
   b4688:	4f27      	ldr	r7, [pc, #156]	; (b4728 <_Z16randomizeAddressv+0x2fc>)
  Serial.println("\nConnected to: ");
   b468a:	f006 fb60 	bl	bad4e <_ZN5Print7printlnEPKc>
  for(int i = 8; i<= 119; i++){
   b468e:	2408      	movs	r4, #8
  int count = 0;
   b4690:	2500      	movs	r5, #0
    if(i == 41){
   b4692:	2c29      	cmp	r4, #41	; 0x29
   b4694:	d029      	beq.n	b46ea <_Z16randomizeAddressv+0x2be>
    Wire.beginTransmission(i);
   b4696:	f007 fa33 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b469a:	4621      	mov	r1, r4
   b469c:	f006 f9ca 	bl	baa34 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('1');
   b46a0:	f007 fa2e 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b46a4:	2131      	movs	r1, #49	; 0x31
   b46a6:	f7ff fdbd 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b46aa:	f007 fa29 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b46ae:	f006 f9c8 	bl	baa42 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(i, 24);
   b46b2:	f007 fa25 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b46b6:	2218      	movs	r2, #24
   b46b8:	b2e1      	uxtb	r1, r4
   b46ba:	f006 f9b4 	bl	baa26 <_ZN7TwoWire11requestFromEhj>
    if(Wire.available() > 0){
   b46be:	f007 fa1f 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b46c2:	6803      	ldr	r3, [r0, #0]
   b46c4:	691b      	ldr	r3, [r3, #16]
   b46c6:	4798      	blx	r3
   b46c8:	2800      	cmp	r0, #0
   b46ca:	dd0e      	ble.n	b46ea <_Z16randomizeAddressv+0x2be>
      Serial.print(i);
   b46cc:	f007 f8ca 	bl	bb864 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b46d0:	220a      	movs	r2, #10
   b46d2:	4621      	mov	r1, r4
   b46d4:	f006 fb45 	bl	bad62 <_ZN5Print11printNumberEmh>
      Serial.print(", ");
   b46d8:	f007 f8c4 	bl	bb864 <_Z16_fetch_usbserialv>
   b46dc:	4631      	mov	r1, r6
   b46de:	f006 fb23 	bl	bad28 <_ZN5Print5printEPKc>

      addressArr[count++] = i;
   b46e2:	683b      	ldr	r3, [r7, #0]
   b46e4:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
   b46e8:	3501      	adds	r5, #1
  for(int i = 8; i<= 119; i++){
   b46ea:	3401      	adds	r4, #1
   b46ec:	2c78      	cmp	r4, #120	; 0x78
   b46ee:	d1d0      	bne.n	b4692 <_Z16randomizeAddressv+0x266>
    }
  }
  //Wire.unlock();
}
   b46f0:	b00d      	add	sp, #52	; 0x34
   b46f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b46f6:	bf00      	nop
   b46f8:	200353e8 	.word	0x200353e8
   b46fc:	2003e6a0 	.word	0x2003e6a0
   b4700:	20035040 	.word	0x20035040
   b4704:	000bed26 	.word	0x000bed26
   b4708:	000bf29a 	.word	0x000bf29a
   b470c:	000bed6d 	.word	0x000bed6d
   b4710:	000bed79 	.word	0x000bed79
   b4714:	000bed90 	.word	0x000bed90
   b4718:	000bedaa 	.word	0x000bedaa
   b471c:	000bedc2 	.word	0x000bedc2
   b4720:	000bedc7 	.word	0x000bedc7
   b4724:	000bf04f 	.word	0x000bf04f
   b4728:	20035290 	.word	0x20035290
   b472c:	000bed35 	.word	0x000bed35
   b4730:	000bed50 	.word	0x000bed50

000b4734 <_Z17acquireWireBufferv>:
    Serial.println("reset done");
  }
  //Wire.unlock();
}

hal_i2c_config_t acquireWireBuffer() {
   b4734:	b538      	push	{r3, r4, r5, lr}
    hal_i2c_config_t config = {
   b4736:	f44f 7500 	mov.w	r5, #512	; 0x200
   b473a:	2314      	movs	r3, #20
hal_i2c_config_t acquireWireBuffer() {
   b473c:	4604      	mov	r4, r0
    hal_i2c_config_t config = {
   b473e:	6003      	str	r3, [r0, #0]
   b4740:	6085      	str	r5, [r0, #8]
   b4742:	6105      	str	r5, [r0, #16]
        .size = sizeof(hal_i2c_config_t),
        .version = HAL_I2C_CONFIG_VERSION_1,
        .rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4744:	4905      	ldr	r1, [pc, #20]	; (b475c <_Z17acquireWireBufferv+0x28>)
   b4746:	4628      	mov	r0, r5
   b4748:	f007 fa3e 	bl	bbbc8 <_ZnajRKSt9nothrow_t>
        .rx_buffer_size = I2C_BUFFER_SIZE,
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b474c:	4903      	ldr	r1, [pc, #12]	; (b475c <_Z17acquireWireBufferv+0x28>)
        .tx_buffer_size = I2C_BUFFER_SIZE
    };
   b474e:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4750:	4628      	mov	r0, r5
   b4752:	f007 fa39 	bl	bbbc8 <_ZnajRKSt9nothrow_t>
    };
   b4756:	60e0      	str	r0, [r4, #12]
    return config;
}
   b4758:	4620      	mov	r0, r4
   b475a:	bd38      	pop	{r3, r4, r5, pc}
   b475c:	000bf6b0 	.word	0x000bf6b0

000b4760 <_Z9lightshowi>:

void lightshow(int length){
   b4760:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4762:	4c1c      	ldr	r4, [pc, #112]	; (b47d4 <_Z9lightshowi+0x74>)
   b4764:	4606      	mov	r6, r0
  //Wire.lock();
  for(int i = 0; i < addressArr.size(); i++){
   b4766:	2500      	movs	r5, #0
   b4768:	e9d4 2300 	ldrd	r2, r3, [r4]
   b476c:	1a9b      	subs	r3, r3, r2
   b476e:	ebb5 0fa3 	cmp.w	r5, r3, asr #2
   b4772:	d211      	bcs.n	b4798 <_Z9lightshowi+0x38>
    Wire.beginTransmission(addressArr[i]);
   b4774:	f007 f9c4 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b4778:	6823      	ldr	r3, [r4, #0]
   b477a:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   b477e:	f006 f959 	bl	baa34 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('3');
   b4782:	f007 f9bd 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b4786:	2133      	movs	r1, #51	; 0x33
   b4788:	f7ff fd4c 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b478c:	f007 f9b8 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b4790:	f006 f957 	bl	baa42 <_ZN7TwoWire15endTransmissionEv>
  for(int i = 0; i < addressArr.size(); i++){
   b4794:	3501      	adds	r5, #1
   b4796:	e7e7      	b.n	b4768 <_Z9lightshowi+0x8>
  }
  delay(length);
   b4798:	4630      	mov	r0, r6
   b479a:	f004 fee5 	bl	b9568 <delay>
  for(int i = 0; i < addressArr.size(); i++){
   b479e:	2500      	movs	r5, #0
   b47a0:	e9d4 2300 	ldrd	r2, r3, [r4]
   b47a4:	1a9b      	subs	r3, r3, r2
   b47a6:	ebb5 0fa3 	cmp.w	r5, r3, asr #2
   b47aa:	d211      	bcs.n	b47d0 <_Z9lightshowi+0x70>
    Wire.beginTransmission(addressArr[i]);
   b47ac:	f007 f9a8 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b47b0:	6823      	ldr	r3, [r4, #0]
   b47b2:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   b47b6:	f006 f93d 	bl	baa34 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('4');
   b47ba:	f007 f9a1 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b47be:	2134      	movs	r1, #52	; 0x34
   b47c0:	f7ff fd30 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b47c4:	f007 f99c 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b47c8:	f006 f93b 	bl	baa42 <_ZN7TwoWire15endTransmissionEv>
  for(int i = 0; i < addressArr.size(); i++){
   b47cc:	3501      	adds	r5, #1
   b47ce:	e7e7      	b.n	b47a0 <_Z9lightshowi+0x40>
  }
  //Wire.unlock();
}
   b47d0:	bd70      	pop	{r4, r5, r6, pc}
   b47d2:	bf00      	nop
   b47d4:	20035290 	.word	0x20035290

000b47d8 <_Z8callbackPcPhj>:

void callback(char* topic, byte* payload, unsigned int length){
   b47d8:	b508      	push	{r3, lr}
  Serial.println("twitter");
   b47da:	f007 f843 	bl	bb864 <_Z16_fetch_usbserialv>
   b47de:	4904      	ldr	r1, [pc, #16]	; (b47f0 <_Z8callbackPcPhj+0x18>)
   b47e0:	f006 fab5 	bl	bad4e <_ZN5Print7printlnEPKc>
  lightshow(3000);
   b47e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  lightshow(3000);
   b47e8:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b47ec:	f7ff bfb8 	b.w	b4760 <_Z9lightshowi>
   b47f0:	000bedd7 	.word	0x000bedd7

000b47f4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b47f4:	b510      	push	{r4, lr}
   b47f6:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b47f8:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b47fa:	b118      	cbz	r0, b4804 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b47fc:	68a1      	ldr	r1, [r4, #8]
   b47fe:	1a09      	subs	r1, r1, r0
   b4800:	f7ff fc51 	bl	b40a6 <_ZdlPvj>
      }
   b4804:	4620      	mov	r0, r4
   b4806:	bd10      	pop	{r4, pc}

000b4808 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4808:	b510      	push	{r4, lr}
   b480a:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b480c:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b480e:	b118      	cbz	r0, b4818 <_ZNSt12_Vector_baseIfSaIfEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4810:	68a1      	ldr	r1, [r4, #8]
   b4812:	1a09      	subs	r1, r1, r0
   b4814:	f7ff fc47 	bl	b40a6 <_ZdlPvj>
      }
   b4818:	4620      	mov	r0, r4
   b481a:	bd10      	pop	{r4, pc}

000b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b481c:	b510      	push	{r4, lr}
   b481e:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4820:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b4822:	b118      	cbz	r0, b482c <_ZNSt12_Vector_baseIiSaIiEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4824:	68a1      	ldr	r1, [r4, #8]
   b4826:	1a09      	subs	r1, r1, r0
   b4828:	f7ff fc3d 	bl	b40a6 <_ZdlPvj>
      }
   b482c:	4620      	mov	r0, r4
   b482e:	bd10      	pop	{r4, pc}

000b4830 <_ZNSt6vectorIiSaIiEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
   b4830:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
   b4832:	680d      	ldr	r5, [r1, #0]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4834:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
   b4836:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
   b483a:	6005      	str	r5, [r0, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
   b483c:	b085      	sub	sp, #20
	  _M_finish = __x._M_finish;
   b483e:	684d      	ldr	r5, [r1, #4]
   b4840:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4842:	688d      	ldr	r5, [r1, #8]
   b4844:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
   b4846:	2300      	movs	r3, #0
	  _M_end_of_storage = __x._M_end_of_storage;
   b4848:	6085      	str	r5, [r0, #8]
	  _M_finish = __x._M_finish;
   b484a:	e9c1 3300 	strd	r3, r3, [r1]
	  _M_end_of_storage = __x._M_end_of_storage;
   b484e:	608b      	str	r3, [r1, #8]
      }
   b4850:	a801      	add	r0, sp, #4
	  _M_finish = __x._M_finish;
   b4852:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
   b4856:	f7ff ffe1 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
      }
   b485a:	b005      	add	sp, #20
   b485c:	bd30      	pop	{r4, r5, pc}

000b485e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b485e:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4860:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   b4864:	4604      	mov	r4, r0
	  for (; __first != __last; ++__first)
   b4866:	42ae      	cmp	r6, r5
   b4868:	d004      	beq.n	b4874 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x16>
      { _M_dispose(); }
   b486a:	4628      	mov	r0, r5
   b486c:	f007 f9e6 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4870:	3518      	adds	r5, #24
   b4872:	e7f8      	b.n	b4866 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   b4874:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4876:	b118      	cbz	r0, b4880 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x22>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4878:	68a1      	ldr	r1, [r4, #8]
   b487a:	1a09      	subs	r1, r1, r0
   b487c:	f7ff fc13 	bl	b40a6 <_ZdlPvj>
      }
   b4880:	4620      	mov	r0, r4
   b4882:	bd70      	pop	{r4, r5, r6, pc}

000b4884 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>:

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4884:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
      vector(size_type __n, const value_type& __value,
   b4888:	b570      	push	{r4, r5, r6, lr}
   b488a:	4604      	mov	r4, r0
   b488c:	460d      	mov	r5, r1
   b488e:	4616      	mov	r6, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4890:	d302      	bcc.n	b4898 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x14>
	  __throw_length_error(
   b4892:	480c      	ldr	r0, [pc, #48]	; (b48c4 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x40>)
   b4894:	f007 f9a0 	bl	bbbd8 <_ZSt20__throw_length_errorPKc>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4898:	2300      	movs	r3, #0
   b489a:	e9c0 3300 	strd	r3, r3, [r0]
   b489e:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b48a0:	4608      	mov	r0, r1
   b48a2:	f7ff fc7f 	bl	b41a4 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b48a6:	eb00 0385 	add.w	r3, r0, r5, lsl #2
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b48aa:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b48ae:	60a3      	str	r3, [r4, #8]
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
   b48b0:	b12d      	cbz	r5, b48be <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x3a>
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
   b48b2:	6832      	ldr	r2, [r6, #0]
      for (; __first != __last; ++__first)
   b48b4:	4283      	cmp	r3, r0
   b48b6:	d002      	beq.n	b48be <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x3a>
	*__first = __tmp;
   b48b8:	f840 2b04 	str.w	r2, [r0], #4
      for (; __first != __last; ++__first)
   b48bc:	e7fa      	b.n	b48b4 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x30>
	this->_M_impl._M_finish =
   b48be:	6060      	str	r0, [r4, #4]
      { _M_fill_initialize(__n, __value); }
   b48c0:	4620      	mov	r0, r4
   b48c2:	bd70      	pop	{r4, r5, r6, pc}
   b48c4:	000beddf 	.word	0x000beddf

000b48c8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
   b48c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b48cc:	2400      	movs	r4, #0
      vector(initializer_list<value_type> __l,
   b48ce:	ab02      	add	r3, sp, #8
   b48d0:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b48d4:	e9c0 4400 	strd	r4, r4, [r0]
      constexpr const_iterator
      begin() const noexcept { return _M_array; }

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
   b48d8:	4613      	mov	r3, r2
      vector(initializer_list<value_type> __l,
   b48da:	4605      	mov	r5, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b48dc:	6084      	str	r4, [r0, #8]
   b48de:	00d7      	lsls	r7, r2, #3
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b48e0:	f342 001c 	sbfx	r0, r2, #0, #29
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b48e4:	4a10      	ldr	r2, [pc, #64]	; (b4928 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x60>)
   b48e6:	ebb2 0fc3 	cmp.w	r2, r3, lsl #3
   b48ea:	4688      	mov	r8, r1
   b48ec:	d202      	bcs.n	b48f4 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x2c>
	  __throw_length_error(
   b48ee:	480f      	ldr	r0, [pc, #60]	; (b492c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x64>)
   b48f0:	f007 f972 	bl	bbbd8 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b48f4:	f7ff fc63 	bl	b41be <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b48f8:	19c6      	adds	r6, r0, r7
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b48fa:	4602      	mov	r2, r0
   b48fc:	6028      	str	r0, [r5, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b48fe:	60ae      	str	r6, [r5, #8]
   b4900:	4623      	mov	r3, r4
   b4902:	429f      	cmp	r7, r3
   b4904:	d00b      	beq.n	b491e <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x56>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4906:	18d4      	adds	r4, r2, r3
   b4908:	bf1c      	itt	ne
   b490a:	eb08 0103 	addne.w	r1, r8, r3
   b490e:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b4912:	f103 0308 	add.w	r3, r3, #8
   b4916:	bf18      	it	ne
   b4918:	e9c4 0100 	strdne	r0, r1, [r4]
   b491c:	e7f1      	b.n	b4902 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x3a>
      }
   b491e:	4628      	mov	r0, r5
	  this->_M_impl._M_finish =
   b4920:	606e      	str	r6, [r5, #4]
      }
   b4922:	b002      	add	sp, #8
   b4924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4928:	7ffffff8 	.word	0x7ffffff8
   b492c:	000beddf 	.word	0x000beddf

000b4930 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>:
      vector(initializer_list<value_type> __l,
   b4930:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4934:	ab02      	add	r3, sp, #8
   b4936:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b493a:	2300      	movs	r3, #0
   b493c:	e9c0 3300 	strd	r3, r3, [r0]
   b4940:	6083      	str	r3, [r0, #8]
   b4942:	4616      	mov	r6, r2
   b4944:	2318      	movs	r3, #24
   b4946:	435e      	muls	r6, r3
   b4948:	4b10      	ldr	r3, [pc, #64]	; (b498c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x5c>)
      vector(initializer_list<value_type> __l,
   b494a:	4604      	mov	r4, r0
   b494c:	10f0      	asrs	r0, r6, #3
   b494e:	4358      	muls	r0, r3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4950:	4b0f      	ldr	r3, [pc, #60]	; (b4990 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x60>)
   b4952:	429e      	cmp	r6, r3
   b4954:	460f      	mov	r7, r1
   b4956:	eb01 0806 	add.w	r8, r1, r6
   b495a:	d902      	bls.n	b4962 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x32>
	  __throw_length_error(
   b495c:	480d      	ldr	r0, [pc, #52]	; (b4994 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x64>)
   b495e:	f007 f93b 	bl	bbbd8 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4962:	f7ff fc0d 	bl	b4180 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4966:	4406      	add	r6, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4968:	4605      	mov	r5, r0
   b496a:	6020      	str	r0, [r4, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b496c:	60a6      	str	r6, [r4, #8]
   b496e:	45b8      	cmp	r8, r7
   b4970:	d007      	beq.n	b4982 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x52>
   b4972:	b11d      	cbz	r5, b497c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x4c>
   b4974:	4639      	mov	r1, r7
   b4976:	4628      	mov	r0, r5
   b4978:	f7ff fc2e 	bl	b41d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b497c:	3718      	adds	r7, #24
   b497e:	3518      	adds	r5, #24
   b4980:	e7f5      	b.n	b496e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x3e>
      }
   b4982:	4620      	mov	r0, r4
	  this->_M_impl._M_finish =
   b4984:	6065      	str	r5, [r4, #4]
      }
   b4986:	b002      	add	sp, #8
   b4988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b498c:	aaaaaaab 	.word	0xaaaaaaab
   b4990:	7ffffff8 	.word	0x7ffffff8
   b4994:	000beddf 	.word	0x000beddf

000b4998 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   b4998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b499a:	e9d1 3700 	ldrd	r3, r7, [r1]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b499e:	2500      	movs	r5, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b49a0:	1aff      	subs	r7, r7, r3
      vector(const vector& __x)
   b49a2:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b49a4:	e9c0 5500 	strd	r5, r5, [r0]
   b49a8:	6085      	str	r5, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b49aa:	10f8      	asrs	r0, r7, #3
      vector(const vector& __x)
   b49ac:	460e      	mov	r6, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b49ae:	f7ff fc06 	bl	b41be <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b49b2:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b49b6:	4407      	add	r7, r0
   b49b8:	60a7      	str	r7, [r4, #8]
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b49ba:	e9d6 7600 	ldrd	r7, r6, [r6]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b49be:	4602      	mov	r2, r0
   b49c0:	1bf6      	subs	r6, r6, r7
      : _M_current(__i) { }
   b49c2:	462b      	mov	r3, r5
   b49c4:	42b3      	cmp	r3, r6
   b49c6:	eb02 0503 	add.w	r5, r2, r3
   b49ca:	d006      	beq.n	b49da <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x42>
   b49cc:	b11d      	cbz	r5, b49d6 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x3e>
   b49ce:	18f9      	adds	r1, r7, r3
   b49d0:	c903      	ldmia	r1, {r0, r1}
   b49d2:	e885 0003 	stmia.w	r5, {r0, r1}
   b49d6:	3308      	adds	r3, #8
   b49d8:	e7f4      	b.n	b49c4 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x2c>
	this->_M_impl._M_finish =
   b49da:	6065      	str	r5, [r4, #4]
      }
   b49dc:	4620      	mov	r0, r4
   b49de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b49e0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>:
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
   b49e0:	b508      	push	{r3, lr}
      { return _M_string_length; }
   b49e2:	6842      	ldr	r2, [r0, #4]
	       const basic_string<_CharT>& __rhs) _GLIBCXX_NOEXCEPT
    { return (__lhs.size() == __rhs.size()
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
   b49e4:	684b      	ldr	r3, [r1, #4]
   b49e6:	429a      	cmp	r2, r3
   b49e8:	d108      	bne.n	b49fc <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1c>
	if (__n == 0)
   b49ea:	b14a      	cbz	r2, b4a00 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x20>
	return __builtin_memcmp(__s1, __s2, __n);
   b49ec:	6809      	ldr	r1, [r1, #0]
   b49ee:	6800      	ldr	r0, [r0, #0]
   b49f0:	f008 f8c4 	bl	bcb7c <memcmp>
   b49f4:	fab0 f080 	clz	r0, r0
   b49f8:	0940      	lsrs	r0, r0, #5
						    __lhs.size())); }
   b49fa:	bd08      	pop	{r3, pc}
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
   b49fc:	2000      	movs	r0, #0
   b49fe:	e7fc      	b.n	b49fa <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1a>
   b4a00:	2001      	movs	r0, #1
   b4a02:	e7fa      	b.n	b49fa <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1a>

000b4a04 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  txCharacteristic.setValue("ok");
   b4a08:	2200      	movs	r2, #0
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4a0a:	b0a3      	sub	sp, #140	; 0x8c
   b4a0c:	4604      	mov	r4, r0
   b4a0e:	460d      	mov	r5, r1
  txCharacteristic.setValue("ok");
   b4a10:	4899      	ldr	r0, [pc, #612]	; (b4c78 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x274>)
   b4a12:	499a      	ldr	r1, [pc, #616]	; (b4c7c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x278>)
   b4a14:	f005 f852 	bl	b9abc <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
  String inputBuffer = "";
   b4a18:	4999      	ldr	r1, [pc, #612]	; (b4c80 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x27c>)
   b4a1a:	a803      	add	r0, sp, #12
   b4a1c:	f006 fa41 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
  String nameBuffer;
   b4a20:	4997      	ldr	r1, [pc, #604]	; (b4c80 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x27c>)
   b4a22:	a807      	add	r0, sp, #28
   b4a24:	f006 fa3d 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
  for(int i = 0; i < len; i++){
   b4a28:	4425      	add	r5, r4
   b4a2a:	42a5      	cmp	r5, r4
   b4a2c:	d005      	beq.n	b4a3a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x36>
	String & operator += (char c)			{concat(c); return (*this);}
   b4a2e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4a32:	a803      	add	r0, sp, #12
   b4a34:	f006 fabd 	bl	bafb2 <_ZN6String6concatEc>
   b4a38:	e7f7      	b.n	b4a2a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x26>
  Serial.println(inputBuffer);
   b4a3a:	f006 ff13 	bl	bb864 <_Z16_fetch_usbserialv>
   b4a3e:	9903      	ldr	r1, [sp, #12]
   b4a40:	f006 f985 	bl	bad4e <_ZN5Print7printlnEPKc>
  if(inputBuffer.indexOf("wifi:") == 0){
   b4a44:	498f      	ldr	r1, [pc, #572]	; (b4c84 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x280>)
   b4a46:	a80f      	add	r0, sp, #60	; 0x3c
   b4a48:	f006 fa2b 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
   b4a4c:	a90f      	add	r1, sp, #60	; 0x3c
   b4a4e:	a803      	add	r0, sp, #12
   b4a50:	f006 fb20 	bl	bb094 <_ZNK6String7indexOfERKS_>
   b4a54:	4604      	mov	r4, r0
   b4a56:	a80f      	add	r0, sp, #60	; 0x3c
   b4a58:	f006 f9d8 	bl	bae0c <_ZN6StringD1Ev>
   b4a5c:	2c00      	cmp	r4, #0
   b4a5e:	d15b      	bne.n	b4b18 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x114>
    int commaIndex = inputBuffer.indexOf(",");
   b4a60:	4989      	ldr	r1, [pc, #548]	; (b4c88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x284>)
    SSID = inputBuffer.substring(5, commaIndex);
   b4a62:	4d8a      	ldr	r5, [pc, #552]	; (b4c8c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x288>)
    int commaIndex = inputBuffer.indexOf(",");
   b4a64:	a80f      	add	r0, sp, #60	; 0x3c
   b4a66:	f006 fa1c 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
   b4a6a:	a90f      	add	r1, sp, #60	; 0x3c
   b4a6c:	a803      	add	r0, sp, #12
   b4a6e:	f006 fb11 	bl	bb094 <_ZNK6String7indexOfERKS_>
   b4a72:	4604      	mov	r4, r0
   b4a74:	a80f      	add	r0, sp, #60	; 0x3c
   b4a76:	f006 f9c9 	bl	bae0c <_ZN6StringD1Ev>
    SSID = inputBuffer.substring(5, commaIndex);
   b4a7a:	4623      	mov	r3, r4
   b4a7c:	2205      	movs	r2, #5
   b4a7e:	a903      	add	r1, sp, #12
   b4a80:	a80f      	add	r0, sp, #60	; 0x3c
   b4a82:	f006 fb0b 	bl	bb09c <_ZNK6String9substringEjj>
   b4a86:	a90f      	add	r1, sp, #60	; 0x3c
   b4a88:	4628      	mov	r0, r5
   b4a8a:	f006 fa4a 	bl	baf22 <_ZN6StringaSEOS_>
   b4a8e:	a80f      	add	r0, sp, #60	; 0x3c
   b4a90:	f006 f9bc 	bl	bae0c <_ZN6StringD1Ev>
    password = inputBuffer.substring(commaIndex + 1);
   b4a94:	1c62      	adds	r2, r4, #1
   b4a96:	4c7e      	ldr	r4, [pc, #504]	; (b4c90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x28c>)
   b4a98:	a903      	add	r1, sp, #12
   b4a9a:	a80f      	add	r0, sp, #60	; 0x3c
   b4a9c:	f006 fb1e 	bl	bb0dc <_ZNK6String9substringEj>
   b4aa0:	a90f      	add	r1, sp, #60	; 0x3c
   b4aa2:	4620      	mov	r0, r4
   b4aa4:	f006 fa3d 	bl	baf22 <_ZN6StringaSEOS_>
   b4aa8:	a80f      	add	r0, sp, #60	; 0x3c
   b4aaa:	f006 f9af 	bl	bae0c <_ZN6StringD1Ev>
    Serial.printlnf("SSID: %s, password: %s", SSID.c_str(), password.c_str());
   b4aae:	f006 fed9 	bl	bb864 <_Z16_fetch_usbserialv>
   b4ab2:	682a      	ldr	r2, [r5, #0]
   b4ab4:	6823      	ldr	r3, [r4, #0]
   b4ab6:	4977      	ldr	r1, [pc, #476]	; (b4c94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x290>)
   b4ab8:	f7ff fcaa 	bl	b4410 <_ZN5Print8printlnfEPKcz>
	const char * c_str() const { return buffer; }
   b4abc:	682f      	ldr	r7, [r5, #0]
   b4abe:	6825      	ldr	r5, [r4, #0]
    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b4ac0:	b337      	cbz	r7, b4b10 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10c>
   b4ac2:	4638      	mov	r0, r7
   b4ac4:	f008 f8da 	bl	bcc7c <strlen>
   b4ac8:	4606      	mov	r6, r0
   b4aca:	b31d      	cbz	r5, b4b14 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x110>
   b4acc:	4628      	mov	r0, r5
   b4ace:	f008 f8d5 	bl	bcc7c <strlen>
   b4ad2:	4604      	mov	r4, r0

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   b4ad4:	2238      	movs	r2, #56	; 0x38
   b4ad6:	2100      	movs	r1, #0
   b4ad8:	a814      	add	r0, sp, #80	; 0x50
   b4ada:	f008 f887 	bl	bcbec <memset>
        creds.size = sizeof(creds);
   b4ade:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
   b4ae0:	e9cd 370f 	strd	r3, r7, [sp, #60]	; 0x3c
        creds.ssid_len = ssidLen;
        creds.password = password;
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4ae4:	486c      	ldr	r0, [pc, #432]	; (b4c98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x294>)
        creds.password_len = passwordLen;
   b4ae6:	9413      	str	r4, [sp, #76]	; 0x4c
        creds.security = WLanSecurityType(security);
   b4ae8:	2303      	movs	r3, #3
   b4aea:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4aee:	2300      	movs	r3, #0
   b4af0:	6840      	ldr	r0, [r0, #4]
   b4af2:	aa0f      	add	r2, sp, #60	; 0x3c
   b4af4:	4619      	mov	r1, r3
        creds.password = password;
   b4af6:	e9cd 6511 	strd	r6, r5, [sp, #68]	; 0x44
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4afa:	f004 fcbd 	bl	b9478 <network_set_credentials>
  String nameBuffer;
   b4afe:	a807      	add	r0, sp, #28
   b4b00:	f006 f984 	bl	bae0c <_ZN6StringD1Ev>
  String inputBuffer = "";
   b4b04:	a803      	add	r0, sp, #12
   b4b06:	f006 f981 	bl	bae0c <_ZN6StringD1Ev>
}
   b4b0a:	b023      	add	sp, #140	; 0x8c
   b4b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b4b10:	463e      	mov	r6, r7
   b4b12:	e7da      	b.n	b4aca <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xc6>
   b4b14:	462c      	mov	r4, r5
   b4b16:	e7dd      	b.n	b4ad4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xd0>
  else if(inputBuffer.indexOf("city:") == 0){
   b4b18:	4960      	ldr	r1, [pc, #384]	; (b4c9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x298>)
   b4b1a:	a80f      	add	r0, sp, #60	; 0x3c
   b4b1c:	f006 f9c1 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
   b4b20:	a90f      	add	r1, sp, #60	; 0x3c
   b4b22:	a803      	add	r0, sp, #12
   b4b24:	f006 fab6 	bl	bb094 <_ZNK6String7indexOfERKS_>
   b4b28:	4604      	mov	r4, r0
   b4b2a:	a80f      	add	r0, sp, #60	; 0x3c
   b4b2c:	f006 f96e 	bl	bae0c <_ZN6StringD1Ev>
   b4b30:	2c00      	cmp	r4, #0
   b4b32:	f040 808b 	bne.w	b4c4c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x248>
    inputBuffer = inputBuffer.substring(5);
   b4b36:	2205      	movs	r2, #5
   b4b38:	a903      	add	r1, sp, #12
   b4b3a:	a80f      	add	r0, sp, #60	; 0x3c
   b4b3c:	f006 face 	bl	bb0dc <_ZNK6String9substringEj>
   b4b40:	a90f      	add	r1, sp, #60	; 0x3c
   b4b42:	a803      	add	r0, sp, #12
   b4b44:	f006 f9ed 	bl	baf22 <_ZN6StringaSEOS_>
   b4b48:	a80f      	add	r0, sp, #60	; 0x3c
   b4b4a:	f006 f95f 	bl	bae0c <_ZN6StringD1Ev>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4b4e:	4d54      	ldr	r5, [pc, #336]	; (b4ca0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x29c>)
   b4b50:	4f54      	ldr	r7, [pc, #336]	; (b4ca4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a0>)
        cityIndex = i;
   b4b52:	f8df 8154 	ldr.w	r8, [pc, #340]	; b4ca8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a4>
   b4b56:	e9d5 2300 	ldrd	r2, r3, [r5]
   b4b5a:	1a9b      	subs	r3, r3, r2
   b4b5c:	10db      	asrs	r3, r3, #3
   b4b5e:	437b      	muls	r3, r7
    for(int i = 0; i < cities.size(); i++){
   b4b60:	42a3      	cmp	r3, r4
   b4b62:	d913      	bls.n	b4b8c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x188>
      { return _M_dataplus._M_p; }
   b4b64:	2328      	movs	r3, #40	; 0x28
   b4b66:	fb03 2204 	mla	r2, r3, r4, r2
      if(inputBuffer == String(cities[i].name.c_str())){
   b4b6a:	a80f      	add	r0, sp, #60	; 0x3c
   b4b6c:	68d1      	ldr	r1, [r2, #12]
   b4b6e:	f006 f998 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b4b72:	a90f      	add	r1, sp, #60	; 0x3c
   b4b74:	a803      	add	r0, sp, #12
   b4b76:	f006 fa5f 	bl	bb038 <_ZNK6String6equalsERKS_>
   b4b7a:	4606      	mov	r6, r0
   b4b7c:	a80f      	add	r0, sp, #60	; 0x3c
   b4b7e:	f006 f945 	bl	bae0c <_ZN6StringD1Ev>
   b4b82:	b10e      	cbz	r6, b4b88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x184>
        cityIndex = i;
   b4b84:	f8c8 4000 	str.w	r4, [r8]
    for(int i = 0; i < cities.size(); i++){
   b4b88:	3401      	adds	r4, #1
   b4b8a:	e7e4      	b.n	b4b56 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x152>
    if(cityIndex == -1){
   b4b8c:	4e46      	ldr	r6, [pc, #280]	; (b4ca8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a4>)
   b4b8e:	6833      	ldr	r3, [r6, #0]
   b4b90:	1c59      	adds	r1, r3, #1
   b4b92:	d105      	bne.n	b4ba0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x19c>
      txCharacteristic.setValue("incorrect city name");
   b4b94:	4945      	ldr	r1, [pc, #276]	; (b4cac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a8>)
   b4b96:	2200      	movs	r2, #0
        txCharacteristic.setValue("incorrect railway color");
   b4b98:	4837      	ldr	r0, [pc, #220]	; (b4c78 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x274>)
   b4b9a:	f004 ff8f 	bl	b9abc <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        return;
   b4b9e:	e7ae      	b.n	b4afe <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfa>
	return *(this->_M_impl._M_start + __n);
   b4ba0:	2428      	movs	r4, #40	; 0x28
   b4ba2:	4363      	muls	r3, r4
   b4ba4:	18d1      	adds	r1, r2, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4ba6:	58d3      	ldr	r3, [r2, r3]
   b4ba8:	6849      	ldr	r1, [r1, #4]
    addressArr = std::vector<int>(cities[cityIndex].slaveCountExpected, 0);
   b4baa:	4f41      	ldr	r7, [pc, #260]	; (b4cb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2ac>)
   b4bac:	1ac9      	subs	r1, r1, r3
   b4bae:	4b41      	ldr	r3, [pc, #260]	; (b4cb4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b0>)
   b4bb0:	1089      	asrs	r1, r1, #2
   b4bb2:	4359      	muls	r1, r3
    sequenceArr = std::vector<int>(cities[cityIndex].railways.size() * 2, 0);
   b4bb4:	aa0b      	add	r2, sp, #44	; 0x2c
   b4bb6:	ab02      	add	r3, sp, #8
   b4bb8:	f04f 0800 	mov.w	r8, #0
   b4bbc:	0049      	lsls	r1, r1, #1
   b4bbe:	a80f      	add	r0, sp, #60	; 0x3c
   b4bc0:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   b4bc4:	f7ff fe5e 	bl	b4884 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b4bc8:	a90f      	add	r1, sp, #60	; 0x3c
   b4bca:	483b      	ldr	r0, [pc, #236]	; (b4cb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b4>)
   b4bcc:	f7ff fe30 	bl	b4830 <_ZNSt6vectorIiSaIiEEaSEOS1_.isra.0>
      }
   b4bd0:	a80f      	add	r0, sp, #60	; 0x3c
   b4bd2:	f7ff fe23 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
	return *(this->_M_impl._M_start + __n);
   b4bd6:	6832      	ldr	r2, [r6, #0]
    addressArr = std::vector<int>(cities[cityIndex].slaveCountExpected, 0);
   b4bd8:	682b      	ldr	r3, [r5, #0]
   b4bda:	fb04 3302 	mla	r3, r4, r2, r3
   b4bde:	a80f      	add	r0, sp, #60	; 0x3c
   b4be0:	aa0b      	add	r2, sp, #44	; 0x2c
   b4be2:	6a59      	ldr	r1, [r3, #36]	; 0x24
   b4be4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   b4be8:	ab02      	add	r3, sp, #8
   b4bea:	f7ff fe4b 	bl	b4884 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b4bee:	a90f      	add	r1, sp, #60	; 0x3c
   b4bf0:	4638      	mov	r0, r7
   b4bf2:	f7ff fe1d 	bl	b4830 <_ZNSt6vectorIiSaIiEEaSEOS1_.isra.0>
      }
   b4bf6:	a80f      	add	r0, sp, #60	; 0x3c
   b4bf8:	f7ff fe10 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
    randomizeAddress();
   b4bfc:	f7ff fc16 	bl	b442c <_Z16randomizeAddressv>
    txCharacteristic.setValue("slave addresses sorted");
   b4c00:	4642      	mov	r2, r8
   b4c02:	492e      	ldr	r1, [pc, #184]	; (b4cbc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   b4c04:	481c      	ldr	r0, [pc, #112]	; (b4c78 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x274>)
   b4c06:	f004 ff59 	bl	b9abc <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    Serial.printlnf("turning on %i", addressArr[0]);
   b4c0a:	f006 fe2b 	bl	bb864 <_Z16_fetch_usbserialv>
   b4c0e:	683b      	ldr	r3, [r7, #0]
   b4c10:	492b      	ldr	r1, [pc, #172]	; (b4cc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2bc>)
   b4c12:	681a      	ldr	r2, [r3, #0]
   b4c14:	f7ff fbfc 	bl	b4410 <_ZN5Print8printlnfEPKcz>
    Wire.beginTransmission(addressArr[0]);
   b4c18:	f006 ff72 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b4c1c:	683b      	ldr	r3, [r7, #0]
   b4c1e:	6819      	ldr	r1, [r3, #0]
   b4c20:	f005 ff08 	bl	baa34 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('3');
   b4c24:	f006 ff6c 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b4c28:	2133      	movs	r1, #51	; 0x33
   b4c2a:	f7ff fafb 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b4c2e:	f006 ff67 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b4c32:	f005 ff06 	bl	baa42 <_ZN7TwoWire15endTransmissionEv>
    Serial.printlnf("city: %s", cities[cityIndex].name.c_str());
   b4c36:	f006 fe15 	bl	bb864 <_Z16_fetch_usbserialv>
	return *(this->_M_impl._M_start + __n);
   b4c3a:	6832      	ldr	r2, [r6, #0]
   b4c3c:	682b      	ldr	r3, [r5, #0]
   b4c3e:	4921      	ldr	r1, [pc, #132]	; (b4cc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c0>)
   b4c40:	fb04 3402 	mla	r4, r4, r2, r3
   b4c44:	68e2      	ldr	r2, [r4, #12]
   b4c46:	f7ff fbe3 	bl	b4410 <_ZN5Print8printlnfEPKcz>
   b4c4a:	e758      	b.n	b4afe <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfa>
  else if(inputBuffer.indexOf("color:") == 0){
   b4c4c:	491e      	ldr	r1, [pc, #120]	; (b4cc8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c4>)
   b4c4e:	a80f      	add	r0, sp, #60	; 0x3c
   b4c50:	f006 f927 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
   b4c54:	a90f      	add	r1, sp, #60	; 0x3c
   b4c56:	a803      	add	r0, sp, #12
   b4c58:	f006 fa1c 	bl	bb094 <_ZNK6String7indexOfERKS_>
   b4c5c:	4604      	mov	r4, r0
   b4c5e:	a80f      	add	r0, sp, #60	; 0x3c
   b4c60:	f006 f8d4 	bl	bae0c <_ZN6StringD1Ev>
   b4c64:	2c00      	cmp	r4, #0
   b4c66:	f040 8226 	bne.w	b50b6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6b2>
    if(cityIndex == -1){
   b4c6a:	4e0f      	ldr	r6, [pc, #60]	; (b4ca8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a4>)
   b4c6c:	6833      	ldr	r3, [r6, #0]
   b4c6e:	3301      	adds	r3, #1
   b4c70:	d12e      	bne.n	b4cd0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2cc>
      txCharacteristic.setValue("city not set");
   b4c72:	4916      	ldr	r1, [pc, #88]	; (b4ccc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>)
   b4c74:	4622      	mov	r2, r4
   b4c76:	e78f      	b.n	b4b98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x194>
   b4c78:	2003e6a4 	.word	0x2003e6a4
   b4c7c:	000bee10 	.word	0x000bee10
   b4c80:	000bf29a 	.word	0x000bf29a
   b4c84:	000bee13 	.word	0x000bee13
   b4c88:	000bee19 	.word	0x000bee19
   b4c8c:	20035238 	.word	0x20035238
   b4c90:	2003e46c 	.word	0x2003e46c
   b4c94:	000bee1b 	.word	0x000bee1b
   b4c98:	2003e718 	.word	0x2003e718
   b4c9c:	000bee32 	.word	0x000bee32
   b4ca0:	200353e8 	.word	0x200353e8
   b4ca4:	cccccccd 	.word	0xcccccccd
   b4ca8:	20035040 	.word	0x20035040
   b4cac:	000bee38 	.word	0x000bee38
   b4cb0:	20035290 	.word	0x20035290
   b4cb4:	684bda13 	.word	0x684bda13
   b4cb8:	2003e694 	.word	0x2003e694
   b4cbc:	000bee4c 	.word	0x000bee4c
   b4cc0:	000bee63 	.word	0x000bee63
   b4cc4:	000bee71 	.word	0x000bee71
   b4cc8:	000bee7a 	.word	0x000bee7a
   b4ccc:	000bee81 	.word	0x000bee81
    inputBuffer = inputBuffer.substring(6);
   b4cd0:	2206      	movs	r2, #6
   b4cd2:	a903      	add	r1, sp, #12
   b4cd4:	a80f      	add	r0, sp, #60	; 0x3c
   b4cd6:	f006 fa01 	bl	bb0dc <_ZNK6String9substringEj>
   b4cda:	a90f      	add	r1, sp, #60	; 0x3c
   b4cdc:	a803      	add	r0, sp, #12
   b4cde:	f006 f920 	bl	baf22 <_ZN6StringaSEOS_>
   b4ce2:	a80f      	add	r0, sp, #60	; 0x3c
   b4ce4:	f006 f892 	bl	bae0c <_ZN6StringD1Ev>
   b4ce8:	f8df 92b0 	ldr.w	r9, [pc, #688]	; b4f9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x598>
    if(bleCount < cities[cityIndex].railways.size()){
   b4cec:	4fa1      	ldr	r7, [pc, #644]	; (b4f74 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x570>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4cee:	f8df 82c8 	ldr.w	r8, [pc, #712]	; b4fb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b4>
    nameBuffer = inputBuffer;
   b4cf2:	a903      	add	r1, sp, #12
   b4cf4:	a807      	add	r0, sp, #28
   b4cf6:	f006 f905 	bl	baf04 <_ZN6StringaSERKS_>
    if(bleCount < cities[cityIndex].railways.size()){
   b4cfa:	6831      	ldr	r1, [r6, #0]
	return *(this->_M_impl._M_start + __n);
   b4cfc:	f8d9 0000 	ldr.w	r0, [r9]
   b4d00:	2228      	movs	r2, #40	; 0x28
   b4d02:	434a      	muls	r2, r1
   b4d04:	1883      	adds	r3, r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4d06:	5882      	ldr	r2, [r0, r2]
   b4d08:	685b      	ldr	r3, [r3, #4]
   b4d0a:	1a9b      	subs	r3, r3, r2
   b4d0c:	109b      	asrs	r3, r3, #2
   b4d0e:	683a      	ldr	r2, [r7, #0]
   b4d10:	fb08 f303 	mul.w	r3, r8, r3
   b4d14:	429a      	cmp	r2, r3
   b4d16:	f080 80f4 	bcs.w	b4f02 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4fe>
      if((cityIndex == 0 || cityIndex == 1) && (inputBuffer == "green1" || inputBuffer == "green2")){
   b4d1a:	2901      	cmp	r1, #1
   b4d1c:	d808      	bhi.n	b4d30 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x32c>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4d1e:	4996      	ldr	r1, [pc, #600]	; (b4f78 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x574>)
   b4d20:	a803      	add	r0, sp, #12
   b4d22:	f006 f996 	bl	bb052 <_ZNK6String6equalsEPKc>
   b4d26:	b328      	cbz	r0, b4d74 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x370>
        nameBuffer = "green";
   b4d28:	4994      	ldr	r1, [pc, #592]	; (b4f7c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x578>)
   b4d2a:	a807      	add	r0, sp, #28
   b4d2c:	f006 f901 	bl	baf32 <_ZN6StringaSEPKc>
   b4d30:	f04f 0b00 	mov.w	fp, #0
	return *(this->_M_impl._M_start + __n);
   b4d34:	f04f 0a28 	mov.w	sl, #40	; 0x28
      for(int i = 0; i < cities[cityIndex].railways.size(); i++){
   b4d38:	6835      	ldr	r5, [r6, #0]
   b4d3a:	f8d9 0000 	ldr.w	r0, [r9]
   b4d3e:	fb0a f105 	mul.w	r1, sl, r5
   b4d42:	1842      	adds	r2, r0, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4d44:	5841      	ldr	r1, [r0, r1]
   b4d46:	6852      	ldr	r2, [r2, #4]
   b4d48:	1a52      	subs	r2, r2, r1
   b4d4a:	1092      	asrs	r2, r2, #2
   b4d4c:	fb08 f202 	mul.w	r2, r8, r2
   b4d50:	455a      	cmp	r2, fp
   b4d52:	d93b      	bls.n	b4dcc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3c8>
        if((cityIndex != 0 || nameBuffer != String(purpleLineCTA.name.c_str())) && String(cities[cityIndex].railways[i].name.c_str()) == nameBuffer){
   b4d54:	b9ad      	cbnz	r5, b4d82 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x37e>
   b4d56:	4b8a      	ldr	r3, [pc, #552]	; (b4f80 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x57c>)
   b4d58:	a80b      	add	r0, sp, #44	; 0x2c
   b4d5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b4d5c:	f006 f8a1 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
   b4d60:	a90b      	add	r1, sp, #44	; 0x2c
   b4d62:	a807      	add	r0, sp, #28
   b4d64:	f006 f968 	bl	bb038 <_ZNK6String6equalsERKS_>
   b4d68:	2800      	cmp	r0, #0
   b4d6a:	d02d      	beq.n	b4dc8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3c4>
   b4d6c:	a80b      	add	r0, sp, #44	; 0x2c
   b4d6e:	f006 f84d 	bl	bae0c <_ZN6StringD1Ev>
   b4d72:	e022      	b.n	b4dba <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3b6>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4d74:	4983      	ldr	r1, [pc, #524]	; (b4f84 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x580>)
   b4d76:	a803      	add	r0, sp, #12
   b4d78:	f006 f96b 	bl	bb052 <_ZNK6String6equalsEPKc>
      if((cityIndex == 0 || cityIndex == 1) && (inputBuffer == "green1" || inputBuffer == "green2")){
   b4d7c:	2800      	cmp	r0, #0
   b4d7e:	d1d3      	bne.n	b4d28 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x324>
   b4d80:	e7d6      	b.n	b4d30 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x32c>
        if((cityIndex != 0 || nameBuffer != String(purpleLineCTA.name.c_str())) && String(cities[cityIndex].railways[i].name.c_str()) == nameBuffer){
   b4d82:	2200      	movs	r2, #0
	return *(this->_M_impl._M_start + __n);
   b4d84:	6831      	ldr	r1, [r6, #0]
   b4d86:	f8d9 0000 	ldr.w	r0, [r9]
   b4d8a:	9201      	str	r2, [sp, #4]
   b4d8c:	fb0a f101 	mul.w	r1, sl, r1
   b4d90:	5841      	ldr	r1, [r0, r1]
   b4d92:	206c      	movs	r0, #108	; 0x6c
   b4d94:	fb00 110b 	mla	r1, r0, fp, r1
   b4d98:	a80f      	add	r0, sp, #60	; 0x3c
   b4d9a:	6b09      	ldr	r1, [r1, #48]	; 0x30
   b4d9c:	f006 f881 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b4da0:	a907      	add	r1, sp, #28
   b4da2:	a80f      	add	r0, sp, #60	; 0x3c
   b4da4:	f006 f948 	bl	bb038 <_ZNK6String6equalsERKS_>
   b4da8:	1e05      	subs	r5, r0, #0
   b4daa:	a80f      	add	r0, sp, #60	; 0x3c
   b4dac:	bf18      	it	ne
   b4dae:	2501      	movne	r5, #1
   b4db0:	f006 f82c 	bl	bae0c <_ZN6StringD1Ev>
   b4db4:	9a01      	ldr	r2, [sp, #4]
   b4db6:	2a00      	cmp	r2, #0
   b4db8:	d1d8      	bne.n	b4d6c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x368>
   b4dba:	b115      	cbz	r5, b4dc2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3be>
          railwayIndex = i;
   b4dbc:	4b72      	ldr	r3, [pc, #456]	; (b4f88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x584>)
   b4dbe:	f8c3 b000 	str.w	fp, [r3]
      for(int i = 0; i < cities[cityIndex].railways.size(); i++){
   b4dc2:	f10b 0b01 	add.w	fp, fp, #1
   b4dc6:	e7b7      	b.n	b4d38 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x334>
        if((cityIndex != 0 || nameBuffer != String(purpleLineCTA.name.c_str())) && String(cities[cityIndex].railways[i].name.c_str()) == nameBuffer){
   b4dc8:	2201      	movs	r2, #1
   b4dca:	e7db      	b.n	b4d84 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x380>
      if(cityIndex == 1 && inputBuffer == "green1"){
   b4dcc:	2d01      	cmp	r5, #1
   b4dce:	4d6e      	ldr	r5, [pc, #440]	; (b4f88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x584>)
   b4dd0:	d107      	bne.n	b4de2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3de>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4dd2:	4969      	ldr	r1, [pc, #420]	; (b4f78 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x574>)
   b4dd4:	a803      	add	r0, sp, #12
   b4dd6:	f006 f93c 	bl	bb052 <_ZNK6String6equalsEPKc>
   b4dda:	b110      	cbz	r0, b4de2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3de>
        railwayIndex--;
   b4ddc:	682b      	ldr	r3, [r5, #0]
   b4dde:	3b01      	subs	r3, #1
   b4de0:	602b      	str	r3, [r5, #0]
      Serial.printlnf("railway index: %i", railwayIndex);
   b4de2:	f006 fd3f 	bl	bb864 <_Z16_fetch_usbserialv>
   b4de6:	682a      	ldr	r2, [r5, #0]
   b4de8:	4968      	ldr	r1, [pc, #416]	; (b4f8c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x588>)
   b4dea:	f7ff fb11 	bl	b4410 <_ZN5Print8printlnfEPKcz>
      if(railwayIndex == -1){
   b4dee:	682b      	ldr	r3, [r5, #0]
   b4df0:	3301      	adds	r3, #1
   b4df2:	d102      	bne.n	b4dfa <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3f6>
        txCharacteristic.setValue("incorrect railway color");
   b4df4:	4966      	ldr	r1, [pc, #408]	; (b4f90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x58c>)
   b4df6:	2200      	movs	r2, #0
   b4df8:	e6ce      	b.n	b4b98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x194>
   b4dfa:	4d66      	ldr	r5, [pc, #408]	; (b4f94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x590>)
        Serial.printlnf("address: %i", addressArr[bleCount]);
   b4dfc:	f8df a174 	ldr.w	sl, [pc, #372]	; b4f74 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x570>
      for(int i = 0; i < 2; i++){
   b4e00:	f04f 0900 	mov.w	r9, #0
        Serial.printlnf("address: %i", addressArr[bleCount]);
   b4e04:	f006 fd2e 	bl	bb864 <_Z16_fetch_usbserialv>
   b4e08:	682b      	ldr	r3, [r5, #0]
   b4e0a:	f8da 2000 	ldr.w	r2, [sl]
   b4e0e:	4962      	ldr	r1, [pc, #392]	; (b4f98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x594>)
   b4e10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
        if(cities[cityIndex].railways[railwayIndex].outputs[i].size() == 0 || (cityIndex == 0 && cities[cityIndex].railways[railwayIndex].name == purpleLineCTA.name)){
   b4e14:	f8df b170 	ldr.w	fp, [pc, #368]	; b4f88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x584>
        Serial.printlnf("address: %i", addressArr[bleCount]);
   b4e18:	f7ff fafa 	bl	b4410 <_ZN5Print8printlnfEPKcz>
   b4e1c:	4a5f      	ldr	r2, [pc, #380]	; (b4f9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x598>)
        if(cities[cityIndex].railways[railwayIndex].outputs[i].size() == 0 || (cityIndex == 0 && cities[cityIndex].railways[railwayIndex].name == purpleLineCTA.name)){
   b4e1e:	6831      	ldr	r1, [r6, #0]
   b4e20:	6810      	ldr	r0, [r2, #0]
   b4e22:	f8db 3000 	ldr.w	r3, [fp]
   b4e26:	2228      	movs	r2, #40	; 0x28
   b4e28:	434a      	muls	r2, r1
   b4e2a:	5880      	ldr	r0, [r0, r2]
   b4e2c:	226c      	movs	r2, #108	; 0x6c
   b4e2e:	fb02 0003 	mla	r0, r2, r3, r0
   b4e32:	220c      	movs	r2, #12
   b4e34:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
   b4e38:	fb02 f209 	mul.w	r2, r2, r9
   b4e3c:	eb0c 0e02 	add.w	lr, ip, r2
   b4e40:	f85c 2002 	ldr.w	r2, [ip, r2]
   b4e44:	f8de e004 	ldr.w	lr, [lr, #4]
   b4e48:	4596      	cmp	lr, r2
   b4e4a:	d01a      	beq.n	b4e82 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x47e>
   b4e4c:	b181      	cbz	r1, b4e70 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x46c>
            sequenceArr[2 * railwayIndex + i] = addressArr[bleCount];
   b4e4e:	682b      	ldr	r3, [r5, #0]
   b4e50:	f8da 2000 	ldr.w	r2, [sl]
   b4e54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b4e58:	4b4b      	ldr	r3, [pc, #300]	; (b4f88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x584>)
   b4e5a:	681b      	ldr	r3, [r3, #0]
   b4e5c:	eb09 0343 	add.w	r3, r9, r3, lsl #1
              sequenceArr[2 * railwayIndex + 1] = addressArr[bleCount];
   b4e60:	4a4f      	ldr	r2, [pc, #316]	; (b4fa0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x59c>)
   b4e62:	6812      	ldr	r2, [r2, #0]
   b4e64:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   b4e68:	e0bf      	b.n	b4fea <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e6>
   b4e6a:	f04f 0901 	mov.w	r9, #1
   b4e6e:	e7c9      	b.n	b4e04 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x400>
        if(cities[cityIndex].railways[railwayIndex].outputs[i].size() == 0 || (cityIndex == 0 && cities[cityIndex].railways[railwayIndex].name == purpleLineCTA.name)){
   b4e70:	494c      	ldr	r1, [pc, #304]	; (b4fa4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a0>)
   b4e72:	9301      	str	r3, [sp, #4]
   b4e74:	3030      	adds	r0, #48	; 0x30
   b4e76:	f7ff fdb3 	bl	b49e0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b4e7a:	9b01      	ldr	r3, [sp, #4]
   b4e7c:	2800      	cmp	r0, #0
   b4e7e:	f000 809d 	beq.w	b4fbc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b8>
          sequenceArr[2 * railwayIndex + i] = 0;
   b4e82:	4a47      	ldr	r2, [pc, #284]	; (b4fa0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x59c>)
   b4e84:	eb09 0343 	add.w	r3, r9, r3, lsl #1
   b4e88:	6812      	ldr	r2, [r2, #0]
   b4e8a:	2100      	movs	r1, #0
   b4e8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      for(int i = 0; i < 2; i++){
   b4e90:	f1b9 0f00 	cmp.w	r9, #0
   b4e94:	d0e9      	beq.n	b4e6a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x466>
      Serial.printlnf("turning off %i", addressArr[bleCount]);
   b4e96:	f006 fce5 	bl	bb864 <_Z16_fetch_usbserialv>
   b4e9a:	682b      	ldr	r3, [r5, #0]
   b4e9c:	683a      	ldr	r2, [r7, #0]
   b4e9e:	4942      	ldr	r1, [pc, #264]	; (b4fa8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a4>)
   b4ea0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   b4ea4:	f7ff fab4 	bl	b4410 <_ZN5Print8printlnfEPKcz>
      Wire.beginTransmission(addressArr[bleCount]);
   b4ea8:	f006 fe2a 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b4eac:	683a      	ldr	r2, [r7, #0]
   b4eae:	682b      	ldr	r3, [r5, #0]
   b4eb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b4eb4:	f005 fdbe 	bl	baa34 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('4');
   b4eb8:	f006 fe22 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b4ebc:	2134      	movs	r1, #52	; 0x34
   b4ebe:	f7ff f9b1 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4ec2:	f006 fe1d 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b4ec6:	f005 fdbc 	bl	baa42 <_ZN7TwoWire15endTransmissionEv>
      Serial.printlnf("turning on %i", addressArr[bleCount + 1]);
   b4eca:	f006 fccb 	bl	bb864 <_Z16_fetch_usbserialv>
   b4ece:	683b      	ldr	r3, [r7, #0]
   b4ed0:	682a      	ldr	r2, [r5, #0]
   b4ed2:	4936      	ldr	r1, [pc, #216]	; (b4fac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a8>)
   b4ed4:	3301      	adds	r3, #1
   b4ed6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   b4eda:	f7ff fa99 	bl	b4410 <_ZN5Print8printlnfEPKcz>
      Wire.beginTransmission(addressArr[bleCount + 1]);
   b4ede:	f006 fe0f 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b4ee2:	683b      	ldr	r3, [r7, #0]
   b4ee4:	682a      	ldr	r2, [r5, #0]
   b4ee6:	3301      	adds	r3, #1
   b4ee8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   b4eec:	f005 fda2 	bl	baa34 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('3');
   b4ef0:	f006 fe06 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b4ef4:	2133      	movs	r1, #51	; 0x33
   b4ef6:	f7ff f995 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4efa:	f006 fe01 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b4efe:	f005 fda0 	bl	baa42 <_ZN7TwoWire15endTransmissionEv>
   b4f02:	6832      	ldr	r2, [r6, #0]
    if(bleCount == cities[cityIndex].railways.size() - 1){
   b4f04:	4d1b      	ldr	r5, [pc, #108]	; (b4f74 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x570>)
   b4f06:	2328      	movs	r3, #40	; 0x28
   b4f08:	435a      	muls	r2, r3
   b4f0a:	4b24      	ldr	r3, [pc, #144]	; (b4f9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x598>)
   b4f0c:	6819      	ldr	r1, [r3, #0]
   b4f0e:	188b      	adds	r3, r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4f10:	588a      	ldr	r2, [r1, r2]
   b4f12:	685b      	ldr	r3, [r3, #4]
   b4f14:	1a9b      	subs	r3, r3, r2
   b4f16:	109b      	asrs	r3, r3, #2
   b4f18:	fb08 f803 	mul.w	r8, r8, r3
   b4f1c:	682b      	ldr	r3, [r5, #0]
   b4f1e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b4f22:	4598      	cmp	r8, r3
   b4f24:	f040 80c3 	bne.w	b50ae <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6aa>
      Serial.println("BLE finished");
   b4f28:	f006 fc9c 	bl	bb864 <_Z16_fetch_usbserialv>
   b4f2c:	4920      	ldr	r1, [pc, #128]	; (b4fb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ac>)
   b4f2e:	4e19      	ldr	r6, [pc, #100]	; (b4f94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x590>)
        Serial.printlnf("turning off: %i", i);
   b4f30:	4f20      	ldr	r7, [pc, #128]	; (b4fb4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b0>)
      Serial.println("BLE finished");
   b4f32:	f005 ff0c 	bl	bad4e <_ZN5Print7printlnEPKc>
   b4f36:	e9d6 2300 	ldrd	r2, r3, [r6]
   b4f3a:	1a9b      	subs	r3, r3, r2
      for(int i = 0; i < addressArr.size(); i++){
   b4f3c:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b4f40:	f080 80a1 	bcs.w	b5086 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x682>
        Serial.printlnf("turning off: %i", i);
   b4f44:	f006 fc8e 	bl	bb864 <_Z16_fetch_usbserialv>
   b4f48:	4622      	mov	r2, r4
   b4f4a:	4639      	mov	r1, r7
   b4f4c:	f7ff fa60 	bl	b4410 <_ZN5Print8printlnfEPKcz>
        Wire.beginTransmission(addressArr[i]);
   b4f50:	f006 fdd6 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b4f54:	6833      	ldr	r3, [r6, #0]
   b4f56:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   b4f5a:	f005 fd6b 	bl	baa34 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('4');
   b4f5e:	f006 fdcf 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b4f62:	2134      	movs	r1, #52	; 0x34
   b4f64:	f7ff f95e 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b4f68:	f006 fdca 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b4f6c:	f005 fd69 	bl	baa42 <_ZN7TwoWire15endTransmissionEv>
      for(int i = 0; i < addressArr.size(); i++){
   b4f70:	3401      	adds	r4, #1
   b4f72:	e7e0      	b.n	b4f36 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x532>
   b4f74:	2003529c 	.word	0x2003529c
   b4f78:	000bee8e 	.word	0x000bee8e
   b4f7c:	000bee95 	.word	0x000bee95
   b4f80:	2003e4e8 	.word	0x2003e4e8
   b4f84:	000bee9b 	.word	0x000bee9b
   b4f88:	20035054 	.word	0x20035054
   b4f8c:	000beea2 	.word	0x000beea2
   b4f90:	000beeb4 	.word	0x000beeb4
   b4f94:	20035290 	.word	0x20035290
   b4f98:	000beecc 	.word	0x000beecc
   b4f9c:	200353e8 	.word	0x200353e8
   b4fa0:	2003e694 	.word	0x2003e694
   b4fa4:	2003e518 	.word	0x2003e518
   b4fa8:	000beed8 	.word	0x000beed8
   b4fac:	000bee63 	.word	0x000bee63
   b4fb0:	000beee7 	.word	0x000beee7
   b4fb4:	000beef4 	.word	0x000beef4
   b4fb8:	684bda13 	.word	0x684bda13
   b4fbc:	495e      	ldr	r1, [pc, #376]	; (b5138 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x734>)
   b4fbe:	a807      	add	r0, sp, #28
   b4fc0:	f006 f847 	bl	bb052 <_ZNK6String6equalsEPKc>
          if(cityIndex == 0 && nameBuffer == "green"){
   b4fc4:	2800      	cmp	r0, #0
   b4fc6:	f43f af42 	beq.w	b4e4e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44a>
   b4fca:	495c      	ldr	r1, [pc, #368]	; (b513c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x738>)
   b4fcc:	a803      	add	r0, sp, #12
   b4fce:	f006 f840 	bl	bb052 <_ZNK6String6equalsEPKc>
            if(inputBuffer == "green1"){
   b4fd2:	b348      	cbz	r0, b5028 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x624>
	return *(this->_M_impl._M_start + __n);
   b4fd4:	f8da 2000 	ldr.w	r2, [sl]
              sequenceArr[2 * railwayIndex] = addressArr[bleCount];
   b4fd8:	682b      	ldr	r3, [r5, #0]
   b4fda:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b4fde:	4b58      	ldr	r3, [pc, #352]	; (b5140 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x73c>)
   b4fe0:	f8db 2000 	ldr.w	r2, [fp]
   b4fe4:	681b      	ldr	r3, [r3, #0]
   b4fe6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
          if(cityIndex == 0){
   b4fea:	6833      	ldr	r3, [r6, #0]
   b4fec:	2b00      	cmp	r3, #0
   b4fee:	f47f af4f 	bne.w	b4e90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x48c>
   b4ff2:	4b54      	ldr	r3, [pc, #336]	; (b5144 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x740>)
            if(inputBuffer == String(brownLineCTA.name.c_str())){
   b4ff4:	a80f      	add	r0, sp, #60	; 0x3c
   b4ff6:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b4ff8:	f005 ff53 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b4ffc:	a90f      	add	r1, sp, #60	; 0x3c
   b4ffe:	a803      	add	r0, sp, #12
   b5000:	f006 f81a 	bl	bb038 <_ZNK6String6equalsERKS_>
   b5004:	4683      	mov	fp, r0
   b5006:	a80f      	add	r0, sp, #60	; 0x3c
   b5008:	f005 ff00 	bl	bae0c <_ZN6StringD1Ev>
   b500c:	f1bb 0f00 	cmp.w	fp, #0
   b5010:	d01a      	beq.n	b5048 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x644>
            brownLineCTAAdr = sequenceArr[2 * railwayIndex + i];
   b5012:	4b4d      	ldr	r3, [pc, #308]	; (b5148 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x744>)
   b5014:	4a4a      	ldr	r2, [pc, #296]	; (b5140 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x73c>)
   b5016:	681b      	ldr	r3, [r3, #0]
   b5018:	6812      	ldr	r2, [r2, #0]
   b501a:	eb09 0343 	add.w	r3, r9, r3, lsl #1
   b501e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   b5022:	4b4a      	ldr	r3, [pc, #296]	; (b514c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x748>)
              greenLineCTAAdr[0] = sequenceArr[2 * railwayIndex];
   b5024:	601a      	str	r2, [r3, #0]
   b5026:	e733      	b.n	b4e90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x48c>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b5028:	4949      	ldr	r1, [pc, #292]	; (b5150 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x74c>)
   b502a:	a803      	add	r0, sp, #12
   b502c:	f006 f811 	bl	bb052 <_ZNK6String6equalsEPKc>
            }else if(inputBuffer == "green2"){
   b5030:	2800      	cmp	r0, #0
   b5032:	d0da      	beq.n	b4fea <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e6>
              sequenceArr[2 * railwayIndex + 1] = addressArr[bleCount];
   b5034:	682b      	ldr	r3, [r5, #0]
   b5036:	f8da 2000 	ldr.w	r2, [sl]
   b503a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b503e:	f8db 3000 	ldr.w	r3, [fp]
   b5042:	005b      	lsls	r3, r3, #1
   b5044:	3301      	adds	r3, #1
   b5046:	e70b      	b.n	b4e60 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x45c>
   b5048:	493c      	ldr	r1, [pc, #240]	; (b513c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x738>)
   b504a:	a803      	add	r0, sp, #12
   b504c:	f006 f801 	bl	bb052 <_ZNK6String6equalsEPKc>
            }else if(inputBuffer == "green1"){
   b5050:	b138      	cbz	r0, b5062 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x65e>
              greenLineCTAAdr[0] = sequenceArr[2 * railwayIndex];
   b5052:	4b3d      	ldr	r3, [pc, #244]	; (b5148 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x744>)
   b5054:	681a      	ldr	r2, [r3, #0]
   b5056:	4b3a      	ldr	r3, [pc, #232]	; (b5140 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x73c>)
   b5058:	681b      	ldr	r3, [r3, #0]
   b505a:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
   b505e:	4b3d      	ldr	r3, [pc, #244]	; (b5154 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x750>)
   b5060:	e7e0      	b.n	b5024 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x620>
   b5062:	493b      	ldr	r1, [pc, #236]	; (b5150 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x74c>)
   b5064:	a803      	add	r0, sp, #12
   b5066:	f005 fff4 	bl	bb052 <_ZNK6String6equalsEPKc>
            }else if(inputBuffer == "green2"){
   b506a:	2800      	cmp	r0, #0
   b506c:	f43f af10 	beq.w	b4e90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x48c>
              greenLineCTAAdr[1] = sequenceArr[2 * railwayIndex + 1];
   b5070:	4b35      	ldr	r3, [pc, #212]	; (b5148 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x744>)
   b5072:	4a33      	ldr	r2, [pc, #204]	; (b5140 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x73c>)
   b5074:	681b      	ldr	r3, [r3, #0]
   b5076:	6812      	ldr	r2, [r2, #0]
   b5078:	005b      	lsls	r3, r3, #1
   b507a:	3301      	adds	r3, #1
   b507c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   b5080:	4b34      	ldr	r3, [pc, #208]	; (b5154 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x750>)
   b5082:	605a      	str	r2, [r3, #4]
   b5084:	e704      	b.n	b4e90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x48c>
      userInput = true;
   b5086:	4b34      	ldr	r3, [pc, #208]	; (b5158 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x754>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b5088:	4c34      	ldr	r4, [pc, #208]	; (b515c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x758>)
   b508a:	2201      	movs	r2, #1
   b508c:	701a      	strb	r2, [r3, #0]
        network_on(*this, 0, 0, NULL);
   b508e:	2300      	movs	r3, #0
   b5090:	461a      	mov	r2, r3
   b5092:	4619      	mov	r1, r3
   b5094:	6860      	ldr	r0, [r4, #4]
   b5096:	f004 f9c7 	bl	b9428 <network_on>
        network_connect(*this, flags, 0, NULL);
   b509a:	2300      	movs	r3, #0
   b509c:	6860      	ldr	r0, [r4, #4]
   b509e:	4619      	mov	r1, r3
   b50a0:	461a      	mov	r2, r3
   b50a2:	f004 f9a1 	bl	b93e8 <network_connect>
      client.connect("sparkclient");
   b50a6:	492e      	ldr	r1, [pc, #184]	; (b5160 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x75c>)
   b50a8:	482e      	ldr	r0, [pc, #184]	; (b5164 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x760>)
   b50aa:	f003 ff3f 	bl	b8f2c <_ZN4MQTT7connectEPKc>
    bleCount++;
   b50ae:	682b      	ldr	r3, [r5, #0]
   b50b0:	3301      	adds	r3, #1
   b50b2:	602b      	str	r3, [r5, #0]
   b50b4:	e523      	b.n	b4afe <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfa>
  }else if(inputBuffer.indexOf("reset") == 0){
   b50b6:	492c      	ldr	r1, [pc, #176]	; (b5168 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x764>)
   b50b8:	a80f      	add	r0, sp, #60	; 0x3c
   b50ba:	f005 fef2 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
   b50be:	a90f      	add	r1, sp, #60	; 0x3c
   b50c0:	a803      	add	r0, sp, #12
   b50c2:	f005 ffe7 	bl	bb094 <_ZNK6String7indexOfERKS_>
   b50c6:	4604      	mov	r4, r0
   b50c8:	a80f      	add	r0, sp, #60	; 0x3c
   b50ca:	f005 fe9f 	bl	bae0c <_ZN6StringD1Ev>
   b50ce:	2c00      	cmp	r4, #0
   b50d0:	f47f ad15 	bne.w	b4afe <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfa>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b50d4:	4d25      	ldr	r5, [pc, #148]	; (b516c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x768>)
      Serial.printlnf("turning off: %i", i);
   b50d6:	4e26      	ldr	r6, [pc, #152]	; (b5170 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x76c>)
   b50d8:	e9d5 2300 	ldrd	r2, r3, [r5]
   b50dc:	1a9b      	subs	r3, r3, r2
    for(int i = 0; i < addressArr.size(); i++){
   b50de:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b50e2:	d217      	bcs.n	b5114 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x710>
      Serial.printlnf("turning off: %i", i);
   b50e4:	f006 fbbe 	bl	bb864 <_Z16_fetch_usbserialv>
   b50e8:	4622      	mov	r2, r4
   b50ea:	4631      	mov	r1, r6
   b50ec:	f7ff f990 	bl	b4410 <_ZN5Print8printlnfEPKcz>
      Wire.beginTransmission(addressArr[i]);
   b50f0:	f006 fd06 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b50f4:	682b      	ldr	r3, [r5, #0]
   b50f6:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   b50fa:	f005 fc9b 	bl	baa34 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('4');
   b50fe:	f006 fcff 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b5102:	2134      	movs	r1, #52	; 0x34
   b5104:	f7ff f88e 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b5108:	f006 fcfa 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b510c:	f005 fc99 	bl	baa42 <_ZN7TwoWire15endTransmissionEv>
    for(int i = 0; i < addressArr.size(); i++){
   b5110:	3401      	adds	r4, #1
   b5112:	e7e1      	b.n	b50d8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6d4>
    bleCount = 0;
   b5114:	4a17      	ldr	r2, [pc, #92]	; (b5174 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x770>)
    cityIndex = -1;
   b5116:	4918      	ldr	r1, [pc, #96]	; (b5178 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x774>)
    bleCount = 0;
   b5118:	2300      	movs	r3, #0
   b511a:	6013      	str	r3, [r2, #0]
    cityIndex = -1;
   b511c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5120:	600a      	str	r2, [r1, #0]
    railwayIndex = -1;
   b5122:	4909      	ldr	r1, [pc, #36]	; (b5148 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x744>)
   b5124:	600a      	str	r2, [r1, #0]
    userInput = false;
   b5126:	4a0c      	ldr	r2, [pc, #48]	; (b5158 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x754>)
   b5128:	7013      	strb	r3, [r2, #0]
    Serial.println("reset done");
   b512a:	f006 fb9b 	bl	bb864 <_Z16_fetch_usbserialv>
   b512e:	4913      	ldr	r1, [pc, #76]	; (b517c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x778>)
   b5130:	f005 fe0d 	bl	bad4e <_ZN5Print7printlnEPKc>
   b5134:	e4e3      	b.n	b4afe <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfa>
   b5136:	bf00      	nop
   b5138:	000bee95 	.word	0x000bee95
   b513c:	000bee8e 	.word	0x000bee8e
   b5140:	2003e694 	.word	0x2003e694
   b5144:	20035378 	.word	0x20035378
   b5148:	20035054 	.word	0x20035054
   b514c:	200353e4 	.word	0x200353e4
   b5150:	000bee9b 	.word	0x000bee9b
   b5154:	200355a8 	.word	0x200355a8
   b5158:	2003e6ac 	.word	0x2003e6ac
   b515c:	2003e718 	.word	0x2003e718
   b5160:	000bef04 	.word	0x000bef04
   b5164:	200353f8 	.word	0x200353f8
   b5168:	000bef10 	.word	0x000bef10
   b516c:	20035290 	.word	0x20035290
   b5170:	000beef4 	.word	0x000beef4
   b5174:	2003529c 	.word	0x2003529c
   b5178:	20035040 	.word	0x20035040
   b517c:	000bef16 	.word	0x000bef16

000b5180 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5180:	2900      	cmp	r1, #0
      _M_create_storage(size_t __n)
   b5182:	b538      	push	{r3, r4, r5, lr}
   b5184:	4604      	mov	r4, r0
      _M_allocate(size_t __n)
   b5186:	ea4f 0581 	mov.w	r5, r1, lsl #2
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b518a:	d00c      	beq.n	b51a6 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x26>
	if (__n > this->_M_max_size())
   b518c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   b5190:	d301      	bcc.n	b5196 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x16>
	  std::__throw_bad_alloc();
   b5192:	f006 fd1b 	bl	bbbcc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5196:	4628      	mov	r0, r5
   b5198:	f7fe ff7d 	bl	b4096 <_Znwj>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b519c:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b51a0:	4428      	add	r0, r5
   b51a2:	60a0      	str	r0, [r4, #8]
      }
   b51a4:	bd38      	pop	{r3, r4, r5, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b51a6:	4608      	mov	r0, r1
   b51a8:	e7f8      	b.n	b519c <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x1c>

000b51aa <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b51aa:	b538      	push	{r3, r4, r5, lr}
   b51ac:	4604      	mov	r4, r0
   b51ae:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b51b0:	42ac      	cmp	r4, r5
   b51b2:	d004      	beq.n	b51be <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x14>
      }
   b51b4:	4620      	mov	r0, r4
   b51b6:	f7ff fb31 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b51ba:	340c      	adds	r4, #12
   b51bc:	e7f8      	b.n	b51b0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x6>
	    std::_Destroy(std::__addressof(*__first));
	}
   b51be:	bd38      	pop	{r3, r4, r5, pc}

000b51c0 <_ZN7RailwayD1Ev>:
#include "Checkpoint.cpp"
#include <string>

//container for all data for each rail line
class Railway{
   b51c0:	b510      	push	{r4, lr}
   b51c2:	4604      	mov	r4, r0
   b51c4:	3048      	adds	r0, #72	; 0x48
   b51c6:	f7ff fb4a 	bl	b485e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b51ca:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b51ce:	f006 fd35 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
   b51d2:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b51d6:	f7ff ffe8 	bl	b51aa <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	_M_deallocate(_M_impl._M_start,
   b51da:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b51dc:	b118      	cbz	r0, b51e6 <_ZN7RailwayD1Ev+0x26>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b51de:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	::operator delete(__p
   b51e0:	1a09      	subs	r1, r1, r0
   b51e2:	f7fe ff60 	bl	b40a6 <_ZdlPvj>
      }
   b51e6:	f104 0018 	add.w	r0, r4, #24
   b51ea:	f7ff fb17 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b51ee:	f104 000c 	add.w	r0, r4, #12
   b51f2:	f7ff fb09 	bl	b4808 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b51f6:	4620      	mov	r0, r4
   b51f8:	f7ff fafc 	bl	b47f4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
   b51fc:	4620      	mov	r0, r4
   b51fe:	bd10      	pop	{r4, pc}

000b5200 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b5200:	b538      	push	{r3, r4, r5, lr}
   b5202:	4604      	mov	r4, r0
   b5204:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b5206:	42ac      	cmp	r4, r5
   b5208:	d004      	beq.n	b5214 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_+0x14>
      __pointer->~_Tp();
   b520a:	4620      	mov	r0, r4
   b520c:	f7ff ffd8 	bl	b51c0 <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b5210:	346c      	adds	r4, #108	; 0x6c
   b5212:	e7f8      	b.n	b5206 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_+0x6>
	}
   b5214:	bd38      	pop	{r3, r4, r5, pc}

000b5216 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b5216:	b510      	push	{r4, lr}
   b5218:	4604      	mov	r4, r0
	__destroy(__first, __last);
   b521a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b521e:	f7ff ffef 	bl	b5200 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
   b5222:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b5224:	b118      	cbz	r0, b522e <_ZNSt6vectorI7RailwaySaIS0_EED1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b5226:	68a1      	ldr	r1, [r4, #8]
   b5228:	1a09      	subs	r1, r1, r0
   b522a:	f7fe ff3c 	bl	b40a6 <_ZdlPvj>
      }
   b522e:	4620      	mov	r0, r4
   b5230:	bd10      	pop	{r4, pc}

000b5232 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b5232:	b538      	push	{r3, r4, r5, lr}
   b5234:	4604      	mov	r4, r0
   b5236:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b5238:	42ac      	cmp	r4, r5
   b523a:	d008      	beq.n	b524e <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_+0x1c>
   b523c:	f104 000c 	add.w	r0, r4, #12
   b5240:	f006 fcfc 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
#include "Railway.cpp"

class City{
   b5244:	4620      	mov	r0, r4
   b5246:	f7ff ffe6 	bl	b5216 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b524a:	3428      	adds	r4, #40	; 0x28
   b524c:	e7f4      	b.n	b5238 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_+0x6>
	}
   b524e:	bd38      	pop	{r3, r4, r5, pc}

000b5250 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b5250:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b5252:	b510      	push	{r4, lr}
   b5254:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b5256:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b525a:	d005      	beq.n	b5268 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b525c:	4601      	mov	r1, r0
   b525e:	4622      	mov	r2, r4
   b5260:	4618      	mov	r0, r3
   b5262:	f007 fca9 	bl	bcbb8 <memmove>
   b5266:	4603      	mov	r3, r0
	}
   b5268:	1918      	adds	r0, r3, r4
   b526a:	bd10      	pop	{r4, pc}

000b526c <_ZNSt6vectorIiSaIiEEC1ERKS1_>:
      vector(const vector& __x)
   b526c:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b526e:	e9d1 3600 	ldrd	r3, r6, [r1]
   b5272:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5274:	2300      	movs	r3, #0
      vector(const vector& __x)
   b5276:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5278:	e9c0 3300 	strd	r3, r3, [r0]
   b527c:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b527e:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
   b5280:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5282:	f7fe ff8f 	bl	b41a4 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b5286:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b528a:	4406      	add	r6, r0
   b528c:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b528e:	4602      	mov	r2, r0
			      _Category>::__copy_m(__first, __last, __result);
   b5290:	e9d5 0100 	ldrd	r0, r1, [r5]
   b5294:	f7ff ffdc 	bl	b5250 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
   b5298:	6060      	str	r0, [r4, #4]
      }
   b529a:	4620      	mov	r0, r4
   b529c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>:
      vector(initializer_list<value_type> __l,
   b52a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b52a2:	ab04      	add	r3, sp, #16
   b52a4:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b52a8:	2300      	movs	r3, #0
   b52aa:	e9c0 3300 	strd	r3, r3, [r0]
   b52ae:	6083      	str	r3, [r0, #8]
      vector(initializer_list<value_type> __l,
   b52b0:	4604      	mov	r4, r0
   b52b2:	4613      	mov	r3, r2
   b52b4:	460e      	mov	r6, r1
   b52b6:	0095      	lsls	r5, r2, #2
   b52b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   b52bc:	f342 001d 	sbfx	r0, r2, #0, #30
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b52c0:	4a0a      	ldr	r2, [pc, #40]	; (b52ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x4c>)
   b52c2:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   b52c6:	d202      	bcs.n	b52ce <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x2e>
	  __throw_length_error(
   b52c8:	4809      	ldr	r0, [pc, #36]	; (b52f0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x50>)
   b52ca:	f006 fc85 	bl	bbbd8 <_ZSt20__throw_length_errorPKc>
   b52ce:	9101      	str	r1, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b52d0:	f7fe ff68 	bl	b41a4 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b52d4:	4405      	add	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b52d6:	4602      	mov	r2, r0
   b52d8:	6020      	str	r0, [r4, #0]
   b52da:	9901      	ldr	r1, [sp, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b52dc:	60a5      	str	r5, [r4, #8]
   b52de:	4630      	mov	r0, r6
   b52e0:	f7ff ffb6 	bl	b5250 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
   b52e4:	6060      	str	r0, [r4, #4]
      }
   b52e6:	b004      	add	sp, #16
   b52e8:	bd70      	pop	{r4, r5, r6, pc}
   b52ea:	bf00      	nop
   b52ec:	7ffffffc 	.word	0x7ffffffc
   b52f0:	000beddf 	.word	0x000beddf

000b52f4 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>:
      if (&__x != this)
   b52f4:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b52f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b52f8:	4604      	mov	r4, r0
   b52fa:	460d      	mov	r5, r1
      if (&__x != this)
   b52fc:	d01d      	beq.n	b533a <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x46>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b52fe:	e9d1 7100 	ldrd	r7, r1, [r1]
			 - this->_M_impl._M_start); }
   b5302:	6802      	ldr	r2, [r0, #0]
   b5304:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5306:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b5308:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b530a:	429e      	cmp	r6, r3
   b530c:	d917      	bls.n	b533e <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x4a>
	  pointer __result = this->_M_allocate(__n);
   b530e:	10b0      	asrs	r0, r6, #2
   b5310:	9101      	str	r1, [sp, #4]
   b5312:	f7fe ff47 	bl	b41a4 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
   b5316:	9901      	ldr	r1, [sp, #4]
   b5318:	4602      	mov	r2, r0
   b531a:	4605      	mov	r5, r0
   b531c:	4638      	mov	r0, r7
   b531e:	f7ff ff97 	bl	b5250 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b5322:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b5324:	b118      	cbz	r0, b532e <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x3a>
			    - this->_M_impl._M_start);
   b5326:	68a1      	ldr	r1, [r4, #8]
   b5328:	1a09      	subs	r1, r1, r0
   b532a:	f7fe febc 	bl	b40a6 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b532e:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b5330:	4435      	add	r5, r6
   b5332:	60a5      	str	r5, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b5334:	6823      	ldr	r3, [r4, #0]
   b5336:	4433      	add	r3, r6
   b5338:	6063      	str	r3, [r4, #4]
    }
   b533a:	b003      	add	sp, #12
   b533c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b533e:	6843      	ldr	r3, [r0, #4]
   b5340:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b5342:	429e      	cmp	r6, r3
   b5344:	d803      	bhi.n	b534e <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x5a>
   b5346:	4638      	mov	r0, r7
   b5348:	f7ff ff82 	bl	b5250 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
   b534c:	e7f2      	b.n	b5334 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x40>
   b534e:	18f9      	adds	r1, r7, r3
   b5350:	4638      	mov	r0, r7
   b5352:	f7ff ff7d 	bl	b5250 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
   b5356:	e9d4 0200 	ldrd	r0, r2, [r4]
   b535a:	e9d5 3100 	ldrd	r3, r1, [r5]
   b535e:	1a10      	subs	r0, r2, r0
   b5360:	4418      	add	r0, r3
   b5362:	e7f1      	b.n	b5348 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x54>

000b5364 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b5364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5368:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b536a:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b536c:	480b      	ldr	r0, [pc, #44]	; (b539c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x38>)
   b536e:	10a4      	asrs	r4, r4, #2
   b5370:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b5372:	4616      	mov	r6, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5374:	4627      	mov	r7, r4
   b5376:	4690      	mov	r8, r2
   b5378:	2f00      	cmp	r7, #0
   b537a:	dd08      	ble.n	b538e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x2a>
	      *__result = *__first;
   b537c:	4629      	mov	r1, r5
   b537e:	4640      	mov	r0, r8
   b5380:	f7ff ffb8 	bl	b52f4 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	      ++__first;
   b5384:	350c      	adds	r5, #12
	      ++__result;
   b5386:	f108 080c 	add.w	r8, r8, #12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b538a:	3f01      	subs	r7, #1
   b538c:	e7f4      	b.n	b5378 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x14>
	  return __result;
   b538e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b5392:	200c      	movs	r0, #12
   b5394:	fb00 6004 	mla	r0, r0, r4, r6
   b5398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b539c:	aaaaaaab 	.word	0xaaaaaaab

000b53a0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>:
    std::vector<std::string> colors;
    int tripleIndex = -1;
    int loopIndex = -1;
    int lowerLoopBound, upperLoopBound, lowerGreenBound, upperGreenBound;

    Railway(std::vector<Checkpoint> checkpointInput, std::vector<int> scalerInput, std::vector<int> outputSize, std::string nameInput, std::vector<std::string> colorInput, std::vector<int> boundInput = {0, 0, 0, 0}){
   b53a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b53a4:	2500      	movs	r5, #0
   b53a6:	4699      	mov	r9, r3
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b53a8:	f100 0338 	add.w	r3, r0, #56	; 0x38
      { _M_string_length = __length; }
   b53ac:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   b53b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b53b4:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
   b53b8:	4604      	mov	r4, r0
   b53ba:	e9c0 5500 	strd	r5, r5, [r0]
   b53be:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b53c2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b53c6:	e9c0 5506 	strd	r5, r5, [r0, #24]
   b53ca:	e9c0 5508 	strd	r5, r5, [r0, #32]
   b53ce:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
   b53d2:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
   b53d6:	b099      	sub	sp, #100	; 0x64
      { __c1 = __c2; }
   b53d8:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
   b53dc:	6505      	str	r5, [r0, #80]	; 0x50
   b53de:	4692      	mov	sl, r2
   b53e0:	f100 0b18 	add.w	fp, r0, #24
   b53e4:	f100 0830 	add.w	r8, r0, #48	; 0x30
   b53e8:	f100 0748 	add.w	r7, r0, #72	; 0x48
      checkpoints = checkpointInput;
   b53ec:	f7fe ff30 	bl	b4250 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b53f0:	e9d4 2300 	ldrd	r2, r3, [r4]
   b53f4:	1a9b      	subs	r3, r3, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b53f6:	42ab      	cmp	r3, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b53f8:	ea4f 01e3 	mov.w	r1, r3, asr #3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b53fc:	da02      	bge.n	b5404 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x64>
	  __throw_length_error(
   b53fe:	485f      	ldr	r0, [pc, #380]	; (b557c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1dc>)
   b5400:	f006 fbea 	bl	bbbd8 <_ZSt20__throw_length_errorPKc>
      { _M_create_storage(__n); }
   b5404:	a809      	add	r0, sp, #36	; 0x24
   b5406:	9101      	str	r1, [sp, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5408:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b540c:	950b      	str	r5, [sp, #44]	; 0x2c
      { _M_create_storage(__n); }
   b540e:	f7ff feb7 	bl	b5180 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
      if (__n <= 0)
   b5412:	9901      	ldr	r1, [sp, #4]
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
   b5414:	9809      	ldr	r0, [sp, #36]	; 0x24
   b5416:	b131      	cbz	r1, b5426 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x86>
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
   b5418:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	*__first = __tmp;
   b541c:	008a      	lsls	r2, r1, #2
   b541e:	4629      	mov	r1, r5
   b5420:	f007 fbe4 	bl	bcbec <memset>
   b5424:	4630      	mov	r0, r6
	  _M_finish = __x._M_finish;
   b5426:	e9d4 5203 	ldrd	r5, r2, [r4, #12]
	  _M_start = __x._M_start;
   b542a:	9909      	ldr	r1, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
   b542c:	6963      	ldr	r3, [r4, #20]
   b542e:	930e      	str	r3, [sp, #56]	; 0x38
	  _M_finish = __x._M_finish;
   b5430:	e9c4 1003 	strd	r1, r0, [r4, #12]
      }
   b5434:	ae0c      	add	r6, sp, #48	; 0x30
	  _M_end_of_storage = __x._M_end_of_storage;
   b5436:	990b      	ldr	r1, [sp, #44]	; 0x2c
   b5438:	6161      	str	r1, [r4, #20]
	  _M_finish = __x._M_finish;
   b543a:	e9cd 520c 	strd	r5, r2, [sp, #48]	; 0x30
      }
   b543e:	4630      	mov	r0, r6
	  _M_start = __x._M_start;
   b5440:	2500      	movs	r5, #0
	  _M_finish = __x._M_finish;
   b5442:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
   b5446:	950b      	str	r5, [sp, #44]	; 0x2c
      }
   b5448:	f7ff f9de 	bl	b4808 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b544c:	a809      	add	r0, sp, #36	; 0x24
   b544e:	f7ff f9db 	bl	b4808 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
      distances = std::vector<float>(checkpoints.size(), 0);
      scalers = scalerInput;
   b5452:	4651      	mov	r1, sl
   b5454:	4658      	mov	r0, fp
   b5456:	f7ff ff4d 	bl	b52f4 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
      outputs = {std::vector<int>(outputSize[0], 0), std::vector<int>(outputSize[1], 0), std::vector<int>(outputSize[2], 0), std::vector<int>(outputSize[3], 0)};
   b545a:	f8d9 1000 	ldr.w	r1, [r9]
   b545e:	9506      	str	r5, [sp, #24]
   b5460:	6809      	ldr	r1, [r1, #0]
   b5462:	ab02      	add	r3, sp, #8
   b5464:	aa06      	add	r2, sp, #24
   b5466:	4630      	mov	r0, r6
   b5468:	f7ff fa0c 	bl	b4884 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b546c:	f8d9 1000 	ldr.w	r1, [r9]
   b5470:	9507      	str	r5, [sp, #28]
   b5472:	6849      	ldr	r1, [r1, #4]
   b5474:	ab03      	add	r3, sp, #12
   b5476:	aa07      	add	r2, sp, #28
   b5478:	a80f      	add	r0, sp, #60	; 0x3c
   b547a:	f7ff fa03 	bl	b4884 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b547e:	f8d9 1000 	ldr.w	r1, [r9]
   b5482:	9508      	str	r5, [sp, #32]
   b5484:	6889      	ldr	r1, [r1, #8]
   b5486:	ab04      	add	r3, sp, #16
   b5488:	aa08      	add	r2, sp, #32
   b548a:	a812      	add	r0, sp, #72	; 0x48
   b548c:	f7ff f9fa 	bl	b4884 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b5490:	f8d9 1000 	ldr.w	r1, [r9]
   b5494:	9509      	str	r5, [sp, #36]	; 0x24
   b5496:	ab05      	add	r3, sp, #20
   b5498:	aa09      	add	r2, sp, #36	; 0x24
   b549a:	68c9      	ldr	r1, [r1, #12]
   b549c:	a815      	add	r0, sp, #84	; 0x54
   b549e:	f7ff f9f1 	bl	b4884 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
			 - this->_M_impl._M_start); }
   b54a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b54a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b54a6:	1a9b      	subs	r3, r3, r2
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
		    std::forward_iterator_tag)
      {
	const size_type __len = std::distance(__first, __last);

	if (__len > capacity())
   b54a8:	2b2f      	cmp	r3, #47	; 0x2f
   b54aa:	d83f      	bhi.n	b552c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x18c>
	  pointer __result = this->_M_allocate(__n);
   b54ac:	2004      	movs	r0, #4
   b54ae:	f7fe fe1b 	bl	b40e8 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
   b54b2:	46b3      	mov	fp, r6
   b54b4:	4605      	mov	r5, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b54b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
	  _ForwardIterator __cur = __result;
   b54ba:	4681      	mov	r9, r0
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b54bc:	f1b9 0f00 	cmp.w	r9, #0
   b54c0:	d003      	beq.n	b54ca <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x12a>
   b54c2:	4659      	mov	r1, fp
   b54c4:	4648      	mov	r0, r9
   b54c6:	f7ff fed1 	bl	b526c <_ZNSt6vectorIiSaIiEEC1ERKS1_>
	      for (; __first != __last; ++__first, (void)++__cur)
   b54ca:	f109 090c 	add.w	r9, r9, #12
   b54ce:	45d1      	cmp	r9, sl
   b54d0:	f10b 0b0c 	add.w	fp, fp, #12
   b54d4:	d1f2      	bne.n	b54bc <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x11c>
	__destroy(__first, __last);
   b54d6:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b54da:	f7ff fe66 	bl	b51aa <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	    _S_check_init_len(__len, _M_get_Tp_allocator());
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
	    _M_deallocate(this->_M_impl._M_start,
   b54de:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b54e0:	b118      	cbz	r0, b54ea <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x14a>
			  this->_M_impl._M_end_of_storage
			  - this->_M_impl._M_start);
   b54e2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b54e4:	1a09      	subs	r1, r1, r0
   b54e6:	f7fe fdde 	bl	b40a6 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b54ea:	e9c4 5a09 	strd	r5, sl, [r4, #36]	; 0x24
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b54ee:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
   b54f2:	ad18      	add	r5, sp, #96	; 0x60
   b54f4:	3d0c      	subs	r5, #12
      }
   b54f6:	4628      	mov	r0, r5
   b54f8:	f7ff f990 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b54fc:	42b5      	cmp	r5, r6
   b54fe:	d1f9      	bne.n	b54f4 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x154>
	this->_M_assign(__str);
   b5500:	9922      	ldr	r1, [sp, #136]	; 0x88
   b5502:	4640      	mov	r0, r8
   b5504:	f006 fbb8 	bl	bbc78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
      name = nameInput;
      colors = colorInput;
   b5508:	4638      	mov	r0, r7
   b550a:	9923      	ldr	r1, [sp, #140]	; 0x8c
   b550c:	f7fe fef2 	bl	b42f4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
	return *(this->_M_impl._M_start + __n);
   b5510:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b5512:	681b      	ldr	r3, [r3, #0]
      lowerLoopBound = boundInput[0];
   b5514:	681a      	ldr	r2, [r3, #0]
   b5516:	65e2      	str	r2, [r4, #92]	; 0x5c
      upperLoopBound = boundInput[1];
   b5518:	685a      	ldr	r2, [r3, #4]
   b551a:	6622      	str	r2, [r4, #96]	; 0x60
      lowerGreenBound = boundInput[2];
   b551c:	689a      	ldr	r2, [r3, #8]
      upperGreenBound = boundInput[3];
   b551e:	68db      	ldr	r3, [r3, #12]
      lowerGreenBound = boundInput[2];
   b5520:	6662      	str	r2, [r4, #100]	; 0x64
    }
   b5522:	4620      	mov	r0, r4
      upperGreenBound = boundInput[3];
   b5524:	66a3      	str	r3, [r4, #104]	; 0x68
    }
   b5526:	b019      	add	sp, #100	; 0x64
   b5528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b552c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   b552e:	1aad      	subs	r5, r5, r2
	  }
	else if (size() >= __len)
   b5530:	2d2f      	cmp	r5, #47	; 0x2f
   b5532:	d90b      	bls.n	b554c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ac>
			      _Category>::__copy_m(__first, __last, __result);
   b5534:	a918      	add	r1, sp, #96	; 0x60
   b5536:	4630      	mov	r0, r6
   b5538:	f7ff ff14 	bl	b5364 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b553c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b553e:	4288      	cmp	r0, r1
   b5540:	4605      	mov	r5, r0
   b5542:	d0d6      	beq.n	b54f2 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
   b5544:	f7ff fe31 	bl	b51aa <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   b5548:	62a5      	str	r5, [r4, #40]	; 0x28
   b554a:	e7d2      	b.n	b54f2 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b554c:	4435      	add	r5, r6
   b554e:	4629      	mov	r1, r5
   b5550:	4630      	mov	r0, r6
   b5552:	f7ff ff07 	bl	b5364 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5556:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
   b555a:	ab18      	add	r3, sp, #96	; 0x60
   b555c:	429d      	cmp	r5, r3
   b555e:	d00a      	beq.n	b5576 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1d6>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b5560:	f1b9 0f00 	cmp.w	r9, #0
   b5564:	d003      	beq.n	b556e <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ce>
   b5566:	4629      	mov	r1, r5
   b5568:	4648      	mov	r0, r9
   b556a:	f7ff fe7f 	bl	b526c <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b556e:	350c      	adds	r5, #12
   b5570:	f109 090c 	add.w	r9, r9, #12
   b5574:	e7f1      	b.n	b555a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ba>
	    _ForwardIterator __mid = __first;
	    std::advance(__mid, size());
	    std::copy(__first, __mid, this->_M_impl._M_start);
	    const size_type __attribute__((__unused__)) __n = __len - size();
	    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	    this->_M_impl._M_finish =
   b5576:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
   b557a:	e7ba      	b.n	b54f2 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
   b557c:	000beddf 	.word	0x000beddf

000b5580 <_Z41__static_initialization_and_destruction_0ii.constprop.0>:
   b5580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5584:	ed2d 8b0e 	vpush	{d8-d14}
   b5588:	2801      	cmp	r0, #1
   b558a:	4db4      	ldr	r5, [pc, #720]	; (b585c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2dc>)
   b558c:	f5ad 7d41 	sub.w	sp, sp, #772	; 0x304
   b5590:	f041 811a 	bne.w	b67c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1248>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5594:	2400      	movs	r4, #0
    SleepResult() {}
   b5596:	4bb2      	ldr	r3, [pc, #712]	; (b5860 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e0>)
   b5598:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   b559a:	e9c5 4400 	strd	r4, r4, [r5]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b559e:	2003      	movs	r0, #3
   b55a0:	f003 fef6 	bl	b9390 <set_system_mode>
  public:
    float lat;
    float lon;

    Checkpoint(float la, float lo){
      lat = la;
   b55a4:	4baf      	ldr	r3, [pc, #700]	; (b5864 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e4>)
   b55a6:	93a4      	str	r3, [sp, #656]	; 0x290
      lon = lo;
   b55a8:	4baf      	ldr	r3, [pc, #700]	; (b5868 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e8>)
   b55aa:	93a5      	str	r3, [sp, #660]	; 0x294
      lat = la;
   b55ac:	4baf      	ldr	r3, [pc, #700]	; (b586c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2ec>)
   b55ae:	93a6      	str	r3, [sp, #664]	; 0x298
      lon = lo;
   b55b0:	4baf      	ldr	r3, [pc, #700]	; (b5870 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f0>)
   b55b2:	93a7      	str	r3, [sp, #668]	; 0x29c
      lat = la;
   b55b4:	4baf      	ldr	r3, [pc, #700]	; (b5874 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f4>)
   b55b6:	93a8      	str	r3, [sp, #672]	; 0x2a0
      lon = lo;
   b55b8:	4baf      	ldr	r3, [pc, #700]	; (b5878 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f8>)
   b55ba:	93a9      	str	r3, [sp, #676]	; 0x2a4
      lat = la;
   b55bc:	4baf      	ldr	r3, [pc, #700]	; (b587c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2fc>)
   b55be:	93aa      	str	r3, [sp, #680]	; 0x2a8
      lon = lo;
   b55c0:	4baf      	ldr	r3, [pc, #700]	; (b5880 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x300>)
   b55c2:	93ab      	str	r3, [sp, #684]	; 0x2ac
      lat = la;
   b55c4:	4baf      	ldr	r3, [pc, #700]	; (b5884 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x304>)
   b55c6:	93ac      	str	r3, [sp, #688]	; 0x2b0
      lon = lo;
   b55c8:	4baf      	ldr	r3, [pc, #700]	; (b5888 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x308>)
   b55ca:	93ad      	str	r3, [sp, #692]	; 0x2b4
);
   b55cc:	aba4      	add	r3, sp, #656	; 0x290
   b55ce:	937e      	str	r3, [sp, #504]	; 0x1f8
   b55d0:	2305      	movs	r3, #5
   b55d2:	937f      	str	r3, [sp, #508]	; 0x1fc
   b55d4:	f50d 7ae8 	add.w	sl, sp, #464	; 0x1d0
   b55d8:	aa7e      	add	r2, sp, #504	; 0x1f8
   b55da:	4653      	mov	r3, sl
   b55dc:	ca06      	ldmia	r2, {r1, r2}
   b55de:	a88c      	add	r0, sp, #560	; 0x230
   b55e0:	f7ff f972 	bl	b48c8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b55e4:	4ba9      	ldr	r3, [pc, #676]	; (b588c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x30c>)
      lat = la;
   b55e6:	eddf 8aaa 	vldr	s17, [pc, #680]	; b5890 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x310>
      lon = lo;
   b55ea:	ed9f 8aaa 	vldr	s16, [pc, #680]	; b5894 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x314>
      lat = la;
   b55ee:	eddf 9aaa 	vldr	s19, [pc, #680]	; b5898 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x318>
      lon = lo;
   b55f2:	ed9f 9aaa 	vldr	s18, [pc, #680]	; b589c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x31c>
      lat = la;
   b55f6:	eddf aaaa 	vldr	s21, [pc, #680]	; b58a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x320>
      lon = lo;
   b55fa:	ed9f aaaa 	vldr	s20, [pc, #680]	; b58a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x324>
      lat = la;
   b55fe:	eddf baaa 	vldr	s23, [pc, #680]	; b58a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x328>
      lon = lo;
   b5602:	ed9f baaa 	vldr	s22, [pc, #680]	; b58ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x32c>
      lat = la;
   b5606:	eddf daaa 	vldr	s27, [pc, #680]	; b58b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x330>
      lon = lo;
   b560a:	ed9f daaa 	vldr	s26, [pc, #680]	; b58b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x334>
      lat = la;
   b560e:	eddf caaa 	vldr	s25, [pc, #680]	; b58b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x338>
      lon = lo;
   b5612:	ed9f caaa 	vldr	s24, [pc, #680]	; b58bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x33c>
   b5616:	ed9f eaaa 	vldr	s28, [pc, #680]	; b58c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x340>
   b561a:	461f      	mov	r7, r3
   b561c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b561e:	f50d 7b17 	add.w	fp, sp, #604	; 0x25c
   b5622:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
   b5626:	2204      	movs	r2, #4
   b5628:	ad89      	add	r5, sp, #548	; 0x224
   b562a:	ab7c      	add	r3, sp, #496	; 0x1f0
   b562c:	f8cd b1f0 	str.w	fp, [sp, #496]	; 0x1f0
   b5630:	927d      	str	r2, [sp, #500]	; 0x1f4
   b5632:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5636:	4628      	mov	r0, r5
   b5638:	f7ff fe32 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b563c:	2228      	movs	r2, #40	; 0x28
   b563e:	e9cd 2494 	strd	r2, r4, [sp, #592]	; 0x250
   b5642:	aa93      	add	r2, sp, #588	; 0x24c
   b5644:	927a      	str	r2, [sp, #488]	; 0x1e8
   b5646:	2204      	movs	r2, #4
   b5648:	f50d 7806 	add.w	r8, sp, #536	; 0x218
   b564c:	ab7a      	add	r3, sp, #488	; 0x1e8
   b564e:	927b      	str	r2, [sp, #492]	; 0x1ec
   b5650:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5654:	4640      	mov	r0, r8
   b5656:	9493      	str	r4, [sp, #588]	; 0x24c
   b5658:	9496      	str	r4, [sp, #600]	; 0x258
   b565a:	f7ff fe21 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b565e:	a89d      	add	r0, sp, #628	; 0x274
   b5660:	4998      	ldr	r1, [pc, #608]	; (b58c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x344>)
   b5662:	f7fe fd53 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5666:	a8b0      	add	r0, sp, #704	; 0x2c0
   b5668:	4997      	ldr	r1, [pc, #604]	; (b58c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x348>)
   b566a:	f7fe fd4f 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b566e:	a8b6      	add	r0, sp, #728	; 0x2d8
   b5670:	4996      	ldr	r1, [pc, #600]	; (b58cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x34c>)
   b5672:	f7fe fd4b 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5676:	a9b0      	add	r1, sp, #704	; 0x2c0
   b5678:	9178      	str	r1, [sp, #480]	; 0x1e0
   b567a:	2102      	movs	r1, #2
   b567c:	f50d 79e4 	add.w	r9, sp, #456	; 0x1c8
   b5680:	9179      	str	r1, [sp, #484]	; 0x1e4
   b5682:	aa78      	add	r2, sp, #480	; 0x1e0
   b5684:	464b      	mov	r3, r9
   b5686:	ca06      	ldmia	r2, {r1, r2}
   b5688:	a883      	add	r0, sp, #524	; 0x20c
   b568a:	f7ff f951 	bl	b4930 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b568e:	4621      	mov	r1, r4
   b5690:	2210      	movs	r2, #16
   b5692:	a88f      	add	r0, sp, #572	; 0x23c
   b5694:	f007 faaa 	bl	bcbec <memset>
   b5698:	aa8f      	add	r2, sp, #572	; 0x23c
   b569a:	9276      	str	r2, [sp, #472]	; 0x1d8
   b569c:	2204      	movs	r2, #4
   b569e:	ae80      	add	r6, sp, #512	; 0x200
   b56a0:	ab76      	add	r3, sp, #472	; 0x1d8
   b56a2:	9277      	str	r2, [sp, #476]	; 0x1dc
   b56a4:	e893 0006 	ldmia.w	r3, {r1, r2}
   b56a8:	4630      	mov	r0, r6
   b56aa:	f7ff fdf9 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway redLineCTA = Railway(
   b56ae:	aa83      	add	r2, sp, #524	; 0x20c
   b56b0:	9201      	str	r2, [sp, #4]
   b56b2:	aa9d      	add	r2, sp, #628	; 0x274
   b56b4:	4643      	mov	r3, r8
   b56b6:	a98c      	add	r1, sp, #560	; 0x230
   b56b8:	9602      	str	r6, [sp, #8]
   b56ba:	9200      	str	r2, [sp, #0]
   b56bc:	4884      	ldr	r0, [pc, #528]	; (b58d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x350>)
   b56be:	462a      	mov	r2, r5
   b56c0:	f7ff fe6e 	bl	b53a0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
      }
   b56c4:	4630      	mov	r0, r6
   b56c6:	f7ff f8a9 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b56ca:	a883      	add	r0, sp, #524	; 0x20c
   b56cc:	f7ff f8c7 	bl	b485e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b56d0:	a8b6      	add	r0, sp, #728	; 0x2d8
   b56d2:	f006 fab3 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b56d6:	a8b0      	add	r0, sp, #704	; 0x2c0
   b56d8:	f006 fab0 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b56dc:	a89d      	add	r0, sp, #628	; 0x274
   b56de:	f006 faad 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b56e2:	4640      	mov	r0, r8
   b56e4:	f7ff f89a 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b56e8:	4628      	mov	r0, r5
   b56ea:	f7ff f897 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b56ee:	a88c      	add	r0, sp, #560	; 0x230
   b56f0:	f7ff f880 	bl	b47f4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b56f4:	4b77      	ldr	r3, [pc, #476]	; (b58d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x354>)
   b56f6:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b56f8:	4b77      	ldr	r3, [pc, #476]	; (b58d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x358>)
   b56fa:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b56fc:	4b77      	ldr	r3, [pc, #476]	; (b58dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x35c>)
   b56fe:	93b2      	str	r3, [sp, #712]	; 0x2c8
      lon = lo;
   b5700:	4b77      	ldr	r3, [pc, #476]	; (b58e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x360>)
   b5702:	93b3      	str	r3, [sp, #716]	; 0x2cc
      lat = la;
   b5704:	4b77      	ldr	r3, [pc, #476]	; (b58e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x364>)
   b5706:	93b4      	str	r3, [sp, #720]	; 0x2d0
      lon = lo;
   b5708:	4b77      	ldr	r3, [pc, #476]	; (b58e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x368>)
   b570a:	93b5      	str	r3, [sp, #724]	; 0x2d4
      lat = la;
   b570c:	4b77      	ldr	r3, [pc, #476]	; (b58ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x36c>)
   b570e:	93b6      	str	r3, [sp, #728]	; 0x2d8
      lon = lo;
   b5710:	4b77      	ldr	r3, [pc, #476]	; (b58f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x370>)
   b5712:	93b7      	str	r3, [sp, #732]	; 0x2dc
      lat = la;
   b5714:	4b77      	ldr	r3, [pc, #476]	; (b58f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x374>)
   b5716:	93b8      	str	r3, [sp, #736]	; 0x2e0
      lon = lo;
   b5718:	4b77      	ldr	r3, [pc, #476]	; (b58f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x378>)
   b571a:	93b9      	str	r3, [sp, #740]	; 0x2e4
      lat = la;
   b571c:	4b77      	ldr	r3, [pc, #476]	; (b58fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x37c>)
   b571e:	93ba      	str	r3, [sp, #744]	; 0x2e8
);
   b5720:	aab0      	add	r2, sp, #704	; 0x2c0
      lon = lo;
   b5722:	4b77      	ldr	r3, [pc, #476]	; (b5900 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x380>)
   b5724:	9274      	str	r2, [sp, #464]	; 0x1d0
   b5726:	93bb      	str	r3, [sp, #748]	; 0x2ec
   b5728:	2207      	movs	r2, #7
      lat = la;
   b572a:	4b76      	ldr	r3, [pc, #472]	; (b5904 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x384>)
   b572c:	9275      	str	r2, [sp, #468]	; 0x1d4
   b572e:	93bc      	str	r3, [sp, #752]	; 0x2f0
   b5730:	aa6a      	add	r2, sp, #424	; 0x1a8
      lon = lo;
   b5732:	4b75      	ldr	r3, [pc, #468]	; (b5908 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x388>)
   b5734:	93bd      	str	r3, [sp, #756]	; 0x2f4
   b5736:	a88c      	add	r0, sp, #560	; 0x230
   b5738:	4613      	mov	r3, r2
   b573a:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b573e:	f7ff f8c3 	bl	b48c8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5742:	aa9d      	add	r2, sp, #628	; 0x274
   b5744:	f107 0c10 	add.w	ip, r7, #16
   b5748:	9204      	str	r2, [sp, #16]
   b574a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b574e:	9f04      	ldr	r7, [sp, #16]
   b5750:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b5752:	e89c 0003 	ldmia.w	ip, {r0, r1}
   b5756:	aa9d      	add	r2, sp, #628	; 0x274
   b5758:	9272      	str	r2, [sp, #456]	; 0x1c8
   b575a:	2206      	movs	r2, #6
   b575c:	9273      	str	r2, [sp, #460]	; 0x1cc
   b575e:	e9c7 0100 	strd	r0, r1, [r7]
   b5762:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5766:	4628      	mov	r0, r5
   b5768:	9704      	str	r7, [sp, #16]
   b576a:	f7ff fd99 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b576e:	aa93      	add	r2, sp, #588	; 0x24c
   b5770:	9270      	str	r2, [sp, #448]	; 0x1c0
   b5772:	233c      	movs	r3, #60	; 0x3c
   b5774:	2204      	movs	r2, #4
   b5776:	e9cd 3494 	strd	r3, r4, [sp, #592]	; 0x250
   b577a:	9271      	str	r2, [sp, #452]	; 0x1c4
   b577c:	ab70      	add	r3, sp, #448	; 0x1c0
   b577e:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5782:	4640      	mov	r0, r8
   b5784:	9493      	str	r4, [sp, #588]	; 0x24c
   b5786:	9496      	str	r4, [sp, #600]	; 0x258
   b5788:	f7ff fd8a 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b578c:	4658      	mov	r0, fp
   b578e:	495f      	ldr	r1, [pc, #380]	; (b590c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x38c>)
   b5790:	f7fe fcbc 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5794:	a8a4      	add	r0, sp, #656	; 0x290
   b5796:	495e      	ldr	r1, [pc, #376]	; (b5910 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x390>)
   b5798:	f7fe fcb8 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b579c:	a8aa      	add	r0, sp, #680	; 0x2a8
   b579e:	495d      	ldr	r1, [pc, #372]	; (b5914 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x394>)
   b57a0:	f7fe fcb4 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b57a4:	aba4      	add	r3, sp, #656	; 0x290
   b57a6:	2102      	movs	r1, #2
   b57a8:	936e      	str	r3, [sp, #440]	; 0x1b8
   b57aa:	f50d 79d0 	add.w	r9, sp, #416	; 0x1a0
   b57ae:	916f      	str	r1, [sp, #444]	; 0x1bc
   b57b0:	aa6e      	add	r2, sp, #440	; 0x1b8
   b57b2:	464b      	mov	r3, r9
   b57b4:	ca06      	ldmia	r2, {r1, r2}
   b57b6:	a883      	add	r0, sp, #524	; 0x20c
   b57b8:	f7ff f8ba 	bl	b4930 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b57bc:	4621      	mov	r1, r4
   b57be:	2210      	movs	r2, #16
   b57c0:	a88f      	add	r0, sp, #572	; 0x23c
   b57c2:	f007 fa13 	bl	bcbec <memset>
   b57c6:	aa8f      	add	r2, sp, #572	; 0x23c
   b57c8:	926c      	str	r2, [sp, #432]	; 0x1b0
   b57ca:	2204      	movs	r2, #4
   b57cc:	ab6c      	add	r3, sp, #432	; 0x1b0
   b57ce:	926d      	str	r2, [sp, #436]	; 0x1b4
   b57d0:	e893 0006 	ldmia.w	r3, {r1, r2}
   b57d4:	4630      	mov	r0, r6
   b57d6:	f7ff fd63 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway blueLineCTA = Railway(
   b57da:	aa83      	add	r2, sp, #524	; 0x20c
   b57dc:	4643      	mov	r3, r8
   b57de:	a98c      	add	r1, sp, #560	; 0x230
   b57e0:	e9cd b200 	strd	fp, r2, [sp]
   b57e4:	9602      	str	r6, [sp, #8]
   b57e6:	462a      	mov	r2, r5
   b57e8:	484b      	ldr	r0, [pc, #300]	; (b5918 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x398>)
   b57ea:	f7ff fdd9 	bl	b53a0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b57ee:	4630      	mov	r0, r6
   b57f0:	f7ff f814 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b57f4:	a883      	add	r0, sp, #524	; 0x20c
   b57f6:	f7ff f832 	bl	b485e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b57fa:	a8aa      	add	r0, sp, #680	; 0x2a8
   b57fc:	f006 fa1e 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5800:	a8a4      	add	r0, sp, #656	; 0x290
   b5802:	f006 fa1b 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5806:	4658      	mov	r0, fp
   b5808:	f006 fa18 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b580c:	4640      	mov	r0, r8
   b580e:	f7ff f805 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5812:	4628      	mov	r0, r5
   b5814:	f7ff f802 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5818:	a88c      	add	r0, sp, #560	; 0x230
   b581a:	f7fe ffeb 	bl	b47f4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b581e:	aab0      	add	r2, sp, #704	; 0x2c0
   b5820:	926a      	str	r2, [sp, #424]	; 0x1a8
   b5822:	2207      	movs	r2, #7
   b5824:	926b      	str	r2, [sp, #428]	; 0x1ac
   b5826:	f50d 7ac0 	add.w	sl, sp, #384	; 0x180
   b582a:	aa6a      	add	r2, sp, #424	; 0x1a8
   b582c:	ca06      	ldmia	r2, {r1, r2}
   b582e:	4653      	mov	r3, sl
   b5830:	a88c      	add	r0, sp, #560	; 0x230
      lat = la;
   b5832:	edcd 8ab4 	vstr	s17, [sp, #720]	; 0x2d0
      lon = lo;
   b5836:	ed8d 8ab5 	vstr	s16, [sp, #724]	; 0x2d4
      lat = la;
   b583a:	edcd 8abc 	vstr	s17, [sp, #752]	; 0x2f0
      lon = lo;
   b583e:	ed8d 8abd 	vstr	s16, [sp, #756]	; 0x2f4
      lat = la;
   b5842:	edcd dab0 	vstr	s27, [sp, #704]	; 0x2c0
      lon = lo;
   b5846:	ed8d dab1 	vstr	s26, [sp, #708]	; 0x2c4
      lat = la;
   b584a:	edcd cab2 	vstr	s25, [sp, #712]	; 0x2c8
      lon = lo;
   b584e:	ed8d cab3 	vstr	s24, [sp, #716]	; 0x2cc
      lat = la;
   b5852:	edcd bab6 	vstr	s23, [sp, #728]	; 0x2d8
      lon = lo;
   b5856:	ed8d bab7 	vstr	s22, [sp, #732]	; 0x2dc
   b585a:	e05f      	b.n	b591c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x39c>
   b585c:	20035248 	.word	0x20035248
   b5860:	ffff0000 	.word	0xffff0000
   b5864:	42276980 	.word	0x42276980
   b5868:	c2af431e 	.word	0xc2af431e
   b586c:	42279dcc 	.word	0x42279dcc
   b5870:	c2af4202 	.word	0xc2af4202
   b5874:	42279d95 	.word	0x42279d95
   b5878:	c2af476d 	.word	0xc2af476d
   b587c:	4227a7a9 	.word	0x4227a7a9
   b5880:	c2af4e05 	.word	0xc2af4e05
   b5884:	4227b382 	.word	0x4227b382
   b5888:	c2af4e44 	.word	0xc2af4e44
   b588c:	000bf104 	.word	0x000bf104
   b5890:	42278b1a 	.word	0x42278b1a
   b5894:	c2af449a 	.word	0xc2af449a
   b5898:	42278b2f 	.word	0x42278b2f
   b589c:	c2af4095 	.word	0xc2af4095
   b58a0:	422781d8 	.word	0x422781d8
   b58a4:	c2af4044 	.word	0xc2af4044
   b58a8:	42278216 	.word	0x42278216
   b58ac:	c2af44c1 	.word	0xc2af44c1
   b58b0:	4227a49e 	.word	0x4227a49e
   b58b4:	c2af4bd0 	.word	0xc2af4bd0
   b58b8:	4227a437 	.word	0x4227a437
   b58bc:	c2af4659 	.word	0xc2af4659
   b58c0:	c2af4089 	.word	0xc2af4089
   b58c4:	000bef21 	.word	0x000bef21
   b58c8:	000bef25 	.word	0x000bef25
   b58cc:	000bef2c 	.word	0x000bef2c
   b58d0:	2003e554 	.word	0x2003e554
   b58d4:	42277e9d 	.word	0x42277e9d
   b58d8:	c2af74b3 	.word	0xc2af74b3
   b58dc:	422780af 	.word	0x422780af
   b58e0:	c2af588e 	.word	0xc2af588e
   b58e4:	4227804d 	.word	0x4227804d
   b58e8:	c2af482e 	.word	0xc2af482e
   b58ec:	422780ad 	.word	0x422780ad
   b58f0:	c2af4157 	.word	0xc2af4157
   b58f4:	42278aff 	.word	0x42278aff
   b58f8:	c2af4253 	.word	0xc2af4253
   b58fc:	42278af4 	.word	0x42278af4
   b5900:	c2af4798 	.word	0xc2af4798
   b5904:	4227a978 	.word	0x4227a978
   b5908:	c2af5f5d 	.word	0xc2af5f5d
   b590c:	000bef33 	.word	0x000bef33
   b5910:	000bef38 	.word	0x000bef38
   b5914:	000bef3f 	.word	0x000bef3f
   b5918:	200352a0 	.word	0x200352a0
      lat = la;
   b591c:	edcd aab8 	vstr	s21, [sp, #736]	; 0x2e0
      lon = lo;
   b5920:	ed8d aab9 	vstr	s20, [sp, #740]	; 0x2e4
      lat = la;
   b5924:	edcd 9aba 	vstr	s19, [sp, #744]	; 0x2e8
      lon = lo;
   b5928:	ed8d 9abb 	vstr	s18, [sp, #748]	; 0x2ec
   b592c:	f7fe ffcc 	bl	b48c8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5930:	4bb6      	ldr	r3, [pc, #728]	; (b5c0c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b5932:	f103 0228 	add.w	r2, r3, #40	; 0x28
   b5936:	4617      	mov	r7, r2
   b5938:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b593a:	f50d 7c1d 	add.w	ip, sp, #628	; 0x274
   b593e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5942:	e9d7 0100 	ldrd	r0, r1, [r7]
   b5946:	9a04      	ldr	r2, [sp, #16]
   b5948:	9705      	str	r7, [sp, #20]
   b594a:	e882 0003 	stmia.w	r2, {r0, r1}
   b594e:	aa9d      	add	r2, sp, #628	; 0x274
   b5950:	9268      	str	r2, [sp, #416]	; 0x1a0
   b5952:	2206      	movs	r2, #6
   b5954:	9269      	str	r2, [sp, #420]	; 0x1a4
   b5956:	e899 0006 	ldmia.w	r9, {r1, r2}
   b595a:	4628      	mov	r0, r5
   b595c:	f7ff fca0 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5960:	f107 0208 	add.w	r2, r7, #8
   b5964:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   b5966:	af93      	add	r7, sp, #588	; 0x24c
   b5968:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b596c:	2104      	movs	r1, #4
   b596e:	ab66      	add	r3, sp, #408	; 0x198
   b5970:	9766      	str	r7, [sp, #408]	; 0x198
   b5972:	9167      	str	r1, [sp, #412]	; 0x19c
   b5974:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5978:	4640      	mov	r0, r8
   b597a:	f7ff fc91 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b597e:	4658      	mov	r0, fp
   b5980:	49a3      	ldr	r1, [pc, #652]	; (b5c10 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x690>)
   b5982:	f7fe fbc3 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5986:	a8a4      	add	r0, sp, #656	; 0x290
   b5988:	49a2      	ldr	r1, [pc, #648]	; (b5c14 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x694>)
   b598a:	f7fe fbbf 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b598e:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5990:	49a1      	ldr	r1, [pc, #644]	; (b5c18 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x698>)
   b5992:	f7fe fbbb 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5996:	aba4      	add	r3, sp, #656	; 0x290
   b5998:	2102      	movs	r1, #2
   b599a:	9364      	str	r3, [sp, #400]	; 0x190
   b599c:	f50d 79bc 	add.w	r9, sp, #376	; 0x178
   b59a0:	9165      	str	r1, [sp, #404]	; 0x194
   b59a2:	aa64      	add	r2, sp, #400	; 0x190
   b59a4:	ca06      	ldmia	r2, {r1, r2}
   b59a6:	464b      	mov	r3, r9
   b59a8:	a883      	add	r0, sp, #524	; 0x20c
   b59aa:	f7fe ffc1 	bl	b4930 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b59ae:	499b      	ldr	r1, [pc, #620]	; (b5c1c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x69c>)
   b59b0:	c90f      	ldmia	r1, {r0, r1, r2, r3}
   b59b2:	af8f      	add	r7, sp, #572	; 0x23c
   b59b4:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b59b8:	2004      	movs	r0, #4
   b59ba:	ab62      	add	r3, sp, #392	; 0x188
   b59bc:	9762      	str	r7, [sp, #392]	; 0x188
   b59be:	9063      	str	r0, [sp, #396]	; 0x18c
   b59c0:	e893 0006 	ldmia.w	r3, {r1, r2}
   b59c4:	4630      	mov	r0, r6
   b59c6:	f7ff fc6b 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway brownLineCTA = Railway(
   b59ca:	a883      	add	r0, sp, #524	; 0x20c
   b59cc:	e9cd b000 	strd	fp, r0, [sp]
   b59d0:	a88c      	add	r0, sp, #560	; 0x230
   b59d2:	4643      	mov	r3, r8
   b59d4:	462a      	mov	r2, r5
   b59d6:	4601      	mov	r1, r0
   b59d8:	9602      	str	r6, [sp, #8]
   b59da:	4891      	ldr	r0, [pc, #580]	; (b5c20 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a0>)
   b59dc:	f7ff fce0 	bl	b53a0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b59e0:	4630      	mov	r0, r6
   b59e2:	f7fe ff1b 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b59e6:	a883      	add	r0, sp, #524	; 0x20c
   b59e8:	f7fe ff39 	bl	b485e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b59ec:	a8aa      	add	r0, sp, #680	; 0x2a8
   b59ee:	f006 f925 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b59f2:	a8a4      	add	r0, sp, #656	; 0x290
   b59f4:	f006 f922 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b59f8:	4658      	mov	r0, fp
   b59fa:	f006 f91f 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b59fe:	4640      	mov	r0, r8
   b5a00:	f7fe ff0c 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5a04:	4628      	mov	r0, r5
   b5a06:	f7fe ff09 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5a0a:	a88c      	add	r0, sp, #560	; 0x230
   b5a0c:	f7fe fef2 	bl	b47f4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5a10:	4b84      	ldr	r3, [pc, #528]	; (b5c24 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a4>)
   b5a12:	93a4      	str	r3, [sp, #656]	; 0x290
      lon = lo;
   b5a14:	4b84      	ldr	r3, [pc, #528]	; (b5c28 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a8>)
   b5a16:	93a5      	str	r3, [sp, #660]	; 0x294
      lat = la;
   b5a18:	4b84      	ldr	r3, [pc, #528]	; (b5c2c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6ac>)
   b5a1a:	93a6      	str	r3, [sp, #664]	; 0x298
   b5a1c:	4b84      	ldr	r3, [pc, #528]	; (b5c30 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b0>)
   b5a1e:	93aa      	str	r3, [sp, #680]	; 0x2a8
      lon = lo;
   b5a20:	4b84      	ldr	r3, [pc, #528]	; (b5c34 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b4>)
   b5a22:	93ab      	str	r3, [sp, #684]	; 0x2ac
      lat = la;
   b5a24:	4b84      	ldr	r3, [pc, #528]	; (b5c38 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b8>)
   b5a26:	93ac      	str	r3, [sp, #688]	; 0x2b0
      lon = lo;
   b5a28:	4b84      	ldr	r3, [pc, #528]	; (b5c3c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6bc>)
   b5a2a:	93ad      	str	r3, [sp, #692]	; 0x2b4
);
   b5a2c:	2005      	movs	r0, #5
   b5a2e:	aba4      	add	r3, sp, #656	; 0x290
   b5a30:	9360      	str	r3, [sp, #384]	; 0x180
   b5a32:	9061      	str	r0, [sp, #388]	; 0x184
   b5a34:	a856      	add	r0, sp, #344	; 0x158
   b5a36:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b5a3a:	4603      	mov	r3, r0
   b5a3c:	a88c      	add	r0, sp, #560	; 0x230
   b5a3e:	ed8d eaa7 	vstr	s28, [sp, #668]	; 0x29c
      lat = la;
   b5a42:	edcd 9aa8 	vstr	s19, [sp, #672]	; 0x2a0
      lon = lo;
   b5a46:	ed8d 9aa9 	vstr	s18, [sp, #676]	; 0x2a4
   b5a4a:	f7fe ff3d 	bl	b48c8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5a4e:	4b6f      	ldr	r3, [pc, #444]	; (b5c0c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b5a50:	f8cd b178 	str.w	fp, [sp, #376]	; 0x178
   b5a54:	461f      	mov	r7, r3
   b5a56:	3360      	adds	r3, #96	; 0x60
   b5a58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5a5a:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
   b5a5e:	2004      	movs	r0, #4
   b5a60:	905f      	str	r0, [sp, #380]	; 0x17c
   b5a62:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5a66:	4628      	mov	r0, r5
   b5a68:	f7ff fc1a 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5a6c:	463b      	mov	r3, r7
   b5a6e:	3370      	adds	r3, #112	; 0x70
   b5a70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5a72:	af93      	add	r7, sp, #588	; 0x24c
   b5a74:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5a78:	2004      	movs	r0, #4
   b5a7a:	ab5c      	add	r3, sp, #368	; 0x170
   b5a7c:	975c      	str	r7, [sp, #368]	; 0x170
   b5a7e:	905d      	str	r0, [sp, #372]	; 0x174
   b5a80:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5a84:	4640      	mov	r0, r8
   b5a86:	f7ff fc0b 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5a8a:	a89d      	add	r0, sp, #628	; 0x274
   b5a8c:	496c      	ldr	r1, [pc, #432]	; (b5c40 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c0>)
   b5a8e:	f7fe fb3d 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5a92:	a8b0      	add	r0, sp, #704	; 0x2c0
   b5a94:	496b      	ldr	r1, [pc, #428]	; (b5c44 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c4>)
   b5a96:	f7fe fb39 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5a9a:	a8b6      	add	r0, sp, #728	; 0x2d8
   b5a9c:	496a      	ldr	r1, [pc, #424]	; (b5c48 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c8>)
   b5a9e:	f7fe fb35 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5aa2:	a8b0      	add	r0, sp, #704	; 0x2c0
   b5aa4:	905a      	str	r0, [sp, #360]	; 0x168
   b5aa6:	2002      	movs	r0, #2
   b5aa8:	905b      	str	r0, [sp, #364]	; 0x16c
   b5aaa:	f50d 79a8 	add.w	r9, sp, #336	; 0x150
   b5aae:	aa5a      	add	r2, sp, #360	; 0x168
   b5ab0:	464b      	mov	r3, r9
   b5ab2:	ca06      	ldmia	r2, {r1, r2}
   b5ab4:	a883      	add	r0, sp, #524	; 0x20c
   b5ab6:	f7fe ff3b 	bl	b4930 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5aba:	4b54      	ldr	r3, [pc, #336]	; (b5c0c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b5abc:	3380      	adds	r3, #128	; 0x80
   b5abe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5ac0:	af8f      	add	r7, sp, #572	; 0x23c
   b5ac2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5ac6:	2004      	movs	r0, #4
   b5ac8:	ab58      	add	r3, sp, #352	; 0x160
   b5aca:	9758      	str	r7, [sp, #352]	; 0x160
   b5acc:	9059      	str	r0, [sp, #356]	; 0x164
   b5ace:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5ad2:	4630      	mov	r0, r6
   b5ad4:	f7ff fbe4 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway greenLineCTA = Railway(
   b5ad8:	a883      	add	r0, sp, #524	; 0x20c
   b5ada:	9001      	str	r0, [sp, #4]
   b5adc:	a89d      	add	r0, sp, #628	; 0x274
   b5ade:	9000      	str	r0, [sp, #0]
   b5ae0:	a88c      	add	r0, sp, #560	; 0x230
   b5ae2:	4643      	mov	r3, r8
   b5ae4:	462a      	mov	r2, r5
   b5ae6:	4601      	mov	r1, r0
   b5ae8:	9602      	str	r6, [sp, #8]
   b5aea:	4858      	ldr	r0, [pc, #352]	; (b5c4c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6cc>)
   b5aec:	f7ff fc58 	bl	b53a0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5af0:	4630      	mov	r0, r6
   b5af2:	f7fe fe93 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5af6:	a883      	add	r0, sp, #524	; 0x20c
   b5af8:	f7fe feb1 	bl	b485e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5afc:	a8b6      	add	r0, sp, #728	; 0x2d8
   b5afe:	f006 f89d 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5b02:	a8b0      	add	r0, sp, #704	; 0x2c0
   b5b04:	f006 f89a 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5b08:	a89d      	add	r0, sp, #628	; 0x274
   b5b0a:	f006 f897 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5b0e:	4640      	mov	r0, r8
   b5b10:	f7fe fe84 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5b14:	4628      	mov	r0, r5
   b5b16:	f7fe fe81 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5b1a:	a88c      	add	r0, sp, #560	; 0x230
   b5b1c:	f7fe fe6a 	bl	b47f4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5b20:	4b4b      	ldr	r3, [pc, #300]	; (b5c50 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d0>)
   b5b22:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b5b24:	4b4b      	ldr	r3, [pc, #300]	; (b5c54 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d4>)
   b5b26:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b5b28:	4b4b      	ldr	r3, [pc, #300]	; (b5c58 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d8>)
   b5b2a:	93b2      	str	r3, [sp, #712]	; 0x2c8
      lon = lo;
   b5b2c:	4b4b      	ldr	r3, [pc, #300]	; (b5c5c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6dc>)
   b5b2e:	93b3      	str	r3, [sp, #716]	; 0x2cc
      lat = la;
   b5b30:	4b4b      	ldr	r3, [pc, #300]	; (b5c60 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e0>)
   b5b32:	93b4      	str	r3, [sp, #720]	; 0x2d0
      lon = lo;
   b5b34:	4b4b      	ldr	r3, [pc, #300]	; (b5c64 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e4>)
   b5b36:	93b5      	str	r3, [sp, #724]	; 0x2d4
);
   b5b38:	a8b0      	add	r0, sp, #704	; 0x2c0
      lat = la;
   b5b3a:	4b4b      	ldr	r3, [pc, #300]	; (b5c68 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e8>)
   b5b3c:	9056      	str	r0, [sp, #344]	; 0x158
   b5b3e:	93b6      	str	r3, [sp, #728]	; 0x2d8
   b5b40:	2008      	movs	r0, #8
   b5b42:	4b4a      	ldr	r3, [pc, #296]	; (b5c6c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6ec>)
   b5b44:	9057      	str	r0, [sp, #348]	; 0x15c
   b5b46:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
   b5b4a:	93bc      	str	r3, [sp, #752]	; 0x2f0
   b5b4c:	a856      	add	r0, sp, #344	; 0x158
      lon = lo;
   b5b4e:	4b48      	ldr	r3, [pc, #288]	; (b5c70 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f0>)
   b5b50:	93bd      	str	r3, [sp, #756]	; 0x2f4
   b5b52:	e890 0006 	ldmia.w	r0, {r1, r2}
   b5b56:	4653      	mov	r3, sl
   b5b58:	a88c      	add	r0, sp, #560	; 0x230
      lat = la;
   b5b5a:	edcd 8aba 	vstr	s17, [sp, #744]	; 0x2e8
      lon = lo;
   b5b5e:	ed8d 8abb 	vstr	s16, [sp, #748]	; 0x2ec
   b5b62:	ed8d eab7 	vstr	s28, [sp, #732]	; 0x2dc
      lat = la;
   b5b66:	edcd 9ab8 	vstr	s19, [sp, #736]	; 0x2e0
      lon = lo;
   b5b6a:	ed8d 9ab9 	vstr	s18, [sp, #740]	; 0x2e4
      lat = la;
   b5b6e:	edcd aabe 	vstr	s21, [sp, #760]	; 0x2f8
      lon = lo;
   b5b72:	ed8d aabf 	vstr	s20, [sp, #764]	; 0x2fc
   b5b76:	f7fe fea7 	bl	b48c8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5b7a:	4b24      	ldr	r3, [pc, #144]	; (b5c0c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b5b7c:	9f04      	ldr	r7, [sp, #16]
   b5b7e:	f103 0c90 	add.w	ip, r3, #144	; 0x90
   b5b82:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5b86:	f50d 7e1d 	add.w	lr, sp, #628	; 0x274
   b5b8a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b5b8e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
   b5b92:	e887 0007 	stmia.w	r7, {r0, r1, r2}
   b5b96:	a89d      	add	r0, sp, #628	; 0x274
   b5b98:	9054      	str	r0, [sp, #336]	; 0x150
   b5b9a:	2007      	movs	r0, #7
   b5b9c:	9055      	str	r0, [sp, #340]	; 0x154
   b5b9e:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5ba2:	4628      	mov	r0, r5
   b5ba4:	f7ff fb7c 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5ba8:	4b18      	ldr	r3, [pc, #96]	; (b5c0c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b5baa:	33ac      	adds	r3, #172	; 0xac
   b5bac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5bae:	af93      	add	r7, sp, #588	; 0x24c
   b5bb0:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5bb4:	2004      	movs	r0, #4
   b5bb6:	ab52      	add	r3, sp, #328	; 0x148
   b5bb8:	9752      	str	r7, [sp, #328]	; 0x148
   b5bba:	9053      	str	r0, [sp, #332]	; 0x14c
   b5bbc:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5bc0:	4640      	mov	r0, r8
   b5bc2:	f7ff fb6d 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5bc6:	4658      	mov	r0, fp
   b5bc8:	492a      	ldr	r1, [pc, #168]	; (b5c74 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f4>)
   b5bca:	f7fe fa9f 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5bce:	a8a4      	add	r0, sp, #656	; 0x290
   b5bd0:	4929      	ldr	r1, [pc, #164]	; (b5c78 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f8>)
   b5bd2:	f7fe fa9b 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5bd6:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5bd8:	4928      	ldr	r1, [pc, #160]	; (b5c7c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6fc>)
   b5bda:	f7fe fa97 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5bde:	aba4      	add	r3, sp, #656	; 0x290
   b5be0:	2002      	movs	r0, #2
   b5be2:	9350      	str	r3, [sp, #320]	; 0x140
   b5be4:	9051      	str	r0, [sp, #324]	; 0x144
   b5be6:	f50d 7994 	add.w	r9, sp, #296	; 0x128
   b5bea:	aa50      	add	r2, sp, #320	; 0x140
   b5bec:	464b      	mov	r3, r9
   b5bee:	ca06      	ldmia	r2, {r1, r2}
   b5bf0:	a883      	add	r0, sp, #524	; 0x20c
   b5bf2:	f7fe fe9d 	bl	b4930 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5bf6:	4b05      	ldr	r3, [pc, #20]	; (b5c0c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b5bf8:	33bc      	adds	r3, #188	; 0xbc
   b5bfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5bfc:	af8f      	add	r7, sp, #572	; 0x23c
   b5bfe:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5c02:	2004      	movs	r0, #4
   b5c04:	ab4e      	add	r3, sp, #312	; 0x138
   b5c06:	974e      	str	r7, [sp, #312]	; 0x138
   b5c08:	e03a      	b.n	b5c80 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x700>
   b5c0a:	bf00      	nop
   b5c0c:	000bf104 	.word	0x000bf104
   b5c10:	000bef46 	.word	0x000bef46
   b5c14:	000bef4c 	.word	0x000bef4c
   b5c18:	000bef53 	.word	0x000bef53
   b5c1c:	000bf154 	.word	0x000bf154
   b5c20:	20035378 	.word	0x20035378
   b5c24:	42276997 	.word	0x42276997
   b5c28:	c2af40b8 	.word	0xc2af40b8
   b5c2c:	422781fe 	.word	0x422781fe
   b5c30:	42278afb 	.word	0x42278afb
   b5c34:	c2af4494 	.word	0xc2af4494
   b5c38:	42278971 	.word	0x42278971
   b5c3c:	c2af6479 	.word	0xc2af6479
   b5c40:	000bee95 	.word	0x000bee95
   b5c44:	000bef5a 	.word	0x000bef5a
   b5c48:	000bef61 	.word	0x000bef61
   b5c4c:	2003553c 	.word	0x2003553c
   b5c50:	4227631a 	.word	0x4227631a
   b5c54:	c2af4bd2 	.word	0xc2af4bd2
   b5c58:	42276ec4 	.word	0x42276ec4
   b5c5c:	c2af4115 	.word	0xc2af4115
   b5c60:	422780b5 	.word	0x422780b5
   b5c64:	c2af4086 	.word	0xc2af4086
   b5c68:	42278200 	.word	0x42278200
   b5c6c:	422781e1 	.word	0x422781e1
   b5c70:	c2af4476 	.word	0xc2af4476
   b5c74:	000bef68 	.word	0x000bef68
   b5c78:	000bef6f 	.word	0x000bef6f
   b5c7c:	000bef76 	.word	0x000bef76
   b5c80:	904f      	str	r0, [sp, #316]	; 0x13c
   b5c82:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5c86:	4630      	mov	r0, r6
   b5c88:	f7ff fb0a 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway orangeLineCTA = Railway(
   b5c8c:	a883      	add	r0, sp, #524	; 0x20c
   b5c8e:	e9cd b000 	strd	fp, r0, [sp]
   b5c92:	a88c      	add	r0, sp, #560	; 0x230
   b5c94:	4643      	mov	r3, r8
   b5c96:	462a      	mov	r2, r5
   b5c98:	4601      	mov	r1, r0
   b5c9a:	9602      	str	r6, [sp, #8]
   b5c9c:	48ba      	ldr	r0, [pc, #744]	; (b5f88 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa08>)
   b5c9e:	f7ff fb7f 	bl	b53a0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5ca2:	4630      	mov	r0, r6
   b5ca4:	f7fe fdba 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5ca8:	a883      	add	r0, sp, #524	; 0x20c
   b5caa:	f7fe fdd8 	bl	b485e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5cae:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5cb0:	f005 ffc4 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5cb4:	a8a4      	add	r0, sp, #656	; 0x290
   b5cb6:	f005 ffc1 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5cba:	4658      	mov	r0, fp
   b5cbc:	f005 ffbe 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5cc0:	4640      	mov	r0, r8
   b5cc2:	f7fe fdab 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5cc6:	4628      	mov	r0, r5
   b5cc8:	f7fe fda8 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5ccc:	a88c      	add	r0, sp, #560	; 0x230
   b5cce:	f7fe fd91 	bl	b47f4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b5cd2:	a8b0      	add	r0, sp, #704	; 0x2c0
   b5cd4:	904c      	str	r0, [sp, #304]	; 0x130
   b5cd6:	2007      	movs	r0, #7
   b5cd8:	904d      	str	r0, [sp, #308]	; 0x134
   b5cda:	a842      	add	r0, sp, #264	; 0x108
   b5cdc:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b5ce0:	4603      	mov	r3, r0
   b5ce2:	a88c      	add	r0, sp, #560	; 0x230
      lat = la;
   b5ce4:	edcd 8ab4 	vstr	s17, [sp, #720]	; 0x2d0
      lon = lo;
   b5ce8:	ed8d 8ab5 	vstr	s16, [sp, #724]	; 0x2d4
      lat = la;
   b5cec:	edcd 8abc 	vstr	s17, [sp, #752]	; 0x2f0
      lon = lo;
   b5cf0:	ed8d 8abd 	vstr	s16, [sp, #756]	; 0x2f4
      lat = la;
   b5cf4:	edcd dab0 	vstr	s27, [sp, #704]	; 0x2c0
      lon = lo;
   b5cf8:	ed8d dab1 	vstr	s26, [sp, #708]	; 0x2c4
      lat = la;
   b5cfc:	edcd cab2 	vstr	s25, [sp, #712]	; 0x2c8
      lon = lo;
   b5d00:	ed8d cab3 	vstr	s24, [sp, #716]	; 0x2cc
      lat = la;
   b5d04:	edcd bab6 	vstr	s23, [sp, #728]	; 0x2d8
      lon = lo;
   b5d08:	ed8d bab7 	vstr	s22, [sp, #732]	; 0x2dc
      lat = la;
   b5d0c:	edcd aab8 	vstr	s21, [sp, #736]	; 0x2e0
      lon = lo;
   b5d10:	ed8d aab9 	vstr	s20, [sp, #740]	; 0x2e4
      lat = la;
   b5d14:	edcd 9aba 	vstr	s19, [sp, #744]	; 0x2e8
      lon = lo;
   b5d18:	ed8d 9abb 	vstr	s18, [sp, #748]	; 0x2ec
   b5d1c:	f7fe fdd4 	bl	b48c8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5d20:	4a9a      	ldr	r2, [pc, #616]	; (b5f8c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa0c>)
   b5d22:	9f04      	ldr	r7, [sp, #16]
   b5d24:	f1a2 0e18 	sub.w	lr, r2, #24
   b5d28:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5d2c:	f50d 7c1d 	add.w	ip, sp, #628	; 0x274
   b5d30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5d34:	9805      	ldr	r0, [sp, #20]
   b5d36:	c803      	ldmia	r0, {r0, r1}
   b5d38:	e887 0003 	stmia.w	r7, {r0, r1}
   b5d3c:	a89d      	add	r0, sp, #628	; 0x274
   b5d3e:	904a      	str	r0, [sp, #296]	; 0x128
   b5d40:	2006      	movs	r0, #6
   b5d42:	904b      	str	r0, [sp, #300]	; 0x12c
   b5d44:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5d48:	4628      	mov	r0, r5
   b5d4a:	f7ff faa9 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5d4e:	4a8f      	ldr	r2, [pc, #572]	; (b5f8c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa0c>)
   b5d50:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   b5d52:	af93      	add	r7, sp, #588	; 0x24c
   b5d54:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5d58:	2204      	movs	r2, #4
   b5d5a:	ab48      	add	r3, sp, #288	; 0x120
   b5d5c:	9748      	str	r7, [sp, #288]	; 0x120
   b5d5e:	9249      	str	r2, [sp, #292]	; 0x124
   b5d60:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5d64:	4640      	mov	r0, r8
   b5d66:	f7ff fa9b 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5d6a:	4658      	mov	r0, fp
   b5d6c:	4988      	ldr	r1, [pc, #544]	; (b5f90 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa10>)
   b5d6e:	f7fe f9cd 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5d72:	a8a4      	add	r0, sp, #656	; 0x290
   b5d74:	4987      	ldr	r1, [pc, #540]	; (b5f94 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa14>)
   b5d76:	f7fe f9c9 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5d7a:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5d7c:	4986      	ldr	r1, [pc, #536]	; (b5f98 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa18>)
   b5d7e:	f7fe f9c5 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5d82:	aba4      	add	r3, sp, #656	; 0x290
   b5d84:	2002      	movs	r0, #2
   b5d86:	9346      	str	r3, [sp, #280]	; 0x118
   b5d88:	9047      	str	r0, [sp, #284]	; 0x11c
   b5d8a:	f50d 7980 	add.w	r9, sp, #256	; 0x100
   b5d8e:	aa46      	add	r2, sp, #280	; 0x118
   b5d90:	ca06      	ldmia	r2, {r1, r2}
   b5d92:	464b      	mov	r3, r9
   b5d94:	a883      	add	r0, sp, #524	; 0x20c
   b5d96:	f7fe fdcb 	bl	b4930 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5d9a:	4980      	ldr	r1, [pc, #512]	; (b5f9c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa1c>)
   b5d9c:	c90f      	ldmia	r1, {r0, r1, r2, r3}
   b5d9e:	af8f      	add	r7, sp, #572	; 0x23c
   b5da0:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5da4:	2204      	movs	r2, #4
   b5da6:	ab44      	add	r3, sp, #272	; 0x110
   b5da8:	9744      	str	r7, [sp, #272]	; 0x110
   b5daa:	9245      	str	r2, [sp, #276]	; 0x114
   b5dac:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5db0:	4630      	mov	r0, r6
   b5db2:	f7ff fa75 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway purpleLineCTA = Railway(
   b5db6:	aa83      	add	r2, sp, #524	; 0x20c
   b5db8:	4643      	mov	r3, r8
   b5dba:	a98c      	add	r1, sp, #560	; 0x230
   b5dbc:	e9cd b200 	strd	fp, r2, [sp]
   b5dc0:	9602      	str	r6, [sp, #8]
   b5dc2:	462a      	mov	r2, r5
   b5dc4:	4876      	ldr	r0, [pc, #472]	; (b5fa0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa20>)
   b5dc6:	f7ff faeb 	bl	b53a0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5dca:	4630      	mov	r0, r6
   b5dcc:	f7fe fd26 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5dd0:	a883      	add	r0, sp, #524	; 0x20c
   b5dd2:	f7fe fd44 	bl	b485e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5dd6:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5dd8:	f005 ff30 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5ddc:	a8a4      	add	r0, sp, #656	; 0x290
   b5dde:	f005 ff2d 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5de2:	4658      	mov	r0, fp
   b5de4:	f005 ff2a 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5de8:	4640      	mov	r0, r8
   b5dea:	f7fe fd17 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5dee:	4628      	mov	r0, r5
   b5df0:	f7fe fd14 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5df4:	a88c      	add	r0, sp, #560	; 0x230
   b5df6:	f7fe fcfd 	bl	b47f4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5dfa:	4b6a      	ldr	r3, [pc, #424]	; (b5fa4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa24>)
   b5dfc:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b5dfe:	4b6a      	ldr	r3, [pc, #424]	; (b5fa8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa28>)
   b5e00:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b5e02:	4b6a      	ldr	r3, [pc, #424]	; (b5fac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa2c>)
   b5e04:	93b2      	str	r3, [sp, #712]	; 0x2c8
);
   b5e06:	aab0      	add	r2, sp, #704	; 0x2c0
      lon = lo;
   b5e08:	4b69      	ldr	r3, [pc, #420]	; (b5fb0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa30>)
   b5e0a:	9242      	str	r2, [sp, #264]	; 0x108
   b5e0c:	93b3      	str	r3, [sp, #716]	; 0x2cc
   b5e0e:	2208      	movs	r2, #8
      lat = la;
   b5e10:	4b68      	ldr	r3, [pc, #416]	; (b5fb4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa34>)
   b5e12:	9243      	str	r2, [sp, #268]	; 0x10c
   b5e14:	f10d 0ae0 	add.w	sl, sp, #224	; 0xe0
   b5e18:	93b4      	str	r3, [sp, #720]	; 0x2d0
   b5e1a:	aa42      	add	r2, sp, #264	; 0x108
      lon = lo;
   b5e1c:	4b66      	ldr	r3, [pc, #408]	; (b5fb8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa38>)
   b5e1e:	93b5      	str	r3, [sp, #724]	; 0x2d4
   b5e20:	ca06      	ldmia	r2, {r1, r2}
   b5e22:	4653      	mov	r3, sl
   b5e24:	a88c      	add	r0, sp, #560	; 0x230
      lat = la;
   b5e26:	edcd 8ab6 	vstr	s17, [sp, #728]	; 0x2d8
      lon = lo;
   b5e2a:	ed8d 8ab7 	vstr	s16, [sp, #732]	; 0x2dc
      lat = la;
   b5e2e:	edcd 8abe 	vstr	s17, [sp, #760]	; 0x2f8
      lon = lo;
   b5e32:	ed8d 8abf 	vstr	s16, [sp, #764]	; 0x2fc
      lat = la;
   b5e36:	edcd 9ab8 	vstr	s19, [sp, #736]	; 0x2e0
      lon = lo;
   b5e3a:	ed8d 9ab9 	vstr	s18, [sp, #740]	; 0x2e4
      lat = la;
   b5e3e:	edcd aaba 	vstr	s21, [sp, #744]	; 0x2e8
      lon = lo;
   b5e42:	ed8d aabb 	vstr	s20, [sp, #748]	; 0x2ec
      lat = la;
   b5e46:	edcd babc 	vstr	s23, [sp, #752]	; 0x2f0
      lon = lo;
   b5e4a:	ed8d babd 	vstr	s22, [sp, #756]	; 0x2f4
   b5e4e:	f7fe fd3b 	bl	b48c8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5e52:	4b5a      	ldr	r3, [pc, #360]	; (b5fbc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa3c>)
   b5e54:	9f04      	ldr	r7, [sp, #16]
      lat = la;
   b5e56:	eddf 8a5a 	vldr	s17, [pc, #360]	; b5fc0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa40>
      lon = lo;
   b5e5a:	ed9f 8a5a 	vldr	s16, [pc, #360]	; b5fc4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa44>
   b5e5e:	f103 0ccc 	add.w	ip, r3, #204	; 0xcc
   b5e62:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5e66:	f50d 7e1d 	add.w	lr, sp, #628	; 0x274
   b5e6a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b5e6e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
   b5e72:	e887 0007 	stmia.w	r7, {r0, r1, r2}
   b5e76:	aa9d      	add	r2, sp, #628	; 0x274
   b5e78:	9240      	str	r2, [sp, #256]	; 0x100
   b5e7a:	2207      	movs	r2, #7
   b5e7c:	9241      	str	r2, [sp, #260]	; 0x104
   b5e7e:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5e82:	4628      	mov	r0, r5
   b5e84:	f7ff fa0c 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5e88:	4b4c      	ldr	r3, [pc, #304]	; (b5fbc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa3c>)
   b5e8a:	33e8      	adds	r3, #232	; 0xe8
   b5e8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5e8e:	af93      	add	r7, sp, #588	; 0x24c
   b5e90:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5e94:	2204      	movs	r2, #4
   b5e96:	ab3e      	add	r3, sp, #248	; 0xf8
   b5e98:	973e      	str	r7, [sp, #248]	; 0xf8
   b5e9a:	923f      	str	r2, [sp, #252]	; 0xfc
   b5e9c:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5ea0:	4640      	mov	r0, r8
   b5ea2:	f7ff f9fd 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5ea6:	4658      	mov	r0, fp
   b5ea8:	4947      	ldr	r1, [pc, #284]	; (b5fc8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa48>)
   b5eaa:	f7fe f92f 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5eae:	a8a4      	add	r0, sp, #656	; 0x290
   b5eb0:	4946      	ldr	r1, [pc, #280]	; (b5fcc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa4c>)
   b5eb2:	f7fe f92b 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5eb6:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5eb8:	4945      	ldr	r1, [pc, #276]	; (b5fd0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa50>)
   b5eba:	f7fe f927 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5ebe:	aba4      	add	r3, sp, #656	; 0x290
   b5ec0:	2102      	movs	r1, #2
   b5ec2:	933c      	str	r3, [sp, #240]	; 0xf0
   b5ec4:	f10d 09d8 	add.w	r9, sp, #216	; 0xd8
   b5ec8:	913d      	str	r1, [sp, #244]	; 0xf4
   b5eca:	aa3c      	add	r2, sp, #240	; 0xf0
   b5ecc:	464b      	mov	r3, r9
   b5ece:	ca06      	ldmia	r2, {r1, r2}
   b5ed0:	a883      	add	r0, sp, #524	; 0x20c
   b5ed2:	f7fe fd2d 	bl	b4930 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5ed6:	4b39      	ldr	r3, [pc, #228]	; (b5fbc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa3c>)
   b5ed8:	33f8      	adds	r3, #248	; 0xf8
   b5eda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5edc:	af8f      	add	r7, sp, #572	; 0x23c
   b5ede:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5ee2:	2204      	movs	r2, #4
   b5ee4:	ab3a      	add	r3, sp, #232	; 0xe8
   b5ee6:	973a      	str	r7, [sp, #232]	; 0xe8
   b5ee8:	923b      	str	r2, [sp, #236]	; 0xec
   b5eea:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5eee:	4630      	mov	r0, r6
   b5ef0:	f7ff f9d6 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway pinkLineCTA = Railway(
   b5ef4:	aa83      	add	r2, sp, #524	; 0x20c
   b5ef6:	4643      	mov	r3, r8
   b5ef8:	a98c      	add	r1, sp, #560	; 0x230
   b5efa:	e9cd b200 	strd	fp, r2, [sp]
   b5efe:	9602      	str	r6, [sp, #8]
   b5f00:	462a      	mov	r2, r5
   b5f02:	4834      	ldr	r0, [pc, #208]	; (b5fd4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa54>)
   b5f04:	f7ff fa4c 	bl	b53a0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5f08:	4630      	mov	r0, r6
   b5f0a:	f7fe fc87 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5f0e:	a883      	add	r0, sp, #524	; 0x20c
   b5f10:	f7fe fca5 	bl	b485e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5f14:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5f16:	f005 fe91 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5f1a:	a8a4      	add	r0, sp, #656	; 0x290
   b5f1c:	f005 fe8e 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5f20:	4658      	mov	r0, fp
   b5f22:	f005 fe8b 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5f26:	4640      	mov	r0, r8
   b5f28:	f7fe fc78 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5f2c:	4628      	mov	r0, r5
   b5f2e:	f7fe fc75 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5f32:	a88c      	add	r0, sp, #560	; 0x230
   b5f34:	f7fe fc5e 	bl	b47f4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5f38:	4b27      	ldr	r3, [pc, #156]	; (b5fd8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa58>)
   b5f3a:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b5f3c:	4b27      	ldr	r3, [pc, #156]	; (b5fdc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa5c>)
   b5f3e:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b5f40:	4b27      	ldr	r3, [pc, #156]	; (b5fe0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa60>)
   b5f42:	93b2      	str	r3, [sp, #712]	; 0x2c8
      lon = lo;
   b5f44:	4b27      	ldr	r3, [pc, #156]	; (b5fe4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa64>)
   b5f46:	93b3      	str	r3, [sp, #716]	; 0x2cc
      lat = la;
   b5f48:	4b27      	ldr	r3, [pc, #156]	; (b5fe8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa68>)
   b5f4a:	93b4      	str	r3, [sp, #720]	; 0x2d0
      lon = lo;
   b5f4c:	4b27      	ldr	r3, [pc, #156]	; (b5fec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa6c>)
   b5f4e:	93b5      	str	r3, [sp, #724]	; 0x2d4
      lat = la;
   b5f50:	4b27      	ldr	r3, [pc, #156]	; (b5ff0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa70>)
   b5f52:	93b6      	str	r3, [sp, #728]	; 0x2d8
      lon = lo;
   b5f54:	4b27      	ldr	r3, [pc, #156]	; (b5ff4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa74>)
   b5f56:	93b7      	str	r3, [sp, #732]	; 0x2dc
      lat = la;
   b5f58:	4b27      	ldr	r3, [pc, #156]	; (b5ff8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa78>)
   b5f5a:	93b8      	str	r3, [sp, #736]	; 0x2e0
      lon = lo;
   b5f5c:	4b27      	ldr	r3, [pc, #156]	; (b5ffc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa7c>)
   b5f5e:	93b9      	str	r3, [sp, #740]	; 0x2e4
      lat = la;
   b5f60:	4b27      	ldr	r3, [pc, #156]	; (b6000 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa80>)
   b5f62:	93ba      	str	r3, [sp, #744]	; 0x2e8
};
   b5f64:	aab0      	add	r2, sp, #704	; 0x2c0
      lon = lo;
   b5f66:	4b27      	ldr	r3, [pc, #156]	; (b6004 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa84>)
   b5f68:	9238      	str	r2, [sp, #224]	; 0xe0
   b5f6a:	93bb      	str	r3, [sp, #748]	; 0x2ec
   b5f6c:	2207      	movs	r2, #7
      lat = la;
   b5f6e:	4b26      	ldr	r3, [pc, #152]	; (b6008 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa88>)
   b5f70:	9239      	str	r2, [sp, #228]	; 0xe4
   b5f72:	93bc      	str	r3, [sp, #752]	; 0x2f0
   b5f74:	aa2e      	add	r2, sp, #184	; 0xb8
      lon = lo;
   b5f76:	4b25      	ldr	r3, [pc, #148]	; (b600c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa8c>)
   b5f78:	93bd      	str	r3, [sp, #756]	; 0x2f4
   b5f7a:	a88c      	add	r0, sp, #560	; 0x230
   b5f7c:	4613      	mov	r3, r2
   b5f7e:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b5f82:	f7fe fca1 	bl	b48c8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5f86:	e043      	b.n	b6010 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa90>
   b5f88:	20037dd8 	.word	0x20037dd8
   b5f8c:	000bf144 	.word	0x000bf144
   b5f90:	000bef7d 	.word	0x000bef7d
   b5f94:	000bef84 	.word	0x000bef84
   b5f98:	000bef8b 	.word	0x000bef8b
   b5f9c:	000bf154 	.word	0x000bf154
   b5fa0:	2003e4e8 	.word	0x2003e4e8
   b5fa4:	42276a76 	.word	0x42276a76
   b5fa8:	c2af692b 	.word	0xc2af692b
   b5fac:	42276b5f 	.word	0x42276b5f
   b5fb0:	c2af56cd 	.word	0xc2af56cd
   b5fb4:	42278a2d 	.word	0x42278a2d
   b5fb8:	c2af56d8 	.word	0xc2af56d8
   b5fbc:	000bf104 	.word	0x000bf104
   b5fc0:	42296602 	.word	0x42296602
   b5fc4:	c28e2881 	.word	0xc28e2881
   b5fc8:	000bef92 	.word	0x000bef92
   b5fcc:	000bef97 	.word	0x000bef97
   b5fd0:	000bef9e 	.word	0x000bef9e
   b5fd4:	2003e47c 	.word	0x2003e47c
   b5fd8:	4229481b 	.word	0x4229481b
   b5fdc:	c28e1ab2 	.word	0xc28e1ab2
   b5fe0:	42294f83 	.word	0x42294f83
   b5fe4:	c28e1d93 	.word	0xc28e1d93
   b5fe8:	422960e6 	.word	0x422960e6
   b5fec:	c28e1d2d 	.word	0xc28e1d2d
   b5ff0:	422966f9 	.word	0x422966f9
   b5ff4:	c28e1af0 	.word	0xc28e1af0
   b5ff8:	422971a5 	.word	0x422971a5
   b5ffc:	c28e23e6 	.word	0xc28e23e6
   b6000:	42297437 	.word	0x42297437
   b6004:	c28e3373 	.word	0xc28e3373
   b6008:	42297d7a 	.word	0x42297d7a
   b600c:	c28e3b5d 	.word	0xc28e3b5d
   b6010:	4bb1      	ldr	r3, [pc, #708]	; (b62d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd58>)
   b6012:	f503 7c84 	add.w	ip, r3, #264	; 0x108
   b6016:	461f      	mov	r7, r3
   b6018:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b601c:	f50d 7e1d 	add.w	lr, sp, #628	; 0x274
   b6020:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b6024:	e89c 0003 	ldmia.w	ip, {r0, r1}
   b6028:	9a04      	ldr	r2, [sp, #16]
   b602a:	e882 0003 	stmia.w	r2, {r0, r1}
   b602e:	aa9d      	add	r2, sp, #628	; 0x274
   b6030:	9236      	str	r2, [sp, #216]	; 0xd8
   b6032:	2206      	movs	r2, #6
   b6034:	9237      	str	r2, [sp, #220]	; 0xdc
   b6036:	e899 0006 	ldmia.w	r9, {r1, r2}
   b603a:	4628      	mov	r0, r5
   b603c:	f7ff f930 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b6040:	aa93      	add	r2, sp, #588	; 0x24c
   b6042:	9234      	str	r2, [sp, #208]	; 0xd0
   b6044:	2332      	movs	r3, #50	; 0x32
   b6046:	2204      	movs	r2, #4
   b6048:	e9cd 3494 	strd	r3, r4, [sp, #592]	; 0x250
   b604c:	9235      	str	r2, [sp, #212]	; 0xd4
   b604e:	ab34      	add	r3, sp, #208	; 0xd0
   b6050:	e893 0006 	ldmia.w	r3, {r1, r2}
   b6054:	4640      	mov	r0, r8
   b6056:	9493      	str	r4, [sp, #588]	; 0x24c
   b6058:	9496      	str	r4, [sp, #600]	; 0x258
   b605a:	f7ff f921 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b605e:	4658      	mov	r0, fp
   b6060:	499e      	ldr	r1, [pc, #632]	; (b62dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd5c>)
   b6062:	f7fe f853 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6066:	a8a4      	add	r0, sp, #656	; 0x290
   b6068:	499d      	ldr	r1, [pc, #628]	; (b62e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd60>)
   b606a:	f7fe f84f 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b606e:	a8aa      	add	r0, sp, #680	; 0x2a8
   b6070:	499c      	ldr	r1, [pc, #624]	; (b62e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd64>)
   b6072:	f7fe f84b 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6076:	aba4      	add	r3, sp, #656	; 0x290
   b6078:	2102      	movs	r1, #2
   b607a:	9332      	str	r3, [sp, #200]	; 0xc8
   b607c:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
   b6080:	9133      	str	r1, [sp, #204]	; 0xcc
   b6082:	aa32      	add	r2, sp, #200	; 0xc8
   b6084:	464b      	mov	r3, r9
   b6086:	ca06      	ldmia	r2, {r1, r2}
   b6088:	a883      	add	r0, sp, #524	; 0x20c
   b608a:	f7fe fc51 	bl	b4930 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b608e:	4621      	mov	r1, r4
   b6090:	2210      	movs	r2, #16
   b6092:	a88f      	add	r0, sp, #572	; 0x23c
   b6094:	f006 fdaa 	bl	bcbec <memset>
   b6098:	aa8f      	add	r2, sp, #572	; 0x23c
   b609a:	9230      	str	r2, [sp, #192]	; 0xc0
   b609c:	2204      	movs	r2, #4
   b609e:	ab30      	add	r3, sp, #192	; 0xc0
   b60a0:	9231      	str	r2, [sp, #196]	; 0xc4
   b60a2:	e893 0006 	ldmia.w	r3, {r1, r2}
   b60a6:	4630      	mov	r0, r6
   b60a8:	f7ff f8fa 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway redLineMBTA = Railway{
   b60ac:	aa83      	add	r2, sp, #524	; 0x20c
   b60ae:	4643      	mov	r3, r8
   b60b0:	a98c      	add	r1, sp, #560	; 0x230
   b60b2:	e9cd b200 	strd	fp, r2, [sp]
   b60b6:	9602      	str	r6, [sp, #8]
   b60b8:	462a      	mov	r2, r5
   b60ba:	488b      	ldr	r0, [pc, #556]	; (b62e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd68>)
   b60bc:	f7ff f970 	bl	b53a0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b60c0:	4630      	mov	r0, r6
   b60c2:	f7fe fbab 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b60c6:	a883      	add	r0, sp, #524	; 0x20c
   b60c8:	f7fe fbc9 	bl	b485e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b60cc:	a8aa      	add	r0, sp, #680	; 0x2a8
   b60ce:	f005 fdb5 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b60d2:	a8a4      	add	r0, sp, #656	; 0x290
   b60d4:	f005 fdb2 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b60d8:	4658      	mov	r0, fp
   b60da:	f005 fdaf 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b60de:	4640      	mov	r0, r8
   b60e0:	f7fe fb9c 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b60e4:	4628      	mov	r0, r5
   b60e6:	f7fe fb99 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b60ea:	a88c      	add	r0, sp, #560	; 0x230
   b60ec:	f7fe fb82 	bl	b47f4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b60f0:	4b7e      	ldr	r3, [pc, #504]	; (b62ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd6c>)
   b60f2:	93a4      	str	r3, [sp, #656]	; 0x290
      lon = lo;
   b60f4:	4b7e      	ldr	r3, [pc, #504]	; (b62f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd70>)
   b60f6:	93a5      	str	r3, [sp, #660]	; 0x294
      lat = la;
   b60f8:	4b7e      	ldr	r3, [pc, #504]	; (b62f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd74>)
   b60fa:	93a6      	str	r3, [sp, #664]	; 0x298
      lon = lo;
   b60fc:	4b7e      	ldr	r3, [pc, #504]	; (b62f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd78>)
   b60fe:	93a7      	str	r3, [sp, #668]	; 0x29c
      lat = la;
   b6100:	4b7e      	ldr	r3, [pc, #504]	; (b62fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd7c>)
   b6102:	93a8      	str	r3, [sp, #672]	; 0x2a0
      lon = lo;
   b6104:	4b7e      	ldr	r3, [pc, #504]	; (b6300 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd80>)
   b6106:	93a9      	str	r3, [sp, #676]	; 0x2a4
      lat = la;
   b6108:	4b7e      	ldr	r3, [pc, #504]	; (b6304 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd84>)
   b610a:	93aa      	str	r3, [sp, #680]	; 0x2a8
      lon = lo;
   b610c:	4b7e      	ldr	r3, [pc, #504]	; (b6308 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd88>)
   b610e:	93ab      	str	r3, [sp, #684]	; 0x2ac
};
   b6110:	2204      	movs	r2, #4
   b6112:	aba4      	add	r3, sp, #656	; 0x290
   b6114:	932e      	str	r3, [sp, #184]	; 0xb8
   b6116:	922f      	str	r2, [sp, #188]	; 0xbc
   b6118:	f10d 0a90 	add.w	sl, sp, #144	; 0x90
   b611c:	aa2e      	add	r2, sp, #184	; 0xb8
   b611e:	4653      	mov	r3, sl
   b6120:	ca06      	ldmia	r2, {r1, r2}
   b6122:	a88f      	add	r0, sp, #572	; 0x23c
   b6124:	f7fe fbd0 	bl	b48c8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b6128:	f507 7390 	add.w	r3, r7, #288	; 0x120
   b612c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   b6130:	2303      	movs	r3, #3
   b6132:	952c      	str	r5, [sp, #176]	; 0xb0
   b6134:	932d      	str	r3, [sp, #180]	; 0xb4
   b6136:	e885 0007 	stmia.w	r5, {r0, r1, r2}
   b613a:	e899 0006 	ldmia.w	r9, {r1, r2}
   b613e:	a88c      	add	r0, sp, #560	; 0x230
   b6140:	f7ff f8ae 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b6144:	2228      	movs	r2, #40	; 0x28
   b6146:	e9cd 2498 	strd	r2, r4, [sp, #608]	; 0x260
   b614a:	2204      	movs	r2, #4
   b614c:	ab2a      	add	r3, sp, #168	; 0xa8
   b614e:	f8cd b0a8 	str.w	fp, [sp, #168]	; 0xa8
   b6152:	922b      	str	r2, [sp, #172]	; 0xac
   b6154:	e893 0006 	ldmia.w	r3, {r1, r2}
   b6158:	4640      	mov	r0, r8
   b615a:	9497      	str	r4, [sp, #604]	; 0x25c
   b615c:	949a      	str	r4, [sp, #616]	; 0x268
   b615e:	f7ff f89f 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b6162:	a89d      	add	r0, sp, #628	; 0x274
   b6164:	4969      	ldr	r1, [pc, #420]	; (b630c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd8c>)
   b6166:	f7fd ffd1 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b616a:	a8b0      	add	r0, sp, #704	; 0x2c0
   b616c:	4968      	ldr	r1, [pc, #416]	; (b6310 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd90>)
   b616e:	f7fd ffcd 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6172:	a8b6      	add	r0, sp, #728	; 0x2d8
   b6174:	4967      	ldr	r1, [pc, #412]	; (b6314 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd94>)
   b6176:	f7fd ffc9 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b617a:	a9b0      	add	r1, sp, #704	; 0x2c0
   b617c:	9128      	str	r1, [sp, #160]	; 0xa0
   b617e:	2102      	movs	r1, #2
   b6180:	f10d 0988 	add.w	r9, sp, #136	; 0x88
   b6184:	9129      	str	r1, [sp, #164]	; 0xa4
   b6186:	aa28      	add	r2, sp, #160	; 0xa0
   b6188:	464b      	mov	r3, r9
   b618a:	ca06      	ldmia	r2, {r1, r2}
   b618c:	a883      	add	r0, sp, #524	; 0x20c
   b618e:	f7fe fbcf 	bl	b4930 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b6192:	4621      	mov	r1, r4
   b6194:	2210      	movs	r2, #16
   b6196:	a893      	add	r0, sp, #588	; 0x24c
   b6198:	f006 fd28 	bl	bcbec <memset>
   b619c:	aa93      	add	r2, sp, #588	; 0x24c
   b619e:	9226      	str	r2, [sp, #152]	; 0x98
   b61a0:	2204      	movs	r2, #4
   b61a2:	ab26      	add	r3, sp, #152	; 0x98
   b61a4:	9227      	str	r2, [sp, #156]	; 0x9c
   b61a6:	e893 0006 	ldmia.w	r3, {r1, r2}
   b61aa:	4630      	mov	r0, r6
   b61ac:	f7ff f878 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway blueLineMBTA = Railway{
   b61b0:	aa83      	add	r2, sp, #524	; 0x20c
   b61b2:	9201      	str	r2, [sp, #4]
   b61b4:	aa9d      	add	r2, sp, #628	; 0x274
   b61b6:	4643      	mov	r3, r8
   b61b8:	a98f      	add	r1, sp, #572	; 0x23c
   b61ba:	9602      	str	r6, [sp, #8]
   b61bc:	9200      	str	r2, [sp, #0]
   b61be:	4856      	ldr	r0, [pc, #344]	; (b6318 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd98>)
   b61c0:	aa8c      	add	r2, sp, #560	; 0x230
   b61c2:	f7ff f8ed 	bl	b53a0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b61c6:	4630      	mov	r0, r6
   b61c8:	f7fe fb28 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b61cc:	a883      	add	r0, sp, #524	; 0x20c
   b61ce:	f7fe fb46 	bl	b485e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b61d2:	a8b6      	add	r0, sp, #728	; 0x2d8
   b61d4:	f005 fd32 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b61d8:	a8b0      	add	r0, sp, #704	; 0x2c0
   b61da:	f005 fd2f 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b61de:	a89d      	add	r0, sp, #628	; 0x274
   b61e0:	f005 fd2c 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b61e4:	4640      	mov	r0, r8
   b61e6:	f7fe fb19 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b61ea:	a88c      	add	r0, sp, #560	; 0x230
   b61ec:	f7fe fb16 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b61f0:	a88f      	add	r0, sp, #572	; 0x23c
   b61f2:	f7fe faff 	bl	b47f4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b61f6:	4b49      	ldr	r3, [pc, #292]	; (b631c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd9c>)
   b61f8:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b61fa:	4b49      	ldr	r3, [pc, #292]	; (b6320 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xda0>)
   b61fc:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b61fe:	4b49      	ldr	r3, [pc, #292]	; (b6324 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xda4>)
   b6200:	93b2      	str	r3, [sp, #712]	; 0x2c8
      lon = lo;
   b6202:	4b49      	ldr	r3, [pc, #292]	; (b6328 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xda8>)
   b6204:	93b3      	str	r3, [sp, #716]	; 0x2cc
      lat = la;
   b6206:	4b49      	ldr	r3, [pc, #292]	; (b632c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdac>)
   b6208:	93b4      	str	r3, [sp, #720]	; 0x2d0
      lon = lo;
   b620a:	4b49      	ldr	r3, [pc, #292]	; (b6330 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdb0>)
   b620c:	93b5      	str	r3, [sp, #724]	; 0x2d4
      lat = la;
   b620e:	4b49      	ldr	r3, [pc, #292]	; (b6334 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdb4>)
   b6210:	93b6      	str	r3, [sp, #728]	; 0x2d8
      lon = lo;
   b6212:	4b49      	ldr	r3, [pc, #292]	; (b6338 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdb8>)
   b6214:	93b7      	str	r3, [sp, #732]	; 0x2dc
      lat = la;
   b6216:	4b49      	ldr	r3, [pc, #292]	; (b633c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdbc>)
   b6218:	93b8      	str	r3, [sp, #736]	; 0x2e0
};
   b621a:	aab0      	add	r2, sp, #704	; 0x2c0
      lon = lo;
   b621c:	4b48      	ldr	r3, [pc, #288]	; (b6340 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdc0>)
   b621e:	9224      	str	r2, [sp, #144]	; 0x90
   b6220:	93b9      	str	r3, [sp, #740]	; 0x2e4
   b6222:	2206      	movs	r2, #6
      lat = la;
   b6224:	4b47      	ldr	r3, [pc, #284]	; (b6344 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdc4>)
   b6226:	9225      	str	r2, [sp, #148]	; 0x94
   b6228:	93ba      	str	r3, [sp, #744]	; 0x2e8
   b622a:	aa1a      	add	r2, sp, #104	; 0x68
      lon = lo;
   b622c:	4b46      	ldr	r3, [pc, #280]	; (b6348 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdc8>)
   b622e:	93bb      	str	r3, [sp, #748]	; 0x2ec
   b6230:	a88c      	add	r0, sp, #560	; 0x230
   b6232:	4613      	mov	r3, r2
   b6234:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b6238:	f7fe fb46 	bl	b48c8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b623c:	4b26      	ldr	r3, [pc, #152]	; (b62d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd58>)
   b623e:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
   b6242:	f503 7c96 	add.w	ip, r3, #300	; 0x12c
   b6246:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b624a:	465f      	mov	r7, fp
   b624c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b624e:	f8dc 3000 	ldr.w	r3, [ip]
   b6252:	603b      	str	r3, [r7, #0]
   b6254:	2305      	movs	r3, #5
   b6256:	9323      	str	r3, [sp, #140]	; 0x8c
   b6258:	e899 0006 	ldmia.w	r9, {r1, r2}
   b625c:	4628      	mov	r0, r5
   b625e:	f7ff f81f 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b6262:	aa93      	add	r2, sp, #588	; 0x24c
   b6264:	9220      	str	r2, [sp, #128]	; 0x80
   b6266:	232d      	movs	r3, #45	; 0x2d
   b6268:	2204      	movs	r2, #4
   b626a:	e9cd 3494 	strd	r3, r4, [sp, #592]	; 0x250
   b626e:	9221      	str	r2, [sp, #132]	; 0x84
   b6270:	ab20      	add	r3, sp, #128	; 0x80
   b6272:	e893 0006 	ldmia.w	r3, {r1, r2}
   b6276:	4640      	mov	r0, r8
   b6278:	9493      	str	r4, [sp, #588]	; 0x24c
   b627a:	9496      	str	r4, [sp, #600]	; 0x258
   b627c:	f7ff f810 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b6280:	a89d      	add	r0, sp, #628	; 0x274
   b6282:	4932      	ldr	r1, [pc, #200]	; (b634c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdcc>)
   b6284:	f7fd ff42 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6288:	a8a4      	add	r0, sp, #656	; 0x290
   b628a:	4931      	ldr	r1, [pc, #196]	; (b6350 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdd0>)
   b628c:	f7fd ff3e 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6290:	a8aa      	add	r0, sp, #680	; 0x2a8
   b6292:	4930      	ldr	r1, [pc, #192]	; (b6354 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdd4>)
   b6294:	f7fd ff3a 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6298:	aba4      	add	r3, sp, #656	; 0x290
   b629a:	931e      	str	r3, [sp, #120]	; 0x78
   b629c:	2302      	movs	r3, #2
   b629e:	931f      	str	r3, [sp, #124]	; 0x7c
   b62a0:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   b62a4:	aa1e      	add	r2, sp, #120	; 0x78
   b62a6:	4653      	mov	r3, sl
   b62a8:	ca06      	ldmia	r2, {r1, r2}
   b62aa:	a883      	add	r0, sp, #524	; 0x20c
   b62ac:	f7fe fb40 	bl	b4930 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b62b0:	4621      	mov	r1, r4
   b62b2:	2210      	movs	r2, #16
   b62b4:	a88f      	add	r0, sp, #572	; 0x23c
   b62b6:	f006 fc99 	bl	bcbec <memset>
   b62ba:	aa8f      	add	r2, sp, #572	; 0x23c
   b62bc:	921c      	str	r2, [sp, #112]	; 0x70
   b62be:	2204      	movs	r2, #4
   b62c0:	ab1c      	add	r3, sp, #112	; 0x70
   b62c2:	921d      	str	r2, [sp, #116]	; 0x74
   b62c4:	e893 0006 	ldmia.w	r3, {r1, r2}
   b62c8:	4630      	mov	r0, r6
   b62ca:	f7fe ffe9 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway orangeLineMBTA = Railway{
   b62ce:	ab83      	add	r3, sp, #524	; 0x20c
   b62d0:	9301      	str	r3, [sp, #4]
   b62d2:	ab9d      	add	r3, sp, #628	; 0x274
   b62d4:	e040      	b.n	b6358 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdd8>
   b62d6:	bf00      	nop
   b62d8:	000bf104 	.word	0x000bf104
   b62dc:	000bef21 	.word	0x000bef21
   b62e0:	000bef25 	.word	0x000bef25
   b62e4:	000bef2c 	.word	0x000bef2c
   b62e8:	2003e5c0 	.word	0x2003e5c0
   b62ec:	422984a9 	.word	0x422984a9
   b62f0:	c28e0be6 	.word	0xc28e0be6
   b62f4:	422970a6 	.word	0x422970a6
   b62f8:	c28e1862 	.word	0xc28e1862
   b62fc:	42296fe1 	.word	0x42296fe1
   b6300:	c28e1e86 	.word	0xc28e1e86
   b6304:	422971d1 	.word	0x422971d1
   b6308:	c28e1fcf 	.word	0xc28e1fcf
   b630c:	000bef33 	.word	0x000bef33
   b6310:	000bef38 	.word	0x000bef38
   b6314:	000bef3f 	.word	0x000bef3f
   b6318:	2003530c 	.word	0x2003530c
   b631c:	4229537a 	.word	0x4229537a
   b6320:	c28e30c9 	.word	0xc28e30c9
   b6324:	422963d0 	.word	0x422963d0
   b6328:	c28e26f1 	.word	0xc28e26f1
   b632c:	4229634b 	.word	0x4229634b
   b6330:	c28e210d 	.word	0xc28e210d
   b6334:	42296e30 	.word	0x42296e30
   b6338:	c28e1d5a 	.word	0xc28e1d5a
   b633c:	42298278 	.word	0x42298278
   b6340:	c28e26e2 	.word	0xc28e26e2
   b6344:	42299ccd 	.word	0x42299ccd
   b6348:	c28e2770 	.word	0xc28e2770
   b634c:	000bef68 	.word	0x000bef68
   b6350:	000bef6f 	.word	0x000bef6f
   b6354:	000bef76 	.word	0x000bef76
   b6358:	462a      	mov	r2, r5
   b635a:	a98c      	add	r1, sp, #560	; 0x230
   b635c:	9602      	str	r6, [sp, #8]
   b635e:	9300      	str	r3, [sp, #0]
   b6360:	48b5      	ldr	r0, [pc, #724]	; (b6638 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10b8>)
   b6362:	4643      	mov	r3, r8
   b6364:	f7ff f81c 	bl	b53a0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b6368:	4630      	mov	r0, r6
   b636a:	f7fe fa57 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b636e:	a883      	add	r0, sp, #524	; 0x20c
   b6370:	f7fe fa75 	bl	b485e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b6374:	a8aa      	add	r0, sp, #680	; 0x2a8
   b6376:	f005 fc61 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b637a:	a8a4      	add	r0, sp, #656	; 0x290
   b637c:	f005 fc5e 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6380:	a89d      	add	r0, sp, #628	; 0x274
   b6382:	f005 fc5b 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6386:	4640      	mov	r0, r8
   b6388:	f7fe fa48 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b638c:	4628      	mov	r0, r5
   b638e:	f7fe fa45 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b6392:	a88c      	add	r0, sp, #560	; 0x230
   b6394:	f7fe fa2e 	bl	b47f4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b6398:	4ba8      	ldr	r3, [pc, #672]	; (b663c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10bc>)
   b639a:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b639c:	4ba8      	ldr	r3, [pc, #672]	; (b6640 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10c0>)
   b639e:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b63a0:	4ba8      	ldr	r3, [pc, #672]	; (b6644 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10c4>)
   b63a2:	93b4      	str	r3, [sp, #720]	; 0x2d0
      lon = lo;
   b63a4:	4ba8      	ldr	r3, [pc, #672]	; (b6648 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10c8>)
   b63a6:	93b5      	str	r3, [sp, #724]	; 0x2d4
      lat = la;
   b63a8:	4ba8      	ldr	r3, [pc, #672]	; (b664c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10cc>)
   b63aa:	93b6      	str	r3, [sp, #728]	; 0x2d8
      lon = lo;
   b63ac:	4ba8      	ldr	r3, [pc, #672]	; (b6650 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10d0>)
   b63ae:	93b7      	str	r3, [sp, #732]	; 0x2dc
      lat = la;
   b63b0:	4ba8      	ldr	r3, [pc, #672]	; (b6654 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10d4>)
   b63b2:	93b8      	str	r3, [sp, #736]	; 0x2e0
      lon = lo;
   b63b4:	4ba8      	ldr	r3, [pc, #672]	; (b6658 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10d8>)
   b63b6:	93b9      	str	r3, [sp, #740]	; 0x2e4
      lat = la;
   b63b8:	4ba8      	ldr	r3, [pc, #672]	; (b665c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10dc>)
   b63ba:	93ba      	str	r3, [sp, #744]	; 0x2e8
      lon = lo;
   b63bc:	4ba8      	ldr	r3, [pc, #672]	; (b6660 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10e0>)
   b63be:	93bb      	str	r3, [sp, #748]	; 0x2ec
      lat = la;
   b63c0:	4ba8      	ldr	r3, [pc, #672]	; (b6664 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10e4>)
   b63c2:	93bc      	str	r3, [sp, #752]	; 0x2f0
      lon = lo;
   b63c4:	4ba8      	ldr	r3, [pc, #672]	; (b6668 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10e8>)
   b63c6:	93bd      	str	r3, [sp, #756]	; 0x2f4
      lat = la;
   b63c8:	4ba8      	ldr	r3, [pc, #672]	; (b666c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10ec>)
   b63ca:	93be      	str	r3, [sp, #760]	; 0x2f8
      lon = lo;
   b63cc:	4ba8      	ldr	r3, [pc, #672]	; (b6670 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f0>)
   b63ce:	93bf      	str	r3, [sp, #764]	; 0x2fc
};
   b63d0:	abb0      	add	r3, sp, #704	; 0x2c0
   b63d2:	931a      	str	r3, [sp, #104]	; 0x68
   b63d4:	2308      	movs	r3, #8
   b63d6:	931b      	str	r3, [sp, #108]	; 0x6c
   b63d8:	f10d 0940 	add.w	r9, sp, #64	; 0x40
   b63dc:	aa1a      	add	r2, sp, #104	; 0x68
   b63de:	464b      	mov	r3, r9
   b63e0:	ca06      	ldmia	r2, {r1, r2}
   b63e2:	a88c      	add	r0, sp, #560	; 0x230
      lat = la;
   b63e4:	edcd 8ab2 	vstr	s17, [sp, #712]	; 0x2c8
      lon = lo;
   b63e8:	ed8d 8ab3 	vstr	s16, [sp, #716]	; 0x2cc
   b63ec:	f7fe fa6c 	bl	b48c8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b63f0:	f8df c2c8 	ldr.w	ip, [pc, #712]	; b66bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x113c>
   b63f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b63f8:	f50d 7e1d 	add.w	lr, sp, #628	; 0x274
   b63fc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b6400:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
   b6404:	9b04      	ldr	r3, [sp, #16]
   b6406:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b640a:	ab9d      	add	r3, sp, #628	; 0x274
   b640c:	9318      	str	r3, [sp, #96]	; 0x60
   b640e:	2307      	movs	r3, #7
   b6410:	9319      	str	r3, [sp, #100]	; 0x64
   b6412:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b6416:	4628      	mov	r0, r5
   b6418:	f7fe ff42 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b641c:	aa93      	add	r2, sp, #588	; 0x24c
   b641e:	9216      	str	r2, [sp, #88]	; 0x58
   b6420:	2346      	movs	r3, #70	; 0x46
   b6422:	2204      	movs	r2, #4
   b6424:	e9cd 3494 	strd	r3, r4, [sp, #592]	; 0x250
   b6428:	9217      	str	r2, [sp, #92]	; 0x5c
   b642a:	ab16      	add	r3, sp, #88	; 0x58
   b642c:	e893 0006 	ldmia.w	r3, {r1, r2}
   b6430:	4640      	mov	r0, r8
   b6432:	9493      	str	r4, [sp, #588]	; 0x24c
   b6434:	9496      	str	r4, [sp, #600]	; 0x258
   b6436:	f7fe ff33 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b643a:	4658      	mov	r0, fp
   b643c:	498d      	ldr	r1, [pc, #564]	; (b6674 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f4>)
   b643e:	f7fd fe65 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6442:	a8a4      	add	r0, sp, #656	; 0x290
   b6444:	498c      	ldr	r1, [pc, #560]	; (b6678 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f8>)
   b6446:	f7fd fe61 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b644a:	a8aa      	add	r0, sp, #680	; 0x2a8
   b644c:	498b      	ldr	r1, [pc, #556]	; (b667c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10fc>)
   b644e:	f7fd fe5d 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6452:	aba4      	add	r3, sp, #656	; 0x290
   b6454:	9314      	str	r3, [sp, #80]	; 0x50
   b6456:	2302      	movs	r3, #2
   b6458:	9315      	str	r3, [sp, #84]	; 0x54
   b645a:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   b645e:	aa14      	add	r2, sp, #80	; 0x50
   b6460:	4653      	mov	r3, sl
   b6462:	ca06      	ldmia	r2, {r1, r2}
   b6464:	a883      	add	r0, sp, #524	; 0x20c
   b6466:	f7fe fa63 	bl	b4930 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b646a:	4621      	mov	r1, r4
   b646c:	2210      	movs	r2, #16
   b646e:	a88f      	add	r0, sp, #572	; 0x23c
   b6470:	f006 fbbc 	bl	bcbec <memset>
   b6474:	aa8f      	add	r2, sp, #572	; 0x23c
   b6476:	9212      	str	r2, [sp, #72]	; 0x48
   b6478:	2204      	movs	r2, #4
   b647a:	ab12      	add	r3, sp, #72	; 0x48
   b647c:	9213      	str	r2, [sp, #76]	; 0x4c
   b647e:	e893 0006 	ldmia.w	r3, {r1, r2}
   b6482:	4630      	mov	r0, r6
   b6484:	f7fe ff0c 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway greenLine1MBTA = Railway{
   b6488:	ab83      	add	r3, sp, #524	; 0x20c
   b648a:	462a      	mov	r2, r5
   b648c:	a98c      	add	r1, sp, #560	; 0x230
   b648e:	e9cd b300 	strd	fp, r3, [sp]
   b6492:	9602      	str	r6, [sp, #8]
   b6494:	4643      	mov	r3, r8
   b6496:	487a      	ldr	r0, [pc, #488]	; (b6680 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1100>)
   b6498:	f7fe ff82 	bl	b53a0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b649c:	4630      	mov	r0, r6
   b649e:	f7fe f9bd 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b64a2:	a883      	add	r0, sp, #524	; 0x20c
   b64a4:	f7fe f9db 	bl	b485e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b64a8:	a8aa      	add	r0, sp, #680	; 0x2a8
   b64aa:	f005 fbc7 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b64ae:	a8a4      	add	r0, sp, #656	; 0x290
   b64b0:	f005 fbc4 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b64b4:	4658      	mov	r0, fp
   b64b6:	f005 fbc1 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b64ba:	4640      	mov	r0, r8
   b64bc:	f7fe f9ae 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b64c0:	4628      	mov	r0, r5
   b64c2:	f7fe f9ab 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b64c6:	a88c      	add	r0, sp, #560	; 0x230
   b64c8:	f7fe f994 	bl	b47f4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b64cc:	4b6d      	ldr	r3, [pc, #436]	; (b6684 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1104>)
   b64ce:	939d      	str	r3, [sp, #628]	; 0x274
      lon = lo;
   b64d0:	4b6d      	ldr	r3, [pc, #436]	; (b6688 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1108>)
   b64d2:	939e      	str	r3, [sp, #632]	; 0x278
};
   b64d4:	ab9d      	add	r3, sp, #628	; 0x274
   b64d6:	6033      	str	r3, [r6, #0]
   b64d8:	2302      	movs	r3, #2
   b64da:	6073      	str	r3, [r6, #4]
   b64dc:	e896 0006 	ldmia.w	r6, {r1, r2}
   b64e0:	ab08      	add	r3, sp, #32
   b64e2:	a88f      	add	r0, sp, #572	; 0x23c
      lat = la;
   b64e4:	edcd 8a9f 	vstr	s17, [sp, #636]	; 0x27c
      lon = lo;
   b64e8:	ed8d 8aa0 	vstr	s16, [sp, #640]	; 0x280
   b64ec:	f7fe f9ec 	bl	b48c8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b64f0:	ab09      	add	r3, sp, #36	; 0x24
   b64f2:	9310      	str	r3, [sp, #64]	; 0x40
   b64f4:	2301      	movs	r3, #1
   b64f6:	9311      	str	r3, [sp, #68]	; 0x44
   b64f8:	e899 0006 	ldmia.w	r9, {r1, r2}
   b64fc:	260f      	movs	r6, #15
   b64fe:	a88c      	add	r0, sp, #560	; 0x230
   b6500:	9609      	str	r6, [sp, #36]	; 0x24
   b6502:	f7fe fecd 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b6506:	2304      	movs	r3, #4
   b6508:	930f      	str	r3, [sp, #60]	; 0x3c
   b650a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
   b650e:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b6512:	4628      	mov	r0, r5
   b6514:	e9cd 4697 	strd	r4, r6, [sp, #604]	; 0x25c
   b6518:	e9cd 4499 	strd	r4, r4, [sp, #612]	; 0x264
   b651c:	f7fe fec0 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b6520:	a8a4      	add	r0, sp, #656	; 0x290
   b6522:	4954      	ldr	r1, [pc, #336]	; (b6674 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f4>)
   b6524:	f7fd fdf2 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6528:	a8b0      	add	r0, sp, #704	; 0x2c0
   b652a:	4953      	ldr	r1, [pc, #332]	; (b6678 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f8>)
   b652c:	f7fd fdee 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6530:	a8b6      	add	r0, sp, #728	; 0x2d8
   b6532:	4952      	ldr	r1, [pc, #328]	; (b667c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10fc>)
   b6534:	f7fd fdea 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6538:	abb0      	add	r3, sp, #704	; 0x2c0
   b653a:	930c      	str	r3, [sp, #48]	; 0x30
   b653c:	2302      	movs	r3, #2
   b653e:	930d      	str	r3, [sp, #52]	; 0x34
   b6540:	aa0c      	add	r2, sp, #48	; 0x30
   b6542:	ab07      	add	r3, sp, #28
   b6544:	ca06      	ldmia	r2, {r1, r2}
   b6546:	4640      	mov	r0, r8
   b6548:	f7fe f9f2 	bl	b4930 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b654c:	4621      	mov	r1, r4
   b654e:	2210      	movs	r2, #16
   b6550:	a893      	add	r0, sp, #588	; 0x24c
   b6552:	f006 fb4b 	bl	bcbec <memset>
   b6556:	aa93      	add	r2, sp, #588	; 0x24c
   b6558:	920a      	str	r2, [sp, #40]	; 0x28
   b655a:	2204      	movs	r2, #4
   b655c:	ab0a      	add	r3, sp, #40	; 0x28
   b655e:	920b      	str	r2, [sp, #44]	; 0x2c
   b6560:	e893 0006 	ldmia.w	r3, {r1, r2}
   b6564:	a883      	add	r0, sp, #524	; 0x20c
   b6566:	f7fe fe9b 	bl	b52a0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway greenLine2MBTA = Railway{
   b656a:	ab83      	add	r3, sp, #524	; 0x20c
   b656c:	e9cd 8301 	strd	r8, r3, [sp, #4]
   b6570:	aba4      	add	r3, sp, #656	; 0x290
   b6572:	aa8c      	add	r2, sp, #560	; 0x230
   b6574:	a98f      	add	r1, sp, #572	; 0x23c
   b6576:	9300      	str	r3, [sp, #0]
   b6578:	4844      	ldr	r0, [pc, #272]	; (b668c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x110c>)
   b657a:	462b      	mov	r3, r5
   b657c:	f7fe ff10 	bl	b53a0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b6580:	a883      	add	r0, sp, #524	; 0x20c
   b6582:	f7fe f94b 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b6586:	4640      	mov	r0, r8
   b6588:	f7fe f969 	bl	b485e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b658c:	a8b6      	add	r0, sp, #728	; 0x2d8
   b658e:	f005 fb55 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6592:	a8b0      	add	r0, sp, #704	; 0x2c0
   b6594:	f005 fb52 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6598:	a8a4      	add	r0, sp, #656	; 0x290
   b659a:	f005 fb4f 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b659e:	4628      	mov	r0, r5
   b65a0:	f7fe f93c 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b65a4:	a88c      	add	r0, sp, #560	; 0x230
   b65a6:	f7fe f939 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b65aa:	a88f      	add	r0, sp, #572	; 0x23c
   b65ac:	f7fe f922 	bl	b47f4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b65b0:	4b37      	ldr	r3, [pc, #220]	; (b6690 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1110>)
const BleUuid serviceUuid("a73ba101-8192-4a51-b42d-ae9cd14b14a5");
   b65b2:	4938      	ldr	r1, [pc, #224]	; (b6694 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1114>)
   b65b4:	609c      	str	r4, [r3, #8]
   b65b6:	e9c3 4400 	strd	r4, r4, [r3]
   b65ba:	4b37      	ldr	r3, [pc, #220]	; (b6698 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1118>)
   b65bc:	4837      	ldr	r0, [pc, #220]	; (b669c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x111c>)
   b65be:	609c      	str	r4, [r3, #8]
   b65c0:	e9c3 4400 	strd	r4, r4, [r3]
   b65c4:	4b36      	ldr	r3, [pc, #216]	; (b66a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1120>)
   b65c6:	4d37      	ldr	r5, [pc, #220]	; (b66a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1124>)
   b65c8:	609c      	str	r4, [r3, #8]
   b65ca:	e9c3 4400 	strd	r4, r4, [r3]
   b65ce:	4b36      	ldr	r3, [pc, #216]	; (b66a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1128>)
   b65d0:	f8df 80c8 	ldr.w	r8, [pc, #200]	; b669c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x111c>
   b65d4:	609c      	str	r4, [r3, #8]
   b65d6:	e9c3 4400 	strd	r4, r4, [r3]
   b65da:	4b34      	ldr	r3, [pc, #208]	; (b66ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x112c>)
   b65dc:	e9c3 4400 	strd	r4, r4, [r3]
   b65e0:	609c      	str	r4, [r3, #8]
   b65e2:	f003 f9cd 	bl	b9980 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b65e6:	4932      	ldr	r1, [pc, #200]	; (b66b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1130>)
   b65e8:	4832      	ldr	r0, [pc, #200]	; (b66b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1134>)
   b65ea:	f003 f9c9 	bl	b9980 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b65ee:	4932      	ldr	r1, [pc, #200]	; (b66b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1138>)
   b65f0:	482c      	ldr	r0, [pc, #176]	; (b66a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1124>)
   b65f2:	f003 f9c5 	bl	b9980 <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b65f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b65f8:	465e      	mov	r6, fp
   b65fa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b65fc:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   b6600:	f8d5 c000 	ldr.w	ip, [r5]
   b6604:	f8c7 c000 	str.w	ip, [r7]
   b6608:	ad9d      	add	r5, sp, #628	; 0x274
   b660a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b660c:	46c1      	mov	r9, r8
   b660e:	9b04      	ldr	r3, [sp, #16]
   b6610:	f859 a910 	ldr.w	sl, [r9], #-16
   b6614:	f8c3 a000 	str.w	sl, [r3]
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b6618:	465d      	mov	r5, fp
   b661a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b661c:	aea4      	add	r6, sp, #656	; 0x290
   b661e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b6620:	f8df e09c 	ldr.w	lr, [pc, #156]	; b66c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1140>
   b6624:	f8c6 c000 	str.w	ip, [r6]
        BleUuid sUuid(svcUuid);
   b6628:	f50d 7c1d 	add.w	ip, sp, #628	; 0x274
      constexpr __shared_count() noexcept : _M_pi(0)
   b662c:	e9ce 4400 	strd	r4, r4, [lr]
   b6630:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6634:	adb0      	add	r5, sp, #704	; 0x2c0
   b6636:	e045      	b.n	b66c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1144>
   b6638:	20037e44 	.word	0x20037e44
   b663c:	42296555 	.word	0x42296555
   b6640:	c28e30ae 	.word	0xc28e30ae
   b6644:	42296847 	.word	0x42296847
   b6648:	c28e2445 	.word	0xc28e2445
   b664c:	422968cc 	.word	0x422968cc
   b6650:	c28e2106 	.word	0xc28e2106
   b6654:	422972cd 	.word	0x422972cd
   b6658:	c28e1db0 	.word	0xc28e1db0
   b665c:	42297777 	.word	0x42297777
   b6660:	c28e1f5e 	.word	0xc28e1f5e
   b6664:	42297668 	.word	0x42297668
   b6668:	c28e20d5 	.word	0xc28e20d5
   b666c:	42298291 	.word	0x42298291
   b6670:	c28e30ba 	.word	0xc28e30ba
   b6674:	000bee95 	.word	0x000bee95
   b6678:	000bef5a 	.word	0x000bef5a
   b667c:	000bef61 	.word	0x000bef61
   b6680:	20035464 	.word	0x20035464
   b6684:	422957f0 	.word	0x422957f0
   b6688:	c28e3351 	.word	0xc28e3351
   b668c:	200354d0 	.word	0x200354d0
   b6690:	200353e8 	.word	0x200353e8
   b6694:	000befa5 	.word	0x000befa5
   b6698:	20035458 	.word	0x20035458
   b669c:	20035254 	.word	0x20035254
   b66a0:	20037dcc 	.word	0x20037dcc
   b66a4:	2003527c 	.word	0x2003527c
   b66a8:	20035290 	.word	0x20035290
   b66ac:	2003e694 	.word	0x2003e694
   b66b0:	000befca 	.word	0x000befca
   b66b4:	20035268 	.word	0x20035268
   b66b8:	000befef 	.word	0x000befef
   b66bc:	000bf244 	.word	0x000bf244
   b66c0:	2003e6a4 	.word	0x2003e6a4
   b66c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b66c6:	abb0      	add	r3, sp, #704	; 0x2c0
        BleUuid sUuid(svcUuid);
   b66c8:	f8c5 a000 	str.w	sl, [r5]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b66cc:	4670      	mov	r0, lr
   b66ce:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b66d2:	9300      	str	r3, [sp, #0]
   b66d4:	497b      	ldr	r1, [pc, #492]	; (b68c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1344>)
   b66d6:	aba4      	add	r3, sp, #656	; 0x290
   b66d8:	f04f 0210 	mov.w	r2, #16
   b66dc:	f003 feba 	bl	ba454 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b66e0:	f8df c27c 	ldr.w	ip, [pc, #636]	; b6960 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13e0>
   b66e4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b66e8:	46de      	mov	lr, fp
   b66ea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b66ee:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   b66f2:	f8dc e000 	ldr.w	lr, [ip]
   b66f6:	f8c7 e000 	str.w	lr, [r7]
   b66fa:	f50d 7c1d 	add.w	ip, sp, #628	; 0x274
   b66fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6702:	9b04      	ldr	r3, [sp, #16]
   b6704:	f8d8 9000 	ldr.w	r9, [r8]
   b6708:	f8c3 9000 	str.w	r9, [r3]
        BleUuid cUuid(charUuid);
   b670c:	46da      	mov	sl, fp
   b670e:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
      : _M_ptr(0), _M_refcount()
   b6712:	f8df 8204 	ldr.w	r8, [pc, #516]	; b6918 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1398>
   b6716:	f50d 7c24 	add.w	ip, sp, #656	; 0x290
   b671a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b671e:	f8c6 e000 	str.w	lr, [r6]
        BleUuid sUuid(svcUuid);
   b6722:	ae9d      	add	r6, sp, #628	; 0x274
      constexpr __shared_count() noexcept : _M_pi(0)
   b6724:	e9c8 4400 	strd	r4, r4, [r8]
   b6728:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b672a:	f50d 7c30 	add.w	ip, sp, #704	; 0x2c0
   b672e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b6732:	4b65      	ldr	r3, [pc, #404]	; (b68c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1348>)
        BleUuid sUuid(svcUuid);
   b6734:	f8c5 9000 	str.w	r9, [r5]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b6738:	9301      	str	r3, [sp, #4]
   b673a:	abb0      	add	r3, sp, #704	; 0x2c0
   b673c:	4963      	ldr	r1, [pc, #396]	; (b68cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x134c>)
   b673e:	9402      	str	r4, [sp, #8]
   b6740:	9300      	str	r3, [sp, #0]
   b6742:	f04f 0204 	mov.w	r2, #4
   b6746:	aba4      	add	r3, sp, #656	; 0x290
   b6748:	4640      	mov	r0, r8
   b674a:	f003 fe83 	bl	ba454 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
Adafruit_VL6180X vl = Adafruit_VL6180X();
   b674e:	4860      	ldr	r0, [pc, #384]	; (b68d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1350>)
   b6750:	f002 f86b 	bl	b882a <_ZN16Adafruit_VL6180XC1Ev>
MQTT client("lab.thewcl.com", 1883, callback);
   b6754:	4b5f      	ldr	r3, [pc, #380]	; (b68d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1354>)
   b6756:	9400      	str	r4, [sp, #0]
   b6758:	f240 725b 	movw	r2, #1883	; 0x75b
   b675c:	495e      	ldr	r1, [pc, #376]	; (b68d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1358>)
   b675e:	485f      	ldr	r0, [pc, #380]	; (b68dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x135c>)
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b6760:	4c5f      	ldr	r4, [pc, #380]	; (b68e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1360>)
   b6762:	f002 f9f9 	bl	b8b58 <_ZN4MQTTC1EPKctPFvPcPhjEb>
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
   b6766:	495f      	ldr	r1, [pc, #380]	; (b68e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1364>)
   b6768:	485f      	ldr	r0, [pc, #380]	; (b68e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1368>)
   b676a:	f004 fb9a 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
   b676e:	485f      	ldr	r0, [pc, #380]	; (b68ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x136c>)
   b6770:	f004 f9a4 	bl	baabc <_ZN9IPAddressC1Ev>
   b6774:	495b      	ldr	r1, [pc, #364]	; (b68e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1364>)
   b6776:	485e      	ldr	r0, [pc, #376]	; (b68f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1370>)
   b6778:	f004 fb93 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
   b677c:	4959      	ldr	r1, [pc, #356]	; (b68e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1364>)
   b677e:	485d      	ldr	r0, [pc, #372]	; (b68f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1374>)
   b6780:	f004 fb8f 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   b6784:	4957      	ldr	r1, [pc, #348]	; (b68e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1364>)
   b6786:	485c      	ldr	r0, [pc, #368]	; (b68f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1378>)
   b6788:	f004 fb8b 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
HttpClient http;
   b678c:	485b      	ldr	r0, [pc, #364]	; (b68fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x137c>)
   b678e:	f001 fa3d 	bl	b7c0c <_ZN10HttpClientC1Ev>
   b6792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6796:	9300      	str	r3, [sp, #0]
   b6798:	f242 7210 	movw	r2, #10000	; 0x2710
   b679c:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b67a0:	4b57      	ldr	r3, [pc, #348]	; (b6900 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1380>)
   b67a2:	4620      	mov	r0, r4
   b67a4:	f001 fc0a 	bl	b7fbc <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b67a8:	4b56      	ldr	r3, [pc, #344]	; (b6904 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1384>)
String SSID = "";
   b67aa:	494e      	ldr	r1, [pc, #312]	; (b68e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1364>)
   b67ac:	6023      	str	r3, [r4, #0]
   b67ae:	4856      	ldr	r0, [pc, #344]	; (b6908 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1388>)
   b67b0:	f004 fb77 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
String password = "";
   b67b4:	494b      	ldr	r1, [pc, #300]	; (b68e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1364>)
   b67b6:	4855      	ldr	r0, [pc, #340]	; (b690c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x138c>)
   b67b8:	f50d 7d41 	add.w	sp, sp, #772	; 0x304
   b67bc:	ecbd 8b0e 	vpop	{d8-d14}
   b67c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
String password = "";
   b67c4:	f004 bb6d 	b.w	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
   b67c8:	4850      	ldr	r0, [pc, #320]	; (b690c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x138c>)
   b67ca:	f004 fb1f 	bl	bae0c <_ZN6StringD1Ev>
String SSID = "";
   b67ce:	484e      	ldr	r0, [pc, #312]	; (b6908 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1388>)
   b67d0:	f004 fb1c 	bl	bae0c <_ZN6StringD1Ev>
JsonParserStatic<10000, 1000> parser;
   b67d4:	4842      	ldr	r0, [pc, #264]	; (b68e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1360>)
   b67d6:	f7fd fc71 	bl	b40bc <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b67da:	4b48      	ldr	r3, [pc, #288]	; (b68fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x137c>)
   b67dc:	4a4c      	ldr	r2, [pc, #304]	; (b6910 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1390>)
	if (_M_pi != nullptr)
   b67de:	699c      	ldr	r4, [r3, #24]
   b67e0:	601a      	str	r2, [r3, #0]
   b67e2:	b17c      	cbz	r4, b6804 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1284>
      if (--_M_use_count == 0)
   b67e4:	6863      	ldr	r3, [r4, #4]
   b67e6:	3b01      	subs	r3, #1
   b67e8:	6063      	str	r3, [r4, #4]
   b67ea:	b95b      	cbnz	r3, b6804 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1284>
          _M_dispose();
   b67ec:	6823      	ldr	r3, [r4, #0]
   b67ee:	4620      	mov	r0, r4
   b67f0:	689b      	ldr	r3, [r3, #8]
   b67f2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b67f4:	68a3      	ldr	r3, [r4, #8]
   b67f6:	3b01      	subs	r3, #1
   b67f8:	60a3      	str	r3, [r4, #8]
   b67fa:	b91b      	cbnz	r3, b6804 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1284>
            _M_destroy();
   b67fc:	6823      	ldr	r3, [r4, #0]
   b67fe:	4620      	mov	r0, r4
   b6800:	68db      	ldr	r3, [r3, #12]
   b6802:	4798      	blx	r3
   b6804:	483c      	ldr	r0, [pc, #240]	; (b68f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1378>)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b6806:	4c43      	ldr	r4, [pc, #268]	; (b6914 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1394>)
   b6808:	f004 fb00 	bl	bae0c <_ZN6StringD1Ev>
} http_request_t;
   b680c:	4839      	ldr	r0, [pc, #228]	; (b68f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1374>)
   b680e:	f004 fafd 	bl	bae0c <_ZN6StringD1Ev>
   b6812:	4837      	ldr	r0, [pc, #220]	; (b68f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1370>)
   b6814:	f004 fafa 	bl	bae0c <_ZN6StringD1Ev>
   b6818:	4833      	ldr	r0, [pc, #204]	; (b68e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1368>)
   b681a:	f004 faf7 	bl	bae0c <_ZN6StringD1Ev>
MQTT client("lab.thewcl.com", 1883, callback);
   b681e:	482f      	ldr	r0, [pc, #188]	; (b68dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x135c>)
   b6820:	f002 fb94 	bl	b8f4c <_ZN4MQTTD1Ev>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   b6824:	483c      	ldr	r0, [pc, #240]	; (b6918 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1398>)
   b6826:	f003 fafc 	bl	b9e22 <_ZN8particle17BleCharacteristicD1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   b682a:	483c      	ldr	r0, [pc, #240]	; (b691c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x139c>)
   b682c:	f003 faf9 	bl	b9e22 <_ZN8particle17BleCharacteristicD1Ev>
      }
   b6830:	483b      	ldr	r0, [pc, #236]	; (b6920 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13a0>)
   b6832:	f7fd fff3 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b6836:	483b      	ldr	r0, [pc, #236]	; (b6924 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13a4>)
   b6838:	f7fd fff0 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
std::vector<Railway> ctaRailways, mbtaRailways;
   b683c:	483a      	ldr	r0, [pc, #232]	; (b6928 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13a8>)
   b683e:	f7fe fcea 	bl	b5216 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b6842:	483a      	ldr	r0, [pc, #232]	; (b692c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13ac>)
   b6844:	f7fe fce7 	bl	b5216 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
	__destroy(__first, __last);
   b6848:	e9d4 0100 	ldrd	r0, r1, [r4]
   b684c:	f7fe fcf1 	bl	b5232 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
   b6850:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b6852:	b118      	cbz	r0, b685c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x12dc>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b6854:	68a1      	ldr	r1, [r4, #8]
   b6856:	1a09      	subs	r1, r1, r0
   b6858:	f7fd fc25 	bl	b40a6 <_ZdlPvj>
Railway greenLine2MBTA = Railway{
   b685c:	4834      	ldr	r0, [pc, #208]	; (b6930 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13b0>)
   b685e:	f7fe fcaf 	bl	b51c0 <_ZN7RailwayD1Ev>
Railway greenLine1MBTA = Railway{
   b6862:	4834      	ldr	r0, [pc, #208]	; (b6934 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13b4>)
   b6864:	f7fe fcac 	bl	b51c0 <_ZN7RailwayD1Ev>
Railway orangeLineMBTA = Railway{
   b6868:	4833      	ldr	r0, [pc, #204]	; (b6938 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13b8>)
   b686a:	f7fe fca9 	bl	b51c0 <_ZN7RailwayD1Ev>
Railway blueLineMBTA = Railway{
   b686e:	4833      	ldr	r0, [pc, #204]	; (b693c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13bc>)
   b6870:	f7fe fca6 	bl	b51c0 <_ZN7RailwayD1Ev>
Railway redLineMBTA = Railway{
   b6874:	4832      	ldr	r0, [pc, #200]	; (b6940 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13c0>)
   b6876:	f7fe fca3 	bl	b51c0 <_ZN7RailwayD1Ev>
Railway pinkLineCTA = Railway(
   b687a:	4832      	ldr	r0, [pc, #200]	; (b6944 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13c4>)
   b687c:	f7fe fca0 	bl	b51c0 <_ZN7RailwayD1Ev>
Railway purpleLineCTA = Railway(
   b6880:	4831      	ldr	r0, [pc, #196]	; (b6948 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13c8>)
   b6882:	f7fe fc9d 	bl	b51c0 <_ZN7RailwayD1Ev>
Railway orangeLineCTA = Railway(
   b6886:	4831      	ldr	r0, [pc, #196]	; (b694c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13cc>)
   b6888:	f7fe fc9a 	bl	b51c0 <_ZN7RailwayD1Ev>
Railway greenLineCTA = Railway(
   b688c:	4830      	ldr	r0, [pc, #192]	; (b6950 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13d0>)
   b688e:	f7fe fc97 	bl	b51c0 <_ZN7RailwayD1Ev>
Railway brownLineCTA = Railway(
   b6892:	4830      	ldr	r0, [pc, #192]	; (b6954 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13d4>)
   b6894:	f7fe fc94 	bl	b51c0 <_ZN7RailwayD1Ev>
Railway blueLineCTA = Railway(
   b6898:	482f      	ldr	r0, [pc, #188]	; (b6958 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13d8>)
   b689a:	f7fe fc91 	bl	b51c0 <_ZN7RailwayD1Ev>
Railway redLineCTA = Railway(
   b689e:	482f      	ldr	r0, [pc, #188]	; (b695c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13dc>)
   b68a0:	f7fe fc8e 	bl	b51c0 <_ZN7RailwayD1Ev>
        if (wakeupSource_) {
   b68a4:	6828      	ldr	r0, [r5, #0]
   b68a6:	b138      	cbz	r0, b68b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1338>
   b68a8:	f50d 7d41 	add.w	sp, sp, #772	; 0x304
   b68ac:	ecbd 8b0e 	vpop	{d8-d14}
   b68b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            free(wakeupSource_);
   b68b4:	f002 be10 	b.w	b94d8 <free>
   b68b8:	f50d 7d41 	add.w	sp, sp, #772	; 0x304
   b68bc:	ecbd 8b0e 	vpop	{d8-d14}
   b68c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b68c4:	000bf014 	.word	0x000bf014
   b68c8:	000b4a05 	.word	0x000b4a05
   b68cc:	000bf017 	.word	0x000bf017
   b68d0:	2003e6b0 	.word	0x2003e6b0
   b68d4:	000b47d9 	.word	0x000b47d9
   b68d8:	000bf01a 	.word	0x000bf01a
   b68dc:	200353f8 	.word	0x200353f8
   b68e0:	20037eb0 	.word	0x20037eb0
   b68e4:	000bf29a 	.word	0x000bf29a
   b68e8:	2003e62c 	.word	0x2003e62c
   b68ec:	2003e63c 	.word	0x2003e63c
   b68f0:	2003e654 	.word	0x2003e654
   b68f4:	2003e668 	.word	0x2003e668
   b68f8:	2003e67c 	.word	0x2003e67c
   b68fc:	200355b0 	.word	0x200355b0
   b6900:	2003a5ec 	.word	0x2003a5ec
   b6904:	000bf0f0 	.word	0x000bf0f0
   b6908:	20035238 	.word	0x20035238
   b690c:	2003e46c 	.word	0x2003e46c
   b6910:	000bf5b4 	.word	0x000bf5b4
   b6914:	200353e8 	.word	0x200353e8
   b6918:	2003e68c 	.word	0x2003e68c
   b691c:	2003e6a4 	.word	0x2003e6a4
   b6920:	2003e694 	.word	0x2003e694
   b6924:	20035290 	.word	0x20035290
   b6928:	20037dcc 	.word	0x20037dcc
   b692c:	20035458 	.word	0x20035458
   b6930:	200354d0 	.word	0x200354d0
   b6934:	20035464 	.word	0x20035464
   b6938:	20037e44 	.word	0x20037e44
   b693c:	2003530c 	.word	0x2003530c
   b6940:	2003e5c0 	.word	0x2003e5c0
   b6944:	2003e47c 	.word	0x2003e47c
   b6948:	2003e4e8 	.word	0x2003e4e8
   b694c:	20037dd8 	.word	0x20037dd8
   b6950:	2003553c 	.word	0x2003553c
   b6954:	20035378 	.word	0x20035378
   b6958:	200352a0 	.word	0x200352a0
   b695c:	2003e554 	.word	0x2003e554
   b6960:	20035268 	.word	0x20035268

000b6964 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b6964:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b6966:	b510      	push	{r4, lr}
   b6968:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b696a:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b696e:	d005      	beq.n	b697c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b6970:	4601      	mov	r1, r0
   b6972:	4622      	mov	r2, r4
   b6974:	4618      	mov	r0, r3
   b6976:	f006 f91f 	bl	bcbb8 <memmove>
   b697a:	4603      	mov	r3, r0
	}
   b697c:	1918      	adds	r0, r3, r4
   b697e:	bd10      	pop	{r4, pc}

000b6980 <_ZN7RailwayC1ERKS_>:
class Railway{
   b6980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6984:	460d      	mov	r5, r1
   b6986:	4604      	mov	r4, r0
   b6988:	f7fe f806 	bl	b4998 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b698c:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6990:	2600      	movs	r6, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6992:	1ac9      	subs	r1, r1, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6994:	e9c4 6603 	strd	r6, r6, [r4, #12]
   b6998:	6166      	str	r6, [r4, #20]
      { _M_create_storage(__n); }
   b699a:	1089      	asrs	r1, r1, #2
   b699c:	f104 000c 	add.w	r0, r4, #12
   b69a0:	f7fe fbee 	bl	b5180 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
			      _Category>::__copy_m(__first, __last, __result);
   b69a4:	68e2      	ldr	r2, [r4, #12]
   b69a6:	e9d5 0103 	ldrd	r0, r1, [r5, #12]
   b69aa:	f7ff ffdb 	bl	b6964 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b69ae:	f105 0118 	add.w	r1, r5, #24
	this->_M_impl._M_finish =
   b69b2:	6120      	str	r0, [r4, #16]
   b69b4:	f104 0018 	add.w	r0, r4, #24
   b69b8:	f7fe fc58 	bl	b526c <_ZNSt6vectorIiSaIiEEC1ERKS1_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b69bc:	e9d5 3709 	ldrd	r3, r7, [r5, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b69c0:	4826      	ldr	r0, [pc, #152]	; (b6a5c <_ZN7RailwayC1ERKS_+0xdc>)
	: _M_start(), _M_finish(), _M_end_of_storage()
   b69c2:	62e6      	str	r6, [r4, #44]	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b69c4:	1aff      	subs	r7, r7, r3
   b69c6:	10bb      	asrs	r3, r7, #2
	: _M_start(), _M_finish(), _M_end_of_storage()
   b69c8:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b69cc:	4358      	muls	r0, r3
   b69ce:	f7fd fb8b 	bl	b40e8 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b69d2:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b69d6:	4407      	add	r7, r0
   b69d8:	62e7      	str	r7, [r4, #44]	; 0x2c
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b69da:	e9d5 7809 	ldrd	r7, r8, [r5, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b69de:	4606      	mov	r6, r0
   b69e0:	45b8      	cmp	r8, r7
   b69e2:	d007      	beq.n	b69f4 <_ZN7RailwayC1ERKS_+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b69e4:	b11e      	cbz	r6, b69ee <_ZN7RailwayC1ERKS_+0x6e>
   b69e6:	4639      	mov	r1, r7
   b69e8:	4630      	mov	r0, r6
   b69ea:	f7fe fc3f 	bl	b526c <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b69ee:	360c      	adds	r6, #12
   b69f0:	370c      	adds	r7, #12
   b69f2:	e7f5      	b.n	b69e0 <_ZN7RailwayC1ERKS_+0x60>
	this->_M_impl._M_finish =
   b69f4:	62a6      	str	r6, [r4, #40]	; 0x28
   b69f6:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b69fa:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b69fe:	f7fd fbeb 	bl	b41d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6a02:	e9d5 3712 	ldrd	r3, r7, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b6a06:	4815      	ldr	r0, [pc, #84]	; (b6a5c <_ZN7RailwayC1ERKS_+0xdc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6a08:	1aff      	subs	r7, r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6a0a:	2300      	movs	r3, #0
   b6a0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   b6a10:	6523      	str	r3, [r4, #80]	; 0x50
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6a12:	10fb      	asrs	r3, r7, #3
	this->_M_impl._M_start = this->_M_allocate(__n);
   b6a14:	4358      	muls	r0, r3
   b6a16:	f7fd fbb3 	bl	b4180 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b6a1a:	e9c4 0012 	strd	r0, r0, [r4, #72]	; 0x48
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b6a1e:	4407      	add	r7, r0
   b6a20:	6527      	str	r7, [r4, #80]	; 0x50
   b6a22:	e9d5 7812 	ldrd	r7, r8, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b6a26:	4606      	mov	r6, r0
   b6a28:	45b8      	cmp	r8, r7
   b6a2a:	d007      	beq.n	b6a3c <_ZN7RailwayC1ERKS_+0xbc>
   b6a2c:	b11e      	cbz	r6, b6a36 <_ZN7RailwayC1ERKS_+0xb6>
   b6a2e:	4639      	mov	r1, r7
   b6a30:	4630      	mov	r0, r6
   b6a32:	f7fd fbd1 	bl	b41d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b6a36:	3618      	adds	r6, #24
   b6a38:	3718      	adds	r7, #24
   b6a3a:	e7f5      	b.n	b6a28 <_ZN7RailwayC1ERKS_+0xa8>
	this->_M_impl._M_finish =
   b6a3c:	64e6      	str	r6, [r4, #76]	; 0x4c
   b6a3e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b6a40:	6563      	str	r3, [r4, #84]	; 0x54
   b6a42:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b6a44:	65a3      	str	r3, [r4, #88]	; 0x58
   b6a46:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b6a48:	65e3      	str	r3, [r4, #92]	; 0x5c
   b6a4a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b6a4c:	6623      	str	r3, [r4, #96]	; 0x60
   b6a4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   b6a50:	6663      	str	r3, [r4, #100]	; 0x64
   b6a52:	6eab      	ldr	r3, [r5, #104]	; 0x68
   b6a54:	66a3      	str	r3, [r4, #104]	; 0x68
   b6a56:	4620      	mov	r0, r4
   b6a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6a5c:	aaaaaaab 	.word	0xaaaaaaab

000b6a60 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   b6a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6a62:	e9d1 3700 	ldrd	r3, r7, [r1]
   b6a66:	1aff      	subs	r7, r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6a68:	2300      	movs	r3, #0
   b6a6a:	e9c0 3300 	strd	r3, r3, [r0]
      vector(const vector& __x)
   b6a6e:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6a70:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b6a72:	480d      	ldr	r0, [pc, #52]	; (b6aa8 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x48>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6a74:	10bb      	asrs	r3, r7, #2
	this->_M_impl._M_start = this->_M_allocate(__n);
   b6a76:	4358      	muls	r0, r3
      vector(const vector& __x)
   b6a78:	460e      	mov	r6, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b6a7a:	f7fd fb6f 	bl	b415c <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b6a7e:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b6a82:	4407      	add	r7, r0
   b6a84:	60a7      	str	r7, [r4, #8]
   b6a86:	e9d6 6700 	ldrd	r6, r7, [r6]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b6a8a:	4605      	mov	r5, r0
   b6a8c:	42b7      	cmp	r7, r6
   b6a8e:	d007      	beq.n	b6aa0 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x40>
   b6a90:	b11d      	cbz	r5, b6a9a <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x3a>
   b6a92:	4631      	mov	r1, r6
   b6a94:	4628      	mov	r0, r5
   b6a96:	f7ff ff73 	bl	b6980 <_ZN7RailwayC1ERKS_>
   b6a9a:	356c      	adds	r5, #108	; 0x6c
   b6a9c:	366c      	adds	r6, #108	; 0x6c
   b6a9e:	e7f5      	b.n	b6a8c <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x2c>
	this->_M_impl._M_finish =
   b6aa0:	6065      	str	r5, [r4, #4]
      }
   b6aa2:	4620      	mov	r0, r4
   b6aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6aa6:	bf00      	nop
   b6aa8:	684bda13 	.word	0x684bda13

000b6aac <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   b6aac:	b570      	push	{r4, r5, r6, lr}
   b6aae:	4605      	mov	r5, r0
   b6ab0:	460e      	mov	r6, r1
   b6ab2:	4614      	mov	r4, r2
	      for (; __first != __last; ++__first, (void)++__cur)
   b6ab4:	42b5      	cmp	r5, r6
   b6ab6:	d00f      	beq.n	b6ad8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_+0x2c>
   b6ab8:	b15c      	cbz	r4, b6ad2 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_+0x26>
   b6aba:	4629      	mov	r1, r5
   b6abc:	4620      	mov	r0, r4
   b6abe:	f7ff ffcf 	bl	b6a60 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>
   b6ac2:	f105 010c 	add.w	r1, r5, #12
   b6ac6:	f104 000c 	add.w	r0, r4, #12
   b6aca:	f7fd fb85 	bl	b41d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b6ace:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b6ad0:	6263      	str	r3, [r4, #36]	; 0x24
   b6ad2:	3528      	adds	r5, #40	; 0x28
   b6ad4:	3428      	adds	r4, #40	; 0x28
   b6ad6:	e7ed      	b.n	b6ab4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_+0x8>
	}
   b6ad8:	4620      	mov	r0, r4
   b6ada:	bd70      	pop	{r4, r5, r6, pc}

000b6adc <_ZN7RailwayaSERKS_.isra.0>:
   b6adc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6ae0:	4604      	mov	r4, r0
   b6ae2:	460d      	mov	r5, r1
   b6ae4:	f7fd fbb4 	bl	b4250 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
   b6ae8:	f105 020c 	add.w	r2, r5, #12
   b6aec:	f104 030c 	add.w	r3, r4, #12
      if (&__x != this)
   b6af0:	429a      	cmp	r2, r3
   b6af2:	d025      	beq.n	b6b40 <_ZN7RailwayaSERKS_.isra.0+0x64>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6af4:	e9d5 8103 	ldrd	r8, r1, [r5, #12]
			 - this->_M_impl._M_start); }
   b6af8:	68e2      	ldr	r2, [r4, #12]
   b6afa:	6963      	ldr	r3, [r4, #20]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6afc:	eba1 0608 	sub.w	r6, r1, r8
			 - this->_M_impl._M_start); }
   b6b00:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b6b02:	429e      	cmp	r6, r3
   b6b04:	d94a      	bls.n	b6b9c <_ZN7RailwayaSERKS_.isra.0+0xc0>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b6b06:	2e00      	cmp	r6, #0
   b6b08:	d046      	beq.n	b6b98 <_ZN7RailwayaSERKS_.isra.0+0xbc>
	if (__n > this->_M_max_size())
   b6b0a:	4b5d      	ldr	r3, [pc, #372]	; (b6c80 <_ZN7RailwayaSERKS_.isra.0+0x1a4>)
   b6b0c:	429e      	cmp	r6, r3
   b6b0e:	d901      	bls.n	b6b14 <_ZN7RailwayaSERKS_.isra.0+0x38>
	  std::__throw_bad_alloc();
   b6b10:	f005 f85c 	bl	bbbcc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6b14:	4630      	mov	r0, r6
   b6b16:	9101      	str	r1, [sp, #4]
   b6b18:	f7fd fabd 	bl	b4096 <_Znwj>
   b6b1c:	9901      	ldr	r1, [sp, #4]
   b6b1e:	4607      	mov	r7, r0
   b6b20:	463a      	mov	r2, r7
   b6b22:	4640      	mov	r0, r8
   b6b24:	f7ff ff1e 	bl	b6964 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b6b28:	68e0      	ldr	r0, [r4, #12]
	if (__p)
   b6b2a:	b118      	cbz	r0, b6b34 <_ZN7RailwayaSERKS_.isra.0+0x58>
			    - this->_M_impl._M_start);
   b6b2c:	6961      	ldr	r1, [r4, #20]
	::operator delete(__p
   b6b2e:	1a09      	subs	r1, r1, r0
   b6b30:	f7fd fab9 	bl	b40a6 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b6b34:	60e7      	str	r7, [r4, #12]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b6b36:	4437      	add	r7, r6
   b6b38:	6167      	str	r7, [r4, #20]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b6b3a:	68e3      	ldr	r3, [r4, #12]
   b6b3c:	4433      	add	r3, r6
   b6b3e:	6123      	str	r3, [r4, #16]
   b6b40:	f105 0118 	add.w	r1, r5, #24
   b6b44:	f104 0018 	add.w	r0, r4, #24
   b6b48:	f7fe fbd4 	bl	b52f4 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
   b6b4c:	f105 0324 	add.w	r3, r5, #36	; 0x24
   b6b50:	f104 0224 	add.w	r2, r4, #36	; 0x24
      if (&__x != this)
   b6b54:	4293      	cmp	r3, r2
   b6b56:	d045      	beq.n	b6be4 <_ZN7RailwayaSERKS_.isra.0+0x108>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6b58:	e9d5 6a09 	ldrd	r6, sl, [r5, #36]	; 0x24
			 - this->_M_impl._M_start); }
   b6b5c:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
   b6b60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6b62:	ebaa 0806 	sub.w	r8, sl, r6
			 - this->_M_impl._M_start); }
   b6b66:	eba3 0309 	sub.w	r3, r3, r9
	  if (__xlen > capacity())
   b6b6a:	4543      	cmp	r3, r8
   b6b6c:	d255      	bcs.n	b6c1a <_ZN7RailwayaSERKS_.isra.0+0x13e>
	  pointer __result = this->_M_allocate(__n);
   b6b6e:	4845      	ldr	r0, [pc, #276]	; (b6c84 <_ZN7RailwayaSERKS_.isra.0+0x1a8>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6b70:	ea4f 03a8 	mov.w	r3, r8, asr #2
	  pointer __result = this->_M_allocate(__n);
   b6b74:	4358      	muls	r0, r3
   b6b76:	f7fd fab7 	bl	b40e8 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
   b6b7a:	4607      	mov	r7, r0
	  _ForwardIterator __cur = __result;
   b6b7c:	4681      	mov	r9, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b6b7e:	45b2      	cmp	sl, r6
   b6b80:	d020      	beq.n	b6bc4 <_ZN7RailwayaSERKS_.isra.0+0xe8>
   b6b82:	f1b9 0f00 	cmp.w	r9, #0
   b6b86:	d003      	beq.n	b6b90 <_ZN7RailwayaSERKS_.isra.0+0xb4>
   b6b88:	4631      	mov	r1, r6
   b6b8a:	4648      	mov	r0, r9
   b6b8c:	f7fe fb6e 	bl	b526c <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b6b90:	f109 090c 	add.w	r9, r9, #12
   b6b94:	360c      	adds	r6, #12
   b6b96:	e7f2      	b.n	b6b7e <_ZN7RailwayaSERKS_.isra.0+0xa2>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b6b98:	4637      	mov	r7, r6
   b6b9a:	e7c1      	b.n	b6b20 <_ZN7RailwayaSERKS_.isra.0+0x44>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6b9c:	6923      	ldr	r3, [r4, #16]
   b6b9e:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b6ba0:	429e      	cmp	r6, r3
   b6ba2:	d803      	bhi.n	b6bac <_ZN7RailwayaSERKS_.isra.0+0xd0>
   b6ba4:	4640      	mov	r0, r8
   b6ba6:	f7ff fedd 	bl	b6964 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
    { return std::uninitialized_copy(__first, __last, __result); }
   b6baa:	e7c6      	b.n	b6b3a <_ZN7RailwayaSERKS_.isra.0+0x5e>
   b6bac:	eb08 0103 	add.w	r1, r8, r3
   b6bb0:	4640      	mov	r0, r8
   b6bb2:	f7ff fed7 	bl	b6964 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b6bb6:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
   b6bba:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
   b6bbe:	1a10      	subs	r0, r2, r0
   b6bc0:	4418      	add	r0, r3
   b6bc2:	e7f0      	b.n	b6ba6 <_ZN7RailwayaSERKS_.isra.0+0xca>
	__destroy(__first, __last);
   b6bc4:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b6bc8:	f7fe faef 	bl	b51aa <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	      _M_deallocate(this->_M_impl._M_start,
   b6bcc:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b6bce:	b118      	cbz	r0, b6bd8 <_ZN7RailwayaSERKS_.isra.0+0xfc>
			    - this->_M_impl._M_start);
   b6bd0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b6bd2:	1a09      	subs	r1, r1, r0
   b6bd4:	f7fd fa67 	bl	b40a6 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b6bd8:	6267      	str	r7, [r4, #36]	; 0x24
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b6bda:	4447      	add	r7, r8
   b6bdc:	62e7      	str	r7, [r4, #44]	; 0x2c
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b6bde:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b6be0:	4443      	add	r3, r8
   b6be2:	62a3      	str	r3, [r4, #40]	; 0x28
	this->_M_assign(__str);
   b6be4:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b6be8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b6bec:	f005 f844 	bl	bbc78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
   b6bf0:	f105 0148 	add.w	r1, r5, #72	; 0x48
   b6bf4:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b6bf8:	f7fd fb7c 	bl	b42f4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
   b6bfc:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b6bfe:	6563      	str	r3, [r4, #84]	; 0x54
   b6c00:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b6c02:	65a3      	str	r3, [r4, #88]	; 0x58
   b6c04:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b6c06:	65e3      	str	r3, [r4, #92]	; 0x5c
   b6c08:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b6c0a:	6623      	str	r3, [r4, #96]	; 0x60
   b6c0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   b6c0e:	6663      	str	r3, [r4, #100]	; 0x64
   b6c10:	6eab      	ldr	r3, [r5, #104]	; 0x68
   b6c12:	66a3      	str	r3, [r4, #104]	; 0x68
   b6c14:	b002      	add	sp, #8
   b6c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6c1a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   b6c1c:	eba7 0709 	sub.w	r7, r7, r9
	  else if (size() >= __xlen)
   b6c20:	45b8      	cmp	r8, r7
   b6c22:	d80d      	bhi.n	b6c40 <_ZN7RailwayaSERKS_.isra.0+0x164>
   b6c24:	4630      	mov	r0, r6
   b6c26:	464a      	mov	r2, r9
   b6c28:	4651      	mov	r1, sl
   b6c2a:	f7fe fb9b 	bl	b5364 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      : _M_current(__i) { }
   b6c2e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b6c30:	4606      	mov	r6, r0
	  for (; __first != __last; ++__first)
   b6c32:	42b7      	cmp	r7, r6
   b6c34:	d0d3      	beq.n	b6bde <_ZN7RailwayaSERKS_.isra.0+0x102>
      }
   b6c36:	4630      	mov	r0, r6
   b6c38:	f7fd fdf0 	bl	b481c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   b6c3c:	360c      	adds	r6, #12
	return *this;
   b6c3e:	e7f8      	b.n	b6c32 <_ZN7RailwayaSERKS_.isra.0+0x156>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6c40:	4b10      	ldr	r3, [pc, #64]	; (b6c84 <_ZN7RailwayaSERKS_.isra.0+0x1a8>)
   b6c42:	10bf      	asrs	r7, r7, #2
   b6c44:	435f      	muls	r7, r3
   b6c46:	2f00      	cmp	r7, #0
   b6c48:	dd08      	ble.n	b6c5c <_ZN7RailwayaSERKS_.isra.0+0x180>
	      *__result = *__first;
   b6c4a:	4631      	mov	r1, r6
   b6c4c:	4648      	mov	r0, r9
   b6c4e:	f7fe fb51 	bl	b52f4 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	      ++__first;
   b6c52:	360c      	adds	r6, #12
	      ++__result;
   b6c54:	f109 090c 	add.w	r9, r9, #12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6c58:	3f01      	subs	r7, #1
   b6c5a:	e7f4      	b.n	b6c46 <_ZN7RailwayaSERKS_.isra.0+0x16a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6c5c:	e9d4 6709 	ldrd	r6, r7, [r4, #36]	; 0x24
   b6c60:	1bb9      	subs	r1, r7, r6
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b6c62:	6a6e      	ldr	r6, [r5, #36]	; 0x24
					  __x._M_impl._M_finish,
   b6c64:	f8d5 9028 	ldr.w	r9, [r5, #40]	; 0x28
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b6c68:	440e      	add	r6, r1
	      for (; __first != __last; ++__first, (void)++__cur)
   b6c6a:	45b1      	cmp	r9, r6
   b6c6c:	d0b7      	beq.n	b6bde <_ZN7RailwayaSERKS_.isra.0+0x102>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6c6e:	b11f      	cbz	r7, b6c78 <_ZN7RailwayaSERKS_.isra.0+0x19c>
   b6c70:	4631      	mov	r1, r6
   b6c72:	4638      	mov	r0, r7
   b6c74:	f7fe fafa 	bl	b526c <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b6c78:	360c      	adds	r6, #12
   b6c7a:	370c      	adds	r7, #12
   b6c7c:	e7f5      	b.n	b6c6a <_ZN7RailwayaSERKS_.isra.0+0x18e>
   b6c7e:	bf00      	nop
   b6c80:	7ffffffc 	.word	0x7ffffffc
   b6c84:	aaaaaaab 	.word	0xaaaaaaab

000b6c88 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b6c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6c8c:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b6c8e:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6c90:	480b      	ldr	r0, [pc, #44]	; (b6cc0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x38>)
   b6c92:	10a4      	asrs	r4, r4, #2
   b6c94:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b6c96:	4616      	mov	r6, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6c98:	4627      	mov	r7, r4
   b6c9a:	4690      	mov	r8, r2
   b6c9c:	2f00      	cmp	r7, #0
   b6c9e:	dd08      	ble.n	b6cb2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x2a>
	      *__result = *__first;
   b6ca0:	4629      	mov	r1, r5
   b6ca2:	4640      	mov	r0, r8
   b6ca4:	f7ff ff1a 	bl	b6adc <_ZN7RailwayaSERKS_.isra.0>
	      ++__first;
   b6ca8:	356c      	adds	r5, #108	; 0x6c
	      ++__result;
   b6caa:	f108 086c 	add.w	r8, r8, #108	; 0x6c
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6cae:	3f01      	subs	r7, #1
   b6cb0:	e7f4      	b.n	b6c9c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x14>
	  return __result;
   b6cb2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b6cb6:	206c      	movs	r0, #108	; 0x6c
   b6cb8:	fb00 6004 	mla	r0, r0, r4, r6
   b6cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6cc0:	684bda13 	.word	0x684bda13

000b6cc4 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>:
      if (&__x != this)
   b6cc4:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b6cc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6cca:	4604      	mov	r4, r0
   b6ccc:	460f      	mov	r7, r1
      if (&__x != this)
   b6cce:	d02c      	beq.n	b6d2a <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x66>
   b6cd0:	e9d1 5a00 	ldrd	r5, sl, [r1]
			 - this->_M_impl._M_start); }
   b6cd4:	f8d0 9000 	ldr.w	r9, [r0]
   b6cd8:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6cda:	ebaa 0805 	sub.w	r8, sl, r5
			 - this->_M_impl._M_start); }
   b6cde:	eba3 0309 	sub.w	r3, r3, r9
	  if (__xlen > capacity())
   b6ce2:	4543      	cmp	r3, r8
   b6ce4:	d223      	bcs.n	b6d2e <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x6a>
	  pointer __result = this->_M_allocate(__n);
   b6ce6:	482a      	ldr	r0, [pc, #168]	; (b6d90 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xcc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6ce8:	ea4f 03a8 	mov.w	r3, r8, asr #2
	  pointer __result = this->_M_allocate(__n);
   b6cec:	4358      	muls	r0, r3
   b6cee:	f7fd fa35 	bl	b415c <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>
   b6cf2:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   b6cf4:	4607      	mov	r7, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b6cf6:	45aa      	cmp	sl, r5
   b6cf8:	d007      	beq.n	b6d0a <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x46>
   b6cfa:	b11f      	cbz	r7, b6d04 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x40>
   b6cfc:	4629      	mov	r1, r5
   b6cfe:	4638      	mov	r0, r7
   b6d00:	f7ff fe3e 	bl	b6980 <_ZN7RailwayC1ERKS_>
   b6d04:	376c      	adds	r7, #108	; 0x6c
   b6d06:	356c      	adds	r5, #108	; 0x6c
   b6d08:	e7f5      	b.n	b6cf6 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x32>
	__destroy(__first, __last);
   b6d0a:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6d0e:	f7fe fa77 	bl	b5200 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	      _M_deallocate(this->_M_impl._M_start,
   b6d12:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b6d14:	b118      	cbz	r0, b6d1e <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x5a>
			    - this->_M_impl._M_start);
   b6d16:	68a1      	ldr	r1, [r4, #8]
   b6d18:	1a09      	subs	r1, r1, r0
   b6d1a:	f7fd f9c4 	bl	b40a6 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b6d1e:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b6d20:	4446      	add	r6, r8
   b6d22:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b6d24:	6823      	ldr	r3, [r4, #0]
   b6d26:	4443      	add	r3, r8
   b6d28:	6063      	str	r3, [r4, #4]
    }
   b6d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6d2e:	6846      	ldr	r6, [r0, #4]
   b6d30:	eba6 0609 	sub.w	r6, r6, r9
	  else if (size() >= __xlen)
   b6d34:	45b0      	cmp	r8, r6
   b6d36:	d80d      	bhi.n	b6d54 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x90>
			      _Category>::__copy_m(__first, __last, __result);
   b6d38:	4628      	mov	r0, r5
   b6d3a:	464a      	mov	r2, r9
   b6d3c:	4651      	mov	r1, sl
   b6d3e:	f7ff ffa3 	bl	b6c88 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
      : _M_current(__i) { }
   b6d42:	6866      	ldr	r6, [r4, #4]
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b6d44:	4605      	mov	r5, r0
	  for (; __first != __last; ++__first)
   b6d46:	42ae      	cmp	r6, r5
   b6d48:	d0ec      	beq.n	b6d24 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x60>
      __pointer->~_Tp();
   b6d4a:	4628      	mov	r0, r5
   b6d4c:	f7fe fa38 	bl	b51c0 <_ZN7RailwayD1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   b6d50:	356c      	adds	r5, #108	; 0x6c
	return *this;
   b6d52:	e7f8      	b.n	b6d46 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x82>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6d54:	4b0e      	ldr	r3, [pc, #56]	; (b6d90 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xcc>)
   b6d56:	10b6      	asrs	r6, r6, #2
   b6d58:	435e      	muls	r6, r3
   b6d5a:	2e00      	cmp	r6, #0
   b6d5c:	dd08      	ble.n	b6d70 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xac>
	      *__result = *__first;
   b6d5e:	4629      	mov	r1, r5
   b6d60:	4648      	mov	r0, r9
   b6d62:	f7ff febb 	bl	b6adc <_ZN7RailwayaSERKS_.isra.0>
	      ++__first;
   b6d66:	356c      	adds	r5, #108	; 0x6c
	      ++__result;
   b6d68:	f109 096c 	add.w	r9, r9, #108	; 0x6c
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6d6c:	3e01      	subs	r6, #1
   b6d6e:	e7f4      	b.n	b6d5a <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x96>
   b6d70:	e9d4 5600 	ldrd	r5, r6, [r4]
   b6d74:	1b71      	subs	r1, r6, r5
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b6d76:	683d      	ldr	r5, [r7, #0]
					  __x._M_impl._M_finish,
   b6d78:	687f      	ldr	r7, [r7, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b6d7a:	440d      	add	r5, r1
   b6d7c:	42af      	cmp	r7, r5
   b6d7e:	d0d1      	beq.n	b6d24 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x60>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6d80:	b11e      	cbz	r6, b6d8a <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xc6>
   b6d82:	4629      	mov	r1, r5
   b6d84:	4630      	mov	r0, r6
   b6d86:	f7ff fdfb 	bl	b6980 <_ZN7RailwayC1ERKS_>
   b6d8a:	356c      	adds	r5, #108	; 0x6c
   b6d8c:	366c      	adds	r6, #108	; 0x6c
   b6d8e:	e7f5      	b.n	b6d7c <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xb8>
   b6d90:	684bda13 	.word	0x684bda13

000b6d94 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b6d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6d98:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b6d9a:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6d9c:	4810      	ldr	r0, [pc, #64]	; (b6de0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_+0x4c>)
   b6d9e:	10e4      	asrs	r4, r4, #3
   b6da0:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b6da2:	4617      	mov	r7, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6da4:	46a0      	mov	r8, r4
   b6da6:	4616      	mov	r6, r2
   b6da8:	f1b8 0f00 	cmp.w	r8, #0
   b6dac:	dd10      	ble.n	b6dd0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_+0x3c>
   b6dae:	4629      	mov	r1, r5
   b6db0:	4630      	mov	r0, r6
   b6db2:	f7ff ff87 	bl	b6cc4 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>
   b6db6:	f105 010c 	add.w	r1, r5, #12
   b6dba:	f106 000c 	add.w	r0, r6, #12
   b6dbe:	f004 ff5b 	bl	bbc78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
   b6dc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b6dc4:	6273      	str	r3, [r6, #36]	; 0x24
	      ++__first;
   b6dc6:	3528      	adds	r5, #40	; 0x28
	      ++__result;
   b6dc8:	3628      	adds	r6, #40	; 0x28
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6dca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b6dce:	e7eb      	b.n	b6da8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_+0x14>
	  return __result;
   b6dd0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b6dd4:	2028      	movs	r0, #40	; 0x28
   b6dd6:	fb00 7004 	mla	r0, r0, r4, r7
   b6dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6dde:	bf00      	nop
   b6de0:	cccccccd 	.word	0xcccccccd

000b6de4 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0>:
      vector<_Tp, _Alloc>::
   b6de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      return __last - __first;
   b6de8:	eba2 0801 	sub.w	r8, r2, r1
			 - this->_M_impl._M_start); }
   b6dec:	6883      	ldr	r3, [r0, #8]
   b6dee:	4617      	mov	r7, r2
   b6df0:	6802      	ldr	r2, [r0, #0]
   b6df2:	1a9b      	subs	r3, r3, r2
	if (__len > capacity())
   b6df4:	4598      	cmp	r8, r3
      vector<_Tp, _Alloc>::
   b6df6:	4604      	mov	r4, r0
   b6df8:	460e      	mov	r6, r1
	if (__len > capacity())
   b6dfa:	d92a      	bls.n	b6e52 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x6e>
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b6dfc:	4b26      	ldr	r3, [pc, #152]	; (b6e98 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xb4>)
   b6dfe:	4598      	cmp	r8, r3
   b6e00:	d902      	bls.n	b6e08 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x24>
	  __throw_length_error(
   b6e02:	4826      	ldr	r0, [pc, #152]	; (b6e9c <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xb8>)
   b6e04:	f004 fee8 	bl	bbbd8 <_ZSt20__throw_length_errorPKc>
	  pointer __result = this->_M_allocate(__n);
   b6e08:	4825      	ldr	r0, [pc, #148]	; (b6ea0 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xbc>)
   b6e0a:	ea4f 03a8 	mov.w	r3, r8, asr #2
   b6e0e:	4358      	muls	r0, r3
   b6e10:	f7fd f9a4 	bl	b415c <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>
   b6e14:	4605      	mov	r5, r0
	  _ForwardIterator __cur = __result;
   b6e16:	4681      	mov	r9, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b6e18:	42b7      	cmp	r7, r6
   b6e1a:	d00a      	beq.n	b6e32 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x4e>
   b6e1c:	f1b9 0f00 	cmp.w	r9, #0
   b6e20:	d003      	beq.n	b6e2a <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x46>
   b6e22:	4631      	mov	r1, r6
   b6e24:	4648      	mov	r0, r9
   b6e26:	f7ff fdab 	bl	b6980 <_ZN7RailwayC1ERKS_>
   b6e2a:	366c      	adds	r6, #108	; 0x6c
   b6e2c:	f109 096c 	add.w	r9, r9, #108	; 0x6c
   b6e30:	e7f2      	b.n	b6e18 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x34>
	__destroy(__first, __last);
   b6e32:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6e36:	f7fe f9e3 	bl	b5200 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	    _M_deallocate(this->_M_impl._M_start,
   b6e3a:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b6e3c:	b118      	cbz	r0, b6e46 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x62>
			  - this->_M_impl._M_start);
   b6e3e:	68a1      	ldr	r1, [r4, #8]
   b6e40:	1a09      	subs	r1, r1, r0
   b6e42:	f7fd f930 	bl	b40a6 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
   b6e46:	6025      	str	r5, [r4, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b6e48:	4445      	add	r5, r8
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b6e4a:	e9c4 5501 	strd	r5, r5, [r4, #4]
	      std::__uninitialized_copy_a(__mid, __last,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
	  }
      }
   b6e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6e52:	6845      	ldr	r5, [r0, #4]
   b6e54:	1aad      	subs	r5, r5, r2
	else if (size() >= __len)
   b6e56:	45a8      	cmp	r8, r5
   b6e58:	d80b      	bhi.n	b6e72 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x8e>
			      _Category>::__copy_m(__first, __last, __result);
   b6e5a:	4639      	mov	r1, r7
   b6e5c:	4630      	mov	r0, r6
   b6e5e:	f7ff ff13 	bl	b6c88 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b6e62:	6861      	ldr	r1, [r4, #4]
   b6e64:	4288      	cmp	r0, r1
   b6e66:	4605      	mov	r5, r0
   b6e68:	d0f1      	beq.n	b6e4e <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x6a>
   b6e6a:	f7fe f9c9 	bl	b5200 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	    this->_M_impl._M_finish = __pos;
   b6e6e:	6065      	str	r5, [r4, #4]
   b6e70:	e7ed      	b.n	b6e4e <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x6a>
	__i += __n;
   b6e72:	440d      	add	r5, r1
   b6e74:	4630      	mov	r0, r6
   b6e76:	4629      	mov	r1, r5
   b6e78:	f7ff ff06 	bl	b6c88 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6e7c:	6866      	ldr	r6, [r4, #4]
   b6e7e:	42af      	cmp	r7, r5
   b6e80:	d007      	beq.n	b6e92 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xae>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6e82:	b11e      	cbz	r6, b6e8c <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xa8>
   b6e84:	4629      	mov	r1, r5
   b6e86:	4630      	mov	r0, r6
   b6e88:	f7ff fd7a 	bl	b6980 <_ZN7RailwayC1ERKS_>
   b6e8c:	356c      	adds	r5, #108	; 0x6c
   b6e8e:	366c      	adds	r6, #108	; 0x6c
   b6e90:	e7f5      	b.n	b6e7e <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x9a>
	    this->_M_impl._M_finish =
   b6e92:	6066      	str	r6, [r4, #4]
      }
   b6e94:	e7db      	b.n	b6e4e <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x6a>
   b6e96:	bf00      	nop
   b6e98:	7fffffa4 	.word	0x7fffffa4
   b6e9c:	000beddf 	.word	0x000beddf
   b6ea0:	684bda13 	.word	0x684bda13

000b6ea4 <setup>:
void setup(){
   b6ea4:	b570      	push	{r4, r5, r6, lr}
   b6ea6:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
  Serial.begin(9600);
   b6eaa:	f004 fcdb 	bl	bb864 <_Z16_fetch_usbserialv>
   b6eae:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6eb2:	f004 fccb 	bl	bb84c <_ZN9USBSerial5beginEl>
  delay(500);
   b6eb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b6eba:	f002 fb55 	bl	b9568 <delay>
  BLE.on();
   b6ebe:	f002 febf 	bl	b9c40 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6ec2:	f002 ff07 	bl	b9cd4 <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   b6ec6:	f002 febb 	bl	b9c40 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6eca:	4a98      	ldr	r2, [pc, #608]	; (b712c <setup+0x288>)
   b6ecc:	4d98      	ldr	r5, [pc, #608]	; (b7130 <setup+0x28c>)
   b6ece:	4601      	mov	r1, r0
   b6ed0:	a817      	add	r0, sp, #92	; 0x5c
   b6ed2:	f003 fbe9 	bl	ba6a8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b6ed6:	a817      	add	r0, sp, #92	; 0x5c
   b6ed8:	f002 ffa3 	bl	b9e22 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   b6edc:	f002 feb0 	bl	b9c40 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6ee0:	4a94      	ldr	r2, [pc, #592]	; (b7134 <setup+0x290>)
   b6ee2:	4601      	mov	r1, r0
   b6ee4:	a817      	add	r0, sp, #92	; 0x5c
   b6ee6:	f003 fbdf 	bl	ba6a8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b6eea:	a817      	add	r0, sp, #92	; 0x5c
   b6eec:	f002 ff99 	bl	b9e22 <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData data;
   b6ef0:	a802      	add	r0, sp, #8
   b6ef2:	f003 f8cc 	bl	ba08e <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   b6ef6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6ef8:	ac11      	add	r4, sp, #68	; 0x44
   b6efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6efc:	682e      	ldr	r6, [r5, #0]
   b6efe:	6026      	str	r6, [r4, #0]
        BleUuid tempUUID(uuid);
   b6f00:	ad11      	add	r5, sp, #68	; 0x44
   b6f02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6f04:	ac17      	add	r4, sp, #92	; 0x5c
   b6f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b6f08:	a817      	add	r0, sp, #92	; 0x5c
        BleUuid tempUUID(uuid);
   b6f0a:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b6f0c:	f002 fc9a 	bl	b9844 <_ZNK8particle7BleUuid4typeEv>
   b6f10:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b6f12:	a817      	add	r0, sp, #92	; 0x5c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b6f14:	2c00      	cmp	r4, #0
   b6f16:	f040 80e4 	bne.w	b70e2 <setup+0x23e>
            uint16_t uuid16 = tempUUID.shorted();
   b6f1a:	f002 fcaf 	bl	b987c <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b6f1e:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b6f20:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b6f24:	2302      	movs	r3, #2
   b6f26:	aa0b      	add	r2, sp, #44	; 0x2c
   b6f28:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b6f2a:	a802      	add	r0, sp, #8
   b6f2c:	f003 f8a4 	bl	ba078 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   b6f30:	f002 fe86 	bl	b9c40 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6f34:	2200      	movs	r2, #0
   b6f36:	a902      	add	r1, sp, #8
   b6f38:	f002 ff16 	bl	b9d68 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  acquireWireBuffer();
   b6f3c:	a817      	add	r0, sp, #92	; 0x5c
   b6f3e:	f7fd fbf9 	bl	b4734 <_Z17acquireWireBufferv>
  Wire.setClock(400000);
   b6f42:	f004 fddd 	bl	bbb00 <_Z19__fetch_global_Wirev>
	  setSpeed(speed);
   b6f46:	497c      	ldr	r1, [pc, #496]	; (b7138 <setup+0x294>)
  request.hostname = "trek.thewcl.com";
   b6f48:	4c7c      	ldr	r4, [pc, #496]	; (b713c <setup+0x298>)
   b6f4a:	f003 fd39 	bl	ba9c0 <_ZN7TwoWire8setSpeedEm>
  Wire.begin();
   b6f4e:	f004 fdd7 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b6f52:	f003 fd39 	bl	ba9c8 <_ZN7TwoWire5beginEv>
  vl.begin();
   b6f56:	2100      	movs	r1, #0
   b6f58:	4879      	ldr	r0, [pc, #484]	; (b7140 <setup+0x29c>)
   b6f5a:	f001 fd7a 	bl	b8a52 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
  request.hostname = "trek.thewcl.com";
   b6f5e:	4979      	ldr	r1, [pc, #484]	; (b7144 <setup+0x2a0>)
   b6f60:	4620      	mov	r0, r4
   b6f62:	f003 ffe6 	bl	baf32 <_ZN6StringaSEPKc>
  request.port = 80;
   b6f66:	2350      	movs	r3, #80	; 0x50
   b6f68:	63a3      	str	r3, [r4, #56]	; 0x38

    //loopIndex must point to either the first or last checkpoint, tripleIndex cannot be 0
    void setLoopIndex(int triple, int loop){
        tripleIndex = triple;
   b6f6a:	4c77      	ldr	r4, [pc, #476]	; (b7148 <setup+0x2a4>)
   b6f6c:	4977      	ldr	r1, [pc, #476]	; (b714c <setup+0x2a8>)
        loopIndex = loop;
   b6f6e:	2207      	movs	r2, #7
   b6f70:	2003      	movs	r0, #3
   b6f72:	e9c4 0215 	strd	r0, r2, [r4, #84]	; 0x54
        tripleIndex = triple;
   b6f76:	4c76      	ldr	r4, [pc, #472]	; (b7150 <setup+0x2ac>)
        loopIndex = loop;
   b6f78:	2502      	movs	r5, #2
   b6f7a:	2306      	movs	r3, #6
   b6f7c:	e9c1 5315 	strd	r5, r3, [r1, #84]	; 0x54
   b6f80:	e9c4 5315 	strd	r5, r3, [r4, #84]	; 0x54
        tripleIndex = triple;
   b6f84:	4b73      	ldr	r3, [pc, #460]	; (b7154 <setup+0x2b0>)
        loopIndex = loop;
   b6f86:	e9c3 0215 	strd	r0, r2, [r3, #84]	; 0x54
  ctaRailways = {brownLineCTA, purpleLineCTA, greenLineCTA};
   b6f8a:	a817      	add	r0, sp, #92	; 0x5c
   b6f8c:	f7ff fcf8 	bl	b6980 <_ZN7RailwayC1ERKS_>
   b6f90:	4621      	mov	r1, r4
   b6f92:	a832      	add	r0, sp, #200	; 0xc8
   b6f94:	f7ff fcf4 	bl	b6980 <_ZN7RailwayC1ERKS_>
   b6f98:	496f      	ldr	r1, [pc, #444]	; (b7158 <setup+0x2b4>)
   b6f9a:	a84d      	add	r0, sp, #308	; 0x134
   b6f9c:	f7ff fcf0 	bl	b6980 <_ZN7RailwayC1ERKS_>
	this->_M_assign_aux(__l.begin(), __l.end(),
   b6fa0:	aa68      	add	r2, sp, #416	; 0x1a0
   b6fa2:	a917      	add	r1, sp, #92	; 0x5c
   b6fa4:	486d      	ldr	r0, [pc, #436]	; (b715c <setup+0x2b8>)
   b6fa6:	f7ff ff1d 	bl	b6de4 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0>
   b6faa:	a84d      	add	r0, sp, #308	; 0x134
   b6fac:	f7fe f908 	bl	b51c0 <_ZN7RailwayD1Ev>
   b6fb0:	a832      	add	r0, sp, #200	; 0xc8
   b6fb2:	f7fe f905 	bl	b51c0 <_ZN7RailwayD1Ev>
   b6fb6:	a817      	add	r0, sp, #92	; 0x5c
   b6fb8:	f7fe f902 	bl	b51c0 <_ZN7RailwayD1Ev>
  mbtaRailways = {redLineMBTA, greenLine1MBTA, greenLine2MBTA, blueLineMBTA, orangeLineMBTA};
   b6fbc:	4968      	ldr	r1, [pc, #416]	; (b7160 <setup+0x2bc>)
   b6fbe:	a817      	add	r0, sp, #92	; 0x5c
   b6fc0:	f7ff fcde 	bl	b6980 <_ZN7RailwayC1ERKS_>
   b6fc4:	4967      	ldr	r1, [pc, #412]	; (b7164 <setup+0x2c0>)
   b6fc6:	a832      	add	r0, sp, #200	; 0xc8
   b6fc8:	f7ff fcda 	bl	b6980 <_ZN7RailwayC1ERKS_>
   b6fcc:	4966      	ldr	r1, [pc, #408]	; (b7168 <setup+0x2c4>)
   b6fce:	a84d      	add	r0, sp, #308	; 0x134
   b6fd0:	f7ff fcd6 	bl	b6980 <_ZN7RailwayC1ERKS_>
   b6fd4:	4965      	ldr	r1, [pc, #404]	; (b716c <setup+0x2c8>)
   b6fd6:	a868      	add	r0, sp, #416	; 0x1a0
   b6fd8:	f7ff fcd2 	bl	b6980 <_ZN7RailwayC1ERKS_>
   b6fdc:	4964      	ldr	r1, [pc, #400]	; (b7170 <setup+0x2cc>)
   b6fde:	a883      	add	r0, sp, #524	; 0x20c
   b6fe0:	f7ff fcce 	bl	b6980 <_ZN7RailwayC1ERKS_>
   b6fe4:	4863      	ldr	r0, [pc, #396]	; (b7174 <setup+0x2d0>)
   b6fe6:	aa9e      	add	r2, sp, #632	; 0x278
   b6fe8:	a917      	add	r1, sp, #92	; 0x5c
   b6fea:	f7ff fefb 	bl	b6de4 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0>
   b6fee:	2404      	movs	r4, #4
   b6ff0:	256c      	movs	r5, #108	; 0x6c
   b6ff2:	ab17      	add	r3, sp, #92	; 0x5c
   b6ff4:	fb05 3004 	mla	r0, r5, r4, r3
   b6ff8:	f7fe f8e2 	bl	b51c0 <_ZN7RailwayD1Ev>
   b6ffc:	3c01      	subs	r4, #1
   b6ffe:	d2f8      	bcs.n	b6ff2 <setup+0x14e>
  cities = {City(ctaRailways, "cta", 3), City(mbtaRailways, "mbta", 5)};
   b7000:	4956      	ldr	r1, [pc, #344]	; (b715c <setup+0x2b8>)
   b7002:	a805      	add	r0, sp, #20
   b7004:	f7ff fd2c 	bl	b6a60 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>
   b7008:	495b      	ldr	r1, [pc, #364]	; (b7178 <setup+0x2d4>)
   b700a:	a80b      	add	r0, sp, #44	; 0x2c
   b700c:	f7fd f87e 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b7010:	2400      	movs	r4, #0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b7012:	ab1c      	add	r3, sp, #112	; 0x70
        std::vector<Railway> railways;
        std::string name;
        int slaveCountExpected;

        City(std::vector<Railway> railwaysInput, std::string nameInput, int slaveCountExpectedInput){
            railways = railwaysInput;
   b7014:	a905      	add	r1, sp, #20
   b7016:	a817      	add	r0, sp, #92	; 0x5c
      { _M_string_length = __length; }
   b7018:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
   b701c:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
   b7020:	9419      	str	r4, [sp, #100]	; 0x64
   b7022:	f88d 4070 	strb.w	r4, [sp, #112]	; 0x70
   b7026:	f7ff fe4d 	bl	b6cc4 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>
	this->_M_assign(__str);
   b702a:	a90b      	add	r1, sp, #44	; 0x2c
   b702c:	a81a      	add	r0, sp, #104	; 0x68
   b702e:	f004 fe23 	bl	bbc78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
            name = nameInput;
            slaveCountExpected = slaveCountExpectedInput;
   b7032:	2303      	movs	r3, #3
   b7034:	494f      	ldr	r1, [pc, #316]	; (b7174 <setup+0x2d0>)
   b7036:	9320      	str	r3, [sp, #128]	; 0x80
   b7038:	a808      	add	r0, sp, #32
   b703a:	f7ff fd11 	bl	b6a60 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>
   b703e:	494f      	ldr	r1, [pc, #316]	; (b717c <setup+0x2d8>)
   b7040:	a811      	add	r0, sp, #68	; 0x44
   b7042:	f7fd f863 	bl	b410c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b7046:	ab26      	add	r3, sp, #152	; 0x98
            railways = railwaysInput;
   b7048:	a908      	add	r1, sp, #32
   b704a:	a821      	add	r0, sp, #132	; 0x84
      { _M_string_length = __length; }
   b704c:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
   b7050:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
   b7054:	9423      	str	r4, [sp, #140]	; 0x8c
   b7056:	f88d 4098 	strb.w	r4, [sp, #152]	; 0x98
   b705a:	f7ff fe33 	bl	b6cc4 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>
			 - this->_M_impl._M_start); }
   b705e:	4c48      	ldr	r4, [pc, #288]	; (b7180 <setup+0x2dc>)
	this->_M_assign(__str);
   b7060:	a911      	add	r1, sp, #68	; 0x44
   b7062:	a824      	add	r0, sp, #144	; 0x90
   b7064:	f004 fe08 	bl	bbc78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
            slaveCountExpected = slaveCountExpectedInput;
   b7068:	2305      	movs	r3, #5
   b706a:	6822      	ldr	r2, [r4, #0]
   b706c:	932a      	str	r3, [sp, #168]	; 0xa8
   b706e:	68a3      	ldr	r3, [r4, #8]
   b7070:	1a9b      	subs	r3, r3, r2
	if (__len > capacity())
   b7072:	2b4f      	cmp	r3, #79	; 0x4f
   b7074:	d83d      	bhi.n	b70f2 <setup+0x24e>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7076:	2050      	movs	r0, #80	; 0x50
   b7078:	f7fd f80d 	bl	b4096 <_Znwj>
	__uninit_copy(__first, __last, __result);
   b707c:	a92b      	add	r1, sp, #172	; 0xac
   b707e:	4602      	mov	r2, r0
   b7080:	4605      	mov	r5, r0
   b7082:	a817      	add	r0, sp, #92	; 0x5c
   b7084:	f7ff fd12 	bl	b6aac <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_>
	__destroy(__first, __last);
   b7088:	e9d4 0100 	ldrd	r0, r1, [r4]
   b708c:	f7fe f8d1 	bl	b5232 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>
	    _M_deallocate(this->_M_impl._M_start,
   b7090:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b7092:	b118      	cbz	r0, b709c <setup+0x1f8>
			  - this->_M_impl._M_start);
   b7094:	68a1      	ldr	r1, [r4, #8]
	::operator delete(__p
   b7096:	1a09      	subs	r1, r1, r0
   b7098:	f7fd f805 	bl	b40a6 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
   b709c:	4b38      	ldr	r3, [pc, #224]	; (b7180 <setup+0x2dc>)
   b709e:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b70a0:	3550      	adds	r5, #80	; 0x50
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b70a2:	e9c3 5501 	strd	r5, r5, [r3, #4]
      { _M_dispose(); }
   b70a6:	a824      	add	r0, sp, #144	; 0x90
   b70a8:	f004 fdc8 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
class City{
   b70ac:	a821      	add	r0, sp, #132	; 0x84
   b70ae:	f7fe f8b2 	bl	b5216 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b70b2:	a81a      	add	r0, sp, #104	; 0x68
   b70b4:	f004 fdc2 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b70b8:	a817      	add	r0, sp, #92	; 0x5c
   b70ba:	f7fe f8ac 	bl	b5216 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b70be:	a811      	add	r0, sp, #68	; 0x44
   b70c0:	f004 fdbc 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b70c4:	a808      	add	r0, sp, #32
   b70c6:	f7fe f8a6 	bl	b5216 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b70ca:	a80b      	add	r0, sp, #44	; 0x2c
   b70cc:	f004 fdb6 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b70d0:	a805      	add	r0, sp, #20
   b70d2:	f7fe f8a0 	bl	b5216 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b70d6:	9802      	ldr	r0, [sp, #8]
   b70d8:	f002 f9fe 	bl	b94d8 <free>
}
   b70dc:	f50d 7d1e 	add.w	sp, sp, #632	; 0x278
   b70e0:	bd70      	pop	{r4, r5, r6, pc}
   b70e2:	f002 fbcd 	bl	b9880 <_ZNK8particle7BleUuid8rawBytesEv>
   b70e6:	2300      	movs	r3, #0
   b70e8:	9300      	str	r3, [sp, #0]
   b70ea:	4602      	mov	r2, r0
   b70ec:	2310      	movs	r3, #16
   b70ee:	2107      	movs	r1, #7
   b70f0:	e71b      	b.n	b6f2a <setup+0x86>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b70f2:	6865      	ldr	r5, [r4, #4]
   b70f4:	1aad      	subs	r5, r5, r2
	else if (size() >= __len)
   b70f6:	2d4f      	cmp	r5, #79	; 0x4f
   b70f8:	d90b      	bls.n	b7112 <setup+0x26e>
   b70fa:	a92b      	add	r1, sp, #172	; 0xac
   b70fc:	a817      	add	r0, sp, #92	; 0x5c
   b70fe:	f7ff fe49 	bl	b6d94 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b7102:	6861      	ldr	r1, [r4, #4]
   b7104:	4288      	cmp	r0, r1
   b7106:	4605      	mov	r5, r0
   b7108:	d0cd      	beq.n	b70a6 <setup+0x202>
   b710a:	f7fe f892 	bl	b5232 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>
	    this->_M_impl._M_finish = __pos;
   b710e:	6065      	str	r5, [r4, #4]
   b7110:	e7c9      	b.n	b70a6 <setup+0x202>
   b7112:	ab17      	add	r3, sp, #92	; 0x5c
   b7114:	441d      	add	r5, r3
   b7116:	4629      	mov	r1, r5
   b7118:	4618      	mov	r0, r3
   b711a:	f7ff fe3b 	bl	b6d94 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_>
   b711e:	6862      	ldr	r2, [r4, #4]
   b7120:	a92b      	add	r1, sp, #172	; 0xac
   b7122:	4628      	mov	r0, r5
   b7124:	f7ff fcc2 	bl	b6aac <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_>
	    this->_M_impl._M_finish =
   b7128:	6060      	str	r0, [r4, #4]
   b712a:	e7bc      	b.n	b70a6 <setup+0x202>
   b712c:	2003e6a4 	.word	0x2003e6a4
   b7130:	20035254 	.word	0x20035254
   b7134:	2003e68c 	.word	0x2003e68c
   b7138:	00061a80 	.word	0x00061a80
   b713c:	2003e62c 	.word	0x2003e62c
   b7140:	2003e6b0 	.word	0x2003e6b0
   b7144:	000bf029 	.word	0x000bf029
   b7148:	20037dd8 	.word	0x20037dd8
   b714c:	20035378 	.word	0x20035378
   b7150:	2003e4e8 	.word	0x2003e4e8
   b7154:	2003e47c 	.word	0x2003e47c
   b7158:	2003553c 	.word	0x2003553c
   b715c:	20035458 	.word	0x20035458
   b7160:	2003e5c0 	.word	0x2003e5c0
   b7164:	20035464 	.word	0x20035464
   b7168:	200354d0 	.word	0x200354d0
   b716c:	2003530c 	.word	0x2003530c
   b7170:	20037e44 	.word	0x20037e44
   b7174:	20037dcc 	.word	0x20037dcc
   b7178:	000bf039 	.word	0x000bf039
   b717c:	000bf03d 	.word	0x000bf03d
   b7180:	200353e8 	.word	0x200353e8

000b7184 <_GLOBAL__sub_I_SystemMode>:
   b7184:	2001      	movs	r0, #1
   b7186:	f7fe b9fb 	b.w	b5580 <_Z41__static_initialization_and_destruction_0ii.constprop.0>
	...

000b718c <loop>:
void loop(){
   b718c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7190:	ed2d 8b06 	vpush	{d8-d10}
        WLanCredentials creds = credentials.getHalCredentials();
        network_set_credentials(*this, 0, &creds, NULL);
    }

    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
   b7194:	4b5a      	ldr	r3, [pc, #360]	; (b7300 <loop+0x174>)
   b7196:	2200      	movs	r2, #0
   b7198:	b0b7      	sub	sp, #220	; 0xdc
   b719a:	6858      	ldr	r0, [r3, #4]
   b719c:	4611      	mov	r1, r2
   b719e:	f002 f963 	bl	b9468 <network_has_credentials>
  if(WiFi.hasCredentials() && userInput){
   b71a2:	2800      	cmp	r0, #0
   b71a4:	f000 8525 	beq.w	b7bf2 <loop+0xa66>
   b71a8:	4b56      	ldr	r3, [pc, #344]	; (b7304 <loop+0x178>)
   b71aa:	781b      	ldrb	r3, [r3, #0]
   b71ac:	2b00      	cmp	r3, #0
   b71ae:	f000 8520 	beq.w	b7bf2 <loop+0xa66>
    Serial.println("loop start");
   b71b2:	f004 fb57 	bl	bb864 <_Z16_fetch_usbserialv>
   b71b6:	4954      	ldr	r1, [pc, #336]	; (b7308 <loop+0x17c>)
      Serial.printf("%i, ", i);
   b71b8:	4d54      	ldr	r5, [pc, #336]	; (b730c <loop+0x180>)
    Serial.println("loop start");
   b71ba:	f003 fdc8 	bl	bad4e <_ZN5Print7printlnEPKc>
      : _M_current(__i) { }
   b71be:	4b54      	ldr	r3, [pc, #336]	; (b7310 <loop+0x184>)
   b71c0:	e9d3 4600 	ldrd	r4, r6, [r3]
    for(int i : sequenceArr){
   b71c4:	42a6      	cmp	r6, r4
   b71c6:	d009      	beq.n	b71dc <loop+0x50>
   b71c8:	f854 2b04 	ldr.w	r2, [r4], #4
   b71cc:	9202      	str	r2, [sp, #8]
      Serial.printf("%i, ", i);
   b71ce:	f004 fb49 	bl	bb864 <_Z16_fetch_usbserialv>
   b71d2:	9a02      	ldr	r2, [sp, #8]
   b71d4:	4629      	mov	r1, r5
   b71d6:	f7fd f90d 	bl	b43f4 <_ZN5Print6printfEPKcz>
	return *this;
   b71da:	e7f3      	b.n	b71c4 <loop+0x38>
    Serial.println();
   b71dc:	f004 fb42 	bl	bb864 <_Z16_fetch_usbserialv>
   b71e0:	f003 fda9 	bl	bad36 <_ZN5Print7printlnEv>
    cityIndexBuffer = cityIndex;
   b71e4:	4b4b      	ldr	r3, [pc, #300]	; (b7314 <loop+0x188>)
   b71e6:	f8df a168 	ldr.w	sl, [pc, #360]	; b7350 <loop+0x1c4>
   b71ea:	681b      	ldr	r3, [r3, #0]
   b71ec:	f8ca 3000 	str.w	r3, [sl]
	return *(this->_M_impl._M_start + __n);
   b71f0:	f8df 8160 	ldr.w	r8, [pc, #352]	; b7354 <loop+0x1c8>
    for(int j = 0; j < cities[cityIndexBuffer].railways.size(); j++){
   b71f4:	2300      	movs	r3, #0
   b71f6:	9302      	str	r3, [sp, #8]
   b71f8:	f8da 2000 	ldr.w	r2, [sl]
   b71fc:	f8d8 1000 	ldr.w	r1, [r8]
   b7200:	2328      	movs	r3, #40	; 0x28
   b7202:	435a      	muls	r2, r3
   b7204:	188b      	adds	r3, r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7206:	588a      	ldr	r2, [r1, r2]
   b7208:	685b      	ldr	r3, [r3, #4]
   b720a:	1a9b      	subs	r3, r3, r2
   b720c:	4a42      	ldr	r2, [pc, #264]	; (b7318 <loop+0x18c>)
   b720e:	109b      	asrs	r3, r3, #2
   b7210:	4353      	muls	r3, r2
   b7212:	9a02      	ldr	r2, [sp, #8]
   b7214:	4293      	cmp	r3, r2
   b7216:	f240 8472 	bls.w	b7afe <loop+0x972>
      uint8_t range = vl.readRange();
   b721a:	4840      	ldr	r0, [pc, #256]	; (b731c <loop+0x190>)
   b721c:	f001 fc38 	bl	b8a90 <_ZN16Adafruit_VL6180X9readRangeEv>
      if (range <= 100) {
   b7220:	2864      	cmp	r0, #100	; 0x64
   b7222:	d804      	bhi.n	b722e <loop+0xa2>
        Serial.println("proximity");
   b7224:	f004 fb1e 	bl	bb864 <_Z16_fetch_usbserialv>
   b7228:	493d      	ldr	r1, [pc, #244]	; (b7320 <loop+0x194>)
   b722a:	f003 fd90 	bl	bad4e <_ZN5Print7printlnEPKc>
      delay(1000);
   b722e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b7232:	f002 f999 	bl	b9568 <delay>
      if(cityIndex == -1){
   b7236:	4b37      	ldr	r3, [pc, #220]	; (b7314 <loop+0x188>)
   b7238:	681b      	ldr	r3, [r3, #0]
   b723a:	3301      	adds	r3, #1
   b723c:	f000 84d9 	beq.w	b7bf2 <loop+0xa66>
	StringSumHelper(const char *p) : String(p) {}
   b7240:	4938      	ldr	r1, [pc, #224]	; (b7324 <loop+0x198>)
   b7242:	a817      	add	r0, sp, #92	; 0x5c
   b7244:	f003 fe2d 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
	return *(this->_M_impl._M_start + __n);
   b7248:	f8da 2000 	ldr.w	r2, [sl]
      { return _M_dataplus._M_p; }
   b724c:	f8d8 3000 	ldr.w	r3, [r8]
   b7250:	2528      	movs	r5, #40	; 0x28
   b7252:	fb05 3302 	mla	r3, r5, r2, r3
      request.path = "/loop-tracks/" + String(cities[cityIndexBuffer].name.c_str()) + "?lines=" + String(cities[cityIndexBuffer].railways[j].name.c_str());
   b7256:	a813      	add	r0, sp, #76	; 0x4c
   b7258:	68d9      	ldr	r1, [r3, #12]
   b725a:	f003 fe22 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
   b725e:	a913      	add	r1, sp, #76	; 0x4c
   b7260:	a817      	add	r0, sp, #92	; 0x5c
   b7262:	f003 feb3 	bl	bafcc <_ZplRK15StringSumHelperRK6String>
   b7266:	4930      	ldr	r1, [pc, #192]	; (b7328 <loop+0x19c>)
   b7268:	f003 febc 	bl	bafe4 <_ZplRK15StringSumHelperPKc>
   b726c:	9b02      	ldr	r3, [sp, #8]
   b726e:	f8d8 2000 	ldr.w	r2, [r8]
   b7272:	246c      	movs	r4, #108	; 0x6c
   b7274:	435c      	muls	r4, r3
   b7276:	f8da 3000 	ldr.w	r3, [sl]
   b727a:	436b      	muls	r3, r5
   b727c:	4606      	mov	r6, r0
   b727e:	58d3      	ldr	r3, [r2, r3]
   b7280:	4423      	add	r3, r4
   b7282:	a81b      	add	r0, sp, #108	; 0x6c
   b7284:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b7286:	f003 fe0c 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
   b728a:	a91b      	add	r1, sp, #108	; 0x6c
   b728c:	4630      	mov	r0, r6
   b728e:	f003 fe9d 	bl	bafcc <_ZplRK15StringSumHelperRK6String>
   b7292:	4601      	mov	r1, r0
   b7294:	4825      	ldr	r0, [pc, #148]	; (b732c <loop+0x1a0>)
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   b7296:	4e26      	ldr	r6, [pc, #152]	; (b7330 <loop+0x1a4>)
   b7298:	f003 fe34 	bl	baf04 <_ZN6StringaSERKS_>
   b729c:	a81b      	add	r0, sp, #108	; 0x6c
   b729e:	f003 fdb5 	bl	bae0c <_ZN6StringD1Ev>
   b72a2:	a813      	add	r0, sp, #76	; 0x4c
   b72a4:	f003 fdb2 	bl	bae0c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b72a8:	a817      	add	r0, sp, #92	; 0x5c
   b72aa:	f003 fdaf 	bl	bae0c <_ZN6StringD1Ev>
   b72ae:	4b21      	ldr	r3, [pc, #132]	; (b7334 <loop+0x1a8>)
   b72b0:	4921      	ldr	r1, [pc, #132]	; (b7338 <loop+0x1ac>)
   b72b2:	4822      	ldr	r0, [pc, #136]	; (b733c <loop+0x1b0>)
   b72b4:	9300      	str	r3, [sp, #0]
   b72b6:	4632      	mov	r2, r6
   b72b8:	4b21      	ldr	r3, [pc, #132]	; (b7340 <loop+0x1b4>)
   b72ba:	f000 fcdd 	bl	b7c78 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
      Serial.println("parsing");
   b72be:	f004 fad1 	bl	bb864 <_Z16_fetch_usbserialv>
   b72c2:	4920      	ldr	r1, [pc, #128]	; (b7344 <loop+0x1b8>)
   b72c4:	f003 fd43 	bl	bad4e <_ZN5Print7printlnEPKc>
      parser.clear();
   b72c8:	481f      	ldr	r0, [pc, #124]	; (b7348 <loop+0x1bc>)
   b72ca:	f000 fe6d 	bl	b7fa8 <_ZN10JsonBuffer5clearEv>
	const char * c_str() const { return buffer; }
   b72ce:	6871      	ldr	r1, [r6, #4]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b72d0:	9103      	str	r1, [sp, #12]
   b72d2:	4608      	mov	r0, r1
   b72d4:	f005 fcd2 	bl	bcc7c <strlen>
   b72d8:	9903      	ldr	r1, [sp, #12]
   b72da:	4602      	mov	r2, r0
   b72dc:	481a      	ldr	r0, [pc, #104]	; (b7348 <loop+0x1bc>)
   b72de:	f000 fe46 	bl	b7f6e <_ZN10JsonBuffer7addDataEPKcj>
      if(!parser.parse()){
   b72e2:	4819      	ldr	r0, [pc, #100]	; (b7348 <loop+0x1bc>)
   b72e4:	f001 fa50 	bl	b8788 <_ZN10JsonParser5parseEv>
   b72e8:	9003      	str	r0, [sp, #12]
   b72ea:	bbb8      	cbnz	r0, b735c <loop+0x1d0>
        Serial.println("parsing failed");
   b72ec:	f004 faba 	bl	bb864 <_Z16_fetch_usbserialv>
   b72f0:	4916      	ldr	r1, [pc, #88]	; (b734c <loop+0x1c0>)
}
   b72f2:	b037      	add	sp, #220	; 0xdc
   b72f4:	ecbd 8b06 	vpop	{d8-d10}
   b72f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("parsing failed");
   b72fc:	f003 bd27 	b.w	bad4e <_ZN5Print7printlnEPKc>
   b7300:	2003e718 	.word	0x2003e718
   b7304:	2003e6ac 	.word	0x2003e6ac
   b7308:	000bf042 	.word	0x000bf042
   b730c:	000bf04d 	.word	0x000bf04d
   b7310:	2003e694 	.word	0x2003e694
   b7314:	20035040 	.word	0x20035040
   b7318:	684bda13 	.word	0x684bda13
   b731c:	2003e6b0 	.word	0x2003e6b0
   b7320:	000bf052 	.word	0x000bf052
   b7324:	000bf05c 	.word	0x000bf05c
   b7328:	000bf06a 	.word	0x000bf06a
   b732c:	2003e654 	.word	0x2003e654
   b7330:	2003e678 	.word	0x2003e678
   b7334:	000bf072 	.word	0x000bf072
   b7338:	2003e62c 	.word	0x2003e62c
   b733c:	200355b0 	.word	0x200355b0
   b7340:	20035044 	.word	0x20035044
   b7344:	000bf076 	.word	0x000bf076
   b7348:	20037eb0 	.word	0x20037eb0
   b734c:	000bf07e 	.word	0x000bf07e
   b7350:	200353f4 	.word	0x200353f4
   b7354:	200353e8 	.word	0x200353e8
   b7358:	00000000 	.word	0x00000000
   b735c:	f8da 3000 	ldr.w	r3, [sl]
   b7360:	f8d8 2000 	ldr.w	r2, [r8]
        float lat = train.key("latitude").valueFloat();
   b7364:	ed1f 9a04 	vldr	s18, [pc, #-16]	; b7358 <loop+0x1cc>
   b7368:	436b      	muls	r3, r5
      Railway currentRailway = cities[cityIndexBuffer].railways[j];
   b736a:	a81b      	add	r0, sp, #108	; 0x6c
   b736c:	58d1      	ldr	r1, [r2, r3]
   b736e:	4421      	add	r1, r4
   b7370:	f7ff fb06 	bl	b6980 <_ZN7RailwayC1ERKS_>
      std::vector<Checkpoint> currentCheckpoints = currentRailway.checkpoints;
   b7374:	a91b      	add	r1, sp, #108	; 0x6c
   b7376:	a807      	add	r0, sp, #28
   b7378:	f7fd fb0e 	bl	b4998 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      int count = 0;
   b737c:	f04f 0900 	mov.w	r9, #0
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b7380:	49a2      	ldr	r1, [pc, #648]	; (b760c <loop+0x480>)
   b7382:	a80d      	add	r0, sp, #52	; 0x34
   b7384:	f000 fe2a 	bl	b7fdc <_ZNK10JsonParser12getReferenceEv>
   b7388:	4aa1      	ldr	r2, [pc, #644]	; (b7610 <loop+0x484>)
   b738a:	a90d      	add	r1, sp, #52	; 0x34
   b738c:	a810      	add	r0, sp, #64	; 0x40
   b738e:	f000 fff5 	bl	b837c <_ZNK13JsonReference3keyEPKc>
   b7392:	2200      	movs	r2, #0
   b7394:	a910      	add	r1, sp, #64	; 0x40
   b7396:	a813      	add	r0, sp, #76	; 0x4c
   b7398:	f000 fec4 	bl	b8124 <_ZNK13JsonReference5indexEj>
   b739c:	4a9d      	ldr	r2, [pc, #628]	; (b7614 <loop+0x488>)
   b739e:	a913      	add	r1, sp, #76	; 0x4c
   b73a0:	a817      	add	r0, sp, #92	; 0x5c
   b73a2:	f000 ffeb 	bl	b837c <_ZNK13JsonReference3keyEPKc>
   b73a6:	464a      	mov	r2, r9
   b73a8:	a917      	add	r1, sp, #92	; 0x5c
   b73aa:	a80a      	add	r0, sp, #40	; 0x28
   b73ac:	f000 feba 	bl	b8124 <_ZNK13JsonReference5indexEj>
   b73b0:	a817      	add	r0, sp, #92	; 0x5c
   b73b2:	f000 fd8b 	bl	b7ecc <_ZN13JsonReferenceD1Ev>
   b73b6:	a813      	add	r0, sp, #76	; 0x4c
   b73b8:	f000 fd88 	bl	b7ecc <_ZN13JsonReferenceD1Ev>
   b73bc:	a810      	add	r0, sp, #64	; 0x40
   b73be:	f000 fd85 	bl	b7ecc <_ZN13JsonReferenceD1Ev>
   b73c2:	a80d      	add	r0, sp, #52	; 0x34
   b73c4:	f000 fd82 	bl	b7ecc <_ZN13JsonReferenceD1Ev>
        String nextStation = train.key("next_stop").valueString();
   b73c8:	4a93      	ldr	r2, [pc, #588]	; (b7618 <loop+0x48c>)
   b73ca:	a90a      	add	r1, sp, #40	; 0x28
   b73cc:	a817      	add	r0, sp, #92	; 0x5c
   b73ce:	f000 ffd5 	bl	b837c <_ZNK13JsonReference3keyEPKc>
   b73d2:	a917      	add	r1, sp, #92	; 0x5c
   b73d4:	a813      	add	r0, sp, #76	; 0x4c
   b73d6:	f000 ffeb 	bl	b83b0 <_ZNK13JsonReference11valueStringEv>
   b73da:	a817      	add	r0, sp, #92	; 0x5c
   b73dc:	f000 fd76 	bl	b7ecc <_ZN13JsonReferenceD1Ev>
        String destNm = train.key("destination").valueString();
   b73e0:	4a8e      	ldr	r2, [pc, #568]	; (b761c <loop+0x490>)
   b73e2:	a90a      	add	r1, sp, #40	; 0x28
   b73e4:	a810      	add	r0, sp, #64	; 0x40
   b73e6:	f000 ffc9 	bl	b837c <_ZNK13JsonReference3keyEPKc>
   b73ea:	a910      	add	r1, sp, #64	; 0x40
   b73ec:	a817      	add	r0, sp, #92	; 0x5c
   b73ee:	f000 ffdf 	bl	b83b0 <_ZNK13JsonReference11valueStringEv>
   b73f2:	a810      	add	r0, sp, #64	; 0x40
   b73f4:	f000 fd6a 	bl	b7ecc <_ZN13JsonReferenceD1Ev>
        int trainDir = train.key("direction").valueInt();
   b73f8:	4a89      	ldr	r2, [pc, #548]	; (b7620 <loop+0x494>)
   b73fa:	a90a      	add	r1, sp, #40	; 0x28
   b73fc:	a810      	add	r0, sp, #64	; 0x40
   b73fe:	f000 ffbd 	bl	b837c <_ZNK13JsonReference3keyEPKc>
   b7402:	2100      	movs	r1, #0
   b7404:	a810      	add	r0, sp, #64	; 0x40
   b7406:	f000 fea7 	bl	b8158 <_ZNK13JsonReference8valueIntEi>
   b740a:	4604      	mov	r4, r0
   b740c:	a810      	add	r0, sp, #64	; 0x40
   b740e:	f000 fd5d 	bl	b7ecc <_ZN13JsonReferenceD1Ev>
        float lat = train.key("latitude").valueFloat();
   b7412:	4a84      	ldr	r2, [pc, #528]	; (b7624 <loop+0x498>)
   b7414:	a90a      	add	r1, sp, #40	; 0x28
   b7416:	a810      	add	r0, sp, #64	; 0x40
   b7418:	f000 ffb0 	bl	b837c <_ZNK13JsonReference3keyEPKc>
   b741c:	a810      	add	r0, sp, #64	; 0x40
   b741e:	eeb0 0a49 	vmov.f32	s0, s18
   b7422:	f000 fea5 	bl	b8170 <_ZNK13JsonReference10valueFloatEf>
   b7426:	a810      	add	r0, sp, #64	; 0x40
   b7428:	eef0 8a40 	vmov.f32	s17, s0
   b742c:	f000 fd4e 	bl	b7ecc <_ZN13JsonReferenceD1Ev>
        float lon = train.key("longitude").valueFloat();
   b7430:	4a7d      	ldr	r2, [pc, #500]	; (b7628 <loop+0x49c>)
   b7432:	a90a      	add	r1, sp, #40	; 0x28
   b7434:	a810      	add	r0, sp, #64	; 0x40
   b7436:	f000 ffa1 	bl	b837c <_ZNK13JsonReference3keyEPKc>
   b743a:	a810      	add	r0, sp, #64	; 0x40
   b743c:	eeb0 0a49 	vmov.f32	s0, s18
   b7440:	f000 fe96 	bl	b8170 <_ZNK13JsonReference10valueFloatEf>
   b7444:	a810      	add	r0, sp, #64	; 0x40
   b7446:	eeb0 8a40 	vmov.f32	s16, s0
   b744a:	f000 fd3f 	bl	b7ecc <_ZN13JsonReferenceD1Ev>
        if(nextStation.length() <= 1){
   b744e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b7450:	2b01      	cmp	r3, #1
   b7452:	d87f      	bhi.n	b7554 <loop+0x3c8>
          Serial.println("break");
   b7454:	f004 fa06 	bl	bb864 <_Z16_fetch_usbserialv>
   b7458:	4974      	ldr	r1, [pc, #464]	; (b762c <loop+0x4a0>)
        if(cityIndexBuffer == 0 && (i == 2 || currentRailway.name == purpleLineCTA.name)){
   b745a:	4f75      	ldr	r7, [pc, #468]	; (b7630 <loop+0x4a4>)
          Serial.println("break");
   b745c:	f003 fc77 	bl	bad4e <_ZN5Print7printlnEPKc>
          break;
   b7460:	a817      	add	r0, sp, #92	; 0x5c
   b7462:	f003 fcd3 	bl	bae0c <_ZN6StringD1Ev>
   b7466:	a813      	add	r0, sp, #76	; 0x4c
   b7468:	f003 fcd0 	bl	bae0c <_ZN6StringD1Ev>
   b746c:	a80a      	add	r0, sp, #40	; 0x28
   b746e:	f000 fd2d 	bl	b7ecc <_ZN13JsonReferenceD1Ev>
      for(int i = 0; i < 4; i++){
   b7472:	9b02      	ldr	r3, [sp, #8]
   b7474:	2500      	movs	r5, #0
   b7476:	00de      	lsls	r6, r3, #3
        if(cityIndexBuffer == 0 && (i == 2 || currentRailway.name == purpleLineCTA.name)){
   b7478:	683b      	ldr	r3, [r7, #0]
   b747a:	2b00      	cmp	r3, #0
   b747c:	f040 8286 	bne.w	b798c <loop+0x800>
   b7480:	2d02      	cmp	r5, #2
   b7482:	d006      	beq.n	b7492 <loop+0x306>
   b7484:	496b      	ldr	r1, [pc, #428]	; (b7634 <loop+0x4a8>)
   b7486:	a827      	add	r0, sp, #156	; 0x9c
   b7488:	f7fd faaa 	bl	b49e0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b748c:	2800      	cmp	r0, #0
   b748e:	f000 826d 	beq.w	b796c <loop+0x7e0>
          Wire.beginTransmission(brownLineCTAAdr);
   b7492:	f004 fb35 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b7496:	4b68      	ldr	r3, [pc, #416]	; (b7638 <loop+0x4ac>)
   b7498:	6819      	ldr	r1, [r3, #0]
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b749a:	f003 facb 	bl	baa34 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(String(currentRailway.colors[0].c_str()));
   b749e:	f004 fb2f 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b74a2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   b74a4:	4604      	mov	r4, r0
   b74a6:	6819      	ldr	r1, [r3, #0]
   b74a8:	a817      	add	r0, sp, #92	; 0x5c
   b74aa:	f003 fcfa 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
   b74ae:	9917      	ldr	r1, [sp, #92]	; 0x5c
   b74b0:	4620      	mov	r0, r4
   b74b2:	f7fc febb 	bl	b422c <_ZN5Print5writeEPKc.isra.0>
   b74b6:	a817      	add	r0, sp, #92	; 0x5c
   b74b8:	f003 fca8 	bl	bae0c <_ZN6StringD1Ev>
        Wire.write(String(currentRailway.colors[1].c_str()));
   b74bc:	f004 fb20 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b74c0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   b74c2:	4604      	mov	r4, r0
   b74c4:	6999      	ldr	r1, [r3, #24]
   b74c6:	a817      	add	r0, sp, #92	; 0x5c
   b74c8:	f003 fceb 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
   b74cc:	9917      	ldr	r1, [sp, #92]	; 0x5c
   b74ce:	4620      	mov	r0, r4
   b74d0:	f7fc feac 	bl	b422c <_ZN5Print5writeEPKc.isra.0>
   b74d4:	a817      	add	r0, sp, #92	; 0x5c
   b74d6:	f003 fc99 	bl	bae0c <_ZN6StringD1Ev>
        Wire.endTransmission();
   b74da:	f004 fb11 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b74de:	f003 fab0 	bl	baa42 <_ZN7TwoWire15endTransmissionEv>
        if(cityIndexBuffer == 0 && (i == 2 || currentRailway.name == purpleLineCTA.name)){
   b74e2:	683b      	ldr	r3, [r7, #0]
   b74e4:	2b00      	cmp	r3, #0
   b74e6:	f040 8267 	bne.w	b79b8 <loop+0x82c>
   b74ea:	2d02      	cmp	r5, #2
   b74ec:	d006      	beq.n	b74fc <loop+0x370>
   b74ee:	4951      	ldr	r1, [pc, #324]	; (b7634 <loop+0x4a8>)
   b74f0:	a827      	add	r0, sp, #156	; 0x9c
   b74f2:	f7fd fa75 	bl	b49e0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b74f6:	2800      	cmp	r0, #0
   b74f8:	f000 824e 	beq.w	b7998 <loop+0x80c>
          Wire.beginTransmission(brownLineCTAAdr);
   b74fc:	f004 fb00 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b7500:	4b4d      	ldr	r3, [pc, #308]	; (b7638 <loop+0x4ac>)
   b7502:	6819      	ldr	r1, [r3, #0]
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b7504:	f003 fa96 	bl	baa34 <_ZN7TwoWire17beginTransmissionEi>
        if(cityIndexBuffer == 0){
   b7508:	683c      	ldr	r4, [r7, #0]
   b750a:	2c00      	cmp	r4, #0
   b750c:	f040 831c 	bne.w	b7b48 <loop+0x9bc>
          if(i == 2){
   b7510:	2d02      	cmp	r5, #2
   b7512:	f040 8286 	bne.w	b7a22 <loop+0x896>
            if(currentRailway.name == greenLineCTA.name){
   b7516:	4949      	ldr	r1, [pc, #292]	; (b763c <loop+0x4b0>)
   b7518:	f8df 9124 	ldr.w	r9, [pc, #292]	; b7640 <loop+0x4b4>
   b751c:	a827      	add	r0, sp, #156	; 0x9c
   b751e:	f7fd fa5f 	bl	b49e0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7522:	2800      	cmp	r0, #0
   b7524:	f000 824e 	beq.w	b79c4 <loop+0x838>
   b7528:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b752c:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   b7530:	1a9b      	subs	r3, r3, r2
   b7532:	109a      	asrs	r2, r3, #2
   b7534:	e9d1 1300 	ldrd	r1, r3, [r1]
   b7538:	1a5b      	subs	r3, r3, r1
   b753a:	109b      	asrs	r3, r3, #2
              for(int j = 0; j < brownLineCTA.outputs[0].size() + (brownLineCTA.outputs[2].size() / 2); j++){
   b753c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
   b7540:	42a3      	cmp	r3, r4
   b7542:	f240 8301 	bls.w	b7b48 <loop+0x9bc>
                Wire.write('0');
   b7546:	f004 fadb 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b754a:	2130      	movs	r1, #48	; 0x30
   b754c:	f7fc fe6a 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
              for(int j = 0; j < brownLineCTA.outputs[0].size() + (brownLineCTA.outputs[2].size() / 2); j++){
   b7550:	3401      	adds	r4, #1
   b7552:	e7e9      	b.n	b7528 <loop+0x39c>
   b7554:	e9dd 3507 	ldrd	r3, r5, [sp, #28]
   b7558:	1aed      	subs	r5, r5, r3
   b755a:	10ed      	asrs	r5, r5, #3
        for(int i = 0; i < checkpointCount; i++){
   b755c:	f04f 0b00 	mov.w	fp, #0
   b7560:	45ab      	cmp	fp, r5
	return *(this->_M_impl._M_start + __n);
   b7562:	9907      	ldr	r1, [sp, #28]
   b7564:	da3b      	bge.n	b75de <loop+0x452>
   b7566:	eb01 06cb 	add.w	r6, r1, fp, lsl #3
    }

    float getDistance(float trainLat, float trainLon){
      return sqrt(pow((trainLat - lat), 2) + pow((trainLon - lon), 2));
   b756a:	edd6 7a00 	vldr	s15, [r6]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b756e:	ee78 7ae7 	vsub.f32	s15, s17, s15
   b7572:	ee17 0a90 	vmov	r0, s15
   b7576:	f004 ff61 	bl	bc43c <__aeabi_f2d>
   b757a:	edd6 7a01 	vldr	s15, [r6, #4]
   b757e:	ee78 7a67 	vsub.f32	s15, s16, s15
   b7582:	4602      	mov	r2, r0
   b7584:	460b      	mov	r3, r1
   b7586:	ee17 0a90 	vmov	r0, s15
   b758a:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b758e:	f004 ff55 	bl	bc43c <__aeabi_f2d>
   b7592:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b7596:	ec41 0b1a 	vmov	d10, r0, r1
   b759a:	4610      	mov	r0, r2
   b759c:	4619      	mov	r1, r3
   b759e:	f004 ffa5 	bl	bc4ec <__aeabi_dmul>
   b75a2:	ec53 2b1a 	vmov	r2, r3, d10
   b75a6:	4606      	mov	r6, r0
   b75a8:	460f      	mov	r7, r1
   b75aa:	ee1a 0a10 	vmov	r0, s20
   b75ae:	4619      	mov	r1, r3
   b75b0:	f004 ff9c 	bl	bc4ec <__aeabi_dmul>
   b75b4:	4602      	mov	r2, r0
   b75b6:	460b      	mov	r3, r1
   b75b8:	4630      	mov	r0, r6
   b75ba:	4639      	mov	r1, r7
   b75bc:	f004 fde0 	bl	bc180 <__adddf3>
   b75c0:	ec41 0b10 	vmov	d0, r0, r1
   b75c4:	f004 fcd0 	bl	bbf68 <sqrt>
          currentRailway.distances[i] = currentCheckpoints[i].getDistance(lat, lon);
   b75c8:	9e1e      	ldr	r6, [sp, #120]	; 0x78
   b75ca:	ec51 0b10 	vmov	r0, r1, d0
   b75ce:	f005 fa5d 	bl	bca8c <__aeabi_d2f>
   b75d2:	eb06 068b 	add.w	r6, r6, fp, lsl #2
        for(int i = 0; i < checkpointCount; i++){
   b75d6:	f10b 0b01 	add.w	fp, fp, #1
   b75da:	6030      	str	r0, [r6, #0]
   b75dc:	e7c0      	b.n	b7560 <loop+0x3d4>
      : _M_current(__i) { }
   b75de:	e9dd 671e 	ldrd	r6, r7, [sp, #120]	; 0x78
    _GLIBCXX14_CONSTEXPR
    _ForwardIterator
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
		  _Compare __comp)
    {
      if (__first == __last)
   b75e2:	42be      	cmp	r6, r7
   b75e4:	d030      	beq.n	b7648 <loop+0x4bc>
   b75e6:	1d32      	adds	r2, r6, #4
   b75e8:	4633      	mov	r3, r6
	return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
   b75ea:	4297      	cmp	r7, r2
	++_M_current;
   b75ec:	4610      	mov	r0, r2
   b75ee:	d02c      	beq.n	b764a <loop+0x4be>
	if (__comp(__first, __result))
   b75f0:	edd3 7a00 	vldr	s15, [r3]
   b75f4:	ed90 7a00 	vldr	s14, [r0]
   b75f8:	eeb4 7a67 	vcmp.f32	s14, s15
   b75fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7600:	f102 0204 	add.w	r2, r2, #4
   b7604:	bf48      	it	mi
   b7606:	4603      	movmi	r3, r0
   b7608:	e7ef      	b.n	b75ea <loop+0x45e>
   b760a:	bf00      	nop
   b760c:	20037eb0 	.word	0x20037eb0
   b7610:	000bf08d 	.word	0x000bf08d
   b7614:	000bf093 	.word	0x000bf093
   b7618:	000bf09a 	.word	0x000bf09a
   b761c:	000bf0a4 	.word	0x000bf0a4
   b7620:	000bf0b0 	.word	0x000bf0b0
   b7624:	000bf0ba 	.word	0x000bf0ba
   b7628:	000bf0c3 	.word	0x000bf0c3
   b762c:	000bf0cd 	.word	0x000bf0cd
   b7630:	200353f4 	.word	0x200353f4
   b7634:	2003e518 	.word	0x2003e518
   b7638:	200353e4 	.word	0x200353e4
   b763c:	2003556c 	.word	0x2003556c
   b7640:	20035378 	.word	0x20035378
   b7644:	7dcccccc 	.word	0x7dcccccc
   b7648:	4633      	mov	r3, r6
        if(closestIndex == currentRailway.tripleIndex){
   b764a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b764c:	1b9b      	subs	r3, r3, r6
   b764e:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
   b7652:	ea4f 00a3 	mov.w	r0, r3, asr #2
          closestIndex = currentRailway.loopIndex;
   b7656:	bf08      	it	eq
   b7658:	9831      	ldreq	r0, [sp, #196]	; 0xc4
   b765a:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
        x1 = currentCheckpoints[closestIndex].lat;
   b765e:	edd3 7a00 	vldr	s15, [r3]
        y1 = currentCheckpoints[closestIndex].lon;
   b7662:	edd3 6a01 	vldr	s13, [r3, #4]
        if(currentCheckpoints[closestIndex].lat > lat){
   b7666:	eef4 8ae7 	vcmpe.f32	s17, s15
   b766a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          slope = (y1 - y) / (x1 - x);
   b766e:	ee77 5ae8 	vsub.f32	s11, s15, s17
          slope = (y - y1) / (x - x1);
   b7672:	bf55      	itete	pl
   b7674:	ee38 6a66 	vsubpl.f32	s12, s16, s13
          slope = (y1 - y) / (x1 - x);
   b7678:	ee76 7ac8 	vsubmi.f32	s15, s13, s16
          slope = (y - y1) / (x - x1);
   b767c:	ee78 7ae7 	vsubpl.f32	s15, s17, s15
          slope = (y1 - y) / (x1 - x);
   b7680:	ee87 7aa5 	vdivmi.f32	s14, s15, s11
   b7684:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
          slope = (y - y1) / (x - x1);
   b7688:	bf58      	it	pl
   b768a:	ee86 7a27 	vdivpl.f32	s14, s12, s15
        if(slope == 0){
   b768e:	ed5f 7a13 	vldr	s15, [pc, #-76]	; b7644 <loop+0x4b8>
   b7692:	eeb5 7a40 	vcmp.f32	s14, #0.0
   b7696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b769a:	d00a      	beq.n	b76b2 <loop+0x526>
        }else if(slope >= __FLT_MAX__ / 10){
   b769c:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b76a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          perpendicularSlope = -1 / slope;
   b76a4:	bfba      	itte	lt
   b76a6:	eebf 6a00 	vmovlt.f32	s12, #240	; 0xbf800000 -1.0
   b76aa:	eec6 7a07 	vdivlt.f32	s15, s12, s14
          perpendicularSlope = 0;
   b76ae:	eef0 7a49 	vmovge.f32	s15, s18
          nearestSide = (perpendicularSlope * (currentCheckpoints[closestIndex].lat - x) + y) > currentCheckpoints[closestIndex].lon;
   b76b2:	eeb0 7a48 	vmov.f32	s14, s16
   b76b6:	eea7 7aa5 	vfma.f32	s14, s15, s11
   b76ba:	eef4 6ac7 	vcmpe.f32	s13, s14
   b76be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b76c2:	bf4c      	ite	mi
   b76c4:	2701      	movmi	r7, #1
   b76c6:	2700      	movpl	r7, #0
        if(closestIndex == 0){
   b76c8:	2800      	cmp	r0, #0
   b76ca:	d171      	bne.n	b77b0 <loop+0x624>
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b76cc:	ed91 7a02 	vldr	s14, [r1, #8]
          if(currentRailway.loopIndex == closestIndex){
   b76d0:	f8dd c0c4 	ldr.w	ip, [sp, #196]	; 0xc4
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b76d4:	ee37 7a68 	vsub.f32	s14, s14, s17
   b76d8:	eef0 6a48 	vmov.f32	s13, s16
   b76dc:	eee7 6a27 	vfma.f32	s13, s14, s15
   b76e0:	ed91 7a03 	vldr	s14, [r1, #12]
   b76e4:	eef4 6ac7 	vcmpe.f32	s13, s14
   b76e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b76ec:	bfcc      	ite	gt
   b76ee:	2501      	movgt	r5, #1
   b76f0:	2500      	movle	r5, #0
          if(currentRailway.loopIndex == closestIndex){
   b76f2:	f1bc 0f00 	cmp.w	ip, #0
   b76f6:	d11d      	bne.n	b7734 <loop+0x5a8>
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b76f8:	1e53      	subs	r3, r2, #1
   b76fa:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
            if(nearestSide != pointSide){
   b76fe:	42bd      	cmp	r5, r7
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b7700:	ed91 0a00 	vldr	s0, [r1]
   b7704:	ed91 7a01 	vldr	s14, [r1, #4]
            if(nearestSide != pointSide){
   b7708:	f040 809b 	bne.w	b7842 <loop+0x6b6>
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b770c:	ee70 8a68 	vsub.f32	s17, s0, s17
   b7710:	eea8 8aa7 	vfma.f32	s16, s17, s15
   b7714:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b7718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            }else if(nearestSide != loopPointSide){
   b771c:	bfcc      	ite	gt
   b771e:	2101      	movgt	r1, #1
   b7720:	2100      	movle	r1, #0
   b7722:	42a9      	cmp	r1, r5
              }else if(nearestSide != loopPointSide){
   b7724:	d100      	bne.n	b7728 <loop+0x59c>
                secondClosestIndex = currentRailway.tripleIndex + 1;
   b7726:	1c53      	adds	r3, r2, #1
          if(closestIndex < secondClosestIndex){
   b7728:	429a      	cmp	r2, r3
   b772a:	f2c0 808c 	blt.w	b7846 <loop+0x6ba>
   b772e:	4611      	mov	r1, r2
   b7730:	469c      	mov	ip, r3
   b7732:	e005      	b.n	b7740 <loop+0x5b4>
            if(pointSide == nearestSide){
   b7734:	42bd      	cmp	r5, r7
   b7736:	d074      	beq.n	b7822 <loop+0x696>
   b7738:	4602      	mov	r2, r0
   b773a:	4684      	mov	ip, r0
   b773c:	2301      	movs	r3, #1
   b773e:	4619      	mov	r1, r3
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b7740:	eb06 008c 	add.w	r0, r6, ip, lsl #2
   b7744:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   b7748:	ed90 7a00 	vldr	s14, [r0]
   b774c:	edd1 7a00 	vldr	s15, [r1]
   b7750:	9821      	ldr	r0, [sp, #132]	; 0x84
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b7752:	9d35      	ldr	r5, [sp, #212]	; 0xd4
          segmentPos *= currentRailway.scalers[lowerIndex];
   b7754:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b7758:	ee77 7a27 	vadd.f32	s15, s14, s15
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b775c:	4295      	cmp	r5, r2
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b775e:	eec7 6a27 	vdiv.f32	s13, s14, s15
          segmentPos *= currentRailway.scalers[lowerIndex];
   b7762:	ee07 1a90 	vmov	s15, r1
   b7766:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   b776a:	ee28 8a26 	vmul.f32	s16, s16, s13
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b776e:	db06      	blt.n	b777e <loop+0x5f2>
   b7770:	9934      	ldr	r1, [sp, #208]	; 0xd0
   b7772:	4291      	cmp	r1, r2
   b7774:	dc03      	bgt.n	b777e <loop+0x5f2>
   b7776:	429d      	cmp	r5, r3
   b7778:	db01      	blt.n	b777e <loop+0x5f2>
   b777a:	4299      	cmp	r1, r3
   b777c:	dd66      	ble.n	b784c <loop+0x6c0>
          else if(closestIndex < currentRailway.lowerLoopBound || secondClosestIndex < currentRailway.lowerLoopBound){
   b777e:	9d32      	ldr	r5, [sp, #200]	; 0xc8
   b7780:	4295      	cmp	r5, r2
   b7782:	dc66      	bgt.n	b7852 <loop+0x6c6>
   b7784:	429d      	cmp	r5, r3
   b7786:	dc64      	bgt.n	b7852 <loop+0x6c6>
          else if(closestIndex > currentRailway.upperLoopBound || secondClosestIndex > currentRailway.upperLoopBound){
   b7788:	9933      	ldr	r1, [sp, #204]	; 0xcc
   b778a:	4291      	cmp	r1, r2
   b778c:	db65      	blt.n	b785a <loop+0x6ce>
   b778e:	4299      	cmp	r1, r3
   b7790:	db63      	blt.n	b785a <loop+0x6ce>
            inLoop = true;
   b7792:	9b03      	ldr	r3, [sp, #12]
          else if(closestIndex > currentRailway.upperLoopBound || secondClosestIndex > currentRailway.upperLoopBound){
   b7794:	4629      	mov	r1, r5
            pcbSegment = 2;
   b7796:	2502      	movs	r5, #2
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b7798:	458c      	cmp	ip, r1
   b779a:	dd61      	ble.n	b7860 <loop+0x6d4>
            segmentPos += currentRailway.scalers[i];
   b779c:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   b77a0:	ee07 2a90 	vmov	s15, r2
   b77a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b77a8:	3101      	adds	r1, #1
            segmentPos += currentRailway.scalers[i];
   b77aa:	ee38 8a27 	vadd.f32	s16, s16, s15
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b77ae:	e7f3      	b.n	b7798 <loop+0x60c>
   b77b0:	f1ac 0c08 	sub.w	ip, ip, #8
   b77b4:	448c      	add	ip, r1
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b77b6:	ed9c 7a00 	vldr	s14, [ip]
   b77ba:	ee37 7a68 	vsub.f32	s14, s14, s17
   b77be:	eef0 6a48 	vmov.f32	s13, s16
   b77c2:	eee7 6a27 	vfma.f32	s13, s14, s15
          if(closestIndex == checkpointCount - 1){
   b77c6:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b77ca:	1e43      	subs	r3, r0, #1
   b77cc:	ed9c 7a01 	vldr	s14, [ip, #4]
   b77d0:	eef4 6ac7 	vcmpe.f32	s13, s14
   b77d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b77d8:	bfcc      	ite	gt
   b77da:	f04f 0c01 	movgt.w	ip, #1
   b77de:	f04f 0c00 	movle.w	ip, #0
          if(closestIndex == checkpointCount - 1){
   b77e2:	4586      	cmp	lr, r0
   b77e4:	d129      	bne.n	b783a <loop+0x6ae>
            if(closestIndex == currentRailway.loopIndex){
   b77e6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
   b77e8:	4283      	cmp	r3, r0
   b77ea:	d118      	bne.n	b781e <loop+0x692>
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b77ec:	1e53      	subs	r3, r2, #1
   b77ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
              if(nearestSide != pointSide){
   b77f2:	45bc      	cmp	ip, r7
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b77f4:	ed91 0a00 	vldr	s0, [r1]
   b77f8:	ed91 7a01 	vldr	s14, [r1, #4]
              if(nearestSide != pointSide){
   b77fc:	d002      	beq.n	b7804 <loop+0x678>
                secondClosestIndex = checkpointCount - 2;
   b77fe:	1eab      	subs	r3, r5, #2
   b7800:	4602      	mov	r2, r0
   b7802:	e791      	b.n	b7728 <loop+0x59c>
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b7804:	ee70 8a68 	vsub.f32	s17, s0, s17
   b7808:	eea8 8aa7 	vfma.f32	s16, s17, s15
   b780c:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b7810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
              }else if(nearestSide != loopPointSide){
   b7814:	bfcc      	ite	gt
   b7816:	2101      	movgt	r1, #1
   b7818:	2100      	movle	r1, #0
   b781a:	4561      	cmp	r1, ip
   b781c:	e782      	b.n	b7724 <loop+0x598>
              if(pointSide == nearestSide){
   b781e:	45bc      	cmp	ip, r7
   b7820:	d1ed      	bne.n	b77fe <loop+0x672>
        String destNm = train.key("destination").valueString();
   b7822:	a817      	add	r0, sp, #92	; 0x5c
   b7824:	f003 faf2 	bl	bae0c <_ZN6StringD1Ev>
        String nextStation = train.key("next_stop").valueString();
   b7828:	a813      	add	r0, sp, #76	; 0x4c
   b782a:	f003 faef 	bl	bae0c <_ZN6StringD1Ev>
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b782e:	a80a      	add	r0, sp, #40	; 0x28
        count++;
   b7830:	f109 0901 	add.w	r9, r9, #1
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b7834:	f000 fb4a 	bl	b7ecc <_ZN13JsonReferenceD1Ev>
   b7838:	e5a2      	b.n	b7380 <loop+0x1f4>
            if(pointSide == nearestSide){
   b783a:	45bc      	cmp	ip, r7
   b783c:	d1e0      	bne.n	b7800 <loop+0x674>
              secondClosestIndex = closestIndex + 1;
   b783e:	1c43      	adds	r3, r0, #1
   b7840:	e7de      	b.n	b7800 <loop+0x674>
   b7842:	4602      	mov	r2, r0
   b7844:	e77a      	b.n	b773c <loop+0x5b0>
   b7846:	4619      	mov	r1, r3
   b7848:	4694      	mov	ip, r2
   b784a:	e779      	b.n	b7740 <loop+0x5b4>
        bool inLoop = false;
   b784c:	2300      	movs	r3, #0
            pcbSegment = 3;
   b784e:	2503      	movs	r5, #3
   b7850:	e7a2      	b.n	b7798 <loop+0x60c>
            lowerScaleBound = 0;
   b7852:	2100      	movs	r1, #0
        bool inLoop = false;
   b7854:	460b      	mov	r3, r1
            pcbSegment = 0;
   b7856:	460d      	mov	r5, r1
   b7858:	e79e      	b.n	b7798 <loop+0x60c>
        bool inLoop = false;
   b785a:	2300      	movs	r3, #0
            pcbSegment = 1;
   b785c:	2501      	movs	r5, #1
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b785e:	e79b      	b.n	b7798 <loop+0x60c>
          if(cityIndexBuffer == 0){
   b7860:	4aab      	ldr	r2, [pc, #684]	; (b7b10 <loop+0x984>)
   b7862:	9e24      	ldr	r6, [sp, #144]	; 0x90
   b7864:	6812      	ldr	r2, [r2, #0]
   b7866:	2a00      	cmp	r2, #0
   b7868:	d170      	bne.n	b794c <loop+0x7c0>
            if(inLoop){
   b786a:	2b00      	cmp	r3, #0
   b786c:	d04a      	beq.n	b7904 <loop+0x778>
              if(currentRailway.name == pinkLineCTA.name){
   b786e:	49a9      	ldr	r1, [pc, #676]	; (b7b14 <loop+0x988>)
   b7870:	a827      	add	r0, sp, #156	; 0x9c
   b7872:	f7fd f8b5 	bl	b49e0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7876:	b1f0      	cbz	r0, b78b6 <loop+0x72a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7878:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
   b787c:	1a9b      	subs	r3, r3, r2
   b787e:	109b      	asrs	r3, r3, #2
                segmentPos = (float)currentRailway.outputs[2].size() - segmentPos;
   b7880:	ee07 3a90 	vmov	s15, r3
   b7884:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b7888:	ee37 8ac8 	vsub.f32	s16, s15, s16
            if(pcbSegment == 1 && currentRailway.name == greenLineCTA.name){
   b788c:	2d01      	cmp	r5, #1
   b788e:	d147      	bne.n	b7920 <loop+0x794>
   b7890:	49a1      	ldr	r1, [pc, #644]	; (b7b18 <loop+0x98c>)
   b7892:	a827      	add	r0, sp, #156	; 0x9c
   b7894:	f7fd f8a4 	bl	b49e0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7898:	2800      	cmp	r0, #0
   b789a:	d049      	beq.n	b7930 <loop+0x7a4>
   b789c:	e9d6 2303 	ldrd	r2, r3, [r6, #12]
   b78a0:	1a9b      	subs	r3, r3, r2
   b78a2:	109b      	asrs	r3, r3, #2
              segmentPos = (float)currentRailway.outputs[1].size() - segmentPos;
   b78a4:	ee07 3a90 	vmov	s15, r3
   b78a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b78ac:	ee37 8ac8 	vsub.f32	s16, s15, s16
              trainDir = 6 - trainDir;
   b78b0:	f1c4 0406 	rsb	r4, r4, #6
   b78b4:	e03c      	b.n	b7930 <loop+0x7a4>
              }else if(currentRailway.name == orangeLineCTA.name){
   b78b6:	4999      	ldr	r1, [pc, #612]	; (b7b1c <loop+0x990>)
   b78b8:	a827      	add	r0, sp, #156	; 0x9c
   b78ba:	f7fd f891 	bl	b49e0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b78be:	b1c8      	cbz	r0, b78f4 <loop+0x768>
	return *(this->_M_impl._M_start + __n);
   b78c0:	4b97      	ldr	r3, [pc, #604]	; (b7b20 <loop+0x994>)
   b78c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b78c4:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
   b78c8:	1ad2      	subs	r2, r2, r3
   b78ca:	1092      	asrs	r2, r2, #2
                segmentPos = (int)(segmentPos + orangeLineCTA.outputs[2].size() / 2) % orangeLineCTA.outputs[2].size();
   b78cc:	0853      	lsrs	r3, r2, #1
   b78ce:	ee07 3a90 	vmov	s15, r3
   b78d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b78d6:	ee37 8a88 	vadd.f32	s16, s15, s16
   b78da:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   b78de:	ee17 3a90 	vmov	r3, s15
   b78e2:	fbb3 f1f2 	udiv	r1, r3, r2
   b78e6:	fb02 3311 	mls	r3, r2, r1, r3
   b78ea:	ee08 3a10 	vmov	s16, r3
   b78ee:	eeb8 8a48 	vcvt.f32.u32	s16, s16
   b78f2:	e7cb      	b.n	b788c <loop+0x700>
              }else if(currentRailway.name == purpleLineCTA.name){
   b78f4:	498b      	ldr	r1, [pc, #556]	; (b7b24 <loop+0x998>)
   b78f6:	a827      	add	r0, sp, #156	; 0x9c
   b78f8:	f7fd f872 	bl	b49e0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
                trainDir = 1;
   b78fc:	2800      	cmp	r0, #0
   b78fe:	bf18      	it	ne
   b7900:	2401      	movne	r4, #1
   b7902:	e7c3      	b.n	b788c <loop+0x700>
              if(currentRailway.name == brownLineCTA.name || currentRailway.name == purpleLineCTA.name){
   b7904:	4988      	ldr	r1, [pc, #544]	; (b7b28 <loop+0x99c>)
   b7906:	a827      	add	r0, sp, #156	; 0x9c
   b7908:	f7fd f86a 	bl	b49e0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b790c:	b928      	cbnz	r0, b791a <loop+0x78e>
   b790e:	4985      	ldr	r1, [pc, #532]	; (b7b24 <loop+0x998>)
   b7910:	a827      	add	r0, sp, #156	; 0x9c
   b7912:	f7fd f865 	bl	b49e0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7916:	2800      	cmp	r0, #0
   b7918:	d0b8      	beq.n	b788c <loop+0x700>
                trainDir = 6 - trainDir;
   b791a:	f1c4 0406 	rsb	r4, r4, #6
   b791e:	e7b5      	b.n	b788c <loop+0x700>
            if(pcbSegment == 3 && currentRailway.name == pinkLineCTA.name){
   b7920:	2d03      	cmp	r5, #3
   b7922:	d105      	bne.n	b7930 <loop+0x7a4>
   b7924:	497b      	ldr	r1, [pc, #492]	; (b7b14 <loop+0x988>)
            if(currentRailway.name == orangeLineMBTA.name || currentRailway.name == greenLine1MBTA.name || currentRailway.name == redLineMBTA.name){
   b7926:	a827      	add	r0, sp, #156	; 0x9c
   b7928:	f7fd f85a 	bl	b49e0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b792c:	2800      	cmp	r0, #0
   b792e:	d1bf      	bne.n	b78b0 <loop+0x724>
  { return __builtin_floorf(__x); }
   b7930:	eeb0 0a48 	vmov.f32	s0, s16
   b7934:	f004 fad2 	bl	bbedc <floorf>
	return *(this->_M_impl._M_start + __n);
   b7938:	230c      	movs	r3, #12
          currentRailway.outputs[pcbSegment][(int)floor(segmentPos)] = trainDir;
   b793a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b793e:	435d      	muls	r5, r3
   b7940:	ee10 2a10 	vmov	r2, s0
   b7944:	5973      	ldr	r3, [r6, r5]
   b7946:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b794a:	e76a      	b.n	b7822 <loop+0x696>
          else if(cityIndexBuffer == 1){
   b794c:	2a01      	cmp	r2, #1
   b794e:	d1ef      	bne.n	b7930 <loop+0x7a4>
            if(currentRailway.name == orangeLineMBTA.name || currentRailway.name == greenLine1MBTA.name || currentRailway.name == redLineMBTA.name){
   b7950:	4976      	ldr	r1, [pc, #472]	; (b7b2c <loop+0x9a0>)
   b7952:	a827      	add	r0, sp, #156	; 0x9c
   b7954:	f7fd f844 	bl	b49e0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7958:	2800      	cmp	r0, #0
   b795a:	d1a9      	bne.n	b78b0 <loop+0x724>
   b795c:	4974      	ldr	r1, [pc, #464]	; (b7b30 <loop+0x9a4>)
   b795e:	a827      	add	r0, sp, #156	; 0x9c
   b7960:	f7fd f83e 	bl	b49e0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7964:	2800      	cmp	r0, #0
   b7966:	d1a3      	bne.n	b78b0 <loop+0x724>
   b7968:	4972      	ldr	r1, [pc, #456]	; (b7b34 <loop+0x9a8>)
   b796a:	e7dc      	b.n	b7926 <loop+0x79a>
        }else if(cityIndexBuffer == 0 && i == 3){
   b796c:	2d03      	cmp	r5, #3
   b796e:	d10d      	bne.n	b798c <loop+0x800>
          if(currentRailway.name == orangeLineCTA.name){
   b7970:	496a      	ldr	r1, [pc, #424]	; (b7b1c <loop+0x990>)
   b7972:	4c71      	ldr	r4, [pc, #452]	; (b7b38 <loop+0x9ac>)
   b7974:	a827      	add	r0, sp, #156	; 0x9c
   b7976:	f7fd f833 	bl	b49e0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b797a:	b118      	cbz	r0, b7984 <loop+0x7f8>
            Wire.beginTransmission(greenLineCTAAdr[0]);
   b797c:	f004 f8c0 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b7980:	6821      	ldr	r1, [r4, #0]
   b7982:	e58a      	b.n	b749a <loop+0x30e>
            Wire.beginTransmission(greenLineCTAAdr[1]);
   b7984:	f004 f8bc 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b7988:	6861      	ldr	r1, [r4, #4]
   b798a:	e586      	b.n	b749a <loop+0x30e>
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b798c:	f004 f8b8 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b7990:	4b6a      	ldr	r3, [pc, #424]	; (b7b3c <loop+0x9b0>)
   b7992:	681b      	ldr	r3, [r3, #0]
   b7994:	5999      	ldr	r1, [r3, r6]
   b7996:	e580      	b.n	b749a <loop+0x30e>
        }else if(cityIndexBuffer == 0 && i == 3){
   b7998:	2d03      	cmp	r5, #3
   b799a:	d10d      	bne.n	b79b8 <loop+0x82c>
          if(currentRailway.name == orangeLineCTA.name){
   b799c:	495f      	ldr	r1, [pc, #380]	; (b7b1c <loop+0x990>)
   b799e:	4c66      	ldr	r4, [pc, #408]	; (b7b38 <loop+0x9ac>)
   b79a0:	a827      	add	r0, sp, #156	; 0x9c
   b79a2:	f7fd f81d 	bl	b49e0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b79a6:	b118      	cbz	r0, b79b0 <loop+0x824>
            Wire.beginTransmission(greenLineCTAAdr[0]);
   b79a8:	f004 f8aa 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b79ac:	6821      	ldr	r1, [r4, #0]
   b79ae:	e5a9      	b.n	b7504 <loop+0x378>
            Wire.beginTransmission(greenLineCTAAdr[1]);
   b79b0:	f004 f8a6 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b79b4:	6861      	ldr	r1, [r4, #4]
   b79b6:	e5a5      	b.n	b7504 <loop+0x378>
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b79b8:	f004 f8a2 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b79bc:	4b5f      	ldr	r3, [pc, #380]	; (b7b3c <loop+0x9b0>)
   b79be:	681b      	ldr	r3, [r3, #0]
   b79c0:	5999      	ldr	r1, [r3, r6]
   b79c2:	e59f      	b.n	b7504 <loop+0x378>
            else if(currentRailway.name == brownLineCTA.name || currentRailway.name == purpleLineCTA.name){
   b79c4:	f109 0130 	add.w	r1, r9, #48	; 0x30
   b79c8:	a827      	add	r0, sp, #156	; 0x9c
   b79ca:	f7fd f809 	bl	b49e0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b79ce:	b920      	cbnz	r0, b79da <loop+0x84e>
   b79d0:	4954      	ldr	r1, [pc, #336]	; (b7b24 <loop+0x998>)
   b79d2:	a827      	add	r0, sp, #156	; 0x9c
   b79d4:	f7fd f804 	bl	b49e0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b79d8:	b198      	cbz	r0, b7a02 <loop+0x876>
   b79da:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b79de:	e9d2 2300 	ldrd	r2, r3, [r2]
   b79e2:	1a9b      	subs	r3, r3, r2
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b79e4:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b79e8:	f080 80ae 	bcs.w	b7b48 <loop+0x9bc>
                Wire.write((char)currentRailway.outputs[0][j] + '0');
   b79ec:	f004 f888 	bl	bbb00 <_Z19__fetch_global_Wirev>
	return *(this->_M_impl._M_start + __n);
   b79f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b79f2:	681b      	ldr	r3, [r3, #0]
   b79f4:	f813 1024 	ldrb.w	r1, [r3, r4, lsl #2]
   b79f8:	3130      	adds	r1, #48	; 0x30
   b79fa:	f7fc fc13 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b79fe:	3401      	adds	r4, #1
   b7a00:	e7eb      	b.n	b79da <loop+0x84e>
   b7a02:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7a06:	e9d2 2300 	ldrd	r2, r3, [r2]
   b7a0a:	1a9b      	subs	r3, r3, r2
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b7a0c:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b7a10:	f080 809a 	bcs.w	b7b48 <loop+0x9bc>
                Wire.write('0');
   b7a14:	f004 f874 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b7a18:	2130      	movs	r1, #48	; 0x30
   b7a1a:	f7fc fc03 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b7a1e:	3401      	adds	r4, #1
   b7a20:	e7ef      	b.n	b7a02 <loop+0x876>
          if(i == 1 && (currentRailway.name == brownLineCTA.name || currentRailway.name == purpleLineCTA.name)){
   b7a22:	2d01      	cmp	r5, #1
   b7a24:	f040 80c2 	bne.w	b7bac <loop+0xa20>
   b7a28:	493f      	ldr	r1, [pc, #252]	; (b7b28 <loop+0x99c>)
   b7a2a:	a827      	add	r0, sp, #156	; 0x9c
   b7a2c:	f7fc ffd8 	bl	b49e0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7a30:	b930      	cbnz	r0, b7a40 <loop+0x8b4>
   b7a32:	493c      	ldr	r1, [pc, #240]	; (b7b24 <loop+0x998>)
   b7a34:	a827      	add	r0, sp, #156	; 0x9c
   b7a36:	f7fc ffd3 	bl	b49e0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7a3a:	2800      	cmp	r0, #0
   b7a3c:	f000 8084 	beq.w	b7b48 <loop+0x9bc>
	return *(this->_M_impl._M_start + __n);
   b7a40:	9a24      	ldr	r2, [sp, #144]	; 0x90
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7a42:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
   b7a46:	1a9b      	subs	r3, r3, r2
            for(int j = 0; j < currentRailway.outputs[2].size(); j++){
   b7a48:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b7a4c:	d27c      	bcs.n	b7b48 <loop+0x9bc>
              Wire.write('0');
   b7a4e:	f004 f857 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b7a52:	2130      	movs	r1, #48	; 0x30
   b7a54:	f7fc fbe6 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < currentRailway.outputs[2].size(); j++){
   b7a58:	3401      	adds	r4, #1
   b7a5a:	e7f1      	b.n	b7a40 <loop+0x8b4>
          }else if(i == 3 && currentRailway.name == pinkLineCTA.name){
   b7a5c:	492d      	ldr	r1, [pc, #180]	; (b7b14 <loop+0x988>)
   b7a5e:	a827      	add	r0, sp, #156	; 0x9c
   b7a60:	f7fc ffbe 	bl	b49e0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7a64:	2800      	cmp	r0, #0
   b7a66:	d06f      	beq.n	b7b48 <loop+0x9bc>
	return *(this->_M_impl._M_start + __n);
   b7a68:	f8df 90d4 	ldr.w	r9, [pc, #212]	; b7b40 <loop+0x9b4>
   b7a6c:	f8df b0d4 	ldr.w	fp, [pc, #212]	; b7b44 <loop+0x9b8>
   b7a70:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
   b7a74:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7a78:	e9d0 3200 	ldrd	r3, r2, [r0]
   b7a7c:	1ad2      	subs	r2, r2, r3
   b7a7e:	e9d1 1309 	ldrd	r1, r3, [r1, #36]	; 0x24
   b7a82:	1a5b      	subs	r3, r3, r1
   b7a84:	109b      	asrs	r3, r3, #2
            for(int j = 0; j < greenLineCTA.outputs[0].size() - pinkLineCTA.outputs[3].size(); j++){
   b7a86:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   b7a8a:	42a3      	cmp	r3, r4
   b7a8c:	d95c      	bls.n	b7b48 <loop+0x9bc>
              Wire.write('0');
   b7a8e:	f004 f837 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b7a92:	2130      	movs	r1, #48	; 0x30
   b7a94:	f7fc fbc6 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < greenLineCTA.outputs[0].size() - pinkLineCTA.outputs[3].size(); j++){
   b7a98:	3401      	adds	r4, #1
   b7a9a:	e7e9      	b.n	b7a70 <loop+0x8e4>
            val = n;
   b7a9c:	4619      	mov	r1, r3
   b7a9e:	e07e      	b.n	b7b9e <loop+0xa12>
        Serial.println();
   b7aa0:	f003 fee0 	bl	bb864 <_Z16_fetch_usbserialv>
   b7aa4:	f003 f947 	bl	bad36 <_ZN5Print7printlnEv>
      for(int i = 0; i < 4; i++){
   b7aa8:	3501      	adds	r5, #1
        Wire.endTransmission();
   b7aaa:	f004 f829 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b7aae:	f002 ffc8 	bl	baa42 <_ZN7TwoWire15endTransmissionEv>
      for(int i = 0; i < 4; i++){
   b7ab2:	2d04      	cmp	r5, #4
   b7ab4:	f106 0604 	add.w	r6, r6, #4
   b7ab8:	f47f acde 	bne.w	b7478 <loop+0x2ec>
   b7abc:	2300      	movs	r3, #0
          currentRailway.outputs[i][j] = 0;
   b7abe:	461c      	mov	r4, r3
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b7ac0:	2200      	movs	r2, #0
	return *(this->_M_impl._M_start + __n);
   b7ac2:	9924      	ldr	r1, [sp, #144]	; 0x90
   b7ac4:	18cd      	adds	r5, r1, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7ac6:	58c8      	ldr	r0, [r1, r3]
   b7ac8:	6869      	ldr	r1, [r5, #4]
   b7aca:	1a09      	subs	r1, r1, r0
   b7acc:	ebb2 0fa1 	cmp.w	r2, r1, asr #2
   b7ad0:	d203      	bcs.n	b7ada <loop+0x94e>
          currentRailway.outputs[i][j] = 0;
   b7ad2:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b7ad6:	3201      	adds	r2, #1
   b7ad8:	e7f3      	b.n	b7ac2 <loop+0x936>
      for(int i = 0; i < 4; i++){
   b7ada:	330c      	adds	r3, #12
   b7adc:	2b30      	cmp	r3, #48	; 0x30
   b7ade:	d1ef      	bne.n	b7ac0 <loop+0x934>
      Serial.println();
   b7ae0:	f003 fec0 	bl	bb864 <_Z16_fetch_usbserialv>
   b7ae4:	f003 f927 	bl	bad36 <_ZN5Print7printlnEv>
      }
   b7ae8:	a807      	add	r0, sp, #28
   b7aea:	f7fc fe83 	bl	b47f4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      Railway currentRailway = cities[cityIndexBuffer].railways[j];
   b7aee:	a81b      	add	r0, sp, #108	; 0x6c
   b7af0:	f7fd fb66 	bl	b51c0 <_ZN7RailwayD1Ev>
    for(int j = 0; j < cities[cityIndexBuffer].railways.size(); j++){
   b7af4:	9b02      	ldr	r3, [sp, #8]
   b7af6:	3301      	adds	r3, #1
   b7af8:	9302      	str	r3, [sp, #8]
   b7afa:	f7ff bb7d 	b.w	b71f8 <loop+0x6c>
    Serial.println();
   b7afe:	f003 feb1 	bl	bb864 <_Z16_fetch_usbserialv>
}
   b7b02:	b037      	add	sp, #220	; 0xdc
   b7b04:	ecbd 8b06 	vpop	{d8-d10}
   b7b08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Serial.println();
   b7b0c:	f003 b913 	b.w	bad36 <_ZN5Print7printlnEv>
   b7b10:	200353f4 	.word	0x200353f4
   b7b14:	2003e4ac 	.word	0x2003e4ac
   b7b18:	2003556c 	.word	0x2003556c
   b7b1c:	20037e08 	.word	0x20037e08
   b7b20:	20037dd8 	.word	0x20037dd8
   b7b24:	2003e518 	.word	0x2003e518
   b7b28:	200353a8 	.word	0x200353a8
   b7b2c:	20037e74 	.word	0x20037e74
   b7b30:	20035494 	.word	0x20035494
   b7b34:	2003e5f0 	.word	0x2003e5f0
   b7b38:	200355a8 	.word	0x200355a8
   b7b3c:	2003e694 	.word	0x2003e694
   b7b40:	2003553c 	.word	0x2003553c
   b7b44:	2003e47c 	.word	0x2003e47c
        Serial.printf("%s rail part %i: ", currentRailway.name.c_str(), i);
   b7b48:	f003 fe8c 	bl	bb864 <_Z16_fetch_usbserialv>
   b7b4c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   b7b4e:	492b      	ldr	r1, [pc, #172]	; (b7bfc <loop+0xa70>)
   b7b50:	462b      	mov	r3, r5
   b7b52:	f7fc fc4f 	bl	b43f4 <_ZN5Print6printfEPKcz>
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b7b56:	240c      	movs	r4, #12
   b7b58:	436c      	muls	r4, r5
   b7b5a:	f04f 0900 	mov.w	r9, #0
	return *(this->_M_impl._M_start + __n);
   b7b5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
   b7b60:	1913      	adds	r3, r2, r4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7b62:	5912      	ldr	r2, [r2, r4]
   b7b64:	685b      	ldr	r3, [r3, #4]
   b7b66:	1a9b      	subs	r3, r3, r2
   b7b68:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
   b7b6c:	d298      	bcs.n	b7aa0 <loop+0x914>
          Wire.write((char)currentRailway.outputs[i][j] + '0');
   b7b6e:	f003 ffc7 	bl	bbb00 <_Z19__fetch_global_Wirev>
	return *(this->_M_impl._M_start + __n);
   b7b72:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b7b74:	591b      	ldr	r3, [r3, r4]
   b7b76:	f813 1029 	ldrb.w	r1, [r3, r9, lsl #2]
   b7b7a:	3130      	adds	r1, #48	; 0x30
   b7b7c:	f7fc fb52 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
          Serial.print(currentRailway.outputs[i][j]);
   b7b80:	f003 fe70 	bl	bb864 <_Z16_fetch_usbserialv>
   b7b84:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b7b86:	591b      	ldr	r3, [r3, r4]
   b7b88:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
        if (n < 0 && base == 10) {
   b7b8c:	2b00      	cmp	r3, #0
   b7b8e:	4683      	mov	fp, r0
   b7b90:	da84      	bge.n	b7a9c <loop+0x910>
            t = print('-');
   b7b92:	212d      	movs	r1, #45	; 0x2d
   b7b94:	9303      	str	r3, [sp, #12]
   b7b96:	f003 f8cb 	bl	bad30 <_ZN5Print5printEc>
            val = -n;
   b7b9a:	9b03      	ldr	r3, [sp, #12]
   b7b9c:	4259      	negs	r1, r3
        return printNumber(val, base) + t;
   b7b9e:	220a      	movs	r2, #10
   b7ba0:	4658      	mov	r0, fp
   b7ba2:	f003 f8de 	bl	bad62 <_ZN5Print11printNumberEmh>
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b7ba6:	f109 0901 	add.w	r9, r9, #1
   b7baa:	e7d8      	b.n	b7b5e <loop+0x9d2>
          if(i == 3 && currentRailway.name == orangeLineCTA.name){
   b7bac:	2d03      	cmp	r5, #3
   b7bae:	d1cb      	bne.n	b7b48 <loop+0x9bc>
   b7bb0:	4913      	ldr	r1, [pc, #76]	; (b7c00 <loop+0xa74>)
   b7bb2:	a827      	add	r0, sp, #156	; 0x9c
   b7bb4:	f7fc ff14 	bl	b49e0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7bb8:	2800      	cmp	r0, #0
   b7bba:	f43f af4f 	beq.w	b7a5c <loop+0x8d0>
   b7bbe:	f8df 9044 	ldr.w	r9, [pc, #68]	; b7c04 <loop+0xa78>
   b7bc2:	f8df b044 	ldr.w	fp, [pc, #68]	; b7c08 <loop+0xa7c>
   b7bc6:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
   b7bca:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7bce:	e9d0 3200 	ldrd	r3, r2, [r0]
   b7bd2:	1ad2      	subs	r2, r2, r3
   b7bd4:	e9d1 1309 	ldrd	r1, r3, [r1, #36]	; 0x24
   b7bd8:	1a5b      	subs	r3, r3, r1
   b7bda:	109b      	asrs	r3, r3, #2
            for(int j = 0; j < greenLineCTA.outputs[0].size() - orangeLineCTA.outputs[3].size(); j++){
   b7bdc:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   b7be0:	42a3      	cmp	r3, r4
   b7be2:	d9b1      	bls.n	b7b48 <loop+0x9bc>
              Wire.write('0');
   b7be4:	f003 ff8c 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b7be8:	2130      	movs	r1, #48	; 0x30
   b7bea:	f7fc fb1b 	bl	b4224 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < greenLineCTA.outputs[0].size() - orangeLineCTA.outputs[3].size(); j++){
   b7bee:	3401      	adds	r4, #1
   b7bf0:	e7e9      	b.n	b7bc6 <loop+0xa3a>
}
   b7bf2:	b037      	add	sp, #220	; 0xdc
   b7bf4:	ecbd 8b06 	vpop	{d8-d10}
   b7bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7bfc:	000bf0d3 	.word	0x000bf0d3
   b7c00:	20037e08 	.word	0x20037e08
   b7c04:	2003553c 	.word	0x2003553c
   b7c08:	20037dd8 	.word	0x20037dd8

000b7c0c <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b7c0c:	b510      	push	{r4, lr}
   b7c0e:	4604      	mov	r4, r0
   b7c10:	f003 fd5a 	bl	bb6c8 <_ZN9TCPClientC1Ev>
{

}
   b7c14:	4620      	mov	r0, r4
   b7c16:	bd10      	pop	{r4, pc}

000b7c18 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b7c18:	b538      	push	{r3, r4, r5, lr}
   b7c1a:	4604      	mov	r4, r0
   b7c1c:	4615      	mov	r5, r2
    client.print(aHeaderName);
   b7c1e:	f003 f883 	bl	bad28 <_ZN5Print5printEPKc>
    client.print(": ");
   b7c22:	4905      	ldr	r1, [pc, #20]	; (b7c38 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   b7c24:	4620      	mov	r0, r4
   b7c26:	f003 f87f 	bl	bad28 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b7c2a:	4629      	mov	r1, r5
   b7c2c:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b7c2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
   b7c32:	f003 b88c 	b.w	bad4e <_ZN5Print7printlnEPKc>
   b7c36:	bf00      	nop
   b7c38:	000bed76 	.word	0x000bed76

000b7c3c <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b7c3c:	b538      	push	{r3, r4, r5, lr}
   b7c3e:	4605      	mov	r5, r0
   b7c40:	4614      	mov	r4, r2
    client.print(aHeaderName);
   b7c42:	f003 f871 	bl	bad28 <_ZN5Print5printEPKc>
    client.print(": ");
   b7c46:	490b      	ldr	r1, [pc, #44]	; (b7c74 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   b7c48:	4628      	mov	r0, r5
   b7c4a:	f003 f86d 	bl	bad28 <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
   b7c4e:	2c00      	cmp	r4, #0
   b7c50:	da0d      	bge.n	b7c6e <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
   b7c52:	212d      	movs	r1, #45	; 0x2d
   b7c54:	4628      	mov	r0, r5
   b7c56:	f003 f86b 	bl	bad30 <_ZN5Print5printEc>
            val = -n;
   b7c5a:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b7c5c:	4628      	mov	r0, r5
   b7c5e:	220a      	movs	r2, #10
   b7c60:	f003 f87f 	bl	bad62 <_ZN5Print11printNumberEmh>
        n += println();
   b7c64:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b7c66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7c6a:	f003 b864 	b.w	bad36 <_ZN5Print7printlnEv>
            val = n;
   b7c6e:	4621      	mov	r1, r4
   b7c70:	e7f4      	b.n	b7c5c <_ZN10HttpClient10sendHeaderEPKci+0x20>
   b7c72:	bf00      	nop
   b7c74:	000bed76 	.word	0x000bed76

000b7c78 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b7c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7c7c:	460e      	mov	r6, r1
   b7c7e:	b091      	sub	sp, #68	; 0x44
   b7c80:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b7c82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7c86:	6013      	str	r3, [r2, #0]
{
   b7c88:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b7c8a:	2100      	movs	r1, #0
   b7c8c:	4630      	mov	r0, r6
   b7c8e:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b7c92:	4617      	mov	r7, r2
   b7c94:	f003 f9dd 	bl	bb052 <_ZNK6String6equalsEPKc>
   b7c98:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b7c9c:	4603      	mov	r3, r0
   b7c9e:	b998      	cbnz	r0, b7cc8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	const char * c_str() const { return buffer; }
   b7ca0:	f1be 0f00 	cmp.w	lr, #0
   b7ca4:	bf14      	ite	ne
   b7ca6:	4672      	movne	r2, lr
   b7ca8:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b7caa:	6831      	ldr	r1, [r6, #0]
   b7cac:	b292      	uxth	r2, r2
   b7cae:	4620      	mov	r0, r4
   b7cb0:	f003 fb0a 	bl	bb2c8 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b7cb4:	1e05      	subs	r5, r0, #0
   b7cb6:	bf18      	it	ne
   b7cb8:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   b7cba:	b9c5      	cbnz	r5, b7cee <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   b7cbc:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b7cbe:	b011      	add	sp, #68	; 0x44
   b7cc0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b7cc4:	f003 bcb6 	b.w	bb634 <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b7cc8:	4b76      	ldr	r3, [pc, #472]	; (b7ea4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
   b7cca:	930a      	str	r3, [sp, #40]	; 0x28
   b7ccc:	f106 0c14 	add.w	ip, r6, #20
   b7cd0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7cd4:	ad0b      	add	r5, sp, #44	; 0x2c
   b7cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7cd8:	f8dc 3000 	ldr.w	r3, [ip]
   b7cdc:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b7cde:	fa1f f28e 	uxth.w	r2, lr
   b7ce2:	2300      	movs	r3, #0
   b7ce4:	a90a      	add	r1, sp, #40	; 0x28
   b7ce6:	4620      	mov	r0, r4
   b7ce8:	f003 fbce 	bl	bb488 <_ZN9TCPClient7connectE9IPAddresstm>
   b7cec:	e7e2      	b.n	b7cb4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
   b7cee:	4649      	mov	r1, r9
   b7cf0:	4620      	mov	r0, r4
   b7cf2:	f003 f819 	bl	bad28 <_ZN5Print5printEPKc>
    client.print(" ");
   b7cf6:	496c      	ldr	r1, [pc, #432]	; (b7ea8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   b7cf8:	4620      	mov	r0, r4
   b7cfa:	f003 f815 	bl	bad28 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b7cfe:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b7d00:	4620      	mov	r0, r4
   b7d02:	f003 f811 	bl	bad28 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b7d06:	4969      	ldr	r1, [pc, #420]	; (b7eac <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   b7d08:	4620      	mov	r0, r4
   b7d0a:	f003 f80d 	bl	bad28 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b7d0e:	4968      	ldr	r1, [pc, #416]	; (b7eb0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
   b7d10:	4a68      	ldr	r2, [pc, #416]	; (b7eb4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
   b7d12:	4620      	mov	r0, r4
   b7d14:	f7ff ff80 	bl	b7c18 <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b7d18:	2100      	movs	r1, #0
   b7d1a:	4630      	mov	r0, r6
   b7d1c:	f003 f999 	bl	bb052 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b7d20:	b920      	cbnz	r0, b7d2c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   b7d22:	6832      	ldr	r2, [r6, #0]
   b7d24:	4964      	ldr	r1, [pc, #400]	; (b7eb8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
   b7d26:	4620      	mov	r0, r4
   b7d28:	f7ff ff76 	bl	b7c18 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b7d2c:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b7d30:	2100      	movs	r1, #0
   b7d32:	4650      	mov	r0, sl
   b7d34:	f003 f98d 	bl	bb052 <_ZNK6String6equalsEPKc>
   b7d38:	b928      	cbnz	r0, b7d46 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
   b7d3a:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b7d3c:	495f      	ldr	r1, [pc, #380]	; (b7ebc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
   b7d3e:	4620      	mov	r0, r4
   b7d40:	f7ff ff7c 	bl	b7c3c <_ZN10HttpClient10sendHeaderEPKci>
   b7d44:	e006      	b.n	b7d54 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b7d46:	495e      	ldr	r1, [pc, #376]	; (b7ec0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
   b7d48:	4648      	mov	r0, r9
   b7d4a:	f004 ff85 	bl	bcc58 <strcmp>
   b7d4e:	4602      	mov	r2, r0
   b7d50:	2800      	cmp	r0, #0
   b7d52:	d0f3      	beq.n	b7d3c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
   b7d54:	f1b8 0f00 	cmp.w	r8, #0
   b7d58:	d00e      	beq.n	b7d78 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
   b7d5a:	f8d8 1000 	ldr.w	r1, [r8]
   b7d5e:	b159      	cbz	r1, b7d78 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
   b7d60:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
   b7d64:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b7d66:	b122      	cbz	r2, b7d72 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
   b7d68:	f7ff ff56 	bl	b7c18 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b7d6c:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
   b7d70:	e7f3      	b.n	b7d5a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
   b7d72:	f002 ffec 	bl	bad4e <_ZN5Print7printlnEPKc>
}
   b7d76:	e7f9      	b.n	b7d6c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
   b7d78:	4620      	mov	r0, r4
   b7d7a:	f002 ffdc 	bl	bad36 <_ZN5Print7printlnEv>
    client.flush();
   b7d7e:	4620      	mov	r0, r4
   b7d80:	f003 fa02 	bl	bb188 <_ZN9TCPClient5flushEv>
   b7d84:	2100      	movs	r1, #0
   b7d86:	4650      	mov	r0, sl
   b7d88:	f003 f963 	bl	bb052 <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b7d8c:	b918      	cbnz	r0, b7d96 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
   b7d8e:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b7d90:	4620      	mov	r0, r4
   b7d92:	f002 ffdc 	bl	bad4e <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b7d96:	f104 0a1c 	add.w	sl, r4, #28
   b7d9a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
   b7d9e:	2100      	movs	r1, #0
   b7da0:	4650      	mov	r0, sl
   b7da2:	f004 ff23 	bl	bcbec <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7da6:	f001 f9b3 	bl	b9110 <HAL_Timer_Get_Milli_Seconds>
   b7daa:	9001      	str	r0, [sp, #4]
   b7dac:	f001 f9b0 	bl	b9110 <HAL_Timer_Get_Milli_Seconds>
    bool error = false;
   b7db0:	f04f 0800 	mov.w	r8, #0
    unsigned int bufferPosition = 0;
   b7db4:	4646      	mov	r6, r8
    } while (client.connected() && !timeout && !error);
   b7db6:	f241 3b88 	movw	fp, #5000	; 0x1388
        while (client.available()) {
   b7dba:	4620      	mov	r0, r4
   b7dbc:	f003 fbe0 	bl	bb580 <_ZN9TCPClient9availableEv>
   b7dc0:	b1e8      	cbz	r0, b7dfe <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x186>
            char c = client.read();
   b7dc2:	4620      	mov	r0, r4
   b7dc4:	f003 f9c6 	bl	bb154 <_ZN9TCPClient4readEv>
   b7dc8:	4681      	mov	r9, r0
   b7dca:	f001 f9a1 	bl	b9110 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b7dce:	f242 73fe 	movw	r3, #10238	; 0x27fe
   b7dd2:	429e      	cmp	r6, r3
   b7dd4:	9001      	str	r0, [sp, #4]
   b7dd6:	d804      	bhi.n	b7de2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = c;
   b7dd8:	19a3      	adds	r3, r4, r6
            char c = client.read();
   b7dda:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
   b7dde:	3601      	adds	r6, #1
        while (client.available()) {
   b7de0:	e7eb      	b.n	b7dba <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b7de2:	f242 73ff 	movw	r3, #10239	; 0x27ff
   b7de6:	429e      	cmp	r6, r3
   b7de8:	d1f9      	bne.n	b7dde <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b7dea:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
   b7dee:	2200      	movs	r2, #0
   b7df0:	f883 281b 	strb.w	r2, [r3, #2075]	; 0x81b
                client.stop();
   b7df4:	4620      	mov	r0, r4
   b7df6:	f003 fc1d 	bl	bb634 <_ZN9TCPClient4stopEv>
                error = true;
   b7dfa:	46a8      	mov	r8, r5
   b7dfc:	e7ef      	b.n	b7dde <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b7dfe:	19a3      	adds	r3, r4, r6
   b7e00:	7718      	strb	r0, [r3, #28]
   b7e02:	f001 f985 	bl	b9110 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b7e06:	9b01      	ldr	r3, [sp, #4]
   b7e08:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b7e0c:	f1b8 0f00 	cmp.w	r8, #0
   b7e10:	d104      	bne.n	b7e1c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
   b7e12:	45d9      	cmp	r9, fp
   b7e14:	d802      	bhi.n	b7e1c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
            delay(200);
   b7e16:	20c8      	movs	r0, #200	; 0xc8
   b7e18:	f001 fba6 	bl	b9568 <delay>
    } while (client.connected() && !timeout && !error);
   b7e1c:	4620      	mov	r0, r4
   b7e1e:	f003 fad1 	bl	bb3c4 <_ZN9TCPClient9connectedEv>
   b7e22:	b120      	cbz	r0, b7e2e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b7e24:	45d9      	cmp	r9, fp
   b7e26:	d802      	bhi.n	b7e2e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b7e28:	f1b8 0f00 	cmp.w	r8, #0
   b7e2c:	d0c5      	beq.n	b7dba <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
    client.stop();
   b7e2e:	4620      	mov	r0, r4
   b7e30:	f003 fc00 	bl	bb634 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b7e34:	4651      	mov	r1, sl
   b7e36:	a802      	add	r0, sp, #8
   b7e38:	f003 f833 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b7e3c:	230c      	movs	r3, #12
   b7e3e:	2209      	movs	r2, #9
   b7e40:	a902      	add	r1, sp, #8
   b7e42:	a806      	add	r0, sp, #24
   b7e44:	f003 f92a 	bl	bb09c <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b7e48:	491e      	ldr	r1, [pc, #120]	; (b7ec4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x24c>)
   b7e4a:	a80a      	add	r0, sp, #40	; 0x28
   b7e4c:	f003 f829 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
   b7e50:	a90a      	add	r1, sp, #40	; 0x28
   b7e52:	a802      	add	r0, sp, #8
   b7e54:	f003 f91e 	bl	bb094 <_ZNK6String7indexOfERKS_>
   b7e58:	4604      	mov	r4, r0
   b7e5a:	a80a      	add	r0, sp, #40	; 0x28
   b7e5c:	f002 ffd6 	bl	bae0c <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b7e60:	1c63      	adds	r3, r4, #1
   b7e62:	d108      	bne.n	b7e76 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fe>
    String statusCode = raw_response.substring(9,12);
   b7e64:	a806      	add	r0, sp, #24
   b7e66:	f002 ffd1 	bl	bae0c <_ZN6StringD1Ev>
    String raw_response(buffer);
   b7e6a:	a802      	add	r0, sp, #8
   b7e6c:	f002 ffce 	bl	bae0c <_ZN6StringD1Ev>
}
   b7e70:	b011      	add	sp, #68	; 0x44
   b7e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aResponse.body = "";
   b7e76:	1d3d      	adds	r5, r7, #4
   b7e78:	4913      	ldr	r1, [pc, #76]	; (b7ec8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x250>)
   b7e7a:	4628      	mov	r0, r5
   b7e7c:	f003 f859 	bl	baf32 <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b7e80:	1d22      	adds	r2, r4, #4
   b7e82:	a902      	add	r1, sp, #8
   b7e84:	a80a      	add	r0, sp, #40	; 0x28
   b7e86:	f003 f929 	bl	bb0dc <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b7e8a:	a90a      	add	r1, sp, #40	; 0x28
   b7e8c:	4628      	mov	r0, r5
   b7e8e:	f003 f88c 	bl	bafaa <_ZN6String6concatERKS_>
   b7e92:	a80a      	add	r0, sp, #40	; 0x28
   b7e94:	f002 ffba 	bl	bae0c <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b7e98:	9806      	ldr	r0, [sp, #24]
   b7e9a:	f004 fe6b 	bl	bcb74 <atoi>
   b7e9e:	6038      	str	r0, [r7, #0]
   b7ea0:	e7e0      	b.n	b7e64 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ec>
   b7ea2:	bf00      	nop
   b7ea4:	000bf52c 	.word	0x000bf52c
   b7ea8:	000bf050 	.word	0x000bf050
   b7eac:	000bf260 	.word	0x000bf260
   b7eb0:	000bf272 	.word	0x000bf272
   b7eb4:	000bf26c 	.word	0x000bf26c
   b7eb8:	000bf27d 	.word	0x000bf27d
   b7ebc:	000bf282 	.word	0x000bf282
   b7ec0:	000bf291 	.word	0x000bf291
   b7ec4:	000bf296 	.word	0x000bf296
   b7ec8:	000bf29a 	.word	0x000bf29a

000b7ecc <_ZN13JsonReferenceD1Ev>:
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
}
   b7ecc:	4770      	bx	lr

000b7ece <_ZN13JsonReferenceD0Ev>:
JsonReference::~JsonReference() {
   b7ece:	b510      	push	{r4, lr}
}
   b7ed0:	210c      	movs	r1, #12
JsonReference::~JsonReference() {
   b7ed2:	4604      	mov	r4, r0
}
   b7ed4:	f7fc f8e7 	bl	b40a6 <_ZdlPvj>
   b7ed8:	4620      	mov	r0, r4
   b7eda:	bd10      	pop	{r4, pc}

000b7edc <_ZN10JsonBufferD1Ev>:
JsonBuffer::~JsonBuffer() {
   b7edc:	b510      	push	{r4, lr}
   b7ede:	4b05      	ldr	r3, [pc, #20]	; (b7ef4 <_ZN10JsonBufferD1Ev+0x18>)
   b7ee0:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b7ee2:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b7ee4:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b7ee6:	b91b      	cbnz	r3, b7ef0 <_ZN10JsonBufferD1Ev+0x14>
   b7ee8:	6840      	ldr	r0, [r0, #4]
   b7eea:	b108      	cbz	r0, b7ef0 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b7eec:	f001 faf4 	bl	b94d8 <free>
}
   b7ef0:	4620      	mov	r0, r4
   b7ef2:	bd10      	pop	{r4, pc}
   b7ef4:	000bf2a8 	.word	0x000bf2a8

000b7ef8 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b7ef8:	b510      	push	{r4, lr}
   b7efa:	4604      	mov	r4, r0
}
   b7efc:	f7ff ffee 	bl	b7edc <_ZN10JsonBufferD1Ev>
   b7f00:	4620      	mov	r0, r4
   b7f02:	2114      	movs	r1, #20
   b7f04:	f7fc f8cf 	bl	b40a6 <_ZdlPvj>
   b7f08:	4620      	mov	r0, r4
   b7f0a:	bd10      	pop	{r4, pc}

000b7f0c <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b7f0c:	b510      	push	{r4, lr}
   b7f0e:	4b07      	ldr	r3, [pc, #28]	; (b7f2c <_ZN10JsonParserD1Ev+0x20>)
   b7f10:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b7f12:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b7f14:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b7f16:	b91b      	cbnz	r3, b7f20 <_ZN10JsonParserD1Ev+0x14>
   b7f18:	6940      	ldr	r0, [r0, #20]
   b7f1a:	b108      	cbz	r0, b7f20 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b7f1c:	f001 fadc 	bl	b94d8 <free>
JsonParser::~JsonParser() {
   b7f20:	4620      	mov	r0, r4
   b7f22:	f7ff ffdb 	bl	b7edc <_ZN10JsonBufferD1Ev>
}
   b7f26:	4620      	mov	r0, r4
   b7f28:	bd10      	pop	{r4, pc}
   b7f2a:	bf00      	nop
   b7f2c:	000bf2b8 	.word	0x000bf2b8

000b7f30 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b7f30:	b510      	push	{r4, lr}
   b7f32:	4604      	mov	r4, r0
}
   b7f34:	f7ff ffea 	bl	b7f0c <_ZN10JsonParserD1Ev>
   b7f38:	4620      	mov	r0, r4
   b7f3a:	212c      	movs	r1, #44	; 0x2c
   b7f3c:	f7fc f8b3 	bl	b40a6 <_ZdlPvj>
   b7f40:	4620      	mov	r0, r4
   b7f42:	bd10      	pop	{r4, pc}

000b7f44 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b7f44:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b7f46:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b7f48:	4604      	mov	r4, r0
   b7f4a:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b7f4c:	b10b      	cbz	r3, b7f52 <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b7f4e:	2000      	movs	r0, #0
}
   b7f50:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b7f52:	6840      	ldr	r0, [r0, #4]
   b7f54:	b138      	cbz	r0, b7f66 <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b7f56:	f001 fac7 	bl	b94e8 <realloc>
		if (newBuffer) {
   b7f5a:	2800      	cmp	r0, #0
   b7f5c:	d0f7      	beq.n	b7f4e <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b7f5e:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b7f62:	2001      	movs	r0, #1
   b7f64:	e7f4      	b.n	b7f50 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b7f66:	4608      	mov	r0, r1
   b7f68:	f001 faae 	bl	b94c8 <malloc>
   b7f6c:	e7f5      	b.n	b7f5a <_ZN10JsonBuffer8allocateEj+0x16>

000b7f6e <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7f6e:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7f70:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7f72:	460e      	mov	r6, r1
   b7f74:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7f76:	18d1      	adds	r1, r2, r3
   b7f78:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7f7a:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7f7c:	b172      	cbz	r2, b7f9c <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b7f7e:	6882      	ldr	r2, [r0, #8]
   b7f80:	428a      	cmp	r2, r1
   b7f82:	d30b      	bcc.n	b7f9c <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b7f84:	6860      	ldr	r0, [r4, #4]
   b7f86:	68e3      	ldr	r3, [r4, #12]
   b7f88:	462a      	mov	r2, r5
   b7f8a:	4631      	mov	r1, r6
   b7f8c:	4418      	add	r0, r3
   b7f8e:	f004 fe05 	bl	bcb9c <memcpy>
	offset += dataLen;
   b7f92:	68e2      	ldr	r2, [r4, #12]
   b7f94:	442a      	add	r2, r5
   b7f96:	60e2      	str	r2, [r4, #12]
	return true;
   b7f98:	2001      	movs	r0, #1
}
   b7f9a:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b7f9c:	4620      	mov	r0, r4
   b7f9e:	f7ff ffd1 	bl	b7f44 <_ZN10JsonBuffer8allocateEj>
   b7fa2:	2800      	cmp	r0, #0
   b7fa4:	d1ee      	bne.n	b7f84 <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b7fa6:	e7f8      	b.n	b7f9a <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b7fa8 <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b7fa8:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b7faa:	2100      	movs	r1, #0
   b7fac:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b7fae:	b123      	cbz	r3, b7fba <_ZN10JsonBuffer5clearEv+0x12>
   b7fb0:	6882      	ldr	r2, [r0, #8]
   b7fb2:	b112      	cbz	r2, b7fba <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b7fb4:	4618      	mov	r0, r3
   b7fb6:	f004 be19 	b.w	bcbec <memset>
}
   b7fba:	4770      	bx	lr

000b7fbc <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b7fbc:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b7fbe:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b7fc2:	2200      	movs	r2, #0
   b7fc4:	60c2      	str	r2, [r0, #12]
   b7fc6:	2201      	movs	r2, #1
   b7fc8:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b7fca:	6143      	str	r3, [r0, #20]
   b7fcc:	4a02      	ldr	r2, [pc, #8]	; (b7fd8 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b7fce:	9b02      	ldr	r3, [sp, #8]
   b7fd0:	6002      	str	r2, [r0, #0]
   b7fd2:	61c3      	str	r3, [r0, #28]
}
   b7fd4:	bd10      	pop	{r4, pc}
   b7fd6:	bf00      	nop
   b7fd8:	000bf2b8 	.word	0x000bf2b8

000b7fdc <_ZNK10JsonParser12getReferenceEv>:
	if (tokens < tokensEnd) {
   b7fdc:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   b7fe0:	429a      	cmp	r2, r3
   b7fe2:	4b04      	ldr	r3, [pc, #16]	; (b7ff4 <_ZNK10JsonParser12getReferenceEv+0x18>)

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b7fe4:	bf38      	it	cc
   b7fe6:	6082      	strcc	r2, [r0, #8]
   b7fe8:	e9c0 3100 	strd	r3, r1, [r0]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b7fec:	bf24      	itt	cs
   b7fee:	2300      	movcs	r3, #0
   b7ff0:	6083      	strcs	r3, [r0, #8]
}
   b7ff2:	4770      	bx	lr
   b7ff4:	000bf2c8 	.word	0x000bf2c8

000b7ff8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b7ff8:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b7ffa:	6813      	ldr	r3, [r2, #0]
   b7ffc:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b7ffe:	6813      	ldr	r3, [r2, #0]
   b8000:	f103 0410 	add.w	r4, r3, #16
   b8004:	6014      	str	r4, [r2, #0]
   b8006:	6986      	ldr	r6, [r0, #24]
   b8008:	42b4      	cmp	r4, r6
   b800a:	d20a      	bcs.n	b8022 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b800c:	699b      	ldr	r3, [r3, #24]
   b800e:	688c      	ldr	r4, [r1, #8]
   b8010:	42a3      	cmp	r3, r4
   b8012:	da01      	bge.n	b8018 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b8014:	42ab      	cmp	r3, r5
   b8016:	ddf2      	ble.n	b7ffe <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b8018:	42a3      	cmp	r3, r4
   b801a:	bfcc      	ite	gt
   b801c:	2000      	movgt	r0, #0
   b801e:	2001      	movle	r0, #1
   b8020:	e000      	b.n	b8024 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b8022:	2000      	movs	r0, #0
}
   b8024:	bd70      	pop	{r4, r5, r6, pc}

000b8026 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b8026:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b802a:	9d08      	ldr	r5, [sp, #32]
   b802c:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b802e:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b8032:	4604      	mov	r4, r0
   b8034:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b8036:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b8038:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b803a:	9801      	ldr	r0, [sp, #4]
   b803c:	69a3      	ldr	r3, [r4, #24]
   b803e:	4283      	cmp	r3, r0
   b8040:	d91a      	bls.n	b8078 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b8042:	6882      	ldr	r2, [r0, #8]
   b8044:	688b      	ldr	r3, [r1, #8]
   b8046:	429a      	cmp	r2, r3
   b8048:	da16      	bge.n	b8078 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b804a:	42ae      	cmp	r6, r5
   b804c:	d10b      	bne.n	b8066 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b804e:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b8050:	aa01      	add	r2, sp, #4
   b8052:	4620      	mov	r0, r4
   b8054:	f7ff ffd0 	bl	b7ff8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b8058:	b128      	cbz	r0, b8066 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b805a:	9b01      	ldr	r3, [sp, #4]
   b805c:	f8c8 3000 	str.w	r3, [r8]
}
   b8060:	b002      	add	sp, #8
   b8062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b8066:	aa01      	add	r2, sp, #4
   b8068:	4620      	mov	r0, r4
   b806a:	f7ff ffc5 	bl	b7ff8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b806e:	4620      	mov	r0, r4
		index++;
   b8070:	3601      	adds	r6, #1
		skipObject(container, token);
   b8072:	f7ff ffc1 	bl	b7ff8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b8076:	e7e0      	b.n	b803a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b8078:	2000      	movs	r0, #0
   b807a:	e7f1      	b.n	b8060 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b807c <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>:
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b807c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b807e:	461f      	mov	r7, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b8080:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b8084:	4604      	mov	r4, r0
   b8086:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b8088:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b808a:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b808c:	9b01      	ldr	r3, [sp, #4]
   b808e:	69a2      	ldr	r2, [r4, #24]
   b8090:	429a      	cmp	r2, r3
   b8092:	d90f      	bls.n	b80b4 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
   b8094:	6898      	ldr	r0, [r3, #8]
   b8096:	688a      	ldr	r2, [r1, #8]
   b8098:	4290      	cmp	r0, r2
   b809a:	da0b      	bge.n	b80b4 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
		if (desiredIndex == index) {
   b809c:	42b5      	cmp	r5, r6
   b809e:	d103      	bne.n	b80a8 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x2c>
			value = token;
   b80a0:	603b      	str	r3, [r7, #0]
			return true;
   b80a2:	2001      	movs	r0, #1
}
   b80a4:	b003      	add	sp, #12
   b80a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		skipObject(container, token);
   b80a8:	aa01      	add	r2, sp, #4
   b80aa:	4620      	mov	r0, r4
		index++;
   b80ac:	3501      	adds	r5, #1
		skipObject(container, token);
   b80ae:	f7ff ffa3 	bl	b7ff8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b80b2:	e7eb      	b.n	b808c <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x10>
	return false;
   b80b4:	2000      	movs	r0, #0
   b80b6:	e7f5      	b.n	b80a4 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x28>

000b80b8 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
   b80b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b80ba:	3b01      	subs	r3, #1
   b80bc:	2400      	movs	r4, #0
   b80be:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
   b80c2:	1bf6      	subs	r6, r6, r7
   b80c4:	42a6      	cmp	r6, r4
   b80c6:	dd08      	ble.n	b80da <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
   b80c8:	42a3      	cmp	r3, r4
   b80ca:	dd06      	ble.n	b80da <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
   b80cc:	6845      	ldr	r5, [r0, #4]
   b80ce:	443d      	add	r5, r7
   b80d0:	5d2d      	ldrb	r5, [r5, r4]
   b80d2:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b80d6:	3401      	adds	r4, #1
   b80d8:	e7f1      	b.n	b80be <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
   b80da:	2300      	movs	r3, #0
   b80dc:	7013      	strb	r3, [r2, #0]
}
   b80de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b80e0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
   b80e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b80e2:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b80e4:	2310      	movs	r3, #16
   b80e6:	466a      	mov	r2, sp
   b80e8:	f7ff ffe6 	bl	b80b8 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
   b80ec:	4904      	ldr	r1, [pc, #16]	; (b8100 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
   b80ee:	4622      	mov	r2, r4
   b80f0:	4668      	mov	r0, sp
   b80f2:	f001 fa01 	bl	b94f8 <sscanf>
}
   b80f6:	1e43      	subs	r3, r0, #1
   b80f8:	4258      	negs	r0, r3
   b80fa:	4158      	adcs	r0, r3
   b80fc:	b004      	add	sp, #16
   b80fe:	bd10      	pop	{r4, pc}
   b8100:	000bf58c 	.word	0x000bf58c

000b8104 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, float &result) const {
   b8104:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b8106:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b8108:	2310      	movs	r3, #16
   b810a:	466a      	mov	r2, sp
   b810c:	f7ff ffd4 	bl	b80b8 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	result = strtof(tmp, 0);
   b8110:	4668      	mov	r0, sp
   b8112:	2100      	movs	r1, #0
   b8114:	f005 fc12 	bl	bd93c <strtof>
}
   b8118:	2001      	movs	r0, #1
	result = strtof(tmp, 0);
   b811a:	ed84 0a00 	vstr	s0, [r4]
}
   b811e:	b004      	add	sp, #16
   b8120:	bd10      	pop	{r4, pc}
	...

000b8124 <_ZNK13JsonReference5indexEj>:
	else {
		return JsonReference(parser);
	}
}

JsonReference JsonReference::index(size_t index) const {
   b8124:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8126:	460d      	mov	r5, r1
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b8128:	6889      	ldr	r1, [r1, #8]
   b812a:	4e0a      	ldr	r6, [pc, #40]	; (b8154 <_ZNK13JsonReference5indexEj+0x30>)
JsonReference JsonReference::index(size_t index) const {
   b812c:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b812e:	b161      	cbz	r1, b814a <_ZNK13JsonReference5indexEj+0x26>
   b8130:	6868      	ldr	r0, [r5, #4]
   b8132:	ab01      	add	r3, sp, #4
   b8134:	f7ff ffa2 	bl	b807c <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>
   b8138:	b138      	cbz	r0, b814a <_ZNK13JsonReference5indexEj+0x26>
		return JsonReference(parser, newToken);
   b813a:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b813c:	e9c4 6300 	strd	r6, r3, [r4]
   b8140:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b8142:	60a3      	str	r3, [r4, #8]
	}
	else {
		return JsonReference(parser);
	}
}
   b8144:	4620      	mov	r0, r4
   b8146:	b002      	add	sp, #8
   b8148:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b814a:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b814c:	e9c4 6300 	strd	r6, r3, [r4]
   b8150:	2300      	movs	r3, #0
   b8152:	e7f6      	b.n	b8142 <_ZNK13JsonReference5indexEj+0x1e>
   b8154:	000bf2c8 	.word	0x000bf2c8

000b8158 <_ZNK13JsonReference8valueIntEi>:
bool JsonReference::valueBool(bool result) const {
	(void) value(result);
	return result;
}

int JsonReference::valueInt(int result) const {
   b8158:	b507      	push	{r0, r1, r2, lr}
   b815a:	9101      	str	r1, [sp, #4]
	 * There are also type-specific versions like valueBool that return the value, instead of having to pass an object
	 * to hold the value, as in this call.
	 */
	template<class T>
	bool value(T &result) const {
		if (token && parser->getTokenValue(token, result)) {
   b815c:	6881      	ldr	r1, [r0, #8]
   b815e:	b119      	cbz	r1, b8168 <_ZNK13JsonReference8valueIntEi+0x10>
   b8160:	6840      	ldr	r0, [r0, #4]
   b8162:	aa01      	add	r2, sp, #4
   b8164:	f7ff ffbc 	bl	b80e0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
	(void) value(result);
	return result;
}
   b8168:	9801      	ldr	r0, [sp, #4]
   b816a:	b003      	add	sp, #12
   b816c:	f85d fb04 	ldr.w	pc, [sp], #4

000b8170 <_ZNK13JsonReference10valueFloatEf>:
unsigned long JsonReference::valueUnsignedLong(unsigned long result) const {
	(void) value(result);
	return result;
}

float JsonReference::valueFloat(float result) const {
   b8170:	b507      	push	{r0, r1, r2, lr}
   b8172:	6881      	ldr	r1, [r0, #8]
   b8174:	ed8d 0a01 	vstr	s0, [sp, #4]
   b8178:	b119      	cbz	r1, b8182 <_ZNK13JsonReference10valueFloatEf+0x12>
   b817a:	6840      	ldr	r0, [r0, #4]
   b817c:	aa01      	add	r2, sp, #4
   b817e:	f7ff ffc1 	bl	b8104 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>
	(void) value(result);
	return result;
}
   b8182:	ed9d 0a01 	vldr	s0, [sp, #4]
   b8186:	b003      	add	sp, #12
   b8188:	f85d fb04 	ldr.w	pc, [sp], #4

000b818c <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   b818c:	b510      	push	{r4, lr}
   b818e:	4604      	mov	r4, r0
	if (str) {
   b8190:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b8192:	460b      	mov	r3, r1
	if (str) {
   b8194:	b128      	cbz	r0, b81a2 <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b8196:	f002 ff0c 	bl	bafb2 <_ZN6String6concatEc>
	}
	else {
		if (buf && length < (bufLen - 1)) {
			buf[length] = ch;
		}
		length++;
   b819a:	68e3      	ldr	r3, [r4, #12]
   b819c:	3301      	adds	r3, #1
   b819e:	60e3      	str	r3, [r4, #12]
	}
}
   b81a0:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b81a2:	6860      	ldr	r0, [r4, #4]
   b81a4:	2800      	cmp	r0, #0
   b81a6:	d0f8      	beq.n	b819a <_ZN16JsonParserString6appendEc+0xe>
   b81a8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b81ac:	3a01      	subs	r2, #1
   b81ae:	428a      	cmp	r2, r1
			buf[length] = ch;
   b81b0:	bf88      	it	hi
   b81b2:	5443      	strbhi	r3, [r0, r1]
   b81b4:	e7f1      	b.n	b819a <_ZN16JsonParserString6appendEc+0xe>

000b81b6 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b81b6:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b81b8:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b81ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b81bc:	4608      	mov	r0, r1
		str.append((char)unicode);
   b81be:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b81c0:	d804      	bhi.n	b81cc <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b81c2:	b003      	add	sp, #12
   b81c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b81c8:	f7ff bfe0 	b.w	b818c <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b81cc:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b81d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b81d4:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b81d8:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b81dc:	d207      	bcs.n	b81ee <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b81de:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b81e2:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b81e4:	f7ff ffd2 	bl	b818c <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b81e8:	9801      	ldr	r0, [sp, #4]
   b81ea:	4621      	mov	r1, r4
   b81ec:	e7e9      	b.n	b81c2 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b81ee:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b81f0:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b81f4:	9001      	str	r0, [sp, #4]
   b81f6:	f7ff ffc9 	bl	b818c <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b81fa:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b81fe:	9801      	ldr	r0, [sp, #4]
   b8200:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b8204:	e7ee      	b.n	b81e4 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>
	...

000b8208 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b8208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b820c:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b820e:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b8210:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b82e0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b8214:	4680      	mov	r8, r0
   b8216:	460f      	mov	r7, r1
   b8218:	4615      	mov	r5, r2
			escape = false;
   b821a:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b821c:	68b8      	ldr	r0, [r7, #8]
   b821e:	42b0      	cmp	r0, r6
   b8220:	dd5a      	ble.n	b82d8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b8222:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b8226:	5d99      	ldrb	r1, [r3, r6]
   b8228:	199a      	adds	r2, r3, r6
		if (escape) {
   b822a:	2c00      	cmp	r4, #0
   b822c:	d04b      	beq.n	b82c6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b822e:	2975      	cmp	r1, #117	; 0x75
   b8230:	d805      	bhi.n	b823e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b8232:	296d      	cmp	r1, #109	; 0x6d
   b8234:	d807      	bhi.n	b8246 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b8236:	2962      	cmp	r1, #98	; 0x62
   b8238:	d01e      	beq.n	b8278 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b823a:	2966      	cmp	r1, #102	; 0x66
   b823c:	d01e      	beq.n	b827c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b823e:	4628      	mov	r0, r5
   b8240:	f7ff ffa4 	bl	b818c <_ZN16JsonParserString6appendEc>
				break;
   b8244:	e03d      	b.n	b82c2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b8246:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b824a:	2c07      	cmp	r4, #7
   b824c:	d8f7      	bhi.n	b823e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b824e:	f20f 0c08 	addw	ip, pc, #8
   b8252:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b8256:	bf00      	nop
   b8258:	000b8281 	.word	0x000b8281
   b825c:	000b823f 	.word	0x000b823f
   b8260:	000b823f 	.word	0x000b823f
   b8264:	000b823f 	.word	0x000b823f
   b8268:	000b8285 	.word	0x000b8285
   b826c:	000b823f 	.word	0x000b823f
   b8270:	000b8289 	.word	0x000b8289
   b8274:	000b828d 	.word	0x000b828d
				str.append('\b');
   b8278:	2108      	movs	r1, #8
   b827a:	e7e0      	b.n	b823e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b827c:	210c      	movs	r1, #12
   b827e:	e7de      	b.n	b823e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b8280:	210a      	movs	r1, #10
   b8282:	e7dc      	b.n	b823e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b8284:	210d      	movs	r1, #13
   b8286:	e7da      	b.n	b823e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b8288:	2109      	movs	r1, #9
   b828a:	e7d8      	b.n	b823e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b828c:	1d31      	adds	r1, r6, #4
   b828e:	4288      	cmp	r0, r1
   b8290:	dd17      	ble.n	b82c2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b8292:	a902      	add	r1, sp, #8
   b8294:	3304      	adds	r3, #4
   b8296:	4433      	add	r3, r6
   b8298:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b829a:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b829e:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b82a2:	429a      	cmp	r2, r3
   b82a4:	d1f9      	bne.n	b829a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b82a6:	aa01      	add	r2, sp, #4
   b82a8:	4651      	mov	r1, sl
					tmp[4] = 0;
   b82aa:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b82ae:	f001 f923 	bl	b94f8 <sscanf>
   b82b2:	2801      	cmp	r0, #1
   b82b4:	d105      	bne.n	b82c2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b82b6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b82ba:	4629      	mov	r1, r5
   b82bc:	f7ff ff7b 	bl	b81b6 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b82c0:	3605      	adds	r6, #5
			escape = false;
   b82c2:	2400      	movs	r4, #0
   b82c4:	e004      	b.n	b82d0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b82c6:	295c      	cmp	r1, #92	; 0x5c
   b82c8:	d004      	beq.n	b82d4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b82ca:	4628      	mov	r0, r5
   b82cc:	f7ff ff5e 	bl	b818c <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b82d0:	3601      	adds	r6, #1
   b82d2:	e7a3      	b.n	b821c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b82d4:	2401      	movs	r4, #1
   b82d6:	e7fb      	b.n	b82d0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b82d8:	2001      	movs	r0, #1
   b82da:	b004      	add	sp, #16
   b82dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b82e0:	000bf29b 	.word	0x000bf29b

000b82e4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b82e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b82e6:	460c      	mov	r4, r1
   b82e8:	4606      	mov	r6, r0
	result = "";
   b82ea:	490c      	ldr	r1, [pc, #48]	; (b831c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b82ec:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b82ee:	4615      	mov	r5, r2
	result = "";
   b82f0:	f002 fe1f 	bl	baf32 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b82f4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b82f8:	1ac9      	subs	r1, r1, r3
   b82fa:	3101      	adds	r1, #1
   b82fc:	4628      	mov	r0, r5
   b82fe:	f002 fda3 	bl	bae48 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b8302:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b8304:	466a      	mov	r2, sp
   b8306:	4621      	mov	r1, r4
   b8308:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b830a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b830e:	9500      	str	r5, [sp, #0]
   b8310:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b8312:	f7ff ff79 	bl	b8208 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b8316:	b004      	add	sp, #16
   b8318:	bd70      	pop	{r4, r5, r6, pc}
   b831a:	bf00      	nop
   b831c:	000bf29a 	.word	0x000bf29a

000b8320 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b8320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8324:	b089      	sub	sp, #36	; 0x24
   b8326:	4605      	mov	r5, r0
   b8328:	4688      	mov	r8, r1
	String keyName;
   b832a:	a804      	add	r0, sp, #16
   b832c:	4912      	ldr	r1, [pc, #72]	; (b8378 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b832e:	4616      	mov	r6, r2
   b8330:	4699      	mov	r9, r3
	String keyName;
   b8332:	f002 fdb6 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b8336:	2700      	movs	r7, #0
   b8338:	9700      	str	r7, [sp, #0]
   b833a:	464b      	mov	r3, r9
   b833c:	aa03      	add	r2, sp, #12
   b833e:	4641      	mov	r1, r8
   b8340:	4628      	mov	r0, r5
   b8342:	f7ff fe70 	bl	b8026 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b8346:	4604      	mov	r4, r0
   b8348:	b170      	cbz	r0, b8368 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b834a:	9903      	ldr	r1, [sp, #12]
   b834c:	aa04      	add	r2, sp, #16
   b834e:	4628      	mov	r0, r5
   b8350:	f7ff ffc8 	bl	b82e4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b8354:	4604      	mov	r4, r0
   b8356:	b908      	cbnz	r0, b835c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b8358:	3701      	adds	r7, #1
   b835a:	e7ed      	b.n	b8338 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b835c:	4631      	mov	r1, r6
   b835e:	a804      	add	r0, sp, #16
   b8360:	f002 fe77 	bl	bb052 <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b8364:	2800      	cmp	r0, #0
   b8366:	d0f7      	beq.n	b8358 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b8368:	a804      	add	r0, sp, #16
   b836a:	f002 fd4f 	bl	bae0c <_ZN6StringD1Ev>
}
   b836e:	4620      	mov	r0, r4
   b8370:	b009      	add	sp, #36	; 0x24
   b8372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8376:	bf00      	nop
   b8378:	000bf29a 	.word	0x000bf29a

000b837c <_ZNK13JsonReference3keyEPKc>:
JsonReference JsonReference::key(const char *name) const {
   b837c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b837e:	460d      	mov	r5, r1
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b8380:	6889      	ldr	r1, [r1, #8]
   b8382:	4e0a      	ldr	r6, [pc, #40]	; (b83ac <_ZNK13JsonReference3keyEPKc+0x30>)
JsonReference JsonReference::key(const char *name) const {
   b8384:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b8386:	b161      	cbz	r1, b83a2 <_ZNK13JsonReference3keyEPKc+0x26>
   b8388:	6868      	ldr	r0, [r5, #4]
   b838a:	ab01      	add	r3, sp, #4
   b838c:	f7ff ffc8 	bl	b8320 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b8390:	b138      	cbz	r0, b83a2 <_ZNK13JsonReference3keyEPKc+0x26>
		return JsonReference(parser, newToken);
   b8392:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b8394:	e9c4 6300 	strd	r6, r3, [r4]
   b8398:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b839a:	60a3      	str	r3, [r4, #8]
}
   b839c:	4620      	mov	r0, r4
   b839e:	b002      	add	sp, #8
   b83a0:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b83a2:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b83a4:	e9c4 6300 	strd	r6, r3, [r4]
   b83a8:	2300      	movs	r3, #0
   b83aa:	e7f6      	b.n	b839a <_ZNK13JsonReference3keyEPKc+0x1e>
   b83ac:	000bf2c8 	.word	0x000bf2c8

000b83b0 <_ZNK13JsonReference11valueStringEv>:
String JsonReference::valueString() const {
   b83b0:	b538      	push	{r3, r4, r5, lr}
   b83b2:	460d      	mov	r5, r1
	String result;
   b83b4:	4905      	ldr	r1, [pc, #20]	; (b83cc <_ZNK13JsonReference11valueStringEv+0x1c>)
String JsonReference::valueString() const {
   b83b6:	4604      	mov	r4, r0
	String result;
   b83b8:	f002 fd73 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
   b83bc:	68a9      	ldr	r1, [r5, #8]
   b83be:	b119      	cbz	r1, b83c8 <_ZNK13JsonReference11valueStringEv+0x18>
   b83c0:	6868      	ldr	r0, [r5, #4]
   b83c2:	4622      	mov	r2, r4
   b83c4:	f7ff ff8e 	bl	b82e4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
}
   b83c8:	4620      	mov	r0, r4
   b83ca:	bd38      	pop	{r3, r4, r5, pc}
   b83cc:	000bf29a 	.word	0x000bf29a

000b83d0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b83d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b83d4:	6844      	ldr	r4, [r0, #4]
   b83d6:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b83da:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b83de:	f8d0 e000 	ldr.w	lr, [r0]
   b83e2:	4596      	cmp	lr, r2
   b83e4:	f080 81b9 	bcs.w	b875a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b83e8:	f811 800e 	ldrb.w	r8, [r1, lr]
   b83ec:	f1b8 0f00 	cmp.w	r8, #0
   b83f0:	f000 81b3 	beq.w	b875a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b83f4:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b83f8:	f000 8098 	beq.w	b852c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b83fc:	d833      	bhi.n	b8466 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b83fe:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b8402:	f000 80a6 	beq.w	b8552 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b8406:	d810      	bhi.n	b842a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b8408:	f1a8 0809 	sub.w	r8, r8, #9
   b840c:	fa5f f888 	uxtb.w	r8, r8
   b8410:	f1b8 0f17 	cmp.w	r8, #23
   b8414:	d80d      	bhi.n	b8432 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b8416:	4d9f      	ldr	r5, [pc, #636]	; (b8694 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b8418:	fa0c f808 	lsl.w	r8, ip, r8
   b841c:	ea18 0f05 	tst.w	r8, r5
   b8420:	d007      	beq.n	b8432 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b8422:	6805      	ldr	r5, [r0, #0]
   b8424:	3501      	adds	r5, #1
   b8426:	6005      	str	r5, [r0, #0]
   b8428:	e7d9      	b.n	b83de <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b842a:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b842e:	f000 8133 	beq.w	b8698 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b8432:	f8d0 8000 	ldr.w	r8, [r0]
   b8436:	4542      	cmp	r2, r8
   b8438:	d90e      	bls.n	b8458 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b843a:	f811 5008 	ldrb.w	r5, [r1, r8]
   b843e:	b15d      	cbz	r5, b8458 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b8440:	2d3a      	cmp	r5, #58	; 0x3a
   b8442:	f200 8169 	bhi.w	b8718 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b8446:	2d1f      	cmp	r5, #31
   b8448:	f200 8151 	bhi.w	b86ee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b844c:	2d0a      	cmp	r5, #10
   b844e:	f200 8160 	bhi.w	b8712 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b8452:	2d08      	cmp	r5, #8
   b8454:	f240 8156 	bls.w	b8704 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b8458:	2b00      	cmp	r3, #0
   b845a:	f040 8162 	bne.w	b8722 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b845e:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b8462:	6005      	str	r5, [r0, #0]
   b8464:	e0a5      	b.n	b85b2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b8466:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b846a:	d037      	beq.n	b84dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b846c:	d82e      	bhi.n	b84cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b846e:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b8472:	d033      	beq.n	b84dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b8474:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b8478:	d1db      	bne.n	b8432 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b847a:	2b00      	cmp	r3, #0
   b847c:	d0d1      	beq.n	b8422 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b847e:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b8482:	6845      	ldr	r5, [r0, #4]
   b8484:	3d01      	subs	r5, #1
   b8486:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b848a:	2d00      	cmp	r5, #0
   b848c:	db55      	blt.n	b853a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b848e:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b8492:	3701      	adds	r7, #1
   b8494:	d04d      	beq.n	b8532 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b8496:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b849a:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b849e:	d148      	bne.n	b8532 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b84a0:	f898 b000 	ldrb.w	fp, [r8]
   b84a4:	45cb      	cmp	fp, r9
   b84a6:	d14b      	bne.n	b8540 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b84a8:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b84ac:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b84b0:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b84b4:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b84b8:	f8de 7004 	ldr.w	r7, [lr, #4]
   b84bc:	3701      	adds	r7, #1
   b84be:	d042      	beq.n	b8546 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b84c0:	f8de 7008 	ldr.w	r7, [lr, #8]
   b84c4:	3701      	adds	r7, #1
   b84c6:	d13e      	bne.n	b8546 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b84c8:	6085      	str	r5, [r0, #8]
				break;
   b84ca:	e7aa      	b.n	b8422 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b84cc:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b84d0:	d1af      	bne.n	b8432 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b84d2:	2b00      	cmp	r3, #0
   b84d4:	d0a5      	beq.n	b8422 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b84d6:	f04f 0901 	mov.w	r9, #1
   b84da:	e7d2      	b.n	b8482 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b84dc:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b84de:	2b00      	cmp	r3, #0
   b84e0:	d09f      	beq.n	b8422 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b84e2:	6845      	ldr	r5, [r0, #4]
   b84e4:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b84e6:	42af      	cmp	r7, r5
   b84e8:	d94a      	bls.n	b8580 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b84ea:	f105 0e01 	add.w	lr, r5, #1
   b84ee:	f8c0 e004 	str.w	lr, [r0, #4]
   b84f2:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b84f6:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b84fa:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b84fe:	2500      	movs	r5, #0
   b8500:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b8504:	6885      	ldr	r5, [r0, #8]
   b8506:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b8508:	bf1f      	itttt	ne
   b850a:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b850e:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b8512:	3501      	addne	r5, #1
   b8514:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b8518:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b851c:	bf0c      	ite	eq
   b851e:	2501      	moveq	r5, #1
   b8520:	2502      	movne	r5, #2
   b8522:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b8526:	6805      	ldr	r5, [r0, #0]
   b8528:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b852c:	6845      	ldr	r5, [r0, #4]
   b852e:	3d01      	subs	r5, #1
   b8530:	e7ca      	b.n	b84c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b8532:	3d01      	subs	r5, #1
   b8534:	f1a8 0810 	sub.w	r8, r8, #16
   b8538:	e7a7      	b.n	b848a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b853a:	3501      	adds	r5, #1
   b853c:	f47f af71 	bne.w	b8422 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b8540:	f06f 0401 	mvn.w	r4, #1
   b8544:	e01e      	b.n	b8584 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b8546:	3d01      	subs	r5, #1
   b8548:	1c6f      	adds	r7, r5, #1
   b854a:	f1ae 0e10 	sub.w	lr, lr, #16
   b854e:	d1b3      	bne.n	b84b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b8550:	e767      	b.n	b8422 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b8552:	f10e 0901 	add.w	r9, lr, #1
   b8556:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b855a:	f8d0 8000 	ldr.w	r8, [r0]
   b855e:	4542      	cmp	r2, r8
   b8560:	f240 8093 	bls.w	b868a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b8564:	f811 5008 	ldrb.w	r5, [r1, r8]
   b8568:	2d00      	cmp	r5, #0
   b856a:	f000 808e 	beq.w	b868a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b856e:	2d22      	cmp	r5, #34	; 0x22
   b8570:	d130      	bne.n	b85d4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b8572:	b1f3      	cbz	r3, b85b2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b8574:	6845      	ldr	r5, [r0, #4]
   b8576:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b8578:	42af      	cmp	r7, r5
   b857a:	d806      	bhi.n	b858a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b857c:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b8580:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b8584:	4620      	mov	r0, r4
   b8586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b858a:	f105 0e01 	add.w	lr, r5, #1
   b858e:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b8592:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b8596:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b859a:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b859e:	2700      	movs	r7, #0
   b85a0:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b85a2:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b85a6:	f04f 0a03 	mov.w	sl, #3
   b85aa:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b85ae:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b85b2:	6885      	ldr	r5, [r0, #8]
   b85b4:	1c6f      	adds	r7, r5, #1
				count++;
   b85b6:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b85ba:	f43f af32 	beq.w	b8422 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b85be:	2b00      	cmp	r3, #0
   b85c0:	f43f af2f 	beq.w	b8422 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b85c4:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b85c8:	f8de 500c 	ldr.w	r5, [lr, #12]
   b85cc:	3501      	adds	r5, #1
   b85ce:	f8ce 500c 	str.w	r5, [lr, #12]
   b85d2:	e726      	b.n	b8422 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b85d4:	2d5c      	cmp	r5, #92	; 0x5c
   b85d6:	d111      	bne.n	b85fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b85d8:	f108 0501 	add.w	r5, r8, #1
   b85dc:	42aa      	cmp	r2, r5
   b85de:	d90d      	bls.n	b85fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b85e0:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b85e2:	5d4d      	ldrb	r5, [r1, r5]
   b85e4:	2d75      	cmp	r5, #117	; 0x75
   b85e6:	d82b      	bhi.n	b8640 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b85e8:	2d6d      	cmp	r5, #109	; 0x6d
   b85ea:	d80b      	bhi.n	b8604 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b85ec:	2d66      	cmp	r5, #102	; 0x66
   b85ee:	d827      	bhi.n	b8640 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b85f0:	2d5b      	cmp	r5, #91	; 0x5b
   b85f2:	d81d      	bhi.n	b8630 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b85f4:	2d22      	cmp	r5, #34	; 0x22
   b85f6:	d001      	beq.n	b85fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b85f8:	2d2f      	cmp	r5, #47	; 0x2f
   b85fa:	d121      	bne.n	b8640 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b85fc:	6805      	ldr	r5, [r0, #0]
   b85fe:	3501      	adds	r5, #1
   b8600:	6005      	str	r5, [r0, #0]
   b8602:	e7aa      	b.n	b855a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b8604:	3d6e      	subs	r5, #110	; 0x6e
   b8606:	2d07      	cmp	r5, #7
   b8608:	d81a      	bhi.n	b8640 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b860a:	a701      	add	r7, pc, #4	; (adr r7, b8610 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b860c:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b8610:	000b85fd 	.word	0x000b85fd
   b8614:	000b8641 	.word	0x000b8641
   b8618:	000b8641 	.word	0x000b8641
   b861c:	000b8641 	.word	0x000b8641
   b8620:	000b85fd 	.word	0x000b85fd
   b8624:	000b8641 	.word	0x000b8641
   b8628:	000b85fd 	.word	0x000b85fd
   b862c:	000b8647 	.word	0x000b8647
   b8630:	3d5c      	subs	r5, #92	; 0x5c
   b8632:	b2ed      	uxtb	r5, r5
   b8634:	fa0c f505 	lsl.w	r5, ip, r5
   b8638:	f240 4741 	movw	r7, #1089	; 0x441
   b863c:	423d      	tst	r5, r7
   b863e:	d1dd      	bne.n	b85fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b8640:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b8644:	e77c      	b.n	b8540 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b8646:	f108 0502 	add.w	r5, r8, #2
   b864a:	6005      	str	r5, [r0, #0]
   b864c:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b8650:	f8d0 8000 	ldr.w	r8, [r0]
   b8654:	4542      	cmp	r2, r8
   b8656:	d803      	bhi.n	b8660 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b8658:	6805      	ldr	r5, [r0, #0]
   b865a:	3d01      	subs	r5, #1
   b865c:	6005      	str	r5, [r0, #0]
					break;
   b865e:	e7cd      	b.n	b85fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b8660:	f811 5008 	ldrb.w	r5, [r1, r8]
   b8664:	2d00      	cmp	r5, #0
   b8666:	d0f7      	beq.n	b8658 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b8668:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b866c:	f1bb 0f09 	cmp.w	fp, #9
   b8670:	d904      	bls.n	b867c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b8672:	f025 0520 	bic.w	r5, r5, #32
   b8676:	3d41      	subs	r5, #65	; 0x41
   b8678:	2d05      	cmp	r5, #5
   b867a:	d8e1      	bhi.n	b8640 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b867c:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b8680:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b8684:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b8686:	d1e3      	bne.n	b8650 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b8688:	e7e6      	b.n	b8658 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b868a:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b868e:	f06f 0402 	mvn.w	r4, #2
   b8692:	e777      	b.n	b8584 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b8694:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b8698:	2b00      	cmp	r3, #0
   b869a:	f43f aec2 	beq.w	b8422 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b869e:	6885      	ldr	r5, [r0, #8]
   b86a0:	1c6f      	adds	r7, r5, #1
   b86a2:	f43f aebe 	beq.w	b8422 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b86a6:	012d      	lsls	r5, r5, #4
   b86a8:	5d5d      	ldrb	r5, [r3, r5]
   b86aa:	3d01      	subs	r5, #1
   b86ac:	2d01      	cmp	r5, #1
   b86ae:	f67f aeb8 	bls.w	b8422 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b86b2:	6845      	ldr	r5, [r0, #4]
   b86b4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b86b8:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b86bc:	f1b8 0f00 	cmp.w	r8, #0
   b86c0:	f6ff aeaf 	blt.w	b8422 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b86c4:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b86c8:	3d01      	subs	r5, #1
   b86ca:	2d01      	cmp	r5, #1
   b86cc:	d80a      	bhi.n	b86e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b86ce:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b86d2:	3501      	adds	r5, #1
   b86d4:	d006      	beq.n	b86e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b86d6:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b86da:	3501      	adds	r5, #1
   b86dc:	d102      	bne.n	b86e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b86de:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b86e2:	e69e      	b.n	b8422 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b86e4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b86e8:	f1ae 0e10 	sub.w	lr, lr, #16
   b86ec:	e7e6      	b.n	b86bc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b86ee:	f1a5 0920 	sub.w	r9, r5, #32
   b86f2:	4f24      	ldr	r7, [pc, #144]	; (b8784 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b86f4:	fa5f f989 	uxtb.w	r9, r9
   b86f8:	fa0c f909 	lsl.w	r9, ip, r9
   b86fc:	ea19 0f07 	tst.w	r9, r7
   b8700:	f47f aeaa 	bne.w	b8458 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b8704:	3d20      	subs	r5, #32
   b8706:	2d5e      	cmp	r5, #94	; 0x5e
   b8708:	d89a      	bhi.n	b8640 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b870a:	f108 0501 	add.w	r5, r8, #1
   b870e:	6005      	str	r5, [r0, #0]
   b8710:	e68f      	b.n	b8432 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b8712:	2d0d      	cmp	r5, #13
   b8714:	d1f6      	bne.n	b8704 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b8716:	e69f      	b.n	b8458 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b8718:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b871c:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b8720:	e7f8      	b.n	b8714 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b8722:	6845      	ldr	r5, [r0, #4]
   b8724:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b8726:	42af      	cmp	r7, r5
   b8728:	f67f af28 	bls.w	b857c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b872c:	f105 0801 	add.w	r8, r5, #1
   b8730:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b8734:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b8738:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b873c:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b8740:	2700      	movs	r7, #0
   b8742:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b8744:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b8748:	f04f 0a04 	mov.w	sl, #4
   b874c:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b8750:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b8754:	6805      	ldr	r5, [r0, #0]
   b8756:	3d01      	subs	r5, #1
   b8758:	e683      	b.n	b8462 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b875a:	2b00      	cmp	r3, #0
   b875c:	f43f af12 	beq.w	b8584 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b8760:	6842      	ldr	r2, [r0, #4]
   b8762:	1e51      	subs	r1, r2, #1
   b8764:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b8768:	2900      	cmp	r1, #0
   b876a:	f6ff af0b 	blt.w	b8584 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b876e:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b8772:	3201      	adds	r2, #1
   b8774:	d003      	beq.n	b877e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b8776:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b877a:	3201      	adds	r2, #1
   b877c:	d087      	beq.n	b868e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b877e:	3901      	subs	r1, #1
   b8780:	3b10      	subs	r3, #16
   b8782:	e7f1      	b.n	b8768 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b8784:	04001001 	.word	0x04001001

000b8788 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b8788:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b878a:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b878c:	4604      	mov	r4, r0
	if (offset == 0) {
   b878e:	b912      	cbnz	r2, b8796 <_ZN10JsonParser5parseEv+0xe>
		return false;
   b8790:	2000      	movs	r0, #0
}
   b8792:	b003      	add	sp, #12
   b8794:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b8796:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b8798:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b879c:	b1ab      	cbz	r3, b87ca <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b879e:	2100      	movs	r1, #0
	parser->toknext = 0;
   b87a0:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b87a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b87a8:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b87aa:	69c1      	ldr	r1, [r0, #28]
   b87ac:	9100      	str	r1, [sp, #0]
   b87ae:	6841      	ldr	r1, [r0, #4]
   b87b0:	4630      	mov	r0, r6
   b87b2:	f7ff fe0d 	bl	b83d0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b87b6:	1c43      	adds	r3, r0, #1
   b87b8:	d128      	bne.n	b880c <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b87ba:	7c25      	ldrb	r5, [r4, #16]
   b87bc:	2d00      	cmp	r5, #0
   b87be:	d1e7      	bne.n	b8790 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b87c0:	6960      	ldr	r0, [r4, #20]
   b87c2:	f000 fe89 	bl	b94d8 <free>
			tokens = 0;
   b87c6:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b87c8:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b87ca:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b87cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b87d0:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b87d4:	68e2      	ldr	r2, [r4, #12]
   b87d6:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b87d8:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b87da:	9500      	str	r5, [sp, #0]
   b87dc:	462b      	mov	r3, r5
   b87de:	4630      	mov	r0, r6
   b87e0:	f7ff fdf6 	bl	b83d0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b87e4:	2800      	cmp	r0, #0
   b87e6:	dbd3      	blt.n	b8790 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b87e8:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b87ea:	d017      	beq.n	b881c <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b87ec:	0100      	lsls	r0, r0, #4
   b87ee:	f000 fe6b 	bl	b94c8 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b87f2:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b87f4:	6160      	str	r0, [r4, #20]
   b87f6:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b87f8:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b87fa:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b87fe:	68e2      	ldr	r2, [r4, #12]
   b8800:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b8802:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b8804:	4630      	mov	r0, r6
   b8806:	f7ff fde3 	bl	b83d0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b880a:	e001      	b.n	b8810 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b880c:	2800      	cmp	r0, #0
   b880e:	dbbf      	blt.n	b8790 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b8810:	6963      	ldr	r3, [r4, #20]
   b8812:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b8816:	61a0      	str	r0, [r4, #24]
	return true;
   b8818:	2001      	movs	r0, #1
   b881a:	e7ba      	b.n	b8792 <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b881c:	6963      	ldr	r3, [r4, #20]
   b881e:	61a3      	str	r3, [r4, #24]
   b8820:	e7fa      	b.n	b8818 <_ZN10JsonParser5parseEv+0x90>

000b8822 <_ZN7TwoWire5writeEi.isra.0>:
  inline size_t write(int n) { return write((uint8_t)n); }
   b8822:	6803      	ldr	r3, [r0, #0]
   b8824:	b2c9      	uxtb	r1, r1
   b8826:	689b      	ldr	r3, [r3, #8]
   b8828:	4718      	bx	r3

000b882a <_ZN16Adafruit_VL6180XC1Ev>:
/*! 
    @brief  Instantiates a new VL6180X class
*/
/**************************************************************************/
Adafruit_VL6180X::Adafruit_VL6180X(void) {
}
   b882a:	4770      	bx	lr

000b882c <_ZN16Adafruit_VL6180X5read8Et>:
/**************************************************************************/


// Read 1 byte from the VL6180X at 'address'
uint8_t Adafruit_VL6180X::read8(uint16_t address)
{
   b882c:	b538      	push	{r3, r4, r5, lr}
   b882e:	4604      	mov	r4, r0
   b8830:	460d      	mov	r5, r1
  uint8_t data;

  Wire.beginTransmission(_i2caddr);
   b8832:	f003 f965 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b8836:	7921      	ldrb	r1, [r4, #4]
   b8838:	f002 f8f8 	bl	baa2c <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(address>>8);
   b883c:	f003 f960 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b8840:	0a29      	lsrs	r1, r5, #8
   b8842:	f7ff ffee 	bl	b8822 <_ZN7TwoWire5writeEi.isra.0>
  Wire.write(address);
   b8846:	f003 f95b 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b884a:	4629      	mov	r1, r5
   b884c:	f7ff ffe9 	bl	b8822 <_ZN7TwoWire5writeEi.isra.0>
  Wire.endTransmission();
   b8850:	f003 f956 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b8854:	f002 f8f5 	bl	baa42 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(_i2caddr, (uint8_t)1);
   b8858:	f003 f952 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b885c:	7921      	ldrb	r1, [r4, #4]
   b885e:	2201      	movs	r2, #1
   b8860:	f002 f8e1 	bl	baa26 <_ZN7TwoWire11requestFromEhj>
  uint8_t r = Wire.read();
   b8864:	f003 f94c 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b8868:	6803      	ldr	r3, [r0, #0]
   b886a:	695b      	ldr	r3, [r3, #20]
   b886c:	4798      	blx	r3
#if defined(I2C_DEBUG)
  Serial.print("\t$"); Serial.print(address, HEX); Serial.print(": 0x"); Serial.println(r, HEX);
#endif

  return r;
}
   b886e:	b2c0      	uxtb	r0, r0
   b8870:	bd38      	pop	{r3, r4, r5, pc}

000b8872 <_ZN16Adafruit_VL6180X6write8Eth>:
  return data;
}

// write 1 byte
void Adafruit_VL6180X::write8(uint16_t address, uint8_t data)
{
   b8872:	b570      	push	{r4, r5, r6, lr}
   b8874:	4606      	mov	r6, r0
   b8876:	4615      	mov	r5, r2
   b8878:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   b887a:	f003 f941 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b887e:	7931      	ldrb	r1, [r6, #4]
   b8880:	f002 f8d4 	bl	baa2c <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(address>>8);
   b8884:	f003 f93c 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b8888:	0a21      	lsrs	r1, r4, #8
   b888a:	f7ff ffca 	bl	b8822 <_ZN7TwoWire5writeEi.isra.0>
  Wire.write(address);
   b888e:	f003 f937 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b8892:	4621      	mov	r1, r4
   b8894:	f7ff ffc5 	bl	b8822 <_ZN7TwoWire5writeEi.isra.0>
  Wire.write(data);  
   b8898:	f003 f932 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b889c:	6803      	ldr	r3, [r0, #0]
   b889e:	4629      	mov	r1, r5
   b88a0:	689b      	ldr	r3, [r3, #8]
   b88a2:	4798      	blx	r3
  Wire.endTransmission();
   b88a4:	f003 f92c 	bl	bbb00 <_Z19__fetch_global_Wirev>

#if defined(I2C_DEBUG)
  Serial.print("\t$"); Serial.print(address, HEX); Serial.print(" = 0x"); Serial.println(data, HEX);
#endif
}
   b88a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Wire.endTransmission();
   b88ac:	f002 b8c9 	b.w	baa42 <_ZN7TwoWire15endTransmissionEv>

000b88b0 <_ZN16Adafruit_VL6180X12loadSettingsEv>:
void Adafruit_VL6180X::loadSettings(void) {
   b88b0:	b510      	push	{r4, lr}
    write8(0x0207, 0x01);
   b88b2:	2201      	movs	r2, #1
void Adafruit_VL6180X::loadSettings(void) {
   b88b4:	4604      	mov	r4, r0
    write8(0x0207, 0x01);
   b88b6:	f240 2107 	movw	r1, #519	; 0x207
   b88ba:	f7ff ffda 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0208, 0x01);
   b88be:	4620      	mov	r0, r4
   b88c0:	2201      	movs	r2, #1
   b88c2:	f44f 7102 	mov.w	r1, #520	; 0x208
   b88c6:	f7ff ffd4 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0096, 0x00);
   b88ca:	4620      	mov	r0, r4
   b88cc:	2200      	movs	r2, #0
   b88ce:	2196      	movs	r1, #150	; 0x96
   b88d0:	f7ff ffcf 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0097, 0xfd);
   b88d4:	4620      	mov	r0, r4
   b88d6:	22fd      	movs	r2, #253	; 0xfd
   b88d8:	2197      	movs	r1, #151	; 0x97
   b88da:	f7ff ffca 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00e3, 0x00);
   b88de:	4620      	mov	r0, r4
   b88e0:	2200      	movs	r2, #0
   b88e2:	21e3      	movs	r1, #227	; 0xe3
   b88e4:	f7ff ffc5 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00e4, 0x04);
   b88e8:	4620      	mov	r0, r4
   b88ea:	2204      	movs	r2, #4
   b88ec:	21e4      	movs	r1, #228	; 0xe4
   b88ee:	f7ff ffc0 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00e5, 0x02);
   b88f2:	4620      	mov	r0, r4
   b88f4:	2202      	movs	r2, #2
   b88f6:	21e5      	movs	r1, #229	; 0xe5
   b88f8:	f7ff ffbb 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00e6, 0x01);
   b88fc:	4620      	mov	r0, r4
   b88fe:	2201      	movs	r2, #1
   b8900:	21e6      	movs	r1, #230	; 0xe6
   b8902:	f7ff ffb6 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00e7, 0x03);
   b8906:	4620      	mov	r0, r4
   b8908:	2203      	movs	r2, #3
   b890a:	21e7      	movs	r1, #231	; 0xe7
   b890c:	f7ff ffb1 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00f5, 0x02);
   b8910:	4620      	mov	r0, r4
   b8912:	2202      	movs	r2, #2
   b8914:	21f5      	movs	r1, #245	; 0xf5
   b8916:	f7ff ffac 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00d9, 0x05);
   b891a:	4620      	mov	r0, r4
   b891c:	2205      	movs	r2, #5
   b891e:	21d9      	movs	r1, #217	; 0xd9
   b8920:	f7ff ffa7 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00db, 0xce);
   b8924:	4620      	mov	r0, r4
   b8926:	22ce      	movs	r2, #206	; 0xce
   b8928:	21db      	movs	r1, #219	; 0xdb
   b892a:	f7ff ffa2 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00dc, 0x03);
   b892e:	4620      	mov	r0, r4
   b8930:	2203      	movs	r2, #3
   b8932:	21dc      	movs	r1, #220	; 0xdc
   b8934:	f7ff ff9d 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00dd, 0xf8);
   b8938:	4620      	mov	r0, r4
   b893a:	22f8      	movs	r2, #248	; 0xf8
   b893c:	21dd      	movs	r1, #221	; 0xdd
   b893e:	f7ff ff98 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x009f, 0x00);
   b8942:	4620      	mov	r0, r4
   b8944:	2200      	movs	r2, #0
   b8946:	219f      	movs	r1, #159	; 0x9f
   b8948:	f7ff ff93 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00a3, 0x3c);
   b894c:	4620      	mov	r0, r4
   b894e:	223c      	movs	r2, #60	; 0x3c
   b8950:	21a3      	movs	r1, #163	; 0xa3
   b8952:	f7ff ff8e 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00b7, 0x00);
   b8956:	4620      	mov	r0, r4
   b8958:	2200      	movs	r2, #0
   b895a:	21b7      	movs	r1, #183	; 0xb7
   b895c:	f7ff ff89 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00bb, 0x3c);
   b8960:	4620      	mov	r0, r4
   b8962:	223c      	movs	r2, #60	; 0x3c
   b8964:	21bb      	movs	r1, #187	; 0xbb
   b8966:	f7ff ff84 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00b2, 0x09);
   b896a:	4620      	mov	r0, r4
   b896c:	2209      	movs	r2, #9
   b896e:	21b2      	movs	r1, #178	; 0xb2
   b8970:	f7ff ff7f 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00ca, 0x09);
   b8974:	4620      	mov	r0, r4
   b8976:	2209      	movs	r2, #9
   b8978:	21ca      	movs	r1, #202	; 0xca
   b897a:	f7ff ff7a 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0198, 0x01);
   b897e:	4620      	mov	r0, r4
   b8980:	2201      	movs	r2, #1
   b8982:	f44f 71cc 	mov.w	r1, #408	; 0x198
   b8986:	f7ff ff74 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x01b0, 0x17);
   b898a:	4620      	mov	r0, r4
   b898c:	2217      	movs	r2, #23
   b898e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
   b8992:	f7ff ff6e 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x01ad, 0x00);
   b8996:	4620      	mov	r0, r4
   b8998:	2200      	movs	r2, #0
   b899a:	f240 11ad 	movw	r1, #429	; 0x1ad
   b899e:	f7ff ff68 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00ff, 0x05);
   b89a2:	4620      	mov	r0, r4
   b89a4:	2205      	movs	r2, #5
   b89a6:	21ff      	movs	r1, #255	; 0xff
   b89a8:	f7ff ff63 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0100, 0x05);
   b89ac:	4620      	mov	r0, r4
   b89ae:	2205      	movs	r2, #5
   b89b0:	f44f 7180 	mov.w	r1, #256	; 0x100
   b89b4:	f7ff ff5d 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0199, 0x05);
   b89b8:	4620      	mov	r0, r4
   b89ba:	2205      	movs	r2, #5
   b89bc:	f240 1199 	movw	r1, #409	; 0x199
   b89c0:	f7ff ff57 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x01a6, 0x1b);
   b89c4:	4620      	mov	r0, r4
   b89c6:	221b      	movs	r2, #27
   b89c8:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   b89cc:	f7ff ff51 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x01ac, 0x3e);
   b89d0:	4620      	mov	r0, r4
   b89d2:	223e      	movs	r2, #62	; 0x3e
   b89d4:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   b89d8:	f7ff ff4b 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x01a7, 0x1f);
   b89dc:	4620      	mov	r0, r4
   b89de:	221f      	movs	r2, #31
   b89e0:	f240 11a7 	movw	r1, #423	; 0x1a7
   b89e4:	f7ff ff45 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0030, 0x00);
   b89e8:	4620      	mov	r0, r4
   b89ea:	2200      	movs	r2, #0
   b89ec:	2130      	movs	r1, #48	; 0x30
   b89ee:	f7ff ff40 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0011, 0x10);       // Enables polling for 'New Sample ready'
   b89f2:	4620      	mov	r0, r4
   b89f4:	2210      	movs	r2, #16
   b89f6:	2111      	movs	r1, #17
   b89f8:	f7ff ff3b 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x010a, 0x30);       // Set the averaging sample period
   b89fc:	4620      	mov	r0, r4
   b89fe:	2230      	movs	r2, #48	; 0x30
   b8a00:	f44f 7185 	mov.w	r1, #266	; 0x10a
   b8a04:	f7ff ff35 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x003f, 0x46);       // Sets the light and dark gain (upper
   b8a08:	4620      	mov	r0, r4
   b8a0a:	2246      	movs	r2, #70	; 0x46
   b8a0c:	213f      	movs	r1, #63	; 0x3f
   b8a0e:	f7ff ff30 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0031, 0xFF);       // sets the # of range measurements after
   b8a12:	4620      	mov	r0, r4
   b8a14:	22ff      	movs	r2, #255	; 0xff
   b8a16:	2131      	movs	r1, #49	; 0x31
   b8a18:	f7ff ff2b 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0040, 0x63);       // Set ALS integration time to 100ms
   b8a1c:	4620      	mov	r0, r4
   b8a1e:	2263      	movs	r2, #99	; 0x63
   b8a20:	2140      	movs	r1, #64	; 0x40
   b8a22:	f7ff ff26 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x002e, 0x01);       // perform a single temperature calibration
   b8a26:	4620      	mov	r0, r4
   b8a28:	2201      	movs	r2, #1
   b8a2a:	212e      	movs	r1, #46	; 0x2e
   b8a2c:	f7ff ff21 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x001b, 0x09);       // Set default ranging inter-measurement
   b8a30:	4620      	mov	r0, r4
   b8a32:	2209      	movs	r2, #9
   b8a34:	211b      	movs	r1, #27
   b8a36:	f7ff ff1c 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x003e, 0x31);       // Set default ALS inter-measurement period
   b8a3a:	4620      	mov	r0, r4
   b8a3c:	2231      	movs	r2, #49	; 0x31
   b8a3e:	213e      	movs	r1, #62	; 0x3e
   b8a40:	f7ff ff17 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0014, 0x24);       // Configures interrupt on 'New Sample
   b8a44:	4620      	mov	r0, r4
   b8a46:	2224      	movs	r2, #36	; 0x24
}
   b8a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write8(0x0014, 0x24);       // Configures interrupt on 'New Sample
   b8a4c:	2114      	movs	r1, #20
   b8a4e:	f7ff bf10 	b.w	b8872 <_ZN16Adafruit_VL6180X6write8Eth>

000b8a52 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>:
  _i2caddr = VL6180X_DEFAULT_I2C_ADDR;
   b8a52:	2329      	movs	r3, #41	; 0x29
boolean Adafruit_VL6180X::begin(TwoWire *theWire) {
   b8a54:	b510      	push	{r4, lr}
   b8a56:	4604      	mov	r4, r0
  _i2caddr = VL6180X_DEFAULT_I2C_ADDR;
   b8a58:	7103      	strb	r3, [r0, #4]
  if (! theWire) {
   b8a5a:	b9a9      	cbnz	r1, b8a88 <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x36>
    _i2c = &Wire;
   b8a5c:	f003 f850 	bl	bbb00 <_Z19__fetch_global_Wirev>
   b8a60:	6020      	str	r0, [r4, #0]
  _i2c-> begin();
   b8a62:	6820      	ldr	r0, [r4, #0]
   b8a64:	f001 ffb0 	bl	ba9c8 <_ZN7TwoWire5beginEv>
  if (read8(VL6180X_REG_IDENTIFICATION_MODEL_ID) != 0xB4) {
   b8a68:	2100      	movs	r1, #0
   b8a6a:	4620      	mov	r0, r4
   b8a6c:	f7ff fede 	bl	b882c <_ZN16Adafruit_VL6180X5read8Et>
   b8a70:	28b4      	cmp	r0, #180	; 0xb4
   b8a72:	d10b      	bne.n	b8a8c <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x3a>
    loadSettings();
   b8a74:	4620      	mov	r0, r4
   b8a76:	f7ff ff1b 	bl	b88b0 <_ZN16Adafruit_VL6180X12loadSettingsEv>
  write8(VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET, 0x00);
   b8a7a:	4620      	mov	r0, r4
   b8a7c:	2200      	movs	r2, #0
   b8a7e:	2116      	movs	r1, #22
   b8a80:	f7ff fef7 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
   b8a84:	2001      	movs	r0, #1
}
   b8a86:	bd10      	pop	{r4, pc}
    _i2c = theWire;
   b8a88:	6001      	str	r1, [r0, #0]
   b8a8a:	e7ea      	b.n	b8a62 <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x10>
    return false;
   b8a8c:	2000      	movs	r0, #0
   b8a8e:	e7fa      	b.n	b8a86 <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x34>

000b8a90 <_ZN16Adafruit_VL6180X9readRangeEv>:
uint8_t Adafruit_VL6180X::readRange(void) {
   b8a90:	b538      	push	{r3, r4, r5, lr}
   b8a92:	4604      	mov	r4, r0
  while (! (read8(VL6180X_REG_RESULT_RANGE_STATUS) & 0x01));
   b8a94:	214d      	movs	r1, #77	; 0x4d
   b8a96:	4620      	mov	r0, r4
   b8a98:	f7ff fec8 	bl	b882c <_ZN16Adafruit_VL6180X5read8Et>
   b8a9c:	07c2      	lsls	r2, r0, #31
   b8a9e:	d5f9      	bpl.n	b8a94 <_ZN16Adafruit_VL6180X9readRangeEv+0x4>
  write8(VL6180X_REG_SYSRANGE_START, 0x01);
   b8aa0:	2201      	movs	r2, #1
   b8aa2:	2118      	movs	r1, #24
   b8aa4:	4620      	mov	r0, r4
   b8aa6:	f7ff fee4 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
  while (! (read8(VL6180X_REG_RESULT_INTERRUPT_STATUS_GPIO) & 0x04));
   b8aaa:	214f      	movs	r1, #79	; 0x4f
   b8aac:	4620      	mov	r0, r4
   b8aae:	f7ff febd 	bl	b882c <_ZN16Adafruit_VL6180X5read8Et>
   b8ab2:	0743      	lsls	r3, r0, #29
   b8ab4:	d5f9      	bpl.n	b8aaa <_ZN16Adafruit_VL6180X9readRangeEv+0x1a>
  uint8_t range = read8(VL6180X_REG_RESULT_RANGE_VAL);
   b8ab6:	2162      	movs	r1, #98	; 0x62
   b8ab8:	4620      	mov	r0, r4
   b8aba:	f7ff feb7 	bl	b882c <_ZN16Adafruit_VL6180X5read8Et>
  write8(VL6180X_REG_SYSTEM_INTERRUPT_CLEAR, 0x07);
   b8abe:	2207      	movs	r2, #7
  uint8_t range = read8(VL6180X_REG_RESULT_RANGE_VAL);
   b8ac0:	4605      	mov	r5, r0
  write8(VL6180X_REG_SYSTEM_INTERRUPT_CLEAR, 0x07);
   b8ac2:	2115      	movs	r1, #21
   b8ac4:	4620      	mov	r0, r4
   b8ac6:	f7ff fed4 	bl	b8872 <_ZN16Adafruit_VL6180X6write8Eth>
}
   b8aca:	4628      	mov	r0, r5
   b8acc:	bd38      	pop	{r3, r4, r5, pc}

000b8ace <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b8ace:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b8ad2:	b510      	push	{r4, lr}
   b8ad4:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b8ad6:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b8ad8:	b113      	cbz	r3, b8ae0 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b8ada:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b8adc:	f000 fae0 	bl	b90a0 <os_mutex_lock>
#endif
#endif
#endif
        }
   b8ae0:	4620      	mov	r0, r4
   b8ae2:	bd10      	pop	{r4, pc}

000b8ae4 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b8ae4:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b8ae6:	6803      	ldr	r3, [r0, #0]
   b8ae8:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b8aec:	4604      	mov	r4, r0
            if (mqtt->thread)
   b8aee:	b112      	cbz	r2, b8af6 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b8af0:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b8af2:	f000 fadd 	bl	b90b0 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b8af6:	4620      	mov	r0, r4
   b8af8:	bd10      	pop	{r4, pc}

000b8afa <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b8afa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8afc:	461f      	mov	r7, r3
   b8afe:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b8b02:	4604      	mov	r4, r0
   b8b04:	460d      	mov	r5, r1
   b8b06:	4616      	mov	r6, r2
    if (thread) {
   b8b08:	b12b      	cbz	r3, b8b16 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b8b0a:	2301      	movs	r3, #1
   b8b0c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b8b10:	3058      	adds	r0, #88	; 0x58
   b8b12:	f000 fabd 	bl	b9090 <os_mutex_create>
    }
    this->callback = callback;
   b8b16:	9b08      	ldr	r3, [sp, #32]
   b8b18:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b8b1a:	2300      	movs	r3, #0
   b8b1c:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b8b1e:	b106      	cbz	r6, b8b22 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b8b20:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b8b22:	b125      	cbz	r5, b8b2e <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b8b24:	4629      	mov	r1, r5
   b8b26:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b8b2a:	f002 fa02 	bl	baf32 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b8b2e:	9b06      	ldr	r3, [sp, #24]
   b8b30:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b8b32:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b8b34:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b8b36:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b8b3a:	2bff      	cmp	r3, #255	; 0xff
   b8b3c:	bfb8      	it	lt
   b8b3e:	23ff      	movlt	r3, #255	; 0xff
   b8b40:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b8b44:	b108      	cbz	r0, b8b4a <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b8b46:	f7fb faac 	bl	b40a2 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b8b4a:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b8b4e:	f7fb faa4 	bl	b409a <_Znaj>
   b8b52:	61e0      	str	r0, [r4, #28]
}
   b8b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b8b58 <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b8b58:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b8b5c:	4604      	mov	r4, r0
            bool thread) {
   b8b5e:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b8b60:	4617      	mov	r7, r2
   b8b62:	4698      	mov	r8, r3
   b8b64:	460e      	mov	r6, r1
            bool thread) {
   b8b66:	f002 fdaf 	bl	bb6c8 <_ZN9TCPClientC1Ev>
   b8b6a:	490d      	ldr	r1, [pc, #52]	; (b8ba0 <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b8b6c:	61e5      	str	r5, [r4, #28]
   b8b6e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b8b72:	f002 f996 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b8b76:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b8b7a:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b8b7c:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b8b80:	22ff      	movs	r2, #255	; 0xff
   b8b82:	230f      	movs	r3, #15
   b8b84:	e9cd 3200 	strd	r3, r2, [sp]
   b8b88:	4620      	mov	r0, r4
            bool thread) {
   b8b8a:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b8b8e:	463b      	mov	r3, r7
   b8b90:	462a      	mov	r2, r5
   b8b92:	4631      	mov	r1, r6
   b8b94:	f7ff ffb1 	bl	b8afa <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b8b98:	4620      	mov	r0, r4
   b8b9a:	b004      	add	sp, #16
   b8b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8ba0:	000bf29a 	.word	0x000bf29a

000b8ba4 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b8ba4:	b510      	push	{r4, lr}
   b8ba6:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b8ba8:	4620      	mov	r0, r4
   b8baa:	f002 fce9 	bl	bb580 <_ZN9TCPClient9availableEv>
   b8bae:	2800      	cmp	r0, #0
   b8bb0:	d0fa      	beq.n	b8ba8 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b8bb2:	4620      	mov	r0, r4
   b8bb4:	f002 face 	bl	bb154 <_ZN9TCPClient4readEv>
}
   b8bb8:	b2c0      	uxtb	r0, r0
   b8bba:	bd10      	pop	{r4, pc}

000b8bbc <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b8bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8bc0:	4605      	mov	r5, r0
   b8bc2:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b8bc4:	f7ff ffee 	bl	b8ba4 <_ZN4MQTT8readByteEv>
   b8bc8:	69eb      	ldr	r3, [r5, #28]
   b8bca:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b8bcc:	69eb      	ldr	r3, [r5, #28]
   b8bce:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b8bd2:	f04f 0901 	mov.w	r9, #1
   b8bd6:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b8bda:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b8bdc:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b8bde:	4628      	mov	r0, r5
   b8be0:	f7ff ffe0 	bl	b8ba4 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b8be4:	4626      	mov	r6, r4
   b8be6:	69eb      	ldr	r3, [r5, #28]
   b8be8:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b8bea:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b8bee:	fb13 f309 	smulbb	r3, r3, r9
   b8bf2:	441f      	add	r7, r3
        buffer[len++] = digit;
   b8bf4:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b8bf6:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b8bf8:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b8bfa:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b8bfc:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b8c00:	d4ed      	bmi.n	b8bde <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b8c02:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b8c04:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b8c08:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b8c0c:	d11e      	bne.n	b8c4c <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b8c0e:	4628      	mov	r0, r5
   b8c10:	f7ff ffc8 	bl	b8ba4 <_ZN4MQTT8readByteEv>
   b8c14:	69eb      	ldr	r3, [r5, #28]
   b8c16:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b8c18:	4628      	mov	r0, r5
   b8c1a:	f7ff ffc3 	bl	b8ba4 <_ZN4MQTT8readByteEv>
   b8c1e:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b8c20:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b8c22:	b2b6      	uxth	r6, r6
   b8c24:	69eb      	ldr	r3, [r5, #28]
   b8c26:	b2a4      	uxth	r4, r4
   b8c28:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b8c2a:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b8c2c:	b2b6      	uxth	r6, r6
   b8c2e:	42be      	cmp	r6, r7
   b8c30:	d20e      	bcs.n	b8c50 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b8c32:	4628      	mov	r0, r5
   b8c34:	f7ff ffb6 	bl	b8ba4 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b8c38:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b8c3c:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b8c3e:	bf84      	itt	hi
   b8c40:	69eb      	ldrhi	r3, [r5, #28]
   b8c42:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b8c44:	3401      	adds	r4, #1
   b8c46:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b8c48:	3601      	adds	r6, #1
   b8c4a:	e7ef      	b.n	b8c2c <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b8c4c:	2600      	movs	r6, #0
   b8c4e:	e7ed      	b.n	b8c2c <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b8c50:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b8c54:	42a3      	cmp	r3, r4
   b8c56:	bf2c      	ite	cs
   b8c58:	4620      	movcs	r0, r4
   b8c5a:	2000      	movcc	r0, #0
   b8c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b8c60 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b8c60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b8c64:	4615      	mov	r5, r2
   b8c66:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b8c68:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b8c6a:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b8c6c:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b8c6e:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b8c70:	a802      	add	r0, sp, #8
        digit = len % 128;
   b8c72:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b8c76:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b8c7a:	f103 0401 	add.w	r4, r3, #1
   b8c7e:	4403      	add	r3, r0
            digit |= 0x80;
   b8c80:	bf88      	it	hi
   b8c82:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b8c86:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b8c8a:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b8c8e:	b2e4      	uxtb	r4, r4
   b8c90:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b8c94:	d81e      	bhi.n	b8cd4 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b8c96:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b8c9a:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b8c9e:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b8ca0:	4622      	mov	r2, r4
   b8ca2:	a901      	add	r1, sp, #4
   b8ca4:	4428      	add	r0, r5
    buf[4-llen] = header;
   b8ca6:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b8caa:	f003 ff77 	bl	bcb9c <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b8cae:	1c72      	adds	r2, r6, #1
   b8cb0:	4422      	add	r2, r4
   b8cb2:	4641      	mov	r1, r8
   b8cb4:	4638      	mov	r0, r7
   b8cb6:	f002 fa38 	bl	bb12a <_ZN9TCPClient5writeEPKhj>
   b8cba:	4605      	mov	r5, r0
   b8cbc:	f000 fa28 	bl	b9110 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b8cc0:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b8cc2:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b8cc4:	4432      	add	r2, r6
   b8cc6:	b2a8      	uxth	r0, r5
}
   b8cc8:	1a13      	subs	r3, r2, r0
   b8cca:	4258      	negs	r0, r3
   b8ccc:	4158      	adcs	r0, r3
   b8cce:	b002      	add	sp, #8
   b8cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b8cd4:	4623      	mov	r3, r4
   b8cd6:	e7ca      	b.n	b8c6e <_ZN4MQTT5writeEhPht+0xe>

000b8cd8 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   b8cd8:	b513      	push	{r0, r1, r4, lr}
   b8cda:	4604      	mov	r4, r0
    MutexLocker lock(this);
   b8cdc:	4601      	mov	r1, r0
   b8cde:	a801      	add	r0, sp, #4
   b8ce0:	f7ff fef5 	bl	b8ace <_ZN4MQTT11MutexLockerC1EPS_>
    buffer[0] = MQTTDISCONNECT;
   b8ce4:	69e3      	ldr	r3, [r4, #28]
   b8ce6:	22e0      	movs	r2, #224	; 0xe0
   b8ce8:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   b8cea:	69e3      	ldr	r3, [r4, #28]
   b8cec:	2200      	movs	r2, #0
   b8cee:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
   b8cf0:	69e1      	ldr	r1, [r4, #28]
   b8cf2:	2202      	movs	r2, #2
   b8cf4:	4620      	mov	r0, r4
   b8cf6:	f002 fa18 	bl	bb12a <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   b8cfa:	4620      	mov	r0, r4
   b8cfc:	f002 fc9a 	bl	bb634 <_ZN9TCPClient4stopEv>
   b8d00:	f000 fa06 	bl	b9110 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   b8d04:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
    MutexLocker lock(this);
   b8d08:	a801      	add	r0, sp, #4
   b8d0a:	f7ff feeb 	bl	b8ae4 <_ZN4MQTT11MutexLockerD1Ev>
}
   b8d0e:	b002      	add	sp, #8
   b8d10:	bd10      	pop	{r4, pc}

000b8d12 <_ZN4MQTT11writeStringEPKcPht>:

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b8d12:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b8d14:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8d16:	4605      	mov	r5, r0
    pos += 2;
   b8d18:	b298      	uxth	r0, r3
   b8d1a:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b8d1c:	5cce      	ldrb	r6, [r1, r3]
   b8d1e:	b29c      	uxth	r4, r3
   b8d20:	b156      	cbz	r6, b8d38 <_ZN4MQTT11writeStringEPKcPht+0x26>
   b8d22:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b8d26:	4584      	cmp	ip, r0
   b8d28:	f103 0701 	add.w	r7, r3, #1
   b8d2c:	d904      	bls.n	b8d38 <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b8d2e:	1c44      	adds	r4, r0, #1
   b8d30:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b8d32:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b8d34:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b8d36:	e7f1      	b.n	b8d1c <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b8d38:	b299      	uxth	r1, r3
   b8d3a:	1a41      	subs	r1, r0, r1
   b8d3c:	440a      	add	r2, r1
   b8d3e:	0a21      	lsrs	r1, r4, #8
   b8d40:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b8d44:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b8d48:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8d4a <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b8d4a:	b538      	push	{r3, r4, r5, lr}
   b8d4c:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b8d4e:	f002 fb39 	bl	bb3c4 <_ZN9TCPClient9connectedEv>
   b8d52:	2800      	cmp	r0, #0
   b8d54:	bf14      	ite	ne
   b8d56:	2501      	movne	r5, #1
   b8d58:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b8d5a:	d102      	bne.n	b8d62 <_ZN4MQTT11isConnectedEv+0x18>
   b8d5c:	4620      	mov	r0, r4
   b8d5e:	f002 fc69 	bl	bb634 <_ZN9TCPClient4stopEv>
    return rc;
}
   b8d62:	4628      	mov	r0, r5
   b8d64:	bd38      	pop	{r3, r4, r5, pc}
	...

000b8d68 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b8d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8d6c:	b088      	sub	sp, #32
   b8d6e:	4604      	mov	r4, r0
   b8d70:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b8d74:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b8d78:	4689      	mov	r9, r1
   b8d7a:	4617      	mov	r7, r2
   b8d7c:	461e      	mov	r6, r3
    if (!isConnected()) {
   b8d7e:	f7ff ffe4 	bl	b8d4a <_ZN4MQTT11isConnectedEv>
   b8d82:	4605      	mov	r5, r0
   b8d84:	2800      	cmp	r0, #0
   b8d86:	f040 80cd 	bne.w	b8f24 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b8d8a:	4621      	mov	r1, r4
   b8d8c:	a801      	add	r0, sp, #4
   b8d8e:	f7ff fe9e 	bl	b8ace <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b8d92:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b8d94:	2900      	cmp	r1, #0
   b8d96:	f040 8088 	bne.w	b8eaa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b8d9a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b8d9e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b8da0:	462b      	mov	r3, r5
   b8da2:	4620      	mov	r0, r4
   b8da4:	f002 fa90 	bl	bb2c8 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b8da8:	2800      	cmp	r0, #0
   b8daa:	d07a      	beq.n	b8ea2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b8dac:	2301      	movs	r3, #1
   b8dae:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b8db0:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b8db4:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b8db6:	2b04      	cmp	r3, #4
   b8db8:	4b5b      	ldr	r3, [pc, #364]	; (b8f28 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b8dba:	f040 8081 	bne.w	b8ec0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b8dbe:	6818      	ldr	r0, [r3, #0]
   b8dc0:	8899      	ldrh	r1, [r3, #4]
   b8dc2:	799b      	ldrb	r3, [r3, #6]
   b8dc4:	f8ad 100c 	strh.w	r1, [sp, #12]
   b8dc8:	f88d 300e 	strb.w	r3, [sp, #14]
   b8dcc:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b8dce:	f8c2 0005 	str.w	r0, [r2, #5]
   b8dd2:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b8dd6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b8dda:	f8a2 1009 	strh.w	r1, [r2, #9]
   b8dde:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b8de0:	230c      	movs	r3, #12
            if (willTopic) {
   b8de2:	f1b8 0f00 	cmp.w	r8, #0
   b8de6:	f000 8081 	beq.w	b8eec <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b8dea:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b8dee:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b8df2:	0140      	lsls	r0, r0, #5
   b8df4:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b8df8:	f040 0006 	orr.w	r0, r0, #6
   b8dfc:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b8dfe:	f1ba 0f00 	cmp.w	sl, #0
   b8e02:	d101      	bne.n	b8e08 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b8e04:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b8e08:	b11f      	cbz	r7, b8e12 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b8e0a:	2e00      	cmp	r6, #0
   b8e0c:	d170      	bne.n	b8ef0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b8e0e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b8e12:	69e2      	ldr	r2, [r4, #28]
   b8e14:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b8e16:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b8e18:	69e1      	ldr	r1, [r4, #28]
   b8e1a:	1c58      	adds	r0, r3, #1
   b8e1c:	1212      	asrs	r2, r2, #8
   b8e1e:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b8e20:	1c9a      	adds	r2, r3, #2
   b8e22:	69e1      	ldr	r1, [r4, #28]
   b8e24:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b8e26:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b8e28:	3303      	adds	r3, #3
   b8e2a:	69e2      	ldr	r2, [r4, #28]
   b8e2c:	4649      	mov	r1, r9
   b8e2e:	4620      	mov	r0, r4
   b8e30:	f7ff ff6f 	bl	b8d12 <_ZN4MQTT11writeStringEPKcPht>
   b8e34:	4603      	mov	r3, r0
            if (willTopic) {
   b8e36:	f1b8 0f00 	cmp.w	r8, #0
   b8e3a:	d00b      	beq.n	b8e54 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b8e3c:	69e2      	ldr	r2, [r4, #28]
   b8e3e:	4641      	mov	r1, r8
   b8e40:	4620      	mov	r0, r4
   b8e42:	f7ff ff66 	bl	b8d12 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b8e46:	69e2      	ldr	r2, [r4, #28]
   b8e48:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b8e4a:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b8e4c:	4620      	mov	r0, r4
   b8e4e:	f7ff ff60 	bl	b8d12 <_ZN4MQTT11writeStringEPKcPht>
   b8e52:	4603      	mov	r3, r0
            if(user != NULL) {
   b8e54:	b167      	cbz	r7, b8e70 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b8e56:	69e2      	ldr	r2, [r4, #28]
   b8e58:	4639      	mov	r1, r7
   b8e5a:	4620      	mov	r0, r4
   b8e5c:	f7ff ff59 	bl	b8d12 <_ZN4MQTT11writeStringEPKcPht>
   b8e60:	4603      	mov	r3, r0
                if(pass != NULL) {
   b8e62:	b12e      	cbz	r6, b8e70 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b8e64:	69e2      	ldr	r2, [r4, #28]
   b8e66:	4631      	mov	r1, r6
   b8e68:	4620      	mov	r0, r4
   b8e6a:	f7ff ff52 	bl	b8d12 <_ZN4MQTT11writeStringEPKcPht>
   b8e6e:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b8e70:	3b05      	subs	r3, #5
   b8e72:	69e2      	ldr	r2, [r4, #28]
   b8e74:	b29b      	uxth	r3, r3
   b8e76:	2110      	movs	r1, #16
   b8e78:	4620      	mov	r0, r4
   b8e7a:	f7ff fef1 	bl	b8c60 <_ZN4MQTT5writeEhPht>
   b8e7e:	f000 f947 	bl	b9110 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b8e82:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b8e86:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b8e8a:	4620      	mov	r0, r4
   b8e8c:	f002 fb78 	bl	bb580 <_ZN9TCPClient9availableEv>
   b8e90:	bb88      	cbnz	r0, b8ef6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b8e92:	f000 f93d 	bl	b9110 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b8e96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b8e98:	1ac0      	subs	r0, r0, r3
   b8e9a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b8e9c:	4373      	muls	r3, r6
   b8e9e:	4298      	cmp	r0, r3
   b8ea0:	d9f3      	bls.n	b8e8a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b8ea2:	4620      	mov	r0, r4
   b8ea4:	f002 fbc6 	bl	bb634 <_ZN9TCPClient4stopEv>
   b8ea8:	e035      	b.n	b8f16 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b8eaa:	a802      	add	r0, sp, #8
   b8eac:	f001 fe4a 	bl	bab44 <_ZN9IPAddressC1EPKh>
   b8eb0:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b8eb4:	462b      	mov	r3, r5
   b8eb6:	a902      	add	r1, sp, #8
   b8eb8:	4620      	mov	r0, r4
   b8eba:	f002 fae5 	bl	bb488 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b8ebe:	e773      	b.n	b8da8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b8ec0:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b8ec4:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b8ec8:	7bdb      	ldrb	r3, [r3, #15]
   b8eca:	f10d 0c08 	add.w	ip, sp, #8
   b8ece:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b8ed2:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b8ed6:	ab02      	add	r3, sp, #8
   b8ed8:	cb03      	ldmia	r3!, {r0, r1}
   b8eda:	f8c2 0005 	str.w	r0, [r2, #5]
   b8ede:	f8c2 1009 	str.w	r1, [r2, #9]
   b8ee2:	f89c 3000 	ldrb.w	r3, [ip]
   b8ee6:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b8ee8:	230e      	movs	r3, #14
   b8eea:	e77a      	b.n	b8de2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b8eec:	2002      	movs	r0, #2
   b8eee:	e786      	b.n	b8dfe <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b8ef0:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b8ef4:	e78d      	b.n	b8e12 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b8ef6:	a902      	add	r1, sp, #8
   b8ef8:	4620      	mov	r0, r4
   b8efa:	f7ff fe5f 	bl	b8bbc <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b8efe:	2804      	cmp	r0, #4
   b8f00:	d1cf      	bne.n	b8ea2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b8f02:	69e3      	ldr	r3, [r4, #28]
   b8f04:	78de      	ldrb	r6, [r3, #3]
   b8f06:	2e00      	cmp	r6, #0
   b8f08:	d1cb      	bne.n	b8ea2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b8f0a:	f000 f901 	bl	b9110 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b8f0e:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b8f10:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b8f12:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b8f16:	a801      	add	r0, sp, #4
   b8f18:	f7ff fde4 	bl	b8ae4 <_ZN4MQTT11MutexLockerD1Ev>
}
   b8f1c:	4628      	mov	r0, r5
   b8f1e:	b008      	add	sp, #32
   b8f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b8f24:	2500      	movs	r5, #0
   b8f26:	e7f9      	b.n	b8f1c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b8f28:	000bf2d0 	.word	0x000bf2d0

000b8f2c <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b8f2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b8f2e:	2301      	movs	r3, #1
   b8f30:	2204      	movs	r2, #4
   b8f32:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b8f36:	2300      	movs	r3, #0
   b8f38:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b8f3c:	e9cd 3300 	strd	r3, r3, [sp]
   b8f40:	461a      	mov	r2, r3
   b8f42:	f7ff ff11 	bl	b8d68 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b8f46:	b007      	add	sp, #28
   b8f48:	f85d fb04 	ldr.w	pc, [sp], #4

000b8f4c <_ZN4MQTTD1Ev>:
MQTT::~MQTT() {
   b8f4c:	b538      	push	{r3, r4, r5, lr}
   b8f4e:	4605      	mov	r5, r0
    if (isConnected()) {
   b8f50:	f7ff fefb 	bl	b8d4a <_ZN4MQTT11isConnectedEv>
   b8f54:	b110      	cbz	r0, b8f5c <_ZN4MQTTD1Ev+0x10>
        disconnect();
   b8f56:	4628      	mov	r0, r5
   b8f58:	f7ff febe 	bl	b8cd8 <_ZN4MQTT10disconnectEv>
    if (buffer != NULL)
   b8f5c:	69e8      	ldr	r0, [r5, #28]
   b8f5e:	b108      	cbz	r0, b8f64 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
   b8f60:	f7fb f89f 	bl	b40a2 <_ZdaPv>
MQTT::~MQTT() {
   b8f64:	f105 0038 	add.w	r0, r5, #56	; 0x38
   b8f68:	f001 ff50 	bl	bae0c <_ZN6StringD1Ev>
	if (_M_pi != nullptr)
   b8f6c:	69ac      	ldr	r4, [r5, #24]
   b8f6e:	4b0a      	ldr	r3, [pc, #40]	; (b8f98 <_ZN4MQTTD1Ev+0x4c>)
   b8f70:	602b      	str	r3, [r5, #0]
   b8f72:	b17c      	cbz	r4, b8f94 <_ZN4MQTTD1Ev+0x48>
      if (--_M_use_count == 0)
   b8f74:	6863      	ldr	r3, [r4, #4]
   b8f76:	3b01      	subs	r3, #1
   b8f78:	6063      	str	r3, [r4, #4]
   b8f7a:	b95b      	cbnz	r3, b8f94 <_ZN4MQTTD1Ev+0x48>
          _M_dispose();
   b8f7c:	6823      	ldr	r3, [r4, #0]
   b8f7e:	4620      	mov	r0, r4
   b8f80:	689b      	ldr	r3, [r3, #8]
   b8f82:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b8f84:	68a3      	ldr	r3, [r4, #8]
   b8f86:	3b01      	subs	r3, #1
   b8f88:	60a3      	str	r3, [r4, #8]
   b8f8a:	b91b      	cbnz	r3, b8f94 <_ZN4MQTTD1Ev+0x48>
            _M_destroy();
   b8f8c:	6823      	ldr	r3, [r4, #0]
   b8f8e:	4620      	mov	r0, r4
   b8f90:	68db      	ldr	r3, [r3, #12]
   b8f92:	4798      	blx	r3
}
   b8f94:	4628      	mov	r0, r5
   b8f96:	bd38      	pop	{r3, r4, r5, pc}
   b8f98:	000bf5b4 	.word	0x000bf5b4

000b8f9c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b8f9c:	b508      	push	{r3, lr}
   b8f9e:	4b02      	ldr	r3, [pc, #8]	; (b8fa8 <hal_ble_stack_init+0xc>)
   b8fa0:	681b      	ldr	r3, [r3, #0]
   b8fa2:	689b      	ldr	r3, [r3, #8]
   b8fa4:	9301      	str	r3, [sp, #4]
   b8fa6:	bd08      	pop	{r3, pc}
   b8fa8:	00030278 	.word	0x00030278

000b8fac <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b8fac:	b508      	push	{r3, lr}
   b8fae:	4b02      	ldr	r3, [pc, #8]	; (b8fb8 <hal_ble_gap_set_advertising_data+0xc>)
   b8fb0:	681b      	ldr	r3, [r3, #0]
   b8fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8fb4:	9301      	str	r3, [sp, #4]
   b8fb6:	bd08      	pop	{r3, pc}
   b8fb8:	00030278 	.word	0x00030278

000b8fbc <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b8fbc:	b508      	push	{r3, lr}
   b8fbe:	4b02      	ldr	r3, [pc, #8]	; (b8fc8 <hal_ble_gap_set_scan_response_data+0xc>)
   b8fc0:	681b      	ldr	r3, [r3, #0]
   b8fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8fc4:	9301      	str	r3, [sp, #4]
   b8fc6:	bd08      	pop	{r3, pc}
   b8fc8:	00030278 	.word	0x00030278

000b8fcc <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b8fcc:	b508      	push	{r3, lr}
   b8fce:	4b02      	ldr	r3, [pc, #8]	; (b8fd8 <hal_ble_gap_start_advertising+0xc>)
   b8fd0:	681b      	ldr	r3, [r3, #0]
   b8fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b8fd4:	9301      	str	r3, [sp, #4]
   b8fd6:	bd08      	pop	{r3, pc}
   b8fd8:	00030278 	.word	0x00030278

000b8fdc <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b8fdc:	b508      	push	{r3, lr}
   b8fde:	4b03      	ldr	r3, [pc, #12]	; (b8fec <hal_ble_gap_disconnect+0x10>)
   b8fe0:	681b      	ldr	r3, [r3, #0]
   b8fe2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b8fe6:	9301      	str	r3, [sp, #4]
   b8fe8:	bd08      	pop	{r3, pc}
   b8fea:	0000      	.short	0x0000
   b8fec:	00030278 	.word	0x00030278

000b8ff0 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b8ff0:	b508      	push	{r3, lr}
   b8ff2:	4b03      	ldr	r3, [pc, #12]	; (b9000 <hal_ble_gatt_server_add_service+0x10>)
   b8ff4:	681b      	ldr	r3, [r3, #0]
   b8ff6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b8ffa:	9301      	str	r3, [sp, #4]
   b8ffc:	bd08      	pop	{r3, pc}
   b8ffe:	0000      	.short	0x0000
   b9000:	00030278 	.word	0x00030278

000b9004 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b9004:	b508      	push	{r3, lr}
   b9006:	4b03      	ldr	r3, [pc, #12]	; (b9014 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b9008:	681b      	ldr	r3, [r3, #0]
   b900a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b900e:	9301      	str	r3, [sp, #4]
   b9010:	bd08      	pop	{r3, pc}
   b9012:	0000      	.short	0x0000
   b9014:	00030278 	.word	0x00030278

000b9018 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b9018:	b508      	push	{r3, lr}
   b901a:	4b03      	ldr	r3, [pc, #12]	; (b9028 <hal_ble_gatt_client_write_with_response+0x10>)
   b901c:	681b      	ldr	r3, [r3, #0]
   b901e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b9022:	9301      	str	r3, [sp, #4]
   b9024:	bd08      	pop	{r3, pc}
   b9026:	0000      	.short	0x0000
   b9028:	00030278 	.word	0x00030278

000b902c <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b902c:	b508      	push	{r3, lr}
   b902e:	4b03      	ldr	r3, [pc, #12]	; (b903c <hal_ble_gatt_client_write_without_response+0x10>)
   b9030:	681b      	ldr	r3, [r3, #0]
   b9032:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b9036:	9301      	str	r3, [sp, #4]
   b9038:	bd08      	pop	{r3, pc}
   b903a:	0000      	.short	0x0000
   b903c:	00030278 	.word	0x00030278

000b9040 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b9040:	b508      	push	{r3, lr}
   b9042:	4b03      	ldr	r3, [pc, #12]	; (b9050 <hal_ble_gatt_server_add_characteristic+0x10>)
   b9044:	681b      	ldr	r3, [r3, #0]
   b9046:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b904a:	9301      	str	r3, [sp, #4]
   b904c:	bd08      	pop	{r3, pc}
   b904e:	0000      	.short	0x0000
   b9050:	00030278 	.word	0x00030278

000b9054 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b9054:	b508      	push	{r3, lr}
   b9056:	4b03      	ldr	r3, [pc, #12]	; (b9064 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b9058:	681b      	ldr	r3, [r3, #0]
   b905a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b905e:	9301      	str	r3, [sp, #4]
   b9060:	bd08      	pop	{r3, pc}
   b9062:	0000      	.short	0x0000
   b9064:	00030278 	.word	0x00030278

000b9068 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b9068:	b508      	push	{r3, lr}
   b906a:	4b03      	ldr	r3, [pc, #12]	; (b9078 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b906c:	681b      	ldr	r3, [r3, #0]
   b906e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b9072:	9301      	str	r3, [sp, #4]
   b9074:	bd08      	pop	{r3, pc}
   b9076:	0000      	.short	0x0000
   b9078:	00030278 	.word	0x00030278

000b907c <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b907c:	b508      	push	{r3, lr}
   b907e:	4b03      	ldr	r3, [pc, #12]	; (b908c <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b9080:	681b      	ldr	r3, [r3, #0]
   b9082:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b9086:	9301      	str	r3, [sp, #4]
   b9088:	bd08      	pop	{r3, pc}
   b908a:	0000      	.short	0x0000
   b908c:	00030278 	.word	0x00030278

000b9090 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b9090:	b508      	push	{r3, lr}
   b9092:	4b02      	ldr	r3, [pc, #8]	; (b909c <os_mutex_create+0xc>)
   b9094:	681b      	ldr	r3, [r3, #0]
   b9096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9098:	9301      	str	r3, [sp, #4]
   b909a:	bd08      	pop	{r3, pc}
   b909c:	00030248 	.word	0x00030248

000b90a0 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b90a0:	b508      	push	{r3, lr}
   b90a2:	4b02      	ldr	r3, [pc, #8]	; (b90ac <os_mutex_lock+0xc>)
   b90a4:	681b      	ldr	r3, [r3, #0]
   b90a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b90a8:	9301      	str	r3, [sp, #4]
   b90aa:	bd08      	pop	{r3, pc}
   b90ac:	00030248 	.word	0x00030248

000b90b0 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b90b0:	b508      	push	{r3, lr}
   b90b2:	4b02      	ldr	r3, [pc, #8]	; (b90bc <os_mutex_unlock+0xc>)
   b90b4:	681b      	ldr	r3, [r3, #0]
   b90b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b90b8:	9301      	str	r3, [sp, #4]
   b90ba:	bd08      	pop	{r3, pc}
   b90bc:	00030248 	.word	0x00030248

000b90c0 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b90c0:	b508      	push	{r3, lr}
   b90c2:	4b02      	ldr	r3, [pc, #8]	; (b90cc <os_mutex_recursive_create+0xc>)
   b90c4:	681b      	ldr	r3, [r3, #0]
   b90c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b90c8:	9301      	str	r3, [sp, #4]
   b90ca:	bd08      	pop	{r3, pc}
   b90cc:	00030248 	.word	0x00030248

000b90d0 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b90d0:	b508      	push	{r3, lr}
   b90d2:	4b02      	ldr	r3, [pc, #8]	; (b90dc <os_mutex_recursive_lock+0xc>)
   b90d4:	681b      	ldr	r3, [r3, #0]
   b90d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b90d8:	9301      	str	r3, [sp, #4]
   b90da:	bd08      	pop	{r3, pc}
   b90dc:	00030248 	.word	0x00030248

000b90e0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b90e0:	b508      	push	{r3, lr}
   b90e2:	4b02      	ldr	r3, [pc, #8]	; (b90ec <os_mutex_recursive_unlock+0xc>)
   b90e4:	681b      	ldr	r3, [r3, #0]
   b90e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b90e8:	9301      	str	r3, [sp, #4]
   b90ea:	bd08      	pop	{r3, pc}
   b90ec:	00030248 	.word	0x00030248

000b90f0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b90f0:	b508      	push	{r3, lr}
   b90f2:	4b02      	ldr	r3, [pc, #8]	; (b90fc <HAL_RNG_GetRandomNumber+0xc>)
   b90f4:	681b      	ldr	r3, [r3, #0]
   b90f6:	685b      	ldr	r3, [r3, #4]
   b90f8:	9301      	str	r3, [sp, #4]
   b90fa:	bd08      	pop	{r3, pc}
   b90fc:	00030218 	.word	0x00030218

000b9100 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b9100:	b508      	push	{r3, lr}
   b9102:	4b02      	ldr	r3, [pc, #8]	; (b910c <HAL_Delay_Microseconds+0xc>)
   b9104:	681b      	ldr	r3, [r3, #0]
   b9106:	68db      	ldr	r3, [r3, #12]
   b9108:	9301      	str	r3, [sp, #4]
   b910a:	bd08      	pop	{r3, pc}
   b910c:	00030218 	.word	0x00030218

000b9110 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b9110:	b508      	push	{r3, lr}
   b9112:	4b02      	ldr	r3, [pc, #8]	; (b911c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b9114:	681b      	ldr	r3, [r3, #0]
   b9116:	695b      	ldr	r3, [r3, #20]
   b9118:	9301      	str	r3, [sp, #4]
   b911a:	bd08      	pop	{r3, pc}
   b911c:	00030218 	.word	0x00030218

000b9120 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b9120:	b508      	push	{r3, lr}
   b9122:	4b02      	ldr	r3, [pc, #8]	; (b912c <hal_i2c_set_speed+0xc>)
   b9124:	681b      	ldr	r3, [r3, #0]
   b9126:	681b      	ldr	r3, [r3, #0]
   b9128:	9301      	str	r3, [sp, #4]
   b912a:	bd08      	pop	{r3, pc}
   b912c:	00030228 	.word	0x00030228

000b9130 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b9130:	b508      	push	{r3, lr}
   b9132:	4b02      	ldr	r3, [pc, #8]	; (b913c <hal_i2c_begin+0xc>)
   b9134:	681b      	ldr	r3, [r3, #0]
   b9136:	68db      	ldr	r3, [r3, #12]
   b9138:	9301      	str	r3, [sp, #4]
   b913a:	bd08      	pop	{r3, pc}
   b913c:	00030228 	.word	0x00030228

000b9140 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b9140:	b508      	push	{r3, lr}
   b9142:	4b02      	ldr	r3, [pc, #8]	; (b914c <hal_i2c_begin_transmission+0xc>)
   b9144:	681b      	ldr	r3, [r3, #0]
   b9146:	699b      	ldr	r3, [r3, #24]
   b9148:	9301      	str	r3, [sp, #4]
   b914a:	bd08      	pop	{r3, pc}
   b914c:	00030228 	.word	0x00030228

000b9150 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b9150:	b508      	push	{r3, lr}
   b9152:	4b02      	ldr	r3, [pc, #8]	; (b915c <hal_i2c_end_transmission+0xc>)
   b9154:	681b      	ldr	r3, [r3, #0]
   b9156:	69db      	ldr	r3, [r3, #28]
   b9158:	9301      	str	r3, [sp, #4]
   b915a:	bd08      	pop	{r3, pc}
   b915c:	00030228 	.word	0x00030228

000b9160 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b9160:	b508      	push	{r3, lr}
   b9162:	4b02      	ldr	r3, [pc, #8]	; (b916c <hal_i2c_write+0xc>)
   b9164:	681b      	ldr	r3, [r3, #0]
   b9166:	6a1b      	ldr	r3, [r3, #32]
   b9168:	9301      	str	r3, [sp, #4]
   b916a:	bd08      	pop	{r3, pc}
   b916c:	00030228 	.word	0x00030228

000b9170 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b9170:	b508      	push	{r3, lr}
   b9172:	4b02      	ldr	r3, [pc, #8]	; (b917c <hal_i2c_available+0xc>)
   b9174:	681b      	ldr	r3, [r3, #0]
   b9176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9178:	9301      	str	r3, [sp, #4]
   b917a:	bd08      	pop	{r3, pc}
   b917c:	00030228 	.word	0x00030228

000b9180 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b9180:	b508      	push	{r3, lr}
   b9182:	4b02      	ldr	r3, [pc, #8]	; (b918c <hal_i2c_read+0xc>)
   b9184:	681b      	ldr	r3, [r3, #0]
   b9186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9188:	9301      	str	r3, [sp, #4]
   b918a:	bd08      	pop	{r3, pc}
   b918c:	00030228 	.word	0x00030228

000b9190 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b9190:	b508      	push	{r3, lr}
   b9192:	4b02      	ldr	r3, [pc, #8]	; (b919c <hal_i2c_peek+0xc>)
   b9194:	681b      	ldr	r3, [r3, #0]
   b9196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9198:	9301      	str	r3, [sp, #4]
   b919a:	bd08      	pop	{r3, pc}
   b919c:	00030228 	.word	0x00030228

000b91a0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b91a0:	b508      	push	{r3, lr}
   b91a2:	4b02      	ldr	r3, [pc, #8]	; (b91ac <hal_i2c_flush+0xc>)
   b91a4:	681b      	ldr	r3, [r3, #0]
   b91a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b91a8:	9301      	str	r3, [sp, #4]
   b91aa:	bd08      	pop	{r3, pc}
   b91ac:	00030228 	.word	0x00030228

000b91b0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b91b0:	b508      	push	{r3, lr}
   b91b2:	4b02      	ldr	r3, [pc, #8]	; (b91bc <hal_i2c_init+0xc>)
   b91b4:	681b      	ldr	r3, [r3, #0]
   b91b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b91b8:	9301      	str	r3, [sp, #4]
   b91ba:	bd08      	pop	{r3, pc}
   b91bc:	00030228 	.word	0x00030228

000b91c0 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b91c0:	b508      	push	{r3, lr}
   b91c2:	4b02      	ldr	r3, [pc, #8]	; (b91cc <hal_i2c_request_ex+0xc>)
   b91c4:	681b      	ldr	r3, [r3, #0]
   b91c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b91c8:	9301      	str	r3, [sp, #4]
   b91ca:	bd08      	pop	{r3, pc}
   b91cc:	00030228 	.word	0x00030228

000b91d0 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b91d0:	b508      	push	{r3, lr}
   b91d2:	4b02      	ldr	r3, [pc, #8]	; (b91dc <if_index_to_name+0xc>)
   b91d4:	681b      	ldr	r3, [r3, #0]
   b91d6:	695b      	ldr	r3, [r3, #20]
   b91d8:	9301      	str	r3, [sp, #4]
   b91da:	bd08      	pop	{r3, pc}
   b91dc:	0003026c 	.word	0x0003026c

000b91e0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b91e0:	b508      	push	{r3, lr}
   b91e2:	4b02      	ldr	r3, [pc, #8]	; (b91ec <inet_inet_ntop+0xc>)
   b91e4:	681b      	ldr	r3, [r3, #0]
   b91e6:	695b      	ldr	r3, [r3, #20]
   b91e8:	9301      	str	r3, [sp, #4]
   b91ea:	bd08      	pop	{r3, pc}
   b91ec:	00030264 	.word	0x00030264

000b91f0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b91f0:	b508      	push	{r3, lr}
   b91f2:	4b02      	ldr	r3, [pc, #8]	; (b91fc <inet_htonl+0xc>)
   b91f4:	681b      	ldr	r3, [r3, #0]
   b91f6:	6a1b      	ldr	r3, [r3, #32]
   b91f8:	9301      	str	r3, [sp, #4]
   b91fa:	bd08      	pop	{r3, pc}
   b91fc:	00030264 	.word	0x00030264

000b9200 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b9200:	b508      	push	{r3, lr}
   b9202:	4b02      	ldr	r3, [pc, #8]	; (b920c <inet_htons+0xc>)
   b9204:	681b      	ldr	r3, [r3, #0]
   b9206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9208:	9301      	str	r3, [sp, #4]
   b920a:	bd08      	pop	{r3, pc}
   b920c:	00030264 	.word	0x00030264

000b9210 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b9210:	b508      	push	{r3, lr}
   b9212:	4b02      	ldr	r3, [pc, #8]	; (b921c <netdb_freeaddrinfo+0xc>)
   b9214:	681b      	ldr	r3, [r3, #0]
   b9216:	689b      	ldr	r3, [r3, #8]
   b9218:	9301      	str	r3, [sp, #4]
   b921a:	bd08      	pop	{r3, pc}
   b921c:	00030268 	.word	0x00030268

000b9220 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b9220:	b508      	push	{r3, lr}
   b9222:	4b02      	ldr	r3, [pc, #8]	; (b922c <netdb_getaddrinfo+0xc>)
   b9224:	681b      	ldr	r3, [r3, #0]
   b9226:	68db      	ldr	r3, [r3, #12]
   b9228:	9301      	str	r3, [sp, #4]
   b922a:	bd08      	pop	{r3, pc}
   b922c:	00030268 	.word	0x00030268

000b9230 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b9230:	b508      	push	{r3, lr}
   b9232:	4b02      	ldr	r3, [pc, #8]	; (b923c <sock_setsockopt+0xc>)
   b9234:	681b      	ldr	r3, [r3, #0]
   b9236:	699b      	ldr	r3, [r3, #24]
   b9238:	9301      	str	r3, [sp, #4]
   b923a:	bd08      	pop	{r3, pc}
   b923c:	00030238 	.word	0x00030238

000b9240 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b9240:	b508      	push	{r3, lr}
   b9242:	4b02      	ldr	r3, [pc, #8]	; (b924c <sock_close+0xc>)
   b9244:	681b      	ldr	r3, [r3, #0]
   b9246:	69db      	ldr	r3, [r3, #28]
   b9248:	9301      	str	r3, [sp, #4]
   b924a:	bd08      	pop	{r3, pc}
   b924c:	00030238 	.word	0x00030238

000b9250 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b9250:	b508      	push	{r3, lr}
   b9252:	4b02      	ldr	r3, [pc, #8]	; (b925c <sock_connect+0xc>)
   b9254:	681b      	ldr	r3, [r3, #0]
   b9256:	6a1b      	ldr	r3, [r3, #32]
   b9258:	9301      	str	r3, [sp, #4]
   b925a:	bd08      	pop	{r3, pc}
   b925c:	00030238 	.word	0x00030238

000b9260 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b9260:	b508      	push	{r3, lr}
   b9262:	4b02      	ldr	r3, [pc, #8]	; (b926c <sock_recv+0xc>)
   b9264:	681b      	ldr	r3, [r3, #0]
   b9266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9268:	9301      	str	r3, [sp, #4]
   b926a:	bd08      	pop	{r3, pc}
   b926c:	00030238 	.word	0x00030238

000b9270 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b9270:	b508      	push	{r3, lr}
   b9272:	4b02      	ldr	r3, [pc, #8]	; (b927c <sock_send+0xc>)
   b9274:	681b      	ldr	r3, [r3, #0]
   b9276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9278:	9301      	str	r3, [sp, #4]
   b927a:	bd08      	pop	{r3, pc}
   b927c:	00030238 	.word	0x00030238

000b9280 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b9280:	b508      	push	{r3, lr}
   b9282:	4b02      	ldr	r3, [pc, #8]	; (b928c <sock_socket+0xc>)
   b9284:	681b      	ldr	r3, [r3, #0]
   b9286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b9288:	9301      	str	r3, [sp, #4]
   b928a:	bd08      	pop	{r3, pc}
   b928c:	00030238 	.word	0x00030238

000b9290 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b9290:	b508      	push	{r3, lr}
   b9292:	4b02      	ldr	r3, [pc, #8]	; (b929c <hal_usart_write+0xc>)
   b9294:	681b      	ldr	r3, [r3, #0]
   b9296:	68db      	ldr	r3, [r3, #12]
   b9298:	9301      	str	r3, [sp, #4]
   b929a:	bd08      	pop	{r3, pc}
   b929c:	0003023c 	.word	0x0003023c

000b92a0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b92a0:	b508      	push	{r3, lr}
   b92a2:	4b02      	ldr	r3, [pc, #8]	; (b92ac <hal_usart_available+0xc>)
   b92a4:	681b      	ldr	r3, [r3, #0]
   b92a6:	691b      	ldr	r3, [r3, #16]
   b92a8:	9301      	str	r3, [sp, #4]
   b92aa:	bd08      	pop	{r3, pc}
   b92ac:	0003023c 	.word	0x0003023c

000b92b0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b92b0:	b508      	push	{r3, lr}
   b92b2:	4b02      	ldr	r3, [pc, #8]	; (b92bc <hal_usart_read+0xc>)
   b92b4:	681b      	ldr	r3, [r3, #0]
   b92b6:	695b      	ldr	r3, [r3, #20]
   b92b8:	9301      	str	r3, [sp, #4]
   b92ba:	bd08      	pop	{r3, pc}
   b92bc:	0003023c 	.word	0x0003023c

000b92c0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b92c0:	b508      	push	{r3, lr}
   b92c2:	4b02      	ldr	r3, [pc, #8]	; (b92cc <hal_usart_peek+0xc>)
   b92c4:	681b      	ldr	r3, [r3, #0]
   b92c6:	699b      	ldr	r3, [r3, #24]
   b92c8:	9301      	str	r3, [sp, #4]
   b92ca:	bd08      	pop	{r3, pc}
   b92cc:	0003023c 	.word	0x0003023c

000b92d0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b92d0:	b508      	push	{r3, lr}
   b92d2:	4b02      	ldr	r3, [pc, #8]	; (b92dc <hal_usart_flush+0xc>)
   b92d4:	681b      	ldr	r3, [r3, #0]
   b92d6:	69db      	ldr	r3, [r3, #28]
   b92d8:	9301      	str	r3, [sp, #4]
   b92da:	bd08      	pop	{r3, pc}
   b92dc:	0003023c 	.word	0x0003023c

000b92e0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b92e0:	b508      	push	{r3, lr}
   b92e2:	4b02      	ldr	r3, [pc, #8]	; (b92ec <hal_usart_available_data_for_write+0xc>)
   b92e4:	681b      	ldr	r3, [r3, #0]
   b92e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b92e8:	9301      	str	r3, [sp, #4]
   b92ea:	bd08      	pop	{r3, pc}
   b92ec:	0003023c 	.word	0x0003023c

000b92f0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b92f0:	b508      	push	{r3, lr}
   b92f2:	4b02      	ldr	r3, [pc, #8]	; (b92fc <hal_usart_init_ex+0xc>)
   b92f4:	681b      	ldr	r3, [r3, #0]
   b92f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b92f8:	9301      	str	r3, [sp, #4]
   b92fa:	bd08      	pop	{r3, pc}
   b92fc:	0003023c 	.word	0x0003023c

000b9300 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b9300:	b508      	push	{r3, lr}
   b9302:	4b02      	ldr	r3, [pc, #8]	; (b930c <HAL_USB_USART_Init+0xc>)
   b9304:	681b      	ldr	r3, [r3, #0]
   b9306:	681b      	ldr	r3, [r3, #0]
   b9308:	9301      	str	r3, [sp, #4]
   b930a:	bd08      	pop	{r3, pc}
   b930c:	0003024c 	.word	0x0003024c

000b9310 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b9310:	b508      	push	{r3, lr}
   b9312:	4b02      	ldr	r3, [pc, #8]	; (b931c <HAL_USB_USART_Begin+0xc>)
   b9314:	681b      	ldr	r3, [r3, #0]
   b9316:	685b      	ldr	r3, [r3, #4]
   b9318:	9301      	str	r3, [sp, #4]
   b931a:	bd08      	pop	{r3, pc}
   b931c:	0003024c 	.word	0x0003024c

000b9320 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b9320:	b508      	push	{r3, lr}
   b9322:	4b02      	ldr	r3, [pc, #8]	; (b932c <HAL_USB_USART_Available_Data+0xc>)
   b9324:	681b      	ldr	r3, [r3, #0]
   b9326:	691b      	ldr	r3, [r3, #16]
   b9328:	9301      	str	r3, [sp, #4]
   b932a:	bd08      	pop	{r3, pc}
   b932c:	0003024c 	.word	0x0003024c

000b9330 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b9330:	b508      	push	{r3, lr}
   b9332:	4b02      	ldr	r3, [pc, #8]	; (b933c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b9334:	681b      	ldr	r3, [r3, #0]
   b9336:	695b      	ldr	r3, [r3, #20]
   b9338:	9301      	str	r3, [sp, #4]
   b933a:	bd08      	pop	{r3, pc}
   b933c:	0003024c 	.word	0x0003024c

000b9340 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b9340:	b508      	push	{r3, lr}
   b9342:	4b02      	ldr	r3, [pc, #8]	; (b934c <HAL_USB_USART_Receive_Data+0xc>)
   b9344:	681b      	ldr	r3, [r3, #0]
   b9346:	699b      	ldr	r3, [r3, #24]
   b9348:	9301      	str	r3, [sp, #4]
   b934a:	bd08      	pop	{r3, pc}
   b934c:	0003024c 	.word	0x0003024c

000b9350 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b9350:	b508      	push	{r3, lr}
   b9352:	4b02      	ldr	r3, [pc, #8]	; (b935c <HAL_USB_USART_Send_Data+0xc>)
   b9354:	681b      	ldr	r3, [r3, #0]
   b9356:	69db      	ldr	r3, [r3, #28]
   b9358:	9301      	str	r3, [sp, #4]
   b935a:	bd08      	pop	{r3, pc}
   b935c:	0003024c 	.word	0x0003024c

000b9360 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b9360:	b508      	push	{r3, lr}
   b9362:	4b02      	ldr	r3, [pc, #8]	; (b936c <HAL_USB_USART_Flush_Data+0xc>)
   b9364:	681b      	ldr	r3, [r3, #0]
   b9366:	6a1b      	ldr	r3, [r3, #32]
   b9368:	9301      	str	r3, [sp, #4]
   b936a:	bd08      	pop	{r3, pc}
   b936c:	0003024c 	.word	0x0003024c

000b9370 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b9370:	b508      	push	{r3, lr}
   b9372:	4b02      	ldr	r3, [pc, #8]	; (b937c <panic_+0xc>)
   b9374:	681b      	ldr	r3, [r3, #0]
   b9376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9378:	9301      	str	r3, [sp, #4]
   b937a:	bd08      	pop	{r3, pc}
   b937c:	00030260 	.word	0x00030260

000b9380 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b9380:	b508      	push	{r3, lr}
   b9382:	4b02      	ldr	r3, [pc, #8]	; (b938c <log_message+0xc>)
   b9384:	681b      	ldr	r3, [r3, #0]
   b9386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b9388:	9301      	str	r3, [sp, #4]
   b938a:	bd08      	pop	{r3, pc}
   b938c:	00030260 	.word	0x00030260

000b9390 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b9390:	b508      	push	{r3, lr}
   b9392:	4b02      	ldr	r3, [pc, #8]	; (b939c <set_system_mode+0xc>)
   b9394:	681b      	ldr	r3, [r3, #0]
   b9396:	685b      	ldr	r3, [r3, #4]
   b9398:	9301      	str	r3, [sp, #4]
   b939a:	bd08      	pop	{r3, pc}
   b939c:	00030220 	.word	0x00030220

000b93a0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b93a0:	b508      	push	{r3, lr}
   b93a2:	4b02      	ldr	r3, [pc, #8]	; (b93ac <system_delay_ms+0xc>)
   b93a4:	681b      	ldr	r3, [r3, #0]
   b93a6:	695b      	ldr	r3, [r3, #20]
   b93a8:	9301      	str	r3, [sp, #4]
   b93aa:	bd08      	pop	{r3, pc}
   b93ac:	00030220 	.word	0x00030220

000b93b0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b93b0:	b508      	push	{r3, lr}
   b93b2:	4b03      	ldr	r3, [pc, #12]	; (b93c0 <system_ctrl_set_app_request_handler+0x10>)
   b93b4:	681b      	ldr	r3, [r3, #0]
   b93b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b93ba:	9301      	str	r3, [sp, #4]
   b93bc:	bd08      	pop	{r3, pc}
   b93be:	0000      	.short	0x0000
   b93c0:	00030220 	.word	0x00030220

000b93c4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b93c4:	b508      	push	{r3, lr}
   b93c6:	4b03      	ldr	r3, [pc, #12]	; (b93d4 <system_ctrl_set_result+0x10>)
   b93c8:	681b      	ldr	r3, [r3, #0]
   b93ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b93ce:	9301      	str	r3, [sp, #4]
   b93d0:	bd08      	pop	{r3, pc}
   b93d2:	0000      	.short	0x0000
   b93d4:	00030220 	.word	0x00030220

000b93d8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b93d8:	b508      	push	{r3, lr}
   b93da:	4b02      	ldr	r3, [pc, #8]	; (b93e4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b93dc:	681b      	ldr	r3, [r3, #0]
   b93de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b93e0:	9301      	str	r3, [sp, #4]
   b93e2:	bd08      	pop	{r3, pc}
   b93e4:	00030244 	.word	0x00030244

000b93e8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b93e8:	b508      	push	{r3, lr}
   b93ea:	4b02      	ldr	r3, [pc, #8]	; (b93f4 <network_connect+0xc>)
   b93ec:	681b      	ldr	r3, [r3, #0]
   b93ee:	685b      	ldr	r3, [r3, #4]
   b93f0:	9301      	str	r3, [sp, #4]
   b93f2:	bd08      	pop	{r3, pc}
   b93f4:	00030240 	.word	0x00030240

000b93f8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b93f8:	b508      	push	{r3, lr}
   b93fa:	4b02      	ldr	r3, [pc, #8]	; (b9404 <network_connecting+0xc>)
   b93fc:	681b      	ldr	r3, [r3, #0]
   b93fe:	689b      	ldr	r3, [r3, #8]
   b9400:	9301      	str	r3, [sp, #4]
   b9402:	bd08      	pop	{r3, pc}
   b9404:	00030240 	.word	0x00030240

000b9408 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b9408:	b508      	push	{r3, lr}
   b940a:	4b02      	ldr	r3, [pc, #8]	; (b9414 <network_disconnect+0xc>)
   b940c:	681b      	ldr	r3, [r3, #0]
   b940e:	68db      	ldr	r3, [r3, #12]
   b9410:	9301      	str	r3, [sp, #4]
   b9412:	bd08      	pop	{r3, pc}
   b9414:	00030240 	.word	0x00030240

000b9418 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b9418:	b508      	push	{r3, lr}
   b941a:	4b02      	ldr	r3, [pc, #8]	; (b9424 <network_ready+0xc>)
   b941c:	681b      	ldr	r3, [r3, #0]
   b941e:	691b      	ldr	r3, [r3, #16]
   b9420:	9301      	str	r3, [sp, #4]
   b9422:	bd08      	pop	{r3, pc}
   b9424:	00030240 	.word	0x00030240

000b9428 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b9428:	b508      	push	{r3, lr}
   b942a:	4b02      	ldr	r3, [pc, #8]	; (b9434 <network_on+0xc>)
   b942c:	681b      	ldr	r3, [r3, #0]
   b942e:	695b      	ldr	r3, [r3, #20]
   b9430:	9301      	str	r3, [sp, #4]
   b9432:	bd08      	pop	{r3, pc}
   b9434:	00030240 	.word	0x00030240

000b9438 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b9438:	b508      	push	{r3, lr}
   b943a:	4b02      	ldr	r3, [pc, #8]	; (b9444 <network_off+0xc>)
   b943c:	681b      	ldr	r3, [r3, #0]
   b943e:	699b      	ldr	r3, [r3, #24]
   b9440:	9301      	str	r3, [sp, #4]
   b9442:	bd08      	pop	{r3, pc}
   b9444:	00030240 	.word	0x00030240

000b9448 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b9448:	b508      	push	{r3, lr}
   b944a:	4b02      	ldr	r3, [pc, #8]	; (b9454 <network_listen+0xc>)
   b944c:	681b      	ldr	r3, [r3, #0]
   b944e:	69db      	ldr	r3, [r3, #28]
   b9450:	9301      	str	r3, [sp, #4]
   b9452:	bd08      	pop	{r3, pc}
   b9454:	00030240 	.word	0x00030240

000b9458 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b9458:	b508      	push	{r3, lr}
   b945a:	4b02      	ldr	r3, [pc, #8]	; (b9464 <network_listening+0xc>)
   b945c:	681b      	ldr	r3, [r3, #0]
   b945e:	6a1b      	ldr	r3, [r3, #32]
   b9460:	9301      	str	r3, [sp, #4]
   b9462:	bd08      	pop	{r3, pc}
   b9464:	00030240 	.word	0x00030240

000b9468 <network_has_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
   b9468:	b508      	push	{r3, lr}
   b946a:	4b02      	ldr	r3, [pc, #8]	; (b9474 <network_has_credentials+0xc>)
   b946c:	681b      	ldr	r3, [r3, #0]
   b946e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9470:	9301      	str	r3, [sp, #4]
   b9472:	bd08      	pop	{r3, pc}
   b9474:	00030240 	.word	0x00030240

000b9478 <network_set_credentials>:
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b9478:	b508      	push	{r3, lr}
   b947a:	4b02      	ldr	r3, [pc, #8]	; (b9484 <network_set_credentials+0xc>)
   b947c:	681b      	ldr	r3, [r3, #0]
   b947e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9480:	9301      	str	r3, [sp, #4]
   b9482:	bd08      	pop	{r3, pc}
   b9484:	00030240 	.word	0x00030240

000b9488 <network_set_listen_timeout>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b9488:	b508      	push	{r3, lr}
   b948a:	4b02      	ldr	r3, [pc, #8]	; (b9494 <network_set_listen_timeout+0xc>)
   b948c:	681b      	ldr	r3, [r3, #0]
   b948e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9490:	9301      	str	r3, [sp, #4]
   b9492:	bd08      	pop	{r3, pc}
   b9494:	00030240 	.word	0x00030240

000b9498 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b9498:	b508      	push	{r3, lr}
   b949a:	4b02      	ldr	r3, [pc, #8]	; (b94a4 <network_get_listen_timeout+0xc>)
   b949c:	681b      	ldr	r3, [r3, #0]
   b949e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b94a0:	9301      	str	r3, [sp, #4]
   b94a2:	bd08      	pop	{r3, pc}
   b94a4:	00030240 	.word	0x00030240

000b94a8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b94a8:	b508      	push	{r3, lr}
   b94aa:	4b02      	ldr	r3, [pc, #8]	; (b94b4 <network_is_on+0xc>)
   b94ac:	681b      	ldr	r3, [r3, #0]
   b94ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b94b0:	9301      	str	r3, [sp, #4]
   b94b2:	bd08      	pop	{r3, pc}
   b94b4:	00030240 	.word	0x00030240

000b94b8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b94b8:	b508      	push	{r3, lr}
   b94ba:	4b02      	ldr	r3, [pc, #8]	; (b94c4 <network_is_off+0xc>)
   b94bc:	681b      	ldr	r3, [r3, #0]
   b94be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b94c0:	9301      	str	r3, [sp, #4]
   b94c2:	bd08      	pop	{r3, pc}
   b94c4:	00030240 	.word	0x00030240

000b94c8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b94c8:	b508      	push	{r3, lr}
   b94ca:	4b02      	ldr	r3, [pc, #8]	; (b94d4 <malloc+0xc>)
   b94cc:	681b      	ldr	r3, [r3, #0]
   b94ce:	681b      	ldr	r3, [r3, #0]
   b94d0:	9301      	str	r3, [sp, #4]
   b94d2:	bd08      	pop	{r3, pc}
   b94d4:	0003021c 	.word	0x0003021c

000b94d8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b94d8:	b508      	push	{r3, lr}
   b94da:	4b02      	ldr	r3, [pc, #8]	; (b94e4 <free+0xc>)
   b94dc:	681b      	ldr	r3, [r3, #0]
   b94de:	685b      	ldr	r3, [r3, #4]
   b94e0:	9301      	str	r3, [sp, #4]
   b94e2:	bd08      	pop	{r3, pc}
   b94e4:	0003021c 	.word	0x0003021c

000b94e8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b94e8:	b508      	push	{r3, lr}
   b94ea:	4b02      	ldr	r3, [pc, #8]	; (b94f4 <realloc+0xc>)
   b94ec:	681b      	ldr	r3, [r3, #0]
   b94ee:	689b      	ldr	r3, [r3, #8]
   b94f0:	9301      	str	r3, [sp, #4]
   b94f2:	bd08      	pop	{r3, pc}
   b94f4:	0003021c 	.word	0x0003021c

000b94f8 <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b94f8:	b508      	push	{r3, lr}
   b94fa:	4b02      	ldr	r3, [pc, #8]	; (b9504 <sscanf+0xc>)
   b94fc:	681b      	ldr	r3, [r3, #0]
   b94fe:	695b      	ldr	r3, [r3, #20]
   b9500:	9301      	str	r3, [sp, #4]
   b9502:	bd08      	pop	{r3, pc}
   b9504:	0003021c 	.word	0x0003021c

000b9508 <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b9508:	b508      	push	{r3, lr}
   b950a:	4b02      	ldr	r3, [pc, #8]	; (b9514 <vsnprintf+0xc>)
   b950c:	681b      	ldr	r3, [r3, #0]
   b950e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9510:	9301      	str	r3, [sp, #4]
   b9512:	bd08      	pop	{r3, pc}
   b9514:	0003021c 	.word	0x0003021c

000b9518 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b9518:	b508      	push	{r3, lr}
   b951a:	4b02      	ldr	r3, [pc, #8]	; (b9524 <abort+0xc>)
   b951c:	681b      	ldr	r3, [r3, #0]
   b951e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9520:	9301      	str	r3, [sp, #4]
   b9522:	bd08      	pop	{r3, pc}
   b9524:	0003021c 	.word	0x0003021c

000b9528 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b9528:	b508      	push	{r3, lr}
   b952a:	4b02      	ldr	r3, [pc, #8]	; (b9534 <_malloc_r+0xc>)
   b952c:	681b      	ldr	r3, [r3, #0]
   b952e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9530:	9301      	str	r3, [sp, #4]
   b9532:	bd08      	pop	{r3, pc}
   b9534:	0003021c 	.word	0x0003021c

000b9538 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b9538:	b508      	push	{r3, lr}
   b953a:	4b02      	ldr	r3, [pc, #8]	; (b9544 <__errno+0xc>)
   b953c:	681b      	ldr	r3, [r3, #0]
   b953e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9540:	9301      	str	r3, [sp, #4]
   b9542:	bd08      	pop	{r3, pc}
   b9544:	0003021c 	.word	0x0003021c

000b9548 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b9548:	b508      	push	{r3, lr}
   b954a:	4b02      	ldr	r3, [pc, #8]	; (b9554 <__assert_func+0xc>)
   b954c:	681b      	ldr	r3, [r3, #0]
   b954e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9550:	9301      	str	r3, [sp, #4]
   b9552:	bd08      	pop	{r3, pc}
   b9554:	0003021c 	.word	0x0003021c

000b9558 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b9558:	b508      	push	{r3, lr}
   b955a:	4b02      	ldr	r3, [pc, #8]	; (b9564 <newlib_impure_ptr_callback+0xc>)
   b955c:	681b      	ldr	r3, [r3, #0]
   b955e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9560:	9301      	str	r3, [sp, #4]
   b9562:	bd08      	pop	{r3, pc}
   b9564:	0003021c 	.word	0x0003021c

000b9568 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b9568:	2100      	movs	r1, #0
   b956a:	f7ff bf19 	b.w	b93a0 <system_delay_ms>

000b956e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b956e:	4770      	bx	lr

000b9570 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b9570:	4770      	bx	lr

000b9572 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b9572:	4770      	bx	lr

000b9574 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9574:	4770      	bx	lr
	...

000b9578 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9578:	4b06      	ldr	r3, [pc, #24]	; (b9594 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b957a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b957c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b957e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b9582:	d005      	beq.n	b9590 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b9584:	4608      	mov	r0, r1
   b9586:	f002 fb2d 	bl	bbbe4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b958a:	2800      	cmp	r0, #0
   b958c:	bf08      	it	eq
   b958e:	2400      	moveq	r4, #0
      }
   b9590:	4620      	mov	r0, r4
   b9592:	bd10      	pop	{r4, pc}
   b9594:	000bf480 	.word	0x000bf480

000b9598 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9598:	4b06      	ldr	r3, [pc, #24]	; (b95b4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b959a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b959c:	b510      	push	{r4, lr}
   b959e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b95a2:	d005      	beq.n	b95b0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b95a4:	4608      	mov	r0, r1
   b95a6:	f002 fb1d 	bl	bbbe4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b95aa:	2800      	cmp	r0, #0
   b95ac:	bf08      	it	eq
   b95ae:	2400      	moveq	r4, #0
      }
   b95b0:	4620      	mov	r0, r4
   b95b2:	bd10      	pop	{r4, pc}
   b95b4:	000bf480 	.word	0x000bf480

000b95b8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b95b8:	4b06      	ldr	r3, [pc, #24]	; (b95d4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b95ba:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b95bc:	b510      	push	{r4, lr}
   b95be:	f100 040c 	add.w	r4, r0, #12
	    ||
   b95c2:	d005      	beq.n	b95d0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b95c4:	4608      	mov	r0, r1
   b95c6:	f002 fb0d 	bl	bbbe4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b95ca:	2800      	cmp	r0, #0
   b95cc:	bf08      	it	eq
   b95ce:	2400      	moveq	r4, #0
      }
   b95d0:	4620      	mov	r0, r4
   b95d2:	bd10      	pop	{r4, pc}
   b95d4:	000bf480 	.word	0x000bf480

000b95d8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b95d8:	b510      	push	{r4, lr}
   b95da:	2168      	movs	r1, #104	; 0x68
   b95dc:	4604      	mov	r4, r0
   b95de:	f7fa fd62 	bl	b40a6 <_ZdlPvj>
   b95e2:	4620      	mov	r0, r4
   b95e4:	bd10      	pop	{r4, pc}

000b95e6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b95e6:	b510      	push	{r4, lr}
   b95e8:	2128      	movs	r1, #40	; 0x28
   b95ea:	4604      	mov	r4, r0
   b95ec:	f7fa fd5b 	bl	b40a6 <_ZdlPvj>
   b95f0:	4620      	mov	r0, r4
   b95f2:	bd10      	pop	{r4, pc}

000b95f4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b95f4:	b510      	push	{r4, lr}
   b95f6:	2130      	movs	r1, #48	; 0x30
   b95f8:	4604      	mov	r4, r0
   b95fa:	f7fa fd54 	bl	b40a6 <_ZdlPvj>
   b95fe:	4620      	mov	r0, r4
   b9600:	bd10      	pop	{r4, pc}

000b9602 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b9602:	2168      	movs	r1, #104	; 0x68
   b9604:	f7fa bd4f 	b.w	b40a6 <_ZdlPvj>

000b9608 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b9608:	2128      	movs	r1, #40	; 0x28
   b960a:	f7fa bd4c 	b.w	b40a6 <_ZdlPvj>

000b960e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b960e:	2130      	movs	r1, #48	; 0x30
   b9610:	f7fa bd49 	b.w	b40a6 <_ZdlPvj>

000b9614 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b9614:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b9616:	2500      	movs	r5, #0
   b9618:	1cec      	adds	r4, r5, #3
   b961a:	428c      	cmp	r4, r1
   b961c:	d80d      	bhi.n	b963a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b961e:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b9620:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b9622:	5d87      	ldrb	r7, [r0, r6]
   b9624:	4297      	cmp	r7, r2
   b9626:	d105      	bne.n	b9634 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b9628:	4426      	add	r6, r4
   b962a:	42b1      	cmp	r1, r6
   b962c:	d305      	bcc.n	b963a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b962e:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b9630:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b9632:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b9634:	3401      	adds	r4, #1
   b9636:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b9638:	e7ee      	b.n	b9618 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b963a:	2000      	movs	r0, #0
   b963c:	e7f9      	b.n	b9632 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b9640 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b9640:	4a02      	ldr	r2, [pc, #8]	; (b964c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b9642:	4903      	ldr	r1, [pc, #12]	; (b9650 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b9644:	200a      	movs	r0, #10
   b9646:	f7ff be93 	b.w	b9370 <panic_>
   b964a:	bf00      	nop
   b964c:	000b9101 	.word	0x000b9101
   b9650:	000bf2e0 	.word	0x000bf2e0

000b9654 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b9654:	b430      	push	{r4, r5}
   b9656:	460d      	mov	r5, r1
   b9658:	4611      	mov	r1, r2
   b965a:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b965c:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b965e:	6809      	ldr	r1, [r1, #0]
   b9660:	6828      	ldr	r0, [r5, #0]
   b9662:	e9d3 4300 	ldrd	r4, r3, [r3]
   b9666:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b9668:	bc30      	pop	{r4, r5}
   b966a:	4760      	bx	ip

000b966c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b966c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b966e:	b538      	push	{r3, r4, r5, lr}
   b9670:	4604      	mov	r4, r0
	switch (__op)
   b9672:	d102      	bne.n	b967a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b9674:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b9676:	6023      	str	r3, [r4, #0]
	}
   b9678:	e003      	b.n	b9682 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b967a:	2a02      	cmp	r2, #2
   b967c:	d003      	beq.n	b9686 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b967e:	2a03      	cmp	r2, #3
   b9680:	d00d      	beq.n	b969e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b9682:	2000      	movs	r0, #0
   b9684:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b9686:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b9688:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b968a:	f7fa fd04 	bl	b4096 <_Znwj>
   b968e:	4603      	mov	r3, r0
   b9690:	2800      	cmp	r0, #0
   b9692:	d0f0      	beq.n	b9676 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b9694:	e895 0003 	ldmia.w	r5, {r0, r1}
   b9698:	e883 0003 	stmia.w	r3, {r0, r1}
   b969c:	e7eb      	b.n	b9676 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b969e:	6800      	ldr	r0, [r0, #0]
   b96a0:	2800      	cmp	r0, #0
   b96a2:	d0ee      	beq.n	b9682 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b96a4:	2108      	movs	r1, #8
   b96a6:	f7fa fcfe 	bl	b40a6 <_ZdlPvj>
   b96aa:	e7ea      	b.n	b9682 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b96ac <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b96ac:	b510      	push	{r4, lr}
      if (_M_manager)
   b96ae:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b96b0:	4604      	mov	r4, r0
      if (_M_manager)
   b96b2:	b113      	cbz	r3, b96ba <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b96b4:	2203      	movs	r2, #3
   b96b6:	4601      	mov	r1, r0
   b96b8:	4798      	blx	r3
    }
   b96ba:	4620      	mov	r0, r4
   b96bc:	bd10      	pop	{r4, pc}

000b96be <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b96be:	b510      	push	{r4, lr}
   b96c0:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b96c2:	3058      	adds	r0, #88	; 0x58
   b96c4:	f7ff fff2 	bl	b96ac <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b96c8:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b96cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b96d0:	f001 bb9c 	b.w	bae0c <_ZN6StringD1Ev>

000b96d4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b96d4:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b96d6:	6843      	ldr	r3, [r0, #4]
   b96d8:	3b01      	subs	r3, #1
    {
   b96da:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b96dc:	6043      	str	r3, [r0, #4]
   b96de:	b963      	cbnz	r3, b96fa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b96e0:	6803      	ldr	r3, [r0, #0]
   b96e2:	689b      	ldr	r3, [r3, #8]
   b96e4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b96e6:	68a3      	ldr	r3, [r4, #8]
   b96e8:	3b01      	subs	r3, #1
   b96ea:	60a3      	str	r3, [r4, #8]
   b96ec:	b92b      	cbnz	r3, b96fa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b96ee:	6823      	ldr	r3, [r4, #0]
   b96f0:	4620      	mov	r0, r4
   b96f2:	68db      	ldr	r3, [r3, #12]
    }
   b96f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b96f8:	4718      	bx	r3
    }
   b96fa:	bd10      	pop	{r4, pc}

000b96fc <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b96fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b9700:	b2da      	uxtb	r2, r3
   b9702:	2a09      	cmp	r2, #9
   b9704:	d801      	bhi.n	b970a <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b9706:	4618      	mov	r0, r3
   b9708:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b970a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b970e:	2b05      	cmp	r3, #5
   b9710:	d801      	bhi.n	b9716 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b9712:	3857      	subs	r0, #87	; 0x57
   b9714:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b9716:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b971a:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b971c:	bf94      	ite	ls
   b971e:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b9720:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b9724:	4770      	bx	lr
	...

000b9728 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b9728:	b510      	push	{r4, lr}
            locked_(false) {
   b972a:	2300      	movs	r3, #0
   b972c:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b972e:	4b04      	ldr	r3, [pc, #16]	; (b9740 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b9730:	4604      	mov	r4, r0
   b9732:	6818      	ldr	r0, [r3, #0]
   b9734:	f7ff fccc 	bl	b90d0 <os_mutex_recursive_lock>
        locked_ = true;
   b9738:	2301      	movs	r3, #1
   b973a:	7023      	strb	r3, [r4, #0]
    }
   b973c:	4620      	mov	r0, r4
   b973e:	bd10      	pop	{r4, pc}
   b9740:	2003e6c0 	.word	0x2003e6c0

000b9744 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b9744:	b510      	push	{r4, lr}
        if (locked_) {
   b9746:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b9748:	4604      	mov	r4, r0
        if (locked_) {
   b974a:	b11b      	cbz	r3, b9754 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b974c:	4b02      	ldr	r3, [pc, #8]	; (b9758 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b974e:	6818      	ldr	r0, [r3, #0]
   b9750:	f7ff fcc6 	bl	b90e0 <os_mutex_recursive_unlock>
    }
   b9754:	4620      	mov	r0, r4
   b9756:	bd10      	pop	{r4, pc}
   b9758:	2003e6c0 	.word	0x2003e6c0

000b975c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b975c:	b082      	sub	sp, #8
   b975e:	4603      	mov	r3, r0
    address_ = addr;
   b9760:	6808      	ldr	r0, [r1, #0]
   b9762:	6849      	ldr	r1, [r1, #4]
   b9764:	466a      	mov	r2, sp
   b9766:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b9768:	466a      	mov	r2, sp
   b976a:	ca03      	ldmia	r2!, {r0, r1}
   b976c:	6018      	str	r0, [r3, #0]
}
   b976e:	4618      	mov	r0, r3
    address_ = addr.address_;
   b9770:	6059      	str	r1, [r3, #4]
}
   b9772:	b002      	add	sp, #8
   b9774:	4770      	bx	lr

000b9776 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b9776:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b9778:	7982      	ldrb	r2, [r0, #6]
   b977a:	798b      	ldrb	r3, [r1, #6]
   b977c:	429a      	cmp	r2, r3
   b977e:	d106      	bne.n	b978e <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b9780:	2206      	movs	r2, #6
   b9782:	f003 f9fb 	bl	bcb7c <memcmp>
   b9786:	fab0 f080 	clz	r0, r0
   b978a:	0940      	lsrs	r0, r0, #5
}
   b978c:	bd08      	pop	{r3, pc}
    return false;
   b978e:	2000      	movs	r0, #0
   b9790:	e7fc      	b.n	b978c <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b9792 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b9792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9796:	6003      	str	r3, [r0, #0]
   b9798:	8083      	strh	r3, [r0, #4]
}
   b979a:	2000      	movs	r0, #0
   b979c:	4770      	bx	lr

000b979e <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b979e:	b508      	push	{r3, lr}
   b97a0:	4602      	mov	r2, r0
        : address_{} {
   b97a2:	2100      	movs	r1, #0
   b97a4:	6001      	str	r1, [r0, #0]
   b97a6:	6041      	str	r1, [r0, #4]
    clear();
   b97a8:	f7ff fff3 	bl	b9792 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b97ac:	7191      	strb	r1, [r2, #6]
}
   b97ae:	4610      	mov	r0, r2
   b97b0:	bd08      	pop	{r3, pc}
	...

000b97b4 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b97b4:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b97b6:	2301      	movs	r3, #1
   b97b8:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b97ba:	4b05      	ldr	r3, [pc, #20]	; (b97d0 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b97bc:	4602      	mov	r2, r0
   b97be:	f103 0110 	add.w	r1, r3, #16
   b97c2:	f853 4b04 	ldr.w	r4, [r3], #4
   b97c6:	f842 4b04 	str.w	r4, [r2], #4
   b97ca:	428b      	cmp	r3, r1
   b97cc:	d1f9      	bne.n	b97c2 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b97ce:	bd10      	pop	{r4, pc}
   b97d0:	000bf48e 	.word	0x000bf48e

000b97d4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b97d4:	b510      	push	{r4, lr}
    if (uuid128) {
   b97d6:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b97d8:	4604      	mov	r4, r0
    if (uuid128) {
   b97da:	b1b1      	cbz	r1, b980a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b97dc:	2a01      	cmp	r2, #1
   b97de:	f101 0210 	add.w	r2, r1, #16
   b97e2:	d10a      	bne.n	b97fa <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b97e4:	4601      	mov	r1, r0
   b97e6:	f853 0b04 	ldr.w	r0, [r3], #4
   b97ea:	f841 0b04 	str.w	r0, [r1], #4
   b97ee:	4293      	cmp	r3, r2
   b97f0:	d1f9      	bne.n	b97e6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b97f2:	2301      	movs	r3, #1
   b97f4:	6123      	str	r3, [r4, #16]
}
   b97f6:	4620      	mov	r0, r4
   b97f8:	bd10      	pop	{r4, pc}
   b97fa:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b97fc:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b9800:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b9804:	429a      	cmp	r2, r3
   b9806:	d1f9      	bne.n	b97fc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b9808:	e7f3      	b.n	b97f2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b980a:	2210      	movs	r2, #16
   b980c:	f003 f9ee 	bl	bcbec <memset>
   b9810:	e7f1      	b.n	b97f6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b9812 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b9812:	b538      	push	{r3, r4, r5, lr}
   b9814:	4604      	mov	r4, r0
   b9816:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b9818:	461a      	mov	r2, r3
   b981a:	f7ff ffdb 	bl	b97d4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b981e:	81a5      	strh	r5, [r4, #12]
}
   b9820:	4620      	mov	r0, r4
   b9822:	bd38      	pop	{r3, r4, r5, pc}

000b9824 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b9824:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b9826:	6902      	ldr	r2, [r0, #16]
   b9828:	b922      	cbnz	r2, b9834 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b982a:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b982c:	3800      	subs	r0, #0
   b982e:	bf18      	it	ne
   b9830:	2001      	movne	r0, #1
}
   b9832:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b9834:	4902      	ldr	r1, [pc, #8]	; (b9840 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b9836:	2210      	movs	r2, #16
   b9838:	f003 f9a0 	bl	bcb7c <memcmp>
   b983c:	e7f6      	b.n	b982c <_ZNK8particle7BleUuid7isValidEv+0x8>
   b983e:	bf00      	nop
   b9840:	000bf4ae 	.word	0x000bf4ae

000b9844 <_ZNK8particle7BleUuid4typeEv>:
}
   b9844:	6900      	ldr	r0, [r0, #16]
   b9846:	4770      	bx	lr

000b9848 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b9848:	b538      	push	{r3, r4, r5, lr}
   b984a:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b984c:	2214      	movs	r2, #20
   b984e:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b9850:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b9852:	f003 f9cb 	bl	bcbec <memset>
    if (type_ == BleUuidType::SHORT) {
   b9856:	6923      	ldr	r3, [r4, #16]
   b9858:	b91b      	cbnz	r3, b9862 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b985a:	89a3      	ldrh	r3, [r4, #12]
   b985c:	802b      	strh	r3, [r5, #0]
}
   b985e:	4628      	mov	r0, r5
   b9860:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b9862:	2301      	movs	r3, #1
   b9864:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b9866:	4621      	mov	r1, r4
   b9868:	462b      	mov	r3, r5
   b986a:	f104 0210 	add.w	r2, r4, #16
   b986e:	f851 0b04 	ldr.w	r0, [r1], #4
   b9872:	f843 0b04 	str.w	r0, [r3], #4
   b9876:	4291      	cmp	r1, r2
   b9878:	d1f9      	bne.n	b986e <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b987a:	e7f0      	b.n	b985e <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b987c <_ZNK8particle7BleUuid7shortedEv>:
}
   b987c:	8980      	ldrh	r0, [r0, #12]
   b987e:	4770      	bx	lr

000b9880 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b9880:	4770      	bx	lr

000b9882 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b9882:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b9884:	6902      	ldr	r2, [r0, #16]
   b9886:	690b      	ldr	r3, [r1, #16]
   b9888:	429a      	cmp	r2, r3
   b988a:	d106      	bne.n	b989a <_ZNK8particle7BleUuideqERKS0_+0x18>
   b988c:	2210      	movs	r2, #16
   b988e:	f003 f975 	bl	bcb7c <memcmp>
   b9892:	fab0 f080 	clz	r0, r0
   b9896:	0940      	lsrs	r0, r0, #5
}
   b9898:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b989a:	2000      	movs	r0, #0
   b989c:	e7fc      	b.n	b9898 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b98a0 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b98a0:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b98a2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b98a6:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b98a8:	4b34      	ldr	r3, [pc, #208]	; (b997c <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b98aa:	460c      	mov	r4, r1
   b98ac:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b98ae:	4602      	mov	r2, r0
   b98b0:	f103 0110 	add.w	r1, r3, #16
   b98b4:	f853 0b04 	ldr.w	r0, [r3], #4
   b98b8:	f842 0b04 	str.w	r0, [r2], #4
   b98bc:	428b      	cmp	r3, r1
   b98be:	d1f9      	bne.n	b98b4 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b98c0:	b344      	cbz	r4, b9914 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b98c2:	2124      	movs	r1, #36	; 0x24
   b98c4:	4620      	mov	r0, r4
   b98c6:	f003 f9f5 	bl	bccb4 <strnlen>
   b98ca:	2804      	cmp	r0, #4
   b98cc:	f04f 0500 	mov.w	r5, #0
   b98d0:	d123      	bne.n	b991a <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b98d2:	f8ad 5004 	strh.w	r5, [sp, #4]
   b98d6:	af01      	add	r7, sp, #4
   b98d8:	1ca5      	adds	r5, r4, #2
   b98da:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b98dc:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b98e0:	f7ff ff0c 	bl	b96fc <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b98e4:	f1b0 0800 	subs.w	r8, r0, #0
   b98e8:	db12      	blt.n	b9910 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b98ea:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b98ee:	f7ff ff05 	bl	b96fc <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b98f2:	2800      	cmp	r0, #0
   b98f4:	db0c      	blt.n	b9910 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b98f6:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b98f8:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b98fc:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b98fe:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b9902:	d1eb      	bne.n	b98dc <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b9904:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b9908:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b990a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b990e:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b9910:	2300      	movs	r3, #0
   b9912:	6133      	str	r3, [r6, #16]
}
   b9914:	b002      	add	sp, #8
   b9916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b991a:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b991e:	2124      	movs	r1, #36	; 0x24
   b9920:	4620      	mov	r0, r4
   b9922:	f003 f9c7 	bl	bccb4 <strnlen>
   b9926:	42a8      	cmp	r0, r5
   b9928:	d807      	bhi.n	b993a <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b992a:	4642      	mov	r2, r8
   b992c:	2100      	movs	r1, #0
   b992e:	4630      	mov	r0, r6
}
   b9930:	b002      	add	sp, #8
   b9932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b9936:	f003 b959 	b.w	bcbec <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b993a:	f1b8 0f00 	cmp.w	r8, #0
   b993e:	d0e9      	beq.n	b9914 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b9940:	5d60      	ldrb	r0, [r4, r5]
   b9942:	f7ff fedb 	bl	b96fc <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b9946:	0603      	lsls	r3, r0, #24
   b9948:	d415      	bmi.n	b9976 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b994a:	0100      	lsls	r0, r0, #4
   b994c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b9950:	b2c7      	uxtb	r7, r0
   b9952:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b9956:	2124      	movs	r1, #36	; 0x24
   b9958:	4620      	mov	r0, r4
   b995a:	f003 f9ab 	bl	bccb4 <strnlen>
   b995e:	3501      	adds	r5, #1
   b9960:	42a8      	cmp	r0, r5
   b9962:	d908      	bls.n	b9976 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b9964:	5d60      	ldrb	r0, [r4, r5]
   b9966:	f7ff fec9 	bl	b96fc <_ZN8particle11hexToNibbleEc>
   b996a:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b996c:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b996e:	bfa4      	itt	ge
   b9970:	4338      	orrge	r0, r7
   b9972:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b9976:	3501      	adds	r5, #1
   b9978:	e7d1      	b.n	b991e <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b997a:	bf00      	nop
   b997c:	000bf48e 	.word	0x000bf48e

000b9980 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b9980:	b513      	push	{r0, r1, r4, lr}
   b9982:	4604      	mov	r4, r0
   b9984:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b9986:	f7ff ff15 	bl	b97b4 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b998a:	4620      	mov	r0, r4
   b998c:	9901      	ldr	r1, [sp, #4]
   b998e:	f7ff ff87 	bl	b98a0 <_ZN8particle7BleUuid9constructEPKc>
}
   b9992:	4620      	mov	r0, r4
   b9994:	b002      	add	sp, #8
   b9996:	bd10      	pop	{r4, pc}

000b9998 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b9998:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b999a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b999e:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b99a0:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b99a2:	8043      	strh	r3, [r0, #2]
   b99a4:	220e      	movs	r2, #14
   b99a6:	4629      	mov	r1, r5
   b99a8:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b99aa:	7105      	strb	r5, [r0, #4]
   b99ac:	3006      	adds	r0, #6
   b99ae:	f003 f91d 	bl	bcbec <memset>
   b99b2:	f104 0014 	add.w	r0, r4, #20
   b99b6:	f7ff fefd 	bl	b97b4 <_ZN8particle7BleUuidC1Ev>
   b99ba:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b99be:	f7ff fef9 	bl	b97b4 <_ZN8particle7BleUuidC1Ev>
   b99c2:	4904      	ldr	r1, [pc, #16]	; (b99d4 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b99c4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b99c8:	f001 fa6b 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b99cc:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b99ce:	4620      	mov	r0, r4
   b99d0:	bd38      	pop	{r3, r4, r5, pc}
   b99d2:	bf00      	nop
   b99d4:	000bf29a 	.word	0x000bf29a

000b99d8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b99d8:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b99da:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b99de:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b99e2:	4293      	cmp	r3, r2
   b99e4:	4618      	mov	r0, r3
   b99e6:	d006      	beq.n	b99f6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b99e8:	6804      	ldr	r4, [r0, #0]
   b99ea:	8824      	ldrh	r4, [r4, #0]
   b99ec:	428c      	cmp	r4, r1
   b99ee:	f103 0308 	add.w	r3, r3, #8
   b99f2:	d1f6      	bne.n	b99e2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b99f4:	bd10      	pop	{r4, pc}
        return nullptr;
   b99f6:	2000      	movs	r0, #0
   b99f8:	e7fc      	b.n	b99f4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b99fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b99fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b99fe:	4606      	mov	r6, r0
   b9a00:	b085      	sub	sp, #20
   b9a02:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b9a04:	460d      	mov	r5, r1
   b9a06:	2900      	cmp	r1, #0
   b9a08:	d050      	beq.n	b9aac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b9a0a:	2a00      	cmp	r2, #0
   b9a0c:	d04e      	beq.n	b9aac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b9a0e:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b9a10:	7823      	ldrb	r3, [r4, #0]
   b9a12:	2af4      	cmp	r2, #244	; 0xf4
   b9a14:	bf28      	it	cs
   b9a16:	22f4      	movcs	r2, #244	; 0xf4
   b9a18:	b343      	cbz	r3, b9a6c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b9a1a:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b9a1c:	0798      	lsls	r0, r3, #30
   b9a1e:	d509      	bpl.n	b9a34 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b9a20:	89a0      	ldrh	r0, [r4, #12]
   b9a22:	9203      	str	r2, [sp, #12]
   b9a24:	2300      	movs	r3, #0
   b9a26:	f7ff faed 	bl	b9004 <hal_ble_gatt_server_set_characteristic_value>
   b9a2a:	2800      	cmp	r0, #0
   b9a2c:	9a03      	ldr	r2, [sp, #12]
   b9a2e:	da03      	bge.n	b9a38 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b9a30:	b005      	add	sp, #20
   b9a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b9a34:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b9a38:	6834      	ldr	r4, [r6, #0]
   b9a3a:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b9a3c:	06d9      	lsls	r1, r3, #27
   b9a3e:	d509      	bpl.n	b9a54 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b9a40:	2f01      	cmp	r7, #1
   b9a42:	d007      	beq.n	b9a54 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b9a44:	89a0      	ldrh	r0, [r4, #12]
   b9a46:	2300      	movs	r3, #0
   b9a48:	4629      	mov	r1, r5
}
   b9a4a:	b005      	add	sp, #20
   b9a4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b9a50:	f7ff bb0a 	b.w	b9068 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b9a54:	069b      	lsls	r3, r3, #26
   b9a56:	d5eb      	bpl.n	b9a30 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b9a58:	2f02      	cmp	r7, #2
   b9a5a:	d0e9      	beq.n	b9a30 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b9a5c:	89a0      	ldrh	r0, [r4, #12]
   b9a5e:	2300      	movs	r3, #0
   b9a60:	4629      	mov	r1, r5
}
   b9a62:	b005      	add	sp, #20
   b9a64:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b9a68:	f7ff bb08 	b.w	b907c <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b9a6c:	8860      	ldrh	r0, [r4, #2]
   b9a6e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b9a72:	4288      	cmp	r0, r1
   b9a74:	d01c      	beq.n	b9ab0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b9a76:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b9a78:	074e      	lsls	r6, r1, #29
   b9a7a:	d501      	bpl.n	b9a80 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b9a7c:	2f01      	cmp	r7, #1
   b9a7e:	d104      	bne.n	b9a8a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b9a80:	070b      	lsls	r3, r1, #28
   b9a82:	d409      	bmi.n	b9a98 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b9a84:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b9a88:	e7d2      	b.n	b9a30 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b9a8a:	89a1      	ldrh	r1, [r4, #12]
   b9a8c:	9300      	str	r3, [sp, #0]
   b9a8e:	4613      	mov	r3, r2
   b9a90:	462a      	mov	r2, r5
   b9a92:	f7ff facb 	bl	b902c <hal_ble_gatt_client_write_without_response>
   b9a96:	e7cb      	b.n	b9a30 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b9a98:	2f02      	cmp	r7, #2
   b9a9a:	d0f3      	beq.n	b9a84 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b9a9c:	2300      	movs	r3, #0
   b9a9e:	89a1      	ldrh	r1, [r4, #12]
   b9aa0:	9300      	str	r3, [sp, #0]
   b9aa2:	4613      	mov	r3, r2
   b9aa4:	462a      	mov	r2, r5
   b9aa6:	f7ff fab7 	bl	b9018 <hal_ble_gatt_client_write_with_response>
   b9aaa:	e7c1      	b.n	b9a30 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b9aac:	4802      	ldr	r0, [pc, #8]	; (b9ab8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b9aae:	e7bf      	b.n	b9a30 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b9ab0:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b9ab4:	e7bc      	b.n	b9a30 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b9ab6:	bf00      	nop
   b9ab8:	fffffef2 	.word	0xfffffef2

000b9abc <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b9abc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9abe:	460c      	mov	r4, r1
   b9ac0:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b9ac2:	21f4      	movs	r1, #244	; 0xf4
   b9ac4:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b9ac6:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b9ac8:	f003 f8f4 	bl	bccb4 <strnlen>
   b9acc:	9b01      	ldr	r3, [sp, #4]
   b9ace:	4602      	mov	r2, r0
   b9ad0:	4621      	mov	r1, r4
   b9ad2:	4628      	mov	r0, r5
}
   b9ad4:	b003      	add	sp, #12
   b9ad6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b9ada:	f7ff bf8f 	b.w	b99fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000b9ae0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b9ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9ae4:	2600      	movs	r6, #0
   b9ae6:	6006      	str	r6, [r0, #0]
   b9ae8:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9aea:	2028      	movs	r0, #40	; 0x28
   b9aec:	460c      	mov	r4, r1
   b9aee:	f7fa fad2 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b9af2:	1e05      	subs	r5, r0, #0
   b9af4:	f105 080c 	add.w	r8, r5, #12
   b9af8:	d00f      	beq.n	b9b1a <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b9afa:	2301      	movs	r3, #1
   b9afc:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b9b00:	4b08      	ldr	r3, [pc, #32]	; (b9b24 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b9b02:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b9b04:	4640      	mov	r0, r8
   b9b06:	f7ff fe55 	bl	b97b4 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b9b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b9b0c:	622e      	str	r6, [r5, #32]
   b9b0e:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b9b12:	4646      	mov	r6, r8
   b9b14:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b9b16:	6823      	ldr	r3, [r4, #0]
   b9b18:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b9b1a:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b9b1e:	4638      	mov	r0, r7
   b9b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9b24:	000bf450 	.word	0x000bf450

000b9b28 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b9b28:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9b2a:	2500      	movs	r5, #0
   b9b2c:	6005      	str	r5, [r0, #0]
   b9b2e:	4606      	mov	r6, r0
   b9b30:	2030      	movs	r0, #48	; 0x30
   b9b32:	f7fa fab0 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b9b36:	4604      	mov	r4, r0
   b9b38:	b188      	cbz	r0, b9b5e <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b9b3a:	2301      	movs	r3, #1
   b9b3c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b9b40:	4b09      	ldr	r3, [pc, #36]	; (b9b68 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b9b42:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b9b44:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b9b48:	8183      	strh	r3, [r0, #12]
   b9b4a:	300e      	adds	r0, #14
   b9b4c:	f7ff fe27 	bl	b979e <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b9b50:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b9b54:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b9b58:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b9b5c:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b9b5e:	6074      	str	r4, [r6, #4]
   b9b60:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b9b62:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b9b64:	4630      	mov	r0, r6
   b9b66:	bd70      	pop	{r4, r5, r6, pc}
   b9b68:	000bf46c 	.word	0x000bf46c

000b9b6c <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b9b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9b6e:	460d      	mov	r5, r1
   b9b70:	4604      	mov	r4, r0
    WiringBleLock lk;
   b9b72:	a801      	add	r0, sp, #4
   b9b74:	f7ff fdd8 	bl	b9728 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b9b78:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b9b7a:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b9b7e:	6023      	str	r3, [r4, #0]
   b9b80:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b9b84:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b9b86:	a801      	add	r0, sp, #4
   b9b88:	f7ff fddc 	bl	b9744 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b9b8c:	4620      	mov	r0, r4
   b9b8e:	b003      	add	sp, #12
   b9b90:	bd30      	pop	{r4, r5, pc}

000b9b92 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b9b92:	b530      	push	{r4, r5, lr}
   b9b94:	4605      	mov	r5, r0
   b9b96:	b087      	sub	sp, #28
   b9b98:	460c      	mov	r4, r1
    WiringBleLock lk;
   b9b9a:	a801      	add	r0, sp, #4
   b9b9c:	f7ff fdc4 	bl	b9728 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b9ba0:	682a      	ldr	r2, [r5, #0]
   b9ba2:	6823      	ldr	r3, [r4, #0]
   b9ba4:	8812      	ldrh	r2, [r2, #0]
   b9ba6:	881b      	ldrh	r3, [r3, #0]
   b9ba8:	429a      	cmp	r2, r3
   b9baa:	d10d      	bne.n	b9bc8 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b9bac:	4629      	mov	r1, r5
   b9bae:	a802      	add	r0, sp, #8
   b9bb0:	f7ff ffdc 	bl	b9b6c <_ZNK8particle13BlePeerDevice7addressEv>
   b9bb4:	4621      	mov	r1, r4
   b9bb6:	a804      	add	r0, sp, #16
   b9bb8:	f7ff ffd8 	bl	b9b6c <_ZNK8particle13BlePeerDevice7addressEv>
   b9bbc:	a904      	add	r1, sp, #16
   b9bbe:	a802      	add	r0, sp, #8
   b9bc0:	f7ff fdd9 	bl	b9776 <_ZNK8particle10BleAddresseqERKS0_>
   b9bc4:	4604      	mov	r4, r0
   b9bc6:	b900      	cbnz	r0, b9bca <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b9bc8:	2400      	movs	r4, #0
    WiringBleLock lk;
   b9bca:	a801      	add	r0, sp, #4
   b9bcc:	f7ff fdba 	bl	b9744 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b9bd0:	4620      	mov	r0, r4
   b9bd2:	b007      	add	sp, #28
   b9bd4:	bd30      	pop	{r4, r5, pc}
	...

000b9bd8 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b9bd8:	b510      	push	{r4, lr}
   b9bda:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b9bdc:	2064      	movs	r0, #100	; 0x64
   b9bde:	f7fa fa5a 	bl	b4096 <_Znwj>
   b9be2:	b168      	cbz	r0, b9c00 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b9be4:	2300      	movs	r3, #0
   b9be6:	e9c0 3300 	strd	r3, r3, [r0]
   b9bea:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b9bee:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b9bf2:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b9bf6:	6203      	str	r3, [r0, #32]
   b9bf8:	62c3      	str	r3, [r0, #44]	; 0x2c
   b9bfa:	63c3      	str	r3, [r0, #60]	; 0x3c
   b9bfc:	64c3      	str	r3, [r0, #76]	; 0x4c
   b9bfe:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b9c00:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b9c02:	b920      	cbnz	r0, b9c0e <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b9c04:	4a0a      	ldr	r2, [pc, #40]	; (b9c30 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b9c06:	490b      	ldr	r1, [pc, #44]	; (b9c34 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b9c08:	200a      	movs	r0, #10
   b9c0a:	f7ff fbb1 	bl	b9370 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b9c0e:	2000      	movs	r0, #0
   b9c10:	f7ff f9c4 	bl	b8f9c <hal_ble_stack_init>
   b9c14:	b120      	cbz	r0, b9c20 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b9c16:	4a06      	ldr	r2, [pc, #24]	; (b9c30 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b9c18:	4907      	ldr	r1, [pc, #28]	; (b9c38 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b9c1a:	200a      	movs	r0, #10
   b9c1c:	f7ff fba8 	bl	b9370 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b9c20:	6821      	ldr	r1, [r4, #0]
   b9c22:	4806      	ldr	r0, [pc, #24]	; (b9c3c <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b9c24:	2200      	movs	r2, #0
   b9c26:	f7ff fa15 	bl	b9054 <hal_ble_set_callback_on_periph_link_events>
}
   b9c2a:	4620      	mov	r0, r4
   b9c2c:	bd10      	pop	{r4, pc}
   b9c2e:	bf00      	nop
   b9c30:	000b9101 	.word	0x000b9101
   b9c34:	000bf2e0 	.word	0x000bf2e0
   b9c38:	000bf31e 	.word	0x000bf31e
   b9c3c:	000ba1c1 	.word	0x000ba1c1

000b9c40 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b9c40:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b9c42:	4c0a      	ldr	r4, [pc, #40]	; (b9c6c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b9c44:	7823      	ldrb	r3, [r4, #0]
   b9c46:	f3bf 8f5b 	dmb	ish
   b9c4a:	07db      	lsls	r3, r3, #31
   b9c4c:	d40c      	bmi.n	b9c68 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b9c4e:	4620      	mov	r0, r4
   b9c50:	f7fa fa2b 	bl	b40aa <__cxa_guard_acquire>
   b9c54:	b140      	cbz	r0, b9c68 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b9c56:	4806      	ldr	r0, [pc, #24]	; (b9c70 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b9c58:	f7ff ffbe 	bl	b9bd8 <_ZN8particle14BleLocalDeviceC1Ev>
   b9c5c:	4620      	mov	r0, r4
   b9c5e:	f7fa fa29 	bl	b40b4 <__cxa_guard_release>
   b9c62:	4804      	ldr	r0, [pc, #16]	; (b9c74 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b9c64:	f002 ff80 	bl	bcb68 <atexit>
    return instance;
}
   b9c68:	4801      	ldr	r0, [pc, #4]	; (b9c70 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b9c6a:	bd10      	pop	{r4, pc}
   b9c6c:	2003e6b8 	.word	0x2003e6b8
   b9c70:	2003e6c4 	.word	0x2003e6c4
   b9c74:	000b9e8d 	.word	0x000b9e8d

000b9c78 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b9c78:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b9c7a:	6803      	ldr	r3, [r0, #0]
   b9c7c:	3b09      	subs	r3, #9
   b9c7e:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b9c80:	b08d      	sub	sp, #52	; 0x34
   b9c82:	4604      	mov	r4, r0
   b9c84:	460d      	mov	r5, r1
    switch (event->type) {
   b9c86:	d811      	bhi.n	b9cac <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b9c88:	f7ff ffda 	bl	b9c40 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b9c8c:	88a1      	ldrh	r1, [r4, #4]
   b9c8e:	6800      	ldr	r0, [r0, #0]
   b9c90:	f7ff fea2 	bl	b99d8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b9c94:	4603      	mov	r3, r0
   b9c96:	b958      	cbnz	r0, b9cb0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b9c98:	2220      	movs	r2, #32
   b9c9a:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b9c9e:	4a0b      	ldr	r2, [pc, #44]	; (b9ccc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b9ca0:	9200      	str	r2, [sp, #0]
   b9ca2:	490b      	ldr	r1, [pc, #44]	; (b9cd0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b9ca4:	aa04      	add	r2, sp, #16
   b9ca6:	2032      	movs	r0, #50	; 0x32
   b9ca8:	f7ff fb6a 	bl	b9380 <log_message>
}
   b9cac:	b00d      	add	sp, #52	; 0x34
   b9cae:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b9cb0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b9cb2:	2a00      	cmp	r2, #0
   b9cb4:	d0fa      	beq.n	b9cac <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b9cb6:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9cba:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b9cbe:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b9cc2:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b9cc4:	aa04      	add	r2, sp, #16
   b9cc6:	a903      	add	r1, sp, #12
   b9cc8:	47a0      	blx	r4
}
   b9cca:	e7ef      	b.n	b9cac <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b9ccc:	000bf360 	.word	0x000bf360
   b9cd0:	000bf2f7 	.word	0x000bf2f7

000b9cd4 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b9cd4:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b9cd6:	2000      	movs	r0, #0
   b9cd8:	f7ff f960 	bl	b8f9c <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b9cdc:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b9ce0:	bd08      	pop	{r3, pc}

000b9ce2 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b9ce2:	b919      	cbnz	r1, b9cec <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b9ce4:	460a      	mov	r2, r1
   b9ce6:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b9ce8:	f7ff b960 	b.w	b8fac <hal_ble_gap_set_advertising_data>
   b9cec:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9cf0:	2200      	movs	r2, #0
   b9cf2:	e7f9      	b.n	b9ce8 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b9cf4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b9cf4:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b9cf6:	1e14      	subs	r4, r2, #0
   b9cf8:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b9cfa:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b9cfc:	db02      	blt.n	b9d04 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b9cfe:	1862      	adds	r2, r4, r1
   b9d00:	429a      	cmp	r2, r3
   b9d02:	dd00      	ble.n	b9d06 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b9d04:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b9d06:	682a      	ldr	r2, [r5, #0]
   b9d08:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b9d0a:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b9d0c:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9d0e:	1a52      	subs	r2, r2, r1
   b9d10:	f002 ff52 	bl	bcbb8 <memmove>
    size_ -= n;
   b9d14:	686a      	ldr	r2, [r5, #4]
   b9d16:	1b12      	subs	r2, r2, r4
   b9d18:	606a      	str	r2, [r5, #4]
}
   b9d1a:	bd38      	pop	{r3, r4, r5, pc}

000b9d1c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b9d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b9d1e:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b9d20:	4604      	mov	r4, r0
   b9d22:	460d      	mov	r5, r1
   b9d24:	ab01      	add	r3, sp, #4
   b9d26:	e9d0 0100 	ldrd	r0, r1, [r0]
   b9d2a:	f7ff fc73 	bl	b9614 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b9d2e:	4602      	mov	r2, r0
   b9d30:	b138      	cbz	r0, b9d42 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b9d32:	9901      	ldr	r1, [sp, #4]
   b9d34:	4620      	mov	r0, r4
   b9d36:	f7ff ffdd 	bl	b9cf4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b9d3a:	4629      	mov	r1, r5
   b9d3c:	4620      	mov	r0, r4
   b9d3e:	f7ff ffed 	bl	b9d1c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b9d42:	b003      	add	sp, #12
   b9d44:	bd30      	pop	{r4, r5, pc}

000b9d46 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b9d46:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b9d48:	460c      	mov	r4, r1
   b9d4a:	b929      	cbnz	r1, b9d58 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b9d4c:	460a      	mov	r2, r1
   b9d4e:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b9d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b9d54:	f7ff b932 	b.w	b8fbc <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b9d58:	2101      	movs	r1, #1
   b9d5a:	4620      	mov	r0, r4
   b9d5c:	f7ff ffde 	bl	b9d1c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b9d60:	e9d4 0100 	ldrd	r0, r1, [r4]
   b9d64:	2200      	movs	r2, #0
   b9d66:	e7f3      	b.n	b9d50 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b9d68 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b9d68:	b538      	push	{r3, r4, r5, lr}
   b9d6a:	4604      	mov	r4, r0
   b9d6c:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b9d6e:	f7ff ffb8 	bl	b9ce2 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b9d72:	2800      	cmp	r0, #0
   b9d74:	db0a      	blt.n	b9d8c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b9d76:	4629      	mov	r1, r5
   b9d78:	4620      	mov	r0, r4
   b9d7a:	f7ff ffe4 	bl	b9d46 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b9d7e:	2800      	cmp	r0, #0
   b9d80:	db04      	blt.n	b9d8c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b9d82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b9d86:	2000      	movs	r0, #0
   b9d88:	f7ff b920 	b.w	b8fcc <hal_ble_gap_start_advertising>
}
   b9d8c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b9d90 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b9d90:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b9d92:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b9d94:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b9d96:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9d98:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b9d9a:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9d9c:	f7fa f97b 	bl	b4096 <_Znwj>
   b9da0:	b118      	cbz	r0, b9daa <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b9da2:	682b      	ldr	r3, [r5, #0]
   b9da4:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b9da6:	686b      	ldr	r3, [r5, #4]
   b9da8:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b9daa:	4b03      	ldr	r3, [pc, #12]	; (b9db8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b9dac:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b9dae:	4b03      	ldr	r3, [pc, #12]	; (b9dbc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9db0:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b9db2:	60a3      	str	r3, [r4, #8]
      }
   b9db4:	4620      	mov	r0, r4
   b9db6:	bd38      	pop	{r3, r4, r5, pc}
   b9db8:	000b9655 	.word	0x000b9655
   b9dbc:	000b966d 	.word	0x000b966d

000b9dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b9dc0:	680b      	ldr	r3, [r1, #0]
   b9dc2:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b9dc4:	b113      	cbz	r3, b9dcc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b9dc6:	685a      	ldr	r2, [r3, #4]
   b9dc8:	3201      	adds	r2, #1
   b9dca:	605a      	str	r2, [r3, #4]
      }
   b9dcc:	4770      	bx	lr

000b9dce <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b9dce:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9dd0:	f851 3b04 	ldr.w	r3, [r1], #4
   b9dd4:	4604      	mov	r4, r0
   b9dd6:	f840 3b04 	str.w	r3, [r0], #4
   b9dda:	f7ff fff1 	bl	b9dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b9dde:	6823      	ldr	r3, [r4, #0]
   b9de0:	b90b      	cbnz	r3, b9de6 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b9de2:	f7ff fc2d 	bl	b9640 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b9de6:	4620      	mov	r0, r4
   b9de8:	bd10      	pop	{r4, pc}

000b9dea <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b9dea:	b510      	push	{r4, lr}
   b9dec:	f851 3b04 	ldr.w	r3, [r1], #4
   b9df0:	4604      	mov	r4, r0
   b9df2:	f840 3b04 	str.w	r3, [r0], #4
   b9df6:	f7ff ffe3 	bl	b9dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b9dfa:	4620      	mov	r0, r4
   b9dfc:	bd10      	pop	{r4, pc}

000b9dfe <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b9dfe:	b510      	push	{r4, lr}
   b9e00:	f851 3b04 	ldr.w	r3, [r1], #4
   b9e04:	4604      	mov	r4, r0
   b9e06:	f840 3b04 	str.w	r3, [r0], #4
   b9e0a:	f7ff ffd9 	bl	b9dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b9e0e:	4620      	mov	r0, r4
   b9e10:	bd10      	pop	{r4, pc}

000b9e12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b9e12:	b510      	push	{r4, lr}
   b9e14:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b9e16:	6800      	ldr	r0, [r0, #0]
   b9e18:	b108      	cbz	r0, b9e1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b9e1a:	f7ff fc5b 	bl	b96d4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b9e1e:	4620      	mov	r0, r4
   b9e20:	bd10      	pop	{r4, pc}

000b9e22 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b9e22:	b510      	push	{r4, lr}
   b9e24:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b9e26:	3004      	adds	r0, #4
   b9e28:	f7ff fff3 	bl	b9e12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9e2c:	4620      	mov	r0, r4
   b9e2e:	bd10      	pop	{r4, pc}

000b9e30 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9e30:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b9e32:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9e36:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b9e38:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b9e3c:	42ae      	cmp	r6, r5
   b9e3e:	d004      	beq.n	b9e4a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b9e40:	1d28      	adds	r0, r5, #4
   b9e42:	f7ff ffe6 	bl	b9e12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9e46:	3508      	adds	r5, #8
   b9e48:	e7f8      	b.n	b9e3c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b9e4a:	6820      	ldr	r0, [r4, #0]
   b9e4c:	f7ff fb44 	bl	b94d8 <free>
}
   b9e50:	4620      	mov	r0, r4
   b9e52:	bd70      	pop	{r4, r5, r6, pc}

000b9e54 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9e54:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b9e56:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9e5a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b9e5c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b9e60:	42ae      	cmp	r6, r5
   b9e62:	d004      	beq.n	b9e6e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b9e64:	1d28      	adds	r0, r5, #4
   b9e66:	f7ff ffd4 	bl	b9e12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9e6a:	3508      	adds	r5, #8
   b9e6c:	e7f8      	b.n	b9e60 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b9e6e:	6820      	ldr	r0, [r4, #0]
   b9e70:	f7ff fb32 	bl	b94d8 <free>
}
   b9e74:	4620      	mov	r0, r4
   b9e76:	bd70      	pop	{r4, r5, r6, pc}

000b9e78 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b9e78:	b510      	push	{r4, lr}
   b9e7a:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b9e7c:	3024      	adds	r0, #36	; 0x24
   b9e7e:	f7ff ffe9 	bl	b9e54 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b9e82:	f104 0018 	add.w	r0, r4, #24
   b9e86:	f7ff ffd3 	bl	b9e30 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b9e8a:	bd10      	pop	{r4, pc}

000b9e8c <__tcf_0>:
    static BleLocalDevice instance;
   b9e8c:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b9e8e:	4b17      	ldr	r3, [pc, #92]	; (b9eec <__tcf_0+0x60>)
   b9e90:	681c      	ldr	r4, [r3, #0]
   b9e92:	b354      	cbz	r4, b9eea <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b9e94:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b9e98:	f7ff fc08 	bl	b96ac <_ZNSt14_Function_baseD1Ev>
   b9e9c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b9ea0:	f7ff fc04 	bl	b96ac <_ZNSt14_Function_baseD1Ev>
   b9ea4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b9ea8:	f7ff fc00 	bl	b96ac <_ZNSt14_Function_baseD1Ev>
   b9eac:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b9eb0:	f7ff fbfc 	bl	b96ac <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b9eb4:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b9eb8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b9ebc:	42ae      	cmp	r6, r5
   b9ebe:	d004      	beq.n	b9eca <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b9ec0:	1d28      	adds	r0, r5, #4
   b9ec2:	f7ff ffa6 	bl	b9e12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9ec6:	3508      	adds	r5, #8
   b9ec8:	e7f8      	b.n	b9ebc <__tcf_0+0x30>
    ::free(ptr);
   b9eca:	69a0      	ldr	r0, [r4, #24]
   b9ecc:	f7ff fb04 	bl	b94d8 <free>
    ~BleLocalDeviceImpl() = default;
   b9ed0:	f104 000c 	add.w	r0, r4, #12
   b9ed4:	f7ff ffbe 	bl	b9e54 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b9ed8:	4620      	mov	r0, r4
   b9eda:	f7ff ffa9 	bl	b9e30 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b9ede:	4620      	mov	r0, r4
   b9ee0:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b9ee2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9ee6:	f7fa b8de 	b.w	b40a6 <_ZdlPvj>
   b9eea:	bd70      	pop	{r4, r5, r6, pc}
   b9eec:	2003e6c4 	.word	0x2003e6c4

000b9ef0 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b9ef0:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b9ef2:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b9ef4:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b9ef8:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b9efc:	6803      	ldr	r3, [r0, #0]
   b9efe:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b9f00:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b9f02:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b9f04:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b9f06:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b9f08:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b9f0a:	f7ff ff82 	bl	b9e12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b9f0e:	b002      	add	sp, #8
   b9f10:	bd10      	pop	{r4, pc}

000b9f12 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b9f12:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b9f14:	b510      	push	{r4, lr}
      if (_M_empty())
   b9f16:	b90a      	cbnz	r2, b9f1c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b9f18:	f001 fe61 	bl	bbbde <_ZSt25__throw_bad_function_callv>
    }
   b9f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9f20:	68c3      	ldr	r3, [r0, #12]
   b9f22:	4718      	bx	r3

000b9f24 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b9f24:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b9f26:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b9f28:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b9f2a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b9f2c:	dd03      	ble.n	b9f36 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b9f2e:	f7ff fadb 	bl	b94e8 <realloc>
            if (!d) {
   b9f32:	b918      	cbnz	r0, b9f3c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b9f34:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b9f36:	f7ff facf 	bl	b94d8 <free>
        T* d = nullptr;
   b9f3a:	2000      	movs	r0, #0
        data_ = d;
   b9f3c:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b9f3e:	60a5      	str	r5, [r4, #8]
        return true;
   b9f40:	2001      	movs	r0, #1
   b9f42:	e7f7      	b.n	b9f34 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b9f44 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b9f44:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b9f46:	6883      	ldr	r3, [r0, #8]
   b9f48:	428b      	cmp	r3, r1
   b9f4a:	da02      	bge.n	b9f52 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b9f4c:	f7ff ffea 	bl	b9f24 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b9f50:	bd08      	pop	{r3, pc}
    return true;
   b9f52:	2001      	movs	r0, #1
   b9f54:	e7fc      	b.n	b9f50 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b9f56 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b9f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9f5a:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b9f5c:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b9f5e:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b9f60:	4419      	add	r1, r3
   b9f62:	6883      	ldr	r3, [r0, #8]
   b9f64:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b9f66:	4604      	mov	r4, r0
   b9f68:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b9f6a:	dc12      	bgt.n	b9f92 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b9f6c:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9f6e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9f70:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9f72:	1bd2      	subs	r2, r2, r7
   b9f74:	4631      	mov	r1, r6
   b9f76:	1970      	adds	r0, r6, r5
   b9f78:	f002 fe1e 	bl	bcbb8 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b9f7c:	462a      	mov	r2, r5
   b9f7e:	4641      	mov	r1, r8
   b9f80:	4630      	mov	r0, r6
   b9f82:	f002 fe0b 	bl	bcb9c <memcpy>
    size_ += n;
   b9f86:	6863      	ldr	r3, [r4, #4]
   b9f88:	442b      	add	r3, r5
   b9f8a:	6063      	str	r3, [r4, #4]
    return true;
   b9f8c:	2001      	movs	r0, #1
}
   b9f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b9f92:	f7ff ffc7 	bl	b9f24 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b9f96:	2800      	cmp	r0, #0
   b9f98:	d1e8      	bne.n	b9f6c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b9f9a:	e7f8      	b.n	b9f8e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b9f9c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b9f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9f9e:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9fa0:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b9fa4:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b9fa6:	4604      	mov	r4, r0
   b9fa8:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9faa:	da0b      	bge.n	b9fc4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b9fac:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9fae:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9fb0:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9fb2:	1b52      	subs	r2, r2, r5
   b9fb4:	1c48      	adds	r0, r1, #1
   b9fb6:	f002 fdff 	bl	bcbb8 <memmove>
    new(p) T(std::move(value));
   b9fba:	557e      	strb	r6, [r7, r5]
    ++size_;
   b9fbc:	6863      	ldr	r3, [r4, #4]
   b9fbe:	3301      	adds	r3, #1
   b9fc0:	6063      	str	r3, [r4, #4]
}
   b9fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9fc4:	3101      	adds	r1, #1
   b9fc6:	f7ff ffad 	bl	b9f24 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b9fca:	2800      	cmp	r0, #0
   b9fcc:	d1ee      	bne.n	b9fac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b9fce:	e7f8      	b.n	b9fc2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b9fd0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9fd0:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b9fd2:	6841      	ldr	r1, [r0, #4]
   b9fd4:	f7ff bfe2 	b.w	b9f9c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b9fd8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b9fd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b9fdc:	4604      	mov	r4, r0
   b9fde:	461d      	mov	r5, r3
   b9fe0:	460f      	mov	r7, r1
   b9fe2:	ab01      	add	r3, sp, #4
   b9fe4:	4690      	mov	r8, r2
   b9fe6:	460a      	mov	r2, r1
   b9fe8:	e9d0 0100 	ldrd	r0, r1, [r0]
   b9fec:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b9ff0:	f7ff fb10 	bl	b9614 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b9ff4:	1cae      	adds	r6, r5, #2
   b9ff6:	6863      	ldr	r3, [r4, #4]
   b9ff8:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b9ffa:	f1b9 0f00 	cmp.w	r9, #0
   b9ffe:	d126      	bne.n	ba04e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   ba000:	b328      	cbz	r0, ba04e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   ba002:	4433      	add	r3, r6
   ba004:	1a1b      	subs	r3, r3, r0
   ba006:	2bff      	cmp	r3, #255	; 0xff
   ba008:	d809      	bhi.n	ba01e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   ba00a:	9901      	ldr	r1, [sp, #4]
   ba00c:	4620      	mov	r0, r4
   ba00e:	f7ff fe71 	bl	b9cf4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   ba012:	6861      	ldr	r1, [r4, #4]
   ba014:	4620      	mov	r0, r4
   ba016:	4431      	add	r1, r6
   ba018:	f7ff ff94 	bl	b9f44 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   ba01c:	b918      	cbnz	r0, ba026 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   ba01e:	6860      	ldr	r0, [r4, #4]
}
   ba020:	b003      	add	sp, #12
   ba022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   ba026:	1c6a      	adds	r2, r5, #1
   ba028:	9901      	ldr	r1, [sp, #4]
   ba02a:	b2d2      	uxtb	r2, r2
   ba02c:	4620      	mov	r0, r4
   ba02e:	f7ff ffb5 	bl	b9f9c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   ba032:	9901      	ldr	r1, [sp, #4]
   ba034:	463a      	mov	r2, r7
   ba036:	3101      	adds	r1, #1
   ba038:	4620      	mov	r0, r4
   ba03a:	f7ff ffaf 	bl	b9f9c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   ba03e:	9901      	ldr	r1, [sp, #4]
   ba040:	462b      	mov	r3, r5
   ba042:	4642      	mov	r2, r8
   ba044:	3102      	adds	r1, #2
    return insert(size_, values, n);
   ba046:	4620      	mov	r0, r4
   ba048:	f7ff ff85 	bl	b9f56 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   ba04c:	e7e7      	b.n	ba01e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   ba04e:	18f1      	adds	r1, r6, r3
   ba050:	29ff      	cmp	r1, #255	; 0xff
   ba052:	d8e4      	bhi.n	ba01e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   ba054:	4620      	mov	r0, r4
   ba056:	f7ff ff75 	bl	b9f44 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   ba05a:	2800      	cmp	r0, #0
   ba05c:	d0df      	beq.n	ba01e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   ba05e:	1c69      	adds	r1, r5, #1
   ba060:	b2c9      	uxtb	r1, r1
   ba062:	4620      	mov	r0, r4
   ba064:	f7ff ffb4 	bl	b9fd0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   ba068:	4639      	mov	r1, r7
   ba06a:	4620      	mov	r0, r4
   ba06c:	f7ff ffb0 	bl	b9fd0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   ba070:	6861      	ldr	r1, [r4, #4]
   ba072:	462b      	mov	r3, r5
   ba074:	4642      	mov	r2, r8
   ba076:	e7e6      	b.n	ba046 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000ba078 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   ba078:	b430      	push	{r4, r5}
   ba07a:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   ba07e:	b11a      	cbz	r2, ba088 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   ba080:	9502      	str	r5, [sp, #8]
}
   ba082:	bc30      	pop	{r4, r5}
   ba084:	f7ff bfa8 	b.w	b9fd8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   ba088:	6840      	ldr	r0, [r0, #4]
}
   ba08a:	bc30      	pop	{r4, r5}
   ba08c:	4770      	bx	lr

000ba08e <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   ba08e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   ba090:	2300      	movs	r3, #0
   ba092:	e9c0 3300 	strd	r3, r3, [r0]
   ba096:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   ba098:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   ba09a:	9300      	str	r3, [sp, #0]
   ba09c:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   ba09e:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   ba0a2:	4619      	mov	r1, r3
   ba0a4:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   ba0a8:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   ba0aa:	f7ff ffe5 	bl	ba078 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   ba0ae:	4620      	mov	r0, r4
   ba0b0:	b004      	add	sp, #16
   ba0b2:	bd10      	pop	{r4, pc}

000ba0b4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   ba0b4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   ba0b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba0b8:	4604      	mov	r4, r0
   ba0ba:	460d      	mov	r5, r1
   ba0bc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   ba0be:	d914      	bls.n	ba0ea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   ba0c0:	4290      	cmp	r0, r2
   ba0c2:	d213      	bcs.n	ba0ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   ba0c4:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   ba0c8:	1a75      	subs	r5, r6, r1
   ba0ca:	f1a1 0708 	sub.w	r7, r1, #8
   ba0ce:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   ba0d0:	42b7      	cmp	r7, r6
   ba0d2:	d018      	beq.n	ba106 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   ba0d4:	b11c      	cbz	r4, ba0de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   ba0d6:	4631      	mov	r1, r6
   ba0d8:	4620      	mov	r0, r4
   ba0da:	f7ff fe90 	bl	b9dfe <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   ba0de:	1d30      	adds	r0, r6, #4
   ba0e0:	f7ff fe97 	bl	b9e12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   ba0e4:	3e08      	subs	r6, #8
   ba0e6:	3c08      	subs	r4, #8
   ba0e8:	e7f2      	b.n	ba0d0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   ba0ea:	d00c      	beq.n	ba106 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   ba0ec:	42b5      	cmp	r5, r6
   ba0ee:	d00a      	beq.n	ba106 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   ba0f0:	b11c      	cbz	r4, ba0fa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   ba0f2:	4629      	mov	r1, r5
   ba0f4:	4620      	mov	r0, r4
   ba0f6:	f7ff fe82 	bl	b9dfe <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   ba0fa:	1d28      	adds	r0, r5, #4
   ba0fc:	f7ff fe89 	bl	b9e12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   ba100:	3508      	adds	r5, #8
   ba102:	3408      	adds	r4, #8
   ba104:	e7f2      	b.n	ba0ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   ba106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba108 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   ba108:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba10a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   ba10c:	6846      	ldr	r6, [r0, #4]
   ba10e:	4668      	mov	r0, sp
   ba110:	f7ff fe75 	bl	b9dfe <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba114:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   ba118:	429f      	cmp	r7, r3
   ba11a:	db12      	blt.n	ba142 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   ba11c:	3701      	adds	r7, #1
        if (n > 0) {
   ba11e:	2f00      	cmp	r7, #0
   ba120:	dd29      	ble.n	ba176 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   ba122:	00f8      	lsls	r0, r7, #3
   ba124:	f7ff f9d0 	bl	b94c8 <malloc>
            if (!d) {
   ba128:	4605      	mov	r5, r0
   ba12a:	b1f0      	cbz	r0, ba16a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   ba12c:	e9d4 1200 	ldrd	r1, r2, [r4]
   ba130:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   ba134:	f7ff ffbe 	bl	ba0b4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   ba138:	6820      	ldr	r0, [r4, #0]
   ba13a:	f7ff f9cd 	bl	b94d8 <free>
        data_ = d;
   ba13e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   ba140:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   ba142:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   ba144:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   ba146:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   ba14a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   ba14e:	4631      	mov	r1, r6
   ba150:	f106 0008 	add.w	r0, r6, #8
   ba154:	f7ff ffae 	bl	ba0b4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   ba158:	b11e      	cbz	r6, ba162 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   ba15a:	4669      	mov	r1, sp
   ba15c:	4630      	mov	r0, r6
   ba15e:	f7ff fe4e 	bl	b9dfe <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   ba162:	6863      	ldr	r3, [r4, #4]
   ba164:	3301      	adds	r3, #1
   ba166:	6063      	str	r3, [r4, #4]
    return true;
   ba168:	2501      	movs	r5, #1
   ba16a:	a801      	add	r0, sp, #4
   ba16c:	f7ff fe51 	bl	b9e12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   ba170:	4628      	mov	r0, r5
   ba172:	b003      	add	sp, #12
   ba174:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   ba176:	2500      	movs	r5, #0
   ba178:	e7de      	b.n	ba138 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000ba17a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   ba17a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   ba17c:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   ba180:	4605      	mov	r5, r0
   ba182:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   ba184:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   ba188:	42a6      	cmp	r6, r4
   ba18a:	d005      	beq.n	ba198 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   ba18c:	4639      	mov	r1, r7
   ba18e:	4620      	mov	r0, r4
   ba190:	f7ff fcff 	bl	b9b92 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   ba194:	b108      	cbz	r0, ba19a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   ba196:	b914      	cbnz	r4, ba19e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   ba198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   ba19a:	3408      	adds	r4, #8
   ba19c:	e7f4      	b.n	ba188 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   ba19e:	1d20      	adds	r0, r4, #4
   ba1a0:	f7ff fe37 	bl	b9e12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   ba1a4:	e9d5 3200 	ldrd	r3, r2, [r5]
   ba1a8:	f104 0108 	add.w	r1, r4, #8
   ba1ac:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   ba1b0:	4620      	mov	r0, r4
   ba1b2:	f7ff ff7f 	bl	ba0b4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   ba1b6:	686b      	ldr	r3, [r5, #4]
   ba1b8:	3b01      	subs	r3, #1
   ba1ba:	606b      	str	r3, [r5, #4]
    return true;
   ba1bc:	e7ec      	b.n	ba198 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000ba1c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   ba1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba1c4:	4605      	mov	r5, r0
   ba1c6:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   ba1c8:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   ba1ca:	460c      	mov	r4, r1
        WiringBleLock lk;
   ba1cc:	f7ff faac 	bl	b9728 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   ba1d0:	682e      	ldr	r6, [r5, #0]
   ba1d2:	1ef3      	subs	r3, r6, #3
   ba1d4:	2b0d      	cmp	r3, #13
   ba1d6:	d83c      	bhi.n	ba252 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   ba1d8:	e8df f013 	tbh	[pc, r3, lsl #1]
   ba1dc:	0053000e 	.word	0x0053000e
   ba1e0:	00d1003b 	.word	0x00d1003b
   ba1e4:	003b003b 	.word	0x003b003b
   ba1e8:	003b003b 	.word	0x003b003b
   ba1ec:	009b003b 	.word	0x009b003b
   ba1f0:	009b009b 	.word	0x009b009b
   ba1f4:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   ba1f8:	a804      	add	r0, sp, #16
   ba1fa:	f7ff fc95 	bl	b9b28 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   ba1fe:	9b04      	ldr	r3, [sp, #16]
   ba200:	89aa      	ldrh	r2, [r5, #12]
   ba202:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   ba204:	6869      	ldr	r1, [r5, #4]
   ba206:	9804      	ldr	r0, [sp, #16]
   ba208:	3108      	adds	r1, #8
   ba20a:	3002      	adds	r0, #2
   ba20c:	f7ff faa6 	bl	b975c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   ba210:	a904      	add	r1, sp, #16
   ba212:	a806      	add	r0, sp, #24
   ba214:	f7ff fdf3 	bl	b9dfe <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   ba218:	a906      	add	r1, sp, #24
   ba21a:	f104 0018 	add.w	r0, r4, #24
   ba21e:	f7ff ff73 	bl	ba108 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   ba222:	4605      	mov	r5, r0
   ba224:	a807      	add	r0, sp, #28
   ba226:	f7ff fdf4 	bl	b9e12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba22a:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   ba22c:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   ba22e:	b9b5      	cbnz	r5, ba25e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   ba230:	4b5d      	ldr	r3, [pc, #372]	; (ba3a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   ba232:	495e      	ldr	r1, [pc, #376]	; (ba3ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   ba234:	9300      	str	r3, [sp, #0]
   ba236:	2032      	movs	r0, #50	; 0x32
   ba238:	462b      	mov	r3, r5
   ba23a:	aa06      	add	r2, sp, #24
   ba23c:	9507      	str	r5, [sp, #28]
   ba23e:	f7ff f89f 	bl	b9380 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   ba242:	9b04      	ldr	r3, [sp, #16]
   ba244:	4629      	mov	r1, r5
   ba246:	8818      	ldrh	r0, [r3, #0]
   ba248:	f7fe fec8 	bl	b8fdc <hal_ble_gap_disconnect>
   ba24c:	a805      	add	r0, sp, #20
   ba24e:	f7ff fde0 	bl	b9e12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   ba252:	a803      	add	r0, sp, #12
   ba254:	f7ff fa76 	bl	b9744 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   ba258:	b00e      	add	sp, #56	; 0x38
   ba25a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   ba25e:	4a54      	ldr	r2, [pc, #336]	; (ba3b0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   ba260:	9200      	str	r2, [sp, #0]
   ba262:	2300      	movs	r3, #0
   ba264:	4951      	ldr	r1, [pc, #324]	; (ba3ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   ba266:	9307      	str	r3, [sp, #28]
   ba268:	aa06      	add	r2, sp, #24
   ba26a:	2001      	movs	r0, #1
   ba26c:	f7ff f888 	bl	b9380 <log_message>
                if (impl->connectedCallback_) {
   ba270:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba272:	2b00      	cmp	r3, #0
   ba274:	d0ea      	beq.n	ba24c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   ba276:	a904      	add	r1, sp, #16
   ba278:	f104 0024 	add.w	r0, r4, #36	; 0x24
   ba27c:	f7ff fe49 	bl	b9f12 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   ba280:	e7e4      	b.n	ba24c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   ba282:	89a9      	ldrh	r1, [r5, #12]
   ba284:	4620      	mov	r0, r4
   ba286:	f7ff fba7 	bl	b99d8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   ba28a:	4606      	mov	r6, r0
   ba28c:	2800      	cmp	r0, #0
   ba28e:	d0e0      	beq.n	ba252 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   ba290:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   ba292:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   ba296:	f64f 71ff 	movw	r1, #65535	; 0xffff
   ba29a:	8029      	strh	r1, [r5, #0]
   ba29c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   ba2a0:	429a      	cmp	r2, r3
   ba2a2:	d003      	beq.n	ba2ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   ba2a4:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   ba2a8:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   ba2aa:	e7f9      	b.n	ba2a0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   ba2ac:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   ba2b0:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   ba2b4:	45b8      	cmp	r8, r7
   ba2b6:	d004      	beq.n	ba2c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   ba2b8:	1d38      	adds	r0, r7, #4
   ba2ba:	f7ff fdaa 	bl	b9e12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba2be:	3708      	adds	r7, #8
   ba2c0:	e7f8      	b.n	ba2b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   ba2c2:	2300      	movs	r3, #0
   ba2c4:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   ba2c6:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   ba2ca:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   ba2ce:	45b8      	cmp	r8, r7
   ba2d0:	d004      	beq.n	ba2dc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   ba2d2:	1d38      	adds	r0, r7, #4
   ba2d4:	f7ff fd9d 	bl	b9e12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba2d8:	3708      	adds	r7, #8
   ba2da:	e7f8      	b.n	ba2ce <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   ba2dc:	2300      	movs	r3, #0
   ba2de:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   ba2e0:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   ba2e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   ba2e4:	b123      	cbz	r3, ba2f0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   ba2e6:	4631      	mov	r1, r6
   ba2e8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   ba2ec:	f7ff fe11 	bl	b9f12 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   ba2f0:	2300      	movs	r3, #0
   ba2f2:	2220      	movs	r2, #32
   ba2f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   ba2f8:	4a2e      	ldr	r2, [pc, #184]	; (ba3b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   ba2fa:	9200      	str	r2, [sp, #0]
   ba2fc:	492b      	ldr	r1, [pc, #172]	; (ba3ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   ba2fe:	aa06      	add	r2, sp, #24
   ba300:	2001      	movs	r0, #1
   ba302:	f7ff f83d 	bl	b9380 <log_message>
                    impl->peers_.removeOne(*peer);
   ba306:	4631      	mov	r1, r6
   ba308:	f104 0018 	add.w	r0, r4, #24
   ba30c:	f7ff ff35 	bl	ba17a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   ba310:	e79f      	b.n	ba252 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   ba312:	89a9      	ldrh	r1, [r5, #12]
   ba314:	4620      	mov	r0, r4
   ba316:	f7ff fb5f 	bl	b99d8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   ba31a:	2800      	cmp	r0, #0
   ba31c:	d099      	beq.n	ba252 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   ba31e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   ba320:	2b00      	cmp	r3, #0
   ba322:	d096      	beq.n	ba252 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   ba324:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   ba326:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   ba328:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   ba32c:	d001      	beq.n	ba332 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   ba32e:	2e10      	cmp	r6, #16
   ba330:	d117      	bne.n	ba362 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   ba332:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   ba334:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   ba336:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   ba338:	2506      	movs	r5, #6
                        };
   ba33a:	f88d 3015 	strb.w	r3, [sp, #21]
   ba33e:	9104      	str	r1, [sp, #16]
   ba340:	f88d 2014 	strb.w	r2, [sp, #20]
   ba344:	9006      	str	r0, [sp, #24]
   ba346:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   ba34a:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   ba34c:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   ba350:	9508      	str	r5, [sp, #32]
   ba352:	e883 0003 	stmia.w	r3, {r0, r1}
   ba356:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba358:	a906      	add	r1, sp, #24
   ba35a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   ba35e:	4798      	blx	r3
   ba360:	e777      	b.n	ba252 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   ba362:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   ba364:	bf01      	itttt	eq
   ba366:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   ba368:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   ba36a:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   ba36e:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   ba370:	bf0f      	iteee	eq
   ba372:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   ba376:	461a      	movne	r2, r3
   ba378:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   ba37a:	461d      	movne	r5, r3
   ba37c:	e7dd      	b.n	ba33a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   ba37e:	89a9      	ldrh	r1, [r5, #12]
   ba380:	4620      	mov	r0, r4
   ba382:	f7ff fb29 	bl	b99d8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   ba386:	4601      	mov	r1, r0
   ba388:	2800      	cmp	r0, #0
   ba38a:	f43f af62 	beq.w	ba252 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   ba38e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba390:	2b00      	cmp	r3, #0
   ba392:	f43f af5e 	beq.w	ba252 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   ba396:	686b      	ldr	r3, [r5, #4]
   ba398:	9306      	str	r3, [sp, #24]
   ba39a:	aa06      	add	r2, sp, #24
   ba39c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba39e:	f104 0054 	add.w	r0, r4, #84	; 0x54
   ba3a2:	4798      	blx	r3
   ba3a4:	e755      	b.n	ba252 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   ba3a6:	bf00      	nop
   ba3a8:	000bf378 	.word	0x000bf378
   ba3ac:	000bf2f7 	.word	0x000bf2f7
   ba3b0:	000bf39e 	.word	0x000bf39e
   ba3b4:	000bf3bb 	.word	0x000bf3bb

000ba3b8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   ba3b8:	b513      	push	{r0, r1, r4, lr}
   ba3ba:	460b      	mov	r3, r1
   ba3bc:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba3be:	e9d0 0100 	ldrd	r0, r1, [r0]
   ba3c2:	466c      	mov	r4, sp
   ba3c4:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   ba3c8:	e893 0003 	ldmia.w	r3, {r0, r1}
   ba3cc:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   ba3d0:	e894 0003 	ldmia.w	r4, {r0, r1}
   ba3d4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   ba3d8:	b002      	add	sp, #8
   ba3da:	bd10      	pop	{r4, pc}

000ba3dc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   ba3dc:	b538      	push	{r3, r4, r5, lr}
   ba3de:	4605      	mov	r5, r0
   ba3e0:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   ba3e2:	f7ff ffe9 	bl	ba3b8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba3e6:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   ba3e8:	68a2      	ldr	r2, [r4, #8]
   ba3ea:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba3ec:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba3ee:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba3f0:	68e2      	ldr	r2, [r4, #12]
   ba3f2:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   ba3f4:	60e3      	str	r3, [r4, #12]
      }
   ba3f6:	bd38      	pop	{r3, r4, r5, pc}

000ba3f8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   ba3f8:	b570      	push	{r4, r5, r6, lr}
   ba3fa:	4604      	mov	r4, r0
   ba3fc:	b08c      	sub	sp, #48	; 0x30
   ba3fe:	460e      	mov	r6, r1
   ba400:	9201      	str	r2, [sp, #4]
   ba402:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   ba404:	f7ff fac8 	bl	b9998 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   ba408:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   ba40a:	9901      	ldr	r1, [sp, #4]
   ba40c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   ba410:	f000 fd8f 	bl	baf32 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   ba414:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   ba418:	b1cd      	cbz	r5, ba44e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   ba41a:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   ba41c:	9502      	str	r5, [sp, #8]
   ba41e:	a902      	add	r1, sp, #8
   ba420:	a804      	add	r0, sp, #16
   ba422:	9303      	str	r3, [sp, #12]
   ba424:	f7ff fcb4 	bl	b9d90 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   ba428:	2300      	movs	r3, #0
	__x.swap(*this);
   ba42a:	a908      	add	r1, sp, #32
   ba42c:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   ba42e:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   ba430:	f7ff ffd4 	bl	ba3dc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   ba434:	4631      	mov	r1, r6
   ba436:	a808      	add	r0, sp, #32
   ba438:	f7ff ffd0 	bl	ba3dc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   ba43c:	a808      	add	r0, sp, #32
   ba43e:	f7ff f935 	bl	b96ac <_ZNSt14_Function_baseD1Ev>
   ba442:	a804      	add	r0, sp, #16
   ba444:	f7ff f932 	bl	b96ac <_ZNSt14_Function_baseD1Ev>
    }
   ba448:	4620      	mov	r0, r4
   ba44a:	b00c      	add	sp, #48	; 0x30
   ba44c:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   ba44e:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   ba450:	e7ea      	b.n	ba428 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000ba454 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   ba454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba458:	b087      	sub	sp, #28
   ba45a:	461d      	mov	r5, r3
   ba45c:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   ba460:	4680      	mov	r8, r0
   ba462:	468b      	mov	fp, r1
   ba464:	4692      	mov	sl, r2
   ba466:	9912      	ldr	r1, [sp, #72]	; 0x48
   ba468:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   ba46a:	2200      	movs	r2, #0
   ba46c:	2068      	movs	r0, #104	; 0x68
   ba46e:	9102      	str	r1, [sp, #8]
   ba470:	9204      	str	r2, [sp, #16]
   ba472:	f7f9 fe10 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   ba476:	1e06      	subs	r6, r0, #0
   ba478:	f106 090c 	add.w	r9, r6, #12
   ba47c:	d018      	beq.n	ba4b0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   ba47e:	2201      	movs	r2, #1
	: _M_impl(__a)
   ba480:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   ba482:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   ba486:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   ba488:	4a15      	ldr	r2, [pc, #84]	; (ba4e0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   ba48a:	f847 2b20 	str.w	r2, [r7], #32
   ba48e:	9b03      	ldr	r3, [sp, #12]
   ba490:	9100      	str	r1, [sp, #0]
   ba492:	465a      	mov	r2, fp
   ba494:	4651      	mov	r1, sl
   ba496:	4648      	mov	r0, r9
   ba498:	f7ff ffae 	bl	ba3f8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   ba49c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba49e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   ba4a0:	682b      	ldr	r3, [r5, #0]
   ba4a2:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   ba4a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   ba4a6:	f106 0534 	add.w	r5, r6, #52	; 0x34
   ba4aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   ba4ac:	6823      	ldr	r3, [r4, #0]
   ba4ae:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   ba4b0:	a904      	add	r1, sp, #16
   ba4b2:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   ba4b4:	e9cd 9604 	strd	r9, r6, [sp, #16]
   ba4b8:	f7ff fd1a 	bl	b9ef0 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   ba4bc:	a805      	add	r0, sp, #20
   ba4be:	f7ff fca8 	bl	b9e12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   ba4c2:	f8d8 3000 	ldr.w	r3, [r8]
   ba4c6:	b93b      	cbnz	r3, ba4d8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   ba4c8:	4a06      	ldr	r2, [pc, #24]	; (ba4e4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   ba4ca:	4907      	ldr	r1, [pc, #28]	; (ba4e8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   ba4cc:	200a      	movs	r0, #10
}
   ba4ce:	b007      	add	sp, #28
   ba4d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   ba4d4:	f7fe bf4c 	b.w	b9370 <panic_>
}
   ba4d8:	b007      	add	sp, #28
   ba4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba4de:	bf00      	nop
   ba4e0:	000bf434 	.word	0x000bf434
   ba4e4:	000b9101 	.word	0x000b9101
   ba4e8:	000bf2e0 	.word	0x000bf2e0

000ba4ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   ba4ec:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   ba4ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba4f0:	4604      	mov	r4, r0
   ba4f2:	460d      	mov	r5, r1
   ba4f4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   ba4f6:	d914      	bls.n	ba522 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   ba4f8:	4290      	cmp	r0, r2
   ba4fa:	d213      	bcs.n	ba524 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   ba4fc:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   ba500:	1a75      	subs	r5, r6, r1
   ba502:	f1a1 0708 	sub.w	r7, r1, #8
   ba506:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   ba508:	42b7      	cmp	r7, r6
   ba50a:	d018      	beq.n	ba53e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   ba50c:	b11c      	cbz	r4, ba516 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   ba50e:	4631      	mov	r1, r6
   ba510:	4620      	mov	r0, r4
   ba512:	f7ff fc6a 	bl	b9dea <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   ba516:	1d30      	adds	r0, r6, #4
   ba518:	f7ff fc7b 	bl	b9e12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   ba51c:	3e08      	subs	r6, #8
   ba51e:	3c08      	subs	r4, #8
   ba520:	e7f2      	b.n	ba508 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   ba522:	d00c      	beq.n	ba53e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   ba524:	42b5      	cmp	r5, r6
   ba526:	d00a      	beq.n	ba53e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   ba528:	b11c      	cbz	r4, ba532 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   ba52a:	4629      	mov	r1, r5
   ba52c:	4620      	mov	r0, r4
   ba52e:	f7ff fc5c 	bl	b9dea <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   ba532:	1d28      	adds	r0, r5, #4
   ba534:	f7ff fc6d 	bl	b9e12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   ba538:	3508      	adds	r5, #8
   ba53a:	3408      	adds	r4, #8
   ba53c:	e7f2      	b.n	ba524 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   ba53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba540 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   ba540:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   ba542:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   ba544:	4605      	mov	r5, r0
        if (n > 0) {
   ba546:	dd11      	ble.n	ba56c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   ba548:	00f0      	lsls	r0, r6, #3
   ba54a:	f7fe ffbd 	bl	b94c8 <malloc>
            if (!d) {
   ba54e:	4604      	mov	r4, r0
   ba550:	b158      	cbz	r0, ba56a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   ba552:	e9d5 1200 	ldrd	r1, r2, [r5]
   ba556:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   ba55a:	f7ff ffc7 	bl	ba4ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   ba55e:	6828      	ldr	r0, [r5, #0]
   ba560:	f7fe ffba 	bl	b94d8 <free>
        data_ = d;
   ba564:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   ba566:	60ae      	str	r6, [r5, #8]
        return true;
   ba568:	2001      	movs	r0, #1
    }
   ba56a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   ba56c:	2400      	movs	r4, #0
   ba56e:	e7f6      	b.n	ba55e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000ba570 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   ba570:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba572:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   ba574:	6845      	ldr	r5, [r0, #4]
   ba576:	4668      	mov	r0, sp
   ba578:	f7ff fc37 	bl	b9dea <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba57c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   ba580:	4299      	cmp	r1, r3
   ba582:	da10      	bge.n	ba5a6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   ba584:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   ba586:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   ba588:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   ba58c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   ba590:	4629      	mov	r1, r5
   ba592:	f105 0008 	add.w	r0, r5, #8
   ba596:	f7ff ffa9 	bl	ba4ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   ba59a:	b98d      	cbnz	r5, ba5c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   ba59c:	6863      	ldr	r3, [r4, #4]
   ba59e:	3301      	adds	r3, #1
   ba5a0:	6063      	str	r3, [r4, #4]
    return true;
   ba5a2:	2601      	movs	r6, #1
   ba5a4:	e006      	b.n	ba5b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba5a6:	3101      	adds	r1, #1
   ba5a8:	4620      	mov	r0, r4
   ba5aa:	f7ff ffc9 	bl	ba540 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   ba5ae:	4606      	mov	r6, r0
   ba5b0:	2800      	cmp	r0, #0
   ba5b2:	d1e7      	bne.n	ba584 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   ba5b4:	a801      	add	r0, sp, #4
   ba5b6:	f7ff fc2c 	bl	b9e12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   ba5ba:	4630      	mov	r0, r6
   ba5bc:	b002      	add	sp, #8
   ba5be:	bd70      	pop	{r4, r5, r6, pc}
   ba5c0:	4669      	mov	r1, sp
   ba5c2:	4628      	mov	r0, r5
   ba5c4:	f7ff fc11 	bl	b9dea <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   ba5c8:	e7e8      	b.n	ba59c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000ba5ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   ba5ca:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   ba5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba5ce:	4604      	mov	r4, r0
   ba5d0:	460d      	mov	r5, r1
   ba5d2:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   ba5d4:	d914      	bls.n	ba600 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   ba5d6:	4290      	cmp	r0, r2
   ba5d8:	d213      	bcs.n	ba602 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   ba5da:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   ba5de:	1a75      	subs	r5, r6, r1
   ba5e0:	f1a1 0708 	sub.w	r7, r1, #8
   ba5e4:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   ba5e6:	42b7      	cmp	r7, r6
   ba5e8:	d018      	beq.n	ba61c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   ba5ea:	b11c      	cbz	r4, ba5f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   ba5ec:	4631      	mov	r1, r6
   ba5ee:	4620      	mov	r0, r4
   ba5f0:	f7ff fbed 	bl	b9dce <_ZN8particle17BleCharacteristicC1ERKS0_>
   ba5f4:	1d30      	adds	r0, r6, #4
   ba5f6:	f7ff fc0c 	bl	b9e12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   ba5fa:	3e08      	subs	r6, #8
   ba5fc:	3c08      	subs	r4, #8
   ba5fe:	e7f2      	b.n	ba5e6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   ba600:	d00c      	beq.n	ba61c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   ba602:	42b5      	cmp	r5, r6
   ba604:	d00a      	beq.n	ba61c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   ba606:	b11c      	cbz	r4, ba610 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   ba608:	4629      	mov	r1, r5
   ba60a:	4620      	mov	r0, r4
   ba60c:	f7ff fbdf 	bl	b9dce <_ZN8particle17BleCharacteristicC1ERKS0_>
   ba610:	1d28      	adds	r0, r5, #4
   ba612:	f7ff fbfe 	bl	b9e12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   ba616:	3508      	adds	r5, #8
   ba618:	3408      	adds	r4, #8
   ba61a:	e7f2      	b.n	ba602 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   ba61c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba61e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   ba61e:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   ba620:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   ba622:	4605      	mov	r5, r0
        if (n > 0) {
   ba624:	dd11      	ble.n	ba64a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   ba626:	00f0      	lsls	r0, r6, #3
   ba628:	f7fe ff4e 	bl	b94c8 <malloc>
            if (!d) {
   ba62c:	4604      	mov	r4, r0
   ba62e:	b158      	cbz	r0, ba648 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   ba630:	e9d5 1200 	ldrd	r1, r2, [r5]
   ba634:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   ba638:	f7ff ffc7 	bl	ba5ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   ba63c:	6828      	ldr	r0, [r5, #0]
   ba63e:	f7fe ff4b 	bl	b94d8 <free>
        data_ = d;
   ba642:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   ba644:	60ae      	str	r6, [r5, #8]
        return true;
   ba646:	2001      	movs	r0, #1
    }
   ba648:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   ba64a:	2400      	movs	r4, #0
   ba64c:	e7f6      	b.n	ba63c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000ba64e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   ba64e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba650:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   ba652:	6845      	ldr	r5, [r0, #4]
   ba654:	4668      	mov	r0, sp
   ba656:	f7ff fbba 	bl	b9dce <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba65a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   ba65e:	4299      	cmp	r1, r3
   ba660:	da10      	bge.n	ba684 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   ba662:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   ba664:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   ba666:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   ba66a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   ba66e:	4629      	mov	r1, r5
   ba670:	f105 0008 	add.w	r0, r5, #8
   ba674:	f7ff ffa9 	bl	ba5ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   ba678:	b98d      	cbnz	r5, ba69e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   ba67a:	6863      	ldr	r3, [r4, #4]
   ba67c:	3301      	adds	r3, #1
   ba67e:	6063      	str	r3, [r4, #4]
    return true;
   ba680:	2601      	movs	r6, #1
   ba682:	e006      	b.n	ba692 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba684:	3101      	adds	r1, #1
   ba686:	4620      	mov	r0, r4
   ba688:	f7ff ffc9 	bl	ba61e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   ba68c:	4606      	mov	r6, r0
   ba68e:	2800      	cmp	r0, #0
   ba690:	d1e7      	bne.n	ba662 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   ba692:	a801      	add	r0, sp, #4
   ba694:	f7ff fbbd 	bl	b9e12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   ba698:	4630      	mov	r0, r6
   ba69a:	b002      	add	sp, #8
   ba69c:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   ba69e:	4669      	mov	r1, sp
   ba6a0:	4628      	mov	r0, r5
   ba6a2:	f7ff fb94 	bl	b9dce <_ZN8particle17BleCharacteristicC1ERKS0_>
   ba6a6:	e7e8      	b.n	ba67a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000ba6a8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   ba6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba6ac:	4617      	mov	r7, r2
   ba6ae:	b0a1      	sub	sp, #132	; 0x84
   ba6b0:	4680      	mov	r8, r0
    WiringBleLock lk;
   ba6b2:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   ba6b4:	460e      	mov	r6, r1
    WiringBleLock lk;
   ba6b6:	f7ff f837 	bl	b9728 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   ba6ba:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   ba6bc:	7923      	ldrb	r3, [r4, #4]
   ba6be:	b953      	cbnz	r3, ba6d6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   ba6c0:	4639      	mov	r1, r7
   ba6c2:	4640      	mov	r0, r8
   ba6c4:	f7ff fb83 	bl	b9dce <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   ba6c8:	a80a      	add	r0, sp, #40	; 0x28
   ba6ca:	f7ff f83b 	bl	b9744 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   ba6ce:	4640      	mov	r0, r8
   ba6d0:	b021      	add	sp, #132	; 0x84
   ba6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   ba6d6:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   ba6d8:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   ba6dc:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   ba6e0:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   ba6e2:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   ba6e6:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   ba6ea:	9b03      	ldr	r3, [sp, #12]
   ba6ec:	429d      	cmp	r5, r3
   ba6ee:	d021      	beq.n	ba734 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   ba6f0:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   ba6f4:	4658      	mov	r0, fp
   ba6f6:	f109 0114 	add.w	r1, r9, #20
   ba6fa:	f7ff f8c2 	bl	b9882 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   ba6fe:	b1b8      	cbz	r0, ba730 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   ba700:	f109 0128 	add.w	r1, r9, #40	; 0x28
   ba704:	4650      	mov	r0, sl
   ba706:	f7ff f8bc 	bl	b9882 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   ba70a:	b188      	cbz	r0, ba730 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   ba70c:	6823      	ldr	r3, [r4, #0]
   ba70e:	f8d9 2000 	ldr.w	r2, [r9]
   ba712:	4053      	eors	r3, r2
   ba714:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   ba718:	d10a      	bne.n	ba730 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   ba71a:	2220      	movs	r2, #32
   ba71c:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   ba720:	4a5e      	ldr	r2, [pc, #376]	; (ba89c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   ba722:	9200      	str	r2, [sp, #0]
   ba724:	aa15      	add	r2, sp, #84	; 0x54
   ba726:	495e      	ldr	r1, [pc, #376]	; (ba8a0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   ba728:	2032      	movs	r0, #50	; 0x32
   ba72a:	f7fe fe29 	bl	b9380 <log_message>
   ba72e:	e7c7      	b.n	ba6c0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   ba730:	3508      	adds	r5, #8
   ba732:	e7da      	b.n	ba6ea <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   ba734:	4650      	mov	r0, sl
   ba736:	f7ff f875 	bl	b9824 <_ZNK8particle7BleUuid7isValidEv>
   ba73a:	b960      	cbnz	r0, ba756 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   ba73c:	4959      	ldr	r1, [pc, #356]	; (ba8a4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   ba73e:	2201      	movs	r2, #1
   ba740:	a815      	add	r0, sp, #84	; 0x54
   ba742:	ad15      	add	r5, sp, #84	; 0x54
   ba744:	f7ff f846 	bl	b97d4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   ba748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba74a:	46d4      	mov	ip, sl
   ba74c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   ba750:	682b      	ldr	r3, [r5, #0]
   ba752:	f8cc 3000 	str.w	r3, [ip]
   ba756:	6833      	ldr	r3, [r6, #0]
   ba758:	e9d3 5300 	ldrd	r5, r3, [r3]
   ba75c:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   ba760:	455d      	cmp	r5, fp
   ba762:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   ba764:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   ba766:	d06e      	beq.n	ba846 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   ba768:	f855 0b08 	ldr.w	r0, [r5], #8
   ba76c:	f7ff f889 	bl	b9882 <_ZNK8particle7BleUuideqERKS0_>
   ba770:	2800      	cmp	r0, #0
   ba772:	d0f5      	beq.n	ba760 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   ba774:	f104 0a14 	add.w	sl, r4, #20
   ba778:	4650      	mov	r0, sl
   ba77a:	f7ff f853 	bl	b9824 <_ZNK8particle7BleUuid7isValidEv>
   ba77e:	b988      	cbnz	r0, ba7a4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   ba780:	4b49      	ldr	r3, [pc, #292]	; (ba8a8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   ba782:	4948      	ldr	r1, [pc, #288]	; (ba8a4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   ba784:	881a      	ldrh	r2, [r3, #0]
   ba786:	3201      	adds	r2, #1
   ba788:	b292      	uxth	r2, r2
   ba78a:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   ba78c:	a815      	add	r0, sp, #84	; 0x54
   ba78e:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   ba790:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   ba792:	f7ff f83e 	bl	b9812 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   ba796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba798:	46d4      	mov	ip, sl
   ba79a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   ba79e:	682b      	ldr	r3, [r5, #0]
   ba7a0:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   ba7a4:	4b41      	ldr	r3, [pc, #260]	; (ba8ac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   ba7a6:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   ba7a8:	2228      	movs	r2, #40	; 0x28
   ba7aa:	2100      	movs	r1, #0
   ba7ac:	a816      	add	r0, sp, #88	; 0x58
   ba7ae:	f002 fa1d 	bl	bcbec <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   ba7b2:	4651      	mov	r1, sl
   ba7b4:	a804      	add	r0, sp, #16
   ba7b6:	f7ff f847 	bl	b9848 <_ZN8particle7BleUuid7halUUIDEv>
   ba7ba:	ab04      	add	r3, sp, #16
   ba7bc:	aa18      	add	r2, sp, #96	; 0x60
   ba7be:	f10d 0c20 	add.w	ip, sp, #32
   ba7c2:	6818      	ldr	r0, [r3, #0]
   ba7c4:	6859      	ldr	r1, [r3, #4]
   ba7c6:	4615      	mov	r5, r2
   ba7c8:	c503      	stmia	r5!, {r0, r1}
   ba7ca:	3308      	adds	r3, #8
   ba7cc:	4563      	cmp	r3, ip
   ba7ce:	462a      	mov	r2, r5
   ba7d0:	d1f7      	bne.n	ba7c2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   ba7d2:	6818      	ldr	r0, [r3, #0]
   ba7d4:	6028      	str	r0, [r5, #0]
    return value_;
   ba7d6:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   ba7d8:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   ba7dc:	f8d9 3000 	ldr.w	r3, [r9]
   ba7e0:	8a9b      	ldrh	r3, [r3, #20]
   ba7e2:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   ba7e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   ba7e8:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   ba7ea:	4b31      	ldr	r3, [pc, #196]	; (ba8b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   ba7ec:	2200      	movs	r2, #0
   ba7ee:	1da1      	adds	r1, r4, #6
   ba7f0:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   ba7f2:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   ba7f6:	f7fe fc23 	bl	b9040 <hal_ble_gatt_server_add_characteristic>
   ba7fa:	2800      	cmp	r0, #0
   ba7fc:	f47f af60 	bne.w	ba6c0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   ba800:	2301      	movs	r3, #1
   ba802:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   ba804:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   ba806:	4639      	mov	r1, r7
        return characteristics_;
   ba808:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   ba80a:	a80d      	add	r0, sp, #52	; 0x34
   ba80c:	f7ff fadf 	bl	b9dce <_ZN8particle17BleCharacteristicC1ERKS0_>
   ba810:	4620      	mov	r0, r4
   ba812:	a90d      	add	r1, sp, #52	; 0x34
   ba814:	f7ff ff1b 	bl	ba64e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   ba818:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   ba81a:	a80e      	add	r0, sp, #56	; 0x38
   ba81c:	f7ff faf9 	bl	b9e12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba820:	2c00      	cmp	r4, #0
   ba822:	f47f af4d 	bne.w	ba6c0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   ba826:	2320      	movs	r3, #32
   ba828:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   ba82c:	4b21      	ldr	r3, [pc, #132]	; (ba8b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   ba82e:	9300      	str	r3, [sp, #0]
   ba830:	aa0d      	add	r2, sp, #52	; 0x34
   ba832:	4623      	mov	r3, r4
   ba834:	e777      	b.n	ba726 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   ba836:	4639      	mov	r1, r7
   ba838:	4640      	mov	r0, r8
   ba83a:	f7ff fac8 	bl	b9dce <_ZN8particle17BleCharacteristicC1ERKS0_>
   ba83e:	a80c      	add	r0, sp, #48	; 0x30
   ba840:	f7ff fae7 	bl	b9e12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba844:	e740      	b.n	ba6c8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   ba846:	a80b      	add	r0, sp, #44	; 0x2c
   ba848:	f7ff f94a 	bl	b9ae0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   ba84c:	4651      	mov	r1, sl
   ba84e:	a815      	add	r0, sp, #84	; 0x54
   ba850:	f7fe fffa 	bl	b9848 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   ba854:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   ba856:	2300      	movs	r3, #0
   ba858:	3214      	adds	r2, #20
   ba85a:	a915      	add	r1, sp, #84	; 0x54
   ba85c:	2001      	movs	r0, #1
   ba85e:	f7fe fbc7 	bl	b8ff0 <hal_ble_gatt_server_add_service>
   ba862:	2800      	cmp	r0, #0
   ba864:	d1e7      	bne.n	ba836 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   ba866:	6835      	ldr	r5, [r6, #0]
   ba868:	a90b      	add	r1, sp, #44	; 0x2c
   ba86a:	a80d      	add	r0, sp, #52	; 0x34
   ba86c:	f7ff fabd 	bl	b9dea <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   ba870:	4628      	mov	r0, r5
   ba872:	a90d      	add	r1, sp, #52	; 0x34
   ba874:	f7ff fe7c 	bl	ba570 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   ba878:	4605      	mov	r5, r0
   ba87a:	a80e      	add	r0, sp, #56	; 0x38
   ba87c:	f7ff fac9 	bl	b9e12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba880:	2d00      	cmp	r5, #0
   ba882:	d0d8      	beq.n	ba836 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   ba884:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   ba886:	6853      	ldr	r3, [r2, #4]
   ba888:	6812      	ldr	r2, [r2, #0]
   ba88a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   ba88e:	3b01      	subs	r3, #1
   ba890:	a80c      	add	r0, sp, #48	; 0x30
   ba892:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   ba896:	f7ff fabc 	bl	b9e12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba89a:	e76b      	b.n	ba774 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   ba89c:	000bf3da 	.word	0x000bf3da
   ba8a0:	000bf2f7 	.word	0x000bf2f7
   ba8a4:	000bf49e 	.word	0x000bf49e
   ba8a8:	2003e6bc 	.word	0x2003e6bc
   ba8ac:	002c0003 	.word	0x002c0003
   ba8b0:	000b9c79 	.word	0x000b9c79
   ba8b4:	000bf405 	.word	0x000bf405

000ba8b8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   ba8b8:	4802      	ldr	r0, [pc, #8]	; (ba8c4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   ba8ba:	2300      	movs	r3, #0
   ba8bc:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   ba8be:	f7fe bbff 	b.w	b90c0 <os_mutex_recursive_create>
   ba8c2:	bf00      	nop
   ba8c4:	2003e6c0 	.word	0x2003e6c0

000ba8c8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   ba8c8:	2200      	movs	r2, #0
   ba8ca:	6840      	ldr	r0, [r0, #4]
   ba8cc:	4611      	mov	r1, r2
   ba8ce:	f7fe bdc3 	b.w	b9458 <network_listening>

000ba8d2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   ba8d2:	2200      	movs	r2, #0
   ba8d4:	6840      	ldr	r0, [r0, #4]
   ba8d6:	4611      	mov	r1, r2
   ba8d8:	f7fe bdde 	b.w	b9498 <network_get_listen_timeout>

000ba8dc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   ba8dc:	6840      	ldr	r0, [r0, #4]
   ba8de:	2200      	movs	r2, #0
   ba8e0:	f7fe bdd2 	b.w	b9488 <network_set_listen_timeout>

000ba8e4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   ba8e4:	6840      	ldr	r0, [r0, #4]
   ba8e6:	2200      	movs	r2, #0
   ba8e8:	f081 0101 	eor.w	r1, r1, #1
   ba8ec:	f7fe bdac 	b.w	b9448 <network_listen>

000ba8f0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   ba8f0:	2300      	movs	r3, #0
   ba8f2:	6840      	ldr	r0, [r0, #4]
   ba8f4:	461a      	mov	r2, r3
   ba8f6:	4619      	mov	r1, r3
   ba8f8:	f7fe bd9e 	b.w	b9438 <network_off>

000ba8fc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   ba8fc:	2300      	movs	r3, #0
   ba8fe:	6840      	ldr	r0, [r0, #4]
   ba900:	461a      	mov	r2, r3
   ba902:	4619      	mov	r1, r3
   ba904:	f7fe bd90 	b.w	b9428 <network_on>

000ba908 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   ba908:	2200      	movs	r2, #0
   ba90a:	6840      	ldr	r0, [r0, #4]
   ba90c:	4611      	mov	r1, r2
   ba90e:	f7fe bd83 	b.w	b9418 <network_ready>

000ba912 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   ba912:	2200      	movs	r2, #0
   ba914:	6840      	ldr	r0, [r0, #4]
   ba916:	4611      	mov	r1, r2
   ba918:	f7fe bd6e 	b.w	b93f8 <network_connecting>

000ba91c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   ba91c:	6840      	ldr	r0, [r0, #4]
   ba91e:	2200      	movs	r2, #0
   ba920:	2102      	movs	r1, #2
   ba922:	f7fe bd71 	b.w	b9408 <network_disconnect>

000ba926 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   ba926:	2300      	movs	r3, #0
   ba928:	6840      	ldr	r0, [r0, #4]
   ba92a:	461a      	mov	r2, r3
   ba92c:	f7fe bd5c 	b.w	b93e8 <network_connect>

000ba930 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   ba930:	4b02      	ldr	r3, [pc, #8]	; (ba93c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   ba932:	2203      	movs	r2, #3
   ba934:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   ba936:	4a02      	ldr	r2, [pc, #8]	; (ba940 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   ba938:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   ba93a:	4770      	bx	lr
   ba93c:	2003e6c8 	.word	0x2003e6c8
   ba940:	000bf4c8 	.word	0x000bf4c8

000ba944 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   ba944:	4770      	bx	lr

000ba946 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   ba946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba948:	4606      	mov	r6, r0
   ba94a:	4615      	mov	r5, r2
   ba94c:	460c      	mov	r4, r1
   ba94e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   ba950:	42bc      	cmp	r4, r7
   ba952:	d006      	beq.n	ba962 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   ba954:	6833      	ldr	r3, [r6, #0]
   ba956:	f814 1b01 	ldrb.w	r1, [r4], #1
   ba95a:	689b      	ldr	r3, [r3, #8]
   ba95c:	4630      	mov	r0, r6
   ba95e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   ba960:	e7f6      	b.n	ba950 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   ba962:	4628      	mov	r0, r5
   ba964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba966 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   ba966:	7c00      	ldrb	r0, [r0, #16]
   ba968:	2200      	movs	r2, #0
   ba96a:	f7fe bbf9 	b.w	b9160 <hal_i2c_write>

000ba96e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   ba96e:	7c00      	ldrb	r0, [r0, #16]
   ba970:	2100      	movs	r1, #0
   ba972:	f7fe bbfd 	b.w	b9170 <hal_i2c_available>

000ba976 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   ba976:	7c00      	ldrb	r0, [r0, #16]
   ba978:	2100      	movs	r1, #0
   ba97a:	f7fe bc01 	b.w	b9180 <hal_i2c_read>

000ba97e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   ba97e:	7c00      	ldrb	r0, [r0, #16]
   ba980:	2100      	movs	r1, #0
   ba982:	f7fe bc05 	b.w	b9190 <hal_i2c_peek>

000ba986 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   ba986:	7c00      	ldrb	r0, [r0, #16]
   ba988:	2100      	movs	r1, #0
   ba98a:	f7fe bc09 	b.w	b91a0 <hal_i2c_flush>

000ba98e <_ZN7TwoWireD0Ev>:
   ba98e:	b510      	push	{r4, lr}
   ba990:	2114      	movs	r1, #20
   ba992:	4604      	mov	r4, r0
   ba994:	f7f9 fb87 	bl	b40a6 <_ZdlPvj>
   ba998:	4620      	mov	r0, r4
   ba99a:	bd10      	pop	{r4, pc}

000ba99c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   ba99c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   ba99e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba9a2:	4604      	mov	r4, r0
   ba9a4:	4608      	mov	r0, r1
   ba9a6:	2100      	movs	r1, #0
   ba9a8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   ba9ac:	4b03      	ldr	r3, [pc, #12]	; (ba9bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   ba9ae:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   ba9b0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   ba9b2:	4611      	mov	r1, r2
   ba9b4:	f7fe fbfc 	bl	b91b0 <hal_i2c_init>
}
   ba9b8:	4620      	mov	r0, r4
   ba9ba:	bd10      	pop	{r4, pc}
   ba9bc:	000bf504 	.word	0x000bf504

000ba9c0 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   ba9c0:	7c00      	ldrb	r0, [r0, #16]
   ba9c2:	2200      	movs	r2, #0
   ba9c4:	f7fe bbac 	b.w	b9120 <hal_i2c_set_speed>

000ba9c8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   ba9c8:	2300      	movs	r3, #0
   ba9ca:	7c00      	ldrb	r0, [r0, #16]
   ba9cc:	461a      	mov	r2, r3
   ba9ce:	4619      	mov	r1, r3
   ba9d0:	f7fe bbae 	b.w	b9130 <hal_i2c_begin>

000ba9d4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   ba9d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   ba9d6:	2200      	movs	r2, #0
   ba9d8:	2314      	movs	r3, #20
   ba9da:	e9cd 2201 	strd	r2, r2, [sp, #4]
   ba9de:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   ba9e2:	780b      	ldrb	r3, [r1, #0]
   ba9e4:	f88d 3008 	strb.w	r3, [sp, #8]
   ba9e8:	684b      	ldr	r3, [r1, #4]
   ba9ea:	9303      	str	r3, [sp, #12]
   ba9ec:	68cb      	ldr	r3, [r1, #12]
   ba9ee:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   ba9f0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   ba9f2:	7a0b      	ldrb	r3, [r1, #8]
   ba9f4:	9305      	str	r3, [sp, #20]
   ba9f6:	a901      	add	r1, sp, #4
   ba9f8:	f7fe fbe2 	bl	b91c0 <hal_i2c_request_ex>
}
   ba9fc:	b007      	add	sp, #28
   ba9fe:	f85d fb04 	ldr.w	pc, [sp], #4

000baa02 <_ZN7TwoWire11requestFromEhjh>:
{
   baa02:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   baa04:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   baa06:	f88d 1000 	strb.w	r1, [sp]
   baa0a:	f04f 0164 	mov.w	r1, #100	; 0x64
   baa0e:	9103      	str	r1, [sp, #12]
   baa10:	bf18      	it	ne
   baa12:	2301      	movne	r3, #1
   baa14:	4669      	mov	r1, sp
    size_ = size;
   baa16:	9201      	str	r2, [sp, #4]
   baa18:	f88d 3008 	strb.w	r3, [sp, #8]
   baa1c:	f7ff ffda 	bl	ba9d4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   baa20:	b005      	add	sp, #20
   baa22:	f85d fb04 	ldr.w	pc, [sp], #4

000baa26 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   baa26:	2301      	movs	r3, #1
   baa28:	f7ff bfeb 	b.w	baa02 <_ZN7TwoWire11requestFromEhjh>

000baa2c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   baa2c:	7c00      	ldrb	r0, [r0, #16]
   baa2e:	2200      	movs	r2, #0
   baa30:	f7fe bb86 	b.w	b9140 <hal_i2c_begin_transmission>

000baa34 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   baa34:	b2c9      	uxtb	r1, r1
   baa36:	f7ff bff9 	b.w	baa2c <_ZN7TwoWire17beginTransmissionEh>

000baa3a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   baa3a:	7c00      	ldrb	r0, [r0, #16]
   baa3c:	2200      	movs	r2, #0
   baa3e:	f7fe bb87 	b.w	b9150 <hal_i2c_end_transmission>

000baa42 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   baa42:	2101      	movs	r1, #1
   baa44:	f7ff bff9 	b.w	baa3a <_ZN7TwoWire15endTransmissionEh>

000baa48 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   baa48:	4770      	bx	lr

000baa4a <_ZN9IPAddressD0Ev>:
   baa4a:	b510      	push	{r4, lr}
   baa4c:	2118      	movs	r1, #24
   baa4e:	4604      	mov	r4, r0
   baa50:	f7f9 fb29 	bl	b40a6 <_ZdlPvj>
   baa54:	4620      	mov	r0, r4
   baa56:	bd10      	pop	{r4, pc}

000baa58 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   baa58:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   baa5a:	7d03      	ldrb	r3, [r0, #20]
   baa5c:	2b06      	cmp	r3, #6
{
   baa5e:	b08d      	sub	sp, #52	; 0x34
   baa60:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   baa62:	f100 0704 	add.w	r7, r0, #4
   baa66:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   baa6a:	d012      	beq.n	baa92 <_ZNK9IPAddress7printToER5Print+0x3a>
   baa6c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   baa70:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   baa74:	220a      	movs	r2, #10
   baa76:	4630      	mov	r0, r6
   baa78:	f000 f973 	bl	bad62 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   baa7c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   baa7e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   baa80:	d019      	beq.n	baab6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   baa82:	2c00      	cmp	r4, #0
   baa84:	d0f4      	beq.n	baa70 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   baa86:	212e      	movs	r1, #46	; 0x2e
   baa88:	4630      	mov	r0, r6
   baa8a:	f000 f951 	bl	bad30 <_ZN5Print5printEc>
   baa8e:	4404      	add	r4, r0
   baa90:	e7ee      	b.n	baa70 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   baa92:	232f      	movs	r3, #47	; 0x2f
   baa94:	466a      	mov	r2, sp
   baa96:	4639      	mov	r1, r7
   baa98:	200a      	movs	r0, #10
		buf[0] = 0;
   baa9a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   baa9e:	f7fe fb9f 	bl	b91e0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   baaa2:	4668      	mov	r0, sp
   baaa4:	f002 f8ea 	bl	bcc7c <strlen>
   baaa8:	6833      	ldr	r3, [r6, #0]
   baaaa:	4602      	mov	r2, r0
   baaac:	68db      	ldr	r3, [r3, #12]
   baaae:	4669      	mov	r1, sp
   baab0:	4630      	mov	r0, r6
   baab2:	4798      	blx	r3
   baab4:	4604      	mov	r4, r0
    }
    return n;
}
   baab6:	4620      	mov	r0, r4
   baab8:	b00d      	add	sp, #52	; 0x34
   baaba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000baabc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   baabc:	b510      	push	{r4, lr}
   baabe:	4b05      	ldr	r3, [pc, #20]	; (baad4 <_ZN9IPAddressC1Ev+0x18>)
   baac0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   baac2:	2211      	movs	r2, #17
   baac4:	f840 3b04 	str.w	r3, [r0], #4
   baac8:	2100      	movs	r1, #0
   baaca:	f002 f88f 	bl	bcbec <memset>
}
   baace:	4620      	mov	r0, r4
   baad0:	bd10      	pop	{r4, pc}
   baad2:	bf00      	nop
   baad4:	000bf52c 	.word	0x000bf52c

000baad8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   baad8:	4603      	mov	r3, r0
   baada:	4a07      	ldr	r2, [pc, #28]	; (baaf8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   baadc:	b510      	push	{r4, lr}
   baade:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   baae2:	f101 0210 	add.w	r2, r1, #16
   baae6:	f851 4b04 	ldr.w	r4, [r1], #4
   baaea:	f843 4b04 	str.w	r4, [r3], #4
   baaee:	4291      	cmp	r1, r2
   baaf0:	d1f9      	bne.n	baae6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   baaf2:	780a      	ldrb	r2, [r1, #0]
   baaf4:	701a      	strb	r2, [r3, #0]
}
   baaf6:	bd10      	pop	{r4, pc}
   baaf8:	000bf52c 	.word	0x000bf52c

000baafc <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   baafc:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   baafe:	2b04      	cmp	r3, #4
   bab00:	d104      	bne.n	bab0c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   bab02:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   bab04:	3800      	subs	r0, #0
   bab06:	bf18      	it	ne
   bab08:	2001      	movne	r0, #1
   bab0a:	4770      	bx	lr
    } else if (version() == 6) {
   bab0c:	2b06      	cmp	r3, #6
   bab0e:	d107      	bne.n	bab20 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   bab10:	6843      	ldr	r3, [r0, #4]
   bab12:	b93b      	cbnz	r3, bab24 <_ZNK9IPAddresscvbEv+0x28>
   bab14:	6883      	ldr	r3, [r0, #8]
   bab16:	b92b      	cbnz	r3, bab24 <_ZNK9IPAddresscvbEv+0x28>
   bab18:	68c3      	ldr	r3, [r0, #12]
   bab1a:	b91b      	cbnz	r3, bab24 <_ZNK9IPAddresscvbEv+0x28>
   bab1c:	6900      	ldr	r0, [r0, #16]
   bab1e:	e7f1      	b.n	bab04 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   bab20:	2000      	movs	r0, #0
   bab22:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   bab24:	2001      	movs	r0, #1
}
   bab26:	4770      	bx	lr

000bab28 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bab28:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bab2a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bab2e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bab32:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bab36:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bab3a:	2304      	movs	r3, #4
   bab3c:	6041      	str	r1, [r0, #4]
   bab3e:	7503      	strb	r3, [r0, #20]
}
   bab40:	bd10      	pop	{r4, pc}
	...

000bab44 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bab44:	b507      	push	{r0, r1, r2, lr}
   bab46:	4b06      	ldr	r3, [pc, #24]	; (bab60 <_ZN9IPAddressC1EPKh+0x1c>)
   bab48:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bab4a:	78cb      	ldrb	r3, [r1, #3]
   bab4c:	9300      	str	r3, [sp, #0]
   bab4e:	788b      	ldrb	r3, [r1, #2]
   bab50:	784a      	ldrb	r2, [r1, #1]
   bab52:	7809      	ldrb	r1, [r1, #0]
   bab54:	f7ff ffe8 	bl	bab28 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bab58:	b003      	add	sp, #12
   bab5a:	f85d fb04 	ldr.w	pc, [sp], #4
   bab5e:	bf00      	nop
   bab60:	000bf52c 	.word	0x000bf52c

000bab64 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   bab64:	4b01      	ldr	r3, [pc, #4]	; (bab6c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   bab66:	4a02      	ldr	r2, [pc, #8]	; (bab70 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   bab68:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   bab6a:	4770      	bx	lr
   bab6c:	2003e6d0 	.word	0x2003e6d0
   bab70:	000bf538 	.word	0x000bf538

000bab74 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bab74:	2300      	movs	r3, #0
   bab76:	6840      	ldr	r0, [r0, #4]
   bab78:	461a      	mov	r2, r3
   bab7a:	f7fe bc35 	b.w	b93e8 <network_connect>

000bab7e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bab7e:	6840      	ldr	r0, [r0, #4]
   bab80:	2200      	movs	r2, #0
   bab82:	2102      	movs	r1, #2
   bab84:	f7fe bc40 	b.w	b9408 <network_disconnect>

000bab88 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bab88:	2200      	movs	r2, #0
   bab8a:	6840      	ldr	r0, [r0, #4]
   bab8c:	4611      	mov	r1, r2
   bab8e:	f7fe bc33 	b.w	b93f8 <network_connecting>

000bab92 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bab92:	2200      	movs	r2, #0
   bab94:	6840      	ldr	r0, [r0, #4]
   bab96:	4611      	mov	r1, r2
   bab98:	f7fe bc3e 	b.w	b9418 <network_ready>

000bab9c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bab9c:	2300      	movs	r3, #0
   bab9e:	6840      	ldr	r0, [r0, #4]
   baba0:	461a      	mov	r2, r3
   baba2:	4619      	mov	r1, r3
   baba4:	f7fe bc40 	b.w	b9428 <network_on>

000baba8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   baba8:	2300      	movs	r3, #0
   babaa:	6840      	ldr	r0, [r0, #4]
   babac:	461a      	mov	r2, r3
   babae:	4619      	mov	r1, r3
   babb0:	f7fe bc42 	b.w	b9438 <network_off>

000babb4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   babb4:	6840      	ldr	r0, [r0, #4]
   babb6:	2100      	movs	r1, #0
   babb8:	f7fe bc76 	b.w	b94a8 <network_is_on>

000babbc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   babbc:	6840      	ldr	r0, [r0, #4]
   babbe:	2100      	movs	r1, #0
   babc0:	f7fe bc7a 	b.w	b94b8 <network_is_off>

000babc4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   babc4:	6840      	ldr	r0, [r0, #4]
   babc6:	2200      	movs	r2, #0
   babc8:	f081 0101 	eor.w	r1, r1, #1
   babcc:	f7fe bc3c 	b.w	b9448 <network_listen>

000babd0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   babd0:	6840      	ldr	r0, [r0, #4]
   babd2:	2200      	movs	r2, #0
   babd4:	f7fe bc58 	b.w	b9488 <network_set_listen_timeout>

000babd8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   babd8:	2200      	movs	r2, #0
   babda:	6840      	ldr	r0, [r0, #4]
   babdc:	4611      	mov	r1, r2
   babde:	f7fe bc5b 	b.w	b9498 <network_get_listen_timeout>

000babe2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   babe2:	2200      	movs	r2, #0
   babe4:	6840      	ldr	r0, [r0, #4]
   babe6:	4611      	mov	r1, r2
   babe8:	f7fe bc36 	b.w	b9458 <network_listening>

000babec <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   babec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   babf0:	b095      	sub	sp, #84	; 0x54
   babf2:	4614      	mov	r4, r2
   babf4:	460d      	mov	r5, r1
   babf6:	4607      	mov	r7, r0
    IPAddress addr;
   babf8:	f7ff ff60 	bl	baabc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   babfc:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   babfe:	221c      	movs	r2, #28
   bac00:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bac02:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bac04:	f001 fff2 	bl	bcbec <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bac08:	2340      	movs	r3, #64	; 0x40
   bac0a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bac0c:	4620      	mov	r0, r4
   bac0e:	466b      	mov	r3, sp
   bac10:	aa0c      	add	r2, sp, #48	; 0x30
   bac12:	2100      	movs	r1, #0
   bac14:	f7fe fb04 	bl	b9220 <netdb_getaddrinfo>
    if (!r) {
   bac18:	4604      	mov	r4, r0
   bac1a:	2800      	cmp	r0, #0
   bac1c:	d14b      	bne.n	bacb6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bac1e:	4602      	mov	r2, r0
   bac20:	2101      	movs	r1, #1
   bac22:	6868      	ldr	r0, [r5, #4]
   bac24:	f7fe fbf8 	bl	b9418 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bac28:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bac2a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bac2c:	4622      	mov	r2, r4
   bac2e:	6868      	ldr	r0, [r5, #4]
   bac30:	f7fe fbf2 	bl	b9418 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bac34:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bac36:	4681      	mov	r9, r0
        bool ok = false;
   bac38:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bac3a:	2e00      	cmp	r6, #0
   bac3c:	d03b      	beq.n	bacb6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bac3e:	2900      	cmp	r1, #0
   bac40:	d139      	bne.n	bacb6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bac42:	6873      	ldr	r3, [r6, #4]
   bac44:	2b02      	cmp	r3, #2
   bac46:	d003      	beq.n	bac50 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bac48:	2b0a      	cmp	r3, #10
   bac4a:	d011      	beq.n	bac70 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bac4c:	69f6      	ldr	r6, [r6, #28]
   bac4e:	e7f4      	b.n	bac3a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bac50:	f1b8 0f00 	cmp.w	r8, #0
   bac54:	d0fa      	beq.n	bac4c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bac56:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bac58:	a806      	add	r0, sp, #24
   bac5a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bac5c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bac5e:	f7ff ff71 	bl	bab44 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bac62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bac64:	1d3c      	adds	r4, r7, #4
   bac66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bac68:	682b      	ldr	r3, [r5, #0]
   bac6a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bac6c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bac6e:	e7ed      	b.n	bac4c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bac70:	f1b9 0f00 	cmp.w	r9, #0
   bac74:	d0ea      	beq.n	bac4c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bac76:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bac78:	2210      	movs	r2, #16
   bac7a:	a801      	add	r0, sp, #4
   bac7c:	f001 ffb6 	bl	bcbec <memset>
                    a.v = 6;
   bac80:	2306      	movs	r3, #6
   bac82:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bac86:	ad01      	add	r5, sp, #4
   bac88:	f104 0308 	add.w	r3, r4, #8
   bac8c:	3418      	adds	r4, #24
   bac8e:	6818      	ldr	r0, [r3, #0]
   bac90:	6859      	ldr	r1, [r3, #4]
   bac92:	462a      	mov	r2, r5
   bac94:	c203      	stmia	r2!, {r0, r1}
   bac96:	3308      	adds	r3, #8
   bac98:	42a3      	cmp	r3, r4
   bac9a:	4615      	mov	r5, r2
   bac9c:	d1f7      	bne.n	bac8e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bac9e:	a901      	add	r1, sp, #4
   baca0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   baca2:	ad07      	add	r5, sp, #28
   baca4:	f7ff ff18 	bl	baad8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   baca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bacaa:	1d3c      	adds	r4, r7, #4
   bacac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bacae:	682b      	ldr	r3, [r5, #0]
   bacb0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bacb2:	4649      	mov	r1, r9
   bacb4:	e7ca      	b.n	bac4c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bacb6:	9800      	ldr	r0, [sp, #0]
   bacb8:	f7fe faaa 	bl	b9210 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bacbc:	4638      	mov	r0, r7
   bacbe:	b015      	add	sp, #84	; 0x54
   bacc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bacc4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bacc4:	4b02      	ldr	r3, [pc, #8]	; (bacd0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bacc6:	4a03      	ldr	r2, [pc, #12]	; (bacd4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bacc8:	601a      	str	r2, [r3, #0]
   bacca:	2200      	movs	r2, #0
   baccc:	605a      	str	r2, [r3, #4]

} // spark
   bacce:	4770      	bx	lr
   bacd0:	2003e6d4 	.word	0x2003e6d4
   bacd4:	000bf544 	.word	0x000bf544

000bacd8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bacd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bacda:	4606      	mov	r6, r0
   bacdc:	460d      	mov	r5, r1
  size_t n = 0;
   bacde:	188f      	adds	r7, r1, r2
   bace0:	2400      	movs	r4, #0
  while (size--) {
   bace2:	42bd      	cmp	r5, r7
   bace4:	d00c      	beq.n	bad00 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bace6:	6833      	ldr	r3, [r6, #0]
   bace8:	f815 1b01 	ldrb.w	r1, [r5], #1
   bacec:	689b      	ldr	r3, [r3, #8]
   bacee:	4630      	mov	r0, r6
   bacf0:	4798      	blx	r3
     if (chunk>=0)
   bacf2:	1e03      	subs	r3, r0, #0
   bacf4:	db01      	blt.n	bacfa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bacf6:	441c      	add	r4, r3
  while (size--) {
   bacf8:	e7f3      	b.n	bace2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bacfa:	2c00      	cmp	r4, #0
   bacfc:	bf08      	it	eq
   bacfe:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bad00:	4620      	mov	r0, r4
   bad02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bad04 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   bad04:	b513      	push	{r0, r1, r4, lr}
   bad06:	4604      	mov	r4, r0
    }
   bad08:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   bad0a:	b159      	cbz	r1, bad24 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   bad0c:	9101      	str	r1, [sp, #4]
   bad0e:	f001 ffb5 	bl	bcc7c <strlen>
   bad12:	6823      	ldr	r3, [r4, #0]
   bad14:	9901      	ldr	r1, [sp, #4]
   bad16:	68db      	ldr	r3, [r3, #12]
   bad18:	4602      	mov	r2, r0
   bad1a:	4620      	mov	r0, r4
    }
   bad1c:	b002      	add	sp, #8
   bad1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   bad22:	4718      	bx	r3
    }
   bad24:	b002      	add	sp, #8
   bad26:	bd10      	pop	{r4, pc}

000bad28 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bad28:	b508      	push	{r3, lr}
  return write(str);
   bad2a:	f7ff ffeb 	bl	bad04 <_ZN5Print5writeEPKc>
}
   bad2e:	bd08      	pop	{r3, pc}

000bad30 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bad30:	6803      	ldr	r3, [r0, #0]
   bad32:	689b      	ldr	r3, [r3, #8]
   bad34:	4718      	bx	r3

000bad36 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bad36:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bad38:	210d      	movs	r1, #13
{
   bad3a:	4605      	mov	r5, r0
  size_t n = print('\r');
   bad3c:	f7ff fff8 	bl	bad30 <_ZN5Print5printEc>
  n += print('\n');
   bad40:	210a      	movs	r1, #10
  size_t n = print('\r');
   bad42:	4604      	mov	r4, r0
  n += print('\n');
   bad44:	4628      	mov	r0, r5
   bad46:	f7ff fff3 	bl	bad30 <_ZN5Print5printEc>
  return n;
}
   bad4a:	4420      	add	r0, r4
   bad4c:	bd38      	pop	{r3, r4, r5, pc}

000bad4e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   bad4e:	b538      	push	{r3, r4, r5, lr}
   bad50:	4605      	mov	r5, r0
  return write(str);
   bad52:	f7ff ffd7 	bl	bad04 <_ZN5Print5writeEPKc>
   bad56:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   bad58:	4628      	mov	r0, r5
   bad5a:	f7ff ffec 	bl	bad36 <_ZN5Print7printlnEv>
  return n;
}
   bad5e:	4420      	add	r0, r4
   bad60:	bd38      	pop	{r3, r4, r5, pc}

000bad62 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bad62:	b530      	push	{r4, r5, lr}
   bad64:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bad66:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bad68:	2a01      	cmp	r2, #1
  *str = '\0';
   bad6a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bad6e:	bf98      	it	ls
   bad70:	220a      	movls	r2, #10
   bad72:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bad74:	460d      	mov	r5, r1
   bad76:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bad7a:	fb01 5312 	mls	r3, r1, r2, r5
   bad7e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bad82:	2b09      	cmp	r3, #9
   bad84:	bf94      	ite	ls
   bad86:	3330      	addls	r3, #48	; 0x30
   bad88:	3337      	addhi	r3, #55	; 0x37
   bad8a:	b2db      	uxtb	r3, r3
  } while(n);
   bad8c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bad8e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bad92:	d9ef      	bls.n	bad74 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bad94:	4621      	mov	r1, r4
   bad96:	f7ff ffb5 	bl	bad04 <_ZN5Print5writeEPKc>
}
   bad9a:	b00b      	add	sp, #44	; 0x2c
   bad9c:	bd30      	pop	{r4, r5, pc}

000bad9e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bad9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bada2:	b086      	sub	sp, #24
   bada4:	af00      	add	r7, sp, #0
   bada6:	4605      	mov	r5, r0
   bada8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   badaa:	1d38      	adds	r0, r7, #4
   badac:	2114      	movs	r1, #20
{
   badae:	4614      	mov	r4, r2
    va_copy(args2, args);
   badb0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   badb2:	f7fe fba9 	bl	b9508 <vsnprintf>

    if (n<bufsize)
   badb6:	2813      	cmp	r0, #19
   badb8:	d80e      	bhi.n	badd8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   badba:	1d39      	adds	r1, r7, #4
   badbc:	4628      	mov	r0, r5
   badbe:	f7ff ffa1 	bl	bad04 <_ZN5Print5writeEPKc>
   badc2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   badc4:	b11e      	cbz	r6, badce <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   badc6:	4628      	mov	r0, r5
   badc8:	f7ff ffb5 	bl	bad36 <_ZN5Print7printlnEv>
   badcc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   badce:	4620      	mov	r0, r4
   badd0:	3718      	adds	r7, #24
   badd2:	46bd      	mov	sp, r7
   badd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   badd8:	f100 0308 	add.w	r3, r0, #8
   baddc:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bade0:	46e8      	mov	r8, sp
        char bigger[n+1];
   bade2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bade6:	4622      	mov	r2, r4
   bade8:	1c41      	adds	r1, r0, #1
   badea:	683b      	ldr	r3, [r7, #0]
   badec:	4668      	mov	r0, sp
   badee:	f7fe fb8b 	bl	b9508 <vsnprintf>
  return write(str);
   badf2:	4669      	mov	r1, sp
   badf4:	4628      	mov	r0, r5
   badf6:	f7ff ff85 	bl	bad04 <_ZN5Print5writeEPKc>
   badfa:	4604      	mov	r4, r0
   badfc:	46c5      	mov	sp, r8
   badfe:	e7e1      	b.n	badc4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bae00 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bae00:	4b01      	ldr	r3, [pc, #4]	; (bae08 <_GLOBAL__sub_I_RGB+0x8>)
   bae02:	2200      	movs	r2, #0
   bae04:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bae06:	4770      	bx	lr
   bae08:	2003e6dc 	.word	0x2003e6dc

000bae0c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bae0c:	b510      	push	{r4, lr}
   bae0e:	4604      	mov	r4, r0
{
	free(buffer);
   bae10:	6800      	ldr	r0, [r0, #0]
   bae12:	f7fe fb61 	bl	b94d8 <free>
}
   bae16:	4620      	mov	r0, r4
   bae18:	bd10      	pop	{r4, pc}

000bae1a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bae1a:	b510      	push	{r4, lr}
   bae1c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bae1e:	6800      	ldr	r0, [r0, #0]
   bae20:	b108      	cbz	r0, bae26 <_ZN6String10invalidateEv+0xc>
   bae22:	f7fe fb59 	bl	b94d8 <free>
	buffer = NULL;
   bae26:	2300      	movs	r3, #0
	capacity = len = 0;
   bae28:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bae2c:	6023      	str	r3, [r4, #0]
}
   bae2e:	bd10      	pop	{r4, pc}

000bae30 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bae30:	b538      	push	{r3, r4, r5, lr}
   bae32:	4604      	mov	r4, r0
   bae34:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bae36:	6800      	ldr	r0, [r0, #0]
   bae38:	3101      	adds	r1, #1
   bae3a:	f7fe fb55 	bl	b94e8 <realloc>
	if (newbuffer) {
   bae3e:	b110      	cbz	r0, bae46 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bae40:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bae44:	2001      	movs	r0, #1
	}
	return 0;
}
   bae46:	bd38      	pop	{r3, r4, r5, pc}

000bae48 <_ZN6String7reserveEj>:
{
   bae48:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bae4a:	6803      	ldr	r3, [r0, #0]
{
   bae4c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bae4e:	b123      	cbz	r3, bae5a <_ZN6String7reserveEj+0x12>
   bae50:	6843      	ldr	r3, [r0, #4]
   bae52:	428b      	cmp	r3, r1
   bae54:	d301      	bcc.n	bae5a <_ZN6String7reserveEj+0x12>
   bae56:	2001      	movs	r0, #1
}
   bae58:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bae5a:	4620      	mov	r0, r4
   bae5c:	f7ff ffe8 	bl	bae30 <_ZN6String12changeBufferEj>
   bae60:	2800      	cmp	r0, #0
   bae62:	d0f9      	beq.n	bae58 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bae64:	68a3      	ldr	r3, [r4, #8]
   bae66:	2b00      	cmp	r3, #0
   bae68:	d1f5      	bne.n	bae56 <_ZN6String7reserveEj+0xe>
   bae6a:	6822      	ldr	r2, [r4, #0]
   bae6c:	7013      	strb	r3, [r2, #0]
   bae6e:	e7f2      	b.n	bae56 <_ZN6String7reserveEj+0xe>

000bae70 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bae70:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bae72:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bae74:	4611      	mov	r1, r2
   bae76:	9201      	str	r2, [sp, #4]
{
   bae78:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bae7a:	f7ff ffe5 	bl	bae48 <_ZN6String7reserveEj>
   bae7e:	9a01      	ldr	r2, [sp, #4]
   bae80:	b928      	cbnz	r0, bae8e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bae82:	4620      	mov	r0, r4
   bae84:	f7ff ffc9 	bl	bae1a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bae88:	4620      	mov	r0, r4
   bae8a:	b003      	add	sp, #12
   bae8c:	bd30      	pop	{r4, r5, pc}
	len = length;
   bae8e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bae90:	4629      	mov	r1, r5
   bae92:	6820      	ldr	r0, [r4, #0]
   bae94:	f001 fe82 	bl	bcb9c <memcpy>
	buffer[len] = 0;
   bae98:	6822      	ldr	r2, [r4, #0]
   bae9a:	68a3      	ldr	r3, [r4, #8]
   bae9c:	2100      	movs	r1, #0
   bae9e:	54d1      	strb	r1, [r2, r3]
	return *this;
   baea0:	e7f2      	b.n	bae88 <_ZN6String4copyEPKcj+0x18>

000baea2 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   baea2:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   baea4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   baea6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   baeaa:	4604      	mov	r4, r0
	len = 0;
   baeac:	6083      	str	r3, [r0, #8]
	flags = 0;
   baeae:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   baeb0:	b141      	cbz	r1, baec4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   baeb2:	4608      	mov	r0, r1
   baeb4:	9101      	str	r1, [sp, #4]
   baeb6:	f001 fee1 	bl	bcc7c <strlen>
   baeba:	9901      	ldr	r1, [sp, #4]
   baebc:	4602      	mov	r2, r0
   baebe:	4620      	mov	r0, r4
   baec0:	f7ff ffd6 	bl	bae70 <_ZN6String4copyEPKcj>
}
   baec4:	4620      	mov	r0, r4
   baec6:	b002      	add	sp, #8
   baec8:	bd10      	pop	{r4, pc}

000baeca <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   baeca:	b538      	push	{r3, r4, r5, lr}
   baecc:	4605      	mov	r5, r0
	if (buffer) {
   baece:	6800      	ldr	r0, [r0, #0]
{
   baed0:	460c      	mov	r4, r1
	if (buffer) {
   baed2:	b168      	cbz	r0, baef0 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   baed4:	686a      	ldr	r2, [r5, #4]
   baed6:	688b      	ldr	r3, [r1, #8]
   baed8:	429a      	cmp	r2, r3
   baeda:	d307      	bcc.n	baeec <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   baedc:	6809      	ldr	r1, [r1, #0]
   baede:	f001 fec5 	bl	bcc6c <strcpy>
			len = rhs.len;
   baee2:	68a3      	ldr	r3, [r4, #8]
   baee4:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   baee6:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   baee8:	60a3      	str	r3, [r4, #8]
}
   baeea:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   baeec:	f7fe faf4 	bl	b94d8 <free>
	buffer = rhs.buffer;
   baef0:	6823      	ldr	r3, [r4, #0]
   baef2:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   baef4:	6863      	ldr	r3, [r4, #4]
   baef6:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   baef8:	68a3      	ldr	r3, [r4, #8]
   baefa:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   baefc:	2300      	movs	r3, #0
	rhs.capacity = 0;
   baefe:	e9c4 3300 	strd	r3, r3, [r4]
   baf02:	e7f1      	b.n	baee8 <_ZN6String4moveERS_+0x1e>

000baf04 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   baf04:	4288      	cmp	r0, r1
{
   baf06:	b510      	push	{r4, lr}
   baf08:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   baf0a:	d005      	beq.n	baf18 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   baf0c:	680b      	ldr	r3, [r1, #0]
   baf0e:	b12b      	cbz	r3, baf1c <_ZN6StringaSERKS_+0x18>
   baf10:	688a      	ldr	r2, [r1, #8]
   baf12:	4619      	mov	r1, r3
   baf14:	f7ff ffac 	bl	bae70 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   baf18:	4620      	mov	r0, r4
   baf1a:	bd10      	pop	{r4, pc}
	else invalidate();
   baf1c:	f7ff ff7d 	bl	bae1a <_ZN6String10invalidateEv>
   baf20:	e7fa      	b.n	baf18 <_ZN6StringaSERKS_+0x14>

000baf22 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   baf22:	4288      	cmp	r0, r1
{
   baf24:	b510      	push	{r4, lr}
   baf26:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   baf28:	d001      	beq.n	baf2e <_ZN6StringaSEOS_+0xc>
   baf2a:	f7ff ffce 	bl	baeca <_ZN6String4moveERS_>
	return *this;
}
   baf2e:	4620      	mov	r0, r4
   baf30:	bd10      	pop	{r4, pc}

000baf32 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   baf32:	b513      	push	{r0, r1, r4, lr}
   baf34:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   baf36:	b159      	cbz	r1, baf50 <_ZN6StringaSEPKc+0x1e>
   baf38:	4608      	mov	r0, r1
   baf3a:	9101      	str	r1, [sp, #4]
   baf3c:	f001 fe9e 	bl	bcc7c <strlen>
   baf40:	9901      	ldr	r1, [sp, #4]
   baf42:	4602      	mov	r2, r0
   baf44:	4620      	mov	r0, r4
   baf46:	f7ff ff93 	bl	bae70 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   baf4a:	4620      	mov	r0, r4
   baf4c:	b002      	add	sp, #8
   baf4e:	bd10      	pop	{r4, pc}
	else invalidate();
   baf50:	f7ff ff63 	bl	bae1a <_ZN6String10invalidateEv>
   baf54:	e7f9      	b.n	baf4a <_ZN6StringaSEPKc+0x18>

000baf56 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   baf56:	b510      	push	{r4, lr}
   baf58:	4604      	mov	r4, r0
   baf5a:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   baf5c:	2300      	movs	r3, #0
	capacity = 0;
   baf5e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   baf62:	60a3      	str	r3, [r4, #8]
	flags = 0;
   baf64:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   baf66:	4608      	mov	r0, r1
	itoa(value, buf, base);
   baf68:	a901      	add	r1, sp, #4
   baf6a:	f000 fd15 	bl	bb998 <itoa>
	*this = buf;
   baf6e:	a901      	add	r1, sp, #4
   baf70:	4620      	mov	r0, r4
   baf72:	f7ff ffde 	bl	baf32 <_ZN6StringaSEPKc>
}
   baf76:	4620      	mov	r0, r4
   baf78:	b00a      	add	sp, #40	; 0x28
   baf7a:	bd10      	pop	{r4, pc}

000baf7c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   baf7c:	b570      	push	{r4, r5, r6, lr}
   baf7e:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   baf80:	460e      	mov	r6, r1
   baf82:	b909      	cbnz	r1, baf88 <_ZN6String6concatEPKcj+0xc>
   baf84:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   baf86:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   baf88:	b16a      	cbz	r2, bafa6 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   baf8a:	6884      	ldr	r4, [r0, #8]
   baf8c:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   baf8e:	4621      	mov	r1, r4
   baf90:	f7ff ff5a 	bl	bae48 <_ZN6String7reserveEj>
   baf94:	2800      	cmp	r0, #0
   baf96:	d0f5      	beq.n	baf84 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   baf98:	6828      	ldr	r0, [r5, #0]
   baf9a:	68ab      	ldr	r3, [r5, #8]
   baf9c:	4631      	mov	r1, r6
   baf9e:	4418      	add	r0, r3
   bafa0:	f001 fe64 	bl	bcc6c <strcpy>
	len = newlen;
   bafa4:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   bafa6:	2001      	movs	r0, #1
   bafa8:	e7ed      	b.n	baf86 <_ZN6String6concatEPKcj+0xa>

000bafaa <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   bafaa:	688a      	ldr	r2, [r1, #8]
   bafac:	6809      	ldr	r1, [r1, #0]
   bafae:	f7ff bfe5 	b.w	baf7c <_ZN6String6concatEPKcj>

000bafb2 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   bafb2:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   bafb4:	2300      	movs	r3, #0
	buf[0] = c;
   bafb6:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   bafba:	2201      	movs	r2, #1
   bafbc:	a901      	add	r1, sp, #4
	buf[1] = 0;
   bafbe:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   bafc2:	f7ff ffdb 	bl	baf7c <_ZN6String6concatEPKcj>
}
   bafc6:	b003      	add	sp, #12
   bafc8:	f85d fb04 	ldr.w	pc, [sp], #4

000bafcc <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   bafcc:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bafce:	688a      	ldr	r2, [r1, #8]
   bafd0:	6809      	ldr	r1, [r1, #0]
{
   bafd2:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bafd4:	f7ff ffd2 	bl	baf7c <_ZN6String6concatEPKcj>
   bafd8:	b910      	cbnz	r0, bafe0 <_ZplRK15StringSumHelperRK6String+0x14>
   bafda:	4620      	mov	r0, r4
   bafdc:	f7ff ff1d 	bl	bae1a <_ZN6String10invalidateEv>
	return a;
}
   bafe0:	4620      	mov	r0, r4
   bafe2:	bd10      	pop	{r4, pc}

000bafe4 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   bafe4:	b513      	push	{r0, r1, r4, lr}
   bafe6:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   bafe8:	b929      	cbnz	r1, baff6 <_ZplRK15StringSumHelperPKc+0x12>
   bafea:	4620      	mov	r0, r4
   bafec:	f7ff ff15 	bl	bae1a <_ZN6String10invalidateEv>
	return a;
}
   baff0:	4620      	mov	r0, r4
   baff2:	b002      	add	sp, #8
   baff4:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   baff6:	4608      	mov	r0, r1
   baff8:	9101      	str	r1, [sp, #4]
   baffa:	f001 fe3f 	bl	bcc7c <strlen>
   baffe:	9901      	ldr	r1, [sp, #4]
   bb000:	4602      	mov	r2, r0
   bb002:	4620      	mov	r0, r4
   bb004:	f7ff ffba 	bl	baf7c <_ZN6String6concatEPKcj>
   bb008:	2800      	cmp	r0, #0
   bb00a:	d0ee      	beq.n	bafea <_ZplRK15StringSumHelperPKc+0x6>
   bb00c:	e7f0      	b.n	baff0 <_ZplRK15StringSumHelperPKc+0xc>

000bb00e <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   bb00e:	6802      	ldr	r2, [r0, #0]
{
   bb010:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   bb012:	6809      	ldr	r1, [r1, #0]
   bb014:	b162      	cbz	r2, bb030 <_ZNK6String9compareToERKS_+0x22>
   bb016:	b941      	cbnz	r1, bb02a <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   bb018:	6880      	ldr	r0, [r0, #8]
   bb01a:	b160      	cbz	r0, bb036 <_ZNK6String9compareToERKS_+0x28>
   bb01c:	7810      	ldrb	r0, [r2, #0]
   bb01e:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   bb020:	6898      	ldr	r0, [r3, #8]
   bb022:	b140      	cbz	r0, bb036 <_ZNK6String9compareToERKS_+0x28>
   bb024:	7809      	ldrb	r1, [r1, #0]
   bb026:	4248      	negs	r0, r1
   bb028:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   bb02a:	4610      	mov	r0, r2
   bb02c:	f001 be14 	b.w	bcc58 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   bb030:	2900      	cmp	r1, #0
   bb032:	d1f5      	bne.n	bb020 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   bb034:	4608      	mov	r0, r1
}
   bb036:	4770      	bx	lr

000bb038 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   bb038:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   bb03a:	6882      	ldr	r2, [r0, #8]
   bb03c:	688b      	ldr	r3, [r1, #8]
   bb03e:	429a      	cmp	r2, r3
   bb040:	d105      	bne.n	bb04e <_ZNK6String6equalsERKS_+0x16>
   bb042:	f7ff ffe4 	bl	bb00e <_ZNK6String9compareToERKS_>
   bb046:	fab0 f080 	clz	r0, r0
   bb04a:	0940      	lsrs	r0, r0, #5
}
   bb04c:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   bb04e:	2000      	movs	r0, #0
   bb050:	e7fc      	b.n	bb04c <_ZNK6String6equalsERKS_+0x14>

000bb052 <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
   bb052:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bb054:	6882      	ldr	r2, [r0, #8]
   bb056:	b93a      	cbnz	r2, bb068 <_ZNK6String6equalsEPKc+0x16>
   bb058:	b121      	cbz	r1, bb064 <_ZNK6String6equalsEPKc+0x12>
   bb05a:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   bb05c:	fab0 f080 	clz	r0, r0
   bb060:	0940      	lsrs	r0, r0, #5
   bb062:	e000      	b.n	bb066 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bb064:	2001      	movs	r0, #1
}
   bb066:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   bb068:	6800      	ldr	r0, [r0, #0]
   bb06a:	b909      	cbnz	r1, bb070 <_ZNK6String6equalsEPKc+0x1e>
   bb06c:	7800      	ldrb	r0, [r0, #0]
   bb06e:	e7f5      	b.n	bb05c <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   bb070:	f001 fdf2 	bl	bcc58 <strcmp>
   bb074:	e7f2      	b.n	bb05c <_ZNK6String6equalsEPKc+0xa>

000bb076 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   bb076:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   bb078:	6883      	ldr	r3, [r0, #8]
   bb07a:	4293      	cmp	r3, r2
   bb07c:	d907      	bls.n	bb08e <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   bb07e:	6804      	ldr	r4, [r0, #0]
   bb080:	6809      	ldr	r1, [r1, #0]
   bb082:	18a0      	adds	r0, r4, r2
   bb084:	f001 fe22 	bl	bcccc <strstr>
	if (found == NULL) return -1;
   bb088:	b108      	cbz	r0, bb08e <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   bb08a:	1b00      	subs	r0, r0, r4
}
   bb08c:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   bb08e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bb092:	e7fb      	b.n	bb08c <_ZNK6String7indexOfERKS_j+0x16>

000bb094 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   bb094:	2200      	movs	r2, #0
   bb096:	f7ff bfee 	b.w	bb076 <_ZNK6String7indexOfERKS_j>
	...

000bb09c <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   bb09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   bb09e:	429a      	cmp	r2, r3
{
   bb0a0:	460f      	mov	r7, r1
   bb0a2:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   bb0a4:	490c      	ldr	r1, [pc, #48]	; (bb0d8 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   bb0a6:	bf88      	it	hi
   bb0a8:	4613      	movhi	r3, r2
{
   bb0aa:	4614      	mov	r4, r2
   bb0ac:	4606      	mov	r6, r0
	if (left > right) {
   bb0ae:	bf84      	itt	hi
   bb0b0:	462c      	movhi	r4, r5
   bb0b2:	461d      	movhi	r5, r3
	String out;
   bb0b4:	f7ff fef5 	bl	baea2 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   bb0b8:	68bb      	ldr	r3, [r7, #8]
   bb0ba:	42a3      	cmp	r3, r4
   bb0bc:	d30a      	bcc.n	bb0d4 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   bb0be:	6839      	ldr	r1, [r7, #0]
   bb0c0:	42ab      	cmp	r3, r5
   bb0c2:	bf94      	ite	ls
   bb0c4:	ebc4 0203 	rsbls	r2, r4, r3
   bb0c8:	ebc4 0205 	rsbhi	r2, r4, r5
   bb0cc:	4421      	add	r1, r4
   bb0ce:	4630      	mov	r0, r6
   bb0d0:	f7ff fece 	bl	bae70 <_ZN6String4copyEPKcj>
	return out;
}
   bb0d4:	4630      	mov	r0, r6
   bb0d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bb0d8:	000bf29a 	.word	0x000bf29a

000bb0dc <_ZNK6String9substringEj>:
{
   bb0dc:	b510      	push	{r4, lr}
   bb0de:	4604      	mov	r4, r0
	return substring(left, len);
   bb0e0:	688b      	ldr	r3, [r1, #8]
   bb0e2:	f7ff ffdb 	bl	bb09c <_ZNK6String9substringEjj>
}
   bb0e6:	4620      	mov	r0, r4
   bb0e8:	bd10      	pop	{r4, pc}
	...

000bb0ec <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bb0ec:	4b05      	ldr	r3, [pc, #20]	; (bb104 <_GLOBAL__sub_I_System+0x18>)
   bb0ee:	2202      	movs	r2, #2
   bb0f0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   bb0f2:	4b05      	ldr	r3, [pc, #20]	; (bb108 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bb0f4:	4a05      	ldr	r2, [pc, #20]	; (bb10c <_GLOBAL__sub_I_System+0x20>)
   bb0f6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bb0f8:	2000      	movs	r0, #0
   bb0fa:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bb0fe:	f7fe b947 	b.w	b9390 <set_system_mode>
   bb102:	bf00      	nop
   bb104:	2003e6f8 	.word	0x2003e6f8
   bb108:	2003e6ec 	.word	0x2003e6ec
   bb10c:	ffff0000 	.word	0xffff0000

000bb110 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   bb110:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   bb112:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   bb114:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   bb118:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   bb11a:	2201      	movs	r2, #1
   bb11c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bb120:	f10d 0107 	add.w	r1, sp, #7
   bb124:	47a0      	blx	r4
}
   bb126:	b002      	add	sp, #8
   bb128:	bd10      	pop	{r4, pc}

000bb12a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   bb12a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   bb12c:	6803      	ldr	r3, [r0, #0]
   bb12e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   bb130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bb134:	46a4      	mov	ip, r4
}
   bb136:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   bb13a:	4760      	bx	ip

000bb13c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   bb13c:	b513      	push	{r0, r1, r4, lr}
   bb13e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   bb140:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   bb142:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   bb146:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   bb148:	f10d 0107 	add.w	r1, sp, #7
   bb14c:	2201      	movs	r2, #1
   bb14e:	47a0      	blx	r4
}
   bb150:	b002      	add	sp, #8
   bb152:	bd10      	pop	{r4, pc}

000bb154 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   bb154:	b510      	push	{r4, lr}
      { return _M_ptr; }
   bb156:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   bb158:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bb15c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   bb160:	429a      	cmp	r2, r3
int TCPClient::read() {
   bb162:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   bb164:	d008      	beq.n	bb178 <_ZN9TCPClient4readEv+0x24>
   bb166:	6963      	ldr	r3, [r4, #20]
   bb168:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   bb16c:	1c51      	adds	r1, r2, #1
   bb16e:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   bb172:	4413      	add	r3, r2
   bb174:	7918      	ldrb	r0, [r3, #4]
}
   bb176:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   bb178:	6803      	ldr	r3, [r0, #0]
   bb17a:	691b      	ldr	r3, [r3, #16]
   bb17c:	4798      	blx	r3
   bb17e:	2800      	cmp	r0, #0
   bb180:	d1f1      	bne.n	bb166 <_ZN9TCPClient4readEv+0x12>
   bb182:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bb186:	e7f6      	b.n	bb176 <_ZN9TCPClient4readEv+0x22>

000bb188 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   bb188:	4770      	bx	lr

000bb18a <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   bb18a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   bb18c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   bb18e:	43c0      	mvns	r0, r0
   bb190:	0fc0      	lsrs	r0, r0, #31
   bb192:	4770      	bx	lr

000bb194 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bb194:	4770      	bx	lr
	...

000bb198 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   bb198:	4b06      	ldr	r3, [pc, #24]	; (bb1b4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   bb19a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   bb19c:	b510      	push	{r4, lr}
   bb19e:	f100 040c 	add.w	r4, r0, #12
	    ||
   bb1a2:	d005      	beq.n	bb1b0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   bb1a4:	4608      	mov	r0, r1
   bb1a6:	f000 fd1d 	bl	bbbe4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   bb1aa:	2800      	cmp	r0, #0
   bb1ac:	bf08      	it	eq
   bb1ae:	2400      	moveq	r4, #0
      }
   bb1b0:	4620      	mov	r0, r4
   bb1b2:	bd10      	pop	{r4, pc}
   bb1b4:	000bf480 	.word	0x000bf480

000bb1b8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bb1b8:	b510      	push	{r4, lr}
   bb1ba:	21ac      	movs	r1, #172	; 0xac
   bb1bc:	4604      	mov	r4, r0
   bb1be:	f7f8 ff72 	bl	b40a6 <_ZdlPvj>
   bb1c2:	4620      	mov	r0, r4
   bb1c4:	bd10      	pop	{r4, pc}

000bb1c6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   bb1c6:	21ac      	movs	r1, #172	; 0xac
   bb1c8:	f7f8 bf6d 	b.w	b40a6 <_ZdlPvj>

000bb1cc <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   bb1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   bb1d0:	f04f 0800 	mov.w	r8, #0
   bb1d4:	b086      	sub	sp, #24
   bb1d6:	461c      	mov	r4, r3
   bb1d8:	f8c0 8004 	str.w	r8, [r0, #4]
   bb1dc:	4605      	mov	r5, r0
   bb1de:	460e      	mov	r6, r1
   bb1e0:	4617      	mov	r7, r2
    struct timeval tv = {};
   bb1e2:	4641      	mov	r1, r8
   bb1e4:	2210      	movs	r2, #16
   bb1e6:	a802      	add	r0, sp, #8
   bb1e8:	f001 fd00 	bl	bcbec <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   bb1ec:	1c63      	adds	r3, r4, #1
   bb1ee:	d009      	beq.n	bb204 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   bb1f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb1f4:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   bb1f8:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   bb1fc:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   bb200:	435c      	muls	r4, r3
   bb202:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   bb204:	6968      	ldr	r0, [r5, #20]
   bb206:	2310      	movs	r3, #16
   bb208:	9300      	str	r3, [sp, #0]
   bb20a:	6800      	ldr	r0, [r0, #0]
   bb20c:	ab02      	add	r3, sp, #8
   bb20e:	f241 0205 	movw	r2, #4101	; 0x1005
   bb212:	f640 71ff 	movw	r1, #4095	; 0xfff
   bb216:	f7fe f80b 	bl	b9230 <sock_setsockopt>
    if (ret < 0) {
   bb21a:	2800      	cmp	r0, #0
   bb21c:	da07      	bge.n	bb22e <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   bb21e:	f7fe f98b 	bl	b9538 <__errno>
   bb222:	6803      	ldr	r3, [r0, #0]
   bb224:	606b      	str	r3, [r5, #4]
        return 0;
   bb226:	2000      	movs	r0, #0
}
   bb228:	b006      	add	sp, #24
   bb22a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   bb22e:	6968      	ldr	r0, [r5, #20]
   bb230:	2300      	movs	r3, #0
   bb232:	6800      	ldr	r0, [r0, #0]
   bb234:	463a      	mov	r2, r7
   bb236:	4631      	mov	r1, r6
   bb238:	f7fe f81a 	bl	b9270 <sock_send>
    if (ret < 0) {
   bb23c:	1e03      	subs	r3, r0, #0
   bb23e:	dbee      	blt.n	bb21e <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   bb240:	4618      	mov	r0, r3
   bb242:	e7f1      	b.n	bb228 <_ZN9TCPClient5writeEPKhjm+0x5c>

000bb244 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   bb244:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   bb246:	6984      	ldr	r4, [r0, #24]
   bb248:	4b0a      	ldr	r3, [pc, #40]	; (bb274 <_ZN9TCPClientD1Ev+0x30>)
   bb24a:	6003      	str	r3, [r0, #0]
   bb24c:	4605      	mov	r5, r0
   bb24e:	b17c      	cbz	r4, bb270 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   bb250:	6863      	ldr	r3, [r4, #4]
   bb252:	3b01      	subs	r3, #1
   bb254:	6063      	str	r3, [r4, #4]
   bb256:	b95b      	cbnz	r3, bb270 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   bb258:	6823      	ldr	r3, [r4, #0]
   bb25a:	4620      	mov	r0, r4
   bb25c:	689b      	ldr	r3, [r3, #8]
   bb25e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   bb260:	68a3      	ldr	r3, [r4, #8]
   bb262:	3b01      	subs	r3, #1
   bb264:	60a3      	str	r3, [r4, #8]
   bb266:	b91b      	cbnz	r3, bb270 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   bb268:	6823      	ldr	r3, [r4, #0]
   bb26a:	4620      	mov	r0, r4
   bb26c:	68db      	ldr	r3, [r3, #12]
   bb26e:	4798      	blx	r3
   bb270:	4628      	mov	r0, r5
   bb272:	bd38      	pop	{r3, r4, r5, pc}
   bb274:	000bf5b4 	.word	0x000bf5b4

000bb278 <_ZN9TCPClientD0Ev>:
   bb278:	b510      	push	{r4, lr}
   bb27a:	4604      	mov	r4, r0
   bb27c:	f7ff ffe2 	bl	bb244 <_ZN9TCPClientD1Ev>
   bb280:	4620      	mov	r0, r4
   bb282:	211c      	movs	r1, #28
   bb284:	f7f8 ff0f 	bl	b40a6 <_ZdlPvj>
   bb288:	4620      	mov	r0, r4
   bb28a:	bd10      	pop	{r4, pc}

000bb28c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   bb28c:	b530      	push	{r4, r5, lr}
   bb28e:	b087      	sub	sp, #28
   bb290:	4604      	mov	r4, r0
class IPAddress : public Printable {
   bb292:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   bb294:	4668      	mov	r0, sp
   bb296:	f7ff fc55 	bl	bab44 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bb29a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb29c:	3404      	adds	r4, #4
   bb29e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb2a0:	682b      	ldr	r3, [r5, #0]
   bb2a2:	7023      	strb	r3, [r4, #0]
    }
   bb2a4:	b007      	add	sp, #28
   bb2a6:	bd30      	pop	{r4, r5, pc}

000bb2a8 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   bb2a8:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   bb2aa:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   bb2ac:	4b05      	ldr	r3, [pc, #20]	; (bb2c4 <_ZN9TCPClient8remoteIPEv+0x1c>)
   bb2ae:	4604      	mov	r4, r0
   bb2b0:	358c      	adds	r5, #140	; 0x8c
   bb2b2:	f844 3b04 	str.w	r3, [r4], #4
   bb2b6:	4606      	mov	r6, r0
   bb2b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb2ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb2bc:	682b      	ldr	r3, [r5, #0]
   bb2be:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   bb2c0:	4630      	mov	r0, r6
   bb2c2:	bd70      	pop	{r4, r5, r6, pc}
   bb2c4:	000bf52c 	.word	0x000bf52c

000bb2c8 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   bb2c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb2cc:	4698      	mov	r8, r3
    stop();
   bb2ce:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   bb2d0:	b093      	sub	sp, #76	; 0x4c
   bb2d2:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   bb2d4:	2400      	movs	r4, #0
    stop();
   bb2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   bb2d8:	4606      	mov	r6, r0
   bb2da:	4617      	mov	r7, r2
    stop();
   bb2dc:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   bb2de:	4628      	mov	r0, r5
   bb2e0:	466b      	mov	r3, sp
   bb2e2:	4622      	mov	r2, r4
   bb2e4:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   bb2e6:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   bb2e8:	f7fd ff9a 	bl	b9220 <netdb_getaddrinfo>
   bb2ec:	4605      	mov	r5, r0
   bb2ee:	2800      	cmp	r0, #0
   bb2f0:	d163      	bne.n	bb3ba <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   bb2f2:	9b00      	ldr	r3, [sp, #0]
   bb2f4:	2b00      	cmp	r3, #0
   bb2f6:	d04b      	beq.n	bb390 <_ZN9TCPClient7connectEPKctm+0xc8>
   bb2f8:	695b      	ldr	r3, [r3, #20]
   bb2fa:	2b00      	cmp	r3, #0
   bb2fc:	d048      	beq.n	bb390 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   bb2fe:	a806      	add	r0, sp, #24
   bb300:	f7ff fbdc 	bl	baabc <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   bb304:	9b00      	ldr	r3, [sp, #0]
   bb306:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   bb308:	7863      	ldrb	r3, [r4, #1]
   bb30a:	2b02      	cmp	r3, #2
   bb30c:	d104      	bne.n	bb318 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   bb30e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   bb310:	a806      	add	r0, sp, #24
   bb312:	f7ff ffbb 	bl	bb28c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   bb316:	e026      	b.n	bb366 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   bb318:	2b0a      	cmp	r3, #10
   bb31a:	d124      	bne.n	bb366 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   bb31c:	2211      	movs	r2, #17
   bb31e:	4629      	mov	r1, r5
   bb320:	a801      	add	r0, sp, #4
   bb322:	f001 fc63 	bl	bcbec <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   bb326:	68a3      	ldr	r3, [r4, #8]
   bb328:	2b00      	cmp	r3, #0
   bb32a:	d038      	beq.n	bb39e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   bb32c:	f104 0308 	add.w	r3, r4, #8
   bb330:	f10d 0c04 	add.w	ip, sp, #4
   bb334:	3418      	adds	r4, #24
   bb336:	6818      	ldr	r0, [r3, #0]
   bb338:	6859      	ldr	r1, [r3, #4]
   bb33a:	4662      	mov	r2, ip
   bb33c:	c203      	stmia	r2!, {r0, r1}
   bb33e:	3308      	adds	r3, #8
   bb340:	42a3      	cmp	r3, r4
   bb342:	4694      	mov	ip, r2
   bb344:	d1f7      	bne.n	bb336 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   bb346:	2306      	movs	r3, #6
            addr = IPAddress(a);
   bb348:	a901      	add	r1, sp, #4
   bb34a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   bb34c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   bb350:	f7ff fbc2 	bl	baad8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bb354:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   bb358:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bb35c:	ac07      	add	r4, sp, #28
   bb35e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb360:	f8dc 3000 	ldr.w	r3, [ip]
   bb364:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   bb366:	a806      	add	r0, sp, #24
   bb368:	f7ff fbc8 	bl	baafc <_ZNK9IPAddresscvbEv>
        if (addr) {
   bb36c:	b180      	cbz	r0, bb390 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   bb36e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   bb370:	ad07      	add	r5, sp, #28
   bb372:	f8d3 9020 	ldr.w	r9, [r3, #32]
   bb376:	4b12      	ldr	r3, [pc, #72]	; (bb3c0 <_ZN9TCPClient7connectEPKctm+0xf8>)
   bb378:	930c      	str	r3, [sp, #48]	; 0x30
   bb37a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb37c:	ac0d      	add	r4, sp, #52	; 0x34
   bb37e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb380:	682b      	ldr	r3, [r5, #0]
   bb382:	7023      	strb	r3, [r4, #0]
   bb384:	463a      	mov	r2, r7
   bb386:	4643      	mov	r3, r8
   bb388:	a90c      	add	r1, sp, #48	; 0x30
   bb38a:	4630      	mov	r0, r6
   bb38c:	47c8      	blx	r9
   bb38e:	4605      	mov	r5, r0
    SCOPE_GUARD({
   bb390:	9800      	ldr	r0, [sp, #0]
   bb392:	f7fd ff3d 	bl	b9210 <netdb_freeaddrinfo>
}
   bb396:	4628      	mov	r0, r5
   bb398:	b013      	add	sp, #76	; 0x4c
   bb39a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   bb39e:	68e3      	ldr	r3, [r4, #12]
   bb3a0:	2b00      	cmp	r3, #0
   bb3a2:	d1c3      	bne.n	bb32c <_ZN9TCPClient7connectEPKctm+0x64>
   bb3a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   bb3a8:	f8d4 9010 	ldr.w	r9, [r4, #16]
   bb3ac:	f7fd ff20 	bl	b91f0 <inet_htonl>
   bb3b0:	4581      	cmp	r9, r0
   bb3b2:	d1bb      	bne.n	bb32c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   bb3b4:	f104 0114 	add.w	r1, r4, #20
   bb3b8:	e7aa      	b.n	bb310 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   bb3ba:	4625      	mov	r5, r4
   bb3bc:	e7e8      	b.n	bb390 <_ZN9TCPClient7connectEPKctm+0xc8>
   bb3be:	bf00      	nop
   bb3c0:	000bf52c 	.word	0x000bf52c

000bb3c4 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   bb3c4:	b538      	push	{r3, r4, r5, lr}
   bb3c6:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   bb3c8:	681a      	ldr	r2, [r3, #0]
   bb3ca:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   bb3cc:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   bb3ce:	da10      	bge.n	bb3f2 <_ZN9TCPClient9connectedEv+0x2e>
   bb3d0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bb3d4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   bb3d8:	429a      	cmp	r2, r3
   bb3da:	d10a      	bne.n	bb3f2 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   bb3dc:	6803      	ldr	r3, [r0, #0]
   bb3de:	691b      	ldr	r3, [r3, #16]
   bb3e0:	4798      	blx	r3
        if (!rv) {
   bb3e2:	4604      	mov	r4, r0
   bb3e4:	b928      	cbnz	r0, bb3f2 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   bb3e6:	682b      	ldr	r3, [r5, #0]
   bb3e8:	4628      	mov	r0, r5
   bb3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bb3ec:	4798      	blx	r3
        rv = available();
   bb3ee:	4620      	mov	r0, r4
}
   bb3f0:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   bb3f2:	2001      	movs	r0, #1
   bb3f4:	e7fc      	b.n	bb3f0 <_ZN9TCPClient9connectedEv+0x2c>

000bb3f6 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   bb3f6:	b510      	push	{r4, lr}
   bb3f8:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   bb3fa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bb3fe:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   bb402:	429a      	cmp	r2, r3
int TCPClient::peek() {
   bb404:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   bb406:	d005      	beq.n	bb414 <_ZN9TCPClient4peekEv+0x1e>
   bb408:	6963      	ldr	r3, [r4, #20]
   bb40a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   bb40e:	4413      	add	r3, r2
   bb410:	7918      	ldrb	r0, [r3, #4]
}
   bb412:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   bb414:	6803      	ldr	r3, [r0, #0]
   bb416:	691b      	ldr	r3, [r3, #16]
   bb418:	4798      	blx	r3
   bb41a:	2800      	cmp	r0, #0
   bb41c:	d1f4      	bne.n	bb408 <_ZN9TCPClient4peekEv+0x12>
   bb41e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bb422:	e7f6      	b.n	bb412 <_ZN9TCPClient4peekEv+0x1c>

000bb424 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   bb424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb426:	6943      	ldr	r3, [r0, #20]
   bb428:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   bb42a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bb42e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   bb432:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   bb434:	4605      	mov	r5, r0
   bb436:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   bb438:	d016      	beq.n	bb468 <_ZN9TCPClient4readEPhj+0x44>
   bb43a:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   bb43c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   bb440:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   bb444:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   bb446:	42bc      	cmp	r4, r7
   bb448:	bf28      	it	cs
   bb44a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   bb44c:	3304      	adds	r3, #4
   bb44e:	4622      	mov	r2, r4
   bb450:	4419      	add	r1, r3
   bb452:	4630      	mov	r0, r6
   bb454:	f001 fba2 	bl	bcb9c <memcpy>
   bb458:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   bb45a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   bb45e:	4423      	add	r3, r4
   bb460:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   bb464:	4620      	mov	r0, r4
   bb466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   bb468:	6803      	ldr	r3, [r0, #0]
   bb46a:	691b      	ldr	r3, [r3, #16]
   bb46c:	4798      	blx	r3
   bb46e:	2800      	cmp	r0, #0
   bb470:	d1e3      	bne.n	bb43a <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   bb472:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   bb476:	e7f5      	b.n	bb464 <_ZN9TCPClient4readEPhj+0x40>

000bb478 <_ZN9TCPClient12flush_bufferEv>:
   bb478:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   bb47a:	2300      	movs	r3, #0
   bb47c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   bb480:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   bb482:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   bb486:	4770      	bx	lr

000bb488 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   bb488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb48c:	461f      	mov	r7, r3
    stop();
   bb48e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   bb490:	460c      	mov	r4, r1
    stop();
   bb492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   bb494:	b08a      	sub	sp, #40	; 0x28
   bb496:	4605      	mov	r5, r0
   bb498:	4616      	mov	r6, r2
    stop();
   bb49a:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   bb49c:	7d23      	ldrb	r3, [r4, #20]
   bb49e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   bb4a2:	2b04      	cmp	r3, #4
   bb4a4:	bf0c      	ite	eq
   bb4a6:	2002      	moveq	r0, #2
   bb4a8:	200a      	movne	r0, #10
   bb4aa:	2206      	movs	r2, #6
   bb4ac:	2101      	movs	r1, #1
   bb4ae:	f7fd fee7 	bl	b9280 <sock_socket>
   bb4b2:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   bb4b6:	696b      	ldr	r3, [r5, #20]
   bb4b8:	681b      	ldr	r3, [r3, #0]
   bb4ba:	2b00      	cmp	r3, #0
   bb4bc:	da08      	bge.n	bb4d0 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   bb4be:	682b      	ldr	r3, [r5, #0]
   bb4c0:	4628      	mov	r0, r5
   bb4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   bb4c4:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   bb4c6:	4798      	blx	r3
}
   bb4c8:	4620      	mov	r0, r4
   bb4ca:	b00a      	add	sp, #40	; 0x28
   bb4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   bb4d0:	4628      	mov	r0, r5
   bb4d2:	f7ff ffd1 	bl	bb478 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   bb4d6:	b1b7      	cbz	r7, bb506 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   bb4d8:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   bb4da:	a903      	add	r1, sp, #12
   bb4dc:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   bb4de:	9303      	str	r3, [sp, #12]
   bb4e0:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   bb4e4:	f7fd fe74 	bl	b91d0 <if_index_to_name>
   bb4e8:	2800      	cmp	r0, #0
   bb4ea:	d1e8      	bne.n	bb4be <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   bb4ec:	6968      	ldr	r0, [r5, #20]
   bb4ee:	2306      	movs	r3, #6
   bb4f0:	9300      	str	r3, [sp, #0]
   bb4f2:	6800      	ldr	r0, [r0, #0]
   bb4f4:	ab03      	add	r3, sp, #12
   bb4f6:	f241 020b 	movw	r2, #4107	; 0x100b
   bb4fa:	f640 71ff 	movw	r1, #4095	; 0xfff
   bb4fe:	f7fd fe97 	bl	b9230 <sock_setsockopt>
   bb502:	2800      	cmp	r0, #0
   bb504:	d1db      	bne.n	bb4be <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   bb506:	221c      	movs	r2, #28
   bb508:	2100      	movs	r1, #0
   bb50a:	a803      	add	r0, sp, #12
   bb50c:	f001 fb6e 	bl	bcbec <memset>
    if (ip.version() == 4) {
   bb510:	7d23      	ldrb	r3, [r4, #20]
   bb512:	2b04      	cmp	r3, #4
   bb514:	d11d      	bne.n	bb552 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   bb516:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   bb51a:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   bb51c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   bb520:	f7fd fe6e 	bl	b9200 <inet_htons>
   bb524:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   bb528:	6860      	ldr	r0, [r4, #4]
   bb52a:	f7fd fe61 	bl	b91f0 <inet_htonl>
   bb52e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   bb530:	696b      	ldr	r3, [r5, #20]
   bb532:	221c      	movs	r2, #28
   bb534:	6818      	ldr	r0, [r3, #0]
   bb536:	a903      	add	r1, sp, #12
   bb538:	f7fd fe8a 	bl	b9250 <sock_connect>
   bb53c:	2800      	cmp	r0, #0
   bb53e:	d1be      	bne.n	bb4be <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   bb540:	3404      	adds	r4, #4
   bb542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bb544:	696d      	ldr	r5, [r5, #20]
   bb546:	358c      	adds	r5, #140	; 0x8c
   bb548:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bb54a:	6823      	ldr	r3, [r4, #0]
   bb54c:	702b      	strb	r3, [r5, #0]
    return 1; // success
   bb54e:	2401      	movs	r4, #1
   bb550:	e7ba      	b.n	bb4c8 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   bb552:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   bb556:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   bb558:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   bb55c:	f7fd fe50 	bl	b9200 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   bb560:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   bb562:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   bb566:	1d23      	adds	r3, r4, #4
   bb568:	f104 0714 	add.w	r7, r4, #20
   bb56c:	6818      	ldr	r0, [r3, #0]
   bb56e:	6859      	ldr	r1, [r3, #4]
   bb570:	4632      	mov	r2, r6
   bb572:	c203      	stmia	r2!, {r0, r1}
   bb574:	3308      	adds	r3, #8
   bb576:	42bb      	cmp	r3, r7
   bb578:	4616      	mov	r6, r2
   bb57a:	d1f7      	bne.n	bb56c <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   bb57c:	e7d8      	b.n	bb530 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000bb580 <_ZN9TCPClient9availableEv>:
{
   bb580:	b530      	push	{r4, r5, lr}
   bb582:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   bb584:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   bb588:	b08b      	sub	sp, #44	; 0x2c
   bb58a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   bb58c:	b12b      	cbz	r3, bb59a <_ZN9TCPClient9availableEv+0x1a>
   bb58e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   bb592:	429a      	cmp	r2, r3
   bb594:	d101      	bne.n	bb59a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   bb596:	f7ff ff6f 	bl	bb478 <_ZN9TCPClient12flush_bufferEv>
   bb59a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   bb59c:	6808      	ldr	r0, [r1, #0]
   bb59e:	2800      	cmp	r0, #0
   bb5a0:	db18      	blt.n	bb5d4 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   bb5a2:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   bb5a6:	2d7f      	cmp	r5, #127	; 0x7f
   bb5a8:	d814      	bhi.n	bb5d4 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   bb5aa:	3104      	adds	r1, #4
   bb5ac:	2308      	movs	r3, #8
   bb5ae:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   bb5b2:	4429      	add	r1, r5
   bb5b4:	f7fd fe54 	bl	b9260 <sock_recv>
            if (ret > 0) {
   bb5b8:	2800      	cmp	r0, #0
   bb5ba:	dd13      	ble.n	bb5e4 <_ZN9TCPClient9availableEv+0x64>
   bb5bc:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   bb5be:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bb5c2:	b90a      	cbnz	r2, bb5c8 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   bb5c4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   bb5c8:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   bb5ca:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bb5ce:	4410      	add	r0, r2
   bb5d0:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   bb5d4:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   bb5d6:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   bb5da:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   bb5de:	1ac0      	subs	r0, r0, r3
   bb5e0:	b00b      	add	sp, #44	; 0x2c
   bb5e2:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   bb5e4:	f7fd ffa8 	bl	b9538 <__errno>
   bb5e8:	6803      	ldr	r3, [r0, #0]
   bb5ea:	2b0b      	cmp	r3, #11
   bb5ec:	d0f2      	beq.n	bb5d4 <_ZN9TCPClient9availableEv+0x54>
   bb5ee:	f7fd ffa3 	bl	b9538 <__errno>
   bb5f2:	6803      	ldr	r3, [r0, #0]
   bb5f4:	2b0b      	cmp	r3, #11
   bb5f6:	d0ed      	beq.n	bb5d4 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   bb5f8:	2320      	movs	r3, #32
   bb5fa:	2500      	movs	r5, #0
   bb5fc:	e9cd 3502 	strd	r3, r5, [sp, #8]
   bb600:	f7fd ff9a 	bl	b9538 <__errno>
   bb604:	6803      	ldr	r3, [r0, #0]
   bb606:	9301      	str	r3, [sp, #4]
   bb608:	4b08      	ldr	r3, [pc, #32]	; (bb62c <_ZN9TCPClient9availableEv+0xac>)
   bb60a:	4909      	ldr	r1, [pc, #36]	; (bb630 <_ZN9TCPClient9availableEv+0xb0>)
   bb60c:	9300      	str	r3, [sp, #0]
   bb60e:	aa02      	add	r2, sp, #8
   bb610:	462b      	mov	r3, r5
   bb612:	2032      	movs	r0, #50	; 0x32
   bb614:	f7fd feb4 	bl	b9380 <log_message>
                    sock_close(d_->sock);
   bb618:	6963      	ldr	r3, [r4, #20]
   bb61a:	6818      	ldr	r0, [r3, #0]
   bb61c:	f7fd fe10 	bl	b9240 <sock_close>
   bb620:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   bb622:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb626:	601a      	str	r2, [r3, #0]
   bb628:	e7d4      	b.n	bb5d4 <_ZN9TCPClient9availableEv+0x54>
   bb62a:	bf00      	nop
   bb62c:	000bf57f 	.word	0x000bf57f
   bb630:	000bf578 	.word	0x000bf578

000bb634 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   bb634:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   bb636:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   bb638:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   bb63a:	6818      	ldr	r0, [r3, #0]
   bb63c:	2800      	cmp	r0, #0
   bb63e:	db01      	blt.n	bb644 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   bb640:	f7fd fdfe 	bl	b9240 <sock_close>
   bb644:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   bb646:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb64a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   bb64c:	6960      	ldr	r0, [r4, #20]
   bb64e:	2211      	movs	r2, #17
   bb650:	2100      	movs	r1, #0
   bb652:	308c      	adds	r0, #140	; 0x8c
   bb654:	f001 faca 	bl	bcbec <memset>
    flush_buffer();
   bb658:	4620      	mov	r0, r4
}
   bb65a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   bb65e:	f7ff bf0b 	b.w	bb478 <_ZN9TCPClient12flush_bufferEv>

000bb662 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   bb662:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   bb664:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   bb666:	4604      	mov	r4, r0
          total(0) {
   bb668:	6001      	str	r1, [r0, #0]
   bb66a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   bb66e:	3088      	adds	r0, #136	; 0x88
   bb670:	f7ff fa24 	bl	baabc <_ZN9IPAddressC1Ev>
}
   bb674:	4620      	mov	r0, r4
   bb676:	bd10      	pop	{r4, pc}

000bb678 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   bb678:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb67a:	2300      	movs	r3, #0
   bb67c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   bb680:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   bb684:	4a0e      	ldr	r2, [pc, #56]	; (bb6c0 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   bb686:	6103      	str	r3, [r0, #16]
   bb688:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bb68a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   bb68c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bb68e:	20ac      	movs	r0, #172	; 0xac
   bb690:	9101      	str	r1, [sp, #4]
   bb692:	f7f8 fd00 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bb696:	1e05      	subs	r5, r0, #0
   bb698:	f105 060c 	add.w	r6, r5, #12
   bb69c:	d008      	beq.n	bb6b0 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   bb69e:	2301      	movs	r3, #1
   bb6a0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   bb6a4:	4b07      	ldr	r3, [pc, #28]	; (bb6c4 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bb6a6:	9901      	ldr	r1, [sp, #4]
   bb6a8:	602b      	str	r3, [r5, #0]
   bb6aa:	4630      	mov	r0, r6
   bb6ac:	f7ff ffd9 	bl	bb662 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   bb6b0:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   bb6b2:	e9c4 6505 	strd	r6, r5, [r4, #20]
   bb6b6:	f7ff fedf 	bl	bb478 <_ZN9TCPClient12flush_bufferEv>
}
   bb6ba:	b002      	add	sp, #8
   bb6bc:	bd70      	pop	{r4, r5, r6, pc}
   bb6be:	bf00      	nop
   bb6c0:	000bf5b4 	.word	0x000bf5b4
   bb6c4:	000bf598 	.word	0x000bf598

000bb6c8 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   bb6c8:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   bb6ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   bb6ce:	4604      	mov	r4, r0
        : TCPClient(-1) {
   bb6d0:	f7ff ffd2 	bl	bb678 <_ZN9TCPClientC1Ei>
}
   bb6d4:	4620      	mov	r0, r4
   bb6d6:	bd10      	pop	{r4, pc}

000bb6d8 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   bb6d8:	b510      	push	{r4, lr}
   bb6da:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   bb6dc:	6800      	ldr	r0, [r0, #0]
   bb6de:	2800      	cmp	r0, #0
   bb6e0:	db01      	blt.n	bb6e6 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   bb6e2:	f7fd fdad 	bl	b9240 <sock_close>
    }
}
   bb6e6:	4620      	mov	r0, r4
   bb6e8:	bd10      	pop	{r4, pc}

000bb6ea <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   bb6ea:	300c      	adds	r0, #12
   bb6ec:	f7ff bff4 	b.w	bb6d8 <_ZN9TCPClient4DataD1Ev>

000bb6f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bb6f0:	4b02      	ldr	r3, [pc, #8]	; (bb6fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bb6f2:	681a      	ldr	r2, [r3, #0]
   bb6f4:	4b02      	ldr	r3, [pc, #8]	; (bb700 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bb6f6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bb6f8:	4770      	bx	lr
   bb6fa:	bf00      	nop
   bb6fc:	20035058 	.word	0x20035058
   bb700:	2003e6fc 	.word	0x2003e6fc

000bb704 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bb704:	4770      	bx	lr

000bb706 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bb706:	7441      	strb	r1, [r0, #17]
}
   bb708:	4770      	bx	lr

000bb70a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bb70a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bb70c:	7c00      	ldrb	r0, [r0, #16]
   bb70e:	f7fd fde7 	bl	b92e0 <hal_usart_available_data_for_write>
}
   bb712:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb716:	bd08      	pop	{r3, pc}

000bb718 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bb718:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bb71a:	7c00      	ldrb	r0, [r0, #16]
   bb71c:	f7fd fdc0 	bl	b92a0 <hal_usart_available>
}
   bb720:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb724:	bd08      	pop	{r3, pc}

000bb726 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bb726:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bb728:	7c00      	ldrb	r0, [r0, #16]
   bb72a:	f7fd fdc9 	bl	b92c0 <hal_usart_peek>
}
   bb72e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb732:	bd08      	pop	{r3, pc}

000bb734 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bb734:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bb736:	7c00      	ldrb	r0, [r0, #16]
   bb738:	f7fd fdba 	bl	b92b0 <hal_usart_read>
}
   bb73c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb740:	bd08      	pop	{r3, pc}

000bb742 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bb742:	7c00      	ldrb	r0, [r0, #16]
   bb744:	f7fd bdc4 	b.w	b92d0 <hal_usart_flush>

000bb748 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bb748:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb74a:	7c45      	ldrb	r5, [r0, #17]
{
   bb74c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb74e:	b12d      	cbz	r5, bb75c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bb750:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bb752:	b003      	add	sp, #12
   bb754:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bb758:	f7fd bd9a 	b.w	b9290 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb75c:	7c00      	ldrb	r0, [r0, #16]
   bb75e:	9101      	str	r1, [sp, #4]
   bb760:	f7fd fdbe 	bl	b92e0 <hal_usart_available_data_for_write>
   bb764:	2800      	cmp	r0, #0
   bb766:	9901      	ldr	r1, [sp, #4]
   bb768:	dcf2      	bgt.n	bb750 <_ZN11USARTSerial5writeEh+0x8>
}
   bb76a:	4628      	mov	r0, r5
   bb76c:	b003      	add	sp, #12
   bb76e:	bd30      	pop	{r4, r5, pc}

000bb770 <_ZN11USARTSerialD0Ev>:
   bb770:	b510      	push	{r4, lr}
   bb772:	2114      	movs	r1, #20
   bb774:	4604      	mov	r4, r0
   bb776:	f7f8 fc96 	bl	b40a6 <_ZdlPvj>
   bb77a:	4620      	mov	r0, r4
   bb77c:	bd10      	pop	{r4, pc}
	...

000bb780 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bb780:	b510      	push	{r4, lr}
   bb782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb786:	4604      	mov	r4, r0
   bb788:	4608      	mov	r0, r1
   bb78a:	4611      	mov	r1, r2
   bb78c:	2200      	movs	r2, #0
   bb78e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bb792:	4b04      	ldr	r3, [pc, #16]	; (bb7a4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bb794:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bb796:	2301      	movs	r3, #1
  _serial = serial;
   bb798:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bb79a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bb79c:	f7fd fda8 	bl	b92f0 <hal_usart_init_ex>
}
   bb7a0:	4620      	mov	r0, r4
   bb7a2:	bd10      	pop	{r4, pc}
   bb7a4:	000bf61c 	.word	0x000bf61c

000bb7a8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bb7a8:	7441      	strb	r1, [r0, #17]
}
   bb7aa:	4770      	bx	lr

000bb7ac <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb7ac:	4770      	bx	lr

000bb7ae <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bb7ae:	4770      	bx	lr

000bb7b0 <_ZN9USBSerial4readEv>:
{
   bb7b0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bb7b2:	2100      	movs	r1, #0
   bb7b4:	7c00      	ldrb	r0, [r0, #16]
   bb7b6:	f7fd fdc3 	bl	b9340 <HAL_USB_USART_Receive_Data>
}
   bb7ba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb7be:	bd08      	pop	{r3, pc}

000bb7c0 <_ZN9USBSerial4peekEv>:
{
   bb7c0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bb7c2:	2101      	movs	r1, #1
   bb7c4:	7c00      	ldrb	r0, [r0, #16]
   bb7c6:	f7fd fdbb 	bl	b9340 <HAL_USB_USART_Receive_Data>
}
   bb7ca:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb7ce:	bd08      	pop	{r3, pc}

000bb7d0 <_ZN9USBSerial17availableForWriteEv>:
{
   bb7d0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bb7d2:	7c00      	ldrb	r0, [r0, #16]
   bb7d4:	f7fd fdac 	bl	b9330 <HAL_USB_USART_Available_Data_For_Write>
}
   bb7d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb7dc:	bd08      	pop	{r3, pc}

000bb7de <_ZN9USBSerial9availableEv>:
{
   bb7de:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bb7e0:	7c00      	ldrb	r0, [r0, #16]
   bb7e2:	f7fd fd9d 	bl	b9320 <HAL_USB_USART_Available_Data>
}
   bb7e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb7ea:	bd08      	pop	{r3, pc}

000bb7ec <_ZN9USBSerial5writeEh>:
{
   bb7ec:	b513      	push	{r0, r1, r4, lr}
   bb7ee:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bb7f0:	7c00      	ldrb	r0, [r0, #16]
{
   bb7f2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bb7f4:	f7fd fd9c 	bl	b9330 <HAL_USB_USART_Available_Data_For_Write>
   bb7f8:	2800      	cmp	r0, #0
   bb7fa:	9901      	ldr	r1, [sp, #4]
   bb7fc:	dc01      	bgt.n	bb802 <_ZN9USBSerial5writeEh+0x16>
   bb7fe:	7c60      	ldrb	r0, [r4, #17]
   bb800:	b120      	cbz	r0, bb80c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bb802:	7c20      	ldrb	r0, [r4, #16]
   bb804:	f7fd fda4 	bl	b9350 <HAL_USB_USART_Send_Data>
   bb808:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bb80c:	b002      	add	sp, #8
   bb80e:	bd10      	pop	{r4, pc}

000bb810 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bb810:	7c00      	ldrb	r0, [r0, #16]
   bb812:	f7fd bda5 	b.w	b9360 <HAL_USB_USART_Flush_Data>

000bb816 <_ZN9USBSerialD0Ev>:
   bb816:	b510      	push	{r4, lr}
   bb818:	2114      	movs	r1, #20
   bb81a:	4604      	mov	r4, r0
   bb81c:	f7f8 fc43 	bl	b40a6 <_ZdlPvj>
   bb820:	4620      	mov	r0, r4
   bb822:	bd10      	pop	{r4, pc}

000bb824 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bb824:	b510      	push	{r4, lr}
   bb826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb82a:	4604      	mov	r4, r0
   bb82c:	4608      	mov	r0, r1
   bb82e:	2100      	movs	r1, #0
   bb830:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bb834:	4b04      	ldr	r3, [pc, #16]	; (bb848 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bb836:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bb838:	2301      	movs	r3, #1
  _serial = serial;
   bb83a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bb83c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bb83e:	4611      	mov	r1, r2
   bb840:	f7fd fd5e 	bl	b9300 <HAL_USB_USART_Init>
}
   bb844:	4620      	mov	r0, r4
   bb846:	bd10      	pop	{r4, pc}
   bb848:	000bf64c 	.word	0x000bf64c

000bb84c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bb84c:	7c00      	ldrb	r0, [r0, #16]
   bb84e:	2200      	movs	r2, #0
   bb850:	f7fd bd5e 	b.w	b9310 <HAL_USB_USART_Begin>

000bb854 <_Z19acquireSerialBufferv>:
{
   bb854:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bb856:	2214      	movs	r2, #20
{
   bb858:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bb85a:	2100      	movs	r1, #0
   bb85c:	f001 f9c6 	bl	bcbec <memset>
}
   bb860:	4620      	mov	r0, r4
   bb862:	bd10      	pop	{r4, pc}

000bb864 <_Z16_fetch_usbserialv>:
{
   bb864:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb866:	4c0f      	ldr	r4, [pc, #60]	; (bb8a4 <_Z16_fetch_usbserialv+0x40>)
{
   bb868:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bb86a:	a803      	add	r0, sp, #12
   bb86c:	f7ff fff2 	bl	bb854 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb870:	7821      	ldrb	r1, [r4, #0]
   bb872:	f3bf 8f5b 	dmb	ish
   bb876:	f011 0101 	ands.w	r1, r1, #1
   bb87a:	d10f      	bne.n	bb89c <_Z16_fetch_usbserialv+0x38>
   bb87c:	4620      	mov	r0, r4
   bb87e:	9101      	str	r1, [sp, #4]
   bb880:	f7f8 fc13 	bl	b40aa <__cxa_guard_acquire>
   bb884:	9901      	ldr	r1, [sp, #4]
   bb886:	b148      	cbz	r0, bb89c <_Z16_fetch_usbserialv+0x38>
   bb888:	aa03      	add	r2, sp, #12
   bb88a:	4807      	ldr	r0, [pc, #28]	; (bb8a8 <_Z16_fetch_usbserialv+0x44>)
   bb88c:	f7ff ffca 	bl	bb824 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bb890:	4620      	mov	r0, r4
   bb892:	f7f8 fc0f 	bl	b40b4 <__cxa_guard_release>
   bb896:	4805      	ldr	r0, [pc, #20]	; (bb8ac <_Z16_fetch_usbserialv+0x48>)
   bb898:	f001 f966 	bl	bcb68 <atexit>
	return _usbserial;
}
   bb89c:	4802      	ldr	r0, [pc, #8]	; (bb8a8 <_Z16_fetch_usbserialv+0x44>)
   bb89e:	b008      	add	sp, #32
   bb8a0:	bd10      	pop	{r4, pc}
   bb8a2:	bf00      	nop
   bb8a4:	2003e700 	.word	0x2003e700
   bb8a8:	2003e704 	.word	0x2003e704
   bb8ac:	000bb7ad 	.word	0x000bb7ad

000bb8b0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   bb8b0:	2200      	movs	r2, #0
   bb8b2:	6840      	ldr	r0, [r0, #4]
   bb8b4:	4611      	mov	r1, r2
   bb8b6:	f7fd bdaf 	b.w	b9418 <network_ready>

000bb8ba <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bb8ba:	2200      	movs	r2, #0
   bb8bc:	6840      	ldr	r0, [r0, #4]
   bb8be:	4611      	mov	r1, r2
   bb8c0:	f7fd bdca 	b.w	b9458 <network_listening>

000bb8c4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bb8c4:	2200      	movs	r2, #0
   bb8c6:	6840      	ldr	r0, [r0, #4]
   bb8c8:	4611      	mov	r1, r2
   bb8ca:	f7fd bde5 	b.w	b9498 <network_get_listen_timeout>

000bb8ce <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bb8ce:	6840      	ldr	r0, [r0, #4]
   bb8d0:	2200      	movs	r2, #0
   bb8d2:	f7fd bdd9 	b.w	b9488 <network_set_listen_timeout>

000bb8d6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bb8d6:	6840      	ldr	r0, [r0, #4]
   bb8d8:	2200      	movs	r2, #0
   bb8da:	f081 0101 	eor.w	r1, r1, #1
   bb8de:	f7fd bdb3 	b.w	b9448 <network_listen>

000bb8e2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bb8e2:	2300      	movs	r3, #0
   bb8e4:	6840      	ldr	r0, [r0, #4]
   bb8e6:	461a      	mov	r2, r3
   bb8e8:	4619      	mov	r1, r3
   bb8ea:	f7fd bda5 	b.w	b9438 <network_off>

000bb8ee <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bb8ee:	2300      	movs	r3, #0
   bb8f0:	6840      	ldr	r0, [r0, #4]
   bb8f2:	461a      	mov	r2, r3
   bb8f4:	4619      	mov	r1, r3
   bb8f6:	f7fd bd97 	b.w	b9428 <network_on>

000bb8fa <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bb8fa:	2200      	movs	r2, #0
   bb8fc:	6840      	ldr	r0, [r0, #4]
   bb8fe:	4611      	mov	r1, r2
   bb900:	f7fd bd7a 	b.w	b93f8 <network_connecting>

000bb904 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bb904:	6840      	ldr	r0, [r0, #4]
   bb906:	2200      	movs	r2, #0
   bb908:	2102      	movs	r1, #2
   bb90a:	f7fd bd7d 	b.w	b9408 <network_disconnect>

000bb90e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bb90e:	2300      	movs	r3, #0
   bb910:	6840      	ldr	r0, [r0, #4]
   bb912:	461a      	mov	r2, r3
   bb914:	f7fd bd68 	b.w	b93e8 <network_connect>

000bb918 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   bb918:	4b02      	ldr	r3, [pc, #8]	; (bb924 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   bb91a:	2204      	movs	r2, #4
   bb91c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   bb91e:	4a02      	ldr	r2, [pc, #8]	; (bb928 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   bb920:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   bb922:	4770      	bx	lr
   bb924:	2003e718 	.word	0x2003e718
   bb928:	000bf67c 	.word	0x000bf67c

000bb92c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   bb92c:	b510      	push	{r4, lr}
   bb92e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   bb930:	f001 f9a4 	bl	bcc7c <strlen>
   bb934:	3801      	subs	r0, #1
   bb936:	1823      	adds	r3, r4, r0
   bb938:	4620      	mov	r0, r4
	while(i<j){
   bb93a:	4283      	cmp	r3, r0
   bb93c:	d906      	bls.n	bb94c <_Z11str_reversePc+0x20>
		c = *i;
   bb93e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   bb940:	7819      	ldrb	r1, [r3, #0]
   bb942:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   bb946:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   bb94a:	e7f6      	b.n	bb93a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   bb94c:	bd10      	pop	{r4, pc}

000bb94e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   bb94e:	b570      	push	{r4, r5, r6, lr}
   bb950:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   bb952:	1e91      	subs	r1, r2, #2
   bb954:	2922      	cmp	r1, #34	; 0x22
   bb956:	d81d      	bhi.n	bb994 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   bb958:	4625      	mov	r5, r4

	div_t result;
	while(a){
   bb95a:	b930      	cbnz	r0, bb96a <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   bb95c:	4423      	add	r3, r4
            *ptr++ = '0';
   bb95e:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   bb960:	429d      	cmp	r5, r3
   bb962:	d210      	bcs.n	bb986 <ultoa+0x38>
            *ptr++ = '0';
   bb964:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   bb968:	e7fa      	b.n	bb960 <ultoa+0x12>
            result.quot = a/radix;
   bb96a:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   bb96e:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   bb972:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   bb974:	2809      	cmp	r0, #9
                *ptr += '0';
   bb976:	bf94      	ite	ls
   bb978:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   bb97a:	3157      	addhi	r1, #87	; 0x57
   bb97c:	b2c9      	uxtb	r1, r1
   bb97e:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   bb982:	4630      	mov	r0, r6
	while(a){
   bb984:	e7e9      	b.n	bb95a <ultoa+0xc>

	*ptr = '\0';
   bb986:	2300      	movs	r3, #0
	str_reverse(buffer);
   bb988:	4620      	mov	r0, r4
	*ptr = '\0';
   bb98a:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   bb98c:	f7ff ffce 	bl	bb92c <_Z11str_reversePc>
	return buffer;
   bb990:	4620      	mov	r0, r4
}
   bb992:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   bb994:	2000      	movs	r0, #0
   bb996:	e7fc      	b.n	bb992 <ultoa+0x44>

000bb998 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   bb998:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   bb99a:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   bb99c:	460c      	mov	r4, r1
   bb99e:	4615      	mov	r5, r2
	if(a<0){
   bb9a0:	da0e      	bge.n	bb9c0 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   bb9a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   bb9a6:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   bb9aa:	bf14      	ite	ne
   bb9ac:	4258      	negne	r0, r3
   bb9ae:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   bb9b0:	2301      	movs	r3, #1
		*buffer = '-';
   bb9b2:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   bb9b4:	462a      	mov	r2, r5
   bb9b6:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   bb9b8:	f7ff ffc9 	bl	bb94e <ultoa>
	}
	return buffer;
}
   bb9bc:	4620      	mov	r0, r4
   bb9be:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   bb9c0:	2301      	movs	r3, #1
   bb9c2:	e7f9      	b.n	bb9b8 <itoa+0x20>

000bb9c4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bb9c4:	4b01      	ldr	r3, [pc, #4]	; (bb9cc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bb9c6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bb9c8:	4770      	bx	lr
   bb9ca:	bf00      	nop
   bb9cc:	20035060 	.word	0x20035060

000bb9d0 <serialEventRun>:
{
   bb9d0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bb9d2:	4b0b      	ldr	r3, [pc, #44]	; (bba00 <serialEventRun+0x30>)
   bb9d4:	b143      	cbz	r3, bb9e8 <serialEventRun+0x18>
   bb9d6:	f7ff ff45 	bl	bb864 <_Z16_fetch_usbserialv>
   bb9da:	6803      	ldr	r3, [r0, #0]
   bb9dc:	691b      	ldr	r3, [r3, #16]
   bb9de:	4798      	blx	r3
   bb9e0:	2800      	cmp	r0, #0
   bb9e2:	dd01      	ble.n	bb9e8 <serialEventRun+0x18>
        serialEvent();
   bb9e4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bb9e8:	4b06      	ldr	r3, [pc, #24]	; (bba04 <serialEventRun+0x34>)
   bb9ea:	b143      	cbz	r3, bb9fe <serialEventRun+0x2e>
   bb9ec:	f000 f8c8 	bl	bbb80 <_Z22__fetch_global_Serial1v>
   bb9f0:	6803      	ldr	r3, [r0, #0]
   bb9f2:	691b      	ldr	r3, [r3, #16]
   bb9f4:	4798      	blx	r3
   bb9f6:	2800      	cmp	r0, #0
   bb9f8:	dd01      	ble.n	bb9fe <serialEventRun+0x2e>
        serialEvent1();
   bb9fa:	f3af 8000 	nop.w
}
   bb9fe:	bd08      	pop	{r3, pc}
	...

000bba08 <_post_loop>:
{
   bba08:	b508      	push	{r3, lr}
	serialEventRun();
   bba0a:	f7ff ffe1 	bl	bb9d0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bba0e:	f7fd fb7f 	bl	b9110 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bba12:	4b01      	ldr	r3, [pc, #4]	; (bba18 <_post_loop+0x10>)
   bba14:	6018      	str	r0, [r3, #0]
}
   bba16:	bd08      	pop	{r3, pc}
   bba18:	2003e728 	.word	0x2003e728

000bba1c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bba1c:	4805      	ldr	r0, [pc, #20]	; (bba34 <_Z33system_initialize_user_backup_ramv+0x18>)
   bba1e:	4a06      	ldr	r2, [pc, #24]	; (bba38 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bba20:	4906      	ldr	r1, [pc, #24]	; (bba3c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bba22:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bba24:	1a12      	subs	r2, r2, r0
   bba26:	f001 f8b9 	bl	bcb9c <memcpy>
    __backup_sram_signature = signature;
   bba2a:	4b05      	ldr	r3, [pc, #20]	; (bba40 <_Z33system_initialize_user_backup_ramv+0x24>)
   bba2c:	4a05      	ldr	r2, [pc, #20]	; (bba44 <_Z33system_initialize_user_backup_ramv+0x28>)
   bba2e:	601a      	str	r2, [r3, #0]
}
   bba30:	bd08      	pop	{r3, pc}
   bba32:	bf00      	nop
   bba34:	2003f400 	.word	0x2003f400
   bba38:	2003f404 	.word	0x2003f404
   bba3c:	000bfbc4 	.word	0x000bfbc4
   bba40:	2003f400 	.word	0x2003f400
   bba44:	9a271c1e 	.word	0x9a271c1e

000bba48 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bba48:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bba4a:	2300      	movs	r3, #0
   bba4c:	9300      	str	r3, [sp, #0]
   bba4e:	461a      	mov	r2, r3
   bba50:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bba54:	f7fd fcb6 	bl	b93c4 <system_ctrl_set_result>
}
   bba58:	b003      	add	sp, #12
   bba5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bba60 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bba60:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bba62:	8843      	ldrh	r3, [r0, #2]
   bba64:	2b0a      	cmp	r3, #10
   bba66:	d008      	beq.n	bba7a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bba68:	2b50      	cmp	r3, #80	; 0x50
   bba6a:	d10b      	bne.n	bba84 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bba6c:	4b09      	ldr	r3, [pc, #36]	; (bba94 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bba6e:	681b      	ldr	r3, [r3, #0]
   bba70:	b14b      	cbz	r3, bba86 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bba72:	b003      	add	sp, #12
   bba74:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bba78:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bba7a:	f7ff ffe5 	bl	bba48 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bba7e:	b003      	add	sp, #12
   bba80:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bba84:	2300      	movs	r3, #0
   bba86:	9300      	str	r3, [sp, #0]
   bba88:	461a      	mov	r2, r3
   bba8a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bba8e:	f7fd fc99 	bl	b93c4 <system_ctrl_set_result>
}
   bba92:	e7f4      	b.n	bba7e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bba94:	2003e724 	.word	0x2003e724

000bba98 <module_user_init_hook>:
{
   bba98:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bba9a:	4812      	ldr	r0, [pc, #72]	; (bbae4 <module_user_init_hook+0x4c>)
   bba9c:	2100      	movs	r1, #0
   bba9e:	f7fd fd5b 	bl	b9558 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bbaa2:	4b11      	ldr	r3, [pc, #68]	; (bbae8 <module_user_init_hook+0x50>)
   bbaa4:	681a      	ldr	r2, [r3, #0]
   bbaa6:	4b11      	ldr	r3, [pc, #68]	; (bbaec <module_user_init_hook+0x54>)
   bbaa8:	429a      	cmp	r2, r3
   bbaaa:	4b11      	ldr	r3, [pc, #68]	; (bbaf0 <module_user_init_hook+0x58>)
   bbaac:	bf0c      	ite	eq
   bbaae:	2201      	moveq	r2, #1
   bbab0:	2200      	movne	r2, #0
   bbab2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bbab4:	d001      	beq.n	bbaba <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bbab6:	f7ff ffb1 	bl	bba1c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bbaba:	f7fd fb19 	bl	b90f0 <HAL_RNG_GetRandomNumber>
   bbabe:	4604      	mov	r4, r0
    srand(seed);
   bbac0:	f001 f89c 	bl	bcbfc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bbac4:	4b0b      	ldr	r3, [pc, #44]	; (bbaf4 <module_user_init_hook+0x5c>)
   bbac6:	b113      	cbz	r3, bbace <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bbac8:	4620      	mov	r0, r4
   bbaca:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bbace:	2100      	movs	r1, #0
   bbad0:	4808      	ldr	r0, [pc, #32]	; (bbaf4 <module_user_init_hook+0x5c>)
   bbad2:	f7fd fc81 	bl	b93d8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bbad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bbada:	4807      	ldr	r0, [pc, #28]	; (bbaf8 <module_user_init_hook+0x60>)
   bbadc:	2100      	movs	r1, #0
   bbade:	f7fd bc67 	b.w	b93b0 <system_ctrl_set_app_request_handler>
   bbae2:	bf00      	nop
   bbae4:	000bb9c5 	.word	0x000bb9c5
   bbae8:	2003f400 	.word	0x2003f400
   bbaec:	9a271c1e 	.word	0x9a271c1e
   bbaf0:	2003e720 	.word	0x2003e720
   bbaf4:	00000000 	.word	0x00000000
   bbaf8:	000bba61 	.word	0x000bba61

000bbafc <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bbafc:	4770      	bx	lr
	...

000bbb00 <_Z19__fetch_global_Wirev>:
{
   bbb00:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bbb02:	4d0e      	ldr	r5, [pc, #56]	; (bbb3c <_Z19__fetch_global_Wirev+0x3c>)
   bbb04:	7829      	ldrb	r1, [r5, #0]
   bbb06:	f3bf 8f5b 	dmb	ish
   bbb0a:	f011 0401 	ands.w	r4, r1, #1
{
   bbb0e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bbb10:	d111      	bne.n	bbb36 <_Z19__fetch_global_Wirev+0x36>
   bbb12:	4628      	mov	r0, r5
   bbb14:	f7f8 fac9 	bl	b40aa <__cxa_guard_acquire>
   bbb18:	b168      	cbz	r0, bbb36 <_Z19__fetch_global_Wirev+0x36>
   bbb1a:	a801      	add	r0, sp, #4
   bbb1c:	f7f8 fe0a 	bl	b4734 <_Z17acquireWireBufferv>
   bbb20:	aa01      	add	r2, sp, #4
   bbb22:	4621      	mov	r1, r4
   bbb24:	4806      	ldr	r0, [pc, #24]	; (bbb40 <_Z19__fetch_global_Wirev+0x40>)
   bbb26:	f7fe ff39 	bl	ba99c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bbb2a:	4628      	mov	r0, r5
   bbb2c:	f7f8 fac2 	bl	b40b4 <__cxa_guard_release>
   bbb30:	4804      	ldr	r0, [pc, #16]	; (bbb44 <_Z19__fetch_global_Wirev+0x44>)
   bbb32:	f001 f819 	bl	bcb68 <atexit>
	return wire;
}
   bbb36:	4802      	ldr	r0, [pc, #8]	; (bbb40 <_Z19__fetch_global_Wirev+0x40>)
   bbb38:	b007      	add	sp, #28
   bbb3a:	bd30      	pop	{r4, r5, pc}
   bbb3c:	2003e72c 	.word	0x2003e72c
   bbb40:	2003e730 	.word	0x2003e730
   bbb44:	000bbafd 	.word	0x000bbafd

000bbb48 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bbb48:	4770      	bx	lr
	...

000bbb4c <_Z20acquireSerial1Bufferv>:
{
   bbb4c:	b538      	push	{r3, r4, r5, lr}
   bbb4e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bbb50:	2514      	movs	r5, #20
   bbb52:	462a      	mov	r2, r5
   bbb54:	2100      	movs	r1, #0
   bbb56:	f001 f849 	bl	bcbec <memset>
   bbb5a:	8025      	strh	r5, [r4, #0]
   bbb5c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbb5e:	4907      	ldr	r1, [pc, #28]	; (bbb7c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bbb60:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbb62:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bbb64:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbb66:	f000 f82f 	bl	bbbc8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbb6a:	4904      	ldr	r1, [pc, #16]	; (bbb7c <_Z20acquireSerial1Bufferv+0x30>)
    };
   bbb6c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbb6e:	4628      	mov	r0, r5
   bbb70:	f000 f82a 	bl	bbbc8 <_ZnajRKSt9nothrow_t>
    };
   bbb74:	60e0      	str	r0, [r4, #12]
}
   bbb76:	4620      	mov	r0, r4
   bbb78:	bd38      	pop	{r3, r4, r5, pc}
   bbb7a:	bf00      	nop
   bbb7c:	000bf6b0 	.word	0x000bf6b0

000bbb80 <_Z22__fetch_global_Serial1v>:
{
   bbb80:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bbb82:	4d0e      	ldr	r5, [pc, #56]	; (bbbbc <_Z22__fetch_global_Serial1v+0x3c>)
   bbb84:	7829      	ldrb	r1, [r5, #0]
   bbb86:	f3bf 8f5b 	dmb	ish
   bbb8a:	f011 0401 	ands.w	r4, r1, #1
{
   bbb8e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bbb90:	d111      	bne.n	bbbb6 <_Z22__fetch_global_Serial1v+0x36>
   bbb92:	4628      	mov	r0, r5
   bbb94:	f7f8 fa89 	bl	b40aa <__cxa_guard_acquire>
   bbb98:	b168      	cbz	r0, bbbb6 <_Z22__fetch_global_Serial1v+0x36>
   bbb9a:	a801      	add	r0, sp, #4
   bbb9c:	f7ff ffd6 	bl	bbb4c <_Z20acquireSerial1Bufferv>
   bbba0:	aa01      	add	r2, sp, #4
   bbba2:	4621      	mov	r1, r4
   bbba4:	4806      	ldr	r0, [pc, #24]	; (bbbc0 <_Z22__fetch_global_Serial1v+0x40>)
   bbba6:	f7ff fdeb 	bl	bb780 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bbbaa:	4628      	mov	r0, r5
   bbbac:	f7f8 fa82 	bl	b40b4 <__cxa_guard_release>
   bbbb0:	4804      	ldr	r0, [pc, #16]	; (bbbc4 <_Z22__fetch_global_Serial1v+0x44>)
   bbbb2:	f000 ffd9 	bl	bcb68 <atexit>
    return serial1;
}
   bbbb6:	4802      	ldr	r0, [pc, #8]	; (bbbc0 <_Z22__fetch_global_Serial1v+0x40>)
   bbbb8:	b007      	add	sp, #28
   bbbba:	bd30      	pop	{r4, r5, pc}
   bbbbc:	2003e744 	.word	0x2003e744
   bbbc0:	2003e748 	.word	0x2003e748
   bbbc4:	000bbb49 	.word	0x000bbb49

000bbbc8 <_ZnajRKSt9nothrow_t>:
   bbbc8:	f7f8 ba67 	b.w	b409a <_Znaj>

000bbbcc <_ZSt17__throw_bad_allocv>:
   bbbcc:	b508      	push	{r3, lr}
   bbbce:	f7fd fca3 	bl	b9518 <abort>

000bbbd2 <_ZSt19__throw_logic_errorPKc>:
   bbbd2:	b508      	push	{r3, lr}
   bbbd4:	f7fd fca0 	bl	b9518 <abort>

000bbbd8 <_ZSt20__throw_length_errorPKc>:
   bbbd8:	b508      	push	{r3, lr}
   bbbda:	f7fd fc9d 	bl	b9518 <abort>

000bbbde <_ZSt25__throw_bad_function_callv>:
   bbbde:	b508      	push	{r3, lr}
   bbbe0:	f7fd fc9a 	bl	b9518 <abort>

000bbbe4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   bbbe4:	4901      	ldr	r1, [pc, #4]	; (bbbec <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   bbbe6:	f000 b963 	b.w	bbeb0 <_ZNKSt9type_infoeqERKS_>
   bbbea:	bf00      	nop
   bbbec:	000bf6cc 	.word	0x000bf6cc

000bbbf0 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   bbbf0:	b10a      	cbz	r2, bbbf6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   bbbf2:	f000 bfd3 	b.w	bcb9c <memcpy>
   bbbf6:	4770      	bx	lr

000bbbf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   bbbf8:	b508      	push	{r3, lr}
   bbbfa:	680b      	ldr	r3, [r1, #0]
   bbbfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   bbc00:	d302      	bcc.n	bbc08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   bbc02:	480d      	ldr	r0, [pc, #52]	; (bbc38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   bbc04:	f7ff ffe8 	bl	bbbd8 <_ZSt20__throw_length_errorPKc>
   bbc08:	4293      	cmp	r3, r2
   bbc0a:	d90b      	bls.n	bbc24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   bbc0c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   bbc10:	ea4f 0042 	mov.w	r0, r2, lsl #1
   bbc14:	d206      	bcs.n	bbc24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   bbc16:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   bbc1a:	bf2a      	itet	cs
   bbc1c:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   bbc20:	6008      	strcc	r0, [r1, #0]
   bbc22:	600b      	strcs	r3, [r1, #0]
   bbc24:	6808      	ldr	r0, [r1, #0]
   bbc26:	3001      	adds	r0, #1
   bbc28:	d501      	bpl.n	bbc2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   bbc2a:	f7ff ffcf 	bl	bbbcc <_ZSt17__throw_bad_allocv>
   bbc2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   bbc32:	f7f8 ba30 	b.w	b4096 <_Znwj>
   bbc36:	bf00      	nop
   bbc38:	000bf6d4 	.word	0x000bf6d4

000bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   bbc3c:	f850 3b08 	ldr.w	r3, [r0], #8
   bbc40:	4283      	cmp	r3, r0
   bbc42:	d002      	beq.n	bbc4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   bbc44:	4618      	mov	r0, r3
   bbc46:	f7f8 ba2a 	b.w	b409e <_ZdlPv>
   bbc4a:	4770      	bx	lr

000bbc4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   bbc4c:	2a01      	cmp	r2, #1
   bbc4e:	b410      	push	{r4}
   bbc50:	d104      	bne.n	bbc5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   bbc52:	780a      	ldrb	r2, [r1, #0]
   bbc54:	f85d 4b04 	ldr.w	r4, [sp], #4
   bbc58:	7002      	strb	r2, [r0, #0]
   bbc5a:	4770      	bx	lr
   bbc5c:	f85d 4b04 	ldr.w	r4, [sp], #4
   bbc60:	f7ff bfc6 	b.w	bbbf0 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000bbc64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
   bbc64:	b508      	push	{r3, lr}
   bbc66:	1a52      	subs	r2, r2, r1
   bbc68:	f7ff fff0 	bl	bbc4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   bbc6c:	bd08      	pop	{r3, pc}

000bbc6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   bbc6e:	b508      	push	{r3, lr}
   bbc70:	1a52      	subs	r2, r2, r1
   bbc72:	f7ff ffeb 	bl	bbc4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   bbc76:	bd08      	pop	{r3, pc}

000bbc78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
   bbc78:	4288      	cmp	r0, r1
   bbc7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bbc7c:	4604      	mov	r4, r0
   bbc7e:	460e      	mov	r6, r1
   bbc80:	d01e      	beq.n	bbcc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
   bbc82:	4603      	mov	r3, r0
   bbc84:	684d      	ldr	r5, [r1, #4]
   bbc86:	f853 2b08 	ldr.w	r2, [r3], #8
   bbc8a:	429a      	cmp	r2, r3
   bbc8c:	bf14      	ite	ne
   bbc8e:	6882      	ldrne	r2, [r0, #8]
   bbc90:	220f      	moveq	r2, #15
   bbc92:	42aa      	cmp	r2, r5
   bbc94:	d20a      	bcs.n	bbcac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
   bbc96:	a901      	add	r1, sp, #4
   bbc98:	9501      	str	r5, [sp, #4]
   bbc9a:	f7ff ffad 	bl	bbbf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   bbc9e:	4607      	mov	r7, r0
   bbca0:	4620      	mov	r0, r4
   bbca2:	f7ff ffcb 	bl	bbc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   bbca6:	9b01      	ldr	r3, [sp, #4]
   bbca8:	6027      	str	r7, [r4, #0]
   bbcaa:	60a3      	str	r3, [r4, #8]
   bbcac:	b125      	cbz	r5, bbcb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
   bbcae:	6831      	ldr	r1, [r6, #0]
   bbcb0:	6820      	ldr	r0, [r4, #0]
   bbcb2:	462a      	mov	r2, r5
   bbcb4:	f7ff ffca 	bl	bbc4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   bbcb8:	6823      	ldr	r3, [r4, #0]
   bbcba:	6065      	str	r5, [r4, #4]
   bbcbc:	2200      	movs	r2, #0
   bbcbe:	555a      	strb	r2, [r3, r5]
   bbcc0:	b003      	add	sp, #12
   bbcc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bbcc4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   bbcc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bbcc6:	2400      	movs	r4, #0
   bbcc8:	2310      	movs	r3, #16
   bbcca:	e9cd 3402 	strd	r3, r4, [sp, #8]
   bbcce:	6803      	ldr	r3, [r0, #0]
   bbcd0:	4615      	mov	r5, r2
   bbcd2:	699e      	ldr	r6, [r3, #24]
   bbcd4:	6812      	ldr	r2, [r2, #0]
   bbcd6:	466b      	mov	r3, sp
   bbcd8:	e9cd 4400 	strd	r4, r4, [sp]
   bbcdc:	47b0      	blx	r6
   bbcde:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bbce2:	f003 0306 	and.w	r3, r3, #6
   bbce6:	2b06      	cmp	r3, #6
   bbce8:	bf03      	ittte	eq
   bbcea:	9b00      	ldreq	r3, [sp, #0]
   bbcec:	602b      	streq	r3, [r5, #0]
   bbcee:	2001      	moveq	r0, #1
   bbcf0:	4620      	movne	r0, r4
   bbcf2:	b004      	add	sp, #16
   bbcf4:	bd70      	pop	{r4, r5, r6, pc}

000bbcf6 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   bbcf6:	9800      	ldr	r0, [sp, #0]
   bbcf8:	4290      	cmp	r0, r2
   bbcfa:	bf14      	ite	ne
   bbcfc:	2001      	movne	r0, #1
   bbcfe:	2006      	moveq	r0, #6
   bbd00:	4770      	bx	lr
	...

000bbd04 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   bbd04:	b510      	push	{r4, lr}
   bbd06:	4b03      	ldr	r3, [pc, #12]	; (bbd14 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   bbd08:	6003      	str	r3, [r0, #0]
   bbd0a:	4604      	mov	r4, r0
   bbd0c:	f000 f8cd 	bl	bbeaa <_ZNSt9type_infoD1Ev>
   bbd10:	4620      	mov	r0, r4
   bbd12:	bd10      	pop	{r4, pc}
   bbd14:	000bf724 	.word	0x000bf724

000bbd18 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   bbd18:	b510      	push	{r4, lr}
   bbd1a:	4604      	mov	r4, r0
   bbd1c:	f7ff fff2 	bl	bbd04 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bbd20:	4620      	mov	r0, r4
   bbd22:	2108      	movs	r1, #8
   bbd24:	f7f8 f9bf 	bl	b40a6 <_ZdlPvj>
   bbd28:	4620      	mov	r0, r4
   bbd2a:	bd10      	pop	{r4, pc}

000bbd2c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   bbd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bbd30:	461f      	mov	r7, r3
   bbd32:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   bbd36:	f8dd 8018 	ldr.w	r8, [sp, #24]
   bbd3a:	4598      	cmp	r8, r3
   bbd3c:	4606      	mov	r6, r0
   bbd3e:	4615      	mov	r5, r2
   bbd40:	d107      	bne.n	bbd52 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bbd42:	9907      	ldr	r1, [sp, #28]
   bbd44:	f000 f8b4 	bl	bbeb0 <_ZNKSt9type_infoeqERKS_>
   bbd48:	b118      	cbz	r0, bbd52 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bbd4a:	7165      	strb	r5, [r4, #5]
   bbd4c:	2000      	movs	r0, #0
   bbd4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bbd52:	4639      	mov	r1, r7
   bbd54:	4630      	mov	r0, r6
   bbd56:	f000 f8ab 	bl	bbeb0 <_ZNKSt9type_infoeqERKS_>
   bbd5a:	2800      	cmp	r0, #0
   bbd5c:	d0f6      	beq.n	bbd4c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   bbd5e:	2301      	movs	r3, #1
   bbd60:	f8c4 8000 	str.w	r8, [r4]
   bbd64:	7125      	strb	r5, [r4, #4]
   bbd66:	71a3      	strb	r3, [r4, #6]
   bbd68:	e7f0      	b.n	bbd4c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000bbd6a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   bbd6a:	b538      	push	{r3, r4, r5, lr}
   bbd6c:	4615      	mov	r5, r2
   bbd6e:	461c      	mov	r4, r3
   bbd70:	f000 f89e 	bl	bbeb0 <_ZNKSt9type_infoeqERKS_>
   bbd74:	b120      	cbz	r0, bbd80 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   bbd76:	2308      	movs	r3, #8
   bbd78:	60e3      	str	r3, [r4, #12]
   bbd7a:	2306      	movs	r3, #6
   bbd7c:	6025      	str	r5, [r4, #0]
   bbd7e:	7123      	strb	r3, [r4, #4]
   bbd80:	bd38      	pop	{r3, r4, r5, pc}

000bbd82 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   bbd82:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bbd84:	4605      	mov	r5, r0
   bbd86:	460c      	mov	r4, r1
   bbd88:	9201      	str	r2, [sp, #4]
   bbd8a:	461e      	mov	r6, r3
   bbd8c:	f000 f890 	bl	bbeb0 <_ZNKSt9type_infoeqERKS_>
   bbd90:	b950      	cbnz	r0, bbda8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bbd92:	2e03      	cmp	r6, #3
   bbd94:	d808      	bhi.n	bbda8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bbd96:	6823      	ldr	r3, [r4, #0]
   bbd98:	9a01      	ldr	r2, [sp, #4]
   bbd9a:	695b      	ldr	r3, [r3, #20]
   bbd9c:	4629      	mov	r1, r5
   bbd9e:	4620      	mov	r0, r4
   bbda0:	b002      	add	sp, #8
   bbda2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bbda6:	4718      	bx	r3
   bbda8:	b002      	add	sp, #8
   bbdaa:	bd70      	pop	{r4, r5, r6, pc}

000bbdac <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   bbdac:	b510      	push	{r4, lr}
   bbdae:	4b03      	ldr	r3, [pc, #12]	; (bbdbc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   bbdb0:	6003      	str	r3, [r0, #0]
   bbdb2:	4604      	mov	r4, r0
   bbdb4:	f7ff ffa6 	bl	bbd04 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bbdb8:	4620      	mov	r0, r4
   bbdba:	bd10      	pop	{r4, pc}
   bbdbc:	000bf784 	.word	0x000bf784

000bbdc0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   bbdc0:	b510      	push	{r4, lr}
   bbdc2:	4604      	mov	r4, r0
   bbdc4:	f7ff fff2 	bl	bbdac <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   bbdc8:	4620      	mov	r0, r4
   bbdca:	210c      	movs	r1, #12
   bbdcc:	f7f8 f96b 	bl	b40a6 <_ZdlPvj>
   bbdd0:	4620      	mov	r0, r4
   bbdd2:	bd10      	pop	{r4, pc}

000bbdd4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   bbdd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bbdd6:	9f08      	ldr	r7, [sp, #32]
   bbdd8:	4297      	cmp	r7, r2
   bbdda:	4605      	mov	r5, r0
   bbddc:	460e      	mov	r6, r1
   bbdde:	4614      	mov	r4, r2
   bbde0:	d00a      	beq.n	bbdf8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   bbde2:	68a8      	ldr	r0, [r5, #8]
   bbde4:	6802      	ldr	r2, [r0, #0]
   bbde6:	9708      	str	r7, [sp, #32]
   bbde8:	6a15      	ldr	r5, [r2, #32]
   bbdea:	4631      	mov	r1, r6
   bbdec:	4622      	mov	r2, r4
   bbdee:	46ac      	mov	ip, r5
   bbdf0:	b003      	add	sp, #12
   bbdf2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bbdf6:	4760      	bx	ip
   bbdf8:	4619      	mov	r1, r3
   bbdfa:	9301      	str	r3, [sp, #4]
   bbdfc:	f000 f858 	bl	bbeb0 <_ZNKSt9type_infoeqERKS_>
   bbe00:	9b01      	ldr	r3, [sp, #4]
   bbe02:	2800      	cmp	r0, #0
   bbe04:	d0ed      	beq.n	bbde2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   bbe06:	2006      	movs	r0, #6
   bbe08:	b003      	add	sp, #12
   bbe0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bbe0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   bbe0c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbe10:	460d      	mov	r5, r1
   bbe12:	4619      	mov	r1, r3
   bbe14:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   bbe18:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   bbe1c:	4681      	mov	r9, r0
   bbe1e:	4617      	mov	r7, r2
   bbe20:	4698      	mov	r8, r3
   bbe22:	f000 f845 	bl	bbeb0 <_ZNKSt9type_infoeqERKS_>
   bbe26:	b190      	cbz	r0, bbe4e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   bbe28:	2d00      	cmp	r5, #0
   bbe2a:	6034      	str	r4, [r6, #0]
   bbe2c:	7137      	strb	r7, [r6, #4]
   bbe2e:	db09      	blt.n	bbe44 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   bbe30:	1961      	adds	r1, r4, r5
   bbe32:	458a      	cmp	sl, r1
   bbe34:	bf0c      	ite	eq
   bbe36:	2106      	moveq	r1, #6
   bbe38:	2101      	movne	r1, #1
   bbe3a:	71b1      	strb	r1, [r6, #6]
   bbe3c:	2000      	movs	r0, #0
   bbe3e:	b001      	add	sp, #4
   bbe40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbe44:	3502      	adds	r5, #2
   bbe46:	d1f9      	bne.n	bbe3c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bbe48:	2301      	movs	r3, #1
   bbe4a:	71b3      	strb	r3, [r6, #6]
   bbe4c:	e7f6      	b.n	bbe3c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bbe4e:	4554      	cmp	r4, sl
   bbe50:	d106      	bne.n	bbe60 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bbe52:	4659      	mov	r1, fp
   bbe54:	4648      	mov	r0, r9
   bbe56:	f000 f82b 	bl	bbeb0 <_ZNKSt9type_infoeqERKS_>
   bbe5a:	b108      	cbz	r0, bbe60 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bbe5c:	7177      	strb	r7, [r6, #5]
   bbe5e:	e7ed      	b.n	bbe3c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bbe60:	f8d9 0008 	ldr.w	r0, [r9, #8]
   bbe64:	6803      	ldr	r3, [r0, #0]
   bbe66:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   bbe6a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   bbe6e:	69dc      	ldr	r4, [r3, #28]
   bbe70:	463a      	mov	r2, r7
   bbe72:	4643      	mov	r3, r8
   bbe74:	4629      	mov	r1, r5
   bbe76:	46a4      	mov	ip, r4
   bbe78:	b001      	add	sp, #4
   bbe7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbe7e:	4760      	bx	ip

000bbe80 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   bbe80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bbe84:	4607      	mov	r7, r0
   bbe86:	460c      	mov	r4, r1
   bbe88:	4615      	mov	r5, r2
   bbe8a:	461e      	mov	r6, r3
   bbe8c:	f7ff ff6d 	bl	bbd6a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   bbe90:	b948      	cbnz	r0, bbea6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   bbe92:	68b8      	ldr	r0, [r7, #8]
   bbe94:	6803      	ldr	r3, [r0, #0]
   bbe96:	699f      	ldr	r7, [r3, #24]
   bbe98:	462a      	mov	r2, r5
   bbe9a:	4633      	mov	r3, r6
   bbe9c:	4621      	mov	r1, r4
   bbe9e:	46bc      	mov	ip, r7
   bbea0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bbea4:	4760      	bx	ip
   bbea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bbeaa <_ZNSt9type_infoD1Ev>:
   bbeaa:	4770      	bx	lr

000bbeac <_ZNKSt9type_info14__is_pointer_pEv>:
   bbeac:	2000      	movs	r0, #0
   bbeae:	4770      	bx	lr

000bbeb0 <_ZNKSt9type_infoeqERKS_>:
   bbeb0:	4281      	cmp	r1, r0
   bbeb2:	b508      	push	{r3, lr}
   bbeb4:	d00e      	beq.n	bbed4 <_ZNKSt9type_infoeqERKS_+0x24>
   bbeb6:	6840      	ldr	r0, [r0, #4]
   bbeb8:	7803      	ldrb	r3, [r0, #0]
   bbeba:	2b2a      	cmp	r3, #42	; 0x2a
   bbebc:	d00c      	beq.n	bbed8 <_ZNKSt9type_infoeqERKS_+0x28>
   bbebe:	6849      	ldr	r1, [r1, #4]
   bbec0:	780b      	ldrb	r3, [r1, #0]
   bbec2:	2b2a      	cmp	r3, #42	; 0x2a
   bbec4:	bf08      	it	eq
   bbec6:	3101      	addeq	r1, #1
   bbec8:	f000 fec6 	bl	bcc58 <strcmp>
   bbecc:	fab0 f080 	clz	r0, r0
   bbed0:	0940      	lsrs	r0, r0, #5
   bbed2:	bd08      	pop	{r3, pc}
   bbed4:	2001      	movs	r0, #1
   bbed6:	e7fc      	b.n	bbed2 <_ZNKSt9type_infoeqERKS_+0x22>
   bbed8:	2000      	movs	r0, #0
   bbeda:	e7fa      	b.n	bbed2 <_ZNKSt9type_infoeqERKS_+0x22>

000bbedc <floorf>:
   bbedc:	ee10 2a10 	vmov	r2, s0
   bbee0:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   bbee4:	3b7f      	subs	r3, #127	; 0x7f
   bbee6:	2b16      	cmp	r3, #22
   bbee8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   bbeec:	dc28      	bgt.n	bbf40 <floorf+0x64>
   bbeee:	2b00      	cmp	r3, #0
   bbef0:	db18      	blt.n	bbf24 <floorf+0x48>
   bbef2:	491a      	ldr	r1, [pc, #104]	; (bbf5c <floorf+0x80>)
   bbef4:	4119      	asrs	r1, r3
   bbef6:	420a      	tst	r2, r1
   bbef8:	d021      	beq.n	bbf3e <floorf+0x62>
   bbefa:	eddf 7a19 	vldr	s15, [pc, #100]	; bbf60 <floorf+0x84>
   bbefe:	ee70 7a27 	vadd.f32	s15, s0, s15
   bbf02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   bbf06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bbf0a:	dd18      	ble.n	bbf3e <floorf+0x62>
   bbf0c:	2a00      	cmp	r2, #0
   bbf0e:	da04      	bge.n	bbf1a <floorf+0x3e>
   bbf10:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   bbf14:	fa40 f303 	asr.w	r3, r0, r3
   bbf18:	441a      	add	r2, r3
   bbf1a:	ea22 0301 	bic.w	r3, r2, r1
   bbf1e:	ee00 3a10 	vmov	s0, r3
   bbf22:	4770      	bx	lr
   bbf24:	eddf 7a0e 	vldr	s15, [pc, #56]	; bbf60 <floorf+0x84>
   bbf28:	ee70 7a27 	vadd.f32	s15, s0, s15
   bbf2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   bbf30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bbf34:	dd03      	ble.n	bbf3e <floorf+0x62>
   bbf36:	2a00      	cmp	r2, #0
   bbf38:	db08      	blt.n	bbf4c <floorf+0x70>
   bbf3a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; bbf64 <floorf+0x88>
   bbf3e:	4770      	bx	lr
   bbf40:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   bbf44:	d3fb      	bcc.n	bbf3e <floorf+0x62>
   bbf46:	ee30 0a00 	vadd.f32	s0, s0, s0
   bbf4a:	4770      	bx	lr
   bbf4c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   bbf50:	2900      	cmp	r1, #0
   bbf52:	bf18      	it	ne
   bbf54:	eeb0 0a67 	vmovne.f32	s0, s15
   bbf58:	4770      	bx	lr
   bbf5a:	bf00      	nop
   bbf5c:	007fffff 	.word	0x007fffff
   bbf60:	7149f2ca 	.word	0x7149f2ca
   bbf64:	00000000 	.word	0x00000000

000bbf68 <sqrt>:
   bbf68:	b538      	push	{r3, r4, r5, lr}
   bbf6a:	ed2d 8b02 	vpush	{d8}
   bbf6e:	ec55 4b10 	vmov	r4, r5, d0
   bbf72:	f000 f833 	bl	bbfdc <__ieee754_sqrt>
   bbf76:	4b18      	ldr	r3, [pc, #96]	; (bbfd8 <sqrt+0x70>)
   bbf78:	eeb0 8a40 	vmov.f32	s16, s0
   bbf7c:	eef0 8a60 	vmov.f32	s17, s1
   bbf80:	f993 3000 	ldrsb.w	r3, [r3]
   bbf84:	3301      	adds	r3, #1
   bbf86:	d00d      	beq.n	bbfa4 <sqrt+0x3c>
   bbf88:	4622      	mov	r2, r4
   bbf8a:	462b      	mov	r3, r5
   bbf8c:	4620      	mov	r0, r4
   bbf8e:	4629      	mov	r1, r5
   bbf90:	f000 fd46 	bl	bca20 <__aeabi_dcmpun>
   bbf94:	b930      	cbnz	r0, bbfa4 <sqrt+0x3c>
   bbf96:	2200      	movs	r2, #0
   bbf98:	2300      	movs	r3, #0
   bbf9a:	4620      	mov	r0, r4
   bbf9c:	4629      	mov	r1, r5
   bbf9e:	f000 fd17 	bl	bc9d0 <__aeabi_dcmplt>
   bbfa2:	b930      	cbnz	r0, bbfb2 <sqrt+0x4a>
   bbfa4:	eeb0 0a48 	vmov.f32	s0, s16
   bbfa8:	eef0 0a68 	vmov.f32	s1, s17
   bbfac:	ecbd 8b02 	vpop	{d8}
   bbfb0:	bd38      	pop	{r3, r4, r5, pc}
   bbfb2:	f7fd fac1 	bl	b9538 <__errno>
   bbfb6:	2200      	movs	r2, #0
   bbfb8:	2300      	movs	r3, #0
   bbfba:	2121      	movs	r1, #33	; 0x21
   bbfbc:	6001      	str	r1, [r0, #0]
   bbfbe:	4610      	mov	r0, r2
   bbfc0:	4619      	mov	r1, r3
   bbfc2:	f000 fbbd 	bl	bc740 <__aeabi_ddiv>
   bbfc6:	ec41 0b18 	vmov	d8, r0, r1
   bbfca:	eeb0 0a48 	vmov.f32	s0, s16
   bbfce:	eef0 0a68 	vmov.f32	s1, s17
   bbfd2:	ecbd 8b02 	vpop	{d8}
   bbfd6:	bd38      	pop	{r3, r4, r5, pc}
   bbfd8:	2003505c 	.word	0x2003505c

000bbfdc <__ieee754_sqrt>:
   bbfdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bbfe0:	4a63      	ldr	r2, [pc, #396]	; (bc170 <__ieee754_sqrt+0x194>)
   bbfe2:	ec55 4b10 	vmov	r4, r5, d0
   bbfe6:	43aa      	bics	r2, r5
   bbfe8:	f000 809f 	beq.w	bc12a <__ieee754_sqrt+0x14e>
   bbfec:	2d00      	cmp	r5, #0
   bbfee:	ee10 ca10 	vmov	ip, s0
   bbff2:	462b      	mov	r3, r5
   bbff4:	dd54      	ble.n	bc0a0 <__ieee754_sqrt+0xc4>
   bbff6:	1529      	asrs	r1, r5, #20
   bbff8:	d063      	beq.n	bc0c2 <__ieee754_sqrt+0xe6>
   bbffa:	f3c3 0313 	ubfx	r3, r3, #0, #20
   bbffe:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   bc002:	07c9      	lsls	r1, r1, #31
   bc004:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bc008:	d404      	bmi.n	bc014 <__ieee754_sqrt+0x38>
   bc00a:	005b      	lsls	r3, r3, #1
   bc00c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   bc010:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bc014:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   bc018:	2600      	movs	r6, #0
   bc01a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   bc01e:	107f      	asrs	r7, r7, #1
   bc020:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bc024:	f04f 0e16 	mov.w	lr, #22
   bc028:	4634      	mov	r4, r6
   bc02a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   bc02e:	18a1      	adds	r1, r4, r2
   bc030:	4299      	cmp	r1, r3
   bc032:	dc02      	bgt.n	bc03a <__ieee754_sqrt+0x5e>
   bc034:	1a5b      	subs	r3, r3, r1
   bc036:	188c      	adds	r4, r1, r2
   bc038:	4416      	add	r6, r2
   bc03a:	005b      	lsls	r3, r3, #1
   bc03c:	f1be 0e01 	subs.w	lr, lr, #1
   bc040:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   bc044:	ea4f 0252 	mov.w	r2, r2, lsr #1
   bc048:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bc04c:	d1ef      	bne.n	bc02e <__ieee754_sqrt+0x52>
   bc04e:	4675      	mov	r5, lr
   bc050:	2020      	movs	r0, #32
   bc052:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   bc056:	e00a      	b.n	bc06e <__ieee754_sqrt+0x92>
   bc058:	d044      	beq.n	bc0e4 <__ieee754_sqrt+0x108>
   bc05a:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   bc05e:	3801      	subs	r0, #1
   bc060:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   bc064:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bc068:	ea4f 0252 	mov.w	r2, r2, lsr #1
   bc06c:	d043      	beq.n	bc0f6 <__ieee754_sqrt+0x11a>
   bc06e:	42a3      	cmp	r3, r4
   bc070:	eb02 010e 	add.w	r1, r2, lr
   bc074:	ddf0      	ble.n	bc058 <__ieee754_sqrt+0x7c>
   bc076:	2900      	cmp	r1, #0
   bc078:	eb01 0e02 	add.w	lr, r1, r2
   bc07c:	db0a      	blt.n	bc094 <__ieee754_sqrt+0xb8>
   bc07e:	46a0      	mov	r8, r4
   bc080:	1b1b      	subs	r3, r3, r4
   bc082:	4561      	cmp	r1, ip
   bc084:	bf88      	it	hi
   bc086:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   bc08a:	ebac 0c01 	sub.w	ip, ip, r1
   bc08e:	4415      	add	r5, r2
   bc090:	4644      	mov	r4, r8
   bc092:	e7e2      	b.n	bc05a <__ieee754_sqrt+0x7e>
   bc094:	f1be 0f00 	cmp.w	lr, #0
   bc098:	dbf1      	blt.n	bc07e <__ieee754_sqrt+0xa2>
   bc09a:	f104 0801 	add.w	r8, r4, #1
   bc09e:	e7ef      	b.n	bc080 <__ieee754_sqrt+0xa4>
   bc0a0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   bc0a4:	4322      	orrs	r2, r4
   bc0a6:	d038      	beq.n	bc11a <__ieee754_sqrt+0x13e>
   bc0a8:	2d00      	cmp	r5, #0
   bc0aa:	d14e      	bne.n	bc14a <__ieee754_sqrt+0x16e>
   bc0ac:	4629      	mov	r1, r5
   bc0ae:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   bc0b2:	3915      	subs	r1, #21
   bc0b4:	4613      	mov	r3, r2
   bc0b6:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   bc0ba:	2a00      	cmp	r2, #0
   bc0bc:	d0f7      	beq.n	bc0ae <__ieee754_sqrt+0xd2>
   bc0be:	02d6      	lsls	r6, r2, #11
   bc0c0:	d450      	bmi.n	bc164 <__ieee754_sqrt+0x188>
   bc0c2:	2000      	movs	r0, #0
   bc0c4:	005b      	lsls	r3, r3, #1
   bc0c6:	02dd      	lsls	r5, r3, #11
   bc0c8:	4604      	mov	r4, r0
   bc0ca:	f100 0001 	add.w	r0, r0, #1
   bc0ce:	d5f9      	bpl.n	bc0c4 <__ieee754_sqrt+0xe8>
   bc0d0:	461a      	mov	r2, r3
   bc0d2:	4663      	mov	r3, ip
   bc0d4:	fa0c fc00 	lsl.w	ip, ip, r0
   bc0d8:	f1c0 0020 	rsb	r0, r0, #32
   bc0dc:	40c3      	lsrs	r3, r0
   bc0de:	1b09      	subs	r1, r1, r4
   bc0e0:	4313      	orrs	r3, r2
   bc0e2:	e78a      	b.n	bbffa <__ieee754_sqrt+0x1e>
   bc0e4:	4561      	cmp	r1, ip
   bc0e6:	d8b8      	bhi.n	bc05a <__ieee754_sqrt+0x7e>
   bc0e8:	2900      	cmp	r1, #0
   bc0ea:	eb01 0e02 	add.w	lr, r1, r2
   bc0ee:	dbd1      	blt.n	bc094 <__ieee754_sqrt+0xb8>
   bc0f0:	4698      	mov	r8, r3
   bc0f2:	2300      	movs	r3, #0
   bc0f4:	e7c9      	b.n	bc08a <__ieee754_sqrt+0xae>
   bc0f6:	ea53 030c 	orrs.w	r3, r3, ip
   bc0fa:	d110      	bne.n	bc11e <__ieee754_sqrt+0x142>
   bc0fc:	0868      	lsrs	r0, r5, #1
   bc0fe:	1071      	asrs	r1, r6, #1
   bc100:	07f3      	lsls	r3, r6, #31
   bc102:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   bc106:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   bc10a:	bf48      	it	mi
   bc10c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   bc110:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   bc114:	4602      	mov	r2, r0
   bc116:	ec43 2b10 	vmov	d0, r2, r3
   bc11a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc11e:	1c6a      	adds	r2, r5, #1
   bc120:	bf16      	itet	ne
   bc122:	1c68      	addne	r0, r5, #1
   bc124:	3601      	addeq	r6, #1
   bc126:	0840      	lsrne	r0, r0, #1
   bc128:	e7e9      	b.n	bc0fe <__ieee754_sqrt+0x122>
   bc12a:	ee10 2a10 	vmov	r2, s0
   bc12e:	ee10 0a10 	vmov	r0, s0
   bc132:	462b      	mov	r3, r5
   bc134:	4629      	mov	r1, r5
   bc136:	f000 f9d9 	bl	bc4ec <__aeabi_dmul>
   bc13a:	4622      	mov	r2, r4
   bc13c:	462b      	mov	r3, r5
   bc13e:	f000 f81f 	bl	bc180 <__adddf3>
   bc142:	ec41 0b10 	vmov	d0, r0, r1
   bc146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc14a:	ee10 2a10 	vmov	r2, s0
   bc14e:	4620      	mov	r0, r4
   bc150:	4629      	mov	r1, r5
   bc152:	f000 f813 	bl	bc17c <__aeabi_dsub>
   bc156:	4602      	mov	r2, r0
   bc158:	460b      	mov	r3, r1
   bc15a:	f000 faf1 	bl	bc740 <__aeabi_ddiv>
   bc15e:	ec41 0b10 	vmov	d0, r0, r1
   bc162:	e7da      	b.n	bc11a <__ieee754_sqrt+0x13e>
   bc164:	4663      	mov	r3, ip
   bc166:	2020      	movs	r0, #32
   bc168:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   bc16c:	e7b6      	b.n	bc0dc <__ieee754_sqrt+0x100>
   bc16e:	bf00      	nop
   bc170:	7ff00000 	.word	0x7ff00000

000bc174 <__aeabi_drsub>:
   bc174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bc178:	e002      	b.n	bc180 <__adddf3>
   bc17a:	bf00      	nop

000bc17c <__aeabi_dsub>:
   bc17c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bc180 <__adddf3>:
   bc180:	b530      	push	{r4, r5, lr}
   bc182:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bc186:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bc18a:	ea94 0f05 	teq	r4, r5
   bc18e:	bf08      	it	eq
   bc190:	ea90 0f02 	teqeq	r0, r2
   bc194:	bf1f      	itttt	ne
   bc196:	ea54 0c00 	orrsne.w	ip, r4, r0
   bc19a:	ea55 0c02 	orrsne.w	ip, r5, r2
   bc19e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bc1a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bc1a6:	f000 80e2 	beq.w	bc36e <__adddf3+0x1ee>
   bc1aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bc1ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bc1b2:	bfb8      	it	lt
   bc1b4:	426d      	neglt	r5, r5
   bc1b6:	dd0c      	ble.n	bc1d2 <__adddf3+0x52>
   bc1b8:	442c      	add	r4, r5
   bc1ba:	ea80 0202 	eor.w	r2, r0, r2
   bc1be:	ea81 0303 	eor.w	r3, r1, r3
   bc1c2:	ea82 0000 	eor.w	r0, r2, r0
   bc1c6:	ea83 0101 	eor.w	r1, r3, r1
   bc1ca:	ea80 0202 	eor.w	r2, r0, r2
   bc1ce:	ea81 0303 	eor.w	r3, r1, r3
   bc1d2:	2d36      	cmp	r5, #54	; 0x36
   bc1d4:	bf88      	it	hi
   bc1d6:	bd30      	pophi	{r4, r5, pc}
   bc1d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bc1dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bc1e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bc1e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bc1e8:	d002      	beq.n	bc1f0 <__adddf3+0x70>
   bc1ea:	4240      	negs	r0, r0
   bc1ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bc1f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bc1f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bc1f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bc1fc:	d002      	beq.n	bc204 <__adddf3+0x84>
   bc1fe:	4252      	negs	r2, r2
   bc200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bc204:	ea94 0f05 	teq	r4, r5
   bc208:	f000 80a7 	beq.w	bc35a <__adddf3+0x1da>
   bc20c:	f1a4 0401 	sub.w	r4, r4, #1
   bc210:	f1d5 0e20 	rsbs	lr, r5, #32
   bc214:	db0d      	blt.n	bc232 <__adddf3+0xb2>
   bc216:	fa02 fc0e 	lsl.w	ip, r2, lr
   bc21a:	fa22 f205 	lsr.w	r2, r2, r5
   bc21e:	1880      	adds	r0, r0, r2
   bc220:	f141 0100 	adc.w	r1, r1, #0
   bc224:	fa03 f20e 	lsl.w	r2, r3, lr
   bc228:	1880      	adds	r0, r0, r2
   bc22a:	fa43 f305 	asr.w	r3, r3, r5
   bc22e:	4159      	adcs	r1, r3
   bc230:	e00e      	b.n	bc250 <__adddf3+0xd0>
   bc232:	f1a5 0520 	sub.w	r5, r5, #32
   bc236:	f10e 0e20 	add.w	lr, lr, #32
   bc23a:	2a01      	cmp	r2, #1
   bc23c:	fa03 fc0e 	lsl.w	ip, r3, lr
   bc240:	bf28      	it	cs
   bc242:	f04c 0c02 	orrcs.w	ip, ip, #2
   bc246:	fa43 f305 	asr.w	r3, r3, r5
   bc24a:	18c0      	adds	r0, r0, r3
   bc24c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bc250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bc254:	d507      	bpl.n	bc266 <__adddf3+0xe6>
   bc256:	f04f 0e00 	mov.w	lr, #0
   bc25a:	f1dc 0c00 	rsbs	ip, ip, #0
   bc25e:	eb7e 0000 	sbcs.w	r0, lr, r0
   bc262:	eb6e 0101 	sbc.w	r1, lr, r1
   bc266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bc26a:	d31b      	bcc.n	bc2a4 <__adddf3+0x124>
   bc26c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bc270:	d30c      	bcc.n	bc28c <__adddf3+0x10c>
   bc272:	0849      	lsrs	r1, r1, #1
   bc274:	ea5f 0030 	movs.w	r0, r0, rrx
   bc278:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bc27c:	f104 0401 	add.w	r4, r4, #1
   bc280:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bc284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bc288:	f080 809a 	bcs.w	bc3c0 <__adddf3+0x240>
   bc28c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bc290:	bf08      	it	eq
   bc292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bc296:	f150 0000 	adcs.w	r0, r0, #0
   bc29a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bc29e:	ea41 0105 	orr.w	r1, r1, r5
   bc2a2:	bd30      	pop	{r4, r5, pc}
   bc2a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bc2a8:	4140      	adcs	r0, r0
   bc2aa:	eb41 0101 	adc.w	r1, r1, r1
   bc2ae:	3c01      	subs	r4, #1
   bc2b0:	bf28      	it	cs
   bc2b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bc2b6:	d2e9      	bcs.n	bc28c <__adddf3+0x10c>
   bc2b8:	f091 0f00 	teq	r1, #0
   bc2bc:	bf04      	itt	eq
   bc2be:	4601      	moveq	r1, r0
   bc2c0:	2000      	moveq	r0, #0
   bc2c2:	fab1 f381 	clz	r3, r1
   bc2c6:	bf08      	it	eq
   bc2c8:	3320      	addeq	r3, #32
   bc2ca:	f1a3 030b 	sub.w	r3, r3, #11
   bc2ce:	f1b3 0220 	subs.w	r2, r3, #32
   bc2d2:	da0c      	bge.n	bc2ee <__adddf3+0x16e>
   bc2d4:	320c      	adds	r2, #12
   bc2d6:	dd08      	ble.n	bc2ea <__adddf3+0x16a>
   bc2d8:	f102 0c14 	add.w	ip, r2, #20
   bc2dc:	f1c2 020c 	rsb	r2, r2, #12
   bc2e0:	fa01 f00c 	lsl.w	r0, r1, ip
   bc2e4:	fa21 f102 	lsr.w	r1, r1, r2
   bc2e8:	e00c      	b.n	bc304 <__adddf3+0x184>
   bc2ea:	f102 0214 	add.w	r2, r2, #20
   bc2ee:	bfd8      	it	le
   bc2f0:	f1c2 0c20 	rsble	ip, r2, #32
   bc2f4:	fa01 f102 	lsl.w	r1, r1, r2
   bc2f8:	fa20 fc0c 	lsr.w	ip, r0, ip
   bc2fc:	bfdc      	itt	le
   bc2fe:	ea41 010c 	orrle.w	r1, r1, ip
   bc302:	4090      	lslle	r0, r2
   bc304:	1ae4      	subs	r4, r4, r3
   bc306:	bfa2      	ittt	ge
   bc308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bc30c:	4329      	orrge	r1, r5
   bc30e:	bd30      	popge	{r4, r5, pc}
   bc310:	ea6f 0404 	mvn.w	r4, r4
   bc314:	3c1f      	subs	r4, #31
   bc316:	da1c      	bge.n	bc352 <__adddf3+0x1d2>
   bc318:	340c      	adds	r4, #12
   bc31a:	dc0e      	bgt.n	bc33a <__adddf3+0x1ba>
   bc31c:	f104 0414 	add.w	r4, r4, #20
   bc320:	f1c4 0220 	rsb	r2, r4, #32
   bc324:	fa20 f004 	lsr.w	r0, r0, r4
   bc328:	fa01 f302 	lsl.w	r3, r1, r2
   bc32c:	ea40 0003 	orr.w	r0, r0, r3
   bc330:	fa21 f304 	lsr.w	r3, r1, r4
   bc334:	ea45 0103 	orr.w	r1, r5, r3
   bc338:	bd30      	pop	{r4, r5, pc}
   bc33a:	f1c4 040c 	rsb	r4, r4, #12
   bc33e:	f1c4 0220 	rsb	r2, r4, #32
   bc342:	fa20 f002 	lsr.w	r0, r0, r2
   bc346:	fa01 f304 	lsl.w	r3, r1, r4
   bc34a:	ea40 0003 	orr.w	r0, r0, r3
   bc34e:	4629      	mov	r1, r5
   bc350:	bd30      	pop	{r4, r5, pc}
   bc352:	fa21 f004 	lsr.w	r0, r1, r4
   bc356:	4629      	mov	r1, r5
   bc358:	bd30      	pop	{r4, r5, pc}
   bc35a:	f094 0f00 	teq	r4, #0
   bc35e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bc362:	bf06      	itte	eq
   bc364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bc368:	3401      	addeq	r4, #1
   bc36a:	3d01      	subne	r5, #1
   bc36c:	e74e      	b.n	bc20c <__adddf3+0x8c>
   bc36e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bc372:	bf18      	it	ne
   bc374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bc378:	d029      	beq.n	bc3ce <__adddf3+0x24e>
   bc37a:	ea94 0f05 	teq	r4, r5
   bc37e:	bf08      	it	eq
   bc380:	ea90 0f02 	teqeq	r0, r2
   bc384:	d005      	beq.n	bc392 <__adddf3+0x212>
   bc386:	ea54 0c00 	orrs.w	ip, r4, r0
   bc38a:	bf04      	itt	eq
   bc38c:	4619      	moveq	r1, r3
   bc38e:	4610      	moveq	r0, r2
   bc390:	bd30      	pop	{r4, r5, pc}
   bc392:	ea91 0f03 	teq	r1, r3
   bc396:	bf1e      	ittt	ne
   bc398:	2100      	movne	r1, #0
   bc39a:	2000      	movne	r0, #0
   bc39c:	bd30      	popne	{r4, r5, pc}
   bc39e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bc3a2:	d105      	bne.n	bc3b0 <__adddf3+0x230>
   bc3a4:	0040      	lsls	r0, r0, #1
   bc3a6:	4149      	adcs	r1, r1
   bc3a8:	bf28      	it	cs
   bc3aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bc3ae:	bd30      	pop	{r4, r5, pc}
   bc3b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bc3b4:	bf3c      	itt	cc
   bc3b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bc3ba:	bd30      	popcc	{r4, r5, pc}
   bc3bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bc3c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bc3c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bc3c8:	f04f 0000 	mov.w	r0, #0
   bc3cc:	bd30      	pop	{r4, r5, pc}
   bc3ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bc3d2:	bf1a      	itte	ne
   bc3d4:	4619      	movne	r1, r3
   bc3d6:	4610      	movne	r0, r2
   bc3d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bc3dc:	bf1c      	itt	ne
   bc3de:	460b      	movne	r3, r1
   bc3e0:	4602      	movne	r2, r0
   bc3e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bc3e6:	bf06      	itte	eq
   bc3e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bc3ec:	ea91 0f03 	teqeq	r1, r3
   bc3f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bc3f4:	bd30      	pop	{r4, r5, pc}
   bc3f6:	bf00      	nop

000bc3f8 <__aeabi_ui2d>:
   bc3f8:	f090 0f00 	teq	r0, #0
   bc3fc:	bf04      	itt	eq
   bc3fe:	2100      	moveq	r1, #0
   bc400:	4770      	bxeq	lr
   bc402:	b530      	push	{r4, r5, lr}
   bc404:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bc408:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bc40c:	f04f 0500 	mov.w	r5, #0
   bc410:	f04f 0100 	mov.w	r1, #0
   bc414:	e750      	b.n	bc2b8 <__adddf3+0x138>
   bc416:	bf00      	nop

000bc418 <__aeabi_i2d>:
   bc418:	f090 0f00 	teq	r0, #0
   bc41c:	bf04      	itt	eq
   bc41e:	2100      	moveq	r1, #0
   bc420:	4770      	bxeq	lr
   bc422:	b530      	push	{r4, r5, lr}
   bc424:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bc428:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bc42c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bc430:	bf48      	it	mi
   bc432:	4240      	negmi	r0, r0
   bc434:	f04f 0100 	mov.w	r1, #0
   bc438:	e73e      	b.n	bc2b8 <__adddf3+0x138>
   bc43a:	bf00      	nop

000bc43c <__aeabi_f2d>:
   bc43c:	0042      	lsls	r2, r0, #1
   bc43e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bc442:	ea4f 0131 	mov.w	r1, r1, rrx
   bc446:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bc44a:	bf1f      	itttt	ne
   bc44c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bc450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bc454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bc458:	4770      	bxne	lr
   bc45a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bc45e:	bf08      	it	eq
   bc460:	4770      	bxeq	lr
   bc462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bc466:	bf04      	itt	eq
   bc468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bc46c:	4770      	bxeq	lr
   bc46e:	b530      	push	{r4, r5, lr}
   bc470:	f44f 7460 	mov.w	r4, #896	; 0x380
   bc474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bc478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bc47c:	e71c      	b.n	bc2b8 <__adddf3+0x138>
   bc47e:	bf00      	nop

000bc480 <__aeabi_ul2d>:
   bc480:	ea50 0201 	orrs.w	r2, r0, r1
   bc484:	bf08      	it	eq
   bc486:	4770      	bxeq	lr
   bc488:	b530      	push	{r4, r5, lr}
   bc48a:	f04f 0500 	mov.w	r5, #0
   bc48e:	e00a      	b.n	bc4a6 <__aeabi_l2d+0x16>

000bc490 <__aeabi_l2d>:
   bc490:	ea50 0201 	orrs.w	r2, r0, r1
   bc494:	bf08      	it	eq
   bc496:	4770      	bxeq	lr
   bc498:	b530      	push	{r4, r5, lr}
   bc49a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bc49e:	d502      	bpl.n	bc4a6 <__aeabi_l2d+0x16>
   bc4a0:	4240      	negs	r0, r0
   bc4a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bc4a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bc4aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bc4ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bc4b2:	f43f aed8 	beq.w	bc266 <__adddf3+0xe6>
   bc4b6:	f04f 0203 	mov.w	r2, #3
   bc4ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bc4be:	bf18      	it	ne
   bc4c0:	3203      	addne	r2, #3
   bc4c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bc4c6:	bf18      	it	ne
   bc4c8:	3203      	addne	r2, #3
   bc4ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bc4ce:	f1c2 0320 	rsb	r3, r2, #32
   bc4d2:	fa00 fc03 	lsl.w	ip, r0, r3
   bc4d6:	fa20 f002 	lsr.w	r0, r0, r2
   bc4da:	fa01 fe03 	lsl.w	lr, r1, r3
   bc4de:	ea40 000e 	orr.w	r0, r0, lr
   bc4e2:	fa21 f102 	lsr.w	r1, r1, r2
   bc4e6:	4414      	add	r4, r2
   bc4e8:	e6bd      	b.n	bc266 <__adddf3+0xe6>
   bc4ea:	bf00      	nop

000bc4ec <__aeabi_dmul>:
   bc4ec:	b570      	push	{r4, r5, r6, lr}
   bc4ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bc4f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bc4f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bc4fa:	bf1d      	ittte	ne
   bc4fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bc500:	ea94 0f0c 	teqne	r4, ip
   bc504:	ea95 0f0c 	teqne	r5, ip
   bc508:	f000 f8de 	bleq	bc6c8 <__aeabi_dmul+0x1dc>
   bc50c:	442c      	add	r4, r5
   bc50e:	ea81 0603 	eor.w	r6, r1, r3
   bc512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bc516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bc51a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bc51e:	bf18      	it	ne
   bc520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bc524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bc528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bc52c:	d038      	beq.n	bc5a0 <__aeabi_dmul+0xb4>
   bc52e:	fba0 ce02 	umull	ip, lr, r0, r2
   bc532:	f04f 0500 	mov.w	r5, #0
   bc536:	fbe1 e502 	umlal	lr, r5, r1, r2
   bc53a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bc53e:	fbe0 e503 	umlal	lr, r5, r0, r3
   bc542:	f04f 0600 	mov.w	r6, #0
   bc546:	fbe1 5603 	umlal	r5, r6, r1, r3
   bc54a:	f09c 0f00 	teq	ip, #0
   bc54e:	bf18      	it	ne
   bc550:	f04e 0e01 	orrne.w	lr, lr, #1
   bc554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bc558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bc55c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bc560:	d204      	bcs.n	bc56c <__aeabi_dmul+0x80>
   bc562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bc566:	416d      	adcs	r5, r5
   bc568:	eb46 0606 	adc.w	r6, r6, r6
   bc56c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bc570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bc574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bc578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bc57c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bc580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bc584:	bf88      	it	hi
   bc586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bc58a:	d81e      	bhi.n	bc5ca <__aeabi_dmul+0xde>
   bc58c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bc590:	bf08      	it	eq
   bc592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bc596:	f150 0000 	adcs.w	r0, r0, #0
   bc59a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bc59e:	bd70      	pop	{r4, r5, r6, pc}
   bc5a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bc5a4:	ea46 0101 	orr.w	r1, r6, r1
   bc5a8:	ea40 0002 	orr.w	r0, r0, r2
   bc5ac:	ea81 0103 	eor.w	r1, r1, r3
   bc5b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bc5b4:	bfc2      	ittt	gt
   bc5b6:	ebd4 050c 	rsbsgt	r5, r4, ip
   bc5ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bc5be:	bd70      	popgt	{r4, r5, r6, pc}
   bc5c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bc5c4:	f04f 0e00 	mov.w	lr, #0
   bc5c8:	3c01      	subs	r4, #1
   bc5ca:	f300 80ab 	bgt.w	bc724 <__aeabi_dmul+0x238>
   bc5ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bc5d2:	bfde      	ittt	le
   bc5d4:	2000      	movle	r0, #0
   bc5d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bc5da:	bd70      	pople	{r4, r5, r6, pc}
   bc5dc:	f1c4 0400 	rsb	r4, r4, #0
   bc5e0:	3c20      	subs	r4, #32
   bc5e2:	da35      	bge.n	bc650 <__aeabi_dmul+0x164>
   bc5e4:	340c      	adds	r4, #12
   bc5e6:	dc1b      	bgt.n	bc620 <__aeabi_dmul+0x134>
   bc5e8:	f104 0414 	add.w	r4, r4, #20
   bc5ec:	f1c4 0520 	rsb	r5, r4, #32
   bc5f0:	fa00 f305 	lsl.w	r3, r0, r5
   bc5f4:	fa20 f004 	lsr.w	r0, r0, r4
   bc5f8:	fa01 f205 	lsl.w	r2, r1, r5
   bc5fc:	ea40 0002 	orr.w	r0, r0, r2
   bc600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bc604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bc608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bc60c:	fa21 f604 	lsr.w	r6, r1, r4
   bc610:	eb42 0106 	adc.w	r1, r2, r6
   bc614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bc618:	bf08      	it	eq
   bc61a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bc61e:	bd70      	pop	{r4, r5, r6, pc}
   bc620:	f1c4 040c 	rsb	r4, r4, #12
   bc624:	f1c4 0520 	rsb	r5, r4, #32
   bc628:	fa00 f304 	lsl.w	r3, r0, r4
   bc62c:	fa20 f005 	lsr.w	r0, r0, r5
   bc630:	fa01 f204 	lsl.w	r2, r1, r4
   bc634:	ea40 0002 	orr.w	r0, r0, r2
   bc638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bc63c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bc640:	f141 0100 	adc.w	r1, r1, #0
   bc644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bc648:	bf08      	it	eq
   bc64a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bc64e:	bd70      	pop	{r4, r5, r6, pc}
   bc650:	f1c4 0520 	rsb	r5, r4, #32
   bc654:	fa00 f205 	lsl.w	r2, r0, r5
   bc658:	ea4e 0e02 	orr.w	lr, lr, r2
   bc65c:	fa20 f304 	lsr.w	r3, r0, r4
   bc660:	fa01 f205 	lsl.w	r2, r1, r5
   bc664:	ea43 0302 	orr.w	r3, r3, r2
   bc668:	fa21 f004 	lsr.w	r0, r1, r4
   bc66c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bc670:	fa21 f204 	lsr.w	r2, r1, r4
   bc674:	ea20 0002 	bic.w	r0, r0, r2
   bc678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bc67c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bc680:	bf08      	it	eq
   bc682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bc686:	bd70      	pop	{r4, r5, r6, pc}
   bc688:	f094 0f00 	teq	r4, #0
   bc68c:	d10f      	bne.n	bc6ae <__aeabi_dmul+0x1c2>
   bc68e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bc692:	0040      	lsls	r0, r0, #1
   bc694:	eb41 0101 	adc.w	r1, r1, r1
   bc698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bc69c:	bf08      	it	eq
   bc69e:	3c01      	subeq	r4, #1
   bc6a0:	d0f7      	beq.n	bc692 <__aeabi_dmul+0x1a6>
   bc6a2:	ea41 0106 	orr.w	r1, r1, r6
   bc6a6:	f095 0f00 	teq	r5, #0
   bc6aa:	bf18      	it	ne
   bc6ac:	4770      	bxne	lr
   bc6ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bc6b2:	0052      	lsls	r2, r2, #1
   bc6b4:	eb43 0303 	adc.w	r3, r3, r3
   bc6b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bc6bc:	bf08      	it	eq
   bc6be:	3d01      	subeq	r5, #1
   bc6c0:	d0f7      	beq.n	bc6b2 <__aeabi_dmul+0x1c6>
   bc6c2:	ea43 0306 	orr.w	r3, r3, r6
   bc6c6:	4770      	bx	lr
   bc6c8:	ea94 0f0c 	teq	r4, ip
   bc6cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bc6d0:	bf18      	it	ne
   bc6d2:	ea95 0f0c 	teqne	r5, ip
   bc6d6:	d00c      	beq.n	bc6f2 <__aeabi_dmul+0x206>
   bc6d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bc6dc:	bf18      	it	ne
   bc6de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bc6e2:	d1d1      	bne.n	bc688 <__aeabi_dmul+0x19c>
   bc6e4:	ea81 0103 	eor.w	r1, r1, r3
   bc6e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bc6ec:	f04f 0000 	mov.w	r0, #0
   bc6f0:	bd70      	pop	{r4, r5, r6, pc}
   bc6f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bc6f6:	bf06      	itte	eq
   bc6f8:	4610      	moveq	r0, r2
   bc6fa:	4619      	moveq	r1, r3
   bc6fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bc700:	d019      	beq.n	bc736 <__aeabi_dmul+0x24a>
   bc702:	ea94 0f0c 	teq	r4, ip
   bc706:	d102      	bne.n	bc70e <__aeabi_dmul+0x222>
   bc708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bc70c:	d113      	bne.n	bc736 <__aeabi_dmul+0x24a>
   bc70e:	ea95 0f0c 	teq	r5, ip
   bc712:	d105      	bne.n	bc720 <__aeabi_dmul+0x234>
   bc714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bc718:	bf1c      	itt	ne
   bc71a:	4610      	movne	r0, r2
   bc71c:	4619      	movne	r1, r3
   bc71e:	d10a      	bne.n	bc736 <__aeabi_dmul+0x24a>
   bc720:	ea81 0103 	eor.w	r1, r1, r3
   bc724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bc728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bc72c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bc730:	f04f 0000 	mov.w	r0, #0
   bc734:	bd70      	pop	{r4, r5, r6, pc}
   bc736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bc73a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bc73e:	bd70      	pop	{r4, r5, r6, pc}

000bc740 <__aeabi_ddiv>:
   bc740:	b570      	push	{r4, r5, r6, lr}
   bc742:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bc746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bc74a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bc74e:	bf1d      	ittte	ne
   bc750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bc754:	ea94 0f0c 	teqne	r4, ip
   bc758:	ea95 0f0c 	teqne	r5, ip
   bc75c:	f000 f8a7 	bleq	bc8ae <__aeabi_ddiv+0x16e>
   bc760:	eba4 0405 	sub.w	r4, r4, r5
   bc764:	ea81 0e03 	eor.w	lr, r1, r3
   bc768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bc76c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bc770:	f000 8088 	beq.w	bc884 <__aeabi_ddiv+0x144>
   bc774:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bc778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bc77c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bc780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bc784:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bc788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bc78c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bc790:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bc794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bc798:	429d      	cmp	r5, r3
   bc79a:	bf08      	it	eq
   bc79c:	4296      	cmpeq	r6, r2
   bc79e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bc7a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bc7a6:	d202      	bcs.n	bc7ae <__aeabi_ddiv+0x6e>
   bc7a8:	085b      	lsrs	r3, r3, #1
   bc7aa:	ea4f 0232 	mov.w	r2, r2, rrx
   bc7ae:	1ab6      	subs	r6, r6, r2
   bc7b0:	eb65 0503 	sbc.w	r5, r5, r3
   bc7b4:	085b      	lsrs	r3, r3, #1
   bc7b6:	ea4f 0232 	mov.w	r2, r2, rrx
   bc7ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bc7be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bc7c2:	ebb6 0e02 	subs.w	lr, r6, r2
   bc7c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   bc7ca:	bf22      	ittt	cs
   bc7cc:	1ab6      	subcs	r6, r6, r2
   bc7ce:	4675      	movcs	r5, lr
   bc7d0:	ea40 000c 	orrcs.w	r0, r0, ip
   bc7d4:	085b      	lsrs	r3, r3, #1
   bc7d6:	ea4f 0232 	mov.w	r2, r2, rrx
   bc7da:	ebb6 0e02 	subs.w	lr, r6, r2
   bc7de:	eb75 0e03 	sbcs.w	lr, r5, r3
   bc7e2:	bf22      	ittt	cs
   bc7e4:	1ab6      	subcs	r6, r6, r2
   bc7e6:	4675      	movcs	r5, lr
   bc7e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bc7ec:	085b      	lsrs	r3, r3, #1
   bc7ee:	ea4f 0232 	mov.w	r2, r2, rrx
   bc7f2:	ebb6 0e02 	subs.w	lr, r6, r2
   bc7f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   bc7fa:	bf22      	ittt	cs
   bc7fc:	1ab6      	subcs	r6, r6, r2
   bc7fe:	4675      	movcs	r5, lr
   bc800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bc804:	085b      	lsrs	r3, r3, #1
   bc806:	ea4f 0232 	mov.w	r2, r2, rrx
   bc80a:	ebb6 0e02 	subs.w	lr, r6, r2
   bc80e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bc812:	bf22      	ittt	cs
   bc814:	1ab6      	subcs	r6, r6, r2
   bc816:	4675      	movcs	r5, lr
   bc818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bc81c:	ea55 0e06 	orrs.w	lr, r5, r6
   bc820:	d018      	beq.n	bc854 <__aeabi_ddiv+0x114>
   bc822:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bc826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bc82a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bc82e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bc832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bc836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bc83a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bc83e:	d1c0      	bne.n	bc7c2 <__aeabi_ddiv+0x82>
   bc840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bc844:	d10b      	bne.n	bc85e <__aeabi_ddiv+0x11e>
   bc846:	ea41 0100 	orr.w	r1, r1, r0
   bc84a:	f04f 0000 	mov.w	r0, #0
   bc84e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bc852:	e7b6      	b.n	bc7c2 <__aeabi_ddiv+0x82>
   bc854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bc858:	bf04      	itt	eq
   bc85a:	4301      	orreq	r1, r0
   bc85c:	2000      	moveq	r0, #0
   bc85e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bc862:	bf88      	it	hi
   bc864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bc868:	f63f aeaf 	bhi.w	bc5ca <__aeabi_dmul+0xde>
   bc86c:	ebb5 0c03 	subs.w	ip, r5, r3
   bc870:	bf04      	itt	eq
   bc872:	ebb6 0c02 	subseq.w	ip, r6, r2
   bc876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bc87a:	f150 0000 	adcs.w	r0, r0, #0
   bc87e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bc882:	bd70      	pop	{r4, r5, r6, pc}
   bc884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bc888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bc88c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bc890:	bfc2      	ittt	gt
   bc892:	ebd4 050c 	rsbsgt	r5, r4, ip
   bc896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bc89a:	bd70      	popgt	{r4, r5, r6, pc}
   bc89c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bc8a0:	f04f 0e00 	mov.w	lr, #0
   bc8a4:	3c01      	subs	r4, #1
   bc8a6:	e690      	b.n	bc5ca <__aeabi_dmul+0xde>
   bc8a8:	ea45 0e06 	orr.w	lr, r5, r6
   bc8ac:	e68d      	b.n	bc5ca <__aeabi_dmul+0xde>
   bc8ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bc8b2:	ea94 0f0c 	teq	r4, ip
   bc8b6:	bf08      	it	eq
   bc8b8:	ea95 0f0c 	teqeq	r5, ip
   bc8bc:	f43f af3b 	beq.w	bc736 <__aeabi_dmul+0x24a>
   bc8c0:	ea94 0f0c 	teq	r4, ip
   bc8c4:	d10a      	bne.n	bc8dc <__aeabi_ddiv+0x19c>
   bc8c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bc8ca:	f47f af34 	bne.w	bc736 <__aeabi_dmul+0x24a>
   bc8ce:	ea95 0f0c 	teq	r5, ip
   bc8d2:	f47f af25 	bne.w	bc720 <__aeabi_dmul+0x234>
   bc8d6:	4610      	mov	r0, r2
   bc8d8:	4619      	mov	r1, r3
   bc8da:	e72c      	b.n	bc736 <__aeabi_dmul+0x24a>
   bc8dc:	ea95 0f0c 	teq	r5, ip
   bc8e0:	d106      	bne.n	bc8f0 <__aeabi_ddiv+0x1b0>
   bc8e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bc8e6:	f43f aefd 	beq.w	bc6e4 <__aeabi_dmul+0x1f8>
   bc8ea:	4610      	mov	r0, r2
   bc8ec:	4619      	mov	r1, r3
   bc8ee:	e722      	b.n	bc736 <__aeabi_dmul+0x24a>
   bc8f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bc8f4:	bf18      	it	ne
   bc8f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bc8fa:	f47f aec5 	bne.w	bc688 <__aeabi_dmul+0x19c>
   bc8fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bc902:	f47f af0d 	bne.w	bc720 <__aeabi_dmul+0x234>
   bc906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bc90a:	f47f aeeb 	bne.w	bc6e4 <__aeabi_dmul+0x1f8>
   bc90e:	e712      	b.n	bc736 <__aeabi_dmul+0x24a>

000bc910 <__gedf2>:
   bc910:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bc914:	e006      	b.n	bc924 <__cmpdf2+0x4>
   bc916:	bf00      	nop

000bc918 <__ledf2>:
   bc918:	f04f 0c01 	mov.w	ip, #1
   bc91c:	e002      	b.n	bc924 <__cmpdf2+0x4>
   bc91e:	bf00      	nop

000bc920 <__cmpdf2>:
   bc920:	f04f 0c01 	mov.w	ip, #1
   bc924:	f84d cd04 	str.w	ip, [sp, #-4]!
   bc928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bc92c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bc934:	bf18      	it	ne
   bc936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bc93a:	d01b      	beq.n	bc974 <__cmpdf2+0x54>
   bc93c:	b001      	add	sp, #4
   bc93e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bc942:	bf0c      	ite	eq
   bc944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bc948:	ea91 0f03 	teqne	r1, r3
   bc94c:	bf02      	ittt	eq
   bc94e:	ea90 0f02 	teqeq	r0, r2
   bc952:	2000      	moveq	r0, #0
   bc954:	4770      	bxeq	lr
   bc956:	f110 0f00 	cmn.w	r0, #0
   bc95a:	ea91 0f03 	teq	r1, r3
   bc95e:	bf58      	it	pl
   bc960:	4299      	cmppl	r1, r3
   bc962:	bf08      	it	eq
   bc964:	4290      	cmpeq	r0, r2
   bc966:	bf2c      	ite	cs
   bc968:	17d8      	asrcs	r0, r3, #31
   bc96a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bc96e:	f040 0001 	orr.w	r0, r0, #1
   bc972:	4770      	bx	lr
   bc974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bc978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc97c:	d102      	bne.n	bc984 <__cmpdf2+0x64>
   bc97e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bc982:	d107      	bne.n	bc994 <__cmpdf2+0x74>
   bc984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bc988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc98c:	d1d6      	bne.n	bc93c <__cmpdf2+0x1c>
   bc98e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bc992:	d0d3      	beq.n	bc93c <__cmpdf2+0x1c>
   bc994:	f85d 0b04 	ldr.w	r0, [sp], #4
   bc998:	4770      	bx	lr
   bc99a:	bf00      	nop

000bc99c <__aeabi_cdrcmple>:
   bc99c:	4684      	mov	ip, r0
   bc99e:	4610      	mov	r0, r2
   bc9a0:	4662      	mov	r2, ip
   bc9a2:	468c      	mov	ip, r1
   bc9a4:	4619      	mov	r1, r3
   bc9a6:	4663      	mov	r3, ip
   bc9a8:	e000      	b.n	bc9ac <__aeabi_cdcmpeq>
   bc9aa:	bf00      	nop

000bc9ac <__aeabi_cdcmpeq>:
   bc9ac:	b501      	push	{r0, lr}
   bc9ae:	f7ff ffb7 	bl	bc920 <__cmpdf2>
   bc9b2:	2800      	cmp	r0, #0
   bc9b4:	bf48      	it	mi
   bc9b6:	f110 0f00 	cmnmi.w	r0, #0
   bc9ba:	bd01      	pop	{r0, pc}

000bc9bc <__aeabi_dcmpeq>:
   bc9bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc9c0:	f7ff fff4 	bl	bc9ac <__aeabi_cdcmpeq>
   bc9c4:	bf0c      	ite	eq
   bc9c6:	2001      	moveq	r0, #1
   bc9c8:	2000      	movne	r0, #0
   bc9ca:	f85d fb08 	ldr.w	pc, [sp], #8
   bc9ce:	bf00      	nop

000bc9d0 <__aeabi_dcmplt>:
   bc9d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc9d4:	f7ff ffea 	bl	bc9ac <__aeabi_cdcmpeq>
   bc9d8:	bf34      	ite	cc
   bc9da:	2001      	movcc	r0, #1
   bc9dc:	2000      	movcs	r0, #0
   bc9de:	f85d fb08 	ldr.w	pc, [sp], #8
   bc9e2:	bf00      	nop

000bc9e4 <__aeabi_dcmple>:
   bc9e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc9e8:	f7ff ffe0 	bl	bc9ac <__aeabi_cdcmpeq>
   bc9ec:	bf94      	ite	ls
   bc9ee:	2001      	movls	r0, #1
   bc9f0:	2000      	movhi	r0, #0
   bc9f2:	f85d fb08 	ldr.w	pc, [sp], #8
   bc9f6:	bf00      	nop

000bc9f8 <__aeabi_dcmpge>:
   bc9f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc9fc:	f7ff ffce 	bl	bc99c <__aeabi_cdrcmple>
   bca00:	bf94      	ite	ls
   bca02:	2001      	movls	r0, #1
   bca04:	2000      	movhi	r0, #0
   bca06:	f85d fb08 	ldr.w	pc, [sp], #8
   bca0a:	bf00      	nop

000bca0c <__aeabi_dcmpgt>:
   bca0c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bca10:	f7ff ffc4 	bl	bc99c <__aeabi_cdrcmple>
   bca14:	bf34      	ite	cc
   bca16:	2001      	movcc	r0, #1
   bca18:	2000      	movcs	r0, #0
   bca1a:	f85d fb08 	ldr.w	pc, [sp], #8
   bca1e:	bf00      	nop

000bca20 <__aeabi_dcmpun>:
   bca20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bca24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bca28:	d102      	bne.n	bca30 <__aeabi_dcmpun+0x10>
   bca2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bca2e:	d10a      	bne.n	bca46 <__aeabi_dcmpun+0x26>
   bca30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bca34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bca38:	d102      	bne.n	bca40 <__aeabi_dcmpun+0x20>
   bca3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bca3e:	d102      	bne.n	bca46 <__aeabi_dcmpun+0x26>
   bca40:	f04f 0000 	mov.w	r0, #0
   bca44:	4770      	bx	lr
   bca46:	f04f 0001 	mov.w	r0, #1
   bca4a:	4770      	bx	lr

000bca4c <__aeabi_d2uiz>:
   bca4c:	004a      	lsls	r2, r1, #1
   bca4e:	d211      	bcs.n	bca74 <__aeabi_d2uiz+0x28>
   bca50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bca54:	d211      	bcs.n	bca7a <__aeabi_d2uiz+0x2e>
   bca56:	d50d      	bpl.n	bca74 <__aeabi_d2uiz+0x28>
   bca58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bca5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bca60:	d40e      	bmi.n	bca80 <__aeabi_d2uiz+0x34>
   bca62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bca66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bca6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bca6e:	fa23 f002 	lsr.w	r0, r3, r2
   bca72:	4770      	bx	lr
   bca74:	f04f 0000 	mov.w	r0, #0
   bca78:	4770      	bx	lr
   bca7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bca7e:	d102      	bne.n	bca86 <__aeabi_d2uiz+0x3a>
   bca80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bca84:	4770      	bx	lr
   bca86:	f04f 0000 	mov.w	r0, #0
   bca8a:	4770      	bx	lr

000bca8c <__aeabi_d2f>:
   bca8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bca90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bca94:	bf24      	itt	cs
   bca96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bca9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bca9e:	d90d      	bls.n	bcabc <__aeabi_d2f+0x30>
   bcaa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bcaa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bcaa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bcaac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bcab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bcab4:	bf08      	it	eq
   bcab6:	f020 0001 	biceq.w	r0, r0, #1
   bcaba:	4770      	bx	lr
   bcabc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bcac0:	d121      	bne.n	bcb06 <__aeabi_d2f+0x7a>
   bcac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bcac6:	bfbc      	itt	lt
   bcac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bcacc:	4770      	bxlt	lr
   bcace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bcad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bcad6:	f1c2 0218 	rsb	r2, r2, #24
   bcada:	f1c2 0c20 	rsb	ip, r2, #32
   bcade:	fa10 f30c 	lsls.w	r3, r0, ip
   bcae2:	fa20 f002 	lsr.w	r0, r0, r2
   bcae6:	bf18      	it	ne
   bcae8:	f040 0001 	orrne.w	r0, r0, #1
   bcaec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bcaf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bcaf4:	fa03 fc0c 	lsl.w	ip, r3, ip
   bcaf8:	ea40 000c 	orr.w	r0, r0, ip
   bcafc:	fa23 f302 	lsr.w	r3, r3, r2
   bcb00:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bcb04:	e7cc      	b.n	bcaa0 <__aeabi_d2f+0x14>
   bcb06:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bcb0a:	d107      	bne.n	bcb1c <__aeabi_d2f+0x90>
   bcb0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bcb10:	bf1e      	ittt	ne
   bcb12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bcb16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bcb1a:	4770      	bxne	lr
   bcb1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bcb20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bcb24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bcb28:	4770      	bx	lr
   bcb2a:	bf00      	nop

000bcb2c <__aeabi_d2ulz>:
   bcb2c:	b5d0      	push	{r4, r6, r7, lr}
   bcb2e:	4b0c      	ldr	r3, [pc, #48]	; (bcb60 <__aeabi_d2ulz+0x34>)
   bcb30:	2200      	movs	r2, #0
   bcb32:	4606      	mov	r6, r0
   bcb34:	460f      	mov	r7, r1
   bcb36:	f7ff fcd9 	bl	bc4ec <__aeabi_dmul>
   bcb3a:	f7ff ff87 	bl	bca4c <__aeabi_d2uiz>
   bcb3e:	4604      	mov	r4, r0
   bcb40:	f7ff fc5a 	bl	bc3f8 <__aeabi_ui2d>
   bcb44:	4b07      	ldr	r3, [pc, #28]	; (bcb64 <__aeabi_d2ulz+0x38>)
   bcb46:	2200      	movs	r2, #0
   bcb48:	f7ff fcd0 	bl	bc4ec <__aeabi_dmul>
   bcb4c:	4602      	mov	r2, r0
   bcb4e:	460b      	mov	r3, r1
   bcb50:	4630      	mov	r0, r6
   bcb52:	4639      	mov	r1, r7
   bcb54:	f7ff fb12 	bl	bc17c <__aeabi_dsub>
   bcb58:	f7ff ff78 	bl	bca4c <__aeabi_d2uiz>
   bcb5c:	4621      	mov	r1, r4
   bcb5e:	bdd0      	pop	{r4, r6, r7, pc}
   bcb60:	3df00000 	.word	0x3df00000
   bcb64:	41f00000 	.word	0x41f00000

000bcb68 <atexit>:
   bcb68:	2300      	movs	r3, #0
   bcb6a:	4601      	mov	r1, r0
   bcb6c:	461a      	mov	r2, r3
   bcb6e:	4618      	mov	r0, r3
   bcb70:	f000 bfcc 	b.w	bdb0c <__register_exitproc>

000bcb74 <atoi>:
   bcb74:	220a      	movs	r2, #10
   bcb76:	2100      	movs	r1, #0
   bcb78:	f000 bfbe 	b.w	bdaf8 <strtol>

000bcb7c <memcmp>:
   bcb7c:	b510      	push	{r4, lr}
   bcb7e:	3901      	subs	r1, #1
   bcb80:	4402      	add	r2, r0
   bcb82:	4290      	cmp	r0, r2
   bcb84:	d101      	bne.n	bcb8a <memcmp+0xe>
   bcb86:	2000      	movs	r0, #0
   bcb88:	e005      	b.n	bcb96 <memcmp+0x1a>
   bcb8a:	7803      	ldrb	r3, [r0, #0]
   bcb8c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bcb90:	42a3      	cmp	r3, r4
   bcb92:	d001      	beq.n	bcb98 <memcmp+0x1c>
   bcb94:	1b18      	subs	r0, r3, r4
   bcb96:	bd10      	pop	{r4, pc}
   bcb98:	3001      	adds	r0, #1
   bcb9a:	e7f2      	b.n	bcb82 <memcmp+0x6>

000bcb9c <memcpy>:
   bcb9c:	440a      	add	r2, r1
   bcb9e:	4291      	cmp	r1, r2
   bcba0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bcba4:	d100      	bne.n	bcba8 <memcpy+0xc>
   bcba6:	4770      	bx	lr
   bcba8:	b510      	push	{r4, lr}
   bcbaa:	f811 4b01 	ldrb.w	r4, [r1], #1
   bcbae:	f803 4f01 	strb.w	r4, [r3, #1]!
   bcbb2:	4291      	cmp	r1, r2
   bcbb4:	d1f9      	bne.n	bcbaa <memcpy+0xe>
   bcbb6:	bd10      	pop	{r4, pc}

000bcbb8 <memmove>:
   bcbb8:	4288      	cmp	r0, r1
   bcbba:	b510      	push	{r4, lr}
   bcbbc:	eb01 0402 	add.w	r4, r1, r2
   bcbc0:	d902      	bls.n	bcbc8 <memmove+0x10>
   bcbc2:	4284      	cmp	r4, r0
   bcbc4:	4623      	mov	r3, r4
   bcbc6:	d807      	bhi.n	bcbd8 <memmove+0x20>
   bcbc8:	1e43      	subs	r3, r0, #1
   bcbca:	42a1      	cmp	r1, r4
   bcbcc:	d008      	beq.n	bcbe0 <memmove+0x28>
   bcbce:	f811 2b01 	ldrb.w	r2, [r1], #1
   bcbd2:	f803 2f01 	strb.w	r2, [r3, #1]!
   bcbd6:	e7f8      	b.n	bcbca <memmove+0x12>
   bcbd8:	4402      	add	r2, r0
   bcbda:	4601      	mov	r1, r0
   bcbdc:	428a      	cmp	r2, r1
   bcbde:	d100      	bne.n	bcbe2 <memmove+0x2a>
   bcbe0:	bd10      	pop	{r4, pc}
   bcbe2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bcbe6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bcbea:	e7f7      	b.n	bcbdc <memmove+0x24>

000bcbec <memset>:
   bcbec:	4402      	add	r2, r0
   bcbee:	4603      	mov	r3, r0
   bcbf0:	4293      	cmp	r3, r2
   bcbf2:	d100      	bne.n	bcbf6 <memset+0xa>
   bcbf4:	4770      	bx	lr
   bcbf6:	f803 1b01 	strb.w	r1, [r3], #1
   bcbfa:	e7f9      	b.n	bcbf0 <memset+0x4>

000bcbfc <srand>:
   bcbfc:	b538      	push	{r3, r4, r5, lr}
   bcbfe:	4b10      	ldr	r3, [pc, #64]	; (bcc40 <srand+0x44>)
   bcc00:	681d      	ldr	r5, [r3, #0]
   bcc02:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bcc04:	4604      	mov	r4, r0
   bcc06:	b9b3      	cbnz	r3, bcc36 <srand+0x3a>
   bcc08:	2018      	movs	r0, #24
   bcc0a:	f7fc fc5d 	bl	b94c8 <malloc>
   bcc0e:	4602      	mov	r2, r0
   bcc10:	63a8      	str	r0, [r5, #56]	; 0x38
   bcc12:	b920      	cbnz	r0, bcc1e <srand+0x22>
   bcc14:	4b0b      	ldr	r3, [pc, #44]	; (bcc44 <srand+0x48>)
   bcc16:	480c      	ldr	r0, [pc, #48]	; (bcc48 <srand+0x4c>)
   bcc18:	2142      	movs	r1, #66	; 0x42
   bcc1a:	f7fc fc95 	bl	b9548 <__assert_func>
   bcc1e:	490b      	ldr	r1, [pc, #44]	; (bcc4c <srand+0x50>)
   bcc20:	4b0b      	ldr	r3, [pc, #44]	; (bcc50 <srand+0x54>)
   bcc22:	e9c0 1300 	strd	r1, r3, [r0]
   bcc26:	4b0b      	ldr	r3, [pc, #44]	; (bcc54 <srand+0x58>)
   bcc28:	6083      	str	r3, [r0, #8]
   bcc2a:	230b      	movs	r3, #11
   bcc2c:	8183      	strh	r3, [r0, #12]
   bcc2e:	2100      	movs	r1, #0
   bcc30:	2001      	movs	r0, #1
   bcc32:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bcc36:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bcc38:	2200      	movs	r2, #0
   bcc3a:	611c      	str	r4, [r3, #16]
   bcc3c:	615a      	str	r2, [r3, #20]
   bcc3e:	bd38      	pop	{r3, r4, r5, pc}
   bcc40:	20035060 	.word	0x20035060
   bcc44:	000bf7bd 	.word	0x000bf7bd
   bcc48:	000bf7d4 	.word	0x000bf7d4
   bcc4c:	abcd330e 	.word	0xabcd330e
   bcc50:	e66d1234 	.word	0xe66d1234
   bcc54:	0005deec 	.word	0x0005deec

000bcc58 <strcmp>:
   bcc58:	f810 2b01 	ldrb.w	r2, [r0], #1
   bcc5c:	f811 3b01 	ldrb.w	r3, [r1], #1
   bcc60:	2a01      	cmp	r2, #1
   bcc62:	bf28      	it	cs
   bcc64:	429a      	cmpcs	r2, r3
   bcc66:	d0f7      	beq.n	bcc58 <strcmp>
   bcc68:	1ad0      	subs	r0, r2, r3
   bcc6a:	4770      	bx	lr

000bcc6c <strcpy>:
   bcc6c:	4603      	mov	r3, r0
   bcc6e:	f811 2b01 	ldrb.w	r2, [r1], #1
   bcc72:	f803 2b01 	strb.w	r2, [r3], #1
   bcc76:	2a00      	cmp	r2, #0
   bcc78:	d1f9      	bne.n	bcc6e <strcpy+0x2>
   bcc7a:	4770      	bx	lr

000bcc7c <strlen>:
   bcc7c:	4603      	mov	r3, r0
   bcc7e:	f813 2b01 	ldrb.w	r2, [r3], #1
   bcc82:	2a00      	cmp	r2, #0
   bcc84:	d1fb      	bne.n	bcc7e <strlen+0x2>
   bcc86:	1a18      	subs	r0, r3, r0
   bcc88:	3801      	subs	r0, #1
   bcc8a:	4770      	bx	lr

000bcc8c <strncmp>:
   bcc8c:	b510      	push	{r4, lr}
   bcc8e:	b17a      	cbz	r2, bccb0 <strncmp+0x24>
   bcc90:	4603      	mov	r3, r0
   bcc92:	3901      	subs	r1, #1
   bcc94:	1884      	adds	r4, r0, r2
   bcc96:	f813 0b01 	ldrb.w	r0, [r3], #1
   bcc9a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bcc9e:	4290      	cmp	r0, r2
   bcca0:	d101      	bne.n	bcca6 <strncmp+0x1a>
   bcca2:	42a3      	cmp	r3, r4
   bcca4:	d101      	bne.n	bccaa <strncmp+0x1e>
   bcca6:	1a80      	subs	r0, r0, r2
   bcca8:	bd10      	pop	{r4, pc}
   bccaa:	2800      	cmp	r0, #0
   bccac:	d1f3      	bne.n	bcc96 <strncmp+0xa>
   bccae:	e7fa      	b.n	bcca6 <strncmp+0x1a>
   bccb0:	4610      	mov	r0, r2
   bccb2:	e7f9      	b.n	bcca8 <strncmp+0x1c>

000bccb4 <strnlen>:
   bccb4:	b510      	push	{r4, lr}
   bccb6:	4602      	mov	r2, r0
   bccb8:	4401      	add	r1, r0
   bccba:	428a      	cmp	r2, r1
   bccbc:	4613      	mov	r3, r2
   bccbe:	d003      	beq.n	bccc8 <strnlen+0x14>
   bccc0:	781c      	ldrb	r4, [r3, #0]
   bccc2:	3201      	adds	r2, #1
   bccc4:	2c00      	cmp	r4, #0
   bccc6:	d1f8      	bne.n	bccba <strnlen+0x6>
   bccc8:	1a18      	subs	r0, r3, r0
   bccca:	bd10      	pop	{r4, pc}

000bcccc <strstr>:
   bcccc:	780a      	ldrb	r2, [r1, #0]
   bccce:	b570      	push	{r4, r5, r6, lr}
   bccd0:	b96a      	cbnz	r2, bccee <strstr+0x22>
   bccd2:	bd70      	pop	{r4, r5, r6, pc}
   bccd4:	429a      	cmp	r2, r3
   bccd6:	d109      	bne.n	bccec <strstr+0x20>
   bccd8:	460c      	mov	r4, r1
   bccda:	4605      	mov	r5, r0
   bccdc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   bcce0:	2b00      	cmp	r3, #0
   bcce2:	d0f6      	beq.n	bccd2 <strstr+0x6>
   bcce4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   bcce8:	429e      	cmp	r6, r3
   bccea:	d0f7      	beq.n	bccdc <strstr+0x10>
   bccec:	3001      	adds	r0, #1
   bccee:	7803      	ldrb	r3, [r0, #0]
   bccf0:	2b00      	cmp	r3, #0
   bccf2:	d1ef      	bne.n	bccd4 <strstr+0x8>
   bccf4:	4618      	mov	r0, r3
   bccf6:	e7ec      	b.n	bccd2 <strstr+0x6>

000bccf8 <sulp>:
   bccf8:	b570      	push	{r4, r5, r6, lr}
   bccfa:	4604      	mov	r4, r0
   bccfc:	460d      	mov	r5, r1
   bccfe:	ec45 4b10 	vmov	d0, r4, r5
   bcd02:	4616      	mov	r6, r2
   bcd04:	f001 fe5c 	bl	be9c0 <__ulp>
   bcd08:	ec51 0b10 	vmov	r0, r1, d0
   bcd0c:	b17e      	cbz	r6, bcd2e <sulp+0x36>
   bcd0e:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bcd12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bcd16:	2b00      	cmp	r3, #0
   bcd18:	dd09      	ble.n	bcd2e <sulp+0x36>
   bcd1a:	051b      	lsls	r3, r3, #20
   bcd1c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bcd20:	2400      	movs	r4, #0
   bcd22:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bcd26:	4622      	mov	r2, r4
   bcd28:	462b      	mov	r3, r5
   bcd2a:	f7ff fbdf 	bl	bc4ec <__aeabi_dmul>
   bcd2e:	bd70      	pop	{r4, r5, r6, pc}

000bcd30 <_strtod_l>:
   bcd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcd34:	ed2d 8b02 	vpush	{d8}
   bcd38:	b09d      	sub	sp, #116	; 0x74
   bcd3a:	461f      	mov	r7, r3
   bcd3c:	2300      	movs	r3, #0
   bcd3e:	9318      	str	r3, [sp, #96]	; 0x60
   bcd40:	4ba2      	ldr	r3, [pc, #648]	; (bcfcc <_strtod_l+0x29c>)
   bcd42:	9213      	str	r2, [sp, #76]	; 0x4c
   bcd44:	681b      	ldr	r3, [r3, #0]
   bcd46:	9305      	str	r3, [sp, #20]
   bcd48:	4604      	mov	r4, r0
   bcd4a:	4618      	mov	r0, r3
   bcd4c:	4688      	mov	r8, r1
   bcd4e:	f7ff ff95 	bl	bcc7c <strlen>
   bcd52:	f04f 0a00 	mov.w	sl, #0
   bcd56:	4605      	mov	r5, r0
   bcd58:	f04f 0b00 	mov.w	fp, #0
   bcd5c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bcd60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bcd62:	781a      	ldrb	r2, [r3, #0]
   bcd64:	2a2b      	cmp	r2, #43	; 0x2b
   bcd66:	d04e      	beq.n	bce06 <_strtod_l+0xd6>
   bcd68:	d83b      	bhi.n	bcde2 <_strtod_l+0xb2>
   bcd6a:	2a0d      	cmp	r2, #13
   bcd6c:	d834      	bhi.n	bcdd8 <_strtod_l+0xa8>
   bcd6e:	2a08      	cmp	r2, #8
   bcd70:	d834      	bhi.n	bcddc <_strtod_l+0xac>
   bcd72:	2a00      	cmp	r2, #0
   bcd74:	d03e      	beq.n	bcdf4 <_strtod_l+0xc4>
   bcd76:	2300      	movs	r3, #0
   bcd78:	930a      	str	r3, [sp, #40]	; 0x28
   bcd7a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bcd7c:	7833      	ldrb	r3, [r6, #0]
   bcd7e:	2b30      	cmp	r3, #48	; 0x30
   bcd80:	f040 80b0 	bne.w	bcee4 <_strtod_l+0x1b4>
   bcd84:	7873      	ldrb	r3, [r6, #1]
   bcd86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bcd8a:	2b58      	cmp	r3, #88	; 0x58
   bcd8c:	d168      	bne.n	bce60 <_strtod_l+0x130>
   bcd8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bcd90:	9301      	str	r3, [sp, #4]
   bcd92:	ab18      	add	r3, sp, #96	; 0x60
   bcd94:	9702      	str	r7, [sp, #8]
   bcd96:	9300      	str	r3, [sp, #0]
   bcd98:	4a8d      	ldr	r2, [pc, #564]	; (bcfd0 <_strtod_l+0x2a0>)
   bcd9a:	ab19      	add	r3, sp, #100	; 0x64
   bcd9c:	a917      	add	r1, sp, #92	; 0x5c
   bcd9e:	4620      	mov	r0, r4
   bcda0:	f000 ff7e 	bl	bdca0 <__gethex>
   bcda4:	f010 0707 	ands.w	r7, r0, #7
   bcda8:	4605      	mov	r5, r0
   bcdaa:	d005      	beq.n	bcdb8 <_strtod_l+0x88>
   bcdac:	2f06      	cmp	r7, #6
   bcdae:	d12c      	bne.n	bce0a <_strtod_l+0xda>
   bcdb0:	3601      	adds	r6, #1
   bcdb2:	2300      	movs	r3, #0
   bcdb4:	9617      	str	r6, [sp, #92]	; 0x5c
   bcdb6:	930a      	str	r3, [sp, #40]	; 0x28
   bcdb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bcdba:	2b00      	cmp	r3, #0
   bcdbc:	f040 8590 	bne.w	bd8e0 <_strtod_l+0xbb0>
   bcdc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bcdc2:	b1eb      	cbz	r3, bce00 <_strtod_l+0xd0>
   bcdc4:	4652      	mov	r2, sl
   bcdc6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bcdca:	ec43 2b10 	vmov	d0, r2, r3
   bcdce:	b01d      	add	sp, #116	; 0x74
   bcdd0:	ecbd 8b02 	vpop	{d8}
   bcdd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bcdd8:	2a20      	cmp	r2, #32
   bcdda:	d1cc      	bne.n	bcd76 <_strtod_l+0x46>
   bcddc:	3301      	adds	r3, #1
   bcdde:	9317      	str	r3, [sp, #92]	; 0x5c
   bcde0:	e7be      	b.n	bcd60 <_strtod_l+0x30>
   bcde2:	2a2d      	cmp	r2, #45	; 0x2d
   bcde4:	d1c7      	bne.n	bcd76 <_strtod_l+0x46>
   bcde6:	2201      	movs	r2, #1
   bcde8:	920a      	str	r2, [sp, #40]	; 0x28
   bcdea:	1c5a      	adds	r2, r3, #1
   bcdec:	9217      	str	r2, [sp, #92]	; 0x5c
   bcdee:	785b      	ldrb	r3, [r3, #1]
   bcdf0:	2b00      	cmp	r3, #0
   bcdf2:	d1c2      	bne.n	bcd7a <_strtod_l+0x4a>
   bcdf4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bcdf6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bcdfa:	2b00      	cmp	r3, #0
   bcdfc:	f040 856e 	bne.w	bd8dc <_strtod_l+0xbac>
   bce00:	4652      	mov	r2, sl
   bce02:	465b      	mov	r3, fp
   bce04:	e7e1      	b.n	bcdca <_strtod_l+0x9a>
   bce06:	2200      	movs	r2, #0
   bce08:	e7ee      	b.n	bcde8 <_strtod_l+0xb8>
   bce0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bce0c:	b13a      	cbz	r2, bce1e <_strtod_l+0xee>
   bce0e:	2135      	movs	r1, #53	; 0x35
   bce10:	a81a      	add	r0, sp, #104	; 0x68
   bce12:	f001 fee0 	bl	bebd6 <__copybits>
   bce16:	9918      	ldr	r1, [sp, #96]	; 0x60
   bce18:	4620      	mov	r0, r4
   bce1a:	f001 fa9f 	bl	be35c <_Bfree>
   bce1e:	3f01      	subs	r7, #1
   bce20:	2f04      	cmp	r7, #4
   bce22:	d806      	bhi.n	bce32 <_strtod_l+0x102>
   bce24:	e8df f007 	tbb	[pc, r7]
   bce28:	1714030a 	.word	0x1714030a
   bce2c:	0a          	.byte	0x0a
   bce2d:	00          	.byte	0x00
   bce2e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bce32:	0728      	lsls	r0, r5, #28
   bce34:	d5c0      	bpl.n	bcdb8 <_strtod_l+0x88>
   bce36:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bce3a:	e7bd      	b.n	bcdb8 <_strtod_l+0x88>
   bce3c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bce40:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bce42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bce46:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bce4a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bce4e:	e7f0      	b.n	bce32 <_strtod_l+0x102>
   bce50:	f8df b180 	ldr.w	fp, [pc, #384]	; bcfd4 <_strtod_l+0x2a4>
   bce54:	e7ed      	b.n	bce32 <_strtod_l+0x102>
   bce56:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bce5a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bce5e:	e7e8      	b.n	bce32 <_strtod_l+0x102>
   bce60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bce62:	1c5a      	adds	r2, r3, #1
   bce64:	9217      	str	r2, [sp, #92]	; 0x5c
   bce66:	785b      	ldrb	r3, [r3, #1]
   bce68:	2b30      	cmp	r3, #48	; 0x30
   bce6a:	d0f9      	beq.n	bce60 <_strtod_l+0x130>
   bce6c:	2b00      	cmp	r3, #0
   bce6e:	d0a3      	beq.n	bcdb8 <_strtod_l+0x88>
   bce70:	2301      	movs	r3, #1
   bce72:	f04f 0900 	mov.w	r9, #0
   bce76:	9304      	str	r3, [sp, #16]
   bce78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bce7a:	9308      	str	r3, [sp, #32]
   bce7c:	f8cd 901c 	str.w	r9, [sp, #28]
   bce80:	464f      	mov	r7, r9
   bce82:	220a      	movs	r2, #10
   bce84:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bce86:	7806      	ldrb	r6, [r0, #0]
   bce88:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bce8c:	b2d9      	uxtb	r1, r3
   bce8e:	2909      	cmp	r1, #9
   bce90:	d92a      	bls.n	bcee8 <_strtod_l+0x1b8>
   bce92:	9905      	ldr	r1, [sp, #20]
   bce94:	462a      	mov	r2, r5
   bce96:	f7ff fef9 	bl	bcc8c <strncmp>
   bce9a:	b398      	cbz	r0, bcf04 <_strtod_l+0x1d4>
   bce9c:	2000      	movs	r0, #0
   bce9e:	4632      	mov	r2, r6
   bcea0:	463d      	mov	r5, r7
   bcea2:	9005      	str	r0, [sp, #20]
   bcea4:	4603      	mov	r3, r0
   bcea6:	2a65      	cmp	r2, #101	; 0x65
   bcea8:	d001      	beq.n	bceae <_strtod_l+0x17e>
   bceaa:	2a45      	cmp	r2, #69	; 0x45
   bceac:	d118      	bne.n	bcee0 <_strtod_l+0x1b0>
   bceae:	b91d      	cbnz	r5, bceb8 <_strtod_l+0x188>
   bceb0:	9a04      	ldr	r2, [sp, #16]
   bceb2:	4302      	orrs	r2, r0
   bceb4:	d09e      	beq.n	bcdf4 <_strtod_l+0xc4>
   bceb6:	2500      	movs	r5, #0
   bceb8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bcebc:	f108 0201 	add.w	r2, r8, #1
   bcec0:	9217      	str	r2, [sp, #92]	; 0x5c
   bcec2:	f898 2001 	ldrb.w	r2, [r8, #1]
   bcec6:	2a2b      	cmp	r2, #43	; 0x2b
   bcec8:	d075      	beq.n	bcfb6 <_strtod_l+0x286>
   bceca:	2a2d      	cmp	r2, #45	; 0x2d
   bcecc:	d07b      	beq.n	bcfc6 <_strtod_l+0x296>
   bcece:	f04f 0c00 	mov.w	ip, #0
   bced2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bced6:	2909      	cmp	r1, #9
   bced8:	f240 8082 	bls.w	bcfe0 <_strtod_l+0x2b0>
   bcedc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bcee0:	2600      	movs	r6, #0
   bcee2:	e09d      	b.n	bd020 <_strtod_l+0x2f0>
   bcee4:	2300      	movs	r3, #0
   bcee6:	e7c4      	b.n	bce72 <_strtod_l+0x142>
   bcee8:	2f08      	cmp	r7, #8
   bceea:	bfd8      	it	le
   bceec:	9907      	ldrle	r1, [sp, #28]
   bceee:	f100 0001 	add.w	r0, r0, #1
   bcef2:	bfda      	itte	le
   bcef4:	fb02 3301 	mlale	r3, r2, r1, r3
   bcef8:	9307      	strle	r3, [sp, #28]
   bcefa:	fb02 3909 	mlagt	r9, r2, r9, r3
   bcefe:	3701      	adds	r7, #1
   bcf00:	9017      	str	r0, [sp, #92]	; 0x5c
   bcf02:	e7bf      	b.n	bce84 <_strtod_l+0x154>
   bcf04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bcf06:	195a      	adds	r2, r3, r5
   bcf08:	9217      	str	r2, [sp, #92]	; 0x5c
   bcf0a:	5d5a      	ldrb	r2, [r3, r5]
   bcf0c:	2f00      	cmp	r7, #0
   bcf0e:	d037      	beq.n	bcf80 <_strtod_l+0x250>
   bcf10:	9005      	str	r0, [sp, #20]
   bcf12:	463d      	mov	r5, r7
   bcf14:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bcf18:	2b09      	cmp	r3, #9
   bcf1a:	d912      	bls.n	bcf42 <_strtod_l+0x212>
   bcf1c:	2301      	movs	r3, #1
   bcf1e:	e7c2      	b.n	bcea6 <_strtod_l+0x176>
   bcf20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bcf22:	1c5a      	adds	r2, r3, #1
   bcf24:	9217      	str	r2, [sp, #92]	; 0x5c
   bcf26:	785a      	ldrb	r2, [r3, #1]
   bcf28:	3001      	adds	r0, #1
   bcf2a:	2a30      	cmp	r2, #48	; 0x30
   bcf2c:	d0f8      	beq.n	bcf20 <_strtod_l+0x1f0>
   bcf2e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bcf32:	2b08      	cmp	r3, #8
   bcf34:	f200 84d9 	bhi.w	bd8ea <_strtod_l+0xbba>
   bcf38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bcf3a:	9005      	str	r0, [sp, #20]
   bcf3c:	2000      	movs	r0, #0
   bcf3e:	9308      	str	r3, [sp, #32]
   bcf40:	4605      	mov	r5, r0
   bcf42:	3a30      	subs	r2, #48	; 0x30
   bcf44:	f100 0301 	add.w	r3, r0, #1
   bcf48:	d014      	beq.n	bcf74 <_strtod_l+0x244>
   bcf4a:	9905      	ldr	r1, [sp, #20]
   bcf4c:	4419      	add	r1, r3
   bcf4e:	9105      	str	r1, [sp, #20]
   bcf50:	462b      	mov	r3, r5
   bcf52:	eb00 0e05 	add.w	lr, r0, r5
   bcf56:	210a      	movs	r1, #10
   bcf58:	4573      	cmp	r3, lr
   bcf5a:	d113      	bne.n	bcf84 <_strtod_l+0x254>
   bcf5c:	182b      	adds	r3, r5, r0
   bcf5e:	2b08      	cmp	r3, #8
   bcf60:	f105 0501 	add.w	r5, r5, #1
   bcf64:	4405      	add	r5, r0
   bcf66:	dc1c      	bgt.n	bcfa2 <_strtod_l+0x272>
   bcf68:	9907      	ldr	r1, [sp, #28]
   bcf6a:	230a      	movs	r3, #10
   bcf6c:	fb03 2301 	mla	r3, r3, r1, r2
   bcf70:	9307      	str	r3, [sp, #28]
   bcf72:	2300      	movs	r3, #0
   bcf74:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bcf76:	1c51      	adds	r1, r2, #1
   bcf78:	9117      	str	r1, [sp, #92]	; 0x5c
   bcf7a:	7852      	ldrb	r2, [r2, #1]
   bcf7c:	4618      	mov	r0, r3
   bcf7e:	e7c9      	b.n	bcf14 <_strtod_l+0x1e4>
   bcf80:	4638      	mov	r0, r7
   bcf82:	e7d2      	b.n	bcf2a <_strtod_l+0x1fa>
   bcf84:	2b08      	cmp	r3, #8
   bcf86:	dc04      	bgt.n	bcf92 <_strtod_l+0x262>
   bcf88:	9e07      	ldr	r6, [sp, #28]
   bcf8a:	434e      	muls	r6, r1
   bcf8c:	9607      	str	r6, [sp, #28]
   bcf8e:	3301      	adds	r3, #1
   bcf90:	e7e2      	b.n	bcf58 <_strtod_l+0x228>
   bcf92:	f103 0c01 	add.w	ip, r3, #1
   bcf96:	f1bc 0f10 	cmp.w	ip, #16
   bcf9a:	bfd8      	it	le
   bcf9c:	fb01 f909 	mulle.w	r9, r1, r9
   bcfa0:	e7f5      	b.n	bcf8e <_strtod_l+0x25e>
   bcfa2:	2d10      	cmp	r5, #16
   bcfa4:	bfdc      	itt	le
   bcfa6:	230a      	movle	r3, #10
   bcfa8:	fb03 2909 	mlale	r9, r3, r9, r2
   bcfac:	e7e1      	b.n	bcf72 <_strtod_l+0x242>
   bcfae:	2300      	movs	r3, #0
   bcfb0:	9305      	str	r3, [sp, #20]
   bcfb2:	2301      	movs	r3, #1
   bcfb4:	e77c      	b.n	bceb0 <_strtod_l+0x180>
   bcfb6:	f04f 0c00 	mov.w	ip, #0
   bcfba:	f108 0202 	add.w	r2, r8, #2
   bcfbe:	9217      	str	r2, [sp, #92]	; 0x5c
   bcfc0:	f898 2002 	ldrb.w	r2, [r8, #2]
   bcfc4:	e785      	b.n	bced2 <_strtod_l+0x1a2>
   bcfc6:	f04f 0c01 	mov.w	ip, #1
   bcfca:	e7f6      	b.n	bcfba <_strtod_l+0x28a>
   bcfcc:	000bfa04 	.word	0x000bfa04
   bcfd0:	000bf83c 	.word	0x000bf83c
   bcfd4:	7ff00000 	.word	0x7ff00000
   bcfd8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bcfda:	1c51      	adds	r1, r2, #1
   bcfdc:	9117      	str	r1, [sp, #92]	; 0x5c
   bcfde:	7852      	ldrb	r2, [r2, #1]
   bcfe0:	2a30      	cmp	r2, #48	; 0x30
   bcfe2:	d0f9      	beq.n	bcfd8 <_strtod_l+0x2a8>
   bcfe4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bcfe8:	2908      	cmp	r1, #8
   bcfea:	f63f af79 	bhi.w	bcee0 <_strtod_l+0x1b0>
   bcfee:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bcff2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bcff4:	9206      	str	r2, [sp, #24]
   bcff6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bcff8:	1c51      	adds	r1, r2, #1
   bcffa:	9117      	str	r1, [sp, #92]	; 0x5c
   bcffc:	7852      	ldrb	r2, [r2, #1]
   bcffe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bd002:	2e09      	cmp	r6, #9
   bd004:	d937      	bls.n	bd076 <_strtod_l+0x346>
   bd006:	9e06      	ldr	r6, [sp, #24]
   bd008:	1b89      	subs	r1, r1, r6
   bd00a:	2908      	cmp	r1, #8
   bd00c:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bd010:	dc02      	bgt.n	bd018 <_strtod_l+0x2e8>
   bd012:	4576      	cmp	r6, lr
   bd014:	bfa8      	it	ge
   bd016:	4676      	movge	r6, lr
   bd018:	f1bc 0f00 	cmp.w	ip, #0
   bd01c:	d000      	beq.n	bd020 <_strtod_l+0x2f0>
   bd01e:	4276      	negs	r6, r6
   bd020:	2d00      	cmp	r5, #0
   bd022:	d14d      	bne.n	bd0c0 <_strtod_l+0x390>
   bd024:	9904      	ldr	r1, [sp, #16]
   bd026:	4301      	orrs	r1, r0
   bd028:	f47f aec6 	bne.w	bcdb8 <_strtod_l+0x88>
   bd02c:	2b00      	cmp	r3, #0
   bd02e:	f47f aee1 	bne.w	bcdf4 <_strtod_l+0xc4>
   bd032:	2a69      	cmp	r2, #105	; 0x69
   bd034:	d027      	beq.n	bd086 <_strtod_l+0x356>
   bd036:	dc24      	bgt.n	bd082 <_strtod_l+0x352>
   bd038:	2a49      	cmp	r2, #73	; 0x49
   bd03a:	d024      	beq.n	bd086 <_strtod_l+0x356>
   bd03c:	2a4e      	cmp	r2, #78	; 0x4e
   bd03e:	f47f aed9 	bne.w	bcdf4 <_strtod_l+0xc4>
   bd042:	499f      	ldr	r1, [pc, #636]	; (bd2c0 <_strtod_l+0x590>)
   bd044:	a817      	add	r0, sp, #92	; 0x5c
   bd046:	f001 f883 	bl	be150 <__match>
   bd04a:	2800      	cmp	r0, #0
   bd04c:	f43f aed2 	beq.w	bcdf4 <_strtod_l+0xc4>
   bd050:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bd052:	781b      	ldrb	r3, [r3, #0]
   bd054:	2b28      	cmp	r3, #40	; 0x28
   bd056:	d12d      	bne.n	bd0b4 <_strtod_l+0x384>
   bd058:	499a      	ldr	r1, [pc, #616]	; (bd2c4 <_strtod_l+0x594>)
   bd05a:	aa1a      	add	r2, sp, #104	; 0x68
   bd05c:	a817      	add	r0, sp, #92	; 0x5c
   bd05e:	f001 f88b 	bl	be178 <__hexnan>
   bd062:	2805      	cmp	r0, #5
   bd064:	d126      	bne.n	bd0b4 <_strtod_l+0x384>
   bd066:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bd068:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bd06c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bd070:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bd074:	e6a0      	b.n	bcdb8 <_strtod_l+0x88>
   bd076:	210a      	movs	r1, #10
   bd078:	fb01 2e0e 	mla	lr, r1, lr, r2
   bd07c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bd080:	e7b9      	b.n	bcff6 <_strtod_l+0x2c6>
   bd082:	2a6e      	cmp	r2, #110	; 0x6e
   bd084:	e7db      	b.n	bd03e <_strtod_l+0x30e>
   bd086:	4990      	ldr	r1, [pc, #576]	; (bd2c8 <_strtod_l+0x598>)
   bd088:	a817      	add	r0, sp, #92	; 0x5c
   bd08a:	f001 f861 	bl	be150 <__match>
   bd08e:	2800      	cmp	r0, #0
   bd090:	f43f aeb0 	beq.w	bcdf4 <_strtod_l+0xc4>
   bd094:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bd096:	498d      	ldr	r1, [pc, #564]	; (bd2cc <_strtod_l+0x59c>)
   bd098:	3b01      	subs	r3, #1
   bd09a:	a817      	add	r0, sp, #92	; 0x5c
   bd09c:	9317      	str	r3, [sp, #92]	; 0x5c
   bd09e:	f001 f857 	bl	be150 <__match>
   bd0a2:	b910      	cbnz	r0, bd0aa <_strtod_l+0x37a>
   bd0a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bd0a6:	3301      	adds	r3, #1
   bd0a8:	9317      	str	r3, [sp, #92]	; 0x5c
   bd0aa:	f8df b230 	ldr.w	fp, [pc, #560]	; bd2dc <_strtod_l+0x5ac>
   bd0ae:	f04f 0a00 	mov.w	sl, #0
   bd0b2:	e681      	b.n	bcdb8 <_strtod_l+0x88>
   bd0b4:	4886      	ldr	r0, [pc, #536]	; (bd2d0 <_strtod_l+0x5a0>)
   bd0b6:	f001 fde3 	bl	bec80 <nan>
   bd0ba:	ec5b ab10 	vmov	sl, fp, d0
   bd0be:	e67b      	b.n	bcdb8 <_strtod_l+0x88>
   bd0c0:	9b05      	ldr	r3, [sp, #20]
   bd0c2:	9807      	ldr	r0, [sp, #28]
   bd0c4:	1af3      	subs	r3, r6, r3
   bd0c6:	2f00      	cmp	r7, #0
   bd0c8:	bf08      	it	eq
   bd0ca:	462f      	moveq	r7, r5
   bd0cc:	2d10      	cmp	r5, #16
   bd0ce:	9306      	str	r3, [sp, #24]
   bd0d0:	46a8      	mov	r8, r5
   bd0d2:	bfa8      	it	ge
   bd0d4:	f04f 0810 	movge.w	r8, #16
   bd0d8:	f7ff f98e 	bl	bc3f8 <__aeabi_ui2d>
   bd0dc:	2d09      	cmp	r5, #9
   bd0de:	4682      	mov	sl, r0
   bd0e0:	468b      	mov	fp, r1
   bd0e2:	dd13      	ble.n	bd10c <_strtod_l+0x3dc>
   bd0e4:	4b7b      	ldr	r3, [pc, #492]	; (bd2d4 <_strtod_l+0x5a4>)
   bd0e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bd0ea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bd0ee:	f7ff f9fd 	bl	bc4ec <__aeabi_dmul>
   bd0f2:	4682      	mov	sl, r0
   bd0f4:	4648      	mov	r0, r9
   bd0f6:	468b      	mov	fp, r1
   bd0f8:	f7ff f97e 	bl	bc3f8 <__aeabi_ui2d>
   bd0fc:	4602      	mov	r2, r0
   bd0fe:	460b      	mov	r3, r1
   bd100:	4650      	mov	r0, sl
   bd102:	4659      	mov	r1, fp
   bd104:	f7ff f83c 	bl	bc180 <__adddf3>
   bd108:	4682      	mov	sl, r0
   bd10a:	468b      	mov	fp, r1
   bd10c:	2d0f      	cmp	r5, #15
   bd10e:	dc38      	bgt.n	bd182 <_strtod_l+0x452>
   bd110:	9b06      	ldr	r3, [sp, #24]
   bd112:	2b00      	cmp	r3, #0
   bd114:	f43f ae50 	beq.w	bcdb8 <_strtod_l+0x88>
   bd118:	dd24      	ble.n	bd164 <_strtod_l+0x434>
   bd11a:	2b16      	cmp	r3, #22
   bd11c:	dc0b      	bgt.n	bd136 <_strtod_l+0x406>
   bd11e:	496d      	ldr	r1, [pc, #436]	; (bd2d4 <_strtod_l+0x5a4>)
   bd120:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bd124:	e9d1 0100 	ldrd	r0, r1, [r1]
   bd128:	4652      	mov	r2, sl
   bd12a:	465b      	mov	r3, fp
   bd12c:	f7ff f9de 	bl	bc4ec <__aeabi_dmul>
   bd130:	4682      	mov	sl, r0
   bd132:	468b      	mov	fp, r1
   bd134:	e640      	b.n	bcdb8 <_strtod_l+0x88>
   bd136:	9a06      	ldr	r2, [sp, #24]
   bd138:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bd13c:	4293      	cmp	r3, r2
   bd13e:	db20      	blt.n	bd182 <_strtod_l+0x452>
   bd140:	4c64      	ldr	r4, [pc, #400]	; (bd2d4 <_strtod_l+0x5a4>)
   bd142:	f1c5 050f 	rsb	r5, r5, #15
   bd146:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bd14a:	4652      	mov	r2, sl
   bd14c:	465b      	mov	r3, fp
   bd14e:	e9d1 0100 	ldrd	r0, r1, [r1]
   bd152:	f7ff f9cb 	bl	bc4ec <__aeabi_dmul>
   bd156:	9b06      	ldr	r3, [sp, #24]
   bd158:	1b5d      	subs	r5, r3, r5
   bd15a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bd15e:	e9d4 2300 	ldrd	r2, r3, [r4]
   bd162:	e7e3      	b.n	bd12c <_strtod_l+0x3fc>
   bd164:	9b06      	ldr	r3, [sp, #24]
   bd166:	3316      	adds	r3, #22
   bd168:	db0b      	blt.n	bd182 <_strtod_l+0x452>
   bd16a:	9b05      	ldr	r3, [sp, #20]
   bd16c:	1b9e      	subs	r6, r3, r6
   bd16e:	4b59      	ldr	r3, [pc, #356]	; (bd2d4 <_strtod_l+0x5a4>)
   bd170:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bd174:	e9d6 2300 	ldrd	r2, r3, [r6]
   bd178:	4650      	mov	r0, sl
   bd17a:	4659      	mov	r1, fp
   bd17c:	f7ff fae0 	bl	bc740 <__aeabi_ddiv>
   bd180:	e7d6      	b.n	bd130 <_strtod_l+0x400>
   bd182:	9b06      	ldr	r3, [sp, #24]
   bd184:	eba5 0808 	sub.w	r8, r5, r8
   bd188:	4498      	add	r8, r3
   bd18a:	f1b8 0f00 	cmp.w	r8, #0
   bd18e:	dd74      	ble.n	bd27a <_strtod_l+0x54a>
   bd190:	f018 030f 	ands.w	r3, r8, #15
   bd194:	d00a      	beq.n	bd1ac <_strtod_l+0x47c>
   bd196:	494f      	ldr	r1, [pc, #316]	; (bd2d4 <_strtod_l+0x5a4>)
   bd198:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bd19c:	4652      	mov	r2, sl
   bd19e:	465b      	mov	r3, fp
   bd1a0:	e9d1 0100 	ldrd	r0, r1, [r1]
   bd1a4:	f7ff f9a2 	bl	bc4ec <__aeabi_dmul>
   bd1a8:	4682      	mov	sl, r0
   bd1aa:	468b      	mov	fp, r1
   bd1ac:	f038 080f 	bics.w	r8, r8, #15
   bd1b0:	d04f      	beq.n	bd252 <_strtod_l+0x522>
   bd1b2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bd1b6:	dd22      	ble.n	bd1fe <_strtod_l+0x4ce>
   bd1b8:	2500      	movs	r5, #0
   bd1ba:	462e      	mov	r6, r5
   bd1bc:	9507      	str	r5, [sp, #28]
   bd1be:	9505      	str	r5, [sp, #20]
   bd1c0:	2322      	movs	r3, #34	; 0x22
   bd1c2:	f8df b118 	ldr.w	fp, [pc, #280]	; bd2dc <_strtod_l+0x5ac>
   bd1c6:	6023      	str	r3, [r4, #0]
   bd1c8:	f04f 0a00 	mov.w	sl, #0
   bd1cc:	9b07      	ldr	r3, [sp, #28]
   bd1ce:	2b00      	cmp	r3, #0
   bd1d0:	f43f adf2 	beq.w	bcdb8 <_strtod_l+0x88>
   bd1d4:	9918      	ldr	r1, [sp, #96]	; 0x60
   bd1d6:	4620      	mov	r0, r4
   bd1d8:	f001 f8c0 	bl	be35c <_Bfree>
   bd1dc:	9905      	ldr	r1, [sp, #20]
   bd1de:	4620      	mov	r0, r4
   bd1e0:	f001 f8bc 	bl	be35c <_Bfree>
   bd1e4:	4631      	mov	r1, r6
   bd1e6:	4620      	mov	r0, r4
   bd1e8:	f001 f8b8 	bl	be35c <_Bfree>
   bd1ec:	9907      	ldr	r1, [sp, #28]
   bd1ee:	4620      	mov	r0, r4
   bd1f0:	f001 f8b4 	bl	be35c <_Bfree>
   bd1f4:	4629      	mov	r1, r5
   bd1f6:	4620      	mov	r0, r4
   bd1f8:	f001 f8b0 	bl	be35c <_Bfree>
   bd1fc:	e5dc      	b.n	bcdb8 <_strtod_l+0x88>
   bd1fe:	4b36      	ldr	r3, [pc, #216]	; (bd2d8 <_strtod_l+0x5a8>)
   bd200:	9304      	str	r3, [sp, #16]
   bd202:	2300      	movs	r3, #0
   bd204:	ea4f 1828 	mov.w	r8, r8, asr #4
   bd208:	4650      	mov	r0, sl
   bd20a:	4659      	mov	r1, fp
   bd20c:	4699      	mov	r9, r3
   bd20e:	f1b8 0f01 	cmp.w	r8, #1
   bd212:	dc21      	bgt.n	bd258 <_strtod_l+0x528>
   bd214:	b10b      	cbz	r3, bd21a <_strtod_l+0x4ea>
   bd216:	4682      	mov	sl, r0
   bd218:	468b      	mov	fp, r1
   bd21a:	4b2f      	ldr	r3, [pc, #188]	; (bd2d8 <_strtod_l+0x5a8>)
   bd21c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bd220:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bd224:	4652      	mov	r2, sl
   bd226:	465b      	mov	r3, fp
   bd228:	e9d9 0100 	ldrd	r0, r1, [r9]
   bd22c:	f7ff f95e 	bl	bc4ec <__aeabi_dmul>
   bd230:	4b2a      	ldr	r3, [pc, #168]	; (bd2dc <_strtod_l+0x5ac>)
   bd232:	460a      	mov	r2, r1
   bd234:	400b      	ands	r3, r1
   bd236:	492a      	ldr	r1, [pc, #168]	; (bd2e0 <_strtod_l+0x5b0>)
   bd238:	428b      	cmp	r3, r1
   bd23a:	4682      	mov	sl, r0
   bd23c:	d8bc      	bhi.n	bd1b8 <_strtod_l+0x488>
   bd23e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bd242:	428b      	cmp	r3, r1
   bd244:	bf86      	itte	hi
   bd246:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bd2e4 <_strtod_l+0x5b4>
   bd24a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   bd24e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bd252:	2300      	movs	r3, #0
   bd254:	9304      	str	r3, [sp, #16]
   bd256:	e084      	b.n	bd362 <_strtod_l+0x632>
   bd258:	f018 0f01 	tst.w	r8, #1
   bd25c:	d005      	beq.n	bd26a <_strtod_l+0x53a>
   bd25e:	9b04      	ldr	r3, [sp, #16]
   bd260:	e9d3 2300 	ldrd	r2, r3, [r3]
   bd264:	f7ff f942 	bl	bc4ec <__aeabi_dmul>
   bd268:	2301      	movs	r3, #1
   bd26a:	9a04      	ldr	r2, [sp, #16]
   bd26c:	3208      	adds	r2, #8
   bd26e:	f109 0901 	add.w	r9, r9, #1
   bd272:	ea4f 0868 	mov.w	r8, r8, asr #1
   bd276:	9204      	str	r2, [sp, #16]
   bd278:	e7c9      	b.n	bd20e <_strtod_l+0x4de>
   bd27a:	d0ea      	beq.n	bd252 <_strtod_l+0x522>
   bd27c:	f1c8 0800 	rsb	r8, r8, #0
   bd280:	f018 020f 	ands.w	r2, r8, #15
   bd284:	d00a      	beq.n	bd29c <_strtod_l+0x56c>
   bd286:	4b13      	ldr	r3, [pc, #76]	; (bd2d4 <_strtod_l+0x5a4>)
   bd288:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bd28c:	4650      	mov	r0, sl
   bd28e:	4659      	mov	r1, fp
   bd290:	e9d3 2300 	ldrd	r2, r3, [r3]
   bd294:	f7ff fa54 	bl	bc740 <__aeabi_ddiv>
   bd298:	4682      	mov	sl, r0
   bd29a:	468b      	mov	fp, r1
   bd29c:	ea5f 1828 	movs.w	r8, r8, asr #4
   bd2a0:	d0d7      	beq.n	bd252 <_strtod_l+0x522>
   bd2a2:	f1b8 0f1f 	cmp.w	r8, #31
   bd2a6:	dd1f      	ble.n	bd2e8 <_strtod_l+0x5b8>
   bd2a8:	2500      	movs	r5, #0
   bd2aa:	462e      	mov	r6, r5
   bd2ac:	9507      	str	r5, [sp, #28]
   bd2ae:	9505      	str	r5, [sp, #20]
   bd2b0:	2322      	movs	r3, #34	; 0x22
   bd2b2:	f04f 0a00 	mov.w	sl, #0
   bd2b6:	f04f 0b00 	mov.w	fp, #0
   bd2ba:	6023      	str	r3, [r4, #0]
   bd2bc:	e786      	b.n	bd1cc <_strtod_l+0x49c>
   bd2be:	bf00      	nop
   bd2c0:	000bf836 	.word	0x000bf836
   bd2c4:	000bf850 	.word	0x000bf850
   bd2c8:	000bf82d 	.word	0x000bf82d
   bd2cc:	000bf830 	.word	0x000bf830
   bd2d0:	000bf29a 	.word	0x000bf29a
   bd2d4:	000bfaa0 	.word	0x000bfaa0
   bd2d8:	000bfa78 	.word	0x000bfa78
   bd2dc:	7ff00000 	.word	0x7ff00000
   bd2e0:	7ca00000 	.word	0x7ca00000
   bd2e4:	7fefffff 	.word	0x7fefffff
   bd2e8:	f018 0310 	ands.w	r3, r8, #16
   bd2ec:	bf18      	it	ne
   bd2ee:	236a      	movne	r3, #106	; 0x6a
   bd2f0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bd6a0 <_strtod_l+0x970>
   bd2f4:	9304      	str	r3, [sp, #16]
   bd2f6:	4650      	mov	r0, sl
   bd2f8:	4659      	mov	r1, fp
   bd2fa:	2300      	movs	r3, #0
   bd2fc:	f018 0f01 	tst.w	r8, #1
   bd300:	d004      	beq.n	bd30c <_strtod_l+0x5dc>
   bd302:	e9d9 2300 	ldrd	r2, r3, [r9]
   bd306:	f7ff f8f1 	bl	bc4ec <__aeabi_dmul>
   bd30a:	2301      	movs	r3, #1
   bd30c:	ea5f 0868 	movs.w	r8, r8, asr #1
   bd310:	f109 0908 	add.w	r9, r9, #8
   bd314:	d1f2      	bne.n	bd2fc <_strtod_l+0x5cc>
   bd316:	b10b      	cbz	r3, bd31c <_strtod_l+0x5ec>
   bd318:	4682      	mov	sl, r0
   bd31a:	468b      	mov	fp, r1
   bd31c:	9b04      	ldr	r3, [sp, #16]
   bd31e:	b1c3      	cbz	r3, bd352 <_strtod_l+0x622>
   bd320:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bd324:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bd328:	2b00      	cmp	r3, #0
   bd32a:	4659      	mov	r1, fp
   bd32c:	dd11      	ble.n	bd352 <_strtod_l+0x622>
   bd32e:	2b1f      	cmp	r3, #31
   bd330:	f340 8124 	ble.w	bd57c <_strtod_l+0x84c>
   bd334:	2b34      	cmp	r3, #52	; 0x34
   bd336:	bfde      	ittt	le
   bd338:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bd33c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   bd340:	fa03 f202 	lslle.w	r2, r3, r2
   bd344:	f04f 0a00 	mov.w	sl, #0
   bd348:	bfcc      	ite	gt
   bd34a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bd34e:	ea02 0b01 	andle.w	fp, r2, r1
   bd352:	2200      	movs	r2, #0
   bd354:	2300      	movs	r3, #0
   bd356:	4650      	mov	r0, sl
   bd358:	4659      	mov	r1, fp
   bd35a:	f7ff fb2f 	bl	bc9bc <__aeabi_dcmpeq>
   bd35e:	2800      	cmp	r0, #0
   bd360:	d1a2      	bne.n	bd2a8 <_strtod_l+0x578>
   bd362:	9b07      	ldr	r3, [sp, #28]
   bd364:	9300      	str	r3, [sp, #0]
   bd366:	9908      	ldr	r1, [sp, #32]
   bd368:	462b      	mov	r3, r5
   bd36a:	463a      	mov	r2, r7
   bd36c:	4620      	mov	r0, r4
   bd36e:	f001 f85d 	bl	be42c <__s2b>
   bd372:	9007      	str	r0, [sp, #28]
   bd374:	2800      	cmp	r0, #0
   bd376:	f43f af1f 	beq.w	bd1b8 <_strtod_l+0x488>
   bd37a:	9b05      	ldr	r3, [sp, #20]
   bd37c:	1b9e      	subs	r6, r3, r6
   bd37e:	9b06      	ldr	r3, [sp, #24]
   bd380:	2b00      	cmp	r3, #0
   bd382:	bfb4      	ite	lt
   bd384:	4633      	movlt	r3, r6
   bd386:	2300      	movge	r3, #0
   bd388:	930c      	str	r3, [sp, #48]	; 0x30
   bd38a:	9b06      	ldr	r3, [sp, #24]
   bd38c:	2500      	movs	r5, #0
   bd38e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bd392:	9312      	str	r3, [sp, #72]	; 0x48
   bd394:	462e      	mov	r6, r5
   bd396:	9b07      	ldr	r3, [sp, #28]
   bd398:	4620      	mov	r0, r4
   bd39a:	6859      	ldr	r1, [r3, #4]
   bd39c:	f000 ff9e 	bl	be2dc <_Balloc>
   bd3a0:	9005      	str	r0, [sp, #20]
   bd3a2:	2800      	cmp	r0, #0
   bd3a4:	f43f af0c 	beq.w	bd1c0 <_strtod_l+0x490>
   bd3a8:	9b07      	ldr	r3, [sp, #28]
   bd3aa:	691a      	ldr	r2, [r3, #16]
   bd3ac:	3202      	adds	r2, #2
   bd3ae:	f103 010c 	add.w	r1, r3, #12
   bd3b2:	0092      	lsls	r2, r2, #2
   bd3b4:	300c      	adds	r0, #12
   bd3b6:	f7ff fbf1 	bl	bcb9c <memcpy>
   bd3ba:	ec4b ab10 	vmov	d0, sl, fp
   bd3be:	aa1a      	add	r2, sp, #104	; 0x68
   bd3c0:	a919      	add	r1, sp, #100	; 0x64
   bd3c2:	4620      	mov	r0, r4
   bd3c4:	f001 fb78 	bl	beab8 <__d2b>
   bd3c8:	ec4b ab18 	vmov	d8, sl, fp
   bd3cc:	9018      	str	r0, [sp, #96]	; 0x60
   bd3ce:	2800      	cmp	r0, #0
   bd3d0:	f43f aef6 	beq.w	bd1c0 <_strtod_l+0x490>
   bd3d4:	2101      	movs	r1, #1
   bd3d6:	4620      	mov	r0, r4
   bd3d8:	f001 f8c2 	bl	be560 <__i2b>
   bd3dc:	4606      	mov	r6, r0
   bd3de:	2800      	cmp	r0, #0
   bd3e0:	f43f aeee 	beq.w	bd1c0 <_strtod_l+0x490>
   bd3e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bd3e6:	9904      	ldr	r1, [sp, #16]
   bd3e8:	2b00      	cmp	r3, #0
   bd3ea:	bfab      	itete	ge
   bd3ec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bd3ee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bd3f0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bd3f2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bd3f6:	bfac      	ite	ge
   bd3f8:	eb03 0902 	addge.w	r9, r3, r2
   bd3fc:	1ad7      	sublt	r7, r2, r3
   bd3fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bd400:	eba3 0801 	sub.w	r8, r3, r1
   bd404:	4490      	add	r8, r2
   bd406:	4ba1      	ldr	r3, [pc, #644]	; (bd68c <_strtod_l+0x95c>)
   bd408:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bd40c:	4598      	cmp	r8, r3
   bd40e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bd412:	f280 80c7 	bge.w	bd5a4 <_strtod_l+0x874>
   bd416:	eba3 0308 	sub.w	r3, r3, r8
   bd41a:	2b1f      	cmp	r3, #31
   bd41c:	eba2 0203 	sub.w	r2, r2, r3
   bd420:	f04f 0101 	mov.w	r1, #1
   bd424:	f300 80b1 	bgt.w	bd58a <_strtod_l+0x85a>
   bd428:	fa01 f303 	lsl.w	r3, r1, r3
   bd42c:	930d      	str	r3, [sp, #52]	; 0x34
   bd42e:	2300      	movs	r3, #0
   bd430:	9308      	str	r3, [sp, #32]
   bd432:	eb09 0802 	add.w	r8, r9, r2
   bd436:	9b04      	ldr	r3, [sp, #16]
   bd438:	45c1      	cmp	r9, r8
   bd43a:	4417      	add	r7, r2
   bd43c:	441f      	add	r7, r3
   bd43e:	464b      	mov	r3, r9
   bd440:	bfa8      	it	ge
   bd442:	4643      	movge	r3, r8
   bd444:	42bb      	cmp	r3, r7
   bd446:	bfa8      	it	ge
   bd448:	463b      	movge	r3, r7
   bd44a:	2b00      	cmp	r3, #0
   bd44c:	bfc2      	ittt	gt
   bd44e:	eba8 0803 	subgt.w	r8, r8, r3
   bd452:	1aff      	subgt	r7, r7, r3
   bd454:	eba9 0903 	subgt.w	r9, r9, r3
   bd458:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bd45a:	2b00      	cmp	r3, #0
   bd45c:	dd17      	ble.n	bd48e <_strtod_l+0x75e>
   bd45e:	4631      	mov	r1, r6
   bd460:	461a      	mov	r2, r3
   bd462:	4620      	mov	r0, r4
   bd464:	f001 f93c 	bl	be6e0 <__pow5mult>
   bd468:	4606      	mov	r6, r0
   bd46a:	2800      	cmp	r0, #0
   bd46c:	f43f aea8 	beq.w	bd1c0 <_strtod_l+0x490>
   bd470:	4601      	mov	r1, r0
   bd472:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bd474:	4620      	mov	r0, r4
   bd476:	f001 f889 	bl	be58c <__multiply>
   bd47a:	900b      	str	r0, [sp, #44]	; 0x2c
   bd47c:	2800      	cmp	r0, #0
   bd47e:	f43f ae9f 	beq.w	bd1c0 <_strtod_l+0x490>
   bd482:	9918      	ldr	r1, [sp, #96]	; 0x60
   bd484:	4620      	mov	r0, r4
   bd486:	f000 ff69 	bl	be35c <_Bfree>
   bd48a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bd48c:	9318      	str	r3, [sp, #96]	; 0x60
   bd48e:	f1b8 0f00 	cmp.w	r8, #0
   bd492:	f300 808c 	bgt.w	bd5ae <_strtod_l+0x87e>
   bd496:	9b06      	ldr	r3, [sp, #24]
   bd498:	2b00      	cmp	r3, #0
   bd49a:	dd08      	ble.n	bd4ae <_strtod_l+0x77e>
   bd49c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bd49e:	9905      	ldr	r1, [sp, #20]
   bd4a0:	4620      	mov	r0, r4
   bd4a2:	f001 f91d 	bl	be6e0 <__pow5mult>
   bd4a6:	9005      	str	r0, [sp, #20]
   bd4a8:	2800      	cmp	r0, #0
   bd4aa:	f43f ae89 	beq.w	bd1c0 <_strtod_l+0x490>
   bd4ae:	2f00      	cmp	r7, #0
   bd4b0:	dd08      	ble.n	bd4c4 <_strtod_l+0x794>
   bd4b2:	9905      	ldr	r1, [sp, #20]
   bd4b4:	463a      	mov	r2, r7
   bd4b6:	4620      	mov	r0, r4
   bd4b8:	f001 f96c 	bl	be794 <__lshift>
   bd4bc:	9005      	str	r0, [sp, #20]
   bd4be:	2800      	cmp	r0, #0
   bd4c0:	f43f ae7e 	beq.w	bd1c0 <_strtod_l+0x490>
   bd4c4:	f1b9 0f00 	cmp.w	r9, #0
   bd4c8:	dd08      	ble.n	bd4dc <_strtod_l+0x7ac>
   bd4ca:	4631      	mov	r1, r6
   bd4cc:	464a      	mov	r2, r9
   bd4ce:	4620      	mov	r0, r4
   bd4d0:	f001 f960 	bl	be794 <__lshift>
   bd4d4:	4606      	mov	r6, r0
   bd4d6:	2800      	cmp	r0, #0
   bd4d8:	f43f ae72 	beq.w	bd1c0 <_strtod_l+0x490>
   bd4dc:	9a05      	ldr	r2, [sp, #20]
   bd4de:	9918      	ldr	r1, [sp, #96]	; 0x60
   bd4e0:	4620      	mov	r0, r4
   bd4e2:	f001 f9e3 	bl	be8ac <__mdiff>
   bd4e6:	4605      	mov	r5, r0
   bd4e8:	2800      	cmp	r0, #0
   bd4ea:	f43f ae69 	beq.w	bd1c0 <_strtod_l+0x490>
   bd4ee:	68c3      	ldr	r3, [r0, #12]
   bd4f0:	930b      	str	r3, [sp, #44]	; 0x2c
   bd4f2:	2300      	movs	r3, #0
   bd4f4:	60c3      	str	r3, [r0, #12]
   bd4f6:	4631      	mov	r1, r6
   bd4f8:	f001 f9bc 	bl	be874 <__mcmp>
   bd4fc:	2800      	cmp	r0, #0
   bd4fe:	da60      	bge.n	bd5c2 <_strtod_l+0x892>
   bd500:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bd502:	ea53 030a 	orrs.w	r3, r3, sl
   bd506:	f040 8082 	bne.w	bd60e <_strtod_l+0x8de>
   bd50a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bd50e:	2b00      	cmp	r3, #0
   bd510:	d17d      	bne.n	bd60e <_strtod_l+0x8de>
   bd512:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bd516:	0d1b      	lsrs	r3, r3, #20
   bd518:	051b      	lsls	r3, r3, #20
   bd51a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bd51e:	d976      	bls.n	bd60e <_strtod_l+0x8de>
   bd520:	696b      	ldr	r3, [r5, #20]
   bd522:	b913      	cbnz	r3, bd52a <_strtod_l+0x7fa>
   bd524:	692b      	ldr	r3, [r5, #16]
   bd526:	2b01      	cmp	r3, #1
   bd528:	dd71      	ble.n	bd60e <_strtod_l+0x8de>
   bd52a:	4629      	mov	r1, r5
   bd52c:	2201      	movs	r2, #1
   bd52e:	4620      	mov	r0, r4
   bd530:	f001 f930 	bl	be794 <__lshift>
   bd534:	4631      	mov	r1, r6
   bd536:	4605      	mov	r5, r0
   bd538:	f001 f99c 	bl	be874 <__mcmp>
   bd53c:	2800      	cmp	r0, #0
   bd53e:	dd66      	ble.n	bd60e <_strtod_l+0x8de>
   bd540:	9904      	ldr	r1, [sp, #16]
   bd542:	4a53      	ldr	r2, [pc, #332]	; (bd690 <_strtod_l+0x960>)
   bd544:	465b      	mov	r3, fp
   bd546:	2900      	cmp	r1, #0
   bd548:	f000 8081 	beq.w	bd64e <_strtod_l+0x91e>
   bd54c:	ea02 010b 	and.w	r1, r2, fp
   bd550:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bd554:	dc7b      	bgt.n	bd64e <_strtod_l+0x91e>
   bd556:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bd55a:	f77f aea9 	ble.w	bd2b0 <_strtod_l+0x580>
   bd55e:	4b4d      	ldr	r3, [pc, #308]	; (bd694 <_strtod_l+0x964>)
   bd560:	4650      	mov	r0, sl
   bd562:	4659      	mov	r1, fp
   bd564:	2200      	movs	r2, #0
   bd566:	f7fe ffc1 	bl	bc4ec <__aeabi_dmul>
   bd56a:	460b      	mov	r3, r1
   bd56c:	4303      	orrs	r3, r0
   bd56e:	bf08      	it	eq
   bd570:	2322      	moveq	r3, #34	; 0x22
   bd572:	4682      	mov	sl, r0
   bd574:	468b      	mov	fp, r1
   bd576:	bf08      	it	eq
   bd578:	6023      	streq	r3, [r4, #0]
   bd57a:	e62b      	b.n	bd1d4 <_strtod_l+0x4a4>
   bd57c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd580:	fa02 f303 	lsl.w	r3, r2, r3
   bd584:	ea03 0a0a 	and.w	sl, r3, sl
   bd588:	e6e3      	b.n	bd352 <_strtod_l+0x622>
   bd58a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bd58e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bd592:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bd596:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bd59a:	fa01 f308 	lsl.w	r3, r1, r8
   bd59e:	9308      	str	r3, [sp, #32]
   bd5a0:	910d      	str	r1, [sp, #52]	; 0x34
   bd5a2:	e746      	b.n	bd432 <_strtod_l+0x702>
   bd5a4:	2300      	movs	r3, #0
   bd5a6:	9308      	str	r3, [sp, #32]
   bd5a8:	2301      	movs	r3, #1
   bd5aa:	930d      	str	r3, [sp, #52]	; 0x34
   bd5ac:	e741      	b.n	bd432 <_strtod_l+0x702>
   bd5ae:	9918      	ldr	r1, [sp, #96]	; 0x60
   bd5b0:	4642      	mov	r2, r8
   bd5b2:	4620      	mov	r0, r4
   bd5b4:	f001 f8ee 	bl	be794 <__lshift>
   bd5b8:	9018      	str	r0, [sp, #96]	; 0x60
   bd5ba:	2800      	cmp	r0, #0
   bd5bc:	f47f af6b 	bne.w	bd496 <_strtod_l+0x766>
   bd5c0:	e5fe      	b.n	bd1c0 <_strtod_l+0x490>
   bd5c2:	465f      	mov	r7, fp
   bd5c4:	d16e      	bne.n	bd6a4 <_strtod_l+0x974>
   bd5c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bd5c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bd5cc:	b342      	cbz	r2, bd620 <_strtod_l+0x8f0>
   bd5ce:	4a32      	ldr	r2, [pc, #200]	; (bd698 <_strtod_l+0x968>)
   bd5d0:	4293      	cmp	r3, r2
   bd5d2:	d128      	bne.n	bd626 <_strtod_l+0x8f6>
   bd5d4:	9b04      	ldr	r3, [sp, #16]
   bd5d6:	4651      	mov	r1, sl
   bd5d8:	b1eb      	cbz	r3, bd616 <_strtod_l+0x8e6>
   bd5da:	4b2d      	ldr	r3, [pc, #180]	; (bd690 <_strtod_l+0x960>)
   bd5dc:	403b      	ands	r3, r7
   bd5de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bd5e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd5e6:	d819      	bhi.n	bd61c <_strtod_l+0x8ec>
   bd5e8:	0d1b      	lsrs	r3, r3, #20
   bd5ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bd5ee:	fa02 f303 	lsl.w	r3, r2, r3
   bd5f2:	4299      	cmp	r1, r3
   bd5f4:	d117      	bne.n	bd626 <_strtod_l+0x8f6>
   bd5f6:	4b29      	ldr	r3, [pc, #164]	; (bd69c <_strtod_l+0x96c>)
   bd5f8:	429f      	cmp	r7, r3
   bd5fa:	d102      	bne.n	bd602 <_strtod_l+0x8d2>
   bd5fc:	3101      	adds	r1, #1
   bd5fe:	f43f addf 	beq.w	bd1c0 <_strtod_l+0x490>
   bd602:	4b23      	ldr	r3, [pc, #140]	; (bd690 <_strtod_l+0x960>)
   bd604:	403b      	ands	r3, r7
   bd606:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bd60a:	f04f 0a00 	mov.w	sl, #0
   bd60e:	9b04      	ldr	r3, [sp, #16]
   bd610:	2b00      	cmp	r3, #0
   bd612:	d1a4      	bne.n	bd55e <_strtod_l+0x82e>
   bd614:	e5de      	b.n	bd1d4 <_strtod_l+0x4a4>
   bd616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bd61a:	e7ea      	b.n	bd5f2 <_strtod_l+0x8c2>
   bd61c:	4613      	mov	r3, r2
   bd61e:	e7e8      	b.n	bd5f2 <_strtod_l+0x8c2>
   bd620:	ea53 030a 	orrs.w	r3, r3, sl
   bd624:	d08c      	beq.n	bd540 <_strtod_l+0x810>
   bd626:	9b08      	ldr	r3, [sp, #32]
   bd628:	b1db      	cbz	r3, bd662 <_strtod_l+0x932>
   bd62a:	423b      	tst	r3, r7
   bd62c:	d0ef      	beq.n	bd60e <_strtod_l+0x8de>
   bd62e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bd630:	9a04      	ldr	r2, [sp, #16]
   bd632:	4650      	mov	r0, sl
   bd634:	4659      	mov	r1, fp
   bd636:	b1c3      	cbz	r3, bd66a <_strtod_l+0x93a>
   bd638:	f7ff fb5e 	bl	bccf8 <sulp>
   bd63c:	4602      	mov	r2, r0
   bd63e:	460b      	mov	r3, r1
   bd640:	ec51 0b18 	vmov	r0, r1, d8
   bd644:	f7fe fd9c 	bl	bc180 <__adddf3>
   bd648:	4682      	mov	sl, r0
   bd64a:	468b      	mov	fp, r1
   bd64c:	e7df      	b.n	bd60e <_strtod_l+0x8de>
   bd64e:	4013      	ands	r3, r2
   bd650:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bd654:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bd658:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bd65c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bd660:	e7d5      	b.n	bd60e <_strtod_l+0x8de>
   bd662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bd664:	ea13 0f0a 	tst.w	r3, sl
   bd668:	e7e0      	b.n	bd62c <_strtod_l+0x8fc>
   bd66a:	f7ff fb45 	bl	bccf8 <sulp>
   bd66e:	4602      	mov	r2, r0
   bd670:	460b      	mov	r3, r1
   bd672:	ec51 0b18 	vmov	r0, r1, d8
   bd676:	f7fe fd81 	bl	bc17c <__aeabi_dsub>
   bd67a:	2200      	movs	r2, #0
   bd67c:	2300      	movs	r3, #0
   bd67e:	4682      	mov	sl, r0
   bd680:	468b      	mov	fp, r1
   bd682:	f7ff f99b 	bl	bc9bc <__aeabi_dcmpeq>
   bd686:	2800      	cmp	r0, #0
   bd688:	d0c1      	beq.n	bd60e <_strtod_l+0x8de>
   bd68a:	e611      	b.n	bd2b0 <_strtod_l+0x580>
   bd68c:	fffffc02 	.word	0xfffffc02
   bd690:	7ff00000 	.word	0x7ff00000
   bd694:	39500000 	.word	0x39500000
   bd698:	000fffff 	.word	0x000fffff
   bd69c:	7fefffff 	.word	0x7fefffff
   bd6a0:	000bf868 	.word	0x000bf868
   bd6a4:	4631      	mov	r1, r6
   bd6a6:	4628      	mov	r0, r5
   bd6a8:	f001 fa62 	bl	beb70 <__ratio>
   bd6ac:	ec59 8b10 	vmov	r8, r9, d0
   bd6b0:	ee10 0a10 	vmov	r0, s0
   bd6b4:	2200      	movs	r2, #0
   bd6b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bd6ba:	4649      	mov	r1, r9
   bd6bc:	f7ff f992 	bl	bc9e4 <__aeabi_dcmple>
   bd6c0:	2800      	cmp	r0, #0
   bd6c2:	d07a      	beq.n	bd7ba <_strtod_l+0xa8a>
   bd6c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bd6c6:	2b00      	cmp	r3, #0
   bd6c8:	d04a      	beq.n	bd760 <_strtod_l+0xa30>
   bd6ca:	4b95      	ldr	r3, [pc, #596]	; (bd920 <_strtod_l+0xbf0>)
   bd6cc:	2200      	movs	r2, #0
   bd6ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bd6d2:	f8df 924c 	ldr.w	r9, [pc, #588]	; bd920 <_strtod_l+0xbf0>
   bd6d6:	f04f 0800 	mov.w	r8, #0
   bd6da:	4b92      	ldr	r3, [pc, #584]	; (bd924 <_strtod_l+0xbf4>)
   bd6dc:	403b      	ands	r3, r7
   bd6de:	930d      	str	r3, [sp, #52]	; 0x34
   bd6e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bd6e2:	4b91      	ldr	r3, [pc, #580]	; (bd928 <_strtod_l+0xbf8>)
   bd6e4:	429a      	cmp	r2, r3
   bd6e6:	f040 80b0 	bne.w	bd84a <_strtod_l+0xb1a>
   bd6ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bd6ee:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bd6f2:	ec4b ab10 	vmov	d0, sl, fp
   bd6f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bd6fa:	f001 f961 	bl	be9c0 <__ulp>
   bd6fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bd702:	ec53 2b10 	vmov	r2, r3, d0
   bd706:	f7fe fef1 	bl	bc4ec <__aeabi_dmul>
   bd70a:	4652      	mov	r2, sl
   bd70c:	465b      	mov	r3, fp
   bd70e:	f7fe fd37 	bl	bc180 <__adddf3>
   bd712:	460b      	mov	r3, r1
   bd714:	4983      	ldr	r1, [pc, #524]	; (bd924 <_strtod_l+0xbf4>)
   bd716:	4a85      	ldr	r2, [pc, #532]	; (bd92c <_strtod_l+0xbfc>)
   bd718:	4019      	ands	r1, r3
   bd71a:	4291      	cmp	r1, r2
   bd71c:	4682      	mov	sl, r0
   bd71e:	d960      	bls.n	bd7e2 <_strtod_l+0xab2>
   bd720:	ee18 3a90 	vmov	r3, s17
   bd724:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bd728:	4293      	cmp	r3, r2
   bd72a:	d104      	bne.n	bd736 <_strtod_l+0xa06>
   bd72c:	ee18 3a10 	vmov	r3, s16
   bd730:	3301      	adds	r3, #1
   bd732:	f43f ad45 	beq.w	bd1c0 <_strtod_l+0x490>
   bd736:	f8df b200 	ldr.w	fp, [pc, #512]	; bd938 <_strtod_l+0xc08>
   bd73a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bd73e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bd740:	4620      	mov	r0, r4
   bd742:	f000 fe0b 	bl	be35c <_Bfree>
   bd746:	9905      	ldr	r1, [sp, #20]
   bd748:	4620      	mov	r0, r4
   bd74a:	f000 fe07 	bl	be35c <_Bfree>
   bd74e:	4631      	mov	r1, r6
   bd750:	4620      	mov	r0, r4
   bd752:	f000 fe03 	bl	be35c <_Bfree>
   bd756:	4629      	mov	r1, r5
   bd758:	4620      	mov	r0, r4
   bd75a:	f000 fdff 	bl	be35c <_Bfree>
   bd75e:	e61a      	b.n	bd396 <_strtod_l+0x666>
   bd760:	f1ba 0f00 	cmp.w	sl, #0
   bd764:	d11b      	bne.n	bd79e <_strtod_l+0xa6e>
   bd766:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bd76a:	b9f3      	cbnz	r3, bd7aa <_strtod_l+0xa7a>
   bd76c:	4b6c      	ldr	r3, [pc, #432]	; (bd920 <_strtod_l+0xbf0>)
   bd76e:	2200      	movs	r2, #0
   bd770:	4640      	mov	r0, r8
   bd772:	4649      	mov	r1, r9
   bd774:	f7ff f92c 	bl	bc9d0 <__aeabi_dcmplt>
   bd778:	b9d0      	cbnz	r0, bd7b0 <_strtod_l+0xa80>
   bd77a:	4640      	mov	r0, r8
   bd77c:	4649      	mov	r1, r9
   bd77e:	4b6c      	ldr	r3, [pc, #432]	; (bd930 <_strtod_l+0xc00>)
   bd780:	2200      	movs	r2, #0
   bd782:	f7fe feb3 	bl	bc4ec <__aeabi_dmul>
   bd786:	4680      	mov	r8, r0
   bd788:	4689      	mov	r9, r1
   bd78a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bd78e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bd792:	9315      	str	r3, [sp, #84]	; 0x54
   bd794:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bd798:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bd79c:	e79d      	b.n	bd6da <_strtod_l+0x9aa>
   bd79e:	f1ba 0f01 	cmp.w	sl, #1
   bd7a2:	d102      	bne.n	bd7aa <_strtod_l+0xa7a>
   bd7a4:	2f00      	cmp	r7, #0
   bd7a6:	f43f ad83 	beq.w	bd2b0 <_strtod_l+0x580>
   bd7aa:	4b62      	ldr	r3, [pc, #392]	; (bd934 <_strtod_l+0xc04>)
   bd7ac:	2200      	movs	r2, #0
   bd7ae:	e78e      	b.n	bd6ce <_strtod_l+0x99e>
   bd7b0:	f8df 917c 	ldr.w	r9, [pc, #380]	; bd930 <_strtod_l+0xc00>
   bd7b4:	f04f 0800 	mov.w	r8, #0
   bd7b8:	e7e7      	b.n	bd78a <_strtod_l+0xa5a>
   bd7ba:	4b5d      	ldr	r3, [pc, #372]	; (bd930 <_strtod_l+0xc00>)
   bd7bc:	4640      	mov	r0, r8
   bd7be:	4649      	mov	r1, r9
   bd7c0:	2200      	movs	r2, #0
   bd7c2:	f7fe fe93 	bl	bc4ec <__aeabi_dmul>
   bd7c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bd7c8:	4680      	mov	r8, r0
   bd7ca:	4689      	mov	r9, r1
   bd7cc:	b933      	cbnz	r3, bd7dc <_strtod_l+0xaac>
   bd7ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bd7d2:	900e      	str	r0, [sp, #56]	; 0x38
   bd7d4:	930f      	str	r3, [sp, #60]	; 0x3c
   bd7d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bd7da:	e7dd      	b.n	bd798 <_strtod_l+0xa68>
   bd7dc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bd7e0:	e7f9      	b.n	bd7d6 <_strtod_l+0xaa6>
   bd7e2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bd7e6:	9b04      	ldr	r3, [sp, #16]
   bd7e8:	2b00      	cmp	r3, #0
   bd7ea:	d1a8      	bne.n	bd73e <_strtod_l+0xa0e>
   bd7ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bd7f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bd7f2:	0d1b      	lsrs	r3, r3, #20
   bd7f4:	051b      	lsls	r3, r3, #20
   bd7f6:	429a      	cmp	r2, r3
   bd7f8:	d1a1      	bne.n	bd73e <_strtod_l+0xa0e>
   bd7fa:	4640      	mov	r0, r8
   bd7fc:	4649      	mov	r1, r9
   bd7fe:	f001 fa5b 	bl	becb8 <__aeabi_d2lz>
   bd802:	f7fe fe45 	bl	bc490 <__aeabi_l2d>
   bd806:	4602      	mov	r2, r0
   bd808:	460b      	mov	r3, r1
   bd80a:	4640      	mov	r0, r8
   bd80c:	4649      	mov	r1, r9
   bd80e:	f7fe fcb5 	bl	bc17c <__aeabi_dsub>
   bd812:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bd814:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bd818:	ea43 030a 	orr.w	r3, r3, sl
   bd81c:	4313      	orrs	r3, r2
   bd81e:	4680      	mov	r8, r0
   bd820:	4689      	mov	r9, r1
   bd822:	d055      	beq.n	bd8d0 <_strtod_l+0xba0>
   bd824:	a336      	add	r3, pc, #216	; (adr r3, bd900 <_strtod_l+0xbd0>)
   bd826:	e9d3 2300 	ldrd	r2, r3, [r3]
   bd82a:	f7ff f8d1 	bl	bc9d0 <__aeabi_dcmplt>
   bd82e:	2800      	cmp	r0, #0
   bd830:	f47f acd0 	bne.w	bd1d4 <_strtod_l+0x4a4>
   bd834:	a334      	add	r3, pc, #208	; (adr r3, bd908 <_strtod_l+0xbd8>)
   bd836:	e9d3 2300 	ldrd	r2, r3, [r3]
   bd83a:	4640      	mov	r0, r8
   bd83c:	4649      	mov	r1, r9
   bd83e:	f7ff f8e5 	bl	bca0c <__aeabi_dcmpgt>
   bd842:	2800      	cmp	r0, #0
   bd844:	f43f af7b 	beq.w	bd73e <_strtod_l+0xa0e>
   bd848:	e4c4      	b.n	bd1d4 <_strtod_l+0x4a4>
   bd84a:	9b04      	ldr	r3, [sp, #16]
   bd84c:	b333      	cbz	r3, bd89c <_strtod_l+0xb6c>
   bd84e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bd850:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bd854:	d822      	bhi.n	bd89c <_strtod_l+0xb6c>
   bd856:	a32e      	add	r3, pc, #184	; (adr r3, bd910 <_strtod_l+0xbe0>)
   bd858:	e9d3 2300 	ldrd	r2, r3, [r3]
   bd85c:	4640      	mov	r0, r8
   bd85e:	4649      	mov	r1, r9
   bd860:	f7ff f8c0 	bl	bc9e4 <__aeabi_dcmple>
   bd864:	b1a0      	cbz	r0, bd890 <_strtod_l+0xb60>
   bd866:	4649      	mov	r1, r9
   bd868:	4640      	mov	r0, r8
   bd86a:	f7ff f8ef 	bl	bca4c <__aeabi_d2uiz>
   bd86e:	2801      	cmp	r0, #1
   bd870:	bf38      	it	cc
   bd872:	2001      	movcc	r0, #1
   bd874:	f7fe fdc0 	bl	bc3f8 <__aeabi_ui2d>
   bd878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bd87a:	4680      	mov	r8, r0
   bd87c:	4689      	mov	r9, r1
   bd87e:	bb23      	cbnz	r3, bd8ca <_strtod_l+0xb9a>
   bd880:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bd884:	9010      	str	r0, [sp, #64]	; 0x40
   bd886:	9311      	str	r3, [sp, #68]	; 0x44
   bd888:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bd88c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bd890:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bd892:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bd894:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bd898:	1a9b      	subs	r3, r3, r2
   bd89a:	9309      	str	r3, [sp, #36]	; 0x24
   bd89c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bd8a0:	eeb0 0a48 	vmov.f32	s0, s16
   bd8a4:	eef0 0a68 	vmov.f32	s1, s17
   bd8a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bd8ac:	f001 f888 	bl	be9c0 <__ulp>
   bd8b0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bd8b4:	ec53 2b10 	vmov	r2, r3, d0
   bd8b8:	f7fe fe18 	bl	bc4ec <__aeabi_dmul>
   bd8bc:	ec53 2b18 	vmov	r2, r3, d8
   bd8c0:	f7fe fc5e 	bl	bc180 <__adddf3>
   bd8c4:	4682      	mov	sl, r0
   bd8c6:	468b      	mov	fp, r1
   bd8c8:	e78d      	b.n	bd7e6 <_strtod_l+0xab6>
   bd8ca:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bd8ce:	e7db      	b.n	bd888 <_strtod_l+0xb58>
   bd8d0:	a311      	add	r3, pc, #68	; (adr r3, bd918 <_strtod_l+0xbe8>)
   bd8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   bd8d6:	f7ff f87b 	bl	bc9d0 <__aeabi_dcmplt>
   bd8da:	e7b2      	b.n	bd842 <_strtod_l+0xb12>
   bd8dc:	2300      	movs	r3, #0
   bd8de:	930a      	str	r3, [sp, #40]	; 0x28
   bd8e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bd8e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bd8e4:	6013      	str	r3, [r2, #0]
   bd8e6:	f7ff ba6b 	b.w	bcdc0 <_strtod_l+0x90>
   bd8ea:	2a65      	cmp	r2, #101	; 0x65
   bd8ec:	f43f ab5f 	beq.w	bcfae <_strtod_l+0x27e>
   bd8f0:	2a45      	cmp	r2, #69	; 0x45
   bd8f2:	f43f ab5c 	beq.w	bcfae <_strtod_l+0x27e>
   bd8f6:	2301      	movs	r3, #1
   bd8f8:	f7ff bb94 	b.w	bd024 <_strtod_l+0x2f4>
   bd8fc:	f3af 8000 	nop.w
   bd900:	94a03595 	.word	0x94a03595
   bd904:	3fdfffff 	.word	0x3fdfffff
   bd908:	35afe535 	.word	0x35afe535
   bd90c:	3fe00000 	.word	0x3fe00000
   bd910:	ffc00000 	.word	0xffc00000
   bd914:	41dfffff 	.word	0x41dfffff
   bd918:	94a03595 	.word	0x94a03595
   bd91c:	3fcfffff 	.word	0x3fcfffff
   bd920:	3ff00000 	.word	0x3ff00000
   bd924:	7ff00000 	.word	0x7ff00000
   bd928:	7fe00000 	.word	0x7fe00000
   bd92c:	7c9fffff 	.word	0x7c9fffff
   bd930:	3fe00000 	.word	0x3fe00000
   bd934:	bff00000 	.word	0xbff00000
   bd938:	7fefffff 	.word	0x7fefffff

000bd93c <strtof>:
   bd93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd940:	f8df 80ac 	ldr.w	r8, [pc, #172]	; bd9f0 <strtof+0xb4>
   bd944:	4b26      	ldr	r3, [pc, #152]	; (bd9e0 <strtof+0xa4>)
   bd946:	460a      	mov	r2, r1
   bd948:	ed2d 8b02 	vpush	{d8}
   bd94c:	4601      	mov	r1, r0
   bd94e:	f8d8 0000 	ldr.w	r0, [r8]
   bd952:	f7ff f9ed 	bl	bcd30 <_strtod_l>
   bd956:	ec55 4b10 	vmov	r4, r5, d0
   bd95a:	ee10 2a10 	vmov	r2, s0
   bd95e:	ee10 0a10 	vmov	r0, s0
   bd962:	462b      	mov	r3, r5
   bd964:	4629      	mov	r1, r5
   bd966:	f7ff f85b 	bl	bca20 <__aeabi_dcmpun>
   bd96a:	b190      	cbz	r0, bd992 <strtof+0x56>
   bd96c:	2d00      	cmp	r5, #0
   bd96e:	481d      	ldr	r0, [pc, #116]	; (bd9e4 <strtof+0xa8>)
   bd970:	da09      	bge.n	bd986 <strtof+0x4a>
   bd972:	f001 f98d 	bl	bec90 <nanf>
   bd976:	eeb1 8a40 	vneg.f32	s16, s0
   bd97a:	eeb0 0a48 	vmov.f32	s0, s16
   bd97e:	ecbd 8b02 	vpop	{d8}
   bd982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd986:	ecbd 8b02 	vpop	{d8}
   bd98a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bd98e:	f001 b97f 	b.w	bec90 <nanf>
   bd992:	4620      	mov	r0, r4
   bd994:	4629      	mov	r1, r5
   bd996:	f7ff f879 	bl	bca8c <__aeabi_d2f>
   bd99a:	ee08 0a10 	vmov	s16, r0
   bd99e:	eddf 7a12 	vldr	s15, [pc, #72]	; bd9e8 <strtof+0xac>
   bd9a2:	eeb0 7ac8 	vabs.f32	s14, s16
   bd9a6:	eeb4 7a67 	vcmp.f32	s14, s15
   bd9aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bd9ae:	dde4      	ble.n	bd97a <strtof+0x3e>
   bd9b0:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   bd9b4:	4b0d      	ldr	r3, [pc, #52]	; (bd9ec <strtof+0xb0>)
   bd9b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd9ba:	4620      	mov	r0, r4
   bd9bc:	4639      	mov	r1, r7
   bd9be:	f7ff f82f 	bl	bca20 <__aeabi_dcmpun>
   bd9c2:	b940      	cbnz	r0, bd9d6 <strtof+0x9a>
   bd9c4:	4b09      	ldr	r3, [pc, #36]	; (bd9ec <strtof+0xb0>)
   bd9c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd9ca:	4620      	mov	r0, r4
   bd9cc:	4639      	mov	r1, r7
   bd9ce:	f7ff f809 	bl	bc9e4 <__aeabi_dcmple>
   bd9d2:	2800      	cmp	r0, #0
   bd9d4:	d0d1      	beq.n	bd97a <strtof+0x3e>
   bd9d6:	f8d8 3000 	ldr.w	r3, [r8]
   bd9da:	2222      	movs	r2, #34	; 0x22
   bd9dc:	601a      	str	r2, [r3, #0]
   bd9de:	e7cc      	b.n	bd97a <strtof+0x3e>
   bd9e0:	200350cc 	.word	0x200350cc
   bd9e4:	000bf29a 	.word	0x000bf29a
   bd9e8:	7f7fffff 	.word	0x7f7fffff
   bd9ec:	7fefffff 	.word	0x7fefffff
   bd9f0:	20035060 	.word	0x20035060

000bd9f4 <_strtol_l.constprop.0>:
   bd9f4:	2b01      	cmp	r3, #1
   bd9f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bd9fa:	d001      	beq.n	bda00 <_strtol_l.constprop.0+0xc>
   bd9fc:	2b24      	cmp	r3, #36	; 0x24
   bd9fe:	d906      	bls.n	bda0e <_strtol_l.constprop.0+0x1a>
   bda00:	f7fb fd9a 	bl	b9538 <__errno>
   bda04:	2316      	movs	r3, #22
   bda06:	6003      	str	r3, [r0, #0]
   bda08:	2000      	movs	r0, #0
   bda0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bda0e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bdaf4 <_strtol_l.constprop.0+0x100>
   bda12:	460d      	mov	r5, r1
   bda14:	462e      	mov	r6, r5
   bda16:	f815 4b01 	ldrb.w	r4, [r5], #1
   bda1a:	f814 700c 	ldrb.w	r7, [r4, ip]
   bda1e:	f017 0708 	ands.w	r7, r7, #8
   bda22:	d1f7      	bne.n	bda14 <_strtol_l.constprop.0+0x20>
   bda24:	2c2d      	cmp	r4, #45	; 0x2d
   bda26:	d132      	bne.n	bda8e <_strtol_l.constprop.0+0x9a>
   bda28:	782c      	ldrb	r4, [r5, #0]
   bda2a:	2701      	movs	r7, #1
   bda2c:	1cb5      	adds	r5, r6, #2
   bda2e:	2b00      	cmp	r3, #0
   bda30:	d05b      	beq.n	bdaea <_strtol_l.constprop.0+0xf6>
   bda32:	2b10      	cmp	r3, #16
   bda34:	d109      	bne.n	bda4a <_strtol_l.constprop.0+0x56>
   bda36:	2c30      	cmp	r4, #48	; 0x30
   bda38:	d107      	bne.n	bda4a <_strtol_l.constprop.0+0x56>
   bda3a:	782c      	ldrb	r4, [r5, #0]
   bda3c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bda40:	2c58      	cmp	r4, #88	; 0x58
   bda42:	d14d      	bne.n	bdae0 <_strtol_l.constprop.0+0xec>
   bda44:	786c      	ldrb	r4, [r5, #1]
   bda46:	2310      	movs	r3, #16
   bda48:	3502      	adds	r5, #2
   bda4a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bda4e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bda52:	f04f 0c00 	mov.w	ip, #0
   bda56:	fbb8 f9f3 	udiv	r9, r8, r3
   bda5a:	4666      	mov	r6, ip
   bda5c:	fb03 8a19 	mls	sl, r3, r9, r8
   bda60:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bda64:	f1be 0f09 	cmp.w	lr, #9
   bda68:	d816      	bhi.n	bda98 <_strtol_l.constprop.0+0xa4>
   bda6a:	4674      	mov	r4, lr
   bda6c:	42a3      	cmp	r3, r4
   bda6e:	dd24      	ble.n	bdaba <_strtol_l.constprop.0+0xc6>
   bda70:	f1bc 0f00 	cmp.w	ip, #0
   bda74:	db1e      	blt.n	bdab4 <_strtol_l.constprop.0+0xc0>
   bda76:	45b1      	cmp	r9, r6
   bda78:	d31c      	bcc.n	bdab4 <_strtol_l.constprop.0+0xc0>
   bda7a:	d101      	bne.n	bda80 <_strtol_l.constprop.0+0x8c>
   bda7c:	45a2      	cmp	sl, r4
   bda7e:	db19      	blt.n	bdab4 <_strtol_l.constprop.0+0xc0>
   bda80:	fb06 4603 	mla	r6, r6, r3, r4
   bda84:	f04f 0c01 	mov.w	ip, #1
   bda88:	f815 4b01 	ldrb.w	r4, [r5], #1
   bda8c:	e7e8      	b.n	bda60 <_strtol_l.constprop.0+0x6c>
   bda8e:	2c2b      	cmp	r4, #43	; 0x2b
   bda90:	bf04      	itt	eq
   bda92:	782c      	ldrbeq	r4, [r5, #0]
   bda94:	1cb5      	addeq	r5, r6, #2
   bda96:	e7ca      	b.n	bda2e <_strtol_l.constprop.0+0x3a>
   bda98:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bda9c:	f1be 0f19 	cmp.w	lr, #25
   bdaa0:	d801      	bhi.n	bdaa6 <_strtol_l.constprop.0+0xb2>
   bdaa2:	3c37      	subs	r4, #55	; 0x37
   bdaa4:	e7e2      	b.n	bda6c <_strtol_l.constprop.0+0x78>
   bdaa6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bdaaa:	f1be 0f19 	cmp.w	lr, #25
   bdaae:	d804      	bhi.n	bdaba <_strtol_l.constprop.0+0xc6>
   bdab0:	3c57      	subs	r4, #87	; 0x57
   bdab2:	e7db      	b.n	bda6c <_strtol_l.constprop.0+0x78>
   bdab4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bdab8:	e7e6      	b.n	bda88 <_strtol_l.constprop.0+0x94>
   bdaba:	f1bc 0f00 	cmp.w	ip, #0
   bdabe:	da05      	bge.n	bdacc <_strtol_l.constprop.0+0xd8>
   bdac0:	2322      	movs	r3, #34	; 0x22
   bdac2:	6003      	str	r3, [r0, #0]
   bdac4:	4646      	mov	r6, r8
   bdac6:	b942      	cbnz	r2, bdada <_strtol_l.constprop.0+0xe6>
   bdac8:	4630      	mov	r0, r6
   bdaca:	e79e      	b.n	bda0a <_strtol_l.constprop.0+0x16>
   bdacc:	b107      	cbz	r7, bdad0 <_strtol_l.constprop.0+0xdc>
   bdace:	4276      	negs	r6, r6
   bdad0:	2a00      	cmp	r2, #0
   bdad2:	d0f9      	beq.n	bdac8 <_strtol_l.constprop.0+0xd4>
   bdad4:	f1bc 0f00 	cmp.w	ip, #0
   bdad8:	d000      	beq.n	bdadc <_strtol_l.constprop.0+0xe8>
   bdada:	1e69      	subs	r1, r5, #1
   bdadc:	6011      	str	r1, [r2, #0]
   bdade:	e7f3      	b.n	bdac8 <_strtol_l.constprop.0+0xd4>
   bdae0:	2430      	movs	r4, #48	; 0x30
   bdae2:	2b00      	cmp	r3, #0
   bdae4:	d1b1      	bne.n	bda4a <_strtol_l.constprop.0+0x56>
   bdae6:	2308      	movs	r3, #8
   bdae8:	e7af      	b.n	bda4a <_strtol_l.constprop.0+0x56>
   bdaea:	2c30      	cmp	r4, #48	; 0x30
   bdaec:	d0a5      	beq.n	bda3a <_strtol_l.constprop.0+0x46>
   bdaee:	230a      	movs	r3, #10
   bdaf0:	e7ab      	b.n	bda4a <_strtol_l.constprop.0+0x56>
   bdaf2:	bf00      	nop
   bdaf4:	000bf891 	.word	0x000bf891

000bdaf8 <strtol>:
   bdaf8:	4613      	mov	r3, r2
   bdafa:	460a      	mov	r2, r1
   bdafc:	4601      	mov	r1, r0
   bdafe:	4802      	ldr	r0, [pc, #8]	; (bdb08 <strtol+0x10>)
   bdb00:	6800      	ldr	r0, [r0, #0]
   bdb02:	f7ff bf77 	b.w	bd9f4 <_strtol_l.constprop.0>
   bdb06:	bf00      	nop
   bdb08:	20035060 	.word	0x20035060

000bdb0c <__register_exitproc>:
   bdb0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bdb10:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bdbcc <__register_exitproc+0xc0>
   bdb14:	4606      	mov	r6, r0
   bdb16:	f8d8 0000 	ldr.w	r0, [r8]
   bdb1a:	461f      	mov	r7, r3
   bdb1c:	460d      	mov	r5, r1
   bdb1e:	4691      	mov	r9, r2
   bdb20:	f000 fbc6 	bl	be2b0 <__retarget_lock_acquire_recursive>
   bdb24:	4b25      	ldr	r3, [pc, #148]	; (bdbbc <__register_exitproc+0xb0>)
   bdb26:	681c      	ldr	r4, [r3, #0]
   bdb28:	b934      	cbnz	r4, bdb38 <__register_exitproc+0x2c>
   bdb2a:	4c25      	ldr	r4, [pc, #148]	; (bdbc0 <__register_exitproc+0xb4>)
   bdb2c:	601c      	str	r4, [r3, #0]
   bdb2e:	4b25      	ldr	r3, [pc, #148]	; (bdbc4 <__register_exitproc+0xb8>)
   bdb30:	b113      	cbz	r3, bdb38 <__register_exitproc+0x2c>
   bdb32:	681b      	ldr	r3, [r3, #0]
   bdb34:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bdb38:	6863      	ldr	r3, [r4, #4]
   bdb3a:	2b1f      	cmp	r3, #31
   bdb3c:	dd07      	ble.n	bdb4e <__register_exitproc+0x42>
   bdb3e:	f8d8 0000 	ldr.w	r0, [r8]
   bdb42:	f000 fbb7 	bl	be2b4 <__retarget_lock_release_recursive>
   bdb46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bdb4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bdb4e:	b34e      	cbz	r6, bdba4 <__register_exitproc+0x98>
   bdb50:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bdb54:	b988      	cbnz	r0, bdb7a <__register_exitproc+0x6e>
   bdb56:	4b1c      	ldr	r3, [pc, #112]	; (bdbc8 <__register_exitproc+0xbc>)
   bdb58:	b923      	cbnz	r3, bdb64 <__register_exitproc+0x58>
   bdb5a:	f8d8 0000 	ldr.w	r0, [r8]
   bdb5e:	f000 fba8 	bl	be2b2 <__retarget_lock_release>
   bdb62:	e7f0      	b.n	bdb46 <__register_exitproc+0x3a>
   bdb64:	f44f 7084 	mov.w	r0, #264	; 0x108
   bdb68:	f7fb fcae 	bl	b94c8 <malloc>
   bdb6c:	2800      	cmp	r0, #0
   bdb6e:	d0f4      	beq.n	bdb5a <__register_exitproc+0x4e>
   bdb70:	2300      	movs	r3, #0
   bdb72:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bdb76:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bdb7a:	6863      	ldr	r3, [r4, #4]
   bdb7c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bdb80:	2201      	movs	r2, #1
   bdb82:	409a      	lsls	r2, r3
   bdb84:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bdb88:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bdb8c:	4313      	orrs	r3, r2
   bdb8e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bdb92:	2e02      	cmp	r6, #2
   bdb94:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bdb98:	bf02      	ittt	eq
   bdb9a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bdb9e:	4313      	orreq	r3, r2
   bdba0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bdba4:	6863      	ldr	r3, [r4, #4]
   bdba6:	f8d8 0000 	ldr.w	r0, [r8]
   bdbaa:	1c5a      	adds	r2, r3, #1
   bdbac:	3302      	adds	r3, #2
   bdbae:	6062      	str	r2, [r4, #4]
   bdbb0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bdbb4:	f000 fb7e 	bl	be2b4 <__retarget_lock_release_recursive>
   bdbb8:	2000      	movs	r0, #0
   bdbba:	e7c6      	b.n	bdb4a <__register_exitproc+0x3e>
   bdbbc:	2003e7e8 	.word	0x2003e7e8
   bdbc0:	2003e75c 	.word	0x2003e75c
   bdbc4:	00000000 	.word	0x00000000
   bdbc8:	000b94c9 	.word	0x000b94c9
   bdbcc:	200350c4 	.word	0x200350c4

000bdbd0 <rshift>:
   bdbd0:	6903      	ldr	r3, [r0, #16]
   bdbd2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bdbd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bdbda:	ea4f 1261 	mov.w	r2, r1, asr #5
   bdbde:	f100 0414 	add.w	r4, r0, #20
   bdbe2:	dd45      	ble.n	bdc70 <rshift+0xa0>
   bdbe4:	f011 011f 	ands.w	r1, r1, #31
   bdbe8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bdbec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bdbf0:	d10c      	bne.n	bdc0c <rshift+0x3c>
   bdbf2:	f100 0710 	add.w	r7, r0, #16
   bdbf6:	4629      	mov	r1, r5
   bdbf8:	42b1      	cmp	r1, r6
   bdbfa:	d334      	bcc.n	bdc66 <rshift+0x96>
   bdbfc:	1a9b      	subs	r3, r3, r2
   bdbfe:	009b      	lsls	r3, r3, #2
   bdc00:	1eea      	subs	r2, r5, #3
   bdc02:	4296      	cmp	r6, r2
   bdc04:	bf38      	it	cc
   bdc06:	2300      	movcc	r3, #0
   bdc08:	4423      	add	r3, r4
   bdc0a:	e015      	b.n	bdc38 <rshift+0x68>
   bdc0c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bdc10:	f1c1 0820 	rsb	r8, r1, #32
   bdc14:	40cf      	lsrs	r7, r1
   bdc16:	f105 0e04 	add.w	lr, r5, #4
   bdc1a:	46a1      	mov	r9, r4
   bdc1c:	4576      	cmp	r6, lr
   bdc1e:	46f4      	mov	ip, lr
   bdc20:	d815      	bhi.n	bdc4e <rshift+0x7e>
   bdc22:	1a9a      	subs	r2, r3, r2
   bdc24:	0092      	lsls	r2, r2, #2
   bdc26:	3a04      	subs	r2, #4
   bdc28:	3501      	adds	r5, #1
   bdc2a:	42ae      	cmp	r6, r5
   bdc2c:	bf38      	it	cc
   bdc2e:	2200      	movcc	r2, #0
   bdc30:	18a3      	adds	r3, r4, r2
   bdc32:	50a7      	str	r7, [r4, r2]
   bdc34:	b107      	cbz	r7, bdc38 <rshift+0x68>
   bdc36:	3304      	adds	r3, #4
   bdc38:	1b1a      	subs	r2, r3, r4
   bdc3a:	42a3      	cmp	r3, r4
   bdc3c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bdc40:	bf08      	it	eq
   bdc42:	2300      	moveq	r3, #0
   bdc44:	6102      	str	r2, [r0, #16]
   bdc46:	bf08      	it	eq
   bdc48:	6143      	streq	r3, [r0, #20]
   bdc4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bdc4e:	f8dc c000 	ldr.w	ip, [ip]
   bdc52:	fa0c fc08 	lsl.w	ip, ip, r8
   bdc56:	ea4c 0707 	orr.w	r7, ip, r7
   bdc5a:	f849 7b04 	str.w	r7, [r9], #4
   bdc5e:	f85e 7b04 	ldr.w	r7, [lr], #4
   bdc62:	40cf      	lsrs	r7, r1
   bdc64:	e7da      	b.n	bdc1c <rshift+0x4c>
   bdc66:	f851 cb04 	ldr.w	ip, [r1], #4
   bdc6a:	f847 cf04 	str.w	ip, [r7, #4]!
   bdc6e:	e7c3      	b.n	bdbf8 <rshift+0x28>
   bdc70:	4623      	mov	r3, r4
   bdc72:	e7e1      	b.n	bdc38 <rshift+0x68>

000bdc74 <__hexdig_fun>:
   bdc74:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bdc78:	2b09      	cmp	r3, #9
   bdc7a:	d802      	bhi.n	bdc82 <__hexdig_fun+0xe>
   bdc7c:	3820      	subs	r0, #32
   bdc7e:	b2c0      	uxtb	r0, r0
   bdc80:	4770      	bx	lr
   bdc82:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bdc86:	2b05      	cmp	r3, #5
   bdc88:	d801      	bhi.n	bdc8e <__hexdig_fun+0x1a>
   bdc8a:	3847      	subs	r0, #71	; 0x47
   bdc8c:	e7f7      	b.n	bdc7e <__hexdig_fun+0xa>
   bdc8e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bdc92:	2b05      	cmp	r3, #5
   bdc94:	d801      	bhi.n	bdc9a <__hexdig_fun+0x26>
   bdc96:	3827      	subs	r0, #39	; 0x27
   bdc98:	e7f1      	b.n	bdc7e <__hexdig_fun+0xa>
   bdc9a:	2000      	movs	r0, #0
   bdc9c:	4770      	bx	lr
	...

000bdca0 <__gethex>:
   bdca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdca4:	ed2d 8b02 	vpush	{d8}
   bdca8:	b089      	sub	sp, #36	; 0x24
   bdcaa:	ee08 0a10 	vmov	s16, r0
   bdcae:	9304      	str	r3, [sp, #16]
   bdcb0:	4bb4      	ldr	r3, [pc, #720]	; (bdf84 <__gethex+0x2e4>)
   bdcb2:	681b      	ldr	r3, [r3, #0]
   bdcb4:	9301      	str	r3, [sp, #4]
   bdcb6:	4618      	mov	r0, r3
   bdcb8:	468b      	mov	fp, r1
   bdcba:	4690      	mov	r8, r2
   bdcbc:	f7fe ffde 	bl	bcc7c <strlen>
   bdcc0:	9b01      	ldr	r3, [sp, #4]
   bdcc2:	f8db 2000 	ldr.w	r2, [fp]
   bdcc6:	4403      	add	r3, r0
   bdcc8:	4682      	mov	sl, r0
   bdcca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bdcce:	9305      	str	r3, [sp, #20]
   bdcd0:	1c93      	adds	r3, r2, #2
   bdcd2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bdcd6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bdcda:	32fe      	adds	r2, #254	; 0xfe
   bdcdc:	18d1      	adds	r1, r2, r3
   bdcde:	461f      	mov	r7, r3
   bdce0:	f813 0b01 	ldrb.w	r0, [r3], #1
   bdce4:	9100      	str	r1, [sp, #0]
   bdce6:	2830      	cmp	r0, #48	; 0x30
   bdce8:	d0f8      	beq.n	bdcdc <__gethex+0x3c>
   bdcea:	f7ff ffc3 	bl	bdc74 <__hexdig_fun>
   bdcee:	4604      	mov	r4, r0
   bdcf0:	2800      	cmp	r0, #0
   bdcf2:	d13a      	bne.n	bdd6a <__gethex+0xca>
   bdcf4:	9901      	ldr	r1, [sp, #4]
   bdcf6:	4652      	mov	r2, sl
   bdcf8:	4638      	mov	r0, r7
   bdcfa:	f7fe ffc7 	bl	bcc8c <strncmp>
   bdcfe:	4605      	mov	r5, r0
   bdd00:	2800      	cmp	r0, #0
   bdd02:	d168      	bne.n	bddd6 <__gethex+0x136>
   bdd04:	f817 000a 	ldrb.w	r0, [r7, sl]
   bdd08:	eb07 060a 	add.w	r6, r7, sl
   bdd0c:	f7ff ffb2 	bl	bdc74 <__hexdig_fun>
   bdd10:	2800      	cmp	r0, #0
   bdd12:	d062      	beq.n	bddda <__gethex+0x13a>
   bdd14:	4633      	mov	r3, r6
   bdd16:	7818      	ldrb	r0, [r3, #0]
   bdd18:	2830      	cmp	r0, #48	; 0x30
   bdd1a:	461f      	mov	r7, r3
   bdd1c:	f103 0301 	add.w	r3, r3, #1
   bdd20:	d0f9      	beq.n	bdd16 <__gethex+0x76>
   bdd22:	f7ff ffa7 	bl	bdc74 <__hexdig_fun>
   bdd26:	2301      	movs	r3, #1
   bdd28:	fab0 f480 	clz	r4, r0
   bdd2c:	0964      	lsrs	r4, r4, #5
   bdd2e:	4635      	mov	r5, r6
   bdd30:	9300      	str	r3, [sp, #0]
   bdd32:	463a      	mov	r2, r7
   bdd34:	4616      	mov	r6, r2
   bdd36:	3201      	adds	r2, #1
   bdd38:	7830      	ldrb	r0, [r6, #0]
   bdd3a:	f7ff ff9b 	bl	bdc74 <__hexdig_fun>
   bdd3e:	2800      	cmp	r0, #0
   bdd40:	d1f8      	bne.n	bdd34 <__gethex+0x94>
   bdd42:	9901      	ldr	r1, [sp, #4]
   bdd44:	4652      	mov	r2, sl
   bdd46:	4630      	mov	r0, r6
   bdd48:	f7fe ffa0 	bl	bcc8c <strncmp>
   bdd4c:	b980      	cbnz	r0, bdd70 <__gethex+0xd0>
   bdd4e:	b94d      	cbnz	r5, bdd64 <__gethex+0xc4>
   bdd50:	eb06 050a 	add.w	r5, r6, sl
   bdd54:	462a      	mov	r2, r5
   bdd56:	4616      	mov	r6, r2
   bdd58:	3201      	adds	r2, #1
   bdd5a:	7830      	ldrb	r0, [r6, #0]
   bdd5c:	f7ff ff8a 	bl	bdc74 <__hexdig_fun>
   bdd60:	2800      	cmp	r0, #0
   bdd62:	d1f8      	bne.n	bdd56 <__gethex+0xb6>
   bdd64:	1bad      	subs	r5, r5, r6
   bdd66:	00ad      	lsls	r5, r5, #2
   bdd68:	e004      	b.n	bdd74 <__gethex+0xd4>
   bdd6a:	2400      	movs	r4, #0
   bdd6c:	4625      	mov	r5, r4
   bdd6e:	e7e0      	b.n	bdd32 <__gethex+0x92>
   bdd70:	2d00      	cmp	r5, #0
   bdd72:	d1f7      	bne.n	bdd64 <__gethex+0xc4>
   bdd74:	7833      	ldrb	r3, [r6, #0]
   bdd76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bdd7a:	2b50      	cmp	r3, #80	; 0x50
   bdd7c:	d13b      	bne.n	bddf6 <__gethex+0x156>
   bdd7e:	7873      	ldrb	r3, [r6, #1]
   bdd80:	2b2b      	cmp	r3, #43	; 0x2b
   bdd82:	d02c      	beq.n	bddde <__gethex+0x13e>
   bdd84:	2b2d      	cmp	r3, #45	; 0x2d
   bdd86:	d02e      	beq.n	bdde6 <__gethex+0x146>
   bdd88:	1c71      	adds	r1, r6, #1
   bdd8a:	f04f 0900 	mov.w	r9, #0
   bdd8e:	7808      	ldrb	r0, [r1, #0]
   bdd90:	f7ff ff70 	bl	bdc74 <__hexdig_fun>
   bdd94:	1e43      	subs	r3, r0, #1
   bdd96:	b2db      	uxtb	r3, r3
   bdd98:	2b18      	cmp	r3, #24
   bdd9a:	d82c      	bhi.n	bddf6 <__gethex+0x156>
   bdd9c:	f1a0 0210 	sub.w	r2, r0, #16
   bdda0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bdda4:	f7ff ff66 	bl	bdc74 <__hexdig_fun>
   bdda8:	1e43      	subs	r3, r0, #1
   bddaa:	b2db      	uxtb	r3, r3
   bddac:	2b18      	cmp	r3, #24
   bddae:	d91d      	bls.n	bddec <__gethex+0x14c>
   bddb0:	f1b9 0f00 	cmp.w	r9, #0
   bddb4:	d000      	beq.n	bddb8 <__gethex+0x118>
   bddb6:	4252      	negs	r2, r2
   bddb8:	4415      	add	r5, r2
   bddba:	f8cb 1000 	str.w	r1, [fp]
   bddbe:	b1e4      	cbz	r4, bddfa <__gethex+0x15a>
   bddc0:	9b00      	ldr	r3, [sp, #0]
   bddc2:	2b00      	cmp	r3, #0
   bddc4:	bf14      	ite	ne
   bddc6:	2700      	movne	r7, #0
   bddc8:	2706      	moveq	r7, #6
   bddca:	4638      	mov	r0, r7
   bddcc:	b009      	add	sp, #36	; 0x24
   bddce:	ecbd 8b02 	vpop	{d8}
   bddd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bddd6:	463e      	mov	r6, r7
   bddd8:	4625      	mov	r5, r4
   bddda:	2401      	movs	r4, #1
   bdddc:	e7ca      	b.n	bdd74 <__gethex+0xd4>
   bddde:	f04f 0900 	mov.w	r9, #0
   bdde2:	1cb1      	adds	r1, r6, #2
   bdde4:	e7d3      	b.n	bdd8e <__gethex+0xee>
   bdde6:	f04f 0901 	mov.w	r9, #1
   bddea:	e7fa      	b.n	bdde2 <__gethex+0x142>
   bddec:	230a      	movs	r3, #10
   bddee:	fb03 0202 	mla	r2, r3, r2, r0
   bddf2:	3a10      	subs	r2, #16
   bddf4:	e7d4      	b.n	bdda0 <__gethex+0x100>
   bddf6:	4631      	mov	r1, r6
   bddf8:	e7df      	b.n	bddba <__gethex+0x11a>
   bddfa:	1bf3      	subs	r3, r6, r7
   bddfc:	3b01      	subs	r3, #1
   bddfe:	4621      	mov	r1, r4
   bde00:	2b07      	cmp	r3, #7
   bde02:	dc0b      	bgt.n	bde1c <__gethex+0x17c>
   bde04:	ee18 0a10 	vmov	r0, s16
   bde08:	f000 fa68 	bl	be2dc <_Balloc>
   bde0c:	4604      	mov	r4, r0
   bde0e:	b940      	cbnz	r0, bde22 <__gethex+0x182>
   bde10:	4b5d      	ldr	r3, [pc, #372]	; (bdf88 <__gethex+0x2e8>)
   bde12:	4602      	mov	r2, r0
   bde14:	21de      	movs	r1, #222	; 0xde
   bde16:	485d      	ldr	r0, [pc, #372]	; (bdf8c <__gethex+0x2ec>)
   bde18:	f7fb fb96 	bl	b9548 <__assert_func>
   bde1c:	3101      	adds	r1, #1
   bde1e:	105b      	asrs	r3, r3, #1
   bde20:	e7ee      	b.n	bde00 <__gethex+0x160>
   bde22:	f100 0914 	add.w	r9, r0, #20
   bde26:	f04f 0b00 	mov.w	fp, #0
   bde2a:	f1ca 0301 	rsb	r3, sl, #1
   bde2e:	f8cd 9008 	str.w	r9, [sp, #8]
   bde32:	f8cd b000 	str.w	fp, [sp]
   bde36:	9306      	str	r3, [sp, #24]
   bde38:	42b7      	cmp	r7, r6
   bde3a:	d340      	bcc.n	bdebe <__gethex+0x21e>
   bde3c:	9802      	ldr	r0, [sp, #8]
   bde3e:	9b00      	ldr	r3, [sp, #0]
   bde40:	f840 3b04 	str.w	r3, [r0], #4
   bde44:	eba0 0009 	sub.w	r0, r0, r9
   bde48:	1080      	asrs	r0, r0, #2
   bde4a:	0146      	lsls	r6, r0, #5
   bde4c:	6120      	str	r0, [r4, #16]
   bde4e:	4618      	mov	r0, r3
   bde50:	f000 fb36 	bl	be4c0 <__hi0bits>
   bde54:	1a30      	subs	r0, r6, r0
   bde56:	f8d8 6000 	ldr.w	r6, [r8]
   bde5a:	42b0      	cmp	r0, r6
   bde5c:	dd63      	ble.n	bdf26 <__gethex+0x286>
   bde5e:	1b87      	subs	r7, r0, r6
   bde60:	4639      	mov	r1, r7
   bde62:	4620      	mov	r0, r4
   bde64:	f000 feda 	bl	bec1c <__any_on>
   bde68:	4682      	mov	sl, r0
   bde6a:	b1a8      	cbz	r0, bde98 <__gethex+0x1f8>
   bde6c:	1e7b      	subs	r3, r7, #1
   bde6e:	1159      	asrs	r1, r3, #5
   bde70:	f003 021f 	and.w	r2, r3, #31
   bde74:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bde78:	f04f 0a01 	mov.w	sl, #1
   bde7c:	fa0a f202 	lsl.w	r2, sl, r2
   bde80:	420a      	tst	r2, r1
   bde82:	d009      	beq.n	bde98 <__gethex+0x1f8>
   bde84:	4553      	cmp	r3, sl
   bde86:	dd05      	ble.n	bde94 <__gethex+0x1f4>
   bde88:	1eb9      	subs	r1, r7, #2
   bde8a:	4620      	mov	r0, r4
   bde8c:	f000 fec6 	bl	bec1c <__any_on>
   bde90:	2800      	cmp	r0, #0
   bde92:	d145      	bne.n	bdf20 <__gethex+0x280>
   bde94:	f04f 0a02 	mov.w	sl, #2
   bde98:	4639      	mov	r1, r7
   bde9a:	4620      	mov	r0, r4
   bde9c:	f7ff fe98 	bl	bdbd0 <rshift>
   bdea0:	443d      	add	r5, r7
   bdea2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bdea6:	42ab      	cmp	r3, r5
   bdea8:	da4c      	bge.n	bdf44 <__gethex+0x2a4>
   bdeaa:	ee18 0a10 	vmov	r0, s16
   bdeae:	4621      	mov	r1, r4
   bdeb0:	f000 fa54 	bl	be35c <_Bfree>
   bdeb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bdeb6:	2300      	movs	r3, #0
   bdeb8:	6013      	str	r3, [r2, #0]
   bdeba:	27a3      	movs	r7, #163	; 0xa3
   bdebc:	e785      	b.n	bddca <__gethex+0x12a>
   bdebe:	1e73      	subs	r3, r6, #1
   bdec0:	9a05      	ldr	r2, [sp, #20]
   bdec2:	9303      	str	r3, [sp, #12]
   bdec4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bdec8:	4293      	cmp	r3, r2
   bdeca:	d019      	beq.n	bdf00 <__gethex+0x260>
   bdecc:	f1bb 0f20 	cmp.w	fp, #32
   bded0:	d107      	bne.n	bdee2 <__gethex+0x242>
   bded2:	9b02      	ldr	r3, [sp, #8]
   bded4:	9a00      	ldr	r2, [sp, #0]
   bded6:	f843 2b04 	str.w	r2, [r3], #4
   bdeda:	9302      	str	r3, [sp, #8]
   bdedc:	2300      	movs	r3, #0
   bdede:	9300      	str	r3, [sp, #0]
   bdee0:	469b      	mov	fp, r3
   bdee2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bdee6:	f7ff fec5 	bl	bdc74 <__hexdig_fun>
   bdeea:	9b00      	ldr	r3, [sp, #0]
   bdeec:	f000 000f 	and.w	r0, r0, #15
   bdef0:	fa00 f00b 	lsl.w	r0, r0, fp
   bdef4:	4303      	orrs	r3, r0
   bdef6:	9300      	str	r3, [sp, #0]
   bdef8:	f10b 0b04 	add.w	fp, fp, #4
   bdefc:	9b03      	ldr	r3, [sp, #12]
   bdefe:	e00d      	b.n	bdf1c <__gethex+0x27c>
   bdf00:	9b03      	ldr	r3, [sp, #12]
   bdf02:	9a06      	ldr	r2, [sp, #24]
   bdf04:	4413      	add	r3, r2
   bdf06:	42bb      	cmp	r3, r7
   bdf08:	d3e0      	bcc.n	bdecc <__gethex+0x22c>
   bdf0a:	4618      	mov	r0, r3
   bdf0c:	9901      	ldr	r1, [sp, #4]
   bdf0e:	9307      	str	r3, [sp, #28]
   bdf10:	4652      	mov	r2, sl
   bdf12:	f7fe febb 	bl	bcc8c <strncmp>
   bdf16:	9b07      	ldr	r3, [sp, #28]
   bdf18:	2800      	cmp	r0, #0
   bdf1a:	d1d7      	bne.n	bdecc <__gethex+0x22c>
   bdf1c:	461e      	mov	r6, r3
   bdf1e:	e78b      	b.n	bde38 <__gethex+0x198>
   bdf20:	f04f 0a03 	mov.w	sl, #3
   bdf24:	e7b8      	b.n	bde98 <__gethex+0x1f8>
   bdf26:	da0a      	bge.n	bdf3e <__gethex+0x29e>
   bdf28:	1a37      	subs	r7, r6, r0
   bdf2a:	4621      	mov	r1, r4
   bdf2c:	ee18 0a10 	vmov	r0, s16
   bdf30:	463a      	mov	r2, r7
   bdf32:	f000 fc2f 	bl	be794 <__lshift>
   bdf36:	1bed      	subs	r5, r5, r7
   bdf38:	4604      	mov	r4, r0
   bdf3a:	f100 0914 	add.w	r9, r0, #20
   bdf3e:	f04f 0a00 	mov.w	sl, #0
   bdf42:	e7ae      	b.n	bdea2 <__gethex+0x202>
   bdf44:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bdf48:	42a8      	cmp	r0, r5
   bdf4a:	dd72      	ble.n	be032 <__gethex+0x392>
   bdf4c:	1b45      	subs	r5, r0, r5
   bdf4e:	42ae      	cmp	r6, r5
   bdf50:	dc36      	bgt.n	bdfc0 <__gethex+0x320>
   bdf52:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bdf56:	2b02      	cmp	r3, #2
   bdf58:	d02a      	beq.n	bdfb0 <__gethex+0x310>
   bdf5a:	2b03      	cmp	r3, #3
   bdf5c:	d02c      	beq.n	bdfb8 <__gethex+0x318>
   bdf5e:	2b01      	cmp	r3, #1
   bdf60:	d11c      	bne.n	bdf9c <__gethex+0x2fc>
   bdf62:	42ae      	cmp	r6, r5
   bdf64:	d11a      	bne.n	bdf9c <__gethex+0x2fc>
   bdf66:	2e01      	cmp	r6, #1
   bdf68:	d112      	bne.n	bdf90 <__gethex+0x2f0>
   bdf6a:	9a04      	ldr	r2, [sp, #16]
   bdf6c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bdf70:	6013      	str	r3, [r2, #0]
   bdf72:	2301      	movs	r3, #1
   bdf74:	6123      	str	r3, [r4, #16]
   bdf76:	f8c9 3000 	str.w	r3, [r9]
   bdf7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bdf7c:	2762      	movs	r7, #98	; 0x62
   bdf7e:	601c      	str	r4, [r3, #0]
   bdf80:	e723      	b.n	bddca <__gethex+0x12a>
   bdf82:	bf00      	nop
   bdf84:	000bfa04 	.word	0x000bfa04
   bdf88:	000bf991 	.word	0x000bf991
   bdf8c:	000bf9a2 	.word	0x000bf9a2
   bdf90:	1e71      	subs	r1, r6, #1
   bdf92:	4620      	mov	r0, r4
   bdf94:	f000 fe42 	bl	bec1c <__any_on>
   bdf98:	2800      	cmp	r0, #0
   bdf9a:	d1e6      	bne.n	bdf6a <__gethex+0x2ca>
   bdf9c:	ee18 0a10 	vmov	r0, s16
   bdfa0:	4621      	mov	r1, r4
   bdfa2:	f000 f9db 	bl	be35c <_Bfree>
   bdfa6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bdfa8:	2300      	movs	r3, #0
   bdfaa:	6013      	str	r3, [r2, #0]
   bdfac:	2750      	movs	r7, #80	; 0x50
   bdfae:	e70c      	b.n	bddca <__gethex+0x12a>
   bdfb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bdfb2:	2b00      	cmp	r3, #0
   bdfb4:	d1f2      	bne.n	bdf9c <__gethex+0x2fc>
   bdfb6:	e7d8      	b.n	bdf6a <__gethex+0x2ca>
   bdfb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bdfba:	2b00      	cmp	r3, #0
   bdfbc:	d1d5      	bne.n	bdf6a <__gethex+0x2ca>
   bdfbe:	e7ed      	b.n	bdf9c <__gethex+0x2fc>
   bdfc0:	1e6f      	subs	r7, r5, #1
   bdfc2:	f1ba 0f00 	cmp.w	sl, #0
   bdfc6:	d131      	bne.n	be02c <__gethex+0x38c>
   bdfc8:	b127      	cbz	r7, bdfd4 <__gethex+0x334>
   bdfca:	4639      	mov	r1, r7
   bdfcc:	4620      	mov	r0, r4
   bdfce:	f000 fe25 	bl	bec1c <__any_on>
   bdfd2:	4682      	mov	sl, r0
   bdfd4:	117b      	asrs	r3, r7, #5
   bdfd6:	2101      	movs	r1, #1
   bdfd8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bdfdc:	f007 071f 	and.w	r7, r7, #31
   bdfe0:	fa01 f707 	lsl.w	r7, r1, r7
   bdfe4:	421f      	tst	r7, r3
   bdfe6:	4629      	mov	r1, r5
   bdfe8:	4620      	mov	r0, r4
   bdfea:	bf18      	it	ne
   bdfec:	f04a 0a02 	orrne.w	sl, sl, #2
   bdff0:	1b76      	subs	r6, r6, r5
   bdff2:	f7ff fded 	bl	bdbd0 <rshift>
   bdff6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bdffa:	2702      	movs	r7, #2
   bdffc:	f1ba 0f00 	cmp.w	sl, #0
   be000:	d048      	beq.n	be094 <__gethex+0x3f4>
   be002:	f8d8 300c 	ldr.w	r3, [r8, #12]
   be006:	2b02      	cmp	r3, #2
   be008:	d015      	beq.n	be036 <__gethex+0x396>
   be00a:	2b03      	cmp	r3, #3
   be00c:	d017      	beq.n	be03e <__gethex+0x39e>
   be00e:	2b01      	cmp	r3, #1
   be010:	d109      	bne.n	be026 <__gethex+0x386>
   be012:	f01a 0f02 	tst.w	sl, #2
   be016:	d006      	beq.n	be026 <__gethex+0x386>
   be018:	f8d9 0000 	ldr.w	r0, [r9]
   be01c:	ea4a 0a00 	orr.w	sl, sl, r0
   be020:	f01a 0f01 	tst.w	sl, #1
   be024:	d10e      	bne.n	be044 <__gethex+0x3a4>
   be026:	f047 0710 	orr.w	r7, r7, #16
   be02a:	e033      	b.n	be094 <__gethex+0x3f4>
   be02c:	f04f 0a01 	mov.w	sl, #1
   be030:	e7d0      	b.n	bdfd4 <__gethex+0x334>
   be032:	2701      	movs	r7, #1
   be034:	e7e2      	b.n	bdffc <__gethex+0x35c>
   be036:	9b15      	ldr	r3, [sp, #84]	; 0x54
   be038:	f1c3 0301 	rsb	r3, r3, #1
   be03c:	9315      	str	r3, [sp, #84]	; 0x54
   be03e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   be040:	2b00      	cmp	r3, #0
   be042:	d0f0      	beq.n	be026 <__gethex+0x386>
   be044:	f8d4 b010 	ldr.w	fp, [r4, #16]
   be048:	f104 0314 	add.w	r3, r4, #20
   be04c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   be050:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   be054:	f04f 0c00 	mov.w	ip, #0
   be058:	4618      	mov	r0, r3
   be05a:	f853 2b04 	ldr.w	r2, [r3], #4
   be05e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   be062:	d01c      	beq.n	be09e <__gethex+0x3fe>
   be064:	3201      	adds	r2, #1
   be066:	6002      	str	r2, [r0, #0]
   be068:	2f02      	cmp	r7, #2
   be06a:	f104 0314 	add.w	r3, r4, #20
   be06e:	d13f      	bne.n	be0f0 <__gethex+0x450>
   be070:	f8d8 2000 	ldr.w	r2, [r8]
   be074:	3a01      	subs	r2, #1
   be076:	42b2      	cmp	r2, r6
   be078:	d10a      	bne.n	be090 <__gethex+0x3f0>
   be07a:	1171      	asrs	r1, r6, #5
   be07c:	2201      	movs	r2, #1
   be07e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   be082:	f006 061f 	and.w	r6, r6, #31
   be086:	fa02 f606 	lsl.w	r6, r2, r6
   be08a:	421e      	tst	r6, r3
   be08c:	bf18      	it	ne
   be08e:	4617      	movne	r7, r2
   be090:	f047 0720 	orr.w	r7, r7, #32
   be094:	9b14      	ldr	r3, [sp, #80]	; 0x50
   be096:	601c      	str	r4, [r3, #0]
   be098:	9b04      	ldr	r3, [sp, #16]
   be09a:	601d      	str	r5, [r3, #0]
   be09c:	e695      	b.n	bddca <__gethex+0x12a>
   be09e:	4299      	cmp	r1, r3
   be0a0:	f843 cc04 	str.w	ip, [r3, #-4]
   be0a4:	d8d8      	bhi.n	be058 <__gethex+0x3b8>
   be0a6:	68a3      	ldr	r3, [r4, #8]
   be0a8:	459b      	cmp	fp, r3
   be0aa:	db19      	blt.n	be0e0 <__gethex+0x440>
   be0ac:	6861      	ldr	r1, [r4, #4]
   be0ae:	ee18 0a10 	vmov	r0, s16
   be0b2:	3101      	adds	r1, #1
   be0b4:	f000 f912 	bl	be2dc <_Balloc>
   be0b8:	4681      	mov	r9, r0
   be0ba:	b918      	cbnz	r0, be0c4 <__gethex+0x424>
   be0bc:	4b1a      	ldr	r3, [pc, #104]	; (be128 <__gethex+0x488>)
   be0be:	4602      	mov	r2, r0
   be0c0:	2184      	movs	r1, #132	; 0x84
   be0c2:	e6a8      	b.n	bde16 <__gethex+0x176>
   be0c4:	6922      	ldr	r2, [r4, #16]
   be0c6:	3202      	adds	r2, #2
   be0c8:	f104 010c 	add.w	r1, r4, #12
   be0cc:	0092      	lsls	r2, r2, #2
   be0ce:	300c      	adds	r0, #12
   be0d0:	f7fe fd64 	bl	bcb9c <memcpy>
   be0d4:	4621      	mov	r1, r4
   be0d6:	ee18 0a10 	vmov	r0, s16
   be0da:	f000 f93f 	bl	be35c <_Bfree>
   be0de:	464c      	mov	r4, r9
   be0e0:	6923      	ldr	r3, [r4, #16]
   be0e2:	1c5a      	adds	r2, r3, #1
   be0e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   be0e8:	6122      	str	r2, [r4, #16]
   be0ea:	2201      	movs	r2, #1
   be0ec:	615a      	str	r2, [r3, #20]
   be0ee:	e7bb      	b.n	be068 <__gethex+0x3c8>
   be0f0:	6922      	ldr	r2, [r4, #16]
   be0f2:	455a      	cmp	r2, fp
   be0f4:	dd0b      	ble.n	be10e <__gethex+0x46e>
   be0f6:	2101      	movs	r1, #1
   be0f8:	4620      	mov	r0, r4
   be0fa:	f7ff fd69 	bl	bdbd0 <rshift>
   be0fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
   be102:	3501      	adds	r5, #1
   be104:	42ab      	cmp	r3, r5
   be106:	f6ff aed0 	blt.w	bdeaa <__gethex+0x20a>
   be10a:	2701      	movs	r7, #1
   be10c:	e7c0      	b.n	be090 <__gethex+0x3f0>
   be10e:	f016 061f 	ands.w	r6, r6, #31
   be112:	d0fa      	beq.n	be10a <__gethex+0x46a>
   be114:	4453      	add	r3, sl
   be116:	f1c6 0620 	rsb	r6, r6, #32
   be11a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   be11e:	f000 f9cf 	bl	be4c0 <__hi0bits>
   be122:	42b0      	cmp	r0, r6
   be124:	dbe7      	blt.n	be0f6 <__gethex+0x456>
   be126:	e7f0      	b.n	be10a <__gethex+0x46a>
   be128:	000bf991 	.word	0x000bf991

000be12c <L_shift>:
   be12c:	f1c2 0208 	rsb	r2, r2, #8
   be130:	0092      	lsls	r2, r2, #2
   be132:	b570      	push	{r4, r5, r6, lr}
   be134:	f1c2 0620 	rsb	r6, r2, #32
   be138:	6843      	ldr	r3, [r0, #4]
   be13a:	6804      	ldr	r4, [r0, #0]
   be13c:	fa03 f506 	lsl.w	r5, r3, r6
   be140:	432c      	orrs	r4, r5
   be142:	40d3      	lsrs	r3, r2
   be144:	6004      	str	r4, [r0, #0]
   be146:	f840 3f04 	str.w	r3, [r0, #4]!
   be14a:	4288      	cmp	r0, r1
   be14c:	d3f4      	bcc.n	be138 <L_shift+0xc>
   be14e:	bd70      	pop	{r4, r5, r6, pc}

000be150 <__match>:
   be150:	b530      	push	{r4, r5, lr}
   be152:	6803      	ldr	r3, [r0, #0]
   be154:	3301      	adds	r3, #1
   be156:	f811 4b01 	ldrb.w	r4, [r1], #1
   be15a:	b914      	cbnz	r4, be162 <__match+0x12>
   be15c:	6003      	str	r3, [r0, #0]
   be15e:	2001      	movs	r0, #1
   be160:	bd30      	pop	{r4, r5, pc}
   be162:	f813 2b01 	ldrb.w	r2, [r3], #1
   be166:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   be16a:	2d19      	cmp	r5, #25
   be16c:	bf98      	it	ls
   be16e:	3220      	addls	r2, #32
   be170:	42a2      	cmp	r2, r4
   be172:	d0f0      	beq.n	be156 <__match+0x6>
   be174:	2000      	movs	r0, #0
   be176:	e7f3      	b.n	be160 <__match+0x10>

000be178 <__hexnan>:
   be178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be17c:	680b      	ldr	r3, [r1, #0]
   be17e:	115e      	asrs	r6, r3, #5
   be180:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   be184:	f013 031f 	ands.w	r3, r3, #31
   be188:	b087      	sub	sp, #28
   be18a:	bf18      	it	ne
   be18c:	3604      	addne	r6, #4
   be18e:	2500      	movs	r5, #0
   be190:	1f37      	subs	r7, r6, #4
   be192:	4690      	mov	r8, r2
   be194:	6802      	ldr	r2, [r0, #0]
   be196:	9301      	str	r3, [sp, #4]
   be198:	4682      	mov	sl, r0
   be19a:	f846 5c04 	str.w	r5, [r6, #-4]
   be19e:	46b9      	mov	r9, r7
   be1a0:	463c      	mov	r4, r7
   be1a2:	9502      	str	r5, [sp, #8]
   be1a4:	46ab      	mov	fp, r5
   be1a6:	7851      	ldrb	r1, [r2, #1]
   be1a8:	1c53      	adds	r3, r2, #1
   be1aa:	9303      	str	r3, [sp, #12]
   be1ac:	b341      	cbz	r1, be200 <__hexnan+0x88>
   be1ae:	4608      	mov	r0, r1
   be1b0:	9205      	str	r2, [sp, #20]
   be1b2:	9104      	str	r1, [sp, #16]
   be1b4:	f7ff fd5e 	bl	bdc74 <__hexdig_fun>
   be1b8:	2800      	cmp	r0, #0
   be1ba:	d14f      	bne.n	be25c <__hexnan+0xe4>
   be1bc:	9904      	ldr	r1, [sp, #16]
   be1be:	9a05      	ldr	r2, [sp, #20]
   be1c0:	2920      	cmp	r1, #32
   be1c2:	d818      	bhi.n	be1f6 <__hexnan+0x7e>
   be1c4:	9b02      	ldr	r3, [sp, #8]
   be1c6:	459b      	cmp	fp, r3
   be1c8:	dd13      	ble.n	be1f2 <__hexnan+0x7a>
   be1ca:	454c      	cmp	r4, r9
   be1cc:	d206      	bcs.n	be1dc <__hexnan+0x64>
   be1ce:	2d07      	cmp	r5, #7
   be1d0:	dc04      	bgt.n	be1dc <__hexnan+0x64>
   be1d2:	462a      	mov	r2, r5
   be1d4:	4649      	mov	r1, r9
   be1d6:	4620      	mov	r0, r4
   be1d8:	f7ff ffa8 	bl	be12c <L_shift>
   be1dc:	4544      	cmp	r4, r8
   be1de:	d950      	bls.n	be282 <__hexnan+0x10a>
   be1e0:	2300      	movs	r3, #0
   be1e2:	f1a4 0904 	sub.w	r9, r4, #4
   be1e6:	f844 3c04 	str.w	r3, [r4, #-4]
   be1ea:	f8cd b008 	str.w	fp, [sp, #8]
   be1ee:	464c      	mov	r4, r9
   be1f0:	461d      	mov	r5, r3
   be1f2:	9a03      	ldr	r2, [sp, #12]
   be1f4:	e7d7      	b.n	be1a6 <__hexnan+0x2e>
   be1f6:	2929      	cmp	r1, #41	; 0x29
   be1f8:	d156      	bne.n	be2a8 <__hexnan+0x130>
   be1fa:	3202      	adds	r2, #2
   be1fc:	f8ca 2000 	str.w	r2, [sl]
   be200:	f1bb 0f00 	cmp.w	fp, #0
   be204:	d050      	beq.n	be2a8 <__hexnan+0x130>
   be206:	454c      	cmp	r4, r9
   be208:	d206      	bcs.n	be218 <__hexnan+0xa0>
   be20a:	2d07      	cmp	r5, #7
   be20c:	dc04      	bgt.n	be218 <__hexnan+0xa0>
   be20e:	462a      	mov	r2, r5
   be210:	4649      	mov	r1, r9
   be212:	4620      	mov	r0, r4
   be214:	f7ff ff8a 	bl	be12c <L_shift>
   be218:	4544      	cmp	r4, r8
   be21a:	d934      	bls.n	be286 <__hexnan+0x10e>
   be21c:	f1a8 0204 	sub.w	r2, r8, #4
   be220:	4623      	mov	r3, r4
   be222:	f853 1b04 	ldr.w	r1, [r3], #4
   be226:	f842 1f04 	str.w	r1, [r2, #4]!
   be22a:	429f      	cmp	r7, r3
   be22c:	d2f9      	bcs.n	be222 <__hexnan+0xaa>
   be22e:	1b3b      	subs	r3, r7, r4
   be230:	f023 0303 	bic.w	r3, r3, #3
   be234:	3304      	adds	r3, #4
   be236:	3401      	adds	r4, #1
   be238:	3e03      	subs	r6, #3
   be23a:	42b4      	cmp	r4, r6
   be23c:	bf88      	it	hi
   be23e:	2304      	movhi	r3, #4
   be240:	4443      	add	r3, r8
   be242:	2200      	movs	r2, #0
   be244:	f843 2b04 	str.w	r2, [r3], #4
   be248:	429f      	cmp	r7, r3
   be24a:	d2fb      	bcs.n	be244 <__hexnan+0xcc>
   be24c:	683b      	ldr	r3, [r7, #0]
   be24e:	b91b      	cbnz	r3, be258 <__hexnan+0xe0>
   be250:	4547      	cmp	r7, r8
   be252:	d127      	bne.n	be2a4 <__hexnan+0x12c>
   be254:	2301      	movs	r3, #1
   be256:	603b      	str	r3, [r7, #0]
   be258:	2005      	movs	r0, #5
   be25a:	e026      	b.n	be2aa <__hexnan+0x132>
   be25c:	3501      	adds	r5, #1
   be25e:	2d08      	cmp	r5, #8
   be260:	f10b 0b01 	add.w	fp, fp, #1
   be264:	dd06      	ble.n	be274 <__hexnan+0xfc>
   be266:	4544      	cmp	r4, r8
   be268:	d9c3      	bls.n	be1f2 <__hexnan+0x7a>
   be26a:	2300      	movs	r3, #0
   be26c:	f844 3c04 	str.w	r3, [r4, #-4]
   be270:	2501      	movs	r5, #1
   be272:	3c04      	subs	r4, #4
   be274:	6822      	ldr	r2, [r4, #0]
   be276:	f000 000f 	and.w	r0, r0, #15
   be27a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   be27e:	6022      	str	r2, [r4, #0]
   be280:	e7b7      	b.n	be1f2 <__hexnan+0x7a>
   be282:	2508      	movs	r5, #8
   be284:	e7b5      	b.n	be1f2 <__hexnan+0x7a>
   be286:	9b01      	ldr	r3, [sp, #4]
   be288:	2b00      	cmp	r3, #0
   be28a:	d0df      	beq.n	be24c <__hexnan+0xd4>
   be28c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   be290:	f1c3 0320 	rsb	r3, r3, #32
   be294:	fa22 f303 	lsr.w	r3, r2, r3
   be298:	f856 2c04 	ldr.w	r2, [r6, #-4]
   be29c:	401a      	ands	r2, r3
   be29e:	f846 2c04 	str.w	r2, [r6, #-4]
   be2a2:	e7d3      	b.n	be24c <__hexnan+0xd4>
   be2a4:	3f04      	subs	r7, #4
   be2a6:	e7d1      	b.n	be24c <__hexnan+0xd4>
   be2a8:	2004      	movs	r0, #4
   be2aa:	b007      	add	sp, #28
   be2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000be2b0 <__retarget_lock_acquire_recursive>:
   be2b0:	4770      	bx	lr

000be2b2 <__retarget_lock_release>:
   be2b2:	4770      	bx	lr

000be2b4 <__retarget_lock_release_recursive>:
   be2b4:	4770      	bx	lr

000be2b6 <__ascii_mbtowc>:
   be2b6:	b082      	sub	sp, #8
   be2b8:	b901      	cbnz	r1, be2bc <__ascii_mbtowc+0x6>
   be2ba:	a901      	add	r1, sp, #4
   be2bc:	b142      	cbz	r2, be2d0 <__ascii_mbtowc+0x1a>
   be2be:	b14b      	cbz	r3, be2d4 <__ascii_mbtowc+0x1e>
   be2c0:	7813      	ldrb	r3, [r2, #0]
   be2c2:	600b      	str	r3, [r1, #0]
   be2c4:	7812      	ldrb	r2, [r2, #0]
   be2c6:	1e10      	subs	r0, r2, #0
   be2c8:	bf18      	it	ne
   be2ca:	2001      	movne	r0, #1
   be2cc:	b002      	add	sp, #8
   be2ce:	4770      	bx	lr
   be2d0:	4610      	mov	r0, r2
   be2d2:	e7fb      	b.n	be2cc <__ascii_mbtowc+0x16>
   be2d4:	f06f 0001 	mvn.w	r0, #1
   be2d8:	e7f8      	b.n	be2cc <__ascii_mbtowc+0x16>
	...

000be2dc <_Balloc>:
   be2dc:	b570      	push	{r4, r5, r6, lr}
   be2de:	6a46      	ldr	r6, [r0, #36]	; 0x24
   be2e0:	4604      	mov	r4, r0
   be2e2:	460d      	mov	r5, r1
   be2e4:	b976      	cbnz	r6, be304 <_Balloc+0x28>
   be2e6:	2010      	movs	r0, #16
   be2e8:	f7fb f8ee 	bl	b94c8 <malloc>
   be2ec:	4602      	mov	r2, r0
   be2ee:	6260      	str	r0, [r4, #36]	; 0x24
   be2f0:	b920      	cbnz	r0, be2fc <_Balloc+0x20>
   be2f2:	4b18      	ldr	r3, [pc, #96]	; (be354 <_Balloc+0x78>)
   be2f4:	4818      	ldr	r0, [pc, #96]	; (be358 <_Balloc+0x7c>)
   be2f6:	2166      	movs	r1, #102	; 0x66
   be2f8:	f7fb f926 	bl	b9548 <__assert_func>
   be2fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   be300:	6006      	str	r6, [r0, #0]
   be302:	60c6      	str	r6, [r0, #12]
   be304:	6a66      	ldr	r6, [r4, #36]	; 0x24
   be306:	68f3      	ldr	r3, [r6, #12]
   be308:	b183      	cbz	r3, be32c <_Balloc+0x50>
   be30a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   be30c:	68db      	ldr	r3, [r3, #12]
   be30e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   be312:	b9b8      	cbnz	r0, be344 <_Balloc+0x68>
   be314:	2101      	movs	r1, #1
   be316:	fa01 f605 	lsl.w	r6, r1, r5
   be31a:	1d72      	adds	r2, r6, #5
   be31c:	0092      	lsls	r2, r2, #2
   be31e:	4620      	mov	r0, r4
   be320:	f000 fc9d 	bl	bec5e <_calloc_r>
   be324:	b160      	cbz	r0, be340 <_Balloc+0x64>
   be326:	e9c0 5601 	strd	r5, r6, [r0, #4]
   be32a:	e00e      	b.n	be34a <_Balloc+0x6e>
   be32c:	2221      	movs	r2, #33	; 0x21
   be32e:	2104      	movs	r1, #4
   be330:	4620      	mov	r0, r4
   be332:	f000 fc94 	bl	bec5e <_calloc_r>
   be336:	6a63      	ldr	r3, [r4, #36]	; 0x24
   be338:	60f0      	str	r0, [r6, #12]
   be33a:	68db      	ldr	r3, [r3, #12]
   be33c:	2b00      	cmp	r3, #0
   be33e:	d1e4      	bne.n	be30a <_Balloc+0x2e>
   be340:	2000      	movs	r0, #0
   be342:	bd70      	pop	{r4, r5, r6, pc}
   be344:	6802      	ldr	r2, [r0, #0]
   be346:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   be34a:	2300      	movs	r3, #0
   be34c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   be350:	e7f7      	b.n	be342 <_Balloc+0x66>
   be352:	bf00      	nop
   be354:	000bf7bd 	.word	0x000bf7bd
   be358:	000bfa18 	.word	0x000bfa18

000be35c <_Bfree>:
   be35c:	b570      	push	{r4, r5, r6, lr}
   be35e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   be360:	4605      	mov	r5, r0
   be362:	460c      	mov	r4, r1
   be364:	b976      	cbnz	r6, be384 <_Bfree+0x28>
   be366:	2010      	movs	r0, #16
   be368:	f7fb f8ae 	bl	b94c8 <malloc>
   be36c:	4602      	mov	r2, r0
   be36e:	6268      	str	r0, [r5, #36]	; 0x24
   be370:	b920      	cbnz	r0, be37c <_Bfree+0x20>
   be372:	4b09      	ldr	r3, [pc, #36]	; (be398 <_Bfree+0x3c>)
   be374:	4809      	ldr	r0, [pc, #36]	; (be39c <_Bfree+0x40>)
   be376:	218a      	movs	r1, #138	; 0x8a
   be378:	f7fb f8e6 	bl	b9548 <__assert_func>
   be37c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   be380:	6006      	str	r6, [r0, #0]
   be382:	60c6      	str	r6, [r0, #12]
   be384:	b13c      	cbz	r4, be396 <_Bfree+0x3a>
   be386:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   be388:	6862      	ldr	r2, [r4, #4]
   be38a:	68db      	ldr	r3, [r3, #12]
   be38c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   be390:	6021      	str	r1, [r4, #0]
   be392:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   be396:	bd70      	pop	{r4, r5, r6, pc}
   be398:	000bf7bd 	.word	0x000bf7bd
   be39c:	000bfa18 	.word	0x000bfa18

000be3a0 <__multadd>:
   be3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   be3a4:	690d      	ldr	r5, [r1, #16]
   be3a6:	4607      	mov	r7, r0
   be3a8:	460c      	mov	r4, r1
   be3aa:	461e      	mov	r6, r3
   be3ac:	f101 0c14 	add.w	ip, r1, #20
   be3b0:	2000      	movs	r0, #0
   be3b2:	f8dc 3000 	ldr.w	r3, [ip]
   be3b6:	b299      	uxth	r1, r3
   be3b8:	fb02 6101 	mla	r1, r2, r1, r6
   be3bc:	0c1e      	lsrs	r6, r3, #16
   be3be:	0c0b      	lsrs	r3, r1, #16
   be3c0:	fb02 3306 	mla	r3, r2, r6, r3
   be3c4:	b289      	uxth	r1, r1
   be3c6:	3001      	adds	r0, #1
   be3c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   be3cc:	4285      	cmp	r5, r0
   be3ce:	f84c 1b04 	str.w	r1, [ip], #4
   be3d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
   be3d6:	dcec      	bgt.n	be3b2 <__multadd+0x12>
   be3d8:	b30e      	cbz	r6, be41e <__multadd+0x7e>
   be3da:	68a3      	ldr	r3, [r4, #8]
   be3dc:	42ab      	cmp	r3, r5
   be3de:	dc19      	bgt.n	be414 <__multadd+0x74>
   be3e0:	6861      	ldr	r1, [r4, #4]
   be3e2:	4638      	mov	r0, r7
   be3e4:	3101      	adds	r1, #1
   be3e6:	f7ff ff79 	bl	be2dc <_Balloc>
   be3ea:	4680      	mov	r8, r0
   be3ec:	b928      	cbnz	r0, be3fa <__multadd+0x5a>
   be3ee:	4602      	mov	r2, r0
   be3f0:	4b0c      	ldr	r3, [pc, #48]	; (be424 <__multadd+0x84>)
   be3f2:	480d      	ldr	r0, [pc, #52]	; (be428 <__multadd+0x88>)
   be3f4:	21b5      	movs	r1, #181	; 0xb5
   be3f6:	f7fb f8a7 	bl	b9548 <__assert_func>
   be3fa:	6922      	ldr	r2, [r4, #16]
   be3fc:	3202      	adds	r2, #2
   be3fe:	f104 010c 	add.w	r1, r4, #12
   be402:	0092      	lsls	r2, r2, #2
   be404:	300c      	adds	r0, #12
   be406:	f7fe fbc9 	bl	bcb9c <memcpy>
   be40a:	4621      	mov	r1, r4
   be40c:	4638      	mov	r0, r7
   be40e:	f7ff ffa5 	bl	be35c <_Bfree>
   be412:	4644      	mov	r4, r8
   be414:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   be418:	3501      	adds	r5, #1
   be41a:	615e      	str	r6, [r3, #20]
   be41c:	6125      	str	r5, [r4, #16]
   be41e:	4620      	mov	r0, r4
   be420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   be424:	000bf991 	.word	0x000bf991
   be428:	000bfa18 	.word	0x000bfa18

000be42c <__s2b>:
   be42c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   be430:	460c      	mov	r4, r1
   be432:	4615      	mov	r5, r2
   be434:	461f      	mov	r7, r3
   be436:	2209      	movs	r2, #9
   be438:	3308      	adds	r3, #8
   be43a:	4606      	mov	r6, r0
   be43c:	fb93 f3f2 	sdiv	r3, r3, r2
   be440:	2100      	movs	r1, #0
   be442:	2201      	movs	r2, #1
   be444:	429a      	cmp	r2, r3
   be446:	db09      	blt.n	be45c <__s2b+0x30>
   be448:	4630      	mov	r0, r6
   be44a:	f7ff ff47 	bl	be2dc <_Balloc>
   be44e:	b940      	cbnz	r0, be462 <__s2b+0x36>
   be450:	4602      	mov	r2, r0
   be452:	4b19      	ldr	r3, [pc, #100]	; (be4b8 <__s2b+0x8c>)
   be454:	4819      	ldr	r0, [pc, #100]	; (be4bc <__s2b+0x90>)
   be456:	21ce      	movs	r1, #206	; 0xce
   be458:	f7fb f876 	bl	b9548 <__assert_func>
   be45c:	0052      	lsls	r2, r2, #1
   be45e:	3101      	adds	r1, #1
   be460:	e7f0      	b.n	be444 <__s2b+0x18>
   be462:	9b08      	ldr	r3, [sp, #32]
   be464:	6143      	str	r3, [r0, #20]
   be466:	2d09      	cmp	r5, #9
   be468:	f04f 0301 	mov.w	r3, #1
   be46c:	6103      	str	r3, [r0, #16]
   be46e:	dd16      	ble.n	be49e <__s2b+0x72>
   be470:	f104 0909 	add.w	r9, r4, #9
   be474:	46c8      	mov	r8, r9
   be476:	442c      	add	r4, r5
   be478:	f818 3b01 	ldrb.w	r3, [r8], #1
   be47c:	4601      	mov	r1, r0
   be47e:	3b30      	subs	r3, #48	; 0x30
   be480:	220a      	movs	r2, #10
   be482:	4630      	mov	r0, r6
   be484:	f7ff ff8c 	bl	be3a0 <__multadd>
   be488:	45a0      	cmp	r8, r4
   be48a:	d1f5      	bne.n	be478 <__s2b+0x4c>
   be48c:	f1a5 0408 	sub.w	r4, r5, #8
   be490:	444c      	add	r4, r9
   be492:	1b2d      	subs	r5, r5, r4
   be494:	1963      	adds	r3, r4, r5
   be496:	42bb      	cmp	r3, r7
   be498:	db04      	blt.n	be4a4 <__s2b+0x78>
   be49a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   be49e:	340a      	adds	r4, #10
   be4a0:	2509      	movs	r5, #9
   be4a2:	e7f6      	b.n	be492 <__s2b+0x66>
   be4a4:	f814 3b01 	ldrb.w	r3, [r4], #1
   be4a8:	4601      	mov	r1, r0
   be4aa:	3b30      	subs	r3, #48	; 0x30
   be4ac:	220a      	movs	r2, #10
   be4ae:	4630      	mov	r0, r6
   be4b0:	f7ff ff76 	bl	be3a0 <__multadd>
   be4b4:	e7ee      	b.n	be494 <__s2b+0x68>
   be4b6:	bf00      	nop
   be4b8:	000bf991 	.word	0x000bf991
   be4bc:	000bfa18 	.word	0x000bfa18

000be4c0 <__hi0bits>:
   be4c0:	0c03      	lsrs	r3, r0, #16
   be4c2:	041b      	lsls	r3, r3, #16
   be4c4:	b9d3      	cbnz	r3, be4fc <__hi0bits+0x3c>
   be4c6:	0400      	lsls	r0, r0, #16
   be4c8:	2310      	movs	r3, #16
   be4ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   be4ce:	bf04      	itt	eq
   be4d0:	0200      	lsleq	r0, r0, #8
   be4d2:	3308      	addeq	r3, #8
   be4d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   be4d8:	bf04      	itt	eq
   be4da:	0100      	lsleq	r0, r0, #4
   be4dc:	3304      	addeq	r3, #4
   be4de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   be4e2:	bf04      	itt	eq
   be4e4:	0080      	lsleq	r0, r0, #2
   be4e6:	3302      	addeq	r3, #2
   be4e8:	2800      	cmp	r0, #0
   be4ea:	db05      	blt.n	be4f8 <__hi0bits+0x38>
   be4ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   be4f0:	f103 0301 	add.w	r3, r3, #1
   be4f4:	bf08      	it	eq
   be4f6:	2320      	moveq	r3, #32
   be4f8:	4618      	mov	r0, r3
   be4fa:	4770      	bx	lr
   be4fc:	2300      	movs	r3, #0
   be4fe:	e7e4      	b.n	be4ca <__hi0bits+0xa>

000be500 <__lo0bits>:
   be500:	6803      	ldr	r3, [r0, #0]
   be502:	f013 0207 	ands.w	r2, r3, #7
   be506:	4601      	mov	r1, r0
   be508:	d00b      	beq.n	be522 <__lo0bits+0x22>
   be50a:	07da      	lsls	r2, r3, #31
   be50c:	d423      	bmi.n	be556 <__lo0bits+0x56>
   be50e:	0798      	lsls	r0, r3, #30
   be510:	bf49      	itett	mi
   be512:	085b      	lsrmi	r3, r3, #1
   be514:	089b      	lsrpl	r3, r3, #2
   be516:	2001      	movmi	r0, #1
   be518:	600b      	strmi	r3, [r1, #0]
   be51a:	bf5c      	itt	pl
   be51c:	600b      	strpl	r3, [r1, #0]
   be51e:	2002      	movpl	r0, #2
   be520:	4770      	bx	lr
   be522:	b298      	uxth	r0, r3
   be524:	b9a8      	cbnz	r0, be552 <__lo0bits+0x52>
   be526:	0c1b      	lsrs	r3, r3, #16
   be528:	2010      	movs	r0, #16
   be52a:	b2da      	uxtb	r2, r3
   be52c:	b90a      	cbnz	r2, be532 <__lo0bits+0x32>
   be52e:	3008      	adds	r0, #8
   be530:	0a1b      	lsrs	r3, r3, #8
   be532:	071a      	lsls	r2, r3, #28
   be534:	bf04      	itt	eq
   be536:	091b      	lsreq	r3, r3, #4
   be538:	3004      	addeq	r0, #4
   be53a:	079a      	lsls	r2, r3, #30
   be53c:	bf04      	itt	eq
   be53e:	089b      	lsreq	r3, r3, #2
   be540:	3002      	addeq	r0, #2
   be542:	07da      	lsls	r2, r3, #31
   be544:	d403      	bmi.n	be54e <__lo0bits+0x4e>
   be546:	085b      	lsrs	r3, r3, #1
   be548:	f100 0001 	add.w	r0, r0, #1
   be54c:	d005      	beq.n	be55a <__lo0bits+0x5a>
   be54e:	600b      	str	r3, [r1, #0]
   be550:	4770      	bx	lr
   be552:	4610      	mov	r0, r2
   be554:	e7e9      	b.n	be52a <__lo0bits+0x2a>
   be556:	2000      	movs	r0, #0
   be558:	4770      	bx	lr
   be55a:	2020      	movs	r0, #32
   be55c:	4770      	bx	lr
	...

000be560 <__i2b>:
   be560:	b510      	push	{r4, lr}
   be562:	460c      	mov	r4, r1
   be564:	2101      	movs	r1, #1
   be566:	f7ff feb9 	bl	be2dc <_Balloc>
   be56a:	4602      	mov	r2, r0
   be56c:	b928      	cbnz	r0, be57a <__i2b+0x1a>
   be56e:	4b05      	ldr	r3, [pc, #20]	; (be584 <__i2b+0x24>)
   be570:	4805      	ldr	r0, [pc, #20]	; (be588 <__i2b+0x28>)
   be572:	f44f 71a0 	mov.w	r1, #320	; 0x140
   be576:	f7fa ffe7 	bl	b9548 <__assert_func>
   be57a:	2301      	movs	r3, #1
   be57c:	6144      	str	r4, [r0, #20]
   be57e:	6103      	str	r3, [r0, #16]
   be580:	bd10      	pop	{r4, pc}
   be582:	bf00      	nop
   be584:	000bf991 	.word	0x000bf991
   be588:	000bfa18 	.word	0x000bfa18

000be58c <__multiply>:
   be58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be590:	4691      	mov	r9, r2
   be592:	690a      	ldr	r2, [r1, #16]
   be594:	f8d9 3010 	ldr.w	r3, [r9, #16]
   be598:	429a      	cmp	r2, r3
   be59a:	bfb8      	it	lt
   be59c:	460b      	movlt	r3, r1
   be59e:	460c      	mov	r4, r1
   be5a0:	bfbc      	itt	lt
   be5a2:	464c      	movlt	r4, r9
   be5a4:	4699      	movlt	r9, r3
   be5a6:	6927      	ldr	r7, [r4, #16]
   be5a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
   be5ac:	68a3      	ldr	r3, [r4, #8]
   be5ae:	6861      	ldr	r1, [r4, #4]
   be5b0:	eb07 060a 	add.w	r6, r7, sl
   be5b4:	42b3      	cmp	r3, r6
   be5b6:	b085      	sub	sp, #20
   be5b8:	bfb8      	it	lt
   be5ba:	3101      	addlt	r1, #1
   be5bc:	f7ff fe8e 	bl	be2dc <_Balloc>
   be5c0:	b930      	cbnz	r0, be5d0 <__multiply+0x44>
   be5c2:	4602      	mov	r2, r0
   be5c4:	4b44      	ldr	r3, [pc, #272]	; (be6d8 <__multiply+0x14c>)
   be5c6:	4845      	ldr	r0, [pc, #276]	; (be6dc <__multiply+0x150>)
   be5c8:	f240 115d 	movw	r1, #349	; 0x15d
   be5cc:	f7fa ffbc 	bl	b9548 <__assert_func>
   be5d0:	f100 0514 	add.w	r5, r0, #20
   be5d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   be5d8:	462b      	mov	r3, r5
   be5da:	2200      	movs	r2, #0
   be5dc:	4543      	cmp	r3, r8
   be5de:	d321      	bcc.n	be624 <__multiply+0x98>
   be5e0:	f104 0314 	add.w	r3, r4, #20
   be5e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   be5e8:	f109 0314 	add.w	r3, r9, #20
   be5ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   be5f0:	9202      	str	r2, [sp, #8]
   be5f2:	1b3a      	subs	r2, r7, r4
   be5f4:	3a15      	subs	r2, #21
   be5f6:	f022 0203 	bic.w	r2, r2, #3
   be5fa:	3204      	adds	r2, #4
   be5fc:	f104 0115 	add.w	r1, r4, #21
   be600:	428f      	cmp	r7, r1
   be602:	bf38      	it	cc
   be604:	2204      	movcc	r2, #4
   be606:	9201      	str	r2, [sp, #4]
   be608:	9a02      	ldr	r2, [sp, #8]
   be60a:	9303      	str	r3, [sp, #12]
   be60c:	429a      	cmp	r2, r3
   be60e:	d80c      	bhi.n	be62a <__multiply+0x9e>
   be610:	2e00      	cmp	r6, #0
   be612:	dd03      	ble.n	be61c <__multiply+0x90>
   be614:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   be618:	2b00      	cmp	r3, #0
   be61a:	d05a      	beq.n	be6d2 <__multiply+0x146>
   be61c:	6106      	str	r6, [r0, #16]
   be61e:	b005      	add	sp, #20
   be620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be624:	f843 2b04 	str.w	r2, [r3], #4
   be628:	e7d8      	b.n	be5dc <__multiply+0x50>
   be62a:	f8b3 a000 	ldrh.w	sl, [r3]
   be62e:	f1ba 0f00 	cmp.w	sl, #0
   be632:	d024      	beq.n	be67e <__multiply+0xf2>
   be634:	f104 0e14 	add.w	lr, r4, #20
   be638:	46a9      	mov	r9, r5
   be63a:	f04f 0c00 	mov.w	ip, #0
   be63e:	f85e 2b04 	ldr.w	r2, [lr], #4
   be642:	f8d9 1000 	ldr.w	r1, [r9]
   be646:	fa1f fb82 	uxth.w	fp, r2
   be64a:	b289      	uxth	r1, r1
   be64c:	fb0a 110b 	mla	r1, sl, fp, r1
   be650:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   be654:	f8d9 2000 	ldr.w	r2, [r9]
   be658:	4461      	add	r1, ip
   be65a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   be65e:	fb0a c20b 	mla	r2, sl, fp, ip
   be662:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   be666:	b289      	uxth	r1, r1
   be668:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   be66c:	4577      	cmp	r7, lr
   be66e:	f849 1b04 	str.w	r1, [r9], #4
   be672:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   be676:	d8e2      	bhi.n	be63e <__multiply+0xb2>
   be678:	9a01      	ldr	r2, [sp, #4]
   be67a:	f845 c002 	str.w	ip, [r5, r2]
   be67e:	9a03      	ldr	r2, [sp, #12]
   be680:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   be684:	3304      	adds	r3, #4
   be686:	f1b9 0f00 	cmp.w	r9, #0
   be68a:	d020      	beq.n	be6ce <__multiply+0x142>
   be68c:	6829      	ldr	r1, [r5, #0]
   be68e:	f104 0c14 	add.w	ip, r4, #20
   be692:	46ae      	mov	lr, r5
   be694:	f04f 0a00 	mov.w	sl, #0
   be698:	f8bc b000 	ldrh.w	fp, [ip]
   be69c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   be6a0:	fb09 220b 	mla	r2, r9, fp, r2
   be6a4:	4492      	add	sl, r2
   be6a6:	b289      	uxth	r1, r1
   be6a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   be6ac:	f84e 1b04 	str.w	r1, [lr], #4
   be6b0:	f85c 2b04 	ldr.w	r2, [ip], #4
   be6b4:	f8be 1000 	ldrh.w	r1, [lr]
   be6b8:	0c12      	lsrs	r2, r2, #16
   be6ba:	fb09 1102 	mla	r1, r9, r2, r1
   be6be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   be6c2:	4567      	cmp	r7, ip
   be6c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   be6c8:	d8e6      	bhi.n	be698 <__multiply+0x10c>
   be6ca:	9a01      	ldr	r2, [sp, #4]
   be6cc:	50a9      	str	r1, [r5, r2]
   be6ce:	3504      	adds	r5, #4
   be6d0:	e79a      	b.n	be608 <__multiply+0x7c>
   be6d2:	3e01      	subs	r6, #1
   be6d4:	e79c      	b.n	be610 <__multiply+0x84>
   be6d6:	bf00      	nop
   be6d8:	000bf991 	.word	0x000bf991
   be6dc:	000bfa18 	.word	0x000bfa18

000be6e0 <__pow5mult>:
   be6e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   be6e4:	4615      	mov	r5, r2
   be6e6:	f012 0203 	ands.w	r2, r2, #3
   be6ea:	4606      	mov	r6, r0
   be6ec:	460f      	mov	r7, r1
   be6ee:	d007      	beq.n	be700 <__pow5mult+0x20>
   be6f0:	4c25      	ldr	r4, [pc, #148]	; (be788 <__pow5mult+0xa8>)
   be6f2:	3a01      	subs	r2, #1
   be6f4:	2300      	movs	r3, #0
   be6f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   be6fa:	f7ff fe51 	bl	be3a0 <__multadd>
   be6fe:	4607      	mov	r7, r0
   be700:	10ad      	asrs	r5, r5, #2
   be702:	d03d      	beq.n	be780 <__pow5mult+0xa0>
   be704:	6a74      	ldr	r4, [r6, #36]	; 0x24
   be706:	b97c      	cbnz	r4, be728 <__pow5mult+0x48>
   be708:	2010      	movs	r0, #16
   be70a:	f7fa fedd 	bl	b94c8 <malloc>
   be70e:	4602      	mov	r2, r0
   be710:	6270      	str	r0, [r6, #36]	; 0x24
   be712:	b928      	cbnz	r0, be720 <__pow5mult+0x40>
   be714:	4b1d      	ldr	r3, [pc, #116]	; (be78c <__pow5mult+0xac>)
   be716:	481e      	ldr	r0, [pc, #120]	; (be790 <__pow5mult+0xb0>)
   be718:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   be71c:	f7fa ff14 	bl	b9548 <__assert_func>
   be720:	e9c0 4401 	strd	r4, r4, [r0, #4]
   be724:	6004      	str	r4, [r0, #0]
   be726:	60c4      	str	r4, [r0, #12]
   be728:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   be72c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   be730:	b94c      	cbnz	r4, be746 <__pow5mult+0x66>
   be732:	f240 2171 	movw	r1, #625	; 0x271
   be736:	4630      	mov	r0, r6
   be738:	f7ff ff12 	bl	be560 <__i2b>
   be73c:	2300      	movs	r3, #0
   be73e:	f8c8 0008 	str.w	r0, [r8, #8]
   be742:	4604      	mov	r4, r0
   be744:	6003      	str	r3, [r0, #0]
   be746:	f04f 0900 	mov.w	r9, #0
   be74a:	07eb      	lsls	r3, r5, #31
   be74c:	d50a      	bpl.n	be764 <__pow5mult+0x84>
   be74e:	4639      	mov	r1, r7
   be750:	4622      	mov	r2, r4
   be752:	4630      	mov	r0, r6
   be754:	f7ff ff1a 	bl	be58c <__multiply>
   be758:	4639      	mov	r1, r7
   be75a:	4680      	mov	r8, r0
   be75c:	4630      	mov	r0, r6
   be75e:	f7ff fdfd 	bl	be35c <_Bfree>
   be762:	4647      	mov	r7, r8
   be764:	106d      	asrs	r5, r5, #1
   be766:	d00b      	beq.n	be780 <__pow5mult+0xa0>
   be768:	6820      	ldr	r0, [r4, #0]
   be76a:	b938      	cbnz	r0, be77c <__pow5mult+0x9c>
   be76c:	4622      	mov	r2, r4
   be76e:	4621      	mov	r1, r4
   be770:	4630      	mov	r0, r6
   be772:	f7ff ff0b 	bl	be58c <__multiply>
   be776:	6020      	str	r0, [r4, #0]
   be778:	f8c0 9000 	str.w	r9, [r0]
   be77c:	4604      	mov	r4, r0
   be77e:	e7e4      	b.n	be74a <__pow5mult+0x6a>
   be780:	4638      	mov	r0, r7
   be782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   be786:	bf00      	nop
   be788:	000bfb68 	.word	0x000bfb68
   be78c:	000bf7bd 	.word	0x000bf7bd
   be790:	000bfa18 	.word	0x000bfa18

000be794 <__lshift>:
   be794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   be798:	460c      	mov	r4, r1
   be79a:	6849      	ldr	r1, [r1, #4]
   be79c:	6923      	ldr	r3, [r4, #16]
   be79e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   be7a2:	68a3      	ldr	r3, [r4, #8]
   be7a4:	4607      	mov	r7, r0
   be7a6:	4691      	mov	r9, r2
   be7a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   be7ac:	f108 0601 	add.w	r6, r8, #1
   be7b0:	42b3      	cmp	r3, r6
   be7b2:	db0b      	blt.n	be7cc <__lshift+0x38>
   be7b4:	4638      	mov	r0, r7
   be7b6:	f7ff fd91 	bl	be2dc <_Balloc>
   be7ba:	4605      	mov	r5, r0
   be7bc:	b948      	cbnz	r0, be7d2 <__lshift+0x3e>
   be7be:	4602      	mov	r2, r0
   be7c0:	4b2a      	ldr	r3, [pc, #168]	; (be86c <__lshift+0xd8>)
   be7c2:	482b      	ldr	r0, [pc, #172]	; (be870 <__lshift+0xdc>)
   be7c4:	f240 11d9 	movw	r1, #473	; 0x1d9
   be7c8:	f7fa febe 	bl	b9548 <__assert_func>
   be7cc:	3101      	adds	r1, #1
   be7ce:	005b      	lsls	r3, r3, #1
   be7d0:	e7ee      	b.n	be7b0 <__lshift+0x1c>
   be7d2:	2300      	movs	r3, #0
   be7d4:	f100 0114 	add.w	r1, r0, #20
   be7d8:	f100 0210 	add.w	r2, r0, #16
   be7dc:	4618      	mov	r0, r3
   be7de:	4553      	cmp	r3, sl
   be7e0:	db37      	blt.n	be852 <__lshift+0xbe>
   be7e2:	6920      	ldr	r0, [r4, #16]
   be7e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   be7e8:	f104 0314 	add.w	r3, r4, #20
   be7ec:	f019 091f 	ands.w	r9, r9, #31
   be7f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   be7f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   be7f8:	d02f      	beq.n	be85a <__lshift+0xc6>
   be7fa:	f1c9 0e20 	rsb	lr, r9, #32
   be7fe:	468a      	mov	sl, r1
   be800:	f04f 0c00 	mov.w	ip, #0
   be804:	681a      	ldr	r2, [r3, #0]
   be806:	fa02 f209 	lsl.w	r2, r2, r9
   be80a:	ea42 020c 	orr.w	r2, r2, ip
   be80e:	f84a 2b04 	str.w	r2, [sl], #4
   be812:	f853 2b04 	ldr.w	r2, [r3], #4
   be816:	4298      	cmp	r0, r3
   be818:	fa22 fc0e 	lsr.w	ip, r2, lr
   be81c:	d8f2      	bhi.n	be804 <__lshift+0x70>
   be81e:	1b03      	subs	r3, r0, r4
   be820:	3b15      	subs	r3, #21
   be822:	f023 0303 	bic.w	r3, r3, #3
   be826:	3304      	adds	r3, #4
   be828:	f104 0215 	add.w	r2, r4, #21
   be82c:	4290      	cmp	r0, r2
   be82e:	bf38      	it	cc
   be830:	2304      	movcc	r3, #4
   be832:	f841 c003 	str.w	ip, [r1, r3]
   be836:	f1bc 0f00 	cmp.w	ip, #0
   be83a:	d001      	beq.n	be840 <__lshift+0xac>
   be83c:	f108 0602 	add.w	r6, r8, #2
   be840:	3e01      	subs	r6, #1
   be842:	4638      	mov	r0, r7
   be844:	612e      	str	r6, [r5, #16]
   be846:	4621      	mov	r1, r4
   be848:	f7ff fd88 	bl	be35c <_Bfree>
   be84c:	4628      	mov	r0, r5
   be84e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   be852:	f842 0f04 	str.w	r0, [r2, #4]!
   be856:	3301      	adds	r3, #1
   be858:	e7c1      	b.n	be7de <__lshift+0x4a>
   be85a:	3904      	subs	r1, #4
   be85c:	f853 2b04 	ldr.w	r2, [r3], #4
   be860:	f841 2f04 	str.w	r2, [r1, #4]!
   be864:	4298      	cmp	r0, r3
   be866:	d8f9      	bhi.n	be85c <__lshift+0xc8>
   be868:	e7ea      	b.n	be840 <__lshift+0xac>
   be86a:	bf00      	nop
   be86c:	000bf991 	.word	0x000bf991
   be870:	000bfa18 	.word	0x000bfa18

000be874 <__mcmp>:
   be874:	b530      	push	{r4, r5, lr}
   be876:	6902      	ldr	r2, [r0, #16]
   be878:	690c      	ldr	r4, [r1, #16]
   be87a:	1b12      	subs	r2, r2, r4
   be87c:	d10e      	bne.n	be89c <__mcmp+0x28>
   be87e:	f100 0314 	add.w	r3, r0, #20
   be882:	3114      	adds	r1, #20
   be884:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   be888:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   be88c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   be890:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   be894:	42a5      	cmp	r5, r4
   be896:	d003      	beq.n	be8a0 <__mcmp+0x2c>
   be898:	d305      	bcc.n	be8a6 <__mcmp+0x32>
   be89a:	2201      	movs	r2, #1
   be89c:	4610      	mov	r0, r2
   be89e:	bd30      	pop	{r4, r5, pc}
   be8a0:	4283      	cmp	r3, r0
   be8a2:	d3f3      	bcc.n	be88c <__mcmp+0x18>
   be8a4:	e7fa      	b.n	be89c <__mcmp+0x28>
   be8a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   be8aa:	e7f7      	b.n	be89c <__mcmp+0x28>

000be8ac <__mdiff>:
   be8ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be8b0:	460c      	mov	r4, r1
   be8b2:	4606      	mov	r6, r0
   be8b4:	4611      	mov	r1, r2
   be8b6:	4620      	mov	r0, r4
   be8b8:	4690      	mov	r8, r2
   be8ba:	f7ff ffdb 	bl	be874 <__mcmp>
   be8be:	1e05      	subs	r5, r0, #0
   be8c0:	d110      	bne.n	be8e4 <__mdiff+0x38>
   be8c2:	4629      	mov	r1, r5
   be8c4:	4630      	mov	r0, r6
   be8c6:	f7ff fd09 	bl	be2dc <_Balloc>
   be8ca:	b930      	cbnz	r0, be8da <__mdiff+0x2e>
   be8cc:	4b3a      	ldr	r3, [pc, #232]	; (be9b8 <__mdiff+0x10c>)
   be8ce:	4602      	mov	r2, r0
   be8d0:	f240 2132 	movw	r1, #562	; 0x232
   be8d4:	4839      	ldr	r0, [pc, #228]	; (be9bc <__mdiff+0x110>)
   be8d6:	f7fa fe37 	bl	b9548 <__assert_func>
   be8da:	2301      	movs	r3, #1
   be8dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
   be8e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be8e4:	bfa4      	itt	ge
   be8e6:	4643      	movge	r3, r8
   be8e8:	46a0      	movge	r8, r4
   be8ea:	4630      	mov	r0, r6
   be8ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
   be8f0:	bfa6      	itte	ge
   be8f2:	461c      	movge	r4, r3
   be8f4:	2500      	movge	r5, #0
   be8f6:	2501      	movlt	r5, #1
   be8f8:	f7ff fcf0 	bl	be2dc <_Balloc>
   be8fc:	b920      	cbnz	r0, be908 <__mdiff+0x5c>
   be8fe:	4b2e      	ldr	r3, [pc, #184]	; (be9b8 <__mdiff+0x10c>)
   be900:	4602      	mov	r2, r0
   be902:	f44f 7110 	mov.w	r1, #576	; 0x240
   be906:	e7e5      	b.n	be8d4 <__mdiff+0x28>
   be908:	f8d8 7010 	ldr.w	r7, [r8, #16]
   be90c:	6926      	ldr	r6, [r4, #16]
   be90e:	60c5      	str	r5, [r0, #12]
   be910:	f104 0914 	add.w	r9, r4, #20
   be914:	f108 0514 	add.w	r5, r8, #20
   be918:	f100 0e14 	add.w	lr, r0, #20
   be91c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   be920:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   be924:	f108 0210 	add.w	r2, r8, #16
   be928:	46f2      	mov	sl, lr
   be92a:	2100      	movs	r1, #0
   be92c:	f859 3b04 	ldr.w	r3, [r9], #4
   be930:	f852 bf04 	ldr.w	fp, [r2, #4]!
   be934:	fa1f f883 	uxth.w	r8, r3
   be938:	fa11 f18b 	uxtah	r1, r1, fp
   be93c:	0c1b      	lsrs	r3, r3, #16
   be93e:	eba1 0808 	sub.w	r8, r1, r8
   be942:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   be946:	eb03 4328 	add.w	r3, r3, r8, asr #16
   be94a:	fa1f f888 	uxth.w	r8, r8
   be94e:	1419      	asrs	r1, r3, #16
   be950:	454e      	cmp	r6, r9
   be952:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   be956:	f84a 3b04 	str.w	r3, [sl], #4
   be95a:	d8e7      	bhi.n	be92c <__mdiff+0x80>
   be95c:	1b33      	subs	r3, r6, r4
   be95e:	3b15      	subs	r3, #21
   be960:	f023 0303 	bic.w	r3, r3, #3
   be964:	3304      	adds	r3, #4
   be966:	3415      	adds	r4, #21
   be968:	42a6      	cmp	r6, r4
   be96a:	bf38      	it	cc
   be96c:	2304      	movcc	r3, #4
   be96e:	441d      	add	r5, r3
   be970:	4473      	add	r3, lr
   be972:	469e      	mov	lr, r3
   be974:	462e      	mov	r6, r5
   be976:	4566      	cmp	r6, ip
   be978:	d30e      	bcc.n	be998 <__mdiff+0xec>
   be97a:	f10c 0203 	add.w	r2, ip, #3
   be97e:	1b52      	subs	r2, r2, r5
   be980:	f022 0203 	bic.w	r2, r2, #3
   be984:	3d03      	subs	r5, #3
   be986:	45ac      	cmp	ip, r5
   be988:	bf38      	it	cc
   be98a:	2200      	movcc	r2, #0
   be98c:	441a      	add	r2, r3
   be98e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   be992:	b17b      	cbz	r3, be9b4 <__mdiff+0x108>
   be994:	6107      	str	r7, [r0, #16]
   be996:	e7a3      	b.n	be8e0 <__mdiff+0x34>
   be998:	f856 8b04 	ldr.w	r8, [r6], #4
   be99c:	fa11 f288 	uxtah	r2, r1, r8
   be9a0:	1414      	asrs	r4, r2, #16
   be9a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   be9a6:	b292      	uxth	r2, r2
   be9a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   be9ac:	f84e 2b04 	str.w	r2, [lr], #4
   be9b0:	1421      	asrs	r1, r4, #16
   be9b2:	e7e0      	b.n	be976 <__mdiff+0xca>
   be9b4:	3f01      	subs	r7, #1
   be9b6:	e7ea      	b.n	be98e <__mdiff+0xe2>
   be9b8:	000bf991 	.word	0x000bf991
   be9bc:	000bfa18 	.word	0x000bfa18

000be9c0 <__ulp>:
   be9c0:	b082      	sub	sp, #8
   be9c2:	ed8d 0b00 	vstr	d0, [sp]
   be9c6:	9b01      	ldr	r3, [sp, #4]
   be9c8:	4912      	ldr	r1, [pc, #72]	; (bea14 <__ulp+0x54>)
   be9ca:	4019      	ands	r1, r3
   be9cc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   be9d0:	2900      	cmp	r1, #0
   be9d2:	dd05      	ble.n	be9e0 <__ulp+0x20>
   be9d4:	2200      	movs	r2, #0
   be9d6:	460b      	mov	r3, r1
   be9d8:	ec43 2b10 	vmov	d0, r2, r3
   be9dc:	b002      	add	sp, #8
   be9de:	4770      	bx	lr
   be9e0:	4249      	negs	r1, r1
   be9e2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   be9e6:	ea4f 5021 	mov.w	r0, r1, asr #20
   be9ea:	f04f 0200 	mov.w	r2, #0
   be9ee:	f04f 0300 	mov.w	r3, #0
   be9f2:	da04      	bge.n	be9fe <__ulp+0x3e>
   be9f4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   be9f8:	fa41 f300 	asr.w	r3, r1, r0
   be9fc:	e7ec      	b.n	be9d8 <__ulp+0x18>
   be9fe:	f1a0 0114 	sub.w	r1, r0, #20
   bea02:	291e      	cmp	r1, #30
   bea04:	bfda      	itte	le
   bea06:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bea0a:	fa20 f101 	lsrle.w	r1, r0, r1
   bea0e:	2101      	movgt	r1, #1
   bea10:	460a      	mov	r2, r1
   bea12:	e7e1      	b.n	be9d8 <__ulp+0x18>
   bea14:	7ff00000 	.word	0x7ff00000

000bea18 <__b2d>:
   bea18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bea1a:	6905      	ldr	r5, [r0, #16]
   bea1c:	f100 0714 	add.w	r7, r0, #20
   bea20:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bea24:	1f2e      	subs	r6, r5, #4
   bea26:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bea2a:	4620      	mov	r0, r4
   bea2c:	f7ff fd48 	bl	be4c0 <__hi0bits>
   bea30:	f1c0 0320 	rsb	r3, r0, #32
   bea34:	280a      	cmp	r0, #10
   bea36:	f8df c07c 	ldr.w	ip, [pc, #124]	; beab4 <__b2d+0x9c>
   bea3a:	600b      	str	r3, [r1, #0]
   bea3c:	dc14      	bgt.n	bea68 <__b2d+0x50>
   bea3e:	f1c0 0e0b 	rsb	lr, r0, #11
   bea42:	fa24 f10e 	lsr.w	r1, r4, lr
   bea46:	42b7      	cmp	r7, r6
   bea48:	ea41 030c 	orr.w	r3, r1, ip
   bea4c:	bf34      	ite	cc
   bea4e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bea52:	2100      	movcs	r1, #0
   bea54:	3015      	adds	r0, #21
   bea56:	fa04 f000 	lsl.w	r0, r4, r0
   bea5a:	fa21 f10e 	lsr.w	r1, r1, lr
   bea5e:	ea40 0201 	orr.w	r2, r0, r1
   bea62:	ec43 2b10 	vmov	d0, r2, r3
   bea66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bea68:	42b7      	cmp	r7, r6
   bea6a:	bf3a      	itte	cc
   bea6c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bea70:	f1a5 0608 	subcc.w	r6, r5, #8
   bea74:	2100      	movcs	r1, #0
   bea76:	380b      	subs	r0, #11
   bea78:	d017      	beq.n	beaaa <__b2d+0x92>
   bea7a:	f1c0 0c20 	rsb	ip, r0, #32
   bea7e:	fa04 f500 	lsl.w	r5, r4, r0
   bea82:	42be      	cmp	r6, r7
   bea84:	fa21 f40c 	lsr.w	r4, r1, ip
   bea88:	ea45 0504 	orr.w	r5, r5, r4
   bea8c:	bf8c      	ite	hi
   bea8e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bea92:	2400      	movls	r4, #0
   bea94:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bea98:	fa01 f000 	lsl.w	r0, r1, r0
   bea9c:	fa24 f40c 	lsr.w	r4, r4, ip
   beaa0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   beaa4:	ea40 0204 	orr.w	r2, r0, r4
   beaa8:	e7db      	b.n	bea62 <__b2d+0x4a>
   beaaa:	ea44 030c 	orr.w	r3, r4, ip
   beaae:	460a      	mov	r2, r1
   beab0:	e7d7      	b.n	bea62 <__b2d+0x4a>
   beab2:	bf00      	nop
   beab4:	3ff00000 	.word	0x3ff00000

000beab8 <__d2b>:
   beab8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   beabc:	4689      	mov	r9, r1
   beabe:	2101      	movs	r1, #1
   beac0:	ec57 6b10 	vmov	r6, r7, d0
   beac4:	4690      	mov	r8, r2
   beac6:	f7ff fc09 	bl	be2dc <_Balloc>
   beaca:	4604      	mov	r4, r0
   beacc:	b930      	cbnz	r0, beadc <__d2b+0x24>
   beace:	4602      	mov	r2, r0
   bead0:	4b25      	ldr	r3, [pc, #148]	; (beb68 <__d2b+0xb0>)
   bead2:	4826      	ldr	r0, [pc, #152]	; (beb6c <__d2b+0xb4>)
   bead4:	f240 310a 	movw	r1, #778	; 0x30a
   bead8:	f7fa fd36 	bl	b9548 <__assert_func>
   beadc:	f3c7 550a 	ubfx	r5, r7, #20, #11
   beae0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   beae4:	bb35      	cbnz	r5, beb34 <__d2b+0x7c>
   beae6:	2e00      	cmp	r6, #0
   beae8:	9301      	str	r3, [sp, #4]
   beaea:	d028      	beq.n	beb3e <__d2b+0x86>
   beaec:	4668      	mov	r0, sp
   beaee:	9600      	str	r6, [sp, #0]
   beaf0:	f7ff fd06 	bl	be500 <__lo0bits>
   beaf4:	9900      	ldr	r1, [sp, #0]
   beaf6:	b300      	cbz	r0, beb3a <__d2b+0x82>
   beaf8:	9a01      	ldr	r2, [sp, #4]
   beafa:	f1c0 0320 	rsb	r3, r0, #32
   beafe:	fa02 f303 	lsl.w	r3, r2, r3
   beb02:	430b      	orrs	r3, r1
   beb04:	40c2      	lsrs	r2, r0
   beb06:	6163      	str	r3, [r4, #20]
   beb08:	9201      	str	r2, [sp, #4]
   beb0a:	9b01      	ldr	r3, [sp, #4]
   beb0c:	61a3      	str	r3, [r4, #24]
   beb0e:	2b00      	cmp	r3, #0
   beb10:	bf14      	ite	ne
   beb12:	2202      	movne	r2, #2
   beb14:	2201      	moveq	r2, #1
   beb16:	6122      	str	r2, [r4, #16]
   beb18:	b1d5      	cbz	r5, beb50 <__d2b+0x98>
   beb1a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   beb1e:	4405      	add	r5, r0
   beb20:	f8c9 5000 	str.w	r5, [r9]
   beb24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   beb28:	f8c8 0000 	str.w	r0, [r8]
   beb2c:	4620      	mov	r0, r4
   beb2e:	b003      	add	sp, #12
   beb30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   beb34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   beb38:	e7d5      	b.n	beae6 <__d2b+0x2e>
   beb3a:	6161      	str	r1, [r4, #20]
   beb3c:	e7e5      	b.n	beb0a <__d2b+0x52>
   beb3e:	a801      	add	r0, sp, #4
   beb40:	f7ff fcde 	bl	be500 <__lo0bits>
   beb44:	9b01      	ldr	r3, [sp, #4]
   beb46:	6163      	str	r3, [r4, #20]
   beb48:	2201      	movs	r2, #1
   beb4a:	6122      	str	r2, [r4, #16]
   beb4c:	3020      	adds	r0, #32
   beb4e:	e7e3      	b.n	beb18 <__d2b+0x60>
   beb50:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   beb54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   beb58:	f8c9 0000 	str.w	r0, [r9]
   beb5c:	6918      	ldr	r0, [r3, #16]
   beb5e:	f7ff fcaf 	bl	be4c0 <__hi0bits>
   beb62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   beb66:	e7df      	b.n	beb28 <__d2b+0x70>
   beb68:	000bf991 	.word	0x000bf991
   beb6c:	000bfa18 	.word	0x000bfa18

000beb70 <__ratio>:
   beb70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   beb74:	4688      	mov	r8, r1
   beb76:	4669      	mov	r1, sp
   beb78:	4681      	mov	r9, r0
   beb7a:	f7ff ff4d 	bl	bea18 <__b2d>
   beb7e:	a901      	add	r1, sp, #4
   beb80:	4640      	mov	r0, r8
   beb82:	ec55 4b10 	vmov	r4, r5, d0
   beb86:	f7ff ff47 	bl	bea18 <__b2d>
   beb8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   beb8e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   beb92:	eba3 0c02 	sub.w	ip, r3, r2
   beb96:	e9dd 3200 	ldrd	r3, r2, [sp]
   beb9a:	1a9b      	subs	r3, r3, r2
   beb9c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   beba0:	ec51 0b10 	vmov	r0, r1, d0
   beba4:	2b00      	cmp	r3, #0
   beba6:	bfd6      	itet	le
   beba8:	460a      	movle	r2, r1
   bebaa:	462a      	movgt	r2, r5
   bebac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bebb0:	468b      	mov	fp, r1
   bebb2:	462f      	mov	r7, r5
   bebb4:	bfd4      	ite	le
   bebb6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bebba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bebbe:	4620      	mov	r0, r4
   bebc0:	ee10 2a10 	vmov	r2, s0
   bebc4:	465b      	mov	r3, fp
   bebc6:	4639      	mov	r1, r7
   bebc8:	f7fd fdba 	bl	bc740 <__aeabi_ddiv>
   bebcc:	ec41 0b10 	vmov	d0, r0, r1
   bebd0:	b003      	add	sp, #12
   bebd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bebd6 <__copybits>:
   bebd6:	3901      	subs	r1, #1
   bebd8:	b570      	push	{r4, r5, r6, lr}
   bebda:	1149      	asrs	r1, r1, #5
   bebdc:	6914      	ldr	r4, [r2, #16]
   bebde:	3101      	adds	r1, #1
   bebe0:	f102 0314 	add.w	r3, r2, #20
   bebe4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bebe8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bebec:	1f05      	subs	r5, r0, #4
   bebee:	42a3      	cmp	r3, r4
   bebf0:	d30c      	bcc.n	bec0c <__copybits+0x36>
   bebf2:	1aa3      	subs	r3, r4, r2
   bebf4:	3b11      	subs	r3, #17
   bebf6:	f023 0303 	bic.w	r3, r3, #3
   bebfa:	3211      	adds	r2, #17
   bebfc:	42a2      	cmp	r2, r4
   bebfe:	bf88      	it	hi
   bec00:	2300      	movhi	r3, #0
   bec02:	4418      	add	r0, r3
   bec04:	2300      	movs	r3, #0
   bec06:	4288      	cmp	r0, r1
   bec08:	d305      	bcc.n	bec16 <__copybits+0x40>
   bec0a:	bd70      	pop	{r4, r5, r6, pc}
   bec0c:	f853 6b04 	ldr.w	r6, [r3], #4
   bec10:	f845 6f04 	str.w	r6, [r5, #4]!
   bec14:	e7eb      	b.n	bebee <__copybits+0x18>
   bec16:	f840 3b04 	str.w	r3, [r0], #4
   bec1a:	e7f4      	b.n	bec06 <__copybits+0x30>

000bec1c <__any_on>:
   bec1c:	f100 0214 	add.w	r2, r0, #20
   bec20:	6900      	ldr	r0, [r0, #16]
   bec22:	114b      	asrs	r3, r1, #5
   bec24:	4298      	cmp	r0, r3
   bec26:	b510      	push	{r4, lr}
   bec28:	db11      	blt.n	bec4e <__any_on+0x32>
   bec2a:	dd0a      	ble.n	bec42 <__any_on+0x26>
   bec2c:	f011 011f 	ands.w	r1, r1, #31
   bec30:	d007      	beq.n	bec42 <__any_on+0x26>
   bec32:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bec36:	fa24 f001 	lsr.w	r0, r4, r1
   bec3a:	fa00 f101 	lsl.w	r1, r0, r1
   bec3e:	428c      	cmp	r4, r1
   bec40:	d10b      	bne.n	bec5a <__any_on+0x3e>
   bec42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bec46:	4293      	cmp	r3, r2
   bec48:	d803      	bhi.n	bec52 <__any_on+0x36>
   bec4a:	2000      	movs	r0, #0
   bec4c:	bd10      	pop	{r4, pc}
   bec4e:	4603      	mov	r3, r0
   bec50:	e7f7      	b.n	bec42 <__any_on+0x26>
   bec52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bec56:	2900      	cmp	r1, #0
   bec58:	d0f5      	beq.n	bec46 <__any_on+0x2a>
   bec5a:	2001      	movs	r0, #1
   bec5c:	e7f6      	b.n	bec4c <__any_on+0x30>

000bec5e <_calloc_r>:
   bec5e:	b513      	push	{r0, r1, r4, lr}
   bec60:	434a      	muls	r2, r1
   bec62:	4611      	mov	r1, r2
   bec64:	9201      	str	r2, [sp, #4]
   bec66:	f7fa fc5f 	bl	b9528 <_malloc_r>
   bec6a:	4604      	mov	r4, r0
   bec6c:	b118      	cbz	r0, bec76 <_calloc_r+0x18>
   bec6e:	9a01      	ldr	r2, [sp, #4]
   bec70:	2100      	movs	r1, #0
   bec72:	f7fd ffbb 	bl	bcbec <memset>
   bec76:	4620      	mov	r0, r4
   bec78:	b002      	add	sp, #8
   bec7a:	bd10      	pop	{r4, pc}
   bec7c:	0000      	movs	r0, r0
	...

000bec80 <nan>:
   bec80:	ed9f 0b01 	vldr	d0, [pc, #4]	; bec88 <nan+0x8>
   bec84:	4770      	bx	lr
   bec86:	bf00      	nop
   bec88:	00000000 	.word	0x00000000
   bec8c:	7ff80000 	.word	0x7ff80000

000bec90 <nanf>:
   bec90:	ed9f 0a01 	vldr	s0, [pc, #4]	; bec98 <nanf+0x8>
   bec94:	4770      	bx	lr
   bec96:	bf00      	nop
   bec98:	7fc00000 	.word	0x7fc00000

000bec9c <__ascii_wctomb>:
   bec9c:	b149      	cbz	r1, becb2 <__ascii_wctomb+0x16>
   bec9e:	2aff      	cmp	r2, #255	; 0xff
   beca0:	bf85      	ittet	hi
   beca2:	238a      	movhi	r3, #138	; 0x8a
   beca4:	6003      	strhi	r3, [r0, #0]
   beca6:	700a      	strbls	r2, [r1, #0]
   beca8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   becac:	bf98      	it	ls
   becae:	2001      	movls	r0, #1
   becb0:	4770      	bx	lr
   becb2:	4608      	mov	r0, r1
   becb4:	4770      	bx	lr
	...

000becb8 <__aeabi_d2lz>:
   becb8:	b538      	push	{r3, r4, r5, lr}
   becba:	2200      	movs	r2, #0
   becbc:	2300      	movs	r3, #0
   becbe:	4604      	mov	r4, r0
   becc0:	460d      	mov	r5, r1
   becc2:	f7fd fe85 	bl	bc9d0 <__aeabi_dcmplt>
   becc6:	b928      	cbnz	r0, becd4 <__aeabi_d2lz+0x1c>
   becc8:	4620      	mov	r0, r4
   becca:	4629      	mov	r1, r5
   beccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   becd0:	f7fd bf2c 	b.w	bcb2c <__aeabi_d2ulz>
   becd4:	4620      	mov	r0, r4
   becd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   becda:	f7fd ff27 	bl	bcb2c <__aeabi_d2ulz>
   becde:	4240      	negs	r0, r0
   bece0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bece4:	bd38      	pop	{r3, r4, r5, pc}
   bece6:	bf00      	nop

000bece8 <dynalib_user>:
   bece8:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   becf8:	0000 0000 6162 6973 5f63 7473 6972 676e     ....basic_string
   bed08:	3a3a 4d5f 635f 6e6f 7473 7572 7463 6e20     ::_M_construct n
   bed18:	6c75 206c 6f6e 2074 6176 696c 0064 6c73     ull not valid.sl
   bed28:	7661 4365 756f 746e 203a 6925 0a00 6572     aveCount: %i..re
   bed38:	7571 7365 2074 6f63 6564 3120 202c 6461     quest code 1, ad
   bed48:	7264 7365 3a73 0020 7274 6e61 6d73 7369     dress: .transmis
   bed58:	6973 6e6f 7220 6365 6569 6576 2064 7266     sion recieved fr
   bed68:	6d6f 203a 6400 7665 6369 2065 6469 203a     om: .device id: 
   bed78:	7400 6172 736e 696d 7373 6f69 206e 6573     .transmission se
   bed88:	746e 7420 3a6f 0020 6572 7571 7365 2074     nt to: .request 
   bed98:	6f63 6564 3220 202c 6461 7264 7365 3a73     code 2, address:
   beda8:	0020 6f63 666e 696c 7463 7620 7265 6669      .conflict verif
   bedb8:	6369 7461 6f69 3a6e 0020 6170 7373 0a00     ication: .pass..
   bedc8:	6f43 6e6e 6365 6574 2064 6f74 203a 7400     Connected to: .t
   bedd8:	6977 7474 7265 6300 6e61 6f6e 2074 7263     witter.cannot cr
   bede8:	6165 6574 7320 6474 3a3a 6576 7463 726f     eate std::vector
   bedf8:	6c20 7261 6567 2072 6874 6e61 6d20 7861      larger than max
   bee08:	735f 7a69 2865 0029 6b6f 7700 6669 3a69     _size().ok.wifi:
   bee18:	2c00 5300 4953 3a44 2520 2c73 7020 7361     .,.SSID: %s, pas
   bee28:	7773 726f 3a64 2520 0073 6963 7974 003a     sword: %s.city:.
   bee38:	6e69 6f63 7272 6365 2074 6963 7974 6e20     incorrect city n
   bee48:	6d61 0065 6c73 7661 2065 6461 7264 7365     ame.slave addres
   bee58:	6573 2073 6f73 7472 6465 7400 7275 696e     ses sorted.turni
   bee68:	676e 6f20 206e 6925 6300 7469 3a79 2520     ng on %i.city: %
   bee78:	0073 6f63 6f6c 3a72 6300 7469 2079 6f6e     s.color:.city no
   bee88:	2074 6573 0074 7267 6565 316e 6700 6572     t set.green1.gre
   bee98:	6e65 6700 6572 6e65 0032 6172 6c69 6177     en.green2.railwa
   beea8:	2079 6e69 6564 3a78 2520 0069 6e69 6f63     y index: %i.inco
   beeb8:	7272 6365 2074 6172 6c69 6177 2079 6f63     rrect railway co
   beec8:	6f6c 0072 6461 7264 7365 3a73 2520 0069     lor.address: %i.
   beed8:	7574 6e72 6e69 2067 666f 2066 6925 4200     turning off %i.B
   beee8:	454c 6620 6e69 7369 6568 0064 7574 6e72     LE finished.turn
   beef8:	6e69 2067 666f 3a66 2520 0069 7073 7261     ing off: %i.spar
   bef08:	636b 696c 6e65 0074 6572 6573 0074 6572     kclient.reset.re
   bef18:	6573 2074 6f64 656e 7200 6465 6600 3066     set done.red.ff0
   bef28:	3030 0030 6130 3030 3030 6200 756c 0065     000.0a0000.blue.
   bef38:	3030 3030 6666 3000 3030 3030 0061 7262     0000ff.00000a.br
   bef48:	776f 006e 6666 6666 3030 3000 3061 3061     own.ffff00.0a0a0
   bef58:	0030 3030 6666 3030 3000 3030 3061 0030     0.00ff00.000a00.
   bef68:	726f 6e61 6567 6600 3866 3030 0030 6130     orange.ff8000.0a
   bef78:	3530 3030 7000 7275 6c70 0065 3032 3030     0500.purple.2000
   bef88:	6666 3000 3032 3030 0061 6970 6b6e 6600     ff.02000a.pink.f
   bef98:	3866 3830 0030 6130 3530 3530 6100 3337     f8080.0a0505.a73
   befa8:	6162 3031 2d31 3138 3239 342d 3561 2d31     ba101-8192-4a51-
   befb8:	3462 6432 612d 3965 6463 3431 3162 6134     b42d-ae9cd14b14a
   befc8:	0035 4536 3034 3030 3230 422d 4135 2d33     5.6E400002-B5A3-
   befd8:	3346 3339 452d 4130 2d39 3545 4530 3432     F393-E0A9-E50E24
   befe8:	4344 4143 4539 3600 3445 3030 3030 2d33     DCCA9E.6E400003-
   beff8:	3542 3341 462d 3933 2d33 3045 3941 452d     B5A3-F393-E0A9-E
   bf008:	3035 3245 4434 4343 3941 0045 7874 7200     50E24DCCA9E.tx.r
   bf018:	0078 616c 2e62 6874 7765 6c63 632e 6d6f     x.lab.thewcl.com
   bf028:	7400 6572 2e6b 6874 7765 6c63 632e 6d6f     .trek.thewcl.com
   bf038:	6300 6174 6d00 7462 0061 6f6c 706f 7320     .cta.mbta.loop s
   bf048:	6174 7472 2500 2c69 0020 7270 786f 6d69     tart.%i, .proxim
   bf058:	7469 0079 6c2f 6f6f 2d70 7274 6361 736b     ity./loop-tracks
   bf068:	002f 6c3f 6e69 7365 003d 4547 0054 6170     /.?lines=.GET.pa
   bf078:	7372 6e69 0067 6170 7372 6e69 2067 6166     rsing.parsing fa
   bf088:	6c69 6465 6c00 6e69 7365 7400 6172 6e69     iled.lines.train
   bf098:	0073 656e 7478 735f 6f74 0070 6564 7473     s.next_stop.dest
   bf0a8:	6e69 7461 6f69 006e 6964 6572 7463 6f69     ination.directio
   bf0b8:	006e 616c 6974 7574 6564 6c00 6e6f 6967     n.latitude.longi
   bf0c8:	7574 6564 6200 6572 6b61 2500 2073 6172     tude.break.%s ra
   bf0d8:	6c69 7020 7261 2074 6925 203a 0000 0000     il part %i: ....

000bf0e8 <_ZTV16JsonParserStaticILj10000ELj1000EE>:
	...
   bf0f0:	40bd 000b 40d1 000b 6341 6563 7470 2f00     .@...@..Accept./
   bf100:	2f2a 0000 0019 0000 0003 0000 0007 0000     */..............
   bf110:	0005 0000 000c 0000 0008 0000 0005 0000     ................
   bf120:	0005 0000 0005 0000 0019 0000 0005 0000     ................
   bf130:	000f 0000 000a 0000 000a 0000 000a 0000     ................
   bf140:	000a 0000 0014 0000 0000 0000 0028 0000     ............(...
   bf150:	0000 0000 0002 0000 0006 0000 0000 0000     ................
   bf160:	0000 0000 000f 0000 000a 0000 000a 0000     ................
   bf170:	000f 0000 000f 0000 000f 0000 0014 0000     ................
   bf180:	0000 0000 0001 0000 0003 0000 0000 0000     ................
   bf190:	0000 0000 000c 0000 0007 0000 0001 0000     ................
   bf1a0:	000a 0000 000a 0000 000a 0000 000a 0000     ................
   bf1b0:	000c 0000 0000 0000 0028 0000 0008 0000     ........(.......
   bf1c0:	0003 0000 0007 0000 0001 0000 0003 0000     ................
   bf1d0:	0007 0000 0007 0000 0006 0000 000a 0000     ................
   bf1e0:	000a 0000 000a 0000 000a 0000 000e 0000     ................
   bf1f0:	0000 0000 0028 0000 0006 0000 0003 0000     ....(...........
   bf200:	0007 0000 0002 0000 0003 0000 0005 0000     ................
   bf210:	000a 0000 0005 0000 000a 0000 000a 0000     ................
   bf220:	000a 0000 0014 0000 000a 0000 000a 0000     ................
   bf230:	000a 0000 0005 0000 000a 0000 000a 0000     ................
   bf240:	000a 0000 000a 0000 000a 0000 000a 0000     ................
   bf250:	000a 0000 000a 0000 000a 0000 000a 0000     ................
   bf260:	4820 5454 2f50 2e31 0d30 000a 6c63 736f      HTTP/1.0...clos
   bf270:	0065 6f43 6e6e 6365 6974 6e6f 4800 534f     e.Connection.HOS
   bf280:	0054 6f43 746e 6e65 2d74 654c 676e 6874     T.Content-Length
   bf290:	5000 534f 0054 0a0d 0a0d 2500 3430 0078     .POST......%04x.

000bf2a0 <_ZTV10JsonBuffer>:
	...
   bf2a8:	7edd 000b 7ef9 000b                         .~...~..

000bf2b0 <_ZTV10JsonParser>:
	...
   bf2b8:	7f0d 000b 7f31 000b                         ....1...

000bf2c0 <_ZTV13JsonReference>:
	...
   bf2c8:	7ecd 000b 7ecf 000b 0400 514d 5454 0004     .~...~....MQTT..
   bf2d8:	4d06 4951 6473 0370 7341 6573 7472 6f69     .MQIsdp.Assertio
   bf2e8:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   bf2f8:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   bf308:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   bf318:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   bf328:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   bf338:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   bf348:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   bf358:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   bf368:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   bf378:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   bf388:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   bf398:	6976 6563 002e 6f43 6e6e 6365 6574 2064     vice..Connected 
   bf3a8:	7962 4320 6e65 7274 6c61 6420 7665 6369     by Central devic
   bf3b8:	2e65 4400 7369 6f63 6e6e 6365 6574 2064     e..Disconnected 
   bf3c8:	7962 7220 6d65 746f 2065 6564 6976 6563     by remote device
   bf3d8:	002e 7544 6c70 6369 7461 6465 6320 6168     ..Duplicated cha
   bf3e8:	6172 7463 7265 7369 6974 2063 6163 6e6e     racteristic cann
   bf3f8:	746f 6220 2065 6461 6564 2e64 4600 6961     ot be added..Fai
   bf408:	656c 2064 6f74 6120 7070 6e65 2064 6f6c     led to append lo
   bf418:	6163 206c 6863 7261 6361 6574 6972 7473     cal characterist
   bf428:	6369 002e                                   ic..

000bf42c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bf434:	9575 000b 95d9 000b 96bf 000b 9603 000b     u...............
   bf444:	9579 000b                                   y...

000bf448 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bf450:	9571 000b 95e7 000b 9573 000b 9609 000b     q.......s.......
   bf460:	9599 000b                                   ....

000bf464 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bf46c:	956f 000b 95f5 000b 9e79 000b 960f 000b     o.......y.......
   bf47c:	95b9 000b                                   ....

000bf480 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bf48c:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000bf49e <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bf49e:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000bf4ae <_ZN8particle7BleUuid9BASE_UUIDE>:
   bf4ae:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000bf4c0 <_ZTVN5spark13EthernetClassE>:
	...
   bf4c8:	a927 000b a91d 000b a913 000b a909 000b     '...............
   bf4d8:	a8fd 000b a8f1 000b abb5 000b abbd 000b     ................
   bf4e8:	a8e5 000b a8dd 000b a8d3 000b a8c9 000b     ................
   bf4f8:	abed 000b                                   ....

000bf4fc <_ZTV7TwoWire>:
	...
   bf504:	a945 000b a98f 000b a967 000b a947 000b     E.......g...G...
   bf514:	a96f 000b a977 000b a97f 000b a987 000b     o...w...........

000bf524 <_ZTV9IPAddress>:
	...
   bf52c:	aa59 000b aa49 000b aa4b 000b 7061 0070     Y...I...K...app.

000bf53c <_ZTVN5spark12NetworkClassE>:
	...
   bf544:	ab75 000b ab7f 000b ab89 000b ab93 000b     u...............
   bf554:	ab9d 000b aba9 000b abb5 000b abbd 000b     ................
   bf564:	abc5 000b abd1 000b abd9 000b abe3 000b     ................
   bf574:	abed 000b 6977 6972 676e 7200 6365 2076     ....wiring.recv 
   bf584:	7265 6f72 2072 203d 6425 0000               error = %d..

000bf590 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bf598:	b195 000b b1b9 000b b6eb 000b b1c7 000b     ................
   bf5a8:	b199 000b                                   ....

000bf5ac <_ZTV9TCPClient>:
	...
   bf5b4:	b245 000b b279 000b b111 000b b12b 000b     E...y.......+...
   bf5c4:	b581 000b b155 000b b3f7 000b b189 000b     ....U...........
   bf5d4:	b489 000b b2c9 000b b425 000b b635 000b     ........%...5...
   bf5e4:	b3c5 000b b18b 000b b13d 000b b1cd 000b     ........=.......
   bf5f4:	b2a9 000b 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
   bf604:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000bf614 <_ZTV11USARTSerial>:
	...
   bf61c:	b705 000b b771 000b b749 000b acd9 000b     ....q...I.......
   bf62c:	b719 000b b735 000b b727 000b b743 000b     ....5...'...C...
   bf63c:	b707 000b b70b 000b                         ........

000bf644 <_ZTV9USBSerial>:
	...
   bf64c:	b7af 000b b817 000b b7ed 000b acd9 000b     ................
   bf65c:	b7df 000b b7b1 000b b7c1 000b b811 000b     ................
   bf66c:	b7d1 000b b7a9 000b                         ........

000bf674 <_ZTVN5spark9WiFiClassE>:
	...
   bf67c:	b90f 000b b905 000b b8fb 000b b8b1 000b     ................
   bf68c:	b8ef 000b b8e3 000b abb5 000b abbd 000b     ................
   bf69c:	b8d7 000b b8cf 000b b8c5 000b b8bb 000b     ................
   bf6ac:	abed 000b                                   ....

000bf6b0 <_ZSt7nothrow>:
	...

000bf6b1 <_ZTSSt19_Sp_make_shared_tag>:
   bf6b1:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bf6c1:	6572 5f64 6174 0067 0000                     red_tag....

000bf6cc <_ZTISt19_Sp_make_shared_tag>:
   bf6cc:	f724 000b f6b1 000b 6162 6973 5f63 7473     $.......basic_st
   bf6dc:	6972 676e 3a3a 4d5f 635f 6572 7461 0065     ring::_M_create.

000bf6ec <_ZTIN10__cxxabiv117__class_type_infoE>:
   bf6ec:	f784 000b f6f8 000b f7a8 000b               ............

000bf6f8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bf6f8:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bf708:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bf718:	0045 0000                                   E...

000bf71c <_ZTVN10__cxxabiv117__class_type_infoE>:
   bf71c:	0000 0000 f6ec 000b bd05 000b bd19 000b     ................
   bf72c:	bead 000b bead 000b bd83 000b bcc5 000b     ................
   bf73c:	bd6b 000b bd2d 000b bcf7 000b               k...-.......

000bf748 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bf748:	f784 000b f754 000b f6ec 000b               ....T.......

000bf754 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bf754:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bf764:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bf774:	666e 456f 0000 0000                         nfoE....

000bf77c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bf77c:	0000 0000 f748 000b bdad 000b bdc1 000b     ....H...........
   bf78c:	bead 000b bead 000b bd83 000b bcc5 000b     ................
   bf79c:	be81 000b be0d 000b bdd5 000b               ............

000bf7a8 <_ZTISt9type_info>:
   bf7a8:	f724 000b f7b0 000b                         $.......

000bf7b0 <_ZTSSt9type_info>:
   bf7b0:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bf7c0:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bf7d0:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   bf7e0:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bf7f0:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bf800:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bf810:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bf820:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   bf830:	6e69 7469 0079 6e61 0000 0000               inity.an....

000bf83c <fpi.1>:
   bf83c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bf84c:	0000 0000                                   ....

000bf850 <fpinan.0>:
   bf850:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000bf868 <tinytens>:
   bf868:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bf878:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bf888:	6f43 64ac 0628 1168                         Co.d(.h.

000bf890 <_ctype_>:
   bf890:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bf8a0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bf8b0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bf8c0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bf8d0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bf8e0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bf8f0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bf900:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bf910:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bf990:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bf9a0:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   bf9b0:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   bf9c0:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   bf9d0:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   bf9e0:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   bf9f0:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   bfa00:	632e 0000                                   .c..

000bfa04 <_C_numeric_locale>:
   bfa04:	f42a 000b f29a 000b 50c8 2003 0043 4f50     *........P. C.PO
   bfa14:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   bfa24:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bfa34:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bfa44:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bfa54:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bfa64:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   bfa74:	0000 0000                                   ....

000bfa78 <__mprec_bigtens>:
   bfa78:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bfa88:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bfa98:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bfaa0 <__mprec_tens>:
   bfaa0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bfab0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bfac0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bfad0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bfae0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bfaf0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bfb00:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bfb10:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bfb20:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bfb30:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bfb40:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bfb50:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bfb60:	9db4 79d9 7843 44ea                         ...yCx.D

000bfb68 <p05.0>:
   bfb68:	0005 0000 0019 0000 007d 0000               ........}...

000bfb74 <link_const_variable_data_end>:
   bfb74:	000b7185 	.word	0x000b7185
   bfb78:	000ba8b9 	.word	0x000ba8b9
   bfb7c:	000ba931 	.word	0x000ba931
   bfb80:	000bab65 	.word	0x000bab65
   bfb84:	000bacc5 	.word	0x000bacc5
   bfb88:	000bae01 	.word	0x000bae01
   bfb8c:	000bb0ed 	.word	0x000bb0ed
   bfb90:	000bb6f1 	.word	0x000bb6f1
   bfb94:	000bb919 	.word	0x000bb919

000bfb98 <link_constructors_end>:
	...
