
/Users/sainihome/Documents/GitHub/loop-tracks/master/target/3.3.0/argon/master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009fb0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bdfd0  000bdfd0  0000dfd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bdff4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f4  2003534c  000bdff8  0001534c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000092b0  20035540  20035540  00025540  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000be1ec  000be1ec  0001e1ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000be214  000be214  0001e214  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001408de  00000000  00000000  0001e218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00012c58  00000000  00000000  0015eaf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00049ac3  00000000  00000000  0017174e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003280  00000000  00000000  001bb211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000d0a0  00000000  00000000  001be491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000366ff  00000000  00000000  001cb531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00044af5  00000000  00000000  00201c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001539dd  00000000  00000000  00246725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000abe0  00000000  00000000  0039a104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f007 f871 	bl	bb118 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f007 f893 	bl	bb168 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003534c 	.word	0x2003534c
   b404c:	000bdff8 	.word	0x000bdff8
   b4050:	20035540 	.word	0x20035540
   b4054:	20035540 	.word	0x20035540
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f005 ff95 	bl	b9f90 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bdfa4 	.word	0x000bdfa4
   b4080:	000bdfcc 	.word	0x000bdfcc

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 be8a 	b.w	b5d9c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 ffad 	bl	b5fe8 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f005 bf35 	b.w	b9f00 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f003 bcd3 	b.w	b7a40 <malloc>

000b409a <_Znaj>:
   b409a:	f003 bcd1 	b.w	b7a40 <malloc>

000b409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409e:	f003 bcd7 	b.w	b7a50 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f003 bcd5 	b.w	b7a50 <free>

000b40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a6:	7800      	ldrb	r0, [r0, #0]
   b40a8:	fab0 f080 	clz	r0, r0
   b40ac:	0940      	lsrs	r0, r0, #5
   b40ae:	4770      	bx	lr

000b40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b0:	2301      	movs	r3, #1
   b40b2:	7003      	strb	r3, [r0, #0]
   b40b4:	4770      	bx	lr
	...

000b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40b8:	b510      	push	{r4, lr}
   b40ba:	4b03      	ldr	r3, [pc, #12]	; (b40c8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev+0x10>)
   b40bc:	6003      	str	r3, [r0, #0]
   b40be:	4604      	mov	r4, r0
   b40c0:	f002 fdbc 	bl	b6c3c <_ZN10JsonParserD1Ev>
   b40c4:	4620      	mov	r0, r4
   b40c6:	bd10      	pop	{r4, pc}
   b40c8:	000bd5e4 	.word	0x000bd5e4

000b40cc <_ZN16JsonParserStaticILj10000ELj1000EED0Ev>:
   b40cc:	b510      	push	{r4, lr}
   b40ce:	4604      	mov	r4, r0
   b40d0:	f7ff fff2 	bl	b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
   b40d4:	4620      	mov	r0, r4
   b40d6:	f246 51bc 	movw	r1, #26044	; 0x65bc
   b40da:	f7ff ffe2 	bl	b40a2 <_ZdlPvj>
   b40de:	4620      	mov	r0, r4
   b40e0:	bd10      	pop	{r4, pc}
	...

000b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>:

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
   b40e4:	b508      	push	{r3, lr}
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b40e6:	4603      	mov	r3, r0
   b40e8:	b150      	cbz	r0, b4100 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x1c>
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      _GLIBCXX_NODISCARD _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {
	if (__n > this->_M_max_size())
   b40ea:	4a06      	ldr	r2, [pc, #24]	; (b4104 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x20>)
   b40ec:	4290      	cmp	r0, r2
   b40ee:	d901      	bls.n	b40f4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b40f0:	f005 ffe8 	bl	ba0c4 <_ZSt17__throw_bad_allocv>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b40f4:	200c      	movs	r0, #12
   b40f6:	4358      	muls	r0, r3
      }
   b40f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b40fc:	f7ff bfcb 	b.w	b4096 <_Znwj>
   b4100:	bd08      	pop	{r3, pc}
   b4102:	bf00      	nop
   b4104:	0aaaaaaa 	.word	0x0aaaaaaa

000b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>:

      pointer
      _M_local_data()
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b4108:	f100 0308 	add.w	r3, r0, #8
#if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
   b410c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b410e:	4604      	mov	r4, r0
	: allocator_type(__a), _M_p(__dat) { }
   b4110:	6003      	str	r3, [r0, #0]
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b4112:	460d      	mov	r5, r1
   b4114:	b1d9      	cbz	r1, b414e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x46>
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   b4116:	4608      	mov	r0, r1
   b4118:	f007 f86e 	bl	bb1f8 <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
   b411c:	280f      	cmp	r0, #15
   b411e:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b4122:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b4124:	d907      	bls.n	b4136 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x2e>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   b4126:	2200      	movs	r2, #0
   b4128:	a901      	add	r1, sp, #4
   b412a:	4620      	mov	r0, r4
   b412c:	f005 ffe6 	bl	ba0fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b4130:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4132:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4134:	60a3      	str	r3, [r4, #8]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b4136:	4632      	mov	r2, r6
   b4138:	4629      	mov	r1, r5
   b413a:	6820      	ldr	r0, [r4, #0]
   b413c:	f006 f819 	bl	ba172 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   b4140:	9b01      	ldr	r3, [sp, #4]
      { __c1 = __c2; }
   b4142:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4144:	6063      	str	r3, [r4, #4]
   b4146:	2100      	movs	r1, #0
   b4148:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b414a:	b002      	add	sp, #8
   b414c:	bd70      	pop	{r4, r5, r6, pc}
	  std::__throw_logic_error(__N("basic_string::"
   b414e:	4801      	ldr	r0, [pc, #4]	; (b4154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x4c>)
   b4150:	f005 ffbb 	bl	ba0ca <_ZSt19__throw_logic_errorPKc>
   b4154:	000bd27c 	.word	0x000bd27c

000b4158 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b4158:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b415a:	4603      	mov	r3, r0
   b415c:	b150      	cbz	r0, b4174 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x1c>
	if (__n > this->_M_max_size())
   b415e:	4a06      	ldr	r2, [pc, #24]	; (b4178 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x20>)
   b4160:	4290      	cmp	r0, r2
   b4162:	d901      	bls.n	b4168 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b4164:	f005 ffae 	bl	ba0c4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4168:	2018      	movs	r0, #24
   b416a:	4358      	muls	r0, r3
      }
   b416c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4170:	f7ff bf91 	b.w	b4096 <_Znwj>
   b4174:	bd08      	pop	{r3, pc}
   b4176:	bf00      	nop
   b4178:	05555555 	.word	0x05555555

000b417c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b417c:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b417e:	b148      	cbz	r0, b4194 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b4180:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   b4184:	d301      	bcc.n	b418a <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b4186:	f005 ff9d 	bl	ba0c4 <_ZSt17__throw_bad_allocv>
      }
   b418a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b418e:	0080      	lsls	r0, r0, #2
   b4190:	f7ff bf81 	b.w	b4096 <_Znwj>
   b4194:	bd08      	pop	{r3, pc}

000b4196 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b4196:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4198:	b148      	cbz	r0, b41ae <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b419a:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
   b419e:	d301      	bcc.n	b41a4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b41a0:	f005 ff90 	bl	ba0c4 <_ZSt17__throw_bad_allocv>
      }
   b41a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b41a8:	00c0      	lsls	r0, r0, #3
   b41aa:	f7ff bf74 	b.w	b4096 <_Znwj>
   b41ae:	bd08      	pop	{r3, pc}

000b41b0 <_ZN5Print5printIiLi0EEEjT_i.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b41b0:	b570      	push	{r4, r5, r6, lr}
   b41b2:	4606      	mov	r6, r0
   b41b4:	460c      	mov	r4, r1
{
    if (base == 0) {
   b41b6:	4615      	mov	r5, r2
   b41b8:	b92a      	cbnz	r2, b41c6 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x16>
        return write(n);
   b41ba:	6803      	ldr	r3, [r0, #0]
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
    }
}
   b41bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return write(n);
   b41c0:	689b      	ldr	r3, [r3, #8]
   b41c2:	b2c9      	uxtb	r1, r1
   b41c4:	4718      	bx	r3
        if (n < 0 && base == 10) {
   b41c6:	2900      	cmp	r1, #0
   b41c8:	da0b      	bge.n	b41e2 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x32>
   b41ca:	2a0a      	cmp	r2, #10
   b41cc:	d109      	bne.n	b41e2 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x32>
            t = print('-');
   b41ce:	212d      	movs	r1, #45	; 0x2d
   b41d0:	f005 f866 	bl	b92a0 <_ZN5Print5printEc>
            val = -n;
   b41d4:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b41d6:	b2ea      	uxtb	r2, r5
   b41d8:	4630      	mov	r0, r6
}
   b41da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b41de:	f005 b878 	b.w	b92d2 <_ZN5Print11printNumberEmh>
            val = n;
   b41e2:	4621      	mov	r1, r4
   b41e4:	e7f7      	b.n	b41d6 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x26>
	...

000b41e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>:
      basic_string(const basic_string& __str)
   b41e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b41ea:	f100 0308 	add.w	r3, r0, #8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b41ee:	6003      	str	r3, [r0, #0]

      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      size_type
      length() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
   b41f0:	e9d1 5300 	ldrd	r5, r3, [r1]
      basic_string(const basic_string& __str)
   b41f4:	4604      	mov	r4, r0
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b41f6:	18ee      	adds	r6, r5, r3
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   b41f8:	b91d      	cbnz	r5, b4202 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
   b41fa:	b116      	cbz	r6, b4202 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
	  std::__throw_logic_error(__N("basic_string::"
   b41fc:	480c      	ldr	r0, [pc, #48]	; (b4230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x48>)
   b41fe:	f005 ff64 	bl	ba0ca <_ZSt19__throw_logic_errorPKc>
	if (__dnew > size_type(_S_local_capacity))
   b4202:	2b0f      	cmp	r3, #15
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b4204:	9301      	str	r3, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b4206:	d907      	bls.n	b4218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x30>
	    _M_data(_M_create(__dnew, size_type(0)));
   b4208:	2200      	movs	r2, #0
   b420a:	a901      	add	r1, sp, #4
   b420c:	4620      	mov	r0, r4
   b420e:	f005 ff75 	bl	ba0fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b4212:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4214:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4216:	60a3      	str	r3, [r4, #8]
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b4218:	4632      	mov	r2, r6
   b421a:	4629      	mov	r1, r5
   b421c:	6820      	ldr	r0, [r4, #0]
   b421e:	f005 ffa3 	bl	ba168 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	_M_set_length(__dnew);
   b4222:	9b01      	ldr	r3, [sp, #4]
   b4224:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4226:	6063      	str	r3, [r4, #4]
   b4228:	2100      	movs	r1, #0
   b422a:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b422c:	b002      	add	sp, #8
   b422e:	bd70      	pop	{r4, r5, r6, pc}
   b4230:	000bd27c 	.word	0x000bd27c

000b4234 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4234:	6803      	ldr	r3, [r0, #0]
   b4236:	b2c9      	uxtb	r1, r1
   b4238:	689b      	ldr	r3, [r3, #8]
   b423a:	4718      	bx	r3

000b423c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
      }
    }
  }
}

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b423c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  String inputBuffer = "";

  if(bleCount <= slaveCountExpected){
   b4240:	4c54      	ldr	r4, [pc, #336]	; (b4394 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x158>)
   b4242:	4d55      	ldr	r5, [pc, #340]	; (b4398 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x15c>)
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4244:	4680      	mov	r8, r0
   b4246:	460e      	mov	r6, r1
  String inputBuffer = "";
   b4248:	4668      	mov	r0, sp
   b424a:	4954      	ldr	r1, [pc, #336]	; (b439c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x160>)
   b424c:	f005 f8e1 	bl	b9412 <_ZN6StringC1EPK19__FlashStringHelper>
  if(bleCount <= slaveCountExpected){
   b4250:	6822      	ldr	r2, [r4, #0]
   b4252:	682b      	ldr	r3, [r5, #0]
   b4254:	429a      	cmp	r2, r3
   b4256:	f300 8093 	bgt.w	b4380 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x144>
    for(int i = 0; i < len - 1; i++){
   b425a:	2700      	movs	r7, #0
   b425c:	3e01      	subs	r6, #1
   b425e:	42be      	cmp	r6, r7
   b4260:	d906      	bls.n	b4270 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x34>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b4262:	f818 1007 	ldrb.w	r1, [r8, r7]
   b4266:	4668      	mov	r0, sp
   b4268:	f005 f941 	bl	b94ee <_ZN6String6concatEc>
   b426c:	3701      	adds	r7, #1
   b426e:	e7f6      	b.n	b425e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x22>
      inputBuffer += (char)data[i];
      //input = atoi(inputBuffer);
    }

    if(bleCount < slaveCountExpected){
   b4270:	6822      	ldr	r2, [r4, #0]
   b4272:	682b      	ldr	r3, [r5, #0]
   b4274:	429a      	cmp	r2, r3
   b4276:	da04      	bge.n	b4282 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x46>
      txCharacteristic.setValue("\nEnter the line color of the device with the blinking LED: ");
   b4278:	4949      	ldr	r1, [pc, #292]	; (b43a0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x164>)
   b427a:	484a      	ldr	r0, [pc, #296]	; (b43a4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x168>)
   b427c:	2200      	movs	r2, #0
   b427e:	f003 fed9 	bl	b8034 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
   b4282:	4e49      	ldr	r6, [pc, #292]	; (b43a8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x16c>)
    }

    Wire.beginTransmission(addressArr[bleCount]);
   b4284:	f005 feb8 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b4288:	6833      	ldr	r3, [r6, #0]
   b428a:	6822      	ldr	r2, [r4, #0]
   b428c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b4290:	f004 fe88 	bl	b8fa4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('3');
   b4294:	f005 feb0 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b4298:	2133      	movs	r1, #51	; 0x33
   b429a:	f7ff ffcb 	bl	b4234 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b429e:	f005 feab 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b42a2:	f004 fe86 	bl	b8fb2 <_ZN7TwoWire15endTransmissionEv>

    if(bleCount > 0){
   b42a6:	6823      	ldr	r3, [r4, #0]
   b42a8:	2b00      	cmp	r3, #0
   b42aa:	dd66      	ble.n	b437a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13e>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b42ac:	493f      	ldr	r1, [pc, #252]	; (b43ac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x170>)
   b42ae:	4668      	mov	r0, sp
   b42b0:	f005 f94b 	bl	b954a <_ZNK6String6equalsEPKc>
      int colorAdr = 0;
      if(inputBuffer == "red"){
   b42b4:	2800      	cmp	r0, #0
   b42b6:	d047      	beq.n	b4348 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10c>
        Serial.println("receive red");
   b42b8:	f005 fd50 	bl	b9d5c <_Z16_fetch_usbserialv>
   b42bc:	493c      	ldr	r1, [pc, #240]	; (b43b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x174>)
   b42be:	f004 fffe 	bl	b92be <_ZN5Print7printlnEPKc>
        colorAdr = 0;
   b42c2:	2000      	movs	r0, #0
      // Wire.beginTransmission(addressArr[bleCount - 1]);
      // Wire.write(String(railways.at(colorAdr).colors.at(0).c_str()));
      // Wire.write(String(railways.at(colorAdr).colors.at(1).c_str()));
      // Wire.endTransmission();

      sequenceArr[bleCount - 1] = addressArr[colorAdr];
   b42c4:	6833      	ldr	r3, [r6, #0]
   b42c6:	4a3b      	ldr	r2, [pc, #236]	; (b43b4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x178>)
   b42c8:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   b42cc:	6823      	ldr	r3, [r4, #0]
   b42ce:	6812      	ldr	r2, [r2, #0]
   b42d0:	3b01      	subs	r3, #1
   b42d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      
      Wire.beginTransmission(addressArr[bleCount - 1]);
   b42d6:	f005 fe8f 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b42da:	6823      	ldr	r3, [r4, #0]
   b42dc:	6832      	ldr	r2, [r6, #0]
   b42de:	3b01      	subs	r3, #1
   b42e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   b42e4:	f004 fe5e 	bl	b8fa4 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('4');
   b42e8:	f005 fe86 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b42ec:	2134      	movs	r1, #52	; 0x34
   b42ee:	f7ff ffa1 	bl	b4234 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b42f2:	f005 fe81 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b42f6:	f004 fe5c 	bl	b8fb2 <_ZN7TwoWire15endTransmissionEv>
      if(bleCount == slaveCountExpected){
   b42fa:	6822      	ldr	r2, [r4, #0]
   b42fc:	682b      	ldr	r3, [r5, #0]
   b42fe:	429a      	cmp	r2, r3
   b4300:	d13e      	bne.n	b4380 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x144>
        userInput = true;
   b4302:	4b2d      	ldr	r3, [pc, #180]	; (b43b8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x17c>)
   b4304:	2201      	movs	r2, #1
   b4306:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if(bleCount == slaveCountExpected){
    delay(1000);
   b4308:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b430c:	f003 fbe8 	bl	b7ae0 <delay>
    Serial.println("\nSequence: ");
   b4310:	f005 fd24 	bl	b9d5c <_Z16_fetch_usbserialv>
   b4314:	4929      	ldr	r1, [pc, #164]	; (b43bc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x180>)
   b4316:	f8df 809c 	ldr.w	r8, [pc, #156]	; b43b4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x178>
    for(int i = 0; i < slaveCountExpected; i++){
      Serial.print(sequenceArr[i]);
      Serial.print(", ");
   b431a:	4f29      	ldr	r7, [pc, #164]	; (b43c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x184>)
    Serial.println("\nSequence: ");
   b431c:	f004 ffcf 	bl	b92be <_ZN5Print7printlnEPKc>
    for(int i = 0; i < slaveCountExpected; i++){
   b4320:	2600      	movs	r6, #0
   b4322:	682b      	ldr	r3, [r5, #0]
   b4324:	42b3      	cmp	r3, r6
   b4326:	dd2b      	ble.n	b4380 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x144>
      Serial.print(sequenceArr[i]);
   b4328:	f005 fd18 	bl	b9d5c <_Z16_fetch_usbserialv>
   b432c:	f8d8 3000 	ldr.w	r3, [r8]
   b4330:	220a      	movs	r2, #10
   b4332:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   b4336:	f7ff ff3b 	bl	b41b0 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
      Serial.print(", ");
   b433a:	f005 fd0f 	bl	b9d5c <_Z16_fetch_usbserialv>
   b433e:	4639      	mov	r1, r7
   b4340:	f004 ffaa 	bl	b9298 <_ZN5Print5printEPKc>
    for(int i = 0; i < slaveCountExpected; i++){
   b4344:	3601      	adds	r6, #1
   b4346:	e7ec      	b.n	b4322 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xe6>
   b4348:	491e      	ldr	r1, [pc, #120]	; (b43c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x188>)
   b434a:	4668      	mov	r0, sp
   b434c:	f005 f8fd 	bl	b954a <_ZNK6String6equalsEPKc>
      }else if(inputBuffer == "blue"){
   b4350:	b130      	cbz	r0, b4360 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x124>
        Serial.println("receive blue");
   b4352:	f005 fd03 	bl	b9d5c <_Z16_fetch_usbserialv>
   b4356:	491c      	ldr	r1, [pc, #112]	; (b43c8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18c>)
   b4358:	f004 ffb1 	bl	b92be <_ZN5Print7printlnEPKc>
        colorAdr = 1;
   b435c:	2001      	movs	r0, #1
   b435e:	e7b1      	b.n	b42c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>
   b4360:	491a      	ldr	r1, [pc, #104]	; (b43cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x190>)
   b4362:	4668      	mov	r0, sp
   b4364:	f005 f8f1 	bl	b954a <_ZNK6String6equalsEPKc>
      }else if(inputBuffer == "green"){
   b4368:	2800      	cmp	r0, #0
   b436a:	d0ab      	beq.n	b42c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>
        Serial.println("receive green");
   b436c:	f005 fcf6 	bl	b9d5c <_Z16_fetch_usbserialv>
   b4370:	4917      	ldr	r1, [pc, #92]	; (b43d0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x194>)
   b4372:	f004 ffa4 	bl	b92be <_ZN5Print7printlnEPKc>
        colorAdr = 2;
   b4376:	2002      	movs	r0, #2
   b4378:	e7a4      	b.n	b42c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>
  if(bleCount == slaveCountExpected){
   b437a:	682a      	ldr	r2, [r5, #0]
   b437c:	4293      	cmp	r3, r2
   b437e:	d0c3      	beq.n	b4308 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xcc>
    }
    // BLE.disconnect();
    // BLE.off();
  }

  bleCount++;
   b4380:	6823      	ldr	r3, [r4, #0]
  String inputBuffer = "";
   b4382:	4668      	mov	r0, sp
  bleCount++;
   b4384:	3301      	adds	r3, #1
   b4386:	6023      	str	r3, [r4, #0]
  String inputBuffer = "";
   b4388:	f004 fff8 	bl	b937c <_ZN6StringD1Ev>
}
   b438c:	b004      	add	sp, #16
   b438e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4392:	bf00      	nop
   b4394:	20035588 	.word	0x20035588
   b4398:	2003535c 	.word	0x2003535c
   b439c:	000bd6de 	.word	0x000bd6de
   b43a0:	000bd2a6 	.word	0x000bd2a6
   b43a4:	2003e6a8 	.word	0x2003e6a8
   b43a8:	2003557c 	.word	0x2003557c
   b43ac:	000bd2ea 	.word	0x000bd2ea
   b43b0:	000bd2e2 	.word	0x000bd2e2
   b43b4:	2003e698 	.word	0x2003e698
   b43b8:	2003e6b0 	.word	0x2003e6b0
   b43bc:	000bd309 	.word	0x000bd309
   b43c0:	000bd4f0 	.word	0x000bd4f0
   b43c4:	000bd2f6 	.word	0x000bd2f6
   b43c8:	000bd2ee 	.word	0x000bd2ee
   b43cc:	000bd303 	.word	0x000bd303
   b43d0:	000bd2fb 	.word	0x000bd2fb

000b43d4 <_ZN5Print5writeEPKc.isra.0>:
    size_t write(const char *str) {
   b43d4:	b513      	push	{r0, r1, r4, lr}
   b43d6:	4604      	mov	r4, r0
      if (str == NULL) return 0;
   b43d8:	b161      	cbz	r1, b43f4 <_ZN5Print5writeEPKc.isra.0+0x20>
      return write((const uint8_t *)str, strlen(str));
   b43da:	4608      	mov	r0, r1
   b43dc:	9101      	str	r1, [sp, #4]
   b43de:	f006 ff0b 	bl	bb1f8 <strlen>
   b43e2:	6823      	ldr	r3, [r4, #0]
   b43e4:	9901      	ldr	r1, [sp, #4]
   b43e6:	68db      	ldr	r3, [r3, #12]
   b43e8:	4602      	mov	r2, r0
   b43ea:	4620      	mov	r0, r4
    }
   b43ec:	b002      	add	sp, #8
   b43ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b43f2:	4718      	bx	r3
    }
   b43f4:	b002      	add	sp, #8
   b43f6:	bd10      	pop	{r4, pc}

000b43f8 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>:
  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
   b43f8:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b43fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b43fc:	4604      	mov	r4, r0
   b43fe:	460d      	mov	r5, r1
      if (&__x != this)
   b4400:	d025      	beq.n	b444e <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x56>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4402:	e9d1 7100 	ldrd	r7, r1, [r1]
			 - this->_M_impl._M_start); }
   b4406:	6800      	ldr	r0, [r0, #0]
   b4408:	68a3      	ldr	r3, [r4, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b440a:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b440c:	1a1b      	subs	r3, r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
   b440e:	429e      	cmp	r6, r3
   b4410:	d91e      	bls.n	b4450 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x58>
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
   b4412:	10f0      	asrs	r0, r6, #3
   b4414:	f7ff febf 	bl	b4196 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
   b4418:	2300      	movs	r3, #0
   b441a:	4605      	mov	r5, r0
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
   b441c:	429e      	cmp	r6, r3
   b441e:	d00a      	beq.n	b4436 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x3e>
   */
#if __cplusplus >= 201103L
  template<typename _Tp, typename... _Args>
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4420:	18ea      	adds	r2, r5, r3
   b4422:	bf1c      	itt	ne
   b4424:	18f9      	addne	r1, r7, r3
   b4426:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b442a:	f103 0308 	add.w	r3, r3, #8
   b442e:	bf18      	it	ne
   b4430:	e9c2 0100 	strdne	r0, r1, [r2]
   b4434:	e7f2      	b.n	b441c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x24>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4436:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4438:	b118      	cbz	r0, b4442 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x4a>
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
   b443a:	68a1      	ldr	r1, [r4, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b443c:	1a09      	subs	r1, r1, r0
   b443e:	f7ff fe30 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b4442:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4444:	4435      	add	r5, r6
   b4446:	60a5      	str	r5, [r4, #8]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4448:	6823      	ldr	r3, [r4, #0]
   b444a:	4433      	add	r3, r6
   b444c:	6063      	str	r3, [r4, #4]
	}
      return *this;
    }
   b444e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4450:	6862      	ldr	r2, [r4, #4]
   b4452:	1a12      	subs	r2, r2, r0
	  else if (size() >= __xlen)
   b4454:	4296      	cmp	r6, r2
   b4456:	d806      	bhi.n	b4466 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x6e>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   b4458:	42b9      	cmp	r1, r7
   b445a:	d0f5      	beq.n	b4448 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b445c:	4632      	mov	r2, r6
   b445e:	4639      	mov	r1, r7
   b4460:	f006 fe68 	bl	bb134 <memmove>

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b4464:	e7f0      	b.n	b4448 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	  if (_Num)
   b4466:	b112      	cbz	r2, b446e <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x76>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b4468:	4639      	mov	r1, r7
   b446a:	f006 fe63 	bl	bb134 <memmove>
   b446e:	e9d4 2700 	ldrd	r2, r7, [r4]
   b4472:	1abb      	subs	r3, r7, r2
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b4474:	682a      	ldr	r2, [r5, #0]
   b4476:	686d      	ldr	r5, [r5, #4]
   b4478:	441a      	add	r2, r3
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   b447a:	1aad      	subs	r5, r5, r2
					  __x._M_impl._M_finish,
   b447c:	2300      	movs	r3, #0
	      for (; __first != __last; ++__first, (void)++__cur)
   b447e:	429d      	cmp	r5, r3
   b4480:	d0e2      	beq.n	b4448 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
   b4482:	eb17 0c03 	adds.w	ip, r7, r3
   b4486:	bf1c      	itt	ne
   b4488:	18d1      	addne	r1, r2, r3
   b448a:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b448e:	f103 0308 	add.w	r3, r3, #8
   b4492:	bf18      	it	ne
   b4494:	e9cc 0100 	strdne	r0, r1, [ip]
   b4498:	e7f1      	b.n	b447e <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x86>
	...

000b449c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>:
      if (&__x != this)
   b449c:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b449e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b44a2:	4604      	mov	r4, r0
   b44a4:	468a      	mov	sl, r1
      if (&__x != this)
   b44a6:	d036      	beq.n	b4516 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7a>
   b44a8:	e9d1 5b00 	ldrd	r5, fp, [r1]
			 - this->_M_impl._M_start); }
   b44ac:	f8d0 9000 	ldr.w	r9, [r0]
   b44b0:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b44b2:	4a39      	ldr	r2, [pc, #228]	; (b4598 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xfc>)
   b44b4:	ebab 0705 	sub.w	r7, fp, r5
			 - this->_M_impl._M_start); }
   b44b8:	eba3 0309 	sub.w	r3, r3, r9
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b44bc:	ea4f 08e7 	mov.w	r8, r7, asr #3
	  if (__xlen > capacity())
   b44c0:	42bb      	cmp	r3, r7
   b44c2:	fb02 f808 	mul.w	r8, r2, r8
   b44c6:	d228      	bcs.n	b451a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7e>
	  pointer __result = this->_M_allocate(__n);
   b44c8:	4640      	mov	r0, r8
   b44ca:	f7ff fe45 	bl	b4158 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
   b44ce:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   b44d0:	4680      	mov	r8, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b44d2:	45ab      	cmp	fp, r5
   b44d4:	d00a      	beq.n	b44ec <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x50>
   b44d6:	f1b8 0f00 	cmp.w	r8, #0
   b44da:	d003      	beq.n	b44e4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x48>
   b44dc:	4629      	mov	r1, r5
   b44de:	4640      	mov	r0, r8
   b44e0:	f7ff fe82 	bl	b41e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b44e4:	f108 0818 	add.w	r8, r8, #24
   b44e8:	3518      	adds	r5, #24
   b44ea:	e7f2      	b.n	b44d2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x36>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b44ec:	e9d4 5800 	ldrd	r5, r8, [r4]
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   b44f0:	45a8      	cmp	r8, r5
   b44f2:	d004      	beq.n	b44fe <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x62>
      { _M_dispose(); }
   b44f4:	4628      	mov	r0, r5
   b44f6:	f005 fe23 	bl	ba140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b44fa:	3518      	adds	r5, #24
   b44fc:	e7f8      	b.n	b44f0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x54>
	      _M_deallocate(this->_M_impl._M_start,
   b44fe:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4500:	b118      	cbz	r0, b450a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x6e>
			    - this->_M_impl._M_start);
   b4502:	68a1      	ldr	r1, [r4, #8]
   b4504:	1a09      	subs	r1, r1, r0
   b4506:	f7ff fdcc 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b450a:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b450c:	443e      	add	r6, r7
   b450e:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4510:	6823      	ldr	r3, [r4, #0]
   b4512:	443b      	add	r3, r7
   b4514:	6063      	str	r3, [r4, #4]
    }
   b4516:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b451a:	6846      	ldr	r6, [r0, #4]
   b451c:	eba6 0609 	sub.w	r6, r6, r9
	  else if (size() >= __xlen)
   b4520:	42b7      	cmp	r7, r6
   b4522:	d819      	bhi.n	b4558 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xbc>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4524:	4646      	mov	r6, r8
   b4526:	46ca      	mov	sl, r9
   b4528:	2e00      	cmp	r6, #0
   b452a:	dd08      	ble.n	b453e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xa2>
		  }
	      }
	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
	  }
#endif
	this->_M_assign(__str);
   b452c:	4629      	mov	r1, r5
   b452e:	4650      	mov	r0, sl
   b4530:	f005 fe24 	bl	ba17c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b4534:	3518      	adds	r5, #24
	      ++__result;
   b4536:	f10a 0a18 	add.w	sl, sl, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b453a:	3e01      	subs	r6, #1
   b453c:	e7f4      	b.n	b4528 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x8c>
   b453e:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
   b4542:	2518      	movs	r5, #24
      : _M_current(__i) { }
   b4544:	6866      	ldr	r6, [r4, #4]
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b4546:	fb05 9508 	mla	r5, r5, r8, r9
	  for (; __first != __last; ++__first)
   b454a:	42ae      	cmp	r6, r5
   b454c:	d0e0      	beq.n	b4510 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
      { _M_dispose(); }
   b454e:	4628      	mov	r0, r5
   b4550:	f005 fdf6 	bl	ba140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b4554:	3518      	adds	r5, #24
      {
	++_M_current;
	return *this;
   b4556:	e7f8      	b.n	b454a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xae>
   b4558:	10f6      	asrs	r6, r6, #3
   b455a:	4356      	muls	r6, r2
   b455c:	2e00      	cmp	r6, #0
   b455e:	dd08      	ble.n	b4572 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xd6>
	this->_M_assign(__str);
   b4560:	4629      	mov	r1, r5
   b4562:	4648      	mov	r0, r9
   b4564:	f005 fe0a 	bl	ba17c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b4568:	3518      	adds	r5, #24
	      ++__result;
   b456a:	f109 0918 	add.w	r9, r9, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b456e:	3e01      	subs	r6, #1
   b4570:	e7f4      	b.n	b455c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xc0>
   b4572:	e9d4 5600 	ldrd	r5, r6, [r4]
   b4576:	1b71      	subs	r1, r6, r5
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b4578:	f8da 5000 	ldr.w	r5, [sl]
					  __x._M_impl._M_finish,
   b457c:	f8da 8004 	ldr.w	r8, [sl, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b4580:	440d      	add	r5, r1
   b4582:	45a8      	cmp	r8, r5
   b4584:	d0c4      	beq.n	b4510 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4586:	b11e      	cbz	r6, b4590 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xf4>
   b4588:	4629      	mov	r1, r5
   b458a:	4630      	mov	r0, r6
   b458c:	f7ff fe2c 	bl	b41e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b4590:	3518      	adds	r5, #24
   b4592:	3618      	adds	r6, #24
   b4594:	e7f5      	b.n	b4582 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xe6>
   b4596:	bf00      	nop
   b4598:	aaaaaaab 	.word	0xaaaaaaab

000b459c <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b459c:	b40e      	push	{r1, r2, r3}
   b459e:	b503      	push	{r0, r1, lr}
   b45a0:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b45a2:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b45a4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b45a8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b45aa:	f004 feb0 	bl	b930e <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b45ae:	b002      	add	sp, #8
   b45b0:	f85d eb04 	ldr.w	lr, [sp], #4
   b45b4:	b003      	add	sp, #12
   b45b6:	4770      	bx	lr

000b45b8 <_ZN5Print8printlnfEPKcz>:
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b45b8:	b40e      	push	{r1, r2, r3}
   b45ba:	b503      	push	{r0, r1, lr}
   b45bc:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(true, format, args);
   b45be:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b45c0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b45c4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b45c6:	f004 fea2 	bl	b930e <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b45ca:	b002      	add	sp, #8
   b45cc:	f85d eb04 	ldr.w	lr, [sp], #4
   b45d0:	b003      	add	sp, #12
   b45d2:	4770      	bx	lr

000b45d4 <_Z17acquireWireBufferv>:

hal_i2c_config_t acquireWireBuffer() {
   b45d4:	b538      	push	{r3, r4, r5, lr}
    hal_i2c_config_t config = {
   b45d6:	f44f 7500 	mov.w	r5, #512	; 0x200
   b45da:	2314      	movs	r3, #20
hal_i2c_config_t acquireWireBuffer() {
   b45dc:	4604      	mov	r4, r0
    hal_i2c_config_t config = {
   b45de:	6003      	str	r3, [r0, #0]
   b45e0:	6085      	str	r5, [r0, #8]
   b45e2:	6105      	str	r5, [r0, #16]
        .size = sizeof(hal_i2c_config_t),
        .version = HAL_I2C_CONFIG_VERSION_1,
        .rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b45e4:	4905      	ldr	r1, [pc, #20]	; (b45fc <_Z17acquireWireBufferv+0x28>)
   b45e6:	4628      	mov	r0, r5
   b45e8:	f005 fd6a 	bl	ba0c0 <_ZnajRKSt9nothrow_t>
        .rx_buffer_size = I2C_BUFFER_SIZE,
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b45ec:	4903      	ldr	r1, [pc, #12]	; (b45fc <_Z17acquireWireBufferv+0x28>)
        .tx_buffer_size = I2C_BUFFER_SIZE
    };
   b45ee:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b45f0:	4628      	mov	r0, r5
   b45f2:	f005 fd65 	bl	ba0c0 <_ZnajRKSt9nothrow_t>
    };
   b45f6:	60e0      	str	r0, [r4, #12]
    return config;
   b45f8:	4620      	mov	r0, r4
   b45fa:	bd38      	pop	{r3, r4, r5, pc}
   b45fc:	000bdae4 	.word	0x000bdae4

000b4600 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4600:	b510      	push	{r4, lr}
   b4602:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4604:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b4606:	b118      	cbz	r0, b4610 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4608:	68a1      	ldr	r1, [r4, #8]
   b460a:	1a09      	subs	r1, r1, r0
   b460c:	f7ff fd49 	bl	b40a2 <_ZdlPvj>
      }
   b4610:	4620      	mov	r0, r4
   b4612:	bd10      	pop	{r4, pc}

000b4614 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4614:	b510      	push	{r4, lr}
   b4616:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4618:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b461a:	b118      	cbz	r0, b4624 <_ZNSt12_Vector_baseIfSaIfEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b461c:	68a1      	ldr	r1, [r4, #8]
   b461e:	1a09      	subs	r1, r1, r0
   b4620:	f7ff fd3f 	bl	b40a2 <_ZdlPvj>
      }
   b4624:	4620      	mov	r0, r4
   b4626:	bd10      	pop	{r4, pc}

000b4628 <_ZNSt12_Vector_baseIiSaIiEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4628:	b510      	push	{r4, lr}
   b462a:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b462c:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b462e:	b118      	cbz	r0, b4638 <_ZNSt12_Vector_baseIiSaIiEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4630:	68a1      	ldr	r1, [r4, #8]
   b4632:	1a09      	subs	r1, r1, r0
   b4634:	f7ff fd35 	bl	b40a2 <_ZdlPvj>
      }
   b4638:	4620      	mov	r0, r4
   b463a:	bd10      	pop	{r4, pc}

000b463c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b463c:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b463e:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   b4642:	4604      	mov	r4, r0
	  for (; __first != __last; ++__first)
   b4644:	42ae      	cmp	r6, r5
   b4646:	d004      	beq.n	b4652 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x16>
      { _M_dispose(); }
   b4648:	4628      	mov	r0, r5
   b464a:	f005 fd79 	bl	ba140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b464e:	3518      	adds	r5, #24
   b4650:	e7f8      	b.n	b4644 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   b4652:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4654:	b118      	cbz	r0, b465e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x22>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4656:	68a1      	ldr	r1, [r4, #8]
   b4658:	1a09      	subs	r1, r1, r0
   b465a:	f7ff fd22 	bl	b40a2 <_ZdlPvj>
      }
   b465e:	4620      	mov	r0, r4
   b4660:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4664 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>:

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4664:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
      vector(size_type __n, const value_type& __value,
   b4668:	b570      	push	{r4, r5, r6, lr}
   b466a:	4604      	mov	r4, r0
   b466c:	460d      	mov	r5, r1
   b466e:	4616      	mov	r6, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4670:	d302      	bcc.n	b4678 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x14>
	  __throw_length_error(
   b4672:	480c      	ldr	r0, [pc, #48]	; (b46a4 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x40>)
   b4674:	f005 fd2c 	bl	ba0d0 <_ZSt20__throw_length_errorPKc>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4678:	2300      	movs	r3, #0
   b467a:	e9c0 3300 	strd	r3, r3, [r0]
   b467e:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4680:	4608      	mov	r0, r1
   b4682:	f7ff fd7b 	bl	b417c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4686:	eb00 0385 	add.w	r3, r0, r5, lsl #2
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b468a:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b468e:	60a3      	str	r3, [r4, #8]
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
   b4690:	b12d      	cbz	r5, b469e <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x3a>
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
   b4692:	6832      	ldr	r2, [r6, #0]
      for (; __first != __last; ++__first)
   b4694:	4283      	cmp	r3, r0
   b4696:	d002      	beq.n	b469e <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x3a>
	*__first = __tmp;
   b4698:	f840 2b04 	str.w	r2, [r0], #4
      for (; __first != __last; ++__first)
   b469c:	e7fa      	b.n	b4694 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x30>
	this->_M_impl._M_finish =
   b469e:	6060      	str	r0, [r4, #4]
      { _M_fill_initialize(__n, __value); }
   b46a0:	4620      	mov	r0, r4
   b46a2:	bd70      	pop	{r4, r5, r6, pc}
   b46a4:	000bd315 	.word	0x000bd315

000b46a8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
   b46a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b46ac:	2400      	movs	r4, #0
      vector(initializer_list<value_type> __l,
   b46ae:	ab02      	add	r3, sp, #8
   b46b0:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b46b4:	e9c0 4400 	strd	r4, r4, [r0]
      constexpr const_iterator
      begin() const noexcept { return _M_array; }

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
   b46b8:	4613      	mov	r3, r2
      vector(initializer_list<value_type> __l,
   b46ba:	4605      	mov	r5, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b46bc:	6084      	str	r4, [r0, #8]
   b46be:	00d7      	lsls	r7, r2, #3
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b46c0:	f342 001c 	sbfx	r0, r2, #0, #29
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b46c4:	4a10      	ldr	r2, [pc, #64]	; (b4708 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x60>)
   b46c6:	ebb2 0fc3 	cmp.w	r2, r3, lsl #3
   b46ca:	4688      	mov	r8, r1
   b46cc:	d202      	bcs.n	b46d4 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x2c>
	  __throw_length_error(
   b46ce:	480f      	ldr	r0, [pc, #60]	; (b470c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x64>)
   b46d0:	f005 fcfe 	bl	ba0d0 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b46d4:	f7ff fd5f 	bl	b4196 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b46d8:	19c6      	adds	r6, r0, r7
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b46da:	4602      	mov	r2, r0
   b46dc:	6028      	str	r0, [r5, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b46de:	60ae      	str	r6, [r5, #8]
   b46e0:	4623      	mov	r3, r4
   b46e2:	429f      	cmp	r7, r3
   b46e4:	d00b      	beq.n	b46fe <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x56>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b46e6:	18d4      	adds	r4, r2, r3
   b46e8:	bf1c      	itt	ne
   b46ea:	eb08 0103 	addne.w	r1, r8, r3
   b46ee:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b46f2:	f103 0308 	add.w	r3, r3, #8
   b46f6:	bf18      	it	ne
   b46f8:	e9c4 0100 	strdne	r0, r1, [r4]
   b46fc:	e7f1      	b.n	b46e2 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x3a>
      }
   b46fe:	4628      	mov	r0, r5
	  this->_M_impl._M_finish =
   b4700:	606e      	str	r6, [r5, #4]
      }
   b4702:	b002      	add	sp, #8
   b4704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4708:	7ffffff8 	.word	0x7ffffff8
   b470c:	000bd315 	.word	0x000bd315

000b4710 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>:
      vector(initializer_list<value_type> __l,
   b4710:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4714:	ab02      	add	r3, sp, #8
   b4716:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b471a:	2300      	movs	r3, #0
   b471c:	e9c0 3300 	strd	r3, r3, [r0]
   b4720:	6083      	str	r3, [r0, #8]
   b4722:	4616      	mov	r6, r2
   b4724:	2318      	movs	r3, #24
   b4726:	435e      	muls	r6, r3
   b4728:	4b10      	ldr	r3, [pc, #64]	; (b476c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x5c>)
      vector(initializer_list<value_type> __l,
   b472a:	4604      	mov	r4, r0
   b472c:	10f0      	asrs	r0, r6, #3
   b472e:	4358      	muls	r0, r3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4730:	4b0f      	ldr	r3, [pc, #60]	; (b4770 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x60>)
   b4732:	429e      	cmp	r6, r3
   b4734:	460f      	mov	r7, r1
   b4736:	eb01 0806 	add.w	r8, r1, r6
   b473a:	d902      	bls.n	b4742 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x32>
	  __throw_length_error(
   b473c:	480d      	ldr	r0, [pc, #52]	; (b4774 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x64>)
   b473e:	f005 fcc7 	bl	ba0d0 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4742:	f7ff fd09 	bl	b4158 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4746:	4406      	add	r6, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4748:	4605      	mov	r5, r0
   b474a:	6020      	str	r0, [r4, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b474c:	60a6      	str	r6, [r4, #8]
   b474e:	45b8      	cmp	r8, r7
   b4750:	d007      	beq.n	b4762 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x52>
   b4752:	b11d      	cbz	r5, b475c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x4c>
   b4754:	4639      	mov	r1, r7
   b4756:	4628      	mov	r0, r5
   b4758:	f7ff fd46 	bl	b41e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b475c:	3718      	adds	r7, #24
   b475e:	3518      	adds	r5, #24
   b4760:	e7f5      	b.n	b474e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x3e>
      }
   b4762:	4620      	mov	r0, r4
	  this->_M_impl._M_finish =
   b4764:	6065      	str	r5, [r4, #4]
      }
   b4766:	b002      	add	sp, #8
   b4768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b476c:	aaaaaaab 	.word	0xaaaaaaab
   b4770:	7ffffff8 	.word	0x7ffffff8
   b4774:	000bd315 	.word	0x000bd315

000b4778 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   b4778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b477a:	e9d1 3700 	ldrd	r3, r7, [r1]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b477e:	2500      	movs	r5, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4780:	1aff      	subs	r7, r7, r3
      vector(const vector& __x)
   b4782:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4784:	e9c0 5500 	strd	r5, r5, [r0]
   b4788:	6085      	str	r5, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b478a:	10f8      	asrs	r0, r7, #3
      vector(const vector& __x)
   b478c:	460e      	mov	r6, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b478e:	f7ff fd02 	bl	b4196 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4792:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4796:	4407      	add	r7, r0
   b4798:	60a7      	str	r7, [r4, #8]
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b479a:	e9d6 7600 	ldrd	r7, r6, [r6]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b479e:	4602      	mov	r2, r0
   b47a0:	1bf6      	subs	r6, r6, r7
      : _M_current(__i) { }
   b47a2:	462b      	mov	r3, r5
   b47a4:	42b3      	cmp	r3, r6
   b47a6:	eb02 0503 	add.w	r5, r2, r3
   b47aa:	d006      	beq.n	b47ba <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x42>
   b47ac:	b11d      	cbz	r5, b47b6 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x3e>
   b47ae:	18f9      	adds	r1, r7, r3
   b47b0:	c903      	ldmia	r1, {r0, r1}
   b47b2:	e885 0003 	stmia.w	r5, {r0, r1}
   b47b6:	3308      	adds	r3, #8
   b47b8:	e7f4      	b.n	b47a4 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x2c>
	this->_M_impl._M_finish =
   b47ba:	6065      	str	r5, [r4, #4]
      }
   b47bc:	4620      	mov	r0, r4
   b47be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b47c0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
   *  @param __rhs  C string.
   *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
   b47c0:	b508      	push	{r3, lr}
	       const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
   b47c2:	f005 fd01 	bl	ba1c8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
   b47c6:	fab0 f080 	clz	r0, r0
   b47ca:	0940      	lsrs	r0, r0, #5
   b47cc:	bd08      	pop	{r3, pc}
	...

000b47d0 <_Z16randomizeAddressv>:
void randomizeAddress(){
   b47d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while(slaveCount != slaveCountExpected){
   b47d4:	4dc2      	ldr	r5, [pc, #776]	; (b4ae0 <_Z16randomizeAddressv+0x310>)
   b47d6:	f8df 8338 	ldr.w	r8, [pc, #824]	; b4b10 <_Z16randomizeAddressv+0x340>
void randomizeAddress(){
   b47da:	b08d      	sub	sp, #52	; 0x34
  while(slaveCount != slaveCountExpected){
   b47dc:	682a      	ldr	r2, [r5, #0]
   b47de:	f8d8 3000 	ldr.w	r3, [r8]
   b47e2:	429a      	cmp	r2, r3
   b47e4:	f000 80ff 	beq.w	b49e6 <_Z16randomizeAddressv+0x216>
    slaveCount = 0;
   b47e8:	2300      	movs	r3, #0

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b47ea:	f8df 9328 	ldr.w	r9, [pc, #808]	; b4b14 <_Z16randomizeAddressv+0x344>
   b47ee:	f8df a328 	ldr.w	sl, [pc, #808]	; b4b18 <_Z16randomizeAddressv+0x348>
        String inputBuffer = "";
   b47f2:	4fbc      	ldr	r7, [pc, #752]	; (b4ae4 <_Z16randomizeAddressv+0x314>)
    slaveCount = 0;
   b47f4:	602b      	str	r3, [r5, #0]
    for(int i = 8; i <= 119; i++){
   b47f6:	2408      	movs	r4, #8
      Serial.println("\nrequest code 1, address: " + String(i));
   b47f8:	f005 fab0 	bl	b9d5c <_Z16_fetch_usbserialv>
   b47fc:	4649      	mov	r1, r9
   b47fe:	4606      	mov	r6, r0
   b4800:	a808      	add	r0, sp, #32
   b4802:	f004 fe06 	bl	b9412 <_ZN6StringC1EPK19__FlashStringHelper>
   b4806:	220a      	movs	r2, #10
   b4808:	4621      	mov	r1, r4
   b480a:	a804      	add	r0, sp, #16
   b480c:	f004 fe41 	bl	b9492 <_ZN6StringC1Eih>
   b4810:	a904      	add	r1, sp, #16
   b4812:	a808      	add	r0, sp, #32
   b4814:	f004 fe78 	bl	b9508 <_ZplRK15StringSumHelperRK6String>
   b4818:	6801      	ldr	r1, [r0, #0]
   b481a:	4630      	mov	r0, r6
   b481c:	f004 fd4f 	bl	b92be <_ZN5Print7printlnEPKc>
   b4820:	a804      	add	r0, sp, #16
   b4822:	f004 fdab 	bl	b937c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4826:	a808      	add	r0, sp, #32
   b4828:	f004 fda8 	bl	b937c <_ZN6StringD1Ev>
      Wire.beginTransmission(i);
   b482c:	f005 fbe4 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b4830:	4621      	mov	r1, r4
   b4832:	f004 fbb7 	bl	b8fa4 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('1');
   b4836:	f005 fbdf 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b483a:	2131      	movs	r1, #49	; 0x31
   b483c:	f7ff fcfa 	bl	b4234 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4840:	fa5f fb84 	uxtb.w	fp, r4
   b4844:	f005 fbd8 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b4848:	f004 fbb3 	bl	b8fb2 <_ZN7TwoWire15endTransmissionEv>
      Wire.requestFrom(i, 24);
   b484c:	f005 fbd4 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b4850:	2218      	movs	r2, #24
   b4852:	4659      	mov	r1, fp
   b4854:	f004 fb9f 	bl	b8f96 <_ZN7TwoWire11requestFromEhj>
      if(Wire.available() > 0){
   b4858:	f005 fbce 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b485c:	6803      	ldr	r3, [r0, #0]
   b485e:	691b      	ldr	r3, [r3, #16]
   b4860:	4798      	blx	r3
   b4862:	2800      	cmp	r0, #0
   b4864:	f340 80ba 	ble.w	b49dc <_Z16randomizeAddressv+0x20c>
        Serial.println("transmission recieved from: " + String(i));
   b4868:	f005 fa78 	bl	b9d5c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b486c:	4651      	mov	r1, sl
   b486e:	4606      	mov	r6, r0
   b4870:	a808      	add	r0, sp, #32
   b4872:	f004 fdce 	bl	b9412 <_ZN6StringC1EPK19__FlashStringHelper>
   b4876:	220a      	movs	r2, #10
   b4878:	4621      	mov	r1, r4
   b487a:	a804      	add	r0, sp, #16
   b487c:	f004 fe09 	bl	b9492 <_ZN6StringC1Eih>
   b4880:	a904      	add	r1, sp, #16
   b4882:	a808      	add	r0, sp, #32
   b4884:	f004 fe40 	bl	b9508 <_ZplRK15StringSumHelperRK6String>
   b4888:	6801      	ldr	r1, [r0, #0]
   b488a:	4630      	mov	r0, r6
   b488c:	f004 fd17 	bl	b92be <_ZN5Print7printlnEPKc>
   b4890:	a804      	add	r0, sp, #16
   b4892:	f004 fd73 	bl	b937c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4896:	a808      	add	r0, sp, #32
   b4898:	f004 fd70 	bl	b937c <_ZN6StringD1Ev>
        slaveCount++;
   b489c:	682b      	ldr	r3, [r5, #0]
        String inputBuffer = "";
   b489e:	4639      	mov	r1, r7
        slaveCount++;
   b48a0:	3301      	adds	r3, #1
        String inputBuffer = "";
   b48a2:	4668      	mov	r0, sp
        slaveCount++;
   b48a4:	602b      	str	r3, [r5, #0]
        String inputBuffer = "";
   b48a6:	f004 fdb4 	bl	b9412 <_ZN6StringC1EPK19__FlashStringHelper>
   b48aa:	2618      	movs	r6, #24
          c = Wire.read();
   b48ac:	f005 fba4 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b48b0:	6803      	ldr	r3, [r0, #0]
   b48b2:	695b      	ldr	r3, [r3, #20]
   b48b4:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b48b6:	b2c1      	uxtb	r1, r0
   b48b8:	4668      	mov	r0, sp
   b48ba:	f004 fe18 	bl	b94ee <_ZN6String6concatEc>
        for(int j = 0; j < 24; j++){
   b48be:	3e01      	subs	r6, #1
   b48c0:	d1f4      	bne.n	b48ac <_Z16randomizeAddressv+0xdc>
        Wire.beginTransmission(i);
   b48c2:	f005 fb99 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b48c6:	4621      	mov	r1, r4
   b48c8:	f004 fb6c 	bl	b8fa4 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(inputBuffer);
   b48cc:	f005 fb94 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b48d0:	9900      	ldr	r1, [sp, #0]
   b48d2:	f7ff fd7f 	bl	b43d4 <_ZN5Print5writeEPKc.isra.0>
        Serial.println("device id: " + inputBuffer);
   b48d6:	f005 fa41 	bl	b9d5c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b48da:	4983      	ldr	r1, [pc, #524]	; (b4ae8 <_Z16randomizeAddressv+0x318>)
   b48dc:	4606      	mov	r6, r0
   b48de:	a808      	add	r0, sp, #32
   b48e0:	f004 fd97 	bl	b9412 <_ZN6StringC1EPK19__FlashStringHelper>
   b48e4:	4669      	mov	r1, sp
   b48e6:	a808      	add	r0, sp, #32
   b48e8:	f004 fe0e 	bl	b9508 <_ZplRK15StringSumHelperRK6String>
   b48ec:	6801      	ldr	r1, [r0, #0]
   b48ee:	4630      	mov	r0, r6
   b48f0:	f004 fce5 	bl	b92be <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b48f4:	a808      	add	r0, sp, #32
   b48f6:	f004 fd41 	bl	b937c <_ZN6StringD1Ev>
        Wire.endTransmission();
   b48fa:	f005 fb7d 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b48fe:	f004 fb58 	bl	b8fb2 <_ZN7TwoWire15endTransmissionEv>
        Serial.println("transmission sent to: " + String(i));
   b4902:	f005 fa2b 	bl	b9d5c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4906:	4979      	ldr	r1, [pc, #484]	; (b4aec <_Z16randomizeAddressv+0x31c>)
   b4908:	4606      	mov	r6, r0
   b490a:	a808      	add	r0, sp, #32
   b490c:	f004 fd81 	bl	b9412 <_ZN6StringC1EPK19__FlashStringHelper>
   b4910:	220a      	movs	r2, #10
   b4912:	4621      	mov	r1, r4
   b4914:	a804      	add	r0, sp, #16
   b4916:	f004 fdbc 	bl	b9492 <_ZN6StringC1Eih>
   b491a:	a904      	add	r1, sp, #16
   b491c:	a808      	add	r0, sp, #32
   b491e:	f004 fdf3 	bl	b9508 <_ZplRK15StringSumHelperRK6String>
   b4922:	6801      	ldr	r1, [r0, #0]
   b4924:	4630      	mov	r0, r6
   b4926:	f004 fcca 	bl	b92be <_ZN5Print7printlnEPKc>
   b492a:	a804      	add	r0, sp, #16
   b492c:	f004 fd26 	bl	b937c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4930:	a808      	add	r0, sp, #32
   b4932:	f004 fd23 	bl	b937c <_ZN6StringD1Ev>
        Wire.beginTransmission(i);
   b4936:	f005 fb5f 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b493a:	4621      	mov	r1, r4
   b493c:	f004 fb32 	bl	b8fa4 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('2');
   b4940:	f005 fb5a 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b4944:	2132      	movs	r1, #50	; 0x32
   b4946:	f7ff fc75 	bl	b4234 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b494a:	f005 fb55 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b494e:	f004 fb30 	bl	b8fb2 <_ZN7TwoWire15endTransmissionEv>
        Serial.println("request code 2, address: " + String(i));
   b4952:	f005 fa03 	bl	b9d5c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4956:	4966      	ldr	r1, [pc, #408]	; (b4af0 <_Z16randomizeAddressv+0x320>)
   b4958:	4606      	mov	r6, r0
   b495a:	a808      	add	r0, sp, #32
   b495c:	f004 fd59 	bl	b9412 <_ZN6StringC1EPK19__FlashStringHelper>
   b4960:	220a      	movs	r2, #10
   b4962:	4621      	mov	r1, r4
   b4964:	a804      	add	r0, sp, #16
   b4966:	f004 fd94 	bl	b9492 <_ZN6StringC1Eih>
   b496a:	a904      	add	r1, sp, #16
   b496c:	a808      	add	r0, sp, #32
   b496e:	f004 fdcb 	bl	b9508 <_ZplRK15StringSumHelperRK6String>
   b4972:	6801      	ldr	r1, [r0, #0]
   b4974:	4630      	mov	r0, r6
   b4976:	f004 fca2 	bl	b92be <_ZN5Print7printlnEPKc>
   b497a:	a804      	add	r0, sp, #16
   b497c:	f004 fcfe 	bl	b937c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4980:	a808      	add	r0, sp, #32
   b4982:	f004 fcfb 	bl	b937c <_ZN6StringD1Ev>
        Wire.requestFrom(i, 4);
   b4986:	f005 fb37 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b498a:	2204      	movs	r2, #4
   b498c:	4659      	mov	r1, fp
   b498e:	f004 fb02 	bl	b8f96 <_ZN7TwoWire11requestFromEhj>
        inputBuffer = "";
   b4992:	4639      	mov	r1, r7
   b4994:	4668      	mov	r0, sp
   b4996:	f004 fd6a 	bl	b946e <_ZN6StringaSEPKc>
   b499a:	2604      	movs	r6, #4
          inputBuffer += (char)Wire.read();
   b499c:	f005 fb2c 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b49a0:	6803      	ldr	r3, [r0, #0]
   b49a2:	695b      	ldr	r3, [r3, #20]
   b49a4:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b49a6:	b2c1      	uxtb	r1, r0
   b49a8:	4668      	mov	r0, sp
   b49aa:	f004 fda0 	bl	b94ee <_ZN6String6concatEc>
        for(int j = 0; j < 4; j++){
   b49ae:	3e01      	subs	r6, #1
   b49b0:	d1f4      	bne.n	b499c <_Z16randomizeAddressv+0x1cc>
        Serial.println("conflict verification: " + inputBuffer);
   b49b2:	f005 f9d3 	bl	b9d5c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b49b6:	494f      	ldr	r1, [pc, #316]	; (b4af4 <_Z16randomizeAddressv+0x324>)
   b49b8:	4606      	mov	r6, r0
   b49ba:	a808      	add	r0, sp, #32
   b49bc:	f004 fd29 	bl	b9412 <_ZN6StringC1EPK19__FlashStringHelper>
   b49c0:	4669      	mov	r1, sp
   b49c2:	a808      	add	r0, sp, #32
   b49c4:	f004 fda0 	bl	b9508 <_ZplRK15StringSumHelperRK6String>
   b49c8:	6801      	ldr	r1, [r0, #0]
   b49ca:	4630      	mov	r0, r6
   b49cc:	f004 fc77 	bl	b92be <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b49d0:	a808      	add	r0, sp, #32
   b49d2:	f004 fcd3 	bl	b937c <_ZN6StringD1Ev>
        String inputBuffer = "";
   b49d6:	4668      	mov	r0, sp
   b49d8:	f004 fcd0 	bl	b937c <_ZN6StringD1Ev>
    for(int i = 8; i <= 119; i++){
   b49dc:	3401      	adds	r4, #1
   b49de:	2c78      	cmp	r4, #120	; 0x78
   b49e0:	f47f af0a 	bne.w	b47f8 <_Z16randomizeAddressv+0x28>
   b49e4:	e6fa      	b.n	b47dc <_Z16randomizeAddressv+0xc>
  Serial.println("\nConnected to: ");
   b49e6:	f005 f9b9 	bl	b9d5c <_Z16_fetch_usbserialv>
   b49ea:	4943      	ldr	r1, [pc, #268]	; (b4af8 <_Z16randomizeAddressv+0x328>)
      Serial.print(", ");
   b49ec:	4e43      	ldr	r6, [pc, #268]	; (b4afc <_Z16randomizeAddressv+0x32c>)
	return *(this->_M_impl._M_start + __n);
   b49ee:	4f44      	ldr	r7, [pc, #272]	; (b4b00 <_Z16randomizeAddressv+0x330>)
  Serial.println("\nConnected to: ");
   b49f0:	f004 fc65 	bl	b92be <_ZN5Print7printlnEPKc>
  for(int i = 8; i<= 119; i++){
   b49f4:	2408      	movs	r4, #8
  int count = 0;
   b49f6:	2500      	movs	r5, #0
    Wire.beginTransmission(i);
   b49f8:	f005 fafe 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b49fc:	4621      	mov	r1, r4
   b49fe:	f004 fad1 	bl	b8fa4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('1');
   b4a02:	f005 faf9 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b4a06:	2131      	movs	r1, #49	; 0x31
   b4a08:	f7ff fc14 	bl	b4234 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b4a0c:	f005 faf4 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b4a10:	f004 facf 	bl	b8fb2 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(i, 24);
   b4a14:	f005 faf0 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b4a18:	2218      	movs	r2, #24
   b4a1a:	b2e1      	uxtb	r1, r4
   b4a1c:	f004 fabb 	bl	b8f96 <_ZN7TwoWire11requestFromEhj>
    if(Wire.available() > 0){
   b4a20:	f005 faea 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b4a24:	6803      	ldr	r3, [r0, #0]
   b4a26:	691b      	ldr	r3, [r3, #16]
   b4a28:	4798      	blx	r3
   b4a2a:	2800      	cmp	r0, #0
   b4a2c:	dd0e      	ble.n	b4a4c <_Z16randomizeAddressv+0x27c>
      Serial.print(i);
   b4a2e:	f005 f995 	bl	b9d5c <_Z16_fetch_usbserialv>
   b4a32:	220a      	movs	r2, #10
   b4a34:	4621      	mov	r1, r4
   b4a36:	f7ff fbbb 	bl	b41b0 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
      Serial.print(", ");
   b4a3a:	f005 f98f 	bl	b9d5c <_Z16_fetch_usbserialv>
   b4a3e:	4631      	mov	r1, r6
   b4a40:	f004 fc2a 	bl	b9298 <_ZN5Print5printEPKc>
      addressArr[count++] = i;
   b4a44:	683b      	ldr	r3, [r7, #0]
   b4a46:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
   b4a4a:	3501      	adds	r5, #1
  for(int i = 8; i<= 119; i++){
   b4a4c:	3401      	adds	r4, #1
   b4a4e:	2c78      	cmp	r4, #120	; 0x78
   b4a50:	d1d2      	bne.n	b49f8 <_Z16randomizeAddressv+0x228>
  for(int i = 0; i < railways.size(); i++){
   b4a52:	2400      	movs	r4, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4a54:	4f2b      	ldr	r7, [pc, #172]	; (b4b04 <_Z16randomizeAddressv+0x334>)
   b4a56:	f8df a0c4 	ldr.w	sl, [pc, #196]	; b4b1c <_Z16randomizeAddressv+0x34c>
  int seqCount = 0;
   b4a5a:	4620      	mov	r0, r4
   b4a5c:	e9d7 2300 	ldrd	r2, r3, [r7]
   b4a60:	1a9b      	subs	r3, r3, r2
   b4a62:	109b      	asrs	r3, r3, #2
   b4a64:	fb0a f303 	mul.w	r3, sl, r3
  for(int i = 0; i < railways.size(); i++){
   b4a68:	42a3      	cmp	r3, r4
   b4a6a:	d935      	bls.n	b4ad8 <_Z16randomizeAddressv+0x308>
   b4a6c:	f04f 0864 	mov.w	r8, #100	; 0x64
	return *(this->_M_impl._M_start + __n);
   b4a70:	f8df 90ac 	ldr.w	r9, [pc, #172]	; b4b20 <_Z16randomizeAddressv+0x350>
   b4a74:	4a22      	ldr	r2, [pc, #136]	; (b4b00 <_Z16randomizeAddressv+0x330>)
        if(railways[i].name == "brown"){
   b4a76:	4924      	ldr	r1, [pc, #144]	; (b4b08 <_Z16randomizeAddressv+0x338>)
   b4a78:	fb08 f804 	mul.w	r8, r8, r4
   b4a7c:	00e6      	lsls	r6, r4, #3
  for(int i = 0; i < railways.size(); i++){
   b4a7e:	2500      	movs	r5, #0
   b4a80:	683b      	ldr	r3, [r7, #0]
   b4a82:	f8d9 c000 	ldr.w	ip, [r9]
   b4a86:	4443      	add	r3, r8
   b4a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4a8a:	eb03 0e05 	add.w	lr, r3, r5
      if(railways[i].outputs[j].size() == 0){
   b4a8e:	595b      	ldr	r3, [r3, r5]
   b4a90:	f8de e004 	ldr.w	lr, [lr, #4]
   b4a94:	459e      	cmp	lr, r3
   b4a96:	d109      	bne.n	b4aac <_Z16randomizeAddressv+0x2dc>
        sequenceArr[2 * i + j] = 0;
   b4a98:	2300      	movs	r3, #0
   b4a9a:	f84c 3006 	str.w	r3, [ip, r6]
    for(int j = 0; j < 2; j++){
   b4a9e:	350c      	adds	r5, #12
   b4aa0:	2d18      	cmp	r5, #24
   b4aa2:	f106 0604 	add.w	r6, r6, #4
   b4aa6:	d1eb      	bne.n	b4a80 <_Z16randomizeAddressv+0x2b0>
  for(int i = 0; i < railways.size(); i++){
   b4aa8:	3401      	adds	r4, #1
   b4aaa:	e7d7      	b.n	b4a5c <_Z16randomizeAddressv+0x28c>
        sequenceArr[2 * i + j] = addressArr[seqCount++];
   b4aac:	6813      	ldr	r3, [r2, #0]
   b4aae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   b4ab2:	f84c 3006 	str.w	r3, [ip, r6]
   b4ab6:	f100 0b01 	add.w	fp, r0, #1
   b4aba:	6838      	ldr	r0, [r7, #0]
   b4abc:	4440      	add	r0, r8
        if(railways[i].name == "brown"){
   b4abe:	3030      	adds	r0, #48	; 0x30
   b4ac0:	f7ff fe7e 	bl	b47c0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
   b4ac4:	4910      	ldr	r1, [pc, #64]	; (b4b08 <_Z16randomizeAddressv+0x338>)
   b4ac6:	4a0e      	ldr	r2, [pc, #56]	; (b4b00 <_Z16randomizeAddressv+0x330>)
   b4ac8:	b120      	cbz	r0, b4ad4 <_Z16randomizeAddressv+0x304>
          brownLineAdr = sequenceArr[2 * i + j];
   b4aca:	f8d9 3000 	ldr.w	r3, [r9]
   b4ace:	5998      	ldr	r0, [r3, r6]
   b4ad0:	4b0e      	ldr	r3, [pc, #56]	; (b4b0c <_Z16randomizeAddressv+0x33c>)
   b4ad2:	6018      	str	r0, [r3, #0]
        sequenceArr[2 * i + j] = addressArr[seqCount++];
   b4ad4:	4658      	mov	r0, fp
   b4ad6:	e7e2      	b.n	b4a9e <_Z16randomizeAddressv+0x2ce>
}
   b4ad8:	b00d      	add	sp, #52	; 0x34
   b4ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4ade:	bf00      	nop
   b4ae0:	2003e6a4 	.word	0x2003e6a4
   b4ae4:	000bd6de 	.word	0x000bd6de
   b4ae8:	000bd37e 	.word	0x000bd37e
   b4aec:	000bd38a 	.word	0x000bd38a
   b4af0:	000bd3a1 	.word	0x000bd3a1
   b4af4:	000bd3bb 	.word	0x000bd3bb
   b4af8:	000bd3d3 	.word	0x000bd3d3
   b4afc:	000bd4f0 	.word	0x000bd4f0
   b4b00:	2003557c 	.word	0x2003557c
   b4b04:	2003e5c0 	.word	0x2003e5c0
   b4b08:	000bd3e3 	.word	0x000bd3e3
   b4b0c:	20035654 	.word	0x20035654
   b4b10:	2003535c 	.word	0x2003535c
   b4b14:	000bd346 	.word	0x000bd346
   b4b18:	000bd361 	.word	0x000bd361
   b4b1c:	c28f5c29 	.word	0xc28f5c29
   b4b20:	2003e698 	.word	0x2003e698

000b4b24 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4b24:	2900      	cmp	r1, #0
      _M_create_storage(size_t __n)
   b4b26:	b538      	push	{r3, r4, r5, lr}
   b4b28:	4604      	mov	r4, r0
      _M_allocate(size_t __n)
   b4b2a:	ea4f 0581 	mov.w	r5, r1, lsl #2
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4b2e:	d00c      	beq.n	b4b4a <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x26>
	if (__n > this->_M_max_size())
   b4b30:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   b4b34:	d301      	bcc.n	b4b3a <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x16>
	  std::__throw_bad_alloc();
   b4b36:	f005 fac5 	bl	ba0c4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4b3a:	4628      	mov	r0, r5
   b4b3c:	f7ff faab 	bl	b4096 <_Znwj>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4b40:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4b44:	4428      	add	r0, r5
   b4b46:	60a0      	str	r0, [r4, #8]
      }
   b4b48:	bd38      	pop	{r3, r4, r5, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4b4a:	4608      	mov	r0, r1
   b4b4c:	e7f8      	b.n	b4b40 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x1c>

000b4b4e <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b4b4e:	b538      	push	{r3, r4, r5, lr}
   b4b50:	4604      	mov	r4, r0
   b4b52:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b4b54:	42ac      	cmp	r4, r5
   b4b56:	d004      	beq.n	b4b62 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x14>
      }
   b4b58:	4620      	mov	r0, r4
   b4b5a:	f7ff fd65 	bl	b4628 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4b5e:	340c      	adds	r4, #12
   b4b60:	e7f8      	b.n	b4b54 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x6>
	    std::_Destroy(std::__addressof(*__first));
	}
   b4b62:	bd38      	pop	{r3, r4, r5, pc}

000b4b64 <_ZN7RailwayD1Ev>:
#include "Checkpoint.cpp"
#include <string>

//container for all data for each rail line
class Railway{
   b4b64:	b510      	push	{r4, lr}
   b4b66:	4604      	mov	r4, r0
   b4b68:	3048      	adds	r0, #72	; 0x48
   b4b6a:	f7ff fd67 	bl	b463c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b4b6e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b4b72:	f005 fae5 	bl	ba140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
   b4b76:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b4b7a:	f7ff ffe8 	bl	b4b4e <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	_M_deallocate(_M_impl._M_start,
   b4b7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b4b80:	b118      	cbz	r0, b4b8a <_ZN7RailwayD1Ev+0x26>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4b82:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	::operator delete(__p
   b4b84:	1a09      	subs	r1, r1, r0
   b4b86:	f7ff fa8c 	bl	b40a2 <_ZdlPvj>
      }
   b4b8a:	f104 0018 	add.w	r0, r4, #24
   b4b8e:	f7ff fd4b 	bl	b4628 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4b92:	f104 000c 	add.w	r0, r4, #12
   b4b96:	f7ff fd3d 	bl	b4614 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b4b9a:	4620      	mov	r0, r4
   b4b9c:	f7ff fd30 	bl	b4600 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
   b4ba0:	4620      	mov	r0, r4
   b4ba2:	bd10      	pop	{r4, pc}

000b4ba4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b4ba4:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b4ba6:	b510      	push	{r4, lr}
   b4ba8:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b4baa:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b4bae:	d005      	beq.n	b4bbc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b4bb0:	4601      	mov	r1, r0
   b4bb2:	4622      	mov	r2, r4
   b4bb4:	4618      	mov	r0, r3
   b4bb6:	f006 fabd 	bl	bb134 <memmove>
   b4bba:	4603      	mov	r3, r0
	}
   b4bbc:	1918      	adds	r0, r3, r4
   b4bbe:	bd10      	pop	{r4, pc}

000b4bc0 <_ZNSt6vectorIiSaIiEEC1ERKS1_>:
      vector(const vector& __x)
   b4bc0:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4bc2:	e9d1 3600 	ldrd	r3, r6, [r1]
   b4bc6:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4bc8:	2300      	movs	r3, #0
      vector(const vector& __x)
   b4bca:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4bcc:	e9c0 3300 	strd	r3, r3, [r0]
   b4bd0:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4bd2:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
   b4bd4:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4bd6:	f7ff fad1 	bl	b417c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4bda:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4bde:	4406      	add	r6, r0
   b4be0:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4be2:	4602      	mov	r2, r0
			      _Category>::__copy_m(__first, __last, __result);
   b4be4:	e9d5 0100 	ldrd	r0, r1, [r5]
   b4be8:	f7ff ffdc 	bl	b4ba4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
   b4bec:	6060      	str	r0, [r4, #4]
      }
   b4bee:	4620      	mov	r0, r4
   b4bf0:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4bf4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>:
      vector(initializer_list<value_type> __l,
   b4bf4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b4bf6:	ab04      	add	r3, sp, #16
   b4bf8:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4bfc:	2300      	movs	r3, #0
   b4bfe:	e9c0 3300 	strd	r3, r3, [r0]
   b4c02:	6083      	str	r3, [r0, #8]
      vector(initializer_list<value_type> __l,
   b4c04:	4604      	mov	r4, r0
   b4c06:	4613      	mov	r3, r2
   b4c08:	460e      	mov	r6, r1
   b4c0a:	0095      	lsls	r5, r2, #2
   b4c0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   b4c10:	f342 001d 	sbfx	r0, r2, #0, #30
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4c14:	4a0a      	ldr	r2, [pc, #40]	; (b4c40 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x4c>)
   b4c16:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   b4c1a:	d202      	bcs.n	b4c22 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x2e>
	  __throw_length_error(
   b4c1c:	4809      	ldr	r0, [pc, #36]	; (b4c44 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x50>)
   b4c1e:	f005 fa57 	bl	ba0d0 <_ZSt20__throw_length_errorPKc>
   b4c22:	9101      	str	r1, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4c24:	f7ff faaa 	bl	b417c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4c28:	4405      	add	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4c2a:	4602      	mov	r2, r0
   b4c2c:	6020      	str	r0, [r4, #0]
   b4c2e:	9901      	ldr	r1, [sp, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4c30:	60a5      	str	r5, [r4, #8]
   b4c32:	4630      	mov	r0, r6
   b4c34:	f7ff ffb6 	bl	b4ba4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
   b4c38:	6060      	str	r0, [r4, #4]
      }
   b4c3a:	b004      	add	sp, #16
   b4c3c:	bd70      	pop	{r4, r5, r6, pc}
   b4c3e:	bf00      	nop
   b4c40:	7ffffffc 	.word	0x7ffffffc
   b4c44:	000bd315 	.word	0x000bd315

000b4c48 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>:
      if (&__x != this)
   b4c48:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b4c4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b4c4c:	4604      	mov	r4, r0
   b4c4e:	460d      	mov	r5, r1
      if (&__x != this)
   b4c50:	d01d      	beq.n	b4c8e <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x46>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c52:	e9d1 7100 	ldrd	r7, r1, [r1]
			 - this->_M_impl._M_start); }
   b4c56:	6802      	ldr	r2, [r0, #0]
   b4c58:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c5a:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b4c5c:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b4c5e:	429e      	cmp	r6, r3
   b4c60:	d917      	bls.n	b4c92 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x4a>
	  pointer __result = this->_M_allocate(__n);
   b4c62:	10b0      	asrs	r0, r6, #2
   b4c64:	9101      	str	r1, [sp, #4]
   b4c66:	f7ff fa89 	bl	b417c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
   b4c6a:	9901      	ldr	r1, [sp, #4]
   b4c6c:	4602      	mov	r2, r0
   b4c6e:	4605      	mov	r5, r0
   b4c70:	4638      	mov	r0, r7
   b4c72:	f7ff ff97 	bl	b4ba4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4c76:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4c78:	b118      	cbz	r0, b4c82 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x3a>
			    - this->_M_impl._M_start);
   b4c7a:	68a1      	ldr	r1, [r4, #8]
   b4c7c:	1a09      	subs	r1, r1, r0
   b4c7e:	f7ff fa10 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b4c82:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4c84:	4435      	add	r5, r6
   b4c86:	60a5      	str	r5, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4c88:	6823      	ldr	r3, [r4, #0]
   b4c8a:	4433      	add	r3, r6
   b4c8c:	6063      	str	r3, [r4, #4]
    }
   b4c8e:	b003      	add	sp, #12
   b4c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c92:	6843      	ldr	r3, [r0, #4]
   b4c94:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b4c96:	429e      	cmp	r6, r3
   b4c98:	d803      	bhi.n	b4ca2 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x5a>
   b4c9a:	4638      	mov	r0, r7
   b4c9c:	f7ff ff82 	bl	b4ba4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
   b4ca0:	e7f2      	b.n	b4c88 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x40>
   b4ca2:	18f9      	adds	r1, r7, r3
   b4ca4:	4638      	mov	r0, r7
   b4ca6:	f7ff ff7d 	bl	b4ba4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
   b4caa:	e9d4 0200 	ldrd	r0, r2, [r4]
   b4cae:	e9d5 3100 	ldrd	r3, r1, [r5]
   b4cb2:	1a10      	subs	r0, r2, r0
   b4cb4:	4418      	add	r0, r3
   b4cb6:	e7f1      	b.n	b4c9c <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x54>

000b4cb8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b4cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4cbc:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b4cbe:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4cc0:	480b      	ldr	r0, [pc, #44]	; (b4cf0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x38>)
   b4cc2:	10a4      	asrs	r4, r4, #2
   b4cc4:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b4cc6:	4616      	mov	r6, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4cc8:	4627      	mov	r7, r4
   b4cca:	4690      	mov	r8, r2
   b4ccc:	2f00      	cmp	r7, #0
   b4cce:	dd08      	ble.n	b4ce2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x2a>
	      *__result = *__first;
   b4cd0:	4629      	mov	r1, r5
   b4cd2:	4640      	mov	r0, r8
   b4cd4:	f7ff ffb8 	bl	b4c48 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	      ++__first;
   b4cd8:	350c      	adds	r5, #12
	      ++__result;
   b4cda:	f108 080c 	add.w	r8, r8, #12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4cde:	3f01      	subs	r7, #1
   b4ce0:	e7f4      	b.n	b4ccc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x14>
	  return __result;
   b4ce2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b4ce6:	200c      	movs	r0, #12
   b4ce8:	fb00 6004 	mla	r0, r0, r4, r6
   b4cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4cf0:	aaaaaaab 	.word	0xaaaaaaab

000b4cf4 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>:
    std::vector<std::string> colors;
    int tripleIndex = -1;
    int loopIndex = -1;
    int lowerLoopBound, upperLoopBound;

    Railway(std::vector<Checkpoint> checkpointInput, std::vector<int> scalerInput, std::vector<int> outputSize, std::string nameInput, std::vector<std::string> colorInput, std::vector<int> loopBoundInput = {0, 0}){
   b4cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4cf8:	2500      	movs	r5, #0
   b4cfa:	4698      	mov	r8, r3
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b4cfc:	f100 0338 	add.w	r3, r0, #56	; 0x38
      { _M_string_length = __length; }
   b4d00:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   b4d04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4d08:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
   b4d0c:	4604      	mov	r4, r0
   b4d0e:	e9c0 5500 	strd	r5, r5, [r0]
   b4d12:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b4d16:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b4d1a:	e9c0 5506 	strd	r5, r5, [r0, #24]
   b4d1e:	e9c0 5508 	strd	r5, r5, [r0, #32]
   b4d22:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
   b4d26:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
   b4d2a:	b095      	sub	sp, #84	; 0x54
   b4d2c:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
   b4d30:	6505      	str	r5, [r0, #80]	; 0x50
   b4d32:	4691      	mov	r9, r2
   b4d34:	f100 0a18 	add.w	sl, r0, #24
   b4d38:	f100 0730 	add.w	r7, r0, #48	; 0x30
   b4d3c:	f100 0648 	add.w	r6, r0, #72	; 0x48
      checkpoints = checkpointInput;
   b4d40:	f7ff fb5a 	bl	b43f8 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4d44:	e9d4 2300 	ldrd	r2, r3, [r4]
   b4d48:	1a9b      	subs	r3, r3, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4d4a:	42ab      	cmp	r3, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4d4c:	ea4f 01e3 	mov.w	r1, r3, asr #3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4d50:	da02      	bge.n	b4d58 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x64>
	  __throw_length_error(
   b4d52:	485a      	ldr	r0, [pc, #360]	; (b4ebc <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1c8>)
   b4d54:	f005 f9bc 	bl	ba0d0 <_ZSt20__throw_length_errorPKc>
      { _M_create_storage(__n); }
   b4d58:	a808      	add	r0, sp, #32
   b4d5a:	9101      	str	r1, [sp, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4d5c:	e9cd 5508 	strd	r5, r5, [sp, #32]
   b4d60:	950a      	str	r5, [sp, #40]	; 0x28
      { _M_create_storage(__n); }
   b4d62:	f7ff fedf 	bl	b4b24 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
      if (__n <= 0)
   b4d66:	9901      	ldr	r1, [sp, #4]
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
   b4d68:	9808      	ldr	r0, [sp, #32]
   b4d6a:	b131      	cbz	r1, b4d7a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x86>
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
   b4d6c:	eb00 0b81 	add.w	fp, r0, r1, lsl #2
	*__first = __tmp;
   b4d70:	008a      	lsls	r2, r1, #2
   b4d72:	4629      	mov	r1, r5
   b4d74:	f006 f9f8 	bl	bb168 <memset>
   b4d78:	4658      	mov	r0, fp
	  _M_finish = __x._M_finish;
   b4d7a:	e9d4 5203 	ldrd	r5, r2, [r4, #12]
	  _M_start = __x._M_start;
   b4d7e:	9908      	ldr	r1, [sp, #32]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4d80:	6963      	ldr	r3, [r4, #20]
   b4d82:	930d      	str	r3, [sp, #52]	; 0x34
	  _M_finish = __x._M_finish;
   b4d84:	e9c4 1003 	strd	r1, r0, [r4, #12]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4d88:	990a      	ldr	r1, [sp, #40]	; 0x28
   b4d8a:	6161      	str	r1, [r4, #20]
	  _M_finish = __x._M_finish;
   b4d8c:	e9cd 520b 	strd	r5, r2, [sp, #44]	; 0x2c
      }
   b4d90:	a80b      	add	r0, sp, #44	; 0x2c
	  _M_start = __x._M_start;
   b4d92:	2500      	movs	r5, #0
	  _M_finish = __x._M_finish;
   b4d94:	e9cd 5508 	strd	r5, r5, [sp, #32]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4d98:	950a      	str	r5, [sp, #40]	; 0x28
      }
   b4d9a:	f7ff fc3b 	bl	b4614 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b4d9e:	a808      	add	r0, sp, #32
   b4da0:	f7ff fc38 	bl	b4614 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
      distances = std::vector<float>(checkpoints.size(), 0);
      scalers = scalerInput;
   b4da4:	4649      	mov	r1, r9
   b4da6:	4650      	mov	r0, sl
   b4da8:	f7ff ff4e 	bl	b4c48 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
      outputs = {std::vector<int>(outputSize[0], 0), std::vector<int>(outputSize[1], 0), std::vector<int>(outputSize[2], 0)};
   b4dac:	f8d8 1000 	ldr.w	r1, [r8]
   b4db0:	9506      	str	r5, [sp, #24]
   b4db2:	6809      	ldr	r1, [r1, #0]
   b4db4:	ab03      	add	r3, sp, #12
   b4db6:	aa06      	add	r2, sp, #24
   b4db8:	a80b      	add	r0, sp, #44	; 0x2c
   b4dba:	f7ff fc53 	bl	b4664 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b4dbe:	f8d8 1000 	ldr.w	r1, [r8]
   b4dc2:	9507      	str	r5, [sp, #28]
   b4dc4:	6849      	ldr	r1, [r1, #4]
   b4dc6:	ab04      	add	r3, sp, #16
   b4dc8:	aa07      	add	r2, sp, #28
   b4dca:	a80e      	add	r0, sp, #56	; 0x38
   b4dcc:	f7ff fc4a 	bl	b4664 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b4dd0:	f8d8 1000 	ldr.w	r1, [r8]
   b4dd4:	9508      	str	r5, [sp, #32]
   b4dd6:	ab05      	add	r3, sp, #20
   b4dd8:	aa08      	add	r2, sp, #32
   b4dda:	6889      	ldr	r1, [r1, #8]
   b4ddc:	a811      	add	r0, sp, #68	; 0x44
   b4dde:	f7ff fc41 	bl	b4664 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
			 - this->_M_impl._M_start); }
   b4de2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b4de4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b4de6:	1a9b      	subs	r3, r3, r2
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
		    std::forward_iterator_tag)
      {
	const size_type __len = std::distance(__first, __last);

	if (__len > capacity())
   b4de8:	2b23      	cmp	r3, #35	; 0x23
   b4dea:	d83e      	bhi.n	b4e6a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x176>
	  pointer __result = this->_M_allocate(__n);
   b4dec:	2003      	movs	r0, #3
   b4dee:	f7ff f979 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
   b4df2:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
   b4df6:	4605      	mov	r5, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b4df8:	f100 0924 	add.w	r9, r0, #36	; 0x24
	  _ForwardIterator __cur = __result;
   b4dfc:	4680      	mov	r8, r0
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4dfe:	f1b8 0f00 	cmp.w	r8, #0
   b4e02:	d003      	beq.n	b4e0c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x118>
   b4e04:	4651      	mov	r1, sl
   b4e06:	4640      	mov	r0, r8
   b4e08:	f7ff feda 	bl	b4bc0 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
	      for (; __first != __last; ++__first, (void)++__cur)
   b4e0c:	f108 080c 	add.w	r8, r8, #12
   b4e10:	45c8      	cmp	r8, r9
   b4e12:	f10a 0a0c 	add.w	sl, sl, #12
   b4e16:	d1f2      	bne.n	b4dfe <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x10a>
	__destroy(__first, __last);
   b4e18:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b4e1c:	f7ff fe97 	bl	b4b4e <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	    _S_check_init_len(__len, _M_get_Tp_allocator());
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
	    _M_deallocate(this->_M_impl._M_start,
   b4e20:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b4e22:	b118      	cbz	r0, b4e2c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x138>
			  this->_M_impl._M_end_of_storage
			  - this->_M_impl._M_start);
   b4e24:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b4e26:	1a09      	subs	r1, r1, r0
   b4e28:	f7ff f93b 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b4e2c:	e9c4 5909 	strd	r5, r9, [r4, #36]	; 0x24
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b4e30:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
      }
   b4e34:	a811      	add	r0, sp, #68	; 0x44
   b4e36:	f7ff fbf7 	bl	b4628 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4e3a:	a80e      	add	r0, sp, #56	; 0x38
   b4e3c:	f7ff fbf4 	bl	b4628 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4e40:	a80b      	add	r0, sp, #44	; 0x2c
   b4e42:	f7ff fbf1 	bl	b4628 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
	this->_M_assign(__str);
   b4e46:	991e      	ldr	r1, [sp, #120]	; 0x78
   b4e48:	4638      	mov	r0, r7
   b4e4a:	f005 f997 	bl	ba17c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
      name = nameInput;
      colors = colorInput;
   b4e4e:	4630      	mov	r0, r6
   b4e50:	991f      	ldr	r1, [sp, #124]	; 0x7c
   b4e52:	f7ff fb23 	bl	b449c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
	return *(this->_M_impl._M_start + __n);
   b4e56:	9b20      	ldr	r3, [sp, #128]	; 0x80
   b4e58:	681b      	ldr	r3, [r3, #0]
      lowerLoopBound = loopBoundInput[0];
   b4e5a:	681a      	ldr	r2, [r3, #0]
      upperLoopBound = loopBoundInput[1];
   b4e5c:	685b      	ldr	r3, [r3, #4]
      lowerLoopBound = loopBoundInput[0];
   b4e5e:	65e2      	str	r2, [r4, #92]	; 0x5c
    }
   b4e60:	4620      	mov	r0, r4
      upperLoopBound = loopBoundInput[1];
   b4e62:	6623      	str	r3, [r4, #96]	; 0x60
    }
   b4e64:	b015      	add	sp, #84	; 0x54
   b4e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4e6a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   b4e6c:	1aad      	subs	r5, r5, r2
	  }
	else if (size() >= __len)
   b4e6e:	2d23      	cmp	r5, #35	; 0x23
   b4e70:	d90b      	bls.n	b4e8a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x196>
			      _Category>::__copy_m(__first, __last, __result);
   b4e72:	a914      	add	r1, sp, #80	; 0x50
   b4e74:	a80b      	add	r0, sp, #44	; 0x2c
   b4e76:	f7ff ff1f 	bl	b4cb8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b4e7a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b4e7c:	4288      	cmp	r0, r1
   b4e7e:	4605      	mov	r5, r0
   b4e80:	d0d8      	beq.n	b4e34 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x140>
   b4e82:	f7ff fe64 	bl	b4b4e <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   b4e86:	62a5      	str	r5, [r4, #40]	; 0x28
   b4e88:	e7d4      	b.n	b4e34 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x140>
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b4e8a:	ab0b      	add	r3, sp, #44	; 0x2c
   b4e8c:	441d      	add	r5, r3
   b4e8e:	4629      	mov	r1, r5
   b4e90:	4618      	mov	r0, r3
   b4e92:	f7ff ff11 	bl	b4cb8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4e96:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
   b4e9a:	ab14      	add	r3, sp, #80	; 0x50
   b4e9c:	429d      	cmp	r5, r3
   b4e9e:	d00a      	beq.n	b4eb6 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1c2>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4ea0:	f1b8 0f00 	cmp.w	r8, #0
   b4ea4:	d003      	beq.n	b4eae <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ba>
   b4ea6:	4629      	mov	r1, r5
   b4ea8:	4640      	mov	r0, r8
   b4eaa:	f7ff fe89 	bl	b4bc0 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b4eae:	350c      	adds	r5, #12
   b4eb0:	f108 080c 	add.w	r8, r8, #12
   b4eb4:	e7f1      	b.n	b4e9a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1a6>
	    _ForwardIterator __mid = __first;
	    std::advance(__mid, size());
	    std::copy(__first, __mid, this->_M_impl._M_start);
	    const size_type __attribute__((__unused__)) __n = __len - size();
	    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	    this->_M_impl._M_finish =
   b4eb6:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
   b4eba:	e7bb      	b.n	b4e34 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x140>
   b4ebc:	000bd315 	.word	0x000bd315

000b4ec0 <_Z41__static_initialization_and_destruction_0ii.constprop.0>:
   b4ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4ec4:	ed2d 8b0e 	vpush	{d8-d14}
   b4ec8:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
   b4ecc:	2801      	cmp	r0, #1
   b4ece:	9007      	str	r0, [sp, #28]
   b4ed0:	f040 85a1 	bne.w	b5a16 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb56>
  public:
    float lat;
    float lon;

    Checkpoint(float la, float lo){
      lat = la;
   b4ed4:	4bb5      	ldr	r3, [pc, #724]	; (b51ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2ec>)
   b4ed6:	9372      	str	r3, [sp, #456]	; 0x1c8
      lon = lo;
   b4ed8:	4bb5      	ldr	r3, [pc, #724]	; (b51b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f0>)
   b4eda:	9373      	str	r3, [sp, #460]	; 0x1cc
      lat = la;
   b4edc:	4bb5      	ldr	r3, [pc, #724]	; (b51b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f4>)
   b4ede:	9374      	str	r3, [sp, #464]	; 0x1d0
      lon = lo;
   b4ee0:	4bb5      	ldr	r3, [pc, #724]	; (b51b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f8>)
   b4ee2:	9375      	str	r3, [sp, #468]	; 0x1d4
      lat = la;
   b4ee4:	4bb5      	ldr	r3, [pc, #724]	; (b51bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2fc>)
   b4ee6:	9376      	str	r3, [sp, #472]	; 0x1d8
      lon = lo;
   b4ee8:	4bb5      	ldr	r3, [pc, #724]	; (b51c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x300>)
   b4eea:	9377      	str	r3, [sp, #476]	; 0x1dc
      lat = la;
   b4eec:	4bb5      	ldr	r3, [pc, #724]	; (b51c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x304>)
   b4eee:	9378      	str	r3, [sp, #480]	; 0x1e0
      lon = lo;
   b4ef0:	4bb5      	ldr	r3, [pc, #724]	; (b51c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x308>)
   b4ef2:	9379      	str	r3, [sp, #484]	; 0x1e4
      lat = la;
   b4ef4:	4bb5      	ldr	r3, [pc, #724]	; (b51cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x30c>)
   b4ef6:	937a      	str	r3, [sp, #488]	; 0x1e8
      lon = lo;
   b4ef8:	4bb5      	ldr	r3, [pc, #724]	; (b51d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x310>)
   b4efa:	937b      	str	r3, [sp, #492]	; 0x1ec
);
   b4efc:	ab72      	add	r3, sp, #456	; 0x1c8
   b4efe:	9351      	str	r3, [sp, #324]	; 0x144
   b4f00:	f50d 798a 	add.w	r9, sp, #276	; 0x114
   b4f04:	2305      	movs	r3, #5
   b4f06:	9951      	ldr	r1, [sp, #324]	; 0x144
   b4f08:	9352      	str	r3, [sp, #328]	; 0x148
   b4f0a:	2205      	movs	r2, #5
   b4f0c:	464b      	mov	r3, r9
   b4f0e:	a862      	add	r0, sp, #392	; 0x188
   b4f10:	f7ff fbca 	bl	b46a8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b4f14:	4baf      	ldr	r3, [pc, #700]	; (b51d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x314>)
      lat = la;
   b4f16:	eddf 8ab0 	vldr	s17, [pc, #704]	; b51d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x318>
      lon = lo;
   b4f1a:	ed9f 8ab0 	vldr	s16, [pc, #704]	; b51dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x31c>
      lat = la;
   b4f1e:	eddf 9ab0 	vldr	s19, [pc, #704]	; b51e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x320>
      lon = lo;
   b4f22:	ed9f 9ab0 	vldr	s18, [pc, #704]	; b51e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x324>
      lat = la;
   b4f26:	eddf aab0 	vldr	s21, [pc, #704]	; b51e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x328>
      lon = lo;
   b4f2a:	ed9f aab0 	vldr	s20, [pc, #704]	; b51ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x32c>
      lat = la;
   b4f2e:	eddf bab0 	vldr	s23, [pc, #704]	; b51f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x330>
      lon = lo;
   b4f32:	ed9f bab0 	vldr	s22, [pc, #704]	; b51f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x334>
      lat = la;
   b4f36:	eddf dab0 	vldr	s27, [pc, #704]	; b51f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x338>
      lon = lo;
   b4f3a:	ed9f dab0 	vldr	s26, [pc, #704]	; b51fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x33c>
      lat = la;
   b4f3e:	eddf cab0 	vldr	s25, [pc, #704]	; b5200 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x340>
      lon = lo;
   b4f42:	ed9f cab0 	vldr	s24, [pc, #704]	; b5204 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x344>
   b4f46:	ed9f eab0 	vldr	s28, [pc, #704]	; b5208 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x348>
   b4f4a:	461f      	mov	r7, r3
   b4f4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4f4e:	ac65      	add	r4, sp, #404	; 0x194
   b4f50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b4f54:	2204      	movs	r2, #4
   b4f56:	4621      	mov	r1, r4
   b4f58:	a85f      	add	r0, sp, #380	; 0x17c
   b4f5a:	944f      	str	r4, [sp, #316]	; 0x13c
   b4f5c:	9250      	str	r2, [sp, #320]	; 0x140
   b4f5e:	f7ff fe49 	bl	b4bf4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b4f62:	aa59      	add	r2, sp, #356	; 0x164
   b4f64:	2500      	movs	r5, #0
   b4f66:	924d      	str	r2, [sp, #308]	; 0x134
   b4f68:	2328      	movs	r3, #40	; 0x28
   b4f6a:	2203      	movs	r2, #3
   b4f6c:	e9cd 5359 	strd	r5, r3, [sp, #356]	; 0x164
   b4f70:	924e      	str	r2, [sp, #312]	; 0x138
   b4f72:	ab4d      	add	r3, sp, #308	; 0x134
   b4f74:	f50d 7bd6 	add.w	fp, sp, #428	; 0x1ac
   b4f78:	e893 0006 	ldmia.w	r3, {r1, r2}
   b4f7c:	a85c      	add	r0, sp, #368	; 0x170
   b4f7e:	955b      	str	r5, [sp, #364]	; 0x16c
   b4f80:	f7ff fe38 	bl	b4bf4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b4f84:	49a1      	ldr	r1, [pc, #644]	; (b520c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x34c>)
   b4f86:	4658      	mov	r0, fp
   b4f88:	f7ff f8be 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b4f8c:	49a0      	ldr	r1, [pc, #640]	; (b5210 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x350>)
   b4f8e:	a87e      	add	r0, sp, #504	; 0x1f8
   b4f90:	f7ff f8ba 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b4f94:	499f      	ldr	r1, [pc, #636]	; (b5214 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x354>)
   b4f96:	a884      	add	r0, sp, #528	; 0x210
   b4f98:	f04f 0a02 	mov.w	sl, #2
   b4f9c:	f7ff f8b4 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b4fa0:	a97e      	add	r1, sp, #504	; 0x1f8
   b4fa2:	f8cd a130 	str.w	sl, [sp, #304]	; 0x130
   b4fa6:	f50d 7886 	add.w	r8, sp, #268	; 0x10c
   b4faa:	914b      	str	r1, [sp, #300]	; 0x12c
   b4fac:	aa4b      	add	r2, sp, #300	; 0x12c
   b4fae:	4643      	mov	r3, r8
   b4fb0:	ae47      	add	r6, sp, #284	; 0x11c
   b4fb2:	ca06      	ldmia	r2, {r1, r2}
   b4fb4:	a856      	add	r0, sp, #344	; 0x158
   b4fb6:	f7ff fbab 	bl	b4710 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b4fba:	e9cd 6a49 	strd	r6, sl, [sp, #292]	; 0x124
   b4fbe:	ab49      	add	r3, sp, #292	; 0x124
   b4fc0:	e893 0006 	ldmia.w	r3, {r1, r2}
   b4fc4:	a853      	add	r0, sp, #332	; 0x14c
   b4fc6:	e9cd 5547 	strd	r5, r5, [sp, #284]	; 0x11c
   b4fca:	f7ff fe13 	bl	b4bf4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway redLine = Railway(
   b4fce:	aa53      	add	r2, sp, #332	; 0x14c
   b4fd0:	9202      	str	r2, [sp, #8]
   b4fd2:	aa56      	add	r2, sp, #344	; 0x158
   b4fd4:	e9cd b200 	strd	fp, r2, [sp]
   b4fd8:	aa5c      	add	r2, sp, #368	; 0x170
   b4fda:	4613      	mov	r3, r2
   b4fdc:	a962      	add	r1, sp, #392	; 0x188
   b4fde:	aa5f      	add	r2, sp, #380	; 0x17c
   b4fe0:	488d      	ldr	r0, [pc, #564]	; (b5218 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x358>)
   b4fe2:	f7ff fe87 	bl	b4cf4 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
      }
   b4fe6:	a853      	add	r0, sp, #332	; 0x14c
   b4fe8:	f7ff fb1e 	bl	b4628 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b4fec:	a856      	add	r0, sp, #344	; 0x158
   b4fee:	f7ff fb25 	bl	b463c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b4ff2:	a884      	add	r0, sp, #528	; 0x210
   b4ff4:	f005 f8a4 	bl	ba140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4ff8:	a87e      	add	r0, sp, #504	; 0x1f8
   b4ffa:	f005 f8a1 	bl	ba140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4ffe:	4658      	mov	r0, fp
   b5000:	f005 f89e 	bl	ba140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5004:	a85c      	add	r0, sp, #368	; 0x170
   b5006:	f7ff fb0f 	bl	b4628 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b500a:	a85f      	add	r0, sp, #380	; 0x17c
   b500c:	f7ff fb0c 	bl	b4628 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5010:	a862      	add	r0, sp, #392	; 0x188
   b5012:	f7ff faf5 	bl	b4600 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5016:	4b81      	ldr	r3, [pc, #516]	; (b521c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x35c>)
   b5018:	937e      	str	r3, [sp, #504]	; 0x1f8
      lon = lo;
   b501a:	4b81      	ldr	r3, [pc, #516]	; (b5220 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x360>)
   b501c:	937f      	str	r3, [sp, #508]	; 0x1fc
      lat = la;
   b501e:	4b81      	ldr	r3, [pc, #516]	; (b5224 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x364>)
   b5020:	9380      	str	r3, [sp, #512]	; 0x200
      lon = lo;
   b5022:	4b81      	ldr	r3, [pc, #516]	; (b5228 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x368>)
   b5024:	9381      	str	r3, [sp, #516]	; 0x204
      lat = la;
   b5026:	4b81      	ldr	r3, [pc, #516]	; (b522c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x36c>)
   b5028:	9382      	str	r3, [sp, #520]	; 0x208
      lon = lo;
   b502a:	4b81      	ldr	r3, [pc, #516]	; (b5230 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x370>)
   b502c:	9383      	str	r3, [sp, #524]	; 0x20c
      lat = la;
   b502e:	4b81      	ldr	r3, [pc, #516]	; (b5234 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x374>)
   b5030:	9384      	str	r3, [sp, #528]	; 0x210
      lon = lo;
   b5032:	4b81      	ldr	r3, [pc, #516]	; (b5238 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x378>)
   b5034:	9385      	str	r3, [sp, #532]	; 0x214
      lat = la;
   b5036:	4b81      	ldr	r3, [pc, #516]	; (b523c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x37c>)
   b5038:	9386      	str	r3, [sp, #536]	; 0x218
      lon = lo;
   b503a:	4b81      	ldr	r3, [pc, #516]	; (b5240 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x380>)
   b503c:	9387      	str	r3, [sp, #540]	; 0x21c
      lat = la;
   b503e:	4b81      	ldr	r3, [pc, #516]	; (b5244 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x384>)
   b5040:	9388      	str	r3, [sp, #544]	; 0x220
);
   b5042:	aa7e      	add	r2, sp, #504	; 0x1f8
      lon = lo;
   b5044:	4b80      	ldr	r3, [pc, #512]	; (b5248 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x388>)
   b5046:	9247      	str	r2, [sp, #284]	; 0x11c
   b5048:	9389      	str	r3, [sp, #548]	; 0x224
   b504a:	2207      	movs	r2, #7
      lat = la;
   b504c:	4b7f      	ldr	r3, [pc, #508]	; (b524c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x38c>)
   b504e:	938a      	str	r3, [sp, #552]	; 0x228
   b5050:	9248      	str	r2, [sp, #288]	; 0x120
      lon = lo;
   b5052:	4b7f      	ldr	r3, [pc, #508]	; (b5250 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x390>)
   b5054:	938b      	str	r3, [sp, #556]	; 0x22c
   b5056:	e896 0006 	ldmia.w	r6, {r1, r2}
   b505a:	ab3b      	add	r3, sp, #236	; 0xec
   b505c:	f107 0610 	add.w	r6, r7, #16
   b5060:	a862      	add	r0, sp, #392	; 0x188
   b5062:	f7ff fb21 	bl	b46a8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5066:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b5068:	465f      	mov	r7, fp
   b506a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b506c:	e896 0003 	ldmia.w	r6, {r0, r1}
   b5070:	2206      	movs	r2, #6
   b5072:	f8cd b114 	str.w	fp, [sp, #276]	; 0x114
   b5076:	9246      	str	r2, [sp, #280]	; 0x118
   b5078:	e9c7 0100 	strd	r0, r1, [r7]
   b507c:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5080:	a85f      	add	r0, sp, #380	; 0x17c
   b5082:	9705      	str	r7, [sp, #20]
   b5084:	f7ff fdb6 	bl	b4bf4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5088:	aa59      	add	r2, sp, #356	; 0x164
   b508a:	9243      	str	r2, [sp, #268]	; 0x10c
   b508c:	2203      	movs	r2, #3
   b508e:	9244      	str	r2, [sp, #272]	; 0x110
   b5090:	e898 0006 	ldmia.w	r8, {r1, r2}
   b5094:	233c      	movs	r3, #60	; 0x3c
   b5096:	a85c      	add	r0, sp, #368	; 0x170
   b5098:	e9cd 355a 	strd	r3, r5, [sp, #360]	; 0x168
   b509c:	9559      	str	r5, [sp, #356]	; 0x164
   b509e:	f7ff fda9 	bl	b4bf4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b50a2:	4620      	mov	r0, r4
   b50a4:	496b      	ldr	r1, [pc, #428]	; (b5254 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x394>)
   b50a6:	f7ff f82f 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b50aa:	496b      	ldr	r1, [pc, #428]	; (b5258 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x398>)
   b50ac:	a872      	add	r0, sp, #456	; 0x1c8
   b50ae:	f7ff f82b 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b50b2:	496a      	ldr	r1, [pc, #424]	; (b525c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x39c>)
   b50b4:	a878      	add	r0, sp, #480	; 0x1e0
   b50b6:	f7ff f827 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b50ba:	a972      	add	r1, sp, #456	; 0x1c8
   b50bc:	e9cd 1a41 	strd	r1, sl, [sp, #260]	; 0x104
   b50c0:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
   b50c4:	aa41      	add	r2, sp, #260	; 0x104
   b50c6:	464b      	mov	r3, r9
   b50c8:	ae3d      	add	r6, sp, #244	; 0xf4
   b50ca:	ca06      	ldmia	r2, {r1, r2}
   b50cc:	a856      	add	r0, sp, #344	; 0x158
   b50ce:	f7ff fb1f 	bl	b4710 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b50d2:	e9cd 6a3f 	strd	r6, sl, [sp, #252]	; 0xfc
   b50d6:	ab3f      	add	r3, sp, #252	; 0xfc
   b50d8:	e893 0006 	ldmia.w	r3, {r1, r2}
   b50dc:	a853      	add	r0, sp, #332	; 0x14c
   b50de:	e9cd 553d 	strd	r5, r5, [sp, #244]	; 0xf4
   b50e2:	f7ff fd87 	bl	b4bf4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway blueLine = Railway(
   b50e6:	aa53      	add	r2, sp, #332	; 0x14c
   b50e8:	9202      	str	r2, [sp, #8]
   b50ea:	aa56      	add	r2, sp, #344	; 0x158
   b50ec:	e9cd 4200 	strd	r4, r2, [sp]
   b50f0:	aa5c      	add	r2, sp, #368	; 0x170
   b50f2:	4613      	mov	r3, r2
   b50f4:	a962      	add	r1, sp, #392	; 0x188
   b50f6:	aa5f      	add	r2, sp, #380	; 0x17c
   b50f8:	4859      	ldr	r0, [pc, #356]	; (b5260 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3a0>)
   b50fa:	f7ff fdfb 	bl	b4cf4 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b50fe:	a853      	add	r0, sp, #332	; 0x14c
   b5100:	f7ff fa92 	bl	b4628 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5104:	a856      	add	r0, sp, #344	; 0x158
   b5106:	f7ff fa99 	bl	b463c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b510a:	a878      	add	r0, sp, #480	; 0x1e0
   b510c:	f005 f818 	bl	ba140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5110:	a872      	add	r0, sp, #456	; 0x1c8
   b5112:	f005 f815 	bl	ba140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5116:	4620      	mov	r0, r4
   b5118:	f005 f812 	bl	ba140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b511c:	a85c      	add	r0, sp, #368	; 0x170
   b511e:	f7ff fa83 	bl	b4628 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5122:	a85f      	add	r0, sp, #380	; 0x17c
   b5124:	f7ff fa80 	bl	b4628 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5128:	a862      	add	r0, sp, #392	; 0x188
   b512a:	f7ff fa69 	bl	b4600 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b512e:	aa7e      	add	r2, sp, #504	; 0x1f8
   b5130:	923d      	str	r2, [sp, #244]	; 0xf4
   b5132:	2207      	movs	r2, #7
   b5134:	f10d 08c4 	add.w	r8, sp, #196	; 0xc4
   b5138:	923e      	str	r2, [sp, #248]	; 0xf8
   b513a:	e896 0006 	ldmia.w	r6, {r1, r2}
   b513e:	4643      	mov	r3, r8
   b5140:	a862      	add	r0, sp, #392	; 0x188
      lat = la;
   b5142:	edcd 8a7e 	vstr	s17, [sp, #504]	; 0x1f8
      lon = lo;
   b5146:	ed8d 8a7f 	vstr	s16, [sp, #508]	; 0x1fc
      lat = la;
   b514a:	edcd 9a80 	vstr	s19, [sp, #512]	; 0x200
      lon = lo;
   b514e:	ed8d 9a81 	vstr	s18, [sp, #516]	; 0x204
      lat = la;
   b5152:	edcd aa82 	vstr	s21, [sp, #520]	; 0x208
      lon = lo;
   b5156:	ed8d aa83 	vstr	s20, [sp, #524]	; 0x20c
      lat = la;
   b515a:	edcd ba84 	vstr	s23, [sp, #528]	; 0x210
      lon = lo;
   b515e:	ed8d ba85 	vstr	s22, [sp, #532]	; 0x214
      lat = la;
   b5162:	edcd 8a86 	vstr	s17, [sp, #536]	; 0x218
      lon = lo;
   b5166:	ed8d 8a87 	vstr	s16, [sp, #540]	; 0x21c
      lat = la;
   b516a:	edcd da88 	vstr	s27, [sp, #544]	; 0x220
      lon = lo;
   b516e:	ed8d da89 	vstr	s26, [sp, #548]	; 0x224
      lat = la;
   b5172:	edcd ca8a 	vstr	s25, [sp, #552]	; 0x228
      lon = lo;
   b5176:	ed8d ca8b 	vstr	s24, [sp, #556]	; 0x22c
   b517a:	f7ff fa95 	bl	b46a8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b517e:	4b15      	ldr	r3, [pc, #84]	; (b51d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x314>)
   b5180:	f8cd b0ec 	str.w	fp, [sp, #236]	; 0xec
   b5184:	f103 0228 	add.w	r2, r3, #40	; 0x28
   b5188:	4617      	mov	r7, r2
   b518a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b518c:	465e      	mov	r6, fp
   b518e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5190:	e9d7 0100 	ldrd	r0, r1, [r7]
   b5194:	9a05      	ldr	r2, [sp, #20]
   b5196:	9706      	str	r7, [sp, #24]
   b5198:	e882 0003 	stmia.w	r2, {r0, r1}
   b519c:	2206      	movs	r2, #6
   b519e:	ab3b      	add	r3, sp, #236	; 0xec
   b51a0:	923c      	str	r2, [sp, #240]	; 0xf0
   b51a2:	e893 0006 	ldmia.w	r3, {r1, r2}
   b51a6:	a85f      	add	r0, sp, #380	; 0x17c
   b51a8:	e05c      	b.n	b5264 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3a4>
   b51aa:	bf00      	nop
   b51ac:	42276980 	.word	0x42276980
   b51b0:	c2af431e 	.word	0xc2af431e
   b51b4:	42279dcc 	.word	0x42279dcc
   b51b8:	c2af4202 	.word	0xc2af4202
   b51bc:	42279d95 	.word	0x42279d95
   b51c0:	c2af476d 	.word	0xc2af476d
   b51c4:	4227a7a9 	.word	0x4227a7a9
   b51c8:	c2af4e05 	.word	0xc2af4e05
   b51cc:	4227b382 	.word	0x4227b382
   b51d0:	c2af4e44 	.word	0xc2af4e44
   b51d4:	000bd5f8 	.word	0x000bd5f8
   b51d8:	42278b1a 	.word	0x42278b1a
   b51dc:	c2af449a 	.word	0xc2af449a
   b51e0:	42278b2f 	.word	0x42278b2f
   b51e4:	c2af4095 	.word	0xc2af4095
   b51e8:	422781d8 	.word	0x422781d8
   b51ec:	c2af4044 	.word	0xc2af4044
   b51f0:	42278216 	.word	0x42278216
   b51f4:	c2af44c1 	.word	0xc2af44c1
   b51f8:	4227a437 	.word	0x4227a437
   b51fc:	c2af4659 	.word	0xc2af4659
   b5200:	4227a49e 	.word	0x4227a49e
   b5204:	c2af4bd0 	.word	0xc2af4bd0
   b5208:	c2af4089 	.word	0xc2af4089
   b520c:	000bd2ea 	.word	0x000bd2ea
   b5210:	000bd3e9 	.word	0x000bd3e9
   b5214:	000bd3f0 	.word	0x000bd3f0
   b5218:	2003e5cc 	.word	0x2003e5cc
   b521c:	42277e9d 	.word	0x42277e9d
   b5220:	c2af74b3 	.word	0xc2af74b3
   b5224:	422780af 	.word	0x422780af
   b5228:	c2af588e 	.word	0xc2af588e
   b522c:	4227804d 	.word	0x4227804d
   b5230:	c2af482e 	.word	0xc2af482e
   b5234:	422780ad 	.word	0x422780ad
   b5238:	c2af4157 	.word	0xc2af4157
   b523c:	42278aff 	.word	0x42278aff
   b5240:	c2af4253 	.word	0xc2af4253
   b5244:	42278af4 	.word	0x42278af4
   b5248:	c2af4798 	.word	0xc2af4798
   b524c:	4227a978 	.word	0x4227a978
   b5250:	c2af5f5d 	.word	0xc2af5f5d
   b5254:	000bd2f6 	.word	0x000bd2f6
   b5258:	000bd3f7 	.word	0x000bd3f7
   b525c:	000bd3fe 	.word	0x000bd3fe
   b5260:	2003558c 	.word	0x2003558c
   b5264:	f7ff fcc6 	bl	b4bf4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5268:	f107 0208 	add.w	r2, r7, #8
   b526c:	ca07      	ldmia	r2, {r0, r1, r2}
   b526e:	af59      	add	r7, sp, #356	; 0x164
   b5270:	e887 0007 	stmia.w	r7, {r0, r1, r2}
   b5274:	2103      	movs	r1, #3
   b5276:	9739      	str	r7, [sp, #228]	; 0xe4
   b5278:	913a      	str	r1, [sp, #232]	; 0xe8
   b527a:	e899 0006 	ldmia.w	r9, {r1, r2}
   b527e:	a85c      	add	r0, sp, #368	; 0x170
   b5280:	f7ff fcb8 	bl	b4bf4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5284:	4620      	mov	r0, r4
   b5286:	49b5      	ldr	r1, [pc, #724]	; (b555c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x69c>)
   b5288:	f7fe ff3e 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b528c:	49b4      	ldr	r1, [pc, #720]	; (b5560 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a0>)
   b528e:	a872      	add	r0, sp, #456	; 0x1c8
   b5290:	f7fe ff3a 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5294:	49b3      	ldr	r1, [pc, #716]	; (b5564 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a4>)
   b5296:	a878      	add	r0, sp, #480	; 0x1e0
   b5298:	f7fe ff36 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b529c:	a972      	add	r1, sp, #456	; 0x1c8
   b529e:	e9cd 1a37 	strd	r1, sl, [sp, #220]	; 0xdc
   b52a2:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   b52a6:	aa37      	add	r2, sp, #220	; 0xdc
   b52a8:	ca06      	ldmia	r2, {r1, r2}
   b52aa:	464b      	mov	r3, r9
   b52ac:	ae33      	add	r6, sp, #204	; 0xcc
   b52ae:	a856      	add	r0, sp, #344	; 0x158
   b52b0:	f7ff fa2e 	bl	b4710 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b52b4:	e9cd 6a35 	strd	r6, sl, [sp, #212]	; 0xd4
   b52b8:	ab35      	add	r3, sp, #212	; 0xd4
   b52ba:	2104      	movs	r1, #4
   b52bc:	9134      	str	r1, [sp, #208]	; 0xd0
   b52be:	a853      	add	r0, sp, #332	; 0x14c
   b52c0:	e893 0006 	ldmia.w	r3, {r1, r2}
   b52c4:	9533      	str	r5, [sp, #204]	; 0xcc
   b52c6:	f7ff fc95 	bl	b4bf4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway brownLine = Railway(
   b52ca:	a953      	add	r1, sp, #332	; 0x14c
   b52cc:	9102      	str	r1, [sp, #8]
   b52ce:	a956      	add	r1, sp, #344	; 0x158
   b52d0:	e9cd 4100 	strd	r4, r1, [sp]
   b52d4:	a95c      	add	r1, sp, #368	; 0x170
   b52d6:	460b      	mov	r3, r1
   b52d8:	a95f      	add	r1, sp, #380	; 0x17c
   b52da:	460a      	mov	r2, r1
   b52dc:	48a2      	ldr	r0, [pc, #648]	; (b5568 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a8>)
   b52de:	a962      	add	r1, sp, #392	; 0x188
   b52e0:	f7ff fd08 	bl	b4cf4 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b52e4:	a853      	add	r0, sp, #332	; 0x14c
   b52e6:	f7ff f99f 	bl	b4628 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b52ea:	a856      	add	r0, sp, #344	; 0x158
   b52ec:	f7ff f9a6 	bl	b463c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b52f0:	a878      	add	r0, sp, #480	; 0x1e0
   b52f2:	f004 ff25 	bl	ba140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b52f6:	a872      	add	r0, sp, #456	; 0x1c8
   b52f8:	f004 ff22 	bl	ba140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b52fc:	4620      	mov	r0, r4
   b52fe:	f004 ff1f 	bl	ba140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5302:	a85c      	add	r0, sp, #368	; 0x170
   b5304:	f7ff f990 	bl	b4628 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5308:	a85f      	add	r0, sp, #380	; 0x17c
   b530a:	f7ff f98d 	bl	b4628 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b530e:	a862      	add	r0, sp, #392	; 0x188
   b5310:	f7ff f976 	bl	b4600 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5314:	4b95      	ldr	r3, [pc, #596]	; (b556c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6ac>)
   b5316:	9372      	str	r3, [sp, #456]	; 0x1c8
      lon = lo;
   b5318:	4b95      	ldr	r3, [pc, #596]	; (b5570 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b0>)
   b531a:	9373      	str	r3, [sp, #460]	; 0x1cc
      lat = la;
   b531c:	4b95      	ldr	r3, [pc, #596]	; (b5574 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b4>)
   b531e:	9374      	str	r3, [sp, #464]	; 0x1d0
);
   b5320:	a972      	add	r1, sp, #456	; 0x1c8
   b5322:	4b95      	ldr	r3, [pc, #596]	; (b5578 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b8>)
   b5324:	9133      	str	r1, [sp, #204]	; 0xcc
   b5326:	9378      	str	r3, [sp, #480]	; 0x1e0
   b5328:	2105      	movs	r1, #5
      lon = lo;
   b532a:	4b94      	ldr	r3, [pc, #592]	; (b557c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6bc>)
   b532c:	9379      	str	r3, [sp, #484]	; 0x1e4
   b532e:	9134      	str	r1, [sp, #208]	; 0xd0
      lat = la;
   b5330:	4b93      	ldr	r3, [pc, #588]	; (b5580 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c0>)
   b5332:	937a      	str	r3, [sp, #488]	; 0x1e8
   b5334:	e896 0006 	ldmia.w	r6, {r1, r2}
   b5338:	af27      	add	r7, sp, #156	; 0x9c
   b533a:	4e92      	ldr	r6, [pc, #584]	; (b5584 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c4>)
      lon = lo;
   b533c:	4b92      	ldr	r3, [pc, #584]	; (b5588 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c8>)
   b533e:	937b      	str	r3, [sp, #492]	; 0x1ec
   b5340:	a862      	add	r0, sp, #392	; 0x188
   b5342:	463b      	mov	r3, r7
   b5344:	ed8d ea75 	vstr	s28, [sp, #468]	; 0x1d4
      lat = la;
   b5348:	edcd 9a76 	vstr	s19, [sp, #472]	; 0x1d8
      lon = lo;
   b534c:	ed8d 9a77 	vstr	s18, [sp, #476]	; 0x1dc
   b5350:	f7ff f9aa 	bl	b46a8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5354:	f106 034c 	add.w	r3, r6, #76	; 0x4c
   b5358:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b535a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b535e:	2304      	movs	r3, #4
   b5360:	9431      	str	r4, [sp, #196]	; 0xc4
   b5362:	9332      	str	r3, [sp, #200]	; 0xc8
   b5364:	e898 0006 	ldmia.w	r8, {r1, r2}
   b5368:	a85f      	add	r0, sp, #380	; 0x17c
   b536a:	f7ff fc43 	bl	b4bf4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b536e:	f106 035c 	add.w	r3, r6, #92	; 0x5c
   b5372:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   b5376:	ab59      	add	r3, sp, #356	; 0x164
   b5378:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b537c:	932f      	str	r3, [sp, #188]	; 0xbc
   b537e:	2303      	movs	r3, #3
   b5380:	9330      	str	r3, [sp, #192]	; 0xc0
   b5382:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5386:	a85c      	add	r0, sp, #368	; 0x170
   b5388:	f7ff fc34 	bl	b4bf4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b538c:	497f      	ldr	r1, [pc, #508]	; (b558c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6cc>)
   b538e:	4658      	mov	r0, fp
   b5390:	f7fe feba 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5394:	497e      	ldr	r1, [pc, #504]	; (b5590 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d0>)
   b5396:	a87e      	add	r0, sp, #504	; 0x1f8
   b5398:	f7fe feb6 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b539c:	497d      	ldr	r1, [pc, #500]	; (b5594 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d4>)
   b539e:	a884      	add	r0, sp, #528	; 0x210
   b53a0:	f7fe feb2 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b53a4:	ab7e      	add	r3, sp, #504	; 0x1f8
   b53a6:	e9cd 3a2d 	strd	r3, sl, [sp, #180]	; 0xb4
   b53aa:	f10d 0994 	add.w	r9, sp, #148	; 0x94
   b53ae:	aa2d      	add	r2, sp, #180	; 0xb4
   b53b0:	464b      	mov	r3, r9
   b53b2:	ae29      	add	r6, sp, #164	; 0xa4
   b53b4:	ca06      	ldmia	r2, {r1, r2}
   b53b6:	a856      	add	r0, sp, #344	; 0x158
   b53b8:	f7ff f9aa 	bl	b4710 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b53bc:	e9cd 6a2b 	strd	r6, sl, [sp, #172]	; 0xac
   b53c0:	9b07      	ldr	r3, [sp, #28]
   b53c2:	9329      	str	r3, [sp, #164]	; 0xa4
   b53c4:	2303      	movs	r3, #3
   b53c6:	932a      	str	r3, [sp, #168]	; 0xa8
   b53c8:	ab2b      	add	r3, sp, #172	; 0xac
   b53ca:	e893 0006 	ldmia.w	r3, {r1, r2}
   b53ce:	a853      	add	r0, sp, #332	; 0x14c
   b53d0:	f7ff fc10 	bl	b4bf4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway greenLine = Railway(
   b53d4:	ab53      	add	r3, sp, #332	; 0x14c
   b53d6:	9302      	str	r3, [sp, #8]
   b53d8:	a95f      	add	r1, sp, #380	; 0x17c
   b53da:	ab56      	add	r3, sp, #344	; 0x158
   b53dc:	460a      	mov	r2, r1
   b53de:	e9cd b300 	strd	fp, r3, [sp]
   b53e2:	a962      	add	r1, sp, #392	; 0x188
   b53e4:	ab5c      	add	r3, sp, #368	; 0x170
   b53e6:	486c      	ldr	r0, [pc, #432]	; (b5598 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d8>)
   b53e8:	f7ff fc84 	bl	b4cf4 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b53ec:	a853      	add	r0, sp, #332	; 0x14c
   b53ee:	f7ff f91b 	bl	b4628 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b53f2:	a856      	add	r0, sp, #344	; 0x158
   b53f4:	f7ff f922 	bl	b463c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b53f8:	a884      	add	r0, sp, #528	; 0x210
   b53fa:	f004 fea1 	bl	ba140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b53fe:	a87e      	add	r0, sp, #504	; 0x1f8
   b5400:	f004 fe9e 	bl	ba140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5404:	4658      	mov	r0, fp
   b5406:	f004 fe9b 	bl	ba140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b540a:	a85c      	add	r0, sp, #368	; 0x170
   b540c:	f7ff f90c 	bl	b4628 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5410:	a85f      	add	r0, sp, #380	; 0x17c
   b5412:	f7ff f909 	bl	b4628 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5416:	a862      	add	r0, sp, #392	; 0x188
   b5418:	f7ff f8f2 	bl	b4600 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b541c:	4b5f      	ldr	r3, [pc, #380]	; (b559c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6dc>)
   b541e:	937e      	str	r3, [sp, #504]	; 0x1f8
      lon = lo;
   b5420:	4b5f      	ldr	r3, [pc, #380]	; (b55a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e0>)
   b5422:	937f      	str	r3, [sp, #508]	; 0x1fc
      lat = la;
   b5424:	4b5f      	ldr	r3, [pc, #380]	; (b55a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e4>)
   b5426:	9380      	str	r3, [sp, #512]	; 0x200
      lon = lo;
   b5428:	4b5f      	ldr	r3, [pc, #380]	; (b55a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e8>)
   b542a:	9381      	str	r3, [sp, #516]	; 0x204
      lat = la;
   b542c:	4b5f      	ldr	r3, [pc, #380]	; (b55ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6ec>)
   b542e:	9382      	str	r3, [sp, #520]	; 0x208
      lon = lo;
   b5430:	4b5f      	ldr	r3, [pc, #380]	; (b55b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f0>)
   b5432:	9383      	str	r3, [sp, #524]	; 0x20c
      lat = la;
   b5434:	4b5f      	ldr	r3, [pc, #380]	; (b55b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f4>)
   b5436:	9384      	str	r3, [sp, #528]	; 0x210
   b5438:	4b5f      	ldr	r3, [pc, #380]	; (b55b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f8>)
   b543a:	938a      	str	r3, [sp, #552]	; 0x228
      lon = lo;
   b543c:	4b5f      	ldr	r3, [pc, #380]	; (b55bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6fc>)
   b543e:	938b      	str	r3, [sp, #556]	; 0x22c
);
   b5440:	ab7e      	add	r3, sp, #504	; 0x1f8
   b5442:	9329      	str	r3, [sp, #164]	; 0xa4
   b5444:	2308      	movs	r3, #8
   b5446:	932a      	str	r3, [sp, #168]	; 0xa8
   b5448:	e896 0006 	ldmia.w	r6, {r1, r2}
   b544c:	4e4d      	ldr	r6, [pc, #308]	; (b5584 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c4>)
   b544e:	ed8d ea85 	vstr	s28, [sp, #532]	; 0x214
   b5452:	f10d 0874 	add.w	r8, sp, #116	; 0x74
   b5456:	4643      	mov	r3, r8
   b5458:	a862      	add	r0, sp, #392	; 0x188
   b545a:	3668      	adds	r6, #104	; 0x68
      lat = la;
   b545c:	edcd 9a86 	vstr	s19, [sp, #536]	; 0x218
      lon = lo;
   b5460:	ed8d 9a87 	vstr	s18, [sp, #540]	; 0x21c
      lat = la;
   b5464:	edcd 8a88 	vstr	s17, [sp, #544]	; 0x220
      lon = lo;
   b5468:	ed8d 8a89 	vstr	s16, [sp, #548]	; 0x224
      lat = la;
   b546c:	edcd aa8c 	vstr	s21, [sp, #560]	; 0x230
      lon = lo;
   b5470:	ed8d aa8d 	vstr	s20, [sp, #564]	; 0x234
   b5474:	f7ff f918 	bl	b46a8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5478:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b547a:	46dc      	mov	ip, fp
   b547c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5480:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   b5484:	9b05      	ldr	r3, [sp, #20]
   b5486:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
   b548a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b548e:	2307      	movs	r3, #7
   b5490:	9328      	str	r3, [sp, #160]	; 0xa0
   b5492:	e897 0006 	ldmia.w	r7, {r1, r2}
   b5496:	a85f      	add	r0, sp, #380	; 0x17c
   b5498:	f7ff fbac 	bl	b4bf4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b549c:	f106 030c 	add.w	r3, r6, #12
   b54a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   b54a4:	af59      	add	r7, sp, #356	; 0x164
   b54a6:	e887 0007 	stmia.w	r7, {r0, r1, r2}
   b54aa:	2103      	movs	r1, #3
   b54ac:	9725      	str	r7, [sp, #148]	; 0x94
   b54ae:	9126      	str	r1, [sp, #152]	; 0x98
   b54b0:	e899 0006 	ldmia.w	r9, {r1, r2}
   b54b4:	a85c      	add	r0, sp, #368	; 0x170
   b54b6:	f7ff fb9d 	bl	b4bf4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b54ba:	4620      	mov	r0, r4
   b54bc:	4940      	ldr	r1, [pc, #256]	; (b55c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x700>)
   b54be:	f7fe fe23 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b54c2:	4940      	ldr	r1, [pc, #256]	; (b55c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x704>)
   b54c4:	a872      	add	r0, sp, #456	; 0x1c8
   b54c6:	f7fe fe1f 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b54ca:	493f      	ldr	r1, [pc, #252]	; (b55c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x708>)
   b54cc:	a878      	add	r0, sp, #480	; 0x1e0
   b54ce:	f7fe fe1b 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b54d2:	a972      	add	r1, sp, #456	; 0x1c8
   b54d4:	e9cd 1a23 	strd	r1, sl, [sp, #140]	; 0x8c
   b54d8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   b54dc:	aa23      	add	r2, sp, #140	; 0x8c
   b54de:	ca06      	ldmia	r2, {r1, r2}
   b54e0:	464b      	mov	r3, r9
   b54e2:	ae1f      	add	r6, sp, #124	; 0x7c
   b54e4:	a856      	add	r0, sp, #344	; 0x158
   b54e6:	f7ff f913 	bl	b4710 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b54ea:	e9cd 6a21 	strd	r6, sl, [sp, #132]	; 0x84
   b54ee:	2303      	movs	r3, #3
   b54f0:	2107      	movs	r1, #7
   b54f2:	e9cd 311f 	strd	r3, r1, [sp, #124]	; 0x7c
   b54f6:	ab21      	add	r3, sp, #132	; 0x84
   b54f8:	e893 0006 	ldmia.w	r3, {r1, r2}
   b54fc:	a853      	add	r0, sp, #332	; 0x14c
   b54fe:	f7ff fb79 	bl	b4bf4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway orangeLine = Railway(
   b5502:	a953      	add	r1, sp, #332	; 0x14c
   b5504:	9102      	str	r1, [sp, #8]
   b5506:	a956      	add	r1, sp, #344	; 0x158
   b5508:	e9cd 4100 	strd	r4, r1, [sp]
   b550c:	a95c      	add	r1, sp, #368	; 0x170
   b550e:	460b      	mov	r3, r1
   b5510:	a95f      	add	r1, sp, #380	; 0x17c
   b5512:	460a      	mov	r2, r1
   b5514:	482d      	ldr	r0, [pc, #180]	; (b55cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x70c>)
   b5516:	a962      	add	r1, sp, #392	; 0x188
   b5518:	f7ff fbec 	bl	b4cf4 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b551c:	a853      	add	r0, sp, #332	; 0x14c
   b551e:	f7ff f883 	bl	b4628 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5522:	a856      	add	r0, sp, #344	; 0x158
   b5524:	f7ff f88a 	bl	b463c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5528:	a878      	add	r0, sp, #480	; 0x1e0
   b552a:	f004 fe09 	bl	ba140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b552e:	a872      	add	r0, sp, #456	; 0x1c8
   b5530:	f004 fe06 	bl	ba140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5534:	4620      	mov	r0, r4
   b5536:	f004 fe03 	bl	ba140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b553a:	a85c      	add	r0, sp, #368	; 0x170
   b553c:	f7ff f874 	bl	b4628 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5540:	a85f      	add	r0, sp, #380	; 0x17c
   b5542:	f7ff f871 	bl	b4628 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5546:	a862      	add	r0, sp, #392	; 0x188
   b5548:	f7ff f85a 	bl	b4600 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b554c:	a97e      	add	r1, sp, #504	; 0x1f8
   b554e:	911f      	str	r1, [sp, #124]	; 0x7c
   b5550:	2107      	movs	r1, #7
   b5552:	af13      	add	r7, sp, #76	; 0x4c
   b5554:	9120      	str	r1, [sp, #128]	; 0x80
   b5556:	e896 0006 	ldmia.w	r6, {r1, r2}
   b555a:	e039      	b.n	b55d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x710>
   b555c:	000bd3e3 	.word	0x000bd3e3
   b5560:	000bd405 	.word	0x000bd405
   b5564:	000bd40c 	.word	0x000bd40c
   b5568:	200355f0 	.word	0x200355f0
   b556c:	42276997 	.word	0x42276997
   b5570:	c2af40b8 	.word	0xc2af40b8
   b5574:	422781fe 	.word	0x422781fe
   b5578:	42278afb 	.word	0x42278afb
   b557c:	c2af4494 	.word	0xc2af4494
   b5580:	42278971 	.word	0x42278971
   b5584:	000bd5f8 	.word	0x000bd5f8
   b5588:	c2af6479 	.word	0xc2af6479
   b558c:	000bd303 	.word	0x000bd303
   b5590:	000bd413 	.word	0x000bd413
   b5594:	000bd41a 	.word	0x000bd41a
   b5598:	20035658 	.word	0x20035658
   b559c:	4227631a 	.word	0x4227631a
   b55a0:	c2af4bd2 	.word	0xc2af4bd2
   b55a4:	42276ec4 	.word	0x42276ec4
   b55a8:	c2af4115 	.word	0xc2af4115
   b55ac:	422780b5 	.word	0x422780b5
   b55b0:	c2af4086 	.word	0xc2af4086
   b55b4:	42278200 	.word	0x42278200
   b55b8:	422781e1 	.word	0x422781e1
   b55bc:	c2af4476 	.word	0xc2af4476
   b55c0:	000bd421 	.word	0x000bd421
   b55c4:	000bd428 	.word	0x000bd428
   b55c8:	000bd42f 	.word	0x000bd42f
   b55cc:	20037ed8 	.word	0x20037ed8
   b55d0:	463b      	mov	r3, r7
   b55d2:	a862      	add	r0, sp, #392	; 0x188
      lat = la;
   b55d4:	edcd 8a7e 	vstr	s17, [sp, #504]	; 0x1f8
      lon = lo;
   b55d8:	ed8d 8a7f 	vstr	s16, [sp, #508]	; 0x1fc
      lat = la;
   b55dc:	edcd 9a80 	vstr	s19, [sp, #512]	; 0x200
      lon = lo;
   b55e0:	ed8d 9a81 	vstr	s18, [sp, #516]	; 0x204
      lat = la;
   b55e4:	edcd aa82 	vstr	s21, [sp, #520]	; 0x208
      lon = lo;
   b55e8:	ed8d aa83 	vstr	s20, [sp, #524]	; 0x20c
      lat = la;
   b55ec:	edcd ba84 	vstr	s23, [sp, #528]	; 0x210
      lon = lo;
   b55f0:	ed8d ba85 	vstr	s22, [sp, #532]	; 0x214
      lat = la;
   b55f4:	edcd 8a86 	vstr	s17, [sp, #536]	; 0x218
      lon = lo;
   b55f8:	ed8d 8a87 	vstr	s16, [sp, #540]	; 0x21c
      lat = la;
   b55fc:	edcd da88 	vstr	s27, [sp, #544]	; 0x220
      lon = lo;
   b5600:	ed8d da89 	vstr	s26, [sp, #548]	; 0x224
      lat = la;
   b5604:	edcd ca8a 	vstr	s25, [sp, #552]	; 0x228
      lon = lo;
   b5608:	ed8d ca8b 	vstr	s24, [sp, #556]	; 0x22c
   b560c:	f7ff f84c 	bl	b46a8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5610:	4aba      	ldr	r2, [pc, #744]	; (b58fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa3c>)
   b5612:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
   b5616:	f1a2 0c18 	sub.w	ip, r2, #24
   b561a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b561e:	465e      	mov	r6, fp
   b5620:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5622:	9906      	ldr	r1, [sp, #24]
   b5624:	9b05      	ldr	r3, [sp, #20]
   b5626:	c903      	ldmia	r1, {r0, r1}
   b5628:	e9c3 0100 	strd	r0, r1, [r3]
   b562c:	2106      	movs	r1, #6
   b562e:	911e      	str	r1, [sp, #120]	; 0x78
   b5630:	e898 0006 	ldmia.w	r8, {r1, r2}
   b5634:	a85f      	add	r0, sp, #380	; 0x17c
   b5636:	f7ff fadd 	bl	b4bf4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b563a:	4ab0      	ldr	r2, [pc, #704]	; (b58fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa3c>)
   b563c:	ca07      	ldmia	r2, {r0, r1, r2}
   b563e:	f50d 7cb2 	add.w	ip, sp, #356	; 0x164
   b5642:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
   b5646:	2203      	movs	r2, #3
   b5648:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
   b564c:	921c      	str	r2, [sp, #112]	; 0x70
   b564e:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5652:	a85c      	add	r0, sp, #368	; 0x170
   b5654:	f7ff face 	bl	b4bf4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5658:	4620      	mov	r0, r4
   b565a:	49a9      	ldr	r1, [pc, #676]	; (b5900 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa40>)
   b565c:	f7fe fd54 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5660:	49a8      	ldr	r1, [pc, #672]	; (b5904 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa44>)
   b5662:	a872      	add	r0, sp, #456	; 0x1c8
   b5664:	f7fe fd50 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5668:	49a7      	ldr	r1, [pc, #668]	; (b5908 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa48>)
   b566a:	a878      	add	r0, sp, #480	; 0x1e0
   b566c:	f7fe fd4c 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5670:	a972      	add	r1, sp, #456	; 0x1c8
   b5672:	e9cd 1a19 	strd	r1, sl, [sp, #100]	; 0x64
   b5676:	f10d 0844 	add.w	r8, sp, #68	; 0x44
   b567a:	aa19      	add	r2, sp, #100	; 0x64
   b567c:	ca06      	ldmia	r2, {r1, r2}
   b567e:	4643      	mov	r3, r8
   b5680:	ae15      	add	r6, sp, #84	; 0x54
   b5682:	a856      	add	r0, sp, #344	; 0x158
   b5684:	f7ff f844 	bl	b4710 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5688:	e9cd 6a17 	strd	r6, sl, [sp, #92]	; 0x5c
   b568c:	ab17      	add	r3, sp, #92	; 0x5c
   b568e:	2204      	movs	r2, #4
   b5690:	9216      	str	r2, [sp, #88]	; 0x58
   b5692:	a853      	add	r0, sp, #332	; 0x14c
   b5694:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5698:	9515      	str	r5, [sp, #84]	; 0x54
   b569a:	f7ff faab 	bl	b4bf4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway purpleLine = Railway(
   b569e:	aa53      	add	r2, sp, #332	; 0x14c
   b56a0:	9202      	str	r2, [sp, #8]
   b56a2:	aa56      	add	r2, sp, #344	; 0x158
   b56a4:	e9cd 4200 	strd	r4, r2, [sp]
   b56a8:	aa5c      	add	r2, sp, #368	; 0x170
   b56aa:	4613      	mov	r3, r2
   b56ac:	a962      	add	r1, sp, #392	; 0x188
   b56ae:	aa5f      	add	r2, sp, #380	; 0x17c
   b56b0:	4896      	ldr	r0, [pc, #600]	; (b590c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa4c>)
   b56b2:	f7ff fb1f 	bl	b4cf4 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b56b6:	a853      	add	r0, sp, #332	; 0x14c
   b56b8:	f7fe ffb6 	bl	b4628 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b56bc:	a856      	add	r0, sp, #344	; 0x158
   b56be:	f7fe ffbd 	bl	b463c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b56c2:	a878      	add	r0, sp, #480	; 0x1e0
   b56c4:	f004 fd3c 	bl	ba140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b56c8:	a872      	add	r0, sp, #456	; 0x1c8
   b56ca:	f004 fd39 	bl	ba140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b56ce:	4620      	mov	r0, r4
   b56d0:	f004 fd36 	bl	ba140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b56d4:	a85c      	add	r0, sp, #368	; 0x170
   b56d6:	f7fe ffa7 	bl	b4628 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b56da:	a85f      	add	r0, sp, #380	; 0x17c
   b56dc:	f7fe ffa4 	bl	b4628 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b56e0:	a862      	add	r0, sp, #392	; 0x188
   b56e2:	f7fe ff8d 	bl	b4600 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b56e6:	4b8a      	ldr	r3, [pc, #552]	; (b5910 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa50>)
   b56e8:	937e      	str	r3, [sp, #504]	; 0x1f8
);
   b56ea:	aa7e      	add	r2, sp, #504	; 0x1f8
      lon = lo;
   b56ec:	4b89      	ldr	r3, [pc, #548]	; (b5914 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa54>)
   b56ee:	9215      	str	r2, [sp, #84]	; 0x54
   b56f0:	937f      	str	r3, [sp, #508]	; 0x1fc
   b56f2:	2208      	movs	r2, #8
      lat = la;
   b56f4:	4b88      	ldr	r3, [pc, #544]	; (b5918 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa58>)
   b56f6:	9380      	str	r3, [sp, #512]	; 0x200
   b56f8:	9216      	str	r2, [sp, #88]	; 0x58
      lon = lo;
   b56fa:	4b88      	ldr	r3, [pc, #544]	; (b591c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa5c>)
   b56fc:	9381      	str	r3, [sp, #516]	; 0x204
   b56fe:	e896 0006 	ldmia.w	r6, {r1, r2}
      lat = la;
   b5702:	4b87      	ldr	r3, [pc, #540]	; (b5920 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa60>)
   b5704:	4e87      	ldr	r6, [pc, #540]	; (b5924 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa64>)
   b5706:	9382      	str	r3, [sp, #520]	; 0x208
      lon = lo;
   b5708:	4b87      	ldr	r3, [pc, #540]	; (b5928 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa68>)
   b570a:	9383      	str	r3, [sp, #524]	; 0x20c
   b570c:	a862      	add	r0, sp, #392	; 0x188
   b570e:	ab0a      	add	r3, sp, #40	; 0x28
   b5710:	3690      	adds	r6, #144	; 0x90
      lat = la;
   b5712:	edcd 8a84 	vstr	s17, [sp, #528]	; 0x210
      lon = lo;
   b5716:	ed8d 8a85 	vstr	s16, [sp, #532]	; 0x214
      lat = la;
   b571a:	edcd 9a86 	vstr	s19, [sp, #536]	; 0x218
      lon = lo;
   b571e:	ed8d 9a87 	vstr	s18, [sp, #540]	; 0x21c
      lat = la;
   b5722:	edcd aa88 	vstr	s21, [sp, #544]	; 0x220
      lon = lo;
   b5726:	ed8d aa89 	vstr	s20, [sp, #548]	; 0x224
      lat = la;
   b572a:	edcd ba8a 	vstr	s23, [sp, #552]	; 0x228
      lon = lo;
   b572e:	ed8d ba8b 	vstr	s22, [sp, #556]	; 0x22c
      lat = la;
   b5732:	edcd 8a8c 	vstr	s17, [sp, #560]	; 0x230
      lon = lo;
   b5736:	ed8d 8a8d 	vstr	s16, [sp, #564]	; 0x234
   b573a:	f7fe ffb5 	bl	b46a8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b573e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b5740:	46dc      	mov	ip, fp
   b5742:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5746:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   b574a:	9e05      	ldr	r6, [sp, #20]
   b574c:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   b5750:	e886 0007 	stmia.w	r6, {r0, r1, r2}
   b5754:	2207      	movs	r2, #7
   b5756:	9214      	str	r2, [sp, #80]	; 0x50
   b5758:	e897 0006 	ldmia.w	r7, {r1, r2}
   b575c:	a85f      	add	r0, sp, #380	; 0x17c
   b575e:	f7ff fa49 	bl	b4bf4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5762:	4b72      	ldr	r3, [pc, #456]	; (b592c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa6c>)
   b5764:	4e72      	ldr	r6, [pc, #456]	; (b5930 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa70>)
   b5766:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   b576a:	ab59      	add	r3, sp, #356	; 0x164
   b576c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b5770:	9311      	str	r3, [sp, #68]	; 0x44
   b5772:	2303      	movs	r3, #3
   b5774:	9312      	str	r3, [sp, #72]	; 0x48
   b5776:	e898 0006 	ldmia.w	r8, {r1, r2}
   b577a:	a85c      	add	r0, sp, #368	; 0x170
   b577c:	f7ff fa3a 	bl	b4bf4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5780:	4620      	mov	r0, r4
   b5782:	496c      	ldr	r1, [pc, #432]	; (b5934 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa74>)
   b5784:	f8df 81d0 	ldr.w	r8, [pc, #464]	; b5958 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa98>
   b5788:	f7fe fcbe 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b578c:	496a      	ldr	r1, [pc, #424]	; (b5938 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa78>)
   b578e:	a872      	add	r0, sp, #456	; 0x1c8
   b5790:	f7fe fcba 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5794:	4969      	ldr	r1, [pc, #420]	; (b593c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa7c>)
   b5796:	a878      	add	r0, sp, #480	; 0x1e0
   b5798:	f7fe fcb6 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b579c:	ab72      	add	r3, sp, #456	; 0x1c8
   b579e:	e9cd 3a0f 	strd	r3, sl, [sp, #60]	; 0x3c
   b57a2:	aa0f      	add	r2, sp, #60	; 0x3c
   b57a4:	ca06      	ldmia	r2, {r1, r2}
   b57a6:	ab09      	add	r3, sp, #36	; 0x24
   b57a8:	a856      	add	r0, sp, #344	; 0x158
   b57aa:	f7fe ffb1 	bl	b4710 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b57ae:	aa0b      	add	r2, sp, #44	; 0x2c
   b57b0:	e9cd 2a0d 	strd	r2, sl, [sp, #52]	; 0x34
   b57b4:	2103      	movs	r1, #3
   b57b6:	2307      	movs	r3, #7
   b57b8:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
   b57bc:	ab0d      	add	r3, sp, #52	; 0x34
   b57be:	e893 0006 	ldmia.w	r3, {r1, r2}
   b57c2:	a853      	add	r0, sp, #332	; 0x14c
   b57c4:	f7ff fa16 	bl	b4bf4 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway pinkLine = Railway(
   b57c8:	ab53      	add	r3, sp, #332	; 0x14c
   b57ca:	9302      	str	r3, [sp, #8]
   b57cc:	ab56      	add	r3, sp, #344	; 0x158
   b57ce:	aa5f      	add	r2, sp, #380	; 0x17c
   b57d0:	a962      	add	r1, sp, #392	; 0x188
   b57d2:	e9cd 4300 	strd	r4, r3, [sp]
   b57d6:	485a      	ldr	r0, [pc, #360]	; (b5940 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa80>)
   b57d8:	ab5c      	add	r3, sp, #368	; 0x170
   b57da:	f7ff fa8b 	bl	b4cf4 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b57de:	a853      	add	r0, sp, #332	; 0x14c
   b57e0:	f7fe ff22 	bl	b4628 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b57e4:	a856      	add	r0, sp, #344	; 0x158
   b57e6:	f7fe ff29 	bl	b463c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b57ea:	a878      	add	r0, sp, #480	; 0x1e0
   b57ec:	f004 fca8 	bl	ba140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b57f0:	a872      	add	r0, sp, #456	; 0x1c8
   b57f2:	f004 fca5 	bl	ba140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b57f6:	4620      	mov	r0, r4
   b57f8:	f004 fca2 	bl	ba140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b57fc:	a85c      	add	r0, sp, #368	; 0x170
   b57fe:	f7fe ff13 	bl	b4628 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5802:	a85f      	add	r0, sp, #380	; 0x17c
   b5804:	f7fe ff10 	bl	b4628 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5808:	a862      	add	r0, sp, #392	; 0x188
   b580a:	f7fe fef9 	bl	b4600 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b580e:	4b4d      	ldr	r3, [pc, #308]	; (b5944 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa84>)
std::vector<int> addressArr = std::vector<int>(slaveCountExpected, 0);
   b5810:	494d      	ldr	r1, [pc, #308]	; (b5948 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa88>)
   b5812:	609d      	str	r5, [r3, #8]
   b5814:	aa7e      	add	r2, sp, #504	; 0x1f8
   b5816:	e9c3 5500 	strd	r5, r5, [r3]
   b581a:	6809      	ldr	r1, [r1, #0]
   b581c:	484b      	ldr	r0, [pc, #300]	; (b594c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa8c>)
   b581e:	957e      	str	r5, [sp, #504]	; 0x1f8
   b5820:	ab72      	add	r3, sp, #456	; 0x1c8
   b5822:	f7fe ff1f 	bl	b4664 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b5826:	4b4a      	ldr	r3, [pc, #296]	; (b5950 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa90>)
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b5828:	494a      	ldr	r1, [pc, #296]	; (b5954 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa94>)
   b582a:	609d      	str	r5, [r3, #8]
   b582c:	e9c3 5500 	strd	r5, r5, [r3]
   b5830:	4849      	ldr	r0, [pc, #292]	; (b5958 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa98>)
   b5832:	f002 fb61 	bl	b7ef8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b5836:	4949      	ldr	r1, [pc, #292]	; (b595c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa9c>)
   b5838:	4849      	ldr	r0, [pc, #292]	; (b5960 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaa0>)
   b583a:	f002 fb5d 	bl	b7ef8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b583e:	4949      	ldr	r1, [pc, #292]	; (b5964 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaa4>)
   b5840:	483b      	ldr	r0, [pc, #236]	; (b5930 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa70>)
   b5842:	f002 fb59 	bl	b7ef8 <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b5846:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b5848:	46a2      	mov	sl, r4
   b584a:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
   b584e:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   b5852:	46c1      	mov	r9, r8
   b5854:	f8d6 c000 	ldr.w	ip, [r6]
   b5858:	f8ca c000 	str.w	ip, [sl]
   b585c:	465e      	mov	r6, fp
   b585e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5860:	f859 3910 	ldr.w	r3, [r9], #-16
   b5864:	9306      	str	r3, [sp, #24]
   b5866:	9b05      	ldr	r3, [sp, #20]
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b5868:	f8df e104 	ldr.w	lr, [pc, #260]	; b5970 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xab0>
   b586c:	461a      	mov	r2, r3
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b586e:	4626      	mov	r6, r4
   b5870:	9b06      	ldr	r3, [sp, #24]
   b5872:	6013      	str	r3, [r2, #0]
   b5874:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b5876:	af72      	add	r7, sp, #456	; 0x1c8
      constexpr __shared_count() noexcept : _M_pi(0)
   b5878:	e9ce 5500 	strd	r5, r5, [lr]
   b587c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b587e:	f8c7 c000 	str.w	ip, [r7]
        BleUuid sUuid(svcUuid);
   b5882:	46dc      	mov	ip, fp
   b5884:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5888:	ae7e      	add	r6, sp, #504	; 0x1f8
   b588a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b588c:	9b06      	ldr	r3, [sp, #24]
   b588e:	6033      	str	r3, [r6, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5890:	ab7e      	add	r3, sp, #504	; 0x1f8
   b5892:	4670      	mov	r0, lr
   b5894:	4934      	ldr	r1, [pc, #208]	; (b5968 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaa8>)
   b5896:	9300      	str	r3, [sp, #0]
   b5898:	f04f 0210 	mov.w	r2, #16
   b589c:	ab72      	add	r3, sp, #456	; 0x1c8
   b589e:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b58a2:	f003 f893 	bl	b89cc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b58a6:	f8df c0b8 	ldr.w	ip, [pc, #184]	; b5960 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaa0>
   b58aa:	f8d8 8000 	ldr.w	r8, [r8]
   b58ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b58b2:	46a6      	mov	lr, r4
   b58b4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b58b8:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   b58bc:	f8dc e000 	ldr.w	lr, [ip]
   b58c0:	f8ca e000 	str.w	lr, [sl]
   b58c4:	46dc      	mov	ip, fp
   b58c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b58ca:	9b05      	ldr	r3, [sp, #20]
      : _M_ptr(0), _M_refcount()
   b58cc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b5974 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xab4>
   b58d0:	f8c3 8000 	str.w	r8, [r3]
        BleUuid cUuid(charUuid);
   b58d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b58d6:	f50d 7ce4 	add.w	ip, sp, #456	; 0x1c8
        BleUuid sUuid(svcUuid);
   b58da:	465c      	mov	r4, fp
        BleUuid cUuid(charUuid);
   b58dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
      constexpr __shared_count() noexcept : _M_pi(0)
   b58e0:	e9c9 5500 	strd	r5, r5, [r9]
   b58e4:	f8c7 e000 	str.w	lr, [r7]
        BleUuid sUuid(svcUuid);
   b58e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b58ea:	af7e      	add	r7, sp, #504	; 0x1f8
   b58ec:	c70f      	stmia	r7!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b58ee:	4b1f      	ldr	r3, [pc, #124]	; (b596c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaac>)
        BleUuid sUuid(svcUuid);
   b58f0:	f8c6 8000 	str.w	r8, [r6]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b58f4:	9301      	str	r3, [sp, #4]
   b58f6:	ab7e      	add	r3, sp, #504	; 0x1f8
   b58f8:	e03e      	b.n	b5978 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xab8>
   b58fa:	bf00      	nop
   b58fc:	000bd638 	.word	0x000bd638
   b5900:	000bd436 	.word	0x000bd436
   b5904:	000bd43d 	.word	0x000bd43d
   b5908:	000bd444 	.word	0x000bd444
   b590c:	2003e55c 	.word	0x2003e55c
   b5910:	42276a76 	.word	0x42276a76
   b5914:	c2af692b 	.word	0xc2af692b
   b5918:	42276b5f 	.word	0x42276b5f
   b591c:	c2af56cd 	.word	0xc2af56cd
   b5920:	42278a2d 	.word	0x42278a2d
   b5924:	000bd5f8 	.word	0x000bd5f8
   b5928:	c2af56d8 	.word	0xc2af56d8
   b592c:	000bd67c 	.word	0x000bd67c
   b5930:	20035568 	.word	0x20035568
   b5934:	000bd44b 	.word	0x000bd44b
   b5938:	000bd450 	.word	0x000bd450
   b593c:	000bd457 	.word	0x000bd457
   b5940:	2003e4f8 	.word	0x2003e4f8
   b5944:	2003e5c0 	.word	0x2003e5c0
   b5948:	2003535c 	.word	0x2003535c
   b594c:	2003557c 	.word	0x2003557c
   b5950:	2003e698 	.word	0x2003e698
   b5954:	000bd45e 	.word	0x000bd45e
   b5958:	20035540 	.word	0x20035540
   b595c:	000bd483 	.word	0x000bd483
   b5960:	20035554 	.word	0x20035554
   b5964:	000bd4a8 	.word	0x000bd4a8
   b5968:	000bd4cd 	.word	0x000bd4cd
   b596c:	000b423d 	.word	0x000b423d
   b5970:	2003e6a8 	.word	0x2003e6a8
   b5974:	2003e690 	.word	0x2003e690
   b5978:	f04f 0204 	mov.w	r2, #4
   b597c:	4943      	ldr	r1, [pc, #268]	; (b5a8c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbcc>)
   b597e:	9300      	str	r3, [sp, #0]
   b5980:	4648      	mov	r0, r9
   b5982:	ab72      	add	r3, sp, #456	; 0x1c8
   b5984:	9502      	str	r5, [sp, #8]
   b5986:	f003 f821 	bl	b89cc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
   b598a:	4941      	ldr	r1, [pc, #260]	; (b5a90 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbd0>)
   b598c:	4841      	ldr	r0, [pc, #260]	; (b5a94 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbd4>)
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b598e:	4c42      	ldr	r4, [pc, #264]	; (b5a98 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbd8>)
   b5990:	f003 fd3f 	bl	b9412 <_ZN6StringC1EPK19__FlashStringHelper>
   b5994:	4841      	ldr	r0, [pc, #260]	; (b5a9c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbdc>)
   b5996:	f003 fb49 	bl	b902c <_ZN9IPAddressC1Ev>
   b599a:	493d      	ldr	r1, [pc, #244]	; (b5a90 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbd0>)
   b599c:	4840      	ldr	r0, [pc, #256]	; (b5aa0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbe0>)
   b599e:	f003 fd38 	bl	b9412 <_ZN6StringC1EPK19__FlashStringHelper>
   b59a2:	493b      	ldr	r1, [pc, #236]	; (b5a90 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbd0>)
   b59a4:	483f      	ldr	r0, [pc, #252]	; (b5aa4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbe4>)
   b59a6:	f003 fd34 	bl	b9412 <_ZN6StringC1EPK19__FlashStringHelper>
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   b59aa:	4939      	ldr	r1, [pc, #228]	; (b5a90 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbd0>)
   b59ac:	483e      	ldr	r0, [pc, #248]	; (b5aa8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbe8>)
   b59ae:	f003 fd30 	bl	b9412 <_ZN6StringC1EPK19__FlashStringHelper>
HttpClient http;
   b59b2:	483e      	ldr	r0, [pc, #248]	; (b5aac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbec>)
   b59b4:	f000 ffc2 	bl	b693c <_ZN10HttpClientC1Ev>
   b59b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b59bc:	9300      	str	r3, [sp, #0]
   b59be:	f242 7210 	movw	r2, #10000	; 0x2710
   b59c2:	4b3b      	ldr	r3, [pc, #236]	; (b5ab0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbf0>)
   b59c4:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b59c8:	4620      	mov	r0, r4
   b59ca:	f001 f98f 	bl	b6cec <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b59ce:	4b39      	ldr	r3, [pc, #228]	; (b5ab4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbf4>)
   b59d0:	6023      	str	r3, [r4, #0]
   b59d2:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   b59d6:	ecbd 8b0e 	vpop	{d8-d14}
   b59da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_M_deallocate(_M_impl._M_start,
   b59de:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b59e0:	b118      	cbz	r0, b59ea <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb2a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b59e2:	68a1      	ldr	r1, [r4, #8]
   b59e4:	1a09      	subs	r1, r1, r0
   b59e6:	f7fe fb5c 	bl	b40a2 <_ZdlPvj>
Railway pinkLine = Railway(
   b59ea:	4833      	ldr	r0, [pc, #204]	; (b5ab8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbf8>)
   b59ec:	f7ff f8ba 	bl	b4b64 <_ZN7RailwayD1Ev>
Railway purpleLine = Railway(
   b59f0:	4832      	ldr	r0, [pc, #200]	; (b5abc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbfc>)
   b59f2:	f7ff f8b7 	bl	b4b64 <_ZN7RailwayD1Ev>
Railway orangeLine = Railway(
   b59f6:	4832      	ldr	r0, [pc, #200]	; (b5ac0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc00>)
   b59f8:	f7ff f8b4 	bl	b4b64 <_ZN7RailwayD1Ev>
Railway greenLine = Railway(
   b59fc:	4831      	ldr	r0, [pc, #196]	; (b5ac4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc04>)
   b59fe:	f7ff f8b1 	bl	b4b64 <_ZN7RailwayD1Ev>
Railway brownLine = Railway(
   b5a02:	4831      	ldr	r0, [pc, #196]	; (b5ac8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc08>)
   b5a04:	f7ff f8ae 	bl	b4b64 <_ZN7RailwayD1Ev>
Railway blueLine = Railway(
   b5a08:	4830      	ldr	r0, [pc, #192]	; (b5acc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc0c>)
   b5a0a:	f7ff f8ab 	bl	b4b64 <_ZN7RailwayD1Ev>
Railway redLine = Railway(
   b5a0e:	4830      	ldr	r0, [pc, #192]	; (b5ad0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc10>)
   b5a10:	f7ff f8a8 	bl	b4b64 <_ZN7RailwayD1Ev>
   b5a14:	e7dd      	b.n	b59d2 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb12>
JsonParserStatic<10000, 1000> parser;
   b5a16:	4820      	ldr	r0, [pc, #128]	; (b5a98 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbd8>)
   b5a18:	f7fe fb4e 	bl	b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b5a1c:	4b23      	ldr	r3, [pc, #140]	; (b5aac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbec>)
   b5a1e:	4a2d      	ldr	r2, [pc, #180]	; (b5ad4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc14>)
	if (_M_pi != nullptr)
   b5a20:	699c      	ldr	r4, [r3, #24]
   b5a22:	601a      	str	r2, [r3, #0]
   b5a24:	b17c      	cbz	r4, b5a46 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb86>
      if (--_M_use_count == 0)
   b5a26:	6863      	ldr	r3, [r4, #4]
   b5a28:	3b01      	subs	r3, #1
   b5a2a:	6063      	str	r3, [r4, #4]
   b5a2c:	b95b      	cbnz	r3, b5a46 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb86>
          _M_dispose();
   b5a2e:	6823      	ldr	r3, [r4, #0]
   b5a30:	4620      	mov	r0, r4
   b5a32:	689b      	ldr	r3, [r3, #8]
   b5a34:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5a36:	68a3      	ldr	r3, [r4, #8]
   b5a38:	3b01      	subs	r3, #1
   b5a3a:	60a3      	str	r3, [r4, #8]
   b5a3c:	b91b      	cbnz	r3, b5a46 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb86>
            _M_destroy();
   b5a3e:	6823      	ldr	r3, [r4, #0]
   b5a40:	4620      	mov	r0, r4
   b5a42:	68db      	ldr	r3, [r3, #12]
   b5a44:	4798      	blx	r3
   b5a46:	4818      	ldr	r0, [pc, #96]	; (b5aa8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbe8>)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b5a48:	4c23      	ldr	r4, [pc, #140]	; (b5ad8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc18>)
   b5a4a:	f003 fc97 	bl	b937c <_ZN6StringD1Ev>
} http_request_t;
   b5a4e:	4815      	ldr	r0, [pc, #84]	; (b5aa4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbe4>)
   b5a50:	f003 fc94 	bl	b937c <_ZN6StringD1Ev>
   b5a54:	4812      	ldr	r0, [pc, #72]	; (b5aa0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbe0>)
   b5a56:	f003 fc91 	bl	b937c <_ZN6StringD1Ev>
   b5a5a:	480e      	ldr	r0, [pc, #56]	; (b5a94 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbd4>)
   b5a5c:	f003 fc8e 	bl	b937c <_ZN6StringD1Ev>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   b5a60:	481e      	ldr	r0, [pc, #120]	; (b5adc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc1c>)
   b5a62:	f002 fc9a 	bl	b839a <_ZN8particle17BleCharacteristicD1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   b5a66:	481e      	ldr	r0, [pc, #120]	; (b5ae0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc20>)
   b5a68:	f002 fc97 	bl	b839a <_ZN8particle17BleCharacteristicD1Ev>
      }
   b5a6c:	481d      	ldr	r0, [pc, #116]	; (b5ae4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc24>)
   b5a6e:	f7fe fddb 	bl	b4628 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5a72:	481d      	ldr	r0, [pc, #116]	; (b5ae8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc28>)
   b5a74:	f7fe fdd8 	bl	b4628 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b5a78:	e9d4 5600 	ldrd	r5, r6, [r4]
	  for (; __first != __last; ++__first)
   b5a7c:	42ae      	cmp	r6, r5
   b5a7e:	d0ae      	beq.n	b59de <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb1e>
      __pointer->~_Tp();
   b5a80:	4628      	mov	r0, r5
   b5a82:	f7ff f86f 	bl	b4b64 <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b5a86:	3564      	adds	r5, #100	; 0x64
   b5a88:	e7f8      	b.n	b5a7c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbbc>
   b5a8a:	bf00      	nop
   b5a8c:	000bd4d0 	.word	0x000bd4d0
   b5a90:	000bd6de 	.word	0x000bd6de
   b5a94:	2003e630 	.word	0x2003e630
   b5a98:	20037f3c 	.word	0x20037f3c
   b5a9c:	2003e640 	.word	0x2003e640
   b5aa0:	2003e658 	.word	0x2003e658
   b5aa4:	2003e66c 	.word	0x2003e66c
   b5aa8:	2003e680 	.word	0x2003e680
   b5aac:	200356bc 	.word	0x200356bc
   b5ab0:	2003a678 	.word	0x2003a678
   b5ab4:	000bd5e4 	.word	0x000bd5e4
   b5ab8:	2003e4f8 	.word	0x2003e4f8
   b5abc:	2003e55c 	.word	0x2003e55c
   b5ac0:	20037ed8 	.word	0x20037ed8
   b5ac4:	20035658 	.word	0x20035658
   b5ac8:	200355f0 	.word	0x200355f0
   b5acc:	2003558c 	.word	0x2003558c
   b5ad0:	2003e5cc 	.word	0x2003e5cc
   b5ad4:	000bd9e8 	.word	0x000bd9e8
   b5ad8:	2003e5c0 	.word	0x2003e5c0
   b5adc:	2003e690 	.word	0x2003e690
   b5ae0:	2003e6a8 	.word	0x2003e6a8
   b5ae4:	2003e698 	.word	0x2003e698
   b5ae8:	2003557c 	.word	0x2003557c

000b5aec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b5aec:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b5aee:	b510      	push	{r4, lr}
   b5af0:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b5af2:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b5af6:	d005      	beq.n	b5b04 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b5af8:	4601      	mov	r1, r0
   b5afa:	4622      	mov	r2, r4
   b5afc:	4618      	mov	r0, r3
   b5afe:	f005 fb19 	bl	bb134 <memmove>
   b5b02:	4603      	mov	r3, r0
	}
   b5b04:	1918      	adds	r0, r3, r4
   b5b06:	bd10      	pop	{r4, pc}

000b5b08 <_ZN7RailwayC1ERKS_>:
class Railway{
   b5b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5b0c:	460d      	mov	r5, r1
   b5b0e:	4604      	mov	r4, r0
   b5b10:	f7fe fe32 	bl	b4778 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5b14:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5b18:	2600      	movs	r6, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5b1a:	1ac9      	subs	r1, r1, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5b1c:	e9c4 6603 	strd	r6, r6, [r4, #12]
   b5b20:	6166      	str	r6, [r4, #20]
      { _M_create_storage(__n); }
   b5b22:	1089      	asrs	r1, r1, #2
   b5b24:	f104 000c 	add.w	r0, r4, #12
   b5b28:	f7fe fffc 	bl	b4b24 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
			      _Category>::__copy_m(__first, __last, __result);
   b5b2c:	68e2      	ldr	r2, [r4, #12]
   b5b2e:	e9d5 0103 	ldrd	r0, r1, [r5, #12]
   b5b32:	f7ff ffdb 	bl	b5aec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b5b36:	f105 0118 	add.w	r1, r5, #24
	this->_M_impl._M_finish =
   b5b3a:	6120      	str	r0, [r4, #16]
   b5b3c:	f104 0018 	add.w	r0, r4, #24
   b5b40:	f7ff f83e 	bl	b4bc0 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5b44:	e9d5 3709 	ldrd	r3, r7, [r5, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5b48:	4824      	ldr	r0, [pc, #144]	; (b5bdc <_ZN7RailwayC1ERKS_+0xd4>)
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5b4a:	62e6      	str	r6, [r4, #44]	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5b4c:	1aff      	subs	r7, r7, r3
   b5b4e:	10bb      	asrs	r3, r7, #2
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5b50:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5b54:	4358      	muls	r0, r3
   b5b56:	f7fe fac5 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b5b5a:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5b5e:	4407      	add	r7, r0
   b5b60:	62e7      	str	r7, [r4, #44]	; 0x2c
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b5b62:	e9d5 7809 	ldrd	r7, r8, [r5, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5b66:	4606      	mov	r6, r0
   b5b68:	45b8      	cmp	r8, r7
   b5b6a:	d007      	beq.n	b5b7c <_ZN7RailwayC1ERKS_+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b5b6c:	b11e      	cbz	r6, b5b76 <_ZN7RailwayC1ERKS_+0x6e>
   b5b6e:	4639      	mov	r1, r7
   b5b70:	4630      	mov	r0, r6
   b5b72:	f7ff f825 	bl	b4bc0 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b5b76:	360c      	adds	r6, #12
   b5b78:	370c      	adds	r7, #12
   b5b7a:	e7f5      	b.n	b5b68 <_ZN7RailwayC1ERKS_+0x60>
	this->_M_impl._M_finish =
   b5b7c:	62a6      	str	r6, [r4, #40]	; 0x28
   b5b7e:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b5b82:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b5b86:	f7fe fb2f 	bl	b41e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5b8a:	e9d5 3712 	ldrd	r3, r7, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5b8e:	4813      	ldr	r0, [pc, #76]	; (b5bdc <_ZN7RailwayC1ERKS_+0xd4>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5b90:	1aff      	subs	r7, r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5b92:	2300      	movs	r3, #0
   b5b94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   b5b98:	6523      	str	r3, [r4, #80]	; 0x50
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5b9a:	10fb      	asrs	r3, r7, #3
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5b9c:	4358      	muls	r0, r3
   b5b9e:	f7fe fadb 	bl	b4158 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b5ba2:	e9c4 0012 	strd	r0, r0, [r4, #72]	; 0x48
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5ba6:	4407      	add	r7, r0
   b5ba8:	6527      	str	r7, [r4, #80]	; 0x50
   b5baa:	e9d5 7812 	ldrd	r7, r8, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5bae:	4606      	mov	r6, r0
   b5bb0:	45b8      	cmp	r8, r7
   b5bb2:	d007      	beq.n	b5bc4 <_ZN7RailwayC1ERKS_+0xbc>
   b5bb4:	b11e      	cbz	r6, b5bbe <_ZN7RailwayC1ERKS_+0xb6>
   b5bb6:	4639      	mov	r1, r7
   b5bb8:	4630      	mov	r0, r6
   b5bba:	f7fe fb15 	bl	b41e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b5bbe:	3618      	adds	r6, #24
   b5bc0:	3718      	adds	r7, #24
   b5bc2:	e7f5      	b.n	b5bb0 <_ZN7RailwayC1ERKS_+0xa8>
	this->_M_impl._M_finish =
   b5bc4:	64e6      	str	r6, [r4, #76]	; 0x4c
   b5bc6:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b5bc8:	6563      	str	r3, [r4, #84]	; 0x54
   b5bca:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b5bcc:	65a3      	str	r3, [r4, #88]	; 0x58
   b5bce:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b5bd0:	65e3      	str	r3, [r4, #92]	; 0x5c
   b5bd2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b5bd4:	6623      	str	r3, [r4, #96]	; 0x60
   b5bd6:	4620      	mov	r0, r4
   b5bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5bdc:	aaaaaaab 	.word	0xaaaaaaab

000b5be0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b5be0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5be4:	eba1 0800 	sub.w	r8, r1, r0
   b5be8:	4969      	ldr	r1, [pc, #420]	; (b5d90 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1b0>)
   b5bea:	f8df a1ac 	ldr.w	sl, [pc, #428]	; b5d98 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1b8>
   b5bee:	ea4f 08a8 	mov.w	r8, r8, asr #2
	__copy_m(_II __first, _II __last, _OI __result)
   b5bf2:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5bf4:	fb01 f808 	mul.w	r8, r1, r8
   b5bf8:	4614      	mov	r4, r2
   b5bfa:	f1b8 0f00 	cmp.w	r8, #0
   b5bfe:	f340 80c2 	ble.w	b5d86 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1a6>
   b5c02:	4629      	mov	r1, r5
   b5c04:	4620      	mov	r0, r4
   b5c06:	f7fe fbf7 	bl	b43f8 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
      if (&__x != this)
   b5c0a:	42a5      	cmp	r5, r4
   b5c0c:	d025      	beq.n	b5c5a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x7a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5c0e:	e9d5 9103 	ldrd	r9, r1, [r5, #12]
			 - this->_M_impl._M_start); }
   b5c12:	68e2      	ldr	r2, [r4, #12]
   b5c14:	6963      	ldr	r3, [r4, #20]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5c16:	eba1 0609 	sub.w	r6, r1, r9
			 - this->_M_impl._M_start); }
   b5c1a:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b5c1c:	429e      	cmp	r6, r3
   b5c1e:	d943      	bls.n	b5ca8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xc8>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5c20:	2e00      	cmp	r6, #0
   b5c22:	d03f      	beq.n	b5ca4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xc4>
	if (__n > this->_M_max_size())
   b5c24:	4b5b      	ldr	r3, [pc, #364]	; (b5d94 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1b4>)
   b5c26:	429e      	cmp	r6, r3
   b5c28:	d901      	bls.n	b5c2e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x4e>
	  std::__throw_bad_alloc();
   b5c2a:	f004 fa4b 	bl	ba0c4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5c2e:	4630      	mov	r0, r6
   b5c30:	9101      	str	r1, [sp, #4]
   b5c32:	f7fe fa30 	bl	b4096 <_Znwj>
   b5c36:	9901      	ldr	r1, [sp, #4]
   b5c38:	4607      	mov	r7, r0
			      _Category>::__copy_m(__first, __last, __result);
   b5c3a:	463a      	mov	r2, r7
   b5c3c:	4648      	mov	r0, r9
   b5c3e:	f7ff ff55 	bl	b5aec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b5c42:	68e0      	ldr	r0, [r4, #12]
	if (__p)
   b5c44:	b118      	cbz	r0, b5c4e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x6e>
			    - this->_M_impl._M_start);
   b5c46:	6961      	ldr	r1, [r4, #20]
	::operator delete(__p
   b5c48:	1a09      	subs	r1, r1, r0
   b5c4a:	f7fe fa2a 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b5c4e:	60e7      	str	r7, [r4, #12]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b5c50:	4437      	add	r7, r6
   b5c52:	6167      	str	r7, [r4, #20]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b5c54:	68e3      	ldr	r3, [r4, #12]
   b5c56:	4433      	add	r3, r6
   b5c58:	6123      	str	r3, [r4, #16]
   b5c5a:	f105 0118 	add.w	r1, r5, #24
   b5c5e:	f104 0018 	add.w	r0, r4, #24
   b5c62:	f7fe fff1 	bl	b4c48 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
      if (&__x != this)
   b5c66:	42a5      	cmp	r5, r4
   b5c68:	d042      	beq.n	b5cf0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x110>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5c6a:	e9d5 6b09 	ldrd	r6, fp, [r5, #36]	; 0x24
			 - this->_M_impl._M_start); }
   b5c6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b5c70:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5c72:	ebab 0906 	sub.w	r9, fp, r6
			 - this->_M_impl._M_start); }
   b5c76:	1a89      	subs	r1, r1, r2
	  if (__xlen > capacity())
   b5c78:	4549      	cmp	r1, r9
   b5c7a:	d252      	bcs.n	b5d22 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x142>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5c7c:	ea4f 00a9 	mov.w	r0, r9, asr #2
	  pointer __result = this->_M_allocate(__n);
   b5c80:	fb0a f000 	mul.w	r0, sl, r0
   b5c84:	f7fe fa2e 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
   b5c88:	4607      	mov	r7, r0
	  _ForwardIterator __cur = __result;
   b5c8a:	4602      	mov	r2, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b5c8c:	45b3      	cmp	fp, r6
   b5c8e:	d01f      	beq.n	b5cd0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xf0>
   b5c90:	b12a      	cbz	r2, b5c9e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xbe>
   b5c92:	4610      	mov	r0, r2
   b5c94:	4631      	mov	r1, r6
   b5c96:	9201      	str	r2, [sp, #4]
   b5c98:	f7fe ff92 	bl	b4bc0 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b5c9c:	9a01      	ldr	r2, [sp, #4]
   b5c9e:	320c      	adds	r2, #12
   b5ca0:	360c      	adds	r6, #12
   b5ca2:	e7f3      	b.n	b5c8c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xac>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5ca4:	4637      	mov	r7, r6
   b5ca6:	e7c8      	b.n	b5c3a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x5a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5ca8:	6923      	ldr	r3, [r4, #16]
   b5caa:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b5cac:	429e      	cmp	r6, r3
   b5cae:	d803      	bhi.n	b5cb8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xd8>
   b5cb0:	4648      	mov	r0, r9
   b5cb2:	f7ff ff1b 	bl	b5aec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
    { return std::uninitialized_copy(__first, __last, __result); }
   b5cb6:	e7cd      	b.n	b5c54 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x74>
   b5cb8:	eb09 0103 	add.w	r1, r9, r3
   b5cbc:	4648      	mov	r0, r9
   b5cbe:	f7ff ff15 	bl	b5aec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b5cc2:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
   b5cc6:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
   b5cca:	1a10      	subs	r0, r2, r0
   b5ccc:	4418      	add	r0, r3
   b5cce:	e7f0      	b.n	b5cb2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xd2>
	__destroy(__first, __last);
   b5cd0:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b5cd4:	f7fe ff3b 	bl	b4b4e <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	      _M_deallocate(this->_M_impl._M_start,
   b5cd8:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b5cda:	b118      	cbz	r0, b5ce4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x104>
			    - this->_M_impl._M_start);
   b5cdc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b5cde:	1a09      	subs	r1, r1, r0
   b5ce0:	f7fe f9df 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b5ce4:	6267      	str	r7, [r4, #36]	; 0x24
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b5ce6:	444f      	add	r7, r9
   b5ce8:	62e7      	str	r7, [r4, #44]	; 0x2c
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b5cea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b5cec:	444b      	add	r3, r9
   b5cee:	62a3      	str	r3, [r4, #40]	; 0x28
	this->_M_assign(__str);
   b5cf0:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b5cf4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b5cf8:	f004 fa40 	bl	ba17c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
   b5cfc:	f105 0148 	add.w	r1, r5, #72	; 0x48
   b5d00:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b5d04:	f7fe fbca 	bl	b449c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
   b5d08:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b5d0a:	6563      	str	r3, [r4, #84]	; 0x54
   b5d0c:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b5d0e:	65a3      	str	r3, [r4, #88]	; 0x58
   b5d10:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b5d12:	65e3      	str	r3, [r4, #92]	; 0x5c
   b5d14:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b5d16:	6623      	str	r3, [r4, #96]	; 0x60
	      ++__first;
   b5d18:	3564      	adds	r5, #100	; 0x64
	      ++__result;
   b5d1a:	3464      	adds	r4, #100	; 0x64
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5d1c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b5d20:	e76b      	b.n	b5bfa <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5d22:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   b5d24:	1abf      	subs	r7, r7, r2
	  else if (size() >= __xlen)
   b5d26:	45b9      	cmp	r9, r7
   b5d28:	d80c      	bhi.n	b5d44 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x164>
			      _Category>::__copy_m(__first, __last, __result);
   b5d2a:	4630      	mov	r0, r6
   b5d2c:	4659      	mov	r1, fp
   b5d2e:	f7fe ffc3 	bl	b4cb8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      : _M_current(__i) { }
   b5d32:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b5d34:	4606      	mov	r6, r0
	  for (; __first != __last; ++__first)
   b5d36:	42b7      	cmp	r7, r6
   b5d38:	d0d7      	beq.n	b5cea <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x10a>
      }
   b5d3a:	4630      	mov	r0, r6
   b5d3c:	f7fe fc74 	bl	b4628 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   b5d40:	360c      	adds	r6, #12
	return *this;
   b5d42:	e7f8      	b.n	b5d36 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x156>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5d44:	10bf      	asrs	r7, r7, #2
   b5d46:	fb0a f707 	mul.w	r7, sl, r7
   b5d4a:	2f00      	cmp	r7, #0
   b5d4c:	dd09      	ble.n	b5d62 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x182>
	      *__result = *__first;
   b5d4e:	4631      	mov	r1, r6
   b5d50:	4610      	mov	r0, r2
   b5d52:	9201      	str	r2, [sp, #4]
   b5d54:	f7fe ff78 	bl	b4c48 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	      ++__result;
   b5d58:	9a01      	ldr	r2, [sp, #4]
	      ++__first;
   b5d5a:	360c      	adds	r6, #12
	      ++__result;
   b5d5c:	320c      	adds	r2, #12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5d5e:	3f01      	subs	r7, #1
   b5d60:	e7f3      	b.n	b5d4a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x16a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5d62:	e9d4 6709 	ldrd	r6, r7, [r4, #36]	; 0x24
   b5d66:	1bb9      	subs	r1, r7, r6
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b5d68:	6a6e      	ldr	r6, [r5, #36]	; 0x24
					  __x._M_impl._M_finish,
   b5d6a:	6aab      	ldr	r3, [r5, #40]	; 0x28
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b5d6c:	440e      	add	r6, r1
	      for (; __first != __last; ++__first, (void)++__cur)
   b5d6e:	42b3      	cmp	r3, r6
   b5d70:	d0bb      	beq.n	b5cea <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x10a>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b5d72:	b12f      	cbz	r7, b5d80 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1a0>
   b5d74:	4631      	mov	r1, r6
   b5d76:	4638      	mov	r0, r7
   b5d78:	9301      	str	r3, [sp, #4]
   b5d7a:	f7fe ff21 	bl	b4bc0 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b5d7e:	9b01      	ldr	r3, [sp, #4]
   b5d80:	360c      	adds	r6, #12
   b5d82:	370c      	adds	r7, #12
   b5d84:	e7f3      	b.n	b5d6e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x18e>
	}
   b5d86:	4620      	mov	r0, r4
   b5d88:	b003      	add	sp, #12
   b5d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5d8e:	bf00      	nop
   b5d90:	c28f5c29 	.word	0xc28f5c29
   b5d94:	7ffffffc 	.word	0x7ffffffc
   b5d98:	aaaaaaab 	.word	0xaaaaaaab

000b5d9c <setup>:
void setup() {
   b5d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5da0:	b0d8      	sub	sp, #352	; 0x160
  Serial.begin(9600);
   b5da2:	f003 ffdb 	bl	b9d5c <_Z16_fetch_usbserialv>
   b5da6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5daa:	f003 ffcb 	bl	b9d44 <_ZN9USBSerial5beginEl>
  delay(2000);
   b5dae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5db2:	f001 fe95 	bl	b7ae0 <delay>
  BLE.on();
   b5db6:	f002 f9ff 	bl	b81b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5dba:	f002 fa47 	bl	b824c <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   b5dbe:	f002 f9fb 	bl	b81b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5dc2:	4a7b      	ldr	r2, [pc, #492]	; (b5fb0 <setup+0x214>)
   b5dc4:	4d7b      	ldr	r5, [pc, #492]	; (b5fb4 <setup+0x218>)
   b5dc6:	4601      	mov	r1, r0
   b5dc8:	a80d      	add	r0, sp, #52	; 0x34
   b5dca:	f002 ff29 	bl	b8c20 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5dce:	a80d      	add	r0, sp, #52	; 0x34
   b5dd0:	f002 fae3 	bl	b839a <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   b5dd4:	f002 f9f0 	bl	b81b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5dd8:	4a77      	ldr	r2, [pc, #476]	; (b5fb8 <setup+0x21c>)
   b5dda:	4601      	mov	r1, r0
   b5ddc:	a80d      	add	r0, sp, #52	; 0x34
   b5dde:	f002 ff1f 	bl	b8c20 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5de2:	a80d      	add	r0, sp, #52	; 0x34
   b5de4:	f002 fad9 	bl	b839a <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData data;
   b5de8:	a805      	add	r0, sp, #20
   b5dea:	f002 fc0c 	bl	b8606 <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   b5dee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5df0:	ac08      	add	r4, sp, #32
   b5df2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5df4:	682e      	ldr	r6, [r5, #0]
   b5df6:	6026      	str	r6, [r4, #0]
        BleUuid tempUUID(uuid);
   b5df8:	ad08      	add	r5, sp, #32
   b5dfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5dfc:	ac0d      	add	r4, sp, #52	; 0x34
   b5dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5e00:	a80d      	add	r0, sp, #52	; 0x34
        BleUuid tempUUID(uuid);
   b5e02:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5e04:	f001 ffda 	bl	b7dbc <_ZNK8particle7BleUuid4typeEv>
   b5e08:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b5e0a:	a80d      	add	r0, sp, #52	; 0x34
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5e0c:	2c00      	cmp	r4, #0
   b5e0e:	d15e      	bne.n	b5ece <setup+0x132>
            uint16_t uuid16 = tempUUID.shorted();
   b5e10:	f001 fff0 	bl	b7df4 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b5e14:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b5e16:	f8ad 0010 	strh.w	r0, [sp, #16]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b5e1a:	2302      	movs	r3, #2
   b5e1c:	aa04      	add	r2, sp, #16
   b5e1e:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b5e20:	a805      	add	r0, sp, #20
   b5e22:	f002 fbe5 	bl	b85f0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   b5e26:	f002 f9c7 	bl	b81b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5e2a:	2200      	movs	r2, #0
   b5e2c:	a905      	add	r1, sp, #20
   b5e2e:	f002 fa57 	bl	b82e0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  request.hostname = "trek.thewcl.com";
   b5e32:	4c62      	ldr	r4, [pc, #392]	; (b5fbc <setup+0x220>)

    //loopIndex must point to either the first or last checkpoint, tripleIndex cannot be 0
    void setLoopIndex(int triple, int loop){
        tripleIndex = triple;
   b5e34:	4d62      	ldr	r5, [pc, #392]	; (b5fc0 <setup+0x224>)
  acquireWireBuffer();
   b5e36:	a80d      	add	r0, sp, #52	; 0x34
   b5e38:	f7fe fbcc 	bl	b45d4 <_Z17acquireWireBufferv>
  Wire.begin();
   b5e3c:	f004 f8dc 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b5e40:	f003 f87a 	bl	b8f38 <_ZN7TwoWire5beginEv>
  request.hostname = "trek.thewcl.com";
   b5e44:	495f      	ldr	r1, [pc, #380]	; (b5fc4 <setup+0x228>)
   b5e46:	4620      	mov	r0, r4
   b5e48:	f003 fb11 	bl	b946e <_ZN6StringaSEPKc>
   b5e4c:	495e      	ldr	r1, [pc, #376]	; (b5fc8 <setup+0x22c>)
   b5e4e:	485f      	ldr	r0, [pc, #380]	; (b5fcc <setup+0x230>)
  request.port = 3000;
   b5e50:	f640 33b8 	movw	r3, #3000	; 0xbb8
   b5e54:	63a3      	str	r3, [r4, #56]	; 0x38
        loopIndex = loop;
   b5e56:	2604      	movs	r6, #4
   b5e58:	2400      	movs	r4, #0
   b5e5a:	e9c1 6415 	strd	r6, r4, [r1, #84]	; 0x54
   b5e5e:	e9c0 6415 	strd	r6, r4, [r0, #84]	; 0x54
        tripleIndex = triple;
   b5e62:	4c5b      	ldr	r4, [pc, #364]	; (b5fd0 <setup+0x234>)
        loopIndex = loop;
   b5e64:	2203      	movs	r2, #3
   b5e66:	2307      	movs	r3, #7
  railways = {brownLine, orangeLine, pinkLine};
   b5e68:	a80d      	add	r0, sp, #52	; 0x34
   b5e6a:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
   b5e6e:	e9c5 2315 	strd	r2, r3, [r5, #84]	; 0x54
   b5e72:	f7ff fe49 	bl	b5b08 <_ZN7RailwayC1ERKS_>
   b5e76:	4629      	mov	r1, r5
   b5e78:	a826      	add	r0, sp, #152	; 0x98
   b5e7a:	f7ff fe45 	bl	b5b08 <_ZN7RailwayC1ERKS_>
   b5e7e:	4621      	mov	r1, r4
			 - this->_M_impl._M_start); }
   b5e80:	4c54      	ldr	r4, [pc, #336]	; (b5fd4 <setup+0x238>)
   b5e82:	a83f      	add	r0, sp, #252	; 0xfc
   b5e84:	f7ff fe40 	bl	b5b08 <_ZN7RailwayC1ERKS_>
   b5e88:	6822      	ldr	r2, [r4, #0]
   b5e8a:	68a3      	ldr	r3, [r4, #8]
   b5e8c:	1a9b      	subs	r3, r3, r2
	if (__len > capacity())
   b5e8e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   b5e92:	d262      	bcs.n	b5f5a <setup+0x1be>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5e94:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b5e98:	f7fe f8fd 	bl	b4096 <_Znwj>
   b5e9c:	f10d 0834 	add.w	r8, sp, #52	; 0x34
   b5ea0:	4605      	mov	r5, r0
   b5ea2:	f500 7796 	add.w	r7, r0, #300	; 0x12c
	  _ForwardIterator __cur = __result;
   b5ea6:	4606      	mov	r6, r0
   b5ea8:	b11e      	cbz	r6, b5eb2 <setup+0x116>
   b5eaa:	4641      	mov	r1, r8
   b5eac:	4630      	mov	r0, r6
   b5eae:	f7ff fe2b 	bl	b5b08 <_ZN7RailwayC1ERKS_>
	      for (; __first != __last; ++__first, (void)++__cur)
   b5eb2:	3664      	adds	r6, #100	; 0x64
   b5eb4:	42be      	cmp	r6, r7
   b5eb6:	f108 0864 	add.w	r8, r8, #100	; 0x64
   b5eba:	d1f5      	bne.n	b5ea8 <setup+0x10c>
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b5ebc:	e9d4 6800 	ldrd	r6, r8, [r4]
	  for (; __first != __last; ++__first)
   b5ec0:	45b0      	cmp	r8, r6
   b5ec2:	d00c      	beq.n	b5ede <setup+0x142>
      __pointer->~_Tp();
   b5ec4:	4630      	mov	r0, r6
   b5ec6:	f7fe fe4d 	bl	b4b64 <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b5eca:	3664      	adds	r6, #100	; 0x64
   b5ecc:	e7f8      	b.n	b5ec0 <setup+0x124>
   b5ece:	f001 ff93 	bl	b7df8 <_ZNK8particle7BleUuid8rawBytesEv>
   b5ed2:	2300      	movs	r3, #0
   b5ed4:	9300      	str	r3, [sp, #0]
   b5ed6:	4602      	mov	r2, r0
   b5ed8:	2310      	movs	r3, #16
   b5eda:	2107      	movs	r1, #7
   b5edc:	e7a0      	b.n	b5e20 <setup+0x84>
	    _M_deallocate(this->_M_impl._M_start,
   b5ede:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b5ee0:	b118      	cbz	r0, b5eea <setup+0x14e>
			  - this->_M_impl._M_start);
   b5ee2:	68a1      	ldr	r1, [r4, #8]
	::operator delete(__p
   b5ee4:	1a09      	subs	r1, r1, r0
   b5ee6:	f7fe f8dc 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b5eea:	e9c4 5700 	strd	r5, r7, [r4]
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b5eee:	60a7      	str	r7, [r4, #8]
   b5ef0:	a83f      	add	r0, sp, #252	; 0xfc
   b5ef2:	f7fe fe37 	bl	b4b64 <_ZN7RailwayD1Ev>
   b5ef6:	a826      	add	r0, sp, #152	; 0x98
   b5ef8:	f7fe fe34 	bl	b4b64 <_ZN7RailwayD1Ev>
   b5efc:	a80d      	add	r0, sp, #52	; 0x34
   b5efe:	f7fe fe31 	bl	b4b64 <_ZN7RailwayD1Ev>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5f02:	e9d4 3100 	ldrd	r3, r1, [r4]
   b5f06:	1ac9      	subs	r1, r1, r3
   b5f08:	4b33      	ldr	r3, [pc, #204]	; (b5fd8 <setup+0x23c>)
   b5f0a:	1089      	asrs	r1, r1, #2
   b5f0c:	4359      	muls	r1, r3
  sequenceArr = std::vector<int>(railways.size() * 2, 0);
   b5f0e:	2400      	movs	r4, #0
   b5f10:	ab03      	add	r3, sp, #12
   b5f12:	aa04      	add	r2, sp, #16
   b5f14:	0049      	lsls	r1, r1, #1
   b5f16:	a808      	add	r0, sp, #32
   b5f18:	9404      	str	r4, [sp, #16]
   b5f1a:	f7fe fba3 	bl	b4664 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
	  _M_start = __x._M_start;
   b5f1e:	4b2f      	ldr	r3, [pc, #188]	; (b5fdc <setup+0x240>)
   b5f20:	9d08      	ldr	r5, [sp, #32]
	  _M_end_of_storage = __x._M_end_of_storage;
   b5f22:	689a      	ldr	r2, [r3, #8]
   b5f24:	920f      	str	r2, [sp, #60]	; 0x3c
	  _M_finish = __x._M_finish;
   b5f26:	e9d3 0100 	ldrd	r0, r1, [r3]
	  _M_start = __x._M_start;
   b5f2a:	601d      	str	r5, [r3, #0]
	  _M_finish = __x._M_finish;
   b5f2c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   b5f2e:	605d      	str	r5, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
   b5f30:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   b5f32:	609d      	str	r5, [r3, #8]
	  _M_finish = __x._M_finish;
   b5f34:	e9cd 010d 	strd	r0, r1, [sp, #52]	; 0x34
      }
   b5f38:	a80d      	add	r0, sp, #52	; 0x34
	  _M_finish = __x._M_finish;
   b5f3a:	e9cd 4408 	strd	r4, r4, [sp, #32]
	  _M_end_of_storage = __x._M_end_of_storage;
   b5f3e:	940a      	str	r4, [sp, #40]	; 0x28
      }
   b5f40:	f7fe fb72 	bl	b4628 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5f44:	a808      	add	r0, sp, #32
   b5f46:	f7fe fb6f 	bl	b4628 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
  randomizeAddress();
   b5f4a:	f7fe fc41 	bl	b47d0 <_Z16randomizeAddressv>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b5f4e:	9805      	ldr	r0, [sp, #20]
   b5f50:	f001 fd7e 	bl	b7a50 <free>
}
   b5f54:	b058      	add	sp, #352	; 0x160
   b5f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5f5a:	6865      	ldr	r5, [r4, #4]
   b5f5c:	1aad      	subs	r5, r5, r2
	else if (size() >= __len)
   b5f5e:	f5b5 7f96 	cmp.w	r5, #300	; 0x12c
   b5f62:	d310      	bcc.n	b5f86 <setup+0x1ea>
			      _Category>::__copy_m(__first, __last, __result);
   b5f64:	a958      	add	r1, sp, #352	; 0x160
   b5f66:	a80d      	add	r0, sp, #52	; 0x34
   b5f68:	f7ff fe3a 	bl	b5be0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b5f6c:	6867      	ldr	r7, [r4, #4]
   b5f6e:	42b8      	cmp	r0, r7
   b5f70:	4605      	mov	r5, r0
   b5f72:	d0bd      	beq.n	b5ef0 <setup+0x154>
   b5f74:	4606      	mov	r6, r0
      __pointer->~_Tp();
   b5f76:	4630      	mov	r0, r6
	  for (; __first != __last; ++__first)
   b5f78:	3664      	adds	r6, #100	; 0x64
      __pointer->~_Tp();
   b5f7a:	f7fe fdf3 	bl	b4b64 <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b5f7e:	42b7      	cmp	r7, r6
   b5f80:	d1f9      	bne.n	b5f76 <setup+0x1da>
	    this->_M_impl._M_finish = __pos;
   b5f82:	6065      	str	r5, [r4, #4]
   b5f84:	e7b4      	b.n	b5ef0 <setup+0x154>
   b5f86:	ab0d      	add	r3, sp, #52	; 0x34
   b5f88:	441d      	add	r5, r3
   b5f8a:	4629      	mov	r1, r5
   b5f8c:	4618      	mov	r0, r3
   b5f8e:	f7ff fe27 	bl	b5be0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5f92:	6866      	ldr	r6, [r4, #4]
   b5f94:	ab58      	add	r3, sp, #352	; 0x160
   b5f96:	429d      	cmp	r5, r3
   b5f98:	d007      	beq.n	b5faa <setup+0x20e>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b5f9a:	b11e      	cbz	r6, b5fa4 <setup+0x208>
   b5f9c:	4629      	mov	r1, r5
   b5f9e:	4630      	mov	r0, r6
   b5fa0:	f7ff fdb2 	bl	b5b08 <_ZN7RailwayC1ERKS_>
   b5fa4:	3564      	adds	r5, #100	; 0x64
   b5fa6:	3664      	adds	r6, #100	; 0x64
   b5fa8:	e7f4      	b.n	b5f94 <setup+0x1f8>
	    this->_M_impl._M_finish =
   b5faa:	6066      	str	r6, [r4, #4]
   b5fac:	e7a0      	b.n	b5ef0 <setup+0x154>
   b5fae:	bf00      	nop
   b5fb0:	2003e6a8 	.word	0x2003e6a8
   b5fb4:	20035540 	.word	0x20035540
   b5fb8:	2003e690 	.word	0x2003e690
   b5fbc:	2003e630 	.word	0x2003e630
   b5fc0:	20037ed8 	.word	0x20037ed8
   b5fc4:	000bd4d3 	.word	0x000bd4d3
   b5fc8:	200355f0 	.word	0x200355f0
   b5fcc:	2003e55c 	.word	0x2003e55c
   b5fd0:	2003e4f8 	.word	0x2003e4f8
   b5fd4:	2003e5c0 	.word	0x2003e5c0
   b5fd8:	c28f5c29 	.word	0xc28f5c29
   b5fdc:	2003e698 	.word	0x2003e698

000b5fe0 <_GLOBAL__sub_I_redLine>:
   b5fe0:	2001      	movs	r0, #1
   b5fe2:	f7fe bf6d 	b.w	b4ec0 <_Z41__static_initialization_and_destruction_0ii.constprop.0>
	...

000b5fe8 <loop>:
void loop(){
   b5fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5fec:	ed2d 8b06 	vpush	{d8-d10}
   b5ff0:	b0b9      	sub	sp, #228	; 0xe4
  Serial.println("loop start");
   b5ff2:	f003 feb3 	bl	b9d5c <_Z16_fetch_usbserialv>
   b5ff6:	49bc      	ldr	r1, [pc, #752]	; (b62e8 <loop+0x300>)
    Serial.printf("%i, ", i);
   b5ff8:	4ebc      	ldr	r6, [pc, #752]	; (b62ec <loop+0x304>)
  Serial.println("loop start");
   b5ffa:	f003 f960 	bl	b92be <_ZN5Print7printlnEPKc>
      : _M_current(__i) { }
   b5ffe:	4bbc      	ldr	r3, [pc, #752]	; (b62f0 <loop+0x308>)
   b6000:	e9d3 5700 	ldrd	r5, r7, [r3]
  for(int i : sequenceArr){
   b6004:	42bd      	cmp	r5, r7
   b6006:	d009      	beq.n	b601c <loop+0x34>
   b6008:	f855 2b04 	ldr.w	r2, [r5], #4
   b600c:	9203      	str	r2, [sp, #12]
    Serial.printf("%i, ", i);
   b600e:	f003 fea5 	bl	b9d5c <_Z16_fetch_usbserialv>
   b6012:	9a03      	ldr	r2, [sp, #12]
   b6014:	4631      	mov	r1, r6
   b6016:	f7fe fac1 	bl	b459c <_ZN5Print6printfEPKcz>
	return *this;
   b601a:	e7f3      	b.n	b6004 <loop+0x1c>
  Serial.println(brownLineAdr);
   b601c:	f003 fe9e 	bl	b9d5c <_Z16_fetch_usbserialv>
        size_t n = print(b, base);
   b6020:	4bb4      	ldr	r3, [pc, #720]	; (b62f4 <loop+0x30c>)
   b6022:	f8df b328 	ldr.w	fp, [pc, #808]	; b634c <loop+0x364>
   b6026:	6819      	ldr	r1, [r3, #0]
   b6028:	4605      	mov	r5, r0
   b602a:	220a      	movs	r2, #10
   b602c:	f7fe f8c0 	bl	b41b0 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
        n += println();
   b6030:	4628      	mov	r0, r5
   b6032:	f003 f938 	bl	b92a6 <_ZN5Print7printlnEv>
    for(int j = 0; j < railways.size(); j++){
   b6036:	2300      	movs	r3, #0
   b6038:	9304      	str	r3, [sp, #16]
   b603a:	e9db 2300 	ldrd	r2, r3, [fp]
   b603e:	1a9b      	subs	r3, r3, r2
   b6040:	4aad      	ldr	r2, [pc, #692]	; (b62f8 <loop+0x310>)
   b6042:	109b      	asrs	r3, r3, #2
   b6044:	4353      	muls	r3, r2
   b6046:	9a04      	ldr	r2, [sp, #16]
   b6048:	4293      	cmp	r3, r2
   b604a:	f240 844e 	bls.w	b68ea <loop+0x902>
      delay(1500);
   b604e:	f240 50dc 	movw	r0, #1500	; 0x5dc
   b6052:	f001 fd45 	bl	b7ae0 <delay>
	StringSumHelper(const char *p) : String(p) {}
   b6056:	49a9      	ldr	r1, [pc, #676]	; (b62fc <loop+0x314>)
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   b6058:	4da9      	ldr	r5, [pc, #676]	; (b6300 <loop+0x318>)
   b605a:	a81f      	add	r0, sp, #124	; 0x7c
   b605c:	f003 f9d9 	bl	b9412 <_ZN6StringC1EPK19__FlashStringHelper>
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
   b6060:	9b04      	ldr	r3, [sp, #16]
   b6062:	2664      	movs	r6, #100	; 0x64
   b6064:	435e      	muls	r6, r3
      { return _M_dataplus._M_p; }
   b6066:	f8db 3000 	ldr.w	r3, [fp]
   b606a:	4433      	add	r3, r6
      request.path = "/cta?lines=" + String(railways[j].name.c_str());
   b606c:	a81b      	add	r0, sp, #108	; 0x6c
   b606e:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b6070:	f003 f9cf 	bl	b9412 <_ZN6StringC1EPK19__FlashStringHelper>
   b6074:	a91b      	add	r1, sp, #108	; 0x6c
   b6076:	a81f      	add	r0, sp, #124	; 0x7c
   b6078:	f003 fa46 	bl	b9508 <_ZplRK15StringSumHelperRK6String>
   b607c:	4601      	mov	r1, r0
   b607e:	48a1      	ldr	r0, [pc, #644]	; (b6304 <loop+0x31c>)
   b6080:	f003 f9db 	bl	b943a <_ZN6StringaSERKS_>
   b6084:	a81b      	add	r0, sp, #108	; 0x6c
   b6086:	f003 f979 	bl	b937c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b608a:	a81f      	add	r0, sp, #124	; 0x7c
   b608c:	f003 f976 	bl	b937c <_ZN6StringD1Ev>
   b6090:	4b9d      	ldr	r3, [pc, #628]	; (b6308 <loop+0x320>)
   b6092:	499e      	ldr	r1, [pc, #632]	; (b630c <loop+0x324>)
   b6094:	489e      	ldr	r0, [pc, #632]	; (b6310 <loop+0x328>)
   b6096:	9300      	str	r3, [sp, #0]
   b6098:	462a      	mov	r2, r5
   b609a:	4b9e      	ldr	r3, [pc, #632]	; (b6314 <loop+0x32c>)
   b609c:	f000 fc84 	bl	b69a8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
      Serial.println(response.status);
   b60a0:	f003 fe5c 	bl	b9d5c <_Z16_fetch_usbserialv>
        size_t n = print(b, base);
   b60a4:	220a      	movs	r2, #10
   b60a6:	6829      	ldr	r1, [r5, #0]
   b60a8:	4607      	mov	r7, r0
   b60aa:	f7fe f881 	bl	b41b0 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
        n += println();
   b60ae:	4638      	mov	r0, r7
   b60b0:	f003 f8f9 	bl	b92a6 <_ZN5Print7printlnEv>
      Serial.println(response.body);
   b60b4:	f003 fe52 	bl	b9d5c <_Z16_fetch_usbserialv>
   b60b8:	6869      	ldr	r1, [r5, #4]
   b60ba:	f003 f900 	bl	b92be <_ZN5Print7printlnEPKc>
      Serial.println("parsing");
   b60be:	f003 fe4d 	bl	b9d5c <_Z16_fetch_usbserialv>
   b60c2:	4995      	ldr	r1, [pc, #596]	; (b6318 <loop+0x330>)
   b60c4:	f003 f8fb 	bl	b92be <_ZN5Print7printlnEPKc>
      parser.clear();
   b60c8:	4894      	ldr	r0, [pc, #592]	; (b631c <loop+0x334>)
   b60ca:	f000 fe05 	bl	b6cd8 <_ZN10JsonBuffer5clearEv>
	const char * c_str() const { return buffer; }
   b60ce:	6869      	ldr	r1, [r5, #4]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b60d0:	9103      	str	r1, [sp, #12]
   b60d2:	4608      	mov	r0, r1
   b60d4:	f005 f890 	bl	bb1f8 <strlen>
   b60d8:	9903      	ldr	r1, [sp, #12]
   b60da:	4602      	mov	r2, r0
   b60dc:	488f      	ldr	r0, [pc, #572]	; (b631c <loop+0x334>)
   b60de:	f000 fdde 	bl	b6c9e <_ZN10JsonBuffer7addDataEPKcj>
      if(!parser.parse()){
   b60e2:	488e      	ldr	r0, [pc, #568]	; (b631c <loop+0x334>)
   b60e4:	f001 f9e8 	bl	b74b8 <_ZN10JsonParser5parseEv>
   b60e8:	4605      	mov	r5, r0
   b60ea:	b948      	cbnz	r0, b6100 <loop+0x118>
        Serial.println("parsing failed");
   b60ec:	f003 fe36 	bl	b9d5c <_Z16_fetch_usbserialv>
   b60f0:	498b      	ldr	r1, [pc, #556]	; (b6320 <loop+0x338>)
}
   b60f2:	b039      	add	sp, #228	; 0xe4
   b60f4:	ecbd 8b06 	vpop	{d8-d10}
   b60f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("parsing failed");
   b60fc:	f003 b8df 	b.w	b92be <_ZN5Print7printlnEPKc>
	return *(this->_M_impl._M_start + __n);
   b6100:	f8db 1000 	ldr.w	r1, [fp]
        float lat = train.key("latitude").valueFloat();
   b6104:	eddf 9a87 	vldr	s19, [pc, #540]	; b6324 <loop+0x33c>
      Railway currentRailway = railways[j];
   b6108:	4431      	add	r1, r6
   b610a:	a81f      	add	r0, sp, #124	; 0x7c
   b610c:	f7ff fcfc 	bl	b5b08 <_ZN7RailwayC1ERKS_>
      std::vector<Checkpoint> currentCheckpoints = currentRailway.checkpoints;
   b6110:	a91f      	add	r1, sp, #124	; 0x7c
   b6112:	a809      	add	r0, sp, #36	; 0x24
   b6114:	f7fe fb30 	bl	b4778 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      int count = 0;
   b6118:	2300      	movs	r3, #0
   b611a:	9305      	str	r3, [sp, #20]
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b611c:	497f      	ldr	r1, [pc, #508]	; (b631c <loop+0x334>)
   b611e:	a80f      	add	r0, sp, #60	; 0x3c
   b6120:	f000 fdf4 	bl	b6d0c <_ZNK10JsonParser12getReferenceEv>
   b6124:	4a80      	ldr	r2, [pc, #512]	; (b6328 <loop+0x340>)
   b6126:	a90f      	add	r1, sp, #60	; 0x3c
   b6128:	a813      	add	r0, sp, #76	; 0x4c
   b612a:	f000 ffbf 	bl	b70ac <_ZNK13JsonReference3keyEPKc>
   b612e:	2200      	movs	r2, #0
   b6130:	a913      	add	r1, sp, #76	; 0x4c
   b6132:	a817      	add	r0, sp, #92	; 0x5c
   b6134:	f000 fe8e 	bl	b6e54 <_ZNK13JsonReference5indexEj>
   b6138:	4a7c      	ldr	r2, [pc, #496]	; (b632c <loop+0x344>)
   b613a:	a917      	add	r1, sp, #92	; 0x5c
   b613c:	a81b      	add	r0, sp, #108	; 0x6c
   b613e:	f000 ffb5 	bl	b70ac <_ZNK13JsonReference3keyEPKc>
   b6142:	9a05      	ldr	r2, [sp, #20]
   b6144:	a91b      	add	r1, sp, #108	; 0x6c
   b6146:	a80c      	add	r0, sp, #48	; 0x30
   b6148:	f000 fe84 	bl	b6e54 <_ZNK13JsonReference5indexEj>
   b614c:	a81b      	add	r0, sp, #108	; 0x6c
   b614e:	f000 fd55 	bl	b6bfc <_ZN13JsonReferenceD1Ev>
   b6152:	a817      	add	r0, sp, #92	; 0x5c
   b6154:	f000 fd52 	bl	b6bfc <_ZN13JsonReferenceD1Ev>
   b6158:	a813      	add	r0, sp, #76	; 0x4c
   b615a:	f000 fd4f 	bl	b6bfc <_ZN13JsonReferenceD1Ev>
   b615e:	a80f      	add	r0, sp, #60	; 0x3c
   b6160:	f000 fd4c 	bl	b6bfc <_ZN13JsonReferenceD1Ev>
        String nextStation = train.key("next_stop").valueString();
   b6164:	4a72      	ldr	r2, [pc, #456]	; (b6330 <loop+0x348>)
   b6166:	a90c      	add	r1, sp, #48	; 0x30
   b6168:	a81b      	add	r0, sp, #108	; 0x6c
   b616a:	f000 ff9f 	bl	b70ac <_ZNK13JsonReference3keyEPKc>
   b616e:	a91b      	add	r1, sp, #108	; 0x6c
   b6170:	a80f      	add	r0, sp, #60	; 0x3c
   b6172:	f000 ffb5 	bl	b70e0 <_ZNK13JsonReference11valueStringEv>
   b6176:	a81b      	add	r0, sp, #108	; 0x6c
   b6178:	f000 fd40 	bl	b6bfc <_ZN13JsonReferenceD1Ev>
        String destNm = train.key("destination").valueString();
   b617c:	4a6d      	ldr	r2, [pc, #436]	; (b6334 <loop+0x34c>)
   b617e:	a90c      	add	r1, sp, #48	; 0x30
   b6180:	a81b      	add	r0, sp, #108	; 0x6c
   b6182:	f000 ff93 	bl	b70ac <_ZNK13JsonReference3keyEPKc>
   b6186:	a91b      	add	r1, sp, #108	; 0x6c
   b6188:	a813      	add	r0, sp, #76	; 0x4c
   b618a:	f000 ffa9 	bl	b70e0 <_ZNK13JsonReference11valueStringEv>
   b618e:	a81b      	add	r0, sp, #108	; 0x6c
   b6190:	f000 fd34 	bl	b6bfc <_ZN13JsonReferenceD1Ev>
        int trainDir = train.key("direction").valueInt();
   b6194:	4a68      	ldr	r2, [pc, #416]	; (b6338 <loop+0x350>)
   b6196:	a90c      	add	r1, sp, #48	; 0x30
   b6198:	a81b      	add	r0, sp, #108	; 0x6c
   b619a:	f000 ff87 	bl	b70ac <_ZNK13JsonReference3keyEPKc>
   b619e:	2100      	movs	r1, #0
   b61a0:	a81b      	add	r0, sp, #108	; 0x6c
   b61a2:	f000 fe71 	bl	b6e88 <_ZNK13JsonReference8valueIntEi>
   b61a6:	9003      	str	r0, [sp, #12]
   b61a8:	a81b      	add	r0, sp, #108	; 0x6c
   b61aa:	f000 fd27 	bl	b6bfc <_ZN13JsonReferenceD1Ev>
        float lat = train.key("latitude").valueFloat();
   b61ae:	4a63      	ldr	r2, [pc, #396]	; (b633c <loop+0x354>)
   b61b0:	a90c      	add	r1, sp, #48	; 0x30
   b61b2:	a81b      	add	r0, sp, #108	; 0x6c
   b61b4:	f000 ff7a 	bl	b70ac <_ZNK13JsonReference3keyEPKc>
   b61b8:	a81b      	add	r0, sp, #108	; 0x6c
   b61ba:	eeb0 0a69 	vmov.f32	s0, s19
   b61be:	f000 fe6f 	bl	b6ea0 <_ZNK13JsonReference10valueFloatEf>
   b61c2:	a81b      	add	r0, sp, #108	; 0x6c
   b61c4:	eef0 8a40 	vmov.f32	s17, s0
   b61c8:	f000 fd18 	bl	b6bfc <_ZN13JsonReferenceD1Ev>
        float lon = train.key("longitude").valueFloat();
   b61cc:	4a5c      	ldr	r2, [pc, #368]	; (b6340 <loop+0x358>)
   b61ce:	a90c      	add	r1, sp, #48	; 0x30
   b61d0:	a81b      	add	r0, sp, #108	; 0x6c
   b61d2:	f000 ff6b 	bl	b70ac <_ZNK13JsonReference3keyEPKc>
   b61d6:	a81b      	add	r0, sp, #108	; 0x6c
   b61d8:	eeb0 0a69 	vmov.f32	s0, s19
   b61dc:	f000 fe60 	bl	b6ea0 <_ZNK13JsonReference10valueFloatEf>
   b61e0:	a81b      	add	r0, sp, #108	; 0x6c
   b61e2:	eeb0 8a40 	vmov.f32	s16, s0
   b61e6:	f000 fd09 	bl	b6bfc <_ZN13JsonReferenceD1Ev>
        if(nextStation.length() <= 1){
   b61ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b61ec:	2b01      	cmp	r3, #1
   b61ee:	f200 80b1 	bhi.w	b6354 <loop+0x36c>
          Serial.println("break");
   b61f2:	f003 fdb3 	bl	b9d5c <_Z16_fetch_usbserialv>
   b61f6:	4953      	ldr	r1, [pc, #332]	; (b6344 <loop+0x35c>)
        Serial.println("sending");
   b61f8:	f8df a154 	ldr.w	sl, [pc, #340]	; b6350 <loop+0x368>
          Wire.beginTransmission(brownLineAdr);
   b61fc:	f8df 90f4 	ldr.w	r9, [pc, #244]	; b62f4 <loop+0x30c>
          Serial.println("break");
   b6200:	f003 f85d 	bl	b92be <_ZN5Print7printlnEPKc>
          break;
   b6204:	a813      	add	r0, sp, #76	; 0x4c
   b6206:	f003 f8b9 	bl	b937c <_ZN6StringD1Ev>
   b620a:	a80f      	add	r0, sp, #60	; 0x3c
   b620c:	f003 f8b6 	bl	b937c <_ZN6StringD1Ev>
   b6210:	a80c      	add	r0, sp, #48	; 0x30
   b6212:	f000 fcf3 	bl	b6bfc <_ZN13JsonReferenceD1Ev>
      for(int i = 0; i < 3; i++){
   b6216:	9b04      	ldr	r3, [sp, #16]
   b6218:	2500      	movs	r5, #0
   b621a:	ea4f 08c3 	mov.w	r8, r3, lsl #3
        Serial.println("sending");
   b621e:	f003 fd9d 	bl	b9d5c <_Z16_fetch_usbserialv>
   b6222:	4651      	mov	r1, sl
   b6224:	f003 f84b 	bl	b92be <_ZN5Print7printlnEPKc>
        if(i == 2){
   b6228:	2d02      	cmp	r5, #2
   b622a:	f040 831f 	bne.w	b686c <loop+0x884>
          Wire.beginTransmission(brownLineAdr);
   b622e:	f003 fee3 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b6232:	f8d9 1000 	ldr.w	r1, [r9]
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b6236:	f002 feb5 	bl	b8fa4 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(String(currentRailway.colors[0].c_str()));
   b623a:	f003 fedd 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b623e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
   b6240:	4606      	mov	r6, r0
   b6242:	6819      	ldr	r1, [r3, #0]
   b6244:	a81b      	add	r0, sp, #108	; 0x6c
   b6246:	f003 f8e4 	bl	b9412 <_ZN6StringC1EPK19__FlashStringHelper>
   b624a:	991b      	ldr	r1, [sp, #108]	; 0x6c
   b624c:	4630      	mov	r0, r6
   b624e:	f7fe f8c1 	bl	b43d4 <_ZN5Print5writeEPKc.isra.0>
   b6252:	a81b      	add	r0, sp, #108	; 0x6c
   b6254:	f003 f892 	bl	b937c <_ZN6StringD1Ev>
        Wire.write(String(currentRailway.colors[1].c_str()));
   b6258:	f003 fece 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b625c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
   b625e:	4606      	mov	r6, r0
   b6260:	6999      	ldr	r1, [r3, #24]
   b6262:	a81b      	add	r0, sp, #108	; 0x6c
   b6264:	f003 f8d5 	bl	b9412 <_ZN6StringC1EPK19__FlashStringHelper>
   b6268:	991b      	ldr	r1, [sp, #108]	; 0x6c
   b626a:	4630      	mov	r0, r6
   b626c:	f7fe f8b2 	bl	b43d4 <_ZN5Print5writeEPKc.isra.0>
   b6270:	a81b      	add	r0, sp, #108	; 0x6c
   b6272:	f003 f883 	bl	b937c <_ZN6StringD1Ev>
        Wire.endTransmission();
   b6276:	f003 febf 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b627a:	f002 fe9a 	bl	b8fb2 <_ZN7TwoWire15endTransmissionEv>
        if(i == 2){
   b627e:	2d02      	cmp	r5, #2
   b6280:	f040 82fb 	bne.w	b687a <loop+0x892>
          Wire.beginTransmission(brownLineAdr);
   b6284:	f003 feb8 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b6288:	f8d9 1000 	ldr.w	r1, [r9]
   b628c:	f002 fe8a 	bl	b8fa4 <_ZN7TwoWire17beginTransmissionEi>
        Serial.printlnf("rail part %i", i);
   b6290:	f003 fd64 	bl	b9d5c <_Z16_fetch_usbserialv>
   b6294:	492c      	ldr	r1, [pc, #176]	; (b6348 <loop+0x360>)
   b6296:	462a      	mov	r2, r5
   b6298:	f7fe f98e 	bl	b45b8 <_ZN5Print8printlnfEPKcz>
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b629c:	270c      	movs	r7, #12
   b629e:	436f      	muls	r7, r5
   b62a0:	2600      	movs	r6, #0
   b62a2:	9928      	ldr	r1, [sp, #160]	; 0xa0
   b62a4:	19ca      	adds	r2, r1, r7
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b62a6:	59c9      	ldr	r1, [r1, r7]
   b62a8:	6852      	ldr	r2, [r2, #4]
   b62aa:	1a52      	subs	r2, r2, r1
   b62ac:	ebb6 0fa2 	cmp.w	r6, r2, asr #2
   b62b0:	f080 8302 	bcs.w	b68b8 <loop+0x8d0>
          Wire.write((char)currentRailway.outputs[i][j] + '0');
   b62b4:	f003 fea0 	bl	b9ff8 <_Z19__fetch_global_Wirev>
	return *(this->_M_impl._M_start + __n);
   b62b8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   b62ba:	59d2      	ldr	r2, [r2, r7]
   b62bc:	f812 1026 	ldrb.w	r1, [r2, r6, lsl #2]
   b62c0:	3130      	adds	r1, #48	; 0x30
   b62c2:	f7fd ffb7 	bl	b4234 <_ZN7TwoWire5writeEi.isra.0>
          Serial.print(currentRailway.outputs[i][j]);
   b62c6:	f003 fd49 	bl	b9d5c <_Z16_fetch_usbserialv>
   b62ca:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   b62cc:	59d1      	ldr	r1, [r2, r7]
   b62ce:	220a      	movs	r2, #10
   b62d0:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
   b62d4:	f7fd ff6c 	bl	b41b0 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
   b62d8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
          currentRailway.outputs[i][j] = 0;
   b62da:	59d2      	ldr	r2, [r2, r7]
   b62dc:	2300      	movs	r3, #0
   b62de:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b62e2:	3601      	adds	r6, #1
   b62e4:	e7dd      	b.n	b62a2 <loop+0x2ba>
   b62e6:	bf00      	nop
   b62e8:	000bd4e3 	.word	0x000bd4e3
   b62ec:	000bd4ee 	.word	0x000bd4ee
   b62f0:	2003e698 	.word	0x2003e698
   b62f4:	20035654 	.word	0x20035654
   b62f8:	c28f5c29 	.word	0xc28f5c29
   b62fc:	000bd4f3 	.word	0x000bd4f3
   b6300:	2003e67c 	.word	0x2003e67c
   b6304:	2003e658 	.word	0x2003e658
   b6308:	000bd4ff 	.word	0x000bd4ff
   b630c:	2003e630 	.word	0x2003e630
   b6310:	200356bc 	.word	0x200356bc
   b6314:	2003534c 	.word	0x2003534c
   b6318:	000bd503 	.word	0x000bd503
   b631c:	20037f3c 	.word	0x20037f3c
   b6320:	000bd50b 	.word	0x000bd50b
   b6324:	00000000 	.word	0x00000000
   b6328:	000bd51a 	.word	0x000bd51a
   b632c:	000bd520 	.word	0x000bd520
   b6330:	000bd527 	.word	0x000bd527
   b6334:	000bd531 	.word	0x000bd531
   b6338:	000bd53d 	.word	0x000bd53d
   b633c:	000bd547 	.word	0x000bd547
   b6340:	000bd550 	.word	0x000bd550
   b6344:	000bd55a 	.word	0x000bd55a
   b6348:	000bd5cd 	.word	0x000bd5cd
   b634c:	2003e5c0 	.word	0x2003e5c0
   b6350:	000bd5c5 	.word	0x000bd5c5
        Serial.print(String(currentRailway.name.c_str()) + " ");
   b6354:	f003 fd02 	bl	b9d5c <_Z16_fetch_usbserialv>
   b6358:	992b      	ldr	r1, [sp, #172]	; 0xac
   b635a:	4606      	mov	r6, r0
   b635c:	a817      	add	r0, sp, #92	; 0x5c
   b635e:	f003 f858 	bl	b9412 <_ZN6StringC1EPK19__FlashStringHelper>
	StringSumHelper(const String &s) : String(s) {}
   b6362:	a917      	add	r1, sp, #92	; 0x5c
   b6364:	a81b      	add	r0, sp, #108	; 0x6c
   b6366:	f003 f877 	bl	b9458 <_ZN6StringC1ERKS_>
   b636a:	49d0      	ldr	r1, [pc, #832]	; (b66ac <loop+0x6c4>)
   b636c:	a81b      	add	r0, sp, #108	; 0x6c
   b636e:	f003 f8d7 	bl	b9520 <_ZplRK15StringSumHelperPKc>
   b6372:	6801      	ldr	r1, [r0, #0]
   b6374:	4630      	mov	r0, r6
   b6376:	f002 ff8f 	bl	b9298 <_ZN5Print5printEPKc>
class StringSumHelper : public String
   b637a:	a81b      	add	r0, sp, #108	; 0x6c
   b637c:	f002 fffe 	bl	b937c <_ZN6StringD1Ev>
   b6380:	a817      	add	r0, sp, #92	; 0x5c
   b6382:	f002 fffb 	bl	b937c <_ZN6StringD1Ev>
        Serial.printf("train %i: ", count);
   b6386:	f003 fce9 	bl	b9d5c <_Z16_fetch_usbserialv>
   b638a:	9a05      	ldr	r2, [sp, #20]
   b638c:	49c8      	ldr	r1, [pc, #800]	; (b66b0 <loop+0x6c8>)
   b638e:	f7fe f905 	bl	b459c <_ZN5Print6printfEPKcz>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6392:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   b6396:	1a9b      	subs	r3, r3, r2
   b6398:	ea4f 0ae3 	mov.w	sl, r3, asr #3
        for(int i = 0; i < checkpointCount; i++){
   b639c:	2700      	movs	r7, #0
   b639e:	4557      	cmp	r7, sl
	return *(this->_M_impl._M_start + __n);
   b63a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b63a2:	da39      	bge.n	b6418 <loop+0x430>
   b63a4:	eb02 06c7 	add.w	r6, r2, r7, lsl #3
    }

    float getDistance(float trainLat, float trainLon){
      return sqrt(pow((trainLat - lat), 2) + pow((trainLon - lon), 2));
   b63a8:	edd6 7a00 	vldr	s15, [r6]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b63ac:	ee78 7ae7 	vsub.f32	s15, s17, s15
   b63b0:	ee17 0a90 	vmov	r0, s15
   b63b4:	f004 fad8 	bl	ba968 <__aeabi_f2d>
   b63b8:	edd6 7a01 	vldr	s15, [r6, #4]
   b63bc:	ee78 7a67 	vsub.f32	s15, s16, s15
   b63c0:	4602      	mov	r2, r0
   b63c2:	460b      	mov	r3, r1
   b63c4:	ee17 0a90 	vmov	r0, s15
   b63c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b63cc:	f004 facc 	bl	ba968 <__aeabi_f2d>
   b63d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   b63d4:	4680      	mov	r8, r0
   b63d6:	4689      	mov	r9, r1
   b63d8:	4610      	mov	r0, r2
   b63da:	4619      	mov	r1, r3
   b63dc:	f004 fb1c 	bl	baa18 <__aeabi_dmul>
   b63e0:	4642      	mov	r2, r8
   b63e2:	ec41 0b1a 	vmov	d10, r0, r1
   b63e6:	464b      	mov	r3, r9
   b63e8:	4640      	mov	r0, r8
   b63ea:	4649      	mov	r1, r9
   b63ec:	f004 fb14 	bl	baa18 <__aeabi_dmul>
   b63f0:	4602      	mov	r2, r0
   b63f2:	460b      	mov	r3, r1
   b63f4:	ec51 0b1a 	vmov	r0, r1, d10
   b63f8:	f004 f958 	bl	ba6ac <__adddf3>
   b63fc:	ec41 0b10 	vmov	d0, r0, r1
   b6400:	f004 f848 	bl	ba494 <sqrt>
          currentRailway.distances[i] = currentCheckpoints[i].getDistance(lat, lon);
   b6404:	9e22      	ldr	r6, [sp, #136]	; 0x88
   b6406:	ec51 0b10 	vmov	r0, r1, d0
   b640a:	f004 fdfd 	bl	bb008 <__aeabi_d2f>
   b640e:	eb06 0687 	add.w	r6, r6, r7, lsl #2
        for(int i = 0; i < checkpointCount; i++){
   b6412:	3701      	adds	r7, #1
   b6414:	6030      	str	r0, [r6, #0]
   b6416:	e7c2      	b.n	b639e <loop+0x3b6>
      : _M_current(__i) { }
   b6418:	e9dd 1722 	ldrd	r1, r7, [sp, #136]	; 0x88
    _GLIBCXX14_CONSTEXPR
    _ForwardIterator
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
		  _Compare __comp)
    {
      if (__first == __last)
   b641c:	42b9      	cmp	r1, r7
   b641e:	d011      	beq.n	b6444 <loop+0x45c>
   b6420:	1d08      	adds	r0, r1, #4
   b6422:	460b      	mov	r3, r1
	return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
   b6424:	4287      	cmp	r7, r0
	++_M_current;
   b6426:	4606      	mov	r6, r0
   b6428:	d00d      	beq.n	b6446 <loop+0x45e>
	if (__comp(__first, __result))
   b642a:	edd3 7a00 	vldr	s15, [r3]
   b642e:	ed96 7a00 	vldr	s14, [r6]
   b6432:	eeb4 7a67 	vcmp.f32	s14, s15
   b6436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b643a:	f100 0004 	add.w	r0, r0, #4
   b643e:	bf48      	it	mi
   b6440:	4633      	movmi	r3, r6
   b6442:	e7ef      	b.n	b6424 <loop+0x43c>
   b6444:	460b      	mov	r3, r1
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b6446:	1a5b      	subs	r3, r3, r1
        if(closestIndex == currentRailway.tripleIndex){
   b6448:	9934      	ldr	r1, [sp, #208]	; 0xd0
   b644a:	ed9f 9a9a 	vldr	s18, [pc, #616]	; b66b4 <loop+0x6cc>
   b644e:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
   b6452:	ea4f 08a3 	mov.w	r8, r3, asr #2
          closestIndex = currentRailway.loopIndex;
   b6456:	bf08      	it	eq
   b6458:	f8dd 80d4 	ldreq.w	r8, [sp, #212]	; 0xd4
   b645c:	eb02 03c8 	add.w	r3, r2, r8, lsl #3
        x1 = currentCheckpoints[closestIndex].lat;
   b6460:	edd3 7a00 	vldr	s15, [r3]
        y1 = currentCheckpoints[closestIndex].lon;
   b6464:	ed93 7a01 	vldr	s14, [r3, #4]
        if(currentCheckpoints[closestIndex].lat > lat){
   b6468:	eef4 8ae7 	vcmpe.f32	s17, s15
   b646c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          slope = (y1 - y) / (x1 - x);
   b6470:	bf47      	ittee	mi
   b6472:	ee37 7a48 	vsubmi.f32	s14, s14, s16
   b6476:	ee77 7ae8 	vsubmi.f32	s15, s15, s17
          slope = (y - y1) / (x - x1);
   b647a:	ee38 7a47 	vsubpl.f32	s14, s16, s14
   b647e:	ee78 7ae7 	vsubpl.f32	s15, s17, s15
   b6482:	ea4f 06c8 	mov.w	r6, r8, lsl #3
   b6486:	eec7 6a27 	vdiv.f32	s13, s14, s15
        if(slope == 0){
   b648a:	eef5 6a40 	vcmp.f32	s13, #0.0
   b648e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6492:	d151      	bne.n	b6538 <loop+0x550>
          Serial.println("slope 0");
   b6494:	f003 fc62 	bl	b9d5c <_Z16_fetch_usbserialv>
   b6498:	4987      	ldr	r1, [pc, #540]	; (b66b8 <loop+0x6d0>)
   b649a:	f002 ff10 	bl	b92be <_ZN5Print7printlnEPKc>
        Serial.println("calculation");
   b649e:	f003 fc5d 	bl	b9d5c <_Z16_fetch_usbserialv>
   b64a2:	4986      	ldr	r1, [pc, #536]	; (b66bc <loop+0x6d4>)
   b64a4:	f002 ff0b 	bl	b92be <_ZN5Print7printlnEPKc>
        if(closestIndex == 0){
   b64a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b64aa:	f1b8 0f00 	cmp.w	r8, #0
   b64ae:	f040 809f 	bne.w	b65f0 <loop+0x608>
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b64b2:	edd3 7a02 	vldr	s15, [r3, #8]
          if(currentRailway.loopIndex == closestIndex){
   b64b6:	9935      	ldr	r1, [sp, #212]	; 0xd4
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b64b8:	ee77 7ae8 	vsub.f32	s15, s15, s17
   b64bc:	eeb0 7a48 	vmov.f32	s14, s16
   b64c0:	eea7 7a89 	vfma.f32	s14, s15, s18
   b64c4:	441e      	add	r6, r3
   b64c6:	edd3 7a03 	vldr	s15, [r3, #12]
   b64ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
          nearestSide = (perpendicularSlope * (currentCheckpoints[closestIndex].lat - x) + y) > currentCheckpoints[closestIndex].lon;
   b64ce:	edd6 7a00 	vldr	s15, [r6]
   b64d2:	ee77 7ae8 	vsub.f32	s15, s15, s17
   b64d6:	eeb0 7a48 	vmov.f32	s14, s16
   b64da:	eea7 7a89 	vfma.f32	s14, s15, s18
   b64de:	edd6 7a01 	vldr	s15, [r6, #4]
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b64e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          nearestSide = (perpendicularSlope * (currentCheckpoints[closestIndex].lat - x) + y) > currentCheckpoints[closestIndex].lon;
   b64e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b64ea:	bfcc      	ite	gt
   b64ec:	2201      	movgt	r2, #1
   b64ee:	2200      	movle	r2, #0
          nearestSide = (perpendicularSlope * (currentCheckpoints[closestIndex].lat - x) + y) > currentCheckpoints[closestIndex].lon;
   b64f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b64f4:	bfcc      	ite	gt
   b64f6:	2001      	movgt	r0, #1
   b64f8:	2000      	movle	r0, #0
          if(currentRailway.loopIndex == closestIndex){
   b64fa:	bb79      	cbnz	r1, b655c <loop+0x574>
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b64fc:	f8dd 80d0 	ldr.w	r8, [sp, #208]	; 0xd0
   b6500:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
   b6504:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
            if(nearestSide != pointSide){
   b6508:	4282      	cmp	r2, r0
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b650a:	ed93 0a00 	vldr	s0, [r3]
   b650e:	edd3 7a01 	vldr	s15, [r3, #4]
            if(nearestSide != pointSide){
   b6512:	f040 80c6 	bne.w	b66a2 <loop+0x6ba>
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b6516:	ee70 8a68 	vsub.f32	s17, s0, s17
   b651a:	eea8 8a89 	vfma.f32	s16, s17, s18
   b651e:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b6522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            }else if(nearestSide != loopPointSide){
   b6526:	bfcc      	ite	gt
   b6528:	2301      	movgt	r3, #1
   b652a:	2300      	movle	r3, #0
   b652c:	4293      	cmp	r3, r2
   b652e:	f040 809a 	bne.w	b6666 <loop+0x67e>
              secondClosestIndex = closestIndex + 1;
   b6532:	f108 0401 	add.w	r4, r8, #1
   b6536:	e096      	b.n	b6666 <loop+0x67e>
        }else if(slope >= __FLT_MAX__ / 10){
   b6538:	eef4 6ac9 	vcmpe.f32	s13, s18
   b653c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6540:	db07      	blt.n	b6552 <loop+0x56a>
          Serial.println("slope max");
   b6542:	f003 fc0b 	bl	b9d5c <_Z16_fetch_usbserialv>
   b6546:	495e      	ldr	r1, [pc, #376]	; (b66c0 <loop+0x6d8>)
   b6548:	f002 feb9 	bl	b92be <_ZN5Print7printlnEPKc>
          perpendicularSlope = 0;
   b654c:	eeb0 9a69 	vmov.f32	s18, s19
   b6550:	e7a5      	b.n	b649e <loop+0x4b6>
          perpendicularSlope = -1 / slope;
   b6552:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b6556:	ee87 9aa6 	vdiv.f32	s18, s15, s13
   b655a:	e7a0      	b.n	b649e <loop+0x4b6>
              validTrain = false;
   b655c:	4282      	cmp	r2, r0
   b655e:	bf16      	itet	ne
   b6560:	46a9      	movne	r9, r5
   b6562:	f04f 0900 	moveq.w	r9, #0
   b6566:	2401      	movne	r4, #1
        Serial.println("segment pos");
   b6568:	f003 fbf8 	bl	b9d5c <_Z16_fetch_usbserialv>
   b656c:	4955      	ldr	r1, [pc, #340]	; (b66c4 <loop+0x6dc>)
   b656e:	f002 fea6 	bl	b92be <_ZN5Print7printlnEPKc>
        if(validTrain){
   b6572:	f1b9 0f00 	cmp.w	r9, #0
   b6576:	f000 812d 	beq.w	b67d4 <loop+0x7ec>
          if(closestIndex < secondClosestIndex){
   b657a:	45a0      	cmp	r8, r4
   b657c:	9b22      	ldr	r3, [sp, #136]	; 0x88
          if(closestIndex < currentRailway.lowerLoopBound || secondClosestIndex < currentRailway.lowerLoopBound){
   b657e:	f8dd a0d8 	ldr.w	sl, [sp, #216]	; 0xd8
          if(closestIndex < secondClosestIndex){
   b6582:	bfab      	itete	ge
   b6584:	4626      	movge	r6, r4
   b6586:	4646      	movlt	r6, r8
   b6588:	4642      	movge	r2, r8
   b658a:	4622      	movlt	r2, r4
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b658c:	eb03 0186 	add.w	r1, r3, r6, lsl #2
   b6590:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   b6594:	ed91 7a00 	vldr	s14, [r1]
   b6598:	edd3 7a00 	vldr	s15, [r3]
          segmentPos *= currentRailway.scalers[lowerIndex];
   b659c:	9b25      	ldr	r3, [sp, #148]	; 0x94
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b659e:	ee77 7a27 	vadd.f32	s15, s14, s15
          segmentPos *= currentRailway.scalers[lowerIndex];
   b65a2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b65a6:	ee87 0a27 	vdiv.f32	s0, s14, s15
          if(closestIndex < currentRailway.lowerLoopBound || secondClosestIndex < currentRailway.lowerLoopBound){
   b65aa:	45c2      	cmp	sl, r8
          segmentPos *= currentRailway.scalers[lowerIndex];
   b65ac:	ed93 8a00 	vldr	s16, [r3]
   b65b0:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   b65b4:	ee28 8a00 	vmul.f32	s16, s16, s0
          if(closestIndex < currentRailway.lowerLoopBound || secondClosestIndex < currentRailway.lowerLoopBound){
   b65b8:	dc02      	bgt.n	b65c0 <loop+0x5d8>
   b65ba:	45a2      	cmp	sl, r4
   b65bc:	f340 8086 	ble.w	b66cc <loop+0x6e4>
            Serial.println("before");
   b65c0:	f003 fbcc 	bl	b9d5c <_Z16_fetch_usbserialv>
   b65c4:	4940      	ldr	r1, [pc, #256]	; (b66c8 <loop+0x6e0>)
   b65c6:	f002 fe7a 	bl	b92be <_ZN5Print7printlnEPKc>
            lowerScaleBound = 0;
   b65ca:	f04f 0a00 	mov.w	sl, #0
        bool inLoop = false;
   b65ce:	4657      	mov	r7, sl
            pcbSegment = 0;
   b65d0:	46d1      	mov	r9, sl
   b65d2:	9b25      	ldr	r3, [sp, #148]	; 0x94
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b65d4:	4556      	cmp	r6, sl
   b65d6:	f340 80bd 	ble.w	b6754 <loop+0x76c>
            segmentPos += currentRailway.scalers[i];
   b65da:	f853 202a 	ldr.w	r2, [r3, sl, lsl #2]
   b65de:	ee07 2a90 	vmov	s15, r2
   b65e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b65e6:	f10a 0a01 	add.w	sl, sl, #1
            segmentPos += currentRailway.scalers[i];
   b65ea:	ee38 8a27 	vadd.f32	s16, s16, s15
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b65ee:	e7f1      	b.n	b65d4 <loop+0x5ec>
   b65f0:	f1a6 0208 	sub.w	r2, r6, #8
   b65f4:	441a      	add	r2, r3
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b65f6:	edd2 7a00 	vldr	s15, [r2]
   b65fa:	ee77 7ae8 	vsub.f32	s15, s15, s17
   b65fe:	eeb0 7a48 	vmov.f32	s14, s16
   b6602:	eea7 7a89 	vfma.f32	s14, s15, s18
   b6606:	441e      	add	r6, r3
   b6608:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
   b660c:	edd2 7a01 	vldr	s15, [r2, #4]
   b6610:	eeb4 7ae7 	vcmpe.f32	s14, s15
          nearestSide = (perpendicularSlope * (currentCheckpoints[closestIndex].lat - x) + y) > currentCheckpoints[closestIndex].lon;
   b6614:	edd6 7a00 	vldr	s15, [r6]
   b6618:	ee77 7ae8 	vsub.f32	s15, s15, s17
   b661c:	eeb0 7a48 	vmov.f32	s14, s16
   b6620:	eea7 7a89 	vfma.f32	s14, s15, s18
          if(closestIndex == checkpointCount - 1){
   b6624:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
          nearestSide = (perpendicularSlope * (currentCheckpoints[closestIndex].lat - x) + y) > currentCheckpoints[closestIndex].lon;
   b6628:	edd6 7a01 	vldr	s15, [r6, #4]
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b662c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          nearestSide = (perpendicularSlope * (currentCheckpoints[closestIndex].lat - x) + y) > currentCheckpoints[closestIndex].lon;
   b6630:	eeb4 7ae7 	vcmpe.f32	s14, s15
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b6634:	bfcc      	ite	gt
   b6636:	2101      	movgt	r1, #1
   b6638:	2100      	movle	r1, #0
          nearestSide = (perpendicularSlope * (currentCheckpoints[closestIndex].lat - x) + y) > currentCheckpoints[closestIndex].lon;
   b663a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b663e:	bfcc      	ite	gt
   b6640:	2601      	movgt	r6, #1
   b6642:	2600      	movle	r6, #0
          if(closestIndex == checkpointCount - 1){
   b6644:	4542      	cmp	r2, r8
   b6646:	d126      	bne.n	b6696 <loop+0x6ae>
            if(closestIndex == currentRailway.loopIndex){
   b6648:	9a35      	ldr	r2, [sp, #212]	; 0xd4
   b664a:	4542      	cmp	r2, r8
   b664c:	d11e      	bne.n	b668c <loop+0x6a4>
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b664e:	9a34      	ldr	r2, [sp, #208]	; 0xd0
   b6650:	1e54      	subs	r4, r2, #1
   b6652:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
              if(nearestSide != pointSide){
   b6656:	42b1      	cmp	r1, r6
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b6658:	ed93 0a00 	vldr	s0, [r3]
   b665c:	edd3 7a01 	vldr	s15, [r3, #4]
              if(nearestSide != pointSide){
   b6660:	d003      	beq.n	b666a <loop+0x682>
                secondClosestIndex = checkpointCount - 2;
   b6662:	f1aa 0402 	sub.w	r4, sl, #2
        bool validTrain = true;
   b6666:	46a9      	mov	r9, r5
   b6668:	e77e      	b.n	b6568 <loop+0x580>
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b666a:	ee70 8a68 	vsub.f32	s17, s0, s17
   b666e:	eea8 8a89 	vfma.f32	s16, s17, s18
   b6672:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b6676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
              }else if(nearestSide != loopPointSide){
   b667a:	bfcc      	ite	gt
   b667c:	2301      	movgt	r3, #1
   b667e:	2300      	movle	r3, #0
   b6680:	428b      	cmp	r3, r1
   b6682:	d100      	bne.n	b6686 <loop+0x69e>
                secondClosestIndex = currentRailway.tripleIndex + 1;
   b6684:	1c54      	adds	r4, r2, #1
        bool validTrain = true;
   b6686:	46a9      	mov	r9, r5
                closestIndex = currentRailway.tripleIndex;
   b6688:	4690      	mov	r8, r2
   b668a:	e76d      	b.n	b6568 <loop+0x580>
              if(pointSide == nearestSide){
   b668c:	42b1      	cmp	r1, r6
   b668e:	d1e8      	bne.n	b6662 <loop+0x67a>
                validTrain = false;
   b6690:	f04f 0900 	mov.w	r9, #0
   b6694:	e768      	b.n	b6568 <loop+0x580>
            if(pointSide == nearestSide){
   b6696:	42b1      	cmp	r1, r6
   b6698:	f43f af4b 	beq.w	b6532 <loop+0x54a>
        bool validTrain = true;
   b669c:	46a9      	mov	r9, r5
              secondClosestIndex = closestIndex - 1;
   b669e:	4604      	mov	r4, r0
   b66a0:	e762      	b.n	b6568 <loop+0x580>
        bool validTrain = true;
   b66a2:	46a9      	mov	r9, r5
   b66a4:	4688      	mov	r8, r1
              secondClosestIndex = 1;
   b66a6:	2401      	movs	r4, #1
   b66a8:	e75e      	b.n	b6568 <loop+0x580>
   b66aa:	bf00      	nop
   b66ac:	000bd4f1 	.word	0x000bd4f1
   b66b0:	000bd560 	.word	0x000bd560
   b66b4:	7dcccccc 	.word	0x7dcccccc
   b66b8:	000bd56b 	.word	0x000bd56b
   b66bc:	000bd57d 	.word	0x000bd57d
   b66c0:	000bd573 	.word	0x000bd573
   b66c4:	000bd589 	.word	0x000bd589
   b66c8:	000bd595 	.word	0x000bd595
          else if(closestIndex > currentRailway.upperLoopBound || secondClosestIndex > currentRailway.upperLoopBound){
   b66cc:	9f37      	ldr	r7, [sp, #220]	; 0xdc
   b66ce:	4547      	cmp	r7, r8
   b66d0:	db01      	blt.n	b66d6 <loop+0x6ee>
   b66d2:	42a7      	cmp	r7, r4
   b66d4:	da09      	bge.n	b66ea <loop+0x702>
            Serial.println("after");
   b66d6:	f003 fb41 	bl	b9d5c <_Z16_fetch_usbserialv>
   b66da:	498c      	ldr	r1, [pc, #560]	; (b690c <loop+0x924>)
          else if(closestIndex > currentRailway.upperLoopBound || secondClosestIndex > currentRailway.upperLoopBound){
   b66dc:	46ba      	mov	sl, r7
            Serial.println("after");
   b66de:	f002 fdee 	bl	b92be <_ZN5Print7printlnEPKc>
        bool inLoop = false;
   b66e2:	2700      	movs	r7, #0
            pcbSegment = 1;
   b66e4:	f04f 0901 	mov.w	r9, #1
            Serial.println("after");
   b66e8:	e773      	b.n	b65d2 <loop+0x5ea>
            Serial.println("in");
   b66ea:	f003 fb37 	bl	b9d5c <_Z16_fetch_usbserialv>
   b66ee:	4988      	ldr	r1, [pc, #544]	; (b6910 <loop+0x928>)
   b66f0:	f002 fde5 	bl	b92be <_ZN5Print7printlnEPKc>
            if(currentRailway.name == "brown" || currentRailway.name == "purple"){
   b66f4:	4987      	ldr	r1, [pc, #540]	; (b6914 <loop+0x92c>)
   b66f6:	a82b      	add	r0, sp, #172	; 0xac
   b66f8:	f7fe f862 	bl	b47c0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
   b66fc:	4607      	mov	r7, r0
   b66fe:	b9f0      	cbnz	r0, b673e <loop+0x756>
   b6700:	4985      	ldr	r1, [pc, #532]	; (b6918 <loop+0x930>)
   b6702:	a82b      	add	r0, sp, #172	; 0xac
   b6704:	f7fe f85c 	bl	b47c0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
   b6708:	4607      	mov	r7, r0
   b670a:	b9c0      	cbnz	r0, b673e <loop+0x756>
            }else if(currentRailway.name == "pink" || currentRailway.name == "orange"){
   b670c:	4983      	ldr	r1, [pc, #524]	; (b691c <loop+0x934>)
   b670e:	a82b      	add	r0, sp, #172	; 0xac
   b6710:	f7fe f856 	bl	b47c0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
   b6714:	4607      	mov	r7, r0
   b6716:	b9b8      	cbnz	r0, b6748 <loop+0x760>
   b6718:	4981      	ldr	r1, [pc, #516]	; (b6920 <loop+0x938>)
   b671a:	a82b      	add	r0, sp, #172	; 0xac
   b671c:	f7fe f850 	bl	b47c0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
   b6720:	4607      	mov	r7, r0
   b6722:	b988      	cbnz	r0, b6748 <loop+0x760>
            }else if(currentRailway.name == "green"){
   b6724:	497f      	ldr	r1, [pc, #508]	; (b6924 <loop+0x93c>)
   b6726:	a82b      	add	r0, sp, #172	; 0xac
   b6728:	f7fe f84a 	bl	b47c0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
   b672c:	4607      	mov	r7, r0
   b672e:	b178      	cbz	r0, b6750 <loop+0x768>
              trainDir = 6 - trainDir;
   b6730:	9b03      	ldr	r3, [sp, #12]
   b6732:	f1c3 0306 	rsb	r3, r3, #6
   b6736:	9303      	str	r3, [sp, #12]
            pcbSegment = 2;
   b6738:	f04f 0902 	mov.w	r9, #2
   b673c:	e749      	b.n	b65d2 <loop+0x5ea>
   b673e:	f04f 0902 	mov.w	r9, #2
              trainDir = 5;
   b6742:	2305      	movs	r3, #5
              trainDir = 1;
   b6744:	9303      	str	r3, [sp, #12]
   b6746:	e744      	b.n	b65d2 <loop+0x5ea>
            pcbSegment = 2;
   b6748:	f04f 0902 	mov.w	r9, #2
              trainDir = 1;
   b674c:	2301      	movs	r3, #1
   b674e:	e7f9      	b.n	b6744 <loop+0x75c>
            inLoop = true;
   b6750:	464f      	mov	r7, r9
   b6752:	e7f1      	b.n	b6738 <loop+0x750>
          if(currentRailway.name == "purple"){
   b6754:	4970      	ldr	r1, [pc, #448]	; (b6918 <loop+0x930>)
   b6756:	a82b      	add	r0, sp, #172	; 0xac
   b6758:	f7fe f832 	bl	b47c0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
   b675c:	b140      	cbz	r0, b6770 <loop+0x788>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b675e:	4972      	ldr	r1, [pc, #456]	; (b6928 <loop+0x940>)
   b6760:	a813      	add	r0, sp, #76	; 0x4c
   b6762:	f002 fef2 	bl	b954a <_ZNK6String6equalsEPKc>
              trainDir = 5;
   b6766:	2800      	cmp	r0, #0
   b6768:	bf14      	ite	ne
   b676a:	2301      	movne	r3, #1
   b676c:	2305      	moveq	r3, #5
   b676e:	9303      	str	r3, [sp, #12]
          if(currentRailway.name == "orange" && inLoop){
   b6770:	496b      	ldr	r1, [pc, #428]	; (b6920 <loop+0x938>)
   b6772:	a82b      	add	r0, sp, #172	; 0xac
   b6774:	f7fe f824 	bl	b47c0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
   b6778:	b108      	cbz	r0, b677e <loop+0x796>
   b677a:	2f00      	cmp	r7, #0
   b677c:	d137      	bne.n	b67ee <loop+0x806>
          }else if(currentRailway.name == "green" && inLoop){
   b677e:	4969      	ldr	r1, [pc, #420]	; (b6924 <loop+0x93c>)
   b6780:	a82b      	add	r0, sp, #172	; 0xac
   b6782:	f7fe f81d 	bl	b47c0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
   b6786:	2800      	cmp	r0, #0
   b6788:	d15b      	bne.n	b6842 <loop+0x85a>
          Serial.println("output vector");
   b678a:	f003 fae7 	bl	b9d5c <_Z16_fetch_usbserialv>
   b678e:	4967      	ldr	r1, [pc, #412]	; (b692c <loop+0x944>)
   b6790:	f002 fd95 	bl	b92be <_ZN5Print7printlnEPKc>
  { return __builtin_floorf(__x); }
   b6794:	eeb0 0a48 	vmov.f32	s0, s16
   b6798:	f003 fe36 	bl	ba408 <floorf>
   b679c:	230c      	movs	r3, #12
          currentRailway.outputs[pcbSegment][(int)floor(segmentPos)] = trainDir;
   b679e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b67a2:	fb03 f909 	mul.w	r9, r3, r9
   b67a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   b67a8:	9a03      	ldr	r2, [sp, #12]
   b67aa:	f853 3009 	ldr.w	r3, [r3, r9]
   b67ae:	ee10 1a10 	vmov	r1, s0
   b67b2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
          Serial.printlnf("%i, %i, %f", closestIndex, secondClosestIndex, segmentPos);
   b67b6:	f003 fad1 	bl	b9d5c <_Z16_fetch_usbserialv>
   b67ba:	4606      	mov	r6, r0
   b67bc:	ee18 0a10 	vmov	r0, s16
   b67c0:	f004 f8d2 	bl	ba968 <__aeabi_f2d>
   b67c4:	4623      	mov	r3, r4
   b67c6:	e9cd 0100 	strd	r0, r1, [sp]
   b67ca:	4642      	mov	r2, r8
   b67cc:	4958      	ldr	r1, [pc, #352]	; (b6930 <loop+0x948>)
   b67ce:	4630      	mov	r0, r6
   b67d0:	f7fd fef2 	bl	b45b8 <_ZN5Print8printlnfEPKcz>
        count++;
   b67d4:	9b05      	ldr	r3, [sp, #20]
        String destNm = train.key("destination").valueString();
   b67d6:	a813      	add	r0, sp, #76	; 0x4c
        count++;
   b67d8:	3301      	adds	r3, #1
   b67da:	9305      	str	r3, [sp, #20]
        String destNm = train.key("destination").valueString();
   b67dc:	f002 fdce 	bl	b937c <_ZN6StringD1Ev>
        String nextStation = train.key("next_stop").valueString();
   b67e0:	a80f      	add	r0, sp, #60	; 0x3c
   b67e2:	f002 fdcb 	bl	b937c <_ZN6StringD1Ev>
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b67e6:	a80c      	add	r0, sp, #48	; 0x30
   b67e8:	f000 fa08 	bl	b6bfc <_ZN13JsonReferenceD1Ev>
   b67ec:	e496      	b.n	b611c <loop+0x134>
   b67ee:	9a28      	ldr	r2, [sp, #160]	; 0xa0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b67f0:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
   b67f4:	eba3 0a02 	sub.w	sl, r3, r2
   b67f8:	ea4f 0aaa 	mov.w	sl, sl, asr #2
            segmentPos = (int)((1.5 * (float)currentRailway.outputs[2].size()) - segmentPos) % currentRailway.outputs[2].size();
   b67fc:	ee07 aa90 	vmov	s15, sl
   b6800:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b6804:	ee17 0a90 	vmov	r0, s15
   b6808:	f004 f8ae 	bl	ba968 <__aeabi_f2d>
   b680c:	4b49      	ldr	r3, [pc, #292]	; (b6934 <loop+0x94c>)
   b680e:	2200      	movs	r2, #0
   b6810:	f004 f902 	bl	baa18 <__aeabi_dmul>
   b6814:	4606      	mov	r6, r0
   b6816:	ee18 0a10 	vmov	r0, s16
   b681a:	460f      	mov	r7, r1
   b681c:	f004 f8a4 	bl	ba968 <__aeabi_f2d>
   b6820:	460b      	mov	r3, r1
   b6822:	4602      	mov	r2, r0
   b6824:	4639      	mov	r1, r7
   b6826:	4630      	mov	r0, r6
   b6828:	f003 ff3e 	bl	ba6a8 <__aeabi_dsub>
   b682c:	f004 fba4 	bl	baf78 <__aeabi_d2iz>
   b6830:	fbb0 f3fa 	udiv	r3, r0, sl
   b6834:	fb03 001a 	mls	r0, r3, sl, r0
   b6838:	ee07 0a90 	vmov	s15, r0
   b683c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
   b6840:	e7a3      	b.n	b678a <loop+0x7a2>
          }else if(currentRailway.name == "green" && inLoop){
   b6842:	2f00      	cmp	r7, #0
   b6844:	d0a1      	beq.n	b678a <loop+0x7a2>
   b6846:	eeb0 0a48 	vmov.f32	s0, s16
   b684a:	f003 fddd 	bl	ba408 <floorf>
	return *(this->_M_impl._M_start + __n);
   b684e:	9e28      	ldr	r6, [sp, #160]	; 0xa0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6850:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
            segmentPos = (currentRailway.outputs[2].size() - (int)floor(segmentPos));
   b6854:	eebd 8ac0 	vcvt.s32.f32	s16, s0
   b6858:	1a9b      	subs	r3, r3, r2
   b685a:	ee18 2a10 	vmov	r2, s16
   b685e:	ebc2 03a3 	rsb	r3, r2, r3, asr #2
   b6862:	ee08 3a10 	vmov	s16, r3
   b6866:	eeb8 8a48 	vcvt.f32.u32	s16, s16
   b686a:	e78e      	b.n	b678a <loop+0x7a2>
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b686c:	f003 fbc4 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b6870:	4b31      	ldr	r3, [pc, #196]	; (b6938 <loop+0x950>)
   b6872:	681b      	ldr	r3, [r3, #0]
   b6874:	f853 1008 	ldr.w	r1, [r3, r8]
   b6878:	e4dd      	b.n	b6236 <loop+0x24e>
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b687a:	f003 fbbd 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b687e:	4b2e      	ldr	r3, [pc, #184]	; (b6938 <loop+0x950>)
   b6880:	681b      	ldr	r3, [r3, #0]
   b6882:	f853 1008 	ldr.w	r1, [r3, r8]
   b6886:	f002 fb8d 	bl	b8fa4 <_ZN7TwoWire17beginTransmissionEi>
          if(currentRailway.name == "brown"){
   b688a:	4922      	ldr	r1, [pc, #136]	; (b6914 <loop+0x92c>)
   b688c:	a82b      	add	r0, sp, #172	; 0xac
   b688e:	f7fd ff97 	bl	b47c0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
   b6892:	2800      	cmp	r0, #0
   b6894:	f43f acfc 	beq.w	b6290 <loop+0x2a8>
            for(int j = 0; j < currentRailway.outputs[2].size(); j++){
   b6898:	2600      	movs	r6, #0
	return *(this->_M_impl._M_start + __n);
   b689a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b689c:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
   b68a0:	1a9b      	subs	r3, r3, r2
   b68a2:	ebb6 0fa3 	cmp.w	r6, r3, asr #2
   b68a6:	f4bf acf3 	bcs.w	b6290 <loop+0x2a8>
              Wire.write('0');
   b68aa:	f003 fba5 	bl	b9ff8 <_Z19__fetch_global_Wirev>
   b68ae:	2130      	movs	r1, #48	; 0x30
   b68b0:	f7fd fcc0 	bl	b4234 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < currentRailway.outputs[2].size(); j++){
   b68b4:	3601      	adds	r6, #1
   b68b6:	e7f0      	b.n	b689a <loop+0x8b2>
        Wire.endTransmission();
   b68b8:	f003 fb9e 	bl	b9ff8 <_Z19__fetch_global_Wirev>
      for(int i = 0; i < 3; i++){
   b68bc:	3501      	adds	r5, #1
        Wire.endTransmission();
   b68be:	f002 fb78 	bl	b8fb2 <_ZN7TwoWire15endTransmissionEv>
      for(int i = 0; i < 3; i++){
   b68c2:	2d03      	cmp	r5, #3
   b68c4:	f108 0804 	add.w	r8, r8, #4
   b68c8:	f47f aca9 	bne.w	b621e <loop+0x236>
      Serial.println();
   b68cc:	f003 fa46 	bl	b9d5c <_Z16_fetch_usbserialv>
   b68d0:	f002 fce9 	bl	b92a6 <_ZN5Print7printlnEv>
      }
   b68d4:	a809      	add	r0, sp, #36	; 0x24
   b68d6:	f7fd fe93 	bl	b4600 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      Railway currentRailway = railways[j];
   b68da:	a81f      	add	r0, sp, #124	; 0x7c
   b68dc:	f7fe f942 	bl	b4b64 <_ZN7RailwayD1Ev>
    for(int j = 0; j < railways.size(); j++){
   b68e0:	9b04      	ldr	r3, [sp, #16]
   b68e2:	3301      	adds	r3, #1
   b68e4:	9304      	str	r3, [sp, #16]
   b68e6:	f7ff bba8 	b.w	b603a <loop+0x52>
    Serial.println();
   b68ea:	f003 fa37 	bl	b9d5c <_Z16_fetch_usbserialv>
   b68ee:	f002 fcda 	bl	b92a6 <_ZN5Print7printlnEv>
  Serial.println();
   b68f2:	f003 fa33 	bl	b9d5c <_Z16_fetch_usbserialv>
   b68f6:	f002 fcd6 	bl	b92a6 <_ZN5Print7printlnEv>
  delay(500);
   b68fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
   b68fe:	b039      	add	sp, #228	; 0xe4
   b6900:	ecbd 8b06 	vpop	{d8-d10}
   b6904:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  delay(500);
   b6908:	f001 b8ea 	b.w	b7ae0 <delay>
   b690c:	000bd59c 	.word	0x000bd59c
   b6910:	000bd5a2 	.word	0x000bd5a2
   b6914:	000bd3e3 	.word	0x000bd3e3
   b6918:	000bd436 	.word	0x000bd436
   b691c:	000bd44b 	.word	0x000bd44b
   b6920:	000bd421 	.word	0x000bd421
   b6924:	000bd303 	.word	0x000bd303
   b6928:	000bd5a5 	.word	0x000bd5a5
   b692c:	000bd5ac 	.word	0x000bd5ac
   b6930:	000bd5ba 	.word	0x000bd5ba
   b6934:	3ff80000 	.word	0x3ff80000
   b6938:	2003e698 	.word	0x2003e698

000b693c <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b693c:	b510      	push	{r4, lr}
   b693e:	4604      	mov	r4, r0
   b6940:	f003 f93e 	bl	b9bc0 <_ZN9TCPClientC1Ev>
{

}
   b6944:	4620      	mov	r0, r4
   b6946:	bd10      	pop	{r4, pc}

000b6948 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b6948:	b538      	push	{r3, r4, r5, lr}
   b694a:	4604      	mov	r4, r0
   b694c:	4615      	mov	r5, r2
    client.print(aHeaderName);
   b694e:	f002 fca3 	bl	b9298 <_ZN5Print5printEPKc>
    client.print(": ");
   b6952:	4905      	ldr	r1, [pc, #20]	; (b6968 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   b6954:	4620      	mov	r0, r4
   b6956:	f002 fc9f 	bl	b9298 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b695a:	4629      	mov	r1, r5
   b695c:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b695e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
   b6962:	f002 bcac 	b.w	b92be <_ZN5Print7printlnEPKc>
   b6966:	bf00      	nop
   b6968:	000bd2df 	.word	0x000bd2df

000b696c <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b696c:	b538      	push	{r3, r4, r5, lr}
   b696e:	4605      	mov	r5, r0
   b6970:	4614      	mov	r4, r2
    client.print(aHeaderName);
   b6972:	f002 fc91 	bl	b9298 <_ZN5Print5printEPKc>
    client.print(": ");
   b6976:	490b      	ldr	r1, [pc, #44]	; (b69a4 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   b6978:	4628      	mov	r0, r5
   b697a:	f002 fc8d 	bl	b9298 <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
   b697e:	2c00      	cmp	r4, #0
   b6980:	da0d      	bge.n	b699e <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
   b6982:	212d      	movs	r1, #45	; 0x2d
   b6984:	4628      	mov	r0, r5
   b6986:	f002 fc8b 	bl	b92a0 <_ZN5Print5printEc>
            val = -n;
   b698a:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b698c:	4628      	mov	r0, r5
   b698e:	220a      	movs	r2, #10
   b6990:	f002 fc9f 	bl	b92d2 <_ZN5Print11printNumberEmh>
        n += println();
   b6994:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b6996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b699a:	f002 bc84 	b.w	b92a6 <_ZN5Print7printlnEv>
            val = n;
   b699e:	4621      	mov	r1, r4
   b69a0:	e7f4      	b.n	b698c <_ZN10HttpClient10sendHeaderEPKci+0x20>
   b69a2:	bf00      	nop
   b69a4:	000bd2df 	.word	0x000bd2df

000b69a8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b69a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b69ac:	460e      	mov	r6, r1
   b69ae:	b091      	sub	sp, #68	; 0x44
   b69b0:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b69b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b69b6:	6013      	str	r3, [r2, #0]
{
   b69b8:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b69ba:	2100      	movs	r1, #0
   b69bc:	4630      	mov	r0, r6
   b69be:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b69c2:	4617      	mov	r7, r2
   b69c4:	f002 fdc1 	bl	b954a <_ZNK6String6equalsEPKc>
   b69c8:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b69cc:	4603      	mov	r3, r0
   b69ce:	b998      	cbnz	r0, b69f8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	const char * c_str() const { return buffer; }
   b69d0:	f1be 0f00 	cmp.w	lr, #0
   b69d4:	bf14      	ite	ne
   b69d6:	4672      	movne	r2, lr
   b69d8:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b69da:	6831      	ldr	r1, [r6, #0]
   b69dc:	b292      	uxth	r2, r2
   b69de:	4620      	mov	r0, r4
   b69e0:	f002 feee 	bl	b97c0 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b69e4:	1e05      	subs	r5, r0, #0
   b69e6:	bf18      	it	ne
   b69e8:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   b69ea:	b9c5      	cbnz	r5, b6a1e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   b69ec:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b69ee:	b011      	add	sp, #68	; 0x44
   b69f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b69f4:	f003 b89a 	b.w	b9b2c <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b69f8:	4b76      	ldr	r3, [pc, #472]	; (b6bd4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
   b69fa:	930a      	str	r3, [sp, #40]	; 0x28
   b69fc:	f106 0c14 	add.w	ip, r6, #20
   b6a00:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6a04:	ad0b      	add	r5, sp, #44	; 0x2c
   b6a06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6a08:	f8dc 3000 	ldr.w	r3, [ip]
   b6a0c:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b6a0e:	fa1f f28e 	uxth.w	r2, lr
   b6a12:	2300      	movs	r3, #0
   b6a14:	a90a      	add	r1, sp, #40	; 0x28
   b6a16:	4620      	mov	r0, r4
   b6a18:	f002 ffb2 	bl	b9980 <_ZN9TCPClient7connectE9IPAddresstm>
   b6a1c:	e7e2      	b.n	b69e4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
   b6a1e:	4649      	mov	r1, r9
   b6a20:	4620      	mov	r0, r4
   b6a22:	f002 fc39 	bl	b9298 <_ZN5Print5printEPKc>
    client.print(" ");
   b6a26:	496c      	ldr	r1, [pc, #432]	; (b6bd8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   b6a28:	4620      	mov	r0, r4
   b6a2a:	f002 fc35 	bl	b9298 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b6a2e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b6a30:	4620      	mov	r0, r4
   b6a32:	f002 fc31 	bl	b9298 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b6a36:	4969      	ldr	r1, [pc, #420]	; (b6bdc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   b6a38:	4620      	mov	r0, r4
   b6a3a:	f002 fc2d 	bl	b9298 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b6a3e:	4968      	ldr	r1, [pc, #416]	; (b6be0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
   b6a40:	4a68      	ldr	r2, [pc, #416]	; (b6be4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
   b6a42:	4620      	mov	r0, r4
   b6a44:	f7ff ff80 	bl	b6948 <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b6a48:	2100      	movs	r1, #0
   b6a4a:	4630      	mov	r0, r6
   b6a4c:	f002 fd7d 	bl	b954a <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b6a50:	b920      	cbnz	r0, b6a5c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   b6a52:	6832      	ldr	r2, [r6, #0]
   b6a54:	4964      	ldr	r1, [pc, #400]	; (b6be8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
   b6a56:	4620      	mov	r0, r4
   b6a58:	f7ff ff76 	bl	b6948 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b6a5c:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b6a60:	2100      	movs	r1, #0
   b6a62:	4650      	mov	r0, sl
   b6a64:	f002 fd71 	bl	b954a <_ZNK6String6equalsEPKc>
   b6a68:	b928      	cbnz	r0, b6a76 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
   b6a6a:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b6a6c:	495f      	ldr	r1, [pc, #380]	; (b6bec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
   b6a6e:	4620      	mov	r0, r4
   b6a70:	f7ff ff7c 	bl	b696c <_ZN10HttpClient10sendHeaderEPKci>
   b6a74:	e006      	b.n	b6a84 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b6a76:	495e      	ldr	r1, [pc, #376]	; (b6bf0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
   b6a78:	4648      	mov	r0, r9
   b6a7a:	f004 fbab 	bl	bb1d4 <strcmp>
   b6a7e:	4602      	mov	r2, r0
   b6a80:	2800      	cmp	r0, #0
   b6a82:	d0f3      	beq.n	b6a6c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
   b6a84:	f1b8 0f00 	cmp.w	r8, #0
   b6a88:	d00e      	beq.n	b6aa8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
   b6a8a:	f8d8 1000 	ldr.w	r1, [r8]
   b6a8e:	b159      	cbz	r1, b6aa8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
   b6a90:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
   b6a94:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b6a96:	b122      	cbz	r2, b6aa2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
   b6a98:	f7ff ff56 	bl	b6948 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b6a9c:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
   b6aa0:	e7f3      	b.n	b6a8a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
   b6aa2:	f002 fc0c 	bl	b92be <_ZN5Print7printlnEPKc>
}
   b6aa6:	e7f9      	b.n	b6a9c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
   b6aa8:	4620      	mov	r0, r4
   b6aaa:	f002 fbfc 	bl	b92a6 <_ZN5Print7printlnEv>
    client.flush();
   b6aae:	4620      	mov	r0, r4
   b6ab0:	f002 fde6 	bl	b9680 <_ZN9TCPClient5flushEv>
   b6ab4:	2100      	movs	r1, #0
   b6ab6:	4650      	mov	r0, sl
   b6ab8:	f002 fd47 	bl	b954a <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b6abc:	b918      	cbnz	r0, b6ac6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
   b6abe:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b6ac0:	4620      	mov	r0, r4
   b6ac2:	f002 fbfc 	bl	b92be <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b6ac6:	f104 0a1c 	add.w	sl, r4, #28
   b6aca:	f44f 5220 	mov.w	r2, #10240	; 0x2800
   b6ace:	2100      	movs	r1, #0
   b6ad0:	4650      	mov	r0, sl
   b6ad2:	f004 fb49 	bl	bb168 <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6ad6:	f000 fde7 	bl	b76a8 <HAL_Timer_Get_Milli_Seconds>
   b6ada:	9001      	str	r0, [sp, #4]
   b6adc:	f000 fde4 	bl	b76a8 <HAL_Timer_Get_Milli_Seconds>
    bool error = false;
   b6ae0:	f04f 0800 	mov.w	r8, #0
    unsigned int bufferPosition = 0;
   b6ae4:	4646      	mov	r6, r8
    } while (client.connected() && !timeout && !error);
   b6ae6:	f241 3b88 	movw	fp, #5000	; 0x1388
        while (client.available()) {
   b6aea:	4620      	mov	r0, r4
   b6aec:	f002 ffc4 	bl	b9a78 <_ZN9TCPClient9availableEv>
   b6af0:	b1e8      	cbz	r0, b6b2e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x186>
            char c = client.read();
   b6af2:	4620      	mov	r0, r4
   b6af4:	f002 fdaa 	bl	b964c <_ZN9TCPClient4readEv>
   b6af8:	4681      	mov	r9, r0
   b6afa:	f000 fdd5 	bl	b76a8 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b6afe:	f242 73fe 	movw	r3, #10238	; 0x27fe
   b6b02:	429e      	cmp	r6, r3
   b6b04:	9001      	str	r0, [sp, #4]
   b6b06:	d804      	bhi.n	b6b12 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = c;
   b6b08:	19a3      	adds	r3, r4, r6
            char c = client.read();
   b6b0a:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
   b6b0e:	3601      	adds	r6, #1
        while (client.available()) {
   b6b10:	e7eb      	b.n	b6aea <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b6b12:	f242 73ff 	movw	r3, #10239	; 0x27ff
   b6b16:	429e      	cmp	r6, r3
   b6b18:	d1f9      	bne.n	b6b0e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b6b1a:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
   b6b1e:	2200      	movs	r2, #0
   b6b20:	f883 281b 	strb.w	r2, [r3, #2075]	; 0x81b
                client.stop();
   b6b24:	4620      	mov	r0, r4
   b6b26:	f003 f801 	bl	b9b2c <_ZN9TCPClient4stopEv>
                error = true;
   b6b2a:	46a8      	mov	r8, r5
   b6b2c:	e7ef      	b.n	b6b0e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b6b2e:	19a3      	adds	r3, r4, r6
   b6b30:	7718      	strb	r0, [r3, #28]
   b6b32:	f000 fdb9 	bl	b76a8 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b6b36:	9b01      	ldr	r3, [sp, #4]
   b6b38:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b6b3c:	f1b8 0f00 	cmp.w	r8, #0
   b6b40:	d104      	bne.n	b6b4c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
   b6b42:	45d9      	cmp	r9, fp
   b6b44:	d802      	bhi.n	b6b4c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
            delay(200);
   b6b46:	20c8      	movs	r0, #200	; 0xc8
   b6b48:	f000 ffca 	bl	b7ae0 <delay>
    } while (client.connected() && !timeout && !error);
   b6b4c:	4620      	mov	r0, r4
   b6b4e:	f002 feb5 	bl	b98bc <_ZN9TCPClient9connectedEv>
   b6b52:	b120      	cbz	r0, b6b5e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b6b54:	45d9      	cmp	r9, fp
   b6b56:	d802      	bhi.n	b6b5e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b6b58:	f1b8 0f00 	cmp.w	r8, #0
   b6b5c:	d0c5      	beq.n	b6aea <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
    client.stop();
   b6b5e:	4620      	mov	r0, r4
   b6b60:	f002 ffe4 	bl	b9b2c <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b6b64:	4651      	mov	r1, sl
   b6b66:	a802      	add	r0, sp, #8
   b6b68:	f002 fc53 	bl	b9412 <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b6b6c:	230c      	movs	r3, #12
   b6b6e:	2209      	movs	r2, #9
   b6b70:	a902      	add	r1, sp, #8
   b6b72:	a806      	add	r0, sp, #24
   b6b74:	f002 fd0e 	bl	b9594 <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b6b78:	491e      	ldr	r1, [pc, #120]	; (b6bf4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x24c>)
   b6b7a:	a80a      	add	r0, sp, #40	; 0x28
   b6b7c:	f002 fc49 	bl	b9412 <_ZN6StringC1EPK19__FlashStringHelper>
   b6b80:	a90a      	add	r1, sp, #40	; 0x28
   b6b82:	a802      	add	r0, sp, #8
   b6b84:	f002 fd02 	bl	b958c <_ZNK6String7indexOfERKS_>
   b6b88:	4604      	mov	r4, r0
   b6b8a:	a80a      	add	r0, sp, #40	; 0x28
   b6b8c:	f002 fbf6 	bl	b937c <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b6b90:	1c63      	adds	r3, r4, #1
   b6b92:	d108      	bne.n	b6ba6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fe>
    String statusCode = raw_response.substring(9,12);
   b6b94:	a806      	add	r0, sp, #24
   b6b96:	f002 fbf1 	bl	b937c <_ZN6StringD1Ev>
    String raw_response(buffer);
   b6b9a:	a802      	add	r0, sp, #8
   b6b9c:	f002 fbee 	bl	b937c <_ZN6StringD1Ev>
}
   b6ba0:	b011      	add	sp, #68	; 0x44
   b6ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aResponse.body = "";
   b6ba6:	1d3d      	adds	r5, r7, #4
   b6ba8:	4913      	ldr	r1, [pc, #76]	; (b6bf8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x250>)
   b6baa:	4628      	mov	r0, r5
   b6bac:	f002 fc5f 	bl	b946e <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b6bb0:	1d22      	adds	r2, r4, #4
   b6bb2:	a902      	add	r1, sp, #8
   b6bb4:	a80a      	add	r0, sp, #40	; 0x28
   b6bb6:	f002 fd0d 	bl	b95d4 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b6bba:	a90a      	add	r1, sp, #40	; 0x28
   b6bbc:	4628      	mov	r0, r5
   b6bbe:	f002 fc92 	bl	b94e6 <_ZN6String6concatERKS_>
   b6bc2:	a80a      	add	r0, sp, #40	; 0x28
   b6bc4:	f002 fbda 	bl	b937c <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b6bc8:	9806      	ldr	r0, [sp, #24]
   b6bca:	f004 fa91 	bl	bb0f0 <atoi>
   b6bce:	6038      	str	r0, [r7, #0]
   b6bd0:	e7e0      	b.n	b6b94 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ec>
   b6bd2:	bf00      	nop
   b6bd4:	000bd960 	.word	0x000bd960
   b6bd8:	000bd4f1 	.word	0x000bd4f1
   b6bdc:	000bd6a4 	.word	0x000bd6a4
   b6be0:	000bd6b6 	.word	0x000bd6b6
   b6be4:	000bd6b0 	.word	0x000bd6b0
   b6be8:	000bd6c1 	.word	0x000bd6c1
   b6bec:	000bd6c6 	.word	0x000bd6c6
   b6bf0:	000bd6d5 	.word	0x000bd6d5
   b6bf4:	000bd6da 	.word	0x000bd6da
   b6bf8:	000bd6de 	.word	0x000bd6de

000b6bfc <_ZN13JsonReferenceD1Ev>:
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
}
   b6bfc:	4770      	bx	lr

000b6bfe <_ZN13JsonReferenceD0Ev>:
JsonReference::~JsonReference() {
   b6bfe:	b510      	push	{r4, lr}
}
   b6c00:	210c      	movs	r1, #12
JsonReference::~JsonReference() {
   b6c02:	4604      	mov	r4, r0
}
   b6c04:	f7fd fa4d 	bl	b40a2 <_ZdlPvj>
   b6c08:	4620      	mov	r0, r4
   b6c0a:	bd10      	pop	{r4, pc}

000b6c0c <_ZN10JsonBufferD1Ev>:
JsonBuffer::~JsonBuffer() {
   b6c0c:	b510      	push	{r4, lr}
   b6c0e:	4b05      	ldr	r3, [pc, #20]	; (b6c24 <_ZN10JsonBufferD1Ev+0x18>)
   b6c10:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b6c12:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b6c14:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b6c16:	b91b      	cbnz	r3, b6c20 <_ZN10JsonBufferD1Ev+0x14>
   b6c18:	6840      	ldr	r0, [r0, #4]
   b6c1a:	b108      	cbz	r0, b6c20 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b6c1c:	f000 ff18 	bl	b7a50 <free>
}
   b6c20:	4620      	mov	r0, r4
   b6c22:	bd10      	pop	{r4, pc}
   b6c24:	000bd6ec 	.word	0x000bd6ec

000b6c28 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b6c28:	b510      	push	{r4, lr}
   b6c2a:	4604      	mov	r4, r0
}
   b6c2c:	f7ff ffee 	bl	b6c0c <_ZN10JsonBufferD1Ev>
   b6c30:	4620      	mov	r0, r4
   b6c32:	2114      	movs	r1, #20
   b6c34:	f7fd fa35 	bl	b40a2 <_ZdlPvj>
   b6c38:	4620      	mov	r0, r4
   b6c3a:	bd10      	pop	{r4, pc}

000b6c3c <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b6c3c:	b510      	push	{r4, lr}
   b6c3e:	4b07      	ldr	r3, [pc, #28]	; (b6c5c <_ZN10JsonParserD1Ev+0x20>)
   b6c40:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b6c42:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b6c44:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b6c46:	b91b      	cbnz	r3, b6c50 <_ZN10JsonParserD1Ev+0x14>
   b6c48:	6940      	ldr	r0, [r0, #20]
   b6c4a:	b108      	cbz	r0, b6c50 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b6c4c:	f000 ff00 	bl	b7a50 <free>
JsonParser::~JsonParser() {
   b6c50:	4620      	mov	r0, r4
   b6c52:	f7ff ffdb 	bl	b6c0c <_ZN10JsonBufferD1Ev>
}
   b6c56:	4620      	mov	r0, r4
   b6c58:	bd10      	pop	{r4, pc}
   b6c5a:	bf00      	nop
   b6c5c:	000bd6fc 	.word	0x000bd6fc

000b6c60 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b6c60:	b510      	push	{r4, lr}
   b6c62:	4604      	mov	r4, r0
}
   b6c64:	f7ff ffea 	bl	b6c3c <_ZN10JsonParserD1Ev>
   b6c68:	4620      	mov	r0, r4
   b6c6a:	212c      	movs	r1, #44	; 0x2c
   b6c6c:	f7fd fa19 	bl	b40a2 <_ZdlPvj>
   b6c70:	4620      	mov	r0, r4
   b6c72:	bd10      	pop	{r4, pc}

000b6c74 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b6c74:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b6c76:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b6c78:	4604      	mov	r4, r0
   b6c7a:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b6c7c:	b10b      	cbz	r3, b6c82 <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b6c7e:	2000      	movs	r0, #0
}
   b6c80:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b6c82:	6840      	ldr	r0, [r0, #4]
   b6c84:	b138      	cbz	r0, b6c96 <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b6c86:	f000 feeb 	bl	b7a60 <realloc>
		if (newBuffer) {
   b6c8a:	2800      	cmp	r0, #0
   b6c8c:	d0f7      	beq.n	b6c7e <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b6c8e:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b6c92:	2001      	movs	r0, #1
   b6c94:	e7f4      	b.n	b6c80 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b6c96:	4608      	mov	r0, r1
   b6c98:	f000 fed2 	bl	b7a40 <malloc>
   b6c9c:	e7f5      	b.n	b6c8a <_ZN10JsonBuffer8allocateEj+0x16>

000b6c9e <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b6c9e:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b6ca0:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b6ca2:	460e      	mov	r6, r1
   b6ca4:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b6ca6:	18d1      	adds	r1, r2, r3
   b6ca8:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b6caa:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b6cac:	b172      	cbz	r2, b6ccc <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b6cae:	6882      	ldr	r2, [r0, #8]
   b6cb0:	428a      	cmp	r2, r1
   b6cb2:	d30b      	bcc.n	b6ccc <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b6cb4:	6860      	ldr	r0, [r4, #4]
   b6cb6:	68e3      	ldr	r3, [r4, #12]
   b6cb8:	462a      	mov	r2, r5
   b6cba:	4631      	mov	r1, r6
   b6cbc:	4418      	add	r0, r3
   b6cbe:	f004 fa2b 	bl	bb118 <memcpy>
	offset += dataLen;
   b6cc2:	68e2      	ldr	r2, [r4, #12]
   b6cc4:	442a      	add	r2, r5
   b6cc6:	60e2      	str	r2, [r4, #12]
	return true;
   b6cc8:	2001      	movs	r0, #1
}
   b6cca:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b6ccc:	4620      	mov	r0, r4
   b6cce:	f7ff ffd1 	bl	b6c74 <_ZN10JsonBuffer8allocateEj>
   b6cd2:	2800      	cmp	r0, #0
   b6cd4:	d1ee      	bne.n	b6cb4 <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b6cd6:	e7f8      	b.n	b6cca <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b6cd8 <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b6cd8:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b6cda:	2100      	movs	r1, #0
   b6cdc:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b6cde:	b123      	cbz	r3, b6cea <_ZN10JsonBuffer5clearEv+0x12>
   b6ce0:	6882      	ldr	r2, [r0, #8]
   b6ce2:	b112      	cbz	r2, b6cea <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b6ce4:	4618      	mov	r0, r3
   b6ce6:	f004 ba3f 	b.w	bb168 <memset>
}
   b6cea:	4770      	bx	lr

000b6cec <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b6cec:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b6cee:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b6cf2:	2200      	movs	r2, #0
   b6cf4:	60c2      	str	r2, [r0, #12]
   b6cf6:	2201      	movs	r2, #1
   b6cf8:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b6cfa:	6143      	str	r3, [r0, #20]
   b6cfc:	4a02      	ldr	r2, [pc, #8]	; (b6d08 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b6cfe:	9b02      	ldr	r3, [sp, #8]
   b6d00:	6002      	str	r2, [r0, #0]
   b6d02:	61c3      	str	r3, [r0, #28]
}
   b6d04:	bd10      	pop	{r4, pc}
   b6d06:	bf00      	nop
   b6d08:	000bd6fc 	.word	0x000bd6fc

000b6d0c <_ZNK10JsonParser12getReferenceEv>:
	if (tokens < tokensEnd) {
   b6d0c:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   b6d10:	429a      	cmp	r2, r3
   b6d12:	4b04      	ldr	r3, [pc, #16]	; (b6d24 <_ZNK10JsonParser12getReferenceEv+0x18>)

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b6d14:	bf38      	it	cc
   b6d16:	6082      	strcc	r2, [r0, #8]
   b6d18:	e9c0 3100 	strd	r3, r1, [r0]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b6d1c:	bf24      	itt	cs
   b6d1e:	2300      	movcs	r3, #0
   b6d20:	6083      	strcs	r3, [r0, #8]
}
   b6d22:	4770      	bx	lr
   b6d24:	000bd70c 	.word	0x000bd70c

000b6d28 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b6d28:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b6d2a:	6813      	ldr	r3, [r2, #0]
   b6d2c:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b6d2e:	6813      	ldr	r3, [r2, #0]
   b6d30:	f103 0410 	add.w	r4, r3, #16
   b6d34:	6014      	str	r4, [r2, #0]
   b6d36:	6986      	ldr	r6, [r0, #24]
   b6d38:	42b4      	cmp	r4, r6
   b6d3a:	d20a      	bcs.n	b6d52 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b6d3c:	699b      	ldr	r3, [r3, #24]
   b6d3e:	688c      	ldr	r4, [r1, #8]
   b6d40:	42a3      	cmp	r3, r4
   b6d42:	da01      	bge.n	b6d48 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b6d44:	42ab      	cmp	r3, r5
   b6d46:	ddf2      	ble.n	b6d2e <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b6d48:	42a3      	cmp	r3, r4
   b6d4a:	bfcc      	ite	gt
   b6d4c:	2000      	movgt	r0, #0
   b6d4e:	2001      	movle	r0, #1
   b6d50:	e000      	b.n	b6d54 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b6d52:	2000      	movs	r0, #0
}
   b6d54:	bd70      	pop	{r4, r5, r6, pc}

000b6d56 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b6d56:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6d5a:	9d08      	ldr	r5, [sp, #32]
   b6d5c:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b6d5e:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b6d62:	4604      	mov	r4, r0
   b6d64:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b6d66:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b6d68:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b6d6a:	9801      	ldr	r0, [sp, #4]
   b6d6c:	69a3      	ldr	r3, [r4, #24]
   b6d6e:	4283      	cmp	r3, r0
   b6d70:	d91a      	bls.n	b6da8 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b6d72:	6882      	ldr	r2, [r0, #8]
   b6d74:	688b      	ldr	r3, [r1, #8]
   b6d76:	429a      	cmp	r2, r3
   b6d78:	da16      	bge.n	b6da8 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b6d7a:	42ae      	cmp	r6, r5
   b6d7c:	d10b      	bne.n	b6d96 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b6d7e:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b6d80:	aa01      	add	r2, sp, #4
   b6d82:	4620      	mov	r0, r4
   b6d84:	f7ff ffd0 	bl	b6d28 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b6d88:	b128      	cbz	r0, b6d96 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b6d8a:	9b01      	ldr	r3, [sp, #4]
   b6d8c:	f8c8 3000 	str.w	r3, [r8]
}
   b6d90:	b002      	add	sp, #8
   b6d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b6d96:	aa01      	add	r2, sp, #4
   b6d98:	4620      	mov	r0, r4
   b6d9a:	f7ff ffc5 	bl	b6d28 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b6d9e:	4620      	mov	r0, r4
		index++;
   b6da0:	3601      	adds	r6, #1
		skipObject(container, token);
   b6da2:	f7ff ffc1 	bl	b6d28 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b6da6:	e7e0      	b.n	b6d6a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b6da8:	2000      	movs	r0, #0
   b6daa:	e7f1      	b.n	b6d90 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b6dac <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>:
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b6dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6dae:	461f      	mov	r7, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b6db0:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b6db4:	4604      	mov	r4, r0
   b6db6:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b6db8:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b6dba:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b6dbc:	9b01      	ldr	r3, [sp, #4]
   b6dbe:	69a2      	ldr	r2, [r4, #24]
   b6dc0:	429a      	cmp	r2, r3
   b6dc2:	d90f      	bls.n	b6de4 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
   b6dc4:	6898      	ldr	r0, [r3, #8]
   b6dc6:	688a      	ldr	r2, [r1, #8]
   b6dc8:	4290      	cmp	r0, r2
   b6dca:	da0b      	bge.n	b6de4 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
		if (desiredIndex == index) {
   b6dcc:	42b5      	cmp	r5, r6
   b6dce:	d103      	bne.n	b6dd8 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x2c>
			value = token;
   b6dd0:	603b      	str	r3, [r7, #0]
			return true;
   b6dd2:	2001      	movs	r0, #1
}
   b6dd4:	b003      	add	sp, #12
   b6dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		skipObject(container, token);
   b6dd8:	aa01      	add	r2, sp, #4
   b6dda:	4620      	mov	r0, r4
		index++;
   b6ddc:	3501      	adds	r5, #1
		skipObject(container, token);
   b6dde:	f7ff ffa3 	bl	b6d28 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b6de2:	e7eb      	b.n	b6dbc <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x10>
	return false;
   b6de4:	2000      	movs	r0, #0
   b6de6:	e7f5      	b.n	b6dd4 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x28>

000b6de8 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
   b6de8:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b6dea:	3b01      	subs	r3, #1
   b6dec:	2400      	movs	r4, #0
   b6dee:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
   b6df2:	1bf6      	subs	r6, r6, r7
   b6df4:	42a6      	cmp	r6, r4
   b6df6:	dd08      	ble.n	b6e0a <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
   b6df8:	42a3      	cmp	r3, r4
   b6dfa:	dd06      	ble.n	b6e0a <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
   b6dfc:	6845      	ldr	r5, [r0, #4]
   b6dfe:	443d      	add	r5, r7
   b6e00:	5d2d      	ldrb	r5, [r5, r4]
   b6e02:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b6e06:	3401      	adds	r4, #1
   b6e08:	e7f1      	b.n	b6dee <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
   b6e0a:	2300      	movs	r3, #0
   b6e0c:	7013      	strb	r3, [r2, #0]
}
   b6e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6e10 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
   b6e10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6e12:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b6e14:	2310      	movs	r3, #16
   b6e16:	466a      	mov	r2, sp
   b6e18:	f7ff ffe6 	bl	b6de8 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
   b6e1c:	4904      	ldr	r1, [pc, #16]	; (b6e30 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
   b6e1e:	4622      	mov	r2, r4
   b6e20:	4668      	mov	r0, sp
   b6e22:	f000 fe25 	bl	b7a70 <sscanf>
}
   b6e26:	1e43      	subs	r3, r0, #1
   b6e28:	4258      	negs	r0, r3
   b6e2a:	4158      	adcs	r0, r3
   b6e2c:	b004      	add	sp, #16
   b6e2e:	bd10      	pop	{r4, pc}
   b6e30:	000bd9c0 	.word	0x000bd9c0

000b6e34 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, float &result) const {
   b6e34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6e36:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b6e38:	2310      	movs	r3, #16
   b6e3a:	466a      	mov	r2, sp
   b6e3c:	f7ff ffd4 	bl	b6de8 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	result = strtof(tmp, 0);
   b6e40:	4668      	mov	r0, sp
   b6e42:	2100      	movs	r1, #0
   b6e44:	f005 f83a 	bl	bbebc <strtof>
}
   b6e48:	2001      	movs	r0, #1
	result = strtof(tmp, 0);
   b6e4a:	ed84 0a00 	vstr	s0, [r4]
}
   b6e4e:	b004      	add	sp, #16
   b6e50:	bd10      	pop	{r4, pc}
	...

000b6e54 <_ZNK13JsonReference5indexEj>:
	else {
		return JsonReference(parser);
	}
}

JsonReference JsonReference::index(size_t index) const {
   b6e54:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6e56:	460d      	mov	r5, r1
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b6e58:	6889      	ldr	r1, [r1, #8]
   b6e5a:	4e0a      	ldr	r6, [pc, #40]	; (b6e84 <_ZNK13JsonReference5indexEj+0x30>)
JsonReference JsonReference::index(size_t index) const {
   b6e5c:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b6e5e:	b161      	cbz	r1, b6e7a <_ZNK13JsonReference5indexEj+0x26>
   b6e60:	6868      	ldr	r0, [r5, #4]
   b6e62:	ab01      	add	r3, sp, #4
   b6e64:	f7ff ffa2 	bl	b6dac <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>
   b6e68:	b138      	cbz	r0, b6e7a <_ZNK13JsonReference5indexEj+0x26>
		return JsonReference(parser, newToken);
   b6e6a:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b6e6c:	e9c4 6300 	strd	r6, r3, [r4]
   b6e70:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b6e72:	60a3      	str	r3, [r4, #8]
	}
	else {
		return JsonReference(parser);
	}
}
   b6e74:	4620      	mov	r0, r4
   b6e76:	b002      	add	sp, #8
   b6e78:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b6e7a:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b6e7c:	e9c4 6300 	strd	r6, r3, [r4]
   b6e80:	2300      	movs	r3, #0
   b6e82:	e7f6      	b.n	b6e72 <_ZNK13JsonReference5indexEj+0x1e>
   b6e84:	000bd70c 	.word	0x000bd70c

000b6e88 <_ZNK13JsonReference8valueIntEi>:
bool JsonReference::valueBool(bool result) const {
	(void) value(result);
	return result;
}

int JsonReference::valueInt(int result) const {
   b6e88:	b507      	push	{r0, r1, r2, lr}
   b6e8a:	9101      	str	r1, [sp, #4]
	 * There are also type-specific versions like valueBool that return the value, instead of having to pass an object
	 * to hold the value, as in this call.
	 */
	template<class T>
	bool value(T &result) const {
		if (token && parser->getTokenValue(token, result)) {
   b6e8c:	6881      	ldr	r1, [r0, #8]
   b6e8e:	b119      	cbz	r1, b6e98 <_ZNK13JsonReference8valueIntEi+0x10>
   b6e90:	6840      	ldr	r0, [r0, #4]
   b6e92:	aa01      	add	r2, sp, #4
   b6e94:	f7ff ffbc 	bl	b6e10 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
	(void) value(result);
	return result;
}
   b6e98:	9801      	ldr	r0, [sp, #4]
   b6e9a:	b003      	add	sp, #12
   b6e9c:	f85d fb04 	ldr.w	pc, [sp], #4

000b6ea0 <_ZNK13JsonReference10valueFloatEf>:
unsigned long JsonReference::valueUnsignedLong(unsigned long result) const {
	(void) value(result);
	return result;
}

float JsonReference::valueFloat(float result) const {
   b6ea0:	b507      	push	{r0, r1, r2, lr}
   b6ea2:	6881      	ldr	r1, [r0, #8]
   b6ea4:	ed8d 0a01 	vstr	s0, [sp, #4]
   b6ea8:	b119      	cbz	r1, b6eb2 <_ZNK13JsonReference10valueFloatEf+0x12>
   b6eaa:	6840      	ldr	r0, [r0, #4]
   b6eac:	aa01      	add	r2, sp, #4
   b6eae:	f7ff ffc1 	bl	b6e34 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>
	(void) value(result);
	return result;
}
   b6eb2:	ed9d 0a01 	vldr	s0, [sp, #4]
   b6eb6:	b003      	add	sp, #12
   b6eb8:	f85d fb04 	ldr.w	pc, [sp], #4

000b6ebc <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   b6ebc:	b510      	push	{r4, lr}
   b6ebe:	4604      	mov	r4, r0
	if (str) {
   b6ec0:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b6ec2:	460b      	mov	r3, r1
	if (str) {
   b6ec4:	b128      	cbz	r0, b6ed2 <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b6ec6:	f002 fb12 	bl	b94ee <_ZN6String6concatEc>
	}
	else {
		if (buf && length < (bufLen - 1)) {
			buf[length] = ch;
		}
		length++;
   b6eca:	68e3      	ldr	r3, [r4, #12]
   b6ecc:	3301      	adds	r3, #1
   b6ece:	60e3      	str	r3, [r4, #12]
	}
}
   b6ed0:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b6ed2:	6860      	ldr	r0, [r4, #4]
   b6ed4:	2800      	cmp	r0, #0
   b6ed6:	d0f8      	beq.n	b6eca <_ZN16JsonParserString6appendEc+0xe>
   b6ed8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b6edc:	3a01      	subs	r2, #1
   b6ede:	428a      	cmp	r2, r1
			buf[length] = ch;
   b6ee0:	bf88      	it	hi
   b6ee2:	5443      	strbhi	r3, [r0, r1]
   b6ee4:	e7f1      	b.n	b6eca <_ZN16JsonParserString6appendEc+0xe>

000b6ee6 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b6ee6:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b6ee8:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b6eea:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6eec:	4608      	mov	r0, r1
		str.append((char)unicode);
   b6eee:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b6ef0:	d804      	bhi.n	b6efc <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b6ef2:	b003      	add	sp, #12
   b6ef4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b6ef8:	f7ff bfe0 	b.w	b6ebc <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b6efc:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b6f00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b6f04:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b6f08:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b6f0c:	d207      	bcs.n	b6f1e <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b6f0e:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b6f12:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b6f14:	f7ff ffd2 	bl	b6ebc <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b6f18:	9801      	ldr	r0, [sp, #4]
   b6f1a:	4621      	mov	r1, r4
   b6f1c:	e7e9      	b.n	b6ef2 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b6f1e:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b6f20:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b6f24:	9001      	str	r0, [sp, #4]
   b6f26:	f7ff ffc9 	bl	b6ebc <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b6f2a:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b6f2e:	9801      	ldr	r0, [sp, #4]
   b6f30:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b6f34:	e7ee      	b.n	b6f14 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>
	...

000b6f38 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b6f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b6f3c:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b6f3e:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b6f40:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b7010 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b6f44:	4680      	mov	r8, r0
   b6f46:	460f      	mov	r7, r1
   b6f48:	4615      	mov	r5, r2
			escape = false;
   b6f4a:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b6f4c:	68b8      	ldr	r0, [r7, #8]
   b6f4e:	42b0      	cmp	r0, r6
   b6f50:	dd5a      	ble.n	b7008 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b6f52:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b6f56:	5d99      	ldrb	r1, [r3, r6]
   b6f58:	199a      	adds	r2, r3, r6
		if (escape) {
   b6f5a:	2c00      	cmp	r4, #0
   b6f5c:	d04b      	beq.n	b6ff6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b6f5e:	2975      	cmp	r1, #117	; 0x75
   b6f60:	d805      	bhi.n	b6f6e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b6f62:	296d      	cmp	r1, #109	; 0x6d
   b6f64:	d807      	bhi.n	b6f76 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b6f66:	2962      	cmp	r1, #98	; 0x62
   b6f68:	d01e      	beq.n	b6fa8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b6f6a:	2966      	cmp	r1, #102	; 0x66
   b6f6c:	d01e      	beq.n	b6fac <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b6f6e:	4628      	mov	r0, r5
   b6f70:	f7ff ffa4 	bl	b6ebc <_ZN16JsonParserString6appendEc>
				break;
   b6f74:	e03d      	b.n	b6ff2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b6f76:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b6f7a:	2c07      	cmp	r4, #7
   b6f7c:	d8f7      	bhi.n	b6f6e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b6f7e:	f20f 0c08 	addw	ip, pc, #8
   b6f82:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b6f86:	bf00      	nop
   b6f88:	000b6fb1 	.word	0x000b6fb1
   b6f8c:	000b6f6f 	.word	0x000b6f6f
   b6f90:	000b6f6f 	.word	0x000b6f6f
   b6f94:	000b6f6f 	.word	0x000b6f6f
   b6f98:	000b6fb5 	.word	0x000b6fb5
   b6f9c:	000b6f6f 	.word	0x000b6f6f
   b6fa0:	000b6fb9 	.word	0x000b6fb9
   b6fa4:	000b6fbd 	.word	0x000b6fbd
				str.append('\b');
   b6fa8:	2108      	movs	r1, #8
   b6faa:	e7e0      	b.n	b6f6e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b6fac:	210c      	movs	r1, #12
   b6fae:	e7de      	b.n	b6f6e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b6fb0:	210a      	movs	r1, #10
   b6fb2:	e7dc      	b.n	b6f6e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b6fb4:	210d      	movs	r1, #13
   b6fb6:	e7da      	b.n	b6f6e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b6fb8:	2109      	movs	r1, #9
   b6fba:	e7d8      	b.n	b6f6e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b6fbc:	1d31      	adds	r1, r6, #4
   b6fbe:	4288      	cmp	r0, r1
   b6fc0:	dd17      	ble.n	b6ff2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b6fc2:	a902      	add	r1, sp, #8
   b6fc4:	3304      	adds	r3, #4
   b6fc6:	4433      	add	r3, r6
   b6fc8:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b6fca:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b6fce:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b6fd2:	429a      	cmp	r2, r3
   b6fd4:	d1f9      	bne.n	b6fca <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b6fd6:	aa01      	add	r2, sp, #4
   b6fd8:	4651      	mov	r1, sl
					tmp[4] = 0;
   b6fda:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b6fde:	f000 fd47 	bl	b7a70 <sscanf>
   b6fe2:	2801      	cmp	r0, #1
   b6fe4:	d105      	bne.n	b6ff2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b6fe6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b6fea:	4629      	mov	r1, r5
   b6fec:	f7ff ff7b 	bl	b6ee6 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b6ff0:	3605      	adds	r6, #5
			escape = false;
   b6ff2:	2400      	movs	r4, #0
   b6ff4:	e004      	b.n	b7000 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b6ff6:	295c      	cmp	r1, #92	; 0x5c
   b6ff8:	d004      	beq.n	b7004 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b6ffa:	4628      	mov	r0, r5
   b6ffc:	f7ff ff5e 	bl	b6ebc <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b7000:	3601      	adds	r6, #1
   b7002:	e7a3      	b.n	b6f4c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b7004:	2401      	movs	r4, #1
   b7006:	e7fb      	b.n	b7000 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b7008:	2001      	movs	r0, #1
   b700a:	b004      	add	sp, #16
   b700c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7010:	000bd6df 	.word	0x000bd6df

000b7014 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b7014:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7016:	460c      	mov	r4, r1
   b7018:	4606      	mov	r6, r0
	result = "";
   b701a:	490c      	ldr	r1, [pc, #48]	; (b704c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b701c:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b701e:	4615      	mov	r5, r2
	result = "";
   b7020:	f002 fa25 	bl	b946e <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b7024:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b7028:	1ac9      	subs	r1, r1, r3
   b702a:	3101      	adds	r1, #1
   b702c:	4628      	mov	r0, r5
   b702e:	f002 f9c3 	bl	b93b8 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b7032:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b7034:	466a      	mov	r2, sp
   b7036:	4621      	mov	r1, r4
   b7038:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b703a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b703e:	9500      	str	r5, [sp, #0]
   b7040:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b7042:	f7ff ff79 	bl	b6f38 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b7046:	b004      	add	sp, #16
   b7048:	bd70      	pop	{r4, r5, r6, pc}
   b704a:	bf00      	nop
   b704c:	000bd6de 	.word	0x000bd6de

000b7050 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b7050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7054:	b089      	sub	sp, #36	; 0x24
   b7056:	4605      	mov	r5, r0
   b7058:	4688      	mov	r8, r1
	String keyName;
   b705a:	a804      	add	r0, sp, #16
   b705c:	4912      	ldr	r1, [pc, #72]	; (b70a8 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b705e:	4616      	mov	r6, r2
   b7060:	4699      	mov	r9, r3
	String keyName;
   b7062:	f002 f9d6 	bl	b9412 <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b7066:	2700      	movs	r7, #0
   b7068:	9700      	str	r7, [sp, #0]
   b706a:	464b      	mov	r3, r9
   b706c:	aa03      	add	r2, sp, #12
   b706e:	4641      	mov	r1, r8
   b7070:	4628      	mov	r0, r5
   b7072:	f7ff fe70 	bl	b6d56 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b7076:	4604      	mov	r4, r0
   b7078:	b170      	cbz	r0, b7098 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b707a:	9903      	ldr	r1, [sp, #12]
   b707c:	aa04      	add	r2, sp, #16
   b707e:	4628      	mov	r0, r5
   b7080:	f7ff ffc8 	bl	b7014 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b7084:	4604      	mov	r4, r0
   b7086:	b908      	cbnz	r0, b708c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b7088:	3701      	adds	r7, #1
   b708a:	e7ed      	b.n	b7068 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b708c:	4631      	mov	r1, r6
   b708e:	a804      	add	r0, sp, #16
   b7090:	f002 fa5b 	bl	b954a <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b7094:	2800      	cmp	r0, #0
   b7096:	d0f7      	beq.n	b7088 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b7098:	a804      	add	r0, sp, #16
   b709a:	f002 f96f 	bl	b937c <_ZN6StringD1Ev>
}
   b709e:	4620      	mov	r0, r4
   b70a0:	b009      	add	sp, #36	; 0x24
   b70a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b70a6:	bf00      	nop
   b70a8:	000bd6de 	.word	0x000bd6de

000b70ac <_ZNK13JsonReference3keyEPKc>:
JsonReference JsonReference::key(const char *name) const {
   b70ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b70ae:	460d      	mov	r5, r1
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b70b0:	6889      	ldr	r1, [r1, #8]
   b70b2:	4e0a      	ldr	r6, [pc, #40]	; (b70dc <_ZNK13JsonReference3keyEPKc+0x30>)
JsonReference JsonReference::key(const char *name) const {
   b70b4:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b70b6:	b161      	cbz	r1, b70d2 <_ZNK13JsonReference3keyEPKc+0x26>
   b70b8:	6868      	ldr	r0, [r5, #4]
   b70ba:	ab01      	add	r3, sp, #4
   b70bc:	f7ff ffc8 	bl	b7050 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b70c0:	b138      	cbz	r0, b70d2 <_ZNK13JsonReference3keyEPKc+0x26>
		return JsonReference(parser, newToken);
   b70c2:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b70c4:	e9c4 6300 	strd	r6, r3, [r4]
   b70c8:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b70ca:	60a3      	str	r3, [r4, #8]
}
   b70cc:	4620      	mov	r0, r4
   b70ce:	b002      	add	sp, #8
   b70d0:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b70d2:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b70d4:	e9c4 6300 	strd	r6, r3, [r4]
   b70d8:	2300      	movs	r3, #0
   b70da:	e7f6      	b.n	b70ca <_ZNK13JsonReference3keyEPKc+0x1e>
   b70dc:	000bd70c 	.word	0x000bd70c

000b70e0 <_ZNK13JsonReference11valueStringEv>:
String JsonReference::valueString() const {
   b70e0:	b538      	push	{r3, r4, r5, lr}
   b70e2:	460d      	mov	r5, r1
	String result;
   b70e4:	4905      	ldr	r1, [pc, #20]	; (b70fc <_ZNK13JsonReference11valueStringEv+0x1c>)
String JsonReference::valueString() const {
   b70e6:	4604      	mov	r4, r0
	String result;
   b70e8:	f002 f993 	bl	b9412 <_ZN6StringC1EPK19__FlashStringHelper>
   b70ec:	68a9      	ldr	r1, [r5, #8]
   b70ee:	b119      	cbz	r1, b70f8 <_ZNK13JsonReference11valueStringEv+0x18>
   b70f0:	6868      	ldr	r0, [r5, #4]
   b70f2:	4622      	mov	r2, r4
   b70f4:	f7ff ff8e 	bl	b7014 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
}
   b70f8:	4620      	mov	r0, r4
   b70fa:	bd38      	pop	{r3, r4, r5, pc}
   b70fc:	000bd6de 	.word	0x000bd6de

000b7100 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b7100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b7104:	6844      	ldr	r4, [r0, #4]
   b7106:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b710a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b710e:	f8d0 e000 	ldr.w	lr, [r0]
   b7112:	4596      	cmp	lr, r2
   b7114:	f080 81b9 	bcs.w	b748a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b7118:	f811 800e 	ldrb.w	r8, [r1, lr]
   b711c:	f1b8 0f00 	cmp.w	r8, #0
   b7120:	f000 81b3 	beq.w	b748a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b7124:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b7128:	f000 8098 	beq.w	b725c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b712c:	d833      	bhi.n	b7196 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b712e:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b7132:	f000 80a6 	beq.w	b7282 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b7136:	d810      	bhi.n	b715a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b7138:	f1a8 0809 	sub.w	r8, r8, #9
   b713c:	fa5f f888 	uxtb.w	r8, r8
   b7140:	f1b8 0f17 	cmp.w	r8, #23
   b7144:	d80d      	bhi.n	b7162 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b7146:	4d9f      	ldr	r5, [pc, #636]	; (b73c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b7148:	fa0c f808 	lsl.w	r8, ip, r8
   b714c:	ea18 0f05 	tst.w	r8, r5
   b7150:	d007      	beq.n	b7162 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b7152:	6805      	ldr	r5, [r0, #0]
   b7154:	3501      	adds	r5, #1
   b7156:	6005      	str	r5, [r0, #0]
   b7158:	e7d9      	b.n	b710e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b715a:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b715e:	f000 8133 	beq.w	b73c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b7162:	f8d0 8000 	ldr.w	r8, [r0]
   b7166:	4542      	cmp	r2, r8
   b7168:	d90e      	bls.n	b7188 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b716a:	f811 5008 	ldrb.w	r5, [r1, r8]
   b716e:	b15d      	cbz	r5, b7188 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b7170:	2d3a      	cmp	r5, #58	; 0x3a
   b7172:	f200 8169 	bhi.w	b7448 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b7176:	2d1f      	cmp	r5, #31
   b7178:	f200 8151 	bhi.w	b741e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b717c:	2d0a      	cmp	r5, #10
   b717e:	f200 8160 	bhi.w	b7442 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b7182:	2d08      	cmp	r5, #8
   b7184:	f240 8156 	bls.w	b7434 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b7188:	2b00      	cmp	r3, #0
   b718a:	f040 8162 	bne.w	b7452 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b718e:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b7192:	6005      	str	r5, [r0, #0]
   b7194:	e0a5      	b.n	b72e2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b7196:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b719a:	d037      	beq.n	b720c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b719c:	d82e      	bhi.n	b71fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b719e:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b71a2:	d033      	beq.n	b720c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b71a4:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b71a8:	d1db      	bne.n	b7162 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b71aa:	2b00      	cmp	r3, #0
   b71ac:	d0d1      	beq.n	b7152 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b71ae:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b71b2:	6845      	ldr	r5, [r0, #4]
   b71b4:	3d01      	subs	r5, #1
   b71b6:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b71ba:	2d00      	cmp	r5, #0
   b71bc:	db55      	blt.n	b726a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b71be:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b71c2:	3701      	adds	r7, #1
   b71c4:	d04d      	beq.n	b7262 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b71c6:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b71ca:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b71ce:	d148      	bne.n	b7262 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b71d0:	f898 b000 	ldrb.w	fp, [r8]
   b71d4:	45cb      	cmp	fp, r9
   b71d6:	d14b      	bne.n	b7270 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b71d8:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b71dc:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b71e0:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b71e4:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b71e8:	f8de 7004 	ldr.w	r7, [lr, #4]
   b71ec:	3701      	adds	r7, #1
   b71ee:	d042      	beq.n	b7276 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b71f0:	f8de 7008 	ldr.w	r7, [lr, #8]
   b71f4:	3701      	adds	r7, #1
   b71f6:	d13e      	bne.n	b7276 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b71f8:	6085      	str	r5, [r0, #8]
				break;
   b71fa:	e7aa      	b.n	b7152 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b71fc:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b7200:	d1af      	bne.n	b7162 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b7202:	2b00      	cmp	r3, #0
   b7204:	d0a5      	beq.n	b7152 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b7206:	f04f 0901 	mov.w	r9, #1
   b720a:	e7d2      	b.n	b71b2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b720c:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b720e:	2b00      	cmp	r3, #0
   b7210:	d09f      	beq.n	b7152 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b7212:	6845      	ldr	r5, [r0, #4]
   b7214:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b7216:	42af      	cmp	r7, r5
   b7218:	d94a      	bls.n	b72b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b721a:	f105 0e01 	add.w	lr, r5, #1
   b721e:	f8c0 e004 	str.w	lr, [r0, #4]
   b7222:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b7226:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b722a:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b722e:	2500      	movs	r5, #0
   b7230:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b7234:	6885      	ldr	r5, [r0, #8]
   b7236:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b7238:	bf1f      	itttt	ne
   b723a:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b723e:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b7242:	3501      	addne	r5, #1
   b7244:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b7248:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b724c:	bf0c      	ite	eq
   b724e:	2501      	moveq	r5, #1
   b7250:	2502      	movne	r5, #2
   b7252:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b7256:	6805      	ldr	r5, [r0, #0]
   b7258:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b725c:	6845      	ldr	r5, [r0, #4]
   b725e:	3d01      	subs	r5, #1
   b7260:	e7ca      	b.n	b71f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b7262:	3d01      	subs	r5, #1
   b7264:	f1a8 0810 	sub.w	r8, r8, #16
   b7268:	e7a7      	b.n	b71ba <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b726a:	3501      	adds	r5, #1
   b726c:	f47f af71 	bne.w	b7152 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b7270:	f06f 0401 	mvn.w	r4, #1
   b7274:	e01e      	b.n	b72b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b7276:	3d01      	subs	r5, #1
   b7278:	1c6f      	adds	r7, r5, #1
   b727a:	f1ae 0e10 	sub.w	lr, lr, #16
   b727e:	d1b3      	bne.n	b71e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b7280:	e767      	b.n	b7152 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b7282:	f10e 0901 	add.w	r9, lr, #1
   b7286:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b728a:	f8d0 8000 	ldr.w	r8, [r0]
   b728e:	4542      	cmp	r2, r8
   b7290:	f240 8093 	bls.w	b73ba <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b7294:	f811 5008 	ldrb.w	r5, [r1, r8]
   b7298:	2d00      	cmp	r5, #0
   b729a:	f000 808e 	beq.w	b73ba <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b729e:	2d22      	cmp	r5, #34	; 0x22
   b72a0:	d130      	bne.n	b7304 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b72a2:	b1f3      	cbz	r3, b72e2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b72a4:	6845      	ldr	r5, [r0, #4]
   b72a6:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b72a8:	42af      	cmp	r7, r5
   b72aa:	d806      	bhi.n	b72ba <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b72ac:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b72b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b72b4:	4620      	mov	r0, r4
   b72b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b72ba:	f105 0e01 	add.w	lr, r5, #1
   b72be:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b72c2:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b72c6:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b72ca:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b72ce:	2700      	movs	r7, #0
   b72d0:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b72d2:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b72d6:	f04f 0a03 	mov.w	sl, #3
   b72da:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b72de:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b72e2:	6885      	ldr	r5, [r0, #8]
   b72e4:	1c6f      	adds	r7, r5, #1
				count++;
   b72e6:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b72ea:	f43f af32 	beq.w	b7152 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b72ee:	2b00      	cmp	r3, #0
   b72f0:	f43f af2f 	beq.w	b7152 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b72f4:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b72f8:	f8de 500c 	ldr.w	r5, [lr, #12]
   b72fc:	3501      	adds	r5, #1
   b72fe:	f8ce 500c 	str.w	r5, [lr, #12]
   b7302:	e726      	b.n	b7152 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b7304:	2d5c      	cmp	r5, #92	; 0x5c
   b7306:	d111      	bne.n	b732c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b7308:	f108 0501 	add.w	r5, r8, #1
   b730c:	42aa      	cmp	r2, r5
   b730e:	d90d      	bls.n	b732c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b7310:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b7312:	5d4d      	ldrb	r5, [r1, r5]
   b7314:	2d75      	cmp	r5, #117	; 0x75
   b7316:	d82b      	bhi.n	b7370 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b7318:	2d6d      	cmp	r5, #109	; 0x6d
   b731a:	d80b      	bhi.n	b7334 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b731c:	2d66      	cmp	r5, #102	; 0x66
   b731e:	d827      	bhi.n	b7370 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b7320:	2d5b      	cmp	r5, #91	; 0x5b
   b7322:	d81d      	bhi.n	b7360 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b7324:	2d22      	cmp	r5, #34	; 0x22
   b7326:	d001      	beq.n	b732c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b7328:	2d2f      	cmp	r5, #47	; 0x2f
   b732a:	d121      	bne.n	b7370 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b732c:	6805      	ldr	r5, [r0, #0]
   b732e:	3501      	adds	r5, #1
   b7330:	6005      	str	r5, [r0, #0]
   b7332:	e7aa      	b.n	b728a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b7334:	3d6e      	subs	r5, #110	; 0x6e
   b7336:	2d07      	cmp	r5, #7
   b7338:	d81a      	bhi.n	b7370 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b733a:	a701      	add	r7, pc, #4	; (adr r7, b7340 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b733c:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b7340:	000b732d 	.word	0x000b732d
   b7344:	000b7371 	.word	0x000b7371
   b7348:	000b7371 	.word	0x000b7371
   b734c:	000b7371 	.word	0x000b7371
   b7350:	000b732d 	.word	0x000b732d
   b7354:	000b7371 	.word	0x000b7371
   b7358:	000b732d 	.word	0x000b732d
   b735c:	000b7377 	.word	0x000b7377
   b7360:	3d5c      	subs	r5, #92	; 0x5c
   b7362:	b2ed      	uxtb	r5, r5
   b7364:	fa0c f505 	lsl.w	r5, ip, r5
   b7368:	f240 4741 	movw	r7, #1089	; 0x441
   b736c:	423d      	tst	r5, r7
   b736e:	d1dd      	bne.n	b732c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b7370:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b7374:	e77c      	b.n	b7270 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b7376:	f108 0502 	add.w	r5, r8, #2
   b737a:	6005      	str	r5, [r0, #0]
   b737c:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b7380:	f8d0 8000 	ldr.w	r8, [r0]
   b7384:	4542      	cmp	r2, r8
   b7386:	d803      	bhi.n	b7390 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b7388:	6805      	ldr	r5, [r0, #0]
   b738a:	3d01      	subs	r5, #1
   b738c:	6005      	str	r5, [r0, #0]
					break;
   b738e:	e7cd      	b.n	b732c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b7390:	f811 5008 	ldrb.w	r5, [r1, r8]
   b7394:	2d00      	cmp	r5, #0
   b7396:	d0f7      	beq.n	b7388 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b7398:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b739c:	f1bb 0f09 	cmp.w	fp, #9
   b73a0:	d904      	bls.n	b73ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b73a2:	f025 0520 	bic.w	r5, r5, #32
   b73a6:	3d41      	subs	r5, #65	; 0x41
   b73a8:	2d05      	cmp	r5, #5
   b73aa:	d8e1      	bhi.n	b7370 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b73ac:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b73b0:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b73b4:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b73b6:	d1e3      	bne.n	b7380 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b73b8:	e7e6      	b.n	b7388 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b73ba:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b73be:	f06f 0402 	mvn.w	r4, #2
   b73c2:	e777      	b.n	b72b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b73c4:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b73c8:	2b00      	cmp	r3, #0
   b73ca:	f43f aec2 	beq.w	b7152 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b73ce:	6885      	ldr	r5, [r0, #8]
   b73d0:	1c6f      	adds	r7, r5, #1
   b73d2:	f43f aebe 	beq.w	b7152 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b73d6:	012d      	lsls	r5, r5, #4
   b73d8:	5d5d      	ldrb	r5, [r3, r5]
   b73da:	3d01      	subs	r5, #1
   b73dc:	2d01      	cmp	r5, #1
   b73de:	f67f aeb8 	bls.w	b7152 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b73e2:	6845      	ldr	r5, [r0, #4]
   b73e4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b73e8:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b73ec:	f1b8 0f00 	cmp.w	r8, #0
   b73f0:	f6ff aeaf 	blt.w	b7152 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b73f4:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b73f8:	3d01      	subs	r5, #1
   b73fa:	2d01      	cmp	r5, #1
   b73fc:	d80a      	bhi.n	b7414 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b73fe:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b7402:	3501      	adds	r5, #1
   b7404:	d006      	beq.n	b7414 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b7406:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b740a:	3501      	adds	r5, #1
   b740c:	d102      	bne.n	b7414 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b740e:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b7412:	e69e      	b.n	b7152 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b7414:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b7418:	f1ae 0e10 	sub.w	lr, lr, #16
   b741c:	e7e6      	b.n	b73ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b741e:	f1a5 0920 	sub.w	r9, r5, #32
   b7422:	4f24      	ldr	r7, [pc, #144]	; (b74b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b7424:	fa5f f989 	uxtb.w	r9, r9
   b7428:	fa0c f909 	lsl.w	r9, ip, r9
   b742c:	ea19 0f07 	tst.w	r9, r7
   b7430:	f47f aeaa 	bne.w	b7188 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b7434:	3d20      	subs	r5, #32
   b7436:	2d5e      	cmp	r5, #94	; 0x5e
   b7438:	d89a      	bhi.n	b7370 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b743a:	f108 0501 	add.w	r5, r8, #1
   b743e:	6005      	str	r5, [r0, #0]
   b7440:	e68f      	b.n	b7162 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b7442:	2d0d      	cmp	r5, #13
   b7444:	d1f6      	bne.n	b7434 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b7446:	e69f      	b.n	b7188 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b7448:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b744c:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b7450:	e7f8      	b.n	b7444 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b7452:	6845      	ldr	r5, [r0, #4]
   b7454:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b7456:	42af      	cmp	r7, r5
   b7458:	f67f af28 	bls.w	b72ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b745c:	f105 0801 	add.w	r8, r5, #1
   b7460:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b7464:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b7468:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b746c:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b7470:	2700      	movs	r7, #0
   b7472:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b7474:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b7478:	f04f 0a04 	mov.w	sl, #4
   b747c:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b7480:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b7484:	6805      	ldr	r5, [r0, #0]
   b7486:	3d01      	subs	r5, #1
   b7488:	e683      	b.n	b7192 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b748a:	2b00      	cmp	r3, #0
   b748c:	f43f af12 	beq.w	b72b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b7490:	6842      	ldr	r2, [r0, #4]
   b7492:	1e51      	subs	r1, r2, #1
   b7494:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b7498:	2900      	cmp	r1, #0
   b749a:	f6ff af0b 	blt.w	b72b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b749e:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b74a2:	3201      	adds	r2, #1
   b74a4:	d003      	beq.n	b74ae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b74a6:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b74aa:	3201      	adds	r2, #1
   b74ac:	d087      	beq.n	b73be <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b74ae:	3901      	subs	r1, #1
   b74b0:	3b10      	subs	r3, #16
   b74b2:	e7f1      	b.n	b7498 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b74b4:	04001001 	.word	0x04001001

000b74b8 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b74b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b74ba:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b74bc:	4604      	mov	r4, r0
	if (offset == 0) {
   b74be:	b912      	cbnz	r2, b74c6 <_ZN10JsonParser5parseEv+0xe>
		return false;
   b74c0:	2000      	movs	r0, #0
}
   b74c2:	b003      	add	sp, #12
   b74c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b74c6:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b74c8:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b74cc:	b1ab      	cbz	r3, b74fa <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b74ce:	2100      	movs	r1, #0
	parser->toknext = 0;
   b74d0:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b74d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b74d8:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b74da:	69c1      	ldr	r1, [r0, #28]
   b74dc:	9100      	str	r1, [sp, #0]
   b74de:	6841      	ldr	r1, [r0, #4]
   b74e0:	4630      	mov	r0, r6
   b74e2:	f7ff fe0d 	bl	b7100 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b74e6:	1c43      	adds	r3, r0, #1
   b74e8:	d128      	bne.n	b753c <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b74ea:	7c25      	ldrb	r5, [r4, #16]
   b74ec:	2d00      	cmp	r5, #0
   b74ee:	d1e7      	bne.n	b74c0 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b74f0:	6960      	ldr	r0, [r4, #20]
   b74f2:	f000 faad 	bl	b7a50 <free>
			tokens = 0;
   b74f6:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b74f8:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b74fa:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b74fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b7500:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b7504:	68e2      	ldr	r2, [r4, #12]
   b7506:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b7508:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b750a:	9500      	str	r5, [sp, #0]
   b750c:	462b      	mov	r3, r5
   b750e:	4630      	mov	r0, r6
   b7510:	f7ff fdf6 	bl	b7100 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b7514:	2800      	cmp	r0, #0
   b7516:	dbd3      	blt.n	b74c0 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b7518:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b751a:	d017      	beq.n	b754c <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b751c:	0100      	lsls	r0, r0, #4
   b751e:	f000 fa8f 	bl	b7a40 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b7522:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b7524:	6160      	str	r0, [r4, #20]
   b7526:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b7528:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b752a:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b752e:	68e2      	ldr	r2, [r4, #12]
   b7530:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b7532:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b7534:	4630      	mov	r0, r6
   b7536:	f7ff fde3 	bl	b7100 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b753a:	e001      	b.n	b7540 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b753c:	2800      	cmp	r0, #0
   b753e:	dbbf      	blt.n	b74c0 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b7540:	6963      	ldr	r3, [r4, #20]
   b7542:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b7546:	61a0      	str	r0, [r4, #24]
	return true;
   b7548:	2001      	movs	r0, #1
   b754a:	e7ba      	b.n	b74c2 <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b754c:	6963      	ldr	r3, [r4, #20]
   b754e:	61a3      	str	r3, [r4, #24]
   b7550:	e7fa      	b.n	b7548 <_ZN10JsonParser5parseEv+0x90>
	...

000b7554 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   b7554:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b7556:	f000 f8af 	bl	b76b8 <HAL_Pin_Map>
   b755a:	4b01      	ldr	r3, [pc, #4]	; (b7560 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b755c:	6018      	str	r0, [r3, #0]
}
   b755e:	bd08      	pop	{r3, pc}
   b7560:	2003e6b4 	.word	0x2003e6b4

000b7564 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b7564:	b508      	push	{r3, lr}
   b7566:	4b02      	ldr	r3, [pc, #8]	; (b7570 <hal_ble_stack_init+0xc>)
   b7568:	681b      	ldr	r3, [r3, #0]
   b756a:	689b      	ldr	r3, [r3, #8]
   b756c:	9301      	str	r3, [sp, #4]
   b756e:	bd08      	pop	{r3, pc}
   b7570:	00030278 	.word	0x00030278

000b7574 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b7574:	b508      	push	{r3, lr}
   b7576:	4b02      	ldr	r3, [pc, #8]	; (b7580 <hal_ble_gap_set_advertising_data+0xc>)
   b7578:	681b      	ldr	r3, [r3, #0]
   b757a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b757c:	9301      	str	r3, [sp, #4]
   b757e:	bd08      	pop	{r3, pc}
   b7580:	00030278 	.word	0x00030278

000b7584 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b7584:	b508      	push	{r3, lr}
   b7586:	4b02      	ldr	r3, [pc, #8]	; (b7590 <hal_ble_gap_set_scan_response_data+0xc>)
   b7588:	681b      	ldr	r3, [r3, #0]
   b758a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b758c:	9301      	str	r3, [sp, #4]
   b758e:	bd08      	pop	{r3, pc}
   b7590:	00030278 	.word	0x00030278

000b7594 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b7594:	b508      	push	{r3, lr}
   b7596:	4b02      	ldr	r3, [pc, #8]	; (b75a0 <hal_ble_gap_start_advertising+0xc>)
   b7598:	681b      	ldr	r3, [r3, #0]
   b759a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b759c:	9301      	str	r3, [sp, #4]
   b759e:	bd08      	pop	{r3, pc}
   b75a0:	00030278 	.word	0x00030278

000b75a4 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b75a4:	b508      	push	{r3, lr}
   b75a6:	4b03      	ldr	r3, [pc, #12]	; (b75b4 <hal_ble_gap_disconnect+0x10>)
   b75a8:	681b      	ldr	r3, [r3, #0]
   b75aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b75ae:	9301      	str	r3, [sp, #4]
   b75b0:	bd08      	pop	{r3, pc}
   b75b2:	0000      	.short	0x0000
   b75b4:	00030278 	.word	0x00030278

000b75b8 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b75b8:	b508      	push	{r3, lr}
   b75ba:	4b03      	ldr	r3, [pc, #12]	; (b75c8 <hal_ble_gatt_server_add_service+0x10>)
   b75bc:	681b      	ldr	r3, [r3, #0]
   b75be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b75c2:	9301      	str	r3, [sp, #4]
   b75c4:	bd08      	pop	{r3, pc}
   b75c6:	0000      	.short	0x0000
   b75c8:	00030278 	.word	0x00030278

000b75cc <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b75cc:	b508      	push	{r3, lr}
   b75ce:	4b03      	ldr	r3, [pc, #12]	; (b75dc <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b75d0:	681b      	ldr	r3, [r3, #0]
   b75d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b75d6:	9301      	str	r3, [sp, #4]
   b75d8:	bd08      	pop	{r3, pc}
   b75da:	0000      	.short	0x0000
   b75dc:	00030278 	.word	0x00030278

000b75e0 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b75e0:	b508      	push	{r3, lr}
   b75e2:	4b03      	ldr	r3, [pc, #12]	; (b75f0 <hal_ble_gatt_client_write_with_response+0x10>)
   b75e4:	681b      	ldr	r3, [r3, #0]
   b75e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b75ea:	9301      	str	r3, [sp, #4]
   b75ec:	bd08      	pop	{r3, pc}
   b75ee:	0000      	.short	0x0000
   b75f0:	00030278 	.word	0x00030278

000b75f4 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b75f4:	b508      	push	{r3, lr}
   b75f6:	4b03      	ldr	r3, [pc, #12]	; (b7604 <hal_ble_gatt_client_write_without_response+0x10>)
   b75f8:	681b      	ldr	r3, [r3, #0]
   b75fa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b75fe:	9301      	str	r3, [sp, #4]
   b7600:	bd08      	pop	{r3, pc}
   b7602:	0000      	.short	0x0000
   b7604:	00030278 	.word	0x00030278

000b7608 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b7608:	b508      	push	{r3, lr}
   b760a:	4b03      	ldr	r3, [pc, #12]	; (b7618 <hal_ble_gatt_server_add_characteristic+0x10>)
   b760c:	681b      	ldr	r3, [r3, #0]
   b760e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b7612:	9301      	str	r3, [sp, #4]
   b7614:	bd08      	pop	{r3, pc}
   b7616:	0000      	.short	0x0000
   b7618:	00030278 	.word	0x00030278

000b761c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b761c:	b508      	push	{r3, lr}
   b761e:	4b03      	ldr	r3, [pc, #12]	; (b762c <hal_ble_set_callback_on_periph_link_events+0x10>)
   b7620:	681b      	ldr	r3, [r3, #0]
   b7622:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b7626:	9301      	str	r3, [sp, #4]
   b7628:	bd08      	pop	{r3, pc}
   b762a:	0000      	.short	0x0000
   b762c:	00030278 	.word	0x00030278

000b7630 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b7630:	b508      	push	{r3, lr}
   b7632:	4b03      	ldr	r3, [pc, #12]	; (b7640 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b7634:	681b      	ldr	r3, [r3, #0]
   b7636:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b763a:	9301      	str	r3, [sp, #4]
   b763c:	bd08      	pop	{r3, pc}
   b763e:	0000      	.short	0x0000
   b7640:	00030278 	.word	0x00030278

000b7644 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b7644:	b508      	push	{r3, lr}
   b7646:	4b03      	ldr	r3, [pc, #12]	; (b7654 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b7648:	681b      	ldr	r3, [r3, #0]
   b764a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b764e:	9301      	str	r3, [sp, #4]
   b7650:	bd08      	pop	{r3, pc}
   b7652:	0000      	.short	0x0000
   b7654:	00030278 	.word	0x00030278

000b7658 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b7658:	b508      	push	{r3, lr}
   b765a:	4b02      	ldr	r3, [pc, #8]	; (b7664 <os_mutex_recursive_create+0xc>)
   b765c:	681b      	ldr	r3, [r3, #0]
   b765e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7660:	9301      	str	r3, [sp, #4]
   b7662:	bd08      	pop	{r3, pc}
   b7664:	00030248 	.word	0x00030248

000b7668 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b7668:	b508      	push	{r3, lr}
   b766a:	4b02      	ldr	r3, [pc, #8]	; (b7674 <os_mutex_recursive_lock+0xc>)
   b766c:	681b      	ldr	r3, [r3, #0]
   b766e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7670:	9301      	str	r3, [sp, #4]
   b7672:	bd08      	pop	{r3, pc}
   b7674:	00030248 	.word	0x00030248

000b7678 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b7678:	b508      	push	{r3, lr}
   b767a:	4b02      	ldr	r3, [pc, #8]	; (b7684 <os_mutex_recursive_unlock+0xc>)
   b767c:	681b      	ldr	r3, [r3, #0]
   b767e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7680:	9301      	str	r3, [sp, #4]
   b7682:	bd08      	pop	{r3, pc}
   b7684:	00030248 	.word	0x00030248

000b7688 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b7688:	b508      	push	{r3, lr}
   b768a:	4b02      	ldr	r3, [pc, #8]	; (b7694 <HAL_RNG_GetRandomNumber+0xc>)
   b768c:	681b      	ldr	r3, [r3, #0]
   b768e:	685b      	ldr	r3, [r3, #4]
   b7690:	9301      	str	r3, [sp, #4]
   b7692:	bd08      	pop	{r3, pc}
   b7694:	00030218 	.word	0x00030218

000b7698 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b7698:	b508      	push	{r3, lr}
   b769a:	4b02      	ldr	r3, [pc, #8]	; (b76a4 <HAL_Delay_Microseconds+0xc>)
   b769c:	681b      	ldr	r3, [r3, #0]
   b769e:	68db      	ldr	r3, [r3, #12]
   b76a0:	9301      	str	r3, [sp, #4]
   b76a2:	bd08      	pop	{r3, pc}
   b76a4:	00030218 	.word	0x00030218

000b76a8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b76a8:	b508      	push	{r3, lr}
   b76aa:	4b02      	ldr	r3, [pc, #8]	; (b76b4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b76ac:	681b      	ldr	r3, [r3, #0]
   b76ae:	695b      	ldr	r3, [r3, #20]
   b76b0:	9301      	str	r3, [sp, #4]
   b76b2:	bd08      	pop	{r3, pc}
   b76b4:	00030218 	.word	0x00030218

000b76b8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b76b8:	b508      	push	{r3, lr}
   b76ba:	4b02      	ldr	r3, [pc, #8]	; (b76c4 <HAL_Pin_Map+0xc>)
   b76bc:	681b      	ldr	r3, [r3, #0]
   b76be:	681b      	ldr	r3, [r3, #0]
   b76c0:	9301      	str	r3, [sp, #4]
   b76c2:	bd08      	pop	{r3, pc}
   b76c4:	0003022c 	.word	0x0003022c

000b76c8 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b76c8:	b508      	push	{r3, lr}
   b76ca:	4b02      	ldr	r3, [pc, #8]	; (b76d4 <hal_i2c_begin+0xc>)
   b76cc:	681b      	ldr	r3, [r3, #0]
   b76ce:	68db      	ldr	r3, [r3, #12]
   b76d0:	9301      	str	r3, [sp, #4]
   b76d2:	bd08      	pop	{r3, pc}
   b76d4:	00030228 	.word	0x00030228

000b76d8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b76d8:	b508      	push	{r3, lr}
   b76da:	4b02      	ldr	r3, [pc, #8]	; (b76e4 <hal_i2c_begin_transmission+0xc>)
   b76dc:	681b      	ldr	r3, [r3, #0]
   b76de:	699b      	ldr	r3, [r3, #24]
   b76e0:	9301      	str	r3, [sp, #4]
   b76e2:	bd08      	pop	{r3, pc}
   b76e4:	00030228 	.word	0x00030228

000b76e8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b76e8:	b508      	push	{r3, lr}
   b76ea:	4b02      	ldr	r3, [pc, #8]	; (b76f4 <hal_i2c_end_transmission+0xc>)
   b76ec:	681b      	ldr	r3, [r3, #0]
   b76ee:	69db      	ldr	r3, [r3, #28]
   b76f0:	9301      	str	r3, [sp, #4]
   b76f2:	bd08      	pop	{r3, pc}
   b76f4:	00030228 	.word	0x00030228

000b76f8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b76f8:	b508      	push	{r3, lr}
   b76fa:	4b02      	ldr	r3, [pc, #8]	; (b7704 <hal_i2c_write+0xc>)
   b76fc:	681b      	ldr	r3, [r3, #0]
   b76fe:	6a1b      	ldr	r3, [r3, #32]
   b7700:	9301      	str	r3, [sp, #4]
   b7702:	bd08      	pop	{r3, pc}
   b7704:	00030228 	.word	0x00030228

000b7708 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b7708:	b508      	push	{r3, lr}
   b770a:	4b02      	ldr	r3, [pc, #8]	; (b7714 <hal_i2c_available+0xc>)
   b770c:	681b      	ldr	r3, [r3, #0]
   b770e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7710:	9301      	str	r3, [sp, #4]
   b7712:	bd08      	pop	{r3, pc}
   b7714:	00030228 	.word	0x00030228

000b7718 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b7718:	b508      	push	{r3, lr}
   b771a:	4b02      	ldr	r3, [pc, #8]	; (b7724 <hal_i2c_read+0xc>)
   b771c:	681b      	ldr	r3, [r3, #0]
   b771e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7720:	9301      	str	r3, [sp, #4]
   b7722:	bd08      	pop	{r3, pc}
   b7724:	00030228 	.word	0x00030228

000b7728 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b7728:	b508      	push	{r3, lr}
   b772a:	4b02      	ldr	r3, [pc, #8]	; (b7734 <hal_i2c_peek+0xc>)
   b772c:	681b      	ldr	r3, [r3, #0]
   b772e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7730:	9301      	str	r3, [sp, #4]
   b7732:	bd08      	pop	{r3, pc}
   b7734:	00030228 	.word	0x00030228

000b7738 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b7738:	b508      	push	{r3, lr}
   b773a:	4b02      	ldr	r3, [pc, #8]	; (b7744 <hal_i2c_flush+0xc>)
   b773c:	681b      	ldr	r3, [r3, #0]
   b773e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7740:	9301      	str	r3, [sp, #4]
   b7742:	bd08      	pop	{r3, pc}
   b7744:	00030228 	.word	0x00030228

000b7748 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b7748:	b508      	push	{r3, lr}
   b774a:	4b02      	ldr	r3, [pc, #8]	; (b7754 <hal_i2c_init+0xc>)
   b774c:	681b      	ldr	r3, [r3, #0]
   b774e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7750:	9301      	str	r3, [sp, #4]
   b7752:	bd08      	pop	{r3, pc}
   b7754:	00030228 	.word	0x00030228

000b7758 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b7758:	b508      	push	{r3, lr}
   b775a:	4b02      	ldr	r3, [pc, #8]	; (b7764 <hal_i2c_request_ex+0xc>)
   b775c:	681b      	ldr	r3, [r3, #0]
   b775e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7760:	9301      	str	r3, [sp, #4]
   b7762:	bd08      	pop	{r3, pc}
   b7764:	00030228 	.word	0x00030228

000b7768 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b7768:	b508      	push	{r3, lr}
   b776a:	4b02      	ldr	r3, [pc, #8]	; (b7774 <if_index_to_name+0xc>)
   b776c:	681b      	ldr	r3, [r3, #0]
   b776e:	695b      	ldr	r3, [r3, #20]
   b7770:	9301      	str	r3, [sp, #4]
   b7772:	bd08      	pop	{r3, pc}
   b7774:	0003026c 	.word	0x0003026c

000b7778 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b7778:	b508      	push	{r3, lr}
   b777a:	4b02      	ldr	r3, [pc, #8]	; (b7784 <inet_inet_ntop+0xc>)
   b777c:	681b      	ldr	r3, [r3, #0]
   b777e:	695b      	ldr	r3, [r3, #20]
   b7780:	9301      	str	r3, [sp, #4]
   b7782:	bd08      	pop	{r3, pc}
   b7784:	00030264 	.word	0x00030264

000b7788 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b7788:	b508      	push	{r3, lr}
   b778a:	4b02      	ldr	r3, [pc, #8]	; (b7794 <inet_htonl+0xc>)
   b778c:	681b      	ldr	r3, [r3, #0]
   b778e:	6a1b      	ldr	r3, [r3, #32]
   b7790:	9301      	str	r3, [sp, #4]
   b7792:	bd08      	pop	{r3, pc}
   b7794:	00030264 	.word	0x00030264

000b7798 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b7798:	b508      	push	{r3, lr}
   b779a:	4b02      	ldr	r3, [pc, #8]	; (b77a4 <inet_htons+0xc>)
   b779c:	681b      	ldr	r3, [r3, #0]
   b779e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b77a0:	9301      	str	r3, [sp, #4]
   b77a2:	bd08      	pop	{r3, pc}
   b77a4:	00030264 	.word	0x00030264

000b77a8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b77a8:	b508      	push	{r3, lr}
   b77aa:	4b02      	ldr	r3, [pc, #8]	; (b77b4 <netdb_freeaddrinfo+0xc>)
   b77ac:	681b      	ldr	r3, [r3, #0]
   b77ae:	689b      	ldr	r3, [r3, #8]
   b77b0:	9301      	str	r3, [sp, #4]
   b77b2:	bd08      	pop	{r3, pc}
   b77b4:	00030268 	.word	0x00030268

000b77b8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b77b8:	b508      	push	{r3, lr}
   b77ba:	4b02      	ldr	r3, [pc, #8]	; (b77c4 <netdb_getaddrinfo+0xc>)
   b77bc:	681b      	ldr	r3, [r3, #0]
   b77be:	68db      	ldr	r3, [r3, #12]
   b77c0:	9301      	str	r3, [sp, #4]
   b77c2:	bd08      	pop	{r3, pc}
   b77c4:	00030268 	.word	0x00030268

000b77c8 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b77c8:	b508      	push	{r3, lr}
   b77ca:	4b02      	ldr	r3, [pc, #8]	; (b77d4 <sock_setsockopt+0xc>)
   b77cc:	681b      	ldr	r3, [r3, #0]
   b77ce:	699b      	ldr	r3, [r3, #24]
   b77d0:	9301      	str	r3, [sp, #4]
   b77d2:	bd08      	pop	{r3, pc}
   b77d4:	00030238 	.word	0x00030238

000b77d8 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b77d8:	b508      	push	{r3, lr}
   b77da:	4b02      	ldr	r3, [pc, #8]	; (b77e4 <sock_close+0xc>)
   b77dc:	681b      	ldr	r3, [r3, #0]
   b77de:	69db      	ldr	r3, [r3, #28]
   b77e0:	9301      	str	r3, [sp, #4]
   b77e2:	bd08      	pop	{r3, pc}
   b77e4:	00030238 	.word	0x00030238

000b77e8 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b77e8:	b508      	push	{r3, lr}
   b77ea:	4b02      	ldr	r3, [pc, #8]	; (b77f4 <sock_connect+0xc>)
   b77ec:	681b      	ldr	r3, [r3, #0]
   b77ee:	6a1b      	ldr	r3, [r3, #32]
   b77f0:	9301      	str	r3, [sp, #4]
   b77f2:	bd08      	pop	{r3, pc}
   b77f4:	00030238 	.word	0x00030238

000b77f8 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b77f8:	b508      	push	{r3, lr}
   b77fa:	4b02      	ldr	r3, [pc, #8]	; (b7804 <sock_recv+0xc>)
   b77fc:	681b      	ldr	r3, [r3, #0]
   b77fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7800:	9301      	str	r3, [sp, #4]
   b7802:	bd08      	pop	{r3, pc}
   b7804:	00030238 	.word	0x00030238

000b7808 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b7808:	b508      	push	{r3, lr}
   b780a:	4b02      	ldr	r3, [pc, #8]	; (b7814 <sock_send+0xc>)
   b780c:	681b      	ldr	r3, [r3, #0]
   b780e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7810:	9301      	str	r3, [sp, #4]
   b7812:	bd08      	pop	{r3, pc}
   b7814:	00030238 	.word	0x00030238

000b7818 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b7818:	b508      	push	{r3, lr}
   b781a:	4b02      	ldr	r3, [pc, #8]	; (b7824 <sock_socket+0xc>)
   b781c:	681b      	ldr	r3, [r3, #0]
   b781e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b7820:	9301      	str	r3, [sp, #4]
   b7822:	bd08      	pop	{r3, pc}
   b7824:	00030238 	.word	0x00030238

000b7828 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b7828:	b508      	push	{r3, lr}
   b782a:	4b02      	ldr	r3, [pc, #8]	; (b7834 <hal_usart_write+0xc>)
   b782c:	681b      	ldr	r3, [r3, #0]
   b782e:	68db      	ldr	r3, [r3, #12]
   b7830:	9301      	str	r3, [sp, #4]
   b7832:	bd08      	pop	{r3, pc}
   b7834:	0003023c 	.word	0x0003023c

000b7838 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b7838:	b508      	push	{r3, lr}
   b783a:	4b02      	ldr	r3, [pc, #8]	; (b7844 <hal_usart_available+0xc>)
   b783c:	681b      	ldr	r3, [r3, #0]
   b783e:	691b      	ldr	r3, [r3, #16]
   b7840:	9301      	str	r3, [sp, #4]
   b7842:	bd08      	pop	{r3, pc}
   b7844:	0003023c 	.word	0x0003023c

000b7848 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b7848:	b508      	push	{r3, lr}
   b784a:	4b02      	ldr	r3, [pc, #8]	; (b7854 <hal_usart_read+0xc>)
   b784c:	681b      	ldr	r3, [r3, #0]
   b784e:	695b      	ldr	r3, [r3, #20]
   b7850:	9301      	str	r3, [sp, #4]
   b7852:	bd08      	pop	{r3, pc}
   b7854:	0003023c 	.word	0x0003023c

000b7858 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b7858:	b508      	push	{r3, lr}
   b785a:	4b02      	ldr	r3, [pc, #8]	; (b7864 <hal_usart_peek+0xc>)
   b785c:	681b      	ldr	r3, [r3, #0]
   b785e:	699b      	ldr	r3, [r3, #24]
   b7860:	9301      	str	r3, [sp, #4]
   b7862:	bd08      	pop	{r3, pc}
   b7864:	0003023c 	.word	0x0003023c

000b7868 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b7868:	b508      	push	{r3, lr}
   b786a:	4b02      	ldr	r3, [pc, #8]	; (b7874 <hal_usart_flush+0xc>)
   b786c:	681b      	ldr	r3, [r3, #0]
   b786e:	69db      	ldr	r3, [r3, #28]
   b7870:	9301      	str	r3, [sp, #4]
   b7872:	bd08      	pop	{r3, pc}
   b7874:	0003023c 	.word	0x0003023c

000b7878 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b7878:	b508      	push	{r3, lr}
   b787a:	4b02      	ldr	r3, [pc, #8]	; (b7884 <hal_usart_available_data_for_write+0xc>)
   b787c:	681b      	ldr	r3, [r3, #0]
   b787e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7880:	9301      	str	r3, [sp, #4]
   b7882:	bd08      	pop	{r3, pc}
   b7884:	0003023c 	.word	0x0003023c

000b7888 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b7888:	b508      	push	{r3, lr}
   b788a:	4b02      	ldr	r3, [pc, #8]	; (b7894 <hal_usart_init_ex+0xc>)
   b788c:	681b      	ldr	r3, [r3, #0]
   b788e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7890:	9301      	str	r3, [sp, #4]
   b7892:	bd08      	pop	{r3, pc}
   b7894:	0003023c 	.word	0x0003023c

000b7898 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b7898:	b508      	push	{r3, lr}
   b789a:	4b02      	ldr	r3, [pc, #8]	; (b78a4 <HAL_USB_USART_Init+0xc>)
   b789c:	681b      	ldr	r3, [r3, #0]
   b789e:	681b      	ldr	r3, [r3, #0]
   b78a0:	9301      	str	r3, [sp, #4]
   b78a2:	bd08      	pop	{r3, pc}
   b78a4:	0003024c 	.word	0x0003024c

000b78a8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b78a8:	b508      	push	{r3, lr}
   b78aa:	4b02      	ldr	r3, [pc, #8]	; (b78b4 <HAL_USB_USART_Begin+0xc>)
   b78ac:	681b      	ldr	r3, [r3, #0]
   b78ae:	685b      	ldr	r3, [r3, #4]
   b78b0:	9301      	str	r3, [sp, #4]
   b78b2:	bd08      	pop	{r3, pc}
   b78b4:	0003024c 	.word	0x0003024c

000b78b8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b78b8:	b508      	push	{r3, lr}
   b78ba:	4b02      	ldr	r3, [pc, #8]	; (b78c4 <HAL_USB_USART_Available_Data+0xc>)
   b78bc:	681b      	ldr	r3, [r3, #0]
   b78be:	691b      	ldr	r3, [r3, #16]
   b78c0:	9301      	str	r3, [sp, #4]
   b78c2:	bd08      	pop	{r3, pc}
   b78c4:	0003024c 	.word	0x0003024c

000b78c8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b78c8:	b508      	push	{r3, lr}
   b78ca:	4b02      	ldr	r3, [pc, #8]	; (b78d4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b78cc:	681b      	ldr	r3, [r3, #0]
   b78ce:	695b      	ldr	r3, [r3, #20]
   b78d0:	9301      	str	r3, [sp, #4]
   b78d2:	bd08      	pop	{r3, pc}
   b78d4:	0003024c 	.word	0x0003024c

000b78d8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b78d8:	b508      	push	{r3, lr}
   b78da:	4b02      	ldr	r3, [pc, #8]	; (b78e4 <HAL_USB_USART_Receive_Data+0xc>)
   b78dc:	681b      	ldr	r3, [r3, #0]
   b78de:	699b      	ldr	r3, [r3, #24]
   b78e0:	9301      	str	r3, [sp, #4]
   b78e2:	bd08      	pop	{r3, pc}
   b78e4:	0003024c 	.word	0x0003024c

000b78e8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b78e8:	b508      	push	{r3, lr}
   b78ea:	4b02      	ldr	r3, [pc, #8]	; (b78f4 <HAL_USB_USART_Send_Data+0xc>)
   b78ec:	681b      	ldr	r3, [r3, #0]
   b78ee:	69db      	ldr	r3, [r3, #28]
   b78f0:	9301      	str	r3, [sp, #4]
   b78f2:	bd08      	pop	{r3, pc}
   b78f4:	0003024c 	.word	0x0003024c

000b78f8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b78f8:	b508      	push	{r3, lr}
   b78fa:	4b02      	ldr	r3, [pc, #8]	; (b7904 <HAL_USB_USART_Flush_Data+0xc>)
   b78fc:	681b      	ldr	r3, [r3, #0]
   b78fe:	6a1b      	ldr	r3, [r3, #32]
   b7900:	9301      	str	r3, [sp, #4]
   b7902:	bd08      	pop	{r3, pc}
   b7904:	0003024c 	.word	0x0003024c

000b7908 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7908:	b508      	push	{r3, lr}
   b790a:	4b02      	ldr	r3, [pc, #8]	; (b7914 <panic_+0xc>)
   b790c:	681b      	ldr	r3, [r3, #0]
   b790e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7910:	9301      	str	r3, [sp, #4]
   b7912:	bd08      	pop	{r3, pc}
   b7914:	00030260 	.word	0x00030260

000b7918 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b7918:	b508      	push	{r3, lr}
   b791a:	4b02      	ldr	r3, [pc, #8]	; (b7924 <log_message+0xc>)
   b791c:	681b      	ldr	r3, [r3, #0]
   b791e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7920:	9301      	str	r3, [sp, #4]
   b7922:	bd08      	pop	{r3, pc}
   b7924:	00030260 	.word	0x00030260

000b7928 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7928:	b508      	push	{r3, lr}
   b792a:	4b02      	ldr	r3, [pc, #8]	; (b7934 <set_system_mode+0xc>)
   b792c:	681b      	ldr	r3, [r3, #0]
   b792e:	685b      	ldr	r3, [r3, #4]
   b7930:	9301      	str	r3, [sp, #4]
   b7932:	bd08      	pop	{r3, pc}
   b7934:	00030220 	.word	0x00030220

000b7938 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7938:	b508      	push	{r3, lr}
   b793a:	4b02      	ldr	r3, [pc, #8]	; (b7944 <system_delay_ms+0xc>)
   b793c:	681b      	ldr	r3, [r3, #0]
   b793e:	695b      	ldr	r3, [r3, #20]
   b7940:	9301      	str	r3, [sp, #4]
   b7942:	bd08      	pop	{r3, pc}
   b7944:	00030220 	.word	0x00030220

000b7948 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7948:	b508      	push	{r3, lr}
   b794a:	4b03      	ldr	r3, [pc, #12]	; (b7958 <system_ctrl_set_app_request_handler+0x10>)
   b794c:	681b      	ldr	r3, [r3, #0]
   b794e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b7952:	9301      	str	r3, [sp, #4]
   b7954:	bd08      	pop	{r3, pc}
   b7956:	0000      	.short	0x0000
   b7958:	00030220 	.word	0x00030220

000b795c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b795c:	b508      	push	{r3, lr}
   b795e:	4b03      	ldr	r3, [pc, #12]	; (b796c <system_ctrl_set_result+0x10>)
   b7960:	681b      	ldr	r3, [r3, #0]
   b7962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b7966:	9301      	str	r3, [sp, #4]
   b7968:	bd08      	pop	{r3, pc}
   b796a:	0000      	.short	0x0000
   b796c:	00030220 	.word	0x00030220

000b7970 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7970:	b508      	push	{r3, lr}
   b7972:	4b02      	ldr	r3, [pc, #8]	; (b797c <spark_set_random_seed_from_cloud_handler+0xc>)
   b7974:	681b      	ldr	r3, [r3, #0]
   b7976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7978:	9301      	str	r3, [sp, #4]
   b797a:	bd08      	pop	{r3, pc}
   b797c:	00030244 	.word	0x00030244

000b7980 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7980:	b508      	push	{r3, lr}
   b7982:	4b02      	ldr	r3, [pc, #8]	; (b798c <network_connect+0xc>)
   b7984:	681b      	ldr	r3, [r3, #0]
   b7986:	685b      	ldr	r3, [r3, #4]
   b7988:	9301      	str	r3, [sp, #4]
   b798a:	bd08      	pop	{r3, pc}
   b798c:	00030240 	.word	0x00030240

000b7990 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7990:	b508      	push	{r3, lr}
   b7992:	4b02      	ldr	r3, [pc, #8]	; (b799c <network_connecting+0xc>)
   b7994:	681b      	ldr	r3, [r3, #0]
   b7996:	689b      	ldr	r3, [r3, #8]
   b7998:	9301      	str	r3, [sp, #4]
   b799a:	bd08      	pop	{r3, pc}
   b799c:	00030240 	.word	0x00030240

000b79a0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b79a0:	b508      	push	{r3, lr}
   b79a2:	4b02      	ldr	r3, [pc, #8]	; (b79ac <network_disconnect+0xc>)
   b79a4:	681b      	ldr	r3, [r3, #0]
   b79a6:	68db      	ldr	r3, [r3, #12]
   b79a8:	9301      	str	r3, [sp, #4]
   b79aa:	bd08      	pop	{r3, pc}
   b79ac:	00030240 	.word	0x00030240

000b79b0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b79b0:	b508      	push	{r3, lr}
   b79b2:	4b02      	ldr	r3, [pc, #8]	; (b79bc <network_ready+0xc>)
   b79b4:	681b      	ldr	r3, [r3, #0]
   b79b6:	691b      	ldr	r3, [r3, #16]
   b79b8:	9301      	str	r3, [sp, #4]
   b79ba:	bd08      	pop	{r3, pc}
   b79bc:	00030240 	.word	0x00030240

000b79c0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b79c0:	b508      	push	{r3, lr}
   b79c2:	4b02      	ldr	r3, [pc, #8]	; (b79cc <network_on+0xc>)
   b79c4:	681b      	ldr	r3, [r3, #0]
   b79c6:	695b      	ldr	r3, [r3, #20]
   b79c8:	9301      	str	r3, [sp, #4]
   b79ca:	bd08      	pop	{r3, pc}
   b79cc:	00030240 	.word	0x00030240

000b79d0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b79d0:	b508      	push	{r3, lr}
   b79d2:	4b02      	ldr	r3, [pc, #8]	; (b79dc <network_off+0xc>)
   b79d4:	681b      	ldr	r3, [r3, #0]
   b79d6:	699b      	ldr	r3, [r3, #24]
   b79d8:	9301      	str	r3, [sp, #4]
   b79da:	bd08      	pop	{r3, pc}
   b79dc:	00030240 	.word	0x00030240

000b79e0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b79e0:	b508      	push	{r3, lr}
   b79e2:	4b02      	ldr	r3, [pc, #8]	; (b79ec <network_listen+0xc>)
   b79e4:	681b      	ldr	r3, [r3, #0]
   b79e6:	69db      	ldr	r3, [r3, #28]
   b79e8:	9301      	str	r3, [sp, #4]
   b79ea:	bd08      	pop	{r3, pc}
   b79ec:	00030240 	.word	0x00030240

000b79f0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b79f0:	b508      	push	{r3, lr}
   b79f2:	4b02      	ldr	r3, [pc, #8]	; (b79fc <network_listening+0xc>)
   b79f4:	681b      	ldr	r3, [r3, #0]
   b79f6:	6a1b      	ldr	r3, [r3, #32]
   b79f8:	9301      	str	r3, [sp, #4]
   b79fa:	bd08      	pop	{r3, pc}
   b79fc:	00030240 	.word	0x00030240

000b7a00 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7a00:	b508      	push	{r3, lr}
   b7a02:	4b02      	ldr	r3, [pc, #8]	; (b7a0c <network_set_listen_timeout+0xc>)
   b7a04:	681b      	ldr	r3, [r3, #0]
   b7a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7a08:	9301      	str	r3, [sp, #4]
   b7a0a:	bd08      	pop	{r3, pc}
   b7a0c:	00030240 	.word	0x00030240

000b7a10 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7a10:	b508      	push	{r3, lr}
   b7a12:	4b02      	ldr	r3, [pc, #8]	; (b7a1c <network_get_listen_timeout+0xc>)
   b7a14:	681b      	ldr	r3, [r3, #0]
   b7a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7a18:	9301      	str	r3, [sp, #4]
   b7a1a:	bd08      	pop	{r3, pc}
   b7a1c:	00030240 	.word	0x00030240

000b7a20 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7a20:	b508      	push	{r3, lr}
   b7a22:	4b02      	ldr	r3, [pc, #8]	; (b7a2c <network_is_on+0xc>)
   b7a24:	681b      	ldr	r3, [r3, #0]
   b7a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7a28:	9301      	str	r3, [sp, #4]
   b7a2a:	bd08      	pop	{r3, pc}
   b7a2c:	00030240 	.word	0x00030240

000b7a30 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7a30:	b508      	push	{r3, lr}
   b7a32:	4b02      	ldr	r3, [pc, #8]	; (b7a3c <network_is_off+0xc>)
   b7a34:	681b      	ldr	r3, [r3, #0]
   b7a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7a38:	9301      	str	r3, [sp, #4]
   b7a3a:	bd08      	pop	{r3, pc}
   b7a3c:	00030240 	.word	0x00030240

000b7a40 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7a40:	b508      	push	{r3, lr}
   b7a42:	4b02      	ldr	r3, [pc, #8]	; (b7a4c <malloc+0xc>)
   b7a44:	681b      	ldr	r3, [r3, #0]
   b7a46:	681b      	ldr	r3, [r3, #0]
   b7a48:	9301      	str	r3, [sp, #4]
   b7a4a:	bd08      	pop	{r3, pc}
   b7a4c:	0003021c 	.word	0x0003021c

000b7a50 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7a50:	b508      	push	{r3, lr}
   b7a52:	4b02      	ldr	r3, [pc, #8]	; (b7a5c <free+0xc>)
   b7a54:	681b      	ldr	r3, [r3, #0]
   b7a56:	685b      	ldr	r3, [r3, #4]
   b7a58:	9301      	str	r3, [sp, #4]
   b7a5a:	bd08      	pop	{r3, pc}
   b7a5c:	0003021c 	.word	0x0003021c

000b7a60 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7a60:	b508      	push	{r3, lr}
   b7a62:	4b02      	ldr	r3, [pc, #8]	; (b7a6c <realloc+0xc>)
   b7a64:	681b      	ldr	r3, [r3, #0]
   b7a66:	689b      	ldr	r3, [r3, #8]
   b7a68:	9301      	str	r3, [sp, #4]
   b7a6a:	bd08      	pop	{r3, pc}
   b7a6c:	0003021c 	.word	0x0003021c

000b7a70 <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b7a70:	b508      	push	{r3, lr}
   b7a72:	4b02      	ldr	r3, [pc, #8]	; (b7a7c <sscanf+0xc>)
   b7a74:	681b      	ldr	r3, [r3, #0]
   b7a76:	695b      	ldr	r3, [r3, #20]
   b7a78:	9301      	str	r3, [sp, #4]
   b7a7a:	bd08      	pop	{r3, pc}
   b7a7c:	0003021c 	.word	0x0003021c

000b7a80 <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7a80:	b508      	push	{r3, lr}
   b7a82:	4b02      	ldr	r3, [pc, #8]	; (b7a8c <vsnprintf+0xc>)
   b7a84:	681b      	ldr	r3, [r3, #0]
   b7a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7a88:	9301      	str	r3, [sp, #4]
   b7a8a:	bd08      	pop	{r3, pc}
   b7a8c:	0003021c 	.word	0x0003021c

000b7a90 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b7a90:	b508      	push	{r3, lr}
   b7a92:	4b02      	ldr	r3, [pc, #8]	; (b7a9c <abort+0xc>)
   b7a94:	681b      	ldr	r3, [r3, #0]
   b7a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7a98:	9301      	str	r3, [sp, #4]
   b7a9a:	bd08      	pop	{r3, pc}
   b7a9c:	0003021c 	.word	0x0003021c

000b7aa0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b7aa0:	b508      	push	{r3, lr}
   b7aa2:	4b02      	ldr	r3, [pc, #8]	; (b7aac <_malloc_r+0xc>)
   b7aa4:	681b      	ldr	r3, [r3, #0]
   b7aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7aa8:	9301      	str	r3, [sp, #4]
   b7aaa:	bd08      	pop	{r3, pc}
   b7aac:	0003021c 	.word	0x0003021c

000b7ab0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b7ab0:	b508      	push	{r3, lr}
   b7ab2:	4b02      	ldr	r3, [pc, #8]	; (b7abc <__errno+0xc>)
   b7ab4:	681b      	ldr	r3, [r3, #0]
   b7ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7ab8:	9301      	str	r3, [sp, #4]
   b7aba:	bd08      	pop	{r3, pc}
   b7abc:	0003021c 	.word	0x0003021c

000b7ac0 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7ac0:	b508      	push	{r3, lr}
   b7ac2:	4b02      	ldr	r3, [pc, #8]	; (b7acc <__assert_func+0xc>)
   b7ac4:	681b      	ldr	r3, [r3, #0]
   b7ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7ac8:	9301      	str	r3, [sp, #4]
   b7aca:	bd08      	pop	{r3, pc}
   b7acc:	0003021c 	.word	0x0003021c

000b7ad0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7ad0:	b508      	push	{r3, lr}
   b7ad2:	4b02      	ldr	r3, [pc, #8]	; (b7adc <newlib_impure_ptr_callback+0xc>)
   b7ad4:	681b      	ldr	r3, [r3, #0]
   b7ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7ad8:	9301      	str	r3, [sp, #4]
   b7ada:	bd08      	pop	{r3, pc}
   b7adc:	0003021c 	.word	0x0003021c

000b7ae0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b7ae0:	2100      	movs	r1, #0
   b7ae2:	f7ff bf29 	b.w	b7938 <system_delay_ms>

000b7ae6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7ae6:	4770      	bx	lr

000b7ae8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b7ae8:	4770      	bx	lr

000b7aea <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b7aea:	4770      	bx	lr

000b7aec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7aec:	4770      	bx	lr
	...

000b7af0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7af0:	4b06      	ldr	r3, [pc, #24]	; (b7b0c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7af2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7af4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b7af6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7afa:	d005      	beq.n	b7b08 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7afc:	4608      	mov	r0, r1
   b7afe:	f002 faed 	bl	ba0dc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7b02:	2800      	cmp	r0, #0
   b7b04:	bf08      	it	eq
   b7b06:	2400      	moveq	r4, #0
      }
   b7b08:	4620      	mov	r0, r4
   b7b0a:	bd10      	pop	{r4, pc}
   b7b0c:	000bd8b4 	.word	0x000bd8b4

000b7b10 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7b10:	4b06      	ldr	r3, [pc, #24]	; (b7b2c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7b12:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7b14:	b510      	push	{r4, lr}
   b7b16:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7b1a:	d005      	beq.n	b7b28 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7b1c:	4608      	mov	r0, r1
   b7b1e:	f002 fadd 	bl	ba0dc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7b22:	2800      	cmp	r0, #0
   b7b24:	bf08      	it	eq
   b7b26:	2400      	moveq	r4, #0
      }
   b7b28:	4620      	mov	r0, r4
   b7b2a:	bd10      	pop	{r4, pc}
   b7b2c:	000bd8b4 	.word	0x000bd8b4

000b7b30 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7b30:	4b06      	ldr	r3, [pc, #24]	; (b7b4c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7b32:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7b34:	b510      	push	{r4, lr}
   b7b36:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7b3a:	d005      	beq.n	b7b48 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7b3c:	4608      	mov	r0, r1
   b7b3e:	f002 facd 	bl	ba0dc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7b42:	2800      	cmp	r0, #0
   b7b44:	bf08      	it	eq
   b7b46:	2400      	moveq	r4, #0
      }
   b7b48:	4620      	mov	r0, r4
   b7b4a:	bd10      	pop	{r4, pc}
   b7b4c:	000bd8b4 	.word	0x000bd8b4

000b7b50 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7b50:	b510      	push	{r4, lr}
   b7b52:	2168      	movs	r1, #104	; 0x68
   b7b54:	4604      	mov	r4, r0
   b7b56:	f7fc faa4 	bl	b40a2 <_ZdlPvj>
   b7b5a:	4620      	mov	r0, r4
   b7b5c:	bd10      	pop	{r4, pc}

000b7b5e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b7b5e:	b510      	push	{r4, lr}
   b7b60:	2128      	movs	r1, #40	; 0x28
   b7b62:	4604      	mov	r4, r0
   b7b64:	f7fc fa9d 	bl	b40a2 <_ZdlPvj>
   b7b68:	4620      	mov	r0, r4
   b7b6a:	bd10      	pop	{r4, pc}

000b7b6c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b7b6c:	b510      	push	{r4, lr}
   b7b6e:	2130      	movs	r1, #48	; 0x30
   b7b70:	4604      	mov	r4, r0
   b7b72:	f7fc fa96 	bl	b40a2 <_ZdlPvj>
   b7b76:	4620      	mov	r0, r4
   b7b78:	bd10      	pop	{r4, pc}

000b7b7a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7b7a:	2168      	movs	r1, #104	; 0x68
   b7b7c:	f7fc ba91 	b.w	b40a2 <_ZdlPvj>

000b7b80 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7b80:	2128      	movs	r1, #40	; 0x28
   b7b82:	f7fc ba8e 	b.w	b40a2 <_ZdlPvj>

000b7b86 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7b86:	2130      	movs	r1, #48	; 0x30
   b7b88:	f7fc ba8b 	b.w	b40a2 <_ZdlPvj>

000b7b8c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b7b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b7b8e:	2500      	movs	r5, #0
   b7b90:	1cec      	adds	r4, r5, #3
   b7b92:	428c      	cmp	r4, r1
   b7b94:	d80d      	bhi.n	b7bb2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b7b96:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b7b98:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b7b9a:	5d87      	ldrb	r7, [r0, r6]
   b7b9c:	4297      	cmp	r7, r2
   b7b9e:	d105      	bne.n	b7bac <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b7ba0:	4426      	add	r6, r4
   b7ba2:	42b1      	cmp	r1, r6
   b7ba4:	d305      	bcc.n	b7bb2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b7ba6:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b7ba8:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b7baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b7bac:	3401      	adds	r4, #1
   b7bae:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b7bb0:	e7ee      	b.n	b7b90 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b7bb2:	2000      	movs	r0, #0
   b7bb4:	e7f9      	b.n	b7baa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b7bb8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b7bb8:	4a02      	ldr	r2, [pc, #8]	; (b7bc4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b7bba:	4903      	ldr	r1, [pc, #12]	; (b7bc8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b7bbc:	200a      	movs	r0, #10
   b7bbe:	f7ff bea3 	b.w	b7908 <panic_>
   b7bc2:	bf00      	nop
   b7bc4:	000b7699 	.word	0x000b7699
   b7bc8:	000bd714 	.word	0x000bd714

000b7bcc <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7bcc:	b430      	push	{r4, r5}
   b7bce:	460d      	mov	r5, r1
   b7bd0:	4611      	mov	r1, r2
   b7bd2:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b7bd4:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b7bd6:	6809      	ldr	r1, [r1, #0]
   b7bd8:	6828      	ldr	r0, [r5, #0]
   b7bda:	e9d3 4300 	ldrd	r4, r3, [r3]
   b7bde:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b7be0:	bc30      	pop	{r4, r5}
   b7be2:	4760      	bx	ip

000b7be4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b7be4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b7be6:	b538      	push	{r3, r4, r5, lr}
   b7be8:	4604      	mov	r4, r0
	switch (__op)
   b7bea:	d102      	bne.n	b7bf2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b7bec:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b7bee:	6023      	str	r3, [r4, #0]
	}
   b7bf0:	e003      	b.n	b7bfa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b7bf2:	2a02      	cmp	r2, #2
   b7bf4:	d003      	beq.n	b7bfe <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b7bf6:	2a03      	cmp	r2, #3
   b7bf8:	d00d      	beq.n	b7c16 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b7bfa:	2000      	movs	r0, #0
   b7bfc:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b7bfe:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b7c00:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b7c02:	f7fc fa48 	bl	b4096 <_Znwj>
   b7c06:	4603      	mov	r3, r0
   b7c08:	2800      	cmp	r0, #0
   b7c0a:	d0f0      	beq.n	b7bee <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b7c0c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b7c10:	e883 0003 	stmia.w	r3, {r0, r1}
   b7c14:	e7eb      	b.n	b7bee <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b7c16:	6800      	ldr	r0, [r0, #0]
   b7c18:	2800      	cmp	r0, #0
   b7c1a:	d0ee      	beq.n	b7bfa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b7c1c:	2108      	movs	r1, #8
   b7c1e:	f7fc fa40 	bl	b40a2 <_ZdlPvj>
   b7c22:	e7ea      	b.n	b7bfa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b7c24 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b7c24:	b510      	push	{r4, lr}
      if (_M_manager)
   b7c26:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b7c28:	4604      	mov	r4, r0
      if (_M_manager)
   b7c2a:	b113      	cbz	r3, b7c32 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b7c2c:	2203      	movs	r2, #3
   b7c2e:	4601      	mov	r1, r0
   b7c30:	4798      	blx	r3
    }
   b7c32:	4620      	mov	r0, r4
   b7c34:	bd10      	pop	{r4, pc}

000b7c36 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7c36:	b510      	push	{r4, lr}
   b7c38:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b7c3a:	3058      	adds	r0, #88	; 0x58
   b7c3c:	f7ff fff2 	bl	b7c24 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b7c40:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b7c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7c48:	f001 bb98 	b.w	b937c <_ZN6StringD1Ev>

000b7c4c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b7c4c:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b7c4e:	6843      	ldr	r3, [r0, #4]
   b7c50:	3b01      	subs	r3, #1
    {
   b7c52:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b7c54:	6043      	str	r3, [r0, #4]
   b7c56:	b963      	cbnz	r3, b7c72 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b7c58:	6803      	ldr	r3, [r0, #0]
   b7c5a:	689b      	ldr	r3, [r3, #8]
   b7c5c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b7c5e:	68a3      	ldr	r3, [r4, #8]
   b7c60:	3b01      	subs	r3, #1
   b7c62:	60a3      	str	r3, [r4, #8]
   b7c64:	b92b      	cbnz	r3, b7c72 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b7c66:	6823      	ldr	r3, [r4, #0]
   b7c68:	4620      	mov	r0, r4
   b7c6a:	68db      	ldr	r3, [r3, #12]
    }
   b7c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b7c70:	4718      	bx	r3
    }
   b7c72:	bd10      	pop	{r4, pc}

000b7c74 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b7c74:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b7c78:	b2da      	uxtb	r2, r3
   b7c7a:	2a09      	cmp	r2, #9
   b7c7c:	d801      	bhi.n	b7c82 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b7c7e:	4618      	mov	r0, r3
   b7c80:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b7c82:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b7c86:	2b05      	cmp	r3, #5
   b7c88:	d801      	bhi.n	b7c8e <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b7c8a:	3857      	subs	r0, #87	; 0x57
   b7c8c:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b7c8e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b7c92:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b7c94:	bf94      	ite	ls
   b7c96:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b7c98:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b7c9c:	4770      	bx	lr
	...

000b7ca0 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b7ca0:	b510      	push	{r4, lr}
            locked_(false) {
   b7ca2:	2300      	movs	r3, #0
   b7ca4:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b7ca6:	4b04      	ldr	r3, [pc, #16]	; (b7cb8 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b7ca8:	4604      	mov	r4, r0
   b7caa:	6818      	ldr	r0, [r3, #0]
   b7cac:	f7ff fcdc 	bl	b7668 <os_mutex_recursive_lock>
        locked_ = true;
   b7cb0:	2301      	movs	r3, #1
   b7cb2:	7023      	strb	r3, [r4, #0]
    }
   b7cb4:	4620      	mov	r0, r4
   b7cb6:	bd10      	pop	{r4, pc}
   b7cb8:	2003e6c0 	.word	0x2003e6c0

000b7cbc <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b7cbc:	b510      	push	{r4, lr}
        if (locked_) {
   b7cbe:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b7cc0:	4604      	mov	r4, r0
        if (locked_) {
   b7cc2:	b11b      	cbz	r3, b7ccc <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b7cc4:	4b02      	ldr	r3, [pc, #8]	; (b7cd0 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b7cc6:	6818      	ldr	r0, [r3, #0]
   b7cc8:	f7ff fcd6 	bl	b7678 <os_mutex_recursive_unlock>
    }
   b7ccc:	4620      	mov	r0, r4
   b7cce:	bd10      	pop	{r4, pc}
   b7cd0:	2003e6c0 	.word	0x2003e6c0

000b7cd4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b7cd4:	b082      	sub	sp, #8
   b7cd6:	4603      	mov	r3, r0
    address_ = addr;
   b7cd8:	6808      	ldr	r0, [r1, #0]
   b7cda:	6849      	ldr	r1, [r1, #4]
   b7cdc:	466a      	mov	r2, sp
   b7cde:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b7ce0:	466a      	mov	r2, sp
   b7ce2:	ca03      	ldmia	r2!, {r0, r1}
   b7ce4:	6018      	str	r0, [r3, #0]
}
   b7ce6:	4618      	mov	r0, r3
    address_ = addr.address_;
   b7ce8:	6059      	str	r1, [r3, #4]
}
   b7cea:	b002      	add	sp, #8
   b7cec:	4770      	bx	lr

000b7cee <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b7cee:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b7cf0:	7982      	ldrb	r2, [r0, #6]
   b7cf2:	798b      	ldrb	r3, [r1, #6]
   b7cf4:	429a      	cmp	r2, r3
   b7cf6:	d106      	bne.n	b7d06 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b7cf8:	2206      	movs	r2, #6
   b7cfa:	f003 f9fd 	bl	bb0f8 <memcmp>
   b7cfe:	fab0 f080 	clz	r0, r0
   b7d02:	0940      	lsrs	r0, r0, #5
}
   b7d04:	bd08      	pop	{r3, pc}
    return false;
   b7d06:	2000      	movs	r0, #0
   b7d08:	e7fc      	b.n	b7d04 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b7d0a <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b7d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7d0e:	6003      	str	r3, [r0, #0]
   b7d10:	8083      	strh	r3, [r0, #4]
}
   b7d12:	2000      	movs	r0, #0
   b7d14:	4770      	bx	lr

000b7d16 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b7d16:	b508      	push	{r3, lr}
   b7d18:	4602      	mov	r2, r0
        : address_{} {
   b7d1a:	2100      	movs	r1, #0
   b7d1c:	6001      	str	r1, [r0, #0]
   b7d1e:	6041      	str	r1, [r0, #4]
    clear();
   b7d20:	f7ff fff3 	bl	b7d0a <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b7d24:	7191      	strb	r1, [r2, #6]
}
   b7d26:	4610      	mov	r0, r2
   b7d28:	bd08      	pop	{r3, pc}
	...

000b7d2c <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b7d2c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b7d2e:	2301      	movs	r3, #1
   b7d30:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7d32:	4b05      	ldr	r3, [pc, #20]	; (b7d48 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b7d34:	4602      	mov	r2, r0
   b7d36:	f103 0110 	add.w	r1, r3, #16
   b7d3a:	f853 4b04 	ldr.w	r4, [r3], #4
   b7d3e:	f842 4b04 	str.w	r4, [r2], #4
   b7d42:	428b      	cmp	r3, r1
   b7d44:	d1f9      	bne.n	b7d3a <_ZN8particle7BleUuidC1Ev+0xe>
}
   b7d46:	bd10      	pop	{r4, pc}
   b7d48:	000bd8c2 	.word	0x000bd8c2

000b7d4c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7d4c:	b510      	push	{r4, lr}
    if (uuid128) {
   b7d4e:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7d50:	4604      	mov	r4, r0
    if (uuid128) {
   b7d52:	b1b1      	cbz	r1, b7d82 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b7d54:	2a01      	cmp	r2, #1
   b7d56:	f101 0210 	add.w	r2, r1, #16
   b7d5a:	d10a      	bne.n	b7d72 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b7d5c:	4601      	mov	r1, r0
   b7d5e:	f853 0b04 	ldr.w	r0, [r3], #4
   b7d62:	f841 0b04 	str.w	r0, [r1], #4
   b7d66:	4293      	cmp	r3, r2
   b7d68:	d1f9      	bne.n	b7d5e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b7d6a:	2301      	movs	r3, #1
   b7d6c:	6123      	str	r3, [r4, #16]
}
   b7d6e:	4620      	mov	r0, r4
   b7d70:	bd10      	pop	{r4, pc}
   b7d72:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b7d74:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b7d78:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b7d7c:	429a      	cmp	r2, r3
   b7d7e:	d1f9      	bne.n	b7d74 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b7d80:	e7f3      	b.n	b7d6a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b7d82:	2210      	movs	r2, #16
   b7d84:	f003 f9f0 	bl	bb168 <memset>
   b7d88:	e7f1      	b.n	b7d6e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b7d8a <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b7d8a:	b538      	push	{r3, r4, r5, lr}
   b7d8c:	4604      	mov	r4, r0
   b7d8e:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b7d90:	461a      	mov	r2, r3
   b7d92:	f7ff ffdb 	bl	b7d4c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b7d96:	81a5      	strh	r5, [r4, #12]
}
   b7d98:	4620      	mov	r0, r4
   b7d9a:	bd38      	pop	{r3, r4, r5, pc}

000b7d9c <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b7d9c:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b7d9e:	6902      	ldr	r2, [r0, #16]
   b7da0:	b922      	cbnz	r2, b7dac <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b7da2:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7da4:	3800      	subs	r0, #0
   b7da6:	bf18      	it	ne
   b7da8:	2001      	movne	r0, #1
}
   b7daa:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7dac:	4902      	ldr	r1, [pc, #8]	; (b7db8 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b7dae:	2210      	movs	r2, #16
   b7db0:	f003 f9a2 	bl	bb0f8 <memcmp>
   b7db4:	e7f6      	b.n	b7da4 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b7db6:	bf00      	nop
   b7db8:	000bd8e2 	.word	0x000bd8e2

000b7dbc <_ZNK8particle7BleUuid4typeEv>:
}
   b7dbc:	6900      	ldr	r0, [r0, #16]
   b7dbe:	4770      	bx	lr

000b7dc0 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b7dc0:	b538      	push	{r3, r4, r5, lr}
   b7dc2:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b7dc4:	2214      	movs	r2, #20
   b7dc6:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b7dc8:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b7dca:	f003 f9cd 	bl	bb168 <memset>
    if (type_ == BleUuidType::SHORT) {
   b7dce:	6923      	ldr	r3, [r4, #16]
   b7dd0:	b91b      	cbnz	r3, b7dda <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b7dd2:	89a3      	ldrh	r3, [r4, #12]
   b7dd4:	802b      	strh	r3, [r5, #0]
}
   b7dd6:	4628      	mov	r0, r5
   b7dd8:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b7dda:	2301      	movs	r3, #1
   b7ddc:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b7dde:	4621      	mov	r1, r4
   b7de0:	462b      	mov	r3, r5
   b7de2:	f104 0210 	add.w	r2, r4, #16
   b7de6:	f851 0b04 	ldr.w	r0, [r1], #4
   b7dea:	f843 0b04 	str.w	r0, [r3], #4
   b7dee:	4291      	cmp	r1, r2
   b7df0:	d1f9      	bne.n	b7de6 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b7df2:	e7f0      	b.n	b7dd6 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b7df4 <_ZNK8particle7BleUuid7shortedEv>:
}
   b7df4:	8980      	ldrh	r0, [r0, #12]
   b7df6:	4770      	bx	lr

000b7df8 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b7df8:	4770      	bx	lr

000b7dfa <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b7dfa:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b7dfc:	6902      	ldr	r2, [r0, #16]
   b7dfe:	690b      	ldr	r3, [r1, #16]
   b7e00:	429a      	cmp	r2, r3
   b7e02:	d106      	bne.n	b7e12 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b7e04:	2210      	movs	r2, #16
   b7e06:	f003 f977 	bl	bb0f8 <memcmp>
   b7e0a:	fab0 f080 	clz	r0, r0
   b7e0e:	0940      	lsrs	r0, r0, #5
}
   b7e10:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b7e12:	2000      	movs	r0, #0
   b7e14:	e7fc      	b.n	b7e10 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b7e18 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b7e18:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b7e1a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b7e1e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7e20:	4b34      	ldr	r3, [pc, #208]	; (b7ef4 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b7e22:	460c      	mov	r4, r1
   b7e24:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7e26:	4602      	mov	r2, r0
   b7e28:	f103 0110 	add.w	r1, r3, #16
   b7e2c:	f853 0b04 	ldr.w	r0, [r3], #4
   b7e30:	f842 0b04 	str.w	r0, [r2], #4
   b7e34:	428b      	cmp	r3, r1
   b7e36:	d1f9      	bne.n	b7e2c <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b7e38:	b344      	cbz	r4, b7e8c <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b7e3a:	2124      	movs	r1, #36	; 0x24
   b7e3c:	4620      	mov	r0, r4
   b7e3e:	f003 f9f7 	bl	bb230 <strnlen>
   b7e42:	2804      	cmp	r0, #4
   b7e44:	f04f 0500 	mov.w	r5, #0
   b7e48:	d123      	bne.n	b7e92 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b7e4a:	f8ad 5004 	strh.w	r5, [sp, #4]
   b7e4e:	af01      	add	r7, sp, #4
   b7e50:	1ca5      	adds	r5, r4, #2
   b7e52:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b7e54:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b7e58:	f7ff ff0c 	bl	b7c74 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b7e5c:	f1b0 0800 	subs.w	r8, r0, #0
   b7e60:	db12      	blt.n	b7e88 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b7e62:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b7e66:	f7ff ff05 	bl	b7c74 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b7e6a:	2800      	cmp	r0, #0
   b7e6c:	db0c      	blt.n	b7e88 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b7e6e:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b7e70:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b7e74:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b7e76:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b7e7a:	d1eb      	bne.n	b7e54 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b7e7c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b7e80:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b7e82:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7e86:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b7e88:	2300      	movs	r3, #0
   b7e8a:	6133      	str	r3, [r6, #16]
}
   b7e8c:	b002      	add	sp, #8
   b7e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b7e92:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7e96:	2124      	movs	r1, #36	; 0x24
   b7e98:	4620      	mov	r0, r4
   b7e9a:	f003 f9c9 	bl	bb230 <strnlen>
   b7e9e:	42a8      	cmp	r0, r5
   b7ea0:	d807      	bhi.n	b7eb2 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b7ea2:	4642      	mov	r2, r8
   b7ea4:	2100      	movs	r1, #0
   b7ea6:	4630      	mov	r0, r6
}
   b7ea8:	b002      	add	sp, #8
   b7eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b7eae:	f003 b95b 	b.w	bb168 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7eb2:	f1b8 0f00 	cmp.w	r8, #0
   b7eb6:	d0e9      	beq.n	b7e8c <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b7eb8:	5d60      	ldrb	r0, [r4, r5]
   b7eba:	f7ff fedb 	bl	b7c74 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b7ebe:	0603      	lsls	r3, r0, #24
   b7ec0:	d415      	bmi.n	b7eee <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b7ec2:	0100      	lsls	r0, r0, #4
   b7ec4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b7ec8:	b2c7      	uxtb	r7, r0
   b7eca:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b7ece:	2124      	movs	r1, #36	; 0x24
   b7ed0:	4620      	mov	r0, r4
   b7ed2:	f003 f9ad 	bl	bb230 <strnlen>
   b7ed6:	3501      	adds	r5, #1
   b7ed8:	42a8      	cmp	r0, r5
   b7eda:	d908      	bls.n	b7eee <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b7edc:	5d60      	ldrb	r0, [r4, r5]
   b7ede:	f7ff fec9 	bl	b7c74 <_ZN8particle11hexToNibbleEc>
   b7ee2:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b7ee4:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b7ee6:	bfa4      	itt	ge
   b7ee8:	4338      	orrge	r0, r7
   b7eea:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7eee:	3501      	adds	r5, #1
   b7ef0:	e7d1      	b.n	b7e96 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b7ef2:	bf00      	nop
   b7ef4:	000bd8c2 	.word	0x000bd8c2

000b7ef8 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b7ef8:	b513      	push	{r0, r1, r4, lr}
   b7efa:	4604      	mov	r4, r0
   b7efc:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b7efe:	f7ff ff15 	bl	b7d2c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b7f02:	4620      	mov	r0, r4
   b7f04:	9901      	ldr	r1, [sp, #4]
   b7f06:	f7ff ff87 	bl	b7e18 <_ZN8particle7BleUuid9constructEPKc>
}
   b7f0a:	4620      	mov	r0, r4
   b7f0c:	b002      	add	sp, #8
   b7f0e:	bd10      	pop	{r4, pc}

000b7f10 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b7f10:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b7f12:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7f16:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b7f18:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b7f1a:	8043      	strh	r3, [r0, #2]
   b7f1c:	220e      	movs	r2, #14
   b7f1e:	4629      	mov	r1, r5
   b7f20:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b7f22:	7105      	strb	r5, [r0, #4]
   b7f24:	3006      	adds	r0, #6
   b7f26:	f003 f91f 	bl	bb168 <memset>
   b7f2a:	f104 0014 	add.w	r0, r4, #20
   b7f2e:	f7ff fefd 	bl	b7d2c <_ZN8particle7BleUuidC1Ev>
   b7f32:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b7f36:	f7ff fef9 	bl	b7d2c <_ZN8particle7BleUuidC1Ev>
   b7f3a:	4904      	ldr	r1, [pc, #16]	; (b7f4c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b7f3c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7f40:	f001 fa67 	bl	b9412 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b7f44:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b7f46:	4620      	mov	r0, r4
   b7f48:	bd38      	pop	{r3, r4, r5, pc}
   b7f4a:	bf00      	nop
   b7f4c:	000bd6de 	.word	0x000bd6de

000b7f50 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b7f50:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b7f52:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b7f56:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b7f5a:	4293      	cmp	r3, r2
   b7f5c:	4618      	mov	r0, r3
   b7f5e:	d006      	beq.n	b7f6e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b7f60:	6804      	ldr	r4, [r0, #0]
   b7f62:	8824      	ldrh	r4, [r4, #0]
   b7f64:	428c      	cmp	r4, r1
   b7f66:	f103 0308 	add.w	r3, r3, #8
   b7f6a:	d1f6      	bne.n	b7f5a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b7f6c:	bd10      	pop	{r4, pc}
        return nullptr;
   b7f6e:	2000      	movs	r0, #0
   b7f70:	e7fc      	b.n	b7f6c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b7f74 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b7f74:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7f76:	4606      	mov	r6, r0
   b7f78:	b085      	sub	sp, #20
   b7f7a:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b7f7c:	460d      	mov	r5, r1
   b7f7e:	2900      	cmp	r1, #0
   b7f80:	d050      	beq.n	b8024 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b7f82:	2a00      	cmp	r2, #0
   b7f84:	d04e      	beq.n	b8024 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b7f86:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b7f88:	7823      	ldrb	r3, [r4, #0]
   b7f8a:	2af4      	cmp	r2, #244	; 0xf4
   b7f8c:	bf28      	it	cs
   b7f8e:	22f4      	movcs	r2, #244	; 0xf4
   b7f90:	b343      	cbz	r3, b7fe4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b7f92:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b7f94:	0798      	lsls	r0, r3, #30
   b7f96:	d509      	bpl.n	b7fac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b7f98:	89a0      	ldrh	r0, [r4, #12]
   b7f9a:	9203      	str	r2, [sp, #12]
   b7f9c:	2300      	movs	r3, #0
   b7f9e:	f7ff fb15 	bl	b75cc <hal_ble_gatt_server_set_characteristic_value>
   b7fa2:	2800      	cmp	r0, #0
   b7fa4:	9a03      	ldr	r2, [sp, #12]
   b7fa6:	da03      	bge.n	b7fb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b7fa8:	b005      	add	sp, #20
   b7faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b7fac:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7fb0:	6834      	ldr	r4, [r6, #0]
   b7fb2:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b7fb4:	06d9      	lsls	r1, r3, #27
   b7fb6:	d509      	bpl.n	b7fcc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b7fb8:	2f01      	cmp	r7, #1
   b7fba:	d007      	beq.n	b7fcc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7fbc:	89a0      	ldrh	r0, [r4, #12]
   b7fbe:	2300      	movs	r3, #0
   b7fc0:	4629      	mov	r1, r5
}
   b7fc2:	b005      	add	sp, #20
   b7fc4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7fc8:	f7ff bb32 	b.w	b7630 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b7fcc:	069b      	lsls	r3, r3, #26
   b7fce:	d5eb      	bpl.n	b7fa8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b7fd0:	2f02      	cmp	r7, #2
   b7fd2:	d0e9      	beq.n	b7fa8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7fd4:	89a0      	ldrh	r0, [r4, #12]
   b7fd6:	2300      	movs	r3, #0
   b7fd8:	4629      	mov	r1, r5
}
   b7fda:	b005      	add	sp, #20
   b7fdc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7fe0:	f7ff bb30 	b.w	b7644 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b7fe4:	8860      	ldrh	r0, [r4, #2]
   b7fe6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7fea:	4288      	cmp	r0, r1
   b7fec:	d01c      	beq.n	b8028 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b7fee:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b7ff0:	074e      	lsls	r6, r1, #29
   b7ff2:	d501      	bpl.n	b7ff8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b7ff4:	2f01      	cmp	r7, #1
   b7ff6:	d104      	bne.n	b8002 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7ff8:	070b      	lsls	r3, r1, #28
   b7ffa:	d409      	bmi.n	b8010 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b7ffc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b8000:	e7d2      	b.n	b7fa8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b8002:	89a1      	ldrh	r1, [r4, #12]
   b8004:	9300      	str	r3, [sp, #0]
   b8006:	4613      	mov	r3, r2
   b8008:	462a      	mov	r2, r5
   b800a:	f7ff faf3 	bl	b75f4 <hal_ble_gatt_client_write_without_response>
   b800e:	e7cb      	b.n	b7fa8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b8010:	2f02      	cmp	r7, #2
   b8012:	d0f3      	beq.n	b7ffc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b8014:	2300      	movs	r3, #0
   b8016:	89a1      	ldrh	r1, [r4, #12]
   b8018:	9300      	str	r3, [sp, #0]
   b801a:	4613      	mov	r3, r2
   b801c:	462a      	mov	r2, r5
   b801e:	f7ff fadf 	bl	b75e0 <hal_ble_gatt_client_write_with_response>
   b8022:	e7c1      	b.n	b7fa8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b8024:	4802      	ldr	r0, [pc, #8]	; (b8030 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b8026:	e7bf      	b.n	b7fa8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b8028:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b802c:	e7bc      	b.n	b7fa8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b802e:	bf00      	nop
   b8030:	fffffef2 	.word	0xfffffef2

000b8034 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b8034:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8036:	460c      	mov	r4, r1
   b8038:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b803a:	21f4      	movs	r1, #244	; 0xf4
   b803c:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b803e:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b8040:	f003 f8f6 	bl	bb230 <strnlen>
   b8044:	9b01      	ldr	r3, [sp, #4]
   b8046:	4602      	mov	r2, r0
   b8048:	4621      	mov	r1, r4
   b804a:	4628      	mov	r0, r5
}
   b804c:	b003      	add	sp, #12
   b804e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b8052:	f7ff bf8f 	b.w	b7f74 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000b8058 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b8058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b805c:	2600      	movs	r6, #0
   b805e:	6006      	str	r6, [r0, #0]
   b8060:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8062:	2028      	movs	r0, #40	; 0x28
   b8064:	460c      	mov	r4, r1
   b8066:	f7fc f816 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b806a:	1e05      	subs	r5, r0, #0
   b806c:	f105 080c 	add.w	r8, r5, #12
   b8070:	d00f      	beq.n	b8092 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b8072:	2301      	movs	r3, #1
   b8074:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b8078:	4b08      	ldr	r3, [pc, #32]	; (b809c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b807a:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b807c:	4640      	mov	r0, r8
   b807e:	f7ff fe55 	bl	b7d2c <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b8082:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b8084:	622e      	str	r6, [r5, #32]
   b8086:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b808a:	4646      	mov	r6, r8
   b808c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b808e:	6823      	ldr	r3, [r4, #0]
   b8090:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b8092:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b8096:	4638      	mov	r0, r7
   b8098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b809c:	000bd884 	.word	0x000bd884

000b80a0 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b80a0:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b80a2:	2500      	movs	r5, #0
   b80a4:	6005      	str	r5, [r0, #0]
   b80a6:	4606      	mov	r6, r0
   b80a8:	2030      	movs	r0, #48	; 0x30
   b80aa:	f7fb fff4 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b80ae:	4604      	mov	r4, r0
   b80b0:	b188      	cbz	r0, b80d6 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b80b2:	2301      	movs	r3, #1
   b80b4:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b80b8:	4b09      	ldr	r3, [pc, #36]	; (b80e0 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b80ba:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b80bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b80c0:	8183      	strh	r3, [r0, #12]
   b80c2:	300e      	adds	r0, #14
   b80c4:	f7ff fe27 	bl	b7d16 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b80c8:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b80cc:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b80d0:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b80d4:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b80d6:	6074      	str	r4, [r6, #4]
   b80d8:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b80da:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b80dc:	4630      	mov	r0, r6
   b80de:	bd70      	pop	{r4, r5, r6, pc}
   b80e0:	000bd8a0 	.word	0x000bd8a0

000b80e4 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b80e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b80e6:	460d      	mov	r5, r1
   b80e8:	4604      	mov	r4, r0
    WiringBleLock lk;
   b80ea:	a801      	add	r0, sp, #4
   b80ec:	f7ff fdd8 	bl	b7ca0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b80f0:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b80f2:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b80f6:	6023      	str	r3, [r4, #0]
   b80f8:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b80fc:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b80fe:	a801      	add	r0, sp, #4
   b8100:	f7ff fddc 	bl	b7cbc <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b8104:	4620      	mov	r0, r4
   b8106:	b003      	add	sp, #12
   b8108:	bd30      	pop	{r4, r5, pc}

000b810a <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b810a:	b530      	push	{r4, r5, lr}
   b810c:	4605      	mov	r5, r0
   b810e:	b087      	sub	sp, #28
   b8110:	460c      	mov	r4, r1
    WiringBleLock lk;
   b8112:	a801      	add	r0, sp, #4
   b8114:	f7ff fdc4 	bl	b7ca0 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b8118:	682a      	ldr	r2, [r5, #0]
   b811a:	6823      	ldr	r3, [r4, #0]
   b811c:	8812      	ldrh	r2, [r2, #0]
   b811e:	881b      	ldrh	r3, [r3, #0]
   b8120:	429a      	cmp	r2, r3
   b8122:	d10d      	bne.n	b8140 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b8124:	4629      	mov	r1, r5
   b8126:	a802      	add	r0, sp, #8
   b8128:	f7ff ffdc 	bl	b80e4 <_ZNK8particle13BlePeerDevice7addressEv>
   b812c:	4621      	mov	r1, r4
   b812e:	a804      	add	r0, sp, #16
   b8130:	f7ff ffd8 	bl	b80e4 <_ZNK8particle13BlePeerDevice7addressEv>
   b8134:	a904      	add	r1, sp, #16
   b8136:	a802      	add	r0, sp, #8
   b8138:	f7ff fdd9 	bl	b7cee <_ZNK8particle10BleAddresseqERKS0_>
   b813c:	4604      	mov	r4, r0
   b813e:	b900      	cbnz	r0, b8142 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b8140:	2400      	movs	r4, #0
    WiringBleLock lk;
   b8142:	a801      	add	r0, sp, #4
   b8144:	f7ff fdba 	bl	b7cbc <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b8148:	4620      	mov	r0, r4
   b814a:	b007      	add	sp, #28
   b814c:	bd30      	pop	{r4, r5, pc}
	...

000b8150 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b8150:	b510      	push	{r4, lr}
   b8152:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b8154:	2064      	movs	r0, #100	; 0x64
   b8156:	f7fb ff9e 	bl	b4096 <_Znwj>
   b815a:	b168      	cbz	r0, b8178 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b815c:	2300      	movs	r3, #0
   b815e:	e9c0 3300 	strd	r3, r3, [r0]
   b8162:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b8166:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b816a:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b816e:	6203      	str	r3, [r0, #32]
   b8170:	62c3      	str	r3, [r0, #44]	; 0x2c
   b8172:	63c3      	str	r3, [r0, #60]	; 0x3c
   b8174:	64c3      	str	r3, [r0, #76]	; 0x4c
   b8176:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b8178:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b817a:	b920      	cbnz	r0, b8186 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b817c:	4a0a      	ldr	r2, [pc, #40]	; (b81a8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b817e:	490b      	ldr	r1, [pc, #44]	; (b81ac <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b8180:	200a      	movs	r0, #10
   b8182:	f7ff fbc1 	bl	b7908 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b8186:	2000      	movs	r0, #0
   b8188:	f7ff f9ec 	bl	b7564 <hal_ble_stack_init>
   b818c:	b120      	cbz	r0, b8198 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b818e:	4a06      	ldr	r2, [pc, #24]	; (b81a8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b8190:	4907      	ldr	r1, [pc, #28]	; (b81b0 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b8192:	200a      	movs	r0, #10
   b8194:	f7ff fbb8 	bl	b7908 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b8198:	6821      	ldr	r1, [r4, #0]
   b819a:	4806      	ldr	r0, [pc, #24]	; (b81b4 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b819c:	2200      	movs	r2, #0
   b819e:	f7ff fa3d 	bl	b761c <hal_ble_set_callback_on_periph_link_events>
}
   b81a2:	4620      	mov	r0, r4
   b81a4:	bd10      	pop	{r4, pc}
   b81a6:	bf00      	nop
   b81a8:	000b7699 	.word	0x000b7699
   b81ac:	000bd714 	.word	0x000bd714
   b81b0:	000bd752 	.word	0x000bd752
   b81b4:	000b8739 	.word	0x000b8739

000b81b8 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b81b8:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b81ba:	4c0a      	ldr	r4, [pc, #40]	; (b81e4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b81bc:	7823      	ldrb	r3, [r4, #0]
   b81be:	f3bf 8f5b 	dmb	ish
   b81c2:	07db      	lsls	r3, r3, #31
   b81c4:	d40c      	bmi.n	b81e0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b81c6:	4620      	mov	r0, r4
   b81c8:	f7fb ff6d 	bl	b40a6 <__cxa_guard_acquire>
   b81cc:	b140      	cbz	r0, b81e0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b81ce:	4806      	ldr	r0, [pc, #24]	; (b81e8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b81d0:	f7ff ffbe 	bl	b8150 <_ZN8particle14BleLocalDeviceC1Ev>
   b81d4:	4620      	mov	r0, r4
   b81d6:	f7fb ff6b 	bl	b40b0 <__cxa_guard_release>
   b81da:	4804      	ldr	r0, [pc, #16]	; (b81ec <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b81dc:	f002 ff82 	bl	bb0e4 <atexit>
    return instance;
}
   b81e0:	4801      	ldr	r0, [pc, #4]	; (b81e8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b81e2:	bd10      	pop	{r4, pc}
   b81e4:	2003e6b8 	.word	0x2003e6b8
   b81e8:	2003e6c4 	.word	0x2003e6c4
   b81ec:	000b8405 	.word	0x000b8405

000b81f0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b81f0:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b81f2:	6803      	ldr	r3, [r0, #0]
   b81f4:	3b09      	subs	r3, #9
   b81f6:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b81f8:	b08d      	sub	sp, #52	; 0x34
   b81fa:	4604      	mov	r4, r0
   b81fc:	460d      	mov	r5, r1
    switch (event->type) {
   b81fe:	d811      	bhi.n	b8224 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b8200:	f7ff ffda 	bl	b81b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b8204:	88a1      	ldrh	r1, [r4, #4]
   b8206:	6800      	ldr	r0, [r0, #0]
   b8208:	f7ff fea2 	bl	b7f50 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b820c:	4603      	mov	r3, r0
   b820e:	b958      	cbnz	r0, b8228 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b8210:	2220      	movs	r2, #32
   b8212:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b8216:	4a0b      	ldr	r2, [pc, #44]	; (b8244 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b8218:	9200      	str	r2, [sp, #0]
   b821a:	490b      	ldr	r1, [pc, #44]	; (b8248 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b821c:	aa04      	add	r2, sp, #16
   b821e:	2032      	movs	r0, #50	; 0x32
   b8220:	f7ff fb7a 	bl	b7918 <log_message>
}
   b8224:	b00d      	add	sp, #52	; 0x34
   b8226:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b8228:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b822a:	2a00      	cmp	r2, #0
   b822c:	d0fa      	beq.n	b8224 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b822e:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8232:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b8236:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b823a:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b823c:	aa04      	add	r2, sp, #16
   b823e:	a903      	add	r1, sp, #12
   b8240:	47a0      	blx	r4
}
   b8242:	e7ef      	b.n	b8224 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b8244:	000bd794 	.word	0x000bd794
   b8248:	000bd72b 	.word	0x000bd72b

000b824c <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b824c:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b824e:	2000      	movs	r0, #0
   b8250:	f7ff f988 	bl	b7564 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b8254:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b8258:	bd08      	pop	{r3, pc}

000b825a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b825a:	b919      	cbnz	r1, b8264 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b825c:	460a      	mov	r2, r1
   b825e:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b8260:	f7ff b988 	b.w	b7574 <hal_ble_gap_set_advertising_data>
   b8264:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8268:	2200      	movs	r2, #0
   b826a:	e7f9      	b.n	b8260 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b826c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b826c:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b826e:	1e14      	subs	r4, r2, #0
   b8270:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b8272:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b8274:	db02      	blt.n	b827c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b8276:	1862      	adds	r2, r4, r1
   b8278:	429a      	cmp	r2, r3
   b827a:	dd00      	ble.n	b827e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b827c:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b827e:	682a      	ldr	r2, [r5, #0]
   b8280:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b8282:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b8284:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8286:	1a52      	subs	r2, r2, r1
   b8288:	f002 ff54 	bl	bb134 <memmove>
    size_ -= n;
   b828c:	686a      	ldr	r2, [r5, #4]
   b828e:	1b12      	subs	r2, r2, r4
   b8290:	606a      	str	r2, [r5, #4]
}
   b8292:	bd38      	pop	{r3, r4, r5, pc}

000b8294 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b8294:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b8296:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b8298:	4604      	mov	r4, r0
   b829a:	460d      	mov	r5, r1
   b829c:	ab01      	add	r3, sp, #4
   b829e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b82a2:	f7ff fc73 	bl	b7b8c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b82a6:	4602      	mov	r2, r0
   b82a8:	b138      	cbz	r0, b82ba <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b82aa:	9901      	ldr	r1, [sp, #4]
   b82ac:	4620      	mov	r0, r4
   b82ae:	f7ff ffdd 	bl	b826c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b82b2:	4629      	mov	r1, r5
   b82b4:	4620      	mov	r0, r4
   b82b6:	f7ff ffed 	bl	b8294 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b82ba:	b003      	add	sp, #12
   b82bc:	bd30      	pop	{r4, r5, pc}

000b82be <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b82be:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b82c0:	460c      	mov	r4, r1
   b82c2:	b929      	cbnz	r1, b82d0 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b82c4:	460a      	mov	r2, r1
   b82c6:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b82c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b82cc:	f7ff b95a 	b.w	b7584 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b82d0:	2101      	movs	r1, #1
   b82d2:	4620      	mov	r0, r4
   b82d4:	f7ff ffde 	bl	b8294 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b82d8:	e9d4 0100 	ldrd	r0, r1, [r4]
   b82dc:	2200      	movs	r2, #0
   b82de:	e7f3      	b.n	b82c8 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b82e0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b82e0:	b538      	push	{r3, r4, r5, lr}
   b82e2:	4604      	mov	r4, r0
   b82e4:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b82e6:	f7ff ffb8 	bl	b825a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b82ea:	2800      	cmp	r0, #0
   b82ec:	db0a      	blt.n	b8304 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b82ee:	4629      	mov	r1, r5
   b82f0:	4620      	mov	r0, r4
   b82f2:	f7ff ffe4 	bl	b82be <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b82f6:	2800      	cmp	r0, #0
   b82f8:	db04      	blt.n	b8304 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b82fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b82fe:	2000      	movs	r0, #0
   b8300:	f7ff b948 	b.w	b7594 <hal_ble_gap_start_advertising>
}
   b8304:	bd38      	pop	{r3, r4, r5, pc}
	...

000b8308 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b8308:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b830a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b830c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b830e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8310:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b8312:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8314:	f7fb febf 	bl	b4096 <_Znwj>
   b8318:	b118      	cbz	r0, b8322 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b831a:	682b      	ldr	r3, [r5, #0]
   b831c:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b831e:	686b      	ldr	r3, [r5, #4]
   b8320:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b8322:	4b03      	ldr	r3, [pc, #12]	; (b8330 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b8324:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8326:	4b03      	ldr	r3, [pc, #12]	; (b8334 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8328:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b832a:	60a3      	str	r3, [r4, #8]
      }
   b832c:	4620      	mov	r0, r4
   b832e:	bd38      	pop	{r3, r4, r5, pc}
   b8330:	000b7bcd 	.word	0x000b7bcd
   b8334:	000b7be5 	.word	0x000b7be5

000b8338 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b8338:	680b      	ldr	r3, [r1, #0]
   b833a:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b833c:	b113      	cbz	r3, b8344 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b833e:	685a      	ldr	r2, [r3, #4]
   b8340:	3201      	adds	r2, #1
   b8342:	605a      	str	r2, [r3, #4]
      }
   b8344:	4770      	bx	lr

000b8346 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b8346:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8348:	f851 3b04 	ldr.w	r3, [r1], #4
   b834c:	4604      	mov	r4, r0
   b834e:	f840 3b04 	str.w	r3, [r0], #4
   b8352:	f7ff fff1 	bl	b8338 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b8356:	6823      	ldr	r3, [r4, #0]
   b8358:	b90b      	cbnz	r3, b835e <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b835a:	f7ff fc2d 	bl	b7bb8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b835e:	4620      	mov	r0, r4
   b8360:	bd10      	pop	{r4, pc}

000b8362 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b8362:	b510      	push	{r4, lr}
   b8364:	f851 3b04 	ldr.w	r3, [r1], #4
   b8368:	4604      	mov	r4, r0
   b836a:	f840 3b04 	str.w	r3, [r0], #4
   b836e:	f7ff ffe3 	bl	b8338 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b8372:	4620      	mov	r0, r4
   b8374:	bd10      	pop	{r4, pc}

000b8376 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b8376:	b510      	push	{r4, lr}
   b8378:	f851 3b04 	ldr.w	r3, [r1], #4
   b837c:	4604      	mov	r4, r0
   b837e:	f840 3b04 	str.w	r3, [r0], #4
   b8382:	f7ff ffd9 	bl	b8338 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b8386:	4620      	mov	r0, r4
   b8388:	bd10      	pop	{r4, pc}

000b838a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b838a:	b510      	push	{r4, lr}
   b838c:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b838e:	6800      	ldr	r0, [r0, #0]
   b8390:	b108      	cbz	r0, b8396 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b8392:	f7ff fc5b 	bl	b7c4c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b8396:	4620      	mov	r0, r4
   b8398:	bd10      	pop	{r4, pc}

000b839a <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b839a:	b510      	push	{r4, lr}
   b839c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b839e:	3004      	adds	r0, #4
   b83a0:	f7ff fff3 	bl	b838a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b83a4:	4620      	mov	r0, r4
   b83a6:	bd10      	pop	{r4, pc}

000b83a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b83a8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b83aa:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b83ae:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b83b0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b83b4:	42ae      	cmp	r6, r5
   b83b6:	d004      	beq.n	b83c2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b83b8:	1d28      	adds	r0, r5, #4
   b83ba:	f7ff ffe6 	bl	b838a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b83be:	3508      	adds	r5, #8
   b83c0:	e7f8      	b.n	b83b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b83c2:	6820      	ldr	r0, [r4, #0]
   b83c4:	f7ff fb44 	bl	b7a50 <free>
}
   b83c8:	4620      	mov	r0, r4
   b83ca:	bd70      	pop	{r4, r5, r6, pc}

000b83cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b83cc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b83ce:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b83d2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b83d4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b83d8:	42ae      	cmp	r6, r5
   b83da:	d004      	beq.n	b83e6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b83dc:	1d28      	adds	r0, r5, #4
   b83de:	f7ff ffd4 	bl	b838a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b83e2:	3508      	adds	r5, #8
   b83e4:	e7f8      	b.n	b83d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b83e6:	6820      	ldr	r0, [r4, #0]
   b83e8:	f7ff fb32 	bl	b7a50 <free>
}
   b83ec:	4620      	mov	r0, r4
   b83ee:	bd70      	pop	{r4, r5, r6, pc}

000b83f0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b83f0:	b510      	push	{r4, lr}
   b83f2:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b83f4:	3024      	adds	r0, #36	; 0x24
   b83f6:	f7ff ffe9 	bl	b83cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b83fa:	f104 0018 	add.w	r0, r4, #24
   b83fe:	f7ff ffd3 	bl	b83a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b8402:	bd10      	pop	{r4, pc}

000b8404 <__tcf_0>:
    static BleLocalDevice instance;
   b8404:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b8406:	4b17      	ldr	r3, [pc, #92]	; (b8464 <__tcf_0+0x60>)
   b8408:	681c      	ldr	r4, [r3, #0]
   b840a:	b354      	cbz	r4, b8462 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b840c:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b8410:	f7ff fc08 	bl	b7c24 <_ZNSt14_Function_baseD1Ev>
   b8414:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8418:	f7ff fc04 	bl	b7c24 <_ZNSt14_Function_baseD1Ev>
   b841c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8420:	f7ff fc00 	bl	b7c24 <_ZNSt14_Function_baseD1Ev>
   b8424:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b8428:	f7ff fbfc 	bl	b7c24 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b842c:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b8430:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8434:	42ae      	cmp	r6, r5
   b8436:	d004      	beq.n	b8442 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b8438:	1d28      	adds	r0, r5, #4
   b843a:	f7ff ffa6 	bl	b838a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b843e:	3508      	adds	r5, #8
   b8440:	e7f8      	b.n	b8434 <__tcf_0+0x30>
    ::free(ptr);
   b8442:	69a0      	ldr	r0, [r4, #24]
   b8444:	f7ff fb04 	bl	b7a50 <free>
    ~BleLocalDeviceImpl() = default;
   b8448:	f104 000c 	add.w	r0, r4, #12
   b844c:	f7ff ffbe 	bl	b83cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b8450:	4620      	mov	r0, r4
   b8452:	f7ff ffa9 	bl	b83a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b8456:	4620      	mov	r0, r4
   b8458:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b845a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b845e:	f7fb be20 	b.w	b40a2 <_ZdlPvj>
   b8462:	bd70      	pop	{r4, r5, r6, pc}
   b8464:	2003e6c4 	.word	0x2003e6c4

000b8468 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b8468:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b846a:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b846c:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b8470:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b8474:	6803      	ldr	r3, [r0, #0]
   b8476:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b8478:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b847a:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b847c:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b847e:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b8480:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b8482:	f7ff ff82 	bl	b838a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b8486:	b002      	add	sp, #8
   b8488:	bd10      	pop	{r4, pc}

000b848a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b848a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b848c:	b510      	push	{r4, lr}
      if (_M_empty())
   b848e:	b90a      	cbnz	r2, b8494 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b8490:	f001 fe21 	bl	ba0d6 <_ZSt25__throw_bad_function_callv>
    }
   b8494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8498:	68c3      	ldr	r3, [r0, #12]
   b849a:	4718      	bx	r3

000b849c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b849c:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b849e:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b84a0:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b84a2:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b84a4:	dd03      	ble.n	b84ae <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b84a6:	f7ff fadb 	bl	b7a60 <realloc>
            if (!d) {
   b84aa:	b918      	cbnz	r0, b84b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b84ac:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b84ae:	f7ff facf 	bl	b7a50 <free>
        T* d = nullptr;
   b84b2:	2000      	movs	r0, #0
        data_ = d;
   b84b4:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b84b6:	60a5      	str	r5, [r4, #8]
        return true;
   b84b8:	2001      	movs	r0, #1
   b84ba:	e7f7      	b.n	b84ac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b84bc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b84bc:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b84be:	6883      	ldr	r3, [r0, #8]
   b84c0:	428b      	cmp	r3, r1
   b84c2:	da02      	bge.n	b84ca <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b84c4:	f7ff ffea 	bl	b849c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b84c8:	bd08      	pop	{r3, pc}
    return true;
   b84ca:	2001      	movs	r0, #1
   b84cc:	e7fc      	b.n	b84c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b84ce <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b84ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b84d2:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b84d4:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b84d6:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b84d8:	4419      	add	r1, r3
   b84da:	6883      	ldr	r3, [r0, #8]
   b84dc:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b84de:	4604      	mov	r4, r0
   b84e0:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b84e2:	dc12      	bgt.n	b850a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b84e4:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b84e6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b84e8:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b84ea:	1bd2      	subs	r2, r2, r7
   b84ec:	4631      	mov	r1, r6
   b84ee:	1970      	adds	r0, r6, r5
   b84f0:	f002 fe20 	bl	bb134 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b84f4:	462a      	mov	r2, r5
   b84f6:	4641      	mov	r1, r8
   b84f8:	4630      	mov	r0, r6
   b84fa:	f002 fe0d 	bl	bb118 <memcpy>
    size_ += n;
   b84fe:	6863      	ldr	r3, [r4, #4]
   b8500:	442b      	add	r3, r5
   b8502:	6063      	str	r3, [r4, #4]
    return true;
   b8504:	2001      	movs	r0, #1
}
   b8506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b850a:	f7ff ffc7 	bl	b849c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b850e:	2800      	cmp	r0, #0
   b8510:	d1e8      	bne.n	b84e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b8512:	e7f8      	b.n	b8506 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b8514 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8516:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8518:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b851c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b851e:	4604      	mov	r4, r0
   b8520:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8522:	da0b      	bge.n	b853c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b8524:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8526:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8528:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b852a:	1b52      	subs	r2, r2, r5
   b852c:	1c48      	adds	r0, r1, #1
   b852e:	f002 fe01 	bl	bb134 <memmove>
    new(p) T(std::move(value));
   b8532:	557e      	strb	r6, [r7, r5]
    ++size_;
   b8534:	6863      	ldr	r3, [r4, #4]
   b8536:	3301      	adds	r3, #1
   b8538:	6063      	str	r3, [r4, #4]
}
   b853a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b853c:	3101      	adds	r1, #1
   b853e:	f7ff ffad 	bl	b849c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8542:	2800      	cmp	r0, #0
   b8544:	d1ee      	bne.n	b8524 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b8546:	e7f8      	b.n	b853a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b8548 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8548:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b854a:	6841      	ldr	r1, [r0, #4]
   b854c:	f7ff bfe2 	b.w	b8514 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b8550 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b8550:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b8554:	4604      	mov	r4, r0
   b8556:	461d      	mov	r5, r3
   b8558:	460f      	mov	r7, r1
   b855a:	ab01      	add	r3, sp, #4
   b855c:	4690      	mov	r8, r2
   b855e:	460a      	mov	r2, r1
   b8560:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8564:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b8568:	f7ff fb10 	bl	b7b8c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b856c:	1cae      	adds	r6, r5, #2
   b856e:	6863      	ldr	r3, [r4, #4]
   b8570:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b8572:	f1b9 0f00 	cmp.w	r9, #0
   b8576:	d126      	bne.n	b85c6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b8578:	b328      	cbz	r0, b85c6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b857a:	4433      	add	r3, r6
   b857c:	1a1b      	subs	r3, r3, r0
   b857e:	2bff      	cmp	r3, #255	; 0xff
   b8580:	d809      	bhi.n	b8596 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b8582:	9901      	ldr	r1, [sp, #4]
   b8584:	4620      	mov	r0, r4
   b8586:	f7ff fe71 	bl	b826c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b858a:	6861      	ldr	r1, [r4, #4]
   b858c:	4620      	mov	r0, r4
   b858e:	4431      	add	r1, r6
   b8590:	f7ff ff94 	bl	b84bc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b8594:	b918      	cbnz	r0, b859e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b8596:	6860      	ldr	r0, [r4, #4]
}
   b8598:	b003      	add	sp, #12
   b859a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b859e:	1c6a      	adds	r2, r5, #1
   b85a0:	9901      	ldr	r1, [sp, #4]
   b85a2:	b2d2      	uxtb	r2, r2
   b85a4:	4620      	mov	r0, r4
   b85a6:	f7ff ffb5 	bl	b8514 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b85aa:	9901      	ldr	r1, [sp, #4]
   b85ac:	463a      	mov	r2, r7
   b85ae:	3101      	adds	r1, #1
   b85b0:	4620      	mov	r0, r4
   b85b2:	f7ff ffaf 	bl	b8514 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b85b6:	9901      	ldr	r1, [sp, #4]
   b85b8:	462b      	mov	r3, r5
   b85ba:	4642      	mov	r2, r8
   b85bc:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b85be:	4620      	mov	r0, r4
   b85c0:	f7ff ff85 	bl	b84ce <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b85c4:	e7e7      	b.n	b8596 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b85c6:	18f1      	adds	r1, r6, r3
   b85c8:	29ff      	cmp	r1, #255	; 0xff
   b85ca:	d8e4      	bhi.n	b8596 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b85cc:	4620      	mov	r0, r4
   b85ce:	f7ff ff75 	bl	b84bc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b85d2:	2800      	cmp	r0, #0
   b85d4:	d0df      	beq.n	b8596 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b85d6:	1c69      	adds	r1, r5, #1
   b85d8:	b2c9      	uxtb	r1, r1
   b85da:	4620      	mov	r0, r4
   b85dc:	f7ff ffb4 	bl	b8548 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b85e0:	4639      	mov	r1, r7
   b85e2:	4620      	mov	r0, r4
   b85e4:	f7ff ffb0 	bl	b8548 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b85e8:	6861      	ldr	r1, [r4, #4]
   b85ea:	462b      	mov	r3, r5
   b85ec:	4642      	mov	r2, r8
   b85ee:	e7e6      	b.n	b85be <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b85f0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b85f0:	b430      	push	{r4, r5}
   b85f2:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b85f6:	b11a      	cbz	r2, b8600 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b85f8:	9502      	str	r5, [sp, #8]
}
   b85fa:	bc30      	pop	{r4, r5}
   b85fc:	f7ff bfa8 	b.w	b8550 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b8600:	6840      	ldr	r0, [r0, #4]
}
   b8602:	bc30      	pop	{r4, r5}
   b8604:	4770      	bx	lr

000b8606 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b8606:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b8608:	2300      	movs	r3, #0
   b860a:	e9c0 3300 	strd	r3, r3, [r0]
   b860e:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b8610:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8612:	9300      	str	r3, [sp, #0]
   b8614:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b8616:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b861a:	4619      	mov	r1, r3
   b861c:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b8620:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8622:	f7ff ffe5 	bl	b85f0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b8626:	4620      	mov	r0, r4
   b8628:	b004      	add	sp, #16
   b862a:	bd10      	pop	{r4, pc}

000b862c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b862c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b862e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8630:	4604      	mov	r4, r0
   b8632:	460d      	mov	r5, r1
   b8634:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8636:	d914      	bls.n	b8662 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8638:	4290      	cmp	r0, r2
   b863a:	d213      	bcs.n	b8664 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b863c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8640:	1a75      	subs	r5, r6, r1
   b8642:	f1a1 0708 	sub.w	r7, r1, #8
   b8646:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8648:	42b7      	cmp	r7, r6
   b864a:	d018      	beq.n	b867e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b864c:	b11c      	cbz	r4, b8656 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b864e:	4631      	mov	r1, r6
   b8650:	4620      	mov	r0, r4
   b8652:	f7ff fe90 	bl	b8376 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b8656:	1d30      	adds	r0, r6, #4
   b8658:	f7ff fe97 	bl	b838a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b865c:	3e08      	subs	r6, #8
   b865e:	3c08      	subs	r4, #8
   b8660:	e7f2      	b.n	b8648 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8662:	d00c      	beq.n	b867e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8664:	42b5      	cmp	r5, r6
   b8666:	d00a      	beq.n	b867e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8668:	b11c      	cbz	r4, b8672 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b866a:	4629      	mov	r1, r5
   b866c:	4620      	mov	r0, r4
   b866e:	f7ff fe82 	bl	b8376 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8672:	1d28      	adds	r0, r5, #4
   b8674:	f7ff fe89 	bl	b838a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8678:	3508      	adds	r5, #8
   b867a:	3408      	adds	r4, #8
   b867c:	e7f2      	b.n	b8664 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b867e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8680 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8682:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8684:	6846      	ldr	r6, [r0, #4]
   b8686:	4668      	mov	r0, sp
   b8688:	f7ff fe75 	bl	b8376 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b868c:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b8690:	429f      	cmp	r7, r3
   b8692:	db12      	blt.n	b86ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b8694:	3701      	adds	r7, #1
        if (n > 0) {
   b8696:	2f00      	cmp	r7, #0
   b8698:	dd29      	ble.n	b86ee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b869a:	00f8      	lsls	r0, r7, #3
   b869c:	f7ff f9d0 	bl	b7a40 <malloc>
            if (!d) {
   b86a0:	4605      	mov	r5, r0
   b86a2:	b1f0      	cbz	r0, b86e2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b86a4:	e9d4 1200 	ldrd	r1, r2, [r4]
   b86a8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b86ac:	f7ff ffbe 	bl	b862c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b86b0:	6820      	ldr	r0, [r4, #0]
   b86b2:	f7ff f9cd 	bl	b7a50 <free>
        data_ = d;
   b86b6:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b86b8:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b86ba:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b86bc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b86be:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b86c2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b86c6:	4631      	mov	r1, r6
   b86c8:	f106 0008 	add.w	r0, r6, #8
   b86cc:	f7ff ffae 	bl	b862c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b86d0:	b11e      	cbz	r6, b86da <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b86d2:	4669      	mov	r1, sp
   b86d4:	4630      	mov	r0, r6
   b86d6:	f7ff fe4e 	bl	b8376 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b86da:	6863      	ldr	r3, [r4, #4]
   b86dc:	3301      	adds	r3, #1
   b86de:	6063      	str	r3, [r4, #4]
    return true;
   b86e0:	2501      	movs	r5, #1
   b86e2:	a801      	add	r0, sp, #4
   b86e4:	f7ff fe51 	bl	b838a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b86e8:	4628      	mov	r0, r5
   b86ea:	b003      	add	sp, #12
   b86ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b86ee:	2500      	movs	r5, #0
   b86f0:	e7de      	b.n	b86b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b86f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b86f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b86f4:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b86f8:	4605      	mov	r5, r0
   b86fa:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b86fc:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b8700:	42a6      	cmp	r6, r4
   b8702:	d005      	beq.n	b8710 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b8704:	4639      	mov	r1, r7
   b8706:	4620      	mov	r0, r4
   b8708:	f7ff fcff 	bl	b810a <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b870c:	b108      	cbz	r0, b8712 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b870e:	b914      	cbnz	r4, b8716 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b8710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b8712:	3408      	adds	r4, #8
   b8714:	e7f4      	b.n	b8700 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b8716:	1d20      	adds	r0, r4, #4
   b8718:	f7ff fe37 	bl	b838a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b871c:	e9d5 3200 	ldrd	r3, r2, [r5]
   b8720:	f104 0108 	add.w	r1, r4, #8
   b8724:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8728:	4620      	mov	r0, r4
   b872a:	f7ff ff7f 	bl	b862c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b872e:	686b      	ldr	r3, [r5, #4]
   b8730:	3b01      	subs	r3, #1
   b8732:	606b      	str	r3, [r5, #4]
    return true;
   b8734:	e7ec      	b.n	b8710 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b8738 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b8738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b873c:	4605      	mov	r5, r0
   b873e:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b8740:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b8742:	460c      	mov	r4, r1
        WiringBleLock lk;
   b8744:	f7ff faac 	bl	b7ca0 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b8748:	682e      	ldr	r6, [r5, #0]
   b874a:	1ef3      	subs	r3, r6, #3
   b874c:	2b0d      	cmp	r3, #13
   b874e:	d83c      	bhi.n	b87ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8750:	e8df f013 	tbh	[pc, r3, lsl #1]
   b8754:	0053000e 	.word	0x0053000e
   b8758:	00d1003b 	.word	0x00d1003b
   b875c:	003b003b 	.word	0x003b003b
   b8760:	003b003b 	.word	0x003b003b
   b8764:	009b003b 	.word	0x009b003b
   b8768:	009b009b 	.word	0x009b009b
   b876c:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b8770:	a804      	add	r0, sp, #16
   b8772:	f7ff fc95 	bl	b80a0 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b8776:	9b04      	ldr	r3, [sp, #16]
   b8778:	89aa      	ldrh	r2, [r5, #12]
   b877a:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b877c:	6869      	ldr	r1, [r5, #4]
   b877e:	9804      	ldr	r0, [sp, #16]
   b8780:	3108      	adds	r1, #8
   b8782:	3002      	adds	r0, #2
   b8784:	f7ff faa6 	bl	b7cd4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b8788:	a904      	add	r1, sp, #16
   b878a:	a806      	add	r0, sp, #24
   b878c:	f7ff fdf3 	bl	b8376 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b8790:	a906      	add	r1, sp, #24
   b8792:	f104 0018 	add.w	r0, r4, #24
   b8796:	f7ff ff73 	bl	b8680 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b879a:	4605      	mov	r5, r0
   b879c:	a807      	add	r0, sp, #28
   b879e:	f7ff fdf4 	bl	b838a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b87a2:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b87a4:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b87a6:	b9b5      	cbnz	r5, b87d6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b87a8:	4b5d      	ldr	r3, [pc, #372]	; (b8920 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b87aa:	495e      	ldr	r1, [pc, #376]	; (b8924 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b87ac:	9300      	str	r3, [sp, #0]
   b87ae:	2032      	movs	r0, #50	; 0x32
   b87b0:	462b      	mov	r3, r5
   b87b2:	aa06      	add	r2, sp, #24
   b87b4:	9507      	str	r5, [sp, #28]
   b87b6:	f7ff f8af 	bl	b7918 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b87ba:	9b04      	ldr	r3, [sp, #16]
   b87bc:	4629      	mov	r1, r5
   b87be:	8818      	ldrh	r0, [r3, #0]
   b87c0:	f7fe fef0 	bl	b75a4 <hal_ble_gap_disconnect>
   b87c4:	a805      	add	r0, sp, #20
   b87c6:	f7ff fde0 	bl	b838a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b87ca:	a803      	add	r0, sp, #12
   b87cc:	f7ff fa76 	bl	b7cbc <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b87d0:	b00e      	add	sp, #56	; 0x38
   b87d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b87d6:	4a54      	ldr	r2, [pc, #336]	; (b8928 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b87d8:	9200      	str	r2, [sp, #0]
   b87da:	2300      	movs	r3, #0
   b87dc:	4951      	ldr	r1, [pc, #324]	; (b8924 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b87de:	9307      	str	r3, [sp, #28]
   b87e0:	aa06      	add	r2, sp, #24
   b87e2:	2001      	movs	r0, #1
   b87e4:	f7ff f898 	bl	b7918 <log_message>
                if (impl->connectedCallback_) {
   b87e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b87ea:	2b00      	cmp	r3, #0
   b87ec:	d0ea      	beq.n	b87c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b87ee:	a904      	add	r1, sp, #16
   b87f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b87f4:	f7ff fe49 	bl	b848a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b87f8:	e7e4      	b.n	b87c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b87fa:	89a9      	ldrh	r1, [r5, #12]
   b87fc:	4620      	mov	r0, r4
   b87fe:	f7ff fba7 	bl	b7f50 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b8802:	4606      	mov	r6, r0
   b8804:	2800      	cmp	r0, #0
   b8806:	d0e0      	beq.n	b87ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b8808:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b880a:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b880e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8812:	8029      	strh	r1, [r5, #0]
   b8814:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b8818:	429a      	cmp	r2, r3
   b881a:	d003      	beq.n	b8824 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b881c:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b8820:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b8822:	e7f9      	b.n	b8818 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b8824:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b8828:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b882c:	45b8      	cmp	r8, r7
   b882e:	d004      	beq.n	b883a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b8830:	1d38      	adds	r0, r7, #4
   b8832:	f7ff fdaa 	bl	b838a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8836:	3708      	adds	r7, #8
   b8838:	e7f8      	b.n	b882c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b883a:	2300      	movs	r3, #0
   b883c:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b883e:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b8842:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b8846:	45b8      	cmp	r8, r7
   b8848:	d004      	beq.n	b8854 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b884a:	1d38      	adds	r0, r7, #4
   b884c:	f7ff fd9d 	bl	b838a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8850:	3708      	adds	r7, #8
   b8852:	e7f8      	b.n	b8846 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b8854:	2300      	movs	r3, #0
   b8856:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b8858:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b885a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b885c:	b123      	cbz	r3, b8868 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b885e:	4631      	mov	r1, r6
   b8860:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8864:	f7ff fe11 	bl	b848a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b8868:	2300      	movs	r3, #0
   b886a:	2220      	movs	r2, #32
   b886c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b8870:	4a2e      	ldr	r2, [pc, #184]	; (b892c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b8872:	9200      	str	r2, [sp, #0]
   b8874:	492b      	ldr	r1, [pc, #172]	; (b8924 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8876:	aa06      	add	r2, sp, #24
   b8878:	2001      	movs	r0, #1
   b887a:	f7ff f84d 	bl	b7918 <log_message>
                    impl->peers_.removeOne(*peer);
   b887e:	4631      	mov	r1, r6
   b8880:	f104 0018 	add.w	r0, r4, #24
   b8884:	f7ff ff35 	bl	b86f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b8888:	e79f      	b.n	b87ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b888a:	89a9      	ldrh	r1, [r5, #12]
   b888c:	4620      	mov	r0, r4
   b888e:	f7ff fb5f 	bl	b7f50 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b8892:	2800      	cmp	r0, #0
   b8894:	d099      	beq.n	b87ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b8896:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b8898:	2b00      	cmp	r3, #0
   b889a:	d096      	beq.n	b87ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b889c:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b889e:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b88a0:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b88a4:	d001      	beq.n	b88aa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b88a6:	2e10      	cmp	r6, #16
   b88a8:	d117      	bne.n	b88da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b88aa:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b88ac:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b88ae:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b88b0:	2506      	movs	r5, #6
                        };
   b88b2:	f88d 3015 	strb.w	r3, [sp, #21]
   b88b6:	9104      	str	r1, [sp, #16]
   b88b8:	f88d 2014 	strb.w	r2, [sp, #20]
   b88bc:	9006      	str	r0, [sp, #24]
   b88be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b88c2:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b88c4:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b88c8:	9508      	str	r5, [sp, #32]
   b88ca:	e883 0003 	stmia.w	r3, {r0, r1}
   b88ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b88d0:	a906      	add	r1, sp, #24
   b88d2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b88d6:	4798      	blx	r3
   b88d8:	e777      	b.n	b87ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b88da:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b88dc:	bf01      	itttt	eq
   b88de:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b88e0:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b88e2:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b88e6:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b88e8:	bf0f      	iteee	eq
   b88ea:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b88ee:	461a      	movne	r2, r3
   b88f0:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b88f2:	461d      	movne	r5, r3
   b88f4:	e7dd      	b.n	b88b2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b88f6:	89a9      	ldrh	r1, [r5, #12]
   b88f8:	4620      	mov	r0, r4
   b88fa:	f7ff fb29 	bl	b7f50 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b88fe:	4601      	mov	r1, r0
   b8900:	2800      	cmp	r0, #0
   b8902:	f43f af62 	beq.w	b87ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8906:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b8908:	2b00      	cmp	r3, #0
   b890a:	f43f af5e 	beq.w	b87ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b890e:	686b      	ldr	r3, [r5, #4]
   b8910:	9306      	str	r3, [sp, #24]
   b8912:	aa06      	add	r2, sp, #24
   b8914:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b8916:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b891a:	4798      	blx	r3
   b891c:	e755      	b.n	b87ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b891e:	bf00      	nop
   b8920:	000bd7ac 	.word	0x000bd7ac
   b8924:	000bd72b 	.word	0x000bd72b
   b8928:	000bd7d2 	.word	0x000bd7d2
   b892c:	000bd7ef 	.word	0x000bd7ef

000b8930 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b8930:	b513      	push	{r0, r1, r4, lr}
   b8932:	460b      	mov	r3, r1
   b8934:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8936:	e9d0 0100 	ldrd	r0, r1, [r0]
   b893a:	466c      	mov	r4, sp
   b893c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b8940:	e893 0003 	ldmia.w	r3, {r0, r1}
   b8944:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b8948:	e894 0003 	ldmia.w	r4, {r0, r1}
   b894c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b8950:	b002      	add	sp, #8
   b8952:	bd10      	pop	{r4, pc}

000b8954 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b8954:	b538      	push	{r3, r4, r5, lr}
   b8956:	4605      	mov	r5, r0
   b8958:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b895a:	f7ff ffe9 	bl	b8930 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b895e:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8960:	68a2      	ldr	r2, [r4, #8]
   b8962:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8964:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8966:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8968:	68e2      	ldr	r2, [r4, #12]
   b896a:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b896c:	60e3      	str	r3, [r4, #12]
      }
   b896e:	bd38      	pop	{r3, r4, r5, pc}

000b8970 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b8970:	b570      	push	{r4, r5, r6, lr}
   b8972:	4604      	mov	r4, r0
   b8974:	b08c      	sub	sp, #48	; 0x30
   b8976:	460e      	mov	r6, r1
   b8978:	9201      	str	r2, [sp, #4]
   b897a:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b897c:	f7ff fac8 	bl	b7f10 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b8980:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b8982:	9901      	ldr	r1, [sp, #4]
   b8984:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b8988:	f000 fd71 	bl	b946e <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b898c:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b8990:	b1cd      	cbz	r5, b89c6 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b8992:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b8994:	9502      	str	r5, [sp, #8]
   b8996:	a902      	add	r1, sp, #8
   b8998:	a804      	add	r0, sp, #16
   b899a:	9303      	str	r3, [sp, #12]
   b899c:	f7ff fcb4 	bl	b8308 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b89a0:	2300      	movs	r3, #0
	__x.swap(*this);
   b89a2:	a908      	add	r1, sp, #32
   b89a4:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b89a6:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b89a8:	f7ff ffd4 	bl	b8954 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b89ac:	4631      	mov	r1, r6
   b89ae:	a808      	add	r0, sp, #32
   b89b0:	f7ff ffd0 	bl	b8954 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b89b4:	a808      	add	r0, sp, #32
   b89b6:	f7ff f935 	bl	b7c24 <_ZNSt14_Function_baseD1Ev>
   b89ba:	a804      	add	r0, sp, #16
   b89bc:	f7ff f932 	bl	b7c24 <_ZNSt14_Function_baseD1Ev>
    }
   b89c0:	4620      	mov	r0, r4
   b89c2:	b00c      	add	sp, #48	; 0x30
   b89c4:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b89c6:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b89c8:	e7ea      	b.n	b89a0 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b89cc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b89cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b89d0:	b087      	sub	sp, #28
   b89d2:	461d      	mov	r5, r3
   b89d4:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b89d8:	4680      	mov	r8, r0
   b89da:	468b      	mov	fp, r1
   b89dc:	4692      	mov	sl, r2
   b89de:	9912      	ldr	r1, [sp, #72]	; 0x48
   b89e0:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b89e2:	2200      	movs	r2, #0
   b89e4:	2068      	movs	r0, #104	; 0x68
   b89e6:	9102      	str	r1, [sp, #8]
   b89e8:	9204      	str	r2, [sp, #16]
   b89ea:	f7fb fb54 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b89ee:	1e06      	subs	r6, r0, #0
   b89f0:	f106 090c 	add.w	r9, r6, #12
   b89f4:	d018      	beq.n	b8a28 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b89f6:	2201      	movs	r2, #1
	: _M_impl(__a)
   b89f8:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b89fa:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b89fe:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b8a00:	4a15      	ldr	r2, [pc, #84]	; (b8a58 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b8a02:	f847 2b20 	str.w	r2, [r7], #32
   b8a06:	9b03      	ldr	r3, [sp, #12]
   b8a08:	9100      	str	r1, [sp, #0]
   b8a0a:	465a      	mov	r2, fp
   b8a0c:	4651      	mov	r1, sl
   b8a0e:	4648      	mov	r0, r9
   b8a10:	f7ff ffae 	bl	b8970 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b8a14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8a16:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b8a18:	682b      	ldr	r3, [r5, #0]
   b8a1a:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b8a1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8a1e:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b8a22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8a24:	6823      	ldr	r3, [r4, #0]
   b8a26:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b8a28:	a904      	add	r1, sp, #16
   b8a2a:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b8a2c:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b8a30:	f7ff fd1a 	bl	b8468 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b8a34:	a805      	add	r0, sp, #20
   b8a36:	f7ff fca8 	bl	b838a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b8a3a:	f8d8 3000 	ldr.w	r3, [r8]
   b8a3e:	b93b      	cbnz	r3, b8a50 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b8a40:	4a06      	ldr	r2, [pc, #24]	; (b8a5c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b8a42:	4907      	ldr	r1, [pc, #28]	; (b8a60 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b8a44:	200a      	movs	r0, #10
}
   b8a46:	b007      	add	sp, #28
   b8a48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b8a4c:	f7fe bf5c 	b.w	b7908 <panic_>
}
   b8a50:	b007      	add	sp, #28
   b8a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8a56:	bf00      	nop
   b8a58:	000bd868 	.word	0x000bd868
   b8a5c:	000b7699 	.word	0x000b7699
   b8a60:	000bd714 	.word	0x000bd714

000b8a64 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8a64:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8a66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8a68:	4604      	mov	r4, r0
   b8a6a:	460d      	mov	r5, r1
   b8a6c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8a6e:	d914      	bls.n	b8a9a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8a70:	4290      	cmp	r0, r2
   b8a72:	d213      	bcs.n	b8a9c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8a74:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8a78:	1a75      	subs	r5, r6, r1
   b8a7a:	f1a1 0708 	sub.w	r7, r1, #8
   b8a7e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8a80:	42b7      	cmp	r7, r6
   b8a82:	d018      	beq.n	b8ab6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8a84:	b11c      	cbz	r4, b8a8e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8a86:	4631      	mov	r1, r6
   b8a88:	4620      	mov	r0, r4
   b8a8a:	f7ff fc6a 	bl	b8362 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8a8e:	1d30      	adds	r0, r6, #4
   b8a90:	f7ff fc7b 	bl	b838a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8a94:	3e08      	subs	r6, #8
   b8a96:	3c08      	subs	r4, #8
   b8a98:	e7f2      	b.n	b8a80 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8a9a:	d00c      	beq.n	b8ab6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8a9c:	42b5      	cmp	r5, r6
   b8a9e:	d00a      	beq.n	b8ab6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8aa0:	b11c      	cbz	r4, b8aaa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8aa2:	4629      	mov	r1, r5
   b8aa4:	4620      	mov	r0, r4
   b8aa6:	f7ff fc5c 	bl	b8362 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8aaa:	1d28      	adds	r0, r5, #4
   b8aac:	f7ff fc6d 	bl	b838a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8ab0:	3508      	adds	r5, #8
   b8ab2:	3408      	adds	r4, #8
   b8ab4:	e7f2      	b.n	b8a9c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8ab8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b8ab8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8aba:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8abc:	4605      	mov	r5, r0
        if (n > 0) {
   b8abe:	dd11      	ble.n	b8ae4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b8ac0:	00f0      	lsls	r0, r6, #3
   b8ac2:	f7fe ffbd 	bl	b7a40 <malloc>
            if (!d) {
   b8ac6:	4604      	mov	r4, r0
   b8ac8:	b158      	cbz	r0, b8ae2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b8aca:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8ace:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8ad2:	f7ff ffc7 	bl	b8a64 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8ad6:	6828      	ldr	r0, [r5, #0]
   b8ad8:	f7fe ffba 	bl	b7a50 <free>
        data_ = d;
   b8adc:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8ade:	60ae      	str	r6, [r5, #8]
        return true;
   b8ae0:	2001      	movs	r0, #1
    }
   b8ae2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b8ae4:	2400      	movs	r4, #0
   b8ae6:	e7f6      	b.n	b8ad6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b8ae8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8ae8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8aea:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8aec:	6845      	ldr	r5, [r0, #4]
   b8aee:	4668      	mov	r0, sp
   b8af0:	f7ff fc37 	bl	b8362 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8af4:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b8af8:	4299      	cmp	r1, r3
   b8afa:	da10      	bge.n	b8b1e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b8afc:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8afe:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8b00:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b8b04:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8b08:	4629      	mov	r1, r5
   b8b0a:	f105 0008 	add.w	r0, r5, #8
   b8b0e:	f7ff ffa9 	bl	b8a64 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8b12:	b98d      	cbnz	r5, b8b38 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b8b14:	6863      	ldr	r3, [r4, #4]
   b8b16:	3301      	adds	r3, #1
   b8b18:	6063      	str	r3, [r4, #4]
    return true;
   b8b1a:	2601      	movs	r6, #1
   b8b1c:	e006      	b.n	b8b2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8b1e:	3101      	adds	r1, #1
   b8b20:	4620      	mov	r0, r4
   b8b22:	f7ff ffc9 	bl	b8ab8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8b26:	4606      	mov	r6, r0
   b8b28:	2800      	cmp	r0, #0
   b8b2a:	d1e7      	bne.n	b8afc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b8b2c:	a801      	add	r0, sp, #4
   b8b2e:	f7ff fc2c 	bl	b838a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8b32:	4630      	mov	r0, r6
   b8b34:	b002      	add	sp, #8
   b8b36:	bd70      	pop	{r4, r5, r6, pc}
   b8b38:	4669      	mov	r1, sp
   b8b3a:	4628      	mov	r0, r5
   b8b3c:	f7ff fc11 	bl	b8362 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8b40:	e7e8      	b.n	b8b14 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b8b42 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8b42:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8b46:	4604      	mov	r4, r0
   b8b48:	460d      	mov	r5, r1
   b8b4a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8b4c:	d914      	bls.n	b8b78 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8b4e:	4290      	cmp	r0, r2
   b8b50:	d213      	bcs.n	b8b7a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8b52:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8b56:	1a75      	subs	r5, r6, r1
   b8b58:	f1a1 0708 	sub.w	r7, r1, #8
   b8b5c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8b5e:	42b7      	cmp	r7, r6
   b8b60:	d018      	beq.n	b8b94 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8b62:	b11c      	cbz	r4, b8b6c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b8b64:	4631      	mov	r1, r6
   b8b66:	4620      	mov	r0, r4
   b8b68:	f7ff fbed 	bl	b8346 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8b6c:	1d30      	adds	r0, r6, #4
   b8b6e:	f7ff fc0c 	bl	b838a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8b72:	3e08      	subs	r6, #8
   b8b74:	3c08      	subs	r4, #8
   b8b76:	e7f2      	b.n	b8b5e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8b78:	d00c      	beq.n	b8b94 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8b7a:	42b5      	cmp	r5, r6
   b8b7c:	d00a      	beq.n	b8b94 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8b7e:	b11c      	cbz	r4, b8b88 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8b80:	4629      	mov	r1, r5
   b8b82:	4620      	mov	r0, r4
   b8b84:	f7ff fbdf 	bl	b8346 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8b88:	1d28      	adds	r0, r5, #4
   b8b8a:	f7ff fbfe 	bl	b838a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8b8e:	3508      	adds	r5, #8
   b8b90:	3408      	adds	r4, #8
   b8b92:	e7f2      	b.n	b8b7a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8b96 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b8b96:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8b98:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8b9a:	4605      	mov	r5, r0
        if (n > 0) {
   b8b9c:	dd11      	ble.n	b8bc2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b8b9e:	00f0      	lsls	r0, r6, #3
   b8ba0:	f7fe ff4e 	bl	b7a40 <malloc>
            if (!d) {
   b8ba4:	4604      	mov	r4, r0
   b8ba6:	b158      	cbz	r0, b8bc0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b8ba8:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8bac:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8bb0:	f7ff ffc7 	bl	b8b42 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8bb4:	6828      	ldr	r0, [r5, #0]
   b8bb6:	f7fe ff4b 	bl	b7a50 <free>
        data_ = d;
   b8bba:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8bbc:	60ae      	str	r6, [r5, #8]
        return true;
   b8bbe:	2001      	movs	r0, #1
    }
   b8bc0:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b8bc2:	2400      	movs	r4, #0
   b8bc4:	e7f6      	b.n	b8bb4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b8bc6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8bc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8bc8:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8bca:	6845      	ldr	r5, [r0, #4]
   b8bcc:	4668      	mov	r0, sp
   b8bce:	f7ff fbba 	bl	b8346 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8bd2:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b8bd6:	4299      	cmp	r1, r3
   b8bd8:	da10      	bge.n	b8bfc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b8bda:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8bdc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8bde:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b8be2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8be6:	4629      	mov	r1, r5
   b8be8:	f105 0008 	add.w	r0, r5, #8
   b8bec:	f7ff ffa9 	bl	b8b42 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8bf0:	b98d      	cbnz	r5, b8c16 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b8bf2:	6863      	ldr	r3, [r4, #4]
   b8bf4:	3301      	adds	r3, #1
   b8bf6:	6063      	str	r3, [r4, #4]
    return true;
   b8bf8:	2601      	movs	r6, #1
   b8bfa:	e006      	b.n	b8c0a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8bfc:	3101      	adds	r1, #1
   b8bfe:	4620      	mov	r0, r4
   b8c00:	f7ff ffc9 	bl	b8b96 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8c04:	4606      	mov	r6, r0
   b8c06:	2800      	cmp	r0, #0
   b8c08:	d1e7      	bne.n	b8bda <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b8c0a:	a801      	add	r0, sp, #4
   b8c0c:	f7ff fbbd 	bl	b838a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8c10:	4630      	mov	r0, r6
   b8c12:	b002      	add	sp, #8
   b8c14:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b8c16:	4669      	mov	r1, sp
   b8c18:	4628      	mov	r0, r5
   b8c1a:	f7ff fb94 	bl	b8346 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8c1e:	e7e8      	b.n	b8bf2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b8c20 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b8c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8c24:	4617      	mov	r7, r2
   b8c26:	b0a1      	sub	sp, #132	; 0x84
   b8c28:	4680      	mov	r8, r0
    WiringBleLock lk;
   b8c2a:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b8c2c:	460e      	mov	r6, r1
    WiringBleLock lk;
   b8c2e:	f7ff f837 	bl	b7ca0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b8c32:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b8c34:	7923      	ldrb	r3, [r4, #4]
   b8c36:	b953      	cbnz	r3, b8c4e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b8c38:	4639      	mov	r1, r7
   b8c3a:	4640      	mov	r0, r8
   b8c3c:	f7ff fb83 	bl	b8346 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b8c40:	a80a      	add	r0, sp, #40	; 0x28
   b8c42:	f7ff f83b 	bl	b7cbc <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b8c46:	4640      	mov	r0, r8
   b8c48:	b021      	add	sp, #132	; 0x84
   b8c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b8c4e:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b8c50:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b8c54:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b8c58:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b8c5a:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b8c5e:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b8c62:	9b03      	ldr	r3, [sp, #12]
   b8c64:	429d      	cmp	r5, r3
   b8c66:	d021      	beq.n	b8cac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b8c68:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b8c6c:	4658      	mov	r0, fp
   b8c6e:	f109 0114 	add.w	r1, r9, #20
   b8c72:	f7ff f8c2 	bl	b7dfa <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b8c76:	b1b8      	cbz	r0, b8ca8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b8c78:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b8c7c:	4650      	mov	r0, sl
   b8c7e:	f7ff f8bc 	bl	b7dfa <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b8c82:	b188      	cbz	r0, b8ca8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b8c84:	6823      	ldr	r3, [r4, #0]
   b8c86:	f8d9 2000 	ldr.w	r2, [r9]
   b8c8a:	4053      	eors	r3, r2
   b8c8c:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b8c90:	d10a      	bne.n	b8ca8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b8c92:	2220      	movs	r2, #32
   b8c94:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b8c98:	4a5e      	ldr	r2, [pc, #376]	; (b8e14 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b8c9a:	9200      	str	r2, [sp, #0]
   b8c9c:	aa15      	add	r2, sp, #84	; 0x54
   b8c9e:	495e      	ldr	r1, [pc, #376]	; (b8e18 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b8ca0:	2032      	movs	r0, #50	; 0x32
   b8ca2:	f7fe fe39 	bl	b7918 <log_message>
   b8ca6:	e7c7      	b.n	b8c38 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b8ca8:	3508      	adds	r5, #8
   b8caa:	e7da      	b.n	b8c62 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b8cac:	4650      	mov	r0, sl
   b8cae:	f7ff f875 	bl	b7d9c <_ZNK8particle7BleUuid7isValidEv>
   b8cb2:	b960      	cbnz	r0, b8cce <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b8cb4:	4959      	ldr	r1, [pc, #356]	; (b8e1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b8cb6:	2201      	movs	r2, #1
   b8cb8:	a815      	add	r0, sp, #84	; 0x54
   b8cba:	ad15      	add	r5, sp, #84	; 0x54
   b8cbc:	f7ff f846 	bl	b7d4c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b8cc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8cc2:	46d4      	mov	ip, sl
   b8cc4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b8cc8:	682b      	ldr	r3, [r5, #0]
   b8cca:	f8cc 3000 	str.w	r3, [ip]
   b8cce:	6833      	ldr	r3, [r6, #0]
   b8cd0:	e9d3 5300 	ldrd	r5, r3, [r3]
   b8cd4:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b8cd8:	455d      	cmp	r5, fp
   b8cda:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b8cdc:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b8cde:	d06e      	beq.n	b8dbe <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b8ce0:	f855 0b08 	ldr.w	r0, [r5], #8
   b8ce4:	f7ff f889 	bl	b7dfa <_ZNK8particle7BleUuideqERKS0_>
   b8ce8:	2800      	cmp	r0, #0
   b8cea:	d0f5      	beq.n	b8cd8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b8cec:	f104 0a14 	add.w	sl, r4, #20
   b8cf0:	4650      	mov	r0, sl
   b8cf2:	f7ff f853 	bl	b7d9c <_ZNK8particle7BleUuid7isValidEv>
   b8cf6:	b988      	cbnz	r0, b8d1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b8cf8:	4b49      	ldr	r3, [pc, #292]	; (b8e20 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b8cfa:	4948      	ldr	r1, [pc, #288]	; (b8e1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b8cfc:	881a      	ldrh	r2, [r3, #0]
   b8cfe:	3201      	adds	r2, #1
   b8d00:	b292      	uxth	r2, r2
   b8d02:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b8d04:	a815      	add	r0, sp, #84	; 0x54
   b8d06:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b8d08:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b8d0a:	f7ff f83e 	bl	b7d8a <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b8d0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8d10:	46d4      	mov	ip, sl
   b8d12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b8d16:	682b      	ldr	r3, [r5, #0]
   b8d18:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b8d1c:	4b41      	ldr	r3, [pc, #260]	; (b8e24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b8d1e:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b8d20:	2228      	movs	r2, #40	; 0x28
   b8d22:	2100      	movs	r1, #0
   b8d24:	a816      	add	r0, sp, #88	; 0x58
   b8d26:	f002 fa1f 	bl	bb168 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b8d2a:	4651      	mov	r1, sl
   b8d2c:	a804      	add	r0, sp, #16
   b8d2e:	f7ff f847 	bl	b7dc0 <_ZN8particle7BleUuid7halUUIDEv>
   b8d32:	ab04      	add	r3, sp, #16
   b8d34:	aa18      	add	r2, sp, #96	; 0x60
   b8d36:	f10d 0c20 	add.w	ip, sp, #32
   b8d3a:	6818      	ldr	r0, [r3, #0]
   b8d3c:	6859      	ldr	r1, [r3, #4]
   b8d3e:	4615      	mov	r5, r2
   b8d40:	c503      	stmia	r5!, {r0, r1}
   b8d42:	3308      	adds	r3, #8
   b8d44:	4563      	cmp	r3, ip
   b8d46:	462a      	mov	r2, r5
   b8d48:	d1f7      	bne.n	b8d3a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b8d4a:	6818      	ldr	r0, [r3, #0]
   b8d4c:	6028      	str	r0, [r5, #0]
    return value_;
   b8d4e:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b8d50:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b8d54:	f8d9 3000 	ldr.w	r3, [r9]
   b8d58:	8a9b      	ldrh	r3, [r3, #20]
   b8d5a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b8d5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8d60:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b8d62:	4b31      	ldr	r3, [pc, #196]	; (b8e28 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b8d64:	2200      	movs	r2, #0
   b8d66:	1da1      	adds	r1, r4, #6
   b8d68:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b8d6a:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b8d6e:	f7fe fc4b 	bl	b7608 <hal_ble_gatt_server_add_characteristic>
   b8d72:	2800      	cmp	r0, #0
   b8d74:	f47f af60 	bne.w	b8c38 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b8d78:	2301      	movs	r3, #1
   b8d7a:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b8d7c:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b8d7e:	4639      	mov	r1, r7
        return characteristics_;
   b8d80:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b8d82:	a80d      	add	r0, sp, #52	; 0x34
   b8d84:	f7ff fadf 	bl	b8346 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8d88:	4620      	mov	r0, r4
   b8d8a:	a90d      	add	r1, sp, #52	; 0x34
   b8d8c:	f7ff ff1b 	bl	b8bc6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b8d90:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b8d92:	a80e      	add	r0, sp, #56	; 0x38
   b8d94:	f7ff faf9 	bl	b838a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8d98:	2c00      	cmp	r4, #0
   b8d9a:	f47f af4d 	bne.w	b8c38 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b8d9e:	2320      	movs	r3, #32
   b8da0:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b8da4:	4b21      	ldr	r3, [pc, #132]	; (b8e2c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b8da6:	9300      	str	r3, [sp, #0]
   b8da8:	aa0d      	add	r2, sp, #52	; 0x34
   b8daa:	4623      	mov	r3, r4
   b8dac:	e777      	b.n	b8c9e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b8dae:	4639      	mov	r1, r7
   b8db0:	4640      	mov	r0, r8
   b8db2:	f7ff fac8 	bl	b8346 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8db6:	a80c      	add	r0, sp, #48	; 0x30
   b8db8:	f7ff fae7 	bl	b838a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8dbc:	e740      	b.n	b8c40 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b8dbe:	a80b      	add	r0, sp, #44	; 0x2c
   b8dc0:	f7ff f94a 	bl	b8058 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b8dc4:	4651      	mov	r1, sl
   b8dc6:	a815      	add	r0, sp, #84	; 0x54
   b8dc8:	f7fe fffa 	bl	b7dc0 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b8dcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8dce:	2300      	movs	r3, #0
   b8dd0:	3214      	adds	r2, #20
   b8dd2:	a915      	add	r1, sp, #84	; 0x54
   b8dd4:	2001      	movs	r0, #1
   b8dd6:	f7fe fbef 	bl	b75b8 <hal_ble_gatt_server_add_service>
   b8dda:	2800      	cmp	r0, #0
   b8ddc:	d1e7      	bne.n	b8dae <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b8dde:	6835      	ldr	r5, [r6, #0]
   b8de0:	a90b      	add	r1, sp, #44	; 0x2c
   b8de2:	a80d      	add	r0, sp, #52	; 0x34
   b8de4:	f7ff fabd 	bl	b8362 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b8de8:	4628      	mov	r0, r5
   b8dea:	a90d      	add	r1, sp, #52	; 0x34
   b8dec:	f7ff fe7c 	bl	b8ae8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b8df0:	4605      	mov	r5, r0
   b8df2:	a80e      	add	r0, sp, #56	; 0x38
   b8df4:	f7ff fac9 	bl	b838a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8df8:	2d00      	cmp	r5, #0
   b8dfa:	d0d8      	beq.n	b8dae <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b8dfc:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b8dfe:	6853      	ldr	r3, [r2, #4]
   b8e00:	6812      	ldr	r2, [r2, #0]
   b8e02:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b8e06:	3b01      	subs	r3, #1
   b8e08:	a80c      	add	r0, sp, #48	; 0x30
   b8e0a:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b8e0e:	f7ff fabc 	bl	b838a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8e12:	e76b      	b.n	b8cec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b8e14:	000bd80e 	.word	0x000bd80e
   b8e18:	000bd72b 	.word	0x000bd72b
   b8e1c:	000bd8d2 	.word	0x000bd8d2
   b8e20:	2003e6bc 	.word	0x2003e6bc
   b8e24:	002c0003 	.word	0x002c0003
   b8e28:	000b81f1 	.word	0x000b81f1
   b8e2c:	000bd839 	.word	0x000bd839

000b8e30 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b8e30:	4802      	ldr	r0, [pc, #8]	; (b8e3c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b8e32:	2300      	movs	r3, #0
   b8e34:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b8e36:	f7fe bc0f 	b.w	b7658 <os_mutex_recursive_create>
   b8e3a:	bf00      	nop
   b8e3c:	2003e6c0 	.word	0x2003e6c0

000b8e40 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8e40:	2200      	movs	r2, #0
   b8e42:	6840      	ldr	r0, [r0, #4]
   b8e44:	4611      	mov	r1, r2
   b8e46:	f7fe bdd3 	b.w	b79f0 <network_listening>

000b8e4a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8e4a:	2200      	movs	r2, #0
   b8e4c:	6840      	ldr	r0, [r0, #4]
   b8e4e:	4611      	mov	r1, r2
   b8e50:	f7fe bdde 	b.w	b7a10 <network_get_listen_timeout>

000b8e54 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8e54:	6840      	ldr	r0, [r0, #4]
   b8e56:	2200      	movs	r2, #0
   b8e58:	f7fe bdd2 	b.w	b7a00 <network_set_listen_timeout>

000b8e5c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8e5c:	6840      	ldr	r0, [r0, #4]
   b8e5e:	2200      	movs	r2, #0
   b8e60:	f081 0101 	eor.w	r1, r1, #1
   b8e64:	f7fe bdbc 	b.w	b79e0 <network_listen>

000b8e68 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8e68:	2300      	movs	r3, #0
   b8e6a:	6840      	ldr	r0, [r0, #4]
   b8e6c:	461a      	mov	r2, r3
   b8e6e:	4619      	mov	r1, r3
   b8e70:	f7fe bdae 	b.w	b79d0 <network_off>

000b8e74 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8e74:	2300      	movs	r3, #0
   b8e76:	6840      	ldr	r0, [r0, #4]
   b8e78:	461a      	mov	r2, r3
   b8e7a:	4619      	mov	r1, r3
   b8e7c:	f7fe bda0 	b.w	b79c0 <network_on>

000b8e80 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b8e80:	2200      	movs	r2, #0
   b8e82:	6840      	ldr	r0, [r0, #4]
   b8e84:	4611      	mov	r1, r2
   b8e86:	f7fe bd93 	b.w	b79b0 <network_ready>

000b8e8a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8e8a:	2200      	movs	r2, #0
   b8e8c:	6840      	ldr	r0, [r0, #4]
   b8e8e:	4611      	mov	r1, r2
   b8e90:	f7fe bd7e 	b.w	b7990 <network_connecting>

000b8e94 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8e94:	6840      	ldr	r0, [r0, #4]
   b8e96:	2200      	movs	r2, #0
   b8e98:	2102      	movs	r1, #2
   b8e9a:	f7fe bd81 	b.w	b79a0 <network_disconnect>

000b8e9e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8e9e:	2300      	movs	r3, #0
   b8ea0:	6840      	ldr	r0, [r0, #4]
   b8ea2:	461a      	mov	r2, r3
   b8ea4:	f7fe bd6c 	b.w	b7980 <network_connect>

000b8ea8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b8ea8:	4b02      	ldr	r3, [pc, #8]	; (b8eb4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b8eaa:	2203      	movs	r2, #3
   b8eac:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b8eae:	4a02      	ldr	r2, [pc, #8]	; (b8eb8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b8eb0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b8eb2:	4770      	bx	lr
   b8eb4:	2003e6c8 	.word	0x2003e6c8
   b8eb8:	000bd8fc 	.word	0x000bd8fc

000b8ebc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b8ebc:	4770      	bx	lr

000b8ebe <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b8ebe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8ec0:	4606      	mov	r6, r0
   b8ec2:	4615      	mov	r5, r2
   b8ec4:	460c      	mov	r4, r1
   b8ec6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b8ec8:	42bc      	cmp	r4, r7
   b8eca:	d006      	beq.n	b8eda <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b8ecc:	6833      	ldr	r3, [r6, #0]
   b8ece:	f814 1b01 	ldrb.w	r1, [r4], #1
   b8ed2:	689b      	ldr	r3, [r3, #8]
   b8ed4:	4630      	mov	r0, r6
   b8ed6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b8ed8:	e7f6      	b.n	b8ec8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b8eda:	4628      	mov	r0, r5
   b8edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8ede <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b8ede:	7c00      	ldrb	r0, [r0, #16]
   b8ee0:	2200      	movs	r2, #0
   b8ee2:	f7fe bc09 	b.w	b76f8 <hal_i2c_write>

000b8ee6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b8ee6:	7c00      	ldrb	r0, [r0, #16]
   b8ee8:	2100      	movs	r1, #0
   b8eea:	f7fe bc0d 	b.w	b7708 <hal_i2c_available>

000b8eee <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b8eee:	7c00      	ldrb	r0, [r0, #16]
   b8ef0:	2100      	movs	r1, #0
   b8ef2:	f7fe bc11 	b.w	b7718 <hal_i2c_read>

000b8ef6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b8ef6:	7c00      	ldrb	r0, [r0, #16]
   b8ef8:	2100      	movs	r1, #0
   b8efa:	f7fe bc15 	b.w	b7728 <hal_i2c_peek>

000b8efe <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b8efe:	7c00      	ldrb	r0, [r0, #16]
   b8f00:	2100      	movs	r1, #0
   b8f02:	f7fe bc19 	b.w	b7738 <hal_i2c_flush>

000b8f06 <_ZN7TwoWireD0Ev>:
   b8f06:	b510      	push	{r4, lr}
   b8f08:	2114      	movs	r1, #20
   b8f0a:	4604      	mov	r4, r0
   b8f0c:	f7fb f8c9 	bl	b40a2 <_ZdlPvj>
   b8f10:	4620      	mov	r0, r4
   b8f12:	bd10      	pop	{r4, pc}

000b8f14 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8f14:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b8f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8f1a:	4604      	mov	r4, r0
   b8f1c:	4608      	mov	r0, r1
   b8f1e:	2100      	movs	r1, #0
   b8f20:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8f24:	4b03      	ldr	r3, [pc, #12]	; (b8f34 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b8f26:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b8f28:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b8f2a:	4611      	mov	r1, r2
   b8f2c:	f7fe fc0c 	bl	b7748 <hal_i2c_init>
}
   b8f30:	4620      	mov	r0, r4
   b8f32:	bd10      	pop	{r4, pc}
   b8f34:	000bd938 	.word	0x000bd938

000b8f38 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b8f38:	2300      	movs	r3, #0
   b8f3a:	7c00      	ldrb	r0, [r0, #16]
   b8f3c:	461a      	mov	r2, r3
   b8f3e:	4619      	mov	r1, r3
   b8f40:	f7fe bbc2 	b.w	b76c8 <hal_i2c_begin>

000b8f44 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b8f44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b8f46:	2200      	movs	r2, #0
   b8f48:	2314      	movs	r3, #20
   b8f4a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b8f4e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b8f52:	780b      	ldrb	r3, [r1, #0]
   b8f54:	f88d 3008 	strb.w	r3, [sp, #8]
   b8f58:	684b      	ldr	r3, [r1, #4]
   b8f5a:	9303      	str	r3, [sp, #12]
   b8f5c:	68cb      	ldr	r3, [r1, #12]
   b8f5e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b8f60:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b8f62:	7a0b      	ldrb	r3, [r1, #8]
   b8f64:	9305      	str	r3, [sp, #20]
   b8f66:	a901      	add	r1, sp, #4
   b8f68:	f7fe fbf6 	bl	b7758 <hal_i2c_request_ex>
}
   b8f6c:	b007      	add	sp, #28
   b8f6e:	f85d fb04 	ldr.w	pc, [sp], #4

000b8f72 <_ZN7TwoWire11requestFromEhjh>:
{
   b8f72:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b8f74:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b8f76:	f88d 1000 	strb.w	r1, [sp]
   b8f7a:	f04f 0164 	mov.w	r1, #100	; 0x64
   b8f7e:	9103      	str	r1, [sp, #12]
   b8f80:	bf18      	it	ne
   b8f82:	2301      	movne	r3, #1
   b8f84:	4669      	mov	r1, sp
    size_ = size;
   b8f86:	9201      	str	r2, [sp, #4]
   b8f88:	f88d 3008 	strb.w	r3, [sp, #8]
   b8f8c:	f7ff ffda 	bl	b8f44 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b8f90:	b005      	add	sp, #20
   b8f92:	f85d fb04 	ldr.w	pc, [sp], #4

000b8f96 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b8f96:	2301      	movs	r3, #1
   b8f98:	f7ff bfeb 	b.w	b8f72 <_ZN7TwoWire11requestFromEhjh>

000b8f9c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b8f9c:	7c00      	ldrb	r0, [r0, #16]
   b8f9e:	2200      	movs	r2, #0
   b8fa0:	f7fe bb9a 	b.w	b76d8 <hal_i2c_begin_transmission>

000b8fa4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b8fa4:	b2c9      	uxtb	r1, r1
   b8fa6:	f7ff bff9 	b.w	b8f9c <_ZN7TwoWire17beginTransmissionEh>

000b8faa <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b8faa:	7c00      	ldrb	r0, [r0, #16]
   b8fac:	2200      	movs	r2, #0
   b8fae:	f7fe bb9b 	b.w	b76e8 <hal_i2c_end_transmission>

000b8fb2 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b8fb2:	2101      	movs	r1, #1
   b8fb4:	f7ff bff9 	b.w	b8faa <_ZN7TwoWire15endTransmissionEh>

000b8fb8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b8fb8:	4770      	bx	lr

000b8fba <_ZN9IPAddressD0Ev>:
   b8fba:	b510      	push	{r4, lr}
   b8fbc:	2118      	movs	r1, #24
   b8fbe:	4604      	mov	r4, r0
   b8fc0:	f7fb f86f 	bl	b40a2 <_ZdlPvj>
   b8fc4:	4620      	mov	r0, r4
   b8fc6:	bd10      	pop	{r4, pc}

000b8fc8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b8fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b8fca:	7d03      	ldrb	r3, [r0, #20]
   b8fcc:	2b06      	cmp	r3, #6
{
   b8fce:	b08d      	sub	sp, #52	; 0x34
   b8fd0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8fd2:	f100 0704 	add.w	r7, r0, #4
   b8fd6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b8fda:	d012      	beq.n	b9002 <_ZNK9IPAddress7printToER5Print+0x3a>
   b8fdc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8fe0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8fe4:	220a      	movs	r2, #10
   b8fe6:	4630      	mov	r0, r6
   b8fe8:	f000 f973 	bl	b92d2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b8fec:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b8fee:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b8ff0:	d019      	beq.n	b9026 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b8ff2:	2c00      	cmp	r4, #0
   b8ff4:	d0f4      	beq.n	b8fe0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b8ff6:	212e      	movs	r1, #46	; 0x2e
   b8ff8:	4630      	mov	r0, r6
   b8ffa:	f000 f951 	bl	b92a0 <_ZN5Print5printEc>
   b8ffe:	4404      	add	r4, r0
   b9000:	e7ee      	b.n	b8fe0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9002:	232f      	movs	r3, #47	; 0x2f
   b9004:	466a      	mov	r2, sp
   b9006:	4639      	mov	r1, r7
   b9008:	200a      	movs	r0, #10
		buf[0] = 0;
   b900a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b900e:	f7fe fbb3 	bl	b7778 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b9012:	4668      	mov	r0, sp
   b9014:	f002 f8f0 	bl	bb1f8 <strlen>
   b9018:	6833      	ldr	r3, [r6, #0]
   b901a:	4602      	mov	r2, r0
   b901c:	68db      	ldr	r3, [r3, #12]
   b901e:	4669      	mov	r1, sp
   b9020:	4630      	mov	r0, r6
   b9022:	4798      	blx	r3
   b9024:	4604      	mov	r4, r0
    }
    return n;
}
   b9026:	4620      	mov	r0, r4
   b9028:	b00d      	add	sp, #52	; 0x34
   b902a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b902c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b902c:	b510      	push	{r4, lr}
   b902e:	4b05      	ldr	r3, [pc, #20]	; (b9044 <_ZN9IPAddressC1Ev+0x18>)
   b9030:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b9032:	2211      	movs	r2, #17
   b9034:	f840 3b04 	str.w	r3, [r0], #4
   b9038:	2100      	movs	r1, #0
   b903a:	f002 f895 	bl	bb168 <memset>
}
   b903e:	4620      	mov	r0, r4
   b9040:	bd10      	pop	{r4, pc}
   b9042:	bf00      	nop
   b9044:	000bd960 	.word	0x000bd960

000b9048 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b9048:	4603      	mov	r3, r0
   b904a:	4a07      	ldr	r2, [pc, #28]	; (b9068 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b904c:	b510      	push	{r4, lr}
   b904e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b9052:	f101 0210 	add.w	r2, r1, #16
   b9056:	f851 4b04 	ldr.w	r4, [r1], #4
   b905a:	f843 4b04 	str.w	r4, [r3], #4
   b905e:	4291      	cmp	r1, r2
   b9060:	d1f9      	bne.n	b9056 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b9062:	780a      	ldrb	r2, [r1, #0]
   b9064:	701a      	strb	r2, [r3, #0]
}
   b9066:	bd10      	pop	{r4, pc}
   b9068:	000bd960 	.word	0x000bd960

000b906c <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b906c:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b906e:	2b04      	cmp	r3, #4
   b9070:	d104      	bne.n	b907c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b9072:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b9074:	3800      	subs	r0, #0
   b9076:	bf18      	it	ne
   b9078:	2001      	movne	r0, #1
   b907a:	4770      	bx	lr
    } else if (version() == 6) {
   b907c:	2b06      	cmp	r3, #6
   b907e:	d107      	bne.n	b9090 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b9080:	6843      	ldr	r3, [r0, #4]
   b9082:	b93b      	cbnz	r3, b9094 <_ZNK9IPAddresscvbEv+0x28>
   b9084:	6883      	ldr	r3, [r0, #8]
   b9086:	b92b      	cbnz	r3, b9094 <_ZNK9IPAddresscvbEv+0x28>
   b9088:	68c3      	ldr	r3, [r0, #12]
   b908a:	b91b      	cbnz	r3, b9094 <_ZNK9IPAddresscvbEv+0x28>
   b908c:	6900      	ldr	r0, [r0, #16]
   b908e:	e7f1      	b.n	b9074 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b9090:	2000      	movs	r0, #0
   b9092:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b9094:	2001      	movs	r0, #1
}
   b9096:	4770      	bx	lr

000b9098 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b9098:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b909a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b909e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b90a2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b90a6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b90aa:	2304      	movs	r3, #4
   b90ac:	6041      	str	r1, [r0, #4]
   b90ae:	7503      	strb	r3, [r0, #20]
}
   b90b0:	bd10      	pop	{r4, pc}
	...

000b90b4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b90b4:	b507      	push	{r0, r1, r2, lr}
   b90b6:	4b06      	ldr	r3, [pc, #24]	; (b90d0 <_ZN9IPAddressC1EPKh+0x1c>)
   b90b8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b90ba:	78cb      	ldrb	r3, [r1, #3]
   b90bc:	9300      	str	r3, [sp, #0]
   b90be:	788b      	ldrb	r3, [r1, #2]
   b90c0:	784a      	ldrb	r2, [r1, #1]
   b90c2:	7809      	ldrb	r1, [r1, #0]
   b90c4:	f7ff ffe8 	bl	b9098 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b90c8:	b003      	add	sp, #12
   b90ca:	f85d fb04 	ldr.w	pc, [sp], #4
   b90ce:	bf00      	nop
   b90d0:	000bd960 	.word	0x000bd960

000b90d4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b90d4:	4b01      	ldr	r3, [pc, #4]	; (b90dc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b90d6:	4a02      	ldr	r2, [pc, #8]	; (b90e0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b90d8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b90da:	4770      	bx	lr
   b90dc:	2003e6d0 	.word	0x2003e6d0
   b90e0:	000bd96c 	.word	0x000bd96c

000b90e4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b90e4:	2300      	movs	r3, #0
   b90e6:	6840      	ldr	r0, [r0, #4]
   b90e8:	461a      	mov	r2, r3
   b90ea:	f7fe bc49 	b.w	b7980 <network_connect>

000b90ee <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b90ee:	6840      	ldr	r0, [r0, #4]
   b90f0:	2200      	movs	r2, #0
   b90f2:	2102      	movs	r1, #2
   b90f4:	f7fe bc54 	b.w	b79a0 <network_disconnect>

000b90f8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b90f8:	2200      	movs	r2, #0
   b90fa:	6840      	ldr	r0, [r0, #4]
   b90fc:	4611      	mov	r1, r2
   b90fe:	f7fe bc47 	b.w	b7990 <network_connecting>

000b9102 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b9102:	2200      	movs	r2, #0
   b9104:	6840      	ldr	r0, [r0, #4]
   b9106:	4611      	mov	r1, r2
   b9108:	f7fe bc52 	b.w	b79b0 <network_ready>

000b910c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b910c:	2300      	movs	r3, #0
   b910e:	6840      	ldr	r0, [r0, #4]
   b9110:	461a      	mov	r2, r3
   b9112:	4619      	mov	r1, r3
   b9114:	f7fe bc54 	b.w	b79c0 <network_on>

000b9118 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b9118:	2300      	movs	r3, #0
   b911a:	6840      	ldr	r0, [r0, #4]
   b911c:	461a      	mov	r2, r3
   b911e:	4619      	mov	r1, r3
   b9120:	f7fe bc56 	b.w	b79d0 <network_off>

000b9124 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b9124:	6840      	ldr	r0, [r0, #4]
   b9126:	2100      	movs	r1, #0
   b9128:	f7fe bc7a 	b.w	b7a20 <network_is_on>

000b912c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b912c:	6840      	ldr	r0, [r0, #4]
   b912e:	2100      	movs	r1, #0
   b9130:	f7fe bc7e 	b.w	b7a30 <network_is_off>

000b9134 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b9134:	6840      	ldr	r0, [r0, #4]
   b9136:	2200      	movs	r2, #0
   b9138:	f081 0101 	eor.w	r1, r1, #1
   b913c:	f7fe bc50 	b.w	b79e0 <network_listen>

000b9140 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b9140:	6840      	ldr	r0, [r0, #4]
   b9142:	2200      	movs	r2, #0
   b9144:	f7fe bc5c 	b.w	b7a00 <network_set_listen_timeout>

000b9148 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b9148:	2200      	movs	r2, #0
   b914a:	6840      	ldr	r0, [r0, #4]
   b914c:	4611      	mov	r1, r2
   b914e:	f7fe bc5f 	b.w	b7a10 <network_get_listen_timeout>

000b9152 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b9152:	2200      	movs	r2, #0
   b9154:	6840      	ldr	r0, [r0, #4]
   b9156:	4611      	mov	r1, r2
   b9158:	f7fe bc4a 	b.w	b79f0 <network_listening>

000b915c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b915c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9160:	b095      	sub	sp, #84	; 0x54
   b9162:	4614      	mov	r4, r2
   b9164:	460d      	mov	r5, r1
   b9166:	4607      	mov	r7, r0
    IPAddress addr;
   b9168:	f7ff ff60 	bl	b902c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b916c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b916e:	221c      	movs	r2, #28
   b9170:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b9172:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b9174:	f001 fff8 	bl	bb168 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b9178:	2340      	movs	r3, #64	; 0x40
   b917a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b917c:	4620      	mov	r0, r4
   b917e:	466b      	mov	r3, sp
   b9180:	aa0c      	add	r2, sp, #48	; 0x30
   b9182:	2100      	movs	r1, #0
   b9184:	f7fe fb18 	bl	b77b8 <netdb_getaddrinfo>
    if (!r) {
   b9188:	4604      	mov	r4, r0
   b918a:	2800      	cmp	r0, #0
   b918c:	d14b      	bne.n	b9226 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b918e:	4602      	mov	r2, r0
   b9190:	2101      	movs	r1, #1
   b9192:	6868      	ldr	r0, [r5, #4]
   b9194:	f7fe fc0c 	bl	b79b0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9198:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b919a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b919c:	4622      	mov	r2, r4
   b919e:	6868      	ldr	r0, [r5, #4]
   b91a0:	f7fe fc06 	bl	b79b0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b91a4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b91a6:	4681      	mov	r9, r0
        bool ok = false;
   b91a8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b91aa:	2e00      	cmp	r6, #0
   b91ac:	d03b      	beq.n	b9226 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b91ae:	2900      	cmp	r1, #0
   b91b0:	d139      	bne.n	b9226 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b91b2:	6873      	ldr	r3, [r6, #4]
   b91b4:	2b02      	cmp	r3, #2
   b91b6:	d003      	beq.n	b91c0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b91b8:	2b0a      	cmp	r3, #10
   b91ba:	d011      	beq.n	b91e0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b91bc:	69f6      	ldr	r6, [r6, #28]
   b91be:	e7f4      	b.n	b91aa <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b91c0:	f1b8 0f00 	cmp.w	r8, #0
   b91c4:	d0fa      	beq.n	b91bc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b91c6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b91c8:	a806      	add	r0, sp, #24
   b91ca:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b91cc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b91ce:	f7ff ff71 	bl	b90b4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b91d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b91d4:	1d3c      	adds	r4, r7, #4
   b91d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b91d8:	682b      	ldr	r3, [r5, #0]
   b91da:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b91dc:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b91de:	e7ed      	b.n	b91bc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b91e0:	f1b9 0f00 	cmp.w	r9, #0
   b91e4:	d0ea      	beq.n	b91bc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b91e6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b91e8:	2210      	movs	r2, #16
   b91ea:	a801      	add	r0, sp, #4
   b91ec:	f001 ffbc 	bl	bb168 <memset>
                    a.v = 6;
   b91f0:	2306      	movs	r3, #6
   b91f2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b91f6:	ad01      	add	r5, sp, #4
   b91f8:	f104 0308 	add.w	r3, r4, #8
   b91fc:	3418      	adds	r4, #24
   b91fe:	6818      	ldr	r0, [r3, #0]
   b9200:	6859      	ldr	r1, [r3, #4]
   b9202:	462a      	mov	r2, r5
   b9204:	c203      	stmia	r2!, {r0, r1}
   b9206:	3308      	adds	r3, #8
   b9208:	42a3      	cmp	r3, r4
   b920a:	4615      	mov	r5, r2
   b920c:	d1f7      	bne.n	b91fe <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b920e:	a901      	add	r1, sp, #4
   b9210:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b9212:	ad07      	add	r5, sp, #28
   b9214:	f7ff ff18 	bl	b9048 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b921a:	1d3c      	adds	r4, r7, #4
   b921c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b921e:	682b      	ldr	r3, [r5, #0]
   b9220:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9222:	4649      	mov	r1, r9
   b9224:	e7ca      	b.n	b91bc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b9226:	9800      	ldr	r0, [sp, #0]
   b9228:	f7fe fabe 	bl	b77a8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b922c:	4638      	mov	r0, r7
   b922e:	b015      	add	sp, #84	; 0x54
   b9230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b9234 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b9234:	4b02      	ldr	r3, [pc, #8]	; (b9240 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b9236:	4a03      	ldr	r2, [pc, #12]	; (b9244 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b9238:	601a      	str	r2, [r3, #0]
   b923a:	2200      	movs	r2, #0
   b923c:	605a      	str	r2, [r3, #4]

} // spark
   b923e:	4770      	bx	lr
   b9240:	2003e6d4 	.word	0x2003e6d4
   b9244:	000bd978 	.word	0x000bd978

000b9248 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b9248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b924a:	4606      	mov	r6, r0
   b924c:	460d      	mov	r5, r1
  size_t n = 0;
   b924e:	188f      	adds	r7, r1, r2
   b9250:	2400      	movs	r4, #0
  while (size--) {
   b9252:	42bd      	cmp	r5, r7
   b9254:	d00c      	beq.n	b9270 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b9256:	6833      	ldr	r3, [r6, #0]
   b9258:	f815 1b01 	ldrb.w	r1, [r5], #1
   b925c:	689b      	ldr	r3, [r3, #8]
   b925e:	4630      	mov	r0, r6
   b9260:	4798      	blx	r3
     if (chunk>=0)
   b9262:	1e03      	subs	r3, r0, #0
   b9264:	db01      	blt.n	b926a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b9266:	441c      	add	r4, r3
  while (size--) {
   b9268:	e7f3      	b.n	b9252 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b926a:	2c00      	cmp	r4, #0
   b926c:	bf08      	it	eq
   b926e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b9270:	4620      	mov	r0, r4
   b9272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9274 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b9274:	b513      	push	{r0, r1, r4, lr}
   b9276:	4604      	mov	r4, r0
    }
   b9278:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b927a:	b159      	cbz	r1, b9294 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b927c:	9101      	str	r1, [sp, #4]
   b927e:	f001 ffbb 	bl	bb1f8 <strlen>
   b9282:	6823      	ldr	r3, [r4, #0]
   b9284:	9901      	ldr	r1, [sp, #4]
   b9286:	68db      	ldr	r3, [r3, #12]
   b9288:	4602      	mov	r2, r0
   b928a:	4620      	mov	r0, r4
    }
   b928c:	b002      	add	sp, #8
   b928e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b9292:	4718      	bx	r3
    }
   b9294:	b002      	add	sp, #8
   b9296:	bd10      	pop	{r4, pc}

000b9298 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b9298:	b508      	push	{r3, lr}
  return write(str);
   b929a:	f7ff ffeb 	bl	b9274 <_ZN5Print5writeEPKc>
}
   b929e:	bd08      	pop	{r3, pc}

000b92a0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b92a0:	6803      	ldr	r3, [r0, #0]
   b92a2:	689b      	ldr	r3, [r3, #8]
   b92a4:	4718      	bx	r3

000b92a6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b92a6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b92a8:	210d      	movs	r1, #13
{
   b92aa:	4605      	mov	r5, r0
  size_t n = print('\r');
   b92ac:	f7ff fff8 	bl	b92a0 <_ZN5Print5printEc>
  n += print('\n');
   b92b0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b92b2:	4604      	mov	r4, r0
  n += print('\n');
   b92b4:	4628      	mov	r0, r5
   b92b6:	f7ff fff3 	bl	b92a0 <_ZN5Print5printEc>
  return n;
}
   b92ba:	4420      	add	r0, r4
   b92bc:	bd38      	pop	{r3, r4, r5, pc}

000b92be <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b92be:	b538      	push	{r3, r4, r5, lr}
   b92c0:	4605      	mov	r5, r0
  return write(str);
   b92c2:	f7ff ffd7 	bl	b9274 <_ZN5Print5writeEPKc>
   b92c6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b92c8:	4628      	mov	r0, r5
   b92ca:	f7ff ffec 	bl	b92a6 <_ZN5Print7printlnEv>
  return n;
}
   b92ce:	4420      	add	r0, r4
   b92d0:	bd38      	pop	{r3, r4, r5, pc}

000b92d2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b92d2:	b530      	push	{r4, r5, lr}
   b92d4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b92d6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b92d8:	2a01      	cmp	r2, #1
  *str = '\0';
   b92da:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b92de:	bf98      	it	ls
   b92e0:	220a      	movls	r2, #10
   b92e2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b92e4:	460d      	mov	r5, r1
   b92e6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b92ea:	fb01 5312 	mls	r3, r1, r2, r5
   b92ee:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b92f2:	2b09      	cmp	r3, #9
   b92f4:	bf94      	ite	ls
   b92f6:	3330      	addls	r3, #48	; 0x30
   b92f8:	3337      	addhi	r3, #55	; 0x37
   b92fa:	b2db      	uxtb	r3, r3
  } while(n);
   b92fc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b92fe:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b9302:	d9ef      	bls.n	b92e4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b9304:	4621      	mov	r1, r4
   b9306:	f7ff ffb5 	bl	b9274 <_ZN5Print5writeEPKc>
}
   b930a:	b00b      	add	sp, #44	; 0x2c
   b930c:	bd30      	pop	{r4, r5, pc}

000b930e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b930e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9312:	b086      	sub	sp, #24
   b9314:	af00      	add	r7, sp, #0
   b9316:	4605      	mov	r5, r0
   b9318:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b931a:	1d38      	adds	r0, r7, #4
   b931c:	2114      	movs	r1, #20
{
   b931e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b9320:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b9322:	f7fe fbad 	bl	b7a80 <vsnprintf>

    if (n<bufsize)
   b9326:	2813      	cmp	r0, #19
   b9328:	d80e      	bhi.n	b9348 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b932a:	1d39      	adds	r1, r7, #4
   b932c:	4628      	mov	r0, r5
   b932e:	f7ff ffa1 	bl	b9274 <_ZN5Print5writeEPKc>
   b9332:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b9334:	b11e      	cbz	r6, b933e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b9336:	4628      	mov	r0, r5
   b9338:	f7ff ffb5 	bl	b92a6 <_ZN5Print7printlnEv>
   b933c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b933e:	4620      	mov	r0, r4
   b9340:	3718      	adds	r7, #24
   b9342:	46bd      	mov	sp, r7
   b9344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b9348:	f100 0308 	add.w	r3, r0, #8
   b934c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b9350:	46e8      	mov	r8, sp
        char bigger[n+1];
   b9352:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b9356:	4622      	mov	r2, r4
   b9358:	1c41      	adds	r1, r0, #1
   b935a:	683b      	ldr	r3, [r7, #0]
   b935c:	4668      	mov	r0, sp
   b935e:	f7fe fb8f 	bl	b7a80 <vsnprintf>
  return write(str);
   b9362:	4669      	mov	r1, sp
   b9364:	4628      	mov	r0, r5
   b9366:	f7ff ff85 	bl	b9274 <_ZN5Print5writeEPKc>
   b936a:	4604      	mov	r4, r0
   b936c:	46c5      	mov	sp, r8
   b936e:	e7e1      	b.n	b9334 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b9370 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b9370:	4b01      	ldr	r3, [pc, #4]	; (b9378 <_GLOBAL__sub_I_RGB+0x8>)
   b9372:	2200      	movs	r2, #0
   b9374:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b9376:	4770      	bx	lr
   b9378:	2003e6dc 	.word	0x2003e6dc

000b937c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b937c:	b510      	push	{r4, lr}
   b937e:	4604      	mov	r4, r0
{
	free(buffer);
   b9380:	6800      	ldr	r0, [r0, #0]
   b9382:	f7fe fb65 	bl	b7a50 <free>
}
   b9386:	4620      	mov	r0, r4
   b9388:	bd10      	pop	{r4, pc}

000b938a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b938a:	b510      	push	{r4, lr}
   b938c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b938e:	6800      	ldr	r0, [r0, #0]
   b9390:	b108      	cbz	r0, b9396 <_ZN6String10invalidateEv+0xc>
   b9392:	f7fe fb5d 	bl	b7a50 <free>
	buffer = NULL;
   b9396:	2300      	movs	r3, #0
	capacity = len = 0;
   b9398:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b939c:	6023      	str	r3, [r4, #0]
}
   b939e:	bd10      	pop	{r4, pc}

000b93a0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b93a0:	b538      	push	{r3, r4, r5, lr}
   b93a2:	4604      	mov	r4, r0
   b93a4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b93a6:	6800      	ldr	r0, [r0, #0]
   b93a8:	3101      	adds	r1, #1
   b93aa:	f7fe fb59 	bl	b7a60 <realloc>
	if (newbuffer) {
   b93ae:	b110      	cbz	r0, b93b6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b93b0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b93b4:	2001      	movs	r0, #1
	}
	return 0;
}
   b93b6:	bd38      	pop	{r3, r4, r5, pc}

000b93b8 <_ZN6String7reserveEj>:
{
   b93b8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b93ba:	6803      	ldr	r3, [r0, #0]
{
   b93bc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b93be:	b123      	cbz	r3, b93ca <_ZN6String7reserveEj+0x12>
   b93c0:	6843      	ldr	r3, [r0, #4]
   b93c2:	428b      	cmp	r3, r1
   b93c4:	d301      	bcc.n	b93ca <_ZN6String7reserveEj+0x12>
   b93c6:	2001      	movs	r0, #1
}
   b93c8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b93ca:	4620      	mov	r0, r4
   b93cc:	f7ff ffe8 	bl	b93a0 <_ZN6String12changeBufferEj>
   b93d0:	2800      	cmp	r0, #0
   b93d2:	d0f9      	beq.n	b93c8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b93d4:	68a3      	ldr	r3, [r4, #8]
   b93d6:	2b00      	cmp	r3, #0
   b93d8:	d1f5      	bne.n	b93c6 <_ZN6String7reserveEj+0xe>
   b93da:	6822      	ldr	r2, [r4, #0]
   b93dc:	7013      	strb	r3, [r2, #0]
   b93de:	e7f2      	b.n	b93c6 <_ZN6String7reserveEj+0xe>

000b93e0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b93e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b93e2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b93e4:	4611      	mov	r1, r2
   b93e6:	9201      	str	r2, [sp, #4]
{
   b93e8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b93ea:	f7ff ffe5 	bl	b93b8 <_ZN6String7reserveEj>
   b93ee:	9a01      	ldr	r2, [sp, #4]
   b93f0:	b928      	cbnz	r0, b93fe <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b93f2:	4620      	mov	r0, r4
   b93f4:	f7ff ffc9 	bl	b938a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b93f8:	4620      	mov	r0, r4
   b93fa:	b003      	add	sp, #12
   b93fc:	bd30      	pop	{r4, r5, pc}
	len = length;
   b93fe:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b9400:	4629      	mov	r1, r5
   b9402:	6820      	ldr	r0, [r4, #0]
   b9404:	f001 fe88 	bl	bb118 <memcpy>
	buffer[len] = 0;
   b9408:	6822      	ldr	r2, [r4, #0]
   b940a:	68a3      	ldr	r3, [r4, #8]
   b940c:	2100      	movs	r1, #0
   b940e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b9410:	e7f2      	b.n	b93f8 <_ZN6String4copyEPKcj+0x18>

000b9412 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b9412:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b9414:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b9416:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b941a:	4604      	mov	r4, r0
	len = 0;
   b941c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b941e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b9420:	b141      	cbz	r1, b9434 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b9422:	4608      	mov	r0, r1
   b9424:	9101      	str	r1, [sp, #4]
   b9426:	f001 fee7 	bl	bb1f8 <strlen>
   b942a:	9901      	ldr	r1, [sp, #4]
   b942c:	4602      	mov	r2, r0
   b942e:	4620      	mov	r0, r4
   b9430:	f7ff ffd6 	bl	b93e0 <_ZN6String4copyEPKcj>
}
   b9434:	4620      	mov	r0, r4
   b9436:	b002      	add	sp, #8
   b9438:	bd10      	pop	{r4, pc}

000b943a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b943a:	4288      	cmp	r0, r1
{
   b943c:	b510      	push	{r4, lr}
   b943e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b9440:	d005      	beq.n	b944e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b9442:	680b      	ldr	r3, [r1, #0]
   b9444:	b12b      	cbz	r3, b9452 <_ZN6StringaSERKS_+0x18>
   b9446:	688a      	ldr	r2, [r1, #8]
   b9448:	4619      	mov	r1, r3
   b944a:	f7ff ffc9 	bl	b93e0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b944e:	4620      	mov	r0, r4
   b9450:	bd10      	pop	{r4, pc}
	else invalidate();
   b9452:	f7ff ff9a 	bl	b938a <_ZN6String10invalidateEv>
   b9456:	e7fa      	b.n	b944e <_ZN6StringaSERKS_+0x14>

000b9458 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b9458:	b510      	push	{r4, lr}
	buffer = NULL;
   b945a:	2300      	movs	r3, #0
String::String(const String &value)
   b945c:	4604      	mov	r4, r0
	capacity = 0;
   b945e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b9462:	6083      	str	r3, [r0, #8]
	flags = 0;
   b9464:	7303      	strb	r3, [r0, #12]
	*this = value;
   b9466:	f7ff ffe8 	bl	b943a <_ZN6StringaSERKS_>
}
   b946a:	4620      	mov	r0, r4
   b946c:	bd10      	pop	{r4, pc}

000b946e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b946e:	b513      	push	{r0, r1, r4, lr}
   b9470:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b9472:	b159      	cbz	r1, b948c <_ZN6StringaSEPKc+0x1e>
   b9474:	4608      	mov	r0, r1
   b9476:	9101      	str	r1, [sp, #4]
   b9478:	f001 febe 	bl	bb1f8 <strlen>
   b947c:	9901      	ldr	r1, [sp, #4]
   b947e:	4602      	mov	r2, r0
   b9480:	4620      	mov	r0, r4
   b9482:	f7ff ffad 	bl	b93e0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b9486:	4620      	mov	r0, r4
   b9488:	b002      	add	sp, #8
   b948a:	bd10      	pop	{r4, pc}
	else invalidate();
   b948c:	f7ff ff7d 	bl	b938a <_ZN6String10invalidateEv>
   b9490:	e7f9      	b.n	b9486 <_ZN6StringaSEPKc+0x18>

000b9492 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b9492:	b510      	push	{r4, lr}
   b9494:	4604      	mov	r4, r0
   b9496:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b9498:	2300      	movs	r3, #0
	capacity = 0;
   b949a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b949e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b94a0:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b94a2:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b94a4:	a901      	add	r1, sp, #4
   b94a6:	f000 fcf3 	bl	b9e90 <itoa>
	*this = buf;
   b94aa:	a901      	add	r1, sp, #4
   b94ac:	4620      	mov	r0, r4
   b94ae:	f7ff ffde 	bl	b946e <_ZN6StringaSEPKc>
}
   b94b2:	4620      	mov	r0, r4
   b94b4:	b00a      	add	sp, #40	; 0x28
   b94b6:	bd10      	pop	{r4, pc}

000b94b8 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b94b8:	b570      	push	{r4, r5, r6, lr}
   b94ba:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b94bc:	460e      	mov	r6, r1
   b94be:	b909      	cbnz	r1, b94c4 <_ZN6String6concatEPKcj+0xc>
   b94c0:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b94c2:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b94c4:	b16a      	cbz	r2, b94e2 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b94c6:	6884      	ldr	r4, [r0, #8]
   b94c8:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b94ca:	4621      	mov	r1, r4
   b94cc:	f7ff ff74 	bl	b93b8 <_ZN6String7reserveEj>
   b94d0:	2800      	cmp	r0, #0
   b94d2:	d0f5      	beq.n	b94c0 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b94d4:	6828      	ldr	r0, [r5, #0]
   b94d6:	68ab      	ldr	r3, [r5, #8]
   b94d8:	4631      	mov	r1, r6
   b94da:	4418      	add	r0, r3
   b94dc:	f001 fe84 	bl	bb1e8 <strcpy>
	len = newlen;
   b94e0:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b94e2:	2001      	movs	r0, #1
   b94e4:	e7ed      	b.n	b94c2 <_ZN6String6concatEPKcj+0xa>

000b94e6 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b94e6:	688a      	ldr	r2, [r1, #8]
   b94e8:	6809      	ldr	r1, [r1, #0]
   b94ea:	f7ff bfe5 	b.w	b94b8 <_ZN6String6concatEPKcj>

000b94ee <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b94ee:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b94f0:	2300      	movs	r3, #0
	buf[0] = c;
   b94f2:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b94f6:	2201      	movs	r2, #1
   b94f8:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b94fa:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b94fe:	f7ff ffdb 	bl	b94b8 <_ZN6String6concatEPKcj>
}
   b9502:	b003      	add	sp, #12
   b9504:	f85d fb04 	ldr.w	pc, [sp], #4

000b9508 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b9508:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b950a:	688a      	ldr	r2, [r1, #8]
   b950c:	6809      	ldr	r1, [r1, #0]
{
   b950e:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b9510:	f7ff ffd2 	bl	b94b8 <_ZN6String6concatEPKcj>
   b9514:	b910      	cbnz	r0, b951c <_ZplRK15StringSumHelperRK6String+0x14>
   b9516:	4620      	mov	r0, r4
   b9518:	f7ff ff37 	bl	b938a <_ZN6String10invalidateEv>
	return a;
}
   b951c:	4620      	mov	r0, r4
   b951e:	bd10      	pop	{r4, pc}

000b9520 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b9520:	b513      	push	{r0, r1, r4, lr}
   b9522:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b9524:	b929      	cbnz	r1, b9532 <_ZplRK15StringSumHelperPKc+0x12>
   b9526:	4620      	mov	r0, r4
   b9528:	f7ff ff2f 	bl	b938a <_ZN6String10invalidateEv>
	return a;
}
   b952c:	4620      	mov	r0, r4
   b952e:	b002      	add	sp, #8
   b9530:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b9532:	4608      	mov	r0, r1
   b9534:	9101      	str	r1, [sp, #4]
   b9536:	f001 fe5f 	bl	bb1f8 <strlen>
   b953a:	9901      	ldr	r1, [sp, #4]
   b953c:	4602      	mov	r2, r0
   b953e:	4620      	mov	r0, r4
   b9540:	f7ff ffba 	bl	b94b8 <_ZN6String6concatEPKcj>
   b9544:	2800      	cmp	r0, #0
   b9546:	d0ee      	beq.n	b9526 <_ZplRK15StringSumHelperPKc+0x6>
   b9548:	e7f0      	b.n	b952c <_ZplRK15StringSumHelperPKc+0xc>

000b954a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b954a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b954c:	6882      	ldr	r2, [r0, #8]
   b954e:	b93a      	cbnz	r2, b9560 <_ZNK6String6equalsEPKc+0x16>
   b9550:	b121      	cbz	r1, b955c <_ZNK6String6equalsEPKc+0x12>
   b9552:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b9554:	fab0 f080 	clz	r0, r0
   b9558:	0940      	lsrs	r0, r0, #5
   b955a:	e000      	b.n	b955e <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b955c:	2001      	movs	r0, #1
}
   b955e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b9560:	6800      	ldr	r0, [r0, #0]
   b9562:	b909      	cbnz	r1, b9568 <_ZNK6String6equalsEPKc+0x1e>
   b9564:	7800      	ldrb	r0, [r0, #0]
   b9566:	e7f5      	b.n	b9554 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b9568:	f001 fe34 	bl	bb1d4 <strcmp>
   b956c:	e7f2      	b.n	b9554 <_ZNK6String6equalsEPKc+0xa>

000b956e <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   b956e:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   b9570:	6883      	ldr	r3, [r0, #8]
   b9572:	4293      	cmp	r3, r2
   b9574:	d907      	bls.n	b9586 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   b9576:	6804      	ldr	r4, [r0, #0]
   b9578:	6809      	ldr	r1, [r1, #0]
   b957a:	18a0      	adds	r0, r4, r2
   b957c:	f001 fe64 	bl	bb248 <strstr>
	if (found == NULL) return -1;
   b9580:	b108      	cbz	r0, b9586 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   b9582:	1b00      	subs	r0, r0, r4
}
   b9584:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   b9586:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b958a:	e7fb      	b.n	b9584 <_ZNK6String7indexOfERKS_j+0x16>

000b958c <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   b958c:	2200      	movs	r2, #0
   b958e:	f7ff bfee 	b.w	b956e <_ZNK6String7indexOfERKS_j>
	...

000b9594 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b9594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b9596:	429a      	cmp	r2, r3
{
   b9598:	460f      	mov	r7, r1
   b959a:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b959c:	490c      	ldr	r1, [pc, #48]	; (b95d0 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b959e:	bf88      	it	hi
   b95a0:	4613      	movhi	r3, r2
{
   b95a2:	4614      	mov	r4, r2
   b95a4:	4606      	mov	r6, r0
	if (left > right) {
   b95a6:	bf84      	itt	hi
   b95a8:	462c      	movhi	r4, r5
   b95aa:	461d      	movhi	r5, r3
	String out;
   b95ac:	f7ff ff31 	bl	b9412 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b95b0:	68bb      	ldr	r3, [r7, #8]
   b95b2:	42a3      	cmp	r3, r4
   b95b4:	d30a      	bcc.n	b95cc <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b95b6:	6839      	ldr	r1, [r7, #0]
   b95b8:	42ab      	cmp	r3, r5
   b95ba:	bf94      	ite	ls
   b95bc:	ebc4 0203 	rsbls	r2, r4, r3
   b95c0:	ebc4 0205 	rsbhi	r2, r4, r5
   b95c4:	4421      	add	r1, r4
   b95c6:	4630      	mov	r0, r6
   b95c8:	f7ff ff0a 	bl	b93e0 <_ZN6String4copyEPKcj>
	return out;
}
   b95cc:	4630      	mov	r0, r6
   b95ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b95d0:	000bd6de 	.word	0x000bd6de

000b95d4 <_ZNK6String9substringEj>:
{
   b95d4:	b510      	push	{r4, lr}
   b95d6:	4604      	mov	r4, r0
	return substring(left, len);
   b95d8:	688b      	ldr	r3, [r1, #8]
   b95da:	f7ff ffdb 	bl	b9594 <_ZNK6String9substringEjj>
}
   b95de:	4620      	mov	r0, r4
   b95e0:	bd10      	pop	{r4, pc}
	...

000b95e4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b95e4:	4b05      	ldr	r3, [pc, #20]	; (b95fc <_GLOBAL__sub_I_System+0x18>)
   b95e6:	2202      	movs	r2, #2
   b95e8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b95ea:	4b05      	ldr	r3, [pc, #20]	; (b9600 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b95ec:	4a05      	ldr	r2, [pc, #20]	; (b9604 <_GLOBAL__sub_I_System+0x20>)
   b95ee:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b95f0:	2000      	movs	r0, #0
   b95f2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b95f6:	f7fe b997 	b.w	b7928 <set_system_mode>
   b95fa:	bf00      	nop
   b95fc:	2003e6f8 	.word	0x2003e6f8
   b9600:	2003e6ec 	.word	0x2003e6ec
   b9604:	ffff0000 	.word	0xffff0000

000b9608 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b9608:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b960a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b960c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b9610:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b9612:	2201      	movs	r2, #1
   b9614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9618:	f10d 0107 	add.w	r1, sp, #7
   b961c:	47a0      	blx	r4
}
   b961e:	b002      	add	sp, #8
   b9620:	bd10      	pop	{r4, pc}

000b9622 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b9622:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b9624:	6803      	ldr	r3, [r0, #0]
   b9626:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b9628:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b962c:	46a4      	mov	ip, r4
}
   b962e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b9632:	4760      	bx	ip

000b9634 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b9634:	b513      	push	{r0, r1, r4, lr}
   b9636:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b9638:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b963a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b963e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b9640:	f10d 0107 	add.w	r1, sp, #7
   b9644:	2201      	movs	r2, #1
   b9646:	47a0      	blx	r4
}
   b9648:	b002      	add	sp, #8
   b964a:	bd10      	pop	{r4, pc}

000b964c <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b964c:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b964e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9650:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9654:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9658:	429a      	cmp	r2, r3
int TCPClient::read() {
   b965a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b965c:	d008      	beq.n	b9670 <_ZN9TCPClient4readEv+0x24>
   b965e:	6963      	ldr	r3, [r4, #20]
   b9660:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b9664:	1c51      	adds	r1, r2, #1
   b9666:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b966a:	4413      	add	r3, r2
   b966c:	7918      	ldrb	r0, [r3, #4]
}
   b966e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9670:	6803      	ldr	r3, [r0, #0]
   b9672:	691b      	ldr	r3, [r3, #16]
   b9674:	4798      	blx	r3
   b9676:	2800      	cmp	r0, #0
   b9678:	d1f1      	bne.n	b965e <_ZN9TCPClient4readEv+0x12>
   b967a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b967e:	e7f6      	b.n	b966e <_ZN9TCPClient4readEv+0x22>

000b9680 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b9680:	4770      	bx	lr

000b9682 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b9682:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b9684:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b9686:	43c0      	mvns	r0, r0
   b9688:	0fc0      	lsrs	r0, r0, #31
   b968a:	4770      	bx	lr

000b968c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b968c:	4770      	bx	lr
	...

000b9690 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9690:	4b06      	ldr	r3, [pc, #24]	; (b96ac <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b9692:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b9694:	b510      	push	{r4, lr}
   b9696:	f100 040c 	add.w	r4, r0, #12
	    ||
   b969a:	d005      	beq.n	b96a8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b969c:	4608      	mov	r0, r1
   b969e:	f000 fd1d 	bl	ba0dc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b96a2:	2800      	cmp	r0, #0
   b96a4:	bf08      	it	eq
   b96a6:	2400      	moveq	r4, #0
      }
   b96a8:	4620      	mov	r0, r4
   b96aa:	bd10      	pop	{r4, pc}
   b96ac:	000bd8b4 	.word	0x000bd8b4

000b96b0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b96b0:	b510      	push	{r4, lr}
   b96b2:	21ac      	movs	r1, #172	; 0xac
   b96b4:	4604      	mov	r4, r0
   b96b6:	f7fa fcf4 	bl	b40a2 <_ZdlPvj>
   b96ba:	4620      	mov	r0, r4
   b96bc:	bd10      	pop	{r4, pc}

000b96be <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b96be:	21ac      	movs	r1, #172	; 0xac
   b96c0:	f7fa bcef 	b.w	b40a2 <_ZdlPvj>

000b96c4 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b96c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b96c8:	f04f 0800 	mov.w	r8, #0
   b96cc:	b086      	sub	sp, #24
   b96ce:	461c      	mov	r4, r3
   b96d0:	f8c0 8004 	str.w	r8, [r0, #4]
   b96d4:	4605      	mov	r5, r0
   b96d6:	460e      	mov	r6, r1
   b96d8:	4617      	mov	r7, r2
    struct timeval tv = {};
   b96da:	4641      	mov	r1, r8
   b96dc:	2210      	movs	r2, #16
   b96de:	a802      	add	r0, sp, #8
   b96e0:	f001 fd42 	bl	bb168 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b96e4:	1c63      	adds	r3, r4, #1
   b96e6:	d009      	beq.n	b96fc <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b96e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b96ec:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b96f0:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b96f4:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b96f8:	435c      	muls	r4, r3
   b96fa:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b96fc:	6968      	ldr	r0, [r5, #20]
   b96fe:	2310      	movs	r3, #16
   b9700:	9300      	str	r3, [sp, #0]
   b9702:	6800      	ldr	r0, [r0, #0]
   b9704:	ab02      	add	r3, sp, #8
   b9706:	f241 0205 	movw	r2, #4101	; 0x1005
   b970a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b970e:	f7fe f85b 	bl	b77c8 <sock_setsockopt>
    if (ret < 0) {
   b9712:	2800      	cmp	r0, #0
   b9714:	da07      	bge.n	b9726 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b9716:	f7fe f9cb 	bl	b7ab0 <__errno>
   b971a:	6803      	ldr	r3, [r0, #0]
   b971c:	606b      	str	r3, [r5, #4]
        return 0;
   b971e:	2000      	movs	r0, #0
}
   b9720:	b006      	add	sp, #24
   b9722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b9726:	6968      	ldr	r0, [r5, #20]
   b9728:	2300      	movs	r3, #0
   b972a:	6800      	ldr	r0, [r0, #0]
   b972c:	463a      	mov	r2, r7
   b972e:	4631      	mov	r1, r6
   b9730:	f7fe f86a 	bl	b7808 <sock_send>
    if (ret < 0) {
   b9734:	1e03      	subs	r3, r0, #0
   b9736:	dbee      	blt.n	b9716 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b9738:	4618      	mov	r0, r3
   b973a:	e7f1      	b.n	b9720 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b973c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b973c:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b973e:	6984      	ldr	r4, [r0, #24]
   b9740:	4b0a      	ldr	r3, [pc, #40]	; (b976c <_ZN9TCPClientD1Ev+0x30>)
   b9742:	6003      	str	r3, [r0, #0]
   b9744:	4605      	mov	r5, r0
   b9746:	b17c      	cbz	r4, b9768 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b9748:	6863      	ldr	r3, [r4, #4]
   b974a:	3b01      	subs	r3, #1
   b974c:	6063      	str	r3, [r4, #4]
   b974e:	b95b      	cbnz	r3, b9768 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b9750:	6823      	ldr	r3, [r4, #0]
   b9752:	4620      	mov	r0, r4
   b9754:	689b      	ldr	r3, [r3, #8]
   b9756:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b9758:	68a3      	ldr	r3, [r4, #8]
   b975a:	3b01      	subs	r3, #1
   b975c:	60a3      	str	r3, [r4, #8]
   b975e:	b91b      	cbnz	r3, b9768 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b9760:	6823      	ldr	r3, [r4, #0]
   b9762:	4620      	mov	r0, r4
   b9764:	68db      	ldr	r3, [r3, #12]
   b9766:	4798      	blx	r3
   b9768:	4628      	mov	r0, r5
   b976a:	bd38      	pop	{r3, r4, r5, pc}
   b976c:	000bd9e8 	.word	0x000bd9e8

000b9770 <_ZN9TCPClientD0Ev>:
   b9770:	b510      	push	{r4, lr}
   b9772:	4604      	mov	r4, r0
   b9774:	f7ff ffe2 	bl	b973c <_ZN9TCPClientD1Ev>
   b9778:	4620      	mov	r0, r4
   b977a:	211c      	movs	r1, #28
   b977c:	f7fa fc91 	bl	b40a2 <_ZdlPvj>
   b9780:	4620      	mov	r0, r4
   b9782:	bd10      	pop	{r4, pc}

000b9784 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b9784:	b530      	push	{r4, r5, lr}
   b9786:	b087      	sub	sp, #28
   b9788:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b978a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b978c:	4668      	mov	r0, sp
   b978e:	f7ff fc91 	bl	b90b4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9794:	3404      	adds	r4, #4
   b9796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9798:	682b      	ldr	r3, [r5, #0]
   b979a:	7023      	strb	r3, [r4, #0]
    }
   b979c:	b007      	add	sp, #28
   b979e:	bd30      	pop	{r4, r5, pc}

000b97a0 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b97a0:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b97a2:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b97a4:	4b05      	ldr	r3, [pc, #20]	; (b97bc <_ZN9TCPClient8remoteIPEv+0x1c>)
   b97a6:	4604      	mov	r4, r0
   b97a8:	358c      	adds	r5, #140	; 0x8c
   b97aa:	f844 3b04 	str.w	r3, [r4], #4
   b97ae:	4606      	mov	r6, r0
   b97b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b97b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b97b4:	682b      	ldr	r3, [r5, #0]
   b97b6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b97b8:	4630      	mov	r0, r6
   b97ba:	bd70      	pop	{r4, r5, r6, pc}
   b97bc:	000bd960 	.word	0x000bd960

000b97c0 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b97c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b97c4:	4698      	mov	r8, r3
    stop();
   b97c6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b97c8:	b093      	sub	sp, #76	; 0x4c
   b97ca:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b97cc:	2400      	movs	r4, #0
    stop();
   b97ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b97d0:	4606      	mov	r6, r0
   b97d2:	4617      	mov	r7, r2
    stop();
   b97d4:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b97d6:	4628      	mov	r0, r5
   b97d8:	466b      	mov	r3, sp
   b97da:	4622      	mov	r2, r4
   b97dc:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b97de:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b97e0:	f7fd ffea 	bl	b77b8 <netdb_getaddrinfo>
   b97e4:	4605      	mov	r5, r0
   b97e6:	2800      	cmp	r0, #0
   b97e8:	d163      	bne.n	b98b2 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b97ea:	9b00      	ldr	r3, [sp, #0]
   b97ec:	2b00      	cmp	r3, #0
   b97ee:	d04b      	beq.n	b9888 <_ZN9TCPClient7connectEPKctm+0xc8>
   b97f0:	695b      	ldr	r3, [r3, #20]
   b97f2:	2b00      	cmp	r3, #0
   b97f4:	d048      	beq.n	b9888 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b97f6:	a806      	add	r0, sp, #24
   b97f8:	f7ff fc18 	bl	b902c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b97fc:	9b00      	ldr	r3, [sp, #0]
   b97fe:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b9800:	7863      	ldrb	r3, [r4, #1]
   b9802:	2b02      	cmp	r3, #2
   b9804:	d104      	bne.n	b9810 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b9806:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b9808:	a806      	add	r0, sp, #24
   b980a:	f7ff ffbb 	bl	b9784 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b980e:	e026      	b.n	b985e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b9810:	2b0a      	cmp	r3, #10
   b9812:	d124      	bne.n	b985e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b9814:	2211      	movs	r2, #17
   b9816:	4629      	mov	r1, r5
   b9818:	a801      	add	r0, sp, #4
   b981a:	f001 fca5 	bl	bb168 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b981e:	68a3      	ldr	r3, [r4, #8]
   b9820:	2b00      	cmp	r3, #0
   b9822:	d038      	beq.n	b9896 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b9824:	f104 0308 	add.w	r3, r4, #8
   b9828:	f10d 0c04 	add.w	ip, sp, #4
   b982c:	3418      	adds	r4, #24
   b982e:	6818      	ldr	r0, [r3, #0]
   b9830:	6859      	ldr	r1, [r3, #4]
   b9832:	4662      	mov	r2, ip
   b9834:	c203      	stmia	r2!, {r0, r1}
   b9836:	3308      	adds	r3, #8
   b9838:	42a3      	cmp	r3, r4
   b983a:	4694      	mov	ip, r2
   b983c:	d1f7      	bne.n	b982e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b983e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b9840:	a901      	add	r1, sp, #4
   b9842:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b9844:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b9848:	f7ff fbfe 	bl	b9048 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b984c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b9850:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b9854:	ac07      	add	r4, sp, #28
   b9856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9858:	f8dc 3000 	ldr.w	r3, [ip]
   b985c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b985e:	a806      	add	r0, sp, #24
   b9860:	f7ff fc04 	bl	b906c <_ZNK9IPAddresscvbEv>
        if (addr) {
   b9864:	b180      	cbz	r0, b9888 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b9866:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b9868:	ad07      	add	r5, sp, #28
   b986a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b986e:	4b12      	ldr	r3, [pc, #72]	; (b98b8 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b9870:	930c      	str	r3, [sp, #48]	; 0x30
   b9872:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9874:	ac0d      	add	r4, sp, #52	; 0x34
   b9876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9878:	682b      	ldr	r3, [r5, #0]
   b987a:	7023      	strb	r3, [r4, #0]
   b987c:	463a      	mov	r2, r7
   b987e:	4643      	mov	r3, r8
   b9880:	a90c      	add	r1, sp, #48	; 0x30
   b9882:	4630      	mov	r0, r6
   b9884:	47c8      	blx	r9
   b9886:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b9888:	9800      	ldr	r0, [sp, #0]
   b988a:	f7fd ff8d 	bl	b77a8 <netdb_freeaddrinfo>
}
   b988e:	4628      	mov	r0, r5
   b9890:	b013      	add	sp, #76	; 0x4c
   b9892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b9896:	68e3      	ldr	r3, [r4, #12]
   b9898:	2b00      	cmp	r3, #0
   b989a:	d1c3      	bne.n	b9824 <_ZN9TCPClient7connectEPKctm+0x64>
   b989c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b98a0:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b98a4:	f7fd ff70 	bl	b7788 <inet_htonl>
   b98a8:	4581      	cmp	r9, r0
   b98aa:	d1bb      	bne.n	b9824 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b98ac:	f104 0114 	add.w	r1, r4, #20
   b98b0:	e7aa      	b.n	b9808 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b98b2:	4625      	mov	r5, r4
   b98b4:	e7e8      	b.n	b9888 <_ZN9TCPClient7connectEPKctm+0xc8>
   b98b6:	bf00      	nop
   b98b8:	000bd960 	.word	0x000bd960

000b98bc <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b98bc:	b538      	push	{r3, r4, r5, lr}
   b98be:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b98c0:	681a      	ldr	r2, [r3, #0]
   b98c2:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b98c4:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b98c6:	da10      	bge.n	b98ea <_ZN9TCPClient9connectedEv+0x2e>
   b98c8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b98cc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b98d0:	429a      	cmp	r2, r3
   b98d2:	d10a      	bne.n	b98ea <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b98d4:	6803      	ldr	r3, [r0, #0]
   b98d6:	691b      	ldr	r3, [r3, #16]
   b98d8:	4798      	blx	r3
        if (!rv) {
   b98da:	4604      	mov	r4, r0
   b98dc:	b928      	cbnz	r0, b98ea <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b98de:	682b      	ldr	r3, [r5, #0]
   b98e0:	4628      	mov	r0, r5
   b98e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b98e4:	4798      	blx	r3
        rv = available();
   b98e6:	4620      	mov	r0, r4
}
   b98e8:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b98ea:	2001      	movs	r0, #1
   b98ec:	e7fc      	b.n	b98e8 <_ZN9TCPClient9connectedEv+0x2c>

000b98ee <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b98ee:	b510      	push	{r4, lr}
   b98f0:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b98f2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b98f6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b98fa:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b98fc:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b98fe:	d005      	beq.n	b990c <_ZN9TCPClient4peekEv+0x1e>
   b9900:	6963      	ldr	r3, [r4, #20]
   b9902:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b9906:	4413      	add	r3, r2
   b9908:	7918      	ldrb	r0, [r3, #4]
}
   b990a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b990c:	6803      	ldr	r3, [r0, #0]
   b990e:	691b      	ldr	r3, [r3, #16]
   b9910:	4798      	blx	r3
   b9912:	2800      	cmp	r0, #0
   b9914:	d1f4      	bne.n	b9900 <_ZN9TCPClient4peekEv+0x12>
   b9916:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b991a:	e7f6      	b.n	b990a <_ZN9TCPClient4peekEv+0x1c>

000b991c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b991c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b991e:	6943      	ldr	r3, [r0, #20]
   b9920:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b9922:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9926:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b992a:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b992c:	4605      	mov	r5, r0
   b992e:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b9930:	d016      	beq.n	b9960 <_ZN9TCPClient4readEPhj+0x44>
   b9932:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b9934:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b9938:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b993c:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b993e:	42bc      	cmp	r4, r7
   b9940:	bf28      	it	cs
   b9942:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b9944:	3304      	adds	r3, #4
   b9946:	4622      	mov	r2, r4
   b9948:	4419      	add	r1, r3
   b994a:	4630      	mov	r0, r6
   b994c:	f001 fbe4 	bl	bb118 <memcpy>
   b9950:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b9952:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b9956:	4423      	add	r3, r4
   b9958:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b995c:	4620      	mov	r0, r4
   b995e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b9960:	6803      	ldr	r3, [r0, #0]
   b9962:	691b      	ldr	r3, [r3, #16]
   b9964:	4798      	blx	r3
   b9966:	2800      	cmp	r0, #0
   b9968:	d1e3      	bne.n	b9932 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b996a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b996e:	e7f5      	b.n	b995c <_ZN9TCPClient4readEPhj+0x40>

000b9970 <_ZN9TCPClient12flush_bufferEv>:
   b9970:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b9972:	2300      	movs	r3, #0
   b9974:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b9978:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b997a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b997e:	4770      	bx	lr

000b9980 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9984:	461f      	mov	r7, r3
    stop();
   b9986:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9988:	460c      	mov	r4, r1
    stop();
   b998a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b998c:	b08a      	sub	sp, #40	; 0x28
   b998e:	4605      	mov	r5, r0
   b9990:	4616      	mov	r6, r2
    stop();
   b9992:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b9994:	7d23      	ldrb	r3, [r4, #20]
   b9996:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b999a:	2b04      	cmp	r3, #4
   b999c:	bf0c      	ite	eq
   b999e:	2002      	moveq	r0, #2
   b99a0:	200a      	movne	r0, #10
   b99a2:	2206      	movs	r2, #6
   b99a4:	2101      	movs	r1, #1
   b99a6:	f7fd ff37 	bl	b7818 <sock_socket>
   b99aa:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b99ae:	696b      	ldr	r3, [r5, #20]
   b99b0:	681b      	ldr	r3, [r3, #0]
   b99b2:	2b00      	cmp	r3, #0
   b99b4:	da08      	bge.n	b99c8 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b99b6:	682b      	ldr	r3, [r5, #0]
   b99b8:	4628      	mov	r0, r5
   b99ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b99bc:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b99be:	4798      	blx	r3
}
   b99c0:	4620      	mov	r0, r4
   b99c2:	b00a      	add	sp, #40	; 0x28
   b99c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b99c8:	4628      	mov	r0, r5
   b99ca:	f7ff ffd1 	bl	b9970 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b99ce:	b1b7      	cbz	r7, b99fe <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b99d0:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b99d2:	a903      	add	r1, sp, #12
   b99d4:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b99d6:	9303      	str	r3, [sp, #12]
   b99d8:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b99dc:	f7fd fec4 	bl	b7768 <if_index_to_name>
   b99e0:	2800      	cmp	r0, #0
   b99e2:	d1e8      	bne.n	b99b6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b99e4:	6968      	ldr	r0, [r5, #20]
   b99e6:	2306      	movs	r3, #6
   b99e8:	9300      	str	r3, [sp, #0]
   b99ea:	6800      	ldr	r0, [r0, #0]
   b99ec:	ab03      	add	r3, sp, #12
   b99ee:	f241 020b 	movw	r2, #4107	; 0x100b
   b99f2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b99f6:	f7fd fee7 	bl	b77c8 <sock_setsockopt>
   b99fa:	2800      	cmp	r0, #0
   b99fc:	d1db      	bne.n	b99b6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b99fe:	221c      	movs	r2, #28
   b9a00:	2100      	movs	r1, #0
   b9a02:	a803      	add	r0, sp, #12
   b9a04:	f001 fbb0 	bl	bb168 <memset>
    if (ip.version() == 4) {
   b9a08:	7d23      	ldrb	r3, [r4, #20]
   b9a0a:	2b04      	cmp	r3, #4
   b9a0c:	d11d      	bne.n	b9a4a <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b9a0e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b9a12:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b9a14:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b9a18:	f7fd febe 	bl	b7798 <inet_htons>
   b9a1c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b9a20:	6860      	ldr	r0, [r4, #4]
   b9a22:	f7fd feb1 	bl	b7788 <inet_htonl>
   b9a26:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b9a28:	696b      	ldr	r3, [r5, #20]
   b9a2a:	221c      	movs	r2, #28
   b9a2c:	6818      	ldr	r0, [r3, #0]
   b9a2e:	a903      	add	r1, sp, #12
   b9a30:	f7fd feda 	bl	b77e8 <sock_connect>
   b9a34:	2800      	cmp	r0, #0
   b9a36:	d1be      	bne.n	b99b6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b9a38:	3404      	adds	r4, #4
   b9a3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9a3c:	696d      	ldr	r5, [r5, #20]
   b9a3e:	358c      	adds	r5, #140	; 0x8c
   b9a40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9a42:	6823      	ldr	r3, [r4, #0]
   b9a44:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b9a46:	2401      	movs	r4, #1
   b9a48:	e7ba      	b.n	b99c0 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b9a4a:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b9a4e:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b9a50:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b9a54:	f7fd fea0 	bl	b7798 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9a58:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b9a5a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9a5e:	1d23      	adds	r3, r4, #4
   b9a60:	f104 0714 	add.w	r7, r4, #20
   b9a64:	6818      	ldr	r0, [r3, #0]
   b9a66:	6859      	ldr	r1, [r3, #4]
   b9a68:	4632      	mov	r2, r6
   b9a6a:	c203      	stmia	r2!, {r0, r1}
   b9a6c:	3308      	adds	r3, #8
   b9a6e:	42bb      	cmp	r3, r7
   b9a70:	4616      	mov	r6, r2
   b9a72:	d1f7      	bne.n	b9a64 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b9a74:	e7d8      	b.n	b9a28 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b9a78 <_ZN9TCPClient9availableEv>:
{
   b9a78:	b530      	push	{r4, r5, lr}
   b9a7a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b9a7c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b9a80:	b08b      	sub	sp, #44	; 0x2c
   b9a82:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b9a84:	b12b      	cbz	r3, b9a92 <_ZN9TCPClient9availableEv+0x1a>
   b9a86:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b9a8a:	429a      	cmp	r2, r3
   b9a8c:	d101      	bne.n	b9a92 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b9a8e:	f7ff ff6f 	bl	b9970 <_ZN9TCPClient12flush_bufferEv>
   b9a92:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b9a94:	6808      	ldr	r0, [r1, #0]
   b9a96:	2800      	cmp	r0, #0
   b9a98:	db18      	blt.n	b9acc <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b9a9a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b9a9e:	2d7f      	cmp	r5, #127	; 0x7f
   b9aa0:	d814      	bhi.n	b9acc <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b9aa2:	3104      	adds	r1, #4
   b9aa4:	2308      	movs	r3, #8
   b9aa6:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b9aaa:	4429      	add	r1, r5
   b9aac:	f7fd fea4 	bl	b77f8 <sock_recv>
            if (ret > 0) {
   b9ab0:	2800      	cmp	r0, #0
   b9ab2:	dd13      	ble.n	b9adc <_ZN9TCPClient9availableEv+0x64>
   b9ab4:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b9ab6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9aba:	b90a      	cbnz	r2, b9ac0 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b9abc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b9ac0:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b9ac2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9ac6:	4410      	add	r0, r2
   b9ac8:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b9acc:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b9ace:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b9ad2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b9ad6:	1ac0      	subs	r0, r0, r3
   b9ad8:	b00b      	add	sp, #44	; 0x2c
   b9ada:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b9adc:	f7fd ffe8 	bl	b7ab0 <__errno>
   b9ae0:	6803      	ldr	r3, [r0, #0]
   b9ae2:	2b0b      	cmp	r3, #11
   b9ae4:	d0f2      	beq.n	b9acc <_ZN9TCPClient9availableEv+0x54>
   b9ae6:	f7fd ffe3 	bl	b7ab0 <__errno>
   b9aea:	6803      	ldr	r3, [r0, #0]
   b9aec:	2b0b      	cmp	r3, #11
   b9aee:	d0ed      	beq.n	b9acc <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b9af0:	2320      	movs	r3, #32
   b9af2:	2500      	movs	r5, #0
   b9af4:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b9af8:	f7fd ffda 	bl	b7ab0 <__errno>
   b9afc:	6803      	ldr	r3, [r0, #0]
   b9afe:	9301      	str	r3, [sp, #4]
   b9b00:	4b08      	ldr	r3, [pc, #32]	; (b9b24 <_ZN9TCPClient9availableEv+0xac>)
   b9b02:	4909      	ldr	r1, [pc, #36]	; (b9b28 <_ZN9TCPClient9availableEv+0xb0>)
   b9b04:	9300      	str	r3, [sp, #0]
   b9b06:	aa02      	add	r2, sp, #8
   b9b08:	462b      	mov	r3, r5
   b9b0a:	2032      	movs	r0, #50	; 0x32
   b9b0c:	f7fd ff04 	bl	b7918 <log_message>
                    sock_close(d_->sock);
   b9b10:	6963      	ldr	r3, [r4, #20]
   b9b12:	6818      	ldr	r0, [r3, #0]
   b9b14:	f7fd fe60 	bl	b77d8 <sock_close>
   b9b18:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b9b1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9b1e:	601a      	str	r2, [r3, #0]
   b9b20:	e7d4      	b.n	b9acc <_ZN9TCPClient9availableEv+0x54>
   b9b22:	bf00      	nop
   b9b24:	000bd9b3 	.word	0x000bd9b3
   b9b28:	000bd9ac 	.word	0x000bd9ac

000b9b2c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b9b2c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b9b2e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b9b30:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b9b32:	6818      	ldr	r0, [r3, #0]
   b9b34:	2800      	cmp	r0, #0
   b9b36:	db01      	blt.n	b9b3c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b9b38:	f7fd fe4e 	bl	b77d8 <sock_close>
   b9b3c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b9b3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9b42:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b9b44:	6960      	ldr	r0, [r4, #20]
   b9b46:	2211      	movs	r2, #17
   b9b48:	2100      	movs	r1, #0
   b9b4a:	308c      	adds	r0, #140	; 0x8c
   b9b4c:	f001 fb0c 	bl	bb168 <memset>
    flush_buffer();
   b9b50:	4620      	mov	r0, r4
}
   b9b52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b9b56:	f7ff bf0b 	b.w	b9970 <_ZN9TCPClient12flush_bufferEv>

000b9b5a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b9b5a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b9b5c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b9b5e:	4604      	mov	r4, r0
          total(0) {
   b9b60:	6001      	str	r1, [r0, #0]
   b9b62:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b9b66:	3088      	adds	r0, #136	; 0x88
   b9b68:	f7ff fa60 	bl	b902c <_ZN9IPAddressC1Ev>
}
   b9b6c:	4620      	mov	r0, r4
   b9b6e:	bd10      	pop	{r4, pc}

000b9b70 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b9b70:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9b72:	2300      	movs	r3, #0
   b9b74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b9b78:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b9b7c:	4a0e      	ldr	r2, [pc, #56]	; (b9bb8 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b9b7e:	6103      	str	r3, [r0, #16]
   b9b80:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9b82:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b9b84:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9b86:	20ac      	movs	r0, #172	; 0xac
   b9b88:	9101      	str	r1, [sp, #4]
   b9b8a:	f7fa fa84 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b9b8e:	1e05      	subs	r5, r0, #0
   b9b90:	f105 060c 	add.w	r6, r5, #12
   b9b94:	d008      	beq.n	b9ba8 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b9b96:	2301      	movs	r3, #1
   b9b98:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b9b9c:	4b07      	ldr	r3, [pc, #28]	; (b9bbc <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9b9e:	9901      	ldr	r1, [sp, #4]
   b9ba0:	602b      	str	r3, [r5, #0]
   b9ba2:	4630      	mov	r0, r6
   b9ba4:	f7ff ffd9 	bl	b9b5a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b9ba8:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b9baa:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b9bae:	f7ff fedf 	bl	b9970 <_ZN9TCPClient12flush_bufferEv>
}
   b9bb2:	b002      	add	sp, #8
   b9bb4:	bd70      	pop	{r4, r5, r6, pc}
   b9bb6:	bf00      	nop
   b9bb8:	000bd9e8 	.word	0x000bd9e8
   b9bbc:	000bd9cc 	.word	0x000bd9cc

000b9bc0 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b9bc0:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b9bc2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b9bc6:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b9bc8:	f7ff ffd2 	bl	b9b70 <_ZN9TCPClientC1Ei>
}
   b9bcc:	4620      	mov	r0, r4
   b9bce:	bd10      	pop	{r4, pc}

000b9bd0 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b9bd0:	b510      	push	{r4, lr}
   b9bd2:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b9bd4:	6800      	ldr	r0, [r0, #0]
   b9bd6:	2800      	cmp	r0, #0
   b9bd8:	db01      	blt.n	b9bde <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b9bda:	f7fd fdfd 	bl	b77d8 <sock_close>
    }
}
   b9bde:	4620      	mov	r0, r4
   b9be0:	bd10      	pop	{r4, pc}

000b9be2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b9be2:	300c      	adds	r0, #12
   b9be4:	f7ff bff4 	b.w	b9bd0 <_ZN9TCPClient4DataD1Ev>

000b9be8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b9be8:	4b02      	ldr	r3, [pc, #8]	; (b9bf4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b9bea:	681a      	ldr	r2, [r3, #0]
   b9bec:	4b02      	ldr	r3, [pc, #8]	; (b9bf8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b9bee:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b9bf0:	4770      	bx	lr
   b9bf2:	bf00      	nop
   b9bf4:	20035360 	.word	0x20035360
   b9bf8:	2003e6fc 	.word	0x2003e6fc

000b9bfc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b9bfc:	4770      	bx	lr

000b9bfe <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9bfe:	7441      	strb	r1, [r0, #17]
}
   b9c00:	4770      	bx	lr

000b9c02 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b9c02:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b9c04:	7c00      	ldrb	r0, [r0, #16]
   b9c06:	f7fd fe37 	bl	b7878 <hal_usart_available_data_for_write>
}
   b9c0a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9c0e:	bd08      	pop	{r3, pc}

000b9c10 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b9c10:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b9c12:	7c00      	ldrb	r0, [r0, #16]
   b9c14:	f7fd fe10 	bl	b7838 <hal_usart_available>
}
   b9c18:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9c1c:	bd08      	pop	{r3, pc}

000b9c1e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b9c1e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b9c20:	7c00      	ldrb	r0, [r0, #16]
   b9c22:	f7fd fe19 	bl	b7858 <hal_usart_peek>
}
   b9c26:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9c2a:	bd08      	pop	{r3, pc}

000b9c2c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b9c2c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b9c2e:	7c00      	ldrb	r0, [r0, #16]
   b9c30:	f7fd fe0a 	bl	b7848 <hal_usart_read>
}
   b9c34:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9c38:	bd08      	pop	{r3, pc}

000b9c3a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b9c3a:	7c00      	ldrb	r0, [r0, #16]
   b9c3c:	f7fd be14 	b.w	b7868 <hal_usart_flush>

000b9c40 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b9c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9c42:	7c45      	ldrb	r5, [r0, #17]
{
   b9c44:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9c46:	b12d      	cbz	r5, b9c54 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b9c48:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b9c4a:	b003      	add	sp, #12
   b9c4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b9c50:	f7fd bdea 	b.w	b7828 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9c54:	7c00      	ldrb	r0, [r0, #16]
   b9c56:	9101      	str	r1, [sp, #4]
   b9c58:	f7fd fe0e 	bl	b7878 <hal_usart_available_data_for_write>
   b9c5c:	2800      	cmp	r0, #0
   b9c5e:	9901      	ldr	r1, [sp, #4]
   b9c60:	dcf2      	bgt.n	b9c48 <_ZN11USARTSerial5writeEh+0x8>
}
   b9c62:	4628      	mov	r0, r5
   b9c64:	b003      	add	sp, #12
   b9c66:	bd30      	pop	{r4, r5, pc}

000b9c68 <_ZN11USARTSerialD0Ev>:
   b9c68:	b510      	push	{r4, lr}
   b9c6a:	2114      	movs	r1, #20
   b9c6c:	4604      	mov	r4, r0
   b9c6e:	f7fa fa18 	bl	b40a2 <_ZdlPvj>
   b9c72:	4620      	mov	r0, r4
   b9c74:	bd10      	pop	{r4, pc}
	...

000b9c78 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b9c78:	b510      	push	{r4, lr}
   b9c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9c7e:	4604      	mov	r4, r0
   b9c80:	4608      	mov	r0, r1
   b9c82:	4611      	mov	r1, r2
   b9c84:	2200      	movs	r2, #0
   b9c86:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b9c8a:	4b04      	ldr	r3, [pc, #16]	; (b9c9c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b9c8c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9c8e:	2301      	movs	r3, #1
  _serial = serial;
   b9c90:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9c92:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b9c94:	f7fd fdf8 	bl	b7888 <hal_usart_init_ex>
}
   b9c98:	4620      	mov	r0, r4
   b9c9a:	bd10      	pop	{r4, pc}
   b9c9c:	000bda50 	.word	0x000bda50

000b9ca0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9ca0:	7441      	strb	r1, [r0, #17]
}
   b9ca2:	4770      	bx	lr

000b9ca4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9ca4:	4770      	bx	lr

000b9ca6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b9ca6:	4770      	bx	lr

000b9ca8 <_ZN9USBSerial4readEv>:
{
   b9ca8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b9caa:	2100      	movs	r1, #0
   b9cac:	7c00      	ldrb	r0, [r0, #16]
   b9cae:	f7fd fe13 	bl	b78d8 <HAL_USB_USART_Receive_Data>
}
   b9cb2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9cb6:	bd08      	pop	{r3, pc}

000b9cb8 <_ZN9USBSerial4peekEv>:
{
   b9cb8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b9cba:	2101      	movs	r1, #1
   b9cbc:	7c00      	ldrb	r0, [r0, #16]
   b9cbe:	f7fd fe0b 	bl	b78d8 <HAL_USB_USART_Receive_Data>
}
   b9cc2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9cc6:	bd08      	pop	{r3, pc}

000b9cc8 <_ZN9USBSerial17availableForWriteEv>:
{
   b9cc8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b9cca:	7c00      	ldrb	r0, [r0, #16]
   b9ccc:	f7fd fdfc 	bl	b78c8 <HAL_USB_USART_Available_Data_For_Write>
}
   b9cd0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9cd4:	bd08      	pop	{r3, pc}

000b9cd6 <_ZN9USBSerial9availableEv>:
{
   b9cd6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b9cd8:	7c00      	ldrb	r0, [r0, #16]
   b9cda:	f7fd fded 	bl	b78b8 <HAL_USB_USART_Available_Data>
}
   b9cde:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9ce2:	bd08      	pop	{r3, pc}

000b9ce4 <_ZN9USBSerial5writeEh>:
{
   b9ce4:	b513      	push	{r0, r1, r4, lr}
   b9ce6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9ce8:	7c00      	ldrb	r0, [r0, #16]
{
   b9cea:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9cec:	f7fd fdec 	bl	b78c8 <HAL_USB_USART_Available_Data_For_Write>
   b9cf0:	2800      	cmp	r0, #0
   b9cf2:	9901      	ldr	r1, [sp, #4]
   b9cf4:	dc01      	bgt.n	b9cfa <_ZN9USBSerial5writeEh+0x16>
   b9cf6:	7c60      	ldrb	r0, [r4, #17]
   b9cf8:	b120      	cbz	r0, b9d04 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b9cfa:	7c20      	ldrb	r0, [r4, #16]
   b9cfc:	f7fd fdf4 	bl	b78e8 <HAL_USB_USART_Send_Data>
   b9d00:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b9d04:	b002      	add	sp, #8
   b9d06:	bd10      	pop	{r4, pc}

000b9d08 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b9d08:	7c00      	ldrb	r0, [r0, #16]
   b9d0a:	f7fd bdf5 	b.w	b78f8 <HAL_USB_USART_Flush_Data>

000b9d0e <_ZN9USBSerialD0Ev>:
   b9d0e:	b510      	push	{r4, lr}
   b9d10:	2114      	movs	r1, #20
   b9d12:	4604      	mov	r4, r0
   b9d14:	f7fa f9c5 	bl	b40a2 <_ZdlPvj>
   b9d18:	4620      	mov	r0, r4
   b9d1a:	bd10      	pop	{r4, pc}

000b9d1c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b9d1c:	b510      	push	{r4, lr}
   b9d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9d22:	4604      	mov	r4, r0
   b9d24:	4608      	mov	r0, r1
   b9d26:	2100      	movs	r1, #0
   b9d28:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b9d2c:	4b04      	ldr	r3, [pc, #16]	; (b9d40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b9d2e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9d30:	2301      	movs	r3, #1
  _serial = serial;
   b9d32:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9d34:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b9d36:	4611      	mov	r1, r2
   b9d38:	f7fd fdae 	bl	b7898 <HAL_USB_USART_Init>
}
   b9d3c:	4620      	mov	r0, r4
   b9d3e:	bd10      	pop	{r4, pc}
   b9d40:	000bda80 	.word	0x000bda80

000b9d44 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b9d44:	7c00      	ldrb	r0, [r0, #16]
   b9d46:	2200      	movs	r2, #0
   b9d48:	f7fd bdae 	b.w	b78a8 <HAL_USB_USART_Begin>

000b9d4c <_Z19acquireSerialBufferv>:
{
   b9d4c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b9d4e:	2214      	movs	r2, #20
{
   b9d50:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b9d52:	2100      	movs	r1, #0
   b9d54:	f001 fa08 	bl	bb168 <memset>
}
   b9d58:	4620      	mov	r0, r4
   b9d5a:	bd10      	pop	{r4, pc}

000b9d5c <_Z16_fetch_usbserialv>:
{
   b9d5c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9d5e:	4c0f      	ldr	r4, [pc, #60]	; (b9d9c <_Z16_fetch_usbserialv+0x40>)
{
   b9d60:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b9d62:	a803      	add	r0, sp, #12
   b9d64:	f7ff fff2 	bl	b9d4c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9d68:	7821      	ldrb	r1, [r4, #0]
   b9d6a:	f3bf 8f5b 	dmb	ish
   b9d6e:	f011 0101 	ands.w	r1, r1, #1
   b9d72:	d10f      	bne.n	b9d94 <_Z16_fetch_usbserialv+0x38>
   b9d74:	4620      	mov	r0, r4
   b9d76:	9101      	str	r1, [sp, #4]
   b9d78:	f7fa f995 	bl	b40a6 <__cxa_guard_acquire>
   b9d7c:	9901      	ldr	r1, [sp, #4]
   b9d7e:	b148      	cbz	r0, b9d94 <_Z16_fetch_usbserialv+0x38>
   b9d80:	aa03      	add	r2, sp, #12
   b9d82:	4807      	ldr	r0, [pc, #28]	; (b9da0 <_Z16_fetch_usbserialv+0x44>)
   b9d84:	f7ff ffca 	bl	b9d1c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b9d88:	4620      	mov	r0, r4
   b9d8a:	f7fa f991 	bl	b40b0 <__cxa_guard_release>
   b9d8e:	4805      	ldr	r0, [pc, #20]	; (b9da4 <_Z16_fetch_usbserialv+0x48>)
   b9d90:	f001 f9a8 	bl	bb0e4 <atexit>
	return _usbserial;
}
   b9d94:	4802      	ldr	r0, [pc, #8]	; (b9da0 <_Z16_fetch_usbserialv+0x44>)
   b9d96:	b008      	add	sp, #32
   b9d98:	bd10      	pop	{r4, pc}
   b9d9a:	bf00      	nop
   b9d9c:	2003e700 	.word	0x2003e700
   b9da0:	2003e704 	.word	0x2003e704
   b9da4:	000b9ca5 	.word	0x000b9ca5

000b9da8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b9da8:	2200      	movs	r2, #0
   b9daa:	6840      	ldr	r0, [r0, #4]
   b9dac:	4611      	mov	r1, r2
   b9dae:	f7fd bdff 	b.w	b79b0 <network_ready>

000b9db2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9db2:	2200      	movs	r2, #0
   b9db4:	6840      	ldr	r0, [r0, #4]
   b9db6:	4611      	mov	r1, r2
   b9db8:	f7fd be1a 	b.w	b79f0 <network_listening>

000b9dbc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9dbc:	2200      	movs	r2, #0
   b9dbe:	6840      	ldr	r0, [r0, #4]
   b9dc0:	4611      	mov	r1, r2
   b9dc2:	f7fd be25 	b.w	b7a10 <network_get_listen_timeout>

000b9dc6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9dc6:	6840      	ldr	r0, [r0, #4]
   b9dc8:	2200      	movs	r2, #0
   b9dca:	f7fd be19 	b.w	b7a00 <network_set_listen_timeout>

000b9dce <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9dce:	6840      	ldr	r0, [r0, #4]
   b9dd0:	2200      	movs	r2, #0
   b9dd2:	f081 0101 	eor.w	r1, r1, #1
   b9dd6:	f7fd be03 	b.w	b79e0 <network_listen>

000b9dda <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9dda:	2300      	movs	r3, #0
   b9ddc:	6840      	ldr	r0, [r0, #4]
   b9dde:	461a      	mov	r2, r3
   b9de0:	4619      	mov	r1, r3
   b9de2:	f7fd bdf5 	b.w	b79d0 <network_off>

000b9de6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b9de6:	2300      	movs	r3, #0
   b9de8:	6840      	ldr	r0, [r0, #4]
   b9dea:	461a      	mov	r2, r3
   b9dec:	4619      	mov	r1, r3
   b9dee:	f7fd bde7 	b.w	b79c0 <network_on>

000b9df2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9df2:	2200      	movs	r2, #0
   b9df4:	6840      	ldr	r0, [r0, #4]
   b9df6:	4611      	mov	r1, r2
   b9df8:	f7fd bdca 	b.w	b7990 <network_connecting>

000b9dfc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9dfc:	6840      	ldr	r0, [r0, #4]
   b9dfe:	2200      	movs	r2, #0
   b9e00:	2102      	movs	r1, #2
   b9e02:	f7fd bdcd 	b.w	b79a0 <network_disconnect>

000b9e06 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b9e06:	2300      	movs	r3, #0
   b9e08:	6840      	ldr	r0, [r0, #4]
   b9e0a:	461a      	mov	r2, r3
   b9e0c:	f7fd bdb8 	b.w	b7980 <network_connect>

000b9e10 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b9e10:	4b02      	ldr	r3, [pc, #8]	; (b9e1c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b9e12:	2204      	movs	r2, #4
   b9e14:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b9e16:	4a02      	ldr	r2, [pc, #8]	; (b9e20 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b9e18:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b9e1a:	4770      	bx	lr
   b9e1c:	2003e718 	.word	0x2003e718
   b9e20:	000bdab0 	.word	0x000bdab0

000b9e24 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b9e24:	b510      	push	{r4, lr}
   b9e26:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b9e28:	f001 f9e6 	bl	bb1f8 <strlen>
   b9e2c:	3801      	subs	r0, #1
   b9e2e:	1823      	adds	r3, r4, r0
   b9e30:	4620      	mov	r0, r4
	while(i<j){
   b9e32:	4283      	cmp	r3, r0
   b9e34:	d906      	bls.n	b9e44 <_Z11str_reversePc+0x20>
		c = *i;
   b9e36:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b9e38:	7819      	ldrb	r1, [r3, #0]
   b9e3a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b9e3e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b9e42:	e7f6      	b.n	b9e32 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b9e44:	bd10      	pop	{r4, pc}

000b9e46 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b9e46:	b570      	push	{r4, r5, r6, lr}
   b9e48:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b9e4a:	1e91      	subs	r1, r2, #2
   b9e4c:	2922      	cmp	r1, #34	; 0x22
   b9e4e:	d81d      	bhi.n	b9e8c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b9e50:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b9e52:	b930      	cbnz	r0, b9e62 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b9e54:	4423      	add	r3, r4
            *ptr++ = '0';
   b9e56:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b9e58:	429d      	cmp	r5, r3
   b9e5a:	d210      	bcs.n	b9e7e <ultoa+0x38>
            *ptr++ = '0';
   b9e5c:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b9e60:	e7fa      	b.n	b9e58 <ultoa+0x12>
            result.quot = a/radix;
   b9e62:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b9e66:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b9e6a:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b9e6c:	2809      	cmp	r0, #9
                *ptr += '0';
   b9e6e:	bf94      	ite	ls
   b9e70:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b9e72:	3157      	addhi	r1, #87	; 0x57
   b9e74:	b2c9      	uxtb	r1, r1
   b9e76:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b9e7a:	4630      	mov	r0, r6
	while(a){
   b9e7c:	e7e9      	b.n	b9e52 <ultoa+0xc>

	*ptr = '\0';
   b9e7e:	2300      	movs	r3, #0
	str_reverse(buffer);
   b9e80:	4620      	mov	r0, r4
	*ptr = '\0';
   b9e82:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b9e84:	f7ff ffce 	bl	b9e24 <_Z11str_reversePc>
	return buffer;
   b9e88:	4620      	mov	r0, r4
}
   b9e8a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b9e8c:	2000      	movs	r0, #0
   b9e8e:	e7fc      	b.n	b9e8a <ultoa+0x44>

000b9e90 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b9e90:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b9e92:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b9e94:	460c      	mov	r4, r1
   b9e96:	4615      	mov	r5, r2
	if(a<0){
   b9e98:	da0e      	bge.n	b9eb8 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b9e9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b9e9e:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b9ea2:	bf14      	ite	ne
   b9ea4:	4258      	negne	r0, r3
   b9ea6:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b9ea8:	2301      	movs	r3, #1
		*buffer = '-';
   b9eaa:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b9eac:	462a      	mov	r2, r5
   b9eae:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b9eb0:	f7ff ffc9 	bl	b9e46 <ultoa>
	}
	return buffer;
}
   b9eb4:	4620      	mov	r0, r4
   b9eb6:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b9eb8:	2301      	movs	r3, #1
   b9eba:	e7f9      	b.n	b9eb0 <itoa+0x20>

000b9ebc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b9ebc:	4b01      	ldr	r3, [pc, #4]	; (b9ec4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b9ebe:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b9ec0:	4770      	bx	lr
   b9ec2:	bf00      	nop
   b9ec4:	20035368 	.word	0x20035368

000b9ec8 <serialEventRun>:
{
   b9ec8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b9eca:	4b0b      	ldr	r3, [pc, #44]	; (b9ef8 <serialEventRun+0x30>)
   b9ecc:	b143      	cbz	r3, b9ee0 <serialEventRun+0x18>
   b9ece:	f7ff ff45 	bl	b9d5c <_Z16_fetch_usbserialv>
   b9ed2:	6803      	ldr	r3, [r0, #0]
   b9ed4:	691b      	ldr	r3, [r3, #16]
   b9ed6:	4798      	blx	r3
   b9ed8:	2800      	cmp	r0, #0
   b9eda:	dd01      	ble.n	b9ee0 <serialEventRun+0x18>
        serialEvent();
   b9edc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b9ee0:	4b06      	ldr	r3, [pc, #24]	; (b9efc <serialEventRun+0x34>)
   b9ee2:	b143      	cbz	r3, b9ef6 <serialEventRun+0x2e>
   b9ee4:	f000 f8c8 	bl	ba078 <_Z22__fetch_global_Serial1v>
   b9ee8:	6803      	ldr	r3, [r0, #0]
   b9eea:	691b      	ldr	r3, [r3, #16]
   b9eec:	4798      	blx	r3
   b9eee:	2800      	cmp	r0, #0
   b9ef0:	dd01      	ble.n	b9ef6 <serialEventRun+0x2e>
        serialEvent1();
   b9ef2:	f3af 8000 	nop.w
}
   b9ef6:	bd08      	pop	{r3, pc}
	...

000b9f00 <_post_loop>:
{
   b9f00:	b508      	push	{r3, lr}
	serialEventRun();
   b9f02:	f7ff ffe1 	bl	b9ec8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b9f06:	f7fd fbcf 	bl	b76a8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b9f0a:	4b01      	ldr	r3, [pc, #4]	; (b9f10 <_post_loop+0x10>)
   b9f0c:	6018      	str	r0, [r3, #0]
}
   b9f0e:	bd08      	pop	{r3, pc}
   b9f10:	2003e728 	.word	0x2003e728

000b9f14 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9f14:	4805      	ldr	r0, [pc, #20]	; (b9f2c <_Z33system_initialize_user_backup_ramv+0x18>)
   b9f16:	4a06      	ldr	r2, [pc, #24]	; (b9f30 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b9f18:	4906      	ldr	r1, [pc, #24]	; (b9f34 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b9f1a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9f1c:	1a12      	subs	r2, r2, r0
   b9f1e:	f001 f8fb 	bl	bb118 <memcpy>
    __backup_sram_signature = signature;
   b9f22:	4b05      	ldr	r3, [pc, #20]	; (b9f38 <_Z33system_initialize_user_backup_ramv+0x24>)
   b9f24:	4a05      	ldr	r2, [pc, #20]	; (b9f3c <_Z33system_initialize_user_backup_ramv+0x28>)
   b9f26:	601a      	str	r2, [r3, #0]
}
   b9f28:	bd08      	pop	{r3, pc}
   b9f2a:	bf00      	nop
   b9f2c:	2003f400 	.word	0x2003f400
   b9f30:	2003f404 	.word	0x2003f404
   b9f34:	000bdff4 	.word	0x000bdff4
   b9f38:	2003f400 	.word	0x2003f400
   b9f3c:	9a271c1e 	.word	0x9a271c1e

000b9f40 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b9f40:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b9f42:	2300      	movs	r3, #0
   b9f44:	9300      	str	r3, [sp, #0]
   b9f46:	461a      	mov	r2, r3
   b9f48:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9f4c:	f7fd fd06 	bl	b795c <system_ctrl_set_result>
}
   b9f50:	b003      	add	sp, #12
   b9f52:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b9f58 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b9f58:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b9f5a:	8843      	ldrh	r3, [r0, #2]
   b9f5c:	2b0a      	cmp	r3, #10
   b9f5e:	d008      	beq.n	b9f72 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b9f60:	2b50      	cmp	r3, #80	; 0x50
   b9f62:	d10b      	bne.n	b9f7c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b9f64:	4b09      	ldr	r3, [pc, #36]	; (b9f8c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b9f66:	681b      	ldr	r3, [r3, #0]
   b9f68:	b14b      	cbz	r3, b9f7e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b9f6a:	b003      	add	sp, #12
   b9f6c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b9f70:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b9f72:	f7ff ffe5 	bl	b9f40 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b9f76:	b003      	add	sp, #12
   b9f78:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b9f7c:	2300      	movs	r3, #0
   b9f7e:	9300      	str	r3, [sp, #0]
   b9f80:	461a      	mov	r2, r3
   b9f82:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9f86:	f7fd fce9 	bl	b795c <system_ctrl_set_result>
}
   b9f8a:	e7f4      	b.n	b9f76 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b9f8c:	2003e724 	.word	0x2003e724

000b9f90 <module_user_init_hook>:
{
   b9f90:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b9f92:	4812      	ldr	r0, [pc, #72]	; (b9fdc <module_user_init_hook+0x4c>)
   b9f94:	2100      	movs	r1, #0
   b9f96:	f7fd fd9b 	bl	b7ad0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b9f9a:	4b11      	ldr	r3, [pc, #68]	; (b9fe0 <module_user_init_hook+0x50>)
   b9f9c:	681a      	ldr	r2, [r3, #0]
   b9f9e:	4b11      	ldr	r3, [pc, #68]	; (b9fe4 <module_user_init_hook+0x54>)
   b9fa0:	429a      	cmp	r2, r3
   b9fa2:	4b11      	ldr	r3, [pc, #68]	; (b9fe8 <module_user_init_hook+0x58>)
   b9fa4:	bf0c      	ite	eq
   b9fa6:	2201      	moveq	r2, #1
   b9fa8:	2200      	movne	r2, #0
   b9faa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b9fac:	d001      	beq.n	b9fb2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b9fae:	f7ff ffb1 	bl	b9f14 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b9fb2:	f7fd fb69 	bl	b7688 <HAL_RNG_GetRandomNumber>
   b9fb6:	4604      	mov	r4, r0
    srand(seed);
   b9fb8:	f001 f8de 	bl	bb178 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b9fbc:	4b0b      	ldr	r3, [pc, #44]	; (b9fec <module_user_init_hook+0x5c>)
   b9fbe:	b113      	cbz	r3, b9fc6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b9fc0:	4620      	mov	r0, r4
   b9fc2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b9fc6:	2100      	movs	r1, #0
   b9fc8:	4808      	ldr	r0, [pc, #32]	; (b9fec <module_user_init_hook+0x5c>)
   b9fca:	f7fd fcd1 	bl	b7970 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b9fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b9fd2:	4807      	ldr	r0, [pc, #28]	; (b9ff0 <module_user_init_hook+0x60>)
   b9fd4:	2100      	movs	r1, #0
   b9fd6:	f7fd bcb7 	b.w	b7948 <system_ctrl_set_app_request_handler>
   b9fda:	bf00      	nop
   b9fdc:	000b9ebd 	.word	0x000b9ebd
   b9fe0:	2003f400 	.word	0x2003f400
   b9fe4:	9a271c1e 	.word	0x9a271c1e
   b9fe8:	2003e720 	.word	0x2003e720
   b9fec:	00000000 	.word	0x00000000
   b9ff0:	000b9f59 	.word	0x000b9f59

000b9ff4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9ff4:	4770      	bx	lr
	...

000b9ff8 <_Z19__fetch_global_Wirev>:
{
   b9ff8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9ffa:	4d0e      	ldr	r5, [pc, #56]	; (ba034 <_Z19__fetch_global_Wirev+0x3c>)
   b9ffc:	7829      	ldrb	r1, [r5, #0]
   b9ffe:	f3bf 8f5b 	dmb	ish
   ba002:	f011 0401 	ands.w	r4, r1, #1
{
   ba006:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba008:	d111      	bne.n	ba02e <_Z19__fetch_global_Wirev+0x36>
   ba00a:	4628      	mov	r0, r5
   ba00c:	f7fa f84b 	bl	b40a6 <__cxa_guard_acquire>
   ba010:	b168      	cbz	r0, ba02e <_Z19__fetch_global_Wirev+0x36>
   ba012:	a801      	add	r0, sp, #4
   ba014:	f7fa fade 	bl	b45d4 <_Z17acquireWireBufferv>
   ba018:	aa01      	add	r2, sp, #4
   ba01a:	4621      	mov	r1, r4
   ba01c:	4806      	ldr	r0, [pc, #24]	; (ba038 <_Z19__fetch_global_Wirev+0x40>)
   ba01e:	f7fe ff79 	bl	b8f14 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   ba022:	4628      	mov	r0, r5
   ba024:	f7fa f844 	bl	b40b0 <__cxa_guard_release>
   ba028:	4804      	ldr	r0, [pc, #16]	; (ba03c <_Z19__fetch_global_Wirev+0x44>)
   ba02a:	f001 f85b 	bl	bb0e4 <atexit>
	return wire;
}
   ba02e:	4802      	ldr	r0, [pc, #8]	; (ba038 <_Z19__fetch_global_Wirev+0x40>)
   ba030:	b007      	add	sp, #28
   ba032:	bd30      	pop	{r4, r5, pc}
   ba034:	2003e72c 	.word	0x2003e72c
   ba038:	2003e730 	.word	0x2003e730
   ba03c:	000b9ff5 	.word	0x000b9ff5

000ba040 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba040:	4770      	bx	lr
	...

000ba044 <_Z20acquireSerial1Bufferv>:
{
   ba044:	b538      	push	{r3, r4, r5, lr}
   ba046:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   ba048:	2514      	movs	r5, #20
   ba04a:	462a      	mov	r2, r5
   ba04c:	2100      	movs	r1, #0
   ba04e:	f001 f88b 	bl	bb168 <memset>
   ba052:	8025      	strh	r5, [r4, #0]
   ba054:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba056:	4907      	ldr	r1, [pc, #28]	; (ba074 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   ba058:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba05a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   ba05c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba05e:	f000 f82f 	bl	ba0c0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba062:	4904      	ldr	r1, [pc, #16]	; (ba074 <_Z20acquireSerial1Bufferv+0x30>)
    };
   ba064:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba066:	4628      	mov	r0, r5
   ba068:	f000 f82a 	bl	ba0c0 <_ZnajRKSt9nothrow_t>
    };
   ba06c:	60e0      	str	r0, [r4, #12]
}
   ba06e:	4620      	mov	r0, r4
   ba070:	bd38      	pop	{r3, r4, r5, pc}
   ba072:	bf00      	nop
   ba074:	000bdae4 	.word	0x000bdae4

000ba078 <_Z22__fetch_global_Serial1v>:
{
   ba078:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba07a:	4d0e      	ldr	r5, [pc, #56]	; (ba0b4 <_Z22__fetch_global_Serial1v+0x3c>)
   ba07c:	7829      	ldrb	r1, [r5, #0]
   ba07e:	f3bf 8f5b 	dmb	ish
   ba082:	f011 0401 	ands.w	r4, r1, #1
{
   ba086:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba088:	d111      	bne.n	ba0ae <_Z22__fetch_global_Serial1v+0x36>
   ba08a:	4628      	mov	r0, r5
   ba08c:	f7fa f80b 	bl	b40a6 <__cxa_guard_acquire>
   ba090:	b168      	cbz	r0, ba0ae <_Z22__fetch_global_Serial1v+0x36>
   ba092:	a801      	add	r0, sp, #4
   ba094:	f7ff ffd6 	bl	ba044 <_Z20acquireSerial1Bufferv>
   ba098:	aa01      	add	r2, sp, #4
   ba09a:	4621      	mov	r1, r4
   ba09c:	4806      	ldr	r0, [pc, #24]	; (ba0b8 <_Z22__fetch_global_Serial1v+0x40>)
   ba09e:	f7ff fdeb 	bl	b9c78 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   ba0a2:	4628      	mov	r0, r5
   ba0a4:	f7fa f804 	bl	b40b0 <__cxa_guard_release>
   ba0a8:	4804      	ldr	r0, [pc, #16]	; (ba0bc <_Z22__fetch_global_Serial1v+0x44>)
   ba0aa:	f001 f81b 	bl	bb0e4 <atexit>
    return serial1;
}
   ba0ae:	4802      	ldr	r0, [pc, #8]	; (ba0b8 <_Z22__fetch_global_Serial1v+0x40>)
   ba0b0:	b007      	add	sp, #28
   ba0b2:	bd30      	pop	{r4, r5, pc}
   ba0b4:	2003e744 	.word	0x2003e744
   ba0b8:	2003e748 	.word	0x2003e748
   ba0bc:	000ba041 	.word	0x000ba041

000ba0c0 <_ZnajRKSt9nothrow_t>:
   ba0c0:	f7f9 bfeb 	b.w	b409a <_Znaj>

000ba0c4 <_ZSt17__throw_bad_allocv>:
   ba0c4:	b508      	push	{r3, lr}
   ba0c6:	f7fd fce3 	bl	b7a90 <abort>

000ba0ca <_ZSt19__throw_logic_errorPKc>:
   ba0ca:	b508      	push	{r3, lr}
   ba0cc:	f7fd fce0 	bl	b7a90 <abort>

000ba0d0 <_ZSt20__throw_length_errorPKc>:
   ba0d0:	b508      	push	{r3, lr}
   ba0d2:	f7fd fcdd 	bl	b7a90 <abort>

000ba0d6 <_ZSt25__throw_bad_function_callv>:
   ba0d6:	b508      	push	{r3, lr}
   ba0d8:	f7fd fcda 	bl	b7a90 <abort>

000ba0dc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   ba0dc:	4901      	ldr	r1, [pc, #4]	; (ba0e4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   ba0de:	f000 b97d 	b.w	ba3dc <_ZNKSt9type_infoeqERKS_>
   ba0e2:	bf00      	nop
   ba0e4:	000bdb00 	.word	0x000bdb00

000ba0e8 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   ba0e8:	b10a      	cbz	r2, ba0ee <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   ba0ea:	f001 b815 	b.w	bb118 <memcpy>
   ba0ee:	4770      	bx	lr

000ba0f0 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
   ba0f0:	b10a      	cbz	r2, ba0f6 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
   ba0f2:	f001 b801 	b.w	bb0f8 <memcmp>
   ba0f6:	4610      	mov	r0, r2
   ba0f8:	4770      	bx	lr
	...

000ba0fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   ba0fc:	b508      	push	{r3, lr}
   ba0fe:	680b      	ldr	r3, [r1, #0]
   ba100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   ba104:	d302      	bcc.n	ba10c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   ba106:	480d      	ldr	r0, [pc, #52]	; (ba13c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   ba108:	f7ff ffe2 	bl	ba0d0 <_ZSt20__throw_length_errorPKc>
   ba10c:	4293      	cmp	r3, r2
   ba10e:	d90b      	bls.n	ba128 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   ba110:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   ba114:	ea4f 0042 	mov.w	r0, r2, lsl #1
   ba118:	d206      	bcs.n	ba128 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   ba11a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   ba11e:	bf2a      	itet	cs
   ba120:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   ba124:	6008      	strcc	r0, [r1, #0]
   ba126:	600b      	strcs	r3, [r1, #0]
   ba128:	6808      	ldr	r0, [r1, #0]
   ba12a:	3001      	adds	r0, #1
   ba12c:	d501      	bpl.n	ba132 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   ba12e:	f7ff ffc9 	bl	ba0c4 <_ZSt17__throw_bad_allocv>
   ba132:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   ba136:	f7f9 bfae 	b.w	b4096 <_Znwj>
   ba13a:	bf00      	nop
   ba13c:	000bdb08 	.word	0x000bdb08

000ba140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   ba140:	f850 3b08 	ldr.w	r3, [r0], #8
   ba144:	4283      	cmp	r3, r0
   ba146:	d002      	beq.n	ba14e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   ba148:	4618      	mov	r0, r3
   ba14a:	f7f9 bfa8 	b.w	b409e <_ZdlPv>
   ba14e:	4770      	bx	lr

000ba150 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   ba150:	2a01      	cmp	r2, #1
   ba152:	b410      	push	{r4}
   ba154:	d104      	bne.n	ba160 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   ba156:	780a      	ldrb	r2, [r1, #0]
   ba158:	f85d 4b04 	ldr.w	r4, [sp], #4
   ba15c:	7002      	strb	r2, [r0, #0]
   ba15e:	4770      	bx	lr
   ba160:	f85d 4b04 	ldr.w	r4, [sp], #4
   ba164:	f7ff bfc0 	b.w	ba0e8 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000ba168 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
   ba168:	b508      	push	{r3, lr}
   ba16a:	1a52      	subs	r2, r2, r1
   ba16c:	f7ff fff0 	bl	ba150 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   ba170:	bd08      	pop	{r3, pc}

000ba172 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   ba172:	b508      	push	{r3, lr}
   ba174:	1a52      	subs	r2, r2, r1
   ba176:	f7ff ffeb 	bl	ba150 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   ba17a:	bd08      	pop	{r3, pc}

000ba17c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
   ba17c:	4288      	cmp	r0, r1
   ba17e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba180:	4604      	mov	r4, r0
   ba182:	460e      	mov	r6, r1
   ba184:	d01e      	beq.n	ba1c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
   ba186:	4603      	mov	r3, r0
   ba188:	684d      	ldr	r5, [r1, #4]
   ba18a:	f853 2b08 	ldr.w	r2, [r3], #8
   ba18e:	429a      	cmp	r2, r3
   ba190:	bf14      	ite	ne
   ba192:	6882      	ldrne	r2, [r0, #8]
   ba194:	220f      	moveq	r2, #15
   ba196:	42aa      	cmp	r2, r5
   ba198:	d20a      	bcs.n	ba1b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
   ba19a:	a901      	add	r1, sp, #4
   ba19c:	9501      	str	r5, [sp, #4]
   ba19e:	f7ff ffad 	bl	ba0fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   ba1a2:	4607      	mov	r7, r0
   ba1a4:	4620      	mov	r0, r4
   ba1a6:	f7ff ffcb 	bl	ba140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   ba1aa:	9b01      	ldr	r3, [sp, #4]
   ba1ac:	6027      	str	r7, [r4, #0]
   ba1ae:	60a3      	str	r3, [r4, #8]
   ba1b0:	b125      	cbz	r5, ba1bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
   ba1b2:	6831      	ldr	r1, [r6, #0]
   ba1b4:	6820      	ldr	r0, [r4, #0]
   ba1b6:	462a      	mov	r2, r5
   ba1b8:	f7ff ffca 	bl	ba150 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   ba1bc:	6823      	ldr	r3, [r4, #0]
   ba1be:	6065      	str	r5, [r4, #4]
   ba1c0:	2200      	movs	r2, #0
   ba1c2:	555a      	strb	r2, [r3, r5]
   ba1c4:	b003      	add	sp, #12
   ba1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba1c8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
   ba1c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba1ca:	6846      	ldr	r6, [r0, #4]
   ba1cc:	9101      	str	r1, [sp, #4]
   ba1ce:	4605      	mov	r5, r0
   ba1d0:	4608      	mov	r0, r1
   ba1d2:	f001 f811 	bl	bb1f8 <strlen>
   ba1d6:	4286      	cmp	r6, r0
   ba1d8:	4604      	mov	r4, r0
   ba1da:	4632      	mov	r2, r6
   ba1dc:	9901      	ldr	r1, [sp, #4]
   ba1de:	bf28      	it	cs
   ba1e0:	4602      	movcs	r2, r0
   ba1e2:	6828      	ldr	r0, [r5, #0]
   ba1e4:	f7ff ff84 	bl	ba0f0 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
   ba1e8:	b900      	cbnz	r0, ba1ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
   ba1ea:	1b30      	subs	r0, r6, r4
   ba1ec:	b002      	add	sp, #8
   ba1ee:	bd70      	pop	{r4, r5, r6, pc}

000ba1f0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   ba1f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   ba1f2:	2400      	movs	r4, #0
   ba1f4:	2310      	movs	r3, #16
   ba1f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
   ba1fa:	6803      	ldr	r3, [r0, #0]
   ba1fc:	4615      	mov	r5, r2
   ba1fe:	699e      	ldr	r6, [r3, #24]
   ba200:	6812      	ldr	r2, [r2, #0]
   ba202:	466b      	mov	r3, sp
   ba204:	e9cd 4400 	strd	r4, r4, [sp]
   ba208:	47b0      	blx	r6
   ba20a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   ba20e:	f003 0306 	and.w	r3, r3, #6
   ba212:	2b06      	cmp	r3, #6
   ba214:	bf03      	ittte	eq
   ba216:	9b00      	ldreq	r3, [sp, #0]
   ba218:	602b      	streq	r3, [r5, #0]
   ba21a:	2001      	moveq	r0, #1
   ba21c:	4620      	movne	r0, r4
   ba21e:	b004      	add	sp, #16
   ba220:	bd70      	pop	{r4, r5, r6, pc}

000ba222 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   ba222:	9800      	ldr	r0, [sp, #0]
   ba224:	4290      	cmp	r0, r2
   ba226:	bf14      	ite	ne
   ba228:	2001      	movne	r0, #1
   ba22a:	2006      	moveq	r0, #6
   ba22c:	4770      	bx	lr
	...

000ba230 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   ba230:	b510      	push	{r4, lr}
   ba232:	4b03      	ldr	r3, [pc, #12]	; (ba240 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   ba234:	6003      	str	r3, [r0, #0]
   ba236:	4604      	mov	r4, r0
   ba238:	f000 f8cd 	bl	ba3d6 <_ZNSt9type_infoD1Ev>
   ba23c:	4620      	mov	r0, r4
   ba23e:	bd10      	pop	{r4, pc}
   ba240:	000bdb58 	.word	0x000bdb58

000ba244 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   ba244:	b510      	push	{r4, lr}
   ba246:	4604      	mov	r4, r0
   ba248:	f7ff fff2 	bl	ba230 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba24c:	4620      	mov	r0, r4
   ba24e:	2108      	movs	r1, #8
   ba250:	f7f9 ff27 	bl	b40a2 <_ZdlPvj>
   ba254:	4620      	mov	r0, r4
   ba256:	bd10      	pop	{r4, pc}

000ba258 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   ba258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba25c:	461f      	mov	r7, r3
   ba25e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   ba262:	f8dd 8018 	ldr.w	r8, [sp, #24]
   ba266:	4598      	cmp	r8, r3
   ba268:	4606      	mov	r6, r0
   ba26a:	4615      	mov	r5, r2
   ba26c:	d107      	bne.n	ba27e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba26e:	9907      	ldr	r1, [sp, #28]
   ba270:	f000 f8b4 	bl	ba3dc <_ZNKSt9type_infoeqERKS_>
   ba274:	b118      	cbz	r0, ba27e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba276:	7165      	strb	r5, [r4, #5]
   ba278:	2000      	movs	r0, #0
   ba27a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba27e:	4639      	mov	r1, r7
   ba280:	4630      	mov	r0, r6
   ba282:	f000 f8ab 	bl	ba3dc <_ZNKSt9type_infoeqERKS_>
   ba286:	2800      	cmp	r0, #0
   ba288:	d0f6      	beq.n	ba278 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   ba28a:	2301      	movs	r3, #1
   ba28c:	f8c4 8000 	str.w	r8, [r4]
   ba290:	7125      	strb	r5, [r4, #4]
   ba292:	71a3      	strb	r3, [r4, #6]
   ba294:	e7f0      	b.n	ba278 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000ba296 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   ba296:	b538      	push	{r3, r4, r5, lr}
   ba298:	4615      	mov	r5, r2
   ba29a:	461c      	mov	r4, r3
   ba29c:	f000 f89e 	bl	ba3dc <_ZNKSt9type_infoeqERKS_>
   ba2a0:	b120      	cbz	r0, ba2ac <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   ba2a2:	2308      	movs	r3, #8
   ba2a4:	60e3      	str	r3, [r4, #12]
   ba2a6:	2306      	movs	r3, #6
   ba2a8:	6025      	str	r5, [r4, #0]
   ba2aa:	7123      	strb	r3, [r4, #4]
   ba2ac:	bd38      	pop	{r3, r4, r5, pc}

000ba2ae <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   ba2ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba2b0:	4605      	mov	r5, r0
   ba2b2:	460c      	mov	r4, r1
   ba2b4:	9201      	str	r2, [sp, #4]
   ba2b6:	461e      	mov	r6, r3
   ba2b8:	f000 f890 	bl	ba3dc <_ZNKSt9type_infoeqERKS_>
   ba2bc:	b950      	cbnz	r0, ba2d4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba2be:	2e03      	cmp	r6, #3
   ba2c0:	d808      	bhi.n	ba2d4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba2c2:	6823      	ldr	r3, [r4, #0]
   ba2c4:	9a01      	ldr	r2, [sp, #4]
   ba2c6:	695b      	ldr	r3, [r3, #20]
   ba2c8:	4629      	mov	r1, r5
   ba2ca:	4620      	mov	r0, r4
   ba2cc:	b002      	add	sp, #8
   ba2ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba2d2:	4718      	bx	r3
   ba2d4:	b002      	add	sp, #8
   ba2d6:	bd70      	pop	{r4, r5, r6, pc}

000ba2d8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   ba2d8:	b510      	push	{r4, lr}
   ba2da:	4b03      	ldr	r3, [pc, #12]	; (ba2e8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   ba2dc:	6003      	str	r3, [r0, #0]
   ba2de:	4604      	mov	r4, r0
   ba2e0:	f7ff ffa6 	bl	ba230 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba2e4:	4620      	mov	r0, r4
   ba2e6:	bd10      	pop	{r4, pc}
   ba2e8:	000bdbb8 	.word	0x000bdbb8

000ba2ec <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   ba2ec:	b510      	push	{r4, lr}
   ba2ee:	4604      	mov	r4, r0
   ba2f0:	f7ff fff2 	bl	ba2d8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   ba2f4:	4620      	mov	r0, r4
   ba2f6:	210c      	movs	r1, #12
   ba2f8:	f7f9 fed3 	bl	b40a2 <_ZdlPvj>
   ba2fc:	4620      	mov	r0, r4
   ba2fe:	bd10      	pop	{r4, pc}

000ba300 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   ba300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba302:	9f08      	ldr	r7, [sp, #32]
   ba304:	4297      	cmp	r7, r2
   ba306:	4605      	mov	r5, r0
   ba308:	460e      	mov	r6, r1
   ba30a:	4614      	mov	r4, r2
   ba30c:	d00a      	beq.n	ba324 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   ba30e:	68a8      	ldr	r0, [r5, #8]
   ba310:	6802      	ldr	r2, [r0, #0]
   ba312:	9708      	str	r7, [sp, #32]
   ba314:	6a15      	ldr	r5, [r2, #32]
   ba316:	4631      	mov	r1, r6
   ba318:	4622      	mov	r2, r4
   ba31a:	46ac      	mov	ip, r5
   ba31c:	b003      	add	sp, #12
   ba31e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   ba322:	4760      	bx	ip
   ba324:	4619      	mov	r1, r3
   ba326:	9301      	str	r3, [sp, #4]
   ba328:	f000 f858 	bl	ba3dc <_ZNKSt9type_infoeqERKS_>
   ba32c:	9b01      	ldr	r3, [sp, #4]
   ba32e:	2800      	cmp	r0, #0
   ba330:	d0ed      	beq.n	ba30e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   ba332:	2006      	movs	r0, #6
   ba334:	b003      	add	sp, #12
   ba336:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba338 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   ba338:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba33c:	460d      	mov	r5, r1
   ba33e:	4619      	mov	r1, r3
   ba340:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   ba344:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   ba348:	4681      	mov	r9, r0
   ba34a:	4617      	mov	r7, r2
   ba34c:	4698      	mov	r8, r3
   ba34e:	f000 f845 	bl	ba3dc <_ZNKSt9type_infoeqERKS_>
   ba352:	b190      	cbz	r0, ba37a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   ba354:	2d00      	cmp	r5, #0
   ba356:	6034      	str	r4, [r6, #0]
   ba358:	7137      	strb	r7, [r6, #4]
   ba35a:	db09      	blt.n	ba370 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   ba35c:	1961      	adds	r1, r4, r5
   ba35e:	458a      	cmp	sl, r1
   ba360:	bf0c      	ite	eq
   ba362:	2106      	moveq	r1, #6
   ba364:	2101      	movne	r1, #1
   ba366:	71b1      	strb	r1, [r6, #6]
   ba368:	2000      	movs	r0, #0
   ba36a:	b001      	add	sp, #4
   ba36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba370:	3502      	adds	r5, #2
   ba372:	d1f9      	bne.n	ba368 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba374:	2301      	movs	r3, #1
   ba376:	71b3      	strb	r3, [r6, #6]
   ba378:	e7f6      	b.n	ba368 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba37a:	4554      	cmp	r4, sl
   ba37c:	d106      	bne.n	ba38c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba37e:	4659      	mov	r1, fp
   ba380:	4648      	mov	r0, r9
   ba382:	f000 f82b 	bl	ba3dc <_ZNKSt9type_infoeqERKS_>
   ba386:	b108      	cbz	r0, ba38c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba388:	7177      	strb	r7, [r6, #5]
   ba38a:	e7ed      	b.n	ba368 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba38c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   ba390:	6803      	ldr	r3, [r0, #0]
   ba392:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   ba396:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   ba39a:	69dc      	ldr	r4, [r3, #28]
   ba39c:	463a      	mov	r2, r7
   ba39e:	4643      	mov	r3, r8
   ba3a0:	4629      	mov	r1, r5
   ba3a2:	46a4      	mov	ip, r4
   ba3a4:	b001      	add	sp, #4
   ba3a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba3aa:	4760      	bx	ip

000ba3ac <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   ba3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba3b0:	4607      	mov	r7, r0
   ba3b2:	460c      	mov	r4, r1
   ba3b4:	4615      	mov	r5, r2
   ba3b6:	461e      	mov	r6, r3
   ba3b8:	f7ff ff6d 	bl	ba296 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   ba3bc:	b948      	cbnz	r0, ba3d2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   ba3be:	68b8      	ldr	r0, [r7, #8]
   ba3c0:	6803      	ldr	r3, [r0, #0]
   ba3c2:	699f      	ldr	r7, [r3, #24]
   ba3c4:	462a      	mov	r2, r5
   ba3c6:	4633      	mov	r3, r6
   ba3c8:	4621      	mov	r1, r4
   ba3ca:	46bc      	mov	ip, r7
   ba3cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   ba3d0:	4760      	bx	ip
   ba3d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000ba3d6 <_ZNSt9type_infoD1Ev>:
   ba3d6:	4770      	bx	lr

000ba3d8 <_ZNKSt9type_info14__is_pointer_pEv>:
   ba3d8:	2000      	movs	r0, #0
   ba3da:	4770      	bx	lr

000ba3dc <_ZNKSt9type_infoeqERKS_>:
   ba3dc:	4281      	cmp	r1, r0
   ba3de:	b508      	push	{r3, lr}
   ba3e0:	d00e      	beq.n	ba400 <_ZNKSt9type_infoeqERKS_+0x24>
   ba3e2:	6840      	ldr	r0, [r0, #4]
   ba3e4:	7803      	ldrb	r3, [r0, #0]
   ba3e6:	2b2a      	cmp	r3, #42	; 0x2a
   ba3e8:	d00c      	beq.n	ba404 <_ZNKSt9type_infoeqERKS_+0x28>
   ba3ea:	6849      	ldr	r1, [r1, #4]
   ba3ec:	780b      	ldrb	r3, [r1, #0]
   ba3ee:	2b2a      	cmp	r3, #42	; 0x2a
   ba3f0:	bf08      	it	eq
   ba3f2:	3101      	addeq	r1, #1
   ba3f4:	f000 feee 	bl	bb1d4 <strcmp>
   ba3f8:	fab0 f080 	clz	r0, r0
   ba3fc:	0940      	lsrs	r0, r0, #5
   ba3fe:	bd08      	pop	{r3, pc}
   ba400:	2001      	movs	r0, #1
   ba402:	e7fc      	b.n	ba3fe <_ZNKSt9type_infoeqERKS_+0x22>
   ba404:	2000      	movs	r0, #0
   ba406:	e7fa      	b.n	ba3fe <_ZNKSt9type_infoeqERKS_+0x22>

000ba408 <floorf>:
   ba408:	ee10 2a10 	vmov	r2, s0
   ba40c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   ba410:	3b7f      	subs	r3, #127	; 0x7f
   ba412:	2b16      	cmp	r3, #22
   ba414:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   ba418:	dc28      	bgt.n	ba46c <floorf+0x64>
   ba41a:	2b00      	cmp	r3, #0
   ba41c:	db18      	blt.n	ba450 <floorf+0x48>
   ba41e:	491a      	ldr	r1, [pc, #104]	; (ba488 <floorf+0x80>)
   ba420:	4119      	asrs	r1, r3
   ba422:	420a      	tst	r2, r1
   ba424:	d021      	beq.n	ba46a <floorf+0x62>
   ba426:	eddf 7a19 	vldr	s15, [pc, #100]	; ba48c <floorf+0x84>
   ba42a:	ee70 7a27 	vadd.f32	s15, s0, s15
   ba42e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   ba432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba436:	dd18      	ble.n	ba46a <floorf+0x62>
   ba438:	2a00      	cmp	r2, #0
   ba43a:	da04      	bge.n	ba446 <floorf+0x3e>
   ba43c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   ba440:	fa40 f303 	asr.w	r3, r0, r3
   ba444:	441a      	add	r2, r3
   ba446:	ea22 0301 	bic.w	r3, r2, r1
   ba44a:	ee00 3a10 	vmov	s0, r3
   ba44e:	4770      	bx	lr
   ba450:	eddf 7a0e 	vldr	s15, [pc, #56]	; ba48c <floorf+0x84>
   ba454:	ee70 7a27 	vadd.f32	s15, s0, s15
   ba458:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   ba45c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba460:	dd03      	ble.n	ba46a <floorf+0x62>
   ba462:	2a00      	cmp	r2, #0
   ba464:	db08      	blt.n	ba478 <floorf+0x70>
   ba466:	ed9f 0a0a 	vldr	s0, [pc, #40]	; ba490 <floorf+0x88>
   ba46a:	4770      	bx	lr
   ba46c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   ba470:	d3fb      	bcc.n	ba46a <floorf+0x62>
   ba472:	ee30 0a00 	vadd.f32	s0, s0, s0
   ba476:	4770      	bx	lr
   ba478:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   ba47c:	2900      	cmp	r1, #0
   ba47e:	bf18      	it	ne
   ba480:	eeb0 0a67 	vmovne.f32	s0, s15
   ba484:	4770      	bx	lr
   ba486:	bf00      	nop
   ba488:	007fffff 	.word	0x007fffff
   ba48c:	7149f2ca 	.word	0x7149f2ca
   ba490:	00000000 	.word	0x00000000

000ba494 <sqrt>:
   ba494:	b538      	push	{r3, r4, r5, lr}
   ba496:	ed2d 8b02 	vpush	{d8}
   ba49a:	ec55 4b10 	vmov	r4, r5, d0
   ba49e:	f000 f833 	bl	ba508 <__ieee754_sqrt>
   ba4a2:	4b18      	ldr	r3, [pc, #96]	; (ba504 <sqrt+0x70>)
   ba4a4:	eeb0 8a40 	vmov.f32	s16, s0
   ba4a8:	eef0 8a60 	vmov.f32	s17, s1
   ba4ac:	f993 3000 	ldrsb.w	r3, [r3]
   ba4b0:	3301      	adds	r3, #1
   ba4b2:	d00d      	beq.n	ba4d0 <sqrt+0x3c>
   ba4b4:	4622      	mov	r2, r4
   ba4b6:	462b      	mov	r3, r5
   ba4b8:	4620      	mov	r0, r4
   ba4ba:	4629      	mov	r1, r5
   ba4bc:	f000 fd46 	bl	baf4c <__aeabi_dcmpun>
   ba4c0:	b930      	cbnz	r0, ba4d0 <sqrt+0x3c>
   ba4c2:	2200      	movs	r2, #0
   ba4c4:	2300      	movs	r3, #0
   ba4c6:	4620      	mov	r0, r4
   ba4c8:	4629      	mov	r1, r5
   ba4ca:	f000 fd17 	bl	baefc <__aeabi_dcmplt>
   ba4ce:	b930      	cbnz	r0, ba4de <sqrt+0x4a>
   ba4d0:	eeb0 0a48 	vmov.f32	s0, s16
   ba4d4:	eef0 0a68 	vmov.f32	s1, s17
   ba4d8:	ecbd 8b02 	vpop	{d8}
   ba4dc:	bd38      	pop	{r3, r4, r5, pc}
   ba4de:	f7fd fae7 	bl	b7ab0 <__errno>
   ba4e2:	2200      	movs	r2, #0
   ba4e4:	2300      	movs	r3, #0
   ba4e6:	2121      	movs	r1, #33	; 0x21
   ba4e8:	6001      	str	r1, [r0, #0]
   ba4ea:	4610      	mov	r0, r2
   ba4ec:	4619      	mov	r1, r3
   ba4ee:	f000 fbbd 	bl	bac6c <__aeabi_ddiv>
   ba4f2:	ec41 0b18 	vmov	d8, r0, r1
   ba4f6:	eeb0 0a48 	vmov.f32	s0, s16
   ba4fa:	eef0 0a68 	vmov.f32	s1, s17
   ba4fe:	ecbd 8b02 	vpop	{d8}
   ba502:	bd38      	pop	{r3, r4, r5, pc}
   ba504:	20035364 	.word	0x20035364

000ba508 <__ieee754_sqrt>:
   ba508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba50c:	4a63      	ldr	r2, [pc, #396]	; (ba69c <__ieee754_sqrt+0x194>)
   ba50e:	ec55 4b10 	vmov	r4, r5, d0
   ba512:	43aa      	bics	r2, r5
   ba514:	f000 809f 	beq.w	ba656 <__ieee754_sqrt+0x14e>
   ba518:	2d00      	cmp	r5, #0
   ba51a:	ee10 ca10 	vmov	ip, s0
   ba51e:	462b      	mov	r3, r5
   ba520:	dd54      	ble.n	ba5cc <__ieee754_sqrt+0xc4>
   ba522:	1529      	asrs	r1, r5, #20
   ba524:	d063      	beq.n	ba5ee <__ieee754_sqrt+0xe6>
   ba526:	f3c3 0313 	ubfx	r3, r3, #0, #20
   ba52a:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   ba52e:	07c9      	lsls	r1, r1, #31
   ba530:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ba534:	d404      	bmi.n	ba540 <__ieee754_sqrt+0x38>
   ba536:	005b      	lsls	r3, r3, #1
   ba538:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   ba53c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba540:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   ba544:	2600      	movs	r6, #0
   ba546:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   ba54a:	107f      	asrs	r7, r7, #1
   ba54c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba550:	f04f 0e16 	mov.w	lr, #22
   ba554:	4634      	mov	r4, r6
   ba556:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   ba55a:	18a1      	adds	r1, r4, r2
   ba55c:	4299      	cmp	r1, r3
   ba55e:	dc02      	bgt.n	ba566 <__ieee754_sqrt+0x5e>
   ba560:	1a5b      	subs	r3, r3, r1
   ba562:	188c      	adds	r4, r1, r2
   ba564:	4416      	add	r6, r2
   ba566:	005b      	lsls	r3, r3, #1
   ba568:	f1be 0e01 	subs.w	lr, lr, #1
   ba56c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   ba570:	ea4f 0252 	mov.w	r2, r2, lsr #1
   ba574:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba578:	d1ef      	bne.n	ba55a <__ieee754_sqrt+0x52>
   ba57a:	4675      	mov	r5, lr
   ba57c:	2020      	movs	r0, #32
   ba57e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   ba582:	e00a      	b.n	ba59a <__ieee754_sqrt+0x92>
   ba584:	d044      	beq.n	ba610 <__ieee754_sqrt+0x108>
   ba586:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   ba58a:	3801      	subs	r0, #1
   ba58c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   ba590:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba594:	ea4f 0252 	mov.w	r2, r2, lsr #1
   ba598:	d043      	beq.n	ba622 <__ieee754_sqrt+0x11a>
   ba59a:	42a3      	cmp	r3, r4
   ba59c:	eb02 010e 	add.w	r1, r2, lr
   ba5a0:	ddf0      	ble.n	ba584 <__ieee754_sqrt+0x7c>
   ba5a2:	2900      	cmp	r1, #0
   ba5a4:	eb01 0e02 	add.w	lr, r1, r2
   ba5a8:	db0a      	blt.n	ba5c0 <__ieee754_sqrt+0xb8>
   ba5aa:	46a0      	mov	r8, r4
   ba5ac:	1b1b      	subs	r3, r3, r4
   ba5ae:	4561      	cmp	r1, ip
   ba5b0:	bf88      	it	hi
   ba5b2:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   ba5b6:	ebac 0c01 	sub.w	ip, ip, r1
   ba5ba:	4415      	add	r5, r2
   ba5bc:	4644      	mov	r4, r8
   ba5be:	e7e2      	b.n	ba586 <__ieee754_sqrt+0x7e>
   ba5c0:	f1be 0f00 	cmp.w	lr, #0
   ba5c4:	dbf1      	blt.n	ba5aa <__ieee754_sqrt+0xa2>
   ba5c6:	f104 0801 	add.w	r8, r4, #1
   ba5ca:	e7ef      	b.n	ba5ac <__ieee754_sqrt+0xa4>
   ba5cc:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   ba5d0:	4322      	orrs	r2, r4
   ba5d2:	d038      	beq.n	ba646 <__ieee754_sqrt+0x13e>
   ba5d4:	2d00      	cmp	r5, #0
   ba5d6:	d14e      	bne.n	ba676 <__ieee754_sqrt+0x16e>
   ba5d8:	4629      	mov	r1, r5
   ba5da:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   ba5de:	3915      	subs	r1, #21
   ba5e0:	4613      	mov	r3, r2
   ba5e2:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   ba5e6:	2a00      	cmp	r2, #0
   ba5e8:	d0f7      	beq.n	ba5da <__ieee754_sqrt+0xd2>
   ba5ea:	02d6      	lsls	r6, r2, #11
   ba5ec:	d450      	bmi.n	ba690 <__ieee754_sqrt+0x188>
   ba5ee:	2000      	movs	r0, #0
   ba5f0:	005b      	lsls	r3, r3, #1
   ba5f2:	02dd      	lsls	r5, r3, #11
   ba5f4:	4604      	mov	r4, r0
   ba5f6:	f100 0001 	add.w	r0, r0, #1
   ba5fa:	d5f9      	bpl.n	ba5f0 <__ieee754_sqrt+0xe8>
   ba5fc:	461a      	mov	r2, r3
   ba5fe:	4663      	mov	r3, ip
   ba600:	fa0c fc00 	lsl.w	ip, ip, r0
   ba604:	f1c0 0020 	rsb	r0, r0, #32
   ba608:	40c3      	lsrs	r3, r0
   ba60a:	1b09      	subs	r1, r1, r4
   ba60c:	4313      	orrs	r3, r2
   ba60e:	e78a      	b.n	ba526 <__ieee754_sqrt+0x1e>
   ba610:	4561      	cmp	r1, ip
   ba612:	d8b8      	bhi.n	ba586 <__ieee754_sqrt+0x7e>
   ba614:	2900      	cmp	r1, #0
   ba616:	eb01 0e02 	add.w	lr, r1, r2
   ba61a:	dbd1      	blt.n	ba5c0 <__ieee754_sqrt+0xb8>
   ba61c:	4698      	mov	r8, r3
   ba61e:	2300      	movs	r3, #0
   ba620:	e7c9      	b.n	ba5b6 <__ieee754_sqrt+0xae>
   ba622:	ea53 030c 	orrs.w	r3, r3, ip
   ba626:	d110      	bne.n	ba64a <__ieee754_sqrt+0x142>
   ba628:	0868      	lsrs	r0, r5, #1
   ba62a:	1071      	asrs	r1, r6, #1
   ba62c:	07f3      	lsls	r3, r6, #31
   ba62e:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   ba632:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   ba636:	bf48      	it	mi
   ba638:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   ba63c:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   ba640:	4602      	mov	r2, r0
   ba642:	ec43 2b10 	vmov	d0, r2, r3
   ba646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba64a:	1c6a      	adds	r2, r5, #1
   ba64c:	bf16      	itet	ne
   ba64e:	1c68      	addne	r0, r5, #1
   ba650:	3601      	addeq	r6, #1
   ba652:	0840      	lsrne	r0, r0, #1
   ba654:	e7e9      	b.n	ba62a <__ieee754_sqrt+0x122>
   ba656:	ee10 2a10 	vmov	r2, s0
   ba65a:	ee10 0a10 	vmov	r0, s0
   ba65e:	462b      	mov	r3, r5
   ba660:	4629      	mov	r1, r5
   ba662:	f000 f9d9 	bl	baa18 <__aeabi_dmul>
   ba666:	4622      	mov	r2, r4
   ba668:	462b      	mov	r3, r5
   ba66a:	f000 f81f 	bl	ba6ac <__adddf3>
   ba66e:	ec41 0b10 	vmov	d0, r0, r1
   ba672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba676:	ee10 2a10 	vmov	r2, s0
   ba67a:	4620      	mov	r0, r4
   ba67c:	4629      	mov	r1, r5
   ba67e:	f000 f813 	bl	ba6a8 <__aeabi_dsub>
   ba682:	4602      	mov	r2, r0
   ba684:	460b      	mov	r3, r1
   ba686:	f000 faf1 	bl	bac6c <__aeabi_ddiv>
   ba68a:	ec41 0b10 	vmov	d0, r0, r1
   ba68e:	e7da      	b.n	ba646 <__ieee754_sqrt+0x13e>
   ba690:	4663      	mov	r3, ip
   ba692:	2020      	movs	r0, #32
   ba694:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   ba698:	e7b6      	b.n	ba608 <__ieee754_sqrt+0x100>
   ba69a:	bf00      	nop
   ba69c:	7ff00000 	.word	0x7ff00000

000ba6a0 <__aeabi_drsub>:
   ba6a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   ba6a4:	e002      	b.n	ba6ac <__adddf3>
   ba6a6:	bf00      	nop

000ba6a8 <__aeabi_dsub>:
   ba6a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000ba6ac <__adddf3>:
   ba6ac:	b530      	push	{r4, r5, lr}
   ba6ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
   ba6b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   ba6b6:	ea94 0f05 	teq	r4, r5
   ba6ba:	bf08      	it	eq
   ba6bc:	ea90 0f02 	teqeq	r0, r2
   ba6c0:	bf1f      	itttt	ne
   ba6c2:	ea54 0c00 	orrsne.w	ip, r4, r0
   ba6c6:	ea55 0c02 	orrsne.w	ip, r5, r2
   ba6ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   ba6ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   ba6d2:	f000 80e2 	beq.w	ba89a <__adddf3+0x1ee>
   ba6d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   ba6da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   ba6de:	bfb8      	it	lt
   ba6e0:	426d      	neglt	r5, r5
   ba6e2:	dd0c      	ble.n	ba6fe <__adddf3+0x52>
   ba6e4:	442c      	add	r4, r5
   ba6e6:	ea80 0202 	eor.w	r2, r0, r2
   ba6ea:	ea81 0303 	eor.w	r3, r1, r3
   ba6ee:	ea82 0000 	eor.w	r0, r2, r0
   ba6f2:	ea83 0101 	eor.w	r1, r3, r1
   ba6f6:	ea80 0202 	eor.w	r2, r0, r2
   ba6fa:	ea81 0303 	eor.w	r3, r1, r3
   ba6fe:	2d36      	cmp	r5, #54	; 0x36
   ba700:	bf88      	it	hi
   ba702:	bd30      	pophi	{r4, r5, pc}
   ba704:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   ba708:	ea4f 3101 	mov.w	r1, r1, lsl #12
   ba70c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   ba710:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   ba714:	d002      	beq.n	ba71c <__adddf3+0x70>
   ba716:	4240      	negs	r0, r0
   ba718:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ba71c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   ba720:	ea4f 3303 	mov.w	r3, r3, lsl #12
   ba724:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   ba728:	d002      	beq.n	ba730 <__adddf3+0x84>
   ba72a:	4252      	negs	r2, r2
   ba72c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   ba730:	ea94 0f05 	teq	r4, r5
   ba734:	f000 80a7 	beq.w	ba886 <__adddf3+0x1da>
   ba738:	f1a4 0401 	sub.w	r4, r4, #1
   ba73c:	f1d5 0e20 	rsbs	lr, r5, #32
   ba740:	db0d      	blt.n	ba75e <__adddf3+0xb2>
   ba742:	fa02 fc0e 	lsl.w	ip, r2, lr
   ba746:	fa22 f205 	lsr.w	r2, r2, r5
   ba74a:	1880      	adds	r0, r0, r2
   ba74c:	f141 0100 	adc.w	r1, r1, #0
   ba750:	fa03 f20e 	lsl.w	r2, r3, lr
   ba754:	1880      	adds	r0, r0, r2
   ba756:	fa43 f305 	asr.w	r3, r3, r5
   ba75a:	4159      	adcs	r1, r3
   ba75c:	e00e      	b.n	ba77c <__adddf3+0xd0>
   ba75e:	f1a5 0520 	sub.w	r5, r5, #32
   ba762:	f10e 0e20 	add.w	lr, lr, #32
   ba766:	2a01      	cmp	r2, #1
   ba768:	fa03 fc0e 	lsl.w	ip, r3, lr
   ba76c:	bf28      	it	cs
   ba76e:	f04c 0c02 	orrcs.w	ip, ip, #2
   ba772:	fa43 f305 	asr.w	r3, r3, r5
   ba776:	18c0      	adds	r0, r0, r3
   ba778:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   ba77c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba780:	d507      	bpl.n	ba792 <__adddf3+0xe6>
   ba782:	f04f 0e00 	mov.w	lr, #0
   ba786:	f1dc 0c00 	rsbs	ip, ip, #0
   ba78a:	eb7e 0000 	sbcs.w	r0, lr, r0
   ba78e:	eb6e 0101 	sbc.w	r1, lr, r1
   ba792:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   ba796:	d31b      	bcc.n	ba7d0 <__adddf3+0x124>
   ba798:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   ba79c:	d30c      	bcc.n	ba7b8 <__adddf3+0x10c>
   ba79e:	0849      	lsrs	r1, r1, #1
   ba7a0:	ea5f 0030 	movs.w	r0, r0, rrx
   ba7a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   ba7a8:	f104 0401 	add.w	r4, r4, #1
   ba7ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
   ba7b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   ba7b4:	f080 809a 	bcs.w	ba8ec <__adddf3+0x240>
   ba7b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   ba7bc:	bf08      	it	eq
   ba7be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   ba7c2:	f150 0000 	adcs.w	r0, r0, #0
   ba7c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ba7ca:	ea41 0105 	orr.w	r1, r1, r5
   ba7ce:	bd30      	pop	{r4, r5, pc}
   ba7d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   ba7d4:	4140      	adcs	r0, r0
   ba7d6:	eb41 0101 	adc.w	r1, r1, r1
   ba7da:	3c01      	subs	r4, #1
   ba7dc:	bf28      	it	cs
   ba7de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   ba7e2:	d2e9      	bcs.n	ba7b8 <__adddf3+0x10c>
   ba7e4:	f091 0f00 	teq	r1, #0
   ba7e8:	bf04      	itt	eq
   ba7ea:	4601      	moveq	r1, r0
   ba7ec:	2000      	moveq	r0, #0
   ba7ee:	fab1 f381 	clz	r3, r1
   ba7f2:	bf08      	it	eq
   ba7f4:	3320      	addeq	r3, #32
   ba7f6:	f1a3 030b 	sub.w	r3, r3, #11
   ba7fa:	f1b3 0220 	subs.w	r2, r3, #32
   ba7fe:	da0c      	bge.n	ba81a <__adddf3+0x16e>
   ba800:	320c      	adds	r2, #12
   ba802:	dd08      	ble.n	ba816 <__adddf3+0x16a>
   ba804:	f102 0c14 	add.w	ip, r2, #20
   ba808:	f1c2 020c 	rsb	r2, r2, #12
   ba80c:	fa01 f00c 	lsl.w	r0, r1, ip
   ba810:	fa21 f102 	lsr.w	r1, r1, r2
   ba814:	e00c      	b.n	ba830 <__adddf3+0x184>
   ba816:	f102 0214 	add.w	r2, r2, #20
   ba81a:	bfd8      	it	le
   ba81c:	f1c2 0c20 	rsble	ip, r2, #32
   ba820:	fa01 f102 	lsl.w	r1, r1, r2
   ba824:	fa20 fc0c 	lsr.w	ip, r0, ip
   ba828:	bfdc      	itt	le
   ba82a:	ea41 010c 	orrle.w	r1, r1, ip
   ba82e:	4090      	lslle	r0, r2
   ba830:	1ae4      	subs	r4, r4, r3
   ba832:	bfa2      	ittt	ge
   ba834:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   ba838:	4329      	orrge	r1, r5
   ba83a:	bd30      	popge	{r4, r5, pc}
   ba83c:	ea6f 0404 	mvn.w	r4, r4
   ba840:	3c1f      	subs	r4, #31
   ba842:	da1c      	bge.n	ba87e <__adddf3+0x1d2>
   ba844:	340c      	adds	r4, #12
   ba846:	dc0e      	bgt.n	ba866 <__adddf3+0x1ba>
   ba848:	f104 0414 	add.w	r4, r4, #20
   ba84c:	f1c4 0220 	rsb	r2, r4, #32
   ba850:	fa20 f004 	lsr.w	r0, r0, r4
   ba854:	fa01 f302 	lsl.w	r3, r1, r2
   ba858:	ea40 0003 	orr.w	r0, r0, r3
   ba85c:	fa21 f304 	lsr.w	r3, r1, r4
   ba860:	ea45 0103 	orr.w	r1, r5, r3
   ba864:	bd30      	pop	{r4, r5, pc}
   ba866:	f1c4 040c 	rsb	r4, r4, #12
   ba86a:	f1c4 0220 	rsb	r2, r4, #32
   ba86e:	fa20 f002 	lsr.w	r0, r0, r2
   ba872:	fa01 f304 	lsl.w	r3, r1, r4
   ba876:	ea40 0003 	orr.w	r0, r0, r3
   ba87a:	4629      	mov	r1, r5
   ba87c:	bd30      	pop	{r4, r5, pc}
   ba87e:	fa21 f004 	lsr.w	r0, r1, r4
   ba882:	4629      	mov	r1, r5
   ba884:	bd30      	pop	{r4, r5, pc}
   ba886:	f094 0f00 	teq	r4, #0
   ba88a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   ba88e:	bf06      	itte	eq
   ba890:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   ba894:	3401      	addeq	r4, #1
   ba896:	3d01      	subne	r5, #1
   ba898:	e74e      	b.n	ba738 <__adddf3+0x8c>
   ba89a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   ba89e:	bf18      	it	ne
   ba8a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   ba8a4:	d029      	beq.n	ba8fa <__adddf3+0x24e>
   ba8a6:	ea94 0f05 	teq	r4, r5
   ba8aa:	bf08      	it	eq
   ba8ac:	ea90 0f02 	teqeq	r0, r2
   ba8b0:	d005      	beq.n	ba8be <__adddf3+0x212>
   ba8b2:	ea54 0c00 	orrs.w	ip, r4, r0
   ba8b6:	bf04      	itt	eq
   ba8b8:	4619      	moveq	r1, r3
   ba8ba:	4610      	moveq	r0, r2
   ba8bc:	bd30      	pop	{r4, r5, pc}
   ba8be:	ea91 0f03 	teq	r1, r3
   ba8c2:	bf1e      	ittt	ne
   ba8c4:	2100      	movne	r1, #0
   ba8c6:	2000      	movne	r0, #0
   ba8c8:	bd30      	popne	{r4, r5, pc}
   ba8ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   ba8ce:	d105      	bne.n	ba8dc <__adddf3+0x230>
   ba8d0:	0040      	lsls	r0, r0, #1
   ba8d2:	4149      	adcs	r1, r1
   ba8d4:	bf28      	it	cs
   ba8d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   ba8da:	bd30      	pop	{r4, r5, pc}
   ba8dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   ba8e0:	bf3c      	itt	cc
   ba8e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   ba8e6:	bd30      	popcc	{r4, r5, pc}
   ba8e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba8ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   ba8f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   ba8f4:	f04f 0000 	mov.w	r0, #0
   ba8f8:	bd30      	pop	{r4, r5, pc}
   ba8fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   ba8fe:	bf1a      	itte	ne
   ba900:	4619      	movne	r1, r3
   ba902:	4610      	movne	r0, r2
   ba904:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   ba908:	bf1c      	itt	ne
   ba90a:	460b      	movne	r3, r1
   ba90c:	4602      	movne	r2, r0
   ba90e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   ba912:	bf06      	itte	eq
   ba914:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   ba918:	ea91 0f03 	teqeq	r1, r3
   ba91c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   ba920:	bd30      	pop	{r4, r5, pc}
   ba922:	bf00      	nop

000ba924 <__aeabi_ui2d>:
   ba924:	f090 0f00 	teq	r0, #0
   ba928:	bf04      	itt	eq
   ba92a:	2100      	moveq	r1, #0
   ba92c:	4770      	bxeq	lr
   ba92e:	b530      	push	{r4, r5, lr}
   ba930:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ba934:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ba938:	f04f 0500 	mov.w	r5, #0
   ba93c:	f04f 0100 	mov.w	r1, #0
   ba940:	e750      	b.n	ba7e4 <__adddf3+0x138>
   ba942:	bf00      	nop

000ba944 <__aeabi_i2d>:
   ba944:	f090 0f00 	teq	r0, #0
   ba948:	bf04      	itt	eq
   ba94a:	2100      	moveq	r1, #0
   ba94c:	4770      	bxeq	lr
   ba94e:	b530      	push	{r4, r5, lr}
   ba950:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ba954:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ba958:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   ba95c:	bf48      	it	mi
   ba95e:	4240      	negmi	r0, r0
   ba960:	f04f 0100 	mov.w	r1, #0
   ba964:	e73e      	b.n	ba7e4 <__adddf3+0x138>
   ba966:	bf00      	nop

000ba968 <__aeabi_f2d>:
   ba968:	0042      	lsls	r2, r0, #1
   ba96a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   ba96e:	ea4f 0131 	mov.w	r1, r1, rrx
   ba972:	ea4f 7002 	mov.w	r0, r2, lsl #28
   ba976:	bf1f      	itttt	ne
   ba978:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   ba97c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   ba980:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   ba984:	4770      	bxne	lr
   ba986:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   ba98a:	bf08      	it	eq
   ba98c:	4770      	bxeq	lr
   ba98e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   ba992:	bf04      	itt	eq
   ba994:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   ba998:	4770      	bxeq	lr
   ba99a:	b530      	push	{r4, r5, lr}
   ba99c:	f44f 7460 	mov.w	r4, #896	; 0x380
   ba9a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba9a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   ba9a8:	e71c      	b.n	ba7e4 <__adddf3+0x138>
   ba9aa:	bf00      	nop

000ba9ac <__aeabi_ul2d>:
   ba9ac:	ea50 0201 	orrs.w	r2, r0, r1
   ba9b0:	bf08      	it	eq
   ba9b2:	4770      	bxeq	lr
   ba9b4:	b530      	push	{r4, r5, lr}
   ba9b6:	f04f 0500 	mov.w	r5, #0
   ba9ba:	e00a      	b.n	ba9d2 <__aeabi_l2d+0x16>

000ba9bc <__aeabi_l2d>:
   ba9bc:	ea50 0201 	orrs.w	r2, r0, r1
   ba9c0:	bf08      	it	eq
   ba9c2:	4770      	bxeq	lr
   ba9c4:	b530      	push	{r4, r5, lr}
   ba9c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   ba9ca:	d502      	bpl.n	ba9d2 <__aeabi_l2d+0x16>
   ba9cc:	4240      	negs	r0, r0
   ba9ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ba9d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ba9d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ba9da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   ba9de:	f43f aed8 	beq.w	ba792 <__adddf3+0xe6>
   ba9e2:	f04f 0203 	mov.w	r2, #3
   ba9e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   ba9ea:	bf18      	it	ne
   ba9ec:	3203      	addne	r2, #3
   ba9ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   ba9f2:	bf18      	it	ne
   ba9f4:	3203      	addne	r2, #3
   ba9f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   ba9fa:	f1c2 0320 	rsb	r3, r2, #32
   ba9fe:	fa00 fc03 	lsl.w	ip, r0, r3
   baa02:	fa20 f002 	lsr.w	r0, r0, r2
   baa06:	fa01 fe03 	lsl.w	lr, r1, r3
   baa0a:	ea40 000e 	orr.w	r0, r0, lr
   baa0e:	fa21 f102 	lsr.w	r1, r1, r2
   baa12:	4414      	add	r4, r2
   baa14:	e6bd      	b.n	ba792 <__adddf3+0xe6>
   baa16:	bf00      	nop

000baa18 <__aeabi_dmul>:
   baa18:	b570      	push	{r4, r5, r6, lr}
   baa1a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   baa1e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   baa22:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   baa26:	bf1d      	ittte	ne
   baa28:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   baa2c:	ea94 0f0c 	teqne	r4, ip
   baa30:	ea95 0f0c 	teqne	r5, ip
   baa34:	f000 f8de 	bleq	babf4 <__aeabi_dmul+0x1dc>
   baa38:	442c      	add	r4, r5
   baa3a:	ea81 0603 	eor.w	r6, r1, r3
   baa3e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   baa42:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   baa46:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   baa4a:	bf18      	it	ne
   baa4c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   baa50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   baa54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   baa58:	d038      	beq.n	baacc <__aeabi_dmul+0xb4>
   baa5a:	fba0 ce02 	umull	ip, lr, r0, r2
   baa5e:	f04f 0500 	mov.w	r5, #0
   baa62:	fbe1 e502 	umlal	lr, r5, r1, r2
   baa66:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   baa6a:	fbe0 e503 	umlal	lr, r5, r0, r3
   baa6e:	f04f 0600 	mov.w	r6, #0
   baa72:	fbe1 5603 	umlal	r5, r6, r1, r3
   baa76:	f09c 0f00 	teq	ip, #0
   baa7a:	bf18      	it	ne
   baa7c:	f04e 0e01 	orrne.w	lr, lr, #1
   baa80:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   baa84:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   baa88:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   baa8c:	d204      	bcs.n	baa98 <__aeabi_dmul+0x80>
   baa8e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   baa92:	416d      	adcs	r5, r5
   baa94:	eb46 0606 	adc.w	r6, r6, r6
   baa98:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   baa9c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   baaa0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   baaa4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   baaa8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   baaac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   baab0:	bf88      	it	hi
   baab2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   baab6:	d81e      	bhi.n	baaf6 <__aeabi_dmul+0xde>
   baab8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   baabc:	bf08      	it	eq
   baabe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   baac2:	f150 0000 	adcs.w	r0, r0, #0
   baac6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   baaca:	bd70      	pop	{r4, r5, r6, pc}
   baacc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   baad0:	ea46 0101 	orr.w	r1, r6, r1
   baad4:	ea40 0002 	orr.w	r0, r0, r2
   baad8:	ea81 0103 	eor.w	r1, r1, r3
   baadc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   baae0:	bfc2      	ittt	gt
   baae2:	ebd4 050c 	rsbsgt	r5, r4, ip
   baae6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   baaea:	bd70      	popgt	{r4, r5, r6, pc}
   baaec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   baaf0:	f04f 0e00 	mov.w	lr, #0
   baaf4:	3c01      	subs	r4, #1
   baaf6:	f300 80ab 	bgt.w	bac50 <__aeabi_dmul+0x238>
   baafa:	f114 0f36 	cmn.w	r4, #54	; 0x36
   baafe:	bfde      	ittt	le
   bab00:	2000      	movle	r0, #0
   bab02:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bab06:	bd70      	pople	{r4, r5, r6, pc}
   bab08:	f1c4 0400 	rsb	r4, r4, #0
   bab0c:	3c20      	subs	r4, #32
   bab0e:	da35      	bge.n	bab7c <__aeabi_dmul+0x164>
   bab10:	340c      	adds	r4, #12
   bab12:	dc1b      	bgt.n	bab4c <__aeabi_dmul+0x134>
   bab14:	f104 0414 	add.w	r4, r4, #20
   bab18:	f1c4 0520 	rsb	r5, r4, #32
   bab1c:	fa00 f305 	lsl.w	r3, r0, r5
   bab20:	fa20 f004 	lsr.w	r0, r0, r4
   bab24:	fa01 f205 	lsl.w	r2, r1, r5
   bab28:	ea40 0002 	orr.w	r0, r0, r2
   bab2c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bab30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bab34:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bab38:	fa21 f604 	lsr.w	r6, r1, r4
   bab3c:	eb42 0106 	adc.w	r1, r2, r6
   bab40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bab44:	bf08      	it	eq
   bab46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bab4a:	bd70      	pop	{r4, r5, r6, pc}
   bab4c:	f1c4 040c 	rsb	r4, r4, #12
   bab50:	f1c4 0520 	rsb	r5, r4, #32
   bab54:	fa00 f304 	lsl.w	r3, r0, r4
   bab58:	fa20 f005 	lsr.w	r0, r0, r5
   bab5c:	fa01 f204 	lsl.w	r2, r1, r4
   bab60:	ea40 0002 	orr.w	r0, r0, r2
   bab64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bab68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bab6c:	f141 0100 	adc.w	r1, r1, #0
   bab70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bab74:	bf08      	it	eq
   bab76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bab7a:	bd70      	pop	{r4, r5, r6, pc}
   bab7c:	f1c4 0520 	rsb	r5, r4, #32
   bab80:	fa00 f205 	lsl.w	r2, r0, r5
   bab84:	ea4e 0e02 	orr.w	lr, lr, r2
   bab88:	fa20 f304 	lsr.w	r3, r0, r4
   bab8c:	fa01 f205 	lsl.w	r2, r1, r5
   bab90:	ea43 0302 	orr.w	r3, r3, r2
   bab94:	fa21 f004 	lsr.w	r0, r1, r4
   bab98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bab9c:	fa21 f204 	lsr.w	r2, r1, r4
   baba0:	ea20 0002 	bic.w	r0, r0, r2
   baba4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   baba8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   babac:	bf08      	it	eq
   babae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   babb2:	bd70      	pop	{r4, r5, r6, pc}
   babb4:	f094 0f00 	teq	r4, #0
   babb8:	d10f      	bne.n	babda <__aeabi_dmul+0x1c2>
   babba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   babbe:	0040      	lsls	r0, r0, #1
   babc0:	eb41 0101 	adc.w	r1, r1, r1
   babc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   babc8:	bf08      	it	eq
   babca:	3c01      	subeq	r4, #1
   babcc:	d0f7      	beq.n	babbe <__aeabi_dmul+0x1a6>
   babce:	ea41 0106 	orr.w	r1, r1, r6
   babd2:	f095 0f00 	teq	r5, #0
   babd6:	bf18      	it	ne
   babd8:	4770      	bxne	lr
   babda:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   babde:	0052      	lsls	r2, r2, #1
   babe0:	eb43 0303 	adc.w	r3, r3, r3
   babe4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   babe8:	bf08      	it	eq
   babea:	3d01      	subeq	r5, #1
   babec:	d0f7      	beq.n	babde <__aeabi_dmul+0x1c6>
   babee:	ea43 0306 	orr.w	r3, r3, r6
   babf2:	4770      	bx	lr
   babf4:	ea94 0f0c 	teq	r4, ip
   babf8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   babfc:	bf18      	it	ne
   babfe:	ea95 0f0c 	teqne	r5, ip
   bac02:	d00c      	beq.n	bac1e <__aeabi_dmul+0x206>
   bac04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bac08:	bf18      	it	ne
   bac0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bac0e:	d1d1      	bne.n	babb4 <__aeabi_dmul+0x19c>
   bac10:	ea81 0103 	eor.w	r1, r1, r3
   bac14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bac18:	f04f 0000 	mov.w	r0, #0
   bac1c:	bd70      	pop	{r4, r5, r6, pc}
   bac1e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bac22:	bf06      	itte	eq
   bac24:	4610      	moveq	r0, r2
   bac26:	4619      	moveq	r1, r3
   bac28:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bac2c:	d019      	beq.n	bac62 <__aeabi_dmul+0x24a>
   bac2e:	ea94 0f0c 	teq	r4, ip
   bac32:	d102      	bne.n	bac3a <__aeabi_dmul+0x222>
   bac34:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bac38:	d113      	bne.n	bac62 <__aeabi_dmul+0x24a>
   bac3a:	ea95 0f0c 	teq	r5, ip
   bac3e:	d105      	bne.n	bac4c <__aeabi_dmul+0x234>
   bac40:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bac44:	bf1c      	itt	ne
   bac46:	4610      	movne	r0, r2
   bac48:	4619      	movne	r1, r3
   bac4a:	d10a      	bne.n	bac62 <__aeabi_dmul+0x24a>
   bac4c:	ea81 0103 	eor.w	r1, r1, r3
   bac50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bac54:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bac58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bac5c:	f04f 0000 	mov.w	r0, #0
   bac60:	bd70      	pop	{r4, r5, r6, pc}
   bac62:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bac66:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bac6a:	bd70      	pop	{r4, r5, r6, pc}

000bac6c <__aeabi_ddiv>:
   bac6c:	b570      	push	{r4, r5, r6, lr}
   bac6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bac72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bac76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bac7a:	bf1d      	ittte	ne
   bac7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bac80:	ea94 0f0c 	teqne	r4, ip
   bac84:	ea95 0f0c 	teqne	r5, ip
   bac88:	f000 f8a7 	bleq	badda <__aeabi_ddiv+0x16e>
   bac8c:	eba4 0405 	sub.w	r4, r4, r5
   bac90:	ea81 0e03 	eor.w	lr, r1, r3
   bac94:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bac98:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bac9c:	f000 8088 	beq.w	badb0 <__aeabi_ddiv+0x144>
   baca0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   baca4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   baca8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bacac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bacb0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bacb4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bacb8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bacbc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bacc0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bacc4:	429d      	cmp	r5, r3
   bacc6:	bf08      	it	eq
   bacc8:	4296      	cmpeq	r6, r2
   bacca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bacce:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bacd2:	d202      	bcs.n	bacda <__aeabi_ddiv+0x6e>
   bacd4:	085b      	lsrs	r3, r3, #1
   bacd6:	ea4f 0232 	mov.w	r2, r2, rrx
   bacda:	1ab6      	subs	r6, r6, r2
   bacdc:	eb65 0503 	sbc.w	r5, r5, r3
   bace0:	085b      	lsrs	r3, r3, #1
   bace2:	ea4f 0232 	mov.w	r2, r2, rrx
   bace6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bacea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bacee:	ebb6 0e02 	subs.w	lr, r6, r2
   bacf2:	eb75 0e03 	sbcs.w	lr, r5, r3
   bacf6:	bf22      	ittt	cs
   bacf8:	1ab6      	subcs	r6, r6, r2
   bacfa:	4675      	movcs	r5, lr
   bacfc:	ea40 000c 	orrcs.w	r0, r0, ip
   bad00:	085b      	lsrs	r3, r3, #1
   bad02:	ea4f 0232 	mov.w	r2, r2, rrx
   bad06:	ebb6 0e02 	subs.w	lr, r6, r2
   bad0a:	eb75 0e03 	sbcs.w	lr, r5, r3
   bad0e:	bf22      	ittt	cs
   bad10:	1ab6      	subcs	r6, r6, r2
   bad12:	4675      	movcs	r5, lr
   bad14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bad18:	085b      	lsrs	r3, r3, #1
   bad1a:	ea4f 0232 	mov.w	r2, r2, rrx
   bad1e:	ebb6 0e02 	subs.w	lr, r6, r2
   bad22:	eb75 0e03 	sbcs.w	lr, r5, r3
   bad26:	bf22      	ittt	cs
   bad28:	1ab6      	subcs	r6, r6, r2
   bad2a:	4675      	movcs	r5, lr
   bad2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bad30:	085b      	lsrs	r3, r3, #1
   bad32:	ea4f 0232 	mov.w	r2, r2, rrx
   bad36:	ebb6 0e02 	subs.w	lr, r6, r2
   bad3a:	eb75 0e03 	sbcs.w	lr, r5, r3
   bad3e:	bf22      	ittt	cs
   bad40:	1ab6      	subcs	r6, r6, r2
   bad42:	4675      	movcs	r5, lr
   bad44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bad48:	ea55 0e06 	orrs.w	lr, r5, r6
   bad4c:	d018      	beq.n	bad80 <__aeabi_ddiv+0x114>
   bad4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bad52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bad56:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bad5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bad5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bad62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bad66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bad6a:	d1c0      	bne.n	bacee <__aeabi_ddiv+0x82>
   bad6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bad70:	d10b      	bne.n	bad8a <__aeabi_ddiv+0x11e>
   bad72:	ea41 0100 	orr.w	r1, r1, r0
   bad76:	f04f 0000 	mov.w	r0, #0
   bad7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bad7e:	e7b6      	b.n	bacee <__aeabi_ddiv+0x82>
   bad80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bad84:	bf04      	itt	eq
   bad86:	4301      	orreq	r1, r0
   bad88:	2000      	moveq	r0, #0
   bad8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bad8e:	bf88      	it	hi
   bad90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bad94:	f63f aeaf 	bhi.w	baaf6 <__aeabi_dmul+0xde>
   bad98:	ebb5 0c03 	subs.w	ip, r5, r3
   bad9c:	bf04      	itt	eq
   bad9e:	ebb6 0c02 	subseq.w	ip, r6, r2
   bada2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bada6:	f150 0000 	adcs.w	r0, r0, #0
   badaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   badae:	bd70      	pop	{r4, r5, r6, pc}
   badb0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   badb4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   badb8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   badbc:	bfc2      	ittt	gt
   badbe:	ebd4 050c 	rsbsgt	r5, r4, ip
   badc2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   badc6:	bd70      	popgt	{r4, r5, r6, pc}
   badc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   badcc:	f04f 0e00 	mov.w	lr, #0
   badd0:	3c01      	subs	r4, #1
   badd2:	e690      	b.n	baaf6 <__aeabi_dmul+0xde>
   badd4:	ea45 0e06 	orr.w	lr, r5, r6
   badd8:	e68d      	b.n	baaf6 <__aeabi_dmul+0xde>
   badda:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   badde:	ea94 0f0c 	teq	r4, ip
   bade2:	bf08      	it	eq
   bade4:	ea95 0f0c 	teqeq	r5, ip
   bade8:	f43f af3b 	beq.w	bac62 <__aeabi_dmul+0x24a>
   badec:	ea94 0f0c 	teq	r4, ip
   badf0:	d10a      	bne.n	bae08 <__aeabi_ddiv+0x19c>
   badf2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   badf6:	f47f af34 	bne.w	bac62 <__aeabi_dmul+0x24a>
   badfa:	ea95 0f0c 	teq	r5, ip
   badfe:	f47f af25 	bne.w	bac4c <__aeabi_dmul+0x234>
   bae02:	4610      	mov	r0, r2
   bae04:	4619      	mov	r1, r3
   bae06:	e72c      	b.n	bac62 <__aeabi_dmul+0x24a>
   bae08:	ea95 0f0c 	teq	r5, ip
   bae0c:	d106      	bne.n	bae1c <__aeabi_ddiv+0x1b0>
   bae0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bae12:	f43f aefd 	beq.w	bac10 <__aeabi_dmul+0x1f8>
   bae16:	4610      	mov	r0, r2
   bae18:	4619      	mov	r1, r3
   bae1a:	e722      	b.n	bac62 <__aeabi_dmul+0x24a>
   bae1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bae20:	bf18      	it	ne
   bae22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bae26:	f47f aec5 	bne.w	babb4 <__aeabi_dmul+0x19c>
   bae2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bae2e:	f47f af0d 	bne.w	bac4c <__aeabi_dmul+0x234>
   bae32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bae36:	f47f aeeb 	bne.w	bac10 <__aeabi_dmul+0x1f8>
   bae3a:	e712      	b.n	bac62 <__aeabi_dmul+0x24a>

000bae3c <__gedf2>:
   bae3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bae40:	e006      	b.n	bae50 <__cmpdf2+0x4>
   bae42:	bf00      	nop

000bae44 <__ledf2>:
   bae44:	f04f 0c01 	mov.w	ip, #1
   bae48:	e002      	b.n	bae50 <__cmpdf2+0x4>
   bae4a:	bf00      	nop

000bae4c <__cmpdf2>:
   bae4c:	f04f 0c01 	mov.w	ip, #1
   bae50:	f84d cd04 	str.w	ip, [sp, #-4]!
   bae54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bae58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bae5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bae60:	bf18      	it	ne
   bae62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bae66:	d01b      	beq.n	baea0 <__cmpdf2+0x54>
   bae68:	b001      	add	sp, #4
   bae6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bae6e:	bf0c      	ite	eq
   bae70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bae74:	ea91 0f03 	teqne	r1, r3
   bae78:	bf02      	ittt	eq
   bae7a:	ea90 0f02 	teqeq	r0, r2
   bae7e:	2000      	moveq	r0, #0
   bae80:	4770      	bxeq	lr
   bae82:	f110 0f00 	cmn.w	r0, #0
   bae86:	ea91 0f03 	teq	r1, r3
   bae8a:	bf58      	it	pl
   bae8c:	4299      	cmppl	r1, r3
   bae8e:	bf08      	it	eq
   bae90:	4290      	cmpeq	r0, r2
   bae92:	bf2c      	ite	cs
   bae94:	17d8      	asrcs	r0, r3, #31
   bae96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bae9a:	f040 0001 	orr.w	r0, r0, #1
   bae9e:	4770      	bx	lr
   baea0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   baea4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   baea8:	d102      	bne.n	baeb0 <__cmpdf2+0x64>
   baeaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   baeae:	d107      	bne.n	baec0 <__cmpdf2+0x74>
   baeb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   baeb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   baeb8:	d1d6      	bne.n	bae68 <__cmpdf2+0x1c>
   baeba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   baebe:	d0d3      	beq.n	bae68 <__cmpdf2+0x1c>
   baec0:	f85d 0b04 	ldr.w	r0, [sp], #4
   baec4:	4770      	bx	lr
   baec6:	bf00      	nop

000baec8 <__aeabi_cdrcmple>:
   baec8:	4684      	mov	ip, r0
   baeca:	4610      	mov	r0, r2
   baecc:	4662      	mov	r2, ip
   baece:	468c      	mov	ip, r1
   baed0:	4619      	mov	r1, r3
   baed2:	4663      	mov	r3, ip
   baed4:	e000      	b.n	baed8 <__aeabi_cdcmpeq>
   baed6:	bf00      	nop

000baed8 <__aeabi_cdcmpeq>:
   baed8:	b501      	push	{r0, lr}
   baeda:	f7ff ffb7 	bl	bae4c <__cmpdf2>
   baede:	2800      	cmp	r0, #0
   baee0:	bf48      	it	mi
   baee2:	f110 0f00 	cmnmi.w	r0, #0
   baee6:	bd01      	pop	{r0, pc}

000baee8 <__aeabi_dcmpeq>:
   baee8:	f84d ed08 	str.w	lr, [sp, #-8]!
   baeec:	f7ff fff4 	bl	baed8 <__aeabi_cdcmpeq>
   baef0:	bf0c      	ite	eq
   baef2:	2001      	moveq	r0, #1
   baef4:	2000      	movne	r0, #0
   baef6:	f85d fb08 	ldr.w	pc, [sp], #8
   baefa:	bf00      	nop

000baefc <__aeabi_dcmplt>:
   baefc:	f84d ed08 	str.w	lr, [sp, #-8]!
   baf00:	f7ff ffea 	bl	baed8 <__aeabi_cdcmpeq>
   baf04:	bf34      	ite	cc
   baf06:	2001      	movcc	r0, #1
   baf08:	2000      	movcs	r0, #0
   baf0a:	f85d fb08 	ldr.w	pc, [sp], #8
   baf0e:	bf00      	nop

000baf10 <__aeabi_dcmple>:
   baf10:	f84d ed08 	str.w	lr, [sp, #-8]!
   baf14:	f7ff ffe0 	bl	baed8 <__aeabi_cdcmpeq>
   baf18:	bf94      	ite	ls
   baf1a:	2001      	movls	r0, #1
   baf1c:	2000      	movhi	r0, #0
   baf1e:	f85d fb08 	ldr.w	pc, [sp], #8
   baf22:	bf00      	nop

000baf24 <__aeabi_dcmpge>:
   baf24:	f84d ed08 	str.w	lr, [sp, #-8]!
   baf28:	f7ff ffce 	bl	baec8 <__aeabi_cdrcmple>
   baf2c:	bf94      	ite	ls
   baf2e:	2001      	movls	r0, #1
   baf30:	2000      	movhi	r0, #0
   baf32:	f85d fb08 	ldr.w	pc, [sp], #8
   baf36:	bf00      	nop

000baf38 <__aeabi_dcmpgt>:
   baf38:	f84d ed08 	str.w	lr, [sp, #-8]!
   baf3c:	f7ff ffc4 	bl	baec8 <__aeabi_cdrcmple>
   baf40:	bf34      	ite	cc
   baf42:	2001      	movcc	r0, #1
   baf44:	2000      	movcs	r0, #0
   baf46:	f85d fb08 	ldr.w	pc, [sp], #8
   baf4a:	bf00      	nop

000baf4c <__aeabi_dcmpun>:
   baf4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   baf50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   baf54:	d102      	bne.n	baf5c <__aeabi_dcmpun+0x10>
   baf56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   baf5a:	d10a      	bne.n	baf72 <__aeabi_dcmpun+0x26>
   baf5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   baf60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   baf64:	d102      	bne.n	baf6c <__aeabi_dcmpun+0x20>
   baf66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   baf6a:	d102      	bne.n	baf72 <__aeabi_dcmpun+0x26>
   baf6c:	f04f 0000 	mov.w	r0, #0
   baf70:	4770      	bx	lr
   baf72:	f04f 0001 	mov.w	r0, #1
   baf76:	4770      	bx	lr

000baf78 <__aeabi_d2iz>:
   baf78:	ea4f 0241 	mov.w	r2, r1, lsl #1
   baf7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   baf80:	d215      	bcs.n	bafae <__aeabi_d2iz+0x36>
   baf82:	d511      	bpl.n	bafa8 <__aeabi_d2iz+0x30>
   baf84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   baf88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   baf8c:	d912      	bls.n	bafb4 <__aeabi_d2iz+0x3c>
   baf8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   baf92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   baf96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   baf9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   baf9e:	fa23 f002 	lsr.w	r0, r3, r2
   bafa2:	bf18      	it	ne
   bafa4:	4240      	negne	r0, r0
   bafa6:	4770      	bx	lr
   bafa8:	f04f 0000 	mov.w	r0, #0
   bafac:	4770      	bx	lr
   bafae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bafb2:	d105      	bne.n	bafc0 <__aeabi_d2iz+0x48>
   bafb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   bafb8:	bf08      	it	eq
   bafba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   bafbe:	4770      	bx	lr
   bafc0:	f04f 0000 	mov.w	r0, #0
   bafc4:	4770      	bx	lr
   bafc6:	bf00      	nop

000bafc8 <__aeabi_d2uiz>:
   bafc8:	004a      	lsls	r2, r1, #1
   bafca:	d211      	bcs.n	baff0 <__aeabi_d2uiz+0x28>
   bafcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bafd0:	d211      	bcs.n	baff6 <__aeabi_d2uiz+0x2e>
   bafd2:	d50d      	bpl.n	baff0 <__aeabi_d2uiz+0x28>
   bafd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bafd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bafdc:	d40e      	bmi.n	baffc <__aeabi_d2uiz+0x34>
   bafde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bafe2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bafe6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bafea:	fa23 f002 	lsr.w	r0, r3, r2
   bafee:	4770      	bx	lr
   baff0:	f04f 0000 	mov.w	r0, #0
   baff4:	4770      	bx	lr
   baff6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   baffa:	d102      	bne.n	bb002 <__aeabi_d2uiz+0x3a>
   baffc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bb000:	4770      	bx	lr
   bb002:	f04f 0000 	mov.w	r0, #0
   bb006:	4770      	bx	lr

000bb008 <__aeabi_d2f>:
   bb008:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bb00c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bb010:	bf24      	itt	cs
   bb012:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bb016:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bb01a:	d90d      	bls.n	bb038 <__aeabi_d2f+0x30>
   bb01c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bb020:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bb024:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bb028:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bb02c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bb030:	bf08      	it	eq
   bb032:	f020 0001 	biceq.w	r0, r0, #1
   bb036:	4770      	bx	lr
   bb038:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bb03c:	d121      	bne.n	bb082 <__aeabi_d2f+0x7a>
   bb03e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bb042:	bfbc      	itt	lt
   bb044:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bb048:	4770      	bxlt	lr
   bb04a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb04e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bb052:	f1c2 0218 	rsb	r2, r2, #24
   bb056:	f1c2 0c20 	rsb	ip, r2, #32
   bb05a:	fa10 f30c 	lsls.w	r3, r0, ip
   bb05e:	fa20 f002 	lsr.w	r0, r0, r2
   bb062:	bf18      	it	ne
   bb064:	f040 0001 	orrne.w	r0, r0, #1
   bb068:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb06c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bb070:	fa03 fc0c 	lsl.w	ip, r3, ip
   bb074:	ea40 000c 	orr.w	r0, r0, ip
   bb078:	fa23 f302 	lsr.w	r3, r3, r2
   bb07c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bb080:	e7cc      	b.n	bb01c <__aeabi_d2f+0x14>
   bb082:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bb086:	d107      	bne.n	bb098 <__aeabi_d2f+0x90>
   bb088:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bb08c:	bf1e      	ittt	ne
   bb08e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bb092:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bb096:	4770      	bxne	lr
   bb098:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bb09c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bb0a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bb0a4:	4770      	bx	lr
   bb0a6:	bf00      	nop

000bb0a8 <__aeabi_d2ulz>:
   bb0a8:	b5d0      	push	{r4, r6, r7, lr}
   bb0aa:	4b0c      	ldr	r3, [pc, #48]	; (bb0dc <__aeabi_d2ulz+0x34>)
   bb0ac:	2200      	movs	r2, #0
   bb0ae:	4606      	mov	r6, r0
   bb0b0:	460f      	mov	r7, r1
   bb0b2:	f7ff fcb1 	bl	baa18 <__aeabi_dmul>
   bb0b6:	f7ff ff87 	bl	bafc8 <__aeabi_d2uiz>
   bb0ba:	4604      	mov	r4, r0
   bb0bc:	f7ff fc32 	bl	ba924 <__aeabi_ui2d>
   bb0c0:	4b07      	ldr	r3, [pc, #28]	; (bb0e0 <__aeabi_d2ulz+0x38>)
   bb0c2:	2200      	movs	r2, #0
   bb0c4:	f7ff fca8 	bl	baa18 <__aeabi_dmul>
   bb0c8:	4602      	mov	r2, r0
   bb0ca:	460b      	mov	r3, r1
   bb0cc:	4630      	mov	r0, r6
   bb0ce:	4639      	mov	r1, r7
   bb0d0:	f7ff faea 	bl	ba6a8 <__aeabi_dsub>
   bb0d4:	f7ff ff78 	bl	bafc8 <__aeabi_d2uiz>
   bb0d8:	4621      	mov	r1, r4
   bb0da:	bdd0      	pop	{r4, r6, r7, pc}
   bb0dc:	3df00000 	.word	0x3df00000
   bb0e0:	41f00000 	.word	0x41f00000

000bb0e4 <atexit>:
   bb0e4:	2300      	movs	r3, #0
   bb0e6:	4601      	mov	r1, r0
   bb0e8:	461a      	mov	r2, r3
   bb0ea:	4618      	mov	r0, r3
   bb0ec:	f000 bfce 	b.w	bc08c <__register_exitproc>

000bb0f0 <atoi>:
   bb0f0:	220a      	movs	r2, #10
   bb0f2:	2100      	movs	r1, #0
   bb0f4:	f000 bfc0 	b.w	bc078 <strtol>

000bb0f8 <memcmp>:
   bb0f8:	b510      	push	{r4, lr}
   bb0fa:	3901      	subs	r1, #1
   bb0fc:	4402      	add	r2, r0
   bb0fe:	4290      	cmp	r0, r2
   bb100:	d101      	bne.n	bb106 <memcmp+0xe>
   bb102:	2000      	movs	r0, #0
   bb104:	e005      	b.n	bb112 <memcmp+0x1a>
   bb106:	7803      	ldrb	r3, [r0, #0]
   bb108:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bb10c:	42a3      	cmp	r3, r4
   bb10e:	d001      	beq.n	bb114 <memcmp+0x1c>
   bb110:	1b18      	subs	r0, r3, r4
   bb112:	bd10      	pop	{r4, pc}
   bb114:	3001      	adds	r0, #1
   bb116:	e7f2      	b.n	bb0fe <memcmp+0x6>

000bb118 <memcpy>:
   bb118:	440a      	add	r2, r1
   bb11a:	4291      	cmp	r1, r2
   bb11c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bb120:	d100      	bne.n	bb124 <memcpy+0xc>
   bb122:	4770      	bx	lr
   bb124:	b510      	push	{r4, lr}
   bb126:	f811 4b01 	ldrb.w	r4, [r1], #1
   bb12a:	f803 4f01 	strb.w	r4, [r3, #1]!
   bb12e:	4291      	cmp	r1, r2
   bb130:	d1f9      	bne.n	bb126 <memcpy+0xe>
   bb132:	bd10      	pop	{r4, pc}

000bb134 <memmove>:
   bb134:	4288      	cmp	r0, r1
   bb136:	b510      	push	{r4, lr}
   bb138:	eb01 0402 	add.w	r4, r1, r2
   bb13c:	d902      	bls.n	bb144 <memmove+0x10>
   bb13e:	4284      	cmp	r4, r0
   bb140:	4623      	mov	r3, r4
   bb142:	d807      	bhi.n	bb154 <memmove+0x20>
   bb144:	1e43      	subs	r3, r0, #1
   bb146:	42a1      	cmp	r1, r4
   bb148:	d008      	beq.n	bb15c <memmove+0x28>
   bb14a:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb14e:	f803 2f01 	strb.w	r2, [r3, #1]!
   bb152:	e7f8      	b.n	bb146 <memmove+0x12>
   bb154:	4402      	add	r2, r0
   bb156:	4601      	mov	r1, r0
   bb158:	428a      	cmp	r2, r1
   bb15a:	d100      	bne.n	bb15e <memmove+0x2a>
   bb15c:	bd10      	pop	{r4, pc}
   bb15e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bb162:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bb166:	e7f7      	b.n	bb158 <memmove+0x24>

000bb168 <memset>:
   bb168:	4402      	add	r2, r0
   bb16a:	4603      	mov	r3, r0
   bb16c:	4293      	cmp	r3, r2
   bb16e:	d100      	bne.n	bb172 <memset+0xa>
   bb170:	4770      	bx	lr
   bb172:	f803 1b01 	strb.w	r1, [r3], #1
   bb176:	e7f9      	b.n	bb16c <memset+0x4>

000bb178 <srand>:
   bb178:	b538      	push	{r3, r4, r5, lr}
   bb17a:	4b10      	ldr	r3, [pc, #64]	; (bb1bc <srand+0x44>)
   bb17c:	681d      	ldr	r5, [r3, #0]
   bb17e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb180:	4604      	mov	r4, r0
   bb182:	b9b3      	cbnz	r3, bb1b2 <srand+0x3a>
   bb184:	2018      	movs	r0, #24
   bb186:	f7fc fc5b 	bl	b7a40 <malloc>
   bb18a:	4602      	mov	r2, r0
   bb18c:	63a8      	str	r0, [r5, #56]	; 0x38
   bb18e:	b920      	cbnz	r0, bb19a <srand+0x22>
   bb190:	4b0b      	ldr	r3, [pc, #44]	; (bb1c0 <srand+0x48>)
   bb192:	480c      	ldr	r0, [pc, #48]	; (bb1c4 <srand+0x4c>)
   bb194:	2142      	movs	r1, #66	; 0x42
   bb196:	f7fc fc93 	bl	b7ac0 <__assert_func>
   bb19a:	490b      	ldr	r1, [pc, #44]	; (bb1c8 <srand+0x50>)
   bb19c:	4b0b      	ldr	r3, [pc, #44]	; (bb1cc <srand+0x54>)
   bb19e:	e9c0 1300 	strd	r1, r3, [r0]
   bb1a2:	4b0b      	ldr	r3, [pc, #44]	; (bb1d0 <srand+0x58>)
   bb1a4:	6083      	str	r3, [r0, #8]
   bb1a6:	230b      	movs	r3, #11
   bb1a8:	8183      	strh	r3, [r0, #12]
   bb1aa:	2100      	movs	r1, #0
   bb1ac:	2001      	movs	r0, #1
   bb1ae:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bb1b2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb1b4:	2200      	movs	r2, #0
   bb1b6:	611c      	str	r4, [r3, #16]
   bb1b8:	615a      	str	r2, [r3, #20]
   bb1ba:	bd38      	pop	{r3, r4, r5, pc}
   bb1bc:	20035368 	.word	0x20035368
   bb1c0:	000bdbf1 	.word	0x000bdbf1
   bb1c4:	000bdc08 	.word	0x000bdc08
   bb1c8:	abcd330e 	.word	0xabcd330e
   bb1cc:	e66d1234 	.word	0xe66d1234
   bb1d0:	0005deec 	.word	0x0005deec

000bb1d4 <strcmp>:
   bb1d4:	f810 2b01 	ldrb.w	r2, [r0], #1
   bb1d8:	f811 3b01 	ldrb.w	r3, [r1], #1
   bb1dc:	2a01      	cmp	r2, #1
   bb1de:	bf28      	it	cs
   bb1e0:	429a      	cmpcs	r2, r3
   bb1e2:	d0f7      	beq.n	bb1d4 <strcmp>
   bb1e4:	1ad0      	subs	r0, r2, r3
   bb1e6:	4770      	bx	lr

000bb1e8 <strcpy>:
   bb1e8:	4603      	mov	r3, r0
   bb1ea:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb1ee:	f803 2b01 	strb.w	r2, [r3], #1
   bb1f2:	2a00      	cmp	r2, #0
   bb1f4:	d1f9      	bne.n	bb1ea <strcpy+0x2>
   bb1f6:	4770      	bx	lr

000bb1f8 <strlen>:
   bb1f8:	4603      	mov	r3, r0
   bb1fa:	f813 2b01 	ldrb.w	r2, [r3], #1
   bb1fe:	2a00      	cmp	r2, #0
   bb200:	d1fb      	bne.n	bb1fa <strlen+0x2>
   bb202:	1a18      	subs	r0, r3, r0
   bb204:	3801      	subs	r0, #1
   bb206:	4770      	bx	lr

000bb208 <strncmp>:
   bb208:	b510      	push	{r4, lr}
   bb20a:	b17a      	cbz	r2, bb22c <strncmp+0x24>
   bb20c:	4603      	mov	r3, r0
   bb20e:	3901      	subs	r1, #1
   bb210:	1884      	adds	r4, r0, r2
   bb212:	f813 0b01 	ldrb.w	r0, [r3], #1
   bb216:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bb21a:	4290      	cmp	r0, r2
   bb21c:	d101      	bne.n	bb222 <strncmp+0x1a>
   bb21e:	42a3      	cmp	r3, r4
   bb220:	d101      	bne.n	bb226 <strncmp+0x1e>
   bb222:	1a80      	subs	r0, r0, r2
   bb224:	bd10      	pop	{r4, pc}
   bb226:	2800      	cmp	r0, #0
   bb228:	d1f3      	bne.n	bb212 <strncmp+0xa>
   bb22a:	e7fa      	b.n	bb222 <strncmp+0x1a>
   bb22c:	4610      	mov	r0, r2
   bb22e:	e7f9      	b.n	bb224 <strncmp+0x1c>

000bb230 <strnlen>:
   bb230:	b510      	push	{r4, lr}
   bb232:	4602      	mov	r2, r0
   bb234:	4401      	add	r1, r0
   bb236:	428a      	cmp	r2, r1
   bb238:	4613      	mov	r3, r2
   bb23a:	d003      	beq.n	bb244 <strnlen+0x14>
   bb23c:	781c      	ldrb	r4, [r3, #0]
   bb23e:	3201      	adds	r2, #1
   bb240:	2c00      	cmp	r4, #0
   bb242:	d1f8      	bne.n	bb236 <strnlen+0x6>
   bb244:	1a18      	subs	r0, r3, r0
   bb246:	bd10      	pop	{r4, pc}

000bb248 <strstr>:
   bb248:	780a      	ldrb	r2, [r1, #0]
   bb24a:	b570      	push	{r4, r5, r6, lr}
   bb24c:	b96a      	cbnz	r2, bb26a <strstr+0x22>
   bb24e:	bd70      	pop	{r4, r5, r6, pc}
   bb250:	429a      	cmp	r2, r3
   bb252:	d109      	bne.n	bb268 <strstr+0x20>
   bb254:	460c      	mov	r4, r1
   bb256:	4605      	mov	r5, r0
   bb258:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   bb25c:	2b00      	cmp	r3, #0
   bb25e:	d0f6      	beq.n	bb24e <strstr+0x6>
   bb260:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   bb264:	429e      	cmp	r6, r3
   bb266:	d0f7      	beq.n	bb258 <strstr+0x10>
   bb268:	3001      	adds	r0, #1
   bb26a:	7803      	ldrb	r3, [r0, #0]
   bb26c:	2b00      	cmp	r3, #0
   bb26e:	d1ef      	bne.n	bb250 <strstr+0x8>
   bb270:	4618      	mov	r0, r3
   bb272:	e7ec      	b.n	bb24e <strstr+0x6>

000bb274 <sulp>:
   bb274:	b570      	push	{r4, r5, r6, lr}
   bb276:	4604      	mov	r4, r0
   bb278:	460d      	mov	r5, r1
   bb27a:	ec45 4b10 	vmov	d0, r4, r5
   bb27e:	4616      	mov	r6, r2
   bb280:	f001 fe5e 	bl	bcf40 <__ulp>
   bb284:	ec51 0b10 	vmov	r0, r1, d0
   bb288:	b17e      	cbz	r6, bb2aa <sulp+0x36>
   bb28a:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bb28e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bb292:	2b00      	cmp	r3, #0
   bb294:	dd09      	ble.n	bb2aa <sulp+0x36>
   bb296:	051b      	lsls	r3, r3, #20
   bb298:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bb29c:	2400      	movs	r4, #0
   bb29e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bb2a2:	4622      	mov	r2, r4
   bb2a4:	462b      	mov	r3, r5
   bb2a6:	f7ff fbb7 	bl	baa18 <__aeabi_dmul>
   bb2aa:	bd70      	pop	{r4, r5, r6, pc}
   bb2ac:	0000      	movs	r0, r0
	...

000bb2b0 <_strtod_l>:
   bb2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb2b4:	ed2d 8b02 	vpush	{d8}
   bb2b8:	b09d      	sub	sp, #116	; 0x74
   bb2ba:	461f      	mov	r7, r3
   bb2bc:	2300      	movs	r3, #0
   bb2be:	9318      	str	r3, [sp, #96]	; 0x60
   bb2c0:	4ba2      	ldr	r3, [pc, #648]	; (bb54c <_strtod_l+0x29c>)
   bb2c2:	9213      	str	r2, [sp, #76]	; 0x4c
   bb2c4:	681b      	ldr	r3, [r3, #0]
   bb2c6:	9305      	str	r3, [sp, #20]
   bb2c8:	4604      	mov	r4, r0
   bb2ca:	4618      	mov	r0, r3
   bb2cc:	4688      	mov	r8, r1
   bb2ce:	f7ff ff93 	bl	bb1f8 <strlen>
   bb2d2:	f04f 0a00 	mov.w	sl, #0
   bb2d6:	4605      	mov	r5, r0
   bb2d8:	f04f 0b00 	mov.w	fp, #0
   bb2dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb2e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb2e2:	781a      	ldrb	r2, [r3, #0]
   bb2e4:	2a2b      	cmp	r2, #43	; 0x2b
   bb2e6:	d04e      	beq.n	bb386 <_strtod_l+0xd6>
   bb2e8:	d83b      	bhi.n	bb362 <_strtod_l+0xb2>
   bb2ea:	2a0d      	cmp	r2, #13
   bb2ec:	d834      	bhi.n	bb358 <_strtod_l+0xa8>
   bb2ee:	2a08      	cmp	r2, #8
   bb2f0:	d834      	bhi.n	bb35c <_strtod_l+0xac>
   bb2f2:	2a00      	cmp	r2, #0
   bb2f4:	d03e      	beq.n	bb374 <_strtod_l+0xc4>
   bb2f6:	2300      	movs	r3, #0
   bb2f8:	930a      	str	r3, [sp, #40]	; 0x28
   bb2fa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bb2fc:	7833      	ldrb	r3, [r6, #0]
   bb2fe:	2b30      	cmp	r3, #48	; 0x30
   bb300:	f040 80b0 	bne.w	bb464 <_strtod_l+0x1b4>
   bb304:	7873      	ldrb	r3, [r6, #1]
   bb306:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bb30a:	2b58      	cmp	r3, #88	; 0x58
   bb30c:	d168      	bne.n	bb3e0 <_strtod_l+0x130>
   bb30e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bb310:	9301      	str	r3, [sp, #4]
   bb312:	ab18      	add	r3, sp, #96	; 0x60
   bb314:	9702      	str	r7, [sp, #8]
   bb316:	9300      	str	r3, [sp, #0]
   bb318:	4a8d      	ldr	r2, [pc, #564]	; (bb550 <_strtod_l+0x2a0>)
   bb31a:	ab19      	add	r3, sp, #100	; 0x64
   bb31c:	a917      	add	r1, sp, #92	; 0x5c
   bb31e:	4620      	mov	r0, r4
   bb320:	f000 ff7e 	bl	bc220 <__gethex>
   bb324:	f010 0707 	ands.w	r7, r0, #7
   bb328:	4605      	mov	r5, r0
   bb32a:	d005      	beq.n	bb338 <_strtod_l+0x88>
   bb32c:	2f06      	cmp	r7, #6
   bb32e:	d12c      	bne.n	bb38a <_strtod_l+0xda>
   bb330:	3601      	adds	r6, #1
   bb332:	2300      	movs	r3, #0
   bb334:	9617      	str	r6, [sp, #92]	; 0x5c
   bb336:	930a      	str	r3, [sp, #40]	; 0x28
   bb338:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb33a:	2b00      	cmp	r3, #0
   bb33c:	f040 8590 	bne.w	bbe60 <_strtod_l+0xbb0>
   bb340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bb342:	b1eb      	cbz	r3, bb380 <_strtod_l+0xd0>
   bb344:	4652      	mov	r2, sl
   bb346:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bb34a:	ec43 2b10 	vmov	d0, r2, r3
   bb34e:	b01d      	add	sp, #116	; 0x74
   bb350:	ecbd 8b02 	vpop	{d8}
   bb354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb358:	2a20      	cmp	r2, #32
   bb35a:	d1cc      	bne.n	bb2f6 <_strtod_l+0x46>
   bb35c:	3301      	adds	r3, #1
   bb35e:	9317      	str	r3, [sp, #92]	; 0x5c
   bb360:	e7be      	b.n	bb2e0 <_strtod_l+0x30>
   bb362:	2a2d      	cmp	r2, #45	; 0x2d
   bb364:	d1c7      	bne.n	bb2f6 <_strtod_l+0x46>
   bb366:	2201      	movs	r2, #1
   bb368:	920a      	str	r2, [sp, #40]	; 0x28
   bb36a:	1c5a      	adds	r2, r3, #1
   bb36c:	9217      	str	r2, [sp, #92]	; 0x5c
   bb36e:	785b      	ldrb	r3, [r3, #1]
   bb370:	2b00      	cmp	r3, #0
   bb372:	d1c2      	bne.n	bb2fa <_strtod_l+0x4a>
   bb374:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb376:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb37a:	2b00      	cmp	r3, #0
   bb37c:	f040 856e 	bne.w	bbe5c <_strtod_l+0xbac>
   bb380:	4652      	mov	r2, sl
   bb382:	465b      	mov	r3, fp
   bb384:	e7e1      	b.n	bb34a <_strtod_l+0x9a>
   bb386:	2200      	movs	r2, #0
   bb388:	e7ee      	b.n	bb368 <_strtod_l+0xb8>
   bb38a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bb38c:	b13a      	cbz	r2, bb39e <_strtod_l+0xee>
   bb38e:	2135      	movs	r1, #53	; 0x35
   bb390:	a81a      	add	r0, sp, #104	; 0x68
   bb392:	f001 fee0 	bl	bd156 <__copybits>
   bb396:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb398:	4620      	mov	r0, r4
   bb39a:	f001 fa9f 	bl	bc8dc <_Bfree>
   bb39e:	3f01      	subs	r7, #1
   bb3a0:	2f04      	cmp	r7, #4
   bb3a2:	d806      	bhi.n	bb3b2 <_strtod_l+0x102>
   bb3a4:	e8df f007 	tbb	[pc, r7]
   bb3a8:	1714030a 	.word	0x1714030a
   bb3ac:	0a          	.byte	0x0a
   bb3ad:	00          	.byte	0x00
   bb3ae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bb3b2:	0728      	lsls	r0, r5, #28
   bb3b4:	d5c0      	bpl.n	bb338 <_strtod_l+0x88>
   bb3b6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bb3ba:	e7bd      	b.n	bb338 <_strtod_l+0x88>
   bb3bc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bb3c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bb3c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bb3c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bb3ca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bb3ce:	e7f0      	b.n	bb3b2 <_strtod_l+0x102>
   bb3d0:	f8df b180 	ldr.w	fp, [pc, #384]	; bb554 <_strtod_l+0x2a4>
   bb3d4:	e7ed      	b.n	bb3b2 <_strtod_l+0x102>
   bb3d6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bb3da:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bb3de:	e7e8      	b.n	bb3b2 <_strtod_l+0x102>
   bb3e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb3e2:	1c5a      	adds	r2, r3, #1
   bb3e4:	9217      	str	r2, [sp, #92]	; 0x5c
   bb3e6:	785b      	ldrb	r3, [r3, #1]
   bb3e8:	2b30      	cmp	r3, #48	; 0x30
   bb3ea:	d0f9      	beq.n	bb3e0 <_strtod_l+0x130>
   bb3ec:	2b00      	cmp	r3, #0
   bb3ee:	d0a3      	beq.n	bb338 <_strtod_l+0x88>
   bb3f0:	2301      	movs	r3, #1
   bb3f2:	f04f 0900 	mov.w	r9, #0
   bb3f6:	9304      	str	r3, [sp, #16]
   bb3f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb3fa:	9308      	str	r3, [sp, #32]
   bb3fc:	f8cd 901c 	str.w	r9, [sp, #28]
   bb400:	464f      	mov	r7, r9
   bb402:	220a      	movs	r2, #10
   bb404:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bb406:	7806      	ldrb	r6, [r0, #0]
   bb408:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bb40c:	b2d9      	uxtb	r1, r3
   bb40e:	2909      	cmp	r1, #9
   bb410:	d92a      	bls.n	bb468 <_strtod_l+0x1b8>
   bb412:	9905      	ldr	r1, [sp, #20]
   bb414:	462a      	mov	r2, r5
   bb416:	f7ff fef7 	bl	bb208 <strncmp>
   bb41a:	b398      	cbz	r0, bb484 <_strtod_l+0x1d4>
   bb41c:	2000      	movs	r0, #0
   bb41e:	4632      	mov	r2, r6
   bb420:	463d      	mov	r5, r7
   bb422:	9005      	str	r0, [sp, #20]
   bb424:	4603      	mov	r3, r0
   bb426:	2a65      	cmp	r2, #101	; 0x65
   bb428:	d001      	beq.n	bb42e <_strtod_l+0x17e>
   bb42a:	2a45      	cmp	r2, #69	; 0x45
   bb42c:	d118      	bne.n	bb460 <_strtod_l+0x1b0>
   bb42e:	b91d      	cbnz	r5, bb438 <_strtod_l+0x188>
   bb430:	9a04      	ldr	r2, [sp, #16]
   bb432:	4302      	orrs	r2, r0
   bb434:	d09e      	beq.n	bb374 <_strtod_l+0xc4>
   bb436:	2500      	movs	r5, #0
   bb438:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bb43c:	f108 0201 	add.w	r2, r8, #1
   bb440:	9217      	str	r2, [sp, #92]	; 0x5c
   bb442:	f898 2001 	ldrb.w	r2, [r8, #1]
   bb446:	2a2b      	cmp	r2, #43	; 0x2b
   bb448:	d075      	beq.n	bb536 <_strtod_l+0x286>
   bb44a:	2a2d      	cmp	r2, #45	; 0x2d
   bb44c:	d07b      	beq.n	bb546 <_strtod_l+0x296>
   bb44e:	f04f 0c00 	mov.w	ip, #0
   bb452:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bb456:	2909      	cmp	r1, #9
   bb458:	f240 8082 	bls.w	bb560 <_strtod_l+0x2b0>
   bb45c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb460:	2600      	movs	r6, #0
   bb462:	e09d      	b.n	bb5a0 <_strtod_l+0x2f0>
   bb464:	2300      	movs	r3, #0
   bb466:	e7c4      	b.n	bb3f2 <_strtod_l+0x142>
   bb468:	2f08      	cmp	r7, #8
   bb46a:	bfd8      	it	le
   bb46c:	9907      	ldrle	r1, [sp, #28]
   bb46e:	f100 0001 	add.w	r0, r0, #1
   bb472:	bfda      	itte	le
   bb474:	fb02 3301 	mlale	r3, r2, r1, r3
   bb478:	9307      	strle	r3, [sp, #28]
   bb47a:	fb02 3909 	mlagt	r9, r2, r9, r3
   bb47e:	3701      	adds	r7, #1
   bb480:	9017      	str	r0, [sp, #92]	; 0x5c
   bb482:	e7bf      	b.n	bb404 <_strtod_l+0x154>
   bb484:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb486:	195a      	adds	r2, r3, r5
   bb488:	9217      	str	r2, [sp, #92]	; 0x5c
   bb48a:	5d5a      	ldrb	r2, [r3, r5]
   bb48c:	2f00      	cmp	r7, #0
   bb48e:	d037      	beq.n	bb500 <_strtod_l+0x250>
   bb490:	9005      	str	r0, [sp, #20]
   bb492:	463d      	mov	r5, r7
   bb494:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bb498:	2b09      	cmp	r3, #9
   bb49a:	d912      	bls.n	bb4c2 <_strtod_l+0x212>
   bb49c:	2301      	movs	r3, #1
   bb49e:	e7c2      	b.n	bb426 <_strtod_l+0x176>
   bb4a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb4a2:	1c5a      	adds	r2, r3, #1
   bb4a4:	9217      	str	r2, [sp, #92]	; 0x5c
   bb4a6:	785a      	ldrb	r2, [r3, #1]
   bb4a8:	3001      	adds	r0, #1
   bb4aa:	2a30      	cmp	r2, #48	; 0x30
   bb4ac:	d0f8      	beq.n	bb4a0 <_strtod_l+0x1f0>
   bb4ae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bb4b2:	2b08      	cmp	r3, #8
   bb4b4:	f200 84d9 	bhi.w	bbe6a <_strtod_l+0xbba>
   bb4b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb4ba:	9005      	str	r0, [sp, #20]
   bb4bc:	2000      	movs	r0, #0
   bb4be:	9308      	str	r3, [sp, #32]
   bb4c0:	4605      	mov	r5, r0
   bb4c2:	3a30      	subs	r2, #48	; 0x30
   bb4c4:	f100 0301 	add.w	r3, r0, #1
   bb4c8:	d014      	beq.n	bb4f4 <_strtod_l+0x244>
   bb4ca:	9905      	ldr	r1, [sp, #20]
   bb4cc:	4419      	add	r1, r3
   bb4ce:	9105      	str	r1, [sp, #20]
   bb4d0:	462b      	mov	r3, r5
   bb4d2:	eb00 0e05 	add.w	lr, r0, r5
   bb4d6:	210a      	movs	r1, #10
   bb4d8:	4573      	cmp	r3, lr
   bb4da:	d113      	bne.n	bb504 <_strtod_l+0x254>
   bb4dc:	182b      	adds	r3, r5, r0
   bb4de:	2b08      	cmp	r3, #8
   bb4e0:	f105 0501 	add.w	r5, r5, #1
   bb4e4:	4405      	add	r5, r0
   bb4e6:	dc1c      	bgt.n	bb522 <_strtod_l+0x272>
   bb4e8:	9907      	ldr	r1, [sp, #28]
   bb4ea:	230a      	movs	r3, #10
   bb4ec:	fb03 2301 	mla	r3, r3, r1, r2
   bb4f0:	9307      	str	r3, [sp, #28]
   bb4f2:	2300      	movs	r3, #0
   bb4f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb4f6:	1c51      	adds	r1, r2, #1
   bb4f8:	9117      	str	r1, [sp, #92]	; 0x5c
   bb4fa:	7852      	ldrb	r2, [r2, #1]
   bb4fc:	4618      	mov	r0, r3
   bb4fe:	e7c9      	b.n	bb494 <_strtod_l+0x1e4>
   bb500:	4638      	mov	r0, r7
   bb502:	e7d2      	b.n	bb4aa <_strtod_l+0x1fa>
   bb504:	2b08      	cmp	r3, #8
   bb506:	dc04      	bgt.n	bb512 <_strtod_l+0x262>
   bb508:	9e07      	ldr	r6, [sp, #28]
   bb50a:	434e      	muls	r6, r1
   bb50c:	9607      	str	r6, [sp, #28]
   bb50e:	3301      	adds	r3, #1
   bb510:	e7e2      	b.n	bb4d8 <_strtod_l+0x228>
   bb512:	f103 0c01 	add.w	ip, r3, #1
   bb516:	f1bc 0f10 	cmp.w	ip, #16
   bb51a:	bfd8      	it	le
   bb51c:	fb01 f909 	mulle.w	r9, r1, r9
   bb520:	e7f5      	b.n	bb50e <_strtod_l+0x25e>
   bb522:	2d10      	cmp	r5, #16
   bb524:	bfdc      	itt	le
   bb526:	230a      	movle	r3, #10
   bb528:	fb03 2909 	mlale	r9, r3, r9, r2
   bb52c:	e7e1      	b.n	bb4f2 <_strtod_l+0x242>
   bb52e:	2300      	movs	r3, #0
   bb530:	9305      	str	r3, [sp, #20]
   bb532:	2301      	movs	r3, #1
   bb534:	e77c      	b.n	bb430 <_strtod_l+0x180>
   bb536:	f04f 0c00 	mov.w	ip, #0
   bb53a:	f108 0202 	add.w	r2, r8, #2
   bb53e:	9217      	str	r2, [sp, #92]	; 0x5c
   bb540:	f898 2002 	ldrb.w	r2, [r8, #2]
   bb544:	e785      	b.n	bb452 <_strtod_l+0x1a2>
   bb546:	f04f 0c01 	mov.w	ip, #1
   bb54a:	e7f6      	b.n	bb53a <_strtod_l+0x28a>
   bb54c:	000bde34 	.word	0x000bde34
   bb550:	000bdc70 	.word	0x000bdc70
   bb554:	7ff00000 	.word	0x7ff00000
   bb558:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb55a:	1c51      	adds	r1, r2, #1
   bb55c:	9117      	str	r1, [sp, #92]	; 0x5c
   bb55e:	7852      	ldrb	r2, [r2, #1]
   bb560:	2a30      	cmp	r2, #48	; 0x30
   bb562:	d0f9      	beq.n	bb558 <_strtod_l+0x2a8>
   bb564:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bb568:	2908      	cmp	r1, #8
   bb56a:	f63f af79 	bhi.w	bb460 <_strtod_l+0x1b0>
   bb56e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bb572:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb574:	9206      	str	r2, [sp, #24]
   bb576:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb578:	1c51      	adds	r1, r2, #1
   bb57a:	9117      	str	r1, [sp, #92]	; 0x5c
   bb57c:	7852      	ldrb	r2, [r2, #1]
   bb57e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bb582:	2e09      	cmp	r6, #9
   bb584:	d937      	bls.n	bb5f6 <_strtod_l+0x346>
   bb586:	9e06      	ldr	r6, [sp, #24]
   bb588:	1b89      	subs	r1, r1, r6
   bb58a:	2908      	cmp	r1, #8
   bb58c:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bb590:	dc02      	bgt.n	bb598 <_strtod_l+0x2e8>
   bb592:	4576      	cmp	r6, lr
   bb594:	bfa8      	it	ge
   bb596:	4676      	movge	r6, lr
   bb598:	f1bc 0f00 	cmp.w	ip, #0
   bb59c:	d000      	beq.n	bb5a0 <_strtod_l+0x2f0>
   bb59e:	4276      	negs	r6, r6
   bb5a0:	2d00      	cmp	r5, #0
   bb5a2:	d14d      	bne.n	bb640 <_strtod_l+0x390>
   bb5a4:	9904      	ldr	r1, [sp, #16]
   bb5a6:	4301      	orrs	r1, r0
   bb5a8:	f47f aec6 	bne.w	bb338 <_strtod_l+0x88>
   bb5ac:	2b00      	cmp	r3, #0
   bb5ae:	f47f aee1 	bne.w	bb374 <_strtod_l+0xc4>
   bb5b2:	2a69      	cmp	r2, #105	; 0x69
   bb5b4:	d027      	beq.n	bb606 <_strtod_l+0x356>
   bb5b6:	dc24      	bgt.n	bb602 <_strtod_l+0x352>
   bb5b8:	2a49      	cmp	r2, #73	; 0x49
   bb5ba:	d024      	beq.n	bb606 <_strtod_l+0x356>
   bb5bc:	2a4e      	cmp	r2, #78	; 0x4e
   bb5be:	f47f aed9 	bne.w	bb374 <_strtod_l+0xc4>
   bb5c2:	499f      	ldr	r1, [pc, #636]	; (bb840 <_strtod_l+0x590>)
   bb5c4:	a817      	add	r0, sp, #92	; 0x5c
   bb5c6:	f001 f883 	bl	bc6d0 <__match>
   bb5ca:	2800      	cmp	r0, #0
   bb5cc:	f43f aed2 	beq.w	bb374 <_strtod_l+0xc4>
   bb5d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb5d2:	781b      	ldrb	r3, [r3, #0]
   bb5d4:	2b28      	cmp	r3, #40	; 0x28
   bb5d6:	d12d      	bne.n	bb634 <_strtod_l+0x384>
   bb5d8:	499a      	ldr	r1, [pc, #616]	; (bb844 <_strtod_l+0x594>)
   bb5da:	aa1a      	add	r2, sp, #104	; 0x68
   bb5dc:	a817      	add	r0, sp, #92	; 0x5c
   bb5de:	f001 f88b 	bl	bc6f8 <__hexnan>
   bb5e2:	2805      	cmp	r0, #5
   bb5e4:	d126      	bne.n	bb634 <_strtod_l+0x384>
   bb5e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bb5e8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bb5ec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bb5f0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bb5f4:	e6a0      	b.n	bb338 <_strtod_l+0x88>
   bb5f6:	210a      	movs	r1, #10
   bb5f8:	fb01 2e0e 	mla	lr, r1, lr, r2
   bb5fc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bb600:	e7b9      	b.n	bb576 <_strtod_l+0x2c6>
   bb602:	2a6e      	cmp	r2, #110	; 0x6e
   bb604:	e7db      	b.n	bb5be <_strtod_l+0x30e>
   bb606:	4990      	ldr	r1, [pc, #576]	; (bb848 <_strtod_l+0x598>)
   bb608:	a817      	add	r0, sp, #92	; 0x5c
   bb60a:	f001 f861 	bl	bc6d0 <__match>
   bb60e:	2800      	cmp	r0, #0
   bb610:	f43f aeb0 	beq.w	bb374 <_strtod_l+0xc4>
   bb614:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb616:	498d      	ldr	r1, [pc, #564]	; (bb84c <_strtod_l+0x59c>)
   bb618:	3b01      	subs	r3, #1
   bb61a:	a817      	add	r0, sp, #92	; 0x5c
   bb61c:	9317      	str	r3, [sp, #92]	; 0x5c
   bb61e:	f001 f857 	bl	bc6d0 <__match>
   bb622:	b910      	cbnz	r0, bb62a <_strtod_l+0x37a>
   bb624:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb626:	3301      	adds	r3, #1
   bb628:	9317      	str	r3, [sp, #92]	; 0x5c
   bb62a:	f8df b230 	ldr.w	fp, [pc, #560]	; bb85c <_strtod_l+0x5ac>
   bb62e:	f04f 0a00 	mov.w	sl, #0
   bb632:	e681      	b.n	bb338 <_strtod_l+0x88>
   bb634:	4886      	ldr	r0, [pc, #536]	; (bb850 <_strtod_l+0x5a0>)
   bb636:	f001 fde3 	bl	bd200 <nan>
   bb63a:	ec5b ab10 	vmov	sl, fp, d0
   bb63e:	e67b      	b.n	bb338 <_strtod_l+0x88>
   bb640:	9b05      	ldr	r3, [sp, #20]
   bb642:	9807      	ldr	r0, [sp, #28]
   bb644:	1af3      	subs	r3, r6, r3
   bb646:	2f00      	cmp	r7, #0
   bb648:	bf08      	it	eq
   bb64a:	462f      	moveq	r7, r5
   bb64c:	2d10      	cmp	r5, #16
   bb64e:	9306      	str	r3, [sp, #24]
   bb650:	46a8      	mov	r8, r5
   bb652:	bfa8      	it	ge
   bb654:	f04f 0810 	movge.w	r8, #16
   bb658:	f7ff f964 	bl	ba924 <__aeabi_ui2d>
   bb65c:	2d09      	cmp	r5, #9
   bb65e:	4682      	mov	sl, r0
   bb660:	468b      	mov	fp, r1
   bb662:	dd13      	ble.n	bb68c <_strtod_l+0x3dc>
   bb664:	4b7b      	ldr	r3, [pc, #492]	; (bb854 <_strtod_l+0x5a4>)
   bb666:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bb66a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bb66e:	f7ff f9d3 	bl	baa18 <__aeabi_dmul>
   bb672:	4682      	mov	sl, r0
   bb674:	4648      	mov	r0, r9
   bb676:	468b      	mov	fp, r1
   bb678:	f7ff f954 	bl	ba924 <__aeabi_ui2d>
   bb67c:	4602      	mov	r2, r0
   bb67e:	460b      	mov	r3, r1
   bb680:	4650      	mov	r0, sl
   bb682:	4659      	mov	r1, fp
   bb684:	f7ff f812 	bl	ba6ac <__adddf3>
   bb688:	4682      	mov	sl, r0
   bb68a:	468b      	mov	fp, r1
   bb68c:	2d0f      	cmp	r5, #15
   bb68e:	dc38      	bgt.n	bb702 <_strtod_l+0x452>
   bb690:	9b06      	ldr	r3, [sp, #24]
   bb692:	2b00      	cmp	r3, #0
   bb694:	f43f ae50 	beq.w	bb338 <_strtod_l+0x88>
   bb698:	dd24      	ble.n	bb6e4 <_strtod_l+0x434>
   bb69a:	2b16      	cmp	r3, #22
   bb69c:	dc0b      	bgt.n	bb6b6 <_strtod_l+0x406>
   bb69e:	496d      	ldr	r1, [pc, #436]	; (bb854 <_strtod_l+0x5a4>)
   bb6a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bb6a4:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb6a8:	4652      	mov	r2, sl
   bb6aa:	465b      	mov	r3, fp
   bb6ac:	f7ff f9b4 	bl	baa18 <__aeabi_dmul>
   bb6b0:	4682      	mov	sl, r0
   bb6b2:	468b      	mov	fp, r1
   bb6b4:	e640      	b.n	bb338 <_strtod_l+0x88>
   bb6b6:	9a06      	ldr	r2, [sp, #24]
   bb6b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bb6bc:	4293      	cmp	r3, r2
   bb6be:	db20      	blt.n	bb702 <_strtod_l+0x452>
   bb6c0:	4c64      	ldr	r4, [pc, #400]	; (bb854 <_strtod_l+0x5a4>)
   bb6c2:	f1c5 050f 	rsb	r5, r5, #15
   bb6c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bb6ca:	4652      	mov	r2, sl
   bb6cc:	465b      	mov	r3, fp
   bb6ce:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb6d2:	f7ff f9a1 	bl	baa18 <__aeabi_dmul>
   bb6d6:	9b06      	ldr	r3, [sp, #24]
   bb6d8:	1b5d      	subs	r5, r3, r5
   bb6da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bb6de:	e9d4 2300 	ldrd	r2, r3, [r4]
   bb6e2:	e7e3      	b.n	bb6ac <_strtod_l+0x3fc>
   bb6e4:	9b06      	ldr	r3, [sp, #24]
   bb6e6:	3316      	adds	r3, #22
   bb6e8:	db0b      	blt.n	bb702 <_strtod_l+0x452>
   bb6ea:	9b05      	ldr	r3, [sp, #20]
   bb6ec:	1b9e      	subs	r6, r3, r6
   bb6ee:	4b59      	ldr	r3, [pc, #356]	; (bb854 <_strtod_l+0x5a4>)
   bb6f0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bb6f4:	e9d6 2300 	ldrd	r2, r3, [r6]
   bb6f8:	4650      	mov	r0, sl
   bb6fa:	4659      	mov	r1, fp
   bb6fc:	f7ff fab6 	bl	bac6c <__aeabi_ddiv>
   bb700:	e7d6      	b.n	bb6b0 <_strtod_l+0x400>
   bb702:	9b06      	ldr	r3, [sp, #24]
   bb704:	eba5 0808 	sub.w	r8, r5, r8
   bb708:	4498      	add	r8, r3
   bb70a:	f1b8 0f00 	cmp.w	r8, #0
   bb70e:	dd74      	ble.n	bb7fa <_strtod_l+0x54a>
   bb710:	f018 030f 	ands.w	r3, r8, #15
   bb714:	d00a      	beq.n	bb72c <_strtod_l+0x47c>
   bb716:	494f      	ldr	r1, [pc, #316]	; (bb854 <_strtod_l+0x5a4>)
   bb718:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bb71c:	4652      	mov	r2, sl
   bb71e:	465b      	mov	r3, fp
   bb720:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb724:	f7ff f978 	bl	baa18 <__aeabi_dmul>
   bb728:	4682      	mov	sl, r0
   bb72a:	468b      	mov	fp, r1
   bb72c:	f038 080f 	bics.w	r8, r8, #15
   bb730:	d04f      	beq.n	bb7d2 <_strtod_l+0x522>
   bb732:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bb736:	dd22      	ble.n	bb77e <_strtod_l+0x4ce>
   bb738:	2500      	movs	r5, #0
   bb73a:	462e      	mov	r6, r5
   bb73c:	9507      	str	r5, [sp, #28]
   bb73e:	9505      	str	r5, [sp, #20]
   bb740:	2322      	movs	r3, #34	; 0x22
   bb742:	f8df b118 	ldr.w	fp, [pc, #280]	; bb85c <_strtod_l+0x5ac>
   bb746:	6023      	str	r3, [r4, #0]
   bb748:	f04f 0a00 	mov.w	sl, #0
   bb74c:	9b07      	ldr	r3, [sp, #28]
   bb74e:	2b00      	cmp	r3, #0
   bb750:	f43f adf2 	beq.w	bb338 <_strtod_l+0x88>
   bb754:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb756:	4620      	mov	r0, r4
   bb758:	f001 f8c0 	bl	bc8dc <_Bfree>
   bb75c:	9905      	ldr	r1, [sp, #20]
   bb75e:	4620      	mov	r0, r4
   bb760:	f001 f8bc 	bl	bc8dc <_Bfree>
   bb764:	4631      	mov	r1, r6
   bb766:	4620      	mov	r0, r4
   bb768:	f001 f8b8 	bl	bc8dc <_Bfree>
   bb76c:	9907      	ldr	r1, [sp, #28]
   bb76e:	4620      	mov	r0, r4
   bb770:	f001 f8b4 	bl	bc8dc <_Bfree>
   bb774:	4629      	mov	r1, r5
   bb776:	4620      	mov	r0, r4
   bb778:	f001 f8b0 	bl	bc8dc <_Bfree>
   bb77c:	e5dc      	b.n	bb338 <_strtod_l+0x88>
   bb77e:	4b36      	ldr	r3, [pc, #216]	; (bb858 <_strtod_l+0x5a8>)
   bb780:	9304      	str	r3, [sp, #16]
   bb782:	2300      	movs	r3, #0
   bb784:	ea4f 1828 	mov.w	r8, r8, asr #4
   bb788:	4650      	mov	r0, sl
   bb78a:	4659      	mov	r1, fp
   bb78c:	4699      	mov	r9, r3
   bb78e:	f1b8 0f01 	cmp.w	r8, #1
   bb792:	dc21      	bgt.n	bb7d8 <_strtod_l+0x528>
   bb794:	b10b      	cbz	r3, bb79a <_strtod_l+0x4ea>
   bb796:	4682      	mov	sl, r0
   bb798:	468b      	mov	fp, r1
   bb79a:	4b2f      	ldr	r3, [pc, #188]	; (bb858 <_strtod_l+0x5a8>)
   bb79c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bb7a0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bb7a4:	4652      	mov	r2, sl
   bb7a6:	465b      	mov	r3, fp
   bb7a8:	e9d9 0100 	ldrd	r0, r1, [r9]
   bb7ac:	f7ff f934 	bl	baa18 <__aeabi_dmul>
   bb7b0:	4b2a      	ldr	r3, [pc, #168]	; (bb85c <_strtod_l+0x5ac>)
   bb7b2:	460a      	mov	r2, r1
   bb7b4:	400b      	ands	r3, r1
   bb7b6:	492a      	ldr	r1, [pc, #168]	; (bb860 <_strtod_l+0x5b0>)
   bb7b8:	428b      	cmp	r3, r1
   bb7ba:	4682      	mov	sl, r0
   bb7bc:	d8bc      	bhi.n	bb738 <_strtod_l+0x488>
   bb7be:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bb7c2:	428b      	cmp	r3, r1
   bb7c4:	bf86      	itte	hi
   bb7c6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bb864 <_strtod_l+0x5b4>
   bb7ca:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   bb7ce:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bb7d2:	2300      	movs	r3, #0
   bb7d4:	9304      	str	r3, [sp, #16]
   bb7d6:	e084      	b.n	bb8e2 <_strtod_l+0x632>
   bb7d8:	f018 0f01 	tst.w	r8, #1
   bb7dc:	d005      	beq.n	bb7ea <_strtod_l+0x53a>
   bb7de:	9b04      	ldr	r3, [sp, #16]
   bb7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb7e4:	f7ff f918 	bl	baa18 <__aeabi_dmul>
   bb7e8:	2301      	movs	r3, #1
   bb7ea:	9a04      	ldr	r2, [sp, #16]
   bb7ec:	3208      	adds	r2, #8
   bb7ee:	f109 0901 	add.w	r9, r9, #1
   bb7f2:	ea4f 0868 	mov.w	r8, r8, asr #1
   bb7f6:	9204      	str	r2, [sp, #16]
   bb7f8:	e7c9      	b.n	bb78e <_strtod_l+0x4de>
   bb7fa:	d0ea      	beq.n	bb7d2 <_strtod_l+0x522>
   bb7fc:	f1c8 0800 	rsb	r8, r8, #0
   bb800:	f018 020f 	ands.w	r2, r8, #15
   bb804:	d00a      	beq.n	bb81c <_strtod_l+0x56c>
   bb806:	4b13      	ldr	r3, [pc, #76]	; (bb854 <_strtod_l+0x5a4>)
   bb808:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bb80c:	4650      	mov	r0, sl
   bb80e:	4659      	mov	r1, fp
   bb810:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb814:	f7ff fa2a 	bl	bac6c <__aeabi_ddiv>
   bb818:	4682      	mov	sl, r0
   bb81a:	468b      	mov	fp, r1
   bb81c:	ea5f 1828 	movs.w	r8, r8, asr #4
   bb820:	d0d7      	beq.n	bb7d2 <_strtod_l+0x522>
   bb822:	f1b8 0f1f 	cmp.w	r8, #31
   bb826:	dd1f      	ble.n	bb868 <_strtod_l+0x5b8>
   bb828:	2500      	movs	r5, #0
   bb82a:	462e      	mov	r6, r5
   bb82c:	9507      	str	r5, [sp, #28]
   bb82e:	9505      	str	r5, [sp, #20]
   bb830:	2322      	movs	r3, #34	; 0x22
   bb832:	f04f 0a00 	mov.w	sl, #0
   bb836:	f04f 0b00 	mov.w	fp, #0
   bb83a:	6023      	str	r3, [r4, #0]
   bb83c:	e786      	b.n	bb74c <_strtod_l+0x49c>
   bb83e:	bf00      	nop
   bb840:	000bdc6a 	.word	0x000bdc6a
   bb844:	000bdc84 	.word	0x000bdc84
   bb848:	000bdc61 	.word	0x000bdc61
   bb84c:	000bdc64 	.word	0x000bdc64
   bb850:	000bd6de 	.word	0x000bd6de
   bb854:	000bded0 	.word	0x000bded0
   bb858:	000bdea8 	.word	0x000bdea8
   bb85c:	7ff00000 	.word	0x7ff00000
   bb860:	7ca00000 	.word	0x7ca00000
   bb864:	7fefffff 	.word	0x7fefffff
   bb868:	f018 0310 	ands.w	r3, r8, #16
   bb86c:	bf18      	it	ne
   bb86e:	236a      	movne	r3, #106	; 0x6a
   bb870:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bbc20 <_strtod_l+0x970>
   bb874:	9304      	str	r3, [sp, #16]
   bb876:	4650      	mov	r0, sl
   bb878:	4659      	mov	r1, fp
   bb87a:	2300      	movs	r3, #0
   bb87c:	f018 0f01 	tst.w	r8, #1
   bb880:	d004      	beq.n	bb88c <_strtod_l+0x5dc>
   bb882:	e9d9 2300 	ldrd	r2, r3, [r9]
   bb886:	f7ff f8c7 	bl	baa18 <__aeabi_dmul>
   bb88a:	2301      	movs	r3, #1
   bb88c:	ea5f 0868 	movs.w	r8, r8, asr #1
   bb890:	f109 0908 	add.w	r9, r9, #8
   bb894:	d1f2      	bne.n	bb87c <_strtod_l+0x5cc>
   bb896:	b10b      	cbz	r3, bb89c <_strtod_l+0x5ec>
   bb898:	4682      	mov	sl, r0
   bb89a:	468b      	mov	fp, r1
   bb89c:	9b04      	ldr	r3, [sp, #16]
   bb89e:	b1c3      	cbz	r3, bb8d2 <_strtod_l+0x622>
   bb8a0:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bb8a4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bb8a8:	2b00      	cmp	r3, #0
   bb8aa:	4659      	mov	r1, fp
   bb8ac:	dd11      	ble.n	bb8d2 <_strtod_l+0x622>
   bb8ae:	2b1f      	cmp	r3, #31
   bb8b0:	f340 8124 	ble.w	bbafc <_strtod_l+0x84c>
   bb8b4:	2b34      	cmp	r3, #52	; 0x34
   bb8b6:	bfde      	ittt	le
   bb8b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bb8bc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   bb8c0:	fa03 f202 	lslle.w	r2, r3, r2
   bb8c4:	f04f 0a00 	mov.w	sl, #0
   bb8c8:	bfcc      	ite	gt
   bb8ca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bb8ce:	ea02 0b01 	andle.w	fp, r2, r1
   bb8d2:	2200      	movs	r2, #0
   bb8d4:	2300      	movs	r3, #0
   bb8d6:	4650      	mov	r0, sl
   bb8d8:	4659      	mov	r1, fp
   bb8da:	f7ff fb05 	bl	baee8 <__aeabi_dcmpeq>
   bb8de:	2800      	cmp	r0, #0
   bb8e0:	d1a2      	bne.n	bb828 <_strtod_l+0x578>
   bb8e2:	9b07      	ldr	r3, [sp, #28]
   bb8e4:	9300      	str	r3, [sp, #0]
   bb8e6:	9908      	ldr	r1, [sp, #32]
   bb8e8:	462b      	mov	r3, r5
   bb8ea:	463a      	mov	r2, r7
   bb8ec:	4620      	mov	r0, r4
   bb8ee:	f001 f85d 	bl	bc9ac <__s2b>
   bb8f2:	9007      	str	r0, [sp, #28]
   bb8f4:	2800      	cmp	r0, #0
   bb8f6:	f43f af1f 	beq.w	bb738 <_strtod_l+0x488>
   bb8fa:	9b05      	ldr	r3, [sp, #20]
   bb8fc:	1b9e      	subs	r6, r3, r6
   bb8fe:	9b06      	ldr	r3, [sp, #24]
   bb900:	2b00      	cmp	r3, #0
   bb902:	bfb4      	ite	lt
   bb904:	4633      	movlt	r3, r6
   bb906:	2300      	movge	r3, #0
   bb908:	930c      	str	r3, [sp, #48]	; 0x30
   bb90a:	9b06      	ldr	r3, [sp, #24]
   bb90c:	2500      	movs	r5, #0
   bb90e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bb912:	9312      	str	r3, [sp, #72]	; 0x48
   bb914:	462e      	mov	r6, r5
   bb916:	9b07      	ldr	r3, [sp, #28]
   bb918:	4620      	mov	r0, r4
   bb91a:	6859      	ldr	r1, [r3, #4]
   bb91c:	f000 ff9e 	bl	bc85c <_Balloc>
   bb920:	9005      	str	r0, [sp, #20]
   bb922:	2800      	cmp	r0, #0
   bb924:	f43f af0c 	beq.w	bb740 <_strtod_l+0x490>
   bb928:	9b07      	ldr	r3, [sp, #28]
   bb92a:	691a      	ldr	r2, [r3, #16]
   bb92c:	3202      	adds	r2, #2
   bb92e:	f103 010c 	add.w	r1, r3, #12
   bb932:	0092      	lsls	r2, r2, #2
   bb934:	300c      	adds	r0, #12
   bb936:	f7ff fbef 	bl	bb118 <memcpy>
   bb93a:	ec4b ab10 	vmov	d0, sl, fp
   bb93e:	aa1a      	add	r2, sp, #104	; 0x68
   bb940:	a919      	add	r1, sp, #100	; 0x64
   bb942:	4620      	mov	r0, r4
   bb944:	f001 fb78 	bl	bd038 <__d2b>
   bb948:	ec4b ab18 	vmov	d8, sl, fp
   bb94c:	9018      	str	r0, [sp, #96]	; 0x60
   bb94e:	2800      	cmp	r0, #0
   bb950:	f43f aef6 	beq.w	bb740 <_strtod_l+0x490>
   bb954:	2101      	movs	r1, #1
   bb956:	4620      	mov	r0, r4
   bb958:	f001 f8c2 	bl	bcae0 <__i2b>
   bb95c:	4606      	mov	r6, r0
   bb95e:	2800      	cmp	r0, #0
   bb960:	f43f aeee 	beq.w	bb740 <_strtod_l+0x490>
   bb964:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bb966:	9904      	ldr	r1, [sp, #16]
   bb968:	2b00      	cmp	r3, #0
   bb96a:	bfab      	itete	ge
   bb96c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bb96e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bb970:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bb972:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bb976:	bfac      	ite	ge
   bb978:	eb03 0902 	addge.w	r9, r3, r2
   bb97c:	1ad7      	sublt	r7, r2, r3
   bb97e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bb980:	eba3 0801 	sub.w	r8, r3, r1
   bb984:	4490      	add	r8, r2
   bb986:	4ba1      	ldr	r3, [pc, #644]	; (bbc0c <_strtod_l+0x95c>)
   bb988:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bb98c:	4598      	cmp	r8, r3
   bb98e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bb992:	f280 80c7 	bge.w	bbb24 <_strtod_l+0x874>
   bb996:	eba3 0308 	sub.w	r3, r3, r8
   bb99a:	2b1f      	cmp	r3, #31
   bb99c:	eba2 0203 	sub.w	r2, r2, r3
   bb9a0:	f04f 0101 	mov.w	r1, #1
   bb9a4:	f300 80b1 	bgt.w	bbb0a <_strtod_l+0x85a>
   bb9a8:	fa01 f303 	lsl.w	r3, r1, r3
   bb9ac:	930d      	str	r3, [sp, #52]	; 0x34
   bb9ae:	2300      	movs	r3, #0
   bb9b0:	9308      	str	r3, [sp, #32]
   bb9b2:	eb09 0802 	add.w	r8, r9, r2
   bb9b6:	9b04      	ldr	r3, [sp, #16]
   bb9b8:	45c1      	cmp	r9, r8
   bb9ba:	4417      	add	r7, r2
   bb9bc:	441f      	add	r7, r3
   bb9be:	464b      	mov	r3, r9
   bb9c0:	bfa8      	it	ge
   bb9c2:	4643      	movge	r3, r8
   bb9c4:	42bb      	cmp	r3, r7
   bb9c6:	bfa8      	it	ge
   bb9c8:	463b      	movge	r3, r7
   bb9ca:	2b00      	cmp	r3, #0
   bb9cc:	bfc2      	ittt	gt
   bb9ce:	eba8 0803 	subgt.w	r8, r8, r3
   bb9d2:	1aff      	subgt	r7, r7, r3
   bb9d4:	eba9 0903 	subgt.w	r9, r9, r3
   bb9d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bb9da:	2b00      	cmp	r3, #0
   bb9dc:	dd17      	ble.n	bba0e <_strtod_l+0x75e>
   bb9de:	4631      	mov	r1, r6
   bb9e0:	461a      	mov	r2, r3
   bb9e2:	4620      	mov	r0, r4
   bb9e4:	f001 f93c 	bl	bcc60 <__pow5mult>
   bb9e8:	4606      	mov	r6, r0
   bb9ea:	2800      	cmp	r0, #0
   bb9ec:	f43f aea8 	beq.w	bb740 <_strtod_l+0x490>
   bb9f0:	4601      	mov	r1, r0
   bb9f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bb9f4:	4620      	mov	r0, r4
   bb9f6:	f001 f889 	bl	bcb0c <__multiply>
   bb9fa:	900b      	str	r0, [sp, #44]	; 0x2c
   bb9fc:	2800      	cmp	r0, #0
   bb9fe:	f43f ae9f 	beq.w	bb740 <_strtod_l+0x490>
   bba02:	9918      	ldr	r1, [sp, #96]	; 0x60
   bba04:	4620      	mov	r0, r4
   bba06:	f000 ff69 	bl	bc8dc <_Bfree>
   bba0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bba0c:	9318      	str	r3, [sp, #96]	; 0x60
   bba0e:	f1b8 0f00 	cmp.w	r8, #0
   bba12:	f300 808c 	bgt.w	bbb2e <_strtod_l+0x87e>
   bba16:	9b06      	ldr	r3, [sp, #24]
   bba18:	2b00      	cmp	r3, #0
   bba1a:	dd08      	ble.n	bba2e <_strtod_l+0x77e>
   bba1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bba1e:	9905      	ldr	r1, [sp, #20]
   bba20:	4620      	mov	r0, r4
   bba22:	f001 f91d 	bl	bcc60 <__pow5mult>
   bba26:	9005      	str	r0, [sp, #20]
   bba28:	2800      	cmp	r0, #0
   bba2a:	f43f ae89 	beq.w	bb740 <_strtod_l+0x490>
   bba2e:	2f00      	cmp	r7, #0
   bba30:	dd08      	ble.n	bba44 <_strtod_l+0x794>
   bba32:	9905      	ldr	r1, [sp, #20]
   bba34:	463a      	mov	r2, r7
   bba36:	4620      	mov	r0, r4
   bba38:	f001 f96c 	bl	bcd14 <__lshift>
   bba3c:	9005      	str	r0, [sp, #20]
   bba3e:	2800      	cmp	r0, #0
   bba40:	f43f ae7e 	beq.w	bb740 <_strtod_l+0x490>
   bba44:	f1b9 0f00 	cmp.w	r9, #0
   bba48:	dd08      	ble.n	bba5c <_strtod_l+0x7ac>
   bba4a:	4631      	mov	r1, r6
   bba4c:	464a      	mov	r2, r9
   bba4e:	4620      	mov	r0, r4
   bba50:	f001 f960 	bl	bcd14 <__lshift>
   bba54:	4606      	mov	r6, r0
   bba56:	2800      	cmp	r0, #0
   bba58:	f43f ae72 	beq.w	bb740 <_strtod_l+0x490>
   bba5c:	9a05      	ldr	r2, [sp, #20]
   bba5e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bba60:	4620      	mov	r0, r4
   bba62:	f001 f9e3 	bl	bce2c <__mdiff>
   bba66:	4605      	mov	r5, r0
   bba68:	2800      	cmp	r0, #0
   bba6a:	f43f ae69 	beq.w	bb740 <_strtod_l+0x490>
   bba6e:	68c3      	ldr	r3, [r0, #12]
   bba70:	930b      	str	r3, [sp, #44]	; 0x2c
   bba72:	2300      	movs	r3, #0
   bba74:	60c3      	str	r3, [r0, #12]
   bba76:	4631      	mov	r1, r6
   bba78:	f001 f9bc 	bl	bcdf4 <__mcmp>
   bba7c:	2800      	cmp	r0, #0
   bba7e:	da60      	bge.n	bbb42 <_strtod_l+0x892>
   bba80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bba82:	ea53 030a 	orrs.w	r3, r3, sl
   bba86:	f040 8082 	bne.w	bbb8e <_strtod_l+0x8de>
   bba8a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bba8e:	2b00      	cmp	r3, #0
   bba90:	d17d      	bne.n	bbb8e <_strtod_l+0x8de>
   bba92:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bba96:	0d1b      	lsrs	r3, r3, #20
   bba98:	051b      	lsls	r3, r3, #20
   bba9a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bba9e:	d976      	bls.n	bbb8e <_strtod_l+0x8de>
   bbaa0:	696b      	ldr	r3, [r5, #20]
   bbaa2:	b913      	cbnz	r3, bbaaa <_strtod_l+0x7fa>
   bbaa4:	692b      	ldr	r3, [r5, #16]
   bbaa6:	2b01      	cmp	r3, #1
   bbaa8:	dd71      	ble.n	bbb8e <_strtod_l+0x8de>
   bbaaa:	4629      	mov	r1, r5
   bbaac:	2201      	movs	r2, #1
   bbaae:	4620      	mov	r0, r4
   bbab0:	f001 f930 	bl	bcd14 <__lshift>
   bbab4:	4631      	mov	r1, r6
   bbab6:	4605      	mov	r5, r0
   bbab8:	f001 f99c 	bl	bcdf4 <__mcmp>
   bbabc:	2800      	cmp	r0, #0
   bbabe:	dd66      	ble.n	bbb8e <_strtod_l+0x8de>
   bbac0:	9904      	ldr	r1, [sp, #16]
   bbac2:	4a53      	ldr	r2, [pc, #332]	; (bbc10 <_strtod_l+0x960>)
   bbac4:	465b      	mov	r3, fp
   bbac6:	2900      	cmp	r1, #0
   bbac8:	f000 8081 	beq.w	bbbce <_strtod_l+0x91e>
   bbacc:	ea02 010b 	and.w	r1, r2, fp
   bbad0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bbad4:	dc7b      	bgt.n	bbbce <_strtod_l+0x91e>
   bbad6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bbada:	f77f aea9 	ble.w	bb830 <_strtod_l+0x580>
   bbade:	4b4d      	ldr	r3, [pc, #308]	; (bbc14 <_strtod_l+0x964>)
   bbae0:	4650      	mov	r0, sl
   bbae2:	4659      	mov	r1, fp
   bbae4:	2200      	movs	r2, #0
   bbae6:	f7fe ff97 	bl	baa18 <__aeabi_dmul>
   bbaea:	460b      	mov	r3, r1
   bbaec:	4303      	orrs	r3, r0
   bbaee:	bf08      	it	eq
   bbaf0:	2322      	moveq	r3, #34	; 0x22
   bbaf2:	4682      	mov	sl, r0
   bbaf4:	468b      	mov	fp, r1
   bbaf6:	bf08      	it	eq
   bbaf8:	6023      	streq	r3, [r4, #0]
   bbafa:	e62b      	b.n	bb754 <_strtod_l+0x4a4>
   bbafc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbb00:	fa02 f303 	lsl.w	r3, r2, r3
   bbb04:	ea03 0a0a 	and.w	sl, r3, sl
   bbb08:	e6e3      	b.n	bb8d2 <_strtod_l+0x622>
   bbb0a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bbb0e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bbb12:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bbb16:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bbb1a:	fa01 f308 	lsl.w	r3, r1, r8
   bbb1e:	9308      	str	r3, [sp, #32]
   bbb20:	910d      	str	r1, [sp, #52]	; 0x34
   bbb22:	e746      	b.n	bb9b2 <_strtod_l+0x702>
   bbb24:	2300      	movs	r3, #0
   bbb26:	9308      	str	r3, [sp, #32]
   bbb28:	2301      	movs	r3, #1
   bbb2a:	930d      	str	r3, [sp, #52]	; 0x34
   bbb2c:	e741      	b.n	bb9b2 <_strtod_l+0x702>
   bbb2e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbb30:	4642      	mov	r2, r8
   bbb32:	4620      	mov	r0, r4
   bbb34:	f001 f8ee 	bl	bcd14 <__lshift>
   bbb38:	9018      	str	r0, [sp, #96]	; 0x60
   bbb3a:	2800      	cmp	r0, #0
   bbb3c:	f47f af6b 	bne.w	bba16 <_strtod_l+0x766>
   bbb40:	e5fe      	b.n	bb740 <_strtod_l+0x490>
   bbb42:	465f      	mov	r7, fp
   bbb44:	d16e      	bne.n	bbc24 <_strtod_l+0x974>
   bbb46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bbb48:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bbb4c:	b342      	cbz	r2, bbba0 <_strtod_l+0x8f0>
   bbb4e:	4a32      	ldr	r2, [pc, #200]	; (bbc18 <_strtod_l+0x968>)
   bbb50:	4293      	cmp	r3, r2
   bbb52:	d128      	bne.n	bbba6 <_strtod_l+0x8f6>
   bbb54:	9b04      	ldr	r3, [sp, #16]
   bbb56:	4651      	mov	r1, sl
   bbb58:	b1eb      	cbz	r3, bbb96 <_strtod_l+0x8e6>
   bbb5a:	4b2d      	ldr	r3, [pc, #180]	; (bbc10 <_strtod_l+0x960>)
   bbb5c:	403b      	ands	r3, r7
   bbb5e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bbb62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbb66:	d819      	bhi.n	bbb9c <_strtod_l+0x8ec>
   bbb68:	0d1b      	lsrs	r3, r3, #20
   bbb6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bbb6e:	fa02 f303 	lsl.w	r3, r2, r3
   bbb72:	4299      	cmp	r1, r3
   bbb74:	d117      	bne.n	bbba6 <_strtod_l+0x8f6>
   bbb76:	4b29      	ldr	r3, [pc, #164]	; (bbc1c <_strtod_l+0x96c>)
   bbb78:	429f      	cmp	r7, r3
   bbb7a:	d102      	bne.n	bbb82 <_strtod_l+0x8d2>
   bbb7c:	3101      	adds	r1, #1
   bbb7e:	f43f addf 	beq.w	bb740 <_strtod_l+0x490>
   bbb82:	4b23      	ldr	r3, [pc, #140]	; (bbc10 <_strtod_l+0x960>)
   bbb84:	403b      	ands	r3, r7
   bbb86:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bbb8a:	f04f 0a00 	mov.w	sl, #0
   bbb8e:	9b04      	ldr	r3, [sp, #16]
   bbb90:	2b00      	cmp	r3, #0
   bbb92:	d1a4      	bne.n	bbade <_strtod_l+0x82e>
   bbb94:	e5de      	b.n	bb754 <_strtod_l+0x4a4>
   bbb96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bbb9a:	e7ea      	b.n	bbb72 <_strtod_l+0x8c2>
   bbb9c:	4613      	mov	r3, r2
   bbb9e:	e7e8      	b.n	bbb72 <_strtod_l+0x8c2>
   bbba0:	ea53 030a 	orrs.w	r3, r3, sl
   bbba4:	d08c      	beq.n	bbac0 <_strtod_l+0x810>
   bbba6:	9b08      	ldr	r3, [sp, #32]
   bbba8:	b1db      	cbz	r3, bbbe2 <_strtod_l+0x932>
   bbbaa:	423b      	tst	r3, r7
   bbbac:	d0ef      	beq.n	bbb8e <_strtod_l+0x8de>
   bbbae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbbb0:	9a04      	ldr	r2, [sp, #16]
   bbbb2:	4650      	mov	r0, sl
   bbbb4:	4659      	mov	r1, fp
   bbbb6:	b1c3      	cbz	r3, bbbea <_strtod_l+0x93a>
   bbbb8:	f7ff fb5c 	bl	bb274 <sulp>
   bbbbc:	4602      	mov	r2, r0
   bbbbe:	460b      	mov	r3, r1
   bbbc0:	ec51 0b18 	vmov	r0, r1, d8
   bbbc4:	f7fe fd72 	bl	ba6ac <__adddf3>
   bbbc8:	4682      	mov	sl, r0
   bbbca:	468b      	mov	fp, r1
   bbbcc:	e7df      	b.n	bbb8e <_strtod_l+0x8de>
   bbbce:	4013      	ands	r3, r2
   bbbd0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bbbd4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bbbd8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bbbdc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bbbe0:	e7d5      	b.n	bbb8e <_strtod_l+0x8de>
   bbbe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bbbe4:	ea13 0f0a 	tst.w	r3, sl
   bbbe8:	e7e0      	b.n	bbbac <_strtod_l+0x8fc>
   bbbea:	f7ff fb43 	bl	bb274 <sulp>
   bbbee:	4602      	mov	r2, r0
   bbbf0:	460b      	mov	r3, r1
   bbbf2:	ec51 0b18 	vmov	r0, r1, d8
   bbbf6:	f7fe fd57 	bl	ba6a8 <__aeabi_dsub>
   bbbfa:	2200      	movs	r2, #0
   bbbfc:	2300      	movs	r3, #0
   bbbfe:	4682      	mov	sl, r0
   bbc00:	468b      	mov	fp, r1
   bbc02:	f7ff f971 	bl	baee8 <__aeabi_dcmpeq>
   bbc06:	2800      	cmp	r0, #0
   bbc08:	d0c1      	beq.n	bbb8e <_strtod_l+0x8de>
   bbc0a:	e611      	b.n	bb830 <_strtod_l+0x580>
   bbc0c:	fffffc02 	.word	0xfffffc02
   bbc10:	7ff00000 	.word	0x7ff00000
   bbc14:	39500000 	.word	0x39500000
   bbc18:	000fffff 	.word	0x000fffff
   bbc1c:	7fefffff 	.word	0x7fefffff
   bbc20:	000bdc98 	.word	0x000bdc98
   bbc24:	4631      	mov	r1, r6
   bbc26:	4628      	mov	r0, r5
   bbc28:	f001 fa62 	bl	bd0f0 <__ratio>
   bbc2c:	ec59 8b10 	vmov	r8, r9, d0
   bbc30:	ee10 0a10 	vmov	r0, s0
   bbc34:	2200      	movs	r2, #0
   bbc36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bbc3a:	4649      	mov	r1, r9
   bbc3c:	f7ff f968 	bl	baf10 <__aeabi_dcmple>
   bbc40:	2800      	cmp	r0, #0
   bbc42:	d07a      	beq.n	bbd3a <_strtod_l+0xa8a>
   bbc44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbc46:	2b00      	cmp	r3, #0
   bbc48:	d04a      	beq.n	bbce0 <_strtod_l+0xa30>
   bbc4a:	4b95      	ldr	r3, [pc, #596]	; (bbea0 <_strtod_l+0xbf0>)
   bbc4c:	2200      	movs	r2, #0
   bbc4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bbc52:	f8df 924c 	ldr.w	r9, [pc, #588]	; bbea0 <_strtod_l+0xbf0>
   bbc56:	f04f 0800 	mov.w	r8, #0
   bbc5a:	4b92      	ldr	r3, [pc, #584]	; (bbea4 <_strtod_l+0xbf4>)
   bbc5c:	403b      	ands	r3, r7
   bbc5e:	930d      	str	r3, [sp, #52]	; 0x34
   bbc60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bbc62:	4b91      	ldr	r3, [pc, #580]	; (bbea8 <_strtod_l+0xbf8>)
   bbc64:	429a      	cmp	r2, r3
   bbc66:	f040 80b0 	bne.w	bbdca <_strtod_l+0xb1a>
   bbc6a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bbc6e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bbc72:	ec4b ab10 	vmov	d0, sl, fp
   bbc76:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bbc7a:	f001 f961 	bl	bcf40 <__ulp>
   bbc7e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bbc82:	ec53 2b10 	vmov	r2, r3, d0
   bbc86:	f7fe fec7 	bl	baa18 <__aeabi_dmul>
   bbc8a:	4652      	mov	r2, sl
   bbc8c:	465b      	mov	r3, fp
   bbc8e:	f7fe fd0d 	bl	ba6ac <__adddf3>
   bbc92:	460b      	mov	r3, r1
   bbc94:	4983      	ldr	r1, [pc, #524]	; (bbea4 <_strtod_l+0xbf4>)
   bbc96:	4a85      	ldr	r2, [pc, #532]	; (bbeac <_strtod_l+0xbfc>)
   bbc98:	4019      	ands	r1, r3
   bbc9a:	4291      	cmp	r1, r2
   bbc9c:	4682      	mov	sl, r0
   bbc9e:	d960      	bls.n	bbd62 <_strtod_l+0xab2>
   bbca0:	ee18 3a90 	vmov	r3, s17
   bbca4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bbca8:	4293      	cmp	r3, r2
   bbcaa:	d104      	bne.n	bbcb6 <_strtod_l+0xa06>
   bbcac:	ee18 3a10 	vmov	r3, s16
   bbcb0:	3301      	adds	r3, #1
   bbcb2:	f43f ad45 	beq.w	bb740 <_strtod_l+0x490>
   bbcb6:	f8df b200 	ldr.w	fp, [pc, #512]	; bbeb8 <_strtod_l+0xc08>
   bbcba:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bbcbe:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbcc0:	4620      	mov	r0, r4
   bbcc2:	f000 fe0b 	bl	bc8dc <_Bfree>
   bbcc6:	9905      	ldr	r1, [sp, #20]
   bbcc8:	4620      	mov	r0, r4
   bbcca:	f000 fe07 	bl	bc8dc <_Bfree>
   bbcce:	4631      	mov	r1, r6
   bbcd0:	4620      	mov	r0, r4
   bbcd2:	f000 fe03 	bl	bc8dc <_Bfree>
   bbcd6:	4629      	mov	r1, r5
   bbcd8:	4620      	mov	r0, r4
   bbcda:	f000 fdff 	bl	bc8dc <_Bfree>
   bbcde:	e61a      	b.n	bb916 <_strtod_l+0x666>
   bbce0:	f1ba 0f00 	cmp.w	sl, #0
   bbce4:	d11b      	bne.n	bbd1e <_strtod_l+0xa6e>
   bbce6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bbcea:	b9f3      	cbnz	r3, bbd2a <_strtod_l+0xa7a>
   bbcec:	4b6c      	ldr	r3, [pc, #432]	; (bbea0 <_strtod_l+0xbf0>)
   bbcee:	2200      	movs	r2, #0
   bbcf0:	4640      	mov	r0, r8
   bbcf2:	4649      	mov	r1, r9
   bbcf4:	f7ff f902 	bl	baefc <__aeabi_dcmplt>
   bbcf8:	b9d0      	cbnz	r0, bbd30 <_strtod_l+0xa80>
   bbcfa:	4640      	mov	r0, r8
   bbcfc:	4649      	mov	r1, r9
   bbcfe:	4b6c      	ldr	r3, [pc, #432]	; (bbeb0 <_strtod_l+0xc00>)
   bbd00:	2200      	movs	r2, #0
   bbd02:	f7fe fe89 	bl	baa18 <__aeabi_dmul>
   bbd06:	4680      	mov	r8, r0
   bbd08:	4689      	mov	r9, r1
   bbd0a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bbd0e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bbd12:	9315      	str	r3, [sp, #84]	; 0x54
   bbd14:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bbd18:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bbd1c:	e79d      	b.n	bbc5a <_strtod_l+0x9aa>
   bbd1e:	f1ba 0f01 	cmp.w	sl, #1
   bbd22:	d102      	bne.n	bbd2a <_strtod_l+0xa7a>
   bbd24:	2f00      	cmp	r7, #0
   bbd26:	f43f ad83 	beq.w	bb830 <_strtod_l+0x580>
   bbd2a:	4b62      	ldr	r3, [pc, #392]	; (bbeb4 <_strtod_l+0xc04>)
   bbd2c:	2200      	movs	r2, #0
   bbd2e:	e78e      	b.n	bbc4e <_strtod_l+0x99e>
   bbd30:	f8df 917c 	ldr.w	r9, [pc, #380]	; bbeb0 <_strtod_l+0xc00>
   bbd34:	f04f 0800 	mov.w	r8, #0
   bbd38:	e7e7      	b.n	bbd0a <_strtod_l+0xa5a>
   bbd3a:	4b5d      	ldr	r3, [pc, #372]	; (bbeb0 <_strtod_l+0xc00>)
   bbd3c:	4640      	mov	r0, r8
   bbd3e:	4649      	mov	r1, r9
   bbd40:	2200      	movs	r2, #0
   bbd42:	f7fe fe69 	bl	baa18 <__aeabi_dmul>
   bbd46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbd48:	4680      	mov	r8, r0
   bbd4a:	4689      	mov	r9, r1
   bbd4c:	b933      	cbnz	r3, bbd5c <_strtod_l+0xaac>
   bbd4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bbd52:	900e      	str	r0, [sp, #56]	; 0x38
   bbd54:	930f      	str	r3, [sp, #60]	; 0x3c
   bbd56:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bbd5a:	e7dd      	b.n	bbd18 <_strtod_l+0xa68>
   bbd5c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bbd60:	e7f9      	b.n	bbd56 <_strtod_l+0xaa6>
   bbd62:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bbd66:	9b04      	ldr	r3, [sp, #16]
   bbd68:	2b00      	cmp	r3, #0
   bbd6a:	d1a8      	bne.n	bbcbe <_strtod_l+0xa0e>
   bbd6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bbd70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bbd72:	0d1b      	lsrs	r3, r3, #20
   bbd74:	051b      	lsls	r3, r3, #20
   bbd76:	429a      	cmp	r2, r3
   bbd78:	d1a1      	bne.n	bbcbe <_strtod_l+0xa0e>
   bbd7a:	4640      	mov	r0, r8
   bbd7c:	4649      	mov	r1, r9
   bbd7e:	f001 fa5b 	bl	bd238 <__aeabi_d2lz>
   bbd82:	f7fe fe1b 	bl	ba9bc <__aeabi_l2d>
   bbd86:	4602      	mov	r2, r0
   bbd88:	460b      	mov	r3, r1
   bbd8a:	4640      	mov	r0, r8
   bbd8c:	4649      	mov	r1, r9
   bbd8e:	f7fe fc8b 	bl	ba6a8 <__aeabi_dsub>
   bbd92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bbd94:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bbd98:	ea43 030a 	orr.w	r3, r3, sl
   bbd9c:	4313      	orrs	r3, r2
   bbd9e:	4680      	mov	r8, r0
   bbda0:	4689      	mov	r9, r1
   bbda2:	d055      	beq.n	bbe50 <_strtod_l+0xba0>
   bbda4:	a336      	add	r3, pc, #216	; (adr r3, bbe80 <_strtod_l+0xbd0>)
   bbda6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbdaa:	f7ff f8a7 	bl	baefc <__aeabi_dcmplt>
   bbdae:	2800      	cmp	r0, #0
   bbdb0:	f47f acd0 	bne.w	bb754 <_strtod_l+0x4a4>
   bbdb4:	a334      	add	r3, pc, #208	; (adr r3, bbe88 <_strtod_l+0xbd8>)
   bbdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbdba:	4640      	mov	r0, r8
   bbdbc:	4649      	mov	r1, r9
   bbdbe:	f7ff f8bb 	bl	baf38 <__aeabi_dcmpgt>
   bbdc2:	2800      	cmp	r0, #0
   bbdc4:	f43f af7b 	beq.w	bbcbe <_strtod_l+0xa0e>
   bbdc8:	e4c4      	b.n	bb754 <_strtod_l+0x4a4>
   bbdca:	9b04      	ldr	r3, [sp, #16]
   bbdcc:	b333      	cbz	r3, bbe1c <_strtod_l+0xb6c>
   bbdce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bbdd0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bbdd4:	d822      	bhi.n	bbe1c <_strtod_l+0xb6c>
   bbdd6:	a32e      	add	r3, pc, #184	; (adr r3, bbe90 <_strtod_l+0xbe0>)
   bbdd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbddc:	4640      	mov	r0, r8
   bbdde:	4649      	mov	r1, r9
   bbde0:	f7ff f896 	bl	baf10 <__aeabi_dcmple>
   bbde4:	b1a0      	cbz	r0, bbe10 <_strtod_l+0xb60>
   bbde6:	4649      	mov	r1, r9
   bbde8:	4640      	mov	r0, r8
   bbdea:	f7ff f8ed 	bl	bafc8 <__aeabi_d2uiz>
   bbdee:	2801      	cmp	r0, #1
   bbdf0:	bf38      	it	cc
   bbdf2:	2001      	movcc	r0, #1
   bbdf4:	f7fe fd96 	bl	ba924 <__aeabi_ui2d>
   bbdf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbdfa:	4680      	mov	r8, r0
   bbdfc:	4689      	mov	r9, r1
   bbdfe:	bb23      	cbnz	r3, bbe4a <_strtod_l+0xb9a>
   bbe00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bbe04:	9010      	str	r0, [sp, #64]	; 0x40
   bbe06:	9311      	str	r3, [sp, #68]	; 0x44
   bbe08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bbe0c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bbe10:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bbe12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bbe14:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bbe18:	1a9b      	subs	r3, r3, r2
   bbe1a:	9309      	str	r3, [sp, #36]	; 0x24
   bbe1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bbe20:	eeb0 0a48 	vmov.f32	s0, s16
   bbe24:	eef0 0a68 	vmov.f32	s1, s17
   bbe28:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bbe2c:	f001 f888 	bl	bcf40 <__ulp>
   bbe30:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bbe34:	ec53 2b10 	vmov	r2, r3, d0
   bbe38:	f7fe fdee 	bl	baa18 <__aeabi_dmul>
   bbe3c:	ec53 2b18 	vmov	r2, r3, d8
   bbe40:	f7fe fc34 	bl	ba6ac <__adddf3>
   bbe44:	4682      	mov	sl, r0
   bbe46:	468b      	mov	fp, r1
   bbe48:	e78d      	b.n	bbd66 <_strtod_l+0xab6>
   bbe4a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bbe4e:	e7db      	b.n	bbe08 <_strtod_l+0xb58>
   bbe50:	a311      	add	r3, pc, #68	; (adr r3, bbe98 <_strtod_l+0xbe8>)
   bbe52:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbe56:	f7ff f851 	bl	baefc <__aeabi_dcmplt>
   bbe5a:	e7b2      	b.n	bbdc2 <_strtod_l+0xb12>
   bbe5c:	2300      	movs	r3, #0
   bbe5e:	930a      	str	r3, [sp, #40]	; 0x28
   bbe60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bbe62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbe64:	6013      	str	r3, [r2, #0]
   bbe66:	f7ff ba6b 	b.w	bb340 <_strtod_l+0x90>
   bbe6a:	2a65      	cmp	r2, #101	; 0x65
   bbe6c:	f43f ab5f 	beq.w	bb52e <_strtod_l+0x27e>
   bbe70:	2a45      	cmp	r2, #69	; 0x45
   bbe72:	f43f ab5c 	beq.w	bb52e <_strtod_l+0x27e>
   bbe76:	2301      	movs	r3, #1
   bbe78:	f7ff bb94 	b.w	bb5a4 <_strtod_l+0x2f4>
   bbe7c:	f3af 8000 	nop.w
   bbe80:	94a03595 	.word	0x94a03595
   bbe84:	3fdfffff 	.word	0x3fdfffff
   bbe88:	35afe535 	.word	0x35afe535
   bbe8c:	3fe00000 	.word	0x3fe00000
   bbe90:	ffc00000 	.word	0xffc00000
   bbe94:	41dfffff 	.word	0x41dfffff
   bbe98:	94a03595 	.word	0x94a03595
   bbe9c:	3fcfffff 	.word	0x3fcfffff
   bbea0:	3ff00000 	.word	0x3ff00000
   bbea4:	7ff00000 	.word	0x7ff00000
   bbea8:	7fe00000 	.word	0x7fe00000
   bbeac:	7c9fffff 	.word	0x7c9fffff
   bbeb0:	3fe00000 	.word	0x3fe00000
   bbeb4:	bff00000 	.word	0xbff00000
   bbeb8:	7fefffff 	.word	0x7fefffff

000bbebc <strtof>:
   bbebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bbec0:	f8df 80ac 	ldr.w	r8, [pc, #172]	; bbf70 <strtof+0xb4>
   bbec4:	4b26      	ldr	r3, [pc, #152]	; (bbf60 <strtof+0xa4>)
   bbec6:	460a      	mov	r2, r1
   bbec8:	ed2d 8b02 	vpush	{d8}
   bbecc:	4601      	mov	r1, r0
   bbece:	f8d8 0000 	ldr.w	r0, [r8]
   bbed2:	f7ff f9ed 	bl	bb2b0 <_strtod_l>
   bbed6:	ec55 4b10 	vmov	r4, r5, d0
   bbeda:	ee10 2a10 	vmov	r2, s0
   bbede:	ee10 0a10 	vmov	r0, s0
   bbee2:	462b      	mov	r3, r5
   bbee4:	4629      	mov	r1, r5
   bbee6:	f7ff f831 	bl	baf4c <__aeabi_dcmpun>
   bbeea:	b190      	cbz	r0, bbf12 <strtof+0x56>
   bbeec:	2d00      	cmp	r5, #0
   bbeee:	481d      	ldr	r0, [pc, #116]	; (bbf64 <strtof+0xa8>)
   bbef0:	da09      	bge.n	bbf06 <strtof+0x4a>
   bbef2:	f001 f98d 	bl	bd210 <nanf>
   bbef6:	eeb1 8a40 	vneg.f32	s16, s0
   bbefa:	eeb0 0a48 	vmov.f32	s0, s16
   bbefe:	ecbd 8b02 	vpop	{d8}
   bbf02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bbf06:	ecbd 8b02 	vpop	{d8}
   bbf0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bbf0e:	f001 b97f 	b.w	bd210 <nanf>
   bbf12:	4620      	mov	r0, r4
   bbf14:	4629      	mov	r1, r5
   bbf16:	f7ff f877 	bl	bb008 <__aeabi_d2f>
   bbf1a:	ee08 0a10 	vmov	s16, r0
   bbf1e:	eddf 7a12 	vldr	s15, [pc, #72]	; bbf68 <strtof+0xac>
   bbf22:	eeb0 7ac8 	vabs.f32	s14, s16
   bbf26:	eeb4 7a67 	vcmp.f32	s14, s15
   bbf2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bbf2e:	dde4      	ble.n	bbefa <strtof+0x3e>
   bbf30:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   bbf34:	4b0d      	ldr	r3, [pc, #52]	; (bbf6c <strtof+0xb0>)
   bbf36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbf3a:	4620      	mov	r0, r4
   bbf3c:	4639      	mov	r1, r7
   bbf3e:	f7ff f805 	bl	baf4c <__aeabi_dcmpun>
   bbf42:	b940      	cbnz	r0, bbf56 <strtof+0x9a>
   bbf44:	4b09      	ldr	r3, [pc, #36]	; (bbf6c <strtof+0xb0>)
   bbf46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbf4a:	4620      	mov	r0, r4
   bbf4c:	4639      	mov	r1, r7
   bbf4e:	f7fe ffdf 	bl	baf10 <__aeabi_dcmple>
   bbf52:	2800      	cmp	r0, #0
   bbf54:	d0d1      	beq.n	bbefa <strtof+0x3e>
   bbf56:	f8d8 3000 	ldr.w	r3, [r8]
   bbf5a:	2222      	movs	r2, #34	; 0x22
   bbf5c:	601a      	str	r2, [r3, #0]
   bbf5e:	e7cc      	b.n	bbefa <strtof+0x3e>
   bbf60:	200353d4 	.word	0x200353d4
   bbf64:	000bd6de 	.word	0x000bd6de
   bbf68:	7f7fffff 	.word	0x7f7fffff
   bbf6c:	7fefffff 	.word	0x7fefffff
   bbf70:	20035368 	.word	0x20035368

000bbf74 <_strtol_l.constprop.0>:
   bbf74:	2b01      	cmp	r3, #1
   bbf76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bbf7a:	d001      	beq.n	bbf80 <_strtol_l.constprop.0+0xc>
   bbf7c:	2b24      	cmp	r3, #36	; 0x24
   bbf7e:	d906      	bls.n	bbf8e <_strtol_l.constprop.0+0x1a>
   bbf80:	f7fb fd96 	bl	b7ab0 <__errno>
   bbf84:	2316      	movs	r3, #22
   bbf86:	6003      	str	r3, [r0, #0]
   bbf88:	2000      	movs	r0, #0
   bbf8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bbf8e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bc074 <_strtol_l.constprop.0+0x100>
   bbf92:	460d      	mov	r5, r1
   bbf94:	462e      	mov	r6, r5
   bbf96:	f815 4b01 	ldrb.w	r4, [r5], #1
   bbf9a:	f814 700c 	ldrb.w	r7, [r4, ip]
   bbf9e:	f017 0708 	ands.w	r7, r7, #8
   bbfa2:	d1f7      	bne.n	bbf94 <_strtol_l.constprop.0+0x20>
   bbfa4:	2c2d      	cmp	r4, #45	; 0x2d
   bbfa6:	d132      	bne.n	bc00e <_strtol_l.constprop.0+0x9a>
   bbfa8:	782c      	ldrb	r4, [r5, #0]
   bbfaa:	2701      	movs	r7, #1
   bbfac:	1cb5      	adds	r5, r6, #2
   bbfae:	2b00      	cmp	r3, #0
   bbfb0:	d05b      	beq.n	bc06a <_strtol_l.constprop.0+0xf6>
   bbfb2:	2b10      	cmp	r3, #16
   bbfb4:	d109      	bne.n	bbfca <_strtol_l.constprop.0+0x56>
   bbfb6:	2c30      	cmp	r4, #48	; 0x30
   bbfb8:	d107      	bne.n	bbfca <_strtol_l.constprop.0+0x56>
   bbfba:	782c      	ldrb	r4, [r5, #0]
   bbfbc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bbfc0:	2c58      	cmp	r4, #88	; 0x58
   bbfc2:	d14d      	bne.n	bc060 <_strtol_l.constprop.0+0xec>
   bbfc4:	786c      	ldrb	r4, [r5, #1]
   bbfc6:	2310      	movs	r3, #16
   bbfc8:	3502      	adds	r5, #2
   bbfca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bbfce:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bbfd2:	f04f 0c00 	mov.w	ip, #0
   bbfd6:	fbb8 f9f3 	udiv	r9, r8, r3
   bbfda:	4666      	mov	r6, ip
   bbfdc:	fb03 8a19 	mls	sl, r3, r9, r8
   bbfe0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bbfe4:	f1be 0f09 	cmp.w	lr, #9
   bbfe8:	d816      	bhi.n	bc018 <_strtol_l.constprop.0+0xa4>
   bbfea:	4674      	mov	r4, lr
   bbfec:	42a3      	cmp	r3, r4
   bbfee:	dd24      	ble.n	bc03a <_strtol_l.constprop.0+0xc6>
   bbff0:	f1bc 0f00 	cmp.w	ip, #0
   bbff4:	db1e      	blt.n	bc034 <_strtol_l.constprop.0+0xc0>
   bbff6:	45b1      	cmp	r9, r6
   bbff8:	d31c      	bcc.n	bc034 <_strtol_l.constprop.0+0xc0>
   bbffa:	d101      	bne.n	bc000 <_strtol_l.constprop.0+0x8c>
   bbffc:	45a2      	cmp	sl, r4
   bbffe:	db19      	blt.n	bc034 <_strtol_l.constprop.0+0xc0>
   bc000:	fb06 4603 	mla	r6, r6, r3, r4
   bc004:	f04f 0c01 	mov.w	ip, #1
   bc008:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc00c:	e7e8      	b.n	bbfe0 <_strtol_l.constprop.0+0x6c>
   bc00e:	2c2b      	cmp	r4, #43	; 0x2b
   bc010:	bf04      	itt	eq
   bc012:	782c      	ldrbeq	r4, [r5, #0]
   bc014:	1cb5      	addeq	r5, r6, #2
   bc016:	e7ca      	b.n	bbfae <_strtol_l.constprop.0+0x3a>
   bc018:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bc01c:	f1be 0f19 	cmp.w	lr, #25
   bc020:	d801      	bhi.n	bc026 <_strtol_l.constprop.0+0xb2>
   bc022:	3c37      	subs	r4, #55	; 0x37
   bc024:	e7e2      	b.n	bbfec <_strtol_l.constprop.0+0x78>
   bc026:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bc02a:	f1be 0f19 	cmp.w	lr, #25
   bc02e:	d804      	bhi.n	bc03a <_strtol_l.constprop.0+0xc6>
   bc030:	3c57      	subs	r4, #87	; 0x57
   bc032:	e7db      	b.n	bbfec <_strtol_l.constprop.0+0x78>
   bc034:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bc038:	e7e6      	b.n	bc008 <_strtol_l.constprop.0+0x94>
   bc03a:	f1bc 0f00 	cmp.w	ip, #0
   bc03e:	da05      	bge.n	bc04c <_strtol_l.constprop.0+0xd8>
   bc040:	2322      	movs	r3, #34	; 0x22
   bc042:	6003      	str	r3, [r0, #0]
   bc044:	4646      	mov	r6, r8
   bc046:	b942      	cbnz	r2, bc05a <_strtol_l.constprop.0+0xe6>
   bc048:	4630      	mov	r0, r6
   bc04a:	e79e      	b.n	bbf8a <_strtol_l.constprop.0+0x16>
   bc04c:	b107      	cbz	r7, bc050 <_strtol_l.constprop.0+0xdc>
   bc04e:	4276      	negs	r6, r6
   bc050:	2a00      	cmp	r2, #0
   bc052:	d0f9      	beq.n	bc048 <_strtol_l.constprop.0+0xd4>
   bc054:	f1bc 0f00 	cmp.w	ip, #0
   bc058:	d000      	beq.n	bc05c <_strtol_l.constprop.0+0xe8>
   bc05a:	1e69      	subs	r1, r5, #1
   bc05c:	6011      	str	r1, [r2, #0]
   bc05e:	e7f3      	b.n	bc048 <_strtol_l.constprop.0+0xd4>
   bc060:	2430      	movs	r4, #48	; 0x30
   bc062:	2b00      	cmp	r3, #0
   bc064:	d1b1      	bne.n	bbfca <_strtol_l.constprop.0+0x56>
   bc066:	2308      	movs	r3, #8
   bc068:	e7af      	b.n	bbfca <_strtol_l.constprop.0+0x56>
   bc06a:	2c30      	cmp	r4, #48	; 0x30
   bc06c:	d0a5      	beq.n	bbfba <_strtol_l.constprop.0+0x46>
   bc06e:	230a      	movs	r3, #10
   bc070:	e7ab      	b.n	bbfca <_strtol_l.constprop.0+0x56>
   bc072:	bf00      	nop
   bc074:	000bdcc1 	.word	0x000bdcc1

000bc078 <strtol>:
   bc078:	4613      	mov	r3, r2
   bc07a:	460a      	mov	r2, r1
   bc07c:	4601      	mov	r1, r0
   bc07e:	4802      	ldr	r0, [pc, #8]	; (bc088 <strtol+0x10>)
   bc080:	6800      	ldr	r0, [r0, #0]
   bc082:	f7ff bf77 	b.w	bbf74 <_strtol_l.constprop.0>
   bc086:	bf00      	nop
   bc088:	20035368 	.word	0x20035368

000bc08c <__register_exitproc>:
   bc08c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc090:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bc14c <__register_exitproc+0xc0>
   bc094:	4606      	mov	r6, r0
   bc096:	f8d8 0000 	ldr.w	r0, [r8]
   bc09a:	461f      	mov	r7, r3
   bc09c:	460d      	mov	r5, r1
   bc09e:	4691      	mov	r9, r2
   bc0a0:	f000 fbc6 	bl	bc830 <__retarget_lock_acquire_recursive>
   bc0a4:	4b25      	ldr	r3, [pc, #148]	; (bc13c <__register_exitproc+0xb0>)
   bc0a6:	681c      	ldr	r4, [r3, #0]
   bc0a8:	b934      	cbnz	r4, bc0b8 <__register_exitproc+0x2c>
   bc0aa:	4c25      	ldr	r4, [pc, #148]	; (bc140 <__register_exitproc+0xb4>)
   bc0ac:	601c      	str	r4, [r3, #0]
   bc0ae:	4b25      	ldr	r3, [pc, #148]	; (bc144 <__register_exitproc+0xb8>)
   bc0b0:	b113      	cbz	r3, bc0b8 <__register_exitproc+0x2c>
   bc0b2:	681b      	ldr	r3, [r3, #0]
   bc0b4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bc0b8:	6863      	ldr	r3, [r4, #4]
   bc0ba:	2b1f      	cmp	r3, #31
   bc0bc:	dd07      	ble.n	bc0ce <__register_exitproc+0x42>
   bc0be:	f8d8 0000 	ldr.w	r0, [r8]
   bc0c2:	f000 fbb7 	bl	bc834 <__retarget_lock_release_recursive>
   bc0c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bc0ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc0ce:	b34e      	cbz	r6, bc124 <__register_exitproc+0x98>
   bc0d0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bc0d4:	b988      	cbnz	r0, bc0fa <__register_exitproc+0x6e>
   bc0d6:	4b1c      	ldr	r3, [pc, #112]	; (bc148 <__register_exitproc+0xbc>)
   bc0d8:	b923      	cbnz	r3, bc0e4 <__register_exitproc+0x58>
   bc0da:	f8d8 0000 	ldr.w	r0, [r8]
   bc0de:	f000 fba8 	bl	bc832 <__retarget_lock_release>
   bc0e2:	e7f0      	b.n	bc0c6 <__register_exitproc+0x3a>
   bc0e4:	f44f 7084 	mov.w	r0, #264	; 0x108
   bc0e8:	f7fb fcaa 	bl	b7a40 <malloc>
   bc0ec:	2800      	cmp	r0, #0
   bc0ee:	d0f4      	beq.n	bc0da <__register_exitproc+0x4e>
   bc0f0:	2300      	movs	r3, #0
   bc0f2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bc0f6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bc0fa:	6863      	ldr	r3, [r4, #4]
   bc0fc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bc100:	2201      	movs	r2, #1
   bc102:	409a      	lsls	r2, r3
   bc104:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bc108:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bc10c:	4313      	orrs	r3, r2
   bc10e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bc112:	2e02      	cmp	r6, #2
   bc114:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bc118:	bf02      	ittt	eq
   bc11a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bc11e:	4313      	orreq	r3, r2
   bc120:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bc124:	6863      	ldr	r3, [r4, #4]
   bc126:	f8d8 0000 	ldr.w	r0, [r8]
   bc12a:	1c5a      	adds	r2, r3, #1
   bc12c:	3302      	adds	r3, #2
   bc12e:	6062      	str	r2, [r4, #4]
   bc130:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bc134:	f000 fb7e 	bl	bc834 <__retarget_lock_release_recursive>
   bc138:	2000      	movs	r0, #0
   bc13a:	e7c6      	b.n	bc0ca <__register_exitproc+0x3e>
   bc13c:	2003e7e8 	.word	0x2003e7e8
   bc140:	2003e75c 	.word	0x2003e75c
   bc144:	00000000 	.word	0x00000000
   bc148:	000b7a41 	.word	0x000b7a41
   bc14c:	200353cc 	.word	0x200353cc

000bc150 <rshift>:
   bc150:	6903      	ldr	r3, [r0, #16]
   bc152:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bc156:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc15a:	ea4f 1261 	mov.w	r2, r1, asr #5
   bc15e:	f100 0414 	add.w	r4, r0, #20
   bc162:	dd45      	ble.n	bc1f0 <rshift+0xa0>
   bc164:	f011 011f 	ands.w	r1, r1, #31
   bc168:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bc16c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bc170:	d10c      	bne.n	bc18c <rshift+0x3c>
   bc172:	f100 0710 	add.w	r7, r0, #16
   bc176:	4629      	mov	r1, r5
   bc178:	42b1      	cmp	r1, r6
   bc17a:	d334      	bcc.n	bc1e6 <rshift+0x96>
   bc17c:	1a9b      	subs	r3, r3, r2
   bc17e:	009b      	lsls	r3, r3, #2
   bc180:	1eea      	subs	r2, r5, #3
   bc182:	4296      	cmp	r6, r2
   bc184:	bf38      	it	cc
   bc186:	2300      	movcc	r3, #0
   bc188:	4423      	add	r3, r4
   bc18a:	e015      	b.n	bc1b8 <rshift+0x68>
   bc18c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bc190:	f1c1 0820 	rsb	r8, r1, #32
   bc194:	40cf      	lsrs	r7, r1
   bc196:	f105 0e04 	add.w	lr, r5, #4
   bc19a:	46a1      	mov	r9, r4
   bc19c:	4576      	cmp	r6, lr
   bc19e:	46f4      	mov	ip, lr
   bc1a0:	d815      	bhi.n	bc1ce <rshift+0x7e>
   bc1a2:	1a9a      	subs	r2, r3, r2
   bc1a4:	0092      	lsls	r2, r2, #2
   bc1a6:	3a04      	subs	r2, #4
   bc1a8:	3501      	adds	r5, #1
   bc1aa:	42ae      	cmp	r6, r5
   bc1ac:	bf38      	it	cc
   bc1ae:	2200      	movcc	r2, #0
   bc1b0:	18a3      	adds	r3, r4, r2
   bc1b2:	50a7      	str	r7, [r4, r2]
   bc1b4:	b107      	cbz	r7, bc1b8 <rshift+0x68>
   bc1b6:	3304      	adds	r3, #4
   bc1b8:	1b1a      	subs	r2, r3, r4
   bc1ba:	42a3      	cmp	r3, r4
   bc1bc:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bc1c0:	bf08      	it	eq
   bc1c2:	2300      	moveq	r3, #0
   bc1c4:	6102      	str	r2, [r0, #16]
   bc1c6:	bf08      	it	eq
   bc1c8:	6143      	streq	r3, [r0, #20]
   bc1ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bc1ce:	f8dc c000 	ldr.w	ip, [ip]
   bc1d2:	fa0c fc08 	lsl.w	ip, ip, r8
   bc1d6:	ea4c 0707 	orr.w	r7, ip, r7
   bc1da:	f849 7b04 	str.w	r7, [r9], #4
   bc1de:	f85e 7b04 	ldr.w	r7, [lr], #4
   bc1e2:	40cf      	lsrs	r7, r1
   bc1e4:	e7da      	b.n	bc19c <rshift+0x4c>
   bc1e6:	f851 cb04 	ldr.w	ip, [r1], #4
   bc1ea:	f847 cf04 	str.w	ip, [r7, #4]!
   bc1ee:	e7c3      	b.n	bc178 <rshift+0x28>
   bc1f0:	4623      	mov	r3, r4
   bc1f2:	e7e1      	b.n	bc1b8 <rshift+0x68>

000bc1f4 <__hexdig_fun>:
   bc1f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bc1f8:	2b09      	cmp	r3, #9
   bc1fa:	d802      	bhi.n	bc202 <__hexdig_fun+0xe>
   bc1fc:	3820      	subs	r0, #32
   bc1fe:	b2c0      	uxtb	r0, r0
   bc200:	4770      	bx	lr
   bc202:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bc206:	2b05      	cmp	r3, #5
   bc208:	d801      	bhi.n	bc20e <__hexdig_fun+0x1a>
   bc20a:	3847      	subs	r0, #71	; 0x47
   bc20c:	e7f7      	b.n	bc1fe <__hexdig_fun+0xa>
   bc20e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bc212:	2b05      	cmp	r3, #5
   bc214:	d801      	bhi.n	bc21a <__hexdig_fun+0x26>
   bc216:	3827      	subs	r0, #39	; 0x27
   bc218:	e7f1      	b.n	bc1fe <__hexdig_fun+0xa>
   bc21a:	2000      	movs	r0, #0
   bc21c:	4770      	bx	lr
	...

000bc220 <__gethex>:
   bc220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc224:	ed2d 8b02 	vpush	{d8}
   bc228:	b089      	sub	sp, #36	; 0x24
   bc22a:	ee08 0a10 	vmov	s16, r0
   bc22e:	9304      	str	r3, [sp, #16]
   bc230:	4bb4      	ldr	r3, [pc, #720]	; (bc504 <__gethex+0x2e4>)
   bc232:	681b      	ldr	r3, [r3, #0]
   bc234:	9301      	str	r3, [sp, #4]
   bc236:	4618      	mov	r0, r3
   bc238:	468b      	mov	fp, r1
   bc23a:	4690      	mov	r8, r2
   bc23c:	f7fe ffdc 	bl	bb1f8 <strlen>
   bc240:	9b01      	ldr	r3, [sp, #4]
   bc242:	f8db 2000 	ldr.w	r2, [fp]
   bc246:	4403      	add	r3, r0
   bc248:	4682      	mov	sl, r0
   bc24a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bc24e:	9305      	str	r3, [sp, #20]
   bc250:	1c93      	adds	r3, r2, #2
   bc252:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bc256:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bc25a:	32fe      	adds	r2, #254	; 0xfe
   bc25c:	18d1      	adds	r1, r2, r3
   bc25e:	461f      	mov	r7, r3
   bc260:	f813 0b01 	ldrb.w	r0, [r3], #1
   bc264:	9100      	str	r1, [sp, #0]
   bc266:	2830      	cmp	r0, #48	; 0x30
   bc268:	d0f8      	beq.n	bc25c <__gethex+0x3c>
   bc26a:	f7ff ffc3 	bl	bc1f4 <__hexdig_fun>
   bc26e:	4604      	mov	r4, r0
   bc270:	2800      	cmp	r0, #0
   bc272:	d13a      	bne.n	bc2ea <__gethex+0xca>
   bc274:	9901      	ldr	r1, [sp, #4]
   bc276:	4652      	mov	r2, sl
   bc278:	4638      	mov	r0, r7
   bc27a:	f7fe ffc5 	bl	bb208 <strncmp>
   bc27e:	4605      	mov	r5, r0
   bc280:	2800      	cmp	r0, #0
   bc282:	d168      	bne.n	bc356 <__gethex+0x136>
   bc284:	f817 000a 	ldrb.w	r0, [r7, sl]
   bc288:	eb07 060a 	add.w	r6, r7, sl
   bc28c:	f7ff ffb2 	bl	bc1f4 <__hexdig_fun>
   bc290:	2800      	cmp	r0, #0
   bc292:	d062      	beq.n	bc35a <__gethex+0x13a>
   bc294:	4633      	mov	r3, r6
   bc296:	7818      	ldrb	r0, [r3, #0]
   bc298:	2830      	cmp	r0, #48	; 0x30
   bc29a:	461f      	mov	r7, r3
   bc29c:	f103 0301 	add.w	r3, r3, #1
   bc2a0:	d0f9      	beq.n	bc296 <__gethex+0x76>
   bc2a2:	f7ff ffa7 	bl	bc1f4 <__hexdig_fun>
   bc2a6:	2301      	movs	r3, #1
   bc2a8:	fab0 f480 	clz	r4, r0
   bc2ac:	0964      	lsrs	r4, r4, #5
   bc2ae:	4635      	mov	r5, r6
   bc2b0:	9300      	str	r3, [sp, #0]
   bc2b2:	463a      	mov	r2, r7
   bc2b4:	4616      	mov	r6, r2
   bc2b6:	3201      	adds	r2, #1
   bc2b8:	7830      	ldrb	r0, [r6, #0]
   bc2ba:	f7ff ff9b 	bl	bc1f4 <__hexdig_fun>
   bc2be:	2800      	cmp	r0, #0
   bc2c0:	d1f8      	bne.n	bc2b4 <__gethex+0x94>
   bc2c2:	9901      	ldr	r1, [sp, #4]
   bc2c4:	4652      	mov	r2, sl
   bc2c6:	4630      	mov	r0, r6
   bc2c8:	f7fe ff9e 	bl	bb208 <strncmp>
   bc2cc:	b980      	cbnz	r0, bc2f0 <__gethex+0xd0>
   bc2ce:	b94d      	cbnz	r5, bc2e4 <__gethex+0xc4>
   bc2d0:	eb06 050a 	add.w	r5, r6, sl
   bc2d4:	462a      	mov	r2, r5
   bc2d6:	4616      	mov	r6, r2
   bc2d8:	3201      	adds	r2, #1
   bc2da:	7830      	ldrb	r0, [r6, #0]
   bc2dc:	f7ff ff8a 	bl	bc1f4 <__hexdig_fun>
   bc2e0:	2800      	cmp	r0, #0
   bc2e2:	d1f8      	bne.n	bc2d6 <__gethex+0xb6>
   bc2e4:	1bad      	subs	r5, r5, r6
   bc2e6:	00ad      	lsls	r5, r5, #2
   bc2e8:	e004      	b.n	bc2f4 <__gethex+0xd4>
   bc2ea:	2400      	movs	r4, #0
   bc2ec:	4625      	mov	r5, r4
   bc2ee:	e7e0      	b.n	bc2b2 <__gethex+0x92>
   bc2f0:	2d00      	cmp	r5, #0
   bc2f2:	d1f7      	bne.n	bc2e4 <__gethex+0xc4>
   bc2f4:	7833      	ldrb	r3, [r6, #0]
   bc2f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bc2fa:	2b50      	cmp	r3, #80	; 0x50
   bc2fc:	d13b      	bne.n	bc376 <__gethex+0x156>
   bc2fe:	7873      	ldrb	r3, [r6, #1]
   bc300:	2b2b      	cmp	r3, #43	; 0x2b
   bc302:	d02c      	beq.n	bc35e <__gethex+0x13e>
   bc304:	2b2d      	cmp	r3, #45	; 0x2d
   bc306:	d02e      	beq.n	bc366 <__gethex+0x146>
   bc308:	1c71      	adds	r1, r6, #1
   bc30a:	f04f 0900 	mov.w	r9, #0
   bc30e:	7808      	ldrb	r0, [r1, #0]
   bc310:	f7ff ff70 	bl	bc1f4 <__hexdig_fun>
   bc314:	1e43      	subs	r3, r0, #1
   bc316:	b2db      	uxtb	r3, r3
   bc318:	2b18      	cmp	r3, #24
   bc31a:	d82c      	bhi.n	bc376 <__gethex+0x156>
   bc31c:	f1a0 0210 	sub.w	r2, r0, #16
   bc320:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bc324:	f7ff ff66 	bl	bc1f4 <__hexdig_fun>
   bc328:	1e43      	subs	r3, r0, #1
   bc32a:	b2db      	uxtb	r3, r3
   bc32c:	2b18      	cmp	r3, #24
   bc32e:	d91d      	bls.n	bc36c <__gethex+0x14c>
   bc330:	f1b9 0f00 	cmp.w	r9, #0
   bc334:	d000      	beq.n	bc338 <__gethex+0x118>
   bc336:	4252      	negs	r2, r2
   bc338:	4415      	add	r5, r2
   bc33a:	f8cb 1000 	str.w	r1, [fp]
   bc33e:	b1e4      	cbz	r4, bc37a <__gethex+0x15a>
   bc340:	9b00      	ldr	r3, [sp, #0]
   bc342:	2b00      	cmp	r3, #0
   bc344:	bf14      	ite	ne
   bc346:	2700      	movne	r7, #0
   bc348:	2706      	moveq	r7, #6
   bc34a:	4638      	mov	r0, r7
   bc34c:	b009      	add	sp, #36	; 0x24
   bc34e:	ecbd 8b02 	vpop	{d8}
   bc352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc356:	463e      	mov	r6, r7
   bc358:	4625      	mov	r5, r4
   bc35a:	2401      	movs	r4, #1
   bc35c:	e7ca      	b.n	bc2f4 <__gethex+0xd4>
   bc35e:	f04f 0900 	mov.w	r9, #0
   bc362:	1cb1      	adds	r1, r6, #2
   bc364:	e7d3      	b.n	bc30e <__gethex+0xee>
   bc366:	f04f 0901 	mov.w	r9, #1
   bc36a:	e7fa      	b.n	bc362 <__gethex+0x142>
   bc36c:	230a      	movs	r3, #10
   bc36e:	fb03 0202 	mla	r2, r3, r2, r0
   bc372:	3a10      	subs	r2, #16
   bc374:	e7d4      	b.n	bc320 <__gethex+0x100>
   bc376:	4631      	mov	r1, r6
   bc378:	e7df      	b.n	bc33a <__gethex+0x11a>
   bc37a:	1bf3      	subs	r3, r6, r7
   bc37c:	3b01      	subs	r3, #1
   bc37e:	4621      	mov	r1, r4
   bc380:	2b07      	cmp	r3, #7
   bc382:	dc0b      	bgt.n	bc39c <__gethex+0x17c>
   bc384:	ee18 0a10 	vmov	r0, s16
   bc388:	f000 fa68 	bl	bc85c <_Balloc>
   bc38c:	4604      	mov	r4, r0
   bc38e:	b940      	cbnz	r0, bc3a2 <__gethex+0x182>
   bc390:	4b5d      	ldr	r3, [pc, #372]	; (bc508 <__gethex+0x2e8>)
   bc392:	4602      	mov	r2, r0
   bc394:	21de      	movs	r1, #222	; 0xde
   bc396:	485d      	ldr	r0, [pc, #372]	; (bc50c <__gethex+0x2ec>)
   bc398:	f7fb fb92 	bl	b7ac0 <__assert_func>
   bc39c:	3101      	adds	r1, #1
   bc39e:	105b      	asrs	r3, r3, #1
   bc3a0:	e7ee      	b.n	bc380 <__gethex+0x160>
   bc3a2:	f100 0914 	add.w	r9, r0, #20
   bc3a6:	f04f 0b00 	mov.w	fp, #0
   bc3aa:	f1ca 0301 	rsb	r3, sl, #1
   bc3ae:	f8cd 9008 	str.w	r9, [sp, #8]
   bc3b2:	f8cd b000 	str.w	fp, [sp]
   bc3b6:	9306      	str	r3, [sp, #24]
   bc3b8:	42b7      	cmp	r7, r6
   bc3ba:	d340      	bcc.n	bc43e <__gethex+0x21e>
   bc3bc:	9802      	ldr	r0, [sp, #8]
   bc3be:	9b00      	ldr	r3, [sp, #0]
   bc3c0:	f840 3b04 	str.w	r3, [r0], #4
   bc3c4:	eba0 0009 	sub.w	r0, r0, r9
   bc3c8:	1080      	asrs	r0, r0, #2
   bc3ca:	0146      	lsls	r6, r0, #5
   bc3cc:	6120      	str	r0, [r4, #16]
   bc3ce:	4618      	mov	r0, r3
   bc3d0:	f000 fb36 	bl	bca40 <__hi0bits>
   bc3d4:	1a30      	subs	r0, r6, r0
   bc3d6:	f8d8 6000 	ldr.w	r6, [r8]
   bc3da:	42b0      	cmp	r0, r6
   bc3dc:	dd63      	ble.n	bc4a6 <__gethex+0x286>
   bc3de:	1b87      	subs	r7, r0, r6
   bc3e0:	4639      	mov	r1, r7
   bc3e2:	4620      	mov	r0, r4
   bc3e4:	f000 feda 	bl	bd19c <__any_on>
   bc3e8:	4682      	mov	sl, r0
   bc3ea:	b1a8      	cbz	r0, bc418 <__gethex+0x1f8>
   bc3ec:	1e7b      	subs	r3, r7, #1
   bc3ee:	1159      	asrs	r1, r3, #5
   bc3f0:	f003 021f 	and.w	r2, r3, #31
   bc3f4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bc3f8:	f04f 0a01 	mov.w	sl, #1
   bc3fc:	fa0a f202 	lsl.w	r2, sl, r2
   bc400:	420a      	tst	r2, r1
   bc402:	d009      	beq.n	bc418 <__gethex+0x1f8>
   bc404:	4553      	cmp	r3, sl
   bc406:	dd05      	ble.n	bc414 <__gethex+0x1f4>
   bc408:	1eb9      	subs	r1, r7, #2
   bc40a:	4620      	mov	r0, r4
   bc40c:	f000 fec6 	bl	bd19c <__any_on>
   bc410:	2800      	cmp	r0, #0
   bc412:	d145      	bne.n	bc4a0 <__gethex+0x280>
   bc414:	f04f 0a02 	mov.w	sl, #2
   bc418:	4639      	mov	r1, r7
   bc41a:	4620      	mov	r0, r4
   bc41c:	f7ff fe98 	bl	bc150 <rshift>
   bc420:	443d      	add	r5, r7
   bc422:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bc426:	42ab      	cmp	r3, r5
   bc428:	da4c      	bge.n	bc4c4 <__gethex+0x2a4>
   bc42a:	ee18 0a10 	vmov	r0, s16
   bc42e:	4621      	mov	r1, r4
   bc430:	f000 fa54 	bl	bc8dc <_Bfree>
   bc434:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bc436:	2300      	movs	r3, #0
   bc438:	6013      	str	r3, [r2, #0]
   bc43a:	27a3      	movs	r7, #163	; 0xa3
   bc43c:	e785      	b.n	bc34a <__gethex+0x12a>
   bc43e:	1e73      	subs	r3, r6, #1
   bc440:	9a05      	ldr	r2, [sp, #20]
   bc442:	9303      	str	r3, [sp, #12]
   bc444:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bc448:	4293      	cmp	r3, r2
   bc44a:	d019      	beq.n	bc480 <__gethex+0x260>
   bc44c:	f1bb 0f20 	cmp.w	fp, #32
   bc450:	d107      	bne.n	bc462 <__gethex+0x242>
   bc452:	9b02      	ldr	r3, [sp, #8]
   bc454:	9a00      	ldr	r2, [sp, #0]
   bc456:	f843 2b04 	str.w	r2, [r3], #4
   bc45a:	9302      	str	r3, [sp, #8]
   bc45c:	2300      	movs	r3, #0
   bc45e:	9300      	str	r3, [sp, #0]
   bc460:	469b      	mov	fp, r3
   bc462:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bc466:	f7ff fec5 	bl	bc1f4 <__hexdig_fun>
   bc46a:	9b00      	ldr	r3, [sp, #0]
   bc46c:	f000 000f 	and.w	r0, r0, #15
   bc470:	fa00 f00b 	lsl.w	r0, r0, fp
   bc474:	4303      	orrs	r3, r0
   bc476:	9300      	str	r3, [sp, #0]
   bc478:	f10b 0b04 	add.w	fp, fp, #4
   bc47c:	9b03      	ldr	r3, [sp, #12]
   bc47e:	e00d      	b.n	bc49c <__gethex+0x27c>
   bc480:	9b03      	ldr	r3, [sp, #12]
   bc482:	9a06      	ldr	r2, [sp, #24]
   bc484:	4413      	add	r3, r2
   bc486:	42bb      	cmp	r3, r7
   bc488:	d3e0      	bcc.n	bc44c <__gethex+0x22c>
   bc48a:	4618      	mov	r0, r3
   bc48c:	9901      	ldr	r1, [sp, #4]
   bc48e:	9307      	str	r3, [sp, #28]
   bc490:	4652      	mov	r2, sl
   bc492:	f7fe feb9 	bl	bb208 <strncmp>
   bc496:	9b07      	ldr	r3, [sp, #28]
   bc498:	2800      	cmp	r0, #0
   bc49a:	d1d7      	bne.n	bc44c <__gethex+0x22c>
   bc49c:	461e      	mov	r6, r3
   bc49e:	e78b      	b.n	bc3b8 <__gethex+0x198>
   bc4a0:	f04f 0a03 	mov.w	sl, #3
   bc4a4:	e7b8      	b.n	bc418 <__gethex+0x1f8>
   bc4a6:	da0a      	bge.n	bc4be <__gethex+0x29e>
   bc4a8:	1a37      	subs	r7, r6, r0
   bc4aa:	4621      	mov	r1, r4
   bc4ac:	ee18 0a10 	vmov	r0, s16
   bc4b0:	463a      	mov	r2, r7
   bc4b2:	f000 fc2f 	bl	bcd14 <__lshift>
   bc4b6:	1bed      	subs	r5, r5, r7
   bc4b8:	4604      	mov	r4, r0
   bc4ba:	f100 0914 	add.w	r9, r0, #20
   bc4be:	f04f 0a00 	mov.w	sl, #0
   bc4c2:	e7ae      	b.n	bc422 <__gethex+0x202>
   bc4c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bc4c8:	42a8      	cmp	r0, r5
   bc4ca:	dd72      	ble.n	bc5b2 <__gethex+0x392>
   bc4cc:	1b45      	subs	r5, r0, r5
   bc4ce:	42ae      	cmp	r6, r5
   bc4d0:	dc36      	bgt.n	bc540 <__gethex+0x320>
   bc4d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bc4d6:	2b02      	cmp	r3, #2
   bc4d8:	d02a      	beq.n	bc530 <__gethex+0x310>
   bc4da:	2b03      	cmp	r3, #3
   bc4dc:	d02c      	beq.n	bc538 <__gethex+0x318>
   bc4de:	2b01      	cmp	r3, #1
   bc4e0:	d11c      	bne.n	bc51c <__gethex+0x2fc>
   bc4e2:	42ae      	cmp	r6, r5
   bc4e4:	d11a      	bne.n	bc51c <__gethex+0x2fc>
   bc4e6:	2e01      	cmp	r6, #1
   bc4e8:	d112      	bne.n	bc510 <__gethex+0x2f0>
   bc4ea:	9a04      	ldr	r2, [sp, #16]
   bc4ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bc4f0:	6013      	str	r3, [r2, #0]
   bc4f2:	2301      	movs	r3, #1
   bc4f4:	6123      	str	r3, [r4, #16]
   bc4f6:	f8c9 3000 	str.w	r3, [r9]
   bc4fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bc4fc:	2762      	movs	r7, #98	; 0x62
   bc4fe:	601c      	str	r4, [r3, #0]
   bc500:	e723      	b.n	bc34a <__gethex+0x12a>
   bc502:	bf00      	nop
   bc504:	000bde34 	.word	0x000bde34
   bc508:	000bddc1 	.word	0x000bddc1
   bc50c:	000bddd2 	.word	0x000bddd2
   bc510:	1e71      	subs	r1, r6, #1
   bc512:	4620      	mov	r0, r4
   bc514:	f000 fe42 	bl	bd19c <__any_on>
   bc518:	2800      	cmp	r0, #0
   bc51a:	d1e6      	bne.n	bc4ea <__gethex+0x2ca>
   bc51c:	ee18 0a10 	vmov	r0, s16
   bc520:	4621      	mov	r1, r4
   bc522:	f000 f9db 	bl	bc8dc <_Bfree>
   bc526:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bc528:	2300      	movs	r3, #0
   bc52a:	6013      	str	r3, [r2, #0]
   bc52c:	2750      	movs	r7, #80	; 0x50
   bc52e:	e70c      	b.n	bc34a <__gethex+0x12a>
   bc530:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc532:	2b00      	cmp	r3, #0
   bc534:	d1f2      	bne.n	bc51c <__gethex+0x2fc>
   bc536:	e7d8      	b.n	bc4ea <__gethex+0x2ca>
   bc538:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc53a:	2b00      	cmp	r3, #0
   bc53c:	d1d5      	bne.n	bc4ea <__gethex+0x2ca>
   bc53e:	e7ed      	b.n	bc51c <__gethex+0x2fc>
   bc540:	1e6f      	subs	r7, r5, #1
   bc542:	f1ba 0f00 	cmp.w	sl, #0
   bc546:	d131      	bne.n	bc5ac <__gethex+0x38c>
   bc548:	b127      	cbz	r7, bc554 <__gethex+0x334>
   bc54a:	4639      	mov	r1, r7
   bc54c:	4620      	mov	r0, r4
   bc54e:	f000 fe25 	bl	bd19c <__any_on>
   bc552:	4682      	mov	sl, r0
   bc554:	117b      	asrs	r3, r7, #5
   bc556:	2101      	movs	r1, #1
   bc558:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bc55c:	f007 071f 	and.w	r7, r7, #31
   bc560:	fa01 f707 	lsl.w	r7, r1, r7
   bc564:	421f      	tst	r7, r3
   bc566:	4629      	mov	r1, r5
   bc568:	4620      	mov	r0, r4
   bc56a:	bf18      	it	ne
   bc56c:	f04a 0a02 	orrne.w	sl, sl, #2
   bc570:	1b76      	subs	r6, r6, r5
   bc572:	f7ff fded 	bl	bc150 <rshift>
   bc576:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bc57a:	2702      	movs	r7, #2
   bc57c:	f1ba 0f00 	cmp.w	sl, #0
   bc580:	d048      	beq.n	bc614 <__gethex+0x3f4>
   bc582:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bc586:	2b02      	cmp	r3, #2
   bc588:	d015      	beq.n	bc5b6 <__gethex+0x396>
   bc58a:	2b03      	cmp	r3, #3
   bc58c:	d017      	beq.n	bc5be <__gethex+0x39e>
   bc58e:	2b01      	cmp	r3, #1
   bc590:	d109      	bne.n	bc5a6 <__gethex+0x386>
   bc592:	f01a 0f02 	tst.w	sl, #2
   bc596:	d006      	beq.n	bc5a6 <__gethex+0x386>
   bc598:	f8d9 0000 	ldr.w	r0, [r9]
   bc59c:	ea4a 0a00 	orr.w	sl, sl, r0
   bc5a0:	f01a 0f01 	tst.w	sl, #1
   bc5a4:	d10e      	bne.n	bc5c4 <__gethex+0x3a4>
   bc5a6:	f047 0710 	orr.w	r7, r7, #16
   bc5aa:	e033      	b.n	bc614 <__gethex+0x3f4>
   bc5ac:	f04f 0a01 	mov.w	sl, #1
   bc5b0:	e7d0      	b.n	bc554 <__gethex+0x334>
   bc5b2:	2701      	movs	r7, #1
   bc5b4:	e7e2      	b.n	bc57c <__gethex+0x35c>
   bc5b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc5b8:	f1c3 0301 	rsb	r3, r3, #1
   bc5bc:	9315      	str	r3, [sp, #84]	; 0x54
   bc5be:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc5c0:	2b00      	cmp	r3, #0
   bc5c2:	d0f0      	beq.n	bc5a6 <__gethex+0x386>
   bc5c4:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bc5c8:	f104 0314 	add.w	r3, r4, #20
   bc5cc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bc5d0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bc5d4:	f04f 0c00 	mov.w	ip, #0
   bc5d8:	4618      	mov	r0, r3
   bc5da:	f853 2b04 	ldr.w	r2, [r3], #4
   bc5de:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bc5e2:	d01c      	beq.n	bc61e <__gethex+0x3fe>
   bc5e4:	3201      	adds	r2, #1
   bc5e6:	6002      	str	r2, [r0, #0]
   bc5e8:	2f02      	cmp	r7, #2
   bc5ea:	f104 0314 	add.w	r3, r4, #20
   bc5ee:	d13f      	bne.n	bc670 <__gethex+0x450>
   bc5f0:	f8d8 2000 	ldr.w	r2, [r8]
   bc5f4:	3a01      	subs	r2, #1
   bc5f6:	42b2      	cmp	r2, r6
   bc5f8:	d10a      	bne.n	bc610 <__gethex+0x3f0>
   bc5fa:	1171      	asrs	r1, r6, #5
   bc5fc:	2201      	movs	r2, #1
   bc5fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bc602:	f006 061f 	and.w	r6, r6, #31
   bc606:	fa02 f606 	lsl.w	r6, r2, r6
   bc60a:	421e      	tst	r6, r3
   bc60c:	bf18      	it	ne
   bc60e:	4617      	movne	r7, r2
   bc610:	f047 0720 	orr.w	r7, r7, #32
   bc614:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bc616:	601c      	str	r4, [r3, #0]
   bc618:	9b04      	ldr	r3, [sp, #16]
   bc61a:	601d      	str	r5, [r3, #0]
   bc61c:	e695      	b.n	bc34a <__gethex+0x12a>
   bc61e:	4299      	cmp	r1, r3
   bc620:	f843 cc04 	str.w	ip, [r3, #-4]
   bc624:	d8d8      	bhi.n	bc5d8 <__gethex+0x3b8>
   bc626:	68a3      	ldr	r3, [r4, #8]
   bc628:	459b      	cmp	fp, r3
   bc62a:	db19      	blt.n	bc660 <__gethex+0x440>
   bc62c:	6861      	ldr	r1, [r4, #4]
   bc62e:	ee18 0a10 	vmov	r0, s16
   bc632:	3101      	adds	r1, #1
   bc634:	f000 f912 	bl	bc85c <_Balloc>
   bc638:	4681      	mov	r9, r0
   bc63a:	b918      	cbnz	r0, bc644 <__gethex+0x424>
   bc63c:	4b1a      	ldr	r3, [pc, #104]	; (bc6a8 <__gethex+0x488>)
   bc63e:	4602      	mov	r2, r0
   bc640:	2184      	movs	r1, #132	; 0x84
   bc642:	e6a8      	b.n	bc396 <__gethex+0x176>
   bc644:	6922      	ldr	r2, [r4, #16]
   bc646:	3202      	adds	r2, #2
   bc648:	f104 010c 	add.w	r1, r4, #12
   bc64c:	0092      	lsls	r2, r2, #2
   bc64e:	300c      	adds	r0, #12
   bc650:	f7fe fd62 	bl	bb118 <memcpy>
   bc654:	4621      	mov	r1, r4
   bc656:	ee18 0a10 	vmov	r0, s16
   bc65a:	f000 f93f 	bl	bc8dc <_Bfree>
   bc65e:	464c      	mov	r4, r9
   bc660:	6923      	ldr	r3, [r4, #16]
   bc662:	1c5a      	adds	r2, r3, #1
   bc664:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bc668:	6122      	str	r2, [r4, #16]
   bc66a:	2201      	movs	r2, #1
   bc66c:	615a      	str	r2, [r3, #20]
   bc66e:	e7bb      	b.n	bc5e8 <__gethex+0x3c8>
   bc670:	6922      	ldr	r2, [r4, #16]
   bc672:	455a      	cmp	r2, fp
   bc674:	dd0b      	ble.n	bc68e <__gethex+0x46e>
   bc676:	2101      	movs	r1, #1
   bc678:	4620      	mov	r0, r4
   bc67a:	f7ff fd69 	bl	bc150 <rshift>
   bc67e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bc682:	3501      	adds	r5, #1
   bc684:	42ab      	cmp	r3, r5
   bc686:	f6ff aed0 	blt.w	bc42a <__gethex+0x20a>
   bc68a:	2701      	movs	r7, #1
   bc68c:	e7c0      	b.n	bc610 <__gethex+0x3f0>
   bc68e:	f016 061f 	ands.w	r6, r6, #31
   bc692:	d0fa      	beq.n	bc68a <__gethex+0x46a>
   bc694:	4453      	add	r3, sl
   bc696:	f1c6 0620 	rsb	r6, r6, #32
   bc69a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bc69e:	f000 f9cf 	bl	bca40 <__hi0bits>
   bc6a2:	42b0      	cmp	r0, r6
   bc6a4:	dbe7      	blt.n	bc676 <__gethex+0x456>
   bc6a6:	e7f0      	b.n	bc68a <__gethex+0x46a>
   bc6a8:	000bddc1 	.word	0x000bddc1

000bc6ac <L_shift>:
   bc6ac:	f1c2 0208 	rsb	r2, r2, #8
   bc6b0:	0092      	lsls	r2, r2, #2
   bc6b2:	b570      	push	{r4, r5, r6, lr}
   bc6b4:	f1c2 0620 	rsb	r6, r2, #32
   bc6b8:	6843      	ldr	r3, [r0, #4]
   bc6ba:	6804      	ldr	r4, [r0, #0]
   bc6bc:	fa03 f506 	lsl.w	r5, r3, r6
   bc6c0:	432c      	orrs	r4, r5
   bc6c2:	40d3      	lsrs	r3, r2
   bc6c4:	6004      	str	r4, [r0, #0]
   bc6c6:	f840 3f04 	str.w	r3, [r0, #4]!
   bc6ca:	4288      	cmp	r0, r1
   bc6cc:	d3f4      	bcc.n	bc6b8 <L_shift+0xc>
   bc6ce:	bd70      	pop	{r4, r5, r6, pc}

000bc6d0 <__match>:
   bc6d0:	b530      	push	{r4, r5, lr}
   bc6d2:	6803      	ldr	r3, [r0, #0]
   bc6d4:	3301      	adds	r3, #1
   bc6d6:	f811 4b01 	ldrb.w	r4, [r1], #1
   bc6da:	b914      	cbnz	r4, bc6e2 <__match+0x12>
   bc6dc:	6003      	str	r3, [r0, #0]
   bc6de:	2001      	movs	r0, #1
   bc6e0:	bd30      	pop	{r4, r5, pc}
   bc6e2:	f813 2b01 	ldrb.w	r2, [r3], #1
   bc6e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bc6ea:	2d19      	cmp	r5, #25
   bc6ec:	bf98      	it	ls
   bc6ee:	3220      	addls	r2, #32
   bc6f0:	42a2      	cmp	r2, r4
   bc6f2:	d0f0      	beq.n	bc6d6 <__match+0x6>
   bc6f4:	2000      	movs	r0, #0
   bc6f6:	e7f3      	b.n	bc6e0 <__match+0x10>

000bc6f8 <__hexnan>:
   bc6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc6fc:	680b      	ldr	r3, [r1, #0]
   bc6fe:	115e      	asrs	r6, r3, #5
   bc700:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bc704:	f013 031f 	ands.w	r3, r3, #31
   bc708:	b087      	sub	sp, #28
   bc70a:	bf18      	it	ne
   bc70c:	3604      	addne	r6, #4
   bc70e:	2500      	movs	r5, #0
   bc710:	1f37      	subs	r7, r6, #4
   bc712:	4690      	mov	r8, r2
   bc714:	6802      	ldr	r2, [r0, #0]
   bc716:	9301      	str	r3, [sp, #4]
   bc718:	4682      	mov	sl, r0
   bc71a:	f846 5c04 	str.w	r5, [r6, #-4]
   bc71e:	46b9      	mov	r9, r7
   bc720:	463c      	mov	r4, r7
   bc722:	9502      	str	r5, [sp, #8]
   bc724:	46ab      	mov	fp, r5
   bc726:	7851      	ldrb	r1, [r2, #1]
   bc728:	1c53      	adds	r3, r2, #1
   bc72a:	9303      	str	r3, [sp, #12]
   bc72c:	b341      	cbz	r1, bc780 <__hexnan+0x88>
   bc72e:	4608      	mov	r0, r1
   bc730:	9205      	str	r2, [sp, #20]
   bc732:	9104      	str	r1, [sp, #16]
   bc734:	f7ff fd5e 	bl	bc1f4 <__hexdig_fun>
   bc738:	2800      	cmp	r0, #0
   bc73a:	d14f      	bne.n	bc7dc <__hexnan+0xe4>
   bc73c:	9904      	ldr	r1, [sp, #16]
   bc73e:	9a05      	ldr	r2, [sp, #20]
   bc740:	2920      	cmp	r1, #32
   bc742:	d818      	bhi.n	bc776 <__hexnan+0x7e>
   bc744:	9b02      	ldr	r3, [sp, #8]
   bc746:	459b      	cmp	fp, r3
   bc748:	dd13      	ble.n	bc772 <__hexnan+0x7a>
   bc74a:	454c      	cmp	r4, r9
   bc74c:	d206      	bcs.n	bc75c <__hexnan+0x64>
   bc74e:	2d07      	cmp	r5, #7
   bc750:	dc04      	bgt.n	bc75c <__hexnan+0x64>
   bc752:	462a      	mov	r2, r5
   bc754:	4649      	mov	r1, r9
   bc756:	4620      	mov	r0, r4
   bc758:	f7ff ffa8 	bl	bc6ac <L_shift>
   bc75c:	4544      	cmp	r4, r8
   bc75e:	d950      	bls.n	bc802 <__hexnan+0x10a>
   bc760:	2300      	movs	r3, #0
   bc762:	f1a4 0904 	sub.w	r9, r4, #4
   bc766:	f844 3c04 	str.w	r3, [r4, #-4]
   bc76a:	f8cd b008 	str.w	fp, [sp, #8]
   bc76e:	464c      	mov	r4, r9
   bc770:	461d      	mov	r5, r3
   bc772:	9a03      	ldr	r2, [sp, #12]
   bc774:	e7d7      	b.n	bc726 <__hexnan+0x2e>
   bc776:	2929      	cmp	r1, #41	; 0x29
   bc778:	d156      	bne.n	bc828 <__hexnan+0x130>
   bc77a:	3202      	adds	r2, #2
   bc77c:	f8ca 2000 	str.w	r2, [sl]
   bc780:	f1bb 0f00 	cmp.w	fp, #0
   bc784:	d050      	beq.n	bc828 <__hexnan+0x130>
   bc786:	454c      	cmp	r4, r9
   bc788:	d206      	bcs.n	bc798 <__hexnan+0xa0>
   bc78a:	2d07      	cmp	r5, #7
   bc78c:	dc04      	bgt.n	bc798 <__hexnan+0xa0>
   bc78e:	462a      	mov	r2, r5
   bc790:	4649      	mov	r1, r9
   bc792:	4620      	mov	r0, r4
   bc794:	f7ff ff8a 	bl	bc6ac <L_shift>
   bc798:	4544      	cmp	r4, r8
   bc79a:	d934      	bls.n	bc806 <__hexnan+0x10e>
   bc79c:	f1a8 0204 	sub.w	r2, r8, #4
   bc7a0:	4623      	mov	r3, r4
   bc7a2:	f853 1b04 	ldr.w	r1, [r3], #4
   bc7a6:	f842 1f04 	str.w	r1, [r2, #4]!
   bc7aa:	429f      	cmp	r7, r3
   bc7ac:	d2f9      	bcs.n	bc7a2 <__hexnan+0xaa>
   bc7ae:	1b3b      	subs	r3, r7, r4
   bc7b0:	f023 0303 	bic.w	r3, r3, #3
   bc7b4:	3304      	adds	r3, #4
   bc7b6:	3401      	adds	r4, #1
   bc7b8:	3e03      	subs	r6, #3
   bc7ba:	42b4      	cmp	r4, r6
   bc7bc:	bf88      	it	hi
   bc7be:	2304      	movhi	r3, #4
   bc7c0:	4443      	add	r3, r8
   bc7c2:	2200      	movs	r2, #0
   bc7c4:	f843 2b04 	str.w	r2, [r3], #4
   bc7c8:	429f      	cmp	r7, r3
   bc7ca:	d2fb      	bcs.n	bc7c4 <__hexnan+0xcc>
   bc7cc:	683b      	ldr	r3, [r7, #0]
   bc7ce:	b91b      	cbnz	r3, bc7d8 <__hexnan+0xe0>
   bc7d0:	4547      	cmp	r7, r8
   bc7d2:	d127      	bne.n	bc824 <__hexnan+0x12c>
   bc7d4:	2301      	movs	r3, #1
   bc7d6:	603b      	str	r3, [r7, #0]
   bc7d8:	2005      	movs	r0, #5
   bc7da:	e026      	b.n	bc82a <__hexnan+0x132>
   bc7dc:	3501      	adds	r5, #1
   bc7de:	2d08      	cmp	r5, #8
   bc7e0:	f10b 0b01 	add.w	fp, fp, #1
   bc7e4:	dd06      	ble.n	bc7f4 <__hexnan+0xfc>
   bc7e6:	4544      	cmp	r4, r8
   bc7e8:	d9c3      	bls.n	bc772 <__hexnan+0x7a>
   bc7ea:	2300      	movs	r3, #0
   bc7ec:	f844 3c04 	str.w	r3, [r4, #-4]
   bc7f0:	2501      	movs	r5, #1
   bc7f2:	3c04      	subs	r4, #4
   bc7f4:	6822      	ldr	r2, [r4, #0]
   bc7f6:	f000 000f 	and.w	r0, r0, #15
   bc7fa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bc7fe:	6022      	str	r2, [r4, #0]
   bc800:	e7b7      	b.n	bc772 <__hexnan+0x7a>
   bc802:	2508      	movs	r5, #8
   bc804:	e7b5      	b.n	bc772 <__hexnan+0x7a>
   bc806:	9b01      	ldr	r3, [sp, #4]
   bc808:	2b00      	cmp	r3, #0
   bc80a:	d0df      	beq.n	bc7cc <__hexnan+0xd4>
   bc80c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc810:	f1c3 0320 	rsb	r3, r3, #32
   bc814:	fa22 f303 	lsr.w	r3, r2, r3
   bc818:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bc81c:	401a      	ands	r2, r3
   bc81e:	f846 2c04 	str.w	r2, [r6, #-4]
   bc822:	e7d3      	b.n	bc7cc <__hexnan+0xd4>
   bc824:	3f04      	subs	r7, #4
   bc826:	e7d1      	b.n	bc7cc <__hexnan+0xd4>
   bc828:	2004      	movs	r0, #4
   bc82a:	b007      	add	sp, #28
   bc82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bc830 <__retarget_lock_acquire_recursive>:
   bc830:	4770      	bx	lr

000bc832 <__retarget_lock_release>:
   bc832:	4770      	bx	lr

000bc834 <__retarget_lock_release_recursive>:
   bc834:	4770      	bx	lr

000bc836 <__ascii_mbtowc>:
   bc836:	b082      	sub	sp, #8
   bc838:	b901      	cbnz	r1, bc83c <__ascii_mbtowc+0x6>
   bc83a:	a901      	add	r1, sp, #4
   bc83c:	b142      	cbz	r2, bc850 <__ascii_mbtowc+0x1a>
   bc83e:	b14b      	cbz	r3, bc854 <__ascii_mbtowc+0x1e>
   bc840:	7813      	ldrb	r3, [r2, #0]
   bc842:	600b      	str	r3, [r1, #0]
   bc844:	7812      	ldrb	r2, [r2, #0]
   bc846:	1e10      	subs	r0, r2, #0
   bc848:	bf18      	it	ne
   bc84a:	2001      	movne	r0, #1
   bc84c:	b002      	add	sp, #8
   bc84e:	4770      	bx	lr
   bc850:	4610      	mov	r0, r2
   bc852:	e7fb      	b.n	bc84c <__ascii_mbtowc+0x16>
   bc854:	f06f 0001 	mvn.w	r0, #1
   bc858:	e7f8      	b.n	bc84c <__ascii_mbtowc+0x16>
	...

000bc85c <_Balloc>:
   bc85c:	b570      	push	{r4, r5, r6, lr}
   bc85e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bc860:	4604      	mov	r4, r0
   bc862:	460d      	mov	r5, r1
   bc864:	b976      	cbnz	r6, bc884 <_Balloc+0x28>
   bc866:	2010      	movs	r0, #16
   bc868:	f7fb f8ea 	bl	b7a40 <malloc>
   bc86c:	4602      	mov	r2, r0
   bc86e:	6260      	str	r0, [r4, #36]	; 0x24
   bc870:	b920      	cbnz	r0, bc87c <_Balloc+0x20>
   bc872:	4b18      	ldr	r3, [pc, #96]	; (bc8d4 <_Balloc+0x78>)
   bc874:	4818      	ldr	r0, [pc, #96]	; (bc8d8 <_Balloc+0x7c>)
   bc876:	2166      	movs	r1, #102	; 0x66
   bc878:	f7fb f922 	bl	b7ac0 <__assert_func>
   bc87c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bc880:	6006      	str	r6, [r0, #0]
   bc882:	60c6      	str	r6, [r0, #12]
   bc884:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bc886:	68f3      	ldr	r3, [r6, #12]
   bc888:	b183      	cbz	r3, bc8ac <_Balloc+0x50>
   bc88a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bc88c:	68db      	ldr	r3, [r3, #12]
   bc88e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bc892:	b9b8      	cbnz	r0, bc8c4 <_Balloc+0x68>
   bc894:	2101      	movs	r1, #1
   bc896:	fa01 f605 	lsl.w	r6, r1, r5
   bc89a:	1d72      	adds	r2, r6, #5
   bc89c:	0092      	lsls	r2, r2, #2
   bc89e:	4620      	mov	r0, r4
   bc8a0:	f000 fc9d 	bl	bd1de <_calloc_r>
   bc8a4:	b160      	cbz	r0, bc8c0 <_Balloc+0x64>
   bc8a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bc8aa:	e00e      	b.n	bc8ca <_Balloc+0x6e>
   bc8ac:	2221      	movs	r2, #33	; 0x21
   bc8ae:	2104      	movs	r1, #4
   bc8b0:	4620      	mov	r0, r4
   bc8b2:	f000 fc94 	bl	bd1de <_calloc_r>
   bc8b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bc8b8:	60f0      	str	r0, [r6, #12]
   bc8ba:	68db      	ldr	r3, [r3, #12]
   bc8bc:	2b00      	cmp	r3, #0
   bc8be:	d1e4      	bne.n	bc88a <_Balloc+0x2e>
   bc8c0:	2000      	movs	r0, #0
   bc8c2:	bd70      	pop	{r4, r5, r6, pc}
   bc8c4:	6802      	ldr	r2, [r0, #0]
   bc8c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bc8ca:	2300      	movs	r3, #0
   bc8cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bc8d0:	e7f7      	b.n	bc8c2 <_Balloc+0x66>
   bc8d2:	bf00      	nop
   bc8d4:	000bdbf1 	.word	0x000bdbf1
   bc8d8:	000bde48 	.word	0x000bde48

000bc8dc <_Bfree>:
   bc8dc:	b570      	push	{r4, r5, r6, lr}
   bc8de:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bc8e0:	4605      	mov	r5, r0
   bc8e2:	460c      	mov	r4, r1
   bc8e4:	b976      	cbnz	r6, bc904 <_Bfree+0x28>
   bc8e6:	2010      	movs	r0, #16
   bc8e8:	f7fb f8aa 	bl	b7a40 <malloc>
   bc8ec:	4602      	mov	r2, r0
   bc8ee:	6268      	str	r0, [r5, #36]	; 0x24
   bc8f0:	b920      	cbnz	r0, bc8fc <_Bfree+0x20>
   bc8f2:	4b09      	ldr	r3, [pc, #36]	; (bc918 <_Bfree+0x3c>)
   bc8f4:	4809      	ldr	r0, [pc, #36]	; (bc91c <_Bfree+0x40>)
   bc8f6:	218a      	movs	r1, #138	; 0x8a
   bc8f8:	f7fb f8e2 	bl	b7ac0 <__assert_func>
   bc8fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bc900:	6006      	str	r6, [r0, #0]
   bc902:	60c6      	str	r6, [r0, #12]
   bc904:	b13c      	cbz	r4, bc916 <_Bfree+0x3a>
   bc906:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bc908:	6862      	ldr	r2, [r4, #4]
   bc90a:	68db      	ldr	r3, [r3, #12]
   bc90c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bc910:	6021      	str	r1, [r4, #0]
   bc912:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bc916:	bd70      	pop	{r4, r5, r6, pc}
   bc918:	000bdbf1 	.word	0x000bdbf1
   bc91c:	000bde48 	.word	0x000bde48

000bc920 <__multadd>:
   bc920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc924:	690d      	ldr	r5, [r1, #16]
   bc926:	4607      	mov	r7, r0
   bc928:	460c      	mov	r4, r1
   bc92a:	461e      	mov	r6, r3
   bc92c:	f101 0c14 	add.w	ip, r1, #20
   bc930:	2000      	movs	r0, #0
   bc932:	f8dc 3000 	ldr.w	r3, [ip]
   bc936:	b299      	uxth	r1, r3
   bc938:	fb02 6101 	mla	r1, r2, r1, r6
   bc93c:	0c1e      	lsrs	r6, r3, #16
   bc93e:	0c0b      	lsrs	r3, r1, #16
   bc940:	fb02 3306 	mla	r3, r2, r6, r3
   bc944:	b289      	uxth	r1, r1
   bc946:	3001      	adds	r0, #1
   bc948:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bc94c:	4285      	cmp	r5, r0
   bc94e:	f84c 1b04 	str.w	r1, [ip], #4
   bc952:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bc956:	dcec      	bgt.n	bc932 <__multadd+0x12>
   bc958:	b30e      	cbz	r6, bc99e <__multadd+0x7e>
   bc95a:	68a3      	ldr	r3, [r4, #8]
   bc95c:	42ab      	cmp	r3, r5
   bc95e:	dc19      	bgt.n	bc994 <__multadd+0x74>
   bc960:	6861      	ldr	r1, [r4, #4]
   bc962:	4638      	mov	r0, r7
   bc964:	3101      	adds	r1, #1
   bc966:	f7ff ff79 	bl	bc85c <_Balloc>
   bc96a:	4680      	mov	r8, r0
   bc96c:	b928      	cbnz	r0, bc97a <__multadd+0x5a>
   bc96e:	4602      	mov	r2, r0
   bc970:	4b0c      	ldr	r3, [pc, #48]	; (bc9a4 <__multadd+0x84>)
   bc972:	480d      	ldr	r0, [pc, #52]	; (bc9a8 <__multadd+0x88>)
   bc974:	21b5      	movs	r1, #181	; 0xb5
   bc976:	f7fb f8a3 	bl	b7ac0 <__assert_func>
   bc97a:	6922      	ldr	r2, [r4, #16]
   bc97c:	3202      	adds	r2, #2
   bc97e:	f104 010c 	add.w	r1, r4, #12
   bc982:	0092      	lsls	r2, r2, #2
   bc984:	300c      	adds	r0, #12
   bc986:	f7fe fbc7 	bl	bb118 <memcpy>
   bc98a:	4621      	mov	r1, r4
   bc98c:	4638      	mov	r0, r7
   bc98e:	f7ff ffa5 	bl	bc8dc <_Bfree>
   bc992:	4644      	mov	r4, r8
   bc994:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bc998:	3501      	adds	r5, #1
   bc99a:	615e      	str	r6, [r3, #20]
   bc99c:	6125      	str	r5, [r4, #16]
   bc99e:	4620      	mov	r0, r4
   bc9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc9a4:	000bddc1 	.word	0x000bddc1
   bc9a8:	000bde48 	.word	0x000bde48

000bc9ac <__s2b>:
   bc9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc9b0:	460c      	mov	r4, r1
   bc9b2:	4615      	mov	r5, r2
   bc9b4:	461f      	mov	r7, r3
   bc9b6:	2209      	movs	r2, #9
   bc9b8:	3308      	adds	r3, #8
   bc9ba:	4606      	mov	r6, r0
   bc9bc:	fb93 f3f2 	sdiv	r3, r3, r2
   bc9c0:	2100      	movs	r1, #0
   bc9c2:	2201      	movs	r2, #1
   bc9c4:	429a      	cmp	r2, r3
   bc9c6:	db09      	blt.n	bc9dc <__s2b+0x30>
   bc9c8:	4630      	mov	r0, r6
   bc9ca:	f7ff ff47 	bl	bc85c <_Balloc>
   bc9ce:	b940      	cbnz	r0, bc9e2 <__s2b+0x36>
   bc9d0:	4602      	mov	r2, r0
   bc9d2:	4b19      	ldr	r3, [pc, #100]	; (bca38 <__s2b+0x8c>)
   bc9d4:	4819      	ldr	r0, [pc, #100]	; (bca3c <__s2b+0x90>)
   bc9d6:	21ce      	movs	r1, #206	; 0xce
   bc9d8:	f7fb f872 	bl	b7ac0 <__assert_func>
   bc9dc:	0052      	lsls	r2, r2, #1
   bc9de:	3101      	adds	r1, #1
   bc9e0:	e7f0      	b.n	bc9c4 <__s2b+0x18>
   bc9e2:	9b08      	ldr	r3, [sp, #32]
   bc9e4:	6143      	str	r3, [r0, #20]
   bc9e6:	2d09      	cmp	r5, #9
   bc9e8:	f04f 0301 	mov.w	r3, #1
   bc9ec:	6103      	str	r3, [r0, #16]
   bc9ee:	dd16      	ble.n	bca1e <__s2b+0x72>
   bc9f0:	f104 0909 	add.w	r9, r4, #9
   bc9f4:	46c8      	mov	r8, r9
   bc9f6:	442c      	add	r4, r5
   bc9f8:	f818 3b01 	ldrb.w	r3, [r8], #1
   bc9fc:	4601      	mov	r1, r0
   bc9fe:	3b30      	subs	r3, #48	; 0x30
   bca00:	220a      	movs	r2, #10
   bca02:	4630      	mov	r0, r6
   bca04:	f7ff ff8c 	bl	bc920 <__multadd>
   bca08:	45a0      	cmp	r8, r4
   bca0a:	d1f5      	bne.n	bc9f8 <__s2b+0x4c>
   bca0c:	f1a5 0408 	sub.w	r4, r5, #8
   bca10:	444c      	add	r4, r9
   bca12:	1b2d      	subs	r5, r5, r4
   bca14:	1963      	adds	r3, r4, r5
   bca16:	42bb      	cmp	r3, r7
   bca18:	db04      	blt.n	bca24 <__s2b+0x78>
   bca1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bca1e:	340a      	adds	r4, #10
   bca20:	2509      	movs	r5, #9
   bca22:	e7f6      	b.n	bca12 <__s2b+0x66>
   bca24:	f814 3b01 	ldrb.w	r3, [r4], #1
   bca28:	4601      	mov	r1, r0
   bca2a:	3b30      	subs	r3, #48	; 0x30
   bca2c:	220a      	movs	r2, #10
   bca2e:	4630      	mov	r0, r6
   bca30:	f7ff ff76 	bl	bc920 <__multadd>
   bca34:	e7ee      	b.n	bca14 <__s2b+0x68>
   bca36:	bf00      	nop
   bca38:	000bddc1 	.word	0x000bddc1
   bca3c:	000bde48 	.word	0x000bde48

000bca40 <__hi0bits>:
   bca40:	0c03      	lsrs	r3, r0, #16
   bca42:	041b      	lsls	r3, r3, #16
   bca44:	b9d3      	cbnz	r3, bca7c <__hi0bits+0x3c>
   bca46:	0400      	lsls	r0, r0, #16
   bca48:	2310      	movs	r3, #16
   bca4a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bca4e:	bf04      	itt	eq
   bca50:	0200      	lsleq	r0, r0, #8
   bca52:	3308      	addeq	r3, #8
   bca54:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bca58:	bf04      	itt	eq
   bca5a:	0100      	lsleq	r0, r0, #4
   bca5c:	3304      	addeq	r3, #4
   bca5e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bca62:	bf04      	itt	eq
   bca64:	0080      	lsleq	r0, r0, #2
   bca66:	3302      	addeq	r3, #2
   bca68:	2800      	cmp	r0, #0
   bca6a:	db05      	blt.n	bca78 <__hi0bits+0x38>
   bca6c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bca70:	f103 0301 	add.w	r3, r3, #1
   bca74:	bf08      	it	eq
   bca76:	2320      	moveq	r3, #32
   bca78:	4618      	mov	r0, r3
   bca7a:	4770      	bx	lr
   bca7c:	2300      	movs	r3, #0
   bca7e:	e7e4      	b.n	bca4a <__hi0bits+0xa>

000bca80 <__lo0bits>:
   bca80:	6803      	ldr	r3, [r0, #0]
   bca82:	f013 0207 	ands.w	r2, r3, #7
   bca86:	4601      	mov	r1, r0
   bca88:	d00b      	beq.n	bcaa2 <__lo0bits+0x22>
   bca8a:	07da      	lsls	r2, r3, #31
   bca8c:	d423      	bmi.n	bcad6 <__lo0bits+0x56>
   bca8e:	0798      	lsls	r0, r3, #30
   bca90:	bf49      	itett	mi
   bca92:	085b      	lsrmi	r3, r3, #1
   bca94:	089b      	lsrpl	r3, r3, #2
   bca96:	2001      	movmi	r0, #1
   bca98:	600b      	strmi	r3, [r1, #0]
   bca9a:	bf5c      	itt	pl
   bca9c:	600b      	strpl	r3, [r1, #0]
   bca9e:	2002      	movpl	r0, #2
   bcaa0:	4770      	bx	lr
   bcaa2:	b298      	uxth	r0, r3
   bcaa4:	b9a8      	cbnz	r0, bcad2 <__lo0bits+0x52>
   bcaa6:	0c1b      	lsrs	r3, r3, #16
   bcaa8:	2010      	movs	r0, #16
   bcaaa:	b2da      	uxtb	r2, r3
   bcaac:	b90a      	cbnz	r2, bcab2 <__lo0bits+0x32>
   bcaae:	3008      	adds	r0, #8
   bcab0:	0a1b      	lsrs	r3, r3, #8
   bcab2:	071a      	lsls	r2, r3, #28
   bcab4:	bf04      	itt	eq
   bcab6:	091b      	lsreq	r3, r3, #4
   bcab8:	3004      	addeq	r0, #4
   bcaba:	079a      	lsls	r2, r3, #30
   bcabc:	bf04      	itt	eq
   bcabe:	089b      	lsreq	r3, r3, #2
   bcac0:	3002      	addeq	r0, #2
   bcac2:	07da      	lsls	r2, r3, #31
   bcac4:	d403      	bmi.n	bcace <__lo0bits+0x4e>
   bcac6:	085b      	lsrs	r3, r3, #1
   bcac8:	f100 0001 	add.w	r0, r0, #1
   bcacc:	d005      	beq.n	bcada <__lo0bits+0x5a>
   bcace:	600b      	str	r3, [r1, #0]
   bcad0:	4770      	bx	lr
   bcad2:	4610      	mov	r0, r2
   bcad4:	e7e9      	b.n	bcaaa <__lo0bits+0x2a>
   bcad6:	2000      	movs	r0, #0
   bcad8:	4770      	bx	lr
   bcada:	2020      	movs	r0, #32
   bcadc:	4770      	bx	lr
	...

000bcae0 <__i2b>:
   bcae0:	b510      	push	{r4, lr}
   bcae2:	460c      	mov	r4, r1
   bcae4:	2101      	movs	r1, #1
   bcae6:	f7ff feb9 	bl	bc85c <_Balloc>
   bcaea:	4602      	mov	r2, r0
   bcaec:	b928      	cbnz	r0, bcafa <__i2b+0x1a>
   bcaee:	4b05      	ldr	r3, [pc, #20]	; (bcb04 <__i2b+0x24>)
   bcaf0:	4805      	ldr	r0, [pc, #20]	; (bcb08 <__i2b+0x28>)
   bcaf2:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bcaf6:	f7fa ffe3 	bl	b7ac0 <__assert_func>
   bcafa:	2301      	movs	r3, #1
   bcafc:	6144      	str	r4, [r0, #20]
   bcafe:	6103      	str	r3, [r0, #16]
   bcb00:	bd10      	pop	{r4, pc}
   bcb02:	bf00      	nop
   bcb04:	000bddc1 	.word	0x000bddc1
   bcb08:	000bde48 	.word	0x000bde48

000bcb0c <__multiply>:
   bcb0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcb10:	4691      	mov	r9, r2
   bcb12:	690a      	ldr	r2, [r1, #16]
   bcb14:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bcb18:	429a      	cmp	r2, r3
   bcb1a:	bfb8      	it	lt
   bcb1c:	460b      	movlt	r3, r1
   bcb1e:	460c      	mov	r4, r1
   bcb20:	bfbc      	itt	lt
   bcb22:	464c      	movlt	r4, r9
   bcb24:	4699      	movlt	r9, r3
   bcb26:	6927      	ldr	r7, [r4, #16]
   bcb28:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bcb2c:	68a3      	ldr	r3, [r4, #8]
   bcb2e:	6861      	ldr	r1, [r4, #4]
   bcb30:	eb07 060a 	add.w	r6, r7, sl
   bcb34:	42b3      	cmp	r3, r6
   bcb36:	b085      	sub	sp, #20
   bcb38:	bfb8      	it	lt
   bcb3a:	3101      	addlt	r1, #1
   bcb3c:	f7ff fe8e 	bl	bc85c <_Balloc>
   bcb40:	b930      	cbnz	r0, bcb50 <__multiply+0x44>
   bcb42:	4602      	mov	r2, r0
   bcb44:	4b44      	ldr	r3, [pc, #272]	; (bcc58 <__multiply+0x14c>)
   bcb46:	4845      	ldr	r0, [pc, #276]	; (bcc5c <__multiply+0x150>)
   bcb48:	f240 115d 	movw	r1, #349	; 0x15d
   bcb4c:	f7fa ffb8 	bl	b7ac0 <__assert_func>
   bcb50:	f100 0514 	add.w	r5, r0, #20
   bcb54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bcb58:	462b      	mov	r3, r5
   bcb5a:	2200      	movs	r2, #0
   bcb5c:	4543      	cmp	r3, r8
   bcb5e:	d321      	bcc.n	bcba4 <__multiply+0x98>
   bcb60:	f104 0314 	add.w	r3, r4, #20
   bcb64:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bcb68:	f109 0314 	add.w	r3, r9, #20
   bcb6c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bcb70:	9202      	str	r2, [sp, #8]
   bcb72:	1b3a      	subs	r2, r7, r4
   bcb74:	3a15      	subs	r2, #21
   bcb76:	f022 0203 	bic.w	r2, r2, #3
   bcb7a:	3204      	adds	r2, #4
   bcb7c:	f104 0115 	add.w	r1, r4, #21
   bcb80:	428f      	cmp	r7, r1
   bcb82:	bf38      	it	cc
   bcb84:	2204      	movcc	r2, #4
   bcb86:	9201      	str	r2, [sp, #4]
   bcb88:	9a02      	ldr	r2, [sp, #8]
   bcb8a:	9303      	str	r3, [sp, #12]
   bcb8c:	429a      	cmp	r2, r3
   bcb8e:	d80c      	bhi.n	bcbaa <__multiply+0x9e>
   bcb90:	2e00      	cmp	r6, #0
   bcb92:	dd03      	ble.n	bcb9c <__multiply+0x90>
   bcb94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bcb98:	2b00      	cmp	r3, #0
   bcb9a:	d05a      	beq.n	bcc52 <__multiply+0x146>
   bcb9c:	6106      	str	r6, [r0, #16]
   bcb9e:	b005      	add	sp, #20
   bcba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bcba4:	f843 2b04 	str.w	r2, [r3], #4
   bcba8:	e7d8      	b.n	bcb5c <__multiply+0x50>
   bcbaa:	f8b3 a000 	ldrh.w	sl, [r3]
   bcbae:	f1ba 0f00 	cmp.w	sl, #0
   bcbb2:	d024      	beq.n	bcbfe <__multiply+0xf2>
   bcbb4:	f104 0e14 	add.w	lr, r4, #20
   bcbb8:	46a9      	mov	r9, r5
   bcbba:	f04f 0c00 	mov.w	ip, #0
   bcbbe:	f85e 2b04 	ldr.w	r2, [lr], #4
   bcbc2:	f8d9 1000 	ldr.w	r1, [r9]
   bcbc6:	fa1f fb82 	uxth.w	fp, r2
   bcbca:	b289      	uxth	r1, r1
   bcbcc:	fb0a 110b 	mla	r1, sl, fp, r1
   bcbd0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bcbd4:	f8d9 2000 	ldr.w	r2, [r9]
   bcbd8:	4461      	add	r1, ip
   bcbda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bcbde:	fb0a c20b 	mla	r2, sl, fp, ip
   bcbe2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bcbe6:	b289      	uxth	r1, r1
   bcbe8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bcbec:	4577      	cmp	r7, lr
   bcbee:	f849 1b04 	str.w	r1, [r9], #4
   bcbf2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bcbf6:	d8e2      	bhi.n	bcbbe <__multiply+0xb2>
   bcbf8:	9a01      	ldr	r2, [sp, #4]
   bcbfa:	f845 c002 	str.w	ip, [r5, r2]
   bcbfe:	9a03      	ldr	r2, [sp, #12]
   bcc00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bcc04:	3304      	adds	r3, #4
   bcc06:	f1b9 0f00 	cmp.w	r9, #0
   bcc0a:	d020      	beq.n	bcc4e <__multiply+0x142>
   bcc0c:	6829      	ldr	r1, [r5, #0]
   bcc0e:	f104 0c14 	add.w	ip, r4, #20
   bcc12:	46ae      	mov	lr, r5
   bcc14:	f04f 0a00 	mov.w	sl, #0
   bcc18:	f8bc b000 	ldrh.w	fp, [ip]
   bcc1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bcc20:	fb09 220b 	mla	r2, r9, fp, r2
   bcc24:	4492      	add	sl, r2
   bcc26:	b289      	uxth	r1, r1
   bcc28:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bcc2c:	f84e 1b04 	str.w	r1, [lr], #4
   bcc30:	f85c 2b04 	ldr.w	r2, [ip], #4
   bcc34:	f8be 1000 	ldrh.w	r1, [lr]
   bcc38:	0c12      	lsrs	r2, r2, #16
   bcc3a:	fb09 1102 	mla	r1, r9, r2, r1
   bcc3e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bcc42:	4567      	cmp	r7, ip
   bcc44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bcc48:	d8e6      	bhi.n	bcc18 <__multiply+0x10c>
   bcc4a:	9a01      	ldr	r2, [sp, #4]
   bcc4c:	50a9      	str	r1, [r5, r2]
   bcc4e:	3504      	adds	r5, #4
   bcc50:	e79a      	b.n	bcb88 <__multiply+0x7c>
   bcc52:	3e01      	subs	r6, #1
   bcc54:	e79c      	b.n	bcb90 <__multiply+0x84>
   bcc56:	bf00      	nop
   bcc58:	000bddc1 	.word	0x000bddc1
   bcc5c:	000bde48 	.word	0x000bde48

000bcc60 <__pow5mult>:
   bcc60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bcc64:	4615      	mov	r5, r2
   bcc66:	f012 0203 	ands.w	r2, r2, #3
   bcc6a:	4606      	mov	r6, r0
   bcc6c:	460f      	mov	r7, r1
   bcc6e:	d007      	beq.n	bcc80 <__pow5mult+0x20>
   bcc70:	4c25      	ldr	r4, [pc, #148]	; (bcd08 <__pow5mult+0xa8>)
   bcc72:	3a01      	subs	r2, #1
   bcc74:	2300      	movs	r3, #0
   bcc76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bcc7a:	f7ff fe51 	bl	bc920 <__multadd>
   bcc7e:	4607      	mov	r7, r0
   bcc80:	10ad      	asrs	r5, r5, #2
   bcc82:	d03d      	beq.n	bcd00 <__pow5mult+0xa0>
   bcc84:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bcc86:	b97c      	cbnz	r4, bcca8 <__pow5mult+0x48>
   bcc88:	2010      	movs	r0, #16
   bcc8a:	f7fa fed9 	bl	b7a40 <malloc>
   bcc8e:	4602      	mov	r2, r0
   bcc90:	6270      	str	r0, [r6, #36]	; 0x24
   bcc92:	b928      	cbnz	r0, bcca0 <__pow5mult+0x40>
   bcc94:	4b1d      	ldr	r3, [pc, #116]	; (bcd0c <__pow5mult+0xac>)
   bcc96:	481e      	ldr	r0, [pc, #120]	; (bcd10 <__pow5mult+0xb0>)
   bcc98:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bcc9c:	f7fa ff10 	bl	b7ac0 <__assert_func>
   bcca0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bcca4:	6004      	str	r4, [r0, #0]
   bcca6:	60c4      	str	r4, [r0, #12]
   bcca8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bccac:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bccb0:	b94c      	cbnz	r4, bccc6 <__pow5mult+0x66>
   bccb2:	f240 2171 	movw	r1, #625	; 0x271
   bccb6:	4630      	mov	r0, r6
   bccb8:	f7ff ff12 	bl	bcae0 <__i2b>
   bccbc:	2300      	movs	r3, #0
   bccbe:	f8c8 0008 	str.w	r0, [r8, #8]
   bccc2:	4604      	mov	r4, r0
   bccc4:	6003      	str	r3, [r0, #0]
   bccc6:	f04f 0900 	mov.w	r9, #0
   bccca:	07eb      	lsls	r3, r5, #31
   bcccc:	d50a      	bpl.n	bcce4 <__pow5mult+0x84>
   bccce:	4639      	mov	r1, r7
   bccd0:	4622      	mov	r2, r4
   bccd2:	4630      	mov	r0, r6
   bccd4:	f7ff ff1a 	bl	bcb0c <__multiply>
   bccd8:	4639      	mov	r1, r7
   bccda:	4680      	mov	r8, r0
   bccdc:	4630      	mov	r0, r6
   bccde:	f7ff fdfd 	bl	bc8dc <_Bfree>
   bcce2:	4647      	mov	r7, r8
   bcce4:	106d      	asrs	r5, r5, #1
   bcce6:	d00b      	beq.n	bcd00 <__pow5mult+0xa0>
   bcce8:	6820      	ldr	r0, [r4, #0]
   bccea:	b938      	cbnz	r0, bccfc <__pow5mult+0x9c>
   bccec:	4622      	mov	r2, r4
   bccee:	4621      	mov	r1, r4
   bccf0:	4630      	mov	r0, r6
   bccf2:	f7ff ff0b 	bl	bcb0c <__multiply>
   bccf6:	6020      	str	r0, [r4, #0]
   bccf8:	f8c0 9000 	str.w	r9, [r0]
   bccfc:	4604      	mov	r4, r0
   bccfe:	e7e4      	b.n	bccca <__pow5mult+0x6a>
   bcd00:	4638      	mov	r0, r7
   bcd02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bcd06:	bf00      	nop
   bcd08:	000bdf98 	.word	0x000bdf98
   bcd0c:	000bdbf1 	.word	0x000bdbf1
   bcd10:	000bde48 	.word	0x000bde48

000bcd14 <__lshift>:
   bcd14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bcd18:	460c      	mov	r4, r1
   bcd1a:	6849      	ldr	r1, [r1, #4]
   bcd1c:	6923      	ldr	r3, [r4, #16]
   bcd1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bcd22:	68a3      	ldr	r3, [r4, #8]
   bcd24:	4607      	mov	r7, r0
   bcd26:	4691      	mov	r9, r2
   bcd28:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bcd2c:	f108 0601 	add.w	r6, r8, #1
   bcd30:	42b3      	cmp	r3, r6
   bcd32:	db0b      	blt.n	bcd4c <__lshift+0x38>
   bcd34:	4638      	mov	r0, r7
   bcd36:	f7ff fd91 	bl	bc85c <_Balloc>
   bcd3a:	4605      	mov	r5, r0
   bcd3c:	b948      	cbnz	r0, bcd52 <__lshift+0x3e>
   bcd3e:	4602      	mov	r2, r0
   bcd40:	4b2a      	ldr	r3, [pc, #168]	; (bcdec <__lshift+0xd8>)
   bcd42:	482b      	ldr	r0, [pc, #172]	; (bcdf0 <__lshift+0xdc>)
   bcd44:	f240 11d9 	movw	r1, #473	; 0x1d9
   bcd48:	f7fa feba 	bl	b7ac0 <__assert_func>
   bcd4c:	3101      	adds	r1, #1
   bcd4e:	005b      	lsls	r3, r3, #1
   bcd50:	e7ee      	b.n	bcd30 <__lshift+0x1c>
   bcd52:	2300      	movs	r3, #0
   bcd54:	f100 0114 	add.w	r1, r0, #20
   bcd58:	f100 0210 	add.w	r2, r0, #16
   bcd5c:	4618      	mov	r0, r3
   bcd5e:	4553      	cmp	r3, sl
   bcd60:	db37      	blt.n	bcdd2 <__lshift+0xbe>
   bcd62:	6920      	ldr	r0, [r4, #16]
   bcd64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bcd68:	f104 0314 	add.w	r3, r4, #20
   bcd6c:	f019 091f 	ands.w	r9, r9, #31
   bcd70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bcd74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bcd78:	d02f      	beq.n	bcdda <__lshift+0xc6>
   bcd7a:	f1c9 0e20 	rsb	lr, r9, #32
   bcd7e:	468a      	mov	sl, r1
   bcd80:	f04f 0c00 	mov.w	ip, #0
   bcd84:	681a      	ldr	r2, [r3, #0]
   bcd86:	fa02 f209 	lsl.w	r2, r2, r9
   bcd8a:	ea42 020c 	orr.w	r2, r2, ip
   bcd8e:	f84a 2b04 	str.w	r2, [sl], #4
   bcd92:	f853 2b04 	ldr.w	r2, [r3], #4
   bcd96:	4298      	cmp	r0, r3
   bcd98:	fa22 fc0e 	lsr.w	ip, r2, lr
   bcd9c:	d8f2      	bhi.n	bcd84 <__lshift+0x70>
   bcd9e:	1b03      	subs	r3, r0, r4
   bcda0:	3b15      	subs	r3, #21
   bcda2:	f023 0303 	bic.w	r3, r3, #3
   bcda6:	3304      	adds	r3, #4
   bcda8:	f104 0215 	add.w	r2, r4, #21
   bcdac:	4290      	cmp	r0, r2
   bcdae:	bf38      	it	cc
   bcdb0:	2304      	movcc	r3, #4
   bcdb2:	f841 c003 	str.w	ip, [r1, r3]
   bcdb6:	f1bc 0f00 	cmp.w	ip, #0
   bcdba:	d001      	beq.n	bcdc0 <__lshift+0xac>
   bcdbc:	f108 0602 	add.w	r6, r8, #2
   bcdc0:	3e01      	subs	r6, #1
   bcdc2:	4638      	mov	r0, r7
   bcdc4:	612e      	str	r6, [r5, #16]
   bcdc6:	4621      	mov	r1, r4
   bcdc8:	f7ff fd88 	bl	bc8dc <_Bfree>
   bcdcc:	4628      	mov	r0, r5
   bcdce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bcdd2:	f842 0f04 	str.w	r0, [r2, #4]!
   bcdd6:	3301      	adds	r3, #1
   bcdd8:	e7c1      	b.n	bcd5e <__lshift+0x4a>
   bcdda:	3904      	subs	r1, #4
   bcddc:	f853 2b04 	ldr.w	r2, [r3], #4
   bcde0:	f841 2f04 	str.w	r2, [r1, #4]!
   bcde4:	4298      	cmp	r0, r3
   bcde6:	d8f9      	bhi.n	bcddc <__lshift+0xc8>
   bcde8:	e7ea      	b.n	bcdc0 <__lshift+0xac>
   bcdea:	bf00      	nop
   bcdec:	000bddc1 	.word	0x000bddc1
   bcdf0:	000bde48 	.word	0x000bde48

000bcdf4 <__mcmp>:
   bcdf4:	b530      	push	{r4, r5, lr}
   bcdf6:	6902      	ldr	r2, [r0, #16]
   bcdf8:	690c      	ldr	r4, [r1, #16]
   bcdfa:	1b12      	subs	r2, r2, r4
   bcdfc:	d10e      	bne.n	bce1c <__mcmp+0x28>
   bcdfe:	f100 0314 	add.w	r3, r0, #20
   bce02:	3114      	adds	r1, #20
   bce04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bce08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bce0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bce10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bce14:	42a5      	cmp	r5, r4
   bce16:	d003      	beq.n	bce20 <__mcmp+0x2c>
   bce18:	d305      	bcc.n	bce26 <__mcmp+0x32>
   bce1a:	2201      	movs	r2, #1
   bce1c:	4610      	mov	r0, r2
   bce1e:	bd30      	pop	{r4, r5, pc}
   bce20:	4283      	cmp	r3, r0
   bce22:	d3f3      	bcc.n	bce0c <__mcmp+0x18>
   bce24:	e7fa      	b.n	bce1c <__mcmp+0x28>
   bce26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bce2a:	e7f7      	b.n	bce1c <__mcmp+0x28>

000bce2c <__mdiff>:
   bce2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bce30:	460c      	mov	r4, r1
   bce32:	4606      	mov	r6, r0
   bce34:	4611      	mov	r1, r2
   bce36:	4620      	mov	r0, r4
   bce38:	4690      	mov	r8, r2
   bce3a:	f7ff ffdb 	bl	bcdf4 <__mcmp>
   bce3e:	1e05      	subs	r5, r0, #0
   bce40:	d110      	bne.n	bce64 <__mdiff+0x38>
   bce42:	4629      	mov	r1, r5
   bce44:	4630      	mov	r0, r6
   bce46:	f7ff fd09 	bl	bc85c <_Balloc>
   bce4a:	b930      	cbnz	r0, bce5a <__mdiff+0x2e>
   bce4c:	4b3a      	ldr	r3, [pc, #232]	; (bcf38 <__mdiff+0x10c>)
   bce4e:	4602      	mov	r2, r0
   bce50:	f240 2132 	movw	r1, #562	; 0x232
   bce54:	4839      	ldr	r0, [pc, #228]	; (bcf3c <__mdiff+0x110>)
   bce56:	f7fa fe33 	bl	b7ac0 <__assert_func>
   bce5a:	2301      	movs	r3, #1
   bce5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bce60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bce64:	bfa4      	itt	ge
   bce66:	4643      	movge	r3, r8
   bce68:	46a0      	movge	r8, r4
   bce6a:	4630      	mov	r0, r6
   bce6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bce70:	bfa6      	itte	ge
   bce72:	461c      	movge	r4, r3
   bce74:	2500      	movge	r5, #0
   bce76:	2501      	movlt	r5, #1
   bce78:	f7ff fcf0 	bl	bc85c <_Balloc>
   bce7c:	b920      	cbnz	r0, bce88 <__mdiff+0x5c>
   bce7e:	4b2e      	ldr	r3, [pc, #184]	; (bcf38 <__mdiff+0x10c>)
   bce80:	4602      	mov	r2, r0
   bce82:	f44f 7110 	mov.w	r1, #576	; 0x240
   bce86:	e7e5      	b.n	bce54 <__mdiff+0x28>
   bce88:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bce8c:	6926      	ldr	r6, [r4, #16]
   bce8e:	60c5      	str	r5, [r0, #12]
   bce90:	f104 0914 	add.w	r9, r4, #20
   bce94:	f108 0514 	add.w	r5, r8, #20
   bce98:	f100 0e14 	add.w	lr, r0, #20
   bce9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bcea0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bcea4:	f108 0210 	add.w	r2, r8, #16
   bcea8:	46f2      	mov	sl, lr
   bceaa:	2100      	movs	r1, #0
   bceac:	f859 3b04 	ldr.w	r3, [r9], #4
   bceb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bceb4:	fa1f f883 	uxth.w	r8, r3
   bceb8:	fa11 f18b 	uxtah	r1, r1, fp
   bcebc:	0c1b      	lsrs	r3, r3, #16
   bcebe:	eba1 0808 	sub.w	r8, r1, r8
   bcec2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bcec6:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bceca:	fa1f f888 	uxth.w	r8, r8
   bcece:	1419      	asrs	r1, r3, #16
   bced0:	454e      	cmp	r6, r9
   bced2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bced6:	f84a 3b04 	str.w	r3, [sl], #4
   bceda:	d8e7      	bhi.n	bceac <__mdiff+0x80>
   bcedc:	1b33      	subs	r3, r6, r4
   bcede:	3b15      	subs	r3, #21
   bcee0:	f023 0303 	bic.w	r3, r3, #3
   bcee4:	3304      	adds	r3, #4
   bcee6:	3415      	adds	r4, #21
   bcee8:	42a6      	cmp	r6, r4
   bceea:	bf38      	it	cc
   bceec:	2304      	movcc	r3, #4
   bceee:	441d      	add	r5, r3
   bcef0:	4473      	add	r3, lr
   bcef2:	469e      	mov	lr, r3
   bcef4:	462e      	mov	r6, r5
   bcef6:	4566      	cmp	r6, ip
   bcef8:	d30e      	bcc.n	bcf18 <__mdiff+0xec>
   bcefa:	f10c 0203 	add.w	r2, ip, #3
   bcefe:	1b52      	subs	r2, r2, r5
   bcf00:	f022 0203 	bic.w	r2, r2, #3
   bcf04:	3d03      	subs	r5, #3
   bcf06:	45ac      	cmp	ip, r5
   bcf08:	bf38      	it	cc
   bcf0a:	2200      	movcc	r2, #0
   bcf0c:	441a      	add	r2, r3
   bcf0e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bcf12:	b17b      	cbz	r3, bcf34 <__mdiff+0x108>
   bcf14:	6107      	str	r7, [r0, #16]
   bcf16:	e7a3      	b.n	bce60 <__mdiff+0x34>
   bcf18:	f856 8b04 	ldr.w	r8, [r6], #4
   bcf1c:	fa11 f288 	uxtah	r2, r1, r8
   bcf20:	1414      	asrs	r4, r2, #16
   bcf22:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bcf26:	b292      	uxth	r2, r2
   bcf28:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bcf2c:	f84e 2b04 	str.w	r2, [lr], #4
   bcf30:	1421      	asrs	r1, r4, #16
   bcf32:	e7e0      	b.n	bcef6 <__mdiff+0xca>
   bcf34:	3f01      	subs	r7, #1
   bcf36:	e7ea      	b.n	bcf0e <__mdiff+0xe2>
   bcf38:	000bddc1 	.word	0x000bddc1
   bcf3c:	000bde48 	.word	0x000bde48

000bcf40 <__ulp>:
   bcf40:	b082      	sub	sp, #8
   bcf42:	ed8d 0b00 	vstr	d0, [sp]
   bcf46:	9b01      	ldr	r3, [sp, #4]
   bcf48:	4912      	ldr	r1, [pc, #72]	; (bcf94 <__ulp+0x54>)
   bcf4a:	4019      	ands	r1, r3
   bcf4c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bcf50:	2900      	cmp	r1, #0
   bcf52:	dd05      	ble.n	bcf60 <__ulp+0x20>
   bcf54:	2200      	movs	r2, #0
   bcf56:	460b      	mov	r3, r1
   bcf58:	ec43 2b10 	vmov	d0, r2, r3
   bcf5c:	b002      	add	sp, #8
   bcf5e:	4770      	bx	lr
   bcf60:	4249      	negs	r1, r1
   bcf62:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bcf66:	ea4f 5021 	mov.w	r0, r1, asr #20
   bcf6a:	f04f 0200 	mov.w	r2, #0
   bcf6e:	f04f 0300 	mov.w	r3, #0
   bcf72:	da04      	bge.n	bcf7e <__ulp+0x3e>
   bcf74:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bcf78:	fa41 f300 	asr.w	r3, r1, r0
   bcf7c:	e7ec      	b.n	bcf58 <__ulp+0x18>
   bcf7e:	f1a0 0114 	sub.w	r1, r0, #20
   bcf82:	291e      	cmp	r1, #30
   bcf84:	bfda      	itte	le
   bcf86:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bcf8a:	fa20 f101 	lsrle.w	r1, r0, r1
   bcf8e:	2101      	movgt	r1, #1
   bcf90:	460a      	mov	r2, r1
   bcf92:	e7e1      	b.n	bcf58 <__ulp+0x18>
   bcf94:	7ff00000 	.word	0x7ff00000

000bcf98 <__b2d>:
   bcf98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bcf9a:	6905      	ldr	r5, [r0, #16]
   bcf9c:	f100 0714 	add.w	r7, r0, #20
   bcfa0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bcfa4:	1f2e      	subs	r6, r5, #4
   bcfa6:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bcfaa:	4620      	mov	r0, r4
   bcfac:	f7ff fd48 	bl	bca40 <__hi0bits>
   bcfb0:	f1c0 0320 	rsb	r3, r0, #32
   bcfb4:	280a      	cmp	r0, #10
   bcfb6:	f8df c07c 	ldr.w	ip, [pc, #124]	; bd034 <__b2d+0x9c>
   bcfba:	600b      	str	r3, [r1, #0]
   bcfbc:	dc14      	bgt.n	bcfe8 <__b2d+0x50>
   bcfbe:	f1c0 0e0b 	rsb	lr, r0, #11
   bcfc2:	fa24 f10e 	lsr.w	r1, r4, lr
   bcfc6:	42b7      	cmp	r7, r6
   bcfc8:	ea41 030c 	orr.w	r3, r1, ip
   bcfcc:	bf34      	ite	cc
   bcfce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bcfd2:	2100      	movcs	r1, #0
   bcfd4:	3015      	adds	r0, #21
   bcfd6:	fa04 f000 	lsl.w	r0, r4, r0
   bcfda:	fa21 f10e 	lsr.w	r1, r1, lr
   bcfde:	ea40 0201 	orr.w	r2, r0, r1
   bcfe2:	ec43 2b10 	vmov	d0, r2, r3
   bcfe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bcfe8:	42b7      	cmp	r7, r6
   bcfea:	bf3a      	itte	cc
   bcfec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bcff0:	f1a5 0608 	subcc.w	r6, r5, #8
   bcff4:	2100      	movcs	r1, #0
   bcff6:	380b      	subs	r0, #11
   bcff8:	d017      	beq.n	bd02a <__b2d+0x92>
   bcffa:	f1c0 0c20 	rsb	ip, r0, #32
   bcffe:	fa04 f500 	lsl.w	r5, r4, r0
   bd002:	42be      	cmp	r6, r7
   bd004:	fa21 f40c 	lsr.w	r4, r1, ip
   bd008:	ea45 0504 	orr.w	r5, r5, r4
   bd00c:	bf8c      	ite	hi
   bd00e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bd012:	2400      	movls	r4, #0
   bd014:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bd018:	fa01 f000 	lsl.w	r0, r1, r0
   bd01c:	fa24 f40c 	lsr.w	r4, r4, ip
   bd020:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bd024:	ea40 0204 	orr.w	r2, r0, r4
   bd028:	e7db      	b.n	bcfe2 <__b2d+0x4a>
   bd02a:	ea44 030c 	orr.w	r3, r4, ip
   bd02e:	460a      	mov	r2, r1
   bd030:	e7d7      	b.n	bcfe2 <__b2d+0x4a>
   bd032:	bf00      	nop
   bd034:	3ff00000 	.word	0x3ff00000

000bd038 <__d2b>:
   bd038:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bd03c:	4689      	mov	r9, r1
   bd03e:	2101      	movs	r1, #1
   bd040:	ec57 6b10 	vmov	r6, r7, d0
   bd044:	4690      	mov	r8, r2
   bd046:	f7ff fc09 	bl	bc85c <_Balloc>
   bd04a:	4604      	mov	r4, r0
   bd04c:	b930      	cbnz	r0, bd05c <__d2b+0x24>
   bd04e:	4602      	mov	r2, r0
   bd050:	4b25      	ldr	r3, [pc, #148]	; (bd0e8 <__d2b+0xb0>)
   bd052:	4826      	ldr	r0, [pc, #152]	; (bd0ec <__d2b+0xb4>)
   bd054:	f240 310a 	movw	r1, #778	; 0x30a
   bd058:	f7fa fd32 	bl	b7ac0 <__assert_func>
   bd05c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bd060:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bd064:	bb35      	cbnz	r5, bd0b4 <__d2b+0x7c>
   bd066:	2e00      	cmp	r6, #0
   bd068:	9301      	str	r3, [sp, #4]
   bd06a:	d028      	beq.n	bd0be <__d2b+0x86>
   bd06c:	4668      	mov	r0, sp
   bd06e:	9600      	str	r6, [sp, #0]
   bd070:	f7ff fd06 	bl	bca80 <__lo0bits>
   bd074:	9900      	ldr	r1, [sp, #0]
   bd076:	b300      	cbz	r0, bd0ba <__d2b+0x82>
   bd078:	9a01      	ldr	r2, [sp, #4]
   bd07a:	f1c0 0320 	rsb	r3, r0, #32
   bd07e:	fa02 f303 	lsl.w	r3, r2, r3
   bd082:	430b      	orrs	r3, r1
   bd084:	40c2      	lsrs	r2, r0
   bd086:	6163      	str	r3, [r4, #20]
   bd088:	9201      	str	r2, [sp, #4]
   bd08a:	9b01      	ldr	r3, [sp, #4]
   bd08c:	61a3      	str	r3, [r4, #24]
   bd08e:	2b00      	cmp	r3, #0
   bd090:	bf14      	ite	ne
   bd092:	2202      	movne	r2, #2
   bd094:	2201      	moveq	r2, #1
   bd096:	6122      	str	r2, [r4, #16]
   bd098:	b1d5      	cbz	r5, bd0d0 <__d2b+0x98>
   bd09a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bd09e:	4405      	add	r5, r0
   bd0a0:	f8c9 5000 	str.w	r5, [r9]
   bd0a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bd0a8:	f8c8 0000 	str.w	r0, [r8]
   bd0ac:	4620      	mov	r0, r4
   bd0ae:	b003      	add	sp, #12
   bd0b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bd0b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bd0b8:	e7d5      	b.n	bd066 <__d2b+0x2e>
   bd0ba:	6161      	str	r1, [r4, #20]
   bd0bc:	e7e5      	b.n	bd08a <__d2b+0x52>
   bd0be:	a801      	add	r0, sp, #4
   bd0c0:	f7ff fcde 	bl	bca80 <__lo0bits>
   bd0c4:	9b01      	ldr	r3, [sp, #4]
   bd0c6:	6163      	str	r3, [r4, #20]
   bd0c8:	2201      	movs	r2, #1
   bd0ca:	6122      	str	r2, [r4, #16]
   bd0cc:	3020      	adds	r0, #32
   bd0ce:	e7e3      	b.n	bd098 <__d2b+0x60>
   bd0d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bd0d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bd0d8:	f8c9 0000 	str.w	r0, [r9]
   bd0dc:	6918      	ldr	r0, [r3, #16]
   bd0de:	f7ff fcaf 	bl	bca40 <__hi0bits>
   bd0e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bd0e6:	e7df      	b.n	bd0a8 <__d2b+0x70>
   bd0e8:	000bddc1 	.word	0x000bddc1
   bd0ec:	000bde48 	.word	0x000bde48

000bd0f0 <__ratio>:
   bd0f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd0f4:	4688      	mov	r8, r1
   bd0f6:	4669      	mov	r1, sp
   bd0f8:	4681      	mov	r9, r0
   bd0fa:	f7ff ff4d 	bl	bcf98 <__b2d>
   bd0fe:	a901      	add	r1, sp, #4
   bd100:	4640      	mov	r0, r8
   bd102:	ec55 4b10 	vmov	r4, r5, d0
   bd106:	f7ff ff47 	bl	bcf98 <__b2d>
   bd10a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bd10e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bd112:	eba3 0c02 	sub.w	ip, r3, r2
   bd116:	e9dd 3200 	ldrd	r3, r2, [sp]
   bd11a:	1a9b      	subs	r3, r3, r2
   bd11c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bd120:	ec51 0b10 	vmov	r0, r1, d0
   bd124:	2b00      	cmp	r3, #0
   bd126:	bfd6      	itet	le
   bd128:	460a      	movle	r2, r1
   bd12a:	462a      	movgt	r2, r5
   bd12c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bd130:	468b      	mov	fp, r1
   bd132:	462f      	mov	r7, r5
   bd134:	bfd4      	ite	le
   bd136:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bd13a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bd13e:	4620      	mov	r0, r4
   bd140:	ee10 2a10 	vmov	r2, s0
   bd144:	465b      	mov	r3, fp
   bd146:	4639      	mov	r1, r7
   bd148:	f7fd fd90 	bl	bac6c <__aeabi_ddiv>
   bd14c:	ec41 0b10 	vmov	d0, r0, r1
   bd150:	b003      	add	sp, #12
   bd152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bd156 <__copybits>:
   bd156:	3901      	subs	r1, #1
   bd158:	b570      	push	{r4, r5, r6, lr}
   bd15a:	1149      	asrs	r1, r1, #5
   bd15c:	6914      	ldr	r4, [r2, #16]
   bd15e:	3101      	adds	r1, #1
   bd160:	f102 0314 	add.w	r3, r2, #20
   bd164:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bd168:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bd16c:	1f05      	subs	r5, r0, #4
   bd16e:	42a3      	cmp	r3, r4
   bd170:	d30c      	bcc.n	bd18c <__copybits+0x36>
   bd172:	1aa3      	subs	r3, r4, r2
   bd174:	3b11      	subs	r3, #17
   bd176:	f023 0303 	bic.w	r3, r3, #3
   bd17a:	3211      	adds	r2, #17
   bd17c:	42a2      	cmp	r2, r4
   bd17e:	bf88      	it	hi
   bd180:	2300      	movhi	r3, #0
   bd182:	4418      	add	r0, r3
   bd184:	2300      	movs	r3, #0
   bd186:	4288      	cmp	r0, r1
   bd188:	d305      	bcc.n	bd196 <__copybits+0x40>
   bd18a:	bd70      	pop	{r4, r5, r6, pc}
   bd18c:	f853 6b04 	ldr.w	r6, [r3], #4
   bd190:	f845 6f04 	str.w	r6, [r5, #4]!
   bd194:	e7eb      	b.n	bd16e <__copybits+0x18>
   bd196:	f840 3b04 	str.w	r3, [r0], #4
   bd19a:	e7f4      	b.n	bd186 <__copybits+0x30>

000bd19c <__any_on>:
   bd19c:	f100 0214 	add.w	r2, r0, #20
   bd1a0:	6900      	ldr	r0, [r0, #16]
   bd1a2:	114b      	asrs	r3, r1, #5
   bd1a4:	4298      	cmp	r0, r3
   bd1a6:	b510      	push	{r4, lr}
   bd1a8:	db11      	blt.n	bd1ce <__any_on+0x32>
   bd1aa:	dd0a      	ble.n	bd1c2 <__any_on+0x26>
   bd1ac:	f011 011f 	ands.w	r1, r1, #31
   bd1b0:	d007      	beq.n	bd1c2 <__any_on+0x26>
   bd1b2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bd1b6:	fa24 f001 	lsr.w	r0, r4, r1
   bd1ba:	fa00 f101 	lsl.w	r1, r0, r1
   bd1be:	428c      	cmp	r4, r1
   bd1c0:	d10b      	bne.n	bd1da <__any_on+0x3e>
   bd1c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bd1c6:	4293      	cmp	r3, r2
   bd1c8:	d803      	bhi.n	bd1d2 <__any_on+0x36>
   bd1ca:	2000      	movs	r0, #0
   bd1cc:	bd10      	pop	{r4, pc}
   bd1ce:	4603      	mov	r3, r0
   bd1d0:	e7f7      	b.n	bd1c2 <__any_on+0x26>
   bd1d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bd1d6:	2900      	cmp	r1, #0
   bd1d8:	d0f5      	beq.n	bd1c6 <__any_on+0x2a>
   bd1da:	2001      	movs	r0, #1
   bd1dc:	e7f6      	b.n	bd1cc <__any_on+0x30>

000bd1de <_calloc_r>:
   bd1de:	b513      	push	{r0, r1, r4, lr}
   bd1e0:	434a      	muls	r2, r1
   bd1e2:	4611      	mov	r1, r2
   bd1e4:	9201      	str	r2, [sp, #4]
   bd1e6:	f7fa fc5b 	bl	b7aa0 <_malloc_r>
   bd1ea:	4604      	mov	r4, r0
   bd1ec:	b118      	cbz	r0, bd1f6 <_calloc_r+0x18>
   bd1ee:	9a01      	ldr	r2, [sp, #4]
   bd1f0:	2100      	movs	r1, #0
   bd1f2:	f7fd ffb9 	bl	bb168 <memset>
   bd1f6:	4620      	mov	r0, r4
   bd1f8:	b002      	add	sp, #8
   bd1fa:	bd10      	pop	{r4, pc}
   bd1fc:	0000      	movs	r0, r0
	...

000bd200 <nan>:
   bd200:	ed9f 0b01 	vldr	d0, [pc, #4]	; bd208 <nan+0x8>
   bd204:	4770      	bx	lr
   bd206:	bf00      	nop
   bd208:	00000000 	.word	0x00000000
   bd20c:	7ff80000 	.word	0x7ff80000

000bd210 <nanf>:
   bd210:	ed9f 0a01 	vldr	s0, [pc, #4]	; bd218 <nanf+0x8>
   bd214:	4770      	bx	lr
   bd216:	bf00      	nop
   bd218:	7fc00000 	.word	0x7fc00000

000bd21c <__ascii_wctomb>:
   bd21c:	b149      	cbz	r1, bd232 <__ascii_wctomb+0x16>
   bd21e:	2aff      	cmp	r2, #255	; 0xff
   bd220:	bf85      	ittet	hi
   bd222:	238a      	movhi	r3, #138	; 0x8a
   bd224:	6003      	strhi	r3, [r0, #0]
   bd226:	700a      	strbls	r2, [r1, #0]
   bd228:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   bd22c:	bf98      	it	ls
   bd22e:	2001      	movls	r0, #1
   bd230:	4770      	bx	lr
   bd232:	4608      	mov	r0, r1
   bd234:	4770      	bx	lr
	...

000bd238 <__aeabi_d2lz>:
   bd238:	b538      	push	{r3, r4, r5, lr}
   bd23a:	2200      	movs	r2, #0
   bd23c:	2300      	movs	r3, #0
   bd23e:	4604      	mov	r4, r0
   bd240:	460d      	mov	r5, r1
   bd242:	f7fd fe5b 	bl	baefc <__aeabi_dcmplt>
   bd246:	b928      	cbnz	r0, bd254 <__aeabi_d2lz+0x1c>
   bd248:	4620      	mov	r0, r4
   bd24a:	4629      	mov	r1, r5
   bd24c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bd250:	f7fd bf2a 	b.w	bb0a8 <__aeabi_d2ulz>
   bd254:	4620      	mov	r0, r4
   bd256:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bd25a:	f7fd ff25 	bl	bb0a8 <__aeabi_d2ulz>
   bd25e:	4240      	negs	r0, r0
   bd260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bd264:	bd38      	pop	{r3, r4, r5, pc}
   bd266:	bf00      	nop

000bd268 <dynalib_user>:
   bd268:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bd278:	0000 0000 6162 6973 5f63 7473 6972 676e     ....basic_string
   bd288:	3a3a 4d5f 635f 6e6f 7473 7572 7463 6e20     ::_M_construct n
   bd298:	6c75 206c 6f6e 2074 6176 696c 0064 450a     ull not valid..E
   bd2a8:	746e 7265 7420 6568 6c20 6e69 2065 6f63     nter the line co
   bd2b8:	6f6c 2072 666f 7420 6568 6420 7665 6369     lor of the devic
   bd2c8:	2065 6977 6874 7420 6568 6220 696c 6b6e     e with the blink
   bd2d8:	6e69 2067 454c 3a44 0020 6572 6563 7669     ing LED: .receiv
   bd2e8:	2065 6572 0064 6572 6563 7669 2065 6c62     e red.receive bl
   bd2f8:	6575 7200 6365 6965 6576 6720 6572 6e65     ue.receive green
   bd308:	0a00 6553 7571 6e65 6563 203a 6300 6e61     ..Sequence: .can
   bd318:	6f6e 2074 7263 6165 6574 7320 6474 3a3a     not create std::
   bd328:	6576 7463 726f 6c20 7261 6567 2072 6874     vector larger th
   bd338:	6e61 6d20 7861 735f 7a69 2865 0029 720a     an max_size()..r
   bd348:	7165 6575 7473 6320 646f 2065 2c31 6120     equest code 1, a
   bd358:	6464 6572 7373 203a 7400 6172 736e 696d     ddress: .transmi
   bd368:	7373 6f69 206e 6572 6963 7665 6465 6620     ssion recieved f
   bd378:	6f72 3a6d 0020 6564 6976 6563 6920 3a64     rom: .device id:
   bd388:	0020 7274 6e61 6d73 7369 6973 6e6f 7320      .transmission s
   bd398:	6e65 2074 6f74 203a 7200 7165 6575 7473     ent to: .request
   bd3a8:	6320 646f 2065 2c32 6120 6464 6572 7373      code 2, address
   bd3b8:	203a 6300 6e6f 6c66 6369 2074 6576 6972     : .conflict veri
   bd3c8:	6966 6163 6974 6e6f 203a 0a00 6f43 6e6e     fication: ..Conn
   bd3d8:	6365 6574 2064 6f74 203a 6200 6f72 6e77     ected to: .brown
   bd3e8:	4600 3046 3030 0030 4130 3030 3030 3000     .FF0000.0A0000.0
   bd3f8:	3030 4630 0046 3030 3030 4130 4600 4646     000FF.00000A.FFF
   bd408:	3046 0030 4130 4130 3030 3000 4630 3046     F00.0A0A00.00FF0
   bd418:	0030 3030 4130 3030 6f00 6172 676e 0065     0.000A00.orange.
   bd428:	4646 3038 3030 3000 3041 3035 0030 7570     FF8000.0A0500.pu
   bd438:	7072 656c 3800 3030 3830 0030 3530 3030     rple.800080.0500
   bd448:	3530 7000 6e69 006b 4646 3038 4646 3000     05.pink.FF80FF.0
   bd458:	3041 3035 0041 4536 3034 3030 3130 422d     A050A.6E400001-B
   bd468:	4135 2d33 3346 3339 452d 4130 2d39 3545     5A3-F393-E0A9-E5
   bd478:	4530 3432 4344 4143 4539 3600 3445 3030     0E24DCCA9E.6E400
   bd488:	3030 2d32 3542 3341 462d 3933 2d33 3045     002-B5A3-F393-E0
   bd498:	3941 452d 3035 3245 4434 4343 3941 0045     A9-E50E24DCCA9E.
   bd4a8:	4536 3034 3030 3330 422d 4135 2d33 3346     6E400003-B5A3-F3
   bd4b8:	3339 452d 4130 2d39 3545 4530 3432 4344     93-E0A9-E50E24DC
   bd4c8:	4143 4539 7400 0078 7872 7400 6572 2e6b     CA9E.tx.rx.trek.
   bd4d8:	6874 7765 6c63 632e 6d6f 6c00 6f6f 2070     thewcl.com.loop 
   bd4e8:	7473 7261 0074 6925 202c 2f00 7463 3f61     start.%i, ./cta?
   bd4f8:	696c 656e 3d73 4700 5445 7000 7261 6973     lines=.GET.parsi
   bd508:	676e 7000 7261 6973 676e 6620 6961 656c     ng.parsing faile
   bd518:	0064 696c 656e 0073 7274 6961 736e 6e00     d.lines.trains.n
   bd528:	7865 5f74 7473 706f 6400 7365 6974 616e     ext_stop.destina
   bd538:	6974 6e6f 6400 7269 6365 6974 6e6f 6c00     tion.direction.l
   bd548:	7461 7469 6475 0065 6f6c 676e 7469 6475     atitude.longitud
   bd558:	0065 7262 6165 006b 7274 6961 206e 6925     e.break.train %i
   bd568:	203a 7300 6f6c 6570 3020 7300 6f6c 6570     : .slope 0.slope
   bd578:	6d20 7861 6300 6c61 7563 616c 6974 6e6f      max.calculation
   bd588:	7300 6765 656d 746e 7020 736f 6200 6665     .segment pos.bef
   bd598:	726f 0065 6661 6574 0072 6e69 4c00 6e69     ore.after.in.Lin
   bd5a8:	6564 006e 756f 7074 7475 7620 6365 6f74     den.output vecto
   bd5b8:	0072 6925 202c 6925 202c 6625 7300 6e65     r.%i, %i, %f.sen
   bd5c8:	6964 676e 7200 6961 206c 6170 7472 2520     ding.rail part %
   bd5d8:	0069 0000                                   i...

000bd5dc <_ZTV16JsonParserStaticILj10000ELj1000EE>:
	...
   bd5e4:	40b9 000b 40cd 000b 6341 6563 7470 2f00     .@...@..Accept./
   bd5f4:	2f2a 0000 0019 0000 0003 0000 0007 0000     */..............
   bd604:	0005 0000 000c 0000 0008 0000 0005 0000     ................
   bd614:	0005 0000 0005 0000 0019 0000 0005 0000     ................
   bd624:	0005 0000 0005 0000 0005 0000 000f 0000     ................
   bd634:	0005 0000 0000 0000 0014 0000 0014 0000     ................
   bd644:	000f 0000 0005 0000 0005 0000 000f 0000     ................
   bd654:	000f 0000 000f 0000 000a 0000 000c 0000     ................
   bd664:	0007 0000 0001 0000 0005 0000 0005 0000     ................
   bd674:	0005 0000 0005 0000 0014 0000 0000 0000     ................
   bd684:	0014 0000 0007 0000 0007 0000 0006 0000     ................
   bd694:	0005 0000 0005 0000 0005 0000 0005 0000     ................
   bd6a4:	4820 5454 2f50 2e31 0d30 000a 6c63 736f      HTTP/1.0...clos
   bd6b4:	0065 6f43 6e6e 6365 6974 6e6f 4800 534f     e.Connection.HOS
   bd6c4:	0054 6f43 746e 6e65 2d74 654c 676e 6874     T.Content-Length
   bd6d4:	5000 534f 0054 0a0d 0a0d 2500 3430 0078     .POST......%04x.

000bd6e4 <_ZTV10JsonBuffer>:
	...
   bd6ec:	6c0d 000b 6c29 000b                         .l..)l..

000bd6f4 <_ZTV10JsonParser>:
	...
   bd6fc:	6c3d 000b 6c61 000b                         =l..al..

000bd704 <_ZTV13JsonReference>:
	...
   bd70c:	6bfd 000b 6bff 000b 7341 6573 7472 6f69     .k...k..Assertio
   bd71c:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   bd72c:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   bd73c:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   bd74c:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   bd75c:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   bd76c:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   bd77c:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   bd78c:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   bd79c:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   bd7ac:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   bd7bc:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   bd7cc:	6976 6563 002e 6f43 6e6e 6365 6574 2064     vice..Connected 
   bd7dc:	7962 4320 6e65 7274 6c61 6420 7665 6369     by Central devic
   bd7ec:	2e65 4400 7369 6f63 6e6e 6365 6574 2064     e..Disconnected 
   bd7fc:	7962 7220 6d65 746f 2065 6564 6976 6563     by remote device
   bd80c:	002e 7544 6c70 6369 7461 6465 6320 6168     ..Duplicated cha
   bd81c:	6172 7463 7265 7369 6974 2063 6163 6e6e     racteristic cann
   bd82c:	746f 6220 2065 6461 6564 2e64 4600 6961     ot be added..Fai
   bd83c:	656c 2064 6f74 6120 7070 6e65 2064 6f6c     led to append lo
   bd84c:	6163 206c 6863 7261 6361 6574 6972 7473     cal characterist
   bd85c:	6369 002e                                   ic..

000bd860 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd868:	7aed 000b 7b51 000b 7c37 000b 7b7b 000b     .z..Q{..7|..{{..
   bd878:	7af1 000b                                   .z..

000bd87c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd884:	7ae9 000b 7b5f 000b 7aeb 000b 7b81 000b     .z.._{...z...{..
   bd894:	7b11 000b                                   .{..

000bd898 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd8a0:	7ae7 000b 7b6d 000b 83f1 000b 7b87 000b     .z..m{.......{..
   bd8b0:	7b31 000b                                   1{..

000bd8b4 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bd8c0:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000bd8d2 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bd8d2:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000bd8e2 <_ZN8particle7BleUuid9BASE_UUIDE>:
   bd8e2:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000bd8f4 <_ZTVN5spark13EthernetClassE>:
	...
   bd8fc:	8e9f 000b 8e95 000b 8e8b 000b 8e81 000b     ................
   bd90c:	8e75 000b 8e69 000b 9125 000b 912d 000b     u...i...%...-...
   bd91c:	8e5d 000b 8e55 000b 8e4b 000b 8e41 000b     ]...U...K...A...
   bd92c:	915d 000b                                   ]...

000bd930 <_ZTV7TwoWire>:
	...
   bd938:	8ebd 000b 8f07 000b 8edf 000b 8ebf 000b     ................
   bd948:	8ee7 000b 8eef 000b 8ef7 000b 8eff 000b     ................

000bd958 <_ZTV9IPAddress>:
	...
   bd960:	8fc9 000b 8fb9 000b 8fbb 000b 7061 0070     ............app.

000bd970 <_ZTVN5spark12NetworkClassE>:
	...
   bd978:	90e5 000b 90ef 000b 90f9 000b 9103 000b     ................
   bd988:	910d 000b 9119 000b 9125 000b 912d 000b     ........%...-...
   bd998:	9135 000b 9141 000b 9149 000b 9153 000b     5...A...I...S...
   bd9a8:	915d 000b 6977 6972 676e 7200 6365 2076     ]...wiring.recv 
   bd9b8:	7265 6f72 2072 203d 6425 0000               error = %d..

000bd9c4 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd9cc:	968d 000b 96b1 000b 9be3 000b 96bf 000b     ................
   bd9dc:	9691 000b                                   ....

000bd9e0 <_ZTV9TCPClient>:
	...
   bd9e8:	973d 000b 9771 000b 9609 000b 9623 000b     =...q.......#...
   bd9f8:	9a79 000b 964d 000b 98ef 000b 9681 000b     y...M...........
   bda08:	9981 000b 97c1 000b 991d 000b 9b2d 000b     ............-...
   bda18:	98bd 000b 9683 000b 9635 000b 96c5 000b     ........5.......
   bda28:	97a1 000b 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
   bda38:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000bda48 <_ZTV11USARTSerial>:
	...
   bda50:	9bfd 000b 9c69 000b 9c41 000b 9249 000b     ....i...A...I...
   bda60:	9c11 000b 9c2d 000b 9c1f 000b 9c3b 000b     ....-.......;...
   bda70:	9bff 000b 9c03 000b                         ........

000bda78 <_ZTV9USBSerial>:
	...
   bda80:	9ca7 000b 9d0f 000b 9ce5 000b 9249 000b     ............I...
   bda90:	9cd7 000b 9ca9 000b 9cb9 000b 9d09 000b     ................
   bdaa0:	9cc9 000b 9ca1 000b                         ........

000bdaa8 <_ZTVN5spark9WiFiClassE>:
	...
   bdab0:	9e07 000b 9dfd 000b 9df3 000b 9da9 000b     ................
   bdac0:	9de7 000b 9ddb 000b 9125 000b 912d 000b     ........%...-...
   bdad0:	9dcf 000b 9dc7 000b 9dbd 000b 9db3 000b     ................
   bdae0:	915d 000b                                   ]...

000bdae4 <_ZSt7nothrow>:
	...

000bdae5 <_ZTSSt19_Sp_make_shared_tag>:
   bdae5:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bdaf5:	6572 5f64 6174 0067 0000                     red_tag....

000bdb00 <_ZTISt19_Sp_make_shared_tag>:
   bdb00:	db58 000b dae5 000b 6162 6973 5f63 7473     X.......basic_st
   bdb10:	6972 676e 3a3a 4d5f 635f 6572 7461 0065     ring::_M_create.

000bdb20 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bdb20:	dbb8 000b db2c 000b dbdc 000b               ....,.......

000bdb2c <_ZTSN10__cxxabiv117__class_type_infoE>:
   bdb2c:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bdb3c:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bdb4c:	0045 0000                                   E...

000bdb50 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bdb50:	0000 0000 db20 000b a231 000b a245 000b     .... ...1...E...
   bdb60:	a3d9 000b a3d9 000b a2af 000b a1f1 000b     ................
   bdb70:	a297 000b a259 000b a223 000b               ....Y...#...

000bdb7c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bdb7c:	dbb8 000b db88 000b db20 000b               ........ ...

000bdb88 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bdb88:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bdb98:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bdba8:	666e 456f 0000 0000                         nfoE....

000bdbb0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bdbb0:	0000 0000 db7c 000b a2d9 000b a2ed 000b     ....|...........
   bdbc0:	a3d9 000b a3d9 000b a2af 000b a1f1 000b     ................
   bdbd0:	a3ad 000b a339 000b a301 000b               ....9.......

000bdbdc <_ZTISt9type_info>:
   bdbdc:	db58 000b dbe4 000b                         X.......

000bdbe4 <_ZTSSt9type_info>:
   bdbe4:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bdbf4:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bdc04:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   bdc14:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bdc24:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bdc34:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bdc44:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bdc54:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   bdc64:	6e69 7469 0079 6e61 0000 0000               inity.an....

000bdc70 <fpi.1>:
   bdc70:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bdc80:	0000 0000                                   ....

000bdc84 <fpinan.0>:
   bdc84:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   bdc94:	0000 0000                                   ....

000bdc98 <tinytens>:
   bdc98:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bdca8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bdcb8:	6f43 64ac 0628 1168                         Co.d(.h.

000bdcc0 <_ctype_>:
   bdcc0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bdcd0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bdce0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bdcf0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bdd00:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bdd10:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bdd20:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bdd30:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bdd40:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bddc0:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bddd0:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   bdde0:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   bddf0:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   bde00:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   bde10:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   bde20:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   bde30:	632e 0000                                   .c..

000bde34 <_C_numeric_locale>:
   bde34:	d85e 000b d6de 000b 53d0 2003 0043 4f50     ^........S. C.PO
   bde44:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   bde54:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bde64:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bde74:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bde84:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bde94:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   bdea4:	0000 0000                                   ....

000bdea8 <__mprec_bigtens>:
   bdea8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bdeb8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bdec8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bded0 <__mprec_tens>:
   bded0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bdee0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bdef0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bdf00:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bdf10:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bdf20:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bdf30:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bdf40:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bdf50:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bdf60:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bdf70:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bdf80:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bdf90:	9db4 79d9 7843 44ea                         ...yCx.D

000bdf98 <p05.0>:
   bdf98:	0005 0000 0019 0000 007d 0000               ........}...

000bdfa4 <link_const_variable_data_end>:
   bdfa4:	000b5fe1 	.word	0x000b5fe1
   bdfa8:	000b7555 	.word	0x000b7555
   bdfac:	000b8e31 	.word	0x000b8e31
   bdfb0:	000b8ea9 	.word	0x000b8ea9
   bdfb4:	000b90d5 	.word	0x000b90d5
   bdfb8:	000b9235 	.word	0x000b9235
   bdfbc:	000b9371 	.word	0x000b9371
   bdfc0:	000b95e5 	.word	0x000b95e5
   bdfc4:	000b9be9 	.word	0x000b9be9
   bdfc8:	000b9e11 	.word	0x000b9e11

000bdfcc <link_constructors_end>:
   bdfcc:	00000000 	.word	0x00000000
