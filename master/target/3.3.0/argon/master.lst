
/Users/sainihome/Documents/GitHub/loop-tracks/master/target/3.3.0/argon/master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a000  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000be020  000be020  0000e020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000be044  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f4  2003530c  000be048  0001530c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000092f0  20035500  20035500  00025500  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000be23c  000be23c  0001e23c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000be264  000be264  0001e264  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00140d56  00000000  00000000  0001e268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00012c85  00000000  00000000  0015efbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00049c95  00000000  00000000  00171c43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003280  00000000  00000000  001bb8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000d0a0  00000000  00000000  001beb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000366ff  00000000  00000000  001cbbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00044fd1  00000000  00000000  002022f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153a27  00000000  00000000  002472c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000abb0  00000000  00000000  0039acf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f007 f891 	bl	bb158 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f007 f8b3 	bl	bb1a8 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003530c 	.word	0x2003530c
   b404c:	000be048 	.word	0x000be048
   b4050:	20035500 	.word	0x20035500
   b4054:	20035500 	.word	0x20035500
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f005 fff7 	bl	ba054 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bdfec 	.word	0x000bdfec
   b4080:	000be014 	.word	0x000be014

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 bee6 	b.w	b5e54 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f002 f813 	bl	b60b4 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f005 bf97 	b.w	b9fc4 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f003 bd55 	b.w	b7b44 <malloc>

000b409a <_Znaj>:
   b409a:	f003 bd53 	b.w	b7b44 <malloc>

000b409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409e:	f003 bd59 	b.w	b7b54 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f003 bd57 	b.w	b7b54 <free>

000b40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a6:	7800      	ldrb	r0, [r0, #0]
   b40a8:	fab0 f080 	clz	r0, r0
   b40ac:	0940      	lsrs	r0, r0, #5
   b40ae:	4770      	bx	lr

000b40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b0:	2301      	movs	r3, #1
   b40b2:	7003      	strb	r3, [r0, #0]
   b40b4:	4770      	bx	lr
	...

000b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40b8:	b510      	push	{r4, lr}
   b40ba:	4b03      	ldr	r3, [pc, #12]	; (b40c8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev+0x10>)
   b40bc:	6003      	str	r3, [r0, #0]
   b40be:	4604      	mov	r4, r0
   b40c0:	f002 fe3e 	bl	b6d40 <_ZN10JsonParserD1Ev>
   b40c4:	4620      	mov	r0, r4
   b40c6:	bd10      	pop	{r4, pc}
   b40c8:	000bd5d0 	.word	0x000bd5d0

000b40cc <_ZN16JsonParserStaticILj10000ELj1000EED0Ev>:
   b40cc:	b510      	push	{r4, lr}
   b40ce:	4604      	mov	r4, r0
   b40d0:	f7ff fff2 	bl	b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
   b40d4:	4620      	mov	r0, r4
   b40d6:	f246 51bc 	movw	r1, #26044	; 0x65bc
   b40da:	f7ff ffe2 	bl	b40a2 <_ZdlPvj>
   b40de:	4620      	mov	r0, r4
   b40e0:	bd10      	pop	{r4, pc}
	...

000b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>:

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
   b40e4:	b508      	push	{r3, lr}
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b40e6:	4603      	mov	r3, r0
   b40e8:	b150      	cbz	r0, b4100 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x1c>
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      _GLIBCXX_NODISCARD _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {
	if (__n > this->_M_max_size())
   b40ea:	4a06      	ldr	r2, [pc, #24]	; (b4104 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x20>)
   b40ec:	4290      	cmp	r0, r2
   b40ee:	d901      	bls.n	b40f4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b40f0:	f006 f84a 	bl	ba188 <_ZSt17__throw_bad_allocv>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b40f4:	200c      	movs	r0, #12
   b40f6:	4358      	muls	r0, r3
      }
   b40f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b40fc:	f7ff bfcb 	b.w	b4096 <_Znwj>
   b4100:	bd08      	pop	{r3, pc}
   b4102:	bf00      	nop
   b4104:	0aaaaaaa 	.word	0x0aaaaaaa

000b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>:

      pointer
      _M_local_data()
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b4108:	f100 0308 	add.w	r3, r0, #8
#if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
   b410c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b410e:	4604      	mov	r4, r0
	: allocator_type(__a), _M_p(__dat) { }
   b4110:	6003      	str	r3, [r0, #0]
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b4112:	460d      	mov	r5, r1
   b4114:	b1d9      	cbz	r1, b414e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x46>
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   b4116:	4608      	mov	r0, r1
   b4118:	f007 f88e 	bl	bb238 <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
   b411c:	280f      	cmp	r0, #15
   b411e:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b4122:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b4124:	d907      	bls.n	b4136 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x2e>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   b4126:	2200      	movs	r2, #0
   b4128:	a901      	add	r1, sp, #4
   b412a:	4620      	mov	r0, r4
   b412c:	f006 f842 	bl	ba1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b4130:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4132:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4134:	60a3      	str	r3, [r4, #8]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b4136:	4632      	mov	r2, r6
   b4138:	4629      	mov	r1, r5
   b413a:	6820      	ldr	r0, [r4, #0]
   b413c:	f006 f875 	bl	ba22a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   b4140:	9b01      	ldr	r3, [sp, #4]
      { __c1 = __c2; }
   b4142:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4144:	6063      	str	r3, [r4, #4]
   b4146:	2100      	movs	r1, #0
   b4148:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b414a:	b002      	add	sp, #8
   b414c:	bd70      	pop	{r4, r5, r6, pc}
	  std::__throw_logic_error(__N("basic_string::"
   b414e:	4801      	ldr	r0, [pc, #4]	; (b4154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x4c>)
   b4150:	f006 f81d 	bl	ba18e <_ZSt19__throw_logic_errorPKc>
   b4154:	000bd2bc 	.word	0x000bd2bc

000b4158 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b4158:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b415a:	4603      	mov	r3, r0
   b415c:	b150      	cbz	r0, b4174 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x1c>
	if (__n > this->_M_max_size())
   b415e:	4a06      	ldr	r2, [pc, #24]	; (b4178 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x20>)
   b4160:	4290      	cmp	r0, r2
   b4162:	d901      	bls.n	b4168 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b4164:	f006 f810 	bl	ba188 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4168:	2018      	movs	r0, #24
   b416a:	4358      	muls	r0, r3
      }
   b416c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4170:	f7ff bf91 	b.w	b4096 <_Znwj>
   b4174:	bd08      	pop	{r3, pc}
   b4176:	bf00      	nop
   b4178:	05555555 	.word	0x05555555

000b417c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b417c:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b417e:	b148      	cbz	r0, b4194 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b4180:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   b4184:	d301      	bcc.n	b418a <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b4186:	f005 ffff 	bl	ba188 <_ZSt17__throw_bad_allocv>
      }
   b418a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b418e:	0080      	lsls	r0, r0, #2
   b4190:	f7ff bf81 	b.w	b4096 <_Znwj>
   b4194:	bd08      	pop	{r3, pc}

000b4196 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b4196:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4198:	b148      	cbz	r0, b41ae <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b419a:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
   b419e:	d301      	bcc.n	b41a4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b41a0:	f005 fff2 	bl	ba188 <_ZSt17__throw_bad_allocv>
      }
   b41a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b41a8:	00c0      	lsls	r0, r0, #3
   b41aa:	f7ff bf74 	b.w	b4096 <_Znwj>
   b41ae:	bd08      	pop	{r3, pc}

000b41b0 <_ZN5Print5printIiLi0EEEjT_i.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b41b0:	b570      	push	{r4, r5, r6, lr}
   b41b2:	4606      	mov	r6, r0
   b41b4:	460c      	mov	r4, r1
{
    if (base == 0) {
   b41b6:	4615      	mov	r5, r2
   b41b8:	b92a      	cbnz	r2, b41c6 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x16>
        return write(n);
   b41ba:	6803      	ldr	r3, [r0, #0]
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
    }
}
   b41bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return write(n);
   b41c0:	689b      	ldr	r3, [r3, #8]
   b41c2:	b2c9      	uxtb	r1, r1
   b41c4:	4718      	bx	r3
        if (n < 0 && base == 10) {
   b41c6:	2900      	cmp	r1, #0
   b41c8:	da0b      	bge.n	b41e2 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x32>
   b41ca:	2a0a      	cmp	r2, #10
   b41cc:	d109      	bne.n	b41e2 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x32>
            t = print('-');
   b41ce:	212d      	movs	r1, #45	; 0x2d
   b41d0:	f005 f8e8 	bl	b93a4 <_ZN5Print5printEc>
            val = -n;
   b41d4:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b41d6:	b2ea      	uxtb	r2, r5
   b41d8:	4630      	mov	r0, r6
}
   b41da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b41de:	f005 b8fa 	b.w	b93d6 <_ZN5Print11printNumberEmh>
            val = n;
   b41e2:	4621      	mov	r1, r4
   b41e4:	e7f7      	b.n	b41d6 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x26>

000b41e6 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b41e6:	b510      	push	{r4, lr}
   b41e8:	4604      	mov	r4, r0
        size_t n = print(b, base);
   b41ea:	f7ff ffe1 	bl	b41b0 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
        n += println();
   b41ee:	4620      	mov	r0, r4
    }
   b41f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b41f4:	f005 b8d9 	b.w	b93aa <_ZN5Print7printlnEv>

000b41f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>:
      basic_string(const basic_string& __str)
   b41f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b41fa:	f100 0308 	add.w	r3, r0, #8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b41fe:	6003      	str	r3, [r0, #0]

      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      size_type
      length() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
   b4200:	e9d1 5300 	ldrd	r5, r3, [r1]
      basic_string(const basic_string& __str)
   b4204:	4604      	mov	r4, r0
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b4206:	18ee      	adds	r6, r5, r3
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   b4208:	b91d      	cbnz	r5, b4212 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
   b420a:	b116      	cbz	r6, b4212 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
	  std::__throw_logic_error(__N("basic_string::"
   b420c:	480c      	ldr	r0, [pc, #48]	; (b4240 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x48>)
   b420e:	f005 ffbe 	bl	ba18e <_ZSt19__throw_logic_errorPKc>
	if (__dnew > size_type(_S_local_capacity))
   b4212:	2b0f      	cmp	r3, #15
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b4214:	9301      	str	r3, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b4216:	d907      	bls.n	b4228 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x30>
	    _M_data(_M_create(__dnew, size_type(0)));
   b4218:	2200      	movs	r2, #0
   b421a:	a901      	add	r1, sp, #4
   b421c:	4620      	mov	r0, r4
   b421e:	f005 ffc9 	bl	ba1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b4222:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4224:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4226:	60a3      	str	r3, [r4, #8]
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b4228:	4632      	mov	r2, r6
   b422a:	4629      	mov	r1, r5
   b422c:	6820      	ldr	r0, [r4, #0]
   b422e:	f005 fff7 	bl	ba220 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	_M_set_length(__dnew);
   b4232:	9b01      	ldr	r3, [sp, #4]
   b4234:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4236:	6063      	str	r3, [r4, #4]
   b4238:	2100      	movs	r1, #0
   b423a:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b423c:	b002      	add	sp, #8
   b423e:	bd70      	pop	{r4, r5, r6, pc}
   b4240:	000bd2bc 	.word	0x000bd2bc

000b4244 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4244:	6803      	ldr	r3, [r0, #0]
   b4246:	b2c9      	uxtb	r1, r1
   b4248:	689b      	ldr	r3, [r3, #8]
   b424a:	4718      	bx	r3

000b424c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
      }
    }
  }
}

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b424c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  String inputBuffer = "";

  if(bleCount <= slaveCountExpected){
   b4250:	4c54      	ldr	r4, [pc, #336]	; (b43a4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x158>)
   b4252:	4d55      	ldr	r5, [pc, #340]	; (b43a8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x15c>)
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4254:	4680      	mov	r8, r0
   b4256:	460e      	mov	r6, r1
  String inputBuffer = "";
   b4258:	4668      	mov	r0, sp
   b425a:	4954      	ldr	r1, [pc, #336]	; (b43ac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x160>)
   b425c:	f005 f95b 	bl	b9516 <_ZN6StringC1EPK19__FlashStringHelper>
  if(bleCount <= slaveCountExpected){
   b4260:	6822      	ldr	r2, [r4, #0]
   b4262:	682b      	ldr	r3, [r5, #0]
   b4264:	429a      	cmp	r2, r3
   b4266:	f300 8093 	bgt.w	b4390 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x144>
    for(int i = 0; i < len - 1; i++){
   b426a:	2700      	movs	r7, #0
   b426c:	3e01      	subs	r6, #1
   b426e:	42be      	cmp	r6, r7
   b4270:	d906      	bls.n	b4280 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x34>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b4272:	f818 1007 	ldrb.w	r1, [r8, r7]
   b4276:	4668      	mov	r0, sp
   b4278:	f005 f9b0 	bl	b95dc <_ZN6String6concatEc>
   b427c:	3701      	adds	r7, #1
   b427e:	e7f6      	b.n	b426e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x22>
      inputBuffer += (char)data[i];
      //input = atoi(inputBuffer);
    }

    if(bleCount < slaveCountExpected){
   b4280:	6822      	ldr	r2, [r4, #0]
   b4282:	682b      	ldr	r3, [r5, #0]
   b4284:	429a      	cmp	r2, r3
   b4286:	da04      	bge.n	b4292 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x46>
      txCharacteristic.setValue("\nEnter the line color of the device with the blinking LED: ");
   b4288:	4949      	ldr	r1, [pc, #292]	; (b43b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x164>)
   b428a:	484a      	ldr	r0, [pc, #296]	; (b43b4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x168>)
   b428c:	2200      	movs	r2, #0
   b428e:	f003 ff53 	bl	b8138 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
   b4292:	4e49      	ldr	r6, [pc, #292]	; (b43b8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x16c>)
    }

    Wire.beginTransmission(addressArr[bleCount]);
   b4294:	f005 ff12 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b4298:	6833      	ldr	r3, [r6, #0]
   b429a:	6822      	ldr	r2, [r4, #0]
   b429c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b42a0:	f004 ff02 	bl	b90a8 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('3');
   b42a4:	f005 ff0a 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b42a8:	2133      	movs	r1, #51	; 0x33
   b42aa:	f7ff ffcb 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b42ae:	f005 ff05 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b42b2:	f004 ff00 	bl	b90b6 <_ZN7TwoWire15endTransmissionEv>

    if(bleCount > 0){
   b42b6:	6823      	ldr	r3, [r4, #0]
   b42b8:	2b00      	cmp	r3, #0
   b42ba:	dd66      	ble.n	b438a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13e>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b42bc:	493f      	ldr	r1, [pc, #252]	; (b43bc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x170>)
   b42be:	4668      	mov	r0, sp
   b42c0:	f005 f9a5 	bl	b960e <_ZNK6String6equalsEPKc>
      int colorAdr = 0;
      if(inputBuffer == "red"){
   b42c4:	2800      	cmp	r0, #0
   b42c6:	d047      	beq.n	b4358 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10c>
        Serial.println("receive red");
   b42c8:	f005 fdaa 	bl	b9e20 <_Z16_fetch_usbserialv>
   b42cc:	493c      	ldr	r1, [pc, #240]	; (b43c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x174>)
   b42ce:	f005 f878 	bl	b93c2 <_ZN5Print7printlnEPKc>
        colorAdr = 0;
   b42d2:	2000      	movs	r0, #0
      // Wire.beginTransmission(addressArr[bleCount - 1]);
      // Wire.write(String(railways.at(colorAdr).colors.at(0).c_str()));
      // Wire.write(String(railways.at(colorAdr).colors.at(1).c_str()));
      // Wire.endTransmission();

      sequenceArr[bleCount - 1] = addressArr[colorAdr];
   b42d4:	6833      	ldr	r3, [r6, #0]
   b42d6:	4a3b      	ldr	r2, [pc, #236]	; (b43c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x178>)
   b42d8:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   b42dc:	6823      	ldr	r3, [r4, #0]
   b42de:	6812      	ldr	r2, [r2, #0]
   b42e0:	3b01      	subs	r3, #1
   b42e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      
      Wire.beginTransmission(addressArr[bleCount - 1]);
   b42e6:	f005 fee9 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b42ea:	6823      	ldr	r3, [r4, #0]
   b42ec:	6832      	ldr	r2, [r6, #0]
   b42ee:	3b01      	subs	r3, #1
   b42f0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   b42f4:	f004 fed8 	bl	b90a8 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('4');
   b42f8:	f005 fee0 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b42fc:	2134      	movs	r1, #52	; 0x34
   b42fe:	f7ff ffa1 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4302:	f005 fedb 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b4306:	f004 fed6 	bl	b90b6 <_ZN7TwoWire15endTransmissionEv>
      if(bleCount == slaveCountExpected){
   b430a:	6822      	ldr	r2, [r4, #0]
   b430c:	682b      	ldr	r3, [r5, #0]
   b430e:	429a      	cmp	r2, r3
   b4310:	d13e      	bne.n	b4390 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x144>
        userInput = true;
   b4312:	4b2d      	ldr	r3, [pc, #180]	; (b43c8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x17c>)
   b4314:	2201      	movs	r2, #1
   b4316:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if(bleCount == slaveCountExpected){
    delay(1000);
   b4318:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b431c:	f003 fc62 	bl	b7be4 <delay>
    Serial.println("\nSequence: ");
   b4320:	f005 fd7e 	bl	b9e20 <_Z16_fetch_usbserialv>
   b4324:	4929      	ldr	r1, [pc, #164]	; (b43cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x180>)
   b4326:	f8df 809c 	ldr.w	r8, [pc, #156]	; b43c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x178>
    for(int i = 0; i < slaveCountExpected; i++){
      Serial.print(sequenceArr[i]);
      Serial.print(", ");
   b432a:	4f29      	ldr	r7, [pc, #164]	; (b43d0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x184>)
    Serial.println("\nSequence: ");
   b432c:	f005 f849 	bl	b93c2 <_ZN5Print7printlnEPKc>
    for(int i = 0; i < slaveCountExpected; i++){
   b4330:	2600      	movs	r6, #0
   b4332:	682b      	ldr	r3, [r5, #0]
   b4334:	42b3      	cmp	r3, r6
   b4336:	dd2b      	ble.n	b4390 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x144>
      Serial.print(sequenceArr[i]);
   b4338:	f005 fd72 	bl	b9e20 <_Z16_fetch_usbserialv>
   b433c:	f8d8 3000 	ldr.w	r3, [r8]
   b4340:	220a      	movs	r2, #10
   b4342:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   b4346:	f7ff ff33 	bl	b41b0 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
      Serial.print(", ");
   b434a:	f005 fd69 	bl	b9e20 <_Z16_fetch_usbserialv>
   b434e:	4639      	mov	r1, r7
   b4350:	f005 f824 	bl	b939c <_ZN5Print5printEPKc>
    for(int i = 0; i < slaveCountExpected; i++){
   b4354:	3601      	adds	r6, #1
   b4356:	e7ec      	b.n	b4332 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xe6>
   b4358:	491e      	ldr	r1, [pc, #120]	; (b43d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x188>)
   b435a:	4668      	mov	r0, sp
   b435c:	f005 f957 	bl	b960e <_ZNK6String6equalsEPKc>
      }else if(inputBuffer == "blue"){
   b4360:	b130      	cbz	r0, b4370 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x124>
        Serial.println("receive blue");
   b4362:	f005 fd5d 	bl	b9e20 <_Z16_fetch_usbserialv>
   b4366:	491c      	ldr	r1, [pc, #112]	; (b43d8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18c>)
   b4368:	f005 f82b 	bl	b93c2 <_ZN5Print7printlnEPKc>
        colorAdr = 1;
   b436c:	2001      	movs	r0, #1
   b436e:	e7b1      	b.n	b42d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>
   b4370:	491a      	ldr	r1, [pc, #104]	; (b43dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x190>)
   b4372:	4668      	mov	r0, sp
   b4374:	f005 f94b 	bl	b960e <_ZNK6String6equalsEPKc>
      }else if(inputBuffer == "green"){
   b4378:	2800      	cmp	r0, #0
   b437a:	d0ab      	beq.n	b42d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>
        Serial.println("receive green");
   b437c:	f005 fd50 	bl	b9e20 <_Z16_fetch_usbserialv>
   b4380:	4917      	ldr	r1, [pc, #92]	; (b43e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x194>)
   b4382:	f005 f81e 	bl	b93c2 <_ZN5Print7printlnEPKc>
        colorAdr = 2;
   b4386:	2002      	movs	r0, #2
   b4388:	e7a4      	b.n	b42d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>
  if(bleCount == slaveCountExpected){
   b438a:	682a      	ldr	r2, [r5, #0]
   b438c:	4293      	cmp	r3, r2
   b438e:	d0c3      	beq.n	b4318 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xcc>
    }
    // BLE.disconnect();
    // BLE.off();
  }

  bleCount++;
   b4390:	6823      	ldr	r3, [r4, #0]
  String inputBuffer = "";
   b4392:	4668      	mov	r0, sp
  bleCount++;
   b4394:	3301      	adds	r3, #1
   b4396:	6023      	str	r3, [r4, #0]
  String inputBuffer = "";
   b4398:	f005 f872 	bl	b9480 <_ZN6StringD1Ev>
}
   b439c:	b004      	add	sp, #16
   b439e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b43a2:	bf00      	nop
   b43a4:	20035548 	.word	0x20035548
   b43a8:	2003531c 	.word	0x2003531c
   b43ac:	000bd726 	.word	0x000bd726
   b43b0:	000bd2e6 	.word	0x000bd2e6
   b43b4:	2003e6a8 	.word	0x2003e6a8
   b43b8:	2003553c 	.word	0x2003553c
   b43bc:	000bd32a 	.word	0x000bd32a
   b43c0:	000bd322 	.word	0x000bd322
   b43c4:	2003e698 	.word	0x2003e698
   b43c8:	2003e6b0 	.word	0x2003e6b0
   b43cc:	000bd349 	.word	0x000bd349
   b43d0:	000bd530 	.word	0x000bd530
   b43d4:	000bd336 	.word	0x000bd336
   b43d8:	000bd32e 	.word	0x000bd32e
   b43dc:	000bd343 	.word	0x000bd343
   b43e0:	000bd33b 	.word	0x000bd33b

000b43e4 <_ZN5Print5writeEPKc.isra.0>:
    size_t write(const char *str) {
   b43e4:	b513      	push	{r0, r1, r4, lr}
   b43e6:	4604      	mov	r4, r0
      if (str == NULL) return 0;
   b43e8:	b161      	cbz	r1, b4404 <_ZN5Print5writeEPKc.isra.0+0x20>
      return write((const uint8_t *)str, strlen(str));
   b43ea:	4608      	mov	r0, r1
   b43ec:	9101      	str	r1, [sp, #4]
   b43ee:	f006 ff23 	bl	bb238 <strlen>
   b43f2:	6823      	ldr	r3, [r4, #0]
   b43f4:	9901      	ldr	r1, [sp, #4]
   b43f6:	68db      	ldr	r3, [r3, #12]
   b43f8:	4602      	mov	r2, r0
   b43fa:	4620      	mov	r0, r4
    }
   b43fc:	b002      	add	sp, #8
   b43fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4402:	4718      	bx	r3
    }
   b4404:	b002      	add	sp, #8
   b4406:	bd10      	pop	{r4, pc}

000b4408 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>:
  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
   b4408:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b440a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b440c:	4604      	mov	r4, r0
   b440e:	460d      	mov	r5, r1
      if (&__x != this)
   b4410:	d025      	beq.n	b445e <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x56>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4412:	e9d1 7100 	ldrd	r7, r1, [r1]
			 - this->_M_impl._M_start); }
   b4416:	6800      	ldr	r0, [r0, #0]
   b4418:	68a3      	ldr	r3, [r4, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b441a:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b441c:	1a1b      	subs	r3, r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
   b441e:	429e      	cmp	r6, r3
   b4420:	d91e      	bls.n	b4460 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x58>
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
   b4422:	10f0      	asrs	r0, r6, #3
   b4424:	f7ff feb7 	bl	b4196 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
   b4428:	2300      	movs	r3, #0
   b442a:	4605      	mov	r5, r0
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
   b442c:	429e      	cmp	r6, r3
   b442e:	d00a      	beq.n	b4446 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x3e>
   */
#if __cplusplus >= 201103L
  template<typename _Tp, typename... _Args>
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4430:	18ea      	adds	r2, r5, r3
   b4432:	bf1c      	itt	ne
   b4434:	18f9      	addne	r1, r7, r3
   b4436:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b443a:	f103 0308 	add.w	r3, r3, #8
   b443e:	bf18      	it	ne
   b4440:	e9c2 0100 	strdne	r0, r1, [r2]
   b4444:	e7f2      	b.n	b442c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x24>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4446:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4448:	b118      	cbz	r0, b4452 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x4a>
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
   b444a:	68a1      	ldr	r1, [r4, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b444c:	1a09      	subs	r1, r1, r0
   b444e:	f7ff fe28 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b4452:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4454:	4435      	add	r5, r6
   b4456:	60a5      	str	r5, [r4, #8]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4458:	6823      	ldr	r3, [r4, #0]
   b445a:	4433      	add	r3, r6
   b445c:	6063      	str	r3, [r4, #4]
	}
      return *this;
    }
   b445e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4460:	6862      	ldr	r2, [r4, #4]
   b4462:	1a12      	subs	r2, r2, r0
	  else if (size() >= __xlen)
   b4464:	4296      	cmp	r6, r2
   b4466:	d806      	bhi.n	b4476 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x6e>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   b4468:	42b9      	cmp	r1, r7
   b446a:	d0f5      	beq.n	b4458 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b446c:	4632      	mov	r2, r6
   b446e:	4639      	mov	r1, r7
   b4470:	f006 fe80 	bl	bb174 <memmove>

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b4474:	e7f0      	b.n	b4458 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	  if (_Num)
   b4476:	b112      	cbz	r2, b447e <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x76>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b4478:	4639      	mov	r1, r7
   b447a:	f006 fe7b 	bl	bb174 <memmove>
   b447e:	e9d4 2700 	ldrd	r2, r7, [r4]
   b4482:	1abb      	subs	r3, r7, r2
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b4484:	682a      	ldr	r2, [r5, #0]
   b4486:	686d      	ldr	r5, [r5, #4]
   b4488:	441a      	add	r2, r3
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   b448a:	1aad      	subs	r5, r5, r2
					  __x._M_impl._M_finish,
   b448c:	2300      	movs	r3, #0
	      for (; __first != __last; ++__first, (void)++__cur)
   b448e:	429d      	cmp	r5, r3
   b4490:	d0e2      	beq.n	b4458 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
   b4492:	eb17 0c03 	adds.w	ip, r7, r3
   b4496:	bf1c      	itt	ne
   b4498:	18d1      	addne	r1, r2, r3
   b449a:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b449e:	f103 0308 	add.w	r3, r3, #8
   b44a2:	bf18      	it	ne
   b44a4:	e9cc 0100 	strdne	r0, r1, [ip]
   b44a8:	e7f1      	b.n	b448e <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x86>
	...

000b44ac <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>:
      if (&__x != this)
   b44ac:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b44ae:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b44b2:	4604      	mov	r4, r0
   b44b4:	468a      	mov	sl, r1
      if (&__x != this)
   b44b6:	d036      	beq.n	b4526 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7a>
   b44b8:	e9d1 5b00 	ldrd	r5, fp, [r1]
			 - this->_M_impl._M_start); }
   b44bc:	f8d0 9000 	ldr.w	r9, [r0]
   b44c0:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b44c2:	4a39      	ldr	r2, [pc, #228]	; (b45a8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xfc>)
   b44c4:	ebab 0705 	sub.w	r7, fp, r5
			 - this->_M_impl._M_start); }
   b44c8:	eba3 0309 	sub.w	r3, r3, r9
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b44cc:	ea4f 08e7 	mov.w	r8, r7, asr #3
	  if (__xlen > capacity())
   b44d0:	42bb      	cmp	r3, r7
   b44d2:	fb02 f808 	mul.w	r8, r2, r8
   b44d6:	d228      	bcs.n	b452a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7e>
	  pointer __result = this->_M_allocate(__n);
   b44d8:	4640      	mov	r0, r8
   b44da:	f7ff fe3d 	bl	b4158 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
   b44de:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   b44e0:	4680      	mov	r8, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b44e2:	45ab      	cmp	fp, r5
   b44e4:	d00a      	beq.n	b44fc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x50>
   b44e6:	f1b8 0f00 	cmp.w	r8, #0
   b44ea:	d003      	beq.n	b44f4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x48>
   b44ec:	4629      	mov	r1, r5
   b44ee:	4640      	mov	r0, r8
   b44f0:	f7ff fe82 	bl	b41f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b44f4:	f108 0818 	add.w	r8, r8, #24
   b44f8:	3518      	adds	r5, #24
   b44fa:	e7f2      	b.n	b44e2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x36>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b44fc:	e9d4 5800 	ldrd	r5, r8, [r4]
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   b4500:	45a8      	cmp	r8, r5
   b4502:	d004      	beq.n	b450e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x62>
      { _M_dispose(); }
   b4504:	4628      	mov	r0, r5
   b4506:	f005 fe77 	bl	ba1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b450a:	3518      	adds	r5, #24
   b450c:	e7f8      	b.n	b4500 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x54>
	      _M_deallocate(this->_M_impl._M_start,
   b450e:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4510:	b118      	cbz	r0, b451a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x6e>
			    - this->_M_impl._M_start);
   b4512:	68a1      	ldr	r1, [r4, #8]
   b4514:	1a09      	subs	r1, r1, r0
   b4516:	f7ff fdc4 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b451a:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b451c:	443e      	add	r6, r7
   b451e:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4520:	6823      	ldr	r3, [r4, #0]
   b4522:	443b      	add	r3, r7
   b4524:	6063      	str	r3, [r4, #4]
    }
   b4526:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b452a:	6846      	ldr	r6, [r0, #4]
   b452c:	eba6 0609 	sub.w	r6, r6, r9
	  else if (size() >= __xlen)
   b4530:	42b7      	cmp	r7, r6
   b4532:	d819      	bhi.n	b4568 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xbc>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4534:	4646      	mov	r6, r8
   b4536:	46ca      	mov	sl, r9
   b4538:	2e00      	cmp	r6, #0
   b453a:	dd08      	ble.n	b454e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xa2>
		  }
	      }
	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
	  }
#endif
	this->_M_assign(__str);
   b453c:	4629      	mov	r1, r5
   b453e:	4650      	mov	r0, sl
   b4540:	f005 fe78 	bl	ba234 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b4544:	3518      	adds	r5, #24
	      ++__result;
   b4546:	f10a 0a18 	add.w	sl, sl, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b454a:	3e01      	subs	r6, #1
   b454c:	e7f4      	b.n	b4538 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x8c>
   b454e:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
   b4552:	2518      	movs	r5, #24
      : _M_current(__i) { }
   b4554:	6866      	ldr	r6, [r4, #4]
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b4556:	fb05 9508 	mla	r5, r5, r8, r9
	  for (; __first != __last; ++__first)
   b455a:	42ae      	cmp	r6, r5
   b455c:	d0e0      	beq.n	b4520 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
      { _M_dispose(); }
   b455e:	4628      	mov	r0, r5
   b4560:	f005 fe4a 	bl	ba1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b4564:	3518      	adds	r5, #24
      {
	++_M_current;
	return *this;
   b4566:	e7f8      	b.n	b455a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xae>
   b4568:	10f6      	asrs	r6, r6, #3
   b456a:	4356      	muls	r6, r2
   b456c:	2e00      	cmp	r6, #0
   b456e:	dd08      	ble.n	b4582 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xd6>
	this->_M_assign(__str);
   b4570:	4629      	mov	r1, r5
   b4572:	4648      	mov	r0, r9
   b4574:	f005 fe5e 	bl	ba234 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b4578:	3518      	adds	r5, #24
	      ++__result;
   b457a:	f109 0918 	add.w	r9, r9, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b457e:	3e01      	subs	r6, #1
   b4580:	e7f4      	b.n	b456c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xc0>
   b4582:	e9d4 5600 	ldrd	r5, r6, [r4]
   b4586:	1b71      	subs	r1, r6, r5
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b4588:	f8da 5000 	ldr.w	r5, [sl]
					  __x._M_impl._M_finish,
   b458c:	f8da 8004 	ldr.w	r8, [sl, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b4590:	440d      	add	r5, r1
   b4592:	45a8      	cmp	r8, r5
   b4594:	d0c4      	beq.n	b4520 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4596:	b11e      	cbz	r6, b45a0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xf4>
   b4598:	4629      	mov	r1, r5
   b459a:	4630      	mov	r0, r6
   b459c:	f7ff fe2c 	bl	b41f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b45a0:	3518      	adds	r5, #24
   b45a2:	3618      	adds	r6, #24
   b45a4:	e7f5      	b.n	b4592 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xe6>
   b45a6:	bf00      	nop
   b45a8:	aaaaaaab 	.word	0xaaaaaaab

000b45ac <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b45ac:	b40e      	push	{r1, r2, r3}
   b45ae:	b503      	push	{r0, r1, lr}
   b45b0:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b45b2:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b45b4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b45b8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b45ba:	f004 ff2a 	bl	b9412 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b45be:	b002      	add	sp, #8
   b45c0:	f85d eb04 	ldr.w	lr, [sp], #4
   b45c4:	b003      	add	sp, #12
   b45c6:	4770      	bx	lr

000b45c8 <_Z17acquireWireBufferv>:

hal_i2c_config_t acquireWireBuffer() {
   b45c8:	b538      	push	{r3, r4, r5, lr}
    hal_i2c_config_t config = {
   b45ca:	f44f 7500 	mov.w	r5, #512	; 0x200
   b45ce:	2314      	movs	r3, #20
hal_i2c_config_t acquireWireBuffer() {
   b45d0:	4604      	mov	r4, r0
    hal_i2c_config_t config = {
   b45d2:	6003      	str	r3, [r0, #0]
   b45d4:	6085      	str	r5, [r0, #8]
   b45d6:	6105      	str	r5, [r0, #16]
        .size = sizeof(hal_i2c_config_t),
        .version = HAL_I2C_CONFIG_VERSION_1,
        .rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b45d8:	4905      	ldr	r1, [pc, #20]	; (b45f0 <_Z17acquireWireBufferv+0x28>)
   b45da:	4628      	mov	r0, r5
   b45dc:	f005 fdd2 	bl	ba184 <_ZnajRKSt9nothrow_t>
        .rx_buffer_size = I2C_BUFFER_SIZE,
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b45e0:	4903      	ldr	r1, [pc, #12]	; (b45f0 <_Z17acquireWireBufferv+0x28>)
        .tx_buffer_size = I2C_BUFFER_SIZE
    };
   b45e2:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b45e4:	4628      	mov	r0, r5
   b45e6:	f005 fdcd 	bl	ba184 <_ZnajRKSt9nothrow_t>
    };
   b45ea:	60e0      	str	r0, [r4, #12]
    return config;
   b45ec:	4620      	mov	r0, r4
   b45ee:	bd38      	pop	{r3, r4, r5, pc}
   b45f0:	000bdb2c 	.word	0x000bdb2c

000b45f4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b45f4:	b510      	push	{r4, lr}
   b45f6:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b45f8:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b45fa:	b118      	cbz	r0, b4604 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b45fc:	68a1      	ldr	r1, [r4, #8]
   b45fe:	1a09      	subs	r1, r1, r0
   b4600:	f7ff fd4f 	bl	b40a2 <_ZdlPvj>
      }
   b4604:	4620      	mov	r0, r4
   b4606:	bd10      	pop	{r4, pc}

000b4608 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4608:	b510      	push	{r4, lr}
   b460a:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b460c:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b460e:	b118      	cbz	r0, b4618 <_ZNSt12_Vector_baseIfSaIfEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4610:	68a1      	ldr	r1, [r4, #8]
   b4612:	1a09      	subs	r1, r1, r0
   b4614:	f7ff fd45 	bl	b40a2 <_ZdlPvj>
      }
   b4618:	4620      	mov	r0, r4
   b461a:	bd10      	pop	{r4, pc}

000b461c <_ZNSt12_Vector_baseIiSaIiEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b461c:	b510      	push	{r4, lr}
   b461e:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4620:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b4622:	b118      	cbz	r0, b462c <_ZNSt12_Vector_baseIiSaIiEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4624:	68a1      	ldr	r1, [r4, #8]
   b4626:	1a09      	subs	r1, r1, r0
   b4628:	f7ff fd3b 	bl	b40a2 <_ZdlPvj>
      }
   b462c:	4620      	mov	r0, r4
   b462e:	bd10      	pop	{r4, pc}

000b4630 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b4630:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4632:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   b4636:	4604      	mov	r4, r0
	  for (; __first != __last; ++__first)
   b4638:	42ae      	cmp	r6, r5
   b463a:	d004      	beq.n	b4646 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x16>
      { _M_dispose(); }
   b463c:	4628      	mov	r0, r5
   b463e:	f005 fddb 	bl	ba1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4642:	3518      	adds	r5, #24
   b4644:	e7f8      	b.n	b4638 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   b4646:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4648:	b118      	cbz	r0, b4652 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x22>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b464a:	68a1      	ldr	r1, [r4, #8]
   b464c:	1a09      	subs	r1, r1, r0
   b464e:	f7ff fd28 	bl	b40a2 <_ZdlPvj>
      }
   b4652:	4620      	mov	r0, r4
   b4654:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4658 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>:

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4658:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
      vector(size_type __n, const value_type& __value,
   b465c:	b570      	push	{r4, r5, r6, lr}
   b465e:	4604      	mov	r4, r0
   b4660:	460d      	mov	r5, r1
   b4662:	4616      	mov	r6, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4664:	d302      	bcc.n	b466c <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x14>
	  __throw_length_error(
   b4666:	480c      	ldr	r0, [pc, #48]	; (b4698 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x40>)
   b4668:	f005 fd94 	bl	ba194 <_ZSt20__throw_length_errorPKc>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b466c:	2300      	movs	r3, #0
   b466e:	e9c0 3300 	strd	r3, r3, [r0]
   b4672:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4674:	4608      	mov	r0, r1
   b4676:	f7ff fd81 	bl	b417c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b467a:	eb00 0385 	add.w	r3, r0, r5, lsl #2
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b467e:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4682:	60a3      	str	r3, [r4, #8]
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
   b4684:	b12d      	cbz	r5, b4692 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x3a>
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
   b4686:	6832      	ldr	r2, [r6, #0]
      for (; __first != __last; ++__first)
   b4688:	4283      	cmp	r3, r0
   b468a:	d002      	beq.n	b4692 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x3a>
	*__first = __tmp;
   b468c:	f840 2b04 	str.w	r2, [r0], #4
      for (; __first != __last; ++__first)
   b4690:	e7fa      	b.n	b4688 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x30>
	this->_M_impl._M_finish =
   b4692:	6060      	str	r0, [r4, #4]
      { _M_fill_initialize(__n, __value); }
   b4694:	4620      	mov	r0, r4
   b4696:	bd70      	pop	{r4, r5, r6, pc}
   b4698:	000bd355 	.word	0x000bd355

000b469c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
   b469c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b46a0:	2400      	movs	r4, #0
      vector(initializer_list<value_type> __l,
   b46a2:	ab02      	add	r3, sp, #8
   b46a4:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b46a8:	e9c0 4400 	strd	r4, r4, [r0]
      constexpr const_iterator
      begin() const noexcept { return _M_array; }

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
   b46ac:	4613      	mov	r3, r2
      vector(initializer_list<value_type> __l,
   b46ae:	4605      	mov	r5, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b46b0:	6084      	str	r4, [r0, #8]
   b46b2:	00d7      	lsls	r7, r2, #3
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b46b4:	f342 001c 	sbfx	r0, r2, #0, #29
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b46b8:	4a10      	ldr	r2, [pc, #64]	; (b46fc <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x60>)
   b46ba:	ebb2 0fc3 	cmp.w	r2, r3, lsl #3
   b46be:	4688      	mov	r8, r1
   b46c0:	d202      	bcs.n	b46c8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x2c>
	  __throw_length_error(
   b46c2:	480f      	ldr	r0, [pc, #60]	; (b4700 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x64>)
   b46c4:	f005 fd66 	bl	ba194 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b46c8:	f7ff fd65 	bl	b4196 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b46cc:	19c6      	adds	r6, r0, r7
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b46ce:	4602      	mov	r2, r0
   b46d0:	6028      	str	r0, [r5, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b46d2:	60ae      	str	r6, [r5, #8]
   b46d4:	4623      	mov	r3, r4
   b46d6:	429f      	cmp	r7, r3
   b46d8:	d00b      	beq.n	b46f2 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x56>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b46da:	18d4      	adds	r4, r2, r3
   b46dc:	bf1c      	itt	ne
   b46de:	eb08 0103 	addne.w	r1, r8, r3
   b46e2:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b46e6:	f103 0308 	add.w	r3, r3, #8
   b46ea:	bf18      	it	ne
   b46ec:	e9c4 0100 	strdne	r0, r1, [r4]
   b46f0:	e7f1      	b.n	b46d6 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x3a>
      }
   b46f2:	4628      	mov	r0, r5
	  this->_M_impl._M_finish =
   b46f4:	606e      	str	r6, [r5, #4]
      }
   b46f6:	b002      	add	sp, #8
   b46f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b46fc:	7ffffff8 	.word	0x7ffffff8
   b4700:	000bd355 	.word	0x000bd355

000b4704 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>:
      vector(initializer_list<value_type> __l,
   b4704:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4708:	ab02      	add	r3, sp, #8
   b470a:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b470e:	2300      	movs	r3, #0
   b4710:	e9c0 3300 	strd	r3, r3, [r0]
   b4714:	6083      	str	r3, [r0, #8]
   b4716:	4616      	mov	r6, r2
   b4718:	2318      	movs	r3, #24
   b471a:	435e      	muls	r6, r3
   b471c:	4b10      	ldr	r3, [pc, #64]	; (b4760 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x5c>)
      vector(initializer_list<value_type> __l,
   b471e:	4604      	mov	r4, r0
   b4720:	10f0      	asrs	r0, r6, #3
   b4722:	4358      	muls	r0, r3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4724:	4b0f      	ldr	r3, [pc, #60]	; (b4764 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x60>)
   b4726:	429e      	cmp	r6, r3
   b4728:	460f      	mov	r7, r1
   b472a:	eb01 0806 	add.w	r8, r1, r6
   b472e:	d902      	bls.n	b4736 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x32>
	  __throw_length_error(
   b4730:	480d      	ldr	r0, [pc, #52]	; (b4768 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x64>)
   b4732:	f005 fd2f 	bl	ba194 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4736:	f7ff fd0f 	bl	b4158 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b473a:	4406      	add	r6, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b473c:	4605      	mov	r5, r0
   b473e:	6020      	str	r0, [r4, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4740:	60a6      	str	r6, [r4, #8]
   b4742:	45b8      	cmp	r8, r7
   b4744:	d007      	beq.n	b4756 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x52>
   b4746:	b11d      	cbz	r5, b4750 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x4c>
   b4748:	4639      	mov	r1, r7
   b474a:	4628      	mov	r0, r5
   b474c:	f7ff fd54 	bl	b41f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b4750:	3718      	adds	r7, #24
   b4752:	3518      	adds	r5, #24
   b4754:	e7f5      	b.n	b4742 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x3e>
      }
   b4756:	4620      	mov	r0, r4
	  this->_M_impl._M_finish =
   b4758:	6065      	str	r5, [r4, #4]
      }
   b475a:	b002      	add	sp, #8
   b475c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4760:	aaaaaaab 	.word	0xaaaaaaab
   b4764:	7ffffff8 	.word	0x7ffffff8
   b4768:	000bd355 	.word	0x000bd355

000b476c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   b476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b476e:	e9d1 3700 	ldrd	r3, r7, [r1]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4772:	2500      	movs	r5, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4774:	1aff      	subs	r7, r7, r3
      vector(const vector& __x)
   b4776:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4778:	e9c0 5500 	strd	r5, r5, [r0]
   b477c:	6085      	str	r5, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b477e:	10f8      	asrs	r0, r7, #3
      vector(const vector& __x)
   b4780:	460e      	mov	r6, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4782:	f7ff fd08 	bl	b4196 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4786:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b478a:	4407      	add	r7, r0
   b478c:	60a7      	str	r7, [r4, #8]
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b478e:	e9d6 7600 	ldrd	r7, r6, [r6]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4792:	4602      	mov	r2, r0
   b4794:	1bf6      	subs	r6, r6, r7
      : _M_current(__i) { }
   b4796:	462b      	mov	r3, r5
   b4798:	42b3      	cmp	r3, r6
   b479a:	eb02 0503 	add.w	r5, r2, r3
   b479e:	d006      	beq.n	b47ae <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x42>
   b47a0:	b11d      	cbz	r5, b47aa <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x3e>
   b47a2:	18f9      	adds	r1, r7, r3
   b47a4:	c903      	ldmia	r1, {r0, r1}
   b47a6:	e885 0003 	stmia.w	r5, {r0, r1}
   b47aa:	3308      	adds	r3, #8
   b47ac:	e7f4      	b.n	b4798 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x2c>
	this->_M_impl._M_finish =
   b47ae:	6065      	str	r5, [r4, #4]
      }
   b47b0:	4620      	mov	r0, r4
   b47b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b47b4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>:
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
   b47b4:	b508      	push	{r3, lr}
      { return _M_string_length; }
   b47b6:	6842      	ldr	r2, [r0, #4]
	       const basic_string<_CharT>& __rhs) _GLIBCXX_NOEXCEPT
    { return (__lhs.size() == __rhs.size()
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
   b47b8:	684b      	ldr	r3, [r1, #4]
   b47ba:	429a      	cmp	r2, r3
   b47bc:	d108      	bne.n	b47d0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1c>
	if (__n == 0)
   b47be:	b14a      	cbz	r2, b47d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x20>
	return __builtin_memcmp(__s1, __s2, __n);
   b47c0:	6809      	ldr	r1, [r1, #0]
   b47c2:	6800      	ldr	r0, [r0, #0]
   b47c4:	f006 fcb8 	bl	bb138 <memcmp>
   b47c8:	fab0 f080 	clz	r0, r0
   b47cc:	0940      	lsrs	r0, r0, #5
						    __lhs.size())); }
   b47ce:	bd08      	pop	{r3, pc}
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
   b47d0:	2000      	movs	r0, #0
   b47d2:	e7fc      	b.n	b47ce <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1a>
   b47d4:	2001      	movs	r0, #1
   b47d6:	e7fa      	b.n	b47ce <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1a>

000b47d8 <_Z16randomizeAddressv>:
void randomizeAddress(){
   b47d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while(slaveCount != slaveCountExpected){
   b47dc:	4dbd      	ldr	r5, [pc, #756]	; (b4ad4 <_Z16randomizeAddressv+0x2fc>)
   b47de:	f8df 8320 	ldr.w	r8, [pc, #800]	; b4b00 <_Z16randomizeAddressv+0x328>
void randomizeAddress(){
   b47e2:	b091      	sub	sp, #68	; 0x44
  while(slaveCount != slaveCountExpected){
   b47e4:	682a      	ldr	r2, [r5, #0]
   b47e6:	f8d8 3000 	ldr.w	r3, [r8]
   b47ea:	429a      	cmp	r2, r3
   b47ec:	f000 80ff 	beq.w	b49ee <_Z16randomizeAddressv+0x216>
    slaveCount = 0;
   b47f0:	2300      	movs	r3, #0

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b47f2:	f8df 9310 	ldr.w	r9, [pc, #784]	; b4b04 <_Z16randomizeAddressv+0x32c>
   b47f6:	f8df a310 	ldr.w	sl, [pc, #784]	; b4b08 <_Z16randomizeAddressv+0x330>
        String inputBuffer = "";
   b47fa:	4fb7      	ldr	r7, [pc, #732]	; (b4ad8 <_Z16randomizeAddressv+0x300>)
    slaveCount = 0;
   b47fc:	602b      	str	r3, [r5, #0]
    for(int i = 8; i <= 119; i++){
   b47fe:	2408      	movs	r4, #8
      Serial.println("\nrequest code 1, address: " + String(i));
   b4800:	f005 fb0e 	bl	b9e20 <_Z16_fetch_usbserialv>
   b4804:	4649      	mov	r1, r9
   b4806:	4606      	mov	r6, r0
   b4808:	a80c      	add	r0, sp, #48	; 0x30
   b480a:	f004 fe84 	bl	b9516 <_ZN6StringC1EPK19__FlashStringHelper>
   b480e:	220a      	movs	r2, #10
   b4810:	4621      	mov	r1, r4
   b4812:	a808      	add	r0, sp, #32
   b4814:	f004 feb4 	bl	b9580 <_ZN6StringC1Eih>
   b4818:	a908      	add	r1, sp, #32
   b481a:	a80c      	add	r0, sp, #48	; 0x30
   b481c:	f004 feeb 	bl	b95f6 <_ZplRK15StringSumHelperRK6String>
   b4820:	6801      	ldr	r1, [r0, #0]
   b4822:	4630      	mov	r0, r6
   b4824:	f004 fdcd 	bl	b93c2 <_ZN5Print7printlnEPKc>
   b4828:	a808      	add	r0, sp, #32
   b482a:	f004 fe29 	bl	b9480 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b482e:	a80c      	add	r0, sp, #48	; 0x30
   b4830:	f004 fe26 	bl	b9480 <_ZN6StringD1Ev>
      Wire.beginTransmission(i);
   b4834:	f005 fc42 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b4838:	4621      	mov	r1, r4
   b483a:	f004 fc35 	bl	b90a8 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('1');
   b483e:	f005 fc3d 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b4842:	2131      	movs	r1, #49	; 0x31
   b4844:	f7ff fcfe 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4848:	fa5f fb84 	uxtb.w	fp, r4
   b484c:	f005 fc36 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b4850:	f004 fc31 	bl	b90b6 <_ZN7TwoWire15endTransmissionEv>
      Wire.requestFrom(i, 24);
   b4854:	f005 fc32 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b4858:	2218      	movs	r2, #24
   b485a:	4659      	mov	r1, fp
   b485c:	f004 fc1d 	bl	b909a <_ZN7TwoWire11requestFromEhj>
      if(Wire.available() > 0){
   b4860:	f005 fc2c 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b4864:	6803      	ldr	r3, [r0, #0]
   b4866:	691b      	ldr	r3, [r3, #16]
   b4868:	4798      	blx	r3
   b486a:	2800      	cmp	r0, #0
   b486c:	f340 80ba 	ble.w	b49e4 <_Z16randomizeAddressv+0x20c>
        Serial.println("transmission recieved from: " + String(i));
   b4870:	f005 fad6 	bl	b9e20 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4874:	4651      	mov	r1, sl
   b4876:	4606      	mov	r6, r0
   b4878:	a80c      	add	r0, sp, #48	; 0x30
   b487a:	f004 fe4c 	bl	b9516 <_ZN6StringC1EPK19__FlashStringHelper>
   b487e:	220a      	movs	r2, #10
   b4880:	4621      	mov	r1, r4
   b4882:	a808      	add	r0, sp, #32
   b4884:	f004 fe7c 	bl	b9580 <_ZN6StringC1Eih>
   b4888:	a908      	add	r1, sp, #32
   b488a:	a80c      	add	r0, sp, #48	; 0x30
   b488c:	f004 feb3 	bl	b95f6 <_ZplRK15StringSumHelperRK6String>
   b4890:	6801      	ldr	r1, [r0, #0]
   b4892:	4630      	mov	r0, r6
   b4894:	f004 fd95 	bl	b93c2 <_ZN5Print7printlnEPKc>
   b4898:	a808      	add	r0, sp, #32
   b489a:	f004 fdf1 	bl	b9480 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b489e:	a80c      	add	r0, sp, #48	; 0x30
   b48a0:	f004 fdee 	bl	b9480 <_ZN6StringD1Ev>
        slaveCount++;
   b48a4:	682b      	ldr	r3, [r5, #0]
        String inputBuffer = "";
   b48a6:	4639      	mov	r1, r7
        slaveCount++;
   b48a8:	3301      	adds	r3, #1
        String inputBuffer = "";
   b48aa:	a804      	add	r0, sp, #16
        slaveCount++;
   b48ac:	602b      	str	r3, [r5, #0]
        String inputBuffer = "";
   b48ae:	f004 fe32 	bl	b9516 <_ZN6StringC1EPK19__FlashStringHelper>
   b48b2:	2618      	movs	r6, #24
          c = Wire.read();
   b48b4:	f005 fc02 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b48b8:	6803      	ldr	r3, [r0, #0]
   b48ba:	695b      	ldr	r3, [r3, #20]
   b48bc:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b48be:	b2c1      	uxtb	r1, r0
   b48c0:	a804      	add	r0, sp, #16
   b48c2:	f004 fe8b 	bl	b95dc <_ZN6String6concatEc>
        for(int j = 0; j < 24; j++){
   b48c6:	3e01      	subs	r6, #1
   b48c8:	d1f4      	bne.n	b48b4 <_Z16randomizeAddressv+0xdc>
        Wire.beginTransmission(i);
   b48ca:	f005 fbf7 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b48ce:	4621      	mov	r1, r4
   b48d0:	f004 fbea 	bl	b90a8 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(inputBuffer);
   b48d4:	f005 fbf2 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b48d8:	9904      	ldr	r1, [sp, #16]
   b48da:	f7ff fd83 	bl	b43e4 <_ZN5Print5writeEPKc.isra.0>
        Serial.println("device id: " + inputBuffer);
   b48de:	f005 fa9f 	bl	b9e20 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b48e2:	497e      	ldr	r1, [pc, #504]	; (b4adc <_Z16randomizeAddressv+0x304>)
   b48e4:	4606      	mov	r6, r0
   b48e6:	a80c      	add	r0, sp, #48	; 0x30
   b48e8:	f004 fe15 	bl	b9516 <_ZN6StringC1EPK19__FlashStringHelper>
   b48ec:	a904      	add	r1, sp, #16
   b48ee:	a80c      	add	r0, sp, #48	; 0x30
   b48f0:	f004 fe81 	bl	b95f6 <_ZplRK15StringSumHelperRK6String>
   b48f4:	6801      	ldr	r1, [r0, #0]
   b48f6:	4630      	mov	r0, r6
   b48f8:	f004 fd63 	bl	b93c2 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b48fc:	a80c      	add	r0, sp, #48	; 0x30
   b48fe:	f004 fdbf 	bl	b9480 <_ZN6StringD1Ev>
        Wire.endTransmission();
   b4902:	f005 fbdb 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b4906:	f004 fbd6 	bl	b90b6 <_ZN7TwoWire15endTransmissionEv>
        Serial.println("transmission sent to: " + String(i));
   b490a:	f005 fa89 	bl	b9e20 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b490e:	4974      	ldr	r1, [pc, #464]	; (b4ae0 <_Z16randomizeAddressv+0x308>)
   b4910:	4606      	mov	r6, r0
   b4912:	a80c      	add	r0, sp, #48	; 0x30
   b4914:	f004 fdff 	bl	b9516 <_ZN6StringC1EPK19__FlashStringHelper>
   b4918:	220a      	movs	r2, #10
   b491a:	4621      	mov	r1, r4
   b491c:	a808      	add	r0, sp, #32
   b491e:	f004 fe2f 	bl	b9580 <_ZN6StringC1Eih>
   b4922:	a908      	add	r1, sp, #32
   b4924:	a80c      	add	r0, sp, #48	; 0x30
   b4926:	f004 fe66 	bl	b95f6 <_ZplRK15StringSumHelperRK6String>
   b492a:	6801      	ldr	r1, [r0, #0]
   b492c:	4630      	mov	r0, r6
   b492e:	f004 fd48 	bl	b93c2 <_ZN5Print7printlnEPKc>
   b4932:	a808      	add	r0, sp, #32
   b4934:	f004 fda4 	bl	b9480 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4938:	a80c      	add	r0, sp, #48	; 0x30
   b493a:	f004 fda1 	bl	b9480 <_ZN6StringD1Ev>
        Wire.beginTransmission(i);
   b493e:	f005 fbbd 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b4942:	4621      	mov	r1, r4
   b4944:	f004 fbb0 	bl	b90a8 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('2');
   b4948:	f005 fbb8 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b494c:	2132      	movs	r1, #50	; 0x32
   b494e:	f7ff fc79 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b4952:	f005 fbb3 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b4956:	f004 fbae 	bl	b90b6 <_ZN7TwoWire15endTransmissionEv>
        Serial.println("request code 2, address: " + String(i));
   b495a:	f005 fa61 	bl	b9e20 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b495e:	4961      	ldr	r1, [pc, #388]	; (b4ae4 <_Z16randomizeAddressv+0x30c>)
   b4960:	4606      	mov	r6, r0
   b4962:	a80c      	add	r0, sp, #48	; 0x30
   b4964:	f004 fdd7 	bl	b9516 <_ZN6StringC1EPK19__FlashStringHelper>
   b4968:	220a      	movs	r2, #10
   b496a:	4621      	mov	r1, r4
   b496c:	a808      	add	r0, sp, #32
   b496e:	f004 fe07 	bl	b9580 <_ZN6StringC1Eih>
   b4972:	a908      	add	r1, sp, #32
   b4974:	a80c      	add	r0, sp, #48	; 0x30
   b4976:	f004 fe3e 	bl	b95f6 <_ZplRK15StringSumHelperRK6String>
   b497a:	6801      	ldr	r1, [r0, #0]
   b497c:	4630      	mov	r0, r6
   b497e:	f004 fd20 	bl	b93c2 <_ZN5Print7printlnEPKc>
   b4982:	a808      	add	r0, sp, #32
   b4984:	f004 fd7c 	bl	b9480 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4988:	a80c      	add	r0, sp, #48	; 0x30
   b498a:	f004 fd79 	bl	b9480 <_ZN6StringD1Ev>
        Wire.requestFrom(i, 4);
   b498e:	f005 fb95 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b4992:	2204      	movs	r2, #4
   b4994:	4659      	mov	r1, fp
   b4996:	f004 fb80 	bl	b909a <_ZN7TwoWire11requestFromEhj>
        inputBuffer = "";
   b499a:	4639      	mov	r1, r7
   b499c:	a804      	add	r0, sp, #16
   b499e:	f004 fddd 	bl	b955c <_ZN6StringaSEPKc>
   b49a2:	2604      	movs	r6, #4
          inputBuffer += (char)Wire.read();
   b49a4:	f005 fb8a 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b49a8:	6803      	ldr	r3, [r0, #0]
   b49aa:	695b      	ldr	r3, [r3, #20]
   b49ac:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b49ae:	b2c1      	uxtb	r1, r0
   b49b0:	a804      	add	r0, sp, #16
   b49b2:	f004 fe13 	bl	b95dc <_ZN6String6concatEc>
        for(int j = 0; j < 4; j++){
   b49b6:	3e01      	subs	r6, #1
   b49b8:	d1f4      	bne.n	b49a4 <_Z16randomizeAddressv+0x1cc>
        Serial.println("conflict verification: " + inputBuffer);
   b49ba:	f005 fa31 	bl	b9e20 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b49be:	494a      	ldr	r1, [pc, #296]	; (b4ae8 <_Z16randomizeAddressv+0x310>)
   b49c0:	4606      	mov	r6, r0
   b49c2:	a80c      	add	r0, sp, #48	; 0x30
   b49c4:	f004 fda7 	bl	b9516 <_ZN6StringC1EPK19__FlashStringHelper>
   b49c8:	a904      	add	r1, sp, #16
   b49ca:	a80c      	add	r0, sp, #48	; 0x30
   b49cc:	f004 fe13 	bl	b95f6 <_ZplRK15StringSumHelperRK6String>
   b49d0:	6801      	ldr	r1, [r0, #0]
   b49d2:	4630      	mov	r0, r6
   b49d4:	f004 fcf5 	bl	b93c2 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b49d8:	a80c      	add	r0, sp, #48	; 0x30
   b49da:	f004 fd51 	bl	b9480 <_ZN6StringD1Ev>
        String inputBuffer = "";
   b49de:	a804      	add	r0, sp, #16
   b49e0:	f004 fd4e 	bl	b9480 <_ZN6StringD1Ev>
    for(int i = 8; i <= 119; i++){
   b49e4:	3401      	adds	r4, #1
   b49e6:	2c78      	cmp	r4, #120	; 0x78
   b49e8:	f47f af0a 	bne.w	b4800 <_Z16randomizeAddressv+0x28>
   b49ec:	e6fa      	b.n	b47e4 <_Z16randomizeAddressv+0xc>
  Serial.println("\nConnected to: ");
   b49ee:	f005 fa17 	bl	b9e20 <_Z16_fetch_usbserialv>
   b49f2:	493e      	ldr	r1, [pc, #248]	; (b4aec <_Z16randomizeAddressv+0x314>)
      Serial.print(", ");
   b49f4:	4e3e      	ldr	r6, [pc, #248]	; (b4af0 <_Z16randomizeAddressv+0x318>)
	return *(this->_M_impl._M_start + __n);
   b49f6:	4f3f      	ldr	r7, [pc, #252]	; (b4af4 <_Z16randomizeAddressv+0x31c>)
  Serial.println("\nConnected to: ");
   b49f8:	f004 fce3 	bl	b93c2 <_ZN5Print7printlnEPKc>
  for(int i = 8; i<= 119; i++){
   b49fc:	2408      	movs	r4, #8
  int count = 0;
   b49fe:	2500      	movs	r5, #0
    Wire.beginTransmission(i);
   b4a00:	f005 fb5c 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b4a04:	4621      	mov	r1, r4
   b4a06:	f004 fb4f 	bl	b90a8 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('1');
   b4a0a:	f005 fb57 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b4a0e:	2131      	movs	r1, #49	; 0x31
   b4a10:	f7ff fc18 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b4a14:	f005 fb52 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b4a18:	f004 fb4d 	bl	b90b6 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(i, 24);
   b4a1c:	f005 fb4e 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b4a20:	2218      	movs	r2, #24
   b4a22:	b2e1      	uxtb	r1, r4
   b4a24:	f004 fb39 	bl	b909a <_ZN7TwoWire11requestFromEhj>
    if(Wire.available() > 0){
   b4a28:	f005 fb48 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b4a2c:	6803      	ldr	r3, [r0, #0]
   b4a2e:	691b      	ldr	r3, [r3, #16]
   b4a30:	4798      	blx	r3
   b4a32:	2800      	cmp	r0, #0
   b4a34:	dd0e      	ble.n	b4a54 <_Z16randomizeAddressv+0x27c>
      Serial.print(i);
   b4a36:	f005 f9f3 	bl	b9e20 <_Z16_fetch_usbserialv>
   b4a3a:	220a      	movs	r2, #10
   b4a3c:	4621      	mov	r1, r4
   b4a3e:	f7ff fbb7 	bl	b41b0 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
      Serial.print(", ");
   b4a42:	f005 f9ed 	bl	b9e20 <_Z16_fetch_usbserialv>
   b4a46:	4631      	mov	r1, r6
   b4a48:	f004 fca8 	bl	b939c <_ZN5Print5printEPKc>
      addressArr[count++] = i;
   b4a4c:	683b      	ldr	r3, [r7, #0]
   b4a4e:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
   b4a52:	3501      	adds	r5, #1
  for(int i = 8; i<= 119; i++){
   b4a54:	3401      	adds	r4, #1
   b4a56:	2c78      	cmp	r4, #120	; 0x78
   b4a58:	d1d2      	bne.n	b4a00 <_Z16randomizeAddressv+0x228>
   b4a5a:	2400      	movs	r4, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4a5c:	f8df 80ac 	ldr.w	r8, [pc, #172]	; b4b0c <_Z16randomizeAddressv+0x334>
	return *(this->_M_impl._M_start + __n);
   b4a60:	f8df b0ac 	ldr.w	fp, [pc, #172]	; b4b10 <_Z16randomizeAddressv+0x338>
  for(int i = 0; i < railways.size(); i++){
   b4a64:	4626      	mov	r6, r4
  int seqCount = 0;
   b4a66:	4627      	mov	r7, r4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4a68:	e9d8 1200 	ldrd	r1, r2, [r8]
   b4a6c:	4b22      	ldr	r3, [pc, #136]	; (b4af8 <_Z16randomizeAddressv+0x320>)
   b4a6e:	1a52      	subs	r2, r2, r1
   b4a70:	1092      	asrs	r2, r2, #2
   b4a72:	435a      	muls	r2, r3
  for(int i = 0; i < railways.size(); i++){
   b4a74:	42b2      	cmp	r2, r6
   b4a76:	d975      	bls.n	b4b64 <_Z16randomizeAddressv+0x38c>
   b4a78:	226c      	movs	r2, #108	; 0x6c
   b4a7a:	fb02 f306 	mul.w	r3, r2, r6
   b4a7e:	9301      	str	r3, [sp, #4]
   b4a80:	1d23      	adds	r3, r4, #4
   b4a82:	9302      	str	r3, [sp, #8]
   b4a84:	46a1      	mov	r9, r4
   b4a86:	463a      	mov	r2, r7
   b4a88:	2500      	movs	r5, #0
	return *(this->_M_impl._M_start + __n);
   b4a8a:	9b01      	ldr	r3, [sp, #4]
   b4a8c:	f8d8 0000 	ldr.w	r0, [r8]
   b4a90:	9203      	str	r2, [sp, #12]
   b4a92:	4418      	add	r0, r3
   b4a94:	f8db 3000 	ldr.w	r3, [fp]
   b4a98:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b4a9a:	eb01 0e05 	add.w	lr, r1, r5
   b4a9e:	eb03 0a09 	add.w	sl, r3, r9
      if(railways[i].outputs[j].size() == 0 || railways[i].name == purpleLine.name){
   b4aa2:	5949      	ldr	r1, [r1, r5]
   b4aa4:	f8de 3004 	ldr.w	r3, [lr, #4]
   b4aa8:	428b      	cmp	r3, r1
   b4aaa:	d005      	beq.n	b4ab8 <_Z16randomizeAddressv+0x2e0>
   b4aac:	4913      	ldr	r1, [pc, #76]	; (b4afc <_Z16randomizeAddressv+0x324>)
   b4aae:	3030      	adds	r0, #48	; 0x30
   b4ab0:	f7ff fe80 	bl	b47b4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b4ab4:	9a03      	ldr	r2, [sp, #12]
   b4ab6:	b368      	cbz	r0, b4b14 <_Z16randomizeAddressv+0x33c>
        sequenceArr[2 * i + j] = 0;
   b4ab8:	2300      	movs	r3, #0
   b4aba:	f8ca 3000 	str.w	r3, [sl]
    for(int j = 0; j < 2; j++){
   b4abe:	350c      	adds	r5, #12
   b4ac0:	2d18      	cmp	r5, #24
   b4ac2:	f109 0904 	add.w	r9, r9, #4
   b4ac6:	d102      	bne.n	b4ace <_Z16randomizeAddressv+0x2f6>
  for(int i = 0; i < railways.size(); i++){
   b4ac8:	3601      	adds	r6, #1
   b4aca:	3408      	adds	r4, #8
   b4acc:	e7cc      	b.n	b4a68 <_Z16randomizeAddressv+0x290>
   b4ace:	463a      	mov	r2, r7
   b4ad0:	e7db      	b.n	b4a8a <_Z16randomizeAddressv+0x2b2>
   b4ad2:	bf00      	nop
   b4ad4:	2003e6a4 	.word	0x2003e6a4
   b4ad8:	000bd726 	.word	0x000bd726
   b4adc:	000bd3be 	.word	0x000bd3be
   b4ae0:	000bd3ca 	.word	0x000bd3ca
   b4ae4:	000bd3e1 	.word	0x000bd3e1
   b4ae8:	000bd3fb 	.word	0x000bd3fb
   b4aec:	000bd413 	.word	0x000bd413
   b4af0:	000bd530 	.word	0x000bd530
   b4af4:	2003553c 	.word	0x2003553c
   b4af8:	684bda13 	.word	0x684bda13
   b4afc:	2003e57c 	.word	0x2003e57c
   b4b00:	2003531c 	.word	0x2003531c
   b4b04:	000bd386 	.word	0x000bd386
   b4b08:	000bd3a1 	.word	0x000bd3a1
   b4b0c:	2003e5b8 	.word	0x2003e5b8
   b4b10:	2003e698 	.word	0x2003e698
        sequenceArr[2 * i + j] = addressArr[seqCount++];
   b4b14:	4b15      	ldr	r3, [pc, #84]	; (b4b6c <_Z16randomizeAddressv+0x394>)
   b4b16:	6819      	ldr	r1, [r3, #0]
   b4b18:	9b01      	ldr	r3, [sp, #4]
   b4b1a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   b4b1e:	f8ca 2000 	str.w	r2, [sl]
   b4b22:	f8d8 2000 	ldr.w	r2, [r8]
        if(railways[i].name == brownLine.name){
   b4b26:	4912      	ldr	r1, [pc, #72]	; (b4b70 <_Z16randomizeAddressv+0x398>)
   b4b28:	441a      	add	r2, r3
   b4b2a:	f102 0a30 	add.w	sl, r2, #48	; 0x30
   b4b2e:	4650      	mov	r0, sl
        sequenceArr[2 * i + j] = addressArr[seqCount++];
   b4b30:	3701      	adds	r7, #1
        if(railways[i].name == brownLine.name){
   b4b32:	f7ff fe3f 	bl	b47b4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b4b36:	b130      	cbz	r0, b4b46 <_Z16randomizeAddressv+0x36e>
          brownLineAdr = sequenceArr[2 * i + j];
   b4b38:	f8db 2000 	ldr.w	r2, [fp]
   b4b3c:	4b0d      	ldr	r3, [pc, #52]	; (b4b74 <_Z16randomizeAddressv+0x39c>)
   b4b3e:	f852 2009 	ldr.w	r2, [r2, r9]
   b4b42:	601a      	str	r2, [r3, #0]
   b4b44:	e7bb      	b.n	b4abe <_Z16randomizeAddressv+0x2e6>
        }else if(railways[i].name == greenLine.name){
   b4b46:	490c      	ldr	r1, [pc, #48]	; (b4b78 <_Z16randomizeAddressv+0x3a0>)
   b4b48:	4650      	mov	r0, sl
   b4b4a:	f7ff fe33 	bl	b47b4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b4b4e:	2800      	cmp	r0, #0
   b4b50:	d0b5      	beq.n	b4abe <_Z16randomizeAddressv+0x2e6>
   b4b52:	f8db 2000 	ldr.w	r2, [fp]
          greenLineAdr[0] = sequenceArr[2 * i];
   b4b56:	4b09      	ldr	r3, [pc, #36]	; (b4b7c <_Z16randomizeAddressv+0x3a4>)
   b4b58:	5911      	ldr	r1, [r2, r4]
   b4b5a:	6019      	str	r1, [r3, #0]
          greenLineAdr[1] = sequenceArr[2 * i + 1];
   b4b5c:	9902      	ldr	r1, [sp, #8]
   b4b5e:	5852      	ldr	r2, [r2, r1]
   b4b60:	605a      	str	r2, [r3, #4]
   b4b62:	e7ac      	b.n	b4abe <_Z16randomizeAddressv+0x2e6>
}
   b4b64:	b011      	add	sp, #68	; 0x44
   b4b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4b6a:	bf00      	nop
   b4b6c:	2003553c 	.word	0x2003553c
   b4b70:	200355e8 	.word	0x200355e8
   b4b74:	20035624 	.word	0x20035624
   b4b78:	20035658 	.word	0x20035658
   b4b7c:	20035694 	.word	0x20035694

000b4b80 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4b80:	2900      	cmp	r1, #0
      _M_create_storage(size_t __n)
   b4b82:	b538      	push	{r3, r4, r5, lr}
   b4b84:	4604      	mov	r4, r0
      _M_allocate(size_t __n)
   b4b86:	ea4f 0581 	mov.w	r5, r1, lsl #2
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4b8a:	d00c      	beq.n	b4ba6 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x26>
	if (__n > this->_M_max_size())
   b4b8c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   b4b90:	d301      	bcc.n	b4b96 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x16>
	  std::__throw_bad_alloc();
   b4b92:	f005 faf9 	bl	ba188 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4b96:	4628      	mov	r0, r5
   b4b98:	f7ff fa7d 	bl	b4096 <_Znwj>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4b9c:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4ba0:	4428      	add	r0, r5
   b4ba2:	60a0      	str	r0, [r4, #8]
      }
   b4ba4:	bd38      	pop	{r3, r4, r5, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4ba6:	4608      	mov	r0, r1
   b4ba8:	e7f8      	b.n	b4b9c <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x1c>

000b4baa <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b4baa:	b538      	push	{r3, r4, r5, lr}
   b4bac:	4604      	mov	r4, r0
   b4bae:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b4bb0:	42ac      	cmp	r4, r5
   b4bb2:	d004      	beq.n	b4bbe <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x14>
      }
   b4bb4:	4620      	mov	r0, r4
   b4bb6:	f7ff fd31 	bl	b461c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4bba:	340c      	adds	r4, #12
   b4bbc:	e7f8      	b.n	b4bb0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x6>
	    std::_Destroy(std::__addressof(*__first));
	}
   b4bbe:	bd38      	pop	{r3, r4, r5, pc}

000b4bc0 <_ZN7RailwayD1Ev>:
#include "Checkpoint.cpp"
#include <string>

//container for all data for each rail line
class Railway{
   b4bc0:	b510      	push	{r4, lr}
   b4bc2:	4604      	mov	r4, r0
   b4bc4:	3048      	adds	r0, #72	; 0x48
   b4bc6:	f7ff fd33 	bl	b4630 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b4bca:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b4bce:	f005 fb13 	bl	ba1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
   b4bd2:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b4bd6:	f7ff ffe8 	bl	b4baa <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	_M_deallocate(_M_impl._M_start,
   b4bda:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b4bdc:	b118      	cbz	r0, b4be6 <_ZN7RailwayD1Ev+0x26>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4bde:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	::operator delete(__p
   b4be0:	1a09      	subs	r1, r1, r0
   b4be2:	f7ff fa5e 	bl	b40a2 <_ZdlPvj>
      }
   b4be6:	f104 0018 	add.w	r0, r4, #24
   b4bea:	f7ff fd17 	bl	b461c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4bee:	f104 000c 	add.w	r0, r4, #12
   b4bf2:	f7ff fd09 	bl	b4608 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b4bf6:	4620      	mov	r0, r4
   b4bf8:	f7ff fcfc 	bl	b45f4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
   b4bfc:	4620      	mov	r0, r4
   b4bfe:	bd10      	pop	{r4, pc}

000b4c00 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b4c00:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b4c02:	b510      	push	{r4, lr}
   b4c04:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b4c06:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b4c0a:	d005      	beq.n	b4c18 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b4c0c:	4601      	mov	r1, r0
   b4c0e:	4622      	mov	r2, r4
   b4c10:	4618      	mov	r0, r3
   b4c12:	f006 faaf 	bl	bb174 <memmove>
   b4c16:	4603      	mov	r3, r0
	}
   b4c18:	1918      	adds	r0, r3, r4
   b4c1a:	bd10      	pop	{r4, pc}

000b4c1c <_ZNSt6vectorIiSaIiEEC1ERKS1_>:
      vector(const vector& __x)
   b4c1c:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c1e:	e9d1 3600 	ldrd	r3, r6, [r1]
   b4c22:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4c24:	2300      	movs	r3, #0
      vector(const vector& __x)
   b4c26:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4c28:	e9c0 3300 	strd	r3, r3, [r0]
   b4c2c:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4c2e:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
   b4c30:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4c32:	f7ff faa3 	bl	b417c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4c36:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4c3a:	4406      	add	r6, r0
   b4c3c:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4c3e:	4602      	mov	r2, r0
			      _Category>::__copy_m(__first, __last, __result);
   b4c40:	e9d5 0100 	ldrd	r0, r1, [r5]
   b4c44:	f7ff ffdc 	bl	b4c00 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
   b4c48:	6060      	str	r0, [r4, #4]
      }
   b4c4a:	4620      	mov	r0, r4
   b4c4c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4c50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>:
      vector(initializer_list<value_type> __l,
   b4c50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b4c52:	ab04      	add	r3, sp, #16
   b4c54:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4c58:	2300      	movs	r3, #0
   b4c5a:	e9c0 3300 	strd	r3, r3, [r0]
   b4c5e:	6083      	str	r3, [r0, #8]
      vector(initializer_list<value_type> __l,
   b4c60:	4604      	mov	r4, r0
   b4c62:	4613      	mov	r3, r2
   b4c64:	460e      	mov	r6, r1
   b4c66:	0095      	lsls	r5, r2, #2
   b4c68:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   b4c6c:	f342 001d 	sbfx	r0, r2, #0, #30
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4c70:	4a0a      	ldr	r2, [pc, #40]	; (b4c9c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x4c>)
   b4c72:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   b4c76:	d202      	bcs.n	b4c7e <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x2e>
	  __throw_length_error(
   b4c78:	4809      	ldr	r0, [pc, #36]	; (b4ca0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x50>)
   b4c7a:	f005 fa8b 	bl	ba194 <_ZSt20__throw_length_errorPKc>
   b4c7e:	9101      	str	r1, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4c80:	f7ff fa7c 	bl	b417c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4c84:	4405      	add	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4c86:	4602      	mov	r2, r0
   b4c88:	6020      	str	r0, [r4, #0]
   b4c8a:	9901      	ldr	r1, [sp, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4c8c:	60a5      	str	r5, [r4, #8]
   b4c8e:	4630      	mov	r0, r6
   b4c90:	f7ff ffb6 	bl	b4c00 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
   b4c94:	6060      	str	r0, [r4, #4]
      }
   b4c96:	b004      	add	sp, #16
   b4c98:	bd70      	pop	{r4, r5, r6, pc}
   b4c9a:	bf00      	nop
   b4c9c:	7ffffffc 	.word	0x7ffffffc
   b4ca0:	000bd355 	.word	0x000bd355

000b4ca4 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>:
      if (&__x != this)
   b4ca4:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b4ca6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b4ca8:	4604      	mov	r4, r0
   b4caa:	460d      	mov	r5, r1
      if (&__x != this)
   b4cac:	d01d      	beq.n	b4cea <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x46>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4cae:	e9d1 7100 	ldrd	r7, r1, [r1]
			 - this->_M_impl._M_start); }
   b4cb2:	6802      	ldr	r2, [r0, #0]
   b4cb4:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4cb6:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b4cb8:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b4cba:	429e      	cmp	r6, r3
   b4cbc:	d917      	bls.n	b4cee <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x4a>
	  pointer __result = this->_M_allocate(__n);
   b4cbe:	10b0      	asrs	r0, r6, #2
   b4cc0:	9101      	str	r1, [sp, #4]
   b4cc2:	f7ff fa5b 	bl	b417c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
   b4cc6:	9901      	ldr	r1, [sp, #4]
   b4cc8:	4602      	mov	r2, r0
   b4cca:	4605      	mov	r5, r0
   b4ccc:	4638      	mov	r0, r7
   b4cce:	f7ff ff97 	bl	b4c00 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4cd2:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4cd4:	b118      	cbz	r0, b4cde <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x3a>
			    - this->_M_impl._M_start);
   b4cd6:	68a1      	ldr	r1, [r4, #8]
   b4cd8:	1a09      	subs	r1, r1, r0
   b4cda:	f7ff f9e2 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b4cde:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4ce0:	4435      	add	r5, r6
   b4ce2:	60a5      	str	r5, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4ce4:	6823      	ldr	r3, [r4, #0]
   b4ce6:	4433      	add	r3, r6
   b4ce8:	6063      	str	r3, [r4, #4]
    }
   b4cea:	b003      	add	sp, #12
   b4cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4cee:	6843      	ldr	r3, [r0, #4]
   b4cf0:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b4cf2:	429e      	cmp	r6, r3
   b4cf4:	d803      	bhi.n	b4cfe <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x5a>
   b4cf6:	4638      	mov	r0, r7
   b4cf8:	f7ff ff82 	bl	b4c00 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
   b4cfc:	e7f2      	b.n	b4ce4 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x40>
   b4cfe:	18f9      	adds	r1, r7, r3
   b4d00:	4638      	mov	r0, r7
   b4d02:	f7ff ff7d 	bl	b4c00 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
   b4d06:	e9d4 0200 	ldrd	r0, r2, [r4]
   b4d0a:	e9d5 3100 	ldrd	r3, r1, [r5]
   b4d0e:	1a10      	subs	r0, r2, r0
   b4d10:	4418      	add	r0, r3
   b4d12:	e7f1      	b.n	b4cf8 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x54>

000b4d14 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b4d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4d18:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b4d1a:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4d1c:	480b      	ldr	r0, [pc, #44]	; (b4d4c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x38>)
   b4d1e:	10a4      	asrs	r4, r4, #2
   b4d20:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b4d22:	4616      	mov	r6, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4d24:	4627      	mov	r7, r4
   b4d26:	4690      	mov	r8, r2
   b4d28:	2f00      	cmp	r7, #0
   b4d2a:	dd08      	ble.n	b4d3e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x2a>
	      *__result = *__first;
   b4d2c:	4629      	mov	r1, r5
   b4d2e:	4640      	mov	r0, r8
   b4d30:	f7ff ffb8 	bl	b4ca4 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	      ++__first;
   b4d34:	350c      	adds	r5, #12
	      ++__result;
   b4d36:	f108 080c 	add.w	r8, r8, #12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4d3a:	3f01      	subs	r7, #1
   b4d3c:	e7f4      	b.n	b4d28 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x14>
	  return __result;
   b4d3e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b4d42:	200c      	movs	r0, #12
   b4d44:	fb00 6004 	mla	r0, r0, r4, r6
   b4d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4d4c:	aaaaaaab 	.word	0xaaaaaaab

000b4d50 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>:
    std::vector<std::string> colors;
    int tripleIndex = -1;
    int loopIndex = -1;
    int lowerLoopBound, upperLoopBound, lowerGreenBound, upperGreenBound;

    Railway(std::vector<Checkpoint> checkpointInput, std::vector<int> scalerInput, std::vector<int> outputSize, std::string nameInput, std::vector<std::string> colorInput, std::vector<int> boundInput = {0, 0, 0, 0}){
   b4d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4d54:	2500      	movs	r5, #0
   b4d56:	4699      	mov	r9, r3
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b4d58:	f100 0338 	add.w	r3, r0, #56	; 0x38
      { _M_string_length = __length; }
   b4d5c:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   b4d60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4d64:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
   b4d68:	4604      	mov	r4, r0
   b4d6a:	e9c0 5500 	strd	r5, r5, [r0]
   b4d6e:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b4d72:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b4d76:	e9c0 5506 	strd	r5, r5, [r0, #24]
   b4d7a:	e9c0 5508 	strd	r5, r5, [r0, #32]
   b4d7e:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
   b4d82:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
   b4d86:	b099      	sub	sp, #100	; 0x64
      { __c1 = __c2; }
   b4d88:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
   b4d8c:	6505      	str	r5, [r0, #80]	; 0x50
   b4d8e:	4692      	mov	sl, r2
   b4d90:	f100 0b18 	add.w	fp, r0, #24
   b4d94:	f100 0830 	add.w	r8, r0, #48	; 0x30
   b4d98:	f100 0748 	add.w	r7, r0, #72	; 0x48
      checkpoints = checkpointInput;
   b4d9c:	f7ff fb34 	bl	b4408 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4da0:	e9d4 2300 	ldrd	r2, r3, [r4]
   b4da4:	1a9b      	subs	r3, r3, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4da6:	42ab      	cmp	r3, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4da8:	ea4f 01e3 	mov.w	r1, r3, asr #3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4dac:	da02      	bge.n	b4db4 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x64>
	  __throw_length_error(
   b4dae:	485f      	ldr	r0, [pc, #380]	; (b4f2c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1dc>)
   b4db0:	f005 f9f0 	bl	ba194 <_ZSt20__throw_length_errorPKc>
      { _M_create_storage(__n); }
   b4db4:	a809      	add	r0, sp, #36	; 0x24
   b4db6:	9101      	str	r1, [sp, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4db8:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b4dbc:	950b      	str	r5, [sp, #44]	; 0x2c
      { _M_create_storage(__n); }
   b4dbe:	f7ff fedf 	bl	b4b80 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
      if (__n <= 0)
   b4dc2:	9901      	ldr	r1, [sp, #4]
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
   b4dc4:	9809      	ldr	r0, [sp, #36]	; 0x24
   b4dc6:	b131      	cbz	r1, b4dd6 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x86>
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
   b4dc8:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	*__first = __tmp;
   b4dcc:	008a      	lsls	r2, r1, #2
   b4dce:	4629      	mov	r1, r5
   b4dd0:	f006 f9ea 	bl	bb1a8 <memset>
   b4dd4:	4630      	mov	r0, r6
	  _M_finish = __x._M_finish;
   b4dd6:	e9d4 5203 	ldrd	r5, r2, [r4, #12]
	  _M_start = __x._M_start;
   b4dda:	9909      	ldr	r1, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
   b4ddc:	6963      	ldr	r3, [r4, #20]
   b4dde:	930e      	str	r3, [sp, #56]	; 0x38
	  _M_finish = __x._M_finish;
   b4de0:	e9c4 1003 	strd	r1, r0, [r4, #12]
      }
   b4de4:	ae0c      	add	r6, sp, #48	; 0x30
	  _M_end_of_storage = __x._M_end_of_storage;
   b4de6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   b4de8:	6161      	str	r1, [r4, #20]
	  _M_finish = __x._M_finish;
   b4dea:	e9cd 520c 	strd	r5, r2, [sp, #48]	; 0x30
      }
   b4dee:	4630      	mov	r0, r6
	  _M_start = __x._M_start;
   b4df0:	2500      	movs	r5, #0
	  _M_finish = __x._M_finish;
   b4df2:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
   b4df6:	950b      	str	r5, [sp, #44]	; 0x2c
      }
   b4df8:	f7ff fc06 	bl	b4608 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b4dfc:	a809      	add	r0, sp, #36	; 0x24
   b4dfe:	f7ff fc03 	bl	b4608 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
      distances = std::vector<float>(checkpoints.size(), 0);
      scalers = scalerInput;
   b4e02:	4651      	mov	r1, sl
   b4e04:	4658      	mov	r0, fp
   b4e06:	f7ff ff4d 	bl	b4ca4 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
      outputs = {std::vector<int>(outputSize[0], 0), std::vector<int>(outputSize[1], 0), std::vector<int>(outputSize[2], 0), std::vector<int>(outputSize[3], 0)};
   b4e0a:	f8d9 1000 	ldr.w	r1, [r9]
   b4e0e:	9506      	str	r5, [sp, #24]
   b4e10:	6809      	ldr	r1, [r1, #0]
   b4e12:	ab02      	add	r3, sp, #8
   b4e14:	aa06      	add	r2, sp, #24
   b4e16:	4630      	mov	r0, r6
   b4e18:	f7ff fc1e 	bl	b4658 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b4e1c:	f8d9 1000 	ldr.w	r1, [r9]
   b4e20:	9507      	str	r5, [sp, #28]
   b4e22:	6849      	ldr	r1, [r1, #4]
   b4e24:	ab03      	add	r3, sp, #12
   b4e26:	aa07      	add	r2, sp, #28
   b4e28:	a80f      	add	r0, sp, #60	; 0x3c
   b4e2a:	f7ff fc15 	bl	b4658 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b4e2e:	f8d9 1000 	ldr.w	r1, [r9]
   b4e32:	9508      	str	r5, [sp, #32]
   b4e34:	6889      	ldr	r1, [r1, #8]
   b4e36:	ab04      	add	r3, sp, #16
   b4e38:	aa08      	add	r2, sp, #32
   b4e3a:	a812      	add	r0, sp, #72	; 0x48
   b4e3c:	f7ff fc0c 	bl	b4658 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b4e40:	f8d9 1000 	ldr.w	r1, [r9]
   b4e44:	9509      	str	r5, [sp, #36]	; 0x24
   b4e46:	ab05      	add	r3, sp, #20
   b4e48:	aa09      	add	r2, sp, #36	; 0x24
   b4e4a:	68c9      	ldr	r1, [r1, #12]
   b4e4c:	a815      	add	r0, sp, #84	; 0x54
   b4e4e:	f7ff fc03 	bl	b4658 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
			 - this->_M_impl._M_start); }
   b4e52:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b4e54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b4e56:	1a9b      	subs	r3, r3, r2
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
		    std::forward_iterator_tag)
      {
	const size_type __len = std::distance(__first, __last);

	if (__len > capacity())
   b4e58:	2b2f      	cmp	r3, #47	; 0x2f
   b4e5a:	d83f      	bhi.n	b4edc <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x18c>
	  pointer __result = this->_M_allocate(__n);
   b4e5c:	2004      	movs	r0, #4
   b4e5e:	f7ff f941 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
   b4e62:	46b3      	mov	fp, r6
   b4e64:	4605      	mov	r5, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b4e66:	f100 0a30 	add.w	sl, r0, #48	; 0x30
	  _ForwardIterator __cur = __result;
   b4e6a:	4681      	mov	r9, r0
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4e6c:	f1b9 0f00 	cmp.w	r9, #0
   b4e70:	d003      	beq.n	b4e7a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x12a>
   b4e72:	4659      	mov	r1, fp
   b4e74:	4648      	mov	r0, r9
   b4e76:	f7ff fed1 	bl	b4c1c <_ZNSt6vectorIiSaIiEEC1ERKS1_>
	      for (; __first != __last; ++__first, (void)++__cur)
   b4e7a:	f109 090c 	add.w	r9, r9, #12
   b4e7e:	45d1      	cmp	r9, sl
   b4e80:	f10b 0b0c 	add.w	fp, fp, #12
   b4e84:	d1f2      	bne.n	b4e6c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x11c>
	__destroy(__first, __last);
   b4e86:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b4e8a:	f7ff fe8e 	bl	b4baa <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	    _S_check_init_len(__len, _M_get_Tp_allocator());
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
	    _M_deallocate(this->_M_impl._M_start,
   b4e8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b4e90:	b118      	cbz	r0, b4e9a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x14a>
			  this->_M_impl._M_end_of_storage
			  - this->_M_impl._M_start);
   b4e92:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b4e94:	1a09      	subs	r1, r1, r0
   b4e96:	f7ff f904 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b4e9a:	e9c4 5a09 	strd	r5, sl, [r4, #36]	; 0x24
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b4e9e:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
   b4ea2:	ad18      	add	r5, sp, #96	; 0x60
   b4ea4:	3d0c      	subs	r5, #12
      }
   b4ea6:	4628      	mov	r0, r5
   b4ea8:	f7ff fbb8 	bl	b461c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4eac:	42b5      	cmp	r5, r6
   b4eae:	d1f9      	bne.n	b4ea4 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x154>
	this->_M_assign(__str);
   b4eb0:	9922      	ldr	r1, [sp, #136]	; 0x88
   b4eb2:	4640      	mov	r0, r8
   b4eb4:	f005 f9be 	bl	ba234 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
      name = nameInput;
      colors = colorInput;
   b4eb8:	4638      	mov	r0, r7
   b4eba:	9923      	ldr	r1, [sp, #140]	; 0x8c
   b4ebc:	f7ff faf6 	bl	b44ac <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
	return *(this->_M_impl._M_start + __n);
   b4ec0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b4ec2:	681b      	ldr	r3, [r3, #0]
      lowerLoopBound = boundInput[0];
   b4ec4:	681a      	ldr	r2, [r3, #0]
   b4ec6:	65e2      	str	r2, [r4, #92]	; 0x5c
      upperLoopBound = boundInput[1];
   b4ec8:	685a      	ldr	r2, [r3, #4]
   b4eca:	6622      	str	r2, [r4, #96]	; 0x60
      lowerGreenBound = boundInput[2];
   b4ecc:	689a      	ldr	r2, [r3, #8]
      upperGreenBound = boundInput[3];
   b4ece:	68db      	ldr	r3, [r3, #12]
      lowerGreenBound = boundInput[2];
   b4ed0:	6662      	str	r2, [r4, #100]	; 0x64
    }
   b4ed2:	4620      	mov	r0, r4
      upperGreenBound = boundInput[3];
   b4ed4:	66a3      	str	r3, [r4, #104]	; 0x68
    }
   b4ed6:	b019      	add	sp, #100	; 0x64
   b4ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4edc:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   b4ede:	1aad      	subs	r5, r5, r2
	  }
	else if (size() >= __len)
   b4ee0:	2d2f      	cmp	r5, #47	; 0x2f
   b4ee2:	d90b      	bls.n	b4efc <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ac>
			      _Category>::__copy_m(__first, __last, __result);
   b4ee4:	a918      	add	r1, sp, #96	; 0x60
   b4ee6:	4630      	mov	r0, r6
   b4ee8:	f7ff ff14 	bl	b4d14 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b4eec:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b4eee:	4288      	cmp	r0, r1
   b4ef0:	4605      	mov	r5, r0
   b4ef2:	d0d6      	beq.n	b4ea2 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
   b4ef4:	f7ff fe59 	bl	b4baa <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   b4ef8:	62a5      	str	r5, [r4, #40]	; 0x28
   b4efa:	e7d2      	b.n	b4ea2 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b4efc:	4435      	add	r5, r6
   b4efe:	4629      	mov	r1, r5
   b4f00:	4630      	mov	r0, r6
   b4f02:	f7ff ff07 	bl	b4d14 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4f06:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
   b4f0a:	ab18      	add	r3, sp, #96	; 0x60
   b4f0c:	429d      	cmp	r5, r3
   b4f0e:	d00a      	beq.n	b4f26 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1d6>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4f10:	f1b9 0f00 	cmp.w	r9, #0
   b4f14:	d003      	beq.n	b4f1e <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ce>
   b4f16:	4629      	mov	r1, r5
   b4f18:	4648      	mov	r0, r9
   b4f1a:	f7ff fe7f 	bl	b4c1c <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b4f1e:	350c      	adds	r5, #12
   b4f20:	f109 090c 	add.w	r9, r9, #12
   b4f24:	e7f1      	b.n	b4f0a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ba>
	    _ForwardIterator __mid = __first;
	    std::advance(__mid, size());
	    std::copy(__first, __mid, this->_M_impl._M_start);
	    const size_type __attribute__((__unused__)) __n = __len - size();
	    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	    this->_M_impl._M_finish =
   b4f26:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
   b4f2a:	e7ba      	b.n	b4ea2 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
   b4f2c:	000bd355 	.word	0x000bd355

000b4f30 <_Z41__static_initialization_and_destruction_0ii.constprop.0>:
   b4f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4f34:	ed2d 8b0e 	vpush	{d8-d14}
   b4f38:	2801      	cmp	r0, #1
   b4f3a:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
   b4f3e:	f040 85c3 	bne.w	b5ac8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb98>
  public:
    float lat;
    float lon;

    Checkpoint(float la, float lo){
      lat = la;
   b4f42:	4bb6      	ldr	r3, [pc, #728]	; (b521c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2ec>)
   b4f44:	9372      	str	r3, [sp, #456]	; 0x1c8
      lon = lo;
   b4f46:	4bb6      	ldr	r3, [pc, #728]	; (b5220 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f0>)
   b4f48:	9373      	str	r3, [sp, #460]	; 0x1cc
      lat = la;
   b4f4a:	4bb6      	ldr	r3, [pc, #728]	; (b5224 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f4>)
   b4f4c:	9374      	str	r3, [sp, #464]	; 0x1d0
      lon = lo;
   b4f4e:	4bb6      	ldr	r3, [pc, #728]	; (b5228 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f8>)
   b4f50:	9375      	str	r3, [sp, #468]	; 0x1d4
      lat = la;
   b4f52:	4bb6      	ldr	r3, [pc, #728]	; (b522c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2fc>)
   b4f54:	9376      	str	r3, [sp, #472]	; 0x1d8
      lon = lo;
   b4f56:	4bb6      	ldr	r3, [pc, #728]	; (b5230 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x300>)
   b4f58:	9377      	str	r3, [sp, #476]	; 0x1dc
      lat = la;
   b4f5a:	4bb6      	ldr	r3, [pc, #728]	; (b5234 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x304>)
   b4f5c:	9378      	str	r3, [sp, #480]	; 0x1e0
      lon = lo;
   b4f5e:	4bb6      	ldr	r3, [pc, #728]	; (b5238 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x308>)
   b4f60:	9379      	str	r3, [sp, #484]	; 0x1e4
      lat = la;
   b4f62:	4bb6      	ldr	r3, [pc, #728]	; (b523c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x30c>)
   b4f64:	937a      	str	r3, [sp, #488]	; 0x1e8
      lon = lo;
   b4f66:	4bb6      	ldr	r3, [pc, #728]	; (b5240 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x310>)
   b4f68:	937b      	str	r3, [sp, #492]	; 0x1ec
);
   b4f6a:	ab72      	add	r3, sp, #456	; 0x1c8
   b4f6c:	934c      	str	r3, [sp, #304]	; 0x130
   b4f6e:	2305      	movs	r3, #5
   b4f70:	f8df a35c 	ldr.w	sl, [pc, #860]	; b52d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3a0>
   b4f74:	934d      	str	r3, [sp, #308]	; 0x134
   b4f76:	f50d 7884 	add.w	r8, sp, #264	; 0x108
   b4f7a:	aa4c      	add	r2, sp, #304	; 0x130
   b4f7c:	4643      	mov	r3, r8
   b4f7e:	ca06      	ldmia	r2, {r1, r2}
   b4f80:	a85a      	add	r0, sp, #360	; 0x168
   b4f82:	f7ff fb8b 	bl	b469c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b4f86:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
   b4f8a:	ac65      	add	r4, sp, #404	; 0x194
   b4f8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b4f90:	2204      	movs	r2, #4
   b4f92:	ab4a      	add	r3, sp, #296	; 0x128
   b4f94:	944a      	str	r4, [sp, #296]	; 0x128
   b4f96:	924b      	str	r2, [sp, #300]	; 0x12c
   b4f98:	e893 0006 	ldmia.w	r3, {r1, r2}
   b4f9c:	a857      	add	r0, sp, #348	; 0x15c
   b4f9e:	f7ff fe57 	bl	b4c50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b4fa2:	aa61      	add	r2, sp, #388	; 0x184
   b4fa4:	2500      	movs	r5, #0
   b4fa6:	9248      	str	r2, [sp, #288]	; 0x120
   b4fa8:	2328      	movs	r3, #40	; 0x28
   b4faa:	2204      	movs	r2, #4
   b4fac:	e9cd 5361 	strd	r5, r3, [sp, #388]	; 0x184
   b4fb0:	9249      	str	r2, [sp, #292]	; 0x124
   b4fb2:	ab48      	add	r3, sp, #288	; 0x120
   b4fb4:	f50d 7bd6 	add.w	fp, sp, #428	; 0x1ac
   b4fb8:	e893 0006 	ldmia.w	r3, {r1, r2}
   b4fbc:	a854      	add	r0, sp, #336	; 0x150
   b4fbe:	e9cd 5563 	strd	r5, r5, [sp, #396]	; 0x18c
   b4fc2:	f7ff fe45 	bl	b4c50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b4fc6:	499f      	ldr	r1, [pc, #636]	; (b5244 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x314>)
      lat = la;
   b4fc8:	eddf 8a9f 	vldr	s17, [pc, #636]	; b5248 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x318>
      lon = lo;
   b4fcc:	ed9f 8a9f 	vldr	s16, [pc, #636]	; b524c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x31c>
      lat = la;
   b4fd0:	eddf 9a9f 	vldr	s19, [pc, #636]	; b5250 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x320>
      lon = lo;
   b4fd4:	ed9f 9a9f 	vldr	s18, [pc, #636]	; b5254 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x324>
      lat = la;
   b4fd8:	eddf aa9f 	vldr	s21, [pc, #636]	; b5258 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x328>
      lon = lo;
   b4fdc:	ed9f aa9f 	vldr	s20, [pc, #636]	; b525c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x32c>
      lat = la;
   b4fe0:	eddf ba9f 	vldr	s23, [pc, #636]	; b5260 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x330>
      lon = lo;
   b4fe4:	ed9f ba9f 	vldr	s22, [pc, #636]	; b5264 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x334>
      lat = la;
   b4fe8:	eddf da9f 	vldr	s27, [pc, #636]	; b5268 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x338>
      lon = lo;
   b4fec:	ed9f da9f 	vldr	s26, [pc, #636]	; b526c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x33c>
      lat = la;
   b4ff0:	eddf ca9f 	vldr	s25, [pc, #636]	; b5270 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x340>
      lon = lo;
   b4ff4:	ed9f ca9f 	vldr	s24, [pc, #636]	; b5274 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x344>
   b4ff8:	ed9f ea9f 	vldr	s28, [pc, #636]	; b5278 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x348>
   b4ffc:	4658      	mov	r0, fp
   b4ffe:	f7ff f883 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5002:	499e      	ldr	r1, [pc, #632]	; (b527c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x34c>)
   b5004:	a87e      	add	r0, sp, #504	; 0x1f8
   b5006:	f7ff f87f 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b500a:	499d      	ldr	r1, [pc, #628]	; (b5280 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x350>)
   b500c:	a884      	add	r0, sp, #528	; 0x210
   b500e:	f7ff f87b 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5012:	ab7e      	add	r3, sp, #504	; 0x1f8
   b5014:	9346      	str	r3, [sp, #280]	; 0x118
   b5016:	2302      	movs	r3, #2
   b5018:	9347      	str	r3, [sp, #284]	; 0x11c
   b501a:	aa46      	add	r2, sp, #280	; 0x118
   b501c:	f50d 79ba 	add.w	r9, sp, #372	; 0x174
   b5020:	ca06      	ldmia	r2, {r1, r2}
   b5022:	ab40      	add	r3, sp, #256	; 0x100
   b5024:	a851      	add	r0, sp, #324	; 0x144
   b5026:	f7ff fb6d 	bl	b4704 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b502a:	2210      	movs	r2, #16
   b502c:	4629      	mov	r1, r5
   b502e:	4648      	mov	r0, r9
   b5030:	f006 f8ba 	bl	bb1a8 <memset>
   b5034:	2204      	movs	r2, #4
   b5036:	ab44      	add	r3, sp, #272	; 0x110
   b5038:	f8cd 9110 	str.w	r9, [sp, #272]	; 0x110
   b503c:	9245      	str	r2, [sp, #276]	; 0x114
   b503e:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5042:	a84e      	add	r0, sp, #312	; 0x138
   b5044:	f7ff fe04 	bl	b4c50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway redLine = Railway(
   b5048:	ab4e      	add	r3, sp, #312	; 0x138
   b504a:	9302      	str	r3, [sp, #8]
   b504c:	ab51      	add	r3, sp, #324	; 0x144
   b504e:	aa57      	add	r2, sp, #348	; 0x15c
   b5050:	a95a      	add	r1, sp, #360	; 0x168
   b5052:	e9cd b300 	strd	fp, r3, [sp]
   b5056:	488b      	ldr	r0, [pc, #556]	; (b5284 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x354>)
   b5058:	ab54      	add	r3, sp, #336	; 0x150
   b505a:	f7ff fe79 	bl	b4d50 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
      }
   b505e:	a84e      	add	r0, sp, #312	; 0x138
   b5060:	f7ff fadc 	bl	b461c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5064:	a851      	add	r0, sp, #324	; 0x144
   b5066:	f7ff fae3 	bl	b4630 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b506a:	a884      	add	r0, sp, #528	; 0x210
   b506c:	f005 f8c4 	bl	ba1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5070:	a87e      	add	r0, sp, #504	; 0x1f8
   b5072:	f005 f8c1 	bl	ba1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5076:	4658      	mov	r0, fp
   b5078:	f005 f8be 	bl	ba1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b507c:	a854      	add	r0, sp, #336	; 0x150
   b507e:	f7ff facd 	bl	b461c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5082:	a857      	add	r0, sp, #348	; 0x15c
   b5084:	f7ff faca 	bl	b461c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5088:	a85a      	add	r0, sp, #360	; 0x168
   b508a:	f7ff fab3 	bl	b45f4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b508e:	4b7e      	ldr	r3, [pc, #504]	; (b5288 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x358>)
   b5090:	937e      	str	r3, [sp, #504]	; 0x1f8
      lon = lo;
   b5092:	4b7e      	ldr	r3, [pc, #504]	; (b528c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x35c>)
   b5094:	937f      	str	r3, [sp, #508]	; 0x1fc
      lat = la;
   b5096:	4b7e      	ldr	r3, [pc, #504]	; (b5290 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x360>)
   b5098:	9380      	str	r3, [sp, #512]	; 0x200
      lon = lo;
   b509a:	4b7e      	ldr	r3, [pc, #504]	; (b5294 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x364>)
   b509c:	9381      	str	r3, [sp, #516]	; 0x204
      lat = la;
   b509e:	4b7e      	ldr	r3, [pc, #504]	; (b5298 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x368>)
   b50a0:	9382      	str	r3, [sp, #520]	; 0x208
      lon = lo;
   b50a2:	4b7e      	ldr	r3, [pc, #504]	; (b529c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x36c>)
   b50a4:	9383      	str	r3, [sp, #524]	; 0x20c
      lat = la;
   b50a6:	4b7e      	ldr	r3, [pc, #504]	; (b52a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x370>)
   b50a8:	9384      	str	r3, [sp, #528]	; 0x210
      lon = lo;
   b50aa:	4b7e      	ldr	r3, [pc, #504]	; (b52a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x374>)
   b50ac:	9385      	str	r3, [sp, #532]	; 0x214
      lat = la;
   b50ae:	4b7e      	ldr	r3, [pc, #504]	; (b52a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x378>)
   b50b0:	9386      	str	r3, [sp, #536]	; 0x218
      lon = lo;
   b50b2:	4b7e      	ldr	r3, [pc, #504]	; (b52ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x37c>)
   b50b4:	9387      	str	r3, [sp, #540]	; 0x21c
      lat = la;
   b50b6:	4b7e      	ldr	r3, [pc, #504]	; (b52b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x380>)
   b50b8:	9388      	str	r3, [sp, #544]	; 0x220
      lon = lo;
   b50ba:	4b7e      	ldr	r3, [pc, #504]	; (b52b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x384>)
   b50bc:	9389      	str	r3, [sp, #548]	; 0x224
      lat = la;
   b50be:	4b7e      	ldr	r3, [pc, #504]	; (b52b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x388>)
   b50c0:	938a      	str	r3, [sp, #552]	; 0x228
      lon = lo;
   b50c2:	4b7e      	ldr	r3, [pc, #504]	; (b52bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x38c>)
   b50c4:	938b      	str	r3, [sp, #556]	; 0x22c
);
   b50c6:	ab7e      	add	r3, sp, #504	; 0x1f8
   b50c8:	9342      	str	r3, [sp, #264]	; 0x108
   b50ca:	2307      	movs	r3, #7
   b50cc:	9343      	str	r3, [sp, #268]	; 0x10c
   b50ce:	af38      	add	r7, sp, #224	; 0xe0
   b50d0:	e898 0006 	ldmia.w	r8, {r1, r2}
   b50d4:	463b      	mov	r3, r7
   b50d6:	a85a      	add	r0, sp, #360	; 0x168
   b50d8:	f7ff fae0 	bl	b469c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b50dc:	f10a 0c10 	add.w	ip, sl, #16
   b50e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b50e4:	465e      	mov	r6, fp
   b50e6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b50e8:	e89c 0003 	ldmia.w	ip, {r0, r1}
   b50ec:	2306      	movs	r3, #6
   b50ee:	9341      	str	r3, [sp, #260]	; 0x104
   b50f0:	f8cd b100 	str.w	fp, [sp, #256]	; 0x100
   b50f4:	ab40      	add	r3, sp, #256	; 0x100
   b50f6:	e9c6 0100 	strd	r0, r1, [r6]
   b50fa:	e893 0006 	ldmia.w	r3, {r1, r2}
   b50fe:	a857      	add	r0, sp, #348	; 0x15c
   b5100:	9604      	str	r6, [sp, #16]
   b5102:	f7ff fda5 	bl	b4c50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5106:	aa61      	add	r2, sp, #388	; 0x184
   b5108:	923e      	str	r2, [sp, #248]	; 0xf8
   b510a:	233c      	movs	r3, #60	; 0x3c
   b510c:	2204      	movs	r2, #4
   b510e:	e9cd 3562 	strd	r3, r5, [sp, #392]	; 0x188
   b5112:	923f      	str	r2, [sp, #252]	; 0xfc
   b5114:	ab3e      	add	r3, sp, #248	; 0xf8
   b5116:	e893 0006 	ldmia.w	r3, {r1, r2}
   b511a:	a854      	add	r0, sp, #336	; 0x150
   b511c:	9561      	str	r5, [sp, #388]	; 0x184
   b511e:	9564      	str	r5, [sp, #400]	; 0x190
   b5120:	f7ff fd96 	bl	b4c50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5124:	4620      	mov	r0, r4
   b5126:	4966      	ldr	r1, [pc, #408]	; (b52c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x390>)
   b5128:	f7fe ffee 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b512c:	4965      	ldr	r1, [pc, #404]	; (b52c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x394>)
   b512e:	a872      	add	r0, sp, #456	; 0x1c8
   b5130:	f7fe ffea 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5134:	4964      	ldr	r1, [pc, #400]	; (b52c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x398>)
   b5136:	a878      	add	r0, sp, #480	; 0x1e0
   b5138:	f7fe ffe6 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b513c:	ab72      	add	r3, sp, #456	; 0x1c8
   b513e:	933c      	str	r3, [sp, #240]	; 0xf0
   b5140:	2302      	movs	r3, #2
   b5142:	933d      	str	r3, [sp, #244]	; 0xf4
   b5144:	ae36      	add	r6, sp, #216	; 0xd8
   b5146:	aa3c      	add	r2, sp, #240	; 0xf0
   b5148:	4633      	mov	r3, r6
   b514a:	ca06      	ldmia	r2, {r1, r2}
   b514c:	a851      	add	r0, sp, #324	; 0x144
   b514e:	f7ff fad9 	bl	b4704 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5152:	2210      	movs	r2, #16
   b5154:	4629      	mov	r1, r5
   b5156:	4648      	mov	r0, r9
   b5158:	f006 f826 	bl	bb1a8 <memset>
   b515c:	2204      	movs	r2, #4
   b515e:	ab3a      	add	r3, sp, #232	; 0xe8
   b5160:	f8cd 90e8 	str.w	r9, [sp, #232]	; 0xe8
   b5164:	923b      	str	r2, [sp, #236]	; 0xec
   b5166:	e893 0006 	ldmia.w	r3, {r1, r2}
   b516a:	a84e      	add	r0, sp, #312	; 0x138
   b516c:	f7ff fd70 	bl	b4c50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway blueLine = Railway(
   b5170:	ab4e      	add	r3, sp, #312	; 0x138
   b5172:	9302      	str	r3, [sp, #8]
   b5174:	ab51      	add	r3, sp, #324	; 0x144
   b5176:	aa57      	add	r2, sp, #348	; 0x15c
   b5178:	a95a      	add	r1, sp, #360	; 0x168
   b517a:	e9cd 4300 	strd	r4, r3, [sp]
   b517e:	4853      	ldr	r0, [pc, #332]	; (b52cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x39c>)
   b5180:	ab54      	add	r3, sp, #336	; 0x150
   b5182:	f7ff fde5 	bl	b4d50 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5186:	a84e      	add	r0, sp, #312	; 0x138
   b5188:	f7ff fa48 	bl	b461c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b518c:	a851      	add	r0, sp, #324	; 0x144
   b518e:	f7ff fa4f 	bl	b4630 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5192:	a878      	add	r0, sp, #480	; 0x1e0
   b5194:	f005 f830 	bl	ba1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5198:	a872      	add	r0, sp, #456	; 0x1c8
   b519a:	f005 f82d 	bl	ba1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b519e:	4620      	mov	r0, r4
   b51a0:	f005 f82a 	bl	ba1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b51a4:	a854      	add	r0, sp, #336	; 0x150
   b51a6:	f7ff fa39 	bl	b461c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b51aa:	a857      	add	r0, sp, #348	; 0x15c
   b51ac:	f7ff fa36 	bl	b461c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b51b0:	a85a      	add	r0, sp, #360	; 0x168
   b51b2:	f7ff fa1f 	bl	b45f4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b51b6:	ab7e      	add	r3, sp, #504	; 0x1f8
   b51b8:	9338      	str	r3, [sp, #224]	; 0xe0
   b51ba:	2307      	movs	r3, #7
   b51bc:	9339      	str	r3, [sp, #228]	; 0xe4
   b51be:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
   b51c2:	e897 0006 	ldmia.w	r7, {r1, r2}
   b51c6:	4643      	mov	r3, r8
   b51c8:	a85a      	add	r0, sp, #360	; 0x168
      lat = la;
   b51ca:	edcd da7e 	vstr	s27, [sp, #504]	; 0x1f8
      lon = lo;
   b51ce:	ed8d da7f 	vstr	s26, [sp, #508]	; 0x1fc
      lat = la;
   b51d2:	edcd ca80 	vstr	s25, [sp, #512]	; 0x200
      lon = lo;
   b51d6:	ed8d ca81 	vstr	s24, [sp, #516]	; 0x204
      lat = la;
   b51da:	edcd 8a82 	vstr	s17, [sp, #520]	; 0x208
      lon = lo;
   b51de:	ed8d 8a83 	vstr	s16, [sp, #524]	; 0x20c
      lat = la;
   b51e2:	edcd ba84 	vstr	s23, [sp, #528]	; 0x210
      lon = lo;
   b51e6:	ed8d ba85 	vstr	s22, [sp, #532]	; 0x214
      lat = la;
   b51ea:	edcd aa86 	vstr	s21, [sp, #536]	; 0x218
      lon = lo;
   b51ee:	ed8d aa87 	vstr	s20, [sp, #540]	; 0x21c
      lat = la;
   b51f2:	edcd 9a88 	vstr	s19, [sp, #544]	; 0x220
      lon = lo;
   b51f6:	ed8d 9a89 	vstr	s18, [sp, #548]	; 0x224
      lat = la;
   b51fa:	edcd 8a8a 	vstr	s17, [sp, #552]	; 0x228
      lon = lo;
   b51fe:	ed8d 8a8b 	vstr	s16, [sp, #556]	; 0x22c
   b5202:	f7ff fa4b 	bl	b469c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5206:	f10a 0328 	add.w	r3, sl, #40	; 0x28
   b520a:	461f      	mov	r7, r3
   b520c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b520e:	46dc      	mov	ip, fp
   b5210:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5214:	e9d7 0100 	ldrd	r0, r1, [r7]
   b5218:	e05c      	b.n	b52d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3a4>
   b521a:	bf00      	nop
   b521c:	42276980 	.word	0x42276980
   b5220:	c2af431e 	.word	0xc2af431e
   b5224:	42279dcc 	.word	0x42279dcc
   b5228:	c2af4202 	.word	0xc2af4202
   b522c:	42279d95 	.word	0x42279d95
   b5230:	c2af476d 	.word	0xc2af476d
   b5234:	4227a7a9 	.word	0x4227a7a9
   b5238:	c2af4e05 	.word	0xc2af4e05
   b523c:	4227b382 	.word	0x4227b382
   b5240:	c2af4e44 	.word	0xc2af4e44
   b5244:	000bd32a 	.word	0x000bd32a
   b5248:	42278b1a 	.word	0x42278b1a
   b524c:	c2af449a 	.word	0xc2af449a
   b5250:	42278b2f 	.word	0x42278b2f
   b5254:	c2af4095 	.word	0xc2af4095
   b5258:	422781d8 	.word	0x422781d8
   b525c:	c2af4044 	.word	0xc2af4044
   b5260:	42278216 	.word	0x42278216
   b5264:	c2af44c1 	.word	0xc2af44c1
   b5268:	4227a49e 	.word	0x4227a49e
   b526c:	c2af4bd0 	.word	0xc2af4bd0
   b5270:	4227a437 	.word	0x4227a437
   b5274:	c2af4659 	.word	0xc2af4659
   b5278:	c2af4089 	.word	0xc2af4089
   b527c:	000bd423 	.word	0x000bd423
   b5280:	000bd42a 	.word	0x000bd42a
   b5284:	2003e5c4 	.word	0x2003e5c4
   b5288:	42277e9d 	.word	0x42277e9d
   b528c:	c2af74b3 	.word	0xc2af74b3
   b5290:	422780af 	.word	0x422780af
   b5294:	c2af588e 	.word	0xc2af588e
   b5298:	4227804d 	.word	0x4227804d
   b529c:	c2af482e 	.word	0xc2af482e
   b52a0:	422780ad 	.word	0x422780ad
   b52a4:	c2af4157 	.word	0xc2af4157
   b52a8:	42278aff 	.word	0x42278aff
   b52ac:	c2af4253 	.word	0xc2af4253
   b52b0:	42278af4 	.word	0x42278af4
   b52b4:	c2af4798 	.word	0xc2af4798
   b52b8:	4227a978 	.word	0x4227a978
   b52bc:	c2af5f5d 	.word	0xc2af5f5d
   b52c0:	000bd336 	.word	0x000bd336
   b52c4:	000bd431 	.word	0x000bd431
   b52c8:	000bd438 	.word	0x000bd438
   b52cc:	2003554c 	.word	0x2003554c
   b52d0:	000bd5e4 	.word	0x000bd5e4
   b52d4:	9b04      	ldr	r3, [sp, #16]
   b52d6:	f8cd b0d8 	str.w	fp, [sp, #216]	; 0xd8
   b52da:	e883 0003 	stmia.w	r3, {r0, r1}
   b52de:	2306      	movs	r3, #6
   b52e0:	9337      	str	r3, [sp, #220]	; 0xdc
   b52e2:	e896 0006 	ldmia.w	r6, {r1, r2}
   b52e6:	a857      	add	r0, sp, #348	; 0x15c
   b52e8:	9705      	str	r7, [sp, #20]
   b52ea:	f7ff fcb1 	bl	b4c50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b52ee:	f107 0308 	add.w	r3, r7, #8
   b52f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b52f4:	ae61      	add	r6, sp, #388	; 0x184
   b52f6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   b52fa:	2204      	movs	r2, #4
   b52fc:	ab34      	add	r3, sp, #208	; 0xd0
   b52fe:	9634      	str	r6, [sp, #208]	; 0xd0
   b5300:	9235      	str	r2, [sp, #212]	; 0xd4
   b5302:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5306:	a854      	add	r0, sp, #336	; 0x150
   b5308:	f7ff fca2 	bl	b4c50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b530c:	4620      	mov	r0, r4
   b530e:	49b3      	ldr	r1, [pc, #716]	; (b55dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6ac>)
   b5310:	f7fe fefa 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5314:	49b2      	ldr	r1, [pc, #712]	; (b55e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b0>)
   b5316:	a872      	add	r0, sp, #456	; 0x1c8
   b5318:	f7fe fef6 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b531c:	49b1      	ldr	r1, [pc, #708]	; (b55e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b4>)
   b531e:	a878      	add	r0, sp, #480	; 0x1e0
   b5320:	f7fe fef2 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5324:	a972      	add	r1, sp, #456	; 0x1c8
   b5326:	9132      	str	r1, [sp, #200]	; 0xc8
   b5328:	2102      	movs	r1, #2
   b532a:	ae2c      	add	r6, sp, #176	; 0xb0
   b532c:	9133      	str	r1, [sp, #204]	; 0xcc
   b532e:	aa32      	add	r2, sp, #200	; 0xc8
   b5330:	ca06      	ldmia	r2, {r1, r2}
   b5332:	4633      	mov	r3, r6
   b5334:	a851      	add	r0, sp, #324	; 0x144
   b5336:	f7ff f9e5 	bl	b4704 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b533a:	f107 0218 	add.w	r2, r7, #24
   b533e:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   b5340:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b5344:	2104      	movs	r1, #4
   b5346:	ab30      	add	r3, sp, #192	; 0xc0
   b5348:	f8cd 90c0 	str.w	r9, [sp, #192]	; 0xc0
   b534c:	9131      	str	r1, [sp, #196]	; 0xc4
   b534e:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5352:	a84e      	add	r0, sp, #312	; 0x138
   b5354:	f7ff fc7c 	bl	b4c50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway brownLine = Railway(
   b5358:	a94e      	add	r1, sp, #312	; 0x138
   b535a:	9102      	str	r1, [sp, #8]
   b535c:	a951      	add	r1, sp, #324	; 0x144
   b535e:	e9cd 4100 	strd	r4, r1, [sp]
   b5362:	a954      	add	r1, sp, #336	; 0x150
   b5364:	460b      	mov	r3, r1
   b5366:	a957      	add	r1, sp, #348	; 0x15c
   b5368:	460a      	mov	r2, r1
   b536a:	489f      	ldr	r0, [pc, #636]	; (b55e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b8>)
   b536c:	a95a      	add	r1, sp, #360	; 0x168
   b536e:	f7ff fcef 	bl	b4d50 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5372:	a84e      	add	r0, sp, #312	; 0x138
   b5374:	f7ff f952 	bl	b461c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5378:	a851      	add	r0, sp, #324	; 0x144
   b537a:	f7ff f959 	bl	b4630 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b537e:	a878      	add	r0, sp, #480	; 0x1e0
   b5380:	f004 ff3a 	bl	ba1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5384:	a872      	add	r0, sp, #456	; 0x1c8
   b5386:	f004 ff37 	bl	ba1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b538a:	4620      	mov	r0, r4
   b538c:	f004 ff34 	bl	ba1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5390:	a854      	add	r0, sp, #336	; 0x150
   b5392:	f7ff f943 	bl	b461c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5396:	a857      	add	r0, sp, #348	; 0x15c
   b5398:	f7ff f940 	bl	b461c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b539c:	a85a      	add	r0, sp, #360	; 0x168
   b539e:	f7ff f929 	bl	b45f4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b53a2:	4b92      	ldr	r3, [pc, #584]	; (b55ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6bc>)
   b53a4:	9372      	str	r3, [sp, #456]	; 0x1c8
      lon = lo;
   b53a6:	4b92      	ldr	r3, [pc, #584]	; (b55f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c0>)
   b53a8:	9373      	str	r3, [sp, #460]	; 0x1cc
      lat = la;
   b53aa:	4b92      	ldr	r3, [pc, #584]	; (b55f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c4>)
   b53ac:	9374      	str	r3, [sp, #464]	; 0x1d0
   b53ae:	4b92      	ldr	r3, [pc, #584]	; (b55f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c8>)
   b53b0:	9378      	str	r3, [sp, #480]	; 0x1e0
);
   b53b2:	a972      	add	r1, sp, #456	; 0x1c8
      lon = lo;
   b53b4:	4b91      	ldr	r3, [pc, #580]	; (b55fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6cc>)
   b53b6:	912e      	str	r1, [sp, #184]	; 0xb8
   b53b8:	9379      	str	r3, [sp, #484]	; 0x1e4
   b53ba:	2105      	movs	r1, #5
      lat = la;
   b53bc:	4b90      	ldr	r3, [pc, #576]	; (b5600 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d0>)
   b53be:	937a      	str	r3, [sp, #488]	; 0x1e8
   b53c0:	af24      	add	r7, sp, #144	; 0x90
      lon = lo;
   b53c2:	4b90      	ldr	r3, [pc, #576]	; (b5604 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d4>)
   b53c4:	912f      	str	r1, [sp, #188]	; 0xbc
   b53c6:	e898 0006 	ldmia.w	r8, {r1, r2}
   b53ca:	937b      	str	r3, [sp, #492]	; 0x1ec
   b53cc:	a85a      	add	r0, sp, #360	; 0x168
   b53ce:	463b      	mov	r3, r7
   b53d0:	ed8d ea75 	vstr	s28, [sp, #468]	; 0x1d4
      lat = la;
   b53d4:	edcd 9a76 	vstr	s19, [sp, #472]	; 0x1d8
      lon = lo;
   b53d8:	ed8d 9a77 	vstr	s18, [sp, #476]	; 0x1dc
   b53dc:	f7ff f95e 	bl	b469c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b53e0:	f10a 0360 	add.w	r3, sl, #96	; 0x60
   b53e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b53e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b53ea:	2104      	movs	r1, #4
   b53ec:	942c      	str	r4, [sp, #176]	; 0xb0
   b53ee:	912d      	str	r1, [sp, #180]	; 0xb4
   b53f0:	e896 0006 	ldmia.w	r6, {r1, r2}
   b53f4:	a857      	add	r0, sp, #348	; 0x15c
   b53f6:	f7ff fc2b 	bl	b4c50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b53fa:	f10a 0370 	add.w	r3, sl, #112	; 0x70
   b53fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5400:	ae61      	add	r6, sp, #388	; 0x184
   b5402:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   b5406:	2104      	movs	r1, #4
   b5408:	ab2a      	add	r3, sp, #168	; 0xa8
   b540a:	962a      	str	r6, [sp, #168]	; 0xa8
   b540c:	912b      	str	r1, [sp, #172]	; 0xac
   b540e:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5412:	a854      	add	r0, sp, #336	; 0x150
   b5414:	f7ff fc1c 	bl	b4c50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5418:	497b      	ldr	r1, [pc, #492]	; (b5608 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d8>)
   b541a:	4658      	mov	r0, fp
   b541c:	f7fe fe74 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5420:	497a      	ldr	r1, [pc, #488]	; (b560c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6dc>)
   b5422:	a87e      	add	r0, sp, #504	; 0x1f8
   b5424:	f7fe fe70 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5428:	4979      	ldr	r1, [pc, #484]	; (b5610 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e0>)
   b542a:	a884      	add	r0, sp, #528	; 0x210
   b542c:	f7fe fe6c 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5430:	a97e      	add	r1, sp, #504	; 0x1f8
   b5432:	9128      	str	r1, [sp, #160]	; 0xa0
   b5434:	2102      	movs	r1, #2
   b5436:	ae22      	add	r6, sp, #136	; 0x88
   b5438:	9129      	str	r1, [sp, #164]	; 0xa4
   b543a:	aa28      	add	r2, sp, #160	; 0xa0
   b543c:	4633      	mov	r3, r6
   b543e:	ca06      	ldmia	r2, {r1, r2}
   b5440:	a851      	add	r0, sp, #324	; 0x144
   b5442:	f7ff f95f 	bl	b4704 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5446:	f10a 0380 	add.w	r3, sl, #128	; 0x80
   b544a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b544c:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b5450:	2104      	movs	r1, #4
   b5452:	ab26      	add	r3, sp, #152	; 0x98
   b5454:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
   b5458:	9127      	str	r1, [sp, #156]	; 0x9c
   b545a:	e893 0006 	ldmia.w	r3, {r1, r2}
   b545e:	a84e      	add	r0, sp, #312	; 0x138
   b5460:	f7ff fbf6 	bl	b4c50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway greenLine = Railway(
   b5464:	a94e      	add	r1, sp, #312	; 0x138
   b5466:	9102      	str	r1, [sp, #8]
   b5468:	a951      	add	r1, sp, #324	; 0x144
   b546a:	e9cd b100 	strd	fp, r1, [sp]
   b546e:	a954      	add	r1, sp, #336	; 0x150
   b5470:	460b      	mov	r3, r1
   b5472:	a957      	add	r1, sp, #348	; 0x15c
   b5474:	460a      	mov	r2, r1
   b5476:	4867      	ldr	r0, [pc, #412]	; (b5614 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e4>)
   b5478:	a95a      	add	r1, sp, #360	; 0x168
   b547a:	f7ff fc69 	bl	b4d50 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b547e:	a84e      	add	r0, sp, #312	; 0x138
   b5480:	f7ff f8cc 	bl	b461c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5484:	a851      	add	r0, sp, #324	; 0x144
   b5486:	f7ff f8d3 	bl	b4630 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b548a:	a884      	add	r0, sp, #528	; 0x210
   b548c:	f004 feb4 	bl	ba1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5490:	a87e      	add	r0, sp, #504	; 0x1f8
   b5492:	f004 feb1 	bl	ba1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5496:	4658      	mov	r0, fp
   b5498:	f004 feae 	bl	ba1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b549c:	a854      	add	r0, sp, #336	; 0x150
   b549e:	f7ff f8bd 	bl	b461c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b54a2:	a857      	add	r0, sp, #348	; 0x15c
   b54a4:	f7ff f8ba 	bl	b461c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b54a8:	a85a      	add	r0, sp, #360	; 0x168
   b54aa:	f7ff f8a3 	bl	b45f4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b54ae:	4b5a      	ldr	r3, [pc, #360]	; (b5618 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e8>)
   b54b0:	937e      	str	r3, [sp, #504]	; 0x1f8
      lon = lo;
   b54b2:	4b5a      	ldr	r3, [pc, #360]	; (b561c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6ec>)
   b54b4:	937f      	str	r3, [sp, #508]	; 0x1fc
      lat = la;
   b54b6:	4b5a      	ldr	r3, [pc, #360]	; (b5620 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f0>)
   b54b8:	9380      	str	r3, [sp, #512]	; 0x200
      lon = lo;
   b54ba:	4b5a      	ldr	r3, [pc, #360]	; (b5624 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f4>)
   b54bc:	9381      	str	r3, [sp, #516]	; 0x204
      lat = la;
   b54be:	4b5a      	ldr	r3, [pc, #360]	; (b5628 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f8>)
   b54c0:	9382      	str	r3, [sp, #520]	; 0x208
      lon = lo;
   b54c2:	4b5a      	ldr	r3, [pc, #360]	; (b562c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6fc>)
   b54c4:	9383      	str	r3, [sp, #524]	; 0x20c
);
   b54c6:	a97e      	add	r1, sp, #504	; 0x1f8
      lat = la;
   b54c8:	4b59      	ldr	r3, [pc, #356]	; (b5630 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x700>)
   b54ca:	9124      	str	r1, [sp, #144]	; 0x90
   b54cc:	9384      	str	r3, [sp, #528]	; 0x210
   b54ce:	2108      	movs	r1, #8
   b54d0:	4b58      	ldr	r3, [pc, #352]	; (b5634 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x704>)
   b54d2:	938a      	str	r3, [sp, #552]	; 0x228
   b54d4:	f10d 0868 	add.w	r8, sp, #104	; 0x68
      lon = lo;
   b54d8:	4b57      	ldr	r3, [pc, #348]	; (b5638 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x708>)
   b54da:	9125      	str	r1, [sp, #148]	; 0x94
   b54dc:	e897 0006 	ldmia.w	r7, {r1, r2}
   b54e0:	938b      	str	r3, [sp, #556]	; 0x22c
   b54e2:	f10a 0790 	add.w	r7, sl, #144	; 0x90
   b54e6:	4643      	mov	r3, r8
   b54e8:	a85a      	add	r0, sp, #360	; 0x168
   b54ea:	ed8d ea85 	vstr	s28, [sp, #532]	; 0x214
      lat = la;
   b54ee:	edcd 9a86 	vstr	s19, [sp, #536]	; 0x218
      lon = lo;
   b54f2:	ed8d 9a87 	vstr	s18, [sp, #540]	; 0x21c
      lat = la;
   b54f6:	edcd 8a88 	vstr	s17, [sp, #544]	; 0x220
      lon = lo;
   b54fa:	ed8d 8a89 	vstr	s16, [sp, #548]	; 0x224
      lat = la;
   b54fe:	edcd aa8c 	vstr	s21, [sp, #560]	; 0x230
      lon = lo;
   b5502:	ed8d aa8d 	vstr	s20, [sp, #564]	; 0x234
   b5506:	f7ff f8c9 	bl	b469c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b550a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b550c:	46dc      	mov	ip, fp
   b550e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5512:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   b5516:	9f04      	ldr	r7, [sp, #16]
   b5518:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
   b551c:	e887 0007 	stmia.w	r7, {r0, r1, r2}
   b5520:	2107      	movs	r1, #7
   b5522:	9123      	str	r1, [sp, #140]	; 0x8c
   b5524:	e896 0006 	ldmia.w	r6, {r1, r2}
   b5528:	a857      	add	r0, sp, #348	; 0x15c
   b552a:	f7ff fb91 	bl	b4c50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b552e:	f10a 03ac 	add.w	r3, sl, #172	; 0xac
   b5532:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5534:	ae61      	add	r6, sp, #388	; 0x184
   b5536:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   b553a:	2104      	movs	r1, #4
   b553c:	ab20      	add	r3, sp, #128	; 0x80
   b553e:	9620      	str	r6, [sp, #128]	; 0x80
   b5540:	9121      	str	r1, [sp, #132]	; 0x84
   b5542:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5546:	a854      	add	r0, sp, #336	; 0x150
   b5548:	f7ff fb82 	bl	b4c50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b554c:	4620      	mov	r0, r4
   b554e:	493b      	ldr	r1, [pc, #236]	; (b563c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x70c>)
   b5550:	f7fe fdda 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5554:	493a      	ldr	r1, [pc, #232]	; (b5640 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x710>)
   b5556:	a872      	add	r0, sp, #456	; 0x1c8
   b5558:	f7fe fdd6 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b555c:	4939      	ldr	r1, [pc, #228]	; (b5644 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x714>)
   b555e:	a878      	add	r0, sp, #480	; 0x1e0
   b5560:	f7fe fdd2 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5564:	a972      	add	r1, sp, #456	; 0x1c8
   b5566:	911e      	str	r1, [sp, #120]	; 0x78
   b5568:	2102      	movs	r1, #2
   b556a:	af18      	add	r7, sp, #96	; 0x60
   b556c:	911f      	str	r1, [sp, #124]	; 0x7c
   b556e:	aa1e      	add	r2, sp, #120	; 0x78
   b5570:	463b      	mov	r3, r7
   b5572:	ca06      	ldmia	r2, {r1, r2}
   b5574:	a851      	add	r0, sp, #324	; 0x144
   b5576:	f7ff f8c5 	bl	b4704 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b557a:	f10a 03bc 	add.w	r3, sl, #188	; 0xbc
   b557e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5580:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b5584:	2104      	movs	r1, #4
   b5586:	ab1c      	add	r3, sp, #112	; 0x70
   b5588:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
   b558c:	911d      	str	r1, [sp, #116]	; 0x74
   b558e:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5592:	a84e      	add	r0, sp, #312	; 0x138
   b5594:	f7ff fb5c 	bl	b4c50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway orangeLine = Railway(
   b5598:	a94e      	add	r1, sp, #312	; 0x138
   b559a:	9102      	str	r1, [sp, #8]
   b559c:	a951      	add	r1, sp, #324	; 0x144
   b559e:	e9cd 4100 	strd	r4, r1, [sp]
   b55a2:	a954      	add	r1, sp, #336	; 0x150
   b55a4:	460b      	mov	r3, r1
   b55a6:	a957      	add	r1, sp, #348	; 0x15c
   b55a8:	460a      	mov	r2, r1
   b55aa:	4827      	ldr	r0, [pc, #156]	; (b5648 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x718>)
   b55ac:	a95a      	add	r1, sp, #360	; 0x168
   b55ae:	f7ff fbcf 	bl	b4d50 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b55b2:	a84e      	add	r0, sp, #312	; 0x138
   b55b4:	f7ff f832 	bl	b461c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b55b8:	a851      	add	r0, sp, #324	; 0x144
   b55ba:	f7ff f839 	bl	b4630 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b55be:	a878      	add	r0, sp, #480	; 0x1e0
   b55c0:	f004 fe1a 	bl	ba1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b55c4:	a872      	add	r0, sp, #456	; 0x1c8
   b55c6:	f004 fe17 	bl	ba1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b55ca:	4620      	mov	r0, r4
   b55cc:	f004 fe14 	bl	ba1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b55d0:	a854      	add	r0, sp, #336	; 0x150
   b55d2:	f7ff f823 	bl	b461c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b55d6:	a857      	add	r0, sp, #348	; 0x15c
   b55d8:	e038      	b.n	b564c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x71c>
   b55da:	bf00      	nop
   b55dc:	000bd43f 	.word	0x000bd43f
   b55e0:	000bd445 	.word	0x000bd445
   b55e4:	000bd44c 	.word	0x000bd44c
   b55e8:	200355b8 	.word	0x200355b8
   b55ec:	42276997 	.word	0x42276997
   b55f0:	c2af40b8 	.word	0xc2af40b8
   b55f4:	422781fe 	.word	0x422781fe
   b55f8:	42278afb 	.word	0x42278afb
   b55fc:	c2af4494 	.word	0xc2af4494
   b5600:	42278971 	.word	0x42278971
   b5604:	c2af6479 	.word	0xc2af6479
   b5608:	000bd343 	.word	0x000bd343
   b560c:	000bd453 	.word	0x000bd453
   b5610:	000bd45a 	.word	0x000bd45a
   b5614:	20035628 	.word	0x20035628
   b5618:	4227631a 	.word	0x4227631a
   b561c:	c2af4bd2 	.word	0xc2af4bd2
   b5620:	42276ec4 	.word	0x42276ec4
   b5624:	c2af4115 	.word	0xc2af4115
   b5628:	422780b5 	.word	0x422780b5
   b562c:	c2af4086 	.word	0xc2af4086
   b5630:	42278200 	.word	0x42278200
   b5634:	422781e1 	.word	0x422781e1
   b5638:	c2af4476 	.word	0xc2af4476
   b563c:	000bd461 	.word	0x000bd461
   b5640:	000bd468 	.word	0x000bd468
   b5644:	000bd46f 	.word	0x000bd46f
   b5648:	20037eb8 	.word	0x20037eb8
   b564c:	f7fe ffe6 	bl	b461c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5650:	a85a      	add	r0, sp, #360	; 0x168
   b5652:	f7fe ffcf 	bl	b45f4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b5656:	a97e      	add	r1, sp, #504	; 0x1f8
   b5658:	911a      	str	r1, [sp, #104]	; 0x68
   b565a:	2107      	movs	r1, #7
   b565c:	ae10      	add	r6, sp, #64	; 0x40
   b565e:	911b      	str	r1, [sp, #108]	; 0x6c
   b5660:	e898 0006 	ldmia.w	r8, {r1, r2}
   b5664:	4633      	mov	r3, r6
   b5666:	a85a      	add	r0, sp, #360	; 0x168
      lat = la;
   b5668:	edcd da7e 	vstr	s27, [sp, #504]	; 0x1f8
      lon = lo;
   b566c:	ed8d da7f 	vstr	s26, [sp, #508]	; 0x1fc
      lat = la;
   b5670:	edcd ca80 	vstr	s25, [sp, #512]	; 0x200
      lon = lo;
   b5674:	ed8d ca81 	vstr	s24, [sp, #516]	; 0x204
      lat = la;
   b5678:	edcd 8a82 	vstr	s17, [sp, #520]	; 0x208
      lon = lo;
   b567c:	ed8d 8a83 	vstr	s16, [sp, #524]	; 0x20c
      lat = la;
   b5680:	edcd ba84 	vstr	s23, [sp, #528]	; 0x210
      lon = lo;
   b5684:	ed8d ba85 	vstr	s22, [sp, #532]	; 0x214
      lat = la;
   b5688:	edcd aa86 	vstr	s21, [sp, #536]	; 0x218
      lon = lo;
   b568c:	ed8d aa87 	vstr	s20, [sp, #540]	; 0x21c
      lat = la;
   b5690:	edcd 9a88 	vstr	s19, [sp, #544]	; 0x220
      lon = lo;
   b5694:	ed8d 9a89 	vstr	s18, [sp, #548]	; 0x224
      lat = la;
   b5698:	edcd 8a8a 	vstr	s17, [sp, #552]	; 0x228
      lon = lo;
   b569c:	ed8d 8a8b 	vstr	s16, [sp, #556]	; 0x22c
   b56a0:	f7fe fffc 	bl	b469c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b56a4:	f10a 0e28 	add.w	lr, sl, #40	; 0x28
   b56a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b56ac:	46dc      	mov	ip, fp
   b56ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b56b2:	9905      	ldr	r1, [sp, #20]
   b56b4:	9a04      	ldr	r2, [sp, #16]
   b56b6:	f8cd b060 	str.w	fp, [sp, #96]	; 0x60
   b56ba:	c903      	ldmia	r1, {r0, r1}
   b56bc:	e9c2 0100 	strd	r0, r1, [r2]
   b56c0:	2106      	movs	r1, #6
   b56c2:	9119      	str	r1, [sp, #100]	; 0x64
   b56c4:	e897 0006 	ldmia.w	r7, {r1, r2}
   b56c8:	a857      	add	r0, sp, #348	; 0x15c
   b56ca:	f7ff fac1 	bl	b4c50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b56ce:	f10a 0340 	add.w	r3, sl, #64	; 0x40
   b56d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b56d4:	af61      	add	r7, sp, #388	; 0x184
   b56d6:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b56da:	2104      	movs	r1, #4
   b56dc:	ab16      	add	r3, sp, #88	; 0x58
   b56de:	9716      	str	r7, [sp, #88]	; 0x58
   b56e0:	9117      	str	r1, [sp, #92]	; 0x5c
   b56e2:	e893 0006 	ldmia.w	r3, {r1, r2}
   b56e6:	a854      	add	r0, sp, #336	; 0x150
   b56e8:	f7ff fab2 	bl	b4c50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b56ec:	4620      	mov	r0, r4
   b56ee:	49b8      	ldr	r1, [pc, #736]	; (b59d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaa0>)
   b56f0:	f8df 832c 	ldr.w	r8, [pc, #812]	; b5a20 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaf0>
   b56f4:	f7fe fd08 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b56f8:	49b6      	ldr	r1, [pc, #728]	; (b59d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaa4>)
   b56fa:	a872      	add	r0, sp, #456	; 0x1c8
   b56fc:	f7fe fd04 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5700:	49b5      	ldr	r1, [pc, #724]	; (b59d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaa8>)
   b5702:	a878      	add	r0, sp, #480	; 0x1e0
   b5704:	f7fe fd00 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5708:	ab72      	add	r3, sp, #456	; 0x1c8
   b570a:	9314      	str	r3, [sp, #80]	; 0x50
   b570c:	2302      	movs	r3, #2
   b570e:	9315      	str	r3, [sp, #84]	; 0x54
   b5710:	af0e      	add	r7, sp, #56	; 0x38
   b5712:	aa14      	add	r2, sp, #80	; 0x50
   b5714:	ca06      	ldmia	r2, {r1, r2}
   b5716:	463b      	mov	r3, r7
   b5718:	a851      	add	r0, sp, #324	; 0x144
   b571a:	f7fe fff3 	bl	b4704 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b571e:	f10a 0250 	add.w	r2, sl, #80	; 0x50
   b5722:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   b5724:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b5728:	2204      	movs	r2, #4
   b572a:	ab12      	add	r3, sp, #72	; 0x48
   b572c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   b5730:	9213      	str	r2, [sp, #76]	; 0x4c
   b5732:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5736:	a84e      	add	r0, sp, #312	; 0x138
   b5738:	f7ff fa8a 	bl	b4c50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway purpleLine = Railway(
   b573c:	ab4e      	add	r3, sp, #312	; 0x138
   b573e:	9302      	str	r3, [sp, #8]
   b5740:	ab51      	add	r3, sp, #324	; 0x144
   b5742:	aa57      	add	r2, sp, #348	; 0x15c
   b5744:	a95a      	add	r1, sp, #360	; 0x168
   b5746:	e9cd 4300 	strd	r4, r3, [sp]
   b574a:	48a4      	ldr	r0, [pc, #656]	; (b59dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaac>)
   b574c:	ab54      	add	r3, sp, #336	; 0x150
   b574e:	f7ff faff 	bl	b4d50 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5752:	a84e      	add	r0, sp, #312	; 0x138
   b5754:	f7fe ff62 	bl	b461c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5758:	a851      	add	r0, sp, #324	; 0x144
   b575a:	f7fe ff69 	bl	b4630 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b575e:	a878      	add	r0, sp, #480	; 0x1e0
   b5760:	f004 fd4a 	bl	ba1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5764:	a872      	add	r0, sp, #456	; 0x1c8
   b5766:	f004 fd47 	bl	ba1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b576a:	4620      	mov	r0, r4
   b576c:	f004 fd44 	bl	ba1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5770:	a854      	add	r0, sp, #336	; 0x150
   b5772:	f7fe ff53 	bl	b461c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5776:	a857      	add	r0, sp, #348	; 0x15c
   b5778:	f7fe ff50 	bl	b461c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b577c:	a85a      	add	r0, sp, #360	; 0x168
   b577e:	f7fe ff39 	bl	b45f4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5782:	4b97      	ldr	r3, [pc, #604]	; (b59e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xab0>)
   b5784:	937e      	str	r3, [sp, #504]	; 0x1f8
      lon = lo;
   b5786:	4b97      	ldr	r3, [pc, #604]	; (b59e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xab4>)
   b5788:	937f      	str	r3, [sp, #508]	; 0x1fc
      lat = la;
   b578a:	4b97      	ldr	r3, [pc, #604]	; (b59e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xab8>)
   b578c:	9380      	str	r3, [sp, #512]	; 0x200
      lon = lo;
   b578e:	4b97      	ldr	r3, [pc, #604]	; (b59ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xabc>)
   b5790:	9381      	str	r3, [sp, #516]	; 0x204
      lat = la;
   b5792:	4b97      	ldr	r3, [pc, #604]	; (b59f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xac0>)
   b5794:	9382      	str	r3, [sp, #520]	; 0x208
      lon = lo;
   b5796:	4b97      	ldr	r3, [pc, #604]	; (b59f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xac4>)
   b5798:	9383      	str	r3, [sp, #524]	; 0x20c
);
   b579a:	ab7e      	add	r3, sp, #504	; 0x1f8
   b579c:	9310      	str	r3, [sp, #64]	; 0x40
   b579e:	2308      	movs	r3, #8
   b57a0:	9311      	str	r3, [sp, #68]	; 0x44
   b57a2:	e896 0006 	ldmia.w	r6, {r1, r2}
   b57a6:	ab07      	add	r3, sp, #28
   b57a8:	f10a 06cc 	add.w	r6, sl, #204	; 0xcc
   b57ac:	a85a      	add	r0, sp, #360	; 0x168
      lat = la;
   b57ae:	edcd 8a84 	vstr	s17, [sp, #528]	; 0x210
      lon = lo;
   b57b2:	ed8d 8a85 	vstr	s16, [sp, #532]	; 0x214
      lat = la;
   b57b6:	edcd 9a86 	vstr	s19, [sp, #536]	; 0x218
      lon = lo;
   b57ba:	ed8d 9a87 	vstr	s18, [sp, #540]	; 0x21c
      lat = la;
   b57be:	edcd aa88 	vstr	s21, [sp, #544]	; 0x220
      lon = lo;
   b57c2:	ed8d aa89 	vstr	s20, [sp, #548]	; 0x224
      lat = la;
   b57c6:	edcd ba8a 	vstr	s23, [sp, #552]	; 0x228
      lon = lo;
   b57ca:	ed8d ba8b 	vstr	s22, [sp, #556]	; 0x22c
      lat = la;
   b57ce:	edcd 8a8c 	vstr	s17, [sp, #560]	; 0x230
      lon = lo;
   b57d2:	ed8d 8a8d 	vstr	s16, [sp, #564]	; 0x234
   b57d6:	f7fe ff61 	bl	b469c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b57da:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b57dc:	46dc      	mov	ip, fp
   b57de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b57e2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   b57e6:	9b04      	ldr	r3, [sp, #16]
   b57e8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
   b57ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b57f0:	2307      	movs	r3, #7
   b57f2:	930f      	str	r3, [sp, #60]	; 0x3c
   b57f4:	e897 0006 	ldmia.w	r7, {r1, r2}
   b57f8:	a857      	add	r0, sp, #348	; 0x15c
   b57fa:	f7ff fa29 	bl	b4c50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b57fe:	f10a 03e8 	add.w	r3, sl, #232	; 0xe8
   b5802:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5804:	ae61      	add	r6, sp, #388	; 0x184
   b5806:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   b580a:	2204      	movs	r2, #4
   b580c:	ab0c      	add	r3, sp, #48	; 0x30
   b580e:	960c      	str	r6, [sp, #48]	; 0x30
   b5810:	920d      	str	r2, [sp, #52]	; 0x34
   b5812:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5816:	a854      	add	r0, sp, #336	; 0x150
   b5818:	f7ff fa1a 	bl	b4c50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b581c:	4620      	mov	r0, r4
   b581e:	4976      	ldr	r1, [pc, #472]	; (b59f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xac8>)
   b5820:	4e76      	ldr	r6, [pc, #472]	; (b59fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xacc>)
   b5822:	f7fe fc71 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5826:	4976      	ldr	r1, [pc, #472]	; (b5a00 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xad0>)
   b5828:	a872      	add	r0, sp, #456	; 0x1c8
   b582a:	f7fe fc6d 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b582e:	4975      	ldr	r1, [pc, #468]	; (b5a04 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xad4>)
   b5830:	a878      	add	r0, sp, #480	; 0x1e0
   b5832:	f7fe fc69 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5836:	ab72      	add	r3, sp, #456	; 0x1c8
   b5838:	930a      	str	r3, [sp, #40]	; 0x28
   b583a:	2302      	movs	r3, #2
   b583c:	930b      	str	r3, [sp, #44]	; 0x2c
   b583e:	aa0a      	add	r2, sp, #40	; 0x28
   b5840:	ca06      	ldmia	r2, {r1, r2}
   b5842:	ab06      	add	r3, sp, #24
   b5844:	f10a 0af8 	add.w	sl, sl, #248	; 0xf8
   b5848:	a851      	add	r0, sp, #324	; 0x144
   b584a:	f7fe ff5b 	bl	b4704 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b584e:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
   b5852:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b5856:	2204      	movs	r2, #4
   b5858:	ab08      	add	r3, sp, #32
   b585a:	f8cd 9020 	str.w	r9, [sp, #32]
   b585e:	9209      	str	r2, [sp, #36]	; 0x24
   b5860:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5864:	a84e      	add	r0, sp, #312	; 0x138
   b5866:	f7ff f9f3 	bl	b4c50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway pinkLine = Railway(
   b586a:	ab4e      	add	r3, sp, #312	; 0x138
   b586c:	9302      	str	r3, [sp, #8]
   b586e:	ab51      	add	r3, sp, #324	; 0x144
   b5870:	aa57      	add	r2, sp, #348	; 0x15c
   b5872:	a95a      	add	r1, sp, #360	; 0x168
   b5874:	e9cd 4300 	strd	r4, r3, [sp]
   b5878:	4863      	ldr	r0, [pc, #396]	; (b5a08 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xad8>)
   b587a:	ab54      	add	r3, sp, #336	; 0x150
   b587c:	f7ff fa68 	bl	b4d50 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5880:	a84e      	add	r0, sp, #312	; 0x138
   b5882:	f7fe fecb 	bl	b461c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5886:	a851      	add	r0, sp, #324	; 0x144
   b5888:	f7fe fed2 	bl	b4630 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b588c:	a878      	add	r0, sp, #480	; 0x1e0
   b588e:	f004 fcb3 	bl	ba1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5892:	a872      	add	r0, sp, #456	; 0x1c8
   b5894:	f004 fcb0 	bl	ba1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5898:	4620      	mov	r0, r4
   b589a:	f004 fcad 	bl	ba1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b589e:	a854      	add	r0, sp, #336	; 0x150
   b58a0:	f7fe febc 	bl	b461c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b58a4:	a857      	add	r0, sp, #348	; 0x15c
   b58a6:	f7fe feb9 	bl	b461c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b58aa:	a85a      	add	r0, sp, #360	; 0x168
   b58ac:	f7fe fea2 	bl	b45f4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b58b0:	4b56      	ldr	r3, [pc, #344]	; (b5a0c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xadc>)
std::vector<int> addressArr = std::vector<int>(slaveCountExpected, 0);
   b58b2:	4957      	ldr	r1, [pc, #348]	; (b5a10 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xae0>)
   b58b4:	609d      	str	r5, [r3, #8]
   b58b6:	aa7e      	add	r2, sp, #504	; 0x1f8
   b58b8:	e9c3 5500 	strd	r5, r5, [r3]
   b58bc:	6809      	ldr	r1, [r1, #0]
   b58be:	4855      	ldr	r0, [pc, #340]	; (b5a14 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xae4>)
   b58c0:	957e      	str	r5, [sp, #504]	; 0x1f8
   b58c2:	ab72      	add	r3, sp, #456	; 0x1c8
   b58c4:	f7fe fec8 	bl	b4658 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b58c8:	4b53      	ldr	r3, [pc, #332]	; (b5a18 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xae8>)
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b58ca:	4954      	ldr	r1, [pc, #336]	; (b5a1c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaec>)
   b58cc:	609d      	str	r5, [r3, #8]
   b58ce:	e9c3 5500 	strd	r5, r5, [r3]
   b58d2:	4853      	ldr	r0, [pc, #332]	; (b5a20 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaf0>)
   b58d4:	f002 fb92 	bl	b7ffc <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b58d8:	4952      	ldr	r1, [pc, #328]	; (b5a24 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaf4>)
   b58da:	4853      	ldr	r0, [pc, #332]	; (b5a28 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaf8>)
   b58dc:	f002 fb8e 	bl	b7ffc <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b58e0:	4952      	ldr	r1, [pc, #328]	; (b5a2c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xafc>)
   b58e2:	4846      	ldr	r0, [pc, #280]	; (b59fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xacc>)
   b58e4:	f002 fb8a 	bl	b7ffc <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b58e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b58ea:	46a2      	mov	sl, r4
   b58ec:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
   b58f0:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   b58f4:	46c1      	mov	r9, r8
   b58f6:	f8d6 c000 	ldr.w	ip, [r6]
   b58fa:	f8ca c000 	str.w	ip, [sl]
   b58fe:	465e      	mov	r6, fp
   b5900:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5902:	f859 3910 	ldr.w	r3, [r9], #-16
   b5906:	9305      	str	r3, [sp, #20]
   b5908:	9b04      	ldr	r3, [sp, #16]
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b590a:	f8df e148 	ldr.w	lr, [pc, #328]	; b5a54 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb24>
   b590e:	461a      	mov	r2, r3
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b5910:	4626      	mov	r6, r4
   b5912:	9b05      	ldr	r3, [sp, #20]
   b5914:	6013      	str	r3, [r2, #0]
   b5916:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b5918:	af72      	add	r7, sp, #456	; 0x1c8
      constexpr __shared_count() noexcept : _M_pi(0)
   b591a:	e9ce 5500 	strd	r5, r5, [lr]
   b591e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b5920:	f8c7 c000 	str.w	ip, [r7]
        BleUuid sUuid(svcUuid);
   b5924:	46dc      	mov	ip, fp
   b5926:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b592a:	ae7e      	add	r6, sp, #504	; 0x1f8
   b592c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b592e:	9b05      	ldr	r3, [sp, #20]
   b5930:	6033      	str	r3, [r6, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5932:	ab7e      	add	r3, sp, #504	; 0x1f8
   b5934:	4670      	mov	r0, lr
   b5936:	493e      	ldr	r1, [pc, #248]	; (b5a30 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb00>)
   b5938:	9300      	str	r3, [sp, #0]
   b593a:	f04f 0210 	mov.w	r2, #16
   b593e:	ab72      	add	r3, sp, #456	; 0x1c8
   b5940:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b5944:	f003 f8c4 	bl	b8ad0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b5948:	f8df c0dc 	ldr.w	ip, [pc, #220]	; b5a28 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaf8>
   b594c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5950:	46a6      	mov	lr, r4
   b5952:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b5956:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   b595a:	f8dc e000 	ldr.w	lr, [ip]
   b595e:	f8ca e000 	str.w	lr, [sl]
   b5962:	46dc      	mov	ip, fp
   b5964:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5968:	9b04      	ldr	r3, [sp, #16]
   b596a:	f8d8 9000 	ldr.w	r9, [r8]
   b596e:	f8c3 9000 	str.w	r9, [r3]
        BleUuid cUuid(charUuid);
   b5972:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
      : _M_ptr(0), _M_refcount()
   b5974:	f8df 80e0 	ldr.w	r8, [pc, #224]	; b5a58 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb28>
   b5978:	f50d 7ce4 	add.w	ip, sp, #456	; 0x1c8
        BleUuid sUuid(svcUuid);
   b597c:	465c      	mov	r4, fp
        BleUuid cUuid(charUuid);
   b597e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
      constexpr __shared_count() noexcept : _M_pi(0)
   b5982:	e9c8 5500 	strd	r5, r5, [r8]
   b5986:	f8c7 e000 	str.w	lr, [r7]
        BleUuid sUuid(svcUuid);
   b598a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b598c:	af7e      	add	r7, sp, #504	; 0x1f8
   b598e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5990:	4b28      	ldr	r3, [pc, #160]	; (b5a34 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb04>)
        BleUuid sUuid(svcUuid);
   b5992:	f8c6 9000 	str.w	r9, [r6]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5996:	9301      	str	r3, [sp, #4]
   b5998:	ab7e      	add	r3, sp, #504	; 0x1f8
   b599a:	f04f 0204 	mov.w	r2, #4
   b599e:	4926      	ldr	r1, [pc, #152]	; (b5a38 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb08>)
   b59a0:	9300      	str	r3, [sp, #0]
   b59a2:	4640      	mov	r0, r8
   b59a4:	ab72      	add	r3, sp, #456	; 0x1c8
   b59a6:	9502      	str	r5, [sp, #8]
   b59a8:	f003 f892 	bl	b8ad0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
   b59ac:	4923      	ldr	r1, [pc, #140]	; (b5a3c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb0c>)
   b59ae:	4824      	ldr	r0, [pc, #144]	; (b5a40 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb10>)
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b59b0:	4c24      	ldr	r4, [pc, #144]	; (b5a44 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb14>)
   b59b2:	f003 fdb0 	bl	b9516 <_ZN6StringC1EPK19__FlashStringHelper>
   b59b6:	4824      	ldr	r0, [pc, #144]	; (b5a48 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb18>)
   b59b8:	f003 fbba 	bl	b9130 <_ZN9IPAddressC1Ev>
   b59bc:	491f      	ldr	r1, [pc, #124]	; (b5a3c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb0c>)
   b59be:	4823      	ldr	r0, [pc, #140]	; (b5a4c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb1c>)
   b59c0:	f003 fda9 	bl	b9516 <_ZN6StringC1EPK19__FlashStringHelper>
   b59c4:	491d      	ldr	r1, [pc, #116]	; (b5a3c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb0c>)
   b59c6:	4822      	ldr	r0, [pc, #136]	; (b5a50 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb20>)
   b59c8:	f003 fda5 	bl	b9516 <_ZN6StringC1EPK19__FlashStringHelper>
   b59cc:	e046      	b.n	b5a5c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb2c>
   b59ce:	bf00      	nop
   b59d0:	000bd476 	.word	0x000bd476
   b59d4:	000bd47d 	.word	0x000bd47d
   b59d8:	000bd484 	.word	0x000bd484
   b59dc:	2003e54c 	.word	0x2003e54c
   b59e0:	42276a76 	.word	0x42276a76
   b59e4:	c2af692b 	.word	0xc2af692b
   b59e8:	42276b5f 	.word	0x42276b5f
   b59ec:	c2af56cd 	.word	0xc2af56cd
   b59f0:	42278a2d 	.word	0x42278a2d
   b59f4:	c2af56d8 	.word	0xc2af56d8
   b59f8:	000bd48b 	.word	0x000bd48b
   b59fc:	20035528 	.word	0x20035528
   b5a00:	000bd490 	.word	0x000bd490
   b5a04:	000bd497 	.word	0x000bd497
   b5a08:	2003e4e0 	.word	0x2003e4e0
   b5a0c:	2003e5b8 	.word	0x2003e5b8
   b5a10:	2003531c 	.word	0x2003531c
   b5a14:	2003553c 	.word	0x2003553c
   b5a18:	2003e698 	.word	0x2003e698
   b5a1c:	000bd49e 	.word	0x000bd49e
   b5a20:	20035500 	.word	0x20035500
   b5a24:	000bd4c3 	.word	0x000bd4c3
   b5a28:	20035514 	.word	0x20035514
   b5a2c:	000bd4e8 	.word	0x000bd4e8
   b5a30:	000bd50d 	.word	0x000bd50d
   b5a34:	000b424d 	.word	0x000b424d
   b5a38:	000bd510 	.word	0x000bd510
   b5a3c:	000bd726 	.word	0x000bd726
   b5a40:	2003e630 	.word	0x2003e630
   b5a44:	20037f24 	.word	0x20037f24
   b5a48:	2003e640 	.word	0x2003e640
   b5a4c:	2003e658 	.word	0x2003e658
   b5a50:	2003e66c 	.word	0x2003e66c
   b5a54:	2003e6a8 	.word	0x2003e6a8
   b5a58:	2003e690 	.word	0x2003e690
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   b5a5c:	4937      	ldr	r1, [pc, #220]	; (b5b3c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc0c>)
   b5a5e:	4838      	ldr	r0, [pc, #224]	; (b5b40 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc10>)
   b5a60:	f003 fd59 	bl	b9516 <_ZN6StringC1EPK19__FlashStringHelper>
HttpClient http;
   b5a64:	4837      	ldr	r0, [pc, #220]	; (b5b44 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc14>)
   b5a66:	f000 ffeb 	bl	b6a40 <_ZN10HttpClientC1Ev>
   b5a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5a6e:	9300      	str	r3, [sp, #0]
   b5a70:	f242 7210 	movw	r2, #10000	; 0x2710
   b5a74:	4b34      	ldr	r3, [pc, #208]	; (b5b48 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc18>)
   b5a76:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b5a7a:	4620      	mov	r0, r4
   b5a7c:	f001 f9b8 	bl	b6df0 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b5a80:	4b32      	ldr	r3, [pc, #200]	; (b5b4c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc1c>)
   b5a82:	6023      	str	r3, [r4, #0]
   b5a84:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   b5a88:	ecbd 8b0e 	vpop	{d8-d14}
   b5a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_M_deallocate(_M_impl._M_start,
   b5a90:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b5a92:	b118      	cbz	r0, b5a9c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb6c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b5a94:	68a1      	ldr	r1, [r4, #8]
   b5a96:	1a09      	subs	r1, r1, r0
   b5a98:	f7fe fb03 	bl	b40a2 <_ZdlPvj>
Railway pinkLine = Railway(
   b5a9c:	482c      	ldr	r0, [pc, #176]	; (b5b50 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc20>)
   b5a9e:	f7ff f88f 	bl	b4bc0 <_ZN7RailwayD1Ev>
Railway purpleLine = Railway(
   b5aa2:	482c      	ldr	r0, [pc, #176]	; (b5b54 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc24>)
   b5aa4:	f7ff f88c 	bl	b4bc0 <_ZN7RailwayD1Ev>
Railway orangeLine = Railway(
   b5aa8:	482b      	ldr	r0, [pc, #172]	; (b5b58 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc28>)
   b5aaa:	f7ff f889 	bl	b4bc0 <_ZN7RailwayD1Ev>
Railway greenLine = Railway(
   b5aae:	482b      	ldr	r0, [pc, #172]	; (b5b5c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc2c>)
   b5ab0:	f7ff f886 	bl	b4bc0 <_ZN7RailwayD1Ev>
Railway brownLine = Railway(
   b5ab4:	482a      	ldr	r0, [pc, #168]	; (b5b60 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc30>)
   b5ab6:	f7ff f883 	bl	b4bc0 <_ZN7RailwayD1Ev>
Railway blueLine = Railway(
   b5aba:	482a      	ldr	r0, [pc, #168]	; (b5b64 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc34>)
   b5abc:	f7ff f880 	bl	b4bc0 <_ZN7RailwayD1Ev>
Railway redLine = Railway(
   b5ac0:	4829      	ldr	r0, [pc, #164]	; (b5b68 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc38>)
   b5ac2:	f7ff f87d 	bl	b4bc0 <_ZN7RailwayD1Ev>
   b5ac6:	e7dd      	b.n	b5a84 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb54>
JsonParserStatic<10000, 1000> parser;
   b5ac8:	4828      	ldr	r0, [pc, #160]	; (b5b6c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc3c>)
   b5aca:	f7fe faf5 	bl	b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b5ace:	4b1d      	ldr	r3, [pc, #116]	; (b5b44 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc14>)
   b5ad0:	4a27      	ldr	r2, [pc, #156]	; (b5b70 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc40>)
	if (_M_pi != nullptr)
   b5ad2:	699c      	ldr	r4, [r3, #24]
   b5ad4:	601a      	str	r2, [r3, #0]
   b5ad6:	b17c      	cbz	r4, b5af8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbc8>
      if (--_M_use_count == 0)
   b5ad8:	6863      	ldr	r3, [r4, #4]
   b5ada:	3b01      	subs	r3, #1
   b5adc:	6063      	str	r3, [r4, #4]
   b5ade:	b95b      	cbnz	r3, b5af8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbc8>
          _M_dispose();
   b5ae0:	6823      	ldr	r3, [r4, #0]
   b5ae2:	4620      	mov	r0, r4
   b5ae4:	689b      	ldr	r3, [r3, #8]
   b5ae6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5ae8:	68a3      	ldr	r3, [r4, #8]
   b5aea:	3b01      	subs	r3, #1
   b5aec:	60a3      	str	r3, [r4, #8]
   b5aee:	b91b      	cbnz	r3, b5af8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbc8>
            _M_destroy();
   b5af0:	6823      	ldr	r3, [r4, #0]
   b5af2:	4620      	mov	r0, r4
   b5af4:	68db      	ldr	r3, [r3, #12]
   b5af6:	4798      	blx	r3
   b5af8:	4811      	ldr	r0, [pc, #68]	; (b5b40 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc10>)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b5afa:	4c1e      	ldr	r4, [pc, #120]	; (b5b74 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc44>)
   b5afc:	f003 fcc0 	bl	b9480 <_ZN6StringD1Ev>
} http_request_t;
   b5b00:	481d      	ldr	r0, [pc, #116]	; (b5b78 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc48>)
   b5b02:	f003 fcbd 	bl	b9480 <_ZN6StringD1Ev>
   b5b06:	481d      	ldr	r0, [pc, #116]	; (b5b7c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc4c>)
   b5b08:	f003 fcba 	bl	b9480 <_ZN6StringD1Ev>
   b5b0c:	481c      	ldr	r0, [pc, #112]	; (b5b80 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc50>)
   b5b0e:	f003 fcb7 	bl	b9480 <_ZN6StringD1Ev>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   b5b12:	481c      	ldr	r0, [pc, #112]	; (b5b84 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc54>)
   b5b14:	f002 fcc3 	bl	b849e <_ZN8particle17BleCharacteristicD1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   b5b18:	481b      	ldr	r0, [pc, #108]	; (b5b88 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc58>)
   b5b1a:	f002 fcc0 	bl	b849e <_ZN8particle17BleCharacteristicD1Ev>
      }
   b5b1e:	481b      	ldr	r0, [pc, #108]	; (b5b8c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc5c>)
   b5b20:	f7fe fd7c 	bl	b461c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5b24:	481a      	ldr	r0, [pc, #104]	; (b5b90 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc60>)
   b5b26:	f7fe fd79 	bl	b461c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b5b2a:	e9d4 5600 	ldrd	r5, r6, [r4]
	  for (; __first != __last; ++__first)
   b5b2e:	42ae      	cmp	r6, r5
   b5b30:	d0ae      	beq.n	b5a90 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb60>
      __pointer->~_Tp();
   b5b32:	4628      	mov	r0, r5
   b5b34:	f7ff f844 	bl	b4bc0 <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b5b38:	356c      	adds	r5, #108	; 0x6c
   b5b3a:	e7f8      	b.n	b5b2e <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbfe>
   b5b3c:	000bd726 	.word	0x000bd726
   b5b40:	2003e680 	.word	0x2003e680
   b5b44:	2003569c 	.word	0x2003569c
   b5b48:	2003a660 	.word	0x2003a660
   b5b4c:	000bd5d0 	.word	0x000bd5d0
   b5b50:	2003e4e0 	.word	0x2003e4e0
   b5b54:	2003e54c 	.word	0x2003e54c
   b5b58:	20037eb8 	.word	0x20037eb8
   b5b5c:	20035628 	.word	0x20035628
   b5b60:	200355b8 	.word	0x200355b8
   b5b64:	2003554c 	.word	0x2003554c
   b5b68:	2003e5c4 	.word	0x2003e5c4
   b5b6c:	20037f24 	.word	0x20037f24
   b5b70:	000bda30 	.word	0x000bda30
   b5b74:	2003e5b8 	.word	0x2003e5b8
   b5b78:	2003e66c 	.word	0x2003e66c
   b5b7c:	2003e658 	.word	0x2003e658
   b5b80:	2003e630 	.word	0x2003e630
   b5b84:	2003e690 	.word	0x2003e690
   b5b88:	2003e6a8 	.word	0x2003e6a8
   b5b8c:	2003e698 	.word	0x2003e698
   b5b90:	2003553c 	.word	0x2003553c

000b5b94 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b5b94:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b5b96:	b510      	push	{r4, lr}
   b5b98:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b5b9a:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b5b9e:	d005      	beq.n	b5bac <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b5ba0:	4601      	mov	r1, r0
   b5ba2:	4622      	mov	r2, r4
   b5ba4:	4618      	mov	r0, r3
   b5ba6:	f005 fae5 	bl	bb174 <memmove>
   b5baa:	4603      	mov	r3, r0
	}
   b5bac:	1918      	adds	r0, r3, r4
   b5bae:	bd10      	pop	{r4, pc}

000b5bb0 <_ZN7RailwayC1ERKS_>:
class Railway{
   b5bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5bb4:	460d      	mov	r5, r1
   b5bb6:	4604      	mov	r4, r0
   b5bb8:	f7fe fdd8 	bl	b476c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5bbc:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5bc0:	2600      	movs	r6, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5bc2:	1ac9      	subs	r1, r1, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5bc4:	e9c4 6603 	strd	r6, r6, [r4, #12]
   b5bc8:	6166      	str	r6, [r4, #20]
      { _M_create_storage(__n); }
   b5bca:	1089      	asrs	r1, r1, #2
   b5bcc:	f104 000c 	add.w	r0, r4, #12
   b5bd0:	f7fe ffd6 	bl	b4b80 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
			      _Category>::__copy_m(__first, __last, __result);
   b5bd4:	68e2      	ldr	r2, [r4, #12]
   b5bd6:	e9d5 0103 	ldrd	r0, r1, [r5, #12]
   b5bda:	f7ff ffdb 	bl	b5b94 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b5bde:	f105 0118 	add.w	r1, r5, #24
	this->_M_impl._M_finish =
   b5be2:	6120      	str	r0, [r4, #16]
   b5be4:	f104 0018 	add.w	r0, r4, #24
   b5be8:	f7ff f818 	bl	b4c1c <_ZNSt6vectorIiSaIiEEC1ERKS1_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5bec:	e9d5 3709 	ldrd	r3, r7, [r5, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5bf0:	4826      	ldr	r0, [pc, #152]	; (b5c8c <_ZN7RailwayC1ERKS_+0xdc>)
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5bf2:	62e6      	str	r6, [r4, #44]	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5bf4:	1aff      	subs	r7, r7, r3
   b5bf6:	10bb      	asrs	r3, r7, #2
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5bf8:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5bfc:	4358      	muls	r0, r3
   b5bfe:	f7fe fa71 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b5c02:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5c06:	4407      	add	r7, r0
   b5c08:	62e7      	str	r7, [r4, #44]	; 0x2c
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b5c0a:	e9d5 7809 	ldrd	r7, r8, [r5, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5c0e:	4606      	mov	r6, r0
   b5c10:	45b8      	cmp	r8, r7
   b5c12:	d007      	beq.n	b5c24 <_ZN7RailwayC1ERKS_+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b5c14:	b11e      	cbz	r6, b5c1e <_ZN7RailwayC1ERKS_+0x6e>
   b5c16:	4639      	mov	r1, r7
   b5c18:	4630      	mov	r0, r6
   b5c1a:	f7fe ffff 	bl	b4c1c <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b5c1e:	360c      	adds	r6, #12
   b5c20:	370c      	adds	r7, #12
   b5c22:	e7f5      	b.n	b5c10 <_ZN7RailwayC1ERKS_+0x60>
	this->_M_impl._M_finish =
   b5c24:	62a6      	str	r6, [r4, #40]	; 0x28
   b5c26:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b5c2a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b5c2e:	f7fe fae3 	bl	b41f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5c32:	e9d5 3712 	ldrd	r3, r7, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5c36:	4815      	ldr	r0, [pc, #84]	; (b5c8c <_ZN7RailwayC1ERKS_+0xdc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5c38:	1aff      	subs	r7, r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5c3a:	2300      	movs	r3, #0
   b5c3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   b5c40:	6523      	str	r3, [r4, #80]	; 0x50
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5c42:	10fb      	asrs	r3, r7, #3
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5c44:	4358      	muls	r0, r3
   b5c46:	f7fe fa87 	bl	b4158 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b5c4a:	e9c4 0012 	strd	r0, r0, [r4, #72]	; 0x48
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5c4e:	4407      	add	r7, r0
   b5c50:	6527      	str	r7, [r4, #80]	; 0x50
   b5c52:	e9d5 7812 	ldrd	r7, r8, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5c56:	4606      	mov	r6, r0
   b5c58:	45b8      	cmp	r8, r7
   b5c5a:	d007      	beq.n	b5c6c <_ZN7RailwayC1ERKS_+0xbc>
   b5c5c:	b11e      	cbz	r6, b5c66 <_ZN7RailwayC1ERKS_+0xb6>
   b5c5e:	4639      	mov	r1, r7
   b5c60:	4630      	mov	r0, r6
   b5c62:	f7fe fac9 	bl	b41f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b5c66:	3618      	adds	r6, #24
   b5c68:	3718      	adds	r7, #24
   b5c6a:	e7f5      	b.n	b5c58 <_ZN7RailwayC1ERKS_+0xa8>
	this->_M_impl._M_finish =
   b5c6c:	64e6      	str	r6, [r4, #76]	; 0x4c
   b5c6e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b5c70:	6563      	str	r3, [r4, #84]	; 0x54
   b5c72:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b5c74:	65a3      	str	r3, [r4, #88]	; 0x58
   b5c76:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b5c78:	65e3      	str	r3, [r4, #92]	; 0x5c
   b5c7a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b5c7c:	6623      	str	r3, [r4, #96]	; 0x60
   b5c7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   b5c80:	6663      	str	r3, [r4, #100]	; 0x64
   b5c82:	6eab      	ldr	r3, [r5, #104]	; 0x68
   b5c84:	66a3      	str	r3, [r4, #104]	; 0x68
   b5c86:	4620      	mov	r0, r4
   b5c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5c8c:	aaaaaaab 	.word	0xaaaaaaab

000b5c90 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b5c90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5c94:	eba1 0800 	sub.w	r8, r1, r0
   b5c98:	496b      	ldr	r1, [pc, #428]	; (b5e48 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1b8>)
   b5c9a:	f8df a1b4 	ldr.w	sl, [pc, #436]	; b5e50 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1c0>
   b5c9e:	ea4f 08a8 	mov.w	r8, r8, asr #2
	__copy_m(_II __first, _II __last, _OI __result)
   b5ca2:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5ca4:	fb01 f808 	mul.w	r8, r1, r8
   b5ca8:	4614      	mov	r4, r2
   b5caa:	f1b8 0f00 	cmp.w	r8, #0
   b5cae:	f340 80c6 	ble.w	b5e3e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1ae>
   b5cb2:	4629      	mov	r1, r5
   b5cb4:	4620      	mov	r0, r4
   b5cb6:	f7fe fba7 	bl	b4408 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
      if (&__x != this)
   b5cba:	42a5      	cmp	r5, r4
   b5cbc:	d025      	beq.n	b5d0a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x7a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5cbe:	e9d5 9103 	ldrd	r9, r1, [r5, #12]
			 - this->_M_impl._M_start); }
   b5cc2:	68e2      	ldr	r2, [r4, #12]
   b5cc4:	6963      	ldr	r3, [r4, #20]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5cc6:	eba1 0609 	sub.w	r6, r1, r9
			 - this->_M_impl._M_start); }
   b5cca:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b5ccc:	429e      	cmp	r6, r3
   b5cce:	d943      	bls.n	b5d58 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xc8>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5cd0:	2e00      	cmp	r6, #0
   b5cd2:	d03f      	beq.n	b5d54 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xc4>
	if (__n > this->_M_max_size())
   b5cd4:	4b5d      	ldr	r3, [pc, #372]	; (b5e4c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1bc>)
   b5cd6:	429e      	cmp	r6, r3
   b5cd8:	d901      	bls.n	b5cde <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x4e>
	  std::__throw_bad_alloc();
   b5cda:	f004 fa55 	bl	ba188 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5cde:	4630      	mov	r0, r6
   b5ce0:	9101      	str	r1, [sp, #4]
   b5ce2:	f7fe f9d8 	bl	b4096 <_Znwj>
   b5ce6:	9901      	ldr	r1, [sp, #4]
   b5ce8:	4607      	mov	r7, r0
			      _Category>::__copy_m(__first, __last, __result);
   b5cea:	463a      	mov	r2, r7
   b5cec:	4648      	mov	r0, r9
   b5cee:	f7ff ff51 	bl	b5b94 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b5cf2:	68e0      	ldr	r0, [r4, #12]
	if (__p)
   b5cf4:	b118      	cbz	r0, b5cfe <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x6e>
			    - this->_M_impl._M_start);
   b5cf6:	6961      	ldr	r1, [r4, #20]
	::operator delete(__p
   b5cf8:	1a09      	subs	r1, r1, r0
   b5cfa:	f7fe f9d2 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b5cfe:	60e7      	str	r7, [r4, #12]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b5d00:	4437      	add	r7, r6
   b5d02:	6167      	str	r7, [r4, #20]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b5d04:	68e3      	ldr	r3, [r4, #12]
   b5d06:	4433      	add	r3, r6
   b5d08:	6123      	str	r3, [r4, #16]
   b5d0a:	f105 0118 	add.w	r1, r5, #24
   b5d0e:	f104 0018 	add.w	r0, r4, #24
   b5d12:	f7fe ffc7 	bl	b4ca4 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
      if (&__x != this)
   b5d16:	42a5      	cmp	r5, r4
   b5d18:	d042      	beq.n	b5da0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x110>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5d1a:	e9d5 6b09 	ldrd	r6, fp, [r5, #36]	; 0x24
			 - this->_M_impl._M_start); }
   b5d1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b5d20:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5d22:	ebab 0906 	sub.w	r9, fp, r6
			 - this->_M_impl._M_start); }
   b5d26:	1a89      	subs	r1, r1, r2
	  if (__xlen > capacity())
   b5d28:	4549      	cmp	r1, r9
   b5d2a:	d256      	bcs.n	b5dda <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x14a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5d2c:	ea4f 00a9 	mov.w	r0, r9, asr #2
	  pointer __result = this->_M_allocate(__n);
   b5d30:	fb0a f000 	mul.w	r0, sl, r0
   b5d34:	f7fe f9d6 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
   b5d38:	4607      	mov	r7, r0
	  _ForwardIterator __cur = __result;
   b5d3a:	4602      	mov	r2, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b5d3c:	45b3      	cmp	fp, r6
   b5d3e:	d01f      	beq.n	b5d80 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xf0>
   b5d40:	b12a      	cbz	r2, b5d4e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xbe>
   b5d42:	4610      	mov	r0, r2
   b5d44:	4631      	mov	r1, r6
   b5d46:	9201      	str	r2, [sp, #4]
   b5d48:	f7fe ff68 	bl	b4c1c <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b5d4c:	9a01      	ldr	r2, [sp, #4]
   b5d4e:	320c      	adds	r2, #12
   b5d50:	360c      	adds	r6, #12
   b5d52:	e7f3      	b.n	b5d3c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xac>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5d54:	4637      	mov	r7, r6
   b5d56:	e7c8      	b.n	b5cea <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x5a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5d58:	6923      	ldr	r3, [r4, #16]
   b5d5a:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b5d5c:	429e      	cmp	r6, r3
   b5d5e:	d803      	bhi.n	b5d68 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xd8>
   b5d60:	4648      	mov	r0, r9
   b5d62:	f7ff ff17 	bl	b5b94 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
    { return std::uninitialized_copy(__first, __last, __result); }
   b5d66:	e7cd      	b.n	b5d04 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x74>
   b5d68:	eb09 0103 	add.w	r1, r9, r3
   b5d6c:	4648      	mov	r0, r9
   b5d6e:	f7ff ff11 	bl	b5b94 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b5d72:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
   b5d76:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
   b5d7a:	1a10      	subs	r0, r2, r0
   b5d7c:	4418      	add	r0, r3
   b5d7e:	e7f0      	b.n	b5d62 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xd2>
	__destroy(__first, __last);
   b5d80:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b5d84:	f7fe ff11 	bl	b4baa <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	      _M_deallocate(this->_M_impl._M_start,
   b5d88:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b5d8a:	b118      	cbz	r0, b5d94 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x104>
			    - this->_M_impl._M_start);
   b5d8c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b5d8e:	1a09      	subs	r1, r1, r0
   b5d90:	f7fe f987 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b5d94:	6267      	str	r7, [r4, #36]	; 0x24
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b5d96:	444f      	add	r7, r9
   b5d98:	62e7      	str	r7, [r4, #44]	; 0x2c
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b5d9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b5d9c:	444b      	add	r3, r9
   b5d9e:	62a3      	str	r3, [r4, #40]	; 0x28
	this->_M_assign(__str);
   b5da0:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b5da4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b5da8:	f004 fa44 	bl	ba234 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
   b5dac:	f105 0148 	add.w	r1, r5, #72	; 0x48
   b5db0:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b5db4:	f7fe fb7a 	bl	b44ac <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
   b5db8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b5dba:	6563      	str	r3, [r4, #84]	; 0x54
   b5dbc:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b5dbe:	65a3      	str	r3, [r4, #88]	; 0x58
   b5dc0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b5dc2:	65e3      	str	r3, [r4, #92]	; 0x5c
   b5dc4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b5dc6:	6623      	str	r3, [r4, #96]	; 0x60
   b5dc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   b5dca:	6663      	str	r3, [r4, #100]	; 0x64
   b5dcc:	6eab      	ldr	r3, [r5, #104]	; 0x68
   b5dce:	66a3      	str	r3, [r4, #104]	; 0x68
	      ++__first;
   b5dd0:	356c      	adds	r5, #108	; 0x6c
	      ++__result;
   b5dd2:	346c      	adds	r4, #108	; 0x6c
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5dd4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b5dd8:	e767      	b.n	b5caa <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5dda:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   b5ddc:	1abf      	subs	r7, r7, r2
	  else if (size() >= __xlen)
   b5dde:	45b9      	cmp	r9, r7
   b5de0:	d80c      	bhi.n	b5dfc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x16c>
			      _Category>::__copy_m(__first, __last, __result);
   b5de2:	4630      	mov	r0, r6
   b5de4:	4659      	mov	r1, fp
   b5de6:	f7fe ff95 	bl	b4d14 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      : _M_current(__i) { }
   b5dea:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b5dec:	4606      	mov	r6, r0
	  for (; __first != __last; ++__first)
   b5dee:	42b7      	cmp	r7, r6
   b5df0:	d0d3      	beq.n	b5d9a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x10a>
      }
   b5df2:	4630      	mov	r0, r6
   b5df4:	f7fe fc12 	bl	b461c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   b5df8:	360c      	adds	r6, #12
	return *this;
   b5dfa:	e7f8      	b.n	b5dee <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x15e>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5dfc:	10bf      	asrs	r7, r7, #2
   b5dfe:	fb0a f707 	mul.w	r7, sl, r7
   b5e02:	2f00      	cmp	r7, #0
   b5e04:	dd09      	ble.n	b5e1a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x18a>
	      *__result = *__first;
   b5e06:	4631      	mov	r1, r6
   b5e08:	4610      	mov	r0, r2
   b5e0a:	9201      	str	r2, [sp, #4]
   b5e0c:	f7fe ff4a 	bl	b4ca4 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	      ++__result;
   b5e10:	9a01      	ldr	r2, [sp, #4]
	      ++__first;
   b5e12:	360c      	adds	r6, #12
	      ++__result;
   b5e14:	320c      	adds	r2, #12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5e16:	3f01      	subs	r7, #1
   b5e18:	e7f3      	b.n	b5e02 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x172>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5e1a:	e9d4 6709 	ldrd	r6, r7, [r4, #36]	; 0x24
   b5e1e:	1bb9      	subs	r1, r7, r6
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b5e20:	6a6e      	ldr	r6, [r5, #36]	; 0x24
					  __x._M_impl._M_finish,
   b5e22:	6aab      	ldr	r3, [r5, #40]	; 0x28
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b5e24:	440e      	add	r6, r1
	      for (; __first != __last; ++__first, (void)++__cur)
   b5e26:	42b3      	cmp	r3, r6
   b5e28:	d0b7      	beq.n	b5d9a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x10a>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b5e2a:	b12f      	cbz	r7, b5e38 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1a8>
   b5e2c:	4631      	mov	r1, r6
   b5e2e:	4638      	mov	r0, r7
   b5e30:	9301      	str	r3, [sp, #4]
   b5e32:	f7fe fef3 	bl	b4c1c <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b5e36:	9b01      	ldr	r3, [sp, #4]
   b5e38:	360c      	adds	r6, #12
   b5e3a:	370c      	adds	r7, #12
   b5e3c:	e7f3      	b.n	b5e26 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x196>
	}
   b5e3e:	4620      	mov	r0, r4
   b5e40:	b003      	add	sp, #12
   b5e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5e46:	bf00      	nop
   b5e48:	684bda13 	.word	0x684bda13
   b5e4c:	7ffffffc 	.word	0x7ffffffc
   b5e50:	aaaaaaab 	.word	0xaaaaaaab

000b5e54 <setup>:
void setup() {
   b5e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5e58:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
  Serial.begin(9600);
   b5e5c:	f003 ffe0 	bl	b9e20 <_Z16_fetch_usbserialv>
   b5e60:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5e64:	f003 ffd0 	bl	b9e08 <_ZN9USBSerial5beginEl>
  delay(500);
   b5e68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b5e6c:	f001 feba 	bl	b7be4 <delay>
  BLE.on();
   b5e70:	f002 fa24 	bl	b82bc <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5e74:	f002 fa6c 	bl	b8350 <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   b5e78:	f002 fa20 	bl	b82bc <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5e7c:	4a7e      	ldr	r2, [pc, #504]	; (b6078 <setup+0x224>)
   b5e7e:	4d7f      	ldr	r5, [pc, #508]	; (b607c <setup+0x228>)
   b5e80:	4601      	mov	r1, r0
   b5e82:	a80d      	add	r0, sp, #52	; 0x34
   b5e84:	f002 ff4e 	bl	b8d24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5e88:	a80d      	add	r0, sp, #52	; 0x34
   b5e8a:	f002 fb08 	bl	b849e <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   b5e8e:	f002 fa15 	bl	b82bc <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5e92:	4a7b      	ldr	r2, [pc, #492]	; (b6080 <setup+0x22c>)
   b5e94:	4601      	mov	r1, r0
   b5e96:	a80d      	add	r0, sp, #52	; 0x34
   b5e98:	f002 ff44 	bl	b8d24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5e9c:	a80d      	add	r0, sp, #52	; 0x34
   b5e9e:	f002 fafe 	bl	b849e <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData data;
   b5ea2:	a805      	add	r0, sp, #20
   b5ea4:	f002 fc31 	bl	b870a <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   b5ea8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5eaa:	ac08      	add	r4, sp, #32
   b5eac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5eae:	682e      	ldr	r6, [r5, #0]
   b5eb0:	6026      	str	r6, [r4, #0]
        BleUuid tempUUID(uuid);
   b5eb2:	ad08      	add	r5, sp, #32
   b5eb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5eb6:	ac0d      	add	r4, sp, #52	; 0x34
   b5eb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5eba:	a80d      	add	r0, sp, #52	; 0x34
        BleUuid tempUUID(uuid);
   b5ebc:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5ebe:	f001 ffff 	bl	b7ec0 <_ZNK8particle7BleUuid4typeEv>
   b5ec2:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b5ec4:	a80d      	add	r0, sp, #52	; 0x34
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5ec6:	2c00      	cmp	r4, #0
   b5ec8:	d165      	bne.n	b5f96 <setup+0x142>
            uint16_t uuid16 = tempUUID.shorted();
   b5eca:	f002 f815 	bl	b7ef8 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b5ece:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b5ed0:	f8ad 0010 	strh.w	r0, [sp, #16]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b5ed4:	2302      	movs	r3, #2
   b5ed6:	aa04      	add	r2, sp, #16
   b5ed8:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b5eda:	a805      	add	r0, sp, #20
   b5edc:	f002 fc0a 	bl	b86f4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   b5ee0:	f002 f9ec 	bl	b82bc <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5ee4:	2200      	movs	r2, #0
   b5ee6:	a905      	add	r1, sp, #20
   b5ee8:	f002 fa7c 	bl	b83e4 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  request.hostname = "trek.thewcl.com";
   b5eec:	4c65      	ldr	r4, [pc, #404]	; (b6084 <setup+0x230>)

    //loopIndex must point to either the first or last checkpoint, tripleIndex cannot be 0
    void setLoopIndex(int triple, int loop){
        tripleIndex = triple;
   b5eee:	4e66      	ldr	r6, [pc, #408]	; (b6088 <setup+0x234>)
  acquireWireBuffer();
   b5ef0:	a80d      	add	r0, sp, #52	; 0x34
   b5ef2:	f7fe fb69 	bl	b45c8 <_Z17acquireWireBufferv>
  Wire.begin();
   b5ef6:	f004 f8e1 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b5efa:	f003 f89f 	bl	b903c <_ZN7TwoWire5beginEv>
  request.hostname = "trek.thewcl.com";
   b5efe:	4963      	ldr	r1, [pc, #396]	; (b608c <setup+0x238>)
   b5f00:	4620      	mov	r0, r4
   b5f02:	f003 fb2b 	bl	b955c <_ZN6StringaSEPKc>
  request.port = 80;
   b5f06:	2350      	movs	r3, #80	; 0x50
   b5f08:	4961      	ldr	r1, [pc, #388]	; (b6090 <setup+0x23c>)
   b5f0a:	63a3      	str	r3, [r4, #56]	; 0x38
   b5f0c:	4c61      	ldr	r4, [pc, #388]	; (b6094 <setup+0x240>)
        loopIndex = loop;
   b5f0e:	2502      	movs	r5, #2
   b5f10:	2006      	movs	r0, #6
   b5f12:	e9c1 5015 	strd	r5, r0, [r1, #84]	; 0x54
   b5f16:	e9c4 5015 	strd	r5, r0, [r4, #84]	; 0x54
        tripleIndex = triple;
   b5f1a:	4d5f      	ldr	r5, [pc, #380]	; (b6098 <setup+0x244>)
        loopIndex = loop;
   b5f1c:	2203      	movs	r2, #3
   b5f1e:	2307      	movs	r3, #7
  railways = {brownLine, orangeLine, pinkLine, purpleLine, greenLine};
   b5f20:	a80d      	add	r0, sp, #52	; 0x34
   b5f22:	e9c6 2315 	strd	r2, r3, [r6, #84]	; 0x54
   b5f26:	e9c5 2315 	strd	r2, r3, [r5, #84]	; 0x54
   b5f2a:	f7ff fe41 	bl	b5bb0 <_ZN7RailwayC1ERKS_>
   b5f2e:	4631      	mov	r1, r6
   b5f30:	a828      	add	r0, sp, #160	; 0xa0
   b5f32:	f7ff fe3d 	bl	b5bb0 <_ZN7RailwayC1ERKS_>
   b5f36:	4629      	mov	r1, r5
   b5f38:	a843      	add	r0, sp, #268	; 0x10c
   b5f3a:	f7ff fe39 	bl	b5bb0 <_ZN7RailwayC1ERKS_>
   b5f3e:	4621      	mov	r1, r4
   b5f40:	a85e      	add	r0, sp, #376	; 0x178
			 - this->_M_impl._M_start); }
   b5f42:	4c56      	ldr	r4, [pc, #344]	; (b609c <setup+0x248>)
   b5f44:	f7ff fe34 	bl	b5bb0 <_ZN7RailwayC1ERKS_>
   b5f48:	4955      	ldr	r1, [pc, #340]	; (b60a0 <setup+0x24c>)
   b5f4a:	a879      	add	r0, sp, #484	; 0x1e4
   b5f4c:	f7ff fe30 	bl	b5bb0 <_ZN7RailwayC1ERKS_>
   b5f50:	6822      	ldr	r2, [r4, #0]
   b5f52:	68a3      	ldr	r3, [r4, #8]
   b5f54:	1a9b      	subs	r3, r3, r2
	if (__len > capacity())
   b5f56:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
   b5f5a:	d263      	bcs.n	b6024 <setup+0x1d0>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5f5c:	f44f 7007 	mov.w	r0, #540	; 0x21c
   b5f60:	f7fe f899 	bl	b4096 <_Znwj>
   b5f64:	f10d 0834 	add.w	r8, sp, #52	; 0x34
   b5f68:	4605      	mov	r5, r0
   b5f6a:	f500 7707 	add.w	r7, r0, #540	; 0x21c
	  _ForwardIterator __cur = __result;
   b5f6e:	4606      	mov	r6, r0
   b5f70:	b11e      	cbz	r6, b5f7a <setup+0x126>
   b5f72:	4641      	mov	r1, r8
   b5f74:	4630      	mov	r0, r6
   b5f76:	f7ff fe1b 	bl	b5bb0 <_ZN7RailwayC1ERKS_>
	      for (; __first != __last; ++__first, (void)++__cur)
   b5f7a:	366c      	adds	r6, #108	; 0x6c
   b5f7c:	42b7      	cmp	r7, r6
   b5f7e:	f108 086c 	add.w	r8, r8, #108	; 0x6c
   b5f82:	d1f5      	bne.n	b5f70 <setup+0x11c>
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b5f84:	e9d4 6800 	ldrd	r6, r8, [r4]
	  for (; __first != __last; ++__first)
   b5f88:	45b0      	cmp	r8, r6
   b5f8a:	d00c      	beq.n	b5fa6 <setup+0x152>
      __pointer->~_Tp();
   b5f8c:	4630      	mov	r0, r6
   b5f8e:	f7fe fe17 	bl	b4bc0 <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b5f92:	366c      	adds	r6, #108	; 0x6c
   b5f94:	e7f8      	b.n	b5f88 <setup+0x134>
   b5f96:	f001 ffb1 	bl	b7efc <_ZNK8particle7BleUuid8rawBytesEv>
   b5f9a:	2300      	movs	r3, #0
   b5f9c:	9300      	str	r3, [sp, #0]
   b5f9e:	4602      	mov	r2, r0
   b5fa0:	2310      	movs	r3, #16
   b5fa2:	2107      	movs	r1, #7
   b5fa4:	e799      	b.n	b5eda <setup+0x86>
	    _M_deallocate(this->_M_impl._M_start,
   b5fa6:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b5fa8:	b118      	cbz	r0, b5fb2 <setup+0x15e>
			  - this->_M_impl._M_start);
   b5faa:	68a1      	ldr	r1, [r4, #8]
	::operator delete(__p
   b5fac:	1a09      	subs	r1, r1, r0
   b5fae:	f7fe f878 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b5fb2:	e9c4 5700 	strd	r5, r7, [r4]
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b5fb6:	60a7      	str	r7, [r4, #8]
   b5fb8:	2504      	movs	r5, #4
   b5fba:	266c      	movs	r6, #108	; 0x6c
   b5fbc:	ab0d      	add	r3, sp, #52	; 0x34
   b5fbe:	fb06 3005 	mla	r0, r6, r5, r3
   b5fc2:	f7fe fdfd 	bl	b4bc0 <_ZN7RailwayD1Ev>
   b5fc6:	3d01      	subs	r5, #1
   b5fc8:	d2f8      	bcs.n	b5fbc <setup+0x168>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5fca:	e9d4 3100 	ldrd	r3, r1, [r4]
   b5fce:	1ac9      	subs	r1, r1, r3
   b5fd0:	4b34      	ldr	r3, [pc, #208]	; (b60a4 <setup+0x250>)
   b5fd2:	1089      	asrs	r1, r1, #2
   b5fd4:	4359      	muls	r1, r3
  sequenceArr = std::vector<int>(railways.size() * 2, 0);
   b5fd6:	2400      	movs	r4, #0
   b5fd8:	ab03      	add	r3, sp, #12
   b5fda:	aa04      	add	r2, sp, #16
   b5fdc:	0049      	lsls	r1, r1, #1
   b5fde:	a808      	add	r0, sp, #32
   b5fe0:	9404      	str	r4, [sp, #16]
   b5fe2:	f7fe fb39 	bl	b4658 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
	  _M_start = __x._M_start;
   b5fe6:	4b30      	ldr	r3, [pc, #192]	; (b60a8 <setup+0x254>)
   b5fe8:	9d08      	ldr	r5, [sp, #32]
	  _M_end_of_storage = __x._M_end_of_storage;
   b5fea:	689a      	ldr	r2, [r3, #8]
   b5fec:	920f      	str	r2, [sp, #60]	; 0x3c
	  _M_finish = __x._M_finish;
   b5fee:	e9d3 0100 	ldrd	r0, r1, [r3]
	  _M_start = __x._M_start;
   b5ff2:	601d      	str	r5, [r3, #0]
	  _M_finish = __x._M_finish;
   b5ff4:	9d09      	ldr	r5, [sp, #36]	; 0x24
   b5ff6:	605d      	str	r5, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
   b5ff8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   b5ffa:	609d      	str	r5, [r3, #8]
	  _M_finish = __x._M_finish;
   b5ffc:	e9cd 010d 	strd	r0, r1, [sp, #52]	; 0x34
      }
   b6000:	a80d      	add	r0, sp, #52	; 0x34
	  _M_finish = __x._M_finish;
   b6002:	e9cd 4408 	strd	r4, r4, [sp, #32]
	  _M_end_of_storage = __x._M_end_of_storage;
   b6006:	940a      	str	r4, [sp, #40]	; 0x28
      }
   b6008:	f7fe fb08 	bl	b461c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b600c:	a808      	add	r0, sp, #32
   b600e:	f7fe fb05 	bl	b461c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
  randomizeAddress();
   b6012:	f7fe fbe1 	bl	b47d8 <_Z16randomizeAddressv>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b6016:	9805      	ldr	r0, [sp, #20]
   b6018:	f001 fd9c 	bl	b7b54 <free>
}
   b601c:	f50d 7d14 	add.w	sp, sp, #592	; 0x250
   b6020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6024:	6865      	ldr	r5, [r4, #4]
   b6026:	1aad      	subs	r5, r5, r2
	else if (size() >= __len)
   b6028:	f5b5 7f07 	cmp.w	r5, #540	; 0x21c
   b602c:	d310      	bcc.n	b6050 <setup+0x1fc>
			      _Category>::__copy_m(__first, __last, __result);
   b602e:	a994      	add	r1, sp, #592	; 0x250
   b6030:	a80d      	add	r0, sp, #52	; 0x34
   b6032:	f7ff fe2d 	bl	b5c90 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b6036:	6867      	ldr	r7, [r4, #4]
   b6038:	42b8      	cmp	r0, r7
   b603a:	4605      	mov	r5, r0
   b603c:	d0bc      	beq.n	b5fb8 <setup+0x164>
   b603e:	4606      	mov	r6, r0
      __pointer->~_Tp();
   b6040:	4630      	mov	r0, r6
	  for (; __first != __last; ++__first)
   b6042:	366c      	adds	r6, #108	; 0x6c
      __pointer->~_Tp();
   b6044:	f7fe fdbc 	bl	b4bc0 <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b6048:	42b7      	cmp	r7, r6
   b604a:	d1f9      	bne.n	b6040 <setup+0x1ec>
	    this->_M_impl._M_finish = __pos;
   b604c:	6065      	str	r5, [r4, #4]
   b604e:	e7b3      	b.n	b5fb8 <setup+0x164>
   b6050:	ab0d      	add	r3, sp, #52	; 0x34
   b6052:	441d      	add	r5, r3
   b6054:	4629      	mov	r1, r5
   b6056:	4618      	mov	r0, r3
   b6058:	f7ff fe1a 	bl	b5c90 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b605c:	6866      	ldr	r6, [r4, #4]
   b605e:	ab94      	add	r3, sp, #592	; 0x250
   b6060:	429d      	cmp	r5, r3
   b6062:	d007      	beq.n	b6074 <setup+0x220>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6064:	b11e      	cbz	r6, b606e <setup+0x21a>
   b6066:	4629      	mov	r1, r5
   b6068:	4630      	mov	r0, r6
   b606a:	f7ff fda1 	bl	b5bb0 <_ZN7RailwayC1ERKS_>
   b606e:	356c      	adds	r5, #108	; 0x6c
   b6070:	366c      	adds	r6, #108	; 0x6c
   b6072:	e7f4      	b.n	b605e <setup+0x20a>
	    this->_M_impl._M_finish =
   b6074:	6066      	str	r6, [r4, #4]
   b6076:	e79f      	b.n	b5fb8 <setup+0x164>
   b6078:	2003e6a8 	.word	0x2003e6a8
   b607c:	20035500 	.word	0x20035500
   b6080:	2003e690 	.word	0x2003e690
   b6084:	2003e630 	.word	0x2003e630
   b6088:	20037eb8 	.word	0x20037eb8
   b608c:	000bd513 	.word	0x000bd513
   b6090:	200355b8 	.word	0x200355b8
   b6094:	2003e54c 	.word	0x2003e54c
   b6098:	2003e4e0 	.word	0x2003e4e0
   b609c:	2003e5b8 	.word	0x2003e5b8
   b60a0:	20035628 	.word	0x20035628
   b60a4:	684bda13 	.word	0x684bda13
   b60a8:	2003e698 	.word	0x2003e698

000b60ac <_GLOBAL__sub_I_redLine>:
   b60ac:	2001      	movs	r0, #1
   b60ae:	f7fe bf3f 	b.w	b4f30 <_Z41__static_initialization_and_destruction_0ii.constprop.0>
	...

000b60b4 <loop>:
void loop(){
   b60b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b60b8:	ed2d 8b06 	vpush	{d8-d10}
      : _M_current(__i) { }
   b60bc:	f8df b358 	ldr.w	fp, [pc, #856]	; b6418 <loop+0x364>
    Serial.printf("%i, ", i);
   b60c0:	4dbc      	ldr	r5, [pc, #752]	; (b63b4 <loop+0x300>)
void loop(){
   b60c2:	b0b5      	sub	sp, #212	; 0xd4
  Serial.println("loop start");
   b60c4:	f003 feac 	bl	b9e20 <_Z16_fetch_usbserialv>
   b60c8:	49bb      	ldr	r1, [pc, #748]	; (b63b8 <loop+0x304>)
   b60ca:	f003 f97a 	bl	b93c2 <_ZN5Print7printlnEPKc>
   b60ce:	e9db 4600 	ldrd	r4, r6, [fp]
  for(int i : sequenceArr){
   b60d2:	42b4      	cmp	r4, r6
   b60d4:	d009      	beq.n	b60ea <loop+0x36>
   b60d6:	f854 2b04 	ldr.w	r2, [r4], #4
   b60da:	9203      	str	r2, [sp, #12]
    Serial.printf("%i, ", i);
   b60dc:	f003 fea0 	bl	b9e20 <_Z16_fetch_usbserialv>
   b60e0:	9a03      	ldr	r2, [sp, #12]
   b60e2:	4629      	mov	r1, r5
   b60e4:	f7fe fa62 	bl	b45ac <_ZN5Print6printfEPKcz>
	return *this;
   b60e8:	e7f3      	b.n	b60d2 <loop+0x1e>
  Serial.println();
   b60ea:	f003 fe99 	bl	b9e20 <_Z16_fetch_usbserialv>
   b60ee:	f003 f95c 	bl	b93aa <_ZN5Print7printlnEv>
  Serial.println(brownLineAdr);
   b60f2:	f003 fe95 	bl	b9e20 <_Z16_fetch_usbserialv>
   b60f6:	4bb1      	ldr	r3, [pc, #708]	; (b63bc <loop+0x308>)
  Serial.println(greenLineAdr[0]);
   b60f8:	4cb1      	ldr	r4, [pc, #708]	; (b63c0 <loop+0x30c>)
  Serial.println(brownLineAdr);
   b60fa:	6819      	ldr	r1, [r3, #0]
   b60fc:	220a      	movs	r2, #10
   b60fe:	f7fe f872 	bl	b41e6 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
  Serial.println(greenLineAdr[0]);
   b6102:	f003 fe8d 	bl	b9e20 <_Z16_fetch_usbserialv>
   b6106:	6821      	ldr	r1, [r4, #0]
   b6108:	220a      	movs	r2, #10
   b610a:	f7fe f86c 	bl	b41e6 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
  Serial.println(greenLineAdr[1]);
   b610e:	f003 fe87 	bl	b9e20 <_Z16_fetch_usbserialv>
   b6112:	6861      	ldr	r1, [r4, #4]
   b6114:	220a      	movs	r2, #10
   b6116:	f7fe f866 	bl	b41e6 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    for(int j = 0; j < railways.size(); j++){
   b611a:	2500      	movs	r5, #0
   b611c:	4ca9      	ldr	r4, [pc, #676]	; (b63c4 <loop+0x310>)
   b611e:	e9d4 2300 	ldrd	r2, r3, [r4]
   b6122:	1a9b      	subs	r3, r3, r2
   b6124:	4aa8      	ldr	r2, [pc, #672]	; (b63c8 <loop+0x314>)
   b6126:	109b      	asrs	r3, r3, #2
   b6128:	4353      	muls	r3, r2
   b612a:	42ab      	cmp	r3, r5
   b612c:	f240 8443 	bls.w	b69b6 <loop+0x902>
      delay(1000);
   b6130:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b6134:	f001 fd56 	bl	b7be4 <delay>
	StringSumHelper(const char *p) : String(p) {}
   b6138:	49a4      	ldr	r1, [pc, #656]	; (b63cc <loop+0x318>)
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   b613a:	4fa5      	ldr	r7, [pc, #660]	; (b63d0 <loop+0x31c>)
   b613c:	a819      	add	r0, sp, #100	; 0x64
   b613e:	f003 f9ea 	bl	b9516 <_ZN6StringC1EPK19__FlashStringHelper>
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
   b6142:	266c      	movs	r6, #108	; 0x6c
      { return _M_dataplus._M_p; }
   b6144:	6823      	ldr	r3, [r4, #0]
   b6146:	436e      	muls	r6, r5
   b6148:	4433      	add	r3, r6
      request.path = "/loop-tracks/cta?lines=" + String(railways[j].name.c_str());
   b614a:	a815      	add	r0, sp, #84	; 0x54
   b614c:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b614e:	f003 f9e2 	bl	b9516 <_ZN6StringC1EPK19__FlashStringHelper>
   b6152:	a915      	add	r1, sp, #84	; 0x54
   b6154:	a819      	add	r0, sp, #100	; 0x64
   b6156:	f003 fa4e 	bl	b95f6 <_ZplRK15StringSumHelperRK6String>
   b615a:	4601      	mov	r1, r0
   b615c:	489d      	ldr	r0, [pc, #628]	; (b63d4 <loop+0x320>)
   b615e:	f003 f9ee 	bl	b953e <_ZN6StringaSERKS_>
   b6162:	a815      	add	r0, sp, #84	; 0x54
   b6164:	f003 f98c 	bl	b9480 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b6168:	a819      	add	r0, sp, #100	; 0x64
   b616a:	f003 f989 	bl	b9480 <_ZN6StringD1Ev>
   b616e:	4b9a      	ldr	r3, [pc, #616]	; (b63d8 <loop+0x324>)
   b6170:	499a      	ldr	r1, [pc, #616]	; (b63dc <loop+0x328>)
   b6172:	489b      	ldr	r0, [pc, #620]	; (b63e0 <loop+0x32c>)
   b6174:	9300      	str	r3, [sp, #0]
   b6176:	463a      	mov	r2, r7
   b6178:	4b9a      	ldr	r3, [pc, #616]	; (b63e4 <loop+0x330>)
   b617a:	f000 fc97 	bl	b6aac <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
      Serial.println("parsing");
   b617e:	f003 fe4f 	bl	b9e20 <_Z16_fetch_usbserialv>
   b6182:	4999      	ldr	r1, [pc, #612]	; (b63e8 <loop+0x334>)
   b6184:	f003 f91d 	bl	b93c2 <_ZN5Print7printlnEPKc>
      parser.clear();
   b6188:	4898      	ldr	r0, [pc, #608]	; (b63ec <loop+0x338>)
   b618a:	f000 fe27 	bl	b6ddc <_ZN10JsonBuffer5clearEv>
	const char * c_str() const { return buffer; }
   b618e:	6879      	ldr	r1, [r7, #4]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b6190:	9103      	str	r1, [sp, #12]
   b6192:	4608      	mov	r0, r1
   b6194:	f005 f850 	bl	bb238 <strlen>
   b6198:	9903      	ldr	r1, [sp, #12]
   b619a:	4602      	mov	r2, r0
   b619c:	4893      	ldr	r0, [pc, #588]	; (b63ec <loop+0x338>)
   b619e:	f000 fe00 	bl	b6da2 <_ZN10JsonBuffer7addDataEPKcj>
      if(!parser.parse()){
   b61a2:	4892      	ldr	r0, [pc, #584]	; (b63ec <loop+0x338>)
   b61a4:	f001 fa0a 	bl	b75bc <_ZN10JsonParser5parseEv>
   b61a8:	9003      	str	r0, [sp, #12]
   b61aa:	b948      	cbnz	r0, b61c0 <loop+0x10c>
        Serial.println("parsing failed");
   b61ac:	f003 fe38 	bl	b9e20 <_Z16_fetch_usbserialv>
   b61b0:	498f      	ldr	r1, [pc, #572]	; (b63f0 <loop+0x33c>)
}
   b61b2:	b035      	add	sp, #212	; 0xd4
   b61b4:	ecbd 8b06 	vpop	{d8-d10}
   b61b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("parsing failed");
   b61bc:	f003 b901 	b.w	b93c2 <_ZN5Print7printlnEPKc>
	return *(this->_M_impl._M_start + __n);
   b61c0:	6821      	ldr	r1, [r4, #0]
        float lat = train.key("latitude").valueFloat();
   b61c2:	ed9f 9a8c 	vldr	s18, [pc, #560]	; b63f4 <loop+0x340>
      Railway currentRailway = railways[j];
   b61c6:	4431      	add	r1, r6
   b61c8:	a819      	add	r0, sp, #100	; 0x64
   b61ca:	f7ff fcf1 	bl	b5bb0 <_ZN7RailwayC1ERKS_>
      std::vector<Checkpoint> currentCheckpoints = currentRailway.checkpoints;
   b61ce:	a919      	add	r1, sp, #100	; 0x64
   b61d0:	a805      	add	r0, sp, #20
   b61d2:	f7fe facb 	bl	b476c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      int count = 0;
   b61d6:	f04f 0900 	mov.w	r9, #0
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b61da:	4984      	ldr	r1, [pc, #528]	; (b63ec <loop+0x338>)
   b61dc:	a80b      	add	r0, sp, #44	; 0x2c
   b61de:	f000 fe17 	bl	b6e10 <_ZNK10JsonParser12getReferenceEv>
   b61e2:	4a85      	ldr	r2, [pc, #532]	; (b63f8 <loop+0x344>)
   b61e4:	a90b      	add	r1, sp, #44	; 0x2c
   b61e6:	a80e      	add	r0, sp, #56	; 0x38
   b61e8:	f000 ffe2 	bl	b71b0 <_ZNK13JsonReference3keyEPKc>
   b61ec:	2200      	movs	r2, #0
   b61ee:	a90e      	add	r1, sp, #56	; 0x38
   b61f0:	a811      	add	r0, sp, #68	; 0x44
   b61f2:	f000 feb1 	bl	b6f58 <_ZNK13JsonReference5indexEj>
   b61f6:	4a81      	ldr	r2, [pc, #516]	; (b63fc <loop+0x348>)
   b61f8:	a911      	add	r1, sp, #68	; 0x44
   b61fa:	a815      	add	r0, sp, #84	; 0x54
   b61fc:	f000 ffd8 	bl	b71b0 <_ZNK13JsonReference3keyEPKc>
   b6200:	464a      	mov	r2, r9
   b6202:	a915      	add	r1, sp, #84	; 0x54
   b6204:	a808      	add	r0, sp, #32
   b6206:	f000 fea7 	bl	b6f58 <_ZNK13JsonReference5indexEj>
   b620a:	a815      	add	r0, sp, #84	; 0x54
   b620c:	f000 fd78 	bl	b6d00 <_ZN13JsonReferenceD1Ev>
   b6210:	a811      	add	r0, sp, #68	; 0x44
   b6212:	f000 fd75 	bl	b6d00 <_ZN13JsonReferenceD1Ev>
   b6216:	a80e      	add	r0, sp, #56	; 0x38
   b6218:	f000 fd72 	bl	b6d00 <_ZN13JsonReferenceD1Ev>
   b621c:	a80b      	add	r0, sp, #44	; 0x2c
   b621e:	f000 fd6f 	bl	b6d00 <_ZN13JsonReferenceD1Ev>
        String nextStation = train.key("next_stop").valueString();
   b6222:	4a77      	ldr	r2, [pc, #476]	; (b6400 <loop+0x34c>)
   b6224:	a908      	add	r1, sp, #32
   b6226:	a815      	add	r0, sp, #84	; 0x54
   b6228:	f000 ffc2 	bl	b71b0 <_ZNK13JsonReference3keyEPKc>
   b622c:	a915      	add	r1, sp, #84	; 0x54
   b622e:	a811      	add	r0, sp, #68	; 0x44
   b6230:	f000 ffd8 	bl	b71e4 <_ZNK13JsonReference11valueStringEv>
   b6234:	a815      	add	r0, sp, #84	; 0x54
   b6236:	f000 fd63 	bl	b6d00 <_ZN13JsonReferenceD1Ev>
        String destNm = train.key("destination").valueString();
   b623a:	4a72      	ldr	r2, [pc, #456]	; (b6404 <loop+0x350>)
   b623c:	a908      	add	r1, sp, #32
   b623e:	a80e      	add	r0, sp, #56	; 0x38
   b6240:	f000 ffb6 	bl	b71b0 <_ZNK13JsonReference3keyEPKc>
   b6244:	a90e      	add	r1, sp, #56	; 0x38
   b6246:	a815      	add	r0, sp, #84	; 0x54
   b6248:	f000 ffcc 	bl	b71e4 <_ZNK13JsonReference11valueStringEv>
   b624c:	a80e      	add	r0, sp, #56	; 0x38
   b624e:	f000 fd57 	bl	b6d00 <_ZN13JsonReferenceD1Ev>
        int trainDir = train.key("direction").valueInt();
   b6252:	4a6d      	ldr	r2, [pc, #436]	; (b6408 <loop+0x354>)
   b6254:	a908      	add	r1, sp, #32
   b6256:	a80e      	add	r0, sp, #56	; 0x38
   b6258:	f000 ffaa 	bl	b71b0 <_ZNK13JsonReference3keyEPKc>
   b625c:	2100      	movs	r1, #0
   b625e:	a80e      	add	r0, sp, #56	; 0x38
   b6260:	f000 fe94 	bl	b6f8c <_ZNK13JsonReference8valueIntEi>
   b6264:	4604      	mov	r4, r0
   b6266:	a80e      	add	r0, sp, #56	; 0x38
   b6268:	f000 fd4a 	bl	b6d00 <_ZN13JsonReferenceD1Ev>
        float lat = train.key("latitude").valueFloat();
   b626c:	4a67      	ldr	r2, [pc, #412]	; (b640c <loop+0x358>)
   b626e:	a908      	add	r1, sp, #32
   b6270:	a80e      	add	r0, sp, #56	; 0x38
   b6272:	f000 ff9d 	bl	b71b0 <_ZNK13JsonReference3keyEPKc>
   b6276:	a80e      	add	r0, sp, #56	; 0x38
   b6278:	eeb0 0a49 	vmov.f32	s0, s18
   b627c:	f000 fe92 	bl	b6fa4 <_ZNK13JsonReference10valueFloatEf>
   b6280:	a80e      	add	r0, sp, #56	; 0x38
   b6282:	eef0 8a40 	vmov.f32	s17, s0
   b6286:	f000 fd3b 	bl	b6d00 <_ZN13JsonReferenceD1Ev>
        float lon = train.key("longitude").valueFloat();
   b628a:	4a61      	ldr	r2, [pc, #388]	; (b6410 <loop+0x35c>)
   b628c:	a908      	add	r1, sp, #32
   b628e:	a80e      	add	r0, sp, #56	; 0x38
   b6290:	f000 ff8e 	bl	b71b0 <_ZNK13JsonReference3keyEPKc>
   b6294:	a80e      	add	r0, sp, #56	; 0x38
   b6296:	eeb0 0a49 	vmov.f32	s0, s18
   b629a:	f000 fe83 	bl	b6fa4 <_ZNK13JsonReference10valueFloatEf>
   b629e:	a80e      	add	r0, sp, #56	; 0x38
   b62a0:	eeb0 8a40 	vmov.f32	s16, s0
   b62a4:	f000 fd2c 	bl	b6d00 <_ZN13JsonReferenceD1Ev>
        if(nextStation.length() <= 1){
   b62a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b62aa:	2b01      	cmp	r3, #1
   b62ac:	d82c      	bhi.n	b6308 <loop+0x254>
          Serial.println("break");
   b62ae:	f003 fdb7 	bl	b9e20 <_Z16_fetch_usbserialv>
   b62b2:	4958      	ldr	r1, [pc, #352]	; (b6414 <loop+0x360>)
        if(i == 2 || currentRailway.name == purpleLine.name){
   b62b4:	f8df 8164 	ldr.w	r8, [pc, #356]	; b641c <loop+0x368>
          if(currentRailway.name == orangeLine.name){
   b62b8:	f8df 9164 	ldr.w	r9, [pc, #356]	; b6420 <loop+0x36c>
          Serial.println("break");
   b62bc:	f003 f881 	bl	b93c2 <_ZN5Print7printlnEPKc>
          break;
   b62c0:	a815      	add	r0, sp, #84	; 0x54
   b62c2:	f003 f8dd 	bl	b9480 <_ZN6StringD1Ev>
   b62c6:	a811      	add	r0, sp, #68	; 0x44
   b62c8:	f003 f8da 	bl	b9480 <_ZN6StringD1Ev>
   b62cc:	a808      	add	r0, sp, #32
   b62ce:	f000 fd17 	bl	b6d00 <_ZN13JsonReferenceD1Ev>
      for(int i = 0; i < 4; i++){
   b62d2:	00ef      	lsls	r7, r5, #3
   b62d4:	2400      	movs	r4, #0
        if(i == 2 || currentRailway.name == purpleLine.name){
   b62d6:	2c02      	cmp	r4, #2
   b62d8:	f000 821c 	beq.w	b6714 <loop+0x660>
   b62dc:	4641      	mov	r1, r8
   b62de:	a825      	add	r0, sp, #148	; 0x94
   b62e0:	f7fe fa68 	bl	b47b4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b62e4:	2800      	cmp	r0, #0
   b62e6:	f040 8215 	bne.w	b6714 <loop+0x660>
        }else if(i == 3){
   b62ea:	2c03      	cmp	r4, #3
   b62ec:	f040 8276 	bne.w	b67dc <loop+0x728>
          if(currentRailway.name == orangeLine.name){
   b62f0:	4649      	mov	r1, r9
   b62f2:	a825      	add	r0, sp, #148	; 0x94
   b62f4:	f7fe fa5e 	bl	b47b4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b62f8:	4e31      	ldr	r6, [pc, #196]	; (b63c0 <loop+0x30c>)
   b62fa:	2800      	cmp	r0, #0
   b62fc:	f000 826a 	beq.w	b67d4 <loop+0x720>
            Wire.beginTransmission(greenLineAdr[0]);
   b6300:	f003 fedc 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b6304:	6831      	ldr	r1, [r6, #0]
   b6306:	e209      	b.n	b671c <loop+0x668>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6308:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b630c:	1a9b      	subs	r3, r3, r2
   b630e:	ea4f 08e3 	mov.w	r8, r3, asr #3
        for(int i = 0; i < checkpointCount; i++){
   b6312:	f04f 0a00 	mov.w	sl, #0
   b6316:	45c2      	cmp	sl, r8
	return *(this->_M_impl._M_start + __n);
   b6318:	9905      	ldr	r1, [sp, #20]
   b631a:	da35      	bge.n	b6388 <loop+0x2d4>
   b631c:	eb01 06ca 	add.w	r6, r1, sl, lsl #3
    }

    float getDistance(float trainLat, float trainLon){
      return sqrt(pow((trainLat - lat), 2) + pow((trainLon - lon), 2));
   b6320:	edd6 7a00 	vldr	s15, [r6]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b6324:	ee78 7ae7 	vsub.f32	s15, s17, s15
   b6328:	ee17 0a90 	vmov	r0, s15
   b632c:	f004 fb64 	bl	ba9f8 <__aeabi_f2d>
   b6330:	edd6 7a01 	vldr	s15, [r6, #4]
   b6334:	ee78 7a67 	vsub.f32	s15, s16, s15
   b6338:	ec41 0b1a 	vmov	d10, r0, r1
   b633c:	ee17 0a90 	vmov	r0, s15
   b6340:	f004 fb5a 	bl	ba9f8 <__aeabi_f2d>
   b6344:	4602      	mov	r2, r0
   b6346:	460b      	mov	r3, r1
   b6348:	f004 fbae 	bl	baaa8 <__aeabi_dmul>
   b634c:	ec53 2b1a 	vmov	r2, r3, d10
   b6350:	4606      	mov	r6, r0
   b6352:	460f      	mov	r7, r1
   b6354:	ee1a 0a10 	vmov	r0, s20
   b6358:	4619      	mov	r1, r3
   b635a:	f004 fba5 	bl	baaa8 <__aeabi_dmul>
   b635e:	4602      	mov	r2, r0
   b6360:	460b      	mov	r3, r1
   b6362:	4630      	mov	r0, r6
   b6364:	4639      	mov	r1, r7
   b6366:	f004 f9e9 	bl	ba73c <__adddf3>
   b636a:	ec41 0b10 	vmov	d0, r0, r1
   b636e:	f004 f8d9 	bl	ba524 <sqrt>
          currentRailway.distances[i] = currentCheckpoints[i].getDistance(lat, lon);
   b6372:	9e1c      	ldr	r6, [sp, #112]	; 0x70
   b6374:	ec51 0b10 	vmov	r0, r1, d0
   b6378:	f004 fe66 	bl	bb048 <__aeabi_d2f>
   b637c:	eb06 068a 	add.w	r6, r6, sl, lsl #2
        for(int i = 0; i < checkpointCount; i++){
   b6380:	f10a 0a01 	add.w	sl, sl, #1
   b6384:	6030      	str	r0, [r6, #0]
   b6386:	e7c6      	b.n	b6316 <loop+0x262>
      : _M_current(__i) { }
   b6388:	e9dd 671c 	ldrd	r6, r7, [sp, #112]	; 0x70
    _GLIBCXX14_CONSTEXPR
    _ForwardIterator
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
		  _Compare __comp)
    {
      if (__first == __last)
   b638c:	42be      	cmp	r6, r7
   b638e:	d04b      	beq.n	b6428 <loop+0x374>
   b6390:	1d32      	adds	r2, r6, #4
   b6392:	4633      	mov	r3, r6
	return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
   b6394:	4297      	cmp	r7, r2
	++_M_current;
   b6396:	4610      	mov	r0, r2
   b6398:	d047      	beq.n	b642a <loop+0x376>
	if (__comp(__first, __result))
   b639a:	edd3 7a00 	vldr	s15, [r3]
   b639e:	ed90 7a00 	vldr	s14, [r0]
   b63a2:	eeb4 7a67 	vcmp.f32	s14, s15
   b63a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b63aa:	f102 0204 	add.w	r2, r2, #4
   b63ae:	bf48      	it	mi
   b63b0:	4603      	movmi	r3, r0
   b63b2:	e7ef      	b.n	b6394 <loop+0x2e0>
   b63b4:	000bd52e 	.word	0x000bd52e
   b63b8:	000bd523 	.word	0x000bd523
   b63bc:	20035624 	.word	0x20035624
   b63c0:	20035694 	.word	0x20035694
   b63c4:	2003e5b8 	.word	0x2003e5b8
   b63c8:	684bda13 	.word	0x684bda13
   b63cc:	000bd533 	.word	0x000bd533
   b63d0:	2003e67c 	.word	0x2003e67c
   b63d4:	2003e658 	.word	0x2003e658
   b63d8:	000bd54b 	.word	0x000bd54b
   b63dc:	2003e630 	.word	0x2003e630
   b63e0:	2003569c 	.word	0x2003569c
   b63e4:	2003530c 	.word	0x2003530c
   b63e8:	000bd54f 	.word	0x000bd54f
   b63ec:	20037f24 	.word	0x20037f24
   b63f0:	000bd557 	.word	0x000bd557
   b63f4:	00000000 	.word	0x00000000
   b63f8:	000bd566 	.word	0x000bd566
   b63fc:	000bd56c 	.word	0x000bd56c
   b6400:	000bd573 	.word	0x000bd573
   b6404:	000bd57d 	.word	0x000bd57d
   b6408:	000bd589 	.word	0x000bd589
   b640c:	000bd593 	.word	0x000bd593
   b6410:	000bd59c 	.word	0x000bd59c
   b6414:	000bd5a6 	.word	0x000bd5a6
   b6418:	2003e698 	.word	0x2003e698
   b641c:	2003e57c 	.word	0x2003e57c
   b6420:	20037ee8 	.word	0x20037ee8
   b6424:	7dcccccc 	.word	0x7dcccccc
   b6428:	4633      	mov	r3, r6
        if(closestIndex == currentRailway.tripleIndex){
   b642a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b642c:	1b9b      	subs	r3, r3, r6
   b642e:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
   b6432:	ea4f 00a3 	mov.w	r0, r3, asr #2
          closestIndex = currentRailway.loopIndex;
   b6436:	bf08      	it	eq
   b6438:	982f      	ldreq	r0, [sp, #188]	; 0xbc
   b643a:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
        x1 = currentCheckpoints[closestIndex].lat;
   b643e:	edd3 7a00 	vldr	s15, [r3]
        y1 = currentCheckpoints[closestIndex].lon;
   b6442:	edd3 6a01 	vldr	s13, [r3, #4]
        if(currentCheckpoints[closestIndex].lat > lat){
   b6446:	eef4 8ae7 	vcmpe.f32	s17, s15
   b644a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          slope = (y1 - y) / (x1 - x);
   b644e:	ee77 5ae8 	vsub.f32	s11, s15, s17
          slope = (y - y1) / (x - x1);
   b6452:	bf55      	itete	pl
   b6454:	ee38 6a66 	vsubpl.f32	s12, s16, s13
          slope = (y1 - y) / (x1 - x);
   b6458:	ee76 7ac8 	vsubmi.f32	s15, s13, s16
          slope = (y - y1) / (x - x1);
   b645c:	ee78 7ae7 	vsubpl.f32	s15, s17, s15
          slope = (y1 - y) / (x1 - x);
   b6460:	ee87 7aa5 	vdivmi.f32	s14, s15, s11
   b6464:	ea4f 07c0 	mov.w	r7, r0, lsl #3
          slope = (y - y1) / (x - x1);
   b6468:	bf58      	it	pl
   b646a:	ee86 7a27 	vdivpl.f32	s14, s12, s15
        if(slope == 0){
   b646e:	ed5f 7a13 	vldr	s15, [pc, #-76]	; b6424 <loop+0x370>
   b6472:	eeb5 7a40 	vcmp.f32	s14, #0.0
   b6476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b647a:	d00a      	beq.n	b6492 <loop+0x3de>
        }else if(slope >= __FLT_MAX__ / 10){
   b647c:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b6480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          perpendicularSlope = -1 / slope;
   b6484:	bfba      	itte	lt
   b6486:	eebf 6a00 	vmovlt.f32	s12, #240	; 0xbf800000 -1.0
   b648a:	eec6 7a07 	vdivlt.f32	s15, s12, s14
          perpendicularSlope = 0;
   b648e:	eef0 7a49 	vmovge.f32	s15, s18
          nearestSide = (perpendicularSlope * (currentCheckpoints[closestIndex].lat - x) + y) > currentCheckpoints[closestIndex].lon;
   b6492:	eeb0 7a48 	vmov.f32	s14, s16
   b6496:	eea7 7aa5 	vfma.f32	s14, s15, s11
   b649a:	eef4 6ac7 	vcmpe.f32	s13, s14
   b649e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b64a2:	bf4c      	ite	mi
   b64a4:	f04f 0c01 	movmi.w	ip, #1
   b64a8:	f04f 0c00 	movpl.w	ip, #0
        if(closestIndex == 0){
   b64ac:	2800      	cmp	r0, #0
   b64ae:	d16c      	bne.n	b658a <loop+0x4d6>
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b64b0:	ed91 7a02 	vldr	s14, [r1, #8]
          if(currentRailway.loopIndex == closestIndex){
   b64b4:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b64b6:	ee37 7a68 	vsub.f32	s14, s14, s17
   b64ba:	eef0 6a48 	vmov.f32	s13, s16
   b64be:	eee7 6a27 	vfma.f32	s13, s14, s15
   b64c2:	ed91 7a03 	vldr	s14, [r1, #12]
   b64c6:	eef4 6ac7 	vcmpe.f32	s13, s14
   b64ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b64ce:	bfcc      	ite	gt
   b64d0:	f04f 0e01 	movgt.w	lr, #1
   b64d4:	f04f 0e00 	movle.w	lr, #0
          if(currentRailway.loopIndex == closestIndex){
   b64d8:	b9ef      	cbnz	r7, b6516 <loop+0x462>
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b64da:	1e53      	subs	r3, r2, #1
   b64dc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
            if(nearestSide != pointSide){
   b64e0:	45e6      	cmp	lr, ip
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b64e2:	ed91 0a00 	vldr	s0, [r1]
   b64e6:	ed91 7a01 	vldr	s14, [r1, #4]
            if(nearestSide != pointSide){
   b64ea:	f040 8095 	bne.w	b6618 <loop+0x564>
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b64ee:	ee70 8a68 	vsub.f32	s17, s0, s17
   b64f2:	eea8 8aa7 	vfma.f32	s16, s17, s15
   b64f6:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b64fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            }else if(nearestSide != loopPointSide){
   b64fe:	bfcc      	ite	gt
   b6500:	2101      	movgt	r1, #1
   b6502:	2100      	movle	r1, #0
   b6504:	4571      	cmp	r1, lr
              }else if(nearestSide != loopPointSide){
   b6506:	d100      	bne.n	b650a <loop+0x456>
                secondClosestIndex = currentRailway.tripleIndex + 1;
   b6508:	1c53      	adds	r3, r2, #1
          if(closestIndex < secondClosestIndex){
   b650a:	429a      	cmp	r2, r3
   b650c:	f2c0 8086 	blt.w	b661c <loop+0x568>
   b6510:	4611      	mov	r1, r2
   b6512:	461f      	mov	r7, r3
   b6514:	e005      	b.n	b6522 <loop+0x46e>
            if(pointSide == nearestSide){
   b6516:	45e6      	cmp	lr, ip
   b6518:	d06e      	beq.n	b65f8 <loop+0x544>
   b651a:	4602      	mov	r2, r0
   b651c:	4607      	mov	r7, r0
   b651e:	2301      	movs	r3, #1
   b6520:	4619      	mov	r1, r3
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b6522:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   b6526:	eb06 0087 	add.w	r0, r6, r7, lsl #2
   b652a:	ed90 7a00 	vldr	s14, [r0]
   b652e:	edd1 7a00 	vldr	s15, [r1]
          segmentPos *= currentRailway.scalers[lowerIndex];
   b6532:	991f      	ldr	r1, [sp, #124]	; 0x7c
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b6534:	ee77 7a27 	vadd.f32	s15, s14, s15
          segmentPos *= currentRailway.scalers[lowerIndex];
   b6538:	eb01 0187 	add.w	r1, r1, r7, lsl #2
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b653c:	eec7 6a27 	vdiv.f32	s13, s14, s15
          segmentPos *= currentRailway.scalers[lowerIndex];
   b6540:	ed91 8a00 	vldr	s16, [r1]
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b6544:	9933      	ldr	r1, [sp, #204]	; 0xcc
          segmentPos *= currentRailway.scalers[lowerIndex];
   b6546:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b654a:	4291      	cmp	r1, r2
          segmentPos *= currentRailway.scalers[lowerIndex];
   b654c:	ee28 8a26 	vmul.f32	s16, s16, s13
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b6550:	db67      	blt.n	b6622 <loop+0x56e>
   b6552:	9e32      	ldr	r6, [sp, #200]	; 0xc8
   b6554:	4296      	cmp	r6, r2
   b6556:	dc64      	bgt.n	b6622 <loop+0x56e>
   b6558:	4299      	cmp	r1, r3
   b655a:	db62      	blt.n	b6622 <loop+0x56e>
   b655c:	429e      	cmp	r6, r3
   b655e:	dc60      	bgt.n	b6622 <loop+0x56e>
            Serial.println("in green");
   b6560:	f003 fc5e 	bl	b9e20 <_Z16_fetch_usbserialv>
   b6564:	49b7      	ldr	r1, [pc, #732]	; (b6844 <loop+0x790>)
   b6566:	f002 ff2c 	bl	b93c2 <_ZN5Print7printlnEPKc>
            pcbSegment = 3;
   b656a:	f04f 0803 	mov.w	r8, #3
        bool inLoop = false;
   b656e:	2300      	movs	r3, #0
   b6570:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b6572:	42b7      	cmp	r7, r6
   b6574:	dd6c      	ble.n	b6650 <loop+0x59c>
            segmentPos += currentRailway.scalers[i];
   b6576:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
   b657a:	ee07 1a90 	vmov	s15, r1
   b657e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b6582:	3601      	adds	r6, #1
            segmentPos += currentRailway.scalers[i];
   b6584:	ee38 8a27 	vadd.f32	s16, s16, s15
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b6588:	e7f3      	b.n	b6572 <loop+0x4be>
   b658a:	3f08      	subs	r7, #8
   b658c:	440f      	add	r7, r1
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b658e:	ed97 7a00 	vldr	s14, [r7]
   b6592:	ee37 7a68 	vsub.f32	s14, s14, s17
   b6596:	eef0 6a48 	vmov.f32	s13, s16
   b659a:	eee7 6a27 	vfma.f32	s13, s14, s15
          if(closestIndex == checkpointCount - 1){
   b659e:	f108 3eff 	add.w	lr, r8, #4294967295	; 0xffffffff
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b65a2:	1e43      	subs	r3, r0, #1
   b65a4:	ed97 7a01 	vldr	s14, [r7, #4]
   b65a8:	eef4 6ac7 	vcmpe.f32	s13, s14
   b65ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b65b0:	bfcc      	ite	gt
   b65b2:	2701      	movgt	r7, #1
   b65b4:	2700      	movle	r7, #0
          if(closestIndex == checkpointCount - 1){
   b65b6:	4586      	cmp	lr, r0
   b65b8:	d12a      	bne.n	b6610 <loop+0x55c>
            if(closestIndex == currentRailway.loopIndex){
   b65ba:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   b65bc:	4283      	cmp	r3, r0
   b65be:	d119      	bne.n	b65f4 <loop+0x540>
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b65c0:	1e53      	subs	r3, r2, #1
   b65c2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
              if(nearestSide != pointSide){
   b65c6:	4567      	cmp	r7, ip
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b65c8:	ed91 0a00 	vldr	s0, [r1]
   b65cc:	ed91 7a01 	vldr	s14, [r1, #4]
              if(nearestSide != pointSide){
   b65d0:	d003      	beq.n	b65da <loop+0x526>
                secondClosestIndex = checkpointCount - 2;
   b65d2:	f1a8 0302 	sub.w	r3, r8, #2
   b65d6:	4602      	mov	r2, r0
   b65d8:	e797      	b.n	b650a <loop+0x456>
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b65da:	ee70 8a68 	vsub.f32	s17, s0, s17
   b65de:	eea8 8aa7 	vfma.f32	s16, s17, s15
   b65e2:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b65e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
              }else if(nearestSide != loopPointSide){
   b65ea:	bfcc      	ite	gt
   b65ec:	2101      	movgt	r1, #1
   b65ee:	2100      	movle	r1, #0
   b65f0:	42b9      	cmp	r1, r7
   b65f2:	e788      	b.n	b6506 <loop+0x452>
              if(pointSide == nearestSide){
   b65f4:	4567      	cmp	r7, ip
   b65f6:	d1ec      	bne.n	b65d2 <loop+0x51e>
        String destNm = train.key("destination").valueString();
   b65f8:	a815      	add	r0, sp, #84	; 0x54
   b65fa:	f002 ff41 	bl	b9480 <_ZN6StringD1Ev>
        String nextStation = train.key("next_stop").valueString();
   b65fe:	a811      	add	r0, sp, #68	; 0x44
   b6600:	f002 ff3e 	bl	b9480 <_ZN6StringD1Ev>
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b6604:	a808      	add	r0, sp, #32
        count++;
   b6606:	f109 0901 	add.w	r9, r9, #1
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b660a:	f000 fb79 	bl	b6d00 <_ZN13JsonReferenceD1Ev>
   b660e:	e5e4      	b.n	b61da <loop+0x126>
            if(pointSide == nearestSide){
   b6610:	4567      	cmp	r7, ip
   b6612:	d1e0      	bne.n	b65d6 <loop+0x522>
              secondClosestIndex = closestIndex + 1;
   b6614:	1c43      	adds	r3, r0, #1
   b6616:	e7de      	b.n	b65d6 <loop+0x522>
   b6618:	4602      	mov	r2, r0
   b661a:	e780      	b.n	b651e <loop+0x46a>
   b661c:	4619      	mov	r1, r3
   b661e:	4617      	mov	r7, r2
   b6620:	e77f      	b.n	b6522 <loop+0x46e>
          else if(closestIndex < currentRailway.lowerLoopBound || secondClosestIndex < currentRailway.lowerLoopBound){
   b6622:	9930      	ldr	r1, [sp, #192]	; 0xc0
   b6624:	4291      	cmp	r1, r2
   b6626:	dc0b      	bgt.n	b6640 <loop+0x58c>
   b6628:	4299      	cmp	r1, r3
   b662a:	dc09      	bgt.n	b6640 <loop+0x58c>
          else if(closestIndex > currentRailway.upperLoopBound || secondClosestIndex > currentRailway.upperLoopBound){
   b662c:	9e31      	ldr	r6, [sp, #196]	; 0xc4
   b662e:	4296      	cmp	r6, r2
   b6630:	db0a      	blt.n	b6648 <loop+0x594>
   b6632:	429e      	cmp	r6, r3
   b6634:	db08      	blt.n	b6648 <loop+0x594>
            inLoop = true;
   b6636:	9b03      	ldr	r3, [sp, #12]
          else if(closestIndex > currentRailway.upperLoopBound || secondClosestIndex > currentRailway.upperLoopBound){
   b6638:	460e      	mov	r6, r1
            pcbSegment = 2;
   b663a:	f04f 0802 	mov.w	r8, #2
   b663e:	e797      	b.n	b6570 <loop+0x4bc>
            lowerScaleBound = 0;
   b6640:	2600      	movs	r6, #0
        bool inLoop = false;
   b6642:	4633      	mov	r3, r6
            pcbSegment = 0;
   b6644:	46b0      	mov	r8, r6
   b6646:	e793      	b.n	b6570 <loop+0x4bc>
        bool inLoop = false;
   b6648:	2300      	movs	r3, #0
            pcbSegment = 1;
   b664a:	f04f 0801 	mov.w	r8, #1
   b664e:	e78f      	b.n	b6570 <loop+0x4bc>
   b6650:	9e22      	ldr	r6, [sp, #136]	; 0x88
          if(inLoop){
   b6652:	2b00      	cmp	r3, #0
   b6654:	d03c      	beq.n	b66d0 <loop+0x61c>
            if(currentRailway.name == pinkLine.name){
   b6656:	497c      	ldr	r1, [pc, #496]	; (b6848 <loop+0x794>)
   b6658:	a825      	add	r0, sp, #148	; 0x94
   b665a:	f7fe f8ab 	bl	b47b4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b665e:	b1f8      	cbz	r0, b66a0 <loop+0x5ec>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6660:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
   b6664:	1a9b      	subs	r3, r3, r2
   b6666:	109b      	asrs	r3, r3, #2
              segmentPos = (float)currentRailway.outputs[2].size() - segmentPos;
   b6668:	ee07 3a90 	vmov	s15, r3
   b666c:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b6670:	ee37 8ac8 	vsub.f32	s16, s15, s16
          if(pcbSegment == 1 && currentRailway.name == greenLine.name){
   b6674:	f1b8 0f01 	cmp.w	r8, #1
   b6678:	d133      	bne.n	b66e2 <loop+0x62e>
   b667a:	4974      	ldr	r1, [pc, #464]	; (b684c <loop+0x798>)
   b667c:	a825      	add	r0, sp, #148	; 0x94
   b667e:	f7fe f899 	bl	b47b4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6682:	2800      	cmp	r0, #0
   b6684:	d036      	beq.n	b66f4 <loop+0x640>
   b6686:	e9d6 2303 	ldrd	r2, r3, [r6, #12]
   b668a:	1a9b      	subs	r3, r3, r2
   b668c:	109b      	asrs	r3, r3, #2
            segmentPos = (float)currentRailway.outputs[1].size() - segmentPos;
   b668e:	ee07 3a90 	vmov	s15, r3
   b6692:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b6696:	ee37 8ac8 	vsub.f32	s16, s15, s16
            trainDir = 6 - trainDir;
   b669a:	f1c4 0406 	rsb	r4, r4, #6
   b669e:	e029      	b.n	b66f4 <loop+0x640>
            }else if(currentRailway.name == orangeLine.name){
   b66a0:	496b      	ldr	r1, [pc, #428]	; (b6850 <loop+0x79c>)
   b66a2:	a825      	add	r0, sp, #148	; 0x94
   b66a4:	f7fe f886 	bl	b47b4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b66a8:	2800      	cmp	r0, #0
   b66aa:	d0e3      	beq.n	b6674 <loop+0x5c0>
              segmentPos = (int)(segmentPos + 20) % 40;
   b66ac:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
   b66b0:	ee38 8a27 	vadd.f32	s16, s16, s15
   b66b4:	2228      	movs	r2, #40	; 0x28
   b66b6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   b66ba:	ee17 3a90 	vmov	r3, s15
   b66be:	fb93 f1f2 	sdiv	r1, r3, r2
   b66c2:	fb02 3311 	mls	r3, r2, r1, r3
   b66c6:	ee08 3a10 	vmov	s16, r3
   b66ca:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   b66ce:	e7d1      	b.n	b6674 <loop+0x5c0>
            if(currentRailway.name == brownLine.name){
   b66d0:	4960      	ldr	r1, [pc, #384]	; (b6854 <loop+0x7a0>)
   b66d2:	a825      	add	r0, sp, #148	; 0x94
   b66d4:	f7fe f86e 	bl	b47b4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b66d8:	2800      	cmp	r0, #0
   b66da:	d0cb      	beq.n	b6674 <loop+0x5c0>
              trainDir = 6 - trainDir;
   b66dc:	f1c4 0406 	rsb	r4, r4, #6
   b66e0:	e7c8      	b.n	b6674 <loop+0x5c0>
          if(pcbSegment == 3 && currentRailway.name == pinkLine.name){
   b66e2:	f1b8 0f03 	cmp.w	r8, #3
   b66e6:	d105      	bne.n	b66f4 <loop+0x640>
   b66e8:	4957      	ldr	r1, [pc, #348]	; (b6848 <loop+0x794>)
   b66ea:	a825      	add	r0, sp, #148	; 0x94
   b66ec:	f7fe f862 	bl	b47b4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b66f0:	2800      	cmp	r0, #0
   b66f2:	d1d2      	bne.n	b669a <loop+0x5e6>
  { return __builtin_floorf(__x); }
   b66f4:	eeb0 0a48 	vmov.f32	s0, s16
   b66f8:	f003 fece 	bl	ba498 <floorf>
	return *(this->_M_impl._M_start + __n);
   b66fc:	230c      	movs	r3, #12
          currentRailway.outputs[pcbSegment][(int)floor(segmentPos)] = trainDir;
   b66fe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b6702:	fb03 f808 	mul.w	r8, r3, r8
   b6706:	ee10 2a10 	vmov	r2, s0
   b670a:	f856 3008 	ldr.w	r3, [r6, r8]
   b670e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b6712:	e771      	b.n	b65f8 <loop+0x544>
          Wire.beginTransmission(brownLineAdr);
   b6714:	f003 fcd2 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b6718:	4b4f      	ldr	r3, [pc, #316]	; (b6858 <loop+0x7a4>)
   b671a:	6819      	ldr	r1, [r3, #0]
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b671c:	f002 fcc4 	bl	b90a8 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(String(currentRailway.colors[0].c_str()));
   b6720:	f003 fccc 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b6724:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   b6726:	4606      	mov	r6, r0
   b6728:	6819      	ldr	r1, [r3, #0]
   b672a:	a815      	add	r0, sp, #84	; 0x54
   b672c:	f002 fef3 	bl	b9516 <_ZN6StringC1EPK19__FlashStringHelper>
   b6730:	9915      	ldr	r1, [sp, #84]	; 0x54
   b6732:	4630      	mov	r0, r6
   b6734:	f7fd fe56 	bl	b43e4 <_ZN5Print5writeEPKc.isra.0>
   b6738:	a815      	add	r0, sp, #84	; 0x54
   b673a:	f002 fea1 	bl	b9480 <_ZN6StringD1Ev>
        Wire.write(String(currentRailway.colors[1].c_str()));
   b673e:	f003 fcbd 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b6742:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   b6744:	4606      	mov	r6, r0
   b6746:	6999      	ldr	r1, [r3, #24]
   b6748:	a815      	add	r0, sp, #84	; 0x54
   b674a:	f002 fee4 	bl	b9516 <_ZN6StringC1EPK19__FlashStringHelper>
   b674e:	9915      	ldr	r1, [sp, #84]	; 0x54
   b6750:	4630      	mov	r0, r6
   b6752:	f7fd fe47 	bl	b43e4 <_ZN5Print5writeEPKc.isra.0>
   b6756:	a815      	add	r0, sp, #84	; 0x54
   b6758:	f002 fe92 	bl	b9480 <_ZN6StringD1Ev>
        Wire.endTransmission();
   b675c:	f003 fcae 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b6760:	f002 fca9 	bl	b90b6 <_ZN7TwoWire15endTransmissionEv>
        if(i == 2 || currentRailway.name == purpleLine.name){
   b6764:	2c02      	cmp	r4, #2
   b6766:	d03f      	beq.n	b67e8 <loop+0x734>
   b6768:	4641      	mov	r1, r8
   b676a:	a825      	add	r0, sp, #148	; 0x94
   b676c:	f7fe f822 	bl	b47b4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6770:	2800      	cmp	r0, #0
   b6772:	d139      	bne.n	b67e8 <loop+0x734>
        }else if(i == 3){
   b6774:	2c03      	cmp	r4, #3
   b6776:	d179      	bne.n	b686c <loop+0x7b8>
          if(currentRailway.name == orangeLine.name){
   b6778:	4649      	mov	r1, r9
   b677a:	a825      	add	r0, sp, #148	; 0x94
   b677c:	f7fe f81a 	bl	b47b4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6780:	4e36      	ldr	r6, [pc, #216]	; (b685c <loop+0x7a8>)
   b6782:	2800      	cmp	r0, #0
   b6784:	d059      	beq.n	b683a <loop+0x786>
            Wire.beginTransmission(greenLineAdr[0]);
   b6786:	f003 fc99 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b678a:	6831      	ldr	r1, [r6, #0]
            Wire.beginTransmission(greenLineAdr[1]);
   b678c:	f002 fc8c 	bl	b90a8 <_ZN7TwoWire17beginTransmissionEi>
        if(i == 3 && currentRailway.name == orangeLine.name){
   b6790:	4649      	mov	r1, r9
   b6792:	a825      	add	r0, sp, #148	; 0x94
   b6794:	f7fe f80e 	bl	b47b4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6798:	4606      	mov	r6, r0
   b679a:	2800      	cmp	r0, #0
   b679c:	f000 80c0 	beq.w	b6920 <loop+0x86c>
   b67a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; b6868 <loop+0x7b4>
   b67a4:	2600      	movs	r6, #0
   b67a6:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
   b67aa:	4b2d      	ldr	r3, [pc, #180]	; (b6860 <loop+0x7ac>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b67ac:	e9d1 1200 	ldrd	r1, r2, [r1]
	return *(this->_M_impl._M_start + __n);
   b67b0:	6a58      	ldr	r0, [r3, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b67b2:	1a51      	subs	r1, r2, r1
   b67b4:	e9d0 0209 	ldrd	r0, r2, [r0, #36]	; 0x24
   b67b8:	1a12      	subs	r2, r2, r0
   b67ba:	1092      	asrs	r2, r2, #2
          for(int j = 0; j < greenLine.outputs[0].size() - orangeLine.outputs[3].size(); j++){
   b67bc:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   b67c0:	42b2      	cmp	r2, r6
   b67c2:	f240 810b 	bls.w	b69dc <loop+0x928>
            Wire.write('0');
   b67c6:	f003 fc79 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b67ca:	2130      	movs	r1, #48	; 0x30
   b67cc:	f7fd fd3a 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
          for(int j = 0; j < greenLine.outputs[0].size() - orangeLine.outputs[3].size(); j++){
   b67d0:	3601      	adds	r6, #1
   b67d2:	e7e8      	b.n	b67a6 <loop+0x6f2>
            Wire.beginTransmission(greenLineAdr[1]);
   b67d4:	f003 fc72 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b67d8:	6871      	ldr	r1, [r6, #4]
   b67da:	e79f      	b.n	b671c <loop+0x668>
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b67dc:	f003 fc6e 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b67e0:	f8db 3000 	ldr.w	r3, [fp]
   b67e4:	59d9      	ldr	r1, [r3, r7]
   b67e6:	e799      	b.n	b671c <loop+0x668>
          Wire.beginTransmission(brownLineAdr);
   b67e8:	f003 fc68 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b67ec:	4b1a      	ldr	r3, [pc, #104]	; (b6858 <loop+0x7a4>)
   b67ee:	6819      	ldr	r1, [r3, #0]
   b67f0:	f002 fc5a 	bl	b90a8 <_ZN7TwoWire17beginTransmissionEi>
        if(i == 2){
   b67f4:	2c02      	cmp	r4, #2
   b67f6:	f040 80eb 	bne.w	b69d0 <loop+0x91c>
          if(currentRailway.name == greenLine.name){
   b67fa:	4914      	ldr	r1, [pc, #80]	; (b684c <loop+0x798>)
   b67fc:	4e19      	ldr	r6, [pc, #100]	; (b6864 <loop+0x7b0>)
   b67fe:	a825      	add	r0, sp, #148	; 0x94
   b6800:	f7fd ffd8 	bl	b47b4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6804:	4682      	mov	sl, r0
   b6806:	2800      	cmp	r0, #0
   b6808:	d057      	beq.n	b68ba <loop+0x806>
            for(int j = 0; j < brownLine.outputs[0].size() + (brownLine.outputs[2].size() / 2); j++){
   b680a:	f04f 0a00 	mov.w	sl, #0
	return *(this->_M_impl._M_start + __n);
   b680e:	6a72      	ldr	r2, [r6, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6810:	e9d2 1306 	ldrd	r1, r3, [r2, #24]
   b6814:	1a5b      	subs	r3, r3, r1
   b6816:	1099      	asrs	r1, r3, #2
   b6818:	e9d2 2300 	ldrd	r2, r3, [r2]
   b681c:	1a9b      	subs	r3, r3, r2
   b681e:	109b      	asrs	r3, r3, #2
   b6820:	eb03 0351 	add.w	r3, r3, r1, lsr #1
   b6824:	4553      	cmp	r3, sl
   b6826:	f240 80d9 	bls.w	b69dc <loop+0x928>
              Wire.write('0');
   b682a:	f003 fc47 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b682e:	2130      	movs	r1, #48	; 0x30
   b6830:	f7fd fd08 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < brownLine.outputs[0].size() + (brownLine.outputs[2].size() / 2); j++){
   b6834:	f10a 0a01 	add.w	sl, sl, #1
   b6838:	e7e9      	b.n	b680e <loop+0x75a>
            Wire.beginTransmission(greenLineAdr[1]);
   b683a:	f003 fc3f 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b683e:	6871      	ldr	r1, [r6, #4]
   b6840:	e7a4      	b.n	b678c <loop+0x6d8>
   b6842:	bf00      	nop
   b6844:	000bd5ac 	.word	0x000bd5ac
   b6848:	2003e510 	.word	0x2003e510
   b684c:	20035658 	.word	0x20035658
   b6850:	20037ee8 	.word	0x20037ee8
   b6854:	200355e8 	.word	0x200355e8
   b6858:	20035624 	.word	0x20035624
   b685c:	20035694 	.word	0x20035694
   b6860:	20037eb8 	.word	0x20037eb8
   b6864:	200355b8 	.word	0x200355b8
   b6868:	20035628 	.word	0x20035628
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b686c:	f003 fc26 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b6870:	f8db 3000 	ldr.w	r3, [fp]
   b6874:	59d9      	ldr	r1, [r3, r7]
   b6876:	f002 fc17 	bl	b90a8 <_ZN7TwoWire17beginTransmissionEi>
        if(i == 1 && (currentRailway.name == brownLine.name || currentRailway.name == purpleLine.name)){
   b687a:	2c01      	cmp	r4, #1
   b687c:	f040 80ae 	bne.w	b69dc <loop+0x928>
   b6880:	496a      	ldr	r1, [pc, #424]	; (b6a2c <loop+0x978>)
   b6882:	a825      	add	r0, sp, #148	; 0x94
   b6884:	f7fd ff96 	bl	b47b4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6888:	4606      	mov	r6, r0
   b688a:	2800      	cmp	r0, #0
   b688c:	d146      	bne.n	b691c <loop+0x868>
   b688e:	4641      	mov	r1, r8
   b6890:	a825      	add	r0, sp, #148	; 0x94
   b6892:	f7fd ff8f 	bl	b47b4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6896:	2800      	cmp	r0, #0
   b6898:	f000 80a0 	beq.w	b69dc <loop+0x928>
	return *(this->_M_impl._M_start + __n);
   b689c:	9a22      	ldr	r2, [sp, #136]	; 0x88
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b689e:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
   b68a2:	1a9b      	subs	r3, r3, r2
          for(int j = 0; j < currentRailway.outputs[2].size(); j++){
   b68a4:	ebb6 0fa3 	cmp.w	r6, r3, asr #2
   b68a8:	f080 8098 	bcs.w	b69dc <loop+0x928>
            Wire.write('0');
   b68ac:	f003 fc06 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b68b0:	2130      	movs	r1, #48	; 0x30
   b68b2:	f7fd fcc7 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
          for(int j = 0; j < currentRailway.outputs[2].size(); j++){
   b68b6:	3601      	adds	r6, #1
   b68b8:	e7f0      	b.n	b689c <loop+0x7e8>
          else if(currentRailway.name == brownLine.name || currentRailway.name == purpleLine.name){
   b68ba:	f106 0130 	add.w	r1, r6, #48	; 0x30
   b68be:	a825      	add	r0, sp, #148	; 0x94
   b68c0:	f7fd ff78 	bl	b47b4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b68c4:	9003      	str	r0, [sp, #12]
   b68c6:	b930      	cbnz	r0, b68d6 <loop+0x822>
   b68c8:	4641      	mov	r1, r8
   b68ca:	a825      	add	r0, sp, #148	; 0x94
   b68cc:	f7fd ff72 	bl	b47b4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b68d0:	b1a0      	cbz	r0, b68fc <loop+0x848>
   b68d2:	9b03      	ldr	r3, [sp, #12]
   b68d4:	469a      	mov	sl, r3
	return *(this->_M_impl._M_start + __n);
   b68d6:	6a72      	ldr	r2, [r6, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b68d8:	e9d2 2300 	ldrd	r2, r3, [r2]
   b68dc:	1a9b      	subs	r3, r3, r2
            for(int j = 0; j < brownLine.outputs[0].size(); j++){
   b68de:	ebba 0fa3 	cmp.w	sl, r3, asr #2
   b68e2:	d27b      	bcs.n	b69dc <loop+0x928>
              Wire.write((char)currentRailway.outputs[0][j] + '0');
   b68e4:	f003 fbea 	bl	ba0bc <_Z19__fetch_global_Wirev>
	return *(this->_M_impl._M_start + __n);
   b68e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   b68ea:	681b      	ldr	r3, [r3, #0]
   b68ec:	f813 102a 	ldrb.w	r1, [r3, sl, lsl #2]
   b68f0:	3130      	adds	r1, #48	; 0x30
   b68f2:	f7fd fca7 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < brownLine.outputs[0].size(); j++){
   b68f6:	f10a 0a01 	add.w	sl, sl, #1
   b68fa:	e7ec      	b.n	b68d6 <loop+0x822>
   b68fc:	4682      	mov	sl, r0
   b68fe:	6a72      	ldr	r2, [r6, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6900:	e9d2 2300 	ldrd	r2, r3, [r2]
   b6904:	1a9b      	subs	r3, r3, r2
            for(int j = 0; j < brownLine.outputs[0].size(); j++){
   b6906:	ebba 0fa3 	cmp.w	sl, r3, asr #2
   b690a:	d267      	bcs.n	b69dc <loop+0x928>
              Wire.write('0');
   b690c:	f003 fbd6 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b6910:	2130      	movs	r1, #48	; 0x30
   b6912:	f7fd fc97 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < brownLine.outputs[0].size(); j++){
   b6916:	f10a 0a01 	add.w	sl, sl, #1
   b691a:	e7f0      	b.n	b68fe <loop+0x84a>
   b691c:	2600      	movs	r6, #0
   b691e:	e7bd      	b.n	b689c <loop+0x7e8>
        }else if(i == 3 && currentRailway.name == pinkLine.name){
   b6920:	4943      	ldr	r1, [pc, #268]	; (b6a30 <loop+0x97c>)
   b6922:	a825      	add	r0, sp, #148	; 0x94
   b6924:	f7fd ff46 	bl	b47b4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6928:	2800      	cmp	r0, #0
   b692a:	d057      	beq.n	b69dc <loop+0x928>
	return *(this->_M_impl._M_start + __n);
   b692c:	f8df a10c 	ldr.w	sl, [pc, #268]	; b6a3c <loop+0x988>
   b6930:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
   b6934:	4b3f      	ldr	r3, [pc, #252]	; (b6a34 <loop+0x980>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6936:	e9d1 1200 	ldrd	r1, r2, [r1]
	return *(this->_M_impl._M_start + __n);
   b693a:	6a58      	ldr	r0, [r3, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b693c:	1a51      	subs	r1, r2, r1
   b693e:	e9d0 0209 	ldrd	r0, r2, [r0, #36]	; 0x24
   b6942:	1a12      	subs	r2, r2, r0
   b6944:	1092      	asrs	r2, r2, #2
          for(int j = 0; j < greenLine.outputs[0].size() - pinkLine.outputs[3].size(); j++){
   b6946:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   b694a:	42b2      	cmp	r2, r6
   b694c:	d946      	bls.n	b69dc <loop+0x928>
            Wire.write('0');
   b694e:	f003 fbb5 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b6952:	2130      	movs	r1, #48	; 0x30
   b6954:	f7fd fc76 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
          for(int j = 0; j < greenLine.outputs[0].size() - pinkLine.outputs[3].size(); j++){
   b6958:	3601      	adds	r6, #1
   b695a:	e7e9      	b.n	b6930 <loop+0x87c>
        Serial.println();
   b695c:	f003 fa60 	bl	b9e20 <_Z16_fetch_usbserialv>
   b6960:	f002 fd23 	bl	b93aa <_ZN5Print7printlnEv>
      for(int i = 0; i < 4; i++){
   b6964:	3401      	adds	r4, #1
        Wire.endTransmission();
   b6966:	f003 fba9 	bl	ba0bc <_Z19__fetch_global_Wirev>
   b696a:	f002 fba4 	bl	b90b6 <_ZN7TwoWire15endTransmissionEv>
      for(int i = 0; i < 4; i++){
   b696e:	2c04      	cmp	r4, #4
   b6970:	f107 0704 	add.w	r7, r7, #4
   b6974:	f47f acaf 	bne.w	b62d6 <loop+0x222>
   b6978:	2300      	movs	r3, #0
          currentRailway.outputs[i][j] = 0;
   b697a:	461c      	mov	r4, r3
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b697c:	2200      	movs	r2, #0
	return *(this->_M_impl._M_start + __n);
   b697e:	9922      	ldr	r1, [sp, #136]	; 0x88
   b6980:	18ce      	adds	r6, r1, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6982:	58c8      	ldr	r0, [r1, r3]
   b6984:	6871      	ldr	r1, [r6, #4]
   b6986:	1a09      	subs	r1, r1, r0
   b6988:	ebb2 0fa1 	cmp.w	r2, r1, asr #2
   b698c:	d203      	bcs.n	b6996 <loop+0x8e2>
          currentRailway.outputs[i][j] = 0;
   b698e:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b6992:	3201      	adds	r2, #1
   b6994:	e7f3      	b.n	b697e <loop+0x8ca>
      for(int i = 0; i < 4; i++){
   b6996:	330c      	adds	r3, #12
   b6998:	2b30      	cmp	r3, #48	; 0x30
   b699a:	d1ef      	bne.n	b697c <loop+0x8c8>
      Serial.println();
   b699c:	f003 fa40 	bl	b9e20 <_Z16_fetch_usbserialv>
   b69a0:	f002 fd03 	bl	b93aa <_ZN5Print7printlnEv>
      }
   b69a4:	a805      	add	r0, sp, #20
   b69a6:	f7fd fe25 	bl	b45f4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      Railway currentRailway = railways[j];
   b69aa:	a819      	add	r0, sp, #100	; 0x64
   b69ac:	f7fe f908 	bl	b4bc0 <_ZN7RailwayD1Ev>
    for(int j = 0; j < railways.size(); j++){
   b69b0:	3501      	adds	r5, #1
   b69b2:	f7ff bbb3 	b.w	b611c <loop+0x68>
    Serial.println();
   b69b6:	f003 fa33 	bl	b9e20 <_Z16_fetch_usbserialv>
   b69ba:	f002 fcf6 	bl	b93aa <_ZN5Print7printlnEv>
  Serial.println();
   b69be:	f003 fa2f 	bl	b9e20 <_Z16_fetch_usbserialv>
}
   b69c2:	b035      	add	sp, #212	; 0xd4
   b69c4:	ecbd 8b06 	vpop	{d8-d10}
   b69c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Serial.println();
   b69cc:	f002 bced 	b.w	b93aa <_ZN5Print7printlnEv>
        if(i == 1 && (currentRailway.name == brownLine.name || currentRailway.name == purpleLine.name)){
   b69d0:	2c01      	cmp	r4, #1
   b69d2:	f43f af55 	beq.w	b6880 <loop+0x7cc>
        if(i == 3 && currentRailway.name == orangeLine.name){
   b69d6:	2c03      	cmp	r4, #3
   b69d8:	f43f aeda 	beq.w	b6790 <loop+0x6dc>
        Serial.printf("%s rail part %i: ", currentRailway.name.c_str(), i);
   b69dc:	f003 fa20 	bl	b9e20 <_Z16_fetch_usbserialv>
   b69e0:	9a25      	ldr	r2, [sp, #148]	; 0x94
   b69e2:	4915      	ldr	r1, [pc, #84]	; (b6a38 <loop+0x984>)
   b69e4:	4623      	mov	r3, r4
   b69e6:	f7fd fde1 	bl	b45ac <_ZN5Print6printfEPKcz>
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b69ea:	260c      	movs	r6, #12
   b69ec:	4366      	muls	r6, r4
   b69ee:	f04f 0a00 	mov.w	sl, #0
	return *(this->_M_impl._M_start + __n);
   b69f2:	9a22      	ldr	r2, [sp, #136]	; 0x88
   b69f4:	1993      	adds	r3, r2, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b69f6:	5992      	ldr	r2, [r2, r6]
   b69f8:	685b      	ldr	r3, [r3, #4]
   b69fa:	1a9b      	subs	r3, r3, r2
   b69fc:	ebba 0fa3 	cmp.w	sl, r3, asr #2
   b6a00:	d2ac      	bcs.n	b695c <loop+0x8a8>
          Wire.write((char)currentRailway.outputs[i][j] + '0');
   b6a02:	f003 fb5b 	bl	ba0bc <_Z19__fetch_global_Wirev>
	return *(this->_M_impl._M_start + __n);
   b6a06:	9b22      	ldr	r3, [sp, #136]	; 0x88
   b6a08:	599b      	ldr	r3, [r3, r6]
   b6a0a:	f813 102a 	ldrb.w	r1, [r3, sl, lsl #2]
   b6a0e:	3130      	adds	r1, #48	; 0x30
   b6a10:	f7fd fc18 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
          Serial.print(currentRailway.outputs[i][j]);
   b6a14:	f003 fa04 	bl	b9e20 <_Z16_fetch_usbserialv>
   b6a18:	9b22      	ldr	r3, [sp, #136]	; 0x88
   b6a1a:	599b      	ldr	r3, [r3, r6]
   b6a1c:	220a      	movs	r2, #10
   b6a1e:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
   b6a22:	f7fd fbc5 	bl	b41b0 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b6a26:	f10a 0a01 	add.w	sl, sl, #1
   b6a2a:	e7e2      	b.n	b69f2 <loop+0x93e>
   b6a2c:	200355e8 	.word	0x200355e8
   b6a30:	2003e510 	.word	0x2003e510
   b6a34:	2003e4e0 	.word	0x2003e4e0
   b6a38:	000bd5b5 	.word	0x000bd5b5
   b6a3c:	20035628 	.word	0x20035628

000b6a40 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b6a40:	b510      	push	{r4, lr}
   b6a42:	4604      	mov	r4, r0
   b6a44:	f003 f91e 	bl	b9c84 <_ZN9TCPClientC1Ev>
{

}
   b6a48:	4620      	mov	r0, r4
   b6a4a:	bd10      	pop	{r4, pc}

000b6a4c <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b6a4c:	b538      	push	{r3, r4, r5, lr}
   b6a4e:	4604      	mov	r4, r0
   b6a50:	4615      	mov	r5, r2
    client.print(aHeaderName);
   b6a52:	f002 fca3 	bl	b939c <_ZN5Print5printEPKc>
    client.print(": ");
   b6a56:	4905      	ldr	r1, [pc, #20]	; (b6a6c <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   b6a58:	4620      	mov	r0, r4
   b6a5a:	f002 fc9f 	bl	b939c <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b6a5e:	4629      	mov	r1, r5
   b6a60:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b6a62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
   b6a66:	f002 bcac 	b.w	b93c2 <_ZN5Print7printlnEPKc>
   b6a6a:	bf00      	nop
   b6a6c:	000bd31f 	.word	0x000bd31f

000b6a70 <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b6a70:	b538      	push	{r3, r4, r5, lr}
   b6a72:	4605      	mov	r5, r0
   b6a74:	4614      	mov	r4, r2
    client.print(aHeaderName);
   b6a76:	f002 fc91 	bl	b939c <_ZN5Print5printEPKc>
    client.print(": ");
   b6a7a:	490b      	ldr	r1, [pc, #44]	; (b6aa8 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   b6a7c:	4628      	mov	r0, r5
   b6a7e:	f002 fc8d 	bl	b939c <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
   b6a82:	2c00      	cmp	r4, #0
   b6a84:	da0d      	bge.n	b6aa2 <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
   b6a86:	212d      	movs	r1, #45	; 0x2d
   b6a88:	4628      	mov	r0, r5
   b6a8a:	f002 fc8b 	bl	b93a4 <_ZN5Print5printEc>
            val = -n;
   b6a8e:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b6a90:	4628      	mov	r0, r5
   b6a92:	220a      	movs	r2, #10
   b6a94:	f002 fc9f 	bl	b93d6 <_ZN5Print11printNumberEmh>
        n += println();
   b6a98:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b6a9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6a9e:	f002 bc84 	b.w	b93aa <_ZN5Print7printlnEv>
            val = n;
   b6aa2:	4621      	mov	r1, r4
   b6aa4:	e7f4      	b.n	b6a90 <_ZN10HttpClient10sendHeaderEPKci+0x20>
   b6aa6:	bf00      	nop
   b6aa8:	000bd31f 	.word	0x000bd31f

000b6aac <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b6aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6ab0:	460e      	mov	r6, r1
   b6ab2:	b091      	sub	sp, #68	; 0x44
   b6ab4:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b6ab6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6aba:	6013      	str	r3, [r2, #0]
{
   b6abc:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b6abe:	2100      	movs	r1, #0
   b6ac0:	4630      	mov	r0, r6
   b6ac2:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b6ac6:	4617      	mov	r7, r2
   b6ac8:	f002 fda1 	bl	b960e <_ZNK6String6equalsEPKc>
   b6acc:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b6ad0:	4603      	mov	r3, r0
   b6ad2:	b998      	cbnz	r0, b6afc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	const char * c_str() const { return buffer; }
   b6ad4:	f1be 0f00 	cmp.w	lr, #0
   b6ad8:	bf14      	ite	ne
   b6ada:	4672      	movne	r2, lr
   b6adc:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b6ade:	6831      	ldr	r1, [r6, #0]
   b6ae0:	b292      	uxth	r2, r2
   b6ae2:	4620      	mov	r0, r4
   b6ae4:	f002 fece 	bl	b9884 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b6ae8:	1e05      	subs	r5, r0, #0
   b6aea:	bf18      	it	ne
   b6aec:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   b6aee:	b9c5      	cbnz	r5, b6b22 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   b6af0:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b6af2:	b011      	add	sp, #68	; 0x44
   b6af4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b6af8:	f003 b87a 	b.w	b9bf0 <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b6afc:	4b76      	ldr	r3, [pc, #472]	; (b6cd8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
   b6afe:	930a      	str	r3, [sp, #40]	; 0x28
   b6b00:	f106 0c14 	add.w	ip, r6, #20
   b6b04:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6b08:	ad0b      	add	r5, sp, #44	; 0x2c
   b6b0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6b0c:	f8dc 3000 	ldr.w	r3, [ip]
   b6b10:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b6b12:	fa1f f28e 	uxth.w	r2, lr
   b6b16:	2300      	movs	r3, #0
   b6b18:	a90a      	add	r1, sp, #40	; 0x28
   b6b1a:	4620      	mov	r0, r4
   b6b1c:	f002 ff92 	bl	b9a44 <_ZN9TCPClient7connectE9IPAddresstm>
   b6b20:	e7e2      	b.n	b6ae8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
   b6b22:	4649      	mov	r1, r9
   b6b24:	4620      	mov	r0, r4
   b6b26:	f002 fc39 	bl	b939c <_ZN5Print5printEPKc>
    client.print(" ");
   b6b2a:	496c      	ldr	r1, [pc, #432]	; (b6cdc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   b6b2c:	4620      	mov	r0, r4
   b6b2e:	f002 fc35 	bl	b939c <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b6b32:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b6b34:	4620      	mov	r0, r4
   b6b36:	f002 fc31 	bl	b939c <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b6b3a:	4969      	ldr	r1, [pc, #420]	; (b6ce0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   b6b3c:	4620      	mov	r0, r4
   b6b3e:	f002 fc2d 	bl	b939c <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b6b42:	4968      	ldr	r1, [pc, #416]	; (b6ce4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
   b6b44:	4a68      	ldr	r2, [pc, #416]	; (b6ce8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
   b6b46:	4620      	mov	r0, r4
   b6b48:	f7ff ff80 	bl	b6a4c <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b6b4c:	2100      	movs	r1, #0
   b6b4e:	4630      	mov	r0, r6
   b6b50:	f002 fd5d 	bl	b960e <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b6b54:	b920      	cbnz	r0, b6b60 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   b6b56:	6832      	ldr	r2, [r6, #0]
   b6b58:	4964      	ldr	r1, [pc, #400]	; (b6cec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
   b6b5a:	4620      	mov	r0, r4
   b6b5c:	f7ff ff76 	bl	b6a4c <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b6b60:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b6b64:	2100      	movs	r1, #0
   b6b66:	4650      	mov	r0, sl
   b6b68:	f002 fd51 	bl	b960e <_ZNK6String6equalsEPKc>
   b6b6c:	b928      	cbnz	r0, b6b7a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
   b6b6e:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b6b70:	495f      	ldr	r1, [pc, #380]	; (b6cf0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
   b6b72:	4620      	mov	r0, r4
   b6b74:	f7ff ff7c 	bl	b6a70 <_ZN10HttpClient10sendHeaderEPKci>
   b6b78:	e006      	b.n	b6b88 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b6b7a:	495e      	ldr	r1, [pc, #376]	; (b6cf4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
   b6b7c:	4648      	mov	r0, r9
   b6b7e:	f004 fb49 	bl	bb214 <strcmp>
   b6b82:	4602      	mov	r2, r0
   b6b84:	2800      	cmp	r0, #0
   b6b86:	d0f3      	beq.n	b6b70 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
   b6b88:	f1b8 0f00 	cmp.w	r8, #0
   b6b8c:	d00e      	beq.n	b6bac <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
   b6b8e:	f8d8 1000 	ldr.w	r1, [r8]
   b6b92:	b159      	cbz	r1, b6bac <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
   b6b94:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
   b6b98:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b6b9a:	b122      	cbz	r2, b6ba6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
   b6b9c:	f7ff ff56 	bl	b6a4c <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b6ba0:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
   b6ba4:	e7f3      	b.n	b6b8e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
   b6ba6:	f002 fc0c 	bl	b93c2 <_ZN5Print7printlnEPKc>
}
   b6baa:	e7f9      	b.n	b6ba0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
   b6bac:	4620      	mov	r0, r4
   b6bae:	f002 fbfc 	bl	b93aa <_ZN5Print7printlnEv>
    client.flush();
   b6bb2:	4620      	mov	r0, r4
   b6bb4:	f002 fdc6 	bl	b9744 <_ZN9TCPClient5flushEv>
   b6bb8:	2100      	movs	r1, #0
   b6bba:	4650      	mov	r0, sl
   b6bbc:	f002 fd27 	bl	b960e <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b6bc0:	b918      	cbnz	r0, b6bca <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
   b6bc2:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b6bc4:	4620      	mov	r0, r4
   b6bc6:	f002 fbfc 	bl	b93c2 <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b6bca:	f104 0a1c 	add.w	sl, r4, #28
   b6bce:	f44f 5220 	mov.w	r2, #10240	; 0x2800
   b6bd2:	2100      	movs	r1, #0
   b6bd4:	4650      	mov	r0, sl
   b6bd6:	f004 fae7 	bl	bb1a8 <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6bda:	f000 fde7 	bl	b77ac <HAL_Timer_Get_Milli_Seconds>
   b6bde:	9001      	str	r0, [sp, #4]
   b6be0:	f000 fde4 	bl	b77ac <HAL_Timer_Get_Milli_Seconds>
    bool error = false;
   b6be4:	f04f 0800 	mov.w	r8, #0
    unsigned int bufferPosition = 0;
   b6be8:	4646      	mov	r6, r8
    } while (client.connected() && !timeout && !error);
   b6bea:	f241 3b88 	movw	fp, #5000	; 0x1388
        while (client.available()) {
   b6bee:	4620      	mov	r0, r4
   b6bf0:	f002 ffa4 	bl	b9b3c <_ZN9TCPClient9availableEv>
   b6bf4:	b1e8      	cbz	r0, b6c32 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x186>
            char c = client.read();
   b6bf6:	4620      	mov	r0, r4
   b6bf8:	f002 fd8a 	bl	b9710 <_ZN9TCPClient4readEv>
   b6bfc:	4681      	mov	r9, r0
   b6bfe:	f000 fdd5 	bl	b77ac <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b6c02:	f242 73fe 	movw	r3, #10238	; 0x27fe
   b6c06:	429e      	cmp	r6, r3
   b6c08:	9001      	str	r0, [sp, #4]
   b6c0a:	d804      	bhi.n	b6c16 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = c;
   b6c0c:	19a3      	adds	r3, r4, r6
            char c = client.read();
   b6c0e:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
   b6c12:	3601      	adds	r6, #1
        while (client.available()) {
   b6c14:	e7eb      	b.n	b6bee <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b6c16:	f242 73ff 	movw	r3, #10239	; 0x27ff
   b6c1a:	429e      	cmp	r6, r3
   b6c1c:	d1f9      	bne.n	b6c12 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b6c1e:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
   b6c22:	2200      	movs	r2, #0
   b6c24:	f883 281b 	strb.w	r2, [r3, #2075]	; 0x81b
                client.stop();
   b6c28:	4620      	mov	r0, r4
   b6c2a:	f002 ffe1 	bl	b9bf0 <_ZN9TCPClient4stopEv>
                error = true;
   b6c2e:	46a8      	mov	r8, r5
   b6c30:	e7ef      	b.n	b6c12 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b6c32:	19a3      	adds	r3, r4, r6
   b6c34:	7718      	strb	r0, [r3, #28]
   b6c36:	f000 fdb9 	bl	b77ac <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b6c3a:	9b01      	ldr	r3, [sp, #4]
   b6c3c:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b6c40:	f1b8 0f00 	cmp.w	r8, #0
   b6c44:	d104      	bne.n	b6c50 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
   b6c46:	45d9      	cmp	r9, fp
   b6c48:	d802      	bhi.n	b6c50 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
            delay(200);
   b6c4a:	20c8      	movs	r0, #200	; 0xc8
   b6c4c:	f000 ffca 	bl	b7be4 <delay>
    } while (client.connected() && !timeout && !error);
   b6c50:	4620      	mov	r0, r4
   b6c52:	f002 fe95 	bl	b9980 <_ZN9TCPClient9connectedEv>
   b6c56:	b120      	cbz	r0, b6c62 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b6c58:	45d9      	cmp	r9, fp
   b6c5a:	d802      	bhi.n	b6c62 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b6c5c:	f1b8 0f00 	cmp.w	r8, #0
   b6c60:	d0c5      	beq.n	b6bee <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
    client.stop();
   b6c62:	4620      	mov	r0, r4
   b6c64:	f002 ffc4 	bl	b9bf0 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b6c68:	4651      	mov	r1, sl
   b6c6a:	a802      	add	r0, sp, #8
   b6c6c:	f002 fc53 	bl	b9516 <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b6c70:	230c      	movs	r3, #12
   b6c72:	2209      	movs	r2, #9
   b6c74:	a902      	add	r1, sp, #8
   b6c76:	a806      	add	r0, sp, #24
   b6c78:	f002 fcee 	bl	b9658 <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b6c7c:	491e      	ldr	r1, [pc, #120]	; (b6cf8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x24c>)
   b6c7e:	a80a      	add	r0, sp, #40	; 0x28
   b6c80:	f002 fc49 	bl	b9516 <_ZN6StringC1EPK19__FlashStringHelper>
   b6c84:	a90a      	add	r1, sp, #40	; 0x28
   b6c86:	a802      	add	r0, sp, #8
   b6c88:	f002 fce2 	bl	b9650 <_ZNK6String7indexOfERKS_>
   b6c8c:	4604      	mov	r4, r0
   b6c8e:	a80a      	add	r0, sp, #40	; 0x28
   b6c90:	f002 fbf6 	bl	b9480 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b6c94:	1c63      	adds	r3, r4, #1
   b6c96:	d108      	bne.n	b6caa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fe>
    String statusCode = raw_response.substring(9,12);
   b6c98:	a806      	add	r0, sp, #24
   b6c9a:	f002 fbf1 	bl	b9480 <_ZN6StringD1Ev>
    String raw_response(buffer);
   b6c9e:	a802      	add	r0, sp, #8
   b6ca0:	f002 fbee 	bl	b9480 <_ZN6StringD1Ev>
}
   b6ca4:	b011      	add	sp, #68	; 0x44
   b6ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aResponse.body = "";
   b6caa:	1d3d      	adds	r5, r7, #4
   b6cac:	4913      	ldr	r1, [pc, #76]	; (b6cfc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x250>)
   b6cae:	4628      	mov	r0, r5
   b6cb0:	f002 fc54 	bl	b955c <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b6cb4:	1d22      	adds	r2, r4, #4
   b6cb6:	a902      	add	r1, sp, #8
   b6cb8:	a80a      	add	r0, sp, #40	; 0x28
   b6cba:	f002 fced 	bl	b9698 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b6cbe:	a90a      	add	r1, sp, #40	; 0x28
   b6cc0:	4628      	mov	r0, r5
   b6cc2:	f002 fc87 	bl	b95d4 <_ZN6String6concatERKS_>
   b6cc6:	a80a      	add	r0, sp, #40	; 0x28
   b6cc8:	f002 fbda 	bl	b9480 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b6ccc:	9806      	ldr	r0, [sp, #24]
   b6cce:	f004 fa2f 	bl	bb130 <atoi>
   b6cd2:	6038      	str	r0, [r7, #0]
   b6cd4:	e7e0      	b.n	b6c98 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ec>
   b6cd6:	bf00      	nop
   b6cd8:	000bd9a8 	.word	0x000bd9a8
   b6cdc:	000bd531 	.word	0x000bd531
   b6ce0:	000bd6ec 	.word	0x000bd6ec
   b6ce4:	000bd6fe 	.word	0x000bd6fe
   b6ce8:	000bd6f8 	.word	0x000bd6f8
   b6cec:	000bd709 	.word	0x000bd709
   b6cf0:	000bd70e 	.word	0x000bd70e
   b6cf4:	000bd71d 	.word	0x000bd71d
   b6cf8:	000bd722 	.word	0x000bd722
   b6cfc:	000bd726 	.word	0x000bd726

000b6d00 <_ZN13JsonReferenceD1Ev>:
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
}
   b6d00:	4770      	bx	lr

000b6d02 <_ZN13JsonReferenceD0Ev>:
JsonReference::~JsonReference() {
   b6d02:	b510      	push	{r4, lr}
}
   b6d04:	210c      	movs	r1, #12
JsonReference::~JsonReference() {
   b6d06:	4604      	mov	r4, r0
}
   b6d08:	f7fd f9cb 	bl	b40a2 <_ZdlPvj>
   b6d0c:	4620      	mov	r0, r4
   b6d0e:	bd10      	pop	{r4, pc}

000b6d10 <_ZN10JsonBufferD1Ev>:
JsonBuffer::~JsonBuffer() {
   b6d10:	b510      	push	{r4, lr}
   b6d12:	4b05      	ldr	r3, [pc, #20]	; (b6d28 <_ZN10JsonBufferD1Ev+0x18>)
   b6d14:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b6d16:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b6d18:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b6d1a:	b91b      	cbnz	r3, b6d24 <_ZN10JsonBufferD1Ev+0x14>
   b6d1c:	6840      	ldr	r0, [r0, #4]
   b6d1e:	b108      	cbz	r0, b6d24 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b6d20:	f000 ff18 	bl	b7b54 <free>
}
   b6d24:	4620      	mov	r0, r4
   b6d26:	bd10      	pop	{r4, pc}
   b6d28:	000bd734 	.word	0x000bd734

000b6d2c <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b6d2c:	b510      	push	{r4, lr}
   b6d2e:	4604      	mov	r4, r0
}
   b6d30:	f7ff ffee 	bl	b6d10 <_ZN10JsonBufferD1Ev>
   b6d34:	4620      	mov	r0, r4
   b6d36:	2114      	movs	r1, #20
   b6d38:	f7fd f9b3 	bl	b40a2 <_ZdlPvj>
   b6d3c:	4620      	mov	r0, r4
   b6d3e:	bd10      	pop	{r4, pc}

000b6d40 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b6d40:	b510      	push	{r4, lr}
   b6d42:	4b07      	ldr	r3, [pc, #28]	; (b6d60 <_ZN10JsonParserD1Ev+0x20>)
   b6d44:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b6d46:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b6d48:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b6d4a:	b91b      	cbnz	r3, b6d54 <_ZN10JsonParserD1Ev+0x14>
   b6d4c:	6940      	ldr	r0, [r0, #20]
   b6d4e:	b108      	cbz	r0, b6d54 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b6d50:	f000 ff00 	bl	b7b54 <free>
JsonParser::~JsonParser() {
   b6d54:	4620      	mov	r0, r4
   b6d56:	f7ff ffdb 	bl	b6d10 <_ZN10JsonBufferD1Ev>
}
   b6d5a:	4620      	mov	r0, r4
   b6d5c:	bd10      	pop	{r4, pc}
   b6d5e:	bf00      	nop
   b6d60:	000bd744 	.word	0x000bd744

000b6d64 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b6d64:	b510      	push	{r4, lr}
   b6d66:	4604      	mov	r4, r0
}
   b6d68:	f7ff ffea 	bl	b6d40 <_ZN10JsonParserD1Ev>
   b6d6c:	4620      	mov	r0, r4
   b6d6e:	212c      	movs	r1, #44	; 0x2c
   b6d70:	f7fd f997 	bl	b40a2 <_ZdlPvj>
   b6d74:	4620      	mov	r0, r4
   b6d76:	bd10      	pop	{r4, pc}

000b6d78 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b6d78:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b6d7a:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b6d7c:	4604      	mov	r4, r0
   b6d7e:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b6d80:	b10b      	cbz	r3, b6d86 <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b6d82:	2000      	movs	r0, #0
}
   b6d84:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b6d86:	6840      	ldr	r0, [r0, #4]
   b6d88:	b138      	cbz	r0, b6d9a <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b6d8a:	f000 feeb 	bl	b7b64 <realloc>
		if (newBuffer) {
   b6d8e:	2800      	cmp	r0, #0
   b6d90:	d0f7      	beq.n	b6d82 <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b6d92:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b6d96:	2001      	movs	r0, #1
   b6d98:	e7f4      	b.n	b6d84 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b6d9a:	4608      	mov	r0, r1
   b6d9c:	f000 fed2 	bl	b7b44 <malloc>
   b6da0:	e7f5      	b.n	b6d8e <_ZN10JsonBuffer8allocateEj+0x16>

000b6da2 <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b6da2:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b6da4:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b6da6:	460e      	mov	r6, r1
   b6da8:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b6daa:	18d1      	adds	r1, r2, r3
   b6dac:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b6dae:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b6db0:	b172      	cbz	r2, b6dd0 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b6db2:	6882      	ldr	r2, [r0, #8]
   b6db4:	428a      	cmp	r2, r1
   b6db6:	d30b      	bcc.n	b6dd0 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b6db8:	6860      	ldr	r0, [r4, #4]
   b6dba:	68e3      	ldr	r3, [r4, #12]
   b6dbc:	462a      	mov	r2, r5
   b6dbe:	4631      	mov	r1, r6
   b6dc0:	4418      	add	r0, r3
   b6dc2:	f004 f9c9 	bl	bb158 <memcpy>
	offset += dataLen;
   b6dc6:	68e2      	ldr	r2, [r4, #12]
   b6dc8:	442a      	add	r2, r5
   b6dca:	60e2      	str	r2, [r4, #12]
	return true;
   b6dcc:	2001      	movs	r0, #1
}
   b6dce:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b6dd0:	4620      	mov	r0, r4
   b6dd2:	f7ff ffd1 	bl	b6d78 <_ZN10JsonBuffer8allocateEj>
   b6dd6:	2800      	cmp	r0, #0
   b6dd8:	d1ee      	bne.n	b6db8 <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b6dda:	e7f8      	b.n	b6dce <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b6ddc <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b6ddc:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b6dde:	2100      	movs	r1, #0
   b6de0:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b6de2:	b123      	cbz	r3, b6dee <_ZN10JsonBuffer5clearEv+0x12>
   b6de4:	6882      	ldr	r2, [r0, #8]
   b6de6:	b112      	cbz	r2, b6dee <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b6de8:	4618      	mov	r0, r3
   b6dea:	f004 b9dd 	b.w	bb1a8 <memset>
}
   b6dee:	4770      	bx	lr

000b6df0 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b6df0:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b6df2:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b6df6:	2200      	movs	r2, #0
   b6df8:	60c2      	str	r2, [r0, #12]
   b6dfa:	2201      	movs	r2, #1
   b6dfc:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b6dfe:	6143      	str	r3, [r0, #20]
   b6e00:	4a02      	ldr	r2, [pc, #8]	; (b6e0c <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b6e02:	9b02      	ldr	r3, [sp, #8]
   b6e04:	6002      	str	r2, [r0, #0]
   b6e06:	61c3      	str	r3, [r0, #28]
}
   b6e08:	bd10      	pop	{r4, pc}
   b6e0a:	bf00      	nop
   b6e0c:	000bd744 	.word	0x000bd744

000b6e10 <_ZNK10JsonParser12getReferenceEv>:
	if (tokens < tokensEnd) {
   b6e10:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   b6e14:	429a      	cmp	r2, r3
   b6e16:	4b04      	ldr	r3, [pc, #16]	; (b6e28 <_ZNK10JsonParser12getReferenceEv+0x18>)

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b6e18:	bf38      	it	cc
   b6e1a:	6082      	strcc	r2, [r0, #8]
   b6e1c:	e9c0 3100 	strd	r3, r1, [r0]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b6e20:	bf24      	itt	cs
   b6e22:	2300      	movcs	r3, #0
   b6e24:	6083      	strcs	r3, [r0, #8]
}
   b6e26:	4770      	bx	lr
   b6e28:	000bd754 	.word	0x000bd754

000b6e2c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b6e2c:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b6e2e:	6813      	ldr	r3, [r2, #0]
   b6e30:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b6e32:	6813      	ldr	r3, [r2, #0]
   b6e34:	f103 0410 	add.w	r4, r3, #16
   b6e38:	6014      	str	r4, [r2, #0]
   b6e3a:	6986      	ldr	r6, [r0, #24]
   b6e3c:	42b4      	cmp	r4, r6
   b6e3e:	d20a      	bcs.n	b6e56 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b6e40:	699b      	ldr	r3, [r3, #24]
   b6e42:	688c      	ldr	r4, [r1, #8]
   b6e44:	42a3      	cmp	r3, r4
   b6e46:	da01      	bge.n	b6e4c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b6e48:	42ab      	cmp	r3, r5
   b6e4a:	ddf2      	ble.n	b6e32 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b6e4c:	42a3      	cmp	r3, r4
   b6e4e:	bfcc      	ite	gt
   b6e50:	2000      	movgt	r0, #0
   b6e52:	2001      	movle	r0, #1
   b6e54:	e000      	b.n	b6e58 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b6e56:	2000      	movs	r0, #0
}
   b6e58:	bd70      	pop	{r4, r5, r6, pc}

000b6e5a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b6e5a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6e5e:	9d08      	ldr	r5, [sp, #32]
   b6e60:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b6e62:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b6e66:	4604      	mov	r4, r0
   b6e68:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b6e6a:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b6e6c:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b6e6e:	9801      	ldr	r0, [sp, #4]
   b6e70:	69a3      	ldr	r3, [r4, #24]
   b6e72:	4283      	cmp	r3, r0
   b6e74:	d91a      	bls.n	b6eac <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b6e76:	6882      	ldr	r2, [r0, #8]
   b6e78:	688b      	ldr	r3, [r1, #8]
   b6e7a:	429a      	cmp	r2, r3
   b6e7c:	da16      	bge.n	b6eac <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b6e7e:	42ae      	cmp	r6, r5
   b6e80:	d10b      	bne.n	b6e9a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b6e82:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b6e84:	aa01      	add	r2, sp, #4
   b6e86:	4620      	mov	r0, r4
   b6e88:	f7ff ffd0 	bl	b6e2c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b6e8c:	b128      	cbz	r0, b6e9a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b6e8e:	9b01      	ldr	r3, [sp, #4]
   b6e90:	f8c8 3000 	str.w	r3, [r8]
}
   b6e94:	b002      	add	sp, #8
   b6e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b6e9a:	aa01      	add	r2, sp, #4
   b6e9c:	4620      	mov	r0, r4
   b6e9e:	f7ff ffc5 	bl	b6e2c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b6ea2:	4620      	mov	r0, r4
		index++;
   b6ea4:	3601      	adds	r6, #1
		skipObject(container, token);
   b6ea6:	f7ff ffc1 	bl	b6e2c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b6eaa:	e7e0      	b.n	b6e6e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b6eac:	2000      	movs	r0, #0
   b6eae:	e7f1      	b.n	b6e94 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b6eb0 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>:
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b6eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6eb2:	461f      	mov	r7, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b6eb4:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b6eb8:	4604      	mov	r4, r0
   b6eba:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b6ebc:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b6ebe:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b6ec0:	9b01      	ldr	r3, [sp, #4]
   b6ec2:	69a2      	ldr	r2, [r4, #24]
   b6ec4:	429a      	cmp	r2, r3
   b6ec6:	d90f      	bls.n	b6ee8 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
   b6ec8:	6898      	ldr	r0, [r3, #8]
   b6eca:	688a      	ldr	r2, [r1, #8]
   b6ecc:	4290      	cmp	r0, r2
   b6ece:	da0b      	bge.n	b6ee8 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
		if (desiredIndex == index) {
   b6ed0:	42b5      	cmp	r5, r6
   b6ed2:	d103      	bne.n	b6edc <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x2c>
			value = token;
   b6ed4:	603b      	str	r3, [r7, #0]
			return true;
   b6ed6:	2001      	movs	r0, #1
}
   b6ed8:	b003      	add	sp, #12
   b6eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		skipObject(container, token);
   b6edc:	aa01      	add	r2, sp, #4
   b6ede:	4620      	mov	r0, r4
		index++;
   b6ee0:	3501      	adds	r5, #1
		skipObject(container, token);
   b6ee2:	f7ff ffa3 	bl	b6e2c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b6ee6:	e7eb      	b.n	b6ec0 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x10>
	return false;
   b6ee8:	2000      	movs	r0, #0
   b6eea:	e7f5      	b.n	b6ed8 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x28>

000b6eec <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
   b6eec:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b6eee:	3b01      	subs	r3, #1
   b6ef0:	2400      	movs	r4, #0
   b6ef2:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
   b6ef6:	1bf6      	subs	r6, r6, r7
   b6ef8:	42a6      	cmp	r6, r4
   b6efa:	dd08      	ble.n	b6f0e <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
   b6efc:	42a3      	cmp	r3, r4
   b6efe:	dd06      	ble.n	b6f0e <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
   b6f00:	6845      	ldr	r5, [r0, #4]
   b6f02:	443d      	add	r5, r7
   b6f04:	5d2d      	ldrb	r5, [r5, r4]
   b6f06:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b6f0a:	3401      	adds	r4, #1
   b6f0c:	e7f1      	b.n	b6ef2 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
   b6f0e:	2300      	movs	r3, #0
   b6f10:	7013      	strb	r3, [r2, #0]
}
   b6f12:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6f14 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
   b6f14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6f16:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b6f18:	2310      	movs	r3, #16
   b6f1a:	466a      	mov	r2, sp
   b6f1c:	f7ff ffe6 	bl	b6eec <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
   b6f20:	4904      	ldr	r1, [pc, #16]	; (b6f34 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
   b6f22:	4622      	mov	r2, r4
   b6f24:	4668      	mov	r0, sp
   b6f26:	f000 fe25 	bl	b7b74 <sscanf>
}
   b6f2a:	1e43      	subs	r3, r0, #1
   b6f2c:	4258      	negs	r0, r3
   b6f2e:	4158      	adcs	r0, r3
   b6f30:	b004      	add	sp, #16
   b6f32:	bd10      	pop	{r4, pc}
   b6f34:	000bda08 	.word	0x000bda08

000b6f38 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, float &result) const {
   b6f38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6f3a:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b6f3c:	2310      	movs	r3, #16
   b6f3e:	466a      	mov	r2, sp
   b6f40:	f7ff ffd4 	bl	b6eec <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	result = strtof(tmp, 0);
   b6f44:	4668      	mov	r0, sp
   b6f46:	2100      	movs	r1, #0
   b6f48:	f004 ffd8 	bl	bbefc <strtof>
}
   b6f4c:	2001      	movs	r0, #1
	result = strtof(tmp, 0);
   b6f4e:	ed84 0a00 	vstr	s0, [r4]
}
   b6f52:	b004      	add	sp, #16
   b6f54:	bd10      	pop	{r4, pc}
	...

000b6f58 <_ZNK13JsonReference5indexEj>:
	else {
		return JsonReference(parser);
	}
}

JsonReference JsonReference::index(size_t index) const {
   b6f58:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6f5a:	460d      	mov	r5, r1
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b6f5c:	6889      	ldr	r1, [r1, #8]
   b6f5e:	4e0a      	ldr	r6, [pc, #40]	; (b6f88 <_ZNK13JsonReference5indexEj+0x30>)
JsonReference JsonReference::index(size_t index) const {
   b6f60:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b6f62:	b161      	cbz	r1, b6f7e <_ZNK13JsonReference5indexEj+0x26>
   b6f64:	6868      	ldr	r0, [r5, #4]
   b6f66:	ab01      	add	r3, sp, #4
   b6f68:	f7ff ffa2 	bl	b6eb0 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>
   b6f6c:	b138      	cbz	r0, b6f7e <_ZNK13JsonReference5indexEj+0x26>
		return JsonReference(parser, newToken);
   b6f6e:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b6f70:	e9c4 6300 	strd	r6, r3, [r4]
   b6f74:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b6f76:	60a3      	str	r3, [r4, #8]
	}
	else {
		return JsonReference(parser);
	}
}
   b6f78:	4620      	mov	r0, r4
   b6f7a:	b002      	add	sp, #8
   b6f7c:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b6f7e:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b6f80:	e9c4 6300 	strd	r6, r3, [r4]
   b6f84:	2300      	movs	r3, #0
   b6f86:	e7f6      	b.n	b6f76 <_ZNK13JsonReference5indexEj+0x1e>
   b6f88:	000bd754 	.word	0x000bd754

000b6f8c <_ZNK13JsonReference8valueIntEi>:
bool JsonReference::valueBool(bool result) const {
	(void) value(result);
	return result;
}

int JsonReference::valueInt(int result) const {
   b6f8c:	b507      	push	{r0, r1, r2, lr}
   b6f8e:	9101      	str	r1, [sp, #4]
	 * There are also type-specific versions like valueBool that return the value, instead of having to pass an object
	 * to hold the value, as in this call.
	 */
	template<class T>
	bool value(T &result) const {
		if (token && parser->getTokenValue(token, result)) {
   b6f90:	6881      	ldr	r1, [r0, #8]
   b6f92:	b119      	cbz	r1, b6f9c <_ZNK13JsonReference8valueIntEi+0x10>
   b6f94:	6840      	ldr	r0, [r0, #4]
   b6f96:	aa01      	add	r2, sp, #4
   b6f98:	f7ff ffbc 	bl	b6f14 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
	(void) value(result);
	return result;
}
   b6f9c:	9801      	ldr	r0, [sp, #4]
   b6f9e:	b003      	add	sp, #12
   b6fa0:	f85d fb04 	ldr.w	pc, [sp], #4

000b6fa4 <_ZNK13JsonReference10valueFloatEf>:
unsigned long JsonReference::valueUnsignedLong(unsigned long result) const {
	(void) value(result);
	return result;
}

float JsonReference::valueFloat(float result) const {
   b6fa4:	b507      	push	{r0, r1, r2, lr}
   b6fa6:	6881      	ldr	r1, [r0, #8]
   b6fa8:	ed8d 0a01 	vstr	s0, [sp, #4]
   b6fac:	b119      	cbz	r1, b6fb6 <_ZNK13JsonReference10valueFloatEf+0x12>
   b6fae:	6840      	ldr	r0, [r0, #4]
   b6fb0:	aa01      	add	r2, sp, #4
   b6fb2:	f7ff ffc1 	bl	b6f38 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>
	(void) value(result);
	return result;
}
   b6fb6:	ed9d 0a01 	vldr	s0, [sp, #4]
   b6fba:	b003      	add	sp, #12
   b6fbc:	f85d fb04 	ldr.w	pc, [sp], #4

000b6fc0 <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   b6fc0:	b510      	push	{r4, lr}
   b6fc2:	4604      	mov	r4, r0
	if (str) {
   b6fc4:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b6fc6:	460b      	mov	r3, r1
	if (str) {
   b6fc8:	b128      	cbz	r0, b6fd6 <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b6fca:	f002 fb07 	bl	b95dc <_ZN6String6concatEc>
	}
	else {
		if (buf && length < (bufLen - 1)) {
			buf[length] = ch;
		}
		length++;
   b6fce:	68e3      	ldr	r3, [r4, #12]
   b6fd0:	3301      	adds	r3, #1
   b6fd2:	60e3      	str	r3, [r4, #12]
	}
}
   b6fd4:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b6fd6:	6860      	ldr	r0, [r4, #4]
   b6fd8:	2800      	cmp	r0, #0
   b6fda:	d0f8      	beq.n	b6fce <_ZN16JsonParserString6appendEc+0xe>
   b6fdc:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b6fe0:	3a01      	subs	r2, #1
   b6fe2:	428a      	cmp	r2, r1
			buf[length] = ch;
   b6fe4:	bf88      	it	hi
   b6fe6:	5443      	strbhi	r3, [r0, r1]
   b6fe8:	e7f1      	b.n	b6fce <_ZN16JsonParserString6appendEc+0xe>

000b6fea <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b6fea:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b6fec:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b6fee:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6ff0:	4608      	mov	r0, r1
		str.append((char)unicode);
   b6ff2:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b6ff4:	d804      	bhi.n	b7000 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b6ff6:	b003      	add	sp, #12
   b6ff8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b6ffc:	f7ff bfe0 	b.w	b6fc0 <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b7000:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b7004:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b7008:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b700c:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b7010:	d207      	bcs.n	b7022 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b7012:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b7016:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b7018:	f7ff ffd2 	bl	b6fc0 <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b701c:	9801      	ldr	r0, [sp, #4]
   b701e:	4621      	mov	r1, r4
   b7020:	e7e9      	b.n	b6ff6 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b7022:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b7024:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b7028:	9001      	str	r0, [sp, #4]
   b702a:	f7ff ffc9 	bl	b6fc0 <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b702e:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b7032:	9801      	ldr	r0, [sp, #4]
   b7034:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b7038:	e7ee      	b.n	b7018 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>
	...

000b703c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b703c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b7040:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b7042:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b7044:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b7114 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b7048:	4680      	mov	r8, r0
   b704a:	460f      	mov	r7, r1
   b704c:	4615      	mov	r5, r2
			escape = false;
   b704e:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b7050:	68b8      	ldr	r0, [r7, #8]
   b7052:	42b0      	cmp	r0, r6
   b7054:	dd5a      	ble.n	b710c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b7056:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b705a:	5d99      	ldrb	r1, [r3, r6]
   b705c:	199a      	adds	r2, r3, r6
		if (escape) {
   b705e:	2c00      	cmp	r4, #0
   b7060:	d04b      	beq.n	b70fa <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b7062:	2975      	cmp	r1, #117	; 0x75
   b7064:	d805      	bhi.n	b7072 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b7066:	296d      	cmp	r1, #109	; 0x6d
   b7068:	d807      	bhi.n	b707a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b706a:	2962      	cmp	r1, #98	; 0x62
   b706c:	d01e      	beq.n	b70ac <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b706e:	2966      	cmp	r1, #102	; 0x66
   b7070:	d01e      	beq.n	b70b0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b7072:	4628      	mov	r0, r5
   b7074:	f7ff ffa4 	bl	b6fc0 <_ZN16JsonParserString6appendEc>
				break;
   b7078:	e03d      	b.n	b70f6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b707a:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b707e:	2c07      	cmp	r4, #7
   b7080:	d8f7      	bhi.n	b7072 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b7082:	f20f 0c08 	addw	ip, pc, #8
   b7086:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b708a:	bf00      	nop
   b708c:	000b70b5 	.word	0x000b70b5
   b7090:	000b7073 	.word	0x000b7073
   b7094:	000b7073 	.word	0x000b7073
   b7098:	000b7073 	.word	0x000b7073
   b709c:	000b70b9 	.word	0x000b70b9
   b70a0:	000b7073 	.word	0x000b7073
   b70a4:	000b70bd 	.word	0x000b70bd
   b70a8:	000b70c1 	.word	0x000b70c1
				str.append('\b');
   b70ac:	2108      	movs	r1, #8
   b70ae:	e7e0      	b.n	b7072 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b70b0:	210c      	movs	r1, #12
   b70b2:	e7de      	b.n	b7072 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b70b4:	210a      	movs	r1, #10
   b70b6:	e7dc      	b.n	b7072 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b70b8:	210d      	movs	r1, #13
   b70ba:	e7da      	b.n	b7072 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b70bc:	2109      	movs	r1, #9
   b70be:	e7d8      	b.n	b7072 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b70c0:	1d31      	adds	r1, r6, #4
   b70c2:	4288      	cmp	r0, r1
   b70c4:	dd17      	ble.n	b70f6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b70c6:	a902      	add	r1, sp, #8
   b70c8:	3304      	adds	r3, #4
   b70ca:	4433      	add	r3, r6
   b70cc:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b70ce:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b70d2:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b70d6:	429a      	cmp	r2, r3
   b70d8:	d1f9      	bne.n	b70ce <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b70da:	aa01      	add	r2, sp, #4
   b70dc:	4651      	mov	r1, sl
					tmp[4] = 0;
   b70de:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b70e2:	f000 fd47 	bl	b7b74 <sscanf>
   b70e6:	2801      	cmp	r0, #1
   b70e8:	d105      	bne.n	b70f6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b70ea:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b70ee:	4629      	mov	r1, r5
   b70f0:	f7ff ff7b 	bl	b6fea <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b70f4:	3605      	adds	r6, #5
			escape = false;
   b70f6:	2400      	movs	r4, #0
   b70f8:	e004      	b.n	b7104 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b70fa:	295c      	cmp	r1, #92	; 0x5c
   b70fc:	d004      	beq.n	b7108 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b70fe:	4628      	mov	r0, r5
   b7100:	f7ff ff5e 	bl	b6fc0 <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b7104:	3601      	adds	r6, #1
   b7106:	e7a3      	b.n	b7050 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b7108:	2401      	movs	r4, #1
   b710a:	e7fb      	b.n	b7104 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b710c:	2001      	movs	r0, #1
   b710e:	b004      	add	sp, #16
   b7110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7114:	000bd727 	.word	0x000bd727

000b7118 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b7118:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b711a:	460c      	mov	r4, r1
   b711c:	4606      	mov	r6, r0
	result = "";
   b711e:	490c      	ldr	r1, [pc, #48]	; (b7150 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b7120:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b7122:	4615      	mov	r5, r2
	result = "";
   b7124:	f002 fa1a 	bl	b955c <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b7128:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b712c:	1ac9      	subs	r1, r1, r3
   b712e:	3101      	adds	r1, #1
   b7130:	4628      	mov	r0, r5
   b7132:	f002 f9c3 	bl	b94bc <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b7136:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b7138:	466a      	mov	r2, sp
   b713a:	4621      	mov	r1, r4
   b713c:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b713e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b7142:	9500      	str	r5, [sp, #0]
   b7144:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b7146:	f7ff ff79 	bl	b703c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b714a:	b004      	add	sp, #16
   b714c:	bd70      	pop	{r4, r5, r6, pc}
   b714e:	bf00      	nop
   b7150:	000bd726 	.word	0x000bd726

000b7154 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b7154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7158:	b089      	sub	sp, #36	; 0x24
   b715a:	4605      	mov	r5, r0
   b715c:	4688      	mov	r8, r1
	String keyName;
   b715e:	a804      	add	r0, sp, #16
   b7160:	4912      	ldr	r1, [pc, #72]	; (b71ac <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b7162:	4616      	mov	r6, r2
   b7164:	4699      	mov	r9, r3
	String keyName;
   b7166:	f002 f9d6 	bl	b9516 <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b716a:	2700      	movs	r7, #0
   b716c:	9700      	str	r7, [sp, #0]
   b716e:	464b      	mov	r3, r9
   b7170:	aa03      	add	r2, sp, #12
   b7172:	4641      	mov	r1, r8
   b7174:	4628      	mov	r0, r5
   b7176:	f7ff fe70 	bl	b6e5a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b717a:	4604      	mov	r4, r0
   b717c:	b170      	cbz	r0, b719c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b717e:	9903      	ldr	r1, [sp, #12]
   b7180:	aa04      	add	r2, sp, #16
   b7182:	4628      	mov	r0, r5
   b7184:	f7ff ffc8 	bl	b7118 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b7188:	4604      	mov	r4, r0
   b718a:	b908      	cbnz	r0, b7190 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b718c:	3701      	adds	r7, #1
   b718e:	e7ed      	b.n	b716c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b7190:	4631      	mov	r1, r6
   b7192:	a804      	add	r0, sp, #16
   b7194:	f002 fa3b 	bl	b960e <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b7198:	2800      	cmp	r0, #0
   b719a:	d0f7      	beq.n	b718c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b719c:	a804      	add	r0, sp, #16
   b719e:	f002 f96f 	bl	b9480 <_ZN6StringD1Ev>
}
   b71a2:	4620      	mov	r0, r4
   b71a4:	b009      	add	sp, #36	; 0x24
   b71a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b71aa:	bf00      	nop
   b71ac:	000bd726 	.word	0x000bd726

000b71b0 <_ZNK13JsonReference3keyEPKc>:
JsonReference JsonReference::key(const char *name) const {
   b71b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b71b2:	460d      	mov	r5, r1
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b71b4:	6889      	ldr	r1, [r1, #8]
   b71b6:	4e0a      	ldr	r6, [pc, #40]	; (b71e0 <_ZNK13JsonReference3keyEPKc+0x30>)
JsonReference JsonReference::key(const char *name) const {
   b71b8:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b71ba:	b161      	cbz	r1, b71d6 <_ZNK13JsonReference3keyEPKc+0x26>
   b71bc:	6868      	ldr	r0, [r5, #4]
   b71be:	ab01      	add	r3, sp, #4
   b71c0:	f7ff ffc8 	bl	b7154 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b71c4:	b138      	cbz	r0, b71d6 <_ZNK13JsonReference3keyEPKc+0x26>
		return JsonReference(parser, newToken);
   b71c6:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b71c8:	e9c4 6300 	strd	r6, r3, [r4]
   b71cc:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b71ce:	60a3      	str	r3, [r4, #8]
}
   b71d0:	4620      	mov	r0, r4
   b71d2:	b002      	add	sp, #8
   b71d4:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b71d6:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b71d8:	e9c4 6300 	strd	r6, r3, [r4]
   b71dc:	2300      	movs	r3, #0
   b71de:	e7f6      	b.n	b71ce <_ZNK13JsonReference3keyEPKc+0x1e>
   b71e0:	000bd754 	.word	0x000bd754

000b71e4 <_ZNK13JsonReference11valueStringEv>:
String JsonReference::valueString() const {
   b71e4:	b538      	push	{r3, r4, r5, lr}
   b71e6:	460d      	mov	r5, r1
	String result;
   b71e8:	4905      	ldr	r1, [pc, #20]	; (b7200 <_ZNK13JsonReference11valueStringEv+0x1c>)
String JsonReference::valueString() const {
   b71ea:	4604      	mov	r4, r0
	String result;
   b71ec:	f002 f993 	bl	b9516 <_ZN6StringC1EPK19__FlashStringHelper>
   b71f0:	68a9      	ldr	r1, [r5, #8]
   b71f2:	b119      	cbz	r1, b71fc <_ZNK13JsonReference11valueStringEv+0x18>
   b71f4:	6868      	ldr	r0, [r5, #4]
   b71f6:	4622      	mov	r2, r4
   b71f8:	f7ff ff8e 	bl	b7118 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
}
   b71fc:	4620      	mov	r0, r4
   b71fe:	bd38      	pop	{r3, r4, r5, pc}
   b7200:	000bd726 	.word	0x000bd726

000b7204 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b7204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b7208:	6844      	ldr	r4, [r0, #4]
   b720a:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b720e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b7212:	f8d0 e000 	ldr.w	lr, [r0]
   b7216:	4596      	cmp	lr, r2
   b7218:	f080 81b9 	bcs.w	b758e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b721c:	f811 800e 	ldrb.w	r8, [r1, lr]
   b7220:	f1b8 0f00 	cmp.w	r8, #0
   b7224:	f000 81b3 	beq.w	b758e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b7228:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b722c:	f000 8098 	beq.w	b7360 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b7230:	d833      	bhi.n	b729a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b7232:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b7236:	f000 80a6 	beq.w	b7386 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b723a:	d810      	bhi.n	b725e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b723c:	f1a8 0809 	sub.w	r8, r8, #9
   b7240:	fa5f f888 	uxtb.w	r8, r8
   b7244:	f1b8 0f17 	cmp.w	r8, #23
   b7248:	d80d      	bhi.n	b7266 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b724a:	4d9f      	ldr	r5, [pc, #636]	; (b74c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b724c:	fa0c f808 	lsl.w	r8, ip, r8
   b7250:	ea18 0f05 	tst.w	r8, r5
   b7254:	d007      	beq.n	b7266 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b7256:	6805      	ldr	r5, [r0, #0]
   b7258:	3501      	adds	r5, #1
   b725a:	6005      	str	r5, [r0, #0]
   b725c:	e7d9      	b.n	b7212 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b725e:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b7262:	f000 8133 	beq.w	b74cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b7266:	f8d0 8000 	ldr.w	r8, [r0]
   b726a:	4542      	cmp	r2, r8
   b726c:	d90e      	bls.n	b728c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b726e:	f811 5008 	ldrb.w	r5, [r1, r8]
   b7272:	b15d      	cbz	r5, b728c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b7274:	2d3a      	cmp	r5, #58	; 0x3a
   b7276:	f200 8169 	bhi.w	b754c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b727a:	2d1f      	cmp	r5, #31
   b727c:	f200 8151 	bhi.w	b7522 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b7280:	2d0a      	cmp	r5, #10
   b7282:	f200 8160 	bhi.w	b7546 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b7286:	2d08      	cmp	r5, #8
   b7288:	f240 8156 	bls.w	b7538 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b728c:	2b00      	cmp	r3, #0
   b728e:	f040 8162 	bne.w	b7556 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b7292:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b7296:	6005      	str	r5, [r0, #0]
   b7298:	e0a5      	b.n	b73e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b729a:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b729e:	d037      	beq.n	b7310 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b72a0:	d82e      	bhi.n	b7300 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b72a2:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b72a6:	d033      	beq.n	b7310 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b72a8:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b72ac:	d1db      	bne.n	b7266 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b72ae:	2b00      	cmp	r3, #0
   b72b0:	d0d1      	beq.n	b7256 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b72b2:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b72b6:	6845      	ldr	r5, [r0, #4]
   b72b8:	3d01      	subs	r5, #1
   b72ba:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b72be:	2d00      	cmp	r5, #0
   b72c0:	db55      	blt.n	b736e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b72c2:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b72c6:	3701      	adds	r7, #1
   b72c8:	d04d      	beq.n	b7366 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b72ca:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b72ce:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b72d2:	d148      	bne.n	b7366 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b72d4:	f898 b000 	ldrb.w	fp, [r8]
   b72d8:	45cb      	cmp	fp, r9
   b72da:	d14b      	bne.n	b7374 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b72dc:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b72e0:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b72e4:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b72e8:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b72ec:	f8de 7004 	ldr.w	r7, [lr, #4]
   b72f0:	3701      	adds	r7, #1
   b72f2:	d042      	beq.n	b737a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b72f4:	f8de 7008 	ldr.w	r7, [lr, #8]
   b72f8:	3701      	adds	r7, #1
   b72fa:	d13e      	bne.n	b737a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b72fc:	6085      	str	r5, [r0, #8]
				break;
   b72fe:	e7aa      	b.n	b7256 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b7300:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b7304:	d1af      	bne.n	b7266 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b7306:	2b00      	cmp	r3, #0
   b7308:	d0a5      	beq.n	b7256 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b730a:	f04f 0901 	mov.w	r9, #1
   b730e:	e7d2      	b.n	b72b6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b7310:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b7312:	2b00      	cmp	r3, #0
   b7314:	d09f      	beq.n	b7256 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b7316:	6845      	ldr	r5, [r0, #4]
   b7318:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b731a:	42af      	cmp	r7, r5
   b731c:	d94a      	bls.n	b73b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b731e:	f105 0e01 	add.w	lr, r5, #1
   b7322:	f8c0 e004 	str.w	lr, [r0, #4]
   b7326:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b732a:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b732e:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b7332:	2500      	movs	r5, #0
   b7334:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b7338:	6885      	ldr	r5, [r0, #8]
   b733a:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b733c:	bf1f      	itttt	ne
   b733e:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b7342:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b7346:	3501      	addne	r5, #1
   b7348:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b734c:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b7350:	bf0c      	ite	eq
   b7352:	2501      	moveq	r5, #1
   b7354:	2502      	movne	r5, #2
   b7356:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b735a:	6805      	ldr	r5, [r0, #0]
   b735c:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b7360:	6845      	ldr	r5, [r0, #4]
   b7362:	3d01      	subs	r5, #1
   b7364:	e7ca      	b.n	b72fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b7366:	3d01      	subs	r5, #1
   b7368:	f1a8 0810 	sub.w	r8, r8, #16
   b736c:	e7a7      	b.n	b72be <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b736e:	3501      	adds	r5, #1
   b7370:	f47f af71 	bne.w	b7256 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b7374:	f06f 0401 	mvn.w	r4, #1
   b7378:	e01e      	b.n	b73b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b737a:	3d01      	subs	r5, #1
   b737c:	1c6f      	adds	r7, r5, #1
   b737e:	f1ae 0e10 	sub.w	lr, lr, #16
   b7382:	d1b3      	bne.n	b72ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b7384:	e767      	b.n	b7256 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b7386:	f10e 0901 	add.w	r9, lr, #1
   b738a:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b738e:	f8d0 8000 	ldr.w	r8, [r0]
   b7392:	4542      	cmp	r2, r8
   b7394:	f240 8093 	bls.w	b74be <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b7398:	f811 5008 	ldrb.w	r5, [r1, r8]
   b739c:	2d00      	cmp	r5, #0
   b739e:	f000 808e 	beq.w	b74be <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b73a2:	2d22      	cmp	r5, #34	; 0x22
   b73a4:	d130      	bne.n	b7408 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b73a6:	b1f3      	cbz	r3, b73e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b73a8:	6845      	ldr	r5, [r0, #4]
   b73aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b73ac:	42af      	cmp	r7, r5
   b73ae:	d806      	bhi.n	b73be <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b73b0:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b73b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b73b8:	4620      	mov	r0, r4
   b73ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b73be:	f105 0e01 	add.w	lr, r5, #1
   b73c2:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b73c6:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b73ca:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b73ce:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b73d2:	2700      	movs	r7, #0
   b73d4:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b73d6:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b73da:	f04f 0a03 	mov.w	sl, #3
   b73de:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b73e2:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b73e6:	6885      	ldr	r5, [r0, #8]
   b73e8:	1c6f      	adds	r7, r5, #1
				count++;
   b73ea:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b73ee:	f43f af32 	beq.w	b7256 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b73f2:	2b00      	cmp	r3, #0
   b73f4:	f43f af2f 	beq.w	b7256 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b73f8:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b73fc:	f8de 500c 	ldr.w	r5, [lr, #12]
   b7400:	3501      	adds	r5, #1
   b7402:	f8ce 500c 	str.w	r5, [lr, #12]
   b7406:	e726      	b.n	b7256 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b7408:	2d5c      	cmp	r5, #92	; 0x5c
   b740a:	d111      	bne.n	b7430 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b740c:	f108 0501 	add.w	r5, r8, #1
   b7410:	42aa      	cmp	r2, r5
   b7412:	d90d      	bls.n	b7430 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b7414:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b7416:	5d4d      	ldrb	r5, [r1, r5]
   b7418:	2d75      	cmp	r5, #117	; 0x75
   b741a:	d82b      	bhi.n	b7474 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b741c:	2d6d      	cmp	r5, #109	; 0x6d
   b741e:	d80b      	bhi.n	b7438 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b7420:	2d66      	cmp	r5, #102	; 0x66
   b7422:	d827      	bhi.n	b7474 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b7424:	2d5b      	cmp	r5, #91	; 0x5b
   b7426:	d81d      	bhi.n	b7464 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b7428:	2d22      	cmp	r5, #34	; 0x22
   b742a:	d001      	beq.n	b7430 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b742c:	2d2f      	cmp	r5, #47	; 0x2f
   b742e:	d121      	bne.n	b7474 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b7430:	6805      	ldr	r5, [r0, #0]
   b7432:	3501      	adds	r5, #1
   b7434:	6005      	str	r5, [r0, #0]
   b7436:	e7aa      	b.n	b738e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b7438:	3d6e      	subs	r5, #110	; 0x6e
   b743a:	2d07      	cmp	r5, #7
   b743c:	d81a      	bhi.n	b7474 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b743e:	a701      	add	r7, pc, #4	; (adr r7, b7444 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b7440:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b7444:	000b7431 	.word	0x000b7431
   b7448:	000b7475 	.word	0x000b7475
   b744c:	000b7475 	.word	0x000b7475
   b7450:	000b7475 	.word	0x000b7475
   b7454:	000b7431 	.word	0x000b7431
   b7458:	000b7475 	.word	0x000b7475
   b745c:	000b7431 	.word	0x000b7431
   b7460:	000b747b 	.word	0x000b747b
   b7464:	3d5c      	subs	r5, #92	; 0x5c
   b7466:	b2ed      	uxtb	r5, r5
   b7468:	fa0c f505 	lsl.w	r5, ip, r5
   b746c:	f240 4741 	movw	r7, #1089	; 0x441
   b7470:	423d      	tst	r5, r7
   b7472:	d1dd      	bne.n	b7430 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b7474:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b7478:	e77c      	b.n	b7374 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b747a:	f108 0502 	add.w	r5, r8, #2
   b747e:	6005      	str	r5, [r0, #0]
   b7480:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b7484:	f8d0 8000 	ldr.w	r8, [r0]
   b7488:	4542      	cmp	r2, r8
   b748a:	d803      	bhi.n	b7494 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b748c:	6805      	ldr	r5, [r0, #0]
   b748e:	3d01      	subs	r5, #1
   b7490:	6005      	str	r5, [r0, #0]
					break;
   b7492:	e7cd      	b.n	b7430 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b7494:	f811 5008 	ldrb.w	r5, [r1, r8]
   b7498:	2d00      	cmp	r5, #0
   b749a:	d0f7      	beq.n	b748c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b749c:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b74a0:	f1bb 0f09 	cmp.w	fp, #9
   b74a4:	d904      	bls.n	b74b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b74a6:	f025 0520 	bic.w	r5, r5, #32
   b74aa:	3d41      	subs	r5, #65	; 0x41
   b74ac:	2d05      	cmp	r5, #5
   b74ae:	d8e1      	bhi.n	b7474 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b74b0:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b74b4:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b74b8:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b74ba:	d1e3      	bne.n	b7484 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b74bc:	e7e6      	b.n	b748c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b74be:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b74c2:	f06f 0402 	mvn.w	r4, #2
   b74c6:	e777      	b.n	b73b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b74c8:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b74cc:	2b00      	cmp	r3, #0
   b74ce:	f43f aec2 	beq.w	b7256 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b74d2:	6885      	ldr	r5, [r0, #8]
   b74d4:	1c6f      	adds	r7, r5, #1
   b74d6:	f43f aebe 	beq.w	b7256 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b74da:	012d      	lsls	r5, r5, #4
   b74dc:	5d5d      	ldrb	r5, [r3, r5]
   b74de:	3d01      	subs	r5, #1
   b74e0:	2d01      	cmp	r5, #1
   b74e2:	f67f aeb8 	bls.w	b7256 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b74e6:	6845      	ldr	r5, [r0, #4]
   b74e8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b74ec:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b74f0:	f1b8 0f00 	cmp.w	r8, #0
   b74f4:	f6ff aeaf 	blt.w	b7256 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b74f8:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b74fc:	3d01      	subs	r5, #1
   b74fe:	2d01      	cmp	r5, #1
   b7500:	d80a      	bhi.n	b7518 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b7502:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b7506:	3501      	adds	r5, #1
   b7508:	d006      	beq.n	b7518 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b750a:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b750e:	3501      	adds	r5, #1
   b7510:	d102      	bne.n	b7518 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b7512:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b7516:	e69e      	b.n	b7256 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b7518:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b751c:	f1ae 0e10 	sub.w	lr, lr, #16
   b7520:	e7e6      	b.n	b74f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b7522:	f1a5 0920 	sub.w	r9, r5, #32
   b7526:	4f24      	ldr	r7, [pc, #144]	; (b75b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b7528:	fa5f f989 	uxtb.w	r9, r9
   b752c:	fa0c f909 	lsl.w	r9, ip, r9
   b7530:	ea19 0f07 	tst.w	r9, r7
   b7534:	f47f aeaa 	bne.w	b728c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b7538:	3d20      	subs	r5, #32
   b753a:	2d5e      	cmp	r5, #94	; 0x5e
   b753c:	d89a      	bhi.n	b7474 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b753e:	f108 0501 	add.w	r5, r8, #1
   b7542:	6005      	str	r5, [r0, #0]
   b7544:	e68f      	b.n	b7266 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b7546:	2d0d      	cmp	r5, #13
   b7548:	d1f6      	bne.n	b7538 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b754a:	e69f      	b.n	b728c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b754c:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b7550:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b7554:	e7f8      	b.n	b7548 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b7556:	6845      	ldr	r5, [r0, #4]
   b7558:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b755a:	42af      	cmp	r7, r5
   b755c:	f67f af28 	bls.w	b73b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b7560:	f105 0801 	add.w	r8, r5, #1
   b7564:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b7568:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b756c:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b7570:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b7574:	2700      	movs	r7, #0
   b7576:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b7578:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b757c:	f04f 0a04 	mov.w	sl, #4
   b7580:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b7584:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b7588:	6805      	ldr	r5, [r0, #0]
   b758a:	3d01      	subs	r5, #1
   b758c:	e683      	b.n	b7296 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b758e:	2b00      	cmp	r3, #0
   b7590:	f43f af12 	beq.w	b73b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b7594:	6842      	ldr	r2, [r0, #4]
   b7596:	1e51      	subs	r1, r2, #1
   b7598:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b759c:	2900      	cmp	r1, #0
   b759e:	f6ff af0b 	blt.w	b73b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b75a2:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b75a6:	3201      	adds	r2, #1
   b75a8:	d003      	beq.n	b75b2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b75aa:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b75ae:	3201      	adds	r2, #1
   b75b0:	d087      	beq.n	b74c2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b75b2:	3901      	subs	r1, #1
   b75b4:	3b10      	subs	r3, #16
   b75b6:	e7f1      	b.n	b759c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b75b8:	04001001 	.word	0x04001001

000b75bc <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b75bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b75be:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b75c0:	4604      	mov	r4, r0
	if (offset == 0) {
   b75c2:	b912      	cbnz	r2, b75ca <_ZN10JsonParser5parseEv+0xe>
		return false;
   b75c4:	2000      	movs	r0, #0
}
   b75c6:	b003      	add	sp, #12
   b75c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b75ca:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b75cc:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b75d0:	b1ab      	cbz	r3, b75fe <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b75d2:	2100      	movs	r1, #0
	parser->toknext = 0;
   b75d4:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b75d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b75dc:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b75de:	69c1      	ldr	r1, [r0, #28]
   b75e0:	9100      	str	r1, [sp, #0]
   b75e2:	6841      	ldr	r1, [r0, #4]
   b75e4:	4630      	mov	r0, r6
   b75e6:	f7ff fe0d 	bl	b7204 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b75ea:	1c43      	adds	r3, r0, #1
   b75ec:	d128      	bne.n	b7640 <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b75ee:	7c25      	ldrb	r5, [r4, #16]
   b75f0:	2d00      	cmp	r5, #0
   b75f2:	d1e7      	bne.n	b75c4 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b75f4:	6960      	ldr	r0, [r4, #20]
   b75f6:	f000 faad 	bl	b7b54 <free>
			tokens = 0;
   b75fa:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b75fc:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b75fe:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b7600:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b7604:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b7608:	68e2      	ldr	r2, [r4, #12]
   b760a:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b760c:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b760e:	9500      	str	r5, [sp, #0]
   b7610:	462b      	mov	r3, r5
   b7612:	4630      	mov	r0, r6
   b7614:	f7ff fdf6 	bl	b7204 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b7618:	2800      	cmp	r0, #0
   b761a:	dbd3      	blt.n	b75c4 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b761c:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b761e:	d017      	beq.n	b7650 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b7620:	0100      	lsls	r0, r0, #4
   b7622:	f000 fa8f 	bl	b7b44 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b7626:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b7628:	6160      	str	r0, [r4, #20]
   b762a:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b762c:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b762e:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b7632:	68e2      	ldr	r2, [r4, #12]
   b7634:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b7636:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b7638:	4630      	mov	r0, r6
   b763a:	f7ff fde3 	bl	b7204 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b763e:	e001      	b.n	b7644 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b7640:	2800      	cmp	r0, #0
   b7642:	dbbf      	blt.n	b75c4 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b7644:	6963      	ldr	r3, [r4, #20]
   b7646:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b764a:	61a0      	str	r0, [r4, #24]
	return true;
   b764c:	2001      	movs	r0, #1
   b764e:	e7ba      	b.n	b75c6 <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b7650:	6963      	ldr	r3, [r4, #20]
   b7652:	61a3      	str	r3, [r4, #24]
   b7654:	e7fa      	b.n	b764c <_ZN10JsonParser5parseEv+0x90>
	...

000b7658 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   b7658:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b765a:	f000 f8af 	bl	b77bc <HAL_Pin_Map>
   b765e:	4b01      	ldr	r3, [pc, #4]	; (b7664 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b7660:	6018      	str	r0, [r3, #0]
}
   b7662:	bd08      	pop	{r3, pc}
   b7664:	2003e6b4 	.word	0x2003e6b4

000b7668 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b7668:	b508      	push	{r3, lr}
   b766a:	4b02      	ldr	r3, [pc, #8]	; (b7674 <hal_ble_stack_init+0xc>)
   b766c:	681b      	ldr	r3, [r3, #0]
   b766e:	689b      	ldr	r3, [r3, #8]
   b7670:	9301      	str	r3, [sp, #4]
   b7672:	bd08      	pop	{r3, pc}
   b7674:	00030278 	.word	0x00030278

000b7678 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b7678:	b508      	push	{r3, lr}
   b767a:	4b02      	ldr	r3, [pc, #8]	; (b7684 <hal_ble_gap_set_advertising_data+0xc>)
   b767c:	681b      	ldr	r3, [r3, #0]
   b767e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7680:	9301      	str	r3, [sp, #4]
   b7682:	bd08      	pop	{r3, pc}
   b7684:	00030278 	.word	0x00030278

000b7688 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b7688:	b508      	push	{r3, lr}
   b768a:	4b02      	ldr	r3, [pc, #8]	; (b7694 <hal_ble_gap_set_scan_response_data+0xc>)
   b768c:	681b      	ldr	r3, [r3, #0]
   b768e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b7690:	9301      	str	r3, [sp, #4]
   b7692:	bd08      	pop	{r3, pc}
   b7694:	00030278 	.word	0x00030278

000b7698 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b7698:	b508      	push	{r3, lr}
   b769a:	4b02      	ldr	r3, [pc, #8]	; (b76a4 <hal_ble_gap_start_advertising+0xc>)
   b769c:	681b      	ldr	r3, [r3, #0]
   b769e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b76a0:	9301      	str	r3, [sp, #4]
   b76a2:	bd08      	pop	{r3, pc}
   b76a4:	00030278 	.word	0x00030278

000b76a8 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b76a8:	b508      	push	{r3, lr}
   b76aa:	4b03      	ldr	r3, [pc, #12]	; (b76b8 <hal_ble_gap_disconnect+0x10>)
   b76ac:	681b      	ldr	r3, [r3, #0]
   b76ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b76b2:	9301      	str	r3, [sp, #4]
   b76b4:	bd08      	pop	{r3, pc}
   b76b6:	0000      	.short	0x0000
   b76b8:	00030278 	.word	0x00030278

000b76bc <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b76bc:	b508      	push	{r3, lr}
   b76be:	4b03      	ldr	r3, [pc, #12]	; (b76cc <hal_ble_gatt_server_add_service+0x10>)
   b76c0:	681b      	ldr	r3, [r3, #0]
   b76c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b76c6:	9301      	str	r3, [sp, #4]
   b76c8:	bd08      	pop	{r3, pc}
   b76ca:	0000      	.short	0x0000
   b76cc:	00030278 	.word	0x00030278

000b76d0 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b76d0:	b508      	push	{r3, lr}
   b76d2:	4b03      	ldr	r3, [pc, #12]	; (b76e0 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b76d4:	681b      	ldr	r3, [r3, #0]
   b76d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b76da:	9301      	str	r3, [sp, #4]
   b76dc:	bd08      	pop	{r3, pc}
   b76de:	0000      	.short	0x0000
   b76e0:	00030278 	.word	0x00030278

000b76e4 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b76e4:	b508      	push	{r3, lr}
   b76e6:	4b03      	ldr	r3, [pc, #12]	; (b76f4 <hal_ble_gatt_client_write_with_response+0x10>)
   b76e8:	681b      	ldr	r3, [r3, #0]
   b76ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b76ee:	9301      	str	r3, [sp, #4]
   b76f0:	bd08      	pop	{r3, pc}
   b76f2:	0000      	.short	0x0000
   b76f4:	00030278 	.word	0x00030278

000b76f8 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b76f8:	b508      	push	{r3, lr}
   b76fa:	4b03      	ldr	r3, [pc, #12]	; (b7708 <hal_ble_gatt_client_write_without_response+0x10>)
   b76fc:	681b      	ldr	r3, [r3, #0]
   b76fe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b7702:	9301      	str	r3, [sp, #4]
   b7704:	bd08      	pop	{r3, pc}
   b7706:	0000      	.short	0x0000
   b7708:	00030278 	.word	0x00030278

000b770c <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b770c:	b508      	push	{r3, lr}
   b770e:	4b03      	ldr	r3, [pc, #12]	; (b771c <hal_ble_gatt_server_add_characteristic+0x10>)
   b7710:	681b      	ldr	r3, [r3, #0]
   b7712:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b7716:	9301      	str	r3, [sp, #4]
   b7718:	bd08      	pop	{r3, pc}
   b771a:	0000      	.short	0x0000
   b771c:	00030278 	.word	0x00030278

000b7720 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b7720:	b508      	push	{r3, lr}
   b7722:	4b03      	ldr	r3, [pc, #12]	; (b7730 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b7724:	681b      	ldr	r3, [r3, #0]
   b7726:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b772a:	9301      	str	r3, [sp, #4]
   b772c:	bd08      	pop	{r3, pc}
   b772e:	0000      	.short	0x0000
   b7730:	00030278 	.word	0x00030278

000b7734 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b7734:	b508      	push	{r3, lr}
   b7736:	4b03      	ldr	r3, [pc, #12]	; (b7744 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b7738:	681b      	ldr	r3, [r3, #0]
   b773a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b773e:	9301      	str	r3, [sp, #4]
   b7740:	bd08      	pop	{r3, pc}
   b7742:	0000      	.short	0x0000
   b7744:	00030278 	.word	0x00030278

000b7748 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b7748:	b508      	push	{r3, lr}
   b774a:	4b03      	ldr	r3, [pc, #12]	; (b7758 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b774c:	681b      	ldr	r3, [r3, #0]
   b774e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b7752:	9301      	str	r3, [sp, #4]
   b7754:	bd08      	pop	{r3, pc}
   b7756:	0000      	.short	0x0000
   b7758:	00030278 	.word	0x00030278

000b775c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b775c:	b508      	push	{r3, lr}
   b775e:	4b02      	ldr	r3, [pc, #8]	; (b7768 <os_mutex_recursive_create+0xc>)
   b7760:	681b      	ldr	r3, [r3, #0]
   b7762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7764:	9301      	str	r3, [sp, #4]
   b7766:	bd08      	pop	{r3, pc}
   b7768:	00030248 	.word	0x00030248

000b776c <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b776c:	b508      	push	{r3, lr}
   b776e:	4b02      	ldr	r3, [pc, #8]	; (b7778 <os_mutex_recursive_lock+0xc>)
   b7770:	681b      	ldr	r3, [r3, #0]
   b7772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7774:	9301      	str	r3, [sp, #4]
   b7776:	bd08      	pop	{r3, pc}
   b7778:	00030248 	.word	0x00030248

000b777c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b777c:	b508      	push	{r3, lr}
   b777e:	4b02      	ldr	r3, [pc, #8]	; (b7788 <os_mutex_recursive_unlock+0xc>)
   b7780:	681b      	ldr	r3, [r3, #0]
   b7782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7784:	9301      	str	r3, [sp, #4]
   b7786:	bd08      	pop	{r3, pc}
   b7788:	00030248 	.word	0x00030248

000b778c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b778c:	b508      	push	{r3, lr}
   b778e:	4b02      	ldr	r3, [pc, #8]	; (b7798 <HAL_RNG_GetRandomNumber+0xc>)
   b7790:	681b      	ldr	r3, [r3, #0]
   b7792:	685b      	ldr	r3, [r3, #4]
   b7794:	9301      	str	r3, [sp, #4]
   b7796:	bd08      	pop	{r3, pc}
   b7798:	00030218 	.word	0x00030218

000b779c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b779c:	b508      	push	{r3, lr}
   b779e:	4b02      	ldr	r3, [pc, #8]	; (b77a8 <HAL_Delay_Microseconds+0xc>)
   b77a0:	681b      	ldr	r3, [r3, #0]
   b77a2:	68db      	ldr	r3, [r3, #12]
   b77a4:	9301      	str	r3, [sp, #4]
   b77a6:	bd08      	pop	{r3, pc}
   b77a8:	00030218 	.word	0x00030218

000b77ac <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b77ac:	b508      	push	{r3, lr}
   b77ae:	4b02      	ldr	r3, [pc, #8]	; (b77b8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b77b0:	681b      	ldr	r3, [r3, #0]
   b77b2:	695b      	ldr	r3, [r3, #20]
   b77b4:	9301      	str	r3, [sp, #4]
   b77b6:	bd08      	pop	{r3, pc}
   b77b8:	00030218 	.word	0x00030218

000b77bc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b77bc:	b508      	push	{r3, lr}
   b77be:	4b02      	ldr	r3, [pc, #8]	; (b77c8 <HAL_Pin_Map+0xc>)
   b77c0:	681b      	ldr	r3, [r3, #0]
   b77c2:	681b      	ldr	r3, [r3, #0]
   b77c4:	9301      	str	r3, [sp, #4]
   b77c6:	bd08      	pop	{r3, pc}
   b77c8:	0003022c 	.word	0x0003022c

000b77cc <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b77cc:	b508      	push	{r3, lr}
   b77ce:	4b02      	ldr	r3, [pc, #8]	; (b77d8 <hal_i2c_begin+0xc>)
   b77d0:	681b      	ldr	r3, [r3, #0]
   b77d2:	68db      	ldr	r3, [r3, #12]
   b77d4:	9301      	str	r3, [sp, #4]
   b77d6:	bd08      	pop	{r3, pc}
   b77d8:	00030228 	.word	0x00030228

000b77dc <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b77dc:	b508      	push	{r3, lr}
   b77de:	4b02      	ldr	r3, [pc, #8]	; (b77e8 <hal_i2c_begin_transmission+0xc>)
   b77e0:	681b      	ldr	r3, [r3, #0]
   b77e2:	699b      	ldr	r3, [r3, #24]
   b77e4:	9301      	str	r3, [sp, #4]
   b77e6:	bd08      	pop	{r3, pc}
   b77e8:	00030228 	.word	0x00030228

000b77ec <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b77ec:	b508      	push	{r3, lr}
   b77ee:	4b02      	ldr	r3, [pc, #8]	; (b77f8 <hal_i2c_end_transmission+0xc>)
   b77f0:	681b      	ldr	r3, [r3, #0]
   b77f2:	69db      	ldr	r3, [r3, #28]
   b77f4:	9301      	str	r3, [sp, #4]
   b77f6:	bd08      	pop	{r3, pc}
   b77f8:	00030228 	.word	0x00030228

000b77fc <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b77fc:	b508      	push	{r3, lr}
   b77fe:	4b02      	ldr	r3, [pc, #8]	; (b7808 <hal_i2c_write+0xc>)
   b7800:	681b      	ldr	r3, [r3, #0]
   b7802:	6a1b      	ldr	r3, [r3, #32]
   b7804:	9301      	str	r3, [sp, #4]
   b7806:	bd08      	pop	{r3, pc}
   b7808:	00030228 	.word	0x00030228

000b780c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b780c:	b508      	push	{r3, lr}
   b780e:	4b02      	ldr	r3, [pc, #8]	; (b7818 <hal_i2c_available+0xc>)
   b7810:	681b      	ldr	r3, [r3, #0]
   b7812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7814:	9301      	str	r3, [sp, #4]
   b7816:	bd08      	pop	{r3, pc}
   b7818:	00030228 	.word	0x00030228

000b781c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b781c:	b508      	push	{r3, lr}
   b781e:	4b02      	ldr	r3, [pc, #8]	; (b7828 <hal_i2c_read+0xc>)
   b7820:	681b      	ldr	r3, [r3, #0]
   b7822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7824:	9301      	str	r3, [sp, #4]
   b7826:	bd08      	pop	{r3, pc}
   b7828:	00030228 	.word	0x00030228

000b782c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b782c:	b508      	push	{r3, lr}
   b782e:	4b02      	ldr	r3, [pc, #8]	; (b7838 <hal_i2c_peek+0xc>)
   b7830:	681b      	ldr	r3, [r3, #0]
   b7832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7834:	9301      	str	r3, [sp, #4]
   b7836:	bd08      	pop	{r3, pc}
   b7838:	00030228 	.word	0x00030228

000b783c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b783c:	b508      	push	{r3, lr}
   b783e:	4b02      	ldr	r3, [pc, #8]	; (b7848 <hal_i2c_flush+0xc>)
   b7840:	681b      	ldr	r3, [r3, #0]
   b7842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7844:	9301      	str	r3, [sp, #4]
   b7846:	bd08      	pop	{r3, pc}
   b7848:	00030228 	.word	0x00030228

000b784c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b784c:	b508      	push	{r3, lr}
   b784e:	4b02      	ldr	r3, [pc, #8]	; (b7858 <hal_i2c_init+0xc>)
   b7850:	681b      	ldr	r3, [r3, #0]
   b7852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7854:	9301      	str	r3, [sp, #4]
   b7856:	bd08      	pop	{r3, pc}
   b7858:	00030228 	.word	0x00030228

000b785c <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b785c:	b508      	push	{r3, lr}
   b785e:	4b02      	ldr	r3, [pc, #8]	; (b7868 <hal_i2c_request_ex+0xc>)
   b7860:	681b      	ldr	r3, [r3, #0]
   b7862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7864:	9301      	str	r3, [sp, #4]
   b7866:	bd08      	pop	{r3, pc}
   b7868:	00030228 	.word	0x00030228

000b786c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b786c:	b508      	push	{r3, lr}
   b786e:	4b02      	ldr	r3, [pc, #8]	; (b7878 <if_index_to_name+0xc>)
   b7870:	681b      	ldr	r3, [r3, #0]
   b7872:	695b      	ldr	r3, [r3, #20]
   b7874:	9301      	str	r3, [sp, #4]
   b7876:	bd08      	pop	{r3, pc}
   b7878:	0003026c 	.word	0x0003026c

000b787c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b787c:	b508      	push	{r3, lr}
   b787e:	4b02      	ldr	r3, [pc, #8]	; (b7888 <inet_inet_ntop+0xc>)
   b7880:	681b      	ldr	r3, [r3, #0]
   b7882:	695b      	ldr	r3, [r3, #20]
   b7884:	9301      	str	r3, [sp, #4]
   b7886:	bd08      	pop	{r3, pc}
   b7888:	00030264 	.word	0x00030264

000b788c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b788c:	b508      	push	{r3, lr}
   b788e:	4b02      	ldr	r3, [pc, #8]	; (b7898 <inet_htonl+0xc>)
   b7890:	681b      	ldr	r3, [r3, #0]
   b7892:	6a1b      	ldr	r3, [r3, #32]
   b7894:	9301      	str	r3, [sp, #4]
   b7896:	bd08      	pop	{r3, pc}
   b7898:	00030264 	.word	0x00030264

000b789c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b789c:	b508      	push	{r3, lr}
   b789e:	4b02      	ldr	r3, [pc, #8]	; (b78a8 <inet_htons+0xc>)
   b78a0:	681b      	ldr	r3, [r3, #0]
   b78a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b78a4:	9301      	str	r3, [sp, #4]
   b78a6:	bd08      	pop	{r3, pc}
   b78a8:	00030264 	.word	0x00030264

000b78ac <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b78ac:	b508      	push	{r3, lr}
   b78ae:	4b02      	ldr	r3, [pc, #8]	; (b78b8 <netdb_freeaddrinfo+0xc>)
   b78b0:	681b      	ldr	r3, [r3, #0]
   b78b2:	689b      	ldr	r3, [r3, #8]
   b78b4:	9301      	str	r3, [sp, #4]
   b78b6:	bd08      	pop	{r3, pc}
   b78b8:	00030268 	.word	0x00030268

000b78bc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b78bc:	b508      	push	{r3, lr}
   b78be:	4b02      	ldr	r3, [pc, #8]	; (b78c8 <netdb_getaddrinfo+0xc>)
   b78c0:	681b      	ldr	r3, [r3, #0]
   b78c2:	68db      	ldr	r3, [r3, #12]
   b78c4:	9301      	str	r3, [sp, #4]
   b78c6:	bd08      	pop	{r3, pc}
   b78c8:	00030268 	.word	0x00030268

000b78cc <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b78cc:	b508      	push	{r3, lr}
   b78ce:	4b02      	ldr	r3, [pc, #8]	; (b78d8 <sock_setsockopt+0xc>)
   b78d0:	681b      	ldr	r3, [r3, #0]
   b78d2:	699b      	ldr	r3, [r3, #24]
   b78d4:	9301      	str	r3, [sp, #4]
   b78d6:	bd08      	pop	{r3, pc}
   b78d8:	00030238 	.word	0x00030238

000b78dc <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b78dc:	b508      	push	{r3, lr}
   b78de:	4b02      	ldr	r3, [pc, #8]	; (b78e8 <sock_close+0xc>)
   b78e0:	681b      	ldr	r3, [r3, #0]
   b78e2:	69db      	ldr	r3, [r3, #28]
   b78e4:	9301      	str	r3, [sp, #4]
   b78e6:	bd08      	pop	{r3, pc}
   b78e8:	00030238 	.word	0x00030238

000b78ec <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b78ec:	b508      	push	{r3, lr}
   b78ee:	4b02      	ldr	r3, [pc, #8]	; (b78f8 <sock_connect+0xc>)
   b78f0:	681b      	ldr	r3, [r3, #0]
   b78f2:	6a1b      	ldr	r3, [r3, #32]
   b78f4:	9301      	str	r3, [sp, #4]
   b78f6:	bd08      	pop	{r3, pc}
   b78f8:	00030238 	.word	0x00030238

000b78fc <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b78fc:	b508      	push	{r3, lr}
   b78fe:	4b02      	ldr	r3, [pc, #8]	; (b7908 <sock_recv+0xc>)
   b7900:	681b      	ldr	r3, [r3, #0]
   b7902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7904:	9301      	str	r3, [sp, #4]
   b7906:	bd08      	pop	{r3, pc}
   b7908:	00030238 	.word	0x00030238

000b790c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b790c:	b508      	push	{r3, lr}
   b790e:	4b02      	ldr	r3, [pc, #8]	; (b7918 <sock_send+0xc>)
   b7910:	681b      	ldr	r3, [r3, #0]
   b7912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7914:	9301      	str	r3, [sp, #4]
   b7916:	bd08      	pop	{r3, pc}
   b7918:	00030238 	.word	0x00030238

000b791c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b791c:	b508      	push	{r3, lr}
   b791e:	4b02      	ldr	r3, [pc, #8]	; (b7928 <sock_socket+0xc>)
   b7920:	681b      	ldr	r3, [r3, #0]
   b7922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b7924:	9301      	str	r3, [sp, #4]
   b7926:	bd08      	pop	{r3, pc}
   b7928:	00030238 	.word	0x00030238

000b792c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b792c:	b508      	push	{r3, lr}
   b792e:	4b02      	ldr	r3, [pc, #8]	; (b7938 <hal_usart_write+0xc>)
   b7930:	681b      	ldr	r3, [r3, #0]
   b7932:	68db      	ldr	r3, [r3, #12]
   b7934:	9301      	str	r3, [sp, #4]
   b7936:	bd08      	pop	{r3, pc}
   b7938:	0003023c 	.word	0x0003023c

000b793c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b793c:	b508      	push	{r3, lr}
   b793e:	4b02      	ldr	r3, [pc, #8]	; (b7948 <hal_usart_available+0xc>)
   b7940:	681b      	ldr	r3, [r3, #0]
   b7942:	691b      	ldr	r3, [r3, #16]
   b7944:	9301      	str	r3, [sp, #4]
   b7946:	bd08      	pop	{r3, pc}
   b7948:	0003023c 	.word	0x0003023c

000b794c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b794c:	b508      	push	{r3, lr}
   b794e:	4b02      	ldr	r3, [pc, #8]	; (b7958 <hal_usart_read+0xc>)
   b7950:	681b      	ldr	r3, [r3, #0]
   b7952:	695b      	ldr	r3, [r3, #20]
   b7954:	9301      	str	r3, [sp, #4]
   b7956:	bd08      	pop	{r3, pc}
   b7958:	0003023c 	.word	0x0003023c

000b795c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b795c:	b508      	push	{r3, lr}
   b795e:	4b02      	ldr	r3, [pc, #8]	; (b7968 <hal_usart_peek+0xc>)
   b7960:	681b      	ldr	r3, [r3, #0]
   b7962:	699b      	ldr	r3, [r3, #24]
   b7964:	9301      	str	r3, [sp, #4]
   b7966:	bd08      	pop	{r3, pc}
   b7968:	0003023c 	.word	0x0003023c

000b796c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b796c:	b508      	push	{r3, lr}
   b796e:	4b02      	ldr	r3, [pc, #8]	; (b7978 <hal_usart_flush+0xc>)
   b7970:	681b      	ldr	r3, [r3, #0]
   b7972:	69db      	ldr	r3, [r3, #28]
   b7974:	9301      	str	r3, [sp, #4]
   b7976:	bd08      	pop	{r3, pc}
   b7978:	0003023c 	.word	0x0003023c

000b797c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b797c:	b508      	push	{r3, lr}
   b797e:	4b02      	ldr	r3, [pc, #8]	; (b7988 <hal_usart_available_data_for_write+0xc>)
   b7980:	681b      	ldr	r3, [r3, #0]
   b7982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7984:	9301      	str	r3, [sp, #4]
   b7986:	bd08      	pop	{r3, pc}
   b7988:	0003023c 	.word	0x0003023c

000b798c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b798c:	b508      	push	{r3, lr}
   b798e:	4b02      	ldr	r3, [pc, #8]	; (b7998 <hal_usart_init_ex+0xc>)
   b7990:	681b      	ldr	r3, [r3, #0]
   b7992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7994:	9301      	str	r3, [sp, #4]
   b7996:	bd08      	pop	{r3, pc}
   b7998:	0003023c 	.word	0x0003023c

000b799c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b799c:	b508      	push	{r3, lr}
   b799e:	4b02      	ldr	r3, [pc, #8]	; (b79a8 <HAL_USB_USART_Init+0xc>)
   b79a0:	681b      	ldr	r3, [r3, #0]
   b79a2:	681b      	ldr	r3, [r3, #0]
   b79a4:	9301      	str	r3, [sp, #4]
   b79a6:	bd08      	pop	{r3, pc}
   b79a8:	0003024c 	.word	0x0003024c

000b79ac <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b79ac:	b508      	push	{r3, lr}
   b79ae:	4b02      	ldr	r3, [pc, #8]	; (b79b8 <HAL_USB_USART_Begin+0xc>)
   b79b0:	681b      	ldr	r3, [r3, #0]
   b79b2:	685b      	ldr	r3, [r3, #4]
   b79b4:	9301      	str	r3, [sp, #4]
   b79b6:	bd08      	pop	{r3, pc}
   b79b8:	0003024c 	.word	0x0003024c

000b79bc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b79bc:	b508      	push	{r3, lr}
   b79be:	4b02      	ldr	r3, [pc, #8]	; (b79c8 <HAL_USB_USART_Available_Data+0xc>)
   b79c0:	681b      	ldr	r3, [r3, #0]
   b79c2:	691b      	ldr	r3, [r3, #16]
   b79c4:	9301      	str	r3, [sp, #4]
   b79c6:	bd08      	pop	{r3, pc}
   b79c8:	0003024c 	.word	0x0003024c

000b79cc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b79cc:	b508      	push	{r3, lr}
   b79ce:	4b02      	ldr	r3, [pc, #8]	; (b79d8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b79d0:	681b      	ldr	r3, [r3, #0]
   b79d2:	695b      	ldr	r3, [r3, #20]
   b79d4:	9301      	str	r3, [sp, #4]
   b79d6:	bd08      	pop	{r3, pc}
   b79d8:	0003024c 	.word	0x0003024c

000b79dc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b79dc:	b508      	push	{r3, lr}
   b79de:	4b02      	ldr	r3, [pc, #8]	; (b79e8 <HAL_USB_USART_Receive_Data+0xc>)
   b79e0:	681b      	ldr	r3, [r3, #0]
   b79e2:	699b      	ldr	r3, [r3, #24]
   b79e4:	9301      	str	r3, [sp, #4]
   b79e6:	bd08      	pop	{r3, pc}
   b79e8:	0003024c 	.word	0x0003024c

000b79ec <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b79ec:	b508      	push	{r3, lr}
   b79ee:	4b02      	ldr	r3, [pc, #8]	; (b79f8 <HAL_USB_USART_Send_Data+0xc>)
   b79f0:	681b      	ldr	r3, [r3, #0]
   b79f2:	69db      	ldr	r3, [r3, #28]
   b79f4:	9301      	str	r3, [sp, #4]
   b79f6:	bd08      	pop	{r3, pc}
   b79f8:	0003024c 	.word	0x0003024c

000b79fc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b79fc:	b508      	push	{r3, lr}
   b79fe:	4b02      	ldr	r3, [pc, #8]	; (b7a08 <HAL_USB_USART_Flush_Data+0xc>)
   b7a00:	681b      	ldr	r3, [r3, #0]
   b7a02:	6a1b      	ldr	r3, [r3, #32]
   b7a04:	9301      	str	r3, [sp, #4]
   b7a06:	bd08      	pop	{r3, pc}
   b7a08:	0003024c 	.word	0x0003024c

000b7a0c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7a0c:	b508      	push	{r3, lr}
   b7a0e:	4b02      	ldr	r3, [pc, #8]	; (b7a18 <panic_+0xc>)
   b7a10:	681b      	ldr	r3, [r3, #0]
   b7a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7a14:	9301      	str	r3, [sp, #4]
   b7a16:	bd08      	pop	{r3, pc}
   b7a18:	00030260 	.word	0x00030260

000b7a1c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b7a1c:	b508      	push	{r3, lr}
   b7a1e:	4b02      	ldr	r3, [pc, #8]	; (b7a28 <log_message+0xc>)
   b7a20:	681b      	ldr	r3, [r3, #0]
   b7a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7a24:	9301      	str	r3, [sp, #4]
   b7a26:	bd08      	pop	{r3, pc}
   b7a28:	00030260 	.word	0x00030260

000b7a2c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7a2c:	b508      	push	{r3, lr}
   b7a2e:	4b02      	ldr	r3, [pc, #8]	; (b7a38 <set_system_mode+0xc>)
   b7a30:	681b      	ldr	r3, [r3, #0]
   b7a32:	685b      	ldr	r3, [r3, #4]
   b7a34:	9301      	str	r3, [sp, #4]
   b7a36:	bd08      	pop	{r3, pc}
   b7a38:	00030220 	.word	0x00030220

000b7a3c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7a3c:	b508      	push	{r3, lr}
   b7a3e:	4b02      	ldr	r3, [pc, #8]	; (b7a48 <system_delay_ms+0xc>)
   b7a40:	681b      	ldr	r3, [r3, #0]
   b7a42:	695b      	ldr	r3, [r3, #20]
   b7a44:	9301      	str	r3, [sp, #4]
   b7a46:	bd08      	pop	{r3, pc}
   b7a48:	00030220 	.word	0x00030220

000b7a4c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7a4c:	b508      	push	{r3, lr}
   b7a4e:	4b03      	ldr	r3, [pc, #12]	; (b7a5c <system_ctrl_set_app_request_handler+0x10>)
   b7a50:	681b      	ldr	r3, [r3, #0]
   b7a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b7a56:	9301      	str	r3, [sp, #4]
   b7a58:	bd08      	pop	{r3, pc}
   b7a5a:	0000      	.short	0x0000
   b7a5c:	00030220 	.word	0x00030220

000b7a60 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7a60:	b508      	push	{r3, lr}
   b7a62:	4b03      	ldr	r3, [pc, #12]	; (b7a70 <system_ctrl_set_result+0x10>)
   b7a64:	681b      	ldr	r3, [r3, #0]
   b7a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b7a6a:	9301      	str	r3, [sp, #4]
   b7a6c:	bd08      	pop	{r3, pc}
   b7a6e:	0000      	.short	0x0000
   b7a70:	00030220 	.word	0x00030220

000b7a74 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7a74:	b508      	push	{r3, lr}
   b7a76:	4b02      	ldr	r3, [pc, #8]	; (b7a80 <spark_set_random_seed_from_cloud_handler+0xc>)
   b7a78:	681b      	ldr	r3, [r3, #0]
   b7a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7a7c:	9301      	str	r3, [sp, #4]
   b7a7e:	bd08      	pop	{r3, pc}
   b7a80:	00030244 	.word	0x00030244

000b7a84 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7a84:	b508      	push	{r3, lr}
   b7a86:	4b02      	ldr	r3, [pc, #8]	; (b7a90 <network_connect+0xc>)
   b7a88:	681b      	ldr	r3, [r3, #0]
   b7a8a:	685b      	ldr	r3, [r3, #4]
   b7a8c:	9301      	str	r3, [sp, #4]
   b7a8e:	bd08      	pop	{r3, pc}
   b7a90:	00030240 	.word	0x00030240

000b7a94 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7a94:	b508      	push	{r3, lr}
   b7a96:	4b02      	ldr	r3, [pc, #8]	; (b7aa0 <network_connecting+0xc>)
   b7a98:	681b      	ldr	r3, [r3, #0]
   b7a9a:	689b      	ldr	r3, [r3, #8]
   b7a9c:	9301      	str	r3, [sp, #4]
   b7a9e:	bd08      	pop	{r3, pc}
   b7aa0:	00030240 	.word	0x00030240

000b7aa4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7aa4:	b508      	push	{r3, lr}
   b7aa6:	4b02      	ldr	r3, [pc, #8]	; (b7ab0 <network_disconnect+0xc>)
   b7aa8:	681b      	ldr	r3, [r3, #0]
   b7aaa:	68db      	ldr	r3, [r3, #12]
   b7aac:	9301      	str	r3, [sp, #4]
   b7aae:	bd08      	pop	{r3, pc}
   b7ab0:	00030240 	.word	0x00030240

000b7ab4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7ab4:	b508      	push	{r3, lr}
   b7ab6:	4b02      	ldr	r3, [pc, #8]	; (b7ac0 <network_ready+0xc>)
   b7ab8:	681b      	ldr	r3, [r3, #0]
   b7aba:	691b      	ldr	r3, [r3, #16]
   b7abc:	9301      	str	r3, [sp, #4]
   b7abe:	bd08      	pop	{r3, pc}
   b7ac0:	00030240 	.word	0x00030240

000b7ac4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7ac4:	b508      	push	{r3, lr}
   b7ac6:	4b02      	ldr	r3, [pc, #8]	; (b7ad0 <network_on+0xc>)
   b7ac8:	681b      	ldr	r3, [r3, #0]
   b7aca:	695b      	ldr	r3, [r3, #20]
   b7acc:	9301      	str	r3, [sp, #4]
   b7ace:	bd08      	pop	{r3, pc}
   b7ad0:	00030240 	.word	0x00030240

000b7ad4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7ad4:	b508      	push	{r3, lr}
   b7ad6:	4b02      	ldr	r3, [pc, #8]	; (b7ae0 <network_off+0xc>)
   b7ad8:	681b      	ldr	r3, [r3, #0]
   b7ada:	699b      	ldr	r3, [r3, #24]
   b7adc:	9301      	str	r3, [sp, #4]
   b7ade:	bd08      	pop	{r3, pc}
   b7ae0:	00030240 	.word	0x00030240

000b7ae4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7ae4:	b508      	push	{r3, lr}
   b7ae6:	4b02      	ldr	r3, [pc, #8]	; (b7af0 <network_listen+0xc>)
   b7ae8:	681b      	ldr	r3, [r3, #0]
   b7aea:	69db      	ldr	r3, [r3, #28]
   b7aec:	9301      	str	r3, [sp, #4]
   b7aee:	bd08      	pop	{r3, pc}
   b7af0:	00030240 	.word	0x00030240

000b7af4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7af4:	b508      	push	{r3, lr}
   b7af6:	4b02      	ldr	r3, [pc, #8]	; (b7b00 <network_listening+0xc>)
   b7af8:	681b      	ldr	r3, [r3, #0]
   b7afa:	6a1b      	ldr	r3, [r3, #32]
   b7afc:	9301      	str	r3, [sp, #4]
   b7afe:	bd08      	pop	{r3, pc}
   b7b00:	00030240 	.word	0x00030240

000b7b04 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7b04:	b508      	push	{r3, lr}
   b7b06:	4b02      	ldr	r3, [pc, #8]	; (b7b10 <network_set_listen_timeout+0xc>)
   b7b08:	681b      	ldr	r3, [r3, #0]
   b7b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7b0c:	9301      	str	r3, [sp, #4]
   b7b0e:	bd08      	pop	{r3, pc}
   b7b10:	00030240 	.word	0x00030240

000b7b14 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7b14:	b508      	push	{r3, lr}
   b7b16:	4b02      	ldr	r3, [pc, #8]	; (b7b20 <network_get_listen_timeout+0xc>)
   b7b18:	681b      	ldr	r3, [r3, #0]
   b7b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7b1c:	9301      	str	r3, [sp, #4]
   b7b1e:	bd08      	pop	{r3, pc}
   b7b20:	00030240 	.word	0x00030240

000b7b24 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7b24:	b508      	push	{r3, lr}
   b7b26:	4b02      	ldr	r3, [pc, #8]	; (b7b30 <network_is_on+0xc>)
   b7b28:	681b      	ldr	r3, [r3, #0]
   b7b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7b2c:	9301      	str	r3, [sp, #4]
   b7b2e:	bd08      	pop	{r3, pc}
   b7b30:	00030240 	.word	0x00030240

000b7b34 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7b34:	b508      	push	{r3, lr}
   b7b36:	4b02      	ldr	r3, [pc, #8]	; (b7b40 <network_is_off+0xc>)
   b7b38:	681b      	ldr	r3, [r3, #0]
   b7b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7b3c:	9301      	str	r3, [sp, #4]
   b7b3e:	bd08      	pop	{r3, pc}
   b7b40:	00030240 	.word	0x00030240

000b7b44 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7b44:	b508      	push	{r3, lr}
   b7b46:	4b02      	ldr	r3, [pc, #8]	; (b7b50 <malloc+0xc>)
   b7b48:	681b      	ldr	r3, [r3, #0]
   b7b4a:	681b      	ldr	r3, [r3, #0]
   b7b4c:	9301      	str	r3, [sp, #4]
   b7b4e:	bd08      	pop	{r3, pc}
   b7b50:	0003021c 	.word	0x0003021c

000b7b54 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7b54:	b508      	push	{r3, lr}
   b7b56:	4b02      	ldr	r3, [pc, #8]	; (b7b60 <free+0xc>)
   b7b58:	681b      	ldr	r3, [r3, #0]
   b7b5a:	685b      	ldr	r3, [r3, #4]
   b7b5c:	9301      	str	r3, [sp, #4]
   b7b5e:	bd08      	pop	{r3, pc}
   b7b60:	0003021c 	.word	0x0003021c

000b7b64 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7b64:	b508      	push	{r3, lr}
   b7b66:	4b02      	ldr	r3, [pc, #8]	; (b7b70 <realloc+0xc>)
   b7b68:	681b      	ldr	r3, [r3, #0]
   b7b6a:	689b      	ldr	r3, [r3, #8]
   b7b6c:	9301      	str	r3, [sp, #4]
   b7b6e:	bd08      	pop	{r3, pc}
   b7b70:	0003021c 	.word	0x0003021c

000b7b74 <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b7b74:	b508      	push	{r3, lr}
   b7b76:	4b02      	ldr	r3, [pc, #8]	; (b7b80 <sscanf+0xc>)
   b7b78:	681b      	ldr	r3, [r3, #0]
   b7b7a:	695b      	ldr	r3, [r3, #20]
   b7b7c:	9301      	str	r3, [sp, #4]
   b7b7e:	bd08      	pop	{r3, pc}
   b7b80:	0003021c 	.word	0x0003021c

000b7b84 <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7b84:	b508      	push	{r3, lr}
   b7b86:	4b02      	ldr	r3, [pc, #8]	; (b7b90 <vsnprintf+0xc>)
   b7b88:	681b      	ldr	r3, [r3, #0]
   b7b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7b8c:	9301      	str	r3, [sp, #4]
   b7b8e:	bd08      	pop	{r3, pc}
   b7b90:	0003021c 	.word	0x0003021c

000b7b94 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b7b94:	b508      	push	{r3, lr}
   b7b96:	4b02      	ldr	r3, [pc, #8]	; (b7ba0 <abort+0xc>)
   b7b98:	681b      	ldr	r3, [r3, #0]
   b7b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7b9c:	9301      	str	r3, [sp, #4]
   b7b9e:	bd08      	pop	{r3, pc}
   b7ba0:	0003021c 	.word	0x0003021c

000b7ba4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b7ba4:	b508      	push	{r3, lr}
   b7ba6:	4b02      	ldr	r3, [pc, #8]	; (b7bb0 <_malloc_r+0xc>)
   b7ba8:	681b      	ldr	r3, [r3, #0]
   b7baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7bac:	9301      	str	r3, [sp, #4]
   b7bae:	bd08      	pop	{r3, pc}
   b7bb0:	0003021c 	.word	0x0003021c

000b7bb4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b7bb4:	b508      	push	{r3, lr}
   b7bb6:	4b02      	ldr	r3, [pc, #8]	; (b7bc0 <__errno+0xc>)
   b7bb8:	681b      	ldr	r3, [r3, #0]
   b7bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7bbc:	9301      	str	r3, [sp, #4]
   b7bbe:	bd08      	pop	{r3, pc}
   b7bc0:	0003021c 	.word	0x0003021c

000b7bc4 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7bc4:	b508      	push	{r3, lr}
   b7bc6:	4b02      	ldr	r3, [pc, #8]	; (b7bd0 <__assert_func+0xc>)
   b7bc8:	681b      	ldr	r3, [r3, #0]
   b7bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7bcc:	9301      	str	r3, [sp, #4]
   b7bce:	bd08      	pop	{r3, pc}
   b7bd0:	0003021c 	.word	0x0003021c

000b7bd4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7bd4:	b508      	push	{r3, lr}
   b7bd6:	4b02      	ldr	r3, [pc, #8]	; (b7be0 <newlib_impure_ptr_callback+0xc>)
   b7bd8:	681b      	ldr	r3, [r3, #0]
   b7bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7bdc:	9301      	str	r3, [sp, #4]
   b7bde:	bd08      	pop	{r3, pc}
   b7be0:	0003021c 	.word	0x0003021c

000b7be4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b7be4:	2100      	movs	r1, #0
   b7be6:	f7ff bf29 	b.w	b7a3c <system_delay_ms>

000b7bea <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7bea:	4770      	bx	lr

000b7bec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b7bec:	4770      	bx	lr

000b7bee <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b7bee:	4770      	bx	lr

000b7bf0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7bf0:	4770      	bx	lr
	...

000b7bf4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7bf4:	4b06      	ldr	r3, [pc, #24]	; (b7c10 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7bf6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7bf8:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b7bfa:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7bfe:	d005      	beq.n	b7c0c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7c00:	4608      	mov	r0, r1
   b7c02:	f002 facd 	bl	ba1a0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7c06:	2800      	cmp	r0, #0
   b7c08:	bf08      	it	eq
   b7c0a:	2400      	moveq	r4, #0
      }
   b7c0c:	4620      	mov	r0, r4
   b7c0e:	bd10      	pop	{r4, pc}
   b7c10:	000bd8fc 	.word	0x000bd8fc

000b7c14 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7c14:	4b06      	ldr	r3, [pc, #24]	; (b7c30 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7c16:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7c18:	b510      	push	{r4, lr}
   b7c1a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7c1e:	d005      	beq.n	b7c2c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7c20:	4608      	mov	r0, r1
   b7c22:	f002 fabd 	bl	ba1a0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7c26:	2800      	cmp	r0, #0
   b7c28:	bf08      	it	eq
   b7c2a:	2400      	moveq	r4, #0
      }
   b7c2c:	4620      	mov	r0, r4
   b7c2e:	bd10      	pop	{r4, pc}
   b7c30:	000bd8fc 	.word	0x000bd8fc

000b7c34 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7c34:	4b06      	ldr	r3, [pc, #24]	; (b7c50 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7c36:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7c38:	b510      	push	{r4, lr}
   b7c3a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7c3e:	d005      	beq.n	b7c4c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7c40:	4608      	mov	r0, r1
   b7c42:	f002 faad 	bl	ba1a0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7c46:	2800      	cmp	r0, #0
   b7c48:	bf08      	it	eq
   b7c4a:	2400      	moveq	r4, #0
      }
   b7c4c:	4620      	mov	r0, r4
   b7c4e:	bd10      	pop	{r4, pc}
   b7c50:	000bd8fc 	.word	0x000bd8fc

000b7c54 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7c54:	b510      	push	{r4, lr}
   b7c56:	2168      	movs	r1, #104	; 0x68
   b7c58:	4604      	mov	r4, r0
   b7c5a:	f7fc fa22 	bl	b40a2 <_ZdlPvj>
   b7c5e:	4620      	mov	r0, r4
   b7c60:	bd10      	pop	{r4, pc}

000b7c62 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b7c62:	b510      	push	{r4, lr}
   b7c64:	2128      	movs	r1, #40	; 0x28
   b7c66:	4604      	mov	r4, r0
   b7c68:	f7fc fa1b 	bl	b40a2 <_ZdlPvj>
   b7c6c:	4620      	mov	r0, r4
   b7c6e:	bd10      	pop	{r4, pc}

000b7c70 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b7c70:	b510      	push	{r4, lr}
   b7c72:	2130      	movs	r1, #48	; 0x30
   b7c74:	4604      	mov	r4, r0
   b7c76:	f7fc fa14 	bl	b40a2 <_ZdlPvj>
   b7c7a:	4620      	mov	r0, r4
   b7c7c:	bd10      	pop	{r4, pc}

000b7c7e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7c7e:	2168      	movs	r1, #104	; 0x68
   b7c80:	f7fc ba0f 	b.w	b40a2 <_ZdlPvj>

000b7c84 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7c84:	2128      	movs	r1, #40	; 0x28
   b7c86:	f7fc ba0c 	b.w	b40a2 <_ZdlPvj>

000b7c8a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7c8a:	2130      	movs	r1, #48	; 0x30
   b7c8c:	f7fc ba09 	b.w	b40a2 <_ZdlPvj>

000b7c90 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b7c90:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b7c92:	2500      	movs	r5, #0
   b7c94:	1cec      	adds	r4, r5, #3
   b7c96:	428c      	cmp	r4, r1
   b7c98:	d80d      	bhi.n	b7cb6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b7c9a:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b7c9c:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b7c9e:	5d87      	ldrb	r7, [r0, r6]
   b7ca0:	4297      	cmp	r7, r2
   b7ca2:	d105      	bne.n	b7cb0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b7ca4:	4426      	add	r6, r4
   b7ca6:	42b1      	cmp	r1, r6
   b7ca8:	d305      	bcc.n	b7cb6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b7caa:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b7cac:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b7cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b7cb0:	3401      	adds	r4, #1
   b7cb2:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b7cb4:	e7ee      	b.n	b7c94 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b7cb6:	2000      	movs	r0, #0
   b7cb8:	e7f9      	b.n	b7cae <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b7cbc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b7cbc:	4a02      	ldr	r2, [pc, #8]	; (b7cc8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b7cbe:	4903      	ldr	r1, [pc, #12]	; (b7ccc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b7cc0:	200a      	movs	r0, #10
   b7cc2:	f7ff bea3 	b.w	b7a0c <panic_>
   b7cc6:	bf00      	nop
   b7cc8:	000b779d 	.word	0x000b779d
   b7ccc:	000bd75c 	.word	0x000bd75c

000b7cd0 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7cd0:	b430      	push	{r4, r5}
   b7cd2:	460d      	mov	r5, r1
   b7cd4:	4611      	mov	r1, r2
   b7cd6:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b7cd8:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b7cda:	6809      	ldr	r1, [r1, #0]
   b7cdc:	6828      	ldr	r0, [r5, #0]
   b7cde:	e9d3 4300 	ldrd	r4, r3, [r3]
   b7ce2:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b7ce4:	bc30      	pop	{r4, r5}
   b7ce6:	4760      	bx	ip

000b7ce8 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b7ce8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b7cea:	b538      	push	{r3, r4, r5, lr}
   b7cec:	4604      	mov	r4, r0
	switch (__op)
   b7cee:	d102      	bne.n	b7cf6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b7cf0:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b7cf2:	6023      	str	r3, [r4, #0]
	}
   b7cf4:	e003      	b.n	b7cfe <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b7cf6:	2a02      	cmp	r2, #2
   b7cf8:	d003      	beq.n	b7d02 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b7cfa:	2a03      	cmp	r2, #3
   b7cfc:	d00d      	beq.n	b7d1a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b7cfe:	2000      	movs	r0, #0
   b7d00:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b7d02:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b7d04:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b7d06:	f7fc f9c6 	bl	b4096 <_Znwj>
   b7d0a:	4603      	mov	r3, r0
   b7d0c:	2800      	cmp	r0, #0
   b7d0e:	d0f0      	beq.n	b7cf2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b7d10:	e895 0003 	ldmia.w	r5, {r0, r1}
   b7d14:	e883 0003 	stmia.w	r3, {r0, r1}
   b7d18:	e7eb      	b.n	b7cf2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b7d1a:	6800      	ldr	r0, [r0, #0]
   b7d1c:	2800      	cmp	r0, #0
   b7d1e:	d0ee      	beq.n	b7cfe <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b7d20:	2108      	movs	r1, #8
   b7d22:	f7fc f9be 	bl	b40a2 <_ZdlPvj>
   b7d26:	e7ea      	b.n	b7cfe <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b7d28 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b7d28:	b510      	push	{r4, lr}
      if (_M_manager)
   b7d2a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b7d2c:	4604      	mov	r4, r0
      if (_M_manager)
   b7d2e:	b113      	cbz	r3, b7d36 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b7d30:	2203      	movs	r2, #3
   b7d32:	4601      	mov	r1, r0
   b7d34:	4798      	blx	r3
    }
   b7d36:	4620      	mov	r0, r4
   b7d38:	bd10      	pop	{r4, pc}

000b7d3a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7d3a:	b510      	push	{r4, lr}
   b7d3c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b7d3e:	3058      	adds	r0, #88	; 0x58
   b7d40:	f7ff fff2 	bl	b7d28 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b7d44:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b7d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7d4c:	f001 bb98 	b.w	b9480 <_ZN6StringD1Ev>

000b7d50 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b7d50:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b7d52:	6843      	ldr	r3, [r0, #4]
   b7d54:	3b01      	subs	r3, #1
    {
   b7d56:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b7d58:	6043      	str	r3, [r0, #4]
   b7d5a:	b963      	cbnz	r3, b7d76 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b7d5c:	6803      	ldr	r3, [r0, #0]
   b7d5e:	689b      	ldr	r3, [r3, #8]
   b7d60:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b7d62:	68a3      	ldr	r3, [r4, #8]
   b7d64:	3b01      	subs	r3, #1
   b7d66:	60a3      	str	r3, [r4, #8]
   b7d68:	b92b      	cbnz	r3, b7d76 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b7d6a:	6823      	ldr	r3, [r4, #0]
   b7d6c:	4620      	mov	r0, r4
   b7d6e:	68db      	ldr	r3, [r3, #12]
    }
   b7d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b7d74:	4718      	bx	r3
    }
   b7d76:	bd10      	pop	{r4, pc}

000b7d78 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b7d78:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b7d7c:	b2da      	uxtb	r2, r3
   b7d7e:	2a09      	cmp	r2, #9
   b7d80:	d801      	bhi.n	b7d86 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b7d82:	4618      	mov	r0, r3
   b7d84:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b7d86:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b7d8a:	2b05      	cmp	r3, #5
   b7d8c:	d801      	bhi.n	b7d92 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b7d8e:	3857      	subs	r0, #87	; 0x57
   b7d90:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b7d92:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b7d96:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b7d98:	bf94      	ite	ls
   b7d9a:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b7d9c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b7da0:	4770      	bx	lr
	...

000b7da4 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b7da4:	b510      	push	{r4, lr}
            locked_(false) {
   b7da6:	2300      	movs	r3, #0
   b7da8:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b7daa:	4b04      	ldr	r3, [pc, #16]	; (b7dbc <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b7dac:	4604      	mov	r4, r0
   b7dae:	6818      	ldr	r0, [r3, #0]
   b7db0:	f7ff fcdc 	bl	b776c <os_mutex_recursive_lock>
        locked_ = true;
   b7db4:	2301      	movs	r3, #1
   b7db6:	7023      	strb	r3, [r4, #0]
    }
   b7db8:	4620      	mov	r0, r4
   b7dba:	bd10      	pop	{r4, pc}
   b7dbc:	2003e6c0 	.word	0x2003e6c0

000b7dc0 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b7dc0:	b510      	push	{r4, lr}
        if (locked_) {
   b7dc2:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b7dc4:	4604      	mov	r4, r0
        if (locked_) {
   b7dc6:	b11b      	cbz	r3, b7dd0 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b7dc8:	4b02      	ldr	r3, [pc, #8]	; (b7dd4 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b7dca:	6818      	ldr	r0, [r3, #0]
   b7dcc:	f7ff fcd6 	bl	b777c <os_mutex_recursive_unlock>
    }
   b7dd0:	4620      	mov	r0, r4
   b7dd2:	bd10      	pop	{r4, pc}
   b7dd4:	2003e6c0 	.word	0x2003e6c0

000b7dd8 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b7dd8:	b082      	sub	sp, #8
   b7dda:	4603      	mov	r3, r0
    address_ = addr;
   b7ddc:	6808      	ldr	r0, [r1, #0]
   b7dde:	6849      	ldr	r1, [r1, #4]
   b7de0:	466a      	mov	r2, sp
   b7de2:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b7de4:	466a      	mov	r2, sp
   b7de6:	ca03      	ldmia	r2!, {r0, r1}
   b7de8:	6018      	str	r0, [r3, #0]
}
   b7dea:	4618      	mov	r0, r3
    address_ = addr.address_;
   b7dec:	6059      	str	r1, [r3, #4]
}
   b7dee:	b002      	add	sp, #8
   b7df0:	4770      	bx	lr

000b7df2 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b7df2:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b7df4:	7982      	ldrb	r2, [r0, #6]
   b7df6:	798b      	ldrb	r3, [r1, #6]
   b7df8:	429a      	cmp	r2, r3
   b7dfa:	d106      	bne.n	b7e0a <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b7dfc:	2206      	movs	r2, #6
   b7dfe:	f003 f99b 	bl	bb138 <memcmp>
   b7e02:	fab0 f080 	clz	r0, r0
   b7e06:	0940      	lsrs	r0, r0, #5
}
   b7e08:	bd08      	pop	{r3, pc}
    return false;
   b7e0a:	2000      	movs	r0, #0
   b7e0c:	e7fc      	b.n	b7e08 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b7e0e <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b7e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7e12:	6003      	str	r3, [r0, #0]
   b7e14:	8083      	strh	r3, [r0, #4]
}
   b7e16:	2000      	movs	r0, #0
   b7e18:	4770      	bx	lr

000b7e1a <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b7e1a:	b508      	push	{r3, lr}
   b7e1c:	4602      	mov	r2, r0
        : address_{} {
   b7e1e:	2100      	movs	r1, #0
   b7e20:	6001      	str	r1, [r0, #0]
   b7e22:	6041      	str	r1, [r0, #4]
    clear();
   b7e24:	f7ff fff3 	bl	b7e0e <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b7e28:	7191      	strb	r1, [r2, #6]
}
   b7e2a:	4610      	mov	r0, r2
   b7e2c:	bd08      	pop	{r3, pc}
	...

000b7e30 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b7e30:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b7e32:	2301      	movs	r3, #1
   b7e34:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7e36:	4b05      	ldr	r3, [pc, #20]	; (b7e4c <_ZN8particle7BleUuidC1Ev+0x1c>)
   b7e38:	4602      	mov	r2, r0
   b7e3a:	f103 0110 	add.w	r1, r3, #16
   b7e3e:	f853 4b04 	ldr.w	r4, [r3], #4
   b7e42:	f842 4b04 	str.w	r4, [r2], #4
   b7e46:	428b      	cmp	r3, r1
   b7e48:	d1f9      	bne.n	b7e3e <_ZN8particle7BleUuidC1Ev+0xe>
}
   b7e4a:	bd10      	pop	{r4, pc}
   b7e4c:	000bd90a 	.word	0x000bd90a

000b7e50 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7e50:	b510      	push	{r4, lr}
    if (uuid128) {
   b7e52:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7e54:	4604      	mov	r4, r0
    if (uuid128) {
   b7e56:	b1b1      	cbz	r1, b7e86 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b7e58:	2a01      	cmp	r2, #1
   b7e5a:	f101 0210 	add.w	r2, r1, #16
   b7e5e:	d10a      	bne.n	b7e76 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b7e60:	4601      	mov	r1, r0
   b7e62:	f853 0b04 	ldr.w	r0, [r3], #4
   b7e66:	f841 0b04 	str.w	r0, [r1], #4
   b7e6a:	4293      	cmp	r3, r2
   b7e6c:	d1f9      	bne.n	b7e62 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b7e6e:	2301      	movs	r3, #1
   b7e70:	6123      	str	r3, [r4, #16]
}
   b7e72:	4620      	mov	r0, r4
   b7e74:	bd10      	pop	{r4, pc}
   b7e76:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b7e78:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b7e7c:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b7e80:	429a      	cmp	r2, r3
   b7e82:	d1f9      	bne.n	b7e78 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b7e84:	e7f3      	b.n	b7e6e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b7e86:	2210      	movs	r2, #16
   b7e88:	f003 f98e 	bl	bb1a8 <memset>
   b7e8c:	e7f1      	b.n	b7e72 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b7e8e <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b7e8e:	b538      	push	{r3, r4, r5, lr}
   b7e90:	4604      	mov	r4, r0
   b7e92:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b7e94:	461a      	mov	r2, r3
   b7e96:	f7ff ffdb 	bl	b7e50 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b7e9a:	81a5      	strh	r5, [r4, #12]
}
   b7e9c:	4620      	mov	r0, r4
   b7e9e:	bd38      	pop	{r3, r4, r5, pc}

000b7ea0 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b7ea0:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b7ea2:	6902      	ldr	r2, [r0, #16]
   b7ea4:	b922      	cbnz	r2, b7eb0 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b7ea6:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7ea8:	3800      	subs	r0, #0
   b7eaa:	bf18      	it	ne
   b7eac:	2001      	movne	r0, #1
}
   b7eae:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7eb0:	4902      	ldr	r1, [pc, #8]	; (b7ebc <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b7eb2:	2210      	movs	r2, #16
   b7eb4:	f003 f940 	bl	bb138 <memcmp>
   b7eb8:	e7f6      	b.n	b7ea8 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b7eba:	bf00      	nop
   b7ebc:	000bd92a 	.word	0x000bd92a

000b7ec0 <_ZNK8particle7BleUuid4typeEv>:
}
   b7ec0:	6900      	ldr	r0, [r0, #16]
   b7ec2:	4770      	bx	lr

000b7ec4 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b7ec4:	b538      	push	{r3, r4, r5, lr}
   b7ec6:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b7ec8:	2214      	movs	r2, #20
   b7eca:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b7ecc:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b7ece:	f003 f96b 	bl	bb1a8 <memset>
    if (type_ == BleUuidType::SHORT) {
   b7ed2:	6923      	ldr	r3, [r4, #16]
   b7ed4:	b91b      	cbnz	r3, b7ede <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b7ed6:	89a3      	ldrh	r3, [r4, #12]
   b7ed8:	802b      	strh	r3, [r5, #0]
}
   b7eda:	4628      	mov	r0, r5
   b7edc:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b7ede:	2301      	movs	r3, #1
   b7ee0:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b7ee2:	4621      	mov	r1, r4
   b7ee4:	462b      	mov	r3, r5
   b7ee6:	f104 0210 	add.w	r2, r4, #16
   b7eea:	f851 0b04 	ldr.w	r0, [r1], #4
   b7eee:	f843 0b04 	str.w	r0, [r3], #4
   b7ef2:	4291      	cmp	r1, r2
   b7ef4:	d1f9      	bne.n	b7eea <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b7ef6:	e7f0      	b.n	b7eda <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b7ef8 <_ZNK8particle7BleUuid7shortedEv>:
}
   b7ef8:	8980      	ldrh	r0, [r0, #12]
   b7efa:	4770      	bx	lr

000b7efc <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b7efc:	4770      	bx	lr

000b7efe <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b7efe:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b7f00:	6902      	ldr	r2, [r0, #16]
   b7f02:	690b      	ldr	r3, [r1, #16]
   b7f04:	429a      	cmp	r2, r3
   b7f06:	d106      	bne.n	b7f16 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b7f08:	2210      	movs	r2, #16
   b7f0a:	f003 f915 	bl	bb138 <memcmp>
   b7f0e:	fab0 f080 	clz	r0, r0
   b7f12:	0940      	lsrs	r0, r0, #5
}
   b7f14:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b7f16:	2000      	movs	r0, #0
   b7f18:	e7fc      	b.n	b7f14 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b7f1c <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b7f1c:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b7f1e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b7f22:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7f24:	4b34      	ldr	r3, [pc, #208]	; (b7ff8 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b7f26:	460c      	mov	r4, r1
   b7f28:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7f2a:	4602      	mov	r2, r0
   b7f2c:	f103 0110 	add.w	r1, r3, #16
   b7f30:	f853 0b04 	ldr.w	r0, [r3], #4
   b7f34:	f842 0b04 	str.w	r0, [r2], #4
   b7f38:	428b      	cmp	r3, r1
   b7f3a:	d1f9      	bne.n	b7f30 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b7f3c:	b344      	cbz	r4, b7f90 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b7f3e:	2124      	movs	r1, #36	; 0x24
   b7f40:	4620      	mov	r0, r4
   b7f42:	f003 f995 	bl	bb270 <strnlen>
   b7f46:	2804      	cmp	r0, #4
   b7f48:	f04f 0500 	mov.w	r5, #0
   b7f4c:	d123      	bne.n	b7f96 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b7f4e:	f8ad 5004 	strh.w	r5, [sp, #4]
   b7f52:	af01      	add	r7, sp, #4
   b7f54:	1ca5      	adds	r5, r4, #2
   b7f56:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b7f58:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b7f5c:	f7ff ff0c 	bl	b7d78 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b7f60:	f1b0 0800 	subs.w	r8, r0, #0
   b7f64:	db12      	blt.n	b7f8c <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b7f66:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b7f6a:	f7ff ff05 	bl	b7d78 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b7f6e:	2800      	cmp	r0, #0
   b7f70:	db0c      	blt.n	b7f8c <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b7f72:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b7f74:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b7f78:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b7f7a:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b7f7e:	d1eb      	bne.n	b7f58 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b7f80:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b7f84:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b7f86:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7f8a:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b7f8c:	2300      	movs	r3, #0
   b7f8e:	6133      	str	r3, [r6, #16]
}
   b7f90:	b002      	add	sp, #8
   b7f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b7f96:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7f9a:	2124      	movs	r1, #36	; 0x24
   b7f9c:	4620      	mov	r0, r4
   b7f9e:	f003 f967 	bl	bb270 <strnlen>
   b7fa2:	42a8      	cmp	r0, r5
   b7fa4:	d807      	bhi.n	b7fb6 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b7fa6:	4642      	mov	r2, r8
   b7fa8:	2100      	movs	r1, #0
   b7faa:	4630      	mov	r0, r6
}
   b7fac:	b002      	add	sp, #8
   b7fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b7fb2:	f003 b8f9 	b.w	bb1a8 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7fb6:	f1b8 0f00 	cmp.w	r8, #0
   b7fba:	d0e9      	beq.n	b7f90 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b7fbc:	5d60      	ldrb	r0, [r4, r5]
   b7fbe:	f7ff fedb 	bl	b7d78 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b7fc2:	0603      	lsls	r3, r0, #24
   b7fc4:	d415      	bmi.n	b7ff2 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b7fc6:	0100      	lsls	r0, r0, #4
   b7fc8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b7fcc:	b2c7      	uxtb	r7, r0
   b7fce:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b7fd2:	2124      	movs	r1, #36	; 0x24
   b7fd4:	4620      	mov	r0, r4
   b7fd6:	f003 f94b 	bl	bb270 <strnlen>
   b7fda:	3501      	adds	r5, #1
   b7fdc:	42a8      	cmp	r0, r5
   b7fde:	d908      	bls.n	b7ff2 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b7fe0:	5d60      	ldrb	r0, [r4, r5]
   b7fe2:	f7ff fec9 	bl	b7d78 <_ZN8particle11hexToNibbleEc>
   b7fe6:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b7fe8:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b7fea:	bfa4      	itt	ge
   b7fec:	4338      	orrge	r0, r7
   b7fee:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7ff2:	3501      	adds	r5, #1
   b7ff4:	e7d1      	b.n	b7f9a <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b7ff6:	bf00      	nop
   b7ff8:	000bd90a 	.word	0x000bd90a

000b7ffc <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b7ffc:	b513      	push	{r0, r1, r4, lr}
   b7ffe:	4604      	mov	r4, r0
   b8000:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b8002:	f7ff ff15 	bl	b7e30 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b8006:	4620      	mov	r0, r4
   b8008:	9901      	ldr	r1, [sp, #4]
   b800a:	f7ff ff87 	bl	b7f1c <_ZN8particle7BleUuid9constructEPKc>
}
   b800e:	4620      	mov	r0, r4
   b8010:	b002      	add	sp, #8
   b8012:	bd10      	pop	{r4, pc}

000b8014 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b8014:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b8016:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b801a:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b801c:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b801e:	8043      	strh	r3, [r0, #2]
   b8020:	220e      	movs	r2, #14
   b8022:	4629      	mov	r1, r5
   b8024:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b8026:	7105      	strb	r5, [r0, #4]
   b8028:	3006      	adds	r0, #6
   b802a:	f003 f8bd 	bl	bb1a8 <memset>
   b802e:	f104 0014 	add.w	r0, r4, #20
   b8032:	f7ff fefd 	bl	b7e30 <_ZN8particle7BleUuidC1Ev>
   b8036:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b803a:	f7ff fef9 	bl	b7e30 <_ZN8particle7BleUuidC1Ev>
   b803e:	4904      	ldr	r1, [pc, #16]	; (b8050 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b8040:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b8044:	f001 fa67 	bl	b9516 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b8048:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b804a:	4620      	mov	r0, r4
   b804c:	bd38      	pop	{r3, r4, r5, pc}
   b804e:	bf00      	nop
   b8050:	000bd726 	.word	0x000bd726

000b8054 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b8054:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b8056:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b805a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b805e:	4293      	cmp	r3, r2
   b8060:	4618      	mov	r0, r3
   b8062:	d006      	beq.n	b8072 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b8064:	6804      	ldr	r4, [r0, #0]
   b8066:	8824      	ldrh	r4, [r4, #0]
   b8068:	428c      	cmp	r4, r1
   b806a:	f103 0308 	add.w	r3, r3, #8
   b806e:	d1f6      	bne.n	b805e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b8070:	bd10      	pop	{r4, pc}
        return nullptr;
   b8072:	2000      	movs	r0, #0
   b8074:	e7fc      	b.n	b8070 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b8078 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b8078:	b5f0      	push	{r4, r5, r6, r7, lr}
   b807a:	4606      	mov	r6, r0
   b807c:	b085      	sub	sp, #20
   b807e:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b8080:	460d      	mov	r5, r1
   b8082:	2900      	cmp	r1, #0
   b8084:	d050      	beq.n	b8128 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b8086:	2a00      	cmp	r2, #0
   b8088:	d04e      	beq.n	b8128 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b808a:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b808c:	7823      	ldrb	r3, [r4, #0]
   b808e:	2af4      	cmp	r2, #244	; 0xf4
   b8090:	bf28      	it	cs
   b8092:	22f4      	movcs	r2, #244	; 0xf4
   b8094:	b343      	cbz	r3, b80e8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b8096:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b8098:	0798      	lsls	r0, r3, #30
   b809a:	d509      	bpl.n	b80b0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b809c:	89a0      	ldrh	r0, [r4, #12]
   b809e:	9203      	str	r2, [sp, #12]
   b80a0:	2300      	movs	r3, #0
   b80a2:	f7ff fb15 	bl	b76d0 <hal_ble_gatt_server_set_characteristic_value>
   b80a6:	2800      	cmp	r0, #0
   b80a8:	9a03      	ldr	r2, [sp, #12]
   b80aa:	da03      	bge.n	b80b4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b80ac:	b005      	add	sp, #20
   b80ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b80b0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b80b4:	6834      	ldr	r4, [r6, #0]
   b80b6:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b80b8:	06d9      	lsls	r1, r3, #27
   b80ba:	d509      	bpl.n	b80d0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b80bc:	2f01      	cmp	r7, #1
   b80be:	d007      	beq.n	b80d0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b80c0:	89a0      	ldrh	r0, [r4, #12]
   b80c2:	2300      	movs	r3, #0
   b80c4:	4629      	mov	r1, r5
}
   b80c6:	b005      	add	sp, #20
   b80c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b80cc:	f7ff bb32 	b.w	b7734 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b80d0:	069b      	lsls	r3, r3, #26
   b80d2:	d5eb      	bpl.n	b80ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b80d4:	2f02      	cmp	r7, #2
   b80d6:	d0e9      	beq.n	b80ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b80d8:	89a0      	ldrh	r0, [r4, #12]
   b80da:	2300      	movs	r3, #0
   b80dc:	4629      	mov	r1, r5
}
   b80de:	b005      	add	sp, #20
   b80e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b80e4:	f7ff bb30 	b.w	b7748 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b80e8:	8860      	ldrh	r0, [r4, #2]
   b80ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b80ee:	4288      	cmp	r0, r1
   b80f0:	d01c      	beq.n	b812c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b80f2:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b80f4:	074e      	lsls	r6, r1, #29
   b80f6:	d501      	bpl.n	b80fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b80f8:	2f01      	cmp	r7, #1
   b80fa:	d104      	bne.n	b8106 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b80fc:	070b      	lsls	r3, r1, #28
   b80fe:	d409      	bmi.n	b8114 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b8100:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b8104:	e7d2      	b.n	b80ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b8106:	89a1      	ldrh	r1, [r4, #12]
   b8108:	9300      	str	r3, [sp, #0]
   b810a:	4613      	mov	r3, r2
   b810c:	462a      	mov	r2, r5
   b810e:	f7ff faf3 	bl	b76f8 <hal_ble_gatt_client_write_without_response>
   b8112:	e7cb      	b.n	b80ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b8114:	2f02      	cmp	r7, #2
   b8116:	d0f3      	beq.n	b8100 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b8118:	2300      	movs	r3, #0
   b811a:	89a1      	ldrh	r1, [r4, #12]
   b811c:	9300      	str	r3, [sp, #0]
   b811e:	4613      	mov	r3, r2
   b8120:	462a      	mov	r2, r5
   b8122:	f7ff fadf 	bl	b76e4 <hal_ble_gatt_client_write_with_response>
   b8126:	e7c1      	b.n	b80ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b8128:	4802      	ldr	r0, [pc, #8]	; (b8134 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b812a:	e7bf      	b.n	b80ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b812c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b8130:	e7bc      	b.n	b80ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b8132:	bf00      	nop
   b8134:	fffffef2 	.word	0xfffffef2

000b8138 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b8138:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b813a:	460c      	mov	r4, r1
   b813c:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b813e:	21f4      	movs	r1, #244	; 0xf4
   b8140:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b8142:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b8144:	f003 f894 	bl	bb270 <strnlen>
   b8148:	9b01      	ldr	r3, [sp, #4]
   b814a:	4602      	mov	r2, r0
   b814c:	4621      	mov	r1, r4
   b814e:	4628      	mov	r0, r5
}
   b8150:	b003      	add	sp, #12
   b8152:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b8156:	f7ff bf8f 	b.w	b8078 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000b815c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b815c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8160:	2600      	movs	r6, #0
   b8162:	6006      	str	r6, [r0, #0]
   b8164:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8166:	2028      	movs	r0, #40	; 0x28
   b8168:	460c      	mov	r4, r1
   b816a:	f7fb ff94 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b816e:	1e05      	subs	r5, r0, #0
   b8170:	f105 080c 	add.w	r8, r5, #12
   b8174:	d00f      	beq.n	b8196 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b8176:	2301      	movs	r3, #1
   b8178:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b817c:	4b08      	ldr	r3, [pc, #32]	; (b81a0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b817e:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b8180:	4640      	mov	r0, r8
   b8182:	f7ff fe55 	bl	b7e30 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b8186:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b8188:	622e      	str	r6, [r5, #32]
   b818a:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b818e:	4646      	mov	r6, r8
   b8190:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b8192:	6823      	ldr	r3, [r4, #0]
   b8194:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b8196:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b819a:	4638      	mov	r0, r7
   b819c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b81a0:	000bd8cc 	.word	0x000bd8cc

000b81a4 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b81a4:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b81a6:	2500      	movs	r5, #0
   b81a8:	6005      	str	r5, [r0, #0]
   b81aa:	4606      	mov	r6, r0
   b81ac:	2030      	movs	r0, #48	; 0x30
   b81ae:	f7fb ff72 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b81b2:	4604      	mov	r4, r0
   b81b4:	b188      	cbz	r0, b81da <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b81b6:	2301      	movs	r3, #1
   b81b8:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b81bc:	4b09      	ldr	r3, [pc, #36]	; (b81e4 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b81be:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b81c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b81c4:	8183      	strh	r3, [r0, #12]
   b81c6:	300e      	adds	r0, #14
   b81c8:	f7ff fe27 	bl	b7e1a <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b81cc:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b81d0:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b81d4:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b81d8:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b81da:	6074      	str	r4, [r6, #4]
   b81dc:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b81de:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b81e0:	4630      	mov	r0, r6
   b81e2:	bd70      	pop	{r4, r5, r6, pc}
   b81e4:	000bd8e8 	.word	0x000bd8e8

000b81e8 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b81e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b81ea:	460d      	mov	r5, r1
   b81ec:	4604      	mov	r4, r0
    WiringBleLock lk;
   b81ee:	a801      	add	r0, sp, #4
   b81f0:	f7ff fdd8 	bl	b7da4 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b81f4:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b81f6:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b81fa:	6023      	str	r3, [r4, #0]
   b81fc:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b8200:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b8202:	a801      	add	r0, sp, #4
   b8204:	f7ff fddc 	bl	b7dc0 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b8208:	4620      	mov	r0, r4
   b820a:	b003      	add	sp, #12
   b820c:	bd30      	pop	{r4, r5, pc}

000b820e <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b820e:	b530      	push	{r4, r5, lr}
   b8210:	4605      	mov	r5, r0
   b8212:	b087      	sub	sp, #28
   b8214:	460c      	mov	r4, r1
    WiringBleLock lk;
   b8216:	a801      	add	r0, sp, #4
   b8218:	f7ff fdc4 	bl	b7da4 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b821c:	682a      	ldr	r2, [r5, #0]
   b821e:	6823      	ldr	r3, [r4, #0]
   b8220:	8812      	ldrh	r2, [r2, #0]
   b8222:	881b      	ldrh	r3, [r3, #0]
   b8224:	429a      	cmp	r2, r3
   b8226:	d10d      	bne.n	b8244 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b8228:	4629      	mov	r1, r5
   b822a:	a802      	add	r0, sp, #8
   b822c:	f7ff ffdc 	bl	b81e8 <_ZNK8particle13BlePeerDevice7addressEv>
   b8230:	4621      	mov	r1, r4
   b8232:	a804      	add	r0, sp, #16
   b8234:	f7ff ffd8 	bl	b81e8 <_ZNK8particle13BlePeerDevice7addressEv>
   b8238:	a904      	add	r1, sp, #16
   b823a:	a802      	add	r0, sp, #8
   b823c:	f7ff fdd9 	bl	b7df2 <_ZNK8particle10BleAddresseqERKS0_>
   b8240:	4604      	mov	r4, r0
   b8242:	b900      	cbnz	r0, b8246 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b8244:	2400      	movs	r4, #0
    WiringBleLock lk;
   b8246:	a801      	add	r0, sp, #4
   b8248:	f7ff fdba 	bl	b7dc0 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b824c:	4620      	mov	r0, r4
   b824e:	b007      	add	sp, #28
   b8250:	bd30      	pop	{r4, r5, pc}
	...

000b8254 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b8254:	b510      	push	{r4, lr}
   b8256:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b8258:	2064      	movs	r0, #100	; 0x64
   b825a:	f7fb ff1c 	bl	b4096 <_Znwj>
   b825e:	b168      	cbz	r0, b827c <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b8260:	2300      	movs	r3, #0
   b8262:	e9c0 3300 	strd	r3, r3, [r0]
   b8266:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b826a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b826e:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b8272:	6203      	str	r3, [r0, #32]
   b8274:	62c3      	str	r3, [r0, #44]	; 0x2c
   b8276:	63c3      	str	r3, [r0, #60]	; 0x3c
   b8278:	64c3      	str	r3, [r0, #76]	; 0x4c
   b827a:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b827c:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b827e:	b920      	cbnz	r0, b828a <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b8280:	4a0a      	ldr	r2, [pc, #40]	; (b82ac <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b8282:	490b      	ldr	r1, [pc, #44]	; (b82b0 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b8284:	200a      	movs	r0, #10
   b8286:	f7ff fbc1 	bl	b7a0c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b828a:	2000      	movs	r0, #0
   b828c:	f7ff f9ec 	bl	b7668 <hal_ble_stack_init>
   b8290:	b120      	cbz	r0, b829c <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b8292:	4a06      	ldr	r2, [pc, #24]	; (b82ac <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b8294:	4907      	ldr	r1, [pc, #28]	; (b82b4 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b8296:	200a      	movs	r0, #10
   b8298:	f7ff fbb8 	bl	b7a0c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b829c:	6821      	ldr	r1, [r4, #0]
   b829e:	4806      	ldr	r0, [pc, #24]	; (b82b8 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b82a0:	2200      	movs	r2, #0
   b82a2:	f7ff fa3d 	bl	b7720 <hal_ble_set_callback_on_periph_link_events>
}
   b82a6:	4620      	mov	r0, r4
   b82a8:	bd10      	pop	{r4, pc}
   b82aa:	bf00      	nop
   b82ac:	000b779d 	.word	0x000b779d
   b82b0:	000bd75c 	.word	0x000bd75c
   b82b4:	000bd79a 	.word	0x000bd79a
   b82b8:	000b883d 	.word	0x000b883d

000b82bc <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b82bc:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b82be:	4c0a      	ldr	r4, [pc, #40]	; (b82e8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b82c0:	7823      	ldrb	r3, [r4, #0]
   b82c2:	f3bf 8f5b 	dmb	ish
   b82c6:	07db      	lsls	r3, r3, #31
   b82c8:	d40c      	bmi.n	b82e4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b82ca:	4620      	mov	r0, r4
   b82cc:	f7fb feeb 	bl	b40a6 <__cxa_guard_acquire>
   b82d0:	b140      	cbz	r0, b82e4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b82d2:	4806      	ldr	r0, [pc, #24]	; (b82ec <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b82d4:	f7ff ffbe 	bl	b8254 <_ZN8particle14BleLocalDeviceC1Ev>
   b82d8:	4620      	mov	r0, r4
   b82da:	f7fb fee9 	bl	b40b0 <__cxa_guard_release>
   b82de:	4804      	ldr	r0, [pc, #16]	; (b82f0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b82e0:	f002 ff20 	bl	bb124 <atexit>
    return instance;
}
   b82e4:	4801      	ldr	r0, [pc, #4]	; (b82ec <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b82e6:	bd10      	pop	{r4, pc}
   b82e8:	2003e6b8 	.word	0x2003e6b8
   b82ec:	2003e6c4 	.word	0x2003e6c4
   b82f0:	000b8509 	.word	0x000b8509

000b82f4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b82f4:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b82f6:	6803      	ldr	r3, [r0, #0]
   b82f8:	3b09      	subs	r3, #9
   b82fa:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b82fc:	b08d      	sub	sp, #52	; 0x34
   b82fe:	4604      	mov	r4, r0
   b8300:	460d      	mov	r5, r1
    switch (event->type) {
   b8302:	d811      	bhi.n	b8328 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b8304:	f7ff ffda 	bl	b82bc <_ZN8particle14BleLocalDevice11getInstanceEv>
   b8308:	88a1      	ldrh	r1, [r4, #4]
   b830a:	6800      	ldr	r0, [r0, #0]
   b830c:	f7ff fea2 	bl	b8054 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b8310:	4603      	mov	r3, r0
   b8312:	b958      	cbnz	r0, b832c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b8314:	2220      	movs	r2, #32
   b8316:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b831a:	4a0b      	ldr	r2, [pc, #44]	; (b8348 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b831c:	9200      	str	r2, [sp, #0]
   b831e:	490b      	ldr	r1, [pc, #44]	; (b834c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b8320:	aa04      	add	r2, sp, #16
   b8322:	2032      	movs	r0, #50	; 0x32
   b8324:	f7ff fb7a 	bl	b7a1c <log_message>
}
   b8328:	b00d      	add	sp, #52	; 0x34
   b832a:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b832c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b832e:	2a00      	cmp	r2, #0
   b8330:	d0fa      	beq.n	b8328 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b8332:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8336:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b833a:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b833e:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b8340:	aa04      	add	r2, sp, #16
   b8342:	a903      	add	r1, sp, #12
   b8344:	47a0      	blx	r4
}
   b8346:	e7ef      	b.n	b8328 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b8348:	000bd7dc 	.word	0x000bd7dc
   b834c:	000bd773 	.word	0x000bd773

000b8350 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b8350:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b8352:	2000      	movs	r0, #0
   b8354:	f7ff f988 	bl	b7668 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b8358:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b835c:	bd08      	pop	{r3, pc}

000b835e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b835e:	b919      	cbnz	r1, b8368 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b8360:	460a      	mov	r2, r1
   b8362:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b8364:	f7ff b988 	b.w	b7678 <hal_ble_gap_set_advertising_data>
   b8368:	e9d1 0100 	ldrd	r0, r1, [r1]
   b836c:	2200      	movs	r2, #0
   b836e:	e7f9      	b.n	b8364 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b8370 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b8370:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b8372:	1e14      	subs	r4, r2, #0
   b8374:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b8376:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b8378:	db02      	blt.n	b8380 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b837a:	1862      	adds	r2, r4, r1
   b837c:	429a      	cmp	r2, r3
   b837e:	dd00      	ble.n	b8382 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b8380:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b8382:	682a      	ldr	r2, [r5, #0]
   b8384:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b8386:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b8388:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b838a:	1a52      	subs	r2, r2, r1
   b838c:	f002 fef2 	bl	bb174 <memmove>
    size_ -= n;
   b8390:	686a      	ldr	r2, [r5, #4]
   b8392:	1b12      	subs	r2, r2, r4
   b8394:	606a      	str	r2, [r5, #4]
}
   b8396:	bd38      	pop	{r3, r4, r5, pc}

000b8398 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b8398:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b839a:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b839c:	4604      	mov	r4, r0
   b839e:	460d      	mov	r5, r1
   b83a0:	ab01      	add	r3, sp, #4
   b83a2:	e9d0 0100 	ldrd	r0, r1, [r0]
   b83a6:	f7ff fc73 	bl	b7c90 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b83aa:	4602      	mov	r2, r0
   b83ac:	b138      	cbz	r0, b83be <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b83ae:	9901      	ldr	r1, [sp, #4]
   b83b0:	4620      	mov	r0, r4
   b83b2:	f7ff ffdd 	bl	b8370 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b83b6:	4629      	mov	r1, r5
   b83b8:	4620      	mov	r0, r4
   b83ba:	f7ff ffed 	bl	b8398 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b83be:	b003      	add	sp, #12
   b83c0:	bd30      	pop	{r4, r5, pc}

000b83c2 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b83c2:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b83c4:	460c      	mov	r4, r1
   b83c6:	b929      	cbnz	r1, b83d4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b83c8:	460a      	mov	r2, r1
   b83ca:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b83cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b83d0:	f7ff b95a 	b.w	b7688 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b83d4:	2101      	movs	r1, #1
   b83d6:	4620      	mov	r0, r4
   b83d8:	f7ff ffde 	bl	b8398 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b83dc:	e9d4 0100 	ldrd	r0, r1, [r4]
   b83e0:	2200      	movs	r2, #0
   b83e2:	e7f3      	b.n	b83cc <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b83e4 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b83e4:	b538      	push	{r3, r4, r5, lr}
   b83e6:	4604      	mov	r4, r0
   b83e8:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b83ea:	f7ff ffb8 	bl	b835e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b83ee:	2800      	cmp	r0, #0
   b83f0:	db0a      	blt.n	b8408 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b83f2:	4629      	mov	r1, r5
   b83f4:	4620      	mov	r0, r4
   b83f6:	f7ff ffe4 	bl	b83c2 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b83fa:	2800      	cmp	r0, #0
   b83fc:	db04      	blt.n	b8408 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b83fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b8402:	2000      	movs	r0, #0
   b8404:	f7ff b948 	b.w	b7698 <hal_ble_gap_start_advertising>
}
   b8408:	bd38      	pop	{r3, r4, r5, pc}
	...

000b840c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b840c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b840e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b8410:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b8412:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8414:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b8416:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8418:	f7fb fe3d 	bl	b4096 <_Znwj>
   b841c:	b118      	cbz	r0, b8426 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b841e:	682b      	ldr	r3, [r5, #0]
   b8420:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b8422:	686b      	ldr	r3, [r5, #4]
   b8424:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b8426:	4b03      	ldr	r3, [pc, #12]	; (b8434 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b8428:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b842a:	4b03      	ldr	r3, [pc, #12]	; (b8438 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b842c:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b842e:	60a3      	str	r3, [r4, #8]
      }
   b8430:	4620      	mov	r0, r4
   b8432:	bd38      	pop	{r3, r4, r5, pc}
   b8434:	000b7cd1 	.word	0x000b7cd1
   b8438:	000b7ce9 	.word	0x000b7ce9

000b843c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b843c:	680b      	ldr	r3, [r1, #0]
   b843e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b8440:	b113      	cbz	r3, b8448 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b8442:	685a      	ldr	r2, [r3, #4]
   b8444:	3201      	adds	r2, #1
   b8446:	605a      	str	r2, [r3, #4]
      }
   b8448:	4770      	bx	lr

000b844a <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b844a:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b844c:	f851 3b04 	ldr.w	r3, [r1], #4
   b8450:	4604      	mov	r4, r0
   b8452:	f840 3b04 	str.w	r3, [r0], #4
   b8456:	f7ff fff1 	bl	b843c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b845a:	6823      	ldr	r3, [r4, #0]
   b845c:	b90b      	cbnz	r3, b8462 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b845e:	f7ff fc2d 	bl	b7cbc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b8462:	4620      	mov	r0, r4
   b8464:	bd10      	pop	{r4, pc}

000b8466 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b8466:	b510      	push	{r4, lr}
   b8468:	f851 3b04 	ldr.w	r3, [r1], #4
   b846c:	4604      	mov	r4, r0
   b846e:	f840 3b04 	str.w	r3, [r0], #4
   b8472:	f7ff ffe3 	bl	b843c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b8476:	4620      	mov	r0, r4
   b8478:	bd10      	pop	{r4, pc}

000b847a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b847a:	b510      	push	{r4, lr}
   b847c:	f851 3b04 	ldr.w	r3, [r1], #4
   b8480:	4604      	mov	r4, r0
   b8482:	f840 3b04 	str.w	r3, [r0], #4
   b8486:	f7ff ffd9 	bl	b843c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b848a:	4620      	mov	r0, r4
   b848c:	bd10      	pop	{r4, pc}

000b848e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b848e:	b510      	push	{r4, lr}
   b8490:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b8492:	6800      	ldr	r0, [r0, #0]
   b8494:	b108      	cbz	r0, b849a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b8496:	f7ff fc5b 	bl	b7d50 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b849a:	4620      	mov	r0, r4
   b849c:	bd10      	pop	{r4, pc}

000b849e <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b849e:	b510      	push	{r4, lr}
   b84a0:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b84a2:	3004      	adds	r0, #4
   b84a4:	f7ff fff3 	bl	b848e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b84a8:	4620      	mov	r0, r4
   b84aa:	bd10      	pop	{r4, pc}

000b84ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b84ac:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b84ae:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b84b2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b84b4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b84b8:	42ae      	cmp	r6, r5
   b84ba:	d004      	beq.n	b84c6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b84bc:	1d28      	adds	r0, r5, #4
   b84be:	f7ff ffe6 	bl	b848e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b84c2:	3508      	adds	r5, #8
   b84c4:	e7f8      	b.n	b84b8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b84c6:	6820      	ldr	r0, [r4, #0]
   b84c8:	f7ff fb44 	bl	b7b54 <free>
}
   b84cc:	4620      	mov	r0, r4
   b84ce:	bd70      	pop	{r4, r5, r6, pc}

000b84d0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b84d0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b84d2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b84d6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b84d8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b84dc:	42ae      	cmp	r6, r5
   b84de:	d004      	beq.n	b84ea <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b84e0:	1d28      	adds	r0, r5, #4
   b84e2:	f7ff ffd4 	bl	b848e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b84e6:	3508      	adds	r5, #8
   b84e8:	e7f8      	b.n	b84dc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b84ea:	6820      	ldr	r0, [r4, #0]
   b84ec:	f7ff fb32 	bl	b7b54 <free>
}
   b84f0:	4620      	mov	r0, r4
   b84f2:	bd70      	pop	{r4, r5, r6, pc}

000b84f4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b84f4:	b510      	push	{r4, lr}
   b84f6:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b84f8:	3024      	adds	r0, #36	; 0x24
   b84fa:	f7ff ffe9 	bl	b84d0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b84fe:	f104 0018 	add.w	r0, r4, #24
   b8502:	f7ff ffd3 	bl	b84ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b8506:	bd10      	pop	{r4, pc}

000b8508 <__tcf_0>:
    static BleLocalDevice instance;
   b8508:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b850a:	4b17      	ldr	r3, [pc, #92]	; (b8568 <__tcf_0+0x60>)
   b850c:	681c      	ldr	r4, [r3, #0]
   b850e:	b354      	cbz	r4, b8566 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b8510:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b8514:	f7ff fc08 	bl	b7d28 <_ZNSt14_Function_baseD1Ev>
   b8518:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b851c:	f7ff fc04 	bl	b7d28 <_ZNSt14_Function_baseD1Ev>
   b8520:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8524:	f7ff fc00 	bl	b7d28 <_ZNSt14_Function_baseD1Ev>
   b8528:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b852c:	f7ff fbfc 	bl	b7d28 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b8530:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b8534:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8538:	42ae      	cmp	r6, r5
   b853a:	d004      	beq.n	b8546 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b853c:	1d28      	adds	r0, r5, #4
   b853e:	f7ff ffa6 	bl	b848e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8542:	3508      	adds	r5, #8
   b8544:	e7f8      	b.n	b8538 <__tcf_0+0x30>
    ::free(ptr);
   b8546:	69a0      	ldr	r0, [r4, #24]
   b8548:	f7ff fb04 	bl	b7b54 <free>
    ~BleLocalDeviceImpl() = default;
   b854c:	f104 000c 	add.w	r0, r4, #12
   b8550:	f7ff ffbe 	bl	b84d0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b8554:	4620      	mov	r0, r4
   b8556:	f7ff ffa9 	bl	b84ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b855a:	4620      	mov	r0, r4
   b855c:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b855e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8562:	f7fb bd9e 	b.w	b40a2 <_ZdlPvj>
   b8566:	bd70      	pop	{r4, r5, r6, pc}
   b8568:	2003e6c4 	.word	0x2003e6c4

000b856c <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b856c:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b856e:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8570:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b8574:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b8578:	6803      	ldr	r3, [r0, #0]
   b857a:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b857c:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b857e:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b8580:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b8582:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b8584:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b8586:	f7ff ff82 	bl	b848e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b858a:	b002      	add	sp, #8
   b858c:	bd10      	pop	{r4, pc}

000b858e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b858e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b8590:	b510      	push	{r4, lr}
      if (_M_empty())
   b8592:	b90a      	cbnz	r2, b8598 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b8594:	f001 fe01 	bl	ba19a <_ZSt25__throw_bad_function_callv>
    }
   b8598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b859c:	68c3      	ldr	r3, [r0, #12]
   b859e:	4718      	bx	r3

000b85a0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b85a0:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b85a2:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b85a4:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b85a6:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b85a8:	dd03      	ble.n	b85b2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b85aa:	f7ff fadb 	bl	b7b64 <realloc>
            if (!d) {
   b85ae:	b918      	cbnz	r0, b85b8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b85b0:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b85b2:	f7ff facf 	bl	b7b54 <free>
        T* d = nullptr;
   b85b6:	2000      	movs	r0, #0
        data_ = d;
   b85b8:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b85ba:	60a5      	str	r5, [r4, #8]
        return true;
   b85bc:	2001      	movs	r0, #1
   b85be:	e7f7      	b.n	b85b0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b85c0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b85c0:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b85c2:	6883      	ldr	r3, [r0, #8]
   b85c4:	428b      	cmp	r3, r1
   b85c6:	da02      	bge.n	b85ce <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b85c8:	f7ff ffea 	bl	b85a0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b85cc:	bd08      	pop	{r3, pc}
    return true;
   b85ce:	2001      	movs	r0, #1
   b85d0:	e7fc      	b.n	b85cc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b85d2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b85d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b85d6:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b85d8:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b85da:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b85dc:	4419      	add	r1, r3
   b85de:	6883      	ldr	r3, [r0, #8]
   b85e0:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b85e2:	4604      	mov	r4, r0
   b85e4:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b85e6:	dc12      	bgt.n	b860e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b85e8:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b85ea:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b85ec:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b85ee:	1bd2      	subs	r2, r2, r7
   b85f0:	4631      	mov	r1, r6
   b85f2:	1970      	adds	r0, r6, r5
   b85f4:	f002 fdbe 	bl	bb174 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b85f8:	462a      	mov	r2, r5
   b85fa:	4641      	mov	r1, r8
   b85fc:	4630      	mov	r0, r6
   b85fe:	f002 fdab 	bl	bb158 <memcpy>
    size_ += n;
   b8602:	6863      	ldr	r3, [r4, #4]
   b8604:	442b      	add	r3, r5
   b8606:	6063      	str	r3, [r4, #4]
    return true;
   b8608:	2001      	movs	r0, #1
}
   b860a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b860e:	f7ff ffc7 	bl	b85a0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8612:	2800      	cmp	r0, #0
   b8614:	d1e8      	bne.n	b85e8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b8616:	e7f8      	b.n	b860a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b8618 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b861a:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b861c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b8620:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8622:	4604      	mov	r4, r0
   b8624:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8626:	da0b      	bge.n	b8640 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b8628:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b862a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b862c:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b862e:	1b52      	subs	r2, r2, r5
   b8630:	1c48      	adds	r0, r1, #1
   b8632:	f002 fd9f 	bl	bb174 <memmove>
    new(p) T(std::move(value));
   b8636:	557e      	strb	r6, [r7, r5]
    ++size_;
   b8638:	6863      	ldr	r3, [r4, #4]
   b863a:	3301      	adds	r3, #1
   b863c:	6063      	str	r3, [r4, #4]
}
   b863e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8640:	3101      	adds	r1, #1
   b8642:	f7ff ffad 	bl	b85a0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8646:	2800      	cmp	r0, #0
   b8648:	d1ee      	bne.n	b8628 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b864a:	e7f8      	b.n	b863e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b864c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b864c:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b864e:	6841      	ldr	r1, [r0, #4]
   b8650:	f7ff bfe2 	b.w	b8618 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b8654 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b8654:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b8658:	4604      	mov	r4, r0
   b865a:	461d      	mov	r5, r3
   b865c:	460f      	mov	r7, r1
   b865e:	ab01      	add	r3, sp, #4
   b8660:	4690      	mov	r8, r2
   b8662:	460a      	mov	r2, r1
   b8664:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8668:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b866c:	f7ff fb10 	bl	b7c90 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b8670:	1cae      	adds	r6, r5, #2
   b8672:	6863      	ldr	r3, [r4, #4]
   b8674:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b8676:	f1b9 0f00 	cmp.w	r9, #0
   b867a:	d126      	bne.n	b86ca <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b867c:	b328      	cbz	r0, b86ca <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b867e:	4433      	add	r3, r6
   b8680:	1a1b      	subs	r3, r3, r0
   b8682:	2bff      	cmp	r3, #255	; 0xff
   b8684:	d809      	bhi.n	b869a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b8686:	9901      	ldr	r1, [sp, #4]
   b8688:	4620      	mov	r0, r4
   b868a:	f7ff fe71 	bl	b8370 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b868e:	6861      	ldr	r1, [r4, #4]
   b8690:	4620      	mov	r0, r4
   b8692:	4431      	add	r1, r6
   b8694:	f7ff ff94 	bl	b85c0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b8698:	b918      	cbnz	r0, b86a2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b869a:	6860      	ldr	r0, [r4, #4]
}
   b869c:	b003      	add	sp, #12
   b869e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b86a2:	1c6a      	adds	r2, r5, #1
   b86a4:	9901      	ldr	r1, [sp, #4]
   b86a6:	b2d2      	uxtb	r2, r2
   b86a8:	4620      	mov	r0, r4
   b86aa:	f7ff ffb5 	bl	b8618 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b86ae:	9901      	ldr	r1, [sp, #4]
   b86b0:	463a      	mov	r2, r7
   b86b2:	3101      	adds	r1, #1
   b86b4:	4620      	mov	r0, r4
   b86b6:	f7ff ffaf 	bl	b8618 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b86ba:	9901      	ldr	r1, [sp, #4]
   b86bc:	462b      	mov	r3, r5
   b86be:	4642      	mov	r2, r8
   b86c0:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b86c2:	4620      	mov	r0, r4
   b86c4:	f7ff ff85 	bl	b85d2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b86c8:	e7e7      	b.n	b869a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b86ca:	18f1      	adds	r1, r6, r3
   b86cc:	29ff      	cmp	r1, #255	; 0xff
   b86ce:	d8e4      	bhi.n	b869a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b86d0:	4620      	mov	r0, r4
   b86d2:	f7ff ff75 	bl	b85c0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b86d6:	2800      	cmp	r0, #0
   b86d8:	d0df      	beq.n	b869a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b86da:	1c69      	adds	r1, r5, #1
   b86dc:	b2c9      	uxtb	r1, r1
   b86de:	4620      	mov	r0, r4
   b86e0:	f7ff ffb4 	bl	b864c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b86e4:	4639      	mov	r1, r7
   b86e6:	4620      	mov	r0, r4
   b86e8:	f7ff ffb0 	bl	b864c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b86ec:	6861      	ldr	r1, [r4, #4]
   b86ee:	462b      	mov	r3, r5
   b86f0:	4642      	mov	r2, r8
   b86f2:	e7e6      	b.n	b86c2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b86f4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b86f4:	b430      	push	{r4, r5}
   b86f6:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b86fa:	b11a      	cbz	r2, b8704 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b86fc:	9502      	str	r5, [sp, #8]
}
   b86fe:	bc30      	pop	{r4, r5}
   b8700:	f7ff bfa8 	b.w	b8654 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b8704:	6840      	ldr	r0, [r0, #4]
}
   b8706:	bc30      	pop	{r4, r5}
   b8708:	4770      	bx	lr

000b870a <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b870a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b870c:	2300      	movs	r3, #0
   b870e:	e9c0 3300 	strd	r3, r3, [r0]
   b8712:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b8714:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8716:	9300      	str	r3, [sp, #0]
   b8718:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b871a:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b871e:	4619      	mov	r1, r3
   b8720:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b8724:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8726:	f7ff ffe5 	bl	b86f4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b872a:	4620      	mov	r0, r4
   b872c:	b004      	add	sp, #16
   b872e:	bd10      	pop	{r4, pc}

000b8730 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8730:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8732:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8734:	4604      	mov	r4, r0
   b8736:	460d      	mov	r5, r1
   b8738:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b873a:	d914      	bls.n	b8766 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b873c:	4290      	cmp	r0, r2
   b873e:	d213      	bcs.n	b8768 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8740:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8744:	1a75      	subs	r5, r6, r1
   b8746:	f1a1 0708 	sub.w	r7, r1, #8
   b874a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b874c:	42b7      	cmp	r7, r6
   b874e:	d018      	beq.n	b8782 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8750:	b11c      	cbz	r4, b875a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8752:	4631      	mov	r1, r6
   b8754:	4620      	mov	r0, r4
   b8756:	f7ff fe90 	bl	b847a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b875a:	1d30      	adds	r0, r6, #4
   b875c:	f7ff fe97 	bl	b848e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8760:	3e08      	subs	r6, #8
   b8762:	3c08      	subs	r4, #8
   b8764:	e7f2      	b.n	b874c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8766:	d00c      	beq.n	b8782 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8768:	42b5      	cmp	r5, r6
   b876a:	d00a      	beq.n	b8782 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b876c:	b11c      	cbz	r4, b8776 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b876e:	4629      	mov	r1, r5
   b8770:	4620      	mov	r0, r4
   b8772:	f7ff fe82 	bl	b847a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8776:	1d28      	adds	r0, r5, #4
   b8778:	f7ff fe89 	bl	b848e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b877c:	3508      	adds	r5, #8
   b877e:	3408      	adds	r4, #8
   b8780:	e7f2      	b.n	b8768 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8784 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8786:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8788:	6846      	ldr	r6, [r0, #4]
   b878a:	4668      	mov	r0, sp
   b878c:	f7ff fe75 	bl	b847a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8790:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b8794:	429f      	cmp	r7, r3
   b8796:	db12      	blt.n	b87be <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b8798:	3701      	adds	r7, #1
        if (n > 0) {
   b879a:	2f00      	cmp	r7, #0
   b879c:	dd29      	ble.n	b87f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b879e:	00f8      	lsls	r0, r7, #3
   b87a0:	f7ff f9d0 	bl	b7b44 <malloc>
            if (!d) {
   b87a4:	4605      	mov	r5, r0
   b87a6:	b1f0      	cbz	r0, b87e6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b87a8:	e9d4 1200 	ldrd	r1, r2, [r4]
   b87ac:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b87b0:	f7ff ffbe 	bl	b8730 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b87b4:	6820      	ldr	r0, [r4, #0]
   b87b6:	f7ff f9cd 	bl	b7b54 <free>
        data_ = d;
   b87ba:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b87bc:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b87be:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b87c0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b87c2:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b87c6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b87ca:	4631      	mov	r1, r6
   b87cc:	f106 0008 	add.w	r0, r6, #8
   b87d0:	f7ff ffae 	bl	b8730 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b87d4:	b11e      	cbz	r6, b87de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b87d6:	4669      	mov	r1, sp
   b87d8:	4630      	mov	r0, r6
   b87da:	f7ff fe4e 	bl	b847a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b87de:	6863      	ldr	r3, [r4, #4]
   b87e0:	3301      	adds	r3, #1
   b87e2:	6063      	str	r3, [r4, #4]
    return true;
   b87e4:	2501      	movs	r5, #1
   b87e6:	a801      	add	r0, sp, #4
   b87e8:	f7ff fe51 	bl	b848e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b87ec:	4628      	mov	r0, r5
   b87ee:	b003      	add	sp, #12
   b87f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b87f2:	2500      	movs	r5, #0
   b87f4:	e7de      	b.n	b87b4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b87f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b87f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b87f8:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b87fc:	4605      	mov	r5, r0
   b87fe:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b8800:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b8804:	42a6      	cmp	r6, r4
   b8806:	d005      	beq.n	b8814 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b8808:	4639      	mov	r1, r7
   b880a:	4620      	mov	r0, r4
   b880c:	f7ff fcff 	bl	b820e <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b8810:	b108      	cbz	r0, b8816 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b8812:	b914      	cbnz	r4, b881a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b8814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b8816:	3408      	adds	r4, #8
   b8818:	e7f4      	b.n	b8804 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b881a:	1d20      	adds	r0, r4, #4
   b881c:	f7ff fe37 	bl	b848e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b8820:	e9d5 3200 	ldrd	r3, r2, [r5]
   b8824:	f104 0108 	add.w	r1, r4, #8
   b8828:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b882c:	4620      	mov	r0, r4
   b882e:	f7ff ff7f 	bl	b8730 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b8832:	686b      	ldr	r3, [r5, #4]
   b8834:	3b01      	subs	r3, #1
   b8836:	606b      	str	r3, [r5, #4]
    return true;
   b8838:	e7ec      	b.n	b8814 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b883c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b883c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8840:	4605      	mov	r5, r0
   b8842:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b8844:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b8846:	460c      	mov	r4, r1
        WiringBleLock lk;
   b8848:	f7ff faac 	bl	b7da4 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b884c:	682e      	ldr	r6, [r5, #0]
   b884e:	1ef3      	subs	r3, r6, #3
   b8850:	2b0d      	cmp	r3, #13
   b8852:	d83c      	bhi.n	b88ce <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8854:	e8df f013 	tbh	[pc, r3, lsl #1]
   b8858:	0053000e 	.word	0x0053000e
   b885c:	00d1003b 	.word	0x00d1003b
   b8860:	003b003b 	.word	0x003b003b
   b8864:	003b003b 	.word	0x003b003b
   b8868:	009b003b 	.word	0x009b003b
   b886c:	009b009b 	.word	0x009b009b
   b8870:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b8874:	a804      	add	r0, sp, #16
   b8876:	f7ff fc95 	bl	b81a4 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b887a:	9b04      	ldr	r3, [sp, #16]
   b887c:	89aa      	ldrh	r2, [r5, #12]
   b887e:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b8880:	6869      	ldr	r1, [r5, #4]
   b8882:	9804      	ldr	r0, [sp, #16]
   b8884:	3108      	adds	r1, #8
   b8886:	3002      	adds	r0, #2
   b8888:	f7ff faa6 	bl	b7dd8 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b888c:	a904      	add	r1, sp, #16
   b888e:	a806      	add	r0, sp, #24
   b8890:	f7ff fdf3 	bl	b847a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b8894:	a906      	add	r1, sp, #24
   b8896:	f104 0018 	add.w	r0, r4, #24
   b889a:	f7ff ff73 	bl	b8784 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b889e:	4605      	mov	r5, r0
   b88a0:	a807      	add	r0, sp, #28
   b88a2:	f7ff fdf4 	bl	b848e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b88a6:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b88a8:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b88aa:	b9b5      	cbnz	r5, b88da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b88ac:	4b5d      	ldr	r3, [pc, #372]	; (b8a24 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b88ae:	495e      	ldr	r1, [pc, #376]	; (b8a28 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b88b0:	9300      	str	r3, [sp, #0]
   b88b2:	2032      	movs	r0, #50	; 0x32
   b88b4:	462b      	mov	r3, r5
   b88b6:	aa06      	add	r2, sp, #24
   b88b8:	9507      	str	r5, [sp, #28]
   b88ba:	f7ff f8af 	bl	b7a1c <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b88be:	9b04      	ldr	r3, [sp, #16]
   b88c0:	4629      	mov	r1, r5
   b88c2:	8818      	ldrh	r0, [r3, #0]
   b88c4:	f7fe fef0 	bl	b76a8 <hal_ble_gap_disconnect>
   b88c8:	a805      	add	r0, sp, #20
   b88ca:	f7ff fde0 	bl	b848e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b88ce:	a803      	add	r0, sp, #12
   b88d0:	f7ff fa76 	bl	b7dc0 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b88d4:	b00e      	add	sp, #56	; 0x38
   b88d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b88da:	4a54      	ldr	r2, [pc, #336]	; (b8a2c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b88dc:	9200      	str	r2, [sp, #0]
   b88de:	2300      	movs	r3, #0
   b88e0:	4951      	ldr	r1, [pc, #324]	; (b8a28 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b88e2:	9307      	str	r3, [sp, #28]
   b88e4:	aa06      	add	r2, sp, #24
   b88e6:	2001      	movs	r0, #1
   b88e8:	f7ff f898 	bl	b7a1c <log_message>
                if (impl->connectedCallback_) {
   b88ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b88ee:	2b00      	cmp	r3, #0
   b88f0:	d0ea      	beq.n	b88c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b88f2:	a904      	add	r1, sp, #16
   b88f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b88f8:	f7ff fe49 	bl	b858e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b88fc:	e7e4      	b.n	b88c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b88fe:	89a9      	ldrh	r1, [r5, #12]
   b8900:	4620      	mov	r0, r4
   b8902:	f7ff fba7 	bl	b8054 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b8906:	4606      	mov	r6, r0
   b8908:	2800      	cmp	r0, #0
   b890a:	d0e0      	beq.n	b88ce <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b890c:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b890e:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b8912:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8916:	8029      	strh	r1, [r5, #0]
   b8918:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b891c:	429a      	cmp	r2, r3
   b891e:	d003      	beq.n	b8928 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b8920:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b8924:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b8926:	e7f9      	b.n	b891c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b8928:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b892c:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b8930:	45b8      	cmp	r8, r7
   b8932:	d004      	beq.n	b893e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b8934:	1d38      	adds	r0, r7, #4
   b8936:	f7ff fdaa 	bl	b848e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b893a:	3708      	adds	r7, #8
   b893c:	e7f8      	b.n	b8930 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b893e:	2300      	movs	r3, #0
   b8940:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b8942:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b8946:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b894a:	45b8      	cmp	r8, r7
   b894c:	d004      	beq.n	b8958 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b894e:	1d38      	adds	r0, r7, #4
   b8950:	f7ff fd9d 	bl	b848e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8954:	3708      	adds	r7, #8
   b8956:	e7f8      	b.n	b894a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b8958:	2300      	movs	r3, #0
   b895a:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b895c:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b895e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8960:	b123      	cbz	r3, b896c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b8962:	4631      	mov	r1, r6
   b8964:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8968:	f7ff fe11 	bl	b858e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b896c:	2300      	movs	r3, #0
   b896e:	2220      	movs	r2, #32
   b8970:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b8974:	4a2e      	ldr	r2, [pc, #184]	; (b8a30 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b8976:	9200      	str	r2, [sp, #0]
   b8978:	492b      	ldr	r1, [pc, #172]	; (b8a28 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b897a:	aa06      	add	r2, sp, #24
   b897c:	2001      	movs	r0, #1
   b897e:	f7ff f84d 	bl	b7a1c <log_message>
                    impl->peers_.removeOne(*peer);
   b8982:	4631      	mov	r1, r6
   b8984:	f104 0018 	add.w	r0, r4, #24
   b8988:	f7ff ff35 	bl	b87f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b898c:	e79f      	b.n	b88ce <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b898e:	89a9      	ldrh	r1, [r5, #12]
   b8990:	4620      	mov	r0, r4
   b8992:	f7ff fb5f 	bl	b8054 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b8996:	2800      	cmp	r0, #0
   b8998:	d099      	beq.n	b88ce <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b899a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b899c:	2b00      	cmp	r3, #0
   b899e:	d096      	beq.n	b88ce <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b89a0:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b89a2:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b89a4:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b89a8:	d001      	beq.n	b89ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b89aa:	2e10      	cmp	r6, #16
   b89ac:	d117      	bne.n	b89de <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b89ae:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b89b0:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b89b2:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b89b4:	2506      	movs	r5, #6
                        };
   b89b6:	f88d 3015 	strb.w	r3, [sp, #21]
   b89ba:	9104      	str	r1, [sp, #16]
   b89bc:	f88d 2014 	strb.w	r2, [sp, #20]
   b89c0:	9006      	str	r0, [sp, #24]
   b89c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b89c6:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b89c8:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b89cc:	9508      	str	r5, [sp, #32]
   b89ce:	e883 0003 	stmia.w	r3, {r0, r1}
   b89d2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b89d4:	a906      	add	r1, sp, #24
   b89d6:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b89da:	4798      	blx	r3
   b89dc:	e777      	b.n	b88ce <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b89de:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b89e0:	bf01      	itttt	eq
   b89e2:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b89e4:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b89e6:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b89ea:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b89ec:	bf0f      	iteee	eq
   b89ee:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b89f2:	461a      	movne	r2, r3
   b89f4:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b89f6:	461d      	movne	r5, r3
   b89f8:	e7dd      	b.n	b89b6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b89fa:	89a9      	ldrh	r1, [r5, #12]
   b89fc:	4620      	mov	r0, r4
   b89fe:	f7ff fb29 	bl	b8054 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b8a02:	4601      	mov	r1, r0
   b8a04:	2800      	cmp	r0, #0
   b8a06:	f43f af62 	beq.w	b88ce <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8a0a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b8a0c:	2b00      	cmp	r3, #0
   b8a0e:	f43f af5e 	beq.w	b88ce <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b8a12:	686b      	ldr	r3, [r5, #4]
   b8a14:	9306      	str	r3, [sp, #24]
   b8a16:	aa06      	add	r2, sp, #24
   b8a18:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b8a1a:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b8a1e:	4798      	blx	r3
   b8a20:	e755      	b.n	b88ce <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8a22:	bf00      	nop
   b8a24:	000bd7f4 	.word	0x000bd7f4
   b8a28:	000bd773 	.word	0x000bd773
   b8a2c:	000bd81a 	.word	0x000bd81a
   b8a30:	000bd837 	.word	0x000bd837

000b8a34 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b8a34:	b513      	push	{r0, r1, r4, lr}
   b8a36:	460b      	mov	r3, r1
   b8a38:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8a3a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8a3e:	466c      	mov	r4, sp
   b8a40:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b8a44:	e893 0003 	ldmia.w	r3, {r0, r1}
   b8a48:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b8a4c:	e894 0003 	ldmia.w	r4, {r0, r1}
   b8a50:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b8a54:	b002      	add	sp, #8
   b8a56:	bd10      	pop	{r4, pc}

000b8a58 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b8a58:	b538      	push	{r3, r4, r5, lr}
   b8a5a:	4605      	mov	r5, r0
   b8a5c:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b8a5e:	f7ff ffe9 	bl	b8a34 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8a62:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8a64:	68a2      	ldr	r2, [r4, #8]
   b8a66:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8a68:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8a6a:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8a6c:	68e2      	ldr	r2, [r4, #12]
   b8a6e:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8a70:	60e3      	str	r3, [r4, #12]
      }
   b8a72:	bd38      	pop	{r3, r4, r5, pc}

000b8a74 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b8a74:	b570      	push	{r4, r5, r6, lr}
   b8a76:	4604      	mov	r4, r0
   b8a78:	b08c      	sub	sp, #48	; 0x30
   b8a7a:	460e      	mov	r6, r1
   b8a7c:	9201      	str	r2, [sp, #4]
   b8a7e:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b8a80:	f7ff fac8 	bl	b8014 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b8a84:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b8a86:	9901      	ldr	r1, [sp, #4]
   b8a88:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b8a8c:	f000 fd66 	bl	b955c <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b8a90:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b8a94:	b1cd      	cbz	r5, b8aca <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b8a96:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b8a98:	9502      	str	r5, [sp, #8]
   b8a9a:	a902      	add	r1, sp, #8
   b8a9c:	a804      	add	r0, sp, #16
   b8a9e:	9303      	str	r3, [sp, #12]
   b8aa0:	f7ff fcb4 	bl	b840c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b8aa4:	2300      	movs	r3, #0
	__x.swap(*this);
   b8aa6:	a908      	add	r1, sp, #32
   b8aa8:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b8aaa:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b8aac:	f7ff ffd4 	bl	b8a58 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b8ab0:	4631      	mov	r1, r6
   b8ab2:	a808      	add	r0, sp, #32
   b8ab4:	f7ff ffd0 	bl	b8a58 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b8ab8:	a808      	add	r0, sp, #32
   b8aba:	f7ff f935 	bl	b7d28 <_ZNSt14_Function_baseD1Ev>
   b8abe:	a804      	add	r0, sp, #16
   b8ac0:	f7ff f932 	bl	b7d28 <_ZNSt14_Function_baseD1Ev>
    }
   b8ac4:	4620      	mov	r0, r4
   b8ac6:	b00c      	add	sp, #48	; 0x30
   b8ac8:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b8aca:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b8acc:	e7ea      	b.n	b8aa4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b8ad0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b8ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8ad4:	b087      	sub	sp, #28
   b8ad6:	461d      	mov	r5, r3
   b8ad8:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b8adc:	4680      	mov	r8, r0
   b8ade:	468b      	mov	fp, r1
   b8ae0:	4692      	mov	sl, r2
   b8ae2:	9912      	ldr	r1, [sp, #72]	; 0x48
   b8ae4:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8ae6:	2200      	movs	r2, #0
   b8ae8:	2068      	movs	r0, #104	; 0x68
   b8aea:	9102      	str	r1, [sp, #8]
   b8aec:	9204      	str	r2, [sp, #16]
   b8aee:	f7fb fad2 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b8af2:	1e06      	subs	r6, r0, #0
   b8af4:	f106 090c 	add.w	r9, r6, #12
   b8af8:	d018      	beq.n	b8b2c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b8afa:	2201      	movs	r2, #1
	: _M_impl(__a)
   b8afc:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b8afe:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b8b02:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b8b04:	4a15      	ldr	r2, [pc, #84]	; (b8b5c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b8b06:	f847 2b20 	str.w	r2, [r7], #32
   b8b0a:	9b03      	ldr	r3, [sp, #12]
   b8b0c:	9100      	str	r1, [sp, #0]
   b8b0e:	465a      	mov	r2, fp
   b8b10:	4651      	mov	r1, sl
   b8b12:	4648      	mov	r0, r9
   b8b14:	f7ff ffae 	bl	b8a74 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b8b18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8b1a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b8b1c:	682b      	ldr	r3, [r5, #0]
   b8b1e:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b8b20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8b22:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b8b26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8b28:	6823      	ldr	r3, [r4, #0]
   b8b2a:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b8b2c:	a904      	add	r1, sp, #16
   b8b2e:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b8b30:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b8b34:	f7ff fd1a 	bl	b856c <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b8b38:	a805      	add	r0, sp, #20
   b8b3a:	f7ff fca8 	bl	b848e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b8b3e:	f8d8 3000 	ldr.w	r3, [r8]
   b8b42:	b93b      	cbnz	r3, b8b54 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b8b44:	4a06      	ldr	r2, [pc, #24]	; (b8b60 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b8b46:	4907      	ldr	r1, [pc, #28]	; (b8b64 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b8b48:	200a      	movs	r0, #10
}
   b8b4a:	b007      	add	sp, #28
   b8b4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b8b50:	f7fe bf5c 	b.w	b7a0c <panic_>
}
   b8b54:	b007      	add	sp, #28
   b8b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8b5a:	bf00      	nop
   b8b5c:	000bd8b0 	.word	0x000bd8b0
   b8b60:	000b779d 	.word	0x000b779d
   b8b64:	000bd75c 	.word	0x000bd75c

000b8b68 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8b68:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8b6c:	4604      	mov	r4, r0
   b8b6e:	460d      	mov	r5, r1
   b8b70:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8b72:	d914      	bls.n	b8b9e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8b74:	4290      	cmp	r0, r2
   b8b76:	d213      	bcs.n	b8ba0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8b78:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8b7c:	1a75      	subs	r5, r6, r1
   b8b7e:	f1a1 0708 	sub.w	r7, r1, #8
   b8b82:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8b84:	42b7      	cmp	r7, r6
   b8b86:	d018      	beq.n	b8bba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8b88:	b11c      	cbz	r4, b8b92 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8b8a:	4631      	mov	r1, r6
   b8b8c:	4620      	mov	r0, r4
   b8b8e:	f7ff fc6a 	bl	b8466 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8b92:	1d30      	adds	r0, r6, #4
   b8b94:	f7ff fc7b 	bl	b848e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8b98:	3e08      	subs	r6, #8
   b8b9a:	3c08      	subs	r4, #8
   b8b9c:	e7f2      	b.n	b8b84 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8b9e:	d00c      	beq.n	b8bba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8ba0:	42b5      	cmp	r5, r6
   b8ba2:	d00a      	beq.n	b8bba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8ba4:	b11c      	cbz	r4, b8bae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8ba6:	4629      	mov	r1, r5
   b8ba8:	4620      	mov	r0, r4
   b8baa:	f7ff fc5c 	bl	b8466 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8bae:	1d28      	adds	r0, r5, #4
   b8bb0:	f7ff fc6d 	bl	b848e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8bb4:	3508      	adds	r5, #8
   b8bb6:	3408      	adds	r4, #8
   b8bb8:	e7f2      	b.n	b8ba0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8bbc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b8bbc:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8bbe:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8bc0:	4605      	mov	r5, r0
        if (n > 0) {
   b8bc2:	dd11      	ble.n	b8be8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b8bc4:	00f0      	lsls	r0, r6, #3
   b8bc6:	f7fe ffbd 	bl	b7b44 <malloc>
            if (!d) {
   b8bca:	4604      	mov	r4, r0
   b8bcc:	b158      	cbz	r0, b8be6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b8bce:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8bd2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8bd6:	f7ff ffc7 	bl	b8b68 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8bda:	6828      	ldr	r0, [r5, #0]
   b8bdc:	f7fe ffba 	bl	b7b54 <free>
        data_ = d;
   b8be0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8be2:	60ae      	str	r6, [r5, #8]
        return true;
   b8be4:	2001      	movs	r0, #1
    }
   b8be6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b8be8:	2400      	movs	r4, #0
   b8bea:	e7f6      	b.n	b8bda <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b8bec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8bec:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8bee:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8bf0:	6845      	ldr	r5, [r0, #4]
   b8bf2:	4668      	mov	r0, sp
   b8bf4:	f7ff fc37 	bl	b8466 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8bf8:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b8bfc:	4299      	cmp	r1, r3
   b8bfe:	da10      	bge.n	b8c22 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b8c00:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8c02:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8c04:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b8c08:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8c0c:	4629      	mov	r1, r5
   b8c0e:	f105 0008 	add.w	r0, r5, #8
   b8c12:	f7ff ffa9 	bl	b8b68 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8c16:	b98d      	cbnz	r5, b8c3c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b8c18:	6863      	ldr	r3, [r4, #4]
   b8c1a:	3301      	adds	r3, #1
   b8c1c:	6063      	str	r3, [r4, #4]
    return true;
   b8c1e:	2601      	movs	r6, #1
   b8c20:	e006      	b.n	b8c30 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8c22:	3101      	adds	r1, #1
   b8c24:	4620      	mov	r0, r4
   b8c26:	f7ff ffc9 	bl	b8bbc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8c2a:	4606      	mov	r6, r0
   b8c2c:	2800      	cmp	r0, #0
   b8c2e:	d1e7      	bne.n	b8c00 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b8c30:	a801      	add	r0, sp, #4
   b8c32:	f7ff fc2c 	bl	b848e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8c36:	4630      	mov	r0, r6
   b8c38:	b002      	add	sp, #8
   b8c3a:	bd70      	pop	{r4, r5, r6, pc}
   b8c3c:	4669      	mov	r1, sp
   b8c3e:	4628      	mov	r0, r5
   b8c40:	f7ff fc11 	bl	b8466 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8c44:	e7e8      	b.n	b8c18 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b8c46 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8c46:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8c4a:	4604      	mov	r4, r0
   b8c4c:	460d      	mov	r5, r1
   b8c4e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8c50:	d914      	bls.n	b8c7c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8c52:	4290      	cmp	r0, r2
   b8c54:	d213      	bcs.n	b8c7e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8c56:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8c5a:	1a75      	subs	r5, r6, r1
   b8c5c:	f1a1 0708 	sub.w	r7, r1, #8
   b8c60:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8c62:	42b7      	cmp	r7, r6
   b8c64:	d018      	beq.n	b8c98 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8c66:	b11c      	cbz	r4, b8c70 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b8c68:	4631      	mov	r1, r6
   b8c6a:	4620      	mov	r0, r4
   b8c6c:	f7ff fbed 	bl	b844a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8c70:	1d30      	adds	r0, r6, #4
   b8c72:	f7ff fc0c 	bl	b848e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8c76:	3e08      	subs	r6, #8
   b8c78:	3c08      	subs	r4, #8
   b8c7a:	e7f2      	b.n	b8c62 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8c7c:	d00c      	beq.n	b8c98 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8c7e:	42b5      	cmp	r5, r6
   b8c80:	d00a      	beq.n	b8c98 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8c82:	b11c      	cbz	r4, b8c8c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8c84:	4629      	mov	r1, r5
   b8c86:	4620      	mov	r0, r4
   b8c88:	f7ff fbdf 	bl	b844a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8c8c:	1d28      	adds	r0, r5, #4
   b8c8e:	f7ff fbfe 	bl	b848e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8c92:	3508      	adds	r5, #8
   b8c94:	3408      	adds	r4, #8
   b8c96:	e7f2      	b.n	b8c7e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8c9a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b8c9a:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8c9c:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8c9e:	4605      	mov	r5, r0
        if (n > 0) {
   b8ca0:	dd11      	ble.n	b8cc6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b8ca2:	00f0      	lsls	r0, r6, #3
   b8ca4:	f7fe ff4e 	bl	b7b44 <malloc>
            if (!d) {
   b8ca8:	4604      	mov	r4, r0
   b8caa:	b158      	cbz	r0, b8cc4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b8cac:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8cb0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8cb4:	f7ff ffc7 	bl	b8c46 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8cb8:	6828      	ldr	r0, [r5, #0]
   b8cba:	f7fe ff4b 	bl	b7b54 <free>
        data_ = d;
   b8cbe:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8cc0:	60ae      	str	r6, [r5, #8]
        return true;
   b8cc2:	2001      	movs	r0, #1
    }
   b8cc4:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b8cc6:	2400      	movs	r4, #0
   b8cc8:	e7f6      	b.n	b8cb8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b8cca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8cca:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8ccc:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8cce:	6845      	ldr	r5, [r0, #4]
   b8cd0:	4668      	mov	r0, sp
   b8cd2:	f7ff fbba 	bl	b844a <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8cd6:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b8cda:	4299      	cmp	r1, r3
   b8cdc:	da10      	bge.n	b8d00 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b8cde:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8ce0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8ce2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b8ce6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8cea:	4629      	mov	r1, r5
   b8cec:	f105 0008 	add.w	r0, r5, #8
   b8cf0:	f7ff ffa9 	bl	b8c46 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8cf4:	b98d      	cbnz	r5, b8d1a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b8cf6:	6863      	ldr	r3, [r4, #4]
   b8cf8:	3301      	adds	r3, #1
   b8cfa:	6063      	str	r3, [r4, #4]
    return true;
   b8cfc:	2601      	movs	r6, #1
   b8cfe:	e006      	b.n	b8d0e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8d00:	3101      	adds	r1, #1
   b8d02:	4620      	mov	r0, r4
   b8d04:	f7ff ffc9 	bl	b8c9a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8d08:	4606      	mov	r6, r0
   b8d0a:	2800      	cmp	r0, #0
   b8d0c:	d1e7      	bne.n	b8cde <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b8d0e:	a801      	add	r0, sp, #4
   b8d10:	f7ff fbbd 	bl	b848e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8d14:	4630      	mov	r0, r6
   b8d16:	b002      	add	sp, #8
   b8d18:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b8d1a:	4669      	mov	r1, sp
   b8d1c:	4628      	mov	r0, r5
   b8d1e:	f7ff fb94 	bl	b844a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8d22:	e7e8      	b.n	b8cf6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b8d24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b8d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8d28:	4617      	mov	r7, r2
   b8d2a:	b0a1      	sub	sp, #132	; 0x84
   b8d2c:	4680      	mov	r8, r0
    WiringBleLock lk;
   b8d2e:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b8d30:	460e      	mov	r6, r1
    WiringBleLock lk;
   b8d32:	f7ff f837 	bl	b7da4 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b8d36:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b8d38:	7923      	ldrb	r3, [r4, #4]
   b8d3a:	b953      	cbnz	r3, b8d52 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b8d3c:	4639      	mov	r1, r7
   b8d3e:	4640      	mov	r0, r8
   b8d40:	f7ff fb83 	bl	b844a <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b8d44:	a80a      	add	r0, sp, #40	; 0x28
   b8d46:	f7ff f83b 	bl	b7dc0 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b8d4a:	4640      	mov	r0, r8
   b8d4c:	b021      	add	sp, #132	; 0x84
   b8d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b8d52:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b8d54:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b8d58:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b8d5c:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b8d5e:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b8d62:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b8d66:	9b03      	ldr	r3, [sp, #12]
   b8d68:	429d      	cmp	r5, r3
   b8d6a:	d021      	beq.n	b8db0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b8d6c:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b8d70:	4658      	mov	r0, fp
   b8d72:	f109 0114 	add.w	r1, r9, #20
   b8d76:	f7ff f8c2 	bl	b7efe <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b8d7a:	b1b8      	cbz	r0, b8dac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b8d7c:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b8d80:	4650      	mov	r0, sl
   b8d82:	f7ff f8bc 	bl	b7efe <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b8d86:	b188      	cbz	r0, b8dac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b8d88:	6823      	ldr	r3, [r4, #0]
   b8d8a:	f8d9 2000 	ldr.w	r2, [r9]
   b8d8e:	4053      	eors	r3, r2
   b8d90:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b8d94:	d10a      	bne.n	b8dac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b8d96:	2220      	movs	r2, #32
   b8d98:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b8d9c:	4a5e      	ldr	r2, [pc, #376]	; (b8f18 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b8d9e:	9200      	str	r2, [sp, #0]
   b8da0:	aa15      	add	r2, sp, #84	; 0x54
   b8da2:	495e      	ldr	r1, [pc, #376]	; (b8f1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b8da4:	2032      	movs	r0, #50	; 0x32
   b8da6:	f7fe fe39 	bl	b7a1c <log_message>
   b8daa:	e7c7      	b.n	b8d3c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b8dac:	3508      	adds	r5, #8
   b8dae:	e7da      	b.n	b8d66 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b8db0:	4650      	mov	r0, sl
   b8db2:	f7ff f875 	bl	b7ea0 <_ZNK8particle7BleUuid7isValidEv>
   b8db6:	b960      	cbnz	r0, b8dd2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b8db8:	4959      	ldr	r1, [pc, #356]	; (b8f20 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b8dba:	2201      	movs	r2, #1
   b8dbc:	a815      	add	r0, sp, #84	; 0x54
   b8dbe:	ad15      	add	r5, sp, #84	; 0x54
   b8dc0:	f7ff f846 	bl	b7e50 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b8dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8dc6:	46d4      	mov	ip, sl
   b8dc8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b8dcc:	682b      	ldr	r3, [r5, #0]
   b8dce:	f8cc 3000 	str.w	r3, [ip]
   b8dd2:	6833      	ldr	r3, [r6, #0]
   b8dd4:	e9d3 5300 	ldrd	r5, r3, [r3]
   b8dd8:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b8ddc:	455d      	cmp	r5, fp
   b8dde:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b8de0:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b8de2:	d06e      	beq.n	b8ec2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b8de4:	f855 0b08 	ldr.w	r0, [r5], #8
   b8de8:	f7ff f889 	bl	b7efe <_ZNK8particle7BleUuideqERKS0_>
   b8dec:	2800      	cmp	r0, #0
   b8dee:	d0f5      	beq.n	b8ddc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b8df0:	f104 0a14 	add.w	sl, r4, #20
   b8df4:	4650      	mov	r0, sl
   b8df6:	f7ff f853 	bl	b7ea0 <_ZNK8particle7BleUuid7isValidEv>
   b8dfa:	b988      	cbnz	r0, b8e20 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b8dfc:	4b49      	ldr	r3, [pc, #292]	; (b8f24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b8dfe:	4948      	ldr	r1, [pc, #288]	; (b8f20 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b8e00:	881a      	ldrh	r2, [r3, #0]
   b8e02:	3201      	adds	r2, #1
   b8e04:	b292      	uxth	r2, r2
   b8e06:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b8e08:	a815      	add	r0, sp, #84	; 0x54
   b8e0a:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b8e0c:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b8e0e:	f7ff f83e 	bl	b7e8e <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b8e12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8e14:	46d4      	mov	ip, sl
   b8e16:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b8e1a:	682b      	ldr	r3, [r5, #0]
   b8e1c:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b8e20:	4b41      	ldr	r3, [pc, #260]	; (b8f28 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b8e22:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b8e24:	2228      	movs	r2, #40	; 0x28
   b8e26:	2100      	movs	r1, #0
   b8e28:	a816      	add	r0, sp, #88	; 0x58
   b8e2a:	f002 f9bd 	bl	bb1a8 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b8e2e:	4651      	mov	r1, sl
   b8e30:	a804      	add	r0, sp, #16
   b8e32:	f7ff f847 	bl	b7ec4 <_ZN8particle7BleUuid7halUUIDEv>
   b8e36:	ab04      	add	r3, sp, #16
   b8e38:	aa18      	add	r2, sp, #96	; 0x60
   b8e3a:	f10d 0c20 	add.w	ip, sp, #32
   b8e3e:	6818      	ldr	r0, [r3, #0]
   b8e40:	6859      	ldr	r1, [r3, #4]
   b8e42:	4615      	mov	r5, r2
   b8e44:	c503      	stmia	r5!, {r0, r1}
   b8e46:	3308      	adds	r3, #8
   b8e48:	4563      	cmp	r3, ip
   b8e4a:	462a      	mov	r2, r5
   b8e4c:	d1f7      	bne.n	b8e3e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b8e4e:	6818      	ldr	r0, [r3, #0]
   b8e50:	6028      	str	r0, [r5, #0]
    return value_;
   b8e52:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b8e54:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b8e58:	f8d9 3000 	ldr.w	r3, [r9]
   b8e5c:	8a9b      	ldrh	r3, [r3, #20]
   b8e5e:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b8e62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8e64:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b8e66:	4b31      	ldr	r3, [pc, #196]	; (b8f2c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b8e68:	2200      	movs	r2, #0
   b8e6a:	1da1      	adds	r1, r4, #6
   b8e6c:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b8e6e:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b8e72:	f7fe fc4b 	bl	b770c <hal_ble_gatt_server_add_characteristic>
   b8e76:	2800      	cmp	r0, #0
   b8e78:	f47f af60 	bne.w	b8d3c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b8e7c:	2301      	movs	r3, #1
   b8e7e:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b8e80:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b8e82:	4639      	mov	r1, r7
        return characteristics_;
   b8e84:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b8e86:	a80d      	add	r0, sp, #52	; 0x34
   b8e88:	f7ff fadf 	bl	b844a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8e8c:	4620      	mov	r0, r4
   b8e8e:	a90d      	add	r1, sp, #52	; 0x34
   b8e90:	f7ff ff1b 	bl	b8cca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b8e94:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b8e96:	a80e      	add	r0, sp, #56	; 0x38
   b8e98:	f7ff faf9 	bl	b848e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8e9c:	2c00      	cmp	r4, #0
   b8e9e:	f47f af4d 	bne.w	b8d3c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b8ea2:	2320      	movs	r3, #32
   b8ea4:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b8ea8:	4b21      	ldr	r3, [pc, #132]	; (b8f30 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b8eaa:	9300      	str	r3, [sp, #0]
   b8eac:	aa0d      	add	r2, sp, #52	; 0x34
   b8eae:	4623      	mov	r3, r4
   b8eb0:	e777      	b.n	b8da2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b8eb2:	4639      	mov	r1, r7
   b8eb4:	4640      	mov	r0, r8
   b8eb6:	f7ff fac8 	bl	b844a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8eba:	a80c      	add	r0, sp, #48	; 0x30
   b8ebc:	f7ff fae7 	bl	b848e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8ec0:	e740      	b.n	b8d44 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b8ec2:	a80b      	add	r0, sp, #44	; 0x2c
   b8ec4:	f7ff f94a 	bl	b815c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b8ec8:	4651      	mov	r1, sl
   b8eca:	a815      	add	r0, sp, #84	; 0x54
   b8ecc:	f7fe fffa 	bl	b7ec4 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b8ed0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8ed2:	2300      	movs	r3, #0
   b8ed4:	3214      	adds	r2, #20
   b8ed6:	a915      	add	r1, sp, #84	; 0x54
   b8ed8:	2001      	movs	r0, #1
   b8eda:	f7fe fbef 	bl	b76bc <hal_ble_gatt_server_add_service>
   b8ede:	2800      	cmp	r0, #0
   b8ee0:	d1e7      	bne.n	b8eb2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b8ee2:	6835      	ldr	r5, [r6, #0]
   b8ee4:	a90b      	add	r1, sp, #44	; 0x2c
   b8ee6:	a80d      	add	r0, sp, #52	; 0x34
   b8ee8:	f7ff fabd 	bl	b8466 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b8eec:	4628      	mov	r0, r5
   b8eee:	a90d      	add	r1, sp, #52	; 0x34
   b8ef0:	f7ff fe7c 	bl	b8bec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b8ef4:	4605      	mov	r5, r0
   b8ef6:	a80e      	add	r0, sp, #56	; 0x38
   b8ef8:	f7ff fac9 	bl	b848e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8efc:	2d00      	cmp	r5, #0
   b8efe:	d0d8      	beq.n	b8eb2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b8f00:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b8f02:	6853      	ldr	r3, [r2, #4]
   b8f04:	6812      	ldr	r2, [r2, #0]
   b8f06:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b8f0a:	3b01      	subs	r3, #1
   b8f0c:	a80c      	add	r0, sp, #48	; 0x30
   b8f0e:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b8f12:	f7ff fabc 	bl	b848e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8f16:	e76b      	b.n	b8df0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b8f18:	000bd856 	.word	0x000bd856
   b8f1c:	000bd773 	.word	0x000bd773
   b8f20:	000bd91a 	.word	0x000bd91a
   b8f24:	2003e6bc 	.word	0x2003e6bc
   b8f28:	002c0003 	.word	0x002c0003
   b8f2c:	000b82f5 	.word	0x000b82f5
   b8f30:	000bd881 	.word	0x000bd881

000b8f34 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b8f34:	4802      	ldr	r0, [pc, #8]	; (b8f40 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b8f36:	2300      	movs	r3, #0
   b8f38:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b8f3a:	f7fe bc0f 	b.w	b775c <os_mutex_recursive_create>
   b8f3e:	bf00      	nop
   b8f40:	2003e6c0 	.word	0x2003e6c0

000b8f44 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8f44:	2200      	movs	r2, #0
   b8f46:	6840      	ldr	r0, [r0, #4]
   b8f48:	4611      	mov	r1, r2
   b8f4a:	f7fe bdd3 	b.w	b7af4 <network_listening>

000b8f4e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8f4e:	2200      	movs	r2, #0
   b8f50:	6840      	ldr	r0, [r0, #4]
   b8f52:	4611      	mov	r1, r2
   b8f54:	f7fe bdde 	b.w	b7b14 <network_get_listen_timeout>

000b8f58 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8f58:	6840      	ldr	r0, [r0, #4]
   b8f5a:	2200      	movs	r2, #0
   b8f5c:	f7fe bdd2 	b.w	b7b04 <network_set_listen_timeout>

000b8f60 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8f60:	6840      	ldr	r0, [r0, #4]
   b8f62:	2200      	movs	r2, #0
   b8f64:	f081 0101 	eor.w	r1, r1, #1
   b8f68:	f7fe bdbc 	b.w	b7ae4 <network_listen>

000b8f6c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8f6c:	2300      	movs	r3, #0
   b8f6e:	6840      	ldr	r0, [r0, #4]
   b8f70:	461a      	mov	r2, r3
   b8f72:	4619      	mov	r1, r3
   b8f74:	f7fe bdae 	b.w	b7ad4 <network_off>

000b8f78 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8f78:	2300      	movs	r3, #0
   b8f7a:	6840      	ldr	r0, [r0, #4]
   b8f7c:	461a      	mov	r2, r3
   b8f7e:	4619      	mov	r1, r3
   b8f80:	f7fe bda0 	b.w	b7ac4 <network_on>

000b8f84 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b8f84:	2200      	movs	r2, #0
   b8f86:	6840      	ldr	r0, [r0, #4]
   b8f88:	4611      	mov	r1, r2
   b8f8a:	f7fe bd93 	b.w	b7ab4 <network_ready>

000b8f8e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8f8e:	2200      	movs	r2, #0
   b8f90:	6840      	ldr	r0, [r0, #4]
   b8f92:	4611      	mov	r1, r2
   b8f94:	f7fe bd7e 	b.w	b7a94 <network_connecting>

000b8f98 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8f98:	6840      	ldr	r0, [r0, #4]
   b8f9a:	2200      	movs	r2, #0
   b8f9c:	2102      	movs	r1, #2
   b8f9e:	f7fe bd81 	b.w	b7aa4 <network_disconnect>

000b8fa2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8fa2:	2300      	movs	r3, #0
   b8fa4:	6840      	ldr	r0, [r0, #4]
   b8fa6:	461a      	mov	r2, r3
   b8fa8:	f7fe bd6c 	b.w	b7a84 <network_connect>

000b8fac <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b8fac:	4b02      	ldr	r3, [pc, #8]	; (b8fb8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b8fae:	2203      	movs	r2, #3
   b8fb0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b8fb2:	4a02      	ldr	r2, [pc, #8]	; (b8fbc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b8fb4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b8fb6:	4770      	bx	lr
   b8fb8:	2003e6c8 	.word	0x2003e6c8
   b8fbc:	000bd944 	.word	0x000bd944

000b8fc0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b8fc0:	4770      	bx	lr

000b8fc2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b8fc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8fc4:	4606      	mov	r6, r0
   b8fc6:	4615      	mov	r5, r2
   b8fc8:	460c      	mov	r4, r1
   b8fca:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b8fcc:	42bc      	cmp	r4, r7
   b8fce:	d006      	beq.n	b8fde <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b8fd0:	6833      	ldr	r3, [r6, #0]
   b8fd2:	f814 1b01 	ldrb.w	r1, [r4], #1
   b8fd6:	689b      	ldr	r3, [r3, #8]
   b8fd8:	4630      	mov	r0, r6
   b8fda:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b8fdc:	e7f6      	b.n	b8fcc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b8fde:	4628      	mov	r0, r5
   b8fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8fe2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b8fe2:	7c00      	ldrb	r0, [r0, #16]
   b8fe4:	2200      	movs	r2, #0
   b8fe6:	f7fe bc09 	b.w	b77fc <hal_i2c_write>

000b8fea <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b8fea:	7c00      	ldrb	r0, [r0, #16]
   b8fec:	2100      	movs	r1, #0
   b8fee:	f7fe bc0d 	b.w	b780c <hal_i2c_available>

000b8ff2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b8ff2:	7c00      	ldrb	r0, [r0, #16]
   b8ff4:	2100      	movs	r1, #0
   b8ff6:	f7fe bc11 	b.w	b781c <hal_i2c_read>

000b8ffa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b8ffa:	7c00      	ldrb	r0, [r0, #16]
   b8ffc:	2100      	movs	r1, #0
   b8ffe:	f7fe bc15 	b.w	b782c <hal_i2c_peek>

000b9002 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b9002:	7c00      	ldrb	r0, [r0, #16]
   b9004:	2100      	movs	r1, #0
   b9006:	f7fe bc19 	b.w	b783c <hal_i2c_flush>

000b900a <_ZN7TwoWireD0Ev>:
   b900a:	b510      	push	{r4, lr}
   b900c:	2114      	movs	r1, #20
   b900e:	4604      	mov	r4, r0
   b9010:	f7fb f847 	bl	b40a2 <_ZdlPvj>
   b9014:	4620      	mov	r0, r4
   b9016:	bd10      	pop	{r4, pc}

000b9018 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b9018:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b901a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b901e:	4604      	mov	r4, r0
   b9020:	4608      	mov	r0, r1
   b9022:	2100      	movs	r1, #0
   b9024:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b9028:	4b03      	ldr	r3, [pc, #12]	; (b9038 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b902a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b902c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b902e:	4611      	mov	r1, r2
   b9030:	f7fe fc0c 	bl	b784c <hal_i2c_init>
}
   b9034:	4620      	mov	r0, r4
   b9036:	bd10      	pop	{r4, pc}
   b9038:	000bd980 	.word	0x000bd980

000b903c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b903c:	2300      	movs	r3, #0
   b903e:	7c00      	ldrb	r0, [r0, #16]
   b9040:	461a      	mov	r2, r3
   b9042:	4619      	mov	r1, r3
   b9044:	f7fe bbc2 	b.w	b77cc <hal_i2c_begin>

000b9048 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b9048:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b904a:	2200      	movs	r2, #0
   b904c:	2314      	movs	r3, #20
   b904e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b9052:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b9056:	780b      	ldrb	r3, [r1, #0]
   b9058:	f88d 3008 	strb.w	r3, [sp, #8]
   b905c:	684b      	ldr	r3, [r1, #4]
   b905e:	9303      	str	r3, [sp, #12]
   b9060:	68cb      	ldr	r3, [r1, #12]
   b9062:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b9064:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b9066:	7a0b      	ldrb	r3, [r1, #8]
   b9068:	9305      	str	r3, [sp, #20]
   b906a:	a901      	add	r1, sp, #4
   b906c:	f7fe fbf6 	bl	b785c <hal_i2c_request_ex>
}
   b9070:	b007      	add	sp, #28
   b9072:	f85d fb04 	ldr.w	pc, [sp], #4

000b9076 <_ZN7TwoWire11requestFromEhjh>:
{
   b9076:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b9078:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b907a:	f88d 1000 	strb.w	r1, [sp]
   b907e:	f04f 0164 	mov.w	r1, #100	; 0x64
   b9082:	9103      	str	r1, [sp, #12]
   b9084:	bf18      	it	ne
   b9086:	2301      	movne	r3, #1
   b9088:	4669      	mov	r1, sp
    size_ = size;
   b908a:	9201      	str	r2, [sp, #4]
   b908c:	f88d 3008 	strb.w	r3, [sp, #8]
   b9090:	f7ff ffda 	bl	b9048 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b9094:	b005      	add	sp, #20
   b9096:	f85d fb04 	ldr.w	pc, [sp], #4

000b909a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b909a:	2301      	movs	r3, #1
   b909c:	f7ff bfeb 	b.w	b9076 <_ZN7TwoWire11requestFromEhjh>

000b90a0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b90a0:	7c00      	ldrb	r0, [r0, #16]
   b90a2:	2200      	movs	r2, #0
   b90a4:	f7fe bb9a 	b.w	b77dc <hal_i2c_begin_transmission>

000b90a8 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b90a8:	b2c9      	uxtb	r1, r1
   b90aa:	f7ff bff9 	b.w	b90a0 <_ZN7TwoWire17beginTransmissionEh>

000b90ae <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b90ae:	7c00      	ldrb	r0, [r0, #16]
   b90b0:	2200      	movs	r2, #0
   b90b2:	f7fe bb9b 	b.w	b77ec <hal_i2c_end_transmission>

000b90b6 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b90b6:	2101      	movs	r1, #1
   b90b8:	f7ff bff9 	b.w	b90ae <_ZN7TwoWire15endTransmissionEh>

000b90bc <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b90bc:	4770      	bx	lr

000b90be <_ZN9IPAddressD0Ev>:
   b90be:	b510      	push	{r4, lr}
   b90c0:	2118      	movs	r1, #24
   b90c2:	4604      	mov	r4, r0
   b90c4:	f7fa ffed 	bl	b40a2 <_ZdlPvj>
   b90c8:	4620      	mov	r0, r4
   b90ca:	bd10      	pop	{r4, pc}

000b90cc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b90cc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b90ce:	7d03      	ldrb	r3, [r0, #20]
   b90d0:	2b06      	cmp	r3, #6
{
   b90d2:	b08d      	sub	sp, #52	; 0x34
   b90d4:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b90d6:	f100 0704 	add.w	r7, r0, #4
   b90da:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b90de:	d012      	beq.n	b9106 <_ZNK9IPAddress7printToER5Print+0x3a>
   b90e0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b90e4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b90e8:	220a      	movs	r2, #10
   b90ea:	4630      	mov	r0, r6
   b90ec:	f000 f973 	bl	b93d6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b90f0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b90f2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b90f4:	d019      	beq.n	b912a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b90f6:	2c00      	cmp	r4, #0
   b90f8:	d0f4      	beq.n	b90e4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b90fa:	212e      	movs	r1, #46	; 0x2e
   b90fc:	4630      	mov	r0, r6
   b90fe:	f000 f951 	bl	b93a4 <_ZN5Print5printEc>
   b9102:	4404      	add	r4, r0
   b9104:	e7ee      	b.n	b90e4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9106:	232f      	movs	r3, #47	; 0x2f
   b9108:	466a      	mov	r2, sp
   b910a:	4639      	mov	r1, r7
   b910c:	200a      	movs	r0, #10
		buf[0] = 0;
   b910e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9112:	f7fe fbb3 	bl	b787c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b9116:	4668      	mov	r0, sp
   b9118:	f002 f88e 	bl	bb238 <strlen>
   b911c:	6833      	ldr	r3, [r6, #0]
   b911e:	4602      	mov	r2, r0
   b9120:	68db      	ldr	r3, [r3, #12]
   b9122:	4669      	mov	r1, sp
   b9124:	4630      	mov	r0, r6
   b9126:	4798      	blx	r3
   b9128:	4604      	mov	r4, r0
    }
    return n;
}
   b912a:	4620      	mov	r0, r4
   b912c:	b00d      	add	sp, #52	; 0x34
   b912e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9130 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b9130:	b510      	push	{r4, lr}
   b9132:	4b05      	ldr	r3, [pc, #20]	; (b9148 <_ZN9IPAddressC1Ev+0x18>)
   b9134:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b9136:	2211      	movs	r2, #17
   b9138:	f840 3b04 	str.w	r3, [r0], #4
   b913c:	2100      	movs	r1, #0
   b913e:	f002 f833 	bl	bb1a8 <memset>
}
   b9142:	4620      	mov	r0, r4
   b9144:	bd10      	pop	{r4, pc}
   b9146:	bf00      	nop
   b9148:	000bd9a8 	.word	0x000bd9a8

000b914c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b914c:	4603      	mov	r3, r0
   b914e:	4a07      	ldr	r2, [pc, #28]	; (b916c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b9150:	b510      	push	{r4, lr}
   b9152:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b9156:	f101 0210 	add.w	r2, r1, #16
   b915a:	f851 4b04 	ldr.w	r4, [r1], #4
   b915e:	f843 4b04 	str.w	r4, [r3], #4
   b9162:	4291      	cmp	r1, r2
   b9164:	d1f9      	bne.n	b915a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b9166:	780a      	ldrb	r2, [r1, #0]
   b9168:	701a      	strb	r2, [r3, #0]
}
   b916a:	bd10      	pop	{r4, pc}
   b916c:	000bd9a8 	.word	0x000bd9a8

000b9170 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b9170:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b9172:	2b04      	cmp	r3, #4
   b9174:	d104      	bne.n	b9180 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b9176:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b9178:	3800      	subs	r0, #0
   b917a:	bf18      	it	ne
   b917c:	2001      	movne	r0, #1
   b917e:	4770      	bx	lr
    } else if (version() == 6) {
   b9180:	2b06      	cmp	r3, #6
   b9182:	d107      	bne.n	b9194 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b9184:	6843      	ldr	r3, [r0, #4]
   b9186:	b93b      	cbnz	r3, b9198 <_ZNK9IPAddresscvbEv+0x28>
   b9188:	6883      	ldr	r3, [r0, #8]
   b918a:	b92b      	cbnz	r3, b9198 <_ZNK9IPAddresscvbEv+0x28>
   b918c:	68c3      	ldr	r3, [r0, #12]
   b918e:	b91b      	cbnz	r3, b9198 <_ZNK9IPAddresscvbEv+0x28>
   b9190:	6900      	ldr	r0, [r0, #16]
   b9192:	e7f1      	b.n	b9178 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b9194:	2000      	movs	r0, #0
   b9196:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b9198:	2001      	movs	r0, #1
}
   b919a:	4770      	bx	lr

000b919c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b919c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b919e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b91a2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b91a6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b91aa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b91ae:	2304      	movs	r3, #4
   b91b0:	6041      	str	r1, [r0, #4]
   b91b2:	7503      	strb	r3, [r0, #20]
}
   b91b4:	bd10      	pop	{r4, pc}
	...

000b91b8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b91b8:	b507      	push	{r0, r1, r2, lr}
   b91ba:	4b06      	ldr	r3, [pc, #24]	; (b91d4 <_ZN9IPAddressC1EPKh+0x1c>)
   b91bc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b91be:	78cb      	ldrb	r3, [r1, #3]
   b91c0:	9300      	str	r3, [sp, #0]
   b91c2:	788b      	ldrb	r3, [r1, #2]
   b91c4:	784a      	ldrb	r2, [r1, #1]
   b91c6:	7809      	ldrb	r1, [r1, #0]
   b91c8:	f7ff ffe8 	bl	b919c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b91cc:	b003      	add	sp, #12
   b91ce:	f85d fb04 	ldr.w	pc, [sp], #4
   b91d2:	bf00      	nop
   b91d4:	000bd9a8 	.word	0x000bd9a8

000b91d8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b91d8:	4b01      	ldr	r3, [pc, #4]	; (b91e0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b91da:	4a02      	ldr	r2, [pc, #8]	; (b91e4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b91dc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b91de:	4770      	bx	lr
   b91e0:	2003e6d0 	.word	0x2003e6d0
   b91e4:	000bd9b4 	.word	0x000bd9b4

000b91e8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b91e8:	2300      	movs	r3, #0
   b91ea:	6840      	ldr	r0, [r0, #4]
   b91ec:	461a      	mov	r2, r3
   b91ee:	f7fe bc49 	b.w	b7a84 <network_connect>

000b91f2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b91f2:	6840      	ldr	r0, [r0, #4]
   b91f4:	2200      	movs	r2, #0
   b91f6:	2102      	movs	r1, #2
   b91f8:	f7fe bc54 	b.w	b7aa4 <network_disconnect>

000b91fc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b91fc:	2200      	movs	r2, #0
   b91fe:	6840      	ldr	r0, [r0, #4]
   b9200:	4611      	mov	r1, r2
   b9202:	f7fe bc47 	b.w	b7a94 <network_connecting>

000b9206 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b9206:	2200      	movs	r2, #0
   b9208:	6840      	ldr	r0, [r0, #4]
   b920a:	4611      	mov	r1, r2
   b920c:	f7fe bc52 	b.w	b7ab4 <network_ready>

000b9210 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b9210:	2300      	movs	r3, #0
   b9212:	6840      	ldr	r0, [r0, #4]
   b9214:	461a      	mov	r2, r3
   b9216:	4619      	mov	r1, r3
   b9218:	f7fe bc54 	b.w	b7ac4 <network_on>

000b921c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b921c:	2300      	movs	r3, #0
   b921e:	6840      	ldr	r0, [r0, #4]
   b9220:	461a      	mov	r2, r3
   b9222:	4619      	mov	r1, r3
   b9224:	f7fe bc56 	b.w	b7ad4 <network_off>

000b9228 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b9228:	6840      	ldr	r0, [r0, #4]
   b922a:	2100      	movs	r1, #0
   b922c:	f7fe bc7a 	b.w	b7b24 <network_is_on>

000b9230 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b9230:	6840      	ldr	r0, [r0, #4]
   b9232:	2100      	movs	r1, #0
   b9234:	f7fe bc7e 	b.w	b7b34 <network_is_off>

000b9238 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b9238:	6840      	ldr	r0, [r0, #4]
   b923a:	2200      	movs	r2, #0
   b923c:	f081 0101 	eor.w	r1, r1, #1
   b9240:	f7fe bc50 	b.w	b7ae4 <network_listen>

000b9244 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b9244:	6840      	ldr	r0, [r0, #4]
   b9246:	2200      	movs	r2, #0
   b9248:	f7fe bc5c 	b.w	b7b04 <network_set_listen_timeout>

000b924c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b924c:	2200      	movs	r2, #0
   b924e:	6840      	ldr	r0, [r0, #4]
   b9250:	4611      	mov	r1, r2
   b9252:	f7fe bc5f 	b.w	b7b14 <network_get_listen_timeout>

000b9256 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b9256:	2200      	movs	r2, #0
   b9258:	6840      	ldr	r0, [r0, #4]
   b925a:	4611      	mov	r1, r2
   b925c:	f7fe bc4a 	b.w	b7af4 <network_listening>

000b9260 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b9260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9264:	b095      	sub	sp, #84	; 0x54
   b9266:	4614      	mov	r4, r2
   b9268:	460d      	mov	r5, r1
   b926a:	4607      	mov	r7, r0
    IPAddress addr;
   b926c:	f7ff ff60 	bl	b9130 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b9270:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b9272:	221c      	movs	r2, #28
   b9274:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b9276:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b9278:	f001 ff96 	bl	bb1a8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b927c:	2340      	movs	r3, #64	; 0x40
   b927e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b9280:	4620      	mov	r0, r4
   b9282:	466b      	mov	r3, sp
   b9284:	aa0c      	add	r2, sp, #48	; 0x30
   b9286:	2100      	movs	r1, #0
   b9288:	f7fe fb18 	bl	b78bc <netdb_getaddrinfo>
    if (!r) {
   b928c:	4604      	mov	r4, r0
   b928e:	2800      	cmp	r0, #0
   b9290:	d14b      	bne.n	b932a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9292:	4602      	mov	r2, r0
   b9294:	2101      	movs	r1, #1
   b9296:	6868      	ldr	r0, [r5, #4]
   b9298:	f7fe fc0c 	bl	b7ab4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b929c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b929e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b92a0:	4622      	mov	r2, r4
   b92a2:	6868      	ldr	r0, [r5, #4]
   b92a4:	f7fe fc06 	bl	b7ab4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b92a8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b92aa:	4681      	mov	r9, r0
        bool ok = false;
   b92ac:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b92ae:	2e00      	cmp	r6, #0
   b92b0:	d03b      	beq.n	b932a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b92b2:	2900      	cmp	r1, #0
   b92b4:	d139      	bne.n	b932a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b92b6:	6873      	ldr	r3, [r6, #4]
   b92b8:	2b02      	cmp	r3, #2
   b92ba:	d003      	beq.n	b92c4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b92bc:	2b0a      	cmp	r3, #10
   b92be:	d011      	beq.n	b92e4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b92c0:	69f6      	ldr	r6, [r6, #28]
   b92c2:	e7f4      	b.n	b92ae <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b92c4:	f1b8 0f00 	cmp.w	r8, #0
   b92c8:	d0fa      	beq.n	b92c0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b92ca:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b92cc:	a806      	add	r0, sp, #24
   b92ce:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b92d0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b92d2:	f7ff ff71 	bl	b91b8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b92d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b92d8:	1d3c      	adds	r4, r7, #4
   b92da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b92dc:	682b      	ldr	r3, [r5, #0]
   b92de:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b92e0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b92e2:	e7ed      	b.n	b92c0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b92e4:	f1b9 0f00 	cmp.w	r9, #0
   b92e8:	d0ea      	beq.n	b92c0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b92ea:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b92ec:	2210      	movs	r2, #16
   b92ee:	a801      	add	r0, sp, #4
   b92f0:	f001 ff5a 	bl	bb1a8 <memset>
                    a.v = 6;
   b92f4:	2306      	movs	r3, #6
   b92f6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b92fa:	ad01      	add	r5, sp, #4
   b92fc:	f104 0308 	add.w	r3, r4, #8
   b9300:	3418      	adds	r4, #24
   b9302:	6818      	ldr	r0, [r3, #0]
   b9304:	6859      	ldr	r1, [r3, #4]
   b9306:	462a      	mov	r2, r5
   b9308:	c203      	stmia	r2!, {r0, r1}
   b930a:	3308      	adds	r3, #8
   b930c:	42a3      	cmp	r3, r4
   b930e:	4615      	mov	r5, r2
   b9310:	d1f7      	bne.n	b9302 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b9312:	a901      	add	r1, sp, #4
   b9314:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b9316:	ad07      	add	r5, sp, #28
   b9318:	f7ff ff18 	bl	b914c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b931c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b931e:	1d3c      	adds	r4, r7, #4
   b9320:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9322:	682b      	ldr	r3, [r5, #0]
   b9324:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9326:	4649      	mov	r1, r9
   b9328:	e7ca      	b.n	b92c0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b932a:	9800      	ldr	r0, [sp, #0]
   b932c:	f7fe fabe 	bl	b78ac <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b9330:	4638      	mov	r0, r7
   b9332:	b015      	add	sp, #84	; 0x54
   b9334:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b9338 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b9338:	4b02      	ldr	r3, [pc, #8]	; (b9344 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b933a:	4a03      	ldr	r2, [pc, #12]	; (b9348 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b933c:	601a      	str	r2, [r3, #0]
   b933e:	2200      	movs	r2, #0
   b9340:	605a      	str	r2, [r3, #4]

} // spark
   b9342:	4770      	bx	lr
   b9344:	2003e6d4 	.word	0x2003e6d4
   b9348:	000bd9c0 	.word	0x000bd9c0

000b934c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b934c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b934e:	4606      	mov	r6, r0
   b9350:	460d      	mov	r5, r1
  size_t n = 0;
   b9352:	188f      	adds	r7, r1, r2
   b9354:	2400      	movs	r4, #0
  while (size--) {
   b9356:	42bd      	cmp	r5, r7
   b9358:	d00c      	beq.n	b9374 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b935a:	6833      	ldr	r3, [r6, #0]
   b935c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b9360:	689b      	ldr	r3, [r3, #8]
   b9362:	4630      	mov	r0, r6
   b9364:	4798      	blx	r3
     if (chunk>=0)
   b9366:	1e03      	subs	r3, r0, #0
   b9368:	db01      	blt.n	b936e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b936a:	441c      	add	r4, r3
  while (size--) {
   b936c:	e7f3      	b.n	b9356 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b936e:	2c00      	cmp	r4, #0
   b9370:	bf08      	it	eq
   b9372:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b9374:	4620      	mov	r0, r4
   b9376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9378 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b9378:	b513      	push	{r0, r1, r4, lr}
   b937a:	4604      	mov	r4, r0
    }
   b937c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b937e:	b159      	cbz	r1, b9398 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b9380:	9101      	str	r1, [sp, #4]
   b9382:	f001 ff59 	bl	bb238 <strlen>
   b9386:	6823      	ldr	r3, [r4, #0]
   b9388:	9901      	ldr	r1, [sp, #4]
   b938a:	68db      	ldr	r3, [r3, #12]
   b938c:	4602      	mov	r2, r0
   b938e:	4620      	mov	r0, r4
    }
   b9390:	b002      	add	sp, #8
   b9392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b9396:	4718      	bx	r3
    }
   b9398:	b002      	add	sp, #8
   b939a:	bd10      	pop	{r4, pc}

000b939c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b939c:	b508      	push	{r3, lr}
  return write(str);
   b939e:	f7ff ffeb 	bl	b9378 <_ZN5Print5writeEPKc>
}
   b93a2:	bd08      	pop	{r3, pc}

000b93a4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b93a4:	6803      	ldr	r3, [r0, #0]
   b93a6:	689b      	ldr	r3, [r3, #8]
   b93a8:	4718      	bx	r3

000b93aa <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b93aa:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b93ac:	210d      	movs	r1, #13
{
   b93ae:	4605      	mov	r5, r0
  size_t n = print('\r');
   b93b0:	f7ff fff8 	bl	b93a4 <_ZN5Print5printEc>
  n += print('\n');
   b93b4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b93b6:	4604      	mov	r4, r0
  n += print('\n');
   b93b8:	4628      	mov	r0, r5
   b93ba:	f7ff fff3 	bl	b93a4 <_ZN5Print5printEc>
  return n;
}
   b93be:	4420      	add	r0, r4
   b93c0:	bd38      	pop	{r3, r4, r5, pc}

000b93c2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b93c2:	b538      	push	{r3, r4, r5, lr}
   b93c4:	4605      	mov	r5, r0
  return write(str);
   b93c6:	f7ff ffd7 	bl	b9378 <_ZN5Print5writeEPKc>
   b93ca:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b93cc:	4628      	mov	r0, r5
   b93ce:	f7ff ffec 	bl	b93aa <_ZN5Print7printlnEv>
  return n;
}
   b93d2:	4420      	add	r0, r4
   b93d4:	bd38      	pop	{r3, r4, r5, pc}

000b93d6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b93d6:	b530      	push	{r4, r5, lr}
   b93d8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b93da:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b93dc:	2a01      	cmp	r2, #1
  *str = '\0';
   b93de:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b93e2:	bf98      	it	ls
   b93e4:	220a      	movls	r2, #10
   b93e6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b93e8:	460d      	mov	r5, r1
   b93ea:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b93ee:	fb01 5312 	mls	r3, r1, r2, r5
   b93f2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b93f6:	2b09      	cmp	r3, #9
   b93f8:	bf94      	ite	ls
   b93fa:	3330      	addls	r3, #48	; 0x30
   b93fc:	3337      	addhi	r3, #55	; 0x37
   b93fe:	b2db      	uxtb	r3, r3
  } while(n);
   b9400:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b9402:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b9406:	d9ef      	bls.n	b93e8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b9408:	4621      	mov	r1, r4
   b940a:	f7ff ffb5 	bl	b9378 <_ZN5Print5writeEPKc>
}
   b940e:	b00b      	add	sp, #44	; 0x2c
   b9410:	bd30      	pop	{r4, r5, pc}

000b9412 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b9412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9416:	b086      	sub	sp, #24
   b9418:	af00      	add	r7, sp, #0
   b941a:	4605      	mov	r5, r0
   b941c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b941e:	1d38      	adds	r0, r7, #4
   b9420:	2114      	movs	r1, #20
{
   b9422:	4614      	mov	r4, r2
    va_copy(args2, args);
   b9424:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b9426:	f7fe fbad 	bl	b7b84 <vsnprintf>

    if (n<bufsize)
   b942a:	2813      	cmp	r0, #19
   b942c:	d80e      	bhi.n	b944c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b942e:	1d39      	adds	r1, r7, #4
   b9430:	4628      	mov	r0, r5
   b9432:	f7ff ffa1 	bl	b9378 <_ZN5Print5writeEPKc>
   b9436:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b9438:	b11e      	cbz	r6, b9442 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b943a:	4628      	mov	r0, r5
   b943c:	f7ff ffb5 	bl	b93aa <_ZN5Print7printlnEv>
   b9440:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b9442:	4620      	mov	r0, r4
   b9444:	3718      	adds	r7, #24
   b9446:	46bd      	mov	sp, r7
   b9448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b944c:	f100 0308 	add.w	r3, r0, #8
   b9450:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b9454:	46e8      	mov	r8, sp
        char bigger[n+1];
   b9456:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b945a:	4622      	mov	r2, r4
   b945c:	1c41      	adds	r1, r0, #1
   b945e:	683b      	ldr	r3, [r7, #0]
   b9460:	4668      	mov	r0, sp
   b9462:	f7fe fb8f 	bl	b7b84 <vsnprintf>
  return write(str);
   b9466:	4669      	mov	r1, sp
   b9468:	4628      	mov	r0, r5
   b946a:	f7ff ff85 	bl	b9378 <_ZN5Print5writeEPKc>
   b946e:	4604      	mov	r4, r0
   b9470:	46c5      	mov	sp, r8
   b9472:	e7e1      	b.n	b9438 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b9474 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b9474:	4b01      	ldr	r3, [pc, #4]	; (b947c <_GLOBAL__sub_I_RGB+0x8>)
   b9476:	2200      	movs	r2, #0
   b9478:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b947a:	4770      	bx	lr
   b947c:	2003e6dc 	.word	0x2003e6dc

000b9480 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b9480:	b510      	push	{r4, lr}
   b9482:	4604      	mov	r4, r0
{
	free(buffer);
   b9484:	6800      	ldr	r0, [r0, #0]
   b9486:	f7fe fb65 	bl	b7b54 <free>
}
   b948a:	4620      	mov	r0, r4
   b948c:	bd10      	pop	{r4, pc}

000b948e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b948e:	b510      	push	{r4, lr}
   b9490:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b9492:	6800      	ldr	r0, [r0, #0]
   b9494:	b108      	cbz	r0, b949a <_ZN6String10invalidateEv+0xc>
   b9496:	f7fe fb5d 	bl	b7b54 <free>
	buffer = NULL;
   b949a:	2300      	movs	r3, #0
	capacity = len = 0;
   b949c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b94a0:	6023      	str	r3, [r4, #0]
}
   b94a2:	bd10      	pop	{r4, pc}

000b94a4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b94a4:	b538      	push	{r3, r4, r5, lr}
   b94a6:	4604      	mov	r4, r0
   b94a8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b94aa:	6800      	ldr	r0, [r0, #0]
   b94ac:	3101      	adds	r1, #1
   b94ae:	f7fe fb59 	bl	b7b64 <realloc>
	if (newbuffer) {
   b94b2:	b110      	cbz	r0, b94ba <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b94b4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b94b8:	2001      	movs	r0, #1
	}
	return 0;
}
   b94ba:	bd38      	pop	{r3, r4, r5, pc}

000b94bc <_ZN6String7reserveEj>:
{
   b94bc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b94be:	6803      	ldr	r3, [r0, #0]
{
   b94c0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b94c2:	b123      	cbz	r3, b94ce <_ZN6String7reserveEj+0x12>
   b94c4:	6843      	ldr	r3, [r0, #4]
   b94c6:	428b      	cmp	r3, r1
   b94c8:	d301      	bcc.n	b94ce <_ZN6String7reserveEj+0x12>
   b94ca:	2001      	movs	r0, #1
}
   b94cc:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b94ce:	4620      	mov	r0, r4
   b94d0:	f7ff ffe8 	bl	b94a4 <_ZN6String12changeBufferEj>
   b94d4:	2800      	cmp	r0, #0
   b94d6:	d0f9      	beq.n	b94cc <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b94d8:	68a3      	ldr	r3, [r4, #8]
   b94da:	2b00      	cmp	r3, #0
   b94dc:	d1f5      	bne.n	b94ca <_ZN6String7reserveEj+0xe>
   b94de:	6822      	ldr	r2, [r4, #0]
   b94e0:	7013      	strb	r3, [r2, #0]
   b94e2:	e7f2      	b.n	b94ca <_ZN6String7reserveEj+0xe>

000b94e4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b94e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b94e6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b94e8:	4611      	mov	r1, r2
   b94ea:	9201      	str	r2, [sp, #4]
{
   b94ec:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b94ee:	f7ff ffe5 	bl	b94bc <_ZN6String7reserveEj>
   b94f2:	9a01      	ldr	r2, [sp, #4]
   b94f4:	b928      	cbnz	r0, b9502 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b94f6:	4620      	mov	r0, r4
   b94f8:	f7ff ffc9 	bl	b948e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b94fc:	4620      	mov	r0, r4
   b94fe:	b003      	add	sp, #12
   b9500:	bd30      	pop	{r4, r5, pc}
	len = length;
   b9502:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b9504:	4629      	mov	r1, r5
   b9506:	6820      	ldr	r0, [r4, #0]
   b9508:	f001 fe26 	bl	bb158 <memcpy>
	buffer[len] = 0;
   b950c:	6822      	ldr	r2, [r4, #0]
   b950e:	68a3      	ldr	r3, [r4, #8]
   b9510:	2100      	movs	r1, #0
   b9512:	54d1      	strb	r1, [r2, r3]
	return *this;
   b9514:	e7f2      	b.n	b94fc <_ZN6String4copyEPKcj+0x18>

000b9516 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b9516:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b9518:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b951a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b951e:	4604      	mov	r4, r0
	len = 0;
   b9520:	6083      	str	r3, [r0, #8]
	flags = 0;
   b9522:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b9524:	b141      	cbz	r1, b9538 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b9526:	4608      	mov	r0, r1
   b9528:	9101      	str	r1, [sp, #4]
   b952a:	f001 fe85 	bl	bb238 <strlen>
   b952e:	9901      	ldr	r1, [sp, #4]
   b9530:	4602      	mov	r2, r0
   b9532:	4620      	mov	r0, r4
   b9534:	f7ff ffd6 	bl	b94e4 <_ZN6String4copyEPKcj>
}
   b9538:	4620      	mov	r0, r4
   b953a:	b002      	add	sp, #8
   b953c:	bd10      	pop	{r4, pc}

000b953e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b953e:	4288      	cmp	r0, r1
{
   b9540:	b510      	push	{r4, lr}
   b9542:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b9544:	d005      	beq.n	b9552 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b9546:	680b      	ldr	r3, [r1, #0]
   b9548:	b12b      	cbz	r3, b9556 <_ZN6StringaSERKS_+0x18>
   b954a:	688a      	ldr	r2, [r1, #8]
   b954c:	4619      	mov	r1, r3
   b954e:	f7ff ffc9 	bl	b94e4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b9552:	4620      	mov	r0, r4
   b9554:	bd10      	pop	{r4, pc}
	else invalidate();
   b9556:	f7ff ff9a 	bl	b948e <_ZN6String10invalidateEv>
   b955a:	e7fa      	b.n	b9552 <_ZN6StringaSERKS_+0x14>

000b955c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b955c:	b513      	push	{r0, r1, r4, lr}
   b955e:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b9560:	b159      	cbz	r1, b957a <_ZN6StringaSEPKc+0x1e>
   b9562:	4608      	mov	r0, r1
   b9564:	9101      	str	r1, [sp, #4]
   b9566:	f001 fe67 	bl	bb238 <strlen>
   b956a:	9901      	ldr	r1, [sp, #4]
   b956c:	4602      	mov	r2, r0
   b956e:	4620      	mov	r0, r4
   b9570:	f7ff ffb8 	bl	b94e4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b9574:	4620      	mov	r0, r4
   b9576:	b002      	add	sp, #8
   b9578:	bd10      	pop	{r4, pc}
	else invalidate();
   b957a:	f7ff ff88 	bl	b948e <_ZN6String10invalidateEv>
   b957e:	e7f9      	b.n	b9574 <_ZN6StringaSEPKc+0x18>

000b9580 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b9580:	b510      	push	{r4, lr}
   b9582:	4604      	mov	r4, r0
   b9584:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b9586:	2300      	movs	r3, #0
	capacity = 0;
   b9588:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b958c:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b958e:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b9590:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b9592:	a901      	add	r1, sp, #4
   b9594:	f000 fcde 	bl	b9f54 <itoa>
	*this = buf;
   b9598:	a901      	add	r1, sp, #4
   b959a:	4620      	mov	r0, r4
   b959c:	f7ff ffde 	bl	b955c <_ZN6StringaSEPKc>
}
   b95a0:	4620      	mov	r0, r4
   b95a2:	b00a      	add	sp, #40	; 0x28
   b95a4:	bd10      	pop	{r4, pc}

000b95a6 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b95a6:	b570      	push	{r4, r5, r6, lr}
   b95a8:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b95aa:	460e      	mov	r6, r1
   b95ac:	b909      	cbnz	r1, b95b2 <_ZN6String6concatEPKcj+0xc>
   b95ae:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b95b0:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b95b2:	b16a      	cbz	r2, b95d0 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b95b4:	6884      	ldr	r4, [r0, #8]
   b95b6:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b95b8:	4621      	mov	r1, r4
   b95ba:	f7ff ff7f 	bl	b94bc <_ZN6String7reserveEj>
   b95be:	2800      	cmp	r0, #0
   b95c0:	d0f5      	beq.n	b95ae <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b95c2:	6828      	ldr	r0, [r5, #0]
   b95c4:	68ab      	ldr	r3, [r5, #8]
   b95c6:	4631      	mov	r1, r6
   b95c8:	4418      	add	r0, r3
   b95ca:	f001 fe2d 	bl	bb228 <strcpy>
	len = newlen;
   b95ce:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b95d0:	2001      	movs	r0, #1
   b95d2:	e7ed      	b.n	b95b0 <_ZN6String6concatEPKcj+0xa>

000b95d4 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b95d4:	688a      	ldr	r2, [r1, #8]
   b95d6:	6809      	ldr	r1, [r1, #0]
   b95d8:	f7ff bfe5 	b.w	b95a6 <_ZN6String6concatEPKcj>

000b95dc <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b95dc:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b95de:	2300      	movs	r3, #0
	buf[0] = c;
   b95e0:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b95e4:	2201      	movs	r2, #1
   b95e6:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b95e8:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b95ec:	f7ff ffdb 	bl	b95a6 <_ZN6String6concatEPKcj>
}
   b95f0:	b003      	add	sp, #12
   b95f2:	f85d fb04 	ldr.w	pc, [sp], #4

000b95f6 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b95f6:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b95f8:	688a      	ldr	r2, [r1, #8]
   b95fa:	6809      	ldr	r1, [r1, #0]
{
   b95fc:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b95fe:	f7ff ffd2 	bl	b95a6 <_ZN6String6concatEPKcj>
   b9602:	b910      	cbnz	r0, b960a <_ZplRK15StringSumHelperRK6String+0x14>
   b9604:	4620      	mov	r0, r4
   b9606:	f7ff ff42 	bl	b948e <_ZN6String10invalidateEv>
	return a;
}
   b960a:	4620      	mov	r0, r4
   b960c:	bd10      	pop	{r4, pc}

000b960e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b960e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b9610:	6882      	ldr	r2, [r0, #8]
   b9612:	b93a      	cbnz	r2, b9624 <_ZNK6String6equalsEPKc+0x16>
   b9614:	b121      	cbz	r1, b9620 <_ZNK6String6equalsEPKc+0x12>
   b9616:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b9618:	fab0 f080 	clz	r0, r0
   b961c:	0940      	lsrs	r0, r0, #5
   b961e:	e000      	b.n	b9622 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b9620:	2001      	movs	r0, #1
}
   b9622:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b9624:	6800      	ldr	r0, [r0, #0]
   b9626:	b909      	cbnz	r1, b962c <_ZNK6String6equalsEPKc+0x1e>
   b9628:	7800      	ldrb	r0, [r0, #0]
   b962a:	e7f5      	b.n	b9618 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b962c:	f001 fdf2 	bl	bb214 <strcmp>
   b9630:	e7f2      	b.n	b9618 <_ZNK6String6equalsEPKc+0xa>

000b9632 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   b9632:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   b9634:	6883      	ldr	r3, [r0, #8]
   b9636:	4293      	cmp	r3, r2
   b9638:	d907      	bls.n	b964a <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   b963a:	6804      	ldr	r4, [r0, #0]
   b963c:	6809      	ldr	r1, [r1, #0]
   b963e:	18a0      	adds	r0, r4, r2
   b9640:	f001 fe22 	bl	bb288 <strstr>
	if (found == NULL) return -1;
   b9644:	b108      	cbz	r0, b964a <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   b9646:	1b00      	subs	r0, r0, r4
}
   b9648:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   b964a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b964e:	e7fb      	b.n	b9648 <_ZNK6String7indexOfERKS_j+0x16>

000b9650 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   b9650:	2200      	movs	r2, #0
   b9652:	f7ff bfee 	b.w	b9632 <_ZNK6String7indexOfERKS_j>
	...

000b9658 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b9658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b965a:	429a      	cmp	r2, r3
{
   b965c:	460f      	mov	r7, r1
   b965e:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b9660:	490c      	ldr	r1, [pc, #48]	; (b9694 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b9662:	bf88      	it	hi
   b9664:	4613      	movhi	r3, r2
{
   b9666:	4614      	mov	r4, r2
   b9668:	4606      	mov	r6, r0
	if (left > right) {
   b966a:	bf84      	itt	hi
   b966c:	462c      	movhi	r4, r5
   b966e:	461d      	movhi	r5, r3
	String out;
   b9670:	f7ff ff51 	bl	b9516 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b9674:	68bb      	ldr	r3, [r7, #8]
   b9676:	42a3      	cmp	r3, r4
   b9678:	d30a      	bcc.n	b9690 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b967a:	6839      	ldr	r1, [r7, #0]
   b967c:	42ab      	cmp	r3, r5
   b967e:	bf94      	ite	ls
   b9680:	ebc4 0203 	rsbls	r2, r4, r3
   b9684:	ebc4 0205 	rsbhi	r2, r4, r5
   b9688:	4421      	add	r1, r4
   b968a:	4630      	mov	r0, r6
   b968c:	f7ff ff2a 	bl	b94e4 <_ZN6String4copyEPKcj>
	return out;
}
   b9690:	4630      	mov	r0, r6
   b9692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9694:	000bd726 	.word	0x000bd726

000b9698 <_ZNK6String9substringEj>:
{
   b9698:	b510      	push	{r4, lr}
   b969a:	4604      	mov	r4, r0
	return substring(left, len);
   b969c:	688b      	ldr	r3, [r1, #8]
   b969e:	f7ff ffdb 	bl	b9658 <_ZNK6String9substringEjj>
}
   b96a2:	4620      	mov	r0, r4
   b96a4:	bd10      	pop	{r4, pc}
	...

000b96a8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b96a8:	4b05      	ldr	r3, [pc, #20]	; (b96c0 <_GLOBAL__sub_I_System+0x18>)
   b96aa:	2202      	movs	r2, #2
   b96ac:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b96ae:	4b05      	ldr	r3, [pc, #20]	; (b96c4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b96b0:	4a05      	ldr	r2, [pc, #20]	; (b96c8 <_GLOBAL__sub_I_System+0x20>)
   b96b2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b96b4:	2000      	movs	r0, #0
   b96b6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b96ba:	f7fe b9b7 	b.w	b7a2c <set_system_mode>
   b96be:	bf00      	nop
   b96c0:	2003e6f8 	.word	0x2003e6f8
   b96c4:	2003e6ec 	.word	0x2003e6ec
   b96c8:	ffff0000 	.word	0xffff0000

000b96cc <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b96cc:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b96ce:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b96d0:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b96d4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b96d6:	2201      	movs	r2, #1
   b96d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b96dc:	f10d 0107 	add.w	r1, sp, #7
   b96e0:	47a0      	blx	r4
}
   b96e2:	b002      	add	sp, #8
   b96e4:	bd10      	pop	{r4, pc}

000b96e6 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b96e6:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b96e8:	6803      	ldr	r3, [r0, #0]
   b96ea:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b96ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b96f0:	46a4      	mov	ip, r4
}
   b96f2:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b96f6:	4760      	bx	ip

000b96f8 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b96f8:	b513      	push	{r0, r1, r4, lr}
   b96fa:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b96fc:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b96fe:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b9702:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b9704:	f10d 0107 	add.w	r1, sp, #7
   b9708:	2201      	movs	r2, #1
   b970a:	47a0      	blx	r4
}
   b970c:	b002      	add	sp, #8
   b970e:	bd10      	pop	{r4, pc}

000b9710 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b9710:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b9712:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9714:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9718:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b971c:	429a      	cmp	r2, r3
int TCPClient::read() {
   b971e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9720:	d008      	beq.n	b9734 <_ZN9TCPClient4readEv+0x24>
   b9722:	6963      	ldr	r3, [r4, #20]
   b9724:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b9728:	1c51      	adds	r1, r2, #1
   b972a:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b972e:	4413      	add	r3, r2
   b9730:	7918      	ldrb	r0, [r3, #4]
}
   b9732:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9734:	6803      	ldr	r3, [r0, #0]
   b9736:	691b      	ldr	r3, [r3, #16]
   b9738:	4798      	blx	r3
   b973a:	2800      	cmp	r0, #0
   b973c:	d1f1      	bne.n	b9722 <_ZN9TCPClient4readEv+0x12>
   b973e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9742:	e7f6      	b.n	b9732 <_ZN9TCPClient4readEv+0x22>

000b9744 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b9744:	4770      	bx	lr

000b9746 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b9746:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b9748:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b974a:	43c0      	mvns	r0, r0
   b974c:	0fc0      	lsrs	r0, r0, #31
   b974e:	4770      	bx	lr

000b9750 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9750:	4770      	bx	lr
	...

000b9754 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9754:	4b06      	ldr	r3, [pc, #24]	; (b9770 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b9756:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b9758:	b510      	push	{r4, lr}
   b975a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b975e:	d005      	beq.n	b976c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b9760:	4608      	mov	r0, r1
   b9762:	f000 fd1d 	bl	ba1a0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b9766:	2800      	cmp	r0, #0
   b9768:	bf08      	it	eq
   b976a:	2400      	moveq	r4, #0
      }
   b976c:	4620      	mov	r0, r4
   b976e:	bd10      	pop	{r4, pc}
   b9770:	000bd8fc 	.word	0x000bd8fc

000b9774 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9774:	b510      	push	{r4, lr}
   b9776:	21ac      	movs	r1, #172	; 0xac
   b9778:	4604      	mov	r4, r0
   b977a:	f7fa fc92 	bl	b40a2 <_ZdlPvj>
   b977e:	4620      	mov	r0, r4
   b9780:	bd10      	pop	{r4, pc}

000b9782 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b9782:	21ac      	movs	r1, #172	; 0xac
   b9784:	f7fa bc8d 	b.w	b40a2 <_ZdlPvj>

000b9788 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b9788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b978c:	f04f 0800 	mov.w	r8, #0
   b9790:	b086      	sub	sp, #24
   b9792:	461c      	mov	r4, r3
   b9794:	f8c0 8004 	str.w	r8, [r0, #4]
   b9798:	4605      	mov	r5, r0
   b979a:	460e      	mov	r6, r1
   b979c:	4617      	mov	r7, r2
    struct timeval tv = {};
   b979e:	4641      	mov	r1, r8
   b97a0:	2210      	movs	r2, #16
   b97a2:	a802      	add	r0, sp, #8
   b97a4:	f001 fd00 	bl	bb1a8 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b97a8:	1c63      	adds	r3, r4, #1
   b97aa:	d009      	beq.n	b97c0 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b97ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b97b0:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b97b4:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b97b8:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b97bc:	435c      	muls	r4, r3
   b97be:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b97c0:	6968      	ldr	r0, [r5, #20]
   b97c2:	2310      	movs	r3, #16
   b97c4:	9300      	str	r3, [sp, #0]
   b97c6:	6800      	ldr	r0, [r0, #0]
   b97c8:	ab02      	add	r3, sp, #8
   b97ca:	f241 0205 	movw	r2, #4101	; 0x1005
   b97ce:	f640 71ff 	movw	r1, #4095	; 0xfff
   b97d2:	f7fe f87b 	bl	b78cc <sock_setsockopt>
    if (ret < 0) {
   b97d6:	2800      	cmp	r0, #0
   b97d8:	da07      	bge.n	b97ea <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b97da:	f7fe f9eb 	bl	b7bb4 <__errno>
   b97de:	6803      	ldr	r3, [r0, #0]
   b97e0:	606b      	str	r3, [r5, #4]
        return 0;
   b97e2:	2000      	movs	r0, #0
}
   b97e4:	b006      	add	sp, #24
   b97e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b97ea:	6968      	ldr	r0, [r5, #20]
   b97ec:	2300      	movs	r3, #0
   b97ee:	6800      	ldr	r0, [r0, #0]
   b97f0:	463a      	mov	r2, r7
   b97f2:	4631      	mov	r1, r6
   b97f4:	f7fe f88a 	bl	b790c <sock_send>
    if (ret < 0) {
   b97f8:	1e03      	subs	r3, r0, #0
   b97fa:	dbee      	blt.n	b97da <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b97fc:	4618      	mov	r0, r3
   b97fe:	e7f1      	b.n	b97e4 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b9800 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b9800:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b9802:	6984      	ldr	r4, [r0, #24]
   b9804:	4b0a      	ldr	r3, [pc, #40]	; (b9830 <_ZN9TCPClientD1Ev+0x30>)
   b9806:	6003      	str	r3, [r0, #0]
   b9808:	4605      	mov	r5, r0
   b980a:	b17c      	cbz	r4, b982c <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b980c:	6863      	ldr	r3, [r4, #4]
   b980e:	3b01      	subs	r3, #1
   b9810:	6063      	str	r3, [r4, #4]
   b9812:	b95b      	cbnz	r3, b982c <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b9814:	6823      	ldr	r3, [r4, #0]
   b9816:	4620      	mov	r0, r4
   b9818:	689b      	ldr	r3, [r3, #8]
   b981a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b981c:	68a3      	ldr	r3, [r4, #8]
   b981e:	3b01      	subs	r3, #1
   b9820:	60a3      	str	r3, [r4, #8]
   b9822:	b91b      	cbnz	r3, b982c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b9824:	6823      	ldr	r3, [r4, #0]
   b9826:	4620      	mov	r0, r4
   b9828:	68db      	ldr	r3, [r3, #12]
   b982a:	4798      	blx	r3
   b982c:	4628      	mov	r0, r5
   b982e:	bd38      	pop	{r3, r4, r5, pc}
   b9830:	000bda30 	.word	0x000bda30

000b9834 <_ZN9TCPClientD0Ev>:
   b9834:	b510      	push	{r4, lr}
   b9836:	4604      	mov	r4, r0
   b9838:	f7ff ffe2 	bl	b9800 <_ZN9TCPClientD1Ev>
   b983c:	4620      	mov	r0, r4
   b983e:	211c      	movs	r1, #28
   b9840:	f7fa fc2f 	bl	b40a2 <_ZdlPvj>
   b9844:	4620      	mov	r0, r4
   b9846:	bd10      	pop	{r4, pc}

000b9848 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b9848:	b530      	push	{r4, r5, lr}
   b984a:	b087      	sub	sp, #28
   b984c:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b984e:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b9850:	4668      	mov	r0, sp
   b9852:	f7ff fcb1 	bl	b91b8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9856:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9858:	3404      	adds	r4, #4
   b985a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b985c:	682b      	ldr	r3, [r5, #0]
   b985e:	7023      	strb	r3, [r4, #0]
    }
   b9860:	b007      	add	sp, #28
   b9862:	bd30      	pop	{r4, r5, pc}

000b9864 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b9864:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b9866:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b9868:	4b05      	ldr	r3, [pc, #20]	; (b9880 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b986a:	4604      	mov	r4, r0
   b986c:	358c      	adds	r5, #140	; 0x8c
   b986e:	f844 3b04 	str.w	r3, [r4], #4
   b9872:	4606      	mov	r6, r0
   b9874:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9878:	682b      	ldr	r3, [r5, #0]
   b987a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b987c:	4630      	mov	r0, r6
   b987e:	bd70      	pop	{r4, r5, r6, pc}
   b9880:	000bd9a8 	.word	0x000bd9a8

000b9884 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9888:	4698      	mov	r8, r3
    stop();
   b988a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b988c:	b093      	sub	sp, #76	; 0x4c
   b988e:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b9890:	2400      	movs	r4, #0
    stop();
   b9892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9894:	4606      	mov	r6, r0
   b9896:	4617      	mov	r7, r2
    stop();
   b9898:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b989a:	4628      	mov	r0, r5
   b989c:	466b      	mov	r3, sp
   b989e:	4622      	mov	r2, r4
   b98a0:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b98a2:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b98a4:	f7fe f80a 	bl	b78bc <netdb_getaddrinfo>
   b98a8:	4605      	mov	r5, r0
   b98aa:	2800      	cmp	r0, #0
   b98ac:	d163      	bne.n	b9976 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b98ae:	9b00      	ldr	r3, [sp, #0]
   b98b0:	2b00      	cmp	r3, #0
   b98b2:	d04b      	beq.n	b994c <_ZN9TCPClient7connectEPKctm+0xc8>
   b98b4:	695b      	ldr	r3, [r3, #20]
   b98b6:	2b00      	cmp	r3, #0
   b98b8:	d048      	beq.n	b994c <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b98ba:	a806      	add	r0, sp, #24
   b98bc:	f7ff fc38 	bl	b9130 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b98c0:	9b00      	ldr	r3, [sp, #0]
   b98c2:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b98c4:	7863      	ldrb	r3, [r4, #1]
   b98c6:	2b02      	cmp	r3, #2
   b98c8:	d104      	bne.n	b98d4 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b98ca:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b98cc:	a806      	add	r0, sp, #24
   b98ce:	f7ff ffbb 	bl	b9848 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b98d2:	e026      	b.n	b9922 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b98d4:	2b0a      	cmp	r3, #10
   b98d6:	d124      	bne.n	b9922 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b98d8:	2211      	movs	r2, #17
   b98da:	4629      	mov	r1, r5
   b98dc:	a801      	add	r0, sp, #4
   b98de:	f001 fc63 	bl	bb1a8 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b98e2:	68a3      	ldr	r3, [r4, #8]
   b98e4:	2b00      	cmp	r3, #0
   b98e6:	d038      	beq.n	b995a <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b98e8:	f104 0308 	add.w	r3, r4, #8
   b98ec:	f10d 0c04 	add.w	ip, sp, #4
   b98f0:	3418      	adds	r4, #24
   b98f2:	6818      	ldr	r0, [r3, #0]
   b98f4:	6859      	ldr	r1, [r3, #4]
   b98f6:	4662      	mov	r2, ip
   b98f8:	c203      	stmia	r2!, {r0, r1}
   b98fa:	3308      	adds	r3, #8
   b98fc:	42a3      	cmp	r3, r4
   b98fe:	4694      	mov	ip, r2
   b9900:	d1f7      	bne.n	b98f2 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b9902:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b9904:	a901      	add	r1, sp, #4
   b9906:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b9908:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b990c:	f7ff fc1e 	bl	b914c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9910:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b9914:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b9918:	ac07      	add	r4, sp, #28
   b991a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b991c:	f8dc 3000 	ldr.w	r3, [ip]
   b9920:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b9922:	a806      	add	r0, sp, #24
   b9924:	f7ff fc24 	bl	b9170 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b9928:	b180      	cbz	r0, b994c <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b992a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b992c:	ad07      	add	r5, sp, #28
   b992e:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b9932:	4b12      	ldr	r3, [pc, #72]	; (b997c <_ZN9TCPClient7connectEPKctm+0xf8>)
   b9934:	930c      	str	r3, [sp, #48]	; 0x30
   b9936:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9938:	ac0d      	add	r4, sp, #52	; 0x34
   b993a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b993c:	682b      	ldr	r3, [r5, #0]
   b993e:	7023      	strb	r3, [r4, #0]
   b9940:	463a      	mov	r2, r7
   b9942:	4643      	mov	r3, r8
   b9944:	a90c      	add	r1, sp, #48	; 0x30
   b9946:	4630      	mov	r0, r6
   b9948:	47c8      	blx	r9
   b994a:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b994c:	9800      	ldr	r0, [sp, #0]
   b994e:	f7fd ffad 	bl	b78ac <netdb_freeaddrinfo>
}
   b9952:	4628      	mov	r0, r5
   b9954:	b013      	add	sp, #76	; 0x4c
   b9956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b995a:	68e3      	ldr	r3, [r4, #12]
   b995c:	2b00      	cmp	r3, #0
   b995e:	d1c3      	bne.n	b98e8 <_ZN9TCPClient7connectEPKctm+0x64>
   b9960:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b9964:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b9968:	f7fd ff90 	bl	b788c <inet_htonl>
   b996c:	4581      	cmp	r9, r0
   b996e:	d1bb      	bne.n	b98e8 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b9970:	f104 0114 	add.w	r1, r4, #20
   b9974:	e7aa      	b.n	b98cc <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9976:	4625      	mov	r5, r4
   b9978:	e7e8      	b.n	b994c <_ZN9TCPClient7connectEPKctm+0xc8>
   b997a:	bf00      	nop
   b997c:	000bd9a8 	.word	0x000bd9a8

000b9980 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b9980:	b538      	push	{r3, r4, r5, lr}
   b9982:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b9984:	681a      	ldr	r2, [r3, #0]
   b9986:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b9988:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b998a:	da10      	bge.n	b99ae <_ZN9TCPClient9connectedEv+0x2e>
   b998c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9990:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9994:	429a      	cmp	r2, r3
   b9996:	d10a      	bne.n	b99ae <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b9998:	6803      	ldr	r3, [r0, #0]
   b999a:	691b      	ldr	r3, [r3, #16]
   b999c:	4798      	blx	r3
        if (!rv) {
   b999e:	4604      	mov	r4, r0
   b99a0:	b928      	cbnz	r0, b99ae <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b99a2:	682b      	ldr	r3, [r5, #0]
   b99a4:	4628      	mov	r0, r5
   b99a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b99a8:	4798      	blx	r3
        rv = available();
   b99aa:	4620      	mov	r0, r4
}
   b99ac:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b99ae:	2001      	movs	r0, #1
   b99b0:	e7fc      	b.n	b99ac <_ZN9TCPClient9connectedEv+0x2c>

000b99b2 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b99b2:	b510      	push	{r4, lr}
   b99b4:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b99b6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b99ba:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b99be:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b99c0:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b99c2:	d005      	beq.n	b99d0 <_ZN9TCPClient4peekEv+0x1e>
   b99c4:	6963      	ldr	r3, [r4, #20]
   b99c6:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b99ca:	4413      	add	r3, r2
   b99cc:	7918      	ldrb	r0, [r3, #4]
}
   b99ce:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b99d0:	6803      	ldr	r3, [r0, #0]
   b99d2:	691b      	ldr	r3, [r3, #16]
   b99d4:	4798      	blx	r3
   b99d6:	2800      	cmp	r0, #0
   b99d8:	d1f4      	bne.n	b99c4 <_ZN9TCPClient4peekEv+0x12>
   b99da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b99de:	e7f6      	b.n	b99ce <_ZN9TCPClient4peekEv+0x1c>

000b99e0 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b99e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b99e2:	6943      	ldr	r3, [r0, #20]
   b99e4:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b99e6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b99ea:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b99ee:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b99f0:	4605      	mov	r5, r0
   b99f2:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b99f4:	d016      	beq.n	b9a24 <_ZN9TCPClient4readEPhj+0x44>
   b99f6:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b99f8:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b99fc:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b9a00:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b9a02:	42bc      	cmp	r4, r7
   b9a04:	bf28      	it	cs
   b9a06:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b9a08:	3304      	adds	r3, #4
   b9a0a:	4622      	mov	r2, r4
   b9a0c:	4419      	add	r1, r3
   b9a0e:	4630      	mov	r0, r6
   b9a10:	f001 fba2 	bl	bb158 <memcpy>
   b9a14:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b9a16:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b9a1a:	4423      	add	r3, r4
   b9a1c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b9a20:	4620      	mov	r0, r4
   b9a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b9a24:	6803      	ldr	r3, [r0, #0]
   b9a26:	691b      	ldr	r3, [r3, #16]
   b9a28:	4798      	blx	r3
   b9a2a:	2800      	cmp	r0, #0
   b9a2c:	d1e3      	bne.n	b99f6 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b9a2e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b9a32:	e7f5      	b.n	b9a20 <_ZN9TCPClient4readEPhj+0x40>

000b9a34 <_ZN9TCPClient12flush_bufferEv>:
   b9a34:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b9a36:	2300      	movs	r3, #0
   b9a38:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b9a3c:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b9a3e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b9a42:	4770      	bx	lr

000b9a44 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9a48:	461f      	mov	r7, r3
    stop();
   b9a4a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9a4c:	460c      	mov	r4, r1
    stop();
   b9a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9a50:	b08a      	sub	sp, #40	; 0x28
   b9a52:	4605      	mov	r5, r0
   b9a54:	4616      	mov	r6, r2
    stop();
   b9a56:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b9a58:	7d23      	ldrb	r3, [r4, #20]
   b9a5a:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b9a5e:	2b04      	cmp	r3, #4
   b9a60:	bf0c      	ite	eq
   b9a62:	2002      	moveq	r0, #2
   b9a64:	200a      	movne	r0, #10
   b9a66:	2206      	movs	r2, #6
   b9a68:	2101      	movs	r1, #1
   b9a6a:	f7fd ff57 	bl	b791c <sock_socket>
   b9a6e:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b9a72:	696b      	ldr	r3, [r5, #20]
   b9a74:	681b      	ldr	r3, [r3, #0]
   b9a76:	2b00      	cmp	r3, #0
   b9a78:	da08      	bge.n	b9a8c <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b9a7a:	682b      	ldr	r3, [r5, #0]
   b9a7c:	4628      	mov	r0, r5
   b9a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9a80:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b9a82:	4798      	blx	r3
}
   b9a84:	4620      	mov	r0, r4
   b9a86:	b00a      	add	sp, #40	; 0x28
   b9a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b9a8c:	4628      	mov	r0, r5
   b9a8e:	f7ff ffd1 	bl	b9a34 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b9a92:	b1b7      	cbz	r7, b9ac2 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b9a94:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9a96:	a903      	add	r1, sp, #12
   b9a98:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b9a9a:	9303      	str	r3, [sp, #12]
   b9a9c:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9aa0:	f7fd fee4 	bl	b786c <if_index_to_name>
   b9aa4:	2800      	cmp	r0, #0
   b9aa6:	d1e8      	bne.n	b9a7a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b9aa8:	6968      	ldr	r0, [r5, #20]
   b9aaa:	2306      	movs	r3, #6
   b9aac:	9300      	str	r3, [sp, #0]
   b9aae:	6800      	ldr	r0, [r0, #0]
   b9ab0:	ab03      	add	r3, sp, #12
   b9ab2:	f241 020b 	movw	r2, #4107	; 0x100b
   b9ab6:	f640 71ff 	movw	r1, #4095	; 0xfff
   b9aba:	f7fd ff07 	bl	b78cc <sock_setsockopt>
   b9abe:	2800      	cmp	r0, #0
   b9ac0:	d1db      	bne.n	b9a7a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b9ac2:	221c      	movs	r2, #28
   b9ac4:	2100      	movs	r1, #0
   b9ac6:	a803      	add	r0, sp, #12
   b9ac8:	f001 fb6e 	bl	bb1a8 <memset>
    if (ip.version() == 4) {
   b9acc:	7d23      	ldrb	r3, [r4, #20]
   b9ace:	2b04      	cmp	r3, #4
   b9ad0:	d11d      	bne.n	b9b0e <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b9ad2:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b9ad6:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b9ad8:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b9adc:	f7fd fede 	bl	b789c <inet_htons>
   b9ae0:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b9ae4:	6860      	ldr	r0, [r4, #4]
   b9ae6:	f7fd fed1 	bl	b788c <inet_htonl>
   b9aea:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b9aec:	696b      	ldr	r3, [r5, #20]
   b9aee:	221c      	movs	r2, #28
   b9af0:	6818      	ldr	r0, [r3, #0]
   b9af2:	a903      	add	r1, sp, #12
   b9af4:	f7fd fefa 	bl	b78ec <sock_connect>
   b9af8:	2800      	cmp	r0, #0
   b9afa:	d1be      	bne.n	b9a7a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b9afc:	3404      	adds	r4, #4
   b9afe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9b00:	696d      	ldr	r5, [r5, #20]
   b9b02:	358c      	adds	r5, #140	; 0x8c
   b9b04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9b06:	6823      	ldr	r3, [r4, #0]
   b9b08:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b9b0a:	2401      	movs	r4, #1
   b9b0c:	e7ba      	b.n	b9a84 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b9b0e:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b9b12:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b9b14:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b9b18:	f7fd fec0 	bl	b789c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9b1c:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b9b1e:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9b22:	1d23      	adds	r3, r4, #4
   b9b24:	f104 0714 	add.w	r7, r4, #20
   b9b28:	6818      	ldr	r0, [r3, #0]
   b9b2a:	6859      	ldr	r1, [r3, #4]
   b9b2c:	4632      	mov	r2, r6
   b9b2e:	c203      	stmia	r2!, {r0, r1}
   b9b30:	3308      	adds	r3, #8
   b9b32:	42bb      	cmp	r3, r7
   b9b34:	4616      	mov	r6, r2
   b9b36:	d1f7      	bne.n	b9b28 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b9b38:	e7d8      	b.n	b9aec <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b9b3c <_ZN9TCPClient9availableEv>:
{
   b9b3c:	b530      	push	{r4, r5, lr}
   b9b3e:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b9b40:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b9b44:	b08b      	sub	sp, #44	; 0x2c
   b9b46:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b9b48:	b12b      	cbz	r3, b9b56 <_ZN9TCPClient9availableEv+0x1a>
   b9b4a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b9b4e:	429a      	cmp	r2, r3
   b9b50:	d101      	bne.n	b9b56 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b9b52:	f7ff ff6f 	bl	b9a34 <_ZN9TCPClient12flush_bufferEv>
   b9b56:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b9b58:	6808      	ldr	r0, [r1, #0]
   b9b5a:	2800      	cmp	r0, #0
   b9b5c:	db18      	blt.n	b9b90 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b9b5e:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b9b62:	2d7f      	cmp	r5, #127	; 0x7f
   b9b64:	d814      	bhi.n	b9b90 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b9b66:	3104      	adds	r1, #4
   b9b68:	2308      	movs	r3, #8
   b9b6a:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b9b6e:	4429      	add	r1, r5
   b9b70:	f7fd fec4 	bl	b78fc <sock_recv>
            if (ret > 0) {
   b9b74:	2800      	cmp	r0, #0
   b9b76:	dd13      	ble.n	b9ba0 <_ZN9TCPClient9availableEv+0x64>
   b9b78:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b9b7a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9b7e:	b90a      	cbnz	r2, b9b84 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b9b80:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b9b84:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b9b86:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9b8a:	4410      	add	r0, r2
   b9b8c:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b9b90:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b9b92:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b9b96:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b9b9a:	1ac0      	subs	r0, r0, r3
   b9b9c:	b00b      	add	sp, #44	; 0x2c
   b9b9e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b9ba0:	f7fe f808 	bl	b7bb4 <__errno>
   b9ba4:	6803      	ldr	r3, [r0, #0]
   b9ba6:	2b0b      	cmp	r3, #11
   b9ba8:	d0f2      	beq.n	b9b90 <_ZN9TCPClient9availableEv+0x54>
   b9baa:	f7fe f803 	bl	b7bb4 <__errno>
   b9bae:	6803      	ldr	r3, [r0, #0]
   b9bb0:	2b0b      	cmp	r3, #11
   b9bb2:	d0ed      	beq.n	b9b90 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b9bb4:	2320      	movs	r3, #32
   b9bb6:	2500      	movs	r5, #0
   b9bb8:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b9bbc:	f7fd fffa 	bl	b7bb4 <__errno>
   b9bc0:	6803      	ldr	r3, [r0, #0]
   b9bc2:	9301      	str	r3, [sp, #4]
   b9bc4:	4b08      	ldr	r3, [pc, #32]	; (b9be8 <_ZN9TCPClient9availableEv+0xac>)
   b9bc6:	4909      	ldr	r1, [pc, #36]	; (b9bec <_ZN9TCPClient9availableEv+0xb0>)
   b9bc8:	9300      	str	r3, [sp, #0]
   b9bca:	aa02      	add	r2, sp, #8
   b9bcc:	462b      	mov	r3, r5
   b9bce:	2032      	movs	r0, #50	; 0x32
   b9bd0:	f7fd ff24 	bl	b7a1c <log_message>
                    sock_close(d_->sock);
   b9bd4:	6963      	ldr	r3, [r4, #20]
   b9bd6:	6818      	ldr	r0, [r3, #0]
   b9bd8:	f7fd fe80 	bl	b78dc <sock_close>
   b9bdc:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b9bde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9be2:	601a      	str	r2, [r3, #0]
   b9be4:	e7d4      	b.n	b9b90 <_ZN9TCPClient9availableEv+0x54>
   b9be6:	bf00      	nop
   b9be8:	000bd9fb 	.word	0x000bd9fb
   b9bec:	000bd9f4 	.word	0x000bd9f4

000b9bf0 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b9bf0:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b9bf2:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b9bf4:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b9bf6:	6818      	ldr	r0, [r3, #0]
   b9bf8:	2800      	cmp	r0, #0
   b9bfa:	db01      	blt.n	b9c00 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b9bfc:	f7fd fe6e 	bl	b78dc <sock_close>
   b9c00:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b9c02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9c06:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b9c08:	6960      	ldr	r0, [r4, #20]
   b9c0a:	2211      	movs	r2, #17
   b9c0c:	2100      	movs	r1, #0
   b9c0e:	308c      	adds	r0, #140	; 0x8c
   b9c10:	f001 faca 	bl	bb1a8 <memset>
    flush_buffer();
   b9c14:	4620      	mov	r0, r4
}
   b9c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b9c1a:	f7ff bf0b 	b.w	b9a34 <_ZN9TCPClient12flush_bufferEv>

000b9c1e <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b9c1e:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b9c20:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b9c22:	4604      	mov	r4, r0
          total(0) {
   b9c24:	6001      	str	r1, [r0, #0]
   b9c26:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b9c2a:	3088      	adds	r0, #136	; 0x88
   b9c2c:	f7ff fa80 	bl	b9130 <_ZN9IPAddressC1Ev>
}
   b9c30:	4620      	mov	r0, r4
   b9c32:	bd10      	pop	{r4, pc}

000b9c34 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b9c34:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9c36:	2300      	movs	r3, #0
   b9c38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b9c3c:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b9c40:	4a0e      	ldr	r2, [pc, #56]	; (b9c7c <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b9c42:	6103      	str	r3, [r0, #16]
   b9c44:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9c46:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b9c48:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9c4a:	20ac      	movs	r0, #172	; 0xac
   b9c4c:	9101      	str	r1, [sp, #4]
   b9c4e:	f7fa fa22 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b9c52:	1e05      	subs	r5, r0, #0
   b9c54:	f105 060c 	add.w	r6, r5, #12
   b9c58:	d008      	beq.n	b9c6c <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b9c5a:	2301      	movs	r3, #1
   b9c5c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b9c60:	4b07      	ldr	r3, [pc, #28]	; (b9c80 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9c62:	9901      	ldr	r1, [sp, #4]
   b9c64:	602b      	str	r3, [r5, #0]
   b9c66:	4630      	mov	r0, r6
   b9c68:	f7ff ffd9 	bl	b9c1e <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b9c6c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b9c6e:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b9c72:	f7ff fedf 	bl	b9a34 <_ZN9TCPClient12flush_bufferEv>
}
   b9c76:	b002      	add	sp, #8
   b9c78:	bd70      	pop	{r4, r5, r6, pc}
   b9c7a:	bf00      	nop
   b9c7c:	000bda30 	.word	0x000bda30
   b9c80:	000bda14 	.word	0x000bda14

000b9c84 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b9c84:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b9c86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b9c8a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b9c8c:	f7ff ffd2 	bl	b9c34 <_ZN9TCPClientC1Ei>
}
   b9c90:	4620      	mov	r0, r4
   b9c92:	bd10      	pop	{r4, pc}

000b9c94 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b9c94:	b510      	push	{r4, lr}
   b9c96:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b9c98:	6800      	ldr	r0, [r0, #0]
   b9c9a:	2800      	cmp	r0, #0
   b9c9c:	db01      	blt.n	b9ca2 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b9c9e:	f7fd fe1d 	bl	b78dc <sock_close>
    }
}
   b9ca2:	4620      	mov	r0, r4
   b9ca4:	bd10      	pop	{r4, pc}

000b9ca6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b9ca6:	300c      	adds	r0, #12
   b9ca8:	f7ff bff4 	b.w	b9c94 <_ZN9TCPClient4DataD1Ev>

000b9cac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b9cac:	4b02      	ldr	r3, [pc, #8]	; (b9cb8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b9cae:	681a      	ldr	r2, [r3, #0]
   b9cb0:	4b02      	ldr	r3, [pc, #8]	; (b9cbc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b9cb2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b9cb4:	4770      	bx	lr
   b9cb6:	bf00      	nop
   b9cb8:	20035320 	.word	0x20035320
   b9cbc:	2003e6fc 	.word	0x2003e6fc

000b9cc0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b9cc0:	4770      	bx	lr

000b9cc2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9cc2:	7441      	strb	r1, [r0, #17]
}
   b9cc4:	4770      	bx	lr

000b9cc6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b9cc6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b9cc8:	7c00      	ldrb	r0, [r0, #16]
   b9cca:	f7fd fe57 	bl	b797c <hal_usart_available_data_for_write>
}
   b9cce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9cd2:	bd08      	pop	{r3, pc}

000b9cd4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b9cd4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b9cd6:	7c00      	ldrb	r0, [r0, #16]
   b9cd8:	f7fd fe30 	bl	b793c <hal_usart_available>
}
   b9cdc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9ce0:	bd08      	pop	{r3, pc}

000b9ce2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b9ce2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b9ce4:	7c00      	ldrb	r0, [r0, #16]
   b9ce6:	f7fd fe39 	bl	b795c <hal_usart_peek>
}
   b9cea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9cee:	bd08      	pop	{r3, pc}

000b9cf0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b9cf0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b9cf2:	7c00      	ldrb	r0, [r0, #16]
   b9cf4:	f7fd fe2a 	bl	b794c <hal_usart_read>
}
   b9cf8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9cfc:	bd08      	pop	{r3, pc}

000b9cfe <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b9cfe:	7c00      	ldrb	r0, [r0, #16]
   b9d00:	f7fd be34 	b.w	b796c <hal_usart_flush>

000b9d04 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b9d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9d06:	7c45      	ldrb	r5, [r0, #17]
{
   b9d08:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9d0a:	b12d      	cbz	r5, b9d18 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b9d0c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b9d0e:	b003      	add	sp, #12
   b9d10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b9d14:	f7fd be0a 	b.w	b792c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9d18:	7c00      	ldrb	r0, [r0, #16]
   b9d1a:	9101      	str	r1, [sp, #4]
   b9d1c:	f7fd fe2e 	bl	b797c <hal_usart_available_data_for_write>
   b9d20:	2800      	cmp	r0, #0
   b9d22:	9901      	ldr	r1, [sp, #4]
   b9d24:	dcf2      	bgt.n	b9d0c <_ZN11USARTSerial5writeEh+0x8>
}
   b9d26:	4628      	mov	r0, r5
   b9d28:	b003      	add	sp, #12
   b9d2a:	bd30      	pop	{r4, r5, pc}

000b9d2c <_ZN11USARTSerialD0Ev>:
   b9d2c:	b510      	push	{r4, lr}
   b9d2e:	2114      	movs	r1, #20
   b9d30:	4604      	mov	r4, r0
   b9d32:	f7fa f9b6 	bl	b40a2 <_ZdlPvj>
   b9d36:	4620      	mov	r0, r4
   b9d38:	bd10      	pop	{r4, pc}
	...

000b9d3c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b9d3c:	b510      	push	{r4, lr}
   b9d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9d42:	4604      	mov	r4, r0
   b9d44:	4608      	mov	r0, r1
   b9d46:	4611      	mov	r1, r2
   b9d48:	2200      	movs	r2, #0
   b9d4a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b9d4e:	4b04      	ldr	r3, [pc, #16]	; (b9d60 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b9d50:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9d52:	2301      	movs	r3, #1
  _serial = serial;
   b9d54:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9d56:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b9d58:	f7fd fe18 	bl	b798c <hal_usart_init_ex>
}
   b9d5c:	4620      	mov	r0, r4
   b9d5e:	bd10      	pop	{r4, pc}
   b9d60:	000bda98 	.word	0x000bda98

000b9d64 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9d64:	7441      	strb	r1, [r0, #17]
}
   b9d66:	4770      	bx	lr

000b9d68 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9d68:	4770      	bx	lr

000b9d6a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b9d6a:	4770      	bx	lr

000b9d6c <_ZN9USBSerial4readEv>:
{
   b9d6c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b9d6e:	2100      	movs	r1, #0
   b9d70:	7c00      	ldrb	r0, [r0, #16]
   b9d72:	f7fd fe33 	bl	b79dc <HAL_USB_USART_Receive_Data>
}
   b9d76:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9d7a:	bd08      	pop	{r3, pc}

000b9d7c <_ZN9USBSerial4peekEv>:
{
   b9d7c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b9d7e:	2101      	movs	r1, #1
   b9d80:	7c00      	ldrb	r0, [r0, #16]
   b9d82:	f7fd fe2b 	bl	b79dc <HAL_USB_USART_Receive_Data>
}
   b9d86:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9d8a:	bd08      	pop	{r3, pc}

000b9d8c <_ZN9USBSerial17availableForWriteEv>:
{
   b9d8c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b9d8e:	7c00      	ldrb	r0, [r0, #16]
   b9d90:	f7fd fe1c 	bl	b79cc <HAL_USB_USART_Available_Data_For_Write>
}
   b9d94:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9d98:	bd08      	pop	{r3, pc}

000b9d9a <_ZN9USBSerial9availableEv>:
{
   b9d9a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b9d9c:	7c00      	ldrb	r0, [r0, #16]
   b9d9e:	f7fd fe0d 	bl	b79bc <HAL_USB_USART_Available_Data>
}
   b9da2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9da6:	bd08      	pop	{r3, pc}

000b9da8 <_ZN9USBSerial5writeEh>:
{
   b9da8:	b513      	push	{r0, r1, r4, lr}
   b9daa:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9dac:	7c00      	ldrb	r0, [r0, #16]
{
   b9dae:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9db0:	f7fd fe0c 	bl	b79cc <HAL_USB_USART_Available_Data_For_Write>
   b9db4:	2800      	cmp	r0, #0
   b9db6:	9901      	ldr	r1, [sp, #4]
   b9db8:	dc01      	bgt.n	b9dbe <_ZN9USBSerial5writeEh+0x16>
   b9dba:	7c60      	ldrb	r0, [r4, #17]
   b9dbc:	b120      	cbz	r0, b9dc8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b9dbe:	7c20      	ldrb	r0, [r4, #16]
   b9dc0:	f7fd fe14 	bl	b79ec <HAL_USB_USART_Send_Data>
   b9dc4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b9dc8:	b002      	add	sp, #8
   b9dca:	bd10      	pop	{r4, pc}

000b9dcc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b9dcc:	7c00      	ldrb	r0, [r0, #16]
   b9dce:	f7fd be15 	b.w	b79fc <HAL_USB_USART_Flush_Data>

000b9dd2 <_ZN9USBSerialD0Ev>:
   b9dd2:	b510      	push	{r4, lr}
   b9dd4:	2114      	movs	r1, #20
   b9dd6:	4604      	mov	r4, r0
   b9dd8:	f7fa f963 	bl	b40a2 <_ZdlPvj>
   b9ddc:	4620      	mov	r0, r4
   b9dde:	bd10      	pop	{r4, pc}

000b9de0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b9de0:	b510      	push	{r4, lr}
   b9de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9de6:	4604      	mov	r4, r0
   b9de8:	4608      	mov	r0, r1
   b9dea:	2100      	movs	r1, #0
   b9dec:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b9df0:	4b04      	ldr	r3, [pc, #16]	; (b9e04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b9df2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9df4:	2301      	movs	r3, #1
  _serial = serial;
   b9df6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9df8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b9dfa:	4611      	mov	r1, r2
   b9dfc:	f7fd fdce 	bl	b799c <HAL_USB_USART_Init>
}
   b9e00:	4620      	mov	r0, r4
   b9e02:	bd10      	pop	{r4, pc}
   b9e04:	000bdac8 	.word	0x000bdac8

000b9e08 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b9e08:	7c00      	ldrb	r0, [r0, #16]
   b9e0a:	2200      	movs	r2, #0
   b9e0c:	f7fd bdce 	b.w	b79ac <HAL_USB_USART_Begin>

000b9e10 <_Z19acquireSerialBufferv>:
{
   b9e10:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b9e12:	2214      	movs	r2, #20
{
   b9e14:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b9e16:	2100      	movs	r1, #0
   b9e18:	f001 f9c6 	bl	bb1a8 <memset>
}
   b9e1c:	4620      	mov	r0, r4
   b9e1e:	bd10      	pop	{r4, pc}

000b9e20 <_Z16_fetch_usbserialv>:
{
   b9e20:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9e22:	4c0f      	ldr	r4, [pc, #60]	; (b9e60 <_Z16_fetch_usbserialv+0x40>)
{
   b9e24:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b9e26:	a803      	add	r0, sp, #12
   b9e28:	f7ff fff2 	bl	b9e10 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9e2c:	7821      	ldrb	r1, [r4, #0]
   b9e2e:	f3bf 8f5b 	dmb	ish
   b9e32:	f011 0101 	ands.w	r1, r1, #1
   b9e36:	d10f      	bne.n	b9e58 <_Z16_fetch_usbserialv+0x38>
   b9e38:	4620      	mov	r0, r4
   b9e3a:	9101      	str	r1, [sp, #4]
   b9e3c:	f7fa f933 	bl	b40a6 <__cxa_guard_acquire>
   b9e40:	9901      	ldr	r1, [sp, #4]
   b9e42:	b148      	cbz	r0, b9e58 <_Z16_fetch_usbserialv+0x38>
   b9e44:	aa03      	add	r2, sp, #12
   b9e46:	4807      	ldr	r0, [pc, #28]	; (b9e64 <_Z16_fetch_usbserialv+0x44>)
   b9e48:	f7ff ffca 	bl	b9de0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b9e4c:	4620      	mov	r0, r4
   b9e4e:	f7fa f92f 	bl	b40b0 <__cxa_guard_release>
   b9e52:	4805      	ldr	r0, [pc, #20]	; (b9e68 <_Z16_fetch_usbserialv+0x48>)
   b9e54:	f001 f966 	bl	bb124 <atexit>
	return _usbserial;
}
   b9e58:	4802      	ldr	r0, [pc, #8]	; (b9e64 <_Z16_fetch_usbserialv+0x44>)
   b9e5a:	b008      	add	sp, #32
   b9e5c:	bd10      	pop	{r4, pc}
   b9e5e:	bf00      	nop
   b9e60:	2003e700 	.word	0x2003e700
   b9e64:	2003e704 	.word	0x2003e704
   b9e68:	000b9d69 	.word	0x000b9d69

000b9e6c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b9e6c:	2200      	movs	r2, #0
   b9e6e:	6840      	ldr	r0, [r0, #4]
   b9e70:	4611      	mov	r1, r2
   b9e72:	f7fd be1f 	b.w	b7ab4 <network_ready>

000b9e76 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9e76:	2200      	movs	r2, #0
   b9e78:	6840      	ldr	r0, [r0, #4]
   b9e7a:	4611      	mov	r1, r2
   b9e7c:	f7fd be3a 	b.w	b7af4 <network_listening>

000b9e80 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9e80:	2200      	movs	r2, #0
   b9e82:	6840      	ldr	r0, [r0, #4]
   b9e84:	4611      	mov	r1, r2
   b9e86:	f7fd be45 	b.w	b7b14 <network_get_listen_timeout>

000b9e8a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9e8a:	6840      	ldr	r0, [r0, #4]
   b9e8c:	2200      	movs	r2, #0
   b9e8e:	f7fd be39 	b.w	b7b04 <network_set_listen_timeout>

000b9e92 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9e92:	6840      	ldr	r0, [r0, #4]
   b9e94:	2200      	movs	r2, #0
   b9e96:	f081 0101 	eor.w	r1, r1, #1
   b9e9a:	f7fd be23 	b.w	b7ae4 <network_listen>

000b9e9e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9e9e:	2300      	movs	r3, #0
   b9ea0:	6840      	ldr	r0, [r0, #4]
   b9ea2:	461a      	mov	r2, r3
   b9ea4:	4619      	mov	r1, r3
   b9ea6:	f7fd be15 	b.w	b7ad4 <network_off>

000b9eaa <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b9eaa:	2300      	movs	r3, #0
   b9eac:	6840      	ldr	r0, [r0, #4]
   b9eae:	461a      	mov	r2, r3
   b9eb0:	4619      	mov	r1, r3
   b9eb2:	f7fd be07 	b.w	b7ac4 <network_on>

000b9eb6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9eb6:	2200      	movs	r2, #0
   b9eb8:	6840      	ldr	r0, [r0, #4]
   b9eba:	4611      	mov	r1, r2
   b9ebc:	f7fd bdea 	b.w	b7a94 <network_connecting>

000b9ec0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9ec0:	6840      	ldr	r0, [r0, #4]
   b9ec2:	2200      	movs	r2, #0
   b9ec4:	2102      	movs	r1, #2
   b9ec6:	f7fd bded 	b.w	b7aa4 <network_disconnect>

000b9eca <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b9eca:	2300      	movs	r3, #0
   b9ecc:	6840      	ldr	r0, [r0, #4]
   b9ece:	461a      	mov	r2, r3
   b9ed0:	f7fd bdd8 	b.w	b7a84 <network_connect>

000b9ed4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b9ed4:	4b02      	ldr	r3, [pc, #8]	; (b9ee0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b9ed6:	2204      	movs	r2, #4
   b9ed8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b9eda:	4a02      	ldr	r2, [pc, #8]	; (b9ee4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b9edc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b9ede:	4770      	bx	lr
   b9ee0:	2003e718 	.word	0x2003e718
   b9ee4:	000bdaf8 	.word	0x000bdaf8

000b9ee8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b9ee8:	b510      	push	{r4, lr}
   b9eea:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b9eec:	f001 f9a4 	bl	bb238 <strlen>
   b9ef0:	3801      	subs	r0, #1
   b9ef2:	1823      	adds	r3, r4, r0
   b9ef4:	4620      	mov	r0, r4
	while(i<j){
   b9ef6:	4283      	cmp	r3, r0
   b9ef8:	d906      	bls.n	b9f08 <_Z11str_reversePc+0x20>
		c = *i;
   b9efa:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b9efc:	7819      	ldrb	r1, [r3, #0]
   b9efe:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b9f02:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b9f06:	e7f6      	b.n	b9ef6 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b9f08:	bd10      	pop	{r4, pc}

000b9f0a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b9f0a:	b570      	push	{r4, r5, r6, lr}
   b9f0c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b9f0e:	1e91      	subs	r1, r2, #2
   b9f10:	2922      	cmp	r1, #34	; 0x22
   b9f12:	d81d      	bhi.n	b9f50 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b9f14:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b9f16:	b930      	cbnz	r0, b9f26 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b9f18:	4423      	add	r3, r4
            *ptr++ = '0';
   b9f1a:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b9f1c:	429d      	cmp	r5, r3
   b9f1e:	d210      	bcs.n	b9f42 <ultoa+0x38>
            *ptr++ = '0';
   b9f20:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b9f24:	e7fa      	b.n	b9f1c <ultoa+0x12>
            result.quot = a/radix;
   b9f26:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b9f2a:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b9f2e:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b9f30:	2809      	cmp	r0, #9
                *ptr += '0';
   b9f32:	bf94      	ite	ls
   b9f34:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b9f36:	3157      	addhi	r1, #87	; 0x57
   b9f38:	b2c9      	uxtb	r1, r1
   b9f3a:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b9f3e:	4630      	mov	r0, r6
	while(a){
   b9f40:	e7e9      	b.n	b9f16 <ultoa+0xc>

	*ptr = '\0';
   b9f42:	2300      	movs	r3, #0
	str_reverse(buffer);
   b9f44:	4620      	mov	r0, r4
	*ptr = '\0';
   b9f46:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b9f48:	f7ff ffce 	bl	b9ee8 <_Z11str_reversePc>
	return buffer;
   b9f4c:	4620      	mov	r0, r4
}
   b9f4e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b9f50:	2000      	movs	r0, #0
   b9f52:	e7fc      	b.n	b9f4e <ultoa+0x44>

000b9f54 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b9f54:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b9f56:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b9f58:	460c      	mov	r4, r1
   b9f5a:	4615      	mov	r5, r2
	if(a<0){
   b9f5c:	da0e      	bge.n	b9f7c <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b9f5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b9f62:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b9f66:	bf14      	ite	ne
   b9f68:	4258      	negne	r0, r3
   b9f6a:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b9f6c:	2301      	movs	r3, #1
		*buffer = '-';
   b9f6e:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b9f70:	462a      	mov	r2, r5
   b9f72:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b9f74:	f7ff ffc9 	bl	b9f0a <ultoa>
	}
	return buffer;
}
   b9f78:	4620      	mov	r0, r4
   b9f7a:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b9f7c:	2301      	movs	r3, #1
   b9f7e:	e7f9      	b.n	b9f74 <itoa+0x20>

000b9f80 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b9f80:	4b01      	ldr	r3, [pc, #4]	; (b9f88 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b9f82:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b9f84:	4770      	bx	lr
   b9f86:	bf00      	nop
   b9f88:	20035328 	.word	0x20035328

000b9f8c <serialEventRun>:
{
   b9f8c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b9f8e:	4b0b      	ldr	r3, [pc, #44]	; (b9fbc <serialEventRun+0x30>)
   b9f90:	b143      	cbz	r3, b9fa4 <serialEventRun+0x18>
   b9f92:	f7ff ff45 	bl	b9e20 <_Z16_fetch_usbserialv>
   b9f96:	6803      	ldr	r3, [r0, #0]
   b9f98:	691b      	ldr	r3, [r3, #16]
   b9f9a:	4798      	blx	r3
   b9f9c:	2800      	cmp	r0, #0
   b9f9e:	dd01      	ble.n	b9fa4 <serialEventRun+0x18>
        serialEvent();
   b9fa0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b9fa4:	4b06      	ldr	r3, [pc, #24]	; (b9fc0 <serialEventRun+0x34>)
   b9fa6:	b143      	cbz	r3, b9fba <serialEventRun+0x2e>
   b9fa8:	f000 f8c8 	bl	ba13c <_Z22__fetch_global_Serial1v>
   b9fac:	6803      	ldr	r3, [r0, #0]
   b9fae:	691b      	ldr	r3, [r3, #16]
   b9fb0:	4798      	blx	r3
   b9fb2:	2800      	cmp	r0, #0
   b9fb4:	dd01      	ble.n	b9fba <serialEventRun+0x2e>
        serialEvent1();
   b9fb6:	f3af 8000 	nop.w
}
   b9fba:	bd08      	pop	{r3, pc}
	...

000b9fc4 <_post_loop>:
{
   b9fc4:	b508      	push	{r3, lr}
	serialEventRun();
   b9fc6:	f7ff ffe1 	bl	b9f8c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b9fca:	f7fd fbef 	bl	b77ac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b9fce:	4b01      	ldr	r3, [pc, #4]	; (b9fd4 <_post_loop+0x10>)
   b9fd0:	6018      	str	r0, [r3, #0]
}
   b9fd2:	bd08      	pop	{r3, pc}
   b9fd4:	2003e728 	.word	0x2003e728

000b9fd8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9fd8:	4805      	ldr	r0, [pc, #20]	; (b9ff0 <_Z33system_initialize_user_backup_ramv+0x18>)
   b9fda:	4a06      	ldr	r2, [pc, #24]	; (b9ff4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b9fdc:	4906      	ldr	r1, [pc, #24]	; (b9ff8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b9fde:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9fe0:	1a12      	subs	r2, r2, r0
   b9fe2:	f001 f8b9 	bl	bb158 <memcpy>
    __backup_sram_signature = signature;
   b9fe6:	4b05      	ldr	r3, [pc, #20]	; (b9ffc <_Z33system_initialize_user_backup_ramv+0x24>)
   b9fe8:	4a05      	ldr	r2, [pc, #20]	; (ba000 <_Z33system_initialize_user_backup_ramv+0x28>)
   b9fea:	601a      	str	r2, [r3, #0]
}
   b9fec:	bd08      	pop	{r3, pc}
   b9fee:	bf00      	nop
   b9ff0:	2003f400 	.word	0x2003f400
   b9ff4:	2003f404 	.word	0x2003f404
   b9ff8:	000be044 	.word	0x000be044
   b9ffc:	2003f400 	.word	0x2003f400
   ba000:	9a271c1e 	.word	0x9a271c1e

000ba004 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   ba004:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ba006:	2300      	movs	r3, #0
   ba008:	9300      	str	r3, [sp, #0]
   ba00a:	461a      	mov	r2, r3
   ba00c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ba010:	f7fd fd26 	bl	b7a60 <system_ctrl_set_result>
}
   ba014:	b003      	add	sp, #12
   ba016:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ba01c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   ba01c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   ba01e:	8843      	ldrh	r3, [r0, #2]
   ba020:	2b0a      	cmp	r3, #10
   ba022:	d008      	beq.n	ba036 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   ba024:	2b50      	cmp	r3, #80	; 0x50
   ba026:	d10b      	bne.n	ba040 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   ba028:	4b09      	ldr	r3, [pc, #36]	; (ba050 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   ba02a:	681b      	ldr	r3, [r3, #0]
   ba02c:	b14b      	cbz	r3, ba042 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   ba02e:	b003      	add	sp, #12
   ba030:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   ba034:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   ba036:	f7ff ffe5 	bl	ba004 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   ba03a:	b003      	add	sp, #12
   ba03c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ba040:	2300      	movs	r3, #0
   ba042:	9300      	str	r3, [sp, #0]
   ba044:	461a      	mov	r2, r3
   ba046:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ba04a:	f7fd fd09 	bl	b7a60 <system_ctrl_set_result>
}
   ba04e:	e7f4      	b.n	ba03a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   ba050:	2003e724 	.word	0x2003e724

000ba054 <module_user_init_hook>:
{
   ba054:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   ba056:	4812      	ldr	r0, [pc, #72]	; (ba0a0 <module_user_init_hook+0x4c>)
   ba058:	2100      	movs	r1, #0
   ba05a:	f7fd fdbb 	bl	b7bd4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   ba05e:	4b11      	ldr	r3, [pc, #68]	; (ba0a4 <module_user_init_hook+0x50>)
   ba060:	681a      	ldr	r2, [r3, #0]
   ba062:	4b11      	ldr	r3, [pc, #68]	; (ba0a8 <module_user_init_hook+0x54>)
   ba064:	429a      	cmp	r2, r3
   ba066:	4b11      	ldr	r3, [pc, #68]	; (ba0ac <module_user_init_hook+0x58>)
   ba068:	bf0c      	ite	eq
   ba06a:	2201      	moveq	r2, #1
   ba06c:	2200      	movne	r2, #0
   ba06e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   ba070:	d001      	beq.n	ba076 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   ba072:	f7ff ffb1 	bl	b9fd8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   ba076:	f7fd fb89 	bl	b778c <HAL_RNG_GetRandomNumber>
   ba07a:	4604      	mov	r4, r0
    srand(seed);
   ba07c:	f001 f89c 	bl	bb1b8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   ba080:	4b0b      	ldr	r3, [pc, #44]	; (ba0b0 <module_user_init_hook+0x5c>)
   ba082:	b113      	cbz	r3, ba08a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   ba084:	4620      	mov	r0, r4
   ba086:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   ba08a:	2100      	movs	r1, #0
   ba08c:	4808      	ldr	r0, [pc, #32]	; (ba0b0 <module_user_init_hook+0x5c>)
   ba08e:	f7fd fcf1 	bl	b7a74 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   ba092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   ba096:	4807      	ldr	r0, [pc, #28]	; (ba0b4 <module_user_init_hook+0x60>)
   ba098:	2100      	movs	r1, #0
   ba09a:	f7fd bcd7 	b.w	b7a4c <system_ctrl_set_app_request_handler>
   ba09e:	bf00      	nop
   ba0a0:	000b9f81 	.word	0x000b9f81
   ba0a4:	2003f400 	.word	0x2003f400
   ba0a8:	9a271c1e 	.word	0x9a271c1e
   ba0ac:	2003e720 	.word	0x2003e720
   ba0b0:	00000000 	.word	0x00000000
   ba0b4:	000ba01d 	.word	0x000ba01d

000ba0b8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba0b8:	4770      	bx	lr
	...

000ba0bc <_Z19__fetch_global_Wirev>:
{
   ba0bc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba0be:	4d0e      	ldr	r5, [pc, #56]	; (ba0f8 <_Z19__fetch_global_Wirev+0x3c>)
   ba0c0:	7829      	ldrb	r1, [r5, #0]
   ba0c2:	f3bf 8f5b 	dmb	ish
   ba0c6:	f011 0401 	ands.w	r4, r1, #1
{
   ba0ca:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba0cc:	d111      	bne.n	ba0f2 <_Z19__fetch_global_Wirev+0x36>
   ba0ce:	4628      	mov	r0, r5
   ba0d0:	f7f9 ffe9 	bl	b40a6 <__cxa_guard_acquire>
   ba0d4:	b168      	cbz	r0, ba0f2 <_Z19__fetch_global_Wirev+0x36>
   ba0d6:	a801      	add	r0, sp, #4
   ba0d8:	f7fa fa76 	bl	b45c8 <_Z17acquireWireBufferv>
   ba0dc:	aa01      	add	r2, sp, #4
   ba0de:	4621      	mov	r1, r4
   ba0e0:	4806      	ldr	r0, [pc, #24]	; (ba0fc <_Z19__fetch_global_Wirev+0x40>)
   ba0e2:	f7fe ff99 	bl	b9018 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   ba0e6:	4628      	mov	r0, r5
   ba0e8:	f7f9 ffe2 	bl	b40b0 <__cxa_guard_release>
   ba0ec:	4804      	ldr	r0, [pc, #16]	; (ba100 <_Z19__fetch_global_Wirev+0x44>)
   ba0ee:	f001 f819 	bl	bb124 <atexit>
	return wire;
}
   ba0f2:	4802      	ldr	r0, [pc, #8]	; (ba0fc <_Z19__fetch_global_Wirev+0x40>)
   ba0f4:	b007      	add	sp, #28
   ba0f6:	bd30      	pop	{r4, r5, pc}
   ba0f8:	2003e72c 	.word	0x2003e72c
   ba0fc:	2003e730 	.word	0x2003e730
   ba100:	000ba0b9 	.word	0x000ba0b9

000ba104 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba104:	4770      	bx	lr
	...

000ba108 <_Z20acquireSerial1Bufferv>:
{
   ba108:	b538      	push	{r3, r4, r5, lr}
   ba10a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   ba10c:	2514      	movs	r5, #20
   ba10e:	462a      	mov	r2, r5
   ba110:	2100      	movs	r1, #0
   ba112:	f001 f849 	bl	bb1a8 <memset>
   ba116:	8025      	strh	r5, [r4, #0]
   ba118:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba11a:	4907      	ldr	r1, [pc, #28]	; (ba138 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   ba11c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba11e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   ba120:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba122:	f000 f82f 	bl	ba184 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba126:	4904      	ldr	r1, [pc, #16]	; (ba138 <_Z20acquireSerial1Bufferv+0x30>)
    };
   ba128:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba12a:	4628      	mov	r0, r5
   ba12c:	f000 f82a 	bl	ba184 <_ZnajRKSt9nothrow_t>
    };
   ba130:	60e0      	str	r0, [r4, #12]
}
   ba132:	4620      	mov	r0, r4
   ba134:	bd38      	pop	{r3, r4, r5, pc}
   ba136:	bf00      	nop
   ba138:	000bdb2c 	.word	0x000bdb2c

000ba13c <_Z22__fetch_global_Serial1v>:
{
   ba13c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba13e:	4d0e      	ldr	r5, [pc, #56]	; (ba178 <_Z22__fetch_global_Serial1v+0x3c>)
   ba140:	7829      	ldrb	r1, [r5, #0]
   ba142:	f3bf 8f5b 	dmb	ish
   ba146:	f011 0401 	ands.w	r4, r1, #1
{
   ba14a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba14c:	d111      	bne.n	ba172 <_Z22__fetch_global_Serial1v+0x36>
   ba14e:	4628      	mov	r0, r5
   ba150:	f7f9 ffa9 	bl	b40a6 <__cxa_guard_acquire>
   ba154:	b168      	cbz	r0, ba172 <_Z22__fetch_global_Serial1v+0x36>
   ba156:	a801      	add	r0, sp, #4
   ba158:	f7ff ffd6 	bl	ba108 <_Z20acquireSerial1Bufferv>
   ba15c:	aa01      	add	r2, sp, #4
   ba15e:	4621      	mov	r1, r4
   ba160:	4806      	ldr	r0, [pc, #24]	; (ba17c <_Z22__fetch_global_Serial1v+0x40>)
   ba162:	f7ff fdeb 	bl	b9d3c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   ba166:	4628      	mov	r0, r5
   ba168:	f7f9 ffa2 	bl	b40b0 <__cxa_guard_release>
   ba16c:	4804      	ldr	r0, [pc, #16]	; (ba180 <_Z22__fetch_global_Serial1v+0x44>)
   ba16e:	f000 ffd9 	bl	bb124 <atexit>
    return serial1;
}
   ba172:	4802      	ldr	r0, [pc, #8]	; (ba17c <_Z22__fetch_global_Serial1v+0x40>)
   ba174:	b007      	add	sp, #28
   ba176:	bd30      	pop	{r4, r5, pc}
   ba178:	2003e744 	.word	0x2003e744
   ba17c:	2003e748 	.word	0x2003e748
   ba180:	000ba105 	.word	0x000ba105

000ba184 <_ZnajRKSt9nothrow_t>:
   ba184:	f7f9 bf89 	b.w	b409a <_Znaj>

000ba188 <_ZSt17__throw_bad_allocv>:
   ba188:	b508      	push	{r3, lr}
   ba18a:	f7fd fd03 	bl	b7b94 <abort>

000ba18e <_ZSt19__throw_logic_errorPKc>:
   ba18e:	b508      	push	{r3, lr}
   ba190:	f7fd fd00 	bl	b7b94 <abort>

000ba194 <_ZSt20__throw_length_errorPKc>:
   ba194:	b508      	push	{r3, lr}
   ba196:	f7fd fcfd 	bl	b7b94 <abort>

000ba19a <_ZSt25__throw_bad_function_callv>:
   ba19a:	b508      	push	{r3, lr}
   ba19c:	f7fd fcfa 	bl	b7b94 <abort>

000ba1a0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   ba1a0:	4901      	ldr	r1, [pc, #4]	; (ba1a8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   ba1a2:	f000 b963 	b.w	ba46c <_ZNKSt9type_infoeqERKS_>
   ba1a6:	bf00      	nop
   ba1a8:	000bdb48 	.word	0x000bdb48

000ba1ac <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   ba1ac:	b10a      	cbz	r2, ba1b2 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   ba1ae:	f000 bfd3 	b.w	bb158 <memcpy>
   ba1b2:	4770      	bx	lr

000ba1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   ba1b4:	b508      	push	{r3, lr}
   ba1b6:	680b      	ldr	r3, [r1, #0]
   ba1b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   ba1bc:	d302      	bcc.n	ba1c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   ba1be:	480d      	ldr	r0, [pc, #52]	; (ba1f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   ba1c0:	f7ff ffe8 	bl	ba194 <_ZSt20__throw_length_errorPKc>
   ba1c4:	4293      	cmp	r3, r2
   ba1c6:	d90b      	bls.n	ba1e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   ba1c8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   ba1cc:	ea4f 0042 	mov.w	r0, r2, lsl #1
   ba1d0:	d206      	bcs.n	ba1e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   ba1d2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   ba1d6:	bf2a      	itet	cs
   ba1d8:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   ba1dc:	6008      	strcc	r0, [r1, #0]
   ba1de:	600b      	strcs	r3, [r1, #0]
   ba1e0:	6808      	ldr	r0, [r1, #0]
   ba1e2:	3001      	adds	r0, #1
   ba1e4:	d501      	bpl.n	ba1ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   ba1e6:	f7ff ffcf 	bl	ba188 <_ZSt17__throw_bad_allocv>
   ba1ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   ba1ee:	f7f9 bf52 	b.w	b4096 <_Znwj>
   ba1f2:	bf00      	nop
   ba1f4:	000bdb50 	.word	0x000bdb50

000ba1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   ba1f8:	f850 3b08 	ldr.w	r3, [r0], #8
   ba1fc:	4283      	cmp	r3, r0
   ba1fe:	d002      	beq.n	ba206 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   ba200:	4618      	mov	r0, r3
   ba202:	f7f9 bf4c 	b.w	b409e <_ZdlPv>
   ba206:	4770      	bx	lr

000ba208 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   ba208:	2a01      	cmp	r2, #1
   ba20a:	b410      	push	{r4}
   ba20c:	d104      	bne.n	ba218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   ba20e:	780a      	ldrb	r2, [r1, #0]
   ba210:	f85d 4b04 	ldr.w	r4, [sp], #4
   ba214:	7002      	strb	r2, [r0, #0]
   ba216:	4770      	bx	lr
   ba218:	f85d 4b04 	ldr.w	r4, [sp], #4
   ba21c:	f7ff bfc6 	b.w	ba1ac <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000ba220 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
   ba220:	b508      	push	{r3, lr}
   ba222:	1a52      	subs	r2, r2, r1
   ba224:	f7ff fff0 	bl	ba208 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   ba228:	bd08      	pop	{r3, pc}

000ba22a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   ba22a:	b508      	push	{r3, lr}
   ba22c:	1a52      	subs	r2, r2, r1
   ba22e:	f7ff ffeb 	bl	ba208 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   ba232:	bd08      	pop	{r3, pc}

000ba234 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
   ba234:	4288      	cmp	r0, r1
   ba236:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba238:	4604      	mov	r4, r0
   ba23a:	460e      	mov	r6, r1
   ba23c:	d01e      	beq.n	ba27c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
   ba23e:	4603      	mov	r3, r0
   ba240:	684d      	ldr	r5, [r1, #4]
   ba242:	f853 2b08 	ldr.w	r2, [r3], #8
   ba246:	429a      	cmp	r2, r3
   ba248:	bf14      	ite	ne
   ba24a:	6882      	ldrne	r2, [r0, #8]
   ba24c:	220f      	moveq	r2, #15
   ba24e:	42aa      	cmp	r2, r5
   ba250:	d20a      	bcs.n	ba268 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
   ba252:	a901      	add	r1, sp, #4
   ba254:	9501      	str	r5, [sp, #4]
   ba256:	f7ff ffad 	bl	ba1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   ba25a:	4607      	mov	r7, r0
   ba25c:	4620      	mov	r0, r4
   ba25e:	f7ff ffcb 	bl	ba1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   ba262:	9b01      	ldr	r3, [sp, #4]
   ba264:	6027      	str	r7, [r4, #0]
   ba266:	60a3      	str	r3, [r4, #8]
   ba268:	b125      	cbz	r5, ba274 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
   ba26a:	6831      	ldr	r1, [r6, #0]
   ba26c:	6820      	ldr	r0, [r4, #0]
   ba26e:	462a      	mov	r2, r5
   ba270:	f7ff ffca 	bl	ba208 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   ba274:	6823      	ldr	r3, [r4, #0]
   ba276:	6065      	str	r5, [r4, #4]
   ba278:	2200      	movs	r2, #0
   ba27a:	555a      	strb	r2, [r3, r5]
   ba27c:	b003      	add	sp, #12
   ba27e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba280 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   ba280:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   ba282:	2400      	movs	r4, #0
   ba284:	2310      	movs	r3, #16
   ba286:	e9cd 3402 	strd	r3, r4, [sp, #8]
   ba28a:	6803      	ldr	r3, [r0, #0]
   ba28c:	4615      	mov	r5, r2
   ba28e:	699e      	ldr	r6, [r3, #24]
   ba290:	6812      	ldr	r2, [r2, #0]
   ba292:	466b      	mov	r3, sp
   ba294:	e9cd 4400 	strd	r4, r4, [sp]
   ba298:	47b0      	blx	r6
   ba29a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   ba29e:	f003 0306 	and.w	r3, r3, #6
   ba2a2:	2b06      	cmp	r3, #6
   ba2a4:	bf03      	ittte	eq
   ba2a6:	9b00      	ldreq	r3, [sp, #0]
   ba2a8:	602b      	streq	r3, [r5, #0]
   ba2aa:	2001      	moveq	r0, #1
   ba2ac:	4620      	movne	r0, r4
   ba2ae:	b004      	add	sp, #16
   ba2b0:	bd70      	pop	{r4, r5, r6, pc}

000ba2b2 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   ba2b2:	9800      	ldr	r0, [sp, #0]
   ba2b4:	4290      	cmp	r0, r2
   ba2b6:	bf14      	ite	ne
   ba2b8:	2001      	movne	r0, #1
   ba2ba:	2006      	moveq	r0, #6
   ba2bc:	4770      	bx	lr
	...

000ba2c0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   ba2c0:	b510      	push	{r4, lr}
   ba2c2:	4b03      	ldr	r3, [pc, #12]	; (ba2d0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   ba2c4:	6003      	str	r3, [r0, #0]
   ba2c6:	4604      	mov	r4, r0
   ba2c8:	f000 f8cd 	bl	ba466 <_ZNSt9type_infoD1Ev>
   ba2cc:	4620      	mov	r0, r4
   ba2ce:	bd10      	pop	{r4, pc}
   ba2d0:	000bdba0 	.word	0x000bdba0

000ba2d4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   ba2d4:	b510      	push	{r4, lr}
   ba2d6:	4604      	mov	r4, r0
   ba2d8:	f7ff fff2 	bl	ba2c0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba2dc:	4620      	mov	r0, r4
   ba2de:	2108      	movs	r1, #8
   ba2e0:	f7f9 fedf 	bl	b40a2 <_ZdlPvj>
   ba2e4:	4620      	mov	r0, r4
   ba2e6:	bd10      	pop	{r4, pc}

000ba2e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   ba2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba2ec:	461f      	mov	r7, r3
   ba2ee:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   ba2f2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   ba2f6:	4598      	cmp	r8, r3
   ba2f8:	4606      	mov	r6, r0
   ba2fa:	4615      	mov	r5, r2
   ba2fc:	d107      	bne.n	ba30e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba2fe:	9907      	ldr	r1, [sp, #28]
   ba300:	f000 f8b4 	bl	ba46c <_ZNKSt9type_infoeqERKS_>
   ba304:	b118      	cbz	r0, ba30e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba306:	7165      	strb	r5, [r4, #5]
   ba308:	2000      	movs	r0, #0
   ba30a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba30e:	4639      	mov	r1, r7
   ba310:	4630      	mov	r0, r6
   ba312:	f000 f8ab 	bl	ba46c <_ZNKSt9type_infoeqERKS_>
   ba316:	2800      	cmp	r0, #0
   ba318:	d0f6      	beq.n	ba308 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   ba31a:	2301      	movs	r3, #1
   ba31c:	f8c4 8000 	str.w	r8, [r4]
   ba320:	7125      	strb	r5, [r4, #4]
   ba322:	71a3      	strb	r3, [r4, #6]
   ba324:	e7f0      	b.n	ba308 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000ba326 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   ba326:	b538      	push	{r3, r4, r5, lr}
   ba328:	4615      	mov	r5, r2
   ba32a:	461c      	mov	r4, r3
   ba32c:	f000 f89e 	bl	ba46c <_ZNKSt9type_infoeqERKS_>
   ba330:	b120      	cbz	r0, ba33c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   ba332:	2308      	movs	r3, #8
   ba334:	60e3      	str	r3, [r4, #12]
   ba336:	2306      	movs	r3, #6
   ba338:	6025      	str	r5, [r4, #0]
   ba33a:	7123      	strb	r3, [r4, #4]
   ba33c:	bd38      	pop	{r3, r4, r5, pc}

000ba33e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   ba33e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba340:	4605      	mov	r5, r0
   ba342:	460c      	mov	r4, r1
   ba344:	9201      	str	r2, [sp, #4]
   ba346:	461e      	mov	r6, r3
   ba348:	f000 f890 	bl	ba46c <_ZNKSt9type_infoeqERKS_>
   ba34c:	b950      	cbnz	r0, ba364 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba34e:	2e03      	cmp	r6, #3
   ba350:	d808      	bhi.n	ba364 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba352:	6823      	ldr	r3, [r4, #0]
   ba354:	9a01      	ldr	r2, [sp, #4]
   ba356:	695b      	ldr	r3, [r3, #20]
   ba358:	4629      	mov	r1, r5
   ba35a:	4620      	mov	r0, r4
   ba35c:	b002      	add	sp, #8
   ba35e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba362:	4718      	bx	r3
   ba364:	b002      	add	sp, #8
   ba366:	bd70      	pop	{r4, r5, r6, pc}

000ba368 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   ba368:	b510      	push	{r4, lr}
   ba36a:	4b03      	ldr	r3, [pc, #12]	; (ba378 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   ba36c:	6003      	str	r3, [r0, #0]
   ba36e:	4604      	mov	r4, r0
   ba370:	f7ff ffa6 	bl	ba2c0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba374:	4620      	mov	r0, r4
   ba376:	bd10      	pop	{r4, pc}
   ba378:	000bdc00 	.word	0x000bdc00

000ba37c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   ba37c:	b510      	push	{r4, lr}
   ba37e:	4604      	mov	r4, r0
   ba380:	f7ff fff2 	bl	ba368 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   ba384:	4620      	mov	r0, r4
   ba386:	210c      	movs	r1, #12
   ba388:	f7f9 fe8b 	bl	b40a2 <_ZdlPvj>
   ba38c:	4620      	mov	r0, r4
   ba38e:	bd10      	pop	{r4, pc}

000ba390 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   ba390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba392:	9f08      	ldr	r7, [sp, #32]
   ba394:	4297      	cmp	r7, r2
   ba396:	4605      	mov	r5, r0
   ba398:	460e      	mov	r6, r1
   ba39a:	4614      	mov	r4, r2
   ba39c:	d00a      	beq.n	ba3b4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   ba39e:	68a8      	ldr	r0, [r5, #8]
   ba3a0:	6802      	ldr	r2, [r0, #0]
   ba3a2:	9708      	str	r7, [sp, #32]
   ba3a4:	6a15      	ldr	r5, [r2, #32]
   ba3a6:	4631      	mov	r1, r6
   ba3a8:	4622      	mov	r2, r4
   ba3aa:	46ac      	mov	ip, r5
   ba3ac:	b003      	add	sp, #12
   ba3ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   ba3b2:	4760      	bx	ip
   ba3b4:	4619      	mov	r1, r3
   ba3b6:	9301      	str	r3, [sp, #4]
   ba3b8:	f000 f858 	bl	ba46c <_ZNKSt9type_infoeqERKS_>
   ba3bc:	9b01      	ldr	r3, [sp, #4]
   ba3be:	2800      	cmp	r0, #0
   ba3c0:	d0ed      	beq.n	ba39e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   ba3c2:	2006      	movs	r0, #6
   ba3c4:	b003      	add	sp, #12
   ba3c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba3c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   ba3c8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba3cc:	460d      	mov	r5, r1
   ba3ce:	4619      	mov	r1, r3
   ba3d0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   ba3d4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   ba3d8:	4681      	mov	r9, r0
   ba3da:	4617      	mov	r7, r2
   ba3dc:	4698      	mov	r8, r3
   ba3de:	f000 f845 	bl	ba46c <_ZNKSt9type_infoeqERKS_>
   ba3e2:	b190      	cbz	r0, ba40a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   ba3e4:	2d00      	cmp	r5, #0
   ba3e6:	6034      	str	r4, [r6, #0]
   ba3e8:	7137      	strb	r7, [r6, #4]
   ba3ea:	db09      	blt.n	ba400 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   ba3ec:	1961      	adds	r1, r4, r5
   ba3ee:	458a      	cmp	sl, r1
   ba3f0:	bf0c      	ite	eq
   ba3f2:	2106      	moveq	r1, #6
   ba3f4:	2101      	movne	r1, #1
   ba3f6:	71b1      	strb	r1, [r6, #6]
   ba3f8:	2000      	movs	r0, #0
   ba3fa:	b001      	add	sp, #4
   ba3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba400:	3502      	adds	r5, #2
   ba402:	d1f9      	bne.n	ba3f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba404:	2301      	movs	r3, #1
   ba406:	71b3      	strb	r3, [r6, #6]
   ba408:	e7f6      	b.n	ba3f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba40a:	4554      	cmp	r4, sl
   ba40c:	d106      	bne.n	ba41c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba40e:	4659      	mov	r1, fp
   ba410:	4648      	mov	r0, r9
   ba412:	f000 f82b 	bl	ba46c <_ZNKSt9type_infoeqERKS_>
   ba416:	b108      	cbz	r0, ba41c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba418:	7177      	strb	r7, [r6, #5]
   ba41a:	e7ed      	b.n	ba3f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba41c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   ba420:	6803      	ldr	r3, [r0, #0]
   ba422:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   ba426:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   ba42a:	69dc      	ldr	r4, [r3, #28]
   ba42c:	463a      	mov	r2, r7
   ba42e:	4643      	mov	r3, r8
   ba430:	4629      	mov	r1, r5
   ba432:	46a4      	mov	ip, r4
   ba434:	b001      	add	sp, #4
   ba436:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba43a:	4760      	bx	ip

000ba43c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   ba43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba440:	4607      	mov	r7, r0
   ba442:	460c      	mov	r4, r1
   ba444:	4615      	mov	r5, r2
   ba446:	461e      	mov	r6, r3
   ba448:	f7ff ff6d 	bl	ba326 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   ba44c:	b948      	cbnz	r0, ba462 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   ba44e:	68b8      	ldr	r0, [r7, #8]
   ba450:	6803      	ldr	r3, [r0, #0]
   ba452:	699f      	ldr	r7, [r3, #24]
   ba454:	462a      	mov	r2, r5
   ba456:	4633      	mov	r3, r6
   ba458:	4621      	mov	r1, r4
   ba45a:	46bc      	mov	ip, r7
   ba45c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   ba460:	4760      	bx	ip
   ba462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000ba466 <_ZNSt9type_infoD1Ev>:
   ba466:	4770      	bx	lr

000ba468 <_ZNKSt9type_info14__is_pointer_pEv>:
   ba468:	2000      	movs	r0, #0
   ba46a:	4770      	bx	lr

000ba46c <_ZNKSt9type_infoeqERKS_>:
   ba46c:	4281      	cmp	r1, r0
   ba46e:	b508      	push	{r3, lr}
   ba470:	d00e      	beq.n	ba490 <_ZNKSt9type_infoeqERKS_+0x24>
   ba472:	6840      	ldr	r0, [r0, #4]
   ba474:	7803      	ldrb	r3, [r0, #0]
   ba476:	2b2a      	cmp	r3, #42	; 0x2a
   ba478:	d00c      	beq.n	ba494 <_ZNKSt9type_infoeqERKS_+0x28>
   ba47a:	6849      	ldr	r1, [r1, #4]
   ba47c:	780b      	ldrb	r3, [r1, #0]
   ba47e:	2b2a      	cmp	r3, #42	; 0x2a
   ba480:	bf08      	it	eq
   ba482:	3101      	addeq	r1, #1
   ba484:	f000 fec6 	bl	bb214 <strcmp>
   ba488:	fab0 f080 	clz	r0, r0
   ba48c:	0940      	lsrs	r0, r0, #5
   ba48e:	bd08      	pop	{r3, pc}
   ba490:	2001      	movs	r0, #1
   ba492:	e7fc      	b.n	ba48e <_ZNKSt9type_infoeqERKS_+0x22>
   ba494:	2000      	movs	r0, #0
   ba496:	e7fa      	b.n	ba48e <_ZNKSt9type_infoeqERKS_+0x22>

000ba498 <floorf>:
   ba498:	ee10 2a10 	vmov	r2, s0
   ba49c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   ba4a0:	3b7f      	subs	r3, #127	; 0x7f
   ba4a2:	2b16      	cmp	r3, #22
   ba4a4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   ba4a8:	dc28      	bgt.n	ba4fc <floorf+0x64>
   ba4aa:	2b00      	cmp	r3, #0
   ba4ac:	db18      	blt.n	ba4e0 <floorf+0x48>
   ba4ae:	491a      	ldr	r1, [pc, #104]	; (ba518 <floorf+0x80>)
   ba4b0:	4119      	asrs	r1, r3
   ba4b2:	420a      	tst	r2, r1
   ba4b4:	d021      	beq.n	ba4fa <floorf+0x62>
   ba4b6:	eddf 7a19 	vldr	s15, [pc, #100]	; ba51c <floorf+0x84>
   ba4ba:	ee70 7a27 	vadd.f32	s15, s0, s15
   ba4be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   ba4c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba4c6:	dd18      	ble.n	ba4fa <floorf+0x62>
   ba4c8:	2a00      	cmp	r2, #0
   ba4ca:	da04      	bge.n	ba4d6 <floorf+0x3e>
   ba4cc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   ba4d0:	fa40 f303 	asr.w	r3, r0, r3
   ba4d4:	441a      	add	r2, r3
   ba4d6:	ea22 0301 	bic.w	r3, r2, r1
   ba4da:	ee00 3a10 	vmov	s0, r3
   ba4de:	4770      	bx	lr
   ba4e0:	eddf 7a0e 	vldr	s15, [pc, #56]	; ba51c <floorf+0x84>
   ba4e4:	ee70 7a27 	vadd.f32	s15, s0, s15
   ba4e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   ba4ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba4f0:	dd03      	ble.n	ba4fa <floorf+0x62>
   ba4f2:	2a00      	cmp	r2, #0
   ba4f4:	db08      	blt.n	ba508 <floorf+0x70>
   ba4f6:	ed9f 0a0a 	vldr	s0, [pc, #40]	; ba520 <floorf+0x88>
   ba4fa:	4770      	bx	lr
   ba4fc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   ba500:	d3fb      	bcc.n	ba4fa <floorf+0x62>
   ba502:	ee30 0a00 	vadd.f32	s0, s0, s0
   ba506:	4770      	bx	lr
   ba508:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   ba50c:	2900      	cmp	r1, #0
   ba50e:	bf18      	it	ne
   ba510:	eeb0 0a67 	vmovne.f32	s0, s15
   ba514:	4770      	bx	lr
   ba516:	bf00      	nop
   ba518:	007fffff 	.word	0x007fffff
   ba51c:	7149f2ca 	.word	0x7149f2ca
   ba520:	00000000 	.word	0x00000000

000ba524 <sqrt>:
   ba524:	b538      	push	{r3, r4, r5, lr}
   ba526:	ed2d 8b02 	vpush	{d8}
   ba52a:	ec55 4b10 	vmov	r4, r5, d0
   ba52e:	f000 f833 	bl	ba598 <__ieee754_sqrt>
   ba532:	4b18      	ldr	r3, [pc, #96]	; (ba594 <sqrt+0x70>)
   ba534:	eeb0 8a40 	vmov.f32	s16, s0
   ba538:	eef0 8a60 	vmov.f32	s17, s1
   ba53c:	f993 3000 	ldrsb.w	r3, [r3]
   ba540:	3301      	adds	r3, #1
   ba542:	d00d      	beq.n	ba560 <sqrt+0x3c>
   ba544:	4622      	mov	r2, r4
   ba546:	462b      	mov	r3, r5
   ba548:	4620      	mov	r0, r4
   ba54a:	4629      	mov	r1, r5
   ba54c:	f000 fd46 	bl	bafdc <__aeabi_dcmpun>
   ba550:	b930      	cbnz	r0, ba560 <sqrt+0x3c>
   ba552:	2200      	movs	r2, #0
   ba554:	2300      	movs	r3, #0
   ba556:	4620      	mov	r0, r4
   ba558:	4629      	mov	r1, r5
   ba55a:	f000 fd17 	bl	baf8c <__aeabi_dcmplt>
   ba55e:	b930      	cbnz	r0, ba56e <sqrt+0x4a>
   ba560:	eeb0 0a48 	vmov.f32	s0, s16
   ba564:	eef0 0a68 	vmov.f32	s1, s17
   ba568:	ecbd 8b02 	vpop	{d8}
   ba56c:	bd38      	pop	{r3, r4, r5, pc}
   ba56e:	f7fd fb21 	bl	b7bb4 <__errno>
   ba572:	2200      	movs	r2, #0
   ba574:	2300      	movs	r3, #0
   ba576:	2121      	movs	r1, #33	; 0x21
   ba578:	6001      	str	r1, [r0, #0]
   ba57a:	4610      	mov	r0, r2
   ba57c:	4619      	mov	r1, r3
   ba57e:	f000 fbbd 	bl	bacfc <__aeabi_ddiv>
   ba582:	ec41 0b18 	vmov	d8, r0, r1
   ba586:	eeb0 0a48 	vmov.f32	s0, s16
   ba58a:	eef0 0a68 	vmov.f32	s1, s17
   ba58e:	ecbd 8b02 	vpop	{d8}
   ba592:	bd38      	pop	{r3, r4, r5, pc}
   ba594:	20035324 	.word	0x20035324

000ba598 <__ieee754_sqrt>:
   ba598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba59c:	4a63      	ldr	r2, [pc, #396]	; (ba72c <__ieee754_sqrt+0x194>)
   ba59e:	ec55 4b10 	vmov	r4, r5, d0
   ba5a2:	43aa      	bics	r2, r5
   ba5a4:	f000 809f 	beq.w	ba6e6 <__ieee754_sqrt+0x14e>
   ba5a8:	2d00      	cmp	r5, #0
   ba5aa:	ee10 ca10 	vmov	ip, s0
   ba5ae:	462b      	mov	r3, r5
   ba5b0:	dd54      	ble.n	ba65c <__ieee754_sqrt+0xc4>
   ba5b2:	1529      	asrs	r1, r5, #20
   ba5b4:	d063      	beq.n	ba67e <__ieee754_sqrt+0xe6>
   ba5b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
   ba5ba:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   ba5be:	07c9      	lsls	r1, r1, #31
   ba5c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ba5c4:	d404      	bmi.n	ba5d0 <__ieee754_sqrt+0x38>
   ba5c6:	005b      	lsls	r3, r3, #1
   ba5c8:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   ba5cc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba5d0:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   ba5d4:	2600      	movs	r6, #0
   ba5d6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   ba5da:	107f      	asrs	r7, r7, #1
   ba5dc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba5e0:	f04f 0e16 	mov.w	lr, #22
   ba5e4:	4634      	mov	r4, r6
   ba5e6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   ba5ea:	18a1      	adds	r1, r4, r2
   ba5ec:	4299      	cmp	r1, r3
   ba5ee:	dc02      	bgt.n	ba5f6 <__ieee754_sqrt+0x5e>
   ba5f0:	1a5b      	subs	r3, r3, r1
   ba5f2:	188c      	adds	r4, r1, r2
   ba5f4:	4416      	add	r6, r2
   ba5f6:	005b      	lsls	r3, r3, #1
   ba5f8:	f1be 0e01 	subs.w	lr, lr, #1
   ba5fc:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   ba600:	ea4f 0252 	mov.w	r2, r2, lsr #1
   ba604:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba608:	d1ef      	bne.n	ba5ea <__ieee754_sqrt+0x52>
   ba60a:	4675      	mov	r5, lr
   ba60c:	2020      	movs	r0, #32
   ba60e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   ba612:	e00a      	b.n	ba62a <__ieee754_sqrt+0x92>
   ba614:	d044      	beq.n	ba6a0 <__ieee754_sqrt+0x108>
   ba616:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   ba61a:	3801      	subs	r0, #1
   ba61c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   ba620:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba624:	ea4f 0252 	mov.w	r2, r2, lsr #1
   ba628:	d043      	beq.n	ba6b2 <__ieee754_sqrt+0x11a>
   ba62a:	42a3      	cmp	r3, r4
   ba62c:	eb02 010e 	add.w	r1, r2, lr
   ba630:	ddf0      	ble.n	ba614 <__ieee754_sqrt+0x7c>
   ba632:	2900      	cmp	r1, #0
   ba634:	eb01 0e02 	add.w	lr, r1, r2
   ba638:	db0a      	blt.n	ba650 <__ieee754_sqrt+0xb8>
   ba63a:	46a0      	mov	r8, r4
   ba63c:	1b1b      	subs	r3, r3, r4
   ba63e:	4561      	cmp	r1, ip
   ba640:	bf88      	it	hi
   ba642:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   ba646:	ebac 0c01 	sub.w	ip, ip, r1
   ba64a:	4415      	add	r5, r2
   ba64c:	4644      	mov	r4, r8
   ba64e:	e7e2      	b.n	ba616 <__ieee754_sqrt+0x7e>
   ba650:	f1be 0f00 	cmp.w	lr, #0
   ba654:	dbf1      	blt.n	ba63a <__ieee754_sqrt+0xa2>
   ba656:	f104 0801 	add.w	r8, r4, #1
   ba65a:	e7ef      	b.n	ba63c <__ieee754_sqrt+0xa4>
   ba65c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   ba660:	4322      	orrs	r2, r4
   ba662:	d038      	beq.n	ba6d6 <__ieee754_sqrt+0x13e>
   ba664:	2d00      	cmp	r5, #0
   ba666:	d14e      	bne.n	ba706 <__ieee754_sqrt+0x16e>
   ba668:	4629      	mov	r1, r5
   ba66a:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   ba66e:	3915      	subs	r1, #21
   ba670:	4613      	mov	r3, r2
   ba672:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   ba676:	2a00      	cmp	r2, #0
   ba678:	d0f7      	beq.n	ba66a <__ieee754_sqrt+0xd2>
   ba67a:	02d6      	lsls	r6, r2, #11
   ba67c:	d450      	bmi.n	ba720 <__ieee754_sqrt+0x188>
   ba67e:	2000      	movs	r0, #0
   ba680:	005b      	lsls	r3, r3, #1
   ba682:	02dd      	lsls	r5, r3, #11
   ba684:	4604      	mov	r4, r0
   ba686:	f100 0001 	add.w	r0, r0, #1
   ba68a:	d5f9      	bpl.n	ba680 <__ieee754_sqrt+0xe8>
   ba68c:	461a      	mov	r2, r3
   ba68e:	4663      	mov	r3, ip
   ba690:	fa0c fc00 	lsl.w	ip, ip, r0
   ba694:	f1c0 0020 	rsb	r0, r0, #32
   ba698:	40c3      	lsrs	r3, r0
   ba69a:	1b09      	subs	r1, r1, r4
   ba69c:	4313      	orrs	r3, r2
   ba69e:	e78a      	b.n	ba5b6 <__ieee754_sqrt+0x1e>
   ba6a0:	4561      	cmp	r1, ip
   ba6a2:	d8b8      	bhi.n	ba616 <__ieee754_sqrt+0x7e>
   ba6a4:	2900      	cmp	r1, #0
   ba6a6:	eb01 0e02 	add.w	lr, r1, r2
   ba6aa:	dbd1      	blt.n	ba650 <__ieee754_sqrt+0xb8>
   ba6ac:	4698      	mov	r8, r3
   ba6ae:	2300      	movs	r3, #0
   ba6b0:	e7c9      	b.n	ba646 <__ieee754_sqrt+0xae>
   ba6b2:	ea53 030c 	orrs.w	r3, r3, ip
   ba6b6:	d110      	bne.n	ba6da <__ieee754_sqrt+0x142>
   ba6b8:	0868      	lsrs	r0, r5, #1
   ba6ba:	1071      	asrs	r1, r6, #1
   ba6bc:	07f3      	lsls	r3, r6, #31
   ba6be:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   ba6c2:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   ba6c6:	bf48      	it	mi
   ba6c8:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   ba6cc:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   ba6d0:	4602      	mov	r2, r0
   ba6d2:	ec43 2b10 	vmov	d0, r2, r3
   ba6d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba6da:	1c6a      	adds	r2, r5, #1
   ba6dc:	bf16      	itet	ne
   ba6de:	1c68      	addne	r0, r5, #1
   ba6e0:	3601      	addeq	r6, #1
   ba6e2:	0840      	lsrne	r0, r0, #1
   ba6e4:	e7e9      	b.n	ba6ba <__ieee754_sqrt+0x122>
   ba6e6:	ee10 2a10 	vmov	r2, s0
   ba6ea:	ee10 0a10 	vmov	r0, s0
   ba6ee:	462b      	mov	r3, r5
   ba6f0:	4629      	mov	r1, r5
   ba6f2:	f000 f9d9 	bl	baaa8 <__aeabi_dmul>
   ba6f6:	4622      	mov	r2, r4
   ba6f8:	462b      	mov	r3, r5
   ba6fa:	f000 f81f 	bl	ba73c <__adddf3>
   ba6fe:	ec41 0b10 	vmov	d0, r0, r1
   ba702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba706:	ee10 2a10 	vmov	r2, s0
   ba70a:	4620      	mov	r0, r4
   ba70c:	4629      	mov	r1, r5
   ba70e:	f000 f813 	bl	ba738 <__aeabi_dsub>
   ba712:	4602      	mov	r2, r0
   ba714:	460b      	mov	r3, r1
   ba716:	f000 faf1 	bl	bacfc <__aeabi_ddiv>
   ba71a:	ec41 0b10 	vmov	d0, r0, r1
   ba71e:	e7da      	b.n	ba6d6 <__ieee754_sqrt+0x13e>
   ba720:	4663      	mov	r3, ip
   ba722:	2020      	movs	r0, #32
   ba724:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   ba728:	e7b6      	b.n	ba698 <__ieee754_sqrt+0x100>
   ba72a:	bf00      	nop
   ba72c:	7ff00000 	.word	0x7ff00000

000ba730 <__aeabi_drsub>:
   ba730:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   ba734:	e002      	b.n	ba73c <__adddf3>
   ba736:	bf00      	nop

000ba738 <__aeabi_dsub>:
   ba738:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000ba73c <__adddf3>:
   ba73c:	b530      	push	{r4, r5, lr}
   ba73e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   ba742:	ea4f 0543 	mov.w	r5, r3, lsl #1
   ba746:	ea94 0f05 	teq	r4, r5
   ba74a:	bf08      	it	eq
   ba74c:	ea90 0f02 	teqeq	r0, r2
   ba750:	bf1f      	itttt	ne
   ba752:	ea54 0c00 	orrsne.w	ip, r4, r0
   ba756:	ea55 0c02 	orrsne.w	ip, r5, r2
   ba75a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   ba75e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   ba762:	f000 80e2 	beq.w	ba92a <__adddf3+0x1ee>
   ba766:	ea4f 5454 	mov.w	r4, r4, lsr #21
   ba76a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   ba76e:	bfb8      	it	lt
   ba770:	426d      	neglt	r5, r5
   ba772:	dd0c      	ble.n	ba78e <__adddf3+0x52>
   ba774:	442c      	add	r4, r5
   ba776:	ea80 0202 	eor.w	r2, r0, r2
   ba77a:	ea81 0303 	eor.w	r3, r1, r3
   ba77e:	ea82 0000 	eor.w	r0, r2, r0
   ba782:	ea83 0101 	eor.w	r1, r3, r1
   ba786:	ea80 0202 	eor.w	r2, r0, r2
   ba78a:	ea81 0303 	eor.w	r3, r1, r3
   ba78e:	2d36      	cmp	r5, #54	; 0x36
   ba790:	bf88      	it	hi
   ba792:	bd30      	pophi	{r4, r5, pc}
   ba794:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   ba798:	ea4f 3101 	mov.w	r1, r1, lsl #12
   ba79c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   ba7a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   ba7a4:	d002      	beq.n	ba7ac <__adddf3+0x70>
   ba7a6:	4240      	negs	r0, r0
   ba7a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ba7ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   ba7b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   ba7b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   ba7b8:	d002      	beq.n	ba7c0 <__adddf3+0x84>
   ba7ba:	4252      	negs	r2, r2
   ba7bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   ba7c0:	ea94 0f05 	teq	r4, r5
   ba7c4:	f000 80a7 	beq.w	ba916 <__adddf3+0x1da>
   ba7c8:	f1a4 0401 	sub.w	r4, r4, #1
   ba7cc:	f1d5 0e20 	rsbs	lr, r5, #32
   ba7d0:	db0d      	blt.n	ba7ee <__adddf3+0xb2>
   ba7d2:	fa02 fc0e 	lsl.w	ip, r2, lr
   ba7d6:	fa22 f205 	lsr.w	r2, r2, r5
   ba7da:	1880      	adds	r0, r0, r2
   ba7dc:	f141 0100 	adc.w	r1, r1, #0
   ba7e0:	fa03 f20e 	lsl.w	r2, r3, lr
   ba7e4:	1880      	adds	r0, r0, r2
   ba7e6:	fa43 f305 	asr.w	r3, r3, r5
   ba7ea:	4159      	adcs	r1, r3
   ba7ec:	e00e      	b.n	ba80c <__adddf3+0xd0>
   ba7ee:	f1a5 0520 	sub.w	r5, r5, #32
   ba7f2:	f10e 0e20 	add.w	lr, lr, #32
   ba7f6:	2a01      	cmp	r2, #1
   ba7f8:	fa03 fc0e 	lsl.w	ip, r3, lr
   ba7fc:	bf28      	it	cs
   ba7fe:	f04c 0c02 	orrcs.w	ip, ip, #2
   ba802:	fa43 f305 	asr.w	r3, r3, r5
   ba806:	18c0      	adds	r0, r0, r3
   ba808:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   ba80c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba810:	d507      	bpl.n	ba822 <__adddf3+0xe6>
   ba812:	f04f 0e00 	mov.w	lr, #0
   ba816:	f1dc 0c00 	rsbs	ip, ip, #0
   ba81a:	eb7e 0000 	sbcs.w	r0, lr, r0
   ba81e:	eb6e 0101 	sbc.w	r1, lr, r1
   ba822:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   ba826:	d31b      	bcc.n	ba860 <__adddf3+0x124>
   ba828:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   ba82c:	d30c      	bcc.n	ba848 <__adddf3+0x10c>
   ba82e:	0849      	lsrs	r1, r1, #1
   ba830:	ea5f 0030 	movs.w	r0, r0, rrx
   ba834:	ea4f 0c3c 	mov.w	ip, ip, rrx
   ba838:	f104 0401 	add.w	r4, r4, #1
   ba83c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   ba840:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   ba844:	f080 809a 	bcs.w	ba97c <__adddf3+0x240>
   ba848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   ba84c:	bf08      	it	eq
   ba84e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   ba852:	f150 0000 	adcs.w	r0, r0, #0
   ba856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ba85a:	ea41 0105 	orr.w	r1, r1, r5
   ba85e:	bd30      	pop	{r4, r5, pc}
   ba860:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   ba864:	4140      	adcs	r0, r0
   ba866:	eb41 0101 	adc.w	r1, r1, r1
   ba86a:	3c01      	subs	r4, #1
   ba86c:	bf28      	it	cs
   ba86e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   ba872:	d2e9      	bcs.n	ba848 <__adddf3+0x10c>
   ba874:	f091 0f00 	teq	r1, #0
   ba878:	bf04      	itt	eq
   ba87a:	4601      	moveq	r1, r0
   ba87c:	2000      	moveq	r0, #0
   ba87e:	fab1 f381 	clz	r3, r1
   ba882:	bf08      	it	eq
   ba884:	3320      	addeq	r3, #32
   ba886:	f1a3 030b 	sub.w	r3, r3, #11
   ba88a:	f1b3 0220 	subs.w	r2, r3, #32
   ba88e:	da0c      	bge.n	ba8aa <__adddf3+0x16e>
   ba890:	320c      	adds	r2, #12
   ba892:	dd08      	ble.n	ba8a6 <__adddf3+0x16a>
   ba894:	f102 0c14 	add.w	ip, r2, #20
   ba898:	f1c2 020c 	rsb	r2, r2, #12
   ba89c:	fa01 f00c 	lsl.w	r0, r1, ip
   ba8a0:	fa21 f102 	lsr.w	r1, r1, r2
   ba8a4:	e00c      	b.n	ba8c0 <__adddf3+0x184>
   ba8a6:	f102 0214 	add.w	r2, r2, #20
   ba8aa:	bfd8      	it	le
   ba8ac:	f1c2 0c20 	rsble	ip, r2, #32
   ba8b0:	fa01 f102 	lsl.w	r1, r1, r2
   ba8b4:	fa20 fc0c 	lsr.w	ip, r0, ip
   ba8b8:	bfdc      	itt	le
   ba8ba:	ea41 010c 	orrle.w	r1, r1, ip
   ba8be:	4090      	lslle	r0, r2
   ba8c0:	1ae4      	subs	r4, r4, r3
   ba8c2:	bfa2      	ittt	ge
   ba8c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   ba8c8:	4329      	orrge	r1, r5
   ba8ca:	bd30      	popge	{r4, r5, pc}
   ba8cc:	ea6f 0404 	mvn.w	r4, r4
   ba8d0:	3c1f      	subs	r4, #31
   ba8d2:	da1c      	bge.n	ba90e <__adddf3+0x1d2>
   ba8d4:	340c      	adds	r4, #12
   ba8d6:	dc0e      	bgt.n	ba8f6 <__adddf3+0x1ba>
   ba8d8:	f104 0414 	add.w	r4, r4, #20
   ba8dc:	f1c4 0220 	rsb	r2, r4, #32
   ba8e0:	fa20 f004 	lsr.w	r0, r0, r4
   ba8e4:	fa01 f302 	lsl.w	r3, r1, r2
   ba8e8:	ea40 0003 	orr.w	r0, r0, r3
   ba8ec:	fa21 f304 	lsr.w	r3, r1, r4
   ba8f0:	ea45 0103 	orr.w	r1, r5, r3
   ba8f4:	bd30      	pop	{r4, r5, pc}
   ba8f6:	f1c4 040c 	rsb	r4, r4, #12
   ba8fa:	f1c4 0220 	rsb	r2, r4, #32
   ba8fe:	fa20 f002 	lsr.w	r0, r0, r2
   ba902:	fa01 f304 	lsl.w	r3, r1, r4
   ba906:	ea40 0003 	orr.w	r0, r0, r3
   ba90a:	4629      	mov	r1, r5
   ba90c:	bd30      	pop	{r4, r5, pc}
   ba90e:	fa21 f004 	lsr.w	r0, r1, r4
   ba912:	4629      	mov	r1, r5
   ba914:	bd30      	pop	{r4, r5, pc}
   ba916:	f094 0f00 	teq	r4, #0
   ba91a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   ba91e:	bf06      	itte	eq
   ba920:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   ba924:	3401      	addeq	r4, #1
   ba926:	3d01      	subne	r5, #1
   ba928:	e74e      	b.n	ba7c8 <__adddf3+0x8c>
   ba92a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   ba92e:	bf18      	it	ne
   ba930:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   ba934:	d029      	beq.n	ba98a <__adddf3+0x24e>
   ba936:	ea94 0f05 	teq	r4, r5
   ba93a:	bf08      	it	eq
   ba93c:	ea90 0f02 	teqeq	r0, r2
   ba940:	d005      	beq.n	ba94e <__adddf3+0x212>
   ba942:	ea54 0c00 	orrs.w	ip, r4, r0
   ba946:	bf04      	itt	eq
   ba948:	4619      	moveq	r1, r3
   ba94a:	4610      	moveq	r0, r2
   ba94c:	bd30      	pop	{r4, r5, pc}
   ba94e:	ea91 0f03 	teq	r1, r3
   ba952:	bf1e      	ittt	ne
   ba954:	2100      	movne	r1, #0
   ba956:	2000      	movne	r0, #0
   ba958:	bd30      	popne	{r4, r5, pc}
   ba95a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   ba95e:	d105      	bne.n	ba96c <__adddf3+0x230>
   ba960:	0040      	lsls	r0, r0, #1
   ba962:	4149      	adcs	r1, r1
   ba964:	bf28      	it	cs
   ba966:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   ba96a:	bd30      	pop	{r4, r5, pc}
   ba96c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   ba970:	bf3c      	itt	cc
   ba972:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   ba976:	bd30      	popcc	{r4, r5, pc}
   ba978:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba97c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   ba980:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   ba984:	f04f 0000 	mov.w	r0, #0
   ba988:	bd30      	pop	{r4, r5, pc}
   ba98a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   ba98e:	bf1a      	itte	ne
   ba990:	4619      	movne	r1, r3
   ba992:	4610      	movne	r0, r2
   ba994:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   ba998:	bf1c      	itt	ne
   ba99a:	460b      	movne	r3, r1
   ba99c:	4602      	movne	r2, r0
   ba99e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   ba9a2:	bf06      	itte	eq
   ba9a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   ba9a8:	ea91 0f03 	teqeq	r1, r3
   ba9ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   ba9b0:	bd30      	pop	{r4, r5, pc}
   ba9b2:	bf00      	nop

000ba9b4 <__aeabi_ui2d>:
   ba9b4:	f090 0f00 	teq	r0, #0
   ba9b8:	bf04      	itt	eq
   ba9ba:	2100      	moveq	r1, #0
   ba9bc:	4770      	bxeq	lr
   ba9be:	b530      	push	{r4, r5, lr}
   ba9c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ba9c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ba9c8:	f04f 0500 	mov.w	r5, #0
   ba9cc:	f04f 0100 	mov.w	r1, #0
   ba9d0:	e750      	b.n	ba874 <__adddf3+0x138>
   ba9d2:	bf00      	nop

000ba9d4 <__aeabi_i2d>:
   ba9d4:	f090 0f00 	teq	r0, #0
   ba9d8:	bf04      	itt	eq
   ba9da:	2100      	moveq	r1, #0
   ba9dc:	4770      	bxeq	lr
   ba9de:	b530      	push	{r4, r5, lr}
   ba9e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ba9e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ba9e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   ba9ec:	bf48      	it	mi
   ba9ee:	4240      	negmi	r0, r0
   ba9f0:	f04f 0100 	mov.w	r1, #0
   ba9f4:	e73e      	b.n	ba874 <__adddf3+0x138>
   ba9f6:	bf00      	nop

000ba9f8 <__aeabi_f2d>:
   ba9f8:	0042      	lsls	r2, r0, #1
   ba9fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
   ba9fe:	ea4f 0131 	mov.w	r1, r1, rrx
   baa02:	ea4f 7002 	mov.w	r0, r2, lsl #28
   baa06:	bf1f      	itttt	ne
   baa08:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   baa0c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   baa10:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   baa14:	4770      	bxne	lr
   baa16:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   baa1a:	bf08      	it	eq
   baa1c:	4770      	bxeq	lr
   baa1e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   baa22:	bf04      	itt	eq
   baa24:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   baa28:	4770      	bxeq	lr
   baa2a:	b530      	push	{r4, r5, lr}
   baa2c:	f44f 7460 	mov.w	r4, #896	; 0x380
   baa30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   baa34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   baa38:	e71c      	b.n	ba874 <__adddf3+0x138>
   baa3a:	bf00      	nop

000baa3c <__aeabi_ul2d>:
   baa3c:	ea50 0201 	orrs.w	r2, r0, r1
   baa40:	bf08      	it	eq
   baa42:	4770      	bxeq	lr
   baa44:	b530      	push	{r4, r5, lr}
   baa46:	f04f 0500 	mov.w	r5, #0
   baa4a:	e00a      	b.n	baa62 <__aeabi_l2d+0x16>

000baa4c <__aeabi_l2d>:
   baa4c:	ea50 0201 	orrs.w	r2, r0, r1
   baa50:	bf08      	it	eq
   baa52:	4770      	bxeq	lr
   baa54:	b530      	push	{r4, r5, lr}
   baa56:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   baa5a:	d502      	bpl.n	baa62 <__aeabi_l2d+0x16>
   baa5c:	4240      	negs	r0, r0
   baa5e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   baa62:	f44f 6480 	mov.w	r4, #1024	; 0x400
   baa66:	f104 0432 	add.w	r4, r4, #50	; 0x32
   baa6a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   baa6e:	f43f aed8 	beq.w	ba822 <__adddf3+0xe6>
   baa72:	f04f 0203 	mov.w	r2, #3
   baa76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   baa7a:	bf18      	it	ne
   baa7c:	3203      	addne	r2, #3
   baa7e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   baa82:	bf18      	it	ne
   baa84:	3203      	addne	r2, #3
   baa86:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   baa8a:	f1c2 0320 	rsb	r3, r2, #32
   baa8e:	fa00 fc03 	lsl.w	ip, r0, r3
   baa92:	fa20 f002 	lsr.w	r0, r0, r2
   baa96:	fa01 fe03 	lsl.w	lr, r1, r3
   baa9a:	ea40 000e 	orr.w	r0, r0, lr
   baa9e:	fa21 f102 	lsr.w	r1, r1, r2
   baaa2:	4414      	add	r4, r2
   baaa4:	e6bd      	b.n	ba822 <__adddf3+0xe6>
   baaa6:	bf00      	nop

000baaa8 <__aeabi_dmul>:
   baaa8:	b570      	push	{r4, r5, r6, lr}
   baaaa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   baaae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   baab2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   baab6:	bf1d      	ittte	ne
   baab8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   baabc:	ea94 0f0c 	teqne	r4, ip
   baac0:	ea95 0f0c 	teqne	r5, ip
   baac4:	f000 f8de 	bleq	bac84 <__aeabi_dmul+0x1dc>
   baac8:	442c      	add	r4, r5
   baaca:	ea81 0603 	eor.w	r6, r1, r3
   baace:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   baad2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   baad6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   baada:	bf18      	it	ne
   baadc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   baae0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   baae4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   baae8:	d038      	beq.n	bab5c <__aeabi_dmul+0xb4>
   baaea:	fba0 ce02 	umull	ip, lr, r0, r2
   baaee:	f04f 0500 	mov.w	r5, #0
   baaf2:	fbe1 e502 	umlal	lr, r5, r1, r2
   baaf6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   baafa:	fbe0 e503 	umlal	lr, r5, r0, r3
   baafe:	f04f 0600 	mov.w	r6, #0
   bab02:	fbe1 5603 	umlal	r5, r6, r1, r3
   bab06:	f09c 0f00 	teq	ip, #0
   bab0a:	bf18      	it	ne
   bab0c:	f04e 0e01 	orrne.w	lr, lr, #1
   bab10:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bab14:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bab18:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bab1c:	d204      	bcs.n	bab28 <__aeabi_dmul+0x80>
   bab1e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bab22:	416d      	adcs	r5, r5
   bab24:	eb46 0606 	adc.w	r6, r6, r6
   bab28:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bab2c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bab30:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bab34:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bab38:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bab3c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bab40:	bf88      	it	hi
   bab42:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bab46:	d81e      	bhi.n	bab86 <__aeabi_dmul+0xde>
   bab48:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bab4c:	bf08      	it	eq
   bab4e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bab52:	f150 0000 	adcs.w	r0, r0, #0
   bab56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bab5a:	bd70      	pop	{r4, r5, r6, pc}
   bab5c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bab60:	ea46 0101 	orr.w	r1, r6, r1
   bab64:	ea40 0002 	orr.w	r0, r0, r2
   bab68:	ea81 0103 	eor.w	r1, r1, r3
   bab6c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bab70:	bfc2      	ittt	gt
   bab72:	ebd4 050c 	rsbsgt	r5, r4, ip
   bab76:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bab7a:	bd70      	popgt	{r4, r5, r6, pc}
   bab7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bab80:	f04f 0e00 	mov.w	lr, #0
   bab84:	3c01      	subs	r4, #1
   bab86:	f300 80ab 	bgt.w	bace0 <__aeabi_dmul+0x238>
   bab8a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bab8e:	bfde      	ittt	le
   bab90:	2000      	movle	r0, #0
   bab92:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bab96:	bd70      	pople	{r4, r5, r6, pc}
   bab98:	f1c4 0400 	rsb	r4, r4, #0
   bab9c:	3c20      	subs	r4, #32
   bab9e:	da35      	bge.n	bac0c <__aeabi_dmul+0x164>
   baba0:	340c      	adds	r4, #12
   baba2:	dc1b      	bgt.n	babdc <__aeabi_dmul+0x134>
   baba4:	f104 0414 	add.w	r4, r4, #20
   baba8:	f1c4 0520 	rsb	r5, r4, #32
   babac:	fa00 f305 	lsl.w	r3, r0, r5
   babb0:	fa20 f004 	lsr.w	r0, r0, r4
   babb4:	fa01 f205 	lsl.w	r2, r1, r5
   babb8:	ea40 0002 	orr.w	r0, r0, r2
   babbc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   babc0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   babc4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   babc8:	fa21 f604 	lsr.w	r6, r1, r4
   babcc:	eb42 0106 	adc.w	r1, r2, r6
   babd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   babd4:	bf08      	it	eq
   babd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   babda:	bd70      	pop	{r4, r5, r6, pc}
   babdc:	f1c4 040c 	rsb	r4, r4, #12
   babe0:	f1c4 0520 	rsb	r5, r4, #32
   babe4:	fa00 f304 	lsl.w	r3, r0, r4
   babe8:	fa20 f005 	lsr.w	r0, r0, r5
   babec:	fa01 f204 	lsl.w	r2, r1, r4
   babf0:	ea40 0002 	orr.w	r0, r0, r2
   babf4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   babf8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   babfc:	f141 0100 	adc.w	r1, r1, #0
   bac00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bac04:	bf08      	it	eq
   bac06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bac0a:	bd70      	pop	{r4, r5, r6, pc}
   bac0c:	f1c4 0520 	rsb	r5, r4, #32
   bac10:	fa00 f205 	lsl.w	r2, r0, r5
   bac14:	ea4e 0e02 	orr.w	lr, lr, r2
   bac18:	fa20 f304 	lsr.w	r3, r0, r4
   bac1c:	fa01 f205 	lsl.w	r2, r1, r5
   bac20:	ea43 0302 	orr.w	r3, r3, r2
   bac24:	fa21 f004 	lsr.w	r0, r1, r4
   bac28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bac2c:	fa21 f204 	lsr.w	r2, r1, r4
   bac30:	ea20 0002 	bic.w	r0, r0, r2
   bac34:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bac38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bac3c:	bf08      	it	eq
   bac3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bac42:	bd70      	pop	{r4, r5, r6, pc}
   bac44:	f094 0f00 	teq	r4, #0
   bac48:	d10f      	bne.n	bac6a <__aeabi_dmul+0x1c2>
   bac4a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bac4e:	0040      	lsls	r0, r0, #1
   bac50:	eb41 0101 	adc.w	r1, r1, r1
   bac54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bac58:	bf08      	it	eq
   bac5a:	3c01      	subeq	r4, #1
   bac5c:	d0f7      	beq.n	bac4e <__aeabi_dmul+0x1a6>
   bac5e:	ea41 0106 	orr.w	r1, r1, r6
   bac62:	f095 0f00 	teq	r5, #0
   bac66:	bf18      	it	ne
   bac68:	4770      	bxne	lr
   bac6a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bac6e:	0052      	lsls	r2, r2, #1
   bac70:	eb43 0303 	adc.w	r3, r3, r3
   bac74:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bac78:	bf08      	it	eq
   bac7a:	3d01      	subeq	r5, #1
   bac7c:	d0f7      	beq.n	bac6e <__aeabi_dmul+0x1c6>
   bac7e:	ea43 0306 	orr.w	r3, r3, r6
   bac82:	4770      	bx	lr
   bac84:	ea94 0f0c 	teq	r4, ip
   bac88:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bac8c:	bf18      	it	ne
   bac8e:	ea95 0f0c 	teqne	r5, ip
   bac92:	d00c      	beq.n	bacae <__aeabi_dmul+0x206>
   bac94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bac98:	bf18      	it	ne
   bac9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bac9e:	d1d1      	bne.n	bac44 <__aeabi_dmul+0x19c>
   baca0:	ea81 0103 	eor.w	r1, r1, r3
   baca4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   baca8:	f04f 0000 	mov.w	r0, #0
   bacac:	bd70      	pop	{r4, r5, r6, pc}
   bacae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bacb2:	bf06      	itte	eq
   bacb4:	4610      	moveq	r0, r2
   bacb6:	4619      	moveq	r1, r3
   bacb8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bacbc:	d019      	beq.n	bacf2 <__aeabi_dmul+0x24a>
   bacbe:	ea94 0f0c 	teq	r4, ip
   bacc2:	d102      	bne.n	bacca <__aeabi_dmul+0x222>
   bacc4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bacc8:	d113      	bne.n	bacf2 <__aeabi_dmul+0x24a>
   bacca:	ea95 0f0c 	teq	r5, ip
   bacce:	d105      	bne.n	bacdc <__aeabi_dmul+0x234>
   bacd0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bacd4:	bf1c      	itt	ne
   bacd6:	4610      	movne	r0, r2
   bacd8:	4619      	movne	r1, r3
   bacda:	d10a      	bne.n	bacf2 <__aeabi_dmul+0x24a>
   bacdc:	ea81 0103 	eor.w	r1, r1, r3
   bace0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bace4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bace8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bacec:	f04f 0000 	mov.w	r0, #0
   bacf0:	bd70      	pop	{r4, r5, r6, pc}
   bacf2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bacf6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bacfa:	bd70      	pop	{r4, r5, r6, pc}

000bacfc <__aeabi_ddiv>:
   bacfc:	b570      	push	{r4, r5, r6, lr}
   bacfe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bad02:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bad06:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bad0a:	bf1d      	ittte	ne
   bad0c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bad10:	ea94 0f0c 	teqne	r4, ip
   bad14:	ea95 0f0c 	teqne	r5, ip
   bad18:	f000 f8a7 	bleq	bae6a <__aeabi_ddiv+0x16e>
   bad1c:	eba4 0405 	sub.w	r4, r4, r5
   bad20:	ea81 0e03 	eor.w	lr, r1, r3
   bad24:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bad28:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bad2c:	f000 8088 	beq.w	bae40 <__aeabi_ddiv+0x144>
   bad30:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bad34:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bad38:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bad3c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bad40:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bad44:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bad48:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bad4c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bad50:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bad54:	429d      	cmp	r5, r3
   bad56:	bf08      	it	eq
   bad58:	4296      	cmpeq	r6, r2
   bad5a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bad5e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bad62:	d202      	bcs.n	bad6a <__aeabi_ddiv+0x6e>
   bad64:	085b      	lsrs	r3, r3, #1
   bad66:	ea4f 0232 	mov.w	r2, r2, rrx
   bad6a:	1ab6      	subs	r6, r6, r2
   bad6c:	eb65 0503 	sbc.w	r5, r5, r3
   bad70:	085b      	lsrs	r3, r3, #1
   bad72:	ea4f 0232 	mov.w	r2, r2, rrx
   bad76:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bad7a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bad7e:	ebb6 0e02 	subs.w	lr, r6, r2
   bad82:	eb75 0e03 	sbcs.w	lr, r5, r3
   bad86:	bf22      	ittt	cs
   bad88:	1ab6      	subcs	r6, r6, r2
   bad8a:	4675      	movcs	r5, lr
   bad8c:	ea40 000c 	orrcs.w	r0, r0, ip
   bad90:	085b      	lsrs	r3, r3, #1
   bad92:	ea4f 0232 	mov.w	r2, r2, rrx
   bad96:	ebb6 0e02 	subs.w	lr, r6, r2
   bad9a:	eb75 0e03 	sbcs.w	lr, r5, r3
   bad9e:	bf22      	ittt	cs
   bada0:	1ab6      	subcs	r6, r6, r2
   bada2:	4675      	movcs	r5, lr
   bada4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bada8:	085b      	lsrs	r3, r3, #1
   badaa:	ea4f 0232 	mov.w	r2, r2, rrx
   badae:	ebb6 0e02 	subs.w	lr, r6, r2
   badb2:	eb75 0e03 	sbcs.w	lr, r5, r3
   badb6:	bf22      	ittt	cs
   badb8:	1ab6      	subcs	r6, r6, r2
   badba:	4675      	movcs	r5, lr
   badbc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   badc0:	085b      	lsrs	r3, r3, #1
   badc2:	ea4f 0232 	mov.w	r2, r2, rrx
   badc6:	ebb6 0e02 	subs.w	lr, r6, r2
   badca:	eb75 0e03 	sbcs.w	lr, r5, r3
   badce:	bf22      	ittt	cs
   badd0:	1ab6      	subcs	r6, r6, r2
   badd2:	4675      	movcs	r5, lr
   badd4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   badd8:	ea55 0e06 	orrs.w	lr, r5, r6
   baddc:	d018      	beq.n	bae10 <__aeabi_ddiv+0x114>
   badde:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bade2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bade6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   badea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   badee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   badf2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   badf6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   badfa:	d1c0      	bne.n	bad7e <__aeabi_ddiv+0x82>
   badfc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bae00:	d10b      	bne.n	bae1a <__aeabi_ddiv+0x11e>
   bae02:	ea41 0100 	orr.w	r1, r1, r0
   bae06:	f04f 0000 	mov.w	r0, #0
   bae0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bae0e:	e7b6      	b.n	bad7e <__aeabi_ddiv+0x82>
   bae10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bae14:	bf04      	itt	eq
   bae16:	4301      	orreq	r1, r0
   bae18:	2000      	moveq	r0, #0
   bae1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bae1e:	bf88      	it	hi
   bae20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bae24:	f63f aeaf 	bhi.w	bab86 <__aeabi_dmul+0xde>
   bae28:	ebb5 0c03 	subs.w	ip, r5, r3
   bae2c:	bf04      	itt	eq
   bae2e:	ebb6 0c02 	subseq.w	ip, r6, r2
   bae32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bae36:	f150 0000 	adcs.w	r0, r0, #0
   bae3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bae3e:	bd70      	pop	{r4, r5, r6, pc}
   bae40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bae44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bae48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bae4c:	bfc2      	ittt	gt
   bae4e:	ebd4 050c 	rsbsgt	r5, r4, ip
   bae52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bae56:	bd70      	popgt	{r4, r5, r6, pc}
   bae58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bae5c:	f04f 0e00 	mov.w	lr, #0
   bae60:	3c01      	subs	r4, #1
   bae62:	e690      	b.n	bab86 <__aeabi_dmul+0xde>
   bae64:	ea45 0e06 	orr.w	lr, r5, r6
   bae68:	e68d      	b.n	bab86 <__aeabi_dmul+0xde>
   bae6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bae6e:	ea94 0f0c 	teq	r4, ip
   bae72:	bf08      	it	eq
   bae74:	ea95 0f0c 	teqeq	r5, ip
   bae78:	f43f af3b 	beq.w	bacf2 <__aeabi_dmul+0x24a>
   bae7c:	ea94 0f0c 	teq	r4, ip
   bae80:	d10a      	bne.n	bae98 <__aeabi_ddiv+0x19c>
   bae82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bae86:	f47f af34 	bne.w	bacf2 <__aeabi_dmul+0x24a>
   bae8a:	ea95 0f0c 	teq	r5, ip
   bae8e:	f47f af25 	bne.w	bacdc <__aeabi_dmul+0x234>
   bae92:	4610      	mov	r0, r2
   bae94:	4619      	mov	r1, r3
   bae96:	e72c      	b.n	bacf2 <__aeabi_dmul+0x24a>
   bae98:	ea95 0f0c 	teq	r5, ip
   bae9c:	d106      	bne.n	baeac <__aeabi_ddiv+0x1b0>
   bae9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   baea2:	f43f aefd 	beq.w	baca0 <__aeabi_dmul+0x1f8>
   baea6:	4610      	mov	r0, r2
   baea8:	4619      	mov	r1, r3
   baeaa:	e722      	b.n	bacf2 <__aeabi_dmul+0x24a>
   baeac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   baeb0:	bf18      	it	ne
   baeb2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   baeb6:	f47f aec5 	bne.w	bac44 <__aeabi_dmul+0x19c>
   baeba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   baebe:	f47f af0d 	bne.w	bacdc <__aeabi_dmul+0x234>
   baec2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   baec6:	f47f aeeb 	bne.w	baca0 <__aeabi_dmul+0x1f8>
   baeca:	e712      	b.n	bacf2 <__aeabi_dmul+0x24a>

000baecc <__gedf2>:
   baecc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   baed0:	e006      	b.n	baee0 <__cmpdf2+0x4>
   baed2:	bf00      	nop

000baed4 <__ledf2>:
   baed4:	f04f 0c01 	mov.w	ip, #1
   baed8:	e002      	b.n	baee0 <__cmpdf2+0x4>
   baeda:	bf00      	nop

000baedc <__cmpdf2>:
   baedc:	f04f 0c01 	mov.w	ip, #1
   baee0:	f84d cd04 	str.w	ip, [sp, #-4]!
   baee4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   baee8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   baeec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   baef0:	bf18      	it	ne
   baef2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   baef6:	d01b      	beq.n	baf30 <__cmpdf2+0x54>
   baef8:	b001      	add	sp, #4
   baefa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   baefe:	bf0c      	ite	eq
   baf00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   baf04:	ea91 0f03 	teqne	r1, r3
   baf08:	bf02      	ittt	eq
   baf0a:	ea90 0f02 	teqeq	r0, r2
   baf0e:	2000      	moveq	r0, #0
   baf10:	4770      	bxeq	lr
   baf12:	f110 0f00 	cmn.w	r0, #0
   baf16:	ea91 0f03 	teq	r1, r3
   baf1a:	bf58      	it	pl
   baf1c:	4299      	cmppl	r1, r3
   baf1e:	bf08      	it	eq
   baf20:	4290      	cmpeq	r0, r2
   baf22:	bf2c      	ite	cs
   baf24:	17d8      	asrcs	r0, r3, #31
   baf26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   baf2a:	f040 0001 	orr.w	r0, r0, #1
   baf2e:	4770      	bx	lr
   baf30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   baf34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   baf38:	d102      	bne.n	baf40 <__cmpdf2+0x64>
   baf3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   baf3e:	d107      	bne.n	baf50 <__cmpdf2+0x74>
   baf40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   baf44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   baf48:	d1d6      	bne.n	baef8 <__cmpdf2+0x1c>
   baf4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   baf4e:	d0d3      	beq.n	baef8 <__cmpdf2+0x1c>
   baf50:	f85d 0b04 	ldr.w	r0, [sp], #4
   baf54:	4770      	bx	lr
   baf56:	bf00      	nop

000baf58 <__aeabi_cdrcmple>:
   baf58:	4684      	mov	ip, r0
   baf5a:	4610      	mov	r0, r2
   baf5c:	4662      	mov	r2, ip
   baf5e:	468c      	mov	ip, r1
   baf60:	4619      	mov	r1, r3
   baf62:	4663      	mov	r3, ip
   baf64:	e000      	b.n	baf68 <__aeabi_cdcmpeq>
   baf66:	bf00      	nop

000baf68 <__aeabi_cdcmpeq>:
   baf68:	b501      	push	{r0, lr}
   baf6a:	f7ff ffb7 	bl	baedc <__cmpdf2>
   baf6e:	2800      	cmp	r0, #0
   baf70:	bf48      	it	mi
   baf72:	f110 0f00 	cmnmi.w	r0, #0
   baf76:	bd01      	pop	{r0, pc}

000baf78 <__aeabi_dcmpeq>:
   baf78:	f84d ed08 	str.w	lr, [sp, #-8]!
   baf7c:	f7ff fff4 	bl	baf68 <__aeabi_cdcmpeq>
   baf80:	bf0c      	ite	eq
   baf82:	2001      	moveq	r0, #1
   baf84:	2000      	movne	r0, #0
   baf86:	f85d fb08 	ldr.w	pc, [sp], #8
   baf8a:	bf00      	nop

000baf8c <__aeabi_dcmplt>:
   baf8c:	f84d ed08 	str.w	lr, [sp, #-8]!
   baf90:	f7ff ffea 	bl	baf68 <__aeabi_cdcmpeq>
   baf94:	bf34      	ite	cc
   baf96:	2001      	movcc	r0, #1
   baf98:	2000      	movcs	r0, #0
   baf9a:	f85d fb08 	ldr.w	pc, [sp], #8
   baf9e:	bf00      	nop

000bafa0 <__aeabi_dcmple>:
   bafa0:	f84d ed08 	str.w	lr, [sp, #-8]!
   bafa4:	f7ff ffe0 	bl	baf68 <__aeabi_cdcmpeq>
   bafa8:	bf94      	ite	ls
   bafaa:	2001      	movls	r0, #1
   bafac:	2000      	movhi	r0, #0
   bafae:	f85d fb08 	ldr.w	pc, [sp], #8
   bafb2:	bf00      	nop

000bafb4 <__aeabi_dcmpge>:
   bafb4:	f84d ed08 	str.w	lr, [sp, #-8]!
   bafb8:	f7ff ffce 	bl	baf58 <__aeabi_cdrcmple>
   bafbc:	bf94      	ite	ls
   bafbe:	2001      	movls	r0, #1
   bafc0:	2000      	movhi	r0, #0
   bafc2:	f85d fb08 	ldr.w	pc, [sp], #8
   bafc6:	bf00      	nop

000bafc8 <__aeabi_dcmpgt>:
   bafc8:	f84d ed08 	str.w	lr, [sp, #-8]!
   bafcc:	f7ff ffc4 	bl	baf58 <__aeabi_cdrcmple>
   bafd0:	bf34      	ite	cc
   bafd2:	2001      	movcc	r0, #1
   bafd4:	2000      	movcs	r0, #0
   bafd6:	f85d fb08 	ldr.w	pc, [sp], #8
   bafda:	bf00      	nop

000bafdc <__aeabi_dcmpun>:
   bafdc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bafe0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bafe4:	d102      	bne.n	bafec <__aeabi_dcmpun+0x10>
   bafe6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bafea:	d10a      	bne.n	bb002 <__aeabi_dcmpun+0x26>
   bafec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   baff0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   baff4:	d102      	bne.n	baffc <__aeabi_dcmpun+0x20>
   baff6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   baffa:	d102      	bne.n	bb002 <__aeabi_dcmpun+0x26>
   baffc:	f04f 0000 	mov.w	r0, #0
   bb000:	4770      	bx	lr
   bb002:	f04f 0001 	mov.w	r0, #1
   bb006:	4770      	bx	lr

000bb008 <__aeabi_d2uiz>:
   bb008:	004a      	lsls	r2, r1, #1
   bb00a:	d211      	bcs.n	bb030 <__aeabi_d2uiz+0x28>
   bb00c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bb010:	d211      	bcs.n	bb036 <__aeabi_d2uiz+0x2e>
   bb012:	d50d      	bpl.n	bb030 <__aeabi_d2uiz+0x28>
   bb014:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bb018:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bb01c:	d40e      	bmi.n	bb03c <__aeabi_d2uiz+0x34>
   bb01e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb022:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bb026:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bb02a:	fa23 f002 	lsr.w	r0, r3, r2
   bb02e:	4770      	bx	lr
   bb030:	f04f 0000 	mov.w	r0, #0
   bb034:	4770      	bx	lr
   bb036:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bb03a:	d102      	bne.n	bb042 <__aeabi_d2uiz+0x3a>
   bb03c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bb040:	4770      	bx	lr
   bb042:	f04f 0000 	mov.w	r0, #0
   bb046:	4770      	bx	lr

000bb048 <__aeabi_d2f>:
   bb048:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bb04c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bb050:	bf24      	itt	cs
   bb052:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bb056:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bb05a:	d90d      	bls.n	bb078 <__aeabi_d2f+0x30>
   bb05c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bb060:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bb064:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bb068:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bb06c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bb070:	bf08      	it	eq
   bb072:	f020 0001 	biceq.w	r0, r0, #1
   bb076:	4770      	bx	lr
   bb078:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bb07c:	d121      	bne.n	bb0c2 <__aeabi_d2f+0x7a>
   bb07e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bb082:	bfbc      	itt	lt
   bb084:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bb088:	4770      	bxlt	lr
   bb08a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb08e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bb092:	f1c2 0218 	rsb	r2, r2, #24
   bb096:	f1c2 0c20 	rsb	ip, r2, #32
   bb09a:	fa10 f30c 	lsls.w	r3, r0, ip
   bb09e:	fa20 f002 	lsr.w	r0, r0, r2
   bb0a2:	bf18      	it	ne
   bb0a4:	f040 0001 	orrne.w	r0, r0, #1
   bb0a8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb0ac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bb0b0:	fa03 fc0c 	lsl.w	ip, r3, ip
   bb0b4:	ea40 000c 	orr.w	r0, r0, ip
   bb0b8:	fa23 f302 	lsr.w	r3, r3, r2
   bb0bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bb0c0:	e7cc      	b.n	bb05c <__aeabi_d2f+0x14>
   bb0c2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bb0c6:	d107      	bne.n	bb0d8 <__aeabi_d2f+0x90>
   bb0c8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bb0cc:	bf1e      	ittt	ne
   bb0ce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bb0d2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bb0d6:	4770      	bxne	lr
   bb0d8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bb0dc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bb0e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bb0e4:	4770      	bx	lr
   bb0e6:	bf00      	nop

000bb0e8 <__aeabi_d2ulz>:
   bb0e8:	b5d0      	push	{r4, r6, r7, lr}
   bb0ea:	4b0c      	ldr	r3, [pc, #48]	; (bb11c <__aeabi_d2ulz+0x34>)
   bb0ec:	2200      	movs	r2, #0
   bb0ee:	4606      	mov	r6, r0
   bb0f0:	460f      	mov	r7, r1
   bb0f2:	f7ff fcd9 	bl	baaa8 <__aeabi_dmul>
   bb0f6:	f7ff ff87 	bl	bb008 <__aeabi_d2uiz>
   bb0fa:	4604      	mov	r4, r0
   bb0fc:	f7ff fc5a 	bl	ba9b4 <__aeabi_ui2d>
   bb100:	4b07      	ldr	r3, [pc, #28]	; (bb120 <__aeabi_d2ulz+0x38>)
   bb102:	2200      	movs	r2, #0
   bb104:	f7ff fcd0 	bl	baaa8 <__aeabi_dmul>
   bb108:	4602      	mov	r2, r0
   bb10a:	460b      	mov	r3, r1
   bb10c:	4630      	mov	r0, r6
   bb10e:	4639      	mov	r1, r7
   bb110:	f7ff fb12 	bl	ba738 <__aeabi_dsub>
   bb114:	f7ff ff78 	bl	bb008 <__aeabi_d2uiz>
   bb118:	4621      	mov	r1, r4
   bb11a:	bdd0      	pop	{r4, r6, r7, pc}
   bb11c:	3df00000 	.word	0x3df00000
   bb120:	41f00000 	.word	0x41f00000

000bb124 <atexit>:
   bb124:	2300      	movs	r3, #0
   bb126:	4601      	mov	r1, r0
   bb128:	461a      	mov	r2, r3
   bb12a:	4618      	mov	r0, r3
   bb12c:	f000 bfce 	b.w	bc0cc <__register_exitproc>

000bb130 <atoi>:
   bb130:	220a      	movs	r2, #10
   bb132:	2100      	movs	r1, #0
   bb134:	f000 bfc0 	b.w	bc0b8 <strtol>

000bb138 <memcmp>:
   bb138:	b510      	push	{r4, lr}
   bb13a:	3901      	subs	r1, #1
   bb13c:	4402      	add	r2, r0
   bb13e:	4290      	cmp	r0, r2
   bb140:	d101      	bne.n	bb146 <memcmp+0xe>
   bb142:	2000      	movs	r0, #0
   bb144:	e005      	b.n	bb152 <memcmp+0x1a>
   bb146:	7803      	ldrb	r3, [r0, #0]
   bb148:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bb14c:	42a3      	cmp	r3, r4
   bb14e:	d001      	beq.n	bb154 <memcmp+0x1c>
   bb150:	1b18      	subs	r0, r3, r4
   bb152:	bd10      	pop	{r4, pc}
   bb154:	3001      	adds	r0, #1
   bb156:	e7f2      	b.n	bb13e <memcmp+0x6>

000bb158 <memcpy>:
   bb158:	440a      	add	r2, r1
   bb15a:	4291      	cmp	r1, r2
   bb15c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bb160:	d100      	bne.n	bb164 <memcpy+0xc>
   bb162:	4770      	bx	lr
   bb164:	b510      	push	{r4, lr}
   bb166:	f811 4b01 	ldrb.w	r4, [r1], #1
   bb16a:	f803 4f01 	strb.w	r4, [r3, #1]!
   bb16e:	4291      	cmp	r1, r2
   bb170:	d1f9      	bne.n	bb166 <memcpy+0xe>
   bb172:	bd10      	pop	{r4, pc}

000bb174 <memmove>:
   bb174:	4288      	cmp	r0, r1
   bb176:	b510      	push	{r4, lr}
   bb178:	eb01 0402 	add.w	r4, r1, r2
   bb17c:	d902      	bls.n	bb184 <memmove+0x10>
   bb17e:	4284      	cmp	r4, r0
   bb180:	4623      	mov	r3, r4
   bb182:	d807      	bhi.n	bb194 <memmove+0x20>
   bb184:	1e43      	subs	r3, r0, #1
   bb186:	42a1      	cmp	r1, r4
   bb188:	d008      	beq.n	bb19c <memmove+0x28>
   bb18a:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb18e:	f803 2f01 	strb.w	r2, [r3, #1]!
   bb192:	e7f8      	b.n	bb186 <memmove+0x12>
   bb194:	4402      	add	r2, r0
   bb196:	4601      	mov	r1, r0
   bb198:	428a      	cmp	r2, r1
   bb19a:	d100      	bne.n	bb19e <memmove+0x2a>
   bb19c:	bd10      	pop	{r4, pc}
   bb19e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bb1a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bb1a6:	e7f7      	b.n	bb198 <memmove+0x24>

000bb1a8 <memset>:
   bb1a8:	4402      	add	r2, r0
   bb1aa:	4603      	mov	r3, r0
   bb1ac:	4293      	cmp	r3, r2
   bb1ae:	d100      	bne.n	bb1b2 <memset+0xa>
   bb1b0:	4770      	bx	lr
   bb1b2:	f803 1b01 	strb.w	r1, [r3], #1
   bb1b6:	e7f9      	b.n	bb1ac <memset+0x4>

000bb1b8 <srand>:
   bb1b8:	b538      	push	{r3, r4, r5, lr}
   bb1ba:	4b10      	ldr	r3, [pc, #64]	; (bb1fc <srand+0x44>)
   bb1bc:	681d      	ldr	r5, [r3, #0]
   bb1be:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb1c0:	4604      	mov	r4, r0
   bb1c2:	b9b3      	cbnz	r3, bb1f2 <srand+0x3a>
   bb1c4:	2018      	movs	r0, #24
   bb1c6:	f7fc fcbd 	bl	b7b44 <malloc>
   bb1ca:	4602      	mov	r2, r0
   bb1cc:	63a8      	str	r0, [r5, #56]	; 0x38
   bb1ce:	b920      	cbnz	r0, bb1da <srand+0x22>
   bb1d0:	4b0b      	ldr	r3, [pc, #44]	; (bb200 <srand+0x48>)
   bb1d2:	480c      	ldr	r0, [pc, #48]	; (bb204 <srand+0x4c>)
   bb1d4:	2142      	movs	r1, #66	; 0x42
   bb1d6:	f7fc fcf5 	bl	b7bc4 <__assert_func>
   bb1da:	490b      	ldr	r1, [pc, #44]	; (bb208 <srand+0x50>)
   bb1dc:	4b0b      	ldr	r3, [pc, #44]	; (bb20c <srand+0x54>)
   bb1de:	e9c0 1300 	strd	r1, r3, [r0]
   bb1e2:	4b0b      	ldr	r3, [pc, #44]	; (bb210 <srand+0x58>)
   bb1e4:	6083      	str	r3, [r0, #8]
   bb1e6:	230b      	movs	r3, #11
   bb1e8:	8183      	strh	r3, [r0, #12]
   bb1ea:	2100      	movs	r1, #0
   bb1ec:	2001      	movs	r0, #1
   bb1ee:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bb1f2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb1f4:	2200      	movs	r2, #0
   bb1f6:	611c      	str	r4, [r3, #16]
   bb1f8:	615a      	str	r2, [r3, #20]
   bb1fa:	bd38      	pop	{r3, r4, r5, pc}
   bb1fc:	20035328 	.word	0x20035328
   bb200:	000bdc39 	.word	0x000bdc39
   bb204:	000bdc50 	.word	0x000bdc50
   bb208:	abcd330e 	.word	0xabcd330e
   bb20c:	e66d1234 	.word	0xe66d1234
   bb210:	0005deec 	.word	0x0005deec

000bb214 <strcmp>:
   bb214:	f810 2b01 	ldrb.w	r2, [r0], #1
   bb218:	f811 3b01 	ldrb.w	r3, [r1], #1
   bb21c:	2a01      	cmp	r2, #1
   bb21e:	bf28      	it	cs
   bb220:	429a      	cmpcs	r2, r3
   bb222:	d0f7      	beq.n	bb214 <strcmp>
   bb224:	1ad0      	subs	r0, r2, r3
   bb226:	4770      	bx	lr

000bb228 <strcpy>:
   bb228:	4603      	mov	r3, r0
   bb22a:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb22e:	f803 2b01 	strb.w	r2, [r3], #1
   bb232:	2a00      	cmp	r2, #0
   bb234:	d1f9      	bne.n	bb22a <strcpy+0x2>
   bb236:	4770      	bx	lr

000bb238 <strlen>:
   bb238:	4603      	mov	r3, r0
   bb23a:	f813 2b01 	ldrb.w	r2, [r3], #1
   bb23e:	2a00      	cmp	r2, #0
   bb240:	d1fb      	bne.n	bb23a <strlen+0x2>
   bb242:	1a18      	subs	r0, r3, r0
   bb244:	3801      	subs	r0, #1
   bb246:	4770      	bx	lr

000bb248 <strncmp>:
   bb248:	b510      	push	{r4, lr}
   bb24a:	b17a      	cbz	r2, bb26c <strncmp+0x24>
   bb24c:	4603      	mov	r3, r0
   bb24e:	3901      	subs	r1, #1
   bb250:	1884      	adds	r4, r0, r2
   bb252:	f813 0b01 	ldrb.w	r0, [r3], #1
   bb256:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bb25a:	4290      	cmp	r0, r2
   bb25c:	d101      	bne.n	bb262 <strncmp+0x1a>
   bb25e:	42a3      	cmp	r3, r4
   bb260:	d101      	bne.n	bb266 <strncmp+0x1e>
   bb262:	1a80      	subs	r0, r0, r2
   bb264:	bd10      	pop	{r4, pc}
   bb266:	2800      	cmp	r0, #0
   bb268:	d1f3      	bne.n	bb252 <strncmp+0xa>
   bb26a:	e7fa      	b.n	bb262 <strncmp+0x1a>
   bb26c:	4610      	mov	r0, r2
   bb26e:	e7f9      	b.n	bb264 <strncmp+0x1c>

000bb270 <strnlen>:
   bb270:	b510      	push	{r4, lr}
   bb272:	4602      	mov	r2, r0
   bb274:	4401      	add	r1, r0
   bb276:	428a      	cmp	r2, r1
   bb278:	4613      	mov	r3, r2
   bb27a:	d003      	beq.n	bb284 <strnlen+0x14>
   bb27c:	781c      	ldrb	r4, [r3, #0]
   bb27e:	3201      	adds	r2, #1
   bb280:	2c00      	cmp	r4, #0
   bb282:	d1f8      	bne.n	bb276 <strnlen+0x6>
   bb284:	1a18      	subs	r0, r3, r0
   bb286:	bd10      	pop	{r4, pc}

000bb288 <strstr>:
   bb288:	780a      	ldrb	r2, [r1, #0]
   bb28a:	b570      	push	{r4, r5, r6, lr}
   bb28c:	b96a      	cbnz	r2, bb2aa <strstr+0x22>
   bb28e:	bd70      	pop	{r4, r5, r6, pc}
   bb290:	429a      	cmp	r2, r3
   bb292:	d109      	bne.n	bb2a8 <strstr+0x20>
   bb294:	460c      	mov	r4, r1
   bb296:	4605      	mov	r5, r0
   bb298:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   bb29c:	2b00      	cmp	r3, #0
   bb29e:	d0f6      	beq.n	bb28e <strstr+0x6>
   bb2a0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   bb2a4:	429e      	cmp	r6, r3
   bb2a6:	d0f7      	beq.n	bb298 <strstr+0x10>
   bb2a8:	3001      	adds	r0, #1
   bb2aa:	7803      	ldrb	r3, [r0, #0]
   bb2ac:	2b00      	cmp	r3, #0
   bb2ae:	d1ef      	bne.n	bb290 <strstr+0x8>
   bb2b0:	4618      	mov	r0, r3
   bb2b2:	e7ec      	b.n	bb28e <strstr+0x6>

000bb2b4 <sulp>:
   bb2b4:	b570      	push	{r4, r5, r6, lr}
   bb2b6:	4604      	mov	r4, r0
   bb2b8:	460d      	mov	r5, r1
   bb2ba:	ec45 4b10 	vmov	d0, r4, r5
   bb2be:	4616      	mov	r6, r2
   bb2c0:	f001 fe5e 	bl	bcf80 <__ulp>
   bb2c4:	ec51 0b10 	vmov	r0, r1, d0
   bb2c8:	b17e      	cbz	r6, bb2ea <sulp+0x36>
   bb2ca:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bb2ce:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bb2d2:	2b00      	cmp	r3, #0
   bb2d4:	dd09      	ble.n	bb2ea <sulp+0x36>
   bb2d6:	051b      	lsls	r3, r3, #20
   bb2d8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bb2dc:	2400      	movs	r4, #0
   bb2de:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bb2e2:	4622      	mov	r2, r4
   bb2e4:	462b      	mov	r3, r5
   bb2e6:	f7ff fbdf 	bl	baaa8 <__aeabi_dmul>
   bb2ea:	bd70      	pop	{r4, r5, r6, pc}
   bb2ec:	0000      	movs	r0, r0
	...

000bb2f0 <_strtod_l>:
   bb2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb2f4:	ed2d 8b02 	vpush	{d8}
   bb2f8:	b09d      	sub	sp, #116	; 0x74
   bb2fa:	461f      	mov	r7, r3
   bb2fc:	2300      	movs	r3, #0
   bb2fe:	9318      	str	r3, [sp, #96]	; 0x60
   bb300:	4ba2      	ldr	r3, [pc, #648]	; (bb58c <_strtod_l+0x29c>)
   bb302:	9213      	str	r2, [sp, #76]	; 0x4c
   bb304:	681b      	ldr	r3, [r3, #0]
   bb306:	9305      	str	r3, [sp, #20]
   bb308:	4604      	mov	r4, r0
   bb30a:	4618      	mov	r0, r3
   bb30c:	4688      	mov	r8, r1
   bb30e:	f7ff ff93 	bl	bb238 <strlen>
   bb312:	f04f 0a00 	mov.w	sl, #0
   bb316:	4605      	mov	r5, r0
   bb318:	f04f 0b00 	mov.w	fp, #0
   bb31c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb320:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb322:	781a      	ldrb	r2, [r3, #0]
   bb324:	2a2b      	cmp	r2, #43	; 0x2b
   bb326:	d04e      	beq.n	bb3c6 <_strtod_l+0xd6>
   bb328:	d83b      	bhi.n	bb3a2 <_strtod_l+0xb2>
   bb32a:	2a0d      	cmp	r2, #13
   bb32c:	d834      	bhi.n	bb398 <_strtod_l+0xa8>
   bb32e:	2a08      	cmp	r2, #8
   bb330:	d834      	bhi.n	bb39c <_strtod_l+0xac>
   bb332:	2a00      	cmp	r2, #0
   bb334:	d03e      	beq.n	bb3b4 <_strtod_l+0xc4>
   bb336:	2300      	movs	r3, #0
   bb338:	930a      	str	r3, [sp, #40]	; 0x28
   bb33a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bb33c:	7833      	ldrb	r3, [r6, #0]
   bb33e:	2b30      	cmp	r3, #48	; 0x30
   bb340:	f040 80b0 	bne.w	bb4a4 <_strtod_l+0x1b4>
   bb344:	7873      	ldrb	r3, [r6, #1]
   bb346:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bb34a:	2b58      	cmp	r3, #88	; 0x58
   bb34c:	d168      	bne.n	bb420 <_strtod_l+0x130>
   bb34e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bb350:	9301      	str	r3, [sp, #4]
   bb352:	ab18      	add	r3, sp, #96	; 0x60
   bb354:	9702      	str	r7, [sp, #8]
   bb356:	9300      	str	r3, [sp, #0]
   bb358:	4a8d      	ldr	r2, [pc, #564]	; (bb590 <_strtod_l+0x2a0>)
   bb35a:	ab19      	add	r3, sp, #100	; 0x64
   bb35c:	a917      	add	r1, sp, #92	; 0x5c
   bb35e:	4620      	mov	r0, r4
   bb360:	f000 ff7e 	bl	bc260 <__gethex>
   bb364:	f010 0707 	ands.w	r7, r0, #7
   bb368:	4605      	mov	r5, r0
   bb36a:	d005      	beq.n	bb378 <_strtod_l+0x88>
   bb36c:	2f06      	cmp	r7, #6
   bb36e:	d12c      	bne.n	bb3ca <_strtod_l+0xda>
   bb370:	3601      	adds	r6, #1
   bb372:	2300      	movs	r3, #0
   bb374:	9617      	str	r6, [sp, #92]	; 0x5c
   bb376:	930a      	str	r3, [sp, #40]	; 0x28
   bb378:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb37a:	2b00      	cmp	r3, #0
   bb37c:	f040 8590 	bne.w	bbea0 <_strtod_l+0xbb0>
   bb380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bb382:	b1eb      	cbz	r3, bb3c0 <_strtod_l+0xd0>
   bb384:	4652      	mov	r2, sl
   bb386:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bb38a:	ec43 2b10 	vmov	d0, r2, r3
   bb38e:	b01d      	add	sp, #116	; 0x74
   bb390:	ecbd 8b02 	vpop	{d8}
   bb394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb398:	2a20      	cmp	r2, #32
   bb39a:	d1cc      	bne.n	bb336 <_strtod_l+0x46>
   bb39c:	3301      	adds	r3, #1
   bb39e:	9317      	str	r3, [sp, #92]	; 0x5c
   bb3a0:	e7be      	b.n	bb320 <_strtod_l+0x30>
   bb3a2:	2a2d      	cmp	r2, #45	; 0x2d
   bb3a4:	d1c7      	bne.n	bb336 <_strtod_l+0x46>
   bb3a6:	2201      	movs	r2, #1
   bb3a8:	920a      	str	r2, [sp, #40]	; 0x28
   bb3aa:	1c5a      	adds	r2, r3, #1
   bb3ac:	9217      	str	r2, [sp, #92]	; 0x5c
   bb3ae:	785b      	ldrb	r3, [r3, #1]
   bb3b0:	2b00      	cmp	r3, #0
   bb3b2:	d1c2      	bne.n	bb33a <_strtod_l+0x4a>
   bb3b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb3b6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb3ba:	2b00      	cmp	r3, #0
   bb3bc:	f040 856e 	bne.w	bbe9c <_strtod_l+0xbac>
   bb3c0:	4652      	mov	r2, sl
   bb3c2:	465b      	mov	r3, fp
   bb3c4:	e7e1      	b.n	bb38a <_strtod_l+0x9a>
   bb3c6:	2200      	movs	r2, #0
   bb3c8:	e7ee      	b.n	bb3a8 <_strtod_l+0xb8>
   bb3ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bb3cc:	b13a      	cbz	r2, bb3de <_strtod_l+0xee>
   bb3ce:	2135      	movs	r1, #53	; 0x35
   bb3d0:	a81a      	add	r0, sp, #104	; 0x68
   bb3d2:	f001 fee0 	bl	bd196 <__copybits>
   bb3d6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb3d8:	4620      	mov	r0, r4
   bb3da:	f001 fa9f 	bl	bc91c <_Bfree>
   bb3de:	3f01      	subs	r7, #1
   bb3e0:	2f04      	cmp	r7, #4
   bb3e2:	d806      	bhi.n	bb3f2 <_strtod_l+0x102>
   bb3e4:	e8df f007 	tbb	[pc, r7]
   bb3e8:	1714030a 	.word	0x1714030a
   bb3ec:	0a          	.byte	0x0a
   bb3ed:	00          	.byte	0x00
   bb3ee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bb3f2:	0728      	lsls	r0, r5, #28
   bb3f4:	d5c0      	bpl.n	bb378 <_strtod_l+0x88>
   bb3f6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bb3fa:	e7bd      	b.n	bb378 <_strtod_l+0x88>
   bb3fc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bb400:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bb402:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bb406:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bb40a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bb40e:	e7f0      	b.n	bb3f2 <_strtod_l+0x102>
   bb410:	f8df b180 	ldr.w	fp, [pc, #384]	; bb594 <_strtod_l+0x2a4>
   bb414:	e7ed      	b.n	bb3f2 <_strtod_l+0x102>
   bb416:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bb41a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bb41e:	e7e8      	b.n	bb3f2 <_strtod_l+0x102>
   bb420:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb422:	1c5a      	adds	r2, r3, #1
   bb424:	9217      	str	r2, [sp, #92]	; 0x5c
   bb426:	785b      	ldrb	r3, [r3, #1]
   bb428:	2b30      	cmp	r3, #48	; 0x30
   bb42a:	d0f9      	beq.n	bb420 <_strtod_l+0x130>
   bb42c:	2b00      	cmp	r3, #0
   bb42e:	d0a3      	beq.n	bb378 <_strtod_l+0x88>
   bb430:	2301      	movs	r3, #1
   bb432:	f04f 0900 	mov.w	r9, #0
   bb436:	9304      	str	r3, [sp, #16]
   bb438:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb43a:	9308      	str	r3, [sp, #32]
   bb43c:	f8cd 901c 	str.w	r9, [sp, #28]
   bb440:	464f      	mov	r7, r9
   bb442:	220a      	movs	r2, #10
   bb444:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bb446:	7806      	ldrb	r6, [r0, #0]
   bb448:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bb44c:	b2d9      	uxtb	r1, r3
   bb44e:	2909      	cmp	r1, #9
   bb450:	d92a      	bls.n	bb4a8 <_strtod_l+0x1b8>
   bb452:	9905      	ldr	r1, [sp, #20]
   bb454:	462a      	mov	r2, r5
   bb456:	f7ff fef7 	bl	bb248 <strncmp>
   bb45a:	b398      	cbz	r0, bb4c4 <_strtod_l+0x1d4>
   bb45c:	2000      	movs	r0, #0
   bb45e:	4632      	mov	r2, r6
   bb460:	463d      	mov	r5, r7
   bb462:	9005      	str	r0, [sp, #20]
   bb464:	4603      	mov	r3, r0
   bb466:	2a65      	cmp	r2, #101	; 0x65
   bb468:	d001      	beq.n	bb46e <_strtod_l+0x17e>
   bb46a:	2a45      	cmp	r2, #69	; 0x45
   bb46c:	d118      	bne.n	bb4a0 <_strtod_l+0x1b0>
   bb46e:	b91d      	cbnz	r5, bb478 <_strtod_l+0x188>
   bb470:	9a04      	ldr	r2, [sp, #16]
   bb472:	4302      	orrs	r2, r0
   bb474:	d09e      	beq.n	bb3b4 <_strtod_l+0xc4>
   bb476:	2500      	movs	r5, #0
   bb478:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bb47c:	f108 0201 	add.w	r2, r8, #1
   bb480:	9217      	str	r2, [sp, #92]	; 0x5c
   bb482:	f898 2001 	ldrb.w	r2, [r8, #1]
   bb486:	2a2b      	cmp	r2, #43	; 0x2b
   bb488:	d075      	beq.n	bb576 <_strtod_l+0x286>
   bb48a:	2a2d      	cmp	r2, #45	; 0x2d
   bb48c:	d07b      	beq.n	bb586 <_strtod_l+0x296>
   bb48e:	f04f 0c00 	mov.w	ip, #0
   bb492:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bb496:	2909      	cmp	r1, #9
   bb498:	f240 8082 	bls.w	bb5a0 <_strtod_l+0x2b0>
   bb49c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb4a0:	2600      	movs	r6, #0
   bb4a2:	e09d      	b.n	bb5e0 <_strtod_l+0x2f0>
   bb4a4:	2300      	movs	r3, #0
   bb4a6:	e7c4      	b.n	bb432 <_strtod_l+0x142>
   bb4a8:	2f08      	cmp	r7, #8
   bb4aa:	bfd8      	it	le
   bb4ac:	9907      	ldrle	r1, [sp, #28]
   bb4ae:	f100 0001 	add.w	r0, r0, #1
   bb4b2:	bfda      	itte	le
   bb4b4:	fb02 3301 	mlale	r3, r2, r1, r3
   bb4b8:	9307      	strle	r3, [sp, #28]
   bb4ba:	fb02 3909 	mlagt	r9, r2, r9, r3
   bb4be:	3701      	adds	r7, #1
   bb4c0:	9017      	str	r0, [sp, #92]	; 0x5c
   bb4c2:	e7bf      	b.n	bb444 <_strtod_l+0x154>
   bb4c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb4c6:	195a      	adds	r2, r3, r5
   bb4c8:	9217      	str	r2, [sp, #92]	; 0x5c
   bb4ca:	5d5a      	ldrb	r2, [r3, r5]
   bb4cc:	2f00      	cmp	r7, #0
   bb4ce:	d037      	beq.n	bb540 <_strtod_l+0x250>
   bb4d0:	9005      	str	r0, [sp, #20]
   bb4d2:	463d      	mov	r5, r7
   bb4d4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bb4d8:	2b09      	cmp	r3, #9
   bb4da:	d912      	bls.n	bb502 <_strtod_l+0x212>
   bb4dc:	2301      	movs	r3, #1
   bb4de:	e7c2      	b.n	bb466 <_strtod_l+0x176>
   bb4e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb4e2:	1c5a      	adds	r2, r3, #1
   bb4e4:	9217      	str	r2, [sp, #92]	; 0x5c
   bb4e6:	785a      	ldrb	r2, [r3, #1]
   bb4e8:	3001      	adds	r0, #1
   bb4ea:	2a30      	cmp	r2, #48	; 0x30
   bb4ec:	d0f8      	beq.n	bb4e0 <_strtod_l+0x1f0>
   bb4ee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bb4f2:	2b08      	cmp	r3, #8
   bb4f4:	f200 84d9 	bhi.w	bbeaa <_strtod_l+0xbba>
   bb4f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb4fa:	9005      	str	r0, [sp, #20]
   bb4fc:	2000      	movs	r0, #0
   bb4fe:	9308      	str	r3, [sp, #32]
   bb500:	4605      	mov	r5, r0
   bb502:	3a30      	subs	r2, #48	; 0x30
   bb504:	f100 0301 	add.w	r3, r0, #1
   bb508:	d014      	beq.n	bb534 <_strtod_l+0x244>
   bb50a:	9905      	ldr	r1, [sp, #20]
   bb50c:	4419      	add	r1, r3
   bb50e:	9105      	str	r1, [sp, #20]
   bb510:	462b      	mov	r3, r5
   bb512:	eb00 0e05 	add.w	lr, r0, r5
   bb516:	210a      	movs	r1, #10
   bb518:	4573      	cmp	r3, lr
   bb51a:	d113      	bne.n	bb544 <_strtod_l+0x254>
   bb51c:	182b      	adds	r3, r5, r0
   bb51e:	2b08      	cmp	r3, #8
   bb520:	f105 0501 	add.w	r5, r5, #1
   bb524:	4405      	add	r5, r0
   bb526:	dc1c      	bgt.n	bb562 <_strtod_l+0x272>
   bb528:	9907      	ldr	r1, [sp, #28]
   bb52a:	230a      	movs	r3, #10
   bb52c:	fb03 2301 	mla	r3, r3, r1, r2
   bb530:	9307      	str	r3, [sp, #28]
   bb532:	2300      	movs	r3, #0
   bb534:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb536:	1c51      	adds	r1, r2, #1
   bb538:	9117      	str	r1, [sp, #92]	; 0x5c
   bb53a:	7852      	ldrb	r2, [r2, #1]
   bb53c:	4618      	mov	r0, r3
   bb53e:	e7c9      	b.n	bb4d4 <_strtod_l+0x1e4>
   bb540:	4638      	mov	r0, r7
   bb542:	e7d2      	b.n	bb4ea <_strtod_l+0x1fa>
   bb544:	2b08      	cmp	r3, #8
   bb546:	dc04      	bgt.n	bb552 <_strtod_l+0x262>
   bb548:	9e07      	ldr	r6, [sp, #28]
   bb54a:	434e      	muls	r6, r1
   bb54c:	9607      	str	r6, [sp, #28]
   bb54e:	3301      	adds	r3, #1
   bb550:	e7e2      	b.n	bb518 <_strtod_l+0x228>
   bb552:	f103 0c01 	add.w	ip, r3, #1
   bb556:	f1bc 0f10 	cmp.w	ip, #16
   bb55a:	bfd8      	it	le
   bb55c:	fb01 f909 	mulle.w	r9, r1, r9
   bb560:	e7f5      	b.n	bb54e <_strtod_l+0x25e>
   bb562:	2d10      	cmp	r5, #16
   bb564:	bfdc      	itt	le
   bb566:	230a      	movle	r3, #10
   bb568:	fb03 2909 	mlale	r9, r3, r9, r2
   bb56c:	e7e1      	b.n	bb532 <_strtod_l+0x242>
   bb56e:	2300      	movs	r3, #0
   bb570:	9305      	str	r3, [sp, #20]
   bb572:	2301      	movs	r3, #1
   bb574:	e77c      	b.n	bb470 <_strtod_l+0x180>
   bb576:	f04f 0c00 	mov.w	ip, #0
   bb57a:	f108 0202 	add.w	r2, r8, #2
   bb57e:	9217      	str	r2, [sp, #92]	; 0x5c
   bb580:	f898 2002 	ldrb.w	r2, [r8, #2]
   bb584:	e785      	b.n	bb492 <_strtod_l+0x1a2>
   bb586:	f04f 0c01 	mov.w	ip, #1
   bb58a:	e7f6      	b.n	bb57a <_strtod_l+0x28a>
   bb58c:	000bde7c 	.word	0x000bde7c
   bb590:	000bdcb8 	.word	0x000bdcb8
   bb594:	7ff00000 	.word	0x7ff00000
   bb598:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb59a:	1c51      	adds	r1, r2, #1
   bb59c:	9117      	str	r1, [sp, #92]	; 0x5c
   bb59e:	7852      	ldrb	r2, [r2, #1]
   bb5a0:	2a30      	cmp	r2, #48	; 0x30
   bb5a2:	d0f9      	beq.n	bb598 <_strtod_l+0x2a8>
   bb5a4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bb5a8:	2908      	cmp	r1, #8
   bb5aa:	f63f af79 	bhi.w	bb4a0 <_strtod_l+0x1b0>
   bb5ae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bb5b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb5b4:	9206      	str	r2, [sp, #24]
   bb5b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb5b8:	1c51      	adds	r1, r2, #1
   bb5ba:	9117      	str	r1, [sp, #92]	; 0x5c
   bb5bc:	7852      	ldrb	r2, [r2, #1]
   bb5be:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bb5c2:	2e09      	cmp	r6, #9
   bb5c4:	d937      	bls.n	bb636 <_strtod_l+0x346>
   bb5c6:	9e06      	ldr	r6, [sp, #24]
   bb5c8:	1b89      	subs	r1, r1, r6
   bb5ca:	2908      	cmp	r1, #8
   bb5cc:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bb5d0:	dc02      	bgt.n	bb5d8 <_strtod_l+0x2e8>
   bb5d2:	4576      	cmp	r6, lr
   bb5d4:	bfa8      	it	ge
   bb5d6:	4676      	movge	r6, lr
   bb5d8:	f1bc 0f00 	cmp.w	ip, #0
   bb5dc:	d000      	beq.n	bb5e0 <_strtod_l+0x2f0>
   bb5de:	4276      	negs	r6, r6
   bb5e0:	2d00      	cmp	r5, #0
   bb5e2:	d14d      	bne.n	bb680 <_strtod_l+0x390>
   bb5e4:	9904      	ldr	r1, [sp, #16]
   bb5e6:	4301      	orrs	r1, r0
   bb5e8:	f47f aec6 	bne.w	bb378 <_strtod_l+0x88>
   bb5ec:	2b00      	cmp	r3, #0
   bb5ee:	f47f aee1 	bne.w	bb3b4 <_strtod_l+0xc4>
   bb5f2:	2a69      	cmp	r2, #105	; 0x69
   bb5f4:	d027      	beq.n	bb646 <_strtod_l+0x356>
   bb5f6:	dc24      	bgt.n	bb642 <_strtod_l+0x352>
   bb5f8:	2a49      	cmp	r2, #73	; 0x49
   bb5fa:	d024      	beq.n	bb646 <_strtod_l+0x356>
   bb5fc:	2a4e      	cmp	r2, #78	; 0x4e
   bb5fe:	f47f aed9 	bne.w	bb3b4 <_strtod_l+0xc4>
   bb602:	499f      	ldr	r1, [pc, #636]	; (bb880 <_strtod_l+0x590>)
   bb604:	a817      	add	r0, sp, #92	; 0x5c
   bb606:	f001 f883 	bl	bc710 <__match>
   bb60a:	2800      	cmp	r0, #0
   bb60c:	f43f aed2 	beq.w	bb3b4 <_strtod_l+0xc4>
   bb610:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb612:	781b      	ldrb	r3, [r3, #0]
   bb614:	2b28      	cmp	r3, #40	; 0x28
   bb616:	d12d      	bne.n	bb674 <_strtod_l+0x384>
   bb618:	499a      	ldr	r1, [pc, #616]	; (bb884 <_strtod_l+0x594>)
   bb61a:	aa1a      	add	r2, sp, #104	; 0x68
   bb61c:	a817      	add	r0, sp, #92	; 0x5c
   bb61e:	f001 f88b 	bl	bc738 <__hexnan>
   bb622:	2805      	cmp	r0, #5
   bb624:	d126      	bne.n	bb674 <_strtod_l+0x384>
   bb626:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bb628:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bb62c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bb630:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bb634:	e6a0      	b.n	bb378 <_strtod_l+0x88>
   bb636:	210a      	movs	r1, #10
   bb638:	fb01 2e0e 	mla	lr, r1, lr, r2
   bb63c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bb640:	e7b9      	b.n	bb5b6 <_strtod_l+0x2c6>
   bb642:	2a6e      	cmp	r2, #110	; 0x6e
   bb644:	e7db      	b.n	bb5fe <_strtod_l+0x30e>
   bb646:	4990      	ldr	r1, [pc, #576]	; (bb888 <_strtod_l+0x598>)
   bb648:	a817      	add	r0, sp, #92	; 0x5c
   bb64a:	f001 f861 	bl	bc710 <__match>
   bb64e:	2800      	cmp	r0, #0
   bb650:	f43f aeb0 	beq.w	bb3b4 <_strtod_l+0xc4>
   bb654:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb656:	498d      	ldr	r1, [pc, #564]	; (bb88c <_strtod_l+0x59c>)
   bb658:	3b01      	subs	r3, #1
   bb65a:	a817      	add	r0, sp, #92	; 0x5c
   bb65c:	9317      	str	r3, [sp, #92]	; 0x5c
   bb65e:	f001 f857 	bl	bc710 <__match>
   bb662:	b910      	cbnz	r0, bb66a <_strtod_l+0x37a>
   bb664:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb666:	3301      	adds	r3, #1
   bb668:	9317      	str	r3, [sp, #92]	; 0x5c
   bb66a:	f8df b230 	ldr.w	fp, [pc, #560]	; bb89c <_strtod_l+0x5ac>
   bb66e:	f04f 0a00 	mov.w	sl, #0
   bb672:	e681      	b.n	bb378 <_strtod_l+0x88>
   bb674:	4886      	ldr	r0, [pc, #536]	; (bb890 <_strtod_l+0x5a0>)
   bb676:	f001 fde3 	bl	bd240 <nan>
   bb67a:	ec5b ab10 	vmov	sl, fp, d0
   bb67e:	e67b      	b.n	bb378 <_strtod_l+0x88>
   bb680:	9b05      	ldr	r3, [sp, #20]
   bb682:	9807      	ldr	r0, [sp, #28]
   bb684:	1af3      	subs	r3, r6, r3
   bb686:	2f00      	cmp	r7, #0
   bb688:	bf08      	it	eq
   bb68a:	462f      	moveq	r7, r5
   bb68c:	2d10      	cmp	r5, #16
   bb68e:	9306      	str	r3, [sp, #24]
   bb690:	46a8      	mov	r8, r5
   bb692:	bfa8      	it	ge
   bb694:	f04f 0810 	movge.w	r8, #16
   bb698:	f7ff f98c 	bl	ba9b4 <__aeabi_ui2d>
   bb69c:	2d09      	cmp	r5, #9
   bb69e:	4682      	mov	sl, r0
   bb6a0:	468b      	mov	fp, r1
   bb6a2:	dd13      	ble.n	bb6cc <_strtod_l+0x3dc>
   bb6a4:	4b7b      	ldr	r3, [pc, #492]	; (bb894 <_strtod_l+0x5a4>)
   bb6a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bb6aa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bb6ae:	f7ff f9fb 	bl	baaa8 <__aeabi_dmul>
   bb6b2:	4682      	mov	sl, r0
   bb6b4:	4648      	mov	r0, r9
   bb6b6:	468b      	mov	fp, r1
   bb6b8:	f7ff f97c 	bl	ba9b4 <__aeabi_ui2d>
   bb6bc:	4602      	mov	r2, r0
   bb6be:	460b      	mov	r3, r1
   bb6c0:	4650      	mov	r0, sl
   bb6c2:	4659      	mov	r1, fp
   bb6c4:	f7ff f83a 	bl	ba73c <__adddf3>
   bb6c8:	4682      	mov	sl, r0
   bb6ca:	468b      	mov	fp, r1
   bb6cc:	2d0f      	cmp	r5, #15
   bb6ce:	dc38      	bgt.n	bb742 <_strtod_l+0x452>
   bb6d0:	9b06      	ldr	r3, [sp, #24]
   bb6d2:	2b00      	cmp	r3, #0
   bb6d4:	f43f ae50 	beq.w	bb378 <_strtod_l+0x88>
   bb6d8:	dd24      	ble.n	bb724 <_strtod_l+0x434>
   bb6da:	2b16      	cmp	r3, #22
   bb6dc:	dc0b      	bgt.n	bb6f6 <_strtod_l+0x406>
   bb6de:	496d      	ldr	r1, [pc, #436]	; (bb894 <_strtod_l+0x5a4>)
   bb6e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bb6e4:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb6e8:	4652      	mov	r2, sl
   bb6ea:	465b      	mov	r3, fp
   bb6ec:	f7ff f9dc 	bl	baaa8 <__aeabi_dmul>
   bb6f0:	4682      	mov	sl, r0
   bb6f2:	468b      	mov	fp, r1
   bb6f4:	e640      	b.n	bb378 <_strtod_l+0x88>
   bb6f6:	9a06      	ldr	r2, [sp, #24]
   bb6f8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bb6fc:	4293      	cmp	r3, r2
   bb6fe:	db20      	blt.n	bb742 <_strtod_l+0x452>
   bb700:	4c64      	ldr	r4, [pc, #400]	; (bb894 <_strtod_l+0x5a4>)
   bb702:	f1c5 050f 	rsb	r5, r5, #15
   bb706:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bb70a:	4652      	mov	r2, sl
   bb70c:	465b      	mov	r3, fp
   bb70e:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb712:	f7ff f9c9 	bl	baaa8 <__aeabi_dmul>
   bb716:	9b06      	ldr	r3, [sp, #24]
   bb718:	1b5d      	subs	r5, r3, r5
   bb71a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bb71e:	e9d4 2300 	ldrd	r2, r3, [r4]
   bb722:	e7e3      	b.n	bb6ec <_strtod_l+0x3fc>
   bb724:	9b06      	ldr	r3, [sp, #24]
   bb726:	3316      	adds	r3, #22
   bb728:	db0b      	blt.n	bb742 <_strtod_l+0x452>
   bb72a:	9b05      	ldr	r3, [sp, #20]
   bb72c:	1b9e      	subs	r6, r3, r6
   bb72e:	4b59      	ldr	r3, [pc, #356]	; (bb894 <_strtod_l+0x5a4>)
   bb730:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bb734:	e9d6 2300 	ldrd	r2, r3, [r6]
   bb738:	4650      	mov	r0, sl
   bb73a:	4659      	mov	r1, fp
   bb73c:	f7ff fade 	bl	bacfc <__aeabi_ddiv>
   bb740:	e7d6      	b.n	bb6f0 <_strtod_l+0x400>
   bb742:	9b06      	ldr	r3, [sp, #24]
   bb744:	eba5 0808 	sub.w	r8, r5, r8
   bb748:	4498      	add	r8, r3
   bb74a:	f1b8 0f00 	cmp.w	r8, #0
   bb74e:	dd74      	ble.n	bb83a <_strtod_l+0x54a>
   bb750:	f018 030f 	ands.w	r3, r8, #15
   bb754:	d00a      	beq.n	bb76c <_strtod_l+0x47c>
   bb756:	494f      	ldr	r1, [pc, #316]	; (bb894 <_strtod_l+0x5a4>)
   bb758:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bb75c:	4652      	mov	r2, sl
   bb75e:	465b      	mov	r3, fp
   bb760:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb764:	f7ff f9a0 	bl	baaa8 <__aeabi_dmul>
   bb768:	4682      	mov	sl, r0
   bb76a:	468b      	mov	fp, r1
   bb76c:	f038 080f 	bics.w	r8, r8, #15
   bb770:	d04f      	beq.n	bb812 <_strtod_l+0x522>
   bb772:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bb776:	dd22      	ble.n	bb7be <_strtod_l+0x4ce>
   bb778:	2500      	movs	r5, #0
   bb77a:	462e      	mov	r6, r5
   bb77c:	9507      	str	r5, [sp, #28]
   bb77e:	9505      	str	r5, [sp, #20]
   bb780:	2322      	movs	r3, #34	; 0x22
   bb782:	f8df b118 	ldr.w	fp, [pc, #280]	; bb89c <_strtod_l+0x5ac>
   bb786:	6023      	str	r3, [r4, #0]
   bb788:	f04f 0a00 	mov.w	sl, #0
   bb78c:	9b07      	ldr	r3, [sp, #28]
   bb78e:	2b00      	cmp	r3, #0
   bb790:	f43f adf2 	beq.w	bb378 <_strtod_l+0x88>
   bb794:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb796:	4620      	mov	r0, r4
   bb798:	f001 f8c0 	bl	bc91c <_Bfree>
   bb79c:	9905      	ldr	r1, [sp, #20]
   bb79e:	4620      	mov	r0, r4
   bb7a0:	f001 f8bc 	bl	bc91c <_Bfree>
   bb7a4:	4631      	mov	r1, r6
   bb7a6:	4620      	mov	r0, r4
   bb7a8:	f001 f8b8 	bl	bc91c <_Bfree>
   bb7ac:	9907      	ldr	r1, [sp, #28]
   bb7ae:	4620      	mov	r0, r4
   bb7b0:	f001 f8b4 	bl	bc91c <_Bfree>
   bb7b4:	4629      	mov	r1, r5
   bb7b6:	4620      	mov	r0, r4
   bb7b8:	f001 f8b0 	bl	bc91c <_Bfree>
   bb7bc:	e5dc      	b.n	bb378 <_strtod_l+0x88>
   bb7be:	4b36      	ldr	r3, [pc, #216]	; (bb898 <_strtod_l+0x5a8>)
   bb7c0:	9304      	str	r3, [sp, #16]
   bb7c2:	2300      	movs	r3, #0
   bb7c4:	ea4f 1828 	mov.w	r8, r8, asr #4
   bb7c8:	4650      	mov	r0, sl
   bb7ca:	4659      	mov	r1, fp
   bb7cc:	4699      	mov	r9, r3
   bb7ce:	f1b8 0f01 	cmp.w	r8, #1
   bb7d2:	dc21      	bgt.n	bb818 <_strtod_l+0x528>
   bb7d4:	b10b      	cbz	r3, bb7da <_strtod_l+0x4ea>
   bb7d6:	4682      	mov	sl, r0
   bb7d8:	468b      	mov	fp, r1
   bb7da:	4b2f      	ldr	r3, [pc, #188]	; (bb898 <_strtod_l+0x5a8>)
   bb7dc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bb7e0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bb7e4:	4652      	mov	r2, sl
   bb7e6:	465b      	mov	r3, fp
   bb7e8:	e9d9 0100 	ldrd	r0, r1, [r9]
   bb7ec:	f7ff f95c 	bl	baaa8 <__aeabi_dmul>
   bb7f0:	4b2a      	ldr	r3, [pc, #168]	; (bb89c <_strtod_l+0x5ac>)
   bb7f2:	460a      	mov	r2, r1
   bb7f4:	400b      	ands	r3, r1
   bb7f6:	492a      	ldr	r1, [pc, #168]	; (bb8a0 <_strtod_l+0x5b0>)
   bb7f8:	428b      	cmp	r3, r1
   bb7fa:	4682      	mov	sl, r0
   bb7fc:	d8bc      	bhi.n	bb778 <_strtod_l+0x488>
   bb7fe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bb802:	428b      	cmp	r3, r1
   bb804:	bf86      	itte	hi
   bb806:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bb8a4 <_strtod_l+0x5b4>
   bb80a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   bb80e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bb812:	2300      	movs	r3, #0
   bb814:	9304      	str	r3, [sp, #16]
   bb816:	e084      	b.n	bb922 <_strtod_l+0x632>
   bb818:	f018 0f01 	tst.w	r8, #1
   bb81c:	d005      	beq.n	bb82a <_strtod_l+0x53a>
   bb81e:	9b04      	ldr	r3, [sp, #16]
   bb820:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb824:	f7ff f940 	bl	baaa8 <__aeabi_dmul>
   bb828:	2301      	movs	r3, #1
   bb82a:	9a04      	ldr	r2, [sp, #16]
   bb82c:	3208      	adds	r2, #8
   bb82e:	f109 0901 	add.w	r9, r9, #1
   bb832:	ea4f 0868 	mov.w	r8, r8, asr #1
   bb836:	9204      	str	r2, [sp, #16]
   bb838:	e7c9      	b.n	bb7ce <_strtod_l+0x4de>
   bb83a:	d0ea      	beq.n	bb812 <_strtod_l+0x522>
   bb83c:	f1c8 0800 	rsb	r8, r8, #0
   bb840:	f018 020f 	ands.w	r2, r8, #15
   bb844:	d00a      	beq.n	bb85c <_strtod_l+0x56c>
   bb846:	4b13      	ldr	r3, [pc, #76]	; (bb894 <_strtod_l+0x5a4>)
   bb848:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bb84c:	4650      	mov	r0, sl
   bb84e:	4659      	mov	r1, fp
   bb850:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb854:	f7ff fa52 	bl	bacfc <__aeabi_ddiv>
   bb858:	4682      	mov	sl, r0
   bb85a:	468b      	mov	fp, r1
   bb85c:	ea5f 1828 	movs.w	r8, r8, asr #4
   bb860:	d0d7      	beq.n	bb812 <_strtod_l+0x522>
   bb862:	f1b8 0f1f 	cmp.w	r8, #31
   bb866:	dd1f      	ble.n	bb8a8 <_strtod_l+0x5b8>
   bb868:	2500      	movs	r5, #0
   bb86a:	462e      	mov	r6, r5
   bb86c:	9507      	str	r5, [sp, #28]
   bb86e:	9505      	str	r5, [sp, #20]
   bb870:	2322      	movs	r3, #34	; 0x22
   bb872:	f04f 0a00 	mov.w	sl, #0
   bb876:	f04f 0b00 	mov.w	fp, #0
   bb87a:	6023      	str	r3, [r4, #0]
   bb87c:	e786      	b.n	bb78c <_strtod_l+0x49c>
   bb87e:	bf00      	nop
   bb880:	000bdcb2 	.word	0x000bdcb2
   bb884:	000bdccc 	.word	0x000bdccc
   bb888:	000bdca9 	.word	0x000bdca9
   bb88c:	000bdcac 	.word	0x000bdcac
   bb890:	000bd726 	.word	0x000bd726
   bb894:	000bdf18 	.word	0x000bdf18
   bb898:	000bdef0 	.word	0x000bdef0
   bb89c:	7ff00000 	.word	0x7ff00000
   bb8a0:	7ca00000 	.word	0x7ca00000
   bb8a4:	7fefffff 	.word	0x7fefffff
   bb8a8:	f018 0310 	ands.w	r3, r8, #16
   bb8ac:	bf18      	it	ne
   bb8ae:	236a      	movne	r3, #106	; 0x6a
   bb8b0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bbc60 <_strtod_l+0x970>
   bb8b4:	9304      	str	r3, [sp, #16]
   bb8b6:	4650      	mov	r0, sl
   bb8b8:	4659      	mov	r1, fp
   bb8ba:	2300      	movs	r3, #0
   bb8bc:	f018 0f01 	tst.w	r8, #1
   bb8c0:	d004      	beq.n	bb8cc <_strtod_l+0x5dc>
   bb8c2:	e9d9 2300 	ldrd	r2, r3, [r9]
   bb8c6:	f7ff f8ef 	bl	baaa8 <__aeabi_dmul>
   bb8ca:	2301      	movs	r3, #1
   bb8cc:	ea5f 0868 	movs.w	r8, r8, asr #1
   bb8d0:	f109 0908 	add.w	r9, r9, #8
   bb8d4:	d1f2      	bne.n	bb8bc <_strtod_l+0x5cc>
   bb8d6:	b10b      	cbz	r3, bb8dc <_strtod_l+0x5ec>
   bb8d8:	4682      	mov	sl, r0
   bb8da:	468b      	mov	fp, r1
   bb8dc:	9b04      	ldr	r3, [sp, #16]
   bb8de:	b1c3      	cbz	r3, bb912 <_strtod_l+0x622>
   bb8e0:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bb8e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bb8e8:	2b00      	cmp	r3, #0
   bb8ea:	4659      	mov	r1, fp
   bb8ec:	dd11      	ble.n	bb912 <_strtod_l+0x622>
   bb8ee:	2b1f      	cmp	r3, #31
   bb8f0:	f340 8124 	ble.w	bbb3c <_strtod_l+0x84c>
   bb8f4:	2b34      	cmp	r3, #52	; 0x34
   bb8f6:	bfde      	ittt	le
   bb8f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bb8fc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   bb900:	fa03 f202 	lslle.w	r2, r3, r2
   bb904:	f04f 0a00 	mov.w	sl, #0
   bb908:	bfcc      	ite	gt
   bb90a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bb90e:	ea02 0b01 	andle.w	fp, r2, r1
   bb912:	2200      	movs	r2, #0
   bb914:	2300      	movs	r3, #0
   bb916:	4650      	mov	r0, sl
   bb918:	4659      	mov	r1, fp
   bb91a:	f7ff fb2d 	bl	baf78 <__aeabi_dcmpeq>
   bb91e:	2800      	cmp	r0, #0
   bb920:	d1a2      	bne.n	bb868 <_strtod_l+0x578>
   bb922:	9b07      	ldr	r3, [sp, #28]
   bb924:	9300      	str	r3, [sp, #0]
   bb926:	9908      	ldr	r1, [sp, #32]
   bb928:	462b      	mov	r3, r5
   bb92a:	463a      	mov	r2, r7
   bb92c:	4620      	mov	r0, r4
   bb92e:	f001 f85d 	bl	bc9ec <__s2b>
   bb932:	9007      	str	r0, [sp, #28]
   bb934:	2800      	cmp	r0, #0
   bb936:	f43f af1f 	beq.w	bb778 <_strtod_l+0x488>
   bb93a:	9b05      	ldr	r3, [sp, #20]
   bb93c:	1b9e      	subs	r6, r3, r6
   bb93e:	9b06      	ldr	r3, [sp, #24]
   bb940:	2b00      	cmp	r3, #0
   bb942:	bfb4      	ite	lt
   bb944:	4633      	movlt	r3, r6
   bb946:	2300      	movge	r3, #0
   bb948:	930c      	str	r3, [sp, #48]	; 0x30
   bb94a:	9b06      	ldr	r3, [sp, #24]
   bb94c:	2500      	movs	r5, #0
   bb94e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bb952:	9312      	str	r3, [sp, #72]	; 0x48
   bb954:	462e      	mov	r6, r5
   bb956:	9b07      	ldr	r3, [sp, #28]
   bb958:	4620      	mov	r0, r4
   bb95a:	6859      	ldr	r1, [r3, #4]
   bb95c:	f000 ff9e 	bl	bc89c <_Balloc>
   bb960:	9005      	str	r0, [sp, #20]
   bb962:	2800      	cmp	r0, #0
   bb964:	f43f af0c 	beq.w	bb780 <_strtod_l+0x490>
   bb968:	9b07      	ldr	r3, [sp, #28]
   bb96a:	691a      	ldr	r2, [r3, #16]
   bb96c:	3202      	adds	r2, #2
   bb96e:	f103 010c 	add.w	r1, r3, #12
   bb972:	0092      	lsls	r2, r2, #2
   bb974:	300c      	adds	r0, #12
   bb976:	f7ff fbef 	bl	bb158 <memcpy>
   bb97a:	ec4b ab10 	vmov	d0, sl, fp
   bb97e:	aa1a      	add	r2, sp, #104	; 0x68
   bb980:	a919      	add	r1, sp, #100	; 0x64
   bb982:	4620      	mov	r0, r4
   bb984:	f001 fb78 	bl	bd078 <__d2b>
   bb988:	ec4b ab18 	vmov	d8, sl, fp
   bb98c:	9018      	str	r0, [sp, #96]	; 0x60
   bb98e:	2800      	cmp	r0, #0
   bb990:	f43f aef6 	beq.w	bb780 <_strtod_l+0x490>
   bb994:	2101      	movs	r1, #1
   bb996:	4620      	mov	r0, r4
   bb998:	f001 f8c2 	bl	bcb20 <__i2b>
   bb99c:	4606      	mov	r6, r0
   bb99e:	2800      	cmp	r0, #0
   bb9a0:	f43f aeee 	beq.w	bb780 <_strtod_l+0x490>
   bb9a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bb9a6:	9904      	ldr	r1, [sp, #16]
   bb9a8:	2b00      	cmp	r3, #0
   bb9aa:	bfab      	itete	ge
   bb9ac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bb9ae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bb9b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bb9b2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bb9b6:	bfac      	ite	ge
   bb9b8:	eb03 0902 	addge.w	r9, r3, r2
   bb9bc:	1ad7      	sublt	r7, r2, r3
   bb9be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bb9c0:	eba3 0801 	sub.w	r8, r3, r1
   bb9c4:	4490      	add	r8, r2
   bb9c6:	4ba1      	ldr	r3, [pc, #644]	; (bbc4c <_strtod_l+0x95c>)
   bb9c8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bb9cc:	4598      	cmp	r8, r3
   bb9ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bb9d2:	f280 80c7 	bge.w	bbb64 <_strtod_l+0x874>
   bb9d6:	eba3 0308 	sub.w	r3, r3, r8
   bb9da:	2b1f      	cmp	r3, #31
   bb9dc:	eba2 0203 	sub.w	r2, r2, r3
   bb9e0:	f04f 0101 	mov.w	r1, #1
   bb9e4:	f300 80b1 	bgt.w	bbb4a <_strtod_l+0x85a>
   bb9e8:	fa01 f303 	lsl.w	r3, r1, r3
   bb9ec:	930d      	str	r3, [sp, #52]	; 0x34
   bb9ee:	2300      	movs	r3, #0
   bb9f0:	9308      	str	r3, [sp, #32]
   bb9f2:	eb09 0802 	add.w	r8, r9, r2
   bb9f6:	9b04      	ldr	r3, [sp, #16]
   bb9f8:	45c1      	cmp	r9, r8
   bb9fa:	4417      	add	r7, r2
   bb9fc:	441f      	add	r7, r3
   bb9fe:	464b      	mov	r3, r9
   bba00:	bfa8      	it	ge
   bba02:	4643      	movge	r3, r8
   bba04:	42bb      	cmp	r3, r7
   bba06:	bfa8      	it	ge
   bba08:	463b      	movge	r3, r7
   bba0a:	2b00      	cmp	r3, #0
   bba0c:	bfc2      	ittt	gt
   bba0e:	eba8 0803 	subgt.w	r8, r8, r3
   bba12:	1aff      	subgt	r7, r7, r3
   bba14:	eba9 0903 	subgt.w	r9, r9, r3
   bba18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bba1a:	2b00      	cmp	r3, #0
   bba1c:	dd17      	ble.n	bba4e <_strtod_l+0x75e>
   bba1e:	4631      	mov	r1, r6
   bba20:	461a      	mov	r2, r3
   bba22:	4620      	mov	r0, r4
   bba24:	f001 f93c 	bl	bcca0 <__pow5mult>
   bba28:	4606      	mov	r6, r0
   bba2a:	2800      	cmp	r0, #0
   bba2c:	f43f aea8 	beq.w	bb780 <_strtod_l+0x490>
   bba30:	4601      	mov	r1, r0
   bba32:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bba34:	4620      	mov	r0, r4
   bba36:	f001 f889 	bl	bcb4c <__multiply>
   bba3a:	900b      	str	r0, [sp, #44]	; 0x2c
   bba3c:	2800      	cmp	r0, #0
   bba3e:	f43f ae9f 	beq.w	bb780 <_strtod_l+0x490>
   bba42:	9918      	ldr	r1, [sp, #96]	; 0x60
   bba44:	4620      	mov	r0, r4
   bba46:	f000 ff69 	bl	bc91c <_Bfree>
   bba4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bba4c:	9318      	str	r3, [sp, #96]	; 0x60
   bba4e:	f1b8 0f00 	cmp.w	r8, #0
   bba52:	f300 808c 	bgt.w	bbb6e <_strtod_l+0x87e>
   bba56:	9b06      	ldr	r3, [sp, #24]
   bba58:	2b00      	cmp	r3, #0
   bba5a:	dd08      	ble.n	bba6e <_strtod_l+0x77e>
   bba5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bba5e:	9905      	ldr	r1, [sp, #20]
   bba60:	4620      	mov	r0, r4
   bba62:	f001 f91d 	bl	bcca0 <__pow5mult>
   bba66:	9005      	str	r0, [sp, #20]
   bba68:	2800      	cmp	r0, #0
   bba6a:	f43f ae89 	beq.w	bb780 <_strtod_l+0x490>
   bba6e:	2f00      	cmp	r7, #0
   bba70:	dd08      	ble.n	bba84 <_strtod_l+0x794>
   bba72:	9905      	ldr	r1, [sp, #20]
   bba74:	463a      	mov	r2, r7
   bba76:	4620      	mov	r0, r4
   bba78:	f001 f96c 	bl	bcd54 <__lshift>
   bba7c:	9005      	str	r0, [sp, #20]
   bba7e:	2800      	cmp	r0, #0
   bba80:	f43f ae7e 	beq.w	bb780 <_strtod_l+0x490>
   bba84:	f1b9 0f00 	cmp.w	r9, #0
   bba88:	dd08      	ble.n	bba9c <_strtod_l+0x7ac>
   bba8a:	4631      	mov	r1, r6
   bba8c:	464a      	mov	r2, r9
   bba8e:	4620      	mov	r0, r4
   bba90:	f001 f960 	bl	bcd54 <__lshift>
   bba94:	4606      	mov	r6, r0
   bba96:	2800      	cmp	r0, #0
   bba98:	f43f ae72 	beq.w	bb780 <_strtod_l+0x490>
   bba9c:	9a05      	ldr	r2, [sp, #20]
   bba9e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbaa0:	4620      	mov	r0, r4
   bbaa2:	f001 f9e3 	bl	bce6c <__mdiff>
   bbaa6:	4605      	mov	r5, r0
   bbaa8:	2800      	cmp	r0, #0
   bbaaa:	f43f ae69 	beq.w	bb780 <_strtod_l+0x490>
   bbaae:	68c3      	ldr	r3, [r0, #12]
   bbab0:	930b      	str	r3, [sp, #44]	; 0x2c
   bbab2:	2300      	movs	r3, #0
   bbab4:	60c3      	str	r3, [r0, #12]
   bbab6:	4631      	mov	r1, r6
   bbab8:	f001 f9bc 	bl	bce34 <__mcmp>
   bbabc:	2800      	cmp	r0, #0
   bbabe:	da60      	bge.n	bbb82 <_strtod_l+0x892>
   bbac0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbac2:	ea53 030a 	orrs.w	r3, r3, sl
   bbac6:	f040 8082 	bne.w	bbbce <_strtod_l+0x8de>
   bbaca:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bbace:	2b00      	cmp	r3, #0
   bbad0:	d17d      	bne.n	bbbce <_strtod_l+0x8de>
   bbad2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bbad6:	0d1b      	lsrs	r3, r3, #20
   bbad8:	051b      	lsls	r3, r3, #20
   bbada:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bbade:	d976      	bls.n	bbbce <_strtod_l+0x8de>
   bbae0:	696b      	ldr	r3, [r5, #20]
   bbae2:	b913      	cbnz	r3, bbaea <_strtod_l+0x7fa>
   bbae4:	692b      	ldr	r3, [r5, #16]
   bbae6:	2b01      	cmp	r3, #1
   bbae8:	dd71      	ble.n	bbbce <_strtod_l+0x8de>
   bbaea:	4629      	mov	r1, r5
   bbaec:	2201      	movs	r2, #1
   bbaee:	4620      	mov	r0, r4
   bbaf0:	f001 f930 	bl	bcd54 <__lshift>
   bbaf4:	4631      	mov	r1, r6
   bbaf6:	4605      	mov	r5, r0
   bbaf8:	f001 f99c 	bl	bce34 <__mcmp>
   bbafc:	2800      	cmp	r0, #0
   bbafe:	dd66      	ble.n	bbbce <_strtod_l+0x8de>
   bbb00:	9904      	ldr	r1, [sp, #16]
   bbb02:	4a53      	ldr	r2, [pc, #332]	; (bbc50 <_strtod_l+0x960>)
   bbb04:	465b      	mov	r3, fp
   bbb06:	2900      	cmp	r1, #0
   bbb08:	f000 8081 	beq.w	bbc0e <_strtod_l+0x91e>
   bbb0c:	ea02 010b 	and.w	r1, r2, fp
   bbb10:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bbb14:	dc7b      	bgt.n	bbc0e <_strtod_l+0x91e>
   bbb16:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bbb1a:	f77f aea9 	ble.w	bb870 <_strtod_l+0x580>
   bbb1e:	4b4d      	ldr	r3, [pc, #308]	; (bbc54 <_strtod_l+0x964>)
   bbb20:	4650      	mov	r0, sl
   bbb22:	4659      	mov	r1, fp
   bbb24:	2200      	movs	r2, #0
   bbb26:	f7fe ffbf 	bl	baaa8 <__aeabi_dmul>
   bbb2a:	460b      	mov	r3, r1
   bbb2c:	4303      	orrs	r3, r0
   bbb2e:	bf08      	it	eq
   bbb30:	2322      	moveq	r3, #34	; 0x22
   bbb32:	4682      	mov	sl, r0
   bbb34:	468b      	mov	fp, r1
   bbb36:	bf08      	it	eq
   bbb38:	6023      	streq	r3, [r4, #0]
   bbb3a:	e62b      	b.n	bb794 <_strtod_l+0x4a4>
   bbb3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbb40:	fa02 f303 	lsl.w	r3, r2, r3
   bbb44:	ea03 0a0a 	and.w	sl, r3, sl
   bbb48:	e6e3      	b.n	bb912 <_strtod_l+0x622>
   bbb4a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bbb4e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bbb52:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bbb56:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bbb5a:	fa01 f308 	lsl.w	r3, r1, r8
   bbb5e:	9308      	str	r3, [sp, #32]
   bbb60:	910d      	str	r1, [sp, #52]	; 0x34
   bbb62:	e746      	b.n	bb9f2 <_strtod_l+0x702>
   bbb64:	2300      	movs	r3, #0
   bbb66:	9308      	str	r3, [sp, #32]
   bbb68:	2301      	movs	r3, #1
   bbb6a:	930d      	str	r3, [sp, #52]	; 0x34
   bbb6c:	e741      	b.n	bb9f2 <_strtod_l+0x702>
   bbb6e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbb70:	4642      	mov	r2, r8
   bbb72:	4620      	mov	r0, r4
   bbb74:	f001 f8ee 	bl	bcd54 <__lshift>
   bbb78:	9018      	str	r0, [sp, #96]	; 0x60
   bbb7a:	2800      	cmp	r0, #0
   bbb7c:	f47f af6b 	bne.w	bba56 <_strtod_l+0x766>
   bbb80:	e5fe      	b.n	bb780 <_strtod_l+0x490>
   bbb82:	465f      	mov	r7, fp
   bbb84:	d16e      	bne.n	bbc64 <_strtod_l+0x974>
   bbb86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bbb88:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bbb8c:	b342      	cbz	r2, bbbe0 <_strtod_l+0x8f0>
   bbb8e:	4a32      	ldr	r2, [pc, #200]	; (bbc58 <_strtod_l+0x968>)
   bbb90:	4293      	cmp	r3, r2
   bbb92:	d128      	bne.n	bbbe6 <_strtod_l+0x8f6>
   bbb94:	9b04      	ldr	r3, [sp, #16]
   bbb96:	4651      	mov	r1, sl
   bbb98:	b1eb      	cbz	r3, bbbd6 <_strtod_l+0x8e6>
   bbb9a:	4b2d      	ldr	r3, [pc, #180]	; (bbc50 <_strtod_l+0x960>)
   bbb9c:	403b      	ands	r3, r7
   bbb9e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bbba2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbba6:	d819      	bhi.n	bbbdc <_strtod_l+0x8ec>
   bbba8:	0d1b      	lsrs	r3, r3, #20
   bbbaa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bbbae:	fa02 f303 	lsl.w	r3, r2, r3
   bbbb2:	4299      	cmp	r1, r3
   bbbb4:	d117      	bne.n	bbbe6 <_strtod_l+0x8f6>
   bbbb6:	4b29      	ldr	r3, [pc, #164]	; (bbc5c <_strtod_l+0x96c>)
   bbbb8:	429f      	cmp	r7, r3
   bbbba:	d102      	bne.n	bbbc2 <_strtod_l+0x8d2>
   bbbbc:	3101      	adds	r1, #1
   bbbbe:	f43f addf 	beq.w	bb780 <_strtod_l+0x490>
   bbbc2:	4b23      	ldr	r3, [pc, #140]	; (bbc50 <_strtod_l+0x960>)
   bbbc4:	403b      	ands	r3, r7
   bbbc6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bbbca:	f04f 0a00 	mov.w	sl, #0
   bbbce:	9b04      	ldr	r3, [sp, #16]
   bbbd0:	2b00      	cmp	r3, #0
   bbbd2:	d1a4      	bne.n	bbb1e <_strtod_l+0x82e>
   bbbd4:	e5de      	b.n	bb794 <_strtod_l+0x4a4>
   bbbd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bbbda:	e7ea      	b.n	bbbb2 <_strtod_l+0x8c2>
   bbbdc:	4613      	mov	r3, r2
   bbbde:	e7e8      	b.n	bbbb2 <_strtod_l+0x8c2>
   bbbe0:	ea53 030a 	orrs.w	r3, r3, sl
   bbbe4:	d08c      	beq.n	bbb00 <_strtod_l+0x810>
   bbbe6:	9b08      	ldr	r3, [sp, #32]
   bbbe8:	b1db      	cbz	r3, bbc22 <_strtod_l+0x932>
   bbbea:	423b      	tst	r3, r7
   bbbec:	d0ef      	beq.n	bbbce <_strtod_l+0x8de>
   bbbee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbbf0:	9a04      	ldr	r2, [sp, #16]
   bbbf2:	4650      	mov	r0, sl
   bbbf4:	4659      	mov	r1, fp
   bbbf6:	b1c3      	cbz	r3, bbc2a <_strtod_l+0x93a>
   bbbf8:	f7ff fb5c 	bl	bb2b4 <sulp>
   bbbfc:	4602      	mov	r2, r0
   bbbfe:	460b      	mov	r3, r1
   bbc00:	ec51 0b18 	vmov	r0, r1, d8
   bbc04:	f7fe fd9a 	bl	ba73c <__adddf3>
   bbc08:	4682      	mov	sl, r0
   bbc0a:	468b      	mov	fp, r1
   bbc0c:	e7df      	b.n	bbbce <_strtod_l+0x8de>
   bbc0e:	4013      	ands	r3, r2
   bbc10:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bbc14:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bbc18:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bbc1c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bbc20:	e7d5      	b.n	bbbce <_strtod_l+0x8de>
   bbc22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bbc24:	ea13 0f0a 	tst.w	r3, sl
   bbc28:	e7e0      	b.n	bbbec <_strtod_l+0x8fc>
   bbc2a:	f7ff fb43 	bl	bb2b4 <sulp>
   bbc2e:	4602      	mov	r2, r0
   bbc30:	460b      	mov	r3, r1
   bbc32:	ec51 0b18 	vmov	r0, r1, d8
   bbc36:	f7fe fd7f 	bl	ba738 <__aeabi_dsub>
   bbc3a:	2200      	movs	r2, #0
   bbc3c:	2300      	movs	r3, #0
   bbc3e:	4682      	mov	sl, r0
   bbc40:	468b      	mov	fp, r1
   bbc42:	f7ff f999 	bl	baf78 <__aeabi_dcmpeq>
   bbc46:	2800      	cmp	r0, #0
   bbc48:	d0c1      	beq.n	bbbce <_strtod_l+0x8de>
   bbc4a:	e611      	b.n	bb870 <_strtod_l+0x580>
   bbc4c:	fffffc02 	.word	0xfffffc02
   bbc50:	7ff00000 	.word	0x7ff00000
   bbc54:	39500000 	.word	0x39500000
   bbc58:	000fffff 	.word	0x000fffff
   bbc5c:	7fefffff 	.word	0x7fefffff
   bbc60:	000bdce0 	.word	0x000bdce0
   bbc64:	4631      	mov	r1, r6
   bbc66:	4628      	mov	r0, r5
   bbc68:	f001 fa62 	bl	bd130 <__ratio>
   bbc6c:	ec59 8b10 	vmov	r8, r9, d0
   bbc70:	ee10 0a10 	vmov	r0, s0
   bbc74:	2200      	movs	r2, #0
   bbc76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bbc7a:	4649      	mov	r1, r9
   bbc7c:	f7ff f990 	bl	bafa0 <__aeabi_dcmple>
   bbc80:	2800      	cmp	r0, #0
   bbc82:	d07a      	beq.n	bbd7a <_strtod_l+0xa8a>
   bbc84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbc86:	2b00      	cmp	r3, #0
   bbc88:	d04a      	beq.n	bbd20 <_strtod_l+0xa30>
   bbc8a:	4b95      	ldr	r3, [pc, #596]	; (bbee0 <_strtod_l+0xbf0>)
   bbc8c:	2200      	movs	r2, #0
   bbc8e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bbc92:	f8df 924c 	ldr.w	r9, [pc, #588]	; bbee0 <_strtod_l+0xbf0>
   bbc96:	f04f 0800 	mov.w	r8, #0
   bbc9a:	4b92      	ldr	r3, [pc, #584]	; (bbee4 <_strtod_l+0xbf4>)
   bbc9c:	403b      	ands	r3, r7
   bbc9e:	930d      	str	r3, [sp, #52]	; 0x34
   bbca0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bbca2:	4b91      	ldr	r3, [pc, #580]	; (bbee8 <_strtod_l+0xbf8>)
   bbca4:	429a      	cmp	r2, r3
   bbca6:	f040 80b0 	bne.w	bbe0a <_strtod_l+0xb1a>
   bbcaa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bbcae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bbcb2:	ec4b ab10 	vmov	d0, sl, fp
   bbcb6:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bbcba:	f001 f961 	bl	bcf80 <__ulp>
   bbcbe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bbcc2:	ec53 2b10 	vmov	r2, r3, d0
   bbcc6:	f7fe feef 	bl	baaa8 <__aeabi_dmul>
   bbcca:	4652      	mov	r2, sl
   bbccc:	465b      	mov	r3, fp
   bbcce:	f7fe fd35 	bl	ba73c <__adddf3>
   bbcd2:	460b      	mov	r3, r1
   bbcd4:	4983      	ldr	r1, [pc, #524]	; (bbee4 <_strtod_l+0xbf4>)
   bbcd6:	4a85      	ldr	r2, [pc, #532]	; (bbeec <_strtod_l+0xbfc>)
   bbcd8:	4019      	ands	r1, r3
   bbcda:	4291      	cmp	r1, r2
   bbcdc:	4682      	mov	sl, r0
   bbcde:	d960      	bls.n	bbda2 <_strtod_l+0xab2>
   bbce0:	ee18 3a90 	vmov	r3, s17
   bbce4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bbce8:	4293      	cmp	r3, r2
   bbcea:	d104      	bne.n	bbcf6 <_strtod_l+0xa06>
   bbcec:	ee18 3a10 	vmov	r3, s16
   bbcf0:	3301      	adds	r3, #1
   bbcf2:	f43f ad45 	beq.w	bb780 <_strtod_l+0x490>
   bbcf6:	f8df b200 	ldr.w	fp, [pc, #512]	; bbef8 <_strtod_l+0xc08>
   bbcfa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bbcfe:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbd00:	4620      	mov	r0, r4
   bbd02:	f000 fe0b 	bl	bc91c <_Bfree>
   bbd06:	9905      	ldr	r1, [sp, #20]
   bbd08:	4620      	mov	r0, r4
   bbd0a:	f000 fe07 	bl	bc91c <_Bfree>
   bbd0e:	4631      	mov	r1, r6
   bbd10:	4620      	mov	r0, r4
   bbd12:	f000 fe03 	bl	bc91c <_Bfree>
   bbd16:	4629      	mov	r1, r5
   bbd18:	4620      	mov	r0, r4
   bbd1a:	f000 fdff 	bl	bc91c <_Bfree>
   bbd1e:	e61a      	b.n	bb956 <_strtod_l+0x666>
   bbd20:	f1ba 0f00 	cmp.w	sl, #0
   bbd24:	d11b      	bne.n	bbd5e <_strtod_l+0xa6e>
   bbd26:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bbd2a:	b9f3      	cbnz	r3, bbd6a <_strtod_l+0xa7a>
   bbd2c:	4b6c      	ldr	r3, [pc, #432]	; (bbee0 <_strtod_l+0xbf0>)
   bbd2e:	2200      	movs	r2, #0
   bbd30:	4640      	mov	r0, r8
   bbd32:	4649      	mov	r1, r9
   bbd34:	f7ff f92a 	bl	baf8c <__aeabi_dcmplt>
   bbd38:	b9d0      	cbnz	r0, bbd70 <_strtod_l+0xa80>
   bbd3a:	4640      	mov	r0, r8
   bbd3c:	4649      	mov	r1, r9
   bbd3e:	4b6c      	ldr	r3, [pc, #432]	; (bbef0 <_strtod_l+0xc00>)
   bbd40:	2200      	movs	r2, #0
   bbd42:	f7fe feb1 	bl	baaa8 <__aeabi_dmul>
   bbd46:	4680      	mov	r8, r0
   bbd48:	4689      	mov	r9, r1
   bbd4a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bbd4e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bbd52:	9315      	str	r3, [sp, #84]	; 0x54
   bbd54:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bbd58:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bbd5c:	e79d      	b.n	bbc9a <_strtod_l+0x9aa>
   bbd5e:	f1ba 0f01 	cmp.w	sl, #1
   bbd62:	d102      	bne.n	bbd6a <_strtod_l+0xa7a>
   bbd64:	2f00      	cmp	r7, #0
   bbd66:	f43f ad83 	beq.w	bb870 <_strtod_l+0x580>
   bbd6a:	4b62      	ldr	r3, [pc, #392]	; (bbef4 <_strtod_l+0xc04>)
   bbd6c:	2200      	movs	r2, #0
   bbd6e:	e78e      	b.n	bbc8e <_strtod_l+0x99e>
   bbd70:	f8df 917c 	ldr.w	r9, [pc, #380]	; bbef0 <_strtod_l+0xc00>
   bbd74:	f04f 0800 	mov.w	r8, #0
   bbd78:	e7e7      	b.n	bbd4a <_strtod_l+0xa5a>
   bbd7a:	4b5d      	ldr	r3, [pc, #372]	; (bbef0 <_strtod_l+0xc00>)
   bbd7c:	4640      	mov	r0, r8
   bbd7e:	4649      	mov	r1, r9
   bbd80:	2200      	movs	r2, #0
   bbd82:	f7fe fe91 	bl	baaa8 <__aeabi_dmul>
   bbd86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbd88:	4680      	mov	r8, r0
   bbd8a:	4689      	mov	r9, r1
   bbd8c:	b933      	cbnz	r3, bbd9c <_strtod_l+0xaac>
   bbd8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bbd92:	900e      	str	r0, [sp, #56]	; 0x38
   bbd94:	930f      	str	r3, [sp, #60]	; 0x3c
   bbd96:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bbd9a:	e7dd      	b.n	bbd58 <_strtod_l+0xa68>
   bbd9c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bbda0:	e7f9      	b.n	bbd96 <_strtod_l+0xaa6>
   bbda2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bbda6:	9b04      	ldr	r3, [sp, #16]
   bbda8:	2b00      	cmp	r3, #0
   bbdaa:	d1a8      	bne.n	bbcfe <_strtod_l+0xa0e>
   bbdac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bbdb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bbdb2:	0d1b      	lsrs	r3, r3, #20
   bbdb4:	051b      	lsls	r3, r3, #20
   bbdb6:	429a      	cmp	r2, r3
   bbdb8:	d1a1      	bne.n	bbcfe <_strtod_l+0xa0e>
   bbdba:	4640      	mov	r0, r8
   bbdbc:	4649      	mov	r1, r9
   bbdbe:	f001 fa5b 	bl	bd278 <__aeabi_d2lz>
   bbdc2:	f7fe fe43 	bl	baa4c <__aeabi_l2d>
   bbdc6:	4602      	mov	r2, r0
   bbdc8:	460b      	mov	r3, r1
   bbdca:	4640      	mov	r0, r8
   bbdcc:	4649      	mov	r1, r9
   bbdce:	f7fe fcb3 	bl	ba738 <__aeabi_dsub>
   bbdd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bbdd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bbdd8:	ea43 030a 	orr.w	r3, r3, sl
   bbddc:	4313      	orrs	r3, r2
   bbdde:	4680      	mov	r8, r0
   bbde0:	4689      	mov	r9, r1
   bbde2:	d055      	beq.n	bbe90 <_strtod_l+0xba0>
   bbde4:	a336      	add	r3, pc, #216	; (adr r3, bbec0 <_strtod_l+0xbd0>)
   bbde6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbdea:	f7ff f8cf 	bl	baf8c <__aeabi_dcmplt>
   bbdee:	2800      	cmp	r0, #0
   bbdf0:	f47f acd0 	bne.w	bb794 <_strtod_l+0x4a4>
   bbdf4:	a334      	add	r3, pc, #208	; (adr r3, bbec8 <_strtod_l+0xbd8>)
   bbdf6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbdfa:	4640      	mov	r0, r8
   bbdfc:	4649      	mov	r1, r9
   bbdfe:	f7ff f8e3 	bl	bafc8 <__aeabi_dcmpgt>
   bbe02:	2800      	cmp	r0, #0
   bbe04:	f43f af7b 	beq.w	bbcfe <_strtod_l+0xa0e>
   bbe08:	e4c4      	b.n	bb794 <_strtod_l+0x4a4>
   bbe0a:	9b04      	ldr	r3, [sp, #16]
   bbe0c:	b333      	cbz	r3, bbe5c <_strtod_l+0xb6c>
   bbe0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bbe10:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bbe14:	d822      	bhi.n	bbe5c <_strtod_l+0xb6c>
   bbe16:	a32e      	add	r3, pc, #184	; (adr r3, bbed0 <_strtod_l+0xbe0>)
   bbe18:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbe1c:	4640      	mov	r0, r8
   bbe1e:	4649      	mov	r1, r9
   bbe20:	f7ff f8be 	bl	bafa0 <__aeabi_dcmple>
   bbe24:	b1a0      	cbz	r0, bbe50 <_strtod_l+0xb60>
   bbe26:	4649      	mov	r1, r9
   bbe28:	4640      	mov	r0, r8
   bbe2a:	f7ff f8ed 	bl	bb008 <__aeabi_d2uiz>
   bbe2e:	2801      	cmp	r0, #1
   bbe30:	bf38      	it	cc
   bbe32:	2001      	movcc	r0, #1
   bbe34:	f7fe fdbe 	bl	ba9b4 <__aeabi_ui2d>
   bbe38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbe3a:	4680      	mov	r8, r0
   bbe3c:	4689      	mov	r9, r1
   bbe3e:	bb23      	cbnz	r3, bbe8a <_strtod_l+0xb9a>
   bbe40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bbe44:	9010      	str	r0, [sp, #64]	; 0x40
   bbe46:	9311      	str	r3, [sp, #68]	; 0x44
   bbe48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bbe4c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bbe50:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bbe52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bbe54:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bbe58:	1a9b      	subs	r3, r3, r2
   bbe5a:	9309      	str	r3, [sp, #36]	; 0x24
   bbe5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bbe60:	eeb0 0a48 	vmov.f32	s0, s16
   bbe64:	eef0 0a68 	vmov.f32	s1, s17
   bbe68:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bbe6c:	f001 f888 	bl	bcf80 <__ulp>
   bbe70:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bbe74:	ec53 2b10 	vmov	r2, r3, d0
   bbe78:	f7fe fe16 	bl	baaa8 <__aeabi_dmul>
   bbe7c:	ec53 2b18 	vmov	r2, r3, d8
   bbe80:	f7fe fc5c 	bl	ba73c <__adddf3>
   bbe84:	4682      	mov	sl, r0
   bbe86:	468b      	mov	fp, r1
   bbe88:	e78d      	b.n	bbda6 <_strtod_l+0xab6>
   bbe8a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bbe8e:	e7db      	b.n	bbe48 <_strtod_l+0xb58>
   bbe90:	a311      	add	r3, pc, #68	; (adr r3, bbed8 <_strtod_l+0xbe8>)
   bbe92:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbe96:	f7ff f879 	bl	baf8c <__aeabi_dcmplt>
   bbe9a:	e7b2      	b.n	bbe02 <_strtod_l+0xb12>
   bbe9c:	2300      	movs	r3, #0
   bbe9e:	930a      	str	r3, [sp, #40]	; 0x28
   bbea0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bbea2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbea4:	6013      	str	r3, [r2, #0]
   bbea6:	f7ff ba6b 	b.w	bb380 <_strtod_l+0x90>
   bbeaa:	2a65      	cmp	r2, #101	; 0x65
   bbeac:	f43f ab5f 	beq.w	bb56e <_strtod_l+0x27e>
   bbeb0:	2a45      	cmp	r2, #69	; 0x45
   bbeb2:	f43f ab5c 	beq.w	bb56e <_strtod_l+0x27e>
   bbeb6:	2301      	movs	r3, #1
   bbeb8:	f7ff bb94 	b.w	bb5e4 <_strtod_l+0x2f4>
   bbebc:	f3af 8000 	nop.w
   bbec0:	94a03595 	.word	0x94a03595
   bbec4:	3fdfffff 	.word	0x3fdfffff
   bbec8:	35afe535 	.word	0x35afe535
   bbecc:	3fe00000 	.word	0x3fe00000
   bbed0:	ffc00000 	.word	0xffc00000
   bbed4:	41dfffff 	.word	0x41dfffff
   bbed8:	94a03595 	.word	0x94a03595
   bbedc:	3fcfffff 	.word	0x3fcfffff
   bbee0:	3ff00000 	.word	0x3ff00000
   bbee4:	7ff00000 	.word	0x7ff00000
   bbee8:	7fe00000 	.word	0x7fe00000
   bbeec:	7c9fffff 	.word	0x7c9fffff
   bbef0:	3fe00000 	.word	0x3fe00000
   bbef4:	bff00000 	.word	0xbff00000
   bbef8:	7fefffff 	.word	0x7fefffff

000bbefc <strtof>:
   bbefc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bbf00:	f8df 80ac 	ldr.w	r8, [pc, #172]	; bbfb0 <strtof+0xb4>
   bbf04:	4b26      	ldr	r3, [pc, #152]	; (bbfa0 <strtof+0xa4>)
   bbf06:	460a      	mov	r2, r1
   bbf08:	ed2d 8b02 	vpush	{d8}
   bbf0c:	4601      	mov	r1, r0
   bbf0e:	f8d8 0000 	ldr.w	r0, [r8]
   bbf12:	f7ff f9ed 	bl	bb2f0 <_strtod_l>
   bbf16:	ec55 4b10 	vmov	r4, r5, d0
   bbf1a:	ee10 2a10 	vmov	r2, s0
   bbf1e:	ee10 0a10 	vmov	r0, s0
   bbf22:	462b      	mov	r3, r5
   bbf24:	4629      	mov	r1, r5
   bbf26:	f7ff f859 	bl	bafdc <__aeabi_dcmpun>
   bbf2a:	b190      	cbz	r0, bbf52 <strtof+0x56>
   bbf2c:	2d00      	cmp	r5, #0
   bbf2e:	481d      	ldr	r0, [pc, #116]	; (bbfa4 <strtof+0xa8>)
   bbf30:	da09      	bge.n	bbf46 <strtof+0x4a>
   bbf32:	f001 f98d 	bl	bd250 <nanf>
   bbf36:	eeb1 8a40 	vneg.f32	s16, s0
   bbf3a:	eeb0 0a48 	vmov.f32	s0, s16
   bbf3e:	ecbd 8b02 	vpop	{d8}
   bbf42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bbf46:	ecbd 8b02 	vpop	{d8}
   bbf4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bbf4e:	f001 b97f 	b.w	bd250 <nanf>
   bbf52:	4620      	mov	r0, r4
   bbf54:	4629      	mov	r1, r5
   bbf56:	f7ff f877 	bl	bb048 <__aeabi_d2f>
   bbf5a:	ee08 0a10 	vmov	s16, r0
   bbf5e:	eddf 7a12 	vldr	s15, [pc, #72]	; bbfa8 <strtof+0xac>
   bbf62:	eeb0 7ac8 	vabs.f32	s14, s16
   bbf66:	eeb4 7a67 	vcmp.f32	s14, s15
   bbf6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bbf6e:	dde4      	ble.n	bbf3a <strtof+0x3e>
   bbf70:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   bbf74:	4b0d      	ldr	r3, [pc, #52]	; (bbfac <strtof+0xb0>)
   bbf76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbf7a:	4620      	mov	r0, r4
   bbf7c:	4639      	mov	r1, r7
   bbf7e:	f7ff f82d 	bl	bafdc <__aeabi_dcmpun>
   bbf82:	b940      	cbnz	r0, bbf96 <strtof+0x9a>
   bbf84:	4b09      	ldr	r3, [pc, #36]	; (bbfac <strtof+0xb0>)
   bbf86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbf8a:	4620      	mov	r0, r4
   bbf8c:	4639      	mov	r1, r7
   bbf8e:	f7ff f807 	bl	bafa0 <__aeabi_dcmple>
   bbf92:	2800      	cmp	r0, #0
   bbf94:	d0d1      	beq.n	bbf3a <strtof+0x3e>
   bbf96:	f8d8 3000 	ldr.w	r3, [r8]
   bbf9a:	2222      	movs	r2, #34	; 0x22
   bbf9c:	601a      	str	r2, [r3, #0]
   bbf9e:	e7cc      	b.n	bbf3a <strtof+0x3e>
   bbfa0:	20035394 	.word	0x20035394
   bbfa4:	000bd726 	.word	0x000bd726
   bbfa8:	7f7fffff 	.word	0x7f7fffff
   bbfac:	7fefffff 	.word	0x7fefffff
   bbfb0:	20035328 	.word	0x20035328

000bbfb4 <_strtol_l.constprop.0>:
   bbfb4:	2b01      	cmp	r3, #1
   bbfb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bbfba:	d001      	beq.n	bbfc0 <_strtol_l.constprop.0+0xc>
   bbfbc:	2b24      	cmp	r3, #36	; 0x24
   bbfbe:	d906      	bls.n	bbfce <_strtol_l.constprop.0+0x1a>
   bbfc0:	f7fb fdf8 	bl	b7bb4 <__errno>
   bbfc4:	2316      	movs	r3, #22
   bbfc6:	6003      	str	r3, [r0, #0]
   bbfc8:	2000      	movs	r0, #0
   bbfca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bbfce:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bc0b4 <_strtol_l.constprop.0+0x100>
   bbfd2:	460d      	mov	r5, r1
   bbfd4:	462e      	mov	r6, r5
   bbfd6:	f815 4b01 	ldrb.w	r4, [r5], #1
   bbfda:	f814 700c 	ldrb.w	r7, [r4, ip]
   bbfde:	f017 0708 	ands.w	r7, r7, #8
   bbfe2:	d1f7      	bne.n	bbfd4 <_strtol_l.constprop.0+0x20>
   bbfe4:	2c2d      	cmp	r4, #45	; 0x2d
   bbfe6:	d132      	bne.n	bc04e <_strtol_l.constprop.0+0x9a>
   bbfe8:	782c      	ldrb	r4, [r5, #0]
   bbfea:	2701      	movs	r7, #1
   bbfec:	1cb5      	adds	r5, r6, #2
   bbfee:	2b00      	cmp	r3, #0
   bbff0:	d05b      	beq.n	bc0aa <_strtol_l.constprop.0+0xf6>
   bbff2:	2b10      	cmp	r3, #16
   bbff4:	d109      	bne.n	bc00a <_strtol_l.constprop.0+0x56>
   bbff6:	2c30      	cmp	r4, #48	; 0x30
   bbff8:	d107      	bne.n	bc00a <_strtol_l.constprop.0+0x56>
   bbffa:	782c      	ldrb	r4, [r5, #0]
   bbffc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bc000:	2c58      	cmp	r4, #88	; 0x58
   bc002:	d14d      	bne.n	bc0a0 <_strtol_l.constprop.0+0xec>
   bc004:	786c      	ldrb	r4, [r5, #1]
   bc006:	2310      	movs	r3, #16
   bc008:	3502      	adds	r5, #2
   bc00a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bc00e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bc012:	f04f 0c00 	mov.w	ip, #0
   bc016:	fbb8 f9f3 	udiv	r9, r8, r3
   bc01a:	4666      	mov	r6, ip
   bc01c:	fb03 8a19 	mls	sl, r3, r9, r8
   bc020:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bc024:	f1be 0f09 	cmp.w	lr, #9
   bc028:	d816      	bhi.n	bc058 <_strtol_l.constprop.0+0xa4>
   bc02a:	4674      	mov	r4, lr
   bc02c:	42a3      	cmp	r3, r4
   bc02e:	dd24      	ble.n	bc07a <_strtol_l.constprop.0+0xc6>
   bc030:	f1bc 0f00 	cmp.w	ip, #0
   bc034:	db1e      	blt.n	bc074 <_strtol_l.constprop.0+0xc0>
   bc036:	45b1      	cmp	r9, r6
   bc038:	d31c      	bcc.n	bc074 <_strtol_l.constprop.0+0xc0>
   bc03a:	d101      	bne.n	bc040 <_strtol_l.constprop.0+0x8c>
   bc03c:	45a2      	cmp	sl, r4
   bc03e:	db19      	blt.n	bc074 <_strtol_l.constprop.0+0xc0>
   bc040:	fb06 4603 	mla	r6, r6, r3, r4
   bc044:	f04f 0c01 	mov.w	ip, #1
   bc048:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc04c:	e7e8      	b.n	bc020 <_strtol_l.constprop.0+0x6c>
   bc04e:	2c2b      	cmp	r4, #43	; 0x2b
   bc050:	bf04      	itt	eq
   bc052:	782c      	ldrbeq	r4, [r5, #0]
   bc054:	1cb5      	addeq	r5, r6, #2
   bc056:	e7ca      	b.n	bbfee <_strtol_l.constprop.0+0x3a>
   bc058:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bc05c:	f1be 0f19 	cmp.w	lr, #25
   bc060:	d801      	bhi.n	bc066 <_strtol_l.constprop.0+0xb2>
   bc062:	3c37      	subs	r4, #55	; 0x37
   bc064:	e7e2      	b.n	bc02c <_strtol_l.constprop.0+0x78>
   bc066:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bc06a:	f1be 0f19 	cmp.w	lr, #25
   bc06e:	d804      	bhi.n	bc07a <_strtol_l.constprop.0+0xc6>
   bc070:	3c57      	subs	r4, #87	; 0x57
   bc072:	e7db      	b.n	bc02c <_strtol_l.constprop.0+0x78>
   bc074:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bc078:	e7e6      	b.n	bc048 <_strtol_l.constprop.0+0x94>
   bc07a:	f1bc 0f00 	cmp.w	ip, #0
   bc07e:	da05      	bge.n	bc08c <_strtol_l.constprop.0+0xd8>
   bc080:	2322      	movs	r3, #34	; 0x22
   bc082:	6003      	str	r3, [r0, #0]
   bc084:	4646      	mov	r6, r8
   bc086:	b942      	cbnz	r2, bc09a <_strtol_l.constprop.0+0xe6>
   bc088:	4630      	mov	r0, r6
   bc08a:	e79e      	b.n	bbfca <_strtol_l.constprop.0+0x16>
   bc08c:	b107      	cbz	r7, bc090 <_strtol_l.constprop.0+0xdc>
   bc08e:	4276      	negs	r6, r6
   bc090:	2a00      	cmp	r2, #0
   bc092:	d0f9      	beq.n	bc088 <_strtol_l.constprop.0+0xd4>
   bc094:	f1bc 0f00 	cmp.w	ip, #0
   bc098:	d000      	beq.n	bc09c <_strtol_l.constprop.0+0xe8>
   bc09a:	1e69      	subs	r1, r5, #1
   bc09c:	6011      	str	r1, [r2, #0]
   bc09e:	e7f3      	b.n	bc088 <_strtol_l.constprop.0+0xd4>
   bc0a0:	2430      	movs	r4, #48	; 0x30
   bc0a2:	2b00      	cmp	r3, #0
   bc0a4:	d1b1      	bne.n	bc00a <_strtol_l.constprop.0+0x56>
   bc0a6:	2308      	movs	r3, #8
   bc0a8:	e7af      	b.n	bc00a <_strtol_l.constprop.0+0x56>
   bc0aa:	2c30      	cmp	r4, #48	; 0x30
   bc0ac:	d0a5      	beq.n	bbffa <_strtol_l.constprop.0+0x46>
   bc0ae:	230a      	movs	r3, #10
   bc0b0:	e7ab      	b.n	bc00a <_strtol_l.constprop.0+0x56>
   bc0b2:	bf00      	nop
   bc0b4:	000bdd09 	.word	0x000bdd09

000bc0b8 <strtol>:
   bc0b8:	4613      	mov	r3, r2
   bc0ba:	460a      	mov	r2, r1
   bc0bc:	4601      	mov	r1, r0
   bc0be:	4802      	ldr	r0, [pc, #8]	; (bc0c8 <strtol+0x10>)
   bc0c0:	6800      	ldr	r0, [r0, #0]
   bc0c2:	f7ff bf77 	b.w	bbfb4 <_strtol_l.constprop.0>
   bc0c6:	bf00      	nop
   bc0c8:	20035328 	.word	0x20035328

000bc0cc <__register_exitproc>:
   bc0cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc0d0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bc18c <__register_exitproc+0xc0>
   bc0d4:	4606      	mov	r6, r0
   bc0d6:	f8d8 0000 	ldr.w	r0, [r8]
   bc0da:	461f      	mov	r7, r3
   bc0dc:	460d      	mov	r5, r1
   bc0de:	4691      	mov	r9, r2
   bc0e0:	f000 fbc6 	bl	bc870 <__retarget_lock_acquire_recursive>
   bc0e4:	4b25      	ldr	r3, [pc, #148]	; (bc17c <__register_exitproc+0xb0>)
   bc0e6:	681c      	ldr	r4, [r3, #0]
   bc0e8:	b934      	cbnz	r4, bc0f8 <__register_exitproc+0x2c>
   bc0ea:	4c25      	ldr	r4, [pc, #148]	; (bc180 <__register_exitproc+0xb4>)
   bc0ec:	601c      	str	r4, [r3, #0]
   bc0ee:	4b25      	ldr	r3, [pc, #148]	; (bc184 <__register_exitproc+0xb8>)
   bc0f0:	b113      	cbz	r3, bc0f8 <__register_exitproc+0x2c>
   bc0f2:	681b      	ldr	r3, [r3, #0]
   bc0f4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bc0f8:	6863      	ldr	r3, [r4, #4]
   bc0fa:	2b1f      	cmp	r3, #31
   bc0fc:	dd07      	ble.n	bc10e <__register_exitproc+0x42>
   bc0fe:	f8d8 0000 	ldr.w	r0, [r8]
   bc102:	f000 fbb7 	bl	bc874 <__retarget_lock_release_recursive>
   bc106:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bc10a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc10e:	b34e      	cbz	r6, bc164 <__register_exitproc+0x98>
   bc110:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bc114:	b988      	cbnz	r0, bc13a <__register_exitproc+0x6e>
   bc116:	4b1c      	ldr	r3, [pc, #112]	; (bc188 <__register_exitproc+0xbc>)
   bc118:	b923      	cbnz	r3, bc124 <__register_exitproc+0x58>
   bc11a:	f8d8 0000 	ldr.w	r0, [r8]
   bc11e:	f000 fba8 	bl	bc872 <__retarget_lock_release>
   bc122:	e7f0      	b.n	bc106 <__register_exitproc+0x3a>
   bc124:	f44f 7084 	mov.w	r0, #264	; 0x108
   bc128:	f7fb fd0c 	bl	b7b44 <malloc>
   bc12c:	2800      	cmp	r0, #0
   bc12e:	d0f4      	beq.n	bc11a <__register_exitproc+0x4e>
   bc130:	2300      	movs	r3, #0
   bc132:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bc136:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bc13a:	6863      	ldr	r3, [r4, #4]
   bc13c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bc140:	2201      	movs	r2, #1
   bc142:	409a      	lsls	r2, r3
   bc144:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bc148:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bc14c:	4313      	orrs	r3, r2
   bc14e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bc152:	2e02      	cmp	r6, #2
   bc154:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bc158:	bf02      	ittt	eq
   bc15a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bc15e:	4313      	orreq	r3, r2
   bc160:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bc164:	6863      	ldr	r3, [r4, #4]
   bc166:	f8d8 0000 	ldr.w	r0, [r8]
   bc16a:	1c5a      	adds	r2, r3, #1
   bc16c:	3302      	adds	r3, #2
   bc16e:	6062      	str	r2, [r4, #4]
   bc170:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bc174:	f000 fb7e 	bl	bc874 <__retarget_lock_release_recursive>
   bc178:	2000      	movs	r0, #0
   bc17a:	e7c6      	b.n	bc10a <__register_exitproc+0x3e>
   bc17c:	2003e7e8 	.word	0x2003e7e8
   bc180:	2003e75c 	.word	0x2003e75c
   bc184:	00000000 	.word	0x00000000
   bc188:	000b7b45 	.word	0x000b7b45
   bc18c:	2003538c 	.word	0x2003538c

000bc190 <rshift>:
   bc190:	6903      	ldr	r3, [r0, #16]
   bc192:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bc196:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc19a:	ea4f 1261 	mov.w	r2, r1, asr #5
   bc19e:	f100 0414 	add.w	r4, r0, #20
   bc1a2:	dd45      	ble.n	bc230 <rshift+0xa0>
   bc1a4:	f011 011f 	ands.w	r1, r1, #31
   bc1a8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bc1ac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bc1b0:	d10c      	bne.n	bc1cc <rshift+0x3c>
   bc1b2:	f100 0710 	add.w	r7, r0, #16
   bc1b6:	4629      	mov	r1, r5
   bc1b8:	42b1      	cmp	r1, r6
   bc1ba:	d334      	bcc.n	bc226 <rshift+0x96>
   bc1bc:	1a9b      	subs	r3, r3, r2
   bc1be:	009b      	lsls	r3, r3, #2
   bc1c0:	1eea      	subs	r2, r5, #3
   bc1c2:	4296      	cmp	r6, r2
   bc1c4:	bf38      	it	cc
   bc1c6:	2300      	movcc	r3, #0
   bc1c8:	4423      	add	r3, r4
   bc1ca:	e015      	b.n	bc1f8 <rshift+0x68>
   bc1cc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bc1d0:	f1c1 0820 	rsb	r8, r1, #32
   bc1d4:	40cf      	lsrs	r7, r1
   bc1d6:	f105 0e04 	add.w	lr, r5, #4
   bc1da:	46a1      	mov	r9, r4
   bc1dc:	4576      	cmp	r6, lr
   bc1de:	46f4      	mov	ip, lr
   bc1e0:	d815      	bhi.n	bc20e <rshift+0x7e>
   bc1e2:	1a9a      	subs	r2, r3, r2
   bc1e4:	0092      	lsls	r2, r2, #2
   bc1e6:	3a04      	subs	r2, #4
   bc1e8:	3501      	adds	r5, #1
   bc1ea:	42ae      	cmp	r6, r5
   bc1ec:	bf38      	it	cc
   bc1ee:	2200      	movcc	r2, #0
   bc1f0:	18a3      	adds	r3, r4, r2
   bc1f2:	50a7      	str	r7, [r4, r2]
   bc1f4:	b107      	cbz	r7, bc1f8 <rshift+0x68>
   bc1f6:	3304      	adds	r3, #4
   bc1f8:	1b1a      	subs	r2, r3, r4
   bc1fa:	42a3      	cmp	r3, r4
   bc1fc:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bc200:	bf08      	it	eq
   bc202:	2300      	moveq	r3, #0
   bc204:	6102      	str	r2, [r0, #16]
   bc206:	bf08      	it	eq
   bc208:	6143      	streq	r3, [r0, #20]
   bc20a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bc20e:	f8dc c000 	ldr.w	ip, [ip]
   bc212:	fa0c fc08 	lsl.w	ip, ip, r8
   bc216:	ea4c 0707 	orr.w	r7, ip, r7
   bc21a:	f849 7b04 	str.w	r7, [r9], #4
   bc21e:	f85e 7b04 	ldr.w	r7, [lr], #4
   bc222:	40cf      	lsrs	r7, r1
   bc224:	e7da      	b.n	bc1dc <rshift+0x4c>
   bc226:	f851 cb04 	ldr.w	ip, [r1], #4
   bc22a:	f847 cf04 	str.w	ip, [r7, #4]!
   bc22e:	e7c3      	b.n	bc1b8 <rshift+0x28>
   bc230:	4623      	mov	r3, r4
   bc232:	e7e1      	b.n	bc1f8 <rshift+0x68>

000bc234 <__hexdig_fun>:
   bc234:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bc238:	2b09      	cmp	r3, #9
   bc23a:	d802      	bhi.n	bc242 <__hexdig_fun+0xe>
   bc23c:	3820      	subs	r0, #32
   bc23e:	b2c0      	uxtb	r0, r0
   bc240:	4770      	bx	lr
   bc242:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bc246:	2b05      	cmp	r3, #5
   bc248:	d801      	bhi.n	bc24e <__hexdig_fun+0x1a>
   bc24a:	3847      	subs	r0, #71	; 0x47
   bc24c:	e7f7      	b.n	bc23e <__hexdig_fun+0xa>
   bc24e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bc252:	2b05      	cmp	r3, #5
   bc254:	d801      	bhi.n	bc25a <__hexdig_fun+0x26>
   bc256:	3827      	subs	r0, #39	; 0x27
   bc258:	e7f1      	b.n	bc23e <__hexdig_fun+0xa>
   bc25a:	2000      	movs	r0, #0
   bc25c:	4770      	bx	lr
	...

000bc260 <__gethex>:
   bc260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc264:	ed2d 8b02 	vpush	{d8}
   bc268:	b089      	sub	sp, #36	; 0x24
   bc26a:	ee08 0a10 	vmov	s16, r0
   bc26e:	9304      	str	r3, [sp, #16]
   bc270:	4bb4      	ldr	r3, [pc, #720]	; (bc544 <__gethex+0x2e4>)
   bc272:	681b      	ldr	r3, [r3, #0]
   bc274:	9301      	str	r3, [sp, #4]
   bc276:	4618      	mov	r0, r3
   bc278:	468b      	mov	fp, r1
   bc27a:	4690      	mov	r8, r2
   bc27c:	f7fe ffdc 	bl	bb238 <strlen>
   bc280:	9b01      	ldr	r3, [sp, #4]
   bc282:	f8db 2000 	ldr.w	r2, [fp]
   bc286:	4403      	add	r3, r0
   bc288:	4682      	mov	sl, r0
   bc28a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bc28e:	9305      	str	r3, [sp, #20]
   bc290:	1c93      	adds	r3, r2, #2
   bc292:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bc296:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bc29a:	32fe      	adds	r2, #254	; 0xfe
   bc29c:	18d1      	adds	r1, r2, r3
   bc29e:	461f      	mov	r7, r3
   bc2a0:	f813 0b01 	ldrb.w	r0, [r3], #1
   bc2a4:	9100      	str	r1, [sp, #0]
   bc2a6:	2830      	cmp	r0, #48	; 0x30
   bc2a8:	d0f8      	beq.n	bc29c <__gethex+0x3c>
   bc2aa:	f7ff ffc3 	bl	bc234 <__hexdig_fun>
   bc2ae:	4604      	mov	r4, r0
   bc2b0:	2800      	cmp	r0, #0
   bc2b2:	d13a      	bne.n	bc32a <__gethex+0xca>
   bc2b4:	9901      	ldr	r1, [sp, #4]
   bc2b6:	4652      	mov	r2, sl
   bc2b8:	4638      	mov	r0, r7
   bc2ba:	f7fe ffc5 	bl	bb248 <strncmp>
   bc2be:	4605      	mov	r5, r0
   bc2c0:	2800      	cmp	r0, #0
   bc2c2:	d168      	bne.n	bc396 <__gethex+0x136>
   bc2c4:	f817 000a 	ldrb.w	r0, [r7, sl]
   bc2c8:	eb07 060a 	add.w	r6, r7, sl
   bc2cc:	f7ff ffb2 	bl	bc234 <__hexdig_fun>
   bc2d0:	2800      	cmp	r0, #0
   bc2d2:	d062      	beq.n	bc39a <__gethex+0x13a>
   bc2d4:	4633      	mov	r3, r6
   bc2d6:	7818      	ldrb	r0, [r3, #0]
   bc2d8:	2830      	cmp	r0, #48	; 0x30
   bc2da:	461f      	mov	r7, r3
   bc2dc:	f103 0301 	add.w	r3, r3, #1
   bc2e0:	d0f9      	beq.n	bc2d6 <__gethex+0x76>
   bc2e2:	f7ff ffa7 	bl	bc234 <__hexdig_fun>
   bc2e6:	2301      	movs	r3, #1
   bc2e8:	fab0 f480 	clz	r4, r0
   bc2ec:	0964      	lsrs	r4, r4, #5
   bc2ee:	4635      	mov	r5, r6
   bc2f0:	9300      	str	r3, [sp, #0]
   bc2f2:	463a      	mov	r2, r7
   bc2f4:	4616      	mov	r6, r2
   bc2f6:	3201      	adds	r2, #1
   bc2f8:	7830      	ldrb	r0, [r6, #0]
   bc2fa:	f7ff ff9b 	bl	bc234 <__hexdig_fun>
   bc2fe:	2800      	cmp	r0, #0
   bc300:	d1f8      	bne.n	bc2f4 <__gethex+0x94>
   bc302:	9901      	ldr	r1, [sp, #4]
   bc304:	4652      	mov	r2, sl
   bc306:	4630      	mov	r0, r6
   bc308:	f7fe ff9e 	bl	bb248 <strncmp>
   bc30c:	b980      	cbnz	r0, bc330 <__gethex+0xd0>
   bc30e:	b94d      	cbnz	r5, bc324 <__gethex+0xc4>
   bc310:	eb06 050a 	add.w	r5, r6, sl
   bc314:	462a      	mov	r2, r5
   bc316:	4616      	mov	r6, r2
   bc318:	3201      	adds	r2, #1
   bc31a:	7830      	ldrb	r0, [r6, #0]
   bc31c:	f7ff ff8a 	bl	bc234 <__hexdig_fun>
   bc320:	2800      	cmp	r0, #0
   bc322:	d1f8      	bne.n	bc316 <__gethex+0xb6>
   bc324:	1bad      	subs	r5, r5, r6
   bc326:	00ad      	lsls	r5, r5, #2
   bc328:	e004      	b.n	bc334 <__gethex+0xd4>
   bc32a:	2400      	movs	r4, #0
   bc32c:	4625      	mov	r5, r4
   bc32e:	e7e0      	b.n	bc2f2 <__gethex+0x92>
   bc330:	2d00      	cmp	r5, #0
   bc332:	d1f7      	bne.n	bc324 <__gethex+0xc4>
   bc334:	7833      	ldrb	r3, [r6, #0]
   bc336:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bc33a:	2b50      	cmp	r3, #80	; 0x50
   bc33c:	d13b      	bne.n	bc3b6 <__gethex+0x156>
   bc33e:	7873      	ldrb	r3, [r6, #1]
   bc340:	2b2b      	cmp	r3, #43	; 0x2b
   bc342:	d02c      	beq.n	bc39e <__gethex+0x13e>
   bc344:	2b2d      	cmp	r3, #45	; 0x2d
   bc346:	d02e      	beq.n	bc3a6 <__gethex+0x146>
   bc348:	1c71      	adds	r1, r6, #1
   bc34a:	f04f 0900 	mov.w	r9, #0
   bc34e:	7808      	ldrb	r0, [r1, #0]
   bc350:	f7ff ff70 	bl	bc234 <__hexdig_fun>
   bc354:	1e43      	subs	r3, r0, #1
   bc356:	b2db      	uxtb	r3, r3
   bc358:	2b18      	cmp	r3, #24
   bc35a:	d82c      	bhi.n	bc3b6 <__gethex+0x156>
   bc35c:	f1a0 0210 	sub.w	r2, r0, #16
   bc360:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bc364:	f7ff ff66 	bl	bc234 <__hexdig_fun>
   bc368:	1e43      	subs	r3, r0, #1
   bc36a:	b2db      	uxtb	r3, r3
   bc36c:	2b18      	cmp	r3, #24
   bc36e:	d91d      	bls.n	bc3ac <__gethex+0x14c>
   bc370:	f1b9 0f00 	cmp.w	r9, #0
   bc374:	d000      	beq.n	bc378 <__gethex+0x118>
   bc376:	4252      	negs	r2, r2
   bc378:	4415      	add	r5, r2
   bc37a:	f8cb 1000 	str.w	r1, [fp]
   bc37e:	b1e4      	cbz	r4, bc3ba <__gethex+0x15a>
   bc380:	9b00      	ldr	r3, [sp, #0]
   bc382:	2b00      	cmp	r3, #0
   bc384:	bf14      	ite	ne
   bc386:	2700      	movne	r7, #0
   bc388:	2706      	moveq	r7, #6
   bc38a:	4638      	mov	r0, r7
   bc38c:	b009      	add	sp, #36	; 0x24
   bc38e:	ecbd 8b02 	vpop	{d8}
   bc392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc396:	463e      	mov	r6, r7
   bc398:	4625      	mov	r5, r4
   bc39a:	2401      	movs	r4, #1
   bc39c:	e7ca      	b.n	bc334 <__gethex+0xd4>
   bc39e:	f04f 0900 	mov.w	r9, #0
   bc3a2:	1cb1      	adds	r1, r6, #2
   bc3a4:	e7d3      	b.n	bc34e <__gethex+0xee>
   bc3a6:	f04f 0901 	mov.w	r9, #1
   bc3aa:	e7fa      	b.n	bc3a2 <__gethex+0x142>
   bc3ac:	230a      	movs	r3, #10
   bc3ae:	fb03 0202 	mla	r2, r3, r2, r0
   bc3b2:	3a10      	subs	r2, #16
   bc3b4:	e7d4      	b.n	bc360 <__gethex+0x100>
   bc3b6:	4631      	mov	r1, r6
   bc3b8:	e7df      	b.n	bc37a <__gethex+0x11a>
   bc3ba:	1bf3      	subs	r3, r6, r7
   bc3bc:	3b01      	subs	r3, #1
   bc3be:	4621      	mov	r1, r4
   bc3c0:	2b07      	cmp	r3, #7
   bc3c2:	dc0b      	bgt.n	bc3dc <__gethex+0x17c>
   bc3c4:	ee18 0a10 	vmov	r0, s16
   bc3c8:	f000 fa68 	bl	bc89c <_Balloc>
   bc3cc:	4604      	mov	r4, r0
   bc3ce:	b940      	cbnz	r0, bc3e2 <__gethex+0x182>
   bc3d0:	4b5d      	ldr	r3, [pc, #372]	; (bc548 <__gethex+0x2e8>)
   bc3d2:	4602      	mov	r2, r0
   bc3d4:	21de      	movs	r1, #222	; 0xde
   bc3d6:	485d      	ldr	r0, [pc, #372]	; (bc54c <__gethex+0x2ec>)
   bc3d8:	f7fb fbf4 	bl	b7bc4 <__assert_func>
   bc3dc:	3101      	adds	r1, #1
   bc3de:	105b      	asrs	r3, r3, #1
   bc3e0:	e7ee      	b.n	bc3c0 <__gethex+0x160>
   bc3e2:	f100 0914 	add.w	r9, r0, #20
   bc3e6:	f04f 0b00 	mov.w	fp, #0
   bc3ea:	f1ca 0301 	rsb	r3, sl, #1
   bc3ee:	f8cd 9008 	str.w	r9, [sp, #8]
   bc3f2:	f8cd b000 	str.w	fp, [sp]
   bc3f6:	9306      	str	r3, [sp, #24]
   bc3f8:	42b7      	cmp	r7, r6
   bc3fa:	d340      	bcc.n	bc47e <__gethex+0x21e>
   bc3fc:	9802      	ldr	r0, [sp, #8]
   bc3fe:	9b00      	ldr	r3, [sp, #0]
   bc400:	f840 3b04 	str.w	r3, [r0], #4
   bc404:	eba0 0009 	sub.w	r0, r0, r9
   bc408:	1080      	asrs	r0, r0, #2
   bc40a:	0146      	lsls	r6, r0, #5
   bc40c:	6120      	str	r0, [r4, #16]
   bc40e:	4618      	mov	r0, r3
   bc410:	f000 fb36 	bl	bca80 <__hi0bits>
   bc414:	1a30      	subs	r0, r6, r0
   bc416:	f8d8 6000 	ldr.w	r6, [r8]
   bc41a:	42b0      	cmp	r0, r6
   bc41c:	dd63      	ble.n	bc4e6 <__gethex+0x286>
   bc41e:	1b87      	subs	r7, r0, r6
   bc420:	4639      	mov	r1, r7
   bc422:	4620      	mov	r0, r4
   bc424:	f000 feda 	bl	bd1dc <__any_on>
   bc428:	4682      	mov	sl, r0
   bc42a:	b1a8      	cbz	r0, bc458 <__gethex+0x1f8>
   bc42c:	1e7b      	subs	r3, r7, #1
   bc42e:	1159      	asrs	r1, r3, #5
   bc430:	f003 021f 	and.w	r2, r3, #31
   bc434:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bc438:	f04f 0a01 	mov.w	sl, #1
   bc43c:	fa0a f202 	lsl.w	r2, sl, r2
   bc440:	420a      	tst	r2, r1
   bc442:	d009      	beq.n	bc458 <__gethex+0x1f8>
   bc444:	4553      	cmp	r3, sl
   bc446:	dd05      	ble.n	bc454 <__gethex+0x1f4>
   bc448:	1eb9      	subs	r1, r7, #2
   bc44a:	4620      	mov	r0, r4
   bc44c:	f000 fec6 	bl	bd1dc <__any_on>
   bc450:	2800      	cmp	r0, #0
   bc452:	d145      	bne.n	bc4e0 <__gethex+0x280>
   bc454:	f04f 0a02 	mov.w	sl, #2
   bc458:	4639      	mov	r1, r7
   bc45a:	4620      	mov	r0, r4
   bc45c:	f7ff fe98 	bl	bc190 <rshift>
   bc460:	443d      	add	r5, r7
   bc462:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bc466:	42ab      	cmp	r3, r5
   bc468:	da4c      	bge.n	bc504 <__gethex+0x2a4>
   bc46a:	ee18 0a10 	vmov	r0, s16
   bc46e:	4621      	mov	r1, r4
   bc470:	f000 fa54 	bl	bc91c <_Bfree>
   bc474:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bc476:	2300      	movs	r3, #0
   bc478:	6013      	str	r3, [r2, #0]
   bc47a:	27a3      	movs	r7, #163	; 0xa3
   bc47c:	e785      	b.n	bc38a <__gethex+0x12a>
   bc47e:	1e73      	subs	r3, r6, #1
   bc480:	9a05      	ldr	r2, [sp, #20]
   bc482:	9303      	str	r3, [sp, #12]
   bc484:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bc488:	4293      	cmp	r3, r2
   bc48a:	d019      	beq.n	bc4c0 <__gethex+0x260>
   bc48c:	f1bb 0f20 	cmp.w	fp, #32
   bc490:	d107      	bne.n	bc4a2 <__gethex+0x242>
   bc492:	9b02      	ldr	r3, [sp, #8]
   bc494:	9a00      	ldr	r2, [sp, #0]
   bc496:	f843 2b04 	str.w	r2, [r3], #4
   bc49a:	9302      	str	r3, [sp, #8]
   bc49c:	2300      	movs	r3, #0
   bc49e:	9300      	str	r3, [sp, #0]
   bc4a0:	469b      	mov	fp, r3
   bc4a2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bc4a6:	f7ff fec5 	bl	bc234 <__hexdig_fun>
   bc4aa:	9b00      	ldr	r3, [sp, #0]
   bc4ac:	f000 000f 	and.w	r0, r0, #15
   bc4b0:	fa00 f00b 	lsl.w	r0, r0, fp
   bc4b4:	4303      	orrs	r3, r0
   bc4b6:	9300      	str	r3, [sp, #0]
   bc4b8:	f10b 0b04 	add.w	fp, fp, #4
   bc4bc:	9b03      	ldr	r3, [sp, #12]
   bc4be:	e00d      	b.n	bc4dc <__gethex+0x27c>
   bc4c0:	9b03      	ldr	r3, [sp, #12]
   bc4c2:	9a06      	ldr	r2, [sp, #24]
   bc4c4:	4413      	add	r3, r2
   bc4c6:	42bb      	cmp	r3, r7
   bc4c8:	d3e0      	bcc.n	bc48c <__gethex+0x22c>
   bc4ca:	4618      	mov	r0, r3
   bc4cc:	9901      	ldr	r1, [sp, #4]
   bc4ce:	9307      	str	r3, [sp, #28]
   bc4d0:	4652      	mov	r2, sl
   bc4d2:	f7fe feb9 	bl	bb248 <strncmp>
   bc4d6:	9b07      	ldr	r3, [sp, #28]
   bc4d8:	2800      	cmp	r0, #0
   bc4da:	d1d7      	bne.n	bc48c <__gethex+0x22c>
   bc4dc:	461e      	mov	r6, r3
   bc4de:	e78b      	b.n	bc3f8 <__gethex+0x198>
   bc4e0:	f04f 0a03 	mov.w	sl, #3
   bc4e4:	e7b8      	b.n	bc458 <__gethex+0x1f8>
   bc4e6:	da0a      	bge.n	bc4fe <__gethex+0x29e>
   bc4e8:	1a37      	subs	r7, r6, r0
   bc4ea:	4621      	mov	r1, r4
   bc4ec:	ee18 0a10 	vmov	r0, s16
   bc4f0:	463a      	mov	r2, r7
   bc4f2:	f000 fc2f 	bl	bcd54 <__lshift>
   bc4f6:	1bed      	subs	r5, r5, r7
   bc4f8:	4604      	mov	r4, r0
   bc4fa:	f100 0914 	add.w	r9, r0, #20
   bc4fe:	f04f 0a00 	mov.w	sl, #0
   bc502:	e7ae      	b.n	bc462 <__gethex+0x202>
   bc504:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bc508:	42a8      	cmp	r0, r5
   bc50a:	dd72      	ble.n	bc5f2 <__gethex+0x392>
   bc50c:	1b45      	subs	r5, r0, r5
   bc50e:	42ae      	cmp	r6, r5
   bc510:	dc36      	bgt.n	bc580 <__gethex+0x320>
   bc512:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bc516:	2b02      	cmp	r3, #2
   bc518:	d02a      	beq.n	bc570 <__gethex+0x310>
   bc51a:	2b03      	cmp	r3, #3
   bc51c:	d02c      	beq.n	bc578 <__gethex+0x318>
   bc51e:	2b01      	cmp	r3, #1
   bc520:	d11c      	bne.n	bc55c <__gethex+0x2fc>
   bc522:	42ae      	cmp	r6, r5
   bc524:	d11a      	bne.n	bc55c <__gethex+0x2fc>
   bc526:	2e01      	cmp	r6, #1
   bc528:	d112      	bne.n	bc550 <__gethex+0x2f0>
   bc52a:	9a04      	ldr	r2, [sp, #16]
   bc52c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bc530:	6013      	str	r3, [r2, #0]
   bc532:	2301      	movs	r3, #1
   bc534:	6123      	str	r3, [r4, #16]
   bc536:	f8c9 3000 	str.w	r3, [r9]
   bc53a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bc53c:	2762      	movs	r7, #98	; 0x62
   bc53e:	601c      	str	r4, [r3, #0]
   bc540:	e723      	b.n	bc38a <__gethex+0x12a>
   bc542:	bf00      	nop
   bc544:	000bde7c 	.word	0x000bde7c
   bc548:	000bde09 	.word	0x000bde09
   bc54c:	000bde1a 	.word	0x000bde1a
   bc550:	1e71      	subs	r1, r6, #1
   bc552:	4620      	mov	r0, r4
   bc554:	f000 fe42 	bl	bd1dc <__any_on>
   bc558:	2800      	cmp	r0, #0
   bc55a:	d1e6      	bne.n	bc52a <__gethex+0x2ca>
   bc55c:	ee18 0a10 	vmov	r0, s16
   bc560:	4621      	mov	r1, r4
   bc562:	f000 f9db 	bl	bc91c <_Bfree>
   bc566:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bc568:	2300      	movs	r3, #0
   bc56a:	6013      	str	r3, [r2, #0]
   bc56c:	2750      	movs	r7, #80	; 0x50
   bc56e:	e70c      	b.n	bc38a <__gethex+0x12a>
   bc570:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc572:	2b00      	cmp	r3, #0
   bc574:	d1f2      	bne.n	bc55c <__gethex+0x2fc>
   bc576:	e7d8      	b.n	bc52a <__gethex+0x2ca>
   bc578:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc57a:	2b00      	cmp	r3, #0
   bc57c:	d1d5      	bne.n	bc52a <__gethex+0x2ca>
   bc57e:	e7ed      	b.n	bc55c <__gethex+0x2fc>
   bc580:	1e6f      	subs	r7, r5, #1
   bc582:	f1ba 0f00 	cmp.w	sl, #0
   bc586:	d131      	bne.n	bc5ec <__gethex+0x38c>
   bc588:	b127      	cbz	r7, bc594 <__gethex+0x334>
   bc58a:	4639      	mov	r1, r7
   bc58c:	4620      	mov	r0, r4
   bc58e:	f000 fe25 	bl	bd1dc <__any_on>
   bc592:	4682      	mov	sl, r0
   bc594:	117b      	asrs	r3, r7, #5
   bc596:	2101      	movs	r1, #1
   bc598:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bc59c:	f007 071f 	and.w	r7, r7, #31
   bc5a0:	fa01 f707 	lsl.w	r7, r1, r7
   bc5a4:	421f      	tst	r7, r3
   bc5a6:	4629      	mov	r1, r5
   bc5a8:	4620      	mov	r0, r4
   bc5aa:	bf18      	it	ne
   bc5ac:	f04a 0a02 	orrne.w	sl, sl, #2
   bc5b0:	1b76      	subs	r6, r6, r5
   bc5b2:	f7ff fded 	bl	bc190 <rshift>
   bc5b6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bc5ba:	2702      	movs	r7, #2
   bc5bc:	f1ba 0f00 	cmp.w	sl, #0
   bc5c0:	d048      	beq.n	bc654 <__gethex+0x3f4>
   bc5c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bc5c6:	2b02      	cmp	r3, #2
   bc5c8:	d015      	beq.n	bc5f6 <__gethex+0x396>
   bc5ca:	2b03      	cmp	r3, #3
   bc5cc:	d017      	beq.n	bc5fe <__gethex+0x39e>
   bc5ce:	2b01      	cmp	r3, #1
   bc5d0:	d109      	bne.n	bc5e6 <__gethex+0x386>
   bc5d2:	f01a 0f02 	tst.w	sl, #2
   bc5d6:	d006      	beq.n	bc5e6 <__gethex+0x386>
   bc5d8:	f8d9 0000 	ldr.w	r0, [r9]
   bc5dc:	ea4a 0a00 	orr.w	sl, sl, r0
   bc5e0:	f01a 0f01 	tst.w	sl, #1
   bc5e4:	d10e      	bne.n	bc604 <__gethex+0x3a4>
   bc5e6:	f047 0710 	orr.w	r7, r7, #16
   bc5ea:	e033      	b.n	bc654 <__gethex+0x3f4>
   bc5ec:	f04f 0a01 	mov.w	sl, #1
   bc5f0:	e7d0      	b.n	bc594 <__gethex+0x334>
   bc5f2:	2701      	movs	r7, #1
   bc5f4:	e7e2      	b.n	bc5bc <__gethex+0x35c>
   bc5f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc5f8:	f1c3 0301 	rsb	r3, r3, #1
   bc5fc:	9315      	str	r3, [sp, #84]	; 0x54
   bc5fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc600:	2b00      	cmp	r3, #0
   bc602:	d0f0      	beq.n	bc5e6 <__gethex+0x386>
   bc604:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bc608:	f104 0314 	add.w	r3, r4, #20
   bc60c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bc610:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bc614:	f04f 0c00 	mov.w	ip, #0
   bc618:	4618      	mov	r0, r3
   bc61a:	f853 2b04 	ldr.w	r2, [r3], #4
   bc61e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bc622:	d01c      	beq.n	bc65e <__gethex+0x3fe>
   bc624:	3201      	adds	r2, #1
   bc626:	6002      	str	r2, [r0, #0]
   bc628:	2f02      	cmp	r7, #2
   bc62a:	f104 0314 	add.w	r3, r4, #20
   bc62e:	d13f      	bne.n	bc6b0 <__gethex+0x450>
   bc630:	f8d8 2000 	ldr.w	r2, [r8]
   bc634:	3a01      	subs	r2, #1
   bc636:	42b2      	cmp	r2, r6
   bc638:	d10a      	bne.n	bc650 <__gethex+0x3f0>
   bc63a:	1171      	asrs	r1, r6, #5
   bc63c:	2201      	movs	r2, #1
   bc63e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bc642:	f006 061f 	and.w	r6, r6, #31
   bc646:	fa02 f606 	lsl.w	r6, r2, r6
   bc64a:	421e      	tst	r6, r3
   bc64c:	bf18      	it	ne
   bc64e:	4617      	movne	r7, r2
   bc650:	f047 0720 	orr.w	r7, r7, #32
   bc654:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bc656:	601c      	str	r4, [r3, #0]
   bc658:	9b04      	ldr	r3, [sp, #16]
   bc65a:	601d      	str	r5, [r3, #0]
   bc65c:	e695      	b.n	bc38a <__gethex+0x12a>
   bc65e:	4299      	cmp	r1, r3
   bc660:	f843 cc04 	str.w	ip, [r3, #-4]
   bc664:	d8d8      	bhi.n	bc618 <__gethex+0x3b8>
   bc666:	68a3      	ldr	r3, [r4, #8]
   bc668:	459b      	cmp	fp, r3
   bc66a:	db19      	blt.n	bc6a0 <__gethex+0x440>
   bc66c:	6861      	ldr	r1, [r4, #4]
   bc66e:	ee18 0a10 	vmov	r0, s16
   bc672:	3101      	adds	r1, #1
   bc674:	f000 f912 	bl	bc89c <_Balloc>
   bc678:	4681      	mov	r9, r0
   bc67a:	b918      	cbnz	r0, bc684 <__gethex+0x424>
   bc67c:	4b1a      	ldr	r3, [pc, #104]	; (bc6e8 <__gethex+0x488>)
   bc67e:	4602      	mov	r2, r0
   bc680:	2184      	movs	r1, #132	; 0x84
   bc682:	e6a8      	b.n	bc3d6 <__gethex+0x176>
   bc684:	6922      	ldr	r2, [r4, #16]
   bc686:	3202      	adds	r2, #2
   bc688:	f104 010c 	add.w	r1, r4, #12
   bc68c:	0092      	lsls	r2, r2, #2
   bc68e:	300c      	adds	r0, #12
   bc690:	f7fe fd62 	bl	bb158 <memcpy>
   bc694:	4621      	mov	r1, r4
   bc696:	ee18 0a10 	vmov	r0, s16
   bc69a:	f000 f93f 	bl	bc91c <_Bfree>
   bc69e:	464c      	mov	r4, r9
   bc6a0:	6923      	ldr	r3, [r4, #16]
   bc6a2:	1c5a      	adds	r2, r3, #1
   bc6a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bc6a8:	6122      	str	r2, [r4, #16]
   bc6aa:	2201      	movs	r2, #1
   bc6ac:	615a      	str	r2, [r3, #20]
   bc6ae:	e7bb      	b.n	bc628 <__gethex+0x3c8>
   bc6b0:	6922      	ldr	r2, [r4, #16]
   bc6b2:	455a      	cmp	r2, fp
   bc6b4:	dd0b      	ble.n	bc6ce <__gethex+0x46e>
   bc6b6:	2101      	movs	r1, #1
   bc6b8:	4620      	mov	r0, r4
   bc6ba:	f7ff fd69 	bl	bc190 <rshift>
   bc6be:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bc6c2:	3501      	adds	r5, #1
   bc6c4:	42ab      	cmp	r3, r5
   bc6c6:	f6ff aed0 	blt.w	bc46a <__gethex+0x20a>
   bc6ca:	2701      	movs	r7, #1
   bc6cc:	e7c0      	b.n	bc650 <__gethex+0x3f0>
   bc6ce:	f016 061f 	ands.w	r6, r6, #31
   bc6d2:	d0fa      	beq.n	bc6ca <__gethex+0x46a>
   bc6d4:	4453      	add	r3, sl
   bc6d6:	f1c6 0620 	rsb	r6, r6, #32
   bc6da:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bc6de:	f000 f9cf 	bl	bca80 <__hi0bits>
   bc6e2:	42b0      	cmp	r0, r6
   bc6e4:	dbe7      	blt.n	bc6b6 <__gethex+0x456>
   bc6e6:	e7f0      	b.n	bc6ca <__gethex+0x46a>
   bc6e8:	000bde09 	.word	0x000bde09

000bc6ec <L_shift>:
   bc6ec:	f1c2 0208 	rsb	r2, r2, #8
   bc6f0:	0092      	lsls	r2, r2, #2
   bc6f2:	b570      	push	{r4, r5, r6, lr}
   bc6f4:	f1c2 0620 	rsb	r6, r2, #32
   bc6f8:	6843      	ldr	r3, [r0, #4]
   bc6fa:	6804      	ldr	r4, [r0, #0]
   bc6fc:	fa03 f506 	lsl.w	r5, r3, r6
   bc700:	432c      	orrs	r4, r5
   bc702:	40d3      	lsrs	r3, r2
   bc704:	6004      	str	r4, [r0, #0]
   bc706:	f840 3f04 	str.w	r3, [r0, #4]!
   bc70a:	4288      	cmp	r0, r1
   bc70c:	d3f4      	bcc.n	bc6f8 <L_shift+0xc>
   bc70e:	bd70      	pop	{r4, r5, r6, pc}

000bc710 <__match>:
   bc710:	b530      	push	{r4, r5, lr}
   bc712:	6803      	ldr	r3, [r0, #0]
   bc714:	3301      	adds	r3, #1
   bc716:	f811 4b01 	ldrb.w	r4, [r1], #1
   bc71a:	b914      	cbnz	r4, bc722 <__match+0x12>
   bc71c:	6003      	str	r3, [r0, #0]
   bc71e:	2001      	movs	r0, #1
   bc720:	bd30      	pop	{r4, r5, pc}
   bc722:	f813 2b01 	ldrb.w	r2, [r3], #1
   bc726:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bc72a:	2d19      	cmp	r5, #25
   bc72c:	bf98      	it	ls
   bc72e:	3220      	addls	r2, #32
   bc730:	42a2      	cmp	r2, r4
   bc732:	d0f0      	beq.n	bc716 <__match+0x6>
   bc734:	2000      	movs	r0, #0
   bc736:	e7f3      	b.n	bc720 <__match+0x10>

000bc738 <__hexnan>:
   bc738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc73c:	680b      	ldr	r3, [r1, #0]
   bc73e:	115e      	asrs	r6, r3, #5
   bc740:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bc744:	f013 031f 	ands.w	r3, r3, #31
   bc748:	b087      	sub	sp, #28
   bc74a:	bf18      	it	ne
   bc74c:	3604      	addne	r6, #4
   bc74e:	2500      	movs	r5, #0
   bc750:	1f37      	subs	r7, r6, #4
   bc752:	4690      	mov	r8, r2
   bc754:	6802      	ldr	r2, [r0, #0]
   bc756:	9301      	str	r3, [sp, #4]
   bc758:	4682      	mov	sl, r0
   bc75a:	f846 5c04 	str.w	r5, [r6, #-4]
   bc75e:	46b9      	mov	r9, r7
   bc760:	463c      	mov	r4, r7
   bc762:	9502      	str	r5, [sp, #8]
   bc764:	46ab      	mov	fp, r5
   bc766:	7851      	ldrb	r1, [r2, #1]
   bc768:	1c53      	adds	r3, r2, #1
   bc76a:	9303      	str	r3, [sp, #12]
   bc76c:	b341      	cbz	r1, bc7c0 <__hexnan+0x88>
   bc76e:	4608      	mov	r0, r1
   bc770:	9205      	str	r2, [sp, #20]
   bc772:	9104      	str	r1, [sp, #16]
   bc774:	f7ff fd5e 	bl	bc234 <__hexdig_fun>
   bc778:	2800      	cmp	r0, #0
   bc77a:	d14f      	bne.n	bc81c <__hexnan+0xe4>
   bc77c:	9904      	ldr	r1, [sp, #16]
   bc77e:	9a05      	ldr	r2, [sp, #20]
   bc780:	2920      	cmp	r1, #32
   bc782:	d818      	bhi.n	bc7b6 <__hexnan+0x7e>
   bc784:	9b02      	ldr	r3, [sp, #8]
   bc786:	459b      	cmp	fp, r3
   bc788:	dd13      	ble.n	bc7b2 <__hexnan+0x7a>
   bc78a:	454c      	cmp	r4, r9
   bc78c:	d206      	bcs.n	bc79c <__hexnan+0x64>
   bc78e:	2d07      	cmp	r5, #7
   bc790:	dc04      	bgt.n	bc79c <__hexnan+0x64>
   bc792:	462a      	mov	r2, r5
   bc794:	4649      	mov	r1, r9
   bc796:	4620      	mov	r0, r4
   bc798:	f7ff ffa8 	bl	bc6ec <L_shift>
   bc79c:	4544      	cmp	r4, r8
   bc79e:	d950      	bls.n	bc842 <__hexnan+0x10a>
   bc7a0:	2300      	movs	r3, #0
   bc7a2:	f1a4 0904 	sub.w	r9, r4, #4
   bc7a6:	f844 3c04 	str.w	r3, [r4, #-4]
   bc7aa:	f8cd b008 	str.w	fp, [sp, #8]
   bc7ae:	464c      	mov	r4, r9
   bc7b0:	461d      	mov	r5, r3
   bc7b2:	9a03      	ldr	r2, [sp, #12]
   bc7b4:	e7d7      	b.n	bc766 <__hexnan+0x2e>
   bc7b6:	2929      	cmp	r1, #41	; 0x29
   bc7b8:	d156      	bne.n	bc868 <__hexnan+0x130>
   bc7ba:	3202      	adds	r2, #2
   bc7bc:	f8ca 2000 	str.w	r2, [sl]
   bc7c0:	f1bb 0f00 	cmp.w	fp, #0
   bc7c4:	d050      	beq.n	bc868 <__hexnan+0x130>
   bc7c6:	454c      	cmp	r4, r9
   bc7c8:	d206      	bcs.n	bc7d8 <__hexnan+0xa0>
   bc7ca:	2d07      	cmp	r5, #7
   bc7cc:	dc04      	bgt.n	bc7d8 <__hexnan+0xa0>
   bc7ce:	462a      	mov	r2, r5
   bc7d0:	4649      	mov	r1, r9
   bc7d2:	4620      	mov	r0, r4
   bc7d4:	f7ff ff8a 	bl	bc6ec <L_shift>
   bc7d8:	4544      	cmp	r4, r8
   bc7da:	d934      	bls.n	bc846 <__hexnan+0x10e>
   bc7dc:	f1a8 0204 	sub.w	r2, r8, #4
   bc7e0:	4623      	mov	r3, r4
   bc7e2:	f853 1b04 	ldr.w	r1, [r3], #4
   bc7e6:	f842 1f04 	str.w	r1, [r2, #4]!
   bc7ea:	429f      	cmp	r7, r3
   bc7ec:	d2f9      	bcs.n	bc7e2 <__hexnan+0xaa>
   bc7ee:	1b3b      	subs	r3, r7, r4
   bc7f0:	f023 0303 	bic.w	r3, r3, #3
   bc7f4:	3304      	adds	r3, #4
   bc7f6:	3401      	adds	r4, #1
   bc7f8:	3e03      	subs	r6, #3
   bc7fa:	42b4      	cmp	r4, r6
   bc7fc:	bf88      	it	hi
   bc7fe:	2304      	movhi	r3, #4
   bc800:	4443      	add	r3, r8
   bc802:	2200      	movs	r2, #0
   bc804:	f843 2b04 	str.w	r2, [r3], #4
   bc808:	429f      	cmp	r7, r3
   bc80a:	d2fb      	bcs.n	bc804 <__hexnan+0xcc>
   bc80c:	683b      	ldr	r3, [r7, #0]
   bc80e:	b91b      	cbnz	r3, bc818 <__hexnan+0xe0>
   bc810:	4547      	cmp	r7, r8
   bc812:	d127      	bne.n	bc864 <__hexnan+0x12c>
   bc814:	2301      	movs	r3, #1
   bc816:	603b      	str	r3, [r7, #0]
   bc818:	2005      	movs	r0, #5
   bc81a:	e026      	b.n	bc86a <__hexnan+0x132>
   bc81c:	3501      	adds	r5, #1
   bc81e:	2d08      	cmp	r5, #8
   bc820:	f10b 0b01 	add.w	fp, fp, #1
   bc824:	dd06      	ble.n	bc834 <__hexnan+0xfc>
   bc826:	4544      	cmp	r4, r8
   bc828:	d9c3      	bls.n	bc7b2 <__hexnan+0x7a>
   bc82a:	2300      	movs	r3, #0
   bc82c:	f844 3c04 	str.w	r3, [r4, #-4]
   bc830:	2501      	movs	r5, #1
   bc832:	3c04      	subs	r4, #4
   bc834:	6822      	ldr	r2, [r4, #0]
   bc836:	f000 000f 	and.w	r0, r0, #15
   bc83a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bc83e:	6022      	str	r2, [r4, #0]
   bc840:	e7b7      	b.n	bc7b2 <__hexnan+0x7a>
   bc842:	2508      	movs	r5, #8
   bc844:	e7b5      	b.n	bc7b2 <__hexnan+0x7a>
   bc846:	9b01      	ldr	r3, [sp, #4]
   bc848:	2b00      	cmp	r3, #0
   bc84a:	d0df      	beq.n	bc80c <__hexnan+0xd4>
   bc84c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc850:	f1c3 0320 	rsb	r3, r3, #32
   bc854:	fa22 f303 	lsr.w	r3, r2, r3
   bc858:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bc85c:	401a      	ands	r2, r3
   bc85e:	f846 2c04 	str.w	r2, [r6, #-4]
   bc862:	e7d3      	b.n	bc80c <__hexnan+0xd4>
   bc864:	3f04      	subs	r7, #4
   bc866:	e7d1      	b.n	bc80c <__hexnan+0xd4>
   bc868:	2004      	movs	r0, #4
   bc86a:	b007      	add	sp, #28
   bc86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bc870 <__retarget_lock_acquire_recursive>:
   bc870:	4770      	bx	lr

000bc872 <__retarget_lock_release>:
   bc872:	4770      	bx	lr

000bc874 <__retarget_lock_release_recursive>:
   bc874:	4770      	bx	lr

000bc876 <__ascii_mbtowc>:
   bc876:	b082      	sub	sp, #8
   bc878:	b901      	cbnz	r1, bc87c <__ascii_mbtowc+0x6>
   bc87a:	a901      	add	r1, sp, #4
   bc87c:	b142      	cbz	r2, bc890 <__ascii_mbtowc+0x1a>
   bc87e:	b14b      	cbz	r3, bc894 <__ascii_mbtowc+0x1e>
   bc880:	7813      	ldrb	r3, [r2, #0]
   bc882:	600b      	str	r3, [r1, #0]
   bc884:	7812      	ldrb	r2, [r2, #0]
   bc886:	1e10      	subs	r0, r2, #0
   bc888:	bf18      	it	ne
   bc88a:	2001      	movne	r0, #1
   bc88c:	b002      	add	sp, #8
   bc88e:	4770      	bx	lr
   bc890:	4610      	mov	r0, r2
   bc892:	e7fb      	b.n	bc88c <__ascii_mbtowc+0x16>
   bc894:	f06f 0001 	mvn.w	r0, #1
   bc898:	e7f8      	b.n	bc88c <__ascii_mbtowc+0x16>
	...

000bc89c <_Balloc>:
   bc89c:	b570      	push	{r4, r5, r6, lr}
   bc89e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bc8a0:	4604      	mov	r4, r0
   bc8a2:	460d      	mov	r5, r1
   bc8a4:	b976      	cbnz	r6, bc8c4 <_Balloc+0x28>
   bc8a6:	2010      	movs	r0, #16
   bc8a8:	f7fb f94c 	bl	b7b44 <malloc>
   bc8ac:	4602      	mov	r2, r0
   bc8ae:	6260      	str	r0, [r4, #36]	; 0x24
   bc8b0:	b920      	cbnz	r0, bc8bc <_Balloc+0x20>
   bc8b2:	4b18      	ldr	r3, [pc, #96]	; (bc914 <_Balloc+0x78>)
   bc8b4:	4818      	ldr	r0, [pc, #96]	; (bc918 <_Balloc+0x7c>)
   bc8b6:	2166      	movs	r1, #102	; 0x66
   bc8b8:	f7fb f984 	bl	b7bc4 <__assert_func>
   bc8bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bc8c0:	6006      	str	r6, [r0, #0]
   bc8c2:	60c6      	str	r6, [r0, #12]
   bc8c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bc8c6:	68f3      	ldr	r3, [r6, #12]
   bc8c8:	b183      	cbz	r3, bc8ec <_Balloc+0x50>
   bc8ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bc8cc:	68db      	ldr	r3, [r3, #12]
   bc8ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bc8d2:	b9b8      	cbnz	r0, bc904 <_Balloc+0x68>
   bc8d4:	2101      	movs	r1, #1
   bc8d6:	fa01 f605 	lsl.w	r6, r1, r5
   bc8da:	1d72      	adds	r2, r6, #5
   bc8dc:	0092      	lsls	r2, r2, #2
   bc8de:	4620      	mov	r0, r4
   bc8e0:	f000 fc9d 	bl	bd21e <_calloc_r>
   bc8e4:	b160      	cbz	r0, bc900 <_Balloc+0x64>
   bc8e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bc8ea:	e00e      	b.n	bc90a <_Balloc+0x6e>
   bc8ec:	2221      	movs	r2, #33	; 0x21
   bc8ee:	2104      	movs	r1, #4
   bc8f0:	4620      	mov	r0, r4
   bc8f2:	f000 fc94 	bl	bd21e <_calloc_r>
   bc8f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bc8f8:	60f0      	str	r0, [r6, #12]
   bc8fa:	68db      	ldr	r3, [r3, #12]
   bc8fc:	2b00      	cmp	r3, #0
   bc8fe:	d1e4      	bne.n	bc8ca <_Balloc+0x2e>
   bc900:	2000      	movs	r0, #0
   bc902:	bd70      	pop	{r4, r5, r6, pc}
   bc904:	6802      	ldr	r2, [r0, #0]
   bc906:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bc90a:	2300      	movs	r3, #0
   bc90c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bc910:	e7f7      	b.n	bc902 <_Balloc+0x66>
   bc912:	bf00      	nop
   bc914:	000bdc39 	.word	0x000bdc39
   bc918:	000bde90 	.word	0x000bde90

000bc91c <_Bfree>:
   bc91c:	b570      	push	{r4, r5, r6, lr}
   bc91e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bc920:	4605      	mov	r5, r0
   bc922:	460c      	mov	r4, r1
   bc924:	b976      	cbnz	r6, bc944 <_Bfree+0x28>
   bc926:	2010      	movs	r0, #16
   bc928:	f7fb f90c 	bl	b7b44 <malloc>
   bc92c:	4602      	mov	r2, r0
   bc92e:	6268      	str	r0, [r5, #36]	; 0x24
   bc930:	b920      	cbnz	r0, bc93c <_Bfree+0x20>
   bc932:	4b09      	ldr	r3, [pc, #36]	; (bc958 <_Bfree+0x3c>)
   bc934:	4809      	ldr	r0, [pc, #36]	; (bc95c <_Bfree+0x40>)
   bc936:	218a      	movs	r1, #138	; 0x8a
   bc938:	f7fb f944 	bl	b7bc4 <__assert_func>
   bc93c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bc940:	6006      	str	r6, [r0, #0]
   bc942:	60c6      	str	r6, [r0, #12]
   bc944:	b13c      	cbz	r4, bc956 <_Bfree+0x3a>
   bc946:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bc948:	6862      	ldr	r2, [r4, #4]
   bc94a:	68db      	ldr	r3, [r3, #12]
   bc94c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bc950:	6021      	str	r1, [r4, #0]
   bc952:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bc956:	bd70      	pop	{r4, r5, r6, pc}
   bc958:	000bdc39 	.word	0x000bdc39
   bc95c:	000bde90 	.word	0x000bde90

000bc960 <__multadd>:
   bc960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc964:	690d      	ldr	r5, [r1, #16]
   bc966:	4607      	mov	r7, r0
   bc968:	460c      	mov	r4, r1
   bc96a:	461e      	mov	r6, r3
   bc96c:	f101 0c14 	add.w	ip, r1, #20
   bc970:	2000      	movs	r0, #0
   bc972:	f8dc 3000 	ldr.w	r3, [ip]
   bc976:	b299      	uxth	r1, r3
   bc978:	fb02 6101 	mla	r1, r2, r1, r6
   bc97c:	0c1e      	lsrs	r6, r3, #16
   bc97e:	0c0b      	lsrs	r3, r1, #16
   bc980:	fb02 3306 	mla	r3, r2, r6, r3
   bc984:	b289      	uxth	r1, r1
   bc986:	3001      	adds	r0, #1
   bc988:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bc98c:	4285      	cmp	r5, r0
   bc98e:	f84c 1b04 	str.w	r1, [ip], #4
   bc992:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bc996:	dcec      	bgt.n	bc972 <__multadd+0x12>
   bc998:	b30e      	cbz	r6, bc9de <__multadd+0x7e>
   bc99a:	68a3      	ldr	r3, [r4, #8]
   bc99c:	42ab      	cmp	r3, r5
   bc99e:	dc19      	bgt.n	bc9d4 <__multadd+0x74>
   bc9a0:	6861      	ldr	r1, [r4, #4]
   bc9a2:	4638      	mov	r0, r7
   bc9a4:	3101      	adds	r1, #1
   bc9a6:	f7ff ff79 	bl	bc89c <_Balloc>
   bc9aa:	4680      	mov	r8, r0
   bc9ac:	b928      	cbnz	r0, bc9ba <__multadd+0x5a>
   bc9ae:	4602      	mov	r2, r0
   bc9b0:	4b0c      	ldr	r3, [pc, #48]	; (bc9e4 <__multadd+0x84>)
   bc9b2:	480d      	ldr	r0, [pc, #52]	; (bc9e8 <__multadd+0x88>)
   bc9b4:	21b5      	movs	r1, #181	; 0xb5
   bc9b6:	f7fb f905 	bl	b7bc4 <__assert_func>
   bc9ba:	6922      	ldr	r2, [r4, #16]
   bc9bc:	3202      	adds	r2, #2
   bc9be:	f104 010c 	add.w	r1, r4, #12
   bc9c2:	0092      	lsls	r2, r2, #2
   bc9c4:	300c      	adds	r0, #12
   bc9c6:	f7fe fbc7 	bl	bb158 <memcpy>
   bc9ca:	4621      	mov	r1, r4
   bc9cc:	4638      	mov	r0, r7
   bc9ce:	f7ff ffa5 	bl	bc91c <_Bfree>
   bc9d2:	4644      	mov	r4, r8
   bc9d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bc9d8:	3501      	adds	r5, #1
   bc9da:	615e      	str	r6, [r3, #20]
   bc9dc:	6125      	str	r5, [r4, #16]
   bc9de:	4620      	mov	r0, r4
   bc9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc9e4:	000bde09 	.word	0x000bde09
   bc9e8:	000bde90 	.word	0x000bde90

000bc9ec <__s2b>:
   bc9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc9f0:	460c      	mov	r4, r1
   bc9f2:	4615      	mov	r5, r2
   bc9f4:	461f      	mov	r7, r3
   bc9f6:	2209      	movs	r2, #9
   bc9f8:	3308      	adds	r3, #8
   bc9fa:	4606      	mov	r6, r0
   bc9fc:	fb93 f3f2 	sdiv	r3, r3, r2
   bca00:	2100      	movs	r1, #0
   bca02:	2201      	movs	r2, #1
   bca04:	429a      	cmp	r2, r3
   bca06:	db09      	blt.n	bca1c <__s2b+0x30>
   bca08:	4630      	mov	r0, r6
   bca0a:	f7ff ff47 	bl	bc89c <_Balloc>
   bca0e:	b940      	cbnz	r0, bca22 <__s2b+0x36>
   bca10:	4602      	mov	r2, r0
   bca12:	4b19      	ldr	r3, [pc, #100]	; (bca78 <__s2b+0x8c>)
   bca14:	4819      	ldr	r0, [pc, #100]	; (bca7c <__s2b+0x90>)
   bca16:	21ce      	movs	r1, #206	; 0xce
   bca18:	f7fb f8d4 	bl	b7bc4 <__assert_func>
   bca1c:	0052      	lsls	r2, r2, #1
   bca1e:	3101      	adds	r1, #1
   bca20:	e7f0      	b.n	bca04 <__s2b+0x18>
   bca22:	9b08      	ldr	r3, [sp, #32]
   bca24:	6143      	str	r3, [r0, #20]
   bca26:	2d09      	cmp	r5, #9
   bca28:	f04f 0301 	mov.w	r3, #1
   bca2c:	6103      	str	r3, [r0, #16]
   bca2e:	dd16      	ble.n	bca5e <__s2b+0x72>
   bca30:	f104 0909 	add.w	r9, r4, #9
   bca34:	46c8      	mov	r8, r9
   bca36:	442c      	add	r4, r5
   bca38:	f818 3b01 	ldrb.w	r3, [r8], #1
   bca3c:	4601      	mov	r1, r0
   bca3e:	3b30      	subs	r3, #48	; 0x30
   bca40:	220a      	movs	r2, #10
   bca42:	4630      	mov	r0, r6
   bca44:	f7ff ff8c 	bl	bc960 <__multadd>
   bca48:	45a0      	cmp	r8, r4
   bca4a:	d1f5      	bne.n	bca38 <__s2b+0x4c>
   bca4c:	f1a5 0408 	sub.w	r4, r5, #8
   bca50:	444c      	add	r4, r9
   bca52:	1b2d      	subs	r5, r5, r4
   bca54:	1963      	adds	r3, r4, r5
   bca56:	42bb      	cmp	r3, r7
   bca58:	db04      	blt.n	bca64 <__s2b+0x78>
   bca5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bca5e:	340a      	adds	r4, #10
   bca60:	2509      	movs	r5, #9
   bca62:	e7f6      	b.n	bca52 <__s2b+0x66>
   bca64:	f814 3b01 	ldrb.w	r3, [r4], #1
   bca68:	4601      	mov	r1, r0
   bca6a:	3b30      	subs	r3, #48	; 0x30
   bca6c:	220a      	movs	r2, #10
   bca6e:	4630      	mov	r0, r6
   bca70:	f7ff ff76 	bl	bc960 <__multadd>
   bca74:	e7ee      	b.n	bca54 <__s2b+0x68>
   bca76:	bf00      	nop
   bca78:	000bde09 	.word	0x000bde09
   bca7c:	000bde90 	.word	0x000bde90

000bca80 <__hi0bits>:
   bca80:	0c03      	lsrs	r3, r0, #16
   bca82:	041b      	lsls	r3, r3, #16
   bca84:	b9d3      	cbnz	r3, bcabc <__hi0bits+0x3c>
   bca86:	0400      	lsls	r0, r0, #16
   bca88:	2310      	movs	r3, #16
   bca8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bca8e:	bf04      	itt	eq
   bca90:	0200      	lsleq	r0, r0, #8
   bca92:	3308      	addeq	r3, #8
   bca94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bca98:	bf04      	itt	eq
   bca9a:	0100      	lsleq	r0, r0, #4
   bca9c:	3304      	addeq	r3, #4
   bca9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bcaa2:	bf04      	itt	eq
   bcaa4:	0080      	lsleq	r0, r0, #2
   bcaa6:	3302      	addeq	r3, #2
   bcaa8:	2800      	cmp	r0, #0
   bcaaa:	db05      	blt.n	bcab8 <__hi0bits+0x38>
   bcaac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bcab0:	f103 0301 	add.w	r3, r3, #1
   bcab4:	bf08      	it	eq
   bcab6:	2320      	moveq	r3, #32
   bcab8:	4618      	mov	r0, r3
   bcaba:	4770      	bx	lr
   bcabc:	2300      	movs	r3, #0
   bcabe:	e7e4      	b.n	bca8a <__hi0bits+0xa>

000bcac0 <__lo0bits>:
   bcac0:	6803      	ldr	r3, [r0, #0]
   bcac2:	f013 0207 	ands.w	r2, r3, #7
   bcac6:	4601      	mov	r1, r0
   bcac8:	d00b      	beq.n	bcae2 <__lo0bits+0x22>
   bcaca:	07da      	lsls	r2, r3, #31
   bcacc:	d423      	bmi.n	bcb16 <__lo0bits+0x56>
   bcace:	0798      	lsls	r0, r3, #30
   bcad0:	bf49      	itett	mi
   bcad2:	085b      	lsrmi	r3, r3, #1
   bcad4:	089b      	lsrpl	r3, r3, #2
   bcad6:	2001      	movmi	r0, #1
   bcad8:	600b      	strmi	r3, [r1, #0]
   bcada:	bf5c      	itt	pl
   bcadc:	600b      	strpl	r3, [r1, #0]
   bcade:	2002      	movpl	r0, #2
   bcae0:	4770      	bx	lr
   bcae2:	b298      	uxth	r0, r3
   bcae4:	b9a8      	cbnz	r0, bcb12 <__lo0bits+0x52>
   bcae6:	0c1b      	lsrs	r3, r3, #16
   bcae8:	2010      	movs	r0, #16
   bcaea:	b2da      	uxtb	r2, r3
   bcaec:	b90a      	cbnz	r2, bcaf2 <__lo0bits+0x32>
   bcaee:	3008      	adds	r0, #8
   bcaf0:	0a1b      	lsrs	r3, r3, #8
   bcaf2:	071a      	lsls	r2, r3, #28
   bcaf4:	bf04      	itt	eq
   bcaf6:	091b      	lsreq	r3, r3, #4
   bcaf8:	3004      	addeq	r0, #4
   bcafa:	079a      	lsls	r2, r3, #30
   bcafc:	bf04      	itt	eq
   bcafe:	089b      	lsreq	r3, r3, #2
   bcb00:	3002      	addeq	r0, #2
   bcb02:	07da      	lsls	r2, r3, #31
   bcb04:	d403      	bmi.n	bcb0e <__lo0bits+0x4e>
   bcb06:	085b      	lsrs	r3, r3, #1
   bcb08:	f100 0001 	add.w	r0, r0, #1
   bcb0c:	d005      	beq.n	bcb1a <__lo0bits+0x5a>
   bcb0e:	600b      	str	r3, [r1, #0]
   bcb10:	4770      	bx	lr
   bcb12:	4610      	mov	r0, r2
   bcb14:	e7e9      	b.n	bcaea <__lo0bits+0x2a>
   bcb16:	2000      	movs	r0, #0
   bcb18:	4770      	bx	lr
   bcb1a:	2020      	movs	r0, #32
   bcb1c:	4770      	bx	lr
	...

000bcb20 <__i2b>:
   bcb20:	b510      	push	{r4, lr}
   bcb22:	460c      	mov	r4, r1
   bcb24:	2101      	movs	r1, #1
   bcb26:	f7ff feb9 	bl	bc89c <_Balloc>
   bcb2a:	4602      	mov	r2, r0
   bcb2c:	b928      	cbnz	r0, bcb3a <__i2b+0x1a>
   bcb2e:	4b05      	ldr	r3, [pc, #20]	; (bcb44 <__i2b+0x24>)
   bcb30:	4805      	ldr	r0, [pc, #20]	; (bcb48 <__i2b+0x28>)
   bcb32:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bcb36:	f7fb f845 	bl	b7bc4 <__assert_func>
   bcb3a:	2301      	movs	r3, #1
   bcb3c:	6144      	str	r4, [r0, #20]
   bcb3e:	6103      	str	r3, [r0, #16]
   bcb40:	bd10      	pop	{r4, pc}
   bcb42:	bf00      	nop
   bcb44:	000bde09 	.word	0x000bde09
   bcb48:	000bde90 	.word	0x000bde90

000bcb4c <__multiply>:
   bcb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcb50:	4691      	mov	r9, r2
   bcb52:	690a      	ldr	r2, [r1, #16]
   bcb54:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bcb58:	429a      	cmp	r2, r3
   bcb5a:	bfb8      	it	lt
   bcb5c:	460b      	movlt	r3, r1
   bcb5e:	460c      	mov	r4, r1
   bcb60:	bfbc      	itt	lt
   bcb62:	464c      	movlt	r4, r9
   bcb64:	4699      	movlt	r9, r3
   bcb66:	6927      	ldr	r7, [r4, #16]
   bcb68:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bcb6c:	68a3      	ldr	r3, [r4, #8]
   bcb6e:	6861      	ldr	r1, [r4, #4]
   bcb70:	eb07 060a 	add.w	r6, r7, sl
   bcb74:	42b3      	cmp	r3, r6
   bcb76:	b085      	sub	sp, #20
   bcb78:	bfb8      	it	lt
   bcb7a:	3101      	addlt	r1, #1
   bcb7c:	f7ff fe8e 	bl	bc89c <_Balloc>
   bcb80:	b930      	cbnz	r0, bcb90 <__multiply+0x44>
   bcb82:	4602      	mov	r2, r0
   bcb84:	4b44      	ldr	r3, [pc, #272]	; (bcc98 <__multiply+0x14c>)
   bcb86:	4845      	ldr	r0, [pc, #276]	; (bcc9c <__multiply+0x150>)
   bcb88:	f240 115d 	movw	r1, #349	; 0x15d
   bcb8c:	f7fb f81a 	bl	b7bc4 <__assert_func>
   bcb90:	f100 0514 	add.w	r5, r0, #20
   bcb94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bcb98:	462b      	mov	r3, r5
   bcb9a:	2200      	movs	r2, #0
   bcb9c:	4543      	cmp	r3, r8
   bcb9e:	d321      	bcc.n	bcbe4 <__multiply+0x98>
   bcba0:	f104 0314 	add.w	r3, r4, #20
   bcba4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bcba8:	f109 0314 	add.w	r3, r9, #20
   bcbac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bcbb0:	9202      	str	r2, [sp, #8]
   bcbb2:	1b3a      	subs	r2, r7, r4
   bcbb4:	3a15      	subs	r2, #21
   bcbb6:	f022 0203 	bic.w	r2, r2, #3
   bcbba:	3204      	adds	r2, #4
   bcbbc:	f104 0115 	add.w	r1, r4, #21
   bcbc0:	428f      	cmp	r7, r1
   bcbc2:	bf38      	it	cc
   bcbc4:	2204      	movcc	r2, #4
   bcbc6:	9201      	str	r2, [sp, #4]
   bcbc8:	9a02      	ldr	r2, [sp, #8]
   bcbca:	9303      	str	r3, [sp, #12]
   bcbcc:	429a      	cmp	r2, r3
   bcbce:	d80c      	bhi.n	bcbea <__multiply+0x9e>
   bcbd0:	2e00      	cmp	r6, #0
   bcbd2:	dd03      	ble.n	bcbdc <__multiply+0x90>
   bcbd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bcbd8:	2b00      	cmp	r3, #0
   bcbda:	d05a      	beq.n	bcc92 <__multiply+0x146>
   bcbdc:	6106      	str	r6, [r0, #16]
   bcbde:	b005      	add	sp, #20
   bcbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bcbe4:	f843 2b04 	str.w	r2, [r3], #4
   bcbe8:	e7d8      	b.n	bcb9c <__multiply+0x50>
   bcbea:	f8b3 a000 	ldrh.w	sl, [r3]
   bcbee:	f1ba 0f00 	cmp.w	sl, #0
   bcbf2:	d024      	beq.n	bcc3e <__multiply+0xf2>
   bcbf4:	f104 0e14 	add.w	lr, r4, #20
   bcbf8:	46a9      	mov	r9, r5
   bcbfa:	f04f 0c00 	mov.w	ip, #0
   bcbfe:	f85e 2b04 	ldr.w	r2, [lr], #4
   bcc02:	f8d9 1000 	ldr.w	r1, [r9]
   bcc06:	fa1f fb82 	uxth.w	fp, r2
   bcc0a:	b289      	uxth	r1, r1
   bcc0c:	fb0a 110b 	mla	r1, sl, fp, r1
   bcc10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bcc14:	f8d9 2000 	ldr.w	r2, [r9]
   bcc18:	4461      	add	r1, ip
   bcc1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bcc1e:	fb0a c20b 	mla	r2, sl, fp, ip
   bcc22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bcc26:	b289      	uxth	r1, r1
   bcc28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bcc2c:	4577      	cmp	r7, lr
   bcc2e:	f849 1b04 	str.w	r1, [r9], #4
   bcc32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bcc36:	d8e2      	bhi.n	bcbfe <__multiply+0xb2>
   bcc38:	9a01      	ldr	r2, [sp, #4]
   bcc3a:	f845 c002 	str.w	ip, [r5, r2]
   bcc3e:	9a03      	ldr	r2, [sp, #12]
   bcc40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bcc44:	3304      	adds	r3, #4
   bcc46:	f1b9 0f00 	cmp.w	r9, #0
   bcc4a:	d020      	beq.n	bcc8e <__multiply+0x142>
   bcc4c:	6829      	ldr	r1, [r5, #0]
   bcc4e:	f104 0c14 	add.w	ip, r4, #20
   bcc52:	46ae      	mov	lr, r5
   bcc54:	f04f 0a00 	mov.w	sl, #0
   bcc58:	f8bc b000 	ldrh.w	fp, [ip]
   bcc5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bcc60:	fb09 220b 	mla	r2, r9, fp, r2
   bcc64:	4492      	add	sl, r2
   bcc66:	b289      	uxth	r1, r1
   bcc68:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bcc6c:	f84e 1b04 	str.w	r1, [lr], #4
   bcc70:	f85c 2b04 	ldr.w	r2, [ip], #4
   bcc74:	f8be 1000 	ldrh.w	r1, [lr]
   bcc78:	0c12      	lsrs	r2, r2, #16
   bcc7a:	fb09 1102 	mla	r1, r9, r2, r1
   bcc7e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bcc82:	4567      	cmp	r7, ip
   bcc84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bcc88:	d8e6      	bhi.n	bcc58 <__multiply+0x10c>
   bcc8a:	9a01      	ldr	r2, [sp, #4]
   bcc8c:	50a9      	str	r1, [r5, r2]
   bcc8e:	3504      	adds	r5, #4
   bcc90:	e79a      	b.n	bcbc8 <__multiply+0x7c>
   bcc92:	3e01      	subs	r6, #1
   bcc94:	e79c      	b.n	bcbd0 <__multiply+0x84>
   bcc96:	bf00      	nop
   bcc98:	000bde09 	.word	0x000bde09
   bcc9c:	000bde90 	.word	0x000bde90

000bcca0 <__pow5mult>:
   bcca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bcca4:	4615      	mov	r5, r2
   bcca6:	f012 0203 	ands.w	r2, r2, #3
   bccaa:	4606      	mov	r6, r0
   bccac:	460f      	mov	r7, r1
   bccae:	d007      	beq.n	bccc0 <__pow5mult+0x20>
   bccb0:	4c25      	ldr	r4, [pc, #148]	; (bcd48 <__pow5mult+0xa8>)
   bccb2:	3a01      	subs	r2, #1
   bccb4:	2300      	movs	r3, #0
   bccb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bccba:	f7ff fe51 	bl	bc960 <__multadd>
   bccbe:	4607      	mov	r7, r0
   bccc0:	10ad      	asrs	r5, r5, #2
   bccc2:	d03d      	beq.n	bcd40 <__pow5mult+0xa0>
   bccc4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bccc6:	b97c      	cbnz	r4, bcce8 <__pow5mult+0x48>
   bccc8:	2010      	movs	r0, #16
   bccca:	f7fa ff3b 	bl	b7b44 <malloc>
   bccce:	4602      	mov	r2, r0
   bccd0:	6270      	str	r0, [r6, #36]	; 0x24
   bccd2:	b928      	cbnz	r0, bcce0 <__pow5mult+0x40>
   bccd4:	4b1d      	ldr	r3, [pc, #116]	; (bcd4c <__pow5mult+0xac>)
   bccd6:	481e      	ldr	r0, [pc, #120]	; (bcd50 <__pow5mult+0xb0>)
   bccd8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bccdc:	f7fa ff72 	bl	b7bc4 <__assert_func>
   bcce0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bcce4:	6004      	str	r4, [r0, #0]
   bcce6:	60c4      	str	r4, [r0, #12]
   bcce8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bccec:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bccf0:	b94c      	cbnz	r4, bcd06 <__pow5mult+0x66>
   bccf2:	f240 2171 	movw	r1, #625	; 0x271
   bccf6:	4630      	mov	r0, r6
   bccf8:	f7ff ff12 	bl	bcb20 <__i2b>
   bccfc:	2300      	movs	r3, #0
   bccfe:	f8c8 0008 	str.w	r0, [r8, #8]
   bcd02:	4604      	mov	r4, r0
   bcd04:	6003      	str	r3, [r0, #0]
   bcd06:	f04f 0900 	mov.w	r9, #0
   bcd0a:	07eb      	lsls	r3, r5, #31
   bcd0c:	d50a      	bpl.n	bcd24 <__pow5mult+0x84>
   bcd0e:	4639      	mov	r1, r7
   bcd10:	4622      	mov	r2, r4
   bcd12:	4630      	mov	r0, r6
   bcd14:	f7ff ff1a 	bl	bcb4c <__multiply>
   bcd18:	4639      	mov	r1, r7
   bcd1a:	4680      	mov	r8, r0
   bcd1c:	4630      	mov	r0, r6
   bcd1e:	f7ff fdfd 	bl	bc91c <_Bfree>
   bcd22:	4647      	mov	r7, r8
   bcd24:	106d      	asrs	r5, r5, #1
   bcd26:	d00b      	beq.n	bcd40 <__pow5mult+0xa0>
   bcd28:	6820      	ldr	r0, [r4, #0]
   bcd2a:	b938      	cbnz	r0, bcd3c <__pow5mult+0x9c>
   bcd2c:	4622      	mov	r2, r4
   bcd2e:	4621      	mov	r1, r4
   bcd30:	4630      	mov	r0, r6
   bcd32:	f7ff ff0b 	bl	bcb4c <__multiply>
   bcd36:	6020      	str	r0, [r4, #0]
   bcd38:	f8c0 9000 	str.w	r9, [r0]
   bcd3c:	4604      	mov	r4, r0
   bcd3e:	e7e4      	b.n	bcd0a <__pow5mult+0x6a>
   bcd40:	4638      	mov	r0, r7
   bcd42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bcd46:	bf00      	nop
   bcd48:	000bdfe0 	.word	0x000bdfe0
   bcd4c:	000bdc39 	.word	0x000bdc39
   bcd50:	000bde90 	.word	0x000bde90

000bcd54 <__lshift>:
   bcd54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bcd58:	460c      	mov	r4, r1
   bcd5a:	6849      	ldr	r1, [r1, #4]
   bcd5c:	6923      	ldr	r3, [r4, #16]
   bcd5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bcd62:	68a3      	ldr	r3, [r4, #8]
   bcd64:	4607      	mov	r7, r0
   bcd66:	4691      	mov	r9, r2
   bcd68:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bcd6c:	f108 0601 	add.w	r6, r8, #1
   bcd70:	42b3      	cmp	r3, r6
   bcd72:	db0b      	blt.n	bcd8c <__lshift+0x38>
   bcd74:	4638      	mov	r0, r7
   bcd76:	f7ff fd91 	bl	bc89c <_Balloc>
   bcd7a:	4605      	mov	r5, r0
   bcd7c:	b948      	cbnz	r0, bcd92 <__lshift+0x3e>
   bcd7e:	4602      	mov	r2, r0
   bcd80:	4b2a      	ldr	r3, [pc, #168]	; (bce2c <__lshift+0xd8>)
   bcd82:	482b      	ldr	r0, [pc, #172]	; (bce30 <__lshift+0xdc>)
   bcd84:	f240 11d9 	movw	r1, #473	; 0x1d9
   bcd88:	f7fa ff1c 	bl	b7bc4 <__assert_func>
   bcd8c:	3101      	adds	r1, #1
   bcd8e:	005b      	lsls	r3, r3, #1
   bcd90:	e7ee      	b.n	bcd70 <__lshift+0x1c>
   bcd92:	2300      	movs	r3, #0
   bcd94:	f100 0114 	add.w	r1, r0, #20
   bcd98:	f100 0210 	add.w	r2, r0, #16
   bcd9c:	4618      	mov	r0, r3
   bcd9e:	4553      	cmp	r3, sl
   bcda0:	db37      	blt.n	bce12 <__lshift+0xbe>
   bcda2:	6920      	ldr	r0, [r4, #16]
   bcda4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bcda8:	f104 0314 	add.w	r3, r4, #20
   bcdac:	f019 091f 	ands.w	r9, r9, #31
   bcdb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bcdb4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bcdb8:	d02f      	beq.n	bce1a <__lshift+0xc6>
   bcdba:	f1c9 0e20 	rsb	lr, r9, #32
   bcdbe:	468a      	mov	sl, r1
   bcdc0:	f04f 0c00 	mov.w	ip, #0
   bcdc4:	681a      	ldr	r2, [r3, #0]
   bcdc6:	fa02 f209 	lsl.w	r2, r2, r9
   bcdca:	ea42 020c 	orr.w	r2, r2, ip
   bcdce:	f84a 2b04 	str.w	r2, [sl], #4
   bcdd2:	f853 2b04 	ldr.w	r2, [r3], #4
   bcdd6:	4298      	cmp	r0, r3
   bcdd8:	fa22 fc0e 	lsr.w	ip, r2, lr
   bcddc:	d8f2      	bhi.n	bcdc4 <__lshift+0x70>
   bcdde:	1b03      	subs	r3, r0, r4
   bcde0:	3b15      	subs	r3, #21
   bcde2:	f023 0303 	bic.w	r3, r3, #3
   bcde6:	3304      	adds	r3, #4
   bcde8:	f104 0215 	add.w	r2, r4, #21
   bcdec:	4290      	cmp	r0, r2
   bcdee:	bf38      	it	cc
   bcdf0:	2304      	movcc	r3, #4
   bcdf2:	f841 c003 	str.w	ip, [r1, r3]
   bcdf6:	f1bc 0f00 	cmp.w	ip, #0
   bcdfa:	d001      	beq.n	bce00 <__lshift+0xac>
   bcdfc:	f108 0602 	add.w	r6, r8, #2
   bce00:	3e01      	subs	r6, #1
   bce02:	4638      	mov	r0, r7
   bce04:	612e      	str	r6, [r5, #16]
   bce06:	4621      	mov	r1, r4
   bce08:	f7ff fd88 	bl	bc91c <_Bfree>
   bce0c:	4628      	mov	r0, r5
   bce0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bce12:	f842 0f04 	str.w	r0, [r2, #4]!
   bce16:	3301      	adds	r3, #1
   bce18:	e7c1      	b.n	bcd9e <__lshift+0x4a>
   bce1a:	3904      	subs	r1, #4
   bce1c:	f853 2b04 	ldr.w	r2, [r3], #4
   bce20:	f841 2f04 	str.w	r2, [r1, #4]!
   bce24:	4298      	cmp	r0, r3
   bce26:	d8f9      	bhi.n	bce1c <__lshift+0xc8>
   bce28:	e7ea      	b.n	bce00 <__lshift+0xac>
   bce2a:	bf00      	nop
   bce2c:	000bde09 	.word	0x000bde09
   bce30:	000bde90 	.word	0x000bde90

000bce34 <__mcmp>:
   bce34:	b530      	push	{r4, r5, lr}
   bce36:	6902      	ldr	r2, [r0, #16]
   bce38:	690c      	ldr	r4, [r1, #16]
   bce3a:	1b12      	subs	r2, r2, r4
   bce3c:	d10e      	bne.n	bce5c <__mcmp+0x28>
   bce3e:	f100 0314 	add.w	r3, r0, #20
   bce42:	3114      	adds	r1, #20
   bce44:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bce48:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bce4c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bce50:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bce54:	42a5      	cmp	r5, r4
   bce56:	d003      	beq.n	bce60 <__mcmp+0x2c>
   bce58:	d305      	bcc.n	bce66 <__mcmp+0x32>
   bce5a:	2201      	movs	r2, #1
   bce5c:	4610      	mov	r0, r2
   bce5e:	bd30      	pop	{r4, r5, pc}
   bce60:	4283      	cmp	r3, r0
   bce62:	d3f3      	bcc.n	bce4c <__mcmp+0x18>
   bce64:	e7fa      	b.n	bce5c <__mcmp+0x28>
   bce66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bce6a:	e7f7      	b.n	bce5c <__mcmp+0x28>

000bce6c <__mdiff>:
   bce6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bce70:	460c      	mov	r4, r1
   bce72:	4606      	mov	r6, r0
   bce74:	4611      	mov	r1, r2
   bce76:	4620      	mov	r0, r4
   bce78:	4690      	mov	r8, r2
   bce7a:	f7ff ffdb 	bl	bce34 <__mcmp>
   bce7e:	1e05      	subs	r5, r0, #0
   bce80:	d110      	bne.n	bcea4 <__mdiff+0x38>
   bce82:	4629      	mov	r1, r5
   bce84:	4630      	mov	r0, r6
   bce86:	f7ff fd09 	bl	bc89c <_Balloc>
   bce8a:	b930      	cbnz	r0, bce9a <__mdiff+0x2e>
   bce8c:	4b3a      	ldr	r3, [pc, #232]	; (bcf78 <__mdiff+0x10c>)
   bce8e:	4602      	mov	r2, r0
   bce90:	f240 2132 	movw	r1, #562	; 0x232
   bce94:	4839      	ldr	r0, [pc, #228]	; (bcf7c <__mdiff+0x110>)
   bce96:	f7fa fe95 	bl	b7bc4 <__assert_func>
   bce9a:	2301      	movs	r3, #1
   bce9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bcea0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bcea4:	bfa4      	itt	ge
   bcea6:	4643      	movge	r3, r8
   bcea8:	46a0      	movge	r8, r4
   bceaa:	4630      	mov	r0, r6
   bceac:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bceb0:	bfa6      	itte	ge
   bceb2:	461c      	movge	r4, r3
   bceb4:	2500      	movge	r5, #0
   bceb6:	2501      	movlt	r5, #1
   bceb8:	f7ff fcf0 	bl	bc89c <_Balloc>
   bcebc:	b920      	cbnz	r0, bcec8 <__mdiff+0x5c>
   bcebe:	4b2e      	ldr	r3, [pc, #184]	; (bcf78 <__mdiff+0x10c>)
   bcec0:	4602      	mov	r2, r0
   bcec2:	f44f 7110 	mov.w	r1, #576	; 0x240
   bcec6:	e7e5      	b.n	bce94 <__mdiff+0x28>
   bcec8:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bcecc:	6926      	ldr	r6, [r4, #16]
   bcece:	60c5      	str	r5, [r0, #12]
   bced0:	f104 0914 	add.w	r9, r4, #20
   bced4:	f108 0514 	add.w	r5, r8, #20
   bced8:	f100 0e14 	add.w	lr, r0, #20
   bcedc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bcee0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bcee4:	f108 0210 	add.w	r2, r8, #16
   bcee8:	46f2      	mov	sl, lr
   bceea:	2100      	movs	r1, #0
   bceec:	f859 3b04 	ldr.w	r3, [r9], #4
   bcef0:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bcef4:	fa1f f883 	uxth.w	r8, r3
   bcef8:	fa11 f18b 	uxtah	r1, r1, fp
   bcefc:	0c1b      	lsrs	r3, r3, #16
   bcefe:	eba1 0808 	sub.w	r8, r1, r8
   bcf02:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bcf06:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bcf0a:	fa1f f888 	uxth.w	r8, r8
   bcf0e:	1419      	asrs	r1, r3, #16
   bcf10:	454e      	cmp	r6, r9
   bcf12:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bcf16:	f84a 3b04 	str.w	r3, [sl], #4
   bcf1a:	d8e7      	bhi.n	bceec <__mdiff+0x80>
   bcf1c:	1b33      	subs	r3, r6, r4
   bcf1e:	3b15      	subs	r3, #21
   bcf20:	f023 0303 	bic.w	r3, r3, #3
   bcf24:	3304      	adds	r3, #4
   bcf26:	3415      	adds	r4, #21
   bcf28:	42a6      	cmp	r6, r4
   bcf2a:	bf38      	it	cc
   bcf2c:	2304      	movcc	r3, #4
   bcf2e:	441d      	add	r5, r3
   bcf30:	4473      	add	r3, lr
   bcf32:	469e      	mov	lr, r3
   bcf34:	462e      	mov	r6, r5
   bcf36:	4566      	cmp	r6, ip
   bcf38:	d30e      	bcc.n	bcf58 <__mdiff+0xec>
   bcf3a:	f10c 0203 	add.w	r2, ip, #3
   bcf3e:	1b52      	subs	r2, r2, r5
   bcf40:	f022 0203 	bic.w	r2, r2, #3
   bcf44:	3d03      	subs	r5, #3
   bcf46:	45ac      	cmp	ip, r5
   bcf48:	bf38      	it	cc
   bcf4a:	2200      	movcc	r2, #0
   bcf4c:	441a      	add	r2, r3
   bcf4e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bcf52:	b17b      	cbz	r3, bcf74 <__mdiff+0x108>
   bcf54:	6107      	str	r7, [r0, #16]
   bcf56:	e7a3      	b.n	bcea0 <__mdiff+0x34>
   bcf58:	f856 8b04 	ldr.w	r8, [r6], #4
   bcf5c:	fa11 f288 	uxtah	r2, r1, r8
   bcf60:	1414      	asrs	r4, r2, #16
   bcf62:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bcf66:	b292      	uxth	r2, r2
   bcf68:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bcf6c:	f84e 2b04 	str.w	r2, [lr], #4
   bcf70:	1421      	asrs	r1, r4, #16
   bcf72:	e7e0      	b.n	bcf36 <__mdiff+0xca>
   bcf74:	3f01      	subs	r7, #1
   bcf76:	e7ea      	b.n	bcf4e <__mdiff+0xe2>
   bcf78:	000bde09 	.word	0x000bde09
   bcf7c:	000bde90 	.word	0x000bde90

000bcf80 <__ulp>:
   bcf80:	b082      	sub	sp, #8
   bcf82:	ed8d 0b00 	vstr	d0, [sp]
   bcf86:	9b01      	ldr	r3, [sp, #4]
   bcf88:	4912      	ldr	r1, [pc, #72]	; (bcfd4 <__ulp+0x54>)
   bcf8a:	4019      	ands	r1, r3
   bcf8c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bcf90:	2900      	cmp	r1, #0
   bcf92:	dd05      	ble.n	bcfa0 <__ulp+0x20>
   bcf94:	2200      	movs	r2, #0
   bcf96:	460b      	mov	r3, r1
   bcf98:	ec43 2b10 	vmov	d0, r2, r3
   bcf9c:	b002      	add	sp, #8
   bcf9e:	4770      	bx	lr
   bcfa0:	4249      	negs	r1, r1
   bcfa2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bcfa6:	ea4f 5021 	mov.w	r0, r1, asr #20
   bcfaa:	f04f 0200 	mov.w	r2, #0
   bcfae:	f04f 0300 	mov.w	r3, #0
   bcfb2:	da04      	bge.n	bcfbe <__ulp+0x3e>
   bcfb4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bcfb8:	fa41 f300 	asr.w	r3, r1, r0
   bcfbc:	e7ec      	b.n	bcf98 <__ulp+0x18>
   bcfbe:	f1a0 0114 	sub.w	r1, r0, #20
   bcfc2:	291e      	cmp	r1, #30
   bcfc4:	bfda      	itte	le
   bcfc6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bcfca:	fa20 f101 	lsrle.w	r1, r0, r1
   bcfce:	2101      	movgt	r1, #1
   bcfd0:	460a      	mov	r2, r1
   bcfd2:	e7e1      	b.n	bcf98 <__ulp+0x18>
   bcfd4:	7ff00000 	.word	0x7ff00000

000bcfd8 <__b2d>:
   bcfd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bcfda:	6905      	ldr	r5, [r0, #16]
   bcfdc:	f100 0714 	add.w	r7, r0, #20
   bcfe0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bcfe4:	1f2e      	subs	r6, r5, #4
   bcfe6:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bcfea:	4620      	mov	r0, r4
   bcfec:	f7ff fd48 	bl	bca80 <__hi0bits>
   bcff0:	f1c0 0320 	rsb	r3, r0, #32
   bcff4:	280a      	cmp	r0, #10
   bcff6:	f8df c07c 	ldr.w	ip, [pc, #124]	; bd074 <__b2d+0x9c>
   bcffa:	600b      	str	r3, [r1, #0]
   bcffc:	dc14      	bgt.n	bd028 <__b2d+0x50>
   bcffe:	f1c0 0e0b 	rsb	lr, r0, #11
   bd002:	fa24 f10e 	lsr.w	r1, r4, lr
   bd006:	42b7      	cmp	r7, r6
   bd008:	ea41 030c 	orr.w	r3, r1, ip
   bd00c:	bf34      	ite	cc
   bd00e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bd012:	2100      	movcs	r1, #0
   bd014:	3015      	adds	r0, #21
   bd016:	fa04 f000 	lsl.w	r0, r4, r0
   bd01a:	fa21 f10e 	lsr.w	r1, r1, lr
   bd01e:	ea40 0201 	orr.w	r2, r0, r1
   bd022:	ec43 2b10 	vmov	d0, r2, r3
   bd026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bd028:	42b7      	cmp	r7, r6
   bd02a:	bf3a      	itte	cc
   bd02c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bd030:	f1a5 0608 	subcc.w	r6, r5, #8
   bd034:	2100      	movcs	r1, #0
   bd036:	380b      	subs	r0, #11
   bd038:	d017      	beq.n	bd06a <__b2d+0x92>
   bd03a:	f1c0 0c20 	rsb	ip, r0, #32
   bd03e:	fa04 f500 	lsl.w	r5, r4, r0
   bd042:	42be      	cmp	r6, r7
   bd044:	fa21 f40c 	lsr.w	r4, r1, ip
   bd048:	ea45 0504 	orr.w	r5, r5, r4
   bd04c:	bf8c      	ite	hi
   bd04e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bd052:	2400      	movls	r4, #0
   bd054:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bd058:	fa01 f000 	lsl.w	r0, r1, r0
   bd05c:	fa24 f40c 	lsr.w	r4, r4, ip
   bd060:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bd064:	ea40 0204 	orr.w	r2, r0, r4
   bd068:	e7db      	b.n	bd022 <__b2d+0x4a>
   bd06a:	ea44 030c 	orr.w	r3, r4, ip
   bd06e:	460a      	mov	r2, r1
   bd070:	e7d7      	b.n	bd022 <__b2d+0x4a>
   bd072:	bf00      	nop
   bd074:	3ff00000 	.word	0x3ff00000

000bd078 <__d2b>:
   bd078:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bd07c:	4689      	mov	r9, r1
   bd07e:	2101      	movs	r1, #1
   bd080:	ec57 6b10 	vmov	r6, r7, d0
   bd084:	4690      	mov	r8, r2
   bd086:	f7ff fc09 	bl	bc89c <_Balloc>
   bd08a:	4604      	mov	r4, r0
   bd08c:	b930      	cbnz	r0, bd09c <__d2b+0x24>
   bd08e:	4602      	mov	r2, r0
   bd090:	4b25      	ldr	r3, [pc, #148]	; (bd128 <__d2b+0xb0>)
   bd092:	4826      	ldr	r0, [pc, #152]	; (bd12c <__d2b+0xb4>)
   bd094:	f240 310a 	movw	r1, #778	; 0x30a
   bd098:	f7fa fd94 	bl	b7bc4 <__assert_func>
   bd09c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bd0a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bd0a4:	bb35      	cbnz	r5, bd0f4 <__d2b+0x7c>
   bd0a6:	2e00      	cmp	r6, #0
   bd0a8:	9301      	str	r3, [sp, #4]
   bd0aa:	d028      	beq.n	bd0fe <__d2b+0x86>
   bd0ac:	4668      	mov	r0, sp
   bd0ae:	9600      	str	r6, [sp, #0]
   bd0b0:	f7ff fd06 	bl	bcac0 <__lo0bits>
   bd0b4:	9900      	ldr	r1, [sp, #0]
   bd0b6:	b300      	cbz	r0, bd0fa <__d2b+0x82>
   bd0b8:	9a01      	ldr	r2, [sp, #4]
   bd0ba:	f1c0 0320 	rsb	r3, r0, #32
   bd0be:	fa02 f303 	lsl.w	r3, r2, r3
   bd0c2:	430b      	orrs	r3, r1
   bd0c4:	40c2      	lsrs	r2, r0
   bd0c6:	6163      	str	r3, [r4, #20]
   bd0c8:	9201      	str	r2, [sp, #4]
   bd0ca:	9b01      	ldr	r3, [sp, #4]
   bd0cc:	61a3      	str	r3, [r4, #24]
   bd0ce:	2b00      	cmp	r3, #0
   bd0d0:	bf14      	ite	ne
   bd0d2:	2202      	movne	r2, #2
   bd0d4:	2201      	moveq	r2, #1
   bd0d6:	6122      	str	r2, [r4, #16]
   bd0d8:	b1d5      	cbz	r5, bd110 <__d2b+0x98>
   bd0da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bd0de:	4405      	add	r5, r0
   bd0e0:	f8c9 5000 	str.w	r5, [r9]
   bd0e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bd0e8:	f8c8 0000 	str.w	r0, [r8]
   bd0ec:	4620      	mov	r0, r4
   bd0ee:	b003      	add	sp, #12
   bd0f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bd0f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bd0f8:	e7d5      	b.n	bd0a6 <__d2b+0x2e>
   bd0fa:	6161      	str	r1, [r4, #20]
   bd0fc:	e7e5      	b.n	bd0ca <__d2b+0x52>
   bd0fe:	a801      	add	r0, sp, #4
   bd100:	f7ff fcde 	bl	bcac0 <__lo0bits>
   bd104:	9b01      	ldr	r3, [sp, #4]
   bd106:	6163      	str	r3, [r4, #20]
   bd108:	2201      	movs	r2, #1
   bd10a:	6122      	str	r2, [r4, #16]
   bd10c:	3020      	adds	r0, #32
   bd10e:	e7e3      	b.n	bd0d8 <__d2b+0x60>
   bd110:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bd114:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bd118:	f8c9 0000 	str.w	r0, [r9]
   bd11c:	6918      	ldr	r0, [r3, #16]
   bd11e:	f7ff fcaf 	bl	bca80 <__hi0bits>
   bd122:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bd126:	e7df      	b.n	bd0e8 <__d2b+0x70>
   bd128:	000bde09 	.word	0x000bde09
   bd12c:	000bde90 	.word	0x000bde90

000bd130 <__ratio>:
   bd130:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd134:	4688      	mov	r8, r1
   bd136:	4669      	mov	r1, sp
   bd138:	4681      	mov	r9, r0
   bd13a:	f7ff ff4d 	bl	bcfd8 <__b2d>
   bd13e:	a901      	add	r1, sp, #4
   bd140:	4640      	mov	r0, r8
   bd142:	ec55 4b10 	vmov	r4, r5, d0
   bd146:	f7ff ff47 	bl	bcfd8 <__b2d>
   bd14a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bd14e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bd152:	eba3 0c02 	sub.w	ip, r3, r2
   bd156:	e9dd 3200 	ldrd	r3, r2, [sp]
   bd15a:	1a9b      	subs	r3, r3, r2
   bd15c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bd160:	ec51 0b10 	vmov	r0, r1, d0
   bd164:	2b00      	cmp	r3, #0
   bd166:	bfd6      	itet	le
   bd168:	460a      	movle	r2, r1
   bd16a:	462a      	movgt	r2, r5
   bd16c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bd170:	468b      	mov	fp, r1
   bd172:	462f      	mov	r7, r5
   bd174:	bfd4      	ite	le
   bd176:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bd17a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bd17e:	4620      	mov	r0, r4
   bd180:	ee10 2a10 	vmov	r2, s0
   bd184:	465b      	mov	r3, fp
   bd186:	4639      	mov	r1, r7
   bd188:	f7fd fdb8 	bl	bacfc <__aeabi_ddiv>
   bd18c:	ec41 0b10 	vmov	d0, r0, r1
   bd190:	b003      	add	sp, #12
   bd192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bd196 <__copybits>:
   bd196:	3901      	subs	r1, #1
   bd198:	b570      	push	{r4, r5, r6, lr}
   bd19a:	1149      	asrs	r1, r1, #5
   bd19c:	6914      	ldr	r4, [r2, #16]
   bd19e:	3101      	adds	r1, #1
   bd1a0:	f102 0314 	add.w	r3, r2, #20
   bd1a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bd1a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bd1ac:	1f05      	subs	r5, r0, #4
   bd1ae:	42a3      	cmp	r3, r4
   bd1b0:	d30c      	bcc.n	bd1cc <__copybits+0x36>
   bd1b2:	1aa3      	subs	r3, r4, r2
   bd1b4:	3b11      	subs	r3, #17
   bd1b6:	f023 0303 	bic.w	r3, r3, #3
   bd1ba:	3211      	adds	r2, #17
   bd1bc:	42a2      	cmp	r2, r4
   bd1be:	bf88      	it	hi
   bd1c0:	2300      	movhi	r3, #0
   bd1c2:	4418      	add	r0, r3
   bd1c4:	2300      	movs	r3, #0
   bd1c6:	4288      	cmp	r0, r1
   bd1c8:	d305      	bcc.n	bd1d6 <__copybits+0x40>
   bd1ca:	bd70      	pop	{r4, r5, r6, pc}
   bd1cc:	f853 6b04 	ldr.w	r6, [r3], #4
   bd1d0:	f845 6f04 	str.w	r6, [r5, #4]!
   bd1d4:	e7eb      	b.n	bd1ae <__copybits+0x18>
   bd1d6:	f840 3b04 	str.w	r3, [r0], #4
   bd1da:	e7f4      	b.n	bd1c6 <__copybits+0x30>

000bd1dc <__any_on>:
   bd1dc:	f100 0214 	add.w	r2, r0, #20
   bd1e0:	6900      	ldr	r0, [r0, #16]
   bd1e2:	114b      	asrs	r3, r1, #5
   bd1e4:	4298      	cmp	r0, r3
   bd1e6:	b510      	push	{r4, lr}
   bd1e8:	db11      	blt.n	bd20e <__any_on+0x32>
   bd1ea:	dd0a      	ble.n	bd202 <__any_on+0x26>
   bd1ec:	f011 011f 	ands.w	r1, r1, #31
   bd1f0:	d007      	beq.n	bd202 <__any_on+0x26>
   bd1f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bd1f6:	fa24 f001 	lsr.w	r0, r4, r1
   bd1fa:	fa00 f101 	lsl.w	r1, r0, r1
   bd1fe:	428c      	cmp	r4, r1
   bd200:	d10b      	bne.n	bd21a <__any_on+0x3e>
   bd202:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bd206:	4293      	cmp	r3, r2
   bd208:	d803      	bhi.n	bd212 <__any_on+0x36>
   bd20a:	2000      	movs	r0, #0
   bd20c:	bd10      	pop	{r4, pc}
   bd20e:	4603      	mov	r3, r0
   bd210:	e7f7      	b.n	bd202 <__any_on+0x26>
   bd212:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bd216:	2900      	cmp	r1, #0
   bd218:	d0f5      	beq.n	bd206 <__any_on+0x2a>
   bd21a:	2001      	movs	r0, #1
   bd21c:	e7f6      	b.n	bd20c <__any_on+0x30>

000bd21e <_calloc_r>:
   bd21e:	b513      	push	{r0, r1, r4, lr}
   bd220:	434a      	muls	r2, r1
   bd222:	4611      	mov	r1, r2
   bd224:	9201      	str	r2, [sp, #4]
   bd226:	f7fa fcbd 	bl	b7ba4 <_malloc_r>
   bd22a:	4604      	mov	r4, r0
   bd22c:	b118      	cbz	r0, bd236 <_calloc_r+0x18>
   bd22e:	9a01      	ldr	r2, [sp, #4]
   bd230:	2100      	movs	r1, #0
   bd232:	f7fd ffb9 	bl	bb1a8 <memset>
   bd236:	4620      	mov	r0, r4
   bd238:	b002      	add	sp, #8
   bd23a:	bd10      	pop	{r4, pc}
   bd23c:	0000      	movs	r0, r0
	...

000bd240 <nan>:
   bd240:	ed9f 0b01 	vldr	d0, [pc, #4]	; bd248 <nan+0x8>
   bd244:	4770      	bx	lr
   bd246:	bf00      	nop
   bd248:	00000000 	.word	0x00000000
   bd24c:	7ff80000 	.word	0x7ff80000

000bd250 <nanf>:
   bd250:	ed9f 0a01 	vldr	s0, [pc, #4]	; bd258 <nanf+0x8>
   bd254:	4770      	bx	lr
   bd256:	bf00      	nop
   bd258:	7fc00000 	.word	0x7fc00000

000bd25c <__ascii_wctomb>:
   bd25c:	b149      	cbz	r1, bd272 <__ascii_wctomb+0x16>
   bd25e:	2aff      	cmp	r2, #255	; 0xff
   bd260:	bf85      	ittet	hi
   bd262:	238a      	movhi	r3, #138	; 0x8a
   bd264:	6003      	strhi	r3, [r0, #0]
   bd266:	700a      	strbls	r2, [r1, #0]
   bd268:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   bd26c:	bf98      	it	ls
   bd26e:	2001      	movls	r0, #1
   bd270:	4770      	bx	lr
   bd272:	4608      	mov	r0, r1
   bd274:	4770      	bx	lr
	...

000bd278 <__aeabi_d2lz>:
   bd278:	b538      	push	{r3, r4, r5, lr}
   bd27a:	2200      	movs	r2, #0
   bd27c:	2300      	movs	r3, #0
   bd27e:	4604      	mov	r4, r0
   bd280:	460d      	mov	r5, r1
   bd282:	f7fd fe83 	bl	baf8c <__aeabi_dcmplt>
   bd286:	b928      	cbnz	r0, bd294 <__aeabi_d2lz+0x1c>
   bd288:	4620      	mov	r0, r4
   bd28a:	4629      	mov	r1, r5
   bd28c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bd290:	f7fd bf2a 	b.w	bb0e8 <__aeabi_d2ulz>
   bd294:	4620      	mov	r0, r4
   bd296:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bd29a:	f7fd ff25 	bl	bb0e8 <__aeabi_d2ulz>
   bd29e:	4240      	negs	r0, r0
   bd2a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bd2a4:	bd38      	pop	{r3, r4, r5, pc}
   bd2a6:	bf00      	nop

000bd2a8 <dynalib_user>:
   bd2a8:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bd2b8:	0000 0000 6162 6973 5f63 7473 6972 676e     ....basic_string
   bd2c8:	3a3a 4d5f 635f 6e6f 7473 7572 7463 6e20     ::_M_construct n
   bd2d8:	6c75 206c 6f6e 2074 6176 696c 0064 450a     ull not valid..E
   bd2e8:	746e 7265 7420 6568 6c20 6e69 2065 6f63     nter the line co
   bd2f8:	6f6c 2072 666f 7420 6568 6420 7665 6369     lor of the devic
   bd308:	2065 6977 6874 7420 6568 6220 696c 6b6e     e with the blink
   bd318:	6e69 2067 454c 3a44 0020 6572 6563 7669     ing LED: .receiv
   bd328:	2065 6572 0064 6572 6563 7669 2065 6c62     e red.receive bl
   bd338:	6575 7200 6365 6965 6576 6720 6572 6e65     ue.receive green
   bd348:	0a00 6553 7571 6e65 6563 203a 6300 6e61     ..Sequence: .can
   bd358:	6f6e 2074 7263 6165 6574 7320 6474 3a3a     not create std::
   bd368:	6576 7463 726f 6c20 7261 6567 2072 6874     vector larger th
   bd378:	6e61 6d20 7861 735f 7a69 2865 0029 720a     an max_size()..r
   bd388:	7165 6575 7473 6320 646f 2065 2c31 6120     equest code 1, a
   bd398:	6464 6572 7373 203a 7400 6172 736e 696d     ddress: .transmi
   bd3a8:	7373 6f69 206e 6572 6963 7665 6465 6620     ssion recieved f
   bd3b8:	6f72 3a6d 0020 6564 6976 6563 6920 3a64     rom: .device id:
   bd3c8:	0020 7274 6e61 6d73 7369 6973 6e6f 7320      .transmission s
   bd3d8:	6e65 2074 6f74 203a 7200 7165 6575 7473     ent to: .request
   bd3e8:	6320 646f 2065 2c32 6120 6464 6572 7373      code 2, address
   bd3f8:	203a 6300 6e6f 6c66 6369 2074 6576 6972     : .conflict veri
   bd408:	6966 6163 6974 6e6f 203a 0a00 6f43 6e6e     fication: ..Conn
   bd418:	6365 6574 2064 6f74 203a 4600 3046 3030     ected to: .FF000
   bd428:	0030 4130 3030 3030 3000 3030 4630 0046     0.0A0000.0000FF.
   bd438:	3030 3030 4130 6200 6f72 6e77 4600 4646     00000A.brown.FFF
   bd448:	3046 0030 4130 4130 3030 3000 4630 3046     F00.0A0A00.00FF0
   bd458:	0030 3030 4130 3030 6f00 6172 676e 0065     0.000A00.orange.
   bd468:	4646 3038 3030 3000 3041 3035 0030 7570     FF8000.0A0500.pu
   bd478:	7072 656c 3200 3030 4630 0046 3230 3030     rple.2000FF.0200
   bd488:	4130 7000 6e69 006b 4646 3038 3038 3000     0A.pink.FF8080.0
   bd498:	3041 3035 0035 4536 3034 3030 3130 422d     A0505.6E400001-B
   bd4a8:	4135 2d33 3346 3339 452d 4130 2d39 3545     5A3-F393-E0A9-E5
   bd4b8:	4530 3432 4344 4143 4539 3600 3445 3030     0E24DCCA9E.6E400
   bd4c8:	3030 2d32 3542 3341 462d 3933 2d33 3045     002-B5A3-F393-E0
   bd4d8:	3941 452d 3035 3245 4434 4343 3941 0045     A9-E50E24DCCA9E.
   bd4e8:	4536 3034 3030 3330 422d 4135 2d33 3346     6E400003-B5A3-F3
   bd4f8:	3339 452d 4130 2d39 3545 4530 3432 4344     93-E0A9-E50E24DC
   bd508:	4143 4539 7400 0078 7872 7400 6572 2e6b     CA9E.tx.rx.trek.
   bd518:	6874 7765 6c63 632e 6d6f 6c00 6f6f 2070     thewcl.com.loop 
   bd528:	7473 7261 0074 6925 202c 2f00 6f6c 706f     start.%i, ./loop
   bd538:	742d 6172 6b63 2f73 7463 3f61 696c 656e     -tracks/cta?line
   bd548:	3d73 4700 5445 7000 7261 6973 676e 7000     s=.GET.parsing.p
   bd558:	7261 6973 676e 6620 6961 656c 0064 696c     arsing failed.li
   bd568:	656e 0073 7274 6961 736e 6e00 7865 5f74     nes.trains.next_
   bd578:	7473 706f 6400 7365 6974 616e 6974 6e6f     stop.destination
   bd588:	6400 7269 6365 6974 6e6f 6c00 7461 7469     .direction.latit
   bd598:	6475 0065 6f6c 676e 7469 6475 0065 7262     ude.longitude.br
   bd5a8:	6165 006b 6e69 6720 6572 6e65 2500 2073     eak.in green.%s 
   bd5b8:	6172 6c69 7020 7261 2074 6925 203a 0000     rail part %i: ..

000bd5c8 <_ZTV16JsonParserStaticILj10000ELj1000EE>:
	...
   bd5d0:	40b9 000b 40cd 000b 6341 6563 7470 2f00     .@...@..Accept./
   bd5e0:	2f2a 0000 0019 0000 0003 0000 0007 0000     */..............
   bd5f0:	0005 0000 000c 0000 0008 0000 0005 0000     ................
   bd600:	0005 0000 0005 0000 0019 0000 0005 0000     ................
   bd610:	000f 0000 000a 0000 000a 0000 000a 0000     ................
   bd620:	000a 0000 0014 0000 0000 0000 0028 0000     ............(...
   bd630:	0000 0000 0002 0000 0006 0000 0000 0000     ................
   bd640:	0000 0000 000f 0000 000a 0000 000a 0000     ................
   bd650:	000f 0000 000f 0000 000f 0000 0014 0000     ................
   bd660:	0000 0000 0001 0000 0003 0000 0000 0000     ................
   bd670:	0000 0000 000c 0000 0007 0000 0001 0000     ................
   bd680:	000a 0000 000a 0000 000a 0000 000a 0000     ................
   bd690:	000c 0000 0000 0000 0028 0000 0008 0000     ........(.......
   bd6a0:	0003 0000 0007 0000 0001 0000 0003 0000     ................
   bd6b0:	0007 0000 0007 0000 0006 0000 000a 0000     ................
   bd6c0:	000a 0000 000a 0000 000a 0000 000e 0000     ................
   bd6d0:	0000 0000 0028 0000 0006 0000 0003 0000     ....(...........
   bd6e0:	0007 0000 0002 0000 0003 0000 4820 5454     ............ HTT
   bd6f0:	2f50 2e31 0d30 000a 6c63 736f 0065 6f43     P/1.0...close.Co
   bd700:	6e6e 6365 6974 6e6f 4800 534f 0054 6f43     nnection.HOST.Co
   bd710:	746e 6e65 2d74 654c 676e 6874 5000 534f     ntent-Length.POS
   bd720:	0054 0a0d 0a0d 2500 3430 0078               T......%04x.

000bd72c <_ZTV10JsonBuffer>:
	...
   bd734:	6d11 000b 6d2d 000b                         .m..-m..

000bd73c <_ZTV10JsonParser>:
	...
   bd744:	6d41 000b 6d65 000b                         Am..em..

000bd74c <_ZTV13JsonReference>:
	...
   bd754:	6d01 000b 6d03 000b 7341 6573 7472 6f69     .m...m..Assertio
   bd764:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   bd774:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   bd784:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   bd794:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   bd7a4:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   bd7b4:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   bd7c4:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   bd7d4:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   bd7e4:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   bd7f4:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   bd804:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   bd814:	6976 6563 002e 6f43 6e6e 6365 6574 2064     vice..Connected 
   bd824:	7962 4320 6e65 7274 6c61 6420 7665 6369     by Central devic
   bd834:	2e65 4400 7369 6f63 6e6e 6365 6574 2064     e..Disconnected 
   bd844:	7962 7220 6d65 746f 2065 6564 6976 6563     by remote device
   bd854:	002e 7544 6c70 6369 7461 6465 6320 6168     ..Duplicated cha
   bd864:	6172 7463 7265 7369 6974 2063 6163 6e6e     racteristic cann
   bd874:	746f 6220 2065 6461 6564 2e64 4600 6961     ot be added..Fai
   bd884:	656c 2064 6f74 6120 7070 6e65 2064 6f6c     led to append lo
   bd894:	6163 206c 6863 7261 6361 6574 6972 7473     cal characterist
   bd8a4:	6369 002e                                   ic..

000bd8a8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd8b0:	7bf1 000b 7c55 000b 7d3b 000b 7c7f 000b     .{..U|..;}...|..
   bd8c0:	7bf5 000b                                   .{..

000bd8c4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd8cc:	7bed 000b 7c63 000b 7bef 000b 7c85 000b     .{..c|...{...|..
   bd8dc:	7c15 000b                                   .|..

000bd8e0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd8e8:	7beb 000b 7c71 000b 84f5 000b 7c8b 000b     .{..q|.......|..
   bd8f8:	7c35 000b                                   5|..

000bd8fc <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bd908:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000bd91a <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bd91a:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000bd92a <_ZN8particle7BleUuid9BASE_UUIDE>:
   bd92a:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000bd93c <_ZTVN5spark13EthernetClassE>:
	...
   bd944:	8fa3 000b 8f99 000b 8f8f 000b 8f85 000b     ................
   bd954:	8f79 000b 8f6d 000b 9229 000b 9231 000b     y...m...)...1...
   bd964:	8f61 000b 8f59 000b 8f4f 000b 8f45 000b     a...Y...O...E...
   bd974:	9261 000b                                   a...

000bd978 <_ZTV7TwoWire>:
	...
   bd980:	8fc1 000b 900b 000b 8fe3 000b 8fc3 000b     ................
   bd990:	8feb 000b 8ff3 000b 8ffb 000b 9003 000b     ................

000bd9a0 <_ZTV9IPAddress>:
	...
   bd9a8:	90cd 000b 90bd 000b 90bf 000b 7061 0070     ............app.

000bd9b8 <_ZTVN5spark12NetworkClassE>:
	...
   bd9c0:	91e9 000b 91f3 000b 91fd 000b 9207 000b     ................
   bd9d0:	9211 000b 921d 000b 9229 000b 9231 000b     ........)...1...
   bd9e0:	9239 000b 9245 000b 924d 000b 9257 000b     9...E...M...W...
   bd9f0:	9261 000b 6977 6972 676e 7200 6365 2076     a...wiring.recv 
   bda00:	7265 6f72 2072 203d 6425 0000               error = %d..

000bda0c <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bda14:	9751 000b 9775 000b 9ca7 000b 9783 000b     Q...u...........
   bda24:	9755 000b                                   U...

000bda28 <_ZTV9TCPClient>:
	...
   bda30:	9801 000b 9835 000b 96cd 000b 96e7 000b     ....5...........
   bda40:	9b3d 000b 9711 000b 99b3 000b 9745 000b     =...........E...
   bda50:	9a45 000b 9885 000b 99e1 000b 9bf1 000b     E...............
   bda60:	9981 000b 9747 000b 96f9 000b 9789 000b     ....G...........
   bda70:	9865 000b 5925 252d 2d6d 6425 2554 3a48     e...%Y-%m-%dT%H:
   bda80:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000bda90 <_ZTV11USARTSerial>:
	...
   bda98:	9cc1 000b 9d2d 000b 9d05 000b 934d 000b     ....-.......M...
   bdaa8:	9cd5 000b 9cf1 000b 9ce3 000b 9cff 000b     ................
   bdab8:	9cc3 000b 9cc7 000b                         ........

000bdac0 <_ZTV9USBSerial>:
	...
   bdac8:	9d6b 000b 9dd3 000b 9da9 000b 934d 000b     k...........M...
   bdad8:	9d9b 000b 9d6d 000b 9d7d 000b 9dcd 000b     ....m...}.......
   bdae8:	9d8d 000b 9d65 000b                         ....e...

000bdaf0 <_ZTVN5spark9WiFiClassE>:
	...
   bdaf8:	9ecb 000b 9ec1 000b 9eb7 000b 9e6d 000b     ............m...
   bdb08:	9eab 000b 9e9f 000b 9229 000b 9231 000b     ........)...1...
   bdb18:	9e93 000b 9e8b 000b 9e81 000b 9e77 000b     ............w...
   bdb28:	9261 000b                                   a...

000bdb2c <_ZSt7nothrow>:
	...

000bdb2d <_ZTSSt19_Sp_make_shared_tag>:
   bdb2d:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bdb3d:	6572 5f64 6174 0067 0000                     red_tag....

000bdb48 <_ZTISt19_Sp_make_shared_tag>:
   bdb48:	dba0 000b db2d 000b 6162 6973 5f63 7473     ....-...basic_st
   bdb58:	6972 676e 3a3a 4d5f 635f 6572 7461 0065     ring::_M_create.

000bdb68 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bdb68:	dc00 000b db74 000b dc24 000b               ....t...$...

000bdb74 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bdb74:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bdb84:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bdb94:	0045 0000                                   E...

000bdb98 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bdb98:	0000 0000 db68 000b a2c1 000b a2d5 000b     ....h...........
   bdba8:	a469 000b a469 000b a33f 000b a281 000b     i...i...?.......
   bdbb8:	a327 000b a2e9 000b a2b3 000b               '...........

000bdbc4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bdbc4:	dc00 000b dbd0 000b db68 000b               ........h...

000bdbd0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bdbd0:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bdbe0:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bdbf0:	666e 456f 0000 0000                         nfoE....

000bdbf8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bdbf8:	0000 0000 dbc4 000b a369 000b a37d 000b     ........i...}...
   bdc08:	a469 000b a469 000b a33f 000b a281 000b     i...i...?.......
   bdc18:	a43d 000b a3c9 000b a391 000b               =...........

000bdc24 <_ZTISt9type_info>:
   bdc24:	dba0 000b dc2c 000b                         ....,...

000bdc2c <_ZTSSt9type_info>:
   bdc2c:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bdc3c:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bdc4c:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   bdc5c:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bdc6c:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bdc7c:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bdc8c:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bdc9c:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   bdcac:	6e69 7469 0079 6e61 0000 0000               inity.an....

000bdcb8 <fpi.1>:
   bdcb8:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bdcc8:	0000 0000                                   ....

000bdccc <fpinan.0>:
   bdccc:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   bdcdc:	0000 0000                                   ....

000bdce0 <tinytens>:
   bdce0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bdcf0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bdd00:	6f43 64ac 0628 1168                         Co.d(.h.

000bdd08 <_ctype_>:
   bdd08:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bdd18:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bdd28:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bdd38:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bdd48:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bdd58:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bdd68:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bdd78:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bdd88:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bde08:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bde18:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   bde28:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   bde38:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   bde48:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   bde58:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   bde68:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   bde78:	632e 0000                                   .c..

000bde7c <_C_numeric_locale>:
   bde7c:	d8a6 000b d726 000b 5390 2003 0043 4f50     ....&....S. C.PO
   bde8c:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   bde9c:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bdeac:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bdebc:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bdecc:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bdedc:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   bdeec:	0000 0000                                   ....

000bdef0 <__mprec_bigtens>:
   bdef0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bdf00:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bdf10:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bdf18 <__mprec_tens>:
   bdf18:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bdf28:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bdf38:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bdf48:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bdf58:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bdf68:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bdf78:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bdf88:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bdf98:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bdfa8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bdfb8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bdfc8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bdfd8:	9db4 79d9 7843 44ea                         ...yCx.D

000bdfe0 <p05.0>:
   bdfe0:	0005 0000 0019 0000 007d 0000               ........}...

000bdfec <link_const_variable_data_end>:
   bdfec:	000b60ad 	.word	0x000b60ad
   bdff0:	000b7659 	.word	0x000b7659
   bdff4:	000b8f35 	.word	0x000b8f35
   bdff8:	000b8fad 	.word	0x000b8fad
   bdffc:	000b91d9 	.word	0x000b91d9
   be000:	000b9339 	.word	0x000b9339
   be004:	000b9475 	.word	0x000b9475
   be008:	000b96a9 	.word	0x000b96a9
   be00c:	000b9cad 	.word	0x000b9cad
   be010:	000b9ed5 	.word	0x000b9ed5

000be014 <link_constructors_end>:
	...
