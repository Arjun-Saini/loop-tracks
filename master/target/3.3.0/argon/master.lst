
/Users/sainihome/Documents/GitHub/loop-tracks/master/target/3.3.0/argon/master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009c00  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bdc20  000bdc20  0000dc20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bdc44  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f0  2003534c  000bdc48  0001534c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000092b4  2003553c  2003553c  0002553c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000bde38  000bde38  0001de38  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bde60  000bde60  0001de60  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0013f74b  00000000  00000000  0001de64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00012c5d  00000000  00000000  0015d5af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000491cd  00000000  00000000  0017020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003278  00000000  00000000  001b93d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000cec8  00000000  00000000  001bc651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000366ff  00000000  00000000  001c9519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000446cf  00000000  00000000  001ffc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153804  00000000  00000000  002442e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000abbc  00000000  00000000  00397aec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f006 fed4 	bl	badde <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f006 fef6 	bl	bae2e <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003534c 	.word	0x2003534c
   b404c:	000bdc48 	.word	0x000bdc48
   b4050:	2003553c 	.word	0x2003553c
   b4054:	2003553c 	.word	0x2003553c
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f005 fe19 	bl	b9c98 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bdbf4 	.word	0x000bdbf4
   b4080:	000bdc1c 	.word	0x000bdc1c

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 be1e 	b.w	b5cc4 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 ff09 	bl	b5ea0 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f005 bdb9 	b.w	b9c08 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f003 bb53 	b.w	b7740 <malloc>

000b409a <_Znaj>:
   b409a:	f003 bb51 	b.w	b7740 <malloc>

000b409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409e:	f003 bb57 	b.w	b7750 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f003 bb55 	b.w	b7750 <free>

000b40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a6:	7800      	ldrb	r0, [r0, #0]
   b40a8:	fab0 f080 	clz	r0, r0
   b40ac:	0940      	lsrs	r0, r0, #5
   b40ae:	4770      	bx	lr

000b40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b0:	2301      	movs	r3, #1
   b40b2:	7003      	strb	r3, [r0, #0]
   b40b4:	4770      	bx	lr
	...

000b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40b8:	b510      	push	{r4, lr}
   b40ba:	4b03      	ldr	r3, [pc, #12]	; (b40c8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev+0x10>)
   b40bc:	6003      	str	r3, [r0, #0]
   b40be:	4604      	mov	r4, r0
   b40c0:	f002 fc8c 	bl	b69dc <_ZN10JsonParserD1Ev>
   b40c4:	4620      	mov	r0, r4
   b40c6:	bd10      	pop	{r4, pc}
   b40c8:	000bd230 	.word	0x000bd230

000b40cc <_ZN16JsonParserStaticILj10000ELj1000EED0Ev>:
   b40cc:	b510      	push	{r4, lr}
   b40ce:	4604      	mov	r4, r0
   b40d0:	f7ff fff2 	bl	b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
   b40d4:	4620      	mov	r0, r4
   b40d6:	f246 51bc 	movw	r1, #26044	; 0x65bc
   b40da:	f7ff ffe2 	bl	b40a2 <_ZdlPvj>
   b40de:	4620      	mov	r0, r4
   b40e0:	bd10      	pop	{r4, pc}

000b40e2 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b40e2:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b40e4:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b40e6:	4606      	mov	r6, r0
   b40e8:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b40ea:	da0b      	bge.n	b4104 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b40ec:	2a0a      	cmp	r2, #10
   b40ee:	d109      	bne.n	b4104 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b40f0:	212d      	movs	r1, #45	; 0x2d
   b40f2:	f004 ff55 	bl	b8fa0 <_ZN5Print5printEc>
            val = -n;
   b40f6:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b40f8:	b2ea      	uxtb	r2, r5
   b40fa:	4630      	mov	r0, r6
    }
}
   b40fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b4100:	f004 bf67 	b.w	b8fd2 <_ZN5Print11printNumberEmh>
            val = n;
   b4104:	4621      	mov	r1, r4
   b4106:	e7f7      	b.n	b40f8 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>

000b4108 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>:

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
   b4108:	b508      	push	{r3, lr}
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b410a:	4603      	mov	r3, r0
   b410c:	b150      	cbz	r0, b4124 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x1c>
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      _GLIBCXX_NODISCARD _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {
	if (__n > this->_M_max_size())
   b410e:	4a06      	ldr	r2, [pc, #24]	; (b4128 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x20>)
   b4110:	4290      	cmp	r0, r2
   b4112:	d901      	bls.n	b4118 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b4114:	f005 fe5a 	bl	b9dcc <_ZSt17__throw_bad_allocv>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4118:	200c      	movs	r0, #12
   b411a:	4358      	muls	r0, r3
      }
   b411c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4120:	f7ff bfb9 	b.w	b4096 <_Znwj>
   b4124:	bd08      	pop	{r3, pc}
   b4126:	bf00      	nop
   b4128:	0aaaaaaa 	.word	0x0aaaaaaa

000b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>:

      pointer
      _M_local_data()
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b412c:	f100 0308 	add.w	r3, r0, #8
#if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
   b4130:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4132:	4604      	mov	r4, r0
	: allocator_type(__a), _M_p(__dat) { }
   b4134:	6003      	str	r3, [r0, #0]
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b4136:	460d      	mov	r5, r1
   b4138:	b1d9      	cbz	r1, b4172 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x46>
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   b413a:	4608      	mov	r0, r1
   b413c:	f006 fec0 	bl	baec0 <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
   b4140:	280f      	cmp	r0, #15
   b4142:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b4146:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b4148:	d907      	bls.n	b415a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x2e>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   b414a:	2200      	movs	r2, #0
   b414c:	a901      	add	r1, sp, #4
   b414e:	4620      	mov	r0, r4
   b4150:	f005 fe58 	bl	b9e04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b4154:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4156:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4158:	60a3      	str	r3, [r4, #8]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b415a:	4632      	mov	r2, r6
   b415c:	4629      	mov	r1, r5
   b415e:	6820      	ldr	r0, [r4, #0]
   b4160:	f005 fe8b 	bl	b9e7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   b4164:	9b01      	ldr	r3, [sp, #4]
      { __c1 = __c2; }
   b4166:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4168:	6063      	str	r3, [r4, #4]
   b416a:	2100      	movs	r1, #0
   b416c:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b416e:	b002      	add	sp, #8
   b4170:	bd70      	pop	{r4, r5, r6, pc}
	  std::__throw_logic_error(__N("basic_string::"
   b4172:	4801      	ldr	r0, [pc, #4]	; (b4178 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x4c>)
   b4174:	f005 fe2d 	bl	b9dd2 <_ZSt19__throw_logic_errorPKc>
   b4178:	000bce98 	.word	0x000bce98

000b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b417c:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b417e:	4603      	mov	r3, r0
   b4180:	b150      	cbz	r0, b4198 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x1c>
	if (__n > this->_M_max_size())
   b4182:	4a06      	ldr	r2, [pc, #24]	; (b419c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x20>)
   b4184:	4290      	cmp	r0, r2
   b4186:	d901      	bls.n	b418c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b4188:	f005 fe20 	bl	b9dcc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b418c:	2018      	movs	r0, #24
   b418e:	4358      	muls	r0, r3
      }
   b4190:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4194:	f7ff bf7f 	b.w	b4096 <_Znwj>
   b4198:	bd08      	pop	{r3, pc}
   b419a:	bf00      	nop
   b419c:	05555555 	.word	0x05555555

000b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b41a0:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b41a2:	b148      	cbz	r0, b41b8 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b41a4:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   b41a8:	d301      	bcc.n	b41ae <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b41aa:	f005 fe0f 	bl	b9dcc <_ZSt17__throw_bad_allocv>
      }
   b41ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b41b2:	0080      	lsls	r0, r0, #2
   b41b4:	f7ff bf6f 	b.w	b4096 <_Znwj>
   b41b8:	bd08      	pop	{r3, pc}

000b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b41ba:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b41bc:	b148      	cbz	r0, b41d2 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b41be:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
   b41c2:	d301      	bcc.n	b41c8 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b41c4:	f005 fe02 	bl	b9dcc <_ZSt17__throw_bad_allocv>
      }
   b41c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b41cc:	00c0      	lsls	r0, r0, #3
   b41ce:	f7ff bf62 	b.w	b4096 <_Znwj>
   b41d2:	bd08      	pop	{r3, pc}

000b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>:
      basic_string(const basic_string& __str)
   b41d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b41d6:	f100 0308 	add.w	r3, r0, #8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b41da:	6003      	str	r3, [r0, #0]

      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      size_type
      length() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
   b41dc:	e9d1 5300 	ldrd	r5, r3, [r1]
      basic_string(const basic_string& __str)
   b41e0:	4604      	mov	r4, r0
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b41e2:	18ee      	adds	r6, r5, r3
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   b41e4:	b91d      	cbnz	r5, b41ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
   b41e6:	b116      	cbz	r6, b41ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
	  std::__throw_logic_error(__N("basic_string::"
   b41e8:	480c      	ldr	r0, [pc, #48]	; (b421c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x48>)
   b41ea:	f005 fdf2 	bl	b9dd2 <_ZSt19__throw_logic_errorPKc>
	if (__dnew > size_type(_S_local_capacity))
   b41ee:	2b0f      	cmp	r3, #15
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b41f0:	9301      	str	r3, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b41f2:	d907      	bls.n	b4204 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x30>
	    _M_data(_M_create(__dnew, size_type(0)));
   b41f4:	2200      	movs	r2, #0
   b41f6:	a901      	add	r1, sp, #4
   b41f8:	4620      	mov	r0, r4
   b41fa:	f005 fe03 	bl	b9e04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b41fe:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4200:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4202:	60a3      	str	r3, [r4, #8]
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b4204:	4632      	mov	r2, r6
   b4206:	4629      	mov	r1, r5
   b4208:	6820      	ldr	r0, [r4, #0]
   b420a:	f005 fe31 	bl	b9e70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	_M_set_length(__dnew);
   b420e:	9b01      	ldr	r3, [sp, #4]
   b4210:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4212:	6063      	str	r3, [r4, #4]
   b4214:	2100      	movs	r1, #0
   b4216:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b4218:	b002      	add	sp, #8
   b421a:	bd70      	pop	{r4, r5, r6, pc}
   b421c:	000bce98 	.word	0x000bce98

000b4220 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4220:	6803      	ldr	r3, [r0, #0]
   b4222:	b2c9      	uxtb	r1, r1
   b4224:	689b      	ldr	r3, [r3, #8]
   b4226:	4718      	bx	r3

000b4228 <_ZN5Print5writeEPKc.isra.0>:
    size_t write(const char *str) {
   b4228:	b513      	push	{r0, r1, r4, lr}
   b422a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
   b422c:	b161      	cbz	r1, b4248 <_ZN5Print5writeEPKc.isra.0+0x20>
      return write((const uint8_t *)str, strlen(str));
   b422e:	4608      	mov	r0, r1
   b4230:	9101      	str	r1, [sp, #4]
   b4232:	f006 fe45 	bl	baec0 <strlen>
   b4236:	6823      	ldr	r3, [r4, #0]
   b4238:	9901      	ldr	r1, [sp, #4]
   b423a:	68db      	ldr	r3, [r3, #12]
   b423c:	4602      	mov	r2, r0
   b423e:	4620      	mov	r0, r4
    }
   b4240:	b002      	add	sp, #8
   b4242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4246:	4718      	bx	r3
    }
   b4248:	b002      	add	sp, #8
   b424a:	bd10      	pop	{r4, pc}

000b424c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
    }
  }
  sequenceArr[4] = addressArr[2]; //temp
}

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b424c:	b5f0      	push	{r4, r5, r6, r7, lr}
  String inputBuffer = "";

  if(bleCount <= slaveCountExpected){
   b424e:	4c4b      	ldr	r4, [pc, #300]	; (b437c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4250:	b085      	sub	sp, #20
   b4252:	4607      	mov	r7, r0
   b4254:	460d      	mov	r5, r1
  String inputBuffer = "";
   b4256:	4668      	mov	r0, sp
   b4258:	4949      	ldr	r1, [pc, #292]	; (b4380 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x134>)
   b425a:	f004 ff5a 	bl	b9112 <_ZN6StringC1EPK19__FlashStringHelper>
  if(bleCount <= slaveCountExpected){
   b425e:	6823      	ldr	r3, [r4, #0]
   b4260:	2b03      	cmp	r3, #3
   b4262:	dc69      	bgt.n	b4338 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xec>
    for(int i = 0; i < len - 1; i++){
   b4264:	2600      	movs	r6, #0
   b4266:	3d01      	subs	r5, #1
   b4268:	42b5      	cmp	r5, r6
   b426a:	d905      	bls.n	b4278 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b426c:	5db9      	ldrb	r1, [r7, r6]
   b426e:	4668      	mov	r0, sp
   b4270:	f004 ffbd 	bl	b91ee <_ZN6String6concatEc>
   b4274:	3601      	adds	r6, #1
   b4276:	e7f7      	b.n	b4268 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c>
      inputBuffer += (char)data[i];
      //input = atoi(inputBuffer);
    }

    if(bleCount < slaveCountExpected){
   b4278:	6823      	ldr	r3, [r4, #0]
   b427a:	2b02      	cmp	r3, #2
   b427c:	dc04      	bgt.n	b4288 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3c>
      txCharacteristic.setValue("\nEnter the line color of the device with the blinking LED: ");
   b427e:	4941      	ldr	r1, [pc, #260]	; (b4384 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   b4280:	4841      	ldr	r0, [pc, #260]	; (b4388 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   b4282:	2200      	movs	r2, #0
   b4284:	f003 fd56 	bl	b7d34 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    }

    Wire.beginTransmission(addressArr[bleCount]);
   b4288:	f005 fd3a 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b428c:	4e3f      	ldr	r6, [pc, #252]	; (b438c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x140>)
   b428e:	6823      	ldr	r3, [r4, #0]
   b4290:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   b4294:	f004 fd06 	bl	b8ca4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('3');
   b4298:	f005 fd32 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b429c:	2133      	movs	r1, #51	; 0x33
   b429e:	f7ff ffbf 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b42a2:	f005 fd2d 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b42a6:	f004 fd04 	bl	b8cb2 <_ZN7TwoWire15endTransmissionEv>

    if(bleCount > 0){
   b42aa:	6823      	ldr	r3, [r4, #0]
   b42ac:	2b00      	cmp	r3, #0
   b42ae:	dd43      	ble.n	b4338 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xec>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b42b0:	4937      	ldr	r1, [pc, #220]	; (b4390 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x144>)
   b42b2:	4668      	mov	r0, sp
   b42b4:	f004 ffc9 	bl	b924a <_ZNK6String6equalsEPKc>
      int colorAdr = 0;
      if(inputBuffer == "red"){
   b42b8:	2800      	cmp	r0, #0
   b42ba:	d045      	beq.n	b4348 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>
        Serial.println("receive red");
   b42bc:	f005 fbd2 	bl	b9a64 <_Z16_fetch_usbserialv>
   b42c0:	4934      	ldr	r1, [pc, #208]	; (b4394 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x148>)
   b42c2:	f004 fe7c 	bl	b8fbe <_ZN5Print7printlnEPKc>
        colorAdr = 0;
   b42c6:	2000      	movs	r0, #0
      // Wire.beginTransmission(addressArr[bleCount - 1]);
      // Wire.write(String(railways.at(colorAdr).colors.at(0).c_str()));
      // Wire.write(String(railways.at(colorAdr).colors.at(1).c_str()));
      // Wire.endTransmission();

      sequenceArr[bleCount - 1] = addressArr[colorAdr];
   b42c8:	6823      	ldr	r3, [r4, #0]
   b42ca:	4d33      	ldr	r5, [pc, #204]	; (b4398 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14c>)
   b42cc:	f856 2020 	ldr.w	r2, [r6, r0, lsl #2]
   b42d0:	3b01      	subs	r3, #1
   b42d2:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
      
      Wire.beginTransmission(addressArr[bleCount - 1]);
   b42d6:	f005 fd13 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b42da:	6823      	ldr	r3, [r4, #0]
   b42dc:	3b01      	subs	r3, #1
   b42de:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   b42e2:	f004 fcdf 	bl	b8ca4 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('4');
   b42e6:	f005 fd0b 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b42ea:	2134      	movs	r1, #52	; 0x34
   b42ec:	f7ff ff98 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b42f0:	f005 fd06 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b42f4:	f004 fcdd 	bl	b8cb2 <_ZN7TwoWire15endTransmissionEv>
      if(bleCount == slaveCountExpected){
   b42f8:	6823      	ldr	r3, [r4, #0]
   b42fa:	2b03      	cmp	r3, #3
   b42fc:	d11c      	bne.n	b4338 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xec>
        userInput = true;
   b42fe:	4b27      	ldr	r3, [pc, #156]	; (b439c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x150>)
  if(bleCount == slaveCountExpected){
    delay(1000);
    Serial.println("\nSequence: ");
    for(int i = 0; i < slaveCountExpected; i++){
      Serial.print(sequenceArr[i]);
      Serial.print(", ");
   b4300:	4f27      	ldr	r7, [pc, #156]	; (b43a0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x154>)
        userInput = true;
   b4302:	2201      	movs	r2, #1
    delay(1000);
   b4304:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
        userInput = true;
   b4308:	701a      	strb	r2, [r3, #0]
    delay(1000);
   b430a:	f003 fa69 	bl	b77e0 <delay>
    Serial.println("\nSequence: ");
   b430e:	f005 fba9 	bl	b9a64 <_Z16_fetch_usbserialv>
   b4312:	4924      	ldr	r1, [pc, #144]	; (b43a4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x158>)
   b4314:	f004 fe53 	bl	b8fbe <_ZN5Print7printlnEPKc>
    for(int i = 0; i < slaveCountExpected; i++){
   b4318:	2600      	movs	r6, #0
      Serial.print(sequenceArr[i]);
   b431a:	f005 fba3 	bl	b9a64 <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   b431e:	f855 1b04 	ldr.w	r1, [r5], #4
   b4322:	220a      	movs	r2, #10
   b4324:	f7ff fedd 	bl	b40e2 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
    for(int i = 0; i < slaveCountExpected; i++){
   b4328:	3601      	adds	r6, #1
      Serial.print(", ");
   b432a:	f005 fb9b 	bl	b9a64 <_Z16_fetch_usbserialv>
   b432e:	4639      	mov	r1, r7
   b4330:	f004 fe32 	bl	b8f98 <_ZN5Print5printEPKc>
    for(int i = 0; i < slaveCountExpected; i++){
   b4334:	2e03      	cmp	r6, #3
   b4336:	d1f0      	bne.n	b431a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xce>
    }
    // BLE.disconnect();
    // BLE.off();
  }

  bleCount++;
   b4338:	6823      	ldr	r3, [r4, #0]
  String inputBuffer = "";
   b433a:	4668      	mov	r0, sp
  bleCount++;
   b433c:	3301      	adds	r3, #1
   b433e:	6023      	str	r3, [r4, #0]
  String inputBuffer = "";
   b4340:	f004 fe9c 	bl	b907c <_ZN6StringD1Ev>
}
   b4344:	b005      	add	sp, #20
   b4346:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4348:	4917      	ldr	r1, [pc, #92]	; (b43a8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x15c>)
   b434a:	4668      	mov	r0, sp
   b434c:	f004 ff7d 	bl	b924a <_ZNK6String6equalsEPKc>
      }else if(inputBuffer == "blue"){
   b4350:	b130      	cbz	r0, b4360 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x114>
        Serial.println("receive blue");
   b4352:	f005 fb87 	bl	b9a64 <_Z16_fetch_usbserialv>
   b4356:	4915      	ldr	r1, [pc, #84]	; (b43ac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x160>)
   b4358:	f004 fe31 	bl	b8fbe <_ZN5Print7printlnEPKc>
        colorAdr = 1;
   b435c:	2001      	movs	r0, #1
   b435e:	e7b3      	b.n	b42c8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>
   b4360:	4913      	ldr	r1, [pc, #76]	; (b43b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x164>)
   b4362:	4668      	mov	r0, sp
   b4364:	f004 ff71 	bl	b924a <_ZNK6String6equalsEPKc>
      }else if(inputBuffer == "green"){
   b4368:	2800      	cmp	r0, #0
   b436a:	d0ad      	beq.n	b42c8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>
        Serial.println("receive green");
   b436c:	f005 fb7a 	bl	b9a64 <_Z16_fetch_usbserialv>
   b4370:	4910      	ldr	r1, [pc, #64]	; (b43b4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x168>)
   b4372:	f004 fe24 	bl	b8fbe <_ZN5Print7printlnEPKc>
        colorAdr = 2;
   b4376:	2002      	movs	r0, #2
   b4378:	e7a6      	b.n	b42c8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>
   b437a:	bf00      	nop
   b437c:	20035584 	.word	0x20035584
   b4380:	000bd32a 	.word	0x000bd32a
   b4384:	000bcec2 	.word	0x000bcec2
   b4388:	2003e6a8 	.word	0x2003e6a8
   b438c:	20035578 	.word	0x20035578
   b4390:	000bcf06 	.word	0x000bcf06
   b4394:	000bcefe 	.word	0x000bcefe
   b4398:	2003e690 	.word	0x2003e690
   b439c:	2003e6b0 	.word	0x2003e6b0
   b43a0:	000bd108 	.word	0x000bd108
   b43a4:	000bcf25 	.word	0x000bcf25
   b43a8:	000bcf12 	.word	0x000bcf12
   b43ac:	000bcf0a 	.word	0x000bcf0a
   b43b0:	000bcf1f 	.word	0x000bcf1f
   b43b4:	000bcf17 	.word	0x000bcf17

000b43b8 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>:
  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
   b43b8:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b43ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b43bc:	4604      	mov	r4, r0
   b43be:	460d      	mov	r5, r1
      if (&__x != this)
   b43c0:	d025      	beq.n	b440e <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x56>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b43c2:	e9d1 7100 	ldrd	r7, r1, [r1]
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_end_of_storage
			 - this->_M_impl._M_start); }
   b43c6:	6800      	ldr	r0, [r0, #0]
   b43c8:	68a3      	ldr	r3, [r4, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b43ca:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b43cc:	1a1b      	subs	r3, r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
   b43ce:	429e      	cmp	r6, r3
   b43d0:	d91e      	bls.n	b4410 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x58>
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
   b43d2:	10f0      	asrs	r0, r6, #3
   b43d4:	f7ff fef1 	bl	b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
   b43d8:	2300      	movs	r3, #0
   b43da:	4605      	mov	r5, r0
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
   b43dc:	429e      	cmp	r6, r3
   b43de:	d00a      	beq.n	b43f6 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x3e>
   */
#if __cplusplus >= 201103L
  template<typename _Tp, typename... _Args>
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b43e0:	18ea      	adds	r2, r5, r3
   b43e2:	bf1c      	itt	ne
   b43e4:	18f9      	addne	r1, r7, r3
   b43e6:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b43ea:	f103 0308 	add.w	r3, r3, #8
   b43ee:	bf18      	it	ne
   b43f0:	e9c2 0100 	strdne	r0, r1, [r2]
   b43f4:	e7f2      	b.n	b43dc <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x24>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b43f6:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b43f8:	b118      	cbz	r0, b4402 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x4a>
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
   b43fa:	68a1      	ldr	r1, [r4, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b43fc:	1a09      	subs	r1, r1, r0
   b43fe:	f7ff fe50 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b4402:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4404:	4435      	add	r5, r6
   b4406:	60a5      	str	r5, [r4, #8]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4408:	6823      	ldr	r3, [r4, #0]
   b440a:	4433      	add	r3, r6
   b440c:	6063      	str	r3, [r4, #4]
	}
      return *this;
    }
   b440e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4410:	6862      	ldr	r2, [r4, #4]
   b4412:	1a12      	subs	r2, r2, r0
	  else if (size() >= __xlen)
   b4414:	4296      	cmp	r6, r2
   b4416:	d806      	bhi.n	b4426 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x6e>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   b4418:	42b9      	cmp	r1, r7
   b441a:	d0f5      	beq.n	b4408 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b441c:	4632      	mov	r2, r6
   b441e:	4639      	mov	r1, r7
   b4420:	f006 fceb 	bl	badfa <memmove>

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b4424:	e7f0      	b.n	b4408 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	  if (_Num)
   b4426:	b112      	cbz	r2, b442e <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x76>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b4428:	4639      	mov	r1, r7
   b442a:	f006 fce6 	bl	badfa <memmove>
   b442e:	e9d4 2700 	ldrd	r2, r7, [r4]
   b4432:	1abb      	subs	r3, r7, r2
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b4434:	682a      	ldr	r2, [r5, #0]
   b4436:	686d      	ldr	r5, [r5, #4]
   b4438:	441a      	add	r2, r3
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   b443a:	1aad      	subs	r5, r5, r2
					  __x._M_impl._M_finish,
   b443c:	2300      	movs	r3, #0
	      for (; __first != __last; ++__first, (void)++__cur)
   b443e:	429d      	cmp	r5, r3
   b4440:	d0e2      	beq.n	b4408 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
   b4442:	eb17 0c03 	adds.w	ip, r7, r3
   b4446:	bf1c      	itt	ne
   b4448:	18d1      	addne	r1, r2, r3
   b444a:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b444e:	f103 0308 	add.w	r3, r3, #8
   b4452:	bf18      	it	ne
   b4454:	e9cc 0100 	strdne	r0, r1, [ip]
   b4458:	e7f1      	b.n	b443e <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x86>
	...

000b445c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>:
      if (&__x != this)
   b445c:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b445e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4462:	4604      	mov	r4, r0
   b4464:	468a      	mov	sl, r1
      if (&__x != this)
   b4466:	d036      	beq.n	b44d6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7a>
   b4468:	e9d1 5b00 	ldrd	r5, fp, [r1]
			 - this->_M_impl._M_start); }
   b446c:	f8d0 9000 	ldr.w	r9, [r0]
   b4470:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4472:	4a39      	ldr	r2, [pc, #228]	; (b4558 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xfc>)
   b4474:	ebab 0705 	sub.w	r7, fp, r5
			 - this->_M_impl._M_start); }
   b4478:	eba3 0309 	sub.w	r3, r3, r9
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b447c:	ea4f 08e7 	mov.w	r8, r7, asr #3
	  if (__xlen > capacity())
   b4480:	42bb      	cmp	r3, r7
   b4482:	fb02 f808 	mul.w	r8, r2, r8
   b4486:	d228      	bcs.n	b44da <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7e>
	  pointer __result = this->_M_allocate(__n);
   b4488:	4640      	mov	r0, r8
   b448a:	f7ff fe77 	bl	b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
   b448e:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   b4490:	4680      	mov	r8, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b4492:	45ab      	cmp	fp, r5
   b4494:	d00a      	beq.n	b44ac <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x50>
   b4496:	f1b8 0f00 	cmp.w	r8, #0
   b449a:	d003      	beq.n	b44a4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x48>
   b449c:	4629      	mov	r1, r5
   b449e:	4640      	mov	r0, r8
   b44a0:	f7ff fe98 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b44a4:	f108 0818 	add.w	r8, r8, #24
   b44a8:	3518      	adds	r5, #24
   b44aa:	e7f2      	b.n	b4492 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x36>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b44ac:	e9d4 5800 	ldrd	r5, r8, [r4]
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   b44b0:	45a8      	cmp	r8, r5
   b44b2:	d004      	beq.n	b44be <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x62>
      { _M_dispose(); }
   b44b4:	4628      	mov	r0, r5
   b44b6:	f005 fcc7 	bl	b9e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b44ba:	3518      	adds	r5, #24
   b44bc:	e7f8      	b.n	b44b0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x54>
	      _M_deallocate(this->_M_impl._M_start,
   b44be:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b44c0:	b118      	cbz	r0, b44ca <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x6e>
			    - this->_M_impl._M_start);
   b44c2:	68a1      	ldr	r1, [r4, #8]
   b44c4:	1a09      	subs	r1, r1, r0
   b44c6:	f7ff fdec 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b44ca:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b44cc:	443e      	add	r6, r7
   b44ce:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b44d0:	6823      	ldr	r3, [r4, #0]
   b44d2:	443b      	add	r3, r7
   b44d4:	6063      	str	r3, [r4, #4]
    }
   b44d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b44da:	6846      	ldr	r6, [r0, #4]
   b44dc:	eba6 0609 	sub.w	r6, r6, r9
	  else if (size() >= __xlen)
   b44e0:	42b7      	cmp	r7, r6
   b44e2:	d819      	bhi.n	b4518 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xbc>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b44e4:	4646      	mov	r6, r8
   b44e6:	46ca      	mov	sl, r9
   b44e8:	2e00      	cmp	r6, #0
   b44ea:	dd08      	ble.n	b44fe <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xa2>
		  }
	      }
	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
	  }
#endif
	this->_M_assign(__str);
   b44ec:	4629      	mov	r1, r5
   b44ee:	4650      	mov	r0, sl
   b44f0:	f005 fcc8 	bl	b9e84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b44f4:	3518      	adds	r5, #24
	      ++__result;
   b44f6:	f10a 0a18 	add.w	sl, sl, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b44fa:	3e01      	subs	r6, #1
   b44fc:	e7f4      	b.n	b44e8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x8c>
   b44fe:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
   b4502:	2518      	movs	r5, #24
      : _M_current(__i) { }
   b4504:	6866      	ldr	r6, [r4, #4]
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b4506:	fb05 9508 	mla	r5, r5, r8, r9
	  for (; __first != __last; ++__first)
   b450a:	42ae      	cmp	r6, r5
   b450c:	d0e0      	beq.n	b44d0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
      { _M_dispose(); }
   b450e:	4628      	mov	r0, r5
   b4510:	f005 fc9a 	bl	b9e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b4514:	3518      	adds	r5, #24
      {
	++_M_current;
	return *this;
   b4516:	e7f8      	b.n	b450a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xae>
   b4518:	10f6      	asrs	r6, r6, #3
   b451a:	4356      	muls	r6, r2
   b451c:	2e00      	cmp	r6, #0
   b451e:	dd08      	ble.n	b4532 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xd6>
	this->_M_assign(__str);
   b4520:	4629      	mov	r1, r5
   b4522:	4648      	mov	r0, r9
   b4524:	f005 fcae 	bl	b9e84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b4528:	3518      	adds	r5, #24
	      ++__result;
   b452a:	f109 0918 	add.w	r9, r9, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b452e:	3e01      	subs	r6, #1
   b4530:	e7f4      	b.n	b451c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xc0>
   b4532:	e9d4 5600 	ldrd	r5, r6, [r4]
   b4536:	1b71      	subs	r1, r6, r5
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b4538:	f8da 5000 	ldr.w	r5, [sl]
					  __x._M_impl._M_finish,
   b453c:	f8da 8004 	ldr.w	r8, [sl, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b4540:	440d      	add	r5, r1
   b4542:	45a8      	cmp	r8, r5
   b4544:	d0c4      	beq.n	b44d0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4546:	b11e      	cbz	r6, b4550 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xf4>
   b4548:	4629      	mov	r1, r5
   b454a:	4630      	mov	r0, r6
   b454c:	f7ff fe42 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b4550:	3518      	adds	r5, #24
   b4552:	3618      	adds	r6, #24
   b4554:	e7f5      	b.n	b4542 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xe6>
   b4556:	bf00      	nop
   b4558:	aaaaaaab 	.word	0xaaaaaaab

000b455c <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b455c:	b40e      	push	{r1, r2, r3}
   b455e:	b503      	push	{r0, r1, lr}
   b4560:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b4562:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4564:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4568:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b456a:	f004 fd50 	bl	b900e <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b456e:	b002      	add	sp, #8
   b4570:	f85d eb04 	ldr.w	lr, [sp], #4
   b4574:	b003      	add	sp, #12
   b4576:	4770      	bx	lr

000b4578 <_ZN5Print8printlnfEPKcz>:
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4578:	b40e      	push	{r1, r2, r3}
   b457a:	b503      	push	{r0, r1, lr}
   b457c:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(true, format, args);
   b457e:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4580:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4584:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4586:	f004 fd42 	bl	b900e <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b458a:	b002      	add	sp, #8
   b458c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4590:	b003      	add	sp, #12
   b4592:	4770      	bx	lr

000b4594 <_Z16randomizeAddressv>:
void randomizeAddress(){
   b4594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while(slaveCount != slaveCountExpected){
   b4598:	4db1      	ldr	r5, [pc, #708]	; (b4860 <_Z16randomizeAddressv+0x2cc>)

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b459a:	f8df 82f0 	ldr.w	r8, [pc, #752]	; b488c <_Z16randomizeAddressv+0x2f8>
void randomizeAddress(){
   b459e:	b08c      	sub	sp, #48	; 0x30
  while(slaveCount != slaveCountExpected){
   b45a0:	682b      	ldr	r3, [r5, #0]
   b45a2:	2b03      	cmp	r3, #3
   b45a4:	f000 80fd 	beq.w	b47a2 <_Z16randomizeAddressv+0x20e>
    slaveCount = 0;
   b45a8:	2300      	movs	r3, #0
   b45aa:	f8df 92e4 	ldr.w	r9, [pc, #740]	; b4890 <_Z16randomizeAddressv+0x2fc>
        String inputBuffer = "";
   b45ae:	4fad      	ldr	r7, [pc, #692]	; (b4864 <_Z16randomizeAddressv+0x2d0>)
    slaveCount = 0;
   b45b0:	602b      	str	r3, [r5, #0]
    for(int i = 8; i <= 119; i++){
   b45b2:	2408      	movs	r4, #8
      Serial.println("\nrequest code 1, address: " + String(i));
   b45b4:	f005 fa56 	bl	b9a64 <_Z16_fetch_usbserialv>
   b45b8:	4641      	mov	r1, r8
   b45ba:	4606      	mov	r6, r0
   b45bc:	a808      	add	r0, sp, #32
   b45be:	f004 fda8 	bl	b9112 <_ZN6StringC1EPK19__FlashStringHelper>
   b45c2:	220a      	movs	r2, #10
   b45c4:	4621      	mov	r1, r4
   b45c6:	a804      	add	r0, sp, #16
   b45c8:	f004 fde3 	bl	b9192 <_ZN6StringC1Eih>
   b45cc:	a904      	add	r1, sp, #16
   b45ce:	a808      	add	r0, sp, #32
   b45d0:	f004 fe1a 	bl	b9208 <_ZplRK15StringSumHelperRK6String>
   b45d4:	6801      	ldr	r1, [r0, #0]
   b45d6:	4630      	mov	r0, r6
   b45d8:	f004 fcf1 	bl	b8fbe <_ZN5Print7printlnEPKc>
   b45dc:	a804      	add	r0, sp, #16
   b45de:	f004 fd4d 	bl	b907c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b45e2:	a808      	add	r0, sp, #32
   b45e4:	f004 fd4a 	bl	b907c <_ZN6StringD1Ev>
      Wire.beginTransmission(i);
   b45e8:	f005 fb8a 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b45ec:	4621      	mov	r1, r4
   b45ee:	f004 fb59 	bl	b8ca4 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('1');
   b45f2:	f005 fb85 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b45f6:	2131      	movs	r1, #49	; 0x31
   b45f8:	f7ff fe12 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b45fc:	fa5f fa84 	uxtb.w	sl, r4
   b4600:	f005 fb7e 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b4604:	f004 fb55 	bl	b8cb2 <_ZN7TwoWire15endTransmissionEv>
      Wire.requestFrom(i, 24);
   b4608:	f005 fb7a 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b460c:	2218      	movs	r2, #24
   b460e:	4651      	mov	r1, sl
   b4610:	f004 fb41 	bl	b8c96 <_ZN7TwoWire11requestFromEhj>
      if(Wire.available() > 0){
   b4614:	f005 fb74 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b4618:	6803      	ldr	r3, [r0, #0]
   b461a:	691b      	ldr	r3, [r3, #16]
   b461c:	4798      	blx	r3
   b461e:	2800      	cmp	r0, #0
   b4620:	f340 80ba 	ble.w	b4798 <_Z16randomizeAddressv+0x204>
        Serial.println("transmission recieved from: " + String(i));
   b4624:	f005 fa1e 	bl	b9a64 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4628:	4649      	mov	r1, r9
   b462a:	4606      	mov	r6, r0
   b462c:	a808      	add	r0, sp, #32
   b462e:	f004 fd70 	bl	b9112 <_ZN6StringC1EPK19__FlashStringHelper>
   b4632:	220a      	movs	r2, #10
   b4634:	4621      	mov	r1, r4
   b4636:	a804      	add	r0, sp, #16
   b4638:	f004 fdab 	bl	b9192 <_ZN6StringC1Eih>
   b463c:	a904      	add	r1, sp, #16
   b463e:	a808      	add	r0, sp, #32
   b4640:	f004 fde2 	bl	b9208 <_ZplRK15StringSumHelperRK6String>
   b4644:	6801      	ldr	r1, [r0, #0]
   b4646:	4630      	mov	r0, r6
   b4648:	f004 fcb9 	bl	b8fbe <_ZN5Print7printlnEPKc>
   b464c:	a804      	add	r0, sp, #16
   b464e:	f004 fd15 	bl	b907c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4652:	a808      	add	r0, sp, #32
   b4654:	f004 fd12 	bl	b907c <_ZN6StringD1Ev>
        slaveCount++;
   b4658:	682b      	ldr	r3, [r5, #0]
        String inputBuffer = "";
   b465a:	4639      	mov	r1, r7
        slaveCount++;
   b465c:	3301      	adds	r3, #1
        String inputBuffer = "";
   b465e:	4668      	mov	r0, sp
        slaveCount++;
   b4660:	602b      	str	r3, [r5, #0]
        String inputBuffer = "";
   b4662:	f004 fd56 	bl	b9112 <_ZN6StringC1EPK19__FlashStringHelper>
   b4666:	2618      	movs	r6, #24
          c = Wire.read();
   b4668:	f005 fb4a 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b466c:	6803      	ldr	r3, [r0, #0]
   b466e:	695b      	ldr	r3, [r3, #20]
   b4670:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b4672:	b2c1      	uxtb	r1, r0
   b4674:	4668      	mov	r0, sp
   b4676:	f004 fdba 	bl	b91ee <_ZN6String6concatEc>
        for(int j = 0; j < 24; j++){
   b467a:	3e01      	subs	r6, #1
   b467c:	d1f4      	bne.n	b4668 <_Z16randomizeAddressv+0xd4>
        Wire.beginTransmission(i);
   b467e:	f005 fb3f 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b4682:	4621      	mov	r1, r4
   b4684:	f004 fb0e 	bl	b8ca4 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(inputBuffer);
   b4688:	f005 fb3a 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b468c:	9900      	ldr	r1, [sp, #0]
   b468e:	f7ff fdcb 	bl	b4228 <_ZN5Print5writeEPKc.isra.0>
        Serial.println("device id: " + inputBuffer);
   b4692:	f005 f9e7 	bl	b9a64 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4696:	4974      	ldr	r1, [pc, #464]	; (b4868 <_Z16randomizeAddressv+0x2d4>)
   b4698:	4606      	mov	r6, r0
   b469a:	a808      	add	r0, sp, #32
   b469c:	f004 fd39 	bl	b9112 <_ZN6StringC1EPK19__FlashStringHelper>
   b46a0:	4669      	mov	r1, sp
   b46a2:	a808      	add	r0, sp, #32
   b46a4:	f004 fdb0 	bl	b9208 <_ZplRK15StringSumHelperRK6String>
   b46a8:	6801      	ldr	r1, [r0, #0]
   b46aa:	4630      	mov	r0, r6
   b46ac:	f004 fc87 	bl	b8fbe <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b46b0:	a808      	add	r0, sp, #32
   b46b2:	f004 fce3 	bl	b907c <_ZN6StringD1Ev>
        Wire.endTransmission();
   b46b6:	f005 fb23 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b46ba:	f004 fafa 	bl	b8cb2 <_ZN7TwoWire15endTransmissionEv>
        Serial.println("transmission sent to: " + String(i));
   b46be:	f005 f9d1 	bl	b9a64 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b46c2:	496a      	ldr	r1, [pc, #424]	; (b486c <_Z16randomizeAddressv+0x2d8>)
   b46c4:	4606      	mov	r6, r0
   b46c6:	a808      	add	r0, sp, #32
   b46c8:	f004 fd23 	bl	b9112 <_ZN6StringC1EPK19__FlashStringHelper>
   b46cc:	220a      	movs	r2, #10
   b46ce:	4621      	mov	r1, r4
   b46d0:	a804      	add	r0, sp, #16
   b46d2:	f004 fd5e 	bl	b9192 <_ZN6StringC1Eih>
   b46d6:	a904      	add	r1, sp, #16
   b46d8:	a808      	add	r0, sp, #32
   b46da:	f004 fd95 	bl	b9208 <_ZplRK15StringSumHelperRK6String>
   b46de:	6801      	ldr	r1, [r0, #0]
   b46e0:	4630      	mov	r0, r6
   b46e2:	f004 fc6c 	bl	b8fbe <_ZN5Print7printlnEPKc>
   b46e6:	a804      	add	r0, sp, #16
   b46e8:	f004 fcc8 	bl	b907c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b46ec:	a808      	add	r0, sp, #32
   b46ee:	f004 fcc5 	bl	b907c <_ZN6StringD1Ev>
        Wire.beginTransmission(i);
   b46f2:	f005 fb05 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b46f6:	4621      	mov	r1, r4
   b46f8:	f004 fad4 	bl	b8ca4 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('2');
   b46fc:	f005 fb00 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b4700:	2132      	movs	r1, #50	; 0x32
   b4702:	f7ff fd8d 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b4706:	f005 fafb 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b470a:	f004 fad2 	bl	b8cb2 <_ZN7TwoWire15endTransmissionEv>
        Serial.println("request code 2, address: " + String(i));
   b470e:	f005 f9a9 	bl	b9a64 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4712:	4957      	ldr	r1, [pc, #348]	; (b4870 <_Z16randomizeAddressv+0x2dc>)
   b4714:	4606      	mov	r6, r0
   b4716:	a808      	add	r0, sp, #32
   b4718:	f004 fcfb 	bl	b9112 <_ZN6StringC1EPK19__FlashStringHelper>
   b471c:	220a      	movs	r2, #10
   b471e:	4621      	mov	r1, r4
   b4720:	a804      	add	r0, sp, #16
   b4722:	f004 fd36 	bl	b9192 <_ZN6StringC1Eih>
   b4726:	a904      	add	r1, sp, #16
   b4728:	a808      	add	r0, sp, #32
   b472a:	f004 fd6d 	bl	b9208 <_ZplRK15StringSumHelperRK6String>
   b472e:	6801      	ldr	r1, [r0, #0]
   b4730:	4630      	mov	r0, r6
   b4732:	f004 fc44 	bl	b8fbe <_ZN5Print7printlnEPKc>
   b4736:	a804      	add	r0, sp, #16
   b4738:	f004 fca0 	bl	b907c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b473c:	a808      	add	r0, sp, #32
   b473e:	f004 fc9d 	bl	b907c <_ZN6StringD1Ev>
        Wire.requestFrom(i, 4);
   b4742:	f005 fadd 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b4746:	2204      	movs	r2, #4
   b4748:	4651      	mov	r1, sl
   b474a:	f004 faa4 	bl	b8c96 <_ZN7TwoWire11requestFromEhj>
        inputBuffer = "";
   b474e:	4639      	mov	r1, r7
   b4750:	4668      	mov	r0, sp
   b4752:	f004 fd0c 	bl	b916e <_ZN6StringaSEPKc>
   b4756:	2604      	movs	r6, #4
          inputBuffer += (char)Wire.read();
   b4758:	f005 fad2 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b475c:	6803      	ldr	r3, [r0, #0]
   b475e:	695b      	ldr	r3, [r3, #20]
   b4760:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b4762:	b2c1      	uxtb	r1, r0
   b4764:	4668      	mov	r0, sp
   b4766:	f004 fd42 	bl	b91ee <_ZN6String6concatEc>
        for(int j = 0; j < 4; j++){
   b476a:	3e01      	subs	r6, #1
   b476c:	d1f4      	bne.n	b4758 <_Z16randomizeAddressv+0x1c4>
        Serial.println("conflict verification: " + inputBuffer);
   b476e:	f005 f979 	bl	b9a64 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4772:	4940      	ldr	r1, [pc, #256]	; (b4874 <_Z16randomizeAddressv+0x2e0>)
   b4774:	4606      	mov	r6, r0
   b4776:	a808      	add	r0, sp, #32
   b4778:	f004 fccb 	bl	b9112 <_ZN6StringC1EPK19__FlashStringHelper>
   b477c:	4669      	mov	r1, sp
   b477e:	a808      	add	r0, sp, #32
   b4780:	f004 fd42 	bl	b9208 <_ZplRK15StringSumHelperRK6String>
   b4784:	6801      	ldr	r1, [r0, #0]
   b4786:	4630      	mov	r0, r6
   b4788:	f004 fc19 	bl	b8fbe <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b478c:	a808      	add	r0, sp, #32
   b478e:	f004 fc75 	bl	b907c <_ZN6StringD1Ev>
        String inputBuffer = "";
   b4792:	4668      	mov	r0, sp
   b4794:	f004 fc72 	bl	b907c <_ZN6StringD1Ev>
    for(int i = 8; i <= 119; i++){
   b4798:	3401      	adds	r4, #1
   b479a:	2c78      	cmp	r4, #120	; 0x78
   b479c:	f47f af0a 	bne.w	b45b4 <_Z16randomizeAddressv+0x20>
   b47a0:	e6fe      	b.n	b45a0 <_Z16randomizeAddressv+0xc>
  Serial.println("\nConnected to: ");
   b47a2:	f005 f95f 	bl	b9a64 <_Z16_fetch_usbserialv>
   b47a6:	4934      	ldr	r1, [pc, #208]	; (b4878 <_Z16randomizeAddressv+0x2e4>)
      Serial.print(", ");
   b47a8:	4e34      	ldr	r6, [pc, #208]	; (b487c <_Z16randomizeAddressv+0x2e8>)
      addressArr[count++] = i;
   b47aa:	4f35      	ldr	r7, [pc, #212]	; (b4880 <_Z16randomizeAddressv+0x2ec>)
  Serial.println("\nConnected to: ");
   b47ac:	f004 fc07 	bl	b8fbe <_ZN5Print7printlnEPKc>
  for(int i = 8; i<= 119; i++){
   b47b0:	2408      	movs	r4, #8
  int count = 0;
   b47b2:	2500      	movs	r5, #0
    Wire.beginTransmission(i);
   b47b4:	f005 faa4 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b47b8:	4621      	mov	r1, r4
   b47ba:	f004 fa73 	bl	b8ca4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('1');
   b47be:	f005 fa9f 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b47c2:	2131      	movs	r1, #49	; 0x31
   b47c4:	f7ff fd2c 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b47c8:	f005 fa9a 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b47cc:	f004 fa71 	bl	b8cb2 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(i, 24);
   b47d0:	f005 fa96 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b47d4:	2218      	movs	r2, #24
   b47d6:	b2e1      	uxtb	r1, r4
   b47d8:	f004 fa5d 	bl	b8c96 <_ZN7TwoWire11requestFromEhj>
    if(Wire.available() > 0){
   b47dc:	f005 fa90 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b47e0:	6803      	ldr	r3, [r0, #0]
   b47e2:	691b      	ldr	r3, [r3, #16]
   b47e4:	4798      	blx	r3
   b47e6:	2800      	cmp	r0, #0
   b47e8:	dd0d      	ble.n	b4806 <_Z16randomizeAddressv+0x272>
      Serial.print(i);
   b47ea:	f005 f93b 	bl	b9a64 <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   b47ee:	220a      	movs	r2, #10
   b47f0:	4621      	mov	r1, r4
   b47f2:	f7ff fc76 	bl	b40e2 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
      Serial.print(", ");
   b47f6:	f005 f935 	bl	b9a64 <_Z16_fetch_usbserialv>
   b47fa:	4631      	mov	r1, r6
   b47fc:	f004 fbcc 	bl	b8f98 <_ZN5Print5printEPKc>
      addressArr[count++] = i;
   b4800:	f847 4025 	str.w	r4, [r7, r5, lsl #2]
   b4804:	3501      	adds	r5, #1
  for(int i = 8; i<= 119; i++){
   b4806:	3401      	adds	r4, #1
   b4808:	2c78      	cmp	r4, #120	; 0x78
   b480a:	d1d3      	bne.n	b47b4 <_Z16randomizeAddressv+0x220>
   b480c:	4a1d      	ldr	r2, [pc, #116]	; (b4884 <_Z16randomizeAddressv+0x2f0>)
   b480e:	4b1e      	ldr	r3, [pc, #120]	; (b4888 <_Z16randomizeAddressv+0x2f4>)
        sequenceArr[2 * i + j] = addressArr[seqCount++];
   b4810:	4d1b      	ldr	r5, [pc, #108]	; (b4880 <_Z16randomizeAddressv+0x2ec>)
   b4812:	e9d2 1700 	ldrd	r1, r7, [r2]
  int seqCount = 0;
   b4816:	2200      	movs	r2, #0
   b4818:	469c      	mov	ip, r3
        sequenceArr[2 * i + j] = 0;
   b481a:	4696      	mov	lr, r2
  for(int i = 0; i < railways.size(); i++){
   b481c:	42b9      	cmp	r1, r7
   b481e:	d018      	beq.n	b4852 <_Z16randomizeAddressv+0x2be>
	return *(this->_M_impl._M_start + __n);
   b4820:	6a48      	ldr	r0, [r1, #36]	; 0x24
      if(railways[i].outputs[j].size() == 0){
   b4822:	e9d0 6400 	ldrd	r6, r4, [r0]
   b4826:	42a6      	cmp	r6, r4
        sequenceArr[2 * i + j] = addressArr[seqCount++];
   b4828:	bf1a      	itte	ne
   b482a:	f855 6022 	ldrne.w	r6, [r5, r2, lsl #2]
   b482e:	601e      	strne	r6, [r3, #0]
        sequenceArr[2 * i + j] = 0;
   b4830:	f8c3 e000 	streq.w	lr, [r3]
      if(railways[i].outputs[j].size() == 0){
   b4834:	e9d0 0603 	ldrd	r0, r6, [r0, #12]
        sequenceArr[2 * i + j] = addressArr[seqCount++];
   b4838:	bf18      	it	ne
   b483a:	3201      	addne	r2, #1
      if(railways[i].outputs[j].size() == 0){
   b483c:	4286      	cmp	r6, r0
        sequenceArr[2 * i + j] = addressArr[seqCount++];
   b483e:	bf17      	itett	ne
   b4840:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
        sequenceArr[2 * i + j] = 0;
   b4844:	f8c3 e004 	streq.w	lr, [r3, #4]
        sequenceArr[2 * i + j] = addressArr[seqCount++];
   b4848:	6058      	strne	r0, [r3, #4]
   b484a:	3201      	addne	r2, #1
  for(int i = 0; i < railways.size(); i++){
   b484c:	3308      	adds	r3, #8
   b484e:	3164      	adds	r1, #100	; 0x64
   b4850:	e7e4      	b.n	b481c <_Z16randomizeAddressv+0x288>
  sequenceArr[4] = addressArr[2]; //temp
   b4852:	4b0b      	ldr	r3, [pc, #44]	; (b4880 <_Z16randomizeAddressv+0x2ec>)
   b4854:	689b      	ldr	r3, [r3, #8]
   b4856:	f8cc 3010 	str.w	r3, [ip, #16]
}
   b485a:	b00c      	add	sp, #48	; 0x30
   b485c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4860:	2003e6a4 	.word	0x2003e6a4
   b4864:	000bd32a 	.word	0x000bd32a
   b4868:	000bcf69 	.word	0x000bcf69
   b486c:	000bcf75 	.word	0x000bcf75
   b4870:	000bcf8c 	.word	0x000bcf8c
   b4874:	000bcfa6 	.word	0x000bcfa6
   b4878:	000bcfbe 	.word	0x000bcfbe
   b487c:	000bd108 	.word	0x000bd108
   b4880:	20035578 	.word	0x20035578
   b4884:	2003e5b8 	.word	0x2003e5b8
   b4888:	2003e690 	.word	0x2003e690
   b488c:	000bcf31 	.word	0x000bcf31
   b4890:	000bcf4c 	.word	0x000bcf4c

000b4894 <_Z17acquireWireBufferv>:

hal_i2c_config_t acquireWireBuffer() {
   b4894:	b538      	push	{r3, r4, r5, lr}
    hal_i2c_config_t config = {
   b4896:	f44f 7500 	mov.w	r5, #512	; 0x200
   b489a:	2314      	movs	r3, #20
hal_i2c_config_t acquireWireBuffer() {
   b489c:	4604      	mov	r4, r0
    hal_i2c_config_t config = {
   b489e:	6003      	str	r3, [r0, #0]
   b48a0:	6085      	str	r5, [r0, #8]
   b48a2:	6105      	str	r5, [r0, #16]
        .size = sizeof(hal_i2c_config_t),
        .version = HAL_I2C_CONFIG_VERSION_1,
        .rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b48a4:	4905      	ldr	r1, [pc, #20]	; (b48bc <_Z17acquireWireBufferv+0x28>)
   b48a6:	4628      	mov	r0, r5
   b48a8:	f005 fa8e 	bl	b9dc8 <_ZnajRKSt9nothrow_t>
        .rx_buffer_size = I2C_BUFFER_SIZE,
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b48ac:	4903      	ldr	r1, [pc, #12]	; (b48bc <_Z17acquireWireBufferv+0x28>)
        .tx_buffer_size = I2C_BUFFER_SIZE
    };
   b48ae:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b48b0:	4628      	mov	r0, r5
   b48b2:	f005 fa89 	bl	b9dc8 <_ZnajRKSt9nothrow_t>
    };
   b48b6:	60e0      	str	r0, [r4, #12]
    return config;
   b48b8:	4620      	mov	r0, r4
   b48ba:	bd38      	pop	{r3, r4, r5, pc}
   b48bc:	000bd730 	.word	0x000bd730

000b48c0 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b48c0:	b510      	push	{r4, lr}
   b48c2:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b48c4:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b48c6:	b118      	cbz	r0, b48d0 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b48c8:	68a1      	ldr	r1, [r4, #8]
   b48ca:	1a09      	subs	r1, r1, r0
   b48cc:	f7ff fbe9 	bl	b40a2 <_ZdlPvj>
      }
   b48d0:	4620      	mov	r0, r4
   b48d2:	bd10      	pop	{r4, pc}

000b48d4 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b48d4:	b510      	push	{r4, lr}
   b48d6:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b48d8:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b48da:	b118      	cbz	r0, b48e4 <_ZNSt12_Vector_baseIfSaIfEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b48dc:	68a1      	ldr	r1, [r4, #8]
   b48de:	1a09      	subs	r1, r1, r0
   b48e0:	f7ff fbdf 	bl	b40a2 <_ZdlPvj>
      }
   b48e4:	4620      	mov	r0, r4
   b48e6:	bd10      	pop	{r4, pc}

000b48e8 <_ZNSt12_Vector_baseIiSaIiEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b48e8:	b510      	push	{r4, lr}
   b48ea:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b48ec:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b48ee:	b118      	cbz	r0, b48f8 <_ZNSt12_Vector_baseIiSaIiEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b48f0:	68a1      	ldr	r1, [r4, #8]
   b48f2:	1a09      	subs	r1, r1, r0
   b48f4:	f7ff fbd5 	bl	b40a2 <_ZdlPvj>
      }
   b48f8:	4620      	mov	r0, r4
   b48fa:	bd10      	pop	{r4, pc}

000b48fc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b48fc:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b48fe:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   b4902:	4604      	mov	r4, r0
	  for (; __first != __last; ++__first)
   b4904:	42ae      	cmp	r6, r5
   b4906:	d004      	beq.n	b4912 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x16>
      { _M_dispose(); }
   b4908:	4628      	mov	r0, r5
   b490a:	f005 fa9d 	bl	b9e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b490e:	3518      	adds	r5, #24
   b4910:	e7f8      	b.n	b4904 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   b4912:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4914:	b118      	cbz	r0, b491e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x22>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4916:	68a1      	ldr	r1, [r4, #8]
   b4918:	1a09      	subs	r1, r1, r0
   b491a:	f7ff fbc2 	bl	b40a2 <_ZdlPvj>
      }
   b491e:	4620      	mov	r0, r4
   b4920:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4924 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>:

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4924:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
      vector(size_type __n, const value_type& __value,
   b4928:	b570      	push	{r4, r5, r6, lr}
   b492a:	4604      	mov	r4, r0
   b492c:	460d      	mov	r5, r1
   b492e:	4616      	mov	r6, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4930:	d302      	bcc.n	b4938 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x14>
	  __throw_length_error(
   b4932:	480c      	ldr	r0, [pc, #48]	; (b4964 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x40>)
   b4934:	f005 fa50 	bl	b9dd8 <_ZSt20__throw_length_errorPKc>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4938:	2300      	movs	r3, #0
   b493a:	e9c0 3300 	strd	r3, r3, [r0]
   b493e:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4940:	4608      	mov	r0, r1
   b4942:	f7ff fc2d 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4946:	eb00 0385 	add.w	r3, r0, r5, lsl #2
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b494a:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b494e:	60a3      	str	r3, [r4, #8]
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
   b4950:	b12d      	cbz	r5, b495e <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x3a>
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
   b4952:	6832      	ldr	r2, [r6, #0]
      for (; __first != __last; ++__first)
   b4954:	4283      	cmp	r3, r0
   b4956:	d002      	beq.n	b495e <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x3a>
	*__first = __tmp;
   b4958:	f840 2b04 	str.w	r2, [r0], #4
      for (; __first != __last; ++__first)
   b495c:	e7fa      	b.n	b4954 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x30>
	this->_M_impl._M_finish =
   b495e:	6060      	str	r0, [r4, #4]
      { _M_fill_initialize(__n, __value); }
   b4960:	4620      	mov	r0, r4
   b4962:	bd70      	pop	{r4, r5, r6, pc}
   b4964:	000bcfce 	.word	0x000bcfce

000b4968 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
   b4968:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b496c:	2400      	movs	r4, #0
      vector(initializer_list<value_type> __l,
   b496e:	ab02      	add	r3, sp, #8
   b4970:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4974:	e9c0 4400 	strd	r4, r4, [r0]
      constexpr const_iterator
      begin() const noexcept { return _M_array; }

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
   b4978:	4613      	mov	r3, r2
      vector(initializer_list<value_type> __l,
   b497a:	4605      	mov	r5, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b497c:	6084      	str	r4, [r0, #8]
   b497e:	00d7      	lsls	r7, r2, #3
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b4980:	f342 001c 	sbfx	r0, r2, #0, #29
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4984:	4a10      	ldr	r2, [pc, #64]	; (b49c8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x60>)
   b4986:	ebb2 0fc3 	cmp.w	r2, r3, lsl #3
   b498a:	4688      	mov	r8, r1
   b498c:	d202      	bcs.n	b4994 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x2c>
	  __throw_length_error(
   b498e:	480f      	ldr	r0, [pc, #60]	; (b49cc <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x64>)
   b4990:	f005 fa22 	bl	b9dd8 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4994:	f7ff fc11 	bl	b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4998:	19c6      	adds	r6, r0, r7
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b499a:	4602      	mov	r2, r0
   b499c:	6028      	str	r0, [r5, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b499e:	60ae      	str	r6, [r5, #8]
   b49a0:	4623      	mov	r3, r4
   b49a2:	429f      	cmp	r7, r3
   b49a4:	d00b      	beq.n	b49be <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x56>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b49a6:	18d4      	adds	r4, r2, r3
   b49a8:	bf1c      	itt	ne
   b49aa:	eb08 0103 	addne.w	r1, r8, r3
   b49ae:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b49b2:	f103 0308 	add.w	r3, r3, #8
   b49b6:	bf18      	it	ne
   b49b8:	e9c4 0100 	strdne	r0, r1, [r4]
   b49bc:	e7f1      	b.n	b49a2 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x3a>
      }
   b49be:	4628      	mov	r0, r5
	  this->_M_impl._M_finish =
   b49c0:	606e      	str	r6, [r5, #4]
      }
   b49c2:	b002      	add	sp, #8
   b49c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b49c8:	7ffffff8 	.word	0x7ffffff8
   b49cc:	000bcfce 	.word	0x000bcfce

000b49d0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>:
      vector(initializer_list<value_type> __l,
   b49d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b49d4:	ab02      	add	r3, sp, #8
   b49d6:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b49da:	2300      	movs	r3, #0
   b49dc:	e9c0 3300 	strd	r3, r3, [r0]
   b49e0:	6083      	str	r3, [r0, #8]
   b49e2:	4616      	mov	r6, r2
   b49e4:	2318      	movs	r3, #24
   b49e6:	435e      	muls	r6, r3
   b49e8:	4b10      	ldr	r3, [pc, #64]	; (b4a2c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x5c>)
      vector(initializer_list<value_type> __l,
   b49ea:	4604      	mov	r4, r0
   b49ec:	10f0      	asrs	r0, r6, #3
   b49ee:	4358      	muls	r0, r3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b49f0:	4b0f      	ldr	r3, [pc, #60]	; (b4a30 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x60>)
   b49f2:	429e      	cmp	r6, r3
   b49f4:	460f      	mov	r7, r1
   b49f6:	eb01 0806 	add.w	r8, r1, r6
   b49fa:	d902      	bls.n	b4a02 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x32>
	  __throw_length_error(
   b49fc:	480d      	ldr	r0, [pc, #52]	; (b4a34 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x64>)
   b49fe:	f005 f9eb 	bl	b9dd8 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4a02:	f7ff fbbb 	bl	b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4a06:	4406      	add	r6, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4a08:	4605      	mov	r5, r0
   b4a0a:	6020      	str	r0, [r4, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4a0c:	60a6      	str	r6, [r4, #8]
   b4a0e:	45b8      	cmp	r8, r7
   b4a10:	d007      	beq.n	b4a22 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x52>
   b4a12:	b11d      	cbz	r5, b4a1c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x4c>
   b4a14:	4639      	mov	r1, r7
   b4a16:	4628      	mov	r0, r5
   b4a18:	f7ff fbdc 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b4a1c:	3718      	adds	r7, #24
   b4a1e:	3518      	adds	r5, #24
   b4a20:	e7f5      	b.n	b4a0e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x3e>
      }
   b4a22:	4620      	mov	r0, r4
	  this->_M_impl._M_finish =
   b4a24:	6065      	str	r5, [r4, #4]
      }
   b4a26:	b002      	add	sp, #8
   b4a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4a2c:	aaaaaaab 	.word	0xaaaaaaab
   b4a30:	7ffffff8 	.word	0x7ffffff8
   b4a34:	000bcfce 	.word	0x000bcfce

000b4a38 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   b4a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4a3a:	e9d1 3700 	ldrd	r3, r7, [r1]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4a3e:	2500      	movs	r5, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4a40:	1aff      	subs	r7, r7, r3
      vector(const vector& __x)
   b4a42:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4a44:	e9c0 5500 	strd	r5, r5, [r0]
   b4a48:	6085      	str	r5, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4a4a:	10f8      	asrs	r0, r7, #3
      vector(const vector& __x)
   b4a4c:	460e      	mov	r6, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4a4e:	f7ff fbb4 	bl	b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4a52:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4a56:	4407      	add	r7, r0
   b4a58:	60a7      	str	r7, [r4, #8]
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b4a5a:	e9d6 7600 	ldrd	r7, r6, [r6]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4a5e:	4602      	mov	r2, r0
   b4a60:	1bf6      	subs	r6, r6, r7
      : _M_current(__i) { }
   b4a62:	462b      	mov	r3, r5
   b4a64:	42b3      	cmp	r3, r6
   b4a66:	eb02 0503 	add.w	r5, r2, r3
   b4a6a:	d006      	beq.n	b4a7a <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x42>
   b4a6c:	b11d      	cbz	r5, b4a76 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x3e>
   b4a6e:	18f9      	adds	r1, r7, r3
   b4a70:	c903      	ldmia	r1, {r0, r1}
   b4a72:	e885 0003 	stmia.w	r5, {r0, r1}
   b4a76:	3308      	adds	r3, #8
   b4a78:	e7f4      	b.n	b4a64 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x2c>
	this->_M_impl._M_finish =
   b4a7a:	6065      	str	r5, [r4, #4]
      }
   b4a7c:	4620      	mov	r0, r4
   b4a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4a80 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4a80:	2900      	cmp	r1, #0
      _M_create_storage(size_t __n)
   b4a82:	b538      	push	{r3, r4, r5, lr}
   b4a84:	4604      	mov	r4, r0
      _M_allocate(size_t __n)
   b4a86:	ea4f 0581 	mov.w	r5, r1, lsl #2
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4a8a:	d00c      	beq.n	b4aa6 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x26>
	if (__n > this->_M_max_size())
   b4a8c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   b4a90:	d301      	bcc.n	b4a96 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x16>
	  std::__throw_bad_alloc();
   b4a92:	f005 f99b 	bl	b9dcc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4a96:	4628      	mov	r0, r5
   b4a98:	f7ff fafd 	bl	b4096 <_Znwj>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4a9c:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4aa0:	4428      	add	r0, r5
   b4aa2:	60a0      	str	r0, [r4, #8]
      }
   b4aa4:	bd38      	pop	{r3, r4, r5, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4aa6:	4608      	mov	r0, r1
   b4aa8:	e7f8      	b.n	b4a9c <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x1c>

000b4aaa <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b4aaa:	b538      	push	{r3, r4, r5, lr}
   b4aac:	4604      	mov	r4, r0
   b4aae:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b4ab0:	42ac      	cmp	r4, r5
   b4ab2:	d004      	beq.n	b4abe <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x14>
      }
   b4ab4:	4620      	mov	r0, r4
   b4ab6:	f7ff ff17 	bl	b48e8 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4aba:	340c      	adds	r4, #12
   b4abc:	e7f8      	b.n	b4ab0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x6>
	    std::_Destroy(std::__addressof(*__first));
	}
   b4abe:	bd38      	pop	{r3, r4, r5, pc}

000b4ac0 <_ZN7RailwayD1Ev>:
#include "Checkpoint.cpp"
#include <string>

//container for all data for each rail line
class Railway{
   b4ac0:	b510      	push	{r4, lr}
   b4ac2:	4604      	mov	r4, r0
   b4ac4:	3048      	adds	r0, #72	; 0x48
   b4ac6:	f7ff ff19 	bl	b48fc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b4aca:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b4ace:	f005 f9bb 	bl	b9e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
   b4ad2:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b4ad6:	f7ff ffe8 	bl	b4aaa <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	_M_deallocate(_M_impl._M_start,
   b4ada:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b4adc:	b118      	cbz	r0, b4ae6 <_ZN7RailwayD1Ev+0x26>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4ade:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	::operator delete(__p
   b4ae0:	1a09      	subs	r1, r1, r0
   b4ae2:	f7ff fade 	bl	b40a2 <_ZdlPvj>
      }
   b4ae6:	f104 0018 	add.w	r0, r4, #24
   b4aea:	f7ff fefd 	bl	b48e8 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4aee:	f104 000c 	add.w	r0, r4, #12
   b4af2:	f7ff feef 	bl	b48d4 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b4af6:	4620      	mov	r0, r4
   b4af8:	f7ff fee2 	bl	b48c0 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
   b4afc:	4620      	mov	r0, r4
   b4afe:	bd10      	pop	{r4, pc}

000b4b00 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b4b00:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b4b02:	b510      	push	{r4, lr}
   b4b04:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b4b06:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b4b0a:	d005      	beq.n	b4b18 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b4b0c:	4601      	mov	r1, r0
   b4b0e:	4622      	mov	r2, r4
   b4b10:	4618      	mov	r0, r3
   b4b12:	f006 f972 	bl	badfa <memmove>
   b4b16:	4603      	mov	r3, r0
	}
   b4b18:	1918      	adds	r0, r3, r4
   b4b1a:	bd10      	pop	{r4, pc}

000b4b1c <_ZNSt6vectorIiSaIiEEC1ERKS1_>:
      vector(const vector& __x)
   b4b1c:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4b1e:	e9d1 3600 	ldrd	r3, r6, [r1]
   b4b22:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4b24:	2300      	movs	r3, #0
      vector(const vector& __x)
   b4b26:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4b28:	e9c0 3300 	strd	r3, r3, [r0]
   b4b2c:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4b2e:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
   b4b30:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4b32:	f7ff fb35 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4b36:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4b3a:	4406      	add	r6, r0
   b4b3c:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4b3e:	4602      	mov	r2, r0
			      _Category>::__copy_m(__first, __last, __result);
   b4b40:	e9d5 0100 	ldrd	r0, r1, [r5]
   b4b44:	f7ff ffdc 	bl	b4b00 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
   b4b48:	6060      	str	r0, [r4, #4]
      }
   b4b4a:	4620      	mov	r0, r4
   b4b4c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4b50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>:
      vector(initializer_list<value_type> __l,
   b4b50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b4b52:	ab04      	add	r3, sp, #16
   b4b54:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4b58:	2300      	movs	r3, #0
   b4b5a:	e9c0 3300 	strd	r3, r3, [r0]
   b4b5e:	6083      	str	r3, [r0, #8]
      vector(initializer_list<value_type> __l,
   b4b60:	4604      	mov	r4, r0
   b4b62:	4613      	mov	r3, r2
   b4b64:	460e      	mov	r6, r1
   b4b66:	0095      	lsls	r5, r2, #2
   b4b68:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   b4b6c:	f342 001d 	sbfx	r0, r2, #0, #30
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4b70:	4a0a      	ldr	r2, [pc, #40]	; (b4b9c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x4c>)
   b4b72:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   b4b76:	d202      	bcs.n	b4b7e <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x2e>
	  __throw_length_error(
   b4b78:	4809      	ldr	r0, [pc, #36]	; (b4ba0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x50>)
   b4b7a:	f005 f92d 	bl	b9dd8 <_ZSt20__throw_length_errorPKc>
   b4b7e:	9101      	str	r1, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4b80:	f7ff fb0e 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4b84:	4405      	add	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4b86:	4602      	mov	r2, r0
   b4b88:	6020      	str	r0, [r4, #0]
   b4b8a:	9901      	ldr	r1, [sp, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4b8c:	60a5      	str	r5, [r4, #8]
   b4b8e:	4630      	mov	r0, r6
   b4b90:	f7ff ffb6 	bl	b4b00 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
   b4b94:	6060      	str	r0, [r4, #4]
      }
   b4b96:	b004      	add	sp, #16
   b4b98:	bd70      	pop	{r4, r5, r6, pc}
   b4b9a:	bf00      	nop
   b4b9c:	7ffffffc 	.word	0x7ffffffc
   b4ba0:	000bcfce 	.word	0x000bcfce

000b4ba4 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>:
      if (&__x != this)
   b4ba4:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b4ba6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b4ba8:	4604      	mov	r4, r0
   b4baa:	460d      	mov	r5, r1
      if (&__x != this)
   b4bac:	d01d      	beq.n	b4bea <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x46>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4bae:	e9d1 7100 	ldrd	r7, r1, [r1]
			 - this->_M_impl._M_start); }
   b4bb2:	6802      	ldr	r2, [r0, #0]
   b4bb4:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4bb6:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b4bb8:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b4bba:	429e      	cmp	r6, r3
   b4bbc:	d917      	bls.n	b4bee <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x4a>
	  pointer __result = this->_M_allocate(__n);
   b4bbe:	10b0      	asrs	r0, r6, #2
   b4bc0:	9101      	str	r1, [sp, #4]
   b4bc2:	f7ff faed 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
   b4bc6:	9901      	ldr	r1, [sp, #4]
   b4bc8:	4602      	mov	r2, r0
   b4bca:	4605      	mov	r5, r0
   b4bcc:	4638      	mov	r0, r7
   b4bce:	f7ff ff97 	bl	b4b00 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4bd2:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4bd4:	b118      	cbz	r0, b4bde <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x3a>
			    - this->_M_impl._M_start);
   b4bd6:	68a1      	ldr	r1, [r4, #8]
   b4bd8:	1a09      	subs	r1, r1, r0
   b4bda:	f7ff fa62 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b4bde:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4be0:	4435      	add	r5, r6
   b4be2:	60a5      	str	r5, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4be4:	6823      	ldr	r3, [r4, #0]
   b4be6:	4433      	add	r3, r6
   b4be8:	6063      	str	r3, [r4, #4]
    }
   b4bea:	b003      	add	sp, #12
   b4bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4bee:	6843      	ldr	r3, [r0, #4]
   b4bf0:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b4bf2:	429e      	cmp	r6, r3
   b4bf4:	d803      	bhi.n	b4bfe <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x5a>
   b4bf6:	4638      	mov	r0, r7
   b4bf8:	f7ff ff82 	bl	b4b00 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
   b4bfc:	e7f2      	b.n	b4be4 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x40>
   b4bfe:	18f9      	adds	r1, r7, r3
   b4c00:	4638      	mov	r0, r7
   b4c02:	f7ff ff7d 	bl	b4b00 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
   b4c06:	e9d4 0200 	ldrd	r0, r2, [r4]
   b4c0a:	e9d5 3100 	ldrd	r3, r1, [r5]
   b4c0e:	1a10      	subs	r0, r2, r0
   b4c10:	4418      	add	r0, r3
   b4c12:	e7f1      	b.n	b4bf8 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x54>

000b4c14 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b4c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4c18:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b4c1a:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4c1c:	480b      	ldr	r0, [pc, #44]	; (b4c4c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x38>)
   b4c1e:	10a4      	asrs	r4, r4, #2
   b4c20:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b4c22:	4616      	mov	r6, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4c24:	4627      	mov	r7, r4
   b4c26:	4690      	mov	r8, r2
   b4c28:	2f00      	cmp	r7, #0
   b4c2a:	dd08      	ble.n	b4c3e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x2a>
	      *__result = *__first;
   b4c2c:	4629      	mov	r1, r5
   b4c2e:	4640      	mov	r0, r8
   b4c30:	f7ff ffb8 	bl	b4ba4 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	      ++__first;
   b4c34:	350c      	adds	r5, #12
	      ++__result;
   b4c36:	f108 080c 	add.w	r8, r8, #12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4c3a:	3f01      	subs	r7, #1
   b4c3c:	e7f4      	b.n	b4c28 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x14>
	  return __result;
   b4c3e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b4c42:	200c      	movs	r0, #12
   b4c44:	fb00 6004 	mla	r0, r0, r4, r6
   b4c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4c4c:	aaaaaaab 	.word	0xaaaaaaab

000b4c50 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>:
    std::vector<std::string> colors;
    int tripleIndex = -1;
    int loopIndex = -1;
    int lowerLoopBound, upperLoopBound;

    Railway(std::vector<Checkpoint> checkpointInput, std::vector<int> scalerInput, std::vector<int> outputSize, std::string nameInput, std::vector<std::string> colorInput, std::vector<int> loopBoundInput = {0, 0}){
   b4c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4c54:	2500      	movs	r5, #0
   b4c56:	4698      	mov	r8, r3
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b4c58:	f100 0338 	add.w	r3, r0, #56	; 0x38
      { _M_string_length = __length; }
   b4c5c:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   b4c60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4c64:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
   b4c68:	4604      	mov	r4, r0
   b4c6a:	e9c0 5500 	strd	r5, r5, [r0]
   b4c6e:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b4c72:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b4c76:	e9c0 5506 	strd	r5, r5, [r0, #24]
   b4c7a:	e9c0 5508 	strd	r5, r5, [r0, #32]
   b4c7e:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
   b4c82:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
   b4c86:	b095      	sub	sp, #84	; 0x54
   b4c88:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
   b4c8c:	6505      	str	r5, [r0, #80]	; 0x50
   b4c8e:	4691      	mov	r9, r2
   b4c90:	f100 0a18 	add.w	sl, r0, #24
   b4c94:	f100 0730 	add.w	r7, r0, #48	; 0x30
   b4c98:	f100 0648 	add.w	r6, r0, #72	; 0x48
      checkpoints = checkpointInput;
   b4c9c:	f7ff fb8c 	bl	b43b8 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4ca0:	e9d4 2300 	ldrd	r2, r3, [r4]
   b4ca4:	1a9b      	subs	r3, r3, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4ca6:	42ab      	cmp	r3, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4ca8:	ea4f 01e3 	mov.w	r1, r3, asr #3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4cac:	da02      	bge.n	b4cb4 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x64>
	  __throw_length_error(
   b4cae:	485a      	ldr	r0, [pc, #360]	; (b4e18 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1c8>)
   b4cb0:	f005 f892 	bl	b9dd8 <_ZSt20__throw_length_errorPKc>
      { _M_create_storage(__n); }
   b4cb4:	a808      	add	r0, sp, #32
   b4cb6:	9101      	str	r1, [sp, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4cb8:	e9cd 5508 	strd	r5, r5, [sp, #32]
   b4cbc:	950a      	str	r5, [sp, #40]	; 0x28
      { _M_create_storage(__n); }
   b4cbe:	f7ff fedf 	bl	b4a80 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
      if (__n <= 0)
   b4cc2:	9901      	ldr	r1, [sp, #4]
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
   b4cc4:	9808      	ldr	r0, [sp, #32]
   b4cc6:	b131      	cbz	r1, b4cd6 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x86>
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
   b4cc8:	eb00 0b81 	add.w	fp, r0, r1, lsl #2
	*__first = __tmp;
   b4ccc:	008a      	lsls	r2, r1, #2
   b4cce:	4629      	mov	r1, r5
   b4cd0:	f006 f8ad 	bl	bae2e <memset>
   b4cd4:	4658      	mov	r0, fp
	  _M_finish = __x._M_finish;
   b4cd6:	e9d4 5203 	ldrd	r5, r2, [r4, #12]
	  _M_start = __x._M_start;
   b4cda:	9908      	ldr	r1, [sp, #32]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4cdc:	6963      	ldr	r3, [r4, #20]
   b4cde:	930d      	str	r3, [sp, #52]	; 0x34
	  _M_finish = __x._M_finish;
   b4ce0:	e9c4 1003 	strd	r1, r0, [r4, #12]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4ce4:	990a      	ldr	r1, [sp, #40]	; 0x28
   b4ce6:	6161      	str	r1, [r4, #20]
	  _M_finish = __x._M_finish;
   b4ce8:	e9cd 520b 	strd	r5, r2, [sp, #44]	; 0x2c
      }
   b4cec:	a80b      	add	r0, sp, #44	; 0x2c
	  _M_start = __x._M_start;
   b4cee:	2500      	movs	r5, #0
	  _M_finish = __x._M_finish;
   b4cf0:	e9cd 5508 	strd	r5, r5, [sp, #32]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4cf4:	950a      	str	r5, [sp, #40]	; 0x28
      }
   b4cf6:	f7ff fded 	bl	b48d4 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b4cfa:	a808      	add	r0, sp, #32
   b4cfc:	f7ff fdea 	bl	b48d4 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
      distances = std::vector<float>(checkpoints.size(), 0);
      scalers = scalerInput;
   b4d00:	4649      	mov	r1, r9
   b4d02:	4650      	mov	r0, sl
   b4d04:	f7ff ff4e 	bl	b4ba4 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
      outputs = {std::vector<int>(outputSize[0], 0), std::vector<int>(outputSize[1], 0), std::vector<int>(outputSize[2], 0)};
   b4d08:	f8d8 1000 	ldr.w	r1, [r8]
   b4d0c:	9506      	str	r5, [sp, #24]
   b4d0e:	6809      	ldr	r1, [r1, #0]
   b4d10:	ab03      	add	r3, sp, #12
   b4d12:	aa06      	add	r2, sp, #24
   b4d14:	a80b      	add	r0, sp, #44	; 0x2c
   b4d16:	f7ff fe05 	bl	b4924 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b4d1a:	f8d8 1000 	ldr.w	r1, [r8]
   b4d1e:	9507      	str	r5, [sp, #28]
   b4d20:	6849      	ldr	r1, [r1, #4]
   b4d22:	ab04      	add	r3, sp, #16
   b4d24:	aa07      	add	r2, sp, #28
   b4d26:	a80e      	add	r0, sp, #56	; 0x38
   b4d28:	f7ff fdfc 	bl	b4924 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b4d2c:	f8d8 1000 	ldr.w	r1, [r8]
   b4d30:	9508      	str	r5, [sp, #32]
   b4d32:	ab05      	add	r3, sp, #20
   b4d34:	aa08      	add	r2, sp, #32
   b4d36:	6889      	ldr	r1, [r1, #8]
   b4d38:	a811      	add	r0, sp, #68	; 0x44
   b4d3a:	f7ff fdf3 	bl	b4924 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
			 - this->_M_impl._M_start); }
   b4d3e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b4d40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b4d42:	1a9b      	subs	r3, r3, r2
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
		    std::forward_iterator_tag)
      {
	const size_type __len = std::distance(__first, __last);

	if (__len > capacity())
   b4d44:	2b23      	cmp	r3, #35	; 0x23
   b4d46:	d83e      	bhi.n	b4dc6 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x176>
	  pointer __result = this->_M_allocate(__n);
   b4d48:	2003      	movs	r0, #3
   b4d4a:	f7ff f9dd 	bl	b4108 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
   b4d4e:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
   b4d52:	4605      	mov	r5, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b4d54:	f100 0924 	add.w	r9, r0, #36	; 0x24
	  _ForwardIterator __cur = __result;
   b4d58:	4680      	mov	r8, r0
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4d5a:	f1b8 0f00 	cmp.w	r8, #0
   b4d5e:	d003      	beq.n	b4d68 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x118>
   b4d60:	4651      	mov	r1, sl
   b4d62:	4640      	mov	r0, r8
   b4d64:	f7ff feda 	bl	b4b1c <_ZNSt6vectorIiSaIiEEC1ERKS1_>
	      for (; __first != __last; ++__first, (void)++__cur)
   b4d68:	f108 080c 	add.w	r8, r8, #12
   b4d6c:	45c8      	cmp	r8, r9
   b4d6e:	f10a 0a0c 	add.w	sl, sl, #12
   b4d72:	d1f2      	bne.n	b4d5a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x10a>
	__destroy(__first, __last);
   b4d74:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b4d78:	f7ff fe97 	bl	b4aaa <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	    _S_check_init_len(__len, _M_get_Tp_allocator());
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
	    _M_deallocate(this->_M_impl._M_start,
   b4d7c:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b4d7e:	b118      	cbz	r0, b4d88 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x138>
			  this->_M_impl._M_end_of_storage
			  - this->_M_impl._M_start);
   b4d80:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b4d82:	1a09      	subs	r1, r1, r0
   b4d84:	f7ff f98d 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b4d88:	e9c4 5909 	strd	r5, r9, [r4, #36]	; 0x24
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b4d8c:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
      }
   b4d90:	a811      	add	r0, sp, #68	; 0x44
   b4d92:	f7ff fda9 	bl	b48e8 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4d96:	a80e      	add	r0, sp, #56	; 0x38
   b4d98:	f7ff fda6 	bl	b48e8 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4d9c:	a80b      	add	r0, sp, #44	; 0x2c
   b4d9e:	f7ff fda3 	bl	b48e8 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
	this->_M_assign(__str);
   b4da2:	991e      	ldr	r1, [sp, #120]	; 0x78
   b4da4:	4638      	mov	r0, r7
   b4da6:	f005 f86d 	bl	b9e84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
      name = nameInput;
      colors = colorInput;
   b4daa:	4630      	mov	r0, r6
   b4dac:	991f      	ldr	r1, [sp, #124]	; 0x7c
   b4dae:	f7ff fb55 	bl	b445c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
	return *(this->_M_impl._M_start + __n);
   b4db2:	9b20      	ldr	r3, [sp, #128]	; 0x80
   b4db4:	681b      	ldr	r3, [r3, #0]
      lowerLoopBound = loopBoundInput[0];
   b4db6:	681a      	ldr	r2, [r3, #0]
      upperLoopBound = loopBoundInput[1];
   b4db8:	685b      	ldr	r3, [r3, #4]
      lowerLoopBound = loopBoundInput[0];
   b4dba:	65e2      	str	r2, [r4, #92]	; 0x5c
    }
   b4dbc:	4620      	mov	r0, r4
      upperLoopBound = loopBoundInput[1];
   b4dbe:	6623      	str	r3, [r4, #96]	; 0x60
    }
   b4dc0:	b015      	add	sp, #84	; 0x54
   b4dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4dc6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   b4dc8:	1aad      	subs	r5, r5, r2
	  }
	else if (size() >= __len)
   b4dca:	2d23      	cmp	r5, #35	; 0x23
   b4dcc:	d90b      	bls.n	b4de6 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x196>
			      _Category>::__copy_m(__first, __last, __result);
   b4dce:	a914      	add	r1, sp, #80	; 0x50
   b4dd0:	a80b      	add	r0, sp, #44	; 0x2c
   b4dd2:	f7ff ff1f 	bl	b4c14 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b4dd6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b4dd8:	4288      	cmp	r0, r1
   b4dda:	4605      	mov	r5, r0
   b4ddc:	d0d8      	beq.n	b4d90 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x140>
   b4dde:	f7ff fe64 	bl	b4aaa <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   b4de2:	62a5      	str	r5, [r4, #40]	; 0x28
   b4de4:	e7d4      	b.n	b4d90 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x140>
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b4de6:	ab0b      	add	r3, sp, #44	; 0x2c
   b4de8:	441d      	add	r5, r3
   b4dea:	4629      	mov	r1, r5
   b4dec:	4618      	mov	r0, r3
   b4dee:	f7ff ff11 	bl	b4c14 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4df2:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
   b4df6:	ab14      	add	r3, sp, #80	; 0x50
   b4df8:	429d      	cmp	r5, r3
   b4dfa:	d00a      	beq.n	b4e12 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1c2>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4dfc:	f1b8 0f00 	cmp.w	r8, #0
   b4e00:	d003      	beq.n	b4e0a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ba>
   b4e02:	4629      	mov	r1, r5
   b4e04:	4640      	mov	r0, r8
   b4e06:	f7ff fe89 	bl	b4b1c <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b4e0a:	350c      	adds	r5, #12
   b4e0c:	f108 080c 	add.w	r8, r8, #12
   b4e10:	e7f1      	b.n	b4df6 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1a6>
	    _ForwardIterator __mid = __first;
	    std::advance(__mid, size());
	    std::copy(__first, __mid, this->_M_impl._M_start);
	    const size_type __attribute__((__unused__)) __n = __len - size();
	    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	    this->_M_impl._M_finish =
   b4e12:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
   b4e16:	e7bb      	b.n	b4d90 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x140>
   b4e18:	000bcfce 	.word	0x000bcfce

000b4e1c <_Z41__static_initialization_and_destruction_0ii.constprop.0>:
   b4e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4e20:	ed2d 8b0e 	vpush	{d8-d14}
   b4e24:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
   b4e28:	2801      	cmp	r0, #1
   b4e2a:	9007      	str	r0, [sp, #28]
   b4e2c:	f040 8596 	bne.w	b595c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb40>
  public:
    float lat;
    float lon;

    Checkpoint(float la, float lo){
      lat = la;
   b4e30:	4bb5      	ldr	r3, [pc, #724]	; (b5108 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2ec>)
   b4e32:	9372      	str	r3, [sp, #456]	; 0x1c8
      lon = lo;
   b4e34:	4bb5      	ldr	r3, [pc, #724]	; (b510c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f0>)
   b4e36:	9373      	str	r3, [sp, #460]	; 0x1cc
      lat = la;
   b4e38:	4bb5      	ldr	r3, [pc, #724]	; (b5110 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f4>)
   b4e3a:	9374      	str	r3, [sp, #464]	; 0x1d0
      lon = lo;
   b4e3c:	4bb5      	ldr	r3, [pc, #724]	; (b5114 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f8>)
   b4e3e:	9375      	str	r3, [sp, #468]	; 0x1d4
      lat = la;
   b4e40:	4bb5      	ldr	r3, [pc, #724]	; (b5118 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2fc>)
   b4e42:	9376      	str	r3, [sp, #472]	; 0x1d8
      lon = lo;
   b4e44:	4bb5      	ldr	r3, [pc, #724]	; (b511c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x300>)
   b4e46:	9377      	str	r3, [sp, #476]	; 0x1dc
      lat = la;
   b4e48:	4bb5      	ldr	r3, [pc, #724]	; (b5120 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x304>)
   b4e4a:	9378      	str	r3, [sp, #480]	; 0x1e0
      lon = lo;
   b4e4c:	4bb5      	ldr	r3, [pc, #724]	; (b5124 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x308>)
   b4e4e:	9379      	str	r3, [sp, #484]	; 0x1e4
      lat = la;
   b4e50:	4bb5      	ldr	r3, [pc, #724]	; (b5128 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x30c>)
   b4e52:	937a      	str	r3, [sp, #488]	; 0x1e8
      lon = lo;
   b4e54:	4bb5      	ldr	r3, [pc, #724]	; (b512c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x310>)
   b4e56:	937b      	str	r3, [sp, #492]	; 0x1ec
);
   b4e58:	ab72      	add	r3, sp, #456	; 0x1c8
   b4e5a:	9351      	str	r3, [sp, #324]	; 0x144
   b4e5c:	f50d 798a 	add.w	r9, sp, #276	; 0x114
   b4e60:	2305      	movs	r3, #5
   b4e62:	9951      	ldr	r1, [sp, #324]	; 0x144
   b4e64:	9352      	str	r3, [sp, #328]	; 0x148
   b4e66:	2205      	movs	r2, #5
   b4e68:	464b      	mov	r3, r9
   b4e6a:	a862      	add	r0, sp, #392	; 0x188
   b4e6c:	f7ff fd7c 	bl	b4968 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b4e70:	4baf      	ldr	r3, [pc, #700]	; (b5130 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x314>)
      lat = la;
   b4e72:	eddf 8ab0 	vldr	s17, [pc, #704]	; b5134 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x318>
      lon = lo;
   b4e76:	ed9f 8ab0 	vldr	s16, [pc, #704]	; b5138 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x31c>
      lat = la;
   b4e7a:	eddf 9ab0 	vldr	s19, [pc, #704]	; b513c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x320>
      lon = lo;
   b4e7e:	ed9f 9ab0 	vldr	s18, [pc, #704]	; b5140 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x324>
      lat = la;
   b4e82:	eddf aab0 	vldr	s21, [pc, #704]	; b5144 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x328>
      lon = lo;
   b4e86:	ed9f aab0 	vldr	s20, [pc, #704]	; b5148 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x32c>
      lat = la;
   b4e8a:	eddf bab0 	vldr	s23, [pc, #704]	; b514c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x330>
      lon = lo;
   b4e8e:	ed9f bab0 	vldr	s22, [pc, #704]	; b5150 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x334>
      lat = la;
   b4e92:	eddf dab0 	vldr	s27, [pc, #704]	; b5154 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x338>
      lon = lo;
   b4e96:	ed9f dab0 	vldr	s26, [pc, #704]	; b5158 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x33c>
      lat = la;
   b4e9a:	eddf cab0 	vldr	s25, [pc, #704]	; b515c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x340>
      lon = lo;
   b4e9e:	ed9f cab0 	vldr	s24, [pc, #704]	; b5160 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x344>
   b4ea2:	ed9f eab0 	vldr	s28, [pc, #704]	; b5164 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x348>
   b4ea6:	461f      	mov	r7, r3
   b4ea8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4eaa:	ac65      	add	r4, sp, #404	; 0x194
   b4eac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b4eb0:	2204      	movs	r2, #4
   b4eb2:	4621      	mov	r1, r4
   b4eb4:	a85f      	add	r0, sp, #380	; 0x17c
   b4eb6:	944f      	str	r4, [sp, #316]	; 0x13c
   b4eb8:	9250      	str	r2, [sp, #320]	; 0x140
   b4eba:	f7ff fe49 	bl	b4b50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b4ebe:	aa59      	add	r2, sp, #356	; 0x164
   b4ec0:	f04f 0b00 	mov.w	fp, #0
   b4ec4:	924d      	str	r2, [sp, #308]	; 0x134
   b4ec6:	2328      	movs	r3, #40	; 0x28
   b4ec8:	2203      	movs	r2, #3
   b4eca:	e9cd b359 	strd	fp, r3, [sp, #356]	; 0x164
   b4ece:	924e      	str	r2, [sp, #312]	; 0x138
   b4ed0:	ab4d      	add	r3, sp, #308	; 0x134
   b4ed2:	ad6b      	add	r5, sp, #428	; 0x1ac
   b4ed4:	e893 0006 	ldmia.w	r3, {r1, r2}
   b4ed8:	a85c      	add	r0, sp, #368	; 0x170
   b4eda:	f8cd b16c 	str.w	fp, [sp, #364]	; 0x16c
   b4ede:	f7ff fe37 	bl	b4b50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b4ee2:	4628      	mov	r0, r5
   b4ee4:	49a0      	ldr	r1, [pc, #640]	; (b5168 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x34c>)
   b4ee6:	f7ff f921 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b4eea:	49a0      	ldr	r1, [pc, #640]	; (b516c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x350>)
   b4eec:	a87e      	add	r0, sp, #504	; 0x1f8
   b4eee:	f7ff f91d 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b4ef2:	499f      	ldr	r1, [pc, #636]	; (b5170 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x354>)
   b4ef4:	a884      	add	r0, sp, #528	; 0x210
   b4ef6:	f04f 0a02 	mov.w	sl, #2
   b4efa:	f7ff f917 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b4efe:	a97e      	add	r1, sp, #504	; 0x1f8
   b4f00:	f8cd a130 	str.w	sl, [sp, #304]	; 0x130
   b4f04:	f50d 7886 	add.w	r8, sp, #268	; 0x10c
   b4f08:	914b      	str	r1, [sp, #300]	; 0x12c
   b4f0a:	aa4b      	add	r2, sp, #300	; 0x12c
   b4f0c:	4643      	mov	r3, r8
   b4f0e:	ae47      	add	r6, sp, #284	; 0x11c
   b4f10:	ca06      	ldmia	r2, {r1, r2}
   b4f12:	a856      	add	r0, sp, #344	; 0x158
   b4f14:	f7ff fd5c 	bl	b49d0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b4f18:	e9cd 6a49 	strd	r6, sl, [sp, #292]	; 0x124
   b4f1c:	ab49      	add	r3, sp, #292	; 0x124
   b4f1e:	e893 0006 	ldmia.w	r3, {r1, r2}
   b4f22:	a853      	add	r0, sp, #332	; 0x14c
   b4f24:	e9cd bb47 	strd	fp, fp, [sp, #284]	; 0x11c
   b4f28:	f7ff fe12 	bl	b4b50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway redLine = Railway(
   b4f2c:	aa53      	add	r2, sp, #332	; 0x14c
   b4f2e:	9202      	str	r2, [sp, #8]
   b4f30:	aa56      	add	r2, sp, #344	; 0x158
   b4f32:	e9cd 5200 	strd	r5, r2, [sp]
   b4f36:	aa5c      	add	r2, sp, #368	; 0x170
   b4f38:	4613      	mov	r3, r2
   b4f3a:	a962      	add	r1, sp, #392	; 0x188
   b4f3c:	aa5f      	add	r2, sp, #380	; 0x17c
   b4f3e:	488d      	ldr	r0, [pc, #564]	; (b5174 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x358>)
   b4f40:	f7ff fe86 	bl	b4c50 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
      }
   b4f44:	a853      	add	r0, sp, #332	; 0x14c
   b4f46:	f7ff fccf 	bl	b48e8 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b4f4a:	a856      	add	r0, sp, #344	; 0x158
   b4f4c:	f7ff fcd6 	bl	b48fc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b4f50:	a884      	add	r0, sp, #528	; 0x210
   b4f52:	f004 ff79 	bl	b9e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4f56:	a87e      	add	r0, sp, #504	; 0x1f8
   b4f58:	f004 ff76 	bl	b9e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4f5c:	4628      	mov	r0, r5
   b4f5e:	f004 ff73 	bl	b9e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4f62:	a85c      	add	r0, sp, #368	; 0x170
   b4f64:	f7ff fcc0 	bl	b48e8 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4f68:	a85f      	add	r0, sp, #380	; 0x17c
   b4f6a:	f7ff fcbd 	bl	b48e8 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4f6e:	a862      	add	r0, sp, #392	; 0x188
   b4f70:	f7ff fca6 	bl	b48c0 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b4f74:	4b80      	ldr	r3, [pc, #512]	; (b5178 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x35c>)
   b4f76:	937e      	str	r3, [sp, #504]	; 0x1f8
      lon = lo;
   b4f78:	4b80      	ldr	r3, [pc, #512]	; (b517c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x360>)
   b4f7a:	937f      	str	r3, [sp, #508]	; 0x1fc
      lat = la;
   b4f7c:	4b80      	ldr	r3, [pc, #512]	; (b5180 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x364>)
   b4f7e:	9380      	str	r3, [sp, #512]	; 0x200
      lon = lo;
   b4f80:	4b80      	ldr	r3, [pc, #512]	; (b5184 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x368>)
   b4f82:	9381      	str	r3, [sp, #516]	; 0x204
      lat = la;
   b4f84:	4b80      	ldr	r3, [pc, #512]	; (b5188 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x36c>)
   b4f86:	9382      	str	r3, [sp, #520]	; 0x208
      lon = lo;
   b4f88:	4b80      	ldr	r3, [pc, #512]	; (b518c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x370>)
   b4f8a:	9383      	str	r3, [sp, #524]	; 0x20c
      lat = la;
   b4f8c:	4b80      	ldr	r3, [pc, #512]	; (b5190 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x374>)
   b4f8e:	9384      	str	r3, [sp, #528]	; 0x210
      lon = lo;
   b4f90:	4b80      	ldr	r3, [pc, #512]	; (b5194 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x378>)
   b4f92:	9385      	str	r3, [sp, #532]	; 0x214
      lat = la;
   b4f94:	4b80      	ldr	r3, [pc, #512]	; (b5198 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x37c>)
   b4f96:	9386      	str	r3, [sp, #536]	; 0x218
      lon = lo;
   b4f98:	4b80      	ldr	r3, [pc, #512]	; (b519c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x380>)
   b4f9a:	9387      	str	r3, [sp, #540]	; 0x21c
      lat = la;
   b4f9c:	4b80      	ldr	r3, [pc, #512]	; (b51a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x384>)
   b4f9e:	9388      	str	r3, [sp, #544]	; 0x220
);
   b4fa0:	aa7e      	add	r2, sp, #504	; 0x1f8
      lon = lo;
   b4fa2:	4b80      	ldr	r3, [pc, #512]	; (b51a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x388>)
   b4fa4:	9247      	str	r2, [sp, #284]	; 0x11c
   b4fa6:	9389      	str	r3, [sp, #548]	; 0x224
   b4fa8:	2207      	movs	r2, #7
      lat = la;
   b4faa:	4b7f      	ldr	r3, [pc, #508]	; (b51a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x38c>)
   b4fac:	938a      	str	r3, [sp, #552]	; 0x228
   b4fae:	9248      	str	r2, [sp, #288]	; 0x120
      lon = lo;
   b4fb0:	4b7e      	ldr	r3, [pc, #504]	; (b51ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x390>)
   b4fb2:	938b      	str	r3, [sp, #556]	; 0x22c
   b4fb4:	e896 0006 	ldmia.w	r6, {r1, r2}
   b4fb8:	ab3b      	add	r3, sp, #236	; 0xec
   b4fba:	f107 0610 	add.w	r6, r7, #16
   b4fbe:	a862      	add	r0, sp, #392	; 0x188
   b4fc0:	f7ff fcd2 	bl	b4968 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b4fc4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4fc6:	462f      	mov	r7, r5
   b4fc8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b4fca:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4fce:	2206      	movs	r2, #6
   b4fd0:	9545      	str	r5, [sp, #276]	; 0x114
   b4fd2:	9246      	str	r2, [sp, #280]	; 0x118
   b4fd4:	e9c7 0100 	strd	r0, r1, [r7]
   b4fd8:	e899 0006 	ldmia.w	r9, {r1, r2}
   b4fdc:	a85f      	add	r0, sp, #380	; 0x17c
   b4fde:	9705      	str	r7, [sp, #20]
   b4fe0:	f7ff fdb6 	bl	b4b50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b4fe4:	aa59      	add	r2, sp, #356	; 0x164
   b4fe6:	9243      	str	r2, [sp, #268]	; 0x10c
   b4fe8:	2203      	movs	r2, #3
   b4fea:	9244      	str	r2, [sp, #272]	; 0x110
   b4fec:	e898 0006 	ldmia.w	r8, {r1, r2}
   b4ff0:	233c      	movs	r3, #60	; 0x3c
   b4ff2:	a85c      	add	r0, sp, #368	; 0x170
   b4ff4:	e9cd 3b5a 	strd	r3, fp, [sp, #360]	; 0x168
   b4ff8:	f8cd b164 	str.w	fp, [sp, #356]	; 0x164
   b4ffc:	f7ff fda8 	bl	b4b50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5000:	4620      	mov	r0, r4
   b5002:	496b      	ldr	r1, [pc, #428]	; (b51b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x394>)
   b5004:	f7ff f892 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5008:	496a      	ldr	r1, [pc, #424]	; (b51b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x398>)
   b500a:	a872      	add	r0, sp, #456	; 0x1c8
   b500c:	f7ff f88e 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5010:	4969      	ldr	r1, [pc, #420]	; (b51b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x39c>)
   b5012:	a878      	add	r0, sp, #480	; 0x1e0
   b5014:	f7ff f88a 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5018:	a972      	add	r1, sp, #456	; 0x1c8
   b501a:	e9cd 1a41 	strd	r1, sl, [sp, #260]	; 0x104
   b501e:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
   b5022:	aa41      	add	r2, sp, #260	; 0x104
   b5024:	464b      	mov	r3, r9
   b5026:	ae3d      	add	r6, sp, #244	; 0xf4
   b5028:	ca06      	ldmia	r2, {r1, r2}
   b502a:	a856      	add	r0, sp, #344	; 0x158
   b502c:	f7ff fcd0 	bl	b49d0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5030:	e9cd 6a3f 	strd	r6, sl, [sp, #252]	; 0xfc
   b5034:	ab3f      	add	r3, sp, #252	; 0xfc
   b5036:	e893 0006 	ldmia.w	r3, {r1, r2}
   b503a:	a853      	add	r0, sp, #332	; 0x14c
   b503c:	e9cd bb3d 	strd	fp, fp, [sp, #244]	; 0xf4
   b5040:	f7ff fd86 	bl	b4b50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway blueLine = Railway(
   b5044:	aa53      	add	r2, sp, #332	; 0x14c
   b5046:	9202      	str	r2, [sp, #8]
   b5048:	aa56      	add	r2, sp, #344	; 0x158
   b504a:	e9cd 4200 	strd	r4, r2, [sp]
   b504e:	aa5c      	add	r2, sp, #368	; 0x170
   b5050:	4613      	mov	r3, r2
   b5052:	a962      	add	r1, sp, #392	; 0x188
   b5054:	aa5f      	add	r2, sp, #380	; 0x17c
   b5056:	4859      	ldr	r0, [pc, #356]	; (b51bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3a0>)
   b5058:	f7ff fdfa 	bl	b4c50 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b505c:	a853      	add	r0, sp, #332	; 0x14c
   b505e:	f7ff fc43 	bl	b48e8 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5062:	a856      	add	r0, sp, #344	; 0x158
   b5064:	f7ff fc4a 	bl	b48fc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5068:	a878      	add	r0, sp, #480	; 0x1e0
   b506a:	f004 feed 	bl	b9e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b506e:	a872      	add	r0, sp, #456	; 0x1c8
   b5070:	f004 feea 	bl	b9e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5074:	4620      	mov	r0, r4
   b5076:	f004 fee7 	bl	b9e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b507a:	a85c      	add	r0, sp, #368	; 0x170
   b507c:	f7ff fc34 	bl	b48e8 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5080:	a85f      	add	r0, sp, #380	; 0x17c
   b5082:	f7ff fc31 	bl	b48e8 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5086:	a862      	add	r0, sp, #392	; 0x188
   b5088:	f7ff fc1a 	bl	b48c0 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b508c:	aa7e      	add	r2, sp, #504	; 0x1f8
   b508e:	923d      	str	r2, [sp, #244]	; 0xf4
   b5090:	2207      	movs	r2, #7
   b5092:	f10d 08c4 	add.w	r8, sp, #196	; 0xc4
   b5096:	923e      	str	r2, [sp, #248]	; 0xf8
   b5098:	e896 0006 	ldmia.w	r6, {r1, r2}
   b509c:	4643      	mov	r3, r8
   b509e:	a862      	add	r0, sp, #392	; 0x188
      lat = la;
   b50a0:	edcd 8a7e 	vstr	s17, [sp, #504]	; 0x1f8
      lon = lo;
   b50a4:	ed8d 8a7f 	vstr	s16, [sp, #508]	; 0x1fc
      lat = la;
   b50a8:	edcd 9a80 	vstr	s19, [sp, #512]	; 0x200
      lon = lo;
   b50ac:	ed8d 9a81 	vstr	s18, [sp, #516]	; 0x204
      lat = la;
   b50b0:	edcd aa82 	vstr	s21, [sp, #520]	; 0x208
      lon = lo;
   b50b4:	ed8d aa83 	vstr	s20, [sp, #524]	; 0x20c
      lat = la;
   b50b8:	edcd ba84 	vstr	s23, [sp, #528]	; 0x210
      lon = lo;
   b50bc:	ed8d ba85 	vstr	s22, [sp, #532]	; 0x214
      lat = la;
   b50c0:	edcd 8a86 	vstr	s17, [sp, #536]	; 0x218
      lon = lo;
   b50c4:	ed8d 8a87 	vstr	s16, [sp, #540]	; 0x21c
      lat = la;
   b50c8:	edcd da88 	vstr	s27, [sp, #544]	; 0x220
      lon = lo;
   b50cc:	ed8d da89 	vstr	s26, [sp, #548]	; 0x224
      lat = la;
   b50d0:	edcd ca8a 	vstr	s25, [sp, #552]	; 0x228
      lon = lo;
   b50d4:	ed8d ca8b 	vstr	s24, [sp, #556]	; 0x22c
   b50d8:	f7ff fc46 	bl	b4968 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b50dc:	4b14      	ldr	r3, [pc, #80]	; (b5130 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x314>)
   b50de:	953b      	str	r5, [sp, #236]	; 0xec
   b50e0:	f103 0228 	add.w	r2, r3, #40	; 0x28
   b50e4:	4617      	mov	r7, r2
   b50e6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b50e8:	462e      	mov	r6, r5
   b50ea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b50ec:	e9d7 0100 	ldrd	r0, r1, [r7]
   b50f0:	9a05      	ldr	r2, [sp, #20]
   b50f2:	9706      	str	r7, [sp, #24]
   b50f4:	e882 0003 	stmia.w	r2, {r0, r1}
   b50f8:	2206      	movs	r2, #6
   b50fa:	ab3b      	add	r3, sp, #236	; 0xec
   b50fc:	923c      	str	r2, [sp, #240]	; 0xf0
   b50fe:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5102:	a85f      	add	r0, sp, #380	; 0x17c
   b5104:	e05c      	b.n	b51c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3a4>
   b5106:	bf00      	nop
   b5108:	42276980 	.word	0x42276980
   b510c:	c2af431e 	.word	0xc2af431e
   b5110:	42279dcc 	.word	0x42279dcc
   b5114:	c2af4202 	.word	0xc2af4202
   b5118:	42279d95 	.word	0x42279d95
   b511c:	c2af476d 	.word	0xc2af476d
   b5120:	4227a7a9 	.word	0x4227a7a9
   b5124:	c2af4e05 	.word	0xc2af4e05
   b5128:	4227b382 	.word	0x4227b382
   b512c:	c2af4e44 	.word	0xc2af4e44
   b5130:	000bd244 	.word	0x000bd244
   b5134:	42278b1a 	.word	0x42278b1a
   b5138:	c2af449a 	.word	0xc2af449a
   b513c:	42278b2f 	.word	0x42278b2f
   b5140:	c2af4095 	.word	0xc2af4095
   b5144:	422781d8 	.word	0x422781d8
   b5148:	c2af4044 	.word	0xc2af4044
   b514c:	42278216 	.word	0x42278216
   b5150:	c2af44c1 	.word	0xc2af44c1
   b5154:	4227a437 	.word	0x4227a437
   b5158:	c2af4659 	.word	0xc2af4659
   b515c:	4227a49e 	.word	0x4227a49e
   b5160:	c2af4bd0 	.word	0xc2af4bd0
   b5164:	c2af4089 	.word	0xc2af4089
   b5168:	000bcf06 	.word	0x000bcf06
   b516c:	000bcfff 	.word	0x000bcfff
   b5170:	000bd006 	.word	0x000bd006
   b5174:	2003e5c4 	.word	0x2003e5c4
   b5178:	42277e9d 	.word	0x42277e9d
   b517c:	c2af74b3 	.word	0xc2af74b3
   b5180:	422780af 	.word	0x422780af
   b5184:	c2af588e 	.word	0xc2af588e
   b5188:	4227804d 	.word	0x4227804d
   b518c:	c2af482e 	.word	0xc2af482e
   b5190:	422780ad 	.word	0x422780ad
   b5194:	c2af4157 	.word	0xc2af4157
   b5198:	42278aff 	.word	0x42278aff
   b519c:	c2af4253 	.word	0xc2af4253
   b51a0:	42278af4 	.word	0x42278af4
   b51a4:	c2af4798 	.word	0xc2af4798
   b51a8:	4227a978 	.word	0x4227a978
   b51ac:	c2af5f5d 	.word	0xc2af5f5d
   b51b0:	000bcf12 	.word	0x000bcf12
   b51b4:	000bd00d 	.word	0x000bd00d
   b51b8:	000bd014 	.word	0x000bd014
   b51bc:	20035588 	.word	0x20035588
   b51c0:	f7ff fcc6 	bl	b4b50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b51c4:	f107 0208 	add.w	r2, r7, #8
   b51c8:	ca07      	ldmia	r2, {r0, r1, r2}
   b51ca:	af59      	add	r7, sp, #356	; 0x164
   b51cc:	e887 0007 	stmia.w	r7, {r0, r1, r2}
   b51d0:	2103      	movs	r1, #3
   b51d2:	9739      	str	r7, [sp, #228]	; 0xe4
   b51d4:	913a      	str	r1, [sp, #232]	; 0xe8
   b51d6:	e899 0006 	ldmia.w	r9, {r1, r2}
   b51da:	a85c      	add	r0, sp, #368	; 0x170
   b51dc:	f7ff fcb8 	bl	b4b50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b51e0:	4620      	mov	r0, r4
   b51e2:	49b5      	ldr	r1, [pc, #724]	; (b54b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x69c>)
   b51e4:	f7fe ffa2 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b51e8:	49b4      	ldr	r1, [pc, #720]	; (b54bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a0>)
   b51ea:	a872      	add	r0, sp, #456	; 0x1c8
   b51ec:	f7fe ff9e 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b51f0:	49b3      	ldr	r1, [pc, #716]	; (b54c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a4>)
   b51f2:	a878      	add	r0, sp, #480	; 0x1e0
   b51f4:	f7fe ff9a 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b51f8:	a972      	add	r1, sp, #456	; 0x1c8
   b51fa:	e9cd 1a37 	strd	r1, sl, [sp, #220]	; 0xdc
   b51fe:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   b5202:	aa37      	add	r2, sp, #220	; 0xdc
   b5204:	ca06      	ldmia	r2, {r1, r2}
   b5206:	464b      	mov	r3, r9
   b5208:	ae33      	add	r6, sp, #204	; 0xcc
   b520a:	a856      	add	r0, sp, #344	; 0x158
   b520c:	f7ff fbe0 	bl	b49d0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5210:	e9cd 6a35 	strd	r6, sl, [sp, #212]	; 0xd4
   b5214:	ab35      	add	r3, sp, #212	; 0xd4
   b5216:	2104      	movs	r1, #4
   b5218:	9134      	str	r1, [sp, #208]	; 0xd0
   b521a:	a853      	add	r0, sp, #332	; 0x14c
   b521c:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5220:	f8cd b0cc 	str.w	fp, [sp, #204]	; 0xcc
   b5224:	f7ff fc94 	bl	b4b50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway brownLine = Railway(
   b5228:	a953      	add	r1, sp, #332	; 0x14c
   b522a:	9102      	str	r1, [sp, #8]
   b522c:	a956      	add	r1, sp, #344	; 0x158
   b522e:	e9cd 4100 	strd	r4, r1, [sp]
   b5232:	a95c      	add	r1, sp, #368	; 0x170
   b5234:	460b      	mov	r3, r1
   b5236:	a95f      	add	r1, sp, #380	; 0x17c
   b5238:	460a      	mov	r2, r1
   b523a:	48a2      	ldr	r0, [pc, #648]	; (b54c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a8>)
   b523c:	a962      	add	r1, sp, #392	; 0x188
   b523e:	f7ff fd07 	bl	b4c50 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5242:	a853      	add	r0, sp, #332	; 0x14c
   b5244:	f7ff fb50 	bl	b48e8 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5248:	a856      	add	r0, sp, #344	; 0x158
   b524a:	f7ff fb57 	bl	b48fc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b524e:	a878      	add	r0, sp, #480	; 0x1e0
   b5250:	f004 fdfa 	bl	b9e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5254:	a872      	add	r0, sp, #456	; 0x1c8
   b5256:	f004 fdf7 	bl	b9e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b525a:	4620      	mov	r0, r4
   b525c:	f004 fdf4 	bl	b9e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5260:	a85c      	add	r0, sp, #368	; 0x170
   b5262:	f7ff fb41 	bl	b48e8 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5266:	a85f      	add	r0, sp, #380	; 0x17c
   b5268:	f7ff fb3e 	bl	b48e8 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b526c:	a862      	add	r0, sp, #392	; 0x188
   b526e:	f7ff fb27 	bl	b48c0 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5272:	4b95      	ldr	r3, [pc, #596]	; (b54c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6ac>)
   b5274:	9372      	str	r3, [sp, #456]	; 0x1c8
      lon = lo;
   b5276:	4b95      	ldr	r3, [pc, #596]	; (b54cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b0>)
   b5278:	9373      	str	r3, [sp, #460]	; 0x1cc
      lat = la;
   b527a:	4b95      	ldr	r3, [pc, #596]	; (b54d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b4>)
   b527c:	9374      	str	r3, [sp, #464]	; 0x1d0
);
   b527e:	a972      	add	r1, sp, #456	; 0x1c8
   b5280:	4b94      	ldr	r3, [pc, #592]	; (b54d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b8>)
   b5282:	9133      	str	r1, [sp, #204]	; 0xcc
   b5284:	9378      	str	r3, [sp, #480]	; 0x1e0
   b5286:	2105      	movs	r1, #5
      lon = lo;
   b5288:	4b93      	ldr	r3, [pc, #588]	; (b54d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6bc>)
   b528a:	9379      	str	r3, [sp, #484]	; 0x1e4
   b528c:	9134      	str	r1, [sp, #208]	; 0xd0
      lat = la;
   b528e:	4b93      	ldr	r3, [pc, #588]	; (b54dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c0>)
   b5290:	937a      	str	r3, [sp, #488]	; 0x1e8
   b5292:	e896 0006 	ldmia.w	r6, {r1, r2}
   b5296:	af27      	add	r7, sp, #156	; 0x9c
   b5298:	4e91      	ldr	r6, [pc, #580]	; (b54e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c4>)
      lon = lo;
   b529a:	4b92      	ldr	r3, [pc, #584]	; (b54e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c8>)
   b529c:	937b      	str	r3, [sp, #492]	; 0x1ec
   b529e:	a862      	add	r0, sp, #392	; 0x188
   b52a0:	463b      	mov	r3, r7
   b52a2:	ed8d ea75 	vstr	s28, [sp, #468]	; 0x1d4
      lat = la;
   b52a6:	edcd 9a76 	vstr	s19, [sp, #472]	; 0x1d8
      lon = lo;
   b52aa:	ed8d 9a77 	vstr	s18, [sp, #476]	; 0x1dc
   b52ae:	f7ff fb5b 	bl	b4968 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b52b2:	f106 034c 	add.w	r3, r6, #76	; 0x4c
   b52b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b52b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b52bc:	2304      	movs	r3, #4
   b52be:	9431      	str	r4, [sp, #196]	; 0xc4
   b52c0:	9332      	str	r3, [sp, #200]	; 0xc8
   b52c2:	e898 0006 	ldmia.w	r8, {r1, r2}
   b52c6:	a85f      	add	r0, sp, #380	; 0x17c
   b52c8:	f7ff fc42 	bl	b4b50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b52cc:	f106 035c 	add.w	r3, r6, #92	; 0x5c
   b52d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   b52d4:	ab59      	add	r3, sp, #356	; 0x164
   b52d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b52da:	932f      	str	r3, [sp, #188]	; 0xbc
   b52dc:	2303      	movs	r3, #3
   b52de:	9330      	str	r3, [sp, #192]	; 0xc0
   b52e0:	e899 0006 	ldmia.w	r9, {r1, r2}
   b52e4:	a85c      	add	r0, sp, #368	; 0x170
   b52e6:	f7ff fc33 	bl	b4b50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b52ea:	4628      	mov	r0, r5
   b52ec:	497e      	ldr	r1, [pc, #504]	; (b54e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6cc>)
   b52ee:	f7fe ff1d 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b52f2:	497e      	ldr	r1, [pc, #504]	; (b54ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d0>)
   b52f4:	a87e      	add	r0, sp, #504	; 0x1f8
   b52f6:	f7fe ff19 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b52fa:	497d      	ldr	r1, [pc, #500]	; (b54f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d4>)
   b52fc:	a884      	add	r0, sp, #528	; 0x210
   b52fe:	f7fe ff15 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5302:	ab7e      	add	r3, sp, #504	; 0x1f8
   b5304:	e9cd 3a2d 	strd	r3, sl, [sp, #180]	; 0xb4
   b5308:	f10d 0994 	add.w	r9, sp, #148	; 0x94
   b530c:	aa2d      	add	r2, sp, #180	; 0xb4
   b530e:	464b      	mov	r3, r9
   b5310:	ae29      	add	r6, sp, #164	; 0xa4
   b5312:	ca06      	ldmia	r2, {r1, r2}
   b5314:	a856      	add	r0, sp, #344	; 0x158
   b5316:	f7ff fb5b 	bl	b49d0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b531a:	e9cd 6a2b 	strd	r6, sl, [sp, #172]	; 0xac
   b531e:	9b07      	ldr	r3, [sp, #28]
   b5320:	9329      	str	r3, [sp, #164]	; 0xa4
   b5322:	2303      	movs	r3, #3
   b5324:	932a      	str	r3, [sp, #168]	; 0xa8
   b5326:	ab2b      	add	r3, sp, #172	; 0xac
   b5328:	e893 0006 	ldmia.w	r3, {r1, r2}
   b532c:	a853      	add	r0, sp, #332	; 0x14c
   b532e:	f7ff fc0f 	bl	b4b50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway greenLine = Railway(
   b5332:	ab53      	add	r3, sp, #332	; 0x14c
   b5334:	9302      	str	r3, [sp, #8]
   b5336:	a95f      	add	r1, sp, #380	; 0x17c
   b5338:	ab56      	add	r3, sp, #344	; 0x158
   b533a:	460a      	mov	r2, r1
   b533c:	e9cd 5300 	strd	r5, r3, [sp]
   b5340:	a962      	add	r1, sp, #392	; 0x188
   b5342:	ab5c      	add	r3, sp, #368	; 0x170
   b5344:	486b      	ldr	r0, [pc, #428]	; (b54f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d8>)
   b5346:	f7ff fc83 	bl	b4c50 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b534a:	a853      	add	r0, sp, #332	; 0x14c
   b534c:	f7ff facc 	bl	b48e8 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5350:	a856      	add	r0, sp, #344	; 0x158
   b5352:	f7ff fad3 	bl	b48fc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5356:	a884      	add	r0, sp, #528	; 0x210
   b5358:	f004 fd76 	bl	b9e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b535c:	a87e      	add	r0, sp, #504	; 0x1f8
   b535e:	f004 fd73 	bl	b9e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5362:	4628      	mov	r0, r5
   b5364:	f004 fd70 	bl	b9e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5368:	a85c      	add	r0, sp, #368	; 0x170
   b536a:	f7ff fabd 	bl	b48e8 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b536e:	a85f      	add	r0, sp, #380	; 0x17c
   b5370:	f7ff faba 	bl	b48e8 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5374:	a862      	add	r0, sp, #392	; 0x188
   b5376:	f7ff faa3 	bl	b48c0 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b537a:	4b5f      	ldr	r3, [pc, #380]	; (b54f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6dc>)
   b537c:	937e      	str	r3, [sp, #504]	; 0x1f8
      lon = lo;
   b537e:	4b5f      	ldr	r3, [pc, #380]	; (b54fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e0>)
   b5380:	937f      	str	r3, [sp, #508]	; 0x1fc
      lat = la;
   b5382:	4b5f      	ldr	r3, [pc, #380]	; (b5500 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e4>)
   b5384:	9380      	str	r3, [sp, #512]	; 0x200
      lon = lo;
   b5386:	4b5f      	ldr	r3, [pc, #380]	; (b5504 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e8>)
   b5388:	9381      	str	r3, [sp, #516]	; 0x204
      lat = la;
   b538a:	4b5f      	ldr	r3, [pc, #380]	; (b5508 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6ec>)
   b538c:	9382      	str	r3, [sp, #520]	; 0x208
      lon = lo;
   b538e:	4b5f      	ldr	r3, [pc, #380]	; (b550c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f0>)
   b5390:	9383      	str	r3, [sp, #524]	; 0x20c
      lat = la;
   b5392:	4b5f      	ldr	r3, [pc, #380]	; (b5510 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f4>)
   b5394:	9384      	str	r3, [sp, #528]	; 0x210
   b5396:	4b5f      	ldr	r3, [pc, #380]	; (b5514 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f8>)
   b5398:	938a      	str	r3, [sp, #552]	; 0x228
      lon = lo;
   b539a:	4b5f      	ldr	r3, [pc, #380]	; (b5518 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6fc>)
   b539c:	938b      	str	r3, [sp, #556]	; 0x22c
);
   b539e:	ab7e      	add	r3, sp, #504	; 0x1f8
   b53a0:	9329      	str	r3, [sp, #164]	; 0xa4
   b53a2:	2308      	movs	r3, #8
   b53a4:	932a      	str	r3, [sp, #168]	; 0xa8
   b53a6:	e896 0006 	ldmia.w	r6, {r1, r2}
   b53aa:	4e4d      	ldr	r6, [pc, #308]	; (b54e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c4>)
   b53ac:	ed8d ea85 	vstr	s28, [sp, #532]	; 0x214
   b53b0:	f10d 0874 	add.w	r8, sp, #116	; 0x74
   b53b4:	4643      	mov	r3, r8
   b53b6:	a862      	add	r0, sp, #392	; 0x188
   b53b8:	3668      	adds	r6, #104	; 0x68
      lat = la;
   b53ba:	edcd 9a86 	vstr	s19, [sp, #536]	; 0x218
      lon = lo;
   b53be:	ed8d 9a87 	vstr	s18, [sp, #540]	; 0x21c
      lat = la;
   b53c2:	edcd 8a88 	vstr	s17, [sp, #544]	; 0x220
      lon = lo;
   b53c6:	ed8d 8a89 	vstr	s16, [sp, #548]	; 0x224
      lat = la;
   b53ca:	edcd aa8c 	vstr	s21, [sp, #560]	; 0x230
      lon = lo;
   b53ce:	ed8d aa8d 	vstr	s20, [sp, #564]	; 0x234
   b53d2:	f7ff fac9 	bl	b4968 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b53d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b53d8:	46ac      	mov	ip, r5
   b53da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b53de:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   b53e2:	9b05      	ldr	r3, [sp, #20]
   b53e4:	9527      	str	r5, [sp, #156]	; 0x9c
   b53e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b53ea:	2307      	movs	r3, #7
   b53ec:	9328      	str	r3, [sp, #160]	; 0xa0
   b53ee:	e897 0006 	ldmia.w	r7, {r1, r2}
   b53f2:	a85f      	add	r0, sp, #380	; 0x17c
   b53f4:	f7ff fbac 	bl	b4b50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b53f8:	f106 030c 	add.w	r3, r6, #12
   b53fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   b5400:	af59      	add	r7, sp, #356	; 0x164
   b5402:	e887 0007 	stmia.w	r7, {r0, r1, r2}
   b5406:	2103      	movs	r1, #3
   b5408:	9725      	str	r7, [sp, #148]	; 0x94
   b540a:	9126      	str	r1, [sp, #152]	; 0x98
   b540c:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5410:	a85c      	add	r0, sp, #368	; 0x170
   b5412:	f7ff fb9d 	bl	b4b50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5416:	4620      	mov	r0, r4
   b5418:	4940      	ldr	r1, [pc, #256]	; (b551c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x700>)
   b541a:	f7fe fe87 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b541e:	4940      	ldr	r1, [pc, #256]	; (b5520 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x704>)
   b5420:	a872      	add	r0, sp, #456	; 0x1c8
   b5422:	f7fe fe83 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5426:	493f      	ldr	r1, [pc, #252]	; (b5524 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x708>)
   b5428:	a878      	add	r0, sp, #480	; 0x1e0
   b542a:	f7fe fe7f 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b542e:	a972      	add	r1, sp, #456	; 0x1c8
   b5430:	e9cd 1a23 	strd	r1, sl, [sp, #140]	; 0x8c
   b5434:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   b5438:	aa23      	add	r2, sp, #140	; 0x8c
   b543a:	ca06      	ldmia	r2, {r1, r2}
   b543c:	464b      	mov	r3, r9
   b543e:	ae1f      	add	r6, sp, #124	; 0x7c
   b5440:	a856      	add	r0, sp, #344	; 0x158
   b5442:	f7ff fac5 	bl	b49d0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5446:	e9cd 6a21 	strd	r6, sl, [sp, #132]	; 0x84
   b544a:	2303      	movs	r3, #3
   b544c:	2107      	movs	r1, #7
   b544e:	e9cd 311f 	strd	r3, r1, [sp, #124]	; 0x7c
   b5452:	ab21      	add	r3, sp, #132	; 0x84
   b5454:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5458:	a853      	add	r0, sp, #332	; 0x14c
   b545a:	f7ff fb79 	bl	b4b50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway orangeLine = Railway(
   b545e:	a953      	add	r1, sp, #332	; 0x14c
   b5460:	9102      	str	r1, [sp, #8]
   b5462:	a956      	add	r1, sp, #344	; 0x158
   b5464:	e9cd 4100 	strd	r4, r1, [sp]
   b5468:	a95c      	add	r1, sp, #368	; 0x170
   b546a:	460b      	mov	r3, r1
   b546c:	a95f      	add	r1, sp, #380	; 0x17c
   b546e:	460a      	mov	r2, r1
   b5470:	482d      	ldr	r0, [pc, #180]	; (b5528 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x70c>)
   b5472:	a962      	add	r1, sp, #392	; 0x188
   b5474:	f7ff fbec 	bl	b4c50 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5478:	a853      	add	r0, sp, #332	; 0x14c
   b547a:	f7ff fa35 	bl	b48e8 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b547e:	a856      	add	r0, sp, #344	; 0x158
   b5480:	f7ff fa3c 	bl	b48fc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5484:	a878      	add	r0, sp, #480	; 0x1e0
   b5486:	f004 fcdf 	bl	b9e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b548a:	a872      	add	r0, sp, #456	; 0x1c8
   b548c:	f004 fcdc 	bl	b9e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5490:	4620      	mov	r0, r4
   b5492:	f004 fcd9 	bl	b9e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5496:	a85c      	add	r0, sp, #368	; 0x170
   b5498:	f7ff fa26 	bl	b48e8 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b549c:	a85f      	add	r0, sp, #380	; 0x17c
   b549e:	f7ff fa23 	bl	b48e8 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b54a2:	a862      	add	r0, sp, #392	; 0x188
   b54a4:	f7ff fa0c 	bl	b48c0 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b54a8:	a97e      	add	r1, sp, #504	; 0x1f8
   b54aa:	911f      	str	r1, [sp, #124]	; 0x7c
   b54ac:	2107      	movs	r1, #7
   b54ae:	af13      	add	r7, sp, #76	; 0x4c
   b54b0:	9120      	str	r1, [sp, #128]	; 0x80
   b54b2:	e896 0006 	ldmia.w	r6, {r1, r2}
   b54b6:	e039      	b.n	b552c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x710>
   b54b8:	000bd01b 	.word	0x000bd01b
   b54bc:	000bd01f 	.word	0x000bd01f
   b54c0:	000bd026 	.word	0x000bd026
   b54c4:	200355ec 	.word	0x200355ec
   b54c8:	42276997 	.word	0x42276997
   b54cc:	c2af40b8 	.word	0xc2af40b8
   b54d0:	422781fe 	.word	0x422781fe
   b54d4:	42278afb 	.word	0x42278afb
   b54d8:	c2af4494 	.word	0xc2af4494
   b54dc:	42278971 	.word	0x42278971
   b54e0:	000bd244 	.word	0x000bd244
   b54e4:	c2af6479 	.word	0xc2af6479
   b54e8:	000bd218 	.word	0x000bd218
   b54ec:	000bd02d 	.word	0x000bd02d
   b54f0:	000bd034 	.word	0x000bd034
   b54f4:	20035650 	.word	0x20035650
   b54f8:	4227631a 	.word	0x4227631a
   b54fc:	c2af4bd2 	.word	0xc2af4bd2
   b5500:	42276ec4 	.word	0x42276ec4
   b5504:	c2af4115 	.word	0xc2af4115
   b5508:	422780b5 	.word	0x422780b5
   b550c:	c2af4086 	.word	0xc2af4086
   b5510:	42278200 	.word	0x42278200
   b5514:	422781e1 	.word	0x422781e1
   b5518:	c2af4476 	.word	0xc2af4476
   b551c:	000bd03b 	.word	0x000bd03b
   b5520:	000bd03f 	.word	0x000bd03f
   b5524:	000bd046 	.word	0x000bd046
   b5528:	20037ed0 	.word	0x20037ed0
   b552c:	463b      	mov	r3, r7
   b552e:	a862      	add	r0, sp, #392	; 0x188
      lat = la;
   b5530:	edcd 8a7e 	vstr	s17, [sp, #504]	; 0x1f8
      lon = lo;
   b5534:	ed8d 8a7f 	vstr	s16, [sp, #508]	; 0x1fc
      lat = la;
   b5538:	edcd 9a80 	vstr	s19, [sp, #512]	; 0x200
      lon = lo;
   b553c:	ed8d 9a81 	vstr	s18, [sp, #516]	; 0x204
      lat = la;
   b5540:	edcd aa82 	vstr	s21, [sp, #520]	; 0x208
      lon = lo;
   b5544:	ed8d aa83 	vstr	s20, [sp, #524]	; 0x20c
      lat = la;
   b5548:	edcd ba84 	vstr	s23, [sp, #528]	; 0x210
      lon = lo;
   b554c:	ed8d ba85 	vstr	s22, [sp, #532]	; 0x214
      lat = la;
   b5550:	edcd 8a86 	vstr	s17, [sp, #536]	; 0x218
      lon = lo;
   b5554:	ed8d 8a87 	vstr	s16, [sp, #540]	; 0x21c
      lat = la;
   b5558:	edcd da88 	vstr	s27, [sp, #544]	; 0x220
      lon = lo;
   b555c:	ed8d da89 	vstr	s26, [sp, #548]	; 0x224
      lat = la;
   b5560:	edcd ca8a 	vstr	s25, [sp, #552]	; 0x228
      lon = lo;
   b5564:	ed8d ca8b 	vstr	s24, [sp, #556]	; 0x22c
   b5568:	f7ff f9fe 	bl	b4968 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b556c:	4abb      	ldr	r2, [pc, #748]	; (b585c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa40>)
   b556e:	951d      	str	r5, [sp, #116]	; 0x74
   b5570:	f1a2 0c18 	sub.w	ip, r2, #24
   b5574:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5578:	462e      	mov	r6, r5
   b557a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b557c:	9906      	ldr	r1, [sp, #24]
   b557e:	9b05      	ldr	r3, [sp, #20]
   b5580:	c903      	ldmia	r1, {r0, r1}
   b5582:	e9c3 0100 	strd	r0, r1, [r3]
   b5586:	2106      	movs	r1, #6
   b5588:	911e      	str	r1, [sp, #120]	; 0x78
   b558a:	e898 0006 	ldmia.w	r8, {r1, r2}
   b558e:	a85f      	add	r0, sp, #380	; 0x17c
   b5590:	f7ff fade 	bl	b4b50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5594:	4ab1      	ldr	r2, [pc, #708]	; (b585c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa40>)
   b5596:	ca07      	ldmia	r2, {r0, r1, r2}
   b5598:	f50d 7cb2 	add.w	ip, sp, #356	; 0x164
   b559c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
   b55a0:	2203      	movs	r2, #3
   b55a2:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
   b55a6:	921c      	str	r2, [sp, #112]	; 0x70
   b55a8:	e899 0006 	ldmia.w	r9, {r1, r2}
   b55ac:	a85c      	add	r0, sp, #368	; 0x170
   b55ae:	f7ff facf 	bl	b4b50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b55b2:	4620      	mov	r0, r4
   b55b4:	49aa      	ldr	r1, [pc, #680]	; (b5860 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa44>)
   b55b6:	f7fe fdb9 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b55ba:	49aa      	ldr	r1, [pc, #680]	; (b5864 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa48>)
   b55bc:	a872      	add	r0, sp, #456	; 0x1c8
   b55be:	f7fe fdb5 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b55c2:	49a9      	ldr	r1, [pc, #676]	; (b5868 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa4c>)
   b55c4:	a878      	add	r0, sp, #480	; 0x1e0
   b55c6:	f7fe fdb1 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b55ca:	a972      	add	r1, sp, #456	; 0x1c8
   b55cc:	e9cd 1a19 	strd	r1, sl, [sp, #100]	; 0x64
   b55d0:	f10d 0844 	add.w	r8, sp, #68	; 0x44
   b55d4:	aa19      	add	r2, sp, #100	; 0x64
   b55d6:	4643      	mov	r3, r8
   b55d8:	ae15      	add	r6, sp, #84	; 0x54
   b55da:	ca06      	ldmia	r2, {r1, r2}
   b55dc:	a856      	add	r0, sp, #344	; 0x158
   b55de:	f7ff f9f7 	bl	b49d0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b55e2:	e9cd 6a17 	strd	r6, sl, [sp, #92]	; 0x5c
   b55e6:	ab17      	add	r3, sp, #92	; 0x5c
   b55e8:	e893 0006 	ldmia.w	r3, {r1, r2}
   b55ec:	a853      	add	r0, sp, #332	; 0x14c
   b55ee:	e9cd bb15 	strd	fp, fp, [sp, #84]	; 0x54
   b55f2:	f7ff faad 	bl	b4b50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway purpleLine = Railway(
   b55f6:	aa53      	add	r2, sp, #332	; 0x14c
   b55f8:	9202      	str	r2, [sp, #8]
   b55fa:	aa56      	add	r2, sp, #344	; 0x158
   b55fc:	e9cd 4200 	strd	r4, r2, [sp]
   b5600:	aa5c      	add	r2, sp, #368	; 0x170
   b5602:	4613      	mov	r3, r2
   b5604:	a962      	add	r1, sp, #392	; 0x188
   b5606:	aa5f      	add	r2, sp, #380	; 0x17c
   b5608:	4898      	ldr	r0, [pc, #608]	; (b586c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa50>)
   b560a:	f7ff fb21 	bl	b4c50 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b560e:	a853      	add	r0, sp, #332	; 0x14c
   b5610:	f7ff f96a 	bl	b48e8 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5614:	a856      	add	r0, sp, #344	; 0x158
   b5616:	f7ff f971 	bl	b48fc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b561a:	a878      	add	r0, sp, #480	; 0x1e0
   b561c:	f004 fc14 	bl	b9e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5620:	a872      	add	r0, sp, #456	; 0x1c8
   b5622:	f004 fc11 	bl	b9e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5626:	4620      	mov	r0, r4
   b5628:	f004 fc0e 	bl	b9e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b562c:	a85c      	add	r0, sp, #368	; 0x170
   b562e:	f7ff f95b 	bl	b48e8 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5632:	a85f      	add	r0, sp, #380	; 0x17c
   b5634:	f7ff f958 	bl	b48e8 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5638:	a862      	add	r0, sp, #392	; 0x188
   b563a:	f7ff f941 	bl	b48c0 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b563e:	4b8c      	ldr	r3, [pc, #560]	; (b5870 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa54>)
   b5640:	937e      	str	r3, [sp, #504]	; 0x1f8
);
   b5642:	aa7e      	add	r2, sp, #504	; 0x1f8
      lon = lo;
   b5644:	4b8b      	ldr	r3, [pc, #556]	; (b5874 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa58>)
   b5646:	9215      	str	r2, [sp, #84]	; 0x54
   b5648:	937f      	str	r3, [sp, #508]	; 0x1fc
   b564a:	2208      	movs	r2, #8
      lat = la;
   b564c:	4b8a      	ldr	r3, [pc, #552]	; (b5878 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa5c>)
   b564e:	9380      	str	r3, [sp, #512]	; 0x200
   b5650:	9216      	str	r2, [sp, #88]	; 0x58
      lon = lo;
   b5652:	4b8a      	ldr	r3, [pc, #552]	; (b587c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa60>)
   b5654:	9381      	str	r3, [sp, #516]	; 0x204
   b5656:	e896 0006 	ldmia.w	r6, {r1, r2}
      lat = la;
   b565a:	4b89      	ldr	r3, [pc, #548]	; (b5880 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa64>)
   b565c:	4e89      	ldr	r6, [pc, #548]	; (b5884 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa68>)
   b565e:	9382      	str	r3, [sp, #520]	; 0x208
      lon = lo;
   b5660:	4b89      	ldr	r3, [pc, #548]	; (b5888 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa6c>)
   b5662:	9383      	str	r3, [sp, #524]	; 0x20c
   b5664:	a862      	add	r0, sp, #392	; 0x188
   b5666:	ab0a      	add	r3, sp, #40	; 0x28
   b5668:	3690      	adds	r6, #144	; 0x90
      lat = la;
   b566a:	edcd 8a84 	vstr	s17, [sp, #528]	; 0x210
      lon = lo;
   b566e:	ed8d 8a85 	vstr	s16, [sp, #532]	; 0x214
      lat = la;
   b5672:	edcd 9a86 	vstr	s19, [sp, #536]	; 0x218
      lon = lo;
   b5676:	ed8d 9a87 	vstr	s18, [sp, #540]	; 0x21c
      lat = la;
   b567a:	edcd aa88 	vstr	s21, [sp, #544]	; 0x220
      lon = lo;
   b567e:	ed8d aa89 	vstr	s20, [sp, #548]	; 0x224
      lat = la;
   b5682:	edcd ba8a 	vstr	s23, [sp, #552]	; 0x228
      lon = lo;
   b5686:	ed8d ba8b 	vstr	s22, [sp, #556]	; 0x22c
      lat = la;
   b568a:	edcd 8a8c 	vstr	s17, [sp, #560]	; 0x230
      lon = lo;
   b568e:	ed8d 8a8d 	vstr	s16, [sp, #564]	; 0x234
   b5692:	f7ff f969 	bl	b4968 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5696:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b5698:	46ac      	mov	ip, r5
   b569a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b569e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   b56a2:	9e05      	ldr	r6, [sp, #20]
   b56a4:	9513      	str	r5, [sp, #76]	; 0x4c
   b56a6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
   b56aa:	2207      	movs	r2, #7
   b56ac:	9214      	str	r2, [sp, #80]	; 0x50
   b56ae:	e897 0006 	ldmia.w	r7, {r1, r2}
   b56b2:	a85f      	add	r0, sp, #380	; 0x17c
   b56b4:	f7ff fa4c 	bl	b4b50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b56b8:	4b74      	ldr	r3, [pc, #464]	; (b588c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa70>)
   b56ba:	4e75      	ldr	r6, [pc, #468]	; (b5890 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa74>)
   b56bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   b56c0:	ab59      	add	r3, sp, #356	; 0x164
   b56c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b56c6:	9311      	str	r3, [sp, #68]	; 0x44
   b56c8:	2303      	movs	r3, #3
   b56ca:	9312      	str	r3, [sp, #72]	; 0x48
   b56cc:	e898 0006 	ldmia.w	r8, {r1, r2}
   b56d0:	a85c      	add	r0, sp, #368	; 0x170
   b56d2:	f7ff fa3d 	bl	b4b50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b56d6:	4620      	mov	r0, r4
   b56d8:	496e      	ldr	r1, [pc, #440]	; (b5894 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa78>)
   b56da:	f8df 81d0 	ldr.w	r8, [pc, #464]	; b58ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa90>
   b56de:	f7fe fd25 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b56e2:	496d      	ldr	r1, [pc, #436]	; (b5898 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa7c>)
   b56e4:	a872      	add	r0, sp, #456	; 0x1c8
   b56e6:	f7fe fd21 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b56ea:	496c      	ldr	r1, [pc, #432]	; (b589c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa80>)
   b56ec:	a878      	add	r0, sp, #480	; 0x1e0
   b56ee:	f7fe fd1d 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b56f2:	ab72      	add	r3, sp, #456	; 0x1c8
   b56f4:	e9cd 3a0f 	strd	r3, sl, [sp, #60]	; 0x3c
   b56f8:	aa0f      	add	r2, sp, #60	; 0x3c
   b56fa:	ca06      	ldmia	r2, {r1, r2}
   b56fc:	ab09      	add	r3, sp, #36	; 0x24
   b56fe:	a856      	add	r0, sp, #344	; 0x158
   b5700:	f7ff f966 	bl	b49d0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5704:	aa0b      	add	r2, sp, #44	; 0x2c
   b5706:	e9cd 2a0d 	strd	r2, sl, [sp, #52]	; 0x34
   b570a:	2103      	movs	r1, #3
   b570c:	2307      	movs	r3, #7
   b570e:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
   b5712:	ab0d      	add	r3, sp, #52	; 0x34
   b5714:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5718:	a853      	add	r0, sp, #332	; 0x14c
   b571a:	f7ff fa19 	bl	b4b50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway pinkLine = Railway(
   b571e:	ab53      	add	r3, sp, #332	; 0x14c
   b5720:	9302      	str	r3, [sp, #8]
   b5722:	ab56      	add	r3, sp, #344	; 0x158
   b5724:	aa5f      	add	r2, sp, #380	; 0x17c
   b5726:	a962      	add	r1, sp, #392	; 0x188
   b5728:	e9cd 4300 	strd	r4, r3, [sp]
   b572c:	485c      	ldr	r0, [pc, #368]	; (b58a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa84>)
   b572e:	ab5c      	add	r3, sp, #368	; 0x170
   b5730:	f7ff fa8e 	bl	b4c50 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5734:	a853      	add	r0, sp, #332	; 0x14c
   b5736:	f7ff f8d7 	bl	b48e8 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b573a:	a856      	add	r0, sp, #344	; 0x158
   b573c:	f7ff f8de 	bl	b48fc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5740:	a878      	add	r0, sp, #480	; 0x1e0
   b5742:	f004 fb81 	bl	b9e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5746:	a872      	add	r0, sp, #456	; 0x1c8
   b5748:	f004 fb7e 	bl	b9e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b574c:	4620      	mov	r0, r4
   b574e:	f004 fb7b 	bl	b9e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5752:	a85c      	add	r0, sp, #368	; 0x170
   b5754:	f7ff f8c8 	bl	b48e8 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5758:	a85f      	add	r0, sp, #380	; 0x17c
   b575a:	f7ff f8c5 	bl	b48e8 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b575e:	a862      	add	r0, sp, #392	; 0x188
   b5760:	f7ff f8ae 	bl	b48c0 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5764:	4b4f      	ldr	r3, [pc, #316]	; (b58a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa88>)
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b5766:	4950      	ldr	r1, [pc, #320]	; (b58a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa8c>)
   b5768:	f8c3 b008 	str.w	fp, [r3, #8]
   b576c:	e9c3 bb00 	strd	fp, fp, [r3]
   b5770:	484e      	ldr	r0, [pc, #312]	; (b58ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa90>)
   b5772:	f002 fa41 	bl	b7bf8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b5776:	494e      	ldr	r1, [pc, #312]	; (b58b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa94>)
   b5778:	484e      	ldr	r0, [pc, #312]	; (b58b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa98>)
   b577a:	f002 fa3d 	bl	b7bf8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b577e:	494e      	ldr	r1, [pc, #312]	; (b58b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa9c>)
   b5780:	4843      	ldr	r0, [pc, #268]	; (b5890 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa74>)
   b5782:	f002 fa39 	bl	b7bf8 <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b5786:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b5788:	46a2      	mov	sl, r4
   b578a:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
   b578e:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   b5792:	46c1      	mov	r9, r8
   b5794:	f8d6 c000 	ldr.w	ip, [r6]
   b5798:	f8ca c000 	str.w	ip, [sl]
   b579c:	462e      	mov	r6, r5
   b579e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b57a0:	f859 3910 	ldr.w	r3, [r9], #-16
   b57a4:	9306      	str	r3, [sp, #24]
   b57a6:	9b05      	ldr	r3, [sp, #20]
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b57a8:	f8df e12c 	ldr.w	lr, [pc, #300]	; b58d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xabc>
   b57ac:	461a      	mov	r2, r3
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b57ae:	4626      	mov	r6, r4
   b57b0:	9b06      	ldr	r3, [sp, #24]
   b57b2:	6013      	str	r3, [r2, #0]
   b57b4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b57b6:	af72      	add	r7, sp, #456	; 0x1c8
      constexpr __shared_count() noexcept : _M_pi(0)
   b57b8:	e9ce bb00 	strd	fp, fp, [lr]
   b57bc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b57be:	f8c7 c000 	str.w	ip, [r7]
        BleUuid sUuid(svcUuid);
   b57c2:	46ac      	mov	ip, r5
   b57c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b57c8:	ae7e      	add	r6, sp, #504	; 0x1f8
   b57ca:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b57cc:	9b06      	ldr	r3, [sp, #24]
   b57ce:	6033      	str	r3, [r6, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b57d0:	ab7e      	add	r3, sp, #504	; 0x1f8
   b57d2:	4670      	mov	r0, lr
   b57d4:	4939      	ldr	r1, [pc, #228]	; (b58bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaa0>)
   b57d6:	9300      	str	r3, [sp, #0]
   b57d8:	f04f 0210 	mov.w	r2, #16
   b57dc:	ab72      	add	r3, sp, #456	; 0x1c8
   b57de:	e9cd bb01 	strd	fp, fp, [sp, #4]
   b57e2:	f002 ff73 	bl	b86cc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b57e6:	f8df c0cc 	ldr.w	ip, [pc, #204]	; b58b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa98>
   b57ea:	f8d8 8000 	ldr.w	r8, [r8]
   b57ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b57f2:	46a6      	mov	lr, r4
   b57f4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b57f8:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   b57fc:	f8dc e000 	ldr.w	lr, [ip]
   b5800:	f8ca e000 	str.w	lr, [sl]
   b5804:	46ac      	mov	ip, r5
   b5806:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b580a:	9b05      	ldr	r3, [sp, #20]
      : _M_ptr(0), _M_refcount()
   b580c:	f8df 90cc 	ldr.w	r9, [pc, #204]	; b58dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xac0>
   b5810:	f8c3 8000 	str.w	r8, [r3]
        BleUuid cUuid(charUuid);
   b5814:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5816:	f50d 7ce4 	add.w	ip, sp, #456	; 0x1c8
   b581a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
      constexpr __shared_count() noexcept : _M_pi(0)
   b581e:	e9c9 bb00 	strd	fp, fp, [r9]
   b5822:	f8c7 e000 	str.w	lr, [r7]
        BleUuid sUuid(svcUuid);
   b5826:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5828:	ac7e      	add	r4, sp, #504	; 0x1f8
   b582a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b582c:	4b24      	ldr	r3, [pc, #144]	; (b58c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaa4>)
        BleUuid sUuid(svcUuid);
   b582e:	f8c6 8000 	str.w	r8, [r6]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5832:	9301      	str	r3, [sp, #4]
   b5834:	ab7e      	add	r3, sp, #504	; 0x1f8
   b5836:	f04f 0204 	mov.w	r2, #4
   b583a:	4922      	ldr	r1, [pc, #136]	; (b58c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaa8>)
   b583c:	9300      	str	r3, [sp, #0]
   b583e:	4648      	mov	r0, r9
   b5840:	ab72      	add	r3, sp, #456	; 0x1c8
   b5842:	f8cd b008 	str.w	fp, [sp, #8]
   b5846:	f002 ff41 	bl	b86cc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
   b584a:	491f      	ldr	r1, [pc, #124]	; (b58c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaac>)
   b584c:	481f      	ldr	r0, [pc, #124]	; (b58cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xab0>)
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b584e:	4c20      	ldr	r4, [pc, #128]	; (b58d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xab4>)
   b5850:	f003 fc5f 	bl	b9112 <_ZN6StringC1EPK19__FlashStringHelper>
   b5854:	481f      	ldr	r0, [pc, #124]	; (b58d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xab8>)
   b5856:	f003 fa69 	bl	b8d2c <_ZN9IPAddressC1Ev>
   b585a:	e041      	b.n	b58e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xac4>
   b585c:	000bd284 	.word	0x000bd284
   b5860:	000bd5ba 	.word	0x000bd5ba
   b5864:	000bd04d 	.word	0x000bd04d
   b5868:	000bd054 	.word	0x000bd054
   b586c:	2003e554 	.word	0x2003e554
   b5870:	42276a76 	.word	0x42276a76
   b5874:	c2af692b 	.word	0xc2af692b
   b5878:	42276b5f 	.word	0x42276b5f
   b587c:	c2af56cd 	.word	0xc2af56cd
   b5880:	42278a2d 	.word	0x42278a2d
   b5884:	000bd244 	.word	0x000bd244
   b5888:	c2af56d8 	.word	0xc2af56d8
   b588c:	000bd2c8 	.word	0x000bd2c8
   b5890:	20035564 	.word	0x20035564
   b5894:	000bd05b 	.word	0x000bd05b
   b5898:	000bd060 	.word	0x000bd060
   b589c:	000bd067 	.word	0x000bd067
   b58a0:	2003e4f0 	.word	0x2003e4f0
   b58a4:	2003e5b8 	.word	0x2003e5b8
   b58a8:	000bd06e 	.word	0x000bd06e
   b58ac:	2003553c 	.word	0x2003553c
   b58b0:	000bd093 	.word	0x000bd093
   b58b4:	20035550 	.word	0x20035550
   b58b8:	000bd0b8 	.word	0x000bd0b8
   b58bc:	000bd0dd 	.word	0x000bd0dd
   b58c0:	000b424d 	.word	0x000b424d
   b58c4:	000bd0e0 	.word	0x000bd0e0
   b58c8:	000bd32a 	.word	0x000bd32a
   b58cc:	2003e628 	.word	0x2003e628
   b58d0:	20037f34 	.word	0x20037f34
   b58d4:	2003e638 	.word	0x2003e638
   b58d8:	2003e6a8 	.word	0x2003e6a8
   b58dc:	2003e688 	.word	0x2003e688
   b58e0:	4938      	ldr	r1, [pc, #224]	; (b59c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xba8>)
   b58e2:	4839      	ldr	r0, [pc, #228]	; (b59c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbac>)
   b58e4:	f003 fc15 	bl	b9112 <_ZN6StringC1EPK19__FlashStringHelper>
   b58e8:	4936      	ldr	r1, [pc, #216]	; (b59c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xba8>)
   b58ea:	4838      	ldr	r0, [pc, #224]	; (b59cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbb0>)
   b58ec:	f003 fc11 	bl	b9112 <_ZN6StringC1EPK19__FlashStringHelper>
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   b58f0:	4934      	ldr	r1, [pc, #208]	; (b59c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xba8>)
   b58f2:	4837      	ldr	r0, [pc, #220]	; (b59d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbb4>)
   b58f4:	f003 fc0d 	bl	b9112 <_ZN6StringC1EPK19__FlashStringHelper>
HttpClient http;
   b58f8:	4836      	ldr	r0, [pc, #216]	; (b59d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbb8>)
   b58fa:	f000 feef 	bl	b66dc <_ZN10HttpClientC1Ev>
   b58fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5902:	9300      	str	r3, [sp, #0]
   b5904:	f242 7210 	movw	r2, #10000	; 0x2710
   b5908:	4b33      	ldr	r3, [pc, #204]	; (b59d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbbc>)
   b590a:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b590e:	4620      	mov	r0, r4
   b5910:	f001 f8bc 	bl	b6a8c <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b5914:	4b31      	ldr	r3, [pc, #196]	; (b59dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbc0>)
   b5916:	6023      	str	r3, [r4, #0]
   b5918:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   b591c:	ecbd 8b0e 	vpop	{d8-d14}
   b5920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_M_deallocate(_M_impl._M_start,
   b5924:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b5926:	b118      	cbz	r0, b5930 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b5928:	68a1      	ldr	r1, [r4, #8]
   b592a:	1a09      	subs	r1, r1, r0
   b592c:	f7fe fbb9 	bl	b40a2 <_ZdlPvj>
Railway pinkLine = Railway(
   b5930:	482b      	ldr	r0, [pc, #172]	; (b59e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbc4>)
   b5932:	f7ff f8c5 	bl	b4ac0 <_ZN7RailwayD1Ev>
Railway purpleLine = Railway(
   b5936:	482b      	ldr	r0, [pc, #172]	; (b59e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbc8>)
   b5938:	f7ff f8c2 	bl	b4ac0 <_ZN7RailwayD1Ev>
Railway orangeLine = Railway(
   b593c:	482a      	ldr	r0, [pc, #168]	; (b59e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbcc>)
   b593e:	f7ff f8bf 	bl	b4ac0 <_ZN7RailwayD1Ev>
Railway greenLine = Railway(
   b5942:	482a      	ldr	r0, [pc, #168]	; (b59ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbd0>)
   b5944:	f7ff f8bc 	bl	b4ac0 <_ZN7RailwayD1Ev>
Railway brownLine = Railway(
   b5948:	4829      	ldr	r0, [pc, #164]	; (b59f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbd4>)
   b594a:	f7ff f8b9 	bl	b4ac0 <_ZN7RailwayD1Ev>
Railway blueLine = Railway(
   b594e:	4829      	ldr	r0, [pc, #164]	; (b59f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbd8>)
   b5950:	f7ff f8b6 	bl	b4ac0 <_ZN7RailwayD1Ev>
Railway redLine = Railway(
   b5954:	4828      	ldr	r0, [pc, #160]	; (b59f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbdc>)
   b5956:	f7ff f8b3 	bl	b4ac0 <_ZN7RailwayD1Ev>
   b595a:	e7dd      	b.n	b5918 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xafc>
JsonParserStatic<10000, 1000> parser;
   b595c:	4827      	ldr	r0, [pc, #156]	; (b59fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbe0>)
   b595e:	f7fe fbab 	bl	b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b5962:	4b1c      	ldr	r3, [pc, #112]	; (b59d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbb8>)
   b5964:	4a26      	ldr	r2, [pc, #152]	; (b5a00 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbe4>)
	if (_M_pi != nullptr)
   b5966:	699c      	ldr	r4, [r3, #24]
   b5968:	601a      	str	r2, [r3, #0]
   b596a:	b17c      	cbz	r4, b598c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb70>
      if (--_M_use_count == 0)
   b596c:	6863      	ldr	r3, [r4, #4]
   b596e:	3b01      	subs	r3, #1
   b5970:	6063      	str	r3, [r4, #4]
   b5972:	b95b      	cbnz	r3, b598c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb70>
          _M_dispose();
   b5974:	6823      	ldr	r3, [r4, #0]
   b5976:	4620      	mov	r0, r4
   b5978:	689b      	ldr	r3, [r3, #8]
   b597a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b597c:	68a3      	ldr	r3, [r4, #8]
   b597e:	3b01      	subs	r3, #1
   b5980:	60a3      	str	r3, [r4, #8]
   b5982:	b91b      	cbnz	r3, b598c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb70>
            _M_destroy();
   b5984:	6823      	ldr	r3, [r4, #0]
   b5986:	4620      	mov	r0, r4
   b5988:	68db      	ldr	r3, [r3, #12]
   b598a:	4798      	blx	r3
   b598c:	4810      	ldr	r0, [pc, #64]	; (b59d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbb4>)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b598e:	4c1d      	ldr	r4, [pc, #116]	; (b5a04 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbe8>)
   b5990:	f003 fb74 	bl	b907c <_ZN6StringD1Ev>
} http_request_t;
   b5994:	480d      	ldr	r0, [pc, #52]	; (b59cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbb0>)
   b5996:	f003 fb71 	bl	b907c <_ZN6StringD1Ev>
   b599a:	480b      	ldr	r0, [pc, #44]	; (b59c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbac>)
   b599c:	f003 fb6e 	bl	b907c <_ZN6StringD1Ev>
   b59a0:	4819      	ldr	r0, [pc, #100]	; (b5a08 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbec>)
   b59a2:	f003 fb6b 	bl	b907c <_ZN6StringD1Ev>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   b59a6:	4819      	ldr	r0, [pc, #100]	; (b5a0c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbf0>)
   b59a8:	f002 fb77 	bl	b809a <_ZN8particle17BleCharacteristicD1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   b59ac:	4818      	ldr	r0, [pc, #96]	; (b5a10 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbf4>)
   b59ae:	f002 fb74 	bl	b809a <_ZN8particle17BleCharacteristicD1Ev>
   b59b2:	e9d4 5600 	ldrd	r5, r6, [r4]
	  for (; __first != __last; ++__first)
   b59b6:	42ae      	cmp	r6, r5
   b59b8:	d0b4      	beq.n	b5924 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb08>
      __pointer->~_Tp();
   b59ba:	4628      	mov	r0, r5
   b59bc:	f7ff f880 	bl	b4ac0 <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b59c0:	3564      	adds	r5, #100	; 0x64
   b59c2:	e7f8      	b.n	b59b6 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb9a>
   b59c4:	000bd32a 	.word	0x000bd32a
   b59c8:	2003e650 	.word	0x2003e650
   b59cc:	2003e664 	.word	0x2003e664
   b59d0:	2003e678 	.word	0x2003e678
   b59d4:	200356b4 	.word	0x200356b4
   b59d8:	2003a670 	.word	0x2003a670
   b59dc:	000bd230 	.word	0x000bd230
   b59e0:	2003e4f0 	.word	0x2003e4f0
   b59e4:	2003e554 	.word	0x2003e554
   b59e8:	20037ed0 	.word	0x20037ed0
   b59ec:	20035650 	.word	0x20035650
   b59f0:	200355ec 	.word	0x200355ec
   b59f4:	20035588 	.word	0x20035588
   b59f8:	2003e5c4 	.word	0x2003e5c4
   b59fc:	20037f34 	.word	0x20037f34
   b5a00:	000bd634 	.word	0x000bd634
   b5a04:	2003e5b8 	.word	0x2003e5b8
   b5a08:	2003e628 	.word	0x2003e628
   b5a0c:	2003e688 	.word	0x2003e688
   b5a10:	2003e6a8 	.word	0x2003e6a8

000b5a14 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b5a14:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b5a16:	b510      	push	{r4, lr}
   b5a18:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b5a1a:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b5a1e:	d005      	beq.n	b5a2c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b5a20:	4601      	mov	r1, r0
   b5a22:	4622      	mov	r2, r4
   b5a24:	4618      	mov	r0, r3
   b5a26:	f005 f9e8 	bl	badfa <memmove>
   b5a2a:	4603      	mov	r3, r0
	}
   b5a2c:	1918      	adds	r0, r3, r4
   b5a2e:	bd10      	pop	{r4, pc}

000b5a30 <_ZN7RailwayC1ERKS_>:
class Railway{
   b5a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5a34:	460d      	mov	r5, r1
   b5a36:	4604      	mov	r4, r0
   b5a38:	f7fe fffe 	bl	b4a38 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5a3c:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5a40:	2600      	movs	r6, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5a42:	1ac9      	subs	r1, r1, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5a44:	e9c4 6603 	strd	r6, r6, [r4, #12]
   b5a48:	6166      	str	r6, [r4, #20]
      { _M_create_storage(__n); }
   b5a4a:	1089      	asrs	r1, r1, #2
   b5a4c:	f104 000c 	add.w	r0, r4, #12
   b5a50:	f7ff f816 	bl	b4a80 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
			      _Category>::__copy_m(__first, __last, __result);
   b5a54:	68e2      	ldr	r2, [r4, #12]
   b5a56:	e9d5 0103 	ldrd	r0, r1, [r5, #12]
   b5a5a:	f7ff ffdb 	bl	b5a14 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b5a5e:	f105 0118 	add.w	r1, r5, #24
	this->_M_impl._M_finish =
   b5a62:	6120      	str	r0, [r4, #16]
   b5a64:	f104 0018 	add.w	r0, r4, #24
   b5a68:	f7ff f858 	bl	b4b1c <_ZNSt6vectorIiSaIiEEC1ERKS1_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5a6c:	e9d5 3709 	ldrd	r3, r7, [r5, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5a70:	4824      	ldr	r0, [pc, #144]	; (b5b04 <_ZN7RailwayC1ERKS_+0xd4>)
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5a72:	62e6      	str	r6, [r4, #44]	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5a74:	1aff      	subs	r7, r7, r3
   b5a76:	10bb      	asrs	r3, r7, #2
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5a78:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5a7c:	4358      	muls	r0, r3
   b5a7e:	f7fe fb43 	bl	b4108 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b5a82:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5a86:	4407      	add	r7, r0
   b5a88:	62e7      	str	r7, [r4, #44]	; 0x2c
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b5a8a:	e9d5 7809 	ldrd	r7, r8, [r5, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5a8e:	4606      	mov	r6, r0
   b5a90:	45b8      	cmp	r8, r7
   b5a92:	d007      	beq.n	b5aa4 <_ZN7RailwayC1ERKS_+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b5a94:	b11e      	cbz	r6, b5a9e <_ZN7RailwayC1ERKS_+0x6e>
   b5a96:	4639      	mov	r1, r7
   b5a98:	4630      	mov	r0, r6
   b5a9a:	f7ff f83f 	bl	b4b1c <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b5a9e:	360c      	adds	r6, #12
   b5aa0:	370c      	adds	r7, #12
   b5aa2:	e7f5      	b.n	b5a90 <_ZN7RailwayC1ERKS_+0x60>
	this->_M_impl._M_finish =
   b5aa4:	62a6      	str	r6, [r4, #40]	; 0x28
   b5aa6:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b5aaa:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b5aae:	f7fe fb91 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5ab2:	e9d5 3712 	ldrd	r3, r7, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5ab6:	4813      	ldr	r0, [pc, #76]	; (b5b04 <_ZN7RailwayC1ERKS_+0xd4>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5ab8:	1aff      	subs	r7, r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5aba:	2300      	movs	r3, #0
   b5abc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   b5ac0:	6523      	str	r3, [r4, #80]	; 0x50
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5ac2:	10fb      	asrs	r3, r7, #3
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5ac4:	4358      	muls	r0, r3
   b5ac6:	f7fe fb59 	bl	b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b5aca:	e9c4 0012 	strd	r0, r0, [r4, #72]	; 0x48
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5ace:	4407      	add	r7, r0
   b5ad0:	6527      	str	r7, [r4, #80]	; 0x50
   b5ad2:	e9d5 7812 	ldrd	r7, r8, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5ad6:	4606      	mov	r6, r0
   b5ad8:	45b8      	cmp	r8, r7
   b5ada:	d007      	beq.n	b5aec <_ZN7RailwayC1ERKS_+0xbc>
   b5adc:	b11e      	cbz	r6, b5ae6 <_ZN7RailwayC1ERKS_+0xb6>
   b5ade:	4639      	mov	r1, r7
   b5ae0:	4630      	mov	r0, r6
   b5ae2:	f7fe fb77 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b5ae6:	3618      	adds	r6, #24
   b5ae8:	3718      	adds	r7, #24
   b5aea:	e7f5      	b.n	b5ad8 <_ZN7RailwayC1ERKS_+0xa8>
	this->_M_impl._M_finish =
   b5aec:	64e6      	str	r6, [r4, #76]	; 0x4c
   b5aee:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b5af0:	6563      	str	r3, [r4, #84]	; 0x54
   b5af2:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b5af4:	65a3      	str	r3, [r4, #88]	; 0x58
   b5af6:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b5af8:	65e3      	str	r3, [r4, #92]	; 0x5c
   b5afa:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b5afc:	6623      	str	r3, [r4, #96]	; 0x60
   b5afe:	4620      	mov	r0, r4
   b5b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5b04:	aaaaaaab 	.word	0xaaaaaaab

000b5b08 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b5b08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5b0c:	eba1 0800 	sub.w	r8, r1, r0
   b5b10:	4969      	ldr	r1, [pc, #420]	; (b5cb8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1b0>)
   b5b12:	f8df a1ac 	ldr.w	sl, [pc, #428]	; b5cc0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1b8>
   b5b16:	ea4f 08a8 	mov.w	r8, r8, asr #2
	__copy_m(_II __first, _II __last, _OI __result)
   b5b1a:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5b1c:	fb01 f808 	mul.w	r8, r1, r8
   b5b20:	4614      	mov	r4, r2
   b5b22:	f1b8 0f00 	cmp.w	r8, #0
   b5b26:	f340 80c2 	ble.w	b5cae <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1a6>
   b5b2a:	4629      	mov	r1, r5
   b5b2c:	4620      	mov	r0, r4
   b5b2e:	f7fe fc43 	bl	b43b8 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
      if (&__x != this)
   b5b32:	42a5      	cmp	r5, r4
   b5b34:	d025      	beq.n	b5b82 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x7a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5b36:	e9d5 9103 	ldrd	r9, r1, [r5, #12]
			 - this->_M_impl._M_start); }
   b5b3a:	68e2      	ldr	r2, [r4, #12]
   b5b3c:	6963      	ldr	r3, [r4, #20]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5b3e:	eba1 0609 	sub.w	r6, r1, r9
			 - this->_M_impl._M_start); }
   b5b42:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b5b44:	429e      	cmp	r6, r3
   b5b46:	d943      	bls.n	b5bd0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xc8>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5b48:	2e00      	cmp	r6, #0
   b5b4a:	d03f      	beq.n	b5bcc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xc4>
	if (__n > this->_M_max_size())
   b5b4c:	4b5b      	ldr	r3, [pc, #364]	; (b5cbc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1b4>)
   b5b4e:	429e      	cmp	r6, r3
   b5b50:	d901      	bls.n	b5b56 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x4e>
	  std::__throw_bad_alloc();
   b5b52:	f004 f93b 	bl	b9dcc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5b56:	4630      	mov	r0, r6
   b5b58:	9101      	str	r1, [sp, #4]
   b5b5a:	f7fe fa9c 	bl	b4096 <_Znwj>
   b5b5e:	9901      	ldr	r1, [sp, #4]
   b5b60:	4607      	mov	r7, r0
			      _Category>::__copy_m(__first, __last, __result);
   b5b62:	463a      	mov	r2, r7
   b5b64:	4648      	mov	r0, r9
   b5b66:	f7ff ff55 	bl	b5a14 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b5b6a:	68e0      	ldr	r0, [r4, #12]
	if (__p)
   b5b6c:	b118      	cbz	r0, b5b76 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x6e>
			    - this->_M_impl._M_start);
   b5b6e:	6961      	ldr	r1, [r4, #20]
	::operator delete(__p
   b5b70:	1a09      	subs	r1, r1, r0
   b5b72:	f7fe fa96 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b5b76:	60e7      	str	r7, [r4, #12]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b5b78:	4437      	add	r7, r6
   b5b7a:	6167      	str	r7, [r4, #20]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b5b7c:	68e3      	ldr	r3, [r4, #12]
   b5b7e:	4433      	add	r3, r6
   b5b80:	6123      	str	r3, [r4, #16]
   b5b82:	f105 0118 	add.w	r1, r5, #24
   b5b86:	f104 0018 	add.w	r0, r4, #24
   b5b8a:	f7ff f80b 	bl	b4ba4 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
      if (&__x != this)
   b5b8e:	42a5      	cmp	r5, r4
   b5b90:	d042      	beq.n	b5c18 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x110>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5b92:	e9d5 6b09 	ldrd	r6, fp, [r5, #36]	; 0x24
			 - this->_M_impl._M_start); }
   b5b96:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b5b98:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5b9a:	ebab 0906 	sub.w	r9, fp, r6
			 - this->_M_impl._M_start); }
   b5b9e:	1a89      	subs	r1, r1, r2
	  if (__xlen > capacity())
   b5ba0:	4549      	cmp	r1, r9
   b5ba2:	d252      	bcs.n	b5c4a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x142>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5ba4:	ea4f 00a9 	mov.w	r0, r9, asr #2
	  pointer __result = this->_M_allocate(__n);
   b5ba8:	fb0a f000 	mul.w	r0, sl, r0
   b5bac:	f7fe faac 	bl	b4108 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
   b5bb0:	4607      	mov	r7, r0
	  _ForwardIterator __cur = __result;
   b5bb2:	4602      	mov	r2, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b5bb4:	45b3      	cmp	fp, r6
   b5bb6:	d01f      	beq.n	b5bf8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xf0>
   b5bb8:	b12a      	cbz	r2, b5bc6 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xbe>
   b5bba:	4610      	mov	r0, r2
   b5bbc:	4631      	mov	r1, r6
   b5bbe:	9201      	str	r2, [sp, #4]
   b5bc0:	f7fe ffac 	bl	b4b1c <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b5bc4:	9a01      	ldr	r2, [sp, #4]
   b5bc6:	320c      	adds	r2, #12
   b5bc8:	360c      	adds	r6, #12
   b5bca:	e7f3      	b.n	b5bb4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xac>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5bcc:	4637      	mov	r7, r6
   b5bce:	e7c8      	b.n	b5b62 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x5a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5bd0:	6923      	ldr	r3, [r4, #16]
   b5bd2:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b5bd4:	429e      	cmp	r6, r3
   b5bd6:	d803      	bhi.n	b5be0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xd8>
   b5bd8:	4648      	mov	r0, r9
   b5bda:	f7ff ff1b 	bl	b5a14 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
    { return std::uninitialized_copy(__first, __last, __result); }
   b5bde:	e7cd      	b.n	b5b7c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x74>
   b5be0:	eb09 0103 	add.w	r1, r9, r3
   b5be4:	4648      	mov	r0, r9
   b5be6:	f7ff ff15 	bl	b5a14 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b5bea:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
   b5bee:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
   b5bf2:	1a10      	subs	r0, r2, r0
   b5bf4:	4418      	add	r0, r3
   b5bf6:	e7f0      	b.n	b5bda <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xd2>
	__destroy(__first, __last);
   b5bf8:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b5bfc:	f7fe ff55 	bl	b4aaa <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	      _M_deallocate(this->_M_impl._M_start,
   b5c00:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b5c02:	b118      	cbz	r0, b5c0c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x104>
			    - this->_M_impl._M_start);
   b5c04:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b5c06:	1a09      	subs	r1, r1, r0
   b5c08:	f7fe fa4b 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b5c0c:	6267      	str	r7, [r4, #36]	; 0x24
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b5c0e:	444f      	add	r7, r9
   b5c10:	62e7      	str	r7, [r4, #44]	; 0x2c
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b5c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b5c14:	444b      	add	r3, r9
   b5c16:	62a3      	str	r3, [r4, #40]	; 0x28
	this->_M_assign(__str);
   b5c18:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b5c1c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b5c20:	f004 f930 	bl	b9e84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
   b5c24:	f105 0148 	add.w	r1, r5, #72	; 0x48
   b5c28:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b5c2c:	f7fe fc16 	bl	b445c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
   b5c30:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b5c32:	6563      	str	r3, [r4, #84]	; 0x54
   b5c34:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b5c36:	65a3      	str	r3, [r4, #88]	; 0x58
   b5c38:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b5c3a:	65e3      	str	r3, [r4, #92]	; 0x5c
   b5c3c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b5c3e:	6623      	str	r3, [r4, #96]	; 0x60
	      ++__first;
   b5c40:	3564      	adds	r5, #100	; 0x64
	      ++__result;
   b5c42:	3464      	adds	r4, #100	; 0x64
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5c44:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b5c48:	e76b      	b.n	b5b22 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5c4a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   b5c4c:	1abf      	subs	r7, r7, r2
	  else if (size() >= __xlen)
   b5c4e:	45b9      	cmp	r9, r7
   b5c50:	d80c      	bhi.n	b5c6c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x164>
			      _Category>::__copy_m(__first, __last, __result);
   b5c52:	4630      	mov	r0, r6
   b5c54:	4659      	mov	r1, fp
   b5c56:	f7fe ffdd 	bl	b4c14 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      : _M_current(__i) { }
   b5c5a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b5c5c:	4606      	mov	r6, r0
	  for (; __first != __last; ++__first)
   b5c5e:	42b7      	cmp	r7, r6
   b5c60:	d0d7      	beq.n	b5c12 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x10a>
      }
   b5c62:	4630      	mov	r0, r6
   b5c64:	f7fe fe40 	bl	b48e8 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   b5c68:	360c      	adds	r6, #12
	return *this;
   b5c6a:	e7f8      	b.n	b5c5e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x156>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5c6c:	10bf      	asrs	r7, r7, #2
   b5c6e:	fb0a f707 	mul.w	r7, sl, r7
   b5c72:	2f00      	cmp	r7, #0
   b5c74:	dd09      	ble.n	b5c8a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x182>
	      *__result = *__first;
   b5c76:	4631      	mov	r1, r6
   b5c78:	4610      	mov	r0, r2
   b5c7a:	9201      	str	r2, [sp, #4]
   b5c7c:	f7fe ff92 	bl	b4ba4 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	      ++__result;
   b5c80:	9a01      	ldr	r2, [sp, #4]
	      ++__first;
   b5c82:	360c      	adds	r6, #12
	      ++__result;
   b5c84:	320c      	adds	r2, #12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5c86:	3f01      	subs	r7, #1
   b5c88:	e7f3      	b.n	b5c72 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x16a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5c8a:	e9d4 6709 	ldrd	r6, r7, [r4, #36]	; 0x24
   b5c8e:	1bb9      	subs	r1, r7, r6
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b5c90:	6a6e      	ldr	r6, [r5, #36]	; 0x24
					  __x._M_impl._M_finish,
   b5c92:	6aab      	ldr	r3, [r5, #40]	; 0x28
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b5c94:	440e      	add	r6, r1
	      for (; __first != __last; ++__first, (void)++__cur)
   b5c96:	42b3      	cmp	r3, r6
   b5c98:	d0bb      	beq.n	b5c12 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x10a>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b5c9a:	b12f      	cbz	r7, b5ca8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1a0>
   b5c9c:	4631      	mov	r1, r6
   b5c9e:	4638      	mov	r0, r7
   b5ca0:	9301      	str	r3, [sp, #4]
   b5ca2:	f7fe ff3b 	bl	b4b1c <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b5ca6:	9b01      	ldr	r3, [sp, #4]
   b5ca8:	360c      	adds	r6, #12
   b5caa:	370c      	adds	r7, #12
   b5cac:	e7f3      	b.n	b5c96 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x18e>
	}
   b5cae:	4620      	mov	r0, r4
   b5cb0:	b003      	add	sp, #12
   b5cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5cb6:	bf00      	nop
   b5cb8:	c28f5c29 	.word	0xc28f5c29
   b5cbc:	7ffffffc 	.word	0x7ffffffc
   b5cc0:	aaaaaaab 	.word	0xaaaaaaab

000b5cc4 <setup>:
void setup() {
   b5cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5cc6:	b0bf      	sub	sp, #252	; 0xfc
  Serial.begin(9600);
   b5cc8:	f003 fecc 	bl	b9a64 <_Z16_fetch_usbserialv>
   b5ccc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5cd0:	f003 febc 	bl	b9a4c <_ZN9USBSerial5beginEl>
  delay(2000);
   b5cd4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5cd8:	f001 fd82 	bl	b77e0 <delay>
  BLE.on();
   b5cdc:	f002 f8ec 	bl	b7eb8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5ce0:	f002 f934 	bl	b7f4c <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   b5ce4:	f002 f8e8 	bl	b7eb8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5ce8:	4a61      	ldr	r2, [pc, #388]	; (b5e70 <setup+0x1ac>)
   b5cea:	4c62      	ldr	r4, [pc, #392]	; (b5e74 <setup+0x1b0>)
   b5cec:	4601      	mov	r1, r0
   b5cee:	a80c      	add	r0, sp, #48	; 0x30
   b5cf0:	f002 fe16 	bl	b8920 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5cf4:	a80c      	add	r0, sp, #48	; 0x30
   b5cf6:	f002 f9d0 	bl	b809a <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   b5cfa:	f002 f8dd 	bl	b7eb8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5cfe:	4a5e      	ldr	r2, [pc, #376]	; (b5e78 <setup+0x1b4>)
   b5d00:	4601      	mov	r1, r0
   b5d02:	a80c      	add	r0, sp, #48	; 0x30
   b5d04:	f002 fe0c 	bl	b8920 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5d08:	a80c      	add	r0, sp, #48	; 0x30
   b5d0a:	f002 f9c6 	bl	b809a <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData data;
   b5d0e:	a804      	add	r0, sp, #16
   b5d10:	f002 faf9 	bl	b8306 <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   b5d14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5d16:	ad07      	add	r5, sp, #28
   b5d18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
        BleUuid tempUUID(uuid);
   b5d1a:	ad07      	add	r5, sp, #28
   b5d1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5d1e:	6826      	ldr	r6, [r4, #0]
   b5d20:	ac0c      	add	r4, sp, #48	; 0x30
   b5d22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5d24:	a80c      	add	r0, sp, #48	; 0x30
        BleUuid tempUUID(uuid);
   b5d26:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5d28:	f001 fec8 	bl	b7abc <_ZNK8particle7BleUuid4typeEv>
   b5d2c:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b5d2e:	a80c      	add	r0, sp, #48	; 0x30
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5d30:	2c00      	cmp	r4, #0
   b5d32:	d152      	bne.n	b5dda <setup+0x116>
            uint16_t uuid16 = tempUUID.shorted();
   b5d34:	f001 fede 	bl	b7af4 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b5d38:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b5d3a:	f8ad 000e 	strh.w	r0, [sp, #14]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b5d3e:	2302      	movs	r3, #2
   b5d40:	f10d 020e 	add.w	r2, sp, #14
   b5d44:	2103      	movs	r1, #3
   b5d46:	a804      	add	r0, sp, #16
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b5d48:	f002 fad2 	bl	b82f0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   b5d4c:	f002 f8b4 	bl	b7eb8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5d50:	2200      	movs	r2, #0
   b5d52:	a904      	add	r1, sp, #16
   b5d54:	f002 f944 	bl	b7fe0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  request.hostname = "lapi.transitchicago.com";
   b5d58:	4c48      	ldr	r4, [pc, #288]	; (b5e7c <setup+0x1b8>)
  acquireWireBuffer();
   b5d5a:	a80c      	add	r0, sp, #48	; 0x30
   b5d5c:	f7fe fd9a 	bl	b4894 <_Z17acquireWireBufferv>
  Wire.begin();
   b5d60:	f003 ffce 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b5d64:	f002 ff68 	bl	b8c38 <_ZN7TwoWire5beginEv>
  request.hostname = "lapi.transitchicago.com";
   b5d68:	4945      	ldr	r1, [pc, #276]	; (b5e80 <setup+0x1bc>)
   b5d6a:	4620      	mov	r0, r4
   b5d6c:	f003 f9ff 	bl	b916e <_ZN6StringaSEPKc>

    //loopIndex must point to either the first or last checkpoint, tripleIndex cannot be 0
    void setLoopIndex(int triple, int loop){
        tripleIndex = triple;
   b5d70:	4844      	ldr	r0, [pc, #272]	; (b5e84 <setup+0x1c0>)
   b5d72:	4945      	ldr	r1, [pc, #276]	; (b5e88 <setup+0x1c4>)
  request.port = 80;
   b5d74:	2350      	movs	r3, #80	; 0x50
        loopIndex = loop;
   b5d76:	2203      	movs	r2, #3
   b5d78:	63a3      	str	r3, [r4, #56]	; 0x38
   b5d7a:	2307      	movs	r3, #7
   b5d7c:	e9c0 2315 	strd	r2, r3, [r0, #84]	; 0x54
        tripleIndex = triple;
   b5d80:	4842      	ldr	r0, [pc, #264]	; (b5e8c <setup+0x1c8>)
        loopIndex = loop;
   b5d82:	2400      	movs	r4, #0
   b5d84:	2504      	movs	r5, #4
   b5d86:	e9c1 5415 	strd	r5, r4, [r1, #84]	; 0x54
   b5d8a:	e9c0 5415 	strd	r5, r4, [r0, #84]	; 0x54
        tripleIndex = triple;
   b5d8e:	4c40      	ldr	r4, [pc, #256]	; (b5e90 <setup+0x1cc>)
  railways = {brownLine, pinkLine};
   b5d90:	a80c      	add	r0, sp, #48	; 0x30
        loopIndex = loop;
   b5d92:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
   b5d96:	f7ff fe4b 	bl	b5a30 <_ZN7RailwayC1ERKS_>
   b5d9a:	4621      	mov	r1, r4
			 - this->_M_impl._M_start); }
   b5d9c:	4c3d      	ldr	r4, [pc, #244]	; (b5e94 <setup+0x1d0>)
   b5d9e:	a825      	add	r0, sp, #148	; 0x94
   b5da0:	f7ff fe46 	bl	b5a30 <_ZN7RailwayC1ERKS_>
   b5da4:	6822      	ldr	r2, [r4, #0]
   b5da6:	68a3      	ldr	r3, [r4, #8]
   b5da8:	1a9b      	subs	r3, r3, r2
	if (__len > capacity())
   b5daa:	2bc7      	cmp	r3, #199	; 0xc7
   b5dac:	d836      	bhi.n	b5e1c <setup+0x158>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5dae:	20c8      	movs	r0, #200	; 0xc8
   b5db0:	f7fe f971 	bl	b4096 <_Znwj>
   b5db4:	4605      	mov	r5, r0
   b5db6:	b110      	cbz	r0, b5dbe <setup+0xfa>
   b5db8:	a90c      	add	r1, sp, #48	; 0x30
   b5dba:	f7ff fe39 	bl	b5a30 <_ZN7RailwayC1ERKS_>
   b5dbe:	a925      	add	r1, sp, #148	; 0x94
   b5dc0:	f105 0064 	add.w	r0, r5, #100	; 0x64
   b5dc4:	f7ff fe34 	bl	b5a30 <_ZN7RailwayC1ERKS_>
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b5dc8:	e9d4 6700 	ldrd	r6, r7, [r4]
	  for (; __first != __last; ++__first)
   b5dcc:	42b7      	cmp	r7, r6
   b5dce:	d00e      	beq.n	b5dee <setup+0x12a>
      __pointer->~_Tp();
   b5dd0:	4630      	mov	r0, r6
   b5dd2:	f7fe fe75 	bl	b4ac0 <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b5dd6:	3664      	adds	r6, #100	; 0x64
   b5dd8:	e7f8      	b.n	b5dcc <setup+0x108>
   b5dda:	f001 fe8d 	bl	b7af8 <_ZNK8particle7BleUuid8rawBytesEv>
   b5dde:	2300      	movs	r3, #0
   b5de0:	9300      	str	r3, [sp, #0]
   b5de2:	2310      	movs	r3, #16
   b5de4:	4602      	mov	r2, r0
   b5de6:	2107      	movs	r1, #7
   b5de8:	eb0d 0003 	add.w	r0, sp, r3
   b5dec:	e7ac      	b.n	b5d48 <setup+0x84>
	    _M_deallocate(this->_M_impl._M_start,
   b5dee:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b5df0:	b118      	cbz	r0, b5dfa <setup+0x136>
			  - this->_M_impl._M_start);
   b5df2:	68a1      	ldr	r1, [r4, #8]
	::operator delete(__p
   b5df4:	1a09      	subs	r1, r1, r0
   b5df6:	f7fe f954 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
   b5dfa:	6025      	str	r5, [r4, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b5dfc:	35c8      	adds	r5, #200	; 0xc8
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b5dfe:	e9c4 5501 	strd	r5, r5, [r4, #4]
   b5e02:	a825      	add	r0, sp, #148	; 0x94
   b5e04:	f7fe fe5c 	bl	b4ac0 <_ZN7RailwayD1Ev>
   b5e08:	a80c      	add	r0, sp, #48	; 0x30
   b5e0a:	f7fe fe59 	bl	b4ac0 <_ZN7RailwayD1Ev>
  randomizeAddress();
   b5e0e:	f7fe fbc1 	bl	b4594 <_Z16randomizeAddressv>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b5e12:	9804      	ldr	r0, [sp, #16]
   b5e14:	f001 fc9c 	bl	b7750 <free>
}
   b5e18:	b03f      	add	sp, #252	; 0xfc
   b5e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5e1c:	6865      	ldr	r5, [r4, #4]
   b5e1e:	1aad      	subs	r5, r5, r2
	else if (size() >= __len)
   b5e20:	2dc7      	cmp	r5, #199	; 0xc7
   b5e22:	d910      	bls.n	b5e46 <setup+0x182>
			      _Category>::__copy_m(__first, __last, __result);
   b5e24:	a93e      	add	r1, sp, #248	; 0xf8
   b5e26:	a80c      	add	r0, sp, #48	; 0x30
   b5e28:	f7ff fe6e 	bl	b5b08 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b5e2c:	6867      	ldr	r7, [r4, #4]
   b5e2e:	42b8      	cmp	r0, r7
   b5e30:	4605      	mov	r5, r0
   b5e32:	d0e6      	beq.n	b5e02 <setup+0x13e>
   b5e34:	4606      	mov	r6, r0
      __pointer->~_Tp();
   b5e36:	4630      	mov	r0, r6
	  for (; __first != __last; ++__first)
   b5e38:	3664      	adds	r6, #100	; 0x64
      __pointer->~_Tp();
   b5e3a:	f7fe fe41 	bl	b4ac0 <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b5e3e:	42b7      	cmp	r7, r6
   b5e40:	d1f9      	bne.n	b5e36 <setup+0x172>
	    this->_M_impl._M_finish = __pos;
   b5e42:	6065      	str	r5, [r4, #4]
   b5e44:	e7dd      	b.n	b5e02 <setup+0x13e>
   b5e46:	ab0c      	add	r3, sp, #48	; 0x30
   b5e48:	441d      	add	r5, r3
   b5e4a:	4629      	mov	r1, r5
   b5e4c:	4618      	mov	r0, r3
   b5e4e:	f7ff fe5b 	bl	b5b08 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5e52:	6866      	ldr	r6, [r4, #4]
   b5e54:	ab3e      	add	r3, sp, #248	; 0xf8
   b5e56:	429d      	cmp	r5, r3
   b5e58:	d007      	beq.n	b5e6a <setup+0x1a6>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b5e5a:	b11e      	cbz	r6, b5e64 <setup+0x1a0>
   b5e5c:	4629      	mov	r1, r5
   b5e5e:	4630      	mov	r0, r6
   b5e60:	f7ff fde6 	bl	b5a30 <_ZN7RailwayC1ERKS_>
   b5e64:	3564      	adds	r5, #100	; 0x64
   b5e66:	3664      	adds	r6, #100	; 0x64
   b5e68:	e7f4      	b.n	b5e54 <setup+0x190>
	    this->_M_impl._M_finish =
   b5e6a:	6066      	str	r6, [r4, #4]
   b5e6c:	e7c9      	b.n	b5e02 <setup+0x13e>
   b5e6e:	bf00      	nop
   b5e70:	2003e6a8 	.word	0x2003e6a8
   b5e74:	2003553c 	.word	0x2003553c
   b5e78:	2003e688 	.word	0x2003e688
   b5e7c:	2003e628 	.word	0x2003e628
   b5e80:	000bd0e3 	.word	0x000bd0e3
   b5e84:	20037ed0 	.word	0x20037ed0
   b5e88:	200355ec 	.word	0x200355ec
   b5e8c:	2003e554 	.word	0x2003e554
   b5e90:	2003e4f0 	.word	0x2003e4f0
   b5e94:	2003e5b8 	.word	0x2003e5b8

000b5e98 <_GLOBAL__sub_I_redLine>:
   b5e98:	2001      	movs	r0, #1
   b5e9a:	f7fe bfbf 	b.w	b4e1c <_Z41__static_initialization_and_destruction_0ii.constprop.0>
	...

000b5ea0 <loop>:
void loop(){
   b5ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5ea4:	ed2d 8b04 	vpush	{d8-d9}
   b5ea8:	b0bb      	sub	sp, #236	; 0xec
  Serial.println("loop start");
   b5eaa:	f003 fddb 	bl	b9a64 <_Z16_fetch_usbserialv>
   b5eae:	4935      	ldr	r1, [pc, #212]	; (b5f84 <loop+0xe4>)
  for(int i : sequenceArr){
   b5eb0:	4e35      	ldr	r6, [pc, #212]	; (b5f88 <loop+0xe8>)
    Serial.printf("%i, ", i);
   b5eb2:	4f36      	ldr	r7, [pc, #216]	; (b5f8c <loop+0xec>)
  Serial.println("loop start");
   b5eb4:	f003 f883 	bl	b8fbe <_ZN5Print7printlnEPKc>
   b5eb8:	2505      	movs	r5, #5
  for(int i : sequenceArr){
   b5eba:	f856 2b04 	ldr.w	r2, [r6], #4
   b5ebe:	9203      	str	r2, [sp, #12]
    Serial.printf("%i, ", i);
   b5ec0:	f003 fdd0 	bl	b9a64 <_Z16_fetch_usbserialv>
   b5ec4:	9a03      	ldr	r2, [sp, #12]
   b5ec6:	4639      	mov	r1, r7
   b5ec8:	f7fe fb48 	bl	b455c <_ZN5Print6printfEPKcz>
  for(int i : sequenceArr){
   b5ecc:	3d01      	subs	r5, #1
   b5ece:	d1f4      	bne.n	b5eba <loop+0x1a>
   b5ed0:	4b2d      	ldr	r3, [pc, #180]	; (b5f88 <loop+0xe8>)
   b5ed2:	9305      	str	r3, [sp, #20]
    for(int j = 0; j < railways.size(); j++){
   b5ed4:	9503      	str	r5, [sp, #12]
   b5ed6:	4e2e      	ldr	r6, [pc, #184]	; (b5f90 <loop+0xf0>)
   b5ed8:	e9d6 2300 	ldrd	r2, r3, [r6]
   b5edc:	1a9b      	subs	r3, r3, r2
   b5ede:	4a2d      	ldr	r2, [pc, #180]	; (b5f94 <loop+0xf4>)
   b5ee0:	109b      	asrs	r3, r3, #2
   b5ee2:	4353      	muls	r3, r2
   b5ee4:	9a03      	ldr	r2, [sp, #12]
   b5ee6:	4293      	cmp	r3, r2
   b5ee8:	f240 83e7 	bls.w	b66ba <loop+0x81a>
      delay(1500);
   b5eec:	f240 50dc 	movw	r0, #1500	; 0x5dc
   b5ef0:	f001 fc76 	bl	b77e0 <delay>
	StringSumHelper(const char *p) : String(p) {}
   b5ef4:	4928      	ldr	r1, [pc, #160]	; (b5f98 <loop+0xf8>)
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   b5ef6:	4d29      	ldr	r5, [pc, #164]	; (b5f9c <loop+0xfc>)
   b5ef8:	a821      	add	r0, sp, #132	; 0x84
   b5efa:	f003 f90a 	bl	b9112 <_ZN6StringC1EPK19__FlashStringHelper>
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
   b5efe:	9b03      	ldr	r3, [sp, #12]
   b5f00:	2764      	movs	r7, #100	; 0x64
   b5f02:	435f      	muls	r7, r3
      { return _M_dataplus._M_p; }
   b5f04:	6833      	ldr	r3, [r6, #0]
   b5f06:	443b      	add	r3, r7
      request.path = "/api/1.0/ttpositions.aspx?key=00ff09063caa46748434d5fa321d048f&rt=" + String(railways[j].name.c_str()) + "&outputType=JSON";
   b5f08:	a81d      	add	r0, sp, #116	; 0x74
   b5f0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b5f0c:	f003 f901 	bl	b9112 <_ZN6StringC1EPK19__FlashStringHelper>
   b5f10:	a91d      	add	r1, sp, #116	; 0x74
   b5f12:	a821      	add	r0, sp, #132	; 0x84
   b5f14:	f003 f978 	bl	b9208 <_ZplRK15StringSumHelperRK6String>
   b5f18:	4921      	ldr	r1, [pc, #132]	; (b5fa0 <loop+0x100>)
   b5f1a:	f003 f981 	bl	b9220 <_ZplRK15StringSumHelperPKc>
   b5f1e:	4601      	mov	r1, r0
   b5f20:	4820      	ldr	r0, [pc, #128]	; (b5fa4 <loop+0x104>)
   b5f22:	f003 f90a 	bl	b913a <_ZN6StringaSERKS_>
   b5f26:	a81d      	add	r0, sp, #116	; 0x74
   b5f28:	f003 f8a8 	bl	b907c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b5f2c:	a821      	add	r0, sp, #132	; 0x84
   b5f2e:	f003 f8a5 	bl	b907c <_ZN6StringD1Ev>
   b5f32:	4b1d      	ldr	r3, [pc, #116]	; (b5fa8 <loop+0x108>)
   b5f34:	491d      	ldr	r1, [pc, #116]	; (b5fac <loop+0x10c>)
   b5f36:	481e      	ldr	r0, [pc, #120]	; (b5fb0 <loop+0x110>)
   b5f38:	9300      	str	r3, [sp, #0]
   b5f3a:	462a      	mov	r2, r5
   b5f3c:	4b1d      	ldr	r3, [pc, #116]	; (b5fb4 <loop+0x114>)
   b5f3e:	f000 fc03 	bl	b6748 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
      Serial.println("parsing");
   b5f42:	f003 fd8f 	bl	b9a64 <_Z16_fetch_usbserialv>
   b5f46:	491c      	ldr	r1, [pc, #112]	; (b5fb8 <loop+0x118>)
   b5f48:	f003 f839 	bl	b8fbe <_ZN5Print7printlnEPKc>
      parser.clear();
   b5f4c:	481b      	ldr	r0, [pc, #108]	; (b5fbc <loop+0x11c>)
   b5f4e:	f000 fd93 	bl	b6a78 <_ZN10JsonBuffer5clearEv>
	const char * c_str() const { return buffer; }
   b5f52:	6869      	ldr	r1, [r5, #4]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b5f54:	9104      	str	r1, [sp, #16]
   b5f56:	4608      	mov	r0, r1
   b5f58:	f004 ffb2 	bl	baec0 <strlen>
   b5f5c:	9904      	ldr	r1, [sp, #16]
   b5f5e:	4602      	mov	r2, r0
   b5f60:	4816      	ldr	r0, [pc, #88]	; (b5fbc <loop+0x11c>)
   b5f62:	f000 fd6c 	bl	b6a3e <_ZN10JsonBuffer7addDataEPKcj>
      if(!parser.parse()){
   b5f66:	4815      	ldr	r0, [pc, #84]	; (b5fbc <loop+0x11c>)
   b5f68:	f001 f926 	bl	b71b8 <_ZN10JsonParser5parseEv>
   b5f6c:	4605      	mov	r5, r0
   b5f6e:	bb48      	cbnz	r0, b5fc4 <loop+0x124>
        Serial.println("parsing failed");
   b5f70:	f003 fd78 	bl	b9a64 <_Z16_fetch_usbserialv>
   b5f74:	4912      	ldr	r1, [pc, #72]	; (b5fc0 <loop+0x120>)
}
   b5f76:	b03b      	add	sp, #236	; 0xec
   b5f78:	ecbd 8b04 	vpop	{d8-d9}
   b5f7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("parsing failed");
   b5f80:	f003 b81d 	b.w	b8fbe <_ZN5Print7printlnEPKc>
   b5f84:	000bd0fb 	.word	0x000bd0fb
   b5f88:	2003e690 	.word	0x2003e690
   b5f8c:	000bd106 	.word	0x000bd106
   b5f90:	2003e5b8 	.word	0x2003e5b8
   b5f94:	c28f5c29 	.word	0xc28f5c29
   b5f98:	000bd10b 	.word	0x000bd10b
   b5f9c:	2003e674 	.word	0x2003e674
   b5fa0:	000bd14e 	.word	0x000bd14e
   b5fa4:	2003e650 	.word	0x2003e650
   b5fa8:	000bd15f 	.word	0x000bd15f
   b5fac:	2003e628 	.word	0x2003e628
   b5fb0:	200356b4 	.word	0x200356b4
   b5fb4:	2003534c 	.word	0x2003534c
   b5fb8:	000bd163 	.word	0x000bd163
   b5fbc:	20037f34 	.word	0x20037f34
   b5fc0:	000bd16b 	.word	0x000bd16b
	return *(this->_M_impl._M_start + __n);
   b5fc4:	6831      	ldr	r1, [r6, #0]
      Railway currentRailway = railways[j];
   b5fc6:	a821      	add	r0, sp, #132	; 0x84
   b5fc8:	4439      	add	r1, r7
   b5fca:	f7ff fd31 	bl	b5a30 <_ZN7RailwayC1ERKS_>
      std::vector<Checkpoint> currentCheckpoints = currentRailway.checkpoints;
   b5fce:	a921      	add	r1, sp, #132	; 0x84
   b5fd0:	a808      	add	r0, sp, #32
   b5fd2:	f7fe fd31 	bl	b4a38 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      int count = 0;
   b5fd6:	f04f 0a00 	mov.w	sl, #0
        JsonReference train = parser.getReference().key("ctatt").key("route").index(0).key("train").index(count);
   b5fda:	49bf      	ldr	r1, [pc, #764]	; (b62d8 <loop+0x438>)
   b5fdc:	a80e      	add	r0, sp, #56	; 0x38
   b5fde:	f000 fd65 	bl	b6aac <_ZNK10JsonParser12getReferenceEv>
   b5fe2:	4abe      	ldr	r2, [pc, #760]	; (b62dc <loop+0x43c>)
   b5fe4:	a90e      	add	r1, sp, #56	; 0x38
   b5fe6:	a811      	add	r0, sp, #68	; 0x44
   b5fe8:	f000 fee0 	bl	b6dac <_ZNK13JsonReference3keyEPKc>
   b5fec:	4abc      	ldr	r2, [pc, #752]	; (b62e0 <loop+0x440>)
   b5fee:	a911      	add	r1, sp, #68	; 0x44
   b5ff0:	a815      	add	r0, sp, #84	; 0x54
   b5ff2:	f000 fedb 	bl	b6dac <_ZNK13JsonReference3keyEPKc>
   b5ff6:	2200      	movs	r2, #0
   b5ff8:	a915      	add	r1, sp, #84	; 0x54
   b5ffa:	a819      	add	r0, sp, #100	; 0x64
   b5ffc:	f000 fdc4 	bl	b6b88 <_ZNK13JsonReference5indexEj>
   b6000:	4ab8      	ldr	r2, [pc, #736]	; (b62e4 <loop+0x444>)
   b6002:	a919      	add	r1, sp, #100	; 0x64
   b6004:	a81d      	add	r0, sp, #116	; 0x74
   b6006:	f000 fed1 	bl	b6dac <_ZNK13JsonReference3keyEPKc>
   b600a:	4652      	mov	r2, sl
   b600c:	a91d      	add	r1, sp, #116	; 0x74
   b600e:	a80b      	add	r0, sp, #44	; 0x2c
   b6010:	f000 fdba 	bl	b6b88 <_ZNK13JsonReference5indexEj>
   b6014:	a81d      	add	r0, sp, #116	; 0x74
   b6016:	f000 fcc1 	bl	b699c <_ZN13JsonReferenceD1Ev>
   b601a:	a819      	add	r0, sp, #100	; 0x64
   b601c:	f000 fcbe 	bl	b699c <_ZN13JsonReferenceD1Ev>
   b6020:	a815      	add	r0, sp, #84	; 0x54
   b6022:	f000 fcbb 	bl	b699c <_ZN13JsonReferenceD1Ev>
   b6026:	a811      	add	r0, sp, #68	; 0x44
   b6028:	f000 fcb8 	bl	b699c <_ZN13JsonReferenceD1Ev>
   b602c:	a80e      	add	r0, sp, #56	; 0x38
   b602e:	f000 fcb5 	bl	b699c <_ZN13JsonReferenceD1Ev>
        String nextStation = train.key("nextStaNm").valueString();
   b6032:	4aad      	ldr	r2, [pc, #692]	; (b62e8 <loop+0x448>)
   b6034:	a90b      	add	r1, sp, #44	; 0x2c
   b6036:	a81d      	add	r0, sp, #116	; 0x74
   b6038:	f000 feb8 	bl	b6dac <_ZNK13JsonReference3keyEPKc>
   b603c:	a91d      	add	r1, sp, #116	; 0x74
   b603e:	a811      	add	r0, sp, #68	; 0x44
   b6040:	f000 fece 	bl	b6de0 <_ZNK13JsonReference11valueStringEv>
   b6044:	a81d      	add	r0, sp, #116	; 0x74
   b6046:	f000 fca9 	bl	b699c <_ZN13JsonReferenceD1Ev>
        String destNm = train.key("destNm").valueString();
   b604a:	4aa8      	ldr	r2, [pc, #672]	; (b62ec <loop+0x44c>)
   b604c:	a90b      	add	r1, sp, #44	; 0x2c
   b604e:	a81d      	add	r0, sp, #116	; 0x74
   b6050:	f000 feac 	bl	b6dac <_ZNK13JsonReference3keyEPKc>
   b6054:	a91d      	add	r1, sp, #116	; 0x74
   b6056:	a815      	add	r0, sp, #84	; 0x54
   b6058:	f000 fec2 	bl	b6de0 <_ZNK13JsonReference11valueStringEv>
   b605c:	a81d      	add	r0, sp, #116	; 0x74
   b605e:	f000 fc9d 	bl	b699c <_ZN13JsonReferenceD1Ev>
        int trainDir = train.key("trDr").valueString().toInt();
   b6062:	4aa3      	ldr	r2, [pc, #652]	; (b62f0 <loop+0x450>)
   b6064:	a90b      	add	r1, sp, #44	; 0x2c
   b6066:	a819      	add	r0, sp, #100	; 0x64
   b6068:	f000 fea0 	bl	b6dac <_ZNK13JsonReference3keyEPKc>
   b606c:	a919      	add	r1, sp, #100	; 0x64
   b606e:	a81d      	add	r0, sp, #116	; 0x74
   b6070:	f000 feb6 	bl	b6de0 <_ZNK13JsonReference11valueStringEv>
   b6074:	a81d      	add	r0, sp, #116	; 0x74
   b6076:	f003 f934 	bl	b92e2 <_ZNK6String5toIntEv>
   b607a:	9004      	str	r0, [sp, #16]
   b607c:	a81d      	add	r0, sp, #116	; 0x74
   b607e:	f002 fffd 	bl	b907c <_ZN6StringD1Ev>
   b6082:	a819      	add	r0, sp, #100	; 0x64
   b6084:	f000 fc8a 	bl	b699c <_ZN13JsonReferenceD1Ev>
        float lat = atof(train.key("lat").valueString().c_str());
   b6088:	4a9a      	ldr	r2, [pc, #616]	; (b62f4 <loop+0x454>)
   b608a:	a90b      	add	r1, sp, #44	; 0x2c
   b608c:	a819      	add	r0, sp, #100	; 0x64
   b608e:	f000 fe8d 	bl	b6dac <_ZNK13JsonReference3keyEPKc>
   b6092:	a919      	add	r1, sp, #100	; 0x64
   b6094:	a81d      	add	r0, sp, #116	; 0x74
   b6096:	f000 fea3 	bl	b6de0 <_ZNK13JsonReference11valueStringEv>
   b609a:	981d      	ldr	r0, [sp, #116]	; 0x74
   b609c:	f004 fe84 	bl	bada8 <atof>
   b60a0:	ec51 0b10 	vmov	r0, r1, d0
   b60a4:	f004 fe0c 	bl	bacc0 <__aeabi_d2f>
   b60a8:	ee08 0a90 	vmov	s17, r0
   b60ac:	a81d      	add	r0, sp, #116	; 0x74
   b60ae:	f002 ffe5 	bl	b907c <_ZN6StringD1Ev>
   b60b2:	a819      	add	r0, sp, #100	; 0x64
   b60b4:	f000 fc72 	bl	b699c <_ZN13JsonReferenceD1Ev>
        float lon = atof(train.key("lon").valueString().c_str());
   b60b8:	4a8f      	ldr	r2, [pc, #572]	; (b62f8 <loop+0x458>)
   b60ba:	a90b      	add	r1, sp, #44	; 0x2c
   b60bc:	a819      	add	r0, sp, #100	; 0x64
   b60be:	f000 fe75 	bl	b6dac <_ZNK13JsonReference3keyEPKc>
   b60c2:	a919      	add	r1, sp, #100	; 0x64
   b60c4:	a81d      	add	r0, sp, #116	; 0x74
   b60c6:	f000 fe8b 	bl	b6de0 <_ZNK13JsonReference11valueStringEv>
   b60ca:	981d      	ldr	r0, [sp, #116]	; 0x74
   b60cc:	f004 fe6c 	bl	bada8 <atof>
   b60d0:	ec51 0b10 	vmov	r0, r1, d0
   b60d4:	f004 fdf4 	bl	bacc0 <__aeabi_d2f>
   b60d8:	ee08 0a10 	vmov	s16, r0
   b60dc:	a81d      	add	r0, sp, #116	; 0x74
   b60de:	f002 ffcd 	bl	b907c <_ZN6StringD1Ev>
   b60e2:	a819      	add	r0, sp, #100	; 0x64
   b60e4:	f000 fc5a 	bl	b699c <_ZN13JsonReferenceD1Ev>
        if(nextStation.length() <= 1){
   b60e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b60ea:	2b01      	cmp	r3, #1
   b60ec:	d878      	bhi.n	b61e0 <loop+0x340>
          Serial.println("break");
   b60ee:	f003 fcb9 	bl	b9a64 <_Z16_fetch_usbserialv>
   b60f2:	4982      	ldr	r1, [pc, #520]	; (b62fc <loop+0x45c>)
        Serial.println("sending");
   b60f4:	f8df 9214 	ldr.w	r9, [pc, #532]	; b630c <loop+0x46c>
        Serial.printlnf("rail part %i", i);
   b60f8:	f8df a214 	ldr.w	sl, [pc, #532]	; b6310 <loop+0x470>
          Serial.println("break");
   b60fc:	f002 ff5f 	bl	b8fbe <_ZN5Print7printlnEPKc>
          break;
   b6100:	a815      	add	r0, sp, #84	; 0x54
   b6102:	f002 ffbb 	bl	b907c <_ZN6StringD1Ev>
   b6106:	a811      	add	r0, sp, #68	; 0x44
   b6108:	f002 ffb8 	bl	b907c <_ZN6StringD1Ev>
   b610c:	a80b      	add	r0, sp, #44	; 0x2c
   b610e:	f000 fc45 	bl	b699c <_ZN13JsonReferenceD1Ev>
      for(int i = 0; i < 3; i++){
   b6112:	f8dd 8014 	ldr.w	r8, [sp, #20]
   b6116:	2500      	movs	r5, #0
        Serial.println("sending");
   b6118:	f003 fca4 	bl	b9a64 <_Z16_fetch_usbserialv>
   b611c:	4649      	mov	r1, r9
   b611e:	f002 ff4e 	bl	b8fbe <_ZN5Print7printlnEPKc>
        if(i == 2){
   b6122:	2d02      	cmp	r5, #2
   b6124:	f040 8287 	bne.w	b6636 <loop+0x796>
          Wire.beginTransmission(sequenceArr[4]); //temp
   b6128:	f003 fdea 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b612c:	4b74      	ldr	r3, [pc, #464]	; (b6300 <loop+0x460>)
   b612e:	6919      	ldr	r1, [r3, #16]
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b6130:	f002 fdb8 	bl	b8ca4 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(String(currentRailway.colors[0].c_str()));
   b6134:	f003 fde4 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b6138:	9b33      	ldr	r3, [sp, #204]	; 0xcc
   b613a:	4606      	mov	r6, r0
   b613c:	6819      	ldr	r1, [r3, #0]
   b613e:	a81d      	add	r0, sp, #116	; 0x74
   b6140:	f002 ffe7 	bl	b9112 <_ZN6StringC1EPK19__FlashStringHelper>
   b6144:	991d      	ldr	r1, [sp, #116]	; 0x74
   b6146:	4630      	mov	r0, r6
   b6148:	f7fe f86e 	bl	b4228 <_ZN5Print5writeEPKc.isra.0>
   b614c:	a81d      	add	r0, sp, #116	; 0x74
   b614e:	f002 ff95 	bl	b907c <_ZN6StringD1Ev>
        Wire.write(String(currentRailway.colors[1].c_str()));
   b6152:	f003 fdd5 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b6156:	9b33      	ldr	r3, [sp, #204]	; 0xcc
   b6158:	4606      	mov	r6, r0
   b615a:	6999      	ldr	r1, [r3, #24]
   b615c:	a81d      	add	r0, sp, #116	; 0x74
   b615e:	f002 ffd8 	bl	b9112 <_ZN6StringC1EPK19__FlashStringHelper>
   b6162:	991d      	ldr	r1, [sp, #116]	; 0x74
   b6164:	4630      	mov	r0, r6
   b6166:	f7fe f85f 	bl	b4228 <_ZN5Print5writeEPKc.isra.0>
   b616a:	a81d      	add	r0, sp, #116	; 0x74
   b616c:	f002 ff86 	bl	b907c <_ZN6StringD1Ev>
        Wire.endTransmission();
   b6170:	f003 fdc6 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b6174:	f002 fd9d 	bl	b8cb2 <_ZN7TwoWire15endTransmissionEv>
        if(i == 2){
   b6178:	2d02      	cmp	r5, #2
   b617a:	f040 8261 	bne.w	b6640 <loop+0x7a0>
          Wire.beginTransmission(sequenceArr[4]); //temp
   b617e:	f003 fdbf 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b6182:	4b5f      	ldr	r3, [pc, #380]	; (b6300 <loop+0x460>)
   b6184:	6919      	ldr	r1, [r3, #16]
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b6186:	f002 fd8d 	bl	b8ca4 <_ZN7TwoWire17beginTransmissionEi>
        Serial.printlnf("rail part %i", i);
   b618a:	f003 fc6b 	bl	b9a64 <_Z16_fetch_usbserialv>
   b618e:	462a      	mov	r2, r5
   b6190:	4651      	mov	r1, sl
   b6192:	f7fe f9f1 	bl	b4578 <_ZN5Print8printlnfEPKcz>
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b6196:	270c      	movs	r7, #12
   b6198:	2600      	movs	r6, #0
   b619a:	436f      	muls	r7, r5
          currentRailway.outputs[i][j] = 0;
   b619c:	46b3      	mov	fp, r6
   b619e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   b61a0:	19d3      	adds	r3, r2, r7
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b61a2:	59d2      	ldr	r2, [r2, r7]
   b61a4:	685b      	ldr	r3, [r3, #4]
   b61a6:	1a9b      	subs	r3, r3, r2
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b61a8:	ebb6 0fa3 	cmp.w	r6, r3, asr #2
   b61ac:	f080 826a 	bcs.w	b6684 <loop+0x7e4>
          Wire.write((char)currentRailway.outputs[i][j] + '0');
   b61b0:	f003 fda6 	bl	b9d00 <_Z19__fetch_global_Wirev>
	return *(this->_M_impl._M_start + __n);
   b61b4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   b61b6:	59db      	ldr	r3, [r3, r7]
   b61b8:	f813 1026 	ldrb.w	r1, [r3, r6, lsl #2]
   b61bc:	3130      	adds	r1, #48	; 0x30
   b61be:	f7fe f82f 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
          Serial.print(currentRailway.outputs[i][j]);
   b61c2:	f003 fc4f 	bl	b9a64 <_Z16_fetch_usbserialv>
   b61c6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   b61c8:	59db      	ldr	r3, [r3, r7]
   b61ca:	220a      	movs	r2, #10
   b61cc:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   b61d0:	f7fd ff87 	bl	b40e2 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
   b61d4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
          currentRailway.outputs[i][j] = 0;
   b61d6:	59db      	ldr	r3, [r3, r7]
   b61d8:	f843 b026 	str.w	fp, [r3, r6, lsl #2]
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b61dc:	3601      	adds	r6, #1
   b61de:	e7de      	b.n	b619e <loop+0x2fe>
        Serial.print(String(currentRailway.name.c_str()) + " ");
   b61e0:	f003 fc40 	bl	b9a64 <_Z16_fetch_usbserialv>
   b61e4:	992d      	ldr	r1, [sp, #180]	; 0xb4
   b61e6:	4606      	mov	r6, r0
   b61e8:	a819      	add	r0, sp, #100	; 0x64
   b61ea:	f002 ff92 	bl	b9112 <_ZN6StringC1EPK19__FlashStringHelper>
	StringSumHelper(const String &s) : String(s) {}
   b61ee:	a919      	add	r1, sp, #100	; 0x64
   b61f0:	a81d      	add	r0, sp, #116	; 0x74
   b61f2:	f002 ffb1 	bl	b9158 <_ZN6StringC1ERKS_>
   b61f6:	4943      	ldr	r1, [pc, #268]	; (b6304 <loop+0x464>)
   b61f8:	a81d      	add	r0, sp, #116	; 0x74
   b61fa:	f003 f811 	bl	b9220 <_ZplRK15StringSumHelperPKc>
   b61fe:	6801      	ldr	r1, [r0, #0]
   b6200:	4630      	mov	r0, r6
   b6202:	f002 fec9 	bl	b8f98 <_ZN5Print5printEPKc>
class StringSumHelper : public String
   b6206:	a81d      	add	r0, sp, #116	; 0x74
   b6208:	f002 ff38 	bl	b907c <_ZN6StringD1Ev>
   b620c:	a819      	add	r0, sp, #100	; 0x64
   b620e:	f002 ff35 	bl	b907c <_ZN6StringD1Ev>
        Serial.printf("train %i: ", count);
   b6212:	f003 fc27 	bl	b9a64 <_Z16_fetch_usbserialv>
   b6216:	4652      	mov	r2, sl
   b6218:	493b      	ldr	r1, [pc, #236]	; (b6308 <loop+0x468>)
   b621a:	f7fe f99f 	bl	b455c <_ZN5Print6printfEPKcz>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b621e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b6222:	1a9b      	subs	r3, r3, r2
   b6224:	ea4f 09e3 	mov.w	r9, r3, asr #3
        for(int i = 0; i < checkpointCount; i++){
   b6228:	f04f 0b00 	mov.w	fp, #0
   b622c:	45cb      	cmp	fp, r9
	return *(this->_M_impl._M_start + __n);
   b622e:	9e08      	ldr	r6, [sp, #32]
   b6230:	da3b      	bge.n	b62aa <loop+0x40a>
   b6232:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
    }

    float getDistance(float trainLat, float trainLon){
      return sqrt(pow((trainLat - lat), 2) + pow((trainLon - lon), 2));
   b6236:	edd6 7a00 	vldr	s15, [r6]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b623a:	ee78 7ae7 	vsub.f32	s15, s17, s15
   b623e:	ee17 0a90 	vmov	r0, s15
   b6242:	f004 fa15 	bl	ba670 <__aeabi_f2d>
   b6246:	edd6 7a01 	vldr	s15, [r6, #4]
   b624a:	ee78 7a67 	vsub.f32	s15, s16, s15
   b624e:	4602      	mov	r2, r0
   b6250:	460b      	mov	r3, r1
   b6252:	ee17 0a90 	vmov	r0, s15
   b6256:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b625a:	f004 fa09 	bl	ba670 <__aeabi_f2d>
   b625e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   b6262:	ec41 0b19 	vmov	d9, r0, r1
   b6266:	4610      	mov	r0, r2
   b6268:	4619      	mov	r1, r3
   b626a:	f004 fa59 	bl	ba720 <__aeabi_dmul>
   b626e:	ec53 2b19 	vmov	r2, r3, d9
   b6272:	4606      	mov	r6, r0
   b6274:	460f      	mov	r7, r1
   b6276:	ee19 0a10 	vmov	r0, s18
   b627a:	4619      	mov	r1, r3
   b627c:	f004 fa50 	bl	ba720 <__aeabi_dmul>
   b6280:	4602      	mov	r2, r0
   b6282:	460b      	mov	r3, r1
   b6284:	4630      	mov	r0, r6
   b6286:	4639      	mov	r1, r7
   b6288:	f004 f894 	bl	ba3b4 <__adddf3>
   b628c:	ec41 0b10 	vmov	d0, r0, r1
   b6290:	f003 ff84 	bl	ba19c <sqrt>
          currentRailway.distances[i] = currentCheckpoints[i].getDistance(lat, lon);
   b6294:	9e24      	ldr	r6, [sp, #144]	; 0x90
   b6296:	ec51 0b10 	vmov	r0, r1, d0
   b629a:	f004 fd11 	bl	bacc0 <__aeabi_d2f>
   b629e:	eb06 068b 	add.w	r6, r6, fp, lsl #2
        for(int i = 0; i < checkpointCount; i++){
   b62a2:	f10b 0b01 	add.w	fp, fp, #1
   b62a6:	6030      	str	r0, [r6, #0]
   b62a8:	e7c0      	b.n	b622c <loop+0x38c>
      : _M_current(__i) { }
   b62aa:	e9dd 2724 	ldrd	r2, r7, [sp, #144]	; 0x90
    _GLIBCXX14_CONSTEXPR
    _ForwardIterator
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
		  _Compare __comp)
    {
      if (__first == __last)
   b62ae:	42ba      	cmp	r2, r7
   b62b0:	d032      	beq.n	b6318 <loop+0x478>
   b62b2:	1d11      	adds	r1, r2, #4
   b62b4:	4613      	mov	r3, r2
	return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
   b62b6:	428f      	cmp	r7, r1
	++_M_current;
   b62b8:	4608      	mov	r0, r1
   b62ba:	d02e      	beq.n	b631a <loop+0x47a>
	if (__comp(__first, __result))
   b62bc:	edd3 7a00 	vldr	s15, [r3]
   b62c0:	ed90 7a00 	vldr	s14, [r0]
   b62c4:	eeb4 7a67 	vcmp.f32	s14, s15
   b62c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b62cc:	f101 0104 	add.w	r1, r1, #4
   b62d0:	bf48      	it	mi
   b62d2:	4603      	movmi	r3, r0
   b62d4:	e7ef      	b.n	b62b6 <loop+0x416>
   b62d6:	bf00      	nop
   b62d8:	20037f34 	.word	0x20037f34
   b62dc:	000bd17a 	.word	0x000bd17a
   b62e0:	000bd180 	.word	0x000bd180
   b62e4:	000bd186 	.word	0x000bd186
   b62e8:	000bd18c 	.word	0x000bd18c
   b62ec:	000bd196 	.word	0x000bd196
   b62f0:	000bd19d 	.word	0x000bd19d
   b62f4:	000bd1a2 	.word	0x000bd1a2
   b62f8:	000bd1a6 	.word	0x000bd1a6
   b62fc:	000bd1aa 	.word	0x000bd1aa
   b6300:	2003e690 	.word	0x2003e690
   b6304:	000bd109 	.word	0x000bd109
   b6308:	000bd1b0 	.word	0x000bd1b0
   b630c:	000bd212 	.word	0x000bd212
   b6310:	000bd21a 	.word	0x000bd21a
   b6314:	7dcccccc 	.word	0x7dcccccc
   b6318:	4613      	mov	r3, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b631a:	1a9b      	subs	r3, r3, r2
        if(closestIndex == currentRailway.tripleIndex){
   b631c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
   b631e:	ed1f 9a03 	vldr	s18, [pc, #-12]	; b6314 <loop+0x474>
   b6322:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
   b6326:	ea4f 08a3 	mov.w	r8, r3, asr #2
          closestIndex = currentRailway.loopIndex;
   b632a:	bf08      	it	eq
   b632c:	f8dd 80dc 	ldreq.w	r8, [sp, #220]	; 0xdc
   b6330:	eb06 06c8 	add.w	r6, r6, r8, lsl #3
        x1 = currentCheckpoints[closestIndex].lat;
   b6334:	edd6 7a00 	vldr	s15, [r6]
        y1 = currentCheckpoints[closestIndex].lon;
   b6338:	ed96 7a01 	vldr	s14, [r6, #4]
        if(currentCheckpoints[closestIndex].lat > lat){
   b633c:	eef4 8ae7 	vcmpe.f32	s17, s15
   b6340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          slope = (y1 - y) / (x1 - x);
   b6344:	bf47      	ittee	mi
   b6346:	ee37 7a48 	vsubmi.f32	s14, s14, s16
   b634a:	ee77 7ae8 	vsubmi.f32	s15, s15, s17
          slope = (y - y1) / (x - x1);
   b634e:	ee38 7a47 	vsubpl.f32	s14, s16, s14
   b6352:	ee78 7ae7 	vsubpl.f32	s15, s17, s15
   b6356:	ea4f 07c8 	mov.w	r7, r8, lsl #3
   b635a:	eec7 6a27 	vdiv.f32	s13, s14, s15
        if(slope == 0){
   b635e:	eef5 6a40 	vcmp.f32	s13, #0.0
   b6362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6366:	d151      	bne.n	b640c <loop+0x56c>
          Serial.println("slope 0");
   b6368:	f003 fb7c 	bl	b9a64 <_Z16_fetch_usbserialv>
   b636c:	49b7      	ldr	r1, [pc, #732]	; (b664c <loop+0x7ac>)
   b636e:	f002 fe26 	bl	b8fbe <_ZN5Print7printlnEPKc>
        Serial.println("calculation");
   b6372:	f003 fb77 	bl	b9a64 <_Z16_fetch_usbserialv>
   b6376:	49b6      	ldr	r1, [pc, #728]	; (b6650 <loop+0x7b0>)
   b6378:	f002 fe21 	bl	b8fbe <_ZN5Print7printlnEPKc>
        if(closestIndex == 0){
   b637c:	9b08      	ldr	r3, [sp, #32]
   b637e:	f1b8 0f00 	cmp.w	r8, #0
   b6382:	f040 809b 	bne.w	b64bc <loop+0x61c>
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b6386:	edd3 7a02 	vldr	s15, [r3, #8]
          if(currentRailway.loopIndex == closestIndex){
   b638a:	9937      	ldr	r1, [sp, #220]	; 0xdc
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b638c:	ee77 7ae8 	vsub.f32	s15, s15, s17
   b6390:	eeb0 7a48 	vmov.f32	s14, s16
   b6394:	eea7 7a89 	vfma.f32	s14, s15, s18
   b6398:	441f      	add	r7, r3
   b639a:	edd3 7a03 	vldr	s15, [r3, #12]
   b639e:	eeb4 7ae7 	vcmpe.f32	s14, s15
          nearestSide = (perpendicularSlope * (currentCheckpoints[closestIndex].lat - x) + y) > currentCheckpoints[closestIndex].lon;
   b63a2:	edd7 7a00 	vldr	s15, [r7]
   b63a6:	ee77 7ae8 	vsub.f32	s15, s15, s17
   b63aa:	eeb0 7a48 	vmov.f32	s14, s16
   b63ae:	eea7 7a89 	vfma.f32	s14, s15, s18
   b63b2:	edd7 7a01 	vldr	s15, [r7, #4]
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b63b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          nearestSide = (perpendicularSlope * (currentCheckpoints[closestIndex].lat - x) + y) > currentCheckpoints[closestIndex].lon;
   b63ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b63be:	bfcc      	ite	gt
   b63c0:	2201      	movgt	r2, #1
   b63c2:	2200      	movle	r2, #0
          nearestSide = (perpendicularSlope * (currentCheckpoints[closestIndex].lat - x) + y) > currentCheckpoints[closestIndex].lon;
   b63c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b63c8:	bfcc      	ite	gt
   b63ca:	2001      	movgt	r0, #1
   b63cc:	2000      	movle	r0, #0
          if(currentRailway.loopIndex == closestIndex){
   b63ce:	bb79      	cbnz	r1, b6430 <loop+0x590>
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b63d0:	f8dd 80d8 	ldr.w	r8, [sp, #216]	; 0xd8
   b63d4:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
   b63d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
            if(nearestSide != pointSide){
   b63dc:	4282      	cmp	r2, r0
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b63de:	edd3 7a00 	vldr	s15, [r3]
   b63e2:	ed93 7a01 	vldr	s14, [r3, #4]
            if(nearestSide != pointSide){
   b63e6:	f040 80c1 	bne.w	b656c <loop+0x6cc>
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b63ea:	ee77 8ae8 	vsub.f32	s17, s15, s17
   b63ee:	eea8 8a89 	vfma.f32	s16, s17, s18
   b63f2:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b63f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            }else if(nearestSide != loopPointSide){
   b63fa:	bfcc      	ite	gt
   b63fc:	2301      	movgt	r3, #1
   b63fe:	2300      	movle	r3, #0
   b6400:	4293      	cmp	r3, r2
   b6402:	f040 8096 	bne.w	b6532 <loop+0x692>
              secondClosestIndex = closestIndex + 1;
   b6406:	f108 0401 	add.w	r4, r8, #1
   b640a:	e092      	b.n	b6532 <loop+0x692>
        }else if(slope >= __FLT_MAX__ / 10){
   b640c:	eef4 6ac9 	vcmpe.f32	s13, s18
   b6410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6414:	db07      	blt.n	b6426 <loop+0x586>
          Serial.println("slope max");
   b6416:	f003 fb25 	bl	b9a64 <_Z16_fetch_usbserialv>
   b641a:	498e      	ldr	r1, [pc, #568]	; (b6654 <loop+0x7b4>)
          perpendicularSlope = 0;
   b641c:	ed9f 9a8e 	vldr	s18, [pc, #568]	; b6658 <loop+0x7b8>
          Serial.println("slope max");
   b6420:	f002 fdcd 	bl	b8fbe <_ZN5Print7printlnEPKc>
   b6424:	e7a5      	b.n	b6372 <loop+0x4d2>
          perpendicularSlope = -1 / slope;
   b6426:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b642a:	ee87 9aa6 	vdiv.f32	s18, s15, s13
   b642e:	e7a0      	b.n	b6372 <loop+0x4d2>
              validTrain = false;
   b6430:	4282      	cmp	r2, r0
   b6432:	bf16      	itet	ne
   b6434:	462e      	movne	r6, r5
   b6436:	2600      	moveq	r6, #0
   b6438:	2401      	movne	r4, #1
        Serial.println("segment pos");
   b643a:	f003 fb13 	bl	b9a64 <_Z16_fetch_usbserialv>
   b643e:	4987      	ldr	r1, [pc, #540]	; (b665c <loop+0x7bc>)
   b6440:	f002 fdbd 	bl	b8fbe <_ZN5Print7printlnEPKc>
        if(validTrain){
   b6444:	2e00      	cmp	r6, #0
   b6446:	f000 80ea 	beq.w	b661e <loop+0x77e>
          if(closestIndex < secondClosestIndex){
   b644a:	45a0      	cmp	r8, r4
   b644c:	9b24      	ldr	r3, [sp, #144]	; 0x90
          if(closestIndex < currentRailway.lowerLoopBound || secondClosestIndex < currentRailway.lowerLoopBound){
   b644e:	f8dd 90e0 	ldr.w	r9, [sp, #224]	; 0xe0
          if(closestIndex < secondClosestIndex){
   b6452:	bfab      	itete	ge
   b6454:	4627      	movge	r7, r4
   b6456:	4647      	movlt	r7, r8
   b6458:	4642      	movge	r2, r8
   b645a:	4622      	movlt	r2, r4
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b645c:	eb03 0187 	add.w	r1, r3, r7, lsl #2
   b6460:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   b6464:	ed91 7a00 	vldr	s14, [r1]
   b6468:	edd3 7a00 	vldr	s15, [r3]
          segmentPos *= currentRailway.scalers[lowerIndex];
   b646c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b646e:	ee77 7a27 	vadd.f32	s15, s14, s15
          segmentPos *= currentRailway.scalers[lowerIndex];
   b6472:	eb03 0387 	add.w	r3, r3, r7, lsl #2
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b6476:	eec7 6a27 	vdiv.f32	s13, s14, s15
          if(closestIndex < currentRailway.lowerLoopBound || secondClosestIndex < currentRailway.lowerLoopBound){
   b647a:	45c1      	cmp	r9, r8
          segmentPos *= currentRailway.scalers[lowerIndex];
   b647c:	ed93 8a00 	vldr	s16, [r3]
   b6480:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   b6484:	ee28 8a26 	vmul.f32	s16, s16, s13
          if(closestIndex < currentRailway.lowerLoopBound || secondClosestIndex < currentRailway.lowerLoopBound){
   b6488:	dc01      	bgt.n	b648e <loop+0x5ee>
   b648a:	45a1      	cmp	r9, r4
   b648c:	dd72      	ble.n	b6574 <loop+0x6d4>
            Serial.println("before");
   b648e:	f003 fae9 	bl	b9a64 <_Z16_fetch_usbserialv>
   b6492:	4973      	ldr	r1, [pc, #460]	; (b6660 <loop+0x7c0>)
   b6494:	f002 fd93 	bl	b8fbe <_ZN5Print7printlnEPKc>
            lowerScaleBound = 0;
   b6498:	f04f 0900 	mov.w	r9, #0
            pcbSegment = 0;
   b649c:	464e      	mov	r6, r9
   b649e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b64a0:	454f      	cmp	r7, r9
   b64a2:	f340 808b 	ble.w	b65bc <loop+0x71c>
            segmentPos += currentRailway.scalers[i];
   b64a6:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
   b64aa:	ee07 2a90 	vmov	s15, r2
   b64ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b64b2:	f109 0901 	add.w	r9, r9, #1
            segmentPos += currentRailway.scalers[i];
   b64b6:	ee38 8a27 	vadd.f32	s16, s16, s15
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b64ba:	e7f1      	b.n	b64a0 <loop+0x600>
   b64bc:	f1a7 0108 	sub.w	r1, r7, #8
   b64c0:	4419      	add	r1, r3
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b64c2:	edd1 7a00 	vldr	s15, [r1]
   b64c6:	ee77 7ae8 	vsub.f32	s15, s15, s17
   b64ca:	eeb0 7a48 	vmov.f32	s14, s16
   b64ce:	eea7 7a89 	vfma.f32	s14, s15, s18
   b64d2:	441f      	add	r7, r3
          if(closestIndex == checkpointCount - 1){
   b64d4:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b64d8:	edd1 7a01 	vldr	s15, [r1, #4]
   b64dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
          nearestSide = (perpendicularSlope * (currentCheckpoints[closestIndex].lat - x) + y) > currentCheckpoints[closestIndex].lon;
   b64e0:	edd7 7a00 	vldr	s15, [r7]
   b64e4:	ee77 7ae8 	vsub.f32	s15, s15, s17
   b64e8:	eeb0 7a48 	vmov.f32	s14, s16
   b64ec:	eea7 7a89 	vfma.f32	s14, s15, s18
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b64f0:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
          nearestSide = (perpendicularSlope * (currentCheckpoints[closestIndex].lat - x) + y) > currentCheckpoints[closestIndex].lon;
   b64f4:	edd7 7a01 	vldr	s15, [r7, #4]
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b64f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          nearestSide = (perpendicularSlope * (currentCheckpoints[closestIndex].lat - x) + y) > currentCheckpoints[closestIndex].lon;
   b64fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b6500:	bfcc      	ite	gt
   b6502:	2101      	movgt	r1, #1
   b6504:	2100      	movle	r1, #0
          nearestSide = (perpendicularSlope * (currentCheckpoints[closestIndex].lat - x) + y) > currentCheckpoints[closestIndex].lon;
   b6506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b650a:	bfcc      	ite	gt
   b650c:	2001      	movgt	r0, #1
   b650e:	2000      	movle	r0, #0
          if(closestIndex == checkpointCount - 1){
   b6510:	4546      	cmp	r6, r8
   b6512:	d125      	bne.n	b6560 <loop+0x6c0>
            if(closestIndex == currentRailway.loopIndex){
   b6514:	9a37      	ldr	r2, [sp, #220]	; 0xdc
   b6516:	4542      	cmp	r2, r8
   b6518:	d11e      	bne.n	b6558 <loop+0x6b8>
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b651a:	9a36      	ldr	r2, [sp, #216]	; 0xd8
   b651c:	1e54      	subs	r4, r2, #1
   b651e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
              if(nearestSide != pointSide){
   b6522:	4281      	cmp	r1, r0
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b6524:	edd3 7a00 	vldr	s15, [r3]
   b6528:	ed93 7a01 	vldr	s14, [r3, #4]
              if(nearestSide != pointSide){
   b652c:	d003      	beq.n	b6536 <loop+0x696>
                secondClosestIndex = checkpointCount - 2;
   b652e:	f1a9 0402 	sub.w	r4, r9, #2
        bool validTrain = true;
   b6532:	462e      	mov	r6, r5
   b6534:	e781      	b.n	b643a <loop+0x59a>
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b6536:	ee77 8ae8 	vsub.f32	s17, s15, s17
   b653a:	eea8 8a89 	vfma.f32	s16, s17, s18
   b653e:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b6542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
              }else if(nearestSide != loopPointSide){
   b6546:	bfcc      	ite	gt
   b6548:	2301      	movgt	r3, #1
   b654a:	2300      	movle	r3, #0
   b654c:	428b      	cmp	r3, r1
   b654e:	d100      	bne.n	b6552 <loop+0x6b2>
                secondClosestIndex = currentRailway.tripleIndex + 1;
   b6550:	1c54      	adds	r4, r2, #1
        bool validTrain = true;
   b6552:	462e      	mov	r6, r5
                closestIndex = currentRailway.tripleIndex;
   b6554:	4690      	mov	r8, r2
   b6556:	e770      	b.n	b643a <loop+0x59a>
              if(pointSide == nearestSide){
   b6558:	4281      	cmp	r1, r0
   b655a:	d1e8      	bne.n	b652e <loop+0x68e>
                validTrain = false;
   b655c:	2600      	movs	r6, #0
   b655e:	e76c      	b.n	b643a <loop+0x59a>
            if(pointSide == nearestSide){
   b6560:	4281      	cmp	r1, r0
   b6562:	f43f af50 	beq.w	b6406 <loop+0x566>
        bool validTrain = true;
   b6566:	462e      	mov	r6, r5
              secondClosestIndex = closestIndex - 1;
   b6568:	4614      	mov	r4, r2
   b656a:	e766      	b.n	b643a <loop+0x59a>
        bool validTrain = true;
   b656c:	462e      	mov	r6, r5
   b656e:	4688      	mov	r8, r1
              secondClosestIndex = 1;
   b6570:	2401      	movs	r4, #1
   b6572:	e762      	b.n	b643a <loop+0x59a>
          else if(closestIndex > currentRailway.upperLoopBound || secondClosestIndex > currentRailway.upperLoopBound){
   b6574:	9e39      	ldr	r6, [sp, #228]	; 0xe4
   b6576:	4546      	cmp	r6, r8
   b6578:	db01      	blt.n	b657e <loop+0x6de>
   b657a:	42a6      	cmp	r6, r4
   b657c:	da07      	bge.n	b658e <loop+0x6ee>
            Serial.println("after");
   b657e:	f003 fa71 	bl	b9a64 <_Z16_fetch_usbserialv>
   b6582:	4938      	ldr	r1, [pc, #224]	; (b6664 <loop+0x7c4>)
          else if(closestIndex > currentRailway.upperLoopBound || secondClosestIndex > currentRailway.upperLoopBound){
   b6584:	46b1      	mov	r9, r6
            Serial.println("after");
   b6586:	f002 fd1a 	bl	b8fbe <_ZN5Print7printlnEPKc>
            pcbSegment = 1;
   b658a:	2601      	movs	r6, #1
            Serial.println("after");
   b658c:	e787      	b.n	b649e <loop+0x5fe>
            Serial.println("in");
   b658e:	f003 fa69 	bl	b9a64 <_Z16_fetch_usbserialv>
   b6592:	4935      	ldr	r1, [pc, #212]	; (b6668 <loop+0x7c8>)
   b6594:	f002 fd13 	bl	b8fbe <_ZN5Print7printlnEPKc>
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
	       const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
   b6598:	4934      	ldr	r1, [pc, #208]	; (b666c <loop+0x7cc>)
   b659a:	a82d      	add	r0, sp, #180	; 0xb4
   b659c:	f003 fc98 	bl	b9ed0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
            if(currentRailway.name == "brn" || currentRailway.name == "pink"){
   b65a0:	b928      	cbnz	r0, b65ae <loop+0x70e>
               trainDir = 6 - trainDir;
   b65a2:	9b04      	ldr	r3, [sp, #16]
   b65a4:	f1c3 0306 	rsb	r3, r3, #6
   b65a8:	9304      	str	r3, [sp, #16]
            pcbSegment = 2;
   b65aa:	2602      	movs	r6, #2
   b65ac:	e777      	b.n	b649e <loop+0x5fe>
   b65ae:	4930      	ldr	r1, [pc, #192]	; (b6670 <loop+0x7d0>)
   b65b0:	a82d      	add	r0, sp, #180	; 0xb4
   b65b2:	f003 fc8d 	bl	b9ed0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
            if(currentRailway.name == "brn" || currentRailway.name == "pink"){
   b65b6:	2800      	cmp	r0, #0
   b65b8:	d0f3      	beq.n	b65a2 <loop+0x702>
   b65ba:	e7f6      	b.n	b65aa <loop+0x70a>
   b65bc:	492d      	ldr	r1, [pc, #180]	; (b6674 <loop+0x7d4>)
   b65be:	a82d      	add	r0, sp, #180	; 0xb4
   b65c0:	f003 fc86 	bl	b9ed0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
          if(currentRailway.name == "p"){
   b65c4:	b940      	cbnz	r0, b65d8 <loop+0x738>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b65c6:	492c      	ldr	r1, [pc, #176]	; (b6678 <loop+0x7d8>)
   b65c8:	a815      	add	r0, sp, #84	; 0x54
   b65ca:	f002 fe3e 	bl	b924a <_ZNK6String6equalsEPKc>
              trainDir = 5;
   b65ce:	2800      	cmp	r0, #0
   b65d0:	bf14      	ite	ne
   b65d2:	2301      	movne	r3, #1
   b65d4:	2305      	moveq	r3, #5
   b65d6:	9304      	str	r3, [sp, #16]
          Serial.println("output vector");
   b65d8:	f003 fa44 	bl	b9a64 <_Z16_fetch_usbserialv>
   b65dc:	4927      	ldr	r1, [pc, #156]	; (b667c <loop+0x7dc>)
   b65de:	f002 fcee 	bl	b8fbe <_ZN5Print7printlnEPKc>
  { return __builtin_floorf(__x); }
   b65e2:	eeb0 0a48 	vmov.f32	s0, s16
   b65e6:	f003 fd93 	bl	ba110 <floorf>
   b65ea:	230c      	movs	r3, #12
          currentRailway.outputs[pcbSegment][(int)floor(segmentPos)] = trainDir;
   b65ec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b65f0:	435e      	muls	r6, r3
   b65f2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   b65f4:	9a04      	ldr	r2, [sp, #16]
   b65f6:	599b      	ldr	r3, [r3, r6]
   b65f8:	ee10 1a10 	vmov	r1, s0
   b65fc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
          Serial.printlnf("%i, %i, %f", closestIndex, secondClosestIndex, segmentPos);
   b6600:	f003 fa30 	bl	b9a64 <_Z16_fetch_usbserialv>
   b6604:	4606      	mov	r6, r0
   b6606:	ee18 0a10 	vmov	r0, s16
   b660a:	f004 f831 	bl	ba670 <__aeabi_f2d>
   b660e:	4623      	mov	r3, r4
   b6610:	e9cd 0100 	strd	r0, r1, [sp]
   b6614:	4642      	mov	r2, r8
   b6616:	491a      	ldr	r1, [pc, #104]	; (b6680 <loop+0x7e0>)
   b6618:	4630      	mov	r0, r6
   b661a:	f7fd ffad 	bl	b4578 <_ZN5Print8printlnfEPKcz>
        String destNm = train.key("destNm").valueString();
   b661e:	a815      	add	r0, sp, #84	; 0x54
   b6620:	f002 fd2c 	bl	b907c <_ZN6StringD1Ev>
        String nextStation = train.key("nextStaNm").valueString();
   b6624:	a811      	add	r0, sp, #68	; 0x44
   b6626:	f002 fd29 	bl	b907c <_ZN6StringD1Ev>
        JsonReference train = parser.getReference().key("ctatt").key("route").index(0).key("train").index(count);
   b662a:	a80b      	add	r0, sp, #44	; 0x2c
        count++;
   b662c:	f10a 0a01 	add.w	sl, sl, #1
        JsonReference train = parser.getReference().key("ctatt").key("route").index(0).key("train").index(count);
   b6630:	f000 f9b4 	bl	b699c <_ZN13JsonReferenceD1Ev>
   b6634:	e4d1      	b.n	b5fda <loop+0x13a>
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b6636:	f003 fb63 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b663a:	f8d8 1000 	ldr.w	r1, [r8]
   b663e:	e577      	b.n	b6130 <loop+0x290>
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b6640:	f003 fb5e 	bl	b9d00 <_Z19__fetch_global_Wirev>
   b6644:	f8d8 1000 	ldr.w	r1, [r8]
   b6648:	e59d      	b.n	b6186 <loop+0x2e6>
   b664a:	bf00      	nop
   b664c:	000bd1bb 	.word	0x000bd1bb
   b6650:	000bd1cd 	.word	0x000bd1cd
   b6654:	000bd1c3 	.word	0x000bd1c3
   b6658:	00000000 	.word	0x00000000
   b665c:	000bd1d9 	.word	0x000bd1d9
   b6660:	000bd1e5 	.word	0x000bd1e5
   b6664:	000bd1ec 	.word	0x000bd1ec
   b6668:	000bd189 	.word	0x000bd189
   b666c:	000bd01b 	.word	0x000bd01b
   b6670:	000bd05b 	.word	0x000bd05b
   b6674:	000bd5ba 	.word	0x000bd5ba
   b6678:	000bd1f2 	.word	0x000bd1f2
   b667c:	000bd1f9 	.word	0x000bd1f9
   b6680:	000bd207 	.word	0x000bd207
        Wire.endTransmission();
   b6684:	f003 fb3c 	bl	b9d00 <_Z19__fetch_global_Wirev>
      for(int i = 0; i < 3; i++){
   b6688:	3501      	adds	r5, #1
        Wire.endTransmission();
   b668a:	f002 fb12 	bl	b8cb2 <_ZN7TwoWire15endTransmissionEv>
      for(int i = 0; i < 3; i++){
   b668e:	2d03      	cmp	r5, #3
   b6690:	f108 0804 	add.w	r8, r8, #4
   b6694:	f47f ad40 	bne.w	b6118 <loop+0x278>
      Serial.println();
   b6698:	f003 f9e4 	bl	b9a64 <_Z16_fetch_usbserialv>
   b669c:	f002 fc83 	bl	b8fa6 <_ZN5Print7printlnEv>
      }
   b66a0:	a808      	add	r0, sp, #32
   b66a2:	f7fe f90d 	bl	b48c0 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      Railway currentRailway = railways[j];
   b66a6:	a821      	add	r0, sp, #132	; 0x84
   b66a8:	f7fe fa0a 	bl	b4ac0 <_ZN7RailwayD1Ev>
    for(int j = 0; j < railways.size(); j++){
   b66ac:	9b03      	ldr	r3, [sp, #12]
   b66ae:	3301      	adds	r3, #1
   b66b0:	9303      	str	r3, [sp, #12]
   b66b2:	9b05      	ldr	r3, [sp, #20]
   b66b4:	3308      	adds	r3, #8
   b66b6:	9305      	str	r3, [sp, #20]
   b66b8:	e40d      	b.n	b5ed6 <loop+0x36>
    Serial.println();
   b66ba:	f003 f9d3 	bl	b9a64 <_Z16_fetch_usbserialv>
   b66be:	f002 fc72 	bl	b8fa6 <_ZN5Print7printlnEv>
  Serial.println();
   b66c2:	f003 f9cf 	bl	b9a64 <_Z16_fetch_usbserialv>
   b66c6:	f002 fc6e 	bl	b8fa6 <_ZN5Print7printlnEv>
  delay(500);
   b66ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
   b66ce:	b03b      	add	sp, #236	; 0xec
   b66d0:	ecbd 8b04 	vpop	{d8-d9}
   b66d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  delay(500);
   b66d8:	f001 b882 	b.w	b77e0 <delay>

000b66dc <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b66dc:	b510      	push	{r4, lr}
   b66de:	4604      	mov	r4, r0
   b66e0:	f003 f8f2 	bl	b98c8 <_ZN9TCPClientC1Ev>
{

}
   b66e4:	4620      	mov	r0, r4
   b66e6:	bd10      	pop	{r4, pc}

000b66e8 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b66e8:	b538      	push	{r3, r4, r5, lr}
   b66ea:	4604      	mov	r4, r0
   b66ec:	4615      	mov	r5, r2
    client.print(aHeaderName);
   b66ee:	f002 fc53 	bl	b8f98 <_ZN5Print5printEPKc>
    client.print(": ");
   b66f2:	4905      	ldr	r1, [pc, #20]	; (b6708 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   b66f4:	4620      	mov	r0, r4
   b66f6:	f002 fc4f 	bl	b8f98 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b66fa:	4629      	mov	r1, r5
   b66fc:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b66fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
   b6702:	f002 bc5c 	b.w	b8fbe <_ZN5Print7printlnEPKc>
   b6706:	bf00      	nop
   b6708:	000bcefb 	.word	0x000bcefb

000b670c <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b670c:	b538      	push	{r3, r4, r5, lr}
   b670e:	4605      	mov	r5, r0
   b6710:	4614      	mov	r4, r2
    client.print(aHeaderName);
   b6712:	f002 fc41 	bl	b8f98 <_ZN5Print5printEPKc>
    client.print(": ");
   b6716:	490b      	ldr	r1, [pc, #44]	; (b6744 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   b6718:	4628      	mov	r0, r5
   b671a:	f002 fc3d 	bl	b8f98 <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
   b671e:	2c00      	cmp	r4, #0
   b6720:	da0d      	bge.n	b673e <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
   b6722:	212d      	movs	r1, #45	; 0x2d
   b6724:	4628      	mov	r0, r5
   b6726:	f002 fc3b 	bl	b8fa0 <_ZN5Print5printEc>
            val = -n;
   b672a:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b672c:	4628      	mov	r0, r5
   b672e:	220a      	movs	r2, #10
   b6730:	f002 fc4f 	bl	b8fd2 <_ZN5Print11printNumberEmh>
        n += println();
   b6734:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b6736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b673a:	f002 bc34 	b.w	b8fa6 <_ZN5Print7printlnEv>
            val = n;
   b673e:	4621      	mov	r1, r4
   b6740:	e7f4      	b.n	b672c <_ZN10HttpClient10sendHeaderEPKci+0x20>
   b6742:	bf00      	nop
   b6744:	000bcefb 	.word	0x000bcefb

000b6748 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b6748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b674c:	460e      	mov	r6, r1
   b674e:	b091      	sub	sp, #68	; 0x44
   b6750:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b6752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6756:	6013      	str	r3, [r2, #0]
{
   b6758:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b675a:	2100      	movs	r1, #0
   b675c:	4630      	mov	r0, r6
   b675e:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b6762:	4617      	mov	r7, r2
   b6764:	f002 fd71 	bl	b924a <_ZNK6String6equalsEPKc>
   b6768:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b676c:	4603      	mov	r3, r0
   b676e:	b998      	cbnz	r0, b6798 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	const char * c_str() const { return buffer; }
   b6770:	f1be 0f00 	cmp.w	lr, #0
   b6774:	bf14      	ite	ne
   b6776:	4672      	movne	r2, lr
   b6778:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b677a:	6831      	ldr	r1, [r6, #0]
   b677c:	b292      	uxth	r2, r2
   b677e:	4620      	mov	r0, r4
   b6780:	f002 fea2 	bl	b94c8 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b6784:	1e05      	subs	r5, r0, #0
   b6786:	bf18      	it	ne
   b6788:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   b678a:	b9c5      	cbnz	r5, b67be <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   b678c:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b678e:	b011      	add	sp, #68	; 0x44
   b6790:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b6794:	f003 b84e 	b.w	b9834 <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b6798:	4b76      	ldr	r3, [pc, #472]	; (b6974 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
   b679a:	930a      	str	r3, [sp, #40]	; 0x28
   b679c:	f106 0c14 	add.w	ip, r6, #20
   b67a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b67a4:	ad0b      	add	r5, sp, #44	; 0x2c
   b67a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b67a8:	f8dc 3000 	ldr.w	r3, [ip]
   b67ac:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b67ae:	fa1f f28e 	uxth.w	r2, lr
   b67b2:	2300      	movs	r3, #0
   b67b4:	a90a      	add	r1, sp, #40	; 0x28
   b67b6:	4620      	mov	r0, r4
   b67b8:	f002 ff66 	bl	b9688 <_ZN9TCPClient7connectE9IPAddresstm>
   b67bc:	e7e2      	b.n	b6784 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
   b67be:	4649      	mov	r1, r9
   b67c0:	4620      	mov	r0, r4
   b67c2:	f002 fbe9 	bl	b8f98 <_ZN5Print5printEPKc>
    client.print(" ");
   b67c6:	496c      	ldr	r1, [pc, #432]	; (b6978 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   b67c8:	4620      	mov	r0, r4
   b67ca:	f002 fbe5 	bl	b8f98 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b67ce:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b67d0:	4620      	mov	r0, r4
   b67d2:	f002 fbe1 	bl	b8f98 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b67d6:	4969      	ldr	r1, [pc, #420]	; (b697c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   b67d8:	4620      	mov	r0, r4
   b67da:	f002 fbdd 	bl	b8f98 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b67de:	4968      	ldr	r1, [pc, #416]	; (b6980 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
   b67e0:	4a68      	ldr	r2, [pc, #416]	; (b6984 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
   b67e2:	4620      	mov	r0, r4
   b67e4:	f7ff ff80 	bl	b66e8 <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b67e8:	2100      	movs	r1, #0
   b67ea:	4630      	mov	r0, r6
   b67ec:	f002 fd2d 	bl	b924a <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b67f0:	b920      	cbnz	r0, b67fc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   b67f2:	6832      	ldr	r2, [r6, #0]
   b67f4:	4964      	ldr	r1, [pc, #400]	; (b6988 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
   b67f6:	4620      	mov	r0, r4
   b67f8:	f7ff ff76 	bl	b66e8 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b67fc:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b6800:	2100      	movs	r1, #0
   b6802:	4650      	mov	r0, sl
   b6804:	f002 fd21 	bl	b924a <_ZNK6String6equalsEPKc>
   b6808:	b928      	cbnz	r0, b6816 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
   b680a:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b680c:	495f      	ldr	r1, [pc, #380]	; (b698c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
   b680e:	4620      	mov	r0, r4
   b6810:	f7ff ff7c 	bl	b670c <_ZN10HttpClient10sendHeaderEPKci>
   b6814:	e006      	b.n	b6824 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b6816:	495e      	ldr	r1, [pc, #376]	; (b6990 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
   b6818:	4648      	mov	r0, r9
   b681a:	f004 fb3f 	bl	bae9c <strcmp>
   b681e:	4602      	mov	r2, r0
   b6820:	2800      	cmp	r0, #0
   b6822:	d0f3      	beq.n	b680c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
   b6824:	f1b8 0f00 	cmp.w	r8, #0
   b6828:	d00e      	beq.n	b6848 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
   b682a:	f8d8 1000 	ldr.w	r1, [r8]
   b682e:	b159      	cbz	r1, b6848 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
   b6830:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
   b6834:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b6836:	b122      	cbz	r2, b6842 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
   b6838:	f7ff ff56 	bl	b66e8 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b683c:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
   b6840:	e7f3      	b.n	b682a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
   b6842:	f002 fbbc 	bl	b8fbe <_ZN5Print7printlnEPKc>
}
   b6846:	e7f9      	b.n	b683c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
   b6848:	4620      	mov	r0, r4
   b684a:	f002 fbac 	bl	b8fa6 <_ZN5Print7printlnEv>
    client.flush();
   b684e:	4620      	mov	r0, r4
   b6850:	f002 fd9a 	bl	b9388 <_ZN9TCPClient5flushEv>
   b6854:	2100      	movs	r1, #0
   b6856:	4650      	mov	r0, sl
   b6858:	f002 fcf7 	bl	b924a <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b685c:	b918      	cbnz	r0, b6866 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
   b685e:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b6860:	4620      	mov	r0, r4
   b6862:	f002 fbac 	bl	b8fbe <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b6866:	f104 0a1c 	add.w	sl, r4, #28
   b686a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
   b686e:	2100      	movs	r1, #0
   b6870:	4650      	mov	r0, sl
   b6872:	f004 fadc 	bl	bae2e <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6876:	f000 fd97 	bl	b73a8 <HAL_Timer_Get_Milli_Seconds>
   b687a:	9001      	str	r0, [sp, #4]
   b687c:	f000 fd94 	bl	b73a8 <HAL_Timer_Get_Milli_Seconds>
    bool error = false;
   b6880:	f04f 0800 	mov.w	r8, #0
    unsigned int bufferPosition = 0;
   b6884:	4646      	mov	r6, r8
    } while (client.connected() && !timeout && !error);
   b6886:	f241 3b88 	movw	fp, #5000	; 0x1388
        while (client.available()) {
   b688a:	4620      	mov	r0, r4
   b688c:	f002 ff78 	bl	b9780 <_ZN9TCPClient9availableEv>
   b6890:	b1e8      	cbz	r0, b68ce <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x186>
            char c = client.read();
   b6892:	4620      	mov	r0, r4
   b6894:	f002 fd5e 	bl	b9354 <_ZN9TCPClient4readEv>
   b6898:	4681      	mov	r9, r0
   b689a:	f000 fd85 	bl	b73a8 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b689e:	f242 73fe 	movw	r3, #10238	; 0x27fe
   b68a2:	429e      	cmp	r6, r3
   b68a4:	9001      	str	r0, [sp, #4]
   b68a6:	d804      	bhi.n	b68b2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = c;
   b68a8:	19a3      	adds	r3, r4, r6
            char c = client.read();
   b68aa:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
   b68ae:	3601      	adds	r6, #1
        while (client.available()) {
   b68b0:	e7eb      	b.n	b688a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b68b2:	f242 73ff 	movw	r3, #10239	; 0x27ff
   b68b6:	429e      	cmp	r6, r3
   b68b8:	d1f9      	bne.n	b68ae <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b68ba:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
   b68be:	2200      	movs	r2, #0
   b68c0:	f883 281b 	strb.w	r2, [r3, #2075]	; 0x81b
                client.stop();
   b68c4:	4620      	mov	r0, r4
   b68c6:	f002 ffb5 	bl	b9834 <_ZN9TCPClient4stopEv>
                error = true;
   b68ca:	46a8      	mov	r8, r5
   b68cc:	e7ef      	b.n	b68ae <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b68ce:	19a3      	adds	r3, r4, r6
   b68d0:	7718      	strb	r0, [r3, #28]
   b68d2:	f000 fd69 	bl	b73a8 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b68d6:	9b01      	ldr	r3, [sp, #4]
   b68d8:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b68dc:	f1b8 0f00 	cmp.w	r8, #0
   b68e0:	d104      	bne.n	b68ec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
   b68e2:	45d9      	cmp	r9, fp
   b68e4:	d802      	bhi.n	b68ec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
            delay(200);
   b68e6:	20c8      	movs	r0, #200	; 0xc8
   b68e8:	f000 ff7a 	bl	b77e0 <delay>
    } while (client.connected() && !timeout && !error);
   b68ec:	4620      	mov	r0, r4
   b68ee:	f002 fe69 	bl	b95c4 <_ZN9TCPClient9connectedEv>
   b68f2:	b120      	cbz	r0, b68fe <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b68f4:	45d9      	cmp	r9, fp
   b68f6:	d802      	bhi.n	b68fe <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b68f8:	f1b8 0f00 	cmp.w	r8, #0
   b68fc:	d0c5      	beq.n	b688a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
    client.stop();
   b68fe:	4620      	mov	r0, r4
   b6900:	f002 ff98 	bl	b9834 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b6904:	4651      	mov	r1, sl
   b6906:	a802      	add	r0, sp, #8
   b6908:	f002 fc03 	bl	b9112 <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b690c:	230c      	movs	r3, #12
   b690e:	2209      	movs	r2, #9
   b6910:	a902      	add	r1, sp, #8
   b6912:	a806      	add	r0, sp, #24
   b6914:	f002 fcbe 	bl	b9294 <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b6918:	491e      	ldr	r1, [pc, #120]	; (b6994 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x24c>)
   b691a:	a80a      	add	r0, sp, #40	; 0x28
   b691c:	f002 fbf9 	bl	b9112 <_ZN6StringC1EPK19__FlashStringHelper>
   b6920:	a90a      	add	r1, sp, #40	; 0x28
   b6922:	a802      	add	r0, sp, #8
   b6924:	f002 fcb2 	bl	b928c <_ZNK6String7indexOfERKS_>
   b6928:	4604      	mov	r4, r0
   b692a:	a80a      	add	r0, sp, #40	; 0x28
   b692c:	f002 fba6 	bl	b907c <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b6930:	1c63      	adds	r3, r4, #1
   b6932:	d108      	bne.n	b6946 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fe>
    String statusCode = raw_response.substring(9,12);
   b6934:	a806      	add	r0, sp, #24
   b6936:	f002 fba1 	bl	b907c <_ZN6StringD1Ev>
    String raw_response(buffer);
   b693a:	a802      	add	r0, sp, #8
   b693c:	f002 fb9e 	bl	b907c <_ZN6StringD1Ev>
}
   b6940:	b011      	add	sp, #68	; 0x44
   b6942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aResponse.body = "";
   b6946:	1d3d      	adds	r5, r7, #4
   b6948:	4913      	ldr	r1, [pc, #76]	; (b6998 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x250>)
   b694a:	4628      	mov	r0, r5
   b694c:	f002 fc0f 	bl	b916e <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b6950:	1d22      	adds	r2, r4, #4
   b6952:	a902      	add	r1, sp, #8
   b6954:	a80a      	add	r0, sp, #40	; 0x28
   b6956:	f002 fcbd 	bl	b92d4 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b695a:	a90a      	add	r1, sp, #40	; 0x28
   b695c:	4628      	mov	r0, r5
   b695e:	f002 fc42 	bl	b91e6 <_ZN6String6concatERKS_>
   b6962:	a80a      	add	r0, sp, #40	; 0x28
   b6964:	f002 fb8a 	bl	b907c <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b6968:	9806      	ldr	r0, [sp, #24]
   b696a:	f004 fa20 	bl	badae <atoi>
   b696e:	6038      	str	r0, [r7, #0]
   b6970:	e7e0      	b.n	b6934 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ec>
   b6972:	bf00      	nop
   b6974:	000bd5ac 	.word	0x000bd5ac
   b6978:	000bd109 	.word	0x000bd109
   b697c:	000bd2f0 	.word	0x000bd2f0
   b6980:	000bd302 	.word	0x000bd302
   b6984:	000bd2fc 	.word	0x000bd2fc
   b6988:	000bd30d 	.word	0x000bd30d
   b698c:	000bd312 	.word	0x000bd312
   b6990:	000bd321 	.word	0x000bd321
   b6994:	000bd326 	.word	0x000bd326
   b6998:	000bd32a 	.word	0x000bd32a

000b699c <_ZN13JsonReferenceD1Ev>:
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
}
   b699c:	4770      	bx	lr

000b699e <_ZN13JsonReferenceD0Ev>:
JsonReference::~JsonReference() {
   b699e:	b510      	push	{r4, lr}
}
   b69a0:	210c      	movs	r1, #12
JsonReference::~JsonReference() {
   b69a2:	4604      	mov	r4, r0
}
   b69a4:	f7fd fb7d 	bl	b40a2 <_ZdlPvj>
   b69a8:	4620      	mov	r0, r4
   b69aa:	bd10      	pop	{r4, pc}

000b69ac <_ZN10JsonBufferD1Ev>:
JsonBuffer::~JsonBuffer() {
   b69ac:	b510      	push	{r4, lr}
   b69ae:	4b05      	ldr	r3, [pc, #20]	; (b69c4 <_ZN10JsonBufferD1Ev+0x18>)
   b69b0:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b69b2:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b69b4:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b69b6:	b91b      	cbnz	r3, b69c0 <_ZN10JsonBufferD1Ev+0x14>
   b69b8:	6840      	ldr	r0, [r0, #4]
   b69ba:	b108      	cbz	r0, b69c0 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b69bc:	f000 fec8 	bl	b7750 <free>
}
   b69c0:	4620      	mov	r0, r4
   b69c2:	bd10      	pop	{r4, pc}
   b69c4:	000bd338 	.word	0x000bd338

000b69c8 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b69c8:	b510      	push	{r4, lr}
   b69ca:	4604      	mov	r4, r0
}
   b69cc:	f7ff ffee 	bl	b69ac <_ZN10JsonBufferD1Ev>
   b69d0:	4620      	mov	r0, r4
   b69d2:	2114      	movs	r1, #20
   b69d4:	f7fd fb65 	bl	b40a2 <_ZdlPvj>
   b69d8:	4620      	mov	r0, r4
   b69da:	bd10      	pop	{r4, pc}

000b69dc <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b69dc:	b510      	push	{r4, lr}
   b69de:	4b07      	ldr	r3, [pc, #28]	; (b69fc <_ZN10JsonParserD1Ev+0x20>)
   b69e0:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b69e2:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b69e4:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b69e6:	b91b      	cbnz	r3, b69f0 <_ZN10JsonParserD1Ev+0x14>
   b69e8:	6940      	ldr	r0, [r0, #20]
   b69ea:	b108      	cbz	r0, b69f0 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b69ec:	f000 feb0 	bl	b7750 <free>
JsonParser::~JsonParser() {
   b69f0:	4620      	mov	r0, r4
   b69f2:	f7ff ffdb 	bl	b69ac <_ZN10JsonBufferD1Ev>
}
   b69f6:	4620      	mov	r0, r4
   b69f8:	bd10      	pop	{r4, pc}
   b69fa:	bf00      	nop
   b69fc:	000bd348 	.word	0x000bd348

000b6a00 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b6a00:	b510      	push	{r4, lr}
   b6a02:	4604      	mov	r4, r0
}
   b6a04:	f7ff ffea 	bl	b69dc <_ZN10JsonParserD1Ev>
   b6a08:	4620      	mov	r0, r4
   b6a0a:	212c      	movs	r1, #44	; 0x2c
   b6a0c:	f7fd fb49 	bl	b40a2 <_ZdlPvj>
   b6a10:	4620      	mov	r0, r4
   b6a12:	bd10      	pop	{r4, pc}

000b6a14 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b6a14:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b6a16:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b6a18:	4604      	mov	r4, r0
   b6a1a:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b6a1c:	b10b      	cbz	r3, b6a22 <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b6a1e:	2000      	movs	r0, #0
}
   b6a20:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b6a22:	6840      	ldr	r0, [r0, #4]
   b6a24:	b138      	cbz	r0, b6a36 <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b6a26:	f000 fe9b 	bl	b7760 <realloc>
		if (newBuffer) {
   b6a2a:	2800      	cmp	r0, #0
   b6a2c:	d0f7      	beq.n	b6a1e <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b6a2e:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b6a32:	2001      	movs	r0, #1
   b6a34:	e7f4      	b.n	b6a20 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b6a36:	4608      	mov	r0, r1
   b6a38:	f000 fe82 	bl	b7740 <malloc>
   b6a3c:	e7f5      	b.n	b6a2a <_ZN10JsonBuffer8allocateEj+0x16>

000b6a3e <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b6a3e:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b6a40:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b6a42:	460e      	mov	r6, r1
   b6a44:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b6a46:	18d1      	adds	r1, r2, r3
   b6a48:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b6a4a:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b6a4c:	b172      	cbz	r2, b6a6c <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b6a4e:	6882      	ldr	r2, [r0, #8]
   b6a50:	428a      	cmp	r2, r1
   b6a52:	d30b      	bcc.n	b6a6c <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b6a54:	6860      	ldr	r0, [r4, #4]
   b6a56:	68e3      	ldr	r3, [r4, #12]
   b6a58:	462a      	mov	r2, r5
   b6a5a:	4631      	mov	r1, r6
   b6a5c:	4418      	add	r0, r3
   b6a5e:	f004 f9be 	bl	badde <memcpy>
	offset += dataLen;
   b6a62:	68e2      	ldr	r2, [r4, #12]
   b6a64:	442a      	add	r2, r5
   b6a66:	60e2      	str	r2, [r4, #12]
	return true;
   b6a68:	2001      	movs	r0, #1
}
   b6a6a:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b6a6c:	4620      	mov	r0, r4
   b6a6e:	f7ff ffd1 	bl	b6a14 <_ZN10JsonBuffer8allocateEj>
   b6a72:	2800      	cmp	r0, #0
   b6a74:	d1ee      	bne.n	b6a54 <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b6a76:	e7f8      	b.n	b6a6a <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b6a78 <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b6a78:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b6a7a:	2100      	movs	r1, #0
   b6a7c:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b6a7e:	b123      	cbz	r3, b6a8a <_ZN10JsonBuffer5clearEv+0x12>
   b6a80:	6882      	ldr	r2, [r0, #8]
   b6a82:	b112      	cbz	r2, b6a8a <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b6a84:	4618      	mov	r0, r3
   b6a86:	f004 b9d2 	b.w	bae2e <memset>
}
   b6a8a:	4770      	bx	lr

000b6a8c <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b6a8c:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b6a8e:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b6a92:	2200      	movs	r2, #0
   b6a94:	60c2      	str	r2, [r0, #12]
   b6a96:	2201      	movs	r2, #1
   b6a98:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b6a9a:	6143      	str	r3, [r0, #20]
   b6a9c:	4a02      	ldr	r2, [pc, #8]	; (b6aa8 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b6a9e:	9b02      	ldr	r3, [sp, #8]
   b6aa0:	6002      	str	r2, [r0, #0]
   b6aa2:	61c3      	str	r3, [r0, #28]
}
   b6aa4:	bd10      	pop	{r4, pc}
   b6aa6:	bf00      	nop
   b6aa8:	000bd348 	.word	0x000bd348

000b6aac <_ZNK10JsonParser12getReferenceEv>:
	if (tokens < tokensEnd) {
   b6aac:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   b6ab0:	429a      	cmp	r2, r3
   b6ab2:	4b04      	ldr	r3, [pc, #16]	; (b6ac4 <_ZNK10JsonParser12getReferenceEv+0x18>)

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b6ab4:	bf38      	it	cc
   b6ab6:	6082      	strcc	r2, [r0, #8]
   b6ab8:	e9c0 3100 	strd	r3, r1, [r0]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b6abc:	bf24      	itt	cs
   b6abe:	2300      	movcs	r3, #0
   b6ac0:	6083      	strcs	r3, [r0, #8]
}
   b6ac2:	4770      	bx	lr
   b6ac4:	000bd358 	.word	0x000bd358

000b6ac8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b6ac8:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b6aca:	6813      	ldr	r3, [r2, #0]
   b6acc:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b6ace:	6813      	ldr	r3, [r2, #0]
   b6ad0:	f103 0410 	add.w	r4, r3, #16
   b6ad4:	6014      	str	r4, [r2, #0]
   b6ad6:	6986      	ldr	r6, [r0, #24]
   b6ad8:	42b4      	cmp	r4, r6
   b6ada:	d20a      	bcs.n	b6af2 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b6adc:	699b      	ldr	r3, [r3, #24]
   b6ade:	688c      	ldr	r4, [r1, #8]
   b6ae0:	42a3      	cmp	r3, r4
   b6ae2:	da01      	bge.n	b6ae8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b6ae4:	42ab      	cmp	r3, r5
   b6ae6:	ddf2      	ble.n	b6ace <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b6ae8:	42a3      	cmp	r3, r4
   b6aea:	bfcc      	ite	gt
   b6aec:	2000      	movgt	r0, #0
   b6aee:	2001      	movle	r0, #1
   b6af0:	e000      	b.n	b6af4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b6af2:	2000      	movs	r0, #0
}
   b6af4:	bd70      	pop	{r4, r5, r6, pc}

000b6af6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b6af6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6afa:	9d08      	ldr	r5, [sp, #32]
   b6afc:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b6afe:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b6b02:	4604      	mov	r4, r0
   b6b04:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b6b06:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b6b08:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b6b0a:	9801      	ldr	r0, [sp, #4]
   b6b0c:	69a3      	ldr	r3, [r4, #24]
   b6b0e:	4283      	cmp	r3, r0
   b6b10:	d91a      	bls.n	b6b48 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b6b12:	6882      	ldr	r2, [r0, #8]
   b6b14:	688b      	ldr	r3, [r1, #8]
   b6b16:	429a      	cmp	r2, r3
   b6b18:	da16      	bge.n	b6b48 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b6b1a:	42ae      	cmp	r6, r5
   b6b1c:	d10b      	bne.n	b6b36 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b6b1e:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b6b20:	aa01      	add	r2, sp, #4
   b6b22:	4620      	mov	r0, r4
   b6b24:	f7ff ffd0 	bl	b6ac8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b6b28:	b128      	cbz	r0, b6b36 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b6b2a:	9b01      	ldr	r3, [sp, #4]
   b6b2c:	f8c8 3000 	str.w	r3, [r8]
}
   b6b30:	b002      	add	sp, #8
   b6b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b6b36:	aa01      	add	r2, sp, #4
   b6b38:	4620      	mov	r0, r4
   b6b3a:	f7ff ffc5 	bl	b6ac8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b6b3e:	4620      	mov	r0, r4
		index++;
   b6b40:	3601      	adds	r6, #1
		skipObject(container, token);
   b6b42:	f7ff ffc1 	bl	b6ac8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b6b46:	e7e0      	b.n	b6b0a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b6b48:	2000      	movs	r0, #0
   b6b4a:	e7f1      	b.n	b6b30 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b6b4c <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>:
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b6b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6b4e:	461f      	mov	r7, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b6b50:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b6b54:	4604      	mov	r4, r0
   b6b56:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b6b58:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b6b5a:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b6b5c:	9b01      	ldr	r3, [sp, #4]
   b6b5e:	69a2      	ldr	r2, [r4, #24]
   b6b60:	429a      	cmp	r2, r3
   b6b62:	d90f      	bls.n	b6b84 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
   b6b64:	6898      	ldr	r0, [r3, #8]
   b6b66:	688a      	ldr	r2, [r1, #8]
   b6b68:	4290      	cmp	r0, r2
   b6b6a:	da0b      	bge.n	b6b84 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
		if (desiredIndex == index) {
   b6b6c:	42b5      	cmp	r5, r6
   b6b6e:	d103      	bne.n	b6b78 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x2c>
			value = token;
   b6b70:	603b      	str	r3, [r7, #0]
			return true;
   b6b72:	2001      	movs	r0, #1
}
   b6b74:	b003      	add	sp, #12
   b6b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		skipObject(container, token);
   b6b78:	aa01      	add	r2, sp, #4
   b6b7a:	4620      	mov	r0, r4
		index++;
   b6b7c:	3501      	adds	r5, #1
		skipObject(container, token);
   b6b7e:	f7ff ffa3 	bl	b6ac8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b6b82:	e7eb      	b.n	b6b5c <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x10>
	return false;
   b6b84:	2000      	movs	r0, #0
   b6b86:	e7f5      	b.n	b6b74 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x28>

000b6b88 <_ZNK13JsonReference5indexEj>:
	else {
		return JsonReference(parser);
	}
}

JsonReference JsonReference::index(size_t index) const {
   b6b88:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6b8a:	460d      	mov	r5, r1
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b6b8c:	6889      	ldr	r1, [r1, #8]
   b6b8e:	4e0a      	ldr	r6, [pc, #40]	; (b6bb8 <_ZNK13JsonReference5indexEj+0x30>)
JsonReference JsonReference::index(size_t index) const {
   b6b90:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b6b92:	b161      	cbz	r1, b6bae <_ZNK13JsonReference5indexEj+0x26>
   b6b94:	6868      	ldr	r0, [r5, #4]
   b6b96:	ab01      	add	r3, sp, #4
   b6b98:	f7ff ffd8 	bl	b6b4c <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>
   b6b9c:	b138      	cbz	r0, b6bae <_ZNK13JsonReference5indexEj+0x26>
		return JsonReference(parser, newToken);
   b6b9e:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b6ba0:	e9c4 6300 	strd	r6, r3, [r4]
   b6ba4:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b6ba6:	60a3      	str	r3, [r4, #8]
	}
	else {
		return JsonReference(parser);
	}
}
   b6ba8:	4620      	mov	r0, r4
   b6baa:	b002      	add	sp, #8
   b6bac:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b6bae:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b6bb0:	e9c4 6300 	strd	r6, r3, [r4]
   b6bb4:	2300      	movs	r3, #0
   b6bb6:	e7f6      	b.n	b6ba6 <_ZNK13JsonReference5indexEj+0x1e>
   b6bb8:	000bd358 	.word	0x000bd358

000b6bbc <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   b6bbc:	b510      	push	{r4, lr}
   b6bbe:	4604      	mov	r4, r0
	if (str) {
   b6bc0:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b6bc2:	460b      	mov	r3, r1
	if (str) {
   b6bc4:	b128      	cbz	r0, b6bd2 <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b6bc6:	f002 fb12 	bl	b91ee <_ZN6String6concatEc>
	}
	else {
		if (buf && length < (bufLen - 1)) {
			buf[length] = ch;
		}
		length++;
   b6bca:	68e3      	ldr	r3, [r4, #12]
   b6bcc:	3301      	adds	r3, #1
   b6bce:	60e3      	str	r3, [r4, #12]
	}
}
   b6bd0:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b6bd2:	6860      	ldr	r0, [r4, #4]
   b6bd4:	2800      	cmp	r0, #0
   b6bd6:	d0f8      	beq.n	b6bca <_ZN16JsonParserString6appendEc+0xe>
   b6bd8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b6bdc:	3a01      	subs	r2, #1
   b6bde:	428a      	cmp	r2, r1
			buf[length] = ch;
   b6be0:	bf88      	it	hi
   b6be2:	5443      	strbhi	r3, [r0, r1]
   b6be4:	e7f1      	b.n	b6bca <_ZN16JsonParserString6appendEc+0xe>

000b6be6 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b6be6:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b6be8:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b6bea:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6bec:	4608      	mov	r0, r1
		str.append((char)unicode);
   b6bee:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b6bf0:	d804      	bhi.n	b6bfc <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b6bf2:	b003      	add	sp, #12
   b6bf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b6bf8:	f7ff bfe0 	b.w	b6bbc <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b6bfc:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b6c00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b6c04:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b6c08:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b6c0c:	d207      	bcs.n	b6c1e <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b6c0e:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b6c12:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b6c14:	f7ff ffd2 	bl	b6bbc <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b6c18:	9801      	ldr	r0, [sp, #4]
   b6c1a:	4621      	mov	r1, r4
   b6c1c:	e7e9      	b.n	b6bf2 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b6c1e:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b6c20:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b6c24:	9001      	str	r0, [sp, #4]
   b6c26:	f7ff ffc9 	bl	b6bbc <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b6c2a:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b6c2e:	9801      	ldr	r0, [sp, #4]
   b6c30:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b6c34:	e7ee      	b.n	b6c14 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>
	...

000b6c38 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b6c38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b6c3c:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b6c3e:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b6c40:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b6d10 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b6c44:	4680      	mov	r8, r0
   b6c46:	460f      	mov	r7, r1
   b6c48:	4615      	mov	r5, r2
			escape = false;
   b6c4a:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b6c4c:	68b8      	ldr	r0, [r7, #8]
   b6c4e:	42b0      	cmp	r0, r6
   b6c50:	dd5a      	ble.n	b6d08 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b6c52:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b6c56:	5d99      	ldrb	r1, [r3, r6]
   b6c58:	199a      	adds	r2, r3, r6
		if (escape) {
   b6c5a:	2c00      	cmp	r4, #0
   b6c5c:	d04b      	beq.n	b6cf6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b6c5e:	2975      	cmp	r1, #117	; 0x75
   b6c60:	d805      	bhi.n	b6c6e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b6c62:	296d      	cmp	r1, #109	; 0x6d
   b6c64:	d807      	bhi.n	b6c76 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b6c66:	2962      	cmp	r1, #98	; 0x62
   b6c68:	d01e      	beq.n	b6ca8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b6c6a:	2966      	cmp	r1, #102	; 0x66
   b6c6c:	d01e      	beq.n	b6cac <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b6c6e:	4628      	mov	r0, r5
   b6c70:	f7ff ffa4 	bl	b6bbc <_ZN16JsonParserString6appendEc>
				break;
   b6c74:	e03d      	b.n	b6cf2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b6c76:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b6c7a:	2c07      	cmp	r4, #7
   b6c7c:	d8f7      	bhi.n	b6c6e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b6c7e:	f20f 0c08 	addw	ip, pc, #8
   b6c82:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b6c86:	bf00      	nop
   b6c88:	000b6cb1 	.word	0x000b6cb1
   b6c8c:	000b6c6f 	.word	0x000b6c6f
   b6c90:	000b6c6f 	.word	0x000b6c6f
   b6c94:	000b6c6f 	.word	0x000b6c6f
   b6c98:	000b6cb5 	.word	0x000b6cb5
   b6c9c:	000b6c6f 	.word	0x000b6c6f
   b6ca0:	000b6cb9 	.word	0x000b6cb9
   b6ca4:	000b6cbd 	.word	0x000b6cbd
				str.append('\b');
   b6ca8:	2108      	movs	r1, #8
   b6caa:	e7e0      	b.n	b6c6e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b6cac:	210c      	movs	r1, #12
   b6cae:	e7de      	b.n	b6c6e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b6cb0:	210a      	movs	r1, #10
   b6cb2:	e7dc      	b.n	b6c6e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b6cb4:	210d      	movs	r1, #13
   b6cb6:	e7da      	b.n	b6c6e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b6cb8:	2109      	movs	r1, #9
   b6cba:	e7d8      	b.n	b6c6e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b6cbc:	1d31      	adds	r1, r6, #4
   b6cbe:	4288      	cmp	r0, r1
   b6cc0:	dd17      	ble.n	b6cf2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b6cc2:	a902      	add	r1, sp, #8
   b6cc4:	3304      	adds	r3, #4
   b6cc6:	4433      	add	r3, r6
   b6cc8:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b6cca:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b6cce:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b6cd2:	429a      	cmp	r2, r3
   b6cd4:	d1f9      	bne.n	b6cca <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b6cd6:	aa01      	add	r2, sp, #4
   b6cd8:	4651      	mov	r1, sl
					tmp[4] = 0;
   b6cda:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b6cde:	f000 fd47 	bl	b7770 <sscanf>
   b6ce2:	2801      	cmp	r0, #1
   b6ce4:	d105      	bne.n	b6cf2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b6ce6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b6cea:	4629      	mov	r1, r5
   b6cec:	f7ff ff7b 	bl	b6be6 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b6cf0:	3605      	adds	r6, #5
			escape = false;
   b6cf2:	2400      	movs	r4, #0
   b6cf4:	e004      	b.n	b6d00 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b6cf6:	295c      	cmp	r1, #92	; 0x5c
   b6cf8:	d004      	beq.n	b6d04 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b6cfa:	4628      	mov	r0, r5
   b6cfc:	f7ff ff5e 	bl	b6bbc <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b6d00:	3601      	adds	r6, #1
   b6d02:	e7a3      	b.n	b6c4c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b6d04:	2401      	movs	r4, #1
   b6d06:	e7fb      	b.n	b6d00 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b6d08:	2001      	movs	r0, #1
   b6d0a:	b004      	add	sp, #16
   b6d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6d10:	000bd32b 	.word	0x000bd32b

000b6d14 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b6d14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6d16:	460c      	mov	r4, r1
   b6d18:	4606      	mov	r6, r0
	result = "";
   b6d1a:	490c      	ldr	r1, [pc, #48]	; (b6d4c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b6d1c:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b6d1e:	4615      	mov	r5, r2
	result = "";
   b6d20:	f002 fa25 	bl	b916e <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b6d24:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b6d28:	1ac9      	subs	r1, r1, r3
   b6d2a:	3101      	adds	r1, #1
   b6d2c:	4628      	mov	r0, r5
   b6d2e:	f002 f9c3 	bl	b90b8 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b6d32:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b6d34:	466a      	mov	r2, sp
   b6d36:	4621      	mov	r1, r4
   b6d38:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b6d3a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b6d3e:	9500      	str	r5, [sp, #0]
   b6d40:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b6d42:	f7ff ff79 	bl	b6c38 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b6d46:	b004      	add	sp, #16
   b6d48:	bd70      	pop	{r4, r5, r6, pc}
   b6d4a:	bf00      	nop
   b6d4c:	000bd32a 	.word	0x000bd32a

000b6d50 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b6d50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6d54:	b089      	sub	sp, #36	; 0x24
   b6d56:	4605      	mov	r5, r0
   b6d58:	4688      	mov	r8, r1
	String keyName;
   b6d5a:	a804      	add	r0, sp, #16
   b6d5c:	4912      	ldr	r1, [pc, #72]	; (b6da8 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b6d5e:	4616      	mov	r6, r2
   b6d60:	4699      	mov	r9, r3
	String keyName;
   b6d62:	f002 f9d6 	bl	b9112 <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b6d66:	2700      	movs	r7, #0
   b6d68:	9700      	str	r7, [sp, #0]
   b6d6a:	464b      	mov	r3, r9
   b6d6c:	aa03      	add	r2, sp, #12
   b6d6e:	4641      	mov	r1, r8
   b6d70:	4628      	mov	r0, r5
   b6d72:	f7ff fec0 	bl	b6af6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b6d76:	4604      	mov	r4, r0
   b6d78:	b170      	cbz	r0, b6d98 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b6d7a:	9903      	ldr	r1, [sp, #12]
   b6d7c:	aa04      	add	r2, sp, #16
   b6d7e:	4628      	mov	r0, r5
   b6d80:	f7ff ffc8 	bl	b6d14 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b6d84:	4604      	mov	r4, r0
   b6d86:	b908      	cbnz	r0, b6d8c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b6d88:	3701      	adds	r7, #1
   b6d8a:	e7ed      	b.n	b6d68 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b6d8c:	4631      	mov	r1, r6
   b6d8e:	a804      	add	r0, sp, #16
   b6d90:	f002 fa5b 	bl	b924a <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b6d94:	2800      	cmp	r0, #0
   b6d96:	d0f7      	beq.n	b6d88 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b6d98:	a804      	add	r0, sp, #16
   b6d9a:	f002 f96f 	bl	b907c <_ZN6StringD1Ev>
}
   b6d9e:	4620      	mov	r0, r4
   b6da0:	b009      	add	sp, #36	; 0x24
   b6da2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b6da6:	bf00      	nop
   b6da8:	000bd32a 	.word	0x000bd32a

000b6dac <_ZNK13JsonReference3keyEPKc>:
JsonReference JsonReference::key(const char *name) const {
   b6dac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6dae:	460d      	mov	r5, r1
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b6db0:	6889      	ldr	r1, [r1, #8]
   b6db2:	4e0a      	ldr	r6, [pc, #40]	; (b6ddc <_ZNK13JsonReference3keyEPKc+0x30>)
JsonReference JsonReference::key(const char *name) const {
   b6db4:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b6db6:	b161      	cbz	r1, b6dd2 <_ZNK13JsonReference3keyEPKc+0x26>
   b6db8:	6868      	ldr	r0, [r5, #4]
   b6dba:	ab01      	add	r3, sp, #4
   b6dbc:	f7ff ffc8 	bl	b6d50 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b6dc0:	b138      	cbz	r0, b6dd2 <_ZNK13JsonReference3keyEPKc+0x26>
		return JsonReference(parser, newToken);
   b6dc2:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b6dc4:	e9c4 6300 	strd	r6, r3, [r4]
   b6dc8:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b6dca:	60a3      	str	r3, [r4, #8]
}
   b6dcc:	4620      	mov	r0, r4
   b6dce:	b002      	add	sp, #8
   b6dd0:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b6dd2:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b6dd4:	e9c4 6300 	strd	r6, r3, [r4]
   b6dd8:	2300      	movs	r3, #0
   b6dda:	e7f6      	b.n	b6dca <_ZNK13JsonReference3keyEPKc+0x1e>
   b6ddc:	000bd358 	.word	0x000bd358

000b6de0 <_ZNK13JsonReference11valueStringEv>:
String JsonReference::valueString() const {
   b6de0:	b538      	push	{r3, r4, r5, lr}
   b6de2:	460d      	mov	r5, r1
	String result;
   b6de4:	4905      	ldr	r1, [pc, #20]	; (b6dfc <_ZNK13JsonReference11valueStringEv+0x1c>)
String JsonReference::valueString() const {
   b6de6:	4604      	mov	r4, r0
	String result;
   b6de8:	f002 f993 	bl	b9112 <_ZN6StringC1EPK19__FlashStringHelper>
	 * There are also type-specific versions like valueBool that return the value, instead of having to pass an object
	 * to hold the value, as in this call.
	 */
	template<class T>
	bool value(T &result) const {
		if (token && parser->getTokenValue(token, result)) {
   b6dec:	68a9      	ldr	r1, [r5, #8]
   b6dee:	b119      	cbz	r1, b6df8 <_ZNK13JsonReference11valueStringEv+0x18>
   b6df0:	6868      	ldr	r0, [r5, #4]
   b6df2:	4622      	mov	r2, r4
   b6df4:	f7ff ff8e 	bl	b6d14 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
}
   b6df8:	4620      	mov	r0, r4
   b6dfa:	bd38      	pop	{r3, r4, r5, pc}
   b6dfc:	000bd32a 	.word	0x000bd32a

000b6e00 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b6e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b6e04:	6844      	ldr	r4, [r0, #4]
   b6e06:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b6e0a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b6e0e:	f8d0 e000 	ldr.w	lr, [r0]
   b6e12:	4596      	cmp	lr, r2
   b6e14:	f080 81b9 	bcs.w	b718a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b6e18:	f811 800e 	ldrb.w	r8, [r1, lr]
   b6e1c:	f1b8 0f00 	cmp.w	r8, #0
   b6e20:	f000 81b3 	beq.w	b718a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b6e24:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b6e28:	f000 8098 	beq.w	b6f5c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b6e2c:	d833      	bhi.n	b6e96 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b6e2e:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b6e32:	f000 80a6 	beq.w	b6f82 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b6e36:	d810      	bhi.n	b6e5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b6e38:	f1a8 0809 	sub.w	r8, r8, #9
   b6e3c:	fa5f f888 	uxtb.w	r8, r8
   b6e40:	f1b8 0f17 	cmp.w	r8, #23
   b6e44:	d80d      	bhi.n	b6e62 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b6e46:	4d9f      	ldr	r5, [pc, #636]	; (b70c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b6e48:	fa0c f808 	lsl.w	r8, ip, r8
   b6e4c:	ea18 0f05 	tst.w	r8, r5
   b6e50:	d007      	beq.n	b6e62 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b6e52:	6805      	ldr	r5, [r0, #0]
   b6e54:	3501      	adds	r5, #1
   b6e56:	6005      	str	r5, [r0, #0]
   b6e58:	e7d9      	b.n	b6e0e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b6e5a:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b6e5e:	f000 8133 	beq.w	b70c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b6e62:	f8d0 8000 	ldr.w	r8, [r0]
   b6e66:	4542      	cmp	r2, r8
   b6e68:	d90e      	bls.n	b6e88 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b6e6a:	f811 5008 	ldrb.w	r5, [r1, r8]
   b6e6e:	b15d      	cbz	r5, b6e88 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b6e70:	2d3a      	cmp	r5, #58	; 0x3a
   b6e72:	f200 8169 	bhi.w	b7148 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b6e76:	2d1f      	cmp	r5, #31
   b6e78:	f200 8151 	bhi.w	b711e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b6e7c:	2d0a      	cmp	r5, #10
   b6e7e:	f200 8160 	bhi.w	b7142 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b6e82:	2d08      	cmp	r5, #8
   b6e84:	f240 8156 	bls.w	b7134 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b6e88:	2b00      	cmp	r3, #0
   b6e8a:	f040 8162 	bne.w	b7152 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b6e8e:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b6e92:	6005      	str	r5, [r0, #0]
   b6e94:	e0a5      	b.n	b6fe2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b6e96:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b6e9a:	d037      	beq.n	b6f0c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b6e9c:	d82e      	bhi.n	b6efc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b6e9e:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b6ea2:	d033      	beq.n	b6f0c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b6ea4:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b6ea8:	d1db      	bne.n	b6e62 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b6eaa:	2b00      	cmp	r3, #0
   b6eac:	d0d1      	beq.n	b6e52 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b6eae:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b6eb2:	6845      	ldr	r5, [r0, #4]
   b6eb4:	3d01      	subs	r5, #1
   b6eb6:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b6eba:	2d00      	cmp	r5, #0
   b6ebc:	db55      	blt.n	b6f6a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b6ebe:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b6ec2:	3701      	adds	r7, #1
   b6ec4:	d04d      	beq.n	b6f62 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b6ec6:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b6eca:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b6ece:	d148      	bne.n	b6f62 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b6ed0:	f898 b000 	ldrb.w	fp, [r8]
   b6ed4:	45cb      	cmp	fp, r9
   b6ed6:	d14b      	bne.n	b6f70 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b6ed8:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b6edc:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b6ee0:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b6ee4:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b6ee8:	f8de 7004 	ldr.w	r7, [lr, #4]
   b6eec:	3701      	adds	r7, #1
   b6eee:	d042      	beq.n	b6f76 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b6ef0:	f8de 7008 	ldr.w	r7, [lr, #8]
   b6ef4:	3701      	adds	r7, #1
   b6ef6:	d13e      	bne.n	b6f76 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b6ef8:	6085      	str	r5, [r0, #8]
				break;
   b6efa:	e7aa      	b.n	b6e52 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b6efc:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b6f00:	d1af      	bne.n	b6e62 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b6f02:	2b00      	cmp	r3, #0
   b6f04:	d0a5      	beq.n	b6e52 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b6f06:	f04f 0901 	mov.w	r9, #1
   b6f0a:	e7d2      	b.n	b6eb2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b6f0c:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b6f0e:	2b00      	cmp	r3, #0
   b6f10:	d09f      	beq.n	b6e52 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b6f12:	6845      	ldr	r5, [r0, #4]
   b6f14:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b6f16:	42af      	cmp	r7, r5
   b6f18:	d94a      	bls.n	b6fb0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b6f1a:	f105 0e01 	add.w	lr, r5, #1
   b6f1e:	f8c0 e004 	str.w	lr, [r0, #4]
   b6f22:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b6f26:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b6f2a:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b6f2e:	2500      	movs	r5, #0
   b6f30:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b6f34:	6885      	ldr	r5, [r0, #8]
   b6f36:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b6f38:	bf1f      	itttt	ne
   b6f3a:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b6f3e:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b6f42:	3501      	addne	r5, #1
   b6f44:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b6f48:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b6f4c:	bf0c      	ite	eq
   b6f4e:	2501      	moveq	r5, #1
   b6f50:	2502      	movne	r5, #2
   b6f52:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b6f56:	6805      	ldr	r5, [r0, #0]
   b6f58:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b6f5c:	6845      	ldr	r5, [r0, #4]
   b6f5e:	3d01      	subs	r5, #1
   b6f60:	e7ca      	b.n	b6ef8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b6f62:	3d01      	subs	r5, #1
   b6f64:	f1a8 0810 	sub.w	r8, r8, #16
   b6f68:	e7a7      	b.n	b6eba <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b6f6a:	3501      	adds	r5, #1
   b6f6c:	f47f af71 	bne.w	b6e52 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b6f70:	f06f 0401 	mvn.w	r4, #1
   b6f74:	e01e      	b.n	b6fb4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b6f76:	3d01      	subs	r5, #1
   b6f78:	1c6f      	adds	r7, r5, #1
   b6f7a:	f1ae 0e10 	sub.w	lr, lr, #16
   b6f7e:	d1b3      	bne.n	b6ee8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b6f80:	e767      	b.n	b6e52 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b6f82:	f10e 0901 	add.w	r9, lr, #1
   b6f86:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b6f8a:	f8d0 8000 	ldr.w	r8, [r0]
   b6f8e:	4542      	cmp	r2, r8
   b6f90:	f240 8093 	bls.w	b70ba <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b6f94:	f811 5008 	ldrb.w	r5, [r1, r8]
   b6f98:	2d00      	cmp	r5, #0
   b6f9a:	f000 808e 	beq.w	b70ba <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b6f9e:	2d22      	cmp	r5, #34	; 0x22
   b6fa0:	d130      	bne.n	b7004 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b6fa2:	b1f3      	cbz	r3, b6fe2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b6fa4:	6845      	ldr	r5, [r0, #4]
   b6fa6:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b6fa8:	42af      	cmp	r7, r5
   b6faa:	d806      	bhi.n	b6fba <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b6fac:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b6fb0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b6fb4:	4620      	mov	r0, r4
   b6fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b6fba:	f105 0e01 	add.w	lr, r5, #1
   b6fbe:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b6fc2:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b6fc6:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b6fca:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b6fce:	2700      	movs	r7, #0
   b6fd0:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b6fd2:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b6fd6:	f04f 0a03 	mov.w	sl, #3
   b6fda:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b6fde:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b6fe2:	6885      	ldr	r5, [r0, #8]
   b6fe4:	1c6f      	adds	r7, r5, #1
				count++;
   b6fe6:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b6fea:	f43f af32 	beq.w	b6e52 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b6fee:	2b00      	cmp	r3, #0
   b6ff0:	f43f af2f 	beq.w	b6e52 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b6ff4:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b6ff8:	f8de 500c 	ldr.w	r5, [lr, #12]
   b6ffc:	3501      	adds	r5, #1
   b6ffe:	f8ce 500c 	str.w	r5, [lr, #12]
   b7002:	e726      	b.n	b6e52 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b7004:	2d5c      	cmp	r5, #92	; 0x5c
   b7006:	d111      	bne.n	b702c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b7008:	f108 0501 	add.w	r5, r8, #1
   b700c:	42aa      	cmp	r2, r5
   b700e:	d90d      	bls.n	b702c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b7010:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b7012:	5d4d      	ldrb	r5, [r1, r5]
   b7014:	2d75      	cmp	r5, #117	; 0x75
   b7016:	d82b      	bhi.n	b7070 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b7018:	2d6d      	cmp	r5, #109	; 0x6d
   b701a:	d80b      	bhi.n	b7034 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b701c:	2d66      	cmp	r5, #102	; 0x66
   b701e:	d827      	bhi.n	b7070 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b7020:	2d5b      	cmp	r5, #91	; 0x5b
   b7022:	d81d      	bhi.n	b7060 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b7024:	2d22      	cmp	r5, #34	; 0x22
   b7026:	d001      	beq.n	b702c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b7028:	2d2f      	cmp	r5, #47	; 0x2f
   b702a:	d121      	bne.n	b7070 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b702c:	6805      	ldr	r5, [r0, #0]
   b702e:	3501      	adds	r5, #1
   b7030:	6005      	str	r5, [r0, #0]
   b7032:	e7aa      	b.n	b6f8a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b7034:	3d6e      	subs	r5, #110	; 0x6e
   b7036:	2d07      	cmp	r5, #7
   b7038:	d81a      	bhi.n	b7070 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b703a:	a701      	add	r7, pc, #4	; (adr r7, b7040 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b703c:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b7040:	000b702d 	.word	0x000b702d
   b7044:	000b7071 	.word	0x000b7071
   b7048:	000b7071 	.word	0x000b7071
   b704c:	000b7071 	.word	0x000b7071
   b7050:	000b702d 	.word	0x000b702d
   b7054:	000b7071 	.word	0x000b7071
   b7058:	000b702d 	.word	0x000b702d
   b705c:	000b7077 	.word	0x000b7077
   b7060:	3d5c      	subs	r5, #92	; 0x5c
   b7062:	b2ed      	uxtb	r5, r5
   b7064:	fa0c f505 	lsl.w	r5, ip, r5
   b7068:	f240 4741 	movw	r7, #1089	; 0x441
   b706c:	423d      	tst	r5, r7
   b706e:	d1dd      	bne.n	b702c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b7070:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b7074:	e77c      	b.n	b6f70 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b7076:	f108 0502 	add.w	r5, r8, #2
   b707a:	6005      	str	r5, [r0, #0]
   b707c:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b7080:	f8d0 8000 	ldr.w	r8, [r0]
   b7084:	4542      	cmp	r2, r8
   b7086:	d803      	bhi.n	b7090 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b7088:	6805      	ldr	r5, [r0, #0]
   b708a:	3d01      	subs	r5, #1
   b708c:	6005      	str	r5, [r0, #0]
					break;
   b708e:	e7cd      	b.n	b702c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b7090:	f811 5008 	ldrb.w	r5, [r1, r8]
   b7094:	2d00      	cmp	r5, #0
   b7096:	d0f7      	beq.n	b7088 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b7098:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b709c:	f1bb 0f09 	cmp.w	fp, #9
   b70a0:	d904      	bls.n	b70ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b70a2:	f025 0520 	bic.w	r5, r5, #32
   b70a6:	3d41      	subs	r5, #65	; 0x41
   b70a8:	2d05      	cmp	r5, #5
   b70aa:	d8e1      	bhi.n	b7070 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b70ac:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b70b0:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b70b4:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b70b6:	d1e3      	bne.n	b7080 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b70b8:	e7e6      	b.n	b7088 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b70ba:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b70be:	f06f 0402 	mvn.w	r4, #2
   b70c2:	e777      	b.n	b6fb4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b70c4:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b70c8:	2b00      	cmp	r3, #0
   b70ca:	f43f aec2 	beq.w	b6e52 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b70ce:	6885      	ldr	r5, [r0, #8]
   b70d0:	1c6f      	adds	r7, r5, #1
   b70d2:	f43f aebe 	beq.w	b6e52 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b70d6:	012d      	lsls	r5, r5, #4
   b70d8:	5d5d      	ldrb	r5, [r3, r5]
   b70da:	3d01      	subs	r5, #1
   b70dc:	2d01      	cmp	r5, #1
   b70de:	f67f aeb8 	bls.w	b6e52 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b70e2:	6845      	ldr	r5, [r0, #4]
   b70e4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b70e8:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b70ec:	f1b8 0f00 	cmp.w	r8, #0
   b70f0:	f6ff aeaf 	blt.w	b6e52 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b70f4:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b70f8:	3d01      	subs	r5, #1
   b70fa:	2d01      	cmp	r5, #1
   b70fc:	d80a      	bhi.n	b7114 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b70fe:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b7102:	3501      	adds	r5, #1
   b7104:	d006      	beq.n	b7114 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b7106:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b710a:	3501      	adds	r5, #1
   b710c:	d102      	bne.n	b7114 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b710e:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b7112:	e69e      	b.n	b6e52 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b7114:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b7118:	f1ae 0e10 	sub.w	lr, lr, #16
   b711c:	e7e6      	b.n	b70ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b711e:	f1a5 0920 	sub.w	r9, r5, #32
   b7122:	4f24      	ldr	r7, [pc, #144]	; (b71b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b7124:	fa5f f989 	uxtb.w	r9, r9
   b7128:	fa0c f909 	lsl.w	r9, ip, r9
   b712c:	ea19 0f07 	tst.w	r9, r7
   b7130:	f47f aeaa 	bne.w	b6e88 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b7134:	3d20      	subs	r5, #32
   b7136:	2d5e      	cmp	r5, #94	; 0x5e
   b7138:	d89a      	bhi.n	b7070 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b713a:	f108 0501 	add.w	r5, r8, #1
   b713e:	6005      	str	r5, [r0, #0]
   b7140:	e68f      	b.n	b6e62 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b7142:	2d0d      	cmp	r5, #13
   b7144:	d1f6      	bne.n	b7134 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b7146:	e69f      	b.n	b6e88 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b7148:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b714c:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b7150:	e7f8      	b.n	b7144 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b7152:	6845      	ldr	r5, [r0, #4]
   b7154:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b7156:	42af      	cmp	r7, r5
   b7158:	f67f af28 	bls.w	b6fac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b715c:	f105 0801 	add.w	r8, r5, #1
   b7160:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b7164:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b7168:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b716c:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b7170:	2700      	movs	r7, #0
   b7172:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b7174:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b7178:	f04f 0a04 	mov.w	sl, #4
   b717c:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b7180:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b7184:	6805      	ldr	r5, [r0, #0]
   b7186:	3d01      	subs	r5, #1
   b7188:	e683      	b.n	b6e92 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b718a:	2b00      	cmp	r3, #0
   b718c:	f43f af12 	beq.w	b6fb4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b7190:	6842      	ldr	r2, [r0, #4]
   b7192:	1e51      	subs	r1, r2, #1
   b7194:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b7198:	2900      	cmp	r1, #0
   b719a:	f6ff af0b 	blt.w	b6fb4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b719e:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b71a2:	3201      	adds	r2, #1
   b71a4:	d003      	beq.n	b71ae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b71a6:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b71aa:	3201      	adds	r2, #1
   b71ac:	d087      	beq.n	b70be <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b71ae:	3901      	subs	r1, #1
   b71b0:	3b10      	subs	r3, #16
   b71b2:	e7f1      	b.n	b7198 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b71b4:	04001001 	.word	0x04001001

000b71b8 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b71b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b71ba:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b71bc:	4604      	mov	r4, r0
	if (offset == 0) {
   b71be:	b912      	cbnz	r2, b71c6 <_ZN10JsonParser5parseEv+0xe>
		return false;
   b71c0:	2000      	movs	r0, #0
}
   b71c2:	b003      	add	sp, #12
   b71c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b71c6:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b71c8:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b71cc:	b1ab      	cbz	r3, b71fa <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b71ce:	2100      	movs	r1, #0
	parser->toknext = 0;
   b71d0:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b71d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b71d8:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b71da:	69c1      	ldr	r1, [r0, #28]
   b71dc:	9100      	str	r1, [sp, #0]
   b71de:	6841      	ldr	r1, [r0, #4]
   b71e0:	4630      	mov	r0, r6
   b71e2:	f7ff fe0d 	bl	b6e00 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b71e6:	1c43      	adds	r3, r0, #1
   b71e8:	d128      	bne.n	b723c <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b71ea:	7c25      	ldrb	r5, [r4, #16]
   b71ec:	2d00      	cmp	r5, #0
   b71ee:	d1e7      	bne.n	b71c0 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b71f0:	6960      	ldr	r0, [r4, #20]
   b71f2:	f000 faad 	bl	b7750 <free>
			tokens = 0;
   b71f6:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b71f8:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b71fa:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b71fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b7200:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b7204:	68e2      	ldr	r2, [r4, #12]
   b7206:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b7208:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b720a:	9500      	str	r5, [sp, #0]
   b720c:	462b      	mov	r3, r5
   b720e:	4630      	mov	r0, r6
   b7210:	f7ff fdf6 	bl	b6e00 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b7214:	2800      	cmp	r0, #0
   b7216:	dbd3      	blt.n	b71c0 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b7218:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b721a:	d017      	beq.n	b724c <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b721c:	0100      	lsls	r0, r0, #4
   b721e:	f000 fa8f 	bl	b7740 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b7222:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b7224:	6160      	str	r0, [r4, #20]
   b7226:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b7228:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b722a:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b722e:	68e2      	ldr	r2, [r4, #12]
   b7230:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b7232:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b7234:	4630      	mov	r0, r6
   b7236:	f7ff fde3 	bl	b6e00 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b723a:	e001      	b.n	b7240 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b723c:	2800      	cmp	r0, #0
   b723e:	dbbf      	blt.n	b71c0 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b7240:	6963      	ldr	r3, [r4, #20]
   b7242:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b7246:	61a0      	str	r0, [r4, #24]
	return true;
   b7248:	2001      	movs	r0, #1
   b724a:	e7ba      	b.n	b71c2 <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b724c:	6963      	ldr	r3, [r4, #20]
   b724e:	61a3      	str	r3, [r4, #24]
   b7250:	e7fa      	b.n	b7248 <_ZN10JsonParser5parseEv+0x90>
	...

000b7254 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   b7254:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b7256:	f000 f8af 	bl	b73b8 <HAL_Pin_Map>
   b725a:	4b01      	ldr	r3, [pc, #4]	; (b7260 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b725c:	6018      	str	r0, [r3, #0]
}
   b725e:	bd08      	pop	{r3, pc}
   b7260:	2003e6b4 	.word	0x2003e6b4

000b7264 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b7264:	b508      	push	{r3, lr}
   b7266:	4b02      	ldr	r3, [pc, #8]	; (b7270 <hal_ble_stack_init+0xc>)
   b7268:	681b      	ldr	r3, [r3, #0]
   b726a:	689b      	ldr	r3, [r3, #8]
   b726c:	9301      	str	r3, [sp, #4]
   b726e:	bd08      	pop	{r3, pc}
   b7270:	00030278 	.word	0x00030278

000b7274 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b7274:	b508      	push	{r3, lr}
   b7276:	4b02      	ldr	r3, [pc, #8]	; (b7280 <hal_ble_gap_set_advertising_data+0xc>)
   b7278:	681b      	ldr	r3, [r3, #0]
   b727a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b727c:	9301      	str	r3, [sp, #4]
   b727e:	bd08      	pop	{r3, pc}
   b7280:	00030278 	.word	0x00030278

000b7284 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b7284:	b508      	push	{r3, lr}
   b7286:	4b02      	ldr	r3, [pc, #8]	; (b7290 <hal_ble_gap_set_scan_response_data+0xc>)
   b7288:	681b      	ldr	r3, [r3, #0]
   b728a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b728c:	9301      	str	r3, [sp, #4]
   b728e:	bd08      	pop	{r3, pc}
   b7290:	00030278 	.word	0x00030278

000b7294 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b7294:	b508      	push	{r3, lr}
   b7296:	4b02      	ldr	r3, [pc, #8]	; (b72a0 <hal_ble_gap_start_advertising+0xc>)
   b7298:	681b      	ldr	r3, [r3, #0]
   b729a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b729c:	9301      	str	r3, [sp, #4]
   b729e:	bd08      	pop	{r3, pc}
   b72a0:	00030278 	.word	0x00030278

000b72a4 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b72a4:	b508      	push	{r3, lr}
   b72a6:	4b03      	ldr	r3, [pc, #12]	; (b72b4 <hal_ble_gap_disconnect+0x10>)
   b72a8:	681b      	ldr	r3, [r3, #0]
   b72aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b72ae:	9301      	str	r3, [sp, #4]
   b72b0:	bd08      	pop	{r3, pc}
   b72b2:	0000      	.short	0x0000
   b72b4:	00030278 	.word	0x00030278

000b72b8 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b72b8:	b508      	push	{r3, lr}
   b72ba:	4b03      	ldr	r3, [pc, #12]	; (b72c8 <hal_ble_gatt_server_add_service+0x10>)
   b72bc:	681b      	ldr	r3, [r3, #0]
   b72be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b72c2:	9301      	str	r3, [sp, #4]
   b72c4:	bd08      	pop	{r3, pc}
   b72c6:	0000      	.short	0x0000
   b72c8:	00030278 	.word	0x00030278

000b72cc <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b72cc:	b508      	push	{r3, lr}
   b72ce:	4b03      	ldr	r3, [pc, #12]	; (b72dc <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b72d0:	681b      	ldr	r3, [r3, #0]
   b72d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b72d6:	9301      	str	r3, [sp, #4]
   b72d8:	bd08      	pop	{r3, pc}
   b72da:	0000      	.short	0x0000
   b72dc:	00030278 	.word	0x00030278

000b72e0 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b72e0:	b508      	push	{r3, lr}
   b72e2:	4b03      	ldr	r3, [pc, #12]	; (b72f0 <hal_ble_gatt_client_write_with_response+0x10>)
   b72e4:	681b      	ldr	r3, [r3, #0]
   b72e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b72ea:	9301      	str	r3, [sp, #4]
   b72ec:	bd08      	pop	{r3, pc}
   b72ee:	0000      	.short	0x0000
   b72f0:	00030278 	.word	0x00030278

000b72f4 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b72f4:	b508      	push	{r3, lr}
   b72f6:	4b03      	ldr	r3, [pc, #12]	; (b7304 <hal_ble_gatt_client_write_without_response+0x10>)
   b72f8:	681b      	ldr	r3, [r3, #0]
   b72fa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b72fe:	9301      	str	r3, [sp, #4]
   b7300:	bd08      	pop	{r3, pc}
   b7302:	0000      	.short	0x0000
   b7304:	00030278 	.word	0x00030278

000b7308 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b7308:	b508      	push	{r3, lr}
   b730a:	4b03      	ldr	r3, [pc, #12]	; (b7318 <hal_ble_gatt_server_add_characteristic+0x10>)
   b730c:	681b      	ldr	r3, [r3, #0]
   b730e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b7312:	9301      	str	r3, [sp, #4]
   b7314:	bd08      	pop	{r3, pc}
   b7316:	0000      	.short	0x0000
   b7318:	00030278 	.word	0x00030278

000b731c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b731c:	b508      	push	{r3, lr}
   b731e:	4b03      	ldr	r3, [pc, #12]	; (b732c <hal_ble_set_callback_on_periph_link_events+0x10>)
   b7320:	681b      	ldr	r3, [r3, #0]
   b7322:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b7326:	9301      	str	r3, [sp, #4]
   b7328:	bd08      	pop	{r3, pc}
   b732a:	0000      	.short	0x0000
   b732c:	00030278 	.word	0x00030278

000b7330 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b7330:	b508      	push	{r3, lr}
   b7332:	4b03      	ldr	r3, [pc, #12]	; (b7340 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b7334:	681b      	ldr	r3, [r3, #0]
   b7336:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b733a:	9301      	str	r3, [sp, #4]
   b733c:	bd08      	pop	{r3, pc}
   b733e:	0000      	.short	0x0000
   b7340:	00030278 	.word	0x00030278

000b7344 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b7344:	b508      	push	{r3, lr}
   b7346:	4b03      	ldr	r3, [pc, #12]	; (b7354 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b7348:	681b      	ldr	r3, [r3, #0]
   b734a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b734e:	9301      	str	r3, [sp, #4]
   b7350:	bd08      	pop	{r3, pc}
   b7352:	0000      	.short	0x0000
   b7354:	00030278 	.word	0x00030278

000b7358 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b7358:	b508      	push	{r3, lr}
   b735a:	4b02      	ldr	r3, [pc, #8]	; (b7364 <os_mutex_recursive_create+0xc>)
   b735c:	681b      	ldr	r3, [r3, #0]
   b735e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7360:	9301      	str	r3, [sp, #4]
   b7362:	bd08      	pop	{r3, pc}
   b7364:	00030248 	.word	0x00030248

000b7368 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b7368:	b508      	push	{r3, lr}
   b736a:	4b02      	ldr	r3, [pc, #8]	; (b7374 <os_mutex_recursive_lock+0xc>)
   b736c:	681b      	ldr	r3, [r3, #0]
   b736e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7370:	9301      	str	r3, [sp, #4]
   b7372:	bd08      	pop	{r3, pc}
   b7374:	00030248 	.word	0x00030248

000b7378 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b7378:	b508      	push	{r3, lr}
   b737a:	4b02      	ldr	r3, [pc, #8]	; (b7384 <os_mutex_recursive_unlock+0xc>)
   b737c:	681b      	ldr	r3, [r3, #0]
   b737e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7380:	9301      	str	r3, [sp, #4]
   b7382:	bd08      	pop	{r3, pc}
   b7384:	00030248 	.word	0x00030248

000b7388 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b7388:	b508      	push	{r3, lr}
   b738a:	4b02      	ldr	r3, [pc, #8]	; (b7394 <HAL_RNG_GetRandomNumber+0xc>)
   b738c:	681b      	ldr	r3, [r3, #0]
   b738e:	685b      	ldr	r3, [r3, #4]
   b7390:	9301      	str	r3, [sp, #4]
   b7392:	bd08      	pop	{r3, pc}
   b7394:	00030218 	.word	0x00030218

000b7398 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b7398:	b508      	push	{r3, lr}
   b739a:	4b02      	ldr	r3, [pc, #8]	; (b73a4 <HAL_Delay_Microseconds+0xc>)
   b739c:	681b      	ldr	r3, [r3, #0]
   b739e:	68db      	ldr	r3, [r3, #12]
   b73a0:	9301      	str	r3, [sp, #4]
   b73a2:	bd08      	pop	{r3, pc}
   b73a4:	00030218 	.word	0x00030218

000b73a8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b73a8:	b508      	push	{r3, lr}
   b73aa:	4b02      	ldr	r3, [pc, #8]	; (b73b4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b73ac:	681b      	ldr	r3, [r3, #0]
   b73ae:	695b      	ldr	r3, [r3, #20]
   b73b0:	9301      	str	r3, [sp, #4]
   b73b2:	bd08      	pop	{r3, pc}
   b73b4:	00030218 	.word	0x00030218

000b73b8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b73b8:	b508      	push	{r3, lr}
   b73ba:	4b02      	ldr	r3, [pc, #8]	; (b73c4 <HAL_Pin_Map+0xc>)
   b73bc:	681b      	ldr	r3, [r3, #0]
   b73be:	681b      	ldr	r3, [r3, #0]
   b73c0:	9301      	str	r3, [sp, #4]
   b73c2:	bd08      	pop	{r3, pc}
   b73c4:	0003022c 	.word	0x0003022c

000b73c8 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b73c8:	b508      	push	{r3, lr}
   b73ca:	4b02      	ldr	r3, [pc, #8]	; (b73d4 <hal_i2c_begin+0xc>)
   b73cc:	681b      	ldr	r3, [r3, #0]
   b73ce:	68db      	ldr	r3, [r3, #12]
   b73d0:	9301      	str	r3, [sp, #4]
   b73d2:	bd08      	pop	{r3, pc}
   b73d4:	00030228 	.word	0x00030228

000b73d8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b73d8:	b508      	push	{r3, lr}
   b73da:	4b02      	ldr	r3, [pc, #8]	; (b73e4 <hal_i2c_begin_transmission+0xc>)
   b73dc:	681b      	ldr	r3, [r3, #0]
   b73de:	699b      	ldr	r3, [r3, #24]
   b73e0:	9301      	str	r3, [sp, #4]
   b73e2:	bd08      	pop	{r3, pc}
   b73e4:	00030228 	.word	0x00030228

000b73e8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b73e8:	b508      	push	{r3, lr}
   b73ea:	4b02      	ldr	r3, [pc, #8]	; (b73f4 <hal_i2c_end_transmission+0xc>)
   b73ec:	681b      	ldr	r3, [r3, #0]
   b73ee:	69db      	ldr	r3, [r3, #28]
   b73f0:	9301      	str	r3, [sp, #4]
   b73f2:	bd08      	pop	{r3, pc}
   b73f4:	00030228 	.word	0x00030228

000b73f8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b73f8:	b508      	push	{r3, lr}
   b73fa:	4b02      	ldr	r3, [pc, #8]	; (b7404 <hal_i2c_write+0xc>)
   b73fc:	681b      	ldr	r3, [r3, #0]
   b73fe:	6a1b      	ldr	r3, [r3, #32]
   b7400:	9301      	str	r3, [sp, #4]
   b7402:	bd08      	pop	{r3, pc}
   b7404:	00030228 	.word	0x00030228

000b7408 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b7408:	b508      	push	{r3, lr}
   b740a:	4b02      	ldr	r3, [pc, #8]	; (b7414 <hal_i2c_available+0xc>)
   b740c:	681b      	ldr	r3, [r3, #0]
   b740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7410:	9301      	str	r3, [sp, #4]
   b7412:	bd08      	pop	{r3, pc}
   b7414:	00030228 	.word	0x00030228

000b7418 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b7418:	b508      	push	{r3, lr}
   b741a:	4b02      	ldr	r3, [pc, #8]	; (b7424 <hal_i2c_read+0xc>)
   b741c:	681b      	ldr	r3, [r3, #0]
   b741e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7420:	9301      	str	r3, [sp, #4]
   b7422:	bd08      	pop	{r3, pc}
   b7424:	00030228 	.word	0x00030228

000b7428 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b7428:	b508      	push	{r3, lr}
   b742a:	4b02      	ldr	r3, [pc, #8]	; (b7434 <hal_i2c_peek+0xc>)
   b742c:	681b      	ldr	r3, [r3, #0]
   b742e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7430:	9301      	str	r3, [sp, #4]
   b7432:	bd08      	pop	{r3, pc}
   b7434:	00030228 	.word	0x00030228

000b7438 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b7438:	b508      	push	{r3, lr}
   b743a:	4b02      	ldr	r3, [pc, #8]	; (b7444 <hal_i2c_flush+0xc>)
   b743c:	681b      	ldr	r3, [r3, #0]
   b743e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7440:	9301      	str	r3, [sp, #4]
   b7442:	bd08      	pop	{r3, pc}
   b7444:	00030228 	.word	0x00030228

000b7448 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b7448:	b508      	push	{r3, lr}
   b744a:	4b02      	ldr	r3, [pc, #8]	; (b7454 <hal_i2c_init+0xc>)
   b744c:	681b      	ldr	r3, [r3, #0]
   b744e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7450:	9301      	str	r3, [sp, #4]
   b7452:	bd08      	pop	{r3, pc}
   b7454:	00030228 	.word	0x00030228

000b7458 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b7458:	b508      	push	{r3, lr}
   b745a:	4b02      	ldr	r3, [pc, #8]	; (b7464 <hal_i2c_request_ex+0xc>)
   b745c:	681b      	ldr	r3, [r3, #0]
   b745e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7460:	9301      	str	r3, [sp, #4]
   b7462:	bd08      	pop	{r3, pc}
   b7464:	00030228 	.word	0x00030228

000b7468 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b7468:	b508      	push	{r3, lr}
   b746a:	4b02      	ldr	r3, [pc, #8]	; (b7474 <if_index_to_name+0xc>)
   b746c:	681b      	ldr	r3, [r3, #0]
   b746e:	695b      	ldr	r3, [r3, #20]
   b7470:	9301      	str	r3, [sp, #4]
   b7472:	bd08      	pop	{r3, pc}
   b7474:	0003026c 	.word	0x0003026c

000b7478 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b7478:	b508      	push	{r3, lr}
   b747a:	4b02      	ldr	r3, [pc, #8]	; (b7484 <inet_inet_ntop+0xc>)
   b747c:	681b      	ldr	r3, [r3, #0]
   b747e:	695b      	ldr	r3, [r3, #20]
   b7480:	9301      	str	r3, [sp, #4]
   b7482:	bd08      	pop	{r3, pc}
   b7484:	00030264 	.word	0x00030264

000b7488 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b7488:	b508      	push	{r3, lr}
   b748a:	4b02      	ldr	r3, [pc, #8]	; (b7494 <inet_htonl+0xc>)
   b748c:	681b      	ldr	r3, [r3, #0]
   b748e:	6a1b      	ldr	r3, [r3, #32]
   b7490:	9301      	str	r3, [sp, #4]
   b7492:	bd08      	pop	{r3, pc}
   b7494:	00030264 	.word	0x00030264

000b7498 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b7498:	b508      	push	{r3, lr}
   b749a:	4b02      	ldr	r3, [pc, #8]	; (b74a4 <inet_htons+0xc>)
   b749c:	681b      	ldr	r3, [r3, #0]
   b749e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b74a0:	9301      	str	r3, [sp, #4]
   b74a2:	bd08      	pop	{r3, pc}
   b74a4:	00030264 	.word	0x00030264

000b74a8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b74a8:	b508      	push	{r3, lr}
   b74aa:	4b02      	ldr	r3, [pc, #8]	; (b74b4 <netdb_freeaddrinfo+0xc>)
   b74ac:	681b      	ldr	r3, [r3, #0]
   b74ae:	689b      	ldr	r3, [r3, #8]
   b74b0:	9301      	str	r3, [sp, #4]
   b74b2:	bd08      	pop	{r3, pc}
   b74b4:	00030268 	.word	0x00030268

000b74b8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b74b8:	b508      	push	{r3, lr}
   b74ba:	4b02      	ldr	r3, [pc, #8]	; (b74c4 <netdb_getaddrinfo+0xc>)
   b74bc:	681b      	ldr	r3, [r3, #0]
   b74be:	68db      	ldr	r3, [r3, #12]
   b74c0:	9301      	str	r3, [sp, #4]
   b74c2:	bd08      	pop	{r3, pc}
   b74c4:	00030268 	.word	0x00030268

000b74c8 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b74c8:	b508      	push	{r3, lr}
   b74ca:	4b02      	ldr	r3, [pc, #8]	; (b74d4 <sock_setsockopt+0xc>)
   b74cc:	681b      	ldr	r3, [r3, #0]
   b74ce:	699b      	ldr	r3, [r3, #24]
   b74d0:	9301      	str	r3, [sp, #4]
   b74d2:	bd08      	pop	{r3, pc}
   b74d4:	00030238 	.word	0x00030238

000b74d8 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b74d8:	b508      	push	{r3, lr}
   b74da:	4b02      	ldr	r3, [pc, #8]	; (b74e4 <sock_close+0xc>)
   b74dc:	681b      	ldr	r3, [r3, #0]
   b74de:	69db      	ldr	r3, [r3, #28]
   b74e0:	9301      	str	r3, [sp, #4]
   b74e2:	bd08      	pop	{r3, pc}
   b74e4:	00030238 	.word	0x00030238

000b74e8 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b74e8:	b508      	push	{r3, lr}
   b74ea:	4b02      	ldr	r3, [pc, #8]	; (b74f4 <sock_connect+0xc>)
   b74ec:	681b      	ldr	r3, [r3, #0]
   b74ee:	6a1b      	ldr	r3, [r3, #32]
   b74f0:	9301      	str	r3, [sp, #4]
   b74f2:	bd08      	pop	{r3, pc}
   b74f4:	00030238 	.word	0x00030238

000b74f8 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b74f8:	b508      	push	{r3, lr}
   b74fa:	4b02      	ldr	r3, [pc, #8]	; (b7504 <sock_recv+0xc>)
   b74fc:	681b      	ldr	r3, [r3, #0]
   b74fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7500:	9301      	str	r3, [sp, #4]
   b7502:	bd08      	pop	{r3, pc}
   b7504:	00030238 	.word	0x00030238

000b7508 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b7508:	b508      	push	{r3, lr}
   b750a:	4b02      	ldr	r3, [pc, #8]	; (b7514 <sock_send+0xc>)
   b750c:	681b      	ldr	r3, [r3, #0]
   b750e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7510:	9301      	str	r3, [sp, #4]
   b7512:	bd08      	pop	{r3, pc}
   b7514:	00030238 	.word	0x00030238

000b7518 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b7518:	b508      	push	{r3, lr}
   b751a:	4b02      	ldr	r3, [pc, #8]	; (b7524 <sock_socket+0xc>)
   b751c:	681b      	ldr	r3, [r3, #0]
   b751e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b7520:	9301      	str	r3, [sp, #4]
   b7522:	bd08      	pop	{r3, pc}
   b7524:	00030238 	.word	0x00030238

000b7528 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b7528:	b508      	push	{r3, lr}
   b752a:	4b02      	ldr	r3, [pc, #8]	; (b7534 <hal_usart_write+0xc>)
   b752c:	681b      	ldr	r3, [r3, #0]
   b752e:	68db      	ldr	r3, [r3, #12]
   b7530:	9301      	str	r3, [sp, #4]
   b7532:	bd08      	pop	{r3, pc}
   b7534:	0003023c 	.word	0x0003023c

000b7538 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b7538:	b508      	push	{r3, lr}
   b753a:	4b02      	ldr	r3, [pc, #8]	; (b7544 <hal_usart_available+0xc>)
   b753c:	681b      	ldr	r3, [r3, #0]
   b753e:	691b      	ldr	r3, [r3, #16]
   b7540:	9301      	str	r3, [sp, #4]
   b7542:	bd08      	pop	{r3, pc}
   b7544:	0003023c 	.word	0x0003023c

000b7548 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b7548:	b508      	push	{r3, lr}
   b754a:	4b02      	ldr	r3, [pc, #8]	; (b7554 <hal_usart_read+0xc>)
   b754c:	681b      	ldr	r3, [r3, #0]
   b754e:	695b      	ldr	r3, [r3, #20]
   b7550:	9301      	str	r3, [sp, #4]
   b7552:	bd08      	pop	{r3, pc}
   b7554:	0003023c 	.word	0x0003023c

000b7558 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b7558:	b508      	push	{r3, lr}
   b755a:	4b02      	ldr	r3, [pc, #8]	; (b7564 <hal_usart_peek+0xc>)
   b755c:	681b      	ldr	r3, [r3, #0]
   b755e:	699b      	ldr	r3, [r3, #24]
   b7560:	9301      	str	r3, [sp, #4]
   b7562:	bd08      	pop	{r3, pc}
   b7564:	0003023c 	.word	0x0003023c

000b7568 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b7568:	b508      	push	{r3, lr}
   b756a:	4b02      	ldr	r3, [pc, #8]	; (b7574 <hal_usart_flush+0xc>)
   b756c:	681b      	ldr	r3, [r3, #0]
   b756e:	69db      	ldr	r3, [r3, #28]
   b7570:	9301      	str	r3, [sp, #4]
   b7572:	bd08      	pop	{r3, pc}
   b7574:	0003023c 	.word	0x0003023c

000b7578 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b7578:	b508      	push	{r3, lr}
   b757a:	4b02      	ldr	r3, [pc, #8]	; (b7584 <hal_usart_available_data_for_write+0xc>)
   b757c:	681b      	ldr	r3, [r3, #0]
   b757e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7580:	9301      	str	r3, [sp, #4]
   b7582:	bd08      	pop	{r3, pc}
   b7584:	0003023c 	.word	0x0003023c

000b7588 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b7588:	b508      	push	{r3, lr}
   b758a:	4b02      	ldr	r3, [pc, #8]	; (b7594 <hal_usart_init_ex+0xc>)
   b758c:	681b      	ldr	r3, [r3, #0]
   b758e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7590:	9301      	str	r3, [sp, #4]
   b7592:	bd08      	pop	{r3, pc}
   b7594:	0003023c 	.word	0x0003023c

000b7598 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b7598:	b508      	push	{r3, lr}
   b759a:	4b02      	ldr	r3, [pc, #8]	; (b75a4 <HAL_USB_USART_Init+0xc>)
   b759c:	681b      	ldr	r3, [r3, #0]
   b759e:	681b      	ldr	r3, [r3, #0]
   b75a0:	9301      	str	r3, [sp, #4]
   b75a2:	bd08      	pop	{r3, pc}
   b75a4:	0003024c 	.word	0x0003024c

000b75a8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b75a8:	b508      	push	{r3, lr}
   b75aa:	4b02      	ldr	r3, [pc, #8]	; (b75b4 <HAL_USB_USART_Begin+0xc>)
   b75ac:	681b      	ldr	r3, [r3, #0]
   b75ae:	685b      	ldr	r3, [r3, #4]
   b75b0:	9301      	str	r3, [sp, #4]
   b75b2:	bd08      	pop	{r3, pc}
   b75b4:	0003024c 	.word	0x0003024c

000b75b8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b75b8:	b508      	push	{r3, lr}
   b75ba:	4b02      	ldr	r3, [pc, #8]	; (b75c4 <HAL_USB_USART_Available_Data+0xc>)
   b75bc:	681b      	ldr	r3, [r3, #0]
   b75be:	691b      	ldr	r3, [r3, #16]
   b75c0:	9301      	str	r3, [sp, #4]
   b75c2:	bd08      	pop	{r3, pc}
   b75c4:	0003024c 	.word	0x0003024c

000b75c8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b75c8:	b508      	push	{r3, lr}
   b75ca:	4b02      	ldr	r3, [pc, #8]	; (b75d4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b75cc:	681b      	ldr	r3, [r3, #0]
   b75ce:	695b      	ldr	r3, [r3, #20]
   b75d0:	9301      	str	r3, [sp, #4]
   b75d2:	bd08      	pop	{r3, pc}
   b75d4:	0003024c 	.word	0x0003024c

000b75d8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b75d8:	b508      	push	{r3, lr}
   b75da:	4b02      	ldr	r3, [pc, #8]	; (b75e4 <HAL_USB_USART_Receive_Data+0xc>)
   b75dc:	681b      	ldr	r3, [r3, #0]
   b75de:	699b      	ldr	r3, [r3, #24]
   b75e0:	9301      	str	r3, [sp, #4]
   b75e2:	bd08      	pop	{r3, pc}
   b75e4:	0003024c 	.word	0x0003024c

000b75e8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b75e8:	b508      	push	{r3, lr}
   b75ea:	4b02      	ldr	r3, [pc, #8]	; (b75f4 <HAL_USB_USART_Send_Data+0xc>)
   b75ec:	681b      	ldr	r3, [r3, #0]
   b75ee:	69db      	ldr	r3, [r3, #28]
   b75f0:	9301      	str	r3, [sp, #4]
   b75f2:	bd08      	pop	{r3, pc}
   b75f4:	0003024c 	.word	0x0003024c

000b75f8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b75f8:	b508      	push	{r3, lr}
   b75fa:	4b02      	ldr	r3, [pc, #8]	; (b7604 <HAL_USB_USART_Flush_Data+0xc>)
   b75fc:	681b      	ldr	r3, [r3, #0]
   b75fe:	6a1b      	ldr	r3, [r3, #32]
   b7600:	9301      	str	r3, [sp, #4]
   b7602:	bd08      	pop	{r3, pc}
   b7604:	0003024c 	.word	0x0003024c

000b7608 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7608:	b508      	push	{r3, lr}
   b760a:	4b02      	ldr	r3, [pc, #8]	; (b7614 <panic_+0xc>)
   b760c:	681b      	ldr	r3, [r3, #0]
   b760e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7610:	9301      	str	r3, [sp, #4]
   b7612:	bd08      	pop	{r3, pc}
   b7614:	00030260 	.word	0x00030260

000b7618 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b7618:	b508      	push	{r3, lr}
   b761a:	4b02      	ldr	r3, [pc, #8]	; (b7624 <log_message+0xc>)
   b761c:	681b      	ldr	r3, [r3, #0]
   b761e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7620:	9301      	str	r3, [sp, #4]
   b7622:	bd08      	pop	{r3, pc}
   b7624:	00030260 	.word	0x00030260

000b7628 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7628:	b508      	push	{r3, lr}
   b762a:	4b02      	ldr	r3, [pc, #8]	; (b7634 <set_system_mode+0xc>)
   b762c:	681b      	ldr	r3, [r3, #0]
   b762e:	685b      	ldr	r3, [r3, #4]
   b7630:	9301      	str	r3, [sp, #4]
   b7632:	bd08      	pop	{r3, pc}
   b7634:	00030220 	.word	0x00030220

000b7638 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7638:	b508      	push	{r3, lr}
   b763a:	4b02      	ldr	r3, [pc, #8]	; (b7644 <system_delay_ms+0xc>)
   b763c:	681b      	ldr	r3, [r3, #0]
   b763e:	695b      	ldr	r3, [r3, #20]
   b7640:	9301      	str	r3, [sp, #4]
   b7642:	bd08      	pop	{r3, pc}
   b7644:	00030220 	.word	0x00030220

000b7648 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7648:	b508      	push	{r3, lr}
   b764a:	4b03      	ldr	r3, [pc, #12]	; (b7658 <system_ctrl_set_app_request_handler+0x10>)
   b764c:	681b      	ldr	r3, [r3, #0]
   b764e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b7652:	9301      	str	r3, [sp, #4]
   b7654:	bd08      	pop	{r3, pc}
   b7656:	0000      	.short	0x0000
   b7658:	00030220 	.word	0x00030220

000b765c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b765c:	b508      	push	{r3, lr}
   b765e:	4b03      	ldr	r3, [pc, #12]	; (b766c <system_ctrl_set_result+0x10>)
   b7660:	681b      	ldr	r3, [r3, #0]
   b7662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b7666:	9301      	str	r3, [sp, #4]
   b7668:	bd08      	pop	{r3, pc}
   b766a:	0000      	.short	0x0000
   b766c:	00030220 	.word	0x00030220

000b7670 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7670:	b508      	push	{r3, lr}
   b7672:	4b02      	ldr	r3, [pc, #8]	; (b767c <spark_set_random_seed_from_cloud_handler+0xc>)
   b7674:	681b      	ldr	r3, [r3, #0]
   b7676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7678:	9301      	str	r3, [sp, #4]
   b767a:	bd08      	pop	{r3, pc}
   b767c:	00030244 	.word	0x00030244

000b7680 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7680:	b508      	push	{r3, lr}
   b7682:	4b02      	ldr	r3, [pc, #8]	; (b768c <network_connect+0xc>)
   b7684:	681b      	ldr	r3, [r3, #0]
   b7686:	685b      	ldr	r3, [r3, #4]
   b7688:	9301      	str	r3, [sp, #4]
   b768a:	bd08      	pop	{r3, pc}
   b768c:	00030240 	.word	0x00030240

000b7690 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7690:	b508      	push	{r3, lr}
   b7692:	4b02      	ldr	r3, [pc, #8]	; (b769c <network_connecting+0xc>)
   b7694:	681b      	ldr	r3, [r3, #0]
   b7696:	689b      	ldr	r3, [r3, #8]
   b7698:	9301      	str	r3, [sp, #4]
   b769a:	bd08      	pop	{r3, pc}
   b769c:	00030240 	.word	0x00030240

000b76a0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b76a0:	b508      	push	{r3, lr}
   b76a2:	4b02      	ldr	r3, [pc, #8]	; (b76ac <network_disconnect+0xc>)
   b76a4:	681b      	ldr	r3, [r3, #0]
   b76a6:	68db      	ldr	r3, [r3, #12]
   b76a8:	9301      	str	r3, [sp, #4]
   b76aa:	bd08      	pop	{r3, pc}
   b76ac:	00030240 	.word	0x00030240

000b76b0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b76b0:	b508      	push	{r3, lr}
   b76b2:	4b02      	ldr	r3, [pc, #8]	; (b76bc <network_ready+0xc>)
   b76b4:	681b      	ldr	r3, [r3, #0]
   b76b6:	691b      	ldr	r3, [r3, #16]
   b76b8:	9301      	str	r3, [sp, #4]
   b76ba:	bd08      	pop	{r3, pc}
   b76bc:	00030240 	.word	0x00030240

000b76c0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b76c0:	b508      	push	{r3, lr}
   b76c2:	4b02      	ldr	r3, [pc, #8]	; (b76cc <network_on+0xc>)
   b76c4:	681b      	ldr	r3, [r3, #0]
   b76c6:	695b      	ldr	r3, [r3, #20]
   b76c8:	9301      	str	r3, [sp, #4]
   b76ca:	bd08      	pop	{r3, pc}
   b76cc:	00030240 	.word	0x00030240

000b76d0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b76d0:	b508      	push	{r3, lr}
   b76d2:	4b02      	ldr	r3, [pc, #8]	; (b76dc <network_off+0xc>)
   b76d4:	681b      	ldr	r3, [r3, #0]
   b76d6:	699b      	ldr	r3, [r3, #24]
   b76d8:	9301      	str	r3, [sp, #4]
   b76da:	bd08      	pop	{r3, pc}
   b76dc:	00030240 	.word	0x00030240

000b76e0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b76e0:	b508      	push	{r3, lr}
   b76e2:	4b02      	ldr	r3, [pc, #8]	; (b76ec <network_listen+0xc>)
   b76e4:	681b      	ldr	r3, [r3, #0]
   b76e6:	69db      	ldr	r3, [r3, #28]
   b76e8:	9301      	str	r3, [sp, #4]
   b76ea:	bd08      	pop	{r3, pc}
   b76ec:	00030240 	.word	0x00030240

000b76f0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b76f0:	b508      	push	{r3, lr}
   b76f2:	4b02      	ldr	r3, [pc, #8]	; (b76fc <network_listening+0xc>)
   b76f4:	681b      	ldr	r3, [r3, #0]
   b76f6:	6a1b      	ldr	r3, [r3, #32]
   b76f8:	9301      	str	r3, [sp, #4]
   b76fa:	bd08      	pop	{r3, pc}
   b76fc:	00030240 	.word	0x00030240

000b7700 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7700:	b508      	push	{r3, lr}
   b7702:	4b02      	ldr	r3, [pc, #8]	; (b770c <network_set_listen_timeout+0xc>)
   b7704:	681b      	ldr	r3, [r3, #0]
   b7706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7708:	9301      	str	r3, [sp, #4]
   b770a:	bd08      	pop	{r3, pc}
   b770c:	00030240 	.word	0x00030240

000b7710 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7710:	b508      	push	{r3, lr}
   b7712:	4b02      	ldr	r3, [pc, #8]	; (b771c <network_get_listen_timeout+0xc>)
   b7714:	681b      	ldr	r3, [r3, #0]
   b7716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7718:	9301      	str	r3, [sp, #4]
   b771a:	bd08      	pop	{r3, pc}
   b771c:	00030240 	.word	0x00030240

000b7720 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7720:	b508      	push	{r3, lr}
   b7722:	4b02      	ldr	r3, [pc, #8]	; (b772c <network_is_on+0xc>)
   b7724:	681b      	ldr	r3, [r3, #0]
   b7726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7728:	9301      	str	r3, [sp, #4]
   b772a:	bd08      	pop	{r3, pc}
   b772c:	00030240 	.word	0x00030240

000b7730 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7730:	b508      	push	{r3, lr}
   b7732:	4b02      	ldr	r3, [pc, #8]	; (b773c <network_is_off+0xc>)
   b7734:	681b      	ldr	r3, [r3, #0]
   b7736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7738:	9301      	str	r3, [sp, #4]
   b773a:	bd08      	pop	{r3, pc}
   b773c:	00030240 	.word	0x00030240

000b7740 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7740:	b508      	push	{r3, lr}
   b7742:	4b02      	ldr	r3, [pc, #8]	; (b774c <malloc+0xc>)
   b7744:	681b      	ldr	r3, [r3, #0]
   b7746:	681b      	ldr	r3, [r3, #0]
   b7748:	9301      	str	r3, [sp, #4]
   b774a:	bd08      	pop	{r3, pc}
   b774c:	0003021c 	.word	0x0003021c

000b7750 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7750:	b508      	push	{r3, lr}
   b7752:	4b02      	ldr	r3, [pc, #8]	; (b775c <free+0xc>)
   b7754:	681b      	ldr	r3, [r3, #0]
   b7756:	685b      	ldr	r3, [r3, #4]
   b7758:	9301      	str	r3, [sp, #4]
   b775a:	bd08      	pop	{r3, pc}
   b775c:	0003021c 	.word	0x0003021c

000b7760 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7760:	b508      	push	{r3, lr}
   b7762:	4b02      	ldr	r3, [pc, #8]	; (b776c <realloc+0xc>)
   b7764:	681b      	ldr	r3, [r3, #0]
   b7766:	689b      	ldr	r3, [r3, #8]
   b7768:	9301      	str	r3, [sp, #4]
   b776a:	bd08      	pop	{r3, pc}
   b776c:	0003021c 	.word	0x0003021c

000b7770 <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b7770:	b508      	push	{r3, lr}
   b7772:	4b02      	ldr	r3, [pc, #8]	; (b777c <sscanf+0xc>)
   b7774:	681b      	ldr	r3, [r3, #0]
   b7776:	695b      	ldr	r3, [r3, #20]
   b7778:	9301      	str	r3, [sp, #4]
   b777a:	bd08      	pop	{r3, pc}
   b777c:	0003021c 	.word	0x0003021c

000b7780 <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7780:	b508      	push	{r3, lr}
   b7782:	4b02      	ldr	r3, [pc, #8]	; (b778c <vsnprintf+0xc>)
   b7784:	681b      	ldr	r3, [r3, #0]
   b7786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7788:	9301      	str	r3, [sp, #4]
   b778a:	bd08      	pop	{r3, pc}
   b778c:	0003021c 	.word	0x0003021c

000b7790 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b7790:	b508      	push	{r3, lr}
   b7792:	4b02      	ldr	r3, [pc, #8]	; (b779c <abort+0xc>)
   b7794:	681b      	ldr	r3, [r3, #0]
   b7796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7798:	9301      	str	r3, [sp, #4]
   b779a:	bd08      	pop	{r3, pc}
   b779c:	0003021c 	.word	0x0003021c

000b77a0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b77a0:	b508      	push	{r3, lr}
   b77a2:	4b02      	ldr	r3, [pc, #8]	; (b77ac <_malloc_r+0xc>)
   b77a4:	681b      	ldr	r3, [r3, #0]
   b77a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b77a8:	9301      	str	r3, [sp, #4]
   b77aa:	bd08      	pop	{r3, pc}
   b77ac:	0003021c 	.word	0x0003021c

000b77b0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b77b0:	b508      	push	{r3, lr}
   b77b2:	4b02      	ldr	r3, [pc, #8]	; (b77bc <__errno+0xc>)
   b77b4:	681b      	ldr	r3, [r3, #0]
   b77b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b77b8:	9301      	str	r3, [sp, #4]
   b77ba:	bd08      	pop	{r3, pc}
   b77bc:	0003021c 	.word	0x0003021c

000b77c0 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b77c0:	b508      	push	{r3, lr}
   b77c2:	4b02      	ldr	r3, [pc, #8]	; (b77cc <__assert_func+0xc>)
   b77c4:	681b      	ldr	r3, [r3, #0]
   b77c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b77c8:	9301      	str	r3, [sp, #4]
   b77ca:	bd08      	pop	{r3, pc}
   b77cc:	0003021c 	.word	0x0003021c

000b77d0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b77d0:	b508      	push	{r3, lr}
   b77d2:	4b02      	ldr	r3, [pc, #8]	; (b77dc <newlib_impure_ptr_callback+0xc>)
   b77d4:	681b      	ldr	r3, [r3, #0]
   b77d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b77d8:	9301      	str	r3, [sp, #4]
   b77da:	bd08      	pop	{r3, pc}
   b77dc:	0003021c 	.word	0x0003021c

000b77e0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b77e0:	2100      	movs	r1, #0
   b77e2:	f7ff bf29 	b.w	b7638 <system_delay_ms>

000b77e6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b77e6:	4770      	bx	lr

000b77e8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b77e8:	4770      	bx	lr

000b77ea <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b77ea:	4770      	bx	lr

000b77ec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b77ec:	4770      	bx	lr
	...

000b77f0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b77f0:	4b06      	ldr	r3, [pc, #24]	; (b780c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b77f2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b77f4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b77f6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b77fa:	d005      	beq.n	b7808 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b77fc:	4608      	mov	r0, r1
   b77fe:	f002 faf1 	bl	b9de4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7802:	2800      	cmp	r0, #0
   b7804:	bf08      	it	eq
   b7806:	2400      	moveq	r4, #0
      }
   b7808:	4620      	mov	r0, r4
   b780a:	bd10      	pop	{r4, pc}
   b780c:	000bd500 	.word	0x000bd500

000b7810 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7810:	4b06      	ldr	r3, [pc, #24]	; (b782c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7812:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7814:	b510      	push	{r4, lr}
   b7816:	f100 040c 	add.w	r4, r0, #12
	    ||
   b781a:	d005      	beq.n	b7828 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b781c:	4608      	mov	r0, r1
   b781e:	f002 fae1 	bl	b9de4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7822:	2800      	cmp	r0, #0
   b7824:	bf08      	it	eq
   b7826:	2400      	moveq	r4, #0
      }
   b7828:	4620      	mov	r0, r4
   b782a:	bd10      	pop	{r4, pc}
   b782c:	000bd500 	.word	0x000bd500

000b7830 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7830:	4b06      	ldr	r3, [pc, #24]	; (b784c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7832:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7834:	b510      	push	{r4, lr}
   b7836:	f100 040c 	add.w	r4, r0, #12
	    ||
   b783a:	d005      	beq.n	b7848 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b783c:	4608      	mov	r0, r1
   b783e:	f002 fad1 	bl	b9de4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7842:	2800      	cmp	r0, #0
   b7844:	bf08      	it	eq
   b7846:	2400      	moveq	r4, #0
      }
   b7848:	4620      	mov	r0, r4
   b784a:	bd10      	pop	{r4, pc}
   b784c:	000bd500 	.word	0x000bd500

000b7850 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7850:	b510      	push	{r4, lr}
   b7852:	2168      	movs	r1, #104	; 0x68
   b7854:	4604      	mov	r4, r0
   b7856:	f7fc fc24 	bl	b40a2 <_ZdlPvj>
   b785a:	4620      	mov	r0, r4
   b785c:	bd10      	pop	{r4, pc}

000b785e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b785e:	b510      	push	{r4, lr}
   b7860:	2128      	movs	r1, #40	; 0x28
   b7862:	4604      	mov	r4, r0
   b7864:	f7fc fc1d 	bl	b40a2 <_ZdlPvj>
   b7868:	4620      	mov	r0, r4
   b786a:	bd10      	pop	{r4, pc}

000b786c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b786c:	b510      	push	{r4, lr}
   b786e:	2130      	movs	r1, #48	; 0x30
   b7870:	4604      	mov	r4, r0
   b7872:	f7fc fc16 	bl	b40a2 <_ZdlPvj>
   b7876:	4620      	mov	r0, r4
   b7878:	bd10      	pop	{r4, pc}

000b787a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b787a:	2168      	movs	r1, #104	; 0x68
   b787c:	f7fc bc11 	b.w	b40a2 <_ZdlPvj>

000b7880 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7880:	2128      	movs	r1, #40	; 0x28
   b7882:	f7fc bc0e 	b.w	b40a2 <_ZdlPvj>

000b7886 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7886:	2130      	movs	r1, #48	; 0x30
   b7888:	f7fc bc0b 	b.w	b40a2 <_ZdlPvj>

000b788c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b788c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b788e:	2500      	movs	r5, #0
   b7890:	1cec      	adds	r4, r5, #3
   b7892:	428c      	cmp	r4, r1
   b7894:	d80d      	bhi.n	b78b2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b7896:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b7898:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b789a:	5d87      	ldrb	r7, [r0, r6]
   b789c:	4297      	cmp	r7, r2
   b789e:	d105      	bne.n	b78ac <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b78a0:	4426      	add	r6, r4
   b78a2:	42b1      	cmp	r1, r6
   b78a4:	d305      	bcc.n	b78b2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b78a6:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b78a8:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b78aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b78ac:	3401      	adds	r4, #1
   b78ae:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b78b0:	e7ee      	b.n	b7890 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b78b2:	2000      	movs	r0, #0
   b78b4:	e7f9      	b.n	b78aa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b78b8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b78b8:	4a02      	ldr	r2, [pc, #8]	; (b78c4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b78ba:	4903      	ldr	r1, [pc, #12]	; (b78c8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b78bc:	200a      	movs	r0, #10
   b78be:	f7ff bea3 	b.w	b7608 <panic_>
   b78c2:	bf00      	nop
   b78c4:	000b7399 	.word	0x000b7399
   b78c8:	000bd360 	.word	0x000bd360

000b78cc <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b78cc:	b430      	push	{r4, r5}
   b78ce:	460d      	mov	r5, r1
   b78d0:	4611      	mov	r1, r2
   b78d2:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b78d4:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b78d6:	6809      	ldr	r1, [r1, #0]
   b78d8:	6828      	ldr	r0, [r5, #0]
   b78da:	e9d3 4300 	ldrd	r4, r3, [r3]
   b78de:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b78e0:	bc30      	pop	{r4, r5}
   b78e2:	4760      	bx	ip

000b78e4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b78e4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b78e6:	b538      	push	{r3, r4, r5, lr}
   b78e8:	4604      	mov	r4, r0
	switch (__op)
   b78ea:	d102      	bne.n	b78f2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b78ec:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b78ee:	6023      	str	r3, [r4, #0]
	}
   b78f0:	e003      	b.n	b78fa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b78f2:	2a02      	cmp	r2, #2
   b78f4:	d003      	beq.n	b78fe <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b78f6:	2a03      	cmp	r2, #3
   b78f8:	d00d      	beq.n	b7916 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b78fa:	2000      	movs	r0, #0
   b78fc:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b78fe:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b7900:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b7902:	f7fc fbc8 	bl	b4096 <_Znwj>
   b7906:	4603      	mov	r3, r0
   b7908:	2800      	cmp	r0, #0
   b790a:	d0f0      	beq.n	b78ee <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b790c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b7910:	e883 0003 	stmia.w	r3, {r0, r1}
   b7914:	e7eb      	b.n	b78ee <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b7916:	6800      	ldr	r0, [r0, #0]
   b7918:	2800      	cmp	r0, #0
   b791a:	d0ee      	beq.n	b78fa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b791c:	2108      	movs	r1, #8
   b791e:	f7fc fbc0 	bl	b40a2 <_ZdlPvj>
   b7922:	e7ea      	b.n	b78fa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b7924 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b7924:	b510      	push	{r4, lr}
      if (_M_manager)
   b7926:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b7928:	4604      	mov	r4, r0
      if (_M_manager)
   b792a:	b113      	cbz	r3, b7932 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b792c:	2203      	movs	r2, #3
   b792e:	4601      	mov	r1, r0
   b7930:	4798      	blx	r3
    }
   b7932:	4620      	mov	r0, r4
   b7934:	bd10      	pop	{r4, pc}

000b7936 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7936:	b510      	push	{r4, lr}
   b7938:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b793a:	3058      	adds	r0, #88	; 0x58
   b793c:	f7ff fff2 	bl	b7924 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b7940:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b7944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7948:	f001 bb98 	b.w	b907c <_ZN6StringD1Ev>

000b794c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b794c:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b794e:	6843      	ldr	r3, [r0, #4]
   b7950:	3b01      	subs	r3, #1
    {
   b7952:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b7954:	6043      	str	r3, [r0, #4]
   b7956:	b963      	cbnz	r3, b7972 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b7958:	6803      	ldr	r3, [r0, #0]
   b795a:	689b      	ldr	r3, [r3, #8]
   b795c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b795e:	68a3      	ldr	r3, [r4, #8]
   b7960:	3b01      	subs	r3, #1
   b7962:	60a3      	str	r3, [r4, #8]
   b7964:	b92b      	cbnz	r3, b7972 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b7966:	6823      	ldr	r3, [r4, #0]
   b7968:	4620      	mov	r0, r4
   b796a:	68db      	ldr	r3, [r3, #12]
    }
   b796c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b7970:	4718      	bx	r3
    }
   b7972:	bd10      	pop	{r4, pc}

000b7974 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b7974:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b7978:	b2da      	uxtb	r2, r3
   b797a:	2a09      	cmp	r2, #9
   b797c:	d801      	bhi.n	b7982 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b797e:	4618      	mov	r0, r3
   b7980:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b7982:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b7986:	2b05      	cmp	r3, #5
   b7988:	d801      	bhi.n	b798e <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b798a:	3857      	subs	r0, #87	; 0x57
   b798c:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b798e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b7992:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b7994:	bf94      	ite	ls
   b7996:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b7998:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b799c:	4770      	bx	lr
	...

000b79a0 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b79a0:	b510      	push	{r4, lr}
            locked_(false) {
   b79a2:	2300      	movs	r3, #0
   b79a4:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b79a6:	4b04      	ldr	r3, [pc, #16]	; (b79b8 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b79a8:	4604      	mov	r4, r0
   b79aa:	6818      	ldr	r0, [r3, #0]
   b79ac:	f7ff fcdc 	bl	b7368 <os_mutex_recursive_lock>
        locked_ = true;
   b79b0:	2301      	movs	r3, #1
   b79b2:	7023      	strb	r3, [r4, #0]
    }
   b79b4:	4620      	mov	r0, r4
   b79b6:	bd10      	pop	{r4, pc}
   b79b8:	2003e6c0 	.word	0x2003e6c0

000b79bc <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b79bc:	b510      	push	{r4, lr}
        if (locked_) {
   b79be:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b79c0:	4604      	mov	r4, r0
        if (locked_) {
   b79c2:	b11b      	cbz	r3, b79cc <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b79c4:	4b02      	ldr	r3, [pc, #8]	; (b79d0 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b79c6:	6818      	ldr	r0, [r3, #0]
   b79c8:	f7ff fcd6 	bl	b7378 <os_mutex_recursive_unlock>
    }
   b79cc:	4620      	mov	r0, r4
   b79ce:	bd10      	pop	{r4, pc}
   b79d0:	2003e6c0 	.word	0x2003e6c0

000b79d4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b79d4:	b082      	sub	sp, #8
   b79d6:	4603      	mov	r3, r0
    address_ = addr;
   b79d8:	6808      	ldr	r0, [r1, #0]
   b79da:	6849      	ldr	r1, [r1, #4]
   b79dc:	466a      	mov	r2, sp
   b79de:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b79e0:	466a      	mov	r2, sp
   b79e2:	ca03      	ldmia	r2!, {r0, r1}
   b79e4:	6018      	str	r0, [r3, #0]
}
   b79e6:	4618      	mov	r0, r3
    address_ = addr.address_;
   b79e8:	6059      	str	r1, [r3, #4]
}
   b79ea:	b002      	add	sp, #8
   b79ec:	4770      	bx	lr

000b79ee <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b79ee:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b79f0:	7982      	ldrb	r2, [r0, #6]
   b79f2:	798b      	ldrb	r3, [r1, #6]
   b79f4:	429a      	cmp	r2, r3
   b79f6:	d106      	bne.n	b7a06 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b79f8:	2206      	movs	r2, #6
   b79fa:	f003 f9e0 	bl	badbe <memcmp>
   b79fe:	fab0 f080 	clz	r0, r0
   b7a02:	0940      	lsrs	r0, r0, #5
}
   b7a04:	bd08      	pop	{r3, pc}
    return false;
   b7a06:	2000      	movs	r0, #0
   b7a08:	e7fc      	b.n	b7a04 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b7a0a <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b7a0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7a0e:	6003      	str	r3, [r0, #0]
   b7a10:	8083      	strh	r3, [r0, #4]
}
   b7a12:	2000      	movs	r0, #0
   b7a14:	4770      	bx	lr

000b7a16 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b7a16:	b508      	push	{r3, lr}
   b7a18:	4602      	mov	r2, r0
        : address_{} {
   b7a1a:	2100      	movs	r1, #0
   b7a1c:	6001      	str	r1, [r0, #0]
   b7a1e:	6041      	str	r1, [r0, #4]
    clear();
   b7a20:	f7ff fff3 	bl	b7a0a <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b7a24:	7191      	strb	r1, [r2, #6]
}
   b7a26:	4610      	mov	r0, r2
   b7a28:	bd08      	pop	{r3, pc}
	...

000b7a2c <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b7a2c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b7a2e:	2301      	movs	r3, #1
   b7a30:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7a32:	4b05      	ldr	r3, [pc, #20]	; (b7a48 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b7a34:	4602      	mov	r2, r0
   b7a36:	f103 0110 	add.w	r1, r3, #16
   b7a3a:	f853 4b04 	ldr.w	r4, [r3], #4
   b7a3e:	f842 4b04 	str.w	r4, [r2], #4
   b7a42:	428b      	cmp	r3, r1
   b7a44:	d1f9      	bne.n	b7a3a <_ZN8particle7BleUuidC1Ev+0xe>
}
   b7a46:	bd10      	pop	{r4, pc}
   b7a48:	000bd50e 	.word	0x000bd50e

000b7a4c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7a4c:	b510      	push	{r4, lr}
    if (uuid128) {
   b7a4e:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7a50:	4604      	mov	r4, r0
    if (uuid128) {
   b7a52:	b1b1      	cbz	r1, b7a82 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b7a54:	2a01      	cmp	r2, #1
   b7a56:	f101 0210 	add.w	r2, r1, #16
   b7a5a:	d10a      	bne.n	b7a72 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b7a5c:	4601      	mov	r1, r0
   b7a5e:	f853 0b04 	ldr.w	r0, [r3], #4
   b7a62:	f841 0b04 	str.w	r0, [r1], #4
   b7a66:	4293      	cmp	r3, r2
   b7a68:	d1f9      	bne.n	b7a5e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b7a6a:	2301      	movs	r3, #1
   b7a6c:	6123      	str	r3, [r4, #16]
}
   b7a6e:	4620      	mov	r0, r4
   b7a70:	bd10      	pop	{r4, pc}
   b7a72:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b7a74:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b7a78:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b7a7c:	429a      	cmp	r2, r3
   b7a7e:	d1f9      	bne.n	b7a74 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b7a80:	e7f3      	b.n	b7a6a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b7a82:	2210      	movs	r2, #16
   b7a84:	f003 f9d3 	bl	bae2e <memset>
   b7a88:	e7f1      	b.n	b7a6e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b7a8a <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b7a8a:	b538      	push	{r3, r4, r5, lr}
   b7a8c:	4604      	mov	r4, r0
   b7a8e:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b7a90:	461a      	mov	r2, r3
   b7a92:	f7ff ffdb 	bl	b7a4c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b7a96:	81a5      	strh	r5, [r4, #12]
}
   b7a98:	4620      	mov	r0, r4
   b7a9a:	bd38      	pop	{r3, r4, r5, pc}

000b7a9c <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b7a9c:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b7a9e:	6902      	ldr	r2, [r0, #16]
   b7aa0:	b922      	cbnz	r2, b7aac <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b7aa2:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7aa4:	3800      	subs	r0, #0
   b7aa6:	bf18      	it	ne
   b7aa8:	2001      	movne	r0, #1
}
   b7aaa:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7aac:	4902      	ldr	r1, [pc, #8]	; (b7ab8 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b7aae:	2210      	movs	r2, #16
   b7ab0:	f003 f985 	bl	badbe <memcmp>
   b7ab4:	e7f6      	b.n	b7aa4 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b7ab6:	bf00      	nop
   b7ab8:	000bd52e 	.word	0x000bd52e

000b7abc <_ZNK8particle7BleUuid4typeEv>:
}
   b7abc:	6900      	ldr	r0, [r0, #16]
   b7abe:	4770      	bx	lr

000b7ac0 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b7ac0:	b538      	push	{r3, r4, r5, lr}
   b7ac2:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b7ac4:	2214      	movs	r2, #20
   b7ac6:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b7ac8:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b7aca:	f003 f9b0 	bl	bae2e <memset>
    if (type_ == BleUuidType::SHORT) {
   b7ace:	6923      	ldr	r3, [r4, #16]
   b7ad0:	b91b      	cbnz	r3, b7ada <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b7ad2:	89a3      	ldrh	r3, [r4, #12]
   b7ad4:	802b      	strh	r3, [r5, #0]
}
   b7ad6:	4628      	mov	r0, r5
   b7ad8:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b7ada:	2301      	movs	r3, #1
   b7adc:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b7ade:	4621      	mov	r1, r4
   b7ae0:	462b      	mov	r3, r5
   b7ae2:	f104 0210 	add.w	r2, r4, #16
   b7ae6:	f851 0b04 	ldr.w	r0, [r1], #4
   b7aea:	f843 0b04 	str.w	r0, [r3], #4
   b7aee:	4291      	cmp	r1, r2
   b7af0:	d1f9      	bne.n	b7ae6 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b7af2:	e7f0      	b.n	b7ad6 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b7af4 <_ZNK8particle7BleUuid7shortedEv>:
}
   b7af4:	8980      	ldrh	r0, [r0, #12]
   b7af6:	4770      	bx	lr

000b7af8 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b7af8:	4770      	bx	lr

000b7afa <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b7afa:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b7afc:	6902      	ldr	r2, [r0, #16]
   b7afe:	690b      	ldr	r3, [r1, #16]
   b7b00:	429a      	cmp	r2, r3
   b7b02:	d106      	bne.n	b7b12 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b7b04:	2210      	movs	r2, #16
   b7b06:	f003 f95a 	bl	badbe <memcmp>
   b7b0a:	fab0 f080 	clz	r0, r0
   b7b0e:	0940      	lsrs	r0, r0, #5
}
   b7b10:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b7b12:	2000      	movs	r0, #0
   b7b14:	e7fc      	b.n	b7b10 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b7b18 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b7b18:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b7b1a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b7b1e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7b20:	4b34      	ldr	r3, [pc, #208]	; (b7bf4 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b7b22:	460c      	mov	r4, r1
   b7b24:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7b26:	4602      	mov	r2, r0
   b7b28:	f103 0110 	add.w	r1, r3, #16
   b7b2c:	f853 0b04 	ldr.w	r0, [r3], #4
   b7b30:	f842 0b04 	str.w	r0, [r2], #4
   b7b34:	428b      	cmp	r3, r1
   b7b36:	d1f9      	bne.n	b7b2c <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b7b38:	b344      	cbz	r4, b7b8c <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b7b3a:	2124      	movs	r1, #36	; 0x24
   b7b3c:	4620      	mov	r0, r4
   b7b3e:	f003 f9db 	bl	baef8 <strnlen>
   b7b42:	2804      	cmp	r0, #4
   b7b44:	f04f 0500 	mov.w	r5, #0
   b7b48:	d123      	bne.n	b7b92 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b7b4a:	f8ad 5004 	strh.w	r5, [sp, #4]
   b7b4e:	af01      	add	r7, sp, #4
   b7b50:	1ca5      	adds	r5, r4, #2
   b7b52:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b7b54:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b7b58:	f7ff ff0c 	bl	b7974 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b7b5c:	f1b0 0800 	subs.w	r8, r0, #0
   b7b60:	db12      	blt.n	b7b88 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b7b62:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b7b66:	f7ff ff05 	bl	b7974 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b7b6a:	2800      	cmp	r0, #0
   b7b6c:	db0c      	blt.n	b7b88 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b7b6e:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b7b70:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b7b74:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b7b76:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b7b7a:	d1eb      	bne.n	b7b54 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b7b7c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b7b80:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b7b82:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7b86:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b7b88:	2300      	movs	r3, #0
   b7b8a:	6133      	str	r3, [r6, #16]
}
   b7b8c:	b002      	add	sp, #8
   b7b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b7b92:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7b96:	2124      	movs	r1, #36	; 0x24
   b7b98:	4620      	mov	r0, r4
   b7b9a:	f003 f9ad 	bl	baef8 <strnlen>
   b7b9e:	42a8      	cmp	r0, r5
   b7ba0:	d807      	bhi.n	b7bb2 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b7ba2:	4642      	mov	r2, r8
   b7ba4:	2100      	movs	r1, #0
   b7ba6:	4630      	mov	r0, r6
}
   b7ba8:	b002      	add	sp, #8
   b7baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b7bae:	f003 b93e 	b.w	bae2e <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7bb2:	f1b8 0f00 	cmp.w	r8, #0
   b7bb6:	d0e9      	beq.n	b7b8c <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b7bb8:	5d60      	ldrb	r0, [r4, r5]
   b7bba:	f7ff fedb 	bl	b7974 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b7bbe:	0603      	lsls	r3, r0, #24
   b7bc0:	d415      	bmi.n	b7bee <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b7bc2:	0100      	lsls	r0, r0, #4
   b7bc4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b7bc8:	b2c7      	uxtb	r7, r0
   b7bca:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b7bce:	2124      	movs	r1, #36	; 0x24
   b7bd0:	4620      	mov	r0, r4
   b7bd2:	f003 f991 	bl	baef8 <strnlen>
   b7bd6:	3501      	adds	r5, #1
   b7bd8:	42a8      	cmp	r0, r5
   b7bda:	d908      	bls.n	b7bee <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b7bdc:	5d60      	ldrb	r0, [r4, r5]
   b7bde:	f7ff fec9 	bl	b7974 <_ZN8particle11hexToNibbleEc>
   b7be2:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b7be4:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b7be6:	bfa4      	itt	ge
   b7be8:	4338      	orrge	r0, r7
   b7bea:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7bee:	3501      	adds	r5, #1
   b7bf0:	e7d1      	b.n	b7b96 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b7bf2:	bf00      	nop
   b7bf4:	000bd50e 	.word	0x000bd50e

000b7bf8 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b7bf8:	b513      	push	{r0, r1, r4, lr}
   b7bfa:	4604      	mov	r4, r0
   b7bfc:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b7bfe:	f7ff ff15 	bl	b7a2c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b7c02:	4620      	mov	r0, r4
   b7c04:	9901      	ldr	r1, [sp, #4]
   b7c06:	f7ff ff87 	bl	b7b18 <_ZN8particle7BleUuid9constructEPKc>
}
   b7c0a:	4620      	mov	r0, r4
   b7c0c:	b002      	add	sp, #8
   b7c0e:	bd10      	pop	{r4, pc}

000b7c10 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b7c10:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b7c12:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7c16:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b7c18:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b7c1a:	8043      	strh	r3, [r0, #2]
   b7c1c:	220e      	movs	r2, #14
   b7c1e:	4629      	mov	r1, r5
   b7c20:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b7c22:	7105      	strb	r5, [r0, #4]
   b7c24:	3006      	adds	r0, #6
   b7c26:	f003 f902 	bl	bae2e <memset>
   b7c2a:	f104 0014 	add.w	r0, r4, #20
   b7c2e:	f7ff fefd 	bl	b7a2c <_ZN8particle7BleUuidC1Ev>
   b7c32:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b7c36:	f7ff fef9 	bl	b7a2c <_ZN8particle7BleUuidC1Ev>
   b7c3a:	4904      	ldr	r1, [pc, #16]	; (b7c4c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b7c3c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7c40:	f001 fa67 	bl	b9112 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b7c44:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b7c46:	4620      	mov	r0, r4
   b7c48:	bd38      	pop	{r3, r4, r5, pc}
   b7c4a:	bf00      	nop
   b7c4c:	000bd32a 	.word	0x000bd32a

000b7c50 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b7c50:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b7c52:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b7c56:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b7c5a:	4293      	cmp	r3, r2
   b7c5c:	4618      	mov	r0, r3
   b7c5e:	d006      	beq.n	b7c6e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b7c60:	6804      	ldr	r4, [r0, #0]
   b7c62:	8824      	ldrh	r4, [r4, #0]
   b7c64:	428c      	cmp	r4, r1
   b7c66:	f103 0308 	add.w	r3, r3, #8
   b7c6a:	d1f6      	bne.n	b7c5a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b7c6c:	bd10      	pop	{r4, pc}
        return nullptr;
   b7c6e:	2000      	movs	r0, #0
   b7c70:	e7fc      	b.n	b7c6c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b7c74 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b7c74:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7c76:	4606      	mov	r6, r0
   b7c78:	b085      	sub	sp, #20
   b7c7a:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b7c7c:	460d      	mov	r5, r1
   b7c7e:	2900      	cmp	r1, #0
   b7c80:	d050      	beq.n	b7d24 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b7c82:	2a00      	cmp	r2, #0
   b7c84:	d04e      	beq.n	b7d24 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b7c86:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b7c88:	7823      	ldrb	r3, [r4, #0]
   b7c8a:	2af4      	cmp	r2, #244	; 0xf4
   b7c8c:	bf28      	it	cs
   b7c8e:	22f4      	movcs	r2, #244	; 0xf4
   b7c90:	b343      	cbz	r3, b7ce4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b7c92:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b7c94:	0798      	lsls	r0, r3, #30
   b7c96:	d509      	bpl.n	b7cac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b7c98:	89a0      	ldrh	r0, [r4, #12]
   b7c9a:	9203      	str	r2, [sp, #12]
   b7c9c:	2300      	movs	r3, #0
   b7c9e:	f7ff fb15 	bl	b72cc <hal_ble_gatt_server_set_characteristic_value>
   b7ca2:	2800      	cmp	r0, #0
   b7ca4:	9a03      	ldr	r2, [sp, #12]
   b7ca6:	da03      	bge.n	b7cb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b7ca8:	b005      	add	sp, #20
   b7caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b7cac:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7cb0:	6834      	ldr	r4, [r6, #0]
   b7cb2:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b7cb4:	06d9      	lsls	r1, r3, #27
   b7cb6:	d509      	bpl.n	b7ccc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b7cb8:	2f01      	cmp	r7, #1
   b7cba:	d007      	beq.n	b7ccc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7cbc:	89a0      	ldrh	r0, [r4, #12]
   b7cbe:	2300      	movs	r3, #0
   b7cc0:	4629      	mov	r1, r5
}
   b7cc2:	b005      	add	sp, #20
   b7cc4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7cc8:	f7ff bb32 	b.w	b7330 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b7ccc:	069b      	lsls	r3, r3, #26
   b7cce:	d5eb      	bpl.n	b7ca8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b7cd0:	2f02      	cmp	r7, #2
   b7cd2:	d0e9      	beq.n	b7ca8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7cd4:	89a0      	ldrh	r0, [r4, #12]
   b7cd6:	2300      	movs	r3, #0
   b7cd8:	4629      	mov	r1, r5
}
   b7cda:	b005      	add	sp, #20
   b7cdc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7ce0:	f7ff bb30 	b.w	b7344 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b7ce4:	8860      	ldrh	r0, [r4, #2]
   b7ce6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7cea:	4288      	cmp	r0, r1
   b7cec:	d01c      	beq.n	b7d28 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b7cee:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b7cf0:	074e      	lsls	r6, r1, #29
   b7cf2:	d501      	bpl.n	b7cf8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b7cf4:	2f01      	cmp	r7, #1
   b7cf6:	d104      	bne.n	b7d02 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7cf8:	070b      	lsls	r3, r1, #28
   b7cfa:	d409      	bmi.n	b7d10 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b7cfc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7d00:	e7d2      	b.n	b7ca8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b7d02:	89a1      	ldrh	r1, [r4, #12]
   b7d04:	9300      	str	r3, [sp, #0]
   b7d06:	4613      	mov	r3, r2
   b7d08:	462a      	mov	r2, r5
   b7d0a:	f7ff faf3 	bl	b72f4 <hal_ble_gatt_client_write_without_response>
   b7d0e:	e7cb      	b.n	b7ca8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7d10:	2f02      	cmp	r7, #2
   b7d12:	d0f3      	beq.n	b7cfc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b7d14:	2300      	movs	r3, #0
   b7d16:	89a1      	ldrh	r1, [r4, #12]
   b7d18:	9300      	str	r3, [sp, #0]
   b7d1a:	4613      	mov	r3, r2
   b7d1c:	462a      	mov	r2, r5
   b7d1e:	f7ff fadf 	bl	b72e0 <hal_ble_gatt_client_write_with_response>
   b7d22:	e7c1      	b.n	b7ca8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b7d24:	4802      	ldr	r0, [pc, #8]	; (b7d30 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b7d26:	e7bf      	b.n	b7ca8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b7d28:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b7d2c:	e7bc      	b.n	b7ca8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b7d2e:	bf00      	nop
   b7d30:	fffffef2 	.word	0xfffffef2

000b7d34 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b7d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7d36:	460c      	mov	r4, r1
   b7d38:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b7d3a:	21f4      	movs	r1, #244	; 0xf4
   b7d3c:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b7d3e:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b7d40:	f003 f8da 	bl	baef8 <strnlen>
   b7d44:	9b01      	ldr	r3, [sp, #4]
   b7d46:	4602      	mov	r2, r0
   b7d48:	4621      	mov	r1, r4
   b7d4a:	4628      	mov	r0, r5
}
   b7d4c:	b003      	add	sp, #12
   b7d4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b7d52:	f7ff bf8f 	b.w	b7c74 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000b7d58 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b7d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7d5c:	2600      	movs	r6, #0
   b7d5e:	6006      	str	r6, [r0, #0]
   b7d60:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7d62:	2028      	movs	r0, #40	; 0x28
   b7d64:	460c      	mov	r4, r1
   b7d66:	f7fc f996 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b7d6a:	1e05      	subs	r5, r0, #0
   b7d6c:	f105 080c 	add.w	r8, r5, #12
   b7d70:	d00f      	beq.n	b7d92 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b7d72:	2301      	movs	r3, #1
   b7d74:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7d78:	4b08      	ldr	r3, [pc, #32]	; (b7d9c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b7d7a:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b7d7c:	4640      	mov	r0, r8
   b7d7e:	f7ff fe55 	bl	b7a2c <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b7d82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b7d84:	622e      	str	r6, [r5, #32]
   b7d86:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b7d8a:	4646      	mov	r6, r8
   b7d8c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b7d8e:	6823      	ldr	r3, [r4, #0]
   b7d90:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b7d92:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b7d96:	4638      	mov	r0, r7
   b7d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7d9c:	000bd4d0 	.word	0x000bd4d0

000b7da0 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b7da0:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7da2:	2500      	movs	r5, #0
   b7da4:	6005      	str	r5, [r0, #0]
   b7da6:	4606      	mov	r6, r0
   b7da8:	2030      	movs	r0, #48	; 0x30
   b7daa:	f7fc f974 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b7dae:	4604      	mov	r4, r0
   b7db0:	b188      	cbz	r0, b7dd6 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b7db2:	2301      	movs	r3, #1
   b7db4:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b7db8:	4b09      	ldr	r3, [pc, #36]	; (b7de0 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b7dba:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b7dbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7dc0:	8183      	strh	r3, [r0, #12]
   b7dc2:	300e      	adds	r0, #14
   b7dc4:	f7ff fe27 	bl	b7a16 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b7dc8:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b7dcc:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b7dd0:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b7dd4:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b7dd6:	6074      	str	r4, [r6, #4]
   b7dd8:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b7dda:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b7ddc:	4630      	mov	r0, r6
   b7dde:	bd70      	pop	{r4, r5, r6, pc}
   b7de0:	000bd4ec 	.word	0x000bd4ec

000b7de4 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b7de4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7de6:	460d      	mov	r5, r1
   b7de8:	4604      	mov	r4, r0
    WiringBleLock lk;
   b7dea:	a801      	add	r0, sp, #4
   b7dec:	f7ff fdd8 	bl	b79a0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b7df0:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b7df2:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b7df6:	6023      	str	r3, [r4, #0]
   b7df8:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b7dfc:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b7dfe:	a801      	add	r0, sp, #4
   b7e00:	f7ff fddc 	bl	b79bc <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b7e04:	4620      	mov	r0, r4
   b7e06:	b003      	add	sp, #12
   b7e08:	bd30      	pop	{r4, r5, pc}

000b7e0a <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b7e0a:	b530      	push	{r4, r5, lr}
   b7e0c:	4605      	mov	r5, r0
   b7e0e:	b087      	sub	sp, #28
   b7e10:	460c      	mov	r4, r1
    WiringBleLock lk;
   b7e12:	a801      	add	r0, sp, #4
   b7e14:	f7ff fdc4 	bl	b79a0 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b7e18:	682a      	ldr	r2, [r5, #0]
   b7e1a:	6823      	ldr	r3, [r4, #0]
   b7e1c:	8812      	ldrh	r2, [r2, #0]
   b7e1e:	881b      	ldrh	r3, [r3, #0]
   b7e20:	429a      	cmp	r2, r3
   b7e22:	d10d      	bne.n	b7e40 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b7e24:	4629      	mov	r1, r5
   b7e26:	a802      	add	r0, sp, #8
   b7e28:	f7ff ffdc 	bl	b7de4 <_ZNK8particle13BlePeerDevice7addressEv>
   b7e2c:	4621      	mov	r1, r4
   b7e2e:	a804      	add	r0, sp, #16
   b7e30:	f7ff ffd8 	bl	b7de4 <_ZNK8particle13BlePeerDevice7addressEv>
   b7e34:	a904      	add	r1, sp, #16
   b7e36:	a802      	add	r0, sp, #8
   b7e38:	f7ff fdd9 	bl	b79ee <_ZNK8particle10BleAddresseqERKS0_>
   b7e3c:	4604      	mov	r4, r0
   b7e3e:	b900      	cbnz	r0, b7e42 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b7e40:	2400      	movs	r4, #0
    WiringBleLock lk;
   b7e42:	a801      	add	r0, sp, #4
   b7e44:	f7ff fdba 	bl	b79bc <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b7e48:	4620      	mov	r0, r4
   b7e4a:	b007      	add	sp, #28
   b7e4c:	bd30      	pop	{r4, r5, pc}
	...

000b7e50 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b7e50:	b510      	push	{r4, lr}
   b7e52:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b7e54:	2064      	movs	r0, #100	; 0x64
   b7e56:	f7fc f91e 	bl	b4096 <_Znwj>
   b7e5a:	b168      	cbz	r0, b7e78 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b7e5c:	2300      	movs	r3, #0
   b7e5e:	e9c0 3300 	strd	r3, r3, [r0]
   b7e62:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b7e66:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b7e6a:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b7e6e:	6203      	str	r3, [r0, #32]
   b7e70:	62c3      	str	r3, [r0, #44]	; 0x2c
   b7e72:	63c3      	str	r3, [r0, #60]	; 0x3c
   b7e74:	64c3      	str	r3, [r0, #76]	; 0x4c
   b7e76:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b7e78:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b7e7a:	b920      	cbnz	r0, b7e86 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b7e7c:	4a0a      	ldr	r2, [pc, #40]	; (b7ea8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b7e7e:	490b      	ldr	r1, [pc, #44]	; (b7eac <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b7e80:	200a      	movs	r0, #10
   b7e82:	f7ff fbc1 	bl	b7608 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b7e86:	2000      	movs	r0, #0
   b7e88:	f7ff f9ec 	bl	b7264 <hal_ble_stack_init>
   b7e8c:	b120      	cbz	r0, b7e98 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b7e8e:	4a06      	ldr	r2, [pc, #24]	; (b7ea8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b7e90:	4907      	ldr	r1, [pc, #28]	; (b7eb0 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b7e92:	200a      	movs	r0, #10
   b7e94:	f7ff fbb8 	bl	b7608 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b7e98:	6821      	ldr	r1, [r4, #0]
   b7e9a:	4806      	ldr	r0, [pc, #24]	; (b7eb4 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b7e9c:	2200      	movs	r2, #0
   b7e9e:	f7ff fa3d 	bl	b731c <hal_ble_set_callback_on_periph_link_events>
}
   b7ea2:	4620      	mov	r0, r4
   b7ea4:	bd10      	pop	{r4, pc}
   b7ea6:	bf00      	nop
   b7ea8:	000b7399 	.word	0x000b7399
   b7eac:	000bd360 	.word	0x000bd360
   b7eb0:	000bd39e 	.word	0x000bd39e
   b7eb4:	000b8439 	.word	0x000b8439

000b7eb8 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b7eb8:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b7eba:	4c0a      	ldr	r4, [pc, #40]	; (b7ee4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b7ebc:	7823      	ldrb	r3, [r4, #0]
   b7ebe:	f3bf 8f5b 	dmb	ish
   b7ec2:	07db      	lsls	r3, r3, #31
   b7ec4:	d40c      	bmi.n	b7ee0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b7ec6:	4620      	mov	r0, r4
   b7ec8:	f7fc f8ed 	bl	b40a6 <__cxa_guard_acquire>
   b7ecc:	b140      	cbz	r0, b7ee0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b7ece:	4806      	ldr	r0, [pc, #24]	; (b7ee8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b7ed0:	f7ff ffbe 	bl	b7e50 <_ZN8particle14BleLocalDeviceC1Ev>
   b7ed4:	4620      	mov	r0, r4
   b7ed6:	f7fc f8eb 	bl	b40b0 <__cxa_guard_release>
   b7eda:	4804      	ldr	r0, [pc, #16]	; (b7eec <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b7edc:	f002 ff5e 	bl	bad9c <atexit>
    return instance;
}
   b7ee0:	4801      	ldr	r0, [pc, #4]	; (b7ee8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b7ee2:	bd10      	pop	{r4, pc}
   b7ee4:	2003e6b8 	.word	0x2003e6b8
   b7ee8:	2003e6c4 	.word	0x2003e6c4
   b7eec:	000b8105 	.word	0x000b8105

000b7ef0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7ef0:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b7ef2:	6803      	ldr	r3, [r0, #0]
   b7ef4:	3b09      	subs	r3, #9
   b7ef6:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7ef8:	b08d      	sub	sp, #52	; 0x34
   b7efa:	4604      	mov	r4, r0
   b7efc:	460d      	mov	r5, r1
    switch (event->type) {
   b7efe:	d811      	bhi.n	b7f24 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b7f00:	f7ff ffda 	bl	b7eb8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b7f04:	88a1      	ldrh	r1, [r4, #4]
   b7f06:	6800      	ldr	r0, [r0, #0]
   b7f08:	f7ff fea2 	bl	b7c50 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b7f0c:	4603      	mov	r3, r0
   b7f0e:	b958      	cbnz	r0, b7f28 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b7f10:	2220      	movs	r2, #32
   b7f12:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b7f16:	4a0b      	ldr	r2, [pc, #44]	; (b7f44 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b7f18:	9200      	str	r2, [sp, #0]
   b7f1a:	490b      	ldr	r1, [pc, #44]	; (b7f48 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b7f1c:	aa04      	add	r2, sp, #16
   b7f1e:	2032      	movs	r0, #50	; 0x32
   b7f20:	f7ff fb7a 	bl	b7618 <log_message>
}
   b7f24:	b00d      	add	sp, #52	; 0x34
   b7f26:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b7f28:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b7f2a:	2a00      	cmp	r2, #0
   b7f2c:	d0fa      	beq.n	b7f24 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b7f2e:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7f32:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b7f36:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b7f3a:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b7f3c:	aa04      	add	r2, sp, #16
   b7f3e:	a903      	add	r1, sp, #12
   b7f40:	47a0      	blx	r4
}
   b7f42:	e7ef      	b.n	b7f24 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b7f44:	000bd3e0 	.word	0x000bd3e0
   b7f48:	000bd377 	.word	0x000bd377

000b7f4c <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b7f4c:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b7f4e:	2000      	movs	r0, #0
   b7f50:	f7ff f988 	bl	b7264 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b7f54:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b7f58:	bd08      	pop	{r3, pc}

000b7f5a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b7f5a:	b919      	cbnz	r1, b7f64 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b7f5c:	460a      	mov	r2, r1
   b7f5e:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b7f60:	f7ff b988 	b.w	b7274 <hal_ble_gap_set_advertising_data>
   b7f64:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7f68:	2200      	movs	r2, #0
   b7f6a:	e7f9      	b.n	b7f60 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b7f6c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b7f6c:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b7f6e:	1e14      	subs	r4, r2, #0
   b7f70:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b7f72:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b7f74:	db02      	blt.n	b7f7c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b7f76:	1862      	adds	r2, r4, r1
   b7f78:	429a      	cmp	r2, r3
   b7f7a:	dd00      	ble.n	b7f7e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b7f7c:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b7f7e:	682a      	ldr	r2, [r5, #0]
   b7f80:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b7f82:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b7f84:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7f86:	1a52      	subs	r2, r2, r1
   b7f88:	f002 ff37 	bl	badfa <memmove>
    size_ -= n;
   b7f8c:	686a      	ldr	r2, [r5, #4]
   b7f8e:	1b12      	subs	r2, r2, r4
   b7f90:	606a      	str	r2, [r5, #4]
}
   b7f92:	bd38      	pop	{r3, r4, r5, pc}

000b7f94 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b7f94:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b7f96:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b7f98:	4604      	mov	r4, r0
   b7f9a:	460d      	mov	r5, r1
   b7f9c:	ab01      	add	r3, sp, #4
   b7f9e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7fa2:	f7ff fc73 	bl	b788c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b7fa6:	4602      	mov	r2, r0
   b7fa8:	b138      	cbz	r0, b7fba <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b7faa:	9901      	ldr	r1, [sp, #4]
   b7fac:	4620      	mov	r0, r4
   b7fae:	f7ff ffdd 	bl	b7f6c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b7fb2:	4629      	mov	r1, r5
   b7fb4:	4620      	mov	r0, r4
   b7fb6:	f7ff ffed 	bl	b7f94 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b7fba:	b003      	add	sp, #12
   b7fbc:	bd30      	pop	{r4, r5, pc}

000b7fbe <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b7fbe:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b7fc0:	460c      	mov	r4, r1
   b7fc2:	b929      	cbnz	r1, b7fd0 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b7fc4:	460a      	mov	r2, r1
   b7fc6:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b7fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b7fcc:	f7ff b95a 	b.w	b7284 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b7fd0:	2101      	movs	r1, #1
   b7fd2:	4620      	mov	r0, r4
   b7fd4:	f7ff ffde 	bl	b7f94 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b7fd8:	e9d4 0100 	ldrd	r0, r1, [r4]
   b7fdc:	2200      	movs	r2, #0
   b7fde:	e7f3      	b.n	b7fc8 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b7fe0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b7fe0:	b538      	push	{r3, r4, r5, lr}
   b7fe2:	4604      	mov	r4, r0
   b7fe4:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b7fe6:	f7ff ffb8 	bl	b7f5a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b7fea:	2800      	cmp	r0, #0
   b7fec:	db0a      	blt.n	b8004 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b7fee:	4629      	mov	r1, r5
   b7ff0:	4620      	mov	r0, r4
   b7ff2:	f7ff ffe4 	bl	b7fbe <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b7ff6:	2800      	cmp	r0, #0
   b7ff8:	db04      	blt.n	b8004 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b7ffa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b7ffe:	2000      	movs	r0, #0
   b8000:	f7ff b948 	b.w	b7294 <hal_ble_gap_start_advertising>
}
   b8004:	bd38      	pop	{r3, r4, r5, pc}
	...

000b8008 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b8008:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b800a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b800c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b800e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8010:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b8012:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8014:	f7fc f83f 	bl	b4096 <_Znwj>
   b8018:	b118      	cbz	r0, b8022 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b801a:	682b      	ldr	r3, [r5, #0]
   b801c:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b801e:	686b      	ldr	r3, [r5, #4]
   b8020:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b8022:	4b03      	ldr	r3, [pc, #12]	; (b8030 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b8024:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8026:	4b03      	ldr	r3, [pc, #12]	; (b8034 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8028:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b802a:	60a3      	str	r3, [r4, #8]
      }
   b802c:	4620      	mov	r0, r4
   b802e:	bd38      	pop	{r3, r4, r5, pc}
   b8030:	000b78cd 	.word	0x000b78cd
   b8034:	000b78e5 	.word	0x000b78e5

000b8038 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b8038:	680b      	ldr	r3, [r1, #0]
   b803a:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b803c:	b113      	cbz	r3, b8044 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b803e:	685a      	ldr	r2, [r3, #4]
   b8040:	3201      	adds	r2, #1
   b8042:	605a      	str	r2, [r3, #4]
      }
   b8044:	4770      	bx	lr

000b8046 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b8046:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8048:	f851 3b04 	ldr.w	r3, [r1], #4
   b804c:	4604      	mov	r4, r0
   b804e:	f840 3b04 	str.w	r3, [r0], #4
   b8052:	f7ff fff1 	bl	b8038 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b8056:	6823      	ldr	r3, [r4, #0]
   b8058:	b90b      	cbnz	r3, b805e <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b805a:	f7ff fc2d 	bl	b78b8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b805e:	4620      	mov	r0, r4
   b8060:	bd10      	pop	{r4, pc}

000b8062 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b8062:	b510      	push	{r4, lr}
   b8064:	f851 3b04 	ldr.w	r3, [r1], #4
   b8068:	4604      	mov	r4, r0
   b806a:	f840 3b04 	str.w	r3, [r0], #4
   b806e:	f7ff ffe3 	bl	b8038 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b8072:	4620      	mov	r0, r4
   b8074:	bd10      	pop	{r4, pc}

000b8076 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b8076:	b510      	push	{r4, lr}
   b8078:	f851 3b04 	ldr.w	r3, [r1], #4
   b807c:	4604      	mov	r4, r0
   b807e:	f840 3b04 	str.w	r3, [r0], #4
   b8082:	f7ff ffd9 	bl	b8038 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b8086:	4620      	mov	r0, r4
   b8088:	bd10      	pop	{r4, pc}

000b808a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b808a:	b510      	push	{r4, lr}
   b808c:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b808e:	6800      	ldr	r0, [r0, #0]
   b8090:	b108      	cbz	r0, b8096 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b8092:	f7ff fc5b 	bl	b794c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b8096:	4620      	mov	r0, r4
   b8098:	bd10      	pop	{r4, pc}

000b809a <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b809a:	b510      	push	{r4, lr}
   b809c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b809e:	3004      	adds	r0, #4
   b80a0:	f7ff fff3 	bl	b808a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b80a4:	4620      	mov	r0, r4
   b80a6:	bd10      	pop	{r4, pc}

000b80a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b80a8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b80aa:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b80ae:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b80b0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b80b4:	42ae      	cmp	r6, r5
   b80b6:	d004      	beq.n	b80c2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b80b8:	1d28      	adds	r0, r5, #4
   b80ba:	f7ff ffe6 	bl	b808a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b80be:	3508      	adds	r5, #8
   b80c0:	e7f8      	b.n	b80b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b80c2:	6820      	ldr	r0, [r4, #0]
   b80c4:	f7ff fb44 	bl	b7750 <free>
}
   b80c8:	4620      	mov	r0, r4
   b80ca:	bd70      	pop	{r4, r5, r6, pc}

000b80cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b80cc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b80ce:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b80d2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b80d4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b80d8:	42ae      	cmp	r6, r5
   b80da:	d004      	beq.n	b80e6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b80dc:	1d28      	adds	r0, r5, #4
   b80de:	f7ff ffd4 	bl	b808a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b80e2:	3508      	adds	r5, #8
   b80e4:	e7f8      	b.n	b80d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b80e6:	6820      	ldr	r0, [r4, #0]
   b80e8:	f7ff fb32 	bl	b7750 <free>
}
   b80ec:	4620      	mov	r0, r4
   b80ee:	bd70      	pop	{r4, r5, r6, pc}

000b80f0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b80f0:	b510      	push	{r4, lr}
   b80f2:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b80f4:	3024      	adds	r0, #36	; 0x24
   b80f6:	f7ff ffe9 	bl	b80cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b80fa:	f104 0018 	add.w	r0, r4, #24
   b80fe:	f7ff ffd3 	bl	b80a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b8102:	bd10      	pop	{r4, pc}

000b8104 <__tcf_0>:
    static BleLocalDevice instance;
   b8104:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b8106:	4b17      	ldr	r3, [pc, #92]	; (b8164 <__tcf_0+0x60>)
   b8108:	681c      	ldr	r4, [r3, #0]
   b810a:	b354      	cbz	r4, b8162 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b810c:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b8110:	f7ff fc08 	bl	b7924 <_ZNSt14_Function_baseD1Ev>
   b8114:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8118:	f7ff fc04 	bl	b7924 <_ZNSt14_Function_baseD1Ev>
   b811c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8120:	f7ff fc00 	bl	b7924 <_ZNSt14_Function_baseD1Ev>
   b8124:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b8128:	f7ff fbfc 	bl	b7924 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b812c:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b8130:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8134:	42ae      	cmp	r6, r5
   b8136:	d004      	beq.n	b8142 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b8138:	1d28      	adds	r0, r5, #4
   b813a:	f7ff ffa6 	bl	b808a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b813e:	3508      	adds	r5, #8
   b8140:	e7f8      	b.n	b8134 <__tcf_0+0x30>
    ::free(ptr);
   b8142:	69a0      	ldr	r0, [r4, #24]
   b8144:	f7ff fb04 	bl	b7750 <free>
    ~BleLocalDeviceImpl() = default;
   b8148:	f104 000c 	add.w	r0, r4, #12
   b814c:	f7ff ffbe 	bl	b80cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b8150:	4620      	mov	r0, r4
   b8152:	f7ff ffa9 	bl	b80a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b8156:	4620      	mov	r0, r4
   b8158:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b815a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b815e:	f7fb bfa0 	b.w	b40a2 <_ZdlPvj>
   b8162:	bd70      	pop	{r4, r5, r6, pc}
   b8164:	2003e6c4 	.word	0x2003e6c4

000b8168 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b8168:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b816a:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b816c:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b8170:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b8174:	6803      	ldr	r3, [r0, #0]
   b8176:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b8178:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b817a:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b817c:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b817e:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b8180:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b8182:	f7ff ff82 	bl	b808a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b8186:	b002      	add	sp, #8
   b8188:	bd10      	pop	{r4, pc}

000b818a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b818a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b818c:	b510      	push	{r4, lr}
      if (_M_empty())
   b818e:	b90a      	cbnz	r2, b8194 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b8190:	f001 fe25 	bl	b9dde <_ZSt25__throw_bad_function_callv>
    }
   b8194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8198:	68c3      	ldr	r3, [r0, #12]
   b819a:	4718      	bx	r3

000b819c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b819c:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b819e:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b81a0:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b81a2:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b81a4:	dd03      	ble.n	b81ae <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b81a6:	f7ff fadb 	bl	b7760 <realloc>
            if (!d) {
   b81aa:	b918      	cbnz	r0, b81b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b81ac:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b81ae:	f7ff facf 	bl	b7750 <free>
        T* d = nullptr;
   b81b2:	2000      	movs	r0, #0
        data_ = d;
   b81b4:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b81b6:	60a5      	str	r5, [r4, #8]
        return true;
   b81b8:	2001      	movs	r0, #1
   b81ba:	e7f7      	b.n	b81ac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b81bc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b81bc:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b81be:	6883      	ldr	r3, [r0, #8]
   b81c0:	428b      	cmp	r3, r1
   b81c2:	da02      	bge.n	b81ca <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b81c4:	f7ff ffea 	bl	b819c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b81c8:	bd08      	pop	{r3, pc}
    return true;
   b81ca:	2001      	movs	r0, #1
   b81cc:	e7fc      	b.n	b81c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b81ce <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b81ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b81d2:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b81d4:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b81d6:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b81d8:	4419      	add	r1, r3
   b81da:	6883      	ldr	r3, [r0, #8]
   b81dc:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b81de:	4604      	mov	r4, r0
   b81e0:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b81e2:	dc12      	bgt.n	b820a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b81e4:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b81e6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b81e8:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b81ea:	1bd2      	subs	r2, r2, r7
   b81ec:	4631      	mov	r1, r6
   b81ee:	1970      	adds	r0, r6, r5
   b81f0:	f002 fe03 	bl	badfa <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b81f4:	462a      	mov	r2, r5
   b81f6:	4641      	mov	r1, r8
   b81f8:	4630      	mov	r0, r6
   b81fa:	f002 fdf0 	bl	badde <memcpy>
    size_ += n;
   b81fe:	6863      	ldr	r3, [r4, #4]
   b8200:	442b      	add	r3, r5
   b8202:	6063      	str	r3, [r4, #4]
    return true;
   b8204:	2001      	movs	r0, #1
}
   b8206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b820a:	f7ff ffc7 	bl	b819c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b820e:	2800      	cmp	r0, #0
   b8210:	d1e8      	bne.n	b81e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b8212:	e7f8      	b.n	b8206 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b8214 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8216:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8218:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b821c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b821e:	4604      	mov	r4, r0
   b8220:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8222:	da0b      	bge.n	b823c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b8224:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8226:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8228:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b822a:	1b52      	subs	r2, r2, r5
   b822c:	1c48      	adds	r0, r1, #1
   b822e:	f002 fde4 	bl	badfa <memmove>
    new(p) T(std::move(value));
   b8232:	557e      	strb	r6, [r7, r5]
    ++size_;
   b8234:	6863      	ldr	r3, [r4, #4]
   b8236:	3301      	adds	r3, #1
   b8238:	6063      	str	r3, [r4, #4]
}
   b823a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b823c:	3101      	adds	r1, #1
   b823e:	f7ff ffad 	bl	b819c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8242:	2800      	cmp	r0, #0
   b8244:	d1ee      	bne.n	b8224 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b8246:	e7f8      	b.n	b823a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b8248 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8248:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b824a:	6841      	ldr	r1, [r0, #4]
   b824c:	f7ff bfe2 	b.w	b8214 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b8250 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b8250:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b8254:	4604      	mov	r4, r0
   b8256:	461d      	mov	r5, r3
   b8258:	460f      	mov	r7, r1
   b825a:	ab01      	add	r3, sp, #4
   b825c:	4690      	mov	r8, r2
   b825e:	460a      	mov	r2, r1
   b8260:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8264:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b8268:	f7ff fb10 	bl	b788c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b826c:	1cae      	adds	r6, r5, #2
   b826e:	6863      	ldr	r3, [r4, #4]
   b8270:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b8272:	f1b9 0f00 	cmp.w	r9, #0
   b8276:	d126      	bne.n	b82c6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b8278:	b328      	cbz	r0, b82c6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b827a:	4433      	add	r3, r6
   b827c:	1a1b      	subs	r3, r3, r0
   b827e:	2bff      	cmp	r3, #255	; 0xff
   b8280:	d809      	bhi.n	b8296 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b8282:	9901      	ldr	r1, [sp, #4]
   b8284:	4620      	mov	r0, r4
   b8286:	f7ff fe71 	bl	b7f6c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b828a:	6861      	ldr	r1, [r4, #4]
   b828c:	4620      	mov	r0, r4
   b828e:	4431      	add	r1, r6
   b8290:	f7ff ff94 	bl	b81bc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b8294:	b918      	cbnz	r0, b829e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b8296:	6860      	ldr	r0, [r4, #4]
}
   b8298:	b003      	add	sp, #12
   b829a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b829e:	1c6a      	adds	r2, r5, #1
   b82a0:	9901      	ldr	r1, [sp, #4]
   b82a2:	b2d2      	uxtb	r2, r2
   b82a4:	4620      	mov	r0, r4
   b82a6:	f7ff ffb5 	bl	b8214 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b82aa:	9901      	ldr	r1, [sp, #4]
   b82ac:	463a      	mov	r2, r7
   b82ae:	3101      	adds	r1, #1
   b82b0:	4620      	mov	r0, r4
   b82b2:	f7ff ffaf 	bl	b8214 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b82b6:	9901      	ldr	r1, [sp, #4]
   b82b8:	462b      	mov	r3, r5
   b82ba:	4642      	mov	r2, r8
   b82bc:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b82be:	4620      	mov	r0, r4
   b82c0:	f7ff ff85 	bl	b81ce <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b82c4:	e7e7      	b.n	b8296 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b82c6:	18f1      	adds	r1, r6, r3
   b82c8:	29ff      	cmp	r1, #255	; 0xff
   b82ca:	d8e4      	bhi.n	b8296 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b82cc:	4620      	mov	r0, r4
   b82ce:	f7ff ff75 	bl	b81bc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b82d2:	2800      	cmp	r0, #0
   b82d4:	d0df      	beq.n	b8296 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b82d6:	1c69      	adds	r1, r5, #1
   b82d8:	b2c9      	uxtb	r1, r1
   b82da:	4620      	mov	r0, r4
   b82dc:	f7ff ffb4 	bl	b8248 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b82e0:	4639      	mov	r1, r7
   b82e2:	4620      	mov	r0, r4
   b82e4:	f7ff ffb0 	bl	b8248 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b82e8:	6861      	ldr	r1, [r4, #4]
   b82ea:	462b      	mov	r3, r5
   b82ec:	4642      	mov	r2, r8
   b82ee:	e7e6      	b.n	b82be <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b82f0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b82f0:	b430      	push	{r4, r5}
   b82f2:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b82f6:	b11a      	cbz	r2, b8300 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b82f8:	9502      	str	r5, [sp, #8]
}
   b82fa:	bc30      	pop	{r4, r5}
   b82fc:	f7ff bfa8 	b.w	b8250 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b8300:	6840      	ldr	r0, [r0, #4]
}
   b8302:	bc30      	pop	{r4, r5}
   b8304:	4770      	bx	lr

000b8306 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b8306:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b8308:	2300      	movs	r3, #0
   b830a:	e9c0 3300 	strd	r3, r3, [r0]
   b830e:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b8310:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8312:	9300      	str	r3, [sp, #0]
   b8314:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b8316:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b831a:	4619      	mov	r1, r3
   b831c:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b8320:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8322:	f7ff ffe5 	bl	b82f0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b8326:	4620      	mov	r0, r4
   b8328:	b004      	add	sp, #16
   b832a:	bd10      	pop	{r4, pc}

000b832c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b832c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b832e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8330:	4604      	mov	r4, r0
   b8332:	460d      	mov	r5, r1
   b8334:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8336:	d914      	bls.n	b8362 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8338:	4290      	cmp	r0, r2
   b833a:	d213      	bcs.n	b8364 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b833c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8340:	1a75      	subs	r5, r6, r1
   b8342:	f1a1 0708 	sub.w	r7, r1, #8
   b8346:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8348:	42b7      	cmp	r7, r6
   b834a:	d018      	beq.n	b837e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b834c:	b11c      	cbz	r4, b8356 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b834e:	4631      	mov	r1, r6
   b8350:	4620      	mov	r0, r4
   b8352:	f7ff fe90 	bl	b8076 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b8356:	1d30      	adds	r0, r6, #4
   b8358:	f7ff fe97 	bl	b808a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b835c:	3e08      	subs	r6, #8
   b835e:	3c08      	subs	r4, #8
   b8360:	e7f2      	b.n	b8348 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8362:	d00c      	beq.n	b837e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8364:	42b5      	cmp	r5, r6
   b8366:	d00a      	beq.n	b837e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8368:	b11c      	cbz	r4, b8372 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b836a:	4629      	mov	r1, r5
   b836c:	4620      	mov	r0, r4
   b836e:	f7ff fe82 	bl	b8076 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8372:	1d28      	adds	r0, r5, #4
   b8374:	f7ff fe89 	bl	b808a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8378:	3508      	adds	r5, #8
   b837a:	3408      	adds	r4, #8
   b837c:	e7f2      	b.n	b8364 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b837e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8380 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8382:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8384:	6846      	ldr	r6, [r0, #4]
   b8386:	4668      	mov	r0, sp
   b8388:	f7ff fe75 	bl	b8076 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b838c:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b8390:	429f      	cmp	r7, r3
   b8392:	db12      	blt.n	b83ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b8394:	3701      	adds	r7, #1
        if (n > 0) {
   b8396:	2f00      	cmp	r7, #0
   b8398:	dd29      	ble.n	b83ee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b839a:	00f8      	lsls	r0, r7, #3
   b839c:	f7ff f9d0 	bl	b7740 <malloc>
            if (!d) {
   b83a0:	4605      	mov	r5, r0
   b83a2:	b1f0      	cbz	r0, b83e2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b83a4:	e9d4 1200 	ldrd	r1, r2, [r4]
   b83a8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b83ac:	f7ff ffbe 	bl	b832c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b83b0:	6820      	ldr	r0, [r4, #0]
   b83b2:	f7ff f9cd 	bl	b7750 <free>
        data_ = d;
   b83b6:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b83b8:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b83ba:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b83bc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b83be:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b83c2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b83c6:	4631      	mov	r1, r6
   b83c8:	f106 0008 	add.w	r0, r6, #8
   b83cc:	f7ff ffae 	bl	b832c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b83d0:	b11e      	cbz	r6, b83da <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b83d2:	4669      	mov	r1, sp
   b83d4:	4630      	mov	r0, r6
   b83d6:	f7ff fe4e 	bl	b8076 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b83da:	6863      	ldr	r3, [r4, #4]
   b83dc:	3301      	adds	r3, #1
   b83de:	6063      	str	r3, [r4, #4]
    return true;
   b83e0:	2501      	movs	r5, #1
   b83e2:	a801      	add	r0, sp, #4
   b83e4:	f7ff fe51 	bl	b808a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b83e8:	4628      	mov	r0, r5
   b83ea:	b003      	add	sp, #12
   b83ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b83ee:	2500      	movs	r5, #0
   b83f0:	e7de      	b.n	b83b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b83f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b83f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b83f4:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b83f8:	4605      	mov	r5, r0
   b83fa:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b83fc:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b8400:	42a6      	cmp	r6, r4
   b8402:	d005      	beq.n	b8410 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b8404:	4639      	mov	r1, r7
   b8406:	4620      	mov	r0, r4
   b8408:	f7ff fcff 	bl	b7e0a <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b840c:	b108      	cbz	r0, b8412 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b840e:	b914      	cbnz	r4, b8416 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b8410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b8412:	3408      	adds	r4, #8
   b8414:	e7f4      	b.n	b8400 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b8416:	1d20      	adds	r0, r4, #4
   b8418:	f7ff fe37 	bl	b808a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b841c:	e9d5 3200 	ldrd	r3, r2, [r5]
   b8420:	f104 0108 	add.w	r1, r4, #8
   b8424:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8428:	4620      	mov	r0, r4
   b842a:	f7ff ff7f 	bl	b832c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b842e:	686b      	ldr	r3, [r5, #4]
   b8430:	3b01      	subs	r3, #1
   b8432:	606b      	str	r3, [r5, #4]
    return true;
   b8434:	e7ec      	b.n	b8410 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b8438 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b8438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b843c:	4605      	mov	r5, r0
   b843e:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b8440:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b8442:	460c      	mov	r4, r1
        WiringBleLock lk;
   b8444:	f7ff faac 	bl	b79a0 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b8448:	682e      	ldr	r6, [r5, #0]
   b844a:	1ef3      	subs	r3, r6, #3
   b844c:	2b0d      	cmp	r3, #13
   b844e:	d83c      	bhi.n	b84ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8450:	e8df f013 	tbh	[pc, r3, lsl #1]
   b8454:	0053000e 	.word	0x0053000e
   b8458:	00d1003b 	.word	0x00d1003b
   b845c:	003b003b 	.word	0x003b003b
   b8460:	003b003b 	.word	0x003b003b
   b8464:	009b003b 	.word	0x009b003b
   b8468:	009b009b 	.word	0x009b009b
   b846c:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b8470:	a804      	add	r0, sp, #16
   b8472:	f7ff fc95 	bl	b7da0 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b8476:	9b04      	ldr	r3, [sp, #16]
   b8478:	89aa      	ldrh	r2, [r5, #12]
   b847a:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b847c:	6869      	ldr	r1, [r5, #4]
   b847e:	9804      	ldr	r0, [sp, #16]
   b8480:	3108      	adds	r1, #8
   b8482:	3002      	adds	r0, #2
   b8484:	f7ff faa6 	bl	b79d4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b8488:	a904      	add	r1, sp, #16
   b848a:	a806      	add	r0, sp, #24
   b848c:	f7ff fdf3 	bl	b8076 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b8490:	a906      	add	r1, sp, #24
   b8492:	f104 0018 	add.w	r0, r4, #24
   b8496:	f7ff ff73 	bl	b8380 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b849a:	4605      	mov	r5, r0
   b849c:	a807      	add	r0, sp, #28
   b849e:	f7ff fdf4 	bl	b808a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b84a2:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b84a4:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b84a6:	b9b5      	cbnz	r5, b84d6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b84a8:	4b5d      	ldr	r3, [pc, #372]	; (b8620 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b84aa:	495e      	ldr	r1, [pc, #376]	; (b8624 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b84ac:	9300      	str	r3, [sp, #0]
   b84ae:	2032      	movs	r0, #50	; 0x32
   b84b0:	462b      	mov	r3, r5
   b84b2:	aa06      	add	r2, sp, #24
   b84b4:	9507      	str	r5, [sp, #28]
   b84b6:	f7ff f8af 	bl	b7618 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b84ba:	9b04      	ldr	r3, [sp, #16]
   b84bc:	4629      	mov	r1, r5
   b84be:	8818      	ldrh	r0, [r3, #0]
   b84c0:	f7fe fef0 	bl	b72a4 <hal_ble_gap_disconnect>
   b84c4:	a805      	add	r0, sp, #20
   b84c6:	f7ff fde0 	bl	b808a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b84ca:	a803      	add	r0, sp, #12
   b84cc:	f7ff fa76 	bl	b79bc <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b84d0:	b00e      	add	sp, #56	; 0x38
   b84d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b84d6:	4a54      	ldr	r2, [pc, #336]	; (b8628 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b84d8:	9200      	str	r2, [sp, #0]
   b84da:	2300      	movs	r3, #0
   b84dc:	4951      	ldr	r1, [pc, #324]	; (b8624 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b84de:	9307      	str	r3, [sp, #28]
   b84e0:	aa06      	add	r2, sp, #24
   b84e2:	2001      	movs	r0, #1
   b84e4:	f7ff f898 	bl	b7618 <log_message>
                if (impl->connectedCallback_) {
   b84e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b84ea:	2b00      	cmp	r3, #0
   b84ec:	d0ea      	beq.n	b84c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b84ee:	a904      	add	r1, sp, #16
   b84f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b84f4:	f7ff fe49 	bl	b818a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b84f8:	e7e4      	b.n	b84c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b84fa:	89a9      	ldrh	r1, [r5, #12]
   b84fc:	4620      	mov	r0, r4
   b84fe:	f7ff fba7 	bl	b7c50 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b8502:	4606      	mov	r6, r0
   b8504:	2800      	cmp	r0, #0
   b8506:	d0e0      	beq.n	b84ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b8508:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b850a:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b850e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8512:	8029      	strh	r1, [r5, #0]
   b8514:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b8518:	429a      	cmp	r2, r3
   b851a:	d003      	beq.n	b8524 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b851c:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b8520:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b8522:	e7f9      	b.n	b8518 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b8524:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b8528:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b852c:	45b8      	cmp	r8, r7
   b852e:	d004      	beq.n	b853a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b8530:	1d38      	adds	r0, r7, #4
   b8532:	f7ff fdaa 	bl	b808a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8536:	3708      	adds	r7, #8
   b8538:	e7f8      	b.n	b852c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b853a:	2300      	movs	r3, #0
   b853c:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b853e:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b8542:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b8546:	45b8      	cmp	r8, r7
   b8548:	d004      	beq.n	b8554 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b854a:	1d38      	adds	r0, r7, #4
   b854c:	f7ff fd9d 	bl	b808a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8550:	3708      	adds	r7, #8
   b8552:	e7f8      	b.n	b8546 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b8554:	2300      	movs	r3, #0
   b8556:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b8558:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b855a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b855c:	b123      	cbz	r3, b8568 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b855e:	4631      	mov	r1, r6
   b8560:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8564:	f7ff fe11 	bl	b818a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b8568:	2300      	movs	r3, #0
   b856a:	2220      	movs	r2, #32
   b856c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b8570:	4a2e      	ldr	r2, [pc, #184]	; (b862c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b8572:	9200      	str	r2, [sp, #0]
   b8574:	492b      	ldr	r1, [pc, #172]	; (b8624 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8576:	aa06      	add	r2, sp, #24
   b8578:	2001      	movs	r0, #1
   b857a:	f7ff f84d 	bl	b7618 <log_message>
                    impl->peers_.removeOne(*peer);
   b857e:	4631      	mov	r1, r6
   b8580:	f104 0018 	add.w	r0, r4, #24
   b8584:	f7ff ff35 	bl	b83f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b8588:	e79f      	b.n	b84ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b858a:	89a9      	ldrh	r1, [r5, #12]
   b858c:	4620      	mov	r0, r4
   b858e:	f7ff fb5f 	bl	b7c50 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b8592:	2800      	cmp	r0, #0
   b8594:	d099      	beq.n	b84ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b8596:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b8598:	2b00      	cmp	r3, #0
   b859a:	d096      	beq.n	b84ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b859c:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b859e:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b85a0:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b85a4:	d001      	beq.n	b85aa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b85a6:	2e10      	cmp	r6, #16
   b85a8:	d117      	bne.n	b85da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b85aa:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b85ac:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b85ae:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b85b0:	2506      	movs	r5, #6
                        };
   b85b2:	f88d 3015 	strb.w	r3, [sp, #21]
   b85b6:	9104      	str	r1, [sp, #16]
   b85b8:	f88d 2014 	strb.w	r2, [sp, #20]
   b85bc:	9006      	str	r0, [sp, #24]
   b85be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b85c2:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b85c4:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b85c8:	9508      	str	r5, [sp, #32]
   b85ca:	e883 0003 	stmia.w	r3, {r0, r1}
   b85ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b85d0:	a906      	add	r1, sp, #24
   b85d2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b85d6:	4798      	blx	r3
   b85d8:	e777      	b.n	b84ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b85da:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b85dc:	bf01      	itttt	eq
   b85de:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b85e0:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b85e2:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b85e6:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b85e8:	bf0f      	iteee	eq
   b85ea:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b85ee:	461a      	movne	r2, r3
   b85f0:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b85f2:	461d      	movne	r5, r3
   b85f4:	e7dd      	b.n	b85b2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b85f6:	89a9      	ldrh	r1, [r5, #12]
   b85f8:	4620      	mov	r0, r4
   b85fa:	f7ff fb29 	bl	b7c50 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b85fe:	4601      	mov	r1, r0
   b8600:	2800      	cmp	r0, #0
   b8602:	f43f af62 	beq.w	b84ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8606:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b8608:	2b00      	cmp	r3, #0
   b860a:	f43f af5e 	beq.w	b84ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b860e:	686b      	ldr	r3, [r5, #4]
   b8610:	9306      	str	r3, [sp, #24]
   b8612:	aa06      	add	r2, sp, #24
   b8614:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b8616:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b861a:	4798      	blx	r3
   b861c:	e755      	b.n	b84ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b861e:	bf00      	nop
   b8620:	000bd3f8 	.word	0x000bd3f8
   b8624:	000bd377 	.word	0x000bd377
   b8628:	000bd41e 	.word	0x000bd41e
   b862c:	000bd43b 	.word	0x000bd43b

000b8630 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b8630:	b513      	push	{r0, r1, r4, lr}
   b8632:	460b      	mov	r3, r1
   b8634:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8636:	e9d0 0100 	ldrd	r0, r1, [r0]
   b863a:	466c      	mov	r4, sp
   b863c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b8640:	e893 0003 	ldmia.w	r3, {r0, r1}
   b8644:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b8648:	e894 0003 	ldmia.w	r4, {r0, r1}
   b864c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b8650:	b002      	add	sp, #8
   b8652:	bd10      	pop	{r4, pc}

000b8654 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b8654:	b538      	push	{r3, r4, r5, lr}
   b8656:	4605      	mov	r5, r0
   b8658:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b865a:	f7ff ffe9 	bl	b8630 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b865e:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8660:	68a2      	ldr	r2, [r4, #8]
   b8662:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8664:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8666:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8668:	68e2      	ldr	r2, [r4, #12]
   b866a:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b866c:	60e3      	str	r3, [r4, #12]
      }
   b866e:	bd38      	pop	{r3, r4, r5, pc}

000b8670 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b8670:	b570      	push	{r4, r5, r6, lr}
   b8672:	4604      	mov	r4, r0
   b8674:	b08c      	sub	sp, #48	; 0x30
   b8676:	460e      	mov	r6, r1
   b8678:	9201      	str	r2, [sp, #4]
   b867a:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b867c:	f7ff fac8 	bl	b7c10 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b8680:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b8682:	9901      	ldr	r1, [sp, #4]
   b8684:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b8688:	f000 fd71 	bl	b916e <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b868c:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b8690:	b1cd      	cbz	r5, b86c6 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b8692:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b8694:	9502      	str	r5, [sp, #8]
   b8696:	a902      	add	r1, sp, #8
   b8698:	a804      	add	r0, sp, #16
   b869a:	9303      	str	r3, [sp, #12]
   b869c:	f7ff fcb4 	bl	b8008 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b86a0:	2300      	movs	r3, #0
	__x.swap(*this);
   b86a2:	a908      	add	r1, sp, #32
   b86a4:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b86a6:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b86a8:	f7ff ffd4 	bl	b8654 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b86ac:	4631      	mov	r1, r6
   b86ae:	a808      	add	r0, sp, #32
   b86b0:	f7ff ffd0 	bl	b8654 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b86b4:	a808      	add	r0, sp, #32
   b86b6:	f7ff f935 	bl	b7924 <_ZNSt14_Function_baseD1Ev>
   b86ba:	a804      	add	r0, sp, #16
   b86bc:	f7ff f932 	bl	b7924 <_ZNSt14_Function_baseD1Ev>
    }
   b86c0:	4620      	mov	r0, r4
   b86c2:	b00c      	add	sp, #48	; 0x30
   b86c4:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b86c6:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b86c8:	e7ea      	b.n	b86a0 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b86cc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b86cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b86d0:	b087      	sub	sp, #28
   b86d2:	461d      	mov	r5, r3
   b86d4:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b86d8:	4680      	mov	r8, r0
   b86da:	468b      	mov	fp, r1
   b86dc:	4692      	mov	sl, r2
   b86de:	9912      	ldr	r1, [sp, #72]	; 0x48
   b86e0:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b86e2:	2200      	movs	r2, #0
   b86e4:	2068      	movs	r0, #104	; 0x68
   b86e6:	9102      	str	r1, [sp, #8]
   b86e8:	9204      	str	r2, [sp, #16]
   b86ea:	f7fb fcd4 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b86ee:	1e06      	subs	r6, r0, #0
   b86f0:	f106 090c 	add.w	r9, r6, #12
   b86f4:	d018      	beq.n	b8728 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b86f6:	2201      	movs	r2, #1
	: _M_impl(__a)
   b86f8:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b86fa:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b86fe:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b8700:	4a15      	ldr	r2, [pc, #84]	; (b8758 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b8702:	f847 2b20 	str.w	r2, [r7], #32
   b8706:	9b03      	ldr	r3, [sp, #12]
   b8708:	9100      	str	r1, [sp, #0]
   b870a:	465a      	mov	r2, fp
   b870c:	4651      	mov	r1, sl
   b870e:	4648      	mov	r0, r9
   b8710:	f7ff ffae 	bl	b8670 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b8714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8716:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b8718:	682b      	ldr	r3, [r5, #0]
   b871a:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b871c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b871e:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b8722:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8724:	6823      	ldr	r3, [r4, #0]
   b8726:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b8728:	a904      	add	r1, sp, #16
   b872a:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b872c:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b8730:	f7ff fd1a 	bl	b8168 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b8734:	a805      	add	r0, sp, #20
   b8736:	f7ff fca8 	bl	b808a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b873a:	f8d8 3000 	ldr.w	r3, [r8]
   b873e:	b93b      	cbnz	r3, b8750 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b8740:	4a06      	ldr	r2, [pc, #24]	; (b875c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b8742:	4907      	ldr	r1, [pc, #28]	; (b8760 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b8744:	200a      	movs	r0, #10
}
   b8746:	b007      	add	sp, #28
   b8748:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b874c:	f7fe bf5c 	b.w	b7608 <panic_>
}
   b8750:	b007      	add	sp, #28
   b8752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8756:	bf00      	nop
   b8758:	000bd4b4 	.word	0x000bd4b4
   b875c:	000b7399 	.word	0x000b7399
   b8760:	000bd360 	.word	0x000bd360

000b8764 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8764:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8766:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8768:	4604      	mov	r4, r0
   b876a:	460d      	mov	r5, r1
   b876c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b876e:	d914      	bls.n	b879a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8770:	4290      	cmp	r0, r2
   b8772:	d213      	bcs.n	b879c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8774:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8778:	1a75      	subs	r5, r6, r1
   b877a:	f1a1 0708 	sub.w	r7, r1, #8
   b877e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8780:	42b7      	cmp	r7, r6
   b8782:	d018      	beq.n	b87b6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8784:	b11c      	cbz	r4, b878e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8786:	4631      	mov	r1, r6
   b8788:	4620      	mov	r0, r4
   b878a:	f7ff fc6a 	bl	b8062 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b878e:	1d30      	adds	r0, r6, #4
   b8790:	f7ff fc7b 	bl	b808a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8794:	3e08      	subs	r6, #8
   b8796:	3c08      	subs	r4, #8
   b8798:	e7f2      	b.n	b8780 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b879a:	d00c      	beq.n	b87b6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b879c:	42b5      	cmp	r5, r6
   b879e:	d00a      	beq.n	b87b6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b87a0:	b11c      	cbz	r4, b87aa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b87a2:	4629      	mov	r1, r5
   b87a4:	4620      	mov	r0, r4
   b87a6:	f7ff fc5c 	bl	b8062 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b87aa:	1d28      	adds	r0, r5, #4
   b87ac:	f7ff fc6d 	bl	b808a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b87b0:	3508      	adds	r5, #8
   b87b2:	3408      	adds	r4, #8
   b87b4:	e7f2      	b.n	b879c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b87b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b87b8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b87b8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b87ba:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b87bc:	4605      	mov	r5, r0
        if (n > 0) {
   b87be:	dd11      	ble.n	b87e4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b87c0:	00f0      	lsls	r0, r6, #3
   b87c2:	f7fe ffbd 	bl	b7740 <malloc>
            if (!d) {
   b87c6:	4604      	mov	r4, r0
   b87c8:	b158      	cbz	r0, b87e2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b87ca:	e9d5 1200 	ldrd	r1, r2, [r5]
   b87ce:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b87d2:	f7ff ffc7 	bl	b8764 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b87d6:	6828      	ldr	r0, [r5, #0]
   b87d8:	f7fe ffba 	bl	b7750 <free>
        data_ = d;
   b87dc:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b87de:	60ae      	str	r6, [r5, #8]
        return true;
   b87e0:	2001      	movs	r0, #1
    }
   b87e2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b87e4:	2400      	movs	r4, #0
   b87e6:	e7f6      	b.n	b87d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b87e8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b87e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b87ea:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b87ec:	6845      	ldr	r5, [r0, #4]
   b87ee:	4668      	mov	r0, sp
   b87f0:	f7ff fc37 	bl	b8062 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b87f4:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b87f8:	4299      	cmp	r1, r3
   b87fa:	da10      	bge.n	b881e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b87fc:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b87fe:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8800:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b8804:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8808:	4629      	mov	r1, r5
   b880a:	f105 0008 	add.w	r0, r5, #8
   b880e:	f7ff ffa9 	bl	b8764 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8812:	b98d      	cbnz	r5, b8838 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b8814:	6863      	ldr	r3, [r4, #4]
   b8816:	3301      	adds	r3, #1
   b8818:	6063      	str	r3, [r4, #4]
    return true;
   b881a:	2601      	movs	r6, #1
   b881c:	e006      	b.n	b882c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b881e:	3101      	adds	r1, #1
   b8820:	4620      	mov	r0, r4
   b8822:	f7ff ffc9 	bl	b87b8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8826:	4606      	mov	r6, r0
   b8828:	2800      	cmp	r0, #0
   b882a:	d1e7      	bne.n	b87fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b882c:	a801      	add	r0, sp, #4
   b882e:	f7ff fc2c 	bl	b808a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8832:	4630      	mov	r0, r6
   b8834:	b002      	add	sp, #8
   b8836:	bd70      	pop	{r4, r5, r6, pc}
   b8838:	4669      	mov	r1, sp
   b883a:	4628      	mov	r0, r5
   b883c:	f7ff fc11 	bl	b8062 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8840:	e7e8      	b.n	b8814 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b8842 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8842:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8846:	4604      	mov	r4, r0
   b8848:	460d      	mov	r5, r1
   b884a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b884c:	d914      	bls.n	b8878 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b884e:	4290      	cmp	r0, r2
   b8850:	d213      	bcs.n	b887a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8852:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8856:	1a75      	subs	r5, r6, r1
   b8858:	f1a1 0708 	sub.w	r7, r1, #8
   b885c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b885e:	42b7      	cmp	r7, r6
   b8860:	d018      	beq.n	b8894 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8862:	b11c      	cbz	r4, b886c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b8864:	4631      	mov	r1, r6
   b8866:	4620      	mov	r0, r4
   b8868:	f7ff fbed 	bl	b8046 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b886c:	1d30      	adds	r0, r6, #4
   b886e:	f7ff fc0c 	bl	b808a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8872:	3e08      	subs	r6, #8
   b8874:	3c08      	subs	r4, #8
   b8876:	e7f2      	b.n	b885e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8878:	d00c      	beq.n	b8894 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b887a:	42b5      	cmp	r5, r6
   b887c:	d00a      	beq.n	b8894 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b887e:	b11c      	cbz	r4, b8888 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8880:	4629      	mov	r1, r5
   b8882:	4620      	mov	r0, r4
   b8884:	f7ff fbdf 	bl	b8046 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8888:	1d28      	adds	r0, r5, #4
   b888a:	f7ff fbfe 	bl	b808a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b888e:	3508      	adds	r5, #8
   b8890:	3408      	adds	r4, #8
   b8892:	e7f2      	b.n	b887a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8896 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b8896:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8898:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b889a:	4605      	mov	r5, r0
        if (n > 0) {
   b889c:	dd11      	ble.n	b88c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b889e:	00f0      	lsls	r0, r6, #3
   b88a0:	f7fe ff4e 	bl	b7740 <malloc>
            if (!d) {
   b88a4:	4604      	mov	r4, r0
   b88a6:	b158      	cbz	r0, b88c0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b88a8:	e9d5 1200 	ldrd	r1, r2, [r5]
   b88ac:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b88b0:	f7ff ffc7 	bl	b8842 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b88b4:	6828      	ldr	r0, [r5, #0]
   b88b6:	f7fe ff4b 	bl	b7750 <free>
        data_ = d;
   b88ba:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b88bc:	60ae      	str	r6, [r5, #8]
        return true;
   b88be:	2001      	movs	r0, #1
    }
   b88c0:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b88c2:	2400      	movs	r4, #0
   b88c4:	e7f6      	b.n	b88b4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b88c6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b88c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b88c8:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b88ca:	6845      	ldr	r5, [r0, #4]
   b88cc:	4668      	mov	r0, sp
   b88ce:	f7ff fbba 	bl	b8046 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b88d2:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b88d6:	4299      	cmp	r1, r3
   b88d8:	da10      	bge.n	b88fc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b88da:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b88dc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b88de:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b88e2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b88e6:	4629      	mov	r1, r5
   b88e8:	f105 0008 	add.w	r0, r5, #8
   b88ec:	f7ff ffa9 	bl	b8842 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b88f0:	b98d      	cbnz	r5, b8916 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b88f2:	6863      	ldr	r3, [r4, #4]
   b88f4:	3301      	adds	r3, #1
   b88f6:	6063      	str	r3, [r4, #4]
    return true;
   b88f8:	2601      	movs	r6, #1
   b88fa:	e006      	b.n	b890a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b88fc:	3101      	adds	r1, #1
   b88fe:	4620      	mov	r0, r4
   b8900:	f7ff ffc9 	bl	b8896 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8904:	4606      	mov	r6, r0
   b8906:	2800      	cmp	r0, #0
   b8908:	d1e7      	bne.n	b88da <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b890a:	a801      	add	r0, sp, #4
   b890c:	f7ff fbbd 	bl	b808a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8910:	4630      	mov	r0, r6
   b8912:	b002      	add	sp, #8
   b8914:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b8916:	4669      	mov	r1, sp
   b8918:	4628      	mov	r0, r5
   b891a:	f7ff fb94 	bl	b8046 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b891e:	e7e8      	b.n	b88f2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b8920 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b8920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8924:	4617      	mov	r7, r2
   b8926:	b0a1      	sub	sp, #132	; 0x84
   b8928:	4680      	mov	r8, r0
    WiringBleLock lk;
   b892a:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b892c:	460e      	mov	r6, r1
    WiringBleLock lk;
   b892e:	f7ff f837 	bl	b79a0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b8932:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b8934:	7923      	ldrb	r3, [r4, #4]
   b8936:	b953      	cbnz	r3, b894e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b8938:	4639      	mov	r1, r7
   b893a:	4640      	mov	r0, r8
   b893c:	f7ff fb83 	bl	b8046 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b8940:	a80a      	add	r0, sp, #40	; 0x28
   b8942:	f7ff f83b 	bl	b79bc <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b8946:	4640      	mov	r0, r8
   b8948:	b021      	add	sp, #132	; 0x84
   b894a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b894e:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b8950:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b8954:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b8958:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b895a:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b895e:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b8962:	9b03      	ldr	r3, [sp, #12]
   b8964:	429d      	cmp	r5, r3
   b8966:	d021      	beq.n	b89ac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b8968:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b896c:	4658      	mov	r0, fp
   b896e:	f109 0114 	add.w	r1, r9, #20
   b8972:	f7ff f8c2 	bl	b7afa <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b8976:	b1b8      	cbz	r0, b89a8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b8978:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b897c:	4650      	mov	r0, sl
   b897e:	f7ff f8bc 	bl	b7afa <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b8982:	b188      	cbz	r0, b89a8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b8984:	6823      	ldr	r3, [r4, #0]
   b8986:	f8d9 2000 	ldr.w	r2, [r9]
   b898a:	4053      	eors	r3, r2
   b898c:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b8990:	d10a      	bne.n	b89a8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b8992:	2220      	movs	r2, #32
   b8994:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b8998:	4a5e      	ldr	r2, [pc, #376]	; (b8b14 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b899a:	9200      	str	r2, [sp, #0]
   b899c:	aa15      	add	r2, sp, #84	; 0x54
   b899e:	495e      	ldr	r1, [pc, #376]	; (b8b18 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b89a0:	2032      	movs	r0, #50	; 0x32
   b89a2:	f7fe fe39 	bl	b7618 <log_message>
   b89a6:	e7c7      	b.n	b8938 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b89a8:	3508      	adds	r5, #8
   b89aa:	e7da      	b.n	b8962 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b89ac:	4650      	mov	r0, sl
   b89ae:	f7ff f875 	bl	b7a9c <_ZNK8particle7BleUuid7isValidEv>
   b89b2:	b960      	cbnz	r0, b89ce <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b89b4:	4959      	ldr	r1, [pc, #356]	; (b8b1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b89b6:	2201      	movs	r2, #1
   b89b8:	a815      	add	r0, sp, #84	; 0x54
   b89ba:	ad15      	add	r5, sp, #84	; 0x54
   b89bc:	f7ff f846 	bl	b7a4c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b89c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b89c2:	46d4      	mov	ip, sl
   b89c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b89c8:	682b      	ldr	r3, [r5, #0]
   b89ca:	f8cc 3000 	str.w	r3, [ip]
   b89ce:	6833      	ldr	r3, [r6, #0]
   b89d0:	e9d3 5300 	ldrd	r5, r3, [r3]
   b89d4:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b89d8:	455d      	cmp	r5, fp
   b89da:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b89dc:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b89de:	d06e      	beq.n	b8abe <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b89e0:	f855 0b08 	ldr.w	r0, [r5], #8
   b89e4:	f7ff f889 	bl	b7afa <_ZNK8particle7BleUuideqERKS0_>
   b89e8:	2800      	cmp	r0, #0
   b89ea:	d0f5      	beq.n	b89d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b89ec:	f104 0a14 	add.w	sl, r4, #20
   b89f0:	4650      	mov	r0, sl
   b89f2:	f7ff f853 	bl	b7a9c <_ZNK8particle7BleUuid7isValidEv>
   b89f6:	b988      	cbnz	r0, b8a1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b89f8:	4b49      	ldr	r3, [pc, #292]	; (b8b20 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b89fa:	4948      	ldr	r1, [pc, #288]	; (b8b1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b89fc:	881a      	ldrh	r2, [r3, #0]
   b89fe:	3201      	adds	r2, #1
   b8a00:	b292      	uxth	r2, r2
   b8a02:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b8a04:	a815      	add	r0, sp, #84	; 0x54
   b8a06:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b8a08:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b8a0a:	f7ff f83e 	bl	b7a8a <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b8a0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8a10:	46d4      	mov	ip, sl
   b8a12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b8a16:	682b      	ldr	r3, [r5, #0]
   b8a18:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b8a1c:	4b41      	ldr	r3, [pc, #260]	; (b8b24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b8a1e:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b8a20:	2228      	movs	r2, #40	; 0x28
   b8a22:	2100      	movs	r1, #0
   b8a24:	a816      	add	r0, sp, #88	; 0x58
   b8a26:	f002 fa02 	bl	bae2e <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b8a2a:	4651      	mov	r1, sl
   b8a2c:	a804      	add	r0, sp, #16
   b8a2e:	f7ff f847 	bl	b7ac0 <_ZN8particle7BleUuid7halUUIDEv>
   b8a32:	ab04      	add	r3, sp, #16
   b8a34:	aa18      	add	r2, sp, #96	; 0x60
   b8a36:	f10d 0c20 	add.w	ip, sp, #32
   b8a3a:	6818      	ldr	r0, [r3, #0]
   b8a3c:	6859      	ldr	r1, [r3, #4]
   b8a3e:	4615      	mov	r5, r2
   b8a40:	c503      	stmia	r5!, {r0, r1}
   b8a42:	3308      	adds	r3, #8
   b8a44:	4563      	cmp	r3, ip
   b8a46:	462a      	mov	r2, r5
   b8a48:	d1f7      	bne.n	b8a3a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b8a4a:	6818      	ldr	r0, [r3, #0]
   b8a4c:	6028      	str	r0, [r5, #0]
    return value_;
   b8a4e:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b8a50:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b8a54:	f8d9 3000 	ldr.w	r3, [r9]
   b8a58:	8a9b      	ldrh	r3, [r3, #20]
   b8a5a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b8a5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8a60:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b8a62:	4b31      	ldr	r3, [pc, #196]	; (b8b28 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b8a64:	2200      	movs	r2, #0
   b8a66:	1da1      	adds	r1, r4, #6
   b8a68:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b8a6a:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b8a6e:	f7fe fc4b 	bl	b7308 <hal_ble_gatt_server_add_characteristic>
   b8a72:	2800      	cmp	r0, #0
   b8a74:	f47f af60 	bne.w	b8938 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b8a78:	2301      	movs	r3, #1
   b8a7a:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b8a7c:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b8a7e:	4639      	mov	r1, r7
        return characteristics_;
   b8a80:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b8a82:	a80d      	add	r0, sp, #52	; 0x34
   b8a84:	f7ff fadf 	bl	b8046 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8a88:	4620      	mov	r0, r4
   b8a8a:	a90d      	add	r1, sp, #52	; 0x34
   b8a8c:	f7ff ff1b 	bl	b88c6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b8a90:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b8a92:	a80e      	add	r0, sp, #56	; 0x38
   b8a94:	f7ff faf9 	bl	b808a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8a98:	2c00      	cmp	r4, #0
   b8a9a:	f47f af4d 	bne.w	b8938 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b8a9e:	2320      	movs	r3, #32
   b8aa0:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b8aa4:	4b21      	ldr	r3, [pc, #132]	; (b8b2c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b8aa6:	9300      	str	r3, [sp, #0]
   b8aa8:	aa0d      	add	r2, sp, #52	; 0x34
   b8aaa:	4623      	mov	r3, r4
   b8aac:	e777      	b.n	b899e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b8aae:	4639      	mov	r1, r7
   b8ab0:	4640      	mov	r0, r8
   b8ab2:	f7ff fac8 	bl	b8046 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8ab6:	a80c      	add	r0, sp, #48	; 0x30
   b8ab8:	f7ff fae7 	bl	b808a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8abc:	e740      	b.n	b8940 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b8abe:	a80b      	add	r0, sp, #44	; 0x2c
   b8ac0:	f7ff f94a 	bl	b7d58 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b8ac4:	4651      	mov	r1, sl
   b8ac6:	a815      	add	r0, sp, #84	; 0x54
   b8ac8:	f7fe fffa 	bl	b7ac0 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b8acc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8ace:	2300      	movs	r3, #0
   b8ad0:	3214      	adds	r2, #20
   b8ad2:	a915      	add	r1, sp, #84	; 0x54
   b8ad4:	2001      	movs	r0, #1
   b8ad6:	f7fe fbef 	bl	b72b8 <hal_ble_gatt_server_add_service>
   b8ada:	2800      	cmp	r0, #0
   b8adc:	d1e7      	bne.n	b8aae <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b8ade:	6835      	ldr	r5, [r6, #0]
   b8ae0:	a90b      	add	r1, sp, #44	; 0x2c
   b8ae2:	a80d      	add	r0, sp, #52	; 0x34
   b8ae4:	f7ff fabd 	bl	b8062 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b8ae8:	4628      	mov	r0, r5
   b8aea:	a90d      	add	r1, sp, #52	; 0x34
   b8aec:	f7ff fe7c 	bl	b87e8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b8af0:	4605      	mov	r5, r0
   b8af2:	a80e      	add	r0, sp, #56	; 0x38
   b8af4:	f7ff fac9 	bl	b808a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8af8:	2d00      	cmp	r5, #0
   b8afa:	d0d8      	beq.n	b8aae <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b8afc:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b8afe:	6853      	ldr	r3, [r2, #4]
   b8b00:	6812      	ldr	r2, [r2, #0]
   b8b02:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b8b06:	3b01      	subs	r3, #1
   b8b08:	a80c      	add	r0, sp, #48	; 0x30
   b8b0a:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b8b0e:	f7ff fabc 	bl	b808a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8b12:	e76b      	b.n	b89ec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b8b14:	000bd45a 	.word	0x000bd45a
   b8b18:	000bd377 	.word	0x000bd377
   b8b1c:	000bd51e 	.word	0x000bd51e
   b8b20:	2003e6bc 	.word	0x2003e6bc
   b8b24:	002c0003 	.word	0x002c0003
   b8b28:	000b7ef1 	.word	0x000b7ef1
   b8b2c:	000bd485 	.word	0x000bd485

000b8b30 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b8b30:	4802      	ldr	r0, [pc, #8]	; (b8b3c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b8b32:	2300      	movs	r3, #0
   b8b34:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b8b36:	f7fe bc0f 	b.w	b7358 <os_mutex_recursive_create>
   b8b3a:	bf00      	nop
   b8b3c:	2003e6c0 	.word	0x2003e6c0

000b8b40 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8b40:	2200      	movs	r2, #0
   b8b42:	6840      	ldr	r0, [r0, #4]
   b8b44:	4611      	mov	r1, r2
   b8b46:	f7fe bdd3 	b.w	b76f0 <network_listening>

000b8b4a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8b4a:	2200      	movs	r2, #0
   b8b4c:	6840      	ldr	r0, [r0, #4]
   b8b4e:	4611      	mov	r1, r2
   b8b50:	f7fe bdde 	b.w	b7710 <network_get_listen_timeout>

000b8b54 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8b54:	6840      	ldr	r0, [r0, #4]
   b8b56:	2200      	movs	r2, #0
   b8b58:	f7fe bdd2 	b.w	b7700 <network_set_listen_timeout>

000b8b5c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8b5c:	6840      	ldr	r0, [r0, #4]
   b8b5e:	2200      	movs	r2, #0
   b8b60:	f081 0101 	eor.w	r1, r1, #1
   b8b64:	f7fe bdbc 	b.w	b76e0 <network_listen>

000b8b68 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8b68:	2300      	movs	r3, #0
   b8b6a:	6840      	ldr	r0, [r0, #4]
   b8b6c:	461a      	mov	r2, r3
   b8b6e:	4619      	mov	r1, r3
   b8b70:	f7fe bdae 	b.w	b76d0 <network_off>

000b8b74 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8b74:	2300      	movs	r3, #0
   b8b76:	6840      	ldr	r0, [r0, #4]
   b8b78:	461a      	mov	r2, r3
   b8b7a:	4619      	mov	r1, r3
   b8b7c:	f7fe bda0 	b.w	b76c0 <network_on>

000b8b80 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b8b80:	2200      	movs	r2, #0
   b8b82:	6840      	ldr	r0, [r0, #4]
   b8b84:	4611      	mov	r1, r2
   b8b86:	f7fe bd93 	b.w	b76b0 <network_ready>

000b8b8a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8b8a:	2200      	movs	r2, #0
   b8b8c:	6840      	ldr	r0, [r0, #4]
   b8b8e:	4611      	mov	r1, r2
   b8b90:	f7fe bd7e 	b.w	b7690 <network_connecting>

000b8b94 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8b94:	6840      	ldr	r0, [r0, #4]
   b8b96:	2200      	movs	r2, #0
   b8b98:	2102      	movs	r1, #2
   b8b9a:	f7fe bd81 	b.w	b76a0 <network_disconnect>

000b8b9e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8b9e:	2300      	movs	r3, #0
   b8ba0:	6840      	ldr	r0, [r0, #4]
   b8ba2:	461a      	mov	r2, r3
   b8ba4:	f7fe bd6c 	b.w	b7680 <network_connect>

000b8ba8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b8ba8:	4b02      	ldr	r3, [pc, #8]	; (b8bb4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b8baa:	2203      	movs	r2, #3
   b8bac:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b8bae:	4a02      	ldr	r2, [pc, #8]	; (b8bb8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b8bb0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b8bb2:	4770      	bx	lr
   b8bb4:	2003e6c8 	.word	0x2003e6c8
   b8bb8:	000bd548 	.word	0x000bd548

000b8bbc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b8bbc:	4770      	bx	lr

000b8bbe <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b8bbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8bc0:	4606      	mov	r6, r0
   b8bc2:	4615      	mov	r5, r2
   b8bc4:	460c      	mov	r4, r1
   b8bc6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b8bc8:	42bc      	cmp	r4, r7
   b8bca:	d006      	beq.n	b8bda <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b8bcc:	6833      	ldr	r3, [r6, #0]
   b8bce:	f814 1b01 	ldrb.w	r1, [r4], #1
   b8bd2:	689b      	ldr	r3, [r3, #8]
   b8bd4:	4630      	mov	r0, r6
   b8bd6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b8bd8:	e7f6      	b.n	b8bc8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b8bda:	4628      	mov	r0, r5
   b8bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8bde <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b8bde:	7c00      	ldrb	r0, [r0, #16]
   b8be0:	2200      	movs	r2, #0
   b8be2:	f7fe bc09 	b.w	b73f8 <hal_i2c_write>

000b8be6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b8be6:	7c00      	ldrb	r0, [r0, #16]
   b8be8:	2100      	movs	r1, #0
   b8bea:	f7fe bc0d 	b.w	b7408 <hal_i2c_available>

000b8bee <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b8bee:	7c00      	ldrb	r0, [r0, #16]
   b8bf0:	2100      	movs	r1, #0
   b8bf2:	f7fe bc11 	b.w	b7418 <hal_i2c_read>

000b8bf6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b8bf6:	7c00      	ldrb	r0, [r0, #16]
   b8bf8:	2100      	movs	r1, #0
   b8bfa:	f7fe bc15 	b.w	b7428 <hal_i2c_peek>

000b8bfe <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b8bfe:	7c00      	ldrb	r0, [r0, #16]
   b8c00:	2100      	movs	r1, #0
   b8c02:	f7fe bc19 	b.w	b7438 <hal_i2c_flush>

000b8c06 <_ZN7TwoWireD0Ev>:
   b8c06:	b510      	push	{r4, lr}
   b8c08:	2114      	movs	r1, #20
   b8c0a:	4604      	mov	r4, r0
   b8c0c:	f7fb fa49 	bl	b40a2 <_ZdlPvj>
   b8c10:	4620      	mov	r0, r4
   b8c12:	bd10      	pop	{r4, pc}

000b8c14 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8c14:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b8c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8c1a:	4604      	mov	r4, r0
   b8c1c:	4608      	mov	r0, r1
   b8c1e:	2100      	movs	r1, #0
   b8c20:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8c24:	4b03      	ldr	r3, [pc, #12]	; (b8c34 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b8c26:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b8c28:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b8c2a:	4611      	mov	r1, r2
   b8c2c:	f7fe fc0c 	bl	b7448 <hal_i2c_init>
}
   b8c30:	4620      	mov	r0, r4
   b8c32:	bd10      	pop	{r4, pc}
   b8c34:	000bd584 	.word	0x000bd584

000b8c38 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b8c38:	2300      	movs	r3, #0
   b8c3a:	7c00      	ldrb	r0, [r0, #16]
   b8c3c:	461a      	mov	r2, r3
   b8c3e:	4619      	mov	r1, r3
   b8c40:	f7fe bbc2 	b.w	b73c8 <hal_i2c_begin>

000b8c44 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b8c44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b8c46:	2200      	movs	r2, #0
   b8c48:	2314      	movs	r3, #20
   b8c4a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b8c4e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b8c52:	780b      	ldrb	r3, [r1, #0]
   b8c54:	f88d 3008 	strb.w	r3, [sp, #8]
   b8c58:	684b      	ldr	r3, [r1, #4]
   b8c5a:	9303      	str	r3, [sp, #12]
   b8c5c:	68cb      	ldr	r3, [r1, #12]
   b8c5e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b8c60:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b8c62:	7a0b      	ldrb	r3, [r1, #8]
   b8c64:	9305      	str	r3, [sp, #20]
   b8c66:	a901      	add	r1, sp, #4
   b8c68:	f7fe fbf6 	bl	b7458 <hal_i2c_request_ex>
}
   b8c6c:	b007      	add	sp, #28
   b8c6e:	f85d fb04 	ldr.w	pc, [sp], #4

000b8c72 <_ZN7TwoWire11requestFromEhjh>:
{
   b8c72:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b8c74:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b8c76:	f88d 1000 	strb.w	r1, [sp]
   b8c7a:	f04f 0164 	mov.w	r1, #100	; 0x64
   b8c7e:	9103      	str	r1, [sp, #12]
   b8c80:	bf18      	it	ne
   b8c82:	2301      	movne	r3, #1
   b8c84:	4669      	mov	r1, sp
    size_ = size;
   b8c86:	9201      	str	r2, [sp, #4]
   b8c88:	f88d 3008 	strb.w	r3, [sp, #8]
   b8c8c:	f7ff ffda 	bl	b8c44 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b8c90:	b005      	add	sp, #20
   b8c92:	f85d fb04 	ldr.w	pc, [sp], #4

000b8c96 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b8c96:	2301      	movs	r3, #1
   b8c98:	f7ff bfeb 	b.w	b8c72 <_ZN7TwoWire11requestFromEhjh>

000b8c9c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b8c9c:	7c00      	ldrb	r0, [r0, #16]
   b8c9e:	2200      	movs	r2, #0
   b8ca0:	f7fe bb9a 	b.w	b73d8 <hal_i2c_begin_transmission>

000b8ca4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b8ca4:	b2c9      	uxtb	r1, r1
   b8ca6:	f7ff bff9 	b.w	b8c9c <_ZN7TwoWire17beginTransmissionEh>

000b8caa <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b8caa:	7c00      	ldrb	r0, [r0, #16]
   b8cac:	2200      	movs	r2, #0
   b8cae:	f7fe bb9b 	b.w	b73e8 <hal_i2c_end_transmission>

000b8cb2 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b8cb2:	2101      	movs	r1, #1
   b8cb4:	f7ff bff9 	b.w	b8caa <_ZN7TwoWire15endTransmissionEh>

000b8cb8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b8cb8:	4770      	bx	lr

000b8cba <_ZN9IPAddressD0Ev>:
   b8cba:	b510      	push	{r4, lr}
   b8cbc:	2118      	movs	r1, #24
   b8cbe:	4604      	mov	r4, r0
   b8cc0:	f7fb f9ef 	bl	b40a2 <_ZdlPvj>
   b8cc4:	4620      	mov	r0, r4
   b8cc6:	bd10      	pop	{r4, pc}

000b8cc8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b8cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b8cca:	7d03      	ldrb	r3, [r0, #20]
   b8ccc:	2b06      	cmp	r3, #6
{
   b8cce:	b08d      	sub	sp, #52	; 0x34
   b8cd0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8cd2:	f100 0704 	add.w	r7, r0, #4
   b8cd6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b8cda:	d012      	beq.n	b8d02 <_ZNK9IPAddress7printToER5Print+0x3a>
   b8cdc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8ce0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8ce4:	220a      	movs	r2, #10
   b8ce6:	4630      	mov	r0, r6
   b8ce8:	f000 f973 	bl	b8fd2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b8cec:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b8cee:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b8cf0:	d019      	beq.n	b8d26 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b8cf2:	2c00      	cmp	r4, #0
   b8cf4:	d0f4      	beq.n	b8ce0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b8cf6:	212e      	movs	r1, #46	; 0x2e
   b8cf8:	4630      	mov	r0, r6
   b8cfa:	f000 f951 	bl	b8fa0 <_ZN5Print5printEc>
   b8cfe:	4404      	add	r4, r0
   b8d00:	e7ee      	b.n	b8ce0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8d02:	232f      	movs	r3, #47	; 0x2f
   b8d04:	466a      	mov	r2, sp
   b8d06:	4639      	mov	r1, r7
   b8d08:	200a      	movs	r0, #10
		buf[0] = 0;
   b8d0a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8d0e:	f7fe fbb3 	bl	b7478 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b8d12:	4668      	mov	r0, sp
   b8d14:	f002 f8d4 	bl	baec0 <strlen>
   b8d18:	6833      	ldr	r3, [r6, #0]
   b8d1a:	4602      	mov	r2, r0
   b8d1c:	68db      	ldr	r3, [r3, #12]
   b8d1e:	4669      	mov	r1, sp
   b8d20:	4630      	mov	r0, r6
   b8d22:	4798      	blx	r3
   b8d24:	4604      	mov	r4, r0
    }
    return n;
}
   b8d26:	4620      	mov	r0, r4
   b8d28:	b00d      	add	sp, #52	; 0x34
   b8d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8d2c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b8d2c:	b510      	push	{r4, lr}
   b8d2e:	4b05      	ldr	r3, [pc, #20]	; (b8d44 <_ZN9IPAddressC1Ev+0x18>)
   b8d30:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b8d32:	2211      	movs	r2, #17
   b8d34:	f840 3b04 	str.w	r3, [r0], #4
   b8d38:	2100      	movs	r1, #0
   b8d3a:	f002 f878 	bl	bae2e <memset>
}
   b8d3e:	4620      	mov	r0, r4
   b8d40:	bd10      	pop	{r4, pc}
   b8d42:	bf00      	nop
   b8d44:	000bd5ac 	.word	0x000bd5ac

000b8d48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b8d48:	4603      	mov	r3, r0
   b8d4a:	4a07      	ldr	r2, [pc, #28]	; (b8d68 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b8d4c:	b510      	push	{r4, lr}
   b8d4e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b8d52:	f101 0210 	add.w	r2, r1, #16
   b8d56:	f851 4b04 	ldr.w	r4, [r1], #4
   b8d5a:	f843 4b04 	str.w	r4, [r3], #4
   b8d5e:	4291      	cmp	r1, r2
   b8d60:	d1f9      	bne.n	b8d56 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b8d62:	780a      	ldrb	r2, [r1, #0]
   b8d64:	701a      	strb	r2, [r3, #0]
}
   b8d66:	bd10      	pop	{r4, pc}
   b8d68:	000bd5ac 	.word	0x000bd5ac

000b8d6c <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b8d6c:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b8d6e:	2b04      	cmp	r3, #4
   b8d70:	d104      	bne.n	b8d7c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b8d72:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8d74:	3800      	subs	r0, #0
   b8d76:	bf18      	it	ne
   b8d78:	2001      	movne	r0, #1
   b8d7a:	4770      	bx	lr
    } else if (version() == 6) {
   b8d7c:	2b06      	cmp	r3, #6
   b8d7e:	d107      	bne.n	b8d90 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8d80:	6843      	ldr	r3, [r0, #4]
   b8d82:	b93b      	cbnz	r3, b8d94 <_ZNK9IPAddresscvbEv+0x28>
   b8d84:	6883      	ldr	r3, [r0, #8]
   b8d86:	b92b      	cbnz	r3, b8d94 <_ZNK9IPAddresscvbEv+0x28>
   b8d88:	68c3      	ldr	r3, [r0, #12]
   b8d8a:	b91b      	cbnz	r3, b8d94 <_ZNK9IPAddresscvbEv+0x28>
   b8d8c:	6900      	ldr	r0, [r0, #16]
   b8d8e:	e7f1      	b.n	b8d74 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b8d90:	2000      	movs	r0, #0
   b8d92:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8d94:	2001      	movs	r0, #1
}
   b8d96:	4770      	bx	lr

000b8d98 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b8d98:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b8d9a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b8d9e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b8da2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b8da6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b8daa:	2304      	movs	r3, #4
   b8dac:	6041      	str	r1, [r0, #4]
   b8dae:	7503      	strb	r3, [r0, #20]
}
   b8db0:	bd10      	pop	{r4, pc}
	...

000b8db4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b8db4:	b507      	push	{r0, r1, r2, lr}
   b8db6:	4b06      	ldr	r3, [pc, #24]	; (b8dd0 <_ZN9IPAddressC1EPKh+0x1c>)
   b8db8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b8dba:	78cb      	ldrb	r3, [r1, #3]
   b8dbc:	9300      	str	r3, [sp, #0]
   b8dbe:	788b      	ldrb	r3, [r1, #2]
   b8dc0:	784a      	ldrb	r2, [r1, #1]
   b8dc2:	7809      	ldrb	r1, [r1, #0]
   b8dc4:	f7ff ffe8 	bl	b8d98 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8dc8:	b003      	add	sp, #12
   b8dca:	f85d fb04 	ldr.w	pc, [sp], #4
   b8dce:	bf00      	nop
   b8dd0:	000bd5ac 	.word	0x000bd5ac

000b8dd4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b8dd4:	4b01      	ldr	r3, [pc, #4]	; (b8ddc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b8dd6:	4a02      	ldr	r2, [pc, #8]	; (b8de0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b8dd8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b8dda:	4770      	bx	lr
   b8ddc:	2003e6d0 	.word	0x2003e6d0
   b8de0:	000bd5b8 	.word	0x000bd5b8

000b8de4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b8de4:	2300      	movs	r3, #0
   b8de6:	6840      	ldr	r0, [r0, #4]
   b8de8:	461a      	mov	r2, r3
   b8dea:	f7fe bc49 	b.w	b7680 <network_connect>

000b8dee <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b8dee:	6840      	ldr	r0, [r0, #4]
   b8df0:	2200      	movs	r2, #0
   b8df2:	2102      	movs	r1, #2
   b8df4:	f7fe bc54 	b.w	b76a0 <network_disconnect>

000b8df8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b8df8:	2200      	movs	r2, #0
   b8dfa:	6840      	ldr	r0, [r0, #4]
   b8dfc:	4611      	mov	r1, r2
   b8dfe:	f7fe bc47 	b.w	b7690 <network_connecting>

000b8e02 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b8e02:	2200      	movs	r2, #0
   b8e04:	6840      	ldr	r0, [r0, #4]
   b8e06:	4611      	mov	r1, r2
   b8e08:	f7fe bc52 	b.w	b76b0 <network_ready>

000b8e0c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b8e0c:	2300      	movs	r3, #0
   b8e0e:	6840      	ldr	r0, [r0, #4]
   b8e10:	461a      	mov	r2, r3
   b8e12:	4619      	mov	r1, r3
   b8e14:	f7fe bc54 	b.w	b76c0 <network_on>

000b8e18 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b8e18:	2300      	movs	r3, #0
   b8e1a:	6840      	ldr	r0, [r0, #4]
   b8e1c:	461a      	mov	r2, r3
   b8e1e:	4619      	mov	r1, r3
   b8e20:	f7fe bc56 	b.w	b76d0 <network_off>

000b8e24 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b8e24:	6840      	ldr	r0, [r0, #4]
   b8e26:	2100      	movs	r1, #0
   b8e28:	f7fe bc7a 	b.w	b7720 <network_is_on>

000b8e2c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b8e2c:	6840      	ldr	r0, [r0, #4]
   b8e2e:	2100      	movs	r1, #0
   b8e30:	f7fe bc7e 	b.w	b7730 <network_is_off>

000b8e34 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b8e34:	6840      	ldr	r0, [r0, #4]
   b8e36:	2200      	movs	r2, #0
   b8e38:	f081 0101 	eor.w	r1, r1, #1
   b8e3c:	f7fe bc50 	b.w	b76e0 <network_listen>

000b8e40 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b8e40:	6840      	ldr	r0, [r0, #4]
   b8e42:	2200      	movs	r2, #0
   b8e44:	f7fe bc5c 	b.w	b7700 <network_set_listen_timeout>

000b8e48 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b8e48:	2200      	movs	r2, #0
   b8e4a:	6840      	ldr	r0, [r0, #4]
   b8e4c:	4611      	mov	r1, r2
   b8e4e:	f7fe bc5f 	b.w	b7710 <network_get_listen_timeout>

000b8e52 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b8e52:	2200      	movs	r2, #0
   b8e54:	6840      	ldr	r0, [r0, #4]
   b8e56:	4611      	mov	r1, r2
   b8e58:	f7fe bc4a 	b.w	b76f0 <network_listening>

000b8e5c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b8e5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8e60:	b095      	sub	sp, #84	; 0x54
   b8e62:	4614      	mov	r4, r2
   b8e64:	460d      	mov	r5, r1
   b8e66:	4607      	mov	r7, r0
    IPAddress addr;
   b8e68:	f7ff ff60 	bl	b8d2c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b8e6c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b8e6e:	221c      	movs	r2, #28
   b8e70:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b8e72:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b8e74:	f001 ffdb 	bl	bae2e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b8e78:	2340      	movs	r3, #64	; 0x40
   b8e7a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b8e7c:	4620      	mov	r0, r4
   b8e7e:	466b      	mov	r3, sp
   b8e80:	aa0c      	add	r2, sp, #48	; 0x30
   b8e82:	2100      	movs	r1, #0
   b8e84:	f7fe fb18 	bl	b74b8 <netdb_getaddrinfo>
    if (!r) {
   b8e88:	4604      	mov	r4, r0
   b8e8a:	2800      	cmp	r0, #0
   b8e8c:	d14b      	bne.n	b8f26 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8e8e:	4602      	mov	r2, r0
   b8e90:	2101      	movs	r1, #1
   b8e92:	6868      	ldr	r0, [r5, #4]
   b8e94:	f7fe fc0c 	bl	b76b0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8e98:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8e9a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8e9c:	4622      	mov	r2, r4
   b8e9e:	6868      	ldr	r0, [r5, #4]
   b8ea0:	f7fe fc06 	bl	b76b0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8ea4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8ea6:	4681      	mov	r9, r0
        bool ok = false;
   b8ea8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8eaa:	2e00      	cmp	r6, #0
   b8eac:	d03b      	beq.n	b8f26 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b8eae:	2900      	cmp	r1, #0
   b8eb0:	d139      	bne.n	b8f26 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b8eb2:	6873      	ldr	r3, [r6, #4]
   b8eb4:	2b02      	cmp	r3, #2
   b8eb6:	d003      	beq.n	b8ec0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b8eb8:	2b0a      	cmp	r3, #10
   b8eba:	d011      	beq.n	b8ee0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8ebc:	69f6      	ldr	r6, [r6, #28]
   b8ebe:	e7f4      	b.n	b8eaa <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b8ec0:	f1b8 0f00 	cmp.w	r8, #0
   b8ec4:	d0fa      	beq.n	b8ebc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b8ec6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b8ec8:	a806      	add	r0, sp, #24
   b8eca:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b8ecc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b8ece:	f7ff ff71 	bl	b8db4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8ed2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8ed4:	1d3c      	adds	r4, r7, #4
   b8ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8ed8:	682b      	ldr	r3, [r5, #0]
   b8eda:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8edc:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b8ede:	e7ed      	b.n	b8ebc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b8ee0:	f1b9 0f00 	cmp.w	r9, #0
   b8ee4:	d0ea      	beq.n	b8ebc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b8ee6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b8ee8:	2210      	movs	r2, #16
   b8eea:	a801      	add	r0, sp, #4
   b8eec:	f001 ff9f 	bl	bae2e <memset>
                    a.v = 6;
   b8ef0:	2306      	movs	r3, #6
   b8ef2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8ef6:	ad01      	add	r5, sp, #4
   b8ef8:	f104 0308 	add.w	r3, r4, #8
   b8efc:	3418      	adds	r4, #24
   b8efe:	6818      	ldr	r0, [r3, #0]
   b8f00:	6859      	ldr	r1, [r3, #4]
   b8f02:	462a      	mov	r2, r5
   b8f04:	c203      	stmia	r2!, {r0, r1}
   b8f06:	3308      	adds	r3, #8
   b8f08:	42a3      	cmp	r3, r4
   b8f0a:	4615      	mov	r5, r2
   b8f0c:	d1f7      	bne.n	b8efe <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b8f0e:	a901      	add	r1, sp, #4
   b8f10:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b8f12:	ad07      	add	r5, sp, #28
   b8f14:	f7ff ff18 	bl	b8d48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8f18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8f1a:	1d3c      	adds	r4, r7, #4
   b8f1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8f1e:	682b      	ldr	r3, [r5, #0]
   b8f20:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8f22:	4649      	mov	r1, r9
   b8f24:	e7ca      	b.n	b8ebc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b8f26:	9800      	ldr	r0, [sp, #0]
   b8f28:	f7fe fabe 	bl	b74a8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b8f2c:	4638      	mov	r0, r7
   b8f2e:	b015      	add	sp, #84	; 0x54
   b8f30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b8f34 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b8f34:	4b02      	ldr	r3, [pc, #8]	; (b8f40 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b8f36:	4a03      	ldr	r2, [pc, #12]	; (b8f44 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b8f38:	601a      	str	r2, [r3, #0]
   b8f3a:	2200      	movs	r2, #0
   b8f3c:	605a      	str	r2, [r3, #4]

} // spark
   b8f3e:	4770      	bx	lr
   b8f40:	2003e6d4 	.word	0x2003e6d4
   b8f44:	000bd5c4 	.word	0x000bd5c4

000b8f48 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b8f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8f4a:	4606      	mov	r6, r0
   b8f4c:	460d      	mov	r5, r1
  size_t n = 0;
   b8f4e:	188f      	adds	r7, r1, r2
   b8f50:	2400      	movs	r4, #0
  while (size--) {
   b8f52:	42bd      	cmp	r5, r7
   b8f54:	d00c      	beq.n	b8f70 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b8f56:	6833      	ldr	r3, [r6, #0]
   b8f58:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8f5c:	689b      	ldr	r3, [r3, #8]
   b8f5e:	4630      	mov	r0, r6
   b8f60:	4798      	blx	r3
     if (chunk>=0)
   b8f62:	1e03      	subs	r3, r0, #0
   b8f64:	db01      	blt.n	b8f6a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b8f66:	441c      	add	r4, r3
  while (size--) {
   b8f68:	e7f3      	b.n	b8f52 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b8f6a:	2c00      	cmp	r4, #0
   b8f6c:	bf08      	it	eq
   b8f6e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b8f70:	4620      	mov	r0, r4
   b8f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8f74 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b8f74:	b513      	push	{r0, r1, r4, lr}
   b8f76:	4604      	mov	r4, r0
    }
   b8f78:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b8f7a:	b159      	cbz	r1, b8f94 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b8f7c:	9101      	str	r1, [sp, #4]
   b8f7e:	f001 ff9f 	bl	baec0 <strlen>
   b8f82:	6823      	ldr	r3, [r4, #0]
   b8f84:	9901      	ldr	r1, [sp, #4]
   b8f86:	68db      	ldr	r3, [r3, #12]
   b8f88:	4602      	mov	r2, r0
   b8f8a:	4620      	mov	r0, r4
    }
   b8f8c:	b002      	add	sp, #8
   b8f8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b8f92:	4718      	bx	r3
    }
   b8f94:	b002      	add	sp, #8
   b8f96:	bd10      	pop	{r4, pc}

000b8f98 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b8f98:	b508      	push	{r3, lr}
  return write(str);
   b8f9a:	f7ff ffeb 	bl	b8f74 <_ZN5Print5writeEPKc>
}
   b8f9e:	bd08      	pop	{r3, pc}

000b8fa0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b8fa0:	6803      	ldr	r3, [r0, #0]
   b8fa2:	689b      	ldr	r3, [r3, #8]
   b8fa4:	4718      	bx	r3

000b8fa6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b8fa6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b8fa8:	210d      	movs	r1, #13
{
   b8faa:	4605      	mov	r5, r0
  size_t n = print('\r');
   b8fac:	f7ff fff8 	bl	b8fa0 <_ZN5Print5printEc>
  n += print('\n');
   b8fb0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b8fb2:	4604      	mov	r4, r0
  n += print('\n');
   b8fb4:	4628      	mov	r0, r5
   b8fb6:	f7ff fff3 	bl	b8fa0 <_ZN5Print5printEc>
  return n;
}
   b8fba:	4420      	add	r0, r4
   b8fbc:	bd38      	pop	{r3, r4, r5, pc}

000b8fbe <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b8fbe:	b538      	push	{r3, r4, r5, lr}
   b8fc0:	4605      	mov	r5, r0
  return write(str);
   b8fc2:	f7ff ffd7 	bl	b8f74 <_ZN5Print5writeEPKc>
   b8fc6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b8fc8:	4628      	mov	r0, r5
   b8fca:	f7ff ffec 	bl	b8fa6 <_ZN5Print7printlnEv>
  return n;
}
   b8fce:	4420      	add	r0, r4
   b8fd0:	bd38      	pop	{r3, r4, r5, pc}

000b8fd2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b8fd2:	b530      	push	{r4, r5, lr}
   b8fd4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b8fd6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b8fd8:	2a01      	cmp	r2, #1
  *str = '\0';
   b8fda:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b8fde:	bf98      	it	ls
   b8fe0:	220a      	movls	r2, #10
   b8fe2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b8fe4:	460d      	mov	r5, r1
   b8fe6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b8fea:	fb01 5312 	mls	r3, r1, r2, r5
   b8fee:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8ff2:	2b09      	cmp	r3, #9
   b8ff4:	bf94      	ite	ls
   b8ff6:	3330      	addls	r3, #48	; 0x30
   b8ff8:	3337      	addhi	r3, #55	; 0x37
   b8ffa:	b2db      	uxtb	r3, r3
  } while(n);
   b8ffc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8ffe:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b9002:	d9ef      	bls.n	b8fe4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b9004:	4621      	mov	r1, r4
   b9006:	f7ff ffb5 	bl	b8f74 <_ZN5Print5writeEPKc>
}
   b900a:	b00b      	add	sp, #44	; 0x2c
   b900c:	bd30      	pop	{r4, r5, pc}

000b900e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b900e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9012:	b086      	sub	sp, #24
   b9014:	af00      	add	r7, sp, #0
   b9016:	4605      	mov	r5, r0
   b9018:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b901a:	1d38      	adds	r0, r7, #4
   b901c:	2114      	movs	r1, #20
{
   b901e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b9020:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b9022:	f7fe fbad 	bl	b7780 <vsnprintf>

    if (n<bufsize)
   b9026:	2813      	cmp	r0, #19
   b9028:	d80e      	bhi.n	b9048 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b902a:	1d39      	adds	r1, r7, #4
   b902c:	4628      	mov	r0, r5
   b902e:	f7ff ffa1 	bl	b8f74 <_ZN5Print5writeEPKc>
   b9032:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b9034:	b11e      	cbz	r6, b903e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b9036:	4628      	mov	r0, r5
   b9038:	f7ff ffb5 	bl	b8fa6 <_ZN5Print7printlnEv>
   b903c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b903e:	4620      	mov	r0, r4
   b9040:	3718      	adds	r7, #24
   b9042:	46bd      	mov	sp, r7
   b9044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b9048:	f100 0308 	add.w	r3, r0, #8
   b904c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b9050:	46e8      	mov	r8, sp
        char bigger[n+1];
   b9052:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b9056:	4622      	mov	r2, r4
   b9058:	1c41      	adds	r1, r0, #1
   b905a:	683b      	ldr	r3, [r7, #0]
   b905c:	4668      	mov	r0, sp
   b905e:	f7fe fb8f 	bl	b7780 <vsnprintf>
  return write(str);
   b9062:	4669      	mov	r1, sp
   b9064:	4628      	mov	r0, r5
   b9066:	f7ff ff85 	bl	b8f74 <_ZN5Print5writeEPKc>
   b906a:	4604      	mov	r4, r0
   b906c:	46c5      	mov	sp, r8
   b906e:	e7e1      	b.n	b9034 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b9070 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b9070:	4b01      	ldr	r3, [pc, #4]	; (b9078 <_GLOBAL__sub_I_RGB+0x8>)
   b9072:	2200      	movs	r2, #0
   b9074:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b9076:	4770      	bx	lr
   b9078:	2003e6dc 	.word	0x2003e6dc

000b907c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b907c:	b510      	push	{r4, lr}
   b907e:	4604      	mov	r4, r0
{
	free(buffer);
   b9080:	6800      	ldr	r0, [r0, #0]
   b9082:	f7fe fb65 	bl	b7750 <free>
}
   b9086:	4620      	mov	r0, r4
   b9088:	bd10      	pop	{r4, pc}

000b908a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b908a:	b510      	push	{r4, lr}
   b908c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b908e:	6800      	ldr	r0, [r0, #0]
   b9090:	b108      	cbz	r0, b9096 <_ZN6String10invalidateEv+0xc>
   b9092:	f7fe fb5d 	bl	b7750 <free>
	buffer = NULL;
   b9096:	2300      	movs	r3, #0
	capacity = len = 0;
   b9098:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b909c:	6023      	str	r3, [r4, #0]
}
   b909e:	bd10      	pop	{r4, pc}

000b90a0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b90a0:	b538      	push	{r3, r4, r5, lr}
   b90a2:	4604      	mov	r4, r0
   b90a4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b90a6:	6800      	ldr	r0, [r0, #0]
   b90a8:	3101      	adds	r1, #1
   b90aa:	f7fe fb59 	bl	b7760 <realloc>
	if (newbuffer) {
   b90ae:	b110      	cbz	r0, b90b6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b90b0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b90b4:	2001      	movs	r0, #1
	}
	return 0;
}
   b90b6:	bd38      	pop	{r3, r4, r5, pc}

000b90b8 <_ZN6String7reserveEj>:
{
   b90b8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b90ba:	6803      	ldr	r3, [r0, #0]
{
   b90bc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b90be:	b123      	cbz	r3, b90ca <_ZN6String7reserveEj+0x12>
   b90c0:	6843      	ldr	r3, [r0, #4]
   b90c2:	428b      	cmp	r3, r1
   b90c4:	d301      	bcc.n	b90ca <_ZN6String7reserveEj+0x12>
   b90c6:	2001      	movs	r0, #1
}
   b90c8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b90ca:	4620      	mov	r0, r4
   b90cc:	f7ff ffe8 	bl	b90a0 <_ZN6String12changeBufferEj>
   b90d0:	2800      	cmp	r0, #0
   b90d2:	d0f9      	beq.n	b90c8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b90d4:	68a3      	ldr	r3, [r4, #8]
   b90d6:	2b00      	cmp	r3, #0
   b90d8:	d1f5      	bne.n	b90c6 <_ZN6String7reserveEj+0xe>
   b90da:	6822      	ldr	r2, [r4, #0]
   b90dc:	7013      	strb	r3, [r2, #0]
   b90de:	e7f2      	b.n	b90c6 <_ZN6String7reserveEj+0xe>

000b90e0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b90e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b90e2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b90e4:	4611      	mov	r1, r2
   b90e6:	9201      	str	r2, [sp, #4]
{
   b90e8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b90ea:	f7ff ffe5 	bl	b90b8 <_ZN6String7reserveEj>
   b90ee:	9a01      	ldr	r2, [sp, #4]
   b90f0:	b928      	cbnz	r0, b90fe <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b90f2:	4620      	mov	r0, r4
   b90f4:	f7ff ffc9 	bl	b908a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b90f8:	4620      	mov	r0, r4
   b90fa:	b003      	add	sp, #12
   b90fc:	bd30      	pop	{r4, r5, pc}
	len = length;
   b90fe:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b9100:	4629      	mov	r1, r5
   b9102:	6820      	ldr	r0, [r4, #0]
   b9104:	f001 fe6b 	bl	badde <memcpy>
	buffer[len] = 0;
   b9108:	6822      	ldr	r2, [r4, #0]
   b910a:	68a3      	ldr	r3, [r4, #8]
   b910c:	2100      	movs	r1, #0
   b910e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b9110:	e7f2      	b.n	b90f8 <_ZN6String4copyEPKcj+0x18>

000b9112 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b9112:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b9114:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b9116:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b911a:	4604      	mov	r4, r0
	len = 0;
   b911c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b911e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b9120:	b141      	cbz	r1, b9134 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b9122:	4608      	mov	r0, r1
   b9124:	9101      	str	r1, [sp, #4]
   b9126:	f001 fecb 	bl	baec0 <strlen>
   b912a:	9901      	ldr	r1, [sp, #4]
   b912c:	4602      	mov	r2, r0
   b912e:	4620      	mov	r0, r4
   b9130:	f7ff ffd6 	bl	b90e0 <_ZN6String4copyEPKcj>
}
   b9134:	4620      	mov	r0, r4
   b9136:	b002      	add	sp, #8
   b9138:	bd10      	pop	{r4, pc}

000b913a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b913a:	4288      	cmp	r0, r1
{
   b913c:	b510      	push	{r4, lr}
   b913e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b9140:	d005      	beq.n	b914e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b9142:	680b      	ldr	r3, [r1, #0]
   b9144:	b12b      	cbz	r3, b9152 <_ZN6StringaSERKS_+0x18>
   b9146:	688a      	ldr	r2, [r1, #8]
   b9148:	4619      	mov	r1, r3
   b914a:	f7ff ffc9 	bl	b90e0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b914e:	4620      	mov	r0, r4
   b9150:	bd10      	pop	{r4, pc}
	else invalidate();
   b9152:	f7ff ff9a 	bl	b908a <_ZN6String10invalidateEv>
   b9156:	e7fa      	b.n	b914e <_ZN6StringaSERKS_+0x14>

000b9158 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b9158:	b510      	push	{r4, lr}
	buffer = NULL;
   b915a:	2300      	movs	r3, #0
String::String(const String &value)
   b915c:	4604      	mov	r4, r0
	capacity = 0;
   b915e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b9162:	6083      	str	r3, [r0, #8]
	flags = 0;
   b9164:	7303      	strb	r3, [r0, #12]
	*this = value;
   b9166:	f7ff ffe8 	bl	b913a <_ZN6StringaSERKS_>
}
   b916a:	4620      	mov	r0, r4
   b916c:	bd10      	pop	{r4, pc}

000b916e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b916e:	b513      	push	{r0, r1, r4, lr}
   b9170:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b9172:	b159      	cbz	r1, b918c <_ZN6StringaSEPKc+0x1e>
   b9174:	4608      	mov	r0, r1
   b9176:	9101      	str	r1, [sp, #4]
   b9178:	f001 fea2 	bl	baec0 <strlen>
   b917c:	9901      	ldr	r1, [sp, #4]
   b917e:	4602      	mov	r2, r0
   b9180:	4620      	mov	r0, r4
   b9182:	f7ff ffad 	bl	b90e0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b9186:	4620      	mov	r0, r4
   b9188:	b002      	add	sp, #8
   b918a:	bd10      	pop	{r4, pc}
	else invalidate();
   b918c:	f7ff ff7d 	bl	b908a <_ZN6String10invalidateEv>
   b9190:	e7f9      	b.n	b9186 <_ZN6StringaSEPKc+0x18>

000b9192 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b9192:	b510      	push	{r4, lr}
   b9194:	4604      	mov	r4, r0
   b9196:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b9198:	2300      	movs	r3, #0
	capacity = 0;
   b919a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b919e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b91a0:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b91a2:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b91a4:	a901      	add	r1, sp, #4
   b91a6:	f000 fcf7 	bl	b9b98 <itoa>
	*this = buf;
   b91aa:	a901      	add	r1, sp, #4
   b91ac:	4620      	mov	r0, r4
   b91ae:	f7ff ffde 	bl	b916e <_ZN6StringaSEPKc>
}
   b91b2:	4620      	mov	r0, r4
   b91b4:	b00a      	add	sp, #40	; 0x28
   b91b6:	bd10      	pop	{r4, pc}

000b91b8 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b91b8:	b570      	push	{r4, r5, r6, lr}
   b91ba:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b91bc:	460e      	mov	r6, r1
   b91be:	b909      	cbnz	r1, b91c4 <_ZN6String6concatEPKcj+0xc>
   b91c0:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b91c2:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b91c4:	b16a      	cbz	r2, b91e2 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b91c6:	6884      	ldr	r4, [r0, #8]
   b91c8:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b91ca:	4621      	mov	r1, r4
   b91cc:	f7ff ff74 	bl	b90b8 <_ZN6String7reserveEj>
   b91d0:	2800      	cmp	r0, #0
   b91d2:	d0f5      	beq.n	b91c0 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b91d4:	6828      	ldr	r0, [r5, #0]
   b91d6:	68ab      	ldr	r3, [r5, #8]
   b91d8:	4631      	mov	r1, r6
   b91da:	4418      	add	r0, r3
   b91dc:	f001 fe68 	bl	baeb0 <strcpy>
	len = newlen;
   b91e0:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b91e2:	2001      	movs	r0, #1
   b91e4:	e7ed      	b.n	b91c2 <_ZN6String6concatEPKcj+0xa>

000b91e6 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b91e6:	688a      	ldr	r2, [r1, #8]
   b91e8:	6809      	ldr	r1, [r1, #0]
   b91ea:	f7ff bfe5 	b.w	b91b8 <_ZN6String6concatEPKcj>

000b91ee <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b91ee:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b91f0:	2300      	movs	r3, #0
	buf[0] = c;
   b91f2:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b91f6:	2201      	movs	r2, #1
   b91f8:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b91fa:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b91fe:	f7ff ffdb 	bl	b91b8 <_ZN6String6concatEPKcj>
}
   b9202:	b003      	add	sp, #12
   b9204:	f85d fb04 	ldr.w	pc, [sp], #4

000b9208 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b9208:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b920a:	688a      	ldr	r2, [r1, #8]
   b920c:	6809      	ldr	r1, [r1, #0]
{
   b920e:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b9210:	f7ff ffd2 	bl	b91b8 <_ZN6String6concatEPKcj>
   b9214:	b910      	cbnz	r0, b921c <_ZplRK15StringSumHelperRK6String+0x14>
   b9216:	4620      	mov	r0, r4
   b9218:	f7ff ff37 	bl	b908a <_ZN6String10invalidateEv>
	return a;
}
   b921c:	4620      	mov	r0, r4
   b921e:	bd10      	pop	{r4, pc}

000b9220 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b9220:	b513      	push	{r0, r1, r4, lr}
   b9222:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b9224:	b929      	cbnz	r1, b9232 <_ZplRK15StringSumHelperPKc+0x12>
   b9226:	4620      	mov	r0, r4
   b9228:	f7ff ff2f 	bl	b908a <_ZN6String10invalidateEv>
	return a;
}
   b922c:	4620      	mov	r0, r4
   b922e:	b002      	add	sp, #8
   b9230:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b9232:	4608      	mov	r0, r1
   b9234:	9101      	str	r1, [sp, #4]
   b9236:	f001 fe43 	bl	baec0 <strlen>
   b923a:	9901      	ldr	r1, [sp, #4]
   b923c:	4602      	mov	r2, r0
   b923e:	4620      	mov	r0, r4
   b9240:	f7ff ffba 	bl	b91b8 <_ZN6String6concatEPKcj>
   b9244:	2800      	cmp	r0, #0
   b9246:	d0ee      	beq.n	b9226 <_ZplRK15StringSumHelperPKc+0x6>
   b9248:	e7f0      	b.n	b922c <_ZplRK15StringSumHelperPKc+0xc>

000b924a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b924a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b924c:	6882      	ldr	r2, [r0, #8]
   b924e:	b93a      	cbnz	r2, b9260 <_ZNK6String6equalsEPKc+0x16>
   b9250:	b121      	cbz	r1, b925c <_ZNK6String6equalsEPKc+0x12>
   b9252:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b9254:	fab0 f080 	clz	r0, r0
   b9258:	0940      	lsrs	r0, r0, #5
   b925a:	e000      	b.n	b925e <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b925c:	2001      	movs	r0, #1
}
   b925e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b9260:	6800      	ldr	r0, [r0, #0]
   b9262:	b909      	cbnz	r1, b9268 <_ZNK6String6equalsEPKc+0x1e>
   b9264:	7800      	ldrb	r0, [r0, #0]
   b9266:	e7f5      	b.n	b9254 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b9268:	f001 fe18 	bl	bae9c <strcmp>
   b926c:	e7f2      	b.n	b9254 <_ZNK6String6equalsEPKc+0xa>

000b926e <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   b926e:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   b9270:	6883      	ldr	r3, [r0, #8]
   b9272:	4293      	cmp	r3, r2
   b9274:	d907      	bls.n	b9286 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   b9276:	6804      	ldr	r4, [r0, #0]
   b9278:	6809      	ldr	r1, [r1, #0]
   b927a:	18a0      	adds	r0, r4, r2
   b927c:	f001 fe48 	bl	baf10 <strstr>
	if (found == NULL) return -1;
   b9280:	b108      	cbz	r0, b9286 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   b9282:	1b00      	subs	r0, r0, r4
}
   b9284:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   b9286:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b928a:	e7fb      	b.n	b9284 <_ZNK6String7indexOfERKS_j+0x16>

000b928c <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   b928c:	2200      	movs	r2, #0
   b928e:	f7ff bfee 	b.w	b926e <_ZNK6String7indexOfERKS_j>
	...

000b9294 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b9294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b9296:	429a      	cmp	r2, r3
{
   b9298:	460f      	mov	r7, r1
   b929a:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b929c:	490c      	ldr	r1, [pc, #48]	; (b92d0 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b929e:	bf88      	it	hi
   b92a0:	4613      	movhi	r3, r2
{
   b92a2:	4614      	mov	r4, r2
   b92a4:	4606      	mov	r6, r0
	if (left > right) {
   b92a6:	bf84      	itt	hi
   b92a8:	462c      	movhi	r4, r5
   b92aa:	461d      	movhi	r5, r3
	String out;
   b92ac:	f7ff ff31 	bl	b9112 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b92b0:	68bb      	ldr	r3, [r7, #8]
   b92b2:	42a3      	cmp	r3, r4
   b92b4:	d30a      	bcc.n	b92cc <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b92b6:	6839      	ldr	r1, [r7, #0]
   b92b8:	42ab      	cmp	r3, r5
   b92ba:	bf94      	ite	ls
   b92bc:	ebc4 0203 	rsbls	r2, r4, r3
   b92c0:	ebc4 0205 	rsbhi	r2, r4, r5
   b92c4:	4421      	add	r1, r4
   b92c6:	4630      	mov	r0, r6
   b92c8:	f7ff ff0a 	bl	b90e0 <_ZN6String4copyEPKcj>
	return out;
}
   b92cc:	4630      	mov	r0, r6
   b92ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b92d0:	000bd32a 	.word	0x000bd32a

000b92d4 <_ZNK6String9substringEj>:
{
   b92d4:	b510      	push	{r4, lr}
   b92d6:	4604      	mov	r4, r0
	return substring(left, len);
   b92d8:	688b      	ldr	r3, [r1, #8]
   b92da:	f7ff ffdb 	bl	b9294 <_ZNK6String9substringEjj>
}
   b92de:	4620      	mov	r0, r4
   b92e0:	bd10      	pop	{r4, pc}

000b92e2 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   b92e2:	6800      	ldr	r0, [r0, #0]
   b92e4:	b108      	cbz	r0, b92ea <_ZNK6String5toIntEv+0x8>
   b92e6:	f001 bd66 	b.w	badb6 <atol>
	return 0;
}
   b92ea:	4770      	bx	lr

000b92ec <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b92ec:	4b05      	ldr	r3, [pc, #20]	; (b9304 <_GLOBAL__sub_I_System+0x18>)
   b92ee:	2202      	movs	r2, #2
   b92f0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b92f2:	4b05      	ldr	r3, [pc, #20]	; (b9308 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b92f4:	4a05      	ldr	r2, [pc, #20]	; (b930c <_GLOBAL__sub_I_System+0x20>)
   b92f6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b92f8:	2000      	movs	r0, #0
   b92fa:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b92fe:	f7fe b993 	b.w	b7628 <set_system_mode>
   b9302:	bf00      	nop
   b9304:	2003e6f8 	.word	0x2003e6f8
   b9308:	2003e6ec 	.word	0x2003e6ec
   b930c:	ffff0000 	.word	0xffff0000

000b9310 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b9310:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b9312:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b9314:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b9318:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b931a:	2201      	movs	r2, #1
   b931c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9320:	f10d 0107 	add.w	r1, sp, #7
   b9324:	47a0      	blx	r4
}
   b9326:	b002      	add	sp, #8
   b9328:	bd10      	pop	{r4, pc}

000b932a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b932a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b932c:	6803      	ldr	r3, [r0, #0]
   b932e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b9330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9334:	46a4      	mov	ip, r4
}
   b9336:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b933a:	4760      	bx	ip

000b933c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b933c:	b513      	push	{r0, r1, r4, lr}
   b933e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b9340:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b9342:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b9346:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b9348:	f10d 0107 	add.w	r1, sp, #7
   b934c:	2201      	movs	r2, #1
   b934e:	47a0      	blx	r4
}
   b9350:	b002      	add	sp, #8
   b9352:	bd10      	pop	{r4, pc}

000b9354 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b9354:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b9356:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9358:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b935c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9360:	429a      	cmp	r2, r3
int TCPClient::read() {
   b9362:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9364:	d008      	beq.n	b9378 <_ZN9TCPClient4readEv+0x24>
   b9366:	6963      	ldr	r3, [r4, #20]
   b9368:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b936c:	1c51      	adds	r1, r2, #1
   b936e:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b9372:	4413      	add	r3, r2
   b9374:	7918      	ldrb	r0, [r3, #4]
}
   b9376:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9378:	6803      	ldr	r3, [r0, #0]
   b937a:	691b      	ldr	r3, [r3, #16]
   b937c:	4798      	blx	r3
   b937e:	2800      	cmp	r0, #0
   b9380:	d1f1      	bne.n	b9366 <_ZN9TCPClient4readEv+0x12>
   b9382:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9386:	e7f6      	b.n	b9376 <_ZN9TCPClient4readEv+0x22>

000b9388 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b9388:	4770      	bx	lr

000b938a <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b938a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b938c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b938e:	43c0      	mvns	r0, r0
   b9390:	0fc0      	lsrs	r0, r0, #31
   b9392:	4770      	bx	lr

000b9394 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9394:	4770      	bx	lr
	...

000b9398 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9398:	4b06      	ldr	r3, [pc, #24]	; (b93b4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b939a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b939c:	b510      	push	{r4, lr}
   b939e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b93a2:	d005      	beq.n	b93b0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b93a4:	4608      	mov	r0, r1
   b93a6:	f000 fd1d 	bl	b9de4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b93aa:	2800      	cmp	r0, #0
   b93ac:	bf08      	it	eq
   b93ae:	2400      	moveq	r4, #0
      }
   b93b0:	4620      	mov	r0, r4
   b93b2:	bd10      	pop	{r4, pc}
   b93b4:	000bd500 	.word	0x000bd500

000b93b8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b93b8:	b510      	push	{r4, lr}
   b93ba:	21ac      	movs	r1, #172	; 0xac
   b93bc:	4604      	mov	r4, r0
   b93be:	f7fa fe70 	bl	b40a2 <_ZdlPvj>
   b93c2:	4620      	mov	r0, r4
   b93c4:	bd10      	pop	{r4, pc}

000b93c6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b93c6:	21ac      	movs	r1, #172	; 0xac
   b93c8:	f7fa be6b 	b.w	b40a2 <_ZdlPvj>

000b93cc <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b93cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b93d0:	f04f 0800 	mov.w	r8, #0
   b93d4:	b086      	sub	sp, #24
   b93d6:	461c      	mov	r4, r3
   b93d8:	f8c0 8004 	str.w	r8, [r0, #4]
   b93dc:	4605      	mov	r5, r0
   b93de:	460e      	mov	r6, r1
   b93e0:	4617      	mov	r7, r2
    struct timeval tv = {};
   b93e2:	4641      	mov	r1, r8
   b93e4:	2210      	movs	r2, #16
   b93e6:	a802      	add	r0, sp, #8
   b93e8:	f001 fd21 	bl	bae2e <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b93ec:	1c63      	adds	r3, r4, #1
   b93ee:	d009      	beq.n	b9404 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b93f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b93f4:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b93f8:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b93fc:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b9400:	435c      	muls	r4, r3
   b9402:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b9404:	6968      	ldr	r0, [r5, #20]
   b9406:	2310      	movs	r3, #16
   b9408:	9300      	str	r3, [sp, #0]
   b940a:	6800      	ldr	r0, [r0, #0]
   b940c:	ab02      	add	r3, sp, #8
   b940e:	f241 0205 	movw	r2, #4101	; 0x1005
   b9412:	f640 71ff 	movw	r1, #4095	; 0xfff
   b9416:	f7fe f857 	bl	b74c8 <sock_setsockopt>
    if (ret < 0) {
   b941a:	2800      	cmp	r0, #0
   b941c:	da07      	bge.n	b942e <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b941e:	f7fe f9c7 	bl	b77b0 <__errno>
   b9422:	6803      	ldr	r3, [r0, #0]
   b9424:	606b      	str	r3, [r5, #4]
        return 0;
   b9426:	2000      	movs	r0, #0
}
   b9428:	b006      	add	sp, #24
   b942a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b942e:	6968      	ldr	r0, [r5, #20]
   b9430:	2300      	movs	r3, #0
   b9432:	6800      	ldr	r0, [r0, #0]
   b9434:	463a      	mov	r2, r7
   b9436:	4631      	mov	r1, r6
   b9438:	f7fe f866 	bl	b7508 <sock_send>
    if (ret < 0) {
   b943c:	1e03      	subs	r3, r0, #0
   b943e:	dbee      	blt.n	b941e <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b9440:	4618      	mov	r0, r3
   b9442:	e7f1      	b.n	b9428 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b9444 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b9444:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b9446:	6984      	ldr	r4, [r0, #24]
   b9448:	4b0a      	ldr	r3, [pc, #40]	; (b9474 <_ZN9TCPClientD1Ev+0x30>)
   b944a:	6003      	str	r3, [r0, #0]
   b944c:	4605      	mov	r5, r0
   b944e:	b17c      	cbz	r4, b9470 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b9450:	6863      	ldr	r3, [r4, #4]
   b9452:	3b01      	subs	r3, #1
   b9454:	6063      	str	r3, [r4, #4]
   b9456:	b95b      	cbnz	r3, b9470 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b9458:	6823      	ldr	r3, [r4, #0]
   b945a:	4620      	mov	r0, r4
   b945c:	689b      	ldr	r3, [r3, #8]
   b945e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b9460:	68a3      	ldr	r3, [r4, #8]
   b9462:	3b01      	subs	r3, #1
   b9464:	60a3      	str	r3, [r4, #8]
   b9466:	b91b      	cbnz	r3, b9470 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b9468:	6823      	ldr	r3, [r4, #0]
   b946a:	4620      	mov	r0, r4
   b946c:	68db      	ldr	r3, [r3, #12]
   b946e:	4798      	blx	r3
   b9470:	4628      	mov	r0, r5
   b9472:	bd38      	pop	{r3, r4, r5, pc}
   b9474:	000bd634 	.word	0x000bd634

000b9478 <_ZN9TCPClientD0Ev>:
   b9478:	b510      	push	{r4, lr}
   b947a:	4604      	mov	r4, r0
   b947c:	f7ff ffe2 	bl	b9444 <_ZN9TCPClientD1Ev>
   b9480:	4620      	mov	r0, r4
   b9482:	211c      	movs	r1, #28
   b9484:	f7fa fe0d 	bl	b40a2 <_ZdlPvj>
   b9488:	4620      	mov	r0, r4
   b948a:	bd10      	pop	{r4, pc}

000b948c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b948c:	b530      	push	{r4, r5, lr}
   b948e:	b087      	sub	sp, #28
   b9490:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b9492:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b9494:	4668      	mov	r0, sp
   b9496:	f7ff fc8d 	bl	b8db4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b949a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b949c:	3404      	adds	r4, #4
   b949e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b94a0:	682b      	ldr	r3, [r5, #0]
   b94a2:	7023      	strb	r3, [r4, #0]
    }
   b94a4:	b007      	add	sp, #28
   b94a6:	bd30      	pop	{r4, r5, pc}

000b94a8 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b94a8:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b94aa:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b94ac:	4b05      	ldr	r3, [pc, #20]	; (b94c4 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b94ae:	4604      	mov	r4, r0
   b94b0:	358c      	adds	r5, #140	; 0x8c
   b94b2:	f844 3b04 	str.w	r3, [r4], #4
   b94b6:	4606      	mov	r6, r0
   b94b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b94ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b94bc:	682b      	ldr	r3, [r5, #0]
   b94be:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b94c0:	4630      	mov	r0, r6
   b94c2:	bd70      	pop	{r4, r5, r6, pc}
   b94c4:	000bd5ac 	.word	0x000bd5ac

000b94c8 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b94c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b94cc:	4698      	mov	r8, r3
    stop();
   b94ce:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b94d0:	b093      	sub	sp, #76	; 0x4c
   b94d2:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b94d4:	2400      	movs	r4, #0
    stop();
   b94d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b94d8:	4606      	mov	r6, r0
   b94da:	4617      	mov	r7, r2
    stop();
   b94dc:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b94de:	4628      	mov	r0, r5
   b94e0:	466b      	mov	r3, sp
   b94e2:	4622      	mov	r2, r4
   b94e4:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b94e6:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b94e8:	f7fd ffe6 	bl	b74b8 <netdb_getaddrinfo>
   b94ec:	4605      	mov	r5, r0
   b94ee:	2800      	cmp	r0, #0
   b94f0:	d163      	bne.n	b95ba <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b94f2:	9b00      	ldr	r3, [sp, #0]
   b94f4:	2b00      	cmp	r3, #0
   b94f6:	d04b      	beq.n	b9590 <_ZN9TCPClient7connectEPKctm+0xc8>
   b94f8:	695b      	ldr	r3, [r3, #20]
   b94fa:	2b00      	cmp	r3, #0
   b94fc:	d048      	beq.n	b9590 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b94fe:	a806      	add	r0, sp, #24
   b9500:	f7ff fc14 	bl	b8d2c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b9504:	9b00      	ldr	r3, [sp, #0]
   b9506:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b9508:	7863      	ldrb	r3, [r4, #1]
   b950a:	2b02      	cmp	r3, #2
   b950c:	d104      	bne.n	b9518 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b950e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b9510:	a806      	add	r0, sp, #24
   b9512:	f7ff ffbb 	bl	b948c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b9516:	e026      	b.n	b9566 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b9518:	2b0a      	cmp	r3, #10
   b951a:	d124      	bne.n	b9566 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b951c:	2211      	movs	r2, #17
   b951e:	4629      	mov	r1, r5
   b9520:	a801      	add	r0, sp, #4
   b9522:	f001 fc84 	bl	bae2e <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b9526:	68a3      	ldr	r3, [r4, #8]
   b9528:	2b00      	cmp	r3, #0
   b952a:	d038      	beq.n	b959e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b952c:	f104 0308 	add.w	r3, r4, #8
   b9530:	f10d 0c04 	add.w	ip, sp, #4
   b9534:	3418      	adds	r4, #24
   b9536:	6818      	ldr	r0, [r3, #0]
   b9538:	6859      	ldr	r1, [r3, #4]
   b953a:	4662      	mov	r2, ip
   b953c:	c203      	stmia	r2!, {r0, r1}
   b953e:	3308      	adds	r3, #8
   b9540:	42a3      	cmp	r3, r4
   b9542:	4694      	mov	ip, r2
   b9544:	d1f7      	bne.n	b9536 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b9546:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b9548:	a901      	add	r1, sp, #4
   b954a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b954c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b9550:	f7ff fbfa 	bl	b8d48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9554:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b9558:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b955c:	ac07      	add	r4, sp, #28
   b955e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9560:	f8dc 3000 	ldr.w	r3, [ip]
   b9564:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b9566:	a806      	add	r0, sp, #24
   b9568:	f7ff fc00 	bl	b8d6c <_ZNK9IPAddresscvbEv>
        if (addr) {
   b956c:	b180      	cbz	r0, b9590 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b956e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b9570:	ad07      	add	r5, sp, #28
   b9572:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b9576:	4b12      	ldr	r3, [pc, #72]	; (b95c0 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b9578:	930c      	str	r3, [sp, #48]	; 0x30
   b957a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b957c:	ac0d      	add	r4, sp, #52	; 0x34
   b957e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9580:	682b      	ldr	r3, [r5, #0]
   b9582:	7023      	strb	r3, [r4, #0]
   b9584:	463a      	mov	r2, r7
   b9586:	4643      	mov	r3, r8
   b9588:	a90c      	add	r1, sp, #48	; 0x30
   b958a:	4630      	mov	r0, r6
   b958c:	47c8      	blx	r9
   b958e:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b9590:	9800      	ldr	r0, [sp, #0]
   b9592:	f7fd ff89 	bl	b74a8 <netdb_freeaddrinfo>
}
   b9596:	4628      	mov	r0, r5
   b9598:	b013      	add	sp, #76	; 0x4c
   b959a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b959e:	68e3      	ldr	r3, [r4, #12]
   b95a0:	2b00      	cmp	r3, #0
   b95a2:	d1c3      	bne.n	b952c <_ZN9TCPClient7connectEPKctm+0x64>
   b95a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b95a8:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b95ac:	f7fd ff6c 	bl	b7488 <inet_htonl>
   b95b0:	4581      	cmp	r9, r0
   b95b2:	d1bb      	bne.n	b952c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b95b4:	f104 0114 	add.w	r1, r4, #20
   b95b8:	e7aa      	b.n	b9510 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b95ba:	4625      	mov	r5, r4
   b95bc:	e7e8      	b.n	b9590 <_ZN9TCPClient7connectEPKctm+0xc8>
   b95be:	bf00      	nop
   b95c0:	000bd5ac 	.word	0x000bd5ac

000b95c4 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b95c4:	b538      	push	{r3, r4, r5, lr}
   b95c6:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b95c8:	681a      	ldr	r2, [r3, #0]
   b95ca:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b95cc:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b95ce:	da10      	bge.n	b95f2 <_ZN9TCPClient9connectedEv+0x2e>
   b95d0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b95d4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b95d8:	429a      	cmp	r2, r3
   b95da:	d10a      	bne.n	b95f2 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b95dc:	6803      	ldr	r3, [r0, #0]
   b95de:	691b      	ldr	r3, [r3, #16]
   b95e0:	4798      	blx	r3
        if (!rv) {
   b95e2:	4604      	mov	r4, r0
   b95e4:	b928      	cbnz	r0, b95f2 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b95e6:	682b      	ldr	r3, [r5, #0]
   b95e8:	4628      	mov	r0, r5
   b95ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b95ec:	4798      	blx	r3
        rv = available();
   b95ee:	4620      	mov	r0, r4
}
   b95f0:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b95f2:	2001      	movs	r0, #1
   b95f4:	e7fc      	b.n	b95f0 <_ZN9TCPClient9connectedEv+0x2c>

000b95f6 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b95f6:	b510      	push	{r4, lr}
   b95f8:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b95fa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b95fe:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9602:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b9604:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9606:	d005      	beq.n	b9614 <_ZN9TCPClient4peekEv+0x1e>
   b9608:	6963      	ldr	r3, [r4, #20]
   b960a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b960e:	4413      	add	r3, r2
   b9610:	7918      	ldrb	r0, [r3, #4]
}
   b9612:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9614:	6803      	ldr	r3, [r0, #0]
   b9616:	691b      	ldr	r3, [r3, #16]
   b9618:	4798      	blx	r3
   b961a:	2800      	cmp	r0, #0
   b961c:	d1f4      	bne.n	b9608 <_ZN9TCPClient4peekEv+0x12>
   b961e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9622:	e7f6      	b.n	b9612 <_ZN9TCPClient4peekEv+0x1c>

000b9624 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b9624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9626:	6943      	ldr	r3, [r0, #20]
   b9628:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b962a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b962e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9632:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b9634:	4605      	mov	r5, r0
   b9636:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b9638:	d016      	beq.n	b9668 <_ZN9TCPClient4readEPhj+0x44>
   b963a:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b963c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b9640:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b9644:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b9646:	42bc      	cmp	r4, r7
   b9648:	bf28      	it	cs
   b964a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b964c:	3304      	adds	r3, #4
   b964e:	4622      	mov	r2, r4
   b9650:	4419      	add	r1, r3
   b9652:	4630      	mov	r0, r6
   b9654:	f001 fbc3 	bl	badde <memcpy>
   b9658:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b965a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b965e:	4423      	add	r3, r4
   b9660:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b9664:	4620      	mov	r0, r4
   b9666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b9668:	6803      	ldr	r3, [r0, #0]
   b966a:	691b      	ldr	r3, [r3, #16]
   b966c:	4798      	blx	r3
   b966e:	2800      	cmp	r0, #0
   b9670:	d1e3      	bne.n	b963a <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b9672:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b9676:	e7f5      	b.n	b9664 <_ZN9TCPClient4readEPhj+0x40>

000b9678 <_ZN9TCPClient12flush_bufferEv>:
   b9678:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b967a:	2300      	movs	r3, #0
   b967c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b9680:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b9682:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b9686:	4770      	bx	lr

000b9688 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b968c:	461f      	mov	r7, r3
    stop();
   b968e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9690:	460c      	mov	r4, r1
    stop();
   b9692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9694:	b08a      	sub	sp, #40	; 0x28
   b9696:	4605      	mov	r5, r0
   b9698:	4616      	mov	r6, r2
    stop();
   b969a:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b969c:	7d23      	ldrb	r3, [r4, #20]
   b969e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b96a2:	2b04      	cmp	r3, #4
   b96a4:	bf0c      	ite	eq
   b96a6:	2002      	moveq	r0, #2
   b96a8:	200a      	movne	r0, #10
   b96aa:	2206      	movs	r2, #6
   b96ac:	2101      	movs	r1, #1
   b96ae:	f7fd ff33 	bl	b7518 <sock_socket>
   b96b2:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b96b6:	696b      	ldr	r3, [r5, #20]
   b96b8:	681b      	ldr	r3, [r3, #0]
   b96ba:	2b00      	cmp	r3, #0
   b96bc:	da08      	bge.n	b96d0 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b96be:	682b      	ldr	r3, [r5, #0]
   b96c0:	4628      	mov	r0, r5
   b96c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b96c4:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b96c6:	4798      	blx	r3
}
   b96c8:	4620      	mov	r0, r4
   b96ca:	b00a      	add	sp, #40	; 0x28
   b96cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b96d0:	4628      	mov	r0, r5
   b96d2:	f7ff ffd1 	bl	b9678 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b96d6:	b1b7      	cbz	r7, b9706 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b96d8:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b96da:	a903      	add	r1, sp, #12
   b96dc:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b96de:	9303      	str	r3, [sp, #12]
   b96e0:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b96e4:	f7fd fec0 	bl	b7468 <if_index_to_name>
   b96e8:	2800      	cmp	r0, #0
   b96ea:	d1e8      	bne.n	b96be <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b96ec:	6968      	ldr	r0, [r5, #20]
   b96ee:	2306      	movs	r3, #6
   b96f0:	9300      	str	r3, [sp, #0]
   b96f2:	6800      	ldr	r0, [r0, #0]
   b96f4:	ab03      	add	r3, sp, #12
   b96f6:	f241 020b 	movw	r2, #4107	; 0x100b
   b96fa:	f640 71ff 	movw	r1, #4095	; 0xfff
   b96fe:	f7fd fee3 	bl	b74c8 <sock_setsockopt>
   b9702:	2800      	cmp	r0, #0
   b9704:	d1db      	bne.n	b96be <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b9706:	221c      	movs	r2, #28
   b9708:	2100      	movs	r1, #0
   b970a:	a803      	add	r0, sp, #12
   b970c:	f001 fb8f 	bl	bae2e <memset>
    if (ip.version() == 4) {
   b9710:	7d23      	ldrb	r3, [r4, #20]
   b9712:	2b04      	cmp	r3, #4
   b9714:	d11d      	bne.n	b9752 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b9716:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b971a:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b971c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b9720:	f7fd feba 	bl	b7498 <inet_htons>
   b9724:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b9728:	6860      	ldr	r0, [r4, #4]
   b972a:	f7fd fead 	bl	b7488 <inet_htonl>
   b972e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b9730:	696b      	ldr	r3, [r5, #20]
   b9732:	221c      	movs	r2, #28
   b9734:	6818      	ldr	r0, [r3, #0]
   b9736:	a903      	add	r1, sp, #12
   b9738:	f7fd fed6 	bl	b74e8 <sock_connect>
   b973c:	2800      	cmp	r0, #0
   b973e:	d1be      	bne.n	b96be <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b9740:	3404      	adds	r4, #4
   b9742:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9744:	696d      	ldr	r5, [r5, #20]
   b9746:	358c      	adds	r5, #140	; 0x8c
   b9748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b974a:	6823      	ldr	r3, [r4, #0]
   b974c:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b974e:	2401      	movs	r4, #1
   b9750:	e7ba      	b.n	b96c8 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b9752:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b9756:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b9758:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b975c:	f7fd fe9c 	bl	b7498 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9760:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b9762:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9766:	1d23      	adds	r3, r4, #4
   b9768:	f104 0714 	add.w	r7, r4, #20
   b976c:	6818      	ldr	r0, [r3, #0]
   b976e:	6859      	ldr	r1, [r3, #4]
   b9770:	4632      	mov	r2, r6
   b9772:	c203      	stmia	r2!, {r0, r1}
   b9774:	3308      	adds	r3, #8
   b9776:	42bb      	cmp	r3, r7
   b9778:	4616      	mov	r6, r2
   b977a:	d1f7      	bne.n	b976c <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b977c:	e7d8      	b.n	b9730 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b9780 <_ZN9TCPClient9availableEv>:
{
   b9780:	b530      	push	{r4, r5, lr}
   b9782:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b9784:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b9788:	b08b      	sub	sp, #44	; 0x2c
   b978a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b978c:	b12b      	cbz	r3, b979a <_ZN9TCPClient9availableEv+0x1a>
   b978e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b9792:	429a      	cmp	r2, r3
   b9794:	d101      	bne.n	b979a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b9796:	f7ff ff6f 	bl	b9678 <_ZN9TCPClient12flush_bufferEv>
   b979a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b979c:	6808      	ldr	r0, [r1, #0]
   b979e:	2800      	cmp	r0, #0
   b97a0:	db18      	blt.n	b97d4 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b97a2:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b97a6:	2d7f      	cmp	r5, #127	; 0x7f
   b97a8:	d814      	bhi.n	b97d4 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b97aa:	3104      	adds	r1, #4
   b97ac:	2308      	movs	r3, #8
   b97ae:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b97b2:	4429      	add	r1, r5
   b97b4:	f7fd fea0 	bl	b74f8 <sock_recv>
            if (ret > 0) {
   b97b8:	2800      	cmp	r0, #0
   b97ba:	dd13      	ble.n	b97e4 <_ZN9TCPClient9availableEv+0x64>
   b97bc:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b97be:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b97c2:	b90a      	cbnz	r2, b97c8 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b97c4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b97c8:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b97ca:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b97ce:	4410      	add	r0, r2
   b97d0:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b97d4:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b97d6:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b97da:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b97de:	1ac0      	subs	r0, r0, r3
   b97e0:	b00b      	add	sp, #44	; 0x2c
   b97e2:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b97e4:	f7fd ffe4 	bl	b77b0 <__errno>
   b97e8:	6803      	ldr	r3, [r0, #0]
   b97ea:	2b0b      	cmp	r3, #11
   b97ec:	d0f2      	beq.n	b97d4 <_ZN9TCPClient9availableEv+0x54>
   b97ee:	f7fd ffdf 	bl	b77b0 <__errno>
   b97f2:	6803      	ldr	r3, [r0, #0]
   b97f4:	2b0b      	cmp	r3, #11
   b97f6:	d0ed      	beq.n	b97d4 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b97f8:	2320      	movs	r3, #32
   b97fa:	2500      	movs	r5, #0
   b97fc:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b9800:	f7fd ffd6 	bl	b77b0 <__errno>
   b9804:	6803      	ldr	r3, [r0, #0]
   b9806:	9301      	str	r3, [sp, #4]
   b9808:	4b08      	ldr	r3, [pc, #32]	; (b982c <_ZN9TCPClient9availableEv+0xac>)
   b980a:	4909      	ldr	r1, [pc, #36]	; (b9830 <_ZN9TCPClient9availableEv+0xb0>)
   b980c:	9300      	str	r3, [sp, #0]
   b980e:	aa02      	add	r2, sp, #8
   b9810:	462b      	mov	r3, r5
   b9812:	2032      	movs	r0, #50	; 0x32
   b9814:	f7fd ff00 	bl	b7618 <log_message>
                    sock_close(d_->sock);
   b9818:	6963      	ldr	r3, [r4, #20]
   b981a:	6818      	ldr	r0, [r3, #0]
   b981c:	f7fd fe5c 	bl	b74d8 <sock_close>
   b9820:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b9822:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9826:	601a      	str	r2, [r3, #0]
   b9828:	e7d4      	b.n	b97d4 <_ZN9TCPClient9availableEv+0x54>
   b982a:	bf00      	nop
   b982c:	000bd5ff 	.word	0x000bd5ff
   b9830:	000bd5f8 	.word	0x000bd5f8

000b9834 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b9834:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b9836:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b9838:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b983a:	6818      	ldr	r0, [r3, #0]
   b983c:	2800      	cmp	r0, #0
   b983e:	db01      	blt.n	b9844 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b9840:	f7fd fe4a 	bl	b74d8 <sock_close>
   b9844:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b9846:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b984a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b984c:	6960      	ldr	r0, [r4, #20]
   b984e:	2211      	movs	r2, #17
   b9850:	2100      	movs	r1, #0
   b9852:	308c      	adds	r0, #140	; 0x8c
   b9854:	f001 faeb 	bl	bae2e <memset>
    flush_buffer();
   b9858:	4620      	mov	r0, r4
}
   b985a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b985e:	f7ff bf0b 	b.w	b9678 <_ZN9TCPClient12flush_bufferEv>

000b9862 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b9862:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b9864:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b9866:	4604      	mov	r4, r0
          total(0) {
   b9868:	6001      	str	r1, [r0, #0]
   b986a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b986e:	3088      	adds	r0, #136	; 0x88
   b9870:	f7ff fa5c 	bl	b8d2c <_ZN9IPAddressC1Ev>
}
   b9874:	4620      	mov	r0, r4
   b9876:	bd10      	pop	{r4, pc}

000b9878 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b9878:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b987a:	2300      	movs	r3, #0
   b987c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b9880:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b9884:	4a0e      	ldr	r2, [pc, #56]	; (b98c0 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b9886:	6103      	str	r3, [r0, #16]
   b9888:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b988a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b988c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b988e:	20ac      	movs	r0, #172	; 0xac
   b9890:	9101      	str	r1, [sp, #4]
   b9892:	f7fa fc00 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b9896:	1e05      	subs	r5, r0, #0
   b9898:	f105 060c 	add.w	r6, r5, #12
   b989c:	d008      	beq.n	b98b0 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b989e:	2301      	movs	r3, #1
   b98a0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b98a4:	4b07      	ldr	r3, [pc, #28]	; (b98c4 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b98a6:	9901      	ldr	r1, [sp, #4]
   b98a8:	602b      	str	r3, [r5, #0]
   b98aa:	4630      	mov	r0, r6
   b98ac:	f7ff ffd9 	bl	b9862 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b98b0:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b98b2:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b98b6:	f7ff fedf 	bl	b9678 <_ZN9TCPClient12flush_bufferEv>
}
   b98ba:	b002      	add	sp, #8
   b98bc:	bd70      	pop	{r4, r5, r6, pc}
   b98be:	bf00      	nop
   b98c0:	000bd634 	.word	0x000bd634
   b98c4:	000bd618 	.word	0x000bd618

000b98c8 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b98c8:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b98ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b98ce:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b98d0:	f7ff ffd2 	bl	b9878 <_ZN9TCPClientC1Ei>
}
   b98d4:	4620      	mov	r0, r4
   b98d6:	bd10      	pop	{r4, pc}

000b98d8 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b98d8:	b510      	push	{r4, lr}
   b98da:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b98dc:	6800      	ldr	r0, [r0, #0]
   b98de:	2800      	cmp	r0, #0
   b98e0:	db01      	blt.n	b98e6 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b98e2:	f7fd fdf9 	bl	b74d8 <sock_close>
    }
}
   b98e6:	4620      	mov	r0, r4
   b98e8:	bd10      	pop	{r4, pc}

000b98ea <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b98ea:	300c      	adds	r0, #12
   b98ec:	f7ff bff4 	b.w	b98d8 <_ZN9TCPClient4DataD1Ev>

000b98f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b98f0:	4b02      	ldr	r3, [pc, #8]	; (b98fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b98f2:	681a      	ldr	r2, [r3, #0]
   b98f4:	4b02      	ldr	r3, [pc, #8]	; (b9900 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b98f6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b98f8:	4770      	bx	lr
   b98fa:	bf00      	nop
   b98fc:	2003535c 	.word	0x2003535c
   b9900:	2003e6fc 	.word	0x2003e6fc

000b9904 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b9904:	4770      	bx	lr

000b9906 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9906:	7441      	strb	r1, [r0, #17]
}
   b9908:	4770      	bx	lr

000b990a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b990a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b990c:	7c00      	ldrb	r0, [r0, #16]
   b990e:	f7fd fe33 	bl	b7578 <hal_usart_available_data_for_write>
}
   b9912:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9916:	bd08      	pop	{r3, pc}

000b9918 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b9918:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b991a:	7c00      	ldrb	r0, [r0, #16]
   b991c:	f7fd fe0c 	bl	b7538 <hal_usart_available>
}
   b9920:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9924:	bd08      	pop	{r3, pc}

000b9926 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b9926:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b9928:	7c00      	ldrb	r0, [r0, #16]
   b992a:	f7fd fe15 	bl	b7558 <hal_usart_peek>
}
   b992e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9932:	bd08      	pop	{r3, pc}

000b9934 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b9934:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b9936:	7c00      	ldrb	r0, [r0, #16]
   b9938:	f7fd fe06 	bl	b7548 <hal_usart_read>
}
   b993c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9940:	bd08      	pop	{r3, pc}

000b9942 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b9942:	7c00      	ldrb	r0, [r0, #16]
   b9944:	f7fd be10 	b.w	b7568 <hal_usart_flush>

000b9948 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b9948:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b994a:	7c45      	ldrb	r5, [r0, #17]
{
   b994c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b994e:	b12d      	cbz	r5, b995c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b9950:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b9952:	b003      	add	sp, #12
   b9954:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b9958:	f7fd bde6 	b.w	b7528 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b995c:	7c00      	ldrb	r0, [r0, #16]
   b995e:	9101      	str	r1, [sp, #4]
   b9960:	f7fd fe0a 	bl	b7578 <hal_usart_available_data_for_write>
   b9964:	2800      	cmp	r0, #0
   b9966:	9901      	ldr	r1, [sp, #4]
   b9968:	dcf2      	bgt.n	b9950 <_ZN11USARTSerial5writeEh+0x8>
}
   b996a:	4628      	mov	r0, r5
   b996c:	b003      	add	sp, #12
   b996e:	bd30      	pop	{r4, r5, pc}

000b9970 <_ZN11USARTSerialD0Ev>:
   b9970:	b510      	push	{r4, lr}
   b9972:	2114      	movs	r1, #20
   b9974:	4604      	mov	r4, r0
   b9976:	f7fa fb94 	bl	b40a2 <_ZdlPvj>
   b997a:	4620      	mov	r0, r4
   b997c:	bd10      	pop	{r4, pc}
	...

000b9980 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b9980:	b510      	push	{r4, lr}
   b9982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9986:	4604      	mov	r4, r0
   b9988:	4608      	mov	r0, r1
   b998a:	4611      	mov	r1, r2
   b998c:	2200      	movs	r2, #0
   b998e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b9992:	4b04      	ldr	r3, [pc, #16]	; (b99a4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b9994:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9996:	2301      	movs	r3, #1
  _serial = serial;
   b9998:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b999a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b999c:	f7fd fdf4 	bl	b7588 <hal_usart_init_ex>
}
   b99a0:	4620      	mov	r0, r4
   b99a2:	bd10      	pop	{r4, pc}
   b99a4:	000bd69c 	.word	0x000bd69c

000b99a8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b99a8:	7441      	strb	r1, [r0, #17]
}
   b99aa:	4770      	bx	lr

000b99ac <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b99ac:	4770      	bx	lr

000b99ae <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b99ae:	4770      	bx	lr

000b99b0 <_ZN9USBSerial4readEv>:
{
   b99b0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b99b2:	2100      	movs	r1, #0
   b99b4:	7c00      	ldrb	r0, [r0, #16]
   b99b6:	f7fd fe0f 	bl	b75d8 <HAL_USB_USART_Receive_Data>
}
   b99ba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b99be:	bd08      	pop	{r3, pc}

000b99c0 <_ZN9USBSerial4peekEv>:
{
   b99c0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b99c2:	2101      	movs	r1, #1
   b99c4:	7c00      	ldrb	r0, [r0, #16]
   b99c6:	f7fd fe07 	bl	b75d8 <HAL_USB_USART_Receive_Data>
}
   b99ca:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b99ce:	bd08      	pop	{r3, pc}

000b99d0 <_ZN9USBSerial17availableForWriteEv>:
{
   b99d0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b99d2:	7c00      	ldrb	r0, [r0, #16]
   b99d4:	f7fd fdf8 	bl	b75c8 <HAL_USB_USART_Available_Data_For_Write>
}
   b99d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b99dc:	bd08      	pop	{r3, pc}

000b99de <_ZN9USBSerial9availableEv>:
{
   b99de:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b99e0:	7c00      	ldrb	r0, [r0, #16]
   b99e2:	f7fd fde9 	bl	b75b8 <HAL_USB_USART_Available_Data>
}
   b99e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b99ea:	bd08      	pop	{r3, pc}

000b99ec <_ZN9USBSerial5writeEh>:
{
   b99ec:	b513      	push	{r0, r1, r4, lr}
   b99ee:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b99f0:	7c00      	ldrb	r0, [r0, #16]
{
   b99f2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b99f4:	f7fd fde8 	bl	b75c8 <HAL_USB_USART_Available_Data_For_Write>
   b99f8:	2800      	cmp	r0, #0
   b99fa:	9901      	ldr	r1, [sp, #4]
   b99fc:	dc01      	bgt.n	b9a02 <_ZN9USBSerial5writeEh+0x16>
   b99fe:	7c60      	ldrb	r0, [r4, #17]
   b9a00:	b120      	cbz	r0, b9a0c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b9a02:	7c20      	ldrb	r0, [r4, #16]
   b9a04:	f7fd fdf0 	bl	b75e8 <HAL_USB_USART_Send_Data>
   b9a08:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b9a0c:	b002      	add	sp, #8
   b9a0e:	bd10      	pop	{r4, pc}

000b9a10 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b9a10:	7c00      	ldrb	r0, [r0, #16]
   b9a12:	f7fd bdf1 	b.w	b75f8 <HAL_USB_USART_Flush_Data>

000b9a16 <_ZN9USBSerialD0Ev>:
   b9a16:	b510      	push	{r4, lr}
   b9a18:	2114      	movs	r1, #20
   b9a1a:	4604      	mov	r4, r0
   b9a1c:	f7fa fb41 	bl	b40a2 <_ZdlPvj>
   b9a20:	4620      	mov	r0, r4
   b9a22:	bd10      	pop	{r4, pc}

000b9a24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b9a24:	b510      	push	{r4, lr}
   b9a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9a2a:	4604      	mov	r4, r0
   b9a2c:	4608      	mov	r0, r1
   b9a2e:	2100      	movs	r1, #0
   b9a30:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b9a34:	4b04      	ldr	r3, [pc, #16]	; (b9a48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b9a36:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9a38:	2301      	movs	r3, #1
  _serial = serial;
   b9a3a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9a3c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b9a3e:	4611      	mov	r1, r2
   b9a40:	f7fd fdaa 	bl	b7598 <HAL_USB_USART_Init>
}
   b9a44:	4620      	mov	r0, r4
   b9a46:	bd10      	pop	{r4, pc}
   b9a48:	000bd6cc 	.word	0x000bd6cc

000b9a4c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b9a4c:	7c00      	ldrb	r0, [r0, #16]
   b9a4e:	2200      	movs	r2, #0
   b9a50:	f7fd bdaa 	b.w	b75a8 <HAL_USB_USART_Begin>

000b9a54 <_Z19acquireSerialBufferv>:
{
   b9a54:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b9a56:	2214      	movs	r2, #20
{
   b9a58:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b9a5a:	2100      	movs	r1, #0
   b9a5c:	f001 f9e7 	bl	bae2e <memset>
}
   b9a60:	4620      	mov	r0, r4
   b9a62:	bd10      	pop	{r4, pc}

000b9a64 <_Z16_fetch_usbserialv>:
{
   b9a64:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9a66:	4c0f      	ldr	r4, [pc, #60]	; (b9aa4 <_Z16_fetch_usbserialv+0x40>)
{
   b9a68:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b9a6a:	a803      	add	r0, sp, #12
   b9a6c:	f7ff fff2 	bl	b9a54 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9a70:	7821      	ldrb	r1, [r4, #0]
   b9a72:	f3bf 8f5b 	dmb	ish
   b9a76:	f011 0101 	ands.w	r1, r1, #1
   b9a7a:	d10f      	bne.n	b9a9c <_Z16_fetch_usbserialv+0x38>
   b9a7c:	4620      	mov	r0, r4
   b9a7e:	9101      	str	r1, [sp, #4]
   b9a80:	f7fa fb11 	bl	b40a6 <__cxa_guard_acquire>
   b9a84:	9901      	ldr	r1, [sp, #4]
   b9a86:	b148      	cbz	r0, b9a9c <_Z16_fetch_usbserialv+0x38>
   b9a88:	aa03      	add	r2, sp, #12
   b9a8a:	4807      	ldr	r0, [pc, #28]	; (b9aa8 <_Z16_fetch_usbserialv+0x44>)
   b9a8c:	f7ff ffca 	bl	b9a24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b9a90:	4620      	mov	r0, r4
   b9a92:	f7fa fb0d 	bl	b40b0 <__cxa_guard_release>
   b9a96:	4805      	ldr	r0, [pc, #20]	; (b9aac <_Z16_fetch_usbserialv+0x48>)
   b9a98:	f001 f980 	bl	bad9c <atexit>
	return _usbserial;
}
   b9a9c:	4802      	ldr	r0, [pc, #8]	; (b9aa8 <_Z16_fetch_usbserialv+0x44>)
   b9a9e:	b008      	add	sp, #32
   b9aa0:	bd10      	pop	{r4, pc}
   b9aa2:	bf00      	nop
   b9aa4:	2003e700 	.word	0x2003e700
   b9aa8:	2003e704 	.word	0x2003e704
   b9aac:	000b99ad 	.word	0x000b99ad

000b9ab0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b9ab0:	2200      	movs	r2, #0
   b9ab2:	6840      	ldr	r0, [r0, #4]
   b9ab4:	4611      	mov	r1, r2
   b9ab6:	f7fd bdfb 	b.w	b76b0 <network_ready>

000b9aba <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9aba:	2200      	movs	r2, #0
   b9abc:	6840      	ldr	r0, [r0, #4]
   b9abe:	4611      	mov	r1, r2
   b9ac0:	f7fd be16 	b.w	b76f0 <network_listening>

000b9ac4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9ac4:	2200      	movs	r2, #0
   b9ac6:	6840      	ldr	r0, [r0, #4]
   b9ac8:	4611      	mov	r1, r2
   b9aca:	f7fd be21 	b.w	b7710 <network_get_listen_timeout>

000b9ace <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9ace:	6840      	ldr	r0, [r0, #4]
   b9ad0:	2200      	movs	r2, #0
   b9ad2:	f7fd be15 	b.w	b7700 <network_set_listen_timeout>

000b9ad6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9ad6:	6840      	ldr	r0, [r0, #4]
   b9ad8:	2200      	movs	r2, #0
   b9ada:	f081 0101 	eor.w	r1, r1, #1
   b9ade:	f7fd bdff 	b.w	b76e0 <network_listen>

000b9ae2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9ae2:	2300      	movs	r3, #0
   b9ae4:	6840      	ldr	r0, [r0, #4]
   b9ae6:	461a      	mov	r2, r3
   b9ae8:	4619      	mov	r1, r3
   b9aea:	f7fd bdf1 	b.w	b76d0 <network_off>

000b9aee <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b9aee:	2300      	movs	r3, #0
   b9af0:	6840      	ldr	r0, [r0, #4]
   b9af2:	461a      	mov	r2, r3
   b9af4:	4619      	mov	r1, r3
   b9af6:	f7fd bde3 	b.w	b76c0 <network_on>

000b9afa <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9afa:	2200      	movs	r2, #0
   b9afc:	6840      	ldr	r0, [r0, #4]
   b9afe:	4611      	mov	r1, r2
   b9b00:	f7fd bdc6 	b.w	b7690 <network_connecting>

000b9b04 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9b04:	6840      	ldr	r0, [r0, #4]
   b9b06:	2200      	movs	r2, #0
   b9b08:	2102      	movs	r1, #2
   b9b0a:	f7fd bdc9 	b.w	b76a0 <network_disconnect>

000b9b0e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b9b0e:	2300      	movs	r3, #0
   b9b10:	6840      	ldr	r0, [r0, #4]
   b9b12:	461a      	mov	r2, r3
   b9b14:	f7fd bdb4 	b.w	b7680 <network_connect>

000b9b18 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b9b18:	4b02      	ldr	r3, [pc, #8]	; (b9b24 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b9b1a:	2204      	movs	r2, #4
   b9b1c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b9b1e:	4a02      	ldr	r2, [pc, #8]	; (b9b28 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b9b20:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b9b22:	4770      	bx	lr
   b9b24:	2003e718 	.word	0x2003e718
   b9b28:	000bd6fc 	.word	0x000bd6fc

000b9b2c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b9b2c:	b510      	push	{r4, lr}
   b9b2e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b9b30:	f001 f9c6 	bl	baec0 <strlen>
   b9b34:	3801      	subs	r0, #1
   b9b36:	1823      	adds	r3, r4, r0
   b9b38:	4620      	mov	r0, r4
	while(i<j){
   b9b3a:	4283      	cmp	r3, r0
   b9b3c:	d906      	bls.n	b9b4c <_Z11str_reversePc+0x20>
		c = *i;
   b9b3e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b9b40:	7819      	ldrb	r1, [r3, #0]
   b9b42:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b9b46:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b9b4a:	e7f6      	b.n	b9b3a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b9b4c:	bd10      	pop	{r4, pc}

000b9b4e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b9b4e:	b570      	push	{r4, r5, r6, lr}
   b9b50:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b9b52:	1e91      	subs	r1, r2, #2
   b9b54:	2922      	cmp	r1, #34	; 0x22
   b9b56:	d81d      	bhi.n	b9b94 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b9b58:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b9b5a:	b930      	cbnz	r0, b9b6a <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b9b5c:	4423      	add	r3, r4
            *ptr++ = '0';
   b9b5e:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b9b60:	429d      	cmp	r5, r3
   b9b62:	d210      	bcs.n	b9b86 <ultoa+0x38>
            *ptr++ = '0';
   b9b64:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b9b68:	e7fa      	b.n	b9b60 <ultoa+0x12>
            result.quot = a/radix;
   b9b6a:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b9b6e:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b9b72:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b9b74:	2809      	cmp	r0, #9
                *ptr += '0';
   b9b76:	bf94      	ite	ls
   b9b78:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b9b7a:	3157      	addhi	r1, #87	; 0x57
   b9b7c:	b2c9      	uxtb	r1, r1
   b9b7e:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b9b82:	4630      	mov	r0, r6
	while(a){
   b9b84:	e7e9      	b.n	b9b5a <ultoa+0xc>

	*ptr = '\0';
   b9b86:	2300      	movs	r3, #0
	str_reverse(buffer);
   b9b88:	4620      	mov	r0, r4
	*ptr = '\0';
   b9b8a:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b9b8c:	f7ff ffce 	bl	b9b2c <_Z11str_reversePc>
	return buffer;
   b9b90:	4620      	mov	r0, r4
}
   b9b92:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b9b94:	2000      	movs	r0, #0
   b9b96:	e7fc      	b.n	b9b92 <ultoa+0x44>

000b9b98 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b9b98:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b9b9a:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b9b9c:	460c      	mov	r4, r1
   b9b9e:	4615      	mov	r5, r2
	if(a<0){
   b9ba0:	da0e      	bge.n	b9bc0 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b9ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b9ba6:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b9baa:	bf14      	ite	ne
   b9bac:	4258      	negne	r0, r3
   b9bae:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b9bb0:	2301      	movs	r3, #1
		*buffer = '-';
   b9bb2:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b9bb4:	462a      	mov	r2, r5
   b9bb6:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b9bb8:	f7ff ffc9 	bl	b9b4e <ultoa>
	}
	return buffer;
}
   b9bbc:	4620      	mov	r0, r4
   b9bbe:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b9bc0:	2301      	movs	r3, #1
   b9bc2:	e7f9      	b.n	b9bb8 <itoa+0x20>

000b9bc4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b9bc4:	4b01      	ldr	r3, [pc, #4]	; (b9bcc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b9bc6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b9bc8:	4770      	bx	lr
   b9bca:	bf00      	nop
   b9bcc:	20035364 	.word	0x20035364

000b9bd0 <serialEventRun>:
{
   b9bd0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b9bd2:	4b0b      	ldr	r3, [pc, #44]	; (b9c00 <serialEventRun+0x30>)
   b9bd4:	b143      	cbz	r3, b9be8 <serialEventRun+0x18>
   b9bd6:	f7ff ff45 	bl	b9a64 <_Z16_fetch_usbserialv>
   b9bda:	6803      	ldr	r3, [r0, #0]
   b9bdc:	691b      	ldr	r3, [r3, #16]
   b9bde:	4798      	blx	r3
   b9be0:	2800      	cmp	r0, #0
   b9be2:	dd01      	ble.n	b9be8 <serialEventRun+0x18>
        serialEvent();
   b9be4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b9be8:	4b06      	ldr	r3, [pc, #24]	; (b9c04 <serialEventRun+0x34>)
   b9bea:	b143      	cbz	r3, b9bfe <serialEventRun+0x2e>
   b9bec:	f000 f8c8 	bl	b9d80 <_Z22__fetch_global_Serial1v>
   b9bf0:	6803      	ldr	r3, [r0, #0]
   b9bf2:	691b      	ldr	r3, [r3, #16]
   b9bf4:	4798      	blx	r3
   b9bf6:	2800      	cmp	r0, #0
   b9bf8:	dd01      	ble.n	b9bfe <serialEventRun+0x2e>
        serialEvent1();
   b9bfa:	f3af 8000 	nop.w
}
   b9bfe:	bd08      	pop	{r3, pc}
	...

000b9c08 <_post_loop>:
{
   b9c08:	b508      	push	{r3, lr}
	serialEventRun();
   b9c0a:	f7ff ffe1 	bl	b9bd0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b9c0e:	f7fd fbcb 	bl	b73a8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b9c12:	4b01      	ldr	r3, [pc, #4]	; (b9c18 <_post_loop+0x10>)
   b9c14:	6018      	str	r0, [r3, #0]
}
   b9c16:	bd08      	pop	{r3, pc}
   b9c18:	2003e728 	.word	0x2003e728

000b9c1c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9c1c:	4805      	ldr	r0, [pc, #20]	; (b9c34 <_Z33system_initialize_user_backup_ramv+0x18>)
   b9c1e:	4a06      	ldr	r2, [pc, #24]	; (b9c38 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b9c20:	4906      	ldr	r1, [pc, #24]	; (b9c3c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b9c22:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9c24:	1a12      	subs	r2, r2, r0
   b9c26:	f001 f8da 	bl	badde <memcpy>
    __backup_sram_signature = signature;
   b9c2a:	4b05      	ldr	r3, [pc, #20]	; (b9c40 <_Z33system_initialize_user_backup_ramv+0x24>)
   b9c2c:	4a05      	ldr	r2, [pc, #20]	; (b9c44 <_Z33system_initialize_user_backup_ramv+0x28>)
   b9c2e:	601a      	str	r2, [r3, #0]
}
   b9c30:	bd08      	pop	{r3, pc}
   b9c32:	bf00      	nop
   b9c34:	2003f400 	.word	0x2003f400
   b9c38:	2003f404 	.word	0x2003f404
   b9c3c:	000bdc44 	.word	0x000bdc44
   b9c40:	2003f400 	.word	0x2003f400
   b9c44:	9a271c1e 	.word	0x9a271c1e

000b9c48 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b9c48:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b9c4a:	2300      	movs	r3, #0
   b9c4c:	9300      	str	r3, [sp, #0]
   b9c4e:	461a      	mov	r2, r3
   b9c50:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9c54:	f7fd fd02 	bl	b765c <system_ctrl_set_result>
}
   b9c58:	b003      	add	sp, #12
   b9c5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b9c60 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b9c60:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b9c62:	8843      	ldrh	r3, [r0, #2]
   b9c64:	2b0a      	cmp	r3, #10
   b9c66:	d008      	beq.n	b9c7a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b9c68:	2b50      	cmp	r3, #80	; 0x50
   b9c6a:	d10b      	bne.n	b9c84 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b9c6c:	4b09      	ldr	r3, [pc, #36]	; (b9c94 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b9c6e:	681b      	ldr	r3, [r3, #0]
   b9c70:	b14b      	cbz	r3, b9c86 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b9c72:	b003      	add	sp, #12
   b9c74:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b9c78:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b9c7a:	f7ff ffe5 	bl	b9c48 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b9c7e:	b003      	add	sp, #12
   b9c80:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b9c84:	2300      	movs	r3, #0
   b9c86:	9300      	str	r3, [sp, #0]
   b9c88:	461a      	mov	r2, r3
   b9c8a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9c8e:	f7fd fce5 	bl	b765c <system_ctrl_set_result>
}
   b9c92:	e7f4      	b.n	b9c7e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b9c94:	2003e724 	.word	0x2003e724

000b9c98 <module_user_init_hook>:
{
   b9c98:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b9c9a:	4812      	ldr	r0, [pc, #72]	; (b9ce4 <module_user_init_hook+0x4c>)
   b9c9c:	2100      	movs	r1, #0
   b9c9e:	f7fd fd97 	bl	b77d0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b9ca2:	4b11      	ldr	r3, [pc, #68]	; (b9ce8 <module_user_init_hook+0x50>)
   b9ca4:	681a      	ldr	r2, [r3, #0]
   b9ca6:	4b11      	ldr	r3, [pc, #68]	; (b9cec <module_user_init_hook+0x54>)
   b9ca8:	429a      	cmp	r2, r3
   b9caa:	4b11      	ldr	r3, [pc, #68]	; (b9cf0 <module_user_init_hook+0x58>)
   b9cac:	bf0c      	ite	eq
   b9cae:	2201      	moveq	r2, #1
   b9cb0:	2200      	movne	r2, #0
   b9cb2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b9cb4:	d001      	beq.n	b9cba <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b9cb6:	f7ff ffb1 	bl	b9c1c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b9cba:	f7fd fb65 	bl	b7388 <HAL_RNG_GetRandomNumber>
   b9cbe:	4604      	mov	r4, r0
    srand(seed);
   b9cc0:	f001 f8be 	bl	bae40 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b9cc4:	4b0b      	ldr	r3, [pc, #44]	; (b9cf4 <module_user_init_hook+0x5c>)
   b9cc6:	b113      	cbz	r3, b9cce <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b9cc8:	4620      	mov	r0, r4
   b9cca:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b9cce:	2100      	movs	r1, #0
   b9cd0:	4808      	ldr	r0, [pc, #32]	; (b9cf4 <module_user_init_hook+0x5c>)
   b9cd2:	f7fd fccd 	bl	b7670 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b9cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b9cda:	4807      	ldr	r0, [pc, #28]	; (b9cf8 <module_user_init_hook+0x60>)
   b9cdc:	2100      	movs	r1, #0
   b9cde:	f7fd bcb3 	b.w	b7648 <system_ctrl_set_app_request_handler>
   b9ce2:	bf00      	nop
   b9ce4:	000b9bc5 	.word	0x000b9bc5
   b9ce8:	2003f400 	.word	0x2003f400
   b9cec:	9a271c1e 	.word	0x9a271c1e
   b9cf0:	2003e720 	.word	0x2003e720
   b9cf4:	00000000 	.word	0x00000000
   b9cf8:	000b9c61 	.word	0x000b9c61

000b9cfc <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9cfc:	4770      	bx	lr
	...

000b9d00 <_Z19__fetch_global_Wirev>:
{
   b9d00:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9d02:	4d0e      	ldr	r5, [pc, #56]	; (b9d3c <_Z19__fetch_global_Wirev+0x3c>)
   b9d04:	7829      	ldrb	r1, [r5, #0]
   b9d06:	f3bf 8f5b 	dmb	ish
   b9d0a:	f011 0401 	ands.w	r4, r1, #1
{
   b9d0e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9d10:	d111      	bne.n	b9d36 <_Z19__fetch_global_Wirev+0x36>
   b9d12:	4628      	mov	r0, r5
   b9d14:	f7fa f9c7 	bl	b40a6 <__cxa_guard_acquire>
   b9d18:	b168      	cbz	r0, b9d36 <_Z19__fetch_global_Wirev+0x36>
   b9d1a:	a801      	add	r0, sp, #4
   b9d1c:	f7fa fdba 	bl	b4894 <_Z17acquireWireBufferv>
   b9d20:	aa01      	add	r2, sp, #4
   b9d22:	4621      	mov	r1, r4
   b9d24:	4806      	ldr	r0, [pc, #24]	; (b9d40 <_Z19__fetch_global_Wirev+0x40>)
   b9d26:	f7fe ff75 	bl	b8c14 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b9d2a:	4628      	mov	r0, r5
   b9d2c:	f7fa f9c0 	bl	b40b0 <__cxa_guard_release>
   b9d30:	4804      	ldr	r0, [pc, #16]	; (b9d44 <_Z19__fetch_global_Wirev+0x44>)
   b9d32:	f001 f833 	bl	bad9c <atexit>
	return wire;
}
   b9d36:	4802      	ldr	r0, [pc, #8]	; (b9d40 <_Z19__fetch_global_Wirev+0x40>)
   b9d38:	b007      	add	sp, #28
   b9d3a:	bd30      	pop	{r4, r5, pc}
   b9d3c:	2003e72c 	.word	0x2003e72c
   b9d40:	2003e730 	.word	0x2003e730
   b9d44:	000b9cfd 	.word	0x000b9cfd

000b9d48 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9d48:	4770      	bx	lr
	...

000b9d4c <_Z20acquireSerial1Bufferv>:
{
   b9d4c:	b538      	push	{r3, r4, r5, lr}
   b9d4e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b9d50:	2514      	movs	r5, #20
   b9d52:	462a      	mov	r2, r5
   b9d54:	2100      	movs	r1, #0
   b9d56:	f001 f86a 	bl	bae2e <memset>
   b9d5a:	8025      	strh	r5, [r4, #0]
   b9d5c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9d5e:	4907      	ldr	r1, [pc, #28]	; (b9d7c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b9d60:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9d62:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b9d64:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9d66:	f000 f82f 	bl	b9dc8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9d6a:	4904      	ldr	r1, [pc, #16]	; (b9d7c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b9d6c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9d6e:	4628      	mov	r0, r5
   b9d70:	f000 f82a 	bl	b9dc8 <_ZnajRKSt9nothrow_t>
    };
   b9d74:	60e0      	str	r0, [r4, #12]
}
   b9d76:	4620      	mov	r0, r4
   b9d78:	bd38      	pop	{r3, r4, r5, pc}
   b9d7a:	bf00      	nop
   b9d7c:	000bd730 	.word	0x000bd730

000b9d80 <_Z22__fetch_global_Serial1v>:
{
   b9d80:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9d82:	4d0e      	ldr	r5, [pc, #56]	; (b9dbc <_Z22__fetch_global_Serial1v+0x3c>)
   b9d84:	7829      	ldrb	r1, [r5, #0]
   b9d86:	f3bf 8f5b 	dmb	ish
   b9d8a:	f011 0401 	ands.w	r4, r1, #1
{
   b9d8e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9d90:	d111      	bne.n	b9db6 <_Z22__fetch_global_Serial1v+0x36>
   b9d92:	4628      	mov	r0, r5
   b9d94:	f7fa f987 	bl	b40a6 <__cxa_guard_acquire>
   b9d98:	b168      	cbz	r0, b9db6 <_Z22__fetch_global_Serial1v+0x36>
   b9d9a:	a801      	add	r0, sp, #4
   b9d9c:	f7ff ffd6 	bl	b9d4c <_Z20acquireSerial1Bufferv>
   b9da0:	aa01      	add	r2, sp, #4
   b9da2:	4621      	mov	r1, r4
   b9da4:	4806      	ldr	r0, [pc, #24]	; (b9dc0 <_Z22__fetch_global_Serial1v+0x40>)
   b9da6:	f7ff fdeb 	bl	b9980 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b9daa:	4628      	mov	r0, r5
   b9dac:	f7fa f980 	bl	b40b0 <__cxa_guard_release>
   b9db0:	4804      	ldr	r0, [pc, #16]	; (b9dc4 <_Z22__fetch_global_Serial1v+0x44>)
   b9db2:	f000 fff3 	bl	bad9c <atexit>
    return serial1;
}
   b9db6:	4802      	ldr	r0, [pc, #8]	; (b9dc0 <_Z22__fetch_global_Serial1v+0x40>)
   b9db8:	b007      	add	sp, #28
   b9dba:	bd30      	pop	{r4, r5, pc}
   b9dbc:	2003e744 	.word	0x2003e744
   b9dc0:	2003e748 	.word	0x2003e748
   b9dc4:	000b9d49 	.word	0x000b9d49

000b9dc8 <_ZnajRKSt9nothrow_t>:
   b9dc8:	f7fa b967 	b.w	b409a <_Znaj>

000b9dcc <_ZSt17__throw_bad_allocv>:
   b9dcc:	b508      	push	{r3, lr}
   b9dce:	f7fd fcdf 	bl	b7790 <abort>

000b9dd2 <_ZSt19__throw_logic_errorPKc>:
   b9dd2:	b508      	push	{r3, lr}
   b9dd4:	f7fd fcdc 	bl	b7790 <abort>

000b9dd8 <_ZSt20__throw_length_errorPKc>:
   b9dd8:	b508      	push	{r3, lr}
   b9dda:	f7fd fcd9 	bl	b7790 <abort>

000b9dde <_ZSt25__throw_bad_function_callv>:
   b9dde:	b508      	push	{r3, lr}
   b9de0:	f7fd fcd6 	bl	b7790 <abort>

000b9de4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b9de4:	4901      	ldr	r1, [pc, #4]	; (b9dec <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b9de6:	f000 b97d 	b.w	ba0e4 <_ZNKSt9type_infoeqERKS_>
   b9dea:	bf00      	nop
   b9dec:	000bd74c 	.word	0x000bd74c

000b9df0 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   b9df0:	b10a      	cbz	r2, b9df6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   b9df2:	f000 bff4 	b.w	badde <memcpy>
   b9df6:	4770      	bx	lr

000b9df8 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
   b9df8:	b10a      	cbz	r2, b9dfe <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
   b9dfa:	f000 bfe0 	b.w	badbe <memcmp>
   b9dfe:	4610      	mov	r0, r2
   b9e00:	4770      	bx	lr
	...

000b9e04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   b9e04:	b508      	push	{r3, lr}
   b9e06:	680b      	ldr	r3, [r1, #0]
   b9e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   b9e0c:	d302      	bcc.n	b9e14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   b9e0e:	480d      	ldr	r0, [pc, #52]	; (b9e44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   b9e10:	f7ff ffe2 	bl	b9dd8 <_ZSt20__throw_length_errorPKc>
   b9e14:	4293      	cmp	r3, r2
   b9e16:	d90b      	bls.n	b9e30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b9e18:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   b9e1c:	ea4f 0042 	mov.w	r0, r2, lsl #1
   b9e20:	d206      	bcs.n	b9e30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b9e22:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   b9e26:	bf2a      	itet	cs
   b9e28:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   b9e2c:	6008      	strcc	r0, [r1, #0]
   b9e2e:	600b      	strcs	r3, [r1, #0]
   b9e30:	6808      	ldr	r0, [r1, #0]
   b9e32:	3001      	adds	r0, #1
   b9e34:	d501      	bpl.n	b9e3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   b9e36:	f7ff ffc9 	bl	b9dcc <_ZSt17__throw_bad_allocv>
   b9e3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b9e3e:	f7fa b92a 	b.w	b4096 <_Znwj>
   b9e42:	bf00      	nop
   b9e44:	000bd754 	.word	0x000bd754

000b9e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   b9e48:	f850 3b08 	ldr.w	r3, [r0], #8
   b9e4c:	4283      	cmp	r3, r0
   b9e4e:	d002      	beq.n	b9e56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   b9e50:	4618      	mov	r0, r3
   b9e52:	f7fa b924 	b.w	b409e <_ZdlPv>
   b9e56:	4770      	bx	lr

000b9e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   b9e58:	2a01      	cmp	r2, #1
   b9e5a:	b410      	push	{r4}
   b9e5c:	d104      	bne.n	b9e68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   b9e5e:	780a      	ldrb	r2, [r1, #0]
   b9e60:	f85d 4b04 	ldr.w	r4, [sp], #4
   b9e64:	7002      	strb	r2, [r0, #0]
   b9e66:	4770      	bx	lr
   b9e68:	f85d 4b04 	ldr.w	r4, [sp], #4
   b9e6c:	f7ff bfc0 	b.w	b9df0 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000b9e70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
   b9e70:	b508      	push	{r3, lr}
   b9e72:	1a52      	subs	r2, r2, r1
   b9e74:	f7ff fff0 	bl	b9e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b9e78:	bd08      	pop	{r3, pc}

000b9e7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   b9e7a:	b508      	push	{r3, lr}
   b9e7c:	1a52      	subs	r2, r2, r1
   b9e7e:	f7ff ffeb 	bl	b9e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b9e82:	bd08      	pop	{r3, pc}

000b9e84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
   b9e84:	4288      	cmp	r0, r1
   b9e86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b9e88:	4604      	mov	r4, r0
   b9e8a:	460e      	mov	r6, r1
   b9e8c:	d01e      	beq.n	b9ecc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
   b9e8e:	4603      	mov	r3, r0
   b9e90:	684d      	ldr	r5, [r1, #4]
   b9e92:	f853 2b08 	ldr.w	r2, [r3], #8
   b9e96:	429a      	cmp	r2, r3
   b9e98:	bf14      	ite	ne
   b9e9a:	6882      	ldrne	r2, [r0, #8]
   b9e9c:	220f      	moveq	r2, #15
   b9e9e:	42aa      	cmp	r2, r5
   b9ea0:	d20a      	bcs.n	b9eb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
   b9ea2:	a901      	add	r1, sp, #4
   b9ea4:	9501      	str	r5, [sp, #4]
   b9ea6:	f7ff ffad 	bl	b9e04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   b9eaa:	4607      	mov	r7, r0
   b9eac:	4620      	mov	r0, r4
   b9eae:	f7ff ffcb 	bl	b9e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b9eb2:	9b01      	ldr	r3, [sp, #4]
   b9eb4:	6027      	str	r7, [r4, #0]
   b9eb6:	60a3      	str	r3, [r4, #8]
   b9eb8:	b125      	cbz	r5, b9ec4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
   b9eba:	6831      	ldr	r1, [r6, #0]
   b9ebc:	6820      	ldr	r0, [r4, #0]
   b9ebe:	462a      	mov	r2, r5
   b9ec0:	f7ff ffca 	bl	b9e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b9ec4:	6823      	ldr	r3, [r4, #0]
   b9ec6:	6065      	str	r5, [r4, #4]
   b9ec8:	2200      	movs	r2, #0
   b9eca:	555a      	strb	r2, [r3, r5]
   b9ecc:	b003      	add	sp, #12
   b9ece:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9ed0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
   b9ed0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9ed2:	6846      	ldr	r6, [r0, #4]
   b9ed4:	9101      	str	r1, [sp, #4]
   b9ed6:	4605      	mov	r5, r0
   b9ed8:	4608      	mov	r0, r1
   b9eda:	f000 fff1 	bl	baec0 <strlen>
   b9ede:	4286      	cmp	r6, r0
   b9ee0:	4604      	mov	r4, r0
   b9ee2:	4632      	mov	r2, r6
   b9ee4:	9901      	ldr	r1, [sp, #4]
   b9ee6:	bf28      	it	cs
   b9ee8:	4602      	movcs	r2, r0
   b9eea:	6828      	ldr	r0, [r5, #0]
   b9eec:	f7ff ff84 	bl	b9df8 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
   b9ef0:	b900      	cbnz	r0, b9ef4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
   b9ef2:	1b30      	subs	r0, r6, r4
   b9ef4:	b002      	add	sp, #8
   b9ef6:	bd70      	pop	{r4, r5, r6, pc}

000b9ef8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b9ef8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b9efa:	2400      	movs	r4, #0
   b9efc:	2310      	movs	r3, #16
   b9efe:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b9f02:	6803      	ldr	r3, [r0, #0]
   b9f04:	4615      	mov	r5, r2
   b9f06:	699e      	ldr	r6, [r3, #24]
   b9f08:	6812      	ldr	r2, [r2, #0]
   b9f0a:	466b      	mov	r3, sp
   b9f0c:	e9cd 4400 	strd	r4, r4, [sp]
   b9f10:	47b0      	blx	r6
   b9f12:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b9f16:	f003 0306 	and.w	r3, r3, #6
   b9f1a:	2b06      	cmp	r3, #6
   b9f1c:	bf03      	ittte	eq
   b9f1e:	9b00      	ldreq	r3, [sp, #0]
   b9f20:	602b      	streq	r3, [r5, #0]
   b9f22:	2001      	moveq	r0, #1
   b9f24:	4620      	movne	r0, r4
   b9f26:	b004      	add	sp, #16
   b9f28:	bd70      	pop	{r4, r5, r6, pc}

000b9f2a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b9f2a:	9800      	ldr	r0, [sp, #0]
   b9f2c:	4290      	cmp	r0, r2
   b9f2e:	bf14      	ite	ne
   b9f30:	2001      	movne	r0, #1
   b9f32:	2006      	moveq	r0, #6
   b9f34:	4770      	bx	lr
	...

000b9f38 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b9f38:	b510      	push	{r4, lr}
   b9f3a:	4b03      	ldr	r3, [pc, #12]	; (b9f48 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b9f3c:	6003      	str	r3, [r0, #0]
   b9f3e:	4604      	mov	r4, r0
   b9f40:	f000 f8cd 	bl	ba0de <_ZNSt9type_infoD1Ev>
   b9f44:	4620      	mov	r0, r4
   b9f46:	bd10      	pop	{r4, pc}
   b9f48:	000bd7a4 	.word	0x000bd7a4

000b9f4c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b9f4c:	b510      	push	{r4, lr}
   b9f4e:	4604      	mov	r4, r0
   b9f50:	f7ff fff2 	bl	b9f38 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9f54:	4620      	mov	r0, r4
   b9f56:	2108      	movs	r1, #8
   b9f58:	f7fa f8a3 	bl	b40a2 <_ZdlPvj>
   b9f5c:	4620      	mov	r0, r4
   b9f5e:	bd10      	pop	{r4, pc}

000b9f60 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b9f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9f64:	461f      	mov	r7, r3
   b9f66:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b9f6a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b9f6e:	4598      	cmp	r8, r3
   b9f70:	4606      	mov	r6, r0
   b9f72:	4615      	mov	r5, r2
   b9f74:	d107      	bne.n	b9f86 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9f76:	9907      	ldr	r1, [sp, #28]
   b9f78:	f000 f8b4 	bl	ba0e4 <_ZNKSt9type_infoeqERKS_>
   b9f7c:	b118      	cbz	r0, b9f86 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9f7e:	7165      	strb	r5, [r4, #5]
   b9f80:	2000      	movs	r0, #0
   b9f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9f86:	4639      	mov	r1, r7
   b9f88:	4630      	mov	r0, r6
   b9f8a:	f000 f8ab 	bl	ba0e4 <_ZNKSt9type_infoeqERKS_>
   b9f8e:	2800      	cmp	r0, #0
   b9f90:	d0f6      	beq.n	b9f80 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b9f92:	2301      	movs	r3, #1
   b9f94:	f8c4 8000 	str.w	r8, [r4]
   b9f98:	7125      	strb	r5, [r4, #4]
   b9f9a:	71a3      	strb	r3, [r4, #6]
   b9f9c:	e7f0      	b.n	b9f80 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b9f9e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b9f9e:	b538      	push	{r3, r4, r5, lr}
   b9fa0:	4615      	mov	r5, r2
   b9fa2:	461c      	mov	r4, r3
   b9fa4:	f000 f89e 	bl	ba0e4 <_ZNKSt9type_infoeqERKS_>
   b9fa8:	b120      	cbz	r0, b9fb4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b9faa:	2308      	movs	r3, #8
   b9fac:	60e3      	str	r3, [r4, #12]
   b9fae:	2306      	movs	r3, #6
   b9fb0:	6025      	str	r5, [r4, #0]
   b9fb2:	7123      	strb	r3, [r4, #4]
   b9fb4:	bd38      	pop	{r3, r4, r5, pc}

000b9fb6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b9fb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9fb8:	4605      	mov	r5, r0
   b9fba:	460c      	mov	r4, r1
   b9fbc:	9201      	str	r2, [sp, #4]
   b9fbe:	461e      	mov	r6, r3
   b9fc0:	f000 f890 	bl	ba0e4 <_ZNKSt9type_infoeqERKS_>
   b9fc4:	b950      	cbnz	r0, b9fdc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9fc6:	2e03      	cmp	r6, #3
   b9fc8:	d808      	bhi.n	b9fdc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9fca:	6823      	ldr	r3, [r4, #0]
   b9fcc:	9a01      	ldr	r2, [sp, #4]
   b9fce:	695b      	ldr	r3, [r3, #20]
   b9fd0:	4629      	mov	r1, r5
   b9fd2:	4620      	mov	r0, r4
   b9fd4:	b002      	add	sp, #8
   b9fd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9fda:	4718      	bx	r3
   b9fdc:	b002      	add	sp, #8
   b9fde:	bd70      	pop	{r4, r5, r6, pc}

000b9fe0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b9fe0:	b510      	push	{r4, lr}
   b9fe2:	4b03      	ldr	r3, [pc, #12]	; (b9ff0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b9fe4:	6003      	str	r3, [r0, #0]
   b9fe6:	4604      	mov	r4, r0
   b9fe8:	f7ff ffa6 	bl	b9f38 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9fec:	4620      	mov	r0, r4
   b9fee:	bd10      	pop	{r4, pc}
   b9ff0:	000bd804 	.word	0x000bd804

000b9ff4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b9ff4:	b510      	push	{r4, lr}
   b9ff6:	4604      	mov	r4, r0
   b9ff8:	f7ff fff2 	bl	b9fe0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b9ffc:	4620      	mov	r0, r4
   b9ffe:	210c      	movs	r1, #12
   ba000:	f7fa f84f 	bl	b40a2 <_ZdlPvj>
   ba004:	4620      	mov	r0, r4
   ba006:	bd10      	pop	{r4, pc}

000ba008 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   ba008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba00a:	9f08      	ldr	r7, [sp, #32]
   ba00c:	4297      	cmp	r7, r2
   ba00e:	4605      	mov	r5, r0
   ba010:	460e      	mov	r6, r1
   ba012:	4614      	mov	r4, r2
   ba014:	d00a      	beq.n	ba02c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   ba016:	68a8      	ldr	r0, [r5, #8]
   ba018:	6802      	ldr	r2, [r0, #0]
   ba01a:	9708      	str	r7, [sp, #32]
   ba01c:	6a15      	ldr	r5, [r2, #32]
   ba01e:	4631      	mov	r1, r6
   ba020:	4622      	mov	r2, r4
   ba022:	46ac      	mov	ip, r5
   ba024:	b003      	add	sp, #12
   ba026:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   ba02a:	4760      	bx	ip
   ba02c:	4619      	mov	r1, r3
   ba02e:	9301      	str	r3, [sp, #4]
   ba030:	f000 f858 	bl	ba0e4 <_ZNKSt9type_infoeqERKS_>
   ba034:	9b01      	ldr	r3, [sp, #4]
   ba036:	2800      	cmp	r0, #0
   ba038:	d0ed      	beq.n	ba016 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   ba03a:	2006      	movs	r0, #6
   ba03c:	b003      	add	sp, #12
   ba03e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba040 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   ba040:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba044:	460d      	mov	r5, r1
   ba046:	4619      	mov	r1, r3
   ba048:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   ba04c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   ba050:	4681      	mov	r9, r0
   ba052:	4617      	mov	r7, r2
   ba054:	4698      	mov	r8, r3
   ba056:	f000 f845 	bl	ba0e4 <_ZNKSt9type_infoeqERKS_>
   ba05a:	b190      	cbz	r0, ba082 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   ba05c:	2d00      	cmp	r5, #0
   ba05e:	6034      	str	r4, [r6, #0]
   ba060:	7137      	strb	r7, [r6, #4]
   ba062:	db09      	blt.n	ba078 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   ba064:	1961      	adds	r1, r4, r5
   ba066:	458a      	cmp	sl, r1
   ba068:	bf0c      	ite	eq
   ba06a:	2106      	moveq	r1, #6
   ba06c:	2101      	movne	r1, #1
   ba06e:	71b1      	strb	r1, [r6, #6]
   ba070:	2000      	movs	r0, #0
   ba072:	b001      	add	sp, #4
   ba074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba078:	3502      	adds	r5, #2
   ba07a:	d1f9      	bne.n	ba070 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba07c:	2301      	movs	r3, #1
   ba07e:	71b3      	strb	r3, [r6, #6]
   ba080:	e7f6      	b.n	ba070 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba082:	4554      	cmp	r4, sl
   ba084:	d106      	bne.n	ba094 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba086:	4659      	mov	r1, fp
   ba088:	4648      	mov	r0, r9
   ba08a:	f000 f82b 	bl	ba0e4 <_ZNKSt9type_infoeqERKS_>
   ba08e:	b108      	cbz	r0, ba094 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba090:	7177      	strb	r7, [r6, #5]
   ba092:	e7ed      	b.n	ba070 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba094:	f8d9 0008 	ldr.w	r0, [r9, #8]
   ba098:	6803      	ldr	r3, [r0, #0]
   ba09a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   ba09e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   ba0a2:	69dc      	ldr	r4, [r3, #28]
   ba0a4:	463a      	mov	r2, r7
   ba0a6:	4643      	mov	r3, r8
   ba0a8:	4629      	mov	r1, r5
   ba0aa:	46a4      	mov	ip, r4
   ba0ac:	b001      	add	sp, #4
   ba0ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba0b2:	4760      	bx	ip

000ba0b4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   ba0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba0b8:	4607      	mov	r7, r0
   ba0ba:	460c      	mov	r4, r1
   ba0bc:	4615      	mov	r5, r2
   ba0be:	461e      	mov	r6, r3
   ba0c0:	f7ff ff6d 	bl	b9f9e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   ba0c4:	b948      	cbnz	r0, ba0da <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   ba0c6:	68b8      	ldr	r0, [r7, #8]
   ba0c8:	6803      	ldr	r3, [r0, #0]
   ba0ca:	699f      	ldr	r7, [r3, #24]
   ba0cc:	462a      	mov	r2, r5
   ba0ce:	4633      	mov	r3, r6
   ba0d0:	4621      	mov	r1, r4
   ba0d2:	46bc      	mov	ip, r7
   ba0d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   ba0d8:	4760      	bx	ip
   ba0da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000ba0de <_ZNSt9type_infoD1Ev>:
   ba0de:	4770      	bx	lr

000ba0e0 <_ZNKSt9type_info14__is_pointer_pEv>:
   ba0e0:	2000      	movs	r0, #0
   ba0e2:	4770      	bx	lr

000ba0e4 <_ZNKSt9type_infoeqERKS_>:
   ba0e4:	4281      	cmp	r1, r0
   ba0e6:	b508      	push	{r3, lr}
   ba0e8:	d00e      	beq.n	ba108 <_ZNKSt9type_infoeqERKS_+0x24>
   ba0ea:	6840      	ldr	r0, [r0, #4]
   ba0ec:	7803      	ldrb	r3, [r0, #0]
   ba0ee:	2b2a      	cmp	r3, #42	; 0x2a
   ba0f0:	d00c      	beq.n	ba10c <_ZNKSt9type_infoeqERKS_+0x28>
   ba0f2:	6849      	ldr	r1, [r1, #4]
   ba0f4:	780b      	ldrb	r3, [r1, #0]
   ba0f6:	2b2a      	cmp	r3, #42	; 0x2a
   ba0f8:	bf08      	it	eq
   ba0fa:	3101      	addeq	r1, #1
   ba0fc:	f000 fece 	bl	bae9c <strcmp>
   ba100:	fab0 f080 	clz	r0, r0
   ba104:	0940      	lsrs	r0, r0, #5
   ba106:	bd08      	pop	{r3, pc}
   ba108:	2001      	movs	r0, #1
   ba10a:	e7fc      	b.n	ba106 <_ZNKSt9type_infoeqERKS_+0x22>
   ba10c:	2000      	movs	r0, #0
   ba10e:	e7fa      	b.n	ba106 <_ZNKSt9type_infoeqERKS_+0x22>

000ba110 <floorf>:
   ba110:	ee10 2a10 	vmov	r2, s0
   ba114:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   ba118:	3b7f      	subs	r3, #127	; 0x7f
   ba11a:	2b16      	cmp	r3, #22
   ba11c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   ba120:	dc28      	bgt.n	ba174 <floorf+0x64>
   ba122:	2b00      	cmp	r3, #0
   ba124:	db18      	blt.n	ba158 <floorf+0x48>
   ba126:	491a      	ldr	r1, [pc, #104]	; (ba190 <floorf+0x80>)
   ba128:	4119      	asrs	r1, r3
   ba12a:	420a      	tst	r2, r1
   ba12c:	d021      	beq.n	ba172 <floorf+0x62>
   ba12e:	eddf 7a19 	vldr	s15, [pc, #100]	; ba194 <floorf+0x84>
   ba132:	ee70 7a27 	vadd.f32	s15, s0, s15
   ba136:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   ba13a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba13e:	dd18      	ble.n	ba172 <floorf+0x62>
   ba140:	2a00      	cmp	r2, #0
   ba142:	da04      	bge.n	ba14e <floorf+0x3e>
   ba144:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   ba148:	fa40 f303 	asr.w	r3, r0, r3
   ba14c:	441a      	add	r2, r3
   ba14e:	ea22 0301 	bic.w	r3, r2, r1
   ba152:	ee00 3a10 	vmov	s0, r3
   ba156:	4770      	bx	lr
   ba158:	eddf 7a0e 	vldr	s15, [pc, #56]	; ba194 <floorf+0x84>
   ba15c:	ee70 7a27 	vadd.f32	s15, s0, s15
   ba160:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   ba164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba168:	dd03      	ble.n	ba172 <floorf+0x62>
   ba16a:	2a00      	cmp	r2, #0
   ba16c:	db08      	blt.n	ba180 <floorf+0x70>
   ba16e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; ba198 <floorf+0x88>
   ba172:	4770      	bx	lr
   ba174:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   ba178:	d3fb      	bcc.n	ba172 <floorf+0x62>
   ba17a:	ee30 0a00 	vadd.f32	s0, s0, s0
   ba17e:	4770      	bx	lr
   ba180:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   ba184:	2900      	cmp	r1, #0
   ba186:	bf18      	it	ne
   ba188:	eeb0 0a67 	vmovne.f32	s0, s15
   ba18c:	4770      	bx	lr
   ba18e:	bf00      	nop
   ba190:	007fffff 	.word	0x007fffff
   ba194:	7149f2ca 	.word	0x7149f2ca
   ba198:	00000000 	.word	0x00000000

000ba19c <sqrt>:
   ba19c:	b538      	push	{r3, r4, r5, lr}
   ba19e:	ed2d 8b02 	vpush	{d8}
   ba1a2:	ec55 4b10 	vmov	r4, r5, d0
   ba1a6:	f000 f833 	bl	ba210 <__ieee754_sqrt>
   ba1aa:	4b18      	ldr	r3, [pc, #96]	; (ba20c <sqrt+0x70>)
   ba1ac:	eeb0 8a40 	vmov.f32	s16, s0
   ba1b0:	eef0 8a60 	vmov.f32	s17, s1
   ba1b4:	f993 3000 	ldrsb.w	r3, [r3]
   ba1b8:	3301      	adds	r3, #1
   ba1ba:	d00d      	beq.n	ba1d8 <sqrt+0x3c>
   ba1bc:	4622      	mov	r2, r4
   ba1be:	462b      	mov	r3, r5
   ba1c0:	4620      	mov	r0, r4
   ba1c2:	4629      	mov	r1, r5
   ba1c4:	f000 fd46 	bl	bac54 <__aeabi_dcmpun>
   ba1c8:	b930      	cbnz	r0, ba1d8 <sqrt+0x3c>
   ba1ca:	2200      	movs	r2, #0
   ba1cc:	2300      	movs	r3, #0
   ba1ce:	4620      	mov	r0, r4
   ba1d0:	4629      	mov	r1, r5
   ba1d2:	f000 fd17 	bl	bac04 <__aeabi_dcmplt>
   ba1d6:	b930      	cbnz	r0, ba1e6 <sqrt+0x4a>
   ba1d8:	eeb0 0a48 	vmov.f32	s0, s16
   ba1dc:	eef0 0a68 	vmov.f32	s1, s17
   ba1e0:	ecbd 8b02 	vpop	{d8}
   ba1e4:	bd38      	pop	{r3, r4, r5, pc}
   ba1e6:	f7fd fae3 	bl	b77b0 <__errno>
   ba1ea:	2200      	movs	r2, #0
   ba1ec:	2300      	movs	r3, #0
   ba1ee:	2121      	movs	r1, #33	; 0x21
   ba1f0:	6001      	str	r1, [r0, #0]
   ba1f2:	4610      	mov	r0, r2
   ba1f4:	4619      	mov	r1, r3
   ba1f6:	f000 fbbd 	bl	ba974 <__aeabi_ddiv>
   ba1fa:	ec41 0b18 	vmov	d8, r0, r1
   ba1fe:	eeb0 0a48 	vmov.f32	s0, s16
   ba202:	eef0 0a68 	vmov.f32	s1, s17
   ba206:	ecbd 8b02 	vpop	{d8}
   ba20a:	bd38      	pop	{r3, r4, r5, pc}
   ba20c:	20035360 	.word	0x20035360

000ba210 <__ieee754_sqrt>:
   ba210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba214:	4a63      	ldr	r2, [pc, #396]	; (ba3a4 <__ieee754_sqrt+0x194>)
   ba216:	ec55 4b10 	vmov	r4, r5, d0
   ba21a:	43aa      	bics	r2, r5
   ba21c:	f000 809f 	beq.w	ba35e <__ieee754_sqrt+0x14e>
   ba220:	2d00      	cmp	r5, #0
   ba222:	ee10 ca10 	vmov	ip, s0
   ba226:	462b      	mov	r3, r5
   ba228:	dd54      	ble.n	ba2d4 <__ieee754_sqrt+0xc4>
   ba22a:	1529      	asrs	r1, r5, #20
   ba22c:	d063      	beq.n	ba2f6 <__ieee754_sqrt+0xe6>
   ba22e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   ba232:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   ba236:	07c9      	lsls	r1, r1, #31
   ba238:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ba23c:	d404      	bmi.n	ba248 <__ieee754_sqrt+0x38>
   ba23e:	005b      	lsls	r3, r3, #1
   ba240:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   ba244:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba248:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   ba24c:	2600      	movs	r6, #0
   ba24e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   ba252:	107f      	asrs	r7, r7, #1
   ba254:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba258:	f04f 0e16 	mov.w	lr, #22
   ba25c:	4634      	mov	r4, r6
   ba25e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   ba262:	18a1      	adds	r1, r4, r2
   ba264:	4299      	cmp	r1, r3
   ba266:	dc02      	bgt.n	ba26e <__ieee754_sqrt+0x5e>
   ba268:	1a5b      	subs	r3, r3, r1
   ba26a:	188c      	adds	r4, r1, r2
   ba26c:	4416      	add	r6, r2
   ba26e:	005b      	lsls	r3, r3, #1
   ba270:	f1be 0e01 	subs.w	lr, lr, #1
   ba274:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   ba278:	ea4f 0252 	mov.w	r2, r2, lsr #1
   ba27c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba280:	d1ef      	bne.n	ba262 <__ieee754_sqrt+0x52>
   ba282:	4675      	mov	r5, lr
   ba284:	2020      	movs	r0, #32
   ba286:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   ba28a:	e00a      	b.n	ba2a2 <__ieee754_sqrt+0x92>
   ba28c:	d044      	beq.n	ba318 <__ieee754_sqrt+0x108>
   ba28e:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   ba292:	3801      	subs	r0, #1
   ba294:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   ba298:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba29c:	ea4f 0252 	mov.w	r2, r2, lsr #1
   ba2a0:	d043      	beq.n	ba32a <__ieee754_sqrt+0x11a>
   ba2a2:	42a3      	cmp	r3, r4
   ba2a4:	eb02 010e 	add.w	r1, r2, lr
   ba2a8:	ddf0      	ble.n	ba28c <__ieee754_sqrt+0x7c>
   ba2aa:	2900      	cmp	r1, #0
   ba2ac:	eb01 0e02 	add.w	lr, r1, r2
   ba2b0:	db0a      	blt.n	ba2c8 <__ieee754_sqrt+0xb8>
   ba2b2:	46a0      	mov	r8, r4
   ba2b4:	1b1b      	subs	r3, r3, r4
   ba2b6:	4561      	cmp	r1, ip
   ba2b8:	bf88      	it	hi
   ba2ba:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   ba2be:	ebac 0c01 	sub.w	ip, ip, r1
   ba2c2:	4415      	add	r5, r2
   ba2c4:	4644      	mov	r4, r8
   ba2c6:	e7e2      	b.n	ba28e <__ieee754_sqrt+0x7e>
   ba2c8:	f1be 0f00 	cmp.w	lr, #0
   ba2cc:	dbf1      	blt.n	ba2b2 <__ieee754_sqrt+0xa2>
   ba2ce:	f104 0801 	add.w	r8, r4, #1
   ba2d2:	e7ef      	b.n	ba2b4 <__ieee754_sqrt+0xa4>
   ba2d4:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   ba2d8:	4322      	orrs	r2, r4
   ba2da:	d038      	beq.n	ba34e <__ieee754_sqrt+0x13e>
   ba2dc:	2d00      	cmp	r5, #0
   ba2de:	d14e      	bne.n	ba37e <__ieee754_sqrt+0x16e>
   ba2e0:	4629      	mov	r1, r5
   ba2e2:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   ba2e6:	3915      	subs	r1, #21
   ba2e8:	4613      	mov	r3, r2
   ba2ea:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   ba2ee:	2a00      	cmp	r2, #0
   ba2f0:	d0f7      	beq.n	ba2e2 <__ieee754_sqrt+0xd2>
   ba2f2:	02d6      	lsls	r6, r2, #11
   ba2f4:	d450      	bmi.n	ba398 <__ieee754_sqrt+0x188>
   ba2f6:	2000      	movs	r0, #0
   ba2f8:	005b      	lsls	r3, r3, #1
   ba2fa:	02dd      	lsls	r5, r3, #11
   ba2fc:	4604      	mov	r4, r0
   ba2fe:	f100 0001 	add.w	r0, r0, #1
   ba302:	d5f9      	bpl.n	ba2f8 <__ieee754_sqrt+0xe8>
   ba304:	461a      	mov	r2, r3
   ba306:	4663      	mov	r3, ip
   ba308:	fa0c fc00 	lsl.w	ip, ip, r0
   ba30c:	f1c0 0020 	rsb	r0, r0, #32
   ba310:	40c3      	lsrs	r3, r0
   ba312:	1b09      	subs	r1, r1, r4
   ba314:	4313      	orrs	r3, r2
   ba316:	e78a      	b.n	ba22e <__ieee754_sqrt+0x1e>
   ba318:	4561      	cmp	r1, ip
   ba31a:	d8b8      	bhi.n	ba28e <__ieee754_sqrt+0x7e>
   ba31c:	2900      	cmp	r1, #0
   ba31e:	eb01 0e02 	add.w	lr, r1, r2
   ba322:	dbd1      	blt.n	ba2c8 <__ieee754_sqrt+0xb8>
   ba324:	4698      	mov	r8, r3
   ba326:	2300      	movs	r3, #0
   ba328:	e7c9      	b.n	ba2be <__ieee754_sqrt+0xae>
   ba32a:	ea53 030c 	orrs.w	r3, r3, ip
   ba32e:	d110      	bne.n	ba352 <__ieee754_sqrt+0x142>
   ba330:	0868      	lsrs	r0, r5, #1
   ba332:	1071      	asrs	r1, r6, #1
   ba334:	07f3      	lsls	r3, r6, #31
   ba336:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   ba33a:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   ba33e:	bf48      	it	mi
   ba340:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   ba344:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   ba348:	4602      	mov	r2, r0
   ba34a:	ec43 2b10 	vmov	d0, r2, r3
   ba34e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba352:	1c6a      	adds	r2, r5, #1
   ba354:	bf16      	itet	ne
   ba356:	1c68      	addne	r0, r5, #1
   ba358:	3601      	addeq	r6, #1
   ba35a:	0840      	lsrne	r0, r0, #1
   ba35c:	e7e9      	b.n	ba332 <__ieee754_sqrt+0x122>
   ba35e:	ee10 2a10 	vmov	r2, s0
   ba362:	ee10 0a10 	vmov	r0, s0
   ba366:	462b      	mov	r3, r5
   ba368:	4629      	mov	r1, r5
   ba36a:	f000 f9d9 	bl	ba720 <__aeabi_dmul>
   ba36e:	4622      	mov	r2, r4
   ba370:	462b      	mov	r3, r5
   ba372:	f000 f81f 	bl	ba3b4 <__adddf3>
   ba376:	ec41 0b10 	vmov	d0, r0, r1
   ba37a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba37e:	ee10 2a10 	vmov	r2, s0
   ba382:	4620      	mov	r0, r4
   ba384:	4629      	mov	r1, r5
   ba386:	f000 f813 	bl	ba3b0 <__aeabi_dsub>
   ba38a:	4602      	mov	r2, r0
   ba38c:	460b      	mov	r3, r1
   ba38e:	f000 faf1 	bl	ba974 <__aeabi_ddiv>
   ba392:	ec41 0b10 	vmov	d0, r0, r1
   ba396:	e7da      	b.n	ba34e <__ieee754_sqrt+0x13e>
   ba398:	4663      	mov	r3, ip
   ba39a:	2020      	movs	r0, #32
   ba39c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   ba3a0:	e7b6      	b.n	ba310 <__ieee754_sqrt+0x100>
   ba3a2:	bf00      	nop
   ba3a4:	7ff00000 	.word	0x7ff00000

000ba3a8 <__aeabi_drsub>:
   ba3a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   ba3ac:	e002      	b.n	ba3b4 <__adddf3>
   ba3ae:	bf00      	nop

000ba3b0 <__aeabi_dsub>:
   ba3b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000ba3b4 <__adddf3>:
   ba3b4:	b530      	push	{r4, r5, lr}
   ba3b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   ba3ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
   ba3be:	ea94 0f05 	teq	r4, r5
   ba3c2:	bf08      	it	eq
   ba3c4:	ea90 0f02 	teqeq	r0, r2
   ba3c8:	bf1f      	itttt	ne
   ba3ca:	ea54 0c00 	orrsne.w	ip, r4, r0
   ba3ce:	ea55 0c02 	orrsne.w	ip, r5, r2
   ba3d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   ba3d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   ba3da:	f000 80e2 	beq.w	ba5a2 <__adddf3+0x1ee>
   ba3de:	ea4f 5454 	mov.w	r4, r4, lsr #21
   ba3e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   ba3e6:	bfb8      	it	lt
   ba3e8:	426d      	neglt	r5, r5
   ba3ea:	dd0c      	ble.n	ba406 <__adddf3+0x52>
   ba3ec:	442c      	add	r4, r5
   ba3ee:	ea80 0202 	eor.w	r2, r0, r2
   ba3f2:	ea81 0303 	eor.w	r3, r1, r3
   ba3f6:	ea82 0000 	eor.w	r0, r2, r0
   ba3fa:	ea83 0101 	eor.w	r1, r3, r1
   ba3fe:	ea80 0202 	eor.w	r2, r0, r2
   ba402:	ea81 0303 	eor.w	r3, r1, r3
   ba406:	2d36      	cmp	r5, #54	; 0x36
   ba408:	bf88      	it	hi
   ba40a:	bd30      	pophi	{r4, r5, pc}
   ba40c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   ba410:	ea4f 3101 	mov.w	r1, r1, lsl #12
   ba414:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   ba418:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   ba41c:	d002      	beq.n	ba424 <__adddf3+0x70>
   ba41e:	4240      	negs	r0, r0
   ba420:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ba424:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   ba428:	ea4f 3303 	mov.w	r3, r3, lsl #12
   ba42c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   ba430:	d002      	beq.n	ba438 <__adddf3+0x84>
   ba432:	4252      	negs	r2, r2
   ba434:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   ba438:	ea94 0f05 	teq	r4, r5
   ba43c:	f000 80a7 	beq.w	ba58e <__adddf3+0x1da>
   ba440:	f1a4 0401 	sub.w	r4, r4, #1
   ba444:	f1d5 0e20 	rsbs	lr, r5, #32
   ba448:	db0d      	blt.n	ba466 <__adddf3+0xb2>
   ba44a:	fa02 fc0e 	lsl.w	ip, r2, lr
   ba44e:	fa22 f205 	lsr.w	r2, r2, r5
   ba452:	1880      	adds	r0, r0, r2
   ba454:	f141 0100 	adc.w	r1, r1, #0
   ba458:	fa03 f20e 	lsl.w	r2, r3, lr
   ba45c:	1880      	adds	r0, r0, r2
   ba45e:	fa43 f305 	asr.w	r3, r3, r5
   ba462:	4159      	adcs	r1, r3
   ba464:	e00e      	b.n	ba484 <__adddf3+0xd0>
   ba466:	f1a5 0520 	sub.w	r5, r5, #32
   ba46a:	f10e 0e20 	add.w	lr, lr, #32
   ba46e:	2a01      	cmp	r2, #1
   ba470:	fa03 fc0e 	lsl.w	ip, r3, lr
   ba474:	bf28      	it	cs
   ba476:	f04c 0c02 	orrcs.w	ip, ip, #2
   ba47a:	fa43 f305 	asr.w	r3, r3, r5
   ba47e:	18c0      	adds	r0, r0, r3
   ba480:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   ba484:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba488:	d507      	bpl.n	ba49a <__adddf3+0xe6>
   ba48a:	f04f 0e00 	mov.w	lr, #0
   ba48e:	f1dc 0c00 	rsbs	ip, ip, #0
   ba492:	eb7e 0000 	sbcs.w	r0, lr, r0
   ba496:	eb6e 0101 	sbc.w	r1, lr, r1
   ba49a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   ba49e:	d31b      	bcc.n	ba4d8 <__adddf3+0x124>
   ba4a0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   ba4a4:	d30c      	bcc.n	ba4c0 <__adddf3+0x10c>
   ba4a6:	0849      	lsrs	r1, r1, #1
   ba4a8:	ea5f 0030 	movs.w	r0, r0, rrx
   ba4ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
   ba4b0:	f104 0401 	add.w	r4, r4, #1
   ba4b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   ba4b8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   ba4bc:	f080 809a 	bcs.w	ba5f4 <__adddf3+0x240>
   ba4c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   ba4c4:	bf08      	it	eq
   ba4c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   ba4ca:	f150 0000 	adcs.w	r0, r0, #0
   ba4ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ba4d2:	ea41 0105 	orr.w	r1, r1, r5
   ba4d6:	bd30      	pop	{r4, r5, pc}
   ba4d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   ba4dc:	4140      	adcs	r0, r0
   ba4de:	eb41 0101 	adc.w	r1, r1, r1
   ba4e2:	3c01      	subs	r4, #1
   ba4e4:	bf28      	it	cs
   ba4e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   ba4ea:	d2e9      	bcs.n	ba4c0 <__adddf3+0x10c>
   ba4ec:	f091 0f00 	teq	r1, #0
   ba4f0:	bf04      	itt	eq
   ba4f2:	4601      	moveq	r1, r0
   ba4f4:	2000      	moveq	r0, #0
   ba4f6:	fab1 f381 	clz	r3, r1
   ba4fa:	bf08      	it	eq
   ba4fc:	3320      	addeq	r3, #32
   ba4fe:	f1a3 030b 	sub.w	r3, r3, #11
   ba502:	f1b3 0220 	subs.w	r2, r3, #32
   ba506:	da0c      	bge.n	ba522 <__adddf3+0x16e>
   ba508:	320c      	adds	r2, #12
   ba50a:	dd08      	ble.n	ba51e <__adddf3+0x16a>
   ba50c:	f102 0c14 	add.w	ip, r2, #20
   ba510:	f1c2 020c 	rsb	r2, r2, #12
   ba514:	fa01 f00c 	lsl.w	r0, r1, ip
   ba518:	fa21 f102 	lsr.w	r1, r1, r2
   ba51c:	e00c      	b.n	ba538 <__adddf3+0x184>
   ba51e:	f102 0214 	add.w	r2, r2, #20
   ba522:	bfd8      	it	le
   ba524:	f1c2 0c20 	rsble	ip, r2, #32
   ba528:	fa01 f102 	lsl.w	r1, r1, r2
   ba52c:	fa20 fc0c 	lsr.w	ip, r0, ip
   ba530:	bfdc      	itt	le
   ba532:	ea41 010c 	orrle.w	r1, r1, ip
   ba536:	4090      	lslle	r0, r2
   ba538:	1ae4      	subs	r4, r4, r3
   ba53a:	bfa2      	ittt	ge
   ba53c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   ba540:	4329      	orrge	r1, r5
   ba542:	bd30      	popge	{r4, r5, pc}
   ba544:	ea6f 0404 	mvn.w	r4, r4
   ba548:	3c1f      	subs	r4, #31
   ba54a:	da1c      	bge.n	ba586 <__adddf3+0x1d2>
   ba54c:	340c      	adds	r4, #12
   ba54e:	dc0e      	bgt.n	ba56e <__adddf3+0x1ba>
   ba550:	f104 0414 	add.w	r4, r4, #20
   ba554:	f1c4 0220 	rsb	r2, r4, #32
   ba558:	fa20 f004 	lsr.w	r0, r0, r4
   ba55c:	fa01 f302 	lsl.w	r3, r1, r2
   ba560:	ea40 0003 	orr.w	r0, r0, r3
   ba564:	fa21 f304 	lsr.w	r3, r1, r4
   ba568:	ea45 0103 	orr.w	r1, r5, r3
   ba56c:	bd30      	pop	{r4, r5, pc}
   ba56e:	f1c4 040c 	rsb	r4, r4, #12
   ba572:	f1c4 0220 	rsb	r2, r4, #32
   ba576:	fa20 f002 	lsr.w	r0, r0, r2
   ba57a:	fa01 f304 	lsl.w	r3, r1, r4
   ba57e:	ea40 0003 	orr.w	r0, r0, r3
   ba582:	4629      	mov	r1, r5
   ba584:	bd30      	pop	{r4, r5, pc}
   ba586:	fa21 f004 	lsr.w	r0, r1, r4
   ba58a:	4629      	mov	r1, r5
   ba58c:	bd30      	pop	{r4, r5, pc}
   ba58e:	f094 0f00 	teq	r4, #0
   ba592:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   ba596:	bf06      	itte	eq
   ba598:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   ba59c:	3401      	addeq	r4, #1
   ba59e:	3d01      	subne	r5, #1
   ba5a0:	e74e      	b.n	ba440 <__adddf3+0x8c>
   ba5a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   ba5a6:	bf18      	it	ne
   ba5a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   ba5ac:	d029      	beq.n	ba602 <__adddf3+0x24e>
   ba5ae:	ea94 0f05 	teq	r4, r5
   ba5b2:	bf08      	it	eq
   ba5b4:	ea90 0f02 	teqeq	r0, r2
   ba5b8:	d005      	beq.n	ba5c6 <__adddf3+0x212>
   ba5ba:	ea54 0c00 	orrs.w	ip, r4, r0
   ba5be:	bf04      	itt	eq
   ba5c0:	4619      	moveq	r1, r3
   ba5c2:	4610      	moveq	r0, r2
   ba5c4:	bd30      	pop	{r4, r5, pc}
   ba5c6:	ea91 0f03 	teq	r1, r3
   ba5ca:	bf1e      	ittt	ne
   ba5cc:	2100      	movne	r1, #0
   ba5ce:	2000      	movne	r0, #0
   ba5d0:	bd30      	popne	{r4, r5, pc}
   ba5d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   ba5d6:	d105      	bne.n	ba5e4 <__adddf3+0x230>
   ba5d8:	0040      	lsls	r0, r0, #1
   ba5da:	4149      	adcs	r1, r1
   ba5dc:	bf28      	it	cs
   ba5de:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   ba5e2:	bd30      	pop	{r4, r5, pc}
   ba5e4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   ba5e8:	bf3c      	itt	cc
   ba5ea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   ba5ee:	bd30      	popcc	{r4, r5, pc}
   ba5f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba5f4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   ba5f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   ba5fc:	f04f 0000 	mov.w	r0, #0
   ba600:	bd30      	pop	{r4, r5, pc}
   ba602:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   ba606:	bf1a      	itte	ne
   ba608:	4619      	movne	r1, r3
   ba60a:	4610      	movne	r0, r2
   ba60c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   ba610:	bf1c      	itt	ne
   ba612:	460b      	movne	r3, r1
   ba614:	4602      	movne	r2, r0
   ba616:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   ba61a:	bf06      	itte	eq
   ba61c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   ba620:	ea91 0f03 	teqeq	r1, r3
   ba624:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   ba628:	bd30      	pop	{r4, r5, pc}
   ba62a:	bf00      	nop

000ba62c <__aeabi_ui2d>:
   ba62c:	f090 0f00 	teq	r0, #0
   ba630:	bf04      	itt	eq
   ba632:	2100      	moveq	r1, #0
   ba634:	4770      	bxeq	lr
   ba636:	b530      	push	{r4, r5, lr}
   ba638:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ba63c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ba640:	f04f 0500 	mov.w	r5, #0
   ba644:	f04f 0100 	mov.w	r1, #0
   ba648:	e750      	b.n	ba4ec <__adddf3+0x138>
   ba64a:	bf00      	nop

000ba64c <__aeabi_i2d>:
   ba64c:	f090 0f00 	teq	r0, #0
   ba650:	bf04      	itt	eq
   ba652:	2100      	moveq	r1, #0
   ba654:	4770      	bxeq	lr
   ba656:	b530      	push	{r4, r5, lr}
   ba658:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ba65c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ba660:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   ba664:	bf48      	it	mi
   ba666:	4240      	negmi	r0, r0
   ba668:	f04f 0100 	mov.w	r1, #0
   ba66c:	e73e      	b.n	ba4ec <__adddf3+0x138>
   ba66e:	bf00      	nop

000ba670 <__aeabi_f2d>:
   ba670:	0042      	lsls	r2, r0, #1
   ba672:	ea4f 01e2 	mov.w	r1, r2, asr #3
   ba676:	ea4f 0131 	mov.w	r1, r1, rrx
   ba67a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   ba67e:	bf1f      	itttt	ne
   ba680:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   ba684:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   ba688:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   ba68c:	4770      	bxne	lr
   ba68e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   ba692:	bf08      	it	eq
   ba694:	4770      	bxeq	lr
   ba696:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   ba69a:	bf04      	itt	eq
   ba69c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   ba6a0:	4770      	bxeq	lr
   ba6a2:	b530      	push	{r4, r5, lr}
   ba6a4:	f44f 7460 	mov.w	r4, #896	; 0x380
   ba6a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba6ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   ba6b0:	e71c      	b.n	ba4ec <__adddf3+0x138>
   ba6b2:	bf00      	nop

000ba6b4 <__aeabi_ul2d>:
   ba6b4:	ea50 0201 	orrs.w	r2, r0, r1
   ba6b8:	bf08      	it	eq
   ba6ba:	4770      	bxeq	lr
   ba6bc:	b530      	push	{r4, r5, lr}
   ba6be:	f04f 0500 	mov.w	r5, #0
   ba6c2:	e00a      	b.n	ba6da <__aeabi_l2d+0x16>

000ba6c4 <__aeabi_l2d>:
   ba6c4:	ea50 0201 	orrs.w	r2, r0, r1
   ba6c8:	bf08      	it	eq
   ba6ca:	4770      	bxeq	lr
   ba6cc:	b530      	push	{r4, r5, lr}
   ba6ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   ba6d2:	d502      	bpl.n	ba6da <__aeabi_l2d+0x16>
   ba6d4:	4240      	negs	r0, r0
   ba6d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ba6da:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ba6de:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ba6e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   ba6e6:	f43f aed8 	beq.w	ba49a <__adddf3+0xe6>
   ba6ea:	f04f 0203 	mov.w	r2, #3
   ba6ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   ba6f2:	bf18      	it	ne
   ba6f4:	3203      	addne	r2, #3
   ba6f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   ba6fa:	bf18      	it	ne
   ba6fc:	3203      	addne	r2, #3
   ba6fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   ba702:	f1c2 0320 	rsb	r3, r2, #32
   ba706:	fa00 fc03 	lsl.w	ip, r0, r3
   ba70a:	fa20 f002 	lsr.w	r0, r0, r2
   ba70e:	fa01 fe03 	lsl.w	lr, r1, r3
   ba712:	ea40 000e 	orr.w	r0, r0, lr
   ba716:	fa21 f102 	lsr.w	r1, r1, r2
   ba71a:	4414      	add	r4, r2
   ba71c:	e6bd      	b.n	ba49a <__adddf3+0xe6>
   ba71e:	bf00      	nop

000ba720 <__aeabi_dmul>:
   ba720:	b570      	push	{r4, r5, r6, lr}
   ba722:	f04f 0cff 	mov.w	ip, #255	; 0xff
   ba726:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   ba72a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   ba72e:	bf1d      	ittte	ne
   ba730:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   ba734:	ea94 0f0c 	teqne	r4, ip
   ba738:	ea95 0f0c 	teqne	r5, ip
   ba73c:	f000 f8de 	bleq	ba8fc <__aeabi_dmul+0x1dc>
   ba740:	442c      	add	r4, r5
   ba742:	ea81 0603 	eor.w	r6, r1, r3
   ba746:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   ba74a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   ba74e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   ba752:	bf18      	it	ne
   ba754:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   ba758:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba75c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ba760:	d038      	beq.n	ba7d4 <__aeabi_dmul+0xb4>
   ba762:	fba0 ce02 	umull	ip, lr, r0, r2
   ba766:	f04f 0500 	mov.w	r5, #0
   ba76a:	fbe1 e502 	umlal	lr, r5, r1, r2
   ba76e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   ba772:	fbe0 e503 	umlal	lr, r5, r0, r3
   ba776:	f04f 0600 	mov.w	r6, #0
   ba77a:	fbe1 5603 	umlal	r5, r6, r1, r3
   ba77e:	f09c 0f00 	teq	ip, #0
   ba782:	bf18      	it	ne
   ba784:	f04e 0e01 	orrne.w	lr, lr, #1
   ba788:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   ba78c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   ba790:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   ba794:	d204      	bcs.n	ba7a0 <__aeabi_dmul+0x80>
   ba796:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   ba79a:	416d      	adcs	r5, r5
   ba79c:	eb46 0606 	adc.w	r6, r6, r6
   ba7a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   ba7a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   ba7a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   ba7ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   ba7b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   ba7b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   ba7b8:	bf88      	it	hi
   ba7ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   ba7be:	d81e      	bhi.n	ba7fe <__aeabi_dmul+0xde>
   ba7c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   ba7c4:	bf08      	it	eq
   ba7c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   ba7ca:	f150 0000 	adcs.w	r0, r0, #0
   ba7ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ba7d2:	bd70      	pop	{r4, r5, r6, pc}
   ba7d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   ba7d8:	ea46 0101 	orr.w	r1, r6, r1
   ba7dc:	ea40 0002 	orr.w	r0, r0, r2
   ba7e0:	ea81 0103 	eor.w	r1, r1, r3
   ba7e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   ba7e8:	bfc2      	ittt	gt
   ba7ea:	ebd4 050c 	rsbsgt	r5, r4, ip
   ba7ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   ba7f2:	bd70      	popgt	{r4, r5, r6, pc}
   ba7f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba7f8:	f04f 0e00 	mov.w	lr, #0
   ba7fc:	3c01      	subs	r4, #1
   ba7fe:	f300 80ab 	bgt.w	ba958 <__aeabi_dmul+0x238>
   ba802:	f114 0f36 	cmn.w	r4, #54	; 0x36
   ba806:	bfde      	ittt	le
   ba808:	2000      	movle	r0, #0
   ba80a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   ba80e:	bd70      	pople	{r4, r5, r6, pc}
   ba810:	f1c4 0400 	rsb	r4, r4, #0
   ba814:	3c20      	subs	r4, #32
   ba816:	da35      	bge.n	ba884 <__aeabi_dmul+0x164>
   ba818:	340c      	adds	r4, #12
   ba81a:	dc1b      	bgt.n	ba854 <__aeabi_dmul+0x134>
   ba81c:	f104 0414 	add.w	r4, r4, #20
   ba820:	f1c4 0520 	rsb	r5, r4, #32
   ba824:	fa00 f305 	lsl.w	r3, r0, r5
   ba828:	fa20 f004 	lsr.w	r0, r0, r4
   ba82c:	fa01 f205 	lsl.w	r2, r1, r5
   ba830:	ea40 0002 	orr.w	r0, r0, r2
   ba834:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   ba838:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   ba83c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   ba840:	fa21 f604 	lsr.w	r6, r1, r4
   ba844:	eb42 0106 	adc.w	r1, r2, r6
   ba848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ba84c:	bf08      	it	eq
   ba84e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ba852:	bd70      	pop	{r4, r5, r6, pc}
   ba854:	f1c4 040c 	rsb	r4, r4, #12
   ba858:	f1c4 0520 	rsb	r5, r4, #32
   ba85c:	fa00 f304 	lsl.w	r3, r0, r4
   ba860:	fa20 f005 	lsr.w	r0, r0, r5
   ba864:	fa01 f204 	lsl.w	r2, r1, r4
   ba868:	ea40 0002 	orr.w	r0, r0, r2
   ba86c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba870:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   ba874:	f141 0100 	adc.w	r1, r1, #0
   ba878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ba87c:	bf08      	it	eq
   ba87e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ba882:	bd70      	pop	{r4, r5, r6, pc}
   ba884:	f1c4 0520 	rsb	r5, r4, #32
   ba888:	fa00 f205 	lsl.w	r2, r0, r5
   ba88c:	ea4e 0e02 	orr.w	lr, lr, r2
   ba890:	fa20 f304 	lsr.w	r3, r0, r4
   ba894:	fa01 f205 	lsl.w	r2, r1, r5
   ba898:	ea43 0302 	orr.w	r3, r3, r2
   ba89c:	fa21 f004 	lsr.w	r0, r1, r4
   ba8a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba8a4:	fa21 f204 	lsr.w	r2, r1, r4
   ba8a8:	ea20 0002 	bic.w	r0, r0, r2
   ba8ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   ba8b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ba8b4:	bf08      	it	eq
   ba8b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ba8ba:	bd70      	pop	{r4, r5, r6, pc}
   ba8bc:	f094 0f00 	teq	r4, #0
   ba8c0:	d10f      	bne.n	ba8e2 <__aeabi_dmul+0x1c2>
   ba8c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   ba8c6:	0040      	lsls	r0, r0, #1
   ba8c8:	eb41 0101 	adc.w	r1, r1, r1
   ba8cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   ba8d0:	bf08      	it	eq
   ba8d2:	3c01      	subeq	r4, #1
   ba8d4:	d0f7      	beq.n	ba8c6 <__aeabi_dmul+0x1a6>
   ba8d6:	ea41 0106 	orr.w	r1, r1, r6
   ba8da:	f095 0f00 	teq	r5, #0
   ba8de:	bf18      	it	ne
   ba8e0:	4770      	bxne	lr
   ba8e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   ba8e6:	0052      	lsls	r2, r2, #1
   ba8e8:	eb43 0303 	adc.w	r3, r3, r3
   ba8ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   ba8f0:	bf08      	it	eq
   ba8f2:	3d01      	subeq	r5, #1
   ba8f4:	d0f7      	beq.n	ba8e6 <__aeabi_dmul+0x1c6>
   ba8f6:	ea43 0306 	orr.w	r3, r3, r6
   ba8fa:	4770      	bx	lr
   ba8fc:	ea94 0f0c 	teq	r4, ip
   ba900:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   ba904:	bf18      	it	ne
   ba906:	ea95 0f0c 	teqne	r5, ip
   ba90a:	d00c      	beq.n	ba926 <__aeabi_dmul+0x206>
   ba90c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ba910:	bf18      	it	ne
   ba912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ba916:	d1d1      	bne.n	ba8bc <__aeabi_dmul+0x19c>
   ba918:	ea81 0103 	eor.w	r1, r1, r3
   ba91c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba920:	f04f 0000 	mov.w	r0, #0
   ba924:	bd70      	pop	{r4, r5, r6, pc}
   ba926:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ba92a:	bf06      	itte	eq
   ba92c:	4610      	moveq	r0, r2
   ba92e:	4619      	moveq	r1, r3
   ba930:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ba934:	d019      	beq.n	ba96a <__aeabi_dmul+0x24a>
   ba936:	ea94 0f0c 	teq	r4, ip
   ba93a:	d102      	bne.n	ba942 <__aeabi_dmul+0x222>
   ba93c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   ba940:	d113      	bne.n	ba96a <__aeabi_dmul+0x24a>
   ba942:	ea95 0f0c 	teq	r5, ip
   ba946:	d105      	bne.n	ba954 <__aeabi_dmul+0x234>
   ba948:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   ba94c:	bf1c      	itt	ne
   ba94e:	4610      	movne	r0, r2
   ba950:	4619      	movne	r1, r3
   ba952:	d10a      	bne.n	ba96a <__aeabi_dmul+0x24a>
   ba954:	ea81 0103 	eor.w	r1, r1, r3
   ba958:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba95c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   ba960:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   ba964:	f04f 0000 	mov.w	r0, #0
   ba968:	bd70      	pop	{r4, r5, r6, pc}
   ba96a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   ba96e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   ba972:	bd70      	pop	{r4, r5, r6, pc}

000ba974 <__aeabi_ddiv>:
   ba974:	b570      	push	{r4, r5, r6, lr}
   ba976:	f04f 0cff 	mov.w	ip, #255	; 0xff
   ba97a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   ba97e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   ba982:	bf1d      	ittte	ne
   ba984:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   ba988:	ea94 0f0c 	teqne	r4, ip
   ba98c:	ea95 0f0c 	teqne	r5, ip
   ba990:	f000 f8a7 	bleq	baae2 <__aeabi_ddiv+0x16e>
   ba994:	eba4 0405 	sub.w	r4, r4, r5
   ba998:	ea81 0e03 	eor.w	lr, r1, r3
   ba99c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   ba9a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   ba9a4:	f000 8088 	beq.w	baab8 <__aeabi_ddiv+0x144>
   ba9a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   ba9ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   ba9b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   ba9b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   ba9b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   ba9bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   ba9c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   ba9c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   ba9c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   ba9cc:	429d      	cmp	r5, r3
   ba9ce:	bf08      	it	eq
   ba9d0:	4296      	cmpeq	r6, r2
   ba9d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   ba9d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   ba9da:	d202      	bcs.n	ba9e2 <__aeabi_ddiv+0x6e>
   ba9dc:	085b      	lsrs	r3, r3, #1
   ba9de:	ea4f 0232 	mov.w	r2, r2, rrx
   ba9e2:	1ab6      	subs	r6, r6, r2
   ba9e4:	eb65 0503 	sbc.w	r5, r5, r3
   ba9e8:	085b      	lsrs	r3, r3, #1
   ba9ea:	ea4f 0232 	mov.w	r2, r2, rrx
   ba9ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   ba9f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   ba9f6:	ebb6 0e02 	subs.w	lr, r6, r2
   ba9fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   ba9fe:	bf22      	ittt	cs
   baa00:	1ab6      	subcs	r6, r6, r2
   baa02:	4675      	movcs	r5, lr
   baa04:	ea40 000c 	orrcs.w	r0, r0, ip
   baa08:	085b      	lsrs	r3, r3, #1
   baa0a:	ea4f 0232 	mov.w	r2, r2, rrx
   baa0e:	ebb6 0e02 	subs.w	lr, r6, r2
   baa12:	eb75 0e03 	sbcs.w	lr, r5, r3
   baa16:	bf22      	ittt	cs
   baa18:	1ab6      	subcs	r6, r6, r2
   baa1a:	4675      	movcs	r5, lr
   baa1c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   baa20:	085b      	lsrs	r3, r3, #1
   baa22:	ea4f 0232 	mov.w	r2, r2, rrx
   baa26:	ebb6 0e02 	subs.w	lr, r6, r2
   baa2a:	eb75 0e03 	sbcs.w	lr, r5, r3
   baa2e:	bf22      	ittt	cs
   baa30:	1ab6      	subcs	r6, r6, r2
   baa32:	4675      	movcs	r5, lr
   baa34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   baa38:	085b      	lsrs	r3, r3, #1
   baa3a:	ea4f 0232 	mov.w	r2, r2, rrx
   baa3e:	ebb6 0e02 	subs.w	lr, r6, r2
   baa42:	eb75 0e03 	sbcs.w	lr, r5, r3
   baa46:	bf22      	ittt	cs
   baa48:	1ab6      	subcs	r6, r6, r2
   baa4a:	4675      	movcs	r5, lr
   baa4c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   baa50:	ea55 0e06 	orrs.w	lr, r5, r6
   baa54:	d018      	beq.n	baa88 <__aeabi_ddiv+0x114>
   baa56:	ea4f 1505 	mov.w	r5, r5, lsl #4
   baa5a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   baa5e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   baa62:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   baa66:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   baa6a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   baa6e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   baa72:	d1c0      	bne.n	ba9f6 <__aeabi_ddiv+0x82>
   baa74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   baa78:	d10b      	bne.n	baa92 <__aeabi_ddiv+0x11e>
   baa7a:	ea41 0100 	orr.w	r1, r1, r0
   baa7e:	f04f 0000 	mov.w	r0, #0
   baa82:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   baa86:	e7b6      	b.n	ba9f6 <__aeabi_ddiv+0x82>
   baa88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   baa8c:	bf04      	itt	eq
   baa8e:	4301      	orreq	r1, r0
   baa90:	2000      	moveq	r0, #0
   baa92:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   baa96:	bf88      	it	hi
   baa98:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   baa9c:	f63f aeaf 	bhi.w	ba7fe <__aeabi_dmul+0xde>
   baaa0:	ebb5 0c03 	subs.w	ip, r5, r3
   baaa4:	bf04      	itt	eq
   baaa6:	ebb6 0c02 	subseq.w	ip, r6, r2
   baaaa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   baaae:	f150 0000 	adcs.w	r0, r0, #0
   baab2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   baab6:	bd70      	pop	{r4, r5, r6, pc}
   baab8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   baabc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   baac0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   baac4:	bfc2      	ittt	gt
   baac6:	ebd4 050c 	rsbsgt	r5, r4, ip
   baaca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   baace:	bd70      	popgt	{r4, r5, r6, pc}
   baad0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   baad4:	f04f 0e00 	mov.w	lr, #0
   baad8:	3c01      	subs	r4, #1
   baada:	e690      	b.n	ba7fe <__aeabi_dmul+0xde>
   baadc:	ea45 0e06 	orr.w	lr, r5, r6
   baae0:	e68d      	b.n	ba7fe <__aeabi_dmul+0xde>
   baae2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   baae6:	ea94 0f0c 	teq	r4, ip
   baaea:	bf08      	it	eq
   baaec:	ea95 0f0c 	teqeq	r5, ip
   baaf0:	f43f af3b 	beq.w	ba96a <__aeabi_dmul+0x24a>
   baaf4:	ea94 0f0c 	teq	r4, ip
   baaf8:	d10a      	bne.n	bab10 <__aeabi_ddiv+0x19c>
   baafa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   baafe:	f47f af34 	bne.w	ba96a <__aeabi_dmul+0x24a>
   bab02:	ea95 0f0c 	teq	r5, ip
   bab06:	f47f af25 	bne.w	ba954 <__aeabi_dmul+0x234>
   bab0a:	4610      	mov	r0, r2
   bab0c:	4619      	mov	r1, r3
   bab0e:	e72c      	b.n	ba96a <__aeabi_dmul+0x24a>
   bab10:	ea95 0f0c 	teq	r5, ip
   bab14:	d106      	bne.n	bab24 <__aeabi_ddiv+0x1b0>
   bab16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bab1a:	f43f aefd 	beq.w	ba918 <__aeabi_dmul+0x1f8>
   bab1e:	4610      	mov	r0, r2
   bab20:	4619      	mov	r1, r3
   bab22:	e722      	b.n	ba96a <__aeabi_dmul+0x24a>
   bab24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bab28:	bf18      	it	ne
   bab2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bab2e:	f47f aec5 	bne.w	ba8bc <__aeabi_dmul+0x19c>
   bab32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bab36:	f47f af0d 	bne.w	ba954 <__aeabi_dmul+0x234>
   bab3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bab3e:	f47f aeeb 	bne.w	ba918 <__aeabi_dmul+0x1f8>
   bab42:	e712      	b.n	ba96a <__aeabi_dmul+0x24a>

000bab44 <__gedf2>:
   bab44:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bab48:	e006      	b.n	bab58 <__cmpdf2+0x4>
   bab4a:	bf00      	nop

000bab4c <__ledf2>:
   bab4c:	f04f 0c01 	mov.w	ip, #1
   bab50:	e002      	b.n	bab58 <__cmpdf2+0x4>
   bab52:	bf00      	nop

000bab54 <__cmpdf2>:
   bab54:	f04f 0c01 	mov.w	ip, #1
   bab58:	f84d cd04 	str.w	ip, [sp, #-4]!
   bab5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bab60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bab64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bab68:	bf18      	it	ne
   bab6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bab6e:	d01b      	beq.n	baba8 <__cmpdf2+0x54>
   bab70:	b001      	add	sp, #4
   bab72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bab76:	bf0c      	ite	eq
   bab78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bab7c:	ea91 0f03 	teqne	r1, r3
   bab80:	bf02      	ittt	eq
   bab82:	ea90 0f02 	teqeq	r0, r2
   bab86:	2000      	moveq	r0, #0
   bab88:	4770      	bxeq	lr
   bab8a:	f110 0f00 	cmn.w	r0, #0
   bab8e:	ea91 0f03 	teq	r1, r3
   bab92:	bf58      	it	pl
   bab94:	4299      	cmppl	r1, r3
   bab96:	bf08      	it	eq
   bab98:	4290      	cmpeq	r0, r2
   bab9a:	bf2c      	ite	cs
   bab9c:	17d8      	asrcs	r0, r3, #31
   bab9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   baba2:	f040 0001 	orr.w	r0, r0, #1
   baba6:	4770      	bx	lr
   baba8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   babac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   babb0:	d102      	bne.n	babb8 <__cmpdf2+0x64>
   babb2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   babb6:	d107      	bne.n	babc8 <__cmpdf2+0x74>
   babb8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   babbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   babc0:	d1d6      	bne.n	bab70 <__cmpdf2+0x1c>
   babc2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   babc6:	d0d3      	beq.n	bab70 <__cmpdf2+0x1c>
   babc8:	f85d 0b04 	ldr.w	r0, [sp], #4
   babcc:	4770      	bx	lr
   babce:	bf00      	nop

000babd0 <__aeabi_cdrcmple>:
   babd0:	4684      	mov	ip, r0
   babd2:	4610      	mov	r0, r2
   babd4:	4662      	mov	r2, ip
   babd6:	468c      	mov	ip, r1
   babd8:	4619      	mov	r1, r3
   babda:	4663      	mov	r3, ip
   babdc:	e000      	b.n	babe0 <__aeabi_cdcmpeq>
   babde:	bf00      	nop

000babe0 <__aeabi_cdcmpeq>:
   babe0:	b501      	push	{r0, lr}
   babe2:	f7ff ffb7 	bl	bab54 <__cmpdf2>
   babe6:	2800      	cmp	r0, #0
   babe8:	bf48      	it	mi
   babea:	f110 0f00 	cmnmi.w	r0, #0
   babee:	bd01      	pop	{r0, pc}

000babf0 <__aeabi_dcmpeq>:
   babf0:	f84d ed08 	str.w	lr, [sp, #-8]!
   babf4:	f7ff fff4 	bl	babe0 <__aeabi_cdcmpeq>
   babf8:	bf0c      	ite	eq
   babfa:	2001      	moveq	r0, #1
   babfc:	2000      	movne	r0, #0
   babfe:	f85d fb08 	ldr.w	pc, [sp], #8
   bac02:	bf00      	nop

000bac04 <__aeabi_dcmplt>:
   bac04:	f84d ed08 	str.w	lr, [sp, #-8]!
   bac08:	f7ff ffea 	bl	babe0 <__aeabi_cdcmpeq>
   bac0c:	bf34      	ite	cc
   bac0e:	2001      	movcc	r0, #1
   bac10:	2000      	movcs	r0, #0
   bac12:	f85d fb08 	ldr.w	pc, [sp], #8
   bac16:	bf00      	nop

000bac18 <__aeabi_dcmple>:
   bac18:	f84d ed08 	str.w	lr, [sp, #-8]!
   bac1c:	f7ff ffe0 	bl	babe0 <__aeabi_cdcmpeq>
   bac20:	bf94      	ite	ls
   bac22:	2001      	movls	r0, #1
   bac24:	2000      	movhi	r0, #0
   bac26:	f85d fb08 	ldr.w	pc, [sp], #8
   bac2a:	bf00      	nop

000bac2c <__aeabi_dcmpge>:
   bac2c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bac30:	f7ff ffce 	bl	babd0 <__aeabi_cdrcmple>
   bac34:	bf94      	ite	ls
   bac36:	2001      	movls	r0, #1
   bac38:	2000      	movhi	r0, #0
   bac3a:	f85d fb08 	ldr.w	pc, [sp], #8
   bac3e:	bf00      	nop

000bac40 <__aeabi_dcmpgt>:
   bac40:	f84d ed08 	str.w	lr, [sp, #-8]!
   bac44:	f7ff ffc4 	bl	babd0 <__aeabi_cdrcmple>
   bac48:	bf34      	ite	cc
   bac4a:	2001      	movcc	r0, #1
   bac4c:	2000      	movcs	r0, #0
   bac4e:	f85d fb08 	ldr.w	pc, [sp], #8
   bac52:	bf00      	nop

000bac54 <__aeabi_dcmpun>:
   bac54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bac58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bac5c:	d102      	bne.n	bac64 <__aeabi_dcmpun+0x10>
   bac5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bac62:	d10a      	bne.n	bac7a <__aeabi_dcmpun+0x26>
   bac64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bac68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bac6c:	d102      	bne.n	bac74 <__aeabi_dcmpun+0x20>
   bac6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bac72:	d102      	bne.n	bac7a <__aeabi_dcmpun+0x26>
   bac74:	f04f 0000 	mov.w	r0, #0
   bac78:	4770      	bx	lr
   bac7a:	f04f 0001 	mov.w	r0, #1
   bac7e:	4770      	bx	lr

000bac80 <__aeabi_d2uiz>:
   bac80:	004a      	lsls	r2, r1, #1
   bac82:	d211      	bcs.n	baca8 <__aeabi_d2uiz+0x28>
   bac84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bac88:	d211      	bcs.n	bacae <__aeabi_d2uiz+0x2e>
   bac8a:	d50d      	bpl.n	baca8 <__aeabi_d2uiz+0x28>
   bac8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bac90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bac94:	d40e      	bmi.n	bacb4 <__aeabi_d2uiz+0x34>
   bac96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bac9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bac9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   baca2:	fa23 f002 	lsr.w	r0, r3, r2
   baca6:	4770      	bx	lr
   baca8:	f04f 0000 	mov.w	r0, #0
   bacac:	4770      	bx	lr
   bacae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bacb2:	d102      	bne.n	bacba <__aeabi_d2uiz+0x3a>
   bacb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bacb8:	4770      	bx	lr
   bacba:	f04f 0000 	mov.w	r0, #0
   bacbe:	4770      	bx	lr

000bacc0 <__aeabi_d2f>:
   bacc0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bacc4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bacc8:	bf24      	itt	cs
   bacca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bacce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bacd2:	d90d      	bls.n	bacf0 <__aeabi_d2f+0x30>
   bacd4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bacd8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bacdc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bace0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bace4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bace8:	bf08      	it	eq
   bacea:	f020 0001 	biceq.w	r0, r0, #1
   bacee:	4770      	bx	lr
   bacf0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bacf4:	d121      	bne.n	bad3a <__aeabi_d2f+0x7a>
   bacf6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bacfa:	bfbc      	itt	lt
   bacfc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bad00:	4770      	bxlt	lr
   bad02:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bad06:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bad0a:	f1c2 0218 	rsb	r2, r2, #24
   bad0e:	f1c2 0c20 	rsb	ip, r2, #32
   bad12:	fa10 f30c 	lsls.w	r3, r0, ip
   bad16:	fa20 f002 	lsr.w	r0, r0, r2
   bad1a:	bf18      	it	ne
   bad1c:	f040 0001 	orrne.w	r0, r0, #1
   bad20:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bad24:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bad28:	fa03 fc0c 	lsl.w	ip, r3, ip
   bad2c:	ea40 000c 	orr.w	r0, r0, ip
   bad30:	fa23 f302 	lsr.w	r3, r3, r2
   bad34:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bad38:	e7cc      	b.n	bacd4 <__aeabi_d2f+0x14>
   bad3a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bad3e:	d107      	bne.n	bad50 <__aeabi_d2f+0x90>
   bad40:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bad44:	bf1e      	ittt	ne
   bad46:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bad4a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bad4e:	4770      	bxne	lr
   bad50:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bad54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bad58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bad5c:	4770      	bx	lr
   bad5e:	bf00      	nop

000bad60 <__aeabi_d2ulz>:
   bad60:	b5d0      	push	{r4, r6, r7, lr}
   bad62:	4b0c      	ldr	r3, [pc, #48]	; (bad94 <__aeabi_d2ulz+0x34>)
   bad64:	2200      	movs	r2, #0
   bad66:	4606      	mov	r6, r0
   bad68:	460f      	mov	r7, r1
   bad6a:	f7ff fcd9 	bl	ba720 <__aeabi_dmul>
   bad6e:	f7ff ff87 	bl	bac80 <__aeabi_d2uiz>
   bad72:	4604      	mov	r4, r0
   bad74:	f7ff fc5a 	bl	ba62c <__aeabi_ui2d>
   bad78:	4b07      	ldr	r3, [pc, #28]	; (bad98 <__aeabi_d2ulz+0x38>)
   bad7a:	2200      	movs	r2, #0
   bad7c:	f7ff fcd0 	bl	ba720 <__aeabi_dmul>
   bad80:	4602      	mov	r2, r0
   bad82:	460b      	mov	r3, r1
   bad84:	4630      	mov	r0, r6
   bad86:	4639      	mov	r1, r7
   bad88:	f7ff fb12 	bl	ba3b0 <__aeabi_dsub>
   bad8c:	f7ff ff78 	bl	bac80 <__aeabi_d2uiz>
   bad90:	4621      	mov	r1, r4
   bad92:	bdd0      	pop	{r4, r6, r7, pc}
   bad94:	3df00000 	.word	0x3df00000
   bad98:	41f00000 	.word	0x41f00000

000bad9c <atexit>:
   bad9c:	2300      	movs	r3, #0
   bad9e:	4601      	mov	r1, r0
   bada0:	461a      	mov	r2, r3
   bada2:	4618      	mov	r0, r3
   bada4:	f000 bf86 	b.w	bbcb4 <__register_exitproc>

000bada8 <atof>:
   bada8:	2100      	movs	r1, #0
   badaa:	f000 beeb 	b.w	bbb84 <strtod>

000badae <atoi>:
   badae:	220a      	movs	r2, #10
   badb0:	2100      	movs	r1, #0
   badb2:	f000 bf75 	b.w	bbca0 <strtol>

000badb6 <atol>:
   badb6:	220a      	movs	r2, #10
   badb8:	2100      	movs	r1, #0
   badba:	f000 bf71 	b.w	bbca0 <strtol>

000badbe <memcmp>:
   badbe:	b510      	push	{r4, lr}
   badc0:	3901      	subs	r1, #1
   badc2:	4402      	add	r2, r0
   badc4:	4290      	cmp	r0, r2
   badc6:	d101      	bne.n	badcc <memcmp+0xe>
   badc8:	2000      	movs	r0, #0
   badca:	e005      	b.n	badd8 <memcmp+0x1a>
   badcc:	7803      	ldrb	r3, [r0, #0]
   badce:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   badd2:	42a3      	cmp	r3, r4
   badd4:	d001      	beq.n	badda <memcmp+0x1c>
   badd6:	1b18      	subs	r0, r3, r4
   badd8:	bd10      	pop	{r4, pc}
   badda:	3001      	adds	r0, #1
   baddc:	e7f2      	b.n	badc4 <memcmp+0x6>

000badde <memcpy>:
   badde:	440a      	add	r2, r1
   bade0:	4291      	cmp	r1, r2
   bade2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bade6:	d100      	bne.n	badea <memcpy+0xc>
   bade8:	4770      	bx	lr
   badea:	b510      	push	{r4, lr}
   badec:	f811 4b01 	ldrb.w	r4, [r1], #1
   badf0:	f803 4f01 	strb.w	r4, [r3, #1]!
   badf4:	4291      	cmp	r1, r2
   badf6:	d1f9      	bne.n	badec <memcpy+0xe>
   badf8:	bd10      	pop	{r4, pc}

000badfa <memmove>:
   badfa:	4288      	cmp	r0, r1
   badfc:	b510      	push	{r4, lr}
   badfe:	eb01 0402 	add.w	r4, r1, r2
   bae02:	d902      	bls.n	bae0a <memmove+0x10>
   bae04:	4284      	cmp	r4, r0
   bae06:	4623      	mov	r3, r4
   bae08:	d807      	bhi.n	bae1a <memmove+0x20>
   bae0a:	1e43      	subs	r3, r0, #1
   bae0c:	42a1      	cmp	r1, r4
   bae0e:	d008      	beq.n	bae22 <memmove+0x28>
   bae10:	f811 2b01 	ldrb.w	r2, [r1], #1
   bae14:	f803 2f01 	strb.w	r2, [r3, #1]!
   bae18:	e7f8      	b.n	bae0c <memmove+0x12>
   bae1a:	4402      	add	r2, r0
   bae1c:	4601      	mov	r1, r0
   bae1e:	428a      	cmp	r2, r1
   bae20:	d100      	bne.n	bae24 <memmove+0x2a>
   bae22:	bd10      	pop	{r4, pc}
   bae24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bae28:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bae2c:	e7f7      	b.n	bae1e <memmove+0x24>

000bae2e <memset>:
   bae2e:	4402      	add	r2, r0
   bae30:	4603      	mov	r3, r0
   bae32:	4293      	cmp	r3, r2
   bae34:	d100      	bne.n	bae38 <memset+0xa>
   bae36:	4770      	bx	lr
   bae38:	f803 1b01 	strb.w	r1, [r3], #1
   bae3c:	e7f9      	b.n	bae32 <memset+0x4>
	...

000bae40 <srand>:
   bae40:	b538      	push	{r3, r4, r5, lr}
   bae42:	4b10      	ldr	r3, [pc, #64]	; (bae84 <srand+0x44>)
   bae44:	681d      	ldr	r5, [r3, #0]
   bae46:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bae48:	4604      	mov	r4, r0
   bae4a:	b9b3      	cbnz	r3, bae7a <srand+0x3a>
   bae4c:	2018      	movs	r0, #24
   bae4e:	f7fc fc77 	bl	b7740 <malloc>
   bae52:	4602      	mov	r2, r0
   bae54:	63a8      	str	r0, [r5, #56]	; 0x38
   bae56:	b920      	cbnz	r0, bae62 <srand+0x22>
   bae58:	4b0b      	ldr	r3, [pc, #44]	; (bae88 <srand+0x48>)
   bae5a:	480c      	ldr	r0, [pc, #48]	; (bae8c <srand+0x4c>)
   bae5c:	2142      	movs	r1, #66	; 0x42
   bae5e:	f7fc fcaf 	bl	b77c0 <__assert_func>
   bae62:	490b      	ldr	r1, [pc, #44]	; (bae90 <srand+0x50>)
   bae64:	4b0b      	ldr	r3, [pc, #44]	; (bae94 <srand+0x54>)
   bae66:	e9c0 1300 	strd	r1, r3, [r0]
   bae6a:	4b0b      	ldr	r3, [pc, #44]	; (bae98 <srand+0x58>)
   bae6c:	6083      	str	r3, [r0, #8]
   bae6e:	230b      	movs	r3, #11
   bae70:	8183      	strh	r3, [r0, #12]
   bae72:	2100      	movs	r1, #0
   bae74:	2001      	movs	r0, #1
   bae76:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bae7a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bae7c:	2200      	movs	r2, #0
   bae7e:	611c      	str	r4, [r3, #16]
   bae80:	615a      	str	r2, [r3, #20]
   bae82:	bd38      	pop	{r3, r4, r5, pc}
   bae84:	20035364 	.word	0x20035364
   bae88:	000bd83d 	.word	0x000bd83d
   bae8c:	000bd854 	.word	0x000bd854
   bae90:	abcd330e 	.word	0xabcd330e
   bae94:	e66d1234 	.word	0xe66d1234
   bae98:	0005deec 	.word	0x0005deec

000bae9c <strcmp>:
   bae9c:	f810 2b01 	ldrb.w	r2, [r0], #1
   baea0:	f811 3b01 	ldrb.w	r3, [r1], #1
   baea4:	2a01      	cmp	r2, #1
   baea6:	bf28      	it	cs
   baea8:	429a      	cmpcs	r2, r3
   baeaa:	d0f7      	beq.n	bae9c <strcmp>
   baeac:	1ad0      	subs	r0, r2, r3
   baeae:	4770      	bx	lr

000baeb0 <strcpy>:
   baeb0:	4603      	mov	r3, r0
   baeb2:	f811 2b01 	ldrb.w	r2, [r1], #1
   baeb6:	f803 2b01 	strb.w	r2, [r3], #1
   baeba:	2a00      	cmp	r2, #0
   baebc:	d1f9      	bne.n	baeb2 <strcpy+0x2>
   baebe:	4770      	bx	lr

000baec0 <strlen>:
   baec0:	4603      	mov	r3, r0
   baec2:	f813 2b01 	ldrb.w	r2, [r3], #1
   baec6:	2a00      	cmp	r2, #0
   baec8:	d1fb      	bne.n	baec2 <strlen+0x2>
   baeca:	1a18      	subs	r0, r3, r0
   baecc:	3801      	subs	r0, #1
   baece:	4770      	bx	lr

000baed0 <strncmp>:
   baed0:	b510      	push	{r4, lr}
   baed2:	b17a      	cbz	r2, baef4 <strncmp+0x24>
   baed4:	4603      	mov	r3, r0
   baed6:	3901      	subs	r1, #1
   baed8:	1884      	adds	r4, r0, r2
   baeda:	f813 0b01 	ldrb.w	r0, [r3], #1
   baede:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   baee2:	4290      	cmp	r0, r2
   baee4:	d101      	bne.n	baeea <strncmp+0x1a>
   baee6:	42a3      	cmp	r3, r4
   baee8:	d101      	bne.n	baeee <strncmp+0x1e>
   baeea:	1a80      	subs	r0, r0, r2
   baeec:	bd10      	pop	{r4, pc}
   baeee:	2800      	cmp	r0, #0
   baef0:	d1f3      	bne.n	baeda <strncmp+0xa>
   baef2:	e7fa      	b.n	baeea <strncmp+0x1a>
   baef4:	4610      	mov	r0, r2
   baef6:	e7f9      	b.n	baeec <strncmp+0x1c>

000baef8 <strnlen>:
   baef8:	b510      	push	{r4, lr}
   baefa:	4602      	mov	r2, r0
   baefc:	4401      	add	r1, r0
   baefe:	428a      	cmp	r2, r1
   baf00:	4613      	mov	r3, r2
   baf02:	d003      	beq.n	baf0c <strnlen+0x14>
   baf04:	781c      	ldrb	r4, [r3, #0]
   baf06:	3201      	adds	r2, #1
   baf08:	2c00      	cmp	r4, #0
   baf0a:	d1f8      	bne.n	baefe <strnlen+0x6>
   baf0c:	1a18      	subs	r0, r3, r0
   baf0e:	bd10      	pop	{r4, pc}

000baf10 <strstr>:
   baf10:	780a      	ldrb	r2, [r1, #0]
   baf12:	b570      	push	{r4, r5, r6, lr}
   baf14:	b96a      	cbnz	r2, baf32 <strstr+0x22>
   baf16:	bd70      	pop	{r4, r5, r6, pc}
   baf18:	429a      	cmp	r2, r3
   baf1a:	d109      	bne.n	baf30 <strstr+0x20>
   baf1c:	460c      	mov	r4, r1
   baf1e:	4605      	mov	r5, r0
   baf20:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   baf24:	2b00      	cmp	r3, #0
   baf26:	d0f6      	beq.n	baf16 <strstr+0x6>
   baf28:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   baf2c:	429e      	cmp	r6, r3
   baf2e:	d0f7      	beq.n	baf20 <strstr+0x10>
   baf30:	3001      	adds	r0, #1
   baf32:	7803      	ldrb	r3, [r0, #0]
   baf34:	2b00      	cmp	r3, #0
   baf36:	d1ef      	bne.n	baf18 <strstr+0x8>
   baf38:	4618      	mov	r0, r3
   baf3a:	e7ec      	b.n	baf16 <strstr+0x6>

000baf3c <sulp>:
   baf3c:	b570      	push	{r4, r5, r6, lr}
   baf3e:	4604      	mov	r4, r0
   baf40:	460d      	mov	r5, r1
   baf42:	ec45 4b10 	vmov	d0, r4, r5
   baf46:	4616      	mov	r6, r2
   baf48:	f001 fe0e 	bl	bcb68 <__ulp>
   baf4c:	ec51 0b10 	vmov	r0, r1, d0
   baf50:	b17e      	cbz	r6, baf72 <sulp+0x36>
   baf52:	f3c5 530a 	ubfx	r3, r5, #20, #11
   baf56:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   baf5a:	2b00      	cmp	r3, #0
   baf5c:	dd09      	ble.n	baf72 <sulp+0x36>
   baf5e:	051b      	lsls	r3, r3, #20
   baf60:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   baf64:	2400      	movs	r4, #0
   baf66:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   baf6a:	4622      	mov	r2, r4
   baf6c:	462b      	mov	r3, r5
   baf6e:	f7ff fbd7 	bl	ba720 <__aeabi_dmul>
   baf72:	bd70      	pop	{r4, r5, r6, pc}
   baf74:	0000      	movs	r0, r0
	...

000baf78 <_strtod_l>:
   baf78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   baf7c:	ed2d 8b02 	vpush	{d8}
   baf80:	b09d      	sub	sp, #116	; 0x74
   baf82:	461f      	mov	r7, r3
   baf84:	2300      	movs	r3, #0
   baf86:	9318      	str	r3, [sp, #96]	; 0x60
   baf88:	4ba2      	ldr	r3, [pc, #648]	; (bb214 <_strtod_l+0x29c>)
   baf8a:	9213      	str	r2, [sp, #76]	; 0x4c
   baf8c:	681b      	ldr	r3, [r3, #0]
   baf8e:	9305      	str	r3, [sp, #20]
   baf90:	4604      	mov	r4, r0
   baf92:	4618      	mov	r0, r3
   baf94:	4688      	mov	r8, r1
   baf96:	f7ff ff93 	bl	baec0 <strlen>
   baf9a:	f04f 0a00 	mov.w	sl, #0
   baf9e:	4605      	mov	r5, r0
   bafa0:	f04f 0b00 	mov.w	fp, #0
   bafa4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bafa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bafaa:	781a      	ldrb	r2, [r3, #0]
   bafac:	2a2b      	cmp	r2, #43	; 0x2b
   bafae:	d04e      	beq.n	bb04e <_strtod_l+0xd6>
   bafb0:	d83b      	bhi.n	bb02a <_strtod_l+0xb2>
   bafb2:	2a0d      	cmp	r2, #13
   bafb4:	d834      	bhi.n	bb020 <_strtod_l+0xa8>
   bafb6:	2a08      	cmp	r2, #8
   bafb8:	d834      	bhi.n	bb024 <_strtod_l+0xac>
   bafba:	2a00      	cmp	r2, #0
   bafbc:	d03e      	beq.n	bb03c <_strtod_l+0xc4>
   bafbe:	2300      	movs	r3, #0
   bafc0:	930a      	str	r3, [sp, #40]	; 0x28
   bafc2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bafc4:	7833      	ldrb	r3, [r6, #0]
   bafc6:	2b30      	cmp	r3, #48	; 0x30
   bafc8:	f040 80b0 	bne.w	bb12c <_strtod_l+0x1b4>
   bafcc:	7873      	ldrb	r3, [r6, #1]
   bafce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bafd2:	2b58      	cmp	r3, #88	; 0x58
   bafd4:	d168      	bne.n	bb0a8 <_strtod_l+0x130>
   bafd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bafd8:	9301      	str	r3, [sp, #4]
   bafda:	ab18      	add	r3, sp, #96	; 0x60
   bafdc:	9702      	str	r7, [sp, #8]
   bafde:	9300      	str	r3, [sp, #0]
   bafe0:	4a8d      	ldr	r2, [pc, #564]	; (bb218 <_strtod_l+0x2a0>)
   bafe2:	ab19      	add	r3, sp, #100	; 0x64
   bafe4:	a917      	add	r1, sp, #92	; 0x5c
   bafe6:	4620      	mov	r0, r4
   bafe8:	f000 ff2e 	bl	bbe48 <__gethex>
   bafec:	f010 0707 	ands.w	r7, r0, #7
   baff0:	4605      	mov	r5, r0
   baff2:	d005      	beq.n	bb000 <_strtod_l+0x88>
   baff4:	2f06      	cmp	r7, #6
   baff6:	d12c      	bne.n	bb052 <_strtod_l+0xda>
   baff8:	3601      	adds	r6, #1
   baffa:	2300      	movs	r3, #0
   baffc:	9617      	str	r6, [sp, #92]	; 0x5c
   baffe:	930a      	str	r3, [sp, #40]	; 0x28
   bb000:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb002:	2b00      	cmp	r3, #0
   bb004:	f040 8590 	bne.w	bbb28 <_strtod_l+0xbb0>
   bb008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bb00a:	b1eb      	cbz	r3, bb048 <_strtod_l+0xd0>
   bb00c:	4652      	mov	r2, sl
   bb00e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bb012:	ec43 2b10 	vmov	d0, r2, r3
   bb016:	b01d      	add	sp, #116	; 0x74
   bb018:	ecbd 8b02 	vpop	{d8}
   bb01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb020:	2a20      	cmp	r2, #32
   bb022:	d1cc      	bne.n	bafbe <_strtod_l+0x46>
   bb024:	3301      	adds	r3, #1
   bb026:	9317      	str	r3, [sp, #92]	; 0x5c
   bb028:	e7be      	b.n	bafa8 <_strtod_l+0x30>
   bb02a:	2a2d      	cmp	r2, #45	; 0x2d
   bb02c:	d1c7      	bne.n	bafbe <_strtod_l+0x46>
   bb02e:	2201      	movs	r2, #1
   bb030:	920a      	str	r2, [sp, #40]	; 0x28
   bb032:	1c5a      	adds	r2, r3, #1
   bb034:	9217      	str	r2, [sp, #92]	; 0x5c
   bb036:	785b      	ldrb	r3, [r3, #1]
   bb038:	2b00      	cmp	r3, #0
   bb03a:	d1c2      	bne.n	bafc2 <_strtod_l+0x4a>
   bb03c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb03e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb042:	2b00      	cmp	r3, #0
   bb044:	f040 856e 	bne.w	bbb24 <_strtod_l+0xbac>
   bb048:	4652      	mov	r2, sl
   bb04a:	465b      	mov	r3, fp
   bb04c:	e7e1      	b.n	bb012 <_strtod_l+0x9a>
   bb04e:	2200      	movs	r2, #0
   bb050:	e7ee      	b.n	bb030 <_strtod_l+0xb8>
   bb052:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bb054:	b13a      	cbz	r2, bb066 <_strtod_l+0xee>
   bb056:	2135      	movs	r1, #53	; 0x35
   bb058:	a81a      	add	r0, sp, #104	; 0x68
   bb05a:	f001 fe90 	bl	bcd7e <__copybits>
   bb05e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb060:	4620      	mov	r0, r4
   bb062:	f001 fa4f 	bl	bc504 <_Bfree>
   bb066:	3f01      	subs	r7, #1
   bb068:	2f04      	cmp	r7, #4
   bb06a:	d806      	bhi.n	bb07a <_strtod_l+0x102>
   bb06c:	e8df f007 	tbb	[pc, r7]
   bb070:	1714030a 	.word	0x1714030a
   bb074:	0a          	.byte	0x0a
   bb075:	00          	.byte	0x00
   bb076:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bb07a:	0728      	lsls	r0, r5, #28
   bb07c:	d5c0      	bpl.n	bb000 <_strtod_l+0x88>
   bb07e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bb082:	e7bd      	b.n	bb000 <_strtod_l+0x88>
   bb084:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bb088:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bb08a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bb08e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bb092:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bb096:	e7f0      	b.n	bb07a <_strtod_l+0x102>
   bb098:	f8df b180 	ldr.w	fp, [pc, #384]	; bb21c <_strtod_l+0x2a4>
   bb09c:	e7ed      	b.n	bb07a <_strtod_l+0x102>
   bb09e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bb0a2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bb0a6:	e7e8      	b.n	bb07a <_strtod_l+0x102>
   bb0a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb0aa:	1c5a      	adds	r2, r3, #1
   bb0ac:	9217      	str	r2, [sp, #92]	; 0x5c
   bb0ae:	785b      	ldrb	r3, [r3, #1]
   bb0b0:	2b30      	cmp	r3, #48	; 0x30
   bb0b2:	d0f9      	beq.n	bb0a8 <_strtod_l+0x130>
   bb0b4:	2b00      	cmp	r3, #0
   bb0b6:	d0a3      	beq.n	bb000 <_strtod_l+0x88>
   bb0b8:	2301      	movs	r3, #1
   bb0ba:	f04f 0900 	mov.w	r9, #0
   bb0be:	9304      	str	r3, [sp, #16]
   bb0c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb0c2:	9308      	str	r3, [sp, #32]
   bb0c4:	f8cd 901c 	str.w	r9, [sp, #28]
   bb0c8:	464f      	mov	r7, r9
   bb0ca:	220a      	movs	r2, #10
   bb0cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bb0ce:	7806      	ldrb	r6, [r0, #0]
   bb0d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bb0d4:	b2d9      	uxtb	r1, r3
   bb0d6:	2909      	cmp	r1, #9
   bb0d8:	d92a      	bls.n	bb130 <_strtod_l+0x1b8>
   bb0da:	9905      	ldr	r1, [sp, #20]
   bb0dc:	462a      	mov	r2, r5
   bb0de:	f7ff fef7 	bl	baed0 <strncmp>
   bb0e2:	b398      	cbz	r0, bb14c <_strtod_l+0x1d4>
   bb0e4:	2000      	movs	r0, #0
   bb0e6:	4632      	mov	r2, r6
   bb0e8:	463d      	mov	r5, r7
   bb0ea:	9005      	str	r0, [sp, #20]
   bb0ec:	4603      	mov	r3, r0
   bb0ee:	2a65      	cmp	r2, #101	; 0x65
   bb0f0:	d001      	beq.n	bb0f6 <_strtod_l+0x17e>
   bb0f2:	2a45      	cmp	r2, #69	; 0x45
   bb0f4:	d118      	bne.n	bb128 <_strtod_l+0x1b0>
   bb0f6:	b91d      	cbnz	r5, bb100 <_strtod_l+0x188>
   bb0f8:	9a04      	ldr	r2, [sp, #16]
   bb0fa:	4302      	orrs	r2, r0
   bb0fc:	d09e      	beq.n	bb03c <_strtod_l+0xc4>
   bb0fe:	2500      	movs	r5, #0
   bb100:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bb104:	f108 0201 	add.w	r2, r8, #1
   bb108:	9217      	str	r2, [sp, #92]	; 0x5c
   bb10a:	f898 2001 	ldrb.w	r2, [r8, #1]
   bb10e:	2a2b      	cmp	r2, #43	; 0x2b
   bb110:	d075      	beq.n	bb1fe <_strtod_l+0x286>
   bb112:	2a2d      	cmp	r2, #45	; 0x2d
   bb114:	d07b      	beq.n	bb20e <_strtod_l+0x296>
   bb116:	f04f 0c00 	mov.w	ip, #0
   bb11a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bb11e:	2909      	cmp	r1, #9
   bb120:	f240 8082 	bls.w	bb228 <_strtod_l+0x2b0>
   bb124:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb128:	2600      	movs	r6, #0
   bb12a:	e09d      	b.n	bb268 <_strtod_l+0x2f0>
   bb12c:	2300      	movs	r3, #0
   bb12e:	e7c4      	b.n	bb0ba <_strtod_l+0x142>
   bb130:	2f08      	cmp	r7, #8
   bb132:	bfd8      	it	le
   bb134:	9907      	ldrle	r1, [sp, #28]
   bb136:	f100 0001 	add.w	r0, r0, #1
   bb13a:	bfda      	itte	le
   bb13c:	fb02 3301 	mlale	r3, r2, r1, r3
   bb140:	9307      	strle	r3, [sp, #28]
   bb142:	fb02 3909 	mlagt	r9, r2, r9, r3
   bb146:	3701      	adds	r7, #1
   bb148:	9017      	str	r0, [sp, #92]	; 0x5c
   bb14a:	e7bf      	b.n	bb0cc <_strtod_l+0x154>
   bb14c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb14e:	195a      	adds	r2, r3, r5
   bb150:	9217      	str	r2, [sp, #92]	; 0x5c
   bb152:	5d5a      	ldrb	r2, [r3, r5]
   bb154:	2f00      	cmp	r7, #0
   bb156:	d037      	beq.n	bb1c8 <_strtod_l+0x250>
   bb158:	9005      	str	r0, [sp, #20]
   bb15a:	463d      	mov	r5, r7
   bb15c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bb160:	2b09      	cmp	r3, #9
   bb162:	d912      	bls.n	bb18a <_strtod_l+0x212>
   bb164:	2301      	movs	r3, #1
   bb166:	e7c2      	b.n	bb0ee <_strtod_l+0x176>
   bb168:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb16a:	1c5a      	adds	r2, r3, #1
   bb16c:	9217      	str	r2, [sp, #92]	; 0x5c
   bb16e:	785a      	ldrb	r2, [r3, #1]
   bb170:	3001      	adds	r0, #1
   bb172:	2a30      	cmp	r2, #48	; 0x30
   bb174:	d0f8      	beq.n	bb168 <_strtod_l+0x1f0>
   bb176:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bb17a:	2b08      	cmp	r3, #8
   bb17c:	f200 84d9 	bhi.w	bbb32 <_strtod_l+0xbba>
   bb180:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb182:	9005      	str	r0, [sp, #20]
   bb184:	2000      	movs	r0, #0
   bb186:	9308      	str	r3, [sp, #32]
   bb188:	4605      	mov	r5, r0
   bb18a:	3a30      	subs	r2, #48	; 0x30
   bb18c:	f100 0301 	add.w	r3, r0, #1
   bb190:	d014      	beq.n	bb1bc <_strtod_l+0x244>
   bb192:	9905      	ldr	r1, [sp, #20]
   bb194:	4419      	add	r1, r3
   bb196:	9105      	str	r1, [sp, #20]
   bb198:	462b      	mov	r3, r5
   bb19a:	eb00 0e05 	add.w	lr, r0, r5
   bb19e:	210a      	movs	r1, #10
   bb1a0:	4573      	cmp	r3, lr
   bb1a2:	d113      	bne.n	bb1cc <_strtod_l+0x254>
   bb1a4:	182b      	adds	r3, r5, r0
   bb1a6:	2b08      	cmp	r3, #8
   bb1a8:	f105 0501 	add.w	r5, r5, #1
   bb1ac:	4405      	add	r5, r0
   bb1ae:	dc1c      	bgt.n	bb1ea <_strtod_l+0x272>
   bb1b0:	9907      	ldr	r1, [sp, #28]
   bb1b2:	230a      	movs	r3, #10
   bb1b4:	fb03 2301 	mla	r3, r3, r1, r2
   bb1b8:	9307      	str	r3, [sp, #28]
   bb1ba:	2300      	movs	r3, #0
   bb1bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb1be:	1c51      	adds	r1, r2, #1
   bb1c0:	9117      	str	r1, [sp, #92]	; 0x5c
   bb1c2:	7852      	ldrb	r2, [r2, #1]
   bb1c4:	4618      	mov	r0, r3
   bb1c6:	e7c9      	b.n	bb15c <_strtod_l+0x1e4>
   bb1c8:	4638      	mov	r0, r7
   bb1ca:	e7d2      	b.n	bb172 <_strtod_l+0x1fa>
   bb1cc:	2b08      	cmp	r3, #8
   bb1ce:	dc04      	bgt.n	bb1da <_strtod_l+0x262>
   bb1d0:	9e07      	ldr	r6, [sp, #28]
   bb1d2:	434e      	muls	r6, r1
   bb1d4:	9607      	str	r6, [sp, #28]
   bb1d6:	3301      	adds	r3, #1
   bb1d8:	e7e2      	b.n	bb1a0 <_strtod_l+0x228>
   bb1da:	f103 0c01 	add.w	ip, r3, #1
   bb1de:	f1bc 0f10 	cmp.w	ip, #16
   bb1e2:	bfd8      	it	le
   bb1e4:	fb01 f909 	mulle.w	r9, r1, r9
   bb1e8:	e7f5      	b.n	bb1d6 <_strtod_l+0x25e>
   bb1ea:	2d10      	cmp	r5, #16
   bb1ec:	bfdc      	itt	le
   bb1ee:	230a      	movle	r3, #10
   bb1f0:	fb03 2909 	mlale	r9, r3, r9, r2
   bb1f4:	e7e1      	b.n	bb1ba <_strtod_l+0x242>
   bb1f6:	2300      	movs	r3, #0
   bb1f8:	9305      	str	r3, [sp, #20]
   bb1fa:	2301      	movs	r3, #1
   bb1fc:	e77c      	b.n	bb0f8 <_strtod_l+0x180>
   bb1fe:	f04f 0c00 	mov.w	ip, #0
   bb202:	f108 0202 	add.w	r2, r8, #2
   bb206:	9217      	str	r2, [sp, #92]	; 0x5c
   bb208:	f898 2002 	ldrb.w	r2, [r8, #2]
   bb20c:	e785      	b.n	bb11a <_strtod_l+0x1a2>
   bb20e:	f04f 0c01 	mov.w	ip, #1
   bb212:	e7f6      	b.n	bb202 <_strtod_l+0x28a>
   bb214:	000bda84 	.word	0x000bda84
   bb218:	000bd8bc 	.word	0x000bd8bc
   bb21c:	7ff00000 	.word	0x7ff00000
   bb220:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb222:	1c51      	adds	r1, r2, #1
   bb224:	9117      	str	r1, [sp, #92]	; 0x5c
   bb226:	7852      	ldrb	r2, [r2, #1]
   bb228:	2a30      	cmp	r2, #48	; 0x30
   bb22a:	d0f9      	beq.n	bb220 <_strtod_l+0x2a8>
   bb22c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bb230:	2908      	cmp	r1, #8
   bb232:	f63f af79 	bhi.w	bb128 <_strtod_l+0x1b0>
   bb236:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bb23a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb23c:	9206      	str	r2, [sp, #24]
   bb23e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb240:	1c51      	adds	r1, r2, #1
   bb242:	9117      	str	r1, [sp, #92]	; 0x5c
   bb244:	7852      	ldrb	r2, [r2, #1]
   bb246:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bb24a:	2e09      	cmp	r6, #9
   bb24c:	d937      	bls.n	bb2be <_strtod_l+0x346>
   bb24e:	9e06      	ldr	r6, [sp, #24]
   bb250:	1b89      	subs	r1, r1, r6
   bb252:	2908      	cmp	r1, #8
   bb254:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bb258:	dc02      	bgt.n	bb260 <_strtod_l+0x2e8>
   bb25a:	4576      	cmp	r6, lr
   bb25c:	bfa8      	it	ge
   bb25e:	4676      	movge	r6, lr
   bb260:	f1bc 0f00 	cmp.w	ip, #0
   bb264:	d000      	beq.n	bb268 <_strtod_l+0x2f0>
   bb266:	4276      	negs	r6, r6
   bb268:	2d00      	cmp	r5, #0
   bb26a:	d14d      	bne.n	bb308 <_strtod_l+0x390>
   bb26c:	9904      	ldr	r1, [sp, #16]
   bb26e:	4301      	orrs	r1, r0
   bb270:	f47f aec6 	bne.w	bb000 <_strtod_l+0x88>
   bb274:	2b00      	cmp	r3, #0
   bb276:	f47f aee1 	bne.w	bb03c <_strtod_l+0xc4>
   bb27a:	2a69      	cmp	r2, #105	; 0x69
   bb27c:	d027      	beq.n	bb2ce <_strtod_l+0x356>
   bb27e:	dc24      	bgt.n	bb2ca <_strtod_l+0x352>
   bb280:	2a49      	cmp	r2, #73	; 0x49
   bb282:	d024      	beq.n	bb2ce <_strtod_l+0x356>
   bb284:	2a4e      	cmp	r2, #78	; 0x4e
   bb286:	f47f aed9 	bne.w	bb03c <_strtod_l+0xc4>
   bb28a:	499f      	ldr	r1, [pc, #636]	; (bb508 <_strtod_l+0x590>)
   bb28c:	a817      	add	r0, sp, #92	; 0x5c
   bb28e:	f001 f833 	bl	bc2f8 <__match>
   bb292:	2800      	cmp	r0, #0
   bb294:	f43f aed2 	beq.w	bb03c <_strtod_l+0xc4>
   bb298:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb29a:	781b      	ldrb	r3, [r3, #0]
   bb29c:	2b28      	cmp	r3, #40	; 0x28
   bb29e:	d12d      	bne.n	bb2fc <_strtod_l+0x384>
   bb2a0:	499a      	ldr	r1, [pc, #616]	; (bb50c <_strtod_l+0x594>)
   bb2a2:	aa1a      	add	r2, sp, #104	; 0x68
   bb2a4:	a817      	add	r0, sp, #92	; 0x5c
   bb2a6:	f001 f83b 	bl	bc320 <__hexnan>
   bb2aa:	2805      	cmp	r0, #5
   bb2ac:	d126      	bne.n	bb2fc <_strtod_l+0x384>
   bb2ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bb2b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bb2b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bb2b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bb2bc:	e6a0      	b.n	bb000 <_strtod_l+0x88>
   bb2be:	210a      	movs	r1, #10
   bb2c0:	fb01 2e0e 	mla	lr, r1, lr, r2
   bb2c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bb2c8:	e7b9      	b.n	bb23e <_strtod_l+0x2c6>
   bb2ca:	2a6e      	cmp	r2, #110	; 0x6e
   bb2cc:	e7db      	b.n	bb286 <_strtod_l+0x30e>
   bb2ce:	4990      	ldr	r1, [pc, #576]	; (bb510 <_strtod_l+0x598>)
   bb2d0:	a817      	add	r0, sp, #92	; 0x5c
   bb2d2:	f001 f811 	bl	bc2f8 <__match>
   bb2d6:	2800      	cmp	r0, #0
   bb2d8:	f43f aeb0 	beq.w	bb03c <_strtod_l+0xc4>
   bb2dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb2de:	498d      	ldr	r1, [pc, #564]	; (bb514 <_strtod_l+0x59c>)
   bb2e0:	3b01      	subs	r3, #1
   bb2e2:	a817      	add	r0, sp, #92	; 0x5c
   bb2e4:	9317      	str	r3, [sp, #92]	; 0x5c
   bb2e6:	f001 f807 	bl	bc2f8 <__match>
   bb2ea:	b910      	cbnz	r0, bb2f2 <_strtod_l+0x37a>
   bb2ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb2ee:	3301      	adds	r3, #1
   bb2f0:	9317      	str	r3, [sp, #92]	; 0x5c
   bb2f2:	f8df b230 	ldr.w	fp, [pc, #560]	; bb524 <_strtod_l+0x5ac>
   bb2f6:	f04f 0a00 	mov.w	sl, #0
   bb2fa:	e681      	b.n	bb000 <_strtod_l+0x88>
   bb2fc:	4886      	ldr	r0, [pc, #536]	; (bb518 <_strtod_l+0x5a0>)
   bb2fe:	f001 fd93 	bl	bce28 <nan>
   bb302:	ec5b ab10 	vmov	sl, fp, d0
   bb306:	e67b      	b.n	bb000 <_strtod_l+0x88>
   bb308:	9b05      	ldr	r3, [sp, #20]
   bb30a:	9807      	ldr	r0, [sp, #28]
   bb30c:	1af3      	subs	r3, r6, r3
   bb30e:	2f00      	cmp	r7, #0
   bb310:	bf08      	it	eq
   bb312:	462f      	moveq	r7, r5
   bb314:	2d10      	cmp	r5, #16
   bb316:	9306      	str	r3, [sp, #24]
   bb318:	46a8      	mov	r8, r5
   bb31a:	bfa8      	it	ge
   bb31c:	f04f 0810 	movge.w	r8, #16
   bb320:	f7ff f984 	bl	ba62c <__aeabi_ui2d>
   bb324:	2d09      	cmp	r5, #9
   bb326:	4682      	mov	sl, r0
   bb328:	468b      	mov	fp, r1
   bb32a:	dd13      	ble.n	bb354 <_strtod_l+0x3dc>
   bb32c:	4b7b      	ldr	r3, [pc, #492]	; (bb51c <_strtod_l+0x5a4>)
   bb32e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bb332:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bb336:	f7ff f9f3 	bl	ba720 <__aeabi_dmul>
   bb33a:	4682      	mov	sl, r0
   bb33c:	4648      	mov	r0, r9
   bb33e:	468b      	mov	fp, r1
   bb340:	f7ff f974 	bl	ba62c <__aeabi_ui2d>
   bb344:	4602      	mov	r2, r0
   bb346:	460b      	mov	r3, r1
   bb348:	4650      	mov	r0, sl
   bb34a:	4659      	mov	r1, fp
   bb34c:	f7ff f832 	bl	ba3b4 <__adddf3>
   bb350:	4682      	mov	sl, r0
   bb352:	468b      	mov	fp, r1
   bb354:	2d0f      	cmp	r5, #15
   bb356:	dc38      	bgt.n	bb3ca <_strtod_l+0x452>
   bb358:	9b06      	ldr	r3, [sp, #24]
   bb35a:	2b00      	cmp	r3, #0
   bb35c:	f43f ae50 	beq.w	bb000 <_strtod_l+0x88>
   bb360:	dd24      	ble.n	bb3ac <_strtod_l+0x434>
   bb362:	2b16      	cmp	r3, #22
   bb364:	dc0b      	bgt.n	bb37e <_strtod_l+0x406>
   bb366:	496d      	ldr	r1, [pc, #436]	; (bb51c <_strtod_l+0x5a4>)
   bb368:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bb36c:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb370:	4652      	mov	r2, sl
   bb372:	465b      	mov	r3, fp
   bb374:	f7ff f9d4 	bl	ba720 <__aeabi_dmul>
   bb378:	4682      	mov	sl, r0
   bb37a:	468b      	mov	fp, r1
   bb37c:	e640      	b.n	bb000 <_strtod_l+0x88>
   bb37e:	9a06      	ldr	r2, [sp, #24]
   bb380:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bb384:	4293      	cmp	r3, r2
   bb386:	db20      	blt.n	bb3ca <_strtod_l+0x452>
   bb388:	4c64      	ldr	r4, [pc, #400]	; (bb51c <_strtod_l+0x5a4>)
   bb38a:	f1c5 050f 	rsb	r5, r5, #15
   bb38e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bb392:	4652      	mov	r2, sl
   bb394:	465b      	mov	r3, fp
   bb396:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb39a:	f7ff f9c1 	bl	ba720 <__aeabi_dmul>
   bb39e:	9b06      	ldr	r3, [sp, #24]
   bb3a0:	1b5d      	subs	r5, r3, r5
   bb3a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bb3a6:	e9d4 2300 	ldrd	r2, r3, [r4]
   bb3aa:	e7e3      	b.n	bb374 <_strtod_l+0x3fc>
   bb3ac:	9b06      	ldr	r3, [sp, #24]
   bb3ae:	3316      	adds	r3, #22
   bb3b0:	db0b      	blt.n	bb3ca <_strtod_l+0x452>
   bb3b2:	9b05      	ldr	r3, [sp, #20]
   bb3b4:	1b9e      	subs	r6, r3, r6
   bb3b6:	4b59      	ldr	r3, [pc, #356]	; (bb51c <_strtod_l+0x5a4>)
   bb3b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bb3bc:	e9d6 2300 	ldrd	r2, r3, [r6]
   bb3c0:	4650      	mov	r0, sl
   bb3c2:	4659      	mov	r1, fp
   bb3c4:	f7ff fad6 	bl	ba974 <__aeabi_ddiv>
   bb3c8:	e7d6      	b.n	bb378 <_strtod_l+0x400>
   bb3ca:	9b06      	ldr	r3, [sp, #24]
   bb3cc:	eba5 0808 	sub.w	r8, r5, r8
   bb3d0:	4498      	add	r8, r3
   bb3d2:	f1b8 0f00 	cmp.w	r8, #0
   bb3d6:	dd74      	ble.n	bb4c2 <_strtod_l+0x54a>
   bb3d8:	f018 030f 	ands.w	r3, r8, #15
   bb3dc:	d00a      	beq.n	bb3f4 <_strtod_l+0x47c>
   bb3de:	494f      	ldr	r1, [pc, #316]	; (bb51c <_strtod_l+0x5a4>)
   bb3e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bb3e4:	4652      	mov	r2, sl
   bb3e6:	465b      	mov	r3, fp
   bb3e8:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb3ec:	f7ff f998 	bl	ba720 <__aeabi_dmul>
   bb3f0:	4682      	mov	sl, r0
   bb3f2:	468b      	mov	fp, r1
   bb3f4:	f038 080f 	bics.w	r8, r8, #15
   bb3f8:	d04f      	beq.n	bb49a <_strtod_l+0x522>
   bb3fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bb3fe:	dd22      	ble.n	bb446 <_strtod_l+0x4ce>
   bb400:	2500      	movs	r5, #0
   bb402:	462e      	mov	r6, r5
   bb404:	9507      	str	r5, [sp, #28]
   bb406:	9505      	str	r5, [sp, #20]
   bb408:	2322      	movs	r3, #34	; 0x22
   bb40a:	f8df b118 	ldr.w	fp, [pc, #280]	; bb524 <_strtod_l+0x5ac>
   bb40e:	6023      	str	r3, [r4, #0]
   bb410:	f04f 0a00 	mov.w	sl, #0
   bb414:	9b07      	ldr	r3, [sp, #28]
   bb416:	2b00      	cmp	r3, #0
   bb418:	f43f adf2 	beq.w	bb000 <_strtod_l+0x88>
   bb41c:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb41e:	4620      	mov	r0, r4
   bb420:	f001 f870 	bl	bc504 <_Bfree>
   bb424:	9905      	ldr	r1, [sp, #20]
   bb426:	4620      	mov	r0, r4
   bb428:	f001 f86c 	bl	bc504 <_Bfree>
   bb42c:	4631      	mov	r1, r6
   bb42e:	4620      	mov	r0, r4
   bb430:	f001 f868 	bl	bc504 <_Bfree>
   bb434:	9907      	ldr	r1, [sp, #28]
   bb436:	4620      	mov	r0, r4
   bb438:	f001 f864 	bl	bc504 <_Bfree>
   bb43c:	4629      	mov	r1, r5
   bb43e:	4620      	mov	r0, r4
   bb440:	f001 f860 	bl	bc504 <_Bfree>
   bb444:	e5dc      	b.n	bb000 <_strtod_l+0x88>
   bb446:	4b36      	ldr	r3, [pc, #216]	; (bb520 <_strtod_l+0x5a8>)
   bb448:	9304      	str	r3, [sp, #16]
   bb44a:	2300      	movs	r3, #0
   bb44c:	ea4f 1828 	mov.w	r8, r8, asr #4
   bb450:	4650      	mov	r0, sl
   bb452:	4659      	mov	r1, fp
   bb454:	4699      	mov	r9, r3
   bb456:	f1b8 0f01 	cmp.w	r8, #1
   bb45a:	dc21      	bgt.n	bb4a0 <_strtod_l+0x528>
   bb45c:	b10b      	cbz	r3, bb462 <_strtod_l+0x4ea>
   bb45e:	4682      	mov	sl, r0
   bb460:	468b      	mov	fp, r1
   bb462:	4b2f      	ldr	r3, [pc, #188]	; (bb520 <_strtod_l+0x5a8>)
   bb464:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bb468:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bb46c:	4652      	mov	r2, sl
   bb46e:	465b      	mov	r3, fp
   bb470:	e9d9 0100 	ldrd	r0, r1, [r9]
   bb474:	f7ff f954 	bl	ba720 <__aeabi_dmul>
   bb478:	4b2a      	ldr	r3, [pc, #168]	; (bb524 <_strtod_l+0x5ac>)
   bb47a:	460a      	mov	r2, r1
   bb47c:	400b      	ands	r3, r1
   bb47e:	492a      	ldr	r1, [pc, #168]	; (bb528 <_strtod_l+0x5b0>)
   bb480:	428b      	cmp	r3, r1
   bb482:	4682      	mov	sl, r0
   bb484:	d8bc      	bhi.n	bb400 <_strtod_l+0x488>
   bb486:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bb48a:	428b      	cmp	r3, r1
   bb48c:	bf86      	itte	hi
   bb48e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bb52c <_strtod_l+0x5b4>
   bb492:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   bb496:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bb49a:	2300      	movs	r3, #0
   bb49c:	9304      	str	r3, [sp, #16]
   bb49e:	e084      	b.n	bb5aa <_strtod_l+0x632>
   bb4a0:	f018 0f01 	tst.w	r8, #1
   bb4a4:	d005      	beq.n	bb4b2 <_strtod_l+0x53a>
   bb4a6:	9b04      	ldr	r3, [sp, #16]
   bb4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb4ac:	f7ff f938 	bl	ba720 <__aeabi_dmul>
   bb4b0:	2301      	movs	r3, #1
   bb4b2:	9a04      	ldr	r2, [sp, #16]
   bb4b4:	3208      	adds	r2, #8
   bb4b6:	f109 0901 	add.w	r9, r9, #1
   bb4ba:	ea4f 0868 	mov.w	r8, r8, asr #1
   bb4be:	9204      	str	r2, [sp, #16]
   bb4c0:	e7c9      	b.n	bb456 <_strtod_l+0x4de>
   bb4c2:	d0ea      	beq.n	bb49a <_strtod_l+0x522>
   bb4c4:	f1c8 0800 	rsb	r8, r8, #0
   bb4c8:	f018 020f 	ands.w	r2, r8, #15
   bb4cc:	d00a      	beq.n	bb4e4 <_strtod_l+0x56c>
   bb4ce:	4b13      	ldr	r3, [pc, #76]	; (bb51c <_strtod_l+0x5a4>)
   bb4d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bb4d4:	4650      	mov	r0, sl
   bb4d6:	4659      	mov	r1, fp
   bb4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb4dc:	f7ff fa4a 	bl	ba974 <__aeabi_ddiv>
   bb4e0:	4682      	mov	sl, r0
   bb4e2:	468b      	mov	fp, r1
   bb4e4:	ea5f 1828 	movs.w	r8, r8, asr #4
   bb4e8:	d0d7      	beq.n	bb49a <_strtod_l+0x522>
   bb4ea:	f1b8 0f1f 	cmp.w	r8, #31
   bb4ee:	dd1f      	ble.n	bb530 <_strtod_l+0x5b8>
   bb4f0:	2500      	movs	r5, #0
   bb4f2:	462e      	mov	r6, r5
   bb4f4:	9507      	str	r5, [sp, #28]
   bb4f6:	9505      	str	r5, [sp, #20]
   bb4f8:	2322      	movs	r3, #34	; 0x22
   bb4fa:	f04f 0a00 	mov.w	sl, #0
   bb4fe:	f04f 0b00 	mov.w	fp, #0
   bb502:	6023      	str	r3, [r4, #0]
   bb504:	e786      	b.n	bb414 <_strtod_l+0x49c>
   bb506:	bf00      	nop
   bb508:	000bd8b6 	.word	0x000bd8b6
   bb50c:	000bd8d0 	.word	0x000bd8d0
   bb510:	000bd8ad 	.word	0x000bd8ad
   bb514:	000bd8b0 	.word	0x000bd8b0
   bb518:	000bd32a 	.word	0x000bd32a
   bb51c:	000bdb20 	.word	0x000bdb20
   bb520:	000bdaf8 	.word	0x000bdaf8
   bb524:	7ff00000 	.word	0x7ff00000
   bb528:	7ca00000 	.word	0x7ca00000
   bb52c:	7fefffff 	.word	0x7fefffff
   bb530:	f018 0310 	ands.w	r3, r8, #16
   bb534:	bf18      	it	ne
   bb536:	236a      	movne	r3, #106	; 0x6a
   bb538:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bb8e8 <_strtod_l+0x970>
   bb53c:	9304      	str	r3, [sp, #16]
   bb53e:	4650      	mov	r0, sl
   bb540:	4659      	mov	r1, fp
   bb542:	2300      	movs	r3, #0
   bb544:	f018 0f01 	tst.w	r8, #1
   bb548:	d004      	beq.n	bb554 <_strtod_l+0x5dc>
   bb54a:	e9d9 2300 	ldrd	r2, r3, [r9]
   bb54e:	f7ff f8e7 	bl	ba720 <__aeabi_dmul>
   bb552:	2301      	movs	r3, #1
   bb554:	ea5f 0868 	movs.w	r8, r8, asr #1
   bb558:	f109 0908 	add.w	r9, r9, #8
   bb55c:	d1f2      	bne.n	bb544 <_strtod_l+0x5cc>
   bb55e:	b10b      	cbz	r3, bb564 <_strtod_l+0x5ec>
   bb560:	4682      	mov	sl, r0
   bb562:	468b      	mov	fp, r1
   bb564:	9b04      	ldr	r3, [sp, #16]
   bb566:	b1c3      	cbz	r3, bb59a <_strtod_l+0x622>
   bb568:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bb56c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bb570:	2b00      	cmp	r3, #0
   bb572:	4659      	mov	r1, fp
   bb574:	dd11      	ble.n	bb59a <_strtod_l+0x622>
   bb576:	2b1f      	cmp	r3, #31
   bb578:	f340 8124 	ble.w	bb7c4 <_strtod_l+0x84c>
   bb57c:	2b34      	cmp	r3, #52	; 0x34
   bb57e:	bfde      	ittt	le
   bb580:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bb584:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   bb588:	fa03 f202 	lslle.w	r2, r3, r2
   bb58c:	f04f 0a00 	mov.w	sl, #0
   bb590:	bfcc      	ite	gt
   bb592:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bb596:	ea02 0b01 	andle.w	fp, r2, r1
   bb59a:	2200      	movs	r2, #0
   bb59c:	2300      	movs	r3, #0
   bb59e:	4650      	mov	r0, sl
   bb5a0:	4659      	mov	r1, fp
   bb5a2:	f7ff fb25 	bl	babf0 <__aeabi_dcmpeq>
   bb5a6:	2800      	cmp	r0, #0
   bb5a8:	d1a2      	bne.n	bb4f0 <_strtod_l+0x578>
   bb5aa:	9b07      	ldr	r3, [sp, #28]
   bb5ac:	9300      	str	r3, [sp, #0]
   bb5ae:	9908      	ldr	r1, [sp, #32]
   bb5b0:	462b      	mov	r3, r5
   bb5b2:	463a      	mov	r2, r7
   bb5b4:	4620      	mov	r0, r4
   bb5b6:	f001 f80d 	bl	bc5d4 <__s2b>
   bb5ba:	9007      	str	r0, [sp, #28]
   bb5bc:	2800      	cmp	r0, #0
   bb5be:	f43f af1f 	beq.w	bb400 <_strtod_l+0x488>
   bb5c2:	9b05      	ldr	r3, [sp, #20]
   bb5c4:	1b9e      	subs	r6, r3, r6
   bb5c6:	9b06      	ldr	r3, [sp, #24]
   bb5c8:	2b00      	cmp	r3, #0
   bb5ca:	bfb4      	ite	lt
   bb5cc:	4633      	movlt	r3, r6
   bb5ce:	2300      	movge	r3, #0
   bb5d0:	930c      	str	r3, [sp, #48]	; 0x30
   bb5d2:	9b06      	ldr	r3, [sp, #24]
   bb5d4:	2500      	movs	r5, #0
   bb5d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bb5da:	9312      	str	r3, [sp, #72]	; 0x48
   bb5dc:	462e      	mov	r6, r5
   bb5de:	9b07      	ldr	r3, [sp, #28]
   bb5e0:	4620      	mov	r0, r4
   bb5e2:	6859      	ldr	r1, [r3, #4]
   bb5e4:	f000 ff4e 	bl	bc484 <_Balloc>
   bb5e8:	9005      	str	r0, [sp, #20]
   bb5ea:	2800      	cmp	r0, #0
   bb5ec:	f43f af0c 	beq.w	bb408 <_strtod_l+0x490>
   bb5f0:	9b07      	ldr	r3, [sp, #28]
   bb5f2:	691a      	ldr	r2, [r3, #16]
   bb5f4:	3202      	adds	r2, #2
   bb5f6:	f103 010c 	add.w	r1, r3, #12
   bb5fa:	0092      	lsls	r2, r2, #2
   bb5fc:	300c      	adds	r0, #12
   bb5fe:	f7ff fbee 	bl	badde <memcpy>
   bb602:	ec4b ab10 	vmov	d0, sl, fp
   bb606:	aa1a      	add	r2, sp, #104	; 0x68
   bb608:	a919      	add	r1, sp, #100	; 0x64
   bb60a:	4620      	mov	r0, r4
   bb60c:	f001 fb28 	bl	bcc60 <__d2b>
   bb610:	ec4b ab18 	vmov	d8, sl, fp
   bb614:	9018      	str	r0, [sp, #96]	; 0x60
   bb616:	2800      	cmp	r0, #0
   bb618:	f43f aef6 	beq.w	bb408 <_strtod_l+0x490>
   bb61c:	2101      	movs	r1, #1
   bb61e:	4620      	mov	r0, r4
   bb620:	f001 f872 	bl	bc708 <__i2b>
   bb624:	4606      	mov	r6, r0
   bb626:	2800      	cmp	r0, #0
   bb628:	f43f aeee 	beq.w	bb408 <_strtod_l+0x490>
   bb62c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bb62e:	9904      	ldr	r1, [sp, #16]
   bb630:	2b00      	cmp	r3, #0
   bb632:	bfab      	itete	ge
   bb634:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bb636:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bb638:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bb63a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bb63e:	bfac      	ite	ge
   bb640:	eb03 0902 	addge.w	r9, r3, r2
   bb644:	1ad7      	sublt	r7, r2, r3
   bb646:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bb648:	eba3 0801 	sub.w	r8, r3, r1
   bb64c:	4490      	add	r8, r2
   bb64e:	4ba1      	ldr	r3, [pc, #644]	; (bb8d4 <_strtod_l+0x95c>)
   bb650:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bb654:	4598      	cmp	r8, r3
   bb656:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bb65a:	f280 80c7 	bge.w	bb7ec <_strtod_l+0x874>
   bb65e:	eba3 0308 	sub.w	r3, r3, r8
   bb662:	2b1f      	cmp	r3, #31
   bb664:	eba2 0203 	sub.w	r2, r2, r3
   bb668:	f04f 0101 	mov.w	r1, #1
   bb66c:	f300 80b1 	bgt.w	bb7d2 <_strtod_l+0x85a>
   bb670:	fa01 f303 	lsl.w	r3, r1, r3
   bb674:	930d      	str	r3, [sp, #52]	; 0x34
   bb676:	2300      	movs	r3, #0
   bb678:	9308      	str	r3, [sp, #32]
   bb67a:	eb09 0802 	add.w	r8, r9, r2
   bb67e:	9b04      	ldr	r3, [sp, #16]
   bb680:	45c1      	cmp	r9, r8
   bb682:	4417      	add	r7, r2
   bb684:	441f      	add	r7, r3
   bb686:	464b      	mov	r3, r9
   bb688:	bfa8      	it	ge
   bb68a:	4643      	movge	r3, r8
   bb68c:	42bb      	cmp	r3, r7
   bb68e:	bfa8      	it	ge
   bb690:	463b      	movge	r3, r7
   bb692:	2b00      	cmp	r3, #0
   bb694:	bfc2      	ittt	gt
   bb696:	eba8 0803 	subgt.w	r8, r8, r3
   bb69a:	1aff      	subgt	r7, r7, r3
   bb69c:	eba9 0903 	subgt.w	r9, r9, r3
   bb6a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bb6a2:	2b00      	cmp	r3, #0
   bb6a4:	dd17      	ble.n	bb6d6 <_strtod_l+0x75e>
   bb6a6:	4631      	mov	r1, r6
   bb6a8:	461a      	mov	r2, r3
   bb6aa:	4620      	mov	r0, r4
   bb6ac:	f001 f8ec 	bl	bc888 <__pow5mult>
   bb6b0:	4606      	mov	r6, r0
   bb6b2:	2800      	cmp	r0, #0
   bb6b4:	f43f aea8 	beq.w	bb408 <_strtod_l+0x490>
   bb6b8:	4601      	mov	r1, r0
   bb6ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bb6bc:	4620      	mov	r0, r4
   bb6be:	f001 f839 	bl	bc734 <__multiply>
   bb6c2:	900b      	str	r0, [sp, #44]	; 0x2c
   bb6c4:	2800      	cmp	r0, #0
   bb6c6:	f43f ae9f 	beq.w	bb408 <_strtod_l+0x490>
   bb6ca:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb6cc:	4620      	mov	r0, r4
   bb6ce:	f000 ff19 	bl	bc504 <_Bfree>
   bb6d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb6d4:	9318      	str	r3, [sp, #96]	; 0x60
   bb6d6:	f1b8 0f00 	cmp.w	r8, #0
   bb6da:	f300 808c 	bgt.w	bb7f6 <_strtod_l+0x87e>
   bb6de:	9b06      	ldr	r3, [sp, #24]
   bb6e0:	2b00      	cmp	r3, #0
   bb6e2:	dd08      	ble.n	bb6f6 <_strtod_l+0x77e>
   bb6e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bb6e6:	9905      	ldr	r1, [sp, #20]
   bb6e8:	4620      	mov	r0, r4
   bb6ea:	f001 f8cd 	bl	bc888 <__pow5mult>
   bb6ee:	9005      	str	r0, [sp, #20]
   bb6f0:	2800      	cmp	r0, #0
   bb6f2:	f43f ae89 	beq.w	bb408 <_strtod_l+0x490>
   bb6f6:	2f00      	cmp	r7, #0
   bb6f8:	dd08      	ble.n	bb70c <_strtod_l+0x794>
   bb6fa:	9905      	ldr	r1, [sp, #20]
   bb6fc:	463a      	mov	r2, r7
   bb6fe:	4620      	mov	r0, r4
   bb700:	f001 f91c 	bl	bc93c <__lshift>
   bb704:	9005      	str	r0, [sp, #20]
   bb706:	2800      	cmp	r0, #0
   bb708:	f43f ae7e 	beq.w	bb408 <_strtod_l+0x490>
   bb70c:	f1b9 0f00 	cmp.w	r9, #0
   bb710:	dd08      	ble.n	bb724 <_strtod_l+0x7ac>
   bb712:	4631      	mov	r1, r6
   bb714:	464a      	mov	r2, r9
   bb716:	4620      	mov	r0, r4
   bb718:	f001 f910 	bl	bc93c <__lshift>
   bb71c:	4606      	mov	r6, r0
   bb71e:	2800      	cmp	r0, #0
   bb720:	f43f ae72 	beq.w	bb408 <_strtod_l+0x490>
   bb724:	9a05      	ldr	r2, [sp, #20]
   bb726:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb728:	4620      	mov	r0, r4
   bb72a:	f001 f993 	bl	bca54 <__mdiff>
   bb72e:	4605      	mov	r5, r0
   bb730:	2800      	cmp	r0, #0
   bb732:	f43f ae69 	beq.w	bb408 <_strtod_l+0x490>
   bb736:	68c3      	ldr	r3, [r0, #12]
   bb738:	930b      	str	r3, [sp, #44]	; 0x2c
   bb73a:	2300      	movs	r3, #0
   bb73c:	60c3      	str	r3, [r0, #12]
   bb73e:	4631      	mov	r1, r6
   bb740:	f001 f96c 	bl	bca1c <__mcmp>
   bb744:	2800      	cmp	r0, #0
   bb746:	da60      	bge.n	bb80a <_strtod_l+0x892>
   bb748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb74a:	ea53 030a 	orrs.w	r3, r3, sl
   bb74e:	f040 8082 	bne.w	bb856 <_strtod_l+0x8de>
   bb752:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb756:	2b00      	cmp	r3, #0
   bb758:	d17d      	bne.n	bb856 <_strtod_l+0x8de>
   bb75a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bb75e:	0d1b      	lsrs	r3, r3, #20
   bb760:	051b      	lsls	r3, r3, #20
   bb762:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bb766:	d976      	bls.n	bb856 <_strtod_l+0x8de>
   bb768:	696b      	ldr	r3, [r5, #20]
   bb76a:	b913      	cbnz	r3, bb772 <_strtod_l+0x7fa>
   bb76c:	692b      	ldr	r3, [r5, #16]
   bb76e:	2b01      	cmp	r3, #1
   bb770:	dd71      	ble.n	bb856 <_strtod_l+0x8de>
   bb772:	4629      	mov	r1, r5
   bb774:	2201      	movs	r2, #1
   bb776:	4620      	mov	r0, r4
   bb778:	f001 f8e0 	bl	bc93c <__lshift>
   bb77c:	4631      	mov	r1, r6
   bb77e:	4605      	mov	r5, r0
   bb780:	f001 f94c 	bl	bca1c <__mcmp>
   bb784:	2800      	cmp	r0, #0
   bb786:	dd66      	ble.n	bb856 <_strtod_l+0x8de>
   bb788:	9904      	ldr	r1, [sp, #16]
   bb78a:	4a53      	ldr	r2, [pc, #332]	; (bb8d8 <_strtod_l+0x960>)
   bb78c:	465b      	mov	r3, fp
   bb78e:	2900      	cmp	r1, #0
   bb790:	f000 8081 	beq.w	bb896 <_strtod_l+0x91e>
   bb794:	ea02 010b 	and.w	r1, r2, fp
   bb798:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bb79c:	dc7b      	bgt.n	bb896 <_strtod_l+0x91e>
   bb79e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bb7a2:	f77f aea9 	ble.w	bb4f8 <_strtod_l+0x580>
   bb7a6:	4b4d      	ldr	r3, [pc, #308]	; (bb8dc <_strtod_l+0x964>)
   bb7a8:	4650      	mov	r0, sl
   bb7aa:	4659      	mov	r1, fp
   bb7ac:	2200      	movs	r2, #0
   bb7ae:	f7fe ffb7 	bl	ba720 <__aeabi_dmul>
   bb7b2:	460b      	mov	r3, r1
   bb7b4:	4303      	orrs	r3, r0
   bb7b6:	bf08      	it	eq
   bb7b8:	2322      	moveq	r3, #34	; 0x22
   bb7ba:	4682      	mov	sl, r0
   bb7bc:	468b      	mov	fp, r1
   bb7be:	bf08      	it	eq
   bb7c0:	6023      	streq	r3, [r4, #0]
   bb7c2:	e62b      	b.n	bb41c <_strtod_l+0x4a4>
   bb7c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb7c8:	fa02 f303 	lsl.w	r3, r2, r3
   bb7cc:	ea03 0a0a 	and.w	sl, r3, sl
   bb7d0:	e6e3      	b.n	bb59a <_strtod_l+0x622>
   bb7d2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bb7d6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bb7da:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bb7de:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bb7e2:	fa01 f308 	lsl.w	r3, r1, r8
   bb7e6:	9308      	str	r3, [sp, #32]
   bb7e8:	910d      	str	r1, [sp, #52]	; 0x34
   bb7ea:	e746      	b.n	bb67a <_strtod_l+0x702>
   bb7ec:	2300      	movs	r3, #0
   bb7ee:	9308      	str	r3, [sp, #32]
   bb7f0:	2301      	movs	r3, #1
   bb7f2:	930d      	str	r3, [sp, #52]	; 0x34
   bb7f4:	e741      	b.n	bb67a <_strtod_l+0x702>
   bb7f6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb7f8:	4642      	mov	r2, r8
   bb7fa:	4620      	mov	r0, r4
   bb7fc:	f001 f89e 	bl	bc93c <__lshift>
   bb800:	9018      	str	r0, [sp, #96]	; 0x60
   bb802:	2800      	cmp	r0, #0
   bb804:	f47f af6b 	bne.w	bb6de <_strtod_l+0x766>
   bb808:	e5fe      	b.n	bb408 <_strtod_l+0x490>
   bb80a:	465f      	mov	r7, fp
   bb80c:	d16e      	bne.n	bb8ec <_strtod_l+0x974>
   bb80e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bb810:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb814:	b342      	cbz	r2, bb868 <_strtod_l+0x8f0>
   bb816:	4a32      	ldr	r2, [pc, #200]	; (bb8e0 <_strtod_l+0x968>)
   bb818:	4293      	cmp	r3, r2
   bb81a:	d128      	bne.n	bb86e <_strtod_l+0x8f6>
   bb81c:	9b04      	ldr	r3, [sp, #16]
   bb81e:	4651      	mov	r1, sl
   bb820:	b1eb      	cbz	r3, bb85e <_strtod_l+0x8e6>
   bb822:	4b2d      	ldr	r3, [pc, #180]	; (bb8d8 <_strtod_l+0x960>)
   bb824:	403b      	ands	r3, r7
   bb826:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bb82a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb82e:	d819      	bhi.n	bb864 <_strtod_l+0x8ec>
   bb830:	0d1b      	lsrs	r3, r3, #20
   bb832:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bb836:	fa02 f303 	lsl.w	r3, r2, r3
   bb83a:	4299      	cmp	r1, r3
   bb83c:	d117      	bne.n	bb86e <_strtod_l+0x8f6>
   bb83e:	4b29      	ldr	r3, [pc, #164]	; (bb8e4 <_strtod_l+0x96c>)
   bb840:	429f      	cmp	r7, r3
   bb842:	d102      	bne.n	bb84a <_strtod_l+0x8d2>
   bb844:	3101      	adds	r1, #1
   bb846:	f43f addf 	beq.w	bb408 <_strtod_l+0x490>
   bb84a:	4b23      	ldr	r3, [pc, #140]	; (bb8d8 <_strtod_l+0x960>)
   bb84c:	403b      	ands	r3, r7
   bb84e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bb852:	f04f 0a00 	mov.w	sl, #0
   bb856:	9b04      	ldr	r3, [sp, #16]
   bb858:	2b00      	cmp	r3, #0
   bb85a:	d1a4      	bne.n	bb7a6 <_strtod_l+0x82e>
   bb85c:	e5de      	b.n	bb41c <_strtod_l+0x4a4>
   bb85e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bb862:	e7ea      	b.n	bb83a <_strtod_l+0x8c2>
   bb864:	4613      	mov	r3, r2
   bb866:	e7e8      	b.n	bb83a <_strtod_l+0x8c2>
   bb868:	ea53 030a 	orrs.w	r3, r3, sl
   bb86c:	d08c      	beq.n	bb788 <_strtod_l+0x810>
   bb86e:	9b08      	ldr	r3, [sp, #32]
   bb870:	b1db      	cbz	r3, bb8aa <_strtod_l+0x932>
   bb872:	423b      	tst	r3, r7
   bb874:	d0ef      	beq.n	bb856 <_strtod_l+0x8de>
   bb876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb878:	9a04      	ldr	r2, [sp, #16]
   bb87a:	4650      	mov	r0, sl
   bb87c:	4659      	mov	r1, fp
   bb87e:	b1c3      	cbz	r3, bb8b2 <_strtod_l+0x93a>
   bb880:	f7ff fb5c 	bl	baf3c <sulp>
   bb884:	4602      	mov	r2, r0
   bb886:	460b      	mov	r3, r1
   bb888:	ec51 0b18 	vmov	r0, r1, d8
   bb88c:	f7fe fd92 	bl	ba3b4 <__adddf3>
   bb890:	4682      	mov	sl, r0
   bb892:	468b      	mov	fp, r1
   bb894:	e7df      	b.n	bb856 <_strtod_l+0x8de>
   bb896:	4013      	ands	r3, r2
   bb898:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bb89c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bb8a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bb8a4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bb8a8:	e7d5      	b.n	bb856 <_strtod_l+0x8de>
   bb8aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bb8ac:	ea13 0f0a 	tst.w	r3, sl
   bb8b0:	e7e0      	b.n	bb874 <_strtod_l+0x8fc>
   bb8b2:	f7ff fb43 	bl	baf3c <sulp>
   bb8b6:	4602      	mov	r2, r0
   bb8b8:	460b      	mov	r3, r1
   bb8ba:	ec51 0b18 	vmov	r0, r1, d8
   bb8be:	f7fe fd77 	bl	ba3b0 <__aeabi_dsub>
   bb8c2:	2200      	movs	r2, #0
   bb8c4:	2300      	movs	r3, #0
   bb8c6:	4682      	mov	sl, r0
   bb8c8:	468b      	mov	fp, r1
   bb8ca:	f7ff f991 	bl	babf0 <__aeabi_dcmpeq>
   bb8ce:	2800      	cmp	r0, #0
   bb8d0:	d0c1      	beq.n	bb856 <_strtod_l+0x8de>
   bb8d2:	e611      	b.n	bb4f8 <_strtod_l+0x580>
   bb8d4:	fffffc02 	.word	0xfffffc02
   bb8d8:	7ff00000 	.word	0x7ff00000
   bb8dc:	39500000 	.word	0x39500000
   bb8e0:	000fffff 	.word	0x000fffff
   bb8e4:	7fefffff 	.word	0x7fefffff
   bb8e8:	000bd8e8 	.word	0x000bd8e8
   bb8ec:	4631      	mov	r1, r6
   bb8ee:	4628      	mov	r0, r5
   bb8f0:	f001 fa12 	bl	bcd18 <__ratio>
   bb8f4:	ec59 8b10 	vmov	r8, r9, d0
   bb8f8:	ee10 0a10 	vmov	r0, s0
   bb8fc:	2200      	movs	r2, #0
   bb8fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bb902:	4649      	mov	r1, r9
   bb904:	f7ff f988 	bl	bac18 <__aeabi_dcmple>
   bb908:	2800      	cmp	r0, #0
   bb90a:	d07a      	beq.n	bba02 <_strtod_l+0xa8a>
   bb90c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb90e:	2b00      	cmp	r3, #0
   bb910:	d04a      	beq.n	bb9a8 <_strtod_l+0xa30>
   bb912:	4b95      	ldr	r3, [pc, #596]	; (bbb68 <_strtod_l+0xbf0>)
   bb914:	2200      	movs	r2, #0
   bb916:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bb91a:	f8df 924c 	ldr.w	r9, [pc, #588]	; bbb68 <_strtod_l+0xbf0>
   bb91e:	f04f 0800 	mov.w	r8, #0
   bb922:	4b92      	ldr	r3, [pc, #584]	; (bbb6c <_strtod_l+0xbf4>)
   bb924:	403b      	ands	r3, r7
   bb926:	930d      	str	r3, [sp, #52]	; 0x34
   bb928:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bb92a:	4b91      	ldr	r3, [pc, #580]	; (bbb70 <_strtod_l+0xbf8>)
   bb92c:	429a      	cmp	r2, r3
   bb92e:	f040 80b0 	bne.w	bba92 <_strtod_l+0xb1a>
   bb932:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb936:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bb93a:	ec4b ab10 	vmov	d0, sl, fp
   bb93e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bb942:	f001 f911 	bl	bcb68 <__ulp>
   bb946:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb94a:	ec53 2b10 	vmov	r2, r3, d0
   bb94e:	f7fe fee7 	bl	ba720 <__aeabi_dmul>
   bb952:	4652      	mov	r2, sl
   bb954:	465b      	mov	r3, fp
   bb956:	f7fe fd2d 	bl	ba3b4 <__adddf3>
   bb95a:	460b      	mov	r3, r1
   bb95c:	4983      	ldr	r1, [pc, #524]	; (bbb6c <_strtod_l+0xbf4>)
   bb95e:	4a85      	ldr	r2, [pc, #532]	; (bbb74 <_strtod_l+0xbfc>)
   bb960:	4019      	ands	r1, r3
   bb962:	4291      	cmp	r1, r2
   bb964:	4682      	mov	sl, r0
   bb966:	d960      	bls.n	bba2a <_strtod_l+0xab2>
   bb968:	ee18 3a90 	vmov	r3, s17
   bb96c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bb970:	4293      	cmp	r3, r2
   bb972:	d104      	bne.n	bb97e <_strtod_l+0xa06>
   bb974:	ee18 3a10 	vmov	r3, s16
   bb978:	3301      	adds	r3, #1
   bb97a:	f43f ad45 	beq.w	bb408 <_strtod_l+0x490>
   bb97e:	f8df b200 	ldr.w	fp, [pc, #512]	; bbb80 <_strtod_l+0xc08>
   bb982:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bb986:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb988:	4620      	mov	r0, r4
   bb98a:	f000 fdbb 	bl	bc504 <_Bfree>
   bb98e:	9905      	ldr	r1, [sp, #20]
   bb990:	4620      	mov	r0, r4
   bb992:	f000 fdb7 	bl	bc504 <_Bfree>
   bb996:	4631      	mov	r1, r6
   bb998:	4620      	mov	r0, r4
   bb99a:	f000 fdb3 	bl	bc504 <_Bfree>
   bb99e:	4629      	mov	r1, r5
   bb9a0:	4620      	mov	r0, r4
   bb9a2:	f000 fdaf 	bl	bc504 <_Bfree>
   bb9a6:	e61a      	b.n	bb5de <_strtod_l+0x666>
   bb9a8:	f1ba 0f00 	cmp.w	sl, #0
   bb9ac:	d11b      	bne.n	bb9e6 <_strtod_l+0xa6e>
   bb9ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb9b2:	b9f3      	cbnz	r3, bb9f2 <_strtod_l+0xa7a>
   bb9b4:	4b6c      	ldr	r3, [pc, #432]	; (bbb68 <_strtod_l+0xbf0>)
   bb9b6:	2200      	movs	r2, #0
   bb9b8:	4640      	mov	r0, r8
   bb9ba:	4649      	mov	r1, r9
   bb9bc:	f7ff f922 	bl	bac04 <__aeabi_dcmplt>
   bb9c0:	b9d0      	cbnz	r0, bb9f8 <_strtod_l+0xa80>
   bb9c2:	4640      	mov	r0, r8
   bb9c4:	4649      	mov	r1, r9
   bb9c6:	4b6c      	ldr	r3, [pc, #432]	; (bbb78 <_strtod_l+0xc00>)
   bb9c8:	2200      	movs	r2, #0
   bb9ca:	f7fe fea9 	bl	ba720 <__aeabi_dmul>
   bb9ce:	4680      	mov	r8, r0
   bb9d0:	4689      	mov	r9, r1
   bb9d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bb9d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bb9da:	9315      	str	r3, [sp, #84]	; 0x54
   bb9dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bb9e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bb9e4:	e79d      	b.n	bb922 <_strtod_l+0x9aa>
   bb9e6:	f1ba 0f01 	cmp.w	sl, #1
   bb9ea:	d102      	bne.n	bb9f2 <_strtod_l+0xa7a>
   bb9ec:	2f00      	cmp	r7, #0
   bb9ee:	f43f ad83 	beq.w	bb4f8 <_strtod_l+0x580>
   bb9f2:	4b62      	ldr	r3, [pc, #392]	; (bbb7c <_strtod_l+0xc04>)
   bb9f4:	2200      	movs	r2, #0
   bb9f6:	e78e      	b.n	bb916 <_strtod_l+0x99e>
   bb9f8:	f8df 917c 	ldr.w	r9, [pc, #380]	; bbb78 <_strtod_l+0xc00>
   bb9fc:	f04f 0800 	mov.w	r8, #0
   bba00:	e7e7      	b.n	bb9d2 <_strtod_l+0xa5a>
   bba02:	4b5d      	ldr	r3, [pc, #372]	; (bbb78 <_strtod_l+0xc00>)
   bba04:	4640      	mov	r0, r8
   bba06:	4649      	mov	r1, r9
   bba08:	2200      	movs	r2, #0
   bba0a:	f7fe fe89 	bl	ba720 <__aeabi_dmul>
   bba0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bba10:	4680      	mov	r8, r0
   bba12:	4689      	mov	r9, r1
   bba14:	b933      	cbnz	r3, bba24 <_strtod_l+0xaac>
   bba16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bba1a:	900e      	str	r0, [sp, #56]	; 0x38
   bba1c:	930f      	str	r3, [sp, #60]	; 0x3c
   bba1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bba22:	e7dd      	b.n	bb9e0 <_strtod_l+0xa68>
   bba24:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bba28:	e7f9      	b.n	bba1e <_strtod_l+0xaa6>
   bba2a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bba2e:	9b04      	ldr	r3, [sp, #16]
   bba30:	2b00      	cmp	r3, #0
   bba32:	d1a8      	bne.n	bb986 <_strtod_l+0xa0e>
   bba34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bba38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bba3a:	0d1b      	lsrs	r3, r3, #20
   bba3c:	051b      	lsls	r3, r3, #20
   bba3e:	429a      	cmp	r2, r3
   bba40:	d1a1      	bne.n	bb986 <_strtod_l+0xa0e>
   bba42:	4640      	mov	r0, r8
   bba44:	4649      	mov	r1, r9
   bba46:	f001 fa05 	bl	bce54 <__aeabi_d2lz>
   bba4a:	f7fe fe3b 	bl	ba6c4 <__aeabi_l2d>
   bba4e:	4602      	mov	r2, r0
   bba50:	460b      	mov	r3, r1
   bba52:	4640      	mov	r0, r8
   bba54:	4649      	mov	r1, r9
   bba56:	f7fe fcab 	bl	ba3b0 <__aeabi_dsub>
   bba5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bba5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bba60:	ea43 030a 	orr.w	r3, r3, sl
   bba64:	4313      	orrs	r3, r2
   bba66:	4680      	mov	r8, r0
   bba68:	4689      	mov	r9, r1
   bba6a:	d055      	beq.n	bbb18 <_strtod_l+0xba0>
   bba6c:	a336      	add	r3, pc, #216	; (adr r3, bbb48 <_strtod_l+0xbd0>)
   bba6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bba72:	f7ff f8c7 	bl	bac04 <__aeabi_dcmplt>
   bba76:	2800      	cmp	r0, #0
   bba78:	f47f acd0 	bne.w	bb41c <_strtod_l+0x4a4>
   bba7c:	a334      	add	r3, pc, #208	; (adr r3, bbb50 <_strtod_l+0xbd8>)
   bba7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bba82:	4640      	mov	r0, r8
   bba84:	4649      	mov	r1, r9
   bba86:	f7ff f8db 	bl	bac40 <__aeabi_dcmpgt>
   bba8a:	2800      	cmp	r0, #0
   bba8c:	f43f af7b 	beq.w	bb986 <_strtod_l+0xa0e>
   bba90:	e4c4      	b.n	bb41c <_strtod_l+0x4a4>
   bba92:	9b04      	ldr	r3, [sp, #16]
   bba94:	b333      	cbz	r3, bbae4 <_strtod_l+0xb6c>
   bba96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bba98:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bba9c:	d822      	bhi.n	bbae4 <_strtod_l+0xb6c>
   bba9e:	a32e      	add	r3, pc, #184	; (adr r3, bbb58 <_strtod_l+0xbe0>)
   bbaa0:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbaa4:	4640      	mov	r0, r8
   bbaa6:	4649      	mov	r1, r9
   bbaa8:	f7ff f8b6 	bl	bac18 <__aeabi_dcmple>
   bbaac:	b1a0      	cbz	r0, bbad8 <_strtod_l+0xb60>
   bbaae:	4649      	mov	r1, r9
   bbab0:	4640      	mov	r0, r8
   bbab2:	f7ff f8e5 	bl	bac80 <__aeabi_d2uiz>
   bbab6:	2801      	cmp	r0, #1
   bbab8:	bf38      	it	cc
   bbaba:	2001      	movcc	r0, #1
   bbabc:	f7fe fdb6 	bl	ba62c <__aeabi_ui2d>
   bbac0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbac2:	4680      	mov	r8, r0
   bbac4:	4689      	mov	r9, r1
   bbac6:	bb23      	cbnz	r3, bbb12 <_strtod_l+0xb9a>
   bbac8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bbacc:	9010      	str	r0, [sp, #64]	; 0x40
   bbace:	9311      	str	r3, [sp, #68]	; 0x44
   bbad0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bbad4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bbad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bbada:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bbadc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bbae0:	1a9b      	subs	r3, r3, r2
   bbae2:	9309      	str	r3, [sp, #36]	; 0x24
   bbae4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bbae8:	eeb0 0a48 	vmov.f32	s0, s16
   bbaec:	eef0 0a68 	vmov.f32	s1, s17
   bbaf0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bbaf4:	f001 f838 	bl	bcb68 <__ulp>
   bbaf8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bbafc:	ec53 2b10 	vmov	r2, r3, d0
   bbb00:	f7fe fe0e 	bl	ba720 <__aeabi_dmul>
   bbb04:	ec53 2b18 	vmov	r2, r3, d8
   bbb08:	f7fe fc54 	bl	ba3b4 <__adddf3>
   bbb0c:	4682      	mov	sl, r0
   bbb0e:	468b      	mov	fp, r1
   bbb10:	e78d      	b.n	bba2e <_strtod_l+0xab6>
   bbb12:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bbb16:	e7db      	b.n	bbad0 <_strtod_l+0xb58>
   bbb18:	a311      	add	r3, pc, #68	; (adr r3, bbb60 <_strtod_l+0xbe8>)
   bbb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbb1e:	f7ff f871 	bl	bac04 <__aeabi_dcmplt>
   bbb22:	e7b2      	b.n	bba8a <_strtod_l+0xb12>
   bbb24:	2300      	movs	r3, #0
   bbb26:	930a      	str	r3, [sp, #40]	; 0x28
   bbb28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bbb2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbb2c:	6013      	str	r3, [r2, #0]
   bbb2e:	f7ff ba6b 	b.w	bb008 <_strtod_l+0x90>
   bbb32:	2a65      	cmp	r2, #101	; 0x65
   bbb34:	f43f ab5f 	beq.w	bb1f6 <_strtod_l+0x27e>
   bbb38:	2a45      	cmp	r2, #69	; 0x45
   bbb3a:	f43f ab5c 	beq.w	bb1f6 <_strtod_l+0x27e>
   bbb3e:	2301      	movs	r3, #1
   bbb40:	f7ff bb94 	b.w	bb26c <_strtod_l+0x2f4>
   bbb44:	f3af 8000 	nop.w
   bbb48:	94a03595 	.word	0x94a03595
   bbb4c:	3fdfffff 	.word	0x3fdfffff
   bbb50:	35afe535 	.word	0x35afe535
   bbb54:	3fe00000 	.word	0x3fe00000
   bbb58:	ffc00000 	.word	0xffc00000
   bbb5c:	41dfffff 	.word	0x41dfffff
   bbb60:	94a03595 	.word	0x94a03595
   bbb64:	3fcfffff 	.word	0x3fcfffff
   bbb68:	3ff00000 	.word	0x3ff00000
   bbb6c:	7ff00000 	.word	0x7ff00000
   bbb70:	7fe00000 	.word	0x7fe00000
   bbb74:	7c9fffff 	.word	0x7c9fffff
   bbb78:	3fe00000 	.word	0x3fe00000
   bbb7c:	bff00000 	.word	0xbff00000
   bbb80:	7fefffff 	.word	0x7fefffff

000bbb84 <strtod>:
   bbb84:	460a      	mov	r2, r1
   bbb86:	4601      	mov	r1, r0
   bbb88:	4802      	ldr	r0, [pc, #8]	; (bbb94 <strtod+0x10>)
   bbb8a:	4b03      	ldr	r3, [pc, #12]	; (bbb98 <strtod+0x14>)
   bbb8c:	6800      	ldr	r0, [r0, #0]
   bbb8e:	f7ff b9f3 	b.w	baf78 <_strtod_l>
   bbb92:	bf00      	nop
   bbb94:	20035364 	.word	0x20035364
   bbb98:	200353d0 	.word	0x200353d0

000bbb9c <_strtol_l.constprop.0>:
   bbb9c:	2b01      	cmp	r3, #1
   bbb9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bbba2:	d001      	beq.n	bbba8 <_strtol_l.constprop.0+0xc>
   bbba4:	2b24      	cmp	r3, #36	; 0x24
   bbba6:	d906      	bls.n	bbbb6 <_strtol_l.constprop.0+0x1a>
   bbba8:	f7fb fe02 	bl	b77b0 <__errno>
   bbbac:	2316      	movs	r3, #22
   bbbae:	6003      	str	r3, [r0, #0]
   bbbb0:	2000      	movs	r0, #0
   bbbb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bbbb6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bbc9c <_strtol_l.constprop.0+0x100>
   bbbba:	460d      	mov	r5, r1
   bbbbc:	462e      	mov	r6, r5
   bbbbe:	f815 4b01 	ldrb.w	r4, [r5], #1
   bbbc2:	f814 700c 	ldrb.w	r7, [r4, ip]
   bbbc6:	f017 0708 	ands.w	r7, r7, #8
   bbbca:	d1f7      	bne.n	bbbbc <_strtol_l.constprop.0+0x20>
   bbbcc:	2c2d      	cmp	r4, #45	; 0x2d
   bbbce:	d132      	bne.n	bbc36 <_strtol_l.constprop.0+0x9a>
   bbbd0:	782c      	ldrb	r4, [r5, #0]
   bbbd2:	2701      	movs	r7, #1
   bbbd4:	1cb5      	adds	r5, r6, #2
   bbbd6:	2b00      	cmp	r3, #0
   bbbd8:	d05b      	beq.n	bbc92 <_strtol_l.constprop.0+0xf6>
   bbbda:	2b10      	cmp	r3, #16
   bbbdc:	d109      	bne.n	bbbf2 <_strtol_l.constprop.0+0x56>
   bbbde:	2c30      	cmp	r4, #48	; 0x30
   bbbe0:	d107      	bne.n	bbbf2 <_strtol_l.constprop.0+0x56>
   bbbe2:	782c      	ldrb	r4, [r5, #0]
   bbbe4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bbbe8:	2c58      	cmp	r4, #88	; 0x58
   bbbea:	d14d      	bne.n	bbc88 <_strtol_l.constprop.0+0xec>
   bbbec:	786c      	ldrb	r4, [r5, #1]
   bbbee:	2310      	movs	r3, #16
   bbbf0:	3502      	adds	r5, #2
   bbbf2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bbbf6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bbbfa:	f04f 0c00 	mov.w	ip, #0
   bbbfe:	fbb8 f9f3 	udiv	r9, r8, r3
   bbc02:	4666      	mov	r6, ip
   bbc04:	fb03 8a19 	mls	sl, r3, r9, r8
   bbc08:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bbc0c:	f1be 0f09 	cmp.w	lr, #9
   bbc10:	d816      	bhi.n	bbc40 <_strtol_l.constprop.0+0xa4>
   bbc12:	4674      	mov	r4, lr
   bbc14:	42a3      	cmp	r3, r4
   bbc16:	dd24      	ble.n	bbc62 <_strtol_l.constprop.0+0xc6>
   bbc18:	f1bc 0f00 	cmp.w	ip, #0
   bbc1c:	db1e      	blt.n	bbc5c <_strtol_l.constprop.0+0xc0>
   bbc1e:	45b1      	cmp	r9, r6
   bbc20:	d31c      	bcc.n	bbc5c <_strtol_l.constprop.0+0xc0>
   bbc22:	d101      	bne.n	bbc28 <_strtol_l.constprop.0+0x8c>
   bbc24:	45a2      	cmp	sl, r4
   bbc26:	db19      	blt.n	bbc5c <_strtol_l.constprop.0+0xc0>
   bbc28:	fb06 4603 	mla	r6, r6, r3, r4
   bbc2c:	f04f 0c01 	mov.w	ip, #1
   bbc30:	f815 4b01 	ldrb.w	r4, [r5], #1
   bbc34:	e7e8      	b.n	bbc08 <_strtol_l.constprop.0+0x6c>
   bbc36:	2c2b      	cmp	r4, #43	; 0x2b
   bbc38:	bf04      	itt	eq
   bbc3a:	782c      	ldrbeq	r4, [r5, #0]
   bbc3c:	1cb5      	addeq	r5, r6, #2
   bbc3e:	e7ca      	b.n	bbbd6 <_strtol_l.constprop.0+0x3a>
   bbc40:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bbc44:	f1be 0f19 	cmp.w	lr, #25
   bbc48:	d801      	bhi.n	bbc4e <_strtol_l.constprop.0+0xb2>
   bbc4a:	3c37      	subs	r4, #55	; 0x37
   bbc4c:	e7e2      	b.n	bbc14 <_strtol_l.constprop.0+0x78>
   bbc4e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bbc52:	f1be 0f19 	cmp.w	lr, #25
   bbc56:	d804      	bhi.n	bbc62 <_strtol_l.constprop.0+0xc6>
   bbc58:	3c57      	subs	r4, #87	; 0x57
   bbc5a:	e7db      	b.n	bbc14 <_strtol_l.constprop.0+0x78>
   bbc5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bbc60:	e7e6      	b.n	bbc30 <_strtol_l.constprop.0+0x94>
   bbc62:	f1bc 0f00 	cmp.w	ip, #0
   bbc66:	da05      	bge.n	bbc74 <_strtol_l.constprop.0+0xd8>
   bbc68:	2322      	movs	r3, #34	; 0x22
   bbc6a:	6003      	str	r3, [r0, #0]
   bbc6c:	4646      	mov	r6, r8
   bbc6e:	b942      	cbnz	r2, bbc82 <_strtol_l.constprop.0+0xe6>
   bbc70:	4630      	mov	r0, r6
   bbc72:	e79e      	b.n	bbbb2 <_strtol_l.constprop.0+0x16>
   bbc74:	b107      	cbz	r7, bbc78 <_strtol_l.constprop.0+0xdc>
   bbc76:	4276      	negs	r6, r6
   bbc78:	2a00      	cmp	r2, #0
   bbc7a:	d0f9      	beq.n	bbc70 <_strtol_l.constprop.0+0xd4>
   bbc7c:	f1bc 0f00 	cmp.w	ip, #0
   bbc80:	d000      	beq.n	bbc84 <_strtol_l.constprop.0+0xe8>
   bbc82:	1e69      	subs	r1, r5, #1
   bbc84:	6011      	str	r1, [r2, #0]
   bbc86:	e7f3      	b.n	bbc70 <_strtol_l.constprop.0+0xd4>
   bbc88:	2430      	movs	r4, #48	; 0x30
   bbc8a:	2b00      	cmp	r3, #0
   bbc8c:	d1b1      	bne.n	bbbf2 <_strtol_l.constprop.0+0x56>
   bbc8e:	2308      	movs	r3, #8
   bbc90:	e7af      	b.n	bbbf2 <_strtol_l.constprop.0+0x56>
   bbc92:	2c30      	cmp	r4, #48	; 0x30
   bbc94:	d0a5      	beq.n	bbbe2 <_strtol_l.constprop.0+0x46>
   bbc96:	230a      	movs	r3, #10
   bbc98:	e7ab      	b.n	bbbf2 <_strtol_l.constprop.0+0x56>
   bbc9a:	bf00      	nop
   bbc9c:	000bd911 	.word	0x000bd911

000bbca0 <strtol>:
   bbca0:	4613      	mov	r3, r2
   bbca2:	460a      	mov	r2, r1
   bbca4:	4601      	mov	r1, r0
   bbca6:	4802      	ldr	r0, [pc, #8]	; (bbcb0 <strtol+0x10>)
   bbca8:	6800      	ldr	r0, [r0, #0]
   bbcaa:	f7ff bf77 	b.w	bbb9c <_strtol_l.constprop.0>
   bbcae:	bf00      	nop
   bbcb0:	20035364 	.word	0x20035364

000bbcb4 <__register_exitproc>:
   bbcb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bbcb8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bbd74 <__register_exitproc+0xc0>
   bbcbc:	4606      	mov	r6, r0
   bbcbe:	f8d8 0000 	ldr.w	r0, [r8]
   bbcc2:	461f      	mov	r7, r3
   bbcc4:	460d      	mov	r5, r1
   bbcc6:	4691      	mov	r9, r2
   bbcc8:	f000 fbc6 	bl	bc458 <__retarget_lock_acquire_recursive>
   bbccc:	4b25      	ldr	r3, [pc, #148]	; (bbd64 <__register_exitproc+0xb0>)
   bbcce:	681c      	ldr	r4, [r3, #0]
   bbcd0:	b934      	cbnz	r4, bbce0 <__register_exitproc+0x2c>
   bbcd2:	4c25      	ldr	r4, [pc, #148]	; (bbd68 <__register_exitproc+0xb4>)
   bbcd4:	601c      	str	r4, [r3, #0]
   bbcd6:	4b25      	ldr	r3, [pc, #148]	; (bbd6c <__register_exitproc+0xb8>)
   bbcd8:	b113      	cbz	r3, bbce0 <__register_exitproc+0x2c>
   bbcda:	681b      	ldr	r3, [r3, #0]
   bbcdc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bbce0:	6863      	ldr	r3, [r4, #4]
   bbce2:	2b1f      	cmp	r3, #31
   bbce4:	dd07      	ble.n	bbcf6 <__register_exitproc+0x42>
   bbce6:	f8d8 0000 	ldr.w	r0, [r8]
   bbcea:	f000 fbb7 	bl	bc45c <__retarget_lock_release_recursive>
   bbcee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bbcf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bbcf6:	b34e      	cbz	r6, bbd4c <__register_exitproc+0x98>
   bbcf8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bbcfc:	b988      	cbnz	r0, bbd22 <__register_exitproc+0x6e>
   bbcfe:	4b1c      	ldr	r3, [pc, #112]	; (bbd70 <__register_exitproc+0xbc>)
   bbd00:	b923      	cbnz	r3, bbd0c <__register_exitproc+0x58>
   bbd02:	f8d8 0000 	ldr.w	r0, [r8]
   bbd06:	f000 fba8 	bl	bc45a <__retarget_lock_release>
   bbd0a:	e7f0      	b.n	bbcee <__register_exitproc+0x3a>
   bbd0c:	f44f 7084 	mov.w	r0, #264	; 0x108
   bbd10:	f7fb fd16 	bl	b7740 <malloc>
   bbd14:	2800      	cmp	r0, #0
   bbd16:	d0f4      	beq.n	bbd02 <__register_exitproc+0x4e>
   bbd18:	2300      	movs	r3, #0
   bbd1a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bbd1e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bbd22:	6863      	ldr	r3, [r4, #4]
   bbd24:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bbd28:	2201      	movs	r2, #1
   bbd2a:	409a      	lsls	r2, r3
   bbd2c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bbd30:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bbd34:	4313      	orrs	r3, r2
   bbd36:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bbd3a:	2e02      	cmp	r6, #2
   bbd3c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bbd40:	bf02      	ittt	eq
   bbd42:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bbd46:	4313      	orreq	r3, r2
   bbd48:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bbd4c:	6863      	ldr	r3, [r4, #4]
   bbd4e:	f8d8 0000 	ldr.w	r0, [r8]
   bbd52:	1c5a      	adds	r2, r3, #1
   bbd54:	3302      	adds	r3, #2
   bbd56:	6062      	str	r2, [r4, #4]
   bbd58:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bbd5c:	f000 fb7e 	bl	bc45c <__retarget_lock_release_recursive>
   bbd60:	2000      	movs	r0, #0
   bbd62:	e7c6      	b.n	bbcf2 <__register_exitproc+0x3e>
   bbd64:	2003e7e8 	.word	0x2003e7e8
   bbd68:	2003e75c 	.word	0x2003e75c
   bbd6c:	00000000 	.word	0x00000000
   bbd70:	000b7741 	.word	0x000b7741
   bbd74:	200353c8 	.word	0x200353c8

000bbd78 <rshift>:
   bbd78:	6903      	ldr	r3, [r0, #16]
   bbd7a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bbd7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bbd82:	ea4f 1261 	mov.w	r2, r1, asr #5
   bbd86:	f100 0414 	add.w	r4, r0, #20
   bbd8a:	dd45      	ble.n	bbe18 <rshift+0xa0>
   bbd8c:	f011 011f 	ands.w	r1, r1, #31
   bbd90:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bbd94:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bbd98:	d10c      	bne.n	bbdb4 <rshift+0x3c>
   bbd9a:	f100 0710 	add.w	r7, r0, #16
   bbd9e:	4629      	mov	r1, r5
   bbda0:	42b1      	cmp	r1, r6
   bbda2:	d334      	bcc.n	bbe0e <rshift+0x96>
   bbda4:	1a9b      	subs	r3, r3, r2
   bbda6:	009b      	lsls	r3, r3, #2
   bbda8:	1eea      	subs	r2, r5, #3
   bbdaa:	4296      	cmp	r6, r2
   bbdac:	bf38      	it	cc
   bbdae:	2300      	movcc	r3, #0
   bbdb0:	4423      	add	r3, r4
   bbdb2:	e015      	b.n	bbde0 <rshift+0x68>
   bbdb4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bbdb8:	f1c1 0820 	rsb	r8, r1, #32
   bbdbc:	40cf      	lsrs	r7, r1
   bbdbe:	f105 0e04 	add.w	lr, r5, #4
   bbdc2:	46a1      	mov	r9, r4
   bbdc4:	4576      	cmp	r6, lr
   bbdc6:	46f4      	mov	ip, lr
   bbdc8:	d815      	bhi.n	bbdf6 <rshift+0x7e>
   bbdca:	1a9a      	subs	r2, r3, r2
   bbdcc:	0092      	lsls	r2, r2, #2
   bbdce:	3a04      	subs	r2, #4
   bbdd0:	3501      	adds	r5, #1
   bbdd2:	42ae      	cmp	r6, r5
   bbdd4:	bf38      	it	cc
   bbdd6:	2200      	movcc	r2, #0
   bbdd8:	18a3      	adds	r3, r4, r2
   bbdda:	50a7      	str	r7, [r4, r2]
   bbddc:	b107      	cbz	r7, bbde0 <rshift+0x68>
   bbdde:	3304      	adds	r3, #4
   bbde0:	1b1a      	subs	r2, r3, r4
   bbde2:	42a3      	cmp	r3, r4
   bbde4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bbde8:	bf08      	it	eq
   bbdea:	2300      	moveq	r3, #0
   bbdec:	6102      	str	r2, [r0, #16]
   bbdee:	bf08      	it	eq
   bbdf0:	6143      	streq	r3, [r0, #20]
   bbdf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bbdf6:	f8dc c000 	ldr.w	ip, [ip]
   bbdfa:	fa0c fc08 	lsl.w	ip, ip, r8
   bbdfe:	ea4c 0707 	orr.w	r7, ip, r7
   bbe02:	f849 7b04 	str.w	r7, [r9], #4
   bbe06:	f85e 7b04 	ldr.w	r7, [lr], #4
   bbe0a:	40cf      	lsrs	r7, r1
   bbe0c:	e7da      	b.n	bbdc4 <rshift+0x4c>
   bbe0e:	f851 cb04 	ldr.w	ip, [r1], #4
   bbe12:	f847 cf04 	str.w	ip, [r7, #4]!
   bbe16:	e7c3      	b.n	bbda0 <rshift+0x28>
   bbe18:	4623      	mov	r3, r4
   bbe1a:	e7e1      	b.n	bbde0 <rshift+0x68>

000bbe1c <__hexdig_fun>:
   bbe1c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bbe20:	2b09      	cmp	r3, #9
   bbe22:	d802      	bhi.n	bbe2a <__hexdig_fun+0xe>
   bbe24:	3820      	subs	r0, #32
   bbe26:	b2c0      	uxtb	r0, r0
   bbe28:	4770      	bx	lr
   bbe2a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bbe2e:	2b05      	cmp	r3, #5
   bbe30:	d801      	bhi.n	bbe36 <__hexdig_fun+0x1a>
   bbe32:	3847      	subs	r0, #71	; 0x47
   bbe34:	e7f7      	b.n	bbe26 <__hexdig_fun+0xa>
   bbe36:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bbe3a:	2b05      	cmp	r3, #5
   bbe3c:	d801      	bhi.n	bbe42 <__hexdig_fun+0x26>
   bbe3e:	3827      	subs	r0, #39	; 0x27
   bbe40:	e7f1      	b.n	bbe26 <__hexdig_fun+0xa>
   bbe42:	2000      	movs	r0, #0
   bbe44:	4770      	bx	lr
	...

000bbe48 <__gethex>:
   bbe48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbe4c:	ed2d 8b02 	vpush	{d8}
   bbe50:	b089      	sub	sp, #36	; 0x24
   bbe52:	ee08 0a10 	vmov	s16, r0
   bbe56:	9304      	str	r3, [sp, #16]
   bbe58:	4bb4      	ldr	r3, [pc, #720]	; (bc12c <__gethex+0x2e4>)
   bbe5a:	681b      	ldr	r3, [r3, #0]
   bbe5c:	9301      	str	r3, [sp, #4]
   bbe5e:	4618      	mov	r0, r3
   bbe60:	468b      	mov	fp, r1
   bbe62:	4690      	mov	r8, r2
   bbe64:	f7ff f82c 	bl	baec0 <strlen>
   bbe68:	9b01      	ldr	r3, [sp, #4]
   bbe6a:	f8db 2000 	ldr.w	r2, [fp]
   bbe6e:	4403      	add	r3, r0
   bbe70:	4682      	mov	sl, r0
   bbe72:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bbe76:	9305      	str	r3, [sp, #20]
   bbe78:	1c93      	adds	r3, r2, #2
   bbe7a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bbe7e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bbe82:	32fe      	adds	r2, #254	; 0xfe
   bbe84:	18d1      	adds	r1, r2, r3
   bbe86:	461f      	mov	r7, r3
   bbe88:	f813 0b01 	ldrb.w	r0, [r3], #1
   bbe8c:	9100      	str	r1, [sp, #0]
   bbe8e:	2830      	cmp	r0, #48	; 0x30
   bbe90:	d0f8      	beq.n	bbe84 <__gethex+0x3c>
   bbe92:	f7ff ffc3 	bl	bbe1c <__hexdig_fun>
   bbe96:	4604      	mov	r4, r0
   bbe98:	2800      	cmp	r0, #0
   bbe9a:	d13a      	bne.n	bbf12 <__gethex+0xca>
   bbe9c:	9901      	ldr	r1, [sp, #4]
   bbe9e:	4652      	mov	r2, sl
   bbea0:	4638      	mov	r0, r7
   bbea2:	f7ff f815 	bl	baed0 <strncmp>
   bbea6:	4605      	mov	r5, r0
   bbea8:	2800      	cmp	r0, #0
   bbeaa:	d168      	bne.n	bbf7e <__gethex+0x136>
   bbeac:	f817 000a 	ldrb.w	r0, [r7, sl]
   bbeb0:	eb07 060a 	add.w	r6, r7, sl
   bbeb4:	f7ff ffb2 	bl	bbe1c <__hexdig_fun>
   bbeb8:	2800      	cmp	r0, #0
   bbeba:	d062      	beq.n	bbf82 <__gethex+0x13a>
   bbebc:	4633      	mov	r3, r6
   bbebe:	7818      	ldrb	r0, [r3, #0]
   bbec0:	2830      	cmp	r0, #48	; 0x30
   bbec2:	461f      	mov	r7, r3
   bbec4:	f103 0301 	add.w	r3, r3, #1
   bbec8:	d0f9      	beq.n	bbebe <__gethex+0x76>
   bbeca:	f7ff ffa7 	bl	bbe1c <__hexdig_fun>
   bbece:	2301      	movs	r3, #1
   bbed0:	fab0 f480 	clz	r4, r0
   bbed4:	0964      	lsrs	r4, r4, #5
   bbed6:	4635      	mov	r5, r6
   bbed8:	9300      	str	r3, [sp, #0]
   bbeda:	463a      	mov	r2, r7
   bbedc:	4616      	mov	r6, r2
   bbede:	3201      	adds	r2, #1
   bbee0:	7830      	ldrb	r0, [r6, #0]
   bbee2:	f7ff ff9b 	bl	bbe1c <__hexdig_fun>
   bbee6:	2800      	cmp	r0, #0
   bbee8:	d1f8      	bne.n	bbedc <__gethex+0x94>
   bbeea:	9901      	ldr	r1, [sp, #4]
   bbeec:	4652      	mov	r2, sl
   bbeee:	4630      	mov	r0, r6
   bbef0:	f7fe ffee 	bl	baed0 <strncmp>
   bbef4:	b980      	cbnz	r0, bbf18 <__gethex+0xd0>
   bbef6:	b94d      	cbnz	r5, bbf0c <__gethex+0xc4>
   bbef8:	eb06 050a 	add.w	r5, r6, sl
   bbefc:	462a      	mov	r2, r5
   bbefe:	4616      	mov	r6, r2
   bbf00:	3201      	adds	r2, #1
   bbf02:	7830      	ldrb	r0, [r6, #0]
   bbf04:	f7ff ff8a 	bl	bbe1c <__hexdig_fun>
   bbf08:	2800      	cmp	r0, #0
   bbf0a:	d1f8      	bne.n	bbefe <__gethex+0xb6>
   bbf0c:	1bad      	subs	r5, r5, r6
   bbf0e:	00ad      	lsls	r5, r5, #2
   bbf10:	e004      	b.n	bbf1c <__gethex+0xd4>
   bbf12:	2400      	movs	r4, #0
   bbf14:	4625      	mov	r5, r4
   bbf16:	e7e0      	b.n	bbeda <__gethex+0x92>
   bbf18:	2d00      	cmp	r5, #0
   bbf1a:	d1f7      	bne.n	bbf0c <__gethex+0xc4>
   bbf1c:	7833      	ldrb	r3, [r6, #0]
   bbf1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bbf22:	2b50      	cmp	r3, #80	; 0x50
   bbf24:	d13b      	bne.n	bbf9e <__gethex+0x156>
   bbf26:	7873      	ldrb	r3, [r6, #1]
   bbf28:	2b2b      	cmp	r3, #43	; 0x2b
   bbf2a:	d02c      	beq.n	bbf86 <__gethex+0x13e>
   bbf2c:	2b2d      	cmp	r3, #45	; 0x2d
   bbf2e:	d02e      	beq.n	bbf8e <__gethex+0x146>
   bbf30:	1c71      	adds	r1, r6, #1
   bbf32:	f04f 0900 	mov.w	r9, #0
   bbf36:	7808      	ldrb	r0, [r1, #0]
   bbf38:	f7ff ff70 	bl	bbe1c <__hexdig_fun>
   bbf3c:	1e43      	subs	r3, r0, #1
   bbf3e:	b2db      	uxtb	r3, r3
   bbf40:	2b18      	cmp	r3, #24
   bbf42:	d82c      	bhi.n	bbf9e <__gethex+0x156>
   bbf44:	f1a0 0210 	sub.w	r2, r0, #16
   bbf48:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bbf4c:	f7ff ff66 	bl	bbe1c <__hexdig_fun>
   bbf50:	1e43      	subs	r3, r0, #1
   bbf52:	b2db      	uxtb	r3, r3
   bbf54:	2b18      	cmp	r3, #24
   bbf56:	d91d      	bls.n	bbf94 <__gethex+0x14c>
   bbf58:	f1b9 0f00 	cmp.w	r9, #0
   bbf5c:	d000      	beq.n	bbf60 <__gethex+0x118>
   bbf5e:	4252      	negs	r2, r2
   bbf60:	4415      	add	r5, r2
   bbf62:	f8cb 1000 	str.w	r1, [fp]
   bbf66:	b1e4      	cbz	r4, bbfa2 <__gethex+0x15a>
   bbf68:	9b00      	ldr	r3, [sp, #0]
   bbf6a:	2b00      	cmp	r3, #0
   bbf6c:	bf14      	ite	ne
   bbf6e:	2700      	movne	r7, #0
   bbf70:	2706      	moveq	r7, #6
   bbf72:	4638      	mov	r0, r7
   bbf74:	b009      	add	sp, #36	; 0x24
   bbf76:	ecbd 8b02 	vpop	{d8}
   bbf7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbf7e:	463e      	mov	r6, r7
   bbf80:	4625      	mov	r5, r4
   bbf82:	2401      	movs	r4, #1
   bbf84:	e7ca      	b.n	bbf1c <__gethex+0xd4>
   bbf86:	f04f 0900 	mov.w	r9, #0
   bbf8a:	1cb1      	adds	r1, r6, #2
   bbf8c:	e7d3      	b.n	bbf36 <__gethex+0xee>
   bbf8e:	f04f 0901 	mov.w	r9, #1
   bbf92:	e7fa      	b.n	bbf8a <__gethex+0x142>
   bbf94:	230a      	movs	r3, #10
   bbf96:	fb03 0202 	mla	r2, r3, r2, r0
   bbf9a:	3a10      	subs	r2, #16
   bbf9c:	e7d4      	b.n	bbf48 <__gethex+0x100>
   bbf9e:	4631      	mov	r1, r6
   bbfa0:	e7df      	b.n	bbf62 <__gethex+0x11a>
   bbfa2:	1bf3      	subs	r3, r6, r7
   bbfa4:	3b01      	subs	r3, #1
   bbfa6:	4621      	mov	r1, r4
   bbfa8:	2b07      	cmp	r3, #7
   bbfaa:	dc0b      	bgt.n	bbfc4 <__gethex+0x17c>
   bbfac:	ee18 0a10 	vmov	r0, s16
   bbfb0:	f000 fa68 	bl	bc484 <_Balloc>
   bbfb4:	4604      	mov	r4, r0
   bbfb6:	b940      	cbnz	r0, bbfca <__gethex+0x182>
   bbfb8:	4b5d      	ldr	r3, [pc, #372]	; (bc130 <__gethex+0x2e8>)
   bbfba:	4602      	mov	r2, r0
   bbfbc:	21de      	movs	r1, #222	; 0xde
   bbfbe:	485d      	ldr	r0, [pc, #372]	; (bc134 <__gethex+0x2ec>)
   bbfc0:	f7fb fbfe 	bl	b77c0 <__assert_func>
   bbfc4:	3101      	adds	r1, #1
   bbfc6:	105b      	asrs	r3, r3, #1
   bbfc8:	e7ee      	b.n	bbfa8 <__gethex+0x160>
   bbfca:	f100 0914 	add.w	r9, r0, #20
   bbfce:	f04f 0b00 	mov.w	fp, #0
   bbfd2:	f1ca 0301 	rsb	r3, sl, #1
   bbfd6:	f8cd 9008 	str.w	r9, [sp, #8]
   bbfda:	f8cd b000 	str.w	fp, [sp]
   bbfde:	9306      	str	r3, [sp, #24]
   bbfe0:	42b7      	cmp	r7, r6
   bbfe2:	d340      	bcc.n	bc066 <__gethex+0x21e>
   bbfe4:	9802      	ldr	r0, [sp, #8]
   bbfe6:	9b00      	ldr	r3, [sp, #0]
   bbfe8:	f840 3b04 	str.w	r3, [r0], #4
   bbfec:	eba0 0009 	sub.w	r0, r0, r9
   bbff0:	1080      	asrs	r0, r0, #2
   bbff2:	0146      	lsls	r6, r0, #5
   bbff4:	6120      	str	r0, [r4, #16]
   bbff6:	4618      	mov	r0, r3
   bbff8:	f000 fb36 	bl	bc668 <__hi0bits>
   bbffc:	1a30      	subs	r0, r6, r0
   bbffe:	f8d8 6000 	ldr.w	r6, [r8]
   bc002:	42b0      	cmp	r0, r6
   bc004:	dd63      	ble.n	bc0ce <__gethex+0x286>
   bc006:	1b87      	subs	r7, r0, r6
   bc008:	4639      	mov	r1, r7
   bc00a:	4620      	mov	r0, r4
   bc00c:	f000 feda 	bl	bcdc4 <__any_on>
   bc010:	4682      	mov	sl, r0
   bc012:	b1a8      	cbz	r0, bc040 <__gethex+0x1f8>
   bc014:	1e7b      	subs	r3, r7, #1
   bc016:	1159      	asrs	r1, r3, #5
   bc018:	f003 021f 	and.w	r2, r3, #31
   bc01c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bc020:	f04f 0a01 	mov.w	sl, #1
   bc024:	fa0a f202 	lsl.w	r2, sl, r2
   bc028:	420a      	tst	r2, r1
   bc02a:	d009      	beq.n	bc040 <__gethex+0x1f8>
   bc02c:	4553      	cmp	r3, sl
   bc02e:	dd05      	ble.n	bc03c <__gethex+0x1f4>
   bc030:	1eb9      	subs	r1, r7, #2
   bc032:	4620      	mov	r0, r4
   bc034:	f000 fec6 	bl	bcdc4 <__any_on>
   bc038:	2800      	cmp	r0, #0
   bc03a:	d145      	bne.n	bc0c8 <__gethex+0x280>
   bc03c:	f04f 0a02 	mov.w	sl, #2
   bc040:	4639      	mov	r1, r7
   bc042:	4620      	mov	r0, r4
   bc044:	f7ff fe98 	bl	bbd78 <rshift>
   bc048:	443d      	add	r5, r7
   bc04a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bc04e:	42ab      	cmp	r3, r5
   bc050:	da4c      	bge.n	bc0ec <__gethex+0x2a4>
   bc052:	ee18 0a10 	vmov	r0, s16
   bc056:	4621      	mov	r1, r4
   bc058:	f000 fa54 	bl	bc504 <_Bfree>
   bc05c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bc05e:	2300      	movs	r3, #0
   bc060:	6013      	str	r3, [r2, #0]
   bc062:	27a3      	movs	r7, #163	; 0xa3
   bc064:	e785      	b.n	bbf72 <__gethex+0x12a>
   bc066:	1e73      	subs	r3, r6, #1
   bc068:	9a05      	ldr	r2, [sp, #20]
   bc06a:	9303      	str	r3, [sp, #12]
   bc06c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bc070:	4293      	cmp	r3, r2
   bc072:	d019      	beq.n	bc0a8 <__gethex+0x260>
   bc074:	f1bb 0f20 	cmp.w	fp, #32
   bc078:	d107      	bne.n	bc08a <__gethex+0x242>
   bc07a:	9b02      	ldr	r3, [sp, #8]
   bc07c:	9a00      	ldr	r2, [sp, #0]
   bc07e:	f843 2b04 	str.w	r2, [r3], #4
   bc082:	9302      	str	r3, [sp, #8]
   bc084:	2300      	movs	r3, #0
   bc086:	9300      	str	r3, [sp, #0]
   bc088:	469b      	mov	fp, r3
   bc08a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bc08e:	f7ff fec5 	bl	bbe1c <__hexdig_fun>
   bc092:	9b00      	ldr	r3, [sp, #0]
   bc094:	f000 000f 	and.w	r0, r0, #15
   bc098:	fa00 f00b 	lsl.w	r0, r0, fp
   bc09c:	4303      	orrs	r3, r0
   bc09e:	9300      	str	r3, [sp, #0]
   bc0a0:	f10b 0b04 	add.w	fp, fp, #4
   bc0a4:	9b03      	ldr	r3, [sp, #12]
   bc0a6:	e00d      	b.n	bc0c4 <__gethex+0x27c>
   bc0a8:	9b03      	ldr	r3, [sp, #12]
   bc0aa:	9a06      	ldr	r2, [sp, #24]
   bc0ac:	4413      	add	r3, r2
   bc0ae:	42bb      	cmp	r3, r7
   bc0b0:	d3e0      	bcc.n	bc074 <__gethex+0x22c>
   bc0b2:	4618      	mov	r0, r3
   bc0b4:	9901      	ldr	r1, [sp, #4]
   bc0b6:	9307      	str	r3, [sp, #28]
   bc0b8:	4652      	mov	r2, sl
   bc0ba:	f7fe ff09 	bl	baed0 <strncmp>
   bc0be:	9b07      	ldr	r3, [sp, #28]
   bc0c0:	2800      	cmp	r0, #0
   bc0c2:	d1d7      	bne.n	bc074 <__gethex+0x22c>
   bc0c4:	461e      	mov	r6, r3
   bc0c6:	e78b      	b.n	bbfe0 <__gethex+0x198>
   bc0c8:	f04f 0a03 	mov.w	sl, #3
   bc0cc:	e7b8      	b.n	bc040 <__gethex+0x1f8>
   bc0ce:	da0a      	bge.n	bc0e6 <__gethex+0x29e>
   bc0d0:	1a37      	subs	r7, r6, r0
   bc0d2:	4621      	mov	r1, r4
   bc0d4:	ee18 0a10 	vmov	r0, s16
   bc0d8:	463a      	mov	r2, r7
   bc0da:	f000 fc2f 	bl	bc93c <__lshift>
   bc0de:	1bed      	subs	r5, r5, r7
   bc0e0:	4604      	mov	r4, r0
   bc0e2:	f100 0914 	add.w	r9, r0, #20
   bc0e6:	f04f 0a00 	mov.w	sl, #0
   bc0ea:	e7ae      	b.n	bc04a <__gethex+0x202>
   bc0ec:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bc0f0:	42a8      	cmp	r0, r5
   bc0f2:	dd72      	ble.n	bc1da <__gethex+0x392>
   bc0f4:	1b45      	subs	r5, r0, r5
   bc0f6:	42ae      	cmp	r6, r5
   bc0f8:	dc36      	bgt.n	bc168 <__gethex+0x320>
   bc0fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bc0fe:	2b02      	cmp	r3, #2
   bc100:	d02a      	beq.n	bc158 <__gethex+0x310>
   bc102:	2b03      	cmp	r3, #3
   bc104:	d02c      	beq.n	bc160 <__gethex+0x318>
   bc106:	2b01      	cmp	r3, #1
   bc108:	d11c      	bne.n	bc144 <__gethex+0x2fc>
   bc10a:	42ae      	cmp	r6, r5
   bc10c:	d11a      	bne.n	bc144 <__gethex+0x2fc>
   bc10e:	2e01      	cmp	r6, #1
   bc110:	d112      	bne.n	bc138 <__gethex+0x2f0>
   bc112:	9a04      	ldr	r2, [sp, #16]
   bc114:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bc118:	6013      	str	r3, [r2, #0]
   bc11a:	2301      	movs	r3, #1
   bc11c:	6123      	str	r3, [r4, #16]
   bc11e:	f8c9 3000 	str.w	r3, [r9]
   bc122:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bc124:	2762      	movs	r7, #98	; 0x62
   bc126:	601c      	str	r4, [r3, #0]
   bc128:	e723      	b.n	bbf72 <__gethex+0x12a>
   bc12a:	bf00      	nop
   bc12c:	000bda84 	.word	0x000bda84
   bc130:	000bda11 	.word	0x000bda11
   bc134:	000bda22 	.word	0x000bda22
   bc138:	1e71      	subs	r1, r6, #1
   bc13a:	4620      	mov	r0, r4
   bc13c:	f000 fe42 	bl	bcdc4 <__any_on>
   bc140:	2800      	cmp	r0, #0
   bc142:	d1e6      	bne.n	bc112 <__gethex+0x2ca>
   bc144:	ee18 0a10 	vmov	r0, s16
   bc148:	4621      	mov	r1, r4
   bc14a:	f000 f9db 	bl	bc504 <_Bfree>
   bc14e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bc150:	2300      	movs	r3, #0
   bc152:	6013      	str	r3, [r2, #0]
   bc154:	2750      	movs	r7, #80	; 0x50
   bc156:	e70c      	b.n	bbf72 <__gethex+0x12a>
   bc158:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc15a:	2b00      	cmp	r3, #0
   bc15c:	d1f2      	bne.n	bc144 <__gethex+0x2fc>
   bc15e:	e7d8      	b.n	bc112 <__gethex+0x2ca>
   bc160:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc162:	2b00      	cmp	r3, #0
   bc164:	d1d5      	bne.n	bc112 <__gethex+0x2ca>
   bc166:	e7ed      	b.n	bc144 <__gethex+0x2fc>
   bc168:	1e6f      	subs	r7, r5, #1
   bc16a:	f1ba 0f00 	cmp.w	sl, #0
   bc16e:	d131      	bne.n	bc1d4 <__gethex+0x38c>
   bc170:	b127      	cbz	r7, bc17c <__gethex+0x334>
   bc172:	4639      	mov	r1, r7
   bc174:	4620      	mov	r0, r4
   bc176:	f000 fe25 	bl	bcdc4 <__any_on>
   bc17a:	4682      	mov	sl, r0
   bc17c:	117b      	asrs	r3, r7, #5
   bc17e:	2101      	movs	r1, #1
   bc180:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bc184:	f007 071f 	and.w	r7, r7, #31
   bc188:	fa01 f707 	lsl.w	r7, r1, r7
   bc18c:	421f      	tst	r7, r3
   bc18e:	4629      	mov	r1, r5
   bc190:	4620      	mov	r0, r4
   bc192:	bf18      	it	ne
   bc194:	f04a 0a02 	orrne.w	sl, sl, #2
   bc198:	1b76      	subs	r6, r6, r5
   bc19a:	f7ff fded 	bl	bbd78 <rshift>
   bc19e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bc1a2:	2702      	movs	r7, #2
   bc1a4:	f1ba 0f00 	cmp.w	sl, #0
   bc1a8:	d048      	beq.n	bc23c <__gethex+0x3f4>
   bc1aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bc1ae:	2b02      	cmp	r3, #2
   bc1b0:	d015      	beq.n	bc1de <__gethex+0x396>
   bc1b2:	2b03      	cmp	r3, #3
   bc1b4:	d017      	beq.n	bc1e6 <__gethex+0x39e>
   bc1b6:	2b01      	cmp	r3, #1
   bc1b8:	d109      	bne.n	bc1ce <__gethex+0x386>
   bc1ba:	f01a 0f02 	tst.w	sl, #2
   bc1be:	d006      	beq.n	bc1ce <__gethex+0x386>
   bc1c0:	f8d9 0000 	ldr.w	r0, [r9]
   bc1c4:	ea4a 0a00 	orr.w	sl, sl, r0
   bc1c8:	f01a 0f01 	tst.w	sl, #1
   bc1cc:	d10e      	bne.n	bc1ec <__gethex+0x3a4>
   bc1ce:	f047 0710 	orr.w	r7, r7, #16
   bc1d2:	e033      	b.n	bc23c <__gethex+0x3f4>
   bc1d4:	f04f 0a01 	mov.w	sl, #1
   bc1d8:	e7d0      	b.n	bc17c <__gethex+0x334>
   bc1da:	2701      	movs	r7, #1
   bc1dc:	e7e2      	b.n	bc1a4 <__gethex+0x35c>
   bc1de:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc1e0:	f1c3 0301 	rsb	r3, r3, #1
   bc1e4:	9315      	str	r3, [sp, #84]	; 0x54
   bc1e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc1e8:	2b00      	cmp	r3, #0
   bc1ea:	d0f0      	beq.n	bc1ce <__gethex+0x386>
   bc1ec:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bc1f0:	f104 0314 	add.w	r3, r4, #20
   bc1f4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bc1f8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bc1fc:	f04f 0c00 	mov.w	ip, #0
   bc200:	4618      	mov	r0, r3
   bc202:	f853 2b04 	ldr.w	r2, [r3], #4
   bc206:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bc20a:	d01c      	beq.n	bc246 <__gethex+0x3fe>
   bc20c:	3201      	adds	r2, #1
   bc20e:	6002      	str	r2, [r0, #0]
   bc210:	2f02      	cmp	r7, #2
   bc212:	f104 0314 	add.w	r3, r4, #20
   bc216:	d13f      	bne.n	bc298 <__gethex+0x450>
   bc218:	f8d8 2000 	ldr.w	r2, [r8]
   bc21c:	3a01      	subs	r2, #1
   bc21e:	42b2      	cmp	r2, r6
   bc220:	d10a      	bne.n	bc238 <__gethex+0x3f0>
   bc222:	1171      	asrs	r1, r6, #5
   bc224:	2201      	movs	r2, #1
   bc226:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bc22a:	f006 061f 	and.w	r6, r6, #31
   bc22e:	fa02 f606 	lsl.w	r6, r2, r6
   bc232:	421e      	tst	r6, r3
   bc234:	bf18      	it	ne
   bc236:	4617      	movne	r7, r2
   bc238:	f047 0720 	orr.w	r7, r7, #32
   bc23c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bc23e:	601c      	str	r4, [r3, #0]
   bc240:	9b04      	ldr	r3, [sp, #16]
   bc242:	601d      	str	r5, [r3, #0]
   bc244:	e695      	b.n	bbf72 <__gethex+0x12a>
   bc246:	4299      	cmp	r1, r3
   bc248:	f843 cc04 	str.w	ip, [r3, #-4]
   bc24c:	d8d8      	bhi.n	bc200 <__gethex+0x3b8>
   bc24e:	68a3      	ldr	r3, [r4, #8]
   bc250:	459b      	cmp	fp, r3
   bc252:	db19      	blt.n	bc288 <__gethex+0x440>
   bc254:	6861      	ldr	r1, [r4, #4]
   bc256:	ee18 0a10 	vmov	r0, s16
   bc25a:	3101      	adds	r1, #1
   bc25c:	f000 f912 	bl	bc484 <_Balloc>
   bc260:	4681      	mov	r9, r0
   bc262:	b918      	cbnz	r0, bc26c <__gethex+0x424>
   bc264:	4b1a      	ldr	r3, [pc, #104]	; (bc2d0 <__gethex+0x488>)
   bc266:	4602      	mov	r2, r0
   bc268:	2184      	movs	r1, #132	; 0x84
   bc26a:	e6a8      	b.n	bbfbe <__gethex+0x176>
   bc26c:	6922      	ldr	r2, [r4, #16]
   bc26e:	3202      	adds	r2, #2
   bc270:	f104 010c 	add.w	r1, r4, #12
   bc274:	0092      	lsls	r2, r2, #2
   bc276:	300c      	adds	r0, #12
   bc278:	f7fe fdb1 	bl	badde <memcpy>
   bc27c:	4621      	mov	r1, r4
   bc27e:	ee18 0a10 	vmov	r0, s16
   bc282:	f000 f93f 	bl	bc504 <_Bfree>
   bc286:	464c      	mov	r4, r9
   bc288:	6923      	ldr	r3, [r4, #16]
   bc28a:	1c5a      	adds	r2, r3, #1
   bc28c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bc290:	6122      	str	r2, [r4, #16]
   bc292:	2201      	movs	r2, #1
   bc294:	615a      	str	r2, [r3, #20]
   bc296:	e7bb      	b.n	bc210 <__gethex+0x3c8>
   bc298:	6922      	ldr	r2, [r4, #16]
   bc29a:	455a      	cmp	r2, fp
   bc29c:	dd0b      	ble.n	bc2b6 <__gethex+0x46e>
   bc29e:	2101      	movs	r1, #1
   bc2a0:	4620      	mov	r0, r4
   bc2a2:	f7ff fd69 	bl	bbd78 <rshift>
   bc2a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bc2aa:	3501      	adds	r5, #1
   bc2ac:	42ab      	cmp	r3, r5
   bc2ae:	f6ff aed0 	blt.w	bc052 <__gethex+0x20a>
   bc2b2:	2701      	movs	r7, #1
   bc2b4:	e7c0      	b.n	bc238 <__gethex+0x3f0>
   bc2b6:	f016 061f 	ands.w	r6, r6, #31
   bc2ba:	d0fa      	beq.n	bc2b2 <__gethex+0x46a>
   bc2bc:	4453      	add	r3, sl
   bc2be:	f1c6 0620 	rsb	r6, r6, #32
   bc2c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bc2c6:	f000 f9cf 	bl	bc668 <__hi0bits>
   bc2ca:	42b0      	cmp	r0, r6
   bc2cc:	dbe7      	blt.n	bc29e <__gethex+0x456>
   bc2ce:	e7f0      	b.n	bc2b2 <__gethex+0x46a>
   bc2d0:	000bda11 	.word	0x000bda11

000bc2d4 <L_shift>:
   bc2d4:	f1c2 0208 	rsb	r2, r2, #8
   bc2d8:	0092      	lsls	r2, r2, #2
   bc2da:	b570      	push	{r4, r5, r6, lr}
   bc2dc:	f1c2 0620 	rsb	r6, r2, #32
   bc2e0:	6843      	ldr	r3, [r0, #4]
   bc2e2:	6804      	ldr	r4, [r0, #0]
   bc2e4:	fa03 f506 	lsl.w	r5, r3, r6
   bc2e8:	432c      	orrs	r4, r5
   bc2ea:	40d3      	lsrs	r3, r2
   bc2ec:	6004      	str	r4, [r0, #0]
   bc2ee:	f840 3f04 	str.w	r3, [r0, #4]!
   bc2f2:	4288      	cmp	r0, r1
   bc2f4:	d3f4      	bcc.n	bc2e0 <L_shift+0xc>
   bc2f6:	bd70      	pop	{r4, r5, r6, pc}

000bc2f8 <__match>:
   bc2f8:	b530      	push	{r4, r5, lr}
   bc2fa:	6803      	ldr	r3, [r0, #0]
   bc2fc:	3301      	adds	r3, #1
   bc2fe:	f811 4b01 	ldrb.w	r4, [r1], #1
   bc302:	b914      	cbnz	r4, bc30a <__match+0x12>
   bc304:	6003      	str	r3, [r0, #0]
   bc306:	2001      	movs	r0, #1
   bc308:	bd30      	pop	{r4, r5, pc}
   bc30a:	f813 2b01 	ldrb.w	r2, [r3], #1
   bc30e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bc312:	2d19      	cmp	r5, #25
   bc314:	bf98      	it	ls
   bc316:	3220      	addls	r2, #32
   bc318:	42a2      	cmp	r2, r4
   bc31a:	d0f0      	beq.n	bc2fe <__match+0x6>
   bc31c:	2000      	movs	r0, #0
   bc31e:	e7f3      	b.n	bc308 <__match+0x10>

000bc320 <__hexnan>:
   bc320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc324:	680b      	ldr	r3, [r1, #0]
   bc326:	115e      	asrs	r6, r3, #5
   bc328:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bc32c:	f013 031f 	ands.w	r3, r3, #31
   bc330:	b087      	sub	sp, #28
   bc332:	bf18      	it	ne
   bc334:	3604      	addne	r6, #4
   bc336:	2500      	movs	r5, #0
   bc338:	1f37      	subs	r7, r6, #4
   bc33a:	4690      	mov	r8, r2
   bc33c:	6802      	ldr	r2, [r0, #0]
   bc33e:	9301      	str	r3, [sp, #4]
   bc340:	4682      	mov	sl, r0
   bc342:	f846 5c04 	str.w	r5, [r6, #-4]
   bc346:	46b9      	mov	r9, r7
   bc348:	463c      	mov	r4, r7
   bc34a:	9502      	str	r5, [sp, #8]
   bc34c:	46ab      	mov	fp, r5
   bc34e:	7851      	ldrb	r1, [r2, #1]
   bc350:	1c53      	adds	r3, r2, #1
   bc352:	9303      	str	r3, [sp, #12]
   bc354:	b341      	cbz	r1, bc3a8 <__hexnan+0x88>
   bc356:	4608      	mov	r0, r1
   bc358:	9205      	str	r2, [sp, #20]
   bc35a:	9104      	str	r1, [sp, #16]
   bc35c:	f7ff fd5e 	bl	bbe1c <__hexdig_fun>
   bc360:	2800      	cmp	r0, #0
   bc362:	d14f      	bne.n	bc404 <__hexnan+0xe4>
   bc364:	9904      	ldr	r1, [sp, #16]
   bc366:	9a05      	ldr	r2, [sp, #20]
   bc368:	2920      	cmp	r1, #32
   bc36a:	d818      	bhi.n	bc39e <__hexnan+0x7e>
   bc36c:	9b02      	ldr	r3, [sp, #8]
   bc36e:	459b      	cmp	fp, r3
   bc370:	dd13      	ble.n	bc39a <__hexnan+0x7a>
   bc372:	454c      	cmp	r4, r9
   bc374:	d206      	bcs.n	bc384 <__hexnan+0x64>
   bc376:	2d07      	cmp	r5, #7
   bc378:	dc04      	bgt.n	bc384 <__hexnan+0x64>
   bc37a:	462a      	mov	r2, r5
   bc37c:	4649      	mov	r1, r9
   bc37e:	4620      	mov	r0, r4
   bc380:	f7ff ffa8 	bl	bc2d4 <L_shift>
   bc384:	4544      	cmp	r4, r8
   bc386:	d950      	bls.n	bc42a <__hexnan+0x10a>
   bc388:	2300      	movs	r3, #0
   bc38a:	f1a4 0904 	sub.w	r9, r4, #4
   bc38e:	f844 3c04 	str.w	r3, [r4, #-4]
   bc392:	f8cd b008 	str.w	fp, [sp, #8]
   bc396:	464c      	mov	r4, r9
   bc398:	461d      	mov	r5, r3
   bc39a:	9a03      	ldr	r2, [sp, #12]
   bc39c:	e7d7      	b.n	bc34e <__hexnan+0x2e>
   bc39e:	2929      	cmp	r1, #41	; 0x29
   bc3a0:	d156      	bne.n	bc450 <__hexnan+0x130>
   bc3a2:	3202      	adds	r2, #2
   bc3a4:	f8ca 2000 	str.w	r2, [sl]
   bc3a8:	f1bb 0f00 	cmp.w	fp, #0
   bc3ac:	d050      	beq.n	bc450 <__hexnan+0x130>
   bc3ae:	454c      	cmp	r4, r9
   bc3b0:	d206      	bcs.n	bc3c0 <__hexnan+0xa0>
   bc3b2:	2d07      	cmp	r5, #7
   bc3b4:	dc04      	bgt.n	bc3c0 <__hexnan+0xa0>
   bc3b6:	462a      	mov	r2, r5
   bc3b8:	4649      	mov	r1, r9
   bc3ba:	4620      	mov	r0, r4
   bc3bc:	f7ff ff8a 	bl	bc2d4 <L_shift>
   bc3c0:	4544      	cmp	r4, r8
   bc3c2:	d934      	bls.n	bc42e <__hexnan+0x10e>
   bc3c4:	f1a8 0204 	sub.w	r2, r8, #4
   bc3c8:	4623      	mov	r3, r4
   bc3ca:	f853 1b04 	ldr.w	r1, [r3], #4
   bc3ce:	f842 1f04 	str.w	r1, [r2, #4]!
   bc3d2:	429f      	cmp	r7, r3
   bc3d4:	d2f9      	bcs.n	bc3ca <__hexnan+0xaa>
   bc3d6:	1b3b      	subs	r3, r7, r4
   bc3d8:	f023 0303 	bic.w	r3, r3, #3
   bc3dc:	3304      	adds	r3, #4
   bc3de:	3401      	adds	r4, #1
   bc3e0:	3e03      	subs	r6, #3
   bc3e2:	42b4      	cmp	r4, r6
   bc3e4:	bf88      	it	hi
   bc3e6:	2304      	movhi	r3, #4
   bc3e8:	4443      	add	r3, r8
   bc3ea:	2200      	movs	r2, #0
   bc3ec:	f843 2b04 	str.w	r2, [r3], #4
   bc3f0:	429f      	cmp	r7, r3
   bc3f2:	d2fb      	bcs.n	bc3ec <__hexnan+0xcc>
   bc3f4:	683b      	ldr	r3, [r7, #0]
   bc3f6:	b91b      	cbnz	r3, bc400 <__hexnan+0xe0>
   bc3f8:	4547      	cmp	r7, r8
   bc3fa:	d127      	bne.n	bc44c <__hexnan+0x12c>
   bc3fc:	2301      	movs	r3, #1
   bc3fe:	603b      	str	r3, [r7, #0]
   bc400:	2005      	movs	r0, #5
   bc402:	e026      	b.n	bc452 <__hexnan+0x132>
   bc404:	3501      	adds	r5, #1
   bc406:	2d08      	cmp	r5, #8
   bc408:	f10b 0b01 	add.w	fp, fp, #1
   bc40c:	dd06      	ble.n	bc41c <__hexnan+0xfc>
   bc40e:	4544      	cmp	r4, r8
   bc410:	d9c3      	bls.n	bc39a <__hexnan+0x7a>
   bc412:	2300      	movs	r3, #0
   bc414:	f844 3c04 	str.w	r3, [r4, #-4]
   bc418:	2501      	movs	r5, #1
   bc41a:	3c04      	subs	r4, #4
   bc41c:	6822      	ldr	r2, [r4, #0]
   bc41e:	f000 000f 	and.w	r0, r0, #15
   bc422:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bc426:	6022      	str	r2, [r4, #0]
   bc428:	e7b7      	b.n	bc39a <__hexnan+0x7a>
   bc42a:	2508      	movs	r5, #8
   bc42c:	e7b5      	b.n	bc39a <__hexnan+0x7a>
   bc42e:	9b01      	ldr	r3, [sp, #4]
   bc430:	2b00      	cmp	r3, #0
   bc432:	d0df      	beq.n	bc3f4 <__hexnan+0xd4>
   bc434:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc438:	f1c3 0320 	rsb	r3, r3, #32
   bc43c:	fa22 f303 	lsr.w	r3, r2, r3
   bc440:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bc444:	401a      	ands	r2, r3
   bc446:	f846 2c04 	str.w	r2, [r6, #-4]
   bc44a:	e7d3      	b.n	bc3f4 <__hexnan+0xd4>
   bc44c:	3f04      	subs	r7, #4
   bc44e:	e7d1      	b.n	bc3f4 <__hexnan+0xd4>
   bc450:	2004      	movs	r0, #4
   bc452:	b007      	add	sp, #28
   bc454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bc458 <__retarget_lock_acquire_recursive>:
   bc458:	4770      	bx	lr

000bc45a <__retarget_lock_release>:
   bc45a:	4770      	bx	lr

000bc45c <__retarget_lock_release_recursive>:
   bc45c:	4770      	bx	lr

000bc45e <__ascii_mbtowc>:
   bc45e:	b082      	sub	sp, #8
   bc460:	b901      	cbnz	r1, bc464 <__ascii_mbtowc+0x6>
   bc462:	a901      	add	r1, sp, #4
   bc464:	b142      	cbz	r2, bc478 <__ascii_mbtowc+0x1a>
   bc466:	b14b      	cbz	r3, bc47c <__ascii_mbtowc+0x1e>
   bc468:	7813      	ldrb	r3, [r2, #0]
   bc46a:	600b      	str	r3, [r1, #0]
   bc46c:	7812      	ldrb	r2, [r2, #0]
   bc46e:	1e10      	subs	r0, r2, #0
   bc470:	bf18      	it	ne
   bc472:	2001      	movne	r0, #1
   bc474:	b002      	add	sp, #8
   bc476:	4770      	bx	lr
   bc478:	4610      	mov	r0, r2
   bc47a:	e7fb      	b.n	bc474 <__ascii_mbtowc+0x16>
   bc47c:	f06f 0001 	mvn.w	r0, #1
   bc480:	e7f8      	b.n	bc474 <__ascii_mbtowc+0x16>
	...

000bc484 <_Balloc>:
   bc484:	b570      	push	{r4, r5, r6, lr}
   bc486:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bc488:	4604      	mov	r4, r0
   bc48a:	460d      	mov	r5, r1
   bc48c:	b976      	cbnz	r6, bc4ac <_Balloc+0x28>
   bc48e:	2010      	movs	r0, #16
   bc490:	f7fb f956 	bl	b7740 <malloc>
   bc494:	4602      	mov	r2, r0
   bc496:	6260      	str	r0, [r4, #36]	; 0x24
   bc498:	b920      	cbnz	r0, bc4a4 <_Balloc+0x20>
   bc49a:	4b18      	ldr	r3, [pc, #96]	; (bc4fc <_Balloc+0x78>)
   bc49c:	4818      	ldr	r0, [pc, #96]	; (bc500 <_Balloc+0x7c>)
   bc49e:	2166      	movs	r1, #102	; 0x66
   bc4a0:	f7fb f98e 	bl	b77c0 <__assert_func>
   bc4a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bc4a8:	6006      	str	r6, [r0, #0]
   bc4aa:	60c6      	str	r6, [r0, #12]
   bc4ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bc4ae:	68f3      	ldr	r3, [r6, #12]
   bc4b0:	b183      	cbz	r3, bc4d4 <_Balloc+0x50>
   bc4b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bc4b4:	68db      	ldr	r3, [r3, #12]
   bc4b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bc4ba:	b9b8      	cbnz	r0, bc4ec <_Balloc+0x68>
   bc4bc:	2101      	movs	r1, #1
   bc4be:	fa01 f605 	lsl.w	r6, r1, r5
   bc4c2:	1d72      	adds	r2, r6, #5
   bc4c4:	0092      	lsls	r2, r2, #2
   bc4c6:	4620      	mov	r0, r4
   bc4c8:	f000 fc9d 	bl	bce06 <_calloc_r>
   bc4cc:	b160      	cbz	r0, bc4e8 <_Balloc+0x64>
   bc4ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bc4d2:	e00e      	b.n	bc4f2 <_Balloc+0x6e>
   bc4d4:	2221      	movs	r2, #33	; 0x21
   bc4d6:	2104      	movs	r1, #4
   bc4d8:	4620      	mov	r0, r4
   bc4da:	f000 fc94 	bl	bce06 <_calloc_r>
   bc4de:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bc4e0:	60f0      	str	r0, [r6, #12]
   bc4e2:	68db      	ldr	r3, [r3, #12]
   bc4e4:	2b00      	cmp	r3, #0
   bc4e6:	d1e4      	bne.n	bc4b2 <_Balloc+0x2e>
   bc4e8:	2000      	movs	r0, #0
   bc4ea:	bd70      	pop	{r4, r5, r6, pc}
   bc4ec:	6802      	ldr	r2, [r0, #0]
   bc4ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bc4f2:	2300      	movs	r3, #0
   bc4f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bc4f8:	e7f7      	b.n	bc4ea <_Balloc+0x66>
   bc4fa:	bf00      	nop
   bc4fc:	000bd83d 	.word	0x000bd83d
   bc500:	000bda98 	.word	0x000bda98

000bc504 <_Bfree>:
   bc504:	b570      	push	{r4, r5, r6, lr}
   bc506:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bc508:	4605      	mov	r5, r0
   bc50a:	460c      	mov	r4, r1
   bc50c:	b976      	cbnz	r6, bc52c <_Bfree+0x28>
   bc50e:	2010      	movs	r0, #16
   bc510:	f7fb f916 	bl	b7740 <malloc>
   bc514:	4602      	mov	r2, r0
   bc516:	6268      	str	r0, [r5, #36]	; 0x24
   bc518:	b920      	cbnz	r0, bc524 <_Bfree+0x20>
   bc51a:	4b09      	ldr	r3, [pc, #36]	; (bc540 <_Bfree+0x3c>)
   bc51c:	4809      	ldr	r0, [pc, #36]	; (bc544 <_Bfree+0x40>)
   bc51e:	218a      	movs	r1, #138	; 0x8a
   bc520:	f7fb f94e 	bl	b77c0 <__assert_func>
   bc524:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bc528:	6006      	str	r6, [r0, #0]
   bc52a:	60c6      	str	r6, [r0, #12]
   bc52c:	b13c      	cbz	r4, bc53e <_Bfree+0x3a>
   bc52e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bc530:	6862      	ldr	r2, [r4, #4]
   bc532:	68db      	ldr	r3, [r3, #12]
   bc534:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bc538:	6021      	str	r1, [r4, #0]
   bc53a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bc53e:	bd70      	pop	{r4, r5, r6, pc}
   bc540:	000bd83d 	.word	0x000bd83d
   bc544:	000bda98 	.word	0x000bda98

000bc548 <__multadd>:
   bc548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc54c:	690d      	ldr	r5, [r1, #16]
   bc54e:	4607      	mov	r7, r0
   bc550:	460c      	mov	r4, r1
   bc552:	461e      	mov	r6, r3
   bc554:	f101 0c14 	add.w	ip, r1, #20
   bc558:	2000      	movs	r0, #0
   bc55a:	f8dc 3000 	ldr.w	r3, [ip]
   bc55e:	b299      	uxth	r1, r3
   bc560:	fb02 6101 	mla	r1, r2, r1, r6
   bc564:	0c1e      	lsrs	r6, r3, #16
   bc566:	0c0b      	lsrs	r3, r1, #16
   bc568:	fb02 3306 	mla	r3, r2, r6, r3
   bc56c:	b289      	uxth	r1, r1
   bc56e:	3001      	adds	r0, #1
   bc570:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bc574:	4285      	cmp	r5, r0
   bc576:	f84c 1b04 	str.w	r1, [ip], #4
   bc57a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bc57e:	dcec      	bgt.n	bc55a <__multadd+0x12>
   bc580:	b30e      	cbz	r6, bc5c6 <__multadd+0x7e>
   bc582:	68a3      	ldr	r3, [r4, #8]
   bc584:	42ab      	cmp	r3, r5
   bc586:	dc19      	bgt.n	bc5bc <__multadd+0x74>
   bc588:	6861      	ldr	r1, [r4, #4]
   bc58a:	4638      	mov	r0, r7
   bc58c:	3101      	adds	r1, #1
   bc58e:	f7ff ff79 	bl	bc484 <_Balloc>
   bc592:	4680      	mov	r8, r0
   bc594:	b928      	cbnz	r0, bc5a2 <__multadd+0x5a>
   bc596:	4602      	mov	r2, r0
   bc598:	4b0c      	ldr	r3, [pc, #48]	; (bc5cc <__multadd+0x84>)
   bc59a:	480d      	ldr	r0, [pc, #52]	; (bc5d0 <__multadd+0x88>)
   bc59c:	21b5      	movs	r1, #181	; 0xb5
   bc59e:	f7fb f90f 	bl	b77c0 <__assert_func>
   bc5a2:	6922      	ldr	r2, [r4, #16]
   bc5a4:	3202      	adds	r2, #2
   bc5a6:	f104 010c 	add.w	r1, r4, #12
   bc5aa:	0092      	lsls	r2, r2, #2
   bc5ac:	300c      	adds	r0, #12
   bc5ae:	f7fe fc16 	bl	badde <memcpy>
   bc5b2:	4621      	mov	r1, r4
   bc5b4:	4638      	mov	r0, r7
   bc5b6:	f7ff ffa5 	bl	bc504 <_Bfree>
   bc5ba:	4644      	mov	r4, r8
   bc5bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bc5c0:	3501      	adds	r5, #1
   bc5c2:	615e      	str	r6, [r3, #20]
   bc5c4:	6125      	str	r5, [r4, #16]
   bc5c6:	4620      	mov	r0, r4
   bc5c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc5cc:	000bda11 	.word	0x000bda11
   bc5d0:	000bda98 	.word	0x000bda98

000bc5d4 <__s2b>:
   bc5d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc5d8:	460c      	mov	r4, r1
   bc5da:	4615      	mov	r5, r2
   bc5dc:	461f      	mov	r7, r3
   bc5de:	2209      	movs	r2, #9
   bc5e0:	3308      	adds	r3, #8
   bc5e2:	4606      	mov	r6, r0
   bc5e4:	fb93 f3f2 	sdiv	r3, r3, r2
   bc5e8:	2100      	movs	r1, #0
   bc5ea:	2201      	movs	r2, #1
   bc5ec:	429a      	cmp	r2, r3
   bc5ee:	db09      	blt.n	bc604 <__s2b+0x30>
   bc5f0:	4630      	mov	r0, r6
   bc5f2:	f7ff ff47 	bl	bc484 <_Balloc>
   bc5f6:	b940      	cbnz	r0, bc60a <__s2b+0x36>
   bc5f8:	4602      	mov	r2, r0
   bc5fa:	4b19      	ldr	r3, [pc, #100]	; (bc660 <__s2b+0x8c>)
   bc5fc:	4819      	ldr	r0, [pc, #100]	; (bc664 <__s2b+0x90>)
   bc5fe:	21ce      	movs	r1, #206	; 0xce
   bc600:	f7fb f8de 	bl	b77c0 <__assert_func>
   bc604:	0052      	lsls	r2, r2, #1
   bc606:	3101      	adds	r1, #1
   bc608:	e7f0      	b.n	bc5ec <__s2b+0x18>
   bc60a:	9b08      	ldr	r3, [sp, #32]
   bc60c:	6143      	str	r3, [r0, #20]
   bc60e:	2d09      	cmp	r5, #9
   bc610:	f04f 0301 	mov.w	r3, #1
   bc614:	6103      	str	r3, [r0, #16]
   bc616:	dd16      	ble.n	bc646 <__s2b+0x72>
   bc618:	f104 0909 	add.w	r9, r4, #9
   bc61c:	46c8      	mov	r8, r9
   bc61e:	442c      	add	r4, r5
   bc620:	f818 3b01 	ldrb.w	r3, [r8], #1
   bc624:	4601      	mov	r1, r0
   bc626:	3b30      	subs	r3, #48	; 0x30
   bc628:	220a      	movs	r2, #10
   bc62a:	4630      	mov	r0, r6
   bc62c:	f7ff ff8c 	bl	bc548 <__multadd>
   bc630:	45a0      	cmp	r8, r4
   bc632:	d1f5      	bne.n	bc620 <__s2b+0x4c>
   bc634:	f1a5 0408 	sub.w	r4, r5, #8
   bc638:	444c      	add	r4, r9
   bc63a:	1b2d      	subs	r5, r5, r4
   bc63c:	1963      	adds	r3, r4, r5
   bc63e:	42bb      	cmp	r3, r7
   bc640:	db04      	blt.n	bc64c <__s2b+0x78>
   bc642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc646:	340a      	adds	r4, #10
   bc648:	2509      	movs	r5, #9
   bc64a:	e7f6      	b.n	bc63a <__s2b+0x66>
   bc64c:	f814 3b01 	ldrb.w	r3, [r4], #1
   bc650:	4601      	mov	r1, r0
   bc652:	3b30      	subs	r3, #48	; 0x30
   bc654:	220a      	movs	r2, #10
   bc656:	4630      	mov	r0, r6
   bc658:	f7ff ff76 	bl	bc548 <__multadd>
   bc65c:	e7ee      	b.n	bc63c <__s2b+0x68>
   bc65e:	bf00      	nop
   bc660:	000bda11 	.word	0x000bda11
   bc664:	000bda98 	.word	0x000bda98

000bc668 <__hi0bits>:
   bc668:	0c03      	lsrs	r3, r0, #16
   bc66a:	041b      	lsls	r3, r3, #16
   bc66c:	b9d3      	cbnz	r3, bc6a4 <__hi0bits+0x3c>
   bc66e:	0400      	lsls	r0, r0, #16
   bc670:	2310      	movs	r3, #16
   bc672:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bc676:	bf04      	itt	eq
   bc678:	0200      	lsleq	r0, r0, #8
   bc67a:	3308      	addeq	r3, #8
   bc67c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bc680:	bf04      	itt	eq
   bc682:	0100      	lsleq	r0, r0, #4
   bc684:	3304      	addeq	r3, #4
   bc686:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bc68a:	bf04      	itt	eq
   bc68c:	0080      	lsleq	r0, r0, #2
   bc68e:	3302      	addeq	r3, #2
   bc690:	2800      	cmp	r0, #0
   bc692:	db05      	blt.n	bc6a0 <__hi0bits+0x38>
   bc694:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bc698:	f103 0301 	add.w	r3, r3, #1
   bc69c:	bf08      	it	eq
   bc69e:	2320      	moveq	r3, #32
   bc6a0:	4618      	mov	r0, r3
   bc6a2:	4770      	bx	lr
   bc6a4:	2300      	movs	r3, #0
   bc6a6:	e7e4      	b.n	bc672 <__hi0bits+0xa>

000bc6a8 <__lo0bits>:
   bc6a8:	6803      	ldr	r3, [r0, #0]
   bc6aa:	f013 0207 	ands.w	r2, r3, #7
   bc6ae:	4601      	mov	r1, r0
   bc6b0:	d00b      	beq.n	bc6ca <__lo0bits+0x22>
   bc6b2:	07da      	lsls	r2, r3, #31
   bc6b4:	d423      	bmi.n	bc6fe <__lo0bits+0x56>
   bc6b6:	0798      	lsls	r0, r3, #30
   bc6b8:	bf49      	itett	mi
   bc6ba:	085b      	lsrmi	r3, r3, #1
   bc6bc:	089b      	lsrpl	r3, r3, #2
   bc6be:	2001      	movmi	r0, #1
   bc6c0:	600b      	strmi	r3, [r1, #0]
   bc6c2:	bf5c      	itt	pl
   bc6c4:	600b      	strpl	r3, [r1, #0]
   bc6c6:	2002      	movpl	r0, #2
   bc6c8:	4770      	bx	lr
   bc6ca:	b298      	uxth	r0, r3
   bc6cc:	b9a8      	cbnz	r0, bc6fa <__lo0bits+0x52>
   bc6ce:	0c1b      	lsrs	r3, r3, #16
   bc6d0:	2010      	movs	r0, #16
   bc6d2:	b2da      	uxtb	r2, r3
   bc6d4:	b90a      	cbnz	r2, bc6da <__lo0bits+0x32>
   bc6d6:	3008      	adds	r0, #8
   bc6d8:	0a1b      	lsrs	r3, r3, #8
   bc6da:	071a      	lsls	r2, r3, #28
   bc6dc:	bf04      	itt	eq
   bc6de:	091b      	lsreq	r3, r3, #4
   bc6e0:	3004      	addeq	r0, #4
   bc6e2:	079a      	lsls	r2, r3, #30
   bc6e4:	bf04      	itt	eq
   bc6e6:	089b      	lsreq	r3, r3, #2
   bc6e8:	3002      	addeq	r0, #2
   bc6ea:	07da      	lsls	r2, r3, #31
   bc6ec:	d403      	bmi.n	bc6f6 <__lo0bits+0x4e>
   bc6ee:	085b      	lsrs	r3, r3, #1
   bc6f0:	f100 0001 	add.w	r0, r0, #1
   bc6f4:	d005      	beq.n	bc702 <__lo0bits+0x5a>
   bc6f6:	600b      	str	r3, [r1, #0]
   bc6f8:	4770      	bx	lr
   bc6fa:	4610      	mov	r0, r2
   bc6fc:	e7e9      	b.n	bc6d2 <__lo0bits+0x2a>
   bc6fe:	2000      	movs	r0, #0
   bc700:	4770      	bx	lr
   bc702:	2020      	movs	r0, #32
   bc704:	4770      	bx	lr
	...

000bc708 <__i2b>:
   bc708:	b510      	push	{r4, lr}
   bc70a:	460c      	mov	r4, r1
   bc70c:	2101      	movs	r1, #1
   bc70e:	f7ff feb9 	bl	bc484 <_Balloc>
   bc712:	4602      	mov	r2, r0
   bc714:	b928      	cbnz	r0, bc722 <__i2b+0x1a>
   bc716:	4b05      	ldr	r3, [pc, #20]	; (bc72c <__i2b+0x24>)
   bc718:	4805      	ldr	r0, [pc, #20]	; (bc730 <__i2b+0x28>)
   bc71a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bc71e:	f7fb f84f 	bl	b77c0 <__assert_func>
   bc722:	2301      	movs	r3, #1
   bc724:	6144      	str	r4, [r0, #20]
   bc726:	6103      	str	r3, [r0, #16]
   bc728:	bd10      	pop	{r4, pc}
   bc72a:	bf00      	nop
   bc72c:	000bda11 	.word	0x000bda11
   bc730:	000bda98 	.word	0x000bda98

000bc734 <__multiply>:
   bc734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc738:	4691      	mov	r9, r2
   bc73a:	690a      	ldr	r2, [r1, #16]
   bc73c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bc740:	429a      	cmp	r2, r3
   bc742:	bfb8      	it	lt
   bc744:	460b      	movlt	r3, r1
   bc746:	460c      	mov	r4, r1
   bc748:	bfbc      	itt	lt
   bc74a:	464c      	movlt	r4, r9
   bc74c:	4699      	movlt	r9, r3
   bc74e:	6927      	ldr	r7, [r4, #16]
   bc750:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bc754:	68a3      	ldr	r3, [r4, #8]
   bc756:	6861      	ldr	r1, [r4, #4]
   bc758:	eb07 060a 	add.w	r6, r7, sl
   bc75c:	42b3      	cmp	r3, r6
   bc75e:	b085      	sub	sp, #20
   bc760:	bfb8      	it	lt
   bc762:	3101      	addlt	r1, #1
   bc764:	f7ff fe8e 	bl	bc484 <_Balloc>
   bc768:	b930      	cbnz	r0, bc778 <__multiply+0x44>
   bc76a:	4602      	mov	r2, r0
   bc76c:	4b44      	ldr	r3, [pc, #272]	; (bc880 <__multiply+0x14c>)
   bc76e:	4845      	ldr	r0, [pc, #276]	; (bc884 <__multiply+0x150>)
   bc770:	f240 115d 	movw	r1, #349	; 0x15d
   bc774:	f7fb f824 	bl	b77c0 <__assert_func>
   bc778:	f100 0514 	add.w	r5, r0, #20
   bc77c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bc780:	462b      	mov	r3, r5
   bc782:	2200      	movs	r2, #0
   bc784:	4543      	cmp	r3, r8
   bc786:	d321      	bcc.n	bc7cc <__multiply+0x98>
   bc788:	f104 0314 	add.w	r3, r4, #20
   bc78c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bc790:	f109 0314 	add.w	r3, r9, #20
   bc794:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bc798:	9202      	str	r2, [sp, #8]
   bc79a:	1b3a      	subs	r2, r7, r4
   bc79c:	3a15      	subs	r2, #21
   bc79e:	f022 0203 	bic.w	r2, r2, #3
   bc7a2:	3204      	adds	r2, #4
   bc7a4:	f104 0115 	add.w	r1, r4, #21
   bc7a8:	428f      	cmp	r7, r1
   bc7aa:	bf38      	it	cc
   bc7ac:	2204      	movcc	r2, #4
   bc7ae:	9201      	str	r2, [sp, #4]
   bc7b0:	9a02      	ldr	r2, [sp, #8]
   bc7b2:	9303      	str	r3, [sp, #12]
   bc7b4:	429a      	cmp	r2, r3
   bc7b6:	d80c      	bhi.n	bc7d2 <__multiply+0x9e>
   bc7b8:	2e00      	cmp	r6, #0
   bc7ba:	dd03      	ble.n	bc7c4 <__multiply+0x90>
   bc7bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bc7c0:	2b00      	cmp	r3, #0
   bc7c2:	d05a      	beq.n	bc87a <__multiply+0x146>
   bc7c4:	6106      	str	r6, [r0, #16]
   bc7c6:	b005      	add	sp, #20
   bc7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc7cc:	f843 2b04 	str.w	r2, [r3], #4
   bc7d0:	e7d8      	b.n	bc784 <__multiply+0x50>
   bc7d2:	f8b3 a000 	ldrh.w	sl, [r3]
   bc7d6:	f1ba 0f00 	cmp.w	sl, #0
   bc7da:	d024      	beq.n	bc826 <__multiply+0xf2>
   bc7dc:	f104 0e14 	add.w	lr, r4, #20
   bc7e0:	46a9      	mov	r9, r5
   bc7e2:	f04f 0c00 	mov.w	ip, #0
   bc7e6:	f85e 2b04 	ldr.w	r2, [lr], #4
   bc7ea:	f8d9 1000 	ldr.w	r1, [r9]
   bc7ee:	fa1f fb82 	uxth.w	fp, r2
   bc7f2:	b289      	uxth	r1, r1
   bc7f4:	fb0a 110b 	mla	r1, sl, fp, r1
   bc7f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bc7fc:	f8d9 2000 	ldr.w	r2, [r9]
   bc800:	4461      	add	r1, ip
   bc802:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bc806:	fb0a c20b 	mla	r2, sl, fp, ip
   bc80a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bc80e:	b289      	uxth	r1, r1
   bc810:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bc814:	4577      	cmp	r7, lr
   bc816:	f849 1b04 	str.w	r1, [r9], #4
   bc81a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bc81e:	d8e2      	bhi.n	bc7e6 <__multiply+0xb2>
   bc820:	9a01      	ldr	r2, [sp, #4]
   bc822:	f845 c002 	str.w	ip, [r5, r2]
   bc826:	9a03      	ldr	r2, [sp, #12]
   bc828:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bc82c:	3304      	adds	r3, #4
   bc82e:	f1b9 0f00 	cmp.w	r9, #0
   bc832:	d020      	beq.n	bc876 <__multiply+0x142>
   bc834:	6829      	ldr	r1, [r5, #0]
   bc836:	f104 0c14 	add.w	ip, r4, #20
   bc83a:	46ae      	mov	lr, r5
   bc83c:	f04f 0a00 	mov.w	sl, #0
   bc840:	f8bc b000 	ldrh.w	fp, [ip]
   bc844:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bc848:	fb09 220b 	mla	r2, r9, fp, r2
   bc84c:	4492      	add	sl, r2
   bc84e:	b289      	uxth	r1, r1
   bc850:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bc854:	f84e 1b04 	str.w	r1, [lr], #4
   bc858:	f85c 2b04 	ldr.w	r2, [ip], #4
   bc85c:	f8be 1000 	ldrh.w	r1, [lr]
   bc860:	0c12      	lsrs	r2, r2, #16
   bc862:	fb09 1102 	mla	r1, r9, r2, r1
   bc866:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bc86a:	4567      	cmp	r7, ip
   bc86c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bc870:	d8e6      	bhi.n	bc840 <__multiply+0x10c>
   bc872:	9a01      	ldr	r2, [sp, #4]
   bc874:	50a9      	str	r1, [r5, r2]
   bc876:	3504      	adds	r5, #4
   bc878:	e79a      	b.n	bc7b0 <__multiply+0x7c>
   bc87a:	3e01      	subs	r6, #1
   bc87c:	e79c      	b.n	bc7b8 <__multiply+0x84>
   bc87e:	bf00      	nop
   bc880:	000bda11 	.word	0x000bda11
   bc884:	000bda98 	.word	0x000bda98

000bc888 <__pow5mult>:
   bc888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc88c:	4615      	mov	r5, r2
   bc88e:	f012 0203 	ands.w	r2, r2, #3
   bc892:	4606      	mov	r6, r0
   bc894:	460f      	mov	r7, r1
   bc896:	d007      	beq.n	bc8a8 <__pow5mult+0x20>
   bc898:	4c25      	ldr	r4, [pc, #148]	; (bc930 <__pow5mult+0xa8>)
   bc89a:	3a01      	subs	r2, #1
   bc89c:	2300      	movs	r3, #0
   bc89e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bc8a2:	f7ff fe51 	bl	bc548 <__multadd>
   bc8a6:	4607      	mov	r7, r0
   bc8a8:	10ad      	asrs	r5, r5, #2
   bc8aa:	d03d      	beq.n	bc928 <__pow5mult+0xa0>
   bc8ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bc8ae:	b97c      	cbnz	r4, bc8d0 <__pow5mult+0x48>
   bc8b0:	2010      	movs	r0, #16
   bc8b2:	f7fa ff45 	bl	b7740 <malloc>
   bc8b6:	4602      	mov	r2, r0
   bc8b8:	6270      	str	r0, [r6, #36]	; 0x24
   bc8ba:	b928      	cbnz	r0, bc8c8 <__pow5mult+0x40>
   bc8bc:	4b1d      	ldr	r3, [pc, #116]	; (bc934 <__pow5mult+0xac>)
   bc8be:	481e      	ldr	r0, [pc, #120]	; (bc938 <__pow5mult+0xb0>)
   bc8c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bc8c4:	f7fa ff7c 	bl	b77c0 <__assert_func>
   bc8c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bc8cc:	6004      	str	r4, [r0, #0]
   bc8ce:	60c4      	str	r4, [r0, #12]
   bc8d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bc8d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bc8d8:	b94c      	cbnz	r4, bc8ee <__pow5mult+0x66>
   bc8da:	f240 2171 	movw	r1, #625	; 0x271
   bc8de:	4630      	mov	r0, r6
   bc8e0:	f7ff ff12 	bl	bc708 <__i2b>
   bc8e4:	2300      	movs	r3, #0
   bc8e6:	f8c8 0008 	str.w	r0, [r8, #8]
   bc8ea:	4604      	mov	r4, r0
   bc8ec:	6003      	str	r3, [r0, #0]
   bc8ee:	f04f 0900 	mov.w	r9, #0
   bc8f2:	07eb      	lsls	r3, r5, #31
   bc8f4:	d50a      	bpl.n	bc90c <__pow5mult+0x84>
   bc8f6:	4639      	mov	r1, r7
   bc8f8:	4622      	mov	r2, r4
   bc8fa:	4630      	mov	r0, r6
   bc8fc:	f7ff ff1a 	bl	bc734 <__multiply>
   bc900:	4639      	mov	r1, r7
   bc902:	4680      	mov	r8, r0
   bc904:	4630      	mov	r0, r6
   bc906:	f7ff fdfd 	bl	bc504 <_Bfree>
   bc90a:	4647      	mov	r7, r8
   bc90c:	106d      	asrs	r5, r5, #1
   bc90e:	d00b      	beq.n	bc928 <__pow5mult+0xa0>
   bc910:	6820      	ldr	r0, [r4, #0]
   bc912:	b938      	cbnz	r0, bc924 <__pow5mult+0x9c>
   bc914:	4622      	mov	r2, r4
   bc916:	4621      	mov	r1, r4
   bc918:	4630      	mov	r0, r6
   bc91a:	f7ff ff0b 	bl	bc734 <__multiply>
   bc91e:	6020      	str	r0, [r4, #0]
   bc920:	f8c0 9000 	str.w	r9, [r0]
   bc924:	4604      	mov	r4, r0
   bc926:	e7e4      	b.n	bc8f2 <__pow5mult+0x6a>
   bc928:	4638      	mov	r0, r7
   bc92a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc92e:	bf00      	nop
   bc930:	000bdbe8 	.word	0x000bdbe8
   bc934:	000bd83d 	.word	0x000bd83d
   bc938:	000bda98 	.word	0x000bda98

000bc93c <__lshift>:
   bc93c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bc940:	460c      	mov	r4, r1
   bc942:	6849      	ldr	r1, [r1, #4]
   bc944:	6923      	ldr	r3, [r4, #16]
   bc946:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bc94a:	68a3      	ldr	r3, [r4, #8]
   bc94c:	4607      	mov	r7, r0
   bc94e:	4691      	mov	r9, r2
   bc950:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bc954:	f108 0601 	add.w	r6, r8, #1
   bc958:	42b3      	cmp	r3, r6
   bc95a:	db0b      	blt.n	bc974 <__lshift+0x38>
   bc95c:	4638      	mov	r0, r7
   bc95e:	f7ff fd91 	bl	bc484 <_Balloc>
   bc962:	4605      	mov	r5, r0
   bc964:	b948      	cbnz	r0, bc97a <__lshift+0x3e>
   bc966:	4602      	mov	r2, r0
   bc968:	4b2a      	ldr	r3, [pc, #168]	; (bca14 <__lshift+0xd8>)
   bc96a:	482b      	ldr	r0, [pc, #172]	; (bca18 <__lshift+0xdc>)
   bc96c:	f240 11d9 	movw	r1, #473	; 0x1d9
   bc970:	f7fa ff26 	bl	b77c0 <__assert_func>
   bc974:	3101      	adds	r1, #1
   bc976:	005b      	lsls	r3, r3, #1
   bc978:	e7ee      	b.n	bc958 <__lshift+0x1c>
   bc97a:	2300      	movs	r3, #0
   bc97c:	f100 0114 	add.w	r1, r0, #20
   bc980:	f100 0210 	add.w	r2, r0, #16
   bc984:	4618      	mov	r0, r3
   bc986:	4553      	cmp	r3, sl
   bc988:	db37      	blt.n	bc9fa <__lshift+0xbe>
   bc98a:	6920      	ldr	r0, [r4, #16]
   bc98c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bc990:	f104 0314 	add.w	r3, r4, #20
   bc994:	f019 091f 	ands.w	r9, r9, #31
   bc998:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bc99c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bc9a0:	d02f      	beq.n	bca02 <__lshift+0xc6>
   bc9a2:	f1c9 0e20 	rsb	lr, r9, #32
   bc9a6:	468a      	mov	sl, r1
   bc9a8:	f04f 0c00 	mov.w	ip, #0
   bc9ac:	681a      	ldr	r2, [r3, #0]
   bc9ae:	fa02 f209 	lsl.w	r2, r2, r9
   bc9b2:	ea42 020c 	orr.w	r2, r2, ip
   bc9b6:	f84a 2b04 	str.w	r2, [sl], #4
   bc9ba:	f853 2b04 	ldr.w	r2, [r3], #4
   bc9be:	4298      	cmp	r0, r3
   bc9c0:	fa22 fc0e 	lsr.w	ip, r2, lr
   bc9c4:	d8f2      	bhi.n	bc9ac <__lshift+0x70>
   bc9c6:	1b03      	subs	r3, r0, r4
   bc9c8:	3b15      	subs	r3, #21
   bc9ca:	f023 0303 	bic.w	r3, r3, #3
   bc9ce:	3304      	adds	r3, #4
   bc9d0:	f104 0215 	add.w	r2, r4, #21
   bc9d4:	4290      	cmp	r0, r2
   bc9d6:	bf38      	it	cc
   bc9d8:	2304      	movcc	r3, #4
   bc9da:	f841 c003 	str.w	ip, [r1, r3]
   bc9de:	f1bc 0f00 	cmp.w	ip, #0
   bc9e2:	d001      	beq.n	bc9e8 <__lshift+0xac>
   bc9e4:	f108 0602 	add.w	r6, r8, #2
   bc9e8:	3e01      	subs	r6, #1
   bc9ea:	4638      	mov	r0, r7
   bc9ec:	612e      	str	r6, [r5, #16]
   bc9ee:	4621      	mov	r1, r4
   bc9f0:	f7ff fd88 	bl	bc504 <_Bfree>
   bc9f4:	4628      	mov	r0, r5
   bc9f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc9fa:	f842 0f04 	str.w	r0, [r2, #4]!
   bc9fe:	3301      	adds	r3, #1
   bca00:	e7c1      	b.n	bc986 <__lshift+0x4a>
   bca02:	3904      	subs	r1, #4
   bca04:	f853 2b04 	ldr.w	r2, [r3], #4
   bca08:	f841 2f04 	str.w	r2, [r1, #4]!
   bca0c:	4298      	cmp	r0, r3
   bca0e:	d8f9      	bhi.n	bca04 <__lshift+0xc8>
   bca10:	e7ea      	b.n	bc9e8 <__lshift+0xac>
   bca12:	bf00      	nop
   bca14:	000bda11 	.word	0x000bda11
   bca18:	000bda98 	.word	0x000bda98

000bca1c <__mcmp>:
   bca1c:	b530      	push	{r4, r5, lr}
   bca1e:	6902      	ldr	r2, [r0, #16]
   bca20:	690c      	ldr	r4, [r1, #16]
   bca22:	1b12      	subs	r2, r2, r4
   bca24:	d10e      	bne.n	bca44 <__mcmp+0x28>
   bca26:	f100 0314 	add.w	r3, r0, #20
   bca2a:	3114      	adds	r1, #20
   bca2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bca30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bca34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bca38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bca3c:	42a5      	cmp	r5, r4
   bca3e:	d003      	beq.n	bca48 <__mcmp+0x2c>
   bca40:	d305      	bcc.n	bca4e <__mcmp+0x32>
   bca42:	2201      	movs	r2, #1
   bca44:	4610      	mov	r0, r2
   bca46:	bd30      	pop	{r4, r5, pc}
   bca48:	4283      	cmp	r3, r0
   bca4a:	d3f3      	bcc.n	bca34 <__mcmp+0x18>
   bca4c:	e7fa      	b.n	bca44 <__mcmp+0x28>
   bca4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bca52:	e7f7      	b.n	bca44 <__mcmp+0x28>

000bca54 <__mdiff>:
   bca54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bca58:	460c      	mov	r4, r1
   bca5a:	4606      	mov	r6, r0
   bca5c:	4611      	mov	r1, r2
   bca5e:	4620      	mov	r0, r4
   bca60:	4690      	mov	r8, r2
   bca62:	f7ff ffdb 	bl	bca1c <__mcmp>
   bca66:	1e05      	subs	r5, r0, #0
   bca68:	d110      	bne.n	bca8c <__mdiff+0x38>
   bca6a:	4629      	mov	r1, r5
   bca6c:	4630      	mov	r0, r6
   bca6e:	f7ff fd09 	bl	bc484 <_Balloc>
   bca72:	b930      	cbnz	r0, bca82 <__mdiff+0x2e>
   bca74:	4b3a      	ldr	r3, [pc, #232]	; (bcb60 <__mdiff+0x10c>)
   bca76:	4602      	mov	r2, r0
   bca78:	f240 2132 	movw	r1, #562	; 0x232
   bca7c:	4839      	ldr	r0, [pc, #228]	; (bcb64 <__mdiff+0x110>)
   bca7e:	f7fa fe9f 	bl	b77c0 <__assert_func>
   bca82:	2301      	movs	r3, #1
   bca84:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bca88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bca8c:	bfa4      	itt	ge
   bca8e:	4643      	movge	r3, r8
   bca90:	46a0      	movge	r8, r4
   bca92:	4630      	mov	r0, r6
   bca94:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bca98:	bfa6      	itte	ge
   bca9a:	461c      	movge	r4, r3
   bca9c:	2500      	movge	r5, #0
   bca9e:	2501      	movlt	r5, #1
   bcaa0:	f7ff fcf0 	bl	bc484 <_Balloc>
   bcaa4:	b920      	cbnz	r0, bcab0 <__mdiff+0x5c>
   bcaa6:	4b2e      	ldr	r3, [pc, #184]	; (bcb60 <__mdiff+0x10c>)
   bcaa8:	4602      	mov	r2, r0
   bcaaa:	f44f 7110 	mov.w	r1, #576	; 0x240
   bcaae:	e7e5      	b.n	bca7c <__mdiff+0x28>
   bcab0:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bcab4:	6926      	ldr	r6, [r4, #16]
   bcab6:	60c5      	str	r5, [r0, #12]
   bcab8:	f104 0914 	add.w	r9, r4, #20
   bcabc:	f108 0514 	add.w	r5, r8, #20
   bcac0:	f100 0e14 	add.w	lr, r0, #20
   bcac4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bcac8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bcacc:	f108 0210 	add.w	r2, r8, #16
   bcad0:	46f2      	mov	sl, lr
   bcad2:	2100      	movs	r1, #0
   bcad4:	f859 3b04 	ldr.w	r3, [r9], #4
   bcad8:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bcadc:	fa1f f883 	uxth.w	r8, r3
   bcae0:	fa11 f18b 	uxtah	r1, r1, fp
   bcae4:	0c1b      	lsrs	r3, r3, #16
   bcae6:	eba1 0808 	sub.w	r8, r1, r8
   bcaea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bcaee:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bcaf2:	fa1f f888 	uxth.w	r8, r8
   bcaf6:	1419      	asrs	r1, r3, #16
   bcaf8:	454e      	cmp	r6, r9
   bcafa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bcafe:	f84a 3b04 	str.w	r3, [sl], #4
   bcb02:	d8e7      	bhi.n	bcad4 <__mdiff+0x80>
   bcb04:	1b33      	subs	r3, r6, r4
   bcb06:	3b15      	subs	r3, #21
   bcb08:	f023 0303 	bic.w	r3, r3, #3
   bcb0c:	3304      	adds	r3, #4
   bcb0e:	3415      	adds	r4, #21
   bcb10:	42a6      	cmp	r6, r4
   bcb12:	bf38      	it	cc
   bcb14:	2304      	movcc	r3, #4
   bcb16:	441d      	add	r5, r3
   bcb18:	4473      	add	r3, lr
   bcb1a:	469e      	mov	lr, r3
   bcb1c:	462e      	mov	r6, r5
   bcb1e:	4566      	cmp	r6, ip
   bcb20:	d30e      	bcc.n	bcb40 <__mdiff+0xec>
   bcb22:	f10c 0203 	add.w	r2, ip, #3
   bcb26:	1b52      	subs	r2, r2, r5
   bcb28:	f022 0203 	bic.w	r2, r2, #3
   bcb2c:	3d03      	subs	r5, #3
   bcb2e:	45ac      	cmp	ip, r5
   bcb30:	bf38      	it	cc
   bcb32:	2200      	movcc	r2, #0
   bcb34:	441a      	add	r2, r3
   bcb36:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bcb3a:	b17b      	cbz	r3, bcb5c <__mdiff+0x108>
   bcb3c:	6107      	str	r7, [r0, #16]
   bcb3e:	e7a3      	b.n	bca88 <__mdiff+0x34>
   bcb40:	f856 8b04 	ldr.w	r8, [r6], #4
   bcb44:	fa11 f288 	uxtah	r2, r1, r8
   bcb48:	1414      	asrs	r4, r2, #16
   bcb4a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bcb4e:	b292      	uxth	r2, r2
   bcb50:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bcb54:	f84e 2b04 	str.w	r2, [lr], #4
   bcb58:	1421      	asrs	r1, r4, #16
   bcb5a:	e7e0      	b.n	bcb1e <__mdiff+0xca>
   bcb5c:	3f01      	subs	r7, #1
   bcb5e:	e7ea      	b.n	bcb36 <__mdiff+0xe2>
   bcb60:	000bda11 	.word	0x000bda11
   bcb64:	000bda98 	.word	0x000bda98

000bcb68 <__ulp>:
   bcb68:	b082      	sub	sp, #8
   bcb6a:	ed8d 0b00 	vstr	d0, [sp]
   bcb6e:	9b01      	ldr	r3, [sp, #4]
   bcb70:	4912      	ldr	r1, [pc, #72]	; (bcbbc <__ulp+0x54>)
   bcb72:	4019      	ands	r1, r3
   bcb74:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bcb78:	2900      	cmp	r1, #0
   bcb7a:	dd05      	ble.n	bcb88 <__ulp+0x20>
   bcb7c:	2200      	movs	r2, #0
   bcb7e:	460b      	mov	r3, r1
   bcb80:	ec43 2b10 	vmov	d0, r2, r3
   bcb84:	b002      	add	sp, #8
   bcb86:	4770      	bx	lr
   bcb88:	4249      	negs	r1, r1
   bcb8a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bcb8e:	ea4f 5021 	mov.w	r0, r1, asr #20
   bcb92:	f04f 0200 	mov.w	r2, #0
   bcb96:	f04f 0300 	mov.w	r3, #0
   bcb9a:	da04      	bge.n	bcba6 <__ulp+0x3e>
   bcb9c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bcba0:	fa41 f300 	asr.w	r3, r1, r0
   bcba4:	e7ec      	b.n	bcb80 <__ulp+0x18>
   bcba6:	f1a0 0114 	sub.w	r1, r0, #20
   bcbaa:	291e      	cmp	r1, #30
   bcbac:	bfda      	itte	le
   bcbae:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bcbb2:	fa20 f101 	lsrle.w	r1, r0, r1
   bcbb6:	2101      	movgt	r1, #1
   bcbb8:	460a      	mov	r2, r1
   bcbba:	e7e1      	b.n	bcb80 <__ulp+0x18>
   bcbbc:	7ff00000 	.word	0x7ff00000

000bcbc0 <__b2d>:
   bcbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bcbc2:	6905      	ldr	r5, [r0, #16]
   bcbc4:	f100 0714 	add.w	r7, r0, #20
   bcbc8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bcbcc:	1f2e      	subs	r6, r5, #4
   bcbce:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bcbd2:	4620      	mov	r0, r4
   bcbd4:	f7ff fd48 	bl	bc668 <__hi0bits>
   bcbd8:	f1c0 0320 	rsb	r3, r0, #32
   bcbdc:	280a      	cmp	r0, #10
   bcbde:	f8df c07c 	ldr.w	ip, [pc, #124]	; bcc5c <__b2d+0x9c>
   bcbe2:	600b      	str	r3, [r1, #0]
   bcbe4:	dc14      	bgt.n	bcc10 <__b2d+0x50>
   bcbe6:	f1c0 0e0b 	rsb	lr, r0, #11
   bcbea:	fa24 f10e 	lsr.w	r1, r4, lr
   bcbee:	42b7      	cmp	r7, r6
   bcbf0:	ea41 030c 	orr.w	r3, r1, ip
   bcbf4:	bf34      	ite	cc
   bcbf6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bcbfa:	2100      	movcs	r1, #0
   bcbfc:	3015      	adds	r0, #21
   bcbfe:	fa04 f000 	lsl.w	r0, r4, r0
   bcc02:	fa21 f10e 	lsr.w	r1, r1, lr
   bcc06:	ea40 0201 	orr.w	r2, r0, r1
   bcc0a:	ec43 2b10 	vmov	d0, r2, r3
   bcc0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bcc10:	42b7      	cmp	r7, r6
   bcc12:	bf3a      	itte	cc
   bcc14:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bcc18:	f1a5 0608 	subcc.w	r6, r5, #8
   bcc1c:	2100      	movcs	r1, #0
   bcc1e:	380b      	subs	r0, #11
   bcc20:	d017      	beq.n	bcc52 <__b2d+0x92>
   bcc22:	f1c0 0c20 	rsb	ip, r0, #32
   bcc26:	fa04 f500 	lsl.w	r5, r4, r0
   bcc2a:	42be      	cmp	r6, r7
   bcc2c:	fa21 f40c 	lsr.w	r4, r1, ip
   bcc30:	ea45 0504 	orr.w	r5, r5, r4
   bcc34:	bf8c      	ite	hi
   bcc36:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bcc3a:	2400      	movls	r4, #0
   bcc3c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bcc40:	fa01 f000 	lsl.w	r0, r1, r0
   bcc44:	fa24 f40c 	lsr.w	r4, r4, ip
   bcc48:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bcc4c:	ea40 0204 	orr.w	r2, r0, r4
   bcc50:	e7db      	b.n	bcc0a <__b2d+0x4a>
   bcc52:	ea44 030c 	orr.w	r3, r4, ip
   bcc56:	460a      	mov	r2, r1
   bcc58:	e7d7      	b.n	bcc0a <__b2d+0x4a>
   bcc5a:	bf00      	nop
   bcc5c:	3ff00000 	.word	0x3ff00000

000bcc60 <__d2b>:
   bcc60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bcc64:	4689      	mov	r9, r1
   bcc66:	2101      	movs	r1, #1
   bcc68:	ec57 6b10 	vmov	r6, r7, d0
   bcc6c:	4690      	mov	r8, r2
   bcc6e:	f7ff fc09 	bl	bc484 <_Balloc>
   bcc72:	4604      	mov	r4, r0
   bcc74:	b930      	cbnz	r0, bcc84 <__d2b+0x24>
   bcc76:	4602      	mov	r2, r0
   bcc78:	4b25      	ldr	r3, [pc, #148]	; (bcd10 <__d2b+0xb0>)
   bcc7a:	4826      	ldr	r0, [pc, #152]	; (bcd14 <__d2b+0xb4>)
   bcc7c:	f240 310a 	movw	r1, #778	; 0x30a
   bcc80:	f7fa fd9e 	bl	b77c0 <__assert_func>
   bcc84:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bcc88:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bcc8c:	bb35      	cbnz	r5, bccdc <__d2b+0x7c>
   bcc8e:	2e00      	cmp	r6, #0
   bcc90:	9301      	str	r3, [sp, #4]
   bcc92:	d028      	beq.n	bcce6 <__d2b+0x86>
   bcc94:	4668      	mov	r0, sp
   bcc96:	9600      	str	r6, [sp, #0]
   bcc98:	f7ff fd06 	bl	bc6a8 <__lo0bits>
   bcc9c:	9900      	ldr	r1, [sp, #0]
   bcc9e:	b300      	cbz	r0, bcce2 <__d2b+0x82>
   bcca0:	9a01      	ldr	r2, [sp, #4]
   bcca2:	f1c0 0320 	rsb	r3, r0, #32
   bcca6:	fa02 f303 	lsl.w	r3, r2, r3
   bccaa:	430b      	orrs	r3, r1
   bccac:	40c2      	lsrs	r2, r0
   bccae:	6163      	str	r3, [r4, #20]
   bccb0:	9201      	str	r2, [sp, #4]
   bccb2:	9b01      	ldr	r3, [sp, #4]
   bccb4:	61a3      	str	r3, [r4, #24]
   bccb6:	2b00      	cmp	r3, #0
   bccb8:	bf14      	ite	ne
   bccba:	2202      	movne	r2, #2
   bccbc:	2201      	moveq	r2, #1
   bccbe:	6122      	str	r2, [r4, #16]
   bccc0:	b1d5      	cbz	r5, bccf8 <__d2b+0x98>
   bccc2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bccc6:	4405      	add	r5, r0
   bccc8:	f8c9 5000 	str.w	r5, [r9]
   bcccc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bccd0:	f8c8 0000 	str.w	r0, [r8]
   bccd4:	4620      	mov	r0, r4
   bccd6:	b003      	add	sp, #12
   bccd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bccdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bcce0:	e7d5      	b.n	bcc8e <__d2b+0x2e>
   bcce2:	6161      	str	r1, [r4, #20]
   bcce4:	e7e5      	b.n	bccb2 <__d2b+0x52>
   bcce6:	a801      	add	r0, sp, #4
   bcce8:	f7ff fcde 	bl	bc6a8 <__lo0bits>
   bccec:	9b01      	ldr	r3, [sp, #4]
   bccee:	6163      	str	r3, [r4, #20]
   bccf0:	2201      	movs	r2, #1
   bccf2:	6122      	str	r2, [r4, #16]
   bccf4:	3020      	adds	r0, #32
   bccf6:	e7e3      	b.n	bccc0 <__d2b+0x60>
   bccf8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bccfc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bcd00:	f8c9 0000 	str.w	r0, [r9]
   bcd04:	6918      	ldr	r0, [r3, #16]
   bcd06:	f7ff fcaf 	bl	bc668 <__hi0bits>
   bcd0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bcd0e:	e7df      	b.n	bccd0 <__d2b+0x70>
   bcd10:	000bda11 	.word	0x000bda11
   bcd14:	000bda98 	.word	0x000bda98

000bcd18 <__ratio>:
   bcd18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcd1c:	4688      	mov	r8, r1
   bcd1e:	4669      	mov	r1, sp
   bcd20:	4681      	mov	r9, r0
   bcd22:	f7ff ff4d 	bl	bcbc0 <__b2d>
   bcd26:	a901      	add	r1, sp, #4
   bcd28:	4640      	mov	r0, r8
   bcd2a:	ec55 4b10 	vmov	r4, r5, d0
   bcd2e:	f7ff ff47 	bl	bcbc0 <__b2d>
   bcd32:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bcd36:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bcd3a:	eba3 0c02 	sub.w	ip, r3, r2
   bcd3e:	e9dd 3200 	ldrd	r3, r2, [sp]
   bcd42:	1a9b      	subs	r3, r3, r2
   bcd44:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bcd48:	ec51 0b10 	vmov	r0, r1, d0
   bcd4c:	2b00      	cmp	r3, #0
   bcd4e:	bfd6      	itet	le
   bcd50:	460a      	movle	r2, r1
   bcd52:	462a      	movgt	r2, r5
   bcd54:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bcd58:	468b      	mov	fp, r1
   bcd5a:	462f      	mov	r7, r5
   bcd5c:	bfd4      	ite	le
   bcd5e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bcd62:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bcd66:	4620      	mov	r0, r4
   bcd68:	ee10 2a10 	vmov	r2, s0
   bcd6c:	465b      	mov	r3, fp
   bcd6e:	4639      	mov	r1, r7
   bcd70:	f7fd fe00 	bl	ba974 <__aeabi_ddiv>
   bcd74:	ec41 0b10 	vmov	d0, r0, r1
   bcd78:	b003      	add	sp, #12
   bcd7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bcd7e <__copybits>:
   bcd7e:	3901      	subs	r1, #1
   bcd80:	b570      	push	{r4, r5, r6, lr}
   bcd82:	1149      	asrs	r1, r1, #5
   bcd84:	6914      	ldr	r4, [r2, #16]
   bcd86:	3101      	adds	r1, #1
   bcd88:	f102 0314 	add.w	r3, r2, #20
   bcd8c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bcd90:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bcd94:	1f05      	subs	r5, r0, #4
   bcd96:	42a3      	cmp	r3, r4
   bcd98:	d30c      	bcc.n	bcdb4 <__copybits+0x36>
   bcd9a:	1aa3      	subs	r3, r4, r2
   bcd9c:	3b11      	subs	r3, #17
   bcd9e:	f023 0303 	bic.w	r3, r3, #3
   bcda2:	3211      	adds	r2, #17
   bcda4:	42a2      	cmp	r2, r4
   bcda6:	bf88      	it	hi
   bcda8:	2300      	movhi	r3, #0
   bcdaa:	4418      	add	r0, r3
   bcdac:	2300      	movs	r3, #0
   bcdae:	4288      	cmp	r0, r1
   bcdb0:	d305      	bcc.n	bcdbe <__copybits+0x40>
   bcdb2:	bd70      	pop	{r4, r5, r6, pc}
   bcdb4:	f853 6b04 	ldr.w	r6, [r3], #4
   bcdb8:	f845 6f04 	str.w	r6, [r5, #4]!
   bcdbc:	e7eb      	b.n	bcd96 <__copybits+0x18>
   bcdbe:	f840 3b04 	str.w	r3, [r0], #4
   bcdc2:	e7f4      	b.n	bcdae <__copybits+0x30>

000bcdc4 <__any_on>:
   bcdc4:	f100 0214 	add.w	r2, r0, #20
   bcdc8:	6900      	ldr	r0, [r0, #16]
   bcdca:	114b      	asrs	r3, r1, #5
   bcdcc:	4298      	cmp	r0, r3
   bcdce:	b510      	push	{r4, lr}
   bcdd0:	db11      	blt.n	bcdf6 <__any_on+0x32>
   bcdd2:	dd0a      	ble.n	bcdea <__any_on+0x26>
   bcdd4:	f011 011f 	ands.w	r1, r1, #31
   bcdd8:	d007      	beq.n	bcdea <__any_on+0x26>
   bcdda:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bcdde:	fa24 f001 	lsr.w	r0, r4, r1
   bcde2:	fa00 f101 	lsl.w	r1, r0, r1
   bcde6:	428c      	cmp	r4, r1
   bcde8:	d10b      	bne.n	bce02 <__any_on+0x3e>
   bcdea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bcdee:	4293      	cmp	r3, r2
   bcdf0:	d803      	bhi.n	bcdfa <__any_on+0x36>
   bcdf2:	2000      	movs	r0, #0
   bcdf4:	bd10      	pop	{r4, pc}
   bcdf6:	4603      	mov	r3, r0
   bcdf8:	e7f7      	b.n	bcdea <__any_on+0x26>
   bcdfa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bcdfe:	2900      	cmp	r1, #0
   bce00:	d0f5      	beq.n	bcdee <__any_on+0x2a>
   bce02:	2001      	movs	r0, #1
   bce04:	e7f6      	b.n	bcdf4 <__any_on+0x30>

000bce06 <_calloc_r>:
   bce06:	b513      	push	{r0, r1, r4, lr}
   bce08:	434a      	muls	r2, r1
   bce0a:	4611      	mov	r1, r2
   bce0c:	9201      	str	r2, [sp, #4]
   bce0e:	f7fa fcc7 	bl	b77a0 <_malloc_r>
   bce12:	4604      	mov	r4, r0
   bce14:	b118      	cbz	r0, bce1e <_calloc_r+0x18>
   bce16:	9a01      	ldr	r2, [sp, #4]
   bce18:	2100      	movs	r1, #0
   bce1a:	f7fe f808 	bl	bae2e <memset>
   bce1e:	4620      	mov	r0, r4
   bce20:	b002      	add	sp, #8
   bce22:	bd10      	pop	{r4, pc}
   bce24:	0000      	movs	r0, r0
	...

000bce28 <nan>:
   bce28:	ed9f 0b01 	vldr	d0, [pc, #4]	; bce30 <nan+0x8>
   bce2c:	4770      	bx	lr
   bce2e:	bf00      	nop
   bce30:	00000000 	.word	0x00000000
   bce34:	7ff80000 	.word	0x7ff80000

000bce38 <__ascii_wctomb>:
   bce38:	b149      	cbz	r1, bce4e <__ascii_wctomb+0x16>
   bce3a:	2aff      	cmp	r2, #255	; 0xff
   bce3c:	bf85      	ittet	hi
   bce3e:	238a      	movhi	r3, #138	; 0x8a
   bce40:	6003      	strhi	r3, [r0, #0]
   bce42:	700a      	strbls	r2, [r1, #0]
   bce44:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   bce48:	bf98      	it	ls
   bce4a:	2001      	movls	r0, #1
   bce4c:	4770      	bx	lr
   bce4e:	4608      	mov	r0, r1
   bce50:	4770      	bx	lr
	...

000bce54 <__aeabi_d2lz>:
   bce54:	b538      	push	{r3, r4, r5, lr}
   bce56:	2200      	movs	r2, #0
   bce58:	2300      	movs	r3, #0
   bce5a:	4604      	mov	r4, r0
   bce5c:	460d      	mov	r5, r1
   bce5e:	f7fd fed1 	bl	bac04 <__aeabi_dcmplt>
   bce62:	b928      	cbnz	r0, bce70 <__aeabi_d2lz+0x1c>
   bce64:	4620      	mov	r0, r4
   bce66:	4629      	mov	r1, r5
   bce68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bce6c:	f7fd bf78 	b.w	bad60 <__aeabi_d2ulz>
   bce70:	4620      	mov	r0, r4
   bce72:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bce76:	f7fd ff73 	bl	bad60 <__aeabi_d2ulz>
   bce7a:	4240      	negs	r0, r0
   bce7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bce80:	bd38      	pop	{r3, r4, r5, pc}
   bce82:	bf00      	nop

000bce84 <dynalib_user>:
   bce84:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bce94:	0000 0000 6162 6973 5f63 7473 6972 676e     ....basic_string
   bcea4:	3a3a 4d5f 635f 6e6f 7473 7572 7463 6e20     ::_M_construct n
   bceb4:	6c75 206c 6f6e 2074 6176 696c 0064 450a     ull not valid..E
   bcec4:	746e 7265 7420 6568 6c20 6e69 2065 6f63     nter the line co
   bced4:	6f6c 2072 666f 7420 6568 6420 7665 6369     lor of the devic
   bcee4:	2065 6977 6874 7420 6568 6220 696c 6b6e     e with the blink
   bcef4:	6e69 2067 454c 3a44 0020 6572 6563 7669     ing LED: .receiv
   bcf04:	2065 6572 0064 6572 6563 7669 2065 6c62     e red.receive bl
   bcf14:	6575 7200 6365 6965 6576 6720 6572 6e65     ue.receive green
   bcf24:	0a00 6553 7571 6e65 6563 203a 0a00 6572     ..Sequence: ..re
   bcf34:	7571 7365 2074 6f63 6564 3120 202c 6461     quest code 1, ad
   bcf44:	7264 7365 3a73 0020 7274 6e61 6d73 7369     dress: .transmis
   bcf54:	6973 6e6f 7220 6365 6569 6576 2064 7266     sion recieved fr
   bcf64:	6d6f 203a 6400 7665 6369 2065 6469 203a     om: .device id: 
   bcf74:	7400 6172 736e 696d 7373 6f69 206e 6573     .transmission se
   bcf84:	746e 7420 3a6f 0020 6572 7571 7365 2074     nt to: .request 
   bcf94:	6f63 6564 3220 202c 6461 7264 7365 3a73     code 2, address:
   bcfa4:	0020 6f63 666e 696c 7463 7620 7265 6669      .conflict verif
   bcfb4:	6369 7461 6f69 3a6e 0020 430a 6e6f 656e     ication: ..Conne
   bcfc4:	7463 6465 7420 3a6f 0020 6163 6e6e 746f     cted to: .cannot
   bcfd4:	6320 6572 7461 2065 7473 3a64 763a 6365      create std::vec
   bcfe4:	6f74 2072 616c 6772 7265 7420 6168 206e     tor larger than 
   bcff4:	616d 5f78 6973 657a 2928 4600 3046 3030     max_size().FF000
   bd004:	0030 4130 3030 3030 3000 3030 4630 0046     0.0A0000.0000FF.
   bd014:	3030 3030 4130 6200 6e72 4600 4646 3046     00000A.brn.FFFF0
   bd024:	0030 4130 4130 3030 3000 4630 3046 0030     0.0A0A00.00FF00.
   bd034:	3030 4130 3030 6f00 6772 4600 3846 3030     000A00.org.FF800
   bd044:	0030 4130 3530 3030 3800 3030 3830 0030     0.0A0500.800080.
   bd054:	3530 3030 3530 7000 6e69 006b 4646 3038     050005.pink.FF80
   bd064:	4646 3000 3041 3035 0041 4536 3034 3030     FF.0A050A.6E4000
   bd074:	3130 422d 4135 2d33 3346 3339 452d 4130     01-B5A3-F393-E0A
   bd084:	2d39 3545 4530 3432 4344 4143 4539 3600     9-E50E24DCCA9E.6
   bd094:	3445 3030 3030 2d32 3542 3341 462d 3933     E400002-B5A3-F39
   bd0a4:	2d33 3045 3941 452d 3035 3245 4434 4343     3-E0A9-E50E24DCC
   bd0b4:	3941 0045 4536 3034 3030 3330 422d 4135     A9E.6E400003-B5A
   bd0c4:	2d33 3346 3339 452d 4130 2d39 3545 4530     3-F393-E0A9-E50E
   bd0d4:	3432 4344 4143 4539 7400 0078 7872 6c00     24DCCA9E.tx.rx.l
   bd0e4:	7061 2e69 7274 6e61 6973 6374 6968 6163     api.transitchica
   bd0f4:	6f67 632e 6d6f 6c00 6f6f 2070 7473 7261     go.com.loop star
   bd104:	0074 6925 202c 2f00 7061 2f69 2e31 2f30     t.%i, ./api/1.0/
   bd114:	7474 6f70 6973 6974 6e6f 2e73 7361 7870     ttpositions.aspx
   bd124:	6b3f 7965 303d 6630 3066 3039 3336 6163     ?key=00ff09063ca
   bd134:	3461 3736 3834 3334 6434 6635 3361 3132     a46748434d5fa321
   bd144:	3064 3834 2666 7472 003d 6f26 7475 7570     d048f&rt=.&outpu
   bd154:	5474 7079 3d65 534a 4e4f 4700 5445 7000     tType=JSON.GET.p
   bd164:	7261 6973 676e 7000 7261 6973 676e 6620     arsing.parsing f
   bd174:	6961 656c 0064 7463 7461 0074 6f72 7475     ailed.ctatt.rout
   bd184:	0065 7274 6961 006e 656e 7478 7453 4e61     e.train.nextStaN
   bd194:	006d 6564 7473 6d4e 7400 4472 0072 616c     m.destNm.trDr.la
   bd1a4:	0074 6f6c 006e 7262 6165 006b 7274 6961     t.lon.break.trai
   bd1b4:	206e 6925 203a 7300 6f6c 6570 3020 7300     n %i: .slope 0.s
   bd1c4:	6f6c 6570 6d20 7861 6300 6c61 7563 616c     lope max.calcula
   bd1d4:	6974 6e6f 7300 6765 656d 746e 7020 736f     tion.segment pos
   bd1e4:	6200 6665 726f 0065 6661 6574 0072 694c     .before.after.Li
   bd1f4:	646e 6e65 6f00 7475 7570 2074 6576 7463     nden.output vect
   bd204:	726f 2500 2c69 2520 2c69 2520 0066 6573     or.%i, %i, %f.se
   bd214:	646e 6e69 0067 6172 6c69 7020 7261 2074     nding.rail part 
   bd224:	6925 0000                                   %i..

000bd228 <_ZTV16JsonParserStaticILj10000ELj1000EE>:
	...
   bd230:	40b9 000b 40cd 000b 6341 6563 7470 2f00     .@...@..Accept./
   bd240:	2f2a 0000 0019 0000 0003 0000 0007 0000     */..............
   bd250:	0005 0000 000c 0000 0008 0000 0005 0000     ................
   bd260:	0005 0000 0005 0000 0019 0000 0005 0000     ................
   bd270:	0005 0000 0005 0000 0005 0000 000f 0000     ................
   bd280:	0005 0000 0000 0000 0014 0000 0014 0000     ................
   bd290:	000f 0000 0005 0000 0005 0000 000f 0000     ................
   bd2a0:	000f 0000 000f 0000 000a 0000 000c 0000     ................
   bd2b0:	0007 0000 0001 0000 0005 0000 0005 0000     ................
   bd2c0:	0005 0000 0005 0000 0014 0000 0000 0000     ................
   bd2d0:	0014 0000 0007 0000 0007 0000 0006 0000     ................
   bd2e0:	0005 0000 0005 0000 0005 0000 0005 0000     ................
   bd2f0:	4820 5454 2f50 2e31 0d30 000a 6c63 736f      HTTP/1.0...clos
   bd300:	0065 6f43 6e6e 6365 6974 6e6f 4800 534f     e.Connection.HOS
   bd310:	0054 6f43 746e 6e65 2d74 654c 676e 6874     T.Content-Length
   bd320:	5000 534f 0054 0a0d 0a0d 2500 3430 0078     .POST......%04x.

000bd330 <_ZTV10JsonBuffer>:
	...
   bd338:	69ad 000b 69c9 000b                         .i...i..

000bd340 <_ZTV10JsonParser>:
	...
   bd348:	69dd 000b 6a01 000b                         .i...j..

000bd350 <_ZTV13JsonReference>:
	...
   bd358:	699d 000b 699f 000b 7341 6573 7472 6f69     .i...i..Assertio
   bd368:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   bd378:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   bd388:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   bd398:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   bd3a8:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   bd3b8:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   bd3c8:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   bd3d8:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   bd3e8:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   bd3f8:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   bd408:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   bd418:	6976 6563 002e 6f43 6e6e 6365 6574 2064     vice..Connected 
   bd428:	7962 4320 6e65 7274 6c61 6420 7665 6369     by Central devic
   bd438:	2e65 4400 7369 6f63 6e6e 6365 6574 2064     e..Disconnected 
   bd448:	7962 7220 6d65 746f 2065 6564 6976 6563     by remote device
   bd458:	002e 7544 6c70 6369 7461 6465 6320 6168     ..Duplicated cha
   bd468:	6172 7463 7265 7369 6974 2063 6163 6e6e     racteristic cann
   bd478:	746f 6220 2065 6461 6564 2e64 4600 6961     ot be added..Fai
   bd488:	656c 2064 6f74 6120 7070 6e65 2064 6f6c     led to append lo
   bd498:	6163 206c 6863 7261 6361 6574 6972 7473     cal characterist
   bd4a8:	6369 002e                                   ic..

000bd4ac <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd4b4:	77ed 000b 7851 000b 7937 000b 787b 000b     .w..Qx..7y..{x..
   bd4c4:	77f1 000b                                   .w..

000bd4c8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd4d0:	77e9 000b 785f 000b 77eb 000b 7881 000b     .w.._x...w...x..
   bd4e0:	7811 000b                                   .x..

000bd4e4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd4ec:	77e7 000b 786d 000b 80f1 000b 7887 000b     .w..mx.......x..
   bd4fc:	7831 000b                                   1x..

000bd500 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bd50c:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000bd51e <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bd51e:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000bd52e <_ZN8particle7BleUuid9BASE_UUIDE>:
   bd52e:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000bd540 <_ZTVN5spark13EthernetClassE>:
	...
   bd548:	8b9f 000b 8b95 000b 8b8b 000b 8b81 000b     ................
   bd558:	8b75 000b 8b69 000b 8e25 000b 8e2d 000b     u...i...%...-...
   bd568:	8b5d 000b 8b55 000b 8b4b 000b 8b41 000b     ]...U...K...A...
   bd578:	8e5d 000b                                   ]...

000bd57c <_ZTV7TwoWire>:
	...
   bd584:	8bbd 000b 8c07 000b 8bdf 000b 8bbf 000b     ................
   bd594:	8be7 000b 8bef 000b 8bf7 000b 8bff 000b     ................

000bd5a4 <_ZTV9IPAddress>:
	...
   bd5ac:	8cc9 000b 8cb9 000b 8cbb 000b 7061 0070     ............app.

000bd5bc <_ZTVN5spark12NetworkClassE>:
	...
   bd5c4:	8de5 000b 8def 000b 8df9 000b 8e03 000b     ................
   bd5d4:	8e0d 000b 8e19 000b 8e25 000b 8e2d 000b     ........%...-...
   bd5e4:	8e35 000b 8e41 000b 8e49 000b 8e53 000b     5...A...I...S...
   bd5f4:	8e5d 000b 6977 6972 676e 7200 6365 2076     ]...wiring.recv 
   bd604:	7265 6f72 2072 203d 6425 0000               error = %d..

000bd610 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd618:	9395 000b 93b9 000b 98eb 000b 93c7 000b     ................
   bd628:	9399 000b                                   ....

000bd62c <_ZTV9TCPClient>:
	...
   bd634:	9445 000b 9479 000b 9311 000b 932b 000b     E...y.......+...
   bd644:	9781 000b 9355 000b 95f7 000b 9389 000b     ....U...........
   bd654:	9689 000b 94c9 000b 9625 000b 9835 000b     ........%...5...
   bd664:	95c5 000b 938b 000b 933d 000b 93cd 000b     ........=.......
   bd674:	94a9 000b 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
   bd684:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000bd694 <_ZTV11USARTSerial>:
	...
   bd69c:	9905 000b 9971 000b 9949 000b 8f49 000b     ....q...I...I...
   bd6ac:	9919 000b 9935 000b 9927 000b 9943 000b     ....5...'...C...
   bd6bc:	9907 000b 990b 000b                         ........

000bd6c4 <_ZTV9USBSerial>:
	...
   bd6cc:	99af 000b 9a17 000b 99ed 000b 8f49 000b     ............I...
   bd6dc:	99df 000b 99b1 000b 99c1 000b 9a11 000b     ................
   bd6ec:	99d1 000b 99a9 000b                         ........

000bd6f4 <_ZTVN5spark9WiFiClassE>:
	...
   bd6fc:	9b0f 000b 9b05 000b 9afb 000b 9ab1 000b     ................
   bd70c:	9aef 000b 9ae3 000b 8e25 000b 8e2d 000b     ........%...-...
   bd71c:	9ad7 000b 9acf 000b 9ac5 000b 9abb 000b     ................
   bd72c:	8e5d 000b                                   ]...

000bd730 <_ZSt7nothrow>:
	...

000bd731 <_ZTSSt19_Sp_make_shared_tag>:
   bd731:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bd741:	6572 5f64 6174 0067 0000                     red_tag....

000bd74c <_ZTISt19_Sp_make_shared_tag>:
   bd74c:	d7a4 000b d731 000b 6162 6973 5f63 7473     ....1...basic_st
   bd75c:	6972 676e 3a3a 4d5f 635f 6572 7461 0065     ring::_M_create.

000bd76c <_ZTIN10__cxxabiv117__class_type_infoE>:
   bd76c:	d804 000b d778 000b d828 000b               ....x...(...

000bd778 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bd778:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bd788:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bd798:	0045 0000                                   E...

000bd79c <_ZTVN10__cxxabiv117__class_type_infoE>:
   bd79c:	0000 0000 d76c 000b 9f39 000b 9f4d 000b     ....l...9...M...
   bd7ac:	a0e1 000b a0e1 000b 9fb7 000b 9ef9 000b     ................
   bd7bc:	9f9f 000b 9f61 000b 9f2b 000b               ....a...+...

000bd7c8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bd7c8:	d804 000b d7d4 000b d76c 000b               ........l...

000bd7d4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bd7d4:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bd7e4:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bd7f4:	666e 456f 0000 0000                         nfoE....

000bd7fc <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bd7fc:	0000 0000 d7c8 000b 9fe1 000b 9ff5 000b     ................
   bd80c:	a0e1 000b a0e1 000b 9fb7 000b 9ef9 000b     ................
   bd81c:	a0b5 000b a041 000b a009 000b               ....A.......

000bd828 <_ZTISt9type_info>:
   bd828:	d7a4 000b d830 000b                         ....0...

000bd830 <_ZTSSt9type_info>:
   bd830:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bd840:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bd850:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   bd860:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bd870:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bd880:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bd890:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bd8a0:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   bd8b0:	6e69 7469 0079 6e61 0000 0000               inity.an....

000bd8bc <fpi.1>:
   bd8bc:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bd8cc:	0000 0000                                   ....

000bd8d0 <fpinan.0>:
   bd8d0:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000bd8e8 <tinytens>:
   bd8e8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bd8f8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bd908:	6f43 64ac 0628 1168                         Co.d(.h.

000bd910 <_ctype_>:
   bd910:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bd920:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bd930:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bd940:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bd950:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bd960:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bd970:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bd980:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bd990:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bda10:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bda20:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   bda30:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   bda40:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   bda50:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   bda60:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   bda70:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   bda80:	632e 0000                                   .c..

000bda84 <_C_numeric_locale>:
   bda84:	d4aa 000b d32a 000b 53cc 2003 0043 4f50     ....*....S. C.PO
   bda94:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   bdaa4:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bdab4:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bdac4:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bdad4:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bdae4:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   bdaf4:	0000 0000                                   ....

000bdaf8 <__mprec_bigtens>:
   bdaf8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bdb08:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bdb18:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bdb20 <__mprec_tens>:
   bdb20:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bdb30:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bdb40:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bdb50:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bdb60:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bdb70:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bdb80:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bdb90:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bdba0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bdbb0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bdbc0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bdbd0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bdbe0:	9db4 79d9 7843 44ea                         ...yCx.D

000bdbe8 <p05.0>:
   bdbe8:	0005 0000 0019 0000 007d 0000               ........}...

000bdbf4 <link_const_variable_data_end>:
   bdbf4:	000b5e99 	.word	0x000b5e99
   bdbf8:	000b7255 	.word	0x000b7255
   bdbfc:	000b8b31 	.word	0x000b8b31
   bdc00:	000b8ba9 	.word	0x000b8ba9
   bdc04:	000b8dd5 	.word	0x000b8dd5
   bdc08:	000b8f35 	.word	0x000b8f35
   bdc0c:	000b9071 	.word	0x000b9071
   bdc10:	000b92ed 	.word	0x000b92ed
   bdc14:	000b98f1 	.word	0x000b98f1
   bdc18:	000b9b19 	.word	0x000b9b19

000bdc1c <link_constructors_end>:
   bdc1c:	00000000 	.word	0x00000000
